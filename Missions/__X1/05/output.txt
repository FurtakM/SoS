// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 752 0 2
// PrepareArabian ;
  31: CALL 1369 0 0
// PrepareRussian ;
  35: CALL 3020 0 0
// Action ;
  39: CALL 8440 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// solar_recharge_amount := 0 ;
 262: LD_ADDR_OWVAR 82
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// end ;
 270: LD_VAR 0 1
 274: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 275: LD_EXP 10
 279: NOT
 280: PUSH
 281: LD_EXP 9
 285: NOT
 286: AND
 287: PUSH
 288: LD_EXP 39
 292: NOT
 293: AND
 294: PUSH
 295: LD_EXP 40
 299: NOT
 300: AND
 301: IFFALSE 313
 303: GO 305
 305: DISABLE
// SetAchievement ( ACH_EXT ) ;
 306: LD_STRING ACH_EXT
 308: PPUSH
 309: CALL_OW 543
 313: END
// every 0 0$1 trigger captureCounter >= 6 do
 314: LD_EXP 18
 318: PUSH
 319: LD_INT 6
 321: GREATEREQUAL
 322: IFFALSE 334
 324: GO 326
 326: DISABLE
// SetAchievement ( ACH_KEY ) ;
 327: LD_STRING ACH_KEY
 329: PPUSH
 330: CALL_OW 543
 334: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 335: LD_EXP 19
 339: PUSH
 340: LD_INT 3
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 348: LD_STRING ACH_CHEM
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger debug do var i ;
 356: LD_EXP 1
 360: IFFALSE 444
 362: GO 364
 364: DISABLE
 365: LD_INT 0
 367: PPUSH
// begin enable ;
 368: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 369: LD_ADDR_VAR 0 1
 373: PUSH
 374: LD_INT 22
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 3
 386: PUSH
 387: LD_INT 21
 389: PUSH
 390: LD_INT 3
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 442
// if GetLives ( i ) < 1000 then
 413: LD_VAR 0 1
 417: PPUSH
 418: CALL_OW 256
 422: PUSH
 423: LD_INT 1000
 425: LESS
 426: IFFALSE 440
// SetLives ( i , 1000 ) ;
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_INT 1000
 435: PPUSH
 436: CALL_OW 234
 440: GO 410
 442: POP
 443: POP
// end ; end_of_file
 444: PPOPN 1
 446: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 447: LD_INT 0
 449: PPUSH
// uc_side := side ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_VAR 0 1
 459: ST_TO_ADDR
// uc_nation := nation ;
 460: LD_ADDR_OWVAR 21
 464: PUSH
 465: LD_VAR 0 2
 469: ST_TO_ADDR
// vc_chassis := chassis ;
 470: LD_ADDR_OWVAR 37
 474: PUSH
 475: LD_VAR 0 3
 479: ST_TO_ADDR
// vc_engine := engine ;
 480: LD_ADDR_OWVAR 39
 484: PUSH
 485: LD_VAR 0 4
 489: ST_TO_ADDR
// vc_control := control ;
 490: LD_ADDR_OWVAR 38
 494: PUSH
 495: LD_VAR 0 5
 499: ST_TO_ADDR
// vc_weapon := weapon ;
 500: LD_ADDR_OWVAR 40
 504: PUSH
 505: LD_VAR 0 6
 509: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 510: LD_ADDR_OWVAR 41
 514: PUSH
 515: LD_VAR 0 7
 519: ST_TO_ADDR
// result := CreateVehicle ;
 520: LD_ADDR_VAR 0 8
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// end ;
 530: LD_VAR 0 8
 534: RET
// export function SayX ( units , ident ) ; var i ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
// result := false ;
 539: LD_ADDR_VAR 0 3
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// if not units then
 547: LD_VAR 0 1
 551: NOT
 552: IFFALSE 556
// exit ;
 554: GO 610
// for i in units do
 556: LD_ADDR_VAR 0 4
 560: PUSH
 561: LD_VAR 0 1
 565: PUSH
 566: FOR_IN
 567: IFFALSE 608
// if IsOk ( i ) then
 569: LD_VAR 0 4
 573: PPUSH
 574: CALL_OW 302
 578: IFFALSE 606
// begin Say ( i , ident ) ;
 580: LD_VAR 0 4
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 88
// result := i ;
 594: LD_ADDR_VAR 0 3
 598: PUSH
 599: LD_VAR 0 4
 603: ST_TO_ADDR
// break ;
 604: GO 608
// end ;
 606: GO 566
 608: POP
 609: POP
// end ;
 610: LD_VAR 0 3
 614: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 615: LD_INT 0
 617: PPUSH
 618: PPUSH
// InitUc ;
 619: CALL_OW 18
// InitHc ;
 623: CALL_OW 19
// uc_side := 0 ;
 627: LD_ADDR_OWVAR 20
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// uc_nation := 0 ;
 635: LD_ADDR_OWVAR 21
 639: PUSH
 640: LD_INT 0
 642: ST_TO_ADDR
// for i = 1 to amount do
 643: LD_ADDR_VAR 0 4
 647: PUSH
 648: DOUBLE
 649: LD_INT 1
 651: DEC
 652: ST_TO_ADDR
 653: LD_VAR 0 2
 657: PUSH
 658: FOR_TO
 659: IFFALSE 741
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 661: LD_ADDR_OWVAR 29
 665: PUSH
 666: LD_INT 9
 668: PPUSH
 669: LD_INT 12
 671: PPUSH
 672: CALL_OW 12
 676: PUSH
 677: LD_INT 9
 679: PPUSH
 680: LD_INT 12
 682: PPUSH
 683: CALL_OW 12
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 692: LD_ADDR_OWVAR 35
 696: PUSH
 697: LD_INT 1
 699: NEG
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL_OW 12
 708: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 12
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 722: CALL_OW 44
 726: PPUSH
 727: LD_VAR 0 1
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL_OW 49
// end ;
 739: GO 658
 741: POP
 742: POP
// InitHc ;
 743: CALL_OW 19
// end ;
 747: LD_VAR 0 3
 751: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 752: LD_INT 0
 754: PPUSH
 755: PPUSH
// uc_side := 0 ;
 756: LD_ADDR_OWVAR 20
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// uc_nation := 0 ;
 764: LD_ADDR_OWVAR 21
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// for i := 1 to 3 do
 772: LD_ADDR_VAR 0 4
 776: PUSH
 777: DOUBLE
 778: LD_INT 1
 780: DEC
 781: ST_TO_ADDR
 782: LD_INT 3
 784: PUSH
 785: FOR_TO
 786: IFFALSE 823
// begin hc_class := 21 ;
 788: LD_ADDR_OWVAR 28
 792: PUSH
 793: LD_INT 21
 795: ST_TO_ADDR
// hc_gallery :=  ;
 796: LD_ADDR_OWVAR 33
 800: PUSH
 801: LD_STRING 
 803: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 804: CALL_OW 44
 808: PPUSH
 809: LD_VAR 0 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 785
 823: POP
 824: POP
// for i := 1 to 3 do
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: DOUBLE
 831: LD_INT 1
 833: DEC
 834: ST_TO_ADDR
 835: LD_INT 3
 837: PUSH
 838: FOR_TO
 839: IFFALSE 876
// begin hc_class := 18 ;
 841: LD_ADDR_OWVAR 28
 845: PUSH
 846: LD_INT 18
 848: ST_TO_ADDR
// hc_gallery :=  ;
 849: LD_ADDR_OWVAR 33
 853: PUSH
 854: LD_STRING 
 856: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 857: CALL_OW 44
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// end ;
 874: GO 838
 876: POP
 877: POP
// for i := 1 to 3 do
 878: LD_ADDR_VAR 0 4
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 3
 890: PUSH
 891: FOR_TO
 892: IFFALSE 929
// begin hc_class := 13 ;
 894: LD_ADDR_OWVAR 28
 898: PUSH
 899: LD_INT 13
 901: ST_TO_ADDR
// hc_gallery :=  ;
 902: LD_ADDR_OWVAR 33
 906: PUSH
 907: LD_STRING 
 909: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 910: CALL_OW 44
 914: PPUSH
 915: LD_VAR 0 1
 919: PPUSH
 920: LD_INT 0
 922: PPUSH
 923: CALL_OW 49
// end ;
 927: GO 891
 929: POP
 930: POP
// for i := 1 to 4 do
 931: LD_ADDR_VAR 0 4
 935: PUSH
 936: DOUBLE
 937: LD_INT 1
 939: DEC
 940: ST_TO_ADDR
 941: LD_INT 4
 943: PUSH
 944: FOR_TO
 945: IFFALSE 982
// begin hc_class := class_frog ;
 947: LD_ADDR_OWVAR 28
 951: PUSH
 952: LD_INT 19
 954: ST_TO_ADDR
// hc_gallery :=  ;
 955: LD_ADDR_OWVAR 33
 959: PUSH
 960: LD_STRING 
 962: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 963: CALL_OW 44
 967: PPUSH
 968: LD_VAR 0 2
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 49
// end ;
 980: GO 944
 982: POP
 983: POP
// end ;
 984: LD_VAR 0 3
 988: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
 993: PPUSH
// if not observer or not unit then
 994: LD_VAR 0 1
 998: NOT
 999: PUSH
1000: LD_VAR 0 2
1004: NOT
1005: OR
1006: IFFALSE 1010
// exit ;
1008: GO 1058
// if not See ( GetSide ( observer ) , unit ) then
1010: LD_VAR 0 1
1014: PPUSH
1015: CALL_OW 255
1019: PPUSH
1020: LD_VAR 0 2
1024: PPUSH
1025: CALL_OW 292
1029: NOT
1030: IFFALSE 1034
// exit ;
1032: GO 1058
// result := GetDistUnits ( observer , unit ) < 12 ;
1034: LD_ADDR_VAR 0 3
1038: PUSH
1039: LD_VAR 0 1
1043: PPUSH
1044: LD_VAR 0 2
1048: PPUSH
1049: CALL_OW 296
1053: PUSH
1054: LD_INT 12
1056: LESS
1057: ST_TO_ADDR
// end ;
1058: LD_VAR 0 3
1062: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1063: LD_INT 0
1065: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1066: LD_VAR 0 2
1070: PUSH
1071: LD_INT 1
1073: ARRAY
1074: PPUSH
1075: LD_VAR 0 2
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: CALL_OW 488
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 2
1102: PUSH
1103: LD_INT 2
1105: ARRAY
1106: PPUSH
1107: CALL_OW 428
1111: PUSH
1112: LD_INT 0
1114: EQUAL
1115: AND
1116: IFFALSE 1150
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1118: LD_VAR 0 1
1122: PPUSH
1123: LD_VAR 0 2
1127: PUSH
1128: LD_INT 1
1130: ARRAY
1131: PPUSH
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 3
1145: PPUSH
1146: CALL_OW 48
// end ;
1150: LD_VAR 0 4
1154: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1155: LD_INT 0
1157: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1158: LD_VAR 0 1
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1182: LD_VAR 0 1
1186: PPUSH
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_VAR 0 3
1196: PPUSH
1197: CALL_OW 331
// end ;
1201: LD_VAR 0 5
1205: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1206: LD_INT 0
1208: PPUSH
// if not units then
1209: LD_VAR 0 1
1213: NOT
1214: IFFALSE 1218
// exit ;
1216: GO 1301
// result := true ;
1218: LD_ADDR_VAR 0 4
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_INT 26
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_VAR 0 2
1254: PPUSH
1255: CALL_OW 88
1259: NOT
1260: IFFALSE 1301
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_VAR 0 1
1271: PPUSH
1272: LD_INT 26
1274: PUSH
1275: LD_INT 2
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 72
1286: PUSH
1287: LD_INT 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 3
1295: PPUSH
1296: CALL_OW 88
1300: ST_TO_ADDR
// end ;
1301: LD_VAR 0 4
1305: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1306: LD_INT 0
1308: PPUSH
1309: PPUSH
// if not group then
1310: LD_VAR 0 2
1314: NOT
1315: IFFALSE 1319
// exit ;
1317: GO 1364
// for i in group do
1319: LD_ADDR_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1362
// if See ( side , i ) then
1332: LD_VAR 0 1
1336: PPUSH
1337: LD_VAR 0 4
1341: PPUSH
1342: CALL_OW 292
1346: IFFALSE 1360
// begin result := true ;
1348: LD_ADDR_VAR 0 3
1352: PUSH
1353: LD_INT 1
1355: ST_TO_ADDR
// exit ;
1356: POP
1357: POP
1358: GO 1364
// end ;
1360: GO 1329
1362: POP
1363: POP
// end ; end_of_file
1364: LD_VAR 0 3
1368: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1369: LD_INT 0
1371: PPUSH
1372: PPUSH
// uc_side := 2 ;
1373: LD_ADDR_OWVAR 20
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// uc_nation := 2 ;
1381: LD_ADDR_OWVAR 21
1385: PUSH
1386: LD_INT 2
1388: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1389: LD_ADDR_EXP 21
1393: PUSH
1394: LD_STRING Heike
1396: PPUSH
1397: LD_EXP 1
1401: NOT
1402: PPUSH
1403: LD_EXP 2
1407: PPUSH
1408: CALL 35758 0 3
1412: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1413: LD_ADDR_EXP 24
1417: PUSH
1418: LD_STRING Ibrahim
1420: PPUSH
1421: LD_EXP 1
1425: NOT
1426: PPUSH
1427: LD_EXP 2
1431: PPUSH
1432: CALL 35758 0 3
1436: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1437: LD_ADDR_EXP 22
1441: PUSH
1442: LD_STRING Givi
1444: PPUSH
1445: LD_EXP 1
1449: NOT
1450: PPUSH
1451: LD_EXP 2
1455: PPUSH
1456: CALL 35758 0 3
1460: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1461: LD_ADDR_EXP 25
1465: PUSH
1466: LD_STRING Kamil
1468: PPUSH
1469: LD_EXP 1
1473: NOT
1474: PPUSH
1475: LD_EXP 2
1479: PPUSH
1480: CALL 35758 0 3
1484: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1485: LD_ADDR_EXP 26
1489: PUSH
1490: LD_STRING Kaia
1492: PPUSH
1493: LD_EXP 1
1497: NOT
1498: PPUSH
1499: LD_EXP 2
1503: PPUSH
1504: CALL 35758 0 3
1508: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Sophia
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 35758 0 3
1532: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1533: LD_ADDR_EXP 28
1537: PUSH
1538: LD_STRING Markov
1540: PPUSH
1541: LD_EXP 1
1545: NOT
1546: PPUSH
1547: LD_EXP 2
1551: PPUSH
1552: CALL 35758 0 3
1556: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 33
1561: PUSH
1562: LD_STRING Aviradze
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 35758 0 3
1580: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1581: LD_ADDR_EXP 32
1585: PUSH
1586: LD_STRING Kurt
1588: PPUSH
1589: LD_EXP 1
1593: NOT
1594: PPUSH
1595: LD_EXP 2
1599: PPUSH
1600: CALL 35758 0 3
1604: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1605: LD_ADDR_EXP 23
1609: PUSH
1610: LD_STRING Mike
1612: PPUSH
1613: LD_EXP 1
1617: NOT
1618: PPUSH
1619: LD_EXP 2
1623: PPUSH
1624: CALL 35758 0 3
1628: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1629: LD_ADDR_EXP 30
1633: PUSH
1634: LD_STRING Olaf
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: LD_STRING 
1642: PPUSH
1643: CALL 35758 0 3
1647: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1648: LD_ADDR_EXP 34
1652: PUSH
1653: LD_STRING 04_2_others
1655: PPUSH
1656: CALL_OW 31
1660: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1661: LD_ADDR_EXP 36
1665: PUSH
1666: LD_STRING 04_2_apes
1668: PPUSH
1669: CALL_OW 31
1673: ST_TO_ADDR
// if hasFlamethrower then
1674: LD_EXP 3
1678: IFFALSE 1913
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1680: LD_INT 70
1682: PPUSH
1683: LD_INT 2
1685: PPUSH
1686: LD_INT 2
1688: PPUSH
1689: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1693: LD_ADDR_EXP 35
1697: PUSH
1698: LD_INT 13
1700: PUSH
1701: LD_INT 1
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 27
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: LD_INT 1000
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 13
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 25
1746: PUSH
1747: LD_INT 2
1749: PUSH
1750: LD_INT 1000
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: LD_INT 0
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 1
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 26
1783: PUSH
1784: LD_INT 2
1786: PUSH
1787: LD_INT 1000
1789: PUSH
1790: LD_INT 0
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 13
1811: PUSH
1812: LD_INT 1
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: LD_INT 27
1820: PUSH
1821: LD_INT 2
1823: PUSH
1824: LD_INT 1000
1826: PUSH
1827: LD_INT 0
1829: PUSH
1830: LD_INT 0
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 13
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: LD_INT 32
1857: PUSH
1858: LD_INT 2
1860: PUSH
1861: LD_INT 1000
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: LD_INT 60
1869: PUSH
1870: LD_INT 40
1872: PUSH
1873: LD_INT 20
1875: PUSH
1876: LD_INT 10
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_OWVAR 67
1889: ARRAY
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: ST_TO_ADDR
// end else
1911: GO 2131
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1913: LD_ADDR_EXP 35
1917: PUSH
1918: LD_INT 13
1920: PUSH
1921: LD_INT 1
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 25
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 1000
1935: PUSH
1936: LD_INT 0
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 13
1957: PUSH
1958: LD_INT 1
1960: PUSH
1961: LD_INT 1
1963: PUSH
1964: LD_INT 27
1966: PUSH
1967: LD_INT 2
1969: PUSH
1970: LD_INT 1000
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: LD_INT 0
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 13
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: LD_INT 1
2000: PUSH
2001: LD_INT 24
2003: PUSH
2004: LD_INT 2
2006: PUSH
2007: LD_INT 1000
2009: PUSH
2010: LD_INT 0
2012: PUSH
2013: LD_INT 0
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 13
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: LD_INT 1
2037: PUSH
2038: LD_INT 27
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: LD_INT 1000
2046: PUSH
2047: LD_INT 0
2049: PUSH
2050: LD_INT 0
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 13
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 2
2080: PUSH
2081: LD_INT 1000
2083: PUSH
2084: LD_INT 0
2086: PUSH
2087: LD_INT 50
2089: PUSH
2090: LD_INT 30
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 10
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_OWVAR 67
2109: ARRAY
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: ST_TO_ADDR
// end ; uc_side := 5 ;
2131: LD_ADDR_OWVAR 20
2135: PUSH
2136: LD_INT 5
2138: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2139: LD_ADDR_EXP 29
2143: PUSH
2144: LD_STRING Abdul
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: LD_STRING 
2152: PPUSH
2153: CALL 35758 0 3
2157: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2158: LD_ADDR_EXP 31
2162: PUSH
2163: LD_STRING Omar
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: LD_STRING 
2171: PPUSH
2172: CALL 35758 0 3
2176: ST_TO_ADDR
// end ;
2177: LD_VAR 0 1
2181: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2182: LD_INT 0
2184: PPUSH
2185: PPUSH
2186: PPUSH
2187: PPUSH
2188: PPUSH
// pfx := 04_1_ ;
2189: LD_ADDR_VAR 0 2
2193: PUSH
2194: LD_STRING 04_1_
2196: ST_TO_ADDR
// if HexInfo ( 10 , 16 ) then
2197: LD_INT 10
2199: PPUSH
2200: LD_INT 16
2202: PPUSH
2203: CALL_OW 428
2207: IFFALSE 2232
// ComMoveXY ( HexInfo ( 10 , 16 ) , 18 , 18 ) else
2209: LD_INT 10
2211: PPUSH
2212: LD_INT 16
2214: PPUSH
2215: CALL_OW 428
2219: PPUSH
2220: LD_INT 18
2222: PPUSH
2223: LD_INT 18
2225: PPUSH
2226: CALL_OW 111
2230: GO 2242
// EraseResourceArea ( mat_cans , westSpawnPointArea ) ;
2232: LD_INT 1
2234: PPUSH
2235: LD_INT 14
2237: PPUSH
2238: CALL_OW 286
// repeat wait ( 0 0$1 ) ;
2242: LD_INT 35
2244: PPUSH
2245: CALL_OW 67
// until not HexInfo ( 10 , 16 ) ;
2249: LD_INT 10
2251: PPUSH
2252: LD_INT 16
2254: PPUSH
2255: CALL_OW 428
2259: NOT
2260: IFFALSE 2242
// tmp := [ ] ;
2262: LD_ADDR_VAR 0 4
2266: PUSH
2267: EMPTY
2268: ST_TO_ADDR
// uc_side := 5 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 5
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2285: LD_ADDR_EXP 33
2289: PUSH
2290: LD_STRING Aviradze_L
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_VAR 0 2
2303: PPUSH
2304: CALL 35758 0 3
2308: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2309: LD_EXP 33
2313: PPUSH
2314: LD_INT 2
2316: PPUSH
2317: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2321: LD_EXP 33
2325: PPUSH
2326: LD_INT 14
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: CALL_OW 49
// ComMoveXY ( Aviradze , 25 , 19 ) ;
2336: LD_EXP 33
2340: PPUSH
2341: LD_INT 25
2343: PPUSH
2344: LD_INT 19
2346: PPUSH
2347: CALL_OW 111
// AddComHold ( Aviradze ) ;
2351: LD_EXP 33
2355: PPUSH
2356: CALL_OW 200
// tmp := [ Aviradze ] ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_EXP 33
2369: PUSH
2370: EMPTY
2371: LIST
2372: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2373: LD_INT 70
2375: PPUSH
2376: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2380: LD_STRING Ibrahim_L
2382: PPUSH
2383: LD_EXP 1
2387: NOT
2388: PPUSH
2389: LD_VAR 0 2
2393: PPUSH
2394: CALL 35758 0 3
2398: IFFALSE 2498
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2400: LD_ADDR_EXP 24
2404: PUSH
2405: LD_STRING Ibrahim_L
2407: PPUSH
2408: LD_EXP 1
2412: NOT
2413: PPUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 35758 0 3
2423: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2424: LD_EXP 24
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2436: LD_EXP 24
2440: PPUSH
2441: LD_INT 14
2443: PPUSH
2444: LD_INT 0
2446: PPUSH
2447: CALL_OW 49
// ComMoveXY ( Ibrahim , 25 , 19 ) ;
2451: LD_EXP 24
2455: PPUSH
2456: LD_INT 25
2458: PPUSH
2459: LD_INT 19
2461: PPUSH
2462: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2475: LD_ADDR_VAR 0 4
2479: PUSH
2480: LD_VAR 0 4
2484: PUSH
2485: LD_EXP 24
2489: ADD
2490: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2491: LD_INT 70
2493: PPUSH
2494: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2498: LD_STRING Kaia_L
2500: PPUSH
2501: LD_EXP 1
2505: NOT
2506: PPUSH
2507: LD_VAR 0 2
2511: PPUSH
2512: CALL 35758 0 3
2516: IFFALSE 2616
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2518: LD_ADDR_EXP 26
2522: PUSH
2523: LD_STRING Kaia_L
2525: PPUSH
2526: LD_EXP 1
2530: NOT
2531: PPUSH
2532: LD_VAR 0 2
2536: PPUSH
2537: CALL 35758 0 3
2541: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2542: LD_EXP 26
2546: PPUSH
2547: LD_INT 2
2549: PPUSH
2550: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2554: LD_EXP 26
2558: PPUSH
2559: LD_INT 14
2561: PPUSH
2562: LD_INT 0
2564: PPUSH
2565: CALL_OW 49
// ComMoveXY ( Kaia , 25 , 19 ) ;
2569: LD_EXP 26
2573: PPUSH
2574: LD_INT 25
2576: PPUSH
2577: LD_INT 19
2579: PPUSH
2580: CALL_OW 111
// AddComHold ( Kaia ) ;
2584: LD_EXP 26
2588: PPUSH
2589: CALL_OW 200
// tmp := tmp ^ Kaia ;
2593: LD_ADDR_VAR 0 4
2597: PUSH
2598: LD_VAR 0 4
2602: PUSH
2603: LD_EXP 26
2607: ADD
2608: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2609: LD_INT 70
2611: PPUSH
2612: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2616: LD_STRING Kamil_L
2618: PPUSH
2619: LD_EXP 1
2623: NOT
2624: PPUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: CALL 35758 0 3
2634: IFFALSE 2734
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2636: LD_ADDR_EXP 25
2640: PUSH
2641: LD_STRING Kamil_L
2643: PPUSH
2644: LD_EXP 1
2648: NOT
2649: PPUSH
2650: LD_VAR 0 2
2654: PPUSH
2655: CALL 35758 0 3
2659: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2660: LD_EXP 25
2664: PPUSH
2665: LD_INT 2
2667: PPUSH
2668: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2672: LD_EXP 25
2676: PPUSH
2677: LD_INT 14
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// ComMoveXY ( Kamil , 25 , 19 ) ;
2687: LD_EXP 25
2691: PPUSH
2692: LD_INT 25
2694: PPUSH
2695: LD_INT 19
2697: PPUSH
2698: CALL_OW 111
// AddComHold ( Kamil ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 200
// tmp := tmp ^ Kamil ;
2711: LD_ADDR_VAR 0 4
2715: PUSH
2716: LD_VAR 0 4
2720: PUSH
2721: LD_EXP 25
2725: ADD
2726: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2727: LD_INT 70
2729: PPUSH
2730: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2734: LD_STRING Sophia_L
2736: PPUSH
2737: LD_EXP 1
2741: NOT
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: CALL 35758 0 3
2752: IFFALSE 2852
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2754: LD_ADDR_EXP 27
2758: PUSH
2759: LD_STRING Sophia_L
2761: PPUSH
2762: LD_EXP 1
2766: NOT
2767: PPUSH
2768: LD_VAR 0 2
2772: PPUSH
2773: CALL 35758 0 3
2777: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2778: LD_EXP 27
2782: PPUSH
2783: LD_INT 2
2785: PPUSH
2786: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2790: LD_EXP 27
2794: PPUSH
2795: LD_INT 14
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 49
// ComMoveXY ( Sophia , 25 , 19 ) ;
2805: LD_EXP 27
2809: PPUSH
2810: LD_INT 25
2812: PPUSH
2813: LD_INT 19
2815: PPUSH
2816: CALL_OW 111
// AddComHold ( Sophia ) ;
2820: LD_EXP 27
2824: PPUSH
2825: CALL_OW 200
// tmp := tmp ^ Sophia ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_EXP 27
2843: ADD
2844: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2845: LD_INT 70
2847: PPUSH
2848: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2852: LD_ADDR_VAR 0 5
2856: PUSH
2857: LD_STRING 04_1_others_L
2859: PPUSH
2860: CALL_OW 31
2864: ST_TO_ADDR
// if tmp2 then
2865: LD_VAR 0 5
2869: IFFALSE 2966
// for i in tmp2 do
2871: LD_ADDR_VAR 0 3
2875: PUSH
2876: LD_VAR 0 5
2880: PUSH
2881: FOR_IN
2882: IFFALSE 2964
// begin SetDir ( i , 2 ) ;
2884: LD_VAR 0 3
2888: PPUSH
2889: LD_INT 2
2891: PPUSH
2892: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2896: LD_VAR 0 3
2900: PPUSH
2901: LD_INT 14
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2911: LD_ADDR_EXP 34
2915: PUSH
2916: LD_EXP 34
2920: PPUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL_OW 1
2939: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2940: LD_VAR 0 3
2944: PPUSH
2945: LD_INT 17
2947: PPUSH
2948: LD_INT 14
2950: PPUSH
2951: CALL_OW 111
// wait ( 0 0$2 ) ;
2955: LD_INT 70
2957: PPUSH
2958: CALL_OW 67
// end ;
2962: GO 2881
2964: POP
2965: POP
// for i in tmp union tmp2 do
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 4
2975: PUSH
2976: LD_VAR 0 5
2980: UNION
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3013
// begin SetSide ( i , 2 ) ;
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_INT 2
2992: PPUSH
2993: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2997: LD_VAR 0 3
3001: PPUSH
3002: LD_EXP 21
3006: PPUSH
3007: CALL_OW 112
// end ;
3011: GO 2982
3013: POP
3014: POP
// end ; end_of_file
3015: LD_VAR 0 1
3019: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3020: LD_INT 0
3022: PPUSH
3023: PPUSH
3024: PPUSH
// uc_side := 3 ;
3025: LD_ADDR_OWVAR 20
3029: PUSH
3030: LD_INT 3
3032: ST_TO_ADDR
// uc_nation := 3 ;
3033: LD_ADDR_OWVAR 21
3037: PUSH
3038: LD_INT 3
3040: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3041: LD_ADDR_EXP 37
3045: PUSH
3046: EMPTY
3047: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3048: LD_ADDR_EXP 38
3052: PUSH
3053: EMPTY
3054: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3055: LD_ADDR_EXP 41
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// for i := 1 to 2 do
3062: LD_ADDR_VAR 0 2
3066: PUSH
3067: DOUBLE
3068: LD_INT 1
3070: DEC
3071: ST_TO_ADDR
3072: LD_INT 2
3074: PUSH
3075: FOR_TO
3076: IFFALSE 3215
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3078: LD_INT 0
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: LD_INT 3
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: LD_INT 5
3092: PUSH
3093: LD_INT 6
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: LD_OWVAR 67
3106: ARRAY
3107: PPUSH
3108: CALL_OW 380
// un := CreateHuman ;
3112: LD_ADDR_VAR 0 3
3116: PUSH
3117: CALL_OW 44
3121: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3122: LD_ADDR_EXP 37
3126: PUSH
3127: LD_EXP 37
3131: PPUSH
3132: LD_EXP 37
3136: PUSH
3137: LD_INT 1
3139: PLUS
3140: PPUSH
3141: LD_VAR 0 3
3145: PPUSH
3146: CALL_OW 1
3150: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3151: LD_VAR 0 3
3155: PPUSH
3156: LD_INT 100
3158: PPUSH
3159: LD_INT 63
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_INT 97
3179: PPUSH
3180: LD_INT 64
3182: PPUSH
3183: CALL_OW 428
3187: PUSH
3188: LD_INT 98
3190: PPUSH
3191: LD_INT 58
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_VAR 0 2
3207: ARRAY
3208: PPUSH
3209: CALL_OW 120
// end ;
3213: GO 3075
3215: POP
3216: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3217: LD_INT 51
3219: PPUSH
3220: LD_INT 77
3222: PPUSH
3223: CALL_OW 428
3227: PPUSH
3228: CALL_OW 274
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: LD_INT 120
3238: PPUSH
3239: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3243: LD_INT 10
3245: PPUSH
3246: CALL_OW 274
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: LD_INT 300
3256: PPUSH
3257: CALL_OW 277
// for i := 1 to 2 do
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_INT 2
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3393
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 3
3285: PUSH
3286: LD_INT 4
3288: PUSH
3289: LD_INT 5
3291: PUSH
3292: LD_INT 6
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PUSH
3301: LD_OWVAR 67
3305: ARRAY
3306: PPUSH
3307: CALL_OW 380
// un := CreateHuman ;
3311: LD_ADDR_VAR 0 3
3315: PUSH
3316: CALL_OW 44
3320: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3321: LD_ADDR_EXP 38
3325: PUSH
3326: LD_EXP 38
3330: PPUSH
3331: LD_EXP 38
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 3
3344: PPUSH
3345: CALL_OW 1
3349: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3350: LD_VAR 0 3
3354: PPUSH
3355: LD_INT 198
3357: PPUSH
3358: LD_INT 106
3360: PPUSH
3361: CALL_OW 428
3365: PUSH
3366: LD_INT 205
3368: PPUSH
3369: LD_INT 114
3371: PPUSH
3372: CALL_OW 428
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_VAR 0 2
3385: ARRAY
3386: PPUSH
3387: CALL_OW 52
// end ;
3391: GO 3274
3393: POP
3394: POP
// for i := 1 to 2 do
3395: LD_ADDR_VAR 0 2
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_INT 2
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3486
// begin PrepareHuman ( false , 2 , 3 ) ;
3411: LD_INT 0
3413: PPUSH
3414: LD_INT 2
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL_OW 380
// un := CreateHuman ;
3424: LD_ADDR_VAR 0 3
3428: PUSH
3429: CALL_OW 44
3433: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3434: LD_ADDR_EXP 38
3438: PUSH
3439: LD_EXP 38
3443: PPUSH
3444: LD_EXP 38
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: PPUSH
3453: LD_VAR 0 3
3457: PPUSH
3458: CALL_OW 1
3462: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3463: LD_VAR 0 3
3467: PPUSH
3468: LD_INT 204
3470: PPUSH
3471: LD_INT 108
3473: PPUSH
3474: LD_INT 2
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 50
// end ;
3484: GO 3408
3486: POP
3487: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_INT 4
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 6
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_OWVAR 67
3520: ARRAY
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3669
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_INT 1
3530: PUSH
3531: LD_INT 1
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 4
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 1
3552: PPUSH
3553: LD_INT 5
3555: PPUSH
3556: CALL_OW 12
3560: ARRAY
3561: PPUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 5
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_OWVAR 67
3584: ARRAY
3585: PPUSH
3586: CALL_OW 380
// un := CreateHuman ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: CALL_OW 44
3599: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_INT 10
3607: PPUSH
3608: LD_INT 0
3610: PPUSH
3611: CALL 72354 0 3
3615: IFFALSE 3667
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3617: LD_ADDR_EXP 39
3621: PUSH
3622: LD_EXP 39
3626: PPUSH
3627: LD_EXP 39
3631: PUSH
3632: LD_INT 1
3634: PLUS
3635: PPUSH
3636: LD_VAR 0 3
3640: PPUSH
3641: CALL_OW 1
3645: ST_TO_ADDR
// if Prob ( 50 ) then
3646: LD_INT 50
3648: PPUSH
3649: CALL_OW 13
3653: IFFALSE 3667
// ForceSleep ( un , true ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_INT 1
3662: PPUSH
3663: CALL_OW 585
// end ; end ;
3667: GO 3522
3669: POP
3670: POP
// for i := 1 to 3 do
3671: LD_ADDR_VAR 0 2
3675: PUSH
3676: DOUBLE
3677: LD_INT 1
3679: DEC
3680: ST_TO_ADDR
3681: LD_INT 3
3683: PUSH
3684: FOR_TO
3685: IFFALSE 3779
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3687: LD_INT 0
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 4
3698: PUSH
3699: LD_INT 4
3701: PUSH
3702: LD_INT 5
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: PUSH
3711: LD_OWVAR 67
3715: ARRAY
3716: PPUSH
3717: CALL_OW 380
// un := CreateHuman ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: CALL_OW 44
3730: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_INT 11
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL 72354 0 3
3746: IFFALSE 3777
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3748: LD_ADDR_EXP 39
3752: PUSH
3753: LD_EXP 39
3757: PPUSH
3758: LD_EXP 39
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: PPUSH
3767: LD_VAR 0 3
3771: PPUSH
3772: CALL_OW 1
3776: ST_TO_ADDR
// end ;
3777: GO 3684
3779: POP
3780: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3781: LD_ADDR_VAR 0 2
3785: PUSH
3786: DOUBLE
3787: LD_INT 1
3789: DEC
3790: ST_TO_ADDR
3791: LD_INT 5
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: LD_INT 7
3799: PUSH
3800: LD_INT 8
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_OWVAR 67
3813: ARRAY
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3962
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3818: LD_INT 0
3820: PPUSH
3821: LD_INT 1
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: LD_INT 5
3848: PPUSH
3849: CALL_OW 12
3853: ARRAY
3854: PPUSH
3855: LD_INT 3
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 5
3863: PUSH
3864: LD_INT 5
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_OWVAR 67
3877: ARRAY
3878: PPUSH
3879: CALL_OW 380
// un := CreateHuman ;
3883: LD_ADDR_VAR 0 3
3887: PUSH
3888: CALL_OW 44
3892: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3893: LD_VAR 0 3
3897: PPUSH
3898: LD_INT 15
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL 72354 0 3
3908: IFFALSE 3960
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3910: LD_ADDR_EXP 40
3914: PUSH
3915: LD_EXP 40
3919: PPUSH
3920: LD_EXP 40
3924: PUSH
3925: LD_INT 1
3927: PLUS
3928: PPUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 1
3938: ST_TO_ADDR
// if Prob ( 50 ) then
3939: LD_INT 50
3941: PPUSH
3942: CALL_OW 13
3946: IFFALSE 3960
// ForceSleep ( un , true ) ;
3948: LD_VAR 0 3
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: CALL_OW 585
// end ; end ;
3960: GO 3815
3962: POP
3963: POP
// end ;
3964: LD_VAR 0 1
3968: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3969: LD_INT 0
3971: PPUSH
3972: PPUSH
3973: PPUSH
// uc_side := 3 ;
3974: LD_ADDR_OWVAR 20
3978: PUSH
3979: LD_INT 3
3981: ST_TO_ADDR
// uc_nation := 3 ;
3982: LD_ADDR_OWVAR 21
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// for i := 1 to 6 do
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_INT 6
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4083
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4006: LD_INT 0
4008: PPUSH
4009: LD_INT 1
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 12
4029: ARRAY
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 380
// un := CreateHuman ;
4038: LD_ADDR_VAR 0 3
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4048: LD_VAR 0 3
4052: PPUSH
4053: LD_INT 54
4055: PPUSH
4056: LD_INT 88
4058: PPUSH
4059: LD_INT 12
4061: PPUSH
4062: LD_INT 0
4064: PPUSH
4065: CALL_OW 50
// SetLives ( un , 1 ) ;
4069: LD_VAR 0 3
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: CALL_OW 234
// end ;
4081: GO 4003
4083: POP
4084: POP
// uc_side := 3 ;
4085: LD_ADDR_OWVAR 20
4089: PUSH
4090: LD_INT 3
4092: ST_TO_ADDR
// uc_nation := 0 ;
4093: LD_ADDR_OWVAR 21
4097: PUSH
4098: LD_INT 0
4100: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4101: LD_ADDR_EXP 42
4105: PUSH
4106: EMPTY
4107: ST_TO_ADDR
// apeEngGroup := [ ] ;
4108: LD_ADDR_EXP 43
4112: PUSH
4113: EMPTY
4114: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4115: LD_ADDR_VAR 0 2
4119: PUSH
4120: DOUBLE
4121: LD_INT 1
4123: DEC
4124: ST_TO_ADDR
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 6
4133: PUSH
4134: LD_INT 7
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: LD_OWVAR 67
4147: ARRAY
4148: PUSH
4149: FOR_TO
4150: IFFALSE 4268
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4152: LD_INT 0
4154: PPUSH
4155: LD_INT 15
4157: PPUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: LD_INT 6
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: PUSH
4176: LD_OWVAR 67
4180: ARRAY
4181: PPUSH
4182: CALL_OW 380
// un := CreateHuman ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4196: LD_ADDR_EXP 42
4200: PUSH
4201: LD_EXP 42
4205: PPUSH
4206: LD_EXP 42
4210: PUSH
4211: LD_INT 1
4213: PLUS
4214: PPUSH
4215: LD_VAR 0 3
4219: PPUSH
4220: CALL_OW 1
4224: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4225: LD_VAR 0 3
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: CALL_OW 12
4240: PPUSH
4241: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: LD_INT 56
4252: PPUSH
4253: LD_INT 82
4255: PPUSH
4256: LD_INT 6
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 50
// end ;
4266: GO 4149
4268: POP
4269: POP
// for i := 1 to 2 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_INT 1
4278: DEC
4279: ST_TO_ADDR
4280: LD_INT 2
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4360
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 16
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4309: LD_ADDR_EXP 43
4313: PUSH
4314: LD_EXP 43
4318: PPUSH
4319: LD_EXP 43
4323: PUSH
4324: LD_INT 1
4326: PLUS
4327: PPUSH
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL_OW 1
4337: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 51
4345: PPUSH
4346: LD_INT 77
4348: PPUSH
4349: CALL_OW 428
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4283
4360: POP
4361: POP
// end ;
4362: LD_VAR 0 1
4366: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4367: LD_EXP 42
4371: PPUSH
4372: LD_INT 3
4374: PUSH
4375: LD_INT 24
4377: PUSH
4378: LD_INT 600
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 54
4394: PUSH
4395: EMPTY
4396: LIST
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 72
4410: PUSH
4411: LD_INT 66
4413: PPUSH
4414: LD_INT 89
4416: PPUSH
4417: CALL_OW 428
4421: PPUSH
4422: CALL_OW 302
4426: AND
4427: IFFALSE 4512
4429: GO 4431
4431: DISABLE
4432: LD_INT 0
4434: PPUSH
// begin enable ;
4435: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4436: LD_ADDR_VAR 0 1
4440: PUSH
4441: LD_EXP 42
4445: PPUSH
4446: LD_INT 3
4448: PUSH
4449: LD_INT 24
4451: PUSH
4452: LD_INT 600
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 72
4484: PUSH
4485: FOR_IN
4486: IFFALSE 4510
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4488: LD_VAR 0 1
4492: PPUSH
4493: LD_INT 66
4495: PPUSH
4496: LD_INT 89
4498: PPUSH
4499: CALL_OW 428
4503: PPUSH
4504: CALL_OW 120
4508: GO 4485
4510: POP
4511: POP
// end ;
4512: PPOPN 1
4514: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4515: LD_INT 22
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 92
4527: PUSH
4528: LD_INT 54
4530: PUSH
4531: LD_INT 77
4533: PUSH
4534: LD_INT 8
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 69
4551: IFFALSE 4615
4553: GO 4555
4555: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4556: LD_EXP 43
4560: PPUSH
4561: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4565: LD_EXP 43
4569: PPUSH
4570: LD_INT 22
4572: PUSH
4573: LD_INT 2
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 92
4582: PUSH
4583: LD_INT 54
4585: PUSH
4586: LD_INT 77
4588: PUSH
4589: LD_INT 8
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PUSH
4607: LD_INT 1
4609: ARRAY
4610: PPUSH
4611: CALL_OW 175
// end ;
4615: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_INT 3
4638: PPUSH
4639: CALL_OW 12
4643: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4644: LD_ADDR_VAR 0 5
4648: PUSH
4649: LD_INT 16
4651: PUSH
4652: LD_INT 17
4654: PUSH
4655: LD_INT 19
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: PUSH
4663: LD_VAR 0 3
4667: ARRAY
4668: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4669: LD_ADDR_VAR 0 7
4673: PUSH
4674: LD_INT 159
4676: PUSH
4677: LD_INT 25
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 137
4686: PUSH
4687: LD_INT 37
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 123
4696: PUSH
4697: LD_INT 55
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 115
4706: PUSH
4707: LD_INT 71
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 106
4716: PUSH
4717: LD_INT 88
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 97
4726: PUSH
4727: LD_INT 114
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 75
4736: PUSH
4737: LD_INT 146
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 206
4755: PUSH
4756: LD_INT 135
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 184
4765: PUSH
4766: LD_INT 111
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 154
4775: PUSH
4776: LD_INT 97
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 122
4785: PUSH
4786: LD_INT 80
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 109
4795: PUSH
4796: LD_INT 78
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 97
4805: PUSH
4806: LD_INT 113
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 75
4815: PUSH
4816: LD_INT 147
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 185
4834: PUSH
4835: LD_INT 72
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 171
4844: PUSH
4845: LD_INT 83
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 161
4854: PUSH
4855: LD_INT 99
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 125
4864: PUSH
4865: LD_INT 82
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 105
4874: PUSH
4875: LD_INT 90
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 96
4884: PUSH
4885: LD_INT 116
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 75
4894: PUSH
4895: LD_INT 147
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_VAR 0 3
4920: ARRAY
4921: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 5
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: LD_VAR 0 3
4945: ARRAY
4946: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4947: LD_ADDR_VAR 0 6
4951: PUSH
4952: LD_INT 22
4954: PUSH
4955: LD_INT 20
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PUSH
4966: LD_VAR 0 3
4970: ARRAY
4971: ST_TO_ADDR
// for i := 1 to 2 do
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: DOUBLE
4978: LD_INT 1
4980: DEC
4981: ST_TO_ADDR
4982: LD_INT 2
4984: PUSH
4985: FOR_TO
4986: IFFALSE 5004
// EraseResourceArea ( i , outerSpawnArea ) ;
4988: LD_VAR 0 2
4992: PPUSH
4993: LD_VAR 0 6
4997: PPUSH
4998: CALL_OW 286
5002: GO 4985
5004: POP
5005: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5006: LD_VAR 0 6
5010: PPUSH
5011: LD_INT 2
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 21
5026: PUSH
5027: LD_INT 2
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 21
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 70
5054: IFFALSE 5269
// repeat wait ( 0 0$1 ) ;
5056: LD_INT 35
5058: PPUSH
5059: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_INT 2
5070: PUSH
5071: LD_INT 21
5073: PUSH
5074: LD_INT 2
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 21
5083: PUSH
5084: LD_INT 3
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 2
5114: PUSH
5115: LD_INT 21
5117: PUSH
5118: LD_INT 2
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 21
5127: PUSH
5128: LD_INT 3
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: PPUSH
5140: CALL_OW 70
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5159
// RemoveUnit ( i ) ;
5148: LD_VAR 0 2
5152: PPUSH
5153: CALL_OW 64
5157: GO 5145
5159: POP
5160: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 21
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PPUSH
5176: CALL_OW 70
5180: IFFALSE 5229
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_VAR 0 6
5191: PPUSH
5192: LD_INT 21
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 70
5206: PUSH
5207: FOR_IN
5208: IFFALSE 5227
// ComMoveXY ( i , 113 , 53 ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: LD_INT 113
5217: PPUSH
5218: LD_INT 53
5220: PPUSH
5221: CALL_OW 111
5225: GO 5207
5227: POP
5228: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5229: LD_VAR 0 6
5233: PPUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 21
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 2
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 70
5266: NOT
5267: IFFALSE 5056
// case convoyCounter of 1 .. 3 :
5269: LD_EXP 16
5273: PUSH
5274: LD_INT 1
5276: DOUBLE
5277: GREATEREQUAL
5278: IFFALSE 5286
5280: LD_INT 3
5282: DOUBLE
5283: LESSEQUAL
5284: IFTRUE 5288
5286: GO 5923
5288: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 5
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_INT 7
5307: PUSH
5308: LD_INT 8
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_OWVAR 67
5321: ARRAY
5322: PUSH
5323: LD_EXP 16
5327: MINUS
5328: PUSH
5329: FOR_TO
5330: IFFALSE 5537
// begin uc_side := 3 ;
5332: LD_ADDR_OWVAR 20
5336: PUSH
5337: LD_INT 3
5339: ST_TO_ADDR
// uc_nation := 3 ;
5340: LD_ADDR_OWVAR 21
5344: PUSH
5345: LD_INT 3
5347: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PUSH
5354: LD_INT 1
5356: PUSH
5357: LD_INT 1
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_INT 4
5374: PPUSH
5375: CALL_OW 12
5379: ARRAY
5380: PPUSH
5381: LD_INT 4
5383: PUSH
5384: LD_INT 5
5386: PUSH
5387: LD_INT 6
5389: PUSH
5390: LD_INT 7
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: PUSH
5399: LD_OWVAR 67
5403: ARRAY
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 8
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , dir ) ;
5419: LD_VAR 0 8
5423: PPUSH
5424: LD_VAR 0 4
5428: PPUSH
5429: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5433: LD_VAR 0 8
5437: PPUSH
5438: LD_VAR 0 5
5442: PPUSH
5443: LD_INT 0
5445: PPUSH
5446: CALL 72354 0 3
5450: IFFALSE 5535
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5452: LD_ADDR_EXP 41
5456: PUSH
5457: LD_EXP 41
5461: PPUSH
5462: LD_EXP 41
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: PPUSH
5471: LD_VAR 0 8
5475: PPUSH
5476: CALL_OW 1
5480: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5481: LD_VAR 0 8
5485: PPUSH
5486: LD_INT 1
5488: PPUSH
5489: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5493: LD_VAR 0 8
5497: PPUSH
5498: LD_VAR 0 7
5502: PUSH
5503: LD_INT 1
5505: ARRAY
5506: PUSH
5507: LD_INT 1
5509: ARRAY
5510: PPUSH
5511: LD_VAR 0 7
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PUSH
5520: LD_INT 2
5522: ARRAY
5523: PPUSH
5524: CALL_OW 111
// wait ( 0 0$2 ) ;
5528: LD_INT 70
5530: PPUSH
5531: CALL_OW 67
// end ; end ;
5535: GO 5329
5537: POP
5538: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5539: LD_ADDR_VAR 0 2
5543: PUSH
5544: DOUBLE
5545: LD_INT 1
5547: DEC
5548: ST_TO_ADDR
5549: LD_INT 3
5551: PUSH
5552: LD_INT 4
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 4
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_OWVAR 67
5571: ARRAY
5572: PUSH
5573: FOR_TO
5574: IFFALSE 5919
// begin uc_side := 3 ;
5576: LD_ADDR_OWVAR 20
5580: PUSH
5581: LD_INT 3
5583: ST_TO_ADDR
// uc_nation := 3 ;
5584: LD_ADDR_OWVAR 21
5588: PUSH
5589: LD_INT 3
5591: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5592: LD_INT 3
5594: PPUSH
5595: LD_INT 3
5597: PPUSH
5598: LD_INT 21
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 23
5606: PUSH
5607: LD_INT 24
5609: PUSH
5610: LD_INT 24
5612: PUSH
5613: LD_INT 24
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: PUSH
5624: LD_OWVAR 67
5628: PPUSH
5629: LD_OWVAR 67
5633: PUSH
5634: LD_INT 2
5636: PLUS
5637: PPUSH
5638: CALL_OW 12
5642: ARRAY
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: LD_INT 42
5652: PUSH
5653: LD_INT 44
5655: PUSH
5656: LD_INT 43
5658: PUSH
5659: LD_INT 44
5661: PUSH
5662: LD_INT 46
5664: PUSH
5665: LD_INT 46
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 1
5678: PPUSH
5679: LD_OWVAR 67
5683: PUSH
5684: LD_INT 2
5686: PLUS
5687: PPUSH
5688: CALL_OW 12
5692: ARRAY
5693: PPUSH
5694: LD_INT 90
5696: PPUSH
5697: CALL 447 0 7
// un := CreateVehicle ;
5701: LD_ADDR_VAR 0 8
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( un , dir ) ;
5711: LD_VAR 0 8
5715: PPUSH
5716: LD_VAR 0 4
5720: PPUSH
5721: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5725: LD_VAR 0 8
5729: PPUSH
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL 72354 0 3
5742: IFFALSE 5917
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5744: LD_ADDR_EXP 41
5748: PUSH
5749: LD_EXP 41
5753: PPUSH
5754: LD_EXP 41
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: PPUSH
5763: LD_VAR 0 8
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5773: LD_INT 0
5775: PPUSH
5776: LD_INT 3
5778: PUSH
5779: LD_INT 4
5781: PUSH
5782: LD_INT 5
5784: PUSH
5785: LD_INT 6
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: LD_OWVAR 67
5798: ARRAY
5799: PPUSH
5800: CALL_OW 383
// un := CreateHuman ;
5804: LD_ADDR_VAR 0 8
5808: PUSH
5809: CALL_OW 44
5813: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5814: LD_VAR 0 8
5818: PPUSH
5819: LD_EXP 41
5823: PUSH
5824: LD_EXP 41
5828: ARRAY
5829: PPUSH
5830: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5834: LD_ADDR_EXP 41
5838: PUSH
5839: LD_EXP 41
5843: PPUSH
5844: LD_EXP 41
5848: PUSH
5849: LD_INT 1
5851: PLUS
5852: PPUSH
5853: LD_VAR 0 8
5857: PPUSH
5858: CALL_OW 1
5862: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5863: LD_VAR 0 8
5867: PPUSH
5868: LD_INT 1
5870: PPUSH
5871: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5875: LD_VAR 0 8
5879: PPUSH
5880: LD_VAR 0 7
5884: PUSH
5885: LD_INT 1
5887: ARRAY
5888: PUSH
5889: LD_INT 1
5891: ARRAY
5892: PPUSH
5893: LD_VAR 0 7
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PUSH
5902: LD_INT 2
5904: ARRAY
5905: PPUSH
5906: CALL_OW 111
// wait ( 0 0$3 ) ;
5910: LD_INT 105
5912: PPUSH
5913: CALL_OW 67
// end ; end ;
5917: GO 5573
5919: POP
5920: POP
// end ; 4 .. 7 :
5921: GO 6528
5923: LD_INT 4
5925: DOUBLE
5926: GREATEREQUAL
5927: IFFALSE 5935
5929: LD_INT 7
5931: DOUBLE
5932: LESSEQUAL
5933: IFTRUE 5937
5935: GO 6527
5937: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_INT 2
5950: PUSH
5951: LD_INT 3
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: LD_INT 4
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: PUSH
5966: LD_OWVAR 67
5970: ARRAY
5971: PUSH
5972: FOR_TO
5973: IFFALSE 6153
// begin uc_side := 3 ;
5975: LD_ADDR_OWVAR 20
5979: PUSH
5980: LD_INT 3
5982: ST_TO_ADDR
// uc_nation := 3 ;
5983: LD_ADDR_OWVAR 21
5987: PUSH
5988: LD_INT 3
5990: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5991: LD_INT 0
5993: PPUSH
5994: LD_INT 1
5996: PPUSH
5997: LD_INT 4
5999: PUSH
6000: LD_INT 5
6002: PUSH
6003: LD_INT 6
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_OWVAR 67
6019: ARRAY
6020: PPUSH
6021: CALL_OW 380
// un := CreateHuman ;
6025: LD_ADDR_VAR 0 8
6029: PUSH
6030: CALL_OW 44
6034: ST_TO_ADDR
// SetDir ( un , dir ) ;
6035: LD_VAR 0 8
6039: PPUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_VAR 0 5
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL 72354 0 3
6066: IFFALSE 6151
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6068: LD_ADDR_EXP 41
6072: PUSH
6073: LD_EXP 41
6077: PPUSH
6078: LD_EXP 41
6082: PUSH
6083: LD_INT 1
6085: PLUS
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6097: LD_VAR 0 8
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6109: LD_VAR 0 8
6113: PPUSH
6114: LD_VAR 0 7
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 7
6131: PUSH
6132: LD_INT 1
6134: ARRAY
6135: PUSH
6136: LD_INT 2
6138: ARRAY
6139: PPUSH
6140: CALL_OW 111
// wait ( 0 0$2 ) ;
6144: LD_INT 70
6146: PPUSH
6147: CALL_OW 67
// end ; end ;
6151: GO 5972
6153: POP
6154: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6155: LD_ADDR_VAR 0 2
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 2
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 4
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_OWVAR 67
6187: ARRAY
6188: PUSH
6189: FOR_TO
6190: IFFALSE 6523
// begin uc_side := 3 ;
6192: LD_ADDR_OWVAR 20
6196: PUSH
6197: LD_INT 3
6199: ST_TO_ADDR
// uc_nation := 3 ;
6200: LD_ADDR_OWVAR 21
6204: PUSH
6205: LD_INT 3
6207: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6208: LD_INT 3
6210: PPUSH
6211: LD_INT 3
6213: PPUSH
6214: LD_INT 21
6216: PUSH
6217: LD_INT 22
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 1
6226: PPUSH
6227: LD_INT 2
6229: PPUSH
6230: CALL_OW 12
6234: ARRAY
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 42
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: LD_INT 43
6250: PUSH
6251: LD_INT 44
6253: PUSH
6254: LD_INT 44
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 1
6266: PPUSH
6267: LD_OWVAR 67
6271: PUSH
6272: LD_INT 1
6274: PLUS
6275: PPUSH
6276: CALL_OW 12
6280: ARRAY
6281: PPUSH
6282: LD_INT 90
6284: PPUSH
6285: CALL 447 0 7
// un := CreateVehicle ;
6289: LD_ADDR_VAR 0 8
6293: PUSH
6294: CALL_OW 45
6298: ST_TO_ADDR
// SetDir ( un , dir ) ;
6299: LD_VAR 0 8
6303: PPUSH
6304: LD_VAR 0 4
6308: PPUSH
6309: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6313: LD_VAR 0 8
6317: PPUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 0
6325: PPUSH
6326: CALL 72354 0 3
6330: IFFALSE 6521
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6332: LD_ADDR_EXP 41
6336: PUSH
6337: LD_EXP 41
6341: PPUSH
6342: LD_EXP 41
6346: PUSH
6347: LD_INT 1
6349: PLUS
6350: PPUSH
6351: LD_VAR 0 8
6355: PPUSH
6356: CALL_OW 1
6360: ST_TO_ADDR
// uc_side := 3 ;
6361: LD_ADDR_OWVAR 20
6365: PUSH
6366: LD_INT 3
6368: ST_TO_ADDR
// uc_nation := 3 ;
6369: LD_ADDR_OWVAR 21
6373: PUSH
6374: LD_INT 3
6376: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6377: LD_INT 0
6379: PPUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: LD_INT 6
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: PUSH
6398: LD_OWVAR 67
6402: ARRAY
6403: PPUSH
6404: CALL_OW 383
// un := CreateHuman ;
6408: LD_ADDR_VAR 0 8
6412: PUSH
6413: CALL_OW 44
6417: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6418: LD_VAR 0 8
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_EXP 41
6432: ARRAY
6433: PPUSH
6434: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6438: LD_ADDR_EXP 41
6442: PUSH
6443: LD_EXP 41
6447: PPUSH
6448: LD_EXP 41
6452: PUSH
6453: LD_INT 1
6455: PLUS
6456: PPUSH
6457: LD_VAR 0 8
6461: PPUSH
6462: CALL_OW 1
6466: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6467: LD_VAR 0 8
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6479: LD_VAR 0 8
6483: PPUSH
6484: LD_VAR 0 7
6488: PUSH
6489: LD_INT 1
6491: ARRAY
6492: PUSH
6493: LD_INT 1
6495: ARRAY
6496: PPUSH
6497: LD_VAR 0 7
6501: PUSH
6502: LD_INT 1
6504: ARRAY
6505: PUSH
6506: LD_INT 2
6508: ARRAY
6509: PPUSH
6510: CALL_OW 111
// wait ( 0 0$2 ) ;
6514: LD_INT 70
6516: PPUSH
6517: CALL_OW 67
// end ; end ;
6521: GO 6189
6523: POP
6524: POP
// end ; end ;
6525: GO 6528
6527: POP
// repeat wait ( 0 0$1 ) ;
6528: LD_INT 35
6530: PPUSH
6531: CALL_OW 67
// for un in ruConvoySquad do
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_EXP 41
6544: PUSH
6545: FOR_IN
6546: IFFALSE 7170
// begin if IsInArea ( un , westSouthOutArea ) then
6548: LD_VAR 0 8
6552: PPUSH
6553: LD_INT 18
6555: PPUSH
6556: CALL_OW 308
6560: IFFALSE 6648
// begin if GetType ( un ) = unit_vehicle then
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 247
6571: PUSH
6572: LD_INT 2
6574: EQUAL
6575: IFFALSE 6607
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6577: LD_ADDR_EXP 41
6581: PUSH
6582: LD_EXP 41
6586: PUSH
6587: LD_VAR 0 8
6591: PPUSH
6592: CALL_OW 311
6596: DIFF
6597: ST_TO_ADDR
// RemoveUnit ( un ) ;
6598: LD_VAR 0 8
6602: PPUSH
6603: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6607: LD_ADDR_EXP 15
6611: PUSH
6612: LD_EXP 15
6616: PUSH
6617: LD_INT 1
6619: PLUS
6620: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6621: LD_ADDR_EXP 41
6625: PUSH
6626: LD_EXP 41
6630: PUSH
6631: LD_VAR 0 8
6635: DIFF
6636: ST_TO_ADDR
// RemoveUnit ( un ) ;
6637: LD_VAR 0 8
6641: PPUSH
6642: CALL_OW 64
// break ;
6646: GO 7170
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6648: LD_VAR 0 8
6652: PPUSH
6653: CALL_OW 305
6657: NOT
6658: PUSH
6659: LD_VAR 0 8
6663: PPUSH
6664: CALL_OW 310
6668: NOT
6669: AND
6670: IFFALSE 6688
// ruConvoySquad := ruConvoySquad diff un ;
6672: LD_ADDR_EXP 41
6676: PUSH
6677: LD_EXP 41
6681: PUSH
6682: LD_VAR 0 8
6686: DIFF
6687: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6688: LD_VAR 0 8
6692: PPUSH
6693: CALL_OW 302
6697: PUSH
6698: LD_VAR 0 8
6702: PPUSH
6703: CALL_OW 314
6707: NOT
6708: AND
6709: IFFALSE 7168
// begin tag := GetTag ( un ) ;
6711: LD_ADDR_VAR 0 9
6715: PUSH
6716: LD_VAR 0 8
6720: PPUSH
6721: CALL_OW 110
6725: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 7
6735: PUSH
6736: LD_VAR 0 9
6740: PUSH
6741: LD_INT 1
6743: PLUS
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 7
6754: PUSH
6755: LD_VAR 0 9
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ARRAY
6764: PUSH
6765: LD_INT 2
6767: ARRAY
6768: PPUSH
6769: CALL_OW 297
6773: PUSH
6774: LD_INT 6
6776: LESS
6777: IFFALSE 6960
// begin SetTag ( un , tag + 1 ) ;
6779: LD_VAR 0 8
6783: PPUSH
6784: LD_VAR 0 9
6788: PUSH
6789: LD_INT 1
6791: PLUS
6792: PPUSH
6793: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6797: LD_VAR 0 8
6801: PPUSH
6802: CALL_OW 247
6806: PUSH
6807: LD_INT 2
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 8
6815: PPUSH
6816: CALL_OW 257
6820: PUSH
6821: LD_INT 3
6823: EQUAL
6824: OR
6825: IFFALSE 6958
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6827: LD_ADDR_VAR 0 10
6831: PUSH
6832: LD_INT 22
6834: PUSH
6835: LD_INT 2
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 91
6844: PUSH
6845: LD_VAR 0 8
6849: PUSH
6850: LD_INT 8
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// if enemy then
6867: LD_VAR 0 10
6871: IFFALSE 6899
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6873: LD_VAR 0 8
6877: PPUSH
6878: LD_VAR 0 10
6882: PPUSH
6883: LD_VAR 0 8
6887: PPUSH
6888: CALL_OW 74
6892: PPUSH
6893: CALL_OW 115
6897: GO 6958
// begin AddComWait ( un , 0 0$4 ) ;
6899: LD_VAR 0 8
6903: PPUSH
6904: LD_INT 140
6906: PPUSH
6907: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6911: LD_VAR 0 8
6915: PPUSH
6916: LD_VAR 0 7
6920: PUSH
6921: LD_VAR 0 9
6925: PUSH
6926: LD_INT 1
6928: PLUS
6929: ARRAY
6930: PUSH
6931: LD_INT 1
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 7
6939: PUSH
6940: LD_VAR 0 9
6944: PUSH
6945: LD_INT 1
6947: PLUS
6948: ARRAY
6949: PUSH
6950: LD_INT 2
6952: ARRAY
6953: PPUSH
6954: CALL_OW 174
// end ; end ; end else
6958: GO 7168
// begin if GetClass ( un ) = 4 then
6960: LD_VAR 0 8
6964: PPUSH
6965: CALL_OW 257
6969: PUSH
6970: LD_INT 4
6972: EQUAL
6973: IFFALSE 7121
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6975: LD_EXP 41
6979: PPUSH
6980: LD_INT 21
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 24
6995: PUSH
6996: LD_INT 1000
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 72
7015: IFFALSE 7073
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7017: LD_VAR 0 8
7021: PPUSH
7022: LD_EXP 41
7026: PPUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 1
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 24
7042: PUSH
7043: LD_INT 1000
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 72
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PPUSH
7067: CALL_OW 128
7071: GO 7119
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7073: LD_VAR 0 8
7077: PPUSH
7078: LD_EXP 41
7082: PPUSH
7083: LD_INT 3
7085: PUSH
7086: LD_INT 25
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PPUSH
7105: LD_VAR 0 8
7109: PPUSH
7110: CALL_OW 74
7114: PPUSH
7115: CALL_OW 112
7119: GO 7168
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7121: LD_VAR 0 8
7125: PPUSH
7126: LD_VAR 0 7
7130: PUSH
7131: LD_VAR 0 9
7135: PUSH
7136: LD_INT 1
7138: PLUS
7139: ARRAY
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PPUSH
7145: LD_VAR 0 7
7149: PUSH
7150: LD_VAR 0 9
7154: PUSH
7155: LD_INT 1
7157: PLUS
7158: ARRAY
7159: PUSH
7160: LD_INT 2
7162: ARRAY
7163: PPUSH
7164: CALL_OW 114
// end ; end ; end ;
7168: GO 6545
7170: POP
7171: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7172: LD_EXP 41
7176: PPUSH
7177: LD_INT 52
7179: PUSH
7180: EMPTY
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PPUSH
7197: CALL_OW 72
7201: NOT
7202: IFFALSE 6528
// end ;
7204: LD_VAR 0 1
7208: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7209: LD_EXP 16
7213: PUSH
7214: LD_INT 3
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: LESS
7225: PUSH
7226: LD_EXP 41
7230: NOT
7231: AND
7232: PUSH
7233: LD_OWVAR 67
7237: PUSH
7238: LD_INT 1
7240: GREATER
7241: AND
7242: IFFALSE 7662
7244: GO 7246
7246: DISABLE
7247: LD_INT 0
7249: PPUSH
7250: PPUSH
7251: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7252: LD_ADDR_VAR 0 1
7256: PUSH
7257: DOUBLE
7258: LD_INT 1
7260: DEC
7261: ST_TO_ADDR
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_OWVAR 67
7284: ARRAY
7285: PUSH
7286: FOR_TO
7287: IFFALSE 7583
// begin uc_side := 3 ;
7289: LD_ADDR_OWVAR 20
7293: PUSH
7294: LD_INT 3
7296: ST_TO_ADDR
// uc_nation := 3 ;
7297: LD_ADDR_OWVAR 21
7301: PUSH
7302: LD_INT 3
7304: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7305: LD_INT 3
7307: PPUSH
7308: LD_INT 3
7310: PPUSH
7311: LD_INT 21
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 23
7319: PUSH
7320: LD_INT 24
7322: PUSH
7323: LD_INT 24
7325: PUSH
7326: LD_INT 24
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: PPUSH
7342: LD_OWVAR 67
7346: PUSH
7347: LD_INT 2
7349: PLUS
7350: PPUSH
7351: CALL_OW 12
7355: ARRAY
7356: PPUSH
7357: LD_INT 1
7359: PPUSH
7360: LD_INT 1
7362: PPUSH
7363: LD_INT 42
7365: PUSH
7366: LD_INT 44
7368: PUSH
7369: LD_INT 43
7371: PUSH
7372: LD_INT 44
7374: PUSH
7375: LD_INT 46
7377: PUSH
7378: LD_INT 46
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 1
7391: PPUSH
7392: LD_OWVAR 67
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: CALL_OW 12
7405: ARRAY
7406: PPUSH
7407: LD_INT 90
7409: PPUSH
7410: CALL 447 0 7
// un := CreateVehicle ;
7414: LD_ADDR_VAR 0 3
7418: PUSH
7419: CALL_OW 45
7423: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7424: LD_VAR 0 3
7428: PPUSH
7429: LD_INT 0
7431: PPUSH
7432: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7436: LD_VAR 0 3
7440: PPUSH
7441: LD_INT 23
7443: PPUSH
7444: LD_INT 0
7446: PPUSH
7447: CALL 72354 0 3
7451: IFFALSE 7581
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7453: LD_ADDR_VAR 0 2
7457: PUSH
7458: LD_VAR 0 2
7462: PPUSH
7463: LD_VAR 0 2
7467: PUSH
7468: LD_INT 1
7470: PLUS
7471: PPUSH
7472: LD_VAR 0 3
7476: PPUSH
7477: CALL_OW 1
7481: ST_TO_ADDR
// uc_side := 3 ;
7482: LD_ADDR_OWVAR 20
7486: PUSH
7487: LD_INT 3
7489: ST_TO_ADDR
// uc_nation := 3 ;
7490: LD_ADDR_OWVAR 21
7494: PUSH
7495: LD_INT 3
7497: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7498: LD_INT 0
7500: PPUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 4
7506: PUSH
7507: LD_INT 5
7509: PUSH
7510: LD_INT 6
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: PUSH
7519: LD_OWVAR 67
7523: ARRAY
7524: PPUSH
7525: CALL_OW 383
// un := CreateHuman ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: CALL_OW 44
7538: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7539: LD_VAR 0 3
7543: PPUSH
7544: LD_VAR 0 2
7548: PUSH
7549: LD_VAR 0 2
7553: ARRAY
7554: PPUSH
7555: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7559: LD_VAR 0 3
7563: PPUSH
7564: LD_INT 80
7566: PPUSH
7567: LD_INT 139
7569: PPUSH
7570: CALL_OW 111
// wait ( 0 0$3 ) ;
7574: LD_INT 105
7576: PPUSH
7577: CALL_OW 67
// end ; end ;
7581: GO 7286
7583: POP
7584: POP
// for i in tmp do
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_VAR 0 2
7594: PUSH
7595: FOR_IN
7596: IFFALSE 7660
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7598: LD_VAR 0 1
7602: PPUSH
7603: LD_INT 101
7605: PPUSH
7606: LD_INT 102
7608: PPUSH
7609: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_INT 110
7620: PPUSH
7621: LD_INT 78
7623: PPUSH
7624: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7628: LD_VAR 0 1
7632: PPUSH
7633: LD_INT 75
7635: PPUSH
7636: LD_INT 101
7638: PPUSH
7639: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7643: LD_VAR 0 1
7647: PPUSH
7648: LD_INT 57
7650: PPUSH
7651: LD_INT 83
7653: PPUSH
7654: CALL_OW 174
// end ;
7658: GO 7595
7660: POP
7661: POP
// end ;
7662: PPOPN 3
7664: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7665: LD_EXP 39
7669: PPUSH
7670: LD_INT 3
7672: PUSH
7673: LD_INT 24
7675: PUSH
7676: LD_INT 1000
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PPUSH
7687: CALL_OW 72
7691: PUSH
7692: LD_EXP 40
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: OR
7719: IFFALSE 7818
7721: GO 7723
7723: DISABLE
7724: LD_INT 0
7726: PPUSH
// begin enable ;
7727: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7728: LD_ADDR_VAR 0 1
7732: PUSH
7733: LD_EXP 39
7737: PPUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 24
7743: PUSH
7744: LD_INT 1000
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 72
7759: PUSH
7760: LD_EXP 40
7764: PPUSH
7765: LD_INT 3
7767: PUSH
7768: LD_INT 24
7770: PUSH
7771: LD_INT 1000
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 72
7786: UNION
7787: PUSH
7788: FOR_IN
7789: IFFALSE 7816
// if IsSleeping ( i ) then
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 555
7800: IFFALSE 7814
// ForceSleep ( i , false ) ;
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL_OW 585
7814: GO 7788
7816: POP
7817: POP
// end ;
7818: PPOPN 1
7820: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7821: LD_EXP 38
7825: PPUSH
7826: LD_INT 1
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 54
7834: PUSH
7835: EMPTY
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 3
7844: PUSH
7845: LD_INT 95
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 72
7868: IFFALSE 7963
7870: GO 7872
7872: DISABLE
7873: LD_INT 0
7875: PPUSH
7876: PPUSH
// begin enable ;
7877: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7878: LD_ADDR_VAR 0 2
7882: PUSH
7883: LD_EXP 38
7887: PPUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 54
7896: PUSH
7897: EMPTY
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: LD_INT 95
7909: PUSH
7910: LD_INT 26
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 72
7930: ST_TO_ADDR
// for i in tmp do
7931: LD_ADDR_VAR 0 1
7935: PUSH
7936: LD_VAR 0 2
7940: PUSH
7941: FOR_IN
7942: IFFALSE 7961
// ComMoveXY ( i , 206 , 110 ) ;
7944: LD_VAR 0 1
7948: PPUSH
7949: LD_INT 206
7951: PPUSH
7952: LD_INT 110
7954: PPUSH
7955: CALL_OW 111
7959: GO 7941
7961: POP
7962: POP
// end ;
7963: PPOPN 2
7965: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7966: LD_INT 26
7968: PPUSH
7969: LD_INT 22
7971: PUSH
7972: LD_INT 2
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 70
7983: PUSH
7984: LD_INT 26
7986: PPUSH
7987: LD_INT 22
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 32
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 50
8009: PUSH
8010: EMPTY
8011: LIST
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 70
8022: AND
8023: IFFALSE 8102
8025: GO 8027
8027: DISABLE
8028: LD_INT 0
8030: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_INT 26
8038: PPUSH
8039: LD_INT 22
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 30
8051: PUSH
8052: LD_INT 32
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 50
8061: PUSH
8062: EMPTY
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 70
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8100
// if IsInUnit ( i ) then
8078: LD_VAR 0 1
8082: PPUSH
8083: CALL_OW 310
8087: IFFALSE 8098
// ComExitBuilding ( i ) ;
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 122
8098: GO 8075
8100: POP
8101: POP
// end ; end_of_file
8102: PPOPN 1
8104: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL 15045 0 1
// if un = Heike then
8114: LD_VAR 0 1
8118: PUSH
8119: LD_EXP 21
8123: EQUAL
8124: IFFALSE 8133
// YouLost ( Heike ) ;
8126: LD_STRING Heike
8128: PPUSH
8129: CALL_OW 104
// if un in apeSoldGroup then
8133: LD_VAR 0 1
8137: PUSH
8138: LD_EXP 42
8142: IN
8143: IFFALSE 8161
// apeSoldGroup := apeSoldGroup diff un ;
8145: LD_ADDR_EXP 42
8149: PUSH
8150: LD_EXP 42
8154: PUSH
8155: LD_VAR 0 1
8159: DIFF
8160: ST_TO_ADDR
// if un in apeEngGroup then
8161: LD_VAR 0 1
8165: PUSH
8166: LD_EXP 43
8170: IN
8171: IFFALSE 8189
// apeEngGroup := apeEngGroup diff un ;
8173: LD_ADDR_EXP 43
8177: PUSH
8178: LD_EXP 43
8182: PUSH
8183: LD_VAR 0 1
8187: DIFF
8188: ST_TO_ADDR
// if un in oilBaseGuard then
8189: LD_VAR 0 1
8193: PUSH
8194: LD_EXP 38
8198: IN
8199: IFFALSE 8217
// oilBaseGuard := oilBaseGuard diff un ;
8201: LD_ADDR_EXP 38
8205: PUSH
8206: LD_EXP 38
8210: PUSH
8211: LD_VAR 0 1
8215: DIFF
8216: ST_TO_ADDR
// if un in ruNorthGroup then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 39
8226: IN
8227: IFFALSE 8245
// ruNorthGroup := ruNorthGroup diff un ;
8229: LD_ADDR_EXP 39
8233: PUSH
8234: LD_EXP 39
8238: PUSH
8239: LD_VAR 0 1
8243: DIFF
8244: ST_TO_ADDR
// if un in ruSouthGroup then
8245: LD_VAR 0 1
8249: PUSH
8250: LD_EXP 40
8254: IN
8255: IFFALSE 8273
// ruSouthGroup := ruSouthGroup diff un ;
8257: LD_ADDR_EXP 40
8261: PUSH
8262: LD_EXP 40
8266: PUSH
8267: LD_VAR 0 1
8271: DIFF
8272: ST_TO_ADDR
// if un in ruConvoySquad then
8273: LD_VAR 0 1
8277: PUSH
8278: LD_EXP 41
8282: IN
8283: IFFALSE 8301
// ruConvoySquad := ruConvoySquad diff un ;
8285: LD_ADDR_EXP 41
8289: PUSH
8290: LD_EXP 41
8294: PUSH
8295: LD_VAR 0 1
8299: DIFF
8300: ST_TO_ADDR
// end ;
8301: PPOPN 1
8303: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8304: LD_VAR 0 1
8308: PPUSH
8309: LD_VAR 0 2
8313: PPUSH
8314: CALL 15165 0 2
// if GetWeapon ( veh ) = ar_radar then
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 264
8327: PUSH
8328: LD_INT 30
8330: EQUAL
8331: IFFALSE 8341
// radarConstructed := true ;
8333: LD_ADDR_EXP 13
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 264
8350: PUSH
8351: LD_INT 26
8353: EQUAL
8354: IFFALSE 8364
// flamethrowerBuilt := true ;
8356: LD_ADDR_EXP 20
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// end ;
8364: PPOPN 2
8366: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8367: LD_ADDR_EXP 18
8371: PUSH
8372: LD_EXP 18
8376: PUSH
8377: LD_INT 1
8379: PLUS
8380: ST_TO_ADDR
// if oldId in ruConvoySquad then
8381: LD_VAR 0 2
8385: PUSH
8386: LD_EXP 41
8390: IN
8391: IFFALSE 8409
// ruConvoySquad := ruConvoySquad diff oldId ;
8393: LD_ADDR_EXP 41
8397: PUSH
8398: LD_EXP 41
8402: PUSH
8403: LD_VAR 0 2
8407: DIFF
8408: ST_TO_ADDR
// if newId in ruConvoySquad then
8409: LD_VAR 0 1
8413: PUSH
8414: LD_EXP 41
8418: IN
8419: IFFALSE 8437
// ruConvoySquad := ruConvoySquad diff newId ;
8421: LD_ADDR_EXP 41
8425: PUSH
8426: LD_EXP 41
8430: PUSH
8431: LD_VAR 0 1
8435: DIFF
8436: ST_TO_ADDR
// end ; end_of_file
8437: PPOPN 4
8439: END
// export function Action ; var i , p , un , veh , tmp ; begin
8440: LD_INT 0
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
8447: PPUSH
// InGameOn ;
8448: CALL_OW 8
// music_nat := 2 ;
8452: LD_ADDR_OWVAR 71
8456: PUSH
8457: LD_INT 2
8459: ST_TO_ADDR
// music_class := music_recon ;
8460: LD_ADDR_OWVAR 72
8464: PUSH
8465: LD_INT 3
8467: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8468: LD_INT 7
8470: PPUSH
8471: LD_INT 6
8473: PPUSH
8474: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8478: LD_INT 7
8480: PPUSH
8481: LD_INT 6
8483: PPUSH
8484: LD_INT 2
8486: PPUSH
8487: LD_INT 30
8489: NEG
8490: PPUSH
8491: CALL 1155 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8495: LD_ADDR_VAR 0 6
8499: PUSH
8500: LD_EXP 21
8504: PUSH
8505: LD_EXP 22
8509: PUSH
8510: LD_EXP 23
8514: PUSH
8515: LD_EXP 24
8519: PUSH
8520: LD_EXP 25
8524: PUSH
8525: LD_EXP 26
8529: PUSH
8530: LD_EXP 28
8534: PUSH
8535: LD_EXP 33
8539: PUSH
8540: LD_EXP 27
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: ST_TO_ADDR
// tmp := tmp diff 0 ;
8556: LD_ADDR_VAR 0 6
8560: PUSH
8561: LD_VAR 0 6
8565: PUSH
8566: LD_INT 0
8568: DIFF
8569: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8570: LD_ADDR_VAR 0 6
8574: PUSH
8575: LD_VAR 0 6
8579: PPUSH
8580: LD_INT 3
8582: PPUSH
8583: CALL 71953 0 2
8587: ST_TO_ADDR
// for i in heikeVehicles do
8588: LD_ADDR_VAR 0 2
8592: PUSH
8593: LD_EXP 35
8597: PUSH
8598: FOR_IN
8599: IFFALSE 8798
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8601: LD_INT 5
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_INT 5
8611: ARRAY
8612: PPUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 2
8635: PUSH
8636: LD_INT 3
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 2
8644: PUSH
8645: LD_INT 4
8647: ARRAY
8648: PPUSH
8649: LD_INT 34
8651: PPUSH
8652: CALL 447 0 7
// veh := CreateVehicle ;
8656: LD_ADDR_VAR 0 5
8660: PUSH
8661: CALL_OW 45
8665: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 4
8673: ARRAY
8674: PUSH
8675: LD_INT 51
8677: PUSH
8678: LD_INT 32
8680: PUSH
8681: LD_INT 12
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: IN
8689: IFFALSE 8769
// begin if i [ 7 ] [ 1 ] then
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 7
8698: ARRAY
8699: PUSH
8700: LD_INT 1
8702: ARRAY
8703: IFFALSE 8730
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8705: LD_VAR 0 5
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: LD_VAR 0 2
8717: PUSH
8718: LD_INT 7
8720: ARRAY
8721: PUSH
8722: LD_INT 1
8724: ARRAY
8725: PPUSH
8726: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8730: LD_VAR 0 2
8734: PUSH
8735: LD_INT 7
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: IFFALSE 8769
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: LD_VAR 0 2
8756: PUSH
8757: LD_INT 7
8759: ARRAY
8760: PUSH
8761: LD_INT 2
8763: ARRAY
8764: PPUSH
8765: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8769: LD_VAR 0 5
8773: PPUSH
8774: LD_INT 2
8776: PPUSH
8777: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8781: LD_VAR 0 5
8785: PPUSH
8786: LD_INT 4
8788: PPUSH
8789: LD_INT 0
8791: PPUSH
8792: CALL_OW 49
// end ;
8796: GO 8598
8798: POP
8799: POP
// if tmp then
8800: LD_VAR 0 6
8804: IFFALSE 8914
// begin p := 0 ;
8806: LD_ADDR_VAR 0 3
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// for i in tmp do
8814: LD_ADDR_VAR 0 2
8818: PUSH
8819: LD_VAR 0 6
8823: PUSH
8824: FOR_IN
8825: IFFALSE 8912
// begin p := p + 1 ;
8827: LD_ADDR_VAR 0 3
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: LD_INT 0
8851: PPUSH
8852: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 26
8863: PPUSH
8864: LD_INT 9
8866: PPUSH
8867: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8871: LD_VAR 0 3
8875: PUSH
8876: LD_EXP 35
8880: GREATEREQUAL
8881: PUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 3
8894: EQUAL
8895: AND
8896: IFFALSE 8910
// SetClass ( i , 1 ) ;
8898: LD_VAR 0 2
8902: PPUSH
8903: LD_INT 1
8905: PPUSH
8906: CALL_OW 336
// end ;
8910: GO 8824
8912: POP
8913: POP
// end ; if heikeSecondSquad then
8914: LD_EXP 34
8918: IFFALSE 9020
// for i in heikeSecondSquad do
8920: LD_ADDR_VAR 0 2
8924: PUSH
8925: LD_EXP 34
8929: PUSH
8930: FOR_IN
8931: IFFALSE 9018
// begin p := p + 1 ;
8933: LD_ADDR_VAR 0 3
8937: PUSH
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 1
8945: PLUS
8946: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8947: LD_VAR 0 2
8951: PPUSH
8952: LD_INT 6
8954: PPUSH
8955: LD_INT 0
8957: PPUSH
8958: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8962: LD_VAR 0 2
8966: PPUSH
8967: LD_INT 26
8969: PPUSH
8970: LD_INT 9
8972: PPUSH
8973: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_EXP 35
8986: GREATEREQUAL
8987: PUSH
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 257
8997: PUSH
8998: LD_INT 3
9000: EQUAL
9001: AND
9002: IFFALSE 9016
// SetClass ( i , 1 ) ;
9004: LD_VAR 0 2
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 336
// end ;
9016: GO 8930
9018: POP
9019: POP
// if heikeApes then
9020: LD_EXP 36
9024: IFFALSE 9067
// for i in heikeApes do
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_EXP 36
9035: PUSH
9036: FOR_IN
9037: IFFALSE 9065
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9039: LD_VAR 0 2
9043: PPUSH
9044: LD_INT 7
9046: PPUSH
9047: LD_INT 0
9049: PPUSH
9050: CALL_OW 49
// ComHold ( i ) ;
9054: LD_VAR 0 2
9058: PPUSH
9059: CALL_OW 140
// end ;
9063: GO 9036
9065: POP
9066: POP
// if Kurt then
9067: LD_EXP 32
9071: IFFALSE 9103
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9073: LD_EXP 32
9077: PPUSH
9078: LD_INT 8
9080: PPUSH
9081: LD_INT 0
9083: PPUSH
9084: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9088: LD_EXP 32
9092: PPUSH
9093: LD_INT 42
9095: PPUSH
9096: LD_INT 32
9098: PPUSH
9099: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9103: LD_INT 70
9105: PPUSH
9106: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9110: LD_EXP 21
9114: PPUSH
9115: LD_STRING DH-Start-1
9117: PPUSH
9118: CALL_OW 88
// if Givi then
9122: LD_EXP 22
9126: IFFALSE 9389
// begin Say ( Givi , DG-Start-2-5 ) ;
9128: LD_EXP 22
9132: PPUSH
9133: LD_STRING DG-Start-2-5
9135: PPUSH
9136: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9140: LD_EXP 21
9144: PPUSH
9145: LD_STRING DH-Start-3
9147: PPUSH
9148: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9152: LD_EXP 21
9156: PPUSH
9157: LD_STRING DH-Start-4
9159: PPUSH
9160: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9164: LD_EXP 22
9168: PPUSH
9169: LD_STRING DG-Start-5
9171: PPUSH
9172: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-Start-6
9183: PPUSH
9184: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9188: LD_EXP 22
9192: PPUSH
9193: LD_STRING DG-Start-7
9195: PPUSH
9196: CALL_OW 88
// if Mike then
9200: LD_EXP 23
9204: IFFALSE 9377
// begin Say ( Mike , DM-Start-8 ) ;
9206: LD_EXP 23
9210: PPUSH
9211: LD_STRING DM-Start-8
9213: PPUSH
9214: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9218: LD_EXP 23
9222: PPUSH
9223: LD_STRING DM-Start-9
9225: PPUSH
9226: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9230: LD_EXP 22
9234: PPUSH
9235: LD_STRING DG-Start-10
9237: PPUSH
9238: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9242: LD_EXP 22
9246: PPUSH
9247: LD_STRING DG-Start-11
9249: PPUSH
9250: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9254: LD_EXP 21
9258: PPUSH
9259: LD_STRING DH-Start-12
9261: PPUSH
9262: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9266: LD_EXP 22
9270: PPUSH
9271: LD_STRING DG-Start-13
9273: PPUSH
9274: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9278: LD_EXP 22
9282: PPUSH
9283: LD_STRING DG-Start-14
9285: PPUSH
9286: CALL_OW 88
// if Kaia then
9290: LD_EXP 26
9294: IFFALSE 9377
// begin Say ( Kaia , DK-Start-15 ) ;
9296: LD_EXP 26
9300: PPUSH
9301: LD_STRING DK-Start-15
9303: PPUSH
9304: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9308: LD_EXP 26
9312: PPUSH
9313: LD_STRING DK-Start-16
9315: PPUSH
9316: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9320: LD_EXP 26
9324: PPUSH
9325: LD_STRING DK-Start-17
9327: PPUSH
9328: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9332: LD_INT 10
9334: PPUSH
9335: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9339: LD_EXP 22
9343: PPUSH
9344: LD_EXP 26
9348: PPUSH
9349: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9353: LD_EXP 22
9357: PPUSH
9358: LD_STRING DG-Start-18
9360: PPUSH
9361: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9365: LD_EXP 26
9369: PPUSH
9370: LD_STRING DK-Start-19
9372: PPUSH
9373: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9377: LD_EXP 21
9381: PPUSH
9382: LD_STRING DH-Start-20
9384: PPUSH
9385: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9389: LD_INT 70
9391: PPUSH
9392: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9396: LD_EXP 29
9400: PPUSH
9401: LD_STRING DShar-Start-21
9403: PPUSH
9404: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9408: LD_EXP 21
9412: PPUSH
9413: LD_STRING DH-Start-22
9415: PPUSH
9416: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9420: LD_EXP 29
9424: PPUSH
9425: LD_STRING DShar-Start-23
9427: PPUSH
9428: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9432: LD_EXP 29
9436: PPUSH
9437: LD_STRING DShar-Start-24
9439: PPUSH
9440: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9444: LD_EXP 29
9448: PPUSH
9449: LD_STRING DShar-Start-25
9451: PPUSH
9452: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9456: LD_EXP 29
9460: PPUSH
9461: LD_STRING DShar-Start-26
9463: PPUSH
9464: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9468: LD_EXP 21
9472: PPUSH
9473: LD_STRING DH-Start-27
9475: PPUSH
9476: CALL_OW 88
// if Kaia then
9480: LD_EXP 26
9484: IFFALSE 9526
// begin ComTurnUnit ( Heike , Kaia ) ;
9486: LD_EXP 21
9490: PPUSH
9491: LD_EXP 26
9495: PPUSH
9496: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9500: LD_EXP 26
9504: PPUSH
9505: LD_STRING DK-Start-28
9507: PPUSH
9508: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9512: LD_EXP 21
9516: PPUSH
9517: LD_STRING DH-Start-29
9519: PPUSH
9520: CALL_OW 88
// end else
9524: GO 9538
// Say ( Heike , DH-Start-a-28 ) ;
9526: LD_EXP 21
9530: PPUSH
9531: LD_STRING DH-Start-a-28
9533: PPUSH
9534: CALL_OW 88
// if Givi then
9538: LD_EXP 22
9542: IFFALSE 9777
// begin ComTurnUnit ( Heike , Givi ) ;
9544: LD_EXP 21
9548: PPUSH
9549: LD_EXP 22
9553: PPUSH
9554: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9558: LD_EXP 22
9562: PPUSH
9563: LD_EXP 21
9567: PPUSH
9568: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9572: LD_EXP 21
9576: PPUSH
9577: LD_STRING DH-Start-30
9579: PPUSH
9580: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9584: LD_EXP 21
9588: PPUSH
9589: LD_STRING DH-Start-31
9591: PPUSH
9592: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9596: LD_EXP 22
9600: PPUSH
9601: LD_STRING DG-Start-32
9603: PPUSH
9604: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9608: LD_EXP 21
9612: PPUSH
9613: LD_STRING DH-Start-33
9615: PPUSH
9616: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9620: LD_EXP 22
9624: PPUSH
9625: LD_STRING DG-Start-34
9627: PPUSH
9628: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9632: LD_EXP 22
9636: PPUSH
9637: LD_STRING DG-Start-35
9639: PPUSH
9640: CALL_OW 88
// if Kurt and not dialogue_skipped then
9644: LD_EXP 32
9648: PUSH
9649: LD_OWVAR 59
9653: NOT
9654: AND
9655: IFFALSE 9686
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9657: LD_EXP 32
9661: PPUSH
9662: LD_INT 28
9664: PPUSH
9665: LD_INT 13
9667: PPUSH
9668: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9672: LD_EXP 32
9676: PPUSH
9677: LD_EXP 21
9681: PPUSH
9682: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9686: LD_EXP 22
9690: PPUSH
9691: LD_STRING DG-Start-36
9693: PPUSH
9694: CALL_OW 88
// if Kurt then
9698: LD_EXP 32
9702: IFFALSE 9775
// begin if not Givi then
9704: LD_EXP 22
9708: NOT
9709: IFFALSE 9725
// Say ( Kurt , DKs-Start-37-a ) else
9711: LD_EXP 32
9715: PPUSH
9716: LD_STRING DKs-Start-37-a
9718: PPUSH
9719: CALL_OW 88
9723: GO 9737
// Say ( Kurt , DKs-Start-37 ) ;
9725: LD_EXP 32
9729: PPUSH
9730: LD_STRING DKs-Start-37
9732: PPUSH
9733: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9737: LD_EXP 32
9741: PPUSH
9742: LD_STRING DKs-Start-38
9744: PPUSH
9745: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9749: LD_EXP 21
9753: PPUSH
9754: LD_EXP 32
9758: PPUSH
9759: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9763: LD_EXP 21
9767: PPUSH
9768: LD_STRING DH-Start-39
9770: PPUSH
9771: CALL_OW 88
// end ; end else
9775: GO 9806
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9777: LD_EXP 34
9781: PPUSH
9782: LD_STRING DArm-Start-a-37
9784: PPUSH
9785: LD_STRING DArf-Start-a-37
9787: PPUSH
9788: CALL 1206 0 3
9792: IFFALSE 9806
// Say ( Heike , DH-Start-39 ) ;
9794: LD_EXP 21
9798: PPUSH
9799: LD_STRING DH-Start-39
9801: PPUSH
9802: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9806: LD_INT 44
9808: PPUSH
9809: LD_INT 25
9811: PPUSH
9812: CALL_OW 428
9816: IFFALSE 9833
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9818: LD_INT 44
9820: PPUSH
9821: LD_INT 25
9823: PPUSH
9824: CALL_OW 428
9828: PPUSH
9829: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9833: LD_EXP 30
9837: PPUSH
9838: LD_INT 5
9840: PPUSH
9841: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9845: LD_EXP 30
9849: PPUSH
9850: LD_INT 44
9852: PPUSH
9853: LD_INT 25
9855: PPUSH
9856: LD_INT 0
9858: PPUSH
9859: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9863: LD_EXP 30
9867: PPUSH
9868: LD_INT 29
9870: PPUSH
9871: LD_INT 12
9873: PPUSH
9874: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9878: LD_INT 35
9880: PPUSH
9881: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9885: LD_OWVAR 59
9889: PUSH
9890: LD_EXP 21
9894: PPUSH
9895: LD_EXP 30
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: LESS
9908: OR
9909: PUSH
9910: LD_EXP 30
9914: PPUSH
9915: LD_INT 26
9917: PPUSH
9918: LD_INT 9
9920: PPUSH
9921: CALL_OW 297
9925: PUSH
9926: LD_INT 6
9928: LESS
9929: OR
9930: IFFALSE 9878
// Say ( Olaf , DO-Scout-1 ) ;
9932: LD_EXP 30
9936: PPUSH
9937: LD_STRING DO-Scout-1
9939: PPUSH
9940: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9944: LD_EXP 30
9948: PPUSH
9949: LD_EXP 21
9953: PPUSH
9954: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9958: LD_ADDR_VAR 0 2
9962: PUSH
9963: LD_VAR 0 6
9967: PUSH
9968: LD_EXP 34
9972: UNION
9973: PUSH
9974: FOR_IN
9975: IFFALSE 9993
// ComTurnUnit ( i , Olaf ) ;
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_EXP 30
9986: PPUSH
9987: CALL_OW 119
9991: GO 9974
9993: POP
9994: POP
// wait ( 0 0$0.3 ) ;
9995: LD_INT 10
9997: PPUSH
9998: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10002: LD_EXP 21
10006: PPUSH
10007: LD_EXP 30
10011: PPUSH
10012: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10016: LD_EXP 21
10020: PPUSH
10021: LD_EXP 30
10025: PPUSH
10026: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10030: LD_EXP 21
10034: PPUSH
10035: LD_STRING DH-Scout-2
10037: PPUSH
10038: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10042: LD_EXP 30
10046: PPUSH
10047: LD_STRING DO-Scout-3
10049: PPUSH
10050: CALL_OW 88
// if Mike and Givi then
10054: LD_EXP 23
10058: PUSH
10059: LD_EXP 22
10063: AND
10064: IFFALSE 10080
// Say ( Olaf , DO-Scout-4 ) else
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-4
10073: PPUSH
10074: CALL_OW 88
10078: GO 10180
// begin if Mike then
10080: LD_EXP 23
10084: IFFALSE 10112
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10086: LD_EXP 30
10090: PPUSH
10091: LD_STRING DO-Scout-a-4
10093: PPUSH
10094: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10098: LD_EXP 21
10102: PPUSH
10103: LD_STRING DH-Scout-a-5
10105: PPUSH
10106: CALL_OW 88
// end else
10110: GO 10180
// if Givi then
10112: LD_EXP 22
10116: IFFALSE 10144
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10118: LD_EXP 30
10122: PPUSH
10123: LD_STRING DO-Scout-b-4
10125: PPUSH
10126: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10130: LD_EXP 21
10134: PPUSH
10135: LD_STRING DH-Scout-b-5
10137: PPUSH
10138: CALL_OW 88
// end else
10142: GO 10180
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10144: LD_EXP 30
10148: PPUSH
10149: LD_STRING DO-Scout-f-4
10151: PPUSH
10152: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10156: LD_EXP 21
10160: PPUSH
10161: LD_STRING DH-Scout-f-5
10163: PPUSH
10164: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10168: LD_EXP 30
10172: PPUSH
10173: LD_STRING DO-Scout-f-6
10175: PPUSH
10176: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10180: LD_EXP 21
10184: PPUSH
10185: LD_STRING DH-Scout-5
10187: PPUSH
10188: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10192: LD_EXP 30
10196: PPUSH
10197: LD_STRING DO-Scout-6
10199: PPUSH
10200: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10204: LD_EXP 30
10208: PPUSH
10209: LD_STRING DO-Scout-7
10211: PPUSH
10212: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10216: LD_EXP 21
10220: PPUSH
10221: LD_STRING DH-Scout-8
10223: PPUSH
10224: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10228: LD_EXP 21
10232: PPUSH
10233: LD_STRING DH-Scout-9
10235: PPUSH
10236: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10240: LD_EXP 30
10244: PPUSH
10245: LD_STRING DO-Scout-10
10247: PPUSH
10248: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10252: LD_EXP 30
10256: PPUSH
10257: LD_STRING DO-Scout-12
10259: PPUSH
10260: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10264: LD_EXP 30
10268: PPUSH
10269: LD_STRING DO-Scout-13
10271: PPUSH
10272: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10276: LD_EXP 30
10280: PPUSH
10281: LD_STRING DO-Scout-14
10283: PPUSH
10284: CALL_OW 88
// if Givi then
10288: LD_EXP 22
10292: IFFALSE 10318
// begin Say ( Givi , DG-Scout-15 ) ;
10294: LD_EXP 22
10298: PPUSH
10299: LD_STRING DG-Scout-15
10301: PPUSH
10302: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10306: LD_EXP 26
10310: PPUSH
10311: LD_STRING DK-Scout-16
10313: PPUSH
10314: CALL_OW 88
// end ; if not dialogue_skipped then
10318: LD_OWVAR 59
10322: NOT
10323: IFFALSE 10444
// begin async ;
10325: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10326: LD_EXP 30
10330: PPUSH
10331: LD_STRING DO-Scout-17
10333: PPUSH
10334: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10338: LD_INT 55
10340: PPUSH
10341: LD_INT 77
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 6
10349: NEG
10350: PPUSH
10351: CALL 1155 0 4
// wait ( 10 ) ;
10355: LD_INT 10
10357: PPUSH
10358: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10362: LD_INT 55
10364: PPUSH
10365: LD_INT 77
10367: PPUSH
10368: CALL_OW 84
// wait ( 0 0$10 ) ;
10372: LD_INT 350
10374: PPUSH
10375: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10379: LD_EXP 30
10383: PPUSH
10384: LD_STRING DO-Scout-18
10386: PPUSH
10387: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10391: LD_INT 204
10393: PPUSH
10394: LD_INT 107
10396: PPUSH
10397: LD_INT 2
10399: PPUSH
10400: LD_INT 12
10402: NEG
10403: PPUSH
10404: CALL 1155 0 4
// wait ( 10 ) ;
10408: LD_INT 10
10410: PPUSH
10411: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10415: LD_INT 204
10417: PPUSH
10418: LD_INT 107
10420: PPUSH
10421: CALL_OW 84
// wait ( 0 0$10 ) ;
10425: LD_INT 350
10427: PPUSH
10428: CALL_OW 67
// sync ;
10432: SYNC
// CenterNowOnUnits ( Heike ) ;
10433: LD_EXP 21
10437: PPUSH
10438: CALL_OW 87
// end else
10442: GO 10478
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10444: LD_INT 55
10446: PPUSH
10447: LD_INT 77
10449: PPUSH
10450: LD_INT 2
10452: PPUSH
10453: LD_INT 6
10455: NEG
10456: PPUSH
10457: CALL 1155 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10461: LD_INT 204
10463: PPUSH
10464: LD_INT 107
10466: PPUSH
10467: LD_INT 2
10469: PPUSH
10470: LD_INT 12
10472: NEG
10473: PPUSH
10474: CALL 1155 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10478: LD_EXP 30
10482: PPUSH
10483: LD_STRING DO-Scout-19
10485: PPUSH
10486: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10490: LD_EXP 30
10494: PPUSH
10495: LD_STRING DO-Scout-20
10497: PPUSH
10498: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10502: LD_EXP 21
10506: PPUSH
10507: LD_STRING DH-Scout-21
10509: PPUSH
10510: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10514: LD_EXP 21
10518: PPUSH
10519: LD_STRING DH-Scout-22
10521: PPUSH
10522: CALL_OW 88
// InGameOff ;
10526: CALL_OW 9
// if heikeSecondSquad then
10530: LD_EXP 34
10534: IFFALSE 10548
// ForceSleep ( heikeSecondSquad , false ) ;
10536: LD_EXP 34
10540: PPUSH
10541: LD_INT 0
10543: PPUSH
10544: CALL_OW 585
// if Givi then
10548: LD_EXP 22
10552: IFFALSE 10567
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10554: LD_INT 13
10556: PPUSH
10557: LD_INT 2
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10567: LD_STRING Road
10569: PPUSH
10570: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: LD_INT 22
10581: PUSH
10582: LD_INT 5
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 21
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 69
10607: PUSH
10608: FOR_IN
10609: IFFALSE 10625
// SetSide ( i , 2 ) ;
10611: LD_VAR 0 2
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: CALL_OW 235
10623: GO 10608
10625: POP
10626: POP
// SaveForQuickRestart ;
10627: CALL_OW 22
// music_class := music_auto ;
10631: LD_ADDR_OWVAR 72
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// end ;
10639: LD_VAR 0 1
10643: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10644: LD_INT 2
10646: PPUSH
10647: LD_INT 9
10649: PPUSH
10650: CALL_OW 294
10654: IFFALSE 11019
10656: GO 10658
10658: DISABLE
// begin DialogueOn ;
10659: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10663: LD_INT 111
10665: PPUSH
10666: LD_INT 72
10668: PPUSH
10669: LD_INT 2
10671: PPUSH
10672: LD_INT 20
10674: NEG
10675: PPUSH
10676: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10680: LD_INT 111
10682: PPUSH
10683: LD_INT 72
10685: PPUSH
10686: LD_INT 2
10688: PPUSH
10689: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10693: LD_INT 111
10695: PPUSH
10696: LD_INT 72
10698: PPUSH
10699: CALL_OW 86
// if IsOk ( Kamil ) then
10703: LD_EXP 25
10707: PPUSH
10708: CALL_OW 302
10712: IFFALSE 10829
// begin Say ( Kamil , DKam-Cross-1 ) ;
10714: LD_EXP 25
10718: PPUSH
10719: LD_STRING DKam-Cross-1
10721: PPUSH
10722: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10726: LD_EXP 25
10730: PPUSH
10731: LD_STRING DKam-Cross-2
10733: PPUSH
10734: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10738: LD_EXP 25
10742: PPUSH
10743: LD_STRING DKam-Cross-3
10745: PPUSH
10746: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10750: LD_EXP 25
10754: PPUSH
10755: LD_STRING DKam-Cross-4
10757: PPUSH
10758: CALL_OW 88
// if IsOk ( Ibrahim ) then
10762: LD_EXP 24
10766: PPUSH
10767: CALL_OW 302
10771: IFFALSE 10827
// begin if ibrahimJoinedIn04 then
10773: LD_EXP 4
10777: IFFALSE 10791
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10779: LD_EXP 24
10783: PPUSH
10784: LD_STRING DI-Cross-b-5
10786: PPUSH
10787: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10791: LD_EXP 24
10795: PPUSH
10796: LD_STRING DI-Cross-b-6
10798: PPUSH
10799: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10803: LD_EXP 24
10807: PPUSH
10808: LD_STRING DI-Cross-b-7
10810: PPUSH
10811: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10815: LD_EXP 25
10819: PPUSH
10820: LD_STRING DKam-Cross-8
10822: PPUSH
10823: CALL_OW 88
// end ; end else
10827: GO 10987
// if IsOk ( Sophia ) then
10829: LD_EXP 27
10833: PPUSH
10834: CALL_OW 302
10838: IFFALSE 10955
// begin Say ( Sophia , DS-Cross-1 ) ;
10840: LD_EXP 27
10844: PPUSH
10845: LD_STRING DS-Cross-1
10847: PPUSH
10848: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10852: LD_EXP 27
10856: PPUSH
10857: LD_STRING DS-Cross-2
10859: PPUSH
10860: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10864: LD_EXP 27
10868: PPUSH
10869: LD_STRING DS-Cross-3
10871: PPUSH
10872: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10876: LD_EXP 27
10880: PPUSH
10881: LD_STRING DS-Cross-4
10883: PPUSH
10884: CALL_OW 88
// if IsOk ( Ibrahim ) then
10888: LD_EXP 24
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10953
// begin if ibrahimJoinedIn04 then
10899: LD_EXP 4
10903: IFFALSE 10917
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10905: LD_EXP 24
10909: PPUSH
10910: LD_STRING DI-Cross-b-5
10912: PPUSH
10913: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10917: LD_EXP 24
10921: PPUSH
10922: LD_STRING DI-Cross-b-6
10924: PPUSH
10925: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10929: LD_EXP 24
10933: PPUSH
10934: LD_STRING DI-Cross-b-7
10936: PPUSH
10937: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10941: LD_EXP 27
10945: PPUSH
10946: LD_STRING DS-Cross-8
10948: PPUSH
10949: CALL_OW 88
// end ; end else
10953: GO 10987
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10955: LD_EXP 34
10959: PPUSH
10960: LD_INT 50
10962: PUSH
10963: EMPTY
10964: LIST
10965: PPUSH
10966: CALL_OW 72
10970: IFFALSE 10987
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10972: LD_EXP 34
10976: PPUSH
10977: LD_STRING DArm-Cross-c-1
10979: PPUSH
10980: LD_STRING DArf-Cross-c-1
10982: PPUSH
10983: CALL 1206 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10987: LD_INT 85
10989: PPUSH
10990: LD_INT 2
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// DialogueOff ;
11000: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11004: LD_STRING Crane
11006: PPUSH
11007: CALL_OW 337
// spottedCrossRoad := true ;
11011: LD_ADDR_EXP 8
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// end ;
11019: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11020: LD_INT 22
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: LD_INT 30
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: PUSH
11067: LD_EXP 26
11071: PPUSH
11072: CALL_OW 302
11076: PUSH
11077: LD_EXP 34
11081: OR
11082: AND
11083: IFFALSE 11295
11085: GO 11087
11087: DISABLE
// begin DialogueOn ;
11088: CALL_OW 6
// if Kaia then
11092: LD_EXP 26
11096: IFFALSE 11109
// CenterNowOnUnits ( Kaia ) else
11098: LD_EXP 26
11102: PPUSH
11103: CALL_OW 87
11107: GO 11118
// CenterNowOnUnits ( Heike ) ;
11109: LD_EXP 21
11113: PPUSH
11114: CALL_OW 87
// if IsOk ( Kaia ) then
11118: LD_EXP 26
11122: PPUSH
11123: CALL_OW 302
11127: IFFALSE 11143
// Say ( Kaia , DK-Cam-1 ) else
11129: LD_EXP 26
11133: PPUSH
11134: LD_STRING DK-Cam-1
11136: PPUSH
11137: CALL_OW 88
11141: GO 11158
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11143: LD_EXP 34
11147: PPUSH
11148: LD_STRING DArm-Cam-1
11150: PPUSH
11151: LD_STRING DArf-Cam-1
11153: PPUSH
11154: CALL 1206 0 3
// Say ( Heike , DH-Cam-2 ) ;
11158: LD_EXP 21
11162: PPUSH
11163: LD_STRING DH-Cam-2
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11170: LD_EXP 21
11174: PPUSH
11175: LD_STRING DH-Cam-3
11177: PPUSH
11178: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11182: LD_EXP 21
11186: PPUSH
11187: LD_STRING DH-Cam-4
11189: PPUSH
11190: CALL_OW 88
// if IsOk ( Kaia ) then
11194: LD_EXP 26
11198: PPUSH
11199: CALL_OW 302
11203: IFFALSE 11219
// Say ( Kaia , DK-Cam-5 ) else
11205: LD_EXP 26
11209: PPUSH
11210: LD_STRING DK-Cam-5
11212: PPUSH
11213: CALL_OW 88
11217: GO 11234
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11219: LD_EXP 34
11223: PPUSH
11224: LD_STRING DArm-Cam-5
11226: PPUSH
11227: LD_STRING DArf-Cam-5
11229: PPUSH
11230: CALL 1206 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11234: LD_EXP 30
11238: PPUSH
11239: LD_STRING DO-Cam-6
11241: PPUSH
11242: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11246: LD_EXP 30
11250: PPUSH
11251: LD_STRING DO-Cam-7
11253: PPUSH
11254: CALL_OW 88
// DialogueOff ;
11258: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11262: LD_STRING Radar
11264: PPUSH
11265: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11269: LD_INT 6
11271: PPUSH
11272: LD_INT 2
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11282: LD_INT 20
11284: PPUSH
11285: LD_INT 2
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 324
// end ;
11295: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11296: LD_INT 22
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 2
11308: PUSH
11309: LD_INT 34
11311: PUSH
11312: LD_INT 30
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 35
11321: PUSH
11322: LD_INT 30
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PPUSH
11338: CALL_OW 69
11342: IFFALSE 11354
11344: GO 11346
11346: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11347: LD_STRING RadarDone
11349: PPUSH
11350: CALL_OW 337
11354: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11355: LD_INT 22
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 34
11367: PUSH
11368: LD_INT 88
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: IFFALSE 11395
11385: GO 11387
11387: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11388: LD_STRING CraneDone
11390: PPUSH
11391: CALL_OW 337
11395: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11396: LD_EXP 30
11400: PPUSH
11401: CALL_OW 302
11405: PUSH
11406: LD_EXP 33
11410: PPUSH
11411: CALL_OW 302
11415: AND
11416: PUSH
11417: LD_INT 6
11419: PPUSH
11420: LD_INT 2
11422: PPUSH
11423: CALL_OW 321
11427: PUSH
11428: LD_INT 2
11430: EQUAL
11431: AND
11432: PUSH
11433: LD_EXP 33
11437: PPUSH
11438: LD_EXP 21
11442: PPUSH
11443: CALL_OW 296
11447: PUSH
11448: LD_INT 10
11450: LESS
11451: PUSH
11452: LD_EXP 33
11456: PPUSH
11457: CALL_OW 310
11461: OR
11462: AND
11463: IFFALSE 11677
11465: GO 11467
11467: DISABLE
// begin DialogueOn ;
11468: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11472: LD_EXP 33
11476: PPUSH
11477: LD_STRING DA-RC-1
11479: PPUSH
11480: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11484: LD_EXP 33
11488: PPUSH
11489: LD_STRING DA-RC-2
11491: PPUSH
11492: CALL_OW 88
// if IsOk ( Kaia ) then
11496: LD_EXP 26
11500: PPUSH
11501: CALL_OW 302
11505: IFFALSE 11579
// begin Say ( Kaia , DK-RC-3 ) ;
11507: LD_EXP 26
11511: PPUSH
11512: LD_STRING DK-RC-3
11514: PPUSH
11515: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11519: LD_EXP 33
11523: PPUSH
11524: LD_STRING DA-RC-4
11526: PPUSH
11527: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11531: LD_EXP 26
11535: PPUSH
11536: LD_STRING DK-RC-5
11538: PPUSH
11539: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11543: LD_EXP 33
11547: PPUSH
11548: LD_STRING DA-RC-6
11550: PPUSH
11551: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11555: LD_EXP 26
11559: PPUSH
11560: LD_STRING DK-RC-7
11562: PPUSH
11563: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11567: LD_EXP 33
11571: PPUSH
11572: LD_STRING DA-RC-8
11574: PPUSH
11575: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11579: LD_EXP 21
11583: PPUSH
11584: LD_STRING DH-RC-9
11586: PPUSH
11587: CALL_OW 88
// if IsOk ( Markov ) then
11591: LD_EXP 28
11595: PPUSH
11596: CALL_OW 302
11600: IFFALSE 11628
// begin Say ( Markov , DMar-RC-10 ) ;
11602: LD_EXP 28
11606: PPUSH
11607: LD_STRING DMar-RC-10
11609: PPUSH
11610: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11614: LD_EXP 28
11618: PPUSH
11619: LD_STRING DMar-RC-11
11621: PPUSH
11622: CALL_OW 88
// end else
11626: GO 11640
// begin Say ( Olaf , DO-RC-a-10 ) ;
11628: LD_EXP 30
11632: PPUSH
11633: LD_STRING DO-RC-a-10
11635: PPUSH
11636: CALL_OW 88
// end ; DialogueOff ;
11640: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11644: LD_STRING RemoteControl
11646: PPUSH
11647: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11651: LD_INT 15
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11664: LD_INT 22
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 324
// end ;
11677: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11678: LD_INT 12
11680: PPUSH
11681: LD_INT 22
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 70
11695: IFFALSE 12062
11697: GO 11699
11699: DISABLE
11700: LD_INT 0
11702: PPUSH
// begin PrepareWestBase ;
11703: CALL 3969 0 0
// westBaseSpotted := true ;
11707: LD_ADDR_EXP 5
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11715: LD_INT 70
11717: PPUSH
11718: CALL_OW 67
// InGameOn ;
11722: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11726: LD_INT 56
11728: PPUSH
11729: LD_INT 77
11731: PPUSH
11732: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11736: LD_INT 56
11738: PPUSH
11739: LD_INT 77
11741: PPUSH
11742: LD_INT 2
11744: PPUSH
11745: LD_INT 12
11747: NEG
11748: PPUSH
11749: CALL_OW 330
// wait ( 0 0$2 ) ;
11753: LD_INT 70
11755: PPUSH
11756: CALL_OW 67
// DialogueOn ;
11760: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11764: LD_EXP 21
11768: PPUSH
11769: LD_STRING DH-Rbase-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11776: LD_EXP 26
11780: PPUSH
11781: LD_STRING DK-Rbase-2
11783: PPUSH
11784: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11788: LD_EXP 26
11792: PPUSH
11793: LD_STRING DK-Rbase-3
11795: PPUSH
11796: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11800: LD_EXP 26
11804: PPUSH
11805: LD_STRING DK-Rbase-4
11807: PPUSH
11808: CALL_OW 88
// DialogueOff ;
11812: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11816: LD_INT 56
11818: PPUSH
11819: LD_INT 77
11821: PPUSH
11822: LD_INT 2
11824: PPUSH
11825: CALL_OW 331
// InGameOff ;
11829: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11833: LD_INT 35
11835: PPUSH
11836: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11840: LD_EXP 42
11844: NOT
11845: PUSH
11846: LD_EXP 43
11850: NOT
11851: AND
11852: IFFALSE 11833
// wait ( 0 0$2 ) ;
11854: LD_INT 70
11856: PPUSH
11857: CALL_OW 67
// if IsOk ( Kaia ) then
11861: LD_EXP 26
11865: PPUSH
11866: CALL_OW 302
11870: IFFALSE 11985
// begin DialogueOn ;
11872: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11876: LD_INT 56
11878: PPUSH
11879: LD_INT 81
11881: PPUSH
11882: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11886: LD_EXP 26
11890: PPUSH
11891: LD_STRING DK-Rbase-5
11893: PPUSH
11894: CALL_OW 88
// if IsOk ( Givi ) then
11898: LD_EXP 22
11902: PPUSH
11903: CALL_OW 302
11907: IFFALSE 11981
// begin Say ( Givi , DG-Rbase-6 ) ;
11909: LD_EXP 22
11913: PPUSH
11914: LD_STRING DG-Rbase-6
11916: PPUSH
11917: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11921: LD_EXP 22
11925: PPUSH
11926: LD_STRING DG-Rbase-7
11928: PPUSH
11929: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11933: LD_EXP 26
11937: PPUSH
11938: LD_STRING DK-Rbase-8
11940: PPUSH
11941: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11945: LD_EXP 22
11949: PPUSH
11950: LD_STRING DG-Rbase-9
11952: PPUSH
11953: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11957: LD_EXP 22
11961: PPUSH
11962: LD_STRING DG-Rbase-10
11964: PPUSH
11965: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11969: LD_EXP 26
11973: PPUSH
11974: LD_STRING DK-Rbase-11
11976: PPUSH
11977: CALL_OW 88
// end ; DialogueOff ;
11981: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: LD_INT 12
11992: PPUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 3
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 21
12005: PUSH
12006: LD_INT 3
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 70
12021: PUSH
12022: FOR_IN
12023: IFFALSE 12039
// SetSide ( i , 2 ) ;
12025: LD_VAR 0 1
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 235
12037: GO 12022
12039: POP
12040: POP
// westBaseCaptured := true ;
12041: LD_ADDR_EXP 9
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12049: LD_INT 0
12051: PPUSH
12052: LD_INT 2
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 324
// end ;
12062: PPOPN 1
12064: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 or tick > 15 15$00 do
12065: LD_EXP 38
12069: NOT
12070: PUSH
12071: LD_INT 10
12073: PPUSH
12074: CALL_OW 255
12078: PUSH
12079: LD_INT 2
12081: EQUAL
12082: OR
12083: PUSH
12084: LD_OWVAR 1
12088: PUSH
12089: LD_INT 31500
12091: GREATER
12092: OR
12093: IFFALSE 12230
12095: GO 12097
12097: DISABLE
// begin DialogueOn ;
12098: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12102: LD_EXP 21
12106: PPUSH
12107: LD_STRING DH-Goal-1
12109: PPUSH
12110: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12114: LD_EXP 29
12118: PPUSH
12119: LD_STRING DShar-Goal-2
12121: PPUSH
12122: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12126: LD_EXP 21
12130: PPUSH
12131: LD_STRING DH-Goal-3
12133: PPUSH
12134: CALL_OW 88
// if reinforcementsAllowed then
12138: LD_EXP 14
12142: IFFALSE 12168
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12144: LD_EXP 29
12148: PPUSH
12149: LD_STRING DShar-Goal-4
12151: PPUSH
12152: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12156: LD_EXP 21
12160: PPUSH
12161: LD_STRING DH-Goal-5
12163: PPUSH
12164: CALL_OW 88
// end ; DialogueOff ;
12168: CALL_OW 7
// eastBaseCaptured := true ;
12172: LD_ADDR_EXP 10
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12180: LD_STRING BaseCaptured
12182: PPUSH
12183: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12187: LD_INT 10
12189: PPUSH
12190: LD_INT 2
12192: PPUSH
12193: CALL_OW 235
// if not reinforcementsAllowed then
12197: LD_EXP 14
12201: NOT
12202: IFFALSE 12206
// exit ;
12204: GO 12230
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12206: LD_INT 21000
12208: PUSH
12209: LD_INT 1050
12211: NEG
12212: PPUSH
12213: LD_INT 1050
12215: PPUSH
12216: CALL_OW 12
12220: PLUS
12221: PPUSH
12222: CALL_OW 67
// PrepareReinforcements ;
12226: CALL 2182 0 0
// end ;
12230: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12231: LD_INT 22
12233: PUSH
12234: LD_INT 2
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 30
12243: PUSH
12244: LD_INT 13
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: IFFALSE 12276
12261: GO 12263
12263: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12264: LD_EXP 22
12268: PPUSH
12269: LD_STRING DG-Lab-1
12271: PPUSH
12272: CALL_OW 88
// end ;
12276: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12277: LD_INT 5
12279: PPUSH
12280: LD_INT 2
12282: PPUSH
12283: CALL_OW 321
12287: PUSH
12288: LD_INT 2
12290: EQUAL
12291: PUSH
12292: LD_EXP 22
12296: PPUSH
12297: CALL_OW 302
12301: AND
12302: IFFALSE 12363
12304: GO 12306
12306: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12307: LD_EXP 22
12311: PPUSH
12312: LD_STRING DG-Stim-1
12314: PPUSH
12315: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12319: LD_EXP 21
12323: PPUSH
12324: LD_STRING DH-Stim-2
12326: PPUSH
12327: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12331: LD_EXP 22
12335: PPUSH
12336: LD_STRING DG-Stim-3
12338: PPUSH
12339: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12343: LD_EXP 21
12347: PPUSH
12348: LD_STRING DH-Stim-4
12350: PPUSH
12351: CALL_OW 88
// drugsResearched := true ;
12355: LD_ADDR_EXP 11
12359: PUSH
12360: LD_INT 1
12362: ST_TO_ADDR
// end ;
12363: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12364: LD_EXP 11
12368: IFFALSE 12680
12370: GO 12372
12372: DISABLE
12373: LD_INT 0
12375: PPUSH
12376: PPUSH
12377: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12378: LD_ADDR_VAR 0 2
12382: PUSH
12383: LD_EXP 21
12387: PUSH
12388: LD_EXP 22
12392: PUSH
12393: LD_EXP 30
12397: PUSH
12398: LD_EXP 28
12402: PUSH
12403: LD_EXP 26
12407: PUSH
12408: LD_EXP 27
12412: PUSH
12413: LD_EXP 32
12417: PUSH
12418: LD_EXP 25
12422: PUSH
12423: LD_EXP 23
12427: PUSH
12428: LD_EXP 24
12432: PUSH
12433: LD_EXP 33
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12451: LD_ADDR_VAR 0 3
12455: PUSH
12456: LD_STRING H
12458: PUSH
12459: LD_STRING G
12461: PUSH
12462: LD_STRING O
12464: PUSH
12465: LD_STRING Mar
12467: PUSH
12468: LD_STRING K
12470: PUSH
12471: LD_STRING S
12473: PUSH
12474: LD_STRING Ks
12476: PUSH
12477: LD_STRING Kam
12479: PUSH
12480: LD_STRING M
12482: PUSH
12483: LD_STRING I
12485: PUSH
12486: LD_STRING A
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12502: LD_INT 35
12504: PPUSH
12505: CALL_OW 67
// for i := tmp downto 1 do
12509: LD_ADDR_VAR 0 1
12513: PUSH
12514: DOUBLE
12515: LD_VAR 0 2
12519: INC
12520: ST_TO_ADDR
12521: LD_INT 1
12523: PUSH
12524: FOR_DOWNTO
12525: IFFALSE 12671
// if GetLives ( tmp [ i ] ) < 250 then
12527: LD_VAR 0 2
12531: PUSH
12532: LD_VAR 0 1
12536: ARRAY
12537: PPUSH
12538: CALL_OW 256
12542: PUSH
12543: LD_INT 250
12545: LESS
12546: IFFALSE 12669
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12548: LD_ADDR_EXP 19
12552: PUSH
12553: LD_EXP 19
12557: PUSH
12558: LD_INT 1
12560: PLUS
12561: ST_TO_ADDR
// DialogueOn ;
12562: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12566: LD_VAR 0 2
12570: PUSH
12571: LD_VAR 0 1
12575: ARRAY
12576: PPUSH
12577: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12581: LD_VAR 0 2
12585: PUSH
12586: LD_VAR 0 1
12590: ARRAY
12591: PPUSH
12592: LD_STRING D
12594: PUSH
12595: LD_VAR 0 3
12599: PUSH
12600: LD_VAR 0 1
12604: ARRAY
12605: STR
12606: PUSH
12607: LD_STRING -Stim-a-1
12609: STR
12610: PPUSH
12611: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12615: LD_ADDR_VAR 0 2
12619: PUSH
12620: LD_VAR 0 2
12624: PPUSH
12625: LD_VAR 0 1
12629: PPUSH
12630: CALL_OW 3
12634: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12635: LD_ADDR_VAR 0 3
12639: PUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_VAR 0 1
12649: PPUSH
12650: CALL_OW 3
12654: ST_TO_ADDR
// drugsTested := true ;
12655: LD_ADDR_EXP 6
12659: PUSH
12660: LD_INT 1
12662: ST_TO_ADDR
// DialogueOff ;
12663: CALL_OW 7
// break ;
12667: GO 12671
// end ;
12669: GO 12524
12671: POP
12672: POP
// until not tmp ;
12673: LD_VAR 0 2
12677: NOT
12678: IFFALSE 12502
// end ;
12680: PPOPN 3
12682: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12683: LD_INT 22
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: LD_INT 34
12695: PUSH
12696: LD_INT 31
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 69
12711: PUSH
12712: LD_INT 22
12714: PUSH
12715: LD_INT 2
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 33
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: AND
12741: IFFALSE 12754
12743: GO 12745
12745: DISABLE
// remoteControlConstructed := true ;
12746: LD_ADDR_EXP 12
12750: PUSH
12751: LD_INT 1
12753: ST_TO_ADDR
12754: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12755: LD_EXP 12
12759: IFFALSE 13059
12761: GO 12763
12763: DISABLE
12764: LD_INT 0
12766: PPUSH
12767: PPUSH
12768: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12769: LD_ADDR_VAR 0 2
12773: PUSH
12774: LD_EXP 21
12778: PUSH
12779: LD_EXP 22
12783: PUSH
12784: LD_EXP 30
12788: PUSH
12789: LD_EXP 28
12793: PUSH
12794: LD_EXP 26
12798: PUSH
12799: LD_EXP 27
12803: PUSH
12804: LD_EXP 32
12808: PUSH
12809: LD_EXP 25
12813: PUSH
12814: LD_EXP 23
12818: PUSH
12819: LD_EXP 24
12823: PUSH
12824: LD_EXP 33
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12842: LD_ADDR_VAR 0 3
12846: PUSH
12847: LD_STRING H
12849: PUSH
12850: LD_STRING G
12852: PUSH
12853: LD_STRING O
12855: PUSH
12856: LD_STRING Mar
12858: PUSH
12859: LD_STRING K
12861: PUSH
12862: LD_STRING S
12864: PUSH
12865: LD_STRING Ks
12867: PUSH
12868: LD_STRING Kam
12870: PUSH
12871: LD_STRING M
12873: PUSH
12874: LD_STRING I
12876: PUSH
12877: LD_STRING A
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12893: LD_INT 35
12895: PPUSH
12896: CALL_OW 67
// for i := tmp downto 1 do
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: DOUBLE
12906: LD_VAR 0 2
12910: INC
12911: ST_TO_ADDR
12912: LD_INT 1
12914: PUSH
12915: FOR_DOWNTO
12916: IFFALSE 13050
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12918: LD_VAR 0 2
12922: PUSH
12923: LD_VAR 0 1
12927: ARRAY
12928: PPUSH
12929: CALL_OW 257
12933: PUSH
12934: LD_INT 3
12936: EQUAL
12937: PUSH
12938: LD_VAR 0 2
12942: PUSH
12943: LD_VAR 0 1
12947: ARRAY
12948: PPUSH
12949: CALL_OW 432
12953: AND
12954: IFFALSE 13048
// begin DialogueOn ;
12956: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12960: LD_VAR 0 2
12964: PUSH
12965: LD_VAR 0 1
12969: ARRAY
12970: PPUSH
12971: LD_STRING D
12973: PUSH
12974: LD_VAR 0 3
12978: PUSH
12979: LD_VAR 0 1
12983: ARRAY
12984: STR
12985: PUSH
12986: LD_STRING -RC-a-1
12988: STR
12989: PPUSH
12990: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12994: LD_ADDR_VAR 0 2
12998: PUSH
12999: LD_VAR 0 2
13003: PPUSH
13004: LD_VAR 0 1
13008: PPUSH
13009: CALL_OW 3
13013: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_VAR 0 1
13028: PPUSH
13029: CALL_OW 3
13033: ST_TO_ADDR
// DialogueOff ;
13034: CALL_OW 7
// remoteControlTested := true ;
13038: LD_ADDR_EXP 7
13042: PUSH
13043: LD_INT 1
13045: ST_TO_ADDR
// break ;
13046: GO 13050
// end ;
13048: GO 12915
13050: POP
13051: POP
// until not tmp ;
13052: LD_VAR 0 2
13056: NOT
13057: IFFALSE 12893
// end ;
13059: PPOPN 3
13061: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13062: LD_EXP 7
13066: PUSH
13067: LD_EXP 28
13071: PPUSH
13072: CALL_OW 302
13076: AND
13077: IFFALSE 13106
13079: GO 13081
13081: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13082: LD_EXP 28
13086: PPUSH
13087: LD_STRING DMar-RC-a-2
13089: PPUSH
13090: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13094: LD_EXP 28
13098: PPUSH
13099: LD_STRING DMar-RC-a-3
13101: PPUSH
13102: CALL_OW 88
// end ;
13106: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13107: LD_EXP 14
13111: PUSH
13112: LD_EXP 21
13116: PPUSH
13117: LD_EXP 33
13121: PPUSH
13122: CALL_OW 296
13126: PUSH
13127: LD_INT 8
13129: LESS
13130: AND
13131: PUSH
13132: LD_INT 2
13134: PPUSH
13135: CALL_OW 463
13139: NOT
13140: AND
13141: PUSH
13142: LD_EXP 33
13146: PPUSH
13147: CALL_OW 302
13151: AND
13152: PUSH
13153: LD_EXP 21
13157: PPUSH
13158: CALL_OW 302
13162: AND
13163: IFFALSE 13341
13165: GO 13167
13167: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13168: LD_EXP 33
13172: PPUSH
13173: CALL_OW 310
13177: NOT
13178: IFFALSE 13194
// ComTurnUnit ( Aviradze , Heike ) ;
13180: LD_EXP 33
13184: PPUSH
13185: LD_EXP 21
13189: PPUSH
13190: CALL_OW 119
// if not IsInUnit ( Heike ) then
13194: LD_EXP 21
13198: PPUSH
13199: CALL_OW 310
13203: NOT
13204: IFFALSE 13220
// ComTurnUnit ( Heike , Aviradze ) ;
13206: LD_EXP 21
13210: PPUSH
13211: LD_EXP 33
13215: PPUSH
13216: CALL_OW 119
// wait ( 0 0$1 ) ;
13220: LD_INT 35
13222: PPUSH
13223: CALL_OW 67
// DialogueOn ;
13227: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13231: LD_EXP 33
13235: PPUSH
13236: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13240: LD_EXP 21
13244: PPUSH
13245: LD_STRING DH-Beria-1
13247: PPUSH
13248: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13252: LD_EXP 33
13256: PPUSH
13257: LD_STRING DA-Beria-2
13259: PPUSH
13260: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13264: LD_EXP 21
13268: PPUSH
13269: LD_STRING DH-Beria-3
13271: PPUSH
13272: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13276: LD_EXP 33
13280: PPUSH
13281: LD_STRING DA-Beria-4
13283: PPUSH
13284: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13288: LD_EXP 33
13292: PPUSH
13293: LD_STRING DA-Beria-5
13295: PPUSH
13296: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13300: LD_EXP 33
13304: PPUSH
13305: LD_STRING DA-Beria-6
13307: PPUSH
13308: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13312: LD_EXP 21
13316: PPUSH
13317: LD_STRING DA-Beria-7
13319: PPUSH
13320: CALL_OW 88
// DialogueOff ;
13324: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13328: LD_INT 52
13330: PPUSH
13331: LD_INT 2
13333: PPUSH
13334: LD_INT 1
13336: PPUSH
13337: CALL_OW 322
// end ;
13341: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13342: LD_EXP 26
13346: PPUSH
13347: CALL_OW 300
13351: PUSH
13352: LD_EXP 26
13356: PPUSH
13357: CALL_OW 256
13361: PUSH
13362: LD_INT 10
13364: LESS
13365: AND
13366: IFFALSE 13403
13368: GO 13370
13370: DISABLE
// begin DialogueOn ;
13371: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13375: LD_EXP 26
13379: PPUSH
13380: LD_STRING DK-Kdeath-1
13382: PPUSH
13383: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13387: LD_EXP 21
13391: PPUSH
13392: LD_STRING DH-Kdeath-2
13394: PPUSH
13395: CALL_OW 88
// DialogueOff ;
13399: CALL_OW 7
// end ;
13403: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13404: LD_INT 2
13406: PPUSH
13407: LD_EXP 39
13411: PPUSH
13412: CALL 1306 0 2
13416: IFFALSE 13433
13418: GO 13420
13420: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13421: LD_EXP 21
13425: PPUSH
13426: LD_STRING DH-Obj-1
13428: PPUSH
13429: CALL_OW 88
13433: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13434: LD_INT 2
13436: PPUSH
13437: LD_EXP 40
13441: PPUSH
13442: CALL 1306 0 2
13446: IFFALSE 13463
13448: GO 13450
13450: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13451: LD_EXP 21
13455: PPUSH
13456: LD_STRING DH-Obj-a-1
13458: PPUSH
13459: CALL_OW 88
13463: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13464: LD_EXP 10
13468: PUSH
13469: LD_OWVAR 1
13473: PUSH
13474: LD_INT 23100
13476: PUSH
13477: LD_INT 22050
13479: PUSH
13480: LD_INT 21000
13482: PUSH
13483: LD_INT 19950
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: LD_OWVAR 67
13496: ARRAY
13497: GREATEREQUAL
13498: OR
13499: IFFALSE 13525
13501: GO 13503
13503: DISABLE
// begin if eastBaseCaptured then
13504: LD_EXP 10
13508: IFFALSE 13517
// wait ( 2 2$00 ) ;
13510: LD_INT 4200
13512: PPUSH
13513: CALL_OW 67
// convoyStarted := true ;
13517: LD_ADDR_EXP 17
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// end ;
13525: END
// every 0 0$1 trigger convoyStarted do
13526: LD_EXP 17
13530: IFFALSE 13621
13532: GO 13534
13534: DISABLE
// begin DialogueOn ;
13535: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13539: LD_EXP 29
13543: PPUSH
13544: LD_STRING DShar-Convoy-1
13546: PPUSH
13547: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13551: LD_EXP 21
13555: PPUSH
13556: LD_STRING DH-Convoy-2
13558: PPUSH
13559: CALL_OW 88
// DialogueOff ;
13563: CALL_OW 7
// wait ( 0 0$10 ) ;
13567: LD_INT 350
13569: PPUSH
13570: CALL_OW 67
// PrepareConvoy ;
13574: CALL 4616 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13578: LD_INT 5250
13580: PPUSH
13581: LD_INT 11550
13583: PPUSH
13584: CALL_OW 12
13588: PPUSH
13589: CALL_OW 67
// PrepareConvoy ;
13593: CALL 4616 0 0
// convoyCounter := convoyCounter - 1 ;
13597: LD_ADDR_EXP 16
13601: PUSH
13602: LD_EXP 16
13606: PUSH
13607: LD_INT 1
13609: MINUS
13610: ST_TO_ADDR
// until convoyCounter <= 0 ;
13611: LD_EXP 16
13615: PUSH
13616: LD_INT 0
13618: LESSEQUAL
13619: IFFALSE 13578
// end ;
13621: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13622: LD_EXP 15
13626: PUSH
13627: LD_INT 10
13629: GREATEREQUAL
13630: IFFALSE 13647
13632: GO 13634
13634: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13635: LD_EXP 31
13639: PPUSH
13640: LD_STRING DOm-Fail-1
13642: PPUSH
13643: CALL_OW 94
13647: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13648: LD_EXP 39
13652: NOT
13653: PUSH
13654: LD_EXP 40
13658: NOT
13659: AND
13660: IFFALSE 13672
13662: GO 13664
13664: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13665: LD_STRING RaiderDone
13667: PPUSH
13668: CALL_OW 337
13672: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13673: LD_INT 22
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 33
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL_OW 69
13701: PUSH
13702: LD_INT 3
13704: GREATEREQUAL
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 34
13718: PUSH
13719: LD_INT 31
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: PUSH
13735: LD_INT 2
13737: GREATEREQUAL
13738: AND
13739: IFFALSE 13751
13741: GO 13743
13743: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13744: LD_STRING RemoteControlDone
13746: PPUSH
13747: CALL_OW 337
13751: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13752: LD_EXP 16
13756: PUSH
13757: LD_INT 1
13759: LESS
13760: PUSH
13761: LD_EXP 41
13765: PPUSH
13766: LD_INT 52
13768: PUSH
13769: EMPTY
13770: LIST
13771: PUSH
13772: LD_INT 21
13774: PUSH
13775: LD_INT 1
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PPUSH
13786: CALL_OW 72
13790: NOT
13791: AND
13792: PUSH
13793: LD_OWVAR 1
13797: PUSH
13798: LD_INT 126000
13800: GREATEREQUAL
13801: OR
13802: IFFALSE 14994
13804: GO 13806
13806: DISABLE
13807: LD_INT 0
13809: PPUSH
13810: PPUSH
13811: PPUSH
13812: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13813: LD_STRING ReinforcementsDone
13815: PPUSH
13816: CALL_OW 337
// music_class := music_victory ;
13820: LD_ADDR_OWVAR 72
13824: PUSH
13825: LD_INT 4
13827: ST_TO_ADDR
// if tick <= 45 45$00 then
13828: LD_OWVAR 1
13832: PUSH
13833: LD_INT 94500
13835: LESSEQUAL
13836: IFFALSE 13845
// SetAchievement ( ACH_HSPEED_5 ) ;
13838: LD_STRING ACH_HSPEED_5
13840: PPUSH
13841: CALL_OW 543
// InGameOn ;
13845: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13849: LD_EXP 21
13853: PPUSH
13854: LD_STRING DH-end-1
13856: PPUSH
13857: CALL_OW 88
// wait ( 0 0$2 ) ;
13861: LD_INT 70
13863: PPUSH
13864: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13868: LD_EXP 29
13872: PPUSH
13873: LD_STRING DShar-end-2
13875: PPUSH
13876: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13880: LD_EXP 39
13884: NOT
13885: PUSH
13886: LD_EXP 40
13890: NOT
13891: AND
13892: IFFALSE 13908
// begin Say ( Heike , DH-end-3 ) ;
13894: LD_EXP 21
13898: PPUSH
13899: LD_STRING DH-end-3
13901: PPUSH
13902: CALL_OW 88
// end else
13906: GO 14012
// begin Say ( Heike , DH-end-a-3 ) ;
13908: LD_EXP 21
13912: PPUSH
13913: LD_STRING DH-end-a-3
13915: PPUSH
13916: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13920: LD_EXP 29
13924: PPUSH
13925: LD_STRING DShar-end-a-4
13927: PPUSH
13928: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13932: LD_EXP 21
13936: PPUSH
13937: LD_STRING DH-end-a-5
13939: PPUSH
13940: CALL_OW 88
// InGameOff ;
13944: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13948: LD_INT 35
13950: PPUSH
13951: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 ;
13955: LD_INT 22
13957: PUSH
13958: LD_INT 3
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 50
13967: PUSH
13968: EMPTY
13969: LIST
13970: PUSH
13971: LD_INT 21
13973: PUSH
13974: LD_INT 1
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: PUSH
13991: LD_INT 0
13993: EQUAL
13994: IFFALSE 13948
// InGameOn ;
13996: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
14000: LD_EXP 21
14004: PPUSH
14005: LD_STRING DH-end-a-6
14007: PPUSH
14008: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14012: LD_EXP 29
14016: PPUSH
14017: LD_STRING DShar-end-3
14019: PPUSH
14020: CALL_OW 94
// if not flamethrowerBuilt then
14024: LD_EXP 20
14028: NOT
14029: IFFALSE 14038
// SetAchievement ( ACH_FIRE ) ;
14031: LD_STRING ACH_FIRE
14033: PPUSH
14034: CALL_OW 543
// if drugsTested then
14038: LD_EXP 6
14042: IFFALSE 14056
// AddMedal ( med1 , 1 ) else
14044: LD_STRING med1
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 101
14054: GO 14096
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
14056: LD_INT 5
14058: PPUSH
14059: LD_INT 2
14061: PPUSH
14062: CALL_OW 321
14066: PUSH
14067: LD_INT 2
14069: EQUAL
14070: IFFALSE 14085
// AddMedal ( med1 , - 1 ) else
14072: LD_STRING med1
14074: PPUSH
14075: LD_INT 1
14077: NEG
14078: PPUSH
14079: CALL_OW 101
14083: GO 14096
// AddMedal ( med1 , - 2 ) ;
14085: LD_STRING med1
14087: PPUSH
14088: LD_INT 2
14090: NEG
14091: PPUSH
14092: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14096: LD_INT 22
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 33
14108: PUSH
14109: LD_INT 2
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 3
14127: GREATEREQUAL
14128: PUSH
14129: LD_INT 22
14131: PUSH
14132: LD_INT 2
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 34
14141: PUSH
14142: LD_INT 31
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PPUSH
14153: CALL_OW 69
14157: PUSH
14158: LD_INT 1
14160: GREATEREQUAL
14161: AND
14162: IFFALSE 14176
// AddMedal ( med2 , 1 ) else
14164: LD_STRING med2
14166: PPUSH
14167: LD_INT 1
14169: PPUSH
14170: CALL_OW 101
14174: GO 14187
// AddMedal ( med2 , - 1 ) ;
14176: LD_STRING med2
14178: PPUSH
14179: LD_INT 1
14181: NEG
14182: PPUSH
14183: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14187: LD_EXP 15
14191: PUSH
14192: LD_INT 10
14194: PUSH
14195: LD_INT 8
14197: PUSH
14198: LD_INT 6
14200: PUSH
14201: LD_INT 5
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: PUSH
14210: LD_OWVAR 67
14214: ARRAY
14215: LESS
14216: IFFALSE 14230
// AddMedal ( med3 , 1 ) else
14218: LD_STRING med3
14220: PPUSH
14221: LD_INT 1
14223: PPUSH
14224: CALL_OW 101
14228: GO 14241
// AddMedal ( med3 , - 1 ) ;
14230: LD_STRING med3
14232: PPUSH
14233: LD_INT 1
14235: NEG
14236: PPUSH
14237: CALL_OW 101
// GiveMedals ( MAIN ) ;
14241: LD_STRING MAIN
14243: PPUSH
14244: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14248: LD_INT 22
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 2
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 1
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: PPUSH
14288: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14292: LD_EXP 15
14296: PPUSH
14297: LD_STRING 05_ConvoySavedCounter
14299: PPUSH
14300: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14304: LD_EXP 13
14308: PPUSH
14309: LD_STRING 05_Radar
14311: PPUSH
14312: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14316: LD_EXP 6
14320: PPUSH
14321: LD_STRING 05_DrugsTested
14323: PPUSH
14324: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14328: LD_INT 22
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 33
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: PUSH
14357: LD_INT 3
14359: GREATEREQUAL
14360: PUSH
14361: LD_INT 22
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 34
14373: PUSH
14374: LD_INT 31
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PPUSH
14385: CALL_OW 69
14389: PUSH
14390: LD_INT 2
14392: GREATEREQUAL
14393: AND
14394: PPUSH
14395: LD_STRING 05_RemoteControl
14397: PPUSH
14398: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14402: LD_ADDR_VAR 0 2
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// if tmp then
14436: LD_VAR 0 2
14440: IFFALSE 14559
// begin vehs := [ ] ;
14442: LD_ADDR_VAR 0 4
14446: PUSH
14447: EMPTY
14448: ST_TO_ADDR
// for i in tmp do
14449: LD_ADDR_VAR 0 1
14453: PUSH
14454: LD_VAR 0 2
14458: PUSH
14459: FOR_IN
14460: IFFALSE 14545
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14462: LD_ADDR_VAR 0 4
14466: PUSH
14467: LD_VAR 0 4
14471: PPUSH
14472: LD_VAR 0 4
14476: PUSH
14477: LD_INT 1
14479: PLUS
14480: PPUSH
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 265
14490: PUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 262
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 263
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 264
14520: PUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 248
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PPUSH
14538: CALL_OW 1
14542: ST_TO_ADDR
14543: GO 14459
14545: POP
14546: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14547: LD_VAR 0 4
14551: PPUSH
14552: LD_STRING 05_Vehicles
14554: PPUSH
14555: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_INT 25
14566: PPUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 3
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 70
14581: ST_TO_ADDR
// tmp2 := [ ] ;
14582: LD_ADDR_VAR 0 3
14586: PUSH
14587: EMPTY
14588: ST_TO_ADDR
// if tmp then
14589: LD_VAR 0 2
14593: IFFALSE 14746
// begin for i in tmp do
14595: LD_ADDR_VAR 0 1
14599: PUSH
14600: LD_VAR 0 2
14604: PUSH
14605: FOR_IN
14606: IFFALSE 14732
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14608: LD_ADDR_VAR 0 3
14612: PUSH
14613: LD_VAR 0 3
14617: PPUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 266
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 250
14637: PUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 251
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 254
14657: PUSH
14658: LD_VAR 0 1
14662: PPUSH
14663: CALL_OW 248
14667: PUSH
14668: LD_VAR 0 1
14672: PPUSH
14673: CALL_OW 267
14677: PUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_INT 1
14685: PPUSH
14686: CALL_OW 268
14690: PUSH
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_INT 2
14698: PPUSH
14699: CALL_OW 268
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 269
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL 73449 0 2
14729: ST_TO_ADDR
14730: GO 14605
14732: POP
14733: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14734: LD_VAR 0 3
14738: PPUSH
14739: LD_STRING 05_Buildings
14741: PPUSH
14742: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14746: LD_EXP 21
14750: PPUSH
14751: LD_STRING 05_Heike
14753: PPUSH
14754: CALL_OW 38
// if Aviradze then
14758: LD_EXP 33
14762: IFFALSE 14776
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14764: LD_EXP 33
14768: PPUSH
14769: LD_STRING 05_Aviradze
14771: PPUSH
14772: CALL_OW 38
// if Ibrahim then
14776: LD_EXP 24
14780: IFFALSE 14794
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14782: LD_EXP 24
14786: PPUSH
14787: LD_STRING 05_Ibrahim
14789: PPUSH
14790: CALL_OW 38
// if Kamil then
14794: LD_EXP 25
14798: IFFALSE 14812
// SaveCharacters ( Kamil , 05_Kamil ) ;
14800: LD_EXP 25
14804: PPUSH
14805: LD_STRING 05_Kamil
14807: PPUSH
14808: CALL_OW 38
// if Sophia then
14812: LD_EXP 27
14816: IFFALSE 14830
// SaveCharacters ( Sophia , 05_Sophia ) ;
14818: LD_EXP 27
14822: PPUSH
14823: LD_STRING 05_Sophia
14825: PPUSH
14826: CALL_OW 38
// if Kaia then
14830: LD_EXP 26
14834: IFFALSE 14848
// SaveCharacters ( Kaia , 05_Kaia ) ;
14836: LD_EXP 26
14840: PPUSH
14841: LD_STRING 05_Kaia
14843: PPUSH
14844: CALL_OW 38
// if Givi then
14848: LD_EXP 22
14852: IFFALSE 14866
// SaveCharacters ( Givi , 05_Givi ) ;
14854: LD_EXP 22
14858: PPUSH
14859: LD_STRING 05_Givi
14861: PPUSH
14862: CALL_OW 38
// if Mike then
14866: LD_EXP 23
14870: IFFALSE 14884
// SaveCharacters ( Mike , 05_Mike ) ;
14872: LD_EXP 23
14876: PPUSH
14877: LD_STRING 05_Mike
14879: PPUSH
14880: CALL_OW 38
// if Markov then
14884: LD_EXP 28
14888: IFFALSE 14902
// SaveCharacters ( Markov , 05_Markov ) ;
14890: LD_EXP 28
14894: PPUSH
14895: LD_STRING 05_Markov
14897: PPUSH
14898: CALL_OW 38
// if Kurt then
14902: LD_EXP 32
14906: IFFALSE 14920
// SaveCharacters ( Kurt , 05_Kurt ) ;
14908: LD_EXP 32
14912: PPUSH
14913: LD_STRING 05_Kurt
14915: PPUSH
14916: CALL_OW 38
// if heikeSecondSquad then
14920: LD_EXP 34
14924: IFFALSE 14938
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14926: LD_EXP 34
14930: PPUSH
14931: LD_STRING 05_others
14933: PPUSH
14934: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14938: LD_ADDR_VAR 0 2
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 2
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 23
14955: PUSH
14956: LD_INT 0
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 69
14971: ST_TO_ADDR
// if tmp then
14972: LD_VAR 0 2
14976: IFFALSE 14990
// SaveCharacters ( tmp , 05_apes ) ;
14978: LD_VAR 0 2
14982: PPUSH
14983: LD_STRING 05_apes
14985: PPUSH
14986: CALL_OW 38
// YouWin ;
14990: CALL_OW 103
// end ; end_of_file
14994: PPOPN 4
14996: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14997: LD_EXP 9
15001: PUSH
15002: LD_INT 13
15004: PPUSH
15005: LD_INT 1
15007: PPUSH
15008: CALL_OW 287
15012: PUSH
15013: LD_INT 25
15015: LESS
15016: AND
15017: IFFALSE 15044
15019: GO 15021
15021: DISABLE
// begin enable ;
15022: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15023: LD_INT 1
15025: PPUSH
15026: LD_INT 5
15028: PPUSH
15029: CALL_OW 12
15033: PPUSH
15034: LD_INT 13
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 55
// end ; end_of_file
15044: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15045: LD_INT 0
15047: PPUSH
15048: PPUSH
15049: PPUSH
15050: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15051: LD_VAR 0 1
15055: PPUSH
15056: CALL_OW 264
15060: PUSH
15061: LD_INT 91
15063: EQUAL
15064: IFFALSE 15136
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15066: LD_INT 68
15068: PPUSH
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 255
15078: PPUSH
15079: CALL_OW 321
15083: PUSH
15084: LD_INT 2
15086: EQUAL
15087: IFFALSE 15099
// eff := 70 else
15089: LD_ADDR_VAR 0 4
15093: PUSH
15094: LD_INT 70
15096: ST_TO_ADDR
15097: GO 15107
// eff := 30 ;
15099: LD_ADDR_VAR 0 4
15103: PUSH
15104: LD_INT 30
15106: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15107: LD_VAR 0 1
15111: PPUSH
15112: CALL_OW 250
15116: PPUSH
15117: LD_VAR 0 1
15121: PPUSH
15122: CALL_OW 251
15126: PPUSH
15127: LD_VAR 0 4
15131: PPUSH
15132: CALL_OW 495
// end ; end ;
15136: LD_VAR 0 2
15140: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15141: LD_INT 0
15143: PPUSH
// end ;
15144: LD_VAR 0 4
15148: RET
// export function SOS_Command ( cmd ) ; begin
15149: LD_INT 0
15151: PPUSH
// end ;
15152: LD_VAR 0 2
15156: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15157: LD_INT 0
15159: PPUSH
// end ;
15160: LD_VAR 0 6
15164: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15165: LD_INT 0
15167: PPUSH
15168: PPUSH
// if not vehicle or not factory then
15169: LD_VAR 0 1
15173: NOT
15174: PUSH
15175: LD_VAR 0 2
15179: NOT
15180: OR
15181: IFFALSE 15185
// exit ;
15183: GO 15416
// if factoryWaypoints >= factory then
15185: LD_EXP 113
15189: PUSH
15190: LD_VAR 0 2
15194: GREATEREQUAL
15195: IFFALSE 15416
// if factoryWaypoints [ factory ] then
15197: LD_EXP 113
15201: PUSH
15202: LD_VAR 0 2
15206: ARRAY
15207: IFFALSE 15416
// begin if GetControl ( vehicle ) = control_manual then
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 263
15218: PUSH
15219: LD_INT 1
15221: EQUAL
15222: IFFALSE 15303
// begin driver := IsDrivenBy ( vehicle ) ;
15224: LD_ADDR_VAR 0 4
15228: PUSH
15229: LD_VAR 0 1
15233: PPUSH
15234: CALL_OW 311
15238: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15239: LD_VAR 0 4
15243: PPUSH
15244: LD_EXP 113
15248: PUSH
15249: LD_VAR 0 2
15253: ARRAY
15254: PUSH
15255: LD_INT 3
15257: ARRAY
15258: PPUSH
15259: LD_EXP 113
15263: PUSH
15264: LD_VAR 0 2
15268: ARRAY
15269: PUSH
15270: LD_INT 4
15272: ARRAY
15273: PPUSH
15274: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15278: LD_VAR 0 4
15282: PPUSH
15283: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
15287: LD_VAR 0 4
15291: PPUSH
15292: LD_VAR 0 2
15296: PPUSH
15297: CALL_OW 180
// end else
15301: GO 15416
// if GetControl ( vehicle ) = control_remote then
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 263
15312: PUSH
15313: LD_INT 2
15315: EQUAL
15316: IFFALSE 15377
// begin wait ( 0 0$2 ) ;
15318: LD_INT 70
15320: PPUSH
15321: CALL_OW 67
// if Connect ( vehicle ) then
15325: LD_VAR 0 1
15329: PPUSH
15330: CALL 44066 0 1
15334: IFFALSE 15375
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15336: LD_VAR 0 1
15340: PPUSH
15341: LD_EXP 113
15345: PUSH
15346: LD_VAR 0 2
15350: ARRAY
15351: PUSH
15352: LD_INT 3
15354: ARRAY
15355: PPUSH
15356: LD_EXP 113
15360: PUSH
15361: LD_VAR 0 2
15365: ARRAY
15366: PUSH
15367: LD_INT 4
15369: ARRAY
15370: PPUSH
15371: CALL_OW 171
// end else
15375: GO 15416
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15377: LD_VAR 0 1
15381: PPUSH
15382: LD_EXP 113
15386: PUSH
15387: LD_VAR 0 2
15391: ARRAY
15392: PUSH
15393: LD_INT 3
15395: ARRAY
15396: PPUSH
15397: LD_EXP 113
15401: PUSH
15402: LD_VAR 0 2
15406: ARRAY
15407: PUSH
15408: LD_INT 4
15410: ARRAY
15411: PPUSH
15412: CALL_OW 171
// end ; end ;
15416: LD_VAR 0 3
15420: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15421: LD_INT 0
15423: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15424: LD_VAR 0 1
15428: PUSH
15429: LD_INT 250
15431: EQUAL
15432: PUSH
15433: LD_VAR 0 2
15437: PPUSH
15438: CALL_OW 264
15442: PUSH
15443: LD_INT 81
15445: EQUAL
15446: AND
15447: IFFALSE 15468
// MinerPlaceMine ( unit , x , y ) ;
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_VAR 0 4
15458: PPUSH
15459: LD_VAR 0 5
15463: PPUSH
15464: CALL 18458 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15468: LD_VAR 0 1
15472: PUSH
15473: LD_INT 251
15475: EQUAL
15476: PUSH
15477: LD_VAR 0 2
15481: PPUSH
15482: CALL_OW 264
15486: PUSH
15487: LD_INT 81
15489: EQUAL
15490: AND
15491: IFFALSE 15512
// MinerDetonateMine ( unit , x , y ) ;
15493: LD_VAR 0 2
15497: PPUSH
15498: LD_VAR 0 4
15502: PPUSH
15503: LD_VAR 0 5
15507: PPUSH
15508: CALL 18733 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15512: LD_VAR 0 1
15516: PUSH
15517: LD_INT 252
15519: EQUAL
15520: PUSH
15521: LD_VAR 0 2
15525: PPUSH
15526: CALL_OW 264
15530: PUSH
15531: LD_INT 81
15533: EQUAL
15534: AND
15535: IFFALSE 15556
// MinerCreateMinefield ( unit , x , y ) ;
15537: LD_VAR 0 2
15541: PPUSH
15542: LD_VAR 0 4
15546: PPUSH
15547: LD_VAR 0 5
15551: PPUSH
15552: CALL 19150 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15556: LD_VAR 0 1
15560: PUSH
15561: LD_INT 253
15563: EQUAL
15564: PUSH
15565: LD_VAR 0 2
15569: PPUSH
15570: CALL_OW 257
15574: PUSH
15575: LD_INT 5
15577: EQUAL
15578: AND
15579: IFFALSE 15600
// ComBinocular ( unit , x , y ) ;
15581: LD_VAR 0 2
15585: PPUSH
15586: LD_VAR 0 4
15590: PPUSH
15591: LD_VAR 0 5
15595: PPUSH
15596: CALL 19519 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15600: LD_VAR 0 1
15604: PUSH
15605: LD_INT 254
15607: EQUAL
15608: PUSH
15609: LD_VAR 0 2
15613: PPUSH
15614: CALL_OW 264
15618: PUSH
15619: LD_INT 99
15621: EQUAL
15622: AND
15623: PUSH
15624: LD_VAR 0 3
15628: PPUSH
15629: CALL_OW 263
15633: PUSH
15634: LD_INT 3
15636: EQUAL
15637: AND
15638: IFFALSE 15654
// HackDestroyVehicle ( unit , selectedUnit ) ;
15640: LD_VAR 0 2
15644: PPUSH
15645: LD_VAR 0 3
15649: PPUSH
15650: CALL 17822 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15654: LD_VAR 0 1
15658: PUSH
15659: LD_INT 255
15661: EQUAL
15662: PUSH
15663: LD_VAR 0 2
15667: PPUSH
15668: CALL_OW 264
15672: PUSH
15673: LD_INT 14
15675: PUSH
15676: LD_INT 53
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: IN
15683: AND
15684: PUSH
15685: LD_VAR 0 4
15689: PPUSH
15690: LD_VAR 0 5
15694: PPUSH
15695: CALL_OW 488
15699: AND
15700: IFFALSE 15724
// CutTreeXYR ( unit , x , y , 12 ) ;
15702: LD_VAR 0 2
15706: PPUSH
15707: LD_VAR 0 4
15711: PPUSH
15712: LD_VAR 0 5
15716: PPUSH
15717: LD_INT 12
15719: PPUSH
15720: CALL 15819 0 4
// if cmd = 256 then
15724: LD_VAR 0 1
15728: PUSH
15729: LD_INT 256
15731: EQUAL
15732: IFFALSE 15753
// SetFactoryWaypoint ( unit , x , y ) ;
15734: LD_VAR 0 2
15738: PPUSH
15739: LD_VAR 0 4
15743: PPUSH
15744: LD_VAR 0 5
15748: PPUSH
15749: CALL 34447 0 3
// if cmd = 257 then
15753: LD_VAR 0 1
15757: PUSH
15758: LD_INT 257
15760: EQUAL
15761: IFFALSE 15782
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15763: LD_VAR 0 2
15767: PPUSH
15768: LD_VAR 0 4
15772: PPUSH
15773: LD_VAR 0 5
15777: PPUSH
15778: CALL 34809 0 3
// if cmd = 258 then
15782: LD_VAR 0 1
15786: PUSH
15787: LD_INT 258
15789: EQUAL
15790: IFFALSE 15814
// BurnTreeXYR ( unit , x , y , 8 ) ;
15792: LD_VAR 0 2
15796: PPUSH
15797: LD_VAR 0 4
15801: PPUSH
15802: LD_VAR 0 5
15806: PPUSH
15807: LD_INT 8
15809: PPUSH
15810: CALL 16213 0 4
// end ;
15814: LD_VAR 0 6
15818: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15819: LD_INT 0
15821: PPUSH
15822: PPUSH
15823: PPUSH
15824: PPUSH
15825: PPUSH
15826: PPUSH
15827: PPUSH
15828: PPUSH
15829: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 302
15839: NOT
15840: PUSH
15841: LD_VAR 0 2
15845: PPUSH
15846: LD_VAR 0 3
15850: PPUSH
15851: CALL_OW 488
15855: NOT
15856: OR
15857: PUSH
15858: LD_VAR 0 4
15862: NOT
15863: OR
15864: IFFALSE 15868
// exit ;
15866: GO 16208
// list := [ ] ;
15868: LD_ADDR_VAR 0 13
15872: PUSH
15873: EMPTY
15874: ST_TO_ADDR
// if x - r < 0 then
15875: LD_VAR 0 2
15879: PUSH
15880: LD_VAR 0 4
15884: MINUS
15885: PUSH
15886: LD_INT 0
15888: LESS
15889: IFFALSE 15901
// min_x := 0 else
15891: LD_ADDR_VAR 0 7
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
15899: GO 15917
// min_x := x - r ;
15901: LD_ADDR_VAR 0 7
15905: PUSH
15906: LD_VAR 0 2
15910: PUSH
15911: LD_VAR 0 4
15915: MINUS
15916: ST_TO_ADDR
// if y - r < 0 then
15917: LD_VAR 0 3
15921: PUSH
15922: LD_VAR 0 4
15926: MINUS
15927: PUSH
15928: LD_INT 0
15930: LESS
15931: IFFALSE 15943
// min_y := 0 else
15933: LD_ADDR_VAR 0 8
15937: PUSH
15938: LD_INT 0
15940: ST_TO_ADDR
15941: GO 15959
// min_y := y - r ;
15943: LD_ADDR_VAR 0 8
15947: PUSH
15948: LD_VAR 0 3
15952: PUSH
15953: LD_VAR 0 4
15957: MINUS
15958: ST_TO_ADDR
// max_x := x + r ;
15959: LD_ADDR_VAR 0 9
15963: PUSH
15964: LD_VAR 0 2
15968: PUSH
15969: LD_VAR 0 4
15973: PLUS
15974: ST_TO_ADDR
// max_y := y + r ;
15975: LD_ADDR_VAR 0 10
15979: PUSH
15980: LD_VAR 0 3
15984: PUSH
15985: LD_VAR 0 4
15989: PLUS
15990: ST_TO_ADDR
// for _x = min_x to max_x do
15991: LD_ADDR_VAR 0 11
15995: PUSH
15996: DOUBLE
15997: LD_VAR 0 7
16001: DEC
16002: ST_TO_ADDR
16003: LD_VAR 0 9
16007: PUSH
16008: FOR_TO
16009: IFFALSE 16126
// for _y = min_y to max_y do
16011: LD_ADDR_VAR 0 12
16015: PUSH
16016: DOUBLE
16017: LD_VAR 0 8
16021: DEC
16022: ST_TO_ADDR
16023: LD_VAR 0 10
16027: PUSH
16028: FOR_TO
16029: IFFALSE 16122
// begin if not ValidHex ( _x , _y ) then
16031: LD_VAR 0 11
16035: PPUSH
16036: LD_VAR 0 12
16040: PPUSH
16041: CALL_OW 488
16045: NOT
16046: IFFALSE 16050
// continue ;
16048: GO 16028
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16050: LD_VAR 0 11
16054: PPUSH
16055: LD_VAR 0 12
16059: PPUSH
16060: CALL_OW 351
16064: PUSH
16065: LD_VAR 0 11
16069: PPUSH
16070: LD_VAR 0 12
16074: PPUSH
16075: CALL_OW 554
16079: AND
16080: IFFALSE 16120
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16082: LD_ADDR_VAR 0 13
16086: PUSH
16087: LD_VAR 0 13
16091: PPUSH
16092: LD_VAR 0 13
16096: PUSH
16097: LD_INT 1
16099: PLUS
16100: PPUSH
16101: LD_VAR 0 11
16105: PUSH
16106: LD_VAR 0 12
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PPUSH
16115: CALL_OW 2
16119: ST_TO_ADDR
// end ;
16120: GO 16028
16122: POP
16123: POP
16124: GO 16008
16126: POP
16127: POP
// if not list then
16128: LD_VAR 0 13
16132: NOT
16133: IFFALSE 16137
// exit ;
16135: GO 16208
// for i in list do
16137: LD_ADDR_VAR 0 6
16141: PUSH
16142: LD_VAR 0 13
16146: PUSH
16147: FOR_IN
16148: IFFALSE 16206
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16150: LD_VAR 0 1
16154: PPUSH
16155: LD_STRING M
16157: PUSH
16158: LD_VAR 0 6
16162: PUSH
16163: LD_INT 1
16165: ARRAY
16166: PUSH
16167: LD_VAR 0 6
16171: PUSH
16172: LD_INT 2
16174: ARRAY
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: LD_INT 0
16181: PUSH
16182: LD_INT 0
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: PPUSH
16200: CALL_OW 447
16204: GO 16147
16206: POP
16207: POP
// end ;
16208: LD_VAR 0 5
16212: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
16213: LD_INT 0
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
16223: PPUSH
16224: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 302
16234: NOT
16235: PUSH
16236: LD_VAR 0 2
16240: PPUSH
16241: LD_VAR 0 3
16245: PPUSH
16246: CALL_OW 488
16250: NOT
16251: OR
16252: PUSH
16253: LD_VAR 0 4
16257: NOT
16258: OR
16259: IFFALSE 16263
// exit ;
16261: GO 16776
// list := [ ] ;
16263: LD_ADDR_VAR 0 13
16267: PUSH
16268: EMPTY
16269: ST_TO_ADDR
// if x - r < 0 then
16270: LD_VAR 0 2
16274: PUSH
16275: LD_VAR 0 4
16279: MINUS
16280: PUSH
16281: LD_INT 0
16283: LESS
16284: IFFALSE 16296
// min_x := 0 else
16286: LD_ADDR_VAR 0 7
16290: PUSH
16291: LD_INT 0
16293: ST_TO_ADDR
16294: GO 16312
// min_x := x - r ;
16296: LD_ADDR_VAR 0 7
16300: PUSH
16301: LD_VAR 0 2
16305: PUSH
16306: LD_VAR 0 4
16310: MINUS
16311: ST_TO_ADDR
// if y - r < 0 then
16312: LD_VAR 0 3
16316: PUSH
16317: LD_VAR 0 4
16321: MINUS
16322: PUSH
16323: LD_INT 0
16325: LESS
16326: IFFALSE 16338
// min_y := 0 else
16328: LD_ADDR_VAR 0 8
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
16336: GO 16354
// min_y := y - r ;
16338: LD_ADDR_VAR 0 8
16342: PUSH
16343: LD_VAR 0 3
16347: PUSH
16348: LD_VAR 0 4
16352: MINUS
16353: ST_TO_ADDR
// max_x := x + r ;
16354: LD_ADDR_VAR 0 9
16358: PUSH
16359: LD_VAR 0 2
16363: PUSH
16364: LD_VAR 0 4
16368: PLUS
16369: ST_TO_ADDR
// max_y := y + r ;
16370: LD_ADDR_VAR 0 10
16374: PUSH
16375: LD_VAR 0 3
16379: PUSH
16380: LD_VAR 0 4
16384: PLUS
16385: ST_TO_ADDR
// for _x = min_x to max_x do
16386: LD_ADDR_VAR 0 11
16390: PUSH
16391: DOUBLE
16392: LD_VAR 0 7
16396: DEC
16397: ST_TO_ADDR
16398: LD_VAR 0 9
16402: PUSH
16403: FOR_TO
16404: IFFALSE 16521
// for _y = min_y to max_y do
16406: LD_ADDR_VAR 0 12
16410: PUSH
16411: DOUBLE
16412: LD_VAR 0 8
16416: DEC
16417: ST_TO_ADDR
16418: LD_VAR 0 10
16422: PUSH
16423: FOR_TO
16424: IFFALSE 16517
// begin if not ValidHex ( _x , _y ) then
16426: LD_VAR 0 11
16430: PPUSH
16431: LD_VAR 0 12
16435: PPUSH
16436: CALL_OW 488
16440: NOT
16441: IFFALSE 16445
// continue ;
16443: GO 16423
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16445: LD_VAR 0 11
16449: PPUSH
16450: LD_VAR 0 12
16454: PPUSH
16455: CALL_OW 351
16459: PUSH
16460: LD_VAR 0 11
16464: PPUSH
16465: LD_VAR 0 12
16469: PPUSH
16470: CALL_OW 554
16474: AND
16475: IFFALSE 16515
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16477: LD_ADDR_VAR 0 13
16481: PUSH
16482: LD_VAR 0 13
16486: PPUSH
16487: LD_VAR 0 13
16491: PUSH
16492: LD_INT 1
16494: PLUS
16495: PPUSH
16496: LD_VAR 0 11
16500: PUSH
16501: LD_VAR 0 12
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PPUSH
16510: CALL_OW 2
16514: ST_TO_ADDR
// end ;
16515: GO 16423
16517: POP
16518: POP
16519: GO 16403
16521: POP
16522: POP
// if not list then
16523: LD_VAR 0 13
16527: NOT
16528: IFFALSE 16532
// exit ;
16530: GO 16776
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
16532: LD_ADDR_VAR 0 13
16536: PUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: LD_VAR 0 13
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: LD_INT 1
16552: PPUSH
16553: CALL 41208 0 4
16557: ST_TO_ADDR
// ComStop ( flame ) ;
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 141
// for i in list do
16567: LD_ADDR_VAR 0 6
16571: PUSH
16572: LD_VAR 0 13
16576: PUSH
16577: FOR_IN
16578: IFFALSE 16609
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
16580: LD_VAR 0 1
16584: PPUSH
16585: LD_VAR 0 6
16589: PUSH
16590: LD_INT 1
16592: ARRAY
16593: PPUSH
16594: LD_VAR 0 6
16598: PUSH
16599: LD_INT 2
16601: ARRAY
16602: PPUSH
16603: CALL_OW 176
16607: GO 16577
16609: POP
16610: POP
// repeat wait ( 0 0$1 ) ;
16611: LD_INT 35
16613: PPUSH
16614: CALL_OW 67
// task := GetTaskList ( flame ) ;
16618: LD_ADDR_VAR 0 14
16622: PUSH
16623: LD_VAR 0 1
16627: PPUSH
16628: CALL_OW 437
16632: ST_TO_ADDR
// if not task then
16633: LD_VAR 0 14
16637: NOT
16638: IFFALSE 16642
// exit ;
16640: GO 16776
// if task [ 1 ] [ 1 ] <> | then
16642: LD_VAR 0 14
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PUSH
16651: LD_INT 1
16653: ARRAY
16654: PUSH
16655: LD_STRING |
16657: NONEQUAL
16658: IFFALSE 16662
// exit ;
16660: GO 16776
// _x := task [ 1 ] [ 2 ] ;
16662: LD_ADDR_VAR 0 11
16666: PUSH
16667: LD_VAR 0 14
16671: PUSH
16672: LD_INT 1
16674: ARRAY
16675: PUSH
16676: LD_INT 2
16678: ARRAY
16679: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
16680: LD_ADDR_VAR 0 12
16684: PUSH
16685: LD_VAR 0 14
16689: PUSH
16690: LD_INT 1
16692: ARRAY
16693: PUSH
16694: LD_INT 3
16696: ARRAY
16697: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
16698: LD_VAR 0 11
16702: PPUSH
16703: LD_VAR 0 12
16707: PPUSH
16708: CALL_OW 351
16712: NOT
16713: PUSH
16714: LD_VAR 0 11
16718: PPUSH
16719: LD_VAR 0 12
16723: PPUSH
16724: CALL_OW 554
16728: NOT
16729: OR
16730: IFFALSE 16764
// begin task := Delete ( task , 1 ) ;
16732: LD_ADDR_VAR 0 14
16736: PUSH
16737: LD_VAR 0 14
16741: PPUSH
16742: LD_INT 1
16744: PPUSH
16745: CALL_OW 3
16749: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
16750: LD_VAR 0 1
16754: PPUSH
16755: LD_VAR 0 14
16759: PPUSH
16760: CALL_OW 446
// end ; until not HasTask ( flame ) ;
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 314
16773: NOT
16774: IFFALSE 16611
// end ;
16776: LD_VAR 0 5
16780: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16781: LD_EXP 44
16785: NOT
16786: IFFALSE 16836
16788: GO 16790
16790: DISABLE
// begin initHack := true ;
16791: LD_ADDR_EXP 44
16795: PUSH
16796: LD_INT 1
16798: ST_TO_ADDR
// hackTanks := [ ] ;
16799: LD_ADDR_EXP 45
16803: PUSH
16804: EMPTY
16805: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16806: LD_ADDR_EXP 46
16810: PUSH
16811: EMPTY
16812: ST_TO_ADDR
// hackLimit := 3 ;
16813: LD_ADDR_EXP 47
16817: PUSH
16818: LD_INT 3
16820: ST_TO_ADDR
// hackDist := 12 ;
16821: LD_ADDR_EXP 48
16825: PUSH
16826: LD_INT 12
16828: ST_TO_ADDR
// hackCounter := [ ] ;
16829: LD_ADDR_EXP 49
16833: PUSH
16834: EMPTY
16835: ST_TO_ADDR
// end ;
16836: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16837: LD_EXP 44
16841: PUSH
16842: LD_INT 34
16844: PUSH
16845: LD_INT 99
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 69
16856: AND
16857: IFFALSE 17110
16859: GO 16861
16861: DISABLE
16862: LD_INT 0
16864: PPUSH
16865: PPUSH
// begin enable ;
16866: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16867: LD_ADDR_VAR 0 1
16871: PUSH
16872: LD_INT 34
16874: PUSH
16875: LD_INT 99
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PPUSH
16882: CALL_OW 69
16886: PUSH
16887: FOR_IN
16888: IFFALSE 17108
// begin if not i in hackTanks then
16890: LD_VAR 0 1
16894: PUSH
16895: LD_EXP 45
16899: IN
16900: NOT
16901: IFFALSE 16984
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16903: LD_ADDR_EXP 45
16907: PUSH
16908: LD_EXP 45
16912: PPUSH
16913: LD_EXP 45
16917: PUSH
16918: LD_INT 1
16920: PLUS
16921: PPUSH
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 1
16931: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16932: LD_ADDR_EXP 46
16936: PUSH
16937: LD_EXP 46
16941: PPUSH
16942: LD_EXP 46
16946: PUSH
16947: LD_INT 1
16949: PLUS
16950: PPUSH
16951: EMPTY
16952: PPUSH
16953: CALL_OW 1
16957: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16958: LD_ADDR_EXP 49
16962: PUSH
16963: LD_EXP 49
16967: PPUSH
16968: LD_EXP 49
16972: PUSH
16973: LD_INT 1
16975: PLUS
16976: PPUSH
16977: EMPTY
16978: PPUSH
16979: CALL_OW 1
16983: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16984: LD_VAR 0 1
16988: PPUSH
16989: CALL_OW 302
16993: NOT
16994: IFFALSE 17007
// begin HackUnlinkAll ( i ) ;
16996: LD_VAR 0 1
17000: PPUSH
17001: CALL 17113 0 1
// continue ;
17005: GO 16887
// end ; HackCheckCapturedStatus ( i ) ;
17007: LD_VAR 0 1
17011: PPUSH
17012: CALL 17556 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17016: LD_ADDR_VAR 0 2
17020: PUSH
17021: LD_INT 81
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 255
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 33
17040: PUSH
17041: LD_INT 3
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 91
17050: PUSH
17051: LD_VAR 0 1
17055: PUSH
17056: LD_EXP 48
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 50
17068: PUSH
17069: EMPTY
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: PPUSH
17078: CALL_OW 69
17082: ST_TO_ADDR
// if not tmp then
17083: LD_VAR 0 2
17087: NOT
17088: IFFALSE 17092
// continue ;
17090: GO 16887
// HackLink ( i , tmp ) ;
17092: LD_VAR 0 1
17096: PPUSH
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL 17249 0 2
// end ;
17106: GO 16887
17108: POP
17109: POP
// end ;
17110: PPOPN 2
17112: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17113: LD_INT 0
17115: PPUSH
17116: PPUSH
17117: PPUSH
// if not hack in hackTanks then
17118: LD_VAR 0 1
17122: PUSH
17123: LD_EXP 45
17127: IN
17128: NOT
17129: IFFALSE 17133
// exit ;
17131: GO 17244
// index := GetElementIndex ( hackTanks , hack ) ;
17133: LD_ADDR_VAR 0 4
17137: PUSH
17138: LD_EXP 45
17142: PPUSH
17143: LD_VAR 0 1
17147: PPUSH
17148: CALL 40505 0 2
17152: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17153: LD_EXP 46
17157: PUSH
17158: LD_VAR 0 4
17162: ARRAY
17163: IFFALSE 17244
// begin for i in hackTanksCaptured [ index ] do
17165: LD_ADDR_VAR 0 3
17169: PUSH
17170: LD_EXP 46
17174: PUSH
17175: LD_VAR 0 4
17179: ARRAY
17180: PUSH
17181: FOR_IN
17182: IFFALSE 17208
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17184: LD_VAR 0 3
17188: PUSH
17189: LD_INT 1
17191: ARRAY
17192: PPUSH
17193: LD_VAR 0 3
17197: PUSH
17198: LD_INT 2
17200: ARRAY
17201: PPUSH
17202: CALL_OW 235
17206: GO 17181
17208: POP
17209: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17210: LD_ADDR_EXP 46
17214: PUSH
17215: LD_EXP 46
17219: PPUSH
17220: LD_VAR 0 4
17224: PPUSH
17225: EMPTY
17226: PPUSH
17227: CALL_OW 1
17231: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17232: LD_VAR 0 1
17236: PPUSH
17237: LD_INT 0
17239: PPUSH
17240: CALL_OW 505
// end ; end ;
17244: LD_VAR 0 2
17248: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17249: LD_INT 0
17251: PPUSH
17252: PPUSH
17253: PPUSH
// if not hack in hackTanks or not vehicles then
17254: LD_VAR 0 1
17258: PUSH
17259: LD_EXP 45
17263: IN
17264: NOT
17265: PUSH
17266: LD_VAR 0 2
17270: NOT
17271: OR
17272: IFFALSE 17276
// exit ;
17274: GO 17551
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17276: LD_ADDR_VAR 0 2
17280: PUSH
17281: LD_VAR 0 1
17285: PPUSH
17286: LD_VAR 0 2
17290: PPUSH
17291: LD_INT 1
17293: PPUSH
17294: LD_INT 1
17296: PPUSH
17297: CALL 41155 0 4
17301: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17302: LD_ADDR_VAR 0 5
17306: PUSH
17307: LD_EXP 45
17311: PPUSH
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL 40505 0 2
17321: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17322: LD_EXP 46
17326: PUSH
17327: LD_VAR 0 5
17331: ARRAY
17332: PUSH
17333: LD_EXP 47
17337: LESS
17338: IFFALSE 17527
// begin for i := 1 to vehicles do
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: DOUBLE
17346: LD_INT 1
17348: DEC
17349: ST_TO_ADDR
17350: LD_VAR 0 2
17354: PUSH
17355: FOR_TO
17356: IFFALSE 17525
// begin if hackTanksCaptured [ index ] = hackLimit then
17358: LD_EXP 46
17362: PUSH
17363: LD_VAR 0 5
17367: ARRAY
17368: PUSH
17369: LD_EXP 47
17373: EQUAL
17374: IFFALSE 17378
// break ;
17376: GO 17525
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17378: LD_ADDR_EXP 49
17382: PUSH
17383: LD_EXP 49
17387: PPUSH
17388: LD_VAR 0 5
17392: PPUSH
17393: LD_EXP 49
17397: PUSH
17398: LD_VAR 0 5
17402: ARRAY
17403: PUSH
17404: LD_INT 1
17406: PLUS
17407: PPUSH
17408: CALL_OW 1
17412: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17413: LD_ADDR_EXP 46
17417: PUSH
17418: LD_EXP 46
17422: PPUSH
17423: LD_VAR 0 5
17427: PUSH
17428: LD_EXP 46
17432: PUSH
17433: LD_VAR 0 5
17437: ARRAY
17438: PUSH
17439: LD_INT 1
17441: PLUS
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PPUSH
17447: LD_VAR 0 2
17451: PUSH
17452: LD_VAR 0 4
17456: ARRAY
17457: PUSH
17458: LD_VAR 0 2
17462: PUSH
17463: LD_VAR 0 4
17467: ARRAY
17468: PPUSH
17469: CALL_OW 255
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PPUSH
17478: CALL 40720 0 3
17482: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17483: LD_VAR 0 2
17487: PUSH
17488: LD_VAR 0 4
17492: ARRAY
17493: PPUSH
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 255
17503: PPUSH
17504: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17508: LD_VAR 0 2
17512: PUSH
17513: LD_VAR 0 4
17517: ARRAY
17518: PPUSH
17519: CALL_OW 141
// end ;
17523: GO 17355
17525: POP
17526: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17527: LD_VAR 0 1
17531: PPUSH
17532: LD_EXP 46
17536: PUSH
17537: LD_VAR 0 5
17541: ARRAY
17542: PUSH
17543: LD_INT 0
17545: PLUS
17546: PPUSH
17547: CALL_OW 505
// end ;
17551: LD_VAR 0 3
17555: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17556: LD_INT 0
17558: PPUSH
17559: PPUSH
17560: PPUSH
17561: PPUSH
// if not hack in hackTanks then
17562: LD_VAR 0 1
17566: PUSH
17567: LD_EXP 45
17571: IN
17572: NOT
17573: IFFALSE 17577
// exit ;
17575: GO 17817
// index := GetElementIndex ( hackTanks , hack ) ;
17577: LD_ADDR_VAR 0 4
17581: PUSH
17582: LD_EXP 45
17586: PPUSH
17587: LD_VAR 0 1
17591: PPUSH
17592: CALL 40505 0 2
17596: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17597: LD_ADDR_VAR 0 3
17601: PUSH
17602: DOUBLE
17603: LD_EXP 46
17607: PUSH
17608: LD_VAR 0 4
17612: ARRAY
17613: INC
17614: ST_TO_ADDR
17615: LD_INT 1
17617: PUSH
17618: FOR_DOWNTO
17619: IFFALSE 17791
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17621: LD_ADDR_VAR 0 5
17625: PUSH
17626: LD_EXP 46
17630: PUSH
17631: LD_VAR 0 4
17635: ARRAY
17636: PUSH
17637: LD_VAR 0 3
17641: ARRAY
17642: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17643: LD_VAR 0 5
17647: PUSH
17648: LD_INT 1
17650: ARRAY
17651: PPUSH
17652: CALL_OW 302
17656: NOT
17657: PUSH
17658: LD_VAR 0 5
17662: PUSH
17663: LD_INT 1
17665: ARRAY
17666: PPUSH
17667: CALL_OW 255
17671: PUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 255
17681: NONEQUAL
17682: OR
17683: IFFALSE 17789
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17685: LD_VAR 0 5
17689: PUSH
17690: LD_INT 1
17692: ARRAY
17693: PPUSH
17694: CALL_OW 305
17698: PUSH
17699: LD_VAR 0 5
17703: PUSH
17704: LD_INT 1
17706: ARRAY
17707: PPUSH
17708: CALL_OW 255
17712: PUSH
17713: LD_VAR 0 1
17717: PPUSH
17718: CALL_OW 255
17722: EQUAL
17723: AND
17724: IFFALSE 17748
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17726: LD_VAR 0 5
17730: PUSH
17731: LD_INT 1
17733: ARRAY
17734: PPUSH
17735: LD_VAR 0 5
17739: PUSH
17740: LD_INT 2
17742: ARRAY
17743: PPUSH
17744: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17748: LD_ADDR_EXP 46
17752: PUSH
17753: LD_EXP 46
17757: PPUSH
17758: LD_VAR 0 4
17762: PPUSH
17763: LD_EXP 46
17767: PUSH
17768: LD_VAR 0 4
17772: ARRAY
17773: PPUSH
17774: LD_VAR 0 3
17778: PPUSH
17779: CALL_OW 3
17783: PPUSH
17784: CALL_OW 1
17788: ST_TO_ADDR
// end ; end ;
17789: GO 17618
17791: POP
17792: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17793: LD_VAR 0 1
17797: PPUSH
17798: LD_EXP 46
17802: PUSH
17803: LD_VAR 0 4
17807: ARRAY
17808: PUSH
17809: LD_INT 0
17811: PLUS
17812: PPUSH
17813: CALL_OW 505
// end ;
17817: LD_VAR 0 2
17821: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17822: LD_INT 0
17824: PPUSH
17825: PPUSH
17826: PPUSH
17827: PPUSH
// if not hack in hackTanks then
17828: LD_VAR 0 1
17832: PUSH
17833: LD_EXP 45
17837: IN
17838: NOT
17839: IFFALSE 17843
// exit ;
17841: GO 17928
// index := GetElementIndex ( hackTanks , hack ) ;
17843: LD_ADDR_VAR 0 5
17847: PUSH
17848: LD_EXP 45
17852: PPUSH
17853: LD_VAR 0 1
17857: PPUSH
17858: CALL 40505 0 2
17862: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17863: LD_ADDR_VAR 0 4
17867: PUSH
17868: DOUBLE
17869: LD_INT 1
17871: DEC
17872: ST_TO_ADDR
17873: LD_EXP 46
17877: PUSH
17878: LD_VAR 0 5
17882: ARRAY
17883: PUSH
17884: FOR_TO
17885: IFFALSE 17926
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17887: LD_EXP 46
17891: PUSH
17892: LD_VAR 0 5
17896: ARRAY
17897: PUSH
17898: LD_VAR 0 4
17902: ARRAY
17903: PUSH
17904: LD_INT 1
17906: ARRAY
17907: PUSH
17908: LD_VAR 0 2
17912: EQUAL
17913: IFFALSE 17924
// KillUnit ( vehicle ) ;
17915: LD_VAR 0 2
17919: PPUSH
17920: CALL_OW 66
17924: GO 17884
17926: POP
17927: POP
// end ;
17928: LD_VAR 0 3
17932: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17933: LD_EXP 50
17937: NOT
17938: IFFALSE 17973
17940: GO 17942
17942: DISABLE
// begin initMiner := true ;
17943: LD_ADDR_EXP 50
17947: PUSH
17948: LD_INT 1
17950: ST_TO_ADDR
// minersList := [ ] ;
17951: LD_ADDR_EXP 51
17955: PUSH
17956: EMPTY
17957: ST_TO_ADDR
// minerMinesList := [ ] ;
17958: LD_ADDR_EXP 52
17962: PUSH
17963: EMPTY
17964: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17965: LD_ADDR_EXP 53
17969: PUSH
17970: LD_INT 5
17972: ST_TO_ADDR
// end ;
17973: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17974: LD_EXP 50
17978: PUSH
17979: LD_INT 34
17981: PUSH
17982: LD_INT 81
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PPUSH
17989: CALL_OW 69
17993: AND
17994: IFFALSE 18455
17996: GO 17998
17998: DISABLE
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
18003: PPUSH
18004: PPUSH
// begin enable ;
18005: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18006: LD_ADDR_VAR 0 1
18010: PUSH
18011: LD_INT 34
18013: PUSH
18014: LD_INT 81
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 69
18025: PUSH
18026: FOR_IN
18027: IFFALSE 18099
// begin if not i in minersList then
18029: LD_VAR 0 1
18033: PUSH
18034: LD_EXP 51
18038: IN
18039: NOT
18040: IFFALSE 18097
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18042: LD_ADDR_EXP 51
18046: PUSH
18047: LD_EXP 51
18051: PPUSH
18052: LD_EXP 51
18056: PUSH
18057: LD_INT 1
18059: PLUS
18060: PPUSH
18061: LD_VAR 0 1
18065: PPUSH
18066: CALL_OW 1
18070: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18071: LD_ADDR_EXP 52
18075: PUSH
18076: LD_EXP 52
18080: PPUSH
18081: LD_EXP 52
18085: PUSH
18086: LD_INT 1
18088: PLUS
18089: PPUSH
18090: EMPTY
18091: PPUSH
18092: CALL_OW 1
18096: ST_TO_ADDR
// end end ;
18097: GO 18026
18099: POP
18100: POP
// for i := minerMinesList downto 1 do
18101: LD_ADDR_VAR 0 1
18105: PUSH
18106: DOUBLE
18107: LD_EXP 52
18111: INC
18112: ST_TO_ADDR
18113: LD_INT 1
18115: PUSH
18116: FOR_DOWNTO
18117: IFFALSE 18453
// begin if IsLive ( minersList [ i ] ) then
18119: LD_EXP 51
18123: PUSH
18124: LD_VAR 0 1
18128: ARRAY
18129: PPUSH
18130: CALL_OW 300
18134: IFFALSE 18162
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18136: LD_EXP 51
18140: PUSH
18141: LD_VAR 0 1
18145: ARRAY
18146: PPUSH
18147: LD_EXP 52
18151: PUSH
18152: LD_VAR 0 1
18156: ARRAY
18157: PPUSH
18158: CALL_OW 505
// if not minerMinesList [ i ] then
18162: LD_EXP 52
18166: PUSH
18167: LD_VAR 0 1
18171: ARRAY
18172: NOT
18173: IFFALSE 18177
// continue ;
18175: GO 18116
// for j := minerMinesList [ i ] downto 1 do
18177: LD_ADDR_VAR 0 2
18181: PUSH
18182: DOUBLE
18183: LD_EXP 52
18187: PUSH
18188: LD_VAR 0 1
18192: ARRAY
18193: INC
18194: ST_TO_ADDR
18195: LD_INT 1
18197: PUSH
18198: FOR_DOWNTO
18199: IFFALSE 18449
// begin side := GetSide ( minersList [ i ] ) ;
18201: LD_ADDR_VAR 0 3
18205: PUSH
18206: LD_EXP 51
18210: PUSH
18211: LD_VAR 0 1
18215: ARRAY
18216: PPUSH
18217: CALL_OW 255
18221: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18222: LD_ADDR_VAR 0 4
18226: PUSH
18227: LD_EXP 52
18231: PUSH
18232: LD_VAR 0 1
18236: ARRAY
18237: PUSH
18238: LD_VAR 0 2
18242: ARRAY
18243: PUSH
18244: LD_INT 1
18246: ARRAY
18247: PPUSH
18248: LD_EXP 52
18252: PUSH
18253: LD_VAR 0 1
18257: ARRAY
18258: PUSH
18259: LD_VAR 0 2
18263: ARRAY
18264: PUSH
18265: LD_INT 2
18267: ARRAY
18268: PPUSH
18269: CALL_OW 428
18273: ST_TO_ADDR
// if not tmp then
18274: LD_VAR 0 4
18278: NOT
18279: IFFALSE 18283
// continue ;
18281: GO 18198
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18283: LD_VAR 0 4
18287: PUSH
18288: LD_INT 81
18290: PUSH
18291: LD_VAR 0 3
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PPUSH
18300: CALL_OW 69
18304: IN
18305: PUSH
18306: LD_EXP 52
18310: PUSH
18311: LD_VAR 0 1
18315: ARRAY
18316: PUSH
18317: LD_VAR 0 2
18321: ARRAY
18322: PUSH
18323: LD_INT 1
18325: ARRAY
18326: PPUSH
18327: LD_EXP 52
18331: PUSH
18332: LD_VAR 0 1
18336: ARRAY
18337: PUSH
18338: LD_VAR 0 2
18342: ARRAY
18343: PUSH
18344: LD_INT 2
18346: ARRAY
18347: PPUSH
18348: CALL_OW 458
18352: AND
18353: IFFALSE 18447
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18355: LD_EXP 52
18359: PUSH
18360: LD_VAR 0 1
18364: ARRAY
18365: PUSH
18366: LD_VAR 0 2
18370: ARRAY
18371: PUSH
18372: LD_INT 1
18374: ARRAY
18375: PPUSH
18376: LD_EXP 52
18380: PUSH
18381: LD_VAR 0 1
18385: ARRAY
18386: PUSH
18387: LD_VAR 0 2
18391: ARRAY
18392: PUSH
18393: LD_INT 2
18395: ARRAY
18396: PPUSH
18397: LD_VAR 0 3
18401: PPUSH
18402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18406: LD_ADDR_EXP 52
18410: PUSH
18411: LD_EXP 52
18415: PPUSH
18416: LD_VAR 0 1
18420: PPUSH
18421: LD_EXP 52
18425: PUSH
18426: LD_VAR 0 1
18430: ARRAY
18431: PPUSH
18432: LD_VAR 0 2
18436: PPUSH
18437: CALL_OW 3
18441: PPUSH
18442: CALL_OW 1
18446: ST_TO_ADDR
// end ; end ;
18447: GO 18198
18449: POP
18450: POP
// end ;
18451: GO 18116
18453: POP
18454: POP
// end ;
18455: PPOPN 4
18457: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18458: LD_INT 0
18460: PPUSH
18461: PPUSH
// result := false ;
18462: LD_ADDR_VAR 0 4
18466: PUSH
18467: LD_INT 0
18469: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18470: LD_VAR 0 1
18474: PPUSH
18475: CALL_OW 264
18479: PUSH
18480: LD_INT 81
18482: EQUAL
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 18728
// index := GetElementIndex ( minersList , unit ) ;
18488: LD_ADDR_VAR 0 5
18492: PUSH
18493: LD_EXP 51
18497: PPUSH
18498: LD_VAR 0 1
18502: PPUSH
18503: CALL 40505 0 2
18507: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18508: LD_EXP 52
18512: PUSH
18513: LD_VAR 0 5
18517: ARRAY
18518: PUSH
18519: LD_EXP 53
18523: GREATEREQUAL
18524: IFFALSE 18528
// exit ;
18526: GO 18728
// ComMoveXY ( unit , x , y ) ;
18528: LD_VAR 0 1
18532: PPUSH
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_VAR 0 3
18542: PPUSH
18543: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18547: LD_INT 35
18549: PPUSH
18550: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18554: LD_VAR 0 1
18558: PPUSH
18559: LD_VAR 0 2
18563: PPUSH
18564: LD_VAR 0 3
18568: PPUSH
18569: CALL 72246 0 3
18573: NOT
18574: PUSH
18575: LD_VAR 0 1
18579: PPUSH
18580: CALL_OW 314
18584: AND
18585: IFFALSE 18589
// exit ;
18587: GO 18728
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18589: LD_VAR 0 2
18593: PPUSH
18594: LD_VAR 0 3
18598: PPUSH
18599: CALL_OW 428
18603: PUSH
18604: LD_VAR 0 1
18608: EQUAL
18609: PUSH
18610: LD_VAR 0 1
18614: PPUSH
18615: CALL_OW 314
18619: NOT
18620: AND
18621: IFFALSE 18547
// PlaySoundXY ( x , y , PlantMine ) ;
18623: LD_VAR 0 2
18627: PPUSH
18628: LD_VAR 0 3
18632: PPUSH
18633: LD_STRING PlantMine
18635: PPUSH
18636: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18640: LD_VAR 0 2
18644: PPUSH
18645: LD_VAR 0 3
18649: PPUSH
18650: LD_VAR 0 1
18654: PPUSH
18655: CALL_OW 255
18659: PPUSH
18660: LD_INT 0
18662: PPUSH
18663: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18667: LD_ADDR_EXP 52
18671: PUSH
18672: LD_EXP 52
18676: PPUSH
18677: LD_VAR 0 5
18681: PUSH
18682: LD_EXP 52
18686: PUSH
18687: LD_VAR 0 5
18691: ARRAY
18692: PUSH
18693: LD_INT 1
18695: PLUS
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PPUSH
18701: LD_VAR 0 2
18705: PUSH
18706: LD_VAR 0 3
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL 40720 0 3
18719: ST_TO_ADDR
// result := true ;
18720: LD_ADDR_VAR 0 4
18724: PUSH
18725: LD_INT 1
18727: ST_TO_ADDR
// end ;
18728: LD_VAR 0 4
18732: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18733: LD_INT 0
18735: PPUSH
18736: PPUSH
18737: PPUSH
// if not unit in minersList then
18738: LD_VAR 0 1
18742: PUSH
18743: LD_EXP 51
18747: IN
18748: NOT
18749: IFFALSE 18753
// exit ;
18751: GO 19145
// index := GetElementIndex ( minersList , unit ) ;
18753: LD_ADDR_VAR 0 6
18757: PUSH
18758: LD_EXP 51
18762: PPUSH
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL 40505 0 2
18772: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18773: LD_ADDR_VAR 0 5
18777: PUSH
18778: DOUBLE
18779: LD_EXP 52
18783: PUSH
18784: LD_VAR 0 6
18788: ARRAY
18789: INC
18790: ST_TO_ADDR
18791: LD_INT 1
18793: PUSH
18794: FOR_DOWNTO
18795: IFFALSE 18956
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18797: LD_EXP 52
18801: PUSH
18802: LD_VAR 0 6
18806: ARRAY
18807: PUSH
18808: LD_VAR 0 5
18812: ARRAY
18813: PUSH
18814: LD_INT 1
18816: ARRAY
18817: PUSH
18818: LD_VAR 0 2
18822: EQUAL
18823: PUSH
18824: LD_EXP 52
18828: PUSH
18829: LD_VAR 0 6
18833: ARRAY
18834: PUSH
18835: LD_VAR 0 5
18839: ARRAY
18840: PUSH
18841: LD_INT 2
18843: ARRAY
18844: PUSH
18845: LD_VAR 0 3
18849: EQUAL
18850: AND
18851: IFFALSE 18954
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18853: LD_EXP 52
18857: PUSH
18858: LD_VAR 0 6
18862: ARRAY
18863: PUSH
18864: LD_VAR 0 5
18868: ARRAY
18869: PUSH
18870: LD_INT 1
18872: ARRAY
18873: PPUSH
18874: LD_EXP 52
18878: PUSH
18879: LD_VAR 0 6
18883: ARRAY
18884: PUSH
18885: LD_VAR 0 5
18889: ARRAY
18890: PUSH
18891: LD_INT 2
18893: ARRAY
18894: PPUSH
18895: LD_VAR 0 1
18899: PPUSH
18900: CALL_OW 255
18904: PPUSH
18905: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18909: LD_ADDR_EXP 52
18913: PUSH
18914: LD_EXP 52
18918: PPUSH
18919: LD_VAR 0 6
18923: PPUSH
18924: LD_EXP 52
18928: PUSH
18929: LD_VAR 0 6
18933: ARRAY
18934: PPUSH
18935: LD_VAR 0 5
18939: PPUSH
18940: CALL_OW 3
18944: PPUSH
18945: CALL_OW 1
18949: ST_TO_ADDR
// exit ;
18950: POP
18951: POP
18952: GO 19145
// end ; end ;
18954: GO 18794
18956: POP
18957: POP
// for i := minerMinesList [ index ] downto 1 do
18958: LD_ADDR_VAR 0 5
18962: PUSH
18963: DOUBLE
18964: LD_EXP 52
18968: PUSH
18969: LD_VAR 0 6
18973: ARRAY
18974: INC
18975: ST_TO_ADDR
18976: LD_INT 1
18978: PUSH
18979: FOR_DOWNTO
18980: IFFALSE 19143
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18982: LD_EXP 52
18986: PUSH
18987: LD_VAR 0 6
18991: ARRAY
18992: PUSH
18993: LD_VAR 0 5
18997: ARRAY
18998: PUSH
18999: LD_INT 1
19001: ARRAY
19002: PPUSH
19003: LD_EXP 52
19007: PUSH
19008: LD_VAR 0 6
19012: ARRAY
19013: PUSH
19014: LD_VAR 0 5
19018: ARRAY
19019: PUSH
19020: LD_INT 2
19022: ARRAY
19023: PPUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: LD_VAR 0 3
19033: PPUSH
19034: CALL_OW 298
19038: PUSH
19039: LD_INT 6
19041: LESS
19042: IFFALSE 19141
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19044: LD_EXP 52
19048: PUSH
19049: LD_VAR 0 6
19053: ARRAY
19054: PUSH
19055: LD_VAR 0 5
19059: ARRAY
19060: PUSH
19061: LD_INT 1
19063: ARRAY
19064: PPUSH
19065: LD_EXP 52
19069: PUSH
19070: LD_VAR 0 6
19074: ARRAY
19075: PUSH
19076: LD_VAR 0 5
19080: ARRAY
19081: PUSH
19082: LD_INT 2
19084: ARRAY
19085: PPUSH
19086: LD_VAR 0 1
19090: PPUSH
19091: CALL_OW 255
19095: PPUSH
19096: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19100: LD_ADDR_EXP 52
19104: PUSH
19105: LD_EXP 52
19109: PPUSH
19110: LD_VAR 0 6
19114: PPUSH
19115: LD_EXP 52
19119: PUSH
19120: LD_VAR 0 6
19124: ARRAY
19125: PPUSH
19126: LD_VAR 0 5
19130: PPUSH
19131: CALL_OW 3
19135: PPUSH
19136: CALL_OW 1
19140: ST_TO_ADDR
// end ; end ;
19141: GO 18979
19143: POP
19144: POP
// end ;
19145: LD_VAR 0 4
19149: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19150: LD_INT 0
19152: PPUSH
19153: PPUSH
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
19158: PPUSH
19159: PPUSH
19160: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19161: LD_VAR 0 1
19165: PPUSH
19166: CALL_OW 264
19170: PUSH
19171: LD_INT 81
19173: EQUAL
19174: NOT
19175: PUSH
19176: LD_VAR 0 1
19180: PUSH
19181: LD_EXP 51
19185: IN
19186: NOT
19187: OR
19188: IFFALSE 19192
// exit ;
19190: GO 19514
// index := GetElementIndex ( minersList , unit ) ;
19192: LD_ADDR_VAR 0 6
19196: PUSH
19197: LD_EXP 51
19201: PPUSH
19202: LD_VAR 0 1
19206: PPUSH
19207: CALL 40505 0 2
19211: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19212: LD_ADDR_VAR 0 8
19216: PUSH
19217: LD_EXP 53
19221: PUSH
19222: LD_EXP 52
19226: PUSH
19227: LD_VAR 0 6
19231: ARRAY
19232: MINUS
19233: ST_TO_ADDR
// if not minesFreeAmount then
19234: LD_VAR 0 8
19238: NOT
19239: IFFALSE 19243
// exit ;
19241: GO 19514
// tmp := [ ] ;
19243: LD_ADDR_VAR 0 7
19247: PUSH
19248: EMPTY
19249: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19250: LD_ADDR_VAR 0 5
19254: PUSH
19255: DOUBLE
19256: LD_INT 1
19258: DEC
19259: ST_TO_ADDR
19260: LD_VAR 0 8
19264: PUSH
19265: FOR_TO
19266: IFFALSE 19461
// begin _d := rand ( 0 , 5 ) ;
19268: LD_ADDR_VAR 0 11
19272: PUSH
19273: LD_INT 0
19275: PPUSH
19276: LD_INT 5
19278: PPUSH
19279: CALL_OW 12
19283: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19284: LD_ADDR_VAR 0 12
19288: PUSH
19289: LD_INT 2
19291: PPUSH
19292: LD_INT 6
19294: PPUSH
19295: CALL_OW 12
19299: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19300: LD_ADDR_VAR 0 9
19304: PUSH
19305: LD_VAR 0 2
19309: PPUSH
19310: LD_VAR 0 11
19314: PPUSH
19315: LD_VAR 0 12
19319: PPUSH
19320: CALL_OW 272
19324: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19325: LD_ADDR_VAR 0 10
19329: PUSH
19330: LD_VAR 0 3
19334: PPUSH
19335: LD_VAR 0 11
19339: PPUSH
19340: LD_VAR 0 12
19344: PPUSH
19345: CALL_OW 273
19349: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19350: LD_VAR 0 9
19354: PPUSH
19355: LD_VAR 0 10
19359: PPUSH
19360: CALL_OW 488
19364: PUSH
19365: LD_VAR 0 9
19369: PUSH
19370: LD_VAR 0 10
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_VAR 0 7
19383: IN
19384: NOT
19385: AND
19386: PUSH
19387: LD_VAR 0 9
19391: PPUSH
19392: LD_VAR 0 10
19396: PPUSH
19397: CALL_OW 458
19401: NOT
19402: AND
19403: IFFALSE 19445
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19405: LD_ADDR_VAR 0 7
19409: PUSH
19410: LD_VAR 0 7
19414: PPUSH
19415: LD_VAR 0 7
19419: PUSH
19420: LD_INT 1
19422: PLUS
19423: PPUSH
19424: LD_VAR 0 9
19428: PUSH
19429: LD_VAR 0 10
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PPUSH
19438: CALL_OW 1
19442: ST_TO_ADDR
19443: GO 19459
// i := i - 1 ;
19445: LD_ADDR_VAR 0 5
19449: PUSH
19450: LD_VAR 0 5
19454: PUSH
19455: LD_INT 1
19457: MINUS
19458: ST_TO_ADDR
// end ;
19459: GO 19265
19461: POP
19462: POP
// for i in tmp do
19463: LD_ADDR_VAR 0 5
19467: PUSH
19468: LD_VAR 0 7
19472: PUSH
19473: FOR_IN
19474: IFFALSE 19512
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19476: LD_VAR 0 1
19480: PPUSH
19481: LD_VAR 0 5
19485: PUSH
19486: LD_INT 1
19488: ARRAY
19489: PPUSH
19490: LD_VAR 0 5
19494: PUSH
19495: LD_INT 2
19497: ARRAY
19498: PPUSH
19499: CALL 18458 0 3
19503: NOT
19504: IFFALSE 19510
// exit ;
19506: POP
19507: POP
19508: GO 19514
19510: GO 19473
19512: POP
19513: POP
// end ;
19514: LD_VAR 0 4
19518: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19519: LD_INT 0
19521: PPUSH
19522: PPUSH
19523: PPUSH
19524: PPUSH
19525: PPUSH
19526: PPUSH
19527: PPUSH
// if not GetClass ( unit ) = class_sniper then
19528: LD_VAR 0 1
19532: PPUSH
19533: CALL_OW 257
19537: PUSH
19538: LD_INT 5
19540: EQUAL
19541: NOT
19542: IFFALSE 19546
// exit ;
19544: GO 19934
// dist := 8 ;
19546: LD_ADDR_VAR 0 5
19550: PUSH
19551: LD_INT 8
19553: ST_TO_ADDR
// viewRange := 12 ;
19554: LD_ADDR_VAR 0 7
19558: PUSH
19559: LD_INT 12
19561: ST_TO_ADDR
// side := GetSide ( unit ) ;
19562: LD_ADDR_VAR 0 6
19566: PUSH
19567: LD_VAR 0 1
19571: PPUSH
19572: CALL_OW 255
19576: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19577: LD_INT 61
19579: PPUSH
19580: LD_VAR 0 6
19584: PPUSH
19585: CALL_OW 321
19589: PUSH
19590: LD_INT 2
19592: EQUAL
19593: IFFALSE 19603
// viewRange := 16 ;
19595: LD_ADDR_VAR 0 7
19599: PUSH
19600: LD_INT 16
19602: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19603: LD_VAR 0 1
19607: PPUSH
19608: LD_VAR 0 2
19612: PPUSH
19613: LD_VAR 0 3
19617: PPUSH
19618: CALL_OW 297
19622: PUSH
19623: LD_VAR 0 5
19627: GREATER
19628: IFFALSE 19707
// begin ComMoveXY ( unit , x , y ) ;
19630: LD_VAR 0 1
19634: PPUSH
19635: LD_VAR 0 2
19639: PPUSH
19640: LD_VAR 0 3
19644: PPUSH
19645: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19649: LD_INT 35
19651: PPUSH
19652: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19656: LD_VAR 0 1
19660: PPUSH
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_VAR 0 3
19670: PPUSH
19671: CALL 72246 0 3
19675: NOT
19676: IFFALSE 19680
// exit ;
19678: GO 19934
// until GetDistUnitXY ( unit , x , y ) < dist ;
19680: LD_VAR 0 1
19684: PPUSH
19685: LD_VAR 0 2
19689: PPUSH
19690: LD_VAR 0 3
19694: PPUSH
19695: CALL_OW 297
19699: PUSH
19700: LD_VAR 0 5
19704: LESS
19705: IFFALSE 19649
// end ; ComTurnXY ( unit , x , y ) ;
19707: LD_VAR 0 1
19711: PPUSH
19712: LD_VAR 0 2
19716: PPUSH
19717: LD_VAR 0 3
19721: PPUSH
19722: CALL_OW 118
// wait ( 5 ) ;
19726: LD_INT 5
19728: PPUSH
19729: CALL_OW 67
// _d := GetDir ( unit ) ;
19733: LD_ADDR_VAR 0 10
19737: PUSH
19738: LD_VAR 0 1
19742: PPUSH
19743: CALL_OW 254
19747: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19748: LD_ADDR_VAR 0 8
19752: PUSH
19753: LD_VAR 0 1
19757: PPUSH
19758: CALL_OW 250
19762: PPUSH
19763: LD_VAR 0 10
19767: PPUSH
19768: LD_VAR 0 5
19772: PPUSH
19773: CALL_OW 272
19777: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19778: LD_ADDR_VAR 0 9
19782: PUSH
19783: LD_VAR 0 1
19787: PPUSH
19788: CALL_OW 251
19792: PPUSH
19793: LD_VAR 0 10
19797: PPUSH
19798: LD_VAR 0 5
19802: PPUSH
19803: CALL_OW 273
19807: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19808: LD_VAR 0 8
19812: PPUSH
19813: LD_VAR 0 9
19817: PPUSH
19818: CALL_OW 488
19822: NOT
19823: IFFALSE 19827
// exit ;
19825: GO 19934
// ComAnimCustom ( unit , 1 ) ;
19827: LD_VAR 0 1
19831: PPUSH
19832: LD_INT 1
19834: PPUSH
19835: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19839: LD_VAR 0 8
19843: PPUSH
19844: LD_VAR 0 9
19848: PPUSH
19849: LD_VAR 0 6
19853: PPUSH
19854: LD_VAR 0 7
19858: PPUSH
19859: CALL_OW 330
// repeat wait ( 1 ) ;
19863: LD_INT 1
19865: PPUSH
19866: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19870: LD_VAR 0 1
19874: PPUSH
19875: CALL_OW 316
19879: PUSH
19880: LD_VAR 0 1
19884: PPUSH
19885: CALL_OW 314
19889: OR
19890: PUSH
19891: LD_VAR 0 1
19895: PPUSH
19896: CALL_OW 302
19900: NOT
19901: OR
19902: PUSH
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 301
19912: OR
19913: IFFALSE 19863
// RemoveSeeing ( _x , _y , side ) ;
19915: LD_VAR 0 8
19919: PPUSH
19920: LD_VAR 0 9
19924: PPUSH
19925: LD_VAR 0 6
19929: PPUSH
19930: CALL_OW 331
// end ; end_of_file
19934: LD_VAR 0 4
19938: RET
// export globalGameSaveCounter ; every 0 0$1 do
19939: GO 19941
19941: DISABLE
// begin enable ;
19942: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19943: LD_STRING updateTimer(
19945: PUSH
19946: LD_OWVAR 1
19950: STR
19951: PUSH
19952: LD_STRING );
19954: STR
19955: PPUSH
19956: CALL_OW 559
// end ;
19960: END
// every 0 0$1 do
19961: GO 19963
19963: DISABLE
// begin globalGameSaveCounter := 0 ;
19964: LD_ADDR_EXP 54
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19972: LD_STRING setGameSaveCounter(0)
19974: PPUSH
19975: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19979: LD_STRING initStreamRollete();
19981: PPUSH
19982: CALL_OW 559
// InitStreamMode ;
19986: CALL 21329 0 0
// DefineStreamItems ( false ) ;
19990: LD_INT 0
19992: PPUSH
19993: CALL 21793 0 1
// end ;
19997: END
// export function SOS_MapStart ( ) ; begin
19998: LD_INT 0
20000: PPUSH
// if streamModeActive then
20001: LD_EXP 55
20005: IFFALSE 20014
// DefineStreamItems ( true ) ;
20007: LD_INT 1
20009: PPUSH
20010: CALL 21793 0 1
// UpdateLuaVariables ( ) ;
20014: CALL 20031 0 0
// UpdateFactoryWaypoints ( ) ;
20018: CALL 34662 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20022: CALL 34919 0 0
// end ;
20026: LD_VAR 0 1
20030: RET
// function UpdateLuaVariables ( ) ; begin
20031: LD_INT 0
20033: PPUSH
// if globalGameSaveCounter then
20034: LD_EXP 54
20038: IFFALSE 20072
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20040: LD_ADDR_EXP 54
20044: PUSH
20045: LD_EXP 54
20049: PPUSH
20050: CALL 74810 0 1
20054: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20055: LD_STRING setGameSaveCounter(
20057: PUSH
20058: LD_EXP 54
20062: STR
20063: PUSH
20064: LD_STRING )
20066: STR
20067: PPUSH
20068: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20072: LD_STRING setGameDifficulty(
20074: PUSH
20075: LD_OWVAR 67
20079: STR
20080: PUSH
20081: LD_STRING )
20083: STR
20084: PPUSH
20085: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20089: LD_STRING displayDifficulty(
20091: PUSH
20092: LD_OWVAR 67
20096: STR
20097: PUSH
20098: LD_STRING )
20100: STR
20101: PPUSH
20102: CALL_OW 559
// end ;
20106: LD_VAR 0 1
20110: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20111: LD_INT 0
20113: PPUSH
// if p2 = stream_mode then
20114: LD_VAR 0 2
20118: PUSH
20119: LD_INT 100
20121: EQUAL
20122: IFFALSE 21125
// begin if not StreamModeActive then
20124: LD_EXP 55
20128: NOT
20129: IFFALSE 20139
// StreamModeActive := true ;
20131: LD_ADDR_EXP 55
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 0 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 0
20146: EQUAL
20147: IFFALSE 20153
// InitStreamMode ;
20149: CALL 21329 0 0
// if p3 = 1 then
20153: LD_VAR 0 3
20157: PUSH
20158: LD_INT 1
20160: EQUAL
20161: IFFALSE 20171
// sRocket := true ;
20163: LD_ADDR_EXP 60
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// if p3 = 2 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_INT 2
20178: EQUAL
20179: IFFALSE 20189
// sSpeed := true ;
20181: LD_ADDR_EXP 59
20185: PUSH
20186: LD_INT 1
20188: ST_TO_ADDR
// if p3 = 3 then
20189: LD_VAR 0 3
20193: PUSH
20194: LD_INT 3
20196: EQUAL
20197: IFFALSE 20207
// sEngine := true ;
20199: LD_ADDR_EXP 61
20203: PUSH
20204: LD_INT 1
20206: ST_TO_ADDR
// if p3 = 4 then
20207: LD_VAR 0 3
20211: PUSH
20212: LD_INT 4
20214: EQUAL
20215: IFFALSE 20225
// sSpec := true ;
20217: LD_ADDR_EXP 58
20221: PUSH
20222: LD_INT 1
20224: ST_TO_ADDR
// if p3 = 5 then
20225: LD_VAR 0 3
20229: PUSH
20230: LD_INT 5
20232: EQUAL
20233: IFFALSE 20243
// sLevel := true ;
20235: LD_ADDR_EXP 62
20239: PUSH
20240: LD_INT 1
20242: ST_TO_ADDR
// if p3 = 6 then
20243: LD_VAR 0 3
20247: PUSH
20248: LD_INT 6
20250: EQUAL
20251: IFFALSE 20261
// sArmoury := true ;
20253: LD_ADDR_EXP 63
20257: PUSH
20258: LD_INT 1
20260: ST_TO_ADDR
// if p3 = 7 then
20261: LD_VAR 0 3
20265: PUSH
20266: LD_INT 7
20268: EQUAL
20269: IFFALSE 20279
// sRadar := true ;
20271: LD_ADDR_EXP 64
20275: PUSH
20276: LD_INT 1
20278: ST_TO_ADDR
// if p3 = 8 then
20279: LD_VAR 0 3
20283: PUSH
20284: LD_INT 8
20286: EQUAL
20287: IFFALSE 20297
// sBunker := true ;
20289: LD_ADDR_EXP 65
20293: PUSH
20294: LD_INT 1
20296: ST_TO_ADDR
// if p3 = 9 then
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 9
20304: EQUAL
20305: IFFALSE 20315
// sHack := true ;
20307: LD_ADDR_EXP 66
20311: PUSH
20312: LD_INT 1
20314: ST_TO_ADDR
// if p3 = 10 then
20315: LD_VAR 0 3
20319: PUSH
20320: LD_INT 10
20322: EQUAL
20323: IFFALSE 20333
// sFire := true ;
20325: LD_ADDR_EXP 67
20329: PUSH
20330: LD_INT 1
20332: ST_TO_ADDR
// if p3 = 11 then
20333: LD_VAR 0 3
20337: PUSH
20338: LD_INT 11
20340: EQUAL
20341: IFFALSE 20351
// sRefresh := true ;
20343: LD_ADDR_EXP 68
20347: PUSH
20348: LD_INT 1
20350: ST_TO_ADDR
// if p3 = 12 then
20351: LD_VAR 0 3
20355: PUSH
20356: LD_INT 12
20358: EQUAL
20359: IFFALSE 20369
// sExp := true ;
20361: LD_ADDR_EXP 69
20365: PUSH
20366: LD_INT 1
20368: ST_TO_ADDR
// if p3 = 13 then
20369: LD_VAR 0 3
20373: PUSH
20374: LD_INT 13
20376: EQUAL
20377: IFFALSE 20387
// sDepot := true ;
20379: LD_ADDR_EXP 70
20383: PUSH
20384: LD_INT 1
20386: ST_TO_ADDR
// if p3 = 14 then
20387: LD_VAR 0 3
20391: PUSH
20392: LD_INT 14
20394: EQUAL
20395: IFFALSE 20405
// sFlag := true ;
20397: LD_ADDR_EXP 71
20401: PUSH
20402: LD_INT 1
20404: ST_TO_ADDR
// if p3 = 15 then
20405: LD_VAR 0 3
20409: PUSH
20410: LD_INT 15
20412: EQUAL
20413: IFFALSE 20423
// sKamikadze := true ;
20415: LD_ADDR_EXP 79
20419: PUSH
20420: LD_INT 1
20422: ST_TO_ADDR
// if p3 = 16 then
20423: LD_VAR 0 3
20427: PUSH
20428: LD_INT 16
20430: EQUAL
20431: IFFALSE 20441
// sTroll := true ;
20433: LD_ADDR_EXP 80
20437: PUSH
20438: LD_INT 1
20440: ST_TO_ADDR
// if p3 = 17 then
20441: LD_VAR 0 3
20445: PUSH
20446: LD_INT 17
20448: EQUAL
20449: IFFALSE 20459
// sSlow := true ;
20451: LD_ADDR_EXP 81
20455: PUSH
20456: LD_INT 1
20458: ST_TO_ADDR
// if p3 = 18 then
20459: LD_VAR 0 3
20463: PUSH
20464: LD_INT 18
20466: EQUAL
20467: IFFALSE 20477
// sLack := true ;
20469: LD_ADDR_EXP 82
20473: PUSH
20474: LD_INT 1
20476: ST_TO_ADDR
// if p3 = 19 then
20477: LD_VAR 0 3
20481: PUSH
20482: LD_INT 19
20484: EQUAL
20485: IFFALSE 20495
// sTank := true ;
20487: LD_ADDR_EXP 84
20491: PUSH
20492: LD_INT 1
20494: ST_TO_ADDR
// if p3 = 20 then
20495: LD_VAR 0 3
20499: PUSH
20500: LD_INT 20
20502: EQUAL
20503: IFFALSE 20513
// sRemote := true ;
20505: LD_ADDR_EXP 85
20509: PUSH
20510: LD_INT 1
20512: ST_TO_ADDR
// if p3 = 21 then
20513: LD_VAR 0 3
20517: PUSH
20518: LD_INT 21
20520: EQUAL
20521: IFFALSE 20531
// sPowell := true ;
20523: LD_ADDR_EXP 86
20527: PUSH
20528: LD_INT 1
20530: ST_TO_ADDR
// if p3 = 22 then
20531: LD_VAR 0 3
20535: PUSH
20536: LD_INT 22
20538: EQUAL
20539: IFFALSE 20549
// sTeleport := true ;
20541: LD_ADDR_EXP 89
20545: PUSH
20546: LD_INT 1
20548: ST_TO_ADDR
// if p3 = 23 then
20549: LD_VAR 0 3
20553: PUSH
20554: LD_INT 23
20556: EQUAL
20557: IFFALSE 20567
// sOilTower := true ;
20559: LD_ADDR_EXP 91
20563: PUSH
20564: LD_INT 1
20566: ST_TO_ADDR
// if p3 = 24 then
20567: LD_VAR 0 3
20571: PUSH
20572: LD_INT 24
20574: EQUAL
20575: IFFALSE 20585
// sShovel := true ;
20577: LD_ADDR_EXP 92
20581: PUSH
20582: LD_INT 1
20584: ST_TO_ADDR
// if p3 = 25 then
20585: LD_VAR 0 3
20589: PUSH
20590: LD_INT 25
20592: EQUAL
20593: IFFALSE 20603
// sSheik := true ;
20595: LD_ADDR_EXP 93
20599: PUSH
20600: LD_INT 1
20602: ST_TO_ADDR
// if p3 = 26 then
20603: LD_VAR 0 3
20607: PUSH
20608: LD_INT 26
20610: EQUAL
20611: IFFALSE 20621
// sEarthquake := true ;
20613: LD_ADDR_EXP 95
20617: PUSH
20618: LD_INT 1
20620: ST_TO_ADDR
// if p3 = 27 then
20621: LD_VAR 0 3
20625: PUSH
20626: LD_INT 27
20628: EQUAL
20629: IFFALSE 20639
// sAI := true ;
20631: LD_ADDR_EXP 96
20635: PUSH
20636: LD_INT 1
20638: ST_TO_ADDR
// if p3 = 28 then
20639: LD_VAR 0 3
20643: PUSH
20644: LD_INT 28
20646: EQUAL
20647: IFFALSE 20657
// sCargo := true ;
20649: LD_ADDR_EXP 99
20653: PUSH
20654: LD_INT 1
20656: ST_TO_ADDR
// if p3 = 29 then
20657: LD_VAR 0 3
20661: PUSH
20662: LD_INT 29
20664: EQUAL
20665: IFFALSE 20675
// sDLaser := true ;
20667: LD_ADDR_EXP 100
20671: PUSH
20672: LD_INT 1
20674: ST_TO_ADDR
// if p3 = 30 then
20675: LD_VAR 0 3
20679: PUSH
20680: LD_INT 30
20682: EQUAL
20683: IFFALSE 20693
// sExchange := true ;
20685: LD_ADDR_EXP 101
20689: PUSH
20690: LD_INT 1
20692: ST_TO_ADDR
// if p3 = 31 then
20693: LD_VAR 0 3
20697: PUSH
20698: LD_INT 31
20700: EQUAL
20701: IFFALSE 20711
// sFac := true ;
20703: LD_ADDR_EXP 102
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if p3 = 32 then
20711: LD_VAR 0 3
20715: PUSH
20716: LD_INT 32
20718: EQUAL
20719: IFFALSE 20729
// sPower := true ;
20721: LD_ADDR_EXP 103
20725: PUSH
20726: LD_INT 1
20728: ST_TO_ADDR
// if p3 = 33 then
20729: LD_VAR 0 3
20733: PUSH
20734: LD_INT 33
20736: EQUAL
20737: IFFALSE 20747
// sRandom := true ;
20739: LD_ADDR_EXP 104
20743: PUSH
20744: LD_INT 1
20746: ST_TO_ADDR
// if p3 = 34 then
20747: LD_VAR 0 3
20751: PUSH
20752: LD_INT 34
20754: EQUAL
20755: IFFALSE 20765
// sShield := true ;
20757: LD_ADDR_EXP 105
20761: PUSH
20762: LD_INT 1
20764: ST_TO_ADDR
// if p3 = 35 then
20765: LD_VAR 0 3
20769: PUSH
20770: LD_INT 35
20772: EQUAL
20773: IFFALSE 20783
// sTime := true ;
20775: LD_ADDR_EXP 106
20779: PUSH
20780: LD_INT 1
20782: ST_TO_ADDR
// if p3 = 36 then
20783: LD_VAR 0 3
20787: PUSH
20788: LD_INT 36
20790: EQUAL
20791: IFFALSE 20801
// sTools := true ;
20793: LD_ADDR_EXP 107
20797: PUSH
20798: LD_INT 1
20800: ST_TO_ADDR
// if p3 = 101 then
20801: LD_VAR 0 3
20805: PUSH
20806: LD_INT 101
20808: EQUAL
20809: IFFALSE 20819
// sSold := true ;
20811: LD_ADDR_EXP 72
20815: PUSH
20816: LD_INT 1
20818: ST_TO_ADDR
// if p3 = 102 then
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 102
20826: EQUAL
20827: IFFALSE 20837
// sDiff := true ;
20829: LD_ADDR_EXP 73
20833: PUSH
20834: LD_INT 1
20836: ST_TO_ADDR
// if p3 = 103 then
20837: LD_VAR 0 3
20841: PUSH
20842: LD_INT 103
20844: EQUAL
20845: IFFALSE 20855
// sFog := true ;
20847: LD_ADDR_EXP 76
20851: PUSH
20852: LD_INT 1
20854: ST_TO_ADDR
// if p3 = 104 then
20855: LD_VAR 0 3
20859: PUSH
20860: LD_INT 104
20862: EQUAL
20863: IFFALSE 20873
// sReset := true ;
20865: LD_ADDR_EXP 77
20869: PUSH
20870: LD_INT 1
20872: ST_TO_ADDR
// if p3 = 105 then
20873: LD_VAR 0 3
20877: PUSH
20878: LD_INT 105
20880: EQUAL
20881: IFFALSE 20891
// sSun := true ;
20883: LD_ADDR_EXP 78
20887: PUSH
20888: LD_INT 1
20890: ST_TO_ADDR
// if p3 = 106 then
20891: LD_VAR 0 3
20895: PUSH
20896: LD_INT 106
20898: EQUAL
20899: IFFALSE 20909
// sTiger := true ;
20901: LD_ADDR_EXP 74
20905: PUSH
20906: LD_INT 1
20908: ST_TO_ADDR
// if p3 = 107 then
20909: LD_VAR 0 3
20913: PUSH
20914: LD_INT 107
20916: EQUAL
20917: IFFALSE 20927
// sBomb := true ;
20919: LD_ADDR_EXP 75
20923: PUSH
20924: LD_INT 1
20926: ST_TO_ADDR
// if p3 = 108 then
20927: LD_VAR 0 3
20931: PUSH
20932: LD_INT 108
20934: EQUAL
20935: IFFALSE 20945
// sWound := true ;
20937: LD_ADDR_EXP 83
20941: PUSH
20942: LD_INT 1
20944: ST_TO_ADDR
// if p3 = 109 then
20945: LD_VAR 0 3
20949: PUSH
20950: LD_INT 109
20952: EQUAL
20953: IFFALSE 20963
// sBetray := true ;
20955: LD_ADDR_EXP 87
20959: PUSH
20960: LD_INT 1
20962: ST_TO_ADDR
// if p3 = 110 then
20963: LD_VAR 0 3
20967: PUSH
20968: LD_INT 110
20970: EQUAL
20971: IFFALSE 20981
// sContamin := true ;
20973: LD_ADDR_EXP 88
20977: PUSH
20978: LD_INT 1
20980: ST_TO_ADDR
// if p3 = 111 then
20981: LD_VAR 0 3
20985: PUSH
20986: LD_INT 111
20988: EQUAL
20989: IFFALSE 20999
// sOil := true ;
20991: LD_ADDR_EXP 90
20995: PUSH
20996: LD_INT 1
20998: ST_TO_ADDR
// if p3 = 112 then
20999: LD_VAR 0 3
21003: PUSH
21004: LD_INT 112
21006: EQUAL
21007: IFFALSE 21017
// sStu := true ;
21009: LD_ADDR_EXP 94
21013: PUSH
21014: LD_INT 1
21016: ST_TO_ADDR
// if p3 = 113 then
21017: LD_VAR 0 3
21021: PUSH
21022: LD_INT 113
21024: EQUAL
21025: IFFALSE 21035
// sBazooka := true ;
21027: LD_ADDR_EXP 97
21031: PUSH
21032: LD_INT 1
21034: ST_TO_ADDR
// if p3 = 114 then
21035: LD_VAR 0 3
21039: PUSH
21040: LD_INT 114
21042: EQUAL
21043: IFFALSE 21053
// sMortar := true ;
21045: LD_ADDR_EXP 98
21049: PUSH
21050: LD_INT 1
21052: ST_TO_ADDR
// if p3 = 115 then
21053: LD_VAR 0 3
21057: PUSH
21058: LD_INT 115
21060: EQUAL
21061: IFFALSE 21071
// sRanger := true ;
21063: LD_ADDR_EXP 108
21067: PUSH
21068: LD_INT 1
21070: ST_TO_ADDR
// if p3 = 116 then
21071: LD_VAR 0 3
21075: PUSH
21076: LD_INT 116
21078: EQUAL
21079: IFFALSE 21089
// sComputer := true ;
21081: LD_ADDR_EXP 109
21085: PUSH
21086: LD_INT 1
21088: ST_TO_ADDR
// if p3 = 117 then
21089: LD_VAR 0 3
21093: PUSH
21094: LD_INT 117
21096: EQUAL
21097: IFFALSE 21107
// s30 := true ;
21099: LD_ADDR_EXP 110
21103: PUSH
21104: LD_INT 1
21106: ST_TO_ADDR
// if p3 = 118 then
21107: LD_VAR 0 3
21111: PUSH
21112: LD_INT 118
21114: EQUAL
21115: IFFALSE 21125
// s60 := true ;
21117: LD_ADDR_EXP 111
21121: PUSH
21122: LD_INT 1
21124: ST_TO_ADDR
// end ; if p2 = hack_mode then
21125: LD_VAR 0 2
21129: PUSH
21130: LD_INT 101
21132: EQUAL
21133: IFFALSE 21261
// begin case p3 of 1 :
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 1
21142: DOUBLE
21143: EQUAL
21144: IFTRUE 21148
21146: GO 21155
21148: POP
// hHackUnlimitedResources ; 2 :
21149: CALL 33408 0 0
21153: GO 21261
21155: LD_INT 2
21157: DOUBLE
21158: EQUAL
21159: IFTRUE 21163
21161: GO 21170
21163: POP
// hHackSetLevel10 ; 3 :
21164: CALL 33541 0 0
21168: GO 21261
21170: LD_INT 3
21172: DOUBLE
21173: EQUAL
21174: IFTRUE 21178
21176: GO 21185
21178: POP
// hHackSetLevel10YourUnits ; 4 :
21179: CALL 33626 0 0
21183: GO 21261
21185: LD_INT 4
21187: DOUBLE
21188: EQUAL
21189: IFTRUE 21193
21191: GO 21200
21193: POP
// hHackInvincible ; 5 :
21194: CALL 34074 0 0
21198: GO 21261
21200: LD_INT 5
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21215
21208: POP
// hHackInvisible ; 6 :
21209: CALL 34185 0 0
21213: GO 21261
21215: LD_INT 6
21217: DOUBLE
21218: EQUAL
21219: IFTRUE 21223
21221: GO 21230
21223: POP
// hHackChangeYourSide ; 7 :
21224: CALL 34242 0 0
21228: GO 21261
21230: LD_INT 7
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21245
21238: POP
// hHackChangeUnitSide ; 8 :
21239: CALL 34284 0 0
21243: GO 21261
21245: LD_INT 8
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21260
21253: POP
// hHackFog ; end ;
21254: CALL 34385 0 0
21258: GO 21261
21260: POP
// end ; if p2 = game_save_mode then
21261: LD_VAR 0 2
21265: PUSH
21266: LD_INT 102
21268: EQUAL
21269: IFFALSE 21324
// begin if p3 = 1 then
21271: LD_VAR 0 3
21275: PUSH
21276: LD_INT 1
21278: EQUAL
21279: IFFALSE 21291
// globalGameSaveCounter := p4 ;
21281: LD_ADDR_EXP 54
21285: PUSH
21286: LD_VAR 0 4
21290: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21291: LD_VAR 0 3
21295: PUSH
21296: LD_INT 2
21298: EQUAL
21299: PUSH
21300: LD_EXP 54
21304: AND
21305: IFFALSE 21324
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21307: LD_STRING setGameSaveCounter(
21309: PUSH
21310: LD_EXP 54
21314: STR
21315: PUSH
21316: LD_STRING )
21318: STR
21319: PPUSH
21320: CALL_OW 559
// end ; end ;
21324: LD_VAR 0 7
21328: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21329: LD_INT 0
21331: PPUSH
// streamModeActive := false ;
21332: LD_ADDR_EXP 55
21336: PUSH
21337: LD_INT 0
21339: ST_TO_ADDR
// normalCounter := 36 ;
21340: LD_ADDR_EXP 56
21344: PUSH
21345: LD_INT 36
21347: ST_TO_ADDR
// hardcoreCounter := 18 ;
21348: LD_ADDR_EXP 57
21352: PUSH
21353: LD_INT 18
21355: ST_TO_ADDR
// sRocket := false ;
21356: LD_ADDR_EXP 60
21360: PUSH
21361: LD_INT 0
21363: ST_TO_ADDR
// sSpeed := false ;
21364: LD_ADDR_EXP 59
21368: PUSH
21369: LD_INT 0
21371: ST_TO_ADDR
// sEngine := false ;
21372: LD_ADDR_EXP 61
21376: PUSH
21377: LD_INT 0
21379: ST_TO_ADDR
// sSpec := false ;
21380: LD_ADDR_EXP 58
21384: PUSH
21385: LD_INT 0
21387: ST_TO_ADDR
// sLevel := false ;
21388: LD_ADDR_EXP 62
21392: PUSH
21393: LD_INT 0
21395: ST_TO_ADDR
// sArmoury := false ;
21396: LD_ADDR_EXP 63
21400: PUSH
21401: LD_INT 0
21403: ST_TO_ADDR
// sRadar := false ;
21404: LD_ADDR_EXP 64
21408: PUSH
21409: LD_INT 0
21411: ST_TO_ADDR
// sBunker := false ;
21412: LD_ADDR_EXP 65
21416: PUSH
21417: LD_INT 0
21419: ST_TO_ADDR
// sHack := false ;
21420: LD_ADDR_EXP 66
21424: PUSH
21425: LD_INT 0
21427: ST_TO_ADDR
// sFire := false ;
21428: LD_ADDR_EXP 67
21432: PUSH
21433: LD_INT 0
21435: ST_TO_ADDR
// sRefresh := false ;
21436: LD_ADDR_EXP 68
21440: PUSH
21441: LD_INT 0
21443: ST_TO_ADDR
// sExp := false ;
21444: LD_ADDR_EXP 69
21448: PUSH
21449: LD_INT 0
21451: ST_TO_ADDR
// sDepot := false ;
21452: LD_ADDR_EXP 70
21456: PUSH
21457: LD_INT 0
21459: ST_TO_ADDR
// sFlag := false ;
21460: LD_ADDR_EXP 71
21464: PUSH
21465: LD_INT 0
21467: ST_TO_ADDR
// sKamikadze := false ;
21468: LD_ADDR_EXP 79
21472: PUSH
21473: LD_INT 0
21475: ST_TO_ADDR
// sTroll := false ;
21476: LD_ADDR_EXP 80
21480: PUSH
21481: LD_INT 0
21483: ST_TO_ADDR
// sSlow := false ;
21484: LD_ADDR_EXP 81
21488: PUSH
21489: LD_INT 0
21491: ST_TO_ADDR
// sLack := false ;
21492: LD_ADDR_EXP 82
21496: PUSH
21497: LD_INT 0
21499: ST_TO_ADDR
// sTank := false ;
21500: LD_ADDR_EXP 84
21504: PUSH
21505: LD_INT 0
21507: ST_TO_ADDR
// sRemote := false ;
21508: LD_ADDR_EXP 85
21512: PUSH
21513: LD_INT 0
21515: ST_TO_ADDR
// sPowell := false ;
21516: LD_ADDR_EXP 86
21520: PUSH
21521: LD_INT 0
21523: ST_TO_ADDR
// sTeleport := false ;
21524: LD_ADDR_EXP 89
21528: PUSH
21529: LD_INT 0
21531: ST_TO_ADDR
// sOilTower := false ;
21532: LD_ADDR_EXP 91
21536: PUSH
21537: LD_INT 0
21539: ST_TO_ADDR
// sShovel := false ;
21540: LD_ADDR_EXP 92
21544: PUSH
21545: LD_INT 0
21547: ST_TO_ADDR
// sSheik := false ;
21548: LD_ADDR_EXP 93
21552: PUSH
21553: LD_INT 0
21555: ST_TO_ADDR
// sEarthquake := false ;
21556: LD_ADDR_EXP 95
21560: PUSH
21561: LD_INT 0
21563: ST_TO_ADDR
// sAI := false ;
21564: LD_ADDR_EXP 96
21568: PUSH
21569: LD_INT 0
21571: ST_TO_ADDR
// sCargo := false ;
21572: LD_ADDR_EXP 99
21576: PUSH
21577: LD_INT 0
21579: ST_TO_ADDR
// sDLaser := false ;
21580: LD_ADDR_EXP 100
21584: PUSH
21585: LD_INT 0
21587: ST_TO_ADDR
// sExchange := false ;
21588: LD_ADDR_EXP 101
21592: PUSH
21593: LD_INT 0
21595: ST_TO_ADDR
// sFac := false ;
21596: LD_ADDR_EXP 102
21600: PUSH
21601: LD_INT 0
21603: ST_TO_ADDR
// sPower := false ;
21604: LD_ADDR_EXP 103
21608: PUSH
21609: LD_INT 0
21611: ST_TO_ADDR
// sRandom := false ;
21612: LD_ADDR_EXP 104
21616: PUSH
21617: LD_INT 0
21619: ST_TO_ADDR
// sShield := false ;
21620: LD_ADDR_EXP 105
21624: PUSH
21625: LD_INT 0
21627: ST_TO_ADDR
// sTime := false ;
21628: LD_ADDR_EXP 106
21632: PUSH
21633: LD_INT 0
21635: ST_TO_ADDR
// sTools := false ;
21636: LD_ADDR_EXP 107
21640: PUSH
21641: LD_INT 0
21643: ST_TO_ADDR
// sSold := false ;
21644: LD_ADDR_EXP 72
21648: PUSH
21649: LD_INT 0
21651: ST_TO_ADDR
// sDiff := false ;
21652: LD_ADDR_EXP 73
21656: PUSH
21657: LD_INT 0
21659: ST_TO_ADDR
// sFog := false ;
21660: LD_ADDR_EXP 76
21664: PUSH
21665: LD_INT 0
21667: ST_TO_ADDR
// sReset := false ;
21668: LD_ADDR_EXP 77
21672: PUSH
21673: LD_INT 0
21675: ST_TO_ADDR
// sSun := false ;
21676: LD_ADDR_EXP 78
21680: PUSH
21681: LD_INT 0
21683: ST_TO_ADDR
// sTiger := false ;
21684: LD_ADDR_EXP 74
21688: PUSH
21689: LD_INT 0
21691: ST_TO_ADDR
// sBomb := false ;
21692: LD_ADDR_EXP 75
21696: PUSH
21697: LD_INT 0
21699: ST_TO_ADDR
// sWound := false ;
21700: LD_ADDR_EXP 83
21704: PUSH
21705: LD_INT 0
21707: ST_TO_ADDR
// sBetray := false ;
21708: LD_ADDR_EXP 87
21712: PUSH
21713: LD_INT 0
21715: ST_TO_ADDR
// sContamin := false ;
21716: LD_ADDR_EXP 88
21720: PUSH
21721: LD_INT 0
21723: ST_TO_ADDR
// sOil := false ;
21724: LD_ADDR_EXP 90
21728: PUSH
21729: LD_INT 0
21731: ST_TO_ADDR
// sStu := false ;
21732: LD_ADDR_EXP 94
21736: PUSH
21737: LD_INT 0
21739: ST_TO_ADDR
// sBazooka := false ;
21740: LD_ADDR_EXP 97
21744: PUSH
21745: LD_INT 0
21747: ST_TO_ADDR
// sMortar := false ;
21748: LD_ADDR_EXP 98
21752: PUSH
21753: LD_INT 0
21755: ST_TO_ADDR
// sRanger := false ;
21756: LD_ADDR_EXP 108
21760: PUSH
21761: LD_INT 0
21763: ST_TO_ADDR
// sComputer := false ;
21764: LD_ADDR_EXP 109
21768: PUSH
21769: LD_INT 0
21771: ST_TO_ADDR
// s30 := false ;
21772: LD_ADDR_EXP 110
21776: PUSH
21777: LD_INT 0
21779: ST_TO_ADDR
// s60 := false ;
21780: LD_ADDR_EXP 111
21784: PUSH
21785: LD_INT 0
21787: ST_TO_ADDR
// end ;
21788: LD_VAR 0 1
21792: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21793: LD_INT 0
21795: PPUSH
21796: PPUSH
21797: PPUSH
21798: PPUSH
21799: PPUSH
21800: PPUSH
21801: PPUSH
// result := [ ] ;
21802: LD_ADDR_VAR 0 2
21806: PUSH
21807: EMPTY
21808: ST_TO_ADDR
// if campaign_id = 1 then
21809: LD_OWVAR 69
21813: PUSH
21814: LD_INT 1
21816: EQUAL
21817: IFFALSE 24983
// begin case mission_number of 1 :
21819: LD_OWVAR 70
21823: PUSH
21824: LD_INT 1
21826: DOUBLE
21827: EQUAL
21828: IFTRUE 21832
21830: GO 21908
21832: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_INT 2
21840: PUSH
21841: LD_INT 4
21843: PUSH
21844: LD_INT 11
21846: PUSH
21847: LD_INT 12
21849: PUSH
21850: LD_INT 15
21852: PUSH
21853: LD_INT 16
21855: PUSH
21856: LD_INT 22
21858: PUSH
21859: LD_INT 23
21861: PUSH
21862: LD_INT 26
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 101
21878: PUSH
21879: LD_INT 102
21881: PUSH
21882: LD_INT 106
21884: PUSH
21885: LD_INT 116
21887: PUSH
21888: LD_INT 117
21890: PUSH
21891: LD_INT 118
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: ST_TO_ADDR
21906: GO 24981
21908: LD_INT 2
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 22000
21916: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21917: LD_ADDR_VAR 0 2
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: LD_INT 4
21927: PUSH
21928: LD_INT 11
21930: PUSH
21931: LD_INT 12
21933: PUSH
21934: LD_INT 15
21936: PUSH
21937: LD_INT 16
21939: PUSH
21940: LD_INT 22
21942: PUSH
21943: LD_INT 23
21945: PUSH
21946: LD_INT 26
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 101
21962: PUSH
21963: LD_INT 102
21965: PUSH
21966: LD_INT 105
21968: PUSH
21969: LD_INT 106
21971: PUSH
21972: LD_INT 108
21974: PUSH
21975: LD_INT 116
21977: PUSH
21978: LD_INT 117
21980: PUSH
21981: LD_INT 118
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: ST_TO_ADDR
21998: GO 24981
22000: LD_INT 3
22002: DOUBLE
22003: EQUAL
22004: IFTRUE 22008
22006: GO 22096
22008: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22009: LD_ADDR_VAR 0 2
22013: PUSH
22014: LD_INT 2
22016: PUSH
22017: LD_INT 4
22019: PUSH
22020: LD_INT 5
22022: PUSH
22023: LD_INT 11
22025: PUSH
22026: LD_INT 12
22028: PUSH
22029: LD_INT 15
22031: PUSH
22032: LD_INT 16
22034: PUSH
22035: LD_INT 22
22037: PUSH
22038: LD_INT 26
22040: PUSH
22041: LD_INT 36
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 101
22058: PUSH
22059: LD_INT 102
22061: PUSH
22062: LD_INT 105
22064: PUSH
22065: LD_INT 106
22067: PUSH
22068: LD_INT 108
22070: PUSH
22071: LD_INT 116
22073: PUSH
22074: LD_INT 117
22076: PUSH
22077: LD_INT 118
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: ST_TO_ADDR
22094: GO 24981
22096: LD_INT 4
22098: DOUBLE
22099: EQUAL
22100: IFTRUE 22104
22102: GO 22200
22104: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22105: LD_ADDR_VAR 0 2
22109: PUSH
22110: LD_INT 2
22112: PUSH
22113: LD_INT 4
22115: PUSH
22116: LD_INT 5
22118: PUSH
22119: LD_INT 8
22121: PUSH
22122: LD_INT 11
22124: PUSH
22125: LD_INT 12
22127: PUSH
22128: LD_INT 15
22130: PUSH
22131: LD_INT 16
22133: PUSH
22134: LD_INT 22
22136: PUSH
22137: LD_INT 23
22139: PUSH
22140: LD_INT 26
22142: PUSH
22143: LD_INT 36
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 101
22162: PUSH
22163: LD_INT 102
22165: PUSH
22166: LD_INT 105
22168: PUSH
22169: LD_INT 106
22171: PUSH
22172: LD_INT 108
22174: PUSH
22175: LD_INT 116
22177: PUSH
22178: LD_INT 117
22180: PUSH
22181: LD_INT 118
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: ST_TO_ADDR
22198: GO 24981
22200: LD_INT 5
22202: DOUBLE
22203: EQUAL
22204: IFTRUE 22208
22206: GO 22320
22208: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22209: LD_ADDR_VAR 0 2
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: LD_INT 4
22219: PUSH
22220: LD_INT 5
22222: PUSH
22223: LD_INT 6
22225: PUSH
22226: LD_INT 8
22228: PUSH
22229: LD_INT 11
22231: PUSH
22232: LD_INT 12
22234: PUSH
22235: LD_INT 15
22237: PUSH
22238: LD_INT 16
22240: PUSH
22241: LD_INT 22
22243: PUSH
22244: LD_INT 23
22246: PUSH
22247: LD_INT 25
22249: PUSH
22250: LD_INT 26
22252: PUSH
22253: LD_INT 36
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 101
22274: PUSH
22275: LD_INT 102
22277: PUSH
22278: LD_INT 105
22280: PUSH
22281: LD_INT 106
22283: PUSH
22284: LD_INT 108
22286: PUSH
22287: LD_INT 109
22289: PUSH
22290: LD_INT 112
22292: PUSH
22293: LD_INT 116
22295: PUSH
22296: LD_INT 117
22298: PUSH
22299: LD_INT 118
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: ST_TO_ADDR
22318: GO 24981
22320: LD_INT 6
22322: DOUBLE
22323: EQUAL
22324: IFTRUE 22328
22326: GO 22460
22328: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22329: LD_ADDR_VAR 0 2
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 4
22339: PUSH
22340: LD_INT 5
22342: PUSH
22343: LD_INT 6
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 11
22351: PUSH
22352: LD_INT 12
22354: PUSH
22355: LD_INT 15
22357: PUSH
22358: LD_INT 16
22360: PUSH
22361: LD_INT 20
22363: PUSH
22364: LD_INT 21
22366: PUSH
22367: LD_INT 22
22369: PUSH
22370: LD_INT 23
22372: PUSH
22373: LD_INT 25
22375: PUSH
22376: LD_INT 26
22378: PUSH
22379: LD_INT 30
22381: PUSH
22382: LD_INT 31
22384: PUSH
22385: LD_INT 32
22387: PUSH
22388: LD_INT 36
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 101
22414: PUSH
22415: LD_INT 102
22417: PUSH
22418: LD_INT 105
22420: PUSH
22421: LD_INT 106
22423: PUSH
22424: LD_INT 108
22426: PUSH
22427: LD_INT 109
22429: PUSH
22430: LD_INT 112
22432: PUSH
22433: LD_INT 116
22435: PUSH
22436: LD_INT 117
22438: PUSH
22439: LD_INT 118
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: ST_TO_ADDR
22458: GO 24981
22460: LD_INT 7
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22580
22468: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 4
22479: PUSH
22480: LD_INT 5
22482: PUSH
22483: LD_INT 7
22485: PUSH
22486: LD_INT 11
22488: PUSH
22489: LD_INT 12
22491: PUSH
22492: LD_INT 15
22494: PUSH
22495: LD_INT 16
22497: PUSH
22498: LD_INT 20
22500: PUSH
22501: LD_INT 21
22503: PUSH
22504: LD_INT 22
22506: PUSH
22507: LD_INT 23
22509: PUSH
22510: LD_INT 25
22512: PUSH
22513: LD_INT 26
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 101
22534: PUSH
22535: LD_INT 102
22537: PUSH
22538: LD_INT 103
22540: PUSH
22541: LD_INT 105
22543: PUSH
22544: LD_INT 106
22546: PUSH
22547: LD_INT 108
22549: PUSH
22550: LD_INT 112
22552: PUSH
22553: LD_INT 116
22555: PUSH
22556: LD_INT 117
22558: PUSH
22559: LD_INT 118
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: ST_TO_ADDR
22578: GO 24981
22580: LD_INT 8
22582: DOUBLE
22583: EQUAL
22584: IFTRUE 22588
22586: GO 22728
22588: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22589: LD_ADDR_VAR 0 2
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 4
22599: PUSH
22600: LD_INT 5
22602: PUSH
22603: LD_INT 6
22605: PUSH
22606: LD_INT 7
22608: PUSH
22609: LD_INT 8
22611: PUSH
22612: LD_INT 11
22614: PUSH
22615: LD_INT 12
22617: PUSH
22618: LD_INT 15
22620: PUSH
22621: LD_INT 16
22623: PUSH
22624: LD_INT 20
22626: PUSH
22627: LD_INT 21
22629: PUSH
22630: LD_INT 22
22632: PUSH
22633: LD_INT 23
22635: PUSH
22636: LD_INT 25
22638: PUSH
22639: LD_INT 26
22641: PUSH
22642: LD_INT 30
22644: PUSH
22645: LD_INT 31
22647: PUSH
22648: LD_INT 32
22650: PUSH
22651: LD_INT 36
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 101
22678: PUSH
22679: LD_INT 102
22681: PUSH
22682: LD_INT 103
22684: PUSH
22685: LD_INT 105
22687: PUSH
22688: LD_INT 106
22690: PUSH
22691: LD_INT 108
22693: PUSH
22694: LD_INT 109
22696: PUSH
22697: LD_INT 112
22699: PUSH
22700: LD_INT 116
22702: PUSH
22703: LD_INT 117
22705: PUSH
22706: LD_INT 118
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: ST_TO_ADDR
22726: GO 24981
22728: LD_INT 9
22730: DOUBLE
22731: EQUAL
22732: IFTRUE 22736
22734: GO 22884
22736: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22737: LD_ADDR_VAR 0 2
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: LD_INT 4
22747: PUSH
22748: LD_INT 5
22750: PUSH
22751: LD_INT 6
22753: PUSH
22754: LD_INT 7
22756: PUSH
22757: LD_INT 8
22759: PUSH
22760: LD_INT 11
22762: PUSH
22763: LD_INT 12
22765: PUSH
22766: LD_INT 15
22768: PUSH
22769: LD_INT 16
22771: PUSH
22772: LD_INT 20
22774: PUSH
22775: LD_INT 21
22777: PUSH
22778: LD_INT 22
22780: PUSH
22781: LD_INT 23
22783: PUSH
22784: LD_INT 25
22786: PUSH
22787: LD_INT 26
22789: PUSH
22790: LD_INT 28
22792: PUSH
22793: LD_INT 30
22795: PUSH
22796: LD_INT 31
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: LD_INT 36
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 101
22830: PUSH
22831: LD_INT 102
22833: PUSH
22834: LD_INT 103
22836: PUSH
22837: LD_INT 105
22839: PUSH
22840: LD_INT 106
22842: PUSH
22843: LD_INT 108
22845: PUSH
22846: LD_INT 109
22848: PUSH
22849: LD_INT 112
22851: PUSH
22852: LD_INT 114
22854: PUSH
22855: LD_INT 116
22857: PUSH
22858: LD_INT 117
22860: PUSH
22861: LD_INT 118
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: ST_TO_ADDR
22882: GO 24981
22884: LD_INT 10
22886: DOUBLE
22887: EQUAL
22888: IFTRUE 22892
22890: GO 23088
22892: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22893: LD_ADDR_VAR 0 2
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: LD_INT 4
22903: PUSH
22904: LD_INT 5
22906: PUSH
22907: LD_INT 6
22909: PUSH
22910: LD_INT 7
22912: PUSH
22913: LD_INT 8
22915: PUSH
22916: LD_INT 9
22918: PUSH
22919: LD_INT 10
22921: PUSH
22922: LD_INT 11
22924: PUSH
22925: LD_INT 12
22927: PUSH
22928: LD_INT 13
22930: PUSH
22931: LD_INT 14
22933: PUSH
22934: LD_INT 15
22936: PUSH
22937: LD_INT 16
22939: PUSH
22940: LD_INT 17
22942: PUSH
22943: LD_INT 18
22945: PUSH
22946: LD_INT 19
22948: PUSH
22949: LD_INT 20
22951: PUSH
22952: LD_INT 21
22954: PUSH
22955: LD_INT 22
22957: PUSH
22958: LD_INT 23
22960: PUSH
22961: LD_INT 24
22963: PUSH
22964: LD_INT 25
22966: PUSH
22967: LD_INT 26
22969: PUSH
22970: LD_INT 28
22972: PUSH
22973: LD_INT 30
22975: PUSH
22976: LD_INT 31
22978: PUSH
22979: LD_INT 32
22981: PUSH
22982: LD_INT 36
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 101
23018: PUSH
23019: LD_INT 102
23021: PUSH
23022: LD_INT 103
23024: PUSH
23025: LD_INT 104
23027: PUSH
23028: LD_INT 105
23030: PUSH
23031: LD_INT 106
23033: PUSH
23034: LD_INT 107
23036: PUSH
23037: LD_INT 108
23039: PUSH
23040: LD_INT 109
23042: PUSH
23043: LD_INT 110
23045: PUSH
23046: LD_INT 111
23048: PUSH
23049: LD_INT 112
23051: PUSH
23052: LD_INT 114
23054: PUSH
23055: LD_INT 116
23057: PUSH
23058: LD_INT 117
23060: PUSH
23061: LD_INT 118
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: ST_TO_ADDR
23086: GO 24981
23088: LD_INT 11
23090: DOUBLE
23091: EQUAL
23092: IFTRUE 23096
23094: GO 23300
23096: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23097: LD_ADDR_VAR 0 2
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: LD_INT 3
23107: PUSH
23108: LD_INT 4
23110: PUSH
23111: LD_INT 5
23113: PUSH
23114: LD_INT 6
23116: PUSH
23117: LD_INT 7
23119: PUSH
23120: LD_INT 8
23122: PUSH
23123: LD_INT 9
23125: PUSH
23126: LD_INT 10
23128: PUSH
23129: LD_INT 11
23131: PUSH
23132: LD_INT 12
23134: PUSH
23135: LD_INT 13
23137: PUSH
23138: LD_INT 14
23140: PUSH
23141: LD_INT 15
23143: PUSH
23144: LD_INT 16
23146: PUSH
23147: LD_INT 17
23149: PUSH
23150: LD_INT 18
23152: PUSH
23153: LD_INT 19
23155: PUSH
23156: LD_INT 20
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 22
23164: PUSH
23165: LD_INT 23
23167: PUSH
23168: LD_INT 24
23170: PUSH
23171: LD_INT 25
23173: PUSH
23174: LD_INT 26
23176: PUSH
23177: LD_INT 28
23179: PUSH
23180: LD_INT 30
23182: PUSH
23183: LD_INT 31
23185: PUSH
23186: LD_INT 32
23188: PUSH
23189: LD_INT 34
23191: PUSH
23192: LD_INT 36
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 101
23230: PUSH
23231: LD_INT 102
23233: PUSH
23234: LD_INT 103
23236: PUSH
23237: LD_INT 104
23239: PUSH
23240: LD_INT 105
23242: PUSH
23243: LD_INT 106
23245: PUSH
23246: LD_INT 107
23248: PUSH
23249: LD_INT 108
23251: PUSH
23252: LD_INT 109
23254: PUSH
23255: LD_INT 110
23257: PUSH
23258: LD_INT 111
23260: PUSH
23261: LD_INT 112
23263: PUSH
23264: LD_INT 114
23266: PUSH
23267: LD_INT 116
23269: PUSH
23270: LD_INT 117
23272: PUSH
23273: LD_INT 118
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: ST_TO_ADDR
23298: GO 24981
23300: LD_INT 12
23302: DOUBLE
23303: EQUAL
23304: IFTRUE 23308
23306: GO 23528
23308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23309: LD_ADDR_VAR 0 2
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 3
23322: PUSH
23323: LD_INT 4
23325: PUSH
23326: LD_INT 5
23328: PUSH
23329: LD_INT 6
23331: PUSH
23332: LD_INT 7
23334: PUSH
23335: LD_INT 8
23337: PUSH
23338: LD_INT 9
23340: PUSH
23341: LD_INT 10
23343: PUSH
23344: LD_INT 11
23346: PUSH
23347: LD_INT 12
23349: PUSH
23350: LD_INT 13
23352: PUSH
23353: LD_INT 14
23355: PUSH
23356: LD_INT 15
23358: PUSH
23359: LD_INT 16
23361: PUSH
23362: LD_INT 17
23364: PUSH
23365: LD_INT 18
23367: PUSH
23368: LD_INT 19
23370: PUSH
23371: LD_INT 20
23373: PUSH
23374: LD_INT 21
23376: PUSH
23377: LD_INT 22
23379: PUSH
23380: LD_INT 23
23382: PUSH
23383: LD_INT 24
23385: PUSH
23386: LD_INT 25
23388: PUSH
23389: LD_INT 26
23391: PUSH
23392: LD_INT 27
23394: PUSH
23395: LD_INT 28
23397: PUSH
23398: LD_INT 30
23400: PUSH
23401: LD_INT 31
23403: PUSH
23404: LD_INT 32
23406: PUSH
23407: LD_INT 33
23409: PUSH
23410: LD_INT 34
23412: PUSH
23413: LD_INT 36
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 101
23454: PUSH
23455: LD_INT 102
23457: PUSH
23458: LD_INT 103
23460: PUSH
23461: LD_INT 104
23463: PUSH
23464: LD_INT 105
23466: PUSH
23467: LD_INT 106
23469: PUSH
23470: LD_INT 107
23472: PUSH
23473: LD_INT 108
23475: PUSH
23476: LD_INT 109
23478: PUSH
23479: LD_INT 110
23481: PUSH
23482: LD_INT 111
23484: PUSH
23485: LD_INT 112
23487: PUSH
23488: LD_INT 113
23490: PUSH
23491: LD_INT 114
23493: PUSH
23494: LD_INT 116
23496: PUSH
23497: LD_INT 117
23499: PUSH
23500: LD_INT 118
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: ST_TO_ADDR
23526: GO 24981
23528: LD_INT 13
23530: DOUBLE
23531: EQUAL
23532: IFTRUE 23536
23534: GO 23744
23536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23537: LD_ADDR_VAR 0 2
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: LD_INT 4
23553: PUSH
23554: LD_INT 5
23556: PUSH
23557: LD_INT 8
23559: PUSH
23560: LD_INT 9
23562: PUSH
23563: LD_INT 10
23565: PUSH
23566: LD_INT 11
23568: PUSH
23569: LD_INT 12
23571: PUSH
23572: LD_INT 14
23574: PUSH
23575: LD_INT 15
23577: PUSH
23578: LD_INT 16
23580: PUSH
23581: LD_INT 17
23583: PUSH
23584: LD_INT 18
23586: PUSH
23587: LD_INT 19
23589: PUSH
23590: LD_INT 20
23592: PUSH
23593: LD_INT 21
23595: PUSH
23596: LD_INT 22
23598: PUSH
23599: LD_INT 23
23601: PUSH
23602: LD_INT 24
23604: PUSH
23605: LD_INT 25
23607: PUSH
23608: LD_INT 26
23610: PUSH
23611: LD_INT 27
23613: PUSH
23614: LD_INT 28
23616: PUSH
23617: LD_INT 30
23619: PUSH
23620: LD_INT 31
23622: PUSH
23623: LD_INT 32
23625: PUSH
23626: LD_INT 33
23628: PUSH
23629: LD_INT 34
23631: PUSH
23632: LD_INT 36
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 101
23670: PUSH
23671: LD_INT 102
23673: PUSH
23674: LD_INT 103
23676: PUSH
23677: LD_INT 104
23679: PUSH
23680: LD_INT 105
23682: PUSH
23683: LD_INT 106
23685: PUSH
23686: LD_INT 107
23688: PUSH
23689: LD_INT 108
23691: PUSH
23692: LD_INT 109
23694: PUSH
23695: LD_INT 110
23697: PUSH
23698: LD_INT 111
23700: PUSH
23701: LD_INT 112
23703: PUSH
23704: LD_INT 113
23706: PUSH
23707: LD_INT 114
23709: PUSH
23710: LD_INT 116
23712: PUSH
23713: LD_INT 117
23715: PUSH
23716: LD_INT 118
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: ST_TO_ADDR
23742: GO 24981
23744: LD_INT 14
23746: DOUBLE
23747: EQUAL
23748: IFTRUE 23752
23750: GO 23976
23752: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23753: LD_ADDR_VAR 0 2
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: LD_INT 3
23766: PUSH
23767: LD_INT 4
23769: PUSH
23770: LD_INT 5
23772: PUSH
23773: LD_INT 6
23775: PUSH
23776: LD_INT 7
23778: PUSH
23779: LD_INT 8
23781: PUSH
23782: LD_INT 9
23784: PUSH
23785: LD_INT 10
23787: PUSH
23788: LD_INT 11
23790: PUSH
23791: LD_INT 12
23793: PUSH
23794: LD_INT 13
23796: PUSH
23797: LD_INT 14
23799: PUSH
23800: LD_INT 15
23802: PUSH
23803: LD_INT 16
23805: PUSH
23806: LD_INT 17
23808: PUSH
23809: LD_INT 18
23811: PUSH
23812: LD_INT 19
23814: PUSH
23815: LD_INT 20
23817: PUSH
23818: LD_INT 21
23820: PUSH
23821: LD_INT 22
23823: PUSH
23824: LD_INT 23
23826: PUSH
23827: LD_INT 24
23829: PUSH
23830: LD_INT 25
23832: PUSH
23833: LD_INT 26
23835: PUSH
23836: LD_INT 27
23838: PUSH
23839: LD_INT 28
23841: PUSH
23842: LD_INT 29
23844: PUSH
23845: LD_INT 30
23847: PUSH
23848: LD_INT 31
23850: PUSH
23851: LD_INT 32
23853: PUSH
23854: LD_INT 33
23856: PUSH
23857: LD_INT 34
23859: PUSH
23860: LD_INT 36
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 101
23902: PUSH
23903: LD_INT 102
23905: PUSH
23906: LD_INT 103
23908: PUSH
23909: LD_INT 104
23911: PUSH
23912: LD_INT 105
23914: PUSH
23915: LD_INT 106
23917: PUSH
23918: LD_INT 107
23920: PUSH
23921: LD_INT 108
23923: PUSH
23924: LD_INT 109
23926: PUSH
23927: LD_INT 110
23929: PUSH
23930: LD_INT 111
23932: PUSH
23933: LD_INT 112
23935: PUSH
23936: LD_INT 113
23938: PUSH
23939: LD_INT 114
23941: PUSH
23942: LD_INT 116
23944: PUSH
23945: LD_INT 117
23947: PUSH
23948: LD_INT 118
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: ST_TO_ADDR
23974: GO 24981
23976: LD_INT 15
23978: DOUBLE
23979: EQUAL
23980: IFTRUE 23984
23982: GO 24208
23984: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23985: LD_ADDR_VAR 0 2
23989: PUSH
23990: LD_INT 1
23992: PUSH
23993: LD_INT 2
23995: PUSH
23996: LD_INT 3
23998: PUSH
23999: LD_INT 4
24001: PUSH
24002: LD_INT 5
24004: PUSH
24005: LD_INT 6
24007: PUSH
24008: LD_INT 7
24010: PUSH
24011: LD_INT 8
24013: PUSH
24014: LD_INT 9
24016: PUSH
24017: LD_INT 10
24019: PUSH
24020: LD_INT 11
24022: PUSH
24023: LD_INT 12
24025: PUSH
24026: LD_INT 13
24028: PUSH
24029: LD_INT 14
24031: PUSH
24032: LD_INT 15
24034: PUSH
24035: LD_INT 16
24037: PUSH
24038: LD_INT 17
24040: PUSH
24041: LD_INT 18
24043: PUSH
24044: LD_INT 19
24046: PUSH
24047: LD_INT 20
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 22
24055: PUSH
24056: LD_INT 23
24058: PUSH
24059: LD_INT 24
24061: PUSH
24062: LD_INT 25
24064: PUSH
24065: LD_INT 26
24067: PUSH
24068: LD_INT 27
24070: PUSH
24071: LD_INT 28
24073: PUSH
24074: LD_INT 29
24076: PUSH
24077: LD_INT 30
24079: PUSH
24080: LD_INT 31
24082: PUSH
24083: LD_INT 32
24085: PUSH
24086: LD_INT 33
24088: PUSH
24089: LD_INT 34
24091: PUSH
24092: LD_INT 36
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 101
24134: PUSH
24135: LD_INT 102
24137: PUSH
24138: LD_INT 103
24140: PUSH
24141: LD_INT 104
24143: PUSH
24144: LD_INT 105
24146: PUSH
24147: LD_INT 106
24149: PUSH
24150: LD_INT 107
24152: PUSH
24153: LD_INT 108
24155: PUSH
24156: LD_INT 109
24158: PUSH
24159: LD_INT 110
24161: PUSH
24162: LD_INT 111
24164: PUSH
24165: LD_INT 112
24167: PUSH
24168: LD_INT 113
24170: PUSH
24171: LD_INT 114
24173: PUSH
24174: LD_INT 116
24176: PUSH
24177: LD_INT 117
24179: PUSH
24180: LD_INT 118
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: ST_TO_ADDR
24206: GO 24981
24208: LD_INT 16
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24352
24216: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24217: LD_ADDR_VAR 0 2
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: LD_INT 4
24227: PUSH
24228: LD_INT 5
24230: PUSH
24231: LD_INT 7
24233: PUSH
24234: LD_INT 11
24236: PUSH
24237: LD_INT 12
24239: PUSH
24240: LD_INT 15
24242: PUSH
24243: LD_INT 16
24245: PUSH
24246: LD_INT 20
24248: PUSH
24249: LD_INT 21
24251: PUSH
24252: LD_INT 22
24254: PUSH
24255: LD_INT 23
24257: PUSH
24258: LD_INT 25
24260: PUSH
24261: LD_INT 26
24263: PUSH
24264: LD_INT 30
24266: PUSH
24267: LD_INT 31
24269: PUSH
24270: LD_INT 32
24272: PUSH
24273: LD_INT 33
24275: PUSH
24276: LD_INT 34
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 101
24302: PUSH
24303: LD_INT 102
24305: PUSH
24306: LD_INT 103
24308: PUSH
24309: LD_INT 106
24311: PUSH
24312: LD_INT 108
24314: PUSH
24315: LD_INT 112
24317: PUSH
24318: LD_INT 113
24320: PUSH
24321: LD_INT 114
24323: PUSH
24324: LD_INT 116
24326: PUSH
24327: LD_INT 117
24329: PUSH
24330: LD_INT 118
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: ST_TO_ADDR
24350: GO 24981
24352: LD_INT 17
24354: DOUBLE
24355: EQUAL
24356: IFTRUE 24360
24358: GO 24584
24360: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24361: LD_ADDR_VAR 0 2
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 3
24374: PUSH
24375: LD_INT 4
24377: PUSH
24378: LD_INT 5
24380: PUSH
24381: LD_INT 6
24383: PUSH
24384: LD_INT 7
24386: PUSH
24387: LD_INT 8
24389: PUSH
24390: LD_INT 9
24392: PUSH
24393: LD_INT 10
24395: PUSH
24396: LD_INT 11
24398: PUSH
24399: LD_INT 12
24401: PUSH
24402: LD_INT 13
24404: PUSH
24405: LD_INT 14
24407: PUSH
24408: LD_INT 15
24410: PUSH
24411: LD_INT 16
24413: PUSH
24414: LD_INT 17
24416: PUSH
24417: LD_INT 18
24419: PUSH
24420: LD_INT 19
24422: PUSH
24423: LD_INT 20
24425: PUSH
24426: LD_INT 21
24428: PUSH
24429: LD_INT 22
24431: PUSH
24432: LD_INT 23
24434: PUSH
24435: LD_INT 24
24437: PUSH
24438: LD_INT 25
24440: PUSH
24441: LD_INT 26
24443: PUSH
24444: LD_INT 27
24446: PUSH
24447: LD_INT 28
24449: PUSH
24450: LD_INT 29
24452: PUSH
24453: LD_INT 30
24455: PUSH
24456: LD_INT 31
24458: PUSH
24459: LD_INT 32
24461: PUSH
24462: LD_INT 33
24464: PUSH
24465: LD_INT 34
24467: PUSH
24468: LD_INT 36
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 101
24510: PUSH
24511: LD_INT 102
24513: PUSH
24514: LD_INT 103
24516: PUSH
24517: LD_INT 104
24519: PUSH
24520: LD_INT 105
24522: PUSH
24523: LD_INT 106
24525: PUSH
24526: LD_INT 107
24528: PUSH
24529: LD_INT 108
24531: PUSH
24532: LD_INT 109
24534: PUSH
24535: LD_INT 110
24537: PUSH
24538: LD_INT 111
24540: PUSH
24541: LD_INT 112
24543: PUSH
24544: LD_INT 113
24546: PUSH
24547: LD_INT 114
24549: PUSH
24550: LD_INT 116
24552: PUSH
24553: LD_INT 117
24555: PUSH
24556: LD_INT 118
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: ST_TO_ADDR
24582: GO 24981
24584: LD_INT 18
24586: DOUBLE
24587: EQUAL
24588: IFTRUE 24592
24590: GO 24740
24592: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24593: LD_ADDR_VAR 0 2
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 4
24603: PUSH
24604: LD_INT 5
24606: PUSH
24607: LD_INT 7
24609: PUSH
24610: LD_INT 11
24612: PUSH
24613: LD_INT 12
24615: PUSH
24616: LD_INT 15
24618: PUSH
24619: LD_INT 16
24621: PUSH
24622: LD_INT 20
24624: PUSH
24625: LD_INT 21
24627: PUSH
24628: LD_INT 22
24630: PUSH
24631: LD_INT 23
24633: PUSH
24634: LD_INT 25
24636: PUSH
24637: LD_INT 26
24639: PUSH
24640: LD_INT 30
24642: PUSH
24643: LD_INT 31
24645: PUSH
24646: LD_INT 32
24648: PUSH
24649: LD_INT 33
24651: PUSH
24652: LD_INT 34
24654: PUSH
24655: LD_INT 35
24657: PUSH
24658: LD_INT 36
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 101
24686: PUSH
24687: LD_INT 102
24689: PUSH
24690: LD_INT 103
24692: PUSH
24693: LD_INT 106
24695: PUSH
24696: LD_INT 108
24698: PUSH
24699: LD_INT 112
24701: PUSH
24702: LD_INT 113
24704: PUSH
24705: LD_INT 114
24707: PUSH
24708: LD_INT 115
24710: PUSH
24711: LD_INT 116
24713: PUSH
24714: LD_INT 117
24716: PUSH
24717: LD_INT 118
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: ST_TO_ADDR
24738: GO 24981
24740: LD_INT 19
24742: DOUBLE
24743: EQUAL
24744: IFTRUE 24748
24746: GO 24980
24748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24749: LD_ADDR_VAR 0 2
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: LD_INT 3
24762: PUSH
24763: LD_INT 4
24765: PUSH
24766: LD_INT 5
24768: PUSH
24769: LD_INT 6
24771: PUSH
24772: LD_INT 7
24774: PUSH
24775: LD_INT 8
24777: PUSH
24778: LD_INT 9
24780: PUSH
24781: LD_INT 10
24783: PUSH
24784: LD_INT 11
24786: PUSH
24787: LD_INT 12
24789: PUSH
24790: LD_INT 13
24792: PUSH
24793: LD_INT 14
24795: PUSH
24796: LD_INT 15
24798: PUSH
24799: LD_INT 16
24801: PUSH
24802: LD_INT 17
24804: PUSH
24805: LD_INT 18
24807: PUSH
24808: LD_INT 19
24810: PUSH
24811: LD_INT 20
24813: PUSH
24814: LD_INT 21
24816: PUSH
24817: LD_INT 22
24819: PUSH
24820: LD_INT 23
24822: PUSH
24823: LD_INT 24
24825: PUSH
24826: LD_INT 25
24828: PUSH
24829: LD_INT 26
24831: PUSH
24832: LD_INT 27
24834: PUSH
24835: LD_INT 28
24837: PUSH
24838: LD_INT 29
24840: PUSH
24841: LD_INT 30
24843: PUSH
24844: LD_INT 31
24846: PUSH
24847: LD_INT 32
24849: PUSH
24850: LD_INT 33
24852: PUSH
24853: LD_INT 34
24855: PUSH
24856: LD_INT 35
24858: PUSH
24859: LD_INT 36
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 101
24902: PUSH
24903: LD_INT 102
24905: PUSH
24906: LD_INT 103
24908: PUSH
24909: LD_INT 104
24911: PUSH
24912: LD_INT 105
24914: PUSH
24915: LD_INT 106
24917: PUSH
24918: LD_INT 107
24920: PUSH
24921: LD_INT 108
24923: PUSH
24924: LD_INT 109
24926: PUSH
24927: LD_INT 110
24929: PUSH
24930: LD_INT 111
24932: PUSH
24933: LD_INT 112
24935: PUSH
24936: LD_INT 113
24938: PUSH
24939: LD_INT 114
24941: PUSH
24942: LD_INT 115
24944: PUSH
24945: LD_INT 116
24947: PUSH
24948: LD_INT 117
24950: PUSH
24951: LD_INT 118
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: ST_TO_ADDR
24978: GO 24981
24980: POP
// end else
24981: GO 25212
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24983: LD_ADDR_VAR 0 2
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 3
24996: PUSH
24997: LD_INT 4
24999: PUSH
25000: LD_INT 5
25002: PUSH
25003: LD_INT 6
25005: PUSH
25006: LD_INT 7
25008: PUSH
25009: LD_INT 8
25011: PUSH
25012: LD_INT 9
25014: PUSH
25015: LD_INT 10
25017: PUSH
25018: LD_INT 11
25020: PUSH
25021: LD_INT 12
25023: PUSH
25024: LD_INT 13
25026: PUSH
25027: LD_INT 14
25029: PUSH
25030: LD_INT 15
25032: PUSH
25033: LD_INT 16
25035: PUSH
25036: LD_INT 17
25038: PUSH
25039: LD_INT 18
25041: PUSH
25042: LD_INT 19
25044: PUSH
25045: LD_INT 20
25047: PUSH
25048: LD_INT 21
25050: PUSH
25051: LD_INT 22
25053: PUSH
25054: LD_INT 23
25056: PUSH
25057: LD_INT 24
25059: PUSH
25060: LD_INT 25
25062: PUSH
25063: LD_INT 26
25065: PUSH
25066: LD_INT 27
25068: PUSH
25069: LD_INT 28
25071: PUSH
25072: LD_INT 29
25074: PUSH
25075: LD_INT 30
25077: PUSH
25078: LD_INT 31
25080: PUSH
25081: LD_INT 32
25083: PUSH
25084: LD_INT 33
25086: PUSH
25087: LD_INT 34
25089: PUSH
25090: LD_INT 35
25092: PUSH
25093: LD_INT 36
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 101
25136: PUSH
25137: LD_INT 102
25139: PUSH
25140: LD_INT 103
25142: PUSH
25143: LD_INT 104
25145: PUSH
25146: LD_INT 105
25148: PUSH
25149: LD_INT 106
25151: PUSH
25152: LD_INT 107
25154: PUSH
25155: LD_INT 108
25157: PUSH
25158: LD_INT 109
25160: PUSH
25161: LD_INT 110
25163: PUSH
25164: LD_INT 111
25166: PUSH
25167: LD_INT 112
25169: PUSH
25170: LD_INT 113
25172: PUSH
25173: LD_INT 114
25175: PUSH
25176: LD_INT 115
25178: PUSH
25179: LD_INT 116
25181: PUSH
25182: LD_INT 117
25184: PUSH
25185: LD_INT 118
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: ST_TO_ADDR
// if result then
25212: LD_VAR 0 2
25216: IFFALSE 26002
// begin normal :=  ;
25218: LD_ADDR_VAR 0 5
25222: PUSH
25223: LD_STRING 
25225: ST_TO_ADDR
// hardcore :=  ;
25226: LD_ADDR_VAR 0 6
25230: PUSH
25231: LD_STRING 
25233: ST_TO_ADDR
// active :=  ;
25234: LD_ADDR_VAR 0 7
25238: PUSH
25239: LD_STRING 
25241: ST_TO_ADDR
// for i = 1 to normalCounter do
25242: LD_ADDR_VAR 0 8
25246: PUSH
25247: DOUBLE
25248: LD_INT 1
25250: DEC
25251: ST_TO_ADDR
25252: LD_EXP 56
25256: PUSH
25257: FOR_TO
25258: IFFALSE 25359
// begin tmp := 0 ;
25260: LD_ADDR_VAR 0 3
25264: PUSH
25265: LD_STRING 0
25267: ST_TO_ADDR
// if result [ 1 ] then
25268: LD_VAR 0 2
25272: PUSH
25273: LD_INT 1
25275: ARRAY
25276: IFFALSE 25341
// if result [ 1 ] [ 1 ] = i then
25278: LD_VAR 0 2
25282: PUSH
25283: LD_INT 1
25285: ARRAY
25286: PUSH
25287: LD_INT 1
25289: ARRAY
25290: PUSH
25291: LD_VAR 0 8
25295: EQUAL
25296: IFFALSE 25341
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25298: LD_ADDR_VAR 0 2
25302: PUSH
25303: LD_VAR 0 2
25307: PPUSH
25308: LD_INT 1
25310: PPUSH
25311: LD_VAR 0 2
25315: PUSH
25316: LD_INT 1
25318: ARRAY
25319: PPUSH
25320: LD_INT 1
25322: PPUSH
25323: CALL_OW 3
25327: PPUSH
25328: CALL_OW 1
25332: ST_TO_ADDR
// tmp := 1 ;
25333: LD_ADDR_VAR 0 3
25337: PUSH
25338: LD_STRING 1
25340: ST_TO_ADDR
// end ; normal := normal & tmp ;
25341: LD_ADDR_VAR 0 5
25345: PUSH
25346: LD_VAR 0 5
25350: PUSH
25351: LD_VAR 0 3
25355: STR
25356: ST_TO_ADDR
// end ;
25357: GO 25257
25359: POP
25360: POP
// for i = 1 to hardcoreCounter do
25361: LD_ADDR_VAR 0 8
25365: PUSH
25366: DOUBLE
25367: LD_INT 1
25369: DEC
25370: ST_TO_ADDR
25371: LD_EXP 57
25375: PUSH
25376: FOR_TO
25377: IFFALSE 25482
// begin tmp := 0 ;
25379: LD_ADDR_VAR 0 3
25383: PUSH
25384: LD_STRING 0
25386: ST_TO_ADDR
// if result [ 2 ] then
25387: LD_VAR 0 2
25391: PUSH
25392: LD_INT 2
25394: ARRAY
25395: IFFALSE 25464
// if result [ 2 ] [ 1 ] = 100 + i then
25397: LD_VAR 0 2
25401: PUSH
25402: LD_INT 2
25404: ARRAY
25405: PUSH
25406: LD_INT 1
25408: ARRAY
25409: PUSH
25410: LD_INT 100
25412: PUSH
25413: LD_VAR 0 8
25417: PLUS
25418: EQUAL
25419: IFFALSE 25464
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25421: LD_ADDR_VAR 0 2
25425: PUSH
25426: LD_VAR 0 2
25430: PPUSH
25431: LD_INT 2
25433: PPUSH
25434: LD_VAR 0 2
25438: PUSH
25439: LD_INT 2
25441: ARRAY
25442: PPUSH
25443: LD_INT 1
25445: PPUSH
25446: CALL_OW 3
25450: PPUSH
25451: CALL_OW 1
25455: ST_TO_ADDR
// tmp := 1 ;
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_STRING 1
25463: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25464: LD_ADDR_VAR 0 6
25468: PUSH
25469: LD_VAR 0 6
25473: PUSH
25474: LD_VAR 0 3
25478: STR
25479: ST_TO_ADDR
// end ;
25480: GO 25376
25482: POP
25483: POP
// if isGameLoad then
25484: LD_VAR 0 1
25488: IFFALSE 25963
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25490: LD_ADDR_VAR 0 4
25494: PUSH
25495: LD_EXP 60
25499: PUSH
25500: LD_EXP 59
25504: PUSH
25505: LD_EXP 61
25509: PUSH
25510: LD_EXP 58
25514: PUSH
25515: LD_EXP 62
25519: PUSH
25520: LD_EXP 63
25524: PUSH
25525: LD_EXP 64
25529: PUSH
25530: LD_EXP 65
25534: PUSH
25535: LD_EXP 66
25539: PUSH
25540: LD_EXP 67
25544: PUSH
25545: LD_EXP 68
25549: PUSH
25550: LD_EXP 69
25554: PUSH
25555: LD_EXP 70
25559: PUSH
25560: LD_EXP 71
25564: PUSH
25565: LD_EXP 79
25569: PUSH
25570: LD_EXP 80
25574: PUSH
25575: LD_EXP 81
25579: PUSH
25580: LD_EXP 82
25584: PUSH
25585: LD_EXP 84
25589: PUSH
25590: LD_EXP 85
25594: PUSH
25595: LD_EXP 86
25599: PUSH
25600: LD_EXP 89
25604: PUSH
25605: LD_EXP 91
25609: PUSH
25610: LD_EXP 92
25614: PUSH
25615: LD_EXP 93
25619: PUSH
25620: LD_EXP 95
25624: PUSH
25625: LD_EXP 96
25629: PUSH
25630: LD_EXP 99
25634: PUSH
25635: LD_EXP 100
25639: PUSH
25640: LD_EXP 101
25644: PUSH
25645: LD_EXP 102
25649: PUSH
25650: LD_EXP 103
25654: PUSH
25655: LD_EXP 104
25659: PUSH
25660: LD_EXP 105
25664: PUSH
25665: LD_EXP 106
25669: PUSH
25670: LD_EXP 107
25674: PUSH
25675: LD_EXP 72
25679: PUSH
25680: LD_EXP 73
25684: PUSH
25685: LD_EXP 76
25689: PUSH
25690: LD_EXP 77
25694: PUSH
25695: LD_EXP 78
25699: PUSH
25700: LD_EXP 74
25704: PUSH
25705: LD_EXP 75
25709: PUSH
25710: LD_EXP 83
25714: PUSH
25715: LD_EXP 87
25719: PUSH
25720: LD_EXP 88
25724: PUSH
25725: LD_EXP 90
25729: PUSH
25730: LD_EXP 94
25734: PUSH
25735: LD_EXP 97
25739: PUSH
25740: LD_EXP 98
25744: PUSH
25745: LD_EXP 108
25749: PUSH
25750: LD_EXP 109
25754: PUSH
25755: LD_EXP 110
25759: PUSH
25760: LD_EXP 111
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: ST_TO_ADDR
// tmp :=  ;
25821: LD_ADDR_VAR 0 3
25825: PUSH
25826: LD_STRING 
25828: ST_TO_ADDR
// for i = 1 to normalCounter do
25829: LD_ADDR_VAR 0 8
25833: PUSH
25834: DOUBLE
25835: LD_INT 1
25837: DEC
25838: ST_TO_ADDR
25839: LD_EXP 56
25843: PUSH
25844: FOR_TO
25845: IFFALSE 25881
// begin if flags [ i ] then
25847: LD_VAR 0 4
25851: PUSH
25852: LD_VAR 0 8
25856: ARRAY
25857: IFFALSE 25879
// tmp := tmp & i & ; ;
25859: LD_ADDR_VAR 0 3
25863: PUSH
25864: LD_VAR 0 3
25868: PUSH
25869: LD_VAR 0 8
25873: STR
25874: PUSH
25875: LD_STRING ;
25877: STR
25878: ST_TO_ADDR
// end ;
25879: GO 25844
25881: POP
25882: POP
// for i = 1 to hardcoreCounter do
25883: LD_ADDR_VAR 0 8
25887: PUSH
25888: DOUBLE
25889: LD_INT 1
25891: DEC
25892: ST_TO_ADDR
25893: LD_EXP 57
25897: PUSH
25898: FOR_TO
25899: IFFALSE 25945
// begin if flags [ normalCounter + i ] then
25901: LD_VAR 0 4
25905: PUSH
25906: LD_EXP 56
25910: PUSH
25911: LD_VAR 0 8
25915: PLUS
25916: ARRAY
25917: IFFALSE 25943
// tmp := tmp & ( 100 + i ) & ; ;
25919: LD_ADDR_VAR 0 3
25923: PUSH
25924: LD_VAR 0 3
25928: PUSH
25929: LD_INT 100
25931: PUSH
25932: LD_VAR 0 8
25936: PLUS
25937: STR
25938: PUSH
25939: LD_STRING ;
25941: STR
25942: ST_TO_ADDR
// end ;
25943: GO 25898
25945: POP
25946: POP
// if tmp then
25947: LD_VAR 0 3
25951: IFFALSE 25963
// active := tmp ;
25953: LD_ADDR_VAR 0 7
25957: PUSH
25958: LD_VAR 0 3
25962: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25963: LD_STRING getStreamItemsFromMission("
25965: PUSH
25966: LD_VAR 0 5
25970: STR
25971: PUSH
25972: LD_STRING ","
25974: STR
25975: PUSH
25976: LD_VAR 0 6
25980: STR
25981: PUSH
25982: LD_STRING ","
25984: STR
25985: PUSH
25986: LD_VAR 0 7
25990: STR
25991: PUSH
25992: LD_STRING ")
25994: STR
25995: PPUSH
25996: CALL_OW 559
// end else
26000: GO 26009
// ToLua ( getStreamItemsFromMission("","","") ) ;
26002: LD_STRING getStreamItemsFromMission("","","")
26004: PPUSH
26005: CALL_OW 559
// end ;
26009: LD_VAR 0 2
26013: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26014: LD_EXP 55
26018: PUSH
26019: LD_EXP 60
26023: AND
26024: IFFALSE 26148
26026: GO 26028
26028: DISABLE
26029: LD_INT 0
26031: PPUSH
26032: PPUSH
// begin enable ;
26033: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26034: LD_ADDR_VAR 0 2
26038: PUSH
26039: LD_INT 22
26041: PUSH
26042: LD_OWVAR 2
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: LD_INT 34
26056: PUSH
26057: LD_INT 7
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 34
26066: PUSH
26067: LD_INT 45
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 34
26076: PUSH
26077: LD_INT 28
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 34
26086: PUSH
26087: LD_INT 47
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PPUSH
26105: CALL_OW 69
26109: ST_TO_ADDR
// if not tmp then
26110: LD_VAR 0 2
26114: NOT
26115: IFFALSE 26119
// exit ;
26117: GO 26148
// for i in tmp do
26119: LD_ADDR_VAR 0 1
26123: PUSH
26124: LD_VAR 0 2
26128: PUSH
26129: FOR_IN
26130: IFFALSE 26146
// begin SetLives ( i , 0 ) ;
26132: LD_VAR 0 1
26136: PPUSH
26137: LD_INT 0
26139: PPUSH
26140: CALL_OW 234
// end ;
26144: GO 26129
26146: POP
26147: POP
// end ;
26148: PPOPN 2
26150: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26151: LD_EXP 55
26155: PUSH
26156: LD_EXP 61
26160: AND
26161: IFFALSE 26245
26163: GO 26165
26165: DISABLE
26166: LD_INT 0
26168: PPUSH
26169: PPUSH
// begin enable ;
26170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26171: LD_ADDR_VAR 0 2
26175: PUSH
26176: LD_INT 22
26178: PUSH
26179: LD_OWVAR 2
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 32
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PPUSH
26202: CALL_OW 69
26206: ST_TO_ADDR
// if not tmp then
26207: LD_VAR 0 2
26211: NOT
26212: IFFALSE 26216
// exit ;
26214: GO 26245
// for i in tmp do
26216: LD_ADDR_VAR 0 1
26220: PUSH
26221: LD_VAR 0 2
26225: PUSH
26226: FOR_IN
26227: IFFALSE 26243
// begin SetLives ( i , 0 ) ;
26229: LD_VAR 0 1
26233: PPUSH
26234: LD_INT 0
26236: PPUSH
26237: CALL_OW 234
// end ;
26241: GO 26226
26243: POP
26244: POP
// end ;
26245: PPOPN 2
26247: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26248: LD_EXP 55
26252: PUSH
26253: LD_EXP 58
26257: AND
26258: IFFALSE 26351
26260: GO 26262
26262: DISABLE
26263: LD_INT 0
26265: PPUSH
// begin enable ;
26266: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26267: LD_ADDR_VAR 0 1
26271: PUSH
26272: LD_INT 22
26274: PUSH
26275: LD_OWVAR 2
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: LD_INT 25
26289: PUSH
26290: LD_INT 5
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 25
26299: PUSH
26300: LD_INT 9
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 25
26309: PUSH
26310: LD_INT 8
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PPUSH
26327: CALL_OW 69
26331: PUSH
26332: FOR_IN
26333: IFFALSE 26349
// begin SetClass ( i , 1 ) ;
26335: LD_VAR 0 1
26339: PPUSH
26340: LD_INT 1
26342: PPUSH
26343: CALL_OW 336
// end ;
26347: GO 26332
26349: POP
26350: POP
// end ;
26351: PPOPN 1
26353: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26354: LD_EXP 55
26358: PUSH
26359: LD_EXP 59
26363: AND
26364: PUSH
26365: LD_OWVAR 65
26369: PUSH
26370: LD_INT 7
26372: LESS
26373: AND
26374: IFFALSE 26388
26376: GO 26378
26378: DISABLE
// begin enable ;
26379: ENABLE
// game_speed := 7 ;
26380: LD_ADDR_OWVAR 65
26384: PUSH
26385: LD_INT 7
26387: ST_TO_ADDR
// end ;
26388: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26389: LD_EXP 55
26393: PUSH
26394: LD_EXP 62
26398: AND
26399: IFFALSE 26601
26401: GO 26403
26403: DISABLE
26404: LD_INT 0
26406: PPUSH
26407: PPUSH
26408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26409: LD_ADDR_VAR 0 3
26413: PUSH
26414: LD_INT 81
26416: PUSH
26417: LD_OWVAR 2
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 21
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PPUSH
26440: CALL_OW 69
26444: ST_TO_ADDR
// if not tmp then
26445: LD_VAR 0 3
26449: NOT
26450: IFFALSE 26454
// exit ;
26452: GO 26601
// if tmp > 5 then
26454: LD_VAR 0 3
26458: PUSH
26459: LD_INT 5
26461: GREATER
26462: IFFALSE 26474
// k := 5 else
26464: LD_ADDR_VAR 0 2
26468: PUSH
26469: LD_INT 5
26471: ST_TO_ADDR
26472: GO 26484
// k := tmp ;
26474: LD_ADDR_VAR 0 2
26478: PUSH
26479: LD_VAR 0 3
26483: ST_TO_ADDR
// for i := 1 to k do
26484: LD_ADDR_VAR 0 1
26488: PUSH
26489: DOUBLE
26490: LD_INT 1
26492: DEC
26493: ST_TO_ADDR
26494: LD_VAR 0 2
26498: PUSH
26499: FOR_TO
26500: IFFALSE 26599
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26502: LD_VAR 0 3
26506: PUSH
26507: LD_VAR 0 1
26511: ARRAY
26512: PPUSH
26513: LD_VAR 0 1
26517: PUSH
26518: LD_INT 4
26520: MOD
26521: PUSH
26522: LD_INT 1
26524: PLUS
26525: PPUSH
26526: CALL_OW 259
26530: PUSH
26531: LD_INT 10
26533: LESS
26534: IFFALSE 26597
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26536: LD_VAR 0 3
26540: PUSH
26541: LD_VAR 0 1
26545: ARRAY
26546: PPUSH
26547: LD_VAR 0 1
26551: PUSH
26552: LD_INT 4
26554: MOD
26555: PUSH
26556: LD_INT 1
26558: PLUS
26559: PPUSH
26560: LD_VAR 0 3
26564: PUSH
26565: LD_VAR 0 1
26569: ARRAY
26570: PPUSH
26571: LD_VAR 0 1
26575: PUSH
26576: LD_INT 4
26578: MOD
26579: PUSH
26580: LD_INT 1
26582: PLUS
26583: PPUSH
26584: CALL_OW 259
26588: PUSH
26589: LD_INT 1
26591: PLUS
26592: PPUSH
26593: CALL_OW 237
26597: GO 26499
26599: POP
26600: POP
// end ;
26601: PPOPN 3
26603: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26604: LD_EXP 55
26608: PUSH
26609: LD_EXP 63
26613: AND
26614: IFFALSE 26634
26616: GO 26618
26618: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26619: LD_INT 4
26621: PPUSH
26622: LD_OWVAR 2
26626: PPUSH
26627: LD_INT 0
26629: PPUSH
26630: CALL_OW 324
26634: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26635: LD_EXP 55
26639: PUSH
26640: LD_EXP 92
26644: AND
26645: IFFALSE 26665
26647: GO 26649
26649: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26650: LD_INT 19
26652: PPUSH
26653: LD_OWVAR 2
26657: PPUSH
26658: LD_INT 0
26660: PPUSH
26661: CALL_OW 324
26665: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26666: LD_EXP 55
26670: PUSH
26671: LD_EXP 64
26675: AND
26676: IFFALSE 26778
26678: GO 26680
26680: DISABLE
26681: LD_INT 0
26683: PPUSH
26684: PPUSH
// begin enable ;
26685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26686: LD_ADDR_VAR 0 2
26690: PUSH
26691: LD_INT 22
26693: PUSH
26694: LD_OWVAR 2
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 34
26708: PUSH
26709: LD_INT 11
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 34
26718: PUSH
26719: LD_INT 30
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PPUSH
26735: CALL_OW 69
26739: ST_TO_ADDR
// if not tmp then
26740: LD_VAR 0 2
26744: NOT
26745: IFFALSE 26749
// exit ;
26747: GO 26778
// for i in tmp do
26749: LD_ADDR_VAR 0 1
26753: PUSH
26754: LD_VAR 0 2
26758: PUSH
26759: FOR_IN
26760: IFFALSE 26776
// begin SetLives ( i , 0 ) ;
26762: LD_VAR 0 1
26766: PPUSH
26767: LD_INT 0
26769: PPUSH
26770: CALL_OW 234
// end ;
26774: GO 26759
26776: POP
26777: POP
// end ;
26778: PPOPN 2
26780: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26781: LD_EXP 55
26785: PUSH
26786: LD_EXP 65
26790: AND
26791: IFFALSE 26811
26793: GO 26795
26795: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26796: LD_INT 32
26798: PPUSH
26799: LD_OWVAR 2
26803: PPUSH
26804: LD_INT 0
26806: PPUSH
26807: CALL_OW 324
26811: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26812: LD_EXP 55
26816: PUSH
26817: LD_EXP 66
26821: AND
26822: IFFALSE 27003
26824: GO 26826
26826: DISABLE
26827: LD_INT 0
26829: PPUSH
26830: PPUSH
26831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26832: LD_ADDR_VAR 0 2
26836: PUSH
26837: LD_INT 22
26839: PUSH
26840: LD_OWVAR 2
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 33
26851: PUSH
26852: LD_INT 3
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PPUSH
26863: CALL_OW 69
26867: ST_TO_ADDR
// if not tmp then
26868: LD_VAR 0 2
26872: NOT
26873: IFFALSE 26877
// exit ;
26875: GO 27003
// side := 0 ;
26877: LD_ADDR_VAR 0 3
26881: PUSH
26882: LD_INT 0
26884: ST_TO_ADDR
// for i := 1 to 8 do
26885: LD_ADDR_VAR 0 1
26889: PUSH
26890: DOUBLE
26891: LD_INT 1
26893: DEC
26894: ST_TO_ADDR
26895: LD_INT 8
26897: PUSH
26898: FOR_TO
26899: IFFALSE 26947
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26901: LD_OWVAR 2
26905: PUSH
26906: LD_VAR 0 1
26910: NONEQUAL
26911: PUSH
26912: LD_OWVAR 2
26916: PPUSH
26917: LD_VAR 0 1
26921: PPUSH
26922: CALL_OW 81
26926: PUSH
26927: LD_INT 2
26929: EQUAL
26930: AND
26931: IFFALSE 26945
// begin side := i ;
26933: LD_ADDR_VAR 0 3
26937: PUSH
26938: LD_VAR 0 1
26942: ST_TO_ADDR
// break ;
26943: GO 26947
// end ;
26945: GO 26898
26947: POP
26948: POP
// if not side then
26949: LD_VAR 0 3
26953: NOT
26954: IFFALSE 26958
// exit ;
26956: GO 27003
// for i := 1 to tmp do
26958: LD_ADDR_VAR 0 1
26962: PUSH
26963: DOUBLE
26964: LD_INT 1
26966: DEC
26967: ST_TO_ADDR
26968: LD_VAR 0 2
26972: PUSH
26973: FOR_TO
26974: IFFALSE 27001
// if Prob ( 60 ) then
26976: LD_INT 60
26978: PPUSH
26979: CALL_OW 13
26983: IFFALSE 26999
// SetSide ( i , side ) ;
26985: LD_VAR 0 1
26989: PPUSH
26990: LD_VAR 0 3
26994: PPUSH
26995: CALL_OW 235
26999: GO 26973
27001: POP
27002: POP
// end ;
27003: PPOPN 3
27005: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27006: LD_EXP 55
27010: PUSH
27011: LD_EXP 68
27015: AND
27016: IFFALSE 27135
27018: GO 27020
27020: DISABLE
27021: LD_INT 0
27023: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27024: LD_ADDR_VAR 0 1
27028: PUSH
27029: LD_INT 22
27031: PUSH
27032: LD_OWVAR 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 21
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 3
27053: PUSH
27054: LD_INT 23
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: PPUSH
27073: CALL_OW 69
27077: PUSH
27078: FOR_IN
27079: IFFALSE 27133
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 257
27090: PUSH
27091: LD_INT 1
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 3
27099: PUSH
27100: LD_INT 4
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: IN
27109: IFFALSE 27131
// SetClass ( un , rand ( 1 , 4 ) ) ;
27111: LD_VAR 0 1
27115: PPUSH
27116: LD_INT 1
27118: PPUSH
27119: LD_INT 4
27121: PPUSH
27122: CALL_OW 12
27126: PPUSH
27127: CALL_OW 336
27131: GO 27078
27133: POP
27134: POP
// end ;
27135: PPOPN 1
27137: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27138: LD_EXP 55
27142: PUSH
27143: LD_EXP 67
27147: AND
27148: IFFALSE 27227
27150: GO 27152
27152: DISABLE
27153: LD_INT 0
27155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27156: LD_ADDR_VAR 0 1
27160: PUSH
27161: LD_INT 22
27163: PUSH
27164: LD_OWVAR 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 21
27175: PUSH
27176: LD_INT 3
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PPUSH
27187: CALL_OW 69
27191: ST_TO_ADDR
// if not tmp then
27192: LD_VAR 0 1
27196: NOT
27197: IFFALSE 27201
// exit ;
27199: GO 27227
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27201: LD_VAR 0 1
27205: PUSH
27206: LD_INT 1
27208: PPUSH
27209: LD_VAR 0 1
27213: PPUSH
27214: CALL_OW 12
27218: ARRAY
27219: PPUSH
27220: LD_INT 100
27222: PPUSH
27223: CALL_OW 234
// end ;
27227: PPOPN 1
27229: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27230: LD_EXP 55
27234: PUSH
27235: LD_EXP 69
27239: AND
27240: IFFALSE 27338
27242: GO 27244
27244: DISABLE
27245: LD_INT 0
27247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27248: LD_ADDR_VAR 0 1
27252: PUSH
27253: LD_INT 22
27255: PUSH
27256: LD_OWVAR 2
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 21
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PPUSH
27279: CALL_OW 69
27283: ST_TO_ADDR
// if not tmp then
27284: LD_VAR 0 1
27288: NOT
27289: IFFALSE 27293
// exit ;
27291: GO 27338
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27293: LD_VAR 0 1
27297: PUSH
27298: LD_INT 1
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 12
27310: ARRAY
27311: PPUSH
27312: LD_INT 1
27314: PPUSH
27315: LD_INT 4
27317: PPUSH
27318: CALL_OW 12
27322: PPUSH
27323: LD_INT 3000
27325: PPUSH
27326: LD_INT 9000
27328: PPUSH
27329: CALL_OW 12
27333: PPUSH
27334: CALL_OW 492
// end ;
27338: PPOPN 1
27340: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27341: LD_EXP 55
27345: PUSH
27346: LD_EXP 70
27350: AND
27351: IFFALSE 27371
27353: GO 27355
27355: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27356: LD_INT 1
27358: PPUSH
27359: LD_OWVAR 2
27363: PPUSH
27364: LD_INT 0
27366: PPUSH
27367: CALL_OW 324
27371: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27372: LD_EXP 55
27376: PUSH
27377: LD_EXP 71
27381: AND
27382: IFFALSE 27465
27384: GO 27386
27386: DISABLE
27387: LD_INT 0
27389: PPUSH
27390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27391: LD_ADDR_VAR 0 2
27395: PUSH
27396: LD_INT 22
27398: PUSH
27399: LD_OWVAR 2
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 21
27410: PUSH
27411: LD_INT 3
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PPUSH
27422: CALL_OW 69
27426: ST_TO_ADDR
// if not tmp then
27427: LD_VAR 0 2
27431: NOT
27432: IFFALSE 27436
// exit ;
27434: GO 27465
// for i in tmp do
27436: LD_ADDR_VAR 0 1
27440: PUSH
27441: LD_VAR 0 2
27445: PUSH
27446: FOR_IN
27447: IFFALSE 27463
// SetBLevel ( i , 10 ) ;
27449: LD_VAR 0 1
27453: PPUSH
27454: LD_INT 10
27456: PPUSH
27457: CALL_OW 241
27461: GO 27446
27463: POP
27464: POP
// end ;
27465: PPOPN 2
27467: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27468: LD_EXP 55
27472: PUSH
27473: LD_EXP 72
27477: AND
27478: IFFALSE 27589
27480: GO 27482
27482: DISABLE
27483: LD_INT 0
27485: PPUSH
27486: PPUSH
27487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27488: LD_ADDR_VAR 0 3
27492: PUSH
27493: LD_INT 22
27495: PUSH
27496: LD_OWVAR 2
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 25
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PPUSH
27519: CALL_OW 69
27523: ST_TO_ADDR
// if not tmp then
27524: LD_VAR 0 3
27528: NOT
27529: IFFALSE 27533
// exit ;
27531: GO 27589
// un := tmp [ rand ( 1 , tmp ) ] ;
27533: LD_ADDR_VAR 0 2
27537: PUSH
27538: LD_VAR 0 3
27542: PUSH
27543: LD_INT 1
27545: PPUSH
27546: LD_VAR 0 3
27550: PPUSH
27551: CALL_OW 12
27555: ARRAY
27556: ST_TO_ADDR
// if Crawls ( un ) then
27557: LD_VAR 0 2
27561: PPUSH
27562: CALL_OW 318
27566: IFFALSE 27577
// ComWalk ( un ) ;
27568: LD_VAR 0 2
27572: PPUSH
27573: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27577: LD_VAR 0 2
27581: PPUSH
27582: LD_INT 5
27584: PPUSH
27585: CALL_OW 336
// end ;
27589: PPOPN 3
27591: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27592: LD_EXP 55
27596: PUSH
27597: LD_EXP 73
27601: AND
27602: PUSH
27603: LD_OWVAR 67
27607: PUSH
27608: LD_INT 4
27610: LESS
27611: AND
27612: IFFALSE 27631
27614: GO 27616
27616: DISABLE
// begin Difficulty := Difficulty + 1 ;
27617: LD_ADDR_OWVAR 67
27621: PUSH
27622: LD_OWVAR 67
27626: PUSH
27627: LD_INT 1
27629: PLUS
27630: ST_TO_ADDR
// end ;
27631: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27632: LD_EXP 55
27636: PUSH
27637: LD_EXP 74
27641: AND
27642: IFFALSE 27745
27644: GO 27646
27646: DISABLE
27647: LD_INT 0
27649: PPUSH
// begin for i := 1 to 5 do
27650: LD_ADDR_VAR 0 1
27654: PUSH
27655: DOUBLE
27656: LD_INT 1
27658: DEC
27659: ST_TO_ADDR
27660: LD_INT 5
27662: PUSH
27663: FOR_TO
27664: IFFALSE 27743
// begin uc_nation := nation_nature ;
27666: LD_ADDR_OWVAR 21
27670: PUSH
27671: LD_INT 0
27673: ST_TO_ADDR
// uc_side := 0 ;
27674: LD_ADDR_OWVAR 20
27678: PUSH
27679: LD_INT 0
27681: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27682: LD_ADDR_OWVAR 29
27686: PUSH
27687: LD_INT 12
27689: PUSH
27690: LD_INT 12
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: ST_TO_ADDR
// hc_agressivity := 20 ;
27697: LD_ADDR_OWVAR 35
27701: PUSH
27702: LD_INT 20
27704: ST_TO_ADDR
// hc_class := class_tiger ;
27705: LD_ADDR_OWVAR 28
27709: PUSH
27710: LD_INT 14
27712: ST_TO_ADDR
// hc_gallery :=  ;
27713: LD_ADDR_OWVAR 33
27717: PUSH
27718: LD_STRING 
27720: ST_TO_ADDR
// hc_name :=  ;
27721: LD_ADDR_OWVAR 26
27725: PUSH
27726: LD_STRING 
27728: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27729: CALL_OW 44
27733: PPUSH
27734: LD_INT 0
27736: PPUSH
27737: CALL_OW 51
// end ;
27741: GO 27663
27743: POP
27744: POP
// end ;
27745: PPOPN 1
27747: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27748: LD_EXP 55
27752: PUSH
27753: LD_EXP 75
27757: AND
27758: IFFALSE 27767
27760: GO 27762
27762: DISABLE
// StreamSibBomb ;
27763: CALL 27768 0 0
27767: END
// export function StreamSibBomb ; var i , x , y ; begin
27768: LD_INT 0
27770: PPUSH
27771: PPUSH
27772: PPUSH
27773: PPUSH
// result := false ;
27774: LD_ADDR_VAR 0 1
27778: PUSH
27779: LD_INT 0
27781: ST_TO_ADDR
// for i := 1 to 16 do
27782: LD_ADDR_VAR 0 2
27786: PUSH
27787: DOUBLE
27788: LD_INT 1
27790: DEC
27791: ST_TO_ADDR
27792: LD_INT 16
27794: PUSH
27795: FOR_TO
27796: IFFALSE 27995
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27798: LD_ADDR_VAR 0 3
27802: PUSH
27803: LD_INT 10
27805: PUSH
27806: LD_INT 20
27808: PUSH
27809: LD_INT 30
27811: PUSH
27812: LD_INT 40
27814: PUSH
27815: LD_INT 50
27817: PUSH
27818: LD_INT 60
27820: PUSH
27821: LD_INT 70
27823: PUSH
27824: LD_INT 80
27826: PUSH
27827: LD_INT 90
27829: PUSH
27830: LD_INT 100
27832: PUSH
27833: LD_INT 110
27835: PUSH
27836: LD_INT 120
27838: PUSH
27839: LD_INT 130
27841: PUSH
27842: LD_INT 140
27844: PUSH
27845: LD_INT 150
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: PPUSH
27868: LD_INT 15
27870: PPUSH
27871: CALL_OW 12
27875: ARRAY
27876: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27877: LD_ADDR_VAR 0 4
27881: PUSH
27882: LD_INT 10
27884: PUSH
27885: LD_INT 20
27887: PUSH
27888: LD_INT 30
27890: PUSH
27891: LD_INT 40
27893: PUSH
27894: LD_INT 50
27896: PUSH
27897: LD_INT 60
27899: PUSH
27900: LD_INT 70
27902: PUSH
27903: LD_INT 80
27905: PUSH
27906: LD_INT 90
27908: PUSH
27909: LD_INT 100
27911: PUSH
27912: LD_INT 110
27914: PUSH
27915: LD_INT 120
27917: PUSH
27918: LD_INT 130
27920: PUSH
27921: LD_INT 140
27923: PUSH
27924: LD_INT 150
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PPUSH
27947: LD_INT 15
27949: PPUSH
27950: CALL_OW 12
27954: ARRAY
27955: ST_TO_ADDR
// if ValidHex ( x , y ) then
27956: LD_VAR 0 3
27960: PPUSH
27961: LD_VAR 0 4
27965: PPUSH
27966: CALL_OW 488
27970: IFFALSE 27993
// begin result := [ x , y ] ;
27972: LD_ADDR_VAR 0 1
27976: PUSH
27977: LD_VAR 0 3
27981: PUSH
27982: LD_VAR 0 4
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: ST_TO_ADDR
// break ;
27991: GO 27995
// end ; end ;
27993: GO 27795
27995: POP
27996: POP
// if result then
27997: LD_VAR 0 1
28001: IFFALSE 28061
// begin ToLua ( playSibBomb() ) ;
28003: LD_STRING playSibBomb()
28005: PPUSH
28006: CALL_OW 559
// wait ( 0 0$14 ) ;
28010: LD_INT 490
28012: PPUSH
28013: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28017: LD_VAR 0 1
28021: PUSH
28022: LD_INT 1
28024: ARRAY
28025: PPUSH
28026: LD_VAR 0 1
28030: PUSH
28031: LD_INT 2
28033: ARRAY
28034: PPUSH
28035: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28039: LD_VAR 0 1
28043: PUSH
28044: LD_INT 1
28046: ARRAY
28047: PPUSH
28048: LD_VAR 0 1
28052: PUSH
28053: LD_INT 2
28055: ARRAY
28056: PPUSH
28057: CALL_OW 429
// end ; end ;
28061: LD_VAR 0 1
28065: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28066: LD_EXP 55
28070: PUSH
28071: LD_EXP 77
28075: AND
28076: IFFALSE 28088
28078: GO 28080
28080: DISABLE
// YouLost (  ) ;
28081: LD_STRING 
28083: PPUSH
28084: CALL_OW 104
28088: END
// every 0 0$1 trigger StreamModeActive and sFog do
28089: LD_EXP 55
28093: PUSH
28094: LD_EXP 76
28098: AND
28099: IFFALSE 28113
28101: GO 28103
28103: DISABLE
// FogOff ( your_side ) ;
28104: LD_OWVAR 2
28108: PPUSH
28109: CALL_OW 344
28113: END
// every 0 0$1 trigger StreamModeActive and sSun do
28114: LD_EXP 55
28118: PUSH
28119: LD_EXP 78
28123: AND
28124: IFFALSE 28152
28126: GO 28128
28128: DISABLE
// begin solar_recharge_percent := 0 ;
28129: LD_ADDR_OWVAR 79
28133: PUSH
28134: LD_INT 0
28136: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28137: LD_INT 10500
28139: PPUSH
28140: CALL_OW 67
// solar_recharge_percent := 100 ;
28144: LD_ADDR_OWVAR 79
28148: PUSH
28149: LD_INT 100
28151: ST_TO_ADDR
// end ;
28152: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28153: LD_EXP 55
28157: PUSH
28158: LD_EXP 79
28162: AND
28163: IFFALSE 28402
28165: GO 28167
28167: DISABLE
28168: LD_INT 0
28170: PPUSH
28171: PPUSH
28172: PPUSH
// begin tmp := [ ] ;
28173: LD_ADDR_VAR 0 3
28177: PUSH
28178: EMPTY
28179: ST_TO_ADDR
// for i := 1 to 6 do
28180: LD_ADDR_VAR 0 1
28184: PUSH
28185: DOUBLE
28186: LD_INT 1
28188: DEC
28189: ST_TO_ADDR
28190: LD_INT 6
28192: PUSH
28193: FOR_TO
28194: IFFALSE 28299
// begin uc_nation := nation_nature ;
28196: LD_ADDR_OWVAR 21
28200: PUSH
28201: LD_INT 0
28203: ST_TO_ADDR
// uc_side := 0 ;
28204: LD_ADDR_OWVAR 20
28208: PUSH
28209: LD_INT 0
28211: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28212: LD_ADDR_OWVAR 29
28216: PUSH
28217: LD_INT 12
28219: PUSH
28220: LD_INT 12
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// hc_agressivity := 20 ;
28227: LD_ADDR_OWVAR 35
28231: PUSH
28232: LD_INT 20
28234: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28235: LD_ADDR_OWVAR 28
28239: PUSH
28240: LD_INT 17
28242: ST_TO_ADDR
// hc_gallery :=  ;
28243: LD_ADDR_OWVAR 33
28247: PUSH
28248: LD_STRING 
28250: ST_TO_ADDR
// hc_name :=  ;
28251: LD_ADDR_OWVAR 26
28255: PUSH
28256: LD_STRING 
28258: ST_TO_ADDR
// un := CreateHuman ;
28259: LD_ADDR_VAR 0 2
28263: PUSH
28264: CALL_OW 44
28268: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28269: LD_VAR 0 2
28273: PPUSH
28274: LD_INT 1
28276: PPUSH
28277: CALL_OW 51
// tmp := tmp ^ un ;
28281: LD_ADDR_VAR 0 3
28285: PUSH
28286: LD_VAR 0 3
28290: PUSH
28291: LD_VAR 0 2
28295: ADD
28296: ST_TO_ADDR
// end ;
28297: GO 28193
28299: POP
28300: POP
// repeat wait ( 0 0$1 ) ;
28301: LD_INT 35
28303: PPUSH
28304: CALL_OW 67
// for un in tmp do
28308: LD_ADDR_VAR 0 2
28312: PUSH
28313: LD_VAR 0 3
28317: PUSH
28318: FOR_IN
28319: IFFALSE 28393
// begin if IsDead ( un ) then
28321: LD_VAR 0 2
28325: PPUSH
28326: CALL_OW 301
28330: IFFALSE 28350
// begin tmp := tmp diff un ;
28332: LD_ADDR_VAR 0 3
28336: PUSH
28337: LD_VAR 0 3
28341: PUSH
28342: LD_VAR 0 2
28346: DIFF
28347: ST_TO_ADDR
// continue ;
28348: GO 28318
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28350: LD_VAR 0 2
28354: PPUSH
28355: LD_INT 3
28357: PUSH
28358: LD_INT 22
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PPUSH
28372: CALL_OW 69
28376: PPUSH
28377: LD_VAR 0 2
28381: PPUSH
28382: CALL_OW 74
28386: PPUSH
28387: CALL_OW 115
// end ;
28391: GO 28318
28393: POP
28394: POP
// until not tmp ;
28395: LD_VAR 0 3
28399: NOT
28400: IFFALSE 28301
// end ;
28402: PPOPN 3
28404: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28405: LD_EXP 55
28409: PUSH
28410: LD_EXP 80
28414: AND
28415: IFFALSE 28469
28417: GO 28419
28419: DISABLE
// begin ToLua ( displayTroll(); ) ;
28420: LD_STRING displayTroll();
28422: PPUSH
28423: CALL_OW 559
// wait ( 3 3$00 ) ;
28427: LD_INT 6300
28429: PPUSH
28430: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28434: LD_STRING hideTroll();
28436: PPUSH
28437: CALL_OW 559
// wait ( 1 1$00 ) ;
28441: LD_INT 2100
28443: PPUSH
28444: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28448: LD_STRING displayTroll();
28450: PPUSH
28451: CALL_OW 559
// wait ( 1 1$00 ) ;
28455: LD_INT 2100
28457: PPUSH
28458: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28462: LD_STRING hideTroll();
28464: PPUSH
28465: CALL_OW 559
// end ;
28469: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28470: LD_EXP 55
28474: PUSH
28475: LD_EXP 81
28479: AND
28480: IFFALSE 28543
28482: GO 28484
28484: DISABLE
28485: LD_INT 0
28487: PPUSH
// begin p := 0 ;
28488: LD_ADDR_VAR 0 1
28492: PUSH
28493: LD_INT 0
28495: ST_TO_ADDR
// repeat game_speed := 1 ;
28496: LD_ADDR_OWVAR 65
28500: PUSH
28501: LD_INT 1
28503: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28504: LD_INT 35
28506: PPUSH
28507: CALL_OW 67
// p := p + 1 ;
28511: LD_ADDR_VAR 0 1
28515: PUSH
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 1
28523: PLUS
28524: ST_TO_ADDR
// until p >= 60 ;
28525: LD_VAR 0 1
28529: PUSH
28530: LD_INT 60
28532: GREATEREQUAL
28533: IFFALSE 28496
// game_speed := 4 ;
28535: LD_ADDR_OWVAR 65
28539: PUSH
28540: LD_INT 4
28542: ST_TO_ADDR
// end ;
28543: PPOPN 1
28545: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28546: LD_EXP 55
28550: PUSH
28551: LD_EXP 82
28555: AND
28556: IFFALSE 28702
28558: GO 28560
28560: DISABLE
28561: LD_INT 0
28563: PPUSH
28564: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28565: LD_ADDR_VAR 0 1
28569: PUSH
28570: LD_INT 22
28572: PUSH
28573: LD_OWVAR 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: LD_INT 30
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 30
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PPUSH
28614: CALL_OW 69
28618: ST_TO_ADDR
// if not depot then
28619: LD_VAR 0 1
28623: NOT
28624: IFFALSE 28628
// exit ;
28626: GO 28702
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28628: LD_ADDR_VAR 0 2
28632: PUSH
28633: LD_VAR 0 1
28637: PUSH
28638: LD_INT 1
28640: PPUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 12
28650: ARRAY
28651: PPUSH
28652: CALL_OW 274
28656: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28657: LD_VAR 0 2
28661: PPUSH
28662: LD_INT 1
28664: PPUSH
28665: LD_INT 0
28667: PPUSH
28668: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28672: LD_VAR 0 2
28676: PPUSH
28677: LD_INT 2
28679: PPUSH
28680: LD_INT 0
28682: PPUSH
28683: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28687: LD_VAR 0 2
28691: PPUSH
28692: LD_INT 3
28694: PPUSH
28695: LD_INT 0
28697: PPUSH
28698: CALL_OW 277
// end ;
28702: PPOPN 2
28704: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28705: LD_EXP 55
28709: PUSH
28710: LD_EXP 83
28714: AND
28715: IFFALSE 28812
28717: GO 28719
28719: DISABLE
28720: LD_INT 0
28722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28723: LD_ADDR_VAR 0 1
28727: PUSH
28728: LD_INT 22
28730: PUSH
28731: LD_OWVAR 2
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 21
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 3
28752: PUSH
28753: LD_INT 23
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: LIST
28771: PPUSH
28772: CALL_OW 69
28776: ST_TO_ADDR
// if not tmp then
28777: LD_VAR 0 1
28781: NOT
28782: IFFALSE 28786
// exit ;
28784: GO 28812
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28786: LD_VAR 0 1
28790: PUSH
28791: LD_INT 1
28793: PPUSH
28794: LD_VAR 0 1
28798: PPUSH
28799: CALL_OW 12
28803: ARRAY
28804: PPUSH
28805: LD_INT 200
28807: PPUSH
28808: CALL_OW 234
// end ;
28812: PPOPN 1
28814: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28815: LD_EXP 55
28819: PUSH
28820: LD_EXP 84
28824: AND
28825: IFFALSE 28904
28827: GO 28829
28829: DISABLE
28830: LD_INT 0
28832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28833: LD_ADDR_VAR 0 1
28837: PUSH
28838: LD_INT 22
28840: PUSH
28841: LD_OWVAR 2
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 21
28852: PUSH
28853: LD_INT 2
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PPUSH
28864: CALL_OW 69
28868: ST_TO_ADDR
// if not tmp then
28869: LD_VAR 0 1
28873: NOT
28874: IFFALSE 28878
// exit ;
28876: GO 28904
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28878: LD_VAR 0 1
28882: PUSH
28883: LD_INT 1
28885: PPUSH
28886: LD_VAR 0 1
28890: PPUSH
28891: CALL_OW 12
28895: ARRAY
28896: PPUSH
28897: LD_INT 60
28899: PPUSH
28900: CALL_OW 234
// end ;
28904: PPOPN 1
28906: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28907: LD_EXP 55
28911: PUSH
28912: LD_EXP 85
28916: AND
28917: IFFALSE 29016
28919: GO 28921
28921: DISABLE
28922: LD_INT 0
28924: PPUSH
28925: PPUSH
// begin enable ;
28926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28927: LD_ADDR_VAR 0 1
28931: PUSH
28932: LD_INT 22
28934: PUSH
28935: LD_OWVAR 2
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 61
28946: PUSH
28947: EMPTY
28948: LIST
28949: PUSH
28950: LD_INT 33
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: LIST
28964: PPUSH
28965: CALL_OW 69
28969: ST_TO_ADDR
// if not tmp then
28970: LD_VAR 0 1
28974: NOT
28975: IFFALSE 28979
// exit ;
28977: GO 29016
// for i in tmp do
28979: LD_ADDR_VAR 0 2
28983: PUSH
28984: LD_VAR 0 1
28988: PUSH
28989: FOR_IN
28990: IFFALSE 29014
// if IsControledBy ( i ) then
28992: LD_VAR 0 2
28996: PPUSH
28997: CALL_OW 312
29001: IFFALSE 29012
// ComUnlink ( i ) ;
29003: LD_VAR 0 2
29007: PPUSH
29008: CALL_OW 136
29012: GO 28989
29014: POP
29015: POP
// end ;
29016: PPOPN 2
29018: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29019: LD_EXP 55
29023: PUSH
29024: LD_EXP 86
29028: AND
29029: IFFALSE 29169
29031: GO 29033
29033: DISABLE
29034: LD_INT 0
29036: PPUSH
29037: PPUSH
// begin ToLua ( displayPowell(); ) ;
29038: LD_STRING displayPowell();
29040: PPUSH
29041: CALL_OW 559
// uc_side := 0 ;
29045: LD_ADDR_OWVAR 20
29049: PUSH
29050: LD_INT 0
29052: ST_TO_ADDR
// uc_nation := 2 ;
29053: LD_ADDR_OWVAR 21
29057: PUSH
29058: LD_INT 2
29060: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29061: LD_ADDR_OWVAR 37
29065: PUSH
29066: LD_INT 14
29068: ST_TO_ADDR
// vc_engine := engine_siberite ;
29069: LD_ADDR_OWVAR 39
29073: PUSH
29074: LD_INT 3
29076: ST_TO_ADDR
// vc_control := control_apeman ;
29077: LD_ADDR_OWVAR 38
29081: PUSH
29082: LD_INT 5
29084: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29085: LD_ADDR_OWVAR 40
29089: PUSH
29090: LD_INT 29
29092: ST_TO_ADDR
// un := CreateVehicle ;
29093: LD_ADDR_VAR 0 2
29097: PUSH
29098: CALL_OW 45
29102: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29103: LD_VAR 0 2
29107: PPUSH
29108: LD_INT 1
29110: PPUSH
29111: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29115: LD_INT 35
29117: PPUSH
29118: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29122: LD_VAR 0 2
29126: PPUSH
29127: LD_INT 22
29129: PUSH
29130: LD_OWVAR 2
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PPUSH
29139: CALL_OW 69
29143: PPUSH
29144: LD_VAR 0 2
29148: PPUSH
29149: CALL_OW 74
29153: PPUSH
29154: CALL_OW 115
// until IsDead ( un ) ;
29158: LD_VAR 0 2
29162: PPUSH
29163: CALL_OW 301
29167: IFFALSE 29115
// end ;
29169: PPOPN 2
29171: END
// every 0 0$1 trigger StreamModeActive and sStu do
29172: LD_EXP 55
29176: PUSH
29177: LD_EXP 94
29181: AND
29182: IFFALSE 29198
29184: GO 29186
29186: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29187: LD_STRING displayStucuk();
29189: PPUSH
29190: CALL_OW 559
// ResetFog ;
29194: CALL_OW 335
// end ;
29198: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29199: LD_EXP 55
29203: PUSH
29204: LD_EXP 87
29208: AND
29209: IFFALSE 29350
29211: GO 29213
29213: DISABLE
29214: LD_INT 0
29216: PPUSH
29217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29218: LD_ADDR_VAR 0 2
29222: PUSH
29223: LD_INT 22
29225: PUSH
29226: LD_OWVAR 2
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 21
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PPUSH
29249: CALL_OW 69
29253: ST_TO_ADDR
// if not tmp then
29254: LD_VAR 0 2
29258: NOT
29259: IFFALSE 29263
// exit ;
29261: GO 29350
// un := tmp [ rand ( 1 , tmp ) ] ;
29263: LD_ADDR_VAR 0 1
29267: PUSH
29268: LD_VAR 0 2
29272: PUSH
29273: LD_INT 1
29275: PPUSH
29276: LD_VAR 0 2
29280: PPUSH
29281: CALL_OW 12
29285: ARRAY
29286: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29287: LD_VAR 0 1
29291: PPUSH
29292: LD_INT 0
29294: PPUSH
29295: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29299: LD_VAR 0 1
29303: PPUSH
29304: LD_OWVAR 3
29308: PUSH
29309: LD_VAR 0 1
29313: DIFF
29314: PPUSH
29315: LD_VAR 0 1
29319: PPUSH
29320: CALL_OW 74
29324: PPUSH
29325: CALL_OW 115
// wait ( 0 0$20 ) ;
29329: LD_INT 700
29331: PPUSH
29332: CALL_OW 67
// SetSide ( un , your_side ) ;
29336: LD_VAR 0 1
29340: PPUSH
29341: LD_OWVAR 2
29345: PPUSH
29346: CALL_OW 235
// end ;
29350: PPOPN 2
29352: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29353: LD_EXP 55
29357: PUSH
29358: LD_EXP 88
29362: AND
29363: IFFALSE 29469
29365: GO 29367
29367: DISABLE
29368: LD_INT 0
29370: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29371: LD_ADDR_VAR 0 1
29375: PUSH
29376: LD_INT 22
29378: PUSH
29379: LD_OWVAR 2
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 2
29390: PUSH
29391: LD_INT 30
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 30
29403: PUSH
29404: LD_INT 1
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: LIST
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PPUSH
29420: CALL_OW 69
29424: ST_TO_ADDR
// if not depot then
29425: LD_VAR 0 1
29429: NOT
29430: IFFALSE 29434
// exit ;
29432: GO 29469
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29434: LD_VAR 0 1
29438: PUSH
29439: LD_INT 1
29441: ARRAY
29442: PPUSH
29443: CALL_OW 250
29447: PPUSH
29448: LD_VAR 0 1
29452: PUSH
29453: LD_INT 1
29455: ARRAY
29456: PPUSH
29457: CALL_OW 251
29461: PPUSH
29462: LD_INT 70
29464: PPUSH
29465: CALL_OW 495
// end ;
29469: PPOPN 1
29471: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29472: LD_EXP 55
29476: PUSH
29477: LD_EXP 89
29481: AND
29482: IFFALSE 29693
29484: GO 29486
29486: DISABLE
29487: LD_INT 0
29489: PPUSH
29490: PPUSH
29491: PPUSH
29492: PPUSH
29493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29494: LD_ADDR_VAR 0 5
29498: PUSH
29499: LD_INT 22
29501: PUSH
29502: LD_OWVAR 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 21
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PPUSH
29525: CALL_OW 69
29529: ST_TO_ADDR
// if not tmp then
29530: LD_VAR 0 5
29534: NOT
29535: IFFALSE 29539
// exit ;
29537: GO 29693
// for i in tmp do
29539: LD_ADDR_VAR 0 1
29543: PUSH
29544: LD_VAR 0 5
29548: PUSH
29549: FOR_IN
29550: IFFALSE 29691
// begin d := rand ( 0 , 5 ) ;
29552: LD_ADDR_VAR 0 4
29556: PUSH
29557: LD_INT 0
29559: PPUSH
29560: LD_INT 5
29562: PPUSH
29563: CALL_OW 12
29567: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29568: LD_ADDR_VAR 0 2
29572: PUSH
29573: LD_VAR 0 1
29577: PPUSH
29578: CALL_OW 250
29582: PPUSH
29583: LD_VAR 0 4
29587: PPUSH
29588: LD_INT 3
29590: PPUSH
29591: LD_INT 12
29593: PPUSH
29594: CALL_OW 12
29598: PPUSH
29599: CALL_OW 272
29603: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29604: LD_ADDR_VAR 0 3
29608: PUSH
29609: LD_VAR 0 1
29613: PPUSH
29614: CALL_OW 251
29618: PPUSH
29619: LD_VAR 0 4
29623: PPUSH
29624: LD_INT 3
29626: PPUSH
29627: LD_INT 12
29629: PPUSH
29630: CALL_OW 12
29634: PPUSH
29635: CALL_OW 273
29639: ST_TO_ADDR
// if ValidHex ( x , y ) then
29640: LD_VAR 0 2
29644: PPUSH
29645: LD_VAR 0 3
29649: PPUSH
29650: CALL_OW 488
29654: IFFALSE 29689
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29656: LD_VAR 0 1
29660: PPUSH
29661: LD_VAR 0 2
29665: PPUSH
29666: LD_VAR 0 3
29670: PPUSH
29671: LD_INT 3
29673: PPUSH
29674: LD_INT 6
29676: PPUSH
29677: CALL_OW 12
29681: PPUSH
29682: LD_INT 1
29684: PPUSH
29685: CALL_OW 483
// end ;
29689: GO 29549
29691: POP
29692: POP
// end ;
29693: PPOPN 5
29695: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29696: LD_EXP 55
29700: PUSH
29701: LD_EXP 90
29705: AND
29706: IFFALSE 29800
29708: GO 29710
29710: DISABLE
29711: LD_INT 0
29713: PPUSH
29714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29715: LD_ADDR_VAR 0 2
29719: PUSH
29720: LD_INT 22
29722: PUSH
29723: LD_OWVAR 2
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 32
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 21
29744: PUSH
29745: LD_INT 2
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: PPUSH
29757: CALL_OW 69
29761: ST_TO_ADDR
// if not tmp then
29762: LD_VAR 0 2
29766: NOT
29767: IFFALSE 29771
// exit ;
29769: GO 29800
// for i in tmp do
29771: LD_ADDR_VAR 0 1
29775: PUSH
29776: LD_VAR 0 2
29780: PUSH
29781: FOR_IN
29782: IFFALSE 29798
// SetFuel ( i , 0 ) ;
29784: LD_VAR 0 1
29788: PPUSH
29789: LD_INT 0
29791: PPUSH
29792: CALL_OW 240
29796: GO 29781
29798: POP
29799: POP
// end ;
29800: PPOPN 2
29802: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29803: LD_EXP 55
29807: PUSH
29808: LD_EXP 91
29812: AND
29813: IFFALSE 29879
29815: GO 29817
29817: DISABLE
29818: LD_INT 0
29820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29821: LD_ADDR_VAR 0 1
29825: PUSH
29826: LD_INT 22
29828: PUSH
29829: LD_OWVAR 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 30
29840: PUSH
29841: LD_INT 29
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PPUSH
29852: CALL_OW 69
29856: ST_TO_ADDR
// if not tmp then
29857: LD_VAR 0 1
29861: NOT
29862: IFFALSE 29866
// exit ;
29864: GO 29879
// DestroyUnit ( tmp [ 1 ] ) ;
29866: LD_VAR 0 1
29870: PUSH
29871: LD_INT 1
29873: ARRAY
29874: PPUSH
29875: CALL_OW 65
// end ;
29879: PPOPN 1
29881: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29882: LD_EXP 55
29886: PUSH
29887: LD_EXP 93
29891: AND
29892: IFFALSE 30021
29894: GO 29896
29896: DISABLE
29897: LD_INT 0
29899: PPUSH
// begin uc_side := 0 ;
29900: LD_ADDR_OWVAR 20
29904: PUSH
29905: LD_INT 0
29907: ST_TO_ADDR
// uc_nation := nation_arabian ;
29908: LD_ADDR_OWVAR 21
29912: PUSH
29913: LD_INT 2
29915: ST_TO_ADDR
// hc_gallery :=  ;
29916: LD_ADDR_OWVAR 33
29920: PUSH
29921: LD_STRING 
29923: ST_TO_ADDR
// hc_name :=  ;
29924: LD_ADDR_OWVAR 26
29928: PUSH
29929: LD_STRING 
29931: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29932: LD_INT 1
29934: PPUSH
29935: LD_INT 11
29937: PPUSH
29938: LD_INT 10
29940: PPUSH
29941: CALL_OW 380
// un := CreateHuman ;
29945: LD_ADDR_VAR 0 1
29949: PUSH
29950: CALL_OW 44
29954: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29955: LD_VAR 0 1
29959: PPUSH
29960: LD_INT 1
29962: PPUSH
29963: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29967: LD_INT 35
29969: PPUSH
29970: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29974: LD_VAR 0 1
29978: PPUSH
29979: LD_INT 22
29981: PUSH
29982: LD_OWVAR 2
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PPUSH
29991: CALL_OW 69
29995: PPUSH
29996: LD_VAR 0 1
30000: PPUSH
30001: CALL_OW 74
30005: PPUSH
30006: CALL_OW 115
// until IsDead ( un ) ;
30010: LD_VAR 0 1
30014: PPUSH
30015: CALL_OW 301
30019: IFFALSE 29967
// end ;
30021: PPOPN 1
30023: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30024: LD_EXP 55
30028: PUSH
30029: LD_EXP 95
30033: AND
30034: IFFALSE 30046
30036: GO 30038
30038: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30039: LD_STRING earthquake(getX(game), 0, 32)
30041: PPUSH
30042: CALL_OW 559
30046: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30047: LD_EXP 55
30051: PUSH
30052: LD_EXP 96
30056: AND
30057: IFFALSE 30148
30059: GO 30061
30061: DISABLE
30062: LD_INT 0
30064: PPUSH
// begin enable ;
30065: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30066: LD_ADDR_VAR 0 1
30070: PUSH
30071: LD_INT 22
30073: PUSH
30074: LD_OWVAR 2
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 21
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 33
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: PPUSH
30108: CALL_OW 69
30112: ST_TO_ADDR
// if not tmp then
30113: LD_VAR 0 1
30117: NOT
30118: IFFALSE 30122
// exit ;
30120: GO 30148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30122: LD_VAR 0 1
30126: PUSH
30127: LD_INT 1
30129: PPUSH
30130: LD_VAR 0 1
30134: PPUSH
30135: CALL_OW 12
30139: ARRAY
30140: PPUSH
30141: LD_INT 1
30143: PPUSH
30144: CALL_OW 234
// end ;
30148: PPOPN 1
30150: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30151: LD_EXP 55
30155: PUSH
30156: LD_EXP 97
30160: AND
30161: IFFALSE 30302
30163: GO 30165
30165: DISABLE
30166: LD_INT 0
30168: PPUSH
30169: PPUSH
30170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30171: LD_ADDR_VAR 0 3
30175: PUSH
30176: LD_INT 22
30178: PUSH
30179: LD_OWVAR 2
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 25
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PPUSH
30202: CALL_OW 69
30206: ST_TO_ADDR
// if not tmp then
30207: LD_VAR 0 3
30211: NOT
30212: IFFALSE 30216
// exit ;
30214: GO 30302
// un := tmp [ rand ( 1 , tmp ) ] ;
30216: LD_ADDR_VAR 0 2
30220: PUSH
30221: LD_VAR 0 3
30225: PUSH
30226: LD_INT 1
30228: PPUSH
30229: LD_VAR 0 3
30233: PPUSH
30234: CALL_OW 12
30238: ARRAY
30239: ST_TO_ADDR
// if Crawls ( un ) then
30240: LD_VAR 0 2
30244: PPUSH
30245: CALL_OW 318
30249: IFFALSE 30260
// ComWalk ( un ) ;
30251: LD_VAR 0 2
30255: PPUSH
30256: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30260: LD_VAR 0 2
30264: PPUSH
30265: LD_INT 9
30267: PPUSH
30268: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30272: LD_INT 28
30274: PPUSH
30275: LD_OWVAR 2
30279: PPUSH
30280: LD_INT 2
30282: PPUSH
30283: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30287: LD_INT 29
30289: PPUSH
30290: LD_OWVAR 2
30294: PPUSH
30295: LD_INT 2
30297: PPUSH
30298: CALL_OW 322
// end ;
30302: PPOPN 3
30304: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30305: LD_EXP 55
30309: PUSH
30310: LD_EXP 98
30314: AND
30315: IFFALSE 30426
30317: GO 30319
30319: DISABLE
30320: LD_INT 0
30322: PPUSH
30323: PPUSH
30324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30325: LD_ADDR_VAR 0 3
30329: PUSH
30330: LD_INT 22
30332: PUSH
30333: LD_OWVAR 2
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 25
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PPUSH
30356: CALL_OW 69
30360: ST_TO_ADDR
// if not tmp then
30361: LD_VAR 0 3
30365: NOT
30366: IFFALSE 30370
// exit ;
30368: GO 30426
// un := tmp [ rand ( 1 , tmp ) ] ;
30370: LD_ADDR_VAR 0 2
30374: PUSH
30375: LD_VAR 0 3
30379: PUSH
30380: LD_INT 1
30382: PPUSH
30383: LD_VAR 0 3
30387: PPUSH
30388: CALL_OW 12
30392: ARRAY
30393: ST_TO_ADDR
// if Crawls ( un ) then
30394: LD_VAR 0 2
30398: PPUSH
30399: CALL_OW 318
30403: IFFALSE 30414
// ComWalk ( un ) ;
30405: LD_VAR 0 2
30409: PPUSH
30410: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_INT 8
30421: PPUSH
30422: CALL_OW 336
// end ;
30426: PPOPN 3
30428: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30429: LD_EXP 55
30433: PUSH
30434: LD_EXP 99
30438: AND
30439: IFFALSE 30583
30441: GO 30443
30443: DISABLE
30444: LD_INT 0
30446: PPUSH
30447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30448: LD_ADDR_VAR 0 2
30452: PUSH
30453: LD_INT 22
30455: PUSH
30456: LD_OWVAR 2
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 21
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: LD_INT 34
30480: PUSH
30481: LD_INT 12
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 34
30490: PUSH
30491: LD_INT 51
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 34
30500: PUSH
30501: LD_INT 32
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: PPUSH
30519: CALL_OW 69
30523: ST_TO_ADDR
// if not tmp then
30524: LD_VAR 0 2
30528: NOT
30529: IFFALSE 30533
// exit ;
30531: GO 30583
// for i in tmp do
30533: LD_ADDR_VAR 0 1
30537: PUSH
30538: LD_VAR 0 2
30542: PUSH
30543: FOR_IN
30544: IFFALSE 30581
// if GetCargo ( i , mat_artifact ) = 0 then
30546: LD_VAR 0 1
30550: PPUSH
30551: LD_INT 4
30553: PPUSH
30554: CALL_OW 289
30558: PUSH
30559: LD_INT 0
30561: EQUAL
30562: IFFALSE 30579
// SetCargo ( i , mat_siberit , 100 ) ;
30564: LD_VAR 0 1
30568: PPUSH
30569: LD_INT 3
30571: PPUSH
30572: LD_INT 100
30574: PPUSH
30575: CALL_OW 290
30579: GO 30543
30581: POP
30582: POP
// end ;
30583: PPOPN 2
30585: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30586: LD_EXP 55
30590: PUSH
30591: LD_EXP 100
30595: AND
30596: IFFALSE 30779
30598: GO 30600
30600: DISABLE
30601: LD_INT 0
30603: PPUSH
30604: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30605: LD_ADDR_VAR 0 2
30609: PUSH
30610: LD_INT 22
30612: PUSH
30613: LD_OWVAR 2
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PPUSH
30622: CALL_OW 69
30626: ST_TO_ADDR
// if not tmp then
30627: LD_VAR 0 2
30631: NOT
30632: IFFALSE 30636
// exit ;
30634: GO 30779
// for i := 1 to 2 do
30636: LD_ADDR_VAR 0 1
30640: PUSH
30641: DOUBLE
30642: LD_INT 1
30644: DEC
30645: ST_TO_ADDR
30646: LD_INT 2
30648: PUSH
30649: FOR_TO
30650: IFFALSE 30777
// begin uc_side := your_side ;
30652: LD_ADDR_OWVAR 20
30656: PUSH
30657: LD_OWVAR 2
30661: ST_TO_ADDR
// uc_nation := nation_american ;
30662: LD_ADDR_OWVAR 21
30666: PUSH
30667: LD_INT 1
30669: ST_TO_ADDR
// vc_chassis := us_morphling ;
30670: LD_ADDR_OWVAR 37
30674: PUSH
30675: LD_INT 5
30677: ST_TO_ADDR
// vc_engine := engine_siberite ;
30678: LD_ADDR_OWVAR 39
30682: PUSH
30683: LD_INT 3
30685: ST_TO_ADDR
// vc_control := control_computer ;
30686: LD_ADDR_OWVAR 38
30690: PUSH
30691: LD_INT 3
30693: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30694: LD_ADDR_OWVAR 40
30698: PUSH
30699: LD_INT 10
30701: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30702: LD_VAR 0 2
30706: PUSH
30707: LD_INT 1
30709: ARRAY
30710: PPUSH
30711: CALL_OW 310
30715: NOT
30716: IFFALSE 30763
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30718: CALL_OW 45
30722: PPUSH
30723: LD_VAR 0 2
30727: PUSH
30728: LD_INT 1
30730: ARRAY
30731: PPUSH
30732: CALL_OW 250
30736: PPUSH
30737: LD_VAR 0 2
30741: PUSH
30742: LD_INT 1
30744: ARRAY
30745: PPUSH
30746: CALL_OW 251
30750: PPUSH
30751: LD_INT 12
30753: PPUSH
30754: LD_INT 1
30756: PPUSH
30757: CALL_OW 50
30761: GO 30775
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30763: CALL_OW 45
30767: PPUSH
30768: LD_INT 1
30770: PPUSH
30771: CALL_OW 51
// end ;
30775: GO 30649
30777: POP
30778: POP
// end ;
30779: PPOPN 2
30781: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30782: LD_EXP 55
30786: PUSH
30787: LD_EXP 101
30791: AND
30792: IFFALSE 31014
30794: GO 30796
30796: DISABLE
30797: LD_INT 0
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
30803: PPUSH
30804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30805: LD_ADDR_VAR 0 6
30809: PUSH
30810: LD_INT 22
30812: PUSH
30813: LD_OWVAR 2
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 21
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: LD_INT 23
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: PPUSH
30854: CALL_OW 69
30858: ST_TO_ADDR
// if not tmp then
30859: LD_VAR 0 6
30863: NOT
30864: IFFALSE 30868
// exit ;
30866: GO 31014
// s1 := rand ( 1 , 4 ) ;
30868: LD_ADDR_VAR 0 2
30872: PUSH
30873: LD_INT 1
30875: PPUSH
30876: LD_INT 4
30878: PPUSH
30879: CALL_OW 12
30883: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30884: LD_ADDR_VAR 0 4
30888: PUSH
30889: LD_VAR 0 6
30893: PUSH
30894: LD_INT 1
30896: ARRAY
30897: PPUSH
30898: LD_VAR 0 2
30902: PPUSH
30903: CALL_OW 259
30907: ST_TO_ADDR
// if s1 = 1 then
30908: LD_VAR 0 2
30912: PUSH
30913: LD_INT 1
30915: EQUAL
30916: IFFALSE 30936
// s2 := rand ( 2 , 4 ) else
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: LD_INT 2
30925: PPUSH
30926: LD_INT 4
30928: PPUSH
30929: CALL_OW 12
30933: ST_TO_ADDR
30934: GO 30944
// s2 := 1 ;
30936: LD_ADDR_VAR 0 3
30940: PUSH
30941: LD_INT 1
30943: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30944: LD_ADDR_VAR 0 5
30948: PUSH
30949: LD_VAR 0 6
30953: PUSH
30954: LD_INT 1
30956: ARRAY
30957: PPUSH
30958: LD_VAR 0 3
30962: PPUSH
30963: CALL_OW 259
30967: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30968: LD_VAR 0 6
30972: PUSH
30973: LD_INT 1
30975: ARRAY
30976: PPUSH
30977: LD_VAR 0 2
30981: PPUSH
30982: LD_VAR 0 5
30986: PPUSH
30987: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30991: LD_VAR 0 6
30995: PUSH
30996: LD_INT 1
30998: ARRAY
30999: PPUSH
31000: LD_VAR 0 3
31004: PPUSH
31005: LD_VAR 0 4
31009: PPUSH
31010: CALL_OW 237
// end ;
31014: PPOPN 6
31016: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31017: LD_EXP 55
31021: PUSH
31022: LD_EXP 102
31026: AND
31027: IFFALSE 31106
31029: GO 31031
31031: DISABLE
31032: LD_INT 0
31034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31035: LD_ADDR_VAR 0 1
31039: PUSH
31040: LD_INT 22
31042: PUSH
31043: LD_OWVAR 2
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 30
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PPUSH
31066: CALL_OW 69
31070: ST_TO_ADDR
// if not tmp then
31071: LD_VAR 0 1
31075: NOT
31076: IFFALSE 31080
// exit ;
31078: GO 31106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31080: LD_VAR 0 1
31084: PUSH
31085: LD_INT 1
31087: PPUSH
31088: LD_VAR 0 1
31092: PPUSH
31093: CALL_OW 12
31097: ARRAY
31098: PPUSH
31099: LD_INT 1
31101: PPUSH
31102: CALL_OW 234
// end ;
31106: PPOPN 1
31108: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31109: LD_EXP 55
31113: PUSH
31114: LD_EXP 103
31118: AND
31119: IFFALSE 31231
31121: GO 31123
31123: DISABLE
31124: LD_INT 0
31126: PPUSH
31127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31128: LD_ADDR_VAR 0 2
31132: PUSH
31133: LD_INT 22
31135: PUSH
31136: LD_OWVAR 2
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 2
31147: PUSH
31148: LD_INT 30
31150: PUSH
31151: LD_INT 27
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 30
31160: PUSH
31161: LD_INT 26
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 30
31170: PUSH
31171: LD_INT 28
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PPUSH
31188: CALL_OW 69
31192: ST_TO_ADDR
// if not tmp then
31193: LD_VAR 0 2
31197: NOT
31198: IFFALSE 31202
// exit ;
31200: GO 31231
// for i in tmp do
31202: LD_ADDR_VAR 0 1
31206: PUSH
31207: LD_VAR 0 2
31211: PUSH
31212: FOR_IN
31213: IFFALSE 31229
// SetLives ( i , 1 ) ;
31215: LD_VAR 0 1
31219: PPUSH
31220: LD_INT 1
31222: PPUSH
31223: CALL_OW 234
31227: GO 31212
31229: POP
31230: POP
// end ;
31231: PPOPN 2
31233: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31234: LD_EXP 55
31238: PUSH
31239: LD_EXP 104
31243: AND
31244: IFFALSE 31531
31246: GO 31248
31248: DISABLE
31249: LD_INT 0
31251: PPUSH
31252: PPUSH
31253: PPUSH
// begin i := rand ( 1 , 7 ) ;
31254: LD_ADDR_VAR 0 1
31258: PUSH
31259: LD_INT 1
31261: PPUSH
31262: LD_INT 7
31264: PPUSH
31265: CALL_OW 12
31269: ST_TO_ADDR
// case i of 1 :
31270: LD_VAR 0 1
31274: PUSH
31275: LD_INT 1
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31293
31283: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31284: LD_STRING earthquake(getX(game), 0, 32)
31286: PPUSH
31287: CALL_OW 559
31291: GO 31531
31293: LD_INT 2
31295: DOUBLE
31296: EQUAL
31297: IFTRUE 31301
31299: GO 31315
31301: POP
// begin ToLua ( displayStucuk(); ) ;
31302: LD_STRING displayStucuk();
31304: PPUSH
31305: CALL_OW 559
// ResetFog ;
31309: CALL_OW 335
// end ; 3 :
31313: GO 31531
31315: LD_INT 3
31317: DOUBLE
31318: EQUAL
31319: IFTRUE 31323
31321: GO 31427
31323: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31324: LD_ADDR_VAR 0 2
31328: PUSH
31329: LD_INT 22
31331: PUSH
31332: LD_OWVAR 2
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 25
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PPUSH
31355: CALL_OW 69
31359: ST_TO_ADDR
// if not tmp then
31360: LD_VAR 0 2
31364: NOT
31365: IFFALSE 31369
// exit ;
31367: GO 31531
// un := tmp [ rand ( 1 , tmp ) ] ;
31369: LD_ADDR_VAR 0 3
31373: PUSH
31374: LD_VAR 0 2
31378: PUSH
31379: LD_INT 1
31381: PPUSH
31382: LD_VAR 0 2
31386: PPUSH
31387: CALL_OW 12
31391: ARRAY
31392: ST_TO_ADDR
// if Crawls ( un ) then
31393: LD_VAR 0 3
31397: PPUSH
31398: CALL_OW 318
31402: IFFALSE 31413
// ComWalk ( un ) ;
31404: LD_VAR 0 3
31408: PPUSH
31409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31413: LD_VAR 0 3
31417: PPUSH
31418: LD_INT 8
31420: PPUSH
31421: CALL_OW 336
// end ; 4 :
31425: GO 31531
31427: LD_INT 4
31429: DOUBLE
31430: EQUAL
31431: IFTRUE 31435
31433: GO 31509
31435: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31436: LD_ADDR_VAR 0 2
31440: PUSH
31441: LD_INT 22
31443: PUSH
31444: LD_OWVAR 2
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 30
31455: PUSH
31456: LD_INT 29
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PPUSH
31467: CALL_OW 69
31471: ST_TO_ADDR
// if not tmp then
31472: LD_VAR 0 2
31476: NOT
31477: IFFALSE 31481
// exit ;
31479: GO 31531
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31481: LD_VAR 0 2
31485: PUSH
31486: LD_INT 1
31488: ARRAY
31489: PPUSH
31490: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31494: LD_VAR 0 2
31498: PUSH
31499: LD_INT 1
31501: ARRAY
31502: PPUSH
31503: CALL_OW 65
// end ; 5 .. 7 :
31507: GO 31531
31509: LD_INT 5
31511: DOUBLE
31512: GREATEREQUAL
31513: IFFALSE 31521
31515: LD_INT 7
31517: DOUBLE
31518: LESSEQUAL
31519: IFTRUE 31523
31521: GO 31530
31523: POP
// StreamSibBomb ; end ;
31524: CALL 27768 0 0
31528: GO 31531
31530: POP
// end ;
31531: PPOPN 3
31533: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31534: LD_EXP 55
31538: PUSH
31539: LD_EXP 105
31543: AND
31544: IFFALSE 31700
31546: GO 31548
31548: DISABLE
31549: LD_INT 0
31551: PPUSH
31552: PPUSH
31553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31554: LD_ADDR_VAR 0 2
31558: PUSH
31559: LD_INT 81
31561: PUSH
31562: LD_OWVAR 2
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: LD_INT 21
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 21
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PPUSH
31603: CALL_OW 69
31607: ST_TO_ADDR
// if not tmp then
31608: LD_VAR 0 2
31612: NOT
31613: IFFALSE 31617
// exit ;
31615: GO 31700
// p := 0 ;
31617: LD_ADDR_VAR 0 3
31621: PUSH
31622: LD_INT 0
31624: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31625: LD_INT 35
31627: PPUSH
31628: CALL_OW 67
// p := p + 1 ;
31632: LD_ADDR_VAR 0 3
31636: PUSH
31637: LD_VAR 0 3
31641: PUSH
31642: LD_INT 1
31644: PLUS
31645: ST_TO_ADDR
// for i in tmp do
31646: LD_ADDR_VAR 0 1
31650: PUSH
31651: LD_VAR 0 2
31655: PUSH
31656: FOR_IN
31657: IFFALSE 31688
// if GetLives ( i ) < 1000 then
31659: LD_VAR 0 1
31663: PPUSH
31664: CALL_OW 256
31668: PUSH
31669: LD_INT 1000
31671: LESS
31672: IFFALSE 31686
// SetLives ( i , 1000 ) ;
31674: LD_VAR 0 1
31678: PPUSH
31679: LD_INT 1000
31681: PPUSH
31682: CALL_OW 234
31686: GO 31656
31688: POP
31689: POP
// until p > 20 ;
31690: LD_VAR 0 3
31694: PUSH
31695: LD_INT 20
31697: GREATER
31698: IFFALSE 31625
// end ;
31700: PPOPN 3
31702: END
// every 0 0$1 trigger StreamModeActive and sTime do
31703: LD_EXP 55
31707: PUSH
31708: LD_EXP 106
31712: AND
31713: IFFALSE 31748
31715: GO 31717
31717: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31718: LD_INT 28
31720: PPUSH
31721: LD_OWVAR 2
31725: PPUSH
31726: LD_INT 2
31728: PPUSH
31729: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31733: LD_INT 30
31735: PPUSH
31736: LD_OWVAR 2
31740: PPUSH
31741: LD_INT 2
31743: PPUSH
31744: CALL_OW 322
// end ;
31748: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31749: LD_EXP 55
31753: PUSH
31754: LD_EXP 107
31758: AND
31759: IFFALSE 31880
31761: GO 31763
31763: DISABLE
31764: LD_INT 0
31766: PPUSH
31767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31768: LD_ADDR_VAR 0 2
31772: PUSH
31773: LD_INT 22
31775: PUSH
31776: LD_OWVAR 2
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 21
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: PUSH
31798: LD_INT 23
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: LIST
31816: PPUSH
31817: CALL_OW 69
31821: ST_TO_ADDR
// if not tmp then
31822: LD_VAR 0 2
31826: NOT
31827: IFFALSE 31831
// exit ;
31829: GO 31880
// for i in tmp do
31831: LD_ADDR_VAR 0 1
31835: PUSH
31836: LD_VAR 0 2
31840: PUSH
31841: FOR_IN
31842: IFFALSE 31878
// begin if Crawls ( i ) then
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL_OW 318
31853: IFFALSE 31864
// ComWalk ( i ) ;
31855: LD_VAR 0 1
31859: PPUSH
31860: CALL_OW 138
// SetClass ( i , 2 ) ;
31864: LD_VAR 0 1
31868: PPUSH
31869: LD_INT 2
31871: PPUSH
31872: CALL_OW 336
// end ;
31876: GO 31841
31878: POP
31879: POP
// end ;
31880: PPOPN 2
31882: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31883: LD_EXP 55
31887: PUSH
31888: LD_EXP 108
31892: AND
31893: IFFALSE 32181
31895: GO 31897
31897: DISABLE
31898: LD_INT 0
31900: PPUSH
31901: PPUSH
31902: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31903: LD_OWVAR 2
31907: PPUSH
31908: LD_INT 9
31910: PPUSH
31911: LD_INT 1
31913: PPUSH
31914: LD_INT 1
31916: PPUSH
31917: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31921: LD_INT 9
31923: PPUSH
31924: LD_OWVAR 2
31928: PPUSH
31929: CALL_OW 343
// uc_side := 9 ;
31933: LD_ADDR_OWVAR 20
31937: PUSH
31938: LD_INT 9
31940: ST_TO_ADDR
// uc_nation := 2 ;
31941: LD_ADDR_OWVAR 21
31945: PUSH
31946: LD_INT 2
31948: ST_TO_ADDR
// hc_name := Dark Warrior ;
31949: LD_ADDR_OWVAR 26
31953: PUSH
31954: LD_STRING Dark Warrior
31956: ST_TO_ADDR
// hc_gallery :=  ;
31957: LD_ADDR_OWVAR 33
31961: PUSH
31962: LD_STRING 
31964: ST_TO_ADDR
// hc_noskilllimit := true ;
31965: LD_ADDR_OWVAR 76
31969: PUSH
31970: LD_INT 1
31972: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31973: LD_ADDR_OWVAR 31
31977: PUSH
31978: LD_INT 30
31980: PUSH
31981: LD_INT 30
31983: PUSH
31984: LD_INT 30
31986: PUSH
31987: LD_INT 30
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: ST_TO_ADDR
// un := CreateHuman ;
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: CALL_OW 44
32005: ST_TO_ADDR
// hc_noskilllimit := false ;
32006: LD_ADDR_OWVAR 76
32010: PUSH
32011: LD_INT 0
32013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32014: LD_VAR 0 3
32018: PPUSH
32019: LD_INT 1
32021: PPUSH
32022: CALL_OW 51
// ToLua ( playRanger() ) ;
32026: LD_STRING playRanger()
32028: PPUSH
32029: CALL_OW 559
// p := 0 ;
32033: LD_ADDR_VAR 0 2
32037: PUSH
32038: LD_INT 0
32040: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32041: LD_INT 35
32043: PPUSH
32044: CALL_OW 67
// p := p + 1 ;
32048: LD_ADDR_VAR 0 2
32052: PUSH
32053: LD_VAR 0 2
32057: PUSH
32058: LD_INT 1
32060: PLUS
32061: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32062: LD_VAR 0 3
32066: PPUSH
32067: CALL_OW 256
32071: PUSH
32072: LD_INT 1000
32074: LESS
32075: IFFALSE 32089
// SetLives ( un , 1000 ) ;
32077: LD_VAR 0 3
32081: PPUSH
32082: LD_INT 1000
32084: PPUSH
32085: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32089: LD_VAR 0 3
32093: PPUSH
32094: LD_INT 81
32096: PUSH
32097: LD_OWVAR 2
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 91
32108: PUSH
32109: LD_VAR 0 3
32113: PUSH
32114: LD_INT 30
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PPUSH
32126: CALL_OW 69
32130: PPUSH
32131: LD_VAR 0 3
32135: PPUSH
32136: CALL_OW 74
32140: PPUSH
32141: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32145: LD_VAR 0 2
32149: PUSH
32150: LD_INT 80
32152: GREATER
32153: PUSH
32154: LD_VAR 0 3
32158: PPUSH
32159: CALL_OW 301
32163: OR
32164: IFFALSE 32041
// if un then
32166: LD_VAR 0 3
32170: IFFALSE 32181
// RemoveUnit ( un ) ;
32172: LD_VAR 0 3
32176: PPUSH
32177: CALL_OW 64
// end ;
32181: PPOPN 3
32183: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32184: LD_EXP 109
32188: IFFALSE 32304
32190: GO 32192
32192: DISABLE
32193: LD_INT 0
32195: PPUSH
32196: PPUSH
32197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32198: LD_ADDR_VAR 0 2
32202: PUSH
32203: LD_INT 81
32205: PUSH
32206: LD_OWVAR 2
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 21
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PPUSH
32229: CALL_OW 69
32233: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32234: LD_STRING playComputer()
32236: PPUSH
32237: CALL_OW 559
// if not tmp then
32241: LD_VAR 0 2
32245: NOT
32246: IFFALSE 32250
// exit ;
32248: GO 32304
// for i in tmp do
32250: LD_ADDR_VAR 0 1
32254: PUSH
32255: LD_VAR 0 2
32259: PUSH
32260: FOR_IN
32261: IFFALSE 32302
// for j := 1 to 4 do
32263: LD_ADDR_VAR 0 3
32267: PUSH
32268: DOUBLE
32269: LD_INT 1
32271: DEC
32272: ST_TO_ADDR
32273: LD_INT 4
32275: PUSH
32276: FOR_TO
32277: IFFALSE 32298
// SetSkill ( i , j , 10 ) ;
32279: LD_VAR 0 1
32283: PPUSH
32284: LD_VAR 0 3
32288: PPUSH
32289: LD_INT 10
32291: PPUSH
32292: CALL_OW 237
32296: GO 32276
32298: POP
32299: POP
32300: GO 32260
32302: POP
32303: POP
// end ;
32304: PPOPN 3
32306: END
// every 0 0$1 trigger s30 do var i , tmp ;
32307: LD_EXP 110
32311: IFFALSE 32380
32313: GO 32315
32315: DISABLE
32316: LD_INT 0
32318: PPUSH
32319: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32320: LD_ADDR_VAR 0 2
32324: PUSH
32325: LD_INT 22
32327: PUSH
32328: LD_OWVAR 2
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PPUSH
32337: CALL_OW 69
32341: ST_TO_ADDR
// if not tmp then
32342: LD_VAR 0 2
32346: NOT
32347: IFFALSE 32351
// exit ;
32349: GO 32380
// for i in tmp do
32351: LD_ADDR_VAR 0 1
32355: PUSH
32356: LD_VAR 0 2
32360: PUSH
32361: FOR_IN
32362: IFFALSE 32378
// SetLives ( i , 300 ) ;
32364: LD_VAR 0 1
32368: PPUSH
32369: LD_INT 300
32371: PPUSH
32372: CALL_OW 234
32376: GO 32361
32378: POP
32379: POP
// end ;
32380: PPOPN 2
32382: END
// every 0 0$1 trigger s60 do var i , tmp ;
32383: LD_EXP 111
32387: IFFALSE 32456
32389: GO 32391
32391: DISABLE
32392: LD_INT 0
32394: PPUSH
32395: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32396: LD_ADDR_VAR 0 2
32400: PUSH
32401: LD_INT 22
32403: PUSH
32404: LD_OWVAR 2
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PPUSH
32413: CALL_OW 69
32417: ST_TO_ADDR
// if not tmp then
32418: LD_VAR 0 2
32422: NOT
32423: IFFALSE 32427
// exit ;
32425: GO 32456
// for i in tmp do
32427: LD_ADDR_VAR 0 1
32431: PUSH
32432: LD_VAR 0 2
32436: PUSH
32437: FOR_IN
32438: IFFALSE 32454
// SetLives ( i , 600 ) ;
32440: LD_VAR 0 1
32444: PPUSH
32445: LD_INT 600
32447: PPUSH
32448: CALL_OW 234
32452: GO 32437
32454: POP
32455: POP
// end ;
32456: PPOPN 2
32458: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32459: LD_INT 0
32461: PPUSH
// case cmd of 301 :
32462: LD_VAR 0 1
32466: PUSH
32467: LD_INT 301
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32475
32473: GO 32507
32475: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32476: LD_VAR 0 6
32480: PPUSH
32481: LD_VAR 0 7
32485: PPUSH
32486: LD_VAR 0 8
32490: PPUSH
32491: LD_VAR 0 4
32495: PPUSH
32496: LD_VAR 0 5
32500: PPUSH
32501: CALL 33716 0 5
32505: GO 32628
32507: LD_INT 302
32509: DOUBLE
32510: EQUAL
32511: IFTRUE 32515
32513: GO 32552
32515: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32516: LD_VAR 0 6
32520: PPUSH
32521: LD_VAR 0 7
32525: PPUSH
32526: LD_VAR 0 8
32530: PPUSH
32531: LD_VAR 0 9
32535: PPUSH
32536: LD_VAR 0 4
32540: PPUSH
32541: LD_VAR 0 5
32545: PPUSH
32546: CALL 33807 0 6
32550: GO 32628
32552: LD_INT 303
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32597
32560: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32561: LD_VAR 0 6
32565: PPUSH
32566: LD_VAR 0 7
32570: PPUSH
32571: LD_VAR 0 8
32575: PPUSH
32576: LD_VAR 0 9
32580: PPUSH
32581: LD_VAR 0 4
32585: PPUSH
32586: LD_VAR 0 5
32590: PPUSH
32591: CALL 32633 0 6
32595: GO 32628
32597: LD_INT 304
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32605
32603: GO 32627
32605: POP
// hHackTeleport ( unit , x , y ) ; end ;
32606: LD_VAR 0 2
32610: PPUSH
32611: LD_VAR 0 4
32615: PPUSH
32616: LD_VAR 0 5
32620: PPUSH
32621: CALL 34400 0 3
32625: GO 32628
32627: POP
// end ;
32628: LD_VAR 0 12
32632: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32633: LD_INT 0
32635: PPUSH
32636: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32637: LD_VAR 0 1
32641: PUSH
32642: LD_INT 1
32644: LESS
32645: PUSH
32646: LD_VAR 0 1
32650: PUSH
32651: LD_INT 3
32653: GREATER
32654: OR
32655: PUSH
32656: LD_VAR 0 5
32660: PPUSH
32661: LD_VAR 0 6
32665: PPUSH
32666: CALL_OW 428
32670: OR
32671: IFFALSE 32675
// exit ;
32673: GO 33403
// uc_side := your_side ;
32675: LD_ADDR_OWVAR 20
32679: PUSH
32680: LD_OWVAR 2
32684: ST_TO_ADDR
// uc_nation := nation ;
32685: LD_ADDR_OWVAR 21
32689: PUSH
32690: LD_VAR 0 1
32694: ST_TO_ADDR
// bc_level = 1 ;
32695: LD_ADDR_OWVAR 43
32699: PUSH
32700: LD_INT 1
32702: ST_TO_ADDR
// case btype of 1 :
32703: LD_VAR 0 2
32707: PUSH
32708: LD_INT 1
32710: DOUBLE
32711: EQUAL
32712: IFTRUE 32716
32714: GO 32727
32716: POP
// bc_type := b_depot ; 2 :
32717: LD_ADDR_OWVAR 42
32721: PUSH
32722: LD_INT 0
32724: ST_TO_ADDR
32725: GO 33347
32727: LD_INT 2
32729: DOUBLE
32730: EQUAL
32731: IFTRUE 32735
32733: GO 32746
32735: POP
// bc_type := b_warehouse ; 3 :
32736: LD_ADDR_OWVAR 42
32740: PUSH
32741: LD_INT 1
32743: ST_TO_ADDR
32744: GO 33347
32746: LD_INT 3
32748: DOUBLE
32749: EQUAL
32750: IFTRUE 32754
32752: GO 32765
32754: POP
// bc_type := b_lab ; 4 .. 9 :
32755: LD_ADDR_OWVAR 42
32759: PUSH
32760: LD_INT 6
32762: ST_TO_ADDR
32763: GO 33347
32765: LD_INT 4
32767: DOUBLE
32768: GREATEREQUAL
32769: IFFALSE 32777
32771: LD_INT 9
32773: DOUBLE
32774: LESSEQUAL
32775: IFTRUE 32779
32777: GO 32839
32779: POP
// begin bc_type := b_lab_half ;
32780: LD_ADDR_OWVAR 42
32784: PUSH
32785: LD_INT 7
32787: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32788: LD_ADDR_OWVAR 44
32792: PUSH
32793: LD_INT 10
32795: PUSH
32796: LD_INT 11
32798: PUSH
32799: LD_INT 12
32801: PUSH
32802: LD_INT 15
32804: PUSH
32805: LD_INT 14
32807: PUSH
32808: LD_INT 13
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: PUSH
32819: LD_VAR 0 2
32823: PUSH
32824: LD_INT 3
32826: MINUS
32827: ARRAY
32828: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32829: LD_ADDR_OWVAR 45
32833: PUSH
32834: LD_INT 9
32836: ST_TO_ADDR
// end ; 10 .. 13 :
32837: GO 33347
32839: LD_INT 10
32841: DOUBLE
32842: GREATEREQUAL
32843: IFFALSE 32851
32845: LD_INT 13
32847: DOUBLE
32848: LESSEQUAL
32849: IFTRUE 32853
32851: GO 32930
32853: POP
// begin bc_type := b_lab_full ;
32854: LD_ADDR_OWVAR 42
32858: PUSH
32859: LD_INT 8
32861: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32862: LD_ADDR_OWVAR 44
32866: PUSH
32867: LD_INT 10
32869: PUSH
32870: LD_INT 12
32872: PUSH
32873: LD_INT 14
32875: PUSH
32876: LD_INT 13
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: PUSH
32885: LD_VAR 0 2
32889: PUSH
32890: LD_INT 9
32892: MINUS
32893: ARRAY
32894: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32895: LD_ADDR_OWVAR 45
32899: PUSH
32900: LD_INT 11
32902: PUSH
32903: LD_INT 15
32905: PUSH
32906: LD_INT 12
32908: PUSH
32909: LD_INT 15
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: PUSH
32918: LD_VAR 0 2
32922: PUSH
32923: LD_INT 9
32925: MINUS
32926: ARRAY
32927: ST_TO_ADDR
// end ; 14 :
32928: GO 33347
32930: LD_INT 14
32932: DOUBLE
32933: EQUAL
32934: IFTRUE 32938
32936: GO 32949
32938: POP
// bc_type := b_workshop ; 15 :
32939: LD_ADDR_OWVAR 42
32943: PUSH
32944: LD_INT 2
32946: ST_TO_ADDR
32947: GO 33347
32949: LD_INT 15
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32968
32957: POP
// bc_type := b_factory ; 16 :
32958: LD_ADDR_OWVAR 42
32962: PUSH
32963: LD_INT 3
32965: ST_TO_ADDR
32966: GO 33347
32968: LD_INT 16
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 32987
32976: POP
// bc_type := b_ext_gun ; 17 :
32977: LD_ADDR_OWVAR 42
32981: PUSH
32982: LD_INT 17
32984: ST_TO_ADDR
32985: GO 33347
32987: LD_INT 17
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33023
32995: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32996: LD_ADDR_OWVAR 42
33000: PUSH
33001: LD_INT 19
33003: PUSH
33004: LD_INT 23
33006: PUSH
33007: LD_INT 19
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: PUSH
33015: LD_VAR 0 1
33019: ARRAY
33020: ST_TO_ADDR
33021: GO 33347
33023: LD_INT 18
33025: DOUBLE
33026: EQUAL
33027: IFTRUE 33031
33029: GO 33042
33031: POP
// bc_type := b_ext_radar ; 19 :
33032: LD_ADDR_OWVAR 42
33036: PUSH
33037: LD_INT 20
33039: ST_TO_ADDR
33040: GO 33347
33042: LD_INT 19
33044: DOUBLE
33045: EQUAL
33046: IFTRUE 33050
33048: GO 33061
33050: POP
// bc_type := b_ext_radio ; 20 :
33051: LD_ADDR_OWVAR 42
33055: PUSH
33056: LD_INT 22
33058: ST_TO_ADDR
33059: GO 33347
33061: LD_INT 20
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33069
33067: GO 33080
33069: POP
// bc_type := b_ext_siberium ; 21 :
33070: LD_ADDR_OWVAR 42
33074: PUSH
33075: LD_INT 21
33077: ST_TO_ADDR
33078: GO 33347
33080: LD_INT 21
33082: DOUBLE
33083: EQUAL
33084: IFTRUE 33088
33086: GO 33099
33088: POP
// bc_type := b_ext_computer ; 22 :
33089: LD_ADDR_OWVAR 42
33093: PUSH
33094: LD_INT 24
33096: ST_TO_ADDR
33097: GO 33347
33099: LD_INT 22
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33107
33105: GO 33118
33107: POP
// bc_type := b_ext_track ; 23 :
33108: LD_ADDR_OWVAR 42
33112: PUSH
33113: LD_INT 16
33115: ST_TO_ADDR
33116: GO 33347
33118: LD_INT 23
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33126
33124: GO 33137
33126: POP
// bc_type := b_ext_laser ; 24 :
33127: LD_ADDR_OWVAR 42
33131: PUSH
33132: LD_INT 25
33134: ST_TO_ADDR
33135: GO 33347
33137: LD_INT 24
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33156
33145: POP
// bc_type := b_control_tower ; 25 :
33146: LD_ADDR_OWVAR 42
33150: PUSH
33151: LD_INT 36
33153: ST_TO_ADDR
33154: GO 33347
33156: LD_INT 25
33158: DOUBLE
33159: EQUAL
33160: IFTRUE 33164
33162: GO 33175
33164: POP
// bc_type := b_breastwork ; 26 :
33165: LD_ADDR_OWVAR 42
33169: PUSH
33170: LD_INT 31
33172: ST_TO_ADDR
33173: GO 33347
33175: LD_INT 26
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33194
33183: POP
// bc_type := b_bunker ; 27 :
33184: LD_ADDR_OWVAR 42
33188: PUSH
33189: LD_INT 32
33191: ST_TO_ADDR
33192: GO 33347
33194: LD_INT 27
33196: DOUBLE
33197: EQUAL
33198: IFTRUE 33202
33200: GO 33213
33202: POP
// bc_type := b_turret ; 28 :
33203: LD_ADDR_OWVAR 42
33207: PUSH
33208: LD_INT 33
33210: ST_TO_ADDR
33211: GO 33347
33213: LD_INT 28
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33221
33219: GO 33232
33221: POP
// bc_type := b_armoury ; 29 :
33222: LD_ADDR_OWVAR 42
33226: PUSH
33227: LD_INT 4
33229: ST_TO_ADDR
33230: GO 33347
33232: LD_INT 29
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33251
33240: POP
// bc_type := b_barracks ; 30 :
33241: LD_ADDR_OWVAR 42
33245: PUSH
33246: LD_INT 5
33248: ST_TO_ADDR
33249: GO 33347
33251: LD_INT 30
33253: DOUBLE
33254: EQUAL
33255: IFTRUE 33259
33257: GO 33270
33259: POP
// bc_type := b_solar_power ; 31 :
33260: LD_ADDR_OWVAR 42
33264: PUSH
33265: LD_INT 27
33267: ST_TO_ADDR
33268: GO 33347
33270: LD_INT 31
33272: DOUBLE
33273: EQUAL
33274: IFTRUE 33278
33276: GO 33289
33278: POP
// bc_type := b_oil_power ; 32 :
33279: LD_ADDR_OWVAR 42
33283: PUSH
33284: LD_INT 26
33286: ST_TO_ADDR
33287: GO 33347
33289: LD_INT 32
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33297
33295: GO 33308
33297: POP
// bc_type := b_siberite_power ; 33 :
33298: LD_ADDR_OWVAR 42
33302: PUSH
33303: LD_INT 28
33305: ST_TO_ADDR
33306: GO 33347
33308: LD_INT 33
33310: DOUBLE
33311: EQUAL
33312: IFTRUE 33316
33314: GO 33327
33316: POP
// bc_type := b_oil_mine ; 34 :
33317: LD_ADDR_OWVAR 42
33321: PUSH
33322: LD_INT 29
33324: ST_TO_ADDR
33325: GO 33347
33327: LD_INT 34
33329: DOUBLE
33330: EQUAL
33331: IFTRUE 33335
33333: GO 33346
33335: POP
// bc_type := b_siberite_mine ; end ;
33336: LD_ADDR_OWVAR 42
33340: PUSH
33341: LD_INT 30
33343: ST_TO_ADDR
33344: GO 33347
33346: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33347: LD_ADDR_VAR 0 8
33351: PUSH
33352: LD_VAR 0 5
33356: PPUSH
33357: LD_VAR 0 6
33361: PPUSH
33362: LD_VAR 0 3
33366: PPUSH
33367: CALL_OW 47
33371: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33372: LD_OWVAR 42
33376: PUSH
33377: LD_INT 32
33379: PUSH
33380: LD_INT 33
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: IN
33387: IFFALSE 33403
// PlaceWeaponTurret ( b , weapon ) ;
33389: LD_VAR 0 8
33393: PPUSH
33394: LD_VAR 0 4
33398: PPUSH
33399: CALL_OW 431
// end ;
33403: LD_VAR 0 7
33407: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33408: LD_INT 0
33410: PPUSH
33411: PPUSH
33412: PPUSH
33413: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33414: LD_ADDR_VAR 0 4
33418: PUSH
33419: LD_INT 22
33421: PUSH
33422: LD_OWVAR 2
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: LD_INT 30
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 30
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PPUSH
33463: CALL_OW 69
33467: ST_TO_ADDR
// if not tmp then
33468: LD_VAR 0 4
33472: NOT
33473: IFFALSE 33477
// exit ;
33475: GO 33536
// for i in tmp do
33477: LD_ADDR_VAR 0 2
33481: PUSH
33482: LD_VAR 0 4
33486: PUSH
33487: FOR_IN
33488: IFFALSE 33534
// for j = 1 to 3 do
33490: LD_ADDR_VAR 0 3
33494: PUSH
33495: DOUBLE
33496: LD_INT 1
33498: DEC
33499: ST_TO_ADDR
33500: LD_INT 3
33502: PUSH
33503: FOR_TO
33504: IFFALSE 33530
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33506: LD_VAR 0 2
33510: PPUSH
33511: CALL_OW 274
33515: PPUSH
33516: LD_VAR 0 3
33520: PPUSH
33521: LD_INT 99999
33523: PPUSH
33524: CALL_OW 277
33528: GO 33503
33530: POP
33531: POP
33532: GO 33487
33534: POP
33535: POP
// end ;
33536: LD_VAR 0 1
33540: RET
// export function hHackSetLevel10 ; var i , j ; begin
33541: LD_INT 0
33543: PPUSH
33544: PPUSH
33545: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33546: LD_ADDR_VAR 0 2
33550: PUSH
33551: LD_INT 21
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PPUSH
33561: CALL_OW 69
33565: PUSH
33566: FOR_IN
33567: IFFALSE 33619
// if IsSelected ( i ) then
33569: LD_VAR 0 2
33573: PPUSH
33574: CALL_OW 306
33578: IFFALSE 33617
// begin for j := 1 to 4 do
33580: LD_ADDR_VAR 0 3
33584: PUSH
33585: DOUBLE
33586: LD_INT 1
33588: DEC
33589: ST_TO_ADDR
33590: LD_INT 4
33592: PUSH
33593: FOR_TO
33594: IFFALSE 33615
// SetSkill ( i , j , 10 ) ;
33596: LD_VAR 0 2
33600: PPUSH
33601: LD_VAR 0 3
33605: PPUSH
33606: LD_INT 10
33608: PPUSH
33609: CALL_OW 237
33613: GO 33593
33615: POP
33616: POP
// end ;
33617: GO 33566
33619: POP
33620: POP
// end ;
33621: LD_VAR 0 1
33625: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33626: LD_INT 0
33628: PPUSH
33629: PPUSH
33630: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33631: LD_ADDR_VAR 0 2
33635: PUSH
33636: LD_INT 22
33638: PUSH
33639: LD_OWVAR 2
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 21
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PPUSH
33662: CALL_OW 69
33666: PUSH
33667: FOR_IN
33668: IFFALSE 33709
// begin for j := 1 to 4 do
33670: LD_ADDR_VAR 0 3
33674: PUSH
33675: DOUBLE
33676: LD_INT 1
33678: DEC
33679: ST_TO_ADDR
33680: LD_INT 4
33682: PUSH
33683: FOR_TO
33684: IFFALSE 33705
// SetSkill ( i , j , 10 ) ;
33686: LD_VAR 0 2
33690: PPUSH
33691: LD_VAR 0 3
33695: PPUSH
33696: LD_INT 10
33698: PPUSH
33699: CALL_OW 237
33703: GO 33683
33705: POP
33706: POP
// end ;
33707: GO 33667
33709: POP
33710: POP
// end ;
33711: LD_VAR 0 1
33715: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33716: LD_INT 0
33718: PPUSH
// uc_side := your_side ;
33719: LD_ADDR_OWVAR 20
33723: PUSH
33724: LD_OWVAR 2
33728: ST_TO_ADDR
// uc_nation := nation ;
33729: LD_ADDR_OWVAR 21
33733: PUSH
33734: LD_VAR 0 1
33738: ST_TO_ADDR
// InitHc ;
33739: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33743: LD_INT 0
33745: PPUSH
33746: LD_VAR 0 2
33750: PPUSH
33751: LD_VAR 0 3
33755: PPUSH
33756: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33760: LD_VAR 0 4
33764: PPUSH
33765: LD_VAR 0 5
33769: PPUSH
33770: CALL_OW 428
33774: PUSH
33775: LD_INT 0
33777: EQUAL
33778: IFFALSE 33802
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33780: CALL_OW 44
33784: PPUSH
33785: LD_VAR 0 4
33789: PPUSH
33790: LD_VAR 0 5
33794: PPUSH
33795: LD_INT 1
33797: PPUSH
33798: CALL_OW 48
// end ;
33802: LD_VAR 0 6
33806: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33807: LD_INT 0
33809: PPUSH
33810: PPUSH
// uc_side := your_side ;
33811: LD_ADDR_OWVAR 20
33815: PUSH
33816: LD_OWVAR 2
33820: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33821: LD_VAR 0 1
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: LD_INT 3
33834: PUSH
33835: LD_INT 4
33837: PUSH
33838: LD_INT 5
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: IN
33848: IFFALSE 33860
// uc_nation := nation_american else
33850: LD_ADDR_OWVAR 21
33854: PUSH
33855: LD_INT 1
33857: ST_TO_ADDR
33858: GO 33903
// if chassis in [ 11 , 12 , 13 , 14 ] then
33860: LD_VAR 0 1
33864: PUSH
33865: LD_INT 11
33867: PUSH
33868: LD_INT 12
33870: PUSH
33871: LD_INT 13
33873: PUSH
33874: LD_INT 14
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: IN
33883: IFFALSE 33895
// uc_nation := nation_arabian else
33885: LD_ADDR_OWVAR 21
33889: PUSH
33890: LD_INT 2
33892: ST_TO_ADDR
33893: GO 33903
// uc_nation := nation_russian ;
33895: LD_ADDR_OWVAR 21
33899: PUSH
33900: LD_INT 3
33902: ST_TO_ADDR
// vc_chassis := chassis ;
33903: LD_ADDR_OWVAR 37
33907: PUSH
33908: LD_VAR 0 1
33912: ST_TO_ADDR
// vc_engine := engine ;
33913: LD_ADDR_OWVAR 39
33917: PUSH
33918: LD_VAR 0 2
33922: ST_TO_ADDR
// vc_control := control ;
33923: LD_ADDR_OWVAR 38
33927: PUSH
33928: LD_VAR 0 3
33932: ST_TO_ADDR
// vc_weapon := weapon ;
33933: LD_ADDR_OWVAR 40
33937: PUSH
33938: LD_VAR 0 4
33942: ST_TO_ADDR
// un := CreateVehicle ;
33943: LD_ADDR_VAR 0 8
33947: PUSH
33948: CALL_OW 45
33952: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33953: LD_VAR 0 8
33957: PPUSH
33958: LD_INT 0
33960: PPUSH
33961: LD_INT 5
33963: PPUSH
33964: CALL_OW 12
33968: PPUSH
33969: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33973: LD_VAR 0 8
33977: PPUSH
33978: LD_VAR 0 5
33982: PPUSH
33983: LD_VAR 0 6
33987: PPUSH
33988: LD_INT 1
33990: PPUSH
33991: CALL_OW 48
// end ;
33995: LD_VAR 0 7
33999: RET
// export hInvincible ; every 1 do
34000: GO 34002
34002: DISABLE
// hInvincible := [ ] ;
34003: LD_ADDR_EXP 112
34007: PUSH
34008: EMPTY
34009: ST_TO_ADDR
34010: END
// every 10 do var i ;
34011: GO 34013
34013: DISABLE
34014: LD_INT 0
34016: PPUSH
// begin enable ;
34017: ENABLE
// if not hInvincible then
34018: LD_EXP 112
34022: NOT
34023: IFFALSE 34027
// exit ;
34025: GO 34071
// for i in hInvincible do
34027: LD_ADDR_VAR 0 1
34031: PUSH
34032: LD_EXP 112
34036: PUSH
34037: FOR_IN
34038: IFFALSE 34069
// if GetLives ( i ) < 1000 then
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 256
34049: PUSH
34050: LD_INT 1000
34052: LESS
34053: IFFALSE 34067
// SetLives ( i , 1000 ) ;
34055: LD_VAR 0 1
34059: PPUSH
34060: LD_INT 1000
34062: PPUSH
34063: CALL_OW 234
34067: GO 34037
34069: POP
34070: POP
// end ;
34071: PPOPN 1
34073: END
// export function hHackInvincible ; var i ; begin
34074: LD_INT 0
34076: PPUSH
34077: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34078: LD_ADDR_VAR 0 2
34082: PUSH
34083: LD_INT 2
34085: PUSH
34086: LD_INT 21
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 21
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: PPUSH
34111: CALL_OW 69
34115: PUSH
34116: FOR_IN
34117: IFFALSE 34178
// if IsSelected ( i ) then
34119: LD_VAR 0 2
34123: PPUSH
34124: CALL_OW 306
34128: IFFALSE 34176
// begin if i in hInvincible then
34130: LD_VAR 0 2
34134: PUSH
34135: LD_EXP 112
34139: IN
34140: IFFALSE 34160
// hInvincible := hInvincible diff i else
34142: LD_ADDR_EXP 112
34146: PUSH
34147: LD_EXP 112
34151: PUSH
34152: LD_VAR 0 2
34156: DIFF
34157: ST_TO_ADDR
34158: GO 34176
// hInvincible := hInvincible union i ;
34160: LD_ADDR_EXP 112
34164: PUSH
34165: LD_EXP 112
34169: PUSH
34170: LD_VAR 0 2
34174: UNION
34175: ST_TO_ADDR
// end ;
34176: GO 34116
34178: POP
34179: POP
// end ;
34180: LD_VAR 0 1
34184: RET
// export function hHackInvisible ; var i , j ; begin
34185: LD_INT 0
34187: PPUSH
34188: PPUSH
34189: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34190: LD_ADDR_VAR 0 2
34194: PUSH
34195: LD_INT 21
34197: PUSH
34198: LD_INT 1
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PPUSH
34205: CALL_OW 69
34209: PUSH
34210: FOR_IN
34211: IFFALSE 34235
// if IsSelected ( i ) then
34213: LD_VAR 0 2
34217: PPUSH
34218: CALL_OW 306
34222: IFFALSE 34233
// ComForceInvisible ( i ) ;
34224: LD_VAR 0 2
34228: PPUSH
34229: CALL_OW 496
34233: GO 34210
34235: POP
34236: POP
// end ;
34237: LD_VAR 0 1
34241: RET
// export function hHackChangeYourSide ; begin
34242: LD_INT 0
34244: PPUSH
// if your_side = 8 then
34245: LD_OWVAR 2
34249: PUSH
34250: LD_INT 8
34252: EQUAL
34253: IFFALSE 34265
// your_side := 0 else
34255: LD_ADDR_OWVAR 2
34259: PUSH
34260: LD_INT 0
34262: ST_TO_ADDR
34263: GO 34279
// your_side := your_side + 1 ;
34265: LD_ADDR_OWVAR 2
34269: PUSH
34270: LD_OWVAR 2
34274: PUSH
34275: LD_INT 1
34277: PLUS
34278: ST_TO_ADDR
// end ;
34279: LD_VAR 0 1
34283: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34284: LD_INT 0
34286: PPUSH
34287: PPUSH
34288: PPUSH
// for i in all_units do
34289: LD_ADDR_VAR 0 2
34293: PUSH
34294: LD_OWVAR 3
34298: PUSH
34299: FOR_IN
34300: IFFALSE 34378
// if IsSelected ( i ) then
34302: LD_VAR 0 2
34306: PPUSH
34307: CALL_OW 306
34311: IFFALSE 34376
// begin j := GetSide ( i ) ;
34313: LD_ADDR_VAR 0 3
34317: PUSH
34318: LD_VAR 0 2
34322: PPUSH
34323: CALL_OW 255
34327: ST_TO_ADDR
// if j = 8 then
34328: LD_VAR 0 3
34332: PUSH
34333: LD_INT 8
34335: EQUAL
34336: IFFALSE 34348
// j := 0 else
34338: LD_ADDR_VAR 0 3
34342: PUSH
34343: LD_INT 0
34345: ST_TO_ADDR
34346: GO 34362
// j := j + 1 ;
34348: LD_ADDR_VAR 0 3
34352: PUSH
34353: LD_VAR 0 3
34357: PUSH
34358: LD_INT 1
34360: PLUS
34361: ST_TO_ADDR
// SetSide ( i , j ) ;
34362: LD_VAR 0 2
34366: PPUSH
34367: LD_VAR 0 3
34371: PPUSH
34372: CALL_OW 235
// end ;
34376: GO 34299
34378: POP
34379: POP
// end ;
34380: LD_VAR 0 1
34384: RET
// export function hHackFog ; begin
34385: LD_INT 0
34387: PPUSH
// FogOff ( true ) ;
34388: LD_INT 1
34390: PPUSH
34391: CALL_OW 344
// end ;
34395: LD_VAR 0 1
34399: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34400: LD_INT 0
34402: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34403: LD_VAR 0 1
34407: PPUSH
34408: LD_VAR 0 2
34412: PPUSH
34413: LD_VAR 0 3
34417: PPUSH
34418: LD_INT 1
34420: PPUSH
34421: LD_INT 1
34423: PPUSH
34424: CALL_OW 483
// CenterOnXY ( x , y ) ;
34428: LD_VAR 0 2
34432: PPUSH
34433: LD_VAR 0 3
34437: PPUSH
34438: CALL_OW 84
// end ;
34442: LD_VAR 0 4
34446: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34447: LD_INT 0
34449: PPUSH
34450: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34451: LD_VAR 0 1
34455: NOT
34456: PUSH
34457: LD_VAR 0 2
34461: PPUSH
34462: LD_VAR 0 3
34466: PPUSH
34467: CALL_OW 488
34471: NOT
34472: OR
34473: PUSH
34474: LD_VAR 0 1
34478: PPUSH
34479: CALL_OW 266
34483: PUSH
34484: LD_INT 3
34486: NONEQUAL
34487: PUSH
34488: LD_VAR 0 1
34492: PPUSH
34493: CALL_OW 247
34497: PUSH
34498: LD_INT 1
34500: EQUAL
34501: NOT
34502: AND
34503: OR
34504: IFFALSE 34508
// exit ;
34506: GO 34657
// if GetType ( factory ) = unit_human then
34508: LD_VAR 0 1
34512: PPUSH
34513: CALL_OW 247
34517: PUSH
34518: LD_INT 1
34520: EQUAL
34521: IFFALSE 34538
// factory := IsInUnit ( factory ) ;
34523: LD_ADDR_VAR 0 1
34527: PUSH
34528: LD_VAR 0 1
34532: PPUSH
34533: CALL_OW 310
34537: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34538: LD_VAR 0 1
34542: PPUSH
34543: CALL_OW 266
34547: PUSH
34548: LD_INT 3
34550: NONEQUAL
34551: IFFALSE 34555
// exit ;
34553: GO 34657
// if HexInfo ( x , y ) = factory then
34555: LD_VAR 0 2
34559: PPUSH
34560: LD_VAR 0 3
34564: PPUSH
34565: CALL_OW 428
34569: PUSH
34570: LD_VAR 0 1
34574: EQUAL
34575: IFFALSE 34602
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34577: LD_ADDR_EXP 113
34581: PUSH
34582: LD_EXP 113
34586: PPUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: LD_INT 0
34594: PPUSH
34595: CALL_OW 1
34599: ST_TO_ADDR
34600: GO 34653
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34602: LD_ADDR_EXP 113
34606: PUSH
34607: LD_EXP 113
34611: PPUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: CALL_OW 255
34626: PUSH
34627: LD_VAR 0 1
34631: PUSH
34632: LD_VAR 0 2
34636: PUSH
34637: LD_VAR 0 3
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: PPUSH
34648: CALL_OW 1
34652: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34653: CALL 34662 0 0
// end ;
34657: LD_VAR 0 4
34661: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34662: LD_INT 0
34664: PPUSH
34665: PPUSH
34666: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34667: LD_STRING resetFactoryWaypoint();
34669: PPUSH
34670: CALL_OW 559
// if factoryWaypoints then
34674: LD_EXP 113
34678: IFFALSE 34804
// begin list := PrepareArray ( factoryWaypoints ) ;
34680: LD_ADDR_VAR 0 3
34684: PUSH
34685: LD_EXP 113
34689: PPUSH
34690: CALL 77207 0 1
34694: ST_TO_ADDR
// for i := 1 to list do
34695: LD_ADDR_VAR 0 2
34699: PUSH
34700: DOUBLE
34701: LD_INT 1
34703: DEC
34704: ST_TO_ADDR
34705: LD_VAR 0 3
34709: PUSH
34710: FOR_TO
34711: IFFALSE 34802
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34713: LD_STRING setFactoryWaypointXY(
34715: PUSH
34716: LD_VAR 0 3
34720: PUSH
34721: LD_VAR 0 2
34725: ARRAY
34726: PUSH
34727: LD_INT 1
34729: ARRAY
34730: STR
34731: PUSH
34732: LD_STRING ,
34734: STR
34735: PUSH
34736: LD_VAR 0 3
34740: PUSH
34741: LD_VAR 0 2
34745: ARRAY
34746: PUSH
34747: LD_INT 2
34749: ARRAY
34750: STR
34751: PUSH
34752: LD_STRING ,
34754: STR
34755: PUSH
34756: LD_VAR 0 3
34760: PUSH
34761: LD_VAR 0 2
34765: ARRAY
34766: PUSH
34767: LD_INT 3
34769: ARRAY
34770: STR
34771: PUSH
34772: LD_STRING ,
34774: STR
34775: PUSH
34776: LD_VAR 0 3
34780: PUSH
34781: LD_VAR 0 2
34785: ARRAY
34786: PUSH
34787: LD_INT 4
34789: ARRAY
34790: STR
34791: PUSH
34792: LD_STRING )
34794: STR
34795: PPUSH
34796: CALL_OW 559
34800: GO 34710
34802: POP
34803: POP
// end ; end ;
34804: LD_VAR 0 1
34808: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34809: LD_INT 0
34811: PPUSH
// if HexInfo ( x , y ) = warehouse then
34812: LD_VAR 0 2
34816: PPUSH
34817: LD_VAR 0 3
34821: PPUSH
34822: CALL_OW 428
34826: PUSH
34827: LD_VAR 0 1
34831: EQUAL
34832: IFFALSE 34859
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34834: LD_ADDR_EXP 114
34838: PUSH
34839: LD_EXP 114
34843: PPUSH
34844: LD_VAR 0 1
34848: PPUSH
34849: LD_INT 0
34851: PPUSH
34852: CALL_OW 1
34856: ST_TO_ADDR
34857: GO 34910
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34859: LD_ADDR_EXP 114
34863: PUSH
34864: LD_EXP 114
34868: PPUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL_OW 255
34883: PUSH
34884: LD_VAR 0 1
34888: PUSH
34889: LD_VAR 0 2
34893: PUSH
34894: LD_VAR 0 3
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: PPUSH
34905: CALL_OW 1
34909: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34910: CALL 34919 0 0
// end ;
34914: LD_VAR 0 4
34918: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34919: LD_INT 0
34921: PPUSH
34922: PPUSH
34923: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34924: LD_STRING resetWarehouseGatheringPoints();
34926: PPUSH
34927: CALL_OW 559
// if warehouseGatheringPoints then
34931: LD_EXP 114
34935: IFFALSE 35061
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_EXP 114
34946: PPUSH
34947: CALL 77207 0 1
34951: ST_TO_ADDR
// for i := 1 to list do
34952: LD_ADDR_VAR 0 2
34956: PUSH
34957: DOUBLE
34958: LD_INT 1
34960: DEC
34961: ST_TO_ADDR
34962: LD_VAR 0 3
34966: PUSH
34967: FOR_TO
34968: IFFALSE 35059
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34970: LD_STRING setWarehouseGatheringPointXY(
34972: PUSH
34973: LD_VAR 0 3
34977: PUSH
34978: LD_VAR 0 2
34982: ARRAY
34983: PUSH
34984: LD_INT 1
34986: ARRAY
34987: STR
34988: PUSH
34989: LD_STRING ,
34991: STR
34992: PUSH
34993: LD_VAR 0 3
34997: PUSH
34998: LD_VAR 0 2
35002: ARRAY
35003: PUSH
35004: LD_INT 2
35006: ARRAY
35007: STR
35008: PUSH
35009: LD_STRING ,
35011: STR
35012: PUSH
35013: LD_VAR 0 3
35017: PUSH
35018: LD_VAR 0 2
35022: ARRAY
35023: PUSH
35024: LD_INT 3
35026: ARRAY
35027: STR
35028: PUSH
35029: LD_STRING ,
35031: STR
35032: PUSH
35033: LD_VAR 0 3
35037: PUSH
35038: LD_VAR 0 2
35042: ARRAY
35043: PUSH
35044: LD_INT 4
35046: ARRAY
35047: STR
35048: PUSH
35049: LD_STRING )
35051: STR
35052: PPUSH
35053: CALL_OW 559
35057: GO 34967
35059: POP
35060: POP
// end ; end ;
35061: LD_VAR 0 1
35065: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35066: LD_EXP 114
35070: IFFALSE 35755
35072: GO 35074
35074: DISABLE
35075: LD_INT 0
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
// begin enable ;
35086: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35087: LD_ADDR_VAR 0 3
35091: PUSH
35092: LD_EXP 114
35096: PPUSH
35097: CALL 77207 0 1
35101: ST_TO_ADDR
// if not list then
35102: LD_VAR 0 3
35106: NOT
35107: IFFALSE 35111
// exit ;
35109: GO 35755
// for i := 1 to list do
35111: LD_ADDR_VAR 0 1
35115: PUSH
35116: DOUBLE
35117: LD_INT 1
35119: DEC
35120: ST_TO_ADDR
35121: LD_VAR 0 3
35125: PUSH
35126: FOR_TO
35127: IFFALSE 35753
// begin depot := list [ i ] [ 2 ] ;
35129: LD_ADDR_VAR 0 8
35133: PUSH
35134: LD_VAR 0 3
35138: PUSH
35139: LD_VAR 0 1
35143: ARRAY
35144: PUSH
35145: LD_INT 2
35147: ARRAY
35148: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35149: LD_ADDR_VAR 0 5
35153: PUSH
35154: LD_VAR 0 3
35158: PUSH
35159: LD_VAR 0 1
35163: ARRAY
35164: PUSH
35165: LD_INT 1
35167: ARRAY
35168: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35169: LD_VAR 0 8
35173: PPUSH
35174: CALL_OW 301
35178: PUSH
35179: LD_VAR 0 5
35183: PUSH
35184: LD_VAR 0 8
35188: PPUSH
35189: CALL_OW 255
35193: NONEQUAL
35194: OR
35195: IFFALSE 35224
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35197: LD_ADDR_EXP 114
35201: PUSH
35202: LD_EXP 114
35206: PPUSH
35207: LD_VAR 0 8
35211: PPUSH
35212: LD_INT 0
35214: PPUSH
35215: CALL_OW 1
35219: ST_TO_ADDR
// exit ;
35220: POP
35221: POP
35222: GO 35755
// end ; x := list [ i ] [ 3 ] ;
35224: LD_ADDR_VAR 0 6
35228: PUSH
35229: LD_VAR 0 3
35233: PUSH
35234: LD_VAR 0 1
35238: ARRAY
35239: PUSH
35240: LD_INT 3
35242: ARRAY
35243: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35244: LD_ADDR_VAR 0 7
35248: PUSH
35249: LD_VAR 0 3
35253: PUSH
35254: LD_VAR 0 1
35258: ARRAY
35259: PUSH
35260: LD_INT 4
35262: ARRAY
35263: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35264: LD_ADDR_VAR 0 9
35268: PUSH
35269: LD_VAR 0 6
35273: PPUSH
35274: LD_VAR 0 7
35278: PPUSH
35279: LD_INT 16
35281: PPUSH
35282: CALL 75795 0 3
35286: ST_TO_ADDR
// if not cratesNearbyPoint then
35287: LD_VAR 0 9
35291: NOT
35292: IFFALSE 35298
// exit ;
35294: POP
35295: POP
35296: GO 35755
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35298: LD_ADDR_VAR 0 4
35302: PUSH
35303: LD_INT 22
35305: PUSH
35306: LD_VAR 0 5
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 3
35317: PUSH
35318: LD_INT 60
35320: PUSH
35321: EMPTY
35322: LIST
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 91
35330: PUSH
35331: LD_VAR 0 8
35335: PUSH
35336: LD_INT 6
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 25
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 25
35359: PUSH
35360: LD_INT 16
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: PPUSH
35378: CALL_OW 69
35382: PUSH
35383: LD_VAR 0 8
35387: PPUSH
35388: CALL_OW 313
35392: PPUSH
35393: LD_INT 3
35395: PUSH
35396: LD_INT 60
35398: PUSH
35399: EMPTY
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 2
35408: PUSH
35409: LD_INT 25
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 25
35421: PUSH
35422: LD_INT 16
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PPUSH
35438: CALL_OW 72
35442: UNION
35443: ST_TO_ADDR
// if tmp then
35444: LD_VAR 0 4
35448: IFFALSE 35528
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35450: LD_ADDR_VAR 0 4
35454: PUSH
35455: LD_VAR 0 4
35459: PPUSH
35460: LD_INT 3
35462: PPUSH
35463: CALL 73764 0 2
35467: ST_TO_ADDR
// for j in tmp do
35468: LD_ADDR_VAR 0 2
35472: PUSH
35473: LD_VAR 0 4
35477: PUSH
35478: FOR_IN
35479: IFFALSE 35522
// begin if IsInUnit ( j ) then
35481: LD_VAR 0 2
35485: PPUSH
35486: CALL_OW 310
35490: IFFALSE 35501
// ComExit ( j ) ;
35492: LD_VAR 0 2
35496: PPUSH
35497: CALL 73847 0 1
// AddComCollect ( j , x , y ) ;
35501: LD_VAR 0 2
35505: PPUSH
35506: LD_VAR 0 6
35510: PPUSH
35511: LD_VAR 0 7
35515: PPUSH
35516: CALL_OW 177
// end ;
35520: GO 35478
35522: POP
35523: POP
// exit ;
35524: POP
35525: POP
35526: GO 35755
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35528: LD_ADDR_VAR 0 4
35532: PUSH
35533: LD_INT 22
35535: PUSH
35536: LD_VAR 0 5
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 91
35547: PUSH
35548: LD_VAR 0 8
35552: PUSH
35553: LD_INT 8
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: LD_INT 34
35566: PUSH
35567: LD_INT 12
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 34
35576: PUSH
35577: LD_INT 51
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 34
35586: PUSH
35587: LD_INT 32
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 34
35596: PUSH
35597: LD_INT 89
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: LIST
35615: PPUSH
35616: CALL_OW 69
35620: ST_TO_ADDR
// if tmp then
35621: LD_VAR 0 4
35625: IFFALSE 35751
// begin for j in tmp do
35627: LD_ADDR_VAR 0 2
35631: PUSH
35632: LD_VAR 0 4
35636: PUSH
35637: FOR_IN
35638: IFFALSE 35749
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35640: LD_VAR 0 2
35644: PPUSH
35645: CALL_OW 262
35649: PUSH
35650: LD_INT 3
35652: EQUAL
35653: PUSH
35654: LD_VAR 0 2
35658: PPUSH
35659: CALL_OW 261
35663: PUSH
35664: LD_INT 20
35666: GREATER
35667: OR
35668: PUSH
35669: LD_VAR 0 2
35673: PPUSH
35674: CALL_OW 314
35678: NOT
35679: AND
35680: PUSH
35681: LD_VAR 0 2
35685: PPUSH
35686: CALL_OW 263
35690: PUSH
35691: LD_INT 1
35693: NONEQUAL
35694: PUSH
35695: LD_VAR 0 2
35699: PPUSH
35700: CALL_OW 311
35704: OR
35705: AND
35706: IFFALSE 35747
// begin ComCollect ( j , x , y ) ;
35708: LD_VAR 0 2
35712: PPUSH
35713: LD_VAR 0 6
35717: PPUSH
35718: LD_VAR 0 7
35722: PPUSH
35723: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35727: LD_VAR 0 2
35731: PPUSH
35732: LD_VAR 0 8
35736: PPUSH
35737: CALL_OW 172
// exit ;
35741: POP
35742: POP
35743: POP
35744: POP
35745: GO 35755
// end ;
35747: GO 35637
35749: POP
35750: POP
// end ; end ;
35751: GO 35126
35753: POP
35754: POP
// end ; end_of_file end_of_file
35755: PPOPN 9
35757: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35758: LD_INT 0
35760: PPUSH
35761: PPUSH
// if exist_mode then
35762: LD_VAR 0 2
35766: IFFALSE 35791
// unit := CreateCharacter ( prefix & ident ) else
35768: LD_ADDR_VAR 0 5
35772: PUSH
35773: LD_VAR 0 3
35777: PUSH
35778: LD_VAR 0 1
35782: STR
35783: PPUSH
35784: CALL_OW 34
35788: ST_TO_ADDR
35789: GO 35806
// unit := NewCharacter ( ident ) ;
35791: LD_ADDR_VAR 0 5
35795: PUSH
35796: LD_VAR 0 1
35800: PPUSH
35801: CALL_OW 25
35805: ST_TO_ADDR
// result := unit ;
35806: LD_ADDR_VAR 0 4
35810: PUSH
35811: LD_VAR 0 5
35815: ST_TO_ADDR
// end ;
35816: LD_VAR 0 4
35820: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35821: LD_INT 0
35823: PPUSH
35824: PPUSH
// if not side or not nation then
35825: LD_VAR 0 1
35829: NOT
35830: PUSH
35831: LD_VAR 0 2
35835: NOT
35836: OR
35837: IFFALSE 35841
// exit ;
35839: GO 36609
// case nation of nation_american :
35841: LD_VAR 0 2
35845: PUSH
35846: LD_INT 1
35848: DOUBLE
35849: EQUAL
35850: IFTRUE 35854
35852: GO 36068
35854: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35855: LD_ADDR_VAR 0 4
35859: PUSH
35860: LD_INT 35
35862: PUSH
35863: LD_INT 45
35865: PUSH
35866: LD_INT 46
35868: PUSH
35869: LD_INT 47
35871: PUSH
35872: LD_INT 82
35874: PUSH
35875: LD_INT 83
35877: PUSH
35878: LD_INT 84
35880: PUSH
35881: LD_INT 85
35883: PUSH
35884: LD_INT 86
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: LD_INT 6
35895: PUSH
35896: LD_INT 15
35898: PUSH
35899: LD_INT 16
35901: PUSH
35902: LD_INT 7
35904: PUSH
35905: LD_INT 12
35907: PUSH
35908: LD_INT 13
35910: PUSH
35911: LD_INT 10
35913: PUSH
35914: LD_INT 14
35916: PUSH
35917: LD_INT 20
35919: PUSH
35920: LD_INT 21
35922: PUSH
35923: LD_INT 22
35925: PUSH
35926: LD_INT 25
35928: PUSH
35929: LD_INT 32
35931: PUSH
35932: LD_INT 27
35934: PUSH
35935: LD_INT 36
35937: PUSH
35938: LD_INT 69
35940: PUSH
35941: LD_INT 39
35943: PUSH
35944: LD_INT 34
35946: PUSH
35947: LD_INT 40
35949: PUSH
35950: LD_INT 48
35952: PUSH
35953: LD_INT 49
35955: PUSH
35956: LD_INT 50
35958: PUSH
35959: LD_INT 51
35961: PUSH
35962: LD_INT 52
35964: PUSH
35965: LD_INT 53
35967: PUSH
35968: LD_INT 54
35970: PUSH
35971: LD_INT 55
35973: PUSH
35974: LD_INT 56
35976: PUSH
35977: LD_INT 57
35979: PUSH
35980: LD_INT 58
35982: PUSH
35983: LD_INT 59
35985: PUSH
35986: LD_INT 60
35988: PUSH
35989: LD_INT 61
35991: PUSH
35992: LD_INT 62
35994: PUSH
35995: LD_INT 80
35997: PUSH
35998: LD_INT 82
36000: PUSH
36001: LD_INT 83
36003: PUSH
36004: LD_INT 84
36006: PUSH
36007: LD_INT 85
36009: PUSH
36010: LD_INT 86
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: ST_TO_ADDR
36066: GO 36533
36068: LD_INT 2
36070: DOUBLE
36071: EQUAL
36072: IFTRUE 36076
36074: GO 36302
36076: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36077: LD_ADDR_VAR 0 4
36081: PUSH
36082: LD_INT 35
36084: PUSH
36085: LD_INT 45
36087: PUSH
36088: LD_INT 46
36090: PUSH
36091: LD_INT 47
36093: PUSH
36094: LD_INT 82
36096: PUSH
36097: LD_INT 83
36099: PUSH
36100: LD_INT 84
36102: PUSH
36103: LD_INT 85
36105: PUSH
36106: LD_INT 87
36108: PUSH
36109: LD_INT 70
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: LD_INT 11
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: LD_INT 4
36123: PUSH
36124: LD_INT 5
36126: PUSH
36127: LD_INT 6
36129: PUSH
36130: LD_INT 15
36132: PUSH
36133: LD_INT 18
36135: PUSH
36136: LD_INT 7
36138: PUSH
36139: LD_INT 17
36141: PUSH
36142: LD_INT 8
36144: PUSH
36145: LD_INT 20
36147: PUSH
36148: LD_INT 21
36150: PUSH
36151: LD_INT 22
36153: PUSH
36154: LD_INT 72
36156: PUSH
36157: LD_INT 26
36159: PUSH
36160: LD_INT 69
36162: PUSH
36163: LD_INT 39
36165: PUSH
36166: LD_INT 40
36168: PUSH
36169: LD_INT 41
36171: PUSH
36172: LD_INT 42
36174: PUSH
36175: LD_INT 43
36177: PUSH
36178: LD_INT 48
36180: PUSH
36181: LD_INT 49
36183: PUSH
36184: LD_INT 50
36186: PUSH
36187: LD_INT 51
36189: PUSH
36190: LD_INT 52
36192: PUSH
36193: LD_INT 53
36195: PUSH
36196: LD_INT 54
36198: PUSH
36199: LD_INT 55
36201: PUSH
36202: LD_INT 56
36204: PUSH
36205: LD_INT 60
36207: PUSH
36208: LD_INT 61
36210: PUSH
36211: LD_INT 62
36213: PUSH
36214: LD_INT 66
36216: PUSH
36217: LD_INT 67
36219: PUSH
36220: LD_INT 68
36222: PUSH
36223: LD_INT 81
36225: PUSH
36226: LD_INT 82
36228: PUSH
36229: LD_INT 83
36231: PUSH
36232: LD_INT 84
36234: PUSH
36235: LD_INT 85
36237: PUSH
36238: LD_INT 87
36240: PUSH
36241: LD_INT 88
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
36300: GO 36533
36302: LD_INT 3
36304: DOUBLE
36305: EQUAL
36306: IFTRUE 36310
36308: GO 36532
36310: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36311: LD_ADDR_VAR 0 4
36315: PUSH
36316: LD_INT 46
36318: PUSH
36319: LD_INT 47
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 82
36330: PUSH
36331: LD_INT 83
36333: PUSH
36334: LD_INT 84
36336: PUSH
36337: LD_INT 85
36339: PUSH
36340: LD_INT 86
36342: PUSH
36343: LD_INT 11
36345: PUSH
36346: LD_INT 9
36348: PUSH
36349: LD_INT 20
36351: PUSH
36352: LD_INT 19
36354: PUSH
36355: LD_INT 21
36357: PUSH
36358: LD_INT 24
36360: PUSH
36361: LD_INT 22
36363: PUSH
36364: LD_INT 25
36366: PUSH
36367: LD_INT 28
36369: PUSH
36370: LD_INT 29
36372: PUSH
36373: LD_INT 30
36375: PUSH
36376: LD_INT 31
36378: PUSH
36379: LD_INT 37
36381: PUSH
36382: LD_INT 38
36384: PUSH
36385: LD_INT 32
36387: PUSH
36388: LD_INT 27
36390: PUSH
36391: LD_INT 33
36393: PUSH
36394: LD_INT 69
36396: PUSH
36397: LD_INT 39
36399: PUSH
36400: LD_INT 34
36402: PUSH
36403: LD_INT 40
36405: PUSH
36406: LD_INT 71
36408: PUSH
36409: LD_INT 23
36411: PUSH
36412: LD_INT 44
36414: PUSH
36415: LD_INT 48
36417: PUSH
36418: LD_INT 49
36420: PUSH
36421: LD_INT 50
36423: PUSH
36424: LD_INT 51
36426: PUSH
36427: LD_INT 52
36429: PUSH
36430: LD_INT 53
36432: PUSH
36433: LD_INT 54
36435: PUSH
36436: LD_INT 55
36438: PUSH
36439: LD_INT 56
36441: PUSH
36442: LD_INT 57
36444: PUSH
36445: LD_INT 58
36447: PUSH
36448: LD_INT 59
36450: PUSH
36451: LD_INT 63
36453: PUSH
36454: LD_INT 64
36456: PUSH
36457: LD_INT 65
36459: PUSH
36460: LD_INT 82
36462: PUSH
36463: LD_INT 83
36465: PUSH
36466: LD_INT 84
36468: PUSH
36469: LD_INT 85
36471: PUSH
36472: LD_INT 86
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: ST_TO_ADDR
36530: GO 36533
36532: POP
// if state > - 1 and state < 3 then
36533: LD_VAR 0 3
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: GREATER
36542: PUSH
36543: LD_VAR 0 3
36547: PUSH
36548: LD_INT 3
36550: LESS
36551: AND
36552: IFFALSE 36609
// for i in result do
36554: LD_ADDR_VAR 0 5
36558: PUSH
36559: LD_VAR 0 4
36563: PUSH
36564: FOR_IN
36565: IFFALSE 36607
// if GetTech ( i , side ) <> state then
36567: LD_VAR 0 5
36571: PPUSH
36572: LD_VAR 0 1
36576: PPUSH
36577: CALL_OW 321
36581: PUSH
36582: LD_VAR 0 3
36586: NONEQUAL
36587: IFFALSE 36605
// result := result diff i ;
36589: LD_ADDR_VAR 0 4
36593: PUSH
36594: LD_VAR 0 4
36598: PUSH
36599: LD_VAR 0 5
36603: DIFF
36604: ST_TO_ADDR
36605: GO 36564
36607: POP
36608: POP
// end ;
36609: LD_VAR 0 4
36613: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36614: LD_INT 0
36616: PPUSH
36617: PPUSH
36618: PPUSH
// result := true ;
36619: LD_ADDR_VAR 0 3
36623: PUSH
36624: LD_INT 1
36626: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36627: LD_ADDR_VAR 0 5
36631: PUSH
36632: LD_VAR 0 2
36636: PPUSH
36637: CALL_OW 480
36641: ST_TO_ADDR
// if not tmp then
36642: LD_VAR 0 5
36646: NOT
36647: IFFALSE 36651
// exit ;
36649: GO 36700
// for i in tmp do
36651: LD_ADDR_VAR 0 4
36655: PUSH
36656: LD_VAR 0 5
36660: PUSH
36661: FOR_IN
36662: IFFALSE 36698
// if GetTech ( i , side ) <> state_researched then
36664: LD_VAR 0 4
36668: PPUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 321
36678: PUSH
36679: LD_INT 2
36681: NONEQUAL
36682: IFFALSE 36696
// begin result := false ;
36684: LD_ADDR_VAR 0 3
36688: PUSH
36689: LD_INT 0
36691: ST_TO_ADDR
// exit ;
36692: POP
36693: POP
36694: GO 36700
// end ;
36696: GO 36661
36698: POP
36699: POP
// end ;
36700: LD_VAR 0 3
36704: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36705: LD_INT 0
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
36711: PPUSH
36712: PPUSH
36713: PPUSH
36714: PPUSH
36715: PPUSH
36716: PPUSH
36717: PPUSH
36718: PPUSH
36719: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36720: LD_VAR 0 1
36724: NOT
36725: PUSH
36726: LD_VAR 0 1
36730: PPUSH
36731: CALL_OW 257
36735: PUSH
36736: LD_INT 9
36738: NONEQUAL
36739: OR
36740: IFFALSE 36744
// exit ;
36742: GO 37317
// side := GetSide ( unit ) ;
36744: LD_ADDR_VAR 0 9
36748: PUSH
36749: LD_VAR 0 1
36753: PPUSH
36754: CALL_OW 255
36758: ST_TO_ADDR
// tech_space := tech_spacanom ;
36759: LD_ADDR_VAR 0 12
36763: PUSH
36764: LD_INT 29
36766: ST_TO_ADDR
// tech_time := tech_taurad ;
36767: LD_ADDR_VAR 0 13
36771: PUSH
36772: LD_INT 28
36774: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36775: LD_ADDR_VAR 0 11
36779: PUSH
36780: LD_VAR 0 1
36784: PPUSH
36785: CALL_OW 310
36789: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36790: LD_VAR 0 11
36794: PPUSH
36795: CALL_OW 247
36799: PUSH
36800: LD_INT 2
36802: EQUAL
36803: IFFALSE 36807
// exit ;
36805: GO 37317
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36807: LD_ADDR_VAR 0 8
36811: PUSH
36812: LD_INT 81
36814: PUSH
36815: LD_VAR 0 9
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 3
36826: PUSH
36827: LD_INT 21
36829: PUSH
36830: LD_INT 3
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PPUSH
36845: CALL_OW 69
36849: ST_TO_ADDR
// if not tmp then
36850: LD_VAR 0 8
36854: NOT
36855: IFFALSE 36859
// exit ;
36857: GO 37317
// if in_unit then
36859: LD_VAR 0 11
36863: IFFALSE 36887
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36865: LD_ADDR_VAR 0 10
36869: PUSH
36870: LD_VAR 0 8
36874: PPUSH
36875: LD_VAR 0 11
36879: PPUSH
36880: CALL_OW 74
36884: ST_TO_ADDR
36885: GO 36907
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36887: LD_ADDR_VAR 0 10
36891: PUSH
36892: LD_VAR 0 8
36896: PPUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL_OW 74
36906: ST_TO_ADDR
// if not enemy then
36907: LD_VAR 0 10
36911: NOT
36912: IFFALSE 36916
// exit ;
36914: GO 37317
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36916: LD_VAR 0 11
36920: PUSH
36921: LD_VAR 0 11
36925: PPUSH
36926: LD_VAR 0 10
36930: PPUSH
36931: CALL_OW 296
36935: PUSH
36936: LD_INT 13
36938: GREATER
36939: AND
36940: PUSH
36941: LD_VAR 0 1
36945: PPUSH
36946: LD_VAR 0 10
36950: PPUSH
36951: CALL_OW 296
36955: PUSH
36956: LD_INT 12
36958: GREATER
36959: OR
36960: IFFALSE 36964
// exit ;
36962: GO 37317
// missile := [ 1 ] ;
36964: LD_ADDR_VAR 0 14
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: EMPTY
36973: LIST
36974: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36975: LD_VAR 0 9
36979: PPUSH
36980: LD_VAR 0 12
36984: PPUSH
36985: CALL_OW 325
36989: IFFALSE 37018
// missile := Replace ( missile , missile + 1 , 2 ) ;
36991: LD_ADDR_VAR 0 14
36995: PUSH
36996: LD_VAR 0 14
37000: PPUSH
37001: LD_VAR 0 14
37005: PUSH
37006: LD_INT 1
37008: PLUS
37009: PPUSH
37010: LD_INT 2
37012: PPUSH
37013: CALL_OW 1
37017: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37018: LD_VAR 0 9
37022: PPUSH
37023: LD_VAR 0 13
37027: PPUSH
37028: CALL_OW 325
37032: PUSH
37033: LD_VAR 0 10
37037: PPUSH
37038: CALL_OW 255
37042: PPUSH
37043: LD_VAR 0 13
37047: PPUSH
37048: CALL_OW 325
37052: NOT
37053: AND
37054: IFFALSE 37083
// missile := Replace ( missile , missile + 1 , 3 ) ;
37056: LD_ADDR_VAR 0 14
37060: PUSH
37061: LD_VAR 0 14
37065: PPUSH
37066: LD_VAR 0 14
37070: PUSH
37071: LD_INT 1
37073: PLUS
37074: PPUSH
37075: LD_INT 3
37077: PPUSH
37078: CALL_OW 1
37082: ST_TO_ADDR
// if missile < 2 then
37083: LD_VAR 0 14
37087: PUSH
37088: LD_INT 2
37090: LESS
37091: IFFALSE 37095
// exit ;
37093: GO 37317
// x := GetX ( enemy ) ;
37095: LD_ADDR_VAR 0 4
37099: PUSH
37100: LD_VAR 0 10
37104: PPUSH
37105: CALL_OW 250
37109: ST_TO_ADDR
// y := GetY ( enemy ) ;
37110: LD_ADDR_VAR 0 5
37114: PUSH
37115: LD_VAR 0 10
37119: PPUSH
37120: CALL_OW 251
37124: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37125: LD_ADDR_VAR 0 6
37129: PUSH
37130: LD_VAR 0 4
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PPUSH
37139: LD_INT 1
37141: PPUSH
37142: CALL_OW 12
37146: PLUS
37147: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37148: LD_ADDR_VAR 0 7
37152: PUSH
37153: LD_VAR 0 5
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PPUSH
37162: LD_INT 1
37164: PPUSH
37165: CALL_OW 12
37169: PLUS
37170: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37171: LD_VAR 0 6
37175: PPUSH
37176: LD_VAR 0 7
37180: PPUSH
37181: CALL_OW 488
37185: NOT
37186: IFFALSE 37208
// begin _x := x ;
37188: LD_ADDR_VAR 0 6
37192: PUSH
37193: LD_VAR 0 4
37197: ST_TO_ADDR
// _y := y ;
37198: LD_ADDR_VAR 0 7
37202: PUSH
37203: LD_VAR 0 5
37207: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37208: LD_ADDR_VAR 0 3
37212: PUSH
37213: LD_INT 1
37215: PPUSH
37216: LD_VAR 0 14
37220: PPUSH
37221: CALL_OW 12
37225: ST_TO_ADDR
// case i of 1 :
37226: LD_VAR 0 3
37230: PUSH
37231: LD_INT 1
37233: DOUBLE
37234: EQUAL
37235: IFTRUE 37239
37237: GO 37256
37239: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37240: LD_VAR 0 1
37244: PPUSH
37245: LD_VAR 0 10
37249: PPUSH
37250: CALL_OW 115
37254: GO 37317
37256: LD_INT 2
37258: DOUBLE
37259: EQUAL
37260: IFTRUE 37264
37262: GO 37286
37264: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37265: LD_VAR 0 1
37269: PPUSH
37270: LD_VAR 0 6
37274: PPUSH
37275: LD_VAR 0 7
37279: PPUSH
37280: CALL_OW 153
37284: GO 37317
37286: LD_INT 3
37288: DOUBLE
37289: EQUAL
37290: IFTRUE 37294
37292: GO 37316
37294: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37295: LD_VAR 0 1
37299: PPUSH
37300: LD_VAR 0 6
37304: PPUSH
37305: LD_VAR 0 7
37309: PPUSH
37310: CALL_OW 154
37314: GO 37317
37316: POP
// end ;
37317: LD_VAR 0 2
37321: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37322: LD_INT 0
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
37329: PPUSH
// if not unit or not building then
37330: LD_VAR 0 1
37334: NOT
37335: PUSH
37336: LD_VAR 0 2
37340: NOT
37341: OR
37342: IFFALSE 37346
// exit ;
37344: GO 37504
// x := GetX ( building ) ;
37346: LD_ADDR_VAR 0 5
37350: PUSH
37351: LD_VAR 0 2
37355: PPUSH
37356: CALL_OW 250
37360: ST_TO_ADDR
// y := GetY ( building ) ;
37361: LD_ADDR_VAR 0 6
37365: PUSH
37366: LD_VAR 0 2
37370: PPUSH
37371: CALL_OW 251
37375: ST_TO_ADDR
// for i = 0 to 5 do
37376: LD_ADDR_VAR 0 4
37380: PUSH
37381: DOUBLE
37382: LD_INT 0
37384: DEC
37385: ST_TO_ADDR
37386: LD_INT 5
37388: PUSH
37389: FOR_TO
37390: IFFALSE 37502
// begin _x := ShiftX ( x , i , 3 ) ;
37392: LD_ADDR_VAR 0 7
37396: PUSH
37397: LD_VAR 0 5
37401: PPUSH
37402: LD_VAR 0 4
37406: PPUSH
37407: LD_INT 3
37409: PPUSH
37410: CALL_OW 272
37414: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37415: LD_ADDR_VAR 0 8
37419: PUSH
37420: LD_VAR 0 6
37424: PPUSH
37425: LD_VAR 0 4
37429: PPUSH
37430: LD_INT 3
37432: PPUSH
37433: CALL_OW 273
37437: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37438: LD_VAR 0 7
37442: PPUSH
37443: LD_VAR 0 8
37447: PPUSH
37448: CALL_OW 488
37452: NOT
37453: IFFALSE 37457
// continue ;
37455: GO 37389
// if HexInfo ( _x , _y ) = 0 then
37457: LD_VAR 0 7
37461: PPUSH
37462: LD_VAR 0 8
37466: PPUSH
37467: CALL_OW 428
37471: PUSH
37472: LD_INT 0
37474: EQUAL
37475: IFFALSE 37500
// begin ComMoveXY ( unit , _x , _y ) ;
37477: LD_VAR 0 1
37481: PPUSH
37482: LD_VAR 0 7
37486: PPUSH
37487: LD_VAR 0 8
37491: PPUSH
37492: CALL_OW 111
// exit ;
37496: POP
37497: POP
37498: GO 37504
// end ; end ;
37500: GO 37389
37502: POP
37503: POP
// end ;
37504: LD_VAR 0 3
37508: RET
// export function ScanBase ( side , base_area ) ; begin
37509: LD_INT 0
37511: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37512: LD_ADDR_VAR 0 3
37516: PUSH
37517: LD_VAR 0 2
37521: PPUSH
37522: LD_INT 81
37524: PUSH
37525: LD_VAR 0 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PPUSH
37534: CALL_OW 70
37538: ST_TO_ADDR
// end ;
37539: LD_VAR 0 3
37543: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37544: LD_INT 0
37546: PPUSH
37547: PPUSH
37548: PPUSH
37549: PPUSH
// result := false ;
37550: LD_ADDR_VAR 0 2
37554: PUSH
37555: LD_INT 0
37557: ST_TO_ADDR
// side := GetSide ( unit ) ;
37558: LD_ADDR_VAR 0 3
37562: PUSH
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 255
37572: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37573: LD_ADDR_VAR 0 4
37577: PUSH
37578: LD_VAR 0 1
37582: PPUSH
37583: CALL_OW 248
37587: ST_TO_ADDR
// case nat of 1 :
37588: LD_VAR 0 4
37592: PUSH
37593: LD_INT 1
37595: DOUBLE
37596: EQUAL
37597: IFTRUE 37601
37599: GO 37612
37601: POP
// tech := tech_lassight ; 2 :
37602: LD_ADDR_VAR 0 5
37606: PUSH
37607: LD_INT 12
37609: ST_TO_ADDR
37610: GO 37651
37612: LD_INT 2
37614: DOUBLE
37615: EQUAL
37616: IFTRUE 37620
37618: GO 37631
37620: POP
// tech := tech_mortar ; 3 :
37621: LD_ADDR_VAR 0 5
37625: PUSH
37626: LD_INT 41
37628: ST_TO_ADDR
37629: GO 37651
37631: LD_INT 3
37633: DOUBLE
37634: EQUAL
37635: IFTRUE 37639
37637: GO 37650
37639: POP
// tech := tech_bazooka ; end ;
37640: LD_ADDR_VAR 0 5
37644: PUSH
37645: LD_INT 44
37647: ST_TO_ADDR
37648: GO 37651
37650: POP
// if Researched ( side , tech ) then
37651: LD_VAR 0 3
37655: PPUSH
37656: LD_VAR 0 5
37660: PPUSH
37661: CALL_OW 325
37665: IFFALSE 37692
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37667: LD_ADDR_VAR 0 2
37671: PUSH
37672: LD_INT 5
37674: PUSH
37675: LD_INT 8
37677: PUSH
37678: LD_INT 9
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: PUSH
37686: LD_VAR 0 4
37690: ARRAY
37691: ST_TO_ADDR
// end ;
37692: LD_VAR 0 2
37696: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37697: LD_INT 0
37699: PPUSH
37700: PPUSH
37701: PPUSH
// if not mines then
37702: LD_VAR 0 2
37706: NOT
37707: IFFALSE 37711
// exit ;
37709: GO 37855
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37711: LD_ADDR_VAR 0 5
37715: PUSH
37716: LD_INT 81
37718: PUSH
37719: LD_VAR 0 1
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 3
37730: PUSH
37731: LD_INT 21
37733: PUSH
37734: LD_INT 3
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PPUSH
37749: CALL_OW 69
37753: ST_TO_ADDR
// for i in mines do
37754: LD_ADDR_VAR 0 4
37758: PUSH
37759: LD_VAR 0 2
37763: PUSH
37764: FOR_IN
37765: IFFALSE 37853
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37767: LD_VAR 0 4
37771: PUSH
37772: LD_INT 1
37774: ARRAY
37775: PPUSH
37776: LD_VAR 0 4
37780: PUSH
37781: LD_INT 2
37783: ARRAY
37784: PPUSH
37785: CALL_OW 458
37789: NOT
37790: IFFALSE 37794
// continue ;
37792: GO 37764
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37794: LD_VAR 0 4
37798: PUSH
37799: LD_INT 1
37801: ARRAY
37802: PPUSH
37803: LD_VAR 0 4
37807: PUSH
37808: LD_INT 2
37810: ARRAY
37811: PPUSH
37812: CALL_OW 428
37816: PUSH
37817: LD_VAR 0 5
37821: IN
37822: IFFALSE 37851
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37824: LD_VAR 0 4
37828: PUSH
37829: LD_INT 1
37831: ARRAY
37832: PPUSH
37833: LD_VAR 0 4
37837: PUSH
37838: LD_INT 2
37840: ARRAY
37841: PPUSH
37842: LD_VAR 0 1
37846: PPUSH
37847: CALL_OW 456
// end ;
37851: GO 37764
37853: POP
37854: POP
// end ;
37855: LD_VAR 0 3
37859: RET
// export function Count ( array ) ; begin
37860: LD_INT 0
37862: PPUSH
// result := array + 0 ;
37863: LD_ADDR_VAR 0 2
37867: PUSH
37868: LD_VAR 0 1
37872: PUSH
37873: LD_INT 0
37875: PLUS
37876: ST_TO_ADDR
// end ;
37877: LD_VAR 0 2
37881: RET
// export function IsEmpty ( building ) ; begin
37882: LD_INT 0
37884: PPUSH
// if not building then
37885: LD_VAR 0 1
37889: NOT
37890: IFFALSE 37894
// exit ;
37892: GO 37937
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37894: LD_ADDR_VAR 0 2
37898: PUSH
37899: LD_VAR 0 1
37903: PUSH
37904: LD_INT 22
37906: PUSH
37907: LD_VAR 0 1
37911: PPUSH
37912: CALL_OW 255
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 58
37923: PUSH
37924: EMPTY
37925: LIST
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PPUSH
37931: CALL_OW 69
37935: IN
37936: ST_TO_ADDR
// end ;
37937: LD_VAR 0 2
37941: RET
// export function IsNotFull ( building ) ; var places ; begin
37942: LD_INT 0
37944: PPUSH
37945: PPUSH
// if not building then
37946: LD_VAR 0 1
37950: NOT
37951: IFFALSE 37955
// exit ;
37953: GO 37983
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37955: LD_ADDR_VAR 0 2
37959: PUSH
37960: LD_VAR 0 1
37964: PPUSH
37965: LD_INT 3
37967: PUSH
37968: LD_INT 62
37970: PUSH
37971: EMPTY
37972: LIST
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PPUSH
37978: CALL_OW 72
37982: ST_TO_ADDR
// end ;
37983: LD_VAR 0 2
37987: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37988: LD_INT 0
37990: PPUSH
37991: PPUSH
37992: PPUSH
37993: PPUSH
// tmp := [ ] ;
37994: LD_ADDR_VAR 0 3
37998: PUSH
37999: EMPTY
38000: ST_TO_ADDR
// list := [ ] ;
38001: LD_ADDR_VAR 0 5
38005: PUSH
38006: EMPTY
38007: ST_TO_ADDR
// for i = 16 to 25 do
38008: LD_ADDR_VAR 0 4
38012: PUSH
38013: DOUBLE
38014: LD_INT 16
38016: DEC
38017: ST_TO_ADDR
38018: LD_INT 25
38020: PUSH
38021: FOR_TO
38022: IFFALSE 38095
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38024: LD_ADDR_VAR 0 3
38028: PUSH
38029: LD_VAR 0 3
38033: PUSH
38034: LD_INT 22
38036: PUSH
38037: LD_VAR 0 1
38041: PPUSH
38042: CALL_OW 255
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 91
38053: PUSH
38054: LD_VAR 0 1
38058: PUSH
38059: LD_INT 6
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 30
38069: PUSH
38070: LD_VAR 0 4
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: LIST
38083: PUSH
38084: EMPTY
38085: LIST
38086: PPUSH
38087: CALL_OW 69
38091: ADD
38092: ST_TO_ADDR
38093: GO 38021
38095: POP
38096: POP
// for i = 1 to tmp do
38097: LD_ADDR_VAR 0 4
38101: PUSH
38102: DOUBLE
38103: LD_INT 1
38105: DEC
38106: ST_TO_ADDR
38107: LD_VAR 0 3
38111: PUSH
38112: FOR_TO
38113: IFFALSE 38201
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38115: LD_ADDR_VAR 0 5
38119: PUSH
38120: LD_VAR 0 5
38124: PUSH
38125: LD_VAR 0 3
38129: PUSH
38130: LD_VAR 0 4
38134: ARRAY
38135: PPUSH
38136: CALL_OW 266
38140: PUSH
38141: LD_VAR 0 3
38145: PUSH
38146: LD_VAR 0 4
38150: ARRAY
38151: PPUSH
38152: CALL_OW 250
38156: PUSH
38157: LD_VAR 0 3
38161: PUSH
38162: LD_VAR 0 4
38166: ARRAY
38167: PPUSH
38168: CALL_OW 251
38172: PUSH
38173: LD_VAR 0 3
38177: PUSH
38178: LD_VAR 0 4
38182: ARRAY
38183: PPUSH
38184: CALL_OW 254
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: PUSH
38195: EMPTY
38196: LIST
38197: ADD
38198: ST_TO_ADDR
38199: GO 38112
38201: POP
38202: POP
// result := list ;
38203: LD_ADDR_VAR 0 2
38207: PUSH
38208: LD_VAR 0 5
38212: ST_TO_ADDR
// end ;
38213: LD_VAR 0 2
38217: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38218: LD_INT 0
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
// if not factory then
38227: LD_VAR 0 1
38231: NOT
38232: IFFALSE 38236
// exit ;
38234: GO 38829
// if control = control_apeman then
38236: LD_VAR 0 4
38240: PUSH
38241: LD_INT 5
38243: EQUAL
38244: IFFALSE 38353
// begin tmp := UnitsInside ( factory ) ;
38246: LD_ADDR_VAR 0 8
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: CALL_OW 313
38260: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38261: LD_VAR 0 8
38265: PPUSH
38266: LD_INT 25
38268: PUSH
38269: LD_INT 12
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PPUSH
38276: CALL_OW 72
38280: NOT
38281: IFFALSE 38291
// control := control_manual ;
38283: LD_ADDR_VAR 0 4
38287: PUSH
38288: LD_INT 1
38290: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38291: LD_ADDR_VAR 0 8
38295: PUSH
38296: LD_VAR 0 1
38300: PPUSH
38301: CALL 37988 0 1
38305: ST_TO_ADDR
// if tmp then
38306: LD_VAR 0 8
38310: IFFALSE 38353
// begin for i in tmp do
38312: LD_ADDR_VAR 0 7
38316: PUSH
38317: LD_VAR 0 8
38321: PUSH
38322: FOR_IN
38323: IFFALSE 38351
// if i [ 1 ] = b_ext_radio then
38325: LD_VAR 0 7
38329: PUSH
38330: LD_INT 1
38332: ARRAY
38333: PUSH
38334: LD_INT 22
38336: EQUAL
38337: IFFALSE 38349
// begin control := control_remote ;
38339: LD_ADDR_VAR 0 4
38343: PUSH
38344: LD_INT 2
38346: ST_TO_ADDR
// break ;
38347: GO 38351
// end ;
38349: GO 38322
38351: POP
38352: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38353: LD_VAR 0 1
38357: PPUSH
38358: LD_VAR 0 2
38362: PPUSH
38363: LD_VAR 0 3
38367: PPUSH
38368: LD_VAR 0 4
38372: PPUSH
38373: LD_VAR 0 5
38377: PPUSH
38378: CALL_OW 448
38382: IFFALSE 38417
// begin result := [ chassis , engine , control , weapon ] ;
38384: LD_ADDR_VAR 0 6
38388: PUSH
38389: LD_VAR 0 2
38393: PUSH
38394: LD_VAR 0 3
38398: PUSH
38399: LD_VAR 0 4
38403: PUSH
38404: LD_VAR 0 5
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// exit ;
38415: GO 38829
// end ; _chassis := AvailableChassisList ( factory ) ;
38417: LD_ADDR_VAR 0 9
38421: PUSH
38422: LD_VAR 0 1
38426: PPUSH
38427: CALL_OW 475
38431: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38432: LD_ADDR_VAR 0 11
38436: PUSH
38437: LD_VAR 0 1
38441: PPUSH
38442: CALL_OW 476
38446: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38447: LD_ADDR_VAR 0 12
38451: PUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 477
38461: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38462: LD_ADDR_VAR 0 10
38466: PUSH
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 478
38476: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38477: LD_VAR 0 9
38481: NOT
38482: PUSH
38483: LD_VAR 0 11
38487: NOT
38488: OR
38489: PUSH
38490: LD_VAR 0 12
38494: NOT
38495: OR
38496: PUSH
38497: LD_VAR 0 10
38501: NOT
38502: OR
38503: IFFALSE 38538
// begin result := [ chassis , engine , control , weapon ] ;
38505: LD_ADDR_VAR 0 6
38509: PUSH
38510: LD_VAR 0 2
38514: PUSH
38515: LD_VAR 0 3
38519: PUSH
38520: LD_VAR 0 4
38524: PUSH
38525: LD_VAR 0 5
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: ST_TO_ADDR
// exit ;
38536: GO 38829
// end ; if not chassis in _chassis then
38538: LD_VAR 0 2
38542: PUSH
38543: LD_VAR 0 9
38547: IN
38548: NOT
38549: IFFALSE 38575
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38551: LD_ADDR_VAR 0 2
38555: PUSH
38556: LD_VAR 0 9
38560: PUSH
38561: LD_INT 1
38563: PPUSH
38564: LD_VAR 0 9
38568: PPUSH
38569: CALL_OW 12
38573: ARRAY
38574: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38575: LD_VAR 0 2
38579: PPUSH
38580: LD_VAR 0 3
38584: PPUSH
38585: CALL 38834 0 2
38589: NOT
38590: IFFALSE 38649
// repeat engine := _engine [ 1 ] ;
38592: LD_ADDR_VAR 0 3
38596: PUSH
38597: LD_VAR 0 11
38601: PUSH
38602: LD_INT 1
38604: ARRAY
38605: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38606: LD_ADDR_VAR 0 11
38610: PUSH
38611: LD_VAR 0 11
38615: PPUSH
38616: LD_INT 1
38618: PPUSH
38619: CALL_OW 3
38623: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38624: LD_VAR 0 2
38628: PPUSH
38629: LD_VAR 0 3
38633: PPUSH
38634: CALL 38834 0 2
38638: PUSH
38639: LD_VAR 0 11
38643: PUSH
38644: EMPTY
38645: EQUAL
38646: OR
38647: IFFALSE 38592
// if not control in _control then
38649: LD_VAR 0 4
38653: PUSH
38654: LD_VAR 0 12
38658: IN
38659: NOT
38660: IFFALSE 38686
// control := _control [ rand ( 1 , _control ) ] ;
38662: LD_ADDR_VAR 0 4
38666: PUSH
38667: LD_VAR 0 12
38671: PUSH
38672: LD_INT 1
38674: PPUSH
38675: LD_VAR 0 12
38679: PPUSH
38680: CALL_OW 12
38684: ARRAY
38685: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38686: LD_VAR 0 2
38690: PPUSH
38691: LD_VAR 0 5
38695: PPUSH
38696: CALL 39054 0 2
38700: NOT
38701: IFFALSE 38760
// repeat weapon := _weapon [ 1 ] ;
38703: LD_ADDR_VAR 0 5
38707: PUSH
38708: LD_VAR 0 10
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38717: LD_ADDR_VAR 0 10
38721: PUSH
38722: LD_VAR 0 10
38726: PPUSH
38727: LD_INT 1
38729: PPUSH
38730: CALL_OW 3
38734: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38735: LD_VAR 0 2
38739: PPUSH
38740: LD_VAR 0 5
38744: PPUSH
38745: CALL 39054 0 2
38749: PUSH
38750: LD_VAR 0 10
38754: PUSH
38755: EMPTY
38756: EQUAL
38757: OR
38758: IFFALSE 38703
// result := [ ] ;
38760: LD_ADDR_VAR 0 6
38764: PUSH
38765: EMPTY
38766: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38767: LD_VAR 0 1
38771: PPUSH
38772: LD_VAR 0 2
38776: PPUSH
38777: LD_VAR 0 3
38781: PPUSH
38782: LD_VAR 0 4
38786: PPUSH
38787: LD_VAR 0 5
38791: PPUSH
38792: CALL_OW 448
38796: IFFALSE 38829
// result := [ chassis , engine , control , weapon ] ;
38798: LD_ADDR_VAR 0 6
38802: PUSH
38803: LD_VAR 0 2
38807: PUSH
38808: LD_VAR 0 3
38812: PUSH
38813: LD_VAR 0 4
38817: PUSH
38818: LD_VAR 0 5
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: ST_TO_ADDR
// end ;
38829: LD_VAR 0 6
38833: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38834: LD_INT 0
38836: PPUSH
// if not chassis or not engine then
38837: LD_VAR 0 1
38841: NOT
38842: PUSH
38843: LD_VAR 0 2
38847: NOT
38848: OR
38849: IFFALSE 38853
// exit ;
38851: GO 39049
// case engine of engine_solar :
38853: LD_VAR 0 2
38857: PUSH
38858: LD_INT 2
38860: DOUBLE
38861: EQUAL
38862: IFTRUE 38866
38864: GO 38904
38866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38867: LD_ADDR_VAR 0 3
38871: PUSH
38872: LD_INT 11
38874: PUSH
38875: LD_INT 12
38877: PUSH
38878: LD_INT 13
38880: PUSH
38881: LD_INT 14
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: LD_INT 3
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: ST_TO_ADDR
38902: GO 39033
38904: LD_INT 1
38906: DOUBLE
38907: EQUAL
38908: IFTRUE 38912
38910: GO 38974
38912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38913: LD_ADDR_VAR 0 3
38917: PUSH
38918: LD_INT 11
38920: PUSH
38921: LD_INT 12
38923: PUSH
38924: LD_INT 13
38926: PUSH
38927: LD_INT 14
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: LD_INT 2
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: LD_INT 4
38941: PUSH
38942: LD_INT 5
38944: PUSH
38945: LD_INT 21
38947: PUSH
38948: LD_INT 23
38950: PUSH
38951: LD_INT 22
38953: PUSH
38954: LD_INT 24
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: ST_TO_ADDR
38972: GO 39033
38974: LD_INT 3
38976: DOUBLE
38977: EQUAL
38978: IFTRUE 38982
38980: GO 39032
38982: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38983: LD_ADDR_VAR 0 3
38987: PUSH
38988: LD_INT 13
38990: PUSH
38991: LD_INT 14
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: LD_INT 4
39002: PUSH
39003: LD_INT 5
39005: PUSH
39006: LD_INT 21
39008: PUSH
39009: LD_INT 22
39011: PUSH
39012: LD_INT 23
39014: PUSH
39015: LD_INT 24
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
39030: GO 39033
39032: POP
// result := ( chassis in result ) ;
39033: LD_ADDR_VAR 0 3
39037: PUSH
39038: LD_VAR 0 1
39042: PUSH
39043: LD_VAR 0 3
39047: IN
39048: ST_TO_ADDR
// end ;
39049: LD_VAR 0 3
39053: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39054: LD_INT 0
39056: PPUSH
// if not chassis or not weapon then
39057: LD_VAR 0 1
39061: NOT
39062: PUSH
39063: LD_VAR 0 2
39067: NOT
39068: OR
39069: IFFALSE 39073
// exit ;
39071: GO 40133
// case weapon of us_machine_gun :
39073: LD_VAR 0 2
39077: PUSH
39078: LD_INT 2
39080: DOUBLE
39081: EQUAL
39082: IFTRUE 39086
39084: GO 39116
39086: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39087: LD_ADDR_VAR 0 3
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: LD_INT 3
39100: PUSH
39101: LD_INT 4
39103: PUSH
39104: LD_INT 5
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: ST_TO_ADDR
39114: GO 40117
39116: LD_INT 3
39118: DOUBLE
39119: EQUAL
39120: IFTRUE 39124
39122: GO 39154
39124: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39125: LD_ADDR_VAR 0 3
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: LD_INT 3
39138: PUSH
39139: LD_INT 4
39141: PUSH
39142: LD_INT 5
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: ST_TO_ADDR
39152: GO 40117
39154: LD_INT 11
39156: DOUBLE
39157: EQUAL
39158: IFTRUE 39162
39160: GO 39192
39162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39163: LD_ADDR_VAR 0 3
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 3
39176: PUSH
39177: LD_INT 4
39179: PUSH
39180: LD_INT 5
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: ST_TO_ADDR
39190: GO 40117
39192: LD_INT 4
39194: DOUBLE
39195: EQUAL
39196: IFTRUE 39200
39198: GO 39226
39200: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 3
39211: PUSH
39212: LD_INT 4
39214: PUSH
39215: LD_INT 5
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: ST_TO_ADDR
39224: GO 40117
39226: LD_INT 5
39228: DOUBLE
39229: EQUAL
39230: IFTRUE 39234
39232: GO 39260
39234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39235: LD_ADDR_VAR 0 3
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: LD_INT 4
39248: PUSH
39249: LD_INT 5
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: ST_TO_ADDR
39258: GO 40117
39260: LD_INT 9
39262: DOUBLE
39263: EQUAL
39264: IFTRUE 39268
39266: GO 39294
39268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39269: LD_ADDR_VAR 0 3
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: LD_INT 4
39282: PUSH
39283: LD_INT 5
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: ST_TO_ADDR
39292: GO 40117
39294: LD_INT 7
39296: DOUBLE
39297: EQUAL
39298: IFTRUE 39302
39300: GO 39328
39302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: LD_INT 4
39316: PUSH
39317: LD_INT 5
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: ST_TO_ADDR
39326: GO 40117
39328: LD_INT 12
39330: DOUBLE
39331: EQUAL
39332: IFTRUE 39336
39334: GO 39362
39336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39337: LD_ADDR_VAR 0 3
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: LD_INT 4
39350: PUSH
39351: LD_INT 5
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
39360: GO 40117
39362: LD_INT 13
39364: DOUBLE
39365: EQUAL
39366: IFTRUE 39370
39368: GO 39396
39370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 3
39381: PUSH
39382: LD_INT 4
39384: PUSH
39385: LD_INT 5
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
39394: GO 40117
39396: LD_INT 14
39398: DOUBLE
39399: EQUAL
39400: IFTRUE 39404
39402: GO 39422
39404: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39405: LD_ADDR_VAR 0 3
39409: PUSH
39410: LD_INT 4
39412: PUSH
39413: LD_INT 5
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: ST_TO_ADDR
39420: GO 40117
39422: LD_INT 6
39424: DOUBLE
39425: EQUAL
39426: IFTRUE 39430
39428: GO 39448
39430: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39431: LD_ADDR_VAR 0 3
39435: PUSH
39436: LD_INT 4
39438: PUSH
39439: LD_INT 5
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: ST_TO_ADDR
39446: GO 40117
39448: LD_INT 10
39450: DOUBLE
39451: EQUAL
39452: IFTRUE 39456
39454: GO 39474
39456: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39457: LD_ADDR_VAR 0 3
39461: PUSH
39462: LD_INT 4
39464: PUSH
39465: LD_INT 5
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: ST_TO_ADDR
39472: GO 40117
39474: LD_INT 22
39476: DOUBLE
39477: EQUAL
39478: IFTRUE 39482
39480: GO 39508
39482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39483: LD_ADDR_VAR 0 3
39487: PUSH
39488: LD_INT 11
39490: PUSH
39491: LD_INT 12
39493: PUSH
39494: LD_INT 13
39496: PUSH
39497: LD_INT 14
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: ST_TO_ADDR
39506: GO 40117
39508: LD_INT 23
39510: DOUBLE
39511: EQUAL
39512: IFTRUE 39516
39514: GO 39542
39516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39517: LD_ADDR_VAR 0 3
39521: PUSH
39522: LD_INT 11
39524: PUSH
39525: LD_INT 12
39527: PUSH
39528: LD_INT 13
39530: PUSH
39531: LD_INT 14
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
39540: GO 40117
39542: LD_INT 24
39544: DOUBLE
39545: EQUAL
39546: IFTRUE 39550
39548: GO 39576
39550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39551: LD_ADDR_VAR 0 3
39555: PUSH
39556: LD_INT 11
39558: PUSH
39559: LD_INT 12
39561: PUSH
39562: LD_INT 13
39564: PUSH
39565: LD_INT 14
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: ST_TO_ADDR
39574: GO 40117
39576: LD_INT 30
39578: DOUBLE
39579: EQUAL
39580: IFTRUE 39584
39582: GO 39610
39584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39585: LD_ADDR_VAR 0 3
39589: PUSH
39590: LD_INT 11
39592: PUSH
39593: LD_INT 12
39595: PUSH
39596: LD_INT 13
39598: PUSH
39599: LD_INT 14
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: ST_TO_ADDR
39608: GO 40117
39610: LD_INT 25
39612: DOUBLE
39613: EQUAL
39614: IFTRUE 39618
39616: GO 39636
39618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39619: LD_ADDR_VAR 0 3
39623: PUSH
39624: LD_INT 13
39626: PUSH
39627: LD_INT 14
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: ST_TO_ADDR
39634: GO 40117
39636: LD_INT 27
39638: DOUBLE
39639: EQUAL
39640: IFTRUE 39644
39642: GO 39662
39644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39645: LD_ADDR_VAR 0 3
39649: PUSH
39650: LD_INT 13
39652: PUSH
39653: LD_INT 14
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: ST_TO_ADDR
39660: GO 40117
39662: LD_INT 92
39664: DOUBLE
39665: EQUAL
39666: IFTRUE 39670
39668: GO 39696
39670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39671: LD_ADDR_VAR 0 3
39675: PUSH
39676: LD_INT 11
39678: PUSH
39679: LD_INT 12
39681: PUSH
39682: LD_INT 13
39684: PUSH
39685: LD_INT 14
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: ST_TO_ADDR
39694: GO 40117
39696: LD_INT 28
39698: DOUBLE
39699: EQUAL
39700: IFTRUE 39704
39702: GO 39722
39704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39705: LD_ADDR_VAR 0 3
39709: PUSH
39710: LD_INT 13
39712: PUSH
39713: LD_INT 14
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: ST_TO_ADDR
39720: GO 40117
39722: LD_INT 29
39724: DOUBLE
39725: EQUAL
39726: IFTRUE 39730
39728: GO 39748
39730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39731: LD_ADDR_VAR 0 3
39735: PUSH
39736: LD_INT 13
39738: PUSH
39739: LD_INT 14
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: ST_TO_ADDR
39746: GO 40117
39748: LD_INT 31
39750: DOUBLE
39751: EQUAL
39752: IFTRUE 39756
39754: GO 39774
39756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39757: LD_ADDR_VAR 0 3
39761: PUSH
39762: LD_INT 13
39764: PUSH
39765: LD_INT 14
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: ST_TO_ADDR
39772: GO 40117
39774: LD_INT 26
39776: DOUBLE
39777: EQUAL
39778: IFTRUE 39782
39780: GO 39800
39782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39783: LD_ADDR_VAR 0 3
39787: PUSH
39788: LD_INT 13
39790: PUSH
39791: LD_INT 14
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: ST_TO_ADDR
39798: GO 40117
39800: LD_INT 42
39802: DOUBLE
39803: EQUAL
39804: IFTRUE 39808
39806: GO 39834
39808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39809: LD_ADDR_VAR 0 3
39813: PUSH
39814: LD_INT 21
39816: PUSH
39817: LD_INT 22
39819: PUSH
39820: LD_INT 23
39822: PUSH
39823: LD_INT 24
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: ST_TO_ADDR
39832: GO 40117
39834: LD_INT 43
39836: DOUBLE
39837: EQUAL
39838: IFTRUE 39842
39840: GO 39868
39842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39843: LD_ADDR_VAR 0 3
39847: PUSH
39848: LD_INT 21
39850: PUSH
39851: LD_INT 22
39853: PUSH
39854: LD_INT 23
39856: PUSH
39857: LD_INT 24
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: ST_TO_ADDR
39866: GO 40117
39868: LD_INT 44
39870: DOUBLE
39871: EQUAL
39872: IFTRUE 39876
39874: GO 39902
39876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39877: LD_ADDR_VAR 0 3
39881: PUSH
39882: LD_INT 21
39884: PUSH
39885: LD_INT 22
39887: PUSH
39888: LD_INT 23
39890: PUSH
39891: LD_INT 24
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: ST_TO_ADDR
39900: GO 40117
39902: LD_INT 45
39904: DOUBLE
39905: EQUAL
39906: IFTRUE 39910
39908: GO 39936
39910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39911: LD_ADDR_VAR 0 3
39915: PUSH
39916: LD_INT 21
39918: PUSH
39919: LD_INT 22
39921: PUSH
39922: LD_INT 23
39924: PUSH
39925: LD_INT 24
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: ST_TO_ADDR
39934: GO 40117
39936: LD_INT 49
39938: DOUBLE
39939: EQUAL
39940: IFTRUE 39944
39942: GO 39970
39944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39945: LD_ADDR_VAR 0 3
39949: PUSH
39950: LD_INT 21
39952: PUSH
39953: LD_INT 22
39955: PUSH
39956: LD_INT 23
39958: PUSH
39959: LD_INT 24
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: ST_TO_ADDR
39968: GO 40117
39970: LD_INT 51
39972: DOUBLE
39973: EQUAL
39974: IFTRUE 39978
39976: GO 40004
39978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_INT 21
39986: PUSH
39987: LD_INT 22
39989: PUSH
39990: LD_INT 23
39992: PUSH
39993: LD_INT 24
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
40002: GO 40117
40004: LD_INT 52
40006: DOUBLE
40007: EQUAL
40008: IFTRUE 40012
40010: GO 40038
40012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40013: LD_ADDR_VAR 0 3
40017: PUSH
40018: LD_INT 21
40020: PUSH
40021: LD_INT 22
40023: PUSH
40024: LD_INT 23
40026: PUSH
40027: LD_INT 24
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: ST_TO_ADDR
40036: GO 40117
40038: LD_INT 53
40040: DOUBLE
40041: EQUAL
40042: IFTRUE 40046
40044: GO 40064
40046: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40047: LD_ADDR_VAR 0 3
40051: PUSH
40052: LD_INT 23
40054: PUSH
40055: LD_INT 24
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: ST_TO_ADDR
40062: GO 40117
40064: LD_INT 46
40066: DOUBLE
40067: EQUAL
40068: IFTRUE 40072
40070: GO 40090
40072: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40073: LD_ADDR_VAR 0 3
40077: PUSH
40078: LD_INT 23
40080: PUSH
40081: LD_INT 24
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: ST_TO_ADDR
40088: GO 40117
40090: LD_INT 47
40092: DOUBLE
40093: EQUAL
40094: IFTRUE 40098
40096: GO 40116
40098: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40099: LD_ADDR_VAR 0 3
40103: PUSH
40104: LD_INT 23
40106: PUSH
40107: LD_INT 24
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: ST_TO_ADDR
40114: GO 40117
40116: POP
// result := ( chassis in result ) ;
40117: LD_ADDR_VAR 0 3
40121: PUSH
40122: LD_VAR 0 1
40126: PUSH
40127: LD_VAR 0 3
40131: IN
40132: ST_TO_ADDR
// end ;
40133: LD_VAR 0 3
40137: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40138: LD_INT 0
40140: PPUSH
40141: PPUSH
40142: PPUSH
40143: PPUSH
40144: PPUSH
40145: PPUSH
40146: PPUSH
// result := array ;
40147: LD_ADDR_VAR 0 5
40151: PUSH
40152: LD_VAR 0 1
40156: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40157: LD_VAR 0 1
40161: NOT
40162: PUSH
40163: LD_VAR 0 2
40167: NOT
40168: OR
40169: PUSH
40170: LD_VAR 0 3
40174: NOT
40175: OR
40176: PUSH
40177: LD_VAR 0 2
40181: PUSH
40182: LD_VAR 0 1
40186: GREATER
40187: OR
40188: PUSH
40189: LD_VAR 0 3
40193: PUSH
40194: LD_VAR 0 1
40198: GREATER
40199: OR
40200: IFFALSE 40204
// exit ;
40202: GO 40500
// if direction then
40204: LD_VAR 0 4
40208: IFFALSE 40272
// begin d := 1 ;
40210: LD_ADDR_VAR 0 9
40214: PUSH
40215: LD_INT 1
40217: ST_TO_ADDR
// if i_from > i_to then
40218: LD_VAR 0 2
40222: PUSH
40223: LD_VAR 0 3
40227: GREATER
40228: IFFALSE 40254
// length := ( array - i_from ) + i_to else
40230: LD_ADDR_VAR 0 11
40234: PUSH
40235: LD_VAR 0 1
40239: PUSH
40240: LD_VAR 0 2
40244: MINUS
40245: PUSH
40246: LD_VAR 0 3
40250: PLUS
40251: ST_TO_ADDR
40252: GO 40270
// length := i_to - i_from ;
40254: LD_ADDR_VAR 0 11
40258: PUSH
40259: LD_VAR 0 3
40263: PUSH
40264: LD_VAR 0 2
40268: MINUS
40269: ST_TO_ADDR
// end else
40270: GO 40333
// begin d := - 1 ;
40272: LD_ADDR_VAR 0 9
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: ST_TO_ADDR
// if i_from > i_to then
40281: LD_VAR 0 2
40285: PUSH
40286: LD_VAR 0 3
40290: GREATER
40291: IFFALSE 40311
// length := i_from - i_to else
40293: LD_ADDR_VAR 0 11
40297: PUSH
40298: LD_VAR 0 2
40302: PUSH
40303: LD_VAR 0 3
40307: MINUS
40308: ST_TO_ADDR
40309: GO 40333
// length := ( array - i_to ) + i_from ;
40311: LD_ADDR_VAR 0 11
40315: PUSH
40316: LD_VAR 0 1
40320: PUSH
40321: LD_VAR 0 3
40325: MINUS
40326: PUSH
40327: LD_VAR 0 2
40331: PLUS
40332: ST_TO_ADDR
// end ; if not length then
40333: LD_VAR 0 11
40337: NOT
40338: IFFALSE 40342
// exit ;
40340: GO 40500
// tmp := array ;
40342: LD_ADDR_VAR 0 10
40346: PUSH
40347: LD_VAR 0 1
40351: ST_TO_ADDR
// for i = 1 to length do
40352: LD_ADDR_VAR 0 6
40356: PUSH
40357: DOUBLE
40358: LD_INT 1
40360: DEC
40361: ST_TO_ADDR
40362: LD_VAR 0 11
40366: PUSH
40367: FOR_TO
40368: IFFALSE 40488
// begin for j = 1 to array do
40370: LD_ADDR_VAR 0 7
40374: PUSH
40375: DOUBLE
40376: LD_INT 1
40378: DEC
40379: ST_TO_ADDR
40380: LD_VAR 0 1
40384: PUSH
40385: FOR_TO
40386: IFFALSE 40474
// begin k := j + d ;
40388: LD_ADDR_VAR 0 8
40392: PUSH
40393: LD_VAR 0 7
40397: PUSH
40398: LD_VAR 0 9
40402: PLUS
40403: ST_TO_ADDR
// if k > array then
40404: LD_VAR 0 8
40408: PUSH
40409: LD_VAR 0 1
40413: GREATER
40414: IFFALSE 40424
// k := 1 ;
40416: LD_ADDR_VAR 0 8
40420: PUSH
40421: LD_INT 1
40423: ST_TO_ADDR
// if not k then
40424: LD_VAR 0 8
40428: NOT
40429: IFFALSE 40441
// k := array ;
40431: LD_ADDR_VAR 0 8
40435: PUSH
40436: LD_VAR 0 1
40440: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40441: LD_ADDR_VAR 0 10
40445: PUSH
40446: LD_VAR 0 10
40450: PPUSH
40451: LD_VAR 0 8
40455: PPUSH
40456: LD_VAR 0 1
40460: PUSH
40461: LD_VAR 0 7
40465: ARRAY
40466: PPUSH
40467: CALL_OW 1
40471: ST_TO_ADDR
// end ;
40472: GO 40385
40474: POP
40475: POP
// array := tmp ;
40476: LD_ADDR_VAR 0 1
40480: PUSH
40481: LD_VAR 0 10
40485: ST_TO_ADDR
// end ;
40486: GO 40367
40488: POP
40489: POP
// result := array ;
40490: LD_ADDR_VAR 0 5
40494: PUSH
40495: LD_VAR 0 1
40499: ST_TO_ADDR
// end ;
40500: LD_VAR 0 5
40504: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40505: LD_INT 0
40507: PPUSH
40508: PPUSH
// result := 0 ;
40509: LD_ADDR_VAR 0 3
40513: PUSH
40514: LD_INT 0
40516: ST_TO_ADDR
// if not array or not value in array then
40517: LD_VAR 0 1
40521: NOT
40522: PUSH
40523: LD_VAR 0 2
40527: PUSH
40528: LD_VAR 0 1
40532: IN
40533: NOT
40534: OR
40535: IFFALSE 40539
// exit ;
40537: GO 40593
// for i = 1 to array do
40539: LD_ADDR_VAR 0 4
40543: PUSH
40544: DOUBLE
40545: LD_INT 1
40547: DEC
40548: ST_TO_ADDR
40549: LD_VAR 0 1
40553: PUSH
40554: FOR_TO
40555: IFFALSE 40591
// if value = array [ i ] then
40557: LD_VAR 0 2
40561: PUSH
40562: LD_VAR 0 1
40566: PUSH
40567: LD_VAR 0 4
40571: ARRAY
40572: EQUAL
40573: IFFALSE 40589
// begin result := i ;
40575: LD_ADDR_VAR 0 3
40579: PUSH
40580: LD_VAR 0 4
40584: ST_TO_ADDR
// exit ;
40585: POP
40586: POP
40587: GO 40593
// end ;
40589: GO 40554
40591: POP
40592: POP
// end ;
40593: LD_VAR 0 3
40597: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40598: LD_INT 0
40600: PPUSH
// vc_chassis := chassis ;
40601: LD_ADDR_OWVAR 37
40605: PUSH
40606: LD_VAR 0 1
40610: ST_TO_ADDR
// vc_engine := engine ;
40611: LD_ADDR_OWVAR 39
40615: PUSH
40616: LD_VAR 0 2
40620: ST_TO_ADDR
// vc_control := control ;
40621: LD_ADDR_OWVAR 38
40625: PUSH
40626: LD_VAR 0 3
40630: ST_TO_ADDR
// vc_weapon := weapon ;
40631: LD_ADDR_OWVAR 40
40635: PUSH
40636: LD_VAR 0 4
40640: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40641: LD_ADDR_OWVAR 41
40645: PUSH
40646: LD_VAR 0 5
40650: ST_TO_ADDR
// end ;
40651: LD_VAR 0 6
40655: RET
// export function WantPlant ( unit ) ; var task ; begin
40656: LD_INT 0
40658: PPUSH
40659: PPUSH
// result := false ;
40660: LD_ADDR_VAR 0 2
40664: PUSH
40665: LD_INT 0
40667: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40668: LD_ADDR_VAR 0 3
40672: PUSH
40673: LD_VAR 0 1
40677: PPUSH
40678: CALL_OW 437
40682: ST_TO_ADDR
// if task then
40683: LD_VAR 0 3
40687: IFFALSE 40715
// if task [ 1 ] [ 1 ] = p then
40689: LD_VAR 0 3
40693: PUSH
40694: LD_INT 1
40696: ARRAY
40697: PUSH
40698: LD_INT 1
40700: ARRAY
40701: PUSH
40702: LD_STRING p
40704: EQUAL
40705: IFFALSE 40715
// result := true ;
40707: LD_ADDR_VAR 0 2
40711: PUSH
40712: LD_INT 1
40714: ST_TO_ADDR
// end ;
40715: LD_VAR 0 2
40719: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40720: LD_INT 0
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
// if pos < 1 then
40726: LD_VAR 0 2
40730: PUSH
40731: LD_INT 1
40733: LESS
40734: IFFALSE 40738
// exit ;
40736: GO 41041
// if pos = 1 then
40738: LD_VAR 0 2
40742: PUSH
40743: LD_INT 1
40745: EQUAL
40746: IFFALSE 40779
// result := Replace ( arr , pos [ 1 ] , value ) else
40748: LD_ADDR_VAR 0 4
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: LD_VAR 0 2
40762: PUSH
40763: LD_INT 1
40765: ARRAY
40766: PPUSH
40767: LD_VAR 0 3
40771: PPUSH
40772: CALL_OW 1
40776: ST_TO_ADDR
40777: GO 41041
// begin tmp := arr ;
40779: LD_ADDR_VAR 0 6
40783: PUSH
40784: LD_VAR 0 1
40788: ST_TO_ADDR
// s_arr := [ tmp ] ;
40789: LD_ADDR_VAR 0 7
40793: PUSH
40794: LD_VAR 0 6
40798: PUSH
40799: EMPTY
40800: LIST
40801: ST_TO_ADDR
// for i = 1 to pos - 1 do
40802: LD_ADDR_VAR 0 5
40806: PUSH
40807: DOUBLE
40808: LD_INT 1
40810: DEC
40811: ST_TO_ADDR
40812: LD_VAR 0 2
40816: PUSH
40817: LD_INT 1
40819: MINUS
40820: PUSH
40821: FOR_TO
40822: IFFALSE 40867
// begin tmp := tmp [ pos [ i ] ] ;
40824: LD_ADDR_VAR 0 6
40828: PUSH
40829: LD_VAR 0 6
40833: PUSH
40834: LD_VAR 0 2
40838: PUSH
40839: LD_VAR 0 5
40843: ARRAY
40844: ARRAY
40845: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40846: LD_ADDR_VAR 0 7
40850: PUSH
40851: LD_VAR 0 7
40855: PUSH
40856: LD_VAR 0 6
40860: PUSH
40861: EMPTY
40862: LIST
40863: ADD
40864: ST_TO_ADDR
// end ;
40865: GO 40821
40867: POP
40868: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40869: LD_ADDR_VAR 0 6
40873: PUSH
40874: LD_VAR 0 6
40878: PPUSH
40879: LD_VAR 0 2
40883: PUSH
40884: LD_VAR 0 2
40888: ARRAY
40889: PPUSH
40890: LD_VAR 0 3
40894: PPUSH
40895: CALL_OW 1
40899: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40900: LD_ADDR_VAR 0 7
40904: PUSH
40905: LD_VAR 0 7
40909: PPUSH
40910: LD_VAR 0 7
40914: PPUSH
40915: LD_VAR 0 6
40919: PPUSH
40920: CALL_OW 1
40924: ST_TO_ADDR
// for i = s_arr downto 2 do
40925: LD_ADDR_VAR 0 5
40929: PUSH
40930: DOUBLE
40931: LD_VAR 0 7
40935: INC
40936: ST_TO_ADDR
40937: LD_INT 2
40939: PUSH
40940: FOR_DOWNTO
40941: IFFALSE 41025
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40943: LD_ADDR_VAR 0 6
40947: PUSH
40948: LD_VAR 0 7
40952: PUSH
40953: LD_VAR 0 5
40957: PUSH
40958: LD_INT 1
40960: MINUS
40961: ARRAY
40962: PPUSH
40963: LD_VAR 0 2
40967: PUSH
40968: LD_VAR 0 5
40972: PUSH
40973: LD_INT 1
40975: MINUS
40976: ARRAY
40977: PPUSH
40978: LD_VAR 0 7
40982: PUSH
40983: LD_VAR 0 5
40987: ARRAY
40988: PPUSH
40989: CALL_OW 1
40993: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40994: LD_ADDR_VAR 0 7
40998: PUSH
40999: LD_VAR 0 7
41003: PPUSH
41004: LD_VAR 0 5
41008: PUSH
41009: LD_INT 1
41011: MINUS
41012: PPUSH
41013: LD_VAR 0 6
41017: PPUSH
41018: CALL_OW 1
41022: ST_TO_ADDR
// end ;
41023: GO 40940
41025: POP
41026: POP
// result := s_arr [ 1 ] ;
41027: LD_ADDR_VAR 0 4
41031: PUSH
41032: LD_VAR 0 7
41036: PUSH
41037: LD_INT 1
41039: ARRAY
41040: ST_TO_ADDR
// end ; end ;
41041: LD_VAR 0 4
41045: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41046: LD_INT 0
41048: PPUSH
41049: PPUSH
// if not list then
41050: LD_VAR 0 1
41054: NOT
41055: IFFALSE 41059
// exit ;
41057: GO 41150
// i := list [ pos1 ] ;
41059: LD_ADDR_VAR 0 5
41063: PUSH
41064: LD_VAR 0 1
41068: PUSH
41069: LD_VAR 0 2
41073: ARRAY
41074: ST_TO_ADDR
// if not i then
41075: LD_VAR 0 5
41079: NOT
41080: IFFALSE 41084
// exit ;
41082: GO 41150
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41084: LD_ADDR_VAR 0 1
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: LD_VAR 0 2
41098: PPUSH
41099: LD_VAR 0 1
41103: PUSH
41104: LD_VAR 0 3
41108: ARRAY
41109: PPUSH
41110: CALL_OW 1
41114: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41115: LD_ADDR_VAR 0 1
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: LD_VAR 0 3
41129: PPUSH
41130: LD_VAR 0 5
41134: PPUSH
41135: CALL_OW 1
41139: ST_TO_ADDR
// result := list ;
41140: LD_ADDR_VAR 0 4
41144: PUSH
41145: LD_VAR 0 1
41149: ST_TO_ADDR
// end ;
41150: LD_VAR 0 4
41154: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41155: LD_INT 0
41157: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41158: LD_ADDR_VAR 0 5
41162: PUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 250
41172: PPUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 251
41182: PPUSH
41183: LD_VAR 0 2
41187: PPUSH
41188: LD_VAR 0 3
41192: PPUSH
41193: LD_VAR 0 4
41197: PPUSH
41198: CALL 41576 0 5
41202: ST_TO_ADDR
// end ;
41203: LD_VAR 0 5
41207: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41208: LD_INT 0
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
// if not list or not unit then
41214: LD_VAR 0 2
41218: NOT
41219: PUSH
41220: LD_VAR 0 1
41224: NOT
41225: OR
41226: IFFALSE 41230
// exit ;
41228: GO 41571
// result := [ ] ;
41230: LD_ADDR_VAR 0 5
41234: PUSH
41235: EMPTY
41236: ST_TO_ADDR
// for i in list do
41237: LD_ADDR_VAR 0 6
41241: PUSH
41242: LD_VAR 0 2
41246: PUSH
41247: FOR_IN
41248: IFFALSE 41466
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41250: LD_ADDR_VAR 0 8
41254: PUSH
41255: LD_VAR 0 1
41259: PPUSH
41260: LD_VAR 0 6
41264: PUSH
41265: LD_INT 1
41267: ARRAY
41268: PPUSH
41269: LD_VAR 0 6
41273: PUSH
41274: LD_INT 2
41276: ARRAY
41277: PPUSH
41278: CALL_OW 297
41282: ST_TO_ADDR
// if not Count ( result ) then
41283: LD_VAR 0 5
41287: PPUSH
41288: CALL 37860 0 1
41292: NOT
41293: IFFALSE 41326
// begin result := Join ( result , [ i , tmp ] ) ;
41295: LD_ADDR_VAR 0 5
41299: PUSH
41300: LD_VAR 0 5
41304: PPUSH
41305: LD_VAR 0 6
41309: PUSH
41310: LD_VAR 0 8
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PPUSH
41319: CALL 73449 0 2
41323: ST_TO_ADDR
// continue ;
41324: GO 41247
// end ; if result [ result ] [ 2 ] <= tmp then
41326: LD_VAR 0 5
41330: PUSH
41331: LD_VAR 0 5
41335: ARRAY
41336: PUSH
41337: LD_INT 2
41339: ARRAY
41340: PUSH
41341: LD_VAR 0 8
41345: LESSEQUAL
41346: IFFALSE 41379
// result := Join ( result , [ i , tmp ] ) else
41348: LD_ADDR_VAR 0 5
41352: PUSH
41353: LD_VAR 0 5
41357: PPUSH
41358: LD_VAR 0 6
41362: PUSH
41363: LD_VAR 0 8
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PPUSH
41372: CALL 73449 0 2
41376: ST_TO_ADDR
41377: GO 41464
// begin for j := 1 to Count ( result ) do
41379: LD_ADDR_VAR 0 7
41383: PUSH
41384: DOUBLE
41385: LD_INT 1
41387: DEC
41388: ST_TO_ADDR
41389: LD_VAR 0 5
41393: PPUSH
41394: CALL 37860 0 1
41398: PUSH
41399: FOR_TO
41400: IFFALSE 41462
// begin if tmp < result [ j ] [ 2 ] then
41402: LD_VAR 0 8
41406: PUSH
41407: LD_VAR 0 5
41411: PUSH
41412: LD_VAR 0 7
41416: ARRAY
41417: PUSH
41418: LD_INT 2
41420: ARRAY
41421: LESS
41422: IFFALSE 41460
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41424: LD_ADDR_VAR 0 5
41428: PUSH
41429: LD_VAR 0 5
41433: PPUSH
41434: LD_VAR 0 7
41438: PPUSH
41439: LD_VAR 0 6
41443: PUSH
41444: LD_VAR 0 8
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PPUSH
41453: CALL_OW 2
41457: ST_TO_ADDR
// break ;
41458: GO 41462
// end ; end ;
41460: GO 41399
41462: POP
41463: POP
// end ; end ;
41464: GO 41247
41466: POP
41467: POP
// if result and not asc then
41468: LD_VAR 0 5
41472: PUSH
41473: LD_VAR 0 3
41477: NOT
41478: AND
41479: IFFALSE 41496
// result := ReverseArray ( result ) ;
41481: LD_ADDR_VAR 0 5
41485: PUSH
41486: LD_VAR 0 5
41490: PPUSH
41491: CALL 68736 0 1
41495: ST_TO_ADDR
// tmp := [ ] ;
41496: LD_ADDR_VAR 0 8
41500: PUSH
41501: EMPTY
41502: ST_TO_ADDR
// if mode then
41503: LD_VAR 0 4
41507: IFFALSE 41571
// begin for i := 1 to result do
41509: LD_ADDR_VAR 0 6
41513: PUSH
41514: DOUBLE
41515: LD_INT 1
41517: DEC
41518: ST_TO_ADDR
41519: LD_VAR 0 5
41523: PUSH
41524: FOR_TO
41525: IFFALSE 41559
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
41527: LD_ADDR_VAR 0 8
41531: PUSH
41532: LD_VAR 0 8
41536: PPUSH
41537: LD_VAR 0 5
41541: PUSH
41542: LD_VAR 0 6
41546: ARRAY
41547: PUSH
41548: LD_INT 1
41550: ARRAY
41551: PPUSH
41552: CALL 73449 0 2
41556: ST_TO_ADDR
41557: GO 41524
41559: POP
41560: POP
// result := tmp ;
41561: LD_ADDR_VAR 0 5
41565: PUSH
41566: LD_VAR 0 8
41570: ST_TO_ADDR
// end ; end ;
41571: LD_VAR 0 5
41575: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41576: LD_INT 0
41578: PPUSH
41579: PPUSH
41580: PPUSH
41581: PPUSH
// if not list then
41582: LD_VAR 0 3
41586: NOT
41587: IFFALSE 41591
// exit ;
41589: GO 41979
// result := [ ] ;
41591: LD_ADDR_VAR 0 6
41595: PUSH
41596: EMPTY
41597: ST_TO_ADDR
// for i in list do
41598: LD_ADDR_VAR 0 7
41602: PUSH
41603: LD_VAR 0 3
41607: PUSH
41608: FOR_IN
41609: IFFALSE 41811
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41611: LD_ADDR_VAR 0 9
41615: PUSH
41616: LD_VAR 0 7
41620: PPUSH
41621: LD_VAR 0 1
41625: PPUSH
41626: LD_VAR 0 2
41630: PPUSH
41631: CALL_OW 297
41635: ST_TO_ADDR
// if not result then
41636: LD_VAR 0 6
41640: NOT
41641: IFFALSE 41667
// result := [ [ i , tmp ] ] else
41643: LD_ADDR_VAR 0 6
41647: PUSH
41648: LD_VAR 0 7
41652: PUSH
41653: LD_VAR 0 9
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: EMPTY
41663: LIST
41664: ST_TO_ADDR
41665: GO 41809
// begin if result [ result ] [ 2 ] < tmp then
41667: LD_VAR 0 6
41671: PUSH
41672: LD_VAR 0 6
41676: ARRAY
41677: PUSH
41678: LD_INT 2
41680: ARRAY
41681: PUSH
41682: LD_VAR 0 9
41686: LESS
41687: IFFALSE 41729
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41689: LD_ADDR_VAR 0 6
41693: PUSH
41694: LD_VAR 0 6
41698: PPUSH
41699: LD_VAR 0 6
41703: PUSH
41704: LD_INT 1
41706: PLUS
41707: PPUSH
41708: LD_VAR 0 7
41712: PUSH
41713: LD_VAR 0 9
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PPUSH
41722: CALL_OW 2
41726: ST_TO_ADDR
41727: GO 41809
// for j = 1 to result do
41729: LD_ADDR_VAR 0 8
41733: PUSH
41734: DOUBLE
41735: LD_INT 1
41737: DEC
41738: ST_TO_ADDR
41739: LD_VAR 0 6
41743: PUSH
41744: FOR_TO
41745: IFFALSE 41807
// begin if tmp < result [ j ] [ 2 ] then
41747: LD_VAR 0 9
41751: PUSH
41752: LD_VAR 0 6
41756: PUSH
41757: LD_VAR 0 8
41761: ARRAY
41762: PUSH
41763: LD_INT 2
41765: ARRAY
41766: LESS
41767: IFFALSE 41805
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41769: LD_ADDR_VAR 0 6
41773: PUSH
41774: LD_VAR 0 6
41778: PPUSH
41779: LD_VAR 0 8
41783: PPUSH
41784: LD_VAR 0 7
41788: PUSH
41789: LD_VAR 0 9
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PPUSH
41798: CALL_OW 2
41802: ST_TO_ADDR
// break ;
41803: GO 41807
// end ; end ;
41805: GO 41744
41807: POP
41808: POP
// end ; end ;
41809: GO 41608
41811: POP
41812: POP
// if result and not asc then
41813: LD_VAR 0 6
41817: PUSH
41818: LD_VAR 0 4
41822: NOT
41823: AND
41824: IFFALSE 41899
// begin tmp := result ;
41826: LD_ADDR_VAR 0 9
41830: PUSH
41831: LD_VAR 0 6
41835: ST_TO_ADDR
// for i = tmp downto 1 do
41836: LD_ADDR_VAR 0 7
41840: PUSH
41841: DOUBLE
41842: LD_VAR 0 9
41846: INC
41847: ST_TO_ADDR
41848: LD_INT 1
41850: PUSH
41851: FOR_DOWNTO
41852: IFFALSE 41897
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41854: LD_ADDR_VAR 0 6
41858: PUSH
41859: LD_VAR 0 6
41863: PPUSH
41864: LD_VAR 0 9
41868: PUSH
41869: LD_VAR 0 7
41873: MINUS
41874: PUSH
41875: LD_INT 1
41877: PLUS
41878: PPUSH
41879: LD_VAR 0 9
41883: PUSH
41884: LD_VAR 0 7
41888: ARRAY
41889: PPUSH
41890: CALL_OW 1
41894: ST_TO_ADDR
41895: GO 41851
41897: POP
41898: POP
// end ; tmp := [ ] ;
41899: LD_ADDR_VAR 0 9
41903: PUSH
41904: EMPTY
41905: ST_TO_ADDR
// if mode then
41906: LD_VAR 0 5
41910: IFFALSE 41979
// begin for i = 1 to result do
41912: LD_ADDR_VAR 0 7
41916: PUSH
41917: DOUBLE
41918: LD_INT 1
41920: DEC
41921: ST_TO_ADDR
41922: LD_VAR 0 6
41926: PUSH
41927: FOR_TO
41928: IFFALSE 41967
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41930: LD_ADDR_VAR 0 9
41934: PUSH
41935: LD_VAR 0 9
41939: PPUSH
41940: LD_VAR 0 7
41944: PPUSH
41945: LD_VAR 0 6
41949: PUSH
41950: LD_VAR 0 7
41954: ARRAY
41955: PUSH
41956: LD_INT 1
41958: ARRAY
41959: PPUSH
41960: CALL_OW 1
41964: ST_TO_ADDR
41965: GO 41927
41967: POP
41968: POP
// result := tmp ;
41969: LD_ADDR_VAR 0 6
41973: PUSH
41974: LD_VAR 0 9
41978: ST_TO_ADDR
// end ; end ;
41979: LD_VAR 0 6
41983: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41984: LD_INT 0
41986: PPUSH
41987: PPUSH
41988: PPUSH
41989: PPUSH
41990: PPUSH
41991: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41992: LD_ADDR_VAR 0 5
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: EMPTY
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: ST_TO_ADDR
// if not x or not y then
42014: LD_VAR 0 2
42018: NOT
42019: PUSH
42020: LD_VAR 0 3
42024: NOT
42025: OR
42026: IFFALSE 42030
// exit ;
42028: GO 43680
// if not range then
42030: LD_VAR 0 4
42034: NOT
42035: IFFALSE 42045
// range := 10 ;
42037: LD_ADDR_VAR 0 4
42041: PUSH
42042: LD_INT 10
42044: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42045: LD_ADDR_VAR 0 8
42049: PUSH
42050: LD_INT 81
42052: PUSH
42053: LD_VAR 0 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 92
42064: PUSH
42065: LD_VAR 0 2
42069: PUSH
42070: LD_VAR 0 3
42074: PUSH
42075: LD_VAR 0 4
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 3
42088: PUSH
42089: LD_INT 21
42091: PUSH
42092: LD_INT 3
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: PPUSH
42108: CALL_OW 69
42112: ST_TO_ADDR
// if not tmp then
42113: LD_VAR 0 8
42117: NOT
42118: IFFALSE 42122
// exit ;
42120: GO 43680
// for i in tmp do
42122: LD_ADDR_VAR 0 6
42126: PUSH
42127: LD_VAR 0 8
42131: PUSH
42132: FOR_IN
42133: IFFALSE 43655
// begin points := [ 0 , 0 , 0 ] ;
42135: LD_ADDR_VAR 0 9
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: LIST
42153: ST_TO_ADDR
// bpoints := 1 ;
42154: LD_ADDR_VAR 0 10
42158: PUSH
42159: LD_INT 1
42161: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42162: LD_VAR 0 6
42166: PPUSH
42167: CALL_OW 247
42171: PUSH
42172: LD_INT 1
42174: DOUBLE
42175: EQUAL
42176: IFTRUE 42180
42178: GO 42758
42180: POP
// begin if GetClass ( i ) = 1 then
42181: LD_VAR 0 6
42185: PPUSH
42186: CALL_OW 257
42190: PUSH
42191: LD_INT 1
42193: EQUAL
42194: IFFALSE 42215
// points := [ 10 , 5 , 3 ] ;
42196: LD_ADDR_VAR 0 9
42200: PUSH
42201: LD_INT 10
42203: PUSH
42204: LD_INT 5
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42215: LD_VAR 0 6
42219: PPUSH
42220: CALL_OW 257
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: LD_INT 3
42230: PUSH
42231: LD_INT 4
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: IN
42239: IFFALSE 42260
// points := [ 3 , 2 , 1 ] ;
42241: LD_ADDR_VAR 0 9
42245: PUSH
42246: LD_INT 3
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42260: LD_VAR 0 6
42264: PPUSH
42265: CALL_OW 257
42269: PUSH
42270: LD_INT 5
42272: EQUAL
42273: IFFALSE 42294
// points := [ 130 , 5 , 2 ] ;
42275: LD_ADDR_VAR 0 9
42279: PUSH
42280: LD_INT 130
42282: PUSH
42283: LD_INT 5
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42294: LD_VAR 0 6
42298: PPUSH
42299: CALL_OW 257
42303: PUSH
42304: LD_INT 8
42306: EQUAL
42307: IFFALSE 42328
// points := [ 35 , 35 , 30 ] ;
42309: LD_ADDR_VAR 0 9
42313: PUSH
42314: LD_INT 35
42316: PUSH
42317: LD_INT 35
42319: PUSH
42320: LD_INT 30
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42328: LD_VAR 0 6
42332: PPUSH
42333: CALL_OW 257
42337: PUSH
42338: LD_INT 9
42340: EQUAL
42341: IFFALSE 42362
// points := [ 20 , 55 , 40 ] ;
42343: LD_ADDR_VAR 0 9
42347: PUSH
42348: LD_INT 20
42350: PUSH
42351: LD_INT 55
42353: PUSH
42354: LD_INT 40
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42362: LD_VAR 0 6
42366: PPUSH
42367: CALL_OW 257
42371: PUSH
42372: LD_INT 12
42374: PUSH
42375: LD_INT 16
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: IN
42382: IFFALSE 42403
// points := [ 5 , 3 , 2 ] ;
42384: LD_ADDR_VAR 0 9
42388: PUSH
42389: LD_INT 5
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42403: LD_VAR 0 6
42407: PPUSH
42408: CALL_OW 257
42412: PUSH
42413: LD_INT 17
42415: EQUAL
42416: IFFALSE 42437
// points := [ 100 , 50 , 75 ] ;
42418: LD_ADDR_VAR 0 9
42422: PUSH
42423: LD_INT 100
42425: PUSH
42426: LD_INT 50
42428: PUSH
42429: LD_INT 75
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: LIST
42436: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42437: LD_VAR 0 6
42441: PPUSH
42442: CALL_OW 257
42446: PUSH
42447: LD_INT 15
42449: EQUAL
42450: IFFALSE 42471
// points := [ 10 , 5 , 3 ] ;
42452: LD_ADDR_VAR 0 9
42456: PUSH
42457: LD_INT 10
42459: PUSH
42460: LD_INT 5
42462: PUSH
42463: LD_INT 3
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: LIST
42470: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42471: LD_VAR 0 6
42475: PPUSH
42476: CALL_OW 257
42480: PUSH
42481: LD_INT 14
42483: EQUAL
42484: IFFALSE 42505
// points := [ 10 , 0 , 0 ] ;
42486: LD_ADDR_VAR 0 9
42490: PUSH
42491: LD_INT 10
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42505: LD_VAR 0 6
42509: PPUSH
42510: CALL_OW 257
42514: PUSH
42515: LD_INT 11
42517: EQUAL
42518: IFFALSE 42539
// points := [ 30 , 10 , 5 ] ;
42520: LD_ADDR_VAR 0 9
42524: PUSH
42525: LD_INT 30
42527: PUSH
42528: LD_INT 10
42530: PUSH
42531: LD_INT 5
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42539: LD_VAR 0 1
42543: PPUSH
42544: LD_INT 5
42546: PPUSH
42547: CALL_OW 321
42551: PUSH
42552: LD_INT 2
42554: EQUAL
42555: IFFALSE 42572
// bpoints := bpoints * 1.8 ;
42557: LD_ADDR_VAR 0 10
42561: PUSH
42562: LD_VAR 0 10
42566: PUSH
42567: LD_REAL  1.80000000000000E+0000
42570: MUL
42571: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42572: LD_VAR 0 6
42576: PPUSH
42577: CALL_OW 257
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 3
42590: PUSH
42591: LD_INT 4
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: IN
42600: PUSH
42601: LD_VAR 0 1
42605: PPUSH
42606: LD_INT 51
42608: PPUSH
42609: CALL_OW 321
42613: PUSH
42614: LD_INT 2
42616: EQUAL
42617: AND
42618: IFFALSE 42635
// bpoints := bpoints * 1.2 ;
42620: LD_ADDR_VAR 0 10
42624: PUSH
42625: LD_VAR 0 10
42629: PUSH
42630: LD_REAL  1.20000000000000E+0000
42633: MUL
42634: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42635: LD_VAR 0 6
42639: PPUSH
42640: CALL_OW 257
42644: PUSH
42645: LD_INT 5
42647: PUSH
42648: LD_INT 7
42650: PUSH
42651: LD_INT 9
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: IN
42659: PUSH
42660: LD_VAR 0 1
42664: PPUSH
42665: LD_INT 52
42667: PPUSH
42668: CALL_OW 321
42672: PUSH
42673: LD_INT 2
42675: EQUAL
42676: AND
42677: IFFALSE 42694
// bpoints := bpoints * 1.5 ;
42679: LD_ADDR_VAR 0 10
42683: PUSH
42684: LD_VAR 0 10
42688: PUSH
42689: LD_REAL  1.50000000000000E+0000
42692: MUL
42693: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42694: LD_VAR 0 1
42698: PPUSH
42699: LD_INT 66
42701: PPUSH
42702: CALL_OW 321
42706: PUSH
42707: LD_INT 2
42709: EQUAL
42710: IFFALSE 42727
// bpoints := bpoints * 1.1 ;
42712: LD_ADDR_VAR 0 10
42716: PUSH
42717: LD_VAR 0 10
42721: PUSH
42722: LD_REAL  1.10000000000000E+0000
42725: MUL
42726: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42727: LD_ADDR_VAR 0 10
42731: PUSH
42732: LD_VAR 0 10
42736: PUSH
42737: LD_VAR 0 6
42741: PPUSH
42742: LD_INT 1
42744: PPUSH
42745: CALL_OW 259
42749: PUSH
42750: LD_REAL  1.15000000000000E+0000
42753: MUL
42754: MUL
42755: ST_TO_ADDR
// end ; unit_vehicle :
42756: GO 43584
42758: LD_INT 2
42760: DOUBLE
42761: EQUAL
42762: IFTRUE 42766
42764: GO 43572
42766: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42767: LD_VAR 0 6
42771: PPUSH
42772: CALL_OW 264
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 42
42782: PUSH
42783: LD_INT 24
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: IN
42791: IFFALSE 42812
// points := [ 25 , 5 , 3 ] ;
42793: LD_ADDR_VAR 0 9
42797: PUSH
42798: LD_INT 25
42800: PUSH
42801: LD_INT 5
42803: PUSH
42804: LD_INT 3
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42812: LD_VAR 0 6
42816: PPUSH
42817: CALL_OW 264
42821: PUSH
42822: LD_INT 4
42824: PUSH
42825: LD_INT 43
42827: PUSH
42828: LD_INT 25
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: LIST
42835: IN
42836: IFFALSE 42857
// points := [ 40 , 15 , 5 ] ;
42838: LD_ADDR_VAR 0 9
42842: PUSH
42843: LD_INT 40
42845: PUSH
42846: LD_INT 15
42848: PUSH
42849: LD_INT 5
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42857: LD_VAR 0 6
42861: PPUSH
42862: CALL_OW 264
42866: PUSH
42867: LD_INT 3
42869: PUSH
42870: LD_INT 23
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: IN
42877: IFFALSE 42898
// points := [ 7 , 25 , 8 ] ;
42879: LD_ADDR_VAR 0 9
42883: PUSH
42884: LD_INT 7
42886: PUSH
42887: LD_INT 25
42889: PUSH
42890: LD_INT 8
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42898: LD_VAR 0 6
42902: PPUSH
42903: CALL_OW 264
42907: PUSH
42908: LD_INT 5
42910: PUSH
42911: LD_INT 27
42913: PUSH
42914: LD_INT 44
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: IN
42922: IFFALSE 42943
// points := [ 14 , 50 , 16 ] ;
42924: LD_ADDR_VAR 0 9
42928: PUSH
42929: LD_INT 14
42931: PUSH
42932: LD_INT 50
42934: PUSH
42935: LD_INT 16
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42943: LD_VAR 0 6
42947: PPUSH
42948: CALL_OW 264
42952: PUSH
42953: LD_INT 6
42955: PUSH
42956: LD_INT 46
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: IN
42963: IFFALSE 42984
// points := [ 32 , 120 , 70 ] ;
42965: LD_ADDR_VAR 0 9
42969: PUSH
42970: LD_INT 32
42972: PUSH
42973: LD_INT 120
42975: PUSH
42976: LD_INT 70
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: LIST
42983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42984: LD_VAR 0 6
42988: PPUSH
42989: CALL_OW 264
42993: PUSH
42994: LD_INT 7
42996: PUSH
42997: LD_INT 28
42999: PUSH
43000: LD_INT 45
43002: PUSH
43003: LD_INT 92
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: IN
43012: IFFALSE 43033
// points := [ 35 , 20 , 45 ] ;
43014: LD_ADDR_VAR 0 9
43018: PUSH
43019: LD_INT 35
43021: PUSH
43022: LD_INT 20
43024: PUSH
43025: LD_INT 45
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43033: LD_VAR 0 6
43037: PPUSH
43038: CALL_OW 264
43042: PUSH
43043: LD_INT 47
43045: PUSH
43046: EMPTY
43047: LIST
43048: IN
43049: IFFALSE 43070
// points := [ 67 , 45 , 75 ] ;
43051: LD_ADDR_VAR 0 9
43055: PUSH
43056: LD_INT 67
43058: PUSH
43059: LD_INT 45
43061: PUSH
43062: LD_INT 75
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: LIST
43069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43070: LD_VAR 0 6
43074: PPUSH
43075: CALL_OW 264
43079: PUSH
43080: LD_INT 26
43082: PUSH
43083: EMPTY
43084: LIST
43085: IN
43086: IFFALSE 43107
// points := [ 120 , 30 , 80 ] ;
43088: LD_ADDR_VAR 0 9
43092: PUSH
43093: LD_INT 120
43095: PUSH
43096: LD_INT 30
43098: PUSH
43099: LD_INT 80
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: LIST
43106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43107: LD_VAR 0 6
43111: PPUSH
43112: CALL_OW 264
43116: PUSH
43117: LD_INT 22
43119: PUSH
43120: EMPTY
43121: LIST
43122: IN
43123: IFFALSE 43144
// points := [ 40 , 1 , 1 ] ;
43125: LD_ADDR_VAR 0 9
43129: PUSH
43130: LD_INT 40
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43144: LD_VAR 0 6
43148: PPUSH
43149: CALL_OW 264
43153: PUSH
43154: LD_INT 29
43156: PUSH
43157: EMPTY
43158: LIST
43159: IN
43160: IFFALSE 43181
// points := [ 70 , 200 , 400 ] ;
43162: LD_ADDR_VAR 0 9
43166: PUSH
43167: LD_INT 70
43169: PUSH
43170: LD_INT 200
43172: PUSH
43173: LD_INT 400
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43181: LD_VAR 0 6
43185: PPUSH
43186: CALL_OW 264
43190: PUSH
43191: LD_INT 14
43193: PUSH
43194: LD_INT 53
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: IN
43201: IFFALSE 43222
// points := [ 40 , 10 , 20 ] ;
43203: LD_ADDR_VAR 0 9
43207: PUSH
43208: LD_INT 40
43210: PUSH
43211: LD_INT 10
43213: PUSH
43214: LD_INT 20
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43222: LD_VAR 0 6
43226: PPUSH
43227: CALL_OW 264
43231: PUSH
43232: LD_INT 9
43234: PUSH
43235: EMPTY
43236: LIST
43237: IN
43238: IFFALSE 43259
// points := [ 5 , 70 , 20 ] ;
43240: LD_ADDR_VAR 0 9
43244: PUSH
43245: LD_INT 5
43247: PUSH
43248: LD_INT 70
43250: PUSH
43251: LD_INT 20
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: LIST
43258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43259: LD_VAR 0 6
43263: PPUSH
43264: CALL_OW 264
43268: PUSH
43269: LD_INT 10
43271: PUSH
43272: EMPTY
43273: LIST
43274: IN
43275: IFFALSE 43296
// points := [ 35 , 110 , 70 ] ;
43277: LD_ADDR_VAR 0 9
43281: PUSH
43282: LD_INT 35
43284: PUSH
43285: LD_INT 110
43287: PUSH
43288: LD_INT 70
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43296: LD_VAR 0 6
43300: PPUSH
43301: CALL_OW 265
43305: PUSH
43306: LD_INT 25
43308: EQUAL
43309: IFFALSE 43330
// points := [ 80 , 65 , 100 ] ;
43311: LD_ADDR_VAR 0 9
43315: PUSH
43316: LD_INT 80
43318: PUSH
43319: LD_INT 65
43321: PUSH
43322: LD_INT 100
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43330: LD_VAR 0 6
43334: PPUSH
43335: CALL_OW 263
43339: PUSH
43340: LD_INT 1
43342: EQUAL
43343: IFFALSE 43378
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43345: LD_ADDR_VAR 0 10
43349: PUSH
43350: LD_VAR 0 10
43354: PUSH
43355: LD_VAR 0 6
43359: PPUSH
43360: CALL_OW 311
43364: PPUSH
43365: LD_INT 3
43367: PPUSH
43368: CALL_OW 259
43372: PUSH
43373: LD_INT 4
43375: MUL
43376: MUL
43377: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43378: LD_VAR 0 6
43382: PPUSH
43383: CALL_OW 263
43387: PUSH
43388: LD_INT 2
43390: EQUAL
43391: IFFALSE 43442
// begin j := IsControledBy ( i ) ;
43393: LD_ADDR_VAR 0 7
43397: PUSH
43398: LD_VAR 0 6
43402: PPUSH
43403: CALL_OW 312
43407: ST_TO_ADDR
// if j then
43408: LD_VAR 0 7
43412: IFFALSE 43442
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43414: LD_ADDR_VAR 0 10
43418: PUSH
43419: LD_VAR 0 10
43423: PUSH
43424: LD_VAR 0 7
43428: PPUSH
43429: LD_INT 3
43431: PPUSH
43432: CALL_OW 259
43436: PUSH
43437: LD_INT 3
43439: MUL
43440: MUL
43441: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43442: LD_VAR 0 6
43446: PPUSH
43447: CALL_OW 264
43451: PUSH
43452: LD_INT 5
43454: PUSH
43455: LD_INT 6
43457: PUSH
43458: LD_INT 46
43460: PUSH
43461: LD_INT 44
43463: PUSH
43464: LD_INT 47
43466: PUSH
43467: LD_INT 45
43469: PUSH
43470: LD_INT 28
43472: PUSH
43473: LD_INT 7
43475: PUSH
43476: LD_INT 27
43478: PUSH
43479: LD_INT 29
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: IN
43494: PUSH
43495: LD_VAR 0 1
43499: PPUSH
43500: LD_INT 52
43502: PPUSH
43503: CALL_OW 321
43507: PUSH
43508: LD_INT 2
43510: EQUAL
43511: AND
43512: IFFALSE 43529
// bpoints := bpoints * 1.2 ;
43514: LD_ADDR_VAR 0 10
43518: PUSH
43519: LD_VAR 0 10
43523: PUSH
43524: LD_REAL  1.20000000000000E+0000
43527: MUL
43528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43529: LD_VAR 0 6
43533: PPUSH
43534: CALL_OW 264
43538: PUSH
43539: LD_INT 6
43541: PUSH
43542: LD_INT 46
43544: PUSH
43545: LD_INT 47
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: LIST
43552: IN
43553: IFFALSE 43570
// bpoints := bpoints * 1.2 ;
43555: LD_ADDR_VAR 0 10
43559: PUSH
43560: LD_VAR 0 10
43564: PUSH
43565: LD_REAL  1.20000000000000E+0000
43568: MUL
43569: ST_TO_ADDR
// end ; unit_building :
43570: GO 43584
43572: LD_INT 3
43574: DOUBLE
43575: EQUAL
43576: IFTRUE 43580
43578: GO 43583
43580: POP
// ; end ;
43581: GO 43584
43583: POP
// for j = 1 to 3 do
43584: LD_ADDR_VAR 0 7
43588: PUSH
43589: DOUBLE
43590: LD_INT 1
43592: DEC
43593: ST_TO_ADDR
43594: LD_INT 3
43596: PUSH
43597: FOR_TO
43598: IFFALSE 43651
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43600: LD_ADDR_VAR 0 5
43604: PUSH
43605: LD_VAR 0 5
43609: PPUSH
43610: LD_VAR 0 7
43614: PPUSH
43615: LD_VAR 0 5
43619: PUSH
43620: LD_VAR 0 7
43624: ARRAY
43625: PUSH
43626: LD_VAR 0 9
43630: PUSH
43631: LD_VAR 0 7
43635: ARRAY
43636: PUSH
43637: LD_VAR 0 10
43641: MUL
43642: PLUS
43643: PPUSH
43644: CALL_OW 1
43648: ST_TO_ADDR
43649: GO 43597
43651: POP
43652: POP
// end ;
43653: GO 42132
43655: POP
43656: POP
// result := Replace ( result , 4 , tmp ) ;
43657: LD_ADDR_VAR 0 5
43661: PUSH
43662: LD_VAR 0 5
43666: PPUSH
43667: LD_INT 4
43669: PPUSH
43670: LD_VAR 0 8
43674: PPUSH
43675: CALL_OW 1
43679: ST_TO_ADDR
// end ;
43680: LD_VAR 0 5
43684: RET
// export function DangerAtRange ( unit , range ) ; begin
43685: LD_INT 0
43687: PPUSH
// if not unit then
43688: LD_VAR 0 1
43692: NOT
43693: IFFALSE 43697
// exit ;
43695: GO 43742
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43697: LD_ADDR_VAR 0 3
43701: PUSH
43702: LD_VAR 0 1
43706: PPUSH
43707: CALL_OW 255
43711: PPUSH
43712: LD_VAR 0 1
43716: PPUSH
43717: CALL_OW 250
43721: PPUSH
43722: LD_VAR 0 1
43726: PPUSH
43727: CALL_OW 251
43731: PPUSH
43732: LD_VAR 0 2
43736: PPUSH
43737: CALL 41984 0 4
43741: ST_TO_ADDR
// end ;
43742: LD_VAR 0 3
43746: RET
// export function DangerInArea ( side , area ) ; begin
43747: LD_INT 0
43749: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43750: LD_ADDR_VAR 0 3
43754: PUSH
43755: LD_VAR 0 2
43759: PPUSH
43760: LD_INT 81
43762: PUSH
43763: LD_VAR 0 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PPUSH
43772: CALL_OW 70
43776: ST_TO_ADDR
// end ;
43777: LD_VAR 0 3
43781: RET
// export function IsExtension ( b ) ; begin
43782: LD_INT 0
43784: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43785: LD_ADDR_VAR 0 2
43789: PUSH
43790: LD_VAR 0 1
43794: PUSH
43795: LD_INT 23
43797: PUSH
43798: LD_INT 20
43800: PUSH
43801: LD_INT 22
43803: PUSH
43804: LD_INT 17
43806: PUSH
43807: LD_INT 24
43809: PUSH
43810: LD_INT 21
43812: PUSH
43813: LD_INT 19
43815: PUSH
43816: LD_INT 16
43818: PUSH
43819: LD_INT 25
43821: PUSH
43822: LD_INT 18
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: IN
43837: ST_TO_ADDR
// end ;
43838: LD_VAR 0 2
43842: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43843: LD_INT 0
43845: PPUSH
43846: PPUSH
43847: PPUSH
// result := [ ] ;
43848: LD_ADDR_VAR 0 4
43852: PUSH
43853: EMPTY
43854: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43855: LD_ADDR_VAR 0 5
43859: PUSH
43860: LD_VAR 0 2
43864: PPUSH
43865: LD_INT 21
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PPUSH
43875: CALL_OW 70
43879: ST_TO_ADDR
// if not tmp then
43880: LD_VAR 0 5
43884: NOT
43885: IFFALSE 43889
// exit ;
43887: GO 43953
// if checkLink then
43889: LD_VAR 0 3
43893: IFFALSE 43943
// begin for i in tmp do
43895: LD_ADDR_VAR 0 6
43899: PUSH
43900: LD_VAR 0 5
43904: PUSH
43905: FOR_IN
43906: IFFALSE 43941
// if GetBase ( i ) <> base then
43908: LD_VAR 0 6
43912: PPUSH
43913: CALL_OW 274
43917: PUSH
43918: LD_VAR 0 1
43922: NONEQUAL
43923: IFFALSE 43939
// ComLinkToBase ( base , i ) ;
43925: LD_VAR 0 1
43929: PPUSH
43930: LD_VAR 0 6
43934: PPUSH
43935: CALL_OW 169
43939: GO 43905
43941: POP
43942: POP
// end ; result := tmp ;
43943: LD_ADDR_VAR 0 4
43947: PUSH
43948: LD_VAR 0 5
43952: ST_TO_ADDR
// end ;
43953: LD_VAR 0 4
43957: RET
// export function ComComplete ( units , b ) ; var i ; begin
43958: LD_INT 0
43960: PPUSH
43961: PPUSH
// if not units then
43962: LD_VAR 0 1
43966: NOT
43967: IFFALSE 43971
// exit ;
43969: GO 44061
// for i in units do
43971: LD_ADDR_VAR 0 4
43975: PUSH
43976: LD_VAR 0 1
43980: PUSH
43981: FOR_IN
43982: IFFALSE 44059
// if BuildingStatus ( b ) = bs_build then
43984: LD_VAR 0 2
43988: PPUSH
43989: CALL_OW 461
43993: PUSH
43994: LD_INT 1
43996: EQUAL
43997: IFFALSE 44057
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43999: LD_VAR 0 4
44003: PPUSH
44004: LD_STRING h
44006: PUSH
44007: LD_VAR 0 2
44011: PPUSH
44012: CALL_OW 250
44016: PUSH
44017: LD_VAR 0 2
44021: PPUSH
44022: CALL_OW 251
44026: PUSH
44027: LD_VAR 0 2
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: PUSH
44050: EMPTY
44051: LIST
44052: PPUSH
44053: CALL_OW 446
44057: GO 43981
44059: POP
44060: POP
// end ;
44061: LD_VAR 0 3
44065: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44066: LD_INT 0
44068: PPUSH
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44074: LD_VAR 0 1
44078: NOT
44079: PUSH
44080: LD_VAR 0 1
44084: PPUSH
44085: CALL_OW 263
44089: PUSH
44090: LD_INT 2
44092: NONEQUAL
44093: OR
44094: IFFALSE 44098
// exit ;
44096: GO 44414
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44098: LD_ADDR_VAR 0 6
44102: PUSH
44103: LD_INT 22
44105: PUSH
44106: LD_VAR 0 1
44110: PPUSH
44111: CALL_OW 255
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: LD_INT 30
44125: PUSH
44126: LD_INT 36
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 34
44135: PUSH
44136: LD_INT 31
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PPUSH
44152: CALL_OW 69
44156: ST_TO_ADDR
// if not tmp then
44157: LD_VAR 0 6
44161: NOT
44162: IFFALSE 44166
// exit ;
44164: GO 44414
// result := [ ] ;
44166: LD_ADDR_VAR 0 2
44170: PUSH
44171: EMPTY
44172: ST_TO_ADDR
// for i in tmp do
44173: LD_ADDR_VAR 0 3
44177: PUSH
44178: LD_VAR 0 6
44182: PUSH
44183: FOR_IN
44184: IFFALSE 44255
// begin t := UnitsInside ( i ) ;
44186: LD_ADDR_VAR 0 4
44190: PUSH
44191: LD_VAR 0 3
44195: PPUSH
44196: CALL_OW 313
44200: ST_TO_ADDR
// if t then
44201: LD_VAR 0 4
44205: IFFALSE 44253
// for j in t do
44207: LD_ADDR_VAR 0 7
44211: PUSH
44212: LD_VAR 0 4
44216: PUSH
44217: FOR_IN
44218: IFFALSE 44251
// result := Replace ( result , result + 1 , j ) ;
44220: LD_ADDR_VAR 0 2
44224: PUSH
44225: LD_VAR 0 2
44229: PPUSH
44230: LD_VAR 0 2
44234: PUSH
44235: LD_INT 1
44237: PLUS
44238: PPUSH
44239: LD_VAR 0 7
44243: PPUSH
44244: CALL_OW 1
44248: ST_TO_ADDR
44249: GO 44217
44251: POP
44252: POP
// end ;
44253: GO 44183
44255: POP
44256: POP
// if not result then
44257: LD_VAR 0 2
44261: NOT
44262: IFFALSE 44266
// exit ;
44264: GO 44414
// mech := result [ 1 ] ;
44266: LD_ADDR_VAR 0 5
44270: PUSH
44271: LD_VAR 0 2
44275: PUSH
44276: LD_INT 1
44278: ARRAY
44279: ST_TO_ADDR
// if result > 1 then
44280: LD_VAR 0 2
44284: PUSH
44285: LD_INT 1
44287: GREATER
44288: IFFALSE 44400
// begin for i = 2 to result do
44290: LD_ADDR_VAR 0 3
44294: PUSH
44295: DOUBLE
44296: LD_INT 2
44298: DEC
44299: ST_TO_ADDR
44300: LD_VAR 0 2
44304: PUSH
44305: FOR_TO
44306: IFFALSE 44398
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44308: LD_ADDR_VAR 0 4
44312: PUSH
44313: LD_VAR 0 2
44317: PUSH
44318: LD_VAR 0 3
44322: ARRAY
44323: PPUSH
44324: LD_INT 3
44326: PPUSH
44327: CALL_OW 259
44331: PUSH
44332: LD_VAR 0 2
44336: PUSH
44337: LD_VAR 0 3
44341: ARRAY
44342: PPUSH
44343: CALL_OW 432
44347: MINUS
44348: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44349: LD_VAR 0 4
44353: PUSH
44354: LD_VAR 0 5
44358: PPUSH
44359: LD_INT 3
44361: PPUSH
44362: CALL_OW 259
44366: PUSH
44367: LD_VAR 0 5
44371: PPUSH
44372: CALL_OW 432
44376: MINUS
44377: GREATEREQUAL
44378: IFFALSE 44396
// mech := result [ i ] ;
44380: LD_ADDR_VAR 0 5
44384: PUSH
44385: LD_VAR 0 2
44389: PUSH
44390: LD_VAR 0 3
44394: ARRAY
44395: ST_TO_ADDR
// end ;
44396: GO 44305
44398: POP
44399: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44400: LD_VAR 0 1
44404: PPUSH
44405: LD_VAR 0 5
44409: PPUSH
44410: CALL_OW 135
// end ;
44414: LD_VAR 0 2
44418: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44419: LD_INT 0
44421: PPUSH
44422: PPUSH
44423: PPUSH
44424: PPUSH
44425: PPUSH
44426: PPUSH
44427: PPUSH
44428: PPUSH
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
44433: PPUSH
// result := [ ] ;
44434: LD_ADDR_VAR 0 7
44438: PUSH
44439: EMPTY
44440: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 266
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: IN
44461: NOT
44462: IFFALSE 44466
// exit ;
44464: GO 46100
// if name then
44466: LD_VAR 0 3
44470: IFFALSE 44486
// SetBName ( base_dep , name ) ;
44472: LD_VAR 0 1
44476: PPUSH
44477: LD_VAR 0 3
44481: PPUSH
44482: CALL_OW 500
// base := GetBase ( base_dep ) ;
44486: LD_ADDR_VAR 0 15
44490: PUSH
44491: LD_VAR 0 1
44495: PPUSH
44496: CALL_OW 274
44500: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44501: LD_ADDR_VAR 0 16
44505: PUSH
44506: LD_VAR 0 1
44510: PPUSH
44511: CALL_OW 255
44515: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44516: LD_ADDR_VAR 0 17
44520: PUSH
44521: LD_VAR 0 1
44525: PPUSH
44526: CALL_OW 248
44530: ST_TO_ADDR
// if sources then
44531: LD_VAR 0 5
44535: IFFALSE 44582
// for i = 1 to 3 do
44537: LD_ADDR_VAR 0 8
44541: PUSH
44542: DOUBLE
44543: LD_INT 1
44545: DEC
44546: ST_TO_ADDR
44547: LD_INT 3
44549: PUSH
44550: FOR_TO
44551: IFFALSE 44580
// AddResourceType ( base , i , sources [ i ] ) ;
44553: LD_VAR 0 15
44557: PPUSH
44558: LD_VAR 0 8
44562: PPUSH
44563: LD_VAR 0 5
44567: PUSH
44568: LD_VAR 0 8
44572: ARRAY
44573: PPUSH
44574: CALL_OW 276
44578: GO 44550
44580: POP
44581: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44582: LD_ADDR_VAR 0 18
44586: PUSH
44587: LD_VAR 0 15
44591: PPUSH
44592: LD_VAR 0 2
44596: PPUSH
44597: LD_INT 1
44599: PPUSH
44600: CALL 43843 0 3
44604: ST_TO_ADDR
// InitHc ;
44605: CALL_OW 19
// InitUc ;
44609: CALL_OW 18
// uc_side := side ;
44613: LD_ADDR_OWVAR 20
44617: PUSH
44618: LD_VAR 0 16
44622: ST_TO_ADDR
// uc_nation := nation ;
44623: LD_ADDR_OWVAR 21
44627: PUSH
44628: LD_VAR 0 17
44632: ST_TO_ADDR
// if buildings then
44633: LD_VAR 0 18
44637: IFFALSE 45959
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44639: LD_ADDR_VAR 0 19
44643: PUSH
44644: LD_VAR 0 18
44648: PPUSH
44649: LD_INT 2
44651: PUSH
44652: LD_INT 30
44654: PUSH
44655: LD_INT 29
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 30
44664: PUSH
44665: LD_INT 30
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: PPUSH
44677: CALL_OW 72
44681: ST_TO_ADDR
// if tmp then
44682: LD_VAR 0 19
44686: IFFALSE 44734
// for i in tmp do
44688: LD_ADDR_VAR 0 8
44692: PUSH
44693: LD_VAR 0 19
44697: PUSH
44698: FOR_IN
44699: IFFALSE 44732
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44701: LD_VAR 0 8
44705: PPUSH
44706: CALL_OW 250
44710: PPUSH
44711: LD_VAR 0 8
44715: PPUSH
44716: CALL_OW 251
44720: PPUSH
44721: LD_VAR 0 16
44725: PPUSH
44726: CALL_OW 441
44730: GO 44698
44732: POP
44733: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44734: LD_VAR 0 18
44738: PPUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 30
44744: PUSH
44745: LD_INT 32
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 30
44754: PUSH
44755: LD_INT 33
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: PPUSH
44767: CALL_OW 72
44771: IFFALSE 44859
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44773: LD_ADDR_VAR 0 8
44777: PUSH
44778: LD_VAR 0 18
44782: PPUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 30
44788: PUSH
44789: LD_INT 32
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 30
44798: PUSH
44799: LD_INT 33
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: PPUSH
44811: CALL_OW 72
44815: PUSH
44816: FOR_IN
44817: IFFALSE 44857
// begin if not GetBWeapon ( i ) then
44819: LD_VAR 0 8
44823: PPUSH
44824: CALL_OW 269
44828: NOT
44829: IFFALSE 44855
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44831: LD_VAR 0 8
44835: PPUSH
44836: LD_VAR 0 8
44840: PPUSH
44841: LD_VAR 0 2
44845: PPUSH
44846: CALL 46105 0 2
44850: PPUSH
44851: CALL_OW 431
// end ;
44855: GO 44816
44857: POP
44858: POP
// end ; for i = 1 to personel do
44859: LD_ADDR_VAR 0 8
44863: PUSH
44864: DOUBLE
44865: LD_INT 1
44867: DEC
44868: ST_TO_ADDR
44869: LD_VAR 0 6
44873: PUSH
44874: FOR_TO
44875: IFFALSE 45939
// begin if i > 4 then
44877: LD_VAR 0 8
44881: PUSH
44882: LD_INT 4
44884: GREATER
44885: IFFALSE 44889
// break ;
44887: GO 45939
// case i of 1 :
44889: LD_VAR 0 8
44893: PUSH
44894: LD_INT 1
44896: DOUBLE
44897: EQUAL
44898: IFTRUE 44902
44900: GO 44982
44902: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44903: LD_ADDR_VAR 0 12
44907: PUSH
44908: LD_VAR 0 18
44912: PPUSH
44913: LD_INT 22
44915: PUSH
44916: LD_VAR 0 16
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 58
44927: PUSH
44928: EMPTY
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: LD_INT 30
44936: PUSH
44937: LD_INT 32
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 30
44946: PUSH
44947: LD_INT 4
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 30
44956: PUSH
44957: LD_INT 5
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: PPUSH
44975: CALL_OW 72
44979: ST_TO_ADDR
44980: GO 45204
44982: LD_INT 2
44984: DOUBLE
44985: EQUAL
44986: IFTRUE 44990
44988: GO 45052
44990: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44991: LD_ADDR_VAR 0 12
44995: PUSH
44996: LD_VAR 0 18
45000: PPUSH
45001: LD_INT 22
45003: PUSH
45004: LD_VAR 0 16
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 30
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 30
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PPUSH
45045: CALL_OW 72
45049: ST_TO_ADDR
45050: GO 45204
45052: LD_INT 3
45054: DOUBLE
45055: EQUAL
45056: IFTRUE 45060
45058: GO 45122
45060: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45061: LD_ADDR_VAR 0 12
45065: PUSH
45066: LD_VAR 0 18
45070: PPUSH
45071: LD_INT 22
45073: PUSH
45074: LD_VAR 0 16
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: LD_INT 30
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 30
45098: PUSH
45099: LD_INT 3
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PPUSH
45115: CALL_OW 72
45119: ST_TO_ADDR
45120: GO 45204
45122: LD_INT 4
45124: DOUBLE
45125: EQUAL
45126: IFTRUE 45130
45128: GO 45203
45130: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45131: LD_ADDR_VAR 0 12
45135: PUSH
45136: LD_VAR 0 18
45140: PPUSH
45141: LD_INT 22
45143: PUSH
45144: LD_VAR 0 16
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: LD_INT 30
45158: PUSH
45159: LD_INT 6
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 30
45168: PUSH
45169: LD_INT 7
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 30
45178: PUSH
45179: LD_INT 8
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PPUSH
45196: CALL_OW 72
45200: ST_TO_ADDR
45201: GO 45204
45203: POP
// if i = 1 then
45204: LD_VAR 0 8
45208: PUSH
45209: LD_INT 1
45211: EQUAL
45212: IFFALSE 45323
// begin tmp := [ ] ;
45214: LD_ADDR_VAR 0 19
45218: PUSH
45219: EMPTY
45220: ST_TO_ADDR
// for j in f do
45221: LD_ADDR_VAR 0 9
45225: PUSH
45226: LD_VAR 0 12
45230: PUSH
45231: FOR_IN
45232: IFFALSE 45305
// if GetBType ( j ) = b_bunker then
45234: LD_VAR 0 9
45238: PPUSH
45239: CALL_OW 266
45243: PUSH
45244: LD_INT 32
45246: EQUAL
45247: IFFALSE 45274
// tmp := Insert ( tmp , 1 , j ) else
45249: LD_ADDR_VAR 0 19
45253: PUSH
45254: LD_VAR 0 19
45258: PPUSH
45259: LD_INT 1
45261: PPUSH
45262: LD_VAR 0 9
45266: PPUSH
45267: CALL_OW 2
45271: ST_TO_ADDR
45272: GO 45303
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45274: LD_ADDR_VAR 0 19
45278: PUSH
45279: LD_VAR 0 19
45283: PPUSH
45284: LD_VAR 0 19
45288: PUSH
45289: LD_INT 1
45291: PLUS
45292: PPUSH
45293: LD_VAR 0 9
45297: PPUSH
45298: CALL_OW 2
45302: ST_TO_ADDR
45303: GO 45231
45305: POP
45306: POP
// if tmp then
45307: LD_VAR 0 19
45311: IFFALSE 45323
// f := tmp ;
45313: LD_ADDR_VAR 0 12
45317: PUSH
45318: LD_VAR 0 19
45322: ST_TO_ADDR
// end ; x := personel [ i ] ;
45323: LD_ADDR_VAR 0 13
45327: PUSH
45328: LD_VAR 0 6
45332: PUSH
45333: LD_VAR 0 8
45337: ARRAY
45338: ST_TO_ADDR
// if x = - 1 then
45339: LD_VAR 0 13
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: EQUAL
45348: IFFALSE 45557
// begin for j in f do
45350: LD_ADDR_VAR 0 9
45354: PUSH
45355: LD_VAR 0 12
45359: PUSH
45360: FOR_IN
45361: IFFALSE 45553
// repeat InitHc ;
45363: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45367: LD_VAR 0 9
45371: PPUSH
45372: CALL_OW 266
45376: PUSH
45377: LD_INT 5
45379: EQUAL
45380: IFFALSE 45450
// begin if UnitsInside ( j ) < 3 then
45382: LD_VAR 0 9
45386: PPUSH
45387: CALL_OW 313
45391: PUSH
45392: LD_INT 3
45394: LESS
45395: IFFALSE 45431
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45397: LD_INT 0
45399: PPUSH
45400: LD_INT 5
45402: PUSH
45403: LD_INT 8
45405: PUSH
45406: LD_INT 9
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: PUSH
45414: LD_VAR 0 17
45418: ARRAY
45419: PPUSH
45420: LD_VAR 0 4
45424: PPUSH
45425: CALL_OW 380
45429: GO 45448
// PrepareHuman ( false , i , skill ) ;
45431: LD_INT 0
45433: PPUSH
45434: LD_VAR 0 8
45438: PPUSH
45439: LD_VAR 0 4
45443: PPUSH
45444: CALL_OW 380
// end else
45448: GO 45467
// PrepareHuman ( false , i , skill ) ;
45450: LD_INT 0
45452: PPUSH
45453: LD_VAR 0 8
45457: PPUSH
45458: LD_VAR 0 4
45462: PPUSH
45463: CALL_OW 380
// un := CreateHuman ;
45467: LD_ADDR_VAR 0 14
45471: PUSH
45472: CALL_OW 44
45476: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45477: LD_ADDR_VAR 0 7
45481: PUSH
45482: LD_VAR 0 7
45486: PPUSH
45487: LD_INT 1
45489: PPUSH
45490: LD_VAR 0 14
45494: PPUSH
45495: CALL_OW 2
45499: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45500: LD_VAR 0 14
45504: PPUSH
45505: LD_VAR 0 9
45509: PPUSH
45510: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45514: LD_VAR 0 9
45518: PPUSH
45519: CALL_OW 313
45523: PUSH
45524: LD_INT 6
45526: EQUAL
45527: PUSH
45528: LD_VAR 0 9
45532: PPUSH
45533: CALL_OW 266
45537: PUSH
45538: LD_INT 32
45540: PUSH
45541: LD_INT 31
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: IN
45548: OR
45549: IFFALSE 45363
45551: GO 45360
45553: POP
45554: POP
// end else
45555: GO 45937
// for j = 1 to x do
45557: LD_ADDR_VAR 0 9
45561: PUSH
45562: DOUBLE
45563: LD_INT 1
45565: DEC
45566: ST_TO_ADDR
45567: LD_VAR 0 13
45571: PUSH
45572: FOR_TO
45573: IFFALSE 45935
// begin InitHc ;
45575: CALL_OW 19
// if not f then
45579: LD_VAR 0 12
45583: NOT
45584: IFFALSE 45673
// begin PrepareHuman ( false , i , skill ) ;
45586: LD_INT 0
45588: PPUSH
45589: LD_VAR 0 8
45593: PPUSH
45594: LD_VAR 0 4
45598: PPUSH
45599: CALL_OW 380
// un := CreateHuman ;
45603: LD_ADDR_VAR 0 14
45607: PUSH
45608: CALL_OW 44
45612: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45613: LD_ADDR_VAR 0 7
45617: PUSH
45618: LD_VAR 0 7
45622: PPUSH
45623: LD_INT 1
45625: PPUSH
45626: LD_VAR 0 14
45630: PPUSH
45631: CALL_OW 2
45635: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45636: LD_VAR 0 14
45640: PPUSH
45641: LD_VAR 0 1
45645: PPUSH
45646: CALL_OW 250
45650: PPUSH
45651: LD_VAR 0 1
45655: PPUSH
45656: CALL_OW 251
45660: PPUSH
45661: LD_INT 10
45663: PPUSH
45664: LD_INT 0
45666: PPUSH
45667: CALL_OW 50
// continue ;
45671: GO 45572
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45673: LD_VAR 0 12
45677: PUSH
45678: LD_INT 1
45680: ARRAY
45681: PPUSH
45682: CALL_OW 313
45686: PUSH
45687: LD_VAR 0 12
45691: PUSH
45692: LD_INT 1
45694: ARRAY
45695: PPUSH
45696: CALL_OW 266
45700: PUSH
45701: LD_INT 32
45703: PUSH
45704: LD_INT 31
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: IN
45711: AND
45712: PUSH
45713: LD_VAR 0 12
45717: PUSH
45718: LD_INT 1
45720: ARRAY
45721: PPUSH
45722: CALL_OW 313
45726: PUSH
45727: LD_INT 6
45729: EQUAL
45730: OR
45731: IFFALSE 45751
// f := Delete ( f , 1 ) ;
45733: LD_ADDR_VAR 0 12
45737: PUSH
45738: LD_VAR 0 12
45742: PPUSH
45743: LD_INT 1
45745: PPUSH
45746: CALL_OW 3
45750: ST_TO_ADDR
// if not f then
45751: LD_VAR 0 12
45755: NOT
45756: IFFALSE 45774
// begin x := x + 2 ;
45758: LD_ADDR_VAR 0 13
45762: PUSH
45763: LD_VAR 0 13
45767: PUSH
45768: LD_INT 2
45770: PLUS
45771: ST_TO_ADDR
// continue ;
45772: GO 45572
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45774: LD_VAR 0 12
45778: PUSH
45779: LD_INT 1
45781: ARRAY
45782: PPUSH
45783: CALL_OW 266
45787: PUSH
45788: LD_INT 5
45790: EQUAL
45791: IFFALSE 45865
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45793: LD_VAR 0 12
45797: PUSH
45798: LD_INT 1
45800: ARRAY
45801: PPUSH
45802: CALL_OW 313
45806: PUSH
45807: LD_INT 3
45809: LESS
45810: IFFALSE 45846
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45812: LD_INT 0
45814: PPUSH
45815: LD_INT 5
45817: PUSH
45818: LD_INT 8
45820: PUSH
45821: LD_INT 9
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: PUSH
45829: LD_VAR 0 17
45833: ARRAY
45834: PPUSH
45835: LD_VAR 0 4
45839: PPUSH
45840: CALL_OW 380
45844: GO 45863
// PrepareHuman ( false , i , skill ) ;
45846: LD_INT 0
45848: PPUSH
45849: LD_VAR 0 8
45853: PPUSH
45854: LD_VAR 0 4
45858: PPUSH
45859: CALL_OW 380
// end else
45863: GO 45882
// PrepareHuman ( false , i , skill ) ;
45865: LD_INT 0
45867: PPUSH
45868: LD_VAR 0 8
45872: PPUSH
45873: LD_VAR 0 4
45877: PPUSH
45878: CALL_OW 380
// un := CreateHuman ;
45882: LD_ADDR_VAR 0 14
45886: PUSH
45887: CALL_OW 44
45891: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45892: LD_ADDR_VAR 0 7
45896: PUSH
45897: LD_VAR 0 7
45901: PPUSH
45902: LD_INT 1
45904: PPUSH
45905: LD_VAR 0 14
45909: PPUSH
45910: CALL_OW 2
45914: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45915: LD_VAR 0 14
45919: PPUSH
45920: LD_VAR 0 12
45924: PUSH
45925: LD_INT 1
45927: ARRAY
45928: PPUSH
45929: CALL_OW 52
// end ;
45933: GO 45572
45935: POP
45936: POP
// end ;
45937: GO 44874
45939: POP
45940: POP
// result := result ^ buildings ;
45941: LD_ADDR_VAR 0 7
45945: PUSH
45946: LD_VAR 0 7
45950: PUSH
45951: LD_VAR 0 18
45955: ADD
45956: ST_TO_ADDR
// end else
45957: GO 46100
// begin for i = 1 to personel do
45959: LD_ADDR_VAR 0 8
45963: PUSH
45964: DOUBLE
45965: LD_INT 1
45967: DEC
45968: ST_TO_ADDR
45969: LD_VAR 0 6
45973: PUSH
45974: FOR_TO
45975: IFFALSE 46098
// begin if i > 4 then
45977: LD_VAR 0 8
45981: PUSH
45982: LD_INT 4
45984: GREATER
45985: IFFALSE 45989
// break ;
45987: GO 46098
// x := personel [ i ] ;
45989: LD_ADDR_VAR 0 13
45993: PUSH
45994: LD_VAR 0 6
45998: PUSH
45999: LD_VAR 0 8
46003: ARRAY
46004: ST_TO_ADDR
// if x = - 1 then
46005: LD_VAR 0 13
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: EQUAL
46014: IFFALSE 46018
// continue ;
46016: GO 45974
// PrepareHuman ( false , i , skill ) ;
46018: LD_INT 0
46020: PPUSH
46021: LD_VAR 0 8
46025: PPUSH
46026: LD_VAR 0 4
46030: PPUSH
46031: CALL_OW 380
// un := CreateHuman ;
46035: LD_ADDR_VAR 0 14
46039: PUSH
46040: CALL_OW 44
46044: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46045: LD_VAR 0 14
46049: PPUSH
46050: LD_VAR 0 1
46054: PPUSH
46055: CALL_OW 250
46059: PPUSH
46060: LD_VAR 0 1
46064: PPUSH
46065: CALL_OW 251
46069: PPUSH
46070: LD_INT 10
46072: PPUSH
46073: LD_INT 0
46075: PPUSH
46076: CALL_OW 50
// result := result ^ un ;
46080: LD_ADDR_VAR 0 7
46084: PUSH
46085: LD_VAR 0 7
46089: PUSH
46090: LD_VAR 0 14
46094: ADD
46095: ST_TO_ADDR
// end ;
46096: GO 45974
46098: POP
46099: POP
// end ; end ;
46100: LD_VAR 0 7
46104: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46105: LD_INT 0
46107: PPUSH
46108: PPUSH
46109: PPUSH
46110: PPUSH
46111: PPUSH
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
46121: PPUSH
46122: PPUSH
// result := false ;
46123: LD_ADDR_VAR 0 3
46127: PUSH
46128: LD_INT 0
46130: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46131: LD_VAR 0 1
46135: NOT
46136: PUSH
46137: LD_VAR 0 1
46141: PPUSH
46142: CALL_OW 266
46146: PUSH
46147: LD_INT 32
46149: PUSH
46150: LD_INT 33
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: IN
46157: NOT
46158: OR
46159: IFFALSE 46163
// exit ;
46161: GO 47272
// nat := GetNation ( tower ) ;
46163: LD_ADDR_VAR 0 12
46167: PUSH
46168: LD_VAR 0 1
46172: PPUSH
46173: CALL_OW 248
46177: ST_TO_ADDR
// side := GetSide ( tower ) ;
46178: LD_ADDR_VAR 0 16
46182: PUSH
46183: LD_VAR 0 1
46187: PPUSH
46188: CALL_OW 255
46192: ST_TO_ADDR
// x := GetX ( tower ) ;
46193: LD_ADDR_VAR 0 10
46197: PUSH
46198: LD_VAR 0 1
46202: PPUSH
46203: CALL_OW 250
46207: ST_TO_ADDR
// y := GetY ( tower ) ;
46208: LD_ADDR_VAR 0 11
46212: PUSH
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 251
46222: ST_TO_ADDR
// if not x or not y then
46223: LD_VAR 0 10
46227: NOT
46228: PUSH
46229: LD_VAR 0 11
46233: NOT
46234: OR
46235: IFFALSE 46239
// exit ;
46237: GO 47272
// weapon := 0 ;
46239: LD_ADDR_VAR 0 18
46243: PUSH
46244: LD_INT 0
46246: ST_TO_ADDR
// fac_list := [ ] ;
46247: LD_ADDR_VAR 0 17
46251: PUSH
46252: EMPTY
46253: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46254: LD_ADDR_VAR 0 6
46258: PUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: CALL_OW 274
46268: PPUSH
46269: LD_VAR 0 2
46273: PPUSH
46274: LD_INT 0
46276: PPUSH
46277: CALL 43843 0 3
46281: PPUSH
46282: LD_INT 30
46284: PUSH
46285: LD_INT 3
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PPUSH
46292: CALL_OW 72
46296: ST_TO_ADDR
// if not factories then
46297: LD_VAR 0 6
46301: NOT
46302: IFFALSE 46306
// exit ;
46304: GO 47272
// for i in factories do
46306: LD_ADDR_VAR 0 8
46310: PUSH
46311: LD_VAR 0 6
46315: PUSH
46316: FOR_IN
46317: IFFALSE 46342
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46319: LD_ADDR_VAR 0 17
46323: PUSH
46324: LD_VAR 0 17
46328: PUSH
46329: LD_VAR 0 8
46333: PPUSH
46334: CALL_OW 478
46338: UNION
46339: ST_TO_ADDR
46340: GO 46316
46342: POP
46343: POP
// if not fac_list then
46344: LD_VAR 0 17
46348: NOT
46349: IFFALSE 46353
// exit ;
46351: GO 47272
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46353: LD_ADDR_VAR 0 5
46357: PUSH
46358: LD_INT 4
46360: PUSH
46361: LD_INT 5
46363: PUSH
46364: LD_INT 9
46366: PUSH
46367: LD_INT 10
46369: PUSH
46370: LD_INT 6
46372: PUSH
46373: LD_INT 7
46375: PUSH
46376: LD_INT 11
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 27
46390: PUSH
46391: LD_INT 28
46393: PUSH
46394: LD_INT 26
46396: PUSH
46397: LD_INT 30
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 43
46408: PUSH
46409: LD_INT 44
46411: PUSH
46412: LD_INT 46
46414: PUSH
46415: LD_INT 45
46417: PUSH
46418: LD_INT 47
46420: PUSH
46421: LD_INT 49
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: LIST
46436: PUSH
46437: LD_VAR 0 12
46441: ARRAY
46442: ST_TO_ADDR
// list := list isect fac_list ;
46443: LD_ADDR_VAR 0 5
46447: PUSH
46448: LD_VAR 0 5
46452: PUSH
46453: LD_VAR 0 17
46457: ISECT
46458: ST_TO_ADDR
// if not list then
46459: LD_VAR 0 5
46463: NOT
46464: IFFALSE 46468
// exit ;
46466: GO 47272
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46468: LD_VAR 0 12
46472: PUSH
46473: LD_INT 3
46475: EQUAL
46476: PUSH
46477: LD_INT 49
46479: PUSH
46480: LD_VAR 0 5
46484: IN
46485: AND
46486: PUSH
46487: LD_INT 31
46489: PPUSH
46490: LD_VAR 0 16
46494: PPUSH
46495: CALL_OW 321
46499: PUSH
46500: LD_INT 2
46502: EQUAL
46503: AND
46504: IFFALSE 46564
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46506: LD_INT 22
46508: PUSH
46509: LD_VAR 0 16
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 35
46520: PUSH
46521: LD_INT 49
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 91
46530: PUSH
46531: LD_VAR 0 1
46535: PUSH
46536: LD_INT 10
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: PPUSH
46549: CALL_OW 69
46553: NOT
46554: IFFALSE 46564
// weapon := ru_time_lapser ;
46556: LD_ADDR_VAR 0 18
46560: PUSH
46561: LD_INT 49
46563: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46564: LD_VAR 0 12
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: IN
46579: PUSH
46580: LD_INT 11
46582: PUSH
46583: LD_VAR 0 5
46587: IN
46588: PUSH
46589: LD_INT 30
46591: PUSH
46592: LD_VAR 0 5
46596: IN
46597: OR
46598: AND
46599: PUSH
46600: LD_INT 6
46602: PPUSH
46603: LD_VAR 0 16
46607: PPUSH
46608: CALL_OW 321
46612: PUSH
46613: LD_INT 2
46615: EQUAL
46616: AND
46617: IFFALSE 46782
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46619: LD_INT 22
46621: PUSH
46622: LD_VAR 0 16
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: LD_INT 35
46636: PUSH
46637: LD_INT 11
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 35
46646: PUSH
46647: LD_INT 30
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 91
46661: PUSH
46662: LD_VAR 0 1
46666: PUSH
46667: LD_INT 18
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: PPUSH
46680: CALL_OW 69
46684: NOT
46685: PUSH
46686: LD_INT 22
46688: PUSH
46689: LD_VAR 0 16
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: LD_INT 30
46703: PUSH
46704: LD_INT 32
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 30
46713: PUSH
46714: LD_INT 33
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 91
46728: PUSH
46729: LD_VAR 0 1
46733: PUSH
46734: LD_INT 12
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: PUSH
46747: EMPTY
46748: LIST
46749: PPUSH
46750: CALL_OW 69
46754: PUSH
46755: LD_INT 2
46757: GREATER
46758: AND
46759: IFFALSE 46782
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46761: LD_ADDR_VAR 0 18
46765: PUSH
46766: LD_INT 11
46768: PUSH
46769: LD_INT 30
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_VAR 0 12
46780: ARRAY
46781: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46782: LD_VAR 0 18
46786: NOT
46787: PUSH
46788: LD_INT 40
46790: PPUSH
46791: LD_VAR 0 16
46795: PPUSH
46796: CALL_OW 321
46800: PUSH
46801: LD_INT 2
46803: EQUAL
46804: AND
46805: PUSH
46806: LD_INT 7
46808: PUSH
46809: LD_VAR 0 5
46813: IN
46814: PUSH
46815: LD_INT 28
46817: PUSH
46818: LD_VAR 0 5
46822: IN
46823: OR
46824: PUSH
46825: LD_INT 45
46827: PUSH
46828: LD_VAR 0 5
46832: IN
46833: OR
46834: AND
46835: IFFALSE 47089
// begin hex := GetHexInfo ( x , y ) ;
46837: LD_ADDR_VAR 0 4
46841: PUSH
46842: LD_VAR 0 10
46846: PPUSH
46847: LD_VAR 0 11
46851: PPUSH
46852: CALL_OW 546
46856: ST_TO_ADDR
// if hex [ 1 ] then
46857: LD_VAR 0 4
46861: PUSH
46862: LD_INT 1
46864: ARRAY
46865: IFFALSE 46869
// exit ;
46867: GO 47272
// height := hex [ 2 ] ;
46869: LD_ADDR_VAR 0 15
46873: PUSH
46874: LD_VAR 0 4
46878: PUSH
46879: LD_INT 2
46881: ARRAY
46882: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46883: LD_ADDR_VAR 0 14
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 3
46896: PUSH
46897: LD_INT 5
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: ST_TO_ADDR
// for i in tmp do
46906: LD_ADDR_VAR 0 8
46910: PUSH
46911: LD_VAR 0 14
46915: PUSH
46916: FOR_IN
46917: IFFALSE 47087
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46919: LD_ADDR_VAR 0 9
46923: PUSH
46924: LD_VAR 0 10
46928: PPUSH
46929: LD_VAR 0 8
46933: PPUSH
46934: LD_INT 5
46936: PPUSH
46937: CALL_OW 272
46941: PUSH
46942: LD_VAR 0 11
46946: PPUSH
46947: LD_VAR 0 8
46951: PPUSH
46952: LD_INT 5
46954: PPUSH
46955: CALL_OW 273
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46964: LD_VAR 0 9
46968: PUSH
46969: LD_INT 1
46971: ARRAY
46972: PPUSH
46973: LD_VAR 0 9
46977: PUSH
46978: LD_INT 2
46980: ARRAY
46981: PPUSH
46982: CALL_OW 488
46986: IFFALSE 47085
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46988: LD_ADDR_VAR 0 4
46992: PUSH
46993: LD_VAR 0 9
46997: PUSH
46998: LD_INT 1
47000: ARRAY
47001: PPUSH
47002: LD_VAR 0 9
47006: PUSH
47007: LD_INT 2
47009: ARRAY
47010: PPUSH
47011: CALL_OW 546
47015: ST_TO_ADDR
// if hex [ 1 ] then
47016: LD_VAR 0 4
47020: PUSH
47021: LD_INT 1
47023: ARRAY
47024: IFFALSE 47028
// continue ;
47026: GO 46916
// h := hex [ 2 ] ;
47028: LD_ADDR_VAR 0 13
47032: PUSH
47033: LD_VAR 0 4
47037: PUSH
47038: LD_INT 2
47040: ARRAY
47041: ST_TO_ADDR
// if h + 7 < height then
47042: LD_VAR 0 13
47046: PUSH
47047: LD_INT 7
47049: PLUS
47050: PUSH
47051: LD_VAR 0 15
47055: LESS
47056: IFFALSE 47085
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47058: LD_ADDR_VAR 0 18
47062: PUSH
47063: LD_INT 7
47065: PUSH
47066: LD_INT 28
47068: PUSH
47069: LD_INT 45
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: PUSH
47077: LD_VAR 0 12
47081: ARRAY
47082: ST_TO_ADDR
// break ;
47083: GO 47087
// end ; end ; end ;
47085: GO 46916
47087: POP
47088: POP
// end ; if not weapon then
47089: LD_VAR 0 18
47093: NOT
47094: IFFALSE 47154
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47096: LD_ADDR_VAR 0 5
47100: PUSH
47101: LD_VAR 0 5
47105: PUSH
47106: LD_INT 11
47108: PUSH
47109: LD_INT 30
47111: PUSH
47112: LD_INT 49
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: DIFF
47120: ST_TO_ADDR
// if not list then
47121: LD_VAR 0 5
47125: NOT
47126: IFFALSE 47130
// exit ;
47128: GO 47272
// weapon := list [ rand ( 1 , list ) ] ;
47130: LD_ADDR_VAR 0 18
47134: PUSH
47135: LD_VAR 0 5
47139: PUSH
47140: LD_INT 1
47142: PPUSH
47143: LD_VAR 0 5
47147: PPUSH
47148: CALL_OW 12
47152: ARRAY
47153: ST_TO_ADDR
// end ; if weapon then
47154: LD_VAR 0 18
47158: IFFALSE 47272
// begin tmp := CostOfWeapon ( weapon ) ;
47160: LD_ADDR_VAR 0 14
47164: PUSH
47165: LD_VAR 0 18
47169: PPUSH
47170: CALL_OW 451
47174: ST_TO_ADDR
// j := GetBase ( tower ) ;
47175: LD_ADDR_VAR 0 9
47179: PUSH
47180: LD_VAR 0 1
47184: PPUSH
47185: CALL_OW 274
47189: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47190: LD_VAR 0 9
47194: PPUSH
47195: LD_INT 1
47197: PPUSH
47198: CALL_OW 275
47202: PUSH
47203: LD_VAR 0 14
47207: PUSH
47208: LD_INT 1
47210: ARRAY
47211: GREATEREQUAL
47212: PUSH
47213: LD_VAR 0 9
47217: PPUSH
47218: LD_INT 2
47220: PPUSH
47221: CALL_OW 275
47225: PUSH
47226: LD_VAR 0 14
47230: PUSH
47231: LD_INT 2
47233: ARRAY
47234: GREATEREQUAL
47235: AND
47236: PUSH
47237: LD_VAR 0 9
47241: PPUSH
47242: LD_INT 3
47244: PPUSH
47245: CALL_OW 275
47249: PUSH
47250: LD_VAR 0 14
47254: PUSH
47255: LD_INT 3
47257: ARRAY
47258: GREATEREQUAL
47259: AND
47260: IFFALSE 47272
// result := weapon ;
47262: LD_ADDR_VAR 0 3
47266: PUSH
47267: LD_VAR 0 18
47271: ST_TO_ADDR
// end ; end ;
47272: LD_VAR 0 3
47276: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47277: LD_INT 0
47279: PPUSH
47280: PPUSH
// result := true ;
47281: LD_ADDR_VAR 0 3
47285: PUSH
47286: LD_INT 1
47288: ST_TO_ADDR
// if array1 = array2 then
47289: LD_VAR 0 1
47293: PUSH
47294: LD_VAR 0 2
47298: EQUAL
47299: IFFALSE 47359
// begin for i = 1 to array1 do
47301: LD_ADDR_VAR 0 4
47305: PUSH
47306: DOUBLE
47307: LD_INT 1
47309: DEC
47310: ST_TO_ADDR
47311: LD_VAR 0 1
47315: PUSH
47316: FOR_TO
47317: IFFALSE 47355
// if array1 [ i ] <> array2 [ i ] then
47319: LD_VAR 0 1
47323: PUSH
47324: LD_VAR 0 4
47328: ARRAY
47329: PUSH
47330: LD_VAR 0 2
47334: PUSH
47335: LD_VAR 0 4
47339: ARRAY
47340: NONEQUAL
47341: IFFALSE 47353
// begin result := false ;
47343: LD_ADDR_VAR 0 3
47347: PUSH
47348: LD_INT 0
47350: ST_TO_ADDR
// break ;
47351: GO 47355
// end ;
47353: GO 47316
47355: POP
47356: POP
// end else
47357: GO 47367
// result := false ;
47359: LD_ADDR_VAR 0 3
47363: PUSH
47364: LD_INT 0
47366: ST_TO_ADDR
// end ;
47367: LD_VAR 0 3
47371: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47372: LD_INT 0
47374: PPUSH
47375: PPUSH
// if not array1 or not array2 then
47376: LD_VAR 0 1
47380: NOT
47381: PUSH
47382: LD_VAR 0 2
47386: NOT
47387: OR
47388: IFFALSE 47392
// exit ;
47390: GO 47456
// result := true ;
47392: LD_ADDR_VAR 0 3
47396: PUSH
47397: LD_INT 1
47399: ST_TO_ADDR
// for i = 1 to array1 do
47400: LD_ADDR_VAR 0 4
47404: PUSH
47405: DOUBLE
47406: LD_INT 1
47408: DEC
47409: ST_TO_ADDR
47410: LD_VAR 0 1
47414: PUSH
47415: FOR_TO
47416: IFFALSE 47454
// if array1 [ i ] <> array2 [ i ] then
47418: LD_VAR 0 1
47422: PUSH
47423: LD_VAR 0 4
47427: ARRAY
47428: PUSH
47429: LD_VAR 0 2
47433: PUSH
47434: LD_VAR 0 4
47438: ARRAY
47439: NONEQUAL
47440: IFFALSE 47452
// begin result := false ;
47442: LD_ADDR_VAR 0 3
47446: PUSH
47447: LD_INT 0
47449: ST_TO_ADDR
// break ;
47450: GO 47454
// end ;
47452: GO 47415
47454: POP
47455: POP
// end ;
47456: LD_VAR 0 3
47460: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47461: LD_INT 0
47463: PPUSH
47464: PPUSH
47465: PPUSH
// pom := GetBase ( fac ) ;
47466: LD_ADDR_VAR 0 5
47470: PUSH
47471: LD_VAR 0 1
47475: PPUSH
47476: CALL_OW 274
47480: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47481: LD_ADDR_VAR 0 4
47485: PUSH
47486: LD_VAR 0 2
47490: PUSH
47491: LD_INT 1
47493: ARRAY
47494: PPUSH
47495: LD_VAR 0 2
47499: PUSH
47500: LD_INT 2
47502: ARRAY
47503: PPUSH
47504: LD_VAR 0 2
47508: PUSH
47509: LD_INT 3
47511: ARRAY
47512: PPUSH
47513: LD_VAR 0 2
47517: PUSH
47518: LD_INT 4
47520: ARRAY
47521: PPUSH
47522: CALL_OW 449
47526: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47527: LD_ADDR_VAR 0 3
47531: PUSH
47532: LD_VAR 0 5
47536: PPUSH
47537: LD_INT 1
47539: PPUSH
47540: CALL_OW 275
47544: PUSH
47545: LD_VAR 0 4
47549: PUSH
47550: LD_INT 1
47552: ARRAY
47553: GREATEREQUAL
47554: PUSH
47555: LD_VAR 0 5
47559: PPUSH
47560: LD_INT 2
47562: PPUSH
47563: CALL_OW 275
47567: PUSH
47568: LD_VAR 0 4
47572: PUSH
47573: LD_INT 2
47575: ARRAY
47576: GREATEREQUAL
47577: AND
47578: PUSH
47579: LD_VAR 0 5
47583: PPUSH
47584: LD_INT 3
47586: PPUSH
47587: CALL_OW 275
47591: PUSH
47592: LD_VAR 0 4
47596: PUSH
47597: LD_INT 3
47599: ARRAY
47600: GREATEREQUAL
47601: AND
47602: ST_TO_ADDR
// end ;
47603: LD_VAR 0 3
47607: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47608: LD_INT 0
47610: PPUSH
47611: PPUSH
47612: PPUSH
47613: PPUSH
// pom := GetBase ( building ) ;
47614: LD_ADDR_VAR 0 3
47618: PUSH
47619: LD_VAR 0 1
47623: PPUSH
47624: CALL_OW 274
47628: ST_TO_ADDR
// if not pom then
47629: LD_VAR 0 3
47633: NOT
47634: IFFALSE 47638
// exit ;
47636: GO 47808
// btype := GetBType ( building ) ;
47638: LD_ADDR_VAR 0 5
47642: PUSH
47643: LD_VAR 0 1
47647: PPUSH
47648: CALL_OW 266
47652: ST_TO_ADDR
// if btype = b_armoury then
47653: LD_VAR 0 5
47657: PUSH
47658: LD_INT 4
47660: EQUAL
47661: IFFALSE 47671
// btype := b_barracks ;
47663: LD_ADDR_VAR 0 5
47667: PUSH
47668: LD_INT 5
47670: ST_TO_ADDR
// if btype = b_depot then
47671: LD_VAR 0 5
47675: PUSH
47676: LD_INT 0
47678: EQUAL
47679: IFFALSE 47689
// btype := b_warehouse ;
47681: LD_ADDR_VAR 0 5
47685: PUSH
47686: LD_INT 1
47688: ST_TO_ADDR
// if btype = b_workshop then
47689: LD_VAR 0 5
47693: PUSH
47694: LD_INT 2
47696: EQUAL
47697: IFFALSE 47707
// btype := b_factory ;
47699: LD_ADDR_VAR 0 5
47703: PUSH
47704: LD_INT 3
47706: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47707: LD_ADDR_VAR 0 4
47711: PUSH
47712: LD_VAR 0 5
47716: PPUSH
47717: LD_VAR 0 1
47721: PPUSH
47722: CALL_OW 248
47726: PPUSH
47727: CALL_OW 450
47731: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47732: LD_ADDR_VAR 0 2
47736: PUSH
47737: LD_VAR 0 3
47741: PPUSH
47742: LD_INT 1
47744: PPUSH
47745: CALL_OW 275
47749: PUSH
47750: LD_VAR 0 4
47754: PUSH
47755: LD_INT 1
47757: ARRAY
47758: GREATEREQUAL
47759: PUSH
47760: LD_VAR 0 3
47764: PPUSH
47765: LD_INT 2
47767: PPUSH
47768: CALL_OW 275
47772: PUSH
47773: LD_VAR 0 4
47777: PUSH
47778: LD_INT 2
47780: ARRAY
47781: GREATEREQUAL
47782: AND
47783: PUSH
47784: LD_VAR 0 3
47788: PPUSH
47789: LD_INT 3
47791: PPUSH
47792: CALL_OW 275
47796: PUSH
47797: LD_VAR 0 4
47801: PUSH
47802: LD_INT 3
47804: ARRAY
47805: GREATEREQUAL
47806: AND
47807: ST_TO_ADDR
// end ;
47808: LD_VAR 0 2
47812: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47813: LD_INT 0
47815: PPUSH
47816: PPUSH
47817: PPUSH
// pom := GetBase ( building ) ;
47818: LD_ADDR_VAR 0 4
47822: PUSH
47823: LD_VAR 0 1
47827: PPUSH
47828: CALL_OW 274
47832: ST_TO_ADDR
// if not pom then
47833: LD_VAR 0 4
47837: NOT
47838: IFFALSE 47842
// exit ;
47840: GO 47943
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47842: LD_ADDR_VAR 0 5
47846: PUSH
47847: LD_VAR 0 2
47851: PPUSH
47852: LD_VAR 0 1
47856: PPUSH
47857: CALL_OW 248
47861: PPUSH
47862: CALL_OW 450
47866: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47867: LD_ADDR_VAR 0 3
47871: PUSH
47872: LD_VAR 0 4
47876: PPUSH
47877: LD_INT 1
47879: PPUSH
47880: CALL_OW 275
47884: PUSH
47885: LD_VAR 0 5
47889: PUSH
47890: LD_INT 1
47892: ARRAY
47893: GREATEREQUAL
47894: PUSH
47895: LD_VAR 0 4
47899: PPUSH
47900: LD_INT 2
47902: PPUSH
47903: CALL_OW 275
47907: PUSH
47908: LD_VAR 0 5
47912: PUSH
47913: LD_INT 2
47915: ARRAY
47916: GREATEREQUAL
47917: AND
47918: PUSH
47919: LD_VAR 0 4
47923: PPUSH
47924: LD_INT 3
47926: PPUSH
47927: CALL_OW 275
47931: PUSH
47932: LD_VAR 0 5
47936: PUSH
47937: LD_INT 3
47939: ARRAY
47940: GREATEREQUAL
47941: AND
47942: ST_TO_ADDR
// end ;
47943: LD_VAR 0 3
47947: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47948: LD_INT 0
47950: PPUSH
47951: PPUSH
47952: PPUSH
47953: PPUSH
47954: PPUSH
47955: PPUSH
47956: PPUSH
47957: PPUSH
47958: PPUSH
47959: PPUSH
47960: PPUSH
// result := false ;
47961: LD_ADDR_VAR 0 8
47965: PUSH
47966: LD_INT 0
47968: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47969: LD_VAR 0 5
47973: NOT
47974: PUSH
47975: LD_VAR 0 1
47979: NOT
47980: OR
47981: PUSH
47982: LD_VAR 0 2
47986: NOT
47987: OR
47988: PUSH
47989: LD_VAR 0 3
47993: NOT
47994: OR
47995: IFFALSE 47999
// exit ;
47997: GO 48813
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47999: LD_ADDR_VAR 0 14
48003: PUSH
48004: LD_VAR 0 1
48008: PPUSH
48009: LD_VAR 0 2
48013: PPUSH
48014: LD_VAR 0 3
48018: PPUSH
48019: LD_VAR 0 4
48023: PPUSH
48024: LD_VAR 0 5
48028: PUSH
48029: LD_INT 1
48031: ARRAY
48032: PPUSH
48033: CALL_OW 248
48037: PPUSH
48038: LD_INT 0
48040: PPUSH
48041: CALL 50066 0 6
48045: ST_TO_ADDR
// if not hexes then
48046: LD_VAR 0 14
48050: NOT
48051: IFFALSE 48055
// exit ;
48053: GO 48813
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48055: LD_ADDR_VAR 0 17
48059: PUSH
48060: LD_VAR 0 5
48064: PPUSH
48065: LD_INT 22
48067: PUSH
48068: LD_VAR 0 13
48072: PPUSH
48073: CALL_OW 255
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 30
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 30
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PPUSH
48114: CALL_OW 72
48118: ST_TO_ADDR
// for i = 1 to hexes do
48119: LD_ADDR_VAR 0 9
48123: PUSH
48124: DOUBLE
48125: LD_INT 1
48127: DEC
48128: ST_TO_ADDR
48129: LD_VAR 0 14
48133: PUSH
48134: FOR_TO
48135: IFFALSE 48811
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48137: LD_ADDR_VAR 0 13
48141: PUSH
48142: LD_VAR 0 14
48146: PUSH
48147: LD_VAR 0 9
48151: ARRAY
48152: PUSH
48153: LD_INT 1
48155: ARRAY
48156: PPUSH
48157: LD_VAR 0 14
48161: PUSH
48162: LD_VAR 0 9
48166: ARRAY
48167: PUSH
48168: LD_INT 2
48170: ARRAY
48171: PPUSH
48172: CALL_OW 428
48176: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48177: LD_VAR 0 14
48181: PUSH
48182: LD_VAR 0 9
48186: ARRAY
48187: PUSH
48188: LD_INT 1
48190: ARRAY
48191: PPUSH
48192: LD_VAR 0 14
48196: PUSH
48197: LD_VAR 0 9
48201: ARRAY
48202: PUSH
48203: LD_INT 2
48205: ARRAY
48206: PPUSH
48207: CALL_OW 351
48211: PUSH
48212: LD_VAR 0 14
48216: PUSH
48217: LD_VAR 0 9
48221: ARRAY
48222: PUSH
48223: LD_INT 1
48225: ARRAY
48226: PPUSH
48227: LD_VAR 0 14
48231: PUSH
48232: LD_VAR 0 9
48236: ARRAY
48237: PUSH
48238: LD_INT 2
48240: ARRAY
48241: PPUSH
48242: CALL_OW 488
48246: NOT
48247: OR
48248: PUSH
48249: LD_VAR 0 13
48253: PPUSH
48254: CALL_OW 247
48258: PUSH
48259: LD_INT 3
48261: EQUAL
48262: OR
48263: IFFALSE 48269
// exit ;
48265: POP
48266: POP
48267: GO 48813
// if not tmp then
48269: LD_VAR 0 13
48273: NOT
48274: IFFALSE 48278
// continue ;
48276: GO 48134
// result := true ;
48278: LD_ADDR_VAR 0 8
48282: PUSH
48283: LD_INT 1
48285: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48286: LD_VAR 0 6
48290: PUSH
48291: LD_VAR 0 13
48295: PPUSH
48296: CALL_OW 247
48300: PUSH
48301: LD_INT 2
48303: EQUAL
48304: AND
48305: PUSH
48306: LD_VAR 0 13
48310: PPUSH
48311: CALL_OW 263
48315: PUSH
48316: LD_INT 1
48318: EQUAL
48319: AND
48320: IFFALSE 48484
// begin if IsDrivenBy ( tmp ) then
48322: LD_VAR 0 13
48326: PPUSH
48327: CALL_OW 311
48331: IFFALSE 48335
// continue ;
48333: GO 48134
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48335: LD_VAR 0 6
48339: PPUSH
48340: LD_INT 3
48342: PUSH
48343: LD_INT 60
48345: PUSH
48346: EMPTY
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: LD_INT 55
48358: PUSH
48359: EMPTY
48360: LIST
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PPUSH
48370: CALL_OW 72
48374: IFFALSE 48482
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48376: LD_ADDR_VAR 0 18
48380: PUSH
48381: LD_VAR 0 6
48385: PPUSH
48386: LD_INT 3
48388: PUSH
48389: LD_INT 60
48391: PUSH
48392: EMPTY
48393: LIST
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 3
48401: PUSH
48402: LD_INT 55
48404: PUSH
48405: EMPTY
48406: LIST
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PPUSH
48416: CALL_OW 72
48420: PUSH
48421: LD_INT 1
48423: ARRAY
48424: ST_TO_ADDR
// if IsInUnit ( driver ) then
48425: LD_VAR 0 18
48429: PPUSH
48430: CALL_OW 310
48434: IFFALSE 48445
// ComExit ( driver ) ;
48436: LD_VAR 0 18
48440: PPUSH
48441: CALL 73847 0 1
// AddComEnterUnit ( driver , tmp ) ;
48445: LD_VAR 0 18
48449: PPUSH
48450: LD_VAR 0 13
48454: PPUSH
48455: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48459: LD_VAR 0 18
48463: PPUSH
48464: LD_VAR 0 7
48468: PPUSH
48469: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48473: LD_VAR 0 18
48477: PPUSH
48478: CALL_OW 181
// end ; continue ;
48482: GO 48134
// end ; if not cleaners or not tmp in cleaners then
48484: LD_VAR 0 6
48488: NOT
48489: PUSH
48490: LD_VAR 0 13
48494: PUSH
48495: LD_VAR 0 6
48499: IN
48500: NOT
48501: OR
48502: IFFALSE 48809
// begin if dep then
48504: LD_VAR 0 17
48508: IFFALSE 48644
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48510: LD_ADDR_VAR 0 16
48514: PUSH
48515: LD_VAR 0 17
48519: PUSH
48520: LD_INT 1
48522: ARRAY
48523: PPUSH
48524: CALL_OW 250
48528: PPUSH
48529: LD_VAR 0 17
48533: PUSH
48534: LD_INT 1
48536: ARRAY
48537: PPUSH
48538: CALL_OW 254
48542: PPUSH
48543: LD_INT 5
48545: PPUSH
48546: CALL_OW 272
48550: PUSH
48551: LD_VAR 0 17
48555: PUSH
48556: LD_INT 1
48558: ARRAY
48559: PPUSH
48560: CALL_OW 251
48564: PPUSH
48565: LD_VAR 0 17
48569: PUSH
48570: LD_INT 1
48572: ARRAY
48573: PPUSH
48574: CALL_OW 254
48578: PPUSH
48579: LD_INT 5
48581: PPUSH
48582: CALL_OW 273
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48591: LD_VAR 0 16
48595: PUSH
48596: LD_INT 1
48598: ARRAY
48599: PPUSH
48600: LD_VAR 0 16
48604: PUSH
48605: LD_INT 2
48607: ARRAY
48608: PPUSH
48609: CALL_OW 488
48613: IFFALSE 48644
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48615: LD_VAR 0 13
48619: PPUSH
48620: LD_VAR 0 16
48624: PUSH
48625: LD_INT 1
48627: ARRAY
48628: PPUSH
48629: LD_VAR 0 16
48633: PUSH
48634: LD_INT 2
48636: ARRAY
48637: PPUSH
48638: CALL_OW 111
// continue ;
48642: GO 48134
// end ; end ; r := GetDir ( tmp ) ;
48644: LD_ADDR_VAR 0 15
48648: PUSH
48649: LD_VAR 0 13
48653: PPUSH
48654: CALL_OW 254
48658: ST_TO_ADDR
// if r = 5 then
48659: LD_VAR 0 15
48663: PUSH
48664: LD_INT 5
48666: EQUAL
48667: IFFALSE 48677
// r := 0 ;
48669: LD_ADDR_VAR 0 15
48673: PUSH
48674: LD_INT 0
48676: ST_TO_ADDR
// for j = r to 5 do
48677: LD_ADDR_VAR 0 10
48681: PUSH
48682: DOUBLE
48683: LD_VAR 0 15
48687: DEC
48688: ST_TO_ADDR
48689: LD_INT 5
48691: PUSH
48692: FOR_TO
48693: IFFALSE 48807
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48695: LD_ADDR_VAR 0 11
48699: PUSH
48700: LD_VAR 0 13
48704: PPUSH
48705: CALL_OW 250
48709: PPUSH
48710: LD_VAR 0 10
48714: PPUSH
48715: LD_INT 2
48717: PPUSH
48718: CALL_OW 272
48722: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48723: LD_ADDR_VAR 0 12
48727: PUSH
48728: LD_VAR 0 13
48732: PPUSH
48733: CALL_OW 251
48737: PPUSH
48738: LD_VAR 0 10
48742: PPUSH
48743: LD_INT 2
48745: PPUSH
48746: CALL_OW 273
48750: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48751: LD_VAR 0 11
48755: PPUSH
48756: LD_VAR 0 12
48760: PPUSH
48761: CALL_OW 488
48765: PUSH
48766: LD_VAR 0 11
48770: PPUSH
48771: LD_VAR 0 12
48775: PPUSH
48776: CALL_OW 428
48780: NOT
48781: AND
48782: IFFALSE 48805
// begin ComMoveXY ( tmp , _x , _y ) ;
48784: LD_VAR 0 13
48788: PPUSH
48789: LD_VAR 0 11
48793: PPUSH
48794: LD_VAR 0 12
48798: PPUSH
48799: CALL_OW 111
// break ;
48803: GO 48807
// end ; end ;
48805: GO 48692
48807: POP
48808: POP
// end ; end ;
48809: GO 48134
48811: POP
48812: POP
// end ;
48813: LD_VAR 0 8
48817: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48818: LD_INT 0
48820: PPUSH
// result := true ;
48821: LD_ADDR_VAR 0 3
48825: PUSH
48826: LD_INT 1
48828: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48829: LD_VAR 0 2
48833: PUSH
48834: LD_INT 24
48836: DOUBLE
48837: EQUAL
48838: IFTRUE 48848
48840: LD_INT 33
48842: DOUBLE
48843: EQUAL
48844: IFTRUE 48848
48846: GO 48873
48848: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48849: LD_ADDR_VAR 0 3
48853: PUSH
48854: LD_INT 32
48856: PPUSH
48857: LD_VAR 0 1
48861: PPUSH
48862: CALL_OW 321
48866: PUSH
48867: LD_INT 2
48869: EQUAL
48870: ST_TO_ADDR
48871: GO 49189
48873: LD_INT 20
48875: DOUBLE
48876: EQUAL
48877: IFTRUE 48881
48879: GO 48906
48881: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48882: LD_ADDR_VAR 0 3
48886: PUSH
48887: LD_INT 6
48889: PPUSH
48890: LD_VAR 0 1
48894: PPUSH
48895: CALL_OW 321
48899: PUSH
48900: LD_INT 2
48902: EQUAL
48903: ST_TO_ADDR
48904: GO 49189
48906: LD_INT 22
48908: DOUBLE
48909: EQUAL
48910: IFTRUE 48920
48912: LD_INT 36
48914: DOUBLE
48915: EQUAL
48916: IFTRUE 48920
48918: GO 48945
48920: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48921: LD_ADDR_VAR 0 3
48925: PUSH
48926: LD_INT 15
48928: PPUSH
48929: LD_VAR 0 1
48933: PPUSH
48934: CALL_OW 321
48938: PUSH
48939: LD_INT 2
48941: EQUAL
48942: ST_TO_ADDR
48943: GO 49189
48945: LD_INT 30
48947: DOUBLE
48948: EQUAL
48949: IFTRUE 48953
48951: GO 48978
48953: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48954: LD_ADDR_VAR 0 3
48958: PUSH
48959: LD_INT 20
48961: PPUSH
48962: LD_VAR 0 1
48966: PPUSH
48967: CALL_OW 321
48971: PUSH
48972: LD_INT 2
48974: EQUAL
48975: ST_TO_ADDR
48976: GO 49189
48978: LD_INT 28
48980: DOUBLE
48981: EQUAL
48982: IFTRUE 48992
48984: LD_INT 21
48986: DOUBLE
48987: EQUAL
48988: IFTRUE 48992
48990: GO 49017
48992: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48993: LD_ADDR_VAR 0 3
48997: PUSH
48998: LD_INT 21
49000: PPUSH
49001: LD_VAR 0 1
49005: PPUSH
49006: CALL_OW 321
49010: PUSH
49011: LD_INT 2
49013: EQUAL
49014: ST_TO_ADDR
49015: GO 49189
49017: LD_INT 16
49019: DOUBLE
49020: EQUAL
49021: IFTRUE 49025
49023: GO 49050
49025: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49026: LD_ADDR_VAR 0 3
49030: PUSH
49031: LD_INT 84
49033: PPUSH
49034: LD_VAR 0 1
49038: PPUSH
49039: CALL_OW 321
49043: PUSH
49044: LD_INT 2
49046: EQUAL
49047: ST_TO_ADDR
49048: GO 49189
49050: LD_INT 19
49052: DOUBLE
49053: EQUAL
49054: IFTRUE 49064
49056: LD_INT 23
49058: DOUBLE
49059: EQUAL
49060: IFTRUE 49064
49062: GO 49089
49064: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49065: LD_ADDR_VAR 0 3
49069: PUSH
49070: LD_INT 83
49072: PPUSH
49073: LD_VAR 0 1
49077: PPUSH
49078: CALL_OW 321
49082: PUSH
49083: LD_INT 2
49085: EQUAL
49086: ST_TO_ADDR
49087: GO 49189
49089: LD_INT 17
49091: DOUBLE
49092: EQUAL
49093: IFTRUE 49097
49095: GO 49122
49097: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49098: LD_ADDR_VAR 0 3
49102: PUSH
49103: LD_INT 39
49105: PPUSH
49106: LD_VAR 0 1
49110: PPUSH
49111: CALL_OW 321
49115: PUSH
49116: LD_INT 2
49118: EQUAL
49119: ST_TO_ADDR
49120: GO 49189
49122: LD_INT 18
49124: DOUBLE
49125: EQUAL
49126: IFTRUE 49130
49128: GO 49155
49130: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49131: LD_ADDR_VAR 0 3
49135: PUSH
49136: LD_INT 40
49138: PPUSH
49139: LD_VAR 0 1
49143: PPUSH
49144: CALL_OW 321
49148: PUSH
49149: LD_INT 2
49151: EQUAL
49152: ST_TO_ADDR
49153: GO 49189
49155: LD_INT 27
49157: DOUBLE
49158: EQUAL
49159: IFTRUE 49163
49161: GO 49188
49163: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49164: LD_ADDR_VAR 0 3
49168: PUSH
49169: LD_INT 35
49171: PPUSH
49172: LD_VAR 0 1
49176: PPUSH
49177: CALL_OW 321
49181: PUSH
49182: LD_INT 2
49184: EQUAL
49185: ST_TO_ADDR
49186: GO 49189
49188: POP
// end ;
49189: LD_VAR 0 3
49193: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49194: LD_INT 0
49196: PPUSH
49197: PPUSH
49198: PPUSH
49199: PPUSH
49200: PPUSH
49201: PPUSH
49202: PPUSH
49203: PPUSH
49204: PPUSH
49205: PPUSH
49206: PPUSH
// result := false ;
49207: LD_ADDR_VAR 0 6
49211: PUSH
49212: LD_INT 0
49214: ST_TO_ADDR
// if btype = b_depot then
49215: LD_VAR 0 2
49219: PUSH
49220: LD_INT 0
49222: EQUAL
49223: IFFALSE 49235
// begin result := true ;
49225: LD_ADDR_VAR 0 6
49229: PUSH
49230: LD_INT 1
49232: ST_TO_ADDR
// exit ;
49233: GO 50061
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49235: LD_VAR 0 1
49239: NOT
49240: PUSH
49241: LD_VAR 0 1
49245: PPUSH
49246: CALL_OW 266
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: IN
49261: NOT
49262: OR
49263: PUSH
49264: LD_VAR 0 2
49268: NOT
49269: OR
49270: PUSH
49271: LD_VAR 0 5
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: LD_INT 4
49290: PUSH
49291: LD_INT 5
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: IN
49302: NOT
49303: OR
49304: PUSH
49305: LD_VAR 0 3
49309: PPUSH
49310: LD_VAR 0 4
49314: PPUSH
49315: CALL_OW 488
49319: NOT
49320: OR
49321: IFFALSE 49325
// exit ;
49323: GO 50061
// side := GetSide ( depot ) ;
49325: LD_ADDR_VAR 0 9
49329: PUSH
49330: LD_VAR 0 1
49334: PPUSH
49335: CALL_OW 255
49339: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49340: LD_VAR 0 9
49344: PPUSH
49345: LD_VAR 0 2
49349: PPUSH
49350: CALL 48818 0 2
49354: NOT
49355: IFFALSE 49359
// exit ;
49357: GO 50061
// pom := GetBase ( depot ) ;
49359: LD_ADDR_VAR 0 10
49363: PUSH
49364: LD_VAR 0 1
49368: PPUSH
49369: CALL_OW 274
49373: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49374: LD_ADDR_VAR 0 11
49378: PUSH
49379: LD_VAR 0 2
49383: PPUSH
49384: LD_VAR 0 1
49388: PPUSH
49389: CALL_OW 248
49393: PPUSH
49394: CALL_OW 450
49398: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49399: LD_VAR 0 10
49403: PPUSH
49404: LD_INT 1
49406: PPUSH
49407: CALL_OW 275
49411: PUSH
49412: LD_VAR 0 11
49416: PUSH
49417: LD_INT 1
49419: ARRAY
49420: GREATEREQUAL
49421: PUSH
49422: LD_VAR 0 10
49426: PPUSH
49427: LD_INT 2
49429: PPUSH
49430: CALL_OW 275
49434: PUSH
49435: LD_VAR 0 11
49439: PUSH
49440: LD_INT 2
49442: ARRAY
49443: GREATEREQUAL
49444: AND
49445: PUSH
49446: LD_VAR 0 10
49450: PPUSH
49451: LD_INT 3
49453: PPUSH
49454: CALL_OW 275
49458: PUSH
49459: LD_VAR 0 11
49463: PUSH
49464: LD_INT 3
49466: ARRAY
49467: GREATEREQUAL
49468: AND
49469: NOT
49470: IFFALSE 49474
// exit ;
49472: GO 50061
// if GetBType ( depot ) = b_depot then
49474: LD_VAR 0 1
49478: PPUSH
49479: CALL_OW 266
49483: PUSH
49484: LD_INT 0
49486: EQUAL
49487: IFFALSE 49499
// dist := 28 else
49489: LD_ADDR_VAR 0 14
49493: PUSH
49494: LD_INT 28
49496: ST_TO_ADDR
49497: GO 49507
// dist := 36 ;
49499: LD_ADDR_VAR 0 14
49503: PUSH
49504: LD_INT 36
49506: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49507: LD_VAR 0 1
49511: PPUSH
49512: LD_VAR 0 3
49516: PPUSH
49517: LD_VAR 0 4
49521: PPUSH
49522: CALL_OW 297
49526: PUSH
49527: LD_VAR 0 14
49531: GREATER
49532: IFFALSE 49536
// exit ;
49534: GO 50061
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49536: LD_ADDR_VAR 0 12
49540: PUSH
49541: LD_VAR 0 2
49545: PPUSH
49546: LD_VAR 0 3
49550: PPUSH
49551: LD_VAR 0 4
49555: PPUSH
49556: LD_VAR 0 5
49560: PPUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 248
49570: PPUSH
49571: LD_INT 0
49573: PPUSH
49574: CALL 50066 0 6
49578: ST_TO_ADDR
// if not hexes then
49579: LD_VAR 0 12
49583: NOT
49584: IFFALSE 49588
// exit ;
49586: GO 50061
// hex := GetHexInfo ( x , y ) ;
49588: LD_ADDR_VAR 0 15
49592: PUSH
49593: LD_VAR 0 3
49597: PPUSH
49598: LD_VAR 0 4
49602: PPUSH
49603: CALL_OW 546
49607: ST_TO_ADDR
// if hex [ 1 ] then
49608: LD_VAR 0 15
49612: PUSH
49613: LD_INT 1
49615: ARRAY
49616: IFFALSE 49620
// exit ;
49618: GO 50061
// height := hex [ 2 ] ;
49620: LD_ADDR_VAR 0 13
49624: PUSH
49625: LD_VAR 0 15
49629: PUSH
49630: LD_INT 2
49632: ARRAY
49633: ST_TO_ADDR
// for i = 1 to hexes do
49634: LD_ADDR_VAR 0 7
49638: PUSH
49639: DOUBLE
49640: LD_INT 1
49642: DEC
49643: ST_TO_ADDR
49644: LD_VAR 0 12
49648: PUSH
49649: FOR_TO
49650: IFFALSE 49980
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49652: LD_VAR 0 12
49656: PUSH
49657: LD_VAR 0 7
49661: ARRAY
49662: PUSH
49663: LD_INT 1
49665: ARRAY
49666: PPUSH
49667: LD_VAR 0 12
49671: PUSH
49672: LD_VAR 0 7
49676: ARRAY
49677: PUSH
49678: LD_INT 2
49680: ARRAY
49681: PPUSH
49682: CALL_OW 488
49686: NOT
49687: PUSH
49688: LD_VAR 0 12
49692: PUSH
49693: LD_VAR 0 7
49697: ARRAY
49698: PUSH
49699: LD_INT 1
49701: ARRAY
49702: PPUSH
49703: LD_VAR 0 12
49707: PUSH
49708: LD_VAR 0 7
49712: ARRAY
49713: PUSH
49714: LD_INT 2
49716: ARRAY
49717: PPUSH
49718: CALL_OW 428
49722: PUSH
49723: LD_INT 0
49725: GREATER
49726: OR
49727: PUSH
49728: LD_VAR 0 12
49732: PUSH
49733: LD_VAR 0 7
49737: ARRAY
49738: PUSH
49739: LD_INT 1
49741: ARRAY
49742: PPUSH
49743: LD_VAR 0 12
49747: PUSH
49748: LD_VAR 0 7
49752: ARRAY
49753: PUSH
49754: LD_INT 2
49756: ARRAY
49757: PPUSH
49758: CALL_OW 351
49762: OR
49763: IFFALSE 49769
// exit ;
49765: POP
49766: POP
49767: GO 50061
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49769: LD_ADDR_VAR 0 8
49773: PUSH
49774: LD_VAR 0 12
49778: PUSH
49779: LD_VAR 0 7
49783: ARRAY
49784: PUSH
49785: LD_INT 1
49787: ARRAY
49788: PPUSH
49789: LD_VAR 0 12
49793: PUSH
49794: LD_VAR 0 7
49798: ARRAY
49799: PUSH
49800: LD_INT 2
49802: ARRAY
49803: PPUSH
49804: CALL_OW 546
49808: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49809: LD_VAR 0 8
49813: PUSH
49814: LD_INT 1
49816: ARRAY
49817: PUSH
49818: LD_VAR 0 8
49822: PUSH
49823: LD_INT 2
49825: ARRAY
49826: PUSH
49827: LD_VAR 0 13
49831: PUSH
49832: LD_INT 2
49834: PLUS
49835: GREATER
49836: OR
49837: PUSH
49838: LD_VAR 0 8
49842: PUSH
49843: LD_INT 2
49845: ARRAY
49846: PUSH
49847: LD_VAR 0 13
49851: PUSH
49852: LD_INT 2
49854: MINUS
49855: LESS
49856: OR
49857: PUSH
49858: LD_VAR 0 8
49862: PUSH
49863: LD_INT 3
49865: ARRAY
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 8
49872: PUSH
49873: LD_INT 9
49875: PUSH
49876: LD_INT 10
49878: PUSH
49879: LD_INT 11
49881: PUSH
49882: LD_INT 12
49884: PUSH
49885: LD_INT 13
49887: PUSH
49888: LD_INT 16
49890: PUSH
49891: LD_INT 17
49893: PUSH
49894: LD_INT 18
49896: PUSH
49897: LD_INT 19
49899: PUSH
49900: LD_INT 20
49902: PUSH
49903: LD_INT 21
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: IN
49921: NOT
49922: OR
49923: PUSH
49924: LD_VAR 0 8
49928: PUSH
49929: LD_INT 5
49931: ARRAY
49932: NOT
49933: OR
49934: PUSH
49935: LD_VAR 0 8
49939: PUSH
49940: LD_INT 6
49942: ARRAY
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: LD_INT 7
49952: PUSH
49953: LD_INT 9
49955: PUSH
49956: LD_INT 10
49958: PUSH
49959: LD_INT 11
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: IN
49970: NOT
49971: OR
49972: IFFALSE 49978
// exit ;
49974: POP
49975: POP
49976: GO 50061
// end ;
49978: GO 49649
49980: POP
49981: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49982: LD_VAR 0 9
49986: PPUSH
49987: LD_VAR 0 3
49991: PPUSH
49992: LD_VAR 0 4
49996: PPUSH
49997: LD_INT 20
49999: PPUSH
50000: CALL 41984 0 4
50004: PUSH
50005: LD_INT 4
50007: ARRAY
50008: IFFALSE 50012
// exit ;
50010: GO 50061
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50012: LD_VAR 0 2
50016: PUSH
50017: LD_INT 29
50019: PUSH
50020: LD_INT 30
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: IN
50027: PUSH
50028: LD_VAR 0 3
50032: PPUSH
50033: LD_VAR 0 4
50037: PPUSH
50038: LD_VAR 0 9
50042: PPUSH
50043: CALL_OW 440
50047: NOT
50048: AND
50049: IFFALSE 50053
// exit ;
50051: GO 50061
// result := true ;
50053: LD_ADDR_VAR 0 6
50057: PUSH
50058: LD_INT 1
50060: ST_TO_ADDR
// end ;
50061: LD_VAR 0 6
50065: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50066: LD_INT 0
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
50077: PPUSH
50078: PPUSH
50079: PPUSH
50080: PPUSH
50081: PPUSH
50082: PPUSH
50083: PPUSH
50084: PPUSH
50085: PPUSH
50086: PPUSH
50087: PPUSH
50088: PPUSH
50089: PPUSH
50090: PPUSH
50091: PPUSH
50092: PPUSH
50093: PPUSH
50094: PPUSH
50095: PPUSH
50096: PPUSH
50097: PPUSH
50098: PPUSH
50099: PPUSH
50100: PPUSH
50101: PPUSH
50102: PPUSH
50103: PPUSH
50104: PPUSH
50105: PPUSH
50106: PPUSH
50107: PPUSH
50108: PPUSH
50109: PPUSH
50110: PPUSH
50111: PPUSH
50112: PPUSH
50113: PPUSH
50114: PPUSH
50115: PPUSH
50116: PPUSH
50117: PPUSH
50118: PPUSH
50119: PPUSH
50120: PPUSH
50121: PPUSH
50122: PPUSH
50123: PPUSH
50124: PPUSH
50125: PPUSH
// result = [ ] ;
50126: LD_ADDR_VAR 0 7
50130: PUSH
50131: EMPTY
50132: ST_TO_ADDR
// temp_list = [ ] ;
50133: LD_ADDR_VAR 0 9
50137: PUSH
50138: EMPTY
50139: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50140: LD_VAR 0 4
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 2
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: LD_INT 4
50159: PUSH
50160: LD_INT 5
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: IN
50171: NOT
50172: PUSH
50173: LD_VAR 0 1
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: IN
50188: PUSH
50189: LD_VAR 0 5
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 3
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: IN
50208: NOT
50209: AND
50210: OR
50211: IFFALSE 50215
// exit ;
50213: GO 68606
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50215: LD_VAR 0 1
50219: PUSH
50220: LD_INT 6
50222: PUSH
50223: LD_INT 7
50225: PUSH
50226: LD_INT 8
50228: PUSH
50229: LD_INT 13
50231: PUSH
50232: LD_INT 12
50234: PUSH
50235: LD_INT 15
50237: PUSH
50238: LD_INT 11
50240: PUSH
50241: LD_INT 14
50243: PUSH
50244: LD_INT 10
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: IN
50258: IFFALSE 50268
// btype = b_lab ;
50260: LD_ADDR_VAR 0 1
50264: PUSH
50265: LD_INT 6
50267: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50268: LD_VAR 0 6
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: IN
50287: NOT
50288: PUSH
50289: LD_VAR 0 1
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 3
50305: PUSH
50306: LD_INT 6
50308: PUSH
50309: LD_INT 36
50311: PUSH
50312: LD_INT 4
50314: PUSH
50315: LD_INT 5
50317: PUSH
50318: LD_INT 31
50320: PUSH
50321: LD_INT 32
50323: PUSH
50324: LD_INT 33
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: IN
50340: NOT
50341: PUSH
50342: LD_VAR 0 6
50346: PUSH
50347: LD_INT 1
50349: EQUAL
50350: AND
50351: OR
50352: PUSH
50353: LD_VAR 0 1
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: LD_INT 3
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: IN
50368: NOT
50369: PUSH
50370: LD_VAR 0 6
50374: PUSH
50375: LD_INT 2
50377: EQUAL
50378: AND
50379: OR
50380: IFFALSE 50390
// mode = 0 ;
50382: LD_ADDR_VAR 0 6
50386: PUSH
50387: LD_INT 0
50389: ST_TO_ADDR
// case mode of 0 :
50390: LD_VAR 0 6
50394: PUSH
50395: LD_INT 0
50397: DOUBLE
50398: EQUAL
50399: IFTRUE 50403
50401: GO 61856
50403: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50404: LD_ADDR_VAR 0 11
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 3
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 3
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50597: LD_ADDR_VAR 0 12
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 3
50754: NEG
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 3
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50793: LD_ADDR_VAR 0 13
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50992: LD_ADDR_VAR 0 14
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51188: LD_ADDR_VAR 0 15
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 3
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51381: LD_ADDR_VAR 0 16
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 3
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: LD_INT 3
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: LD_INT 3
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51574: LD_ADDR_VAR 0 17
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51804: LD_ADDR_VAR 0 18
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52034: LD_ADDR_VAR 0 19
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52264: LD_ADDR_VAR 0 20
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52494: LD_ADDR_VAR 0 21
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52724: LD_ADDR_VAR 0 22
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52954: LD_ADDR_VAR 0 23
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: LD_INT 3
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 3
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53234: LD_ADDR_VAR 0 24
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53510: LD_ADDR_VAR 0 25
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53784: LD_ADDR_VAR 0 26
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 3
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54060: LD_ADDR_VAR 0 27
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 3
54305: NEG
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54340: LD_ADDR_VAR 0 28
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 3
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: NEG
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54622: LD_ADDR_VAR 0 29
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: LD_INT 3
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 3
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 3
54866: NEG
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54901: LD_ADDR_VAR 0 30
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55179: LD_ADDR_VAR 0 31
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55457: LD_ADDR_VAR 0 32
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 3
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: NEG
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55735: LD_ADDR_VAR 0 33
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 3
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 3
55979: NEG
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56014: LD_ADDR_VAR 0 34
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 3
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: NEG
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56294: LD_ADDR_VAR 0 35
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56406: LD_ADDR_VAR 0 36
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56518: LD_ADDR_VAR 0 37
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56630: LD_ADDR_VAR 0 38
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56742: LD_ADDR_VAR 0 39
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56854: LD_ADDR_VAR 0 40
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56966: LD_ADDR_VAR 0 41
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 3
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 3
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 3
57263: NEG
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 3
57275: NEG
57276: PUSH
57277: LD_INT 3
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57316: LD_ADDR_VAR 0 42
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: LD_INT 3
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 3
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: LD_INT 3
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 3
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 3
57625: NEG
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57666: LD_ADDR_VAR 0 43
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: NEG
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 3
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 3
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: NEG
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58014: LD_ADDR_VAR 0 44
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: LD_INT 3
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: LD_INT 2
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: LD_INT 3
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 3
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: LD_INT 3
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58364: LD_ADDR_VAR 0 45
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 3
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 3
58610: PUSH
58611: LD_INT 3
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: LD_INT 3
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: NEG
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 3
58673: NEG
58674: PUSH
58675: LD_INT 3
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58714: LD_ADDR_VAR 0 46
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 3
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 3
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 3
59010: NEG
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59062: LD_ADDR_VAR 0 47
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59213: LD_ADDR_VAR 0 48
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59360: LD_ADDR_VAR 0 49
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: NEG
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59504: LD_ADDR_VAR 0 50
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59648: LD_ADDR_VAR 0 51
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59795: LD_ADDR_VAR 0 52
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59946: LD_ADDR_VAR 0 53
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60176: LD_ADDR_VAR 0 54
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 2
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 2
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60406: LD_ADDR_VAR 0 55
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: LD_INT 2
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60636: LD_ADDR_VAR 0 56
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 2
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 2
60812: NEG
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 2
60823: NEG
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: LD_INT 2
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60866: LD_ADDR_VAR 0 57
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 2
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61096: LD_ADDR_VAR 0 58
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: NEG
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 2
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 2
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61326: LD_ADDR_VAR 0 59
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61414: LD_ADDR_VAR 0 60
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61502: LD_ADDR_VAR 0 61
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61590: LD_ADDR_VAR 0 62
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61678: LD_ADDR_VAR 0 63
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61766: LD_ADDR_VAR 0 64
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: ST_TO_ADDR
// end ; 1 :
61854: GO 67751
61856: LD_INT 1
61858: DOUBLE
61859: EQUAL
61860: IFTRUE 61864
61862: GO 64487
61864: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61865: LD_ADDR_VAR 0 11
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: LD_INT 3
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: LD_INT 3
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: LIST
61908: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61909: LD_ADDR_VAR 0 12
61913: PUSH
61914: LD_INT 2
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 3
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: LIST
61949: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61950: LD_ADDR_VAR 0 13
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: LD_INT 2
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 3
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61990: LD_ADDR_VAR 0 14
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62031: LD_ADDR_VAR 0 15
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 3
62060: NEG
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: LIST
62074: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62075: LD_ADDR_VAR 0 16
62079: PUSH
62080: LD_INT 2
62082: NEG
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 3
62094: NEG
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 3
62106: NEG
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62121: LD_ADDR_VAR 0 17
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 3
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 3
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: LD_INT 2
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62165: LD_ADDR_VAR 0 18
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 3
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 3
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62206: LD_ADDR_VAR 0 19
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 3
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: LIST
62245: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62246: LD_ADDR_VAR 0 20
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_INT 3
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: LD_INT 2
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62287: LD_ADDR_VAR 0 21
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 3
62316: NEG
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62331: LD_ADDR_VAR 0 22
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: LD_INT 3
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 3
62350: NEG
62351: PUSH
62352: LD_INT 2
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 3
62362: NEG
62363: PUSH
62364: LD_INT 3
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62377: LD_ADDR_VAR 0 23
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 4
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: LD_INT 3
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: LIST
62420: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62421: LD_ADDR_VAR 0 24
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 4
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62462: LD_ADDR_VAR 0 25
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: LD_INT 3
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 4
62479: PUSH
62480: LD_INT 3
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: LD_INT 4
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: LIST
62501: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62502: LD_ADDR_VAR 0 26
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 3
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: LD_INT 4
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: LD_INT 3
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: LIST
62542: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62543: LD_ADDR_VAR 0 27
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 3
62561: NEG
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 4
62572: NEG
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62587: LD_ADDR_VAR 0 28
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: LD_INT 3
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 3
62606: NEG
62607: PUSH
62608: LD_INT 4
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 4
62618: NEG
62619: PUSH
62620: LD_INT 3
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62633: LD_ADDR_VAR 0 29
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: LD_INT 3
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 3
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: LD_INT 4
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: LD_INT 4
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: LD_INT 3
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: LD_INT 5
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 5
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 4
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 6
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 6
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 5
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62788: LD_ADDR_VAR 0 30
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 3
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 3
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 3
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 4
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 4
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 4
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 5
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 5
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 5
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 6
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 6
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62931: LD_ADDR_VAR 0 31
62935: PUSH
62936: LD_INT 3
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 3
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: LD_INT 3
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 4
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 4
62978: PUSH
62979: LD_INT 4
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 3
62988: PUSH
62989: LD_INT 4
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 5
62998: PUSH
62999: LD_INT 4
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 5
63008: PUSH
63009: LD_INT 5
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 4
63018: PUSH
63019: LD_INT 5
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 6
63028: PUSH
63029: LD_INT 5
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 6
63038: PUSH
63039: LD_INT 6
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 5
63048: PUSH
63049: LD_INT 6
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63070: LD_ADDR_VAR 0 32
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: LD_INT 3
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: LD_INT 3
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: LD_INT 2
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: LD_INT 4
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: LD_INT 4
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: LD_INT 5
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: LD_INT 5
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: LD_INT 4
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: LD_INT 6
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 6
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: LD_INT 5
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63213: LD_ADDR_VAR 0 33
63217: PUSH
63218: LD_INT 2
63220: NEG
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 3
63231: NEG
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 3
63254: NEG
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 4
63265: NEG
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 4
63276: NEG
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 4
63288: NEG
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 5
63299: NEG
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 5
63310: NEG
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 5
63322: NEG
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 6
63333: NEG
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 6
63344: NEG
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63368: LD_ADDR_VAR 0 34
63372: PUSH
63373: LD_INT 2
63375: NEG
63376: PUSH
63377: LD_INT 3
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 3
63387: NEG
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 3
63399: NEG
63400: PUSH
63401: LD_INT 3
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 3
63411: NEG
63412: PUSH
63413: LD_INT 4
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 4
63423: NEG
63424: PUSH
63425: LD_INT 3
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 4
63435: NEG
63436: PUSH
63437: LD_INT 4
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 4
63447: NEG
63448: PUSH
63449: LD_INT 5
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 5
63459: NEG
63460: PUSH
63461: LD_INT 4
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 5
63471: NEG
63472: PUSH
63473: LD_INT 5
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 5
63483: NEG
63484: PUSH
63485: LD_INT 6
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 6
63495: NEG
63496: PUSH
63497: LD_INT 5
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 6
63507: NEG
63508: PUSH
63509: LD_INT 6
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63531: LD_ADDR_VAR 0 41
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: LD_INT 2
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: LD_INT 3
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 2
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: LIST
63574: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63575: LD_ADDR_VAR 0 42
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 2
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 3
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63616: LD_ADDR_VAR 0 43
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63656: LD_ADDR_VAR 0 44
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: LIST
63696: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63697: LD_ADDR_VAR 0 45
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 3
63726: NEG
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: LIST
63740: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63741: LD_ADDR_VAR 0 46
63745: PUSH
63746: LD_INT 2
63748: NEG
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 3
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 3
63772: NEG
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63787: LD_ADDR_VAR 0 47
63791: PUSH
63792: LD_INT 2
63794: NEG
63795: PUSH
63796: LD_INT 3
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 3
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63820: LD_ADDR_VAR 0 48
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: LD_INT 2
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63851: LD_ADDR_VAR 0 49
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63880: LD_ADDR_VAR 0 50
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: LD_INT 3
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: LD_INT 3
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63909: LD_ADDR_VAR 0 51
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63940: LD_ADDR_VAR 0 52
63944: PUSH
63945: LD_INT 3
63947: NEG
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 3
63959: NEG
63960: PUSH
63961: LD_INT 2
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63973: LD_ADDR_VAR 0 53
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: LD_INT 3
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: LD_INT 3
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64017: LD_ADDR_VAR 0 54
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 3
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 3
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: LIST
64057: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64058: LD_ADDR_VAR 0 55
64062: PUSH
64063: LD_INT 3
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 3
64075: PUSH
64076: LD_INT 3
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 2
64085: PUSH
64086: LD_INT 3
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64098: LD_ADDR_VAR 0 56
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: LD_INT 3
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 3
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64139: LD_ADDR_VAR 0 57
64143: PUSH
64144: LD_INT 2
64146: NEG
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 3
64157: NEG
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 3
64168: NEG
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: LIST
64182: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64183: LD_ADDR_VAR 0 58
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: LD_INT 3
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 3
64202: NEG
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 3
64214: NEG
64215: PUSH
64216: LD_INT 3
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64229: LD_ADDR_VAR 0 59
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: LD_INT 2
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 2
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 1
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: LIST
64272: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64273: LD_ADDR_VAR 0 60
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 2
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64314: LD_ADDR_VAR 0 61
64318: PUSH
64319: LD_INT 2
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: LD_INT 2
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: LD_INT 2
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64354: LD_ADDR_VAR 0 62
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 2
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: LD_INT 2
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64395: LD_ADDR_VAR 0 63
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 2
64413: NEG
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: LIST
64438: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64439: LD_ADDR_VAR 0 64
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 2
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: LD_INT 2
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: LIST
64484: ST_TO_ADDR
// end ; 2 :
64485: GO 67751
64487: LD_INT 2
64489: DOUBLE
64490: EQUAL
64491: IFTRUE 64495
64493: GO 67750
64495: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64496: LD_ADDR_VAR 0 29
64500: PUSH
64501: LD_INT 4
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 4
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 5
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 5
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 4
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 3
64575: PUSH
64576: LD_INT 2
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 5
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 3
64596: PUSH
64597: LD_INT 3
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 3
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 4
64616: PUSH
64617: LD_INT 3
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 4
64626: PUSH
64627: LD_INT 4
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 3
64636: PUSH
64637: LD_INT 4
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: LD_INT 3
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 4
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 2
64676: PUSH
64677: LD_INT 4
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 4
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: LD_INT 4
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: LD_INT 5
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: LD_INT 5
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: LD_INT 4
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: PUSH
64749: LD_INT 3
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 2
64758: PUSH
64759: LD_INT 5
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 2
64768: NEG
64769: PUSH
64770: LD_INT 3
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 2
64802: NEG
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 2
64813: NEG
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 3
64824: NEG
64825: PUSH
64826: LD_INT 1
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 4
64835: NEG
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 4
64846: NEG
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 4
64858: NEG
64859: PUSH
64860: LD_INT 2
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 2
64870: NEG
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 4
64881: NEG
64882: PUSH
64883: LD_INT 4
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 4
64893: NEG
64894: PUSH
64895: LD_INT 5
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 3
64905: NEG
64906: PUSH
64907: LD_INT 4
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 3
64917: NEG
64918: PUSH
64919: LD_INT 3
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 4
64929: NEG
64930: PUSH
64931: LD_INT 3
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 5
64941: NEG
64942: PUSH
64943: LD_INT 4
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 5
64953: NEG
64954: PUSH
64955: LD_INT 5
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 3
64965: NEG
64966: PUSH
64967: LD_INT 5
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 5
64977: NEG
64978: PUSH
64979: LD_INT 3
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65034: LD_ADDR_VAR 0 30
65038: PUSH
65039: LD_INT 4
65041: PUSH
65042: LD_INT 4
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 4
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 5
65061: PUSH
65062: LD_INT 4
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 5
65071: PUSH
65072: LD_INT 5
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 4
65081: PUSH
65082: LD_INT 5
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: LD_INT 4
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 3
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 5
65111: PUSH
65112: LD_INT 3
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 3
65121: PUSH
65122: LD_INT 5
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: LD_INT 3
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: LD_INT 3
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: LD_INT 4
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: LD_INT 4
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 1
65181: NEG
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: PUSH
65204: LD_INT 4
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: LD_INT 2
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 4
65224: NEG
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 4
65235: NEG
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 3
65247: NEG
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 3
65258: NEG
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 4
65269: NEG
65270: PUSH
65271: LD_INT 1
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 5
65280: NEG
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 5
65291: NEG
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 5
65303: NEG
65304: PUSH
65305: LD_INT 2
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 3
65315: NEG
65316: PUSH
65317: LD_INT 2
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 3
65326: NEG
65327: PUSH
65328: LD_INT 3
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: LD_INT 4
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 2
65350: NEG
65351: PUSH
65352: LD_INT 3
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 2
65362: NEG
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 3
65374: NEG
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 4
65386: NEG
65387: PUSH
65388: LD_INT 3
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 4
65398: NEG
65399: PUSH
65400: LD_INT 4
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: NEG
65411: PUSH
65412: LD_INT 4
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 4
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 4
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: LD_INT 5
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: LD_INT 4
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: LD_INT 3
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: LD_INT 4
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: NEG
65502: PUSH
65503: LD_INT 5
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: LD_INT 3
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 2
65524: NEG
65525: PUSH
65526: LD_INT 5
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65581: LD_ADDR_VAR 0 31
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: LD_INT 4
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: LD_INT 3
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 4
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 5
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: LD_INT 5
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: LD_INT 4
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: LD_INT 3
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: LD_INT 5
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 2
65670: NEG
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 3
65681: NEG
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 3
65692: NEG
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 2
65704: NEG
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 2
65715: NEG
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 3
65726: NEG
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 4
65737: NEG
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 4
65748: NEG
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 4
65760: NEG
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 2
65772: NEG
65773: PUSH
65774: LD_INT 2
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 4
65783: NEG
65784: PUSH
65785: LD_INT 4
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 4
65795: NEG
65796: PUSH
65797: LD_INT 5
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 3
65807: NEG
65808: PUSH
65809: LD_INT 4
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 3
65819: NEG
65820: PUSH
65821: LD_INT 3
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 4
65831: NEG
65832: PUSH
65833: LD_INT 3
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 5
65843: NEG
65844: PUSH
65845: LD_INT 4
65847: NEG
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 5
65855: NEG
65856: PUSH
65857: LD_INT 5
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: NEG
65868: PUSH
65869: LD_INT 5
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 5
65879: NEG
65880: PUSH
65881: LD_INT 3
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: LD_INT 3
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 0
65902: PUSH
65903: LD_INT 4
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 1
65913: PUSH
65914: LD_INT 3
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: NEG
65947: PUSH
65948: LD_INT 3
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: LD_INT 4
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 2
65970: PUSH
65971: LD_INT 2
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 2
65981: NEG
65982: PUSH
65983: LD_INT 4
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 4
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 4
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 5
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 5
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 4
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 3
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 3
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 3
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 5
66076: PUSH
66077: LD_INT 2
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66131: LD_ADDR_VAR 0 32
66135: PUSH
66136: LD_INT 4
66138: NEG
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 4
66149: NEG
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 3
66172: NEG
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 4
66183: NEG
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 5
66194: NEG
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 5
66205: NEG
66206: PUSH
66207: LD_INT 1
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 5
66217: NEG
66218: PUSH
66219: LD_INT 2
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 3
66229: NEG
66230: PUSH
66231: LD_INT 2
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 3
66240: NEG
66241: PUSH
66242: LD_INT 3
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 3
66252: NEG
66253: PUSH
66254: LD_INT 4
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 2
66264: NEG
66265: PUSH
66266: LD_INT 3
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: LD_INT 2
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: LD_INT 2
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 4
66300: NEG
66301: PUSH
66302: LD_INT 3
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 4
66312: NEG
66313: PUSH
66314: LD_INT 4
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 2
66324: NEG
66325: PUSH
66326: LD_INT 4
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 4
66336: NEG
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 4
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 5
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: LD_INT 4
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: LD_INT 3
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 0
66392: PUSH
66393: LD_INT 3
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 1
66403: NEG
66404: PUSH
66405: LD_INT 4
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: LD_INT 5
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 2
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 2
66438: NEG
66439: PUSH
66440: LD_INT 5
66442: NEG
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 3
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 3
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 4
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 4
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 4
66533: PUSH
66534: LD_INT 2
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 4
66543: PUSH
66544: LD_INT 4
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 4
66553: PUSH
66554: LD_INT 3
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 5
66563: PUSH
66564: LD_INT 4
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 5
66573: PUSH
66574: LD_INT 5
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 4
66583: PUSH
66584: LD_INT 5
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: LD_INT 4
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 3
66603: PUSH
66604: LD_INT 3
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 5
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: LD_INT 5
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66678: LD_ADDR_VAR 0 33
66682: PUSH
66683: LD_INT 4
66685: NEG
66686: PUSH
66687: LD_INT 4
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 4
66697: NEG
66698: PUSH
66699: LD_INT 5
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 3
66709: NEG
66710: PUSH
66711: LD_INT 4
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 3
66721: NEG
66722: PUSH
66723: LD_INT 3
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 4
66733: NEG
66734: PUSH
66735: LD_INT 3
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 5
66745: NEG
66746: PUSH
66747: LD_INT 4
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 5
66757: NEG
66758: PUSH
66759: LD_INT 5
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 3
66769: NEG
66770: PUSH
66771: LD_INT 5
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 5
66781: NEG
66782: PUSH
66783: LD_INT 3
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: LD_INT 3
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: LD_INT 4
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 1
66815: PUSH
66816: LD_INT 3
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: LD_INT 2
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: LD_INT 3
66852: NEG
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 1
66860: NEG
66861: PUSH
66862: LD_INT 4
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 2
66872: PUSH
66873: LD_INT 2
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: LD_INT 4
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 4
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 4
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 5
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 5
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 4
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 3
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 3
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: LD_INT 2
66970: NEG
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 5
66978: PUSH
66979: LD_INT 2
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 3
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 3
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 4
67008: PUSH
67009: LD_INT 3
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 4
67018: PUSH
67019: LD_INT 4
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: LD_INT 4
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 2
67038: PUSH
67039: LD_INT 3
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 2
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 4
67058: PUSH
67059: LD_INT 2
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 2
67068: PUSH
67069: LD_INT 4
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: LD_INT 4
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: LD_INT 3
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: PUSH
67099: LD_INT 4
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: LD_INT 5
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: LD_INT 5
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: LD_INT 4
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: LD_INT 3
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: LD_INT 5
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 2
67160: NEG
67161: PUSH
67162: LD_INT 3
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67216: LD_ADDR_VAR 0 34
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: LD_INT 4
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 0
67234: PUSH
67235: LD_INT 5
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: LD_INT 4
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 1
67256: PUSH
67257: LD_INT 3
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: LD_INT 3
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 1
67278: NEG
67279: PUSH
67280: LD_INT 4
67282: NEG
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: PUSH
67292: LD_INT 5
67294: NEG
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 2
67302: PUSH
67303: LD_INT 3
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 2
67313: NEG
67314: PUSH
67315: LD_INT 5
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 3
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 4
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 4
67356: PUSH
67357: LD_INT 1
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 3
67366: PUSH
67367: LD_INT 1
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 2
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: PUSH
67387: LD_INT 1
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: LD_INT 2
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 4
67408: PUSH
67409: LD_INT 2
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 4
67418: PUSH
67419: LD_INT 4
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 4
67428: PUSH
67429: LD_INT 3
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 5
67438: PUSH
67439: LD_INT 4
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 5
67448: PUSH
67449: LD_INT 5
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 4
67458: PUSH
67459: LD_INT 5
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 3
67468: PUSH
67469: LD_INT 4
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 3
67478: PUSH
67479: LD_INT 3
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 5
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 3
67498: PUSH
67499: LD_INT 5
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 2
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 1
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: LD_INT 4
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: LD_INT 4
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 1
67558: NEG
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: LD_INT 2
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 2
67580: PUSH
67581: LD_INT 4
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 2
67590: NEG
67591: PUSH
67592: LD_INT 2
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 4
67601: NEG
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 4
67612: NEG
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 3
67624: NEG
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 3
67635: NEG
67636: PUSH
67637: LD_INT 1
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 4
67646: NEG
67647: PUSH
67648: LD_INT 1
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 5
67657: NEG
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 5
67668: NEG
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 5
67680: NEG
67681: PUSH
67682: LD_INT 2
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 3
67692: NEG
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: ST_TO_ADDR
// end ; end ;
67748: GO 67751
67750: POP
// case btype of b_depot , b_warehouse :
67751: LD_VAR 0 1
67755: PUSH
67756: LD_INT 0
67758: DOUBLE
67759: EQUAL
67760: IFTRUE 67770
67762: LD_INT 1
67764: DOUBLE
67765: EQUAL
67766: IFTRUE 67770
67768: GO 67971
67770: POP
// case nation of nation_american :
67771: LD_VAR 0 5
67775: PUSH
67776: LD_INT 1
67778: DOUBLE
67779: EQUAL
67780: IFTRUE 67784
67782: GO 67840
67784: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67785: LD_ADDR_VAR 0 9
67789: PUSH
67790: LD_VAR 0 11
67794: PUSH
67795: LD_VAR 0 12
67799: PUSH
67800: LD_VAR 0 13
67804: PUSH
67805: LD_VAR 0 14
67809: PUSH
67810: LD_VAR 0 15
67814: PUSH
67815: LD_VAR 0 16
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: PUSH
67828: LD_VAR 0 4
67832: PUSH
67833: LD_INT 1
67835: PLUS
67836: ARRAY
67837: ST_TO_ADDR
67838: GO 67969
67840: LD_INT 2
67842: DOUBLE
67843: EQUAL
67844: IFTRUE 67848
67846: GO 67904
67848: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67849: LD_ADDR_VAR 0 9
67853: PUSH
67854: LD_VAR 0 17
67858: PUSH
67859: LD_VAR 0 18
67863: PUSH
67864: LD_VAR 0 19
67868: PUSH
67869: LD_VAR 0 20
67873: PUSH
67874: LD_VAR 0 21
67878: PUSH
67879: LD_VAR 0 22
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: PUSH
67892: LD_VAR 0 4
67896: PUSH
67897: LD_INT 1
67899: PLUS
67900: ARRAY
67901: ST_TO_ADDR
67902: GO 67969
67904: LD_INT 3
67906: DOUBLE
67907: EQUAL
67908: IFTRUE 67912
67910: GO 67968
67912: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67913: LD_ADDR_VAR 0 9
67917: PUSH
67918: LD_VAR 0 23
67922: PUSH
67923: LD_VAR 0 24
67927: PUSH
67928: LD_VAR 0 25
67932: PUSH
67933: LD_VAR 0 26
67937: PUSH
67938: LD_VAR 0 27
67942: PUSH
67943: LD_VAR 0 28
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: PUSH
67956: LD_VAR 0 4
67960: PUSH
67961: LD_INT 1
67963: PLUS
67964: ARRAY
67965: ST_TO_ADDR
67966: GO 67969
67968: POP
67969: GO 68524
67971: LD_INT 2
67973: DOUBLE
67974: EQUAL
67975: IFTRUE 67985
67977: LD_INT 3
67979: DOUBLE
67980: EQUAL
67981: IFTRUE 67985
67983: GO 68041
67985: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67986: LD_ADDR_VAR 0 9
67990: PUSH
67991: LD_VAR 0 29
67995: PUSH
67996: LD_VAR 0 30
68000: PUSH
68001: LD_VAR 0 31
68005: PUSH
68006: LD_VAR 0 32
68010: PUSH
68011: LD_VAR 0 33
68015: PUSH
68016: LD_VAR 0 34
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: PUSH
68029: LD_VAR 0 4
68033: PUSH
68034: LD_INT 1
68036: PLUS
68037: ARRAY
68038: ST_TO_ADDR
68039: GO 68524
68041: LD_INT 16
68043: DOUBLE
68044: EQUAL
68045: IFTRUE 68103
68047: LD_INT 17
68049: DOUBLE
68050: EQUAL
68051: IFTRUE 68103
68053: LD_INT 18
68055: DOUBLE
68056: EQUAL
68057: IFTRUE 68103
68059: LD_INT 19
68061: DOUBLE
68062: EQUAL
68063: IFTRUE 68103
68065: LD_INT 22
68067: DOUBLE
68068: EQUAL
68069: IFTRUE 68103
68071: LD_INT 20
68073: DOUBLE
68074: EQUAL
68075: IFTRUE 68103
68077: LD_INT 21
68079: DOUBLE
68080: EQUAL
68081: IFTRUE 68103
68083: LD_INT 23
68085: DOUBLE
68086: EQUAL
68087: IFTRUE 68103
68089: LD_INT 24
68091: DOUBLE
68092: EQUAL
68093: IFTRUE 68103
68095: LD_INT 25
68097: DOUBLE
68098: EQUAL
68099: IFTRUE 68103
68101: GO 68159
68103: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68104: LD_ADDR_VAR 0 9
68108: PUSH
68109: LD_VAR 0 35
68113: PUSH
68114: LD_VAR 0 36
68118: PUSH
68119: LD_VAR 0 37
68123: PUSH
68124: LD_VAR 0 38
68128: PUSH
68129: LD_VAR 0 39
68133: PUSH
68134: LD_VAR 0 40
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: PUSH
68147: LD_VAR 0 4
68151: PUSH
68152: LD_INT 1
68154: PLUS
68155: ARRAY
68156: ST_TO_ADDR
68157: GO 68524
68159: LD_INT 6
68161: DOUBLE
68162: EQUAL
68163: IFTRUE 68215
68165: LD_INT 7
68167: DOUBLE
68168: EQUAL
68169: IFTRUE 68215
68171: LD_INT 8
68173: DOUBLE
68174: EQUAL
68175: IFTRUE 68215
68177: LD_INT 13
68179: DOUBLE
68180: EQUAL
68181: IFTRUE 68215
68183: LD_INT 12
68185: DOUBLE
68186: EQUAL
68187: IFTRUE 68215
68189: LD_INT 15
68191: DOUBLE
68192: EQUAL
68193: IFTRUE 68215
68195: LD_INT 11
68197: DOUBLE
68198: EQUAL
68199: IFTRUE 68215
68201: LD_INT 14
68203: DOUBLE
68204: EQUAL
68205: IFTRUE 68215
68207: LD_INT 10
68209: DOUBLE
68210: EQUAL
68211: IFTRUE 68215
68213: GO 68271
68215: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68216: LD_ADDR_VAR 0 9
68220: PUSH
68221: LD_VAR 0 41
68225: PUSH
68226: LD_VAR 0 42
68230: PUSH
68231: LD_VAR 0 43
68235: PUSH
68236: LD_VAR 0 44
68240: PUSH
68241: LD_VAR 0 45
68245: PUSH
68246: LD_VAR 0 46
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: PUSH
68259: LD_VAR 0 4
68263: PUSH
68264: LD_INT 1
68266: PLUS
68267: ARRAY
68268: ST_TO_ADDR
68269: GO 68524
68271: LD_INT 36
68273: DOUBLE
68274: EQUAL
68275: IFTRUE 68279
68277: GO 68335
68279: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68280: LD_ADDR_VAR 0 9
68284: PUSH
68285: LD_VAR 0 47
68289: PUSH
68290: LD_VAR 0 48
68294: PUSH
68295: LD_VAR 0 49
68299: PUSH
68300: LD_VAR 0 50
68304: PUSH
68305: LD_VAR 0 51
68309: PUSH
68310: LD_VAR 0 52
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: PUSH
68323: LD_VAR 0 4
68327: PUSH
68328: LD_INT 1
68330: PLUS
68331: ARRAY
68332: ST_TO_ADDR
68333: GO 68524
68335: LD_INT 4
68337: DOUBLE
68338: EQUAL
68339: IFTRUE 68361
68341: LD_INT 5
68343: DOUBLE
68344: EQUAL
68345: IFTRUE 68361
68347: LD_INT 34
68349: DOUBLE
68350: EQUAL
68351: IFTRUE 68361
68353: LD_INT 37
68355: DOUBLE
68356: EQUAL
68357: IFTRUE 68361
68359: GO 68417
68361: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68362: LD_ADDR_VAR 0 9
68366: PUSH
68367: LD_VAR 0 53
68371: PUSH
68372: LD_VAR 0 54
68376: PUSH
68377: LD_VAR 0 55
68381: PUSH
68382: LD_VAR 0 56
68386: PUSH
68387: LD_VAR 0 57
68391: PUSH
68392: LD_VAR 0 58
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: PUSH
68405: LD_VAR 0 4
68409: PUSH
68410: LD_INT 1
68412: PLUS
68413: ARRAY
68414: ST_TO_ADDR
68415: GO 68524
68417: LD_INT 31
68419: DOUBLE
68420: EQUAL
68421: IFTRUE 68467
68423: LD_INT 32
68425: DOUBLE
68426: EQUAL
68427: IFTRUE 68467
68429: LD_INT 33
68431: DOUBLE
68432: EQUAL
68433: IFTRUE 68467
68435: LD_INT 27
68437: DOUBLE
68438: EQUAL
68439: IFTRUE 68467
68441: LD_INT 26
68443: DOUBLE
68444: EQUAL
68445: IFTRUE 68467
68447: LD_INT 28
68449: DOUBLE
68450: EQUAL
68451: IFTRUE 68467
68453: LD_INT 29
68455: DOUBLE
68456: EQUAL
68457: IFTRUE 68467
68459: LD_INT 30
68461: DOUBLE
68462: EQUAL
68463: IFTRUE 68467
68465: GO 68523
68467: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68468: LD_ADDR_VAR 0 9
68472: PUSH
68473: LD_VAR 0 59
68477: PUSH
68478: LD_VAR 0 60
68482: PUSH
68483: LD_VAR 0 61
68487: PUSH
68488: LD_VAR 0 62
68492: PUSH
68493: LD_VAR 0 63
68497: PUSH
68498: LD_VAR 0 64
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: PUSH
68511: LD_VAR 0 4
68515: PUSH
68516: LD_INT 1
68518: PLUS
68519: ARRAY
68520: ST_TO_ADDR
68521: GO 68524
68523: POP
// temp_list2 = [ ] ;
68524: LD_ADDR_VAR 0 10
68528: PUSH
68529: EMPTY
68530: ST_TO_ADDR
// for i in temp_list do
68531: LD_ADDR_VAR 0 8
68535: PUSH
68536: LD_VAR 0 9
68540: PUSH
68541: FOR_IN
68542: IFFALSE 68594
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68544: LD_ADDR_VAR 0 10
68548: PUSH
68549: LD_VAR 0 10
68553: PUSH
68554: LD_VAR 0 8
68558: PUSH
68559: LD_INT 1
68561: ARRAY
68562: PUSH
68563: LD_VAR 0 2
68567: PLUS
68568: PUSH
68569: LD_VAR 0 8
68573: PUSH
68574: LD_INT 2
68576: ARRAY
68577: PUSH
68578: LD_VAR 0 3
68582: PLUS
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: EMPTY
68589: LIST
68590: ADD
68591: ST_TO_ADDR
68592: GO 68541
68594: POP
68595: POP
// result = temp_list2 ;
68596: LD_ADDR_VAR 0 7
68600: PUSH
68601: LD_VAR 0 10
68605: ST_TO_ADDR
// end ;
68606: LD_VAR 0 7
68610: RET
// export function EnemyInRange ( unit , dist ) ; begin
68611: LD_INT 0
68613: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68614: LD_ADDR_VAR 0 3
68618: PUSH
68619: LD_VAR 0 1
68623: PPUSH
68624: CALL_OW 255
68628: PPUSH
68629: LD_VAR 0 1
68633: PPUSH
68634: CALL_OW 250
68638: PPUSH
68639: LD_VAR 0 1
68643: PPUSH
68644: CALL_OW 251
68648: PPUSH
68649: LD_VAR 0 2
68653: PPUSH
68654: CALL 41984 0 4
68658: PUSH
68659: LD_INT 4
68661: ARRAY
68662: ST_TO_ADDR
// end ;
68663: LD_VAR 0 3
68667: RET
// export function PlayerSeeMe ( unit ) ; begin
68668: LD_INT 0
68670: PPUSH
// result := See ( your_side , unit ) ;
68671: LD_ADDR_VAR 0 2
68675: PUSH
68676: LD_OWVAR 2
68680: PPUSH
68681: LD_VAR 0 1
68685: PPUSH
68686: CALL_OW 292
68690: ST_TO_ADDR
// end ;
68691: LD_VAR 0 2
68695: RET
// export function ReverseDir ( unit ) ; begin
68696: LD_INT 0
68698: PPUSH
// if not unit then
68699: LD_VAR 0 1
68703: NOT
68704: IFFALSE 68708
// exit ;
68706: GO 68731
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68708: LD_ADDR_VAR 0 2
68712: PUSH
68713: LD_VAR 0 1
68717: PPUSH
68718: CALL_OW 254
68722: PUSH
68723: LD_INT 3
68725: PLUS
68726: PUSH
68727: LD_INT 6
68729: MOD
68730: ST_TO_ADDR
// end ;
68731: LD_VAR 0 2
68735: RET
// export function ReverseArray ( array ) ; var i ; begin
68736: LD_INT 0
68738: PPUSH
68739: PPUSH
// if not array then
68740: LD_VAR 0 1
68744: NOT
68745: IFFALSE 68749
// exit ;
68747: GO 68804
// result := [ ] ;
68749: LD_ADDR_VAR 0 2
68753: PUSH
68754: EMPTY
68755: ST_TO_ADDR
// for i := array downto 1 do
68756: LD_ADDR_VAR 0 3
68760: PUSH
68761: DOUBLE
68762: LD_VAR 0 1
68766: INC
68767: ST_TO_ADDR
68768: LD_INT 1
68770: PUSH
68771: FOR_DOWNTO
68772: IFFALSE 68802
// result := Join ( result , array [ i ] ) ;
68774: LD_ADDR_VAR 0 2
68778: PUSH
68779: LD_VAR 0 2
68783: PPUSH
68784: LD_VAR 0 1
68788: PUSH
68789: LD_VAR 0 3
68793: ARRAY
68794: PPUSH
68795: CALL 73449 0 2
68799: ST_TO_ADDR
68800: GO 68771
68802: POP
68803: POP
// end ;
68804: LD_VAR 0 2
68808: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68809: LD_INT 0
68811: PPUSH
68812: PPUSH
68813: PPUSH
68814: PPUSH
68815: PPUSH
68816: PPUSH
// if not unit or not hexes then
68817: LD_VAR 0 1
68821: NOT
68822: PUSH
68823: LD_VAR 0 2
68827: NOT
68828: OR
68829: IFFALSE 68833
// exit ;
68831: GO 68956
// dist := 9999 ;
68833: LD_ADDR_VAR 0 5
68837: PUSH
68838: LD_INT 9999
68840: ST_TO_ADDR
// for i = 1 to hexes do
68841: LD_ADDR_VAR 0 4
68845: PUSH
68846: DOUBLE
68847: LD_INT 1
68849: DEC
68850: ST_TO_ADDR
68851: LD_VAR 0 2
68855: PUSH
68856: FOR_TO
68857: IFFALSE 68944
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68859: LD_ADDR_VAR 0 6
68863: PUSH
68864: LD_VAR 0 1
68868: PPUSH
68869: LD_VAR 0 2
68873: PUSH
68874: LD_VAR 0 4
68878: ARRAY
68879: PUSH
68880: LD_INT 1
68882: ARRAY
68883: PPUSH
68884: LD_VAR 0 2
68888: PUSH
68889: LD_VAR 0 4
68893: ARRAY
68894: PUSH
68895: LD_INT 2
68897: ARRAY
68898: PPUSH
68899: CALL_OW 297
68903: ST_TO_ADDR
// if tdist < dist then
68904: LD_VAR 0 6
68908: PUSH
68909: LD_VAR 0 5
68913: LESS
68914: IFFALSE 68942
// begin hex := hexes [ i ] ;
68916: LD_ADDR_VAR 0 8
68920: PUSH
68921: LD_VAR 0 2
68925: PUSH
68926: LD_VAR 0 4
68930: ARRAY
68931: ST_TO_ADDR
// dist := tdist ;
68932: LD_ADDR_VAR 0 5
68936: PUSH
68937: LD_VAR 0 6
68941: ST_TO_ADDR
// end ; end ;
68942: GO 68856
68944: POP
68945: POP
// result := hex ;
68946: LD_ADDR_VAR 0 3
68950: PUSH
68951: LD_VAR 0 8
68955: ST_TO_ADDR
// end ;
68956: LD_VAR 0 3
68960: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68961: LD_INT 0
68963: PPUSH
68964: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68965: LD_VAR 0 1
68969: NOT
68970: PUSH
68971: LD_VAR 0 1
68975: PUSH
68976: LD_INT 21
68978: PUSH
68979: LD_INT 2
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 23
68988: PUSH
68989: LD_INT 2
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PPUSH
69000: CALL_OW 69
69004: IN
69005: NOT
69006: OR
69007: IFFALSE 69011
// exit ;
69009: GO 69058
// for i = 1 to 3 do
69011: LD_ADDR_VAR 0 3
69015: PUSH
69016: DOUBLE
69017: LD_INT 1
69019: DEC
69020: ST_TO_ADDR
69021: LD_INT 3
69023: PUSH
69024: FOR_TO
69025: IFFALSE 69056
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69027: LD_VAR 0 1
69031: PPUSH
69032: CALL_OW 250
69036: PPUSH
69037: LD_VAR 0 1
69041: PPUSH
69042: CALL_OW 251
69046: PPUSH
69047: LD_INT 1
69049: PPUSH
69050: CALL_OW 453
69054: GO 69024
69056: POP
69057: POP
// end ;
69058: LD_VAR 0 2
69062: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69063: LD_INT 0
69065: PPUSH
69066: PPUSH
69067: PPUSH
69068: PPUSH
69069: PPUSH
69070: PPUSH
// if not unit or not enemy_unit then
69071: LD_VAR 0 1
69075: NOT
69076: PUSH
69077: LD_VAR 0 2
69081: NOT
69082: OR
69083: IFFALSE 69087
// exit ;
69085: GO 69554
// if GetLives ( i ) < 250 then
69087: LD_VAR 0 4
69091: PPUSH
69092: CALL_OW 256
69096: PUSH
69097: LD_INT 250
69099: LESS
69100: IFFALSE 69113
// begin ComAutodestruct ( i ) ;
69102: LD_VAR 0 4
69106: PPUSH
69107: CALL 68961 0 1
// exit ;
69111: GO 69554
// end ; x := GetX ( enemy_unit ) ;
69113: LD_ADDR_VAR 0 7
69117: PUSH
69118: LD_VAR 0 2
69122: PPUSH
69123: CALL_OW 250
69127: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69128: LD_ADDR_VAR 0 8
69132: PUSH
69133: LD_VAR 0 2
69137: PPUSH
69138: CALL_OW 251
69142: ST_TO_ADDR
// if not x or not y then
69143: LD_VAR 0 7
69147: NOT
69148: PUSH
69149: LD_VAR 0 8
69153: NOT
69154: OR
69155: IFFALSE 69159
// exit ;
69157: GO 69554
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69159: LD_ADDR_VAR 0 6
69163: PUSH
69164: LD_VAR 0 7
69168: PPUSH
69169: LD_INT 0
69171: PPUSH
69172: LD_INT 4
69174: PPUSH
69175: CALL_OW 272
69179: PUSH
69180: LD_VAR 0 8
69184: PPUSH
69185: LD_INT 0
69187: PPUSH
69188: LD_INT 4
69190: PPUSH
69191: CALL_OW 273
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_VAR 0 7
69204: PPUSH
69205: LD_INT 1
69207: PPUSH
69208: LD_INT 4
69210: PPUSH
69211: CALL_OW 272
69215: PUSH
69216: LD_VAR 0 8
69220: PPUSH
69221: LD_INT 1
69223: PPUSH
69224: LD_INT 4
69226: PPUSH
69227: CALL_OW 273
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_VAR 0 7
69240: PPUSH
69241: LD_INT 2
69243: PPUSH
69244: LD_INT 4
69246: PPUSH
69247: CALL_OW 272
69251: PUSH
69252: LD_VAR 0 8
69256: PPUSH
69257: LD_INT 2
69259: PPUSH
69260: LD_INT 4
69262: PPUSH
69263: CALL_OW 273
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_VAR 0 7
69276: PPUSH
69277: LD_INT 3
69279: PPUSH
69280: LD_INT 4
69282: PPUSH
69283: CALL_OW 272
69287: PUSH
69288: LD_VAR 0 8
69292: PPUSH
69293: LD_INT 3
69295: PPUSH
69296: LD_INT 4
69298: PPUSH
69299: CALL_OW 273
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_VAR 0 7
69312: PPUSH
69313: LD_INT 4
69315: PPUSH
69316: LD_INT 4
69318: PPUSH
69319: CALL_OW 272
69323: PUSH
69324: LD_VAR 0 8
69328: PPUSH
69329: LD_INT 4
69331: PPUSH
69332: LD_INT 4
69334: PPUSH
69335: CALL_OW 273
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_VAR 0 7
69348: PPUSH
69349: LD_INT 5
69351: PPUSH
69352: LD_INT 4
69354: PPUSH
69355: CALL_OW 272
69359: PUSH
69360: LD_VAR 0 8
69364: PPUSH
69365: LD_INT 5
69367: PPUSH
69368: LD_INT 4
69370: PPUSH
69371: CALL_OW 273
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// for i = tmp downto 1 do
69388: LD_ADDR_VAR 0 4
69392: PUSH
69393: DOUBLE
69394: LD_VAR 0 6
69398: INC
69399: ST_TO_ADDR
69400: LD_INT 1
69402: PUSH
69403: FOR_DOWNTO
69404: IFFALSE 69505
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69406: LD_VAR 0 6
69410: PUSH
69411: LD_VAR 0 4
69415: ARRAY
69416: PUSH
69417: LD_INT 1
69419: ARRAY
69420: PPUSH
69421: LD_VAR 0 6
69425: PUSH
69426: LD_VAR 0 4
69430: ARRAY
69431: PUSH
69432: LD_INT 2
69434: ARRAY
69435: PPUSH
69436: CALL_OW 488
69440: NOT
69441: PUSH
69442: LD_VAR 0 6
69446: PUSH
69447: LD_VAR 0 4
69451: ARRAY
69452: PUSH
69453: LD_INT 1
69455: ARRAY
69456: PPUSH
69457: LD_VAR 0 6
69461: PUSH
69462: LD_VAR 0 4
69466: ARRAY
69467: PUSH
69468: LD_INT 2
69470: ARRAY
69471: PPUSH
69472: CALL_OW 428
69476: PUSH
69477: LD_INT 0
69479: NONEQUAL
69480: OR
69481: IFFALSE 69503
// tmp := Delete ( tmp , i ) ;
69483: LD_ADDR_VAR 0 6
69487: PUSH
69488: LD_VAR 0 6
69492: PPUSH
69493: LD_VAR 0 4
69497: PPUSH
69498: CALL_OW 3
69502: ST_TO_ADDR
69503: GO 69403
69505: POP
69506: POP
// j := GetClosestHex ( unit , tmp ) ;
69507: LD_ADDR_VAR 0 5
69511: PUSH
69512: LD_VAR 0 1
69516: PPUSH
69517: LD_VAR 0 6
69521: PPUSH
69522: CALL 68809 0 2
69526: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69527: LD_VAR 0 1
69531: PPUSH
69532: LD_VAR 0 5
69536: PUSH
69537: LD_INT 1
69539: ARRAY
69540: PPUSH
69541: LD_VAR 0 5
69545: PUSH
69546: LD_INT 2
69548: ARRAY
69549: PPUSH
69550: CALL_OW 111
// end ;
69554: LD_VAR 0 3
69558: RET
// export function PrepareApemanSoldier ( ) ; begin
69559: LD_INT 0
69561: PPUSH
// uc_nation := 0 ;
69562: LD_ADDR_OWVAR 21
69566: PUSH
69567: LD_INT 0
69569: ST_TO_ADDR
// hc_sex := sex_male ;
69570: LD_ADDR_OWVAR 27
69574: PUSH
69575: LD_INT 1
69577: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69578: LD_ADDR_OWVAR 28
69582: PUSH
69583: LD_INT 15
69585: ST_TO_ADDR
// hc_gallery :=  ;
69586: LD_ADDR_OWVAR 33
69590: PUSH
69591: LD_STRING 
69593: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69594: LD_ADDR_OWVAR 31
69598: PUSH
69599: LD_INT 0
69601: PPUSH
69602: LD_INT 3
69604: PPUSH
69605: CALL_OW 12
69609: PUSH
69610: LD_INT 0
69612: PPUSH
69613: LD_INT 3
69615: PPUSH
69616: CALL_OW 12
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: ST_TO_ADDR
// end ;
69633: LD_VAR 0 1
69637: RET
// export function PrepareApemanEngineer ( ) ; begin
69638: LD_INT 0
69640: PPUSH
// uc_nation := 0 ;
69641: LD_ADDR_OWVAR 21
69645: PUSH
69646: LD_INT 0
69648: ST_TO_ADDR
// hc_sex := sex_male ;
69649: LD_ADDR_OWVAR 27
69653: PUSH
69654: LD_INT 1
69656: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69657: LD_ADDR_OWVAR 28
69661: PUSH
69662: LD_INT 16
69664: ST_TO_ADDR
// hc_gallery :=  ;
69665: LD_ADDR_OWVAR 33
69669: PUSH
69670: LD_STRING 
69672: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69673: LD_ADDR_OWVAR 31
69677: PUSH
69678: LD_INT 0
69680: PPUSH
69681: LD_INT 3
69683: PPUSH
69684: CALL_OW 12
69688: PUSH
69689: LD_INT 0
69691: PPUSH
69692: LD_INT 3
69694: PPUSH
69695: CALL_OW 12
69699: PUSH
69700: LD_INT 0
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: ST_TO_ADDR
// end ;
69712: LD_VAR 0 1
69716: RET
// export function PrepareApeman ( agressivity ) ; begin
69717: LD_INT 0
69719: PPUSH
// uc_side := 0 ;
69720: LD_ADDR_OWVAR 20
69724: PUSH
69725: LD_INT 0
69727: ST_TO_ADDR
// uc_nation := 0 ;
69728: LD_ADDR_OWVAR 21
69732: PUSH
69733: LD_INT 0
69735: ST_TO_ADDR
// hc_sex := sex_male ;
69736: LD_ADDR_OWVAR 27
69740: PUSH
69741: LD_INT 1
69743: ST_TO_ADDR
// hc_class := class_apeman ;
69744: LD_ADDR_OWVAR 28
69748: PUSH
69749: LD_INT 12
69751: ST_TO_ADDR
// hc_gallery :=  ;
69752: LD_ADDR_OWVAR 33
69756: PUSH
69757: LD_STRING 
69759: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69760: LD_ADDR_OWVAR 35
69764: PUSH
69765: LD_VAR 0 1
69769: NEG
69770: PPUSH
69771: LD_VAR 0 1
69775: PPUSH
69776: CALL_OW 12
69780: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69781: LD_ADDR_OWVAR 31
69785: PUSH
69786: LD_INT 0
69788: PPUSH
69789: LD_INT 3
69791: PPUSH
69792: CALL_OW 12
69796: PUSH
69797: LD_INT 0
69799: PPUSH
69800: LD_INT 3
69802: PPUSH
69803: CALL_OW 12
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: LD_INT 0
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: ST_TO_ADDR
// end ;
69820: LD_VAR 0 2
69824: RET
// export function PrepareTiger ( agressivity ) ; begin
69825: LD_INT 0
69827: PPUSH
// uc_side := 0 ;
69828: LD_ADDR_OWVAR 20
69832: PUSH
69833: LD_INT 0
69835: ST_TO_ADDR
// uc_nation := 0 ;
69836: LD_ADDR_OWVAR 21
69840: PUSH
69841: LD_INT 0
69843: ST_TO_ADDR
// hc_class := class_tiger ;
69844: LD_ADDR_OWVAR 28
69848: PUSH
69849: LD_INT 14
69851: ST_TO_ADDR
// hc_gallery :=  ;
69852: LD_ADDR_OWVAR 33
69856: PUSH
69857: LD_STRING 
69859: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69860: LD_ADDR_OWVAR 35
69864: PUSH
69865: LD_VAR 0 1
69869: NEG
69870: PPUSH
69871: LD_VAR 0 1
69875: PPUSH
69876: CALL_OW 12
69880: ST_TO_ADDR
// end ;
69881: LD_VAR 0 2
69885: RET
// export function PrepareEnchidna ( ) ; begin
69886: LD_INT 0
69888: PPUSH
// uc_side := 0 ;
69889: LD_ADDR_OWVAR 20
69893: PUSH
69894: LD_INT 0
69896: ST_TO_ADDR
// uc_nation := 0 ;
69897: LD_ADDR_OWVAR 21
69901: PUSH
69902: LD_INT 0
69904: ST_TO_ADDR
// hc_class := class_baggie ;
69905: LD_ADDR_OWVAR 28
69909: PUSH
69910: LD_INT 13
69912: ST_TO_ADDR
// hc_gallery :=  ;
69913: LD_ADDR_OWVAR 33
69917: PUSH
69918: LD_STRING 
69920: ST_TO_ADDR
// end ;
69921: LD_VAR 0 1
69925: RET
// export function PrepareFrog ( ) ; begin
69926: LD_INT 0
69928: PPUSH
// uc_side := 0 ;
69929: LD_ADDR_OWVAR 20
69933: PUSH
69934: LD_INT 0
69936: ST_TO_ADDR
// uc_nation := 0 ;
69937: LD_ADDR_OWVAR 21
69941: PUSH
69942: LD_INT 0
69944: ST_TO_ADDR
// hc_class := class_frog ;
69945: LD_ADDR_OWVAR 28
69949: PUSH
69950: LD_INT 19
69952: ST_TO_ADDR
// hc_gallery :=  ;
69953: LD_ADDR_OWVAR 33
69957: PUSH
69958: LD_STRING 
69960: ST_TO_ADDR
// end ;
69961: LD_VAR 0 1
69965: RET
// export function PrepareFish ( ) ; begin
69966: LD_INT 0
69968: PPUSH
// uc_side := 0 ;
69969: LD_ADDR_OWVAR 20
69973: PUSH
69974: LD_INT 0
69976: ST_TO_ADDR
// uc_nation := 0 ;
69977: LD_ADDR_OWVAR 21
69981: PUSH
69982: LD_INT 0
69984: ST_TO_ADDR
// hc_class := class_fish ;
69985: LD_ADDR_OWVAR 28
69989: PUSH
69990: LD_INT 20
69992: ST_TO_ADDR
// hc_gallery :=  ;
69993: LD_ADDR_OWVAR 33
69997: PUSH
69998: LD_STRING 
70000: ST_TO_ADDR
// end ;
70001: LD_VAR 0 1
70005: RET
// export function PrepareBird ( ) ; begin
70006: LD_INT 0
70008: PPUSH
// uc_side := 0 ;
70009: LD_ADDR_OWVAR 20
70013: PUSH
70014: LD_INT 0
70016: ST_TO_ADDR
// uc_nation := 0 ;
70017: LD_ADDR_OWVAR 21
70021: PUSH
70022: LD_INT 0
70024: ST_TO_ADDR
// hc_class := class_phororhacos ;
70025: LD_ADDR_OWVAR 28
70029: PUSH
70030: LD_INT 18
70032: ST_TO_ADDR
// hc_gallery :=  ;
70033: LD_ADDR_OWVAR 33
70037: PUSH
70038: LD_STRING 
70040: ST_TO_ADDR
// end ;
70041: LD_VAR 0 1
70045: RET
// export function PrepareHorse ( ) ; begin
70046: LD_INT 0
70048: PPUSH
// uc_side := 0 ;
70049: LD_ADDR_OWVAR 20
70053: PUSH
70054: LD_INT 0
70056: ST_TO_ADDR
// uc_nation := 0 ;
70057: LD_ADDR_OWVAR 21
70061: PUSH
70062: LD_INT 0
70064: ST_TO_ADDR
// hc_class := class_horse ;
70065: LD_ADDR_OWVAR 28
70069: PUSH
70070: LD_INT 21
70072: ST_TO_ADDR
// hc_gallery :=  ;
70073: LD_ADDR_OWVAR 33
70077: PUSH
70078: LD_STRING 
70080: ST_TO_ADDR
// end ;
70081: LD_VAR 0 1
70085: RET
// export function PrepareMastodont ( ) ; begin
70086: LD_INT 0
70088: PPUSH
// uc_side := 0 ;
70089: LD_ADDR_OWVAR 20
70093: PUSH
70094: LD_INT 0
70096: ST_TO_ADDR
// uc_nation := 0 ;
70097: LD_ADDR_OWVAR 21
70101: PUSH
70102: LD_INT 0
70104: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70105: LD_ADDR_OWVAR 37
70109: PUSH
70110: LD_INT 31
70112: ST_TO_ADDR
// vc_control := control_rider ;
70113: LD_ADDR_OWVAR 38
70117: PUSH
70118: LD_INT 4
70120: ST_TO_ADDR
// end ;
70121: LD_VAR 0 1
70125: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70126: LD_INT 0
70128: PPUSH
70129: PPUSH
70130: PPUSH
// uc_side = 0 ;
70131: LD_ADDR_OWVAR 20
70135: PUSH
70136: LD_INT 0
70138: ST_TO_ADDR
// uc_nation = 0 ;
70139: LD_ADDR_OWVAR 21
70143: PUSH
70144: LD_INT 0
70146: ST_TO_ADDR
// InitHc_All ( ) ;
70147: CALL_OW 584
// InitVc ;
70151: CALL_OW 20
// if mastodonts then
70155: LD_VAR 0 6
70159: IFFALSE 70226
// for i = 1 to mastodonts do
70161: LD_ADDR_VAR 0 11
70165: PUSH
70166: DOUBLE
70167: LD_INT 1
70169: DEC
70170: ST_TO_ADDR
70171: LD_VAR 0 6
70175: PUSH
70176: FOR_TO
70177: IFFALSE 70224
// begin vc_chassis := 31 ;
70179: LD_ADDR_OWVAR 37
70183: PUSH
70184: LD_INT 31
70186: ST_TO_ADDR
// vc_control := control_rider ;
70187: LD_ADDR_OWVAR 38
70191: PUSH
70192: LD_INT 4
70194: ST_TO_ADDR
// animal := CreateVehicle ;
70195: LD_ADDR_VAR 0 12
70199: PUSH
70200: CALL_OW 45
70204: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70205: LD_VAR 0 12
70209: PPUSH
70210: LD_VAR 0 8
70214: PPUSH
70215: LD_INT 0
70217: PPUSH
70218: CALL 72354 0 3
// end ;
70222: GO 70176
70224: POP
70225: POP
// if horses then
70226: LD_VAR 0 5
70230: IFFALSE 70297
// for i = 1 to horses do
70232: LD_ADDR_VAR 0 11
70236: PUSH
70237: DOUBLE
70238: LD_INT 1
70240: DEC
70241: ST_TO_ADDR
70242: LD_VAR 0 5
70246: PUSH
70247: FOR_TO
70248: IFFALSE 70295
// begin hc_class := 21 ;
70250: LD_ADDR_OWVAR 28
70254: PUSH
70255: LD_INT 21
70257: ST_TO_ADDR
// hc_gallery :=  ;
70258: LD_ADDR_OWVAR 33
70262: PUSH
70263: LD_STRING 
70265: ST_TO_ADDR
// animal := CreateHuman ;
70266: LD_ADDR_VAR 0 12
70270: PUSH
70271: CALL_OW 44
70275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70276: LD_VAR 0 12
70280: PPUSH
70281: LD_VAR 0 8
70285: PPUSH
70286: LD_INT 0
70288: PPUSH
70289: CALL 72354 0 3
// end ;
70293: GO 70247
70295: POP
70296: POP
// if birds then
70297: LD_VAR 0 1
70301: IFFALSE 70368
// for i = 1 to birds do
70303: LD_ADDR_VAR 0 11
70307: PUSH
70308: DOUBLE
70309: LD_INT 1
70311: DEC
70312: ST_TO_ADDR
70313: LD_VAR 0 1
70317: PUSH
70318: FOR_TO
70319: IFFALSE 70366
// begin hc_class := 18 ;
70321: LD_ADDR_OWVAR 28
70325: PUSH
70326: LD_INT 18
70328: ST_TO_ADDR
// hc_gallery =  ;
70329: LD_ADDR_OWVAR 33
70333: PUSH
70334: LD_STRING 
70336: ST_TO_ADDR
// animal := CreateHuman ;
70337: LD_ADDR_VAR 0 12
70341: PUSH
70342: CALL_OW 44
70346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70347: LD_VAR 0 12
70351: PPUSH
70352: LD_VAR 0 8
70356: PPUSH
70357: LD_INT 0
70359: PPUSH
70360: CALL 72354 0 3
// end ;
70364: GO 70318
70366: POP
70367: POP
// if tigers then
70368: LD_VAR 0 2
70372: IFFALSE 70456
// for i = 1 to tigers do
70374: LD_ADDR_VAR 0 11
70378: PUSH
70379: DOUBLE
70380: LD_INT 1
70382: DEC
70383: ST_TO_ADDR
70384: LD_VAR 0 2
70388: PUSH
70389: FOR_TO
70390: IFFALSE 70454
// begin hc_class = class_tiger ;
70392: LD_ADDR_OWVAR 28
70396: PUSH
70397: LD_INT 14
70399: ST_TO_ADDR
// hc_gallery =  ;
70400: LD_ADDR_OWVAR 33
70404: PUSH
70405: LD_STRING 
70407: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70408: LD_ADDR_OWVAR 35
70412: PUSH
70413: LD_INT 7
70415: NEG
70416: PPUSH
70417: LD_INT 7
70419: PPUSH
70420: CALL_OW 12
70424: ST_TO_ADDR
// animal := CreateHuman ;
70425: LD_ADDR_VAR 0 12
70429: PUSH
70430: CALL_OW 44
70434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70435: LD_VAR 0 12
70439: PPUSH
70440: LD_VAR 0 8
70444: PPUSH
70445: LD_INT 0
70447: PPUSH
70448: CALL 72354 0 3
// end ;
70452: GO 70389
70454: POP
70455: POP
// if apemans then
70456: LD_VAR 0 3
70460: IFFALSE 70583
// for i = 1 to apemans do
70462: LD_ADDR_VAR 0 11
70466: PUSH
70467: DOUBLE
70468: LD_INT 1
70470: DEC
70471: ST_TO_ADDR
70472: LD_VAR 0 3
70476: PUSH
70477: FOR_TO
70478: IFFALSE 70581
// begin hc_class = class_apeman ;
70480: LD_ADDR_OWVAR 28
70484: PUSH
70485: LD_INT 12
70487: ST_TO_ADDR
// hc_gallery =  ;
70488: LD_ADDR_OWVAR 33
70492: PUSH
70493: LD_STRING 
70495: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70496: LD_ADDR_OWVAR 35
70500: PUSH
70501: LD_INT 2
70503: NEG
70504: PPUSH
70505: LD_INT 2
70507: PPUSH
70508: CALL_OW 12
70512: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70513: LD_ADDR_OWVAR 31
70517: PUSH
70518: LD_INT 1
70520: PPUSH
70521: LD_INT 3
70523: PPUSH
70524: CALL_OW 12
70528: PUSH
70529: LD_INT 1
70531: PPUSH
70532: LD_INT 3
70534: PPUSH
70535: CALL_OW 12
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: LD_INT 0
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: ST_TO_ADDR
// animal := CreateHuman ;
70552: LD_ADDR_VAR 0 12
70556: PUSH
70557: CALL_OW 44
70561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70562: LD_VAR 0 12
70566: PPUSH
70567: LD_VAR 0 8
70571: PPUSH
70572: LD_INT 0
70574: PPUSH
70575: CALL 72354 0 3
// end ;
70579: GO 70477
70581: POP
70582: POP
// if enchidnas then
70583: LD_VAR 0 4
70587: IFFALSE 70654
// for i = 1 to enchidnas do
70589: LD_ADDR_VAR 0 11
70593: PUSH
70594: DOUBLE
70595: LD_INT 1
70597: DEC
70598: ST_TO_ADDR
70599: LD_VAR 0 4
70603: PUSH
70604: FOR_TO
70605: IFFALSE 70652
// begin hc_class = 13 ;
70607: LD_ADDR_OWVAR 28
70611: PUSH
70612: LD_INT 13
70614: ST_TO_ADDR
// hc_gallery =  ;
70615: LD_ADDR_OWVAR 33
70619: PUSH
70620: LD_STRING 
70622: ST_TO_ADDR
// animal := CreateHuman ;
70623: LD_ADDR_VAR 0 12
70627: PUSH
70628: CALL_OW 44
70632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70633: LD_VAR 0 12
70637: PPUSH
70638: LD_VAR 0 8
70642: PPUSH
70643: LD_INT 0
70645: PPUSH
70646: CALL 72354 0 3
// end ;
70650: GO 70604
70652: POP
70653: POP
// if fishes then
70654: LD_VAR 0 7
70658: IFFALSE 70725
// for i = 1 to fishes do
70660: LD_ADDR_VAR 0 11
70664: PUSH
70665: DOUBLE
70666: LD_INT 1
70668: DEC
70669: ST_TO_ADDR
70670: LD_VAR 0 7
70674: PUSH
70675: FOR_TO
70676: IFFALSE 70723
// begin hc_class = 20 ;
70678: LD_ADDR_OWVAR 28
70682: PUSH
70683: LD_INT 20
70685: ST_TO_ADDR
// hc_gallery =  ;
70686: LD_ADDR_OWVAR 33
70690: PUSH
70691: LD_STRING 
70693: ST_TO_ADDR
// animal := CreateHuman ;
70694: LD_ADDR_VAR 0 12
70698: PUSH
70699: CALL_OW 44
70703: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70704: LD_VAR 0 12
70708: PPUSH
70709: LD_VAR 0 9
70713: PPUSH
70714: LD_INT 0
70716: PPUSH
70717: CALL 72354 0 3
// end ;
70721: GO 70675
70723: POP
70724: POP
// end ;
70725: LD_VAR 0 10
70729: RET
// export function WantHeal ( sci , unit ) ; begin
70730: LD_INT 0
70732: PPUSH
// if GetTaskList ( sci ) > 0 then
70733: LD_VAR 0 1
70737: PPUSH
70738: CALL_OW 437
70742: PUSH
70743: LD_INT 0
70745: GREATER
70746: IFFALSE 70816
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70748: LD_VAR 0 1
70752: PPUSH
70753: CALL_OW 437
70757: PUSH
70758: LD_INT 1
70760: ARRAY
70761: PUSH
70762: LD_INT 1
70764: ARRAY
70765: PUSH
70766: LD_STRING l
70768: EQUAL
70769: PUSH
70770: LD_VAR 0 1
70774: PPUSH
70775: CALL_OW 437
70779: PUSH
70780: LD_INT 1
70782: ARRAY
70783: PUSH
70784: LD_INT 4
70786: ARRAY
70787: PUSH
70788: LD_VAR 0 2
70792: EQUAL
70793: AND
70794: IFFALSE 70806
// result := true else
70796: LD_ADDR_VAR 0 3
70800: PUSH
70801: LD_INT 1
70803: ST_TO_ADDR
70804: GO 70814
// result := false ;
70806: LD_ADDR_VAR 0 3
70810: PUSH
70811: LD_INT 0
70813: ST_TO_ADDR
// end else
70814: GO 70824
// result := false ;
70816: LD_ADDR_VAR 0 3
70820: PUSH
70821: LD_INT 0
70823: ST_TO_ADDR
// end ;
70824: LD_VAR 0 3
70828: RET
// export function HealTarget ( sci ) ; begin
70829: LD_INT 0
70831: PPUSH
// if not sci then
70832: LD_VAR 0 1
70836: NOT
70837: IFFALSE 70841
// exit ;
70839: GO 70906
// result := 0 ;
70841: LD_ADDR_VAR 0 2
70845: PUSH
70846: LD_INT 0
70848: ST_TO_ADDR
// if GetTaskList ( sci ) then
70849: LD_VAR 0 1
70853: PPUSH
70854: CALL_OW 437
70858: IFFALSE 70906
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70860: LD_VAR 0 1
70864: PPUSH
70865: CALL_OW 437
70869: PUSH
70870: LD_INT 1
70872: ARRAY
70873: PUSH
70874: LD_INT 1
70876: ARRAY
70877: PUSH
70878: LD_STRING l
70880: EQUAL
70881: IFFALSE 70906
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70883: LD_ADDR_VAR 0 2
70887: PUSH
70888: LD_VAR 0 1
70892: PPUSH
70893: CALL_OW 437
70897: PUSH
70898: LD_INT 1
70900: ARRAY
70901: PUSH
70902: LD_INT 4
70904: ARRAY
70905: ST_TO_ADDR
// end ;
70906: LD_VAR 0 2
70910: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70911: LD_INT 0
70913: PPUSH
70914: PPUSH
70915: PPUSH
70916: PPUSH
// if not base_units then
70917: LD_VAR 0 1
70921: NOT
70922: IFFALSE 70926
// exit ;
70924: GO 71013
// result := false ;
70926: LD_ADDR_VAR 0 2
70930: PUSH
70931: LD_INT 0
70933: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70934: LD_ADDR_VAR 0 5
70938: PUSH
70939: LD_VAR 0 1
70943: PPUSH
70944: LD_INT 21
70946: PUSH
70947: LD_INT 3
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PPUSH
70954: CALL_OW 72
70958: ST_TO_ADDR
// if not tmp then
70959: LD_VAR 0 5
70963: NOT
70964: IFFALSE 70968
// exit ;
70966: GO 71013
// for i in tmp do
70968: LD_ADDR_VAR 0 3
70972: PUSH
70973: LD_VAR 0 5
70977: PUSH
70978: FOR_IN
70979: IFFALSE 71011
// begin result := EnemyInRange ( i , 22 ) ;
70981: LD_ADDR_VAR 0 2
70985: PUSH
70986: LD_VAR 0 3
70990: PPUSH
70991: LD_INT 22
70993: PPUSH
70994: CALL 68611 0 2
70998: ST_TO_ADDR
// if result then
70999: LD_VAR 0 2
71003: IFFALSE 71009
// exit ;
71005: POP
71006: POP
71007: GO 71013
// end ;
71009: GO 70978
71011: POP
71012: POP
// end ;
71013: LD_VAR 0 2
71017: RET
// export function FilterByTag ( units , tag ) ; begin
71018: LD_INT 0
71020: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71021: LD_ADDR_VAR 0 3
71025: PUSH
71026: LD_VAR 0 1
71030: PPUSH
71031: LD_INT 120
71033: PUSH
71034: LD_VAR 0 2
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PPUSH
71043: CALL_OW 72
71047: ST_TO_ADDR
// end ;
71048: LD_VAR 0 3
71052: RET
// export function IsDriver ( un ) ; begin
71053: LD_INT 0
71055: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71056: LD_ADDR_VAR 0 2
71060: PUSH
71061: LD_VAR 0 1
71065: PUSH
71066: LD_INT 55
71068: PUSH
71069: EMPTY
71070: LIST
71071: PPUSH
71072: CALL_OW 69
71076: IN
71077: ST_TO_ADDR
// end ;
71078: LD_VAR 0 2
71082: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71083: LD_INT 0
71085: PPUSH
71086: PPUSH
// list := [ ] ;
71087: LD_ADDR_VAR 0 5
71091: PUSH
71092: EMPTY
71093: ST_TO_ADDR
// case d of 0 :
71094: LD_VAR 0 3
71098: PUSH
71099: LD_INT 0
71101: DOUBLE
71102: EQUAL
71103: IFTRUE 71107
71105: GO 71240
71107: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71108: LD_ADDR_VAR 0 5
71112: PUSH
71113: LD_VAR 0 1
71117: PUSH
71118: LD_INT 4
71120: MINUS
71121: PUSH
71122: LD_VAR 0 2
71126: PUSH
71127: LD_INT 4
71129: MINUS
71130: PUSH
71131: LD_INT 2
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: LIST
71138: PUSH
71139: LD_VAR 0 1
71143: PUSH
71144: LD_INT 3
71146: MINUS
71147: PUSH
71148: LD_VAR 0 2
71152: PUSH
71153: LD_INT 1
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: LIST
71160: PUSH
71161: LD_VAR 0 1
71165: PUSH
71166: LD_INT 4
71168: PLUS
71169: PUSH
71170: LD_VAR 0 2
71174: PUSH
71175: LD_INT 4
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: LIST
71182: PUSH
71183: LD_VAR 0 1
71187: PUSH
71188: LD_INT 3
71190: PLUS
71191: PUSH
71192: LD_VAR 0 2
71196: PUSH
71197: LD_INT 3
71199: PLUS
71200: PUSH
71201: LD_INT 5
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: LIST
71208: PUSH
71209: LD_VAR 0 1
71213: PUSH
71214: LD_VAR 0 2
71218: PUSH
71219: LD_INT 4
71221: PLUS
71222: PUSH
71223: LD_INT 0
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: LIST
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: ST_TO_ADDR
// end ; 1 :
71238: GO 71938
71240: LD_INT 1
71242: DOUBLE
71243: EQUAL
71244: IFTRUE 71248
71246: GO 71381
71248: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71249: LD_ADDR_VAR 0 5
71253: PUSH
71254: LD_VAR 0 1
71258: PUSH
71259: LD_VAR 0 2
71263: PUSH
71264: LD_INT 4
71266: MINUS
71267: PUSH
71268: LD_INT 3
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: LIST
71275: PUSH
71276: LD_VAR 0 1
71280: PUSH
71281: LD_INT 3
71283: MINUS
71284: PUSH
71285: LD_VAR 0 2
71289: PUSH
71290: LD_INT 3
71292: MINUS
71293: PUSH
71294: LD_INT 2
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: LIST
71301: PUSH
71302: LD_VAR 0 1
71306: PUSH
71307: LD_INT 4
71309: MINUS
71310: PUSH
71311: LD_VAR 0 2
71315: PUSH
71316: LD_INT 1
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: LIST
71323: PUSH
71324: LD_VAR 0 1
71328: PUSH
71329: LD_VAR 0 2
71333: PUSH
71334: LD_INT 3
71336: PLUS
71337: PUSH
71338: LD_INT 0
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: LIST
71345: PUSH
71346: LD_VAR 0 1
71350: PUSH
71351: LD_INT 4
71353: PLUS
71354: PUSH
71355: LD_VAR 0 2
71359: PUSH
71360: LD_INT 4
71362: PLUS
71363: PUSH
71364: LD_INT 5
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: ST_TO_ADDR
// end ; 2 :
71379: GO 71938
71381: LD_INT 2
71383: DOUBLE
71384: EQUAL
71385: IFTRUE 71389
71387: GO 71518
71389: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71390: LD_ADDR_VAR 0 5
71394: PUSH
71395: LD_VAR 0 1
71399: PUSH
71400: LD_VAR 0 2
71404: PUSH
71405: LD_INT 3
71407: MINUS
71408: PUSH
71409: LD_INT 3
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: LIST
71416: PUSH
71417: LD_VAR 0 1
71421: PUSH
71422: LD_INT 4
71424: PLUS
71425: PUSH
71426: LD_VAR 0 2
71430: PUSH
71431: LD_INT 4
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: LIST
71438: PUSH
71439: LD_VAR 0 1
71443: PUSH
71444: LD_VAR 0 2
71448: PUSH
71449: LD_INT 4
71451: PLUS
71452: PUSH
71453: LD_INT 0
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: LIST
71460: PUSH
71461: LD_VAR 0 1
71465: PUSH
71466: LD_INT 3
71468: MINUS
71469: PUSH
71470: LD_VAR 0 2
71474: PUSH
71475: LD_INT 1
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: LIST
71482: PUSH
71483: LD_VAR 0 1
71487: PUSH
71488: LD_INT 4
71490: MINUS
71491: PUSH
71492: LD_VAR 0 2
71496: PUSH
71497: LD_INT 4
71499: MINUS
71500: PUSH
71501: LD_INT 2
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: LIST
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: ST_TO_ADDR
// end ; 3 :
71516: GO 71938
71518: LD_INT 3
71520: DOUBLE
71521: EQUAL
71522: IFTRUE 71526
71524: GO 71659
71526: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71527: LD_ADDR_VAR 0 5
71531: PUSH
71532: LD_VAR 0 1
71536: PUSH
71537: LD_INT 3
71539: PLUS
71540: PUSH
71541: LD_VAR 0 2
71545: PUSH
71546: LD_INT 4
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: LIST
71553: PUSH
71554: LD_VAR 0 1
71558: PUSH
71559: LD_INT 4
71561: PLUS
71562: PUSH
71563: LD_VAR 0 2
71567: PUSH
71568: LD_INT 4
71570: PLUS
71571: PUSH
71572: LD_INT 5
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: LIST
71579: PUSH
71580: LD_VAR 0 1
71584: PUSH
71585: LD_INT 4
71587: MINUS
71588: PUSH
71589: LD_VAR 0 2
71593: PUSH
71594: LD_INT 1
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: LIST
71601: PUSH
71602: LD_VAR 0 1
71606: PUSH
71607: LD_VAR 0 2
71611: PUSH
71612: LD_INT 4
71614: MINUS
71615: PUSH
71616: LD_INT 3
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: LIST
71623: PUSH
71624: LD_VAR 0 1
71628: PUSH
71629: LD_INT 3
71631: MINUS
71632: PUSH
71633: LD_VAR 0 2
71637: PUSH
71638: LD_INT 3
71640: MINUS
71641: PUSH
71642: LD_INT 2
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: LIST
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: ST_TO_ADDR
// end ; 4 :
71657: GO 71938
71659: LD_INT 4
71661: DOUBLE
71662: EQUAL
71663: IFTRUE 71667
71665: GO 71800
71667: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71668: LD_ADDR_VAR 0 5
71672: PUSH
71673: LD_VAR 0 1
71677: PUSH
71678: LD_VAR 0 2
71682: PUSH
71683: LD_INT 4
71685: PLUS
71686: PUSH
71687: LD_INT 0
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: LIST
71694: PUSH
71695: LD_VAR 0 1
71699: PUSH
71700: LD_INT 3
71702: PLUS
71703: PUSH
71704: LD_VAR 0 2
71708: PUSH
71709: LD_INT 3
71711: PLUS
71712: PUSH
71713: LD_INT 5
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: LIST
71720: PUSH
71721: LD_VAR 0 1
71725: PUSH
71726: LD_INT 4
71728: PLUS
71729: PUSH
71730: LD_VAR 0 2
71734: PUSH
71735: LD_INT 4
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: LIST
71742: PUSH
71743: LD_VAR 0 1
71747: PUSH
71748: LD_VAR 0 2
71752: PUSH
71753: LD_INT 3
71755: MINUS
71756: PUSH
71757: LD_INT 3
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: LIST
71764: PUSH
71765: LD_VAR 0 1
71769: PUSH
71770: LD_INT 4
71772: MINUS
71773: PUSH
71774: LD_VAR 0 2
71778: PUSH
71779: LD_INT 4
71781: MINUS
71782: PUSH
71783: LD_INT 2
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: LIST
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: ST_TO_ADDR
// end ; 5 :
71798: GO 71938
71800: LD_INT 5
71802: DOUBLE
71803: EQUAL
71804: IFTRUE 71808
71806: GO 71937
71808: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71809: LD_ADDR_VAR 0 5
71813: PUSH
71814: LD_VAR 0 1
71818: PUSH
71819: LD_INT 4
71821: MINUS
71822: PUSH
71823: LD_VAR 0 2
71827: PUSH
71828: LD_INT 1
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: LIST
71835: PUSH
71836: LD_VAR 0 1
71840: PUSH
71841: LD_VAR 0 2
71845: PUSH
71846: LD_INT 4
71848: MINUS
71849: PUSH
71850: LD_INT 3
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: LIST
71857: PUSH
71858: LD_VAR 0 1
71862: PUSH
71863: LD_INT 4
71865: PLUS
71866: PUSH
71867: LD_VAR 0 2
71871: PUSH
71872: LD_INT 4
71874: PLUS
71875: PUSH
71876: LD_INT 5
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: LIST
71883: PUSH
71884: LD_VAR 0 1
71888: PUSH
71889: LD_INT 3
71891: PLUS
71892: PUSH
71893: LD_VAR 0 2
71897: PUSH
71898: LD_INT 4
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: LIST
71905: PUSH
71906: LD_VAR 0 1
71910: PUSH
71911: LD_VAR 0 2
71915: PUSH
71916: LD_INT 3
71918: PLUS
71919: PUSH
71920: LD_INT 0
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: LIST
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: ST_TO_ADDR
// end ; end ;
71935: GO 71938
71937: POP
// result := list ;
71938: LD_ADDR_VAR 0 4
71942: PUSH
71943: LD_VAR 0 5
71947: ST_TO_ADDR
// end ;
71948: LD_VAR 0 4
71952: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71953: LD_INT 0
71955: PPUSH
71956: PPUSH
71957: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71958: LD_VAR 0 1
71962: NOT
71963: PUSH
71964: LD_VAR 0 2
71968: PUSH
71969: LD_INT 1
71971: PUSH
71972: LD_INT 2
71974: PUSH
71975: LD_INT 3
71977: PUSH
71978: LD_INT 4
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: IN
71987: NOT
71988: OR
71989: IFFALSE 71993
// exit ;
71991: GO 72076
// tmp := [ ] ;
71993: LD_ADDR_VAR 0 5
71997: PUSH
71998: EMPTY
71999: ST_TO_ADDR
// for i in units do
72000: LD_ADDR_VAR 0 4
72004: PUSH
72005: LD_VAR 0 1
72009: PUSH
72010: FOR_IN
72011: IFFALSE 72045
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72013: LD_ADDR_VAR 0 5
72017: PUSH
72018: LD_VAR 0 5
72022: PPUSH
72023: LD_VAR 0 4
72027: PPUSH
72028: LD_VAR 0 2
72032: PPUSH
72033: CALL_OW 259
72037: PPUSH
72038: CALL 73449 0 2
72042: ST_TO_ADDR
72043: GO 72010
72045: POP
72046: POP
// if not tmp then
72047: LD_VAR 0 5
72051: NOT
72052: IFFALSE 72056
// exit ;
72054: GO 72076
// result := SortListByListDesc ( units , tmp ) ;
72056: LD_ADDR_VAR 0 3
72060: PUSH
72061: LD_VAR 0 1
72065: PPUSH
72066: LD_VAR 0 5
72070: PPUSH
72071: CALL_OW 77
72075: ST_TO_ADDR
// end ;
72076: LD_VAR 0 3
72080: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72081: LD_INT 0
72083: PPUSH
72084: PPUSH
72085: PPUSH
// result := false ;
72086: LD_ADDR_VAR 0 3
72090: PUSH
72091: LD_INT 0
72093: ST_TO_ADDR
// if not building then
72094: LD_VAR 0 2
72098: NOT
72099: IFFALSE 72103
// exit ;
72101: GO 72241
// x := GetX ( building ) ;
72103: LD_ADDR_VAR 0 4
72107: PUSH
72108: LD_VAR 0 2
72112: PPUSH
72113: CALL_OW 250
72117: ST_TO_ADDR
// y := GetY ( building ) ;
72118: LD_ADDR_VAR 0 5
72122: PUSH
72123: LD_VAR 0 2
72127: PPUSH
72128: CALL_OW 251
72132: ST_TO_ADDR
// if not x or not y then
72133: LD_VAR 0 4
72137: NOT
72138: PUSH
72139: LD_VAR 0 5
72143: NOT
72144: OR
72145: IFFALSE 72149
// exit ;
72147: GO 72241
// if GetTaskList ( unit ) then
72149: LD_VAR 0 1
72153: PPUSH
72154: CALL_OW 437
72158: IFFALSE 72241
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72160: LD_STRING e
72162: PUSH
72163: LD_VAR 0 1
72167: PPUSH
72168: CALL_OW 437
72172: PUSH
72173: LD_INT 1
72175: ARRAY
72176: PUSH
72177: LD_INT 1
72179: ARRAY
72180: EQUAL
72181: PUSH
72182: LD_VAR 0 4
72186: PUSH
72187: LD_VAR 0 1
72191: PPUSH
72192: CALL_OW 437
72196: PUSH
72197: LD_INT 1
72199: ARRAY
72200: PUSH
72201: LD_INT 2
72203: ARRAY
72204: EQUAL
72205: AND
72206: PUSH
72207: LD_VAR 0 5
72211: PUSH
72212: LD_VAR 0 1
72216: PPUSH
72217: CALL_OW 437
72221: PUSH
72222: LD_INT 1
72224: ARRAY
72225: PUSH
72226: LD_INT 3
72228: ARRAY
72229: EQUAL
72230: AND
72231: IFFALSE 72241
// result := true end ;
72233: LD_ADDR_VAR 0 3
72237: PUSH
72238: LD_INT 1
72240: ST_TO_ADDR
// end ;
72241: LD_VAR 0 3
72245: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72246: LD_INT 0
72248: PPUSH
// result := false ;
72249: LD_ADDR_VAR 0 4
72253: PUSH
72254: LD_INT 0
72256: ST_TO_ADDR
// if GetTaskList ( unit ) then
72257: LD_VAR 0 1
72261: PPUSH
72262: CALL_OW 437
72266: IFFALSE 72349
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72268: LD_STRING M
72270: PUSH
72271: LD_VAR 0 1
72275: PPUSH
72276: CALL_OW 437
72280: PUSH
72281: LD_INT 1
72283: ARRAY
72284: PUSH
72285: LD_INT 1
72287: ARRAY
72288: EQUAL
72289: PUSH
72290: LD_VAR 0 2
72294: PUSH
72295: LD_VAR 0 1
72299: PPUSH
72300: CALL_OW 437
72304: PUSH
72305: LD_INT 1
72307: ARRAY
72308: PUSH
72309: LD_INT 2
72311: ARRAY
72312: EQUAL
72313: AND
72314: PUSH
72315: LD_VAR 0 3
72319: PUSH
72320: LD_VAR 0 1
72324: PPUSH
72325: CALL_OW 437
72329: PUSH
72330: LD_INT 1
72332: ARRAY
72333: PUSH
72334: LD_INT 3
72336: ARRAY
72337: EQUAL
72338: AND
72339: IFFALSE 72349
// result := true ;
72341: LD_ADDR_VAR 0 4
72345: PUSH
72346: LD_INT 1
72348: ST_TO_ADDR
// end ; end ;
72349: LD_VAR 0 4
72353: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72354: LD_INT 0
72356: PPUSH
72357: PPUSH
72358: PPUSH
72359: PPUSH
// if not unit or not area then
72360: LD_VAR 0 1
72364: NOT
72365: PUSH
72366: LD_VAR 0 2
72370: NOT
72371: OR
72372: IFFALSE 72376
// exit ;
72374: GO 72552
// tmp := AreaToList ( area , i ) ;
72376: LD_ADDR_VAR 0 6
72380: PUSH
72381: LD_VAR 0 2
72385: PPUSH
72386: LD_VAR 0 5
72390: PPUSH
72391: CALL_OW 517
72395: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72396: LD_ADDR_VAR 0 5
72400: PUSH
72401: DOUBLE
72402: LD_INT 1
72404: DEC
72405: ST_TO_ADDR
72406: LD_VAR 0 6
72410: PUSH
72411: LD_INT 1
72413: ARRAY
72414: PUSH
72415: FOR_TO
72416: IFFALSE 72550
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72418: LD_ADDR_VAR 0 7
72422: PUSH
72423: LD_VAR 0 6
72427: PUSH
72428: LD_INT 1
72430: ARRAY
72431: PUSH
72432: LD_VAR 0 5
72436: ARRAY
72437: PUSH
72438: LD_VAR 0 6
72442: PUSH
72443: LD_INT 2
72445: ARRAY
72446: PUSH
72447: LD_VAR 0 5
72451: ARRAY
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
72457: LD_INT 92
72459: PUSH
72460: LD_VAR 0 7
72464: PUSH
72465: LD_INT 1
72467: ARRAY
72468: PUSH
72469: LD_VAR 0 7
72473: PUSH
72474: LD_INT 2
72476: ARRAY
72477: PUSH
72478: LD_INT 2
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: PPUSH
72487: CALL_OW 69
72491: PUSH
72492: LD_INT 0
72494: EQUAL
72495: IFFALSE 72548
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72497: LD_VAR 0 1
72501: PPUSH
72502: LD_VAR 0 7
72506: PUSH
72507: LD_INT 1
72509: ARRAY
72510: PPUSH
72511: LD_VAR 0 7
72515: PUSH
72516: LD_INT 2
72518: ARRAY
72519: PPUSH
72520: LD_VAR 0 3
72524: PPUSH
72525: CALL_OW 48
// result := IsPlaced ( unit ) ;
72529: LD_ADDR_VAR 0 4
72533: PUSH
72534: LD_VAR 0 1
72538: PPUSH
72539: CALL_OW 305
72543: ST_TO_ADDR
// exit ;
72544: POP
72545: POP
72546: GO 72552
// end ; end ;
72548: GO 72415
72550: POP
72551: POP
// end ;
72552: LD_VAR 0 4
72556: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72557: LD_INT 0
72559: PPUSH
72560: PPUSH
72561: PPUSH
// if not side or side > 8 then
72562: LD_VAR 0 1
72566: NOT
72567: PUSH
72568: LD_VAR 0 1
72572: PUSH
72573: LD_INT 8
72575: GREATER
72576: OR
72577: IFFALSE 72581
// exit ;
72579: GO 72768
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72581: LD_ADDR_VAR 0 4
72585: PUSH
72586: LD_INT 22
72588: PUSH
72589: LD_VAR 0 1
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 21
72600: PUSH
72601: LD_INT 3
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PPUSH
72612: CALL_OW 69
72616: ST_TO_ADDR
// if not tmp then
72617: LD_VAR 0 4
72621: NOT
72622: IFFALSE 72626
// exit ;
72624: GO 72768
// enable_addtolog := true ;
72626: LD_ADDR_OWVAR 81
72630: PUSH
72631: LD_INT 1
72633: ST_TO_ADDR
// AddToLog ( [ ) ;
72634: LD_STRING [
72636: PPUSH
72637: CALL_OW 561
// for i in tmp do
72641: LD_ADDR_VAR 0 3
72645: PUSH
72646: LD_VAR 0 4
72650: PUSH
72651: FOR_IN
72652: IFFALSE 72759
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72654: LD_STRING [
72656: PUSH
72657: LD_VAR 0 3
72661: PPUSH
72662: CALL_OW 266
72666: STR
72667: PUSH
72668: LD_STRING , 
72670: STR
72671: PUSH
72672: LD_VAR 0 3
72676: PPUSH
72677: CALL_OW 250
72681: STR
72682: PUSH
72683: LD_STRING , 
72685: STR
72686: PUSH
72687: LD_VAR 0 3
72691: PPUSH
72692: CALL_OW 251
72696: STR
72697: PUSH
72698: LD_STRING , 
72700: STR
72701: PUSH
72702: LD_VAR 0 3
72706: PPUSH
72707: CALL_OW 254
72711: STR
72712: PUSH
72713: LD_STRING , 
72715: STR
72716: PUSH
72717: LD_VAR 0 3
72721: PPUSH
72722: LD_INT 1
72724: PPUSH
72725: CALL_OW 268
72729: STR
72730: PUSH
72731: LD_STRING , 
72733: STR
72734: PUSH
72735: LD_VAR 0 3
72739: PPUSH
72740: LD_INT 2
72742: PPUSH
72743: CALL_OW 268
72747: STR
72748: PUSH
72749: LD_STRING ],
72751: STR
72752: PPUSH
72753: CALL_OW 561
// end ;
72757: GO 72651
72759: POP
72760: POP
// AddToLog ( ]; ) ;
72761: LD_STRING ];
72763: PPUSH
72764: CALL_OW 561
// end ;
72768: LD_VAR 0 2
72772: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72773: LD_INT 0
72775: PPUSH
72776: PPUSH
72777: PPUSH
72778: PPUSH
72779: PPUSH
// if not area or not rate or not max then
72780: LD_VAR 0 1
72784: NOT
72785: PUSH
72786: LD_VAR 0 2
72790: NOT
72791: OR
72792: PUSH
72793: LD_VAR 0 4
72797: NOT
72798: OR
72799: IFFALSE 72803
// exit ;
72801: GO 72992
// while 1 do
72803: LD_INT 1
72805: IFFALSE 72992
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72807: LD_ADDR_VAR 0 9
72811: PUSH
72812: LD_VAR 0 1
72816: PPUSH
72817: LD_INT 1
72819: PPUSH
72820: CALL_OW 287
72824: PUSH
72825: LD_INT 10
72827: MUL
72828: ST_TO_ADDR
// r := rate / 10 ;
72829: LD_ADDR_VAR 0 7
72833: PUSH
72834: LD_VAR 0 2
72838: PUSH
72839: LD_INT 10
72841: DIVREAL
72842: ST_TO_ADDR
// time := 1 1$00 ;
72843: LD_ADDR_VAR 0 8
72847: PUSH
72848: LD_INT 2100
72850: ST_TO_ADDR
// if amount < min then
72851: LD_VAR 0 9
72855: PUSH
72856: LD_VAR 0 3
72860: LESS
72861: IFFALSE 72879
// r := r * 2 else
72863: LD_ADDR_VAR 0 7
72867: PUSH
72868: LD_VAR 0 7
72872: PUSH
72873: LD_INT 2
72875: MUL
72876: ST_TO_ADDR
72877: GO 72905
// if amount > max then
72879: LD_VAR 0 9
72883: PUSH
72884: LD_VAR 0 4
72888: GREATER
72889: IFFALSE 72905
// r := r / 2 ;
72891: LD_ADDR_VAR 0 7
72895: PUSH
72896: LD_VAR 0 7
72900: PUSH
72901: LD_INT 2
72903: DIVREAL
72904: ST_TO_ADDR
// time := time / r ;
72905: LD_ADDR_VAR 0 8
72909: PUSH
72910: LD_VAR 0 8
72914: PUSH
72915: LD_VAR 0 7
72919: DIVREAL
72920: ST_TO_ADDR
// if time < 0 then
72921: LD_VAR 0 8
72925: PUSH
72926: LD_INT 0
72928: LESS
72929: IFFALSE 72946
// time := time * - 1 ;
72931: LD_ADDR_VAR 0 8
72935: PUSH
72936: LD_VAR 0 8
72940: PUSH
72941: LD_INT 1
72943: NEG
72944: MUL
72945: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72946: LD_VAR 0 8
72950: PUSH
72951: LD_INT 35
72953: PPUSH
72954: LD_INT 875
72956: PPUSH
72957: CALL_OW 12
72961: PLUS
72962: PPUSH
72963: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72967: LD_INT 1
72969: PPUSH
72970: LD_INT 5
72972: PPUSH
72973: CALL_OW 12
72977: PPUSH
72978: LD_VAR 0 1
72982: PPUSH
72983: LD_INT 1
72985: PPUSH
72986: CALL_OW 55
// end ;
72990: GO 72803
// end ;
72992: LD_VAR 0 5
72996: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72997: LD_INT 0
72999: PPUSH
73000: PPUSH
73001: PPUSH
73002: PPUSH
73003: PPUSH
73004: PPUSH
73005: PPUSH
73006: PPUSH
// if not turrets or not factories then
73007: LD_VAR 0 1
73011: NOT
73012: PUSH
73013: LD_VAR 0 2
73017: NOT
73018: OR
73019: IFFALSE 73023
// exit ;
73021: GO 73330
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73023: LD_ADDR_VAR 0 10
73027: PUSH
73028: LD_INT 5
73030: PUSH
73031: LD_INT 6
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: LD_INT 4
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 3
73050: PUSH
73051: LD_INT 5
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 24
73065: PUSH
73066: LD_INT 25
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 23
73075: PUSH
73076: LD_INT 27
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: LD_INT 42
73089: PUSH
73090: LD_INT 43
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 44
73099: PUSH
73100: LD_INT 46
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: LD_INT 45
73109: PUSH
73110: LD_INT 47
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: LIST
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: LIST
73126: ST_TO_ADDR
// result := [ ] ;
73127: LD_ADDR_VAR 0 3
73131: PUSH
73132: EMPTY
73133: ST_TO_ADDR
// for i in turrets do
73134: LD_ADDR_VAR 0 4
73138: PUSH
73139: LD_VAR 0 1
73143: PUSH
73144: FOR_IN
73145: IFFALSE 73328
// begin nat := GetNation ( i ) ;
73147: LD_ADDR_VAR 0 7
73151: PUSH
73152: LD_VAR 0 4
73156: PPUSH
73157: CALL_OW 248
73161: ST_TO_ADDR
// weapon := 0 ;
73162: LD_ADDR_VAR 0 8
73166: PUSH
73167: LD_INT 0
73169: ST_TO_ADDR
// if not nat then
73170: LD_VAR 0 7
73174: NOT
73175: IFFALSE 73179
// continue ;
73177: GO 73144
// for j in list [ nat ] do
73179: LD_ADDR_VAR 0 5
73183: PUSH
73184: LD_VAR 0 10
73188: PUSH
73189: LD_VAR 0 7
73193: ARRAY
73194: PUSH
73195: FOR_IN
73196: IFFALSE 73237
// if GetBWeapon ( i ) = j [ 1 ] then
73198: LD_VAR 0 4
73202: PPUSH
73203: CALL_OW 269
73207: PUSH
73208: LD_VAR 0 5
73212: PUSH
73213: LD_INT 1
73215: ARRAY
73216: EQUAL
73217: IFFALSE 73235
// begin weapon := j [ 2 ] ;
73219: LD_ADDR_VAR 0 8
73223: PUSH
73224: LD_VAR 0 5
73228: PUSH
73229: LD_INT 2
73231: ARRAY
73232: ST_TO_ADDR
// break ;
73233: GO 73237
// end ;
73235: GO 73195
73237: POP
73238: POP
// if not weapon then
73239: LD_VAR 0 8
73243: NOT
73244: IFFALSE 73248
// continue ;
73246: GO 73144
// for k in factories do
73248: LD_ADDR_VAR 0 6
73252: PUSH
73253: LD_VAR 0 2
73257: PUSH
73258: FOR_IN
73259: IFFALSE 73324
// begin weapons := AvailableWeaponList ( k ) ;
73261: LD_ADDR_VAR 0 9
73265: PUSH
73266: LD_VAR 0 6
73270: PPUSH
73271: CALL_OW 478
73275: ST_TO_ADDR
// if not weapons then
73276: LD_VAR 0 9
73280: NOT
73281: IFFALSE 73285
// continue ;
73283: GO 73258
// if weapon in weapons then
73285: LD_VAR 0 8
73289: PUSH
73290: LD_VAR 0 9
73294: IN
73295: IFFALSE 73322
// begin result := [ i , weapon ] ;
73297: LD_ADDR_VAR 0 3
73301: PUSH
73302: LD_VAR 0 4
73306: PUSH
73307: LD_VAR 0 8
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: ST_TO_ADDR
// exit ;
73316: POP
73317: POP
73318: POP
73319: POP
73320: GO 73330
// end ; end ;
73322: GO 73258
73324: POP
73325: POP
// end ;
73326: GO 73144
73328: POP
73329: POP
// end ;
73330: LD_VAR 0 3
73334: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73335: LD_INT 0
73337: PPUSH
// if not side or side > 8 then
73338: LD_VAR 0 3
73342: NOT
73343: PUSH
73344: LD_VAR 0 3
73348: PUSH
73349: LD_INT 8
73351: GREATER
73352: OR
73353: IFFALSE 73357
// exit ;
73355: GO 73416
// if not range then
73357: LD_VAR 0 4
73361: NOT
73362: IFFALSE 73373
// range := - 12 ;
73364: LD_ADDR_VAR 0 4
73368: PUSH
73369: LD_INT 12
73371: NEG
73372: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73373: LD_VAR 0 1
73377: PPUSH
73378: LD_VAR 0 2
73382: PPUSH
73383: LD_VAR 0 3
73387: PPUSH
73388: LD_VAR 0 4
73392: PPUSH
73393: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73397: LD_VAR 0 1
73401: PPUSH
73402: LD_VAR 0 2
73406: PPUSH
73407: LD_VAR 0 3
73411: PPUSH
73412: CALL_OW 331
// end ;
73416: LD_VAR 0 5
73420: RET
// export function Video ( mode ) ; begin
73421: LD_INT 0
73423: PPUSH
// ingame_video = mode ;
73424: LD_ADDR_OWVAR 52
73428: PUSH
73429: LD_VAR 0 1
73433: ST_TO_ADDR
// interface_hidden = mode ;
73434: LD_ADDR_OWVAR 54
73438: PUSH
73439: LD_VAR 0 1
73443: ST_TO_ADDR
// end ;
73444: LD_VAR 0 2
73448: RET
// export function Join ( array , element ) ; begin
73449: LD_INT 0
73451: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73452: LD_ADDR_VAR 0 3
73456: PUSH
73457: LD_VAR 0 1
73461: PPUSH
73462: LD_VAR 0 1
73466: PUSH
73467: LD_INT 1
73469: PLUS
73470: PPUSH
73471: LD_VAR 0 2
73475: PPUSH
73476: CALL_OW 1
73480: ST_TO_ADDR
// end ;
73481: LD_VAR 0 3
73485: RET
// export function JoinUnion ( array , element ) ; begin
73486: LD_INT 0
73488: PPUSH
// result := array union element ;
73489: LD_ADDR_VAR 0 3
73493: PUSH
73494: LD_VAR 0 1
73498: PUSH
73499: LD_VAR 0 2
73503: UNION
73504: ST_TO_ADDR
// end ;
73505: LD_VAR 0 3
73509: RET
// export function GetBehemoths ( side ) ; begin
73510: LD_INT 0
73512: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73513: LD_ADDR_VAR 0 2
73517: PUSH
73518: LD_INT 22
73520: PUSH
73521: LD_VAR 0 1
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: PUSH
73530: LD_INT 31
73532: PUSH
73533: LD_INT 25
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PPUSH
73544: CALL_OW 69
73548: ST_TO_ADDR
// end ;
73549: LD_VAR 0 2
73553: RET
// export function Shuffle ( array ) ; var i , index ; begin
73554: LD_INT 0
73556: PPUSH
73557: PPUSH
73558: PPUSH
// result := [ ] ;
73559: LD_ADDR_VAR 0 2
73563: PUSH
73564: EMPTY
73565: ST_TO_ADDR
// if not array then
73566: LD_VAR 0 1
73570: NOT
73571: IFFALSE 73575
// exit ;
73573: GO 73674
// Randomize ;
73575: CALL_OW 10
// for i = array downto 1 do
73579: LD_ADDR_VAR 0 3
73583: PUSH
73584: DOUBLE
73585: LD_VAR 0 1
73589: INC
73590: ST_TO_ADDR
73591: LD_INT 1
73593: PUSH
73594: FOR_DOWNTO
73595: IFFALSE 73672
// begin index := rand ( 1 , array ) ;
73597: LD_ADDR_VAR 0 4
73601: PUSH
73602: LD_INT 1
73604: PPUSH
73605: LD_VAR 0 1
73609: PPUSH
73610: CALL_OW 12
73614: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73615: LD_ADDR_VAR 0 2
73619: PUSH
73620: LD_VAR 0 2
73624: PPUSH
73625: LD_VAR 0 2
73629: PUSH
73630: LD_INT 1
73632: PLUS
73633: PPUSH
73634: LD_VAR 0 1
73638: PUSH
73639: LD_VAR 0 4
73643: ARRAY
73644: PPUSH
73645: CALL_OW 2
73649: ST_TO_ADDR
// array := Delete ( array , index ) ;
73650: LD_ADDR_VAR 0 1
73654: PUSH
73655: LD_VAR 0 1
73659: PPUSH
73660: LD_VAR 0 4
73664: PPUSH
73665: CALL_OW 3
73669: ST_TO_ADDR
// end ;
73670: GO 73594
73672: POP
73673: POP
// end ;
73674: LD_VAR 0 2
73678: RET
// export function GetBaseMaterials ( base ) ; begin
73679: LD_INT 0
73681: PPUSH
// result := [ 0 , 0 , 0 ] ;
73682: LD_ADDR_VAR 0 2
73686: PUSH
73687: LD_INT 0
73689: PUSH
73690: LD_INT 0
73692: PUSH
73693: LD_INT 0
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: LIST
73700: ST_TO_ADDR
// if not base then
73701: LD_VAR 0 1
73705: NOT
73706: IFFALSE 73710
// exit ;
73708: GO 73759
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73710: LD_ADDR_VAR 0 2
73714: PUSH
73715: LD_VAR 0 1
73719: PPUSH
73720: LD_INT 1
73722: PPUSH
73723: CALL_OW 275
73727: PUSH
73728: LD_VAR 0 1
73732: PPUSH
73733: LD_INT 2
73735: PPUSH
73736: CALL_OW 275
73740: PUSH
73741: LD_VAR 0 1
73745: PPUSH
73746: LD_INT 3
73748: PPUSH
73749: CALL_OW 275
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: LIST
73758: ST_TO_ADDR
// end ;
73759: LD_VAR 0 2
73763: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73764: LD_INT 0
73766: PPUSH
73767: PPUSH
// result := array ;
73768: LD_ADDR_VAR 0 3
73772: PUSH
73773: LD_VAR 0 1
73777: ST_TO_ADDR
// if size >= result then
73778: LD_VAR 0 2
73782: PUSH
73783: LD_VAR 0 3
73787: GREATEREQUAL
73788: IFFALSE 73792
// exit ;
73790: GO 73842
// if size then
73792: LD_VAR 0 2
73796: IFFALSE 73842
// for i := array downto size do
73798: LD_ADDR_VAR 0 4
73802: PUSH
73803: DOUBLE
73804: LD_VAR 0 1
73808: INC
73809: ST_TO_ADDR
73810: LD_VAR 0 2
73814: PUSH
73815: FOR_DOWNTO
73816: IFFALSE 73840
// result := Delete ( result , result ) ;
73818: LD_ADDR_VAR 0 3
73822: PUSH
73823: LD_VAR 0 3
73827: PPUSH
73828: LD_VAR 0 3
73832: PPUSH
73833: CALL_OW 3
73837: ST_TO_ADDR
73838: GO 73815
73840: POP
73841: POP
// end ;
73842: LD_VAR 0 3
73846: RET
// export function ComExit ( unit ) ; var tmp ; begin
73847: LD_INT 0
73849: PPUSH
73850: PPUSH
// if not IsInUnit ( unit ) then
73851: LD_VAR 0 1
73855: PPUSH
73856: CALL_OW 310
73860: NOT
73861: IFFALSE 73865
// exit ;
73863: GO 73925
// tmp := IsInUnit ( unit ) ;
73865: LD_ADDR_VAR 0 3
73869: PUSH
73870: LD_VAR 0 1
73874: PPUSH
73875: CALL_OW 310
73879: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73880: LD_VAR 0 3
73884: PPUSH
73885: CALL_OW 247
73889: PUSH
73890: LD_INT 2
73892: EQUAL
73893: IFFALSE 73906
// ComExitVehicle ( unit ) else
73895: LD_VAR 0 1
73899: PPUSH
73900: CALL_OW 121
73904: GO 73915
// ComExitBuilding ( unit ) ;
73906: LD_VAR 0 1
73910: PPUSH
73911: CALL_OW 122
// result := tmp ;
73915: LD_ADDR_VAR 0 2
73919: PUSH
73920: LD_VAR 0 3
73924: ST_TO_ADDR
// end ;
73925: LD_VAR 0 2
73929: RET
// export function ComExitAll ( units ) ; var i ; begin
73930: LD_INT 0
73932: PPUSH
73933: PPUSH
// if not units then
73934: LD_VAR 0 1
73938: NOT
73939: IFFALSE 73943
// exit ;
73941: GO 73969
// for i in units do
73943: LD_ADDR_VAR 0 3
73947: PUSH
73948: LD_VAR 0 1
73952: PUSH
73953: FOR_IN
73954: IFFALSE 73967
// ComExit ( i ) ;
73956: LD_VAR 0 3
73960: PPUSH
73961: CALL 73847 0 1
73965: GO 73953
73967: POP
73968: POP
// end ;
73969: LD_VAR 0 2
73973: RET
// export function ResetHc ; begin
73974: LD_INT 0
73976: PPUSH
// InitHc ;
73977: CALL_OW 19
// hc_importance := 0 ;
73981: LD_ADDR_OWVAR 32
73985: PUSH
73986: LD_INT 0
73988: ST_TO_ADDR
// end ;
73989: LD_VAR 0 1
73993: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73994: LD_INT 0
73996: PPUSH
73997: PPUSH
73998: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73999: LD_ADDR_VAR 0 6
74003: PUSH
74004: LD_VAR 0 1
74008: PUSH
74009: LD_VAR 0 3
74013: PLUS
74014: PUSH
74015: LD_INT 2
74017: DIV
74018: ST_TO_ADDR
// if _x < 0 then
74019: LD_VAR 0 6
74023: PUSH
74024: LD_INT 0
74026: LESS
74027: IFFALSE 74044
// _x := _x * - 1 ;
74029: LD_ADDR_VAR 0 6
74033: PUSH
74034: LD_VAR 0 6
74038: PUSH
74039: LD_INT 1
74041: NEG
74042: MUL
74043: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74044: LD_ADDR_VAR 0 7
74048: PUSH
74049: LD_VAR 0 2
74053: PUSH
74054: LD_VAR 0 4
74058: PLUS
74059: PUSH
74060: LD_INT 2
74062: DIV
74063: ST_TO_ADDR
// if _y < 0 then
74064: LD_VAR 0 7
74068: PUSH
74069: LD_INT 0
74071: LESS
74072: IFFALSE 74089
// _y := _y * - 1 ;
74074: LD_ADDR_VAR 0 7
74078: PUSH
74079: LD_VAR 0 7
74083: PUSH
74084: LD_INT 1
74086: NEG
74087: MUL
74088: ST_TO_ADDR
// result := [ _x , _y ] ;
74089: LD_ADDR_VAR 0 5
74093: PUSH
74094: LD_VAR 0 6
74098: PUSH
74099: LD_VAR 0 7
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: ST_TO_ADDR
// end ;
74108: LD_VAR 0 5
74112: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74113: LD_INT 0
74115: PPUSH
74116: PPUSH
74117: PPUSH
74118: PPUSH
// task := GetTaskList ( unit ) ;
74119: LD_ADDR_VAR 0 7
74123: PUSH
74124: LD_VAR 0 1
74128: PPUSH
74129: CALL_OW 437
74133: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74134: LD_VAR 0 7
74138: NOT
74139: PUSH
74140: LD_VAR 0 1
74144: PPUSH
74145: LD_VAR 0 2
74149: PPUSH
74150: CALL_OW 308
74154: NOT
74155: AND
74156: IFFALSE 74160
// exit ;
74158: GO 74278
// if IsInArea ( unit , area ) then
74160: LD_VAR 0 1
74164: PPUSH
74165: LD_VAR 0 2
74169: PPUSH
74170: CALL_OW 308
74174: IFFALSE 74192
// begin ComMoveToArea ( unit , goAway ) ;
74176: LD_VAR 0 1
74180: PPUSH
74181: LD_VAR 0 3
74185: PPUSH
74186: CALL_OW 113
// exit ;
74190: GO 74278
// end ; if task [ 1 ] [ 1 ] <> M then
74192: LD_VAR 0 7
74196: PUSH
74197: LD_INT 1
74199: ARRAY
74200: PUSH
74201: LD_INT 1
74203: ARRAY
74204: PUSH
74205: LD_STRING M
74207: NONEQUAL
74208: IFFALSE 74212
// exit ;
74210: GO 74278
// x := task [ 1 ] [ 2 ] ;
74212: LD_ADDR_VAR 0 5
74216: PUSH
74217: LD_VAR 0 7
74221: PUSH
74222: LD_INT 1
74224: ARRAY
74225: PUSH
74226: LD_INT 2
74228: ARRAY
74229: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74230: LD_ADDR_VAR 0 6
74234: PUSH
74235: LD_VAR 0 7
74239: PUSH
74240: LD_INT 1
74242: ARRAY
74243: PUSH
74244: LD_INT 3
74246: ARRAY
74247: ST_TO_ADDR
// if InArea ( x , y , area ) then
74248: LD_VAR 0 5
74252: PPUSH
74253: LD_VAR 0 6
74257: PPUSH
74258: LD_VAR 0 2
74262: PPUSH
74263: CALL_OW 309
74267: IFFALSE 74278
// ComStop ( unit ) ;
74269: LD_VAR 0 1
74273: PPUSH
74274: CALL_OW 141
// end ;
74278: LD_VAR 0 4
74282: RET
// export function Abs ( value ) ; begin
74283: LD_INT 0
74285: PPUSH
// result := value ;
74286: LD_ADDR_VAR 0 2
74290: PUSH
74291: LD_VAR 0 1
74295: ST_TO_ADDR
// if value < 0 then
74296: LD_VAR 0 1
74300: PUSH
74301: LD_INT 0
74303: LESS
74304: IFFALSE 74321
// result := value * - 1 ;
74306: LD_ADDR_VAR 0 2
74310: PUSH
74311: LD_VAR 0 1
74315: PUSH
74316: LD_INT 1
74318: NEG
74319: MUL
74320: ST_TO_ADDR
// end ;
74321: LD_VAR 0 2
74325: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74326: LD_INT 0
74328: PPUSH
74329: PPUSH
74330: PPUSH
74331: PPUSH
74332: PPUSH
74333: PPUSH
74334: PPUSH
74335: PPUSH
// if not unit or not building then
74336: LD_VAR 0 1
74340: NOT
74341: PUSH
74342: LD_VAR 0 2
74346: NOT
74347: OR
74348: IFFALSE 74352
// exit ;
74350: GO 74578
// x := GetX ( building ) ;
74352: LD_ADDR_VAR 0 4
74356: PUSH
74357: LD_VAR 0 2
74361: PPUSH
74362: CALL_OW 250
74366: ST_TO_ADDR
// y := GetY ( building ) ;
74367: LD_ADDR_VAR 0 6
74371: PUSH
74372: LD_VAR 0 2
74376: PPUSH
74377: CALL_OW 251
74381: ST_TO_ADDR
// d := GetDir ( building ) ;
74382: LD_ADDR_VAR 0 8
74386: PUSH
74387: LD_VAR 0 2
74391: PPUSH
74392: CALL_OW 254
74396: ST_TO_ADDR
// r := 4 ;
74397: LD_ADDR_VAR 0 9
74401: PUSH
74402: LD_INT 4
74404: ST_TO_ADDR
// for i := 1 to 5 do
74405: LD_ADDR_VAR 0 10
74409: PUSH
74410: DOUBLE
74411: LD_INT 1
74413: DEC
74414: ST_TO_ADDR
74415: LD_INT 5
74417: PUSH
74418: FOR_TO
74419: IFFALSE 74576
// begin _x := ShiftX ( x , d , r + i ) ;
74421: LD_ADDR_VAR 0 5
74425: PUSH
74426: LD_VAR 0 4
74430: PPUSH
74431: LD_VAR 0 8
74435: PPUSH
74436: LD_VAR 0 9
74440: PUSH
74441: LD_VAR 0 10
74445: PLUS
74446: PPUSH
74447: CALL_OW 272
74451: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74452: LD_ADDR_VAR 0 7
74456: PUSH
74457: LD_VAR 0 6
74461: PPUSH
74462: LD_VAR 0 8
74466: PPUSH
74467: LD_VAR 0 9
74471: PUSH
74472: LD_VAR 0 10
74476: PLUS
74477: PPUSH
74478: CALL_OW 273
74482: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74483: LD_VAR 0 5
74487: PPUSH
74488: LD_VAR 0 7
74492: PPUSH
74493: CALL_OW 488
74497: PUSH
74498: LD_VAR 0 5
74502: PPUSH
74503: LD_VAR 0 7
74507: PPUSH
74508: CALL_OW 428
74512: PPUSH
74513: CALL_OW 247
74517: PUSH
74518: LD_INT 3
74520: PUSH
74521: LD_INT 2
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: IN
74528: NOT
74529: AND
74530: IFFALSE 74574
// begin ComMoveXY ( unit , _x , _y ) ;
74532: LD_VAR 0 1
74536: PPUSH
74537: LD_VAR 0 5
74541: PPUSH
74542: LD_VAR 0 7
74546: PPUSH
74547: CALL_OW 111
// result := [ _x , _y ] ;
74551: LD_ADDR_VAR 0 3
74555: PUSH
74556: LD_VAR 0 5
74560: PUSH
74561: LD_VAR 0 7
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: ST_TO_ADDR
// exit ;
74570: POP
74571: POP
74572: GO 74578
// end ; end ;
74574: GO 74418
74576: POP
74577: POP
// end ;
74578: LD_VAR 0 3
74582: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74583: LD_INT 0
74585: PPUSH
74586: PPUSH
74587: PPUSH
// result := 0 ;
74588: LD_ADDR_VAR 0 3
74592: PUSH
74593: LD_INT 0
74595: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74596: LD_VAR 0 1
74600: PUSH
74601: LD_INT 0
74603: LESS
74604: PUSH
74605: LD_VAR 0 1
74609: PUSH
74610: LD_INT 8
74612: GREATER
74613: OR
74614: PUSH
74615: LD_VAR 0 2
74619: PUSH
74620: LD_INT 0
74622: LESS
74623: OR
74624: PUSH
74625: LD_VAR 0 2
74629: PUSH
74630: LD_INT 8
74632: GREATER
74633: OR
74634: IFFALSE 74638
// exit ;
74636: GO 74713
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74638: LD_ADDR_VAR 0 4
74642: PUSH
74643: LD_INT 22
74645: PUSH
74646: LD_VAR 0 2
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PPUSH
74655: CALL_OW 69
74659: PUSH
74660: FOR_IN
74661: IFFALSE 74711
// begin un := UnitShoot ( i ) ;
74663: LD_ADDR_VAR 0 5
74667: PUSH
74668: LD_VAR 0 4
74672: PPUSH
74673: CALL_OW 504
74677: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74678: LD_VAR 0 5
74682: PPUSH
74683: CALL_OW 255
74687: PUSH
74688: LD_VAR 0 1
74692: EQUAL
74693: IFFALSE 74709
// begin result := un ;
74695: LD_ADDR_VAR 0 3
74699: PUSH
74700: LD_VAR 0 5
74704: ST_TO_ADDR
// exit ;
74705: POP
74706: POP
74707: GO 74713
// end ; end ;
74709: GO 74660
74711: POP
74712: POP
// end ;
74713: LD_VAR 0 3
74717: RET
// export function GetCargoBay ( units ) ; begin
74718: LD_INT 0
74720: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74721: LD_ADDR_VAR 0 2
74725: PUSH
74726: LD_VAR 0 1
74730: PPUSH
74731: LD_INT 2
74733: PUSH
74734: LD_INT 34
74736: PUSH
74737: LD_INT 12
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: LD_INT 34
74746: PUSH
74747: LD_INT 51
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: PUSH
74754: LD_INT 34
74756: PUSH
74757: LD_INT 32
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: PUSH
74764: LD_INT 34
74766: PUSH
74767: LD_INT 89
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: PPUSH
74781: CALL_OW 72
74785: ST_TO_ADDR
// end ;
74786: LD_VAR 0 2
74790: RET
// export function Negate ( value ) ; begin
74791: LD_INT 0
74793: PPUSH
// result := not value ;
74794: LD_ADDR_VAR 0 2
74798: PUSH
74799: LD_VAR 0 1
74803: NOT
74804: ST_TO_ADDR
// end ;
74805: LD_VAR 0 2
74809: RET
// export function Inc ( value ) ; begin
74810: LD_INT 0
74812: PPUSH
// result := value + 1 ;
74813: LD_ADDR_VAR 0 2
74817: PUSH
74818: LD_VAR 0 1
74822: PUSH
74823: LD_INT 1
74825: PLUS
74826: ST_TO_ADDR
// end ;
74827: LD_VAR 0 2
74831: RET
// export function Dec ( value ) ; begin
74832: LD_INT 0
74834: PPUSH
// result := value - 1 ;
74835: LD_ADDR_VAR 0 2
74839: PUSH
74840: LD_VAR 0 1
74844: PUSH
74845: LD_INT 1
74847: MINUS
74848: ST_TO_ADDR
// end ;
74849: LD_VAR 0 2
74853: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74854: LD_INT 0
74856: PPUSH
74857: PPUSH
74858: PPUSH
74859: PPUSH
74860: PPUSH
74861: PPUSH
74862: PPUSH
74863: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74864: LD_VAR 0 1
74868: PPUSH
74869: LD_VAR 0 2
74873: PPUSH
74874: CALL_OW 488
74878: NOT
74879: PUSH
74880: LD_VAR 0 3
74884: PPUSH
74885: LD_VAR 0 4
74889: PPUSH
74890: CALL_OW 488
74894: NOT
74895: OR
74896: IFFALSE 74909
// begin result := - 1 ;
74898: LD_ADDR_VAR 0 5
74902: PUSH
74903: LD_INT 1
74905: NEG
74906: ST_TO_ADDR
// exit ;
74907: GO 75144
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74909: LD_ADDR_VAR 0 12
74913: PUSH
74914: LD_VAR 0 1
74918: PPUSH
74919: LD_VAR 0 2
74923: PPUSH
74924: LD_VAR 0 3
74928: PPUSH
74929: LD_VAR 0 4
74933: PPUSH
74934: CALL 73994 0 4
74938: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74939: LD_ADDR_VAR 0 11
74943: PUSH
74944: LD_VAR 0 1
74948: PPUSH
74949: LD_VAR 0 2
74953: PPUSH
74954: LD_VAR 0 12
74958: PUSH
74959: LD_INT 1
74961: ARRAY
74962: PPUSH
74963: LD_VAR 0 12
74967: PUSH
74968: LD_INT 2
74970: ARRAY
74971: PPUSH
74972: CALL_OW 298
74976: ST_TO_ADDR
// distance := 9999 ;
74977: LD_ADDR_VAR 0 10
74981: PUSH
74982: LD_INT 9999
74984: ST_TO_ADDR
// for i := 0 to 5 do
74985: LD_ADDR_VAR 0 6
74989: PUSH
74990: DOUBLE
74991: LD_INT 0
74993: DEC
74994: ST_TO_ADDR
74995: LD_INT 5
74997: PUSH
74998: FOR_TO
74999: IFFALSE 75142
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75001: LD_ADDR_VAR 0 7
75005: PUSH
75006: LD_VAR 0 1
75010: PPUSH
75011: LD_VAR 0 6
75015: PPUSH
75016: LD_VAR 0 11
75020: PPUSH
75021: CALL_OW 272
75025: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75026: LD_ADDR_VAR 0 8
75030: PUSH
75031: LD_VAR 0 2
75035: PPUSH
75036: LD_VAR 0 6
75040: PPUSH
75041: LD_VAR 0 11
75045: PPUSH
75046: CALL_OW 273
75050: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75051: LD_VAR 0 7
75055: PPUSH
75056: LD_VAR 0 8
75060: PPUSH
75061: CALL_OW 488
75065: NOT
75066: IFFALSE 75070
// continue ;
75068: GO 74998
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75070: LD_ADDR_VAR 0 9
75074: PUSH
75075: LD_VAR 0 12
75079: PUSH
75080: LD_INT 1
75082: ARRAY
75083: PPUSH
75084: LD_VAR 0 12
75088: PUSH
75089: LD_INT 2
75091: ARRAY
75092: PPUSH
75093: LD_VAR 0 7
75097: PPUSH
75098: LD_VAR 0 8
75102: PPUSH
75103: CALL_OW 298
75107: ST_TO_ADDR
// if tmp < distance then
75108: LD_VAR 0 9
75112: PUSH
75113: LD_VAR 0 10
75117: LESS
75118: IFFALSE 75140
// begin result := i ;
75120: LD_ADDR_VAR 0 5
75124: PUSH
75125: LD_VAR 0 6
75129: ST_TO_ADDR
// distance := tmp ;
75130: LD_ADDR_VAR 0 10
75134: PUSH
75135: LD_VAR 0 9
75139: ST_TO_ADDR
// end ; end ;
75140: GO 74998
75142: POP
75143: POP
// end ;
75144: LD_VAR 0 5
75148: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75149: LD_INT 0
75151: PPUSH
75152: PPUSH
// if not driver or not IsInUnit ( driver ) then
75153: LD_VAR 0 1
75157: NOT
75158: PUSH
75159: LD_VAR 0 1
75163: PPUSH
75164: CALL_OW 310
75168: NOT
75169: OR
75170: IFFALSE 75174
// exit ;
75172: GO 75264
// vehicle := IsInUnit ( driver ) ;
75174: LD_ADDR_VAR 0 3
75178: PUSH
75179: LD_VAR 0 1
75183: PPUSH
75184: CALL_OW 310
75188: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75189: LD_VAR 0 1
75193: PPUSH
75194: LD_STRING \
75196: PUSH
75197: LD_INT 0
75199: PUSH
75200: LD_INT 0
75202: PUSH
75203: LD_INT 0
75205: PUSH
75206: LD_INT 0
75208: PUSH
75209: LD_INT 0
75211: PUSH
75212: LD_INT 0
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: PUSH
75224: LD_STRING E
75226: PUSH
75227: LD_INT 0
75229: PUSH
75230: LD_INT 0
75232: PUSH
75233: LD_VAR 0 3
75237: PUSH
75238: LD_INT 0
75240: PUSH
75241: LD_INT 0
75243: PUSH
75244: LD_INT 0
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PPUSH
75260: CALL_OW 446
// end ;
75264: LD_VAR 0 2
75268: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75269: LD_INT 0
75271: PPUSH
75272: PPUSH
// if not driver or not IsInUnit ( driver ) then
75273: LD_VAR 0 1
75277: NOT
75278: PUSH
75279: LD_VAR 0 1
75283: PPUSH
75284: CALL_OW 310
75288: NOT
75289: OR
75290: IFFALSE 75294
// exit ;
75292: GO 75384
// vehicle := IsInUnit ( driver ) ;
75294: LD_ADDR_VAR 0 3
75298: PUSH
75299: LD_VAR 0 1
75303: PPUSH
75304: CALL_OW 310
75308: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75309: LD_VAR 0 1
75313: PPUSH
75314: LD_STRING \
75316: PUSH
75317: LD_INT 0
75319: PUSH
75320: LD_INT 0
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: LD_INT 0
75328: PUSH
75329: LD_INT 0
75331: PUSH
75332: LD_INT 0
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: PUSH
75344: LD_STRING E
75346: PUSH
75347: LD_INT 0
75349: PUSH
75350: LD_INT 0
75352: PUSH
75353: LD_VAR 0 3
75357: PUSH
75358: LD_INT 0
75360: PUSH
75361: LD_INT 0
75363: PUSH
75364: LD_INT 0
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PPUSH
75380: CALL_OW 447
// end ;
75384: LD_VAR 0 2
75388: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75389: LD_INT 0
75391: PPUSH
75392: PPUSH
75393: PPUSH
// tmp := [ ] ;
75394: LD_ADDR_VAR 0 5
75398: PUSH
75399: EMPTY
75400: ST_TO_ADDR
// for i in units do
75401: LD_ADDR_VAR 0 4
75405: PUSH
75406: LD_VAR 0 1
75410: PUSH
75411: FOR_IN
75412: IFFALSE 75450
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75414: LD_ADDR_VAR 0 5
75418: PUSH
75419: LD_VAR 0 5
75423: PPUSH
75424: LD_VAR 0 5
75428: PUSH
75429: LD_INT 1
75431: PLUS
75432: PPUSH
75433: LD_VAR 0 4
75437: PPUSH
75438: CALL_OW 256
75442: PPUSH
75443: CALL_OW 2
75447: ST_TO_ADDR
75448: GO 75411
75450: POP
75451: POP
// if not tmp then
75452: LD_VAR 0 5
75456: NOT
75457: IFFALSE 75461
// exit ;
75459: GO 75509
// if asc then
75461: LD_VAR 0 2
75465: IFFALSE 75489
// result := SortListByListAsc ( units , tmp ) else
75467: LD_ADDR_VAR 0 3
75471: PUSH
75472: LD_VAR 0 1
75476: PPUSH
75477: LD_VAR 0 5
75481: PPUSH
75482: CALL_OW 76
75486: ST_TO_ADDR
75487: GO 75509
// result := SortListByListDesc ( units , tmp ) ;
75489: LD_ADDR_VAR 0 3
75493: PUSH
75494: LD_VAR 0 1
75498: PPUSH
75499: LD_VAR 0 5
75503: PPUSH
75504: CALL_OW 77
75508: ST_TO_ADDR
// end ;
75509: LD_VAR 0 3
75513: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75514: LD_INT 0
75516: PPUSH
75517: PPUSH
// task := GetTaskList ( mech ) ;
75518: LD_ADDR_VAR 0 4
75522: PUSH
75523: LD_VAR 0 1
75527: PPUSH
75528: CALL_OW 437
75532: ST_TO_ADDR
// if not task then
75533: LD_VAR 0 4
75537: NOT
75538: IFFALSE 75542
// exit ;
75540: GO 75584
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75542: LD_ADDR_VAR 0 3
75546: PUSH
75547: LD_VAR 0 4
75551: PUSH
75552: LD_INT 1
75554: ARRAY
75555: PUSH
75556: LD_INT 1
75558: ARRAY
75559: PUSH
75560: LD_STRING r
75562: EQUAL
75563: PUSH
75564: LD_VAR 0 4
75568: PUSH
75569: LD_INT 1
75571: ARRAY
75572: PUSH
75573: LD_INT 4
75575: ARRAY
75576: PUSH
75577: LD_VAR 0 2
75581: EQUAL
75582: AND
75583: ST_TO_ADDR
// end ;
75584: LD_VAR 0 3
75588: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75589: LD_INT 0
75591: PPUSH
// SetDir ( unit , d ) ;
75592: LD_VAR 0 1
75596: PPUSH
75597: LD_VAR 0 4
75601: PPUSH
75602: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75606: LD_VAR 0 1
75610: PPUSH
75611: LD_VAR 0 2
75615: PPUSH
75616: LD_VAR 0 3
75620: PPUSH
75621: LD_VAR 0 5
75625: PPUSH
75626: CALL_OW 48
// end ;
75630: LD_VAR 0 6
75634: RET
// export function ToNaturalNumber ( number ) ; begin
75635: LD_INT 0
75637: PPUSH
// result := number div 1 ;
75638: LD_ADDR_VAR 0 2
75642: PUSH
75643: LD_VAR 0 1
75647: PUSH
75648: LD_INT 1
75650: DIV
75651: ST_TO_ADDR
// if number < 0 then
75652: LD_VAR 0 1
75656: PUSH
75657: LD_INT 0
75659: LESS
75660: IFFALSE 75670
// result := 0 ;
75662: LD_ADDR_VAR 0 2
75666: PUSH
75667: LD_INT 0
75669: ST_TO_ADDR
// end ;
75670: LD_VAR 0 2
75674: RET
// export function SortByClass ( units , class ) ; var un ; begin
75675: LD_INT 0
75677: PPUSH
75678: PPUSH
// if not units or not class then
75679: LD_VAR 0 1
75683: NOT
75684: PUSH
75685: LD_VAR 0 2
75689: NOT
75690: OR
75691: IFFALSE 75695
// exit ;
75693: GO 75790
// result := [ ] ;
75695: LD_ADDR_VAR 0 3
75699: PUSH
75700: EMPTY
75701: ST_TO_ADDR
// for un in units do
75702: LD_ADDR_VAR 0 4
75706: PUSH
75707: LD_VAR 0 1
75711: PUSH
75712: FOR_IN
75713: IFFALSE 75788
// if GetClass ( un ) = class then
75715: LD_VAR 0 4
75719: PPUSH
75720: CALL_OW 257
75724: PUSH
75725: LD_VAR 0 2
75729: EQUAL
75730: IFFALSE 75757
// result := Insert ( result , 1 , un ) else
75732: LD_ADDR_VAR 0 3
75736: PUSH
75737: LD_VAR 0 3
75741: PPUSH
75742: LD_INT 1
75744: PPUSH
75745: LD_VAR 0 4
75749: PPUSH
75750: CALL_OW 2
75754: ST_TO_ADDR
75755: GO 75786
// result := Replace ( result , result + 1 , un ) ;
75757: LD_ADDR_VAR 0 3
75761: PUSH
75762: LD_VAR 0 3
75766: PPUSH
75767: LD_VAR 0 3
75771: PUSH
75772: LD_INT 1
75774: PLUS
75775: PPUSH
75776: LD_VAR 0 4
75780: PPUSH
75781: CALL_OW 1
75785: ST_TO_ADDR
75786: GO 75712
75788: POP
75789: POP
// end ;
75790: LD_VAR 0 3
75794: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75795: LD_INT 0
75797: PPUSH
75798: PPUSH
75799: PPUSH
75800: PPUSH
75801: PPUSH
75802: PPUSH
75803: PPUSH
// result := [ ] ;
75804: LD_ADDR_VAR 0 4
75808: PUSH
75809: EMPTY
75810: ST_TO_ADDR
// if x - r < 0 then
75811: LD_VAR 0 1
75815: PUSH
75816: LD_VAR 0 3
75820: MINUS
75821: PUSH
75822: LD_INT 0
75824: LESS
75825: IFFALSE 75837
// min_x := 0 else
75827: LD_ADDR_VAR 0 8
75831: PUSH
75832: LD_INT 0
75834: ST_TO_ADDR
75835: GO 75853
// min_x := x - r ;
75837: LD_ADDR_VAR 0 8
75841: PUSH
75842: LD_VAR 0 1
75846: PUSH
75847: LD_VAR 0 3
75851: MINUS
75852: ST_TO_ADDR
// if y - r < 0 then
75853: LD_VAR 0 2
75857: PUSH
75858: LD_VAR 0 3
75862: MINUS
75863: PUSH
75864: LD_INT 0
75866: LESS
75867: IFFALSE 75879
// min_y := 0 else
75869: LD_ADDR_VAR 0 7
75873: PUSH
75874: LD_INT 0
75876: ST_TO_ADDR
75877: GO 75895
// min_y := y - r ;
75879: LD_ADDR_VAR 0 7
75883: PUSH
75884: LD_VAR 0 2
75888: PUSH
75889: LD_VAR 0 3
75893: MINUS
75894: ST_TO_ADDR
// max_x := x + r ;
75895: LD_ADDR_VAR 0 9
75899: PUSH
75900: LD_VAR 0 1
75904: PUSH
75905: LD_VAR 0 3
75909: PLUS
75910: ST_TO_ADDR
// max_y := y + r ;
75911: LD_ADDR_VAR 0 10
75915: PUSH
75916: LD_VAR 0 2
75920: PUSH
75921: LD_VAR 0 3
75925: PLUS
75926: ST_TO_ADDR
// for _x = min_x to max_x do
75927: LD_ADDR_VAR 0 5
75931: PUSH
75932: DOUBLE
75933: LD_VAR 0 8
75937: DEC
75938: ST_TO_ADDR
75939: LD_VAR 0 9
75943: PUSH
75944: FOR_TO
75945: IFFALSE 76046
// for _y = min_y to max_y do
75947: LD_ADDR_VAR 0 6
75951: PUSH
75952: DOUBLE
75953: LD_VAR 0 7
75957: DEC
75958: ST_TO_ADDR
75959: LD_VAR 0 10
75963: PUSH
75964: FOR_TO
75965: IFFALSE 76042
// begin if not ValidHex ( _x , _y ) then
75967: LD_VAR 0 5
75971: PPUSH
75972: LD_VAR 0 6
75976: PPUSH
75977: CALL_OW 488
75981: NOT
75982: IFFALSE 75986
// continue ;
75984: GO 75964
// if GetResourceTypeXY ( _x , _y ) then
75986: LD_VAR 0 5
75990: PPUSH
75991: LD_VAR 0 6
75995: PPUSH
75996: CALL_OW 283
76000: IFFALSE 76040
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76002: LD_ADDR_VAR 0 4
76006: PUSH
76007: LD_VAR 0 4
76011: PPUSH
76012: LD_VAR 0 4
76016: PUSH
76017: LD_INT 1
76019: PLUS
76020: PPUSH
76021: LD_VAR 0 5
76025: PUSH
76026: LD_VAR 0 6
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: PPUSH
76035: CALL_OW 1
76039: ST_TO_ADDR
// end ;
76040: GO 75964
76042: POP
76043: POP
76044: GO 75944
76046: POP
76047: POP
// end ;
76048: LD_VAR 0 4
76052: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76053: LD_INT 0
76055: PPUSH
76056: PPUSH
76057: PPUSH
76058: PPUSH
76059: PPUSH
76060: PPUSH
76061: PPUSH
76062: PPUSH
// if not units then
76063: LD_VAR 0 1
76067: NOT
76068: IFFALSE 76072
// exit ;
76070: GO 76596
// result := UnitFilter ( units , [ f_ok ] ) ;
76072: LD_ADDR_VAR 0 3
76076: PUSH
76077: LD_VAR 0 1
76081: PPUSH
76082: LD_INT 50
76084: PUSH
76085: EMPTY
76086: LIST
76087: PPUSH
76088: CALL_OW 72
76092: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76093: LD_ADDR_VAR 0 8
76097: PUSH
76098: LD_VAR 0 1
76102: PUSH
76103: LD_INT 1
76105: ARRAY
76106: PPUSH
76107: CALL_OW 255
76111: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76112: LD_ADDR_VAR 0 10
76116: PUSH
76117: LD_INT 29
76119: PUSH
76120: LD_INT 91
76122: PUSH
76123: LD_INT 49
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: LIST
76130: ST_TO_ADDR
// if not result then
76131: LD_VAR 0 3
76135: NOT
76136: IFFALSE 76140
// exit ;
76138: GO 76596
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76140: LD_ADDR_VAR 0 5
76144: PUSH
76145: LD_INT 81
76147: PUSH
76148: LD_VAR 0 8
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PPUSH
76157: CALL_OW 69
76161: ST_TO_ADDR
// for i in result do
76162: LD_ADDR_VAR 0 4
76166: PUSH
76167: LD_VAR 0 3
76171: PUSH
76172: FOR_IN
76173: IFFALSE 76594
// begin tag := GetTag ( i ) + 1 ;
76175: LD_ADDR_VAR 0 9
76179: PUSH
76180: LD_VAR 0 4
76184: PPUSH
76185: CALL_OW 110
76189: PUSH
76190: LD_INT 1
76192: PLUS
76193: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76194: LD_ADDR_VAR 0 7
76198: PUSH
76199: LD_VAR 0 4
76203: PPUSH
76204: CALL_OW 250
76208: PPUSH
76209: LD_VAR 0 4
76213: PPUSH
76214: CALL_OW 251
76218: PPUSH
76219: LD_INT 6
76221: PPUSH
76222: CALL 75795 0 3
76226: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76227: LD_VAR 0 4
76231: PPUSH
76232: CALL_OW 247
76236: PUSH
76237: LD_INT 2
76239: EQUAL
76240: PUSH
76241: LD_VAR 0 7
76245: AND
76246: PUSH
76247: LD_VAR 0 4
76251: PPUSH
76252: CALL_OW 264
76256: PUSH
76257: LD_VAR 0 10
76261: IN
76262: NOT
76263: AND
76264: IFFALSE 76303
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76266: LD_VAR 0 4
76270: PPUSH
76271: LD_VAR 0 7
76275: PUSH
76276: LD_INT 1
76278: ARRAY
76279: PUSH
76280: LD_INT 1
76282: ARRAY
76283: PPUSH
76284: LD_VAR 0 7
76288: PUSH
76289: LD_INT 1
76291: ARRAY
76292: PUSH
76293: LD_INT 2
76295: ARRAY
76296: PPUSH
76297: CALL_OW 116
76301: GO 76592
// if path > tag then
76303: LD_VAR 0 2
76307: PUSH
76308: LD_VAR 0 9
76312: GREATER
76313: IFFALSE 76521
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76315: LD_ADDR_VAR 0 6
76319: PUSH
76320: LD_VAR 0 5
76324: PPUSH
76325: LD_INT 91
76327: PUSH
76328: LD_VAR 0 4
76332: PUSH
76333: LD_INT 8
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: LIST
76340: PPUSH
76341: CALL_OW 72
76345: ST_TO_ADDR
// if nearEnemy then
76346: LD_VAR 0 6
76350: IFFALSE 76419
// begin if GetWeapon ( i ) = ru_time_lapser then
76352: LD_VAR 0 4
76356: PPUSH
76357: CALL_OW 264
76361: PUSH
76362: LD_INT 49
76364: EQUAL
76365: IFFALSE 76393
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76367: LD_VAR 0 4
76371: PPUSH
76372: LD_VAR 0 6
76376: PPUSH
76377: LD_VAR 0 4
76381: PPUSH
76382: CALL_OW 74
76386: PPUSH
76387: CALL_OW 112
76391: GO 76417
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76393: LD_VAR 0 4
76397: PPUSH
76398: LD_VAR 0 6
76402: PPUSH
76403: LD_VAR 0 4
76407: PPUSH
76408: CALL_OW 74
76412: PPUSH
76413: CALL 77521 0 2
// end else
76417: GO 76519
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76419: LD_VAR 0 4
76423: PPUSH
76424: LD_VAR 0 2
76428: PUSH
76429: LD_VAR 0 9
76433: ARRAY
76434: PUSH
76435: LD_INT 1
76437: ARRAY
76438: PPUSH
76439: LD_VAR 0 2
76443: PUSH
76444: LD_VAR 0 9
76448: ARRAY
76449: PUSH
76450: LD_INT 2
76452: ARRAY
76453: PPUSH
76454: CALL_OW 297
76458: PUSH
76459: LD_INT 6
76461: GREATER
76462: IFFALSE 76505
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76464: LD_VAR 0 4
76468: PPUSH
76469: LD_VAR 0 2
76473: PUSH
76474: LD_VAR 0 9
76478: ARRAY
76479: PUSH
76480: LD_INT 1
76482: ARRAY
76483: PPUSH
76484: LD_VAR 0 2
76488: PUSH
76489: LD_VAR 0 9
76493: ARRAY
76494: PUSH
76495: LD_INT 2
76497: ARRAY
76498: PPUSH
76499: CALL_OW 114
76503: GO 76519
// SetTag ( i , tag ) ;
76505: LD_VAR 0 4
76509: PPUSH
76510: LD_VAR 0 9
76514: PPUSH
76515: CALL_OW 109
// end else
76519: GO 76592
// if enemy then
76521: LD_VAR 0 5
76525: IFFALSE 76592
// begin if GetWeapon ( i ) = ru_time_lapser then
76527: LD_VAR 0 4
76531: PPUSH
76532: CALL_OW 264
76536: PUSH
76537: LD_INT 49
76539: EQUAL
76540: IFFALSE 76568
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76542: LD_VAR 0 4
76546: PPUSH
76547: LD_VAR 0 5
76551: PPUSH
76552: LD_VAR 0 4
76556: PPUSH
76557: CALL_OW 74
76561: PPUSH
76562: CALL_OW 112
76566: GO 76592
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76568: LD_VAR 0 4
76572: PPUSH
76573: LD_VAR 0 5
76577: PPUSH
76578: LD_VAR 0 4
76582: PPUSH
76583: CALL_OW 74
76587: PPUSH
76588: CALL 77521 0 2
// end ; end ;
76592: GO 76172
76594: POP
76595: POP
// end ;
76596: LD_VAR 0 3
76600: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76601: LD_INT 0
76603: PPUSH
76604: PPUSH
76605: PPUSH
// if not unit or IsInUnit ( unit ) then
76606: LD_VAR 0 1
76610: NOT
76611: PUSH
76612: LD_VAR 0 1
76616: PPUSH
76617: CALL_OW 310
76621: OR
76622: IFFALSE 76626
// exit ;
76624: GO 76717
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76626: LD_ADDR_VAR 0 4
76630: PUSH
76631: LD_VAR 0 1
76635: PPUSH
76636: CALL_OW 250
76640: PPUSH
76641: LD_VAR 0 2
76645: PPUSH
76646: LD_INT 1
76648: PPUSH
76649: CALL_OW 272
76653: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76654: LD_ADDR_VAR 0 5
76658: PUSH
76659: LD_VAR 0 1
76663: PPUSH
76664: CALL_OW 251
76668: PPUSH
76669: LD_VAR 0 2
76673: PPUSH
76674: LD_INT 1
76676: PPUSH
76677: CALL_OW 273
76681: ST_TO_ADDR
// if ValidHex ( x , y ) then
76682: LD_VAR 0 4
76686: PPUSH
76687: LD_VAR 0 5
76691: PPUSH
76692: CALL_OW 488
76696: IFFALSE 76717
// ComTurnXY ( unit , x , y ) ;
76698: LD_VAR 0 1
76702: PPUSH
76703: LD_VAR 0 4
76707: PPUSH
76708: LD_VAR 0 5
76712: PPUSH
76713: CALL_OW 118
// end ;
76717: LD_VAR 0 3
76721: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76722: LD_INT 0
76724: PPUSH
76725: PPUSH
// result := false ;
76726: LD_ADDR_VAR 0 3
76730: PUSH
76731: LD_INT 0
76733: ST_TO_ADDR
// if not units then
76734: LD_VAR 0 2
76738: NOT
76739: IFFALSE 76743
// exit ;
76741: GO 76788
// for i in units do
76743: LD_ADDR_VAR 0 4
76747: PUSH
76748: LD_VAR 0 2
76752: PUSH
76753: FOR_IN
76754: IFFALSE 76786
// if See ( side , i ) then
76756: LD_VAR 0 1
76760: PPUSH
76761: LD_VAR 0 4
76765: PPUSH
76766: CALL_OW 292
76770: IFFALSE 76784
// begin result := true ;
76772: LD_ADDR_VAR 0 3
76776: PUSH
76777: LD_INT 1
76779: ST_TO_ADDR
// exit ;
76780: POP
76781: POP
76782: GO 76788
// end ;
76784: GO 76753
76786: POP
76787: POP
// end ;
76788: LD_VAR 0 3
76792: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76793: LD_INT 0
76795: PPUSH
76796: PPUSH
76797: PPUSH
76798: PPUSH
// if not unit or not points then
76799: LD_VAR 0 1
76803: NOT
76804: PUSH
76805: LD_VAR 0 2
76809: NOT
76810: OR
76811: IFFALSE 76815
// exit ;
76813: GO 76905
// dist := 99999 ;
76815: LD_ADDR_VAR 0 5
76819: PUSH
76820: LD_INT 99999
76822: ST_TO_ADDR
// for i in points do
76823: LD_ADDR_VAR 0 4
76827: PUSH
76828: LD_VAR 0 2
76832: PUSH
76833: FOR_IN
76834: IFFALSE 76903
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76836: LD_ADDR_VAR 0 6
76840: PUSH
76841: LD_VAR 0 1
76845: PPUSH
76846: LD_VAR 0 4
76850: PUSH
76851: LD_INT 1
76853: ARRAY
76854: PPUSH
76855: LD_VAR 0 4
76859: PUSH
76860: LD_INT 2
76862: ARRAY
76863: PPUSH
76864: CALL_OW 297
76868: ST_TO_ADDR
// if tmpDist < dist then
76869: LD_VAR 0 6
76873: PUSH
76874: LD_VAR 0 5
76878: LESS
76879: IFFALSE 76901
// begin result := i ;
76881: LD_ADDR_VAR 0 3
76885: PUSH
76886: LD_VAR 0 4
76890: ST_TO_ADDR
// dist := tmpDist ;
76891: LD_ADDR_VAR 0 5
76895: PUSH
76896: LD_VAR 0 6
76900: ST_TO_ADDR
// end ; end ;
76901: GO 76833
76903: POP
76904: POP
// end ;
76905: LD_VAR 0 3
76909: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76910: LD_INT 0
76912: PPUSH
// uc_side := side ;
76913: LD_ADDR_OWVAR 20
76917: PUSH
76918: LD_VAR 0 1
76922: ST_TO_ADDR
// uc_nation := 3 ;
76923: LD_ADDR_OWVAR 21
76927: PUSH
76928: LD_INT 3
76930: ST_TO_ADDR
// vc_chassis := 25 ;
76931: LD_ADDR_OWVAR 37
76935: PUSH
76936: LD_INT 25
76938: ST_TO_ADDR
// vc_engine := engine_siberite ;
76939: LD_ADDR_OWVAR 39
76943: PUSH
76944: LD_INT 3
76946: ST_TO_ADDR
// vc_control := control_computer ;
76947: LD_ADDR_OWVAR 38
76951: PUSH
76952: LD_INT 3
76954: ST_TO_ADDR
// vc_weapon := 59 ;
76955: LD_ADDR_OWVAR 40
76959: PUSH
76960: LD_INT 59
76962: ST_TO_ADDR
// result := CreateVehicle ;
76963: LD_ADDR_VAR 0 5
76967: PUSH
76968: CALL_OW 45
76972: ST_TO_ADDR
// SetDir ( result , d ) ;
76973: LD_VAR 0 5
76977: PPUSH
76978: LD_VAR 0 4
76982: PPUSH
76983: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76987: LD_VAR 0 5
76991: PPUSH
76992: LD_VAR 0 2
76996: PPUSH
76997: LD_VAR 0 3
77001: PPUSH
77002: LD_INT 0
77004: PPUSH
77005: CALL_OW 48
// end ;
77009: LD_VAR 0 5
77013: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77014: LD_INT 0
77016: PPUSH
77017: PPUSH
77018: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77019: LD_ADDR_VAR 0 2
77023: PUSH
77024: LD_INT 0
77026: PUSH
77027: LD_INT 0
77029: PUSH
77030: LD_INT 0
77032: PUSH
77033: LD_INT 0
77035: PUSH
77036: EMPTY
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77042: LD_VAR 0 1
77046: NOT
77047: PUSH
77048: LD_VAR 0 1
77052: PPUSH
77053: CALL_OW 264
77057: PUSH
77058: LD_INT 12
77060: PUSH
77061: LD_INT 51
77063: PUSH
77064: LD_INT 32
77066: PUSH
77067: LD_INT 89
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: IN
77076: NOT
77077: OR
77078: IFFALSE 77082
// exit ;
77080: GO 77180
// for i := 1 to 3 do
77082: LD_ADDR_VAR 0 3
77086: PUSH
77087: DOUBLE
77088: LD_INT 1
77090: DEC
77091: ST_TO_ADDR
77092: LD_INT 3
77094: PUSH
77095: FOR_TO
77096: IFFALSE 77178
// begin tmp := GetCargo ( cargo , i ) ;
77098: LD_ADDR_VAR 0 4
77102: PUSH
77103: LD_VAR 0 1
77107: PPUSH
77108: LD_VAR 0 3
77112: PPUSH
77113: CALL_OW 289
77117: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77118: LD_ADDR_VAR 0 2
77122: PUSH
77123: LD_VAR 0 2
77127: PPUSH
77128: LD_VAR 0 3
77132: PPUSH
77133: LD_VAR 0 4
77137: PPUSH
77138: CALL_OW 1
77142: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77143: LD_ADDR_VAR 0 2
77147: PUSH
77148: LD_VAR 0 2
77152: PPUSH
77153: LD_INT 4
77155: PPUSH
77156: LD_VAR 0 2
77160: PUSH
77161: LD_INT 4
77163: ARRAY
77164: PUSH
77165: LD_VAR 0 4
77169: PLUS
77170: PPUSH
77171: CALL_OW 1
77175: ST_TO_ADDR
// end ;
77176: GO 77095
77178: POP
77179: POP
// end ;
77180: LD_VAR 0 2
77184: RET
// export function Length ( array ) ; begin
77185: LD_INT 0
77187: PPUSH
// result := array + 0 ;
77188: LD_ADDR_VAR 0 2
77192: PUSH
77193: LD_VAR 0 1
77197: PUSH
77198: LD_INT 0
77200: PLUS
77201: ST_TO_ADDR
// end ;
77202: LD_VAR 0 2
77206: RET
// export function PrepareArray ( array ) ; begin
77207: LD_INT 0
77209: PPUSH
// result := array diff 0 ;
77210: LD_ADDR_VAR 0 2
77214: PUSH
77215: LD_VAR 0 1
77219: PUSH
77220: LD_INT 0
77222: DIFF
77223: ST_TO_ADDR
// if not result [ 1 ] then
77224: LD_VAR 0 2
77228: PUSH
77229: LD_INT 1
77231: ARRAY
77232: NOT
77233: IFFALSE 77253
// result := Delete ( result , 1 ) ;
77235: LD_ADDR_VAR 0 2
77239: PUSH
77240: LD_VAR 0 2
77244: PPUSH
77245: LD_INT 1
77247: PPUSH
77248: CALL_OW 3
77252: ST_TO_ADDR
// end ;
77253: LD_VAR 0 2
77257: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77258: LD_INT 0
77260: PPUSH
77261: PPUSH
77262: PPUSH
77263: PPUSH
// sibRocketRange := 25 ;
77264: LD_ADDR_VAR 0 6
77268: PUSH
77269: LD_INT 25
77271: ST_TO_ADDR
// result := false ;
77272: LD_ADDR_VAR 0 4
77276: PUSH
77277: LD_INT 0
77279: ST_TO_ADDR
// for i := 0 to 5 do
77280: LD_ADDR_VAR 0 5
77284: PUSH
77285: DOUBLE
77286: LD_INT 0
77288: DEC
77289: ST_TO_ADDR
77290: LD_INT 5
77292: PUSH
77293: FOR_TO
77294: IFFALSE 77361
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77296: LD_VAR 0 1
77300: PPUSH
77301: LD_VAR 0 5
77305: PPUSH
77306: LD_VAR 0 6
77310: PPUSH
77311: CALL_OW 272
77315: PPUSH
77316: LD_VAR 0 2
77320: PPUSH
77321: LD_VAR 0 5
77325: PPUSH
77326: LD_VAR 0 6
77330: PPUSH
77331: CALL_OW 273
77335: PPUSH
77336: LD_VAR 0 3
77340: PPUSH
77341: CALL_OW 309
77345: IFFALSE 77359
// begin result := true ;
77347: LD_ADDR_VAR 0 4
77351: PUSH
77352: LD_INT 1
77354: ST_TO_ADDR
// exit ;
77355: POP
77356: POP
77357: GO 77363
// end ;
77359: GO 77293
77361: POP
77362: POP
// end ;
77363: LD_VAR 0 4
77367: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77368: LD_INT 0
77370: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77371: LD_VAR 0 1
77375: PPUSH
77376: LD_VAR 0 2
77380: PPUSH
77381: LD_INT 0
77383: PPUSH
77384: LD_INT 0
77386: PPUSH
77387: LD_INT 1
77389: PPUSH
77390: LD_INT 0
77392: PPUSH
77393: CALL_OW 587
// end ;
77397: LD_VAR 0 3
77401: RET
// export function CenterOnNow ( unit ) ; begin
77402: LD_INT 0
77404: PPUSH
// result := IsInUnit ( unit ) ;
77405: LD_ADDR_VAR 0 2
77409: PUSH
77410: LD_VAR 0 1
77414: PPUSH
77415: CALL_OW 310
77419: ST_TO_ADDR
// if not result then
77420: LD_VAR 0 2
77424: NOT
77425: IFFALSE 77437
// result := unit ;
77427: LD_ADDR_VAR 0 2
77431: PUSH
77432: LD_VAR 0 1
77436: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77437: LD_VAR 0 1
77441: PPUSH
77442: CALL_OW 87
// end ;
77446: LD_VAR 0 2
77450: RET
// export function ComMoveHex ( unit , hex ) ; begin
77451: LD_INT 0
77453: PPUSH
// if not hex then
77454: LD_VAR 0 2
77458: NOT
77459: IFFALSE 77463
// exit ;
77461: GO 77516
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77463: LD_VAR 0 2
77467: PUSH
77468: LD_INT 1
77470: ARRAY
77471: PPUSH
77472: LD_VAR 0 2
77476: PUSH
77477: LD_INT 2
77479: ARRAY
77480: PPUSH
77481: CALL_OW 428
77485: IFFALSE 77489
// exit ;
77487: GO 77516
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77489: LD_VAR 0 1
77493: PPUSH
77494: LD_VAR 0 2
77498: PUSH
77499: LD_INT 1
77501: ARRAY
77502: PPUSH
77503: LD_VAR 0 2
77507: PUSH
77508: LD_INT 2
77510: ARRAY
77511: PPUSH
77512: CALL_OW 111
// end ;
77516: LD_VAR 0 3
77520: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77521: LD_INT 0
77523: PPUSH
77524: PPUSH
77525: PPUSH
// if not unit or not enemy then
77526: LD_VAR 0 1
77530: NOT
77531: PUSH
77532: LD_VAR 0 2
77536: NOT
77537: OR
77538: IFFALSE 77542
// exit ;
77540: GO 77666
// x := GetX ( enemy ) ;
77542: LD_ADDR_VAR 0 4
77546: PUSH
77547: LD_VAR 0 2
77551: PPUSH
77552: CALL_OW 250
77556: ST_TO_ADDR
// y := GetY ( enemy ) ;
77557: LD_ADDR_VAR 0 5
77561: PUSH
77562: LD_VAR 0 2
77566: PPUSH
77567: CALL_OW 251
77571: ST_TO_ADDR
// if ValidHex ( x , y ) then
77572: LD_VAR 0 4
77576: PPUSH
77577: LD_VAR 0 5
77581: PPUSH
77582: CALL_OW 488
77586: IFFALSE 77666
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
77588: LD_VAR 0 2
77592: PPUSH
77593: CALL_OW 247
77597: PUSH
77598: LD_INT 3
77600: PUSH
77601: LD_INT 2
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: IN
77608: PUSH
77609: LD_VAR 0 1
77613: PPUSH
77614: CALL_OW 255
77618: PPUSH
77619: LD_VAR 0 2
77623: PPUSH
77624: CALL_OW 292
77628: OR
77629: IFFALSE 77647
// ComAttackUnit ( unit , enemy ) else
77631: LD_VAR 0 1
77635: PPUSH
77636: LD_VAR 0 2
77640: PPUSH
77641: CALL_OW 115
77645: GO 77666
// ComAgressiveMove ( unit , x , y ) ;
77647: LD_VAR 0 1
77651: PPUSH
77652: LD_VAR 0 4
77656: PPUSH
77657: LD_VAR 0 5
77661: PPUSH
77662: CALL_OW 114
// end ;
77666: LD_VAR 0 3
77670: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
77671: LD_INT 0
77673: PPUSH
77674: PPUSH
77675: PPUSH
// list := AreaToList ( area , 0 ) ;
77676: LD_ADDR_VAR 0 5
77680: PUSH
77681: LD_VAR 0 1
77685: PPUSH
77686: LD_INT 0
77688: PPUSH
77689: CALL_OW 517
77693: ST_TO_ADDR
// if not list then
77694: LD_VAR 0 5
77698: NOT
77699: IFFALSE 77703
// exit ;
77701: GO 77833
// if all then
77703: LD_VAR 0 2
77707: IFFALSE 77795
// begin for i := 1 to list [ 1 ] do
77709: LD_ADDR_VAR 0 4
77713: PUSH
77714: DOUBLE
77715: LD_INT 1
77717: DEC
77718: ST_TO_ADDR
77719: LD_VAR 0 5
77723: PUSH
77724: LD_INT 1
77726: ARRAY
77727: PUSH
77728: FOR_TO
77729: IFFALSE 77791
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
77731: LD_ADDR_VAR 0 3
77735: PUSH
77736: LD_VAR 0 3
77740: PPUSH
77741: LD_VAR 0 3
77745: PUSH
77746: LD_INT 1
77748: PLUS
77749: PPUSH
77750: LD_VAR 0 5
77754: PUSH
77755: LD_INT 1
77757: ARRAY
77758: PUSH
77759: LD_VAR 0 4
77763: ARRAY
77764: PUSH
77765: LD_VAR 0 5
77769: PUSH
77770: LD_INT 2
77772: ARRAY
77773: PUSH
77774: LD_VAR 0 4
77778: ARRAY
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PPUSH
77784: CALL_OW 1
77788: ST_TO_ADDR
77789: GO 77728
77791: POP
77792: POP
// exit ;
77793: GO 77833
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
77795: LD_ADDR_VAR 0 3
77799: PUSH
77800: LD_VAR 0 5
77804: PUSH
77805: LD_INT 1
77807: ARRAY
77808: PUSH
77809: LD_INT 1
77811: ARRAY
77812: PUSH
77813: LD_VAR 0 5
77817: PUSH
77818: LD_INT 2
77820: ARRAY
77821: PUSH
77822: LD_INT 1
77824: ARRAY
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: PUSH
77830: EMPTY
77831: LIST
77832: ST_TO_ADDR
// end ;
77833: LD_VAR 0 3
77837: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
77838: LD_INT 0
77840: PPUSH
77841: PPUSH
// list := AreaToList ( area , 0 ) ;
77842: LD_ADDR_VAR 0 4
77846: PUSH
77847: LD_VAR 0 1
77851: PPUSH
77852: LD_INT 0
77854: PPUSH
77855: CALL_OW 517
77859: ST_TO_ADDR
// if not list then
77860: LD_VAR 0 4
77864: NOT
77865: IFFALSE 77869
// exit ;
77867: GO 77910
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
77869: LD_ADDR_VAR 0 3
77873: PUSH
77874: LD_VAR 0 4
77878: PUSH
77879: LD_INT 1
77881: ARRAY
77882: PUSH
77883: LD_INT 1
77885: ARRAY
77886: PUSH
77887: LD_VAR 0 4
77891: PUSH
77892: LD_INT 2
77894: ARRAY
77895: PUSH
77896: LD_INT 1
77898: ARRAY
77899: PUSH
77900: LD_VAR 0 2
77904: PUSH
77905: EMPTY
77906: LIST
77907: LIST
77908: LIST
77909: ST_TO_ADDR
// end ;
77910: LD_VAR 0 3
77914: RET
// export function First ( array ) ; begin
77915: LD_INT 0
77917: PPUSH
// if not array then
77918: LD_VAR 0 1
77922: NOT
77923: IFFALSE 77927
// exit ;
77925: GO 77941
// result := array [ 1 ] ;
77927: LD_ADDR_VAR 0 2
77931: PUSH
77932: LD_VAR 0 1
77936: PUSH
77937: LD_INT 1
77939: ARRAY
77940: ST_TO_ADDR
// end ;
77941: LD_VAR 0 2
77945: RET
// export function Last ( array ) ; begin
77946: LD_INT 0
77948: PPUSH
// if not array then
77949: LD_VAR 0 1
77953: NOT
77954: IFFALSE 77958
// exit ;
77956: GO 77974
// result := array [ array ] ;
77958: LD_ADDR_VAR 0 2
77962: PUSH
77963: LD_VAR 0 1
77967: PUSH
77968: LD_VAR 0 1
77972: ARRAY
77973: ST_TO_ADDR
// end ;
77974: LD_VAR 0 2
77978: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
77979: LD_INT 0
77981: PPUSH
77982: PPUSH
// result := [ ] ;
77983: LD_ADDR_VAR 0 5
77987: PUSH
77988: EMPTY
77989: ST_TO_ADDR
// if not array then
77990: LD_VAR 0 1
77994: NOT
77995: IFFALSE 77999
// exit ;
77997: GO 78111
// for i := 1 to array do
77999: LD_ADDR_VAR 0 6
78003: PUSH
78004: DOUBLE
78005: LD_INT 1
78007: DEC
78008: ST_TO_ADDR
78009: LD_VAR 0 1
78013: PUSH
78014: FOR_TO
78015: IFFALSE 78109
// if array [ i ] [ index ] = value then
78017: LD_VAR 0 1
78021: PUSH
78022: LD_VAR 0 6
78026: ARRAY
78027: PUSH
78028: LD_VAR 0 2
78032: ARRAY
78033: PUSH
78034: LD_VAR 0 3
78038: EQUAL
78039: IFFALSE 78107
// begin if indexColumn then
78041: LD_VAR 0 4
78045: IFFALSE 78081
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78047: LD_ADDR_VAR 0 5
78051: PUSH
78052: LD_VAR 0 5
78056: PPUSH
78057: LD_VAR 0 1
78061: PUSH
78062: LD_VAR 0 6
78066: ARRAY
78067: PUSH
78068: LD_VAR 0 4
78072: ARRAY
78073: PPUSH
78074: CALL 73449 0 2
78078: ST_TO_ADDR
78079: GO 78107
// result := Join ( result , array [ i ] ) ;
78081: LD_ADDR_VAR 0 5
78085: PUSH
78086: LD_VAR 0 5
78090: PPUSH
78091: LD_VAR 0 1
78095: PUSH
78096: LD_VAR 0 6
78100: ARRAY
78101: PPUSH
78102: CALL 73449 0 2
78106: ST_TO_ADDR
// end ;
78107: GO 78014
78109: POP
78110: POP
// end ;
78111: LD_VAR 0 5
78115: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
78116: LD_INT 0
78118: PPUSH
78119: PPUSH
78120: PPUSH
// if btype = b_depot then
78121: LD_VAR 0 2
78125: PUSH
78126: LD_INT 0
78128: EQUAL
78129: IFFALSE 78141
// begin result := true ;
78131: LD_ADDR_VAR 0 3
78135: PUSH
78136: LD_INT 1
78138: ST_TO_ADDR
// exit ;
78139: GO 78257
// end ; pom := GetBase ( depot ) ;
78141: LD_ADDR_VAR 0 4
78145: PUSH
78146: LD_VAR 0 1
78150: PPUSH
78151: CALL_OW 274
78155: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
78156: LD_ADDR_VAR 0 5
78160: PUSH
78161: LD_VAR 0 2
78165: PPUSH
78166: LD_VAR 0 1
78170: PPUSH
78171: CALL_OW 248
78175: PPUSH
78176: CALL_OW 450
78180: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
78181: LD_ADDR_VAR 0 3
78185: PUSH
78186: LD_VAR 0 4
78190: PPUSH
78191: LD_INT 1
78193: PPUSH
78194: CALL_OW 275
78198: PUSH
78199: LD_VAR 0 5
78203: PUSH
78204: LD_INT 1
78206: ARRAY
78207: GREATEREQUAL
78208: PUSH
78209: LD_VAR 0 4
78213: PPUSH
78214: LD_INT 2
78216: PPUSH
78217: CALL_OW 275
78221: PUSH
78222: LD_VAR 0 5
78226: PUSH
78227: LD_INT 2
78229: ARRAY
78230: GREATEREQUAL
78231: AND
78232: PUSH
78233: LD_VAR 0 4
78237: PPUSH
78238: LD_INT 3
78240: PPUSH
78241: CALL_OW 275
78245: PUSH
78246: LD_VAR 0 5
78250: PUSH
78251: LD_INT 3
78253: ARRAY
78254: GREATEREQUAL
78255: AND
78256: ST_TO_ADDR
// end ;
78257: LD_VAR 0 3
78261: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78262: LD_INT 0
78264: PPUSH
// if not vehicles or not parkingPoint then
78265: LD_VAR 0 1
78269: NOT
78270: PUSH
78271: LD_VAR 0 2
78275: NOT
78276: OR
78277: IFFALSE 78281
// exit ;
78279: GO 78379
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78281: LD_ADDR_VAR 0 1
78285: PUSH
78286: LD_VAR 0 1
78290: PPUSH
78291: LD_INT 50
78293: PUSH
78294: EMPTY
78295: LIST
78296: PUSH
78297: LD_INT 3
78299: PUSH
78300: LD_INT 92
78302: PUSH
78303: LD_VAR 0 2
78307: PUSH
78308: LD_INT 1
78310: ARRAY
78311: PUSH
78312: LD_VAR 0 2
78316: PUSH
78317: LD_INT 2
78319: ARRAY
78320: PUSH
78321: LD_INT 8
78323: PUSH
78324: EMPTY
78325: LIST
78326: LIST
78327: LIST
78328: LIST
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PPUSH
78338: CALL_OW 72
78342: ST_TO_ADDR
// if not vehicles then
78343: LD_VAR 0 1
78347: NOT
78348: IFFALSE 78352
// exit ;
78350: GO 78379
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
78352: LD_VAR 0 1
78356: PPUSH
78357: LD_VAR 0 2
78361: PUSH
78362: LD_INT 1
78364: ARRAY
78365: PPUSH
78366: LD_VAR 0 2
78370: PUSH
78371: LD_INT 2
78373: ARRAY
78374: PPUSH
78375: CALL_OW 111
// end ;
78379: LD_VAR 0 3
78383: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
78384: LD_INT 0
78386: PPUSH
78387: PPUSH
78388: PPUSH
// if not side or not area then
78389: LD_VAR 0 1
78393: NOT
78394: PUSH
78395: LD_VAR 0 2
78399: NOT
78400: OR
78401: IFFALSE 78405
// exit ;
78403: GO 78524
// tmp := AreaToList ( area , 0 ) ;
78405: LD_ADDR_VAR 0 5
78409: PUSH
78410: LD_VAR 0 2
78414: PPUSH
78415: LD_INT 0
78417: PPUSH
78418: CALL_OW 517
78422: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
78423: LD_ADDR_VAR 0 4
78427: PUSH
78428: DOUBLE
78429: LD_INT 1
78431: DEC
78432: ST_TO_ADDR
78433: LD_VAR 0 5
78437: PUSH
78438: LD_INT 1
78440: ARRAY
78441: PUSH
78442: FOR_TO
78443: IFFALSE 78522
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
78445: LD_VAR 0 5
78449: PUSH
78450: LD_INT 1
78452: ARRAY
78453: PUSH
78454: LD_VAR 0 4
78458: ARRAY
78459: PPUSH
78460: LD_VAR 0 5
78464: PUSH
78465: LD_INT 2
78467: ARRAY
78468: PUSH
78469: LD_VAR 0 4
78473: ARRAY
78474: PPUSH
78475: CALL_OW 351
78479: IFFALSE 78520
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
78481: LD_VAR 0 5
78485: PUSH
78486: LD_INT 1
78488: ARRAY
78489: PUSH
78490: LD_VAR 0 4
78494: ARRAY
78495: PPUSH
78496: LD_VAR 0 5
78500: PUSH
78501: LD_INT 2
78503: ARRAY
78504: PUSH
78505: LD_VAR 0 4
78509: ARRAY
78510: PPUSH
78511: LD_VAR 0 1
78515: PPUSH
78516: CALL_OW 244
// end ;
78520: GO 78442
78522: POP
78523: POP
// end ; end_of_file
78524: LD_VAR 0 3
78528: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78529: LD_VAR 0 1
78533: PUSH
78534: LD_INT 200
78536: DOUBLE
78537: GREATEREQUAL
78538: IFFALSE 78546
78540: LD_INT 299
78542: DOUBLE
78543: LESSEQUAL
78544: IFTRUE 78548
78546: GO 78580
78548: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78549: LD_VAR 0 1
78553: PPUSH
78554: LD_VAR 0 2
78558: PPUSH
78559: LD_VAR 0 3
78563: PPUSH
78564: LD_VAR 0 4
78568: PPUSH
78569: LD_VAR 0 5
78573: PPUSH
78574: CALL 15421 0 5
78578: GO 78657
78580: LD_INT 300
78582: DOUBLE
78583: GREATEREQUAL
78584: IFFALSE 78592
78586: LD_INT 399
78588: DOUBLE
78589: LESSEQUAL
78590: IFTRUE 78594
78592: GO 78656
78594: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78595: LD_VAR 0 1
78599: PPUSH
78600: LD_VAR 0 2
78604: PPUSH
78605: LD_VAR 0 3
78609: PPUSH
78610: LD_VAR 0 4
78614: PPUSH
78615: LD_VAR 0 5
78619: PPUSH
78620: LD_VAR 0 6
78624: PPUSH
78625: LD_VAR 0 7
78629: PPUSH
78630: LD_VAR 0 8
78634: PPUSH
78635: LD_VAR 0 9
78639: PPUSH
78640: LD_VAR 0 10
78644: PPUSH
78645: LD_VAR 0 11
78649: PPUSH
78650: CALL 32459 0 11
78654: GO 78657
78656: POP
// end ;
78657: PPOPN 11
78659: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78660: LD_VAR 0 1
78664: PPUSH
78665: LD_VAR 0 2
78669: PPUSH
78670: LD_VAR 0 3
78674: PPUSH
78675: LD_VAR 0 4
78679: PPUSH
78680: LD_VAR 0 5
78684: PPUSH
78685: CALL 15157 0 5
// end ; end_of_file
78689: PPOPN 5
78691: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78692: LD_VAR 0 1
78696: PPUSH
78697: LD_VAR 0 2
78701: PPUSH
78702: LD_VAR 0 3
78706: PPUSH
78707: LD_VAR 0 4
78711: PPUSH
78712: LD_VAR 0 5
78716: PPUSH
78717: LD_VAR 0 6
78721: PPUSH
78722: CALL 20111 0 6
// end ;
78726: PPOPN 6
78728: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78729: LD_INT 0
78731: PPUSH
// begin if not units then
78732: LD_VAR 0 1
78736: NOT
78737: IFFALSE 78741
// exit ;
78739: GO 78741
// end ;
78741: PPOPN 7
78743: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78744: CALL 19998 0 0
// end ;
78748: PPOPN 1
78750: END
