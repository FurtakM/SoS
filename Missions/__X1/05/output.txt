// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 48 0 0
// InitTag ;
   8: CALL 186 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 25
// FogOff ( 2 ) ;
  18: LD_INT 2
  20: PPUSH
  21: CALL_OW 344
// PrepareNature ( forestArea , swampArea ) ;
  25: LD_INT 3
  27: PPUSH
  28: LD_INT 2
  30: PPUSH
  31: CALL 653 0 2
// PrepareArabian ;
  35: CALL 2961 0 0
// PrepareRussian ;
  39: CALL 4511 0 0
// Action ;
  43: CALL 5905 0 0
// end ;
  47: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , reinforcementsAllowed ; function Init ; begin
  48: LD_INT 0
  50: PPUSH
// debug := true ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 1
  58: ST_TO_ADDR
// prefix := 04_2_ ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_STRING 04_2_
  66: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_STRING 04_1_Flamethrower
  74: PPUSH
  75: LD_EXP 1
  79: PPUSH
  80: CALL_OW 30
  84: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  85: LD_ADDR_EXP 4
  89: PUSH
  90: LD_STRING 04_2_IbrahimJoined
  92: PPUSH
  93: LD_INT 0
  95: PPUSH
  96: CALL_OW 30
 100: ST_TO_ADDR
// spottedCrossRoad := false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// westBaseCaptured := false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// eastBaseCaptured := false ;
 117: LD_ADDR_EXP 10
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// westBaseSpotted := false ;
 125: LD_ADDR_EXP 5
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// drugsResearched := false ;
 133: LD_ADDR_EXP 11
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// drugsTested := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// remoteControlConstructed := false ;
 149: LD_ADDR_EXP 12
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// remoteControlTested := false ;
 157: LD_ADDR_EXP 7
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 165: LD_ADDR_EXP 13
 169: PUSH
 170: LD_STRING 04_1_RuLabCaptured
 172: PPUSH
 173: LD_INT 0
 175: PPUSH
 176: CALL_OW 30
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// function InitTag ; begin
 186: LD_INT 0
 188: PPUSH
// end ;
 189: LD_VAR 0 1
 193: RET
// every 0 0$1 trigger debug do var i ;
 194: LD_EXP 1
 198: IFFALSE 282
 200: GO 202
 202: DISABLE
 203: LD_INT 0
 205: PPUSH
// begin enable ;
 206: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 207: LD_ADDR_VAR 0 1
 211: PUSH
 212: LD_INT 22
 214: PUSH
 215: LD_INT 2
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: LD_INT 21
 227: PUSH
 228: LD_INT 3
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PPUSH
 243: CALL_OW 69
 247: PUSH
 248: FOR_IN
 249: IFFALSE 280
// if GetLives ( i ) < 1000 then
 251: LD_VAR 0 1
 255: PPUSH
 256: CALL_OW 256
 260: PUSH
 261: LD_INT 1000
 263: LESS
 264: IFFALSE 278
// SetLives ( i , 1000 ) ;
 266: LD_VAR 0 1
 270: PPUSH
 271: LD_INT 1000
 273: PPUSH
 274: CALL_OW 234
 278: GO 248
 280: POP
 281: POP
// end ; end_of_file
 282: PPOPN 1
 284: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// if exist_mode then
 289: LD_VAR 0 2
 293: IFFALSE 318
// unit := CreateCharacter ( prefix & ident ) else
 295: LD_ADDR_VAR 0 5
 299: PUSH
 300: LD_VAR 0 3
 304: PUSH
 305: LD_VAR 0 1
 309: STR
 310: PPUSH
 311: CALL_OW 34
 315: ST_TO_ADDR
 316: GO 333
// unit := NewCharacter ( ident ) ;
 318: LD_ADDR_VAR 0 5
 322: PUSH
 323: LD_VAR 0 1
 327: PPUSH
 328: CALL_OW 25
 332: ST_TO_ADDR
// result := unit ;
 333: LD_ADDR_VAR 0 4
 337: PUSH
 338: LD_VAR 0 5
 342: ST_TO_ADDR
// end ;
 343: LD_VAR 0 4
 347: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 348: LD_INT 0
 350: PPUSH
// uc_side := side ;
 351: LD_ADDR_OWVAR 20
 355: PUSH
 356: LD_VAR 0 1
 360: ST_TO_ADDR
// uc_nation := nation ;
 361: LD_ADDR_OWVAR 21
 365: PUSH
 366: LD_VAR 0 2
 370: ST_TO_ADDR
// vc_chassis := chassis ;
 371: LD_ADDR_OWVAR 37
 375: PUSH
 376: LD_VAR 0 3
 380: ST_TO_ADDR
// vc_engine := engine ;
 381: LD_ADDR_OWVAR 39
 385: PUSH
 386: LD_VAR 0 4
 390: ST_TO_ADDR
// vc_control := control ;
 391: LD_ADDR_OWVAR 38
 395: PUSH
 396: LD_VAR 0 5
 400: ST_TO_ADDR
// vc_weapon := weapon ;
 401: LD_ADDR_OWVAR 40
 405: PUSH
 406: LD_VAR 0 6
 410: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 411: LD_ADDR_OWVAR 41
 415: PUSH
 416: LD_VAR 0 7
 420: ST_TO_ADDR
// result := CreateVehicle ;
 421: LD_ADDR_VAR 0 8
 425: PUSH
 426: CALL_OW 45
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 8
 435: RET
// export function SayX ( units , ident ) ; var i ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// result := false ;
 440: LD_ADDR_VAR 0 3
 444: PUSH
 445: LD_INT 0
 447: ST_TO_ADDR
// if not units then
 448: LD_VAR 0 1
 452: NOT
 453: IFFALSE 457
// exit ;
 455: GO 511
// for i in units do
 457: LD_ADDR_VAR 0 4
 461: PUSH
 462: LD_VAR 0 1
 466: PUSH
 467: FOR_IN
 468: IFFALSE 509
// if IsOk ( i ) then
 470: LD_VAR 0 4
 474: PPUSH
 475: CALL_OW 302
 479: IFFALSE 507
// begin Say ( i , ident ) ;
 481: LD_VAR 0 4
 485: PPUSH
 486: LD_VAR 0 2
 490: PPUSH
 491: CALL_OW 88
// result := i ;
 495: LD_ADDR_VAR 0 3
 499: PUSH
 500: LD_VAR 0 4
 504: ST_TO_ADDR
// break ;
 505: GO 509
// end ;
 507: GO 467
 509: POP
 510: POP
// end ;
 511: LD_VAR 0 3
 515: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 516: LD_INT 0
 518: PPUSH
 519: PPUSH
// InitUc ;
 520: CALL_OW 18
// InitHc ;
 524: CALL_OW 19
// uc_side := 0 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 0
 535: ST_TO_ADDR
// uc_nation := 0 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 0
 543: ST_TO_ADDR
// for i = 1 to amount do
 544: LD_ADDR_VAR 0 4
 548: PUSH
 549: DOUBLE
 550: LD_INT 1
 552: DEC
 553: ST_TO_ADDR
 554: LD_VAR 0 2
 558: PUSH
 559: FOR_TO
 560: IFFALSE 642
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 562: LD_ADDR_OWVAR 29
 566: PUSH
 567: LD_INT 9
 569: PPUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 12
 577: PUSH
 578: LD_INT 9
 580: PPUSH
 581: LD_INT 12
 583: PPUSH
 584: CALL_OW 12
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 593: LD_ADDR_OWVAR 35
 597: PUSH
 598: LD_INT 1
 600: NEG
 601: PPUSH
 602: LD_INT 1
 604: PPUSH
 605: CALL_OW 12
 609: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 610: LD_INT 0
 612: PPUSH
 613: LD_INT 12
 615: PPUSH
 616: LD_INT 1
 618: PPUSH
 619: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 623: CALL_OW 44
 627: PPUSH
 628: LD_VAR 0 1
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 559
 642: POP
 643: POP
// InitHc ;
 644: CALL_OW 19
// end ;
 648: LD_VAR 0 3
 652: RET
// export function PrepareNature ( forest , swamp ) ; var i ; begin
 653: LD_INT 0
 655: PPUSH
 656: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 657: LD_VAR 0 1
 661: PPUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 4
 667: PUSH
 668: LD_INT 4
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: PPUSH
 682: CALL 516 0 2
// for i := 1 to 3 do
 686: LD_ADDR_VAR 0 4
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 3
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := 21 ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 21
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 1
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 3 do
 739: LD_ADDR_VAR 0 4
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 3
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := 18 ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 18
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// for i := 1 to 3 do
 792: LD_ADDR_VAR 0 4
 796: PUSH
 797: DOUBLE
 798: LD_INT 1
 800: DEC
 801: ST_TO_ADDR
 802: LD_INT 3
 804: PUSH
 805: FOR_TO
 806: IFFALSE 843
// begin hc_class := 13 ;
 808: LD_ADDR_OWVAR 28
 812: PUSH
 813: LD_INT 13
 815: ST_TO_ADDR
// hc_gallery :=  ;
 816: LD_ADDR_OWVAR 33
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 824: CALL_OW 44
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: LD_INT 0
 836: PPUSH
 837: CALL_OW 49
// end ;
 841: GO 805
 843: POP
 844: POP
// for i := 1 to 4 do
 845: LD_ADDR_VAR 0 4
 849: PUSH
 850: DOUBLE
 851: LD_INT 1
 853: DEC
 854: ST_TO_ADDR
 855: LD_INT 4
 857: PUSH
 858: FOR_TO
 859: IFFALSE 896
// begin hc_class := class_frog ;
 861: LD_ADDR_OWVAR 28
 865: PUSH
 866: LD_INT 19
 868: ST_TO_ADDR
// hc_gallery :=  ;
 869: LD_ADDR_OWVAR 33
 873: PUSH
 874: LD_STRING 
 876: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 877: CALL_OW 44
 881: PPUSH
 882: LD_VAR 0 2
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 49
// end ;
 894: GO 858
 896: POP
 897: POP
// end ;
 898: LD_VAR 0 3
 902: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 903: LD_INT 0
 905: PPUSH
 906: PPUSH
 907: PPUSH
// if not observer or not unit then
 908: LD_VAR 0 1
 912: NOT
 913: PUSH
 914: LD_VAR 0 2
 918: NOT
 919: OR
 920: IFFALSE 924
// exit ;
 922: GO 972
// if not See ( GetSide ( observer ) , unit ) then
 924: LD_VAR 0 1
 928: PPUSH
 929: CALL_OW 255
 933: PPUSH
 934: LD_VAR 0 2
 938: PPUSH
 939: CALL_OW 292
 943: NOT
 944: IFFALSE 948
// exit ;
 946: GO 972
// result := GetDistUnits ( observer , unit ) < 12 ;
 948: LD_ADDR_VAR 0 3
 952: PUSH
 953: LD_VAR 0 1
 957: PPUSH
 958: LD_VAR 0 2
 962: PPUSH
 963: CALL_OW 296
 967: PUSH
 968: LD_INT 12
 970: LESS
 971: ST_TO_ADDR
// end ;
 972: LD_VAR 0 3
 976: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 977: LD_INT 0
 979: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 980: LD_VAR 0 2
 984: PUSH
 985: LD_INT 1
 987: ARRAY
 988: PPUSH
 989: LD_VAR 0 2
 993: PUSH
 994: LD_INT 2
 996: ARRAY
 997: PPUSH
 998: CALL_OW 488
1002: PUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 1
1010: ARRAY
1011: PPUSH
1012: LD_VAR 0 2
1016: PUSH
1017: LD_INT 2
1019: ARRAY
1020: PPUSH
1021: CALL_OW 428
1025: PUSH
1026: LD_INT 0
1028: EQUAL
1029: AND
1030: IFFALSE 1064
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1032: LD_VAR 0 1
1036: PPUSH
1037: LD_VAR 0 2
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 2
1050: PUSH
1051: LD_INT 2
1053: ARRAY
1054: PPUSH
1055: LD_VAR 0 3
1059: PPUSH
1060: CALL_OW 48
// end ;
1064: LD_VAR 0 4
1068: RET
// export function Video ( mode ) ; begin
1069: LD_INT 0
1071: PPUSH
// ingame_video = mode ;
1072: LD_ADDR_OWVAR 52
1076: PUSH
1077: LD_VAR 0 1
1081: ST_TO_ADDR
// interface_hidden = mode ;
1082: LD_ADDR_OWVAR 54
1086: PUSH
1087: LD_VAR 0 1
1091: ST_TO_ADDR
// end ;
1092: LD_VAR 0 2
1096: RET
// export function ReverseArray ( array ) ; var i ; begin
1097: LD_INT 0
1099: PPUSH
1100: PPUSH
// if not array then
1101: LD_VAR 0 1
1105: NOT
1106: IFFALSE 1110
// exit ;
1108: GO 1168
// result := [ ] ;
1110: LD_ADDR_VAR 0 2
1114: PUSH
1115: EMPTY
1116: ST_TO_ADDR
// for i := 1 to array do
1117: LD_ADDR_VAR 0 3
1121: PUSH
1122: DOUBLE
1123: LD_INT 1
1125: DEC
1126: ST_TO_ADDR
1127: LD_VAR 0 1
1131: PUSH
1132: FOR_TO
1133: IFFALSE 1166
// result := Insert ( result , 1 , array [ i ] ) ;
1135: LD_ADDR_VAR 0 2
1139: PUSH
1140: LD_VAR 0 2
1144: PPUSH
1145: LD_INT 1
1147: PPUSH
1148: LD_VAR 0 1
1152: PUSH
1153: LD_VAR 0 3
1157: ARRAY
1158: PPUSH
1159: CALL_OW 2
1163: ST_TO_ADDR
1164: GO 1132
1166: POP
1167: POP
// end ;
1168: LD_VAR 0 2
1172: RET
// export function ComExit ( unit ) ; begin
1173: LD_INT 0
1175: PPUSH
// result := IsInUnit ( unit ) ;
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 1
1185: PPUSH
1186: CALL_OW 310
1190: ST_TO_ADDR
// if not result then
1191: LD_VAR 0 2
1195: NOT
1196: IFFALSE 1200
// exit ;
1198: GO 1235
// if GetType ( result ) = unit_vehicle then
1200: LD_VAR 0 2
1204: PPUSH
1205: CALL_OW 247
1209: PUSH
1210: LD_INT 2
1212: EQUAL
1213: IFFALSE 1226
// ComExitVehicle ( unit ) else
1215: LD_VAR 0 1
1219: PPUSH
1220: CALL_OW 121
1224: GO 1235
// ComExitBuilding ( unit ) ;
1226: LD_VAR 0 1
1230: PPUSH
1231: CALL_OW 122
// end ;
1235: LD_VAR 0 2
1239: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1240: LD_INT 0
1242: PPUSH
1243: PPUSH
// if not side or not nation then
1244: LD_VAR 0 1
1248: NOT
1249: PUSH
1250: LD_VAR 0 2
1254: NOT
1255: OR
1256: IFFALSE 1260
// exit ;
1258: GO 2024
// case nation of nation_american :
1260: LD_VAR 0 2
1264: PUSH
1265: LD_INT 1
1267: DOUBLE
1268: EQUAL
1269: IFTRUE 1273
1271: GO 1487
1273: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_INT 35
1281: PUSH
1282: LD_INT 45
1284: PUSH
1285: LD_INT 46
1287: PUSH
1288: LD_INT 47
1290: PUSH
1291: LD_INT 82
1293: PUSH
1294: LD_INT 83
1296: PUSH
1297: LD_INT 84
1299: PUSH
1300: LD_INT 85
1302: PUSH
1303: LD_INT 86
1305: PUSH
1306: LD_INT 1
1308: PUSH
1309: LD_INT 2
1311: PUSH
1312: LD_INT 6
1314: PUSH
1315: LD_INT 15
1317: PUSH
1318: LD_INT 16
1320: PUSH
1321: LD_INT 7
1323: PUSH
1324: LD_INT 12
1326: PUSH
1327: LD_INT 13
1329: PUSH
1330: LD_INT 10
1332: PUSH
1333: LD_INT 14
1335: PUSH
1336: LD_INT 20
1338: PUSH
1339: LD_INT 21
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_INT 25
1347: PUSH
1348: LD_INT 32
1350: PUSH
1351: LD_INT 27
1353: PUSH
1354: LD_INT 36
1356: PUSH
1357: LD_INT 69
1359: PUSH
1360: LD_INT 39
1362: PUSH
1363: LD_INT 34
1365: PUSH
1366: LD_INT 40
1368: PUSH
1369: LD_INT 48
1371: PUSH
1372: LD_INT 49
1374: PUSH
1375: LD_INT 50
1377: PUSH
1378: LD_INT 51
1380: PUSH
1381: LD_INT 52
1383: PUSH
1384: LD_INT 53
1386: PUSH
1387: LD_INT 54
1389: PUSH
1390: LD_INT 55
1392: PUSH
1393: LD_INT 56
1395: PUSH
1396: LD_INT 57
1398: PUSH
1399: LD_INT 58
1401: PUSH
1402: LD_INT 59
1404: PUSH
1405: LD_INT 60
1407: PUSH
1408: LD_INT 61
1410: PUSH
1411: LD_INT 62
1413: PUSH
1414: LD_INT 80
1416: PUSH
1417: LD_INT 82
1419: PUSH
1420: LD_INT 83
1422: PUSH
1423: LD_INT 84
1425: PUSH
1426: LD_INT 85
1428: PUSH
1429: LD_INT 86
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: ST_TO_ADDR
1485: GO 1948
1487: LD_INT 2
1489: DOUBLE
1490: EQUAL
1491: IFTRUE 1495
1493: GO 1717
1495: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1496: LD_ADDR_VAR 0 4
1500: PUSH
1501: LD_INT 35
1503: PUSH
1504: LD_INT 45
1506: PUSH
1507: LD_INT 46
1509: PUSH
1510: LD_INT 47
1512: PUSH
1513: LD_INT 82
1515: PUSH
1516: LD_INT 83
1518: PUSH
1519: LD_INT 84
1521: PUSH
1522: LD_INT 85
1524: PUSH
1525: LD_INT 87
1527: PUSH
1528: LD_INT 70
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 11
1536: PUSH
1537: LD_INT 3
1539: PUSH
1540: LD_INT 4
1542: PUSH
1543: LD_INT 5
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: LD_INT 15
1551: PUSH
1552: LD_INT 18
1554: PUSH
1555: LD_INT 7
1557: PUSH
1558: LD_INT 17
1560: PUSH
1561: LD_INT 8
1563: PUSH
1564: LD_INT 20
1566: PUSH
1567: LD_INT 21
1569: PUSH
1570: LD_INT 22
1572: PUSH
1573: LD_INT 72
1575: PUSH
1576: LD_INT 26
1578: PUSH
1579: LD_INT 69
1581: PUSH
1582: LD_INT 39
1584: PUSH
1585: LD_INT 40
1587: PUSH
1588: LD_INT 41
1590: PUSH
1591: LD_INT 42
1593: PUSH
1594: LD_INT 43
1596: PUSH
1597: LD_INT 48
1599: PUSH
1600: LD_INT 49
1602: PUSH
1603: LD_INT 50
1605: PUSH
1606: LD_INT 51
1608: PUSH
1609: LD_INT 52
1611: PUSH
1612: LD_INT 53
1614: PUSH
1615: LD_INT 54
1617: PUSH
1618: LD_INT 55
1620: PUSH
1621: LD_INT 56
1623: PUSH
1624: LD_INT 60
1626: PUSH
1627: LD_INT 61
1629: PUSH
1630: LD_INT 62
1632: PUSH
1633: LD_INT 66
1635: PUSH
1636: LD_INT 67
1638: PUSH
1639: LD_INT 68
1641: PUSH
1642: LD_INT 81
1644: PUSH
1645: LD_INT 82
1647: PUSH
1648: LD_INT 83
1650: PUSH
1651: LD_INT 84
1653: PUSH
1654: LD_INT 85
1656: PUSH
1657: LD_INT 87
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: ST_TO_ADDR
1715: GO 1948
1717: LD_INT 3
1719: DOUBLE
1720: EQUAL
1721: IFTRUE 1725
1723: GO 1947
1725: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1726: LD_ADDR_VAR 0 4
1730: PUSH
1731: LD_INT 46
1733: PUSH
1734: LD_INT 47
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: LD_INT 82
1745: PUSH
1746: LD_INT 83
1748: PUSH
1749: LD_INT 84
1751: PUSH
1752: LD_INT 85
1754: PUSH
1755: LD_INT 86
1757: PUSH
1758: LD_INT 11
1760: PUSH
1761: LD_INT 9
1763: PUSH
1764: LD_INT 20
1766: PUSH
1767: LD_INT 19
1769: PUSH
1770: LD_INT 21
1772: PUSH
1773: LD_INT 24
1775: PUSH
1776: LD_INT 22
1778: PUSH
1779: LD_INT 25
1781: PUSH
1782: LD_INT 28
1784: PUSH
1785: LD_INT 29
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 31
1793: PUSH
1794: LD_INT 37
1796: PUSH
1797: LD_INT 38
1799: PUSH
1800: LD_INT 32
1802: PUSH
1803: LD_INT 27
1805: PUSH
1806: LD_INT 33
1808: PUSH
1809: LD_INT 69
1811: PUSH
1812: LD_INT 39
1814: PUSH
1815: LD_INT 34
1817: PUSH
1818: LD_INT 40
1820: PUSH
1821: LD_INT 71
1823: PUSH
1824: LD_INT 23
1826: PUSH
1827: LD_INT 44
1829: PUSH
1830: LD_INT 48
1832: PUSH
1833: LD_INT 49
1835: PUSH
1836: LD_INT 50
1838: PUSH
1839: LD_INT 51
1841: PUSH
1842: LD_INT 52
1844: PUSH
1845: LD_INT 53
1847: PUSH
1848: LD_INT 54
1850: PUSH
1851: LD_INT 55
1853: PUSH
1854: LD_INT 56
1856: PUSH
1857: LD_INT 57
1859: PUSH
1860: LD_INT 58
1862: PUSH
1863: LD_INT 59
1865: PUSH
1866: LD_INT 63
1868: PUSH
1869: LD_INT 64
1871: PUSH
1872: LD_INT 65
1874: PUSH
1875: LD_INT 82
1877: PUSH
1878: LD_INT 83
1880: PUSH
1881: LD_INT 84
1883: PUSH
1884: LD_INT 85
1886: PUSH
1887: LD_INT 86
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: ST_TO_ADDR
1945: GO 1948
1947: POP
// if state > - 1 and state < 3 then
1948: LD_VAR 0 3
1952: PUSH
1953: LD_INT 1
1955: NEG
1956: GREATER
1957: PUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 3
1965: LESS
1966: AND
1967: IFFALSE 2024
// for i in result do
1969: LD_ADDR_VAR 0 5
1973: PUSH
1974: LD_VAR 0 4
1978: PUSH
1979: FOR_IN
1980: IFFALSE 2022
// if GetTech ( i , side ) <> state then
1982: LD_VAR 0 5
1986: PPUSH
1987: LD_VAR 0 1
1991: PPUSH
1992: CALL_OW 321
1996: PUSH
1997: LD_VAR 0 3
2001: NONEQUAL
2002: IFFALSE 2020
// result := result diff i ;
2004: LD_ADDR_VAR 0 4
2008: PUSH
2009: LD_VAR 0 4
2013: PUSH
2014: LD_VAR 0 5
2018: DIFF
2019: ST_TO_ADDR
2020: GO 1979
2022: POP
2023: POP
// end ;
2024: LD_VAR 0 4
2028: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
2029: LD_INT 0
2031: PPUSH
2032: PPUSH
2033: PPUSH
2034: PPUSH
// if not list then
2035: LD_VAR 0 3
2039: NOT
2040: IFFALSE 2044
// exit ;
2042: GO 2352
// result := [ ] ;
2044: LD_ADDR_VAR 0 5
2048: PUSH
2049: EMPTY
2050: ST_TO_ADDR
// for i in list do
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 3
2060: PUSH
2061: FOR_IN
2062: IFFALSE 2264
// begin tmp := GetDistUnitXY ( i , x , y ) ;
2064: LD_ADDR_VAR 0 8
2068: PUSH
2069: LD_VAR 0 6
2073: PPUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: LD_VAR 0 2
2083: PPUSH
2084: CALL_OW 297
2088: ST_TO_ADDR
// if not result then
2089: LD_VAR 0 5
2093: NOT
2094: IFFALSE 2120
// result := [ [ i , tmp ] ] else
2096: LD_ADDR_VAR 0 5
2100: PUSH
2101: LD_VAR 0 6
2105: PUSH
2106: LD_VAR 0 8
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: ST_TO_ADDR
2118: GO 2262
// begin if result [ result ] [ 2 ] < tmp then
2120: LD_VAR 0 5
2124: PUSH
2125: LD_VAR 0 5
2129: ARRAY
2130: PUSH
2131: LD_INT 2
2133: ARRAY
2134: PUSH
2135: LD_VAR 0 8
2139: LESS
2140: IFFALSE 2182
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2142: LD_ADDR_VAR 0 5
2146: PUSH
2147: LD_VAR 0 5
2151: PPUSH
2152: LD_VAR 0 5
2156: PUSH
2157: LD_INT 1
2159: PLUS
2160: PPUSH
2161: LD_VAR 0 6
2165: PUSH
2166: LD_VAR 0 8
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 2
2179: ST_TO_ADDR
2180: GO 2262
// for j = 1 to result do
2182: LD_ADDR_VAR 0 7
2186: PUSH
2187: DOUBLE
2188: LD_INT 1
2190: DEC
2191: ST_TO_ADDR
2192: LD_VAR 0 5
2196: PUSH
2197: FOR_TO
2198: IFFALSE 2260
// begin if tmp < result [ j ] [ 2 ] then
2200: LD_VAR 0 8
2204: PUSH
2205: LD_VAR 0 5
2209: PUSH
2210: LD_VAR 0 7
2214: ARRAY
2215: PUSH
2216: LD_INT 2
2218: ARRAY
2219: LESS
2220: IFFALSE 2258
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2222: LD_ADDR_VAR 0 5
2226: PUSH
2227: LD_VAR 0 5
2231: PPUSH
2232: LD_VAR 0 7
2236: PPUSH
2237: LD_VAR 0 6
2241: PUSH
2242: LD_VAR 0 8
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PPUSH
2251: CALL_OW 2
2255: ST_TO_ADDR
// break ;
2256: GO 2260
// end ; end ;
2258: GO 2197
2260: POP
2261: POP
// end ; end ;
2262: GO 2061
2264: POP
2265: POP
// if result and not asc then
2266: LD_VAR 0 5
2270: PUSH
2271: LD_VAR 0 4
2275: NOT
2276: AND
2277: IFFALSE 2352
// begin tmp := result ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_VAR 0 5
2288: ST_TO_ADDR
// for i = tmp downto 1 do
2289: LD_ADDR_VAR 0 6
2293: PUSH
2294: DOUBLE
2295: LD_VAR 0 8
2299: INC
2300: ST_TO_ADDR
2301: LD_INT 1
2303: PUSH
2304: FOR_DOWNTO
2305: IFFALSE 2350
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2307: LD_ADDR_VAR 0 5
2311: PUSH
2312: LD_VAR 0 5
2316: PPUSH
2317: LD_VAR 0 8
2321: PUSH
2322: LD_VAR 0 6
2326: MINUS
2327: PUSH
2328: LD_INT 1
2330: PLUS
2331: PPUSH
2332: LD_VAR 0 8
2336: PUSH
2337: LD_VAR 0 6
2341: ARRAY
2342: PPUSH
2343: CALL_OW 1
2347: ST_TO_ADDR
2348: GO 2304
2350: POP
2351: POP
// end ; end ;
2352: LD_VAR 0 5
2356: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
2357: LD_INT 0
2359: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_VAR 0 1
2369: PPUSH
2370: CALL_OW 250
2374: PPUSH
2375: LD_VAR 0 1
2379: PPUSH
2380: CALL_OW 251
2384: PPUSH
2385: LD_VAR 0 2
2389: PPUSH
2390: LD_VAR 0 3
2394: PPUSH
2395: CALL 2029 0 4
2399: ST_TO_ADDR
// end ;
2400: LD_VAR 0 4
2404: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
2405: LD_INT 0
2407: PPUSH
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
// if not unit then
2412: LD_VAR 0 1
2416: NOT
2417: IFFALSE 2421
// exit ;
2419: GO 2623
// side := GetSide ( unit ) ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_VAR 0 1
2430: PPUSH
2431: CALL_OW 255
2435: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
2436: LD_ADDR_VAR 0 5
2440: PUSH
2441: LD_INT 22
2443: PUSH
2444: LD_VAR 0 4
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 30
2455: PUSH
2456: LD_VAR 0 2
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PPUSH
2469: CALL_OW 69
2473: ST_TO_ADDR
// if not tmp then
2474: LD_VAR 0 5
2478: NOT
2479: IFFALSE 2483
// exit ;
2481: GO 2623
// tmp := SortByDistanceUnit ( unit , tmp , true ) ;
2483: LD_ADDR_VAR 0 5
2487: PUSH
2488: LD_VAR 0 1
2492: PPUSH
2493: LD_VAR 0 5
2497: PPUSH
2498: LD_INT 1
2500: PPUSH
2501: CALL 2357 0 3
2505: ST_TO_ADDR
// places := 1 ;
2506: LD_ADDR_VAR 0 7
2510: PUSH
2511: LD_INT 1
2513: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
2514: LD_VAR 0 2
2518: PUSH
2519: LD_INT 0
2521: PUSH
2522: LD_INT 1
2524: PUSH
2525: LD_INT 4
2527: PUSH
2528: LD_INT 5
2530: PUSH
2531: LD_INT 2
2533: PUSH
2534: LD_INT 3
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: LD_INT 7
2542: PUSH
2543: LD_INT 8
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: IN
2557: IFFALSE 2567
// places := 6 ;
2559: LD_ADDR_VAR 0 7
2563: PUSH
2564: LD_INT 6
2566: ST_TO_ADDR
// for i in tmp do
2567: LD_ADDR_VAR 0 6
2571: PUSH
2572: LD_VAR 0 5
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2621
// begin if UnitsInside ( i ) - places <= 0 then
2580: LD_VAR 0 6
2584: PPUSH
2585: CALL_OW 313
2589: PUSH
2590: LD_VAR 0 7
2594: MINUS
2595: PUSH
2596: LD_INT 0
2598: LESSEQUAL
2599: IFFALSE 2605
// continue else
2601: GO 2577
2603: GO 2619
// begin result := i ;
2605: LD_ADDR_VAR 0 3
2609: PUSH
2610: LD_VAR 0 6
2614: ST_TO_ADDR
// exit ;
2615: POP
2616: POP
2617: GO 2623
// end ; end ;
2619: GO 2577
2621: POP
2622: POP
// end ;
2623: LD_VAR 0 3
2627: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
2628: LD_INT 0
2630: PPUSH
2631: PPUSH
2632: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
2633: LD_VAR 0 1
2637: NOT
2638: PUSH
2639: LD_VAR 0 2
2643: PUSH
2644: LD_INT 1
2646: PUSH
2647: LD_INT 2
2649: PUSH
2650: LD_INT 3
2652: PUSH
2653: LD_INT 4
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: IN
2662: NOT
2663: OR
2664: IFFALSE 2668
// exit ;
2666: GO 2760
// tmp := [ ] ;
2668: LD_ADDR_VAR 0 5
2672: PUSH
2673: EMPTY
2674: ST_TO_ADDR
// for i in units do
2675: LD_ADDR_VAR 0 4
2679: PUSH
2680: LD_VAR 0 1
2684: PUSH
2685: FOR_IN
2686: IFFALSE 2729
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
2688: LD_ADDR_VAR 0 5
2692: PUSH
2693: LD_VAR 0 5
2697: PPUSH
2698: LD_VAR 0 5
2702: PUSH
2703: LD_INT 1
2705: PLUS
2706: PPUSH
2707: LD_VAR 0 4
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: CALL_OW 259
2721: PPUSH
2722: CALL_OW 2
2726: ST_TO_ADDR
2727: GO 2685
2729: POP
2730: POP
// if not tmp then
2731: LD_VAR 0 5
2735: NOT
2736: IFFALSE 2740
// exit ;
2738: GO 2760
// result := SortListByListDesc ( units , tmp ) ;
2740: LD_ADDR_VAR 0 3
2744: PUSH
2745: LD_VAR 0 1
2749: PPUSH
2750: LD_VAR 0 5
2754: PPUSH
2755: CALL_OW 77
2759: ST_TO_ADDR
// end ;
2760: LD_VAR 0 3
2764: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2765: LD_INT 0
2767: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2768: LD_VAR 0 1
2772: PPUSH
2773: LD_VAR 0 2
2777: PPUSH
2778: LD_VAR 0 3
2782: PPUSH
2783: LD_VAR 0 4
2787: PPUSH
2788: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_VAR 0 2
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: CALL_OW 331
// end ;
2811: LD_VAR 0 5
2815: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2816: LD_INT 0
2818: PPUSH
// if not units then
2819: LD_VAR 0 1
2823: NOT
2824: IFFALSE 2828
// exit ;
2826: GO 2893
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) , menDialog ) then
2828: LD_VAR 0 1
2832: PPUSH
2833: LD_INT 26
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: PPUSH
2843: CALL_OW 72
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: CALL_OW 88
2857: NOT
2858: IFFALSE 2893
// Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2860: LD_VAR 0 1
2864: PPUSH
2865: LD_INT 26
2867: PUSH
2868: LD_INT 2
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PPUSH
2875: CALL_OW 72
2879: PUSH
2880: LD_INT 1
2882: ARRAY
2883: PPUSH
2884: LD_VAR 0 3
2888: PPUSH
2889: CALL_OW 88
// end ;
2893: LD_VAR 0 4
2897: RET
// export function SeeGroup ( side , group ) ; var i ; begin
2898: LD_INT 0
2900: PPUSH
2901: PPUSH
// if not group then
2902: LD_VAR 0 2
2906: NOT
2907: IFFALSE 2911
// exit ;
2909: GO 2956
// for i in group do
2911: LD_ADDR_VAR 0 4
2915: PUSH
2916: LD_VAR 0 2
2920: PUSH
2921: FOR_IN
2922: IFFALSE 2954
// if See ( side , i ) then
2924: LD_VAR 0 1
2928: PPUSH
2929: LD_VAR 0 4
2933: PPUSH
2934: CALL_OW 292
2938: IFFALSE 2952
// begin result := true ;
2940: LD_ADDR_VAR 0 3
2944: PUSH
2945: LD_INT 1
2947: ST_TO_ADDR
// exit ;
2948: POP
2949: POP
2950: GO 2956
// end ;
2952: GO 2921
2954: POP
2955: POP
// end ; end_of_file
2956: LD_VAR 0 3
2960: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
2961: LD_INT 0
2963: PPUSH
2964: PPUSH
// uc_side := 2 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 2
2972: ST_TO_ADDR
// uc_nation := 2 ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 2
2980: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2981: LD_ADDR_EXP 14
2985: PUSH
2986: LD_STRING Heike
2988: PPUSH
2989: LD_EXP 1
2993: NOT
2994: PPUSH
2995: LD_EXP 2
2999: PPUSH
3000: CALL 285 0 3
3004: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
3005: LD_ADDR_EXP 17
3009: PUSH
3010: LD_STRING Ibrahim
3012: PPUSH
3013: LD_EXP 1
3017: NOT
3018: PPUSH
3019: LD_EXP 2
3023: PPUSH
3024: CALL 285 0 3
3028: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
3029: LD_ADDR_EXP 15
3033: PUSH
3034: LD_STRING Givi
3036: PPUSH
3037: LD_EXP 1
3041: NOT
3042: PPUSH
3043: LD_EXP 2
3047: PPUSH
3048: CALL 285 0 3
3052: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
3053: LD_ADDR_EXP 18
3057: PUSH
3058: LD_STRING Kamil
3060: PPUSH
3061: LD_EXP 1
3065: NOT
3066: PPUSH
3067: LD_EXP 2
3071: PPUSH
3072: CALL 285 0 3
3076: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
3077: LD_ADDR_EXP 19
3081: PUSH
3082: LD_STRING Kaia
3084: PPUSH
3085: LD_EXP 1
3089: NOT
3090: PPUSH
3091: LD_EXP 2
3095: PPUSH
3096: CALL 285 0 3
3100: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
3101: LD_ADDR_EXP 20
3105: PUSH
3106: LD_STRING Sophia
3108: PPUSH
3109: LD_EXP 1
3113: NOT
3114: PPUSH
3115: LD_EXP 2
3119: PPUSH
3120: CALL 285 0 3
3124: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
3125: LD_ADDR_EXP 21
3129: PUSH
3130: LD_STRING Markov
3132: PPUSH
3133: LD_EXP 1
3137: NOT
3138: PPUSH
3139: LD_EXP 2
3143: PPUSH
3144: CALL 285 0 3
3148: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
3149: LD_ADDR_EXP 25
3153: PUSH
3154: LD_STRING Aviradze
3156: PPUSH
3157: LD_EXP 1
3161: NOT
3162: PPUSH
3163: LD_EXP 2
3167: PPUSH
3168: CALL 285 0 3
3172: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
3173: LD_ADDR_EXP 24
3177: PUSH
3178: LD_STRING Kurt
3180: PPUSH
3181: LD_EXP 1
3185: NOT
3186: PPUSH
3187: LD_EXP 2
3191: PPUSH
3192: CALL 285 0 3
3196: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
3197: LD_ADDR_EXP 16
3201: PUSH
3202: LD_STRING Mike
3204: PPUSH
3205: LD_EXP 1
3209: NOT
3210: PPUSH
3211: LD_EXP 2
3215: PPUSH
3216: CALL 285 0 3
3220: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
3221: LD_ADDR_EXP 23
3225: PUSH
3226: LD_STRING Olaf
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: LD_STRING 
3234: PPUSH
3235: CALL 285 0 3
3239: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
3240: LD_ADDR_EXP 26
3244: PUSH
3245: LD_STRING 04_2_others
3247: PPUSH
3248: CALL_OW 31
3252: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
3253: LD_ADDR_EXP 28
3257: PUSH
3258: LD_STRING 04_2_apes
3260: PPUSH
3261: CALL_OW 31
3265: ST_TO_ADDR
// if hasFlamethrower then
3266: LD_EXP 3
3270: IFFALSE 3501
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
3272: LD_INT 70
3274: PPUSH
3275: LD_INT 2
3277: PPUSH
3278: LD_INT 2
3280: PPUSH
3281: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
3285: LD_ADDR_EXP 27
3289: PUSH
3290: LD_INT 13
3292: PUSH
3293: LD_INT 1
3295: PUSH
3296: LD_INT 1
3298: PUSH
3299: LD_INT 27
3301: PUSH
3302: LD_INT 2
3304: PUSH
3305: LD_INT 1000
3307: PUSH
3308: LD_INT 0
3310: PUSH
3311: LD_INT 0
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 13
3329: PUSH
3330: LD_INT 1
3332: PUSH
3333: LD_INT 1
3335: PUSH
3336: LD_INT 25
3338: PUSH
3339: LD_INT 2
3341: PUSH
3342: LD_INT 1000
3344: PUSH
3345: LD_INT 0
3347: PUSH
3348: LD_INT 0
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 13
3366: PUSH
3367: LD_INT 1
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: LD_INT 26
3375: PUSH
3376: LD_INT 2
3378: PUSH
3379: LD_INT 1000
3381: PUSH
3382: LD_INT 0
3384: PUSH
3385: LD_INT 0
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: LD_INT 13
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: LD_INT 27
3412: PUSH
3413: LD_INT 2
3415: PUSH
3416: LD_INT 1000
3418: PUSH
3419: LD_INT 0
3421: PUSH
3422: LD_INT 0
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 13
3440: PUSH
3441: LD_INT 1
3443: PUSH
3444: LD_INT 1
3446: PUSH
3447: LD_INT 32
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: LD_INT 1000
3455: PUSH
3456: LD_INT 0
3458: PUSH
3459: LD_INT 60
3461: PUSH
3462: LD_INT 40
3464: PUSH
3465: LD_INT 20
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_OWVAR 67
3477: ARRAY
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: ST_TO_ADDR
// end else
3499: GO 3715
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
3501: LD_ADDR_EXP 27
3505: PUSH
3506: LD_INT 13
3508: PUSH
3509: LD_INT 1
3511: PUSH
3512: LD_INT 1
3514: PUSH
3515: LD_INT 25
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: LD_INT 1000
3523: PUSH
3524: LD_INT 0
3526: PUSH
3527: LD_INT 0
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 13
3545: PUSH
3546: LD_INT 1
3548: PUSH
3549: LD_INT 1
3551: PUSH
3552: LD_INT 27
3554: PUSH
3555: LD_INT 2
3557: PUSH
3558: LD_INT 1000
3560: PUSH
3561: LD_INT 0
3563: PUSH
3564: LD_INT 0
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 13
3582: PUSH
3583: LD_INT 1
3585: PUSH
3586: LD_INT 1
3588: PUSH
3589: LD_INT 24
3591: PUSH
3592: LD_INT 2
3594: PUSH
3595: LD_INT 1000
3597: PUSH
3598: LD_INT 0
3600: PUSH
3601: LD_INT 0
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 13
3619: PUSH
3620: LD_INT 1
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 27
3628: PUSH
3629: LD_INT 2
3631: PUSH
3632: LD_INT 1000
3634: PUSH
3635: LD_INT 0
3637: PUSH
3638: LD_INT 0
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 13
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: LD_INT 1
3662: PUSH
3663: LD_INT 32
3665: PUSH
3666: LD_INT 2
3668: PUSH
3669: LD_INT 1000
3671: PUSH
3672: LD_INT 0
3674: PUSH
3675: LD_INT 50
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 20
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: PUSH
3689: LD_OWVAR 67
3693: ARRAY
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// end ; uc_side := 5 ;
3715: LD_ADDR_OWVAR 20
3719: PUSH
3720: LD_INT 5
3722: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
3723: LD_ADDR_EXP 22
3727: PUSH
3728: LD_STRING Abdul
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: LD_STRING 
3736: PPUSH
3737: CALL 285 0 3
3741: ST_TO_ADDR
// end ;
3742: LD_VAR 0 1
3746: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
3747: LD_INT 0
3749: PPUSH
3750: PPUSH
3751: PPUSH
3752: PPUSH
3753: PPUSH
// pfx := 04_1 ;
3754: LD_ADDR_VAR 0 2
3758: PUSH
3759: LD_STRING 04_1
3761: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3762: LD_INT 35
3764: PPUSH
3765: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
3769: LD_INT 3
3771: PPUSH
3772: LD_INT 2
3774: PPUSH
3775: CALL_OW 428
3779: NOT
3780: IFFALSE 3762
// tmp := [ ] ;
3782: LD_ADDR_VAR 0 4
3786: PUSH
3787: EMPTY
3788: ST_TO_ADDR
// uc_side := 5 ;
3789: LD_ADDR_OWVAR 20
3793: PUSH
3794: LD_INT 5
3796: ST_TO_ADDR
// uc_nation := 2 ;
3797: LD_ADDR_OWVAR 21
3801: PUSH
3802: LD_INT 2
3804: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
3805: LD_ADDR_EXP 25
3809: PUSH
3810: LD_STRING Aviradze_L
3812: PPUSH
3813: LD_EXP 1
3817: NOT
3818: PPUSH
3819: LD_VAR 0 2
3823: PPUSH
3824: CALL 285 0 3
3828: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
3829: LD_EXP 25
3833: PPUSH
3834: LD_INT 2
3836: PPUSH
3837: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
3841: LD_EXP 25
3845: PPUSH
3846: LD_INT 14
3848: PPUSH
3849: LD_INT 0
3851: PPUSH
3852: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
3856: LD_EXP 25
3860: PPUSH
3861: LD_INT 8
3863: PPUSH
3864: LD_INT 6
3866: PPUSH
3867: CALL_OW 111
// AddComHold ( Aviradze ) ;
3871: LD_EXP 25
3875: PPUSH
3876: CALL_OW 200
// tmp := [ Aviradze ] ;
3880: LD_ADDR_VAR 0 4
3884: PUSH
3885: LD_EXP 25
3889: PUSH
3890: EMPTY
3891: LIST
3892: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3893: LD_INT 70
3895: PPUSH
3896: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
3900: LD_STRING Ibrahim_L
3902: PPUSH
3903: LD_EXP 1
3907: NOT
3908: PPUSH
3909: LD_VAR 0 2
3913: PPUSH
3914: CALL 285 0 3
3918: IFFALSE 4018
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
3920: LD_ADDR_EXP 17
3924: PUSH
3925: LD_STRING Ibrahim_L
3927: PPUSH
3928: LD_EXP 1
3932: NOT
3933: PPUSH
3934: LD_VAR 0 2
3938: PPUSH
3939: CALL 285 0 3
3943: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
3944: LD_EXP 17
3948: PPUSH
3949: LD_INT 2
3951: PPUSH
3952: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
3956: LD_EXP 17
3960: PPUSH
3961: LD_INT 14
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
3971: LD_EXP 17
3975: PPUSH
3976: LD_INT 8
3978: PPUSH
3979: LD_INT 7
3981: PPUSH
3982: CALL_OW 111
// AddComHold ( Ibrahim ) ;
3986: LD_EXP 17
3990: PPUSH
3991: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
3995: LD_ADDR_VAR 0 4
3999: PUSH
4000: LD_VAR 0 4
4004: PUSH
4005: LD_EXP 17
4009: ADD
4010: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4011: LD_INT 70
4013: PPUSH
4014: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
4018: LD_STRING Kaia_L
4020: PPUSH
4021: LD_EXP 1
4025: NOT
4026: PPUSH
4027: LD_VAR 0 2
4031: PPUSH
4032: CALL 285 0 3
4036: IFFALSE 4136
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
4038: LD_ADDR_EXP 19
4042: PUSH
4043: LD_STRING Kaia_L
4045: PPUSH
4046: LD_EXP 1
4050: NOT
4051: PPUSH
4052: LD_VAR 0 2
4056: PPUSH
4057: CALL 285 0 3
4061: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
4062: LD_EXP 19
4066: PPUSH
4067: LD_INT 2
4069: PPUSH
4070: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
4074: LD_EXP 19
4078: PPUSH
4079: LD_INT 14
4081: PPUSH
4082: LD_INT 0
4084: PPUSH
4085: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
4089: LD_EXP 19
4093: PPUSH
4094: LD_INT 8
4096: PPUSH
4097: LD_INT 7
4099: PPUSH
4100: CALL_OW 111
// AddComHold ( Kaia ) ;
4104: LD_EXP 19
4108: PPUSH
4109: CALL_OW 200
// tmp := tmp ^ Kaia ;
4113: LD_ADDR_VAR 0 4
4117: PUSH
4118: LD_VAR 0 4
4122: PUSH
4123: LD_EXP 19
4127: ADD
4128: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4129: LD_INT 70
4131: PPUSH
4132: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
4136: LD_STRING Kamil_L
4138: PPUSH
4139: LD_EXP 1
4143: NOT
4144: PPUSH
4145: LD_VAR 0 2
4149: PPUSH
4150: CALL 285 0 3
4154: IFFALSE 4254
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
4156: LD_ADDR_EXP 18
4160: PUSH
4161: LD_STRING Kamil_L
4163: PPUSH
4164: LD_EXP 1
4168: NOT
4169: PPUSH
4170: LD_VAR 0 2
4174: PPUSH
4175: CALL 285 0 3
4179: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
4180: LD_EXP 18
4184: PPUSH
4185: LD_INT 2
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
4192: LD_EXP 18
4196: PPUSH
4197: LD_INT 14
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
4207: LD_EXP 18
4211: PPUSH
4212: LD_INT 8
4214: PPUSH
4215: LD_INT 7
4217: PPUSH
4218: CALL_OW 111
// AddComHold ( Kamil ) ;
4222: LD_EXP 18
4226: PPUSH
4227: CALL_OW 200
// tmp := tmp ^ Kamil ;
4231: LD_ADDR_VAR 0 4
4235: PUSH
4236: LD_VAR 0 4
4240: PUSH
4241: LD_EXP 18
4245: ADD
4246: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4247: LD_INT 70
4249: PPUSH
4250: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
4254: LD_STRING Sophia_L
4256: PPUSH
4257: LD_EXP 1
4261: NOT
4262: PPUSH
4263: LD_VAR 0 2
4267: PPUSH
4268: CALL 285 0 3
4272: IFFALSE 4372
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
4274: LD_ADDR_EXP 20
4278: PUSH
4279: LD_STRING Sophia_L
4281: PPUSH
4282: LD_EXP 1
4286: NOT
4287: PPUSH
4288: LD_VAR 0 2
4292: PPUSH
4293: CALL 285 0 3
4297: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
4298: LD_EXP 20
4302: PPUSH
4303: LD_INT 2
4305: PPUSH
4306: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
4310: LD_EXP 20
4314: PPUSH
4315: LD_INT 14
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
4325: LD_EXP 20
4329: PPUSH
4330: LD_INT 9
4332: PPUSH
4333: LD_INT 6
4335: PPUSH
4336: CALL_OW 111
// AddComHold ( Sophia ) ;
4340: LD_EXP 20
4344: PPUSH
4345: CALL_OW 200
// tmp := tmp ^ Sophia ;
4349: LD_ADDR_VAR 0 4
4353: PUSH
4354: LD_VAR 0 4
4358: PUSH
4359: LD_EXP 20
4363: ADD
4364: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4365: LD_INT 70
4367: PPUSH
4368: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
4372: LD_ADDR_VAR 0 5
4376: PUSH
4377: LD_STRING 04_1_others_L
4379: PPUSH
4380: CALL_OW 31
4384: ST_TO_ADDR
// if tmp2 then
4385: LD_VAR 0 5
4389: IFFALSE 4457
// for i in tmp2 do
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_VAR 0 5
4400: PUSH
4401: FOR_IN
4402: IFFALSE 4455
// begin SetDir ( i , 2 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 2
4411: PPUSH
4412: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 14
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 49
// ComMoveXY ( i , 17 , 14 ) ;
4431: LD_VAR 0 3
4435: PPUSH
4436: LD_INT 17
4438: PPUSH
4439: LD_INT 14
4441: PPUSH
4442: CALL_OW 111
// wait ( 0 0$2 ) ;
4446: LD_INT 70
4448: PPUSH
4449: CALL_OW 67
// end ;
4453: GO 4401
4455: POP
4456: POP
// for i in tmp union tmp2 do
4457: LD_ADDR_VAR 0 3
4461: PUSH
4462: LD_VAR 0 4
4466: PUSH
4467: LD_VAR 0 5
4471: UNION
4472: PUSH
4473: FOR_IN
4474: IFFALSE 4504
// begin SetSide ( i , 2 ) ;
4476: LD_VAR 0 3
4480: PPUSH
4481: LD_INT 2
4483: PPUSH
4484: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
4488: LD_VAR 0 3
4492: PPUSH
4493: LD_EXP 14
4497: PPUSH
4498: CALL_OW 112
// end ;
4502: GO 4473
4504: POP
4505: POP
// end ; end_of_file
4506: LD_VAR 0 1
4510: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup ; export function PrepareRussian ; var i , un ; begin
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
// uc_side := 3 ;
4516: LD_ADDR_OWVAR 20
4520: PUSH
4521: LD_INT 3
4523: ST_TO_ADDR
// uc_nation := 3 ;
4524: LD_ADDR_OWVAR 21
4528: PUSH
4529: LD_INT 3
4531: ST_TO_ADDR
// crossRoadGuard := [ ] ;
4532: LD_ADDR_EXP 29
4536: PUSH
4537: EMPTY
4538: ST_TO_ADDR
// oilBaseGuard := [ ] ;
4539: LD_ADDR_EXP 30
4543: PUSH
4544: EMPTY
4545: ST_TO_ADDR
// for i := 1 to 2 do
4546: LD_ADDR_VAR 0 2
4550: PUSH
4551: DOUBLE
4552: LD_INT 1
4554: DEC
4555: ST_TO_ADDR
4556: LD_INT 2
4558: PUSH
4559: FOR_TO
4560: IFFALSE 4695
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4562: LD_INT 0
4564: PPUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_INT 3
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: LD_INT 5
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_OWVAR 67
4586: ARRAY
4587: PPUSH
4588: CALL_OW 380
// un := CreateHuman ;
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: CALL_OW 44
4601: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
4602: LD_ADDR_EXP 29
4606: PUSH
4607: LD_EXP 29
4611: PPUSH
4612: LD_EXP 29
4616: PUSH
4617: LD_INT 1
4619: PLUS
4620: PPUSH
4621: LD_VAR 0 3
4625: PPUSH
4626: CALL_OW 1
4630: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_INT 100
4638: PPUSH
4639: LD_INT 63
4641: PPUSH
4642: LD_INT 3
4644: PPUSH
4645: LD_INT 0
4647: PPUSH
4648: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
4652: LD_VAR 0 3
4656: PPUSH
4657: LD_INT 97
4659: PPUSH
4660: LD_INT 64
4662: PPUSH
4663: CALL_OW 428
4667: PUSH
4668: LD_INT 98
4670: PPUSH
4671: LD_INT 58
4673: PPUSH
4674: CALL_OW 428
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: LD_VAR 0 2
4687: ARRAY
4688: PPUSH
4689: CALL_OW 120
// end ;
4693: GO 4559
4695: POP
4696: POP
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
4697: LD_INT 10
4699: PPUSH
4700: CALL_OW 274
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: LD_INT 300
4710: PPUSH
4711: CALL_OW 277
// for i := 1 to 2 do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_INT 2
4727: PUSH
4728: FOR_TO
4729: IFFALSE 4843
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4731: LD_INT 0
4733: PPUSH
4734: LD_INT 1
4736: PPUSH
4737: LD_INT 3
4739: PUSH
4740: LD_INT 4
4742: PUSH
4743: LD_INT 5
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: PUSH
4751: LD_OWVAR 67
4755: ARRAY
4756: PPUSH
4757: CALL_OW 380
// un := CreateHuman ;
4761: LD_ADDR_VAR 0 3
4765: PUSH
4766: CALL_OW 44
4770: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
4771: LD_ADDR_EXP 30
4775: PUSH
4776: LD_EXP 30
4780: PPUSH
4781: LD_EXP 30
4785: PUSH
4786: LD_INT 1
4788: PLUS
4789: PPUSH
4790: LD_VAR 0 3
4794: PPUSH
4795: CALL_OW 1
4799: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: LD_INT 198
4807: PPUSH
4808: LD_INT 106
4810: PPUSH
4811: CALL_OW 428
4815: PUSH
4816: LD_INT 205
4818: PPUSH
4819: LD_INT 114
4821: PPUSH
4822: CALL_OW 428
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_VAR 0 2
4835: ARRAY
4836: PPUSH
4837: CALL_OW 52
// end ;
4841: GO 4728
4843: POP
4844: POP
// for i := 1 to 2 do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: DOUBLE
4851: LD_INT 1
4853: DEC
4854: ST_TO_ADDR
4855: LD_INT 2
4857: PUSH
4858: FOR_TO
4859: IFFALSE 4936
// begin PrepareHuman ( false , 2 , 3 ) ;
4861: LD_INT 0
4863: PPUSH
4864: LD_INT 2
4866: PPUSH
4867: LD_INT 3
4869: PPUSH
4870: CALL_OW 380
// un := CreateHuman ;
4874: LD_ADDR_VAR 0 3
4878: PUSH
4879: CALL_OW 44
4883: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
4884: LD_ADDR_EXP 30
4888: PUSH
4889: LD_EXP 30
4893: PPUSH
4894: LD_EXP 30
4898: PUSH
4899: LD_INT 1
4901: PLUS
4902: PPUSH
4903: LD_VAR 0 3
4907: PPUSH
4908: CALL_OW 1
4912: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
4913: LD_VAR 0 3
4917: PPUSH
4918: LD_INT 204
4920: PPUSH
4921: LD_INT 108
4923: PPUSH
4924: LD_INT 2
4926: PPUSH
4927: LD_INT 0
4929: PPUSH
4930: CALL_OW 50
// end ;
4934: GO 4858
4936: POP
4937: POP
// for i := 1 to [ 4 , 6 , 7 ] [ Difficulty ] do
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 4
4950: PUSH
4951: LD_INT 6
4953: PUSH
4954: LD_INT 7
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: LIST
4961: PUSH
4962: LD_OWVAR 67
4966: ARRAY
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5097
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4971: LD_INT 0
4973: PPUSH
4974: LD_INT 1
4976: PUSH
4977: LD_INT 1
4979: PUSH
4980: LD_INT 2
4982: PUSH
4983: LD_INT 4
4985: PUSH
4986: LD_INT 1
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 1
4998: PPUSH
4999: LD_INT 5
5001: PPUSH
5002: CALL_OW 12
5006: ARRAY
5007: PPUSH
5008: LD_INT 3
5010: PUSH
5011: LD_INT 4
5013: PUSH
5014: LD_INT 5
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: LIST
5021: PUSH
5022: LD_OWVAR 67
5026: ARRAY
5027: PPUSH
5028: CALL_OW 380
// un := CreateHuman ;
5032: LD_ADDR_VAR 0 3
5036: PUSH
5037: CALL_OW 44
5041: ST_TO_ADDR
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
5042: LD_ADDR_EXP 31
5046: PUSH
5047: LD_EXP 31
5051: PPUSH
5052: LD_EXP 31
5056: PUSH
5057: LD_INT 1
5059: PLUS
5060: PPUSH
5061: LD_VAR 0 3
5065: PPUSH
5066: CALL_OW 1
5070: ST_TO_ADDR
// PlaceUnitArea ( un , northGroupArea , false ) ;
5071: LD_VAR 0 3
5075: PPUSH
5076: LD_INT 10
5078: PPUSH
5079: LD_INT 0
5081: PPUSH
5082: CALL_OW 49
// ComHold ( un ) ;
5086: LD_VAR 0 3
5090: PPUSH
5091: CALL_OW 140
// end ;
5095: GO 4968
5097: POP
5098: POP
// end ;
5099: LD_VAR 0 1
5103: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
5104: LD_INT 0
5106: PPUSH
5107: PPUSH
5108: PPUSH
// uc_side := 3 ;
5109: LD_ADDR_OWVAR 20
5113: PUSH
5114: LD_INT 3
5116: ST_TO_ADDR
// uc_nation := 3 ;
5117: LD_ADDR_OWVAR 21
5121: PUSH
5122: LD_INT 3
5124: ST_TO_ADDR
// for i := 1 to 6 do
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: DOUBLE
5131: LD_INT 1
5133: DEC
5134: ST_TO_ADDR
5135: LD_INT 6
5137: PUSH
5138: FOR_TO
5139: IFFALSE 5218
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
5141: LD_INT 0
5143: PPUSH
5144: LD_INT 1
5146: PUSH
5147: LD_INT 4
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PUSH
5154: LD_INT 1
5156: PPUSH
5157: LD_INT 2
5159: PPUSH
5160: CALL_OW 12
5164: ARRAY
5165: PPUSH
5166: LD_INT 0
5168: PPUSH
5169: CALL_OW 380
// un := CreateHuman ;
5173: LD_ADDR_VAR 0 3
5177: PUSH
5178: CALL_OW 44
5182: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
5183: LD_VAR 0 3
5187: PPUSH
5188: LD_INT 54
5190: PPUSH
5191: LD_INT 88
5193: PPUSH
5194: LD_INT 12
5196: PPUSH
5197: LD_INT 0
5199: PPUSH
5200: CALL_OW 50
// SetLives ( un , 1 ) ;
5204: LD_VAR 0 3
5208: PPUSH
5209: LD_INT 1
5211: PPUSH
5212: CALL_OW 234
// end ;
5216: GO 5138
5218: POP
5219: POP
// uc_side := 3 ;
5220: LD_ADDR_OWVAR 20
5224: PUSH
5225: LD_INT 3
5227: ST_TO_ADDR
// uc_nation := 0 ;
5228: LD_ADDR_OWVAR 21
5232: PUSH
5233: LD_INT 0
5235: ST_TO_ADDR
// apeSoldGroup := [ ] ;
5236: LD_ADDR_EXP 33
5240: PUSH
5241: EMPTY
5242: ST_TO_ADDR
// apeEngGroup := [ ] ;
5243: LD_ADDR_EXP 34
5247: PUSH
5248: EMPTY
5249: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5250: LD_ADDR_VAR 0 2
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 4
5262: PUSH
5263: LD_INT 5
5265: PUSH
5266: LD_INT 6
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: PUSH
5274: LD_OWVAR 67
5278: ARRAY
5279: PUSH
5280: FOR_TO
5281: IFFALSE 5395
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5283: LD_INT 0
5285: PPUSH
5286: LD_INT 15
5288: PPUSH
5289: LD_INT 3
5291: PUSH
5292: LD_INT 4
5294: PUSH
5295: LD_INT 5
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: LD_OWVAR 67
5307: ARRAY
5308: PPUSH
5309: CALL_OW 380
// un := CreateHuman ;
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: CALL_OW 44
5322: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
5323: LD_ADDR_EXP 33
5327: PUSH
5328: LD_EXP 33
5332: PPUSH
5333: LD_EXP 33
5337: PUSH
5338: LD_INT 1
5340: PLUS
5341: PPUSH
5342: LD_VAR 0 3
5346: PPUSH
5347: CALL_OW 1
5351: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5352: LD_VAR 0 3
5356: PPUSH
5357: LD_INT 0
5359: PPUSH
5360: LD_INT 5
5362: PPUSH
5363: CALL_OW 12
5367: PPUSH
5368: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
5372: LD_VAR 0 3
5376: PPUSH
5377: LD_INT 56
5379: PPUSH
5380: LD_INT 82
5382: PPUSH
5383: LD_INT 6
5385: PPUSH
5386: LD_INT 0
5388: PPUSH
5389: CALL_OW 50
// end ;
5393: GO 5280
5395: POP
5396: POP
// for i := 1 to 2 do
5397: LD_ADDR_VAR 0 2
5401: PUSH
5402: DOUBLE
5403: LD_INT 1
5405: DEC
5406: ST_TO_ADDR
5407: LD_INT 2
5409: PUSH
5410: FOR_TO
5411: IFFALSE 5487
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
5413: LD_INT 0
5415: PPUSH
5416: LD_INT 16
5418: PPUSH
5419: LD_INT 4
5421: PPUSH
5422: CALL_OW 380
// un := CreateHuman ;
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: CALL_OW 44
5435: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
5436: LD_ADDR_EXP 34
5440: PUSH
5441: LD_EXP 34
5445: PPUSH
5446: LD_EXP 34
5450: PUSH
5451: LD_INT 1
5453: PLUS
5454: PPUSH
5455: LD_VAR 0 3
5459: PPUSH
5460: CALL_OW 1
5464: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
5465: LD_VAR 0 3
5469: PPUSH
5470: LD_INT 51
5472: PPUSH
5473: LD_INT 77
5475: PPUSH
5476: CALL_OW 428
5480: PPUSH
5481: CALL_OW 52
// end ;
5485: GO 5410
5487: POP
5488: POP
// end ;
5489: LD_VAR 0 1
5493: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
5494: LD_EXP 33
5498: PPUSH
5499: LD_INT 3
5501: PUSH
5502: LD_INT 24
5504: PUSH
5505: LD_INT 600
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 3
5518: PUSH
5519: LD_INT 54
5521: PUSH
5522: EMPTY
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 72
5537: PUSH
5538: LD_INT 66
5540: PPUSH
5541: LD_INT 89
5543: PPUSH
5544: CALL_OW 428
5548: PPUSH
5549: CALL_OW 302
5553: AND
5554: IFFALSE 5639
5556: GO 5558
5558: DISABLE
5559: LD_INT 0
5561: PPUSH
// begin enable ;
5562: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
5563: LD_ADDR_VAR 0 1
5567: PUSH
5568: LD_EXP 33
5572: PPUSH
5573: LD_INT 3
5575: PUSH
5576: LD_INT 24
5578: PUSH
5579: LD_INT 600
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: LD_INT 3
5592: PUSH
5593: LD_INT 54
5595: PUSH
5596: EMPTY
5597: LIST
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 72
5611: PUSH
5612: FOR_IN
5613: IFFALSE 5637
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_INT 66
5622: PPUSH
5623: LD_INT 89
5625: PPUSH
5626: CALL_OW 428
5630: PPUSH
5631: CALL_OW 120
5635: GO 5612
5637: POP
5638: POP
// end ;
5639: PPOPN 1
5641: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
5642: LD_INT 22
5644: PUSH
5645: LD_INT 2
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: LD_INT 92
5654: PUSH
5655: LD_INT 54
5657: PUSH
5658: LD_INT 77
5660: PUSH
5661: LD_INT 8
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PPUSH
5674: CALL_OW 69
5678: IFFALSE 5742
5680: GO 5682
5682: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
5683: LD_EXP 34
5687: PPUSH
5688: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
5692: LD_EXP 34
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_INT 2
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 92
5709: PUSH
5710: LD_INT 54
5712: PUSH
5713: LD_INT 77
5715: PUSH
5716: LD_INT 8
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 69
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 175
// end ; end_of_file
5742: END
// on UnitDestroyed ( un ) do begin if un = Heike then
5743: LD_VAR 0 1
5747: PUSH
5748: LD_EXP 14
5752: EQUAL
5753: IFFALSE 5762
// YouLost ( Heike ) ;
5755: LD_STRING Heike
5757: PPUSH
5758: CALL_OW 104
// if un in apeSoldGroup then
5762: LD_VAR 0 1
5766: PUSH
5767: LD_EXP 33
5771: IN
5772: IFFALSE 5790
// apeSoldGroup := apeSoldGroup diff un ;
5774: LD_ADDR_EXP 33
5778: PUSH
5779: LD_EXP 33
5783: PUSH
5784: LD_VAR 0 1
5788: DIFF
5789: ST_TO_ADDR
// if un in apeEngGroup then
5790: LD_VAR 0 1
5794: PUSH
5795: LD_EXP 34
5799: IN
5800: IFFALSE 5818
// apeEngGroup := apeEngGroup diff un ;
5802: LD_ADDR_EXP 34
5806: PUSH
5807: LD_EXP 34
5811: PUSH
5812: LD_VAR 0 1
5816: DIFF
5817: ST_TO_ADDR
// if un in oilBaseGuard then
5818: LD_VAR 0 1
5822: PUSH
5823: LD_EXP 30
5827: IN
5828: IFFALSE 5846
// oilBaseGuard := oilBaseGuard diff un ;
5830: LD_ADDR_EXP 30
5834: PUSH
5835: LD_EXP 30
5839: PUSH
5840: LD_VAR 0 1
5844: DIFF
5845: ST_TO_ADDR
// if un in ruNorthGroup then
5846: LD_VAR 0 1
5850: PUSH
5851: LD_EXP 31
5855: IN
5856: IFFALSE 5874
// ruNorthGroup := ruNorthGroup diff un ;
5858: LD_ADDR_EXP 31
5862: PUSH
5863: LD_EXP 31
5867: PUSH
5868: LD_VAR 0 1
5872: DIFF
5873: ST_TO_ADDR
// if un in ruSouthGroup then
5874: LD_VAR 0 1
5878: PUSH
5879: LD_EXP 32
5883: IN
5884: IFFALSE 5902
// ruSouthGroup := ruSouthGroup diff un ;
5886: LD_ADDR_EXP 32
5890: PUSH
5891: LD_EXP 32
5895: PUSH
5896: LD_VAR 0 1
5900: DIFF
5901: ST_TO_ADDR
// end ; end_of_file
5902: PPOPN 1
5904: END
// export function Action ; var i , un , veh , tmp ; begin
5905: LD_INT 0
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
5911: PPUSH
// InGameOn ;
5912: CALL_OW 8
// music_nat := 2 ;
5916: LD_ADDR_OWVAR 71
5920: PUSH
5921: LD_INT 2
5923: ST_TO_ADDR
// music_class := 0 ;
5924: LD_ADDR_OWVAR 72
5928: PUSH
5929: LD_INT 0
5931: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
5932: LD_INT 7
5934: PPUSH
5935: LD_INT 6
5937: PPUSH
5938: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
5942: LD_INT 7
5944: PPUSH
5945: LD_INT 6
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 20
5953: NEG
5954: PPUSH
5955: CALL 2765 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
5959: LD_ADDR_VAR 0 5
5963: PUSH
5964: LD_EXP 14
5968: PUSH
5969: LD_EXP 15
5973: PUSH
5974: LD_EXP 16
5978: PUSH
5979: LD_EXP 17
5983: PUSH
5984: LD_EXP 18
5988: PUSH
5989: LD_EXP 19
5993: PUSH
5994: LD_EXP 20
5998: PUSH
5999: LD_EXP 21
6003: PUSH
6004: LD_EXP 25
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: ST_TO_ADDR
// tmp := tmp diff 0 ;
6020: LD_ADDR_VAR 0 5
6024: PUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_INT 0
6032: DIFF
6033: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
6034: LD_ADDR_VAR 0 5
6038: PUSH
6039: LD_VAR 0 5
6043: PPUSH
6044: LD_INT 3
6046: PPUSH
6047: CALL 2628 0 2
6051: ST_TO_ADDR
// for i in heikeVehicles do
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_EXP 27
6061: PUSH
6062: FOR_IN
6063: IFFALSE 6262
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6065: LD_INT 5
6067: PPUSH
6068: LD_VAR 0 2
6072: PUSH
6073: LD_INT 5
6075: ARRAY
6076: PPUSH
6077: LD_VAR 0 2
6081: PUSH
6082: LD_INT 1
6084: ARRAY
6085: PPUSH
6086: LD_VAR 0 2
6090: PUSH
6091: LD_INT 2
6093: ARRAY
6094: PPUSH
6095: LD_VAR 0 2
6099: PUSH
6100: LD_INT 3
6102: ARRAY
6103: PPUSH
6104: LD_VAR 0 2
6108: PUSH
6109: LD_INT 4
6111: ARRAY
6112: PPUSH
6113: LD_INT 34
6115: PPUSH
6116: CALL 348 0 7
// veh := CreateVehicle ;
6120: LD_ADDR_VAR 0 4
6124: PUSH
6125: CALL_OW 45
6129: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6130: LD_VAR 0 2
6134: PUSH
6135: LD_INT 4
6137: ARRAY
6138: PUSH
6139: LD_INT 51
6141: PUSH
6142: LD_INT 32
6144: PUSH
6145: LD_INT 12
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: IN
6153: IFFALSE 6233
// begin if i [ 7 ] [ 1 ] then
6155: LD_VAR 0 2
6159: PUSH
6160: LD_INT 7
6162: ARRAY
6163: PUSH
6164: LD_INT 1
6166: ARRAY
6167: IFFALSE 6194
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6169: LD_VAR 0 4
6173: PPUSH
6174: LD_INT 1
6176: PPUSH
6177: LD_VAR 0 2
6181: PUSH
6182: LD_INT 7
6184: ARRAY
6185: PUSH
6186: LD_INT 1
6188: ARRAY
6189: PPUSH
6190: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6194: LD_VAR 0 2
6198: PUSH
6199: LD_INT 7
6201: ARRAY
6202: PUSH
6203: LD_INT 2
6205: ARRAY
6206: IFFALSE 6233
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6208: LD_VAR 0 4
6212: PPUSH
6213: LD_INT 2
6215: PPUSH
6216: LD_VAR 0 2
6220: PUSH
6221: LD_INT 7
6223: ARRAY
6224: PUSH
6225: LD_INT 2
6227: ARRAY
6228: PPUSH
6229: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
6233: LD_VAR 0 4
6237: PPUSH
6238: LD_INT 2
6240: PPUSH
6241: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6245: LD_VAR 0 4
6249: PPUSH
6250: LD_INT 4
6252: PPUSH
6253: LD_INT 0
6255: PPUSH
6256: CALL_OW 49
// end ;
6260: GO 6062
6262: POP
6263: POP
// if tmp then
6264: LD_VAR 0 5
6268: IFFALSE 6323
// for i in tmp union heikeApes do
6270: LD_ADDR_VAR 0 2
6274: PUSH
6275: LD_VAR 0 5
6279: PUSH
6280: LD_EXP 28
6284: UNION
6285: PUSH
6286: FOR_IN
6287: IFFALSE 6321
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6289: LD_VAR 0 2
6293: PPUSH
6294: LD_INT 5
6296: PPUSH
6297: LD_INT 0
6299: PPUSH
6300: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
6304: LD_VAR 0 2
6308: PPUSH
6309: LD_INT 26
6311: PPUSH
6312: LD_INT 9
6314: PPUSH
6315: CALL_OW 118
// end ;
6319: GO 6286
6321: POP
6322: POP
// if heikeSecondSquad then
6323: LD_EXP 26
6327: IFFALSE 6376
// for i in heikeSecondSquad do
6329: LD_ADDR_VAR 0 2
6333: PUSH
6334: LD_EXP 26
6338: PUSH
6339: FOR_IN
6340: IFFALSE 6374
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
6342: LD_VAR 0 2
6346: PPUSH
6347: LD_INT 6
6349: PPUSH
6350: LD_INT 0
6352: PPUSH
6353: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
6357: LD_VAR 0 2
6361: PPUSH
6362: LD_INT 26
6364: PPUSH
6365: LD_INT 9
6367: PPUSH
6368: CALL_OW 118
// end ;
6372: GO 6339
6374: POP
6375: POP
// if heikeApes then
6376: LD_EXP 28
6380: IFFALSE 6423
// for i in heikeApes do
6382: LD_ADDR_VAR 0 2
6386: PUSH
6387: LD_EXP 28
6391: PUSH
6392: FOR_IN
6393: IFFALSE 6421
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
6395: LD_VAR 0 2
6399: PPUSH
6400: LD_INT 7
6402: PPUSH
6403: LD_INT 0
6405: PPUSH
6406: CALL_OW 49
// ComHold ( i ) ;
6410: LD_VAR 0 2
6414: PPUSH
6415: CALL_OW 140
// end ;
6419: GO 6392
6421: POP
6422: POP
// if Kurt then
6423: LD_EXP 24
6427: IFFALSE 6459
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
6429: LD_EXP 24
6433: PPUSH
6434: LD_INT 8
6436: PPUSH
6437: LD_INT 0
6439: PPUSH
6440: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
6444: LD_EXP 24
6448: PPUSH
6449: LD_INT 42
6451: PPUSH
6452: LD_INT 32
6454: PPUSH
6455: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
6459: LD_EXP 14
6463: PPUSH
6464: LD_STRING DH-Start-1
6466: PPUSH
6467: CALL_OW 88
// if Givi then
6471: LD_EXP 15
6475: IFFALSE 6738
// begin Say ( Givi , DG-Start-2-5 ) ;
6477: LD_EXP 15
6481: PPUSH
6482: LD_STRING DG-Start-2-5
6484: PPUSH
6485: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
6489: LD_EXP 14
6493: PPUSH
6494: LD_STRING DH-Start-3
6496: PPUSH
6497: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
6501: LD_EXP 14
6505: PPUSH
6506: LD_STRING DH-Start-4
6508: PPUSH
6509: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
6513: LD_EXP 15
6517: PPUSH
6518: LD_STRING DG-Start-5
6520: PPUSH
6521: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
6525: LD_EXP 14
6529: PPUSH
6530: LD_STRING DH-Start-6
6532: PPUSH
6533: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
6537: LD_EXP 15
6541: PPUSH
6542: LD_STRING DG-Start-7
6544: PPUSH
6545: CALL_OW 88
// if Mike then
6549: LD_EXP 16
6553: IFFALSE 6726
// begin Say ( Mike , DM-Start-8 ) ;
6555: LD_EXP 16
6559: PPUSH
6560: LD_STRING DM-Start-8
6562: PPUSH
6563: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
6567: LD_EXP 16
6571: PPUSH
6572: LD_STRING DM-Start-9
6574: PPUSH
6575: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
6579: LD_EXP 15
6583: PPUSH
6584: LD_STRING DG-Start-10
6586: PPUSH
6587: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
6591: LD_EXP 15
6595: PPUSH
6596: LD_STRING DG-Start-11
6598: PPUSH
6599: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
6603: LD_EXP 14
6607: PPUSH
6608: LD_STRING DH-Start-12
6610: PPUSH
6611: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
6615: LD_EXP 15
6619: PPUSH
6620: LD_STRING DG-Start-13
6622: PPUSH
6623: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
6627: LD_EXP 15
6631: PPUSH
6632: LD_STRING DG-Start-14
6634: PPUSH
6635: CALL_OW 88
// if Kaia then
6639: LD_EXP 19
6643: IFFALSE 6726
// begin Say ( Kaia , DK-Start-15 ) ;
6645: LD_EXP 19
6649: PPUSH
6650: LD_STRING DK-Start-15
6652: PPUSH
6653: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
6657: LD_EXP 19
6661: PPUSH
6662: LD_STRING DK-Start-16
6664: PPUSH
6665: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
6669: LD_EXP 19
6673: PPUSH
6674: LD_STRING DK-Start-17
6676: PPUSH
6677: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6681: LD_INT 10
6683: PPUSH
6684: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
6688: LD_EXP 15
6692: PPUSH
6693: LD_EXP 19
6697: PPUSH
6698: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
6702: LD_EXP 15
6706: PPUSH
6707: LD_STRING DG-Start-18
6709: PPUSH
6710: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
6714: LD_EXP 19
6718: PPUSH
6719: LD_STRING DK-Start-19
6721: PPUSH
6722: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
6726: LD_EXP 14
6730: PPUSH
6731: LD_STRING DH-Start-20
6733: PPUSH
6734: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
6745: LD_EXP 22
6749: PPUSH
6750: LD_STRING DShar-Start-21
6752: PPUSH
6753: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
6757: LD_EXP 14
6761: PPUSH
6762: LD_STRING DH-Start-22
6764: PPUSH
6765: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
6769: LD_EXP 22
6773: PPUSH
6774: LD_STRING DShar-Start-23
6776: PPUSH
6777: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
6781: LD_EXP 22
6785: PPUSH
6786: LD_STRING DShar-Start-24
6788: PPUSH
6789: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
6793: LD_EXP 22
6797: PPUSH
6798: LD_STRING DShar-Start-25
6800: PPUSH
6801: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
6805: LD_EXP 22
6809: PPUSH
6810: LD_STRING DShar-Start-26
6812: PPUSH
6813: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
6817: LD_EXP 14
6821: PPUSH
6822: LD_STRING DH-Start-27
6824: PPUSH
6825: CALL_OW 88
// if Kaia then
6829: LD_EXP 19
6833: IFFALSE 6873
// begin ComTurnUnit ( Heike , Kaia ) ;
6835: LD_EXP 14
6839: PPUSH
6840: LD_EXP 19
6844: PPUSH
6845: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
6849: LD_EXP 19
6853: PPUSH
6854: LD_STRING DK-Start-28
6856: PPUSH
6857: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
6861: LD_EXP 14
6865: PPUSH
6866: LD_STRING DH-Start-29
6868: PPUSH
6869: CALL_OW 88
// end ; if Givi then
6873: LD_EXP 15
6877: IFFALSE 7089
// begin ComTurnUnit ( Heike , Givi ) ;
6879: LD_EXP 14
6883: PPUSH
6884: LD_EXP 15
6888: PPUSH
6889: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
6893: LD_EXP 15
6897: PPUSH
6898: LD_EXP 14
6902: PPUSH
6903: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
6907: LD_EXP 14
6911: PPUSH
6912: LD_STRING DH-Start-30
6914: PPUSH
6915: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
6919: LD_EXP 14
6923: PPUSH
6924: LD_STRING DH-Start-31
6926: PPUSH
6927: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
6931: LD_EXP 15
6935: PPUSH
6936: LD_STRING DG-Start-32
6938: PPUSH
6939: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
6943: LD_EXP 14
6947: PPUSH
6948: LD_STRING DH-Start-33
6950: PPUSH
6951: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
6955: LD_EXP 15
6959: PPUSH
6960: LD_STRING DG-Start-34
6962: PPUSH
6963: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
6967: LD_EXP 15
6971: PPUSH
6972: LD_STRING DG-Start-35
6974: PPUSH
6975: CALL_OW 88
// if Kurt and not dialogue_skipped then
6979: LD_EXP 24
6983: PUSH
6984: LD_OWVAR 59
6988: NOT
6989: AND
6990: IFFALSE 7021
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
6992: LD_EXP 24
6996: PPUSH
6997: LD_INT 28
6999: PPUSH
7000: LD_INT 13
7002: PPUSH
7003: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
7007: LD_EXP 24
7011: PPUSH
7012: LD_EXP 14
7016: PPUSH
7017: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
7021: LD_EXP 15
7025: PPUSH
7026: LD_STRING DG-Start-36
7028: PPUSH
7029: CALL_OW 88
// if Kurt then
7033: LD_EXP 24
7037: IFFALSE 7089
// begin Say ( Kurt , DKs-Start-37 ) ;
7039: LD_EXP 24
7043: PPUSH
7044: LD_STRING DKs-Start-37
7046: PPUSH
7047: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
7051: LD_EXP 24
7055: PPUSH
7056: LD_STRING DKs-Start-38
7058: PPUSH
7059: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
7063: LD_EXP 14
7067: PPUSH
7068: LD_EXP 24
7072: PPUSH
7073: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
7077: LD_EXP 14
7081: PPUSH
7082: LD_STRING DH-Start-39
7084: PPUSH
7085: CALL_OW 88
// end ; end ; if HexInfo ( 44 , 25 ) then
7089: LD_INT 44
7091: PPUSH
7092: LD_INT 25
7094: PPUSH
7095: CALL_OW 428
7099: IFFALSE 7116
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
7101: LD_INT 44
7103: PPUSH
7104: LD_INT 25
7106: PPUSH
7107: CALL_OW 428
7111: PPUSH
7112: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
7116: LD_EXP 23
7120: PPUSH
7121: LD_INT 5
7123: PPUSH
7124: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
7128: LD_EXP 23
7132: PPUSH
7133: LD_INT 44
7135: PPUSH
7136: LD_INT 25
7138: PPUSH
7139: LD_INT 0
7141: PPUSH
7142: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
7146: LD_EXP 23
7150: PPUSH
7151: LD_INT 29
7153: PPUSH
7154: LD_INT 12
7156: PPUSH
7157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7161: LD_INT 35
7163: PPUSH
7164: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
7168: LD_OWVAR 59
7172: PUSH
7173: LD_EXP 14
7177: PPUSH
7178: LD_EXP 23
7182: PPUSH
7183: CALL_OW 296
7187: PUSH
7188: LD_INT 8
7190: LESS
7191: OR
7192: PUSH
7193: LD_EXP 23
7197: PPUSH
7198: LD_INT 26
7200: PPUSH
7201: LD_INT 9
7203: PPUSH
7204: CALL_OW 297
7208: PUSH
7209: LD_INT 6
7211: LESS
7212: OR
7213: IFFALSE 7161
// Say ( Olaf , DO-Scout-1 ) ;
7215: LD_EXP 23
7219: PPUSH
7220: LD_STRING DO-Scout-1
7222: PPUSH
7223: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
7227: LD_EXP 23
7231: PPUSH
7232: LD_EXP 14
7236: PPUSH
7237: CALL_OW 119
// for i in tmp union heikeSecondSquad do
7241: LD_ADDR_VAR 0 2
7245: PUSH
7246: LD_VAR 0 5
7250: PUSH
7251: LD_EXP 26
7255: UNION
7256: PUSH
7257: FOR_IN
7258: IFFALSE 7276
// ComTurnUnit ( i , Olaf ) ;
7260: LD_VAR 0 2
7264: PPUSH
7265: LD_EXP 23
7269: PPUSH
7270: CALL_OW 119
7274: GO 7257
7276: POP
7277: POP
// wait ( 0 0$0.3 ) ;
7278: LD_INT 10
7280: PPUSH
7281: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
7285: LD_EXP 14
7289: PPUSH
7290: LD_EXP 23
7294: PPUSH
7295: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
7299: LD_EXP 14
7303: PPUSH
7304: LD_EXP 23
7308: PPUSH
7309: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
7313: LD_EXP 14
7317: PPUSH
7318: LD_STRING DH-Scout-2
7320: PPUSH
7321: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
7325: LD_EXP 23
7329: PPUSH
7330: LD_STRING DO-Scout-3
7332: PPUSH
7333: CALL_OW 88
// if Mike and Givi then
7337: LD_EXP 16
7341: PUSH
7342: LD_EXP 15
7346: AND
7347: IFFALSE 7363
// Say ( Olaf , DO-Scout-4 ) else
7349: LD_EXP 23
7353: PPUSH
7354: LD_STRING DO-Scout-4
7356: PPUSH
7357: CALL_OW 88
7361: GO 7463
// begin if Mike then
7363: LD_EXP 16
7367: IFFALSE 7395
// begin Say ( Olaf , DO-Scout-a-4 ) ;
7369: LD_EXP 23
7373: PPUSH
7374: LD_STRING DO-Scout-a-4
7376: PPUSH
7377: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
7381: LD_EXP 14
7385: PPUSH
7386: LD_STRING DH-Scout-a-5
7388: PPUSH
7389: CALL_OW 88
// end else
7393: GO 7463
// if Givi then
7395: LD_EXP 15
7399: IFFALSE 7427
// begin Say ( Olaf , DO-Scout-b-4 ) ;
7401: LD_EXP 23
7405: PPUSH
7406: LD_STRING DO-Scout-b-4
7408: PPUSH
7409: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
7413: LD_EXP 14
7417: PPUSH
7418: LD_STRING DH-Scout-b-5
7420: PPUSH
7421: CALL_OW 88
// end else
7425: GO 7463
// begin Say ( Olaf , DO-Scout-f-4 ) ;
7427: LD_EXP 23
7431: PPUSH
7432: LD_STRING DO-Scout-f-4
7434: PPUSH
7435: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
7439: LD_EXP 14
7443: PPUSH
7444: LD_STRING DH-Scout-f-5
7446: PPUSH
7447: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
7451: LD_EXP 23
7455: PPUSH
7456: LD_STRING DO-Scout-f-6
7458: PPUSH
7459: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
7463: LD_EXP 14
7467: PPUSH
7468: LD_STRING DH-Scout-5
7470: PPUSH
7471: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DO-Scout-6
7482: PPUSH
7483: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
7487: LD_EXP 23
7491: PPUSH
7492: LD_STRING DO-Scout-7
7494: PPUSH
7495: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
7499: LD_EXP 14
7503: PPUSH
7504: LD_STRING DH-Scout-8
7506: PPUSH
7507: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
7511: LD_EXP 14
7515: PPUSH
7516: LD_STRING DH-Scout-9
7518: PPUSH
7519: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
7523: LD_EXP 23
7527: PPUSH
7528: LD_STRING DO-Scout-10
7530: PPUSH
7531: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
7535: LD_EXP 23
7539: PPUSH
7540: LD_STRING DO-Scout-12
7542: PPUSH
7543: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
7547: LD_EXP 23
7551: PPUSH
7552: LD_STRING DO-Scout-13
7554: PPUSH
7555: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
7559: LD_EXP 23
7563: PPUSH
7564: LD_STRING DO-Scout-14
7566: PPUSH
7567: CALL_OW 88
// if Givi then
7571: LD_EXP 15
7575: IFFALSE 7601
// begin Say ( Givi , DG-Scout-15 ) ;
7577: LD_EXP 15
7581: PPUSH
7582: LD_STRING DG-Scout-15
7584: PPUSH
7585: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
7589: LD_EXP 19
7593: PPUSH
7594: LD_STRING DK-Scout-16
7596: PPUSH
7597: CALL_OW 88
// end ; if not dialogue_skipped then
7601: LD_OWVAR 59
7605: NOT
7606: IFFALSE 7725
// begin async ;
7608: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
7609: LD_EXP 23
7613: PPUSH
7614: LD_STRING DO-Scout-17
7616: PPUSH
7617: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
7621: LD_INT 55
7623: PPUSH
7624: LD_INT 77
7626: PPUSH
7627: LD_INT 2
7629: PPUSH
7630: LD_INT 6
7632: NEG
7633: PPUSH
7634: CALL 2765 0 4
// wait ( 10 ) ;
7638: LD_INT 10
7640: PPUSH
7641: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
7645: LD_INT 55
7647: PPUSH
7648: LD_INT 77
7650: PPUSH
7651: CALL_OW 84
// wait ( 0 0$5 ) ;
7655: LD_INT 175
7657: PPUSH
7658: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
7662: LD_EXP 23
7666: PPUSH
7667: LD_STRING DO-Scout-18
7669: PPUSH
7670: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
7674: LD_INT 204
7676: PPUSH
7677: LD_INT 107
7679: PPUSH
7680: LD_INT 2
7682: PPUSH
7683: LD_INT 12
7685: NEG
7686: PPUSH
7687: CALL 2765 0 4
// wait ( 10 ) ;
7691: LD_INT 10
7693: PPUSH
7694: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
7698: LD_INT 204
7700: PPUSH
7701: LD_INT 107
7703: PPUSH
7704: CALL_OW 84
// wait ( 0 0$5 ) ;
7708: LD_INT 175
7710: PPUSH
7711: CALL_OW 67
// sync ;
7715: SYNC
// CenterNowOnUnits ( Heike ) ;
7716: LD_EXP 14
7720: PPUSH
7721: CALL_OW 87
// end ; Say ( Olaf , DO-Scout-19 ) ;
7725: LD_EXP 23
7729: PPUSH
7730: LD_STRING DO-Scout-19
7732: PPUSH
7733: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
7737: LD_EXP 23
7741: PPUSH
7742: LD_STRING DO-Scout-20
7744: PPUSH
7745: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
7749: LD_EXP 14
7753: PPUSH
7754: LD_STRING DH-Scout-21
7756: PPUSH
7757: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
7761: LD_EXP 14
7765: PPUSH
7766: LD_STRING DH-Scout-22
7768: PPUSH
7769: CALL_OW 88
// InGameOff ;
7773: CALL_OW 9
// if Givi then
7777: LD_EXP 15
7781: IFFALSE 7796
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
7783: LD_INT 13
7785: PPUSH
7786: LD_INT 2
7788: PPUSH
7789: LD_INT 1
7791: PPUSH
7792: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
7796: LD_STRING Road
7798: PPUSH
7799: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
7803: LD_ADDR_VAR 0 2
7807: PUSH
7808: LD_INT 22
7810: PUSH
7811: LD_INT 5
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 21
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 69
7836: PUSH
7837: FOR_IN
7838: IFFALSE 7854
// SetSide ( i , 2 ) ;
7840: LD_VAR 0 2
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 235
7852: GO 7837
7854: POP
7855: POP
// SaveForQuickRestart ;
7856: CALL_OW 22
// end ;
7860: LD_VAR 0 1
7864: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
7865: LD_INT 2
7867: PPUSH
7868: LD_INT 9
7870: PPUSH
7871: CALL_OW 294
7875: IFFALSE 8222
7877: GO 7879
7879: DISABLE
// begin DialogueOn ;
7880: CALL_OW 6
// ShowArea ( 2 , crossRoadArea ) ;
7884: LD_INT 2
7886: PPUSH
7887: LD_INT 9
7889: PPUSH
7890: CALL_OW 334
// CenterNowOnXY ( 111 , 72 ) ;
7894: LD_INT 111
7896: PPUSH
7897: LD_INT 72
7899: PPUSH
7900: CALL_OW 86
// if IsOk ( Kamil ) then
7904: LD_EXP 18
7908: PPUSH
7909: CALL_OW 302
7913: IFFALSE 8030
// begin Say ( Kamil , DKam-Cross-1 ) ;
7915: LD_EXP 18
7919: PPUSH
7920: LD_STRING DKam-Cross-1
7922: PPUSH
7923: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
7927: LD_EXP 18
7931: PPUSH
7932: LD_STRING DKam-Cross-2
7934: PPUSH
7935: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
7939: LD_EXP 18
7943: PPUSH
7944: LD_STRING DKam-Cross-3
7946: PPUSH
7947: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
7951: LD_EXP 18
7955: PPUSH
7956: LD_STRING DKam-Cross-4
7958: PPUSH
7959: CALL_OW 88
// if IsOk ( Ibrahim ) then
7963: LD_EXP 17
7967: PPUSH
7968: CALL_OW 302
7972: IFFALSE 8028
// begin if ibrahimJoinedIn04 then
7974: LD_EXP 4
7978: IFFALSE 7992
// Say ( Ibrahim , DI-Cross-b-5 ) ;
7980: LD_EXP 17
7984: PPUSH
7985: LD_STRING DI-Cross-b-5
7987: PPUSH
7988: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
7992: LD_EXP 17
7996: PPUSH
7997: LD_STRING DI-Cross-b-6
7999: PPUSH
8000: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
8004: LD_EXP 17
8008: PPUSH
8009: LD_STRING DI-Cross-b-7
8011: PPUSH
8012: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
8016: LD_EXP 18
8020: PPUSH
8021: LD_STRING DKam-Cross-8
8023: PPUSH
8024: CALL_OW 88
// end ; end else
8028: GO 8188
// if IsOk ( Sophia ) then
8030: LD_EXP 20
8034: PPUSH
8035: CALL_OW 302
8039: IFFALSE 8156
// begin Say ( Sophia , DS-Cross-1 ) ;
8041: LD_EXP 20
8045: PPUSH
8046: LD_STRING DS-Cross-1
8048: PPUSH
8049: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
8053: LD_EXP 20
8057: PPUSH
8058: LD_STRING DS-Cross-2
8060: PPUSH
8061: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
8065: LD_EXP 20
8069: PPUSH
8070: LD_STRING DS-Cross-3
8072: PPUSH
8073: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
8077: LD_EXP 20
8081: PPUSH
8082: LD_STRING DS-Cross-4
8084: PPUSH
8085: CALL_OW 88
// if IsOk ( Ibrahim ) then
8089: LD_EXP 17
8093: PPUSH
8094: CALL_OW 302
8098: IFFALSE 8154
// begin if ibrahimJoinedIn04 then
8100: LD_EXP 4
8104: IFFALSE 8118
// Say ( Ibrahim , DI-Cross-b-5 ) ;
8106: LD_EXP 17
8110: PPUSH
8111: LD_STRING DI-Cross-b-5
8113: PPUSH
8114: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
8118: LD_EXP 17
8122: PPUSH
8123: LD_STRING DI-Cross-b-6
8125: PPUSH
8126: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
8130: LD_EXP 17
8134: PPUSH
8135: LD_STRING DI-Cross-b-7
8137: PPUSH
8138: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
8142: LD_EXP 20
8146: PPUSH
8147: LD_STRING DS-Cross-8
8149: PPUSH
8150: CALL_OW 88
// end ; end else
8154: GO 8188
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
8156: LD_EXP 26
8160: PPUSH
8161: LD_INT 50
8163: PUSH
8164: EMPTY
8165: LIST
8166: PPUSH
8167: CALL_OW 72
8171: IFFALSE 8188
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
8173: LD_EXP 26
8177: PPUSH
8178: LD_STRING DArm-Cross-c-1
8180: PPUSH
8181: LD_STRING DArf-Cross-c-1
8183: PPUSH
8184: CALL 2816 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
8188: LD_EXP 46
8192: PPUSH
8193: LD_INT 2
8195: PPUSH
8196: LD_INT 1
8198: PPUSH
8199: CALL_OW 322
// DialogueOff ;
8203: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
8207: LD_STRING Crane
8209: PPUSH
8210: CALL_OW 337
// spottedCrossRoad := true ;
8214: LD_ADDR_EXP 8
8218: PUSH
8219: LD_INT 1
8221: ST_TO_ADDR
// end ;
8222: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
8223: LD_INT 22
8225: PUSH
8226: LD_INT 2
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: PUSH
8233: LD_INT 2
8235: PUSH
8236: LD_INT 30
8238: PUSH
8239: LD_INT 0
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_INT 30
8248: PUSH
8249: LD_INT 1
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: LIST
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PPUSH
8265: CALL_OW 69
8269: PUSH
8270: LD_EXP 19
8274: PPUSH
8275: CALL_OW 302
8279: PUSH
8280: LD_EXP 26
8284: OR
8285: AND
8286: IFFALSE 8485
8288: GO 8290
8290: DISABLE
// begin DialogueOn ;
8291: CALL_OW 6
// if Kaia then
8295: LD_EXP 19
8299: IFFALSE 8312
// CenterNowOnUnits ( Kaia ) else
8301: LD_EXP 19
8305: PPUSH
8306: CALL_OW 87
8310: GO 8321
// CenterNowOnUnits ( Heike ) ;
8312: LD_EXP 14
8316: PPUSH
8317: CALL_OW 87
// if IsOk ( Kaia ) then
8321: LD_EXP 19
8325: PPUSH
8326: CALL_OW 302
8330: IFFALSE 8346
// Say ( Kaia , DK-Cam-1 ) else
8332: LD_EXP 19
8336: PPUSH
8337: LD_STRING DK-Cam-1
8339: PPUSH
8340: CALL_OW 88
8344: GO 8361
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
8346: LD_EXP 26
8350: PPUSH
8351: LD_STRING DArm-Cam-1
8353: PPUSH
8354: LD_STRING DArf-Cam-1
8356: PPUSH
8357: CALL 2816 0 3
// Say ( Heike , DH-Cam-2 ) ;
8361: LD_EXP 14
8365: PPUSH
8366: LD_STRING DH-Cam-2
8368: PPUSH
8369: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
8373: LD_EXP 14
8377: PPUSH
8378: LD_STRING DH-Cam-3
8380: PPUSH
8381: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
8385: LD_EXP 14
8389: PPUSH
8390: LD_STRING DH-Cam-4
8392: PPUSH
8393: CALL_OW 88
// if IsOk ( Kaia ) then
8397: LD_EXP 19
8401: PPUSH
8402: CALL_OW 302
8406: IFFALSE 8422
// Say ( Kaia , DK-Cam-5 ) else
8408: LD_EXP 19
8412: PPUSH
8413: LD_STRING DK-Cam-5
8415: PPUSH
8416: CALL_OW 88
8420: GO 8437
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
8422: LD_EXP 26
8426: PPUSH
8427: LD_STRING DArm-Cam-5
8429: PPUSH
8430: LD_STRING DArf-Cam-5
8432: PPUSH
8433: CALL 2816 0 3
// Say ( Olaf , DO-Cam-6 ) ;
8437: LD_EXP 23
8441: PPUSH
8442: LD_STRING DO-Cam-6
8444: PPUSH
8445: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
8449: LD_EXP 23
8453: PPUSH
8454: LD_STRING DO-Cam-7
8456: PPUSH
8457: CALL_OW 88
// DialogueOff ;
8461: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
8465: LD_STRING Radar
8467: PPUSH
8468: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
8472: LD_INT 6
8474: PPUSH
8475: LD_INT 2
8477: PPUSH
8478: LD_INT 1
8480: PPUSH
8481: CALL_OW 322
// end ;
8485: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ) do
8486: LD_INT 22
8488: PUSH
8489: LD_INT 2
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 34
8498: PUSH
8499: LD_INT 30
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 35
8508: PUSH
8509: LD_INT 30
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 69
8525: IFFALSE 8537
8527: GO 8529
8529: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
8530: LD_STRING RadarDone
8532: PPUSH
8533: CALL_OW 337
8537: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
8538: LD_EXP 23
8542: PPUSH
8543: CALL_OW 302
8547: PUSH
8548: LD_EXP 25
8552: PPUSH
8553: CALL_OW 302
8557: AND
8558: PUSH
8559: LD_INT 6
8561: PPUSH
8562: LD_INT 2
8564: PPUSH
8565: CALL_OW 321
8569: PUSH
8570: LD_INT 2
8572: EQUAL
8573: AND
8574: PUSH
8575: LD_EXP 25
8579: PPUSH
8580: LD_EXP 14
8584: PPUSH
8585: CALL_OW 296
8589: PUSH
8590: LD_INT 10
8592: LESS
8593: PUSH
8594: LD_EXP 25
8598: PPUSH
8599: CALL_OW 310
8603: OR
8604: AND
8605: IFFALSE 8806
8607: GO 8609
8609: DISABLE
// begin DialogueOn ;
8610: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
8614: LD_EXP 25
8618: PPUSH
8619: LD_STRING DA-RC-1
8621: PPUSH
8622: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
8626: LD_EXP 25
8630: PPUSH
8631: LD_STRING DA-RC-2
8633: PPUSH
8634: CALL_OW 88
// if IsOk ( Kaia ) then
8638: LD_EXP 19
8642: PPUSH
8643: CALL_OW 302
8647: IFFALSE 8721
// begin Say ( Kaia , DK-RC-3 ) ;
8649: LD_EXP 19
8653: PPUSH
8654: LD_STRING DK-RC-3
8656: PPUSH
8657: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
8661: LD_EXP 25
8665: PPUSH
8666: LD_STRING DA-RC-4
8668: PPUSH
8669: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
8673: LD_EXP 19
8677: PPUSH
8678: LD_STRING DK-RC-5
8680: PPUSH
8681: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
8685: LD_EXP 25
8689: PPUSH
8690: LD_STRING DA-RC-6
8692: PPUSH
8693: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
8697: LD_EXP 19
8701: PPUSH
8702: LD_STRING DK-RC-7
8704: PPUSH
8705: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
8709: LD_EXP 25
8713: PPUSH
8714: LD_STRING DA-RC-8
8716: PPUSH
8717: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
8721: LD_EXP 14
8725: PPUSH
8726: LD_STRING DH-RC-9
8728: PPUSH
8729: CALL_OW 88
// if IsOk ( Markov ) then
8733: LD_EXP 21
8737: PPUSH
8738: CALL_OW 302
8742: IFFALSE 8770
// begin Say ( Markov , DMar-RC-10 ) ;
8744: LD_EXP 21
8748: PPUSH
8749: LD_STRING DMar-RC-10
8751: PPUSH
8752: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
8756: LD_EXP 21
8760: PPUSH
8761: LD_STRING DMar-RC-11
8763: PPUSH
8764: CALL_OW 88
// end else
8768: GO 8782
// begin Say ( Olaf , DO-RC-a-10 ) ;
8770: LD_EXP 23
8774: PPUSH
8775: LD_STRING DO-RC-a-10
8777: PPUSH
8778: CALL_OW 88
// end ; DialogueOff ;
8782: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
8786: LD_STRING RemoteControl
8788: PPUSH
8789: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
8793: LD_INT 15
8795: PPUSH
8796: LD_INT 2
8798: PPUSH
8799: LD_INT 1
8801: PPUSH
8802: CALL_OW 322
// end ;
8806: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
8807: LD_INT 12
8809: PPUSH
8810: LD_INT 22
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PPUSH
8820: CALL_OW 70
8824: IFFALSE 9178
8826: GO 8828
8828: DISABLE
8829: LD_INT 0
8831: PPUSH
// begin PrepareWestBase ;
8832: CALL 5104 0 0
// westBaseSpotted := true ;
8836: LD_ADDR_EXP 5
8840: PUSH
8841: LD_INT 1
8843: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8844: LD_INT 70
8846: PPUSH
8847: CALL_OW 67
// InGameOn ;
8851: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
8855: LD_INT 56
8857: PPUSH
8858: LD_INT 77
8860: PPUSH
8861: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
8865: LD_INT 56
8867: PPUSH
8868: LD_INT 77
8870: PPUSH
8871: LD_INT 2
8873: PPUSH
8874: LD_INT 12
8876: NEG
8877: PPUSH
8878: CALL_OW 330
// wait ( 0 0$2 ) ;
8882: LD_INT 70
8884: PPUSH
8885: CALL_OW 67
// DialogueOn ;
8889: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
8893: LD_EXP 14
8897: PPUSH
8898: LD_STRING DH-Rbase-1
8900: PPUSH
8901: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
8905: LD_EXP 19
8909: PPUSH
8910: LD_STRING DK-Rbase-2
8912: PPUSH
8913: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
8917: LD_EXP 19
8921: PPUSH
8922: LD_STRING DK-Rbase-3
8924: PPUSH
8925: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
8929: LD_EXP 19
8933: PPUSH
8934: LD_STRING DK-Rbase-4
8936: PPUSH
8937: CALL_OW 88
// DialogueOff ;
8941: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
8945: LD_INT 56
8947: PPUSH
8948: LD_INT 77
8950: PPUSH
8951: LD_INT 2
8953: PPUSH
8954: CALL_OW 331
// InGameOff ;
8958: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
8962: LD_INT 35
8964: PPUSH
8965: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
8969: LD_EXP 33
8973: NOT
8974: PUSH
8975: LD_EXP 34
8979: NOT
8980: AND
8981: IFFALSE 8962
// wait ( 0 0$2 ) ;
8983: LD_INT 70
8985: PPUSH
8986: CALL_OW 67
// if IsOk ( Kaia ) then
8990: LD_EXP 19
8994: PPUSH
8995: CALL_OW 302
8999: IFFALSE 9114
// begin DialogueOn ;
9001: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
9005: LD_INT 56
9007: PPUSH
9008: LD_INT 81
9010: PPUSH
9011: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
9015: LD_EXP 19
9019: PPUSH
9020: LD_STRING DK-Rbase-5
9022: PPUSH
9023: CALL_OW 88
// if IsOk ( Givi ) then
9027: LD_EXP 15
9031: PPUSH
9032: CALL_OW 302
9036: IFFALSE 9110
// begin Say ( Givi , DG-Rbase-6 ) ;
9038: LD_EXP 15
9042: PPUSH
9043: LD_STRING DG-Rbase-6
9045: PPUSH
9046: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
9050: LD_EXP 15
9054: PPUSH
9055: LD_STRING DG-Rbase-7
9057: PPUSH
9058: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
9062: LD_EXP 19
9066: PPUSH
9067: LD_STRING DK-Rbase-8
9069: PPUSH
9070: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
9074: LD_EXP 15
9078: PPUSH
9079: LD_STRING DG-Rbase-9
9081: PPUSH
9082: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
9086: LD_EXP 15
9090: PPUSH
9091: LD_STRING DG-Rbase-10
9093: PPUSH
9094: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
9098: LD_EXP 19
9102: PPUSH
9103: LD_STRING DK-Rbase-11
9105: PPUSH
9106: CALL_OW 88
// end ; DialogueOff ;
9110: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9114: LD_ADDR_VAR 0 1
9118: PUSH
9119: LD_INT 12
9121: PPUSH
9122: LD_INT 22
9124: PUSH
9125: LD_INT 3
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 21
9134: PUSH
9135: LD_INT 3
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PPUSH
9146: CALL_OW 70
9150: PUSH
9151: FOR_IN
9152: IFFALSE 9168
// SetSide ( i , 2 ) ;
9154: LD_VAR 0 1
9158: PPUSH
9159: LD_INT 2
9161: PPUSH
9162: CALL_OW 235
9166: GO 9151
9168: POP
9169: POP
// westBaseCaptured := true ;
9170: LD_ADDR_EXP 9
9174: PUSH
9175: LD_INT 1
9177: ST_TO_ADDR
// end ;
9178: PPOPN 1
9180: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
9181: LD_EXP 30
9185: NOT
9186: PUSH
9187: LD_INT 10
9189: PPUSH
9190: CALL_OW 255
9194: PUSH
9195: LD_INT 2
9197: EQUAL
9198: OR
9199: IFFALSE 9326
9201: GO 9203
9203: DISABLE
// begin DialogueOn ;
9204: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
9208: LD_EXP 14
9212: PPUSH
9213: LD_STRING DH-Goal-1
9215: PPUSH
9216: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
9220: LD_EXP 22
9224: PPUSH
9225: LD_STRING DShar-Goal-2
9227: PPUSH
9228: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
9232: LD_EXP 14
9236: PPUSH
9237: LD_STRING DH-Goal-3
9239: PPUSH
9240: CALL_OW 88
// if reinforcementsAllowed then
9244: LD_EXP 13
9248: IFFALSE 9274
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
9250: LD_EXP 22
9254: PPUSH
9255: LD_STRING DShar-Goal-4
9257: PPUSH
9258: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
9262: LD_EXP 14
9266: PPUSH
9267: LD_STRING DH-Goal-5
9269: PPUSH
9270: CALL_OW 88
// end ; DialogueOff ;
9274: CALL_OW 7
// eastBaseCaptured := true ;
9278: LD_ADDR_EXP 10
9282: PUSH
9283: LD_INT 1
9285: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
9286: LD_STRING BaseCaptured
9288: PPUSH
9289: CALL_OW 337
// if not reinforcementsAllowed then
9293: LD_EXP 13
9297: NOT
9298: IFFALSE 9302
// exit ;
9300: GO 9326
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
9302: LD_INT 21000
9304: PUSH
9305: LD_INT 1050
9307: NEG
9308: PPUSH
9309: LD_INT 1050
9311: PPUSH
9312: CALL_OW 12
9316: PLUS
9317: PPUSH
9318: CALL_OW 67
// PrepareReinforcements ;
9322: CALL 3747 0 0
// end ;
9326: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
9327: LD_INT 22
9329: PUSH
9330: LD_INT 2
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 30
9339: PUSH
9340: LD_INT 13
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PPUSH
9351: CALL_OW 69
9355: IFFALSE 9372
9357: GO 9359
9359: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
9360: LD_EXP 15
9364: PPUSH
9365: LD_STRING DG-Lab-1
9367: PPUSH
9368: CALL_OW 88
// end ;
9372: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched do
9373: LD_INT 5
9375: PPUSH
9376: LD_INT 2
9378: PPUSH
9379: CALL_OW 321
9383: PUSH
9384: LD_INT 2
9386: EQUAL
9387: IFFALSE 9448
9389: GO 9391
9391: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
9392: LD_EXP 15
9396: PPUSH
9397: LD_STRING DG-Stim-1
9399: PPUSH
9400: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
9404: LD_EXP 14
9408: PPUSH
9409: LD_STRING DH-Stim-2
9411: PPUSH
9412: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
9416: LD_EXP 15
9420: PPUSH
9421: LD_STRING DG-Stim-3
9423: PPUSH
9424: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
9428: LD_EXP 14
9432: PPUSH
9433: LD_STRING DH-Stim-4
9435: PPUSH
9436: CALL_OW 88
// drugsResearched := true ;
9440: LD_ADDR_EXP 11
9444: PUSH
9445: LD_INT 1
9447: ST_TO_ADDR
// end ;
9448: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
9449: LD_EXP 11
9453: IFFALSE 9745
9455: GO 9457
9457: DISABLE
9458: LD_INT 0
9460: PPUSH
9461: PPUSH
9462: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
9463: LD_ADDR_VAR 0 2
9467: PUSH
9468: LD_EXP 14
9472: PUSH
9473: LD_EXP 15
9477: PUSH
9478: LD_EXP 23
9482: PUSH
9483: LD_EXP 21
9487: PUSH
9488: LD_EXP 19
9492: PUSH
9493: LD_EXP 20
9497: PUSH
9498: LD_EXP 24
9502: PUSH
9503: LD_EXP 18
9507: PUSH
9508: LD_EXP 16
9512: PUSH
9513: LD_EXP 17
9517: PUSH
9518: LD_EXP 25
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
9536: LD_ADDR_VAR 0 3
9540: PUSH
9541: LD_STRING H
9543: PUSH
9544: LD_STRING G
9546: PUSH
9547: LD_STRING O
9549: PUSH
9550: LD_STRING Mar
9552: PUSH
9553: LD_STRING K
9555: PUSH
9556: LD_STRING S
9558: PUSH
9559: LD_STRING Ks
9561: PUSH
9562: LD_STRING Kam
9564: PUSH
9565: LD_STRING M
9567: PUSH
9568: LD_STRING I
9570: PUSH
9571: LD_STRING A
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9587: LD_INT 35
9589: PPUSH
9590: CALL_OW 67
// for i := tmp downto 1 do
9594: LD_ADDR_VAR 0 1
9598: PUSH
9599: DOUBLE
9600: LD_VAR 0 2
9604: INC
9605: ST_TO_ADDR
9606: LD_INT 1
9608: PUSH
9609: FOR_DOWNTO
9610: IFFALSE 9736
// if IsDying ( tmp [ i ] ) then
9612: LD_VAR 0 2
9616: PUSH
9617: LD_VAR 0 1
9621: ARRAY
9622: PPUSH
9623: CALL_OW 303
9627: IFFALSE 9734
// begin DialogueOn ;
9629: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
9633: LD_VAR 0 2
9637: PUSH
9638: LD_VAR 0 1
9642: ARRAY
9643: PPUSH
9644: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
9648: LD_VAR 0 2
9652: PUSH
9653: LD_VAR 0 1
9657: ARRAY
9658: PPUSH
9659: LD_STRING D
9661: PUSH
9662: LD_VAR 0 3
9666: PUSH
9667: LD_VAR 0 1
9671: ARRAY
9672: STR
9673: PUSH
9674: LD_STRING -Stim-a-1
9676: STR
9677: PPUSH
9678: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
9682: LD_ADDR_VAR 0 2
9686: PUSH
9687: LD_VAR 0 2
9691: PPUSH
9692: LD_VAR 0 1
9696: PPUSH
9697: CALL_OW 3
9701: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
9702: LD_ADDR_VAR 0 3
9706: PUSH
9707: LD_VAR 0 3
9711: PPUSH
9712: LD_VAR 0 1
9716: PPUSH
9717: CALL_OW 3
9721: ST_TO_ADDR
// drugsTested := true ;
9722: LD_ADDR_EXP 6
9726: PUSH
9727: LD_INT 1
9729: ST_TO_ADDR
// DialogueOff ;
9730: CALL_OW 7
// end ;
9734: GO 9609
9736: POP
9737: POP
// until not tmp ;
9738: LD_VAR 0 2
9742: NOT
9743: IFFALSE 9587
// end ;
9745: PPOPN 3
9747: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , control_remote ] ] ) do
9748: LD_INT 22
9750: PUSH
9751: LD_INT 2
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 34
9760: PUSH
9761: LD_INT 31
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PUSH
9777: LD_INT 22
9779: PUSH
9780: LD_INT 2
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 34
9789: PUSH
9790: LD_INT 2
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: AND
9806: IFFALSE 9819
9808: GO 9810
9810: DISABLE
// remoteControlConstructed := true ;
9811: LD_ADDR_EXP 12
9815: PUSH
9816: LD_INT 1
9818: ST_TO_ADDR
9819: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
9820: LD_EXP 12
9824: IFFALSE 10101
9826: GO 9828
9828: DISABLE
9829: LD_INT 0
9831: PPUSH
9832: PPUSH
9833: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
9834: LD_ADDR_VAR 0 2
9838: PUSH
9839: LD_EXP 14
9843: PUSH
9844: LD_EXP 15
9848: PUSH
9849: LD_EXP 23
9853: PUSH
9854: LD_EXP 21
9858: PUSH
9859: LD_EXP 19
9863: PUSH
9864: LD_EXP 20
9868: PUSH
9869: LD_EXP 24
9873: PUSH
9874: LD_EXP 18
9878: PUSH
9879: LD_EXP 16
9883: PUSH
9884: LD_EXP 17
9888: PUSH
9889: LD_EXP 25
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
9907: LD_ADDR_VAR 0 3
9911: PUSH
9912: LD_STRING H
9914: PUSH
9915: LD_STRING G
9917: PUSH
9918: LD_STRING O
9920: PUSH
9921: LD_STRING Mar
9923: PUSH
9924: LD_STRING K
9926: PUSH
9927: LD_STRING S
9929: PUSH
9930: LD_STRING Ks
9932: PUSH
9933: LD_STRING Kam
9935: PUSH
9936: LD_STRING M
9938: PUSH
9939: LD_STRING I
9941: PUSH
9942: LD_STRING A
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9958: LD_INT 35
9960: PPUSH
9961: CALL_OW 67
// for i := tmp downto 1 do
9965: LD_ADDR_VAR 0 1
9969: PUSH
9970: DOUBLE
9971: LD_VAR 0 2
9975: INC
9976: ST_TO_ADDR
9977: LD_INT 1
9979: PUSH
9980: FOR_DOWNTO
9981: IFFALSE 10092
// if UnitsLinked ( tmp [ i ] ) then
9983: LD_VAR 0 2
9987: PUSH
9988: LD_VAR 0 1
9992: ARRAY
9993: PPUSH
9994: CALL_OW 432
9998: IFFALSE 10090
// begin DialogueOn ;
10000: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
10004: LD_VAR 0 2
10008: PUSH
10009: LD_VAR 0 1
10013: ARRAY
10014: PPUSH
10015: LD_STRING D
10017: PUSH
10018: LD_VAR 0 3
10022: PUSH
10023: LD_VAR 0 1
10027: ARRAY
10028: STR
10029: PUSH
10030: LD_STRING -RC-a-1
10032: STR
10033: PPUSH
10034: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
10038: LD_ADDR_VAR 0 2
10042: PUSH
10043: LD_VAR 0 2
10047: PPUSH
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 3
10057: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
10058: LD_ADDR_VAR 0 3
10062: PUSH
10063: LD_VAR 0 3
10067: PPUSH
10068: LD_VAR 0 1
10072: PPUSH
10073: CALL_OW 3
10077: ST_TO_ADDR
// DialogueOff ;
10078: CALL_OW 7
// remoteControlTested := true ;
10082: LD_ADDR_EXP 7
10086: PUSH
10087: LD_INT 1
10089: ST_TO_ADDR
// end ;
10090: GO 9980
10092: POP
10093: POP
// until not tmp ;
10094: LD_VAR 0 2
10098: NOT
10099: IFFALSE 9958
// end ;
10101: PPOPN 3
10103: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) and not InBattle ( 2 ) do
10104: LD_EXP 7
10108: PUSH
10109: LD_EXP 21
10113: PPUSH
10114: CALL_OW 302
10118: AND
10119: PUSH
10120: LD_INT 2
10122: PPUSH
10123: CALL_OW 463
10127: NOT
10128: AND
10129: IFFALSE 10158
10131: GO 10133
10133: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
10134: LD_EXP 21
10138: PPUSH
10139: LD_STRING DMar-RC-a-2
10141: PPUSH
10142: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
10146: LD_EXP 21
10150: PPUSH
10151: LD_STRING DMar-RC-a-3
10153: PPUSH
10154: CALL_OW 88
// end ;
10158: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
10159: LD_EXP 13
10163: PUSH
10164: LD_EXP 14
10168: PPUSH
10169: LD_EXP 25
10173: PPUSH
10174: CALL_OW 296
10178: PUSH
10179: LD_INT 8
10181: LESS
10182: AND
10183: PUSH
10184: LD_INT 2
10186: PPUSH
10187: CALL_OW 463
10191: NOT
10192: AND
10193: PUSH
10194: LD_EXP 25
10198: PPUSH
10199: CALL_OW 302
10203: AND
10204: PUSH
10205: LD_EXP 14
10209: PPUSH
10210: CALL_OW 302
10214: AND
10215: IFFALSE 10393
10217: GO 10219
10219: DISABLE
// begin if not IsInUnit ( Aviradze ) then
10220: LD_EXP 25
10224: PPUSH
10225: CALL_OW 310
10229: NOT
10230: IFFALSE 10246
// ComTurnUnit ( Aviradze , Heike ) ;
10232: LD_EXP 25
10236: PPUSH
10237: LD_EXP 14
10241: PPUSH
10242: CALL_OW 119
// if not IsInUnit ( Heike ) then
10246: LD_EXP 14
10250: PPUSH
10251: CALL_OW 310
10255: NOT
10256: IFFALSE 10272
// ComTurnUnit ( Heike , Aviradze ) ;
10258: LD_EXP 14
10262: PPUSH
10263: LD_EXP 25
10267: PPUSH
10268: CALL_OW 119
// wait ( 0 0$1 ) ;
10272: LD_INT 35
10274: PPUSH
10275: CALL_OW 67
// DialogueOn ;
10279: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
10283: LD_EXP 25
10287: PPUSH
10288: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
10292: LD_EXP 14
10296: PPUSH
10297: LD_STRING DH-Beria-1
10299: PPUSH
10300: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
10304: LD_EXP 25
10308: PPUSH
10309: LD_STRING DA-Beria-2
10311: PPUSH
10312: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
10316: LD_EXP 14
10320: PPUSH
10321: LD_STRING DH-Beria-3
10323: PPUSH
10324: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
10328: LD_EXP 25
10332: PPUSH
10333: LD_STRING DA-Beria-4
10335: PPUSH
10336: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
10340: LD_EXP 25
10344: PPUSH
10345: LD_STRING DA-Beria-5
10347: PPUSH
10348: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
10352: LD_EXP 25
10356: PPUSH
10357: LD_STRING DA-Beria-6
10359: PPUSH
10360: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
10364: LD_EXP 14
10368: PPUSH
10369: LD_STRING DA-Beria-7
10371: PPUSH
10372: CALL_OW 88
// DialogueOff ;
10376: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
10380: LD_INT 52
10382: PPUSH
10383: LD_INT 2
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 322
// end ;
10393: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
10394: LD_EXP 19
10398: PPUSH
10399: CALL_OW 256
10403: PUSH
10404: LD_INT 10
10406: LESS
10407: IFFALSE 10444
10409: GO 10411
10411: DISABLE
// begin DialogueOn ;
10412: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
10416: LD_EXP 19
10420: PPUSH
10421: LD_STRING DK-Kdeath-1
10423: PPUSH
10424: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
10428: LD_EXP 14
10432: PPUSH
10433: LD_STRING DH-Kdeath-2
10435: PPUSH
10436: CALL_OW 88
// DialogueOff ;
10440: CALL_OW 7
// end ;
10444: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
10445: LD_INT 2
10447: PPUSH
10448: LD_EXP 31
10452: PPUSH
10453: CALL 2898 0 2
10457: IFFALSE 10474
10459: GO 10461
10461: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
10462: LD_EXP 14
10466: PPUSH
10467: LD_STRING DH-Obj-1
10469: PPUSH
10470: CALL_OW 88
10474: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
10475: LD_INT 2
10477: PPUSH
10478: LD_EXP 32
10482: PPUSH
10483: CALL 2898 0 2
10487: IFFALSE 10504
10489: GO 10491
10491: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ; end_of_file
10492: LD_EXP 14
10496: PPUSH
10497: LD_STRING DH-Obj-a-1
10499: PPUSH
10500: CALL_OW 88
10504: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 20 do
10505: LD_EXP 9
10509: PUSH
10510: LD_INT 13
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: CALL_OW 287
10520: PUSH
10521: LD_INT 20
10523: LESS
10524: AND
10525: IFFALSE 10552
10527: GO 10529
10529: DISABLE
// begin enable ;
10530: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
10531: LD_INT 1
10533: PPUSH
10534: LD_INT 5
10536: PPUSH
10537: CALL_OW 12
10541: PPUSH
10542: LD_INT 13
10544: PPUSH
10545: LD_INT 1
10547: PPUSH
10548: CALL_OW 55
// end ; end_of_file
10552: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
10553: GO 10555
10555: DISABLE
// begin ru_radar := 98 ;
10556: LD_ADDR_EXP 35
10560: PUSH
10561: LD_INT 98
10563: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10564: LD_ADDR_EXP 36
10568: PUSH
10569: LD_INT 89
10571: ST_TO_ADDR
// us_hack := 99 ;
10572: LD_ADDR_EXP 37
10576: PUSH
10577: LD_INT 99
10579: ST_TO_ADDR
// us_artillery := 97 ;
10580: LD_ADDR_EXP 38
10584: PUSH
10585: LD_INT 97
10587: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10588: LD_ADDR_EXP 39
10592: PUSH
10593: LD_INT 91
10595: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
10596: LD_ADDR_EXP 40
10600: PUSH
10601: LD_INT 92
10603: ST_TO_ADDR
// tech_Artillery := 80 ;
10604: LD_ADDR_EXP 41
10608: PUSH
10609: LD_INT 80
10611: ST_TO_ADDR
// tech_RadMat := 81 ;
10612: LD_ADDR_EXP 42
10616: PUSH
10617: LD_INT 81
10619: ST_TO_ADDR
// tech_BasicTools := 82 ;
10620: LD_ADDR_EXP 43
10624: PUSH
10625: LD_INT 82
10627: ST_TO_ADDR
// tech_Cargo := 83 ;
10628: LD_ADDR_EXP 44
10632: PUSH
10633: LD_INT 83
10635: ST_TO_ADDR
// tech_Track := 84 ;
10636: LD_ADDR_EXP 45
10640: PUSH
10641: LD_INT 84
10643: ST_TO_ADDR
// tech_Crane := 85 ;
10644: LD_ADDR_EXP 46
10648: PUSH
10649: LD_INT 85
10651: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10652: LD_ADDR_EXP 47
10656: PUSH
10657: LD_INT 86
10659: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10660: LD_ADDR_EXP 48
10664: PUSH
10665: LD_INT 87
10667: ST_TO_ADDR
// end ;
10668: END
