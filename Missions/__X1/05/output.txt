// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 732 0 2
// PrepareArabian ;
  31: CALL 1421 0 0
// PrepareRussian ;
  35: CALL 3019 0 0
// Action ;
  39: CALL 7563 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// end ;
 250: LD_VAR 0 1
 254: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 255: LD_EXP 10
 259: NOT
 260: PUSH
 261: LD_EXP 9
 265: NOT
 266: AND
 267: PUSH
 268: LD_EXP 39
 272: NOT
 273: AND
 274: PUSH
 275: LD_EXP 40
 279: NOT
 280: AND
 281: IFFALSE 293
 283: GO 285
 285: DISABLE
// SetAchievement ( ACH_EXT ) ;
 286: LD_STRING ACH_EXT
 288: PPUSH
 289: CALL_OW 543
 293: END
// every 0 0$1 trigger captureCounter >= 6 do
 294: LD_EXP 18
 298: PUSH
 299: LD_INT 6
 301: GREATEREQUAL
 302: IFFALSE 314
 304: GO 306
 306: DISABLE
// SetAchievement ( ACH_KEY ) ;
 307: LD_STRING ACH_KEY
 309: PPUSH
 310: CALL_OW 543
 314: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 315: LD_EXP 19
 319: PUSH
 320: LD_INT 3
 322: GREATEREQUAL
 323: IFFALSE 335
 325: GO 327
 327: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 328: LD_STRING ACH_CHEM
 330: PPUSH
 331: CALL_OW 543
 335: END
// every 0 0$1 trigger debug do var i ;
 336: LD_EXP 1
 340: IFFALSE 424
 342: GO 344
 344: DISABLE
 345: LD_INT 0
 347: PPUSH
// begin enable ;
 348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 349: LD_ADDR_VAR 0 1
 353: PUSH
 354: LD_INT 22
 356: PUSH
 357: LD_INT 2
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 21
 369: PUSH
 370: LD_INT 3
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PPUSH
 385: CALL_OW 69
 389: PUSH
 390: FOR_IN
 391: IFFALSE 422
// if GetLives ( i ) < 1000 then
 393: LD_VAR 0 1
 397: PPUSH
 398: CALL_OW 256
 402: PUSH
 403: LD_INT 1000
 405: LESS
 406: IFFALSE 420
// SetLives ( i , 1000 ) ;
 408: LD_VAR 0 1
 412: PPUSH
 413: LD_INT 1000
 415: PPUSH
 416: CALL_OW 234
 420: GO 390
 422: POP
 423: POP
// end ; end_of_file
 424: PPOPN 1
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 1
 679: NEG
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i := 1 to 3 do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_INT 3
 764: PUSH
 765: FOR_TO
 766: IFFALSE 803
// begin hc_class := 21 ;
 768: LD_ADDR_OWVAR 28
 772: PUSH
 773: LD_INT 21
 775: ST_TO_ADDR
// hc_gallery :=  ;
 776: LD_ADDR_OWVAR 33
 780: PUSH
 781: LD_STRING 
 783: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 784: CALL_OW 44
 788: PPUSH
 789: LD_VAR 0 1
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 49
// end ;
 801: GO 765
 803: POP
 804: POP
// for i := 1 to 3 do
 805: LD_ADDR_VAR 0 4
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_INT 3
 817: PUSH
 818: FOR_TO
 819: IFFALSE 856
// begin hc_class := 18 ;
 821: LD_ADDR_OWVAR 28
 825: PUSH
 826: LD_INT 18
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 837: CALL_OW 44
 841: PPUSH
 842: LD_VAR 0 1
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// end ;
 854: GO 818
 856: POP
 857: POP
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 4
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 909
// begin hc_class := 13 ;
 874: LD_ADDR_OWVAR 28
 878: PUSH
 879: LD_INT 13
 881: ST_TO_ADDR
// hc_gallery :=  ;
 882: LD_ADDR_OWVAR 33
 886: PUSH
 887: LD_STRING 
 889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 890: CALL_OW 44
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// end ;
 907: GO 871
 909: POP
 910: POP
// for i := 1 to 4 do
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: DOUBLE
 917: LD_INT 1
 919: DEC
 920: ST_TO_ADDR
 921: LD_INT 4
 923: PUSH
 924: FOR_TO
 925: IFFALSE 962
// begin hc_class := class_frog ;
 927: LD_ADDR_OWVAR 28
 931: PUSH
 932: LD_INT 19
 934: ST_TO_ADDR
// hc_gallery :=  ;
 935: LD_ADDR_OWVAR 33
 939: PUSH
 940: LD_STRING 
 942: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 943: CALL_OW 44
 947: PPUSH
 948: LD_VAR 0 2
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 924
 962: POP
 963: POP
// end ;
 964: LD_VAR 0 3
 968: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 969: LD_INT 0
 971: PPUSH
 972: PPUSH
 973: PPUSH
// if not observer or not unit then
 974: LD_VAR 0 1
 978: NOT
 979: PUSH
 980: LD_VAR 0 2
 984: NOT
 985: OR
 986: IFFALSE 990
// exit ;
 988: GO 1038
// if not See ( GetSide ( observer ) , unit ) then
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 255
 999: PPUSH
1000: LD_VAR 0 2
1004: PPUSH
1005: CALL_OW 292
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1038
// result := GetDistUnits ( observer , unit ) < 12 ;
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: LD_VAR 0 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL_OW 296
1033: PUSH
1034: LD_INT 12
1036: LESS
1037: ST_TO_ADDR
// end ;
1038: LD_VAR 0 3
1042: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1043: LD_INT 0
1045: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1046: LD_VAR 0 2
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_VAR 0 2
1059: PUSH
1060: LD_INT 2
1062: ARRAY
1063: PPUSH
1064: CALL_OW 488
1068: PUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 2
1085: ARRAY
1086: PPUSH
1087: CALL_OW 428
1091: PUSH
1092: LD_INT 0
1094: EQUAL
1095: AND
1096: IFFALSE 1130
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1098: LD_VAR 0 1
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PPUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_INT 2
1119: ARRAY
1120: PPUSH
1121: LD_VAR 0 3
1125: PPUSH
1126: CALL_OW 48
// end ;
1130: LD_VAR 0 4
1134: RET
// export function ReverseArray ( array ) ; var i ; begin
1135: LD_INT 0
1137: PPUSH
1138: PPUSH
// if not array then
1139: LD_VAR 0 1
1143: NOT
1144: IFFALSE 1148
// exit ;
1146: GO 1206
// result := [ ] ;
1148: LD_ADDR_VAR 0 2
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to array do
1155: LD_ADDR_VAR 0 3
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_VAR 0 1
1169: PUSH
1170: FOR_TO
1171: IFFALSE 1204
// result := Insert ( result , 1 , array [ i ] ) ;
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: LD_VAR 0 2
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: LD_VAR 0 1
1190: PUSH
1191: LD_VAR 0 3
1195: ARRAY
1196: PPUSH
1197: CALL_OW 2
1201: ST_TO_ADDR
1202: GO 1170
1204: POP
1205: POP
// end ;
1206: LD_VAR 0 2
1210: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1211: LD_INT 0
1213: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1214: LD_VAR 0 1
1218: PPUSH
1219: LD_VAR 0 2
1223: PPUSH
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_VAR 0 4
1233: PPUSH
1234: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1238: LD_VAR 0 1
1242: PPUSH
1243: LD_VAR 0 2
1247: PPUSH
1248: LD_VAR 0 3
1252: PPUSH
1253: CALL_OW 331
// end ;
1257: LD_VAR 0 5
1261: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1262: LD_INT 0
1264: PPUSH
// if not units then
1265: LD_VAR 0 1
1269: NOT
1270: IFFALSE 1274
// exit ;
1272: GO 1353
// result := true ;
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_INT 1
1281: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) , menDialog ) then
1282: LD_VAR 0 1
1286: PPUSH
1287: LD_INT 26
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 72
1301: PPUSH
1302: LD_VAR 0 2
1306: PPUSH
1307: CALL_OW 88
1311: NOT
1312: IFFALSE 1353
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1314: LD_ADDR_VAR 0 4
1318: PUSH
1319: LD_VAR 0 1
1323: PPUSH
1324: LD_INT 26
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PPUSH
1334: CALL_OW 72
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: LD_VAR 0 3
1347: PPUSH
1348: CALL_OW 88
1352: ST_TO_ADDR
// end ;
1353: LD_VAR 0 4
1357: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1358: LD_INT 0
1360: PPUSH
1361: PPUSH
// if not group then
1362: LD_VAR 0 2
1366: NOT
1367: IFFALSE 1371
// exit ;
1369: GO 1416
// for i in group do
1371: LD_ADDR_VAR 0 4
1375: PUSH
1376: LD_VAR 0 2
1380: PUSH
1381: FOR_IN
1382: IFFALSE 1414
// if See ( side , i ) then
1384: LD_VAR 0 1
1388: PPUSH
1389: LD_VAR 0 4
1393: PPUSH
1394: CALL_OW 292
1398: IFFALSE 1412
// begin result := true ;
1400: LD_ADDR_VAR 0 3
1404: PUSH
1405: LD_INT 1
1407: ST_TO_ADDR
// exit ;
1408: POP
1409: POP
1410: GO 1416
// end ;
1412: GO 1381
1414: POP
1415: POP
// end ; end_of_file
1416: LD_VAR 0 3
1420: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1421: LD_INT 0
1423: PPUSH
1424: PPUSH
// uc_side := 2 ;
1425: LD_ADDR_OWVAR 20
1429: PUSH
1430: LD_INT 2
1432: ST_TO_ADDR
// uc_nation := 2 ;
1433: LD_ADDR_OWVAR 21
1437: PUSH
1438: LD_INT 2
1440: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1441: LD_ADDR_EXP 21
1445: PUSH
1446: LD_STRING Heike
1448: PPUSH
1449: LD_EXP 1
1453: NOT
1454: PPUSH
1455: LD_EXP 2
1459: PPUSH
1460: CALL 28096 0 3
1464: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1465: LD_ADDR_EXP 24
1469: PUSH
1470: LD_STRING Ibrahim
1472: PPUSH
1473: LD_EXP 1
1477: NOT
1478: PPUSH
1479: LD_EXP 2
1483: PPUSH
1484: CALL 28096 0 3
1488: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1489: LD_ADDR_EXP 22
1493: PUSH
1494: LD_STRING Givi
1496: PPUSH
1497: LD_EXP 1
1501: NOT
1502: PPUSH
1503: LD_EXP 2
1507: PPUSH
1508: CALL 28096 0 3
1512: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1513: LD_ADDR_EXP 25
1517: PUSH
1518: LD_STRING Kamil
1520: PPUSH
1521: LD_EXP 1
1525: NOT
1526: PPUSH
1527: LD_EXP 2
1531: PPUSH
1532: CALL 28096 0 3
1536: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1537: LD_ADDR_EXP 26
1541: PUSH
1542: LD_STRING Kaia
1544: PPUSH
1545: LD_EXP 1
1549: NOT
1550: PPUSH
1551: LD_EXP 2
1555: PPUSH
1556: CALL 28096 0 3
1560: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1561: LD_ADDR_EXP 27
1565: PUSH
1566: LD_STRING Sophia
1568: PPUSH
1569: LD_EXP 1
1573: NOT
1574: PPUSH
1575: LD_EXP 2
1579: PPUSH
1580: CALL 28096 0 3
1584: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1585: LD_ADDR_EXP 28
1589: PUSH
1590: LD_STRING Markov
1592: PPUSH
1593: LD_EXP 1
1597: NOT
1598: PPUSH
1599: LD_EXP 2
1603: PPUSH
1604: CALL 28096 0 3
1608: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1609: LD_ADDR_EXP 33
1613: PUSH
1614: LD_STRING Aviradze
1616: PPUSH
1617: LD_EXP 1
1621: NOT
1622: PPUSH
1623: LD_EXP 2
1627: PPUSH
1628: CALL 28096 0 3
1632: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1633: LD_ADDR_EXP 32
1637: PUSH
1638: LD_STRING Kurt
1640: PPUSH
1641: LD_EXP 1
1645: NOT
1646: PPUSH
1647: LD_EXP 2
1651: PPUSH
1652: CALL 28096 0 3
1656: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1657: LD_ADDR_EXP 23
1661: PUSH
1662: LD_STRING Mike
1664: PPUSH
1665: LD_EXP 1
1669: NOT
1670: PPUSH
1671: LD_EXP 2
1675: PPUSH
1676: CALL 28096 0 3
1680: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1681: LD_ADDR_EXP 30
1685: PUSH
1686: LD_STRING Olaf
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: LD_STRING 
1694: PPUSH
1695: CALL 28096 0 3
1699: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1700: LD_ADDR_EXP 34
1704: PUSH
1705: LD_STRING 04_2_others
1707: PPUSH
1708: CALL_OW 31
1712: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1713: LD_ADDR_EXP 36
1717: PUSH
1718: LD_STRING 04_2_apes
1720: PPUSH
1721: CALL_OW 31
1725: ST_TO_ADDR
// if hasFlamethrower then
1726: LD_EXP 3
1730: IFFALSE 1961
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1732: LD_INT 70
1734: PPUSH
1735: LD_INT 2
1737: PPUSH
1738: LD_INT 2
1740: PPUSH
1741: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1745: LD_ADDR_EXP 35
1749: PUSH
1750: LD_INT 13
1752: PUSH
1753: LD_INT 1
1755: PUSH
1756: LD_INT 1
1758: PUSH
1759: LD_INT 27
1761: PUSH
1762: LD_INT 2
1764: PUSH
1765: LD_INT 1000
1767: PUSH
1768: LD_INT 0
1770: PUSH
1771: LD_INT 0
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 13
1789: PUSH
1790: LD_INT 1
1792: PUSH
1793: LD_INT 1
1795: PUSH
1796: LD_INT 25
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: LD_INT 1000
1804: PUSH
1805: LD_INT 0
1807: PUSH
1808: LD_INT 0
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 13
1826: PUSH
1827: LD_INT 1
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: LD_INT 26
1835: PUSH
1836: LD_INT 2
1838: PUSH
1839: LD_INT 1000
1841: PUSH
1842: LD_INT 0
1844: PUSH
1845: LD_INT 0
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 13
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: LD_INT 27
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1000
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 13
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: LD_INT 32
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: LD_INT 1000
1915: PUSH
1916: LD_INT 0
1918: PUSH
1919: LD_INT 60
1921: PUSH
1922: LD_INT 40
1924: PUSH
1925: LD_INT 20
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: PUSH
1933: LD_OWVAR 67
1937: ARRAY
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: ST_TO_ADDR
// end else
1959: GO 2175
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1961: LD_ADDR_EXP 35
1965: PUSH
1966: LD_INT 13
1968: PUSH
1969: LD_INT 1
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: LD_INT 25
1977: PUSH
1978: LD_INT 2
1980: PUSH
1981: LD_INT 1000
1983: PUSH
1984: LD_INT 0
1986: PUSH
1987: LD_INT 0
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 13
2005: PUSH
2006: LD_INT 1
2008: PUSH
2009: LD_INT 1
2011: PUSH
2012: LD_INT 27
2014: PUSH
2015: LD_INT 2
2017: PUSH
2018: LD_INT 1000
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: LD_INT 0
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 13
2042: PUSH
2043: LD_INT 1
2045: PUSH
2046: LD_INT 1
2048: PUSH
2049: LD_INT 24
2051: PUSH
2052: LD_INT 2
2054: PUSH
2055: LD_INT 1000
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 13
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: LD_INT 1
2085: PUSH
2086: LD_INT 27
2088: PUSH
2089: LD_INT 2
2091: PUSH
2092: LD_INT 1000
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 0
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 13
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: LD_INT 32
2125: PUSH
2126: LD_INT 2
2128: PUSH
2129: LD_INT 1000
2131: PUSH
2132: LD_INT 0
2134: PUSH
2135: LD_INT 50
2137: PUSH
2138: LD_INT 30
2140: PUSH
2141: LD_INT 20
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: LD_OWVAR 67
2153: ARRAY
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// end ; uc_side := 5 ;
2175: LD_ADDR_OWVAR 20
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2183: LD_ADDR_EXP 29
2187: PUSH
2188: LD_STRING Abdul
2190: PPUSH
2191: LD_INT 0
2193: PPUSH
2194: LD_STRING 
2196: PPUSH
2197: CALL 28096 0 3
2201: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2202: LD_ADDR_EXP 31
2206: PUSH
2207: LD_STRING Omar
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: LD_STRING 
2215: PPUSH
2216: CALL 28096 0 3
2220: ST_TO_ADDR
// end ;
2221: LD_VAR 0 1
2225: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2226: LD_INT 0
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
// pfx := 04_1_ ;
2233: LD_ADDR_VAR 0 2
2237: PUSH
2238: LD_STRING 04_1_
2240: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2241: LD_INT 35
2243: PPUSH
2244: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2248: LD_INT 3
2250: PPUSH
2251: LD_INT 2
2253: PPUSH
2254: CALL_OW 428
2258: NOT
2259: IFFALSE 2241
// tmp := [ ] ;
2261: LD_ADDR_VAR 0 4
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// uc_side := 5 ;
2268: LD_ADDR_OWVAR 20
2272: PUSH
2273: LD_INT 5
2275: ST_TO_ADDR
// uc_nation := 2 ;
2276: LD_ADDR_OWVAR 21
2280: PUSH
2281: LD_INT 2
2283: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2284: LD_ADDR_EXP 33
2288: PUSH
2289: LD_STRING Aviradze_L
2291: PPUSH
2292: LD_EXP 1
2296: NOT
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL 28096 0 3
2307: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2308: LD_EXP 33
2312: PPUSH
2313: LD_INT 2
2315: PPUSH
2316: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2320: LD_EXP 33
2324: PPUSH
2325: LD_INT 14
2327: PPUSH
2328: LD_INT 0
2330: PPUSH
2331: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2335: LD_EXP 33
2339: PPUSH
2340: LD_INT 8
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 111
// AddComHold ( Aviradze ) ;
2350: LD_EXP 33
2354: PPUSH
2355: CALL_OW 200
// tmp := [ Aviradze ] ;
2359: LD_ADDR_VAR 0 4
2363: PUSH
2364: LD_EXP 33
2368: PUSH
2369: EMPTY
2370: LIST
2371: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2372: LD_INT 70
2374: PPUSH
2375: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2379: LD_STRING Ibrahim_L
2381: PPUSH
2382: LD_EXP 1
2386: NOT
2387: PPUSH
2388: LD_VAR 0 2
2392: PPUSH
2393: CALL 28096 0 3
2397: IFFALSE 2497
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2399: LD_ADDR_EXP 24
2403: PUSH
2404: LD_STRING Ibrahim_L
2406: PPUSH
2407: LD_EXP 1
2411: NOT
2412: PPUSH
2413: LD_VAR 0 2
2417: PPUSH
2418: CALL 28096 0 3
2422: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2423: LD_EXP 24
2427: PPUSH
2428: LD_INT 2
2430: PPUSH
2431: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2435: LD_EXP 24
2439: PPUSH
2440: LD_INT 14
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2450: LD_EXP 24
2454: PPUSH
2455: LD_INT 8
2457: PPUSH
2458: LD_INT 7
2460: PPUSH
2461: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2465: LD_EXP 24
2469: PPUSH
2470: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2474: LD_ADDR_VAR 0 4
2478: PUSH
2479: LD_VAR 0 4
2483: PUSH
2484: LD_EXP 24
2488: ADD
2489: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2490: LD_INT 70
2492: PPUSH
2493: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2497: LD_STRING Kaia_L
2499: PPUSH
2500: LD_EXP 1
2504: NOT
2505: PPUSH
2506: LD_VAR 0 2
2510: PPUSH
2511: CALL 28096 0 3
2515: IFFALSE 2615
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2517: LD_ADDR_EXP 26
2521: PUSH
2522: LD_STRING Kaia_L
2524: PPUSH
2525: LD_EXP 1
2529: NOT
2530: PPUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL 28096 0 3
2540: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2541: LD_EXP 26
2545: PPUSH
2546: LD_INT 2
2548: PPUSH
2549: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2553: LD_EXP 26
2557: PPUSH
2558: LD_INT 14
2560: PPUSH
2561: LD_INT 0
2563: PPUSH
2564: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2568: LD_EXP 26
2572: PPUSH
2573: LD_INT 8
2575: PPUSH
2576: LD_INT 7
2578: PPUSH
2579: CALL_OW 111
// AddComHold ( Kaia ) ;
2583: LD_EXP 26
2587: PPUSH
2588: CALL_OW 200
// tmp := tmp ^ Kaia ;
2592: LD_ADDR_VAR 0 4
2596: PUSH
2597: LD_VAR 0 4
2601: PUSH
2602: LD_EXP 26
2606: ADD
2607: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2608: LD_INT 70
2610: PPUSH
2611: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2615: LD_STRING Kamil_L
2617: PPUSH
2618: LD_EXP 1
2622: NOT
2623: PPUSH
2624: LD_VAR 0 2
2628: PPUSH
2629: CALL 28096 0 3
2633: IFFALSE 2733
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2635: LD_ADDR_EXP 25
2639: PUSH
2640: LD_STRING Kamil_L
2642: PPUSH
2643: LD_EXP 1
2647: NOT
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: CALL 28096 0 3
2658: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2659: LD_EXP 25
2663: PPUSH
2664: LD_INT 2
2666: PPUSH
2667: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2671: LD_EXP 25
2675: PPUSH
2676: LD_INT 14
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2686: LD_EXP 25
2690: PPUSH
2691: LD_INT 8
2693: PPUSH
2694: LD_INT 7
2696: PPUSH
2697: CALL_OW 111
// AddComHold ( Kamil ) ;
2701: LD_EXP 25
2705: PPUSH
2706: CALL_OW 200
// tmp := tmp ^ Kamil ;
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_VAR 0 4
2719: PUSH
2720: LD_EXP 25
2724: ADD
2725: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2726: LD_INT 70
2728: PPUSH
2729: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2733: LD_STRING Sophia_L
2735: PPUSH
2736: LD_EXP 1
2740: NOT
2741: PPUSH
2742: LD_VAR 0 2
2746: PPUSH
2747: CALL 28096 0 3
2751: IFFALSE 2851
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2753: LD_ADDR_EXP 27
2757: PUSH
2758: LD_STRING Sophia_L
2760: PPUSH
2761: LD_EXP 1
2765: NOT
2766: PPUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: CALL 28096 0 3
2776: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2777: LD_EXP 27
2781: PPUSH
2782: LD_INT 2
2784: PPUSH
2785: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2789: LD_EXP 27
2793: PPUSH
2794: LD_INT 14
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2804: LD_EXP 27
2808: PPUSH
2809: LD_INT 9
2811: PPUSH
2812: LD_INT 6
2814: PPUSH
2815: CALL_OW 111
// AddComHold ( Sophia ) ;
2819: LD_EXP 27
2823: PPUSH
2824: CALL_OW 200
// tmp := tmp ^ Sophia ;
2828: LD_ADDR_VAR 0 4
2832: PUSH
2833: LD_VAR 0 4
2837: PUSH
2838: LD_EXP 27
2842: ADD
2843: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2844: LD_INT 70
2846: PPUSH
2847: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2851: LD_ADDR_VAR 0 5
2855: PUSH
2856: LD_STRING 04_1_others_L
2858: PPUSH
2859: CALL_OW 31
2863: ST_TO_ADDR
// if tmp2 then
2864: LD_VAR 0 5
2868: IFFALSE 2965
// for i in tmp2 do
2870: LD_ADDR_VAR 0 3
2874: PUSH
2875: LD_VAR 0 5
2879: PUSH
2880: FOR_IN
2881: IFFALSE 2963
// begin SetDir ( i , 2 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2910: LD_ADDR_EXP 34
2914: PUSH
2915: LD_EXP 34
2919: PPUSH
2920: LD_EXP 34
2924: PUSH
2925: LD_INT 1
2927: PLUS
2928: PPUSH
2929: LD_VAR 0 3
2933: PPUSH
2934: CALL_OW 1
2938: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 17
2946: PPUSH
2947: LD_INT 14
2949: PPUSH
2950: CALL_OW 111
// wait ( 0 0$2 ) ;
2954: LD_INT 70
2956: PPUSH
2957: CALL_OW 67
// end ;
2961: GO 2880
2963: POP
2964: POP
// for i in tmp union tmp2 do
2965: LD_ADDR_VAR 0 3
2969: PUSH
2970: LD_VAR 0 4
2974: PUSH
2975: LD_VAR 0 5
2979: UNION
2980: PUSH
2981: FOR_IN
2982: IFFALSE 3012
// begin SetSide ( i , 2 ) ;
2984: LD_VAR 0 3
2988: PPUSH
2989: LD_INT 2
2991: PPUSH
2992: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_EXP 21
3005: PPUSH
3006: CALL_OW 112
// end ;
3010: GO 2981
3012: POP
3013: POP
// end ; end_of_file
3014: LD_VAR 0 1
3018: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3019: LD_INT 0
3021: PPUSH
3022: PPUSH
3023: PPUSH
// uc_side := 3 ;
3024: LD_ADDR_OWVAR 20
3028: PUSH
3029: LD_INT 3
3031: ST_TO_ADDR
// uc_nation := 3 ;
3032: LD_ADDR_OWVAR 21
3036: PUSH
3037: LD_INT 3
3039: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3040: LD_ADDR_EXP 37
3044: PUSH
3045: EMPTY
3046: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3047: LD_ADDR_EXP 38
3051: PUSH
3052: EMPTY
3053: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3054: LD_ADDR_EXP 41
3058: PUSH
3059: EMPTY
3060: ST_TO_ADDR
// for i := 1 to 2 do
3061: LD_ADDR_VAR 0 2
3065: PUSH
3066: DOUBLE
3067: LD_INT 1
3069: DEC
3070: ST_TO_ADDR
3071: LD_INT 2
3073: PUSH
3074: FOR_TO
3075: IFFALSE 3210
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3077: LD_INT 0
3079: PPUSH
3080: LD_INT 1
3082: PPUSH
3083: LD_INT 3
3085: PUSH
3086: LD_INT 4
3088: PUSH
3089: LD_INT 5
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: PUSH
3097: LD_OWVAR 67
3101: ARRAY
3102: PPUSH
3103: CALL_OW 380
// un := CreateHuman ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: CALL_OW 44
3116: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3117: LD_ADDR_EXP 37
3121: PUSH
3122: LD_EXP 37
3126: PPUSH
3127: LD_EXP 37
3131: PUSH
3132: LD_INT 1
3134: PLUS
3135: PPUSH
3136: LD_VAR 0 3
3140: PPUSH
3141: CALL_OW 1
3145: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3146: LD_VAR 0 3
3150: PPUSH
3151: LD_INT 100
3153: PPUSH
3154: LD_INT 63
3156: PPUSH
3157: LD_INT 3
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 97
3174: PPUSH
3175: LD_INT 64
3177: PPUSH
3178: CALL_OW 428
3182: PUSH
3183: LD_INT 98
3185: PPUSH
3186: LD_INT 58
3188: PPUSH
3189: CALL_OW 428
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PUSH
3198: LD_VAR 0 2
3202: ARRAY
3203: PPUSH
3204: CALL_OW 120
// end ;
3208: GO 3074
3210: POP
3211: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3212: LD_INT 51
3214: PPUSH
3215: LD_INT 77
3217: PPUSH
3218: CALL_OW 428
3222: PPUSH
3223: CALL_OW 274
3227: PPUSH
3228: LD_INT 1
3230: PPUSH
3231: LD_INT 120
3233: PPUSH
3234: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3238: LD_INT 10
3240: PPUSH
3241: CALL_OW 274
3245: PPUSH
3246: LD_INT 2
3248: PPUSH
3249: LD_INT 300
3251: PPUSH
3252: CALL_OW 277
// for i := 1 to 2 do
3256: LD_ADDR_VAR 0 2
3260: PUSH
3261: DOUBLE
3262: LD_INT 1
3264: DEC
3265: ST_TO_ADDR
3266: LD_INT 2
3268: PUSH
3269: FOR_TO
3270: IFFALSE 3384
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3272: LD_INT 0
3274: PPUSH
3275: LD_INT 1
3277: PPUSH
3278: LD_INT 3
3280: PUSH
3281: LD_INT 4
3283: PUSH
3284: LD_INT 5
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: PUSH
3292: LD_OWVAR 67
3296: ARRAY
3297: PPUSH
3298: CALL_OW 380
// un := CreateHuman ;
3302: LD_ADDR_VAR 0 3
3306: PUSH
3307: CALL_OW 44
3311: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3312: LD_ADDR_EXP 38
3316: PUSH
3317: LD_EXP 38
3321: PPUSH
3322: LD_EXP 38
3326: PUSH
3327: LD_INT 1
3329: PLUS
3330: PPUSH
3331: LD_VAR 0 3
3335: PPUSH
3336: CALL_OW 1
3340: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3341: LD_VAR 0 3
3345: PPUSH
3346: LD_INT 198
3348: PPUSH
3349: LD_INT 106
3351: PPUSH
3352: CALL_OW 428
3356: PUSH
3357: LD_INT 205
3359: PPUSH
3360: LD_INT 114
3362: PPUSH
3363: CALL_OW 428
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_VAR 0 2
3376: ARRAY
3377: PPUSH
3378: CALL_OW 52
// end ;
3382: GO 3269
3384: POP
3385: POP
// for i := 1 to 2 do
3386: LD_ADDR_VAR 0 2
3390: PUSH
3391: DOUBLE
3392: LD_INT 1
3394: DEC
3395: ST_TO_ADDR
3396: LD_INT 2
3398: PUSH
3399: FOR_TO
3400: IFFALSE 3477
// begin PrepareHuman ( false , 2 , 3 ) ;
3402: LD_INT 0
3404: PPUSH
3405: LD_INT 2
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: CALL_OW 380
// un := CreateHuman ;
3415: LD_ADDR_VAR 0 3
3419: PUSH
3420: CALL_OW 44
3424: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3425: LD_ADDR_EXP 38
3429: PUSH
3430: LD_EXP 38
3434: PPUSH
3435: LD_EXP 38
3439: PUSH
3440: LD_INT 1
3442: PLUS
3443: PPUSH
3444: LD_VAR 0 3
3448: PPUSH
3449: CALL_OW 1
3453: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_INT 204
3461: PPUSH
3462: LD_INT 108
3464: PPUSH
3465: LD_INT 2
3467: PPUSH
3468: LD_INT 0
3470: PPUSH
3471: CALL_OW 50
// end ;
3475: GO 3399
3477: POP
3478: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3479: LD_ADDR_VAR 0 2
3483: PUSH
3484: DOUBLE
3485: LD_INT 1
3487: DEC
3488: ST_TO_ADDR
3489: LD_INT 4
3491: PUSH
3492: LD_INT 5
3494: PUSH
3495: LD_INT 6
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: LD_OWVAR 67
3507: ARRAY
3508: PUSH
3509: FOR_TO
3510: IFFALSE 3631
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3512: LD_INT 0
3514: PPUSH
3515: LD_INT 1
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: LD_INT 2
3523: PUSH
3524: LD_INT 4
3526: PUSH
3527: LD_INT 1
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 1
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 12
3547: ARRAY
3548: PPUSH
3549: LD_INT 3
3551: PUSH
3552: LD_INT 4
3554: PUSH
3555: LD_INT 5
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_OWVAR 67
3567: ARRAY
3568: PPUSH
3569: CALL_OW 380
// un := CreateHuman ;
3573: LD_ADDR_VAR 0 3
3577: PUSH
3578: CALL_OW 44
3582: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3583: LD_VAR 0 3
3587: PPUSH
3588: LD_INT 11
3590: PPUSH
3591: LD_INT 0
3593: PPUSH
3594: CALL 62880 0 3
3598: IFFALSE 3629
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3600: LD_ADDR_EXP 39
3604: PUSH
3605: LD_EXP 39
3609: PPUSH
3610: LD_EXP 39
3614: PUSH
3615: LD_INT 1
3617: PLUS
3618: PPUSH
3619: LD_VAR 0 3
3623: PPUSH
3624: CALL_OW 1
3628: ST_TO_ADDR
// end ;
3629: GO 3509
3631: POP
3632: POP
// for i := 1 to 3 do
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: DOUBLE
3639: LD_INT 1
3641: DEC
3642: ST_TO_ADDR
3643: LD_INT 3
3645: PUSH
3646: FOR_TO
3647: IFFALSE 3737
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 4
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_OWVAR 67
3673: ARRAY
3674: PPUSH
3675: CALL_OW 380
// un := CreateHuman ;
3679: LD_ADDR_VAR 0 3
3683: PUSH
3684: CALL_OW 44
3688: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3689: LD_VAR 0 3
3693: PPUSH
3694: LD_INT 11
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL 62880 0 3
3704: IFFALSE 3735
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3706: LD_ADDR_EXP 39
3710: PUSH
3711: LD_EXP 39
3715: PPUSH
3716: LD_EXP 39
3720: PUSH
3721: LD_INT 1
3723: PLUS
3724: PPUSH
3725: LD_VAR 0 3
3729: PPUSH
3730: CALL_OW 1
3734: ST_TO_ADDR
// end ;
3735: GO 3646
3737: POP
3738: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 5
3751: PUSH
3752: LD_INT 6
3754: PUSH
3755: LD_INT 7
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: PUSH
3763: LD_OWVAR 67
3767: ARRAY
3768: PUSH
3769: FOR_TO
3770: IFFALSE 3891
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3772: LD_INT 0
3774: PPUSH
3775: LD_INT 1
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 1
3799: PPUSH
3800: LD_INT 5
3802: PPUSH
3803: CALL_OW 12
3807: ARRAY
3808: PPUSH
3809: LD_INT 3
3811: PUSH
3812: LD_INT 4
3814: PUSH
3815: LD_INT 5
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_OWVAR 67
3827: ARRAY
3828: PPUSH
3829: CALL_OW 380
// un := CreateHuman ;
3833: LD_ADDR_VAR 0 3
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3843: LD_VAR 0 3
3847: PPUSH
3848: LD_INT 15
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL 62880 0 3
3858: IFFALSE 3889
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3860: LD_ADDR_EXP 40
3864: PUSH
3865: LD_EXP 40
3869: PPUSH
3870: LD_EXP 40
3874: PUSH
3875: LD_INT 1
3877: PLUS
3878: PPUSH
3879: LD_VAR 0 3
3883: PPUSH
3884: CALL_OW 1
3888: ST_TO_ADDR
// end ;
3889: GO 3769
3891: POP
3892: POP
// end ;
3893: LD_VAR 0 1
3897: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3898: LD_INT 0
3900: PPUSH
3901: PPUSH
3902: PPUSH
// uc_side := 3 ;
3903: LD_ADDR_OWVAR 20
3907: PUSH
3908: LD_INT 3
3910: ST_TO_ADDR
// uc_nation := 3 ;
3911: LD_ADDR_OWVAR 21
3915: PUSH
3916: LD_INT 3
3918: ST_TO_ADDR
// for i := 1 to 6 do
3919: LD_ADDR_VAR 0 2
3923: PUSH
3924: DOUBLE
3925: LD_INT 1
3927: DEC
3928: ST_TO_ADDR
3929: LD_INT 6
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4012
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3935: LD_INT 0
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 4
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 1
3950: PPUSH
3951: LD_INT 2
3953: PPUSH
3954: CALL_OW 12
3958: ARRAY
3959: PPUSH
3960: LD_INT 0
3962: PPUSH
3963: CALL_OW 380
// un := CreateHuman ;
3967: LD_ADDR_VAR 0 3
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3977: LD_VAR 0 3
3981: PPUSH
3982: LD_INT 54
3984: PPUSH
3985: LD_INT 88
3987: PPUSH
3988: LD_INT 12
3990: PPUSH
3991: LD_INT 0
3993: PPUSH
3994: CALL_OW 50
// SetLives ( un , 1 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 1
4005: PPUSH
4006: CALL_OW 234
// end ;
4010: GO 3932
4012: POP
4013: POP
// uc_side := 3 ;
4014: LD_ADDR_OWVAR 20
4018: PUSH
4019: LD_INT 3
4021: ST_TO_ADDR
// uc_nation := 0 ;
4022: LD_ADDR_OWVAR 21
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4030: LD_ADDR_EXP 42
4034: PUSH
4035: EMPTY
4036: ST_TO_ADDR
// apeEngGroup := [ ] ;
4037: LD_ADDR_EXP 43
4041: PUSH
4042: EMPTY
4043: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 4
4056: PUSH
4057: LD_INT 5
4059: PUSH
4060: LD_INT 6
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: LD_OWVAR 67
4072: ARRAY
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4189
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4077: LD_INT 0
4079: PPUSH
4080: LD_INT 15
4082: PPUSH
4083: LD_INT 3
4085: PUSH
4086: LD_INT 4
4088: PUSH
4089: LD_INT 5
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: LD_OWVAR 67
4101: ARRAY
4102: PPUSH
4103: CALL_OW 380
// un := CreateHuman ;
4107: LD_ADDR_VAR 0 3
4111: PUSH
4112: CALL_OW 44
4116: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4117: LD_ADDR_EXP 42
4121: PUSH
4122: LD_EXP 42
4126: PPUSH
4127: LD_EXP 42
4131: PUSH
4132: LD_INT 1
4134: PLUS
4135: PPUSH
4136: LD_VAR 0 3
4140: PPUSH
4141: CALL_OW 1
4145: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4146: LD_VAR 0 3
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: LD_INT 5
4156: PPUSH
4157: CALL_OW 12
4161: PPUSH
4162: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4166: LD_VAR 0 3
4170: PPUSH
4171: LD_INT 56
4173: PPUSH
4174: LD_INT 82
4176: PPUSH
4177: LD_INT 6
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL_OW 50
// end ;
4187: GO 4074
4189: POP
4190: POP
// for i := 1 to 2 do
4191: LD_ADDR_VAR 0 2
4195: PUSH
4196: DOUBLE
4197: LD_INT 1
4199: DEC
4200: ST_TO_ADDR
4201: LD_INT 2
4203: PUSH
4204: FOR_TO
4205: IFFALSE 4281
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4207: LD_INT 0
4209: PPUSH
4210: LD_INT 16
4212: PPUSH
4213: LD_INT 4
4215: PPUSH
4216: CALL_OW 380
// un := CreateHuman ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: CALL_OW 44
4229: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4230: LD_ADDR_EXP 43
4234: PUSH
4235: LD_EXP 43
4239: PPUSH
4240: LD_EXP 43
4244: PUSH
4245: LD_INT 1
4247: PLUS
4248: PPUSH
4249: LD_VAR 0 3
4253: PPUSH
4254: CALL_OW 1
4258: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_INT 51
4266: PPUSH
4267: LD_INT 77
4269: PPUSH
4270: CALL_OW 428
4274: PPUSH
4275: CALL_OW 52
// end ;
4279: GO 4204
4281: POP
4282: POP
// end ;
4283: LD_VAR 0 1
4287: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4288: LD_EXP 42
4292: PPUSH
4293: LD_INT 3
4295: PUSH
4296: LD_INT 24
4298: PUSH
4299: LD_INT 600
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 3
4312: PUSH
4313: LD_INT 54
4315: PUSH
4316: EMPTY
4317: LIST
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PPUSH
4327: CALL_OW 72
4331: PUSH
4332: LD_INT 66
4334: PPUSH
4335: LD_INT 89
4337: PPUSH
4338: CALL_OW 428
4342: PPUSH
4343: CALL_OW 302
4347: AND
4348: IFFALSE 4433
4350: GO 4352
4352: DISABLE
4353: LD_INT 0
4355: PPUSH
// begin enable ;
4356: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4357: LD_ADDR_VAR 0 1
4361: PUSH
4362: LD_EXP 42
4366: PPUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 24
4372: PUSH
4373: LD_INT 600
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 3
4386: PUSH
4387: LD_INT 54
4389: PUSH
4390: EMPTY
4391: LIST
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PPUSH
4401: CALL_OW 72
4405: PUSH
4406: FOR_IN
4407: IFFALSE 4431
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4409: LD_VAR 0 1
4413: PPUSH
4414: LD_INT 66
4416: PPUSH
4417: LD_INT 89
4419: PPUSH
4420: CALL_OW 428
4424: PPUSH
4425: CALL_OW 120
4429: GO 4406
4431: POP
4432: POP
// end ;
4433: PPOPN 1
4435: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4436: LD_INT 22
4438: PUSH
4439: LD_INT 2
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 92
4448: PUSH
4449: LD_INT 54
4451: PUSH
4452: LD_INT 77
4454: PUSH
4455: LD_INT 8
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 69
4472: IFFALSE 4536
4474: GO 4476
4476: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4477: LD_EXP 43
4481: PPUSH
4482: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4486: LD_EXP 43
4490: PPUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 92
4503: PUSH
4504: LD_INT 54
4506: PUSH
4507: LD_INT 77
4509: PUSH
4510: LD_INT 8
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: PUSH
4528: LD_INT 1
4530: ARRAY
4531: PPUSH
4532: CALL_OW 175
// end ;
4536: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4537: LD_INT 0
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4548: LD_ADDR_VAR 0 3
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4564: LD_ADDR_VAR 0 5
4568: PUSH
4569: LD_INT 16
4571: PUSH
4572: LD_INT 17
4574: PUSH
4575: LD_INT 19
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_VAR 0 3
4587: ARRAY
4588: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4589: LD_ADDR_VAR 0 7
4593: PUSH
4594: LD_INT 159
4596: PUSH
4597: LD_INT 25
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: LD_INT 137
4606: PUSH
4607: LD_INT 37
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PUSH
4614: LD_INT 123
4616: PUSH
4617: LD_INT 55
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: LD_INT 115
4626: PUSH
4627: LD_INT 71
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 106
4636: PUSH
4637: LD_INT 88
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 97
4646: PUSH
4647: LD_INT 114
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 75
4656: PUSH
4657: LD_INT 146
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 206
4675: PUSH
4676: LD_INT 135
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: LD_INT 184
4685: PUSH
4686: LD_INT 111
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 154
4695: PUSH
4696: LD_INT 97
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: LD_INT 122
4705: PUSH
4706: LD_INT 80
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PUSH
4713: LD_INT 109
4715: PUSH
4716: LD_INT 78
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: LD_INT 113
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 75
4735: PUSH
4736: LD_INT 147
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 185
4754: PUSH
4755: LD_INT 72
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 171
4764: PUSH
4765: LD_INT 83
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 161
4774: PUSH
4775: LD_INT 99
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 125
4784: PUSH
4785: LD_INT 82
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 105
4794: PUSH
4795: LD_INT 90
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 96
4804: PUSH
4805: LD_INT 116
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 75
4814: PUSH
4815: LD_INT 147
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_VAR 0 3
4840: ARRAY
4841: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4842: LD_ADDR_VAR 0 4
4846: PUSH
4847: LD_INT 4
4849: PUSH
4850: LD_INT 5
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_VAR 0 3
4865: ARRAY
4866: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4867: LD_ADDR_VAR 0 6
4871: PUSH
4872: LD_INT 22
4874: PUSH
4875: LD_INT 20
4877: PUSH
4878: LD_INT 21
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 3
4890: ARRAY
4891: ST_TO_ADDR
// for i := 1 to 2 do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_INT 2
4904: PUSH
4905: FOR_TO
4906: IFFALSE 4924
// EraseResourceArea ( i , outerSpawnArea ) ;
4908: LD_VAR 0 2
4912: PPUSH
4913: LD_VAR 0 6
4917: PPUSH
4918: CALL_OW 286
4922: GO 4905
4924: POP
4925: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4926: LD_VAR 0 6
4930: PPUSH
4931: LD_INT 2
4933: PUSH
4934: LD_INT 21
4936: PUSH
4937: LD_INT 1
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 21
4946: PUSH
4947: LD_INT 2
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 21
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: PPUSH
4970: CALL_OW 70
4974: IFFALSE 5189
// repeat wait ( 0 0$1 ) ;
4976: LD_INT 35
4978: PPUSH
4979: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4983: LD_VAR 0 6
4987: PPUSH
4988: LD_INT 2
4990: PUSH
4991: LD_INT 21
4993: PUSH
4994: LD_INT 2
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 21
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 70
5020: IFFALSE 5081
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5022: LD_ADDR_VAR 0 2
5026: PUSH
5027: LD_VAR 0 6
5031: PPUSH
5032: LD_INT 2
5034: PUSH
5035: LD_INT 21
5037: PUSH
5038: LD_INT 2
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 3
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: LIST
5059: PPUSH
5060: CALL_OW 70
5064: PUSH
5065: FOR_IN
5066: IFFALSE 5079
// RemoveUnit ( i ) ;
5068: LD_VAR 0 2
5072: PPUSH
5073: CALL_OW 64
5077: GO 5065
5079: POP
5080: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5081: LD_VAR 0 6
5085: PPUSH
5086: LD_INT 21
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: IFFALSE 5149
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 21
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 70
5126: PUSH
5127: FOR_IN
5128: IFFALSE 5147
// ComMoveXY ( i , 113 , 53 ) ;
5130: LD_VAR 0 2
5134: PPUSH
5135: LD_INT 113
5137: PPUSH
5138: LD_INT 53
5140: PPUSH
5141: CALL_OW 111
5145: GO 5127
5147: POP
5148: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5149: LD_VAR 0 6
5153: PPUSH
5154: LD_INT 2
5156: PUSH
5157: LD_INT 21
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: LIST
5181: PPUSH
5182: CALL_OW 70
5186: NOT
5187: IFFALSE 4976
// case convoyCounter of 1 .. 3 :
5189: LD_EXP 16
5193: PUSH
5194: LD_INT 1
5196: DOUBLE
5197: GREATEREQUAL
5198: IFFALSE 5206
5200: LD_INT 3
5202: DOUBLE
5203: LESSEQUAL
5204: IFTRUE 5208
5206: GO 5803
5208: POP
// begin uc_side := 3 ;
5209: LD_ADDR_OWVAR 20
5213: PUSH
5214: LD_INT 3
5216: ST_TO_ADDR
// uc_nation := 3 ;
5217: LD_ADDR_OWVAR 21
5221: PUSH
5222: LD_INT 3
5224: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5225: LD_ADDR_VAR 0 2
5229: PUSH
5230: DOUBLE
5231: LD_INT 1
5233: DEC
5234: ST_TO_ADDR
5235: LD_INT 5
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 7
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: LD_OWVAR 67
5253: ARRAY
5254: PUSH
5255: LD_EXP 16
5259: MINUS
5260: PUSH
5261: FOR_TO
5262: IFFALSE 5449
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5264: LD_INT 0
5266: PPUSH
5267: LD_INT 1
5269: PUSH
5270: LD_INT 1
5272: PUSH
5273: LD_INT 1
5275: PUSH
5276: LD_INT 4
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 1
5287: PPUSH
5288: LD_INT 4
5290: PPUSH
5291: CALL_OW 12
5295: ARRAY
5296: PPUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 6
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: LIST
5310: PUSH
5311: LD_OWVAR 67
5315: ARRAY
5316: PPUSH
5317: CALL_OW 380
// un := CreateHuman ;
5321: LD_ADDR_VAR 0 8
5325: PUSH
5326: CALL_OW 44
5330: ST_TO_ADDR
// SetDir ( un , dir ) ;
5331: LD_VAR 0 8
5335: PPUSH
5336: LD_VAR 0 4
5340: PPUSH
5341: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5345: LD_VAR 0 8
5349: PPUSH
5350: LD_VAR 0 5
5354: PPUSH
5355: LD_INT 0
5357: PPUSH
5358: CALL 62880 0 3
5362: IFFALSE 5447
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5364: LD_ADDR_EXP 41
5368: PUSH
5369: LD_EXP 41
5373: PPUSH
5374: LD_EXP 41
5378: PUSH
5379: LD_INT 1
5381: PLUS
5382: PPUSH
5383: LD_VAR 0 8
5387: PPUSH
5388: CALL_OW 1
5392: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5393: LD_VAR 0 8
5397: PPUSH
5398: LD_INT 1
5400: PPUSH
5401: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5405: LD_VAR 0 8
5409: PPUSH
5410: LD_VAR 0 7
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: LD_VAR 0 7
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PUSH
5432: LD_INT 2
5434: ARRAY
5435: PPUSH
5436: CALL_OW 111
// wait ( 0 0$2 ) ;
5440: LD_INT 70
5442: PPUSH
5443: CALL_OW 67
// end ; end ;
5447: GO 5261
5449: POP
5450: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: DOUBLE
5457: LD_INT 1
5459: DEC
5460: ST_TO_ADDR
5461: LD_INT 3
5463: PUSH
5464: LD_INT 4
5466: PUSH
5467: LD_INT 4
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PUSH
5481: FOR_TO
5482: IFFALSE 5799
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_INT 3
5489: PPUSH
5490: LD_INT 21
5492: PUSH
5493: LD_INT 22
5495: PUSH
5496: LD_INT 23
5498: PUSH
5499: LD_INT 24
5501: PUSH
5502: LD_INT 24
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: PUSH
5512: LD_OWVAR 67
5516: PPUSH
5517: LD_OWVAR 67
5521: PUSH
5522: LD_INT 2
5524: PLUS
5525: PPUSH
5526: CALL_OW 12
5530: ARRAY
5531: PPUSH
5532: LD_INT 1
5534: PPUSH
5535: LD_INT 1
5537: PPUSH
5538: LD_INT 42
5540: PUSH
5541: LD_INT 44
5543: PUSH
5544: LD_INT 43
5546: PUSH
5547: LD_INT 44
5549: PUSH
5550: LD_INT 46
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 1
5562: PPUSH
5563: LD_OWVAR 67
5567: PUSH
5568: LD_INT 2
5570: PLUS
5571: PPUSH
5572: CALL_OW 12
5576: ARRAY
5577: PPUSH
5578: LD_INT 90
5580: PPUSH
5581: CALL 427 0 7
// un := CreateVehicle ;
5585: LD_ADDR_VAR 0 8
5589: PUSH
5590: CALL_OW 45
5594: ST_TO_ADDR
// SetDir ( un , dir ) ;
5595: LD_VAR 0 8
5599: PPUSH
5600: LD_VAR 0 4
5604: PPUSH
5605: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5609: LD_VAR 0 8
5613: PPUSH
5614: LD_VAR 0 5
5618: PPUSH
5619: LD_INT 0
5621: PPUSH
5622: CALL 62880 0 3
5626: IFFALSE 5797
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5628: LD_ADDR_EXP 41
5632: PUSH
5633: LD_EXP 41
5637: PPUSH
5638: LD_EXP 41
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: PPUSH
5647: LD_VAR 0 8
5651: PPUSH
5652: CALL_OW 1
5656: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5657: LD_INT 0
5659: PPUSH
5660: LD_INT 3
5662: PUSH
5663: LD_INT 4
5665: PUSH
5666: LD_INT 5
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: LIST
5673: PUSH
5674: LD_OWVAR 67
5678: ARRAY
5679: PPUSH
5680: CALL_OW 383
// un := CreateHuman ;
5684: LD_ADDR_VAR 0 8
5688: PUSH
5689: CALL_OW 44
5693: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5694: LD_VAR 0 8
5698: PPUSH
5699: LD_EXP 41
5703: PUSH
5704: LD_EXP 41
5708: ARRAY
5709: PPUSH
5710: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5714: LD_ADDR_EXP 41
5718: PUSH
5719: LD_EXP 41
5723: PPUSH
5724: LD_EXP 41
5728: PUSH
5729: LD_INT 1
5731: PLUS
5732: PPUSH
5733: LD_VAR 0 8
5737: PPUSH
5738: CALL_OW 1
5742: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5743: LD_VAR 0 8
5747: PPUSH
5748: LD_INT 1
5750: PPUSH
5751: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5755: LD_VAR 0 8
5759: PPUSH
5760: LD_VAR 0 7
5764: PUSH
5765: LD_INT 1
5767: ARRAY
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PPUSH
5773: LD_VAR 0 7
5777: PUSH
5778: LD_INT 1
5780: ARRAY
5781: PUSH
5782: LD_INT 2
5784: ARRAY
5785: PPUSH
5786: CALL_OW 111
// wait ( 0 0$3 ) ;
5790: LD_INT 105
5792: PPUSH
5793: CALL_OW 67
// end ; end ;
5797: GO 5481
5799: POP
5800: POP
// end ; 4 .. 7 :
5801: GO 6356
5803: LD_INT 4
5805: DOUBLE
5806: GREATEREQUAL
5807: IFFALSE 5815
5809: LD_INT 7
5811: DOUBLE
5812: LESSEQUAL
5813: IFTRUE 5817
5815: GO 6355
5817: POP
// begin uc_side := 3 ;
5818: LD_ADDR_OWVAR 20
5822: PUSH
5823: LD_INT 3
5825: ST_TO_ADDR
// uc_nation := 3 ;
5826: LD_ADDR_OWVAR 21
5830: PUSH
5831: LD_INT 3
5833: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5834: LD_ADDR_VAR 0 2
5838: PUSH
5839: DOUBLE
5840: LD_INT 1
5842: DEC
5843: ST_TO_ADDR
5844: LD_INT 2
5846: PUSH
5847: LD_INT 3
5849: PUSH
5850: LD_INT 4
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: LIST
5857: PUSH
5858: LD_OWVAR 67
5862: ARRAY
5863: PUSH
5864: FOR_TO
5865: IFFALSE 6025
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5867: LD_INT 0
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: LD_INT 4
5875: PUSH
5876: LD_INT 5
5878: PUSH
5879: LD_INT 6
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: PUSH
5887: LD_OWVAR 67
5891: ARRAY
5892: PPUSH
5893: CALL_OW 380
// un := CreateHuman ;
5897: LD_ADDR_VAR 0 8
5901: PUSH
5902: CALL_OW 44
5906: ST_TO_ADDR
// SetDir ( un , dir ) ;
5907: LD_VAR 0 8
5911: PPUSH
5912: LD_VAR 0 4
5916: PPUSH
5917: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5921: LD_VAR 0 8
5925: PPUSH
5926: LD_VAR 0 5
5930: PPUSH
5931: LD_INT 0
5933: PPUSH
5934: CALL 62880 0 3
5938: IFFALSE 6023
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5940: LD_ADDR_EXP 41
5944: PUSH
5945: LD_EXP 41
5949: PPUSH
5950: LD_EXP 41
5954: PUSH
5955: LD_INT 1
5957: PLUS
5958: PPUSH
5959: LD_VAR 0 8
5963: PPUSH
5964: CALL_OW 1
5968: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5969: LD_VAR 0 8
5973: PPUSH
5974: LD_INT 1
5976: PPUSH
5977: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5981: LD_VAR 0 8
5985: PPUSH
5986: LD_VAR 0 7
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_INT 1
5997: ARRAY
5998: PPUSH
5999: LD_VAR 0 7
6003: PUSH
6004: LD_INT 1
6006: ARRAY
6007: PUSH
6008: LD_INT 2
6010: ARRAY
6011: PPUSH
6012: CALL_OW 111
// wait ( 0 0$2 ) ;
6016: LD_INT 70
6018: PPUSH
6019: CALL_OW 67
// end ; end ;
6023: GO 5864
6025: POP
6026: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: DOUBLE
6033: LD_INT 1
6035: DEC
6036: ST_TO_ADDR
6037: LD_INT 2
6039: PUSH
6040: LD_INT 3
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: LD_OWVAR 67
6055: ARRAY
6056: PUSH
6057: FOR_TO
6058: IFFALSE 6351
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6060: LD_INT 3
6062: PPUSH
6063: LD_INT 3
6065: PPUSH
6066: LD_INT 21
6068: PUSH
6069: LD_INT 22
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 1
6078: PPUSH
6079: LD_INT 2
6081: PPUSH
6082: CALL_OW 12
6086: ARRAY
6087: PPUSH
6088: LD_INT 1
6090: PPUSH
6091: LD_INT 1
6093: PPUSH
6094: LD_INT 42
6096: PUSH
6097: LD_INT 44
6099: PUSH
6100: LD_INT 43
6102: PUSH
6103: LD_INT 44
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 1
6114: PPUSH
6115: LD_OWVAR 67
6119: PUSH
6120: LD_INT 1
6122: PLUS
6123: PPUSH
6124: CALL_OW 12
6128: ARRAY
6129: PPUSH
6130: LD_INT 90
6132: PPUSH
6133: CALL 427 0 7
// un := CreateVehicle ;
6137: LD_ADDR_VAR 0 8
6141: PUSH
6142: CALL_OW 45
6146: ST_TO_ADDR
// SetDir ( un , dir ) ;
6147: LD_VAR 0 8
6151: PPUSH
6152: LD_VAR 0 4
6156: PPUSH
6157: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6161: LD_VAR 0 8
6165: PPUSH
6166: LD_VAR 0 5
6170: PPUSH
6171: LD_INT 0
6173: PPUSH
6174: CALL 62880 0 3
6178: IFFALSE 6349
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6180: LD_ADDR_EXP 41
6184: PUSH
6185: LD_EXP 41
6189: PPUSH
6190: LD_EXP 41
6194: PUSH
6195: LD_INT 1
6197: PLUS
6198: PPUSH
6199: LD_VAR 0 8
6203: PPUSH
6204: CALL_OW 1
6208: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6209: LD_INT 0
6211: PPUSH
6212: LD_INT 3
6214: PUSH
6215: LD_INT 4
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: PUSH
6226: LD_OWVAR 67
6230: ARRAY
6231: PPUSH
6232: CALL_OW 383
// un := CreateHuman ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 44
6245: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_EXP 41
6255: PUSH
6256: LD_EXP 41
6260: ARRAY
6261: PPUSH
6262: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6266: LD_ADDR_EXP 41
6270: PUSH
6271: LD_EXP 41
6275: PPUSH
6276: LD_EXP 41
6280: PUSH
6281: LD_INT 1
6283: PLUS
6284: PPUSH
6285: LD_VAR 0 8
6289: PPUSH
6290: CALL_OW 1
6294: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6295: LD_VAR 0 8
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6307: LD_VAR 0 8
6311: PPUSH
6312: LD_VAR 0 7
6316: PUSH
6317: LD_INT 1
6319: ARRAY
6320: PUSH
6321: LD_INT 1
6323: ARRAY
6324: PPUSH
6325: LD_VAR 0 7
6329: PUSH
6330: LD_INT 1
6332: ARRAY
6333: PUSH
6334: LD_INT 2
6336: ARRAY
6337: PPUSH
6338: CALL_OW 111
// wait ( 0 0$2 ) ;
6342: LD_INT 70
6344: PPUSH
6345: CALL_OW 67
// end ; end ;
6349: GO 6057
6351: POP
6352: POP
// end ; end ;
6353: GO 6356
6355: POP
// repeat wait ( 0 0$1 ) ;
6356: LD_INT 35
6358: PPUSH
6359: CALL_OW 67
// for un in ruConvoySquad do
6363: LD_ADDR_VAR 0 8
6367: PUSH
6368: LD_EXP 41
6372: PUSH
6373: FOR_IN
6374: IFFALSE 6869
// begin if IsInArea ( un , westSouthOutArea ) then
6376: LD_VAR 0 8
6380: PPUSH
6381: LD_INT 18
6383: PPUSH
6384: CALL_OW 308
6388: IFFALSE 6467
// begin if GetType ( un ) = unit_vehicle then
6390: LD_VAR 0 8
6394: PPUSH
6395: CALL_OW 247
6399: PUSH
6400: LD_INT 2
6402: EQUAL
6403: IFFALSE 6426
// ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6405: LD_ADDR_EXP 41
6409: PUSH
6410: LD_EXP 41
6414: PUSH
6415: LD_VAR 0 8
6419: PPUSH
6420: CALL_OW 311
6424: DIFF
6425: ST_TO_ADDR
// convoySavedCounter := convoySavedCounter + 1 ;
6426: LD_ADDR_EXP 15
6430: PUSH
6431: LD_EXP 15
6435: PUSH
6436: LD_INT 1
6438: PLUS
6439: ST_TO_ADDR
// RemoveUnit ( un ) ;
6440: LD_VAR 0 8
6444: PPUSH
6445: CALL_OW 64
// ruConvoySquad := ruConvoySquad diff un ;
6449: LD_ADDR_EXP 41
6453: PUSH
6454: LD_EXP 41
6458: PUSH
6459: LD_VAR 0 8
6463: DIFF
6464: ST_TO_ADDR
// break ;
6465: GO 6869
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6467: LD_VAR 0 8
6471: PPUSH
6472: CALL_OW 305
6476: NOT
6477: PUSH
6478: LD_VAR 0 8
6482: PPUSH
6483: CALL_OW 310
6487: NOT
6488: AND
6489: IFFALSE 6507
// ruConvoySquad := ruConvoySquad diff un ;
6491: LD_ADDR_EXP 41
6495: PUSH
6496: LD_EXP 41
6500: PUSH
6501: LD_VAR 0 8
6505: DIFF
6506: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6507: LD_VAR 0 8
6511: PPUSH
6512: CALL_OW 302
6516: PUSH
6517: LD_VAR 0 8
6521: PPUSH
6522: CALL_OW 314
6526: NOT
6527: AND
6528: IFFALSE 6867
// begin tag := GetTag ( un ) ;
6530: LD_ADDR_VAR 0 9
6534: PUSH
6535: LD_VAR 0 8
6539: PPUSH
6540: CALL_OW 110
6544: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6545: LD_VAR 0 8
6549: PPUSH
6550: LD_VAR 0 7
6554: PUSH
6555: LD_VAR 0 9
6559: PUSH
6560: LD_INT 1
6562: PLUS
6563: ARRAY
6564: PUSH
6565: LD_INT 1
6567: ARRAY
6568: PPUSH
6569: LD_VAR 0 7
6573: PUSH
6574: LD_VAR 0 9
6578: PUSH
6579: LD_INT 1
6581: PLUS
6582: ARRAY
6583: PUSH
6584: LD_INT 2
6586: ARRAY
6587: PPUSH
6588: CALL_OW 297
6592: PUSH
6593: LD_INT 6
6595: LESS
6596: IFFALSE 6707
// begin SetTag ( un , tag + 1 ) ;
6598: LD_VAR 0 8
6602: PPUSH
6603: LD_VAR 0 9
6607: PUSH
6608: LD_INT 1
6610: PLUS
6611: PPUSH
6612: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6616: LD_VAR 0 8
6620: PPUSH
6621: CALL_OW 247
6625: PUSH
6626: LD_INT 2
6628: EQUAL
6629: PUSH
6630: LD_VAR 0 8
6634: PPUSH
6635: CALL_OW 257
6639: PUSH
6640: LD_INT 3
6642: EQUAL
6643: OR
6644: IFFALSE 6705
// begin AddComWait ( un , 0 0$4 ) ;
6646: LD_VAR 0 8
6650: PPUSH
6651: LD_INT 140
6653: PPUSH
6654: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6658: LD_VAR 0 8
6662: PPUSH
6663: LD_VAR 0 7
6667: PUSH
6668: LD_VAR 0 9
6672: PUSH
6673: LD_INT 1
6675: PLUS
6676: ARRAY
6677: PUSH
6678: LD_INT 1
6680: ARRAY
6681: PPUSH
6682: LD_VAR 0 7
6686: PUSH
6687: LD_VAR 0 9
6691: PUSH
6692: LD_INT 1
6694: PLUS
6695: ARRAY
6696: PUSH
6697: LD_INT 2
6699: ARRAY
6700: PPUSH
6701: CALL_OW 174
// end ; end else
6705: GO 6867
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6707: LD_VAR 0 8
6711: PPUSH
6712: CALL_OW 257
6716: PUSH
6717: LD_INT 4
6719: EQUAL
6720: PUSH
6721: LD_EXP 41
6725: PPUSH
6726: LD_INT 21
6728: PUSH
6729: LD_INT 1
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 3
6738: PUSH
6739: LD_INT 24
6741: PUSH
6742: LD_INT 1000
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PPUSH
6757: CALL_OW 72
6761: AND
6762: IFFALSE 6820
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6764: LD_VAR 0 8
6768: PPUSH
6769: LD_EXP 41
6773: PPUSH
6774: LD_INT 21
6776: PUSH
6777: LD_INT 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 3
6786: PUSH
6787: LD_INT 24
6789: PUSH
6790: LD_INT 1000
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PPUSH
6805: CALL_OW 72
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PPUSH
6814: CALL_OW 128
6818: GO 6867
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 7
6829: PUSH
6830: LD_VAR 0 9
6834: PUSH
6835: LD_INT 1
6837: PLUS
6838: ARRAY
6839: PUSH
6840: LD_INT 1
6842: ARRAY
6843: PPUSH
6844: LD_VAR 0 7
6848: PUSH
6849: LD_VAR 0 9
6853: PUSH
6854: LD_INT 1
6856: PLUS
6857: ARRAY
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: CALL_OW 114
// end ; end ; end ;
6867: GO 6373
6869: POP
6870: POP
// until not ruConvoySquad ;
6871: LD_EXP 41
6875: NOT
6876: IFFALSE 6356
// end ;
6878: LD_VAR 0 1
6882: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6883: LD_EXP 16
6887: PUSH
6888: LD_INT 3
6890: PPUSH
6891: LD_INT 5
6893: PPUSH
6894: CALL_OW 12
6898: LESS
6899: PUSH
6900: LD_EXP 41
6904: NOT
6905: AND
6906: PUSH
6907: LD_OWVAR 67
6911: PUSH
6912: LD_INT 1
6914: GREATER
6915: AND
6916: IFFALSE 7304
6918: GO 6920
6920: DISABLE
6921: LD_INT 0
6923: PPUSH
6924: PPUSH
6925: PPUSH
// begin uc_side := 3 ;
6926: LD_ADDR_OWVAR 20
6930: PUSH
6931: LD_INT 3
6933: ST_TO_ADDR
// uc_nation := 3 ;
6934: LD_ADDR_OWVAR 21
6938: PUSH
6939: LD_INT 3
6941: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_INT 2
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: LD_INT 4
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_OWVAR 67
6970: ARRAY
6971: PUSH
6972: FOR_TO
6973: IFFALSE 7225
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
6975: LD_INT 3
6977: PPUSH
6978: LD_INT 3
6980: PPUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_INT 23
6989: PUSH
6990: LD_INT 24
6992: PUSH
6993: LD_INT 24
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: PUSH
7003: LD_OWVAR 67
7007: PPUSH
7008: LD_OWVAR 67
7012: PUSH
7013: LD_INT 2
7015: PLUS
7016: PPUSH
7017: CALL_OW 12
7021: ARRAY
7022: PPUSH
7023: LD_INT 1
7025: PPUSH
7026: LD_INT 1
7028: PPUSH
7029: LD_INT 42
7031: PUSH
7032: LD_INT 44
7034: PUSH
7035: LD_INT 43
7037: PUSH
7038: LD_INT 44
7040: PUSH
7041: LD_INT 46
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 1
7053: PPUSH
7054: LD_OWVAR 67
7058: PUSH
7059: LD_INT 2
7061: PLUS
7062: PPUSH
7063: CALL_OW 12
7067: ARRAY
7068: PPUSH
7069: LD_INT 90
7071: PPUSH
7072: CALL 427 0 7
// un := CreateVehicle ;
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: CALL_OW 45
7085: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7086: LD_VAR 0 3
7090: PPUSH
7091: LD_INT 0
7093: PPUSH
7094: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7098: LD_VAR 0 3
7102: PPUSH
7103: LD_INT 23
7105: PPUSH
7106: LD_INT 0
7108: PPUSH
7109: CALL 62880 0 3
7113: IFFALSE 7223
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7115: LD_ADDR_VAR 0 2
7119: PUSH
7120: LD_VAR 0 2
7124: PPUSH
7125: LD_VAR 0 2
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: PPUSH
7134: LD_VAR 0 3
7138: PPUSH
7139: CALL_OW 1
7143: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7144: LD_INT 0
7146: PPUSH
7147: LD_INT 3
7149: PUSH
7150: LD_INT 4
7152: PUSH
7153: LD_INT 5
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: PUSH
7161: LD_OWVAR 67
7165: ARRAY
7166: PPUSH
7167: CALL_OW 383
// un := CreateHuman ;
7171: LD_ADDR_VAR 0 3
7175: PUSH
7176: CALL_OW 44
7180: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7181: LD_VAR 0 3
7185: PPUSH
7186: LD_VAR 0 2
7190: PUSH
7191: LD_VAR 0 2
7195: ARRAY
7196: PPUSH
7197: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7201: LD_VAR 0 3
7205: PPUSH
7206: LD_INT 80
7208: PPUSH
7209: LD_INT 139
7211: PPUSH
7212: CALL_OW 111
// wait ( 0 0$3 ) ;
7216: LD_INT 105
7218: PPUSH
7219: CALL_OW 67
// end ; end ;
7223: GO 6972
7225: POP
7226: POP
// for i in tmp do
7227: LD_ADDR_VAR 0 1
7231: PUSH
7232: LD_VAR 0 2
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7302
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7240: LD_VAR 0 1
7244: PPUSH
7245: LD_INT 101
7247: PPUSH
7248: LD_INT 102
7250: PPUSH
7251: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7255: LD_VAR 0 1
7259: PPUSH
7260: LD_INT 110
7262: PPUSH
7263: LD_INT 78
7265: PPUSH
7266: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7270: LD_VAR 0 1
7274: PPUSH
7275: LD_INT 75
7277: PPUSH
7278: LD_INT 101
7280: PPUSH
7281: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7285: LD_VAR 0 1
7289: PPUSH
7290: LD_INT 57
7292: PPUSH
7293: LD_INT 83
7295: PPUSH
7296: CALL_OW 174
// end ;
7300: GO 7237
7302: POP
7303: POP
// end ; end_of_file
7304: PPOPN 3
7306: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7307: LD_VAR 0 1
7311: PUSH
7312: LD_EXP 21
7316: EQUAL
7317: IFFALSE 7326
// YouLost ( Heike ) ;
7319: LD_STRING Heike
7321: PPUSH
7322: CALL_OW 104
// if un in apeSoldGroup then
7326: LD_VAR 0 1
7330: PUSH
7331: LD_EXP 42
7335: IN
7336: IFFALSE 7354
// apeSoldGroup := apeSoldGroup diff un ;
7338: LD_ADDR_EXP 42
7342: PUSH
7343: LD_EXP 42
7347: PUSH
7348: LD_VAR 0 1
7352: DIFF
7353: ST_TO_ADDR
// if un in apeEngGroup then
7354: LD_VAR 0 1
7358: PUSH
7359: LD_EXP 43
7363: IN
7364: IFFALSE 7382
// apeEngGroup := apeEngGroup diff un ;
7366: LD_ADDR_EXP 43
7370: PUSH
7371: LD_EXP 43
7375: PUSH
7376: LD_VAR 0 1
7380: DIFF
7381: ST_TO_ADDR
// if un in oilBaseGuard then
7382: LD_VAR 0 1
7386: PUSH
7387: LD_EXP 38
7391: IN
7392: IFFALSE 7410
// oilBaseGuard := oilBaseGuard diff un ;
7394: LD_ADDR_EXP 38
7398: PUSH
7399: LD_EXP 38
7403: PUSH
7404: LD_VAR 0 1
7408: DIFF
7409: ST_TO_ADDR
// if un in ruNorthGroup then
7410: LD_VAR 0 1
7414: PUSH
7415: LD_EXP 39
7419: IN
7420: IFFALSE 7438
// ruNorthGroup := ruNorthGroup diff un ;
7422: LD_ADDR_EXP 39
7426: PUSH
7427: LD_EXP 39
7431: PUSH
7432: LD_VAR 0 1
7436: DIFF
7437: ST_TO_ADDR
// if un in ruSouthGroup then
7438: LD_VAR 0 1
7442: PUSH
7443: LD_EXP 40
7447: IN
7448: IFFALSE 7466
// ruSouthGroup := ruSouthGroup diff un ;
7450: LD_ADDR_EXP 40
7454: PUSH
7455: LD_EXP 40
7459: PUSH
7460: LD_VAR 0 1
7464: DIFF
7465: ST_TO_ADDR
// if un in ruConvoySquad then
7466: LD_VAR 0 1
7470: PUSH
7471: LD_EXP 41
7475: IN
7476: IFFALSE 7494
// ruConvoySquad := ruConvoySquad diff un ;
7478: LD_ADDR_EXP 41
7482: PUSH
7483: LD_EXP 41
7487: PUSH
7488: LD_VAR 0 1
7492: DIFF
7493: ST_TO_ADDR
// end ;
7494: PPOPN 1
7496: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7497: LD_VAR 0 1
7501: PPUSH
7502: CALL_OW 264
7506: PUSH
7507: LD_INT 30
7509: EQUAL
7510: IFFALSE 7520
// radarConstructed := true ;
7512: LD_ADDR_EXP 13
7516: PUSH
7517: LD_INT 1
7519: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7520: LD_VAR 0 1
7524: PPUSH
7525: CALL_OW 264
7529: PUSH
7530: LD_INT 26
7532: EQUAL
7533: IFFALSE 7543
// flamethrowerBuilt := true ;
7535: LD_ADDR_EXP 20
7539: PUSH
7540: LD_INT 1
7542: ST_TO_ADDR
// end ;
7543: PPOPN 2
7545: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7546: LD_ADDR_EXP 18
7550: PUSH
7551: LD_EXP 18
7555: PUSH
7556: LD_INT 1
7558: PLUS
7559: ST_TO_ADDR
// end ; end_of_file
7560: PPOPN 4
7562: END
// export function Action ; var i , un , veh , tmp ; begin
7563: LD_INT 0
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
// InGameOn ;
7570: CALL_OW 8
// music_nat := 2 ;
7574: LD_ADDR_OWVAR 71
7578: PUSH
7579: LD_INT 2
7581: ST_TO_ADDR
// music_class := 0 ;
7582: LD_ADDR_OWVAR 72
7586: PUSH
7587: LD_INT 0
7589: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7590: LD_INT 7
7592: PPUSH
7593: LD_INT 6
7595: PPUSH
7596: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7600: LD_INT 7
7602: PPUSH
7603: LD_INT 6
7605: PPUSH
7606: LD_INT 2
7608: PPUSH
7609: LD_INT 20
7611: NEG
7612: PPUSH
7613: CALL 1211 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7617: LD_ADDR_VAR 0 5
7621: PUSH
7622: LD_EXP 21
7626: PUSH
7627: LD_EXP 22
7631: PUSH
7632: LD_EXP 23
7636: PUSH
7637: LD_EXP 24
7641: PUSH
7642: LD_EXP 25
7646: PUSH
7647: LD_EXP 26
7651: PUSH
7652: LD_EXP 27
7656: PUSH
7657: LD_EXP 28
7661: PUSH
7662: LD_EXP 33
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: ST_TO_ADDR
// tmp := tmp diff 0 ;
7678: LD_ADDR_VAR 0 5
7682: PUSH
7683: LD_VAR 0 5
7687: PUSH
7688: LD_INT 0
7690: DIFF
7691: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7692: LD_ADDR_VAR 0 5
7696: PUSH
7697: LD_VAR 0 5
7701: PPUSH
7702: LD_INT 3
7704: PPUSH
7705: CALL 62591 0 2
7709: ST_TO_ADDR
// for i in heikeVehicles do
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: LD_EXP 35
7719: PUSH
7720: FOR_IN
7721: IFFALSE 7920
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7723: LD_INT 5
7725: PPUSH
7726: LD_VAR 0 2
7730: PUSH
7731: LD_INT 5
7733: ARRAY
7734: PPUSH
7735: LD_VAR 0 2
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: LD_VAR 0 2
7748: PUSH
7749: LD_INT 2
7751: ARRAY
7752: PPUSH
7753: LD_VAR 0 2
7757: PUSH
7758: LD_INT 3
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 2
7766: PUSH
7767: LD_INT 4
7769: ARRAY
7770: PPUSH
7771: LD_INT 34
7773: PPUSH
7774: CALL 427 0 7
// veh := CreateVehicle ;
7778: LD_ADDR_VAR 0 4
7782: PUSH
7783: CALL_OW 45
7787: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7788: LD_VAR 0 2
7792: PUSH
7793: LD_INT 4
7795: ARRAY
7796: PUSH
7797: LD_INT 51
7799: PUSH
7800: LD_INT 32
7802: PUSH
7803: LD_INT 12
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: IN
7811: IFFALSE 7891
// begin if i [ 7 ] [ 1 ] then
7813: LD_VAR 0 2
7817: PUSH
7818: LD_INT 7
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: IFFALSE 7852
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7827: LD_VAR 0 4
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_VAR 0 2
7839: PUSH
7840: LD_INT 7
7842: ARRAY
7843: PUSH
7844: LD_INT 1
7846: ARRAY
7847: PPUSH
7848: CALL_OW 291
// if i [ 7 ] [ 2 ] then
7852: LD_VAR 0 2
7856: PUSH
7857: LD_INT 7
7859: ARRAY
7860: PUSH
7861: LD_INT 2
7863: ARRAY
7864: IFFALSE 7891
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
7866: LD_VAR 0 4
7870: PPUSH
7871: LD_INT 2
7873: PPUSH
7874: LD_VAR 0 2
7878: PUSH
7879: LD_INT 7
7881: ARRAY
7882: PUSH
7883: LD_INT 2
7885: ARRAY
7886: PPUSH
7887: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
7891: LD_VAR 0 4
7895: PPUSH
7896: LD_INT 2
7898: PPUSH
7899: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
7903: LD_VAR 0 4
7907: PPUSH
7908: LD_INT 4
7910: PPUSH
7911: LD_INT 0
7913: PPUSH
7914: CALL_OW 49
// end ;
7918: GO 7720
7920: POP
7921: POP
// if tmp then
7922: LD_VAR 0 5
7926: IFFALSE 7981
// for i in tmp union heikeApes do
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_VAR 0 5
7937: PUSH
7938: LD_EXP 36
7942: UNION
7943: PUSH
7944: FOR_IN
7945: IFFALSE 7979
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
7947: LD_VAR 0 2
7951: PPUSH
7952: LD_INT 5
7954: PPUSH
7955: LD_INT 0
7957: PPUSH
7958: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
7962: LD_VAR 0 2
7966: PPUSH
7967: LD_INT 26
7969: PPUSH
7970: LD_INT 9
7972: PPUSH
7973: CALL_OW 118
// end ;
7977: GO 7944
7979: POP
7980: POP
// if heikeSecondSquad then
7981: LD_EXP 34
7985: IFFALSE 8034
// for i in heikeSecondSquad do
7987: LD_ADDR_VAR 0 2
7991: PUSH
7992: LD_EXP 34
7996: PUSH
7997: FOR_IN
7998: IFFALSE 8032
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_INT 6
8007: PPUSH
8008: LD_INT 0
8010: PPUSH
8011: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8015: LD_VAR 0 2
8019: PPUSH
8020: LD_INT 26
8022: PPUSH
8023: LD_INT 9
8025: PPUSH
8026: CALL_OW 118
// end ;
8030: GO 7997
8032: POP
8033: POP
// if heikeApes then
8034: LD_EXP 36
8038: IFFALSE 8081
// for i in heikeApes do
8040: LD_ADDR_VAR 0 2
8044: PUSH
8045: LD_EXP 36
8049: PUSH
8050: FOR_IN
8051: IFFALSE 8079
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8053: LD_VAR 0 2
8057: PPUSH
8058: LD_INT 7
8060: PPUSH
8061: LD_INT 0
8063: PPUSH
8064: CALL_OW 49
// ComHold ( i ) ;
8068: LD_VAR 0 2
8072: PPUSH
8073: CALL_OW 140
// end ;
8077: GO 8050
8079: POP
8080: POP
// if Kurt then
8081: LD_EXP 32
8085: IFFALSE 8117
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8087: LD_EXP 32
8091: PPUSH
8092: LD_INT 8
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8102: LD_EXP 32
8106: PPUSH
8107: LD_INT 42
8109: PPUSH
8110: LD_INT 32
8112: PPUSH
8113: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
8117: LD_EXP 21
8121: PPUSH
8122: LD_STRING DH-Start-1
8124: PPUSH
8125: CALL_OW 88
// if Givi then
8129: LD_EXP 22
8133: IFFALSE 8396
// begin Say ( Givi , DG-Start-2-5 ) ;
8135: LD_EXP 22
8139: PPUSH
8140: LD_STRING DG-Start-2-5
8142: PPUSH
8143: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8147: LD_EXP 21
8151: PPUSH
8152: LD_STRING DH-Start-3
8154: PPUSH
8155: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8159: LD_EXP 21
8163: PPUSH
8164: LD_STRING DH-Start-4
8166: PPUSH
8167: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8171: LD_EXP 22
8175: PPUSH
8176: LD_STRING DG-Start-5
8178: PPUSH
8179: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8183: LD_EXP 21
8187: PPUSH
8188: LD_STRING DH-Start-6
8190: PPUSH
8191: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8195: LD_EXP 22
8199: PPUSH
8200: LD_STRING DG-Start-7
8202: PPUSH
8203: CALL_OW 88
// if Mike then
8207: LD_EXP 23
8211: IFFALSE 8384
// begin Say ( Mike , DM-Start-8 ) ;
8213: LD_EXP 23
8217: PPUSH
8218: LD_STRING DM-Start-8
8220: PPUSH
8221: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8225: LD_EXP 23
8229: PPUSH
8230: LD_STRING DM-Start-9
8232: PPUSH
8233: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8237: LD_EXP 22
8241: PPUSH
8242: LD_STRING DG-Start-10
8244: PPUSH
8245: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8249: LD_EXP 22
8253: PPUSH
8254: LD_STRING DG-Start-11
8256: PPUSH
8257: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8261: LD_EXP 21
8265: PPUSH
8266: LD_STRING DH-Start-12
8268: PPUSH
8269: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8273: LD_EXP 22
8277: PPUSH
8278: LD_STRING DG-Start-13
8280: PPUSH
8281: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8285: LD_EXP 22
8289: PPUSH
8290: LD_STRING DG-Start-14
8292: PPUSH
8293: CALL_OW 88
// if Kaia then
8297: LD_EXP 26
8301: IFFALSE 8384
// begin Say ( Kaia , DK-Start-15 ) ;
8303: LD_EXP 26
8307: PPUSH
8308: LD_STRING DK-Start-15
8310: PPUSH
8311: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8315: LD_EXP 26
8319: PPUSH
8320: LD_STRING DK-Start-16
8322: PPUSH
8323: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8327: LD_EXP 26
8331: PPUSH
8332: LD_STRING DK-Start-17
8334: PPUSH
8335: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8339: LD_INT 10
8341: PPUSH
8342: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8346: LD_EXP 22
8350: PPUSH
8351: LD_EXP 26
8355: PPUSH
8356: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8360: LD_EXP 22
8364: PPUSH
8365: LD_STRING DG-Start-18
8367: PPUSH
8368: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8372: LD_EXP 26
8376: PPUSH
8377: LD_STRING DK-Start-19
8379: PPUSH
8380: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8384: LD_EXP 21
8388: PPUSH
8389: LD_STRING DH-Start-20
8391: PPUSH
8392: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8396: LD_INT 70
8398: PPUSH
8399: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8403: LD_EXP 29
8407: PPUSH
8408: LD_STRING DShar-Start-21
8410: PPUSH
8411: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8415: LD_EXP 21
8419: PPUSH
8420: LD_STRING DH-Start-22
8422: PPUSH
8423: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8427: LD_EXP 29
8431: PPUSH
8432: LD_STRING DShar-Start-23
8434: PPUSH
8435: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8439: LD_EXP 29
8443: PPUSH
8444: LD_STRING DShar-Start-24
8446: PPUSH
8447: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8451: LD_EXP 29
8455: PPUSH
8456: LD_STRING DShar-Start-25
8458: PPUSH
8459: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8463: LD_EXP 29
8467: PPUSH
8468: LD_STRING DShar-Start-26
8470: PPUSH
8471: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8475: LD_EXP 21
8479: PPUSH
8480: LD_STRING DH-Start-27
8482: PPUSH
8483: CALL_OW 88
// if Kaia then
8487: LD_EXP 26
8491: IFFALSE 8533
// begin ComTurnUnit ( Heike , Kaia ) ;
8493: LD_EXP 21
8497: PPUSH
8498: LD_EXP 26
8502: PPUSH
8503: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8507: LD_EXP 26
8511: PPUSH
8512: LD_STRING DK-Start-28
8514: PPUSH
8515: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8519: LD_EXP 21
8523: PPUSH
8524: LD_STRING DH-Start-29
8526: PPUSH
8527: CALL_OW 88
// end else
8531: GO 8545
// Say ( Heike , DH-Start-a-28 ) ;
8533: LD_EXP 21
8537: PPUSH
8538: LD_STRING DH-Start-a-28
8540: PPUSH
8541: CALL_OW 88
// if Givi then
8545: LD_EXP 22
8549: IFFALSE 8784
// begin ComTurnUnit ( Heike , Givi ) ;
8551: LD_EXP 21
8555: PPUSH
8556: LD_EXP 22
8560: PPUSH
8561: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8565: LD_EXP 22
8569: PPUSH
8570: LD_EXP 21
8574: PPUSH
8575: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8579: LD_EXP 21
8583: PPUSH
8584: LD_STRING DH-Start-30
8586: PPUSH
8587: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8591: LD_EXP 21
8595: PPUSH
8596: LD_STRING DH-Start-31
8598: PPUSH
8599: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8603: LD_EXP 22
8607: PPUSH
8608: LD_STRING DG-Start-32
8610: PPUSH
8611: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8615: LD_EXP 21
8619: PPUSH
8620: LD_STRING DH-Start-33
8622: PPUSH
8623: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8627: LD_EXP 22
8631: PPUSH
8632: LD_STRING DG-Start-34
8634: PPUSH
8635: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8639: LD_EXP 22
8643: PPUSH
8644: LD_STRING DG-Start-35
8646: PPUSH
8647: CALL_OW 88
// if Kurt and not dialogue_skipped then
8651: LD_EXP 32
8655: PUSH
8656: LD_OWVAR 59
8660: NOT
8661: AND
8662: IFFALSE 8693
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8664: LD_EXP 32
8668: PPUSH
8669: LD_INT 28
8671: PPUSH
8672: LD_INT 13
8674: PPUSH
8675: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8679: LD_EXP 32
8683: PPUSH
8684: LD_EXP 21
8688: PPUSH
8689: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8693: LD_EXP 22
8697: PPUSH
8698: LD_STRING DG-Start-36
8700: PPUSH
8701: CALL_OW 88
// if Kurt then
8705: LD_EXP 32
8709: IFFALSE 8782
// begin if not Givi then
8711: LD_EXP 22
8715: NOT
8716: IFFALSE 8732
// Say ( Kurt , DKs-Start-37-a ) else
8718: LD_EXP 32
8722: PPUSH
8723: LD_STRING DKs-Start-37-a
8725: PPUSH
8726: CALL_OW 88
8730: GO 8744
// Say ( Kurt , DKs-Start-37 ) ;
8732: LD_EXP 32
8736: PPUSH
8737: LD_STRING DKs-Start-37
8739: PPUSH
8740: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
8744: LD_EXP 32
8748: PPUSH
8749: LD_STRING DKs-Start-38
8751: PPUSH
8752: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
8756: LD_EXP 21
8760: PPUSH
8761: LD_EXP 32
8765: PPUSH
8766: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
8770: LD_EXP 21
8774: PPUSH
8775: LD_STRING DH-Start-39
8777: PPUSH
8778: CALL_OW 88
// end ; end else
8782: GO 8813
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
8784: LD_EXP 34
8788: PPUSH
8789: LD_STRING DArm-Start-a-37
8791: PPUSH
8792: LD_STRING DArf-Start-a-37
8794: PPUSH
8795: CALL 1262 0 3
8799: IFFALSE 8813
// Say ( Heike , DH-Start-39 ) ;
8801: LD_EXP 21
8805: PPUSH
8806: LD_STRING DH-Start-39
8808: PPUSH
8809: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
8813: LD_INT 44
8815: PPUSH
8816: LD_INT 25
8818: PPUSH
8819: CALL_OW 428
8823: IFFALSE 8840
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
8825: LD_INT 44
8827: PPUSH
8828: LD_INT 25
8830: PPUSH
8831: CALL_OW 428
8835: PPUSH
8836: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
8840: LD_EXP 30
8844: PPUSH
8845: LD_INT 5
8847: PPUSH
8848: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
8852: LD_EXP 30
8856: PPUSH
8857: LD_INT 44
8859: PPUSH
8860: LD_INT 25
8862: PPUSH
8863: LD_INT 0
8865: PPUSH
8866: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
8870: LD_EXP 30
8874: PPUSH
8875: LD_INT 29
8877: PPUSH
8878: LD_INT 12
8880: PPUSH
8881: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8885: LD_INT 35
8887: PPUSH
8888: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
8892: LD_OWVAR 59
8896: PUSH
8897: LD_EXP 21
8901: PPUSH
8902: LD_EXP 30
8906: PPUSH
8907: CALL_OW 296
8911: PUSH
8912: LD_INT 8
8914: LESS
8915: OR
8916: PUSH
8917: LD_EXP 30
8921: PPUSH
8922: LD_INT 26
8924: PPUSH
8925: LD_INT 9
8927: PPUSH
8928: CALL_OW 297
8932: PUSH
8933: LD_INT 6
8935: LESS
8936: OR
8937: IFFALSE 8885
// Say ( Olaf , DO-Scout-1 ) ;
8939: LD_EXP 30
8943: PPUSH
8944: LD_STRING DO-Scout-1
8946: PPUSH
8947: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
8951: LD_EXP 30
8955: PPUSH
8956: LD_EXP 21
8960: PPUSH
8961: CALL_OW 119
// for i in tmp union heikeSecondSquad do
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_VAR 0 5
8974: PUSH
8975: LD_EXP 34
8979: UNION
8980: PUSH
8981: FOR_IN
8982: IFFALSE 9000
// ComTurnUnit ( i , Olaf ) ;
8984: LD_VAR 0 2
8988: PPUSH
8989: LD_EXP 30
8993: PPUSH
8994: CALL_OW 119
8998: GO 8981
9000: POP
9001: POP
// wait ( 0 0$0.3 ) ;
9002: LD_INT 10
9004: PPUSH
9005: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9009: LD_EXP 21
9013: PPUSH
9014: LD_EXP 30
9018: PPUSH
9019: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9023: LD_EXP 21
9027: PPUSH
9028: LD_EXP 30
9032: PPUSH
9033: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9037: LD_EXP 21
9041: PPUSH
9042: LD_STRING DH-Scout-2
9044: PPUSH
9045: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9049: LD_EXP 30
9053: PPUSH
9054: LD_STRING DO-Scout-3
9056: PPUSH
9057: CALL_OW 88
// if Mike and Givi then
9061: LD_EXP 23
9065: PUSH
9066: LD_EXP 22
9070: AND
9071: IFFALSE 9087
// Say ( Olaf , DO-Scout-4 ) else
9073: LD_EXP 30
9077: PPUSH
9078: LD_STRING DO-Scout-4
9080: PPUSH
9081: CALL_OW 88
9085: GO 9187
// begin if Mike then
9087: LD_EXP 23
9091: IFFALSE 9119
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9093: LD_EXP 30
9097: PPUSH
9098: LD_STRING DO-Scout-a-4
9100: PPUSH
9101: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9105: LD_EXP 21
9109: PPUSH
9110: LD_STRING DH-Scout-a-5
9112: PPUSH
9113: CALL_OW 88
// end else
9117: GO 9187
// if Givi then
9119: LD_EXP 22
9123: IFFALSE 9151
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9125: LD_EXP 30
9129: PPUSH
9130: LD_STRING DO-Scout-b-4
9132: PPUSH
9133: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9137: LD_EXP 21
9141: PPUSH
9142: LD_STRING DH-Scout-b-5
9144: PPUSH
9145: CALL_OW 88
// end else
9149: GO 9187
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9151: LD_EXP 30
9155: PPUSH
9156: LD_STRING DO-Scout-f-4
9158: PPUSH
9159: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9163: LD_EXP 21
9167: PPUSH
9168: LD_STRING DH-Scout-f-5
9170: PPUSH
9171: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9175: LD_EXP 30
9179: PPUSH
9180: LD_STRING DO-Scout-f-6
9182: PPUSH
9183: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9187: LD_EXP 21
9191: PPUSH
9192: LD_STRING DH-Scout-5
9194: PPUSH
9195: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9199: LD_EXP 30
9203: PPUSH
9204: LD_STRING DO-Scout-6
9206: PPUSH
9207: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9211: LD_EXP 30
9215: PPUSH
9216: LD_STRING DO-Scout-7
9218: PPUSH
9219: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9223: LD_EXP 21
9227: PPUSH
9228: LD_STRING DH-Scout-8
9230: PPUSH
9231: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9235: LD_EXP 21
9239: PPUSH
9240: LD_STRING DH-Scout-9
9242: PPUSH
9243: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9247: LD_EXP 30
9251: PPUSH
9252: LD_STRING DO-Scout-10
9254: PPUSH
9255: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9259: LD_EXP 30
9263: PPUSH
9264: LD_STRING DO-Scout-12
9266: PPUSH
9267: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9271: LD_EXP 30
9275: PPUSH
9276: LD_STRING DO-Scout-13
9278: PPUSH
9279: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9283: LD_EXP 30
9287: PPUSH
9288: LD_STRING DO-Scout-14
9290: PPUSH
9291: CALL_OW 88
// if Givi then
9295: LD_EXP 22
9299: IFFALSE 9325
// begin Say ( Givi , DG-Scout-15 ) ;
9301: LD_EXP 22
9305: PPUSH
9306: LD_STRING DG-Scout-15
9308: PPUSH
9309: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9313: LD_EXP 26
9317: PPUSH
9318: LD_STRING DK-Scout-16
9320: PPUSH
9321: CALL_OW 88
// end ; if not dialogue_skipped then
9325: LD_OWVAR 59
9329: NOT
9330: IFFALSE 9449
// begin async ;
9332: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9333: LD_EXP 30
9337: PPUSH
9338: LD_STRING DO-Scout-17
9340: PPUSH
9341: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9345: LD_INT 55
9347: PPUSH
9348: LD_INT 77
9350: PPUSH
9351: LD_INT 2
9353: PPUSH
9354: LD_INT 6
9356: NEG
9357: PPUSH
9358: CALL 1211 0 4
// wait ( 10 ) ;
9362: LD_INT 10
9364: PPUSH
9365: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9369: LD_INT 55
9371: PPUSH
9372: LD_INT 77
9374: PPUSH
9375: CALL_OW 84
// wait ( 0 0$5 ) ;
9379: LD_INT 175
9381: PPUSH
9382: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9386: LD_EXP 30
9390: PPUSH
9391: LD_STRING DO-Scout-18
9393: PPUSH
9394: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9398: LD_INT 204
9400: PPUSH
9401: LD_INT 107
9403: PPUSH
9404: LD_INT 2
9406: PPUSH
9407: LD_INT 12
9409: NEG
9410: PPUSH
9411: CALL 1211 0 4
// wait ( 10 ) ;
9415: LD_INT 10
9417: PPUSH
9418: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9422: LD_INT 204
9424: PPUSH
9425: LD_INT 107
9427: PPUSH
9428: CALL_OW 84
// wait ( 0 0$5 ) ;
9432: LD_INT 175
9434: PPUSH
9435: CALL_OW 67
// sync ;
9439: SYNC
// CenterNowOnUnits ( Heike ) ;
9440: LD_EXP 21
9444: PPUSH
9445: CALL_OW 87
// end ; Say ( Olaf , DO-Scout-19 ) ;
9449: LD_EXP 30
9453: PPUSH
9454: LD_STRING DO-Scout-19
9456: PPUSH
9457: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9461: LD_EXP 30
9465: PPUSH
9466: LD_STRING DO-Scout-20
9468: PPUSH
9469: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9473: LD_EXP 21
9477: PPUSH
9478: LD_STRING DH-Scout-21
9480: PPUSH
9481: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9485: LD_EXP 21
9489: PPUSH
9490: LD_STRING DH-Scout-22
9492: PPUSH
9493: CALL_OW 88
// InGameOff ;
9497: CALL_OW 9
// if Givi then
9501: LD_EXP 22
9505: IFFALSE 9520
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9507: LD_INT 13
9509: PPUSH
9510: LD_INT 2
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9520: LD_STRING Road
9522: PPUSH
9523: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9527: LD_ADDR_VAR 0 2
9531: PUSH
9532: LD_INT 22
9534: PUSH
9535: LD_INT 5
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 21
9544: PUSH
9545: LD_INT 2
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: FOR_IN
9562: IFFALSE 9578
// SetSide ( i , 2 ) ;
9564: LD_VAR 0 2
9568: PPUSH
9569: LD_INT 2
9571: PPUSH
9572: CALL_OW 235
9576: GO 9561
9578: POP
9579: POP
// SaveForQuickRestart ;
9580: CALL_OW 22
// end ;
9584: LD_VAR 0 1
9588: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9589: LD_INT 2
9591: PPUSH
9592: LD_INT 9
9594: PPUSH
9595: CALL_OW 294
9599: IFFALSE 9966
9601: GO 9603
9603: DISABLE
// begin DialogueOn ;
9604: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9608: LD_INT 111
9610: PPUSH
9611: LD_INT 72
9613: PPUSH
9614: LD_INT 2
9616: PPUSH
9617: LD_INT 20
9619: NEG
9620: PPUSH
9621: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9625: LD_INT 111
9627: PPUSH
9628: LD_INT 72
9630: PPUSH
9631: LD_INT 2
9633: PPUSH
9634: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9638: LD_INT 111
9640: PPUSH
9641: LD_INT 72
9643: PPUSH
9644: CALL_OW 86
// if IsOk ( Kamil ) then
9648: LD_EXP 25
9652: PPUSH
9653: CALL_OW 302
9657: IFFALSE 9774
// begin Say ( Kamil , DKam-Cross-1 ) ;
9659: LD_EXP 25
9663: PPUSH
9664: LD_STRING DKam-Cross-1
9666: PPUSH
9667: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9671: LD_EXP 25
9675: PPUSH
9676: LD_STRING DKam-Cross-2
9678: PPUSH
9679: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9683: LD_EXP 25
9687: PPUSH
9688: LD_STRING DKam-Cross-3
9690: PPUSH
9691: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
9695: LD_EXP 25
9699: PPUSH
9700: LD_STRING DKam-Cross-4
9702: PPUSH
9703: CALL_OW 88
// if IsOk ( Ibrahim ) then
9707: LD_EXP 24
9711: PPUSH
9712: CALL_OW 302
9716: IFFALSE 9772
// begin if ibrahimJoinedIn04 then
9718: LD_EXP 4
9722: IFFALSE 9736
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9724: LD_EXP 24
9728: PPUSH
9729: LD_STRING DI-Cross-b-5
9731: PPUSH
9732: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9736: LD_EXP 24
9740: PPUSH
9741: LD_STRING DI-Cross-b-6
9743: PPUSH
9744: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9748: LD_EXP 24
9752: PPUSH
9753: LD_STRING DI-Cross-b-7
9755: PPUSH
9756: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
9760: LD_EXP 25
9764: PPUSH
9765: LD_STRING DKam-Cross-8
9767: PPUSH
9768: CALL_OW 88
// end ; end else
9772: GO 9932
// if IsOk ( Sophia ) then
9774: LD_EXP 27
9778: PPUSH
9779: CALL_OW 302
9783: IFFALSE 9900
// begin Say ( Sophia , DS-Cross-1 ) ;
9785: LD_EXP 27
9789: PPUSH
9790: LD_STRING DS-Cross-1
9792: PPUSH
9793: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
9797: LD_EXP 27
9801: PPUSH
9802: LD_STRING DS-Cross-2
9804: PPUSH
9805: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
9809: LD_EXP 27
9813: PPUSH
9814: LD_STRING DS-Cross-3
9816: PPUSH
9817: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
9821: LD_EXP 27
9825: PPUSH
9826: LD_STRING DS-Cross-4
9828: PPUSH
9829: CALL_OW 88
// if IsOk ( Ibrahim ) then
9833: LD_EXP 24
9837: PPUSH
9838: CALL_OW 302
9842: IFFALSE 9898
// begin if ibrahimJoinedIn04 then
9844: LD_EXP 4
9848: IFFALSE 9862
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9850: LD_EXP 24
9854: PPUSH
9855: LD_STRING DI-Cross-b-5
9857: PPUSH
9858: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9862: LD_EXP 24
9866: PPUSH
9867: LD_STRING DI-Cross-b-6
9869: PPUSH
9870: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9874: LD_EXP 24
9878: PPUSH
9879: LD_STRING DI-Cross-b-7
9881: PPUSH
9882: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
9886: LD_EXP 27
9890: PPUSH
9891: LD_STRING DS-Cross-8
9893: PPUSH
9894: CALL_OW 88
// end ; end else
9898: GO 9932
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
9900: LD_EXP 34
9904: PPUSH
9905: LD_INT 50
9907: PUSH
9908: EMPTY
9909: LIST
9910: PPUSH
9911: CALL_OW 72
9915: IFFALSE 9932
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
9917: LD_EXP 34
9921: PPUSH
9922: LD_STRING DArm-Cross-c-1
9924: PPUSH
9925: LD_STRING DArf-Cross-c-1
9927: PPUSH
9928: CALL 1262 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
9932: LD_EXP 56
9936: PPUSH
9937: LD_INT 2
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 322
// DialogueOff ;
9947: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
9951: LD_STRING Crane
9953: PPUSH
9954: CALL_OW 337
// spottedCrossRoad := true ;
9958: LD_ADDR_EXP 8
9962: PUSH
9963: LD_INT 1
9965: ST_TO_ADDR
// end ;
9966: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
9967: LD_INT 22
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 2
9979: PUSH
9980: LD_INT 30
9982: PUSH
9983: LD_INT 0
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 30
9992: PUSH
9993: LD_INT 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PPUSH
10009: CALL_OW 69
10013: PUSH
10014: LD_EXP 26
10018: PPUSH
10019: CALL_OW 302
10023: PUSH
10024: LD_EXP 34
10028: OR
10029: AND
10030: IFFALSE 10242
10032: GO 10034
10034: DISABLE
// begin DialogueOn ;
10035: CALL_OW 6
// if Kaia then
10039: LD_EXP 26
10043: IFFALSE 10056
// CenterNowOnUnits ( Kaia ) else
10045: LD_EXP 26
10049: PPUSH
10050: CALL_OW 87
10054: GO 10065
// CenterNowOnUnits ( Heike ) ;
10056: LD_EXP 21
10060: PPUSH
10061: CALL_OW 87
// if IsOk ( Kaia ) then
10065: LD_EXP 26
10069: PPUSH
10070: CALL_OW 302
10074: IFFALSE 10090
// Say ( Kaia , DK-Cam-1 ) else
10076: LD_EXP 26
10080: PPUSH
10081: LD_STRING DK-Cam-1
10083: PPUSH
10084: CALL_OW 88
10088: GO 10105
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10090: LD_EXP 34
10094: PPUSH
10095: LD_STRING DArm-Cam-1
10097: PPUSH
10098: LD_STRING DArf-Cam-1
10100: PPUSH
10101: CALL 1262 0 3
// Say ( Heike , DH-Cam-2 ) ;
10105: LD_EXP 21
10109: PPUSH
10110: LD_STRING DH-Cam-2
10112: PPUSH
10113: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10117: LD_EXP 21
10121: PPUSH
10122: LD_STRING DH-Cam-3
10124: PPUSH
10125: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10129: LD_EXP 21
10133: PPUSH
10134: LD_STRING DH-Cam-4
10136: PPUSH
10137: CALL_OW 88
// if IsOk ( Kaia ) then
10141: LD_EXP 26
10145: PPUSH
10146: CALL_OW 302
10150: IFFALSE 10166
// Say ( Kaia , DK-Cam-5 ) else
10152: LD_EXP 26
10156: PPUSH
10157: LD_STRING DK-Cam-5
10159: PPUSH
10160: CALL_OW 88
10164: GO 10181
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10166: LD_EXP 34
10170: PPUSH
10171: LD_STRING DArm-Cam-5
10173: PPUSH
10174: LD_STRING DArf-Cam-5
10176: PPUSH
10177: CALL 1262 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10181: LD_EXP 30
10185: PPUSH
10186: LD_STRING DO-Cam-6
10188: PPUSH
10189: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10193: LD_EXP 30
10197: PPUSH
10198: LD_STRING DO-Cam-7
10200: PPUSH
10201: CALL_OW 88
// DialogueOff ;
10205: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10209: LD_STRING Radar
10211: PPUSH
10212: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10216: LD_INT 6
10218: PPUSH
10219: LD_INT 2
10221: PPUSH
10222: LD_INT 1
10224: PPUSH
10225: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10229: LD_INT 20
10231: PPUSH
10232: LD_INT 2
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 324
// end ;
10242: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10243: LD_INT 22
10245: PUSH
10246: LD_INT 2
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 2
10255: PUSH
10256: LD_INT 34
10258: PUSH
10259: LD_INT 30
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 35
10268: PUSH
10269: LD_INT 30
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: IFFALSE 10301
10291: GO 10293
10293: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10294: LD_STRING RadarDone
10296: PPUSH
10297: CALL_OW 337
10301: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10302: LD_INT 22
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 34
10314: PUSH
10315: LD_EXP 50
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PPUSH
10328: CALL_OW 69
10332: IFFALSE 10344
10334: GO 10336
10336: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10337: LD_STRING CraneDone
10339: PPUSH
10340: CALL_OW 337
10344: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10345: LD_EXP 30
10349: PPUSH
10350: CALL_OW 302
10354: PUSH
10355: LD_EXP 33
10359: PPUSH
10360: CALL_OW 302
10364: AND
10365: PUSH
10366: LD_INT 6
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL_OW 321
10376: PUSH
10377: LD_INT 2
10379: EQUAL
10380: AND
10381: PUSH
10382: LD_EXP 33
10386: PPUSH
10387: LD_EXP 21
10391: PPUSH
10392: CALL_OW 296
10396: PUSH
10397: LD_INT 10
10399: LESS
10400: PUSH
10401: LD_EXP 33
10405: PPUSH
10406: CALL_OW 310
10410: OR
10411: AND
10412: IFFALSE 10626
10414: GO 10416
10416: DISABLE
// begin DialogueOn ;
10417: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10421: LD_EXP 33
10425: PPUSH
10426: LD_STRING DA-RC-1
10428: PPUSH
10429: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10433: LD_EXP 33
10437: PPUSH
10438: LD_STRING DA-RC-2
10440: PPUSH
10441: CALL_OW 88
// if IsOk ( Kaia ) then
10445: LD_EXP 26
10449: PPUSH
10450: CALL_OW 302
10454: IFFALSE 10528
// begin Say ( Kaia , DK-RC-3 ) ;
10456: LD_EXP 26
10460: PPUSH
10461: LD_STRING DK-RC-3
10463: PPUSH
10464: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10468: LD_EXP 33
10472: PPUSH
10473: LD_STRING DA-RC-4
10475: PPUSH
10476: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10480: LD_EXP 26
10484: PPUSH
10485: LD_STRING DK-RC-5
10487: PPUSH
10488: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10492: LD_EXP 33
10496: PPUSH
10497: LD_STRING DA-RC-6
10499: PPUSH
10500: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10504: LD_EXP 26
10508: PPUSH
10509: LD_STRING DK-RC-7
10511: PPUSH
10512: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10516: LD_EXP 33
10520: PPUSH
10521: LD_STRING DA-RC-8
10523: PPUSH
10524: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10528: LD_EXP 21
10532: PPUSH
10533: LD_STRING DH-RC-9
10535: PPUSH
10536: CALL_OW 88
// if IsOk ( Markov ) then
10540: LD_EXP 28
10544: PPUSH
10545: CALL_OW 302
10549: IFFALSE 10577
// begin Say ( Markov , DMar-RC-10 ) ;
10551: LD_EXP 28
10555: PPUSH
10556: LD_STRING DMar-RC-10
10558: PPUSH
10559: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10563: LD_EXP 28
10567: PPUSH
10568: LD_STRING DMar-RC-11
10570: PPUSH
10571: CALL_OW 88
// end else
10575: GO 10589
// begin Say ( Olaf , DO-RC-a-10 ) ;
10577: LD_EXP 30
10581: PPUSH
10582: LD_STRING DO-RC-a-10
10584: PPUSH
10585: CALL_OW 88
// end ; DialogueOff ;
10589: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10593: LD_STRING RemoteControl
10595: PPUSH
10596: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10600: LD_INT 15
10602: PPUSH
10603: LD_INT 2
10605: PPUSH
10606: LD_INT 1
10608: PPUSH
10609: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10613: LD_INT 22
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: CALL_OW 324
// end ;
10626: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10627: LD_INT 12
10629: PPUSH
10630: LD_INT 22
10632: PUSH
10633: LD_INT 2
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 70
10644: IFFALSE 11011
10646: GO 10648
10648: DISABLE
10649: LD_INT 0
10651: PPUSH
// begin PrepareWestBase ;
10652: CALL 3898 0 0
// westBaseSpotted := true ;
10656: LD_ADDR_EXP 5
10660: PUSH
10661: LD_INT 1
10663: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10664: LD_INT 70
10666: PPUSH
10667: CALL_OW 67
// InGameOn ;
10671: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10675: LD_INT 56
10677: PPUSH
10678: LD_INT 77
10680: PPUSH
10681: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10685: LD_INT 56
10687: PPUSH
10688: LD_INT 77
10690: PPUSH
10691: LD_INT 2
10693: PPUSH
10694: LD_INT 12
10696: NEG
10697: PPUSH
10698: CALL_OW 330
// wait ( 0 0$2 ) ;
10702: LD_INT 70
10704: PPUSH
10705: CALL_OW 67
// DialogueOn ;
10709: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
10713: LD_EXP 21
10717: PPUSH
10718: LD_STRING DH-Rbase-1
10720: PPUSH
10721: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
10725: LD_EXP 26
10729: PPUSH
10730: LD_STRING DK-Rbase-2
10732: PPUSH
10733: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
10737: LD_EXP 26
10741: PPUSH
10742: LD_STRING DK-Rbase-3
10744: PPUSH
10745: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
10749: LD_EXP 26
10753: PPUSH
10754: LD_STRING DK-Rbase-4
10756: PPUSH
10757: CALL_OW 88
// DialogueOff ;
10761: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
10765: LD_INT 56
10767: PPUSH
10768: LD_INT 77
10770: PPUSH
10771: LD_INT 2
10773: PPUSH
10774: CALL_OW 331
// InGameOff ;
10778: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
10782: LD_INT 35
10784: PPUSH
10785: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
10789: LD_EXP 42
10793: NOT
10794: PUSH
10795: LD_EXP 43
10799: NOT
10800: AND
10801: IFFALSE 10782
// wait ( 0 0$2 ) ;
10803: LD_INT 70
10805: PPUSH
10806: CALL_OW 67
// if IsOk ( Kaia ) then
10810: LD_EXP 26
10814: PPUSH
10815: CALL_OW 302
10819: IFFALSE 10934
// begin DialogueOn ;
10821: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
10825: LD_INT 56
10827: PPUSH
10828: LD_INT 81
10830: PPUSH
10831: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
10835: LD_EXP 26
10839: PPUSH
10840: LD_STRING DK-Rbase-5
10842: PPUSH
10843: CALL_OW 88
// if IsOk ( Givi ) then
10847: LD_EXP 22
10851: PPUSH
10852: CALL_OW 302
10856: IFFALSE 10930
// begin Say ( Givi , DG-Rbase-6 ) ;
10858: LD_EXP 22
10862: PPUSH
10863: LD_STRING DG-Rbase-6
10865: PPUSH
10866: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
10870: LD_EXP 22
10874: PPUSH
10875: LD_STRING DG-Rbase-7
10877: PPUSH
10878: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
10882: LD_EXP 26
10886: PPUSH
10887: LD_STRING DK-Rbase-8
10889: PPUSH
10890: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
10894: LD_EXP 22
10898: PPUSH
10899: LD_STRING DG-Rbase-9
10901: PPUSH
10902: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
10906: LD_EXP 22
10910: PPUSH
10911: LD_STRING DG-Rbase-10
10913: PPUSH
10914: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
10918: LD_EXP 26
10922: PPUSH
10923: LD_STRING DK-Rbase-11
10925: PPUSH
10926: CALL_OW 88
// end ; DialogueOff ;
10930: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
10934: LD_ADDR_VAR 0 1
10938: PUSH
10939: LD_INT 12
10941: PPUSH
10942: LD_INT 22
10944: PUSH
10945: LD_INT 3
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 21
10954: PUSH
10955: LD_INT 3
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PPUSH
10966: CALL_OW 70
10970: PUSH
10971: FOR_IN
10972: IFFALSE 10988
// SetSide ( i , 2 ) ;
10974: LD_VAR 0 1
10978: PPUSH
10979: LD_INT 2
10981: PPUSH
10982: CALL_OW 235
10986: GO 10971
10988: POP
10989: POP
// westBaseCaptured := true ;
10990: LD_ADDR_EXP 9
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
10998: LD_INT 0
11000: PPUSH
11001: LD_INT 2
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 324
// end ;
11011: PPOPN 1
11013: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11014: LD_EXP 38
11018: NOT
11019: PUSH
11020: LD_INT 10
11022: PPUSH
11023: CALL_OW 255
11027: PUSH
11028: LD_INT 2
11030: EQUAL
11031: OR
11032: IFFALSE 11169
11034: GO 11036
11036: DISABLE
// begin DialogueOn ;
11037: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11041: LD_EXP 21
11045: PPUSH
11046: LD_STRING DH-Goal-1
11048: PPUSH
11049: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11053: LD_EXP 29
11057: PPUSH
11058: LD_STRING DShar-Goal-2
11060: PPUSH
11061: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11065: LD_EXP 21
11069: PPUSH
11070: LD_STRING DH-Goal-3
11072: PPUSH
11073: CALL_OW 88
// if reinforcementsAllowed then
11077: LD_EXP 14
11081: IFFALSE 11107
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11083: LD_EXP 29
11087: PPUSH
11088: LD_STRING DShar-Goal-4
11090: PPUSH
11091: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11095: LD_EXP 21
11099: PPUSH
11100: LD_STRING DH-Goal-5
11102: PPUSH
11103: CALL_OW 88
// end ; DialogueOff ;
11107: CALL_OW 7
// eastBaseCaptured := true ;
11111: LD_ADDR_EXP 10
11115: PUSH
11116: LD_INT 1
11118: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11119: LD_STRING BaseCaptured
11121: PPUSH
11122: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11126: LD_INT 10
11128: PPUSH
11129: LD_INT 2
11131: PPUSH
11132: CALL_OW 235
// if not reinforcementsAllowed then
11136: LD_EXP 14
11140: NOT
11141: IFFALSE 11145
// exit ;
11143: GO 11169
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11145: LD_INT 21000
11147: PUSH
11148: LD_INT 1050
11150: NEG
11151: PPUSH
11152: LD_INT 1050
11154: PPUSH
11155: CALL_OW 12
11159: PLUS
11160: PPUSH
11161: CALL_OW 67
// PrepareReinforcements ;
11165: CALL 2226 0 0
// end ;
11169: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11170: LD_INT 22
11172: PUSH
11173: LD_INT 2
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 30
11182: PUSH
11183: LD_INT 13
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: IFFALSE 11215
11200: GO 11202
11202: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11203: LD_EXP 22
11207: PPUSH
11208: LD_STRING DG-Lab-1
11210: PPUSH
11211: CALL_OW 88
// end ;
11215: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched do
11216: LD_INT 5
11218: PPUSH
11219: LD_INT 2
11221: PPUSH
11222: CALL_OW 321
11226: PUSH
11227: LD_INT 2
11229: EQUAL
11230: IFFALSE 11291
11232: GO 11234
11234: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11235: LD_EXP 22
11239: PPUSH
11240: LD_STRING DG-Stim-1
11242: PPUSH
11243: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11247: LD_EXP 21
11251: PPUSH
11252: LD_STRING DH-Stim-2
11254: PPUSH
11255: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11259: LD_EXP 22
11263: PPUSH
11264: LD_STRING DG-Stim-3
11266: PPUSH
11267: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11271: LD_EXP 21
11275: PPUSH
11276: LD_STRING DH-Stim-4
11278: PPUSH
11279: CALL_OW 88
// drugsResearched := true ;
11283: LD_ADDR_EXP 11
11287: PUSH
11288: LD_INT 1
11290: ST_TO_ADDR
// end ;
11291: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11292: LD_EXP 11
11296: IFFALSE 11608
11298: GO 11300
11300: DISABLE
11301: LD_INT 0
11303: PPUSH
11304: PPUSH
11305: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11306: LD_ADDR_VAR 0 2
11310: PUSH
11311: LD_EXP 21
11315: PUSH
11316: LD_EXP 22
11320: PUSH
11321: LD_EXP 30
11325: PUSH
11326: LD_EXP 28
11330: PUSH
11331: LD_EXP 26
11335: PUSH
11336: LD_EXP 27
11340: PUSH
11341: LD_EXP 32
11345: PUSH
11346: LD_EXP 25
11350: PUSH
11351: LD_EXP 23
11355: PUSH
11356: LD_EXP 24
11360: PUSH
11361: LD_EXP 33
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: LD_STRING H
11386: PUSH
11387: LD_STRING G
11389: PUSH
11390: LD_STRING O
11392: PUSH
11393: LD_STRING Mar
11395: PUSH
11396: LD_STRING K
11398: PUSH
11399: LD_STRING S
11401: PUSH
11402: LD_STRING Ks
11404: PUSH
11405: LD_STRING Kam
11407: PUSH
11408: LD_STRING M
11410: PUSH
11411: LD_STRING I
11413: PUSH
11414: LD_STRING A
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11430: LD_INT 35
11432: PPUSH
11433: CALL_OW 67
// for i := tmp downto 1 do
11437: LD_ADDR_VAR 0 1
11441: PUSH
11442: DOUBLE
11443: LD_VAR 0 2
11447: INC
11448: ST_TO_ADDR
11449: LD_INT 1
11451: PUSH
11452: FOR_DOWNTO
11453: IFFALSE 11599
// if GetLives ( tmp [ i ] ) < 250 then
11455: LD_VAR 0 2
11459: PUSH
11460: LD_VAR 0 1
11464: ARRAY
11465: PPUSH
11466: CALL_OW 256
11470: PUSH
11471: LD_INT 250
11473: LESS
11474: IFFALSE 11597
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11476: LD_ADDR_EXP 19
11480: PUSH
11481: LD_EXP 19
11485: PUSH
11486: LD_INT 1
11488: PLUS
11489: ST_TO_ADDR
// DialogueOn ;
11490: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11494: LD_VAR 0 2
11498: PUSH
11499: LD_VAR 0 1
11503: ARRAY
11504: PPUSH
11505: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11509: LD_VAR 0 2
11513: PUSH
11514: LD_VAR 0 1
11518: ARRAY
11519: PPUSH
11520: LD_STRING D
11522: PUSH
11523: LD_VAR 0 3
11527: PUSH
11528: LD_VAR 0 1
11532: ARRAY
11533: STR
11534: PUSH
11535: LD_STRING -Stim-a-1
11537: STR
11538: PPUSH
11539: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11543: LD_ADDR_VAR 0 2
11547: PUSH
11548: LD_VAR 0 2
11552: PPUSH
11553: LD_VAR 0 1
11557: PPUSH
11558: CALL_OW 3
11562: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11563: LD_ADDR_VAR 0 3
11567: PUSH
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_VAR 0 1
11577: PPUSH
11578: CALL_OW 3
11582: ST_TO_ADDR
// drugsTested := true ;
11583: LD_ADDR_EXP 6
11587: PUSH
11588: LD_INT 1
11590: ST_TO_ADDR
// DialogueOff ;
11591: CALL_OW 7
// break ;
11595: GO 11599
// end ;
11597: GO 11452
11599: POP
11600: POP
// until not tmp ;
11601: LD_VAR 0 2
11605: NOT
11606: IFFALSE 11430
// end ;
11608: PPOPN 3
11610: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11611: LD_INT 22
11613: PUSH
11614: LD_INT 2
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 34
11623: PUSH
11624: LD_INT 31
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PPUSH
11635: CALL_OW 69
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_INT 2
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 33
11652: PUSH
11653: LD_INT 2
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 69
11668: AND
11669: IFFALSE 11682
11671: GO 11673
11673: DISABLE
// remoteControlConstructed := true ;
11674: LD_ADDR_EXP 12
11678: PUSH
11679: LD_INT 1
11681: ST_TO_ADDR
11682: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
11683: LD_EXP 12
11687: IFFALSE 11987
11689: GO 11691
11691: DISABLE
11692: LD_INT 0
11694: PPUSH
11695: PPUSH
11696: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11697: LD_ADDR_VAR 0 2
11701: PUSH
11702: LD_EXP 21
11706: PUSH
11707: LD_EXP 22
11711: PUSH
11712: LD_EXP 30
11716: PUSH
11717: LD_EXP 28
11721: PUSH
11722: LD_EXP 26
11726: PUSH
11727: LD_EXP 27
11731: PUSH
11732: LD_EXP 32
11736: PUSH
11737: LD_EXP 25
11741: PUSH
11742: LD_EXP 23
11746: PUSH
11747: LD_EXP 24
11751: PUSH
11752: LD_EXP 33
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: LD_STRING H
11777: PUSH
11778: LD_STRING G
11780: PUSH
11781: LD_STRING O
11783: PUSH
11784: LD_STRING Mar
11786: PUSH
11787: LD_STRING K
11789: PUSH
11790: LD_STRING S
11792: PUSH
11793: LD_STRING Ks
11795: PUSH
11796: LD_STRING Kam
11798: PUSH
11799: LD_STRING M
11801: PUSH
11802: LD_STRING I
11804: PUSH
11805: LD_STRING A
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11821: LD_INT 35
11823: PPUSH
11824: CALL_OW 67
// for i := tmp downto 1 do
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: DOUBLE
11834: LD_VAR 0 2
11838: INC
11839: ST_TO_ADDR
11840: LD_INT 1
11842: PUSH
11843: FOR_DOWNTO
11844: IFFALSE 11978
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
11846: LD_VAR 0 2
11850: PUSH
11851: LD_VAR 0 1
11855: ARRAY
11856: PPUSH
11857: CALL_OW 257
11861: PUSH
11862: LD_INT 3
11864: EQUAL
11865: PUSH
11866: LD_VAR 0 2
11870: PUSH
11871: LD_VAR 0 1
11875: ARRAY
11876: PPUSH
11877: CALL_OW 432
11881: AND
11882: IFFALSE 11976
// begin DialogueOn ;
11884: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
11888: LD_VAR 0 2
11892: PUSH
11893: LD_VAR 0 1
11897: ARRAY
11898: PPUSH
11899: LD_STRING D
11901: PUSH
11902: LD_VAR 0 3
11906: PUSH
11907: LD_VAR 0 1
11911: ARRAY
11912: STR
11913: PUSH
11914: LD_STRING -RC-a-1
11916: STR
11917: PPUSH
11918: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
11922: LD_ADDR_VAR 0 2
11926: PUSH
11927: LD_VAR 0 2
11931: PPUSH
11932: LD_VAR 0 1
11936: PPUSH
11937: CALL_OW 3
11941: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11942: LD_ADDR_VAR 0 3
11946: PUSH
11947: LD_VAR 0 3
11951: PPUSH
11952: LD_VAR 0 1
11956: PPUSH
11957: CALL_OW 3
11961: ST_TO_ADDR
// DialogueOff ;
11962: CALL_OW 7
// remoteControlTested := true ;
11966: LD_ADDR_EXP 7
11970: PUSH
11971: LD_INT 1
11973: ST_TO_ADDR
// break ;
11974: GO 11978
// end ;
11976: GO 11843
11978: POP
11979: POP
// until not tmp ;
11980: LD_VAR 0 2
11984: NOT
11985: IFFALSE 11821
// end ;
11987: PPOPN 3
11989: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
11990: LD_EXP 7
11994: PUSH
11995: LD_EXP 28
11999: PPUSH
12000: CALL_OW 302
12004: AND
12005: IFFALSE 12034
12007: GO 12009
12009: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12010: LD_EXP 28
12014: PPUSH
12015: LD_STRING DMar-RC-a-2
12017: PPUSH
12018: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12022: LD_EXP 28
12026: PPUSH
12027: LD_STRING DMar-RC-a-3
12029: PPUSH
12030: CALL_OW 88
// end ;
12034: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12035: LD_EXP 14
12039: PUSH
12040: LD_EXP 21
12044: PPUSH
12045: LD_EXP 33
12049: PPUSH
12050: CALL_OW 296
12054: PUSH
12055: LD_INT 8
12057: LESS
12058: AND
12059: PUSH
12060: LD_INT 2
12062: PPUSH
12063: CALL_OW 463
12067: NOT
12068: AND
12069: PUSH
12070: LD_EXP 33
12074: PPUSH
12075: CALL_OW 302
12079: AND
12080: PUSH
12081: LD_EXP 21
12085: PPUSH
12086: CALL_OW 302
12090: AND
12091: IFFALSE 12269
12093: GO 12095
12095: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12096: LD_EXP 33
12100: PPUSH
12101: CALL_OW 310
12105: NOT
12106: IFFALSE 12122
// ComTurnUnit ( Aviradze , Heike ) ;
12108: LD_EXP 33
12112: PPUSH
12113: LD_EXP 21
12117: PPUSH
12118: CALL_OW 119
// if not IsInUnit ( Heike ) then
12122: LD_EXP 21
12126: PPUSH
12127: CALL_OW 310
12131: NOT
12132: IFFALSE 12148
// ComTurnUnit ( Heike , Aviradze ) ;
12134: LD_EXP 21
12138: PPUSH
12139: LD_EXP 33
12143: PPUSH
12144: CALL_OW 119
// wait ( 0 0$1 ) ;
12148: LD_INT 35
12150: PPUSH
12151: CALL_OW 67
// DialogueOn ;
12155: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12159: LD_EXP 33
12163: PPUSH
12164: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12168: LD_EXP 21
12172: PPUSH
12173: LD_STRING DH-Beria-1
12175: PPUSH
12176: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12180: LD_EXP 33
12184: PPUSH
12185: LD_STRING DA-Beria-2
12187: PPUSH
12188: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12192: LD_EXP 21
12196: PPUSH
12197: LD_STRING DH-Beria-3
12199: PPUSH
12200: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12204: LD_EXP 33
12208: PPUSH
12209: LD_STRING DA-Beria-4
12211: PPUSH
12212: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12216: LD_EXP 33
12220: PPUSH
12221: LD_STRING DA-Beria-5
12223: PPUSH
12224: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12228: LD_EXP 33
12232: PPUSH
12233: LD_STRING DA-Beria-6
12235: PPUSH
12236: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12240: LD_EXP 21
12244: PPUSH
12245: LD_STRING DA-Beria-7
12247: PPUSH
12248: CALL_OW 88
// DialogueOff ;
12252: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12256: LD_INT 52
12258: PPUSH
12259: LD_INT 2
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// end ;
12269: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
12270: LD_EXP 26
12274: PPUSH
12275: CALL_OW 256
12279: PUSH
12280: LD_INT 10
12282: LESS
12283: IFFALSE 12320
12285: GO 12287
12287: DISABLE
// begin DialogueOn ;
12288: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12292: LD_EXP 26
12296: PPUSH
12297: LD_STRING DK-Kdeath-1
12299: PPUSH
12300: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12304: LD_EXP 21
12308: PPUSH
12309: LD_STRING DH-Kdeath-2
12311: PPUSH
12312: CALL_OW 88
// DialogueOff ;
12316: CALL_OW 7
// end ;
12320: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12321: LD_INT 2
12323: PPUSH
12324: LD_EXP 39
12328: PPUSH
12329: CALL 1358 0 2
12333: IFFALSE 12350
12335: GO 12337
12337: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12338: LD_EXP 21
12342: PPUSH
12343: LD_STRING DH-Obj-1
12345: PPUSH
12346: CALL_OW 88
12350: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12351: LD_INT 2
12353: PPUSH
12354: LD_EXP 40
12358: PPUSH
12359: CALL 1358 0 2
12363: IFFALSE 12380
12365: GO 12367
12367: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12368: LD_EXP 21
12372: PPUSH
12373: LD_STRING DH-Obj-a-1
12375: PPUSH
12376: CALL_OW 88
12380: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12381: LD_EXP 10
12385: PUSH
12386: LD_OWVAR 1
12390: PUSH
12391: LD_INT 14700
12393: PUSH
12394: LD_INT 13650
12396: PUSH
12397: LD_INT 12600
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: PUSH
12405: LD_OWVAR 67
12409: ARRAY
12410: GREATEREQUAL
12411: OR
12412: IFFALSE 12440
12414: GO 12416
12416: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12417: LD_INT 4200
12419: PPUSH
12420: LD_INT 5250
12422: PPUSH
12423: CALL_OW 12
12427: PPUSH
12428: CALL_OW 67
// convoyStarted := true ;
12432: LD_ADDR_EXP 17
12436: PUSH
12437: LD_INT 1
12439: ST_TO_ADDR
// end ;
12440: END
// every 0 0$1 trigger convoyStarted do
12441: LD_EXP 17
12445: IFFALSE 12529
12447: GO 12449
12449: DISABLE
// begin DialogueOn ;
12450: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12454: LD_EXP 29
12458: PPUSH
12459: LD_STRING DShar-Convoy-1
12461: PPUSH
12462: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12466: LD_EXP 21
12470: PPUSH
12471: LD_STRING DH-Convoy-2
12473: PPUSH
12474: CALL_OW 88
// DialogueOff ;
12478: CALL_OW 7
// PrepareConvoy ;
12482: CALL 4537 0 0
// repeat wait ( rand ( 3 3$30 , 5 5$30 ) ) ;
12486: LD_INT 7350
12488: PPUSH
12489: LD_INT 11550
12491: PPUSH
12492: CALL_OW 12
12496: PPUSH
12497: CALL_OW 67
// PrepareConvoy ;
12501: CALL 4537 0 0
// convoyCounter := convoyCounter - 1 ;
12505: LD_ADDR_EXP 16
12509: PUSH
12510: LD_EXP 16
12514: PUSH
12515: LD_INT 1
12517: MINUS
12518: ST_TO_ADDR
// until convoyCounter <= 0 ;
12519: LD_EXP 16
12523: PUSH
12524: LD_INT 0
12526: LESSEQUAL
12527: IFFALSE 12486
// end ;
12529: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12530: LD_EXP 15
12534: PUSH
12535: LD_INT 10
12537: GREATEREQUAL
12538: IFFALSE 12555
12540: GO 12542
12542: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12543: LD_EXP 31
12547: PPUSH
12548: LD_STRING DOm-Fail-1
12550: PPUSH
12551: CALL_OW 94
12555: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12556: LD_EXP 39
12560: NOT
12561: PUSH
12562: LD_EXP 40
12566: NOT
12567: AND
12568: IFFALSE 12580
12570: GO 12572
12572: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12573: LD_STRING RaiderDone
12575: PPUSH
12576: CALL_OW 337
12580: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12581: LD_INT 22
12583: PUSH
12584: LD_INT 2
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 33
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: PUSH
12610: LD_INT 3
12612: GREATEREQUAL
12613: PUSH
12614: LD_INT 22
12616: PUSH
12617: LD_INT 2
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 34
12626: PUSH
12627: LD_INT 31
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PPUSH
12638: CALL_OW 69
12642: PUSH
12643: LD_INT 2
12645: GREATEREQUAL
12646: AND
12647: IFFALSE 12659
12649: GO 12651
12651: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12652: LD_STRING RemoteControlDone
12654: PPUSH
12655: CALL_OW 337
12659: END
// every 0 0$1 trigger convoyCounter = 0 and not ruConvoySquad do var tmp ;
12660: LD_EXP 16
12664: PUSH
12665: LD_INT 0
12667: EQUAL
12668: PUSH
12669: LD_EXP 41
12673: NOT
12674: AND
12675: IFFALSE 13463
12677: GO 12679
12679: DISABLE
12680: LD_INT 0
12682: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12683: LD_STRING ReinforcementsDone
12685: PPUSH
12686: CALL_OW 337
// music_class := music_victory ;
12690: LD_ADDR_OWVAR 72
12694: PUSH
12695: LD_INT 4
12697: ST_TO_ADDR
// InGameOn ;
12698: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12702: LD_EXP 21
12706: PPUSH
12707: LD_STRING DH-end-1
12709: PPUSH
12710: CALL_OW 88
// wait ( 0 0$2 ) ;
12714: LD_INT 70
12716: PPUSH
12717: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12721: LD_EXP 29
12725: PPUSH
12726: LD_STRING DShar-end-2
12728: PPUSH
12729: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12733: LD_EXP 39
12737: NOT
12738: PUSH
12739: LD_EXP 40
12743: NOT
12744: AND
12745: IFFALSE 12761
// begin Say ( Heike , DH-end-3 ) ;
12747: LD_EXP 21
12751: PPUSH
12752: LD_STRING DH-end-3
12754: PPUSH
12755: CALL_OW 88
// end else
12759: GO 12858
// begin Say ( Heike , DH-end-a-3 ) ;
12761: LD_EXP 21
12765: PPUSH
12766: LD_STRING DH-end-a-3
12768: PPUSH
12769: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12773: LD_EXP 29
12777: PPUSH
12778: LD_STRING DShar-end-a-4
12780: PPUSH
12781: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
12785: LD_EXP 21
12789: PPUSH
12790: LD_STRING DH-end-a-5
12792: PPUSH
12793: CALL_OW 88
// InGameOff ;
12797: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
12801: LD_INT 35
12803: PPUSH
12804: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12808: LD_INT 22
12810: PUSH
12811: LD_INT 3
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 21
12820: PUSH
12821: LD_INT 1
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PPUSH
12832: CALL_OW 69
12836: PUSH
12837: LD_INT 0
12839: EQUAL
12840: IFFALSE 12801
// InGameOn ;
12842: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
12846: LD_EXP 21
12850: PPUSH
12851: LD_STRING DH-end-a-6
12853: PPUSH
12854: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
12858: LD_EXP 29
12862: PPUSH
12863: LD_STRING DShar-end-3
12865: PPUSH
12866: CALL_OW 94
// if not flamethrowerBuilt then
12870: LD_EXP 20
12874: NOT
12875: IFFALSE 12884
// SetAchievement ( ACH_FIRE ) ;
12877: LD_STRING ACH_FIRE
12879: PPUSH
12880: CALL_OW 543
// if drugsTested then
12884: LD_EXP 6
12888: IFFALSE 12902
// AddMedal ( med1 , 1 ) else
12890: LD_STRING med1
12892: PPUSH
12893: LD_INT 1
12895: PPUSH
12896: CALL_OW 101
12900: GO 12913
// AddMedal ( med1 , - 1 ) ;
12902: LD_STRING med1
12904: PPUSH
12905: LD_INT 1
12907: NEG
12908: PPUSH
12909: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
12913: LD_INT 22
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 33
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PPUSH
12937: CALL_OW 69
12941: PUSH
12942: LD_INT 3
12944: GREATEREQUAL
12945: PUSH
12946: LD_INT 22
12948: PUSH
12949: LD_INT 2
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 34
12958: PUSH
12959: LD_INT 31
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 69
12974: PUSH
12975: LD_INT 2
12977: GREATEREQUAL
12978: AND
12979: IFFALSE 12993
// AddMedal ( med2 , 1 ) else
12981: LD_STRING med2
12983: PPUSH
12984: LD_INT 1
12986: PPUSH
12987: CALL_OW 101
12991: GO 13004
// AddMedal ( med2 , - 1 ) ;
12993: LD_STRING med2
12995: PPUSH
12996: LD_INT 1
12998: NEG
12999: PPUSH
13000: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13004: LD_EXP 15
13008: PUSH
13009: LD_INT 10
13011: PUSH
13012: LD_INT 8
13014: PUSH
13015: LD_INT 6
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: LD_OWVAR 67
13027: ARRAY
13028: LESS
13029: IFFALSE 13043
// AddMedal ( med3 , 1 ) else
13031: LD_STRING med3
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: CALL_OW 101
13041: GO 13054
// AddMedal ( med3 , - 1 ) ;
13043: LD_STRING med3
13045: PPUSH
13046: LD_INT 1
13048: NEG
13049: PPUSH
13050: CALL_OW 101
// GiveMedals ( MAIN ) ;
13054: LD_STRING MAIN
13056: PPUSH
13057: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13061: LD_INT 22
13063: PUSH
13064: LD_INT 2
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 23
13073: PUSH
13074: LD_INT 2
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 21
13083: PUSH
13084: LD_INT 1
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: LIST
13095: PPUSH
13096: CALL_OW 69
13100: PPUSH
13101: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13105: LD_EXP 15
13109: PPUSH
13110: LD_STRING 05_ConvoySavedCounter
13112: PPUSH
13113: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13117: LD_EXP 13
13121: PPUSH
13122: LD_STRING 05_Radar
13124: PPUSH
13125: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13129: LD_EXP 6
13133: PPUSH
13134: LD_STRING 05_DrugsTested
13136: PPUSH
13137: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13141: LD_INT 22
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 33
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PPUSH
13165: CALL_OW 69
13169: PUSH
13170: LD_INT 3
13172: GREATEREQUAL
13173: PUSH
13174: LD_INT 22
13176: PUSH
13177: LD_INT 2
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 34
13186: PUSH
13187: LD_INT 31
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PPUSH
13198: CALL_OW 69
13202: PUSH
13203: LD_INT 2
13205: GREATEREQUAL
13206: AND
13207: PPUSH
13208: LD_STRING 05_RemoteControl
13210: PPUSH
13211: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13215: LD_EXP 21
13219: PPUSH
13220: LD_STRING 05_Heike
13222: PPUSH
13223: CALL_OW 38
// if Aviradze then
13227: LD_EXP 33
13231: IFFALSE 13245
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13233: LD_EXP 33
13237: PPUSH
13238: LD_STRING 05_Aviradze
13240: PPUSH
13241: CALL_OW 38
// if Ibrahim then
13245: LD_EXP 24
13249: IFFALSE 13263
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13251: LD_EXP 24
13255: PPUSH
13256: LD_STRING 05_Ibrahim
13258: PPUSH
13259: CALL_OW 38
// if Kamil then
13263: LD_EXP 25
13267: IFFALSE 13281
// SaveCharacters ( Kamil , 05_Kamil ) ;
13269: LD_EXP 25
13273: PPUSH
13274: LD_STRING 05_Kamil
13276: PPUSH
13277: CALL_OW 38
// if Sophia then
13281: LD_EXP 27
13285: IFFALSE 13299
// SaveCharacters ( Sophia , 05_Sophia ) ;
13287: LD_EXP 27
13291: PPUSH
13292: LD_STRING 05_Sophia
13294: PPUSH
13295: CALL_OW 38
// if Kaia then
13299: LD_EXP 26
13303: IFFALSE 13317
// SaveCharacters ( Kaia , 05_Kaia ) ;
13305: LD_EXP 26
13309: PPUSH
13310: LD_STRING 05_Kaia
13312: PPUSH
13313: CALL_OW 38
// if Givi then
13317: LD_EXP 22
13321: IFFALSE 13335
// SaveCharacters ( Givi , 05_Givi ) ;
13323: LD_EXP 22
13327: PPUSH
13328: LD_STRING 05_Givi
13330: PPUSH
13331: CALL_OW 38
// if Mike then
13335: LD_EXP 23
13339: IFFALSE 13353
// SaveCharacters ( Mike , 05_Mike ) ;
13341: LD_EXP 23
13345: PPUSH
13346: LD_STRING 05_Mike
13348: PPUSH
13349: CALL_OW 38
// if Markov then
13353: LD_EXP 28
13357: IFFALSE 13371
// SaveCharacters ( Markov , 05_Markov ) ;
13359: LD_EXP 28
13363: PPUSH
13364: LD_STRING 05_Markov
13366: PPUSH
13367: CALL_OW 38
// if Kurt then
13371: LD_EXP 32
13375: IFFALSE 13389
// SaveCharacters ( Kurt , 05_Kurt ) ;
13377: LD_EXP 32
13381: PPUSH
13382: LD_STRING 05_Kurt
13384: PPUSH
13385: CALL_OW 38
// if heikeSecondSquad then
13389: LD_EXP 34
13393: IFFALSE 13407
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13395: LD_EXP 34
13399: PPUSH
13400: LD_STRING 05_others
13402: PPUSH
13403: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13407: LD_ADDR_VAR 0 1
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 23
13424: PUSH
13425: LD_INT 0
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: ST_TO_ADDR
// if tmp then
13441: LD_VAR 0 1
13445: IFFALSE 13459
// SaveCharacters ( tmp , 05_apes ) ;
13447: LD_VAR 0 1
13451: PPUSH
13452: LD_STRING 05_apes
13454: PPUSH
13455: CALL_OW 38
// YouWin ;
13459: CALL_OW 103
// end ; end_of_file
13463: PPOPN 1
13465: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13466: LD_EXP 9
13470: PUSH
13471: LD_INT 13
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: CALL_OW 287
13481: PUSH
13482: LD_INT 25
13484: LESS
13485: AND
13486: IFFALSE 13513
13488: GO 13490
13490: DISABLE
// begin enable ;
13491: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13492: LD_INT 1
13494: PPUSH
13495: LD_INT 5
13497: PPUSH
13498: CALL_OW 12
13502: PPUSH
13503: LD_INT 13
13505: PPUSH
13506: LD_INT 1
13508: PPUSH
13509: CALL_OW 55
// end ; end_of_file
13513: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
13514: LD_INT 0
13516: PPUSH
// ar_crane := 88 ;
13517: LD_ADDR_EXP 50
13521: PUSH
13522: LD_INT 88
13524: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13525: LD_ADDR_EXP 45
13529: PUSH
13530: LD_INT 89
13532: ST_TO_ADDR
// us_hack := 99 ;
13533: LD_ADDR_EXP 46
13537: PUSH
13538: LD_INT 99
13540: ST_TO_ADDR
// us_artillery := 97 ;
13541: LD_ADDR_EXP 47
13545: PUSH
13546: LD_INT 97
13548: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13549: LD_ADDR_EXP 48
13553: PUSH
13554: LD_INT 91
13556: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13557: LD_ADDR_EXP 49
13561: PUSH
13562: LD_INT 92
13564: ST_TO_ADDR
// ru_radar := 98 ;
13565: LD_ADDR_EXP 44
13569: PUSH
13570: LD_INT 98
13572: ST_TO_ADDR
// tech_Artillery := 80 ;
13573: LD_ADDR_EXP 51
13577: PUSH
13578: LD_INT 80
13580: ST_TO_ADDR
// tech_RadMat := 81 ;
13581: LD_ADDR_EXP 52
13585: PUSH
13586: LD_INT 81
13588: ST_TO_ADDR
// tech_BasicTools := 82 ;
13589: LD_ADDR_EXP 53
13593: PUSH
13594: LD_INT 82
13596: ST_TO_ADDR
// tech_Cargo := 83 ;
13597: LD_ADDR_EXP 54
13601: PUSH
13602: LD_INT 83
13604: ST_TO_ADDR
// tech_Track := 84 ;
13605: LD_ADDR_EXP 55
13609: PUSH
13610: LD_INT 84
13612: ST_TO_ADDR
// tech_Crane := 85 ;
13613: LD_ADDR_EXP 56
13617: PUSH
13618: LD_INT 85
13620: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13621: LD_ADDR_EXP 57
13625: PUSH
13626: LD_INT 86
13628: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13629: LD_ADDR_EXP 58
13633: PUSH
13634: LD_INT 87
13636: ST_TO_ADDR
// end ;
13637: LD_VAR 0 1
13641: RET
// every 1 do
13642: GO 13644
13644: DISABLE
// InitGlobalVariables ; end_of_file
13645: CALL 13514 0 0
13649: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13650: LD_INT 0
13652: PPUSH
13653: PPUSH
13654: PPUSH
13655: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13656: LD_VAR 0 1
13660: PPUSH
13661: CALL_OW 264
13665: PUSH
13666: LD_EXP 48
13670: EQUAL
13671: IFFALSE 13743
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13673: LD_INT 68
13675: PPUSH
13676: LD_VAR 0 1
13680: PPUSH
13681: CALL_OW 255
13685: PPUSH
13686: CALL_OW 321
13690: PUSH
13691: LD_INT 2
13693: EQUAL
13694: IFFALSE 13706
// eff := 70 else
13696: LD_ADDR_VAR 0 4
13700: PUSH
13701: LD_INT 70
13703: ST_TO_ADDR
13704: GO 13714
// eff := 30 ;
13706: LD_ADDR_VAR 0 4
13710: PUSH
13711: LD_INT 30
13713: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13714: LD_VAR 0 1
13718: PPUSH
13719: CALL_OW 250
13723: PPUSH
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 251
13733: PPUSH
13734: LD_VAR 0 4
13738: PPUSH
13739: CALL_OW 495
// end ; end ;
13743: LD_VAR 0 2
13747: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
13748: LD_INT 0
13750: PPUSH
// end ;
13751: LD_VAR 0 4
13755: RET
// export function SOS_Command ( cmd ) ; begin
13756: LD_INT 0
13758: PPUSH
// end ;
13759: LD_VAR 0 2
13763: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
13764: LD_VAR 0 1
13768: PUSH
13769: LD_INT 254
13771: EQUAL
13772: PUSH
13773: LD_VAR 0 2
13777: PPUSH
13778: CALL_OW 264
13782: PUSH
13783: LD_EXP 46
13787: EQUAL
13788: AND
13789: PUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: CALL_OW 263
13799: PUSH
13800: LD_INT 3
13802: EQUAL
13803: AND
13804: IFFALSE 13820
// HackDestroyVehicle ( unit , selectedUnit ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_VAR 0 3
13815: PPUSH
13816: CALL 15327 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
13820: LD_VAR 0 1
13824: PUSH
13825: LD_INT 255
13827: EQUAL
13828: PUSH
13829: LD_VAR 0 2
13833: PPUSH
13834: CALL_OW 264
13838: PUSH
13839: LD_INT 14
13841: PUSH
13842: LD_INT 53
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: IN
13849: AND
13850: PUSH
13851: LD_VAR 0 4
13855: PPUSH
13856: LD_VAR 0 5
13860: PPUSH
13861: CALL_OW 488
13865: AND
13866: IFFALSE 13890
// CutTreeXYR ( unit , x , y , 12 ) ;
13868: LD_VAR 0 2
13872: PPUSH
13873: LD_VAR 0 4
13877: PPUSH
13878: LD_VAR 0 5
13882: PPUSH
13883: LD_INT 12
13885: PPUSH
13886: CALL 13893 0 4
// end ;
13890: PPOPN 5
13892: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13893: LD_INT 0
13895: PPUSH
13896: PPUSH
13897: PPUSH
13898: PPUSH
13899: PPUSH
13900: PPUSH
13901: PPUSH
13902: PPUSH
13903: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
13904: LD_VAR 0 1
13908: NOT
13909: PUSH
13910: LD_VAR 0 2
13914: PPUSH
13915: LD_VAR 0 3
13919: PPUSH
13920: CALL_OW 488
13924: NOT
13925: OR
13926: PUSH
13927: LD_VAR 0 4
13931: NOT
13932: OR
13933: IFFALSE 13937
// exit ;
13935: GO 14277
// list := [ ] ;
13937: LD_ADDR_VAR 0 13
13941: PUSH
13942: EMPTY
13943: ST_TO_ADDR
// if x - r < 0 then
13944: LD_VAR 0 2
13948: PUSH
13949: LD_VAR 0 4
13953: MINUS
13954: PUSH
13955: LD_INT 0
13957: LESS
13958: IFFALSE 13970
// min_x := 0 else
13960: LD_ADDR_VAR 0 7
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
13968: GO 13986
// min_x := x - r ;
13970: LD_ADDR_VAR 0 7
13974: PUSH
13975: LD_VAR 0 2
13979: PUSH
13980: LD_VAR 0 4
13984: MINUS
13985: ST_TO_ADDR
// if y - r < 0 then
13986: LD_VAR 0 3
13990: PUSH
13991: LD_VAR 0 4
13995: MINUS
13996: PUSH
13997: LD_INT 0
13999: LESS
14000: IFFALSE 14012
// min_y := 0 else
14002: LD_ADDR_VAR 0 8
14006: PUSH
14007: LD_INT 0
14009: ST_TO_ADDR
14010: GO 14028
// min_y := y - r ;
14012: LD_ADDR_VAR 0 8
14016: PUSH
14017: LD_VAR 0 3
14021: PUSH
14022: LD_VAR 0 4
14026: MINUS
14027: ST_TO_ADDR
// max_x := x + r ;
14028: LD_ADDR_VAR 0 9
14032: PUSH
14033: LD_VAR 0 2
14037: PUSH
14038: LD_VAR 0 4
14042: PLUS
14043: ST_TO_ADDR
// max_y := y + r ;
14044: LD_ADDR_VAR 0 10
14048: PUSH
14049: LD_VAR 0 3
14053: PUSH
14054: LD_VAR 0 4
14058: PLUS
14059: ST_TO_ADDR
// for _x = min_x to max_x do
14060: LD_ADDR_VAR 0 11
14064: PUSH
14065: DOUBLE
14066: LD_VAR 0 7
14070: DEC
14071: ST_TO_ADDR
14072: LD_VAR 0 9
14076: PUSH
14077: FOR_TO
14078: IFFALSE 14195
// for _y = min_y to max_y do
14080: LD_ADDR_VAR 0 12
14084: PUSH
14085: DOUBLE
14086: LD_VAR 0 8
14090: DEC
14091: ST_TO_ADDR
14092: LD_VAR 0 10
14096: PUSH
14097: FOR_TO
14098: IFFALSE 14191
// begin if not ValidHex ( _x , _y ) then
14100: LD_VAR 0 11
14104: PPUSH
14105: LD_VAR 0 12
14109: PPUSH
14110: CALL_OW 488
14114: NOT
14115: IFFALSE 14119
// continue ;
14117: GO 14097
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14119: LD_VAR 0 11
14123: PPUSH
14124: LD_VAR 0 12
14128: PPUSH
14129: CALL_OW 351
14133: PUSH
14134: LD_VAR 0 11
14138: PPUSH
14139: LD_VAR 0 12
14143: PPUSH
14144: CALL_OW 554
14148: AND
14149: IFFALSE 14189
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14151: LD_ADDR_VAR 0 13
14155: PUSH
14156: LD_VAR 0 13
14160: PPUSH
14161: LD_VAR 0 13
14165: PUSH
14166: LD_INT 1
14168: PLUS
14169: PPUSH
14170: LD_VAR 0 11
14174: PUSH
14175: LD_VAR 0 12
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PPUSH
14184: CALL_OW 2
14188: ST_TO_ADDR
// end ;
14189: GO 14097
14191: POP
14192: POP
14193: GO 14077
14195: POP
14196: POP
// if not list then
14197: LD_VAR 0 13
14201: NOT
14202: IFFALSE 14206
// exit ;
14204: GO 14277
// for i in list do
14206: LD_ADDR_VAR 0 6
14210: PUSH
14211: LD_VAR 0 13
14215: PUSH
14216: FOR_IN
14217: IFFALSE 14275
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14219: LD_VAR 0 1
14223: PPUSH
14224: LD_STRING M
14226: PUSH
14227: LD_VAR 0 6
14231: PUSH
14232: LD_INT 1
14234: ARRAY
14235: PUSH
14236: LD_VAR 0 6
14240: PUSH
14241: LD_INT 2
14243: ARRAY
14244: PUSH
14245: LD_INT 0
14247: PUSH
14248: LD_INT 0
14250: PUSH
14251: LD_INT 0
14253: PUSH
14254: LD_INT 0
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: PPUSH
14269: CALL_OW 447
14273: GO 14216
14275: POP
14276: POP
// end ;
14277: LD_VAR 0 5
14281: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14282: LD_EXP 59
14286: NOT
14287: IFFALSE 14337
14289: GO 14291
14291: DISABLE
// begin initHack := true ;
14292: LD_ADDR_EXP 59
14296: PUSH
14297: LD_INT 1
14299: ST_TO_ADDR
// hackTanks := [ ] ;
14300: LD_ADDR_EXP 60
14304: PUSH
14305: EMPTY
14306: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14307: LD_ADDR_EXP 61
14311: PUSH
14312: EMPTY
14313: ST_TO_ADDR
// hackLimit := 3 ;
14314: LD_ADDR_EXP 62
14318: PUSH
14319: LD_INT 3
14321: ST_TO_ADDR
// hackDist := 12 ;
14322: LD_ADDR_EXP 63
14326: PUSH
14327: LD_INT 12
14329: ST_TO_ADDR
// hackCounter := [ ] ;
14330: LD_ADDR_EXP 64
14334: PUSH
14335: EMPTY
14336: ST_TO_ADDR
// end ;
14337: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14338: LD_EXP 59
14342: PUSH
14343: LD_INT 34
14345: PUSH
14346: LD_EXP 46
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 69
14359: AND
14360: IFFALSE 14615
14362: GO 14364
14364: DISABLE
14365: LD_INT 0
14367: PPUSH
14368: PPUSH
// begin enable ;
14369: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14370: LD_ADDR_VAR 0 1
14374: PUSH
14375: LD_INT 34
14377: PUSH
14378: LD_EXP 46
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 69
14391: PUSH
14392: FOR_IN
14393: IFFALSE 14613
// begin if not i in hackTanks then
14395: LD_VAR 0 1
14399: PUSH
14400: LD_EXP 60
14404: IN
14405: NOT
14406: IFFALSE 14489
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14408: LD_ADDR_EXP 60
14412: PUSH
14413: LD_EXP 60
14417: PPUSH
14418: LD_EXP 60
14422: PUSH
14423: LD_INT 1
14425: PLUS
14426: PPUSH
14427: LD_VAR 0 1
14431: PPUSH
14432: CALL_OW 1
14436: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14437: LD_ADDR_EXP 61
14441: PUSH
14442: LD_EXP 61
14446: PPUSH
14447: LD_EXP 61
14451: PUSH
14452: LD_INT 1
14454: PLUS
14455: PPUSH
14456: EMPTY
14457: PPUSH
14458: CALL_OW 1
14462: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14463: LD_ADDR_EXP 64
14467: PUSH
14468: LD_EXP 64
14472: PPUSH
14473: LD_EXP 64
14477: PUSH
14478: LD_INT 1
14480: PLUS
14481: PPUSH
14482: EMPTY
14483: PPUSH
14484: CALL_OW 1
14488: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14489: LD_VAR 0 1
14493: PPUSH
14494: CALL_OW 302
14498: NOT
14499: IFFALSE 14512
// begin HackUnlinkAll ( i ) ;
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL 14618 0 1
// continue ;
14510: GO 14392
// end ; HackCheckCapturedStatus ( i ) ;
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL 15061 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14521: LD_ADDR_VAR 0 2
14525: PUSH
14526: LD_INT 81
14528: PUSH
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 255
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 33
14545: PUSH
14546: LD_INT 3
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 91
14555: PUSH
14556: LD_VAR 0 1
14560: PUSH
14561: LD_EXP 63
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 50
14573: PUSH
14574: EMPTY
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: PPUSH
14583: CALL_OW 69
14587: ST_TO_ADDR
// if not tmp then
14588: LD_VAR 0 2
14592: NOT
14593: IFFALSE 14597
// continue ;
14595: GO 14392
// HackLink ( i , tmp ) ;
14597: LD_VAR 0 1
14601: PPUSH
14602: LD_VAR 0 2
14606: PPUSH
14607: CALL 14754 0 2
// end ;
14611: GO 14392
14613: POP
14614: POP
// end ;
14615: PPOPN 2
14617: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
14618: LD_INT 0
14620: PPUSH
14621: PPUSH
14622: PPUSH
// if not hack in hackTanks then
14623: LD_VAR 0 1
14627: PUSH
14628: LD_EXP 60
14632: IN
14633: NOT
14634: IFFALSE 14638
// exit ;
14636: GO 14749
// index := GetElementIndex ( hackTanks , hack ) ;
14638: LD_ADDR_VAR 0 4
14642: PUSH
14643: LD_EXP 60
14647: PPUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL 32827 0 2
14657: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
14658: LD_EXP 61
14662: PUSH
14663: LD_VAR 0 4
14667: ARRAY
14668: IFFALSE 14749
// begin for i in hackTanksCaptured [ index ] do
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: LD_EXP 61
14679: PUSH
14680: LD_VAR 0 4
14684: ARRAY
14685: PUSH
14686: FOR_IN
14687: IFFALSE 14713
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
14689: LD_VAR 0 3
14693: PUSH
14694: LD_INT 1
14696: ARRAY
14697: PPUSH
14698: LD_VAR 0 3
14702: PUSH
14703: LD_INT 2
14705: ARRAY
14706: PPUSH
14707: CALL_OW 235
14711: GO 14686
14713: POP
14714: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
14715: LD_ADDR_EXP 61
14719: PUSH
14720: LD_EXP 61
14724: PPUSH
14725: LD_VAR 0 4
14729: PPUSH
14730: EMPTY
14731: PPUSH
14732: CALL_OW 1
14736: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
14737: LD_VAR 0 1
14741: PPUSH
14742: LD_INT 0
14744: PPUSH
14745: CALL_OW 505
// end ; end ;
14749: LD_VAR 0 2
14753: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
14754: LD_INT 0
14756: PPUSH
14757: PPUSH
14758: PPUSH
// if not hack in hackTanks or not vehicles then
14759: LD_VAR 0 1
14763: PUSH
14764: LD_EXP 60
14768: IN
14769: NOT
14770: PUSH
14771: LD_VAR 0 2
14775: NOT
14776: OR
14777: IFFALSE 14781
// exit ;
14779: GO 15056
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
14781: LD_ADDR_VAR 0 2
14785: PUSH
14786: LD_VAR 0 1
14790: PPUSH
14791: LD_VAR 0 2
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_INT 1
14801: PPUSH
14802: CALL 33477 0 4
14806: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
14807: LD_ADDR_VAR 0 5
14811: PUSH
14812: LD_EXP 60
14816: PPUSH
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL 32827 0 2
14826: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
14827: LD_EXP 61
14831: PUSH
14832: LD_VAR 0 5
14836: ARRAY
14837: PUSH
14838: LD_EXP 62
14842: LESS
14843: IFFALSE 15032
// begin for i := 1 to vehicles do
14845: LD_ADDR_VAR 0 4
14849: PUSH
14850: DOUBLE
14851: LD_INT 1
14853: DEC
14854: ST_TO_ADDR
14855: LD_VAR 0 2
14859: PUSH
14860: FOR_TO
14861: IFFALSE 15030
// begin if hackTanksCaptured [ index ] = hackLimit then
14863: LD_EXP 61
14867: PUSH
14868: LD_VAR 0 5
14872: ARRAY
14873: PUSH
14874: LD_EXP 62
14878: EQUAL
14879: IFFALSE 14883
// break ;
14881: GO 15030
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
14883: LD_ADDR_EXP 64
14887: PUSH
14888: LD_EXP 64
14892: PPUSH
14893: LD_VAR 0 5
14897: PPUSH
14898: LD_EXP 64
14902: PUSH
14903: LD_VAR 0 5
14907: ARRAY
14908: PUSH
14909: LD_INT 1
14911: PLUS
14912: PPUSH
14913: CALL_OW 1
14917: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
14918: LD_ADDR_EXP 61
14922: PUSH
14923: LD_EXP 61
14927: PPUSH
14928: LD_VAR 0 5
14932: PUSH
14933: LD_EXP 61
14937: PUSH
14938: LD_VAR 0 5
14942: ARRAY
14943: PUSH
14944: LD_INT 1
14946: PLUS
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: LD_VAR 0 2
14956: PUSH
14957: LD_VAR 0 4
14961: ARRAY
14962: PUSH
14963: LD_VAR 0 2
14967: PUSH
14968: LD_VAR 0 4
14972: ARRAY
14973: PPUSH
14974: CALL_OW 255
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PPUSH
14983: CALL 33042 0 3
14987: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
14988: LD_VAR 0 2
14992: PUSH
14993: LD_VAR 0 4
14997: ARRAY
14998: PPUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: CALL_OW 255
15008: PPUSH
15009: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15013: LD_VAR 0 2
15017: PUSH
15018: LD_VAR 0 4
15022: ARRAY
15023: PPUSH
15024: CALL_OW 141
// end ;
15028: GO 14860
15030: POP
15031: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15032: LD_VAR 0 1
15036: PPUSH
15037: LD_EXP 61
15041: PUSH
15042: LD_VAR 0 5
15046: ARRAY
15047: PUSH
15048: LD_INT 0
15050: PLUS
15051: PPUSH
15052: CALL_OW 505
// end ;
15056: LD_VAR 0 3
15060: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15061: LD_INT 0
15063: PPUSH
15064: PPUSH
15065: PPUSH
15066: PPUSH
// if not hack in hackTanks then
15067: LD_VAR 0 1
15071: PUSH
15072: LD_EXP 60
15076: IN
15077: NOT
15078: IFFALSE 15082
// exit ;
15080: GO 15322
// index := GetElementIndex ( hackTanks , hack ) ;
15082: LD_ADDR_VAR 0 4
15086: PUSH
15087: LD_EXP 60
15091: PPUSH
15092: LD_VAR 0 1
15096: PPUSH
15097: CALL 32827 0 2
15101: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15102: LD_ADDR_VAR 0 3
15106: PUSH
15107: DOUBLE
15108: LD_EXP 61
15112: PUSH
15113: LD_VAR 0 4
15117: ARRAY
15118: INC
15119: ST_TO_ADDR
15120: LD_INT 1
15122: PUSH
15123: FOR_DOWNTO
15124: IFFALSE 15296
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15126: LD_ADDR_VAR 0 5
15130: PUSH
15131: LD_EXP 61
15135: PUSH
15136: LD_VAR 0 4
15140: ARRAY
15141: PUSH
15142: LD_VAR 0 3
15146: ARRAY
15147: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15148: LD_VAR 0 5
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: CALL_OW 302
15161: NOT
15162: PUSH
15163: LD_VAR 0 5
15167: PUSH
15168: LD_INT 1
15170: ARRAY
15171: PPUSH
15172: CALL_OW 255
15176: PUSH
15177: LD_VAR 0 1
15181: PPUSH
15182: CALL_OW 255
15186: NONEQUAL
15187: OR
15188: IFFALSE 15294
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15190: LD_VAR 0 5
15194: PUSH
15195: LD_INT 1
15197: ARRAY
15198: PPUSH
15199: CALL_OW 305
15203: PUSH
15204: LD_VAR 0 5
15208: PUSH
15209: LD_INT 1
15211: ARRAY
15212: PPUSH
15213: CALL_OW 255
15217: PUSH
15218: LD_VAR 0 1
15222: PPUSH
15223: CALL_OW 255
15227: EQUAL
15228: AND
15229: IFFALSE 15253
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15231: LD_VAR 0 5
15235: PUSH
15236: LD_INT 1
15238: ARRAY
15239: PPUSH
15240: LD_VAR 0 5
15244: PUSH
15245: LD_INT 2
15247: ARRAY
15248: PPUSH
15249: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15253: LD_ADDR_EXP 61
15257: PUSH
15258: LD_EXP 61
15262: PPUSH
15263: LD_VAR 0 4
15267: PPUSH
15268: LD_EXP 61
15272: PUSH
15273: LD_VAR 0 4
15277: ARRAY
15278: PPUSH
15279: LD_VAR 0 3
15283: PPUSH
15284: CALL_OW 3
15288: PPUSH
15289: CALL_OW 1
15293: ST_TO_ADDR
// end ; end ;
15294: GO 15123
15296: POP
15297: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15298: LD_VAR 0 1
15302: PPUSH
15303: LD_EXP 61
15307: PUSH
15308: LD_VAR 0 4
15312: ARRAY
15313: PUSH
15314: LD_INT 0
15316: PLUS
15317: PPUSH
15318: CALL_OW 505
// end ;
15322: LD_VAR 0 2
15326: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
15331: PPUSH
15332: PPUSH
// if not hack in hackTanks then
15333: LD_VAR 0 1
15337: PUSH
15338: LD_EXP 60
15342: IN
15343: NOT
15344: IFFALSE 15348
// exit ;
15346: GO 15433
// index := GetElementIndex ( hackTanks , hack ) ;
15348: LD_ADDR_VAR 0 5
15352: PUSH
15353: LD_EXP 60
15357: PPUSH
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL 32827 0 2
15367: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15368: LD_ADDR_VAR 0 4
15372: PUSH
15373: DOUBLE
15374: LD_INT 1
15376: DEC
15377: ST_TO_ADDR
15378: LD_EXP 61
15382: PUSH
15383: LD_VAR 0 5
15387: ARRAY
15388: PUSH
15389: FOR_TO
15390: IFFALSE 15431
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15392: LD_EXP 61
15396: PUSH
15397: LD_VAR 0 5
15401: ARRAY
15402: PUSH
15403: LD_VAR 0 4
15407: ARRAY
15408: PUSH
15409: LD_INT 1
15411: ARRAY
15412: PUSH
15413: LD_VAR 0 2
15417: EQUAL
15418: IFFALSE 15429
// KillUnit ( vehicle ) ;
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 66
15429: GO 15389
15431: POP
15432: POP
// end ; end_of_file
15433: LD_VAR 0 3
15437: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15438: LD_VAR 0 2
15442: PUSH
15443: LD_INT 100
15445: EQUAL
15446: IFFALSE 16395
// begin if not StreamModeActive then
15448: LD_EXP 65
15452: NOT
15453: IFFALSE 15463
// StreamModeActive := true ;
15455: LD_ADDR_EXP 65
15459: PUSH
15460: LD_INT 1
15462: ST_TO_ADDR
// if p3 = 0 then
15463: LD_VAR 0 3
15467: PUSH
15468: LD_INT 0
15470: EQUAL
15471: IFFALSE 15477
// InitStreamMode ;
15473: CALL 16628 0 0
// if p3 = 1 then
15477: LD_VAR 0 3
15481: PUSH
15482: LD_INT 1
15484: EQUAL
15485: IFFALSE 15495
// sRocket := true ;
15487: LD_ADDR_EXP 70
15491: PUSH
15492: LD_INT 1
15494: ST_TO_ADDR
// if p3 = 2 then
15495: LD_VAR 0 3
15499: PUSH
15500: LD_INT 2
15502: EQUAL
15503: IFFALSE 15513
// sSpeed := true ;
15505: LD_ADDR_EXP 69
15509: PUSH
15510: LD_INT 1
15512: ST_TO_ADDR
// if p3 = 3 then
15513: LD_VAR 0 3
15517: PUSH
15518: LD_INT 3
15520: EQUAL
15521: IFFALSE 15531
// sEngine := true ;
15523: LD_ADDR_EXP 71
15527: PUSH
15528: LD_INT 1
15530: ST_TO_ADDR
// if p3 = 4 then
15531: LD_VAR 0 3
15535: PUSH
15536: LD_INT 4
15538: EQUAL
15539: IFFALSE 15549
// sSpec := true ;
15541: LD_ADDR_EXP 68
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// if p3 = 5 then
15549: LD_VAR 0 3
15553: PUSH
15554: LD_INT 5
15556: EQUAL
15557: IFFALSE 15567
// sLevel := true ;
15559: LD_ADDR_EXP 72
15563: PUSH
15564: LD_INT 1
15566: ST_TO_ADDR
// if p3 = 6 then
15567: LD_VAR 0 3
15571: PUSH
15572: LD_INT 6
15574: EQUAL
15575: IFFALSE 15585
// sArmoury := true ;
15577: LD_ADDR_EXP 73
15581: PUSH
15582: LD_INT 1
15584: ST_TO_ADDR
// if p3 = 7 then
15585: LD_VAR 0 3
15589: PUSH
15590: LD_INT 7
15592: EQUAL
15593: IFFALSE 15603
// sRadar := true ;
15595: LD_ADDR_EXP 74
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// if p3 = 8 then
15603: LD_VAR 0 3
15607: PUSH
15608: LD_INT 8
15610: EQUAL
15611: IFFALSE 15621
// sBunker := true ;
15613: LD_ADDR_EXP 75
15617: PUSH
15618: LD_INT 1
15620: ST_TO_ADDR
// if p3 = 9 then
15621: LD_VAR 0 3
15625: PUSH
15626: LD_INT 9
15628: EQUAL
15629: IFFALSE 15639
// sHack := true ;
15631: LD_ADDR_EXP 76
15635: PUSH
15636: LD_INT 1
15638: ST_TO_ADDR
// if p3 = 10 then
15639: LD_VAR 0 3
15643: PUSH
15644: LD_INT 10
15646: EQUAL
15647: IFFALSE 15657
// sFire := true ;
15649: LD_ADDR_EXP 77
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// if p3 = 11 then
15657: LD_VAR 0 3
15661: PUSH
15662: LD_INT 11
15664: EQUAL
15665: IFFALSE 15675
// sRefresh := true ;
15667: LD_ADDR_EXP 78
15671: PUSH
15672: LD_INT 1
15674: ST_TO_ADDR
// if p3 = 12 then
15675: LD_VAR 0 3
15679: PUSH
15680: LD_INT 12
15682: EQUAL
15683: IFFALSE 15693
// sExp := true ;
15685: LD_ADDR_EXP 79
15689: PUSH
15690: LD_INT 1
15692: ST_TO_ADDR
// if p3 = 13 then
15693: LD_VAR 0 3
15697: PUSH
15698: LD_INT 13
15700: EQUAL
15701: IFFALSE 15711
// sDepot := true ;
15703: LD_ADDR_EXP 80
15707: PUSH
15708: LD_INT 1
15710: ST_TO_ADDR
// if p3 = 14 then
15711: LD_VAR 0 3
15715: PUSH
15716: LD_INT 14
15718: EQUAL
15719: IFFALSE 15729
// sFlag := true ;
15721: LD_ADDR_EXP 81
15725: PUSH
15726: LD_INT 1
15728: ST_TO_ADDR
// if p3 = 15 then
15729: LD_VAR 0 3
15733: PUSH
15734: LD_INT 15
15736: EQUAL
15737: IFFALSE 15747
// sKamikadze := true ;
15739: LD_ADDR_EXP 89
15743: PUSH
15744: LD_INT 1
15746: ST_TO_ADDR
// if p3 = 16 then
15747: LD_VAR 0 3
15751: PUSH
15752: LD_INT 16
15754: EQUAL
15755: IFFALSE 15765
// sTroll := true ;
15757: LD_ADDR_EXP 90
15761: PUSH
15762: LD_INT 1
15764: ST_TO_ADDR
// if p3 = 17 then
15765: LD_VAR 0 3
15769: PUSH
15770: LD_INT 17
15772: EQUAL
15773: IFFALSE 15783
// sSlow := true ;
15775: LD_ADDR_EXP 91
15779: PUSH
15780: LD_INT 1
15782: ST_TO_ADDR
// if p3 = 18 then
15783: LD_VAR 0 3
15787: PUSH
15788: LD_INT 18
15790: EQUAL
15791: IFFALSE 15801
// sLack := true ;
15793: LD_ADDR_EXP 92
15797: PUSH
15798: LD_INT 1
15800: ST_TO_ADDR
// if p3 = 19 then
15801: LD_VAR 0 3
15805: PUSH
15806: LD_INT 19
15808: EQUAL
15809: IFFALSE 15819
// sTank := true ;
15811: LD_ADDR_EXP 94
15815: PUSH
15816: LD_INT 1
15818: ST_TO_ADDR
// if p3 = 20 then
15819: LD_VAR 0 3
15823: PUSH
15824: LD_INT 20
15826: EQUAL
15827: IFFALSE 15837
// sRemote := true ;
15829: LD_ADDR_EXP 95
15833: PUSH
15834: LD_INT 1
15836: ST_TO_ADDR
// if p3 = 21 then
15837: LD_VAR 0 3
15841: PUSH
15842: LD_INT 21
15844: EQUAL
15845: IFFALSE 15855
// sPowell := true ;
15847: LD_ADDR_EXP 96
15851: PUSH
15852: LD_INT 1
15854: ST_TO_ADDR
// if p3 = 22 then
15855: LD_VAR 0 3
15859: PUSH
15860: LD_INT 22
15862: EQUAL
15863: IFFALSE 15873
// sTeleport := true ;
15865: LD_ADDR_EXP 99
15869: PUSH
15870: LD_INT 1
15872: ST_TO_ADDR
// if p3 = 23 then
15873: LD_VAR 0 3
15877: PUSH
15878: LD_INT 23
15880: EQUAL
15881: IFFALSE 15891
// sOilTower := true ;
15883: LD_ADDR_EXP 101
15887: PUSH
15888: LD_INT 1
15890: ST_TO_ADDR
// if p3 = 24 then
15891: LD_VAR 0 3
15895: PUSH
15896: LD_INT 24
15898: EQUAL
15899: IFFALSE 15909
// sShovel := true ;
15901: LD_ADDR_EXP 102
15905: PUSH
15906: LD_INT 1
15908: ST_TO_ADDR
// if p3 = 25 then
15909: LD_VAR 0 3
15913: PUSH
15914: LD_INT 25
15916: EQUAL
15917: IFFALSE 15927
// sSheik := true ;
15919: LD_ADDR_EXP 103
15923: PUSH
15924: LD_INT 1
15926: ST_TO_ADDR
// if p3 = 26 then
15927: LD_VAR 0 3
15931: PUSH
15932: LD_INT 26
15934: EQUAL
15935: IFFALSE 15945
// sEarthquake := true ;
15937: LD_ADDR_EXP 105
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// if p3 = 27 then
15945: LD_VAR 0 3
15949: PUSH
15950: LD_INT 27
15952: EQUAL
15953: IFFALSE 15963
// sAI := true ;
15955: LD_ADDR_EXP 106
15959: PUSH
15960: LD_INT 1
15962: ST_TO_ADDR
// if p3 = 28 then
15963: LD_VAR 0 3
15967: PUSH
15968: LD_INT 28
15970: EQUAL
15971: IFFALSE 15981
// sCargo := true ;
15973: LD_ADDR_EXP 109
15977: PUSH
15978: LD_INT 1
15980: ST_TO_ADDR
// if p3 = 29 then
15981: LD_VAR 0 3
15985: PUSH
15986: LD_INT 29
15988: EQUAL
15989: IFFALSE 15999
// sDLaser := true ;
15991: LD_ADDR_EXP 110
15995: PUSH
15996: LD_INT 1
15998: ST_TO_ADDR
// if p3 = 30 then
15999: LD_VAR 0 3
16003: PUSH
16004: LD_INT 30
16006: EQUAL
16007: IFFALSE 16017
// sExchange := true ;
16009: LD_ADDR_EXP 111
16013: PUSH
16014: LD_INT 1
16016: ST_TO_ADDR
// if p3 = 31 then
16017: LD_VAR 0 3
16021: PUSH
16022: LD_INT 31
16024: EQUAL
16025: IFFALSE 16035
// sFac := true ;
16027: LD_ADDR_EXP 112
16031: PUSH
16032: LD_INT 1
16034: ST_TO_ADDR
// if p3 = 32 then
16035: LD_VAR 0 3
16039: PUSH
16040: LD_INT 32
16042: EQUAL
16043: IFFALSE 16053
// sPower := true ;
16045: LD_ADDR_EXP 113
16049: PUSH
16050: LD_INT 1
16052: ST_TO_ADDR
// if p3 = 33 then
16053: LD_VAR 0 3
16057: PUSH
16058: LD_INT 33
16060: EQUAL
16061: IFFALSE 16071
// sRandom := true ;
16063: LD_ADDR_EXP 114
16067: PUSH
16068: LD_INT 1
16070: ST_TO_ADDR
// if p3 = 34 then
16071: LD_VAR 0 3
16075: PUSH
16076: LD_INT 34
16078: EQUAL
16079: IFFALSE 16089
// sShield := true ;
16081: LD_ADDR_EXP 115
16085: PUSH
16086: LD_INT 1
16088: ST_TO_ADDR
// if p3 = 35 then
16089: LD_VAR 0 3
16093: PUSH
16094: LD_INT 35
16096: EQUAL
16097: IFFALSE 16107
// sTime := true ;
16099: LD_ADDR_EXP 116
16103: PUSH
16104: LD_INT 1
16106: ST_TO_ADDR
// if p3 = 36 then
16107: LD_VAR 0 3
16111: PUSH
16112: LD_INT 36
16114: EQUAL
16115: IFFALSE 16125
// sTools := true ;
16117: LD_ADDR_EXP 117
16121: PUSH
16122: LD_INT 1
16124: ST_TO_ADDR
// if p3 = 101 then
16125: LD_VAR 0 3
16129: PUSH
16130: LD_INT 101
16132: EQUAL
16133: IFFALSE 16143
// sSold := true ;
16135: LD_ADDR_EXP 82
16139: PUSH
16140: LD_INT 1
16142: ST_TO_ADDR
// if p3 = 102 then
16143: LD_VAR 0 3
16147: PUSH
16148: LD_INT 102
16150: EQUAL
16151: IFFALSE 16161
// sDiff := true ;
16153: LD_ADDR_EXP 83
16157: PUSH
16158: LD_INT 1
16160: ST_TO_ADDR
// if p3 = 103 then
16161: LD_VAR 0 3
16165: PUSH
16166: LD_INT 103
16168: EQUAL
16169: IFFALSE 16179
// sFog := true ;
16171: LD_ADDR_EXP 86
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// if p3 = 104 then
16179: LD_VAR 0 3
16183: PUSH
16184: LD_INT 104
16186: EQUAL
16187: IFFALSE 16197
// sReset := true ;
16189: LD_ADDR_EXP 87
16193: PUSH
16194: LD_INT 1
16196: ST_TO_ADDR
// if p3 = 105 then
16197: LD_VAR 0 3
16201: PUSH
16202: LD_INT 105
16204: EQUAL
16205: IFFALSE 16215
// sSun := true ;
16207: LD_ADDR_EXP 88
16211: PUSH
16212: LD_INT 1
16214: ST_TO_ADDR
// if p3 = 106 then
16215: LD_VAR 0 3
16219: PUSH
16220: LD_INT 106
16222: EQUAL
16223: IFFALSE 16233
// sTiger := true ;
16225: LD_ADDR_EXP 84
16229: PUSH
16230: LD_INT 1
16232: ST_TO_ADDR
// if p3 = 107 then
16233: LD_VAR 0 3
16237: PUSH
16238: LD_INT 107
16240: EQUAL
16241: IFFALSE 16251
// sBomb := true ;
16243: LD_ADDR_EXP 85
16247: PUSH
16248: LD_INT 1
16250: ST_TO_ADDR
// if p3 = 108 then
16251: LD_VAR 0 3
16255: PUSH
16256: LD_INT 108
16258: EQUAL
16259: IFFALSE 16269
// sWound := true ;
16261: LD_ADDR_EXP 93
16265: PUSH
16266: LD_INT 1
16268: ST_TO_ADDR
// if p3 = 109 then
16269: LD_VAR 0 3
16273: PUSH
16274: LD_INT 109
16276: EQUAL
16277: IFFALSE 16287
// sBetray := true ;
16279: LD_ADDR_EXP 97
16283: PUSH
16284: LD_INT 1
16286: ST_TO_ADDR
// if p3 = 110 then
16287: LD_VAR 0 3
16291: PUSH
16292: LD_INT 110
16294: EQUAL
16295: IFFALSE 16305
// sContamin := true ;
16297: LD_ADDR_EXP 98
16301: PUSH
16302: LD_INT 1
16304: ST_TO_ADDR
// if p3 = 111 then
16305: LD_VAR 0 3
16309: PUSH
16310: LD_INT 111
16312: EQUAL
16313: IFFALSE 16323
// sOil := true ;
16315: LD_ADDR_EXP 100
16319: PUSH
16320: LD_INT 1
16322: ST_TO_ADDR
// if p3 = 112 then
16323: LD_VAR 0 3
16327: PUSH
16328: LD_INT 112
16330: EQUAL
16331: IFFALSE 16341
// sStu := true ;
16333: LD_ADDR_EXP 104
16337: PUSH
16338: LD_INT 1
16340: ST_TO_ADDR
// if p3 = 113 then
16341: LD_VAR 0 3
16345: PUSH
16346: LD_INT 113
16348: EQUAL
16349: IFFALSE 16359
// sBazooka := true ;
16351: LD_ADDR_EXP 107
16355: PUSH
16356: LD_INT 1
16358: ST_TO_ADDR
// if p3 = 114 then
16359: LD_VAR 0 3
16363: PUSH
16364: LD_INT 114
16366: EQUAL
16367: IFFALSE 16377
// sMortar := true ;
16369: LD_ADDR_EXP 108
16373: PUSH
16374: LD_INT 1
16376: ST_TO_ADDR
// if p3 = 115 then
16377: LD_VAR 0 3
16381: PUSH
16382: LD_INT 115
16384: EQUAL
16385: IFFALSE 16395
// sRanger := true ;
16387: LD_ADDR_EXP 118
16391: PUSH
16392: LD_INT 1
16394: ST_TO_ADDR
// end ; if p2 = 101 then
16395: LD_VAR 0 2
16399: PUSH
16400: LD_INT 101
16402: EQUAL
16403: IFFALSE 16606
// begin case p3 of 1 :
16405: LD_VAR 0 3
16409: PUSH
16410: LD_INT 1
16412: DOUBLE
16413: EQUAL
16414: IFTRUE 16418
16416: GO 16425
16418: POP
// hHackUnlimitedResources ; 2 :
16419: CALL 26700 0 0
16423: GO 16606
16425: LD_INT 2
16427: DOUBLE
16428: EQUAL
16429: IFTRUE 16433
16431: GO 16440
16433: POP
// hHackSetLevel10 ; 3 :
16434: CALL 26833 0 0
16438: GO 16606
16440: LD_INT 3
16442: DOUBLE
16443: EQUAL
16444: IFTRUE 16448
16446: GO 16455
16448: POP
// hHackSetLevel10YourUnits ; 4 :
16449: CALL 26918 0 0
16453: GO 16606
16455: LD_INT 4
16457: DOUBLE
16458: EQUAL
16459: IFTRUE 16463
16461: GO 16485
16463: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
16464: LD_VAR 0 4
16468: PPUSH
16469: LD_VAR 0 5
16473: PPUSH
16474: LD_VAR 0 6
16478: PPUSH
16479: CALL 27008 0 3
16483: GO 16606
16485: LD_INT 5
16487: DOUBLE
16488: EQUAL
16489: IFTRUE 16493
16491: GO 16500
16493: POP
// hHackSpawnVehicle ; 6 :
16494: CALL 27069 0 0
16498: GO 16606
16500: LD_INT 6
16502: DOUBLE
16503: EQUAL
16504: IFTRUE 16508
16506: GO 16515
16508: POP
// hHackInvincible ; 7 :
16509: CALL 27615 0 0
16513: GO 16606
16515: LD_INT 7
16517: DOUBLE
16518: EQUAL
16519: IFTRUE 16523
16521: GO 16530
16523: POP
// hHackInvisible ; 8 :
16524: CALL 27726 0 0
16528: GO 16606
16530: LD_INT 8
16532: DOUBLE
16533: EQUAL
16534: IFTRUE 16538
16536: GO 16545
16538: POP
// hHackChangeYourSide ; 9 :
16539: CALL 27783 0 0
16543: GO 16606
16545: LD_INT 9
16547: DOUBLE
16548: EQUAL
16549: IFTRUE 16553
16551: GO 16560
16553: POP
// hHackChangeUnitSide ; 10 :
16554: CALL 27825 0 0
16558: GO 16606
16560: LD_INT 10
16562: DOUBLE
16563: EQUAL
16564: IFTRUE 16568
16566: GO 16575
16568: POP
// hHackFog ; 11 :
16569: CALL 27926 0 0
16573: GO 16606
16575: LD_INT 11
16577: DOUBLE
16578: EQUAL
16579: IFTRUE 16583
16581: GO 16590
16583: POP
// hHackApeman ; 12 :
16584: CALL 27941 0 0
16588: GO 16606
16590: LD_INT 12
16592: DOUBLE
16593: EQUAL
16594: IFTRUE 16598
16596: GO 16605
16598: POP
// hHackBoom ; end ;
16599: CALL 28026 0 0
16603: GO 16606
16605: POP
// end ; end ;
16606: PPOPN 6
16608: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16609: GO 16611
16611: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16612: LD_STRING initStreamRollete();
16614: PPUSH
16615: CALL_OW 559
// InitStreamMode ;
16619: CALL 16628 0 0
// DefineStreamItems ( ) ;
16623: CALL 17068 0 0
// end ;
16627: END
// function InitStreamMode ; begin
16628: LD_INT 0
16630: PPUSH
// streamModeActive := false ;
16631: LD_ADDR_EXP 65
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// normalCounter := 36 ;
16639: LD_ADDR_EXP 66
16643: PUSH
16644: LD_INT 36
16646: ST_TO_ADDR
// hardcoreCounter := 16 ;
16647: LD_ADDR_EXP 67
16651: PUSH
16652: LD_INT 16
16654: ST_TO_ADDR
// sRocket := false ;
16655: LD_ADDR_EXP 70
16659: PUSH
16660: LD_INT 0
16662: ST_TO_ADDR
// sSpeed := false ;
16663: LD_ADDR_EXP 69
16667: PUSH
16668: LD_INT 0
16670: ST_TO_ADDR
// sEngine := false ;
16671: LD_ADDR_EXP 71
16675: PUSH
16676: LD_INT 0
16678: ST_TO_ADDR
// sSpec := false ;
16679: LD_ADDR_EXP 68
16683: PUSH
16684: LD_INT 0
16686: ST_TO_ADDR
// sLevel := false ;
16687: LD_ADDR_EXP 72
16691: PUSH
16692: LD_INT 0
16694: ST_TO_ADDR
// sArmoury := false ;
16695: LD_ADDR_EXP 73
16699: PUSH
16700: LD_INT 0
16702: ST_TO_ADDR
// sRadar := false ;
16703: LD_ADDR_EXP 74
16707: PUSH
16708: LD_INT 0
16710: ST_TO_ADDR
// sBunker := false ;
16711: LD_ADDR_EXP 75
16715: PUSH
16716: LD_INT 0
16718: ST_TO_ADDR
// sHack := false ;
16719: LD_ADDR_EXP 76
16723: PUSH
16724: LD_INT 0
16726: ST_TO_ADDR
// sFire := false ;
16727: LD_ADDR_EXP 77
16731: PUSH
16732: LD_INT 0
16734: ST_TO_ADDR
// sRefresh := false ;
16735: LD_ADDR_EXP 78
16739: PUSH
16740: LD_INT 0
16742: ST_TO_ADDR
// sExp := false ;
16743: LD_ADDR_EXP 79
16747: PUSH
16748: LD_INT 0
16750: ST_TO_ADDR
// sDepot := false ;
16751: LD_ADDR_EXP 80
16755: PUSH
16756: LD_INT 0
16758: ST_TO_ADDR
// sFlag := false ;
16759: LD_ADDR_EXP 81
16763: PUSH
16764: LD_INT 0
16766: ST_TO_ADDR
// sKamikadze := false ;
16767: LD_ADDR_EXP 89
16771: PUSH
16772: LD_INT 0
16774: ST_TO_ADDR
// sTroll := false ;
16775: LD_ADDR_EXP 90
16779: PUSH
16780: LD_INT 0
16782: ST_TO_ADDR
// sSlow := false ;
16783: LD_ADDR_EXP 91
16787: PUSH
16788: LD_INT 0
16790: ST_TO_ADDR
// sLack := false ;
16791: LD_ADDR_EXP 92
16795: PUSH
16796: LD_INT 0
16798: ST_TO_ADDR
// sTank := false ;
16799: LD_ADDR_EXP 94
16803: PUSH
16804: LD_INT 0
16806: ST_TO_ADDR
// sRemote := false ;
16807: LD_ADDR_EXP 95
16811: PUSH
16812: LD_INT 0
16814: ST_TO_ADDR
// sPowell := false ;
16815: LD_ADDR_EXP 96
16819: PUSH
16820: LD_INT 0
16822: ST_TO_ADDR
// sTeleport := false ;
16823: LD_ADDR_EXP 99
16827: PUSH
16828: LD_INT 0
16830: ST_TO_ADDR
// sOilTower := false ;
16831: LD_ADDR_EXP 101
16835: PUSH
16836: LD_INT 0
16838: ST_TO_ADDR
// sShovel := false ;
16839: LD_ADDR_EXP 102
16843: PUSH
16844: LD_INT 0
16846: ST_TO_ADDR
// sSheik := false ;
16847: LD_ADDR_EXP 103
16851: PUSH
16852: LD_INT 0
16854: ST_TO_ADDR
// sEarthquake := false ;
16855: LD_ADDR_EXP 105
16859: PUSH
16860: LD_INT 0
16862: ST_TO_ADDR
// sAI := false ;
16863: LD_ADDR_EXP 106
16867: PUSH
16868: LD_INT 0
16870: ST_TO_ADDR
// sCargo := false ;
16871: LD_ADDR_EXP 109
16875: PUSH
16876: LD_INT 0
16878: ST_TO_ADDR
// sDLaser := false ;
16879: LD_ADDR_EXP 110
16883: PUSH
16884: LD_INT 0
16886: ST_TO_ADDR
// sExchange := false ;
16887: LD_ADDR_EXP 111
16891: PUSH
16892: LD_INT 0
16894: ST_TO_ADDR
// sFac := false ;
16895: LD_ADDR_EXP 112
16899: PUSH
16900: LD_INT 0
16902: ST_TO_ADDR
// sPower := false ;
16903: LD_ADDR_EXP 113
16907: PUSH
16908: LD_INT 0
16910: ST_TO_ADDR
// sRandom := false ;
16911: LD_ADDR_EXP 114
16915: PUSH
16916: LD_INT 0
16918: ST_TO_ADDR
// sShield := false ;
16919: LD_ADDR_EXP 115
16923: PUSH
16924: LD_INT 0
16926: ST_TO_ADDR
// sTime := false ;
16927: LD_ADDR_EXP 116
16931: PUSH
16932: LD_INT 0
16934: ST_TO_ADDR
// sTools := false ;
16935: LD_ADDR_EXP 117
16939: PUSH
16940: LD_INT 0
16942: ST_TO_ADDR
// sSold := false ;
16943: LD_ADDR_EXP 82
16947: PUSH
16948: LD_INT 0
16950: ST_TO_ADDR
// sDiff := false ;
16951: LD_ADDR_EXP 83
16955: PUSH
16956: LD_INT 0
16958: ST_TO_ADDR
// sFog := false ;
16959: LD_ADDR_EXP 86
16963: PUSH
16964: LD_INT 0
16966: ST_TO_ADDR
// sReset := false ;
16967: LD_ADDR_EXP 87
16971: PUSH
16972: LD_INT 0
16974: ST_TO_ADDR
// sSun := false ;
16975: LD_ADDR_EXP 88
16979: PUSH
16980: LD_INT 0
16982: ST_TO_ADDR
// sTiger := false ;
16983: LD_ADDR_EXP 84
16987: PUSH
16988: LD_INT 0
16990: ST_TO_ADDR
// sBomb := false ;
16991: LD_ADDR_EXP 85
16995: PUSH
16996: LD_INT 0
16998: ST_TO_ADDR
// sWound := false ;
16999: LD_ADDR_EXP 93
17003: PUSH
17004: LD_INT 0
17006: ST_TO_ADDR
// sBetray := false ;
17007: LD_ADDR_EXP 97
17011: PUSH
17012: LD_INT 0
17014: ST_TO_ADDR
// sContamin := false ;
17015: LD_ADDR_EXP 98
17019: PUSH
17020: LD_INT 0
17022: ST_TO_ADDR
// sOil := false ;
17023: LD_ADDR_EXP 100
17027: PUSH
17028: LD_INT 0
17030: ST_TO_ADDR
// sStu := false ;
17031: LD_ADDR_EXP 104
17035: PUSH
17036: LD_INT 0
17038: ST_TO_ADDR
// sBazooka := false ;
17039: LD_ADDR_EXP 107
17043: PUSH
17044: LD_INT 0
17046: ST_TO_ADDR
// sMortar := false ;
17047: LD_ADDR_EXP 108
17051: PUSH
17052: LD_INT 0
17054: ST_TO_ADDR
// sRanger := false ;
17055: LD_ADDR_EXP 118
17059: PUSH
17060: LD_INT 0
17062: ST_TO_ADDR
// end ;
17063: LD_VAR 0 1
17067: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17068: LD_INT 0
17070: PPUSH
17071: PPUSH
17072: PPUSH
17073: PPUSH
17074: PPUSH
// result := [ ] ;
17075: LD_ADDR_VAR 0 1
17079: PUSH
17080: EMPTY
17081: ST_TO_ADDR
// if campaign_id = 1 then
17082: LD_OWVAR 69
17086: PUSH
17087: LD_INT 1
17089: EQUAL
17090: IFFALSE 20028
// begin case mission_number of 1 :
17092: LD_OWVAR 70
17096: PUSH
17097: LD_INT 1
17099: DOUBLE
17100: EQUAL
17101: IFTRUE 17105
17103: GO 17169
17105: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17106: LD_ADDR_VAR 0 1
17110: PUSH
17111: LD_INT 2
17113: PUSH
17114: LD_INT 4
17116: PUSH
17117: LD_INT 11
17119: PUSH
17120: LD_INT 12
17122: PUSH
17123: LD_INT 15
17125: PUSH
17126: LD_INT 16
17128: PUSH
17129: LD_INT 22
17131: PUSH
17132: LD_INT 23
17134: PUSH
17135: LD_INT 26
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 101
17151: PUSH
17152: LD_INT 102
17154: PUSH
17155: LD_INT 106
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: ST_TO_ADDR
17167: GO 20026
17169: LD_INT 2
17171: DOUBLE
17172: EQUAL
17173: IFTRUE 17177
17175: GO 17249
17177: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
17178: LD_ADDR_VAR 0 1
17182: PUSH
17183: LD_INT 2
17185: PUSH
17186: LD_INT 4
17188: PUSH
17189: LD_INT 11
17191: PUSH
17192: LD_INT 12
17194: PUSH
17195: LD_INT 15
17197: PUSH
17198: LD_INT 16
17200: PUSH
17201: LD_INT 22
17203: PUSH
17204: LD_INT 23
17206: PUSH
17207: LD_INT 26
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 101
17223: PUSH
17224: LD_INT 102
17226: PUSH
17227: LD_INT 105
17229: PUSH
17230: LD_INT 106
17232: PUSH
17233: LD_INT 108
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: ST_TO_ADDR
17247: GO 20026
17249: LD_INT 3
17251: DOUBLE
17252: EQUAL
17253: IFTRUE 17257
17255: GO 17333
17257: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
17258: LD_ADDR_VAR 0 1
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: LD_INT 4
17268: PUSH
17269: LD_INT 5
17271: PUSH
17272: LD_INT 11
17274: PUSH
17275: LD_INT 12
17277: PUSH
17278: LD_INT 15
17280: PUSH
17281: LD_INT 16
17283: PUSH
17284: LD_INT 22
17286: PUSH
17287: LD_INT 26
17289: PUSH
17290: LD_INT 36
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 101
17307: PUSH
17308: LD_INT 102
17310: PUSH
17311: LD_INT 105
17313: PUSH
17314: LD_INT 106
17316: PUSH
17317: LD_INT 108
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: ST_TO_ADDR
17331: GO 20026
17333: LD_INT 4
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17425
17341: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17342: LD_ADDR_VAR 0 1
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: LD_INT 4
17352: PUSH
17353: LD_INT 5
17355: PUSH
17356: LD_INT 8
17358: PUSH
17359: LD_INT 11
17361: PUSH
17362: LD_INT 12
17364: PUSH
17365: LD_INT 15
17367: PUSH
17368: LD_INT 16
17370: PUSH
17371: LD_INT 22
17373: PUSH
17374: LD_INT 23
17376: PUSH
17377: LD_INT 26
17379: PUSH
17380: LD_INT 36
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 101
17399: PUSH
17400: LD_INT 102
17402: PUSH
17403: LD_INT 105
17405: PUSH
17406: LD_INT 106
17408: PUSH
17409: LD_INT 108
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: ST_TO_ADDR
17423: GO 20026
17425: LD_INT 5
17427: DOUBLE
17428: EQUAL
17429: IFTRUE 17433
17431: GO 17533
17433: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17434: LD_ADDR_VAR 0 1
17438: PUSH
17439: LD_INT 2
17441: PUSH
17442: LD_INT 4
17444: PUSH
17445: LD_INT 5
17447: PUSH
17448: LD_INT 6
17450: PUSH
17451: LD_INT 8
17453: PUSH
17454: LD_INT 11
17456: PUSH
17457: LD_INT 12
17459: PUSH
17460: LD_INT 15
17462: PUSH
17463: LD_INT 16
17465: PUSH
17466: LD_INT 22
17468: PUSH
17469: LD_INT 23
17471: PUSH
17472: LD_INT 25
17474: PUSH
17475: LD_INT 26
17477: PUSH
17478: LD_INT 36
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 101
17499: PUSH
17500: LD_INT 102
17502: PUSH
17503: LD_INT 105
17505: PUSH
17506: LD_INT 106
17508: PUSH
17509: LD_INT 108
17511: PUSH
17512: LD_INT 109
17514: PUSH
17515: LD_INT 112
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: ST_TO_ADDR
17531: GO 20026
17533: LD_INT 6
17535: DOUBLE
17536: EQUAL
17537: IFTRUE 17541
17539: GO 17661
17541: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17542: LD_ADDR_VAR 0 1
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 4
17552: PUSH
17553: LD_INT 5
17555: PUSH
17556: LD_INT 6
17558: PUSH
17559: LD_INT 8
17561: PUSH
17562: LD_INT 11
17564: PUSH
17565: LD_INT 12
17567: PUSH
17568: LD_INT 15
17570: PUSH
17571: LD_INT 16
17573: PUSH
17574: LD_INT 20
17576: PUSH
17577: LD_INT 21
17579: PUSH
17580: LD_INT 22
17582: PUSH
17583: LD_INT 23
17585: PUSH
17586: LD_INT 25
17588: PUSH
17589: LD_INT 26
17591: PUSH
17592: LD_INT 30
17594: PUSH
17595: LD_INT 31
17597: PUSH
17598: LD_INT 32
17600: PUSH
17601: LD_INT 36
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 101
17627: PUSH
17628: LD_INT 102
17630: PUSH
17631: LD_INT 105
17633: PUSH
17634: LD_INT 106
17636: PUSH
17637: LD_INT 108
17639: PUSH
17640: LD_INT 109
17642: PUSH
17643: LD_INT 112
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: ST_TO_ADDR
17659: GO 20026
17661: LD_INT 7
17663: DOUBLE
17664: EQUAL
17665: IFTRUE 17669
17667: GO 17769
17669: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: LD_INT 4
17680: PUSH
17681: LD_INT 5
17683: PUSH
17684: LD_INT 7
17686: PUSH
17687: LD_INT 11
17689: PUSH
17690: LD_INT 12
17692: PUSH
17693: LD_INT 15
17695: PUSH
17696: LD_INT 16
17698: PUSH
17699: LD_INT 20
17701: PUSH
17702: LD_INT 21
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_INT 23
17710: PUSH
17711: LD_INT 25
17713: PUSH
17714: LD_INT 26
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 101
17735: PUSH
17736: LD_INT 102
17738: PUSH
17739: LD_INT 103
17741: PUSH
17742: LD_INT 105
17744: PUSH
17745: LD_INT 106
17747: PUSH
17748: LD_INT 108
17750: PUSH
17751: LD_INT 112
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: ST_TO_ADDR
17767: GO 20026
17769: LD_INT 8
17771: DOUBLE
17772: EQUAL
17773: IFTRUE 17777
17775: GO 17905
17777: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17778: LD_ADDR_VAR 0 1
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: LD_INT 4
17788: PUSH
17789: LD_INT 5
17791: PUSH
17792: LD_INT 6
17794: PUSH
17795: LD_INT 7
17797: PUSH
17798: LD_INT 8
17800: PUSH
17801: LD_INT 11
17803: PUSH
17804: LD_INT 12
17806: PUSH
17807: LD_INT 15
17809: PUSH
17810: LD_INT 16
17812: PUSH
17813: LD_INT 20
17815: PUSH
17816: LD_INT 21
17818: PUSH
17819: LD_INT 22
17821: PUSH
17822: LD_INT 23
17824: PUSH
17825: LD_INT 25
17827: PUSH
17828: LD_INT 26
17830: PUSH
17831: LD_INT 30
17833: PUSH
17834: LD_INT 31
17836: PUSH
17837: LD_INT 32
17839: PUSH
17840: LD_INT 36
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 101
17867: PUSH
17868: LD_INT 102
17870: PUSH
17871: LD_INT 103
17873: PUSH
17874: LD_INT 105
17876: PUSH
17877: LD_INT 106
17879: PUSH
17880: LD_INT 108
17882: PUSH
17883: LD_INT 109
17885: PUSH
17886: LD_INT 112
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: ST_TO_ADDR
17903: GO 20026
17905: LD_INT 9
17907: DOUBLE
17908: EQUAL
17909: IFTRUE 17913
17911: GO 18049
17913: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17914: LD_ADDR_VAR 0 1
17918: PUSH
17919: LD_INT 2
17921: PUSH
17922: LD_INT 4
17924: PUSH
17925: LD_INT 5
17927: PUSH
17928: LD_INT 6
17930: PUSH
17931: LD_INT 7
17933: PUSH
17934: LD_INT 8
17936: PUSH
17937: LD_INT 11
17939: PUSH
17940: LD_INT 12
17942: PUSH
17943: LD_INT 15
17945: PUSH
17946: LD_INT 16
17948: PUSH
17949: LD_INT 20
17951: PUSH
17952: LD_INT 21
17954: PUSH
17955: LD_INT 22
17957: PUSH
17958: LD_INT 23
17960: PUSH
17961: LD_INT 25
17963: PUSH
17964: LD_INT 26
17966: PUSH
17967: LD_INT 28
17969: PUSH
17970: LD_INT 30
17972: PUSH
17973: LD_INT 31
17975: PUSH
17976: LD_INT 32
17978: PUSH
17979: LD_INT 36
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 101
18007: PUSH
18008: LD_INT 102
18010: PUSH
18011: LD_INT 103
18013: PUSH
18014: LD_INT 105
18016: PUSH
18017: LD_INT 106
18019: PUSH
18020: LD_INT 108
18022: PUSH
18023: LD_INT 109
18025: PUSH
18026: LD_INT 112
18028: PUSH
18029: LD_INT 114
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: ST_TO_ADDR
18047: GO 20026
18049: LD_INT 10
18051: DOUBLE
18052: EQUAL
18053: IFTRUE 18057
18055: GO 18241
18057: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18058: LD_ADDR_VAR 0 1
18062: PUSH
18063: LD_INT 2
18065: PUSH
18066: LD_INT 4
18068: PUSH
18069: LD_INT 5
18071: PUSH
18072: LD_INT 6
18074: PUSH
18075: LD_INT 7
18077: PUSH
18078: LD_INT 8
18080: PUSH
18081: LD_INT 9
18083: PUSH
18084: LD_INT 10
18086: PUSH
18087: LD_INT 11
18089: PUSH
18090: LD_INT 12
18092: PUSH
18093: LD_INT 13
18095: PUSH
18096: LD_INT 14
18098: PUSH
18099: LD_INT 15
18101: PUSH
18102: LD_INT 16
18104: PUSH
18105: LD_INT 17
18107: PUSH
18108: LD_INT 18
18110: PUSH
18111: LD_INT 19
18113: PUSH
18114: LD_INT 20
18116: PUSH
18117: LD_INT 21
18119: PUSH
18120: LD_INT 22
18122: PUSH
18123: LD_INT 23
18125: PUSH
18126: LD_INT 24
18128: PUSH
18129: LD_INT 25
18131: PUSH
18132: LD_INT 26
18134: PUSH
18135: LD_INT 28
18137: PUSH
18138: LD_INT 30
18140: PUSH
18141: LD_INT 31
18143: PUSH
18144: LD_INT 32
18146: PUSH
18147: LD_INT 36
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 101
18183: PUSH
18184: LD_INT 102
18186: PUSH
18187: LD_INT 103
18189: PUSH
18190: LD_INT 104
18192: PUSH
18193: LD_INT 105
18195: PUSH
18196: LD_INT 106
18198: PUSH
18199: LD_INT 107
18201: PUSH
18202: LD_INT 108
18204: PUSH
18205: LD_INT 109
18207: PUSH
18208: LD_INT 110
18210: PUSH
18211: LD_INT 111
18213: PUSH
18214: LD_INT 112
18216: PUSH
18217: LD_INT 114
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: ST_TO_ADDR
18239: GO 20026
18241: LD_INT 11
18243: DOUBLE
18244: EQUAL
18245: IFTRUE 18249
18247: GO 18441
18249: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 2
18257: PUSH
18258: LD_INT 3
18260: PUSH
18261: LD_INT 4
18263: PUSH
18264: LD_INT 5
18266: PUSH
18267: LD_INT 6
18269: PUSH
18270: LD_INT 7
18272: PUSH
18273: LD_INT 8
18275: PUSH
18276: LD_INT 9
18278: PUSH
18279: LD_INT 10
18281: PUSH
18282: LD_INT 11
18284: PUSH
18285: LD_INT 12
18287: PUSH
18288: LD_INT 13
18290: PUSH
18291: LD_INT 14
18293: PUSH
18294: LD_INT 15
18296: PUSH
18297: LD_INT 16
18299: PUSH
18300: LD_INT 17
18302: PUSH
18303: LD_INT 18
18305: PUSH
18306: LD_INT 19
18308: PUSH
18309: LD_INT 20
18311: PUSH
18312: LD_INT 21
18314: PUSH
18315: LD_INT 22
18317: PUSH
18318: LD_INT 23
18320: PUSH
18321: LD_INT 24
18323: PUSH
18324: LD_INT 25
18326: PUSH
18327: LD_INT 26
18329: PUSH
18330: LD_INT 28
18332: PUSH
18333: LD_INT 30
18335: PUSH
18336: LD_INT 31
18338: PUSH
18339: LD_INT 32
18341: PUSH
18342: LD_INT 34
18344: PUSH
18345: LD_INT 36
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 101
18383: PUSH
18384: LD_INT 102
18386: PUSH
18387: LD_INT 103
18389: PUSH
18390: LD_INT 104
18392: PUSH
18393: LD_INT 105
18395: PUSH
18396: LD_INT 106
18398: PUSH
18399: LD_INT 107
18401: PUSH
18402: LD_INT 108
18404: PUSH
18405: LD_INT 109
18407: PUSH
18408: LD_INT 110
18410: PUSH
18411: LD_INT 111
18413: PUSH
18414: LD_INT 112
18416: PUSH
18417: LD_INT 114
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: ST_TO_ADDR
18439: GO 20026
18441: LD_INT 12
18443: DOUBLE
18444: EQUAL
18445: IFTRUE 18449
18447: GO 18657
18449: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18450: LD_ADDR_VAR 0 1
18454: PUSH
18455: LD_INT 1
18457: PUSH
18458: LD_INT 2
18460: PUSH
18461: LD_INT 3
18463: PUSH
18464: LD_INT 4
18466: PUSH
18467: LD_INT 5
18469: PUSH
18470: LD_INT 6
18472: PUSH
18473: LD_INT 7
18475: PUSH
18476: LD_INT 8
18478: PUSH
18479: LD_INT 9
18481: PUSH
18482: LD_INT 10
18484: PUSH
18485: LD_INT 11
18487: PUSH
18488: LD_INT 12
18490: PUSH
18491: LD_INT 13
18493: PUSH
18494: LD_INT 14
18496: PUSH
18497: LD_INT 15
18499: PUSH
18500: LD_INT 16
18502: PUSH
18503: LD_INT 17
18505: PUSH
18506: LD_INT 18
18508: PUSH
18509: LD_INT 19
18511: PUSH
18512: LD_INT 20
18514: PUSH
18515: LD_INT 21
18517: PUSH
18518: LD_INT 22
18520: PUSH
18521: LD_INT 23
18523: PUSH
18524: LD_INT 24
18526: PUSH
18527: LD_INT 25
18529: PUSH
18530: LD_INT 26
18532: PUSH
18533: LD_INT 27
18535: PUSH
18536: LD_INT 28
18538: PUSH
18539: LD_INT 30
18541: PUSH
18542: LD_INT 31
18544: PUSH
18545: LD_INT 32
18547: PUSH
18548: LD_INT 33
18550: PUSH
18551: LD_INT 34
18553: PUSH
18554: LD_INT 36
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 101
18595: PUSH
18596: LD_INT 102
18598: PUSH
18599: LD_INT 103
18601: PUSH
18602: LD_INT 104
18604: PUSH
18605: LD_INT 105
18607: PUSH
18608: LD_INT 106
18610: PUSH
18611: LD_INT 107
18613: PUSH
18614: LD_INT 108
18616: PUSH
18617: LD_INT 109
18619: PUSH
18620: LD_INT 110
18622: PUSH
18623: LD_INT 111
18625: PUSH
18626: LD_INT 112
18628: PUSH
18629: LD_INT 113
18631: PUSH
18632: LD_INT 114
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: ST_TO_ADDR
18655: GO 20026
18657: LD_INT 13
18659: DOUBLE
18660: EQUAL
18661: IFTRUE 18665
18663: GO 18861
18665: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18666: LD_ADDR_VAR 0 1
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: LD_INT 4
18682: PUSH
18683: LD_INT 5
18685: PUSH
18686: LD_INT 8
18688: PUSH
18689: LD_INT 9
18691: PUSH
18692: LD_INT 10
18694: PUSH
18695: LD_INT 11
18697: PUSH
18698: LD_INT 12
18700: PUSH
18701: LD_INT 14
18703: PUSH
18704: LD_INT 15
18706: PUSH
18707: LD_INT 16
18709: PUSH
18710: LD_INT 17
18712: PUSH
18713: LD_INT 18
18715: PUSH
18716: LD_INT 19
18718: PUSH
18719: LD_INT 20
18721: PUSH
18722: LD_INT 21
18724: PUSH
18725: LD_INT 22
18727: PUSH
18728: LD_INT 23
18730: PUSH
18731: LD_INT 24
18733: PUSH
18734: LD_INT 25
18736: PUSH
18737: LD_INT 26
18739: PUSH
18740: LD_INT 27
18742: PUSH
18743: LD_INT 28
18745: PUSH
18746: LD_INT 30
18748: PUSH
18749: LD_INT 31
18751: PUSH
18752: LD_INT 32
18754: PUSH
18755: LD_INT 33
18757: PUSH
18758: LD_INT 34
18760: PUSH
18761: LD_INT 36
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 101
18799: PUSH
18800: LD_INT 102
18802: PUSH
18803: LD_INT 103
18805: PUSH
18806: LD_INT 104
18808: PUSH
18809: LD_INT 105
18811: PUSH
18812: LD_INT 106
18814: PUSH
18815: LD_INT 107
18817: PUSH
18818: LD_INT 108
18820: PUSH
18821: LD_INT 109
18823: PUSH
18824: LD_INT 110
18826: PUSH
18827: LD_INT 111
18829: PUSH
18830: LD_INT 112
18832: PUSH
18833: LD_INT 113
18835: PUSH
18836: LD_INT 114
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: ST_TO_ADDR
18859: GO 20026
18861: LD_INT 14
18863: DOUBLE
18864: EQUAL
18865: IFTRUE 18869
18867: GO 19081
18869: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18870: LD_ADDR_VAR 0 1
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: LD_INT 3
18883: PUSH
18884: LD_INT 4
18886: PUSH
18887: LD_INT 5
18889: PUSH
18890: LD_INT 6
18892: PUSH
18893: LD_INT 7
18895: PUSH
18896: LD_INT 8
18898: PUSH
18899: LD_INT 9
18901: PUSH
18902: LD_INT 10
18904: PUSH
18905: LD_INT 11
18907: PUSH
18908: LD_INT 12
18910: PUSH
18911: LD_INT 13
18913: PUSH
18914: LD_INT 14
18916: PUSH
18917: LD_INT 15
18919: PUSH
18920: LD_INT 16
18922: PUSH
18923: LD_INT 17
18925: PUSH
18926: LD_INT 18
18928: PUSH
18929: LD_INT 19
18931: PUSH
18932: LD_INT 20
18934: PUSH
18935: LD_INT 21
18937: PUSH
18938: LD_INT 22
18940: PUSH
18941: LD_INT 23
18943: PUSH
18944: LD_INT 24
18946: PUSH
18947: LD_INT 25
18949: PUSH
18950: LD_INT 26
18952: PUSH
18953: LD_INT 27
18955: PUSH
18956: LD_INT 28
18958: PUSH
18959: LD_INT 29
18961: PUSH
18962: LD_INT 30
18964: PUSH
18965: LD_INT 31
18967: PUSH
18968: LD_INT 32
18970: PUSH
18971: LD_INT 33
18973: PUSH
18974: LD_INT 34
18976: PUSH
18977: LD_INT 36
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 101
19019: PUSH
19020: LD_INT 102
19022: PUSH
19023: LD_INT 103
19025: PUSH
19026: LD_INT 104
19028: PUSH
19029: LD_INT 105
19031: PUSH
19032: LD_INT 106
19034: PUSH
19035: LD_INT 107
19037: PUSH
19038: LD_INT 108
19040: PUSH
19041: LD_INT 109
19043: PUSH
19044: LD_INT 110
19046: PUSH
19047: LD_INT 111
19049: PUSH
19050: LD_INT 112
19052: PUSH
19053: LD_INT 113
19055: PUSH
19056: LD_INT 114
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: ST_TO_ADDR
19079: GO 20026
19081: LD_INT 15
19083: DOUBLE
19084: EQUAL
19085: IFTRUE 19089
19087: GO 19301
19089: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19090: LD_ADDR_VAR 0 1
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: LD_INT 3
19103: PUSH
19104: LD_INT 4
19106: PUSH
19107: LD_INT 5
19109: PUSH
19110: LD_INT 6
19112: PUSH
19113: LD_INT 7
19115: PUSH
19116: LD_INT 8
19118: PUSH
19119: LD_INT 9
19121: PUSH
19122: LD_INT 10
19124: PUSH
19125: LD_INT 11
19127: PUSH
19128: LD_INT 12
19130: PUSH
19131: LD_INT 13
19133: PUSH
19134: LD_INT 14
19136: PUSH
19137: LD_INT 15
19139: PUSH
19140: LD_INT 16
19142: PUSH
19143: LD_INT 17
19145: PUSH
19146: LD_INT 18
19148: PUSH
19149: LD_INT 19
19151: PUSH
19152: LD_INT 20
19154: PUSH
19155: LD_INT 21
19157: PUSH
19158: LD_INT 22
19160: PUSH
19161: LD_INT 23
19163: PUSH
19164: LD_INT 24
19166: PUSH
19167: LD_INT 25
19169: PUSH
19170: LD_INT 26
19172: PUSH
19173: LD_INT 27
19175: PUSH
19176: LD_INT 28
19178: PUSH
19179: LD_INT 29
19181: PUSH
19182: LD_INT 30
19184: PUSH
19185: LD_INT 31
19187: PUSH
19188: LD_INT 32
19190: PUSH
19191: LD_INT 33
19193: PUSH
19194: LD_INT 34
19196: PUSH
19197: LD_INT 36
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 101
19239: PUSH
19240: LD_INT 102
19242: PUSH
19243: LD_INT 103
19245: PUSH
19246: LD_INT 104
19248: PUSH
19249: LD_INT 105
19251: PUSH
19252: LD_INT 106
19254: PUSH
19255: LD_INT 107
19257: PUSH
19258: LD_INT 108
19260: PUSH
19261: LD_INT 109
19263: PUSH
19264: LD_INT 110
19266: PUSH
19267: LD_INT 111
19269: PUSH
19270: LD_INT 112
19272: PUSH
19273: LD_INT 113
19275: PUSH
19276: LD_INT 114
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: ST_TO_ADDR
19299: GO 20026
19301: LD_INT 16
19303: DOUBLE
19304: EQUAL
19305: IFTRUE 19309
19307: GO 19433
19309: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
19310: LD_ADDR_VAR 0 1
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: LD_INT 4
19320: PUSH
19321: LD_INT 5
19323: PUSH
19324: LD_INT 7
19326: PUSH
19327: LD_INT 11
19329: PUSH
19330: LD_INT 12
19332: PUSH
19333: LD_INT 15
19335: PUSH
19336: LD_INT 16
19338: PUSH
19339: LD_INT 20
19341: PUSH
19342: LD_INT 21
19344: PUSH
19345: LD_INT 22
19347: PUSH
19348: LD_INT 23
19350: PUSH
19351: LD_INT 25
19353: PUSH
19354: LD_INT 26
19356: PUSH
19357: LD_INT 30
19359: PUSH
19360: LD_INT 31
19362: PUSH
19363: LD_INT 32
19365: PUSH
19366: LD_INT 33
19368: PUSH
19369: LD_INT 34
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 101
19395: PUSH
19396: LD_INT 102
19398: PUSH
19399: LD_INT 103
19401: PUSH
19402: LD_INT 106
19404: PUSH
19405: LD_INT 108
19407: PUSH
19408: LD_INT 112
19410: PUSH
19411: LD_INT 113
19413: PUSH
19414: LD_INT 114
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: ST_TO_ADDR
19431: GO 20026
19433: LD_INT 17
19435: DOUBLE
19436: EQUAL
19437: IFTRUE 19441
19439: GO 19653
19441: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19442: LD_ADDR_VAR 0 1
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: LD_INT 2
19452: PUSH
19453: LD_INT 3
19455: PUSH
19456: LD_INT 4
19458: PUSH
19459: LD_INT 5
19461: PUSH
19462: LD_INT 6
19464: PUSH
19465: LD_INT 7
19467: PUSH
19468: LD_INT 8
19470: PUSH
19471: LD_INT 9
19473: PUSH
19474: LD_INT 10
19476: PUSH
19477: LD_INT 11
19479: PUSH
19480: LD_INT 12
19482: PUSH
19483: LD_INT 13
19485: PUSH
19486: LD_INT 14
19488: PUSH
19489: LD_INT 15
19491: PUSH
19492: LD_INT 16
19494: PUSH
19495: LD_INT 17
19497: PUSH
19498: LD_INT 18
19500: PUSH
19501: LD_INT 19
19503: PUSH
19504: LD_INT 20
19506: PUSH
19507: LD_INT 21
19509: PUSH
19510: LD_INT 22
19512: PUSH
19513: LD_INT 23
19515: PUSH
19516: LD_INT 24
19518: PUSH
19519: LD_INT 25
19521: PUSH
19522: LD_INT 26
19524: PUSH
19525: LD_INT 27
19527: PUSH
19528: LD_INT 28
19530: PUSH
19531: LD_INT 29
19533: PUSH
19534: LD_INT 30
19536: PUSH
19537: LD_INT 31
19539: PUSH
19540: LD_INT 32
19542: PUSH
19543: LD_INT 33
19545: PUSH
19546: LD_INT 34
19548: PUSH
19549: LD_INT 36
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 101
19591: PUSH
19592: LD_INT 102
19594: PUSH
19595: LD_INT 103
19597: PUSH
19598: LD_INT 104
19600: PUSH
19601: LD_INT 105
19603: PUSH
19604: LD_INT 106
19606: PUSH
19607: LD_INT 107
19609: PUSH
19610: LD_INT 108
19612: PUSH
19613: LD_INT 109
19615: PUSH
19616: LD_INT 110
19618: PUSH
19619: LD_INT 111
19621: PUSH
19622: LD_INT 112
19624: PUSH
19625: LD_INT 113
19627: PUSH
19628: LD_INT 114
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: ST_TO_ADDR
19651: GO 20026
19653: LD_INT 18
19655: DOUBLE
19656: EQUAL
19657: IFTRUE 19661
19659: GO 19797
19661: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19662: LD_ADDR_VAR 0 1
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: LD_INT 4
19672: PUSH
19673: LD_INT 5
19675: PUSH
19676: LD_INT 7
19678: PUSH
19679: LD_INT 11
19681: PUSH
19682: LD_INT 12
19684: PUSH
19685: LD_INT 15
19687: PUSH
19688: LD_INT 16
19690: PUSH
19691: LD_INT 20
19693: PUSH
19694: LD_INT 21
19696: PUSH
19697: LD_INT 22
19699: PUSH
19700: LD_INT 23
19702: PUSH
19703: LD_INT 25
19705: PUSH
19706: LD_INT 26
19708: PUSH
19709: LD_INT 30
19711: PUSH
19712: LD_INT 31
19714: PUSH
19715: LD_INT 32
19717: PUSH
19718: LD_INT 33
19720: PUSH
19721: LD_INT 34
19723: PUSH
19724: LD_INT 35
19726: PUSH
19727: LD_INT 36
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 101
19755: PUSH
19756: LD_INT 102
19758: PUSH
19759: LD_INT 103
19761: PUSH
19762: LD_INT 106
19764: PUSH
19765: LD_INT 108
19767: PUSH
19768: LD_INT 112
19770: PUSH
19771: LD_INT 113
19773: PUSH
19774: LD_INT 114
19776: PUSH
19777: LD_INT 115
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: ST_TO_ADDR
19795: GO 20026
19797: LD_INT 19
19799: DOUBLE
19800: EQUAL
19801: IFTRUE 19805
19803: GO 20025
19805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19806: LD_ADDR_VAR 0 1
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: LD_INT 2
19816: PUSH
19817: LD_INT 3
19819: PUSH
19820: LD_INT 4
19822: PUSH
19823: LD_INT 5
19825: PUSH
19826: LD_INT 6
19828: PUSH
19829: LD_INT 7
19831: PUSH
19832: LD_INT 8
19834: PUSH
19835: LD_INT 9
19837: PUSH
19838: LD_INT 10
19840: PUSH
19841: LD_INT 11
19843: PUSH
19844: LD_INT 12
19846: PUSH
19847: LD_INT 13
19849: PUSH
19850: LD_INT 14
19852: PUSH
19853: LD_INT 15
19855: PUSH
19856: LD_INT 16
19858: PUSH
19859: LD_INT 17
19861: PUSH
19862: LD_INT 18
19864: PUSH
19865: LD_INT 19
19867: PUSH
19868: LD_INT 20
19870: PUSH
19871: LD_INT 21
19873: PUSH
19874: LD_INT 22
19876: PUSH
19877: LD_INT 23
19879: PUSH
19880: LD_INT 24
19882: PUSH
19883: LD_INT 25
19885: PUSH
19886: LD_INT 26
19888: PUSH
19889: LD_INT 27
19891: PUSH
19892: LD_INT 28
19894: PUSH
19895: LD_INT 29
19897: PUSH
19898: LD_INT 30
19900: PUSH
19901: LD_INT 31
19903: PUSH
19904: LD_INT 32
19906: PUSH
19907: LD_INT 33
19909: PUSH
19910: LD_INT 34
19912: PUSH
19913: LD_INT 35
19915: PUSH
19916: LD_INT 36
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 101
19959: PUSH
19960: LD_INT 102
19962: PUSH
19963: LD_INT 103
19965: PUSH
19966: LD_INT 104
19968: PUSH
19969: LD_INT 105
19971: PUSH
19972: LD_INT 106
19974: PUSH
19975: LD_INT 107
19977: PUSH
19978: LD_INT 108
19980: PUSH
19981: LD_INT 109
19983: PUSH
19984: LD_INT 110
19986: PUSH
19987: LD_INT 111
19989: PUSH
19990: LD_INT 112
19992: PUSH
19993: LD_INT 113
19995: PUSH
19996: LD_INT 114
19998: PUSH
19999: LD_INT 115
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: ST_TO_ADDR
20023: GO 20026
20025: POP
// end else
20026: GO 20245
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_INT 1
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: LD_INT 3
20041: PUSH
20042: LD_INT 4
20044: PUSH
20045: LD_INT 5
20047: PUSH
20048: LD_INT 6
20050: PUSH
20051: LD_INT 7
20053: PUSH
20054: LD_INT 8
20056: PUSH
20057: LD_INT 9
20059: PUSH
20060: LD_INT 10
20062: PUSH
20063: LD_INT 11
20065: PUSH
20066: LD_INT 12
20068: PUSH
20069: LD_INT 13
20071: PUSH
20072: LD_INT 14
20074: PUSH
20075: LD_INT 15
20077: PUSH
20078: LD_INT 16
20080: PUSH
20081: LD_INT 17
20083: PUSH
20084: LD_INT 18
20086: PUSH
20087: LD_INT 19
20089: PUSH
20090: LD_INT 20
20092: PUSH
20093: LD_INT 21
20095: PUSH
20096: LD_INT 22
20098: PUSH
20099: LD_INT 23
20101: PUSH
20102: LD_INT 24
20104: PUSH
20105: LD_INT 25
20107: PUSH
20108: LD_INT 26
20110: PUSH
20111: LD_INT 27
20113: PUSH
20114: LD_INT 28
20116: PUSH
20117: LD_INT 29
20119: PUSH
20120: LD_INT 30
20122: PUSH
20123: LD_INT 31
20125: PUSH
20126: LD_INT 32
20128: PUSH
20129: LD_INT 33
20131: PUSH
20132: LD_INT 34
20134: PUSH
20135: LD_INT 35
20137: PUSH
20138: LD_INT 36
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 101
20181: PUSH
20182: LD_INT 102
20184: PUSH
20185: LD_INT 103
20187: PUSH
20188: LD_INT 104
20190: PUSH
20191: LD_INT 105
20193: PUSH
20194: LD_INT 106
20196: PUSH
20197: LD_INT 107
20199: PUSH
20200: LD_INT 108
20202: PUSH
20203: LD_INT 109
20205: PUSH
20206: LD_INT 110
20208: PUSH
20209: LD_INT 111
20211: PUSH
20212: LD_INT 112
20214: PUSH
20215: LD_INT 113
20217: PUSH
20218: LD_INT 114
20220: PUSH
20221: LD_INT 115
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: ST_TO_ADDR
// if result then
20245: LD_VAR 0 1
20249: IFFALSE 20538
// begin normal :=  ;
20251: LD_ADDR_VAR 0 3
20255: PUSH
20256: LD_STRING 
20258: ST_TO_ADDR
// hardcore :=  ;
20259: LD_ADDR_VAR 0 4
20263: PUSH
20264: LD_STRING 
20266: ST_TO_ADDR
// for i = 1 to normalCounter do
20267: LD_ADDR_VAR 0 5
20271: PUSH
20272: DOUBLE
20273: LD_INT 1
20275: DEC
20276: ST_TO_ADDR
20277: LD_EXP 66
20281: PUSH
20282: FOR_TO
20283: IFFALSE 20384
// begin tmp := 0 ;
20285: LD_ADDR_VAR 0 2
20289: PUSH
20290: LD_STRING 0
20292: ST_TO_ADDR
// if result [ 1 ] then
20293: LD_VAR 0 1
20297: PUSH
20298: LD_INT 1
20300: ARRAY
20301: IFFALSE 20366
// if result [ 1 ] [ 1 ] = i then
20303: LD_VAR 0 1
20307: PUSH
20308: LD_INT 1
20310: ARRAY
20311: PUSH
20312: LD_INT 1
20314: ARRAY
20315: PUSH
20316: LD_VAR 0 5
20320: EQUAL
20321: IFFALSE 20366
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20323: LD_ADDR_VAR 0 1
20327: PUSH
20328: LD_VAR 0 1
20332: PPUSH
20333: LD_INT 1
20335: PPUSH
20336: LD_VAR 0 1
20340: PUSH
20341: LD_INT 1
20343: ARRAY
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: CALL_OW 3
20352: PPUSH
20353: CALL_OW 1
20357: ST_TO_ADDR
// tmp := 1 ;
20358: LD_ADDR_VAR 0 2
20362: PUSH
20363: LD_STRING 1
20365: ST_TO_ADDR
// end ; normal := normal & tmp ;
20366: LD_ADDR_VAR 0 3
20370: PUSH
20371: LD_VAR 0 3
20375: PUSH
20376: LD_VAR 0 2
20380: STR
20381: ST_TO_ADDR
// end ;
20382: GO 20282
20384: POP
20385: POP
// for i = 1 to hardcoreCounter do
20386: LD_ADDR_VAR 0 5
20390: PUSH
20391: DOUBLE
20392: LD_INT 1
20394: DEC
20395: ST_TO_ADDR
20396: LD_EXP 67
20400: PUSH
20401: FOR_TO
20402: IFFALSE 20507
// begin tmp := 0 ;
20404: LD_ADDR_VAR 0 2
20408: PUSH
20409: LD_STRING 0
20411: ST_TO_ADDR
// if result [ 2 ] then
20412: LD_VAR 0 1
20416: PUSH
20417: LD_INT 2
20419: ARRAY
20420: IFFALSE 20489
// if result [ 2 ] [ 1 ] = 100 + i then
20422: LD_VAR 0 1
20426: PUSH
20427: LD_INT 2
20429: ARRAY
20430: PUSH
20431: LD_INT 1
20433: ARRAY
20434: PUSH
20435: LD_INT 100
20437: PUSH
20438: LD_VAR 0 5
20442: PLUS
20443: EQUAL
20444: IFFALSE 20489
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20446: LD_ADDR_VAR 0 1
20450: PUSH
20451: LD_VAR 0 1
20455: PPUSH
20456: LD_INT 2
20458: PPUSH
20459: LD_VAR 0 1
20463: PUSH
20464: LD_INT 2
20466: ARRAY
20467: PPUSH
20468: LD_INT 1
20470: PPUSH
20471: CALL_OW 3
20475: PPUSH
20476: CALL_OW 1
20480: ST_TO_ADDR
// tmp := 1 ;
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_STRING 1
20488: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20489: LD_ADDR_VAR 0 4
20493: PUSH
20494: LD_VAR 0 4
20498: PUSH
20499: LD_VAR 0 2
20503: STR
20504: ST_TO_ADDR
// end ;
20505: GO 20401
20507: POP
20508: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20509: LD_STRING getStreamItemsFromMission("
20511: PUSH
20512: LD_VAR 0 3
20516: STR
20517: PUSH
20518: LD_STRING ","
20520: STR
20521: PUSH
20522: LD_VAR 0 4
20526: STR
20527: PUSH
20528: LD_STRING ")
20530: STR
20531: PPUSH
20532: CALL_OW 559
// end else
20536: GO 20545
// ToLua ( getStreamItemsFromMission("","") ) ;
20538: LD_STRING getStreamItemsFromMission("","")
20540: PPUSH
20541: CALL_OW 559
// end ;
20545: LD_VAR 0 1
20549: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20550: LD_EXP 65
20554: PUSH
20555: LD_EXP 70
20559: AND
20560: IFFALSE 20684
20562: GO 20564
20564: DISABLE
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// begin enable ;
20569: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20570: LD_ADDR_VAR 0 2
20574: PUSH
20575: LD_INT 22
20577: PUSH
20578: LD_OWVAR 2
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: PUSH
20590: LD_INT 34
20592: PUSH
20593: LD_INT 7
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 34
20602: PUSH
20603: LD_INT 45
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 34
20612: PUSH
20613: LD_INT 28
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 34
20622: PUSH
20623: LD_INT 47
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PPUSH
20641: CALL_OW 69
20645: ST_TO_ADDR
// if not tmp then
20646: LD_VAR 0 2
20650: NOT
20651: IFFALSE 20655
// exit ;
20653: GO 20684
// for i in tmp do
20655: LD_ADDR_VAR 0 1
20659: PUSH
20660: LD_VAR 0 2
20664: PUSH
20665: FOR_IN
20666: IFFALSE 20682
// begin SetLives ( i , 0 ) ;
20668: LD_VAR 0 1
20672: PPUSH
20673: LD_INT 0
20675: PPUSH
20676: CALL_OW 234
// end ;
20680: GO 20665
20682: POP
20683: POP
// end ;
20684: PPOPN 2
20686: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20687: LD_EXP 65
20691: PUSH
20692: LD_EXP 71
20696: AND
20697: IFFALSE 20781
20699: GO 20701
20701: DISABLE
20702: LD_INT 0
20704: PPUSH
20705: PPUSH
// begin enable ;
20706: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20707: LD_ADDR_VAR 0 2
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_OWVAR 2
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 32
20726: PUSH
20727: LD_INT 3
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 69
20742: ST_TO_ADDR
// if not tmp then
20743: LD_VAR 0 2
20747: NOT
20748: IFFALSE 20752
// exit ;
20750: GO 20781
// for i in tmp do
20752: LD_ADDR_VAR 0 1
20756: PUSH
20757: LD_VAR 0 2
20761: PUSH
20762: FOR_IN
20763: IFFALSE 20779
// begin SetLives ( i , 0 ) ;
20765: LD_VAR 0 1
20769: PPUSH
20770: LD_INT 0
20772: PPUSH
20773: CALL_OW 234
// end ;
20777: GO 20762
20779: POP
20780: POP
// end ;
20781: PPOPN 2
20783: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20784: LD_EXP 65
20788: PUSH
20789: LD_EXP 68
20793: AND
20794: IFFALSE 20887
20796: GO 20798
20798: DISABLE
20799: LD_INT 0
20801: PPUSH
// begin enable ;
20802: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20803: LD_ADDR_VAR 0 1
20807: PUSH
20808: LD_INT 22
20810: PUSH
20811: LD_OWVAR 2
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: LD_INT 25
20825: PUSH
20826: LD_INT 5
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 25
20835: PUSH
20836: LD_INT 9
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 25
20845: PUSH
20846: LD_INT 8
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PPUSH
20863: CALL_OW 69
20867: PUSH
20868: FOR_IN
20869: IFFALSE 20885
// begin SetClass ( i , 1 ) ;
20871: LD_VAR 0 1
20875: PPUSH
20876: LD_INT 1
20878: PPUSH
20879: CALL_OW 336
// end ;
20883: GO 20868
20885: POP
20886: POP
// end ;
20887: PPOPN 1
20889: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20890: LD_EXP 65
20894: PUSH
20895: LD_EXP 69
20899: AND
20900: PUSH
20901: LD_OWVAR 65
20905: PUSH
20906: LD_INT 7
20908: LESS
20909: AND
20910: IFFALSE 20924
20912: GO 20914
20914: DISABLE
// begin enable ;
20915: ENABLE
// game_speed := 7 ;
20916: LD_ADDR_OWVAR 65
20920: PUSH
20921: LD_INT 7
20923: ST_TO_ADDR
// end ;
20924: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20925: LD_EXP 65
20929: PUSH
20930: LD_EXP 72
20934: AND
20935: IFFALSE 21137
20937: GO 20939
20939: DISABLE
20940: LD_INT 0
20942: PPUSH
20943: PPUSH
20944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20945: LD_ADDR_VAR 0 3
20949: PUSH
20950: LD_INT 81
20952: PUSH
20953: LD_OWVAR 2
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 21
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PPUSH
20976: CALL_OW 69
20980: ST_TO_ADDR
// if not tmp then
20981: LD_VAR 0 3
20985: NOT
20986: IFFALSE 20990
// exit ;
20988: GO 21137
// if tmp > 5 then
20990: LD_VAR 0 3
20994: PUSH
20995: LD_INT 5
20997: GREATER
20998: IFFALSE 21010
// k := 5 else
21000: LD_ADDR_VAR 0 2
21004: PUSH
21005: LD_INT 5
21007: ST_TO_ADDR
21008: GO 21020
// k := tmp ;
21010: LD_ADDR_VAR 0 2
21014: PUSH
21015: LD_VAR 0 3
21019: ST_TO_ADDR
// for i := 1 to k do
21020: LD_ADDR_VAR 0 1
21024: PUSH
21025: DOUBLE
21026: LD_INT 1
21028: DEC
21029: ST_TO_ADDR
21030: LD_VAR 0 2
21034: PUSH
21035: FOR_TO
21036: IFFALSE 21135
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21038: LD_VAR 0 3
21042: PUSH
21043: LD_VAR 0 1
21047: ARRAY
21048: PPUSH
21049: LD_VAR 0 1
21053: PUSH
21054: LD_INT 4
21056: MOD
21057: PUSH
21058: LD_INT 1
21060: PLUS
21061: PPUSH
21062: CALL_OW 259
21066: PUSH
21067: LD_INT 10
21069: LESS
21070: IFFALSE 21133
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21072: LD_VAR 0 3
21076: PUSH
21077: LD_VAR 0 1
21081: ARRAY
21082: PPUSH
21083: LD_VAR 0 1
21087: PUSH
21088: LD_INT 4
21090: MOD
21091: PUSH
21092: LD_INT 1
21094: PLUS
21095: PPUSH
21096: LD_VAR 0 3
21100: PUSH
21101: LD_VAR 0 1
21105: ARRAY
21106: PPUSH
21107: LD_VAR 0 1
21111: PUSH
21112: LD_INT 4
21114: MOD
21115: PUSH
21116: LD_INT 1
21118: PLUS
21119: PPUSH
21120: CALL_OW 259
21124: PUSH
21125: LD_INT 1
21127: PLUS
21128: PPUSH
21129: CALL_OW 237
21133: GO 21035
21135: POP
21136: POP
// end ;
21137: PPOPN 3
21139: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21140: LD_EXP 65
21144: PUSH
21145: LD_EXP 73
21149: AND
21150: IFFALSE 21170
21152: GO 21154
21154: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21155: LD_INT 4
21157: PPUSH
21158: LD_OWVAR 2
21162: PPUSH
21163: LD_INT 0
21165: PPUSH
21166: CALL_OW 324
21170: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21171: LD_EXP 65
21175: PUSH
21176: LD_EXP 102
21180: AND
21181: IFFALSE 21201
21183: GO 21185
21185: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21186: LD_INT 19
21188: PPUSH
21189: LD_OWVAR 2
21193: PPUSH
21194: LD_INT 0
21196: PPUSH
21197: CALL_OW 324
21201: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21202: LD_EXP 65
21206: PUSH
21207: LD_EXP 74
21211: AND
21212: IFFALSE 21314
21214: GO 21216
21216: DISABLE
21217: LD_INT 0
21219: PPUSH
21220: PPUSH
// begin enable ;
21221: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21222: LD_ADDR_VAR 0 2
21226: PUSH
21227: LD_INT 22
21229: PUSH
21230: LD_OWVAR 2
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 34
21244: PUSH
21245: LD_INT 11
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 34
21254: PUSH
21255: LD_INT 30
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PPUSH
21271: CALL_OW 69
21275: ST_TO_ADDR
// if not tmp then
21276: LD_VAR 0 2
21280: NOT
21281: IFFALSE 21285
// exit ;
21283: GO 21314
// for i in tmp do
21285: LD_ADDR_VAR 0 1
21289: PUSH
21290: LD_VAR 0 2
21294: PUSH
21295: FOR_IN
21296: IFFALSE 21312
// begin SetLives ( i , 0 ) ;
21298: LD_VAR 0 1
21302: PPUSH
21303: LD_INT 0
21305: PPUSH
21306: CALL_OW 234
// end ;
21310: GO 21295
21312: POP
21313: POP
// end ;
21314: PPOPN 2
21316: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21317: LD_EXP 65
21321: PUSH
21322: LD_EXP 75
21326: AND
21327: IFFALSE 21347
21329: GO 21331
21331: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21332: LD_INT 32
21334: PPUSH
21335: LD_OWVAR 2
21339: PPUSH
21340: LD_INT 0
21342: PPUSH
21343: CALL_OW 324
21347: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21348: LD_EXP 65
21352: PUSH
21353: LD_EXP 76
21357: AND
21358: IFFALSE 21539
21360: GO 21362
21362: DISABLE
21363: LD_INT 0
21365: PPUSH
21366: PPUSH
21367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21368: LD_ADDR_VAR 0 2
21372: PUSH
21373: LD_INT 22
21375: PUSH
21376: LD_OWVAR 2
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 33
21387: PUSH
21388: LD_INT 3
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PPUSH
21399: CALL_OW 69
21403: ST_TO_ADDR
// if not tmp then
21404: LD_VAR 0 2
21408: NOT
21409: IFFALSE 21413
// exit ;
21411: GO 21539
// side := 0 ;
21413: LD_ADDR_VAR 0 3
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// for i := 1 to 8 do
21421: LD_ADDR_VAR 0 1
21425: PUSH
21426: DOUBLE
21427: LD_INT 1
21429: DEC
21430: ST_TO_ADDR
21431: LD_INT 8
21433: PUSH
21434: FOR_TO
21435: IFFALSE 21483
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21437: LD_OWVAR 2
21441: PUSH
21442: LD_VAR 0 1
21446: NONEQUAL
21447: PUSH
21448: LD_OWVAR 2
21452: PPUSH
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 81
21462: PUSH
21463: LD_INT 2
21465: EQUAL
21466: AND
21467: IFFALSE 21481
// begin side := i ;
21469: LD_ADDR_VAR 0 3
21473: PUSH
21474: LD_VAR 0 1
21478: ST_TO_ADDR
// break ;
21479: GO 21483
// end ;
21481: GO 21434
21483: POP
21484: POP
// if not side then
21485: LD_VAR 0 3
21489: NOT
21490: IFFALSE 21494
// exit ;
21492: GO 21539
// for i := 1 to tmp do
21494: LD_ADDR_VAR 0 1
21498: PUSH
21499: DOUBLE
21500: LD_INT 1
21502: DEC
21503: ST_TO_ADDR
21504: LD_VAR 0 2
21508: PUSH
21509: FOR_TO
21510: IFFALSE 21537
// if Prob ( 60 ) then
21512: LD_INT 60
21514: PPUSH
21515: CALL_OW 13
21519: IFFALSE 21535
// SetSide ( i , side ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_VAR 0 3
21530: PPUSH
21531: CALL_OW 235
21535: GO 21509
21537: POP
21538: POP
// end ;
21539: PPOPN 3
21541: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21542: LD_EXP 65
21546: PUSH
21547: LD_EXP 78
21551: AND
21552: IFFALSE 21671
21554: GO 21556
21556: DISABLE
21557: LD_INT 0
21559: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21560: LD_ADDR_VAR 0 1
21564: PUSH
21565: LD_INT 22
21567: PUSH
21568: LD_OWVAR 2
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 21
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 3
21589: PUSH
21590: LD_INT 23
21592: PUSH
21593: LD_INT 0
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: PPUSH
21609: CALL_OW 69
21613: PUSH
21614: FOR_IN
21615: IFFALSE 21669
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21617: LD_VAR 0 1
21621: PPUSH
21622: CALL_OW 257
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: LD_INT 3
21635: PUSH
21636: LD_INT 4
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: IN
21645: IFFALSE 21667
// SetClass ( un , rand ( 1 , 4 ) ) ;
21647: LD_VAR 0 1
21651: PPUSH
21652: LD_INT 1
21654: PPUSH
21655: LD_INT 4
21657: PPUSH
21658: CALL_OW 12
21662: PPUSH
21663: CALL_OW 336
21667: GO 21614
21669: POP
21670: POP
// end ;
21671: PPOPN 1
21673: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21674: LD_EXP 65
21678: PUSH
21679: LD_EXP 77
21683: AND
21684: IFFALSE 21763
21686: GO 21688
21688: DISABLE
21689: LD_INT 0
21691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21692: LD_ADDR_VAR 0 1
21696: PUSH
21697: LD_INT 22
21699: PUSH
21700: LD_OWVAR 2
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 21
21711: PUSH
21712: LD_INT 3
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PPUSH
21723: CALL_OW 69
21727: ST_TO_ADDR
// if not tmp then
21728: LD_VAR 0 1
21732: NOT
21733: IFFALSE 21737
// exit ;
21735: GO 21763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21737: LD_VAR 0 1
21741: PUSH
21742: LD_INT 1
21744: PPUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: CALL_OW 12
21754: ARRAY
21755: PPUSH
21756: LD_INT 100
21758: PPUSH
21759: CALL_OW 234
// end ;
21763: PPOPN 1
21765: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21766: LD_EXP 65
21770: PUSH
21771: LD_EXP 79
21775: AND
21776: IFFALSE 21874
21778: GO 21780
21780: DISABLE
21781: LD_INT 0
21783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21784: LD_ADDR_VAR 0 1
21788: PUSH
21789: LD_INT 22
21791: PUSH
21792: LD_OWVAR 2
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 21
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PPUSH
21815: CALL_OW 69
21819: ST_TO_ADDR
// if not tmp then
21820: LD_VAR 0 1
21824: NOT
21825: IFFALSE 21829
// exit ;
21827: GO 21874
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21829: LD_VAR 0 1
21833: PUSH
21834: LD_INT 1
21836: PPUSH
21837: LD_VAR 0 1
21841: PPUSH
21842: CALL_OW 12
21846: ARRAY
21847: PPUSH
21848: LD_INT 1
21850: PPUSH
21851: LD_INT 4
21853: PPUSH
21854: CALL_OW 12
21858: PPUSH
21859: LD_INT 3000
21861: PPUSH
21862: LD_INT 9000
21864: PPUSH
21865: CALL_OW 12
21869: PPUSH
21870: CALL_OW 492
// end ;
21874: PPOPN 1
21876: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21877: LD_EXP 65
21881: PUSH
21882: LD_EXP 80
21886: AND
21887: IFFALSE 21907
21889: GO 21891
21891: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21892: LD_INT 1
21894: PPUSH
21895: LD_OWVAR 2
21899: PPUSH
21900: LD_INT 0
21902: PPUSH
21903: CALL_OW 324
21907: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21908: LD_EXP 65
21912: PUSH
21913: LD_EXP 81
21917: AND
21918: IFFALSE 22001
21920: GO 21922
21922: DISABLE
21923: LD_INT 0
21925: PPUSH
21926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21927: LD_ADDR_VAR 0 2
21931: PUSH
21932: LD_INT 22
21934: PUSH
21935: LD_OWVAR 2
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 21
21946: PUSH
21947: LD_INT 3
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PPUSH
21958: CALL_OW 69
21962: ST_TO_ADDR
// if not tmp then
21963: LD_VAR 0 2
21967: NOT
21968: IFFALSE 21972
// exit ;
21970: GO 22001
// for i in tmp do
21972: LD_ADDR_VAR 0 1
21976: PUSH
21977: LD_VAR 0 2
21981: PUSH
21982: FOR_IN
21983: IFFALSE 21999
// SetBLevel ( i , 10 ) ;
21985: LD_VAR 0 1
21989: PPUSH
21990: LD_INT 10
21992: PPUSH
21993: CALL_OW 241
21997: GO 21982
21999: POP
22000: POP
// end ;
22001: PPOPN 2
22003: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22004: LD_EXP 65
22008: PUSH
22009: LD_EXP 82
22013: AND
22014: IFFALSE 22125
22016: GO 22018
22018: DISABLE
22019: LD_INT 0
22021: PPUSH
22022: PPUSH
22023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22024: LD_ADDR_VAR 0 3
22028: PUSH
22029: LD_INT 22
22031: PUSH
22032: LD_OWVAR 2
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 25
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PPUSH
22055: CALL_OW 69
22059: ST_TO_ADDR
// if not tmp then
22060: LD_VAR 0 3
22064: NOT
22065: IFFALSE 22069
// exit ;
22067: GO 22125
// un := tmp [ rand ( 1 , tmp ) ] ;
22069: LD_ADDR_VAR 0 2
22073: PUSH
22074: LD_VAR 0 3
22078: PUSH
22079: LD_INT 1
22081: PPUSH
22082: LD_VAR 0 3
22086: PPUSH
22087: CALL_OW 12
22091: ARRAY
22092: ST_TO_ADDR
// if Crawls ( un ) then
22093: LD_VAR 0 2
22097: PPUSH
22098: CALL_OW 318
22102: IFFALSE 22113
// ComWalk ( un ) ;
22104: LD_VAR 0 2
22108: PPUSH
22109: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22113: LD_VAR 0 2
22117: PPUSH
22118: LD_INT 5
22120: PPUSH
22121: CALL_OW 336
// end ;
22125: PPOPN 3
22127: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22128: LD_EXP 65
22132: PUSH
22133: LD_EXP 83
22137: AND
22138: PUSH
22139: LD_OWVAR 67
22143: PUSH
22144: LD_INT 3
22146: LESS
22147: AND
22148: IFFALSE 22167
22150: GO 22152
22152: DISABLE
// Difficulty := Difficulty + 1 ;
22153: LD_ADDR_OWVAR 67
22157: PUSH
22158: LD_OWVAR 67
22162: PUSH
22163: LD_INT 1
22165: PLUS
22166: ST_TO_ADDR
22167: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22168: LD_EXP 65
22172: PUSH
22173: LD_EXP 84
22177: AND
22178: IFFALSE 22281
22180: GO 22182
22182: DISABLE
22183: LD_INT 0
22185: PPUSH
// begin for i := 1 to 5 do
22186: LD_ADDR_VAR 0 1
22190: PUSH
22191: DOUBLE
22192: LD_INT 1
22194: DEC
22195: ST_TO_ADDR
22196: LD_INT 5
22198: PUSH
22199: FOR_TO
22200: IFFALSE 22279
// begin uc_nation := nation_nature ;
22202: LD_ADDR_OWVAR 21
22206: PUSH
22207: LD_INT 0
22209: ST_TO_ADDR
// uc_side := 0 ;
22210: LD_ADDR_OWVAR 20
22214: PUSH
22215: LD_INT 0
22217: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22218: LD_ADDR_OWVAR 29
22222: PUSH
22223: LD_INT 12
22225: PUSH
22226: LD_INT 12
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: ST_TO_ADDR
// hc_agressivity := 20 ;
22233: LD_ADDR_OWVAR 35
22237: PUSH
22238: LD_INT 20
22240: ST_TO_ADDR
// hc_class := class_tiger ;
22241: LD_ADDR_OWVAR 28
22245: PUSH
22246: LD_INT 14
22248: ST_TO_ADDR
// hc_gallery :=  ;
22249: LD_ADDR_OWVAR 33
22253: PUSH
22254: LD_STRING 
22256: ST_TO_ADDR
// hc_name :=  ;
22257: LD_ADDR_OWVAR 26
22261: PUSH
22262: LD_STRING 
22264: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22265: CALL_OW 44
22269: PPUSH
22270: LD_INT 0
22272: PPUSH
22273: CALL_OW 51
// end ;
22277: GO 22199
22279: POP
22280: POP
// end ;
22281: PPOPN 1
22283: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22284: LD_EXP 65
22288: PUSH
22289: LD_EXP 85
22293: AND
22294: IFFALSE 22303
22296: GO 22298
22298: DISABLE
// StreamSibBomb ;
22299: CALL 22304 0 0
22303: END
// export function StreamSibBomb ; var i , x , y ; begin
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
22308: PPUSH
22309: PPUSH
// result := false ;
22310: LD_ADDR_VAR 0 1
22314: PUSH
22315: LD_INT 0
22317: ST_TO_ADDR
// for i := 1 to 16 do
22318: LD_ADDR_VAR 0 2
22322: PUSH
22323: DOUBLE
22324: LD_INT 1
22326: DEC
22327: ST_TO_ADDR
22328: LD_INT 16
22330: PUSH
22331: FOR_TO
22332: IFFALSE 22531
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22334: LD_ADDR_VAR 0 3
22338: PUSH
22339: LD_INT 10
22341: PUSH
22342: LD_INT 20
22344: PUSH
22345: LD_INT 30
22347: PUSH
22348: LD_INT 40
22350: PUSH
22351: LD_INT 50
22353: PUSH
22354: LD_INT 60
22356: PUSH
22357: LD_INT 70
22359: PUSH
22360: LD_INT 80
22362: PUSH
22363: LD_INT 90
22365: PUSH
22366: LD_INT 100
22368: PUSH
22369: LD_INT 110
22371: PUSH
22372: LD_INT 120
22374: PUSH
22375: LD_INT 130
22377: PUSH
22378: LD_INT 140
22380: PUSH
22381: LD_INT 150
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: PPUSH
22404: LD_INT 15
22406: PPUSH
22407: CALL_OW 12
22411: ARRAY
22412: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22413: LD_ADDR_VAR 0 4
22417: PUSH
22418: LD_INT 10
22420: PUSH
22421: LD_INT 20
22423: PUSH
22424: LD_INT 30
22426: PUSH
22427: LD_INT 40
22429: PUSH
22430: LD_INT 50
22432: PUSH
22433: LD_INT 60
22435: PUSH
22436: LD_INT 70
22438: PUSH
22439: LD_INT 80
22441: PUSH
22442: LD_INT 90
22444: PUSH
22445: LD_INT 100
22447: PUSH
22448: LD_INT 110
22450: PUSH
22451: LD_INT 120
22453: PUSH
22454: LD_INT 130
22456: PUSH
22457: LD_INT 140
22459: PUSH
22460: LD_INT 150
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PPUSH
22483: LD_INT 15
22485: PPUSH
22486: CALL_OW 12
22490: ARRAY
22491: ST_TO_ADDR
// if ValidHex ( x , y ) then
22492: LD_VAR 0 3
22496: PPUSH
22497: LD_VAR 0 4
22501: PPUSH
22502: CALL_OW 488
22506: IFFALSE 22529
// begin result := [ x , y ] ;
22508: LD_ADDR_VAR 0 1
22512: PUSH
22513: LD_VAR 0 3
22517: PUSH
22518: LD_VAR 0 4
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: ST_TO_ADDR
// break ;
22527: GO 22531
// end ; end ;
22529: GO 22331
22531: POP
22532: POP
// if result then
22533: LD_VAR 0 1
22537: IFFALSE 22597
// begin ToLua ( playSibBomb() ) ;
22539: LD_STRING playSibBomb()
22541: PPUSH
22542: CALL_OW 559
// wait ( 0 0$14 ) ;
22546: LD_INT 490
22548: PPUSH
22549: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22553: LD_VAR 0 1
22557: PUSH
22558: LD_INT 1
22560: ARRAY
22561: PPUSH
22562: LD_VAR 0 1
22566: PUSH
22567: LD_INT 2
22569: ARRAY
22570: PPUSH
22571: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22575: LD_VAR 0 1
22579: PUSH
22580: LD_INT 1
22582: ARRAY
22583: PPUSH
22584: LD_VAR 0 1
22588: PUSH
22589: LD_INT 2
22591: ARRAY
22592: PPUSH
22593: CALL_OW 429
// end ; end ;
22597: LD_VAR 0 1
22601: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22602: LD_EXP 65
22606: PUSH
22607: LD_EXP 87
22611: AND
22612: IFFALSE 22624
22614: GO 22616
22616: DISABLE
// YouLost (  ) ;
22617: LD_STRING 
22619: PPUSH
22620: CALL_OW 104
22624: END
// every 0 0$1 trigger StreamModeActive and sFog do
22625: LD_EXP 65
22629: PUSH
22630: LD_EXP 86
22634: AND
22635: IFFALSE 22649
22637: GO 22639
22639: DISABLE
// FogOff ( your_side ) ;
22640: LD_OWVAR 2
22644: PPUSH
22645: CALL_OW 344
22649: END
// every 0 0$1 trigger StreamModeActive and sSun do
22650: LD_EXP 65
22654: PUSH
22655: LD_EXP 88
22659: AND
22660: IFFALSE 22688
22662: GO 22664
22664: DISABLE
// begin solar_recharge_percent := 0 ;
22665: LD_ADDR_OWVAR 79
22669: PUSH
22670: LD_INT 0
22672: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22673: LD_INT 10500
22675: PPUSH
22676: CALL_OW 67
// solar_recharge_percent := 100 ;
22680: LD_ADDR_OWVAR 79
22684: PUSH
22685: LD_INT 100
22687: ST_TO_ADDR
// end ;
22688: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22689: LD_EXP 65
22693: PUSH
22694: LD_EXP 89
22698: AND
22699: IFFALSE 22938
22701: GO 22703
22703: DISABLE
22704: LD_INT 0
22706: PPUSH
22707: PPUSH
22708: PPUSH
// begin tmp := [ ] ;
22709: LD_ADDR_VAR 0 3
22713: PUSH
22714: EMPTY
22715: ST_TO_ADDR
// for i := 1 to 6 do
22716: LD_ADDR_VAR 0 1
22720: PUSH
22721: DOUBLE
22722: LD_INT 1
22724: DEC
22725: ST_TO_ADDR
22726: LD_INT 6
22728: PUSH
22729: FOR_TO
22730: IFFALSE 22835
// begin uc_nation := nation_nature ;
22732: LD_ADDR_OWVAR 21
22736: PUSH
22737: LD_INT 0
22739: ST_TO_ADDR
// uc_side := 0 ;
22740: LD_ADDR_OWVAR 20
22744: PUSH
22745: LD_INT 0
22747: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22748: LD_ADDR_OWVAR 29
22752: PUSH
22753: LD_INT 12
22755: PUSH
22756: LD_INT 12
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: ST_TO_ADDR
// hc_agressivity := 20 ;
22763: LD_ADDR_OWVAR 35
22767: PUSH
22768: LD_INT 20
22770: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22771: LD_ADDR_OWVAR 28
22775: PUSH
22776: LD_INT 17
22778: ST_TO_ADDR
// hc_gallery :=  ;
22779: LD_ADDR_OWVAR 33
22783: PUSH
22784: LD_STRING 
22786: ST_TO_ADDR
// hc_name :=  ;
22787: LD_ADDR_OWVAR 26
22791: PUSH
22792: LD_STRING 
22794: ST_TO_ADDR
// un := CreateHuman ;
22795: LD_ADDR_VAR 0 2
22799: PUSH
22800: CALL_OW 44
22804: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22805: LD_VAR 0 2
22809: PPUSH
22810: LD_INT 1
22812: PPUSH
22813: CALL_OW 51
// tmp := tmp ^ un ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_VAR 0 3
22826: PUSH
22827: LD_VAR 0 2
22831: ADD
22832: ST_TO_ADDR
// end ;
22833: GO 22729
22835: POP
22836: POP
// repeat wait ( 0 0$1 ) ;
22837: LD_INT 35
22839: PPUSH
22840: CALL_OW 67
// for un in tmp do
22844: LD_ADDR_VAR 0 2
22848: PUSH
22849: LD_VAR 0 3
22853: PUSH
22854: FOR_IN
22855: IFFALSE 22929
// begin if IsDead ( un ) then
22857: LD_VAR 0 2
22861: PPUSH
22862: CALL_OW 301
22866: IFFALSE 22886
// begin tmp := tmp diff un ;
22868: LD_ADDR_VAR 0 3
22872: PUSH
22873: LD_VAR 0 3
22877: PUSH
22878: LD_VAR 0 2
22882: DIFF
22883: ST_TO_ADDR
// continue ;
22884: GO 22854
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22886: LD_VAR 0 2
22890: PPUSH
22891: LD_INT 3
22893: PUSH
22894: LD_INT 22
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PPUSH
22908: CALL_OW 69
22912: PPUSH
22913: LD_VAR 0 2
22917: PPUSH
22918: CALL_OW 74
22922: PPUSH
22923: CALL_OW 115
// end ;
22927: GO 22854
22929: POP
22930: POP
// until not tmp ;
22931: LD_VAR 0 3
22935: NOT
22936: IFFALSE 22837
// end ;
22938: PPOPN 3
22940: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22941: LD_EXP 65
22945: PUSH
22946: LD_EXP 90
22950: AND
22951: IFFALSE 23005
22953: GO 22955
22955: DISABLE
// begin ToLua ( displayTroll(); ) ;
22956: LD_STRING displayTroll();
22958: PPUSH
22959: CALL_OW 559
// wait ( 3 3$00 ) ;
22963: LD_INT 6300
22965: PPUSH
22966: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22970: LD_STRING hideTroll();
22972: PPUSH
22973: CALL_OW 559
// wait ( 1 1$00 ) ;
22977: LD_INT 2100
22979: PPUSH
22980: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22984: LD_STRING displayTroll();
22986: PPUSH
22987: CALL_OW 559
// wait ( 1 1$00 ) ;
22991: LD_INT 2100
22993: PPUSH
22994: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22998: LD_STRING hideTroll();
23000: PPUSH
23001: CALL_OW 559
// end ;
23005: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23006: LD_EXP 65
23010: PUSH
23011: LD_EXP 91
23015: AND
23016: IFFALSE 23079
23018: GO 23020
23020: DISABLE
23021: LD_INT 0
23023: PPUSH
// begin p := 0 ;
23024: LD_ADDR_VAR 0 1
23028: PUSH
23029: LD_INT 0
23031: ST_TO_ADDR
// repeat game_speed := 1 ;
23032: LD_ADDR_OWVAR 65
23036: PUSH
23037: LD_INT 1
23039: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23040: LD_INT 35
23042: PPUSH
23043: CALL_OW 67
// p := p + 1 ;
23047: LD_ADDR_VAR 0 1
23051: PUSH
23052: LD_VAR 0 1
23056: PUSH
23057: LD_INT 1
23059: PLUS
23060: ST_TO_ADDR
// until p >= 60 ;
23061: LD_VAR 0 1
23065: PUSH
23066: LD_INT 60
23068: GREATEREQUAL
23069: IFFALSE 23032
// game_speed := 4 ;
23071: LD_ADDR_OWVAR 65
23075: PUSH
23076: LD_INT 4
23078: ST_TO_ADDR
// end ;
23079: PPOPN 1
23081: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23082: LD_EXP 65
23086: PUSH
23087: LD_EXP 92
23091: AND
23092: IFFALSE 23238
23094: GO 23096
23096: DISABLE
23097: LD_INT 0
23099: PPUSH
23100: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23101: LD_ADDR_VAR 0 1
23105: PUSH
23106: LD_INT 22
23108: PUSH
23109: LD_OWVAR 2
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 2
23120: PUSH
23121: LD_INT 30
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 30
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PPUSH
23150: CALL_OW 69
23154: ST_TO_ADDR
// if not depot then
23155: LD_VAR 0 1
23159: NOT
23160: IFFALSE 23164
// exit ;
23162: GO 23238
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23164: LD_ADDR_VAR 0 2
23168: PUSH
23169: LD_VAR 0 1
23173: PUSH
23174: LD_INT 1
23176: PPUSH
23177: LD_VAR 0 1
23181: PPUSH
23182: CALL_OW 12
23186: ARRAY
23187: PPUSH
23188: CALL_OW 274
23192: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23193: LD_VAR 0 2
23197: PPUSH
23198: LD_INT 1
23200: PPUSH
23201: LD_INT 0
23203: PPUSH
23204: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23208: LD_VAR 0 2
23212: PPUSH
23213: LD_INT 2
23215: PPUSH
23216: LD_INT 0
23218: PPUSH
23219: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23223: LD_VAR 0 2
23227: PPUSH
23228: LD_INT 3
23230: PPUSH
23231: LD_INT 0
23233: PPUSH
23234: CALL_OW 277
// end ;
23238: PPOPN 2
23240: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23241: LD_EXP 65
23245: PUSH
23246: LD_EXP 93
23250: AND
23251: IFFALSE 23348
23253: GO 23255
23255: DISABLE
23256: LD_INT 0
23258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23259: LD_ADDR_VAR 0 1
23263: PUSH
23264: LD_INT 22
23266: PUSH
23267: LD_OWVAR 2
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 21
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: LD_INT 23
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 69
23312: ST_TO_ADDR
// if not tmp then
23313: LD_VAR 0 1
23317: NOT
23318: IFFALSE 23322
// exit ;
23320: GO 23348
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23322: LD_VAR 0 1
23326: PUSH
23327: LD_INT 1
23329: PPUSH
23330: LD_VAR 0 1
23334: PPUSH
23335: CALL_OW 12
23339: ARRAY
23340: PPUSH
23341: LD_INT 200
23343: PPUSH
23344: CALL_OW 234
// end ;
23348: PPOPN 1
23350: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23351: LD_EXP 65
23355: PUSH
23356: LD_EXP 94
23360: AND
23361: IFFALSE 23440
23363: GO 23365
23365: DISABLE
23366: LD_INT 0
23368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23369: LD_ADDR_VAR 0 1
23373: PUSH
23374: LD_INT 22
23376: PUSH
23377: LD_OWVAR 2
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 21
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PPUSH
23400: CALL_OW 69
23404: ST_TO_ADDR
// if not tmp then
23405: LD_VAR 0 1
23409: NOT
23410: IFFALSE 23414
// exit ;
23412: GO 23440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23414: LD_VAR 0 1
23418: PUSH
23419: LD_INT 1
23421: PPUSH
23422: LD_VAR 0 1
23426: PPUSH
23427: CALL_OW 12
23431: ARRAY
23432: PPUSH
23433: LD_INT 60
23435: PPUSH
23436: CALL_OW 234
// end ;
23440: PPOPN 1
23442: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23443: LD_EXP 65
23447: PUSH
23448: LD_EXP 95
23452: AND
23453: IFFALSE 23552
23455: GO 23457
23457: DISABLE
23458: LD_INT 0
23460: PPUSH
23461: PPUSH
// begin enable ;
23462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23463: LD_ADDR_VAR 0 1
23467: PUSH
23468: LD_INT 22
23470: PUSH
23471: LD_OWVAR 2
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 61
23482: PUSH
23483: EMPTY
23484: LIST
23485: PUSH
23486: LD_INT 33
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: PPUSH
23501: CALL_OW 69
23505: ST_TO_ADDR
// if not tmp then
23506: LD_VAR 0 1
23510: NOT
23511: IFFALSE 23515
// exit ;
23513: GO 23552
// for i in tmp do
23515: LD_ADDR_VAR 0 2
23519: PUSH
23520: LD_VAR 0 1
23524: PUSH
23525: FOR_IN
23526: IFFALSE 23550
// if IsControledBy ( i ) then
23528: LD_VAR 0 2
23532: PPUSH
23533: CALL_OW 312
23537: IFFALSE 23548
// ComUnlink ( i ) ;
23539: LD_VAR 0 2
23543: PPUSH
23544: CALL_OW 136
23548: GO 23525
23550: POP
23551: POP
// end ;
23552: PPOPN 2
23554: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23555: LD_EXP 65
23559: PUSH
23560: LD_EXP 96
23564: AND
23565: IFFALSE 23705
23567: GO 23569
23569: DISABLE
23570: LD_INT 0
23572: PPUSH
23573: PPUSH
// begin ToLua ( displayPowell(); ) ;
23574: LD_STRING displayPowell();
23576: PPUSH
23577: CALL_OW 559
// uc_side := 0 ;
23581: LD_ADDR_OWVAR 20
23585: PUSH
23586: LD_INT 0
23588: ST_TO_ADDR
// uc_nation := 2 ;
23589: LD_ADDR_OWVAR 21
23593: PUSH
23594: LD_INT 2
23596: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23597: LD_ADDR_OWVAR 37
23601: PUSH
23602: LD_INT 14
23604: ST_TO_ADDR
// vc_engine := engine_siberite ;
23605: LD_ADDR_OWVAR 39
23609: PUSH
23610: LD_INT 3
23612: ST_TO_ADDR
// vc_control := control_apeman ;
23613: LD_ADDR_OWVAR 38
23617: PUSH
23618: LD_INT 5
23620: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23621: LD_ADDR_OWVAR 40
23625: PUSH
23626: LD_INT 29
23628: ST_TO_ADDR
// un := CreateVehicle ;
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: CALL_OW 45
23638: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23639: LD_VAR 0 2
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23651: LD_INT 35
23653: PPUSH
23654: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23658: LD_VAR 0 2
23662: PPUSH
23663: LD_INT 22
23665: PUSH
23666: LD_OWVAR 2
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PPUSH
23675: CALL_OW 69
23679: PPUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 74
23689: PPUSH
23690: CALL_OW 115
// until IsDead ( un ) ;
23694: LD_VAR 0 2
23698: PPUSH
23699: CALL_OW 301
23703: IFFALSE 23651
// end ;
23705: PPOPN 2
23707: END
// every 0 0$1 trigger StreamModeActive and sStu do
23708: LD_EXP 65
23712: PUSH
23713: LD_EXP 104
23717: AND
23718: IFFALSE 23734
23720: GO 23722
23722: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23723: LD_STRING displayStucuk();
23725: PPUSH
23726: CALL_OW 559
// ResetFog ;
23730: CALL_OW 335
// end ;
23734: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23735: LD_EXP 65
23739: PUSH
23740: LD_EXP 97
23744: AND
23745: IFFALSE 23886
23747: GO 23749
23749: DISABLE
23750: LD_INT 0
23752: PPUSH
23753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23754: LD_ADDR_VAR 0 2
23758: PUSH
23759: LD_INT 22
23761: PUSH
23762: LD_OWVAR 2
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 21
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PPUSH
23785: CALL_OW 69
23789: ST_TO_ADDR
// if not tmp then
23790: LD_VAR 0 2
23794: NOT
23795: IFFALSE 23799
// exit ;
23797: GO 23886
// un := tmp [ rand ( 1 , tmp ) ] ;
23799: LD_ADDR_VAR 0 1
23803: PUSH
23804: LD_VAR 0 2
23808: PUSH
23809: LD_INT 1
23811: PPUSH
23812: LD_VAR 0 2
23816: PPUSH
23817: CALL_OW 12
23821: ARRAY
23822: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23823: LD_VAR 0 1
23827: PPUSH
23828: LD_INT 0
23830: PPUSH
23831: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23835: LD_VAR 0 1
23839: PPUSH
23840: LD_OWVAR 3
23844: PUSH
23845: LD_VAR 0 1
23849: DIFF
23850: PPUSH
23851: LD_VAR 0 1
23855: PPUSH
23856: CALL_OW 74
23860: PPUSH
23861: CALL_OW 115
// wait ( 0 0$20 ) ;
23865: LD_INT 700
23867: PPUSH
23868: CALL_OW 67
// SetSide ( un , your_side ) ;
23872: LD_VAR 0 1
23876: PPUSH
23877: LD_OWVAR 2
23881: PPUSH
23882: CALL_OW 235
// end ;
23886: PPOPN 2
23888: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23889: LD_EXP 65
23893: PUSH
23894: LD_EXP 98
23898: AND
23899: IFFALSE 24005
23901: GO 23903
23903: DISABLE
23904: LD_INT 0
23906: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23907: LD_ADDR_VAR 0 1
23911: PUSH
23912: LD_INT 22
23914: PUSH
23915: LD_OWVAR 2
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PPUSH
23956: CALL_OW 69
23960: ST_TO_ADDR
// if not depot then
23961: LD_VAR 0 1
23965: NOT
23966: IFFALSE 23970
// exit ;
23968: GO 24005
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23970: LD_VAR 0 1
23974: PUSH
23975: LD_INT 1
23977: ARRAY
23978: PPUSH
23979: CALL_OW 250
23983: PPUSH
23984: LD_VAR 0 1
23988: PUSH
23989: LD_INT 1
23991: ARRAY
23992: PPUSH
23993: CALL_OW 251
23997: PPUSH
23998: LD_INT 70
24000: PPUSH
24001: CALL_OW 495
// end ;
24005: PPOPN 1
24007: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24008: LD_EXP 65
24012: PUSH
24013: LD_EXP 99
24017: AND
24018: IFFALSE 24229
24020: GO 24022
24022: DISABLE
24023: LD_INT 0
24025: PPUSH
24026: PPUSH
24027: PPUSH
24028: PPUSH
24029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_INT 22
24037: PUSH
24038: LD_OWVAR 2
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 21
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 69
24065: ST_TO_ADDR
// if not tmp then
24066: LD_VAR 0 5
24070: NOT
24071: IFFALSE 24075
// exit ;
24073: GO 24229
// for i in tmp do
24075: LD_ADDR_VAR 0 1
24079: PUSH
24080: LD_VAR 0 5
24084: PUSH
24085: FOR_IN
24086: IFFALSE 24227
// begin d := rand ( 0 , 5 ) ;
24088: LD_ADDR_VAR 0 4
24092: PUSH
24093: LD_INT 0
24095: PPUSH
24096: LD_INT 5
24098: PPUSH
24099: CALL_OW 12
24103: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24104: LD_ADDR_VAR 0 2
24108: PUSH
24109: LD_VAR 0 1
24113: PPUSH
24114: CALL_OW 250
24118: PPUSH
24119: LD_VAR 0 4
24123: PPUSH
24124: LD_INT 3
24126: PPUSH
24127: LD_INT 12
24129: PPUSH
24130: CALL_OW 12
24134: PPUSH
24135: CALL_OW 272
24139: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24140: LD_ADDR_VAR 0 3
24144: PUSH
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 251
24154: PPUSH
24155: LD_VAR 0 4
24159: PPUSH
24160: LD_INT 3
24162: PPUSH
24163: LD_INT 12
24165: PPUSH
24166: CALL_OW 12
24170: PPUSH
24171: CALL_OW 273
24175: ST_TO_ADDR
// if ValidHex ( x , y ) then
24176: LD_VAR 0 2
24180: PPUSH
24181: LD_VAR 0 3
24185: PPUSH
24186: CALL_OW 488
24190: IFFALSE 24225
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24192: LD_VAR 0 1
24196: PPUSH
24197: LD_VAR 0 2
24201: PPUSH
24202: LD_VAR 0 3
24206: PPUSH
24207: LD_INT 3
24209: PPUSH
24210: LD_INT 6
24212: PPUSH
24213: CALL_OW 12
24217: PPUSH
24218: LD_INT 1
24220: PPUSH
24221: CALL_OW 483
// end ;
24225: GO 24085
24227: POP
24228: POP
// end ;
24229: PPOPN 5
24231: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24232: LD_EXP 65
24236: PUSH
24237: LD_EXP 100
24241: AND
24242: IFFALSE 24336
24244: GO 24246
24246: DISABLE
24247: LD_INT 0
24249: PPUSH
24250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24251: LD_ADDR_VAR 0 2
24255: PUSH
24256: LD_INT 22
24258: PUSH
24259: LD_OWVAR 2
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 32
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 21
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 69
24297: ST_TO_ADDR
// if not tmp then
24298: LD_VAR 0 2
24302: NOT
24303: IFFALSE 24307
// exit ;
24305: GO 24336
// for i in tmp do
24307: LD_ADDR_VAR 0 1
24311: PUSH
24312: LD_VAR 0 2
24316: PUSH
24317: FOR_IN
24318: IFFALSE 24334
// SetFuel ( i , 0 ) ;
24320: LD_VAR 0 1
24324: PPUSH
24325: LD_INT 0
24327: PPUSH
24328: CALL_OW 240
24332: GO 24317
24334: POP
24335: POP
// end ;
24336: PPOPN 2
24338: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24339: LD_EXP 65
24343: PUSH
24344: LD_EXP 101
24348: AND
24349: IFFALSE 24415
24351: GO 24353
24353: DISABLE
24354: LD_INT 0
24356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24357: LD_ADDR_VAR 0 1
24361: PUSH
24362: LD_INT 22
24364: PUSH
24365: LD_OWVAR 2
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_INT 29
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PPUSH
24388: CALL_OW 69
24392: ST_TO_ADDR
// if not tmp then
24393: LD_VAR 0 1
24397: NOT
24398: IFFALSE 24402
// exit ;
24400: GO 24415
// DestroyUnit ( tmp [ 1 ] ) ;
24402: LD_VAR 0 1
24406: PUSH
24407: LD_INT 1
24409: ARRAY
24410: PPUSH
24411: CALL_OW 65
// end ;
24415: PPOPN 1
24417: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24418: LD_EXP 65
24422: PUSH
24423: LD_EXP 103
24427: AND
24428: IFFALSE 24557
24430: GO 24432
24432: DISABLE
24433: LD_INT 0
24435: PPUSH
// begin uc_side := 0 ;
24436: LD_ADDR_OWVAR 20
24440: PUSH
24441: LD_INT 0
24443: ST_TO_ADDR
// uc_nation := nation_arabian ;
24444: LD_ADDR_OWVAR 21
24448: PUSH
24449: LD_INT 2
24451: ST_TO_ADDR
// hc_gallery :=  ;
24452: LD_ADDR_OWVAR 33
24456: PUSH
24457: LD_STRING 
24459: ST_TO_ADDR
// hc_name :=  ;
24460: LD_ADDR_OWVAR 26
24464: PUSH
24465: LD_STRING 
24467: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24468: LD_INT 1
24470: PPUSH
24471: LD_INT 11
24473: PPUSH
24474: LD_INT 10
24476: PPUSH
24477: CALL_OW 380
// un := CreateHuman ;
24481: LD_ADDR_VAR 0 1
24485: PUSH
24486: CALL_OW 44
24490: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24491: LD_VAR 0 1
24495: PPUSH
24496: LD_INT 1
24498: PPUSH
24499: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24503: LD_INT 35
24505: PPUSH
24506: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24510: LD_VAR 0 1
24514: PPUSH
24515: LD_INT 22
24517: PUSH
24518: LD_OWVAR 2
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PPUSH
24527: CALL_OW 69
24531: PPUSH
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL_OW 74
24541: PPUSH
24542: CALL_OW 115
// until IsDead ( un ) ;
24546: LD_VAR 0 1
24550: PPUSH
24551: CALL_OW 301
24555: IFFALSE 24503
// end ;
24557: PPOPN 1
24559: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24560: LD_EXP 65
24564: PUSH
24565: LD_EXP 105
24569: AND
24570: IFFALSE 24582
24572: GO 24574
24574: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24575: LD_STRING earthquake(getX(game), 0, 32)
24577: PPUSH
24578: CALL_OW 559
24582: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24583: LD_EXP 65
24587: PUSH
24588: LD_EXP 106
24592: AND
24593: IFFALSE 24684
24595: GO 24597
24597: DISABLE
24598: LD_INT 0
24600: PPUSH
// begin enable ;
24601: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24602: LD_ADDR_VAR 0 1
24606: PUSH
24607: LD_INT 22
24609: PUSH
24610: LD_OWVAR 2
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 21
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 33
24631: PUSH
24632: LD_INT 3
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: PPUSH
24644: CALL_OW 69
24648: ST_TO_ADDR
// if not tmp then
24649: LD_VAR 0 1
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24658: LD_VAR 0 1
24662: PUSH
24663: LD_INT 1
24665: PPUSH
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 12
24675: ARRAY
24676: PPUSH
24677: LD_INT 1
24679: PPUSH
24680: CALL_OW 234
// end ;
24684: PPOPN 1
24686: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24687: LD_EXP 65
24691: PUSH
24692: LD_EXP 107
24696: AND
24697: IFFALSE 24838
24699: GO 24701
24701: DISABLE
24702: LD_INT 0
24704: PPUSH
24705: PPUSH
24706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: LD_INT 22
24714: PUSH
24715: LD_OWVAR 2
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 25
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PPUSH
24738: CALL_OW 69
24742: ST_TO_ADDR
// if not tmp then
24743: LD_VAR 0 3
24747: NOT
24748: IFFALSE 24752
// exit ;
24750: GO 24838
// un := tmp [ rand ( 1 , tmp ) ] ;
24752: LD_ADDR_VAR 0 2
24756: PUSH
24757: LD_VAR 0 3
24761: PUSH
24762: LD_INT 1
24764: PPUSH
24765: LD_VAR 0 3
24769: PPUSH
24770: CALL_OW 12
24774: ARRAY
24775: ST_TO_ADDR
// if Crawls ( un ) then
24776: LD_VAR 0 2
24780: PPUSH
24781: CALL_OW 318
24785: IFFALSE 24796
// ComWalk ( un ) ;
24787: LD_VAR 0 2
24791: PPUSH
24792: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24796: LD_VAR 0 2
24800: PPUSH
24801: LD_INT 9
24803: PPUSH
24804: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24808: LD_INT 28
24810: PPUSH
24811: LD_OWVAR 2
24815: PPUSH
24816: LD_INT 2
24818: PPUSH
24819: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24823: LD_INT 29
24825: PPUSH
24826: LD_OWVAR 2
24830: PPUSH
24831: LD_INT 2
24833: PPUSH
24834: CALL_OW 322
// end ;
24838: PPOPN 3
24840: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24841: LD_EXP 65
24845: PUSH
24846: LD_EXP 108
24850: AND
24851: IFFALSE 24962
24853: GO 24855
24855: DISABLE
24856: LD_INT 0
24858: PPUSH
24859: PPUSH
24860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24861: LD_ADDR_VAR 0 3
24865: PUSH
24866: LD_INT 22
24868: PUSH
24869: LD_OWVAR 2
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 25
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PPUSH
24892: CALL_OW 69
24896: ST_TO_ADDR
// if not tmp then
24897: LD_VAR 0 3
24901: NOT
24902: IFFALSE 24906
// exit ;
24904: GO 24962
// un := tmp [ rand ( 1 , tmp ) ] ;
24906: LD_ADDR_VAR 0 2
24910: PUSH
24911: LD_VAR 0 3
24915: PUSH
24916: LD_INT 1
24918: PPUSH
24919: LD_VAR 0 3
24923: PPUSH
24924: CALL_OW 12
24928: ARRAY
24929: ST_TO_ADDR
// if Crawls ( un ) then
24930: LD_VAR 0 2
24934: PPUSH
24935: CALL_OW 318
24939: IFFALSE 24950
// ComWalk ( un ) ;
24941: LD_VAR 0 2
24945: PPUSH
24946: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24950: LD_VAR 0 2
24954: PPUSH
24955: LD_INT 8
24957: PPUSH
24958: CALL_OW 336
// end ;
24962: PPOPN 3
24964: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24965: LD_EXP 65
24969: PUSH
24970: LD_EXP 109
24974: AND
24975: IFFALSE 25119
24977: GO 24979
24979: DISABLE
24980: LD_INT 0
24982: PPUSH
24983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24984: LD_ADDR_VAR 0 2
24988: PUSH
24989: LD_INT 22
24991: PUSH
24992: LD_OWVAR 2
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 21
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: LD_INT 34
25016: PUSH
25017: LD_INT 12
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 34
25026: PUSH
25027: LD_INT 51
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 34
25036: PUSH
25037: LD_INT 32
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: LIST
25054: PPUSH
25055: CALL_OW 69
25059: ST_TO_ADDR
// if not tmp then
25060: LD_VAR 0 2
25064: NOT
25065: IFFALSE 25069
// exit ;
25067: GO 25119
// for i in tmp do
25069: LD_ADDR_VAR 0 1
25073: PUSH
25074: LD_VAR 0 2
25078: PUSH
25079: FOR_IN
25080: IFFALSE 25117
// if GetCargo ( i , mat_artifact ) = 0 then
25082: LD_VAR 0 1
25086: PPUSH
25087: LD_INT 4
25089: PPUSH
25090: CALL_OW 289
25094: PUSH
25095: LD_INT 0
25097: EQUAL
25098: IFFALSE 25115
// SetCargo ( i , mat_siberit , 100 ) ;
25100: LD_VAR 0 1
25104: PPUSH
25105: LD_INT 3
25107: PPUSH
25108: LD_INT 100
25110: PPUSH
25111: CALL_OW 290
25115: GO 25079
25117: POP
25118: POP
// end ;
25119: PPOPN 2
25121: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25122: LD_EXP 65
25126: PUSH
25127: LD_EXP 110
25131: AND
25132: IFFALSE 25315
25134: GO 25136
25136: DISABLE
25137: LD_INT 0
25139: PPUSH
25140: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25141: LD_ADDR_VAR 0 2
25145: PUSH
25146: LD_INT 22
25148: PUSH
25149: LD_OWVAR 2
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PPUSH
25158: CALL_OW 69
25162: ST_TO_ADDR
// if not tmp then
25163: LD_VAR 0 2
25167: NOT
25168: IFFALSE 25172
// exit ;
25170: GO 25315
// for i := 1 to 2 do
25172: LD_ADDR_VAR 0 1
25176: PUSH
25177: DOUBLE
25178: LD_INT 1
25180: DEC
25181: ST_TO_ADDR
25182: LD_INT 2
25184: PUSH
25185: FOR_TO
25186: IFFALSE 25313
// begin uc_side := your_side ;
25188: LD_ADDR_OWVAR 20
25192: PUSH
25193: LD_OWVAR 2
25197: ST_TO_ADDR
// uc_nation := nation_american ;
25198: LD_ADDR_OWVAR 21
25202: PUSH
25203: LD_INT 1
25205: ST_TO_ADDR
// vc_chassis := us_morphling ;
25206: LD_ADDR_OWVAR 37
25210: PUSH
25211: LD_INT 5
25213: ST_TO_ADDR
// vc_engine := engine_siberite ;
25214: LD_ADDR_OWVAR 39
25218: PUSH
25219: LD_INT 3
25221: ST_TO_ADDR
// vc_control := control_computer ;
25222: LD_ADDR_OWVAR 38
25226: PUSH
25227: LD_INT 3
25229: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25230: LD_ADDR_OWVAR 40
25234: PUSH
25235: LD_INT 10
25237: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25238: LD_VAR 0 2
25242: PUSH
25243: LD_INT 1
25245: ARRAY
25246: PPUSH
25247: CALL_OW 310
25251: NOT
25252: IFFALSE 25299
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25254: CALL_OW 45
25258: PPUSH
25259: LD_VAR 0 2
25263: PUSH
25264: LD_INT 1
25266: ARRAY
25267: PPUSH
25268: CALL_OW 250
25272: PPUSH
25273: LD_VAR 0 2
25277: PUSH
25278: LD_INT 1
25280: ARRAY
25281: PPUSH
25282: CALL_OW 251
25286: PPUSH
25287: LD_INT 12
25289: PPUSH
25290: LD_INT 1
25292: PPUSH
25293: CALL_OW 50
25297: GO 25311
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25299: CALL_OW 45
25303: PPUSH
25304: LD_INT 1
25306: PPUSH
25307: CALL_OW 51
// end ;
25311: GO 25185
25313: POP
25314: POP
// end ;
25315: PPOPN 2
25317: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25318: LD_EXP 65
25322: PUSH
25323: LD_EXP 111
25327: AND
25328: IFFALSE 25550
25330: GO 25332
25332: DISABLE
25333: LD_INT 0
25335: PPUSH
25336: PPUSH
25337: PPUSH
25338: PPUSH
25339: PPUSH
25340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25341: LD_ADDR_VAR 0 6
25345: PUSH
25346: LD_INT 22
25348: PUSH
25349: LD_OWVAR 2
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 23
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: PPUSH
25390: CALL_OW 69
25394: ST_TO_ADDR
// if not tmp then
25395: LD_VAR 0 6
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25550
// s1 := rand ( 1 , 4 ) ;
25404: LD_ADDR_VAR 0 2
25408: PUSH
25409: LD_INT 1
25411: PPUSH
25412: LD_INT 4
25414: PPUSH
25415: CALL_OW 12
25419: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25420: LD_ADDR_VAR 0 4
25424: PUSH
25425: LD_VAR 0 6
25429: PUSH
25430: LD_INT 1
25432: ARRAY
25433: PPUSH
25434: LD_VAR 0 2
25438: PPUSH
25439: CALL_OW 259
25443: ST_TO_ADDR
// if s1 = 1 then
25444: LD_VAR 0 2
25448: PUSH
25449: LD_INT 1
25451: EQUAL
25452: IFFALSE 25472
// s2 := rand ( 2 , 4 ) else
25454: LD_ADDR_VAR 0 3
25458: PUSH
25459: LD_INT 2
25461: PPUSH
25462: LD_INT 4
25464: PPUSH
25465: CALL_OW 12
25469: ST_TO_ADDR
25470: GO 25480
// s2 := 1 ;
25472: LD_ADDR_VAR 0 3
25476: PUSH
25477: LD_INT 1
25479: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25480: LD_ADDR_VAR 0 5
25484: PUSH
25485: LD_VAR 0 6
25489: PUSH
25490: LD_INT 1
25492: ARRAY
25493: PPUSH
25494: LD_VAR 0 3
25498: PPUSH
25499: CALL_OW 259
25503: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25504: LD_VAR 0 6
25508: PUSH
25509: LD_INT 1
25511: ARRAY
25512: PPUSH
25513: LD_VAR 0 2
25517: PPUSH
25518: LD_VAR 0 5
25522: PPUSH
25523: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25527: LD_VAR 0 6
25531: PUSH
25532: LD_INT 1
25534: ARRAY
25535: PPUSH
25536: LD_VAR 0 3
25540: PPUSH
25541: LD_VAR 0 4
25545: PPUSH
25546: CALL_OW 237
// end ;
25550: PPOPN 6
25552: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25553: LD_EXP 65
25557: PUSH
25558: LD_EXP 112
25562: AND
25563: IFFALSE 25642
25565: GO 25567
25567: DISABLE
25568: LD_INT 0
25570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25571: LD_ADDR_VAR 0 1
25575: PUSH
25576: LD_INT 22
25578: PUSH
25579: LD_OWVAR 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 30
25590: PUSH
25591: LD_INT 3
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PPUSH
25602: CALL_OW 69
25606: ST_TO_ADDR
// if not tmp then
25607: LD_VAR 0 1
25611: NOT
25612: IFFALSE 25616
// exit ;
25614: GO 25642
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25616: LD_VAR 0 1
25620: PUSH
25621: LD_INT 1
25623: PPUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: CALL_OW 12
25633: ARRAY
25634: PPUSH
25635: LD_INT 1
25637: PPUSH
25638: CALL_OW 234
// end ;
25642: PPOPN 1
25644: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25645: LD_EXP 65
25649: PUSH
25650: LD_EXP 113
25654: AND
25655: IFFALSE 25767
25657: GO 25659
25659: DISABLE
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25664: LD_ADDR_VAR 0 2
25668: PUSH
25669: LD_INT 22
25671: PUSH
25672: LD_OWVAR 2
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 30
25686: PUSH
25687: LD_INT 27
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 30
25696: PUSH
25697: LD_INT 26
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 30
25706: PUSH
25707: LD_INT 28
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PPUSH
25724: CALL_OW 69
25728: ST_TO_ADDR
// if not tmp then
25729: LD_VAR 0 2
25733: NOT
25734: IFFALSE 25738
// exit ;
25736: GO 25767
// for i in tmp do
25738: LD_ADDR_VAR 0 1
25742: PUSH
25743: LD_VAR 0 2
25747: PUSH
25748: FOR_IN
25749: IFFALSE 25765
// SetLives ( i , 1 ) ;
25751: LD_VAR 0 1
25755: PPUSH
25756: LD_INT 1
25758: PPUSH
25759: CALL_OW 234
25763: GO 25748
25765: POP
25766: POP
// end ;
25767: PPOPN 2
25769: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25770: LD_EXP 65
25774: PUSH
25775: LD_EXP 114
25779: AND
25780: IFFALSE 26054
25782: GO 25784
25784: DISABLE
25785: LD_INT 0
25787: PPUSH
25788: PPUSH
25789: PPUSH
// begin i := rand ( 1 , 7 ) ;
25790: LD_ADDR_VAR 0 1
25794: PUSH
25795: LD_INT 1
25797: PPUSH
25798: LD_INT 7
25800: PPUSH
25801: CALL_OW 12
25805: ST_TO_ADDR
// case i of 1 :
25806: LD_VAR 0 1
25810: PUSH
25811: LD_INT 1
25813: DOUBLE
25814: EQUAL
25815: IFTRUE 25819
25817: GO 25829
25819: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25820: LD_STRING earthquake(getX(game), 0, 32)
25822: PPUSH
25823: CALL_OW 559
25827: GO 26054
25829: LD_INT 2
25831: DOUBLE
25832: EQUAL
25833: IFTRUE 25837
25835: GO 25851
25837: POP
// begin ToLua ( displayStucuk(); ) ;
25838: LD_STRING displayStucuk();
25840: PPUSH
25841: CALL_OW 559
// ResetFog ;
25845: CALL_OW 335
// end ; 3 :
25849: GO 26054
25851: LD_INT 3
25853: DOUBLE
25854: EQUAL
25855: IFTRUE 25859
25857: GO 25963
25859: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25860: LD_ADDR_VAR 0 2
25864: PUSH
25865: LD_INT 22
25867: PUSH
25868: LD_OWVAR 2
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 25
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PPUSH
25891: CALL_OW 69
25895: ST_TO_ADDR
// if not tmp then
25896: LD_VAR 0 2
25900: NOT
25901: IFFALSE 25905
// exit ;
25903: GO 26054
// un := tmp [ rand ( 1 , tmp ) ] ;
25905: LD_ADDR_VAR 0 3
25909: PUSH
25910: LD_VAR 0 2
25914: PUSH
25915: LD_INT 1
25917: PPUSH
25918: LD_VAR 0 2
25922: PPUSH
25923: CALL_OW 12
25927: ARRAY
25928: ST_TO_ADDR
// if Crawls ( un ) then
25929: LD_VAR 0 3
25933: PPUSH
25934: CALL_OW 318
25938: IFFALSE 25949
// ComWalk ( un ) ;
25940: LD_VAR 0 3
25944: PPUSH
25945: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25949: LD_VAR 0 3
25953: PPUSH
25954: LD_INT 8
25956: PPUSH
25957: CALL_OW 336
// end ; 4 :
25961: GO 26054
25963: LD_INT 4
25965: DOUBLE
25966: EQUAL
25967: IFTRUE 25971
25969: GO 26032
25971: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25972: LD_ADDR_VAR 0 2
25976: PUSH
25977: LD_INT 22
25979: PUSH
25980: LD_OWVAR 2
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 30
25991: PUSH
25992: LD_INT 29
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PPUSH
26003: CALL_OW 69
26007: ST_TO_ADDR
// if not tmp then
26008: LD_VAR 0 2
26012: NOT
26013: IFFALSE 26017
// exit ;
26015: GO 26054
// DestroyUnit ( tmp [ 1 ] ) ;
26017: LD_VAR 0 2
26021: PUSH
26022: LD_INT 1
26024: ARRAY
26025: PPUSH
26026: CALL_OW 65
// end ; 5 .. 7 :
26030: GO 26054
26032: LD_INT 5
26034: DOUBLE
26035: GREATEREQUAL
26036: IFFALSE 26044
26038: LD_INT 7
26040: DOUBLE
26041: LESSEQUAL
26042: IFTRUE 26046
26044: GO 26053
26046: POP
// StreamSibBomb ; end ;
26047: CALL 22304 0 0
26051: GO 26054
26053: POP
// end ;
26054: PPOPN 3
26056: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26057: LD_EXP 65
26061: PUSH
26062: LD_EXP 115
26066: AND
26067: IFFALSE 26223
26069: GO 26071
26071: DISABLE
26072: LD_INT 0
26074: PPUSH
26075: PPUSH
26076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26077: LD_ADDR_VAR 0 2
26081: PUSH
26082: LD_INT 81
26084: PUSH
26085: LD_OWVAR 2
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 2
26096: PUSH
26097: LD_INT 21
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 21
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: LIST
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PPUSH
26126: CALL_OW 69
26130: ST_TO_ADDR
// if not tmp then
26131: LD_VAR 0 2
26135: NOT
26136: IFFALSE 26140
// exit ;
26138: GO 26223
// p := 0 ;
26140: LD_ADDR_VAR 0 3
26144: PUSH
26145: LD_INT 0
26147: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26148: LD_INT 35
26150: PPUSH
26151: CALL_OW 67
// p := p + 1 ;
26155: LD_ADDR_VAR 0 3
26159: PUSH
26160: LD_VAR 0 3
26164: PUSH
26165: LD_INT 1
26167: PLUS
26168: ST_TO_ADDR
// for i in tmp do
26169: LD_ADDR_VAR 0 1
26173: PUSH
26174: LD_VAR 0 2
26178: PUSH
26179: FOR_IN
26180: IFFALSE 26211
// if GetLives ( i ) < 1000 then
26182: LD_VAR 0 1
26186: PPUSH
26187: CALL_OW 256
26191: PUSH
26192: LD_INT 1000
26194: LESS
26195: IFFALSE 26209
// SetLives ( i , 1000 ) ;
26197: LD_VAR 0 1
26201: PPUSH
26202: LD_INT 1000
26204: PPUSH
26205: CALL_OW 234
26209: GO 26179
26211: POP
26212: POP
// until p > 20 ;
26213: LD_VAR 0 3
26217: PUSH
26218: LD_INT 20
26220: GREATER
26221: IFFALSE 26148
// end ;
26223: PPOPN 3
26225: END
// every 0 0$1 trigger StreamModeActive and sTime do
26226: LD_EXP 65
26230: PUSH
26231: LD_EXP 116
26235: AND
26236: IFFALSE 26271
26238: GO 26240
26240: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26241: LD_INT 28
26243: PPUSH
26244: LD_OWVAR 2
26248: PPUSH
26249: LD_INT 2
26251: PPUSH
26252: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26256: LD_INT 30
26258: PPUSH
26259: LD_OWVAR 2
26263: PPUSH
26264: LD_INT 2
26266: PPUSH
26267: CALL_OW 322
// end ;
26271: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26272: LD_EXP 65
26276: PUSH
26277: LD_EXP 117
26281: AND
26282: IFFALSE 26403
26284: GO 26286
26286: DISABLE
26287: LD_INT 0
26289: PPUSH
26290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: LD_INT 22
26298: PUSH
26299: LD_OWVAR 2
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 21
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 3
26320: PUSH
26321: LD_INT 23
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: PPUSH
26340: CALL_OW 69
26344: ST_TO_ADDR
// if not tmp then
26345: LD_VAR 0 2
26349: NOT
26350: IFFALSE 26354
// exit ;
26352: GO 26403
// for i in tmp do
26354: LD_ADDR_VAR 0 1
26358: PUSH
26359: LD_VAR 0 2
26363: PUSH
26364: FOR_IN
26365: IFFALSE 26401
// begin if Crawls ( i ) then
26367: LD_VAR 0 1
26371: PPUSH
26372: CALL_OW 318
26376: IFFALSE 26387
// ComWalk ( i ) ;
26378: LD_VAR 0 1
26382: PPUSH
26383: CALL_OW 138
// SetClass ( i , 2 ) ;
26387: LD_VAR 0 1
26391: PPUSH
26392: LD_INT 2
26394: PPUSH
26395: CALL_OW 336
// end ;
26399: GO 26364
26401: POP
26402: POP
// end ;
26403: PPOPN 2
26405: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26406: LD_EXP 65
26410: PUSH
26411: LD_EXP 118
26415: AND
26416: IFFALSE 26697
26418: GO 26420
26420: DISABLE
26421: LD_INT 0
26423: PPUSH
26424: PPUSH
26425: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26426: LD_OWVAR 2
26430: PPUSH
26431: LD_INT 9
26433: PPUSH
26434: LD_INT 1
26436: PPUSH
26437: LD_INT 1
26439: PPUSH
26440: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26444: LD_INT 9
26446: PPUSH
26447: LD_OWVAR 2
26451: PPUSH
26452: CALL_OW 343
// uc_side := 9 ;
26456: LD_ADDR_OWVAR 20
26460: PUSH
26461: LD_INT 9
26463: ST_TO_ADDR
// uc_nation := 2 ;
26464: LD_ADDR_OWVAR 21
26468: PUSH
26469: LD_INT 2
26471: ST_TO_ADDR
// hc_name := Dark Warrior ;
26472: LD_ADDR_OWVAR 26
26476: PUSH
26477: LD_STRING Dark Warrior
26479: ST_TO_ADDR
// hc_gallery :=  ;
26480: LD_ADDR_OWVAR 33
26484: PUSH
26485: LD_STRING 
26487: ST_TO_ADDR
// hc_noskilllimit := true ;
26488: LD_ADDR_OWVAR 76
26492: PUSH
26493: LD_INT 1
26495: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26496: LD_ADDR_OWVAR 31
26500: PUSH
26501: LD_INT 30
26503: PUSH
26504: LD_INT 30
26506: PUSH
26507: LD_INT 30
26509: PUSH
26510: LD_INT 30
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: ST_TO_ADDR
// un := CreateHuman ;
26519: LD_ADDR_VAR 0 3
26523: PUSH
26524: CALL_OW 44
26528: ST_TO_ADDR
// hc_noskilllimit := false ;
26529: LD_ADDR_OWVAR 76
26533: PUSH
26534: LD_INT 0
26536: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26537: LD_VAR 0 3
26541: PPUSH
26542: LD_INT 1
26544: PPUSH
26545: CALL_OW 51
// p := 0 ;
26549: LD_ADDR_VAR 0 2
26553: PUSH
26554: LD_INT 0
26556: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26557: LD_INT 35
26559: PPUSH
26560: CALL_OW 67
// p := p + 1 ;
26564: LD_ADDR_VAR 0 2
26568: PUSH
26569: LD_VAR 0 2
26573: PUSH
26574: LD_INT 1
26576: PLUS
26577: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26578: LD_VAR 0 3
26582: PPUSH
26583: CALL_OW 256
26587: PUSH
26588: LD_INT 1000
26590: LESS
26591: IFFALSE 26605
// SetLives ( un , 1000 ) ;
26593: LD_VAR 0 3
26597: PPUSH
26598: LD_INT 1000
26600: PPUSH
26601: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26605: LD_VAR 0 3
26609: PPUSH
26610: LD_INT 81
26612: PUSH
26613: LD_OWVAR 2
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 91
26624: PUSH
26625: LD_VAR 0 3
26629: PUSH
26630: LD_INT 30
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PPUSH
26642: CALL_OW 69
26646: PPUSH
26647: LD_VAR 0 3
26651: PPUSH
26652: CALL_OW 74
26656: PPUSH
26657: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26661: LD_VAR 0 2
26665: PUSH
26666: LD_INT 60
26668: GREATER
26669: PUSH
26670: LD_VAR 0 3
26674: PPUSH
26675: CALL_OW 301
26679: OR
26680: IFFALSE 26557
// if un then
26682: LD_VAR 0 3
26686: IFFALSE 26697
// RemoveUnit ( un ) ;
26688: LD_VAR 0 3
26692: PPUSH
26693: CALL_OW 64
// end ;
26697: PPOPN 3
26699: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26700: LD_INT 0
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26706: LD_ADDR_VAR 0 4
26710: PUSH
26711: LD_INT 22
26713: PUSH
26714: LD_OWVAR 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: LD_INT 30
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 30
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: LIST
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PPUSH
26755: CALL_OW 69
26759: ST_TO_ADDR
// if not tmp then
26760: LD_VAR 0 4
26764: NOT
26765: IFFALSE 26769
// exit ;
26767: GO 26828
// for i in tmp do
26769: LD_ADDR_VAR 0 2
26773: PUSH
26774: LD_VAR 0 4
26778: PUSH
26779: FOR_IN
26780: IFFALSE 26826
// for j = 1 to 3 do
26782: LD_ADDR_VAR 0 3
26786: PUSH
26787: DOUBLE
26788: LD_INT 1
26790: DEC
26791: ST_TO_ADDR
26792: LD_INT 3
26794: PUSH
26795: FOR_TO
26796: IFFALSE 26822
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26798: LD_VAR 0 2
26802: PPUSH
26803: CALL_OW 274
26807: PPUSH
26808: LD_VAR 0 3
26812: PPUSH
26813: LD_INT 99999
26815: PPUSH
26816: CALL_OW 277
26820: GO 26795
26822: POP
26823: POP
26824: GO 26779
26826: POP
26827: POP
// end ;
26828: LD_VAR 0 1
26832: RET
// export function hHackSetLevel10 ; var i , j ; begin
26833: LD_INT 0
26835: PPUSH
26836: PPUSH
26837: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26838: LD_ADDR_VAR 0 2
26842: PUSH
26843: LD_INT 21
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PPUSH
26853: CALL_OW 69
26857: PUSH
26858: FOR_IN
26859: IFFALSE 26911
// if IsSelected ( i ) then
26861: LD_VAR 0 2
26865: PPUSH
26866: CALL_OW 306
26870: IFFALSE 26909
// begin for j := 1 to 4 do
26872: LD_ADDR_VAR 0 3
26876: PUSH
26877: DOUBLE
26878: LD_INT 1
26880: DEC
26881: ST_TO_ADDR
26882: LD_INT 4
26884: PUSH
26885: FOR_TO
26886: IFFALSE 26907
// SetSkill ( i , j , 10 ) ;
26888: LD_VAR 0 2
26892: PPUSH
26893: LD_VAR 0 3
26897: PPUSH
26898: LD_INT 10
26900: PPUSH
26901: CALL_OW 237
26905: GO 26885
26907: POP
26908: POP
// end ;
26909: GO 26858
26911: POP
26912: POP
// end ;
26913: LD_VAR 0 1
26917: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26918: LD_INT 0
26920: PPUSH
26921: PPUSH
26922: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26923: LD_ADDR_VAR 0 2
26927: PUSH
26928: LD_INT 22
26930: PUSH
26931: LD_OWVAR 2
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 21
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PPUSH
26954: CALL_OW 69
26958: PUSH
26959: FOR_IN
26960: IFFALSE 27001
// begin for j := 1 to 4 do
26962: LD_ADDR_VAR 0 3
26966: PUSH
26967: DOUBLE
26968: LD_INT 1
26970: DEC
26971: ST_TO_ADDR
26972: LD_INT 4
26974: PUSH
26975: FOR_TO
26976: IFFALSE 26997
// SetSkill ( i , j , 10 ) ;
26978: LD_VAR 0 2
26982: PPUSH
26983: LD_VAR 0 3
26987: PPUSH
26988: LD_INT 10
26990: PPUSH
26991: CALL_OW 237
26995: GO 26975
26997: POP
26998: POP
// end ;
26999: GO 26959
27001: POP
27002: POP
// end ;
27003: LD_VAR 0 1
27007: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
27008: LD_INT 0
27010: PPUSH
// uc_side := your_side ;
27011: LD_ADDR_OWVAR 20
27015: PUSH
27016: LD_OWVAR 2
27020: ST_TO_ADDR
// uc_nation := nation ;
27021: LD_ADDR_OWVAR 21
27025: PUSH
27026: LD_VAR 0 1
27030: ST_TO_ADDR
// InitHc ;
27031: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27035: LD_INT 0
27037: PPUSH
27038: LD_VAR 0 2
27042: PPUSH
27043: LD_VAR 0 3
27047: PPUSH
27048: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
27052: CALL_OW 44
27056: PPUSH
27057: LD_INT 1
27059: PPUSH
27060: CALL_OW 51
// end ;
27064: LD_VAR 0 4
27068: RET
// export function hHackSpawnVehicle ; begin
27069: LD_INT 0
27071: PPUSH
// uc_side := your_side ;
27072: LD_ADDR_OWVAR 20
27076: PUSH
27077: LD_OWVAR 2
27081: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
27082: LD_ADDR_OWVAR 21
27086: PUSH
27087: LD_INT 1
27089: PPUSH
27090: LD_INT 3
27092: PPUSH
27093: CALL_OW 12
27097: ST_TO_ADDR
// InitVc ;
27098: CALL_OW 20
// case uc_nation of 1 :
27102: LD_OWVAR 21
27106: PUSH
27107: LD_INT 1
27109: DOUBLE
27110: EQUAL
27111: IFTRUE 27115
27113: GO 27259
27115: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
27116: LD_ADDR_OWVAR 37
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: LD_INT 3
27129: PUSH
27130: LD_INT 4
27132: PUSH
27133: LD_INT 5
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: PPUSH
27146: LD_INT 5
27148: PPUSH
27149: CALL_OW 12
27153: ARRAY
27154: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27155: LD_ADDR_OWVAR 39
27159: PUSH
27160: LD_INT 1
27162: PPUSH
27163: LD_INT 3
27165: PPUSH
27166: CALL_OW 12
27170: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
27171: LD_ADDR_OWVAR 38
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: LD_INT 3
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: PPUSH
27193: LD_INT 3
27195: PPUSH
27196: CALL_OW 12
27200: ARRAY
27201: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
27202: LD_ADDR_OWVAR 40
27206: PUSH
27207: LD_INT 2
27209: PUSH
27210: LD_INT 4
27212: PUSH
27213: LD_INT 5
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: LD_INT 7
27221: PUSH
27222: LD_INT 8
27224: PUSH
27225: LD_INT 9
27227: PUSH
27228: LD_INT 10
27230: PUSH
27231: LD_INT 6
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: PPUSH
27248: LD_INT 9
27250: PPUSH
27251: CALL_OW 12
27255: ARRAY
27256: ST_TO_ADDR
// end ; 2 :
27257: GO 27524
27259: LD_INT 2
27261: DOUBLE
27262: EQUAL
27263: IFTRUE 27267
27265: GO 27391
27267: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
27268: LD_ADDR_OWVAR 37
27272: PUSH
27273: LD_INT 11
27275: PUSH
27276: LD_INT 12
27278: PUSH
27279: LD_INT 13
27281: PUSH
27282: LD_INT 14
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: PPUSH
27294: LD_INT 4
27296: PPUSH
27297: CALL_OW 12
27301: ARRAY
27302: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27303: LD_ADDR_OWVAR 39
27307: PUSH
27308: LD_INT 1
27310: PPUSH
27311: LD_INT 3
27313: PPUSH
27314: CALL_OW 12
27318: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
27319: LD_ADDR_OWVAR 38
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: LD_INT 2
27329: PUSH
27330: LD_INT 5
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 1
27340: PPUSH
27341: LD_INT 3
27343: PPUSH
27344: CALL_OW 12
27348: ARRAY
27349: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
27350: LD_ADDR_OWVAR 40
27354: PUSH
27355: LD_INT 24
27357: PUSH
27358: LD_INT 26
27360: PUSH
27361: LD_INT 27
27363: PUSH
27364: LD_INT 28
27366: PUSH
27367: LD_INT 29
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: PPUSH
27380: LD_INT 5
27382: PPUSH
27383: CALL_OW 12
27387: ARRAY
27388: ST_TO_ADDR
// end ; 3 :
27389: GO 27524
27391: LD_INT 3
27393: DOUBLE
27394: EQUAL
27395: IFTRUE 27399
27397: GO 27523
27399: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
27400: LD_ADDR_OWVAR 37
27404: PUSH
27405: LD_INT 21
27407: PUSH
27408: LD_INT 23
27410: PUSH
27411: LD_INT 22
27413: PUSH
27414: LD_INT 24
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: PPUSH
27426: LD_INT 4
27428: PPUSH
27429: CALL_OW 12
27433: ARRAY
27434: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27435: LD_ADDR_OWVAR 39
27439: PUSH
27440: LD_INT 1
27442: PPUSH
27443: LD_INT 3
27445: PPUSH
27446: CALL_OW 12
27450: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
27451: LD_ADDR_OWVAR 38
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: LD_INT 3
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: PPUSH
27469: LD_INT 2
27471: PPUSH
27472: CALL_OW 12
27476: ARRAY
27477: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
27478: LD_ADDR_OWVAR 40
27482: PUSH
27483: LD_INT 42
27485: PUSH
27486: LD_INT 43
27488: PUSH
27489: LD_INT 44
27491: PUSH
27492: LD_INT 46
27494: PUSH
27495: LD_INT 48
27497: PUSH
27498: LD_INT 47
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: PPUSH
27512: LD_INT 6
27514: PPUSH
27515: CALL_OW 12
27519: ARRAY
27520: ST_TO_ADDR
// end ; end ;
27521: GO 27524
27523: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27524: CALL_OW 45
27528: PPUSH
27529: LD_INT 1
27531: PPUSH
27532: CALL_OW 51
// end ;
27536: LD_VAR 0 1
27540: RET
// export hInvincible ; every 1 do
27541: GO 27543
27543: DISABLE
// hInvincible := [ ] ;
27544: LD_ADDR_EXP 119
27548: PUSH
27549: EMPTY
27550: ST_TO_ADDR
27551: END
// every 10 do var i ;
27552: GO 27554
27554: DISABLE
27555: LD_INT 0
27557: PPUSH
// begin enable ;
27558: ENABLE
// if not hInvincible then
27559: LD_EXP 119
27563: NOT
27564: IFFALSE 27568
// exit ;
27566: GO 27612
// for i in hInvincible do
27568: LD_ADDR_VAR 0 1
27572: PUSH
27573: LD_EXP 119
27577: PUSH
27578: FOR_IN
27579: IFFALSE 27610
// if GetLives ( i ) < 1000 then
27581: LD_VAR 0 1
27585: PPUSH
27586: CALL_OW 256
27590: PUSH
27591: LD_INT 1000
27593: LESS
27594: IFFALSE 27608
// SetLives ( i , 1000 ) ;
27596: LD_VAR 0 1
27600: PPUSH
27601: LD_INT 1000
27603: PPUSH
27604: CALL_OW 234
27608: GO 27578
27610: POP
27611: POP
// end ;
27612: PPOPN 1
27614: END
// export function hHackInvincible ; var i ; begin
27615: LD_INT 0
27617: PPUSH
27618: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27619: LD_ADDR_VAR 0 2
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: LD_INT 21
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 21
27639: PUSH
27640: LD_INT 2
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: PPUSH
27652: CALL_OW 69
27656: PUSH
27657: FOR_IN
27658: IFFALSE 27719
// if IsSelected ( i ) then
27660: LD_VAR 0 2
27664: PPUSH
27665: CALL_OW 306
27669: IFFALSE 27717
// begin if i in hInvincible then
27671: LD_VAR 0 2
27675: PUSH
27676: LD_EXP 119
27680: IN
27681: IFFALSE 27701
// hInvincible := hInvincible diff i else
27683: LD_ADDR_EXP 119
27687: PUSH
27688: LD_EXP 119
27692: PUSH
27693: LD_VAR 0 2
27697: DIFF
27698: ST_TO_ADDR
27699: GO 27717
// hInvincible := hInvincible union i ;
27701: LD_ADDR_EXP 119
27705: PUSH
27706: LD_EXP 119
27710: PUSH
27711: LD_VAR 0 2
27715: UNION
27716: ST_TO_ADDR
// end ;
27717: GO 27657
27719: POP
27720: POP
// end ;
27721: LD_VAR 0 1
27725: RET
// export function hHackInvisible ; var i , j ; begin
27726: LD_INT 0
27728: PPUSH
27729: PPUSH
27730: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27731: LD_ADDR_VAR 0 2
27735: PUSH
27736: LD_INT 21
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PPUSH
27746: CALL_OW 69
27750: PUSH
27751: FOR_IN
27752: IFFALSE 27776
// if IsSelected ( i ) then
27754: LD_VAR 0 2
27758: PPUSH
27759: CALL_OW 306
27763: IFFALSE 27774
// ComForceInvisible ( i ) ;
27765: LD_VAR 0 2
27769: PPUSH
27770: CALL_OW 496
27774: GO 27751
27776: POP
27777: POP
// end ;
27778: LD_VAR 0 1
27782: RET
// export function hHackChangeYourSide ; begin
27783: LD_INT 0
27785: PPUSH
// if your_side = 8 then
27786: LD_OWVAR 2
27790: PUSH
27791: LD_INT 8
27793: EQUAL
27794: IFFALSE 27806
// your_side := 0 else
27796: LD_ADDR_OWVAR 2
27800: PUSH
27801: LD_INT 0
27803: ST_TO_ADDR
27804: GO 27820
// your_side := your_side + 1 ;
27806: LD_ADDR_OWVAR 2
27810: PUSH
27811: LD_OWVAR 2
27815: PUSH
27816: LD_INT 1
27818: PLUS
27819: ST_TO_ADDR
// end ;
27820: LD_VAR 0 1
27824: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27825: LD_INT 0
27827: PPUSH
27828: PPUSH
27829: PPUSH
// for i in all_units do
27830: LD_ADDR_VAR 0 2
27834: PUSH
27835: LD_OWVAR 3
27839: PUSH
27840: FOR_IN
27841: IFFALSE 27919
// if IsSelected ( i ) then
27843: LD_VAR 0 2
27847: PPUSH
27848: CALL_OW 306
27852: IFFALSE 27917
// begin j := GetSide ( i ) ;
27854: LD_ADDR_VAR 0 3
27858: PUSH
27859: LD_VAR 0 2
27863: PPUSH
27864: CALL_OW 255
27868: ST_TO_ADDR
// if j = 8 then
27869: LD_VAR 0 3
27873: PUSH
27874: LD_INT 8
27876: EQUAL
27877: IFFALSE 27889
// j := 0 else
27879: LD_ADDR_VAR 0 3
27883: PUSH
27884: LD_INT 0
27886: ST_TO_ADDR
27887: GO 27903
// j := j + 1 ;
27889: LD_ADDR_VAR 0 3
27893: PUSH
27894: LD_VAR 0 3
27898: PUSH
27899: LD_INT 1
27901: PLUS
27902: ST_TO_ADDR
// SetSide ( i , j ) ;
27903: LD_VAR 0 2
27907: PPUSH
27908: LD_VAR 0 3
27912: PPUSH
27913: CALL_OW 235
// end ;
27917: GO 27840
27919: POP
27920: POP
// end ;
27921: LD_VAR 0 1
27925: RET
// export function hHackFog ; begin
27926: LD_INT 0
27928: PPUSH
// FogOff ( true ) ;
27929: LD_INT 1
27931: PPUSH
27932: CALL_OW 344
// end ;
27936: LD_VAR 0 1
27940: RET
// export function hHackApeman ; begin
27941: LD_INT 0
27943: PPUSH
// uc_side := your_side ;
27944: LD_ADDR_OWVAR 20
27948: PUSH
27949: LD_OWVAR 2
27953: ST_TO_ADDR
// uc_nation := 0 ;
27954: LD_ADDR_OWVAR 21
27958: PUSH
27959: LD_INT 0
27961: ST_TO_ADDR
// hc_name :=  ;
27962: LD_ADDR_OWVAR 26
27966: PUSH
27967: LD_STRING 
27969: ST_TO_ADDR
// hc_gallery :=  ;
27970: LD_ADDR_OWVAR 33
27974: PUSH
27975: LD_STRING 
27977: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
27978: LD_ADDR_OWVAR 31
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: ST_TO_ADDR
// hc_class := class_apeman ;
28001: LD_ADDR_OWVAR 28
28005: PUSH
28006: LD_INT 12
28008: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
28009: CALL_OW 44
28013: PPUSH
28014: LD_INT 1
28016: PPUSH
28017: CALL_OW 51
// end ;
28021: LD_VAR 0 1
28025: RET
// export function hHackBoom ; begin
28026: LD_INT 0
28028: PPUSH
// uc_side := your_side ;
28029: LD_ADDR_OWVAR 20
28033: PUSH
28034: LD_OWVAR 2
28038: ST_TO_ADDR
// uc_nation := 1 ;
28039: LD_ADDR_OWVAR 21
28043: PUSH
28044: LD_INT 1
28046: ST_TO_ADDR
// vc_chassis := us_morphling ;
28047: LD_ADDR_OWVAR 37
28051: PUSH
28052: LD_INT 5
28054: ST_TO_ADDR
// vc_engine := engine_siberite ;
28055: LD_ADDR_OWVAR 39
28059: PUSH
28060: LD_INT 3
28062: ST_TO_ADDR
// vc_control := control_computer ;
28063: LD_ADDR_OWVAR 38
28067: PUSH
28068: LD_INT 3
28070: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
28071: LD_ADDR_OWVAR 40
28075: PUSH
28076: LD_INT 8
28078: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28079: CALL_OW 45
28083: PPUSH
28084: LD_INT 1
28086: PPUSH
28087: CALL_OW 51
// end ; end_of_file end_of_file
28091: LD_VAR 0 1
28095: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28096: LD_INT 0
28098: PPUSH
28099: PPUSH
// if exist_mode then
28100: LD_VAR 0 2
28104: IFFALSE 28129
// unit := CreateCharacter ( prefix & ident ) else
28106: LD_ADDR_VAR 0 5
28110: PUSH
28111: LD_VAR 0 3
28115: PUSH
28116: LD_VAR 0 1
28120: STR
28121: PPUSH
28122: CALL_OW 34
28126: ST_TO_ADDR
28127: GO 28144
// unit := NewCharacter ( ident ) ;
28129: LD_ADDR_VAR 0 5
28133: PUSH
28134: LD_VAR 0 1
28138: PPUSH
28139: CALL_OW 25
28143: ST_TO_ADDR
// result := unit ;
28144: LD_ADDR_VAR 0 4
28148: PUSH
28149: LD_VAR 0 5
28153: ST_TO_ADDR
// end ;
28154: LD_VAR 0 4
28158: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28159: LD_INT 0
28161: PPUSH
28162: PPUSH
// if not side or not nation then
28163: LD_VAR 0 1
28167: NOT
28168: PUSH
28169: LD_VAR 0 2
28173: NOT
28174: OR
28175: IFFALSE 28179
// exit ;
28177: GO 28943
// case nation of nation_american :
28179: LD_VAR 0 2
28183: PUSH
28184: LD_INT 1
28186: DOUBLE
28187: EQUAL
28188: IFTRUE 28192
28190: GO 28406
28192: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28193: LD_ADDR_VAR 0 4
28197: PUSH
28198: LD_INT 35
28200: PUSH
28201: LD_INT 45
28203: PUSH
28204: LD_INT 46
28206: PUSH
28207: LD_INT 47
28209: PUSH
28210: LD_INT 82
28212: PUSH
28213: LD_INT 83
28215: PUSH
28216: LD_INT 84
28218: PUSH
28219: LD_INT 85
28221: PUSH
28222: LD_INT 86
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: LD_INT 6
28233: PUSH
28234: LD_INT 15
28236: PUSH
28237: LD_INT 16
28239: PUSH
28240: LD_INT 7
28242: PUSH
28243: LD_INT 12
28245: PUSH
28246: LD_INT 13
28248: PUSH
28249: LD_INT 10
28251: PUSH
28252: LD_INT 14
28254: PUSH
28255: LD_INT 20
28257: PUSH
28258: LD_INT 21
28260: PUSH
28261: LD_INT 22
28263: PUSH
28264: LD_INT 25
28266: PUSH
28267: LD_INT 32
28269: PUSH
28270: LD_INT 27
28272: PUSH
28273: LD_INT 36
28275: PUSH
28276: LD_INT 69
28278: PUSH
28279: LD_INT 39
28281: PUSH
28282: LD_INT 34
28284: PUSH
28285: LD_INT 40
28287: PUSH
28288: LD_INT 48
28290: PUSH
28291: LD_INT 49
28293: PUSH
28294: LD_INT 50
28296: PUSH
28297: LD_INT 51
28299: PUSH
28300: LD_INT 52
28302: PUSH
28303: LD_INT 53
28305: PUSH
28306: LD_INT 54
28308: PUSH
28309: LD_INT 55
28311: PUSH
28312: LD_INT 56
28314: PUSH
28315: LD_INT 57
28317: PUSH
28318: LD_INT 58
28320: PUSH
28321: LD_INT 59
28323: PUSH
28324: LD_INT 60
28326: PUSH
28327: LD_INT 61
28329: PUSH
28330: LD_INT 62
28332: PUSH
28333: LD_INT 80
28335: PUSH
28336: LD_INT 82
28338: PUSH
28339: LD_INT 83
28341: PUSH
28342: LD_INT 84
28344: PUSH
28345: LD_INT 85
28347: PUSH
28348: LD_INT 86
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: ST_TO_ADDR
28404: GO 28867
28406: LD_INT 2
28408: DOUBLE
28409: EQUAL
28410: IFTRUE 28414
28412: GO 28636
28414: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28415: LD_ADDR_VAR 0 4
28419: PUSH
28420: LD_INT 35
28422: PUSH
28423: LD_INT 45
28425: PUSH
28426: LD_INT 46
28428: PUSH
28429: LD_INT 47
28431: PUSH
28432: LD_INT 82
28434: PUSH
28435: LD_INT 83
28437: PUSH
28438: LD_INT 84
28440: PUSH
28441: LD_INT 85
28443: PUSH
28444: LD_INT 87
28446: PUSH
28447: LD_INT 70
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: LD_INT 11
28455: PUSH
28456: LD_INT 3
28458: PUSH
28459: LD_INT 4
28461: PUSH
28462: LD_INT 5
28464: PUSH
28465: LD_INT 6
28467: PUSH
28468: LD_INT 15
28470: PUSH
28471: LD_INT 18
28473: PUSH
28474: LD_INT 7
28476: PUSH
28477: LD_INT 17
28479: PUSH
28480: LD_INT 8
28482: PUSH
28483: LD_INT 20
28485: PUSH
28486: LD_INT 21
28488: PUSH
28489: LD_INT 22
28491: PUSH
28492: LD_INT 72
28494: PUSH
28495: LD_INT 26
28497: PUSH
28498: LD_INT 69
28500: PUSH
28501: LD_INT 39
28503: PUSH
28504: LD_INT 40
28506: PUSH
28507: LD_INT 41
28509: PUSH
28510: LD_INT 42
28512: PUSH
28513: LD_INT 43
28515: PUSH
28516: LD_INT 48
28518: PUSH
28519: LD_INT 49
28521: PUSH
28522: LD_INT 50
28524: PUSH
28525: LD_INT 51
28527: PUSH
28528: LD_INT 52
28530: PUSH
28531: LD_INT 53
28533: PUSH
28534: LD_INT 54
28536: PUSH
28537: LD_INT 55
28539: PUSH
28540: LD_INT 56
28542: PUSH
28543: LD_INT 60
28545: PUSH
28546: LD_INT 61
28548: PUSH
28549: LD_INT 62
28551: PUSH
28552: LD_INT 66
28554: PUSH
28555: LD_INT 67
28557: PUSH
28558: LD_INT 68
28560: PUSH
28561: LD_INT 81
28563: PUSH
28564: LD_INT 82
28566: PUSH
28567: LD_INT 83
28569: PUSH
28570: LD_INT 84
28572: PUSH
28573: LD_INT 85
28575: PUSH
28576: LD_INT 87
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: ST_TO_ADDR
28634: GO 28867
28636: LD_INT 3
28638: DOUBLE
28639: EQUAL
28640: IFTRUE 28644
28642: GO 28866
28644: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28645: LD_ADDR_VAR 0 4
28649: PUSH
28650: LD_INT 46
28652: PUSH
28653: LD_INT 47
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: LD_INT 82
28664: PUSH
28665: LD_INT 83
28667: PUSH
28668: LD_INT 84
28670: PUSH
28671: LD_INT 85
28673: PUSH
28674: LD_INT 86
28676: PUSH
28677: LD_INT 11
28679: PUSH
28680: LD_INT 9
28682: PUSH
28683: LD_INT 20
28685: PUSH
28686: LD_INT 19
28688: PUSH
28689: LD_INT 21
28691: PUSH
28692: LD_INT 24
28694: PUSH
28695: LD_INT 22
28697: PUSH
28698: LD_INT 25
28700: PUSH
28701: LD_INT 28
28703: PUSH
28704: LD_INT 29
28706: PUSH
28707: LD_INT 30
28709: PUSH
28710: LD_INT 31
28712: PUSH
28713: LD_INT 37
28715: PUSH
28716: LD_INT 38
28718: PUSH
28719: LD_INT 32
28721: PUSH
28722: LD_INT 27
28724: PUSH
28725: LD_INT 33
28727: PUSH
28728: LD_INT 69
28730: PUSH
28731: LD_INT 39
28733: PUSH
28734: LD_INT 34
28736: PUSH
28737: LD_INT 40
28739: PUSH
28740: LD_INT 71
28742: PUSH
28743: LD_INT 23
28745: PUSH
28746: LD_INT 44
28748: PUSH
28749: LD_INT 48
28751: PUSH
28752: LD_INT 49
28754: PUSH
28755: LD_INT 50
28757: PUSH
28758: LD_INT 51
28760: PUSH
28761: LD_INT 52
28763: PUSH
28764: LD_INT 53
28766: PUSH
28767: LD_INT 54
28769: PUSH
28770: LD_INT 55
28772: PUSH
28773: LD_INT 56
28775: PUSH
28776: LD_INT 57
28778: PUSH
28779: LD_INT 58
28781: PUSH
28782: LD_INT 59
28784: PUSH
28785: LD_INT 63
28787: PUSH
28788: LD_INT 64
28790: PUSH
28791: LD_INT 65
28793: PUSH
28794: LD_INT 82
28796: PUSH
28797: LD_INT 83
28799: PUSH
28800: LD_INT 84
28802: PUSH
28803: LD_INT 85
28805: PUSH
28806: LD_INT 86
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: ST_TO_ADDR
28864: GO 28867
28866: POP
// if state > - 1 and state < 3 then
28867: LD_VAR 0 3
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: GREATER
28876: PUSH
28877: LD_VAR 0 3
28881: PUSH
28882: LD_INT 3
28884: LESS
28885: AND
28886: IFFALSE 28943
// for i in result do
28888: LD_ADDR_VAR 0 5
28892: PUSH
28893: LD_VAR 0 4
28897: PUSH
28898: FOR_IN
28899: IFFALSE 28941
// if GetTech ( i , side ) <> state then
28901: LD_VAR 0 5
28905: PPUSH
28906: LD_VAR 0 1
28910: PPUSH
28911: CALL_OW 321
28915: PUSH
28916: LD_VAR 0 3
28920: NONEQUAL
28921: IFFALSE 28939
// result := result diff i ;
28923: LD_ADDR_VAR 0 4
28927: PUSH
28928: LD_VAR 0 4
28932: PUSH
28933: LD_VAR 0 5
28937: DIFF
28938: ST_TO_ADDR
28939: GO 28898
28941: POP
28942: POP
// end ;
28943: LD_VAR 0 4
28947: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28948: LD_INT 0
28950: PPUSH
28951: PPUSH
28952: PPUSH
// result := true ;
28953: LD_ADDR_VAR 0 3
28957: PUSH
28958: LD_INT 1
28960: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28961: LD_ADDR_VAR 0 5
28965: PUSH
28966: LD_VAR 0 2
28970: PPUSH
28971: CALL_OW 480
28975: ST_TO_ADDR
// if not tmp then
28976: LD_VAR 0 5
28980: NOT
28981: IFFALSE 28985
// exit ;
28983: GO 29034
// for i in tmp do
28985: LD_ADDR_VAR 0 4
28989: PUSH
28990: LD_VAR 0 5
28994: PUSH
28995: FOR_IN
28996: IFFALSE 29032
// if GetTech ( i , side ) <> state_researched then
28998: LD_VAR 0 4
29002: PPUSH
29003: LD_VAR 0 1
29007: PPUSH
29008: CALL_OW 321
29012: PUSH
29013: LD_INT 2
29015: NONEQUAL
29016: IFFALSE 29030
// begin result := false ;
29018: LD_ADDR_VAR 0 3
29022: PUSH
29023: LD_INT 0
29025: ST_TO_ADDR
// exit ;
29026: POP
29027: POP
29028: GO 29034
// end ;
29030: GO 28995
29032: POP
29033: POP
// end ;
29034: LD_VAR 0 3
29038: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
29043: PPUSH
29044: PPUSH
29045: PPUSH
29046: PPUSH
29047: PPUSH
29048: PPUSH
29049: PPUSH
29050: PPUSH
29051: PPUSH
29052: PPUSH
29053: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29054: LD_VAR 0 1
29058: NOT
29059: PUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL_OW 257
29069: PUSH
29070: LD_INT 9
29072: NONEQUAL
29073: OR
29074: IFFALSE 29078
// exit ;
29076: GO 29651
// side := GetSide ( unit ) ;
29078: LD_ADDR_VAR 0 9
29082: PUSH
29083: LD_VAR 0 1
29087: PPUSH
29088: CALL_OW 255
29092: ST_TO_ADDR
// tech_space := tech_spacanom ;
29093: LD_ADDR_VAR 0 12
29097: PUSH
29098: LD_INT 29
29100: ST_TO_ADDR
// tech_time := tech_taurad ;
29101: LD_ADDR_VAR 0 13
29105: PUSH
29106: LD_INT 28
29108: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29109: LD_ADDR_VAR 0 11
29113: PUSH
29114: LD_VAR 0 1
29118: PPUSH
29119: CALL_OW 310
29123: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29124: LD_VAR 0 11
29128: PPUSH
29129: CALL_OW 247
29133: PUSH
29134: LD_INT 2
29136: EQUAL
29137: IFFALSE 29141
// exit ;
29139: GO 29651
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29141: LD_ADDR_VAR 0 8
29145: PUSH
29146: LD_INT 81
29148: PUSH
29149: LD_VAR 0 9
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 3
29160: PUSH
29161: LD_INT 21
29163: PUSH
29164: LD_INT 3
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PPUSH
29179: CALL_OW 69
29183: ST_TO_ADDR
// if not tmp then
29184: LD_VAR 0 8
29188: NOT
29189: IFFALSE 29193
// exit ;
29191: GO 29651
// if in_unit then
29193: LD_VAR 0 11
29197: IFFALSE 29221
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29199: LD_ADDR_VAR 0 10
29203: PUSH
29204: LD_VAR 0 8
29208: PPUSH
29209: LD_VAR 0 11
29213: PPUSH
29214: CALL_OW 74
29218: ST_TO_ADDR
29219: GO 29241
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29221: LD_ADDR_VAR 0 10
29225: PUSH
29226: LD_VAR 0 8
29230: PPUSH
29231: LD_VAR 0 1
29235: PPUSH
29236: CALL_OW 74
29240: ST_TO_ADDR
// if not enemy then
29241: LD_VAR 0 10
29245: NOT
29246: IFFALSE 29250
// exit ;
29248: GO 29651
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29250: LD_VAR 0 11
29254: PUSH
29255: LD_VAR 0 11
29259: PPUSH
29260: LD_VAR 0 10
29264: PPUSH
29265: CALL_OW 296
29269: PUSH
29270: LD_INT 13
29272: GREATER
29273: AND
29274: PUSH
29275: LD_VAR 0 1
29279: PPUSH
29280: LD_VAR 0 10
29284: PPUSH
29285: CALL_OW 296
29289: PUSH
29290: LD_INT 12
29292: GREATER
29293: OR
29294: IFFALSE 29298
// exit ;
29296: GO 29651
// missile := [ 1 ] ;
29298: LD_ADDR_VAR 0 14
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29309: LD_VAR 0 9
29313: PPUSH
29314: LD_VAR 0 12
29318: PPUSH
29319: CALL_OW 325
29323: IFFALSE 29352
// missile := Insert ( missile , missile + 1 , 2 ) ;
29325: LD_ADDR_VAR 0 14
29329: PUSH
29330: LD_VAR 0 14
29334: PPUSH
29335: LD_VAR 0 14
29339: PUSH
29340: LD_INT 1
29342: PLUS
29343: PPUSH
29344: LD_INT 2
29346: PPUSH
29347: CALL_OW 2
29351: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29352: LD_VAR 0 9
29356: PPUSH
29357: LD_VAR 0 13
29361: PPUSH
29362: CALL_OW 325
29366: PUSH
29367: LD_VAR 0 10
29371: PPUSH
29372: CALL_OW 255
29376: PPUSH
29377: LD_VAR 0 13
29381: PPUSH
29382: CALL_OW 325
29386: NOT
29387: AND
29388: IFFALSE 29417
// missile := Insert ( missile , missile + 1 , 3 ) ;
29390: LD_ADDR_VAR 0 14
29394: PUSH
29395: LD_VAR 0 14
29399: PPUSH
29400: LD_VAR 0 14
29404: PUSH
29405: LD_INT 1
29407: PLUS
29408: PPUSH
29409: LD_INT 3
29411: PPUSH
29412: CALL_OW 2
29416: ST_TO_ADDR
// if missile < 2 then
29417: LD_VAR 0 14
29421: PUSH
29422: LD_INT 2
29424: LESS
29425: IFFALSE 29429
// exit ;
29427: GO 29651
// x := GetX ( enemy ) ;
29429: LD_ADDR_VAR 0 4
29433: PUSH
29434: LD_VAR 0 10
29438: PPUSH
29439: CALL_OW 250
29443: ST_TO_ADDR
// y := GetY ( enemy ) ;
29444: LD_ADDR_VAR 0 5
29448: PUSH
29449: LD_VAR 0 10
29453: PPUSH
29454: CALL_OW 251
29458: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29459: LD_ADDR_VAR 0 6
29463: PUSH
29464: LD_VAR 0 4
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PPUSH
29473: LD_INT 1
29475: PPUSH
29476: CALL_OW 12
29480: PLUS
29481: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29482: LD_ADDR_VAR 0 7
29486: PUSH
29487: LD_VAR 0 5
29491: PUSH
29492: LD_INT 1
29494: NEG
29495: PPUSH
29496: LD_INT 1
29498: PPUSH
29499: CALL_OW 12
29503: PLUS
29504: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29505: LD_VAR 0 6
29509: PPUSH
29510: LD_VAR 0 7
29514: PPUSH
29515: CALL_OW 488
29519: NOT
29520: IFFALSE 29542
// begin _x := x ;
29522: LD_ADDR_VAR 0 6
29526: PUSH
29527: LD_VAR 0 4
29531: ST_TO_ADDR
// _y := y ;
29532: LD_ADDR_VAR 0 7
29536: PUSH
29537: LD_VAR 0 5
29541: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29542: LD_ADDR_VAR 0 3
29546: PUSH
29547: LD_INT 1
29549: PPUSH
29550: LD_VAR 0 14
29554: PPUSH
29555: CALL_OW 12
29559: ST_TO_ADDR
// case i of 1 :
29560: LD_VAR 0 3
29564: PUSH
29565: LD_INT 1
29567: DOUBLE
29568: EQUAL
29569: IFTRUE 29573
29571: GO 29590
29573: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29574: LD_VAR 0 1
29578: PPUSH
29579: LD_VAR 0 10
29583: PPUSH
29584: CALL_OW 115
29588: GO 29651
29590: LD_INT 2
29592: DOUBLE
29593: EQUAL
29594: IFTRUE 29598
29596: GO 29620
29598: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29599: LD_VAR 0 1
29603: PPUSH
29604: LD_VAR 0 6
29608: PPUSH
29609: LD_VAR 0 7
29613: PPUSH
29614: CALL_OW 153
29618: GO 29651
29620: LD_INT 3
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29650
29628: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29629: LD_VAR 0 1
29633: PPUSH
29634: LD_VAR 0 6
29638: PPUSH
29639: LD_VAR 0 7
29643: PPUSH
29644: CALL_OW 154
29648: GO 29651
29650: POP
// end ;
29651: LD_VAR 0 2
29655: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29656: LD_INT 0
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
// if not unit or not building then
29664: LD_VAR 0 1
29668: NOT
29669: PUSH
29670: LD_VAR 0 2
29674: NOT
29675: OR
29676: IFFALSE 29680
// exit ;
29678: GO 29838
// x := GetX ( building ) ;
29680: LD_ADDR_VAR 0 5
29684: PUSH
29685: LD_VAR 0 2
29689: PPUSH
29690: CALL_OW 250
29694: ST_TO_ADDR
// y := GetY ( building ) ;
29695: LD_ADDR_VAR 0 6
29699: PUSH
29700: LD_VAR 0 2
29704: PPUSH
29705: CALL_OW 251
29709: ST_TO_ADDR
// for i = 0 to 5 do
29710: LD_ADDR_VAR 0 4
29714: PUSH
29715: DOUBLE
29716: LD_INT 0
29718: DEC
29719: ST_TO_ADDR
29720: LD_INT 5
29722: PUSH
29723: FOR_TO
29724: IFFALSE 29836
// begin _x := ShiftX ( x , i , 3 ) ;
29726: LD_ADDR_VAR 0 7
29730: PUSH
29731: LD_VAR 0 5
29735: PPUSH
29736: LD_VAR 0 4
29740: PPUSH
29741: LD_INT 3
29743: PPUSH
29744: CALL_OW 272
29748: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29749: LD_ADDR_VAR 0 8
29753: PUSH
29754: LD_VAR 0 6
29758: PPUSH
29759: LD_VAR 0 4
29763: PPUSH
29764: LD_INT 3
29766: PPUSH
29767: CALL_OW 273
29771: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29772: LD_VAR 0 7
29776: PPUSH
29777: LD_VAR 0 8
29781: PPUSH
29782: CALL_OW 488
29786: NOT
29787: IFFALSE 29791
// continue ;
29789: GO 29723
// if HexInfo ( _x , _y ) = 0 then
29791: LD_VAR 0 7
29795: PPUSH
29796: LD_VAR 0 8
29800: PPUSH
29801: CALL_OW 428
29805: PUSH
29806: LD_INT 0
29808: EQUAL
29809: IFFALSE 29834
// begin ComMoveXY ( unit , _x , _y ) ;
29811: LD_VAR 0 1
29815: PPUSH
29816: LD_VAR 0 7
29820: PPUSH
29821: LD_VAR 0 8
29825: PPUSH
29826: CALL_OW 111
// exit ;
29830: POP
29831: POP
29832: GO 29838
// end ; end ;
29834: GO 29723
29836: POP
29837: POP
// end ;
29838: LD_VAR 0 3
29842: RET
// export function ScanBase ( side , base_area ) ; begin
29843: LD_INT 0
29845: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29846: LD_ADDR_VAR 0 3
29850: PUSH
29851: LD_VAR 0 2
29855: PPUSH
29856: LD_INT 81
29858: PUSH
29859: LD_VAR 0 1
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PPUSH
29868: CALL_OW 70
29872: ST_TO_ADDR
// end ;
29873: LD_VAR 0 3
29877: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29878: LD_INT 0
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
// result := false ;
29884: LD_ADDR_VAR 0 2
29888: PUSH
29889: LD_INT 0
29891: ST_TO_ADDR
// side := GetSide ( unit ) ;
29892: LD_ADDR_VAR 0 3
29896: PUSH
29897: LD_VAR 0 1
29901: PPUSH
29902: CALL_OW 255
29906: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29907: LD_ADDR_VAR 0 4
29911: PUSH
29912: LD_VAR 0 1
29916: PPUSH
29917: CALL_OW 248
29921: ST_TO_ADDR
// case nat of 1 :
29922: LD_VAR 0 4
29926: PUSH
29927: LD_INT 1
29929: DOUBLE
29930: EQUAL
29931: IFTRUE 29935
29933: GO 29946
29935: POP
// tech := tech_lassight ; 2 :
29936: LD_ADDR_VAR 0 5
29940: PUSH
29941: LD_INT 12
29943: ST_TO_ADDR
29944: GO 29985
29946: LD_INT 2
29948: DOUBLE
29949: EQUAL
29950: IFTRUE 29954
29952: GO 29965
29954: POP
// tech := tech_mortar ; 3 :
29955: LD_ADDR_VAR 0 5
29959: PUSH
29960: LD_INT 41
29962: ST_TO_ADDR
29963: GO 29985
29965: LD_INT 3
29967: DOUBLE
29968: EQUAL
29969: IFTRUE 29973
29971: GO 29984
29973: POP
// tech := tech_bazooka ; end ;
29974: LD_ADDR_VAR 0 5
29978: PUSH
29979: LD_INT 44
29981: ST_TO_ADDR
29982: GO 29985
29984: POP
// if Researched ( side , tech ) then
29985: LD_VAR 0 3
29989: PPUSH
29990: LD_VAR 0 5
29994: PPUSH
29995: CALL_OW 325
29999: IFFALSE 30026
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30001: LD_ADDR_VAR 0 2
30005: PUSH
30006: LD_INT 5
30008: PUSH
30009: LD_INT 8
30011: PUSH
30012: LD_INT 9
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: PUSH
30020: LD_VAR 0 4
30024: ARRAY
30025: ST_TO_ADDR
// end ;
30026: LD_VAR 0 2
30030: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30031: LD_INT 0
30033: PPUSH
30034: PPUSH
30035: PPUSH
// if not mines then
30036: LD_VAR 0 2
30040: NOT
30041: IFFALSE 30045
// exit ;
30043: GO 30189
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30045: LD_ADDR_VAR 0 5
30049: PUSH
30050: LD_INT 81
30052: PUSH
30053: LD_VAR 0 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 3
30064: PUSH
30065: LD_INT 21
30067: PUSH
30068: LD_INT 3
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PPUSH
30083: CALL_OW 69
30087: ST_TO_ADDR
// for i in mines do
30088: LD_ADDR_VAR 0 4
30092: PUSH
30093: LD_VAR 0 2
30097: PUSH
30098: FOR_IN
30099: IFFALSE 30187
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30101: LD_VAR 0 4
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: PPUSH
30110: LD_VAR 0 4
30114: PUSH
30115: LD_INT 2
30117: ARRAY
30118: PPUSH
30119: CALL_OW 458
30123: NOT
30124: IFFALSE 30128
// continue ;
30126: GO 30098
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30128: LD_VAR 0 4
30132: PUSH
30133: LD_INT 1
30135: ARRAY
30136: PPUSH
30137: LD_VAR 0 4
30141: PUSH
30142: LD_INT 2
30144: ARRAY
30145: PPUSH
30146: CALL_OW 428
30150: PUSH
30151: LD_VAR 0 5
30155: IN
30156: IFFALSE 30185
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30158: LD_VAR 0 4
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PPUSH
30167: LD_VAR 0 4
30171: PUSH
30172: LD_INT 2
30174: ARRAY
30175: PPUSH
30176: LD_VAR 0 1
30180: PPUSH
30181: CALL_OW 456
// end ;
30185: GO 30098
30187: POP
30188: POP
// end ;
30189: LD_VAR 0 3
30193: RET
// export function Count ( array ) ; var i ; begin
30194: LD_INT 0
30196: PPUSH
30197: PPUSH
// result := 0 ;
30198: LD_ADDR_VAR 0 2
30202: PUSH
30203: LD_INT 0
30205: ST_TO_ADDR
// for i in array do
30206: LD_ADDR_VAR 0 3
30210: PUSH
30211: LD_VAR 0 1
30215: PUSH
30216: FOR_IN
30217: IFFALSE 30241
// if i then
30219: LD_VAR 0 3
30223: IFFALSE 30239
// result := result + 1 ;
30225: LD_ADDR_VAR 0 2
30229: PUSH
30230: LD_VAR 0 2
30234: PUSH
30235: LD_INT 1
30237: PLUS
30238: ST_TO_ADDR
30239: GO 30216
30241: POP
30242: POP
// end ;
30243: LD_VAR 0 2
30247: RET
// export function IsEmpty ( building ) ; begin
30248: LD_INT 0
30250: PPUSH
// if not building then
30251: LD_VAR 0 1
30255: NOT
30256: IFFALSE 30260
// exit ;
30258: GO 30303
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30260: LD_ADDR_VAR 0 2
30264: PUSH
30265: LD_VAR 0 1
30269: PUSH
30270: LD_INT 22
30272: PUSH
30273: LD_VAR 0 1
30277: PPUSH
30278: CALL_OW 255
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 58
30289: PUSH
30290: EMPTY
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PPUSH
30297: CALL_OW 69
30301: IN
30302: ST_TO_ADDR
// end ;
30303: LD_VAR 0 2
30307: RET
// export function IsNotFull ( building ) ; begin
30308: LD_INT 0
30310: PPUSH
// if not building then
30311: LD_VAR 0 1
30315: NOT
30316: IFFALSE 30320
// exit ;
30318: GO 30339
// result := UnitsInside ( building ) < 6 ;
30320: LD_ADDR_VAR 0 2
30324: PUSH
30325: LD_VAR 0 1
30329: PPUSH
30330: CALL_OW 313
30334: PUSH
30335: LD_INT 6
30337: LESS
30338: ST_TO_ADDR
// end ;
30339: LD_VAR 0 2
30343: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30344: LD_INT 0
30346: PPUSH
30347: PPUSH
30348: PPUSH
30349: PPUSH
// tmp := [ ] ;
30350: LD_ADDR_VAR 0 3
30354: PUSH
30355: EMPTY
30356: ST_TO_ADDR
// list := [ ] ;
30357: LD_ADDR_VAR 0 5
30361: PUSH
30362: EMPTY
30363: ST_TO_ADDR
// for i = 16 to 25 do
30364: LD_ADDR_VAR 0 4
30368: PUSH
30369: DOUBLE
30370: LD_INT 16
30372: DEC
30373: ST_TO_ADDR
30374: LD_INT 25
30376: PUSH
30377: FOR_TO
30378: IFFALSE 30451
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_VAR 0 3
30389: PUSH
30390: LD_INT 22
30392: PUSH
30393: LD_VAR 0 1
30397: PPUSH
30398: CALL_OW 255
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 91
30409: PUSH
30410: LD_VAR 0 1
30414: PUSH
30415: LD_INT 6
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 30
30425: PUSH
30426: LD_VAR 0 4
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: PUSH
30440: EMPTY
30441: LIST
30442: PPUSH
30443: CALL_OW 69
30447: ADD
30448: ST_TO_ADDR
30449: GO 30377
30451: POP
30452: POP
// for i = 1 to tmp do
30453: LD_ADDR_VAR 0 4
30457: PUSH
30458: DOUBLE
30459: LD_INT 1
30461: DEC
30462: ST_TO_ADDR
30463: LD_VAR 0 3
30467: PUSH
30468: FOR_TO
30469: IFFALSE 30557
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30471: LD_ADDR_VAR 0 5
30475: PUSH
30476: LD_VAR 0 5
30480: PUSH
30481: LD_VAR 0 3
30485: PUSH
30486: LD_VAR 0 4
30490: ARRAY
30491: PPUSH
30492: CALL_OW 266
30496: PUSH
30497: LD_VAR 0 3
30501: PUSH
30502: LD_VAR 0 4
30506: ARRAY
30507: PPUSH
30508: CALL_OW 250
30512: PUSH
30513: LD_VAR 0 3
30517: PUSH
30518: LD_VAR 0 4
30522: ARRAY
30523: PPUSH
30524: CALL_OW 251
30528: PUSH
30529: LD_VAR 0 3
30533: PUSH
30534: LD_VAR 0 4
30538: ARRAY
30539: PPUSH
30540: CALL_OW 254
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: PUSH
30551: EMPTY
30552: LIST
30553: ADD
30554: ST_TO_ADDR
30555: GO 30468
30557: POP
30558: POP
// result := list ;
30559: LD_ADDR_VAR 0 2
30563: PUSH
30564: LD_VAR 0 5
30568: ST_TO_ADDR
// end ;
30569: LD_VAR 0 2
30573: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30574: LD_INT 0
30576: PPUSH
30577: PPUSH
30578: PPUSH
30579: PPUSH
30580: PPUSH
30581: PPUSH
30582: PPUSH
// if not factory then
30583: LD_VAR 0 1
30587: NOT
30588: IFFALSE 30592
// exit ;
30590: GO 31185
// if control = control_apeman then
30592: LD_VAR 0 4
30596: PUSH
30597: LD_INT 5
30599: EQUAL
30600: IFFALSE 30709
// begin tmp := UnitsInside ( factory ) ;
30602: LD_ADDR_VAR 0 8
30606: PUSH
30607: LD_VAR 0 1
30611: PPUSH
30612: CALL_OW 313
30616: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30617: LD_VAR 0 8
30621: PPUSH
30622: LD_INT 25
30624: PUSH
30625: LD_INT 12
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PPUSH
30632: CALL_OW 72
30636: NOT
30637: IFFALSE 30647
// control := control_manual ;
30639: LD_ADDR_VAR 0 4
30643: PUSH
30644: LD_INT 1
30646: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30647: LD_ADDR_VAR 0 8
30651: PUSH
30652: LD_VAR 0 1
30656: PPUSH
30657: CALL 30344 0 1
30661: ST_TO_ADDR
// if tmp then
30662: LD_VAR 0 8
30666: IFFALSE 30709
// begin for i in tmp do
30668: LD_ADDR_VAR 0 7
30672: PUSH
30673: LD_VAR 0 8
30677: PUSH
30678: FOR_IN
30679: IFFALSE 30707
// if i [ 1 ] = b_ext_radio then
30681: LD_VAR 0 7
30685: PUSH
30686: LD_INT 1
30688: ARRAY
30689: PUSH
30690: LD_INT 22
30692: EQUAL
30693: IFFALSE 30705
// begin control := control_remote ;
30695: LD_ADDR_VAR 0 4
30699: PUSH
30700: LD_INT 2
30702: ST_TO_ADDR
// break ;
30703: GO 30707
// end ;
30705: GO 30678
30707: POP
30708: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30709: LD_VAR 0 1
30713: PPUSH
30714: LD_VAR 0 2
30718: PPUSH
30719: LD_VAR 0 3
30723: PPUSH
30724: LD_VAR 0 4
30728: PPUSH
30729: LD_VAR 0 5
30733: PPUSH
30734: CALL_OW 448
30738: IFFALSE 30773
// begin result := [ chassis , engine , control , weapon ] ;
30740: LD_ADDR_VAR 0 6
30744: PUSH
30745: LD_VAR 0 2
30749: PUSH
30750: LD_VAR 0 3
30754: PUSH
30755: LD_VAR 0 4
30759: PUSH
30760: LD_VAR 0 5
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: ST_TO_ADDR
// exit ;
30771: GO 31185
// end ; _chassis := AvailableChassisList ( factory ) ;
30773: LD_ADDR_VAR 0 9
30777: PUSH
30778: LD_VAR 0 1
30782: PPUSH
30783: CALL_OW 475
30787: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30788: LD_ADDR_VAR 0 11
30792: PUSH
30793: LD_VAR 0 1
30797: PPUSH
30798: CALL_OW 476
30802: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30803: LD_ADDR_VAR 0 12
30807: PUSH
30808: LD_VAR 0 1
30812: PPUSH
30813: CALL_OW 477
30817: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30818: LD_ADDR_VAR 0 10
30822: PUSH
30823: LD_VAR 0 1
30827: PPUSH
30828: CALL_OW 478
30832: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30833: LD_VAR 0 9
30837: NOT
30838: PUSH
30839: LD_VAR 0 11
30843: NOT
30844: OR
30845: PUSH
30846: LD_VAR 0 12
30850: NOT
30851: OR
30852: PUSH
30853: LD_VAR 0 10
30857: NOT
30858: OR
30859: IFFALSE 30894
// begin result := [ chassis , engine , control , weapon ] ;
30861: LD_ADDR_VAR 0 6
30865: PUSH
30866: LD_VAR 0 2
30870: PUSH
30871: LD_VAR 0 3
30875: PUSH
30876: LD_VAR 0 4
30880: PUSH
30881: LD_VAR 0 5
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: ST_TO_ADDR
// exit ;
30892: GO 31185
// end ; if not chassis in _chassis then
30894: LD_VAR 0 2
30898: PUSH
30899: LD_VAR 0 9
30903: IN
30904: NOT
30905: IFFALSE 30931
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30907: LD_ADDR_VAR 0 2
30911: PUSH
30912: LD_VAR 0 9
30916: PUSH
30917: LD_INT 1
30919: PPUSH
30920: LD_VAR 0 9
30924: PPUSH
30925: CALL_OW 12
30929: ARRAY
30930: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30931: LD_VAR 0 2
30935: PPUSH
30936: LD_VAR 0 3
30940: PPUSH
30941: CALL 31190 0 2
30945: NOT
30946: IFFALSE 31005
// repeat engine := _engine [ 1 ] ;
30948: LD_ADDR_VAR 0 3
30952: PUSH
30953: LD_VAR 0 11
30957: PUSH
30958: LD_INT 1
30960: ARRAY
30961: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30962: LD_ADDR_VAR 0 11
30966: PUSH
30967: LD_VAR 0 11
30971: PPUSH
30972: LD_INT 1
30974: PPUSH
30975: CALL_OW 3
30979: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30980: LD_VAR 0 2
30984: PPUSH
30985: LD_VAR 0 3
30989: PPUSH
30990: CALL 31190 0 2
30994: PUSH
30995: LD_VAR 0 11
30999: PUSH
31000: EMPTY
31001: EQUAL
31002: OR
31003: IFFALSE 30948
// if not control in _control then
31005: LD_VAR 0 4
31009: PUSH
31010: LD_VAR 0 12
31014: IN
31015: NOT
31016: IFFALSE 31042
// control := _control [ rand ( 1 , _control ) ] ;
31018: LD_ADDR_VAR 0 4
31022: PUSH
31023: LD_VAR 0 12
31027: PUSH
31028: LD_INT 1
31030: PPUSH
31031: LD_VAR 0 12
31035: PPUSH
31036: CALL_OW 12
31040: ARRAY
31041: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31042: LD_VAR 0 2
31046: PPUSH
31047: LD_VAR 0 5
31051: PPUSH
31052: CALL 31410 0 2
31056: NOT
31057: IFFALSE 31116
// repeat weapon := _weapon [ 1 ] ;
31059: LD_ADDR_VAR 0 5
31063: PUSH
31064: LD_VAR 0 10
31068: PUSH
31069: LD_INT 1
31071: ARRAY
31072: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31073: LD_ADDR_VAR 0 10
31077: PUSH
31078: LD_VAR 0 10
31082: PPUSH
31083: LD_INT 1
31085: PPUSH
31086: CALL_OW 3
31090: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31091: LD_VAR 0 2
31095: PPUSH
31096: LD_VAR 0 5
31100: PPUSH
31101: CALL 31410 0 2
31105: PUSH
31106: LD_VAR 0 10
31110: PUSH
31111: EMPTY
31112: EQUAL
31113: OR
31114: IFFALSE 31059
// result := [ ] ;
31116: LD_ADDR_VAR 0 6
31120: PUSH
31121: EMPTY
31122: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31123: LD_VAR 0 1
31127: PPUSH
31128: LD_VAR 0 2
31132: PPUSH
31133: LD_VAR 0 3
31137: PPUSH
31138: LD_VAR 0 4
31142: PPUSH
31143: LD_VAR 0 5
31147: PPUSH
31148: CALL_OW 448
31152: IFFALSE 31185
// result := [ chassis , engine , control , weapon ] ;
31154: LD_ADDR_VAR 0 6
31158: PUSH
31159: LD_VAR 0 2
31163: PUSH
31164: LD_VAR 0 3
31168: PUSH
31169: LD_VAR 0 4
31173: PUSH
31174: LD_VAR 0 5
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: ST_TO_ADDR
// end ;
31185: LD_VAR 0 6
31189: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31190: LD_INT 0
31192: PPUSH
// if not chassis or not engine then
31193: LD_VAR 0 1
31197: NOT
31198: PUSH
31199: LD_VAR 0 2
31203: NOT
31204: OR
31205: IFFALSE 31209
// exit ;
31207: GO 31405
// case engine of engine_solar :
31209: LD_VAR 0 2
31213: PUSH
31214: LD_INT 2
31216: DOUBLE
31217: EQUAL
31218: IFTRUE 31222
31220: GO 31260
31222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31223: LD_ADDR_VAR 0 3
31227: PUSH
31228: LD_INT 11
31230: PUSH
31231: LD_INT 12
31233: PUSH
31234: LD_INT 13
31236: PUSH
31237: LD_INT 14
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: LD_INT 2
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: ST_TO_ADDR
31258: GO 31389
31260: LD_INT 1
31262: DOUBLE
31263: EQUAL
31264: IFTRUE 31268
31266: GO 31330
31268: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31269: LD_ADDR_VAR 0 3
31273: PUSH
31274: LD_INT 11
31276: PUSH
31277: LD_INT 12
31279: PUSH
31280: LD_INT 13
31282: PUSH
31283: LD_INT 14
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: LD_INT 2
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: LD_INT 4
31297: PUSH
31298: LD_INT 5
31300: PUSH
31301: LD_INT 21
31303: PUSH
31304: LD_INT 23
31306: PUSH
31307: LD_INT 22
31309: PUSH
31310: LD_INT 24
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
31328: GO 31389
31330: LD_INT 3
31332: DOUBLE
31333: EQUAL
31334: IFTRUE 31338
31336: GO 31388
31338: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31339: LD_ADDR_VAR 0 3
31343: PUSH
31344: LD_INT 13
31346: PUSH
31347: LD_INT 14
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: LD_INT 4
31358: PUSH
31359: LD_INT 5
31361: PUSH
31362: LD_INT 21
31364: PUSH
31365: LD_INT 22
31367: PUSH
31368: LD_INT 23
31370: PUSH
31371: LD_INT 24
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
31386: GO 31389
31388: POP
// result := ( chassis in result ) ;
31389: LD_ADDR_VAR 0 3
31393: PUSH
31394: LD_VAR 0 1
31398: PUSH
31399: LD_VAR 0 3
31403: IN
31404: ST_TO_ADDR
// end ;
31405: LD_VAR 0 3
31409: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31410: LD_INT 0
31412: PPUSH
// if not chassis or not weapon then
31413: LD_VAR 0 1
31417: NOT
31418: PUSH
31419: LD_VAR 0 2
31423: NOT
31424: OR
31425: IFFALSE 31429
// exit ;
31427: GO 32455
// case weapon of us_machine_gun :
31429: LD_VAR 0 2
31433: PUSH
31434: LD_INT 2
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31472
31442: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31443: LD_ADDR_VAR 0 3
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: LD_INT 3
31456: PUSH
31457: LD_INT 4
31459: PUSH
31460: LD_INT 5
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: ST_TO_ADDR
31470: GO 32439
31472: LD_INT 3
31474: DOUBLE
31475: EQUAL
31476: IFTRUE 31480
31478: GO 31510
31480: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31481: LD_ADDR_VAR 0 3
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: LD_INT 4
31497: PUSH
31498: LD_INT 5
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
31508: GO 32439
31510: LD_INT 11
31512: DOUBLE
31513: EQUAL
31514: IFTRUE 31518
31516: GO 31548
31518: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31519: LD_ADDR_VAR 0 3
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: LD_INT 3
31532: PUSH
31533: LD_INT 4
31535: PUSH
31536: LD_INT 5
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: ST_TO_ADDR
31546: GO 32439
31548: LD_INT 4
31550: DOUBLE
31551: EQUAL
31552: IFTRUE 31556
31554: GO 31582
31556: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31557: LD_ADDR_VAR 0 3
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: LD_INT 4
31570: PUSH
31571: LD_INT 5
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: ST_TO_ADDR
31580: GO 32439
31582: LD_INT 5
31584: DOUBLE
31585: EQUAL
31586: IFTRUE 31590
31588: GO 31616
31590: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: LD_INT 2
31598: PUSH
31599: LD_INT 3
31601: PUSH
31602: LD_INT 4
31604: PUSH
31605: LD_INT 5
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: ST_TO_ADDR
31614: GO 32439
31616: LD_INT 9
31618: DOUBLE
31619: EQUAL
31620: IFTRUE 31624
31622: GO 31650
31624: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31625: LD_ADDR_VAR 0 3
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: LD_INT 3
31635: PUSH
31636: LD_INT 4
31638: PUSH
31639: LD_INT 5
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: ST_TO_ADDR
31648: GO 32439
31650: LD_INT 7
31652: DOUBLE
31653: EQUAL
31654: IFTRUE 31658
31656: GO 31684
31658: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31659: LD_ADDR_VAR 0 3
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: LD_INT 4
31672: PUSH
31673: LD_INT 5
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: ST_TO_ADDR
31682: GO 32439
31684: LD_INT 12
31686: DOUBLE
31687: EQUAL
31688: IFTRUE 31692
31690: GO 31718
31692: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31693: LD_ADDR_VAR 0 3
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 3
31703: PUSH
31704: LD_INT 4
31706: PUSH
31707: LD_INT 5
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: ST_TO_ADDR
31716: GO 32439
31718: LD_INT 13
31720: DOUBLE
31721: EQUAL
31722: IFTRUE 31726
31724: GO 31752
31726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31727: LD_ADDR_VAR 0 3
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 3
31737: PUSH
31738: LD_INT 4
31740: PUSH
31741: LD_INT 5
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: ST_TO_ADDR
31750: GO 32439
31752: LD_INT 14
31754: DOUBLE
31755: EQUAL
31756: IFTRUE 31760
31758: GO 31778
31760: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31761: LD_ADDR_VAR 0 3
31765: PUSH
31766: LD_INT 4
31768: PUSH
31769: LD_INT 5
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: ST_TO_ADDR
31776: GO 32439
31778: LD_INT 6
31780: DOUBLE
31781: EQUAL
31782: IFTRUE 31786
31784: GO 31804
31786: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31787: LD_ADDR_VAR 0 3
31791: PUSH
31792: LD_INT 4
31794: PUSH
31795: LD_INT 5
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: ST_TO_ADDR
31802: GO 32439
31804: LD_INT 10
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31812
31810: GO 31830
31812: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31813: LD_ADDR_VAR 0 3
31817: PUSH
31818: LD_INT 4
31820: PUSH
31821: LD_INT 5
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: ST_TO_ADDR
31828: GO 32439
31830: LD_INT 22
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31864
31838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31839: LD_ADDR_VAR 0 3
31843: PUSH
31844: LD_INT 11
31846: PUSH
31847: LD_INT 12
31849: PUSH
31850: LD_INT 13
31852: PUSH
31853: LD_INT 14
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: ST_TO_ADDR
31862: GO 32439
31864: LD_INT 23
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31872
31870: GO 31898
31872: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31873: LD_ADDR_VAR 0 3
31877: PUSH
31878: LD_INT 11
31880: PUSH
31881: LD_INT 12
31883: PUSH
31884: LD_INT 13
31886: PUSH
31887: LD_INT 14
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: ST_TO_ADDR
31896: GO 32439
31898: LD_INT 24
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 31932
31906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31907: LD_ADDR_VAR 0 3
31911: PUSH
31912: LD_INT 11
31914: PUSH
31915: LD_INT 12
31917: PUSH
31918: LD_INT 13
31920: PUSH
31921: LD_INT 14
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: ST_TO_ADDR
31930: GO 32439
31932: LD_INT 30
31934: DOUBLE
31935: EQUAL
31936: IFTRUE 31940
31938: GO 31966
31940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31941: LD_ADDR_VAR 0 3
31945: PUSH
31946: LD_INT 11
31948: PUSH
31949: LD_INT 12
31951: PUSH
31952: LD_INT 13
31954: PUSH
31955: LD_INT 14
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
31964: GO 32439
31966: LD_INT 25
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 31992
31974: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31975: LD_ADDR_VAR 0 3
31979: PUSH
31980: LD_INT 13
31982: PUSH
31983: LD_INT 14
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: ST_TO_ADDR
31990: GO 32439
31992: LD_INT 27
31994: DOUBLE
31995: EQUAL
31996: IFTRUE 32000
31998: GO 32018
32000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32001: LD_ADDR_VAR 0 3
32005: PUSH
32006: LD_INT 13
32008: PUSH
32009: LD_INT 14
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: ST_TO_ADDR
32016: GO 32439
32018: LD_INT 28
32020: DOUBLE
32021: EQUAL
32022: IFTRUE 32026
32024: GO 32044
32026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32027: LD_ADDR_VAR 0 3
32031: PUSH
32032: LD_INT 13
32034: PUSH
32035: LD_INT 14
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: ST_TO_ADDR
32042: GO 32439
32044: LD_INT 29
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32070
32052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32053: LD_ADDR_VAR 0 3
32057: PUSH
32058: LD_INT 13
32060: PUSH
32061: LD_INT 14
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: ST_TO_ADDR
32068: GO 32439
32070: LD_INT 31
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32096
32078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32079: LD_ADDR_VAR 0 3
32083: PUSH
32084: LD_INT 13
32086: PUSH
32087: LD_INT 14
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: ST_TO_ADDR
32094: GO 32439
32096: LD_INT 26
32098: DOUBLE
32099: EQUAL
32100: IFTRUE 32104
32102: GO 32122
32104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32105: LD_ADDR_VAR 0 3
32109: PUSH
32110: LD_INT 13
32112: PUSH
32113: LD_INT 14
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: ST_TO_ADDR
32120: GO 32439
32122: LD_INT 42
32124: DOUBLE
32125: EQUAL
32126: IFTRUE 32130
32128: GO 32156
32130: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32131: LD_ADDR_VAR 0 3
32135: PUSH
32136: LD_INT 21
32138: PUSH
32139: LD_INT 22
32141: PUSH
32142: LD_INT 23
32144: PUSH
32145: LD_INT 24
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: ST_TO_ADDR
32154: GO 32439
32156: LD_INT 43
32158: DOUBLE
32159: EQUAL
32160: IFTRUE 32164
32162: GO 32190
32164: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32165: LD_ADDR_VAR 0 3
32169: PUSH
32170: LD_INT 21
32172: PUSH
32173: LD_INT 22
32175: PUSH
32176: LD_INT 23
32178: PUSH
32179: LD_INT 24
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: ST_TO_ADDR
32188: GO 32439
32190: LD_INT 44
32192: DOUBLE
32193: EQUAL
32194: IFTRUE 32198
32196: GO 32224
32198: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32199: LD_ADDR_VAR 0 3
32203: PUSH
32204: LD_INT 21
32206: PUSH
32207: LD_INT 22
32209: PUSH
32210: LD_INT 23
32212: PUSH
32213: LD_INT 24
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
32222: GO 32439
32224: LD_INT 45
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32232
32230: GO 32258
32232: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32233: LD_ADDR_VAR 0 3
32237: PUSH
32238: LD_INT 21
32240: PUSH
32241: LD_INT 22
32243: PUSH
32244: LD_INT 23
32246: PUSH
32247: LD_INT 24
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: ST_TO_ADDR
32256: GO 32439
32258: LD_INT 49
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32292
32266: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32267: LD_ADDR_VAR 0 3
32271: PUSH
32272: LD_INT 21
32274: PUSH
32275: LD_INT 22
32277: PUSH
32278: LD_INT 23
32280: PUSH
32281: LD_INT 24
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: ST_TO_ADDR
32290: GO 32439
32292: LD_INT 51
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32326
32300: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32301: LD_ADDR_VAR 0 3
32305: PUSH
32306: LD_INT 21
32308: PUSH
32309: LD_INT 22
32311: PUSH
32312: LD_INT 23
32314: PUSH
32315: LD_INT 24
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
32324: GO 32439
32326: LD_INT 52
32328: DOUBLE
32329: EQUAL
32330: IFTRUE 32334
32332: GO 32360
32334: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32335: LD_ADDR_VAR 0 3
32339: PUSH
32340: LD_INT 21
32342: PUSH
32343: LD_INT 22
32345: PUSH
32346: LD_INT 23
32348: PUSH
32349: LD_INT 24
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: ST_TO_ADDR
32358: GO 32439
32360: LD_INT 53
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32386
32368: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: LD_INT 23
32376: PUSH
32377: LD_INT 24
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: ST_TO_ADDR
32384: GO 32439
32386: LD_INT 46
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32394
32392: GO 32412
32394: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32395: LD_ADDR_VAR 0 3
32399: PUSH
32400: LD_INT 23
32402: PUSH
32403: LD_INT 24
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: ST_TO_ADDR
32410: GO 32439
32412: LD_INT 47
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32420
32418: GO 32438
32420: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32421: LD_ADDR_VAR 0 3
32425: PUSH
32426: LD_INT 23
32428: PUSH
32429: LD_INT 24
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: ST_TO_ADDR
32436: GO 32439
32438: POP
// result := ( chassis in result ) ;
32439: LD_ADDR_VAR 0 3
32443: PUSH
32444: LD_VAR 0 1
32448: PUSH
32449: LD_VAR 0 3
32453: IN
32454: ST_TO_ADDR
// end ;
32455: LD_VAR 0 3
32459: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32460: LD_INT 0
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
// result := array ;
32469: LD_ADDR_VAR 0 5
32473: PUSH
32474: LD_VAR 0 1
32478: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32479: LD_VAR 0 1
32483: NOT
32484: PUSH
32485: LD_VAR 0 2
32489: NOT
32490: OR
32491: PUSH
32492: LD_VAR 0 3
32496: NOT
32497: OR
32498: PUSH
32499: LD_VAR 0 2
32503: PUSH
32504: LD_VAR 0 1
32508: GREATER
32509: OR
32510: PUSH
32511: LD_VAR 0 3
32515: PUSH
32516: LD_VAR 0 1
32520: GREATER
32521: OR
32522: IFFALSE 32526
// exit ;
32524: GO 32822
// if direction then
32526: LD_VAR 0 4
32530: IFFALSE 32594
// begin d := 1 ;
32532: LD_ADDR_VAR 0 9
32536: PUSH
32537: LD_INT 1
32539: ST_TO_ADDR
// if i_from > i_to then
32540: LD_VAR 0 2
32544: PUSH
32545: LD_VAR 0 3
32549: GREATER
32550: IFFALSE 32576
// length := ( array - i_from ) + i_to else
32552: LD_ADDR_VAR 0 11
32556: PUSH
32557: LD_VAR 0 1
32561: PUSH
32562: LD_VAR 0 2
32566: MINUS
32567: PUSH
32568: LD_VAR 0 3
32572: PLUS
32573: ST_TO_ADDR
32574: GO 32592
// length := i_to - i_from ;
32576: LD_ADDR_VAR 0 11
32580: PUSH
32581: LD_VAR 0 3
32585: PUSH
32586: LD_VAR 0 2
32590: MINUS
32591: ST_TO_ADDR
// end else
32592: GO 32655
// begin d := - 1 ;
32594: LD_ADDR_VAR 0 9
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: ST_TO_ADDR
// if i_from > i_to then
32603: LD_VAR 0 2
32607: PUSH
32608: LD_VAR 0 3
32612: GREATER
32613: IFFALSE 32633
// length := i_from - i_to else
32615: LD_ADDR_VAR 0 11
32619: PUSH
32620: LD_VAR 0 2
32624: PUSH
32625: LD_VAR 0 3
32629: MINUS
32630: ST_TO_ADDR
32631: GO 32655
// length := ( array - i_to ) + i_from ;
32633: LD_ADDR_VAR 0 11
32637: PUSH
32638: LD_VAR 0 1
32642: PUSH
32643: LD_VAR 0 3
32647: MINUS
32648: PUSH
32649: LD_VAR 0 2
32653: PLUS
32654: ST_TO_ADDR
// end ; if not length then
32655: LD_VAR 0 11
32659: NOT
32660: IFFALSE 32664
// exit ;
32662: GO 32822
// tmp := array ;
32664: LD_ADDR_VAR 0 10
32668: PUSH
32669: LD_VAR 0 1
32673: ST_TO_ADDR
// for i = 1 to length do
32674: LD_ADDR_VAR 0 6
32678: PUSH
32679: DOUBLE
32680: LD_INT 1
32682: DEC
32683: ST_TO_ADDR
32684: LD_VAR 0 11
32688: PUSH
32689: FOR_TO
32690: IFFALSE 32810
// begin for j = 1 to array do
32692: LD_ADDR_VAR 0 7
32696: PUSH
32697: DOUBLE
32698: LD_INT 1
32700: DEC
32701: ST_TO_ADDR
32702: LD_VAR 0 1
32706: PUSH
32707: FOR_TO
32708: IFFALSE 32796
// begin k := j + d ;
32710: LD_ADDR_VAR 0 8
32714: PUSH
32715: LD_VAR 0 7
32719: PUSH
32720: LD_VAR 0 9
32724: PLUS
32725: ST_TO_ADDR
// if k > array then
32726: LD_VAR 0 8
32730: PUSH
32731: LD_VAR 0 1
32735: GREATER
32736: IFFALSE 32746
// k := 1 ;
32738: LD_ADDR_VAR 0 8
32742: PUSH
32743: LD_INT 1
32745: ST_TO_ADDR
// if not k then
32746: LD_VAR 0 8
32750: NOT
32751: IFFALSE 32763
// k := array ;
32753: LD_ADDR_VAR 0 8
32757: PUSH
32758: LD_VAR 0 1
32762: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32763: LD_ADDR_VAR 0 10
32767: PUSH
32768: LD_VAR 0 10
32772: PPUSH
32773: LD_VAR 0 8
32777: PPUSH
32778: LD_VAR 0 1
32782: PUSH
32783: LD_VAR 0 7
32787: ARRAY
32788: PPUSH
32789: CALL_OW 1
32793: ST_TO_ADDR
// end ;
32794: GO 32707
32796: POP
32797: POP
// array := tmp ;
32798: LD_ADDR_VAR 0 1
32802: PUSH
32803: LD_VAR 0 10
32807: ST_TO_ADDR
// end ;
32808: GO 32689
32810: POP
32811: POP
// result := array ;
32812: LD_ADDR_VAR 0 5
32816: PUSH
32817: LD_VAR 0 1
32821: ST_TO_ADDR
// end ;
32822: LD_VAR 0 5
32826: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32827: LD_INT 0
32829: PPUSH
32830: PPUSH
// result := 0 ;
32831: LD_ADDR_VAR 0 3
32835: PUSH
32836: LD_INT 0
32838: ST_TO_ADDR
// if not array or not value in array then
32839: LD_VAR 0 1
32843: NOT
32844: PUSH
32845: LD_VAR 0 2
32849: PUSH
32850: LD_VAR 0 1
32854: IN
32855: NOT
32856: OR
32857: IFFALSE 32861
// exit ;
32859: GO 32915
// for i = 1 to array do
32861: LD_ADDR_VAR 0 4
32865: PUSH
32866: DOUBLE
32867: LD_INT 1
32869: DEC
32870: ST_TO_ADDR
32871: LD_VAR 0 1
32875: PUSH
32876: FOR_TO
32877: IFFALSE 32913
// if value = array [ i ] then
32879: LD_VAR 0 2
32883: PUSH
32884: LD_VAR 0 1
32888: PUSH
32889: LD_VAR 0 4
32893: ARRAY
32894: EQUAL
32895: IFFALSE 32911
// begin result := i ;
32897: LD_ADDR_VAR 0 3
32901: PUSH
32902: LD_VAR 0 4
32906: ST_TO_ADDR
// exit ;
32907: POP
32908: POP
32909: GO 32915
// end ;
32911: GO 32876
32913: POP
32914: POP
// end ;
32915: LD_VAR 0 3
32919: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32920: LD_INT 0
32922: PPUSH
// vc_chassis := chassis ;
32923: LD_ADDR_OWVAR 37
32927: PUSH
32928: LD_VAR 0 1
32932: ST_TO_ADDR
// vc_engine := engine ;
32933: LD_ADDR_OWVAR 39
32937: PUSH
32938: LD_VAR 0 2
32942: ST_TO_ADDR
// vc_control := control ;
32943: LD_ADDR_OWVAR 38
32947: PUSH
32948: LD_VAR 0 3
32952: ST_TO_ADDR
// vc_weapon := weapon ;
32953: LD_ADDR_OWVAR 40
32957: PUSH
32958: LD_VAR 0 4
32962: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32963: LD_ADDR_OWVAR 41
32967: PUSH
32968: LD_VAR 0 5
32972: ST_TO_ADDR
// end ;
32973: LD_VAR 0 6
32977: RET
// export function WantPlant ( unit ) ; var task ; begin
32978: LD_INT 0
32980: PPUSH
32981: PPUSH
// result := false ;
32982: LD_ADDR_VAR 0 2
32986: PUSH
32987: LD_INT 0
32989: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32990: LD_ADDR_VAR 0 3
32994: PUSH
32995: LD_VAR 0 1
32999: PPUSH
33000: CALL_OW 437
33004: ST_TO_ADDR
// if task then
33005: LD_VAR 0 3
33009: IFFALSE 33037
// if task [ 1 ] [ 1 ] = p then
33011: LD_VAR 0 3
33015: PUSH
33016: LD_INT 1
33018: ARRAY
33019: PUSH
33020: LD_INT 1
33022: ARRAY
33023: PUSH
33024: LD_STRING p
33026: EQUAL
33027: IFFALSE 33037
// result := true ;
33029: LD_ADDR_VAR 0 2
33033: PUSH
33034: LD_INT 1
33036: ST_TO_ADDR
// end ;
33037: LD_VAR 0 2
33041: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33042: LD_INT 0
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
// if pos < 1 then
33048: LD_VAR 0 2
33052: PUSH
33053: LD_INT 1
33055: LESS
33056: IFFALSE 33060
// exit ;
33058: GO 33363
// if pos = 1 then
33060: LD_VAR 0 2
33064: PUSH
33065: LD_INT 1
33067: EQUAL
33068: IFFALSE 33101
// result := Replace ( arr , pos [ 1 ] , value ) else
33070: LD_ADDR_VAR 0 4
33074: PUSH
33075: LD_VAR 0 1
33079: PPUSH
33080: LD_VAR 0 2
33084: PUSH
33085: LD_INT 1
33087: ARRAY
33088: PPUSH
33089: LD_VAR 0 3
33093: PPUSH
33094: CALL_OW 1
33098: ST_TO_ADDR
33099: GO 33363
// begin tmp := arr ;
33101: LD_ADDR_VAR 0 6
33105: PUSH
33106: LD_VAR 0 1
33110: ST_TO_ADDR
// s_arr := [ tmp ] ;
33111: LD_ADDR_VAR 0 7
33115: PUSH
33116: LD_VAR 0 6
33120: PUSH
33121: EMPTY
33122: LIST
33123: ST_TO_ADDR
// for i = 1 to pos - 1 do
33124: LD_ADDR_VAR 0 5
33128: PUSH
33129: DOUBLE
33130: LD_INT 1
33132: DEC
33133: ST_TO_ADDR
33134: LD_VAR 0 2
33138: PUSH
33139: LD_INT 1
33141: MINUS
33142: PUSH
33143: FOR_TO
33144: IFFALSE 33189
// begin tmp := tmp [ pos [ i ] ] ;
33146: LD_ADDR_VAR 0 6
33150: PUSH
33151: LD_VAR 0 6
33155: PUSH
33156: LD_VAR 0 2
33160: PUSH
33161: LD_VAR 0 5
33165: ARRAY
33166: ARRAY
33167: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33168: LD_ADDR_VAR 0 7
33172: PUSH
33173: LD_VAR 0 7
33177: PUSH
33178: LD_VAR 0 6
33182: PUSH
33183: EMPTY
33184: LIST
33185: ADD
33186: ST_TO_ADDR
// end ;
33187: GO 33143
33189: POP
33190: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33191: LD_ADDR_VAR 0 6
33195: PUSH
33196: LD_VAR 0 6
33200: PPUSH
33201: LD_VAR 0 2
33205: PUSH
33206: LD_VAR 0 2
33210: ARRAY
33211: PPUSH
33212: LD_VAR 0 3
33216: PPUSH
33217: CALL_OW 1
33221: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33222: LD_ADDR_VAR 0 7
33226: PUSH
33227: LD_VAR 0 7
33231: PPUSH
33232: LD_VAR 0 7
33236: PPUSH
33237: LD_VAR 0 6
33241: PPUSH
33242: CALL_OW 1
33246: ST_TO_ADDR
// for i = s_arr downto 2 do
33247: LD_ADDR_VAR 0 5
33251: PUSH
33252: DOUBLE
33253: LD_VAR 0 7
33257: INC
33258: ST_TO_ADDR
33259: LD_INT 2
33261: PUSH
33262: FOR_DOWNTO
33263: IFFALSE 33347
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33265: LD_ADDR_VAR 0 6
33269: PUSH
33270: LD_VAR 0 7
33274: PUSH
33275: LD_VAR 0 5
33279: PUSH
33280: LD_INT 1
33282: MINUS
33283: ARRAY
33284: PPUSH
33285: LD_VAR 0 2
33289: PUSH
33290: LD_VAR 0 5
33294: PUSH
33295: LD_INT 1
33297: MINUS
33298: ARRAY
33299: PPUSH
33300: LD_VAR 0 7
33304: PUSH
33305: LD_VAR 0 5
33309: ARRAY
33310: PPUSH
33311: CALL_OW 1
33315: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33316: LD_ADDR_VAR 0 7
33320: PUSH
33321: LD_VAR 0 7
33325: PPUSH
33326: LD_VAR 0 5
33330: PUSH
33331: LD_INT 1
33333: MINUS
33334: PPUSH
33335: LD_VAR 0 6
33339: PPUSH
33340: CALL_OW 1
33344: ST_TO_ADDR
// end ;
33345: GO 33262
33347: POP
33348: POP
// result := s_arr [ 1 ] ;
33349: LD_ADDR_VAR 0 4
33353: PUSH
33354: LD_VAR 0 7
33358: PUSH
33359: LD_INT 1
33361: ARRAY
33362: ST_TO_ADDR
// end ; end ;
33363: LD_VAR 0 4
33367: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33368: LD_INT 0
33370: PPUSH
33371: PPUSH
// if not list then
33372: LD_VAR 0 1
33376: NOT
33377: IFFALSE 33381
// exit ;
33379: GO 33472
// i := list [ pos1 ] ;
33381: LD_ADDR_VAR 0 5
33385: PUSH
33386: LD_VAR 0 1
33390: PUSH
33391: LD_VAR 0 2
33395: ARRAY
33396: ST_TO_ADDR
// if not i then
33397: LD_VAR 0 5
33401: NOT
33402: IFFALSE 33406
// exit ;
33404: GO 33472
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33406: LD_ADDR_VAR 0 1
33410: PUSH
33411: LD_VAR 0 1
33415: PPUSH
33416: LD_VAR 0 2
33420: PPUSH
33421: LD_VAR 0 1
33425: PUSH
33426: LD_VAR 0 3
33430: ARRAY
33431: PPUSH
33432: CALL_OW 1
33436: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33437: LD_ADDR_VAR 0 1
33441: PUSH
33442: LD_VAR 0 1
33446: PPUSH
33447: LD_VAR 0 3
33451: PPUSH
33452: LD_VAR 0 5
33456: PPUSH
33457: CALL_OW 1
33461: ST_TO_ADDR
// result := list ;
33462: LD_ADDR_VAR 0 4
33466: PUSH
33467: LD_VAR 0 1
33471: ST_TO_ADDR
// end ;
33472: LD_VAR 0 4
33476: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33477: LD_INT 0
33479: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33480: LD_ADDR_VAR 0 5
33484: PUSH
33485: LD_VAR 0 1
33489: PPUSH
33490: CALL_OW 250
33494: PPUSH
33495: LD_VAR 0 1
33499: PPUSH
33500: CALL_OW 251
33504: PPUSH
33505: LD_VAR 0 2
33509: PPUSH
33510: LD_VAR 0 3
33514: PPUSH
33515: LD_VAR 0 4
33519: PPUSH
33520: CALL 33530 0 5
33524: ST_TO_ADDR
// end ;
33525: LD_VAR 0 5
33529: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33530: LD_INT 0
33532: PPUSH
33533: PPUSH
33534: PPUSH
33535: PPUSH
// if not list then
33536: LD_VAR 0 3
33540: NOT
33541: IFFALSE 33545
// exit ;
33543: GO 33933
// result := [ ] ;
33545: LD_ADDR_VAR 0 6
33549: PUSH
33550: EMPTY
33551: ST_TO_ADDR
// for i in list do
33552: LD_ADDR_VAR 0 7
33556: PUSH
33557: LD_VAR 0 3
33561: PUSH
33562: FOR_IN
33563: IFFALSE 33765
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33565: LD_ADDR_VAR 0 9
33569: PUSH
33570: LD_VAR 0 7
33574: PPUSH
33575: LD_VAR 0 1
33579: PPUSH
33580: LD_VAR 0 2
33584: PPUSH
33585: CALL_OW 297
33589: ST_TO_ADDR
// if not result then
33590: LD_VAR 0 6
33594: NOT
33595: IFFALSE 33621
// result := [ [ i , tmp ] ] else
33597: LD_ADDR_VAR 0 6
33601: PUSH
33602: LD_VAR 0 7
33606: PUSH
33607: LD_VAR 0 9
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: EMPTY
33617: LIST
33618: ST_TO_ADDR
33619: GO 33763
// begin if result [ result ] [ 2 ] < tmp then
33621: LD_VAR 0 6
33625: PUSH
33626: LD_VAR 0 6
33630: ARRAY
33631: PUSH
33632: LD_INT 2
33634: ARRAY
33635: PUSH
33636: LD_VAR 0 9
33640: LESS
33641: IFFALSE 33683
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33643: LD_ADDR_VAR 0 6
33647: PUSH
33648: LD_VAR 0 6
33652: PPUSH
33653: LD_VAR 0 6
33657: PUSH
33658: LD_INT 1
33660: PLUS
33661: PPUSH
33662: LD_VAR 0 7
33666: PUSH
33667: LD_VAR 0 9
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PPUSH
33676: CALL_OW 2
33680: ST_TO_ADDR
33681: GO 33763
// for j = 1 to result do
33683: LD_ADDR_VAR 0 8
33687: PUSH
33688: DOUBLE
33689: LD_INT 1
33691: DEC
33692: ST_TO_ADDR
33693: LD_VAR 0 6
33697: PUSH
33698: FOR_TO
33699: IFFALSE 33761
// begin if tmp < result [ j ] [ 2 ] then
33701: LD_VAR 0 9
33705: PUSH
33706: LD_VAR 0 6
33710: PUSH
33711: LD_VAR 0 8
33715: ARRAY
33716: PUSH
33717: LD_INT 2
33719: ARRAY
33720: LESS
33721: IFFALSE 33759
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33723: LD_ADDR_VAR 0 6
33727: PUSH
33728: LD_VAR 0 6
33732: PPUSH
33733: LD_VAR 0 8
33737: PPUSH
33738: LD_VAR 0 7
33742: PUSH
33743: LD_VAR 0 9
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PPUSH
33752: CALL_OW 2
33756: ST_TO_ADDR
// break ;
33757: GO 33761
// end ; end ;
33759: GO 33698
33761: POP
33762: POP
// end ; end ;
33763: GO 33562
33765: POP
33766: POP
// if result and not asc then
33767: LD_VAR 0 6
33771: PUSH
33772: LD_VAR 0 4
33776: NOT
33777: AND
33778: IFFALSE 33853
// begin tmp := result ;
33780: LD_ADDR_VAR 0 9
33784: PUSH
33785: LD_VAR 0 6
33789: ST_TO_ADDR
// for i = tmp downto 1 do
33790: LD_ADDR_VAR 0 7
33794: PUSH
33795: DOUBLE
33796: LD_VAR 0 9
33800: INC
33801: ST_TO_ADDR
33802: LD_INT 1
33804: PUSH
33805: FOR_DOWNTO
33806: IFFALSE 33851
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33808: LD_ADDR_VAR 0 6
33812: PUSH
33813: LD_VAR 0 6
33817: PPUSH
33818: LD_VAR 0 9
33822: PUSH
33823: LD_VAR 0 7
33827: MINUS
33828: PUSH
33829: LD_INT 1
33831: PLUS
33832: PPUSH
33833: LD_VAR 0 9
33837: PUSH
33838: LD_VAR 0 7
33842: ARRAY
33843: PPUSH
33844: CALL_OW 1
33848: ST_TO_ADDR
33849: GO 33805
33851: POP
33852: POP
// end ; tmp := [ ] ;
33853: LD_ADDR_VAR 0 9
33857: PUSH
33858: EMPTY
33859: ST_TO_ADDR
// if mode then
33860: LD_VAR 0 5
33864: IFFALSE 33933
// begin for i = 1 to result do
33866: LD_ADDR_VAR 0 7
33870: PUSH
33871: DOUBLE
33872: LD_INT 1
33874: DEC
33875: ST_TO_ADDR
33876: LD_VAR 0 6
33880: PUSH
33881: FOR_TO
33882: IFFALSE 33921
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33884: LD_ADDR_VAR 0 9
33888: PUSH
33889: LD_VAR 0 9
33893: PPUSH
33894: LD_VAR 0 7
33898: PPUSH
33899: LD_VAR 0 6
33903: PUSH
33904: LD_VAR 0 7
33908: ARRAY
33909: PUSH
33910: LD_INT 1
33912: ARRAY
33913: PPUSH
33914: CALL_OW 1
33918: ST_TO_ADDR
33919: GO 33881
33921: POP
33922: POP
// result := tmp ;
33923: LD_ADDR_VAR 0 6
33927: PUSH
33928: LD_VAR 0 9
33932: ST_TO_ADDR
// end ; end ;
33933: LD_VAR 0 6
33937: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33938: LD_INT 0
33940: PPUSH
33941: PPUSH
33942: PPUSH
33943: PPUSH
33944: PPUSH
33945: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33946: LD_ADDR_VAR 0 5
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: EMPTY
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
// if not x or not y then
33968: LD_VAR 0 2
33972: NOT
33973: PUSH
33974: LD_VAR 0 3
33978: NOT
33979: OR
33980: IFFALSE 33984
// exit ;
33982: GO 35630
// if not range then
33984: LD_VAR 0 4
33988: NOT
33989: IFFALSE 33999
// range := 10 ;
33991: LD_ADDR_VAR 0 4
33995: PUSH
33996: LD_INT 10
33998: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33999: LD_ADDR_VAR 0 8
34003: PUSH
34004: LD_INT 81
34006: PUSH
34007: LD_VAR 0 1
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 92
34018: PUSH
34019: LD_VAR 0 2
34023: PUSH
34024: LD_VAR 0 3
34028: PUSH
34029: LD_VAR 0 4
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 3
34042: PUSH
34043: LD_INT 21
34045: PUSH
34046: LD_INT 3
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: PPUSH
34062: CALL_OW 69
34066: ST_TO_ADDR
// if not tmp then
34067: LD_VAR 0 8
34071: NOT
34072: IFFALSE 34076
// exit ;
34074: GO 35630
// for i in tmp do
34076: LD_ADDR_VAR 0 6
34080: PUSH
34081: LD_VAR 0 8
34085: PUSH
34086: FOR_IN
34087: IFFALSE 35605
// begin points := [ 0 , 0 , 0 ] ;
34089: LD_ADDR_VAR 0 9
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: ST_TO_ADDR
// bpoints := 1 ;
34108: LD_ADDR_VAR 0 10
34112: PUSH
34113: LD_INT 1
34115: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34116: LD_VAR 0 6
34120: PPUSH
34121: CALL_OW 247
34125: PUSH
34126: LD_INT 1
34128: DOUBLE
34129: EQUAL
34130: IFTRUE 34134
34132: GO 34712
34134: POP
// begin if GetClass ( i ) = 1 then
34135: LD_VAR 0 6
34139: PPUSH
34140: CALL_OW 257
34144: PUSH
34145: LD_INT 1
34147: EQUAL
34148: IFFALSE 34169
// points := [ 10 , 5 , 3 ] ;
34150: LD_ADDR_VAR 0 9
34154: PUSH
34155: LD_INT 10
34157: PUSH
34158: LD_INT 5
34160: PUSH
34161: LD_INT 3
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: LIST
34168: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34169: LD_VAR 0 6
34173: PPUSH
34174: CALL_OW 257
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 4
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: IN
34193: IFFALSE 34214
// points := [ 3 , 2 , 1 ] ;
34195: LD_ADDR_VAR 0 9
34199: PUSH
34200: LD_INT 3
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34214: LD_VAR 0 6
34218: PPUSH
34219: CALL_OW 257
34223: PUSH
34224: LD_INT 5
34226: EQUAL
34227: IFFALSE 34248
// points := [ 130 , 5 , 2 ] ;
34229: LD_ADDR_VAR 0 9
34233: PUSH
34234: LD_INT 130
34236: PUSH
34237: LD_INT 5
34239: PUSH
34240: LD_INT 2
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34248: LD_VAR 0 6
34252: PPUSH
34253: CALL_OW 257
34257: PUSH
34258: LD_INT 8
34260: EQUAL
34261: IFFALSE 34282
// points := [ 35 , 35 , 30 ] ;
34263: LD_ADDR_VAR 0 9
34267: PUSH
34268: LD_INT 35
34270: PUSH
34271: LD_INT 35
34273: PUSH
34274: LD_INT 30
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34282: LD_VAR 0 6
34286: PPUSH
34287: CALL_OW 257
34291: PUSH
34292: LD_INT 9
34294: EQUAL
34295: IFFALSE 34316
// points := [ 20 , 55 , 40 ] ;
34297: LD_ADDR_VAR 0 9
34301: PUSH
34302: LD_INT 20
34304: PUSH
34305: LD_INT 55
34307: PUSH
34308: LD_INT 40
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34316: LD_VAR 0 6
34320: PPUSH
34321: CALL_OW 257
34325: PUSH
34326: LD_INT 12
34328: PUSH
34329: LD_INT 16
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: IN
34336: IFFALSE 34357
// points := [ 5 , 3 , 2 ] ;
34338: LD_ADDR_VAR 0 9
34342: PUSH
34343: LD_INT 5
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34357: LD_VAR 0 6
34361: PPUSH
34362: CALL_OW 257
34366: PUSH
34367: LD_INT 17
34369: EQUAL
34370: IFFALSE 34391
// points := [ 100 , 50 , 75 ] ;
34372: LD_ADDR_VAR 0 9
34376: PUSH
34377: LD_INT 100
34379: PUSH
34380: LD_INT 50
34382: PUSH
34383: LD_INT 75
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34391: LD_VAR 0 6
34395: PPUSH
34396: CALL_OW 257
34400: PUSH
34401: LD_INT 15
34403: EQUAL
34404: IFFALSE 34425
// points := [ 10 , 5 , 3 ] ;
34406: LD_ADDR_VAR 0 9
34410: PUSH
34411: LD_INT 10
34413: PUSH
34414: LD_INT 5
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34425: LD_VAR 0 6
34429: PPUSH
34430: CALL_OW 257
34434: PUSH
34435: LD_INT 14
34437: EQUAL
34438: IFFALSE 34459
// points := [ 10 , 0 , 0 ] ;
34440: LD_ADDR_VAR 0 9
34444: PUSH
34445: LD_INT 10
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34459: LD_VAR 0 6
34463: PPUSH
34464: CALL_OW 257
34468: PUSH
34469: LD_INT 11
34471: EQUAL
34472: IFFALSE 34493
// points := [ 30 , 10 , 5 ] ;
34474: LD_ADDR_VAR 0 9
34478: PUSH
34479: LD_INT 30
34481: PUSH
34482: LD_INT 10
34484: PUSH
34485: LD_INT 5
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34493: LD_VAR 0 1
34497: PPUSH
34498: LD_INT 5
34500: PPUSH
34501: CALL_OW 321
34505: PUSH
34506: LD_INT 2
34508: EQUAL
34509: IFFALSE 34526
// bpoints := bpoints * 1.8 ;
34511: LD_ADDR_VAR 0 10
34515: PUSH
34516: LD_VAR 0 10
34520: PUSH
34521: LD_REAL  1.80000000000000E+0000
34524: MUL
34525: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34526: LD_VAR 0 6
34530: PPUSH
34531: CALL_OW 257
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: LD_INT 4
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: IN
34554: PUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: LD_INT 51
34562: PPUSH
34563: CALL_OW 321
34567: PUSH
34568: LD_INT 2
34570: EQUAL
34571: AND
34572: IFFALSE 34589
// bpoints := bpoints * 1.2 ;
34574: LD_ADDR_VAR 0 10
34578: PUSH
34579: LD_VAR 0 10
34583: PUSH
34584: LD_REAL  1.20000000000000E+0000
34587: MUL
34588: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34589: LD_VAR 0 6
34593: PPUSH
34594: CALL_OW 257
34598: PUSH
34599: LD_INT 5
34601: PUSH
34602: LD_INT 7
34604: PUSH
34605: LD_INT 9
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: IN
34613: PUSH
34614: LD_VAR 0 1
34618: PPUSH
34619: LD_INT 52
34621: PPUSH
34622: CALL_OW 321
34626: PUSH
34627: LD_INT 2
34629: EQUAL
34630: AND
34631: IFFALSE 34648
// bpoints := bpoints * 1.5 ;
34633: LD_ADDR_VAR 0 10
34637: PUSH
34638: LD_VAR 0 10
34642: PUSH
34643: LD_REAL  1.50000000000000E+0000
34646: MUL
34647: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34648: LD_VAR 0 1
34652: PPUSH
34653: LD_INT 66
34655: PPUSH
34656: CALL_OW 321
34660: PUSH
34661: LD_INT 2
34663: EQUAL
34664: IFFALSE 34681
// bpoints := bpoints * 1.1 ;
34666: LD_ADDR_VAR 0 10
34670: PUSH
34671: LD_VAR 0 10
34675: PUSH
34676: LD_REAL  1.10000000000000E+0000
34679: MUL
34680: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34681: LD_ADDR_VAR 0 10
34685: PUSH
34686: LD_VAR 0 10
34690: PUSH
34691: LD_VAR 0 6
34695: PPUSH
34696: LD_INT 1
34698: PPUSH
34699: CALL_OW 259
34703: PUSH
34704: LD_REAL  1.15000000000000E+0000
34707: MUL
34708: MUL
34709: ST_TO_ADDR
// end ; unit_vehicle :
34710: GO 35534
34712: LD_INT 2
34714: DOUBLE
34715: EQUAL
34716: IFTRUE 34720
34718: GO 35522
34720: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34721: LD_VAR 0 6
34725: PPUSH
34726: CALL_OW 264
34730: PUSH
34731: LD_INT 2
34733: PUSH
34734: LD_INT 42
34736: PUSH
34737: LD_INT 24
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: IN
34745: IFFALSE 34766
// points := [ 25 , 5 , 3 ] ;
34747: LD_ADDR_VAR 0 9
34751: PUSH
34752: LD_INT 25
34754: PUSH
34755: LD_INT 5
34757: PUSH
34758: LD_INT 3
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34766: LD_VAR 0 6
34770: PPUSH
34771: CALL_OW 264
34775: PUSH
34776: LD_INT 4
34778: PUSH
34779: LD_INT 43
34781: PUSH
34782: LD_INT 25
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: IN
34790: IFFALSE 34811
// points := [ 40 , 15 , 5 ] ;
34792: LD_ADDR_VAR 0 9
34796: PUSH
34797: LD_INT 40
34799: PUSH
34800: LD_INT 15
34802: PUSH
34803: LD_INT 5
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34811: LD_VAR 0 6
34815: PPUSH
34816: CALL_OW 264
34820: PUSH
34821: LD_INT 3
34823: PUSH
34824: LD_INT 23
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: IN
34831: IFFALSE 34852
// points := [ 7 , 25 , 8 ] ;
34833: LD_ADDR_VAR 0 9
34837: PUSH
34838: LD_INT 7
34840: PUSH
34841: LD_INT 25
34843: PUSH
34844: LD_INT 8
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34852: LD_VAR 0 6
34856: PPUSH
34857: CALL_OW 264
34861: PUSH
34862: LD_INT 5
34864: PUSH
34865: LD_INT 27
34867: PUSH
34868: LD_INT 44
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: LIST
34875: IN
34876: IFFALSE 34897
// points := [ 14 , 50 , 16 ] ;
34878: LD_ADDR_VAR 0 9
34882: PUSH
34883: LD_INT 14
34885: PUSH
34886: LD_INT 50
34888: PUSH
34889: LD_INT 16
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34897: LD_VAR 0 6
34901: PPUSH
34902: CALL_OW 264
34906: PUSH
34907: LD_INT 6
34909: PUSH
34910: LD_INT 46
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: IN
34917: IFFALSE 34938
// points := [ 32 , 120 , 70 ] ;
34919: LD_ADDR_VAR 0 9
34923: PUSH
34924: LD_INT 32
34926: PUSH
34927: LD_INT 120
34929: PUSH
34930: LD_INT 70
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34938: LD_VAR 0 6
34942: PPUSH
34943: CALL_OW 264
34947: PUSH
34948: LD_INT 7
34950: PUSH
34951: LD_INT 28
34953: PUSH
34954: LD_INT 45
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: IN
34962: IFFALSE 34983
// points := [ 35 , 20 , 45 ] ;
34964: LD_ADDR_VAR 0 9
34968: PUSH
34969: LD_INT 35
34971: PUSH
34972: LD_INT 20
34974: PUSH
34975: LD_INT 45
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34983: LD_VAR 0 6
34987: PPUSH
34988: CALL_OW 264
34992: PUSH
34993: LD_INT 47
34995: PUSH
34996: EMPTY
34997: LIST
34998: IN
34999: IFFALSE 35020
// points := [ 67 , 45 , 75 ] ;
35001: LD_ADDR_VAR 0 9
35005: PUSH
35006: LD_INT 67
35008: PUSH
35009: LD_INT 45
35011: PUSH
35012: LD_INT 75
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: LIST
35019: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35020: LD_VAR 0 6
35024: PPUSH
35025: CALL_OW 264
35029: PUSH
35030: LD_INT 26
35032: PUSH
35033: EMPTY
35034: LIST
35035: IN
35036: IFFALSE 35057
// points := [ 120 , 30 , 80 ] ;
35038: LD_ADDR_VAR 0 9
35042: PUSH
35043: LD_INT 120
35045: PUSH
35046: LD_INT 30
35048: PUSH
35049: LD_INT 80
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35057: LD_VAR 0 6
35061: PPUSH
35062: CALL_OW 264
35066: PUSH
35067: LD_INT 22
35069: PUSH
35070: EMPTY
35071: LIST
35072: IN
35073: IFFALSE 35094
// points := [ 40 , 1 , 1 ] ;
35075: LD_ADDR_VAR 0 9
35079: PUSH
35080: LD_INT 40
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35094: LD_VAR 0 6
35098: PPUSH
35099: CALL_OW 264
35103: PUSH
35104: LD_INT 29
35106: PUSH
35107: EMPTY
35108: LIST
35109: IN
35110: IFFALSE 35131
// points := [ 70 , 200 , 400 ] ;
35112: LD_ADDR_VAR 0 9
35116: PUSH
35117: LD_INT 70
35119: PUSH
35120: LD_INT 200
35122: PUSH
35123: LD_INT 400
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35131: LD_VAR 0 6
35135: PPUSH
35136: CALL_OW 264
35140: PUSH
35141: LD_INT 14
35143: PUSH
35144: LD_INT 53
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: IN
35151: IFFALSE 35172
// points := [ 40 , 10 , 20 ] ;
35153: LD_ADDR_VAR 0 9
35157: PUSH
35158: LD_INT 40
35160: PUSH
35161: LD_INT 10
35163: PUSH
35164: LD_INT 20
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35172: LD_VAR 0 6
35176: PPUSH
35177: CALL_OW 264
35181: PUSH
35182: LD_INT 9
35184: PUSH
35185: EMPTY
35186: LIST
35187: IN
35188: IFFALSE 35209
// points := [ 5 , 70 , 20 ] ;
35190: LD_ADDR_VAR 0 9
35194: PUSH
35195: LD_INT 5
35197: PUSH
35198: LD_INT 70
35200: PUSH
35201: LD_INT 20
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35209: LD_VAR 0 6
35213: PPUSH
35214: CALL_OW 264
35218: PUSH
35219: LD_INT 10
35221: PUSH
35222: EMPTY
35223: LIST
35224: IN
35225: IFFALSE 35246
// points := [ 35 , 110 , 70 ] ;
35227: LD_ADDR_VAR 0 9
35231: PUSH
35232: LD_INT 35
35234: PUSH
35235: LD_INT 110
35237: PUSH
35238: LD_INT 70
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35246: LD_VAR 0 6
35250: PPUSH
35251: CALL_OW 265
35255: PUSH
35256: LD_INT 25
35258: EQUAL
35259: IFFALSE 35280
// points := [ 80 , 65 , 100 ] ;
35261: LD_ADDR_VAR 0 9
35265: PUSH
35266: LD_INT 80
35268: PUSH
35269: LD_INT 65
35271: PUSH
35272: LD_INT 100
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: LIST
35279: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35280: LD_VAR 0 6
35284: PPUSH
35285: CALL_OW 263
35289: PUSH
35290: LD_INT 1
35292: EQUAL
35293: IFFALSE 35328
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35295: LD_ADDR_VAR 0 10
35299: PUSH
35300: LD_VAR 0 10
35304: PUSH
35305: LD_VAR 0 6
35309: PPUSH
35310: CALL_OW 311
35314: PPUSH
35315: LD_INT 3
35317: PPUSH
35318: CALL_OW 259
35322: PUSH
35323: LD_INT 4
35325: MUL
35326: MUL
35327: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35328: LD_VAR 0 6
35332: PPUSH
35333: CALL_OW 263
35337: PUSH
35338: LD_INT 2
35340: EQUAL
35341: IFFALSE 35392
// begin j := IsControledBy ( i ) ;
35343: LD_ADDR_VAR 0 7
35347: PUSH
35348: LD_VAR 0 6
35352: PPUSH
35353: CALL_OW 312
35357: ST_TO_ADDR
// if j then
35358: LD_VAR 0 7
35362: IFFALSE 35392
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35364: LD_ADDR_VAR 0 10
35368: PUSH
35369: LD_VAR 0 10
35373: PUSH
35374: LD_VAR 0 7
35378: PPUSH
35379: LD_INT 3
35381: PPUSH
35382: CALL_OW 259
35386: PUSH
35387: LD_INT 3
35389: MUL
35390: MUL
35391: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35392: LD_VAR 0 6
35396: PPUSH
35397: CALL_OW 264
35401: PUSH
35402: LD_INT 5
35404: PUSH
35405: LD_INT 6
35407: PUSH
35408: LD_INT 46
35410: PUSH
35411: LD_INT 44
35413: PUSH
35414: LD_INT 47
35416: PUSH
35417: LD_INT 45
35419: PUSH
35420: LD_INT 28
35422: PUSH
35423: LD_INT 7
35425: PUSH
35426: LD_INT 27
35428: PUSH
35429: LD_INT 29
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: IN
35444: PUSH
35445: LD_VAR 0 1
35449: PPUSH
35450: LD_INT 52
35452: PPUSH
35453: CALL_OW 321
35457: PUSH
35458: LD_INT 2
35460: EQUAL
35461: AND
35462: IFFALSE 35479
// bpoints := bpoints * 1.2 ;
35464: LD_ADDR_VAR 0 10
35468: PUSH
35469: LD_VAR 0 10
35473: PUSH
35474: LD_REAL  1.20000000000000E+0000
35477: MUL
35478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35479: LD_VAR 0 6
35483: PPUSH
35484: CALL_OW 264
35488: PUSH
35489: LD_INT 6
35491: PUSH
35492: LD_INT 46
35494: PUSH
35495: LD_INT 47
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: IN
35503: IFFALSE 35520
// bpoints := bpoints * 1.2 ;
35505: LD_ADDR_VAR 0 10
35509: PUSH
35510: LD_VAR 0 10
35514: PUSH
35515: LD_REAL  1.20000000000000E+0000
35518: MUL
35519: ST_TO_ADDR
// end ; unit_building :
35520: GO 35534
35522: LD_INT 3
35524: DOUBLE
35525: EQUAL
35526: IFTRUE 35530
35528: GO 35533
35530: POP
// ; end ;
35531: GO 35534
35533: POP
// for j = 1 to 3 do
35534: LD_ADDR_VAR 0 7
35538: PUSH
35539: DOUBLE
35540: LD_INT 1
35542: DEC
35543: ST_TO_ADDR
35544: LD_INT 3
35546: PUSH
35547: FOR_TO
35548: IFFALSE 35601
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35550: LD_ADDR_VAR 0 5
35554: PUSH
35555: LD_VAR 0 5
35559: PPUSH
35560: LD_VAR 0 7
35564: PPUSH
35565: LD_VAR 0 5
35569: PUSH
35570: LD_VAR 0 7
35574: ARRAY
35575: PUSH
35576: LD_VAR 0 9
35580: PUSH
35581: LD_VAR 0 7
35585: ARRAY
35586: PUSH
35587: LD_VAR 0 10
35591: MUL
35592: PLUS
35593: PPUSH
35594: CALL_OW 1
35598: ST_TO_ADDR
35599: GO 35547
35601: POP
35602: POP
// end ;
35603: GO 34086
35605: POP
35606: POP
// result := Replace ( result , 4 , tmp ) ;
35607: LD_ADDR_VAR 0 5
35611: PUSH
35612: LD_VAR 0 5
35616: PPUSH
35617: LD_INT 4
35619: PPUSH
35620: LD_VAR 0 8
35624: PPUSH
35625: CALL_OW 1
35629: ST_TO_ADDR
// end ;
35630: LD_VAR 0 5
35634: RET
// export function DangerAtRange ( unit , range ) ; begin
35635: LD_INT 0
35637: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35638: LD_ADDR_VAR 0 3
35642: PUSH
35643: LD_VAR 0 1
35647: PPUSH
35648: CALL_OW 255
35652: PPUSH
35653: LD_VAR 0 1
35657: PPUSH
35658: CALL_OW 250
35662: PPUSH
35663: LD_VAR 0 1
35667: PPUSH
35668: CALL_OW 251
35672: PPUSH
35673: LD_VAR 0 2
35677: PPUSH
35678: CALL 33938 0 4
35682: ST_TO_ADDR
// end ;
35683: LD_VAR 0 3
35687: RET
// export function DangerInArea ( side , area ) ; begin
35688: LD_INT 0
35690: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35691: LD_ADDR_VAR 0 3
35695: PUSH
35696: LD_VAR 0 2
35700: PPUSH
35701: LD_INT 81
35703: PUSH
35704: LD_VAR 0 1
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PPUSH
35713: CALL_OW 70
35717: ST_TO_ADDR
// end ;
35718: LD_VAR 0 3
35722: RET
// export function IsExtension ( b ) ; begin
35723: LD_INT 0
35725: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35726: LD_ADDR_VAR 0 2
35730: PUSH
35731: LD_VAR 0 1
35735: PUSH
35736: LD_INT 23
35738: PUSH
35739: LD_INT 20
35741: PUSH
35742: LD_INT 22
35744: PUSH
35745: LD_INT 17
35747: PUSH
35748: LD_INT 24
35750: PUSH
35751: LD_INT 21
35753: PUSH
35754: LD_INT 19
35756: PUSH
35757: LD_INT 16
35759: PUSH
35760: LD_INT 25
35762: PUSH
35763: LD_INT 18
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: IN
35778: ST_TO_ADDR
// end ;
35779: LD_VAR 0 2
35783: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
35784: LD_INT 0
35786: PPUSH
35787: PPUSH
35788: PPUSH
// result := [ ] ;
35789: LD_ADDR_VAR 0 3
35793: PUSH
35794: EMPTY
35795: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35796: LD_ADDR_VAR 0 4
35800: PUSH
35801: LD_VAR 0 2
35805: PPUSH
35806: LD_INT 21
35808: PUSH
35809: LD_INT 3
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PPUSH
35816: CALL_OW 70
35820: ST_TO_ADDR
// if not tmp then
35821: LD_VAR 0 4
35825: NOT
35826: IFFALSE 35830
// exit ;
35828: GO 35888
// for i in tmp do
35830: LD_ADDR_VAR 0 5
35834: PUSH
35835: LD_VAR 0 4
35839: PUSH
35840: FOR_IN
35841: IFFALSE 35876
// if GetBase ( i ) <> base then
35843: LD_VAR 0 5
35847: PPUSH
35848: CALL_OW 274
35852: PUSH
35853: LD_VAR 0 1
35857: NONEQUAL
35858: IFFALSE 35874
// ComLinkToBase ( base , i ) ;
35860: LD_VAR 0 1
35864: PPUSH
35865: LD_VAR 0 5
35869: PPUSH
35870: CALL_OW 169
35874: GO 35840
35876: POP
35877: POP
// result := tmp ;
35878: LD_ADDR_VAR 0 3
35882: PUSH
35883: LD_VAR 0 4
35887: ST_TO_ADDR
// end ;
35888: LD_VAR 0 3
35892: RET
// export function ComComplete ( unit , b ) ; var i ; begin
35893: LD_INT 0
35895: PPUSH
35896: PPUSH
// if BuildingStatus ( b ) = bs_build then
35897: LD_VAR 0 2
35901: PPUSH
35902: CALL_OW 461
35906: PUSH
35907: LD_INT 1
35909: EQUAL
35910: IFFALSE 35970
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35912: LD_VAR 0 1
35916: PPUSH
35917: LD_STRING h
35919: PUSH
35920: LD_VAR 0 2
35924: PPUSH
35925: CALL_OW 250
35929: PUSH
35930: LD_VAR 0 2
35934: PPUSH
35935: CALL_OW 251
35939: PUSH
35940: LD_VAR 0 2
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: PUSH
35963: EMPTY
35964: LIST
35965: PPUSH
35966: CALL_OW 446
// end ;
35970: LD_VAR 0 3
35974: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35975: LD_INT 0
35977: PPUSH
35978: PPUSH
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35983: LD_VAR 0 1
35987: NOT
35988: PUSH
35989: LD_VAR 0 1
35993: PPUSH
35994: CALL_OW 263
35998: PUSH
35999: LD_INT 2
36001: EQUAL
36002: NOT
36003: OR
36004: IFFALSE 36008
// exit ;
36006: GO 36324
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36008: LD_ADDR_VAR 0 6
36012: PUSH
36013: LD_INT 22
36015: PUSH
36016: LD_VAR 0 1
36020: PPUSH
36021: CALL_OW 255
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: LD_INT 30
36035: PUSH
36036: LD_INT 36
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 34
36045: PUSH
36046: LD_INT 31
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PPUSH
36062: CALL_OW 69
36066: ST_TO_ADDR
// if not tmp then
36067: LD_VAR 0 6
36071: NOT
36072: IFFALSE 36076
// exit ;
36074: GO 36324
// result := [ ] ;
36076: LD_ADDR_VAR 0 2
36080: PUSH
36081: EMPTY
36082: ST_TO_ADDR
// for i in tmp do
36083: LD_ADDR_VAR 0 3
36087: PUSH
36088: LD_VAR 0 6
36092: PUSH
36093: FOR_IN
36094: IFFALSE 36165
// begin t := UnitsInside ( i ) ;
36096: LD_ADDR_VAR 0 4
36100: PUSH
36101: LD_VAR 0 3
36105: PPUSH
36106: CALL_OW 313
36110: ST_TO_ADDR
// if t then
36111: LD_VAR 0 4
36115: IFFALSE 36163
// for j in t do
36117: LD_ADDR_VAR 0 7
36121: PUSH
36122: LD_VAR 0 4
36126: PUSH
36127: FOR_IN
36128: IFFALSE 36161
// result := Insert ( result , result + 1 , j ) ;
36130: LD_ADDR_VAR 0 2
36134: PUSH
36135: LD_VAR 0 2
36139: PPUSH
36140: LD_VAR 0 2
36144: PUSH
36145: LD_INT 1
36147: PLUS
36148: PPUSH
36149: LD_VAR 0 7
36153: PPUSH
36154: CALL_OW 2
36158: ST_TO_ADDR
36159: GO 36127
36161: POP
36162: POP
// end ;
36163: GO 36093
36165: POP
36166: POP
// if not result then
36167: LD_VAR 0 2
36171: NOT
36172: IFFALSE 36176
// exit ;
36174: GO 36324
// mech := result [ 1 ] ;
36176: LD_ADDR_VAR 0 5
36180: PUSH
36181: LD_VAR 0 2
36185: PUSH
36186: LD_INT 1
36188: ARRAY
36189: ST_TO_ADDR
// if result > 1 then
36190: LD_VAR 0 2
36194: PUSH
36195: LD_INT 1
36197: GREATER
36198: IFFALSE 36310
// for i = 2 to result do
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: DOUBLE
36206: LD_INT 2
36208: DEC
36209: ST_TO_ADDR
36210: LD_VAR 0 2
36214: PUSH
36215: FOR_TO
36216: IFFALSE 36308
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36218: LD_ADDR_VAR 0 4
36222: PUSH
36223: LD_VAR 0 2
36227: PUSH
36228: LD_VAR 0 3
36232: ARRAY
36233: PPUSH
36234: LD_INT 3
36236: PPUSH
36237: CALL_OW 259
36241: PUSH
36242: LD_VAR 0 2
36246: PUSH
36247: LD_VAR 0 3
36251: ARRAY
36252: PPUSH
36253: CALL_OW 432
36257: MINUS
36258: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36259: LD_VAR 0 4
36263: PUSH
36264: LD_VAR 0 5
36268: PPUSH
36269: LD_INT 3
36271: PPUSH
36272: CALL_OW 259
36276: PUSH
36277: LD_VAR 0 5
36281: PPUSH
36282: CALL_OW 432
36286: MINUS
36287: GREATEREQUAL
36288: IFFALSE 36306
// mech := result [ i ] ;
36290: LD_ADDR_VAR 0 5
36294: PUSH
36295: LD_VAR 0 2
36299: PUSH
36300: LD_VAR 0 3
36304: ARRAY
36305: ST_TO_ADDR
// end ;
36306: GO 36215
36308: POP
36309: POP
// ComLinkTo ( vehicle , mech ) ;
36310: LD_VAR 0 1
36314: PPUSH
36315: LD_VAR 0 5
36319: PPUSH
36320: CALL_OW 135
// end ;
36324: LD_VAR 0 2
36328: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36329: LD_INT 0
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
36338: PPUSH
36339: PPUSH
36340: PPUSH
36341: PPUSH
36342: PPUSH
36343: PPUSH
// result := [ ] ;
36344: LD_ADDR_VAR 0 7
36348: PUSH
36349: EMPTY
36350: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36351: LD_VAR 0 1
36355: PPUSH
36356: CALL_OW 266
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: IN
36371: NOT
36372: IFFALSE 36376
// exit ;
36374: GO 38007
// if name then
36376: LD_VAR 0 3
36380: IFFALSE 36396
// SetBName ( base_dep , name ) ;
36382: LD_VAR 0 1
36386: PPUSH
36387: LD_VAR 0 3
36391: PPUSH
36392: CALL_OW 500
// base := GetBase ( base_dep ) ;
36396: LD_ADDR_VAR 0 15
36400: PUSH
36401: LD_VAR 0 1
36405: PPUSH
36406: CALL_OW 274
36410: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36411: LD_ADDR_VAR 0 16
36415: PUSH
36416: LD_VAR 0 1
36420: PPUSH
36421: CALL_OW 255
36425: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36426: LD_ADDR_VAR 0 17
36430: PUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: CALL_OW 248
36440: ST_TO_ADDR
// if sources then
36441: LD_VAR 0 5
36445: IFFALSE 36492
// for i = 1 to 3 do
36447: LD_ADDR_VAR 0 8
36451: PUSH
36452: DOUBLE
36453: LD_INT 1
36455: DEC
36456: ST_TO_ADDR
36457: LD_INT 3
36459: PUSH
36460: FOR_TO
36461: IFFALSE 36490
// AddResourceType ( base , i , sources [ i ] ) ;
36463: LD_VAR 0 15
36467: PPUSH
36468: LD_VAR 0 8
36472: PPUSH
36473: LD_VAR 0 5
36477: PUSH
36478: LD_VAR 0 8
36482: ARRAY
36483: PPUSH
36484: CALL_OW 276
36488: GO 36460
36490: POP
36491: POP
// buildings := GetBaseBuildings ( base , area ) ;
36492: LD_ADDR_VAR 0 18
36496: PUSH
36497: LD_VAR 0 15
36501: PPUSH
36502: LD_VAR 0 2
36506: PPUSH
36507: CALL 35784 0 2
36511: ST_TO_ADDR
// InitHc ;
36512: CALL_OW 19
// InitUc ;
36516: CALL_OW 18
// uc_side := side ;
36520: LD_ADDR_OWVAR 20
36524: PUSH
36525: LD_VAR 0 16
36529: ST_TO_ADDR
// uc_nation := nation ;
36530: LD_ADDR_OWVAR 21
36534: PUSH
36535: LD_VAR 0 17
36539: ST_TO_ADDR
// if buildings then
36540: LD_VAR 0 18
36544: IFFALSE 37866
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36546: LD_ADDR_VAR 0 19
36550: PUSH
36551: LD_VAR 0 18
36555: PPUSH
36556: LD_INT 2
36558: PUSH
36559: LD_INT 30
36561: PUSH
36562: LD_INT 29
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 30
36571: PUSH
36572: LD_INT 30
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: PPUSH
36584: CALL_OW 72
36588: ST_TO_ADDR
// if tmp then
36589: LD_VAR 0 19
36593: IFFALSE 36641
// for i in tmp do
36595: LD_ADDR_VAR 0 8
36599: PUSH
36600: LD_VAR 0 19
36604: PUSH
36605: FOR_IN
36606: IFFALSE 36639
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36608: LD_VAR 0 8
36612: PPUSH
36613: CALL_OW 250
36617: PPUSH
36618: LD_VAR 0 8
36622: PPUSH
36623: CALL_OW 251
36627: PPUSH
36628: LD_VAR 0 16
36632: PPUSH
36633: CALL_OW 441
36637: GO 36605
36639: POP
36640: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36641: LD_VAR 0 18
36645: PPUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 30
36651: PUSH
36652: LD_INT 32
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 30
36661: PUSH
36662: LD_INT 33
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: PPUSH
36674: CALL_OW 72
36678: IFFALSE 36766
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36680: LD_ADDR_VAR 0 8
36684: PUSH
36685: LD_VAR 0 18
36689: PPUSH
36690: LD_INT 2
36692: PUSH
36693: LD_INT 30
36695: PUSH
36696: LD_INT 32
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 30
36705: PUSH
36706: LD_INT 33
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: PPUSH
36718: CALL_OW 72
36722: PUSH
36723: FOR_IN
36724: IFFALSE 36764
// begin if not GetBWeapon ( i ) then
36726: LD_VAR 0 8
36730: PPUSH
36731: CALL_OW 269
36735: NOT
36736: IFFALSE 36762
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36738: LD_VAR 0 8
36742: PPUSH
36743: LD_VAR 0 8
36747: PPUSH
36748: LD_VAR 0 2
36752: PPUSH
36753: CALL 38012 0 2
36757: PPUSH
36758: CALL_OW 431
// end ;
36762: GO 36723
36764: POP
36765: POP
// end ; for i = 1 to personel do
36766: LD_ADDR_VAR 0 8
36770: PUSH
36771: DOUBLE
36772: LD_INT 1
36774: DEC
36775: ST_TO_ADDR
36776: LD_VAR 0 6
36780: PUSH
36781: FOR_TO
36782: IFFALSE 37846
// begin if i > 4 then
36784: LD_VAR 0 8
36788: PUSH
36789: LD_INT 4
36791: GREATER
36792: IFFALSE 36796
// break ;
36794: GO 37846
// case i of 1 :
36796: LD_VAR 0 8
36800: PUSH
36801: LD_INT 1
36803: DOUBLE
36804: EQUAL
36805: IFTRUE 36809
36807: GO 36889
36809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36810: LD_ADDR_VAR 0 12
36814: PUSH
36815: LD_VAR 0 18
36819: PPUSH
36820: LD_INT 22
36822: PUSH
36823: LD_VAR 0 16
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 58
36834: PUSH
36835: EMPTY
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 30
36843: PUSH
36844: LD_INT 32
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 30
36853: PUSH
36854: LD_INT 4
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 30
36863: PUSH
36864: LD_INT 5
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: LIST
36881: PPUSH
36882: CALL_OW 72
36886: ST_TO_ADDR
36887: GO 37111
36889: LD_INT 2
36891: DOUBLE
36892: EQUAL
36893: IFTRUE 36897
36895: GO 36959
36897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36898: LD_ADDR_VAR 0 12
36902: PUSH
36903: LD_VAR 0 18
36907: PPUSH
36908: LD_INT 22
36910: PUSH
36911: LD_VAR 0 16
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: LD_INT 30
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 30
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PPUSH
36952: CALL_OW 72
36956: ST_TO_ADDR
36957: GO 37111
36959: LD_INT 3
36961: DOUBLE
36962: EQUAL
36963: IFTRUE 36967
36965: GO 37029
36967: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36968: LD_ADDR_VAR 0 12
36972: PUSH
36973: LD_VAR 0 18
36977: PPUSH
36978: LD_INT 22
36980: PUSH
36981: LD_VAR 0 16
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 30
36995: PUSH
36996: LD_INT 2
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 30
37005: PUSH
37006: LD_INT 3
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PPUSH
37022: CALL_OW 72
37026: ST_TO_ADDR
37027: GO 37111
37029: LD_INT 4
37031: DOUBLE
37032: EQUAL
37033: IFTRUE 37037
37035: GO 37110
37037: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37038: LD_ADDR_VAR 0 12
37042: PUSH
37043: LD_VAR 0 18
37047: PPUSH
37048: LD_INT 22
37050: PUSH
37051: LD_VAR 0 16
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: LD_INT 30
37065: PUSH
37066: LD_INT 6
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 30
37075: PUSH
37076: LD_INT 7
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 30
37085: PUSH
37086: LD_INT 8
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PPUSH
37103: CALL_OW 72
37107: ST_TO_ADDR
37108: GO 37111
37110: POP
// if i = 1 then
37111: LD_VAR 0 8
37115: PUSH
37116: LD_INT 1
37118: EQUAL
37119: IFFALSE 37230
// begin tmp := [ ] ;
37121: LD_ADDR_VAR 0 19
37125: PUSH
37126: EMPTY
37127: ST_TO_ADDR
// for j in f do
37128: LD_ADDR_VAR 0 9
37132: PUSH
37133: LD_VAR 0 12
37137: PUSH
37138: FOR_IN
37139: IFFALSE 37212
// if GetBType ( j ) = b_bunker then
37141: LD_VAR 0 9
37145: PPUSH
37146: CALL_OW 266
37150: PUSH
37151: LD_INT 32
37153: EQUAL
37154: IFFALSE 37181
// tmp := Insert ( tmp , 1 , j ) else
37156: LD_ADDR_VAR 0 19
37160: PUSH
37161: LD_VAR 0 19
37165: PPUSH
37166: LD_INT 1
37168: PPUSH
37169: LD_VAR 0 9
37173: PPUSH
37174: CALL_OW 2
37178: ST_TO_ADDR
37179: GO 37210
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37181: LD_ADDR_VAR 0 19
37185: PUSH
37186: LD_VAR 0 19
37190: PPUSH
37191: LD_VAR 0 19
37195: PUSH
37196: LD_INT 1
37198: PLUS
37199: PPUSH
37200: LD_VAR 0 9
37204: PPUSH
37205: CALL_OW 2
37209: ST_TO_ADDR
37210: GO 37138
37212: POP
37213: POP
// if tmp then
37214: LD_VAR 0 19
37218: IFFALSE 37230
// f := tmp ;
37220: LD_ADDR_VAR 0 12
37224: PUSH
37225: LD_VAR 0 19
37229: ST_TO_ADDR
// end ; x := personel [ i ] ;
37230: LD_ADDR_VAR 0 13
37234: PUSH
37235: LD_VAR 0 6
37239: PUSH
37240: LD_VAR 0 8
37244: ARRAY
37245: ST_TO_ADDR
// if x = - 1 then
37246: LD_VAR 0 13
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: EQUAL
37255: IFFALSE 37464
// begin for j in f do
37257: LD_ADDR_VAR 0 9
37261: PUSH
37262: LD_VAR 0 12
37266: PUSH
37267: FOR_IN
37268: IFFALSE 37460
// repeat InitHc ;
37270: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37274: LD_VAR 0 9
37278: PPUSH
37279: CALL_OW 266
37283: PUSH
37284: LD_INT 5
37286: EQUAL
37287: IFFALSE 37357
// begin if UnitsInside ( j ) < 3 then
37289: LD_VAR 0 9
37293: PPUSH
37294: CALL_OW 313
37298: PUSH
37299: LD_INT 3
37301: LESS
37302: IFFALSE 37338
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37304: LD_INT 0
37306: PPUSH
37307: LD_INT 5
37309: PUSH
37310: LD_INT 8
37312: PUSH
37313: LD_INT 9
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: PUSH
37321: LD_VAR 0 17
37325: ARRAY
37326: PPUSH
37327: LD_VAR 0 4
37331: PPUSH
37332: CALL_OW 380
37336: GO 37355
// PrepareHuman ( false , i , skill ) ;
37338: LD_INT 0
37340: PPUSH
37341: LD_VAR 0 8
37345: PPUSH
37346: LD_VAR 0 4
37350: PPUSH
37351: CALL_OW 380
// end else
37355: GO 37374
// PrepareHuman ( false , i , skill ) ;
37357: LD_INT 0
37359: PPUSH
37360: LD_VAR 0 8
37364: PPUSH
37365: LD_VAR 0 4
37369: PPUSH
37370: CALL_OW 380
// un := CreateHuman ;
37374: LD_ADDR_VAR 0 14
37378: PUSH
37379: CALL_OW 44
37383: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37384: LD_ADDR_VAR 0 7
37388: PUSH
37389: LD_VAR 0 7
37393: PPUSH
37394: LD_INT 1
37396: PPUSH
37397: LD_VAR 0 14
37401: PPUSH
37402: CALL_OW 2
37406: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37407: LD_VAR 0 14
37411: PPUSH
37412: LD_VAR 0 9
37416: PPUSH
37417: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37421: LD_VAR 0 9
37425: PPUSH
37426: CALL_OW 313
37430: PUSH
37431: LD_INT 6
37433: EQUAL
37434: PUSH
37435: LD_VAR 0 9
37439: PPUSH
37440: CALL_OW 266
37444: PUSH
37445: LD_INT 32
37447: PUSH
37448: LD_INT 31
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: IN
37455: OR
37456: IFFALSE 37270
37458: GO 37267
37460: POP
37461: POP
// end else
37462: GO 37844
// for j = 1 to x do
37464: LD_ADDR_VAR 0 9
37468: PUSH
37469: DOUBLE
37470: LD_INT 1
37472: DEC
37473: ST_TO_ADDR
37474: LD_VAR 0 13
37478: PUSH
37479: FOR_TO
37480: IFFALSE 37842
// begin InitHc ;
37482: CALL_OW 19
// if not f then
37486: LD_VAR 0 12
37490: NOT
37491: IFFALSE 37580
// begin PrepareHuman ( false , i , skill ) ;
37493: LD_INT 0
37495: PPUSH
37496: LD_VAR 0 8
37500: PPUSH
37501: LD_VAR 0 4
37505: PPUSH
37506: CALL_OW 380
// un := CreateHuman ;
37510: LD_ADDR_VAR 0 14
37514: PUSH
37515: CALL_OW 44
37519: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37520: LD_ADDR_VAR 0 7
37524: PUSH
37525: LD_VAR 0 7
37529: PPUSH
37530: LD_INT 1
37532: PPUSH
37533: LD_VAR 0 14
37537: PPUSH
37538: CALL_OW 2
37542: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37543: LD_VAR 0 14
37547: PPUSH
37548: LD_VAR 0 1
37552: PPUSH
37553: CALL_OW 250
37557: PPUSH
37558: LD_VAR 0 1
37562: PPUSH
37563: CALL_OW 251
37567: PPUSH
37568: LD_INT 10
37570: PPUSH
37571: LD_INT 0
37573: PPUSH
37574: CALL_OW 50
// continue ;
37578: GO 37479
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37580: LD_VAR 0 12
37584: PUSH
37585: LD_INT 1
37587: ARRAY
37588: PPUSH
37589: CALL_OW 313
37593: PUSH
37594: LD_VAR 0 12
37598: PUSH
37599: LD_INT 1
37601: ARRAY
37602: PPUSH
37603: CALL_OW 266
37607: PUSH
37608: LD_INT 32
37610: PUSH
37611: LD_INT 31
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: IN
37618: AND
37619: PUSH
37620: LD_VAR 0 12
37624: PUSH
37625: LD_INT 1
37627: ARRAY
37628: PPUSH
37629: CALL_OW 313
37633: PUSH
37634: LD_INT 6
37636: EQUAL
37637: OR
37638: IFFALSE 37658
// f := Delete ( f , 1 ) ;
37640: LD_ADDR_VAR 0 12
37644: PUSH
37645: LD_VAR 0 12
37649: PPUSH
37650: LD_INT 1
37652: PPUSH
37653: CALL_OW 3
37657: ST_TO_ADDR
// if not f then
37658: LD_VAR 0 12
37662: NOT
37663: IFFALSE 37681
// begin x := x + 2 ;
37665: LD_ADDR_VAR 0 13
37669: PUSH
37670: LD_VAR 0 13
37674: PUSH
37675: LD_INT 2
37677: PLUS
37678: ST_TO_ADDR
// continue ;
37679: GO 37479
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37681: LD_VAR 0 12
37685: PUSH
37686: LD_INT 1
37688: ARRAY
37689: PPUSH
37690: CALL_OW 266
37694: PUSH
37695: LD_INT 5
37697: EQUAL
37698: IFFALSE 37772
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37700: LD_VAR 0 12
37704: PUSH
37705: LD_INT 1
37707: ARRAY
37708: PPUSH
37709: CALL_OW 313
37713: PUSH
37714: LD_INT 3
37716: LESS
37717: IFFALSE 37753
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37719: LD_INT 0
37721: PPUSH
37722: LD_INT 5
37724: PUSH
37725: LD_INT 8
37727: PUSH
37728: LD_INT 9
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: PUSH
37736: LD_VAR 0 17
37740: ARRAY
37741: PPUSH
37742: LD_VAR 0 4
37746: PPUSH
37747: CALL_OW 380
37751: GO 37770
// PrepareHuman ( false , i , skill ) ;
37753: LD_INT 0
37755: PPUSH
37756: LD_VAR 0 8
37760: PPUSH
37761: LD_VAR 0 4
37765: PPUSH
37766: CALL_OW 380
// end else
37770: GO 37789
// PrepareHuman ( false , i , skill ) ;
37772: LD_INT 0
37774: PPUSH
37775: LD_VAR 0 8
37779: PPUSH
37780: LD_VAR 0 4
37784: PPUSH
37785: CALL_OW 380
// un := CreateHuman ;
37789: LD_ADDR_VAR 0 14
37793: PUSH
37794: CALL_OW 44
37798: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37799: LD_ADDR_VAR 0 7
37803: PUSH
37804: LD_VAR 0 7
37808: PPUSH
37809: LD_INT 1
37811: PPUSH
37812: LD_VAR 0 14
37816: PPUSH
37817: CALL_OW 2
37821: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37822: LD_VAR 0 14
37826: PPUSH
37827: LD_VAR 0 12
37831: PUSH
37832: LD_INT 1
37834: ARRAY
37835: PPUSH
37836: CALL_OW 52
// end ;
37840: GO 37479
37842: POP
37843: POP
// end ;
37844: GO 36781
37846: POP
37847: POP
// result := result ^ buildings ;
37848: LD_ADDR_VAR 0 7
37852: PUSH
37853: LD_VAR 0 7
37857: PUSH
37858: LD_VAR 0 18
37862: ADD
37863: ST_TO_ADDR
// end else
37864: GO 38007
// begin for i = 1 to personel do
37866: LD_ADDR_VAR 0 8
37870: PUSH
37871: DOUBLE
37872: LD_INT 1
37874: DEC
37875: ST_TO_ADDR
37876: LD_VAR 0 6
37880: PUSH
37881: FOR_TO
37882: IFFALSE 38005
// begin if i > 4 then
37884: LD_VAR 0 8
37888: PUSH
37889: LD_INT 4
37891: GREATER
37892: IFFALSE 37896
// break ;
37894: GO 38005
// x := personel [ i ] ;
37896: LD_ADDR_VAR 0 13
37900: PUSH
37901: LD_VAR 0 6
37905: PUSH
37906: LD_VAR 0 8
37910: ARRAY
37911: ST_TO_ADDR
// if x = - 1 then
37912: LD_VAR 0 13
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: EQUAL
37921: IFFALSE 37925
// continue ;
37923: GO 37881
// PrepareHuman ( false , i , skill ) ;
37925: LD_INT 0
37927: PPUSH
37928: LD_VAR 0 8
37932: PPUSH
37933: LD_VAR 0 4
37937: PPUSH
37938: CALL_OW 380
// un := CreateHuman ;
37942: LD_ADDR_VAR 0 14
37946: PUSH
37947: CALL_OW 44
37951: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37952: LD_VAR 0 14
37956: PPUSH
37957: LD_VAR 0 1
37961: PPUSH
37962: CALL_OW 250
37966: PPUSH
37967: LD_VAR 0 1
37971: PPUSH
37972: CALL_OW 251
37976: PPUSH
37977: LD_INT 10
37979: PPUSH
37980: LD_INT 0
37982: PPUSH
37983: CALL_OW 50
// result := result ^ un ;
37987: LD_ADDR_VAR 0 7
37991: PUSH
37992: LD_VAR 0 7
37996: PUSH
37997: LD_VAR 0 14
38001: ADD
38002: ST_TO_ADDR
// end ;
38003: GO 37881
38005: POP
38006: POP
// end ; end ;
38007: LD_VAR 0 7
38011: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38012: LD_INT 0
38014: PPUSH
38015: PPUSH
38016: PPUSH
38017: PPUSH
38018: PPUSH
38019: PPUSH
38020: PPUSH
38021: PPUSH
38022: PPUSH
38023: PPUSH
38024: PPUSH
38025: PPUSH
38026: PPUSH
38027: PPUSH
38028: PPUSH
38029: PPUSH
// result := false ;
38030: LD_ADDR_VAR 0 3
38034: PUSH
38035: LD_INT 0
38037: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38038: LD_VAR 0 1
38042: NOT
38043: PUSH
38044: LD_VAR 0 1
38048: PPUSH
38049: CALL_OW 266
38053: PUSH
38054: LD_INT 32
38056: PUSH
38057: LD_INT 33
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: IN
38064: NOT
38065: OR
38066: IFFALSE 38070
// exit ;
38068: GO 39206
// nat := GetNation ( tower ) ;
38070: LD_ADDR_VAR 0 12
38074: PUSH
38075: LD_VAR 0 1
38079: PPUSH
38080: CALL_OW 248
38084: ST_TO_ADDR
// side := GetSide ( tower ) ;
38085: LD_ADDR_VAR 0 16
38089: PUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL_OW 255
38099: ST_TO_ADDR
// x := GetX ( tower ) ;
38100: LD_ADDR_VAR 0 10
38104: PUSH
38105: LD_VAR 0 1
38109: PPUSH
38110: CALL_OW 250
38114: ST_TO_ADDR
// y := GetY ( tower ) ;
38115: LD_ADDR_VAR 0 11
38119: PUSH
38120: LD_VAR 0 1
38124: PPUSH
38125: CALL_OW 251
38129: ST_TO_ADDR
// if not x or not y then
38130: LD_VAR 0 10
38134: NOT
38135: PUSH
38136: LD_VAR 0 11
38140: NOT
38141: OR
38142: IFFALSE 38146
// exit ;
38144: GO 39206
// weapon := 0 ;
38146: LD_ADDR_VAR 0 18
38150: PUSH
38151: LD_INT 0
38153: ST_TO_ADDR
// fac_list := [ ] ;
38154: LD_ADDR_VAR 0 17
38158: PUSH
38159: EMPTY
38160: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38161: LD_ADDR_VAR 0 6
38165: PUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL_OW 274
38175: PPUSH
38176: LD_VAR 0 2
38180: PPUSH
38181: CALL 35784 0 2
38185: PPUSH
38186: LD_INT 30
38188: PUSH
38189: LD_INT 3
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PPUSH
38196: CALL_OW 72
38200: ST_TO_ADDR
// if not factories then
38201: LD_VAR 0 6
38205: NOT
38206: IFFALSE 38210
// exit ;
38208: GO 39206
// for i in factories do
38210: LD_ADDR_VAR 0 8
38214: PUSH
38215: LD_VAR 0 6
38219: PUSH
38220: FOR_IN
38221: IFFALSE 38246
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38223: LD_ADDR_VAR 0 17
38227: PUSH
38228: LD_VAR 0 17
38232: PUSH
38233: LD_VAR 0 8
38237: PPUSH
38238: CALL_OW 478
38242: UNION
38243: ST_TO_ADDR
38244: GO 38220
38246: POP
38247: POP
// if not fac_list then
38248: LD_VAR 0 17
38252: NOT
38253: IFFALSE 38257
// exit ;
38255: GO 39206
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38257: LD_ADDR_VAR 0 5
38261: PUSH
38262: LD_INT 4
38264: PUSH
38265: LD_INT 5
38267: PUSH
38268: LD_INT 9
38270: PUSH
38271: LD_INT 10
38273: PUSH
38274: LD_INT 6
38276: PUSH
38277: LD_INT 7
38279: PUSH
38280: LD_INT 11
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 27
38294: PUSH
38295: LD_INT 28
38297: PUSH
38298: LD_INT 26
38300: PUSH
38301: LD_INT 30
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 43
38312: PUSH
38313: LD_INT 44
38315: PUSH
38316: LD_INT 46
38318: PUSH
38319: LD_INT 45
38321: PUSH
38322: LD_INT 47
38324: PUSH
38325: LD_INT 49
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: PUSH
38341: LD_VAR 0 12
38345: ARRAY
38346: ST_TO_ADDR
// for i in list do
38347: LD_ADDR_VAR 0 8
38351: PUSH
38352: LD_VAR 0 5
38356: PUSH
38357: FOR_IN
38358: IFFALSE 38391
// if not i in fac_list then
38360: LD_VAR 0 8
38364: PUSH
38365: LD_VAR 0 17
38369: IN
38370: NOT
38371: IFFALSE 38389
// list := list diff i ;
38373: LD_ADDR_VAR 0 5
38377: PUSH
38378: LD_VAR 0 5
38382: PUSH
38383: LD_VAR 0 8
38387: DIFF
38388: ST_TO_ADDR
38389: GO 38357
38391: POP
38392: POP
// if not list then
38393: LD_VAR 0 5
38397: NOT
38398: IFFALSE 38402
// exit ;
38400: GO 39206
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38402: LD_VAR 0 12
38406: PUSH
38407: LD_INT 3
38409: EQUAL
38410: PUSH
38411: LD_INT 49
38413: PUSH
38414: LD_VAR 0 5
38418: IN
38419: AND
38420: PUSH
38421: LD_INT 31
38423: PPUSH
38424: LD_VAR 0 16
38428: PPUSH
38429: CALL_OW 321
38433: PUSH
38434: LD_INT 2
38436: EQUAL
38437: AND
38438: IFFALSE 38498
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38440: LD_INT 22
38442: PUSH
38443: LD_VAR 0 16
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 35
38454: PUSH
38455: LD_INT 49
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 91
38464: PUSH
38465: LD_VAR 0 1
38469: PUSH
38470: LD_INT 10
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: PPUSH
38483: CALL_OW 69
38487: NOT
38488: IFFALSE 38498
// weapon := ru_time_lapser ;
38490: LD_ADDR_VAR 0 18
38494: PUSH
38495: LD_INT 49
38497: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38498: LD_VAR 0 12
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: IN
38513: PUSH
38514: LD_INT 11
38516: PUSH
38517: LD_VAR 0 5
38521: IN
38522: PUSH
38523: LD_INT 30
38525: PUSH
38526: LD_VAR 0 5
38530: IN
38531: OR
38532: AND
38533: PUSH
38534: LD_INT 6
38536: PPUSH
38537: LD_VAR 0 16
38541: PPUSH
38542: CALL_OW 321
38546: PUSH
38547: LD_INT 2
38549: EQUAL
38550: AND
38551: IFFALSE 38716
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38553: LD_INT 22
38555: PUSH
38556: LD_VAR 0 16
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: LD_INT 35
38570: PUSH
38571: LD_INT 11
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 35
38580: PUSH
38581: LD_INT 30
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 91
38595: PUSH
38596: LD_VAR 0 1
38600: PUSH
38601: LD_INT 18
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: PPUSH
38614: CALL_OW 69
38618: NOT
38619: PUSH
38620: LD_INT 22
38622: PUSH
38623: LD_VAR 0 16
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: LD_INT 30
38637: PUSH
38638: LD_INT 32
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 30
38647: PUSH
38648: LD_INT 33
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 91
38662: PUSH
38663: LD_VAR 0 1
38667: PUSH
38668: LD_INT 12
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: PPUSH
38684: CALL_OW 69
38688: PUSH
38689: LD_INT 2
38691: GREATER
38692: AND
38693: IFFALSE 38716
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38695: LD_ADDR_VAR 0 18
38699: PUSH
38700: LD_INT 11
38702: PUSH
38703: LD_INT 30
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_VAR 0 12
38714: ARRAY
38715: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38716: LD_VAR 0 18
38720: NOT
38721: PUSH
38722: LD_INT 40
38724: PPUSH
38725: LD_VAR 0 16
38729: PPUSH
38730: CALL_OW 321
38734: PUSH
38735: LD_INT 2
38737: EQUAL
38738: AND
38739: PUSH
38740: LD_INT 7
38742: PUSH
38743: LD_VAR 0 5
38747: IN
38748: PUSH
38749: LD_INT 28
38751: PUSH
38752: LD_VAR 0 5
38756: IN
38757: OR
38758: PUSH
38759: LD_INT 45
38761: PUSH
38762: LD_VAR 0 5
38766: IN
38767: OR
38768: AND
38769: IFFALSE 39023
// begin hex := GetHexInfo ( x , y ) ;
38771: LD_ADDR_VAR 0 4
38775: PUSH
38776: LD_VAR 0 10
38780: PPUSH
38781: LD_VAR 0 11
38785: PPUSH
38786: CALL_OW 546
38790: ST_TO_ADDR
// if hex [ 1 ] then
38791: LD_VAR 0 4
38795: PUSH
38796: LD_INT 1
38798: ARRAY
38799: IFFALSE 38803
// exit ;
38801: GO 39206
// height := hex [ 2 ] ;
38803: LD_ADDR_VAR 0 15
38807: PUSH
38808: LD_VAR 0 4
38812: PUSH
38813: LD_INT 2
38815: ARRAY
38816: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38817: LD_ADDR_VAR 0 14
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: LD_INT 5
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: ST_TO_ADDR
// for i in tmp do
38840: LD_ADDR_VAR 0 8
38844: PUSH
38845: LD_VAR 0 14
38849: PUSH
38850: FOR_IN
38851: IFFALSE 39021
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38853: LD_ADDR_VAR 0 9
38857: PUSH
38858: LD_VAR 0 10
38862: PPUSH
38863: LD_VAR 0 8
38867: PPUSH
38868: LD_INT 5
38870: PPUSH
38871: CALL_OW 272
38875: PUSH
38876: LD_VAR 0 11
38880: PPUSH
38881: LD_VAR 0 8
38885: PPUSH
38886: LD_INT 5
38888: PPUSH
38889: CALL_OW 273
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38898: LD_VAR 0 9
38902: PUSH
38903: LD_INT 1
38905: ARRAY
38906: PPUSH
38907: LD_VAR 0 9
38911: PUSH
38912: LD_INT 2
38914: ARRAY
38915: PPUSH
38916: CALL_OW 488
38920: IFFALSE 39019
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38922: LD_ADDR_VAR 0 4
38926: PUSH
38927: LD_VAR 0 9
38931: PUSH
38932: LD_INT 1
38934: ARRAY
38935: PPUSH
38936: LD_VAR 0 9
38940: PUSH
38941: LD_INT 2
38943: ARRAY
38944: PPUSH
38945: CALL_OW 546
38949: ST_TO_ADDR
// if hex [ 1 ] then
38950: LD_VAR 0 4
38954: PUSH
38955: LD_INT 1
38957: ARRAY
38958: IFFALSE 38962
// continue ;
38960: GO 38850
// h := hex [ 2 ] ;
38962: LD_ADDR_VAR 0 13
38966: PUSH
38967: LD_VAR 0 4
38971: PUSH
38972: LD_INT 2
38974: ARRAY
38975: ST_TO_ADDR
// if h + 7 < height then
38976: LD_VAR 0 13
38980: PUSH
38981: LD_INT 7
38983: PLUS
38984: PUSH
38985: LD_VAR 0 15
38989: LESS
38990: IFFALSE 39019
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38992: LD_ADDR_VAR 0 18
38996: PUSH
38997: LD_INT 7
38999: PUSH
39000: LD_INT 28
39002: PUSH
39003: LD_INT 45
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: PUSH
39011: LD_VAR 0 12
39015: ARRAY
39016: ST_TO_ADDR
// break ;
39017: GO 39021
// end ; end ; end ;
39019: GO 38850
39021: POP
39022: POP
// end ; if not weapon then
39023: LD_VAR 0 18
39027: NOT
39028: IFFALSE 39088
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39030: LD_ADDR_VAR 0 5
39034: PUSH
39035: LD_VAR 0 5
39039: PUSH
39040: LD_INT 11
39042: PUSH
39043: LD_INT 30
39045: PUSH
39046: LD_INT 49
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: LIST
39053: DIFF
39054: ST_TO_ADDR
// if not list then
39055: LD_VAR 0 5
39059: NOT
39060: IFFALSE 39064
// exit ;
39062: GO 39206
// weapon := list [ rand ( 1 , list ) ] ;
39064: LD_ADDR_VAR 0 18
39068: PUSH
39069: LD_VAR 0 5
39073: PUSH
39074: LD_INT 1
39076: PPUSH
39077: LD_VAR 0 5
39081: PPUSH
39082: CALL_OW 12
39086: ARRAY
39087: ST_TO_ADDR
// end ; if weapon then
39088: LD_VAR 0 18
39092: IFFALSE 39206
// begin tmp := CostOfWeapon ( weapon ) ;
39094: LD_ADDR_VAR 0 14
39098: PUSH
39099: LD_VAR 0 18
39103: PPUSH
39104: CALL_OW 451
39108: ST_TO_ADDR
// j := GetBase ( tower ) ;
39109: LD_ADDR_VAR 0 9
39113: PUSH
39114: LD_VAR 0 1
39118: PPUSH
39119: CALL_OW 274
39123: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39124: LD_VAR 0 9
39128: PPUSH
39129: LD_INT 1
39131: PPUSH
39132: CALL_OW 275
39136: PUSH
39137: LD_VAR 0 14
39141: PUSH
39142: LD_INT 1
39144: ARRAY
39145: GREATEREQUAL
39146: PUSH
39147: LD_VAR 0 9
39151: PPUSH
39152: LD_INT 2
39154: PPUSH
39155: CALL_OW 275
39159: PUSH
39160: LD_VAR 0 14
39164: PUSH
39165: LD_INT 2
39167: ARRAY
39168: GREATEREQUAL
39169: AND
39170: PUSH
39171: LD_VAR 0 9
39175: PPUSH
39176: LD_INT 3
39178: PPUSH
39179: CALL_OW 275
39183: PUSH
39184: LD_VAR 0 14
39188: PUSH
39189: LD_INT 3
39191: ARRAY
39192: GREATEREQUAL
39193: AND
39194: IFFALSE 39206
// result := weapon ;
39196: LD_ADDR_VAR 0 3
39200: PUSH
39201: LD_VAR 0 18
39205: ST_TO_ADDR
// end ; end ;
39206: LD_VAR 0 3
39210: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39211: LD_INT 0
39213: PPUSH
39214: PPUSH
// result := true ;
39215: LD_ADDR_VAR 0 3
39219: PUSH
39220: LD_INT 1
39222: ST_TO_ADDR
// if array1 = array2 then
39223: LD_VAR 0 1
39227: PUSH
39228: LD_VAR 0 2
39232: EQUAL
39233: IFFALSE 39293
// begin for i = 1 to array1 do
39235: LD_ADDR_VAR 0 4
39239: PUSH
39240: DOUBLE
39241: LD_INT 1
39243: DEC
39244: ST_TO_ADDR
39245: LD_VAR 0 1
39249: PUSH
39250: FOR_TO
39251: IFFALSE 39289
// if array1 [ i ] <> array2 [ i ] then
39253: LD_VAR 0 1
39257: PUSH
39258: LD_VAR 0 4
39262: ARRAY
39263: PUSH
39264: LD_VAR 0 2
39268: PUSH
39269: LD_VAR 0 4
39273: ARRAY
39274: NONEQUAL
39275: IFFALSE 39287
// begin result := false ;
39277: LD_ADDR_VAR 0 3
39281: PUSH
39282: LD_INT 0
39284: ST_TO_ADDR
// break ;
39285: GO 39289
// end ;
39287: GO 39250
39289: POP
39290: POP
// end else
39291: GO 39301
// result := false ;
39293: LD_ADDR_VAR 0 3
39297: PUSH
39298: LD_INT 0
39300: ST_TO_ADDR
// end ;
39301: LD_VAR 0 3
39305: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39306: LD_INT 0
39308: PPUSH
39309: PPUSH
39310: PPUSH
// pom := GetBase ( fac ) ;
39311: LD_ADDR_VAR 0 5
39315: PUSH
39316: LD_VAR 0 1
39320: PPUSH
39321: CALL_OW 274
39325: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39326: LD_ADDR_VAR 0 4
39330: PUSH
39331: LD_VAR 0 2
39335: PUSH
39336: LD_INT 1
39338: ARRAY
39339: PPUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_INT 2
39347: ARRAY
39348: PPUSH
39349: LD_VAR 0 2
39353: PUSH
39354: LD_INT 3
39356: ARRAY
39357: PPUSH
39358: LD_VAR 0 2
39362: PUSH
39363: LD_INT 4
39365: ARRAY
39366: PPUSH
39367: CALL_OW 449
39371: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39372: LD_ADDR_VAR 0 3
39376: PUSH
39377: LD_VAR 0 5
39381: PPUSH
39382: LD_INT 1
39384: PPUSH
39385: CALL_OW 275
39389: PUSH
39390: LD_VAR 0 4
39394: PUSH
39395: LD_INT 1
39397: ARRAY
39398: GREATEREQUAL
39399: PUSH
39400: LD_VAR 0 5
39404: PPUSH
39405: LD_INT 2
39407: PPUSH
39408: CALL_OW 275
39412: PUSH
39413: LD_VAR 0 4
39417: PUSH
39418: LD_INT 2
39420: ARRAY
39421: GREATEREQUAL
39422: AND
39423: PUSH
39424: LD_VAR 0 5
39428: PPUSH
39429: LD_INT 3
39431: PPUSH
39432: CALL_OW 275
39436: PUSH
39437: LD_VAR 0 4
39441: PUSH
39442: LD_INT 3
39444: ARRAY
39445: GREATEREQUAL
39446: AND
39447: ST_TO_ADDR
// end ;
39448: LD_VAR 0 3
39452: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39453: LD_INT 0
39455: PPUSH
39456: PPUSH
39457: PPUSH
39458: PPUSH
// pom := GetBase ( building ) ;
39459: LD_ADDR_VAR 0 3
39463: PUSH
39464: LD_VAR 0 1
39468: PPUSH
39469: CALL_OW 274
39473: ST_TO_ADDR
// if not pom then
39474: LD_VAR 0 3
39478: NOT
39479: IFFALSE 39483
// exit ;
39481: GO 39653
// btype := GetBType ( building ) ;
39483: LD_ADDR_VAR 0 5
39487: PUSH
39488: LD_VAR 0 1
39492: PPUSH
39493: CALL_OW 266
39497: ST_TO_ADDR
// if btype = b_armoury then
39498: LD_VAR 0 5
39502: PUSH
39503: LD_INT 4
39505: EQUAL
39506: IFFALSE 39516
// btype := b_barracks ;
39508: LD_ADDR_VAR 0 5
39512: PUSH
39513: LD_INT 5
39515: ST_TO_ADDR
// if btype = b_depot then
39516: LD_VAR 0 5
39520: PUSH
39521: LD_INT 0
39523: EQUAL
39524: IFFALSE 39534
// btype := b_warehouse ;
39526: LD_ADDR_VAR 0 5
39530: PUSH
39531: LD_INT 1
39533: ST_TO_ADDR
// if btype = b_workshop then
39534: LD_VAR 0 5
39538: PUSH
39539: LD_INT 2
39541: EQUAL
39542: IFFALSE 39552
// btype := b_factory ;
39544: LD_ADDR_VAR 0 5
39548: PUSH
39549: LD_INT 3
39551: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39552: LD_ADDR_VAR 0 4
39556: PUSH
39557: LD_VAR 0 5
39561: PPUSH
39562: LD_VAR 0 1
39566: PPUSH
39567: CALL_OW 248
39571: PPUSH
39572: CALL_OW 450
39576: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39577: LD_ADDR_VAR 0 2
39581: PUSH
39582: LD_VAR 0 3
39586: PPUSH
39587: LD_INT 1
39589: PPUSH
39590: CALL_OW 275
39594: PUSH
39595: LD_VAR 0 4
39599: PUSH
39600: LD_INT 1
39602: ARRAY
39603: GREATEREQUAL
39604: PUSH
39605: LD_VAR 0 3
39609: PPUSH
39610: LD_INT 2
39612: PPUSH
39613: CALL_OW 275
39617: PUSH
39618: LD_VAR 0 4
39622: PUSH
39623: LD_INT 2
39625: ARRAY
39626: GREATEREQUAL
39627: AND
39628: PUSH
39629: LD_VAR 0 3
39633: PPUSH
39634: LD_INT 3
39636: PPUSH
39637: CALL_OW 275
39641: PUSH
39642: LD_VAR 0 4
39646: PUSH
39647: LD_INT 3
39649: ARRAY
39650: GREATEREQUAL
39651: AND
39652: ST_TO_ADDR
// end ;
39653: LD_VAR 0 2
39657: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39658: LD_INT 0
39660: PPUSH
39661: PPUSH
39662: PPUSH
// pom := GetBase ( building ) ;
39663: LD_ADDR_VAR 0 4
39667: PUSH
39668: LD_VAR 0 1
39672: PPUSH
39673: CALL_OW 274
39677: ST_TO_ADDR
// if not pom then
39678: LD_VAR 0 4
39682: NOT
39683: IFFALSE 39687
// exit ;
39685: GO 39788
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39687: LD_ADDR_VAR 0 5
39691: PUSH
39692: LD_VAR 0 2
39696: PPUSH
39697: LD_VAR 0 1
39701: PPUSH
39702: CALL_OW 248
39706: PPUSH
39707: CALL_OW 450
39711: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39712: LD_ADDR_VAR 0 3
39716: PUSH
39717: LD_VAR 0 4
39721: PPUSH
39722: LD_INT 1
39724: PPUSH
39725: CALL_OW 275
39729: PUSH
39730: LD_VAR 0 5
39734: PUSH
39735: LD_INT 1
39737: ARRAY
39738: GREATEREQUAL
39739: PUSH
39740: LD_VAR 0 4
39744: PPUSH
39745: LD_INT 2
39747: PPUSH
39748: CALL_OW 275
39752: PUSH
39753: LD_VAR 0 5
39757: PUSH
39758: LD_INT 2
39760: ARRAY
39761: GREATEREQUAL
39762: AND
39763: PUSH
39764: LD_VAR 0 4
39768: PPUSH
39769: LD_INT 3
39771: PPUSH
39772: CALL_OW 275
39776: PUSH
39777: LD_VAR 0 5
39781: PUSH
39782: LD_INT 3
39784: ARRAY
39785: GREATEREQUAL
39786: AND
39787: ST_TO_ADDR
// end ;
39788: LD_VAR 0 3
39792: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
39793: LD_INT 0
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
// result := false ;
39805: LD_ADDR_VAR 0 6
39809: PUSH
39810: LD_INT 0
39812: ST_TO_ADDR
// if not base or not btype or not x or not y then
39813: LD_VAR 0 1
39817: NOT
39818: PUSH
39819: LD_VAR 0 2
39823: NOT
39824: OR
39825: PUSH
39826: LD_VAR 0 3
39830: NOT
39831: OR
39832: PUSH
39833: LD_VAR 0 4
39837: NOT
39838: OR
39839: IFFALSE 39843
// exit ;
39841: GO 40452
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
39843: LD_ADDR_VAR 0 12
39847: PUSH
39848: LD_VAR 0 2
39852: PPUSH
39853: LD_VAR 0 3
39857: PPUSH
39858: LD_VAR 0 4
39862: PPUSH
39863: LD_VAR 0 5
39867: PPUSH
39868: LD_VAR 0 1
39872: PUSH
39873: LD_INT 1
39875: ARRAY
39876: PPUSH
39877: CALL_OW 248
39881: PPUSH
39882: LD_INT 0
39884: PPUSH
39885: CALL 41289 0 6
39889: ST_TO_ADDR
// if not hexes then
39890: LD_VAR 0 12
39894: NOT
39895: IFFALSE 39899
// exit ;
39897: GO 40452
// for i = 1 to hexes do
39899: LD_ADDR_VAR 0 7
39903: PUSH
39904: DOUBLE
39905: LD_INT 1
39907: DEC
39908: ST_TO_ADDR
39909: LD_VAR 0 12
39913: PUSH
39914: FOR_TO
39915: IFFALSE 40450
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39917: LD_ADDR_VAR 0 11
39921: PUSH
39922: LD_VAR 0 12
39926: PUSH
39927: LD_VAR 0 7
39931: ARRAY
39932: PUSH
39933: LD_INT 1
39935: ARRAY
39936: PPUSH
39937: LD_VAR 0 12
39941: PUSH
39942: LD_VAR 0 7
39946: ARRAY
39947: PUSH
39948: LD_INT 2
39950: ARRAY
39951: PPUSH
39952: CALL_OW 428
39956: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39957: LD_VAR 0 12
39961: PUSH
39962: LD_VAR 0 7
39966: ARRAY
39967: PUSH
39968: LD_INT 1
39970: ARRAY
39971: PPUSH
39972: LD_VAR 0 12
39976: PUSH
39977: LD_VAR 0 7
39981: ARRAY
39982: PUSH
39983: LD_INT 2
39985: ARRAY
39986: PPUSH
39987: CALL_OW 351
39991: PUSH
39992: LD_VAR 0 12
39996: PUSH
39997: LD_VAR 0 7
40001: ARRAY
40002: PUSH
40003: LD_INT 1
40005: ARRAY
40006: PPUSH
40007: LD_VAR 0 12
40011: PUSH
40012: LD_VAR 0 7
40016: ARRAY
40017: PUSH
40018: LD_INT 2
40020: ARRAY
40021: PPUSH
40022: CALL_OW 488
40026: NOT
40027: OR
40028: PUSH
40029: LD_VAR 0 11
40033: PPUSH
40034: CALL_OW 247
40038: PUSH
40039: LD_INT 3
40041: EQUAL
40042: OR
40043: IFFALSE 40049
// exit ;
40045: POP
40046: POP
40047: GO 40452
// if not tmp or not tmp in base then
40049: LD_VAR 0 11
40053: NOT
40054: PUSH
40055: LD_VAR 0 11
40059: PUSH
40060: LD_VAR 0 1
40064: IN
40065: NOT
40066: OR
40067: IFFALSE 40071
// continue ;
40069: GO 39914
// result := true ;
40071: LD_ADDR_VAR 0 6
40075: PUSH
40076: LD_INT 1
40078: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40079: LD_ADDR_VAR 0 15
40083: PUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: LD_INT 22
40091: PUSH
40092: LD_VAR 0 11
40096: PPUSH
40097: CALL_OW 255
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: LD_INT 30
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 30
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PPUSH
40138: CALL_OW 72
40142: ST_TO_ADDR
// if dep then
40143: LD_VAR 0 15
40147: IFFALSE 40283
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40149: LD_ADDR_VAR 0 14
40153: PUSH
40154: LD_VAR 0 15
40158: PUSH
40159: LD_INT 1
40161: ARRAY
40162: PPUSH
40163: CALL_OW 250
40167: PPUSH
40168: LD_VAR 0 15
40172: PUSH
40173: LD_INT 1
40175: ARRAY
40176: PPUSH
40177: CALL_OW 254
40181: PPUSH
40182: LD_INT 5
40184: PPUSH
40185: CALL_OW 272
40189: PUSH
40190: LD_VAR 0 15
40194: PUSH
40195: LD_INT 1
40197: ARRAY
40198: PPUSH
40199: CALL_OW 251
40203: PPUSH
40204: LD_VAR 0 15
40208: PUSH
40209: LD_INT 1
40211: ARRAY
40212: PPUSH
40213: CALL_OW 254
40217: PPUSH
40218: LD_INT 5
40220: PPUSH
40221: CALL_OW 273
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40230: LD_VAR 0 14
40234: PUSH
40235: LD_INT 1
40237: ARRAY
40238: PPUSH
40239: LD_VAR 0 14
40243: PUSH
40244: LD_INT 2
40246: ARRAY
40247: PPUSH
40248: CALL_OW 488
40252: IFFALSE 40283
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40254: LD_VAR 0 11
40258: PPUSH
40259: LD_VAR 0 14
40263: PUSH
40264: LD_INT 1
40266: ARRAY
40267: PPUSH
40268: LD_VAR 0 14
40272: PUSH
40273: LD_INT 2
40275: ARRAY
40276: PPUSH
40277: CALL_OW 111
// continue ;
40281: GO 39914
// end ; end ; r := GetDir ( tmp ) ;
40283: LD_ADDR_VAR 0 13
40287: PUSH
40288: LD_VAR 0 11
40292: PPUSH
40293: CALL_OW 254
40297: ST_TO_ADDR
// if r = 5 then
40298: LD_VAR 0 13
40302: PUSH
40303: LD_INT 5
40305: EQUAL
40306: IFFALSE 40316
// r := 0 ;
40308: LD_ADDR_VAR 0 13
40312: PUSH
40313: LD_INT 0
40315: ST_TO_ADDR
// for j = r to 5 do
40316: LD_ADDR_VAR 0 8
40320: PUSH
40321: DOUBLE
40322: LD_VAR 0 13
40326: DEC
40327: ST_TO_ADDR
40328: LD_INT 5
40330: PUSH
40331: FOR_TO
40332: IFFALSE 40446
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40334: LD_ADDR_VAR 0 9
40338: PUSH
40339: LD_VAR 0 11
40343: PPUSH
40344: CALL_OW 250
40348: PPUSH
40349: LD_VAR 0 8
40353: PPUSH
40354: LD_INT 2
40356: PPUSH
40357: CALL_OW 272
40361: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40362: LD_ADDR_VAR 0 10
40366: PUSH
40367: LD_VAR 0 11
40371: PPUSH
40372: CALL_OW 251
40376: PPUSH
40377: LD_VAR 0 8
40381: PPUSH
40382: LD_INT 2
40384: PPUSH
40385: CALL_OW 273
40389: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40390: LD_VAR 0 9
40394: PPUSH
40395: LD_VAR 0 10
40399: PPUSH
40400: CALL_OW 488
40404: PUSH
40405: LD_VAR 0 9
40409: PPUSH
40410: LD_VAR 0 10
40414: PPUSH
40415: CALL_OW 428
40419: NOT
40420: AND
40421: IFFALSE 40444
// begin ComMoveXY ( tmp , _x , _y ) ;
40423: LD_VAR 0 11
40427: PPUSH
40428: LD_VAR 0 9
40432: PPUSH
40433: LD_VAR 0 10
40437: PPUSH
40438: CALL_OW 111
// break ;
40442: GO 40446
// end ; end ;
40444: GO 40331
40446: POP
40447: POP
// end ;
40448: GO 39914
40450: POP
40451: POP
// end ;
40452: LD_VAR 0 6
40456: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40457: LD_INT 0
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
40467: PPUSH
40468: PPUSH
// result := false ;
40469: LD_ADDR_VAR 0 6
40473: PUSH
40474: LD_INT 0
40476: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40477: LD_VAR 0 1
40481: NOT
40482: PUSH
40483: LD_VAR 0 1
40487: PPUSH
40488: CALL_OW 266
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: IN
40503: NOT
40504: OR
40505: PUSH
40506: LD_VAR 0 2
40510: NOT
40511: OR
40512: PUSH
40513: LD_VAR 0 5
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 3
40529: PUSH
40530: LD_INT 4
40532: PUSH
40533: LD_INT 5
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: IN
40544: NOT
40545: OR
40546: PUSH
40547: LD_VAR 0 3
40551: PPUSH
40552: LD_VAR 0 4
40556: PPUSH
40557: CALL_OW 488
40561: NOT
40562: OR
40563: IFFALSE 40567
// exit ;
40565: GO 41284
// pom := GetBase ( depot ) ;
40567: LD_ADDR_VAR 0 10
40571: PUSH
40572: LD_VAR 0 1
40576: PPUSH
40577: CALL_OW 274
40581: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40582: LD_ADDR_VAR 0 11
40586: PUSH
40587: LD_VAR 0 2
40591: PPUSH
40592: LD_VAR 0 1
40596: PPUSH
40597: CALL_OW 248
40601: PPUSH
40602: CALL_OW 450
40606: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40607: LD_VAR 0 10
40611: PPUSH
40612: LD_INT 1
40614: PPUSH
40615: CALL_OW 275
40619: PUSH
40620: LD_VAR 0 11
40624: PUSH
40625: LD_INT 1
40627: ARRAY
40628: GREATEREQUAL
40629: PUSH
40630: LD_VAR 0 10
40634: PPUSH
40635: LD_INT 2
40637: PPUSH
40638: CALL_OW 275
40642: PUSH
40643: LD_VAR 0 11
40647: PUSH
40648: LD_INT 2
40650: ARRAY
40651: GREATEREQUAL
40652: AND
40653: PUSH
40654: LD_VAR 0 10
40658: PPUSH
40659: LD_INT 3
40661: PPUSH
40662: CALL_OW 275
40666: PUSH
40667: LD_VAR 0 11
40671: PUSH
40672: LD_INT 3
40674: ARRAY
40675: GREATEREQUAL
40676: AND
40677: NOT
40678: IFFALSE 40682
// exit ;
40680: GO 41284
// if GetBType ( depot ) = b_depot then
40682: LD_VAR 0 1
40686: PPUSH
40687: CALL_OW 266
40691: PUSH
40692: LD_INT 0
40694: EQUAL
40695: IFFALSE 40707
// dist := 28 else
40697: LD_ADDR_VAR 0 14
40701: PUSH
40702: LD_INT 28
40704: ST_TO_ADDR
40705: GO 40715
// dist := 36 ;
40707: LD_ADDR_VAR 0 14
40711: PUSH
40712: LD_INT 36
40714: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40715: LD_VAR 0 1
40719: PPUSH
40720: LD_VAR 0 3
40724: PPUSH
40725: LD_VAR 0 4
40729: PPUSH
40730: CALL_OW 297
40734: PUSH
40735: LD_VAR 0 14
40739: GREATER
40740: IFFALSE 40744
// exit ;
40742: GO 41284
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40744: LD_ADDR_VAR 0 12
40748: PUSH
40749: LD_VAR 0 2
40753: PPUSH
40754: LD_VAR 0 3
40758: PPUSH
40759: LD_VAR 0 4
40763: PPUSH
40764: LD_VAR 0 5
40768: PPUSH
40769: LD_VAR 0 1
40773: PPUSH
40774: CALL_OW 248
40778: PPUSH
40779: LD_INT 0
40781: PPUSH
40782: CALL 41289 0 6
40786: ST_TO_ADDR
// if not hexes then
40787: LD_VAR 0 12
40791: NOT
40792: IFFALSE 40796
// exit ;
40794: GO 41284
// hex := GetHexInfo ( x , y ) ;
40796: LD_ADDR_VAR 0 15
40800: PUSH
40801: LD_VAR 0 3
40805: PPUSH
40806: LD_VAR 0 4
40810: PPUSH
40811: CALL_OW 546
40815: ST_TO_ADDR
// if hex [ 1 ] then
40816: LD_VAR 0 15
40820: PUSH
40821: LD_INT 1
40823: ARRAY
40824: IFFALSE 40828
// exit ;
40826: GO 41284
// height := hex [ 2 ] ;
40828: LD_ADDR_VAR 0 13
40832: PUSH
40833: LD_VAR 0 15
40837: PUSH
40838: LD_INT 2
40840: ARRAY
40841: ST_TO_ADDR
// for i = 1 to hexes do
40842: LD_ADDR_VAR 0 7
40846: PUSH
40847: DOUBLE
40848: LD_INT 1
40850: DEC
40851: ST_TO_ADDR
40852: LD_VAR 0 12
40856: PUSH
40857: FOR_TO
40858: IFFALSE 41188
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40860: LD_VAR 0 12
40864: PUSH
40865: LD_VAR 0 7
40869: ARRAY
40870: PUSH
40871: LD_INT 1
40873: ARRAY
40874: PPUSH
40875: LD_VAR 0 12
40879: PUSH
40880: LD_VAR 0 7
40884: ARRAY
40885: PUSH
40886: LD_INT 2
40888: ARRAY
40889: PPUSH
40890: CALL_OW 488
40894: NOT
40895: PUSH
40896: LD_VAR 0 12
40900: PUSH
40901: LD_VAR 0 7
40905: ARRAY
40906: PUSH
40907: LD_INT 1
40909: ARRAY
40910: PPUSH
40911: LD_VAR 0 12
40915: PUSH
40916: LD_VAR 0 7
40920: ARRAY
40921: PUSH
40922: LD_INT 2
40924: ARRAY
40925: PPUSH
40926: CALL_OW 428
40930: PUSH
40931: LD_INT 0
40933: GREATER
40934: OR
40935: PUSH
40936: LD_VAR 0 12
40940: PUSH
40941: LD_VAR 0 7
40945: ARRAY
40946: PUSH
40947: LD_INT 1
40949: ARRAY
40950: PPUSH
40951: LD_VAR 0 12
40955: PUSH
40956: LD_VAR 0 7
40960: ARRAY
40961: PUSH
40962: LD_INT 2
40964: ARRAY
40965: PPUSH
40966: CALL_OW 351
40970: OR
40971: IFFALSE 40977
// exit ;
40973: POP
40974: POP
40975: GO 41284
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40977: LD_ADDR_VAR 0 8
40981: PUSH
40982: LD_VAR 0 12
40986: PUSH
40987: LD_VAR 0 7
40991: ARRAY
40992: PUSH
40993: LD_INT 1
40995: ARRAY
40996: PPUSH
40997: LD_VAR 0 12
41001: PUSH
41002: LD_VAR 0 7
41006: ARRAY
41007: PUSH
41008: LD_INT 2
41010: ARRAY
41011: PPUSH
41012: CALL_OW 546
41016: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41017: LD_VAR 0 8
41021: PUSH
41022: LD_INT 1
41024: ARRAY
41025: PUSH
41026: LD_VAR 0 8
41030: PUSH
41031: LD_INT 2
41033: ARRAY
41034: PUSH
41035: LD_VAR 0 13
41039: PUSH
41040: LD_INT 2
41042: PLUS
41043: GREATER
41044: OR
41045: PUSH
41046: LD_VAR 0 8
41050: PUSH
41051: LD_INT 2
41053: ARRAY
41054: PUSH
41055: LD_VAR 0 13
41059: PUSH
41060: LD_INT 2
41062: MINUS
41063: LESS
41064: OR
41065: PUSH
41066: LD_VAR 0 8
41070: PUSH
41071: LD_INT 3
41073: ARRAY
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 8
41080: PUSH
41081: LD_INT 9
41083: PUSH
41084: LD_INT 10
41086: PUSH
41087: LD_INT 11
41089: PUSH
41090: LD_INT 12
41092: PUSH
41093: LD_INT 13
41095: PUSH
41096: LD_INT 16
41098: PUSH
41099: LD_INT 17
41101: PUSH
41102: LD_INT 18
41104: PUSH
41105: LD_INT 19
41107: PUSH
41108: LD_INT 20
41110: PUSH
41111: LD_INT 21
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: IN
41129: NOT
41130: OR
41131: PUSH
41132: LD_VAR 0 8
41136: PUSH
41137: LD_INT 5
41139: ARRAY
41140: NOT
41141: OR
41142: PUSH
41143: LD_VAR 0 8
41147: PUSH
41148: LD_INT 6
41150: ARRAY
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: LD_INT 7
41160: PUSH
41161: LD_INT 9
41163: PUSH
41164: LD_INT 10
41166: PUSH
41167: LD_INT 11
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: IN
41178: NOT
41179: OR
41180: IFFALSE 41186
// exit ;
41182: POP
41183: POP
41184: GO 41284
// end ;
41186: GO 40857
41188: POP
41189: POP
// side := GetSide ( depot ) ;
41190: LD_ADDR_VAR 0 9
41194: PUSH
41195: LD_VAR 0 1
41199: PPUSH
41200: CALL_OW 255
41204: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41205: LD_VAR 0 9
41209: PPUSH
41210: LD_VAR 0 3
41214: PPUSH
41215: LD_VAR 0 4
41219: PPUSH
41220: LD_INT 20
41222: PPUSH
41223: CALL 33938 0 4
41227: PUSH
41228: LD_INT 4
41230: ARRAY
41231: IFFALSE 41235
// exit ;
41233: GO 41284
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41235: LD_VAR 0 2
41239: PUSH
41240: LD_INT 29
41242: PUSH
41243: LD_INT 30
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: IN
41250: PUSH
41251: LD_VAR 0 3
41255: PPUSH
41256: LD_VAR 0 4
41260: PPUSH
41261: LD_VAR 0 9
41265: PPUSH
41266: CALL_OW 440
41270: NOT
41271: AND
41272: IFFALSE 41276
// exit ;
41274: GO 41284
// result := true ;
41276: LD_ADDR_VAR 0 6
41280: PUSH
41281: LD_INT 1
41283: ST_TO_ADDR
// end ;
41284: LD_VAR 0 6
41288: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
41289: LD_INT 0
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
41308: PPUSH
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
41348: PPUSH
// result = [ ] ;
41349: LD_ADDR_VAR 0 7
41353: PUSH
41354: EMPTY
41355: ST_TO_ADDR
// temp_list = [ ] ;
41356: LD_ADDR_VAR 0 9
41360: PUSH
41361: EMPTY
41362: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41363: LD_VAR 0 4
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: LD_INT 4
41382: PUSH
41383: LD_INT 5
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: IN
41394: NOT
41395: PUSH
41396: LD_VAR 0 1
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: IN
41411: PUSH
41412: LD_VAR 0 5
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 2
41422: PUSH
41423: LD_INT 3
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: IN
41431: NOT
41432: AND
41433: OR
41434: IFFALSE 41438
// exit ;
41436: GO 59829
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41438: LD_VAR 0 1
41442: PUSH
41443: LD_INT 6
41445: PUSH
41446: LD_INT 7
41448: PUSH
41449: LD_INT 8
41451: PUSH
41452: LD_INT 13
41454: PUSH
41455: LD_INT 12
41457: PUSH
41458: LD_INT 15
41460: PUSH
41461: LD_INT 11
41463: PUSH
41464: LD_INT 14
41466: PUSH
41467: LD_INT 10
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: IN
41481: IFFALSE 41491
// btype = b_lab ;
41483: LD_ADDR_VAR 0 1
41487: PUSH
41488: LD_INT 6
41490: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41491: LD_VAR 0 6
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: IN
41510: NOT
41511: PUSH
41512: LD_VAR 0 1
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 3
41528: PUSH
41529: LD_INT 6
41531: PUSH
41532: LD_INT 36
41534: PUSH
41535: LD_INT 4
41537: PUSH
41538: LD_INT 5
41540: PUSH
41541: LD_INT 31
41543: PUSH
41544: LD_INT 32
41546: PUSH
41547: LD_INT 33
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: IN
41563: NOT
41564: PUSH
41565: LD_VAR 0 6
41569: PUSH
41570: LD_INT 1
41572: EQUAL
41573: AND
41574: OR
41575: PUSH
41576: LD_VAR 0 1
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 3
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: IN
41591: NOT
41592: PUSH
41593: LD_VAR 0 6
41597: PUSH
41598: LD_INT 2
41600: EQUAL
41601: AND
41602: OR
41603: IFFALSE 41613
// mode = 0 ;
41605: LD_ADDR_VAR 0 6
41609: PUSH
41610: LD_INT 0
41612: ST_TO_ADDR
// case mode of 0 :
41613: LD_VAR 0 6
41617: PUSH
41618: LD_INT 0
41620: DOUBLE
41621: EQUAL
41622: IFTRUE 41626
41624: GO 53079
41626: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41627: LD_ADDR_VAR 0 11
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 3
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 3
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41820: LD_ADDR_VAR 0 12
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 3
41977: NEG
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 3
41988: NEG
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42016: LD_ADDR_VAR 0 13
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 3
42175: NEG
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 3
42187: NEG
42188: PUSH
42189: LD_INT 3
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42215: LD_ADDR_VAR 0 14
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 2
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 2
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: LD_INT 3
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 3
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42411: LD_ADDR_VAR 0 15
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 3
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42604: LD_ADDR_VAR 0 16
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 3
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: PUSH
42762: LD_INT 3
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 3
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42797: LD_ADDR_VAR 0 17
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 2
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43027: LD_ADDR_VAR 0 18
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43257: LD_ADDR_VAR 0 19
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43487: LD_ADDR_VAR 0 20
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43717: LD_ADDR_VAR 0 21
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43947: LD_ADDR_VAR 0 22
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44177: LD_ADDR_VAR 0 23
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: LD_INT 2
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: LD_INT 3
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 3
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 2
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44457: LD_ADDR_VAR 0 24
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44733: LD_ADDR_VAR 0 25
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 3
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 3
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45007: LD_ADDR_VAR 0 26
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 2
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: NEG
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 3
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45283: LD_ADDR_VAR 0 27
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 3
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45563: LD_ADDR_VAR 0 28
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: NEG
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 3
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 3
45810: NEG
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45845: LD_ADDR_VAR 0 29
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: LD_INT 3
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46124: LD_ADDR_VAR 0 30
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: LD_INT 3
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: LD_INT 3
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 3
46367: NEG
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46402: LD_ADDR_VAR 0 31
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: LD_INT 3
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 3
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 3
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46680: LD_ADDR_VAR 0 32
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 3
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 3
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 3
46923: NEG
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46958: LD_ADDR_VAR 0 33
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 3
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 3
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: NEG
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47237: LD_ADDR_VAR 0 34
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 3
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 3
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 3
47482: NEG
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47517: LD_ADDR_VAR 0 35
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47629: LD_ADDR_VAR 0 36
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47741: LD_ADDR_VAR 0 37
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47853: LD_ADDR_VAR 0 38
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47965: LD_ADDR_VAR 0 39
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 2
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48077: LD_ADDR_VAR 0 40
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48189: LD_ADDR_VAR 0 41
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: LD_INT 3
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 3
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 3
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 3
48474: NEG
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 3
48486: NEG
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: NEG
48499: PUSH
48500: LD_INT 3
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48539: LD_ADDR_VAR 0 42
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 2
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: LD_INT 3
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: LD_INT 3
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: LD_INT 3
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 3
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 3
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: NEG
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48889: LD_ADDR_VAR 0 43
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 3
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 3
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 3
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 3
49185: NEG
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49237: LD_ADDR_VAR 0 44
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: LD_INT 3
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 3
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 3
49546: NEG
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49587: LD_ADDR_VAR 0 45
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: LD_INT 3
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 3
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 3
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 3
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 3
49896: NEG
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49937: LD_ADDR_VAR 0 46
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 3
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 3
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 3
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 3
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 3
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 3
50233: NEG
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50285: LD_ADDR_VAR 0 47
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50436: LD_ADDR_VAR 0 48
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50583: LD_ADDR_VAR 0 49
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50727: LD_ADDR_VAR 0 50
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50871: LD_ADDR_VAR 0 51
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51018: LD_ADDR_VAR 0 52
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51169: LD_ADDR_VAR 0 53
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51399: LD_ADDR_VAR 0 54
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51629: LD_ADDR_VAR 0 55
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51859: LD_ADDR_VAR 0 56
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52089: LD_ADDR_VAR 0 57
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52319: LD_ADDR_VAR 0 58
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52549: LD_ADDR_VAR 0 59
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52637: LD_ADDR_VAR 0 60
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52725: LD_ADDR_VAR 0 61
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52813: LD_ADDR_VAR 0 62
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52901: LD_ADDR_VAR 0 63
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52989: LD_ADDR_VAR 0 64
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// end ; 1 :
53077: GO 58974
53079: LD_INT 1
53081: DOUBLE
53082: EQUAL
53083: IFTRUE 53087
53085: GO 55710
53087: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53088: LD_ADDR_VAR 0 11
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 2
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53132: LD_ADDR_VAR 0 12
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53173: LD_ADDR_VAR 0 13
53177: PUSH
53178: LD_INT 3
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 3
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53213: LD_ADDR_VAR 0 14
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53254: LD_ADDR_VAR 0 15
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53298: LD_ADDR_VAR 0 16
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: NEG
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53344: LD_ADDR_VAR 0 17
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 3
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: LIST
53387: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53388: LD_ADDR_VAR 0 18
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53429: LD_ADDR_VAR 0 19
53433: PUSH
53434: LD_INT 3
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: LD_INT 3
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: LD_INT 3
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: LIST
53468: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53469: LD_ADDR_VAR 0 20
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53510: LD_ADDR_VAR 0 21
53514: PUSH
53515: LD_INT 2
53517: NEG
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 3
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 3
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53554: LD_ADDR_VAR 0 22
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: LD_INT 3
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 3
53585: NEG
53586: PUSH
53587: LD_INT 3
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53600: LD_ADDR_VAR 0 23
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 4
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 3
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: LIST
53643: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53644: LD_ADDR_VAR 0 24
53648: PUSH
53649: LD_INT 3
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 4
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53685: LD_ADDR_VAR 0 25
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: LD_INT 3
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 4
53702: PUSH
53703: LD_INT 3
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: LD_INT 4
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53725: LD_ADDR_VAR 0 26
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 3
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 4
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 3
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53766: LD_ADDR_VAR 0 27
53770: PUSH
53771: LD_INT 3
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 4
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53810: LD_ADDR_VAR 0 28
53814: PUSH
53815: LD_INT 3
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: LD_INT 4
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 4
53841: NEG
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53856: LD_ADDR_VAR 0 29
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: LD_INT 3
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 3
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 4
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 4
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 5
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 5
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 4
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 6
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 6
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 5
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54011: LD_ADDR_VAR 0 30
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 4
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 4
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 4
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 5
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 5
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 5
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 6
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 6
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54154: LD_ADDR_VAR 0 31
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 4
54191: PUSH
54192: LD_INT 3
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 4
54201: PUSH
54202: LD_INT 4
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: LD_INT 4
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 5
54221: PUSH
54222: LD_INT 4
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 5
54231: PUSH
54232: LD_INT 5
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 4
54241: PUSH
54242: LD_INT 5
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 6
54251: PUSH
54252: LD_INT 5
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 6
54261: PUSH
54262: LD_INT 6
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 5
54271: PUSH
54272: LD_INT 6
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54293: LD_ADDR_VAR 0 32
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 4
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 4
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 5
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 5
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 4
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 6
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 6
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 5
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54436: LD_ADDR_VAR 0 33
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 4
54488: NEG
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 4
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 4
54511: NEG
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 5
54522: NEG
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 5
54533: NEG
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 5
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 6
54556: NEG
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 6
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54591: LD_ADDR_VAR 0 34
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 3
54610: NEG
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: NEG
54623: PUSH
54624: LD_INT 3
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: LD_INT 4
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 4
54646: NEG
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 4
54658: NEG
54659: PUSH
54660: LD_INT 4
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 4
54670: NEG
54671: PUSH
54672: LD_INT 5
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 5
54682: NEG
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 5
54694: NEG
54695: PUSH
54696: LD_INT 5
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 5
54706: NEG
54707: PUSH
54708: LD_INT 6
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 6
54718: NEG
54719: PUSH
54720: LD_INT 5
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 6
54730: NEG
54731: PUSH
54732: LD_INT 6
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54754: LD_ADDR_VAR 0 41
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54798: LD_ADDR_VAR 0 42
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54839: LD_ADDR_VAR 0 43
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: LD_INT 3
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: LIST
54878: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54879: LD_ADDR_VAR 0 44
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 3
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54920: LD_ADDR_VAR 0 45
54924: PUSH
54925: LD_INT 2
54927: NEG
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 3
54949: NEG
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: LIST
54963: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54964: LD_ADDR_VAR 0 46
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 3
54995: NEG
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55010: LD_ADDR_VAR 0 47
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 3
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55043: LD_ADDR_VAR 0 48
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55074: LD_ADDR_VAR 0 49
55078: PUSH
55079: LD_INT 3
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 3
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55103: LD_ADDR_VAR 0 50
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 3
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55132: LD_ADDR_VAR 0 51
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55163: LD_ADDR_VAR 0 52
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55196: LD_ADDR_VAR 0 53
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 3
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55240: LD_ADDR_VAR 0 54
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55281: LD_ADDR_VAR 0 55
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 3
55298: PUSH
55299: LD_INT 3
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55321: LD_ADDR_VAR 0 56
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 3
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55362: LD_ADDR_VAR 0 57
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 3
55380: NEG
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: LIST
55405: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55406: LD_ADDR_VAR 0 58
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: LD_INT 3
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: LD_INT 3
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55452: LD_ADDR_VAR 0 59
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55496: LD_ADDR_VAR 0 60
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: LIST
55536: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55537: LD_ADDR_VAR 0 61
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: LIST
55576: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55577: LD_ADDR_VAR 0 62
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55618: LD_ADDR_VAR 0 63
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55662: LD_ADDR_VAR 0 64
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// end ; 2 :
55708: GO 58974
55710: LD_INT 2
55712: DOUBLE
55713: EQUAL
55714: IFTRUE 55718
55716: GO 58973
55718: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55719: LD_ADDR_VAR 0 29
55723: PUSH
55724: LD_INT 4
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 4
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 5
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 5
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 4
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 5
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 4
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: LD_INT 4
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 4
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 4
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 3
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 4
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 5
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 5
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: LD_INT 4
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 5
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 4
56058: NEG
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 4
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 4
56081: NEG
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 4
56104: NEG
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: LD_INT 5
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 3
56140: NEG
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 4
56152: NEG
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 5
56164: NEG
56165: PUSH
56166: LD_INT 4
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 5
56176: NEG
56177: PUSH
56178: LD_INT 5
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 3
56188: NEG
56189: PUSH
56190: LD_INT 5
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 5
56200: NEG
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56257: LD_ADDR_VAR 0 30
56261: PUSH
56262: LD_INT 4
56264: PUSH
56265: LD_INT 4
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 4
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 5
56284: PUSH
56285: LD_INT 4
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 5
56294: PUSH
56295: LD_INT 5
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 4
56304: PUSH
56305: LD_INT 5
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: LD_INT 4
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 3
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 5
56334: PUSH
56335: LD_INT 3
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: LD_INT 5
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 4
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 4
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 4
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 2
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: NEG
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 4
56458: NEG
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 4
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 5
56503: NEG
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 5
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 5
56526: NEG
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 3
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 3
56561: NEG
56562: PUSH
56563: LD_INT 4
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 4
56609: NEG
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 4
56621: NEG
56622: PUSH
56623: LD_INT 4
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: LD_INT 4
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 4
56645: NEG
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 4
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 5
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 4
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 3
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 4
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 5
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: LD_INT 5
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56804: LD_ADDR_VAR 0 31
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 4
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 3
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 4
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 5
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 5
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 4
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 3
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 5
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: NEG
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 4
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 4
56983: NEG
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 4
57006: NEG
57007: PUSH
57008: LD_INT 4
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 4
57018: NEG
57019: PUSH
57020: LD_INT 5
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: NEG
57031: PUSH
57032: LD_INT 4
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 3
57042: NEG
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 4
57054: NEG
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 5
57066: NEG
57067: PUSH
57068: LD_INT 4
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 5
57078: NEG
57079: PUSH
57080: LD_INT 5
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 3
57090: NEG
57091: PUSH
57092: LD_INT 5
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 5
57102: NEG
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 4
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 3
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 4
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: LD_INT 4
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 4
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 4
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 5
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 5
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 4
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 5
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57354: LD_ADDR_VAR 0 32
57358: PUSH
57359: LD_INT 4
57361: NEG
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 3
57395: NEG
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 4
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 5
57417: NEG
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 5
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 5
57440: NEG
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: NEG
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: NEG
57476: PUSH
57477: LD_INT 4
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 4
57523: NEG
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 4
57535: NEG
57536: PUSH
57537: LD_INT 4
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: LD_INT 4
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 4
57559: NEG
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 4
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 5
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: LD_INT 4
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 4
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 5
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: LD_INT 3
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 5
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 3
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 3
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 4
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 4
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: PUSH
57767: LD_INT 4
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 4
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 5
57786: PUSH
57787: LD_INT 4
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 5
57796: PUSH
57797: LD_INT 5
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 4
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: LD_INT 4
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 5
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: LD_INT 5
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57901: LD_ADDR_VAR 0 33
57905: PUSH
57906: LD_INT 4
57908: NEG
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 4
57920: NEG
57921: PUSH
57922: LD_INT 5
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 4
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 4
57956: NEG
57957: PUSH
57958: LD_INT 3
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 5
57968: NEG
57969: PUSH
57970: LD_INT 4
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 5
57980: NEG
57981: PUSH
57982: LD_INT 5
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: LD_INT 5
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 5
58004: NEG
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: LD_INT 4
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 3
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 4
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 4
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 4
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 4
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 5
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 5
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 4
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 5
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 4
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 4
58241: PUSH
58242: LD_INT 4
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: PUSH
58252: LD_INT 4
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: LD_INT 2
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: LD_INT 4
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 4
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 3
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 4
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: LD_INT 5
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 5
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 4
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 3
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 5
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58439: LD_ADDR_VAR 0 34
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 4
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 5
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 4
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 4
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 5
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: LD_INT 3
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: LD_INT 5
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 4
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 3
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 4
58641: PUSH
58642: LD_INT 4
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 4
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 5
58661: PUSH
58662: LD_INT 4
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 5
58671: PUSH
58672: LD_INT 5
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 4
58681: PUSH
58682: LD_INT 5
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: LD_INT 4
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 5
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: LD_INT 5
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 3
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 4
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 4
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 3
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: LD_INT 4
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 4
58824: NEG
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 4
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 4
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 5
58880: NEG
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 5
58891: NEG
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 5
58903: NEG
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 3
58915: NEG
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: ST_TO_ADDR
// end ; end ;
58971: GO 58974
58973: POP
// case btype of b_depot , b_warehouse :
58974: LD_VAR 0 1
58978: PUSH
58979: LD_INT 0
58981: DOUBLE
58982: EQUAL
58983: IFTRUE 58993
58985: LD_INT 1
58987: DOUBLE
58988: EQUAL
58989: IFTRUE 58993
58991: GO 59194
58993: POP
// case nation of nation_american :
58994: LD_VAR 0 5
58998: PUSH
58999: LD_INT 1
59001: DOUBLE
59002: EQUAL
59003: IFTRUE 59007
59005: GO 59063
59007: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
59008: LD_ADDR_VAR 0 9
59012: PUSH
59013: LD_VAR 0 11
59017: PUSH
59018: LD_VAR 0 12
59022: PUSH
59023: LD_VAR 0 13
59027: PUSH
59028: LD_VAR 0 14
59032: PUSH
59033: LD_VAR 0 15
59037: PUSH
59038: LD_VAR 0 16
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: PUSH
59051: LD_VAR 0 4
59055: PUSH
59056: LD_INT 1
59058: PLUS
59059: ARRAY
59060: ST_TO_ADDR
59061: GO 59192
59063: LD_INT 2
59065: DOUBLE
59066: EQUAL
59067: IFTRUE 59071
59069: GO 59127
59071: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
59072: LD_ADDR_VAR 0 9
59076: PUSH
59077: LD_VAR 0 17
59081: PUSH
59082: LD_VAR 0 18
59086: PUSH
59087: LD_VAR 0 19
59091: PUSH
59092: LD_VAR 0 20
59096: PUSH
59097: LD_VAR 0 21
59101: PUSH
59102: LD_VAR 0 22
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: PUSH
59115: LD_VAR 0 4
59119: PUSH
59120: LD_INT 1
59122: PLUS
59123: ARRAY
59124: ST_TO_ADDR
59125: GO 59192
59127: LD_INT 3
59129: DOUBLE
59130: EQUAL
59131: IFTRUE 59135
59133: GO 59191
59135: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59136: LD_ADDR_VAR 0 9
59140: PUSH
59141: LD_VAR 0 23
59145: PUSH
59146: LD_VAR 0 24
59150: PUSH
59151: LD_VAR 0 25
59155: PUSH
59156: LD_VAR 0 26
59160: PUSH
59161: LD_VAR 0 27
59165: PUSH
59166: LD_VAR 0 28
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: PUSH
59179: LD_VAR 0 4
59183: PUSH
59184: LD_INT 1
59186: PLUS
59187: ARRAY
59188: ST_TO_ADDR
59189: GO 59192
59191: POP
59192: GO 59747
59194: LD_INT 2
59196: DOUBLE
59197: EQUAL
59198: IFTRUE 59208
59200: LD_INT 3
59202: DOUBLE
59203: EQUAL
59204: IFTRUE 59208
59206: GO 59264
59208: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59209: LD_ADDR_VAR 0 9
59213: PUSH
59214: LD_VAR 0 29
59218: PUSH
59219: LD_VAR 0 30
59223: PUSH
59224: LD_VAR 0 31
59228: PUSH
59229: LD_VAR 0 32
59233: PUSH
59234: LD_VAR 0 33
59238: PUSH
59239: LD_VAR 0 34
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: PUSH
59252: LD_VAR 0 4
59256: PUSH
59257: LD_INT 1
59259: PLUS
59260: ARRAY
59261: ST_TO_ADDR
59262: GO 59747
59264: LD_INT 16
59266: DOUBLE
59267: EQUAL
59268: IFTRUE 59326
59270: LD_INT 17
59272: DOUBLE
59273: EQUAL
59274: IFTRUE 59326
59276: LD_INT 18
59278: DOUBLE
59279: EQUAL
59280: IFTRUE 59326
59282: LD_INT 19
59284: DOUBLE
59285: EQUAL
59286: IFTRUE 59326
59288: LD_INT 22
59290: DOUBLE
59291: EQUAL
59292: IFTRUE 59326
59294: LD_INT 20
59296: DOUBLE
59297: EQUAL
59298: IFTRUE 59326
59300: LD_INT 21
59302: DOUBLE
59303: EQUAL
59304: IFTRUE 59326
59306: LD_INT 23
59308: DOUBLE
59309: EQUAL
59310: IFTRUE 59326
59312: LD_INT 24
59314: DOUBLE
59315: EQUAL
59316: IFTRUE 59326
59318: LD_INT 25
59320: DOUBLE
59321: EQUAL
59322: IFTRUE 59326
59324: GO 59382
59326: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59327: LD_ADDR_VAR 0 9
59331: PUSH
59332: LD_VAR 0 35
59336: PUSH
59337: LD_VAR 0 36
59341: PUSH
59342: LD_VAR 0 37
59346: PUSH
59347: LD_VAR 0 38
59351: PUSH
59352: LD_VAR 0 39
59356: PUSH
59357: LD_VAR 0 40
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: PUSH
59370: LD_VAR 0 4
59374: PUSH
59375: LD_INT 1
59377: PLUS
59378: ARRAY
59379: ST_TO_ADDR
59380: GO 59747
59382: LD_INT 6
59384: DOUBLE
59385: EQUAL
59386: IFTRUE 59438
59388: LD_INT 7
59390: DOUBLE
59391: EQUAL
59392: IFTRUE 59438
59394: LD_INT 8
59396: DOUBLE
59397: EQUAL
59398: IFTRUE 59438
59400: LD_INT 13
59402: DOUBLE
59403: EQUAL
59404: IFTRUE 59438
59406: LD_INT 12
59408: DOUBLE
59409: EQUAL
59410: IFTRUE 59438
59412: LD_INT 15
59414: DOUBLE
59415: EQUAL
59416: IFTRUE 59438
59418: LD_INT 11
59420: DOUBLE
59421: EQUAL
59422: IFTRUE 59438
59424: LD_INT 14
59426: DOUBLE
59427: EQUAL
59428: IFTRUE 59438
59430: LD_INT 10
59432: DOUBLE
59433: EQUAL
59434: IFTRUE 59438
59436: GO 59494
59438: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
59439: LD_ADDR_VAR 0 9
59443: PUSH
59444: LD_VAR 0 41
59448: PUSH
59449: LD_VAR 0 42
59453: PUSH
59454: LD_VAR 0 43
59458: PUSH
59459: LD_VAR 0 44
59463: PUSH
59464: LD_VAR 0 45
59468: PUSH
59469: LD_VAR 0 46
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: PUSH
59482: LD_VAR 0 4
59486: PUSH
59487: LD_INT 1
59489: PLUS
59490: ARRAY
59491: ST_TO_ADDR
59492: GO 59747
59494: LD_INT 36
59496: DOUBLE
59497: EQUAL
59498: IFTRUE 59502
59500: GO 59558
59502: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59503: LD_ADDR_VAR 0 9
59507: PUSH
59508: LD_VAR 0 47
59512: PUSH
59513: LD_VAR 0 48
59517: PUSH
59518: LD_VAR 0 49
59522: PUSH
59523: LD_VAR 0 50
59527: PUSH
59528: LD_VAR 0 51
59532: PUSH
59533: LD_VAR 0 52
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: PUSH
59546: LD_VAR 0 4
59550: PUSH
59551: LD_INT 1
59553: PLUS
59554: ARRAY
59555: ST_TO_ADDR
59556: GO 59747
59558: LD_INT 4
59560: DOUBLE
59561: EQUAL
59562: IFTRUE 59584
59564: LD_INT 5
59566: DOUBLE
59567: EQUAL
59568: IFTRUE 59584
59570: LD_INT 34
59572: DOUBLE
59573: EQUAL
59574: IFTRUE 59584
59576: LD_INT 37
59578: DOUBLE
59579: EQUAL
59580: IFTRUE 59584
59582: GO 59640
59584: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59585: LD_ADDR_VAR 0 9
59589: PUSH
59590: LD_VAR 0 53
59594: PUSH
59595: LD_VAR 0 54
59599: PUSH
59600: LD_VAR 0 55
59604: PUSH
59605: LD_VAR 0 56
59609: PUSH
59610: LD_VAR 0 57
59614: PUSH
59615: LD_VAR 0 58
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: PUSH
59628: LD_VAR 0 4
59632: PUSH
59633: LD_INT 1
59635: PLUS
59636: ARRAY
59637: ST_TO_ADDR
59638: GO 59747
59640: LD_INT 31
59642: DOUBLE
59643: EQUAL
59644: IFTRUE 59690
59646: LD_INT 32
59648: DOUBLE
59649: EQUAL
59650: IFTRUE 59690
59652: LD_INT 33
59654: DOUBLE
59655: EQUAL
59656: IFTRUE 59690
59658: LD_INT 27
59660: DOUBLE
59661: EQUAL
59662: IFTRUE 59690
59664: LD_INT 26
59666: DOUBLE
59667: EQUAL
59668: IFTRUE 59690
59670: LD_INT 28
59672: DOUBLE
59673: EQUAL
59674: IFTRUE 59690
59676: LD_INT 29
59678: DOUBLE
59679: EQUAL
59680: IFTRUE 59690
59682: LD_INT 30
59684: DOUBLE
59685: EQUAL
59686: IFTRUE 59690
59688: GO 59746
59690: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
59691: LD_ADDR_VAR 0 9
59695: PUSH
59696: LD_VAR 0 59
59700: PUSH
59701: LD_VAR 0 60
59705: PUSH
59706: LD_VAR 0 61
59710: PUSH
59711: LD_VAR 0 62
59715: PUSH
59716: LD_VAR 0 63
59720: PUSH
59721: LD_VAR 0 64
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: PUSH
59734: LD_VAR 0 4
59738: PUSH
59739: LD_INT 1
59741: PLUS
59742: ARRAY
59743: ST_TO_ADDR
59744: GO 59747
59746: POP
// temp_list2 = [ ] ;
59747: LD_ADDR_VAR 0 10
59751: PUSH
59752: EMPTY
59753: ST_TO_ADDR
// for i in temp_list do
59754: LD_ADDR_VAR 0 8
59758: PUSH
59759: LD_VAR 0 9
59763: PUSH
59764: FOR_IN
59765: IFFALSE 59817
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59767: LD_ADDR_VAR 0 10
59771: PUSH
59772: LD_VAR 0 10
59776: PUSH
59777: LD_VAR 0 8
59781: PUSH
59782: LD_INT 1
59784: ARRAY
59785: PUSH
59786: LD_VAR 0 2
59790: PLUS
59791: PUSH
59792: LD_VAR 0 8
59796: PUSH
59797: LD_INT 2
59799: ARRAY
59800: PUSH
59801: LD_VAR 0 3
59805: PLUS
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: EMPTY
59812: LIST
59813: ADD
59814: ST_TO_ADDR
59815: GO 59764
59817: POP
59818: POP
// result = temp_list2 ;
59819: LD_ADDR_VAR 0 7
59823: PUSH
59824: LD_VAR 0 10
59828: ST_TO_ADDR
// end ;
59829: LD_VAR 0 7
59833: RET
// export function EnemyInRange ( unit , dist ) ; begin
59834: LD_INT 0
59836: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59837: LD_ADDR_VAR 0 3
59841: PUSH
59842: LD_VAR 0 1
59846: PPUSH
59847: CALL_OW 255
59851: PPUSH
59852: LD_VAR 0 1
59856: PPUSH
59857: CALL_OW 250
59861: PPUSH
59862: LD_VAR 0 1
59866: PPUSH
59867: CALL_OW 251
59871: PPUSH
59872: LD_VAR 0 2
59876: PPUSH
59877: CALL 33938 0 4
59881: PUSH
59882: LD_INT 4
59884: ARRAY
59885: ST_TO_ADDR
// end ;
59886: LD_VAR 0 3
59890: RET
// export function PlayerSeeMe ( unit ) ; begin
59891: LD_INT 0
59893: PPUSH
// result := See ( your_side , unit ) ;
59894: LD_ADDR_VAR 0 2
59898: PUSH
59899: LD_OWVAR 2
59903: PPUSH
59904: LD_VAR 0 1
59908: PPUSH
59909: CALL_OW 292
59913: ST_TO_ADDR
// end ;
59914: LD_VAR 0 2
59918: RET
// export function ReverseDir ( unit ) ; begin
59919: LD_INT 0
59921: PPUSH
// if not unit then
59922: LD_VAR 0 1
59926: NOT
59927: IFFALSE 59931
// exit ;
59929: GO 59954
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59931: LD_ADDR_VAR 0 2
59935: PUSH
59936: LD_VAR 0 1
59940: PPUSH
59941: CALL_OW 254
59945: PUSH
59946: LD_INT 3
59948: PLUS
59949: PUSH
59950: LD_INT 6
59952: MOD
59953: ST_TO_ADDR
// end ;
59954: LD_VAR 0 2
59958: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59959: LD_INT 0
59961: PPUSH
59962: PPUSH
59963: PPUSH
59964: PPUSH
59965: PPUSH
// if not hexes then
59966: LD_VAR 0 2
59970: NOT
59971: IFFALSE 59975
// exit ;
59973: GO 60123
// dist := 9999 ;
59975: LD_ADDR_VAR 0 5
59979: PUSH
59980: LD_INT 9999
59982: ST_TO_ADDR
// for i = 1 to hexes do
59983: LD_ADDR_VAR 0 4
59987: PUSH
59988: DOUBLE
59989: LD_INT 1
59991: DEC
59992: ST_TO_ADDR
59993: LD_VAR 0 2
59997: PUSH
59998: FOR_TO
59999: IFFALSE 60111
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60001: LD_VAR 0 1
60005: PPUSH
60006: LD_VAR 0 2
60010: PUSH
60011: LD_VAR 0 4
60015: ARRAY
60016: PUSH
60017: LD_INT 1
60019: ARRAY
60020: PPUSH
60021: LD_VAR 0 2
60025: PUSH
60026: LD_VAR 0 4
60030: ARRAY
60031: PUSH
60032: LD_INT 2
60034: ARRAY
60035: PPUSH
60036: CALL_OW 297
60040: PUSH
60041: LD_VAR 0 5
60045: LESS
60046: IFFALSE 60109
// begin hex := hexes [ i ] ;
60048: LD_ADDR_VAR 0 7
60052: PUSH
60053: LD_VAR 0 2
60057: PUSH
60058: LD_VAR 0 4
60062: ARRAY
60063: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60064: LD_ADDR_VAR 0 5
60068: PUSH
60069: LD_VAR 0 1
60073: PPUSH
60074: LD_VAR 0 2
60078: PUSH
60079: LD_VAR 0 4
60083: ARRAY
60084: PUSH
60085: LD_INT 1
60087: ARRAY
60088: PPUSH
60089: LD_VAR 0 2
60093: PUSH
60094: LD_VAR 0 4
60098: ARRAY
60099: PUSH
60100: LD_INT 2
60102: ARRAY
60103: PPUSH
60104: CALL_OW 297
60108: ST_TO_ADDR
// end ; end ;
60109: GO 59998
60111: POP
60112: POP
// result := hex ;
60113: LD_ADDR_VAR 0 3
60117: PUSH
60118: LD_VAR 0 7
60122: ST_TO_ADDR
// end ;
60123: LD_VAR 0 3
60127: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60128: LD_INT 0
60130: PPUSH
60131: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60132: LD_VAR 0 1
60136: NOT
60137: PUSH
60138: LD_VAR 0 1
60142: PUSH
60143: LD_INT 21
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 23
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PPUSH
60167: CALL_OW 69
60171: IN
60172: NOT
60173: OR
60174: IFFALSE 60178
// exit ;
60176: GO 60225
// for i = 1 to 3 do
60178: LD_ADDR_VAR 0 3
60182: PUSH
60183: DOUBLE
60184: LD_INT 1
60186: DEC
60187: ST_TO_ADDR
60188: LD_INT 3
60190: PUSH
60191: FOR_TO
60192: IFFALSE 60223
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60194: LD_VAR 0 1
60198: PPUSH
60199: CALL_OW 250
60203: PPUSH
60204: LD_VAR 0 1
60208: PPUSH
60209: CALL_OW 251
60213: PPUSH
60214: LD_INT 1
60216: PPUSH
60217: CALL_OW 453
60221: GO 60191
60223: POP
60224: POP
// end ;
60225: LD_VAR 0 2
60229: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60230: LD_INT 0
60232: PPUSH
60233: PPUSH
60234: PPUSH
60235: PPUSH
60236: PPUSH
60237: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60238: LD_VAR 0 1
60242: NOT
60243: PUSH
60244: LD_VAR 0 2
60248: NOT
60249: OR
60250: PUSH
60251: LD_VAR 0 1
60255: PPUSH
60256: CALL_OW 314
60260: OR
60261: IFFALSE 60265
// exit ;
60263: GO 60706
// x := GetX ( enemy_unit ) ;
60265: LD_ADDR_VAR 0 7
60269: PUSH
60270: LD_VAR 0 2
60274: PPUSH
60275: CALL_OW 250
60279: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60280: LD_ADDR_VAR 0 8
60284: PUSH
60285: LD_VAR 0 2
60289: PPUSH
60290: CALL_OW 251
60294: ST_TO_ADDR
// if not x or not y then
60295: LD_VAR 0 7
60299: NOT
60300: PUSH
60301: LD_VAR 0 8
60305: NOT
60306: OR
60307: IFFALSE 60311
// exit ;
60309: GO 60706
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60311: LD_ADDR_VAR 0 6
60315: PUSH
60316: LD_VAR 0 7
60320: PPUSH
60321: LD_INT 0
60323: PPUSH
60324: LD_INT 4
60326: PPUSH
60327: CALL_OW 272
60331: PUSH
60332: LD_VAR 0 8
60336: PPUSH
60337: LD_INT 0
60339: PPUSH
60340: LD_INT 4
60342: PPUSH
60343: CALL_OW 273
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_VAR 0 7
60356: PPUSH
60357: LD_INT 1
60359: PPUSH
60360: LD_INT 4
60362: PPUSH
60363: CALL_OW 272
60367: PUSH
60368: LD_VAR 0 8
60372: PPUSH
60373: LD_INT 1
60375: PPUSH
60376: LD_INT 4
60378: PPUSH
60379: CALL_OW 273
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_VAR 0 7
60392: PPUSH
60393: LD_INT 2
60395: PPUSH
60396: LD_INT 4
60398: PPUSH
60399: CALL_OW 272
60403: PUSH
60404: LD_VAR 0 8
60408: PPUSH
60409: LD_INT 2
60411: PPUSH
60412: LD_INT 4
60414: PPUSH
60415: CALL_OW 273
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_VAR 0 7
60428: PPUSH
60429: LD_INT 3
60431: PPUSH
60432: LD_INT 4
60434: PPUSH
60435: CALL_OW 272
60439: PUSH
60440: LD_VAR 0 8
60444: PPUSH
60445: LD_INT 3
60447: PPUSH
60448: LD_INT 4
60450: PPUSH
60451: CALL_OW 273
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_VAR 0 7
60464: PPUSH
60465: LD_INT 4
60467: PPUSH
60468: LD_INT 4
60470: PPUSH
60471: CALL_OW 272
60475: PUSH
60476: LD_VAR 0 8
60480: PPUSH
60481: LD_INT 4
60483: PPUSH
60484: LD_INT 4
60486: PPUSH
60487: CALL_OW 273
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_VAR 0 7
60500: PPUSH
60501: LD_INT 5
60503: PPUSH
60504: LD_INT 4
60506: PPUSH
60507: CALL_OW 272
60511: PUSH
60512: LD_VAR 0 8
60516: PPUSH
60517: LD_INT 5
60519: PPUSH
60520: LD_INT 4
60522: PPUSH
60523: CALL_OW 273
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: ST_TO_ADDR
// for i = tmp downto 1 do
60540: LD_ADDR_VAR 0 4
60544: PUSH
60545: DOUBLE
60546: LD_VAR 0 6
60550: INC
60551: ST_TO_ADDR
60552: LD_INT 1
60554: PUSH
60555: FOR_DOWNTO
60556: IFFALSE 60657
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60558: LD_VAR 0 6
60562: PUSH
60563: LD_VAR 0 4
60567: ARRAY
60568: PUSH
60569: LD_INT 1
60571: ARRAY
60572: PPUSH
60573: LD_VAR 0 6
60577: PUSH
60578: LD_VAR 0 4
60582: ARRAY
60583: PUSH
60584: LD_INT 2
60586: ARRAY
60587: PPUSH
60588: CALL_OW 488
60592: NOT
60593: PUSH
60594: LD_VAR 0 6
60598: PUSH
60599: LD_VAR 0 4
60603: ARRAY
60604: PUSH
60605: LD_INT 1
60607: ARRAY
60608: PPUSH
60609: LD_VAR 0 6
60613: PUSH
60614: LD_VAR 0 4
60618: ARRAY
60619: PUSH
60620: LD_INT 2
60622: ARRAY
60623: PPUSH
60624: CALL_OW 428
60628: PUSH
60629: LD_INT 0
60631: NONEQUAL
60632: OR
60633: IFFALSE 60655
// tmp := Delete ( tmp , i ) ;
60635: LD_ADDR_VAR 0 6
60639: PUSH
60640: LD_VAR 0 6
60644: PPUSH
60645: LD_VAR 0 4
60649: PPUSH
60650: CALL_OW 3
60654: ST_TO_ADDR
60655: GO 60555
60657: POP
60658: POP
// j := GetClosestHex ( unit , tmp ) ;
60659: LD_ADDR_VAR 0 5
60663: PUSH
60664: LD_VAR 0 1
60668: PPUSH
60669: LD_VAR 0 6
60673: PPUSH
60674: CALL 59959 0 2
60678: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60679: LD_VAR 0 1
60683: PPUSH
60684: LD_VAR 0 5
60688: PUSH
60689: LD_INT 1
60691: ARRAY
60692: PPUSH
60693: LD_VAR 0 5
60697: PUSH
60698: LD_INT 2
60700: ARRAY
60701: PPUSH
60702: CALL_OW 111
// end ;
60706: LD_VAR 0 3
60710: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60711: LD_INT 0
60713: PPUSH
60714: PPUSH
60715: PPUSH
// uc_side = 0 ;
60716: LD_ADDR_OWVAR 20
60720: PUSH
60721: LD_INT 0
60723: ST_TO_ADDR
// uc_nation = 0 ;
60724: LD_ADDR_OWVAR 21
60728: PUSH
60729: LD_INT 0
60731: ST_TO_ADDR
// InitHc ;
60732: CALL_OW 19
// InitVc ;
60736: CALL_OW 20
// if mastodonts then
60740: LD_VAR 0 6
60744: IFFALSE 60811
// for i = 1 to mastodonts do
60746: LD_ADDR_VAR 0 11
60750: PUSH
60751: DOUBLE
60752: LD_INT 1
60754: DEC
60755: ST_TO_ADDR
60756: LD_VAR 0 6
60760: PUSH
60761: FOR_TO
60762: IFFALSE 60809
// begin vc_chassis := 31 ;
60764: LD_ADDR_OWVAR 37
60768: PUSH
60769: LD_INT 31
60771: ST_TO_ADDR
// vc_control := control_rider ;
60772: LD_ADDR_OWVAR 38
60776: PUSH
60777: LD_INT 4
60779: ST_TO_ADDR
// animal := CreateVehicle ;
60780: LD_ADDR_VAR 0 12
60784: PUSH
60785: CALL_OW 45
60789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60790: LD_VAR 0 12
60794: PPUSH
60795: LD_VAR 0 8
60799: PPUSH
60800: LD_INT 0
60802: PPUSH
60803: CALL 62880 0 3
// end ;
60807: GO 60761
60809: POP
60810: POP
// if horses then
60811: LD_VAR 0 5
60815: IFFALSE 60882
// for i = 1 to horses do
60817: LD_ADDR_VAR 0 11
60821: PUSH
60822: DOUBLE
60823: LD_INT 1
60825: DEC
60826: ST_TO_ADDR
60827: LD_VAR 0 5
60831: PUSH
60832: FOR_TO
60833: IFFALSE 60880
// begin hc_class := 21 ;
60835: LD_ADDR_OWVAR 28
60839: PUSH
60840: LD_INT 21
60842: ST_TO_ADDR
// hc_gallery :=  ;
60843: LD_ADDR_OWVAR 33
60847: PUSH
60848: LD_STRING 
60850: ST_TO_ADDR
// animal := CreateHuman ;
60851: LD_ADDR_VAR 0 12
60855: PUSH
60856: CALL_OW 44
60860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60861: LD_VAR 0 12
60865: PPUSH
60866: LD_VAR 0 8
60870: PPUSH
60871: LD_INT 0
60873: PPUSH
60874: CALL 62880 0 3
// end ;
60878: GO 60832
60880: POP
60881: POP
// if birds then
60882: LD_VAR 0 1
60886: IFFALSE 60953
// for i = 1 to birds do
60888: LD_ADDR_VAR 0 11
60892: PUSH
60893: DOUBLE
60894: LD_INT 1
60896: DEC
60897: ST_TO_ADDR
60898: LD_VAR 0 1
60902: PUSH
60903: FOR_TO
60904: IFFALSE 60951
// begin hc_class = 18 ;
60906: LD_ADDR_OWVAR 28
60910: PUSH
60911: LD_INT 18
60913: ST_TO_ADDR
// hc_gallery =  ;
60914: LD_ADDR_OWVAR 33
60918: PUSH
60919: LD_STRING 
60921: ST_TO_ADDR
// animal := CreateHuman ;
60922: LD_ADDR_VAR 0 12
60926: PUSH
60927: CALL_OW 44
60931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60932: LD_VAR 0 12
60936: PPUSH
60937: LD_VAR 0 8
60941: PPUSH
60942: LD_INT 0
60944: PPUSH
60945: CALL 62880 0 3
// end ;
60949: GO 60903
60951: POP
60952: POP
// if tigers then
60953: LD_VAR 0 2
60957: IFFALSE 61041
// for i = 1 to tigers do
60959: LD_ADDR_VAR 0 11
60963: PUSH
60964: DOUBLE
60965: LD_INT 1
60967: DEC
60968: ST_TO_ADDR
60969: LD_VAR 0 2
60973: PUSH
60974: FOR_TO
60975: IFFALSE 61039
// begin hc_class = class_tiger ;
60977: LD_ADDR_OWVAR 28
60981: PUSH
60982: LD_INT 14
60984: ST_TO_ADDR
// hc_gallery =  ;
60985: LD_ADDR_OWVAR 33
60989: PUSH
60990: LD_STRING 
60992: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60993: LD_ADDR_OWVAR 35
60997: PUSH
60998: LD_INT 7
61000: NEG
61001: PPUSH
61002: LD_INT 7
61004: PPUSH
61005: CALL_OW 12
61009: ST_TO_ADDR
// animal := CreateHuman ;
61010: LD_ADDR_VAR 0 12
61014: PUSH
61015: CALL_OW 44
61019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61020: LD_VAR 0 12
61024: PPUSH
61025: LD_VAR 0 8
61029: PPUSH
61030: LD_INT 0
61032: PPUSH
61033: CALL 62880 0 3
// end ;
61037: GO 60974
61039: POP
61040: POP
// if apemans then
61041: LD_VAR 0 3
61045: IFFALSE 61168
// for i = 1 to apemans do
61047: LD_ADDR_VAR 0 11
61051: PUSH
61052: DOUBLE
61053: LD_INT 1
61055: DEC
61056: ST_TO_ADDR
61057: LD_VAR 0 3
61061: PUSH
61062: FOR_TO
61063: IFFALSE 61166
// begin hc_class = class_apeman ;
61065: LD_ADDR_OWVAR 28
61069: PUSH
61070: LD_INT 12
61072: ST_TO_ADDR
// hc_gallery =  ;
61073: LD_ADDR_OWVAR 33
61077: PUSH
61078: LD_STRING 
61080: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61081: LD_ADDR_OWVAR 35
61085: PUSH
61086: LD_INT 5
61088: NEG
61089: PPUSH
61090: LD_INT 5
61092: PPUSH
61093: CALL_OW 12
61097: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61098: LD_ADDR_OWVAR 31
61102: PUSH
61103: LD_INT 1
61105: PPUSH
61106: LD_INT 3
61108: PPUSH
61109: CALL_OW 12
61113: PUSH
61114: LD_INT 1
61116: PPUSH
61117: LD_INT 3
61119: PPUSH
61120: CALL_OW 12
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: ST_TO_ADDR
// animal := CreateHuman ;
61137: LD_ADDR_VAR 0 12
61141: PUSH
61142: CALL_OW 44
61146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61147: LD_VAR 0 12
61151: PPUSH
61152: LD_VAR 0 8
61156: PPUSH
61157: LD_INT 0
61159: PPUSH
61160: CALL 62880 0 3
// end ;
61164: GO 61062
61166: POP
61167: POP
// if enchidnas then
61168: LD_VAR 0 4
61172: IFFALSE 61239
// for i = 1 to enchidnas do
61174: LD_ADDR_VAR 0 11
61178: PUSH
61179: DOUBLE
61180: LD_INT 1
61182: DEC
61183: ST_TO_ADDR
61184: LD_VAR 0 4
61188: PUSH
61189: FOR_TO
61190: IFFALSE 61237
// begin hc_class = 13 ;
61192: LD_ADDR_OWVAR 28
61196: PUSH
61197: LD_INT 13
61199: ST_TO_ADDR
// hc_gallery =  ;
61200: LD_ADDR_OWVAR 33
61204: PUSH
61205: LD_STRING 
61207: ST_TO_ADDR
// animal := CreateHuman ;
61208: LD_ADDR_VAR 0 12
61212: PUSH
61213: CALL_OW 44
61217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61218: LD_VAR 0 12
61222: PPUSH
61223: LD_VAR 0 8
61227: PPUSH
61228: LD_INT 0
61230: PPUSH
61231: CALL 62880 0 3
// end ;
61235: GO 61189
61237: POP
61238: POP
// if fishes then
61239: LD_VAR 0 7
61243: IFFALSE 61310
// for i = 1 to fishes do
61245: LD_ADDR_VAR 0 11
61249: PUSH
61250: DOUBLE
61251: LD_INT 1
61253: DEC
61254: ST_TO_ADDR
61255: LD_VAR 0 7
61259: PUSH
61260: FOR_TO
61261: IFFALSE 61308
// begin hc_class = 20 ;
61263: LD_ADDR_OWVAR 28
61267: PUSH
61268: LD_INT 20
61270: ST_TO_ADDR
// hc_gallery =  ;
61271: LD_ADDR_OWVAR 33
61275: PUSH
61276: LD_STRING 
61278: ST_TO_ADDR
// animal := CreateHuman ;
61279: LD_ADDR_VAR 0 12
61283: PUSH
61284: CALL_OW 44
61288: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61289: LD_VAR 0 12
61293: PPUSH
61294: LD_VAR 0 9
61298: PPUSH
61299: LD_INT 0
61301: PPUSH
61302: CALL 62880 0 3
// end ;
61306: GO 61260
61308: POP
61309: POP
// end ;
61310: LD_VAR 0 10
61314: RET
// export function WantHeal ( sci , unit ) ; begin
61315: LD_INT 0
61317: PPUSH
// if GetTaskList ( sci ) > 0 then
61318: LD_VAR 0 1
61322: PPUSH
61323: CALL_OW 437
61327: PUSH
61328: LD_INT 0
61330: GREATER
61331: IFFALSE 61401
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61333: LD_VAR 0 1
61337: PPUSH
61338: CALL_OW 437
61342: PUSH
61343: LD_INT 1
61345: ARRAY
61346: PUSH
61347: LD_INT 1
61349: ARRAY
61350: PUSH
61351: LD_STRING l
61353: EQUAL
61354: PUSH
61355: LD_VAR 0 1
61359: PPUSH
61360: CALL_OW 437
61364: PUSH
61365: LD_INT 1
61367: ARRAY
61368: PUSH
61369: LD_INT 4
61371: ARRAY
61372: PUSH
61373: LD_VAR 0 2
61377: EQUAL
61378: AND
61379: IFFALSE 61391
// result := true else
61381: LD_ADDR_VAR 0 3
61385: PUSH
61386: LD_INT 1
61388: ST_TO_ADDR
61389: GO 61399
// result := false ;
61391: LD_ADDR_VAR 0 3
61395: PUSH
61396: LD_INT 0
61398: ST_TO_ADDR
// end else
61399: GO 61409
// result := false ;
61401: LD_ADDR_VAR 0 3
61405: PUSH
61406: LD_INT 0
61408: ST_TO_ADDR
// end ;
61409: LD_VAR 0 3
61413: RET
// export function HealTarget ( sci ) ; begin
61414: LD_INT 0
61416: PPUSH
// if not sci then
61417: LD_VAR 0 1
61421: NOT
61422: IFFALSE 61426
// exit ;
61424: GO 61491
// result := 0 ;
61426: LD_ADDR_VAR 0 2
61430: PUSH
61431: LD_INT 0
61433: ST_TO_ADDR
// if GetTaskList ( sci ) then
61434: LD_VAR 0 1
61438: PPUSH
61439: CALL_OW 437
61443: IFFALSE 61491
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61445: LD_VAR 0 1
61449: PPUSH
61450: CALL_OW 437
61454: PUSH
61455: LD_INT 1
61457: ARRAY
61458: PUSH
61459: LD_INT 1
61461: ARRAY
61462: PUSH
61463: LD_STRING l
61465: EQUAL
61466: IFFALSE 61491
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61468: LD_ADDR_VAR 0 2
61472: PUSH
61473: LD_VAR 0 1
61477: PPUSH
61478: CALL_OW 437
61482: PUSH
61483: LD_INT 1
61485: ARRAY
61486: PUSH
61487: LD_INT 4
61489: ARRAY
61490: ST_TO_ADDR
// end ;
61491: LD_VAR 0 2
61495: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61496: LD_INT 0
61498: PPUSH
61499: PPUSH
61500: PPUSH
61501: PPUSH
// if not base_units then
61502: LD_VAR 0 1
61506: NOT
61507: IFFALSE 61511
// exit ;
61509: GO 61598
// result := false ;
61511: LD_ADDR_VAR 0 2
61515: PUSH
61516: LD_INT 0
61518: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61519: LD_ADDR_VAR 0 5
61523: PUSH
61524: LD_VAR 0 1
61528: PPUSH
61529: LD_INT 21
61531: PUSH
61532: LD_INT 3
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PPUSH
61539: CALL_OW 72
61543: ST_TO_ADDR
// if not tmp then
61544: LD_VAR 0 5
61548: NOT
61549: IFFALSE 61553
// exit ;
61551: GO 61598
// for i in tmp do
61553: LD_ADDR_VAR 0 3
61557: PUSH
61558: LD_VAR 0 5
61562: PUSH
61563: FOR_IN
61564: IFFALSE 61596
// begin result := EnemyInRange ( i , 22 ) ;
61566: LD_ADDR_VAR 0 2
61570: PUSH
61571: LD_VAR 0 3
61575: PPUSH
61576: LD_INT 22
61578: PPUSH
61579: CALL 59834 0 2
61583: ST_TO_ADDR
// if result then
61584: LD_VAR 0 2
61588: IFFALSE 61594
// exit ;
61590: POP
61591: POP
61592: GO 61598
// end ;
61594: GO 61563
61596: POP
61597: POP
// end ;
61598: LD_VAR 0 2
61602: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61603: LD_INT 0
61605: PPUSH
61606: PPUSH
// if not units then
61607: LD_VAR 0 1
61611: NOT
61612: IFFALSE 61616
// exit ;
61614: GO 61686
// result := [ ] ;
61616: LD_ADDR_VAR 0 3
61620: PUSH
61621: EMPTY
61622: ST_TO_ADDR
// for i in units do
61623: LD_ADDR_VAR 0 4
61627: PUSH
61628: LD_VAR 0 1
61632: PUSH
61633: FOR_IN
61634: IFFALSE 61684
// if GetTag ( i ) = tag then
61636: LD_VAR 0 4
61640: PPUSH
61641: CALL_OW 110
61645: PUSH
61646: LD_VAR 0 2
61650: EQUAL
61651: IFFALSE 61682
// result := Insert ( result , result + 1 , i ) ;
61653: LD_ADDR_VAR 0 3
61657: PUSH
61658: LD_VAR 0 3
61662: PPUSH
61663: LD_VAR 0 3
61667: PUSH
61668: LD_INT 1
61670: PLUS
61671: PPUSH
61672: LD_VAR 0 4
61676: PPUSH
61677: CALL_OW 2
61681: ST_TO_ADDR
61682: GO 61633
61684: POP
61685: POP
// end ;
61686: LD_VAR 0 3
61690: RET
// export function IsDriver ( un ) ; begin
61691: LD_INT 0
61693: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61694: LD_ADDR_VAR 0 2
61698: PUSH
61699: LD_VAR 0 1
61703: PUSH
61704: LD_INT 55
61706: PUSH
61707: EMPTY
61708: LIST
61709: PPUSH
61710: CALL_OW 69
61714: IN
61715: ST_TO_ADDR
// end ;
61716: LD_VAR 0 2
61720: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61721: LD_INT 0
61723: PPUSH
61724: PPUSH
// list := [ ] ;
61725: LD_ADDR_VAR 0 5
61729: PUSH
61730: EMPTY
61731: ST_TO_ADDR
// case d of 0 :
61732: LD_VAR 0 3
61736: PUSH
61737: LD_INT 0
61739: DOUBLE
61740: EQUAL
61741: IFTRUE 61745
61743: GO 61878
61745: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61746: LD_ADDR_VAR 0 5
61750: PUSH
61751: LD_VAR 0 1
61755: PUSH
61756: LD_INT 4
61758: MINUS
61759: PUSH
61760: LD_VAR 0 2
61764: PUSH
61765: LD_INT 4
61767: MINUS
61768: PUSH
61769: LD_INT 2
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: PUSH
61777: LD_VAR 0 1
61781: PUSH
61782: LD_INT 3
61784: MINUS
61785: PUSH
61786: LD_VAR 0 2
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: LIST
61798: PUSH
61799: LD_VAR 0 1
61803: PUSH
61804: LD_INT 4
61806: PLUS
61807: PUSH
61808: LD_VAR 0 2
61812: PUSH
61813: LD_INT 4
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: LIST
61820: PUSH
61821: LD_VAR 0 1
61825: PUSH
61826: LD_INT 3
61828: PLUS
61829: PUSH
61830: LD_VAR 0 2
61834: PUSH
61835: LD_INT 3
61837: PLUS
61838: PUSH
61839: LD_INT 5
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: LIST
61846: PUSH
61847: LD_VAR 0 1
61851: PUSH
61852: LD_VAR 0 2
61856: PUSH
61857: LD_INT 4
61859: PLUS
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: LIST
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: ST_TO_ADDR
// end ; 1 :
61876: GO 62576
61878: LD_INT 1
61880: DOUBLE
61881: EQUAL
61882: IFTRUE 61886
61884: GO 62019
61886: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61887: LD_ADDR_VAR 0 5
61891: PUSH
61892: LD_VAR 0 1
61896: PUSH
61897: LD_VAR 0 2
61901: PUSH
61902: LD_INT 4
61904: MINUS
61905: PUSH
61906: LD_INT 3
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: PUSH
61914: LD_VAR 0 1
61918: PUSH
61919: LD_INT 3
61921: MINUS
61922: PUSH
61923: LD_VAR 0 2
61927: PUSH
61928: LD_INT 3
61930: MINUS
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: LIST
61939: PUSH
61940: LD_VAR 0 1
61944: PUSH
61945: LD_INT 4
61947: MINUS
61948: PUSH
61949: LD_VAR 0 2
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: PUSH
61962: LD_VAR 0 1
61966: PUSH
61967: LD_VAR 0 2
61971: PUSH
61972: LD_INT 3
61974: PLUS
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: PUSH
61984: LD_VAR 0 1
61988: PUSH
61989: LD_INT 4
61991: PLUS
61992: PUSH
61993: LD_VAR 0 2
61997: PUSH
61998: LD_INT 4
62000: PLUS
62001: PUSH
62002: LD_INT 5
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: LIST
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: ST_TO_ADDR
// end ; 2 :
62017: GO 62576
62019: LD_INT 2
62021: DOUBLE
62022: EQUAL
62023: IFTRUE 62027
62025: GO 62156
62027: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62028: LD_ADDR_VAR 0 5
62032: PUSH
62033: LD_VAR 0 1
62037: PUSH
62038: LD_VAR 0 2
62042: PUSH
62043: LD_INT 3
62045: MINUS
62046: PUSH
62047: LD_INT 3
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: LIST
62054: PUSH
62055: LD_VAR 0 1
62059: PUSH
62060: LD_INT 4
62062: PLUS
62063: PUSH
62064: LD_VAR 0 2
62068: PUSH
62069: LD_INT 4
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: LIST
62076: PUSH
62077: LD_VAR 0 1
62081: PUSH
62082: LD_VAR 0 2
62086: PUSH
62087: LD_INT 4
62089: PLUS
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: LIST
62098: PUSH
62099: LD_VAR 0 1
62103: PUSH
62104: LD_INT 3
62106: MINUS
62107: PUSH
62108: LD_VAR 0 2
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: PUSH
62121: LD_VAR 0 1
62125: PUSH
62126: LD_INT 4
62128: MINUS
62129: PUSH
62130: LD_VAR 0 2
62134: PUSH
62135: LD_INT 4
62137: MINUS
62138: PUSH
62139: LD_INT 2
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: LIST
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: ST_TO_ADDR
// end ; 3 :
62154: GO 62576
62156: LD_INT 3
62158: DOUBLE
62159: EQUAL
62160: IFTRUE 62164
62162: GO 62297
62164: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62165: LD_ADDR_VAR 0 5
62169: PUSH
62170: LD_VAR 0 1
62174: PUSH
62175: LD_INT 3
62177: PLUS
62178: PUSH
62179: LD_VAR 0 2
62183: PUSH
62184: LD_INT 4
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: LIST
62191: PUSH
62192: LD_VAR 0 1
62196: PUSH
62197: LD_INT 4
62199: PLUS
62200: PUSH
62201: LD_VAR 0 2
62205: PUSH
62206: LD_INT 4
62208: PLUS
62209: PUSH
62210: LD_INT 5
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: PUSH
62218: LD_VAR 0 1
62222: PUSH
62223: LD_INT 4
62225: MINUS
62226: PUSH
62227: LD_VAR 0 2
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: LIST
62239: PUSH
62240: LD_VAR 0 1
62244: PUSH
62245: LD_VAR 0 2
62249: PUSH
62250: LD_INT 4
62252: MINUS
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: LIST
62261: PUSH
62262: LD_VAR 0 1
62266: PUSH
62267: LD_INT 3
62269: MINUS
62270: PUSH
62271: LD_VAR 0 2
62275: PUSH
62276: LD_INT 3
62278: MINUS
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: ST_TO_ADDR
// end ; 4 :
62295: GO 62576
62297: LD_INT 4
62299: DOUBLE
62300: EQUAL
62301: IFTRUE 62305
62303: GO 62438
62305: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62306: LD_ADDR_VAR 0 5
62310: PUSH
62311: LD_VAR 0 1
62315: PUSH
62316: LD_VAR 0 2
62320: PUSH
62321: LD_INT 4
62323: PLUS
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: LIST
62332: PUSH
62333: LD_VAR 0 1
62337: PUSH
62338: LD_INT 3
62340: PLUS
62341: PUSH
62342: LD_VAR 0 2
62346: PUSH
62347: LD_INT 3
62349: PLUS
62350: PUSH
62351: LD_INT 5
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: LIST
62358: PUSH
62359: LD_VAR 0 1
62363: PUSH
62364: LD_INT 4
62366: PLUS
62367: PUSH
62368: LD_VAR 0 2
62372: PUSH
62373: LD_INT 4
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: LIST
62380: PUSH
62381: LD_VAR 0 1
62385: PUSH
62386: LD_VAR 0 2
62390: PUSH
62391: LD_INT 3
62393: MINUS
62394: PUSH
62395: LD_INT 3
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: LIST
62402: PUSH
62403: LD_VAR 0 1
62407: PUSH
62408: LD_INT 4
62410: MINUS
62411: PUSH
62412: LD_VAR 0 2
62416: PUSH
62417: LD_INT 4
62419: MINUS
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: LIST
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: ST_TO_ADDR
// end ; 5 :
62436: GO 62576
62438: LD_INT 5
62440: DOUBLE
62441: EQUAL
62442: IFTRUE 62446
62444: GO 62575
62446: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62447: LD_ADDR_VAR 0 5
62451: PUSH
62452: LD_VAR 0 1
62456: PUSH
62457: LD_INT 4
62459: MINUS
62460: PUSH
62461: LD_VAR 0 2
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: PUSH
62474: LD_VAR 0 1
62478: PUSH
62479: LD_VAR 0 2
62483: PUSH
62484: LD_INT 4
62486: MINUS
62487: PUSH
62488: LD_INT 3
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: PUSH
62496: LD_VAR 0 1
62500: PUSH
62501: LD_INT 4
62503: PLUS
62504: PUSH
62505: LD_VAR 0 2
62509: PUSH
62510: LD_INT 4
62512: PLUS
62513: PUSH
62514: LD_INT 5
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: PUSH
62522: LD_VAR 0 1
62526: PUSH
62527: LD_INT 3
62529: PLUS
62530: PUSH
62531: LD_VAR 0 2
62535: PUSH
62536: LD_INT 4
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: PUSH
62544: LD_VAR 0 1
62548: PUSH
62549: LD_VAR 0 2
62553: PUSH
62554: LD_INT 3
62556: PLUS
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: LIST
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: ST_TO_ADDR
// end ; end ;
62573: GO 62576
62575: POP
// result := list ;
62576: LD_ADDR_VAR 0 4
62580: PUSH
62581: LD_VAR 0 5
62585: ST_TO_ADDR
// end ;
62586: LD_VAR 0 4
62590: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62591: LD_INT 0
62593: PPUSH
62594: PPUSH
62595: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62596: LD_VAR 0 1
62600: NOT
62601: PUSH
62602: LD_VAR 0 2
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: LD_INT 4
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: IN
62625: NOT
62626: OR
62627: IFFALSE 62631
// exit ;
62629: GO 62723
// tmp := [ ] ;
62631: LD_ADDR_VAR 0 5
62635: PUSH
62636: EMPTY
62637: ST_TO_ADDR
// for i in units do
62638: LD_ADDR_VAR 0 4
62642: PUSH
62643: LD_VAR 0 1
62647: PUSH
62648: FOR_IN
62649: IFFALSE 62692
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62651: LD_ADDR_VAR 0 5
62655: PUSH
62656: LD_VAR 0 5
62660: PPUSH
62661: LD_VAR 0 5
62665: PUSH
62666: LD_INT 1
62668: PLUS
62669: PPUSH
62670: LD_VAR 0 4
62674: PPUSH
62675: LD_VAR 0 2
62679: PPUSH
62680: CALL_OW 259
62684: PPUSH
62685: CALL_OW 2
62689: ST_TO_ADDR
62690: GO 62648
62692: POP
62693: POP
// if not tmp then
62694: LD_VAR 0 5
62698: NOT
62699: IFFALSE 62703
// exit ;
62701: GO 62723
// result := SortListByListDesc ( units , tmp ) ;
62703: LD_ADDR_VAR 0 3
62707: PUSH
62708: LD_VAR 0 1
62712: PPUSH
62713: LD_VAR 0 5
62717: PPUSH
62718: CALL_OW 77
62722: ST_TO_ADDR
// end ;
62723: LD_VAR 0 3
62727: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62728: LD_INT 0
62730: PPUSH
62731: PPUSH
62732: PPUSH
// x := GetX ( building ) ;
62733: LD_ADDR_VAR 0 4
62737: PUSH
62738: LD_VAR 0 2
62742: PPUSH
62743: CALL_OW 250
62747: ST_TO_ADDR
// y := GetY ( building ) ;
62748: LD_ADDR_VAR 0 5
62752: PUSH
62753: LD_VAR 0 2
62757: PPUSH
62758: CALL_OW 251
62762: ST_TO_ADDR
// if GetTaskList ( unit ) then
62763: LD_VAR 0 1
62767: PPUSH
62768: CALL_OW 437
62772: IFFALSE 62867
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62774: LD_STRING e
62776: PUSH
62777: LD_VAR 0 1
62781: PPUSH
62782: CALL_OW 437
62786: PUSH
62787: LD_INT 1
62789: ARRAY
62790: PUSH
62791: LD_INT 1
62793: ARRAY
62794: EQUAL
62795: PUSH
62796: LD_VAR 0 4
62800: PUSH
62801: LD_VAR 0 1
62805: PPUSH
62806: CALL_OW 437
62810: PUSH
62811: LD_INT 1
62813: ARRAY
62814: PUSH
62815: LD_INT 2
62817: ARRAY
62818: EQUAL
62819: AND
62820: PUSH
62821: LD_VAR 0 5
62825: PUSH
62826: LD_VAR 0 1
62830: PPUSH
62831: CALL_OW 437
62835: PUSH
62836: LD_INT 1
62838: ARRAY
62839: PUSH
62840: LD_INT 3
62842: ARRAY
62843: EQUAL
62844: AND
62845: IFFALSE 62857
// result := true else
62847: LD_ADDR_VAR 0 3
62851: PUSH
62852: LD_INT 1
62854: ST_TO_ADDR
62855: GO 62865
// result := false ;
62857: LD_ADDR_VAR 0 3
62861: PUSH
62862: LD_INT 0
62864: ST_TO_ADDR
// end else
62865: GO 62875
// result := false ;
62867: LD_ADDR_VAR 0 3
62871: PUSH
62872: LD_INT 0
62874: ST_TO_ADDR
// end ;
62875: LD_VAR 0 3
62879: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62880: LD_INT 0
62882: PPUSH
62883: PPUSH
62884: PPUSH
62885: PPUSH
// if not unit or not area then
62886: LD_VAR 0 1
62890: NOT
62891: PUSH
62892: LD_VAR 0 2
62896: NOT
62897: OR
62898: IFFALSE 62902
// exit ;
62900: GO 63066
// tmp := AreaToList ( area , i ) ;
62902: LD_ADDR_VAR 0 6
62906: PUSH
62907: LD_VAR 0 2
62911: PPUSH
62912: LD_VAR 0 5
62916: PPUSH
62917: CALL_OW 517
62921: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62922: LD_ADDR_VAR 0 5
62926: PUSH
62927: DOUBLE
62928: LD_INT 1
62930: DEC
62931: ST_TO_ADDR
62932: LD_VAR 0 6
62936: PUSH
62937: LD_INT 1
62939: ARRAY
62940: PUSH
62941: FOR_TO
62942: IFFALSE 63064
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62944: LD_ADDR_VAR 0 7
62948: PUSH
62949: LD_VAR 0 6
62953: PUSH
62954: LD_INT 1
62956: ARRAY
62957: PUSH
62958: LD_VAR 0 5
62962: ARRAY
62963: PUSH
62964: LD_VAR 0 6
62968: PUSH
62969: LD_INT 2
62971: ARRAY
62972: PUSH
62973: LD_VAR 0 5
62977: ARRAY
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62983: LD_VAR 0 7
62987: PUSH
62988: LD_INT 1
62990: ARRAY
62991: PPUSH
62992: LD_VAR 0 7
62996: PUSH
62997: LD_INT 2
62999: ARRAY
63000: PPUSH
63001: CALL_OW 428
63005: PUSH
63006: LD_INT 0
63008: EQUAL
63009: IFFALSE 63062
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63011: LD_VAR 0 1
63015: PPUSH
63016: LD_VAR 0 7
63020: PUSH
63021: LD_INT 1
63023: ARRAY
63024: PPUSH
63025: LD_VAR 0 7
63029: PUSH
63030: LD_INT 2
63032: ARRAY
63033: PPUSH
63034: LD_VAR 0 3
63038: PPUSH
63039: CALL_OW 48
// result := IsPlaced ( unit ) ;
63043: LD_ADDR_VAR 0 4
63047: PUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: CALL_OW 305
63057: ST_TO_ADDR
// exit ;
63058: POP
63059: POP
63060: GO 63066
// end ; end ;
63062: GO 62941
63064: POP
63065: POP
// end ;
63066: LD_VAR 0 4
63070: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63071: LD_INT 0
63073: PPUSH
63074: PPUSH
63075: PPUSH
// if not side or side > 8 then
63076: LD_VAR 0 1
63080: NOT
63081: PUSH
63082: LD_VAR 0 1
63086: PUSH
63087: LD_INT 8
63089: GREATER
63090: OR
63091: IFFALSE 63095
// exit ;
63093: GO 63282
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63095: LD_ADDR_VAR 0 4
63099: PUSH
63100: LD_INT 22
63102: PUSH
63103: LD_VAR 0 1
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 21
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PPUSH
63126: CALL_OW 69
63130: ST_TO_ADDR
// if not tmp then
63131: LD_VAR 0 4
63135: NOT
63136: IFFALSE 63140
// exit ;
63138: GO 63282
// enable_addtolog := true ;
63140: LD_ADDR_OWVAR 81
63144: PUSH
63145: LD_INT 1
63147: ST_TO_ADDR
// AddToLog ( [ ) ;
63148: LD_STRING [
63150: PPUSH
63151: CALL_OW 561
// for i in tmp do
63155: LD_ADDR_VAR 0 3
63159: PUSH
63160: LD_VAR 0 4
63164: PUSH
63165: FOR_IN
63166: IFFALSE 63273
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63168: LD_STRING [
63170: PUSH
63171: LD_VAR 0 3
63175: PPUSH
63176: CALL_OW 266
63180: STR
63181: PUSH
63182: LD_STRING , 
63184: STR
63185: PUSH
63186: LD_VAR 0 3
63190: PPUSH
63191: CALL_OW 250
63195: STR
63196: PUSH
63197: LD_STRING , 
63199: STR
63200: PUSH
63201: LD_VAR 0 3
63205: PPUSH
63206: CALL_OW 251
63210: STR
63211: PUSH
63212: LD_STRING , 
63214: STR
63215: PUSH
63216: LD_VAR 0 3
63220: PPUSH
63221: CALL_OW 254
63225: STR
63226: PUSH
63227: LD_STRING , 
63229: STR
63230: PUSH
63231: LD_VAR 0 3
63235: PPUSH
63236: LD_INT 1
63238: PPUSH
63239: CALL_OW 268
63243: STR
63244: PUSH
63245: LD_STRING , 
63247: STR
63248: PUSH
63249: LD_VAR 0 3
63253: PPUSH
63254: LD_INT 2
63256: PPUSH
63257: CALL_OW 268
63261: STR
63262: PUSH
63263: LD_STRING ],
63265: STR
63266: PPUSH
63267: CALL_OW 561
// end ;
63271: GO 63165
63273: POP
63274: POP
// AddToLog ( ]; ) ;
63275: LD_STRING ];
63277: PPUSH
63278: CALL_OW 561
// end ;
63282: LD_VAR 0 2
63286: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63287: LD_INT 0
63289: PPUSH
63290: PPUSH
63291: PPUSH
63292: PPUSH
63293: PPUSH
// if not area or not rate or not max then
63294: LD_VAR 0 1
63298: NOT
63299: PUSH
63300: LD_VAR 0 2
63304: NOT
63305: OR
63306: PUSH
63307: LD_VAR 0 4
63311: NOT
63312: OR
63313: IFFALSE 63317
// exit ;
63315: GO 63509
// while 1 do
63317: LD_INT 1
63319: IFFALSE 63509
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63321: LD_ADDR_VAR 0 9
63325: PUSH
63326: LD_VAR 0 1
63330: PPUSH
63331: LD_INT 1
63333: PPUSH
63334: CALL_OW 287
63338: PUSH
63339: LD_INT 10
63341: MUL
63342: ST_TO_ADDR
// r := rate / 10 ;
63343: LD_ADDR_VAR 0 7
63347: PUSH
63348: LD_VAR 0 2
63352: PUSH
63353: LD_INT 10
63355: DIVREAL
63356: ST_TO_ADDR
// time := 1 1$00 ;
63357: LD_ADDR_VAR 0 8
63361: PUSH
63362: LD_INT 2100
63364: ST_TO_ADDR
// if amount < min then
63365: LD_VAR 0 9
63369: PUSH
63370: LD_VAR 0 3
63374: LESS
63375: IFFALSE 63393
// r := r * 2 else
63377: LD_ADDR_VAR 0 7
63381: PUSH
63382: LD_VAR 0 7
63386: PUSH
63387: LD_INT 2
63389: MUL
63390: ST_TO_ADDR
63391: GO 63419
// if amount > max then
63393: LD_VAR 0 9
63397: PUSH
63398: LD_VAR 0 4
63402: GREATER
63403: IFFALSE 63419
// r := r / 2 ;
63405: LD_ADDR_VAR 0 7
63409: PUSH
63410: LD_VAR 0 7
63414: PUSH
63415: LD_INT 2
63417: DIVREAL
63418: ST_TO_ADDR
// time := time / r ;
63419: LD_ADDR_VAR 0 8
63423: PUSH
63424: LD_VAR 0 8
63428: PUSH
63429: LD_VAR 0 7
63433: DIVREAL
63434: ST_TO_ADDR
// if time < 0 then
63435: LD_VAR 0 8
63439: PUSH
63440: LD_INT 0
63442: LESS
63443: IFFALSE 63460
// time := time * - 1 ;
63445: LD_ADDR_VAR 0 8
63449: PUSH
63450: LD_VAR 0 8
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: MUL
63459: ST_TO_ADDR
// wait ( time ) ;
63460: LD_VAR 0 8
63464: PPUSH
63465: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63469: LD_INT 35
63471: PPUSH
63472: LD_INT 875
63474: PPUSH
63475: CALL_OW 12
63479: PPUSH
63480: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63484: LD_INT 1
63486: PPUSH
63487: LD_INT 5
63489: PPUSH
63490: CALL_OW 12
63494: PPUSH
63495: LD_VAR 0 1
63499: PPUSH
63500: LD_INT 1
63502: PPUSH
63503: CALL_OW 55
// end ;
63507: GO 63317
// end ;
63509: LD_VAR 0 5
63513: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63514: LD_INT 0
63516: PPUSH
63517: PPUSH
63518: PPUSH
63519: PPUSH
63520: PPUSH
63521: PPUSH
63522: PPUSH
63523: PPUSH
// if not turrets or not factories then
63524: LD_VAR 0 1
63528: NOT
63529: PUSH
63530: LD_VAR 0 2
63534: NOT
63535: OR
63536: IFFALSE 63540
// exit ;
63538: GO 63847
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63540: LD_ADDR_VAR 0 10
63544: PUSH
63545: LD_INT 5
63547: PUSH
63548: LD_INT 6
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: LD_INT 4
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: LD_INT 5
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 24
63582: PUSH
63583: LD_INT 25
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 23
63592: PUSH
63593: LD_INT 27
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 42
63606: PUSH
63607: LD_INT 43
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 44
63616: PUSH
63617: LD_INT 46
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 45
63626: PUSH
63627: LD_INT 47
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: LIST
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: ST_TO_ADDR
// result := [ ] ;
63644: LD_ADDR_VAR 0 3
63648: PUSH
63649: EMPTY
63650: ST_TO_ADDR
// for i in turrets do
63651: LD_ADDR_VAR 0 4
63655: PUSH
63656: LD_VAR 0 1
63660: PUSH
63661: FOR_IN
63662: IFFALSE 63845
// begin nat := GetNation ( i ) ;
63664: LD_ADDR_VAR 0 7
63668: PUSH
63669: LD_VAR 0 4
63673: PPUSH
63674: CALL_OW 248
63678: ST_TO_ADDR
// weapon := 0 ;
63679: LD_ADDR_VAR 0 8
63683: PUSH
63684: LD_INT 0
63686: ST_TO_ADDR
// if not nat then
63687: LD_VAR 0 7
63691: NOT
63692: IFFALSE 63696
// continue ;
63694: GO 63661
// for j in list [ nat ] do
63696: LD_ADDR_VAR 0 5
63700: PUSH
63701: LD_VAR 0 10
63705: PUSH
63706: LD_VAR 0 7
63710: ARRAY
63711: PUSH
63712: FOR_IN
63713: IFFALSE 63754
// if GetBWeapon ( i ) = j [ 1 ] then
63715: LD_VAR 0 4
63719: PPUSH
63720: CALL_OW 269
63724: PUSH
63725: LD_VAR 0 5
63729: PUSH
63730: LD_INT 1
63732: ARRAY
63733: EQUAL
63734: IFFALSE 63752
// begin weapon := j [ 2 ] ;
63736: LD_ADDR_VAR 0 8
63740: PUSH
63741: LD_VAR 0 5
63745: PUSH
63746: LD_INT 2
63748: ARRAY
63749: ST_TO_ADDR
// break ;
63750: GO 63754
// end ;
63752: GO 63712
63754: POP
63755: POP
// if not weapon then
63756: LD_VAR 0 8
63760: NOT
63761: IFFALSE 63765
// continue ;
63763: GO 63661
// for k in factories do
63765: LD_ADDR_VAR 0 6
63769: PUSH
63770: LD_VAR 0 2
63774: PUSH
63775: FOR_IN
63776: IFFALSE 63841
// begin weapons := AvailableWeaponList ( k ) ;
63778: LD_ADDR_VAR 0 9
63782: PUSH
63783: LD_VAR 0 6
63787: PPUSH
63788: CALL_OW 478
63792: ST_TO_ADDR
// if not weapons then
63793: LD_VAR 0 9
63797: NOT
63798: IFFALSE 63802
// continue ;
63800: GO 63775
// if weapon in weapons then
63802: LD_VAR 0 8
63806: PUSH
63807: LD_VAR 0 9
63811: IN
63812: IFFALSE 63839
// begin result := [ i , weapon ] ;
63814: LD_ADDR_VAR 0 3
63818: PUSH
63819: LD_VAR 0 4
63823: PUSH
63824: LD_VAR 0 8
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: ST_TO_ADDR
// exit ;
63833: POP
63834: POP
63835: POP
63836: POP
63837: GO 63847
// end ; end ;
63839: GO 63775
63841: POP
63842: POP
// end ;
63843: GO 63661
63845: POP
63846: POP
// end ;
63847: LD_VAR 0 3
63851: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63852: LD_INT 0
63854: PPUSH
// if not side or side > 8 then
63855: LD_VAR 0 3
63859: NOT
63860: PUSH
63861: LD_VAR 0 3
63865: PUSH
63866: LD_INT 8
63868: GREATER
63869: OR
63870: IFFALSE 63874
// exit ;
63872: GO 63933
// if not range then
63874: LD_VAR 0 4
63878: NOT
63879: IFFALSE 63890
// range := - 12 ;
63881: LD_ADDR_VAR 0 4
63885: PUSH
63886: LD_INT 12
63888: NEG
63889: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63890: LD_VAR 0 1
63894: PPUSH
63895: LD_VAR 0 2
63899: PPUSH
63900: LD_VAR 0 3
63904: PPUSH
63905: LD_VAR 0 4
63909: PPUSH
63910: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63914: LD_VAR 0 1
63918: PPUSH
63919: LD_VAR 0 2
63923: PPUSH
63924: LD_VAR 0 3
63928: PPUSH
63929: CALL_OW 331
// end ;
63933: LD_VAR 0 5
63937: RET
// export function Video ( mode ) ; begin
63938: LD_INT 0
63940: PPUSH
// ingame_video = mode ;
63941: LD_ADDR_OWVAR 52
63945: PUSH
63946: LD_VAR 0 1
63950: ST_TO_ADDR
// interface_hidden = mode ;
63951: LD_ADDR_OWVAR 54
63955: PUSH
63956: LD_VAR 0 1
63960: ST_TO_ADDR
// end ;
63961: LD_VAR 0 2
63965: RET
// export function Join ( array , element ) ; begin
63966: LD_INT 0
63968: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63969: LD_ADDR_VAR 0 3
63973: PUSH
63974: LD_VAR 0 1
63978: PPUSH
63979: LD_VAR 0 1
63983: PUSH
63984: LD_INT 1
63986: PLUS
63987: PPUSH
63988: LD_VAR 0 2
63992: PPUSH
63993: CALL_OW 1
63997: ST_TO_ADDR
// end ;
63998: LD_VAR 0 3
64002: RET
// export function JoinUnion ( array , element ) ; begin
64003: LD_INT 0
64005: PPUSH
// result := array union element ;
64006: LD_ADDR_VAR 0 3
64010: PUSH
64011: LD_VAR 0 1
64015: PUSH
64016: LD_VAR 0 2
64020: UNION
64021: ST_TO_ADDR
// end ;
64022: LD_VAR 0 3
64026: RET
// export function GetBehemoths ( side ) ; begin
64027: LD_INT 0
64029: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64030: LD_ADDR_VAR 0 2
64034: PUSH
64035: LD_INT 22
64037: PUSH
64038: LD_VAR 0 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 31
64049: PUSH
64050: LD_INT 25
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PPUSH
64061: CALL_OW 69
64065: ST_TO_ADDR
// end ;
64066: LD_VAR 0 2
64070: RET
// export function Shuffle ( array ) ; var i , index ; begin
64071: LD_INT 0
64073: PPUSH
64074: PPUSH
64075: PPUSH
// result := [ ] ;
64076: LD_ADDR_VAR 0 2
64080: PUSH
64081: EMPTY
64082: ST_TO_ADDR
// if not array then
64083: LD_VAR 0 1
64087: NOT
64088: IFFALSE 64092
// exit ;
64090: GO 64191
// Randomize ;
64092: CALL_OW 10
// for i = array downto 1 do
64096: LD_ADDR_VAR 0 3
64100: PUSH
64101: DOUBLE
64102: LD_VAR 0 1
64106: INC
64107: ST_TO_ADDR
64108: LD_INT 1
64110: PUSH
64111: FOR_DOWNTO
64112: IFFALSE 64189
// begin index := rand ( 1 , array ) ;
64114: LD_ADDR_VAR 0 4
64118: PUSH
64119: LD_INT 1
64121: PPUSH
64122: LD_VAR 0 1
64126: PPUSH
64127: CALL_OW 12
64131: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64132: LD_ADDR_VAR 0 2
64136: PUSH
64137: LD_VAR 0 2
64141: PPUSH
64142: LD_VAR 0 2
64146: PUSH
64147: LD_INT 1
64149: PLUS
64150: PPUSH
64151: LD_VAR 0 1
64155: PUSH
64156: LD_VAR 0 4
64160: ARRAY
64161: PPUSH
64162: CALL_OW 2
64166: ST_TO_ADDR
// array := Delete ( array , index ) ;
64167: LD_ADDR_VAR 0 1
64171: PUSH
64172: LD_VAR 0 1
64176: PPUSH
64177: LD_VAR 0 4
64181: PPUSH
64182: CALL_OW 3
64186: ST_TO_ADDR
// end ;
64187: GO 64111
64189: POP
64190: POP
// end ;
64191: LD_VAR 0 2
64195: RET
// export function GetBaseMaterials ( base ) ; begin
64196: LD_INT 0
64198: PPUSH
// result := [ 0 , 0 , 0 ] ;
64199: LD_ADDR_VAR 0 2
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: ST_TO_ADDR
// if not base then
64218: LD_VAR 0 1
64222: NOT
64223: IFFALSE 64227
// exit ;
64225: GO 64276
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64227: LD_ADDR_VAR 0 2
64231: PUSH
64232: LD_VAR 0 1
64236: PPUSH
64237: LD_INT 1
64239: PPUSH
64240: CALL_OW 275
64244: PUSH
64245: LD_VAR 0 1
64249: PPUSH
64250: LD_INT 2
64252: PPUSH
64253: CALL_OW 275
64257: PUSH
64258: LD_VAR 0 1
64262: PPUSH
64263: LD_INT 3
64265: PPUSH
64266: CALL_OW 275
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: ST_TO_ADDR
// end ;
64276: LD_VAR 0 2
64280: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64281: LD_INT 0
64283: PPUSH
64284: PPUSH
// result := array ;
64285: LD_ADDR_VAR 0 3
64289: PUSH
64290: LD_VAR 0 1
64294: ST_TO_ADDR
// if size > 0 then
64295: LD_VAR 0 2
64299: PUSH
64300: LD_INT 0
64302: GREATER
64303: IFFALSE 64349
// for i := array downto size do
64305: LD_ADDR_VAR 0 4
64309: PUSH
64310: DOUBLE
64311: LD_VAR 0 1
64315: INC
64316: ST_TO_ADDR
64317: LD_VAR 0 2
64321: PUSH
64322: FOR_DOWNTO
64323: IFFALSE 64347
// result := Delete ( result , result ) ;
64325: LD_ADDR_VAR 0 3
64329: PUSH
64330: LD_VAR 0 3
64334: PPUSH
64335: LD_VAR 0 3
64339: PPUSH
64340: CALL_OW 3
64344: ST_TO_ADDR
64345: GO 64322
64347: POP
64348: POP
// end ;
64349: LD_VAR 0 3
64353: RET
// export function ComExit ( unit ) ; var tmp ; begin
64354: LD_INT 0
64356: PPUSH
64357: PPUSH
// if not IsInUnit ( unit ) then
64358: LD_VAR 0 1
64362: PPUSH
64363: CALL_OW 310
64367: NOT
64368: IFFALSE 64372
// exit ;
64370: GO 64432
// tmp := IsInUnit ( unit ) ;
64372: LD_ADDR_VAR 0 3
64376: PUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: CALL_OW 310
64386: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64387: LD_VAR 0 3
64391: PPUSH
64392: CALL_OW 247
64396: PUSH
64397: LD_INT 2
64399: EQUAL
64400: IFFALSE 64413
// ComExitVehicle ( unit ) else
64402: LD_VAR 0 1
64406: PPUSH
64407: CALL_OW 121
64411: GO 64422
// ComExitBuilding ( unit ) ;
64413: LD_VAR 0 1
64417: PPUSH
64418: CALL_OW 122
// result := tmp ;
64422: LD_ADDR_VAR 0 2
64426: PUSH
64427: LD_VAR 0 3
64431: ST_TO_ADDR
// end ;
64432: LD_VAR 0 2
64436: RET
// export function ResetHc ; begin
64437: LD_INT 0
64439: PPUSH
// InitHc ;
64440: CALL_OW 19
// hc_importance := 0 ;
64444: LD_ADDR_OWVAR 32
64448: PUSH
64449: LD_INT 0
64451: ST_TO_ADDR
// end ;
64452: LD_VAR 0 1
64456: RET
