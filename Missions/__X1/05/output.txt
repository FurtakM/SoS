// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 35 0 0
// InitTag ;
   8: CALL 93 0 0
// PrepareNature ( forestArea , swampArea ) ;
  12: LD_INT 3
  14: PPUSH
  15: LD_INT 2
  17: PPUSH
  18: CALL 560 0 2
// PrepareArabian ;
  22: CALL 2723 0 0
// PrepareRussian ;
  26: CALL 3509 0 0
// Action ;
  30: CALL 3517 0 0
// end ;
  34: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 ; function Init ; begin
  35: LD_INT 0
  37: PPUSH
// debug := true ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_INT 1
  45: ST_TO_ADDR
// prefix := 04_2_ ;
  46: LD_ADDR_EXP 2
  50: PUSH
  51: LD_STRING 04_2_
  53: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 04_1_Flamethrower
  61: PPUSH
  62: LD_EXP 1
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// ibrahimJoinedIn04 = LoadVariable ( 04_2_IbrahimJoined , false ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 04_2_IbrahimJoined
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// end ;
  88: LD_VAR 0 1
  92: RET
// function InitTag ; begin
  93: LD_INT 0
  95: PPUSH
// end ;
  96: LD_VAR 0 1
 100: RET
// every 0 0$1 trigger debug do var i ;
 101: LD_EXP 1
 105: IFFALSE 189
 107: GO 109
 109: DISABLE
 110: LD_INT 0
 112: PPUSH
// begin enable ;
 113: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 114: LD_ADDR_VAR 0 1
 118: PUSH
 119: LD_INT 22
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: LD_INT 3
 131: PUSH
 132: LD_INT 21
 134: PUSH
 135: LD_INT 3
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PPUSH
 150: CALL_OW 69
 154: PUSH
 155: FOR_IN
 156: IFFALSE 187
// if GetLives ( i ) < 1000 then
 158: LD_VAR 0 1
 162: PPUSH
 163: CALL_OW 256
 167: PUSH
 168: LD_INT 1000
 170: LESS
 171: IFFALSE 185
// SetLives ( i , 1000 ) ;
 173: LD_VAR 0 1
 177: PPUSH
 178: LD_INT 1000
 180: PPUSH
 181: CALL_OW 234
 185: GO 155
 187: POP
 188: POP
// end ; end_of_file
 189: PPOPN 1
 191: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 192: LD_INT 0
 194: PPUSH
 195: PPUSH
// if exist_mode then
 196: LD_VAR 0 2
 200: IFFALSE 225
// unit := CreateCharacter ( prefix & ident ) else
 202: LD_ADDR_VAR 0 5
 206: PUSH
 207: LD_VAR 0 3
 211: PUSH
 212: LD_VAR 0 1
 216: STR
 217: PPUSH
 218: CALL_OW 34
 222: ST_TO_ADDR
 223: GO 240
// unit := NewCharacter ( ident ) ;
 225: LD_ADDR_VAR 0 5
 229: PUSH
 230: LD_VAR 0 1
 234: PPUSH
 235: CALL_OW 25
 239: ST_TO_ADDR
// result := unit ;
 240: LD_ADDR_VAR 0 4
 244: PUSH
 245: LD_VAR 0 5
 249: ST_TO_ADDR
// end ;
 250: LD_VAR 0 4
 254: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 255: LD_INT 0
 257: PPUSH
// uc_side := side ;
 258: LD_ADDR_OWVAR 20
 262: PUSH
 263: LD_VAR 0 1
 267: ST_TO_ADDR
// uc_nation := nation ;
 268: LD_ADDR_OWVAR 21
 272: PUSH
 273: LD_VAR 0 2
 277: ST_TO_ADDR
// vc_chassis := chassis ;
 278: LD_ADDR_OWVAR 37
 282: PUSH
 283: LD_VAR 0 3
 287: ST_TO_ADDR
// vc_engine := engine ;
 288: LD_ADDR_OWVAR 39
 292: PUSH
 293: LD_VAR 0 4
 297: ST_TO_ADDR
// vc_control := control ;
 298: LD_ADDR_OWVAR 38
 302: PUSH
 303: LD_VAR 0 5
 307: ST_TO_ADDR
// vc_weapon := weapon ;
 308: LD_ADDR_OWVAR 40
 312: PUSH
 313: LD_VAR 0 6
 317: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 318: LD_ADDR_OWVAR 41
 322: PUSH
 323: LD_VAR 0 7
 327: ST_TO_ADDR
// result := CreateVehicle ;
 328: LD_ADDR_VAR 0 8
 332: PUSH
 333: CALL_OW 45
 337: ST_TO_ADDR
// end ;
 338: LD_VAR 0 8
 342: RET
// export function SayX ( units , ident ) ; var i ; begin
 343: LD_INT 0
 345: PPUSH
 346: PPUSH
// result := false ;
 347: LD_ADDR_VAR 0 3
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// if not units then
 355: LD_VAR 0 1
 359: NOT
 360: IFFALSE 364
// exit ;
 362: GO 418
// for i in units do
 364: LD_ADDR_VAR 0 4
 368: PUSH
 369: LD_VAR 0 1
 373: PUSH
 374: FOR_IN
 375: IFFALSE 416
// if IsOk ( i ) then
 377: LD_VAR 0 4
 381: PPUSH
 382: CALL_OW 302
 386: IFFALSE 414
// begin Say ( i , ident ) ;
 388: LD_VAR 0 4
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 88
// result := i ;
 402: LD_ADDR_VAR 0 3
 406: PUSH
 407: LD_VAR 0 4
 411: ST_TO_ADDR
// break ;
 412: GO 416
// end ;
 414: GO 374
 416: POP
 417: POP
// end ;
 418: LD_VAR 0 3
 422: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 423: LD_INT 0
 425: PPUSH
 426: PPUSH
// InitUc ;
 427: CALL_OW 18
// InitHc ;
 431: CALL_OW 19
// uc_side := 0 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 0
 442: ST_TO_ADDR
// uc_nation := 0 ;
 443: LD_ADDR_OWVAR 21
 447: PUSH
 448: LD_INT 0
 450: ST_TO_ADDR
// for i = 1 to amount do
 451: LD_ADDR_VAR 0 4
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_VAR 0 2
 465: PUSH
 466: FOR_TO
 467: IFFALSE 549
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 469: LD_ADDR_OWVAR 29
 473: PUSH
 474: LD_INT 9
 476: PPUSH
 477: LD_INT 12
 479: PPUSH
 480: CALL_OW 12
 484: PUSH
 485: LD_INT 9
 487: PPUSH
 488: LD_INT 12
 490: PPUSH
 491: CALL_OW 12
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 500: LD_ADDR_OWVAR 35
 504: PUSH
 505: LD_INT 1
 507: NEG
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: CALL_OW 12
 516: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 517: LD_INT 0
 519: PPUSH
 520: LD_INT 12
 522: PPUSH
 523: LD_INT 1
 525: PPUSH
 526: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 530: CALL_OW 44
 534: PPUSH
 535: LD_VAR 0 1
 539: PPUSH
 540: LD_INT 0
 542: PPUSH
 543: CALL_OW 49
// end ;
 547: GO 466
 549: POP
 550: POP
// InitHc ;
 551: CALL_OW 19
// end ;
 555: LD_VAR 0 3
 559: RET
// export function PrepareNature ( forest , swamp ) ; var i ; begin
 560: LD_INT 0
 562: PPUSH
 563: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 564: LD_VAR 0 1
 568: PPUSH
 569: LD_INT 5
 571: PUSH
 572: LD_INT 4
 574: PUSH
 575: LD_INT 4
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: PPUSH
 589: CALL 423 0 2
// for i := 1 to 3 do
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: DOUBLE
 599: LD_INT 1
 601: DEC
 602: ST_TO_ADDR
 603: LD_INT 3
 605: PUSH
 606: FOR_TO
 607: IFFALSE 644
// begin hc_class := 21 ;
 609: LD_ADDR_OWVAR 28
 613: PUSH
 614: LD_INT 21
 616: ST_TO_ADDR
// hc_gallery :=  ;
 617: LD_ADDR_OWVAR 33
 621: PUSH
 622: LD_STRING 
 624: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 625: CALL_OW 44
 629: PPUSH
 630: LD_VAR 0 1
 634: PPUSH
 635: LD_INT 0
 637: PPUSH
 638: CALL_OW 49
// end ;
 642: GO 606
 644: POP
 645: POP
// for i := 1 to 3 do
 646: LD_ADDR_VAR 0 4
 650: PUSH
 651: DOUBLE
 652: LD_INT 1
 654: DEC
 655: ST_TO_ADDR
 656: LD_INT 3
 658: PUSH
 659: FOR_TO
 660: IFFALSE 697
// begin hc_class := 18 ;
 662: LD_ADDR_OWVAR 28
 666: PUSH
 667: LD_INT 18
 669: ST_TO_ADDR
// hc_gallery :=  ;
 670: LD_ADDR_OWVAR 33
 674: PUSH
 675: LD_STRING 
 677: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 678: CALL_OW 44
 682: PPUSH
 683: LD_VAR 0 1
 687: PPUSH
 688: LD_INT 0
 690: PPUSH
 691: CALL_OW 49
// end ;
 695: GO 659
 697: POP
 698: POP
// for i := 1 to 3 do
 699: LD_ADDR_VAR 0 4
 703: PUSH
 704: DOUBLE
 705: LD_INT 1
 707: DEC
 708: ST_TO_ADDR
 709: LD_INT 3
 711: PUSH
 712: FOR_TO
 713: IFFALSE 750
// begin hc_class := 13 ;
 715: LD_ADDR_OWVAR 28
 719: PUSH
 720: LD_INT 13
 722: ST_TO_ADDR
// hc_gallery :=  ;
 723: LD_ADDR_OWVAR 33
 727: PUSH
 728: LD_STRING 
 730: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 731: CALL_OW 44
 735: PPUSH
 736: LD_VAR 0 1
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 49
// end ;
 748: GO 712
 750: POP
 751: POP
// for i := 1 to 4 do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_INT 4
 764: PUSH
 765: FOR_TO
 766: IFFALSE 803
// begin hc_class := class_frog ;
 768: LD_ADDR_OWVAR 28
 772: PUSH
 773: LD_INT 19
 775: ST_TO_ADDR
// hc_gallery :=  ;
 776: LD_ADDR_OWVAR 33
 780: PUSH
 781: LD_STRING 
 783: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 784: CALL_OW 44
 788: PPUSH
 789: LD_VAR 0 2
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 49
// end ;
 801: GO 765
 803: POP
 804: POP
// end ;
 805: LD_VAR 0 3
 809: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 810: LD_INT 0
 812: PPUSH
 813: PPUSH
 814: PPUSH
// if not observer or not unit then
 815: LD_VAR 0 1
 819: NOT
 820: PUSH
 821: LD_VAR 0 2
 825: NOT
 826: OR
 827: IFFALSE 831
// exit ;
 829: GO 879
// if not See ( GetSide ( observer ) , unit ) then
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 255
 840: PPUSH
 841: LD_VAR 0 2
 845: PPUSH
 846: CALL_OW 292
 850: NOT
 851: IFFALSE 855
// exit ;
 853: GO 879
// result := GetDistUnits ( observer , unit ) < 12 ;
 855: LD_ADDR_VAR 0 3
 859: PUSH
 860: LD_VAR 0 1
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 296
 874: PUSH
 875: LD_INT 12
 877: LESS
 878: ST_TO_ADDR
// end ;
 879: LD_VAR 0 3
 883: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 884: LD_INT 0
 886: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 1
 894: ARRAY
 895: PPUSH
 896: LD_VAR 0 2
 900: PUSH
 901: LD_INT 2
 903: ARRAY
 904: PPUSH
 905: CALL_OW 488
 909: PUSH
 910: LD_VAR 0 2
 914: PUSH
 915: LD_INT 1
 917: ARRAY
 918: PPUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 2
 926: ARRAY
 927: PPUSH
 928: CALL_OW 428
 932: PUSH
 933: LD_INT 0
 935: EQUAL
 936: AND
 937: IFFALSE 971
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 939: LD_VAR 0 1
 943: PPUSH
 944: LD_VAR 0 2
 948: PUSH
 949: LD_INT 1
 951: ARRAY
 952: PPUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 2
 960: ARRAY
 961: PPUSH
 962: LD_VAR 0 3
 966: PPUSH
 967: CALL_OW 48
// end ;
 971: LD_VAR 0 4
 975: RET
// export function Video ( mode ) ; begin
 976: LD_INT 0
 978: PPUSH
// ingame_video = mode ;
 979: LD_ADDR_OWVAR 52
 983: PUSH
 984: LD_VAR 0 1
 988: ST_TO_ADDR
// interface_hidden = mode ;
 989: LD_ADDR_OWVAR 54
 993: PUSH
 994: LD_VAR 0 1
 998: ST_TO_ADDR
// end ;
 999: LD_VAR 0 2
1003: RET
// export function ReverseArray ( array ) ; var i ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
// if not array then
1008: LD_VAR 0 1
1012: NOT
1013: IFFALSE 1017
// exit ;
1015: GO 1075
// result := [ ] ;
1017: LD_ADDR_VAR 0 2
1021: PUSH
1022: EMPTY
1023: ST_TO_ADDR
// for i := 1 to array do
1024: LD_ADDR_VAR 0 3
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_VAR 0 1
1038: PUSH
1039: FOR_TO
1040: IFFALSE 1073
// result := Insert ( result , 1 , array [ i ] ) ;
1042: LD_ADDR_VAR 0 2
1046: PUSH
1047: LD_VAR 0 2
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: LD_VAR 0 1
1059: PUSH
1060: LD_VAR 0 3
1064: ARRAY
1065: PPUSH
1066: CALL_OW 2
1070: ST_TO_ADDR
1071: GO 1039
1073: POP
1074: POP
// end ;
1075: LD_VAR 0 2
1079: RET
// export function ComExit ( unit ) ; begin
1080: LD_INT 0
1082: PPUSH
// result := IsInUnit ( unit ) ;
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: LD_VAR 0 1
1092: PPUSH
1093: CALL_OW 310
1097: ST_TO_ADDR
// if not result then
1098: LD_VAR 0 2
1102: NOT
1103: IFFALSE 1107
// exit ;
1105: GO 1142
// if GetType ( result ) = unit_vehicle then
1107: LD_VAR 0 2
1111: PPUSH
1112: CALL_OW 247
1116: PUSH
1117: LD_INT 2
1119: EQUAL
1120: IFFALSE 1133
// ComExitVehicle ( unit ) else
1122: LD_VAR 0 1
1126: PPUSH
1127: CALL_OW 121
1131: GO 1142
// ComExitBuilding ( unit ) ;
1133: LD_VAR 0 1
1137: PPUSH
1138: CALL_OW 122
// end ;
1142: LD_VAR 0 2
1146: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
// if not side or not nation then
1151: LD_VAR 0 1
1155: NOT
1156: PUSH
1157: LD_VAR 0 2
1161: NOT
1162: OR
1163: IFFALSE 1167
// exit ;
1165: GO 1931
// case nation of nation_american :
1167: LD_VAR 0 2
1171: PUSH
1172: LD_INT 1
1174: DOUBLE
1175: EQUAL
1176: IFTRUE 1180
1178: GO 1394
1180: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1181: LD_ADDR_VAR 0 4
1185: PUSH
1186: LD_INT 35
1188: PUSH
1189: LD_INT 45
1191: PUSH
1192: LD_INT 46
1194: PUSH
1195: LD_INT 47
1197: PUSH
1198: LD_INT 82
1200: PUSH
1201: LD_INT 83
1203: PUSH
1204: LD_INT 84
1206: PUSH
1207: LD_INT 85
1209: PUSH
1210: LD_INT 86
1212: PUSH
1213: LD_INT 1
1215: PUSH
1216: LD_INT 2
1218: PUSH
1219: LD_INT 6
1221: PUSH
1222: LD_INT 15
1224: PUSH
1225: LD_INT 16
1227: PUSH
1228: LD_INT 7
1230: PUSH
1231: LD_INT 12
1233: PUSH
1234: LD_INT 13
1236: PUSH
1237: LD_INT 10
1239: PUSH
1240: LD_INT 14
1242: PUSH
1243: LD_INT 20
1245: PUSH
1246: LD_INT 21
1248: PUSH
1249: LD_INT 22
1251: PUSH
1252: LD_INT 25
1254: PUSH
1255: LD_INT 32
1257: PUSH
1258: LD_INT 27
1260: PUSH
1261: LD_INT 36
1263: PUSH
1264: LD_INT 69
1266: PUSH
1267: LD_INT 39
1269: PUSH
1270: LD_INT 34
1272: PUSH
1273: LD_INT 40
1275: PUSH
1276: LD_INT 48
1278: PUSH
1279: LD_INT 49
1281: PUSH
1282: LD_INT 50
1284: PUSH
1285: LD_INT 51
1287: PUSH
1288: LD_INT 52
1290: PUSH
1291: LD_INT 53
1293: PUSH
1294: LD_INT 54
1296: PUSH
1297: LD_INT 55
1299: PUSH
1300: LD_INT 56
1302: PUSH
1303: LD_INT 57
1305: PUSH
1306: LD_INT 58
1308: PUSH
1309: LD_INT 59
1311: PUSH
1312: LD_INT 60
1314: PUSH
1315: LD_INT 61
1317: PUSH
1318: LD_INT 62
1320: PUSH
1321: LD_INT 80
1323: PUSH
1324: LD_INT 82
1326: PUSH
1327: LD_INT 83
1329: PUSH
1330: LD_INT 84
1332: PUSH
1333: LD_INT 85
1335: PUSH
1336: LD_INT 86
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: ST_TO_ADDR
1392: GO 1855
1394: LD_INT 2
1396: DOUBLE
1397: EQUAL
1398: IFTRUE 1402
1400: GO 1624
1402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1403: LD_ADDR_VAR 0 4
1407: PUSH
1408: LD_INT 35
1410: PUSH
1411: LD_INT 45
1413: PUSH
1414: LD_INT 46
1416: PUSH
1417: LD_INT 47
1419: PUSH
1420: LD_INT 82
1422: PUSH
1423: LD_INT 83
1425: PUSH
1426: LD_INT 84
1428: PUSH
1429: LD_INT 85
1431: PUSH
1432: LD_INT 87
1434: PUSH
1435: LD_INT 70
1437: PUSH
1438: LD_INT 1
1440: PUSH
1441: LD_INT 11
1443: PUSH
1444: LD_INT 3
1446: PUSH
1447: LD_INT 4
1449: PUSH
1450: LD_INT 5
1452: PUSH
1453: LD_INT 6
1455: PUSH
1456: LD_INT 15
1458: PUSH
1459: LD_INT 18
1461: PUSH
1462: LD_INT 7
1464: PUSH
1465: LD_INT 17
1467: PUSH
1468: LD_INT 8
1470: PUSH
1471: LD_INT 20
1473: PUSH
1474: LD_INT 21
1476: PUSH
1477: LD_INT 22
1479: PUSH
1480: LD_INT 72
1482: PUSH
1483: LD_INT 26
1485: PUSH
1486: LD_INT 69
1488: PUSH
1489: LD_INT 39
1491: PUSH
1492: LD_INT 40
1494: PUSH
1495: LD_INT 41
1497: PUSH
1498: LD_INT 42
1500: PUSH
1501: LD_INT 43
1503: PUSH
1504: LD_INT 48
1506: PUSH
1507: LD_INT 49
1509: PUSH
1510: LD_INT 50
1512: PUSH
1513: LD_INT 51
1515: PUSH
1516: LD_INT 52
1518: PUSH
1519: LD_INT 53
1521: PUSH
1522: LD_INT 54
1524: PUSH
1525: LD_INT 55
1527: PUSH
1528: LD_INT 56
1530: PUSH
1531: LD_INT 60
1533: PUSH
1534: LD_INT 61
1536: PUSH
1537: LD_INT 62
1539: PUSH
1540: LD_INT 66
1542: PUSH
1543: LD_INT 67
1545: PUSH
1546: LD_INT 68
1548: PUSH
1549: LD_INT 81
1551: PUSH
1552: LD_INT 82
1554: PUSH
1555: LD_INT 83
1557: PUSH
1558: LD_INT 84
1560: PUSH
1561: LD_INT 85
1563: PUSH
1564: LD_INT 87
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: ST_TO_ADDR
1622: GO 1855
1624: LD_INT 3
1626: DOUBLE
1627: EQUAL
1628: IFTRUE 1632
1630: GO 1854
1632: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1633: LD_ADDR_VAR 0 4
1637: PUSH
1638: LD_INT 46
1640: PUSH
1641: LD_INT 47
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 2
1649: PUSH
1650: LD_INT 82
1652: PUSH
1653: LD_INT 83
1655: PUSH
1656: LD_INT 84
1658: PUSH
1659: LD_INT 85
1661: PUSH
1662: LD_INT 86
1664: PUSH
1665: LD_INT 11
1667: PUSH
1668: LD_INT 9
1670: PUSH
1671: LD_INT 20
1673: PUSH
1674: LD_INT 19
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 24
1682: PUSH
1683: LD_INT 22
1685: PUSH
1686: LD_INT 25
1688: PUSH
1689: LD_INT 28
1691: PUSH
1692: LD_INT 29
1694: PUSH
1695: LD_INT 30
1697: PUSH
1698: LD_INT 31
1700: PUSH
1701: LD_INT 37
1703: PUSH
1704: LD_INT 38
1706: PUSH
1707: LD_INT 32
1709: PUSH
1710: LD_INT 27
1712: PUSH
1713: LD_INT 33
1715: PUSH
1716: LD_INT 69
1718: PUSH
1719: LD_INT 39
1721: PUSH
1722: LD_INT 34
1724: PUSH
1725: LD_INT 40
1727: PUSH
1728: LD_INT 71
1730: PUSH
1731: LD_INT 23
1733: PUSH
1734: LD_INT 44
1736: PUSH
1737: LD_INT 48
1739: PUSH
1740: LD_INT 49
1742: PUSH
1743: LD_INT 50
1745: PUSH
1746: LD_INT 51
1748: PUSH
1749: LD_INT 52
1751: PUSH
1752: LD_INT 53
1754: PUSH
1755: LD_INT 54
1757: PUSH
1758: LD_INT 55
1760: PUSH
1761: LD_INT 56
1763: PUSH
1764: LD_INT 57
1766: PUSH
1767: LD_INT 58
1769: PUSH
1770: LD_INT 59
1772: PUSH
1773: LD_INT 63
1775: PUSH
1776: LD_INT 64
1778: PUSH
1779: LD_INT 65
1781: PUSH
1782: LD_INT 82
1784: PUSH
1785: LD_INT 83
1787: PUSH
1788: LD_INT 84
1790: PUSH
1791: LD_INT 85
1793: PUSH
1794: LD_INT 86
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: ST_TO_ADDR
1852: GO 1855
1854: POP
// if state > - 1 and state < 3 then
1855: LD_VAR 0 3
1859: PUSH
1860: LD_INT 1
1862: NEG
1863: GREATER
1864: PUSH
1865: LD_VAR 0 3
1869: PUSH
1870: LD_INT 3
1872: LESS
1873: AND
1874: IFFALSE 1931
// for i in result do
1876: LD_ADDR_VAR 0 5
1880: PUSH
1881: LD_VAR 0 4
1885: PUSH
1886: FOR_IN
1887: IFFALSE 1929
// if GetTech ( i , side ) <> state then
1889: LD_VAR 0 5
1893: PPUSH
1894: LD_VAR 0 1
1898: PPUSH
1899: CALL_OW 321
1903: PUSH
1904: LD_VAR 0 3
1908: NONEQUAL
1909: IFFALSE 1927
// result := result diff i ;
1911: LD_ADDR_VAR 0 4
1915: PUSH
1916: LD_VAR 0 4
1920: PUSH
1921: LD_VAR 0 5
1925: DIFF
1926: ST_TO_ADDR
1927: GO 1886
1929: POP
1930: POP
// end ;
1931: LD_VAR 0 4
1935: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
1936: LD_INT 0
1938: PPUSH
1939: PPUSH
1940: PPUSH
1941: PPUSH
// if not list then
1942: LD_VAR 0 3
1946: NOT
1947: IFFALSE 1951
// exit ;
1949: GO 2259
// result := [ ] ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: EMPTY
1957: ST_TO_ADDR
// for i in list do
1958: LD_ADDR_VAR 0 6
1962: PUSH
1963: LD_VAR 0 3
1967: PUSH
1968: FOR_IN
1969: IFFALSE 2171
// begin tmp := GetDistUnitXY ( i , x , y ) ;
1971: LD_ADDR_VAR 0 8
1975: PUSH
1976: LD_VAR 0 6
1980: PPUSH
1981: LD_VAR 0 1
1985: PPUSH
1986: LD_VAR 0 2
1990: PPUSH
1991: CALL_OW 297
1995: ST_TO_ADDR
// if not result then
1996: LD_VAR 0 5
2000: NOT
2001: IFFALSE 2027
// result := [ [ i , tmp ] ] else
2003: LD_ADDR_VAR 0 5
2007: PUSH
2008: LD_VAR 0 6
2012: PUSH
2013: LD_VAR 0 8
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: PUSH
2022: EMPTY
2023: LIST
2024: ST_TO_ADDR
2025: GO 2169
// begin if result [ result ] [ 2 ] < tmp then
2027: LD_VAR 0 5
2031: PUSH
2032: LD_VAR 0 5
2036: ARRAY
2037: PUSH
2038: LD_INT 2
2040: ARRAY
2041: PUSH
2042: LD_VAR 0 8
2046: LESS
2047: IFFALSE 2089
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2049: LD_ADDR_VAR 0 5
2053: PUSH
2054: LD_VAR 0 5
2058: PPUSH
2059: LD_VAR 0 5
2063: PUSH
2064: LD_INT 1
2066: PLUS
2067: PPUSH
2068: LD_VAR 0 6
2072: PUSH
2073: LD_VAR 0 8
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PPUSH
2082: CALL_OW 2
2086: ST_TO_ADDR
2087: GO 2169
// for j = 1 to result do
2089: LD_ADDR_VAR 0 7
2093: PUSH
2094: DOUBLE
2095: LD_INT 1
2097: DEC
2098: ST_TO_ADDR
2099: LD_VAR 0 5
2103: PUSH
2104: FOR_TO
2105: IFFALSE 2167
// begin if tmp < result [ j ] [ 2 ] then
2107: LD_VAR 0 8
2111: PUSH
2112: LD_VAR 0 5
2116: PUSH
2117: LD_VAR 0 7
2121: ARRAY
2122: PUSH
2123: LD_INT 2
2125: ARRAY
2126: LESS
2127: IFFALSE 2165
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2129: LD_ADDR_VAR 0 5
2133: PUSH
2134: LD_VAR 0 5
2138: PPUSH
2139: LD_VAR 0 7
2143: PPUSH
2144: LD_VAR 0 6
2148: PUSH
2149: LD_VAR 0 8
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PPUSH
2158: CALL_OW 2
2162: ST_TO_ADDR
// break ;
2163: GO 2167
// end ; end ;
2165: GO 2104
2167: POP
2168: POP
// end ; end ;
2169: GO 1968
2171: POP
2172: POP
// if result and not asc then
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: NOT
2183: AND
2184: IFFALSE 2259
// begin tmp := result ;
2186: LD_ADDR_VAR 0 8
2190: PUSH
2191: LD_VAR 0 5
2195: ST_TO_ADDR
// for i = tmp downto 1 do
2196: LD_ADDR_VAR 0 6
2200: PUSH
2201: DOUBLE
2202: LD_VAR 0 8
2206: INC
2207: ST_TO_ADDR
2208: LD_INT 1
2210: PUSH
2211: FOR_DOWNTO
2212: IFFALSE 2257
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2214: LD_ADDR_VAR 0 5
2218: PUSH
2219: LD_VAR 0 5
2223: PPUSH
2224: LD_VAR 0 8
2228: PUSH
2229: LD_VAR 0 6
2233: MINUS
2234: PUSH
2235: LD_INT 1
2237: PLUS
2238: PPUSH
2239: LD_VAR 0 8
2243: PUSH
2244: LD_VAR 0 6
2248: ARRAY
2249: PPUSH
2250: CALL_OW 1
2254: ST_TO_ADDR
2255: GO 2211
2257: POP
2258: POP
// end ; end ;
2259: LD_VAR 0 5
2263: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
2264: LD_INT 0
2266: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
2267: LD_ADDR_VAR 0 4
2271: PUSH
2272: LD_VAR 0 1
2276: PPUSH
2277: CALL_OW 250
2281: PPUSH
2282: LD_VAR 0 1
2286: PPUSH
2287: CALL_OW 251
2291: PPUSH
2292: LD_VAR 0 2
2296: PPUSH
2297: LD_VAR 0 3
2301: PPUSH
2302: CALL 1936 0 4
2306: ST_TO_ADDR
// end ;
2307: LD_VAR 0 4
2311: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
2312: LD_INT 0
2314: PPUSH
2315: PPUSH
2316: PPUSH
2317: PPUSH
2318: PPUSH
// if not unit then
2319: LD_VAR 0 1
2323: NOT
2324: IFFALSE 2328
// exit ;
2326: GO 2530
// side := GetSide ( unit ) ;
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 255
2342: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
2343: LD_ADDR_VAR 0 5
2347: PUSH
2348: LD_INT 22
2350: PUSH
2351: LD_VAR 0 4
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PUSH
2360: LD_INT 30
2362: PUSH
2363: LD_VAR 0 2
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: ST_TO_ADDR
// if not tmp then
2381: LD_VAR 0 5
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2530
// tmp := SortByDistanceUnit ( unit , tmp , true ) ;
2390: LD_ADDR_VAR 0 5
2394: PUSH
2395: LD_VAR 0 1
2399: PPUSH
2400: LD_VAR 0 5
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: CALL 2264 0 3
2412: ST_TO_ADDR
// places := 1 ;
2413: LD_ADDR_VAR 0 7
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
2421: LD_VAR 0 2
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: LD_INT 1
2431: PUSH
2432: LD_INT 4
2434: PUSH
2435: LD_INT 5
2437: PUSH
2438: LD_INT 2
2440: PUSH
2441: LD_INT 3
2443: PUSH
2444: LD_INT 6
2446: PUSH
2447: LD_INT 7
2449: PUSH
2450: LD_INT 8
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: IN
2464: IFFALSE 2474
// places := 6 ;
2466: LD_ADDR_VAR 0 7
2470: PUSH
2471: LD_INT 6
2473: ST_TO_ADDR
// for i in tmp do
2474: LD_ADDR_VAR 0 6
2478: PUSH
2479: LD_VAR 0 5
2483: PUSH
2484: FOR_IN
2485: IFFALSE 2528
// begin if UnitsInside ( i ) - places <= 0 then
2487: LD_VAR 0 6
2491: PPUSH
2492: CALL_OW 313
2496: PUSH
2497: LD_VAR 0 7
2501: MINUS
2502: PUSH
2503: LD_INT 0
2505: LESSEQUAL
2506: IFFALSE 2512
// continue else
2508: GO 2484
2510: GO 2526
// begin result := i ;
2512: LD_ADDR_VAR 0 3
2516: PUSH
2517: LD_VAR 0 6
2521: ST_TO_ADDR
// exit ;
2522: POP
2523: POP
2524: GO 2530
// end ; end ;
2526: GO 2484
2528: POP
2529: POP
// end ;
2530: LD_VAR 0 3
2534: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
2540: LD_VAR 0 1
2544: NOT
2545: PUSH
2546: LD_VAR 0 2
2550: PUSH
2551: LD_INT 1
2553: PUSH
2554: LD_INT 2
2556: PUSH
2557: LD_INT 3
2559: PUSH
2560: LD_INT 4
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: IN
2569: NOT
2570: OR
2571: IFFALSE 2575
// exit ;
2573: GO 2667
// tmp := [ ] ;
2575: LD_ADDR_VAR 0 5
2579: PUSH
2580: EMPTY
2581: ST_TO_ADDR
// for i in units do
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_VAR 0 1
2591: PUSH
2592: FOR_IN
2593: IFFALSE 2636
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
2595: LD_ADDR_VAR 0 5
2599: PUSH
2600: LD_VAR 0 5
2604: PPUSH
2605: LD_VAR 0 5
2609: PUSH
2610: LD_INT 1
2612: PLUS
2613: PPUSH
2614: LD_VAR 0 4
2618: PPUSH
2619: LD_VAR 0 2
2623: PPUSH
2624: CALL_OW 259
2628: PPUSH
2629: CALL_OW 2
2633: ST_TO_ADDR
2634: GO 2592
2636: POP
2637: POP
// if not tmp then
2638: LD_VAR 0 5
2642: NOT
2643: IFFALSE 2647
// exit ;
2645: GO 2667
// result := SortListByListDesc ( units , tmp ) ;
2647: LD_ADDR_VAR 0 3
2651: PUSH
2652: LD_VAR 0 1
2656: PPUSH
2657: LD_VAR 0 5
2661: PPUSH
2662: CALL_OW 77
2666: ST_TO_ADDR
// end ;
2667: LD_VAR 0 3
2671: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2672: LD_INT 0
2674: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: LD_VAR 0 2
2684: PPUSH
2685: LD_VAR 0 3
2689: PPUSH
2690: LD_VAR 0 4
2694: PPUSH
2695: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2699: LD_VAR 0 1
2703: PPUSH
2704: LD_VAR 0 2
2708: PPUSH
2709: LD_VAR 0 3
2713: PPUSH
2714: CALL_OW 331
// end ; end_of_file
2718: LD_VAR 0 5
2722: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
2723: LD_INT 0
2725: PPUSH
2726: PPUSH
// uc_side := 2 ;
2727: LD_ADDR_OWVAR 20
2731: PUSH
2732: LD_INT 2
2734: ST_TO_ADDR
// uc_nation := 2 ;
2735: LD_ADDR_OWVAR 21
2739: PUSH
2740: LD_INT 2
2742: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2743: LD_ADDR_EXP 5
2747: PUSH
2748: LD_STRING Heike
2750: PPUSH
2751: LD_EXP 1
2755: NOT
2756: PPUSH
2757: LD_EXP 2
2761: PPUSH
2762: CALL 192 0 3
2766: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2767: LD_ADDR_EXP 8
2771: PUSH
2772: LD_STRING Ibrahim
2774: PPUSH
2775: LD_EXP 1
2779: NOT
2780: PPUSH
2781: LD_EXP 2
2785: PPUSH
2786: CALL 192 0 3
2790: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2791: LD_ADDR_EXP 6
2795: PUSH
2796: LD_STRING Givi
2798: PPUSH
2799: LD_EXP 1
2803: NOT
2804: PPUSH
2805: LD_EXP 2
2809: PPUSH
2810: CALL 192 0 3
2814: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2815: LD_ADDR_EXP 9
2819: PUSH
2820: LD_STRING Kamil
2822: PPUSH
2823: LD_EXP 1
2827: NOT
2828: PPUSH
2829: LD_EXP 2
2833: PPUSH
2834: CALL 192 0 3
2838: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2839: LD_ADDR_EXP 10
2843: PUSH
2844: LD_STRING Kaia
2846: PPUSH
2847: LD_EXP 1
2851: NOT
2852: PPUSH
2853: LD_EXP 2
2857: PPUSH
2858: CALL 192 0 3
2862: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2863: LD_ADDR_EXP 11
2867: PUSH
2868: LD_STRING Sophia
2870: PPUSH
2871: LD_EXP 1
2875: NOT
2876: PPUSH
2877: LD_EXP 2
2881: PPUSH
2882: CALL 192 0 3
2886: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2887: LD_ADDR_EXP 12
2891: PUSH
2892: LD_STRING Markov
2894: PPUSH
2895: LD_EXP 1
2899: NOT
2900: PPUSH
2901: LD_EXP 2
2905: PPUSH
2906: CALL 192 0 3
2910: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2911: LD_ADDR_EXP 16
2915: PUSH
2916: LD_STRING Aviradze
2918: PPUSH
2919: LD_EXP 1
2923: NOT
2924: PPUSH
2925: LD_EXP 2
2929: PPUSH
2930: CALL 192 0 3
2934: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
2935: LD_ADDR_EXP 15
2939: PUSH
2940: LD_STRING Kurt
2942: PPUSH
2943: LD_EXP 1
2947: NOT
2948: PPUSH
2949: LD_EXP 2
2953: PPUSH
2954: CALL 192 0 3
2958: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2959: LD_ADDR_EXP 7
2963: PUSH
2964: LD_STRING Mike
2966: PPUSH
2967: LD_EXP 1
2971: NOT
2972: PPUSH
2973: LD_EXP 2
2977: PPUSH
2978: CALL 192 0 3
2982: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
2983: LD_ADDR_EXP 14
2987: PUSH
2988: LD_STRING Olaf
2990: PPUSH
2991: LD_INT 0
2993: PPUSH
2994: LD_STRING 
2996: PPUSH
2997: CALL 192 0 3
3001: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
3002: LD_ADDR_EXP 17
3006: PUSH
3007: LD_STRING 04_2_others
3009: PPUSH
3010: CALL_OW 31
3014: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
3015: LD_ADDR_EXP 19
3019: PUSH
3020: LD_STRING 04_2_apes
3022: PPUSH
3023: CALL_OW 31
3027: ST_TO_ADDR
// if hasFlamethrower then
3028: LD_EXP 3
3032: IFFALSE 3263
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
3034: LD_INT 70
3036: PPUSH
3037: LD_INT 2
3039: PPUSH
3040: LD_INT 2
3042: PPUSH
3043: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
3047: LD_ADDR_EXP 18
3051: PUSH
3052: LD_INT 13
3054: PUSH
3055: LD_INT 1
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: LD_INT 27
3063: PUSH
3064: LD_INT 2
3066: PUSH
3067: LD_INT 1000
3069: PUSH
3070: LD_INT 0
3072: PUSH
3073: LD_INT 0
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 13
3091: PUSH
3092: LD_INT 1
3094: PUSH
3095: LD_INT 1
3097: PUSH
3098: LD_INT 25
3100: PUSH
3101: LD_INT 2
3103: PUSH
3104: LD_INT 1000
3106: PUSH
3107: LD_INT 0
3109: PUSH
3110: LD_INT 0
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 13
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: LD_INT 1
3134: PUSH
3135: LD_INT 26
3137: PUSH
3138: LD_INT 2
3140: PUSH
3141: LD_INT 1000
3143: PUSH
3144: LD_INT 0
3146: PUSH
3147: LD_INT 0
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: PUSH
3163: LD_INT 13
3165: PUSH
3166: LD_INT 1
3168: PUSH
3169: LD_INT 1
3171: PUSH
3172: LD_INT 27
3174: PUSH
3175: LD_INT 2
3177: PUSH
3178: LD_INT 1000
3180: PUSH
3181: LD_INT 0
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: PUSH
3200: LD_INT 13
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: LD_INT 1
3208: PUSH
3209: LD_INT 32
3211: PUSH
3212: LD_INT 2
3214: PUSH
3215: LD_INT 1000
3217: PUSH
3218: LD_INT 0
3220: PUSH
3221: LD_INT 60
3223: PUSH
3224: LD_INT 40
3226: PUSH
3227: LD_INT 20
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PUSH
3235: LD_OWVAR 67
3239: ARRAY
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: ST_TO_ADDR
// end else
3261: GO 3477
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
3263: LD_ADDR_EXP 18
3267: PUSH
3268: LD_INT 13
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: LD_INT 1
3276: PUSH
3277: LD_INT 25
3279: PUSH
3280: LD_INT 2
3282: PUSH
3283: LD_INT 1000
3285: PUSH
3286: LD_INT 0
3288: PUSH
3289: LD_INT 0
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: PUSH
3305: LD_INT 13
3307: PUSH
3308: LD_INT 1
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: LD_INT 27
3316: PUSH
3317: LD_INT 2
3319: PUSH
3320: LD_INT 1000
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: LD_INT 0
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 13
3344: PUSH
3345: LD_INT 1
3347: PUSH
3348: LD_INT 1
3350: PUSH
3351: LD_INT 24
3353: PUSH
3354: LD_INT 2
3356: PUSH
3357: LD_INT 1000
3359: PUSH
3360: LD_INT 0
3362: PUSH
3363: LD_INT 0
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 13
3381: PUSH
3382: LD_INT 1
3384: PUSH
3385: LD_INT 1
3387: PUSH
3388: LD_INT 27
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 1000
3396: PUSH
3397: LD_INT 0
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 13
3418: PUSH
3419: LD_INT 1
3421: PUSH
3422: LD_INT 1
3424: PUSH
3425: LD_INT 32
3427: PUSH
3428: LD_INT 2
3430: PUSH
3431: LD_INT 1000
3433: PUSH
3434: LD_INT 0
3436: PUSH
3437: LD_INT 50
3439: PUSH
3440: LD_INT 30
3442: PUSH
3443: LD_INT 20
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: LIST
3450: PUSH
3451: LD_OWVAR 67
3455: ARRAY
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: ST_TO_ADDR
// end ; uc_side := 5 ;
3477: LD_ADDR_OWVAR 20
3481: PUSH
3482: LD_INT 5
3484: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
3485: LD_ADDR_EXP 13
3489: PUSH
3490: LD_STRING Abdul
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: LD_STRING 
3498: PPUSH
3499: CALL 192 0 3
3503: ST_TO_ADDR
// end ; end_of_file
3504: LD_VAR 0 1
3508: RET
// export function PrepareRussian ; begin
3509: LD_INT 0
3511: PPUSH
// end ; end_of_file end_of_file
3512: LD_VAR 0 1
3516: RET
// export function Action ; var i , un , veh , tmp ; begin
3517: LD_INT 0
3519: PPUSH
3520: PPUSH
3521: PPUSH
3522: PPUSH
3523: PPUSH
// InGameOn ;
3524: CALL_OW 8
// music_nat := 2 ;
3528: LD_ADDR_OWVAR 71
3532: PUSH
3533: LD_INT 2
3535: ST_TO_ADDR
// music_class := 0 ;
3536: LD_ADDR_OWVAR 72
3540: PUSH
3541: LD_INT 0
3543: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
3544: LD_INT 7
3546: PPUSH
3547: LD_INT 6
3549: PPUSH
3550: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
3554: LD_INT 7
3556: PPUSH
3557: LD_INT 6
3559: PPUSH
3560: LD_INT 2
3562: PPUSH
3563: LD_INT 20
3565: NEG
3566: PPUSH
3567: CALL 2672 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
3571: LD_ADDR_VAR 0 5
3575: PUSH
3576: LD_EXP 5
3580: PUSH
3581: LD_EXP 6
3585: PUSH
3586: LD_EXP 7
3590: PUSH
3591: LD_EXP 8
3595: PUSH
3596: LD_EXP 9
3600: PUSH
3601: LD_EXP 10
3605: PUSH
3606: LD_EXP 11
3610: PUSH
3611: LD_EXP 12
3615: PUSH
3616: LD_EXP 16
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: ST_TO_ADDR
// tmp := tmp diff 0 ;
3632: LD_ADDR_VAR 0 5
3636: PUSH
3637: LD_VAR 0 5
3641: PUSH
3642: LD_INT 0
3644: DIFF
3645: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
3646: LD_ADDR_VAR 0 5
3650: PUSH
3651: LD_VAR 0 5
3655: PPUSH
3656: LD_INT 3
3658: PPUSH
3659: CALL 2535 0 2
3663: ST_TO_ADDR
// for i in heikeVehicles do
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: LD_EXP 18
3673: PUSH
3674: FOR_IN
3675: IFFALSE 3874
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
3677: LD_INT 5
3679: PPUSH
3680: LD_VAR 0 2
3684: PUSH
3685: LD_INT 5
3687: ARRAY
3688: PPUSH
3689: LD_VAR 0 2
3693: PUSH
3694: LD_INT 1
3696: ARRAY
3697: PPUSH
3698: LD_VAR 0 2
3702: PUSH
3703: LD_INT 2
3705: ARRAY
3706: PPUSH
3707: LD_VAR 0 2
3711: PUSH
3712: LD_INT 3
3714: ARRAY
3715: PPUSH
3716: LD_VAR 0 2
3720: PUSH
3721: LD_INT 4
3723: ARRAY
3724: PPUSH
3725: LD_INT 34
3727: PPUSH
3728: CALL 255 0 7
// veh := CreateVehicle ;
3732: LD_ADDR_VAR 0 4
3736: PUSH
3737: CALL_OW 45
3741: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
3742: LD_VAR 0 2
3746: PUSH
3747: LD_INT 4
3749: ARRAY
3750: PUSH
3751: LD_INT 51
3753: PUSH
3754: LD_INT 32
3756: PUSH
3757: LD_INT 12
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: LIST
3764: IN
3765: IFFALSE 3845
// begin if i [ 7 ] [ 1 ] then
3767: LD_VAR 0 2
3771: PUSH
3772: LD_INT 7
3774: ARRAY
3775: PUSH
3776: LD_INT 1
3778: ARRAY
3779: IFFALSE 3806
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
3781: LD_VAR 0 4
3785: PPUSH
3786: LD_INT 1
3788: PPUSH
3789: LD_VAR 0 2
3793: PUSH
3794: LD_INT 7
3796: ARRAY
3797: PUSH
3798: LD_INT 1
3800: ARRAY
3801: PPUSH
3802: CALL_OW 291
// if i [ 7 ] [ 2 ] then
3806: LD_VAR 0 2
3810: PUSH
3811: LD_INT 7
3813: ARRAY
3814: PUSH
3815: LD_INT 2
3817: ARRAY
3818: IFFALSE 3845
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
3820: LD_VAR 0 4
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: LD_VAR 0 2
3832: PUSH
3833: LD_INT 7
3835: ARRAY
3836: PUSH
3837: LD_INT 2
3839: ARRAY
3840: PPUSH
3841: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
3845: LD_VAR 0 4
3849: PPUSH
3850: LD_INT 2
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
3857: LD_VAR 0 4
3861: PPUSH
3862: LD_INT 4
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 49
// end ;
3872: GO 3674
3874: POP
3875: POP
// if tmp then
3876: LD_VAR 0 5
3880: IFFALSE 3935
// for i in tmp union heikeApes do
3882: LD_ADDR_VAR 0 2
3886: PUSH
3887: LD_VAR 0 5
3891: PUSH
3892: LD_EXP 19
3896: UNION
3897: PUSH
3898: FOR_IN
3899: IFFALSE 3933
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
3901: LD_VAR 0 2
3905: PPUSH
3906: LD_INT 5
3908: PPUSH
3909: LD_INT 0
3911: PPUSH
3912: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
3916: LD_VAR 0 2
3920: PPUSH
3921: LD_INT 26
3923: PPUSH
3924: LD_INT 9
3926: PPUSH
3927: CALL_OW 118
// end ;
3931: GO 3898
3933: POP
3934: POP
// if heikeSecondSquad then
3935: LD_EXP 17
3939: IFFALSE 3988
// for i in heikeSecondSquad do
3941: LD_ADDR_VAR 0 2
3945: PUSH
3946: LD_EXP 17
3950: PUSH
3951: FOR_IN
3952: IFFALSE 3986
// begin PlaceUnitArea ( i , spawnHumanArea2 , false ) ;
3954: LD_VAR 0 2
3958: PPUSH
3959: LD_INT 6
3961: PPUSH
3962: LD_INT 0
3964: PPUSH
3965: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
3969: LD_VAR 0 2
3973: PPUSH
3974: LD_INT 26
3976: PPUSH
3977: LD_INT 9
3979: PPUSH
3980: CALL_OW 118
// end ;
3984: GO 3951
3986: POP
3987: POP
// if heikeApes then
3988: LD_EXP 19
3992: IFFALSE 4035
// for i in heikeApes do
3994: LD_ADDR_VAR 0 2
3998: PUSH
3999: LD_EXP 19
4003: PUSH
4004: FOR_IN
4005: IFFALSE 4033
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
4007: LD_VAR 0 2
4011: PPUSH
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 49
// ComHold ( i ) ;
4022: LD_VAR 0 2
4026: PPUSH
4027: CALL_OW 140
// end ;
4031: GO 4004
4033: POP
4034: POP
// if Kurt then
4035: LD_EXP 15
4039: IFFALSE 4071
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
4041: LD_EXP 15
4045: PPUSH
4046: LD_INT 8
4048: PPUSH
4049: LD_INT 0
4051: PPUSH
4052: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
4056: LD_EXP 15
4060: PPUSH
4061: LD_INT 42
4063: PPUSH
4064: LD_INT 32
4066: PPUSH
4067: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
4071: LD_EXP 5
4075: PPUSH
4076: LD_STRING DH-Start-1
4078: PPUSH
4079: CALL_OW 88
// if Givi then
4083: LD_EXP 6
4087: IFFALSE 4350
// begin Say ( Givi , DG-Start-2-5 ) ;
4089: LD_EXP 6
4093: PPUSH
4094: LD_STRING DG-Start-2-5
4096: PPUSH
4097: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
4101: LD_EXP 5
4105: PPUSH
4106: LD_STRING DH-Start-3
4108: PPUSH
4109: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
4113: LD_EXP 5
4117: PPUSH
4118: LD_STRING DH-Start-4
4120: PPUSH
4121: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
4125: LD_EXP 6
4129: PPUSH
4130: LD_STRING DG-Start-5
4132: PPUSH
4133: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
4137: LD_EXP 5
4141: PPUSH
4142: LD_STRING DH-Start-6
4144: PPUSH
4145: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
4149: LD_EXP 6
4153: PPUSH
4154: LD_STRING DG-Start-7
4156: PPUSH
4157: CALL_OW 88
// if Mike then
4161: LD_EXP 7
4165: IFFALSE 4338
// begin Say ( Mike , DM-Start-8 ) ;
4167: LD_EXP 7
4171: PPUSH
4172: LD_STRING DM-Start-8
4174: PPUSH
4175: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
4179: LD_EXP 7
4183: PPUSH
4184: LD_STRING DM-Start-9
4186: PPUSH
4187: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
4191: LD_EXP 6
4195: PPUSH
4196: LD_STRING DG-Start-10
4198: PPUSH
4199: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
4203: LD_EXP 6
4207: PPUSH
4208: LD_STRING DG-Start-11
4210: PPUSH
4211: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
4215: LD_EXP 5
4219: PPUSH
4220: LD_STRING DH-Start-12
4222: PPUSH
4223: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
4227: LD_EXP 6
4231: PPUSH
4232: LD_STRING DG-Start-13
4234: PPUSH
4235: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
4239: LD_EXP 6
4243: PPUSH
4244: LD_STRING DG-Start-14
4246: PPUSH
4247: CALL_OW 88
// if Kaia then
4251: LD_EXP 10
4255: IFFALSE 4338
// begin Say ( Kaia , DK-Start-15 ) ;
4257: LD_EXP 10
4261: PPUSH
4262: LD_STRING DK-Start-15
4264: PPUSH
4265: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
4269: LD_EXP 10
4273: PPUSH
4274: LD_STRING DK-Start-16
4276: PPUSH
4277: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
4281: LD_EXP 10
4285: PPUSH
4286: LD_STRING DK-Start-17
4288: PPUSH
4289: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4293: LD_INT 10
4295: PPUSH
4296: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
4300: LD_EXP 6
4304: PPUSH
4305: LD_EXP 10
4309: PPUSH
4310: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
4314: LD_EXP 6
4318: PPUSH
4319: LD_STRING DG-Start-18
4321: PPUSH
4322: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
4326: LD_EXP 10
4330: PPUSH
4331: LD_STRING DK-Start-19
4333: PPUSH
4334: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
4338: LD_EXP 5
4342: PPUSH
4343: LD_STRING DH-Start-20
4345: PPUSH
4346: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
4350: LD_INT 70
4352: PPUSH
4353: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
4357: LD_EXP 13
4361: PPUSH
4362: LD_STRING DShar-Start-21
4364: PPUSH
4365: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
4369: LD_EXP 5
4373: PPUSH
4374: LD_STRING DH-Start-22
4376: PPUSH
4377: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
4381: LD_EXP 13
4385: PPUSH
4386: LD_STRING DShar-Start-23
4388: PPUSH
4389: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
4393: LD_EXP 13
4397: PPUSH
4398: LD_STRING DShar-Start-24
4400: PPUSH
4401: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
4405: LD_EXP 13
4409: PPUSH
4410: LD_STRING DShar-Start-25
4412: PPUSH
4413: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
4417: LD_EXP 13
4421: PPUSH
4422: LD_STRING DShar-Start-26
4424: PPUSH
4425: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
4429: LD_EXP 5
4433: PPUSH
4434: LD_STRING DH-Start-27
4436: PPUSH
4437: CALL_OW 88
// if Kaia then
4441: LD_EXP 10
4445: IFFALSE 4485
// begin ComTurnUnit ( Heike , Kaia ) ;
4447: LD_EXP 5
4451: PPUSH
4452: LD_EXP 10
4456: PPUSH
4457: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
4461: LD_EXP 10
4465: PPUSH
4466: LD_STRING DK-Start-28
4468: PPUSH
4469: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
4473: LD_EXP 5
4477: PPUSH
4478: LD_STRING DH-Start-29
4480: PPUSH
4481: CALL_OW 88
// end ; if Givi then
4485: LD_EXP 6
4489: IFFALSE 4701
// begin ComTurnUnit ( Heike , Givi ) ;
4491: LD_EXP 5
4495: PPUSH
4496: LD_EXP 6
4500: PPUSH
4501: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
4505: LD_EXP 6
4509: PPUSH
4510: LD_EXP 5
4514: PPUSH
4515: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
4519: LD_EXP 5
4523: PPUSH
4524: LD_STRING DH-Start-30
4526: PPUSH
4527: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
4531: LD_EXP 5
4535: PPUSH
4536: LD_STRING DH-Start-31
4538: PPUSH
4539: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
4543: LD_EXP 6
4547: PPUSH
4548: LD_STRING DG-Start-32
4550: PPUSH
4551: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
4555: LD_EXP 5
4559: PPUSH
4560: LD_STRING DH-Start-33
4562: PPUSH
4563: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
4567: LD_EXP 6
4571: PPUSH
4572: LD_STRING DG-Start-34
4574: PPUSH
4575: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
4579: LD_EXP 6
4583: PPUSH
4584: LD_STRING DG-Start-35
4586: PPUSH
4587: CALL_OW 88
// if Kurt and not dialogue_skipped then
4591: LD_EXP 15
4595: PUSH
4596: LD_OWVAR 59
4600: NOT
4601: AND
4602: IFFALSE 4633
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
4604: LD_EXP 15
4608: PPUSH
4609: LD_INT 28
4611: PPUSH
4612: LD_INT 13
4614: PPUSH
4615: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
4619: LD_EXP 15
4623: PPUSH
4624: LD_EXP 5
4628: PPUSH
4629: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
4633: LD_EXP 6
4637: PPUSH
4638: LD_STRING DG-Start-36
4640: PPUSH
4641: CALL_OW 88
// if Kurt then
4645: LD_EXP 15
4649: IFFALSE 4701
// begin Say ( Kurt , DKs-Start-37 ) ;
4651: LD_EXP 15
4655: PPUSH
4656: LD_STRING DKs-Start-37
4658: PPUSH
4659: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
4663: LD_EXP 15
4667: PPUSH
4668: LD_STRING DKs-Start-38
4670: PPUSH
4671: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
4675: LD_EXP 5
4679: PPUSH
4680: LD_EXP 15
4684: PPUSH
4685: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
4689: LD_EXP 5
4693: PPUSH
4694: LD_STRING DH-Start-39
4696: PPUSH
4697: CALL_OW 88
// end ; end ; if HexInfo ( 44 , 25 ) then
4701: LD_INT 44
4703: PPUSH
4704: LD_INT 25
4706: PPUSH
4707: CALL_OW 428
4711: IFFALSE 4728
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
4713: LD_INT 44
4715: PPUSH
4716: LD_INT 25
4718: PPUSH
4719: CALL_OW 428
4723: PPUSH
4724: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
4728: LD_EXP 14
4732: PPUSH
4733: LD_INT 5
4735: PPUSH
4736: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
4740: LD_EXP 14
4744: PPUSH
4745: LD_INT 44
4747: PPUSH
4748: LD_INT 25
4750: PPUSH
4751: LD_INT 0
4753: PPUSH
4754: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
4758: LD_EXP 14
4762: PPUSH
4763: LD_INT 29
4765: PPUSH
4766: LD_INT 12
4768: PPUSH
4769: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4773: LD_INT 35
4775: PPUSH
4776: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
4780: LD_EXP 5
4784: PPUSH
4785: LD_EXP 14
4789: PPUSH
4790: CALL_OW 296
4794: PUSH
4795: LD_INT 8
4797: LESS
4798: PUSH
4799: LD_EXP 14
4803: PPUSH
4804: LD_INT 26
4806: PPUSH
4807: LD_INT 9
4809: PPUSH
4810: CALL_OW 297
4814: PUSH
4815: LD_INT 6
4817: LESS
4818: OR
4819: IFFALSE 4773
// Say ( Olaf , DO-Scout-1 ) ;
4821: LD_EXP 14
4825: PPUSH
4826: LD_STRING DO-Scout-1
4828: PPUSH
4829: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
4833: LD_EXP 14
4837: PPUSH
4838: LD_EXP 5
4842: PPUSH
4843: CALL_OW 119
// for i in tmp union heikeSecondSquad do
4847: LD_ADDR_VAR 0 2
4851: PUSH
4852: LD_VAR 0 5
4856: PUSH
4857: LD_EXP 17
4861: UNION
4862: PUSH
4863: FOR_IN
4864: IFFALSE 4882
// ComTurnUnit ( i , Olaf ) ;
4866: LD_VAR 0 2
4870: PPUSH
4871: LD_EXP 14
4875: PPUSH
4876: CALL_OW 119
4880: GO 4863
4882: POP
4883: POP
// wait ( 0 0$0.3 ) ;
4884: LD_INT 10
4886: PPUSH
4887: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
4891: LD_EXP 5
4895: PPUSH
4896: LD_EXP 14
4900: PPUSH
4901: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
4905: LD_EXP 5
4909: PPUSH
4910: LD_EXP 14
4914: PPUSH
4915: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
4919: LD_EXP 5
4923: PPUSH
4924: LD_STRING DH-Scout-2
4926: PPUSH
4927: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
4931: LD_EXP 14
4935: PPUSH
4936: LD_STRING DO-Scout-3
4938: PPUSH
4939: CALL_OW 88
// if Mike and Givi then
4943: LD_EXP 7
4947: PUSH
4948: LD_EXP 6
4952: AND
4953: IFFALSE 4969
// Say ( Olaf , DO-Scout-4 ) else
4955: LD_EXP 14
4959: PPUSH
4960: LD_STRING DO-Scout-4
4962: PPUSH
4963: CALL_OW 88
4967: GO 5069
// begin if Mike then
4969: LD_EXP 7
4973: IFFALSE 5001
// begin Say ( Olaf , DO-Scout-a-4 ) ;
4975: LD_EXP 14
4979: PPUSH
4980: LD_STRING DO-Scout-a-4
4982: PPUSH
4983: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
4987: LD_EXP 5
4991: PPUSH
4992: LD_STRING DH-Scout-a-5
4994: PPUSH
4995: CALL_OW 88
// end else
4999: GO 5069
// if Givi then
5001: LD_EXP 6
5005: IFFALSE 5033
// begin Say ( Olaf , DO-Scout-b-4 ) ;
5007: LD_EXP 14
5011: PPUSH
5012: LD_STRING DO-Scout-b-4
5014: PPUSH
5015: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
5019: LD_EXP 5
5023: PPUSH
5024: LD_STRING DH-Scout-b-5
5026: PPUSH
5027: CALL_OW 88
// end else
5031: GO 5069
// begin Say ( Olaf , DO-Scout-f-4 ) ;
5033: LD_EXP 14
5037: PPUSH
5038: LD_STRING DO-Scout-f-4
5040: PPUSH
5041: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
5045: LD_EXP 5
5049: PPUSH
5050: LD_STRING DH-Scout-f-5
5052: PPUSH
5053: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
5057: LD_EXP 14
5061: PPUSH
5062: LD_STRING DO-Scout-f-6
5064: PPUSH
5065: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
5069: LD_EXP 5
5073: PPUSH
5074: LD_STRING DH-Scout-5
5076: PPUSH
5077: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
5081: LD_EXP 14
5085: PPUSH
5086: LD_STRING DO-Scout-6
5088: PPUSH
5089: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
5093: LD_EXP 14
5097: PPUSH
5098: LD_STRING DO-Scout-7
5100: PPUSH
5101: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
5105: LD_EXP 5
5109: PPUSH
5110: LD_STRING DH-Scout-8
5112: PPUSH
5113: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
5117: LD_EXP 5
5121: PPUSH
5122: LD_STRING DH-Scout-9
5124: PPUSH
5125: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
5129: LD_EXP 14
5133: PPUSH
5134: LD_STRING DO-Scout-10
5136: PPUSH
5137: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
5141: LD_EXP 14
5145: PPUSH
5146: LD_STRING DO-Scout-12
5148: PPUSH
5149: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
5153: LD_EXP 14
5157: PPUSH
5158: LD_STRING DO-Scout-13
5160: PPUSH
5161: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
5165: LD_EXP 14
5169: PPUSH
5170: LD_STRING DO-Scout-14
5172: PPUSH
5173: CALL_OW 88
// if Givi then
5177: LD_EXP 6
5181: IFFALSE 5207
// begin Say ( Givi , DG-Scout-15 ) ;
5183: LD_EXP 6
5187: PPUSH
5188: LD_STRING DG-Scout-15
5190: PPUSH
5191: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
5195: LD_EXP 10
5199: PPUSH
5200: LD_STRING DK-Scout-16
5202: PPUSH
5203: CALL_OW 88
// end ; async ;
5207: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
5208: LD_EXP 14
5212: PPUSH
5213: LD_STRING DO-Scout-17
5215: PPUSH
5216: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
5220: LD_INT 55
5222: PPUSH
5223: LD_INT 77
5225: PPUSH
5226: LD_INT 2
5228: PPUSH
5229: LD_INT 6
5231: NEG
5232: PPUSH
5233: CALL 2672 0 4
// wait ( 10 ) ;
5237: LD_INT 10
5239: PPUSH
5240: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
5244: LD_INT 55
5246: PPUSH
5247: LD_INT 77
5249: PPUSH
5250: CALL_OW 84
// wait ( 0 0$5 ) ;
5254: LD_INT 175
5256: PPUSH
5257: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
5261: LD_EXP 14
5265: PPUSH
5266: LD_STRING DO-Scout-18
5268: PPUSH
5269: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
5273: LD_INT 204
5275: PPUSH
5276: LD_INT 107
5278: PPUSH
5279: LD_INT 2
5281: PPUSH
5282: LD_INT 12
5284: NEG
5285: PPUSH
5286: CALL 2672 0 4
// wait ( 10 ) ;
5290: LD_INT 10
5292: PPUSH
5293: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
5297: LD_INT 204
5299: PPUSH
5300: LD_INT 107
5302: PPUSH
5303: CALL_OW 84
// wait ( 0 0$5 ) ;
5307: LD_INT 175
5309: PPUSH
5310: CALL_OW 67
// sync ;
5314: SYNC
// CenterNowOnUnits ( Heike ) ;
5315: LD_EXP 5
5319: PPUSH
5320: CALL_OW 87
// Say ( Olaf , DO-Scout-19 ) ;
5324: LD_EXP 14
5328: PPUSH
5329: LD_STRING DO-Scout-19
5331: PPUSH
5332: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
5336: LD_EXP 14
5340: PPUSH
5341: LD_STRING DO-Scout-20
5343: PPUSH
5344: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
5348: LD_EXP 5
5352: PPUSH
5353: LD_STRING DH-Scout-21
5355: PPUSH
5356: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
5360: LD_EXP 5
5364: PPUSH
5365: LD_STRING DH-Scout-22
5367: PPUSH
5368: CALL_OW 88
// InGameOff ;
5372: CALL_OW 9
// if Givi then
5376: LD_EXP 6
5380: IFFALSE 5395
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
5382: LD_INT 13
5384: PPUSH
5385: LD_INT 2
5387: PPUSH
5388: LD_INT 1
5390: PPUSH
5391: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
5395: LD_STRING Road
5397: PPUSH
5398: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5402: LD_ADDR_VAR 0 2
5406: PUSH
5407: LD_INT 22
5409: PUSH
5410: LD_INT 5
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 21
5419: PUSH
5420: LD_INT 2
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PPUSH
5431: CALL_OW 69
5435: PUSH
5436: FOR_IN
5437: IFFALSE 5453
// SetSide ( i , 2 ) ;
5439: LD_VAR 0 2
5443: PPUSH
5444: LD_INT 2
5446: PPUSH
5447: CALL_OW 235
5451: GO 5436
5453: POP
5454: POP
// SaveForQuickRestart ;
5455: CALL_OW 22
// end ;
5459: LD_VAR 0 1
5463: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
5464: LD_INT 2
5466: PPUSH
5467: LD_INT 9
5469: PPUSH
5470: CALL_OW 294
5474: IFFALSE 5802
5476: GO 5478
5478: DISABLE
// begin DialogueOn ;
5479: CALL_OW 6
// ShowArea ( 2 , crossRoadArea ) ;
5483: LD_INT 2
5485: PPUSH
5486: LD_INT 9
5488: PPUSH
5489: CALL_OW 334
// CenterNowOnXY ( 111 , 72 ) ;
5493: LD_INT 111
5495: PPUSH
5496: LD_INT 72
5498: PPUSH
5499: CALL_OW 86
// if IsOk ( Kamil ) then
5503: LD_EXP 9
5507: PPUSH
5508: CALL_OW 302
5512: IFFALSE 5629
// begin Say ( Kamil , DKam-Cross-1 ) ;
5514: LD_EXP 9
5518: PPUSH
5519: LD_STRING DKam-Cross-1
5521: PPUSH
5522: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
5526: LD_EXP 9
5530: PPUSH
5531: LD_STRING DKam-Cross-2
5533: PPUSH
5534: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
5538: LD_EXP 9
5542: PPUSH
5543: LD_STRING DKam-Cross-3
5545: PPUSH
5546: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
5550: LD_EXP 9
5554: PPUSH
5555: LD_STRING DKam-Cross-4
5557: PPUSH
5558: CALL_OW 88
// if IsOk ( Ibrahim ) then
5562: LD_EXP 8
5566: PPUSH
5567: CALL_OW 302
5571: IFFALSE 5627
// begin if ibrahimJoinedIn04 then
5573: LD_EXP 4
5577: IFFALSE 5591
// Say ( Ibrahim , DI-Cross-b-5 ) ;
5579: LD_EXP 8
5583: PPUSH
5584: LD_STRING DI-Cross-b-5
5586: PPUSH
5587: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
5591: LD_EXP 8
5595: PPUSH
5596: LD_STRING DI-Cross-b-6
5598: PPUSH
5599: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
5603: LD_EXP 8
5607: PPUSH
5608: LD_STRING DI-Cross-b-7
5610: PPUSH
5611: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
5615: LD_EXP 9
5619: PPUSH
5620: LD_STRING DKam-Cross-8
5622: PPUSH
5623: CALL_OW 88
// end ; end else
5627: GO 5776
// if IsOk ( Sophia ) then
5629: LD_EXP 11
5633: PPUSH
5634: CALL_OW 302
5638: IFFALSE 5755
// begin Say ( Sophia , DS-Cross-1 ) ;
5640: LD_EXP 11
5644: PPUSH
5645: LD_STRING DS-Cross-1
5647: PPUSH
5648: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
5652: LD_EXP 11
5656: PPUSH
5657: LD_STRING DS-Cross-2
5659: PPUSH
5660: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
5664: LD_EXP 11
5668: PPUSH
5669: LD_STRING DS-Cross-3
5671: PPUSH
5672: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
5676: LD_EXP 11
5680: PPUSH
5681: LD_STRING DS-Cross-4
5683: PPUSH
5684: CALL_OW 88
// if IsOk ( Ibrahim ) then
5688: LD_EXP 8
5692: PPUSH
5693: CALL_OW 302
5697: IFFALSE 5753
// begin if ibrahimJoinedIn04 then
5699: LD_EXP 4
5703: IFFALSE 5717
// Say ( Ibrahim , DI-Cross-b-5 ) ;
5705: LD_EXP 8
5709: PPUSH
5710: LD_STRING DI-Cross-b-5
5712: PPUSH
5713: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
5717: LD_EXP 8
5721: PPUSH
5722: LD_STRING DI-Cross-b-6
5724: PPUSH
5725: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
5729: LD_EXP 8
5733: PPUSH
5734: LD_STRING DI-Cross-b-7
5736: PPUSH
5737: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
5741: LD_EXP 11
5745: PPUSH
5746: LD_STRING DS-Cross-8
5748: PPUSH
5749: CALL_OW 88
// end ; end else
5753: GO 5776
// if UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) then
5755: LD_EXP 17
5759: PPUSH
5760: LD_INT 26
5762: PUSH
5763: LD_INT 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 72
5774: IFFALSE 5776
// begin end ; SetTech ( tech_Crane , 2 , state_enabled ) ;
5776: LD_EXP 31
5780: PPUSH
5781: LD_INT 2
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 322
// DialogueOff ;
5791: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
5795: LD_STRING Crane
5797: PPUSH
5798: CALL_OW 337
// end ; end_of_file
5802: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
5803: GO 5805
5805: DISABLE
// begin ru_radar := 98 ;
5806: LD_ADDR_EXP 20
5810: PUSH
5811: LD_INT 98
5813: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
5814: LD_ADDR_EXP 21
5818: PUSH
5819: LD_INT 89
5821: ST_TO_ADDR
// us_hack := 99 ;
5822: LD_ADDR_EXP 22
5826: PUSH
5827: LD_INT 99
5829: ST_TO_ADDR
// us_artillery := 97 ;
5830: LD_ADDR_EXP 23
5834: PUSH
5835: LD_INT 97
5837: ST_TO_ADDR
// ar_bio_bomb := 91 ;
5838: LD_ADDR_EXP 24
5842: PUSH
5843: LD_INT 91
5845: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
5846: LD_ADDR_EXP 25
5850: PUSH
5851: LD_INT 92
5853: ST_TO_ADDR
// tech_Artillery := 80 ;
5854: LD_ADDR_EXP 26
5858: PUSH
5859: LD_INT 80
5861: ST_TO_ADDR
// tech_RadMat := 81 ;
5862: LD_ADDR_EXP 27
5866: PUSH
5867: LD_INT 81
5869: ST_TO_ADDR
// tech_BasicTools := 82 ;
5870: LD_ADDR_EXP 28
5874: PUSH
5875: LD_INT 82
5877: ST_TO_ADDR
// tech_Cargo := 83 ;
5878: LD_ADDR_EXP 29
5882: PUSH
5883: LD_INT 83
5885: ST_TO_ADDR
// tech_Track := 84 ;
5886: LD_ADDR_EXP 30
5890: PUSH
5891: LD_INT 84
5893: ST_TO_ADDR
// tech_Crane := 85 ;
5894: LD_ADDR_EXP 31
5898: PUSH
5899: LD_INT 85
5901: ST_TO_ADDR
// tech_Bulldozer := 86 ;
5902: LD_ADDR_EXP 32
5906: PUSH
5907: LD_INT 86
5909: ST_TO_ADDR
// tech_Hovercraft := 87 ;
5910: LD_ADDR_EXP 33
5914: PUSH
5915: LD_INT 87
5917: ST_TO_ADDR
// end ;
5918: END
