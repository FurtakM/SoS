// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 740 0 2
// PrepareArabian ;
  31: CALL 1433 0 0
// PrepareRussian ;
  35: CALL 3031 0 0
// Action ;
  39: CALL 8004 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 1 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 1
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 250: LD_ADDR_OWVAR 79
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// end ;
 258: LD_VAR 0 1
 262: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 263: LD_EXP 10
 267: NOT
 268: PUSH
 269: LD_EXP 9
 273: NOT
 274: AND
 275: PUSH
 276: LD_EXP 39
 280: NOT
 281: AND
 282: PUSH
 283: LD_EXP 40
 287: NOT
 288: AND
 289: IFFALSE 301
 291: GO 293
 293: DISABLE
// SetAchievement ( ACH_EXT ) ;
 294: LD_STRING ACH_EXT
 296: PPUSH
 297: CALL_OW 543
 301: END
// every 0 0$1 trigger captureCounter >= 6 do
 302: LD_EXP 18
 306: PUSH
 307: LD_INT 6
 309: GREATEREQUAL
 310: IFFALSE 322
 312: GO 314
 314: DISABLE
// SetAchievement ( ACH_KEY ) ;
 315: LD_STRING ACH_KEY
 317: PPUSH
 318: CALL_OW 543
 322: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 323: LD_EXP 19
 327: PUSH
 328: LD_INT 3
 330: GREATEREQUAL
 331: IFFALSE 343
 333: GO 335
 335: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 336: LD_STRING ACH_CHEM
 338: PPUSH
 339: CALL_OW 543
 343: END
// every 0 0$1 trigger debug do var i ;
 344: LD_EXP 1
 348: IFFALSE 432
 350: GO 352
 352: DISABLE
 353: LD_INT 0
 355: PPUSH
// begin enable ;
 356: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 357: LD_ADDR_VAR 0 1
 361: PUSH
 362: LD_INT 22
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: LD_INT 21
 377: PUSH
 378: LD_INT 3
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: FOR_IN
 399: IFFALSE 430
// if GetLives ( i ) < 1000 then
 401: LD_VAR 0 1
 405: PPUSH
 406: CALL_OW 256
 410: PUSH
 411: LD_INT 1000
 413: LESS
 414: IFFALSE 428
// SetLives ( i , 1000 ) ;
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 1000
 423: PPUSH
 424: CALL_OW 234
 428: GO 398
 430: POP
 431: POP
// end ; end_of_file
 432: PPOPN 1
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function SayX ( units , ident ) ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// result := false ;
 527: LD_ADDR_VAR 0 3
 531: PUSH
 532: LD_INT 0
 534: ST_TO_ADDR
// if not units then
 535: LD_VAR 0 1
 539: NOT
 540: IFFALSE 544
// exit ;
 542: GO 598
// for i in units do
 544: LD_ADDR_VAR 0 4
 548: PUSH
 549: LD_VAR 0 1
 553: PUSH
 554: FOR_IN
 555: IFFALSE 596
// if IsOk ( i ) then
 557: LD_VAR 0 4
 561: PPUSH
 562: CALL_OW 302
 566: IFFALSE 594
// begin Say ( i , ident ) ;
 568: LD_VAR 0 4
 572: PPUSH
 573: LD_VAR 0 2
 577: PPUSH
 578: CALL_OW 88
// result := i ;
 582: LD_ADDR_VAR 0 3
 586: PUSH
 587: LD_VAR 0 4
 591: ST_TO_ADDR
// break ;
 592: GO 596
// end ;
 594: GO 554
 596: POP
 597: POP
// end ;
 598: LD_VAR 0 3
 602: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 603: LD_INT 0
 605: PPUSH
 606: PPUSH
// InitUc ;
 607: CALL_OW 18
// InitHc ;
 611: CALL_OW 19
// uc_side := 0 ;
 615: LD_ADDR_OWVAR 20
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// uc_nation := 0 ;
 623: LD_ADDR_OWVAR 21
 627: PUSH
 628: LD_INT 0
 630: ST_TO_ADDR
// for i = 1 to amount do
 631: LD_ADDR_VAR 0 4
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 2
 645: PUSH
 646: FOR_TO
 647: IFFALSE 729
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 649: LD_ADDR_OWVAR 29
 653: PUSH
 654: LD_INT 9
 656: PPUSH
 657: LD_INT 12
 659: PPUSH
 660: CALL_OW 12
 664: PUSH
 665: LD_INT 9
 667: PPUSH
 668: LD_INT 12
 670: PPUSH
 671: CALL_OW 12
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 680: LD_ADDR_OWVAR 35
 684: PUSH
 685: LD_INT 1
 687: NEG
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL_OW 12
 696: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 697: LD_INT 0
 699: PPUSH
 700: LD_INT 12
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 646
 729: POP
 730: POP
// InitHc ;
 731: CALL_OW 19
// end ;
 735: LD_VAR 0 3
 739: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 740: LD_INT 0
 742: PPUSH
 743: PPUSH
// uc_side := 0 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// uc_nation := 0 ;
 752: LD_ADDR_OWVAR 21
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// for i := 1 to 3 do
 760: LD_ADDR_VAR 0 4
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_INT 3
 772: PUSH
 773: FOR_TO
 774: IFFALSE 811
// begin hc_class := 21 ;
 776: LD_ADDR_OWVAR 28
 780: PUSH
 781: LD_INT 21
 783: ST_TO_ADDR
// hc_gallery :=  ;
 784: LD_ADDR_OWVAR 33
 788: PUSH
 789: LD_STRING 
 791: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 792: CALL_OW 44
 796: PPUSH
 797: LD_VAR 0 1
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: CALL_OW 49
// end ;
 809: GO 773
 811: POP
 812: POP
// for i := 1 to 3 do
 813: LD_ADDR_VAR 0 4
 817: PUSH
 818: DOUBLE
 819: LD_INT 1
 821: DEC
 822: ST_TO_ADDR
 823: LD_INT 3
 825: PUSH
 826: FOR_TO
 827: IFFALSE 864
// begin hc_class := 18 ;
 829: LD_ADDR_OWVAR 28
 833: PUSH
 834: LD_INT 18
 836: ST_TO_ADDR
// hc_gallery :=  ;
 837: LD_ADDR_OWVAR 33
 841: PUSH
 842: LD_STRING 
 844: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 845: CALL_OW 44
 849: PPUSH
 850: LD_VAR 0 1
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// end ;
 862: GO 826
 864: POP
 865: POP
// for i := 1 to 3 do
 866: LD_ADDR_VAR 0 4
 870: PUSH
 871: DOUBLE
 872: LD_INT 1
 874: DEC
 875: ST_TO_ADDR
 876: LD_INT 3
 878: PUSH
 879: FOR_TO
 880: IFFALSE 917
// begin hc_class := 13 ;
 882: LD_ADDR_OWVAR 28
 886: PUSH
 887: LD_INT 13
 889: ST_TO_ADDR
// hc_gallery :=  ;
 890: LD_ADDR_OWVAR 33
 894: PUSH
 895: LD_STRING 
 897: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 898: CALL_OW 44
 902: PPUSH
 903: LD_VAR 0 1
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 879
 917: POP
 918: POP
// for i := 1 to 4 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 4
 931: PUSH
 932: FOR_TO
 933: IFFALSE 970
// begin hc_class := class_frog ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 19
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_VAR 0 2
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end ;
 968: GO 932
 970: POP
 971: POP
// end ;
 972: LD_VAR 0 3
 976: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 977: LD_INT 0
 979: PPUSH
 980: PPUSH
 981: PPUSH
// if not observer or not unit then
 982: LD_VAR 0 1
 986: NOT
 987: PUSH
 988: LD_VAR 0 2
 992: NOT
 993: OR
 994: IFFALSE 998
// exit ;
 996: GO 1046
// if not See ( GetSide ( observer ) , unit ) then
 998: LD_VAR 0 1
1002: PPUSH
1003: CALL_OW 255
1007: PPUSH
1008: LD_VAR 0 2
1012: PPUSH
1013: CALL_OW 292
1017: NOT
1018: IFFALSE 1022
// exit ;
1020: GO 1046
// result := GetDistUnits ( observer , unit ) < 12 ;
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: LD_VAR 0 1
1031: PPUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: CALL_OW 296
1041: PUSH
1042: LD_INT 12
1044: LESS
1045: ST_TO_ADDR
// end ;
1046: LD_VAR 0 3
1050: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1051: LD_INT 0
1053: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_VAR 0 2
1067: PUSH
1068: LD_INT 2
1070: ARRAY
1071: PPUSH
1072: CALL_OW 488
1076: PUSH
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 1
1084: ARRAY
1085: PPUSH
1086: LD_VAR 0 2
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 428
1099: PUSH
1100: LD_INT 0
1102: EQUAL
1103: AND
1104: IFFALSE 1138
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1106: LD_VAR 0 1
1110: PPUSH
1111: LD_VAR 0 2
1115: PUSH
1116: LD_INT 1
1118: ARRAY
1119: PPUSH
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 2
1127: ARRAY
1128: PPUSH
1129: LD_VAR 0 3
1133: PPUSH
1134: CALL_OW 48
// end ;
1138: LD_VAR 0 4
1142: RET
// export function ReverseArray ( array ) ; var i ; begin
1143: LD_INT 0
1145: PPUSH
1146: PPUSH
// if not array then
1147: LD_VAR 0 1
1151: NOT
1152: IFFALSE 1156
// exit ;
1154: GO 1214
// result := [ ] ;
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: EMPTY
1162: ST_TO_ADDR
// for i := 1 to array do
1163: LD_ADDR_VAR 0 3
1167: PUSH
1168: DOUBLE
1169: LD_INT 1
1171: DEC
1172: ST_TO_ADDR
1173: LD_VAR 0 1
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1212
// result := Insert ( result , 1 , array [ i ] ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_INT 1
1193: PPUSH
1194: LD_VAR 0 1
1198: PUSH
1199: LD_VAR 0 3
1203: ARRAY
1204: PPUSH
1205: CALL_OW 2
1209: ST_TO_ADDR
1210: GO 1178
1212: POP
1213: POP
// end ;
1214: LD_VAR 0 2
1218: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1219: LD_INT 0
1221: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1222: LD_VAR 0 1
1226: PPUSH
1227: LD_VAR 0 2
1231: PPUSH
1232: LD_VAR 0 3
1236: PPUSH
1237: LD_VAR 0 4
1241: PPUSH
1242: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1246: LD_VAR 0 1
1250: PPUSH
1251: LD_VAR 0 2
1255: PPUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: CALL_OW 331
// end ;
1265: LD_VAR 0 5
1269: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1270: LD_INT 0
1272: PPUSH
// if not units then
1273: LD_VAR 0 1
1277: NOT
1278: IFFALSE 1282
// exit ;
1280: GO 1365
// result := true ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 1
1289: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 26
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: LD_VAR 0 2
1318: PPUSH
1319: CALL_OW 88
1323: NOT
1324: IFFALSE 1365
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1326: LD_ADDR_VAR 0 4
1330: PUSH
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 26
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 72
1350: PUSH
1351: LD_INT 1
1353: ARRAY
1354: PPUSH
1355: LD_VAR 0 3
1359: PPUSH
1360: CALL_OW 88
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 4
1369: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
// if not group then
1374: LD_VAR 0 2
1378: NOT
1379: IFFALSE 1383
// exit ;
1381: GO 1428
// for i in group do
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: LD_VAR 0 2
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1426
// if See ( side , i ) then
1396: LD_VAR 0 1
1400: PPUSH
1401: LD_VAR 0 4
1405: PPUSH
1406: CALL_OW 292
1410: IFFALSE 1424
// begin result := true ;
1412: LD_ADDR_VAR 0 3
1416: PUSH
1417: LD_INT 1
1419: ST_TO_ADDR
// exit ;
1420: POP
1421: POP
1422: GO 1428
// end ;
1424: GO 1393
1426: POP
1427: POP
// end ; end_of_file
1428: LD_VAR 0 3
1432: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1433: LD_INT 0
1435: PPUSH
1436: PPUSH
// uc_side := 2 ;
1437: LD_ADDR_OWVAR 20
1441: PUSH
1442: LD_INT 2
1444: ST_TO_ADDR
// uc_nation := 2 ;
1445: LD_ADDR_OWVAR 21
1449: PUSH
1450: LD_INT 2
1452: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Heike
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 31586 0 3
1476: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 24
1481: PUSH
1482: LD_STRING Ibrahim
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 31586 0 3
1500: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 22
1505: PUSH
1506: LD_STRING Givi
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 31586 0 3
1524: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 25
1529: PUSH
1530: LD_STRING Kamil
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 31586 0 3
1548: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 26
1553: PUSH
1554: LD_STRING Kaia
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 31586 0 3
1572: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 27
1577: PUSH
1578: LD_STRING Sophia
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 31586 0 3
1596: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 28
1601: PUSH
1602: LD_STRING Markov
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 31586 0 3
1620: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1621: LD_ADDR_EXP 33
1625: PUSH
1626: LD_STRING Aviradze
1628: PPUSH
1629: LD_EXP 1
1633: NOT
1634: PPUSH
1635: LD_EXP 2
1639: PPUSH
1640: CALL 31586 0 3
1644: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1645: LD_ADDR_EXP 32
1649: PUSH
1650: LD_STRING Kurt
1652: PPUSH
1653: LD_EXP 1
1657: NOT
1658: PPUSH
1659: LD_EXP 2
1663: PPUSH
1664: CALL 31586 0 3
1668: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1669: LD_ADDR_EXP 23
1673: PUSH
1674: LD_STRING Mike
1676: PPUSH
1677: LD_EXP 1
1681: NOT
1682: PPUSH
1683: LD_EXP 2
1687: PPUSH
1688: CALL 31586 0 3
1692: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1693: LD_ADDR_EXP 30
1697: PUSH
1698: LD_STRING Olaf
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: LD_STRING 
1706: PPUSH
1707: CALL 31586 0 3
1711: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1712: LD_ADDR_EXP 34
1716: PUSH
1717: LD_STRING 04_2_others
1719: PPUSH
1720: CALL_OW 31
1724: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1725: LD_ADDR_EXP 36
1729: PUSH
1730: LD_STRING 04_2_apes
1732: PPUSH
1733: CALL_OW 31
1737: ST_TO_ADDR
// if hasFlamethrower then
1738: LD_EXP 3
1742: IFFALSE 1973
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1744: LD_INT 70
1746: PPUSH
1747: LD_INT 2
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_INT 13
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: LD_INT 1
1770: PUSH
1771: LD_INT 27
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 1000
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 13
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: LD_INT 1
1807: PUSH
1808: LD_INT 25
1810: PUSH
1811: LD_INT 2
1813: PUSH
1814: LD_INT 1000
1816: PUSH
1817: LD_INT 0
1819: PUSH
1820: LD_INT 0
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 13
1838: PUSH
1839: LD_INT 1
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: LD_INT 26
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1000
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 13
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 1
1881: PUSH
1882: LD_INT 27
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1000
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 32
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 60
1933: PUSH
1934: LD_INT 40
1936: PUSH
1937: LD_INT 20
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: PUSH
1945: LD_OWVAR 67
1949: ARRAY
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// end else
1971: GO 2187
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1973: LD_ADDR_EXP 35
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 1
1986: PUSH
1987: LD_INT 25
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 1000
1995: PUSH
1996: LD_INT 0
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 13
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 27
2026: PUSH
2027: LD_INT 2
2029: PUSH
2030: LD_INT 1000
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 13
2054: PUSH
2055: LD_INT 1
2057: PUSH
2058: LD_INT 1
2060: PUSH
2061: LD_INT 24
2063: PUSH
2064: LD_INT 2
2066: PUSH
2067: LD_INT 1000
2069: PUSH
2070: LD_INT 0
2072: PUSH
2073: LD_INT 0
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 13
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: LD_INT 1
2097: PUSH
2098: LD_INT 27
2100: PUSH
2101: LD_INT 2
2103: PUSH
2104: LD_INT 1000
2106: PUSH
2107: LD_INT 0
2109: PUSH
2110: LD_INT 0
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 13
2128: PUSH
2129: LD_INT 1
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: LD_INT 32
2137: PUSH
2138: LD_INT 2
2140: PUSH
2141: LD_INT 1000
2143: PUSH
2144: LD_INT 0
2146: PUSH
2147: LD_INT 50
2149: PUSH
2150: LD_INT 30
2152: PUSH
2153: LD_INT 20
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: LD_OWVAR 67
2165: ARRAY
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: ST_TO_ADDR
// end ; uc_side := 5 ;
2187: LD_ADDR_OWVAR 20
2191: PUSH
2192: LD_INT 5
2194: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2195: LD_ADDR_EXP 29
2199: PUSH
2200: LD_STRING Abdul
2202: PPUSH
2203: LD_INT 0
2205: PPUSH
2206: LD_STRING 
2208: PPUSH
2209: CALL 31586 0 3
2213: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2214: LD_ADDR_EXP 31
2218: PUSH
2219: LD_STRING Omar
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: LD_STRING 
2227: PPUSH
2228: CALL 31586 0 3
2232: ST_TO_ADDR
// end ;
2233: LD_VAR 0 1
2237: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2238: LD_INT 0
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
// pfx := 04_1_ ;
2245: LD_ADDR_VAR 0 2
2249: PUSH
2250: LD_STRING 04_1_
2252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2253: LD_INT 35
2255: PPUSH
2256: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2260: LD_INT 3
2262: PPUSH
2263: LD_INT 2
2265: PPUSH
2266: CALL_OW 428
2270: NOT
2271: IFFALSE 2253
// tmp := [ ] ;
2273: LD_ADDR_VAR 0 4
2277: PUSH
2278: EMPTY
2279: ST_TO_ADDR
// uc_side := 5 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 5
2287: ST_TO_ADDR
// uc_nation := 2 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2296: LD_ADDR_EXP 33
2300: PUSH
2301: LD_STRING Aviradze_L
2303: PPUSH
2304: LD_EXP 1
2308: NOT
2309: PPUSH
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL 31586 0 3
2319: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2320: LD_EXP 33
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 14
2339: PPUSH
2340: LD_INT 0
2342: PPUSH
2343: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2347: LD_EXP 33
2351: PPUSH
2352: LD_INT 8
2354: PPUSH
2355: LD_INT 6
2357: PPUSH
2358: CALL_OW 111
// AddComHold ( Aviradze ) ;
2362: LD_EXP 33
2366: PPUSH
2367: CALL_OW 200
// tmp := [ Aviradze ] ;
2371: LD_ADDR_VAR 0 4
2375: PUSH
2376: LD_EXP 33
2380: PUSH
2381: EMPTY
2382: LIST
2383: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2384: LD_INT 70
2386: PPUSH
2387: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2391: LD_STRING Ibrahim_L
2393: PPUSH
2394: LD_EXP 1
2398: NOT
2399: PPUSH
2400: LD_VAR 0 2
2404: PPUSH
2405: CALL 31586 0 3
2409: IFFALSE 2509
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2411: LD_ADDR_EXP 24
2415: PUSH
2416: LD_STRING Ibrahim_L
2418: PPUSH
2419: LD_EXP 1
2423: NOT
2424: PPUSH
2425: LD_VAR 0 2
2429: PPUSH
2430: CALL 31586 0 3
2434: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2435: LD_EXP 24
2439: PPUSH
2440: LD_INT 2
2442: PPUSH
2443: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 14
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2462: LD_EXP 24
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: LD_INT 7
2472: PPUSH
2473: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2477: LD_EXP 24
2481: PPUSH
2482: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2486: LD_ADDR_VAR 0 4
2490: PUSH
2491: LD_VAR 0 4
2495: PUSH
2496: LD_EXP 24
2500: ADD
2501: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2502: LD_INT 70
2504: PPUSH
2505: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2509: LD_STRING Kaia_L
2511: PPUSH
2512: LD_EXP 1
2516: NOT
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL 31586 0 3
2527: IFFALSE 2627
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2529: LD_ADDR_EXP 26
2533: PUSH
2534: LD_STRING Kaia_L
2536: PPUSH
2537: LD_EXP 1
2541: NOT
2542: PPUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL 31586 0 3
2552: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2553: LD_EXP 26
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 14
2572: PPUSH
2573: LD_INT 0
2575: PPUSH
2576: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2580: LD_EXP 26
2584: PPUSH
2585: LD_INT 8
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 111
// AddComHold ( Kaia ) ;
2595: LD_EXP 26
2599: PPUSH
2600: CALL_OW 200
// tmp := tmp ^ Kaia ;
2604: LD_ADDR_VAR 0 4
2608: PUSH
2609: LD_VAR 0 4
2613: PUSH
2614: LD_EXP 26
2618: ADD
2619: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2620: LD_INT 70
2622: PPUSH
2623: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2627: LD_STRING Kamil_L
2629: PPUSH
2630: LD_EXP 1
2634: NOT
2635: PPUSH
2636: LD_VAR 0 2
2640: PPUSH
2641: CALL 31586 0 3
2645: IFFALSE 2745
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2647: LD_ADDR_EXP 25
2651: PUSH
2652: LD_STRING Kamil_L
2654: PPUSH
2655: LD_EXP 1
2659: NOT
2660: PPUSH
2661: LD_VAR 0 2
2665: PPUSH
2666: CALL 31586 0 3
2670: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2671: LD_EXP 25
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 14
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2698: LD_EXP 25
2702: PPUSH
2703: LD_INT 8
2705: PPUSH
2706: LD_INT 7
2708: PPUSH
2709: CALL_OW 111
// AddComHold ( Kamil ) ;
2713: LD_EXP 25
2717: PPUSH
2718: CALL_OW 200
// tmp := tmp ^ Kamil ;
2722: LD_ADDR_VAR 0 4
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_EXP 25
2736: ADD
2737: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2738: LD_INT 70
2740: PPUSH
2741: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2745: LD_STRING Sophia_L
2747: PPUSH
2748: LD_EXP 1
2752: NOT
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: CALL 31586 0 3
2763: IFFALSE 2863
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2765: LD_ADDR_EXP 27
2769: PUSH
2770: LD_STRING Sophia_L
2772: PPUSH
2773: LD_EXP 1
2777: NOT
2778: PPUSH
2779: LD_VAR 0 2
2783: PPUSH
2784: CALL 31586 0 3
2788: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2789: LD_EXP 27
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 14
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2816: LD_EXP 27
2820: PPUSH
2821: LD_INT 9
2823: PPUSH
2824: LD_INT 6
2826: PPUSH
2827: CALL_OW 111
// AddComHold ( Sophia ) ;
2831: LD_EXP 27
2835: PPUSH
2836: CALL_OW 200
// tmp := tmp ^ Sophia ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_VAR 0 4
2849: PUSH
2850: LD_EXP 27
2854: ADD
2855: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2856: LD_INT 70
2858: PPUSH
2859: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_STRING 04_1_others_L
2870: PPUSH
2871: CALL_OW 31
2875: ST_TO_ADDR
// if tmp2 then
2876: LD_VAR 0 5
2880: IFFALSE 2977
// for i in tmp2 do
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: FOR_IN
2893: IFFALSE 2975
// begin SetDir ( i , 2 ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 14
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2922: LD_ADDR_EXP 34
2926: PUSH
2927: LD_EXP 34
2931: PPUSH
2932: LD_EXP 34
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: PPUSH
2941: LD_VAR 0 3
2945: PPUSH
2946: CALL_OW 1
2950: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 17
2958: PPUSH
2959: LD_INT 14
2961: PPUSH
2962: CALL_OW 111
// wait ( 0 0$2 ) ;
2966: LD_INT 70
2968: PPUSH
2969: CALL_OW 67
// end ;
2973: GO 2892
2975: POP
2976: POP
// for i in tmp union tmp2 do
2977: LD_ADDR_VAR 0 3
2981: PUSH
2982: LD_VAR 0 4
2986: PUSH
2987: LD_VAR 0 5
2991: UNION
2992: PUSH
2993: FOR_IN
2994: IFFALSE 3024
// begin SetSide ( i , 2 ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_INT 2
3003: PPUSH
3004: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_EXP 21
3017: PPUSH
3018: CALL_OW 112
// end ;
3022: GO 2993
3024: POP
3025: POP
// end ; end_of_file
3026: LD_VAR 0 1
3030: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
3035: PPUSH
// uc_side := 3 ;
3036: LD_ADDR_OWVAR 20
3040: PUSH
3041: LD_INT 3
3043: ST_TO_ADDR
// uc_nation := 3 ;
3044: LD_ADDR_OWVAR 21
3048: PUSH
3049: LD_INT 3
3051: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3052: LD_ADDR_EXP 37
3056: PUSH
3057: EMPTY
3058: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3059: LD_ADDR_EXP 38
3063: PUSH
3064: EMPTY
3065: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3066: LD_ADDR_EXP 41
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// for i := 1 to 2 do
3073: LD_ADDR_VAR 0 2
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_INT 2
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3222
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3089: LD_INT 0
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 4
3100: PUSH
3101: LD_INT 5
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: PUSH
3109: LD_OWVAR 67
3113: ARRAY
3114: PPUSH
3115: CALL_OW 380
// un := CreateHuman ;
3119: LD_ADDR_VAR 0 3
3123: PUSH
3124: CALL_OW 44
3128: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3129: LD_ADDR_EXP 37
3133: PUSH
3134: LD_EXP 37
3138: PPUSH
3139: LD_EXP 37
3143: PUSH
3144: LD_INT 1
3146: PLUS
3147: PPUSH
3148: LD_VAR 0 3
3152: PPUSH
3153: CALL_OW 1
3157: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3158: LD_VAR 0 3
3162: PPUSH
3163: LD_INT 100
3165: PPUSH
3166: LD_INT 63
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_INT 97
3186: PPUSH
3187: LD_INT 64
3189: PPUSH
3190: CALL_OW 428
3194: PUSH
3195: LD_INT 98
3197: PPUSH
3198: LD_INT 58
3200: PPUSH
3201: CALL_OW 428
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_VAR 0 2
3214: ARRAY
3215: PPUSH
3216: CALL_OW 120
// end ;
3220: GO 3086
3222: POP
3223: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3224: LD_INT 51
3226: PPUSH
3227: LD_INT 77
3229: PPUSH
3230: CALL_OW 428
3234: PPUSH
3235: CALL_OW 274
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 120
3245: PPUSH
3246: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3250: LD_INT 10
3252: PPUSH
3253: CALL_OW 274
3257: PPUSH
3258: LD_INT 2
3260: PPUSH
3261: LD_INT 300
3263: PPUSH
3264: CALL_OW 277
// for i := 1 to 2 do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 2
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3400
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3284: LD_INT 0
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_INT 3
3292: PUSH
3293: LD_INT 4
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: LD_INT 6
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_OWVAR 67
3312: ARRAY
3313: PPUSH
3314: CALL_OW 380
// un := CreateHuman ;
3318: LD_ADDR_VAR 0 3
3322: PUSH
3323: CALL_OW 44
3327: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3328: LD_ADDR_EXP 38
3332: PUSH
3333: LD_EXP 38
3337: PPUSH
3338: LD_EXP 38
3342: PUSH
3343: LD_INT 1
3345: PLUS
3346: PPUSH
3347: LD_VAR 0 3
3351: PPUSH
3352: CALL_OW 1
3356: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3357: LD_VAR 0 3
3361: PPUSH
3362: LD_INT 198
3364: PPUSH
3365: LD_INT 106
3367: PPUSH
3368: CALL_OW 428
3372: PUSH
3373: LD_INT 205
3375: PPUSH
3376: LD_INT 114
3378: PPUSH
3379: CALL_OW 428
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: PUSH
3388: LD_VAR 0 2
3392: ARRAY
3393: PPUSH
3394: CALL_OW 52
// end ;
3398: GO 3281
3400: POP
3401: POP
// for i := 1 to 2 do
3402: LD_ADDR_VAR 0 2
3406: PUSH
3407: DOUBLE
3408: LD_INT 1
3410: DEC
3411: ST_TO_ADDR
3412: LD_INT 2
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3493
// begin PrepareHuman ( false , 2 , 3 ) ;
3418: LD_INT 0
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 3
3426: PPUSH
3427: CALL_OW 380
// un := CreateHuman ;
3431: LD_ADDR_VAR 0 3
3435: PUSH
3436: CALL_OW 44
3440: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3441: LD_ADDR_EXP 38
3445: PUSH
3446: LD_EXP 38
3450: PPUSH
3451: LD_EXP 38
3455: PUSH
3456: LD_INT 1
3458: PLUS
3459: PPUSH
3460: LD_VAR 0 3
3464: PPUSH
3465: CALL_OW 1
3469: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3470: LD_VAR 0 3
3474: PPUSH
3475: LD_INT 204
3477: PPUSH
3478: LD_INT 108
3480: PPUSH
3481: LD_INT 2
3483: PPUSH
3484: LD_INT 0
3486: PPUSH
3487: CALL_OW 50
// end ;
3491: GO 3415
3493: POP
3494: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 4
3507: PUSH
3508: LD_INT 5
3510: PUSH
3511: LD_INT 6
3513: PUSH
3514: LD_INT 7
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: PUSH
3523: LD_OWVAR 67
3527: ARRAY
3528: PUSH
3529: FOR_TO
3530: IFFALSE 3676
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3532: LD_INT 0
3534: PPUSH
3535: LD_INT 1
3537: PUSH
3538: LD_INT 1
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 1
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: CALL_OW 12
3567: ARRAY
3568: PPUSH
3569: LD_INT 3
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: LD_INT 5
3577: PUSH
3578: LD_INT 5
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: PUSH
3587: LD_OWVAR 67
3591: ARRAY
3592: PPUSH
3593: CALL_OW 380
// un := CreateHuman ;
3597: LD_ADDR_VAR 0 3
3601: PUSH
3602: CALL_OW 44
3606: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3607: LD_VAR 0 3
3611: PPUSH
3612: LD_INT 10
3614: PPUSH
3615: LD_INT 0
3617: PPUSH
3618: CALL 67237 0 3
3622: IFFALSE 3674
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3624: LD_ADDR_EXP 39
3628: PUSH
3629: LD_EXP 39
3633: PPUSH
3634: LD_EXP 39
3638: PUSH
3639: LD_INT 1
3641: PLUS
3642: PPUSH
3643: LD_VAR 0 3
3647: PPUSH
3648: CALL_OW 1
3652: ST_TO_ADDR
// if Prob ( 50 ) then
3653: LD_INT 50
3655: PPUSH
3656: CALL_OW 13
3660: IFFALSE 3674
// ForceSleep ( un , true ) ;
3662: LD_VAR 0 3
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 585
// end ; end ;
3674: GO 3529
3676: POP
3677: POP
// for i := 1 to 3 do
3678: LD_ADDR_VAR 0 2
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_INT 3
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3782
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3694: LD_INT 0
3696: PPUSH
3697: LD_INT 1
3699: PPUSH
3700: LD_INT 3
3702: PUSH
3703: LD_INT 4
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: PUSH
3714: LD_OWVAR 67
3718: ARRAY
3719: PPUSH
3720: CALL_OW 380
// un := CreateHuman ;
3724: LD_ADDR_VAR 0 3
3728: PUSH
3729: CALL_OW 44
3733: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3734: LD_VAR 0 3
3738: PPUSH
3739: LD_INT 11
3741: PPUSH
3742: LD_INT 0
3744: PPUSH
3745: CALL 67237 0 3
3749: IFFALSE 3780
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3751: LD_ADDR_EXP 39
3755: PUSH
3756: LD_EXP 39
3760: PPUSH
3761: LD_EXP 39
3765: PUSH
3766: LD_INT 1
3768: PLUS
3769: PPUSH
3770: LD_VAR 0 3
3774: PPUSH
3775: CALL_OW 1
3779: ST_TO_ADDR
// end ;
3780: GO 3691
3782: POP
3783: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3784: LD_ADDR_VAR 0 2
3788: PUSH
3789: DOUBLE
3790: LD_INT 1
3792: DEC
3793: ST_TO_ADDR
3794: LD_INT 5
3796: PUSH
3797: LD_INT 6
3799: PUSH
3800: LD_INT 7
3802: PUSH
3803: LD_INT 8
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: PUSH
3812: LD_OWVAR 67
3816: ARRAY
3817: PUSH
3818: FOR_TO
3819: IFFALSE 3965
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3821: LD_INT 0
3823: PPUSH
3824: LD_INT 1
3826: PUSH
3827: LD_INT 1
3829: PUSH
3830: LD_INT 2
3832: PUSH
3833: LD_INT 4
3835: PUSH
3836: LD_INT 1
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 1
3848: PPUSH
3849: LD_INT 5
3851: PPUSH
3852: CALL_OW 12
3856: ARRAY
3857: PPUSH
3858: LD_INT 3
3860: PUSH
3861: LD_INT 4
3863: PUSH
3864: LD_INT 5
3866: PUSH
3867: LD_INT 5
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: PUSH
3876: LD_OWVAR 67
3880: ARRAY
3881: PPUSH
3882: CALL_OW 380
// un := CreateHuman ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: CALL_OW 44
3895: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_INT 15
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL 67237 0 3
3911: IFFALSE 3963
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3913: LD_ADDR_EXP 40
3917: PUSH
3918: LD_EXP 40
3922: PPUSH
3923: LD_EXP 40
3927: PUSH
3928: LD_INT 1
3930: PLUS
3931: PPUSH
3932: LD_VAR 0 3
3936: PPUSH
3937: CALL_OW 1
3941: ST_TO_ADDR
// if Prob ( 50 ) then
3942: LD_INT 50
3944: PPUSH
3945: CALL_OW 13
3949: IFFALSE 3963
// ForceSleep ( un , true ) ;
3951: LD_VAR 0 3
3955: PPUSH
3956: LD_INT 1
3958: PPUSH
3959: CALL_OW 585
// end ; end ;
3963: GO 3818
3965: POP
3966: POP
// end ;
3967: LD_VAR 0 1
3971: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3972: LD_INT 0
3974: PPUSH
3975: PPUSH
3976: PPUSH
// uc_side := 3 ;
3977: LD_ADDR_OWVAR 20
3981: PUSH
3982: LD_INT 3
3984: ST_TO_ADDR
// uc_nation := 3 ;
3985: LD_ADDR_OWVAR 21
3989: PUSH
3990: LD_INT 3
3992: ST_TO_ADDR
// for i := 1 to 6 do
3993: LD_ADDR_VAR 0 2
3997: PUSH
3998: DOUBLE
3999: LD_INT 1
4001: DEC
4002: ST_TO_ADDR
4003: LD_INT 6
4005: PUSH
4006: FOR_TO
4007: IFFALSE 4086
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4009: LD_INT 0
4011: PPUSH
4012: LD_INT 1
4014: PUSH
4015: LD_INT 4
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 1
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 12
4032: ARRAY
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 380
// un := CreateHuman ;
4041: LD_ADDR_VAR 0 3
4045: PUSH
4046: CALL_OW 44
4050: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4051: LD_VAR 0 3
4055: PPUSH
4056: LD_INT 54
4058: PPUSH
4059: LD_INT 88
4061: PPUSH
4062: LD_INT 12
4064: PPUSH
4065: LD_INT 0
4067: PPUSH
4068: CALL_OW 50
// SetLives ( un , 1 ) ;
4072: LD_VAR 0 3
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: CALL_OW 234
// end ;
4084: GO 4006
4086: POP
4087: POP
// uc_side := 3 ;
4088: LD_ADDR_OWVAR 20
4092: PUSH
4093: LD_INT 3
4095: ST_TO_ADDR
// uc_nation := 0 ;
4096: LD_ADDR_OWVAR 21
4100: PUSH
4101: LD_INT 0
4103: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4104: LD_ADDR_EXP 42
4108: PUSH
4109: EMPTY
4110: ST_TO_ADDR
// apeEngGroup := [ ] ;
4111: LD_ADDR_EXP 43
4115: PUSH
4116: EMPTY
4117: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4118: LD_ADDR_VAR 0 2
4122: PUSH
4123: DOUBLE
4124: LD_INT 1
4126: DEC
4127: ST_TO_ADDR
4128: LD_INT 4
4130: PUSH
4131: LD_INT 5
4133: PUSH
4134: LD_INT 6
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: LD_OWVAR 67
4146: ARRAY
4147: PUSH
4148: FOR_TO
4149: IFFALSE 4263
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4151: LD_INT 0
4153: PPUSH
4154: LD_INT 15
4156: PPUSH
4157: LD_INT 3
4159: PUSH
4160: LD_INT 4
4162: PUSH
4163: LD_INT 5
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: LIST
4170: PUSH
4171: LD_OWVAR 67
4175: ARRAY
4176: PPUSH
4177: CALL_OW 380
// un := CreateHuman ;
4181: LD_ADDR_VAR 0 3
4185: PUSH
4186: CALL_OW 44
4190: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4191: LD_ADDR_EXP 42
4195: PUSH
4196: LD_EXP 42
4200: PPUSH
4201: LD_EXP 42
4205: PUSH
4206: LD_INT 1
4208: PLUS
4209: PPUSH
4210: LD_VAR 0 3
4214: PPUSH
4215: CALL_OW 1
4219: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4220: LD_VAR 0 3
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: LD_INT 5
4230: PPUSH
4231: CALL_OW 12
4235: PPUSH
4236: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4240: LD_VAR 0 3
4244: PPUSH
4245: LD_INT 56
4247: PPUSH
4248: LD_INT 82
4250: PPUSH
4251: LD_INT 6
4253: PPUSH
4254: LD_INT 0
4256: PPUSH
4257: CALL_OW 50
// end ;
4261: GO 4148
4263: POP
4264: POP
// for i := 1 to 2 do
4265: LD_ADDR_VAR 0 2
4269: PUSH
4270: DOUBLE
4271: LD_INT 1
4273: DEC
4274: ST_TO_ADDR
4275: LD_INT 2
4277: PUSH
4278: FOR_TO
4279: IFFALSE 4355
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4281: LD_INT 0
4283: PPUSH
4284: LD_INT 16
4286: PPUSH
4287: LD_INT 4
4289: PPUSH
4290: CALL_OW 380
// un := CreateHuman ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4304: LD_ADDR_EXP 43
4308: PUSH
4309: LD_EXP 43
4313: PPUSH
4314: LD_EXP 43
4318: PUSH
4319: LD_INT 1
4321: PLUS
4322: PPUSH
4323: LD_VAR 0 3
4327: PPUSH
4328: CALL_OW 1
4332: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4333: LD_VAR 0 3
4337: PPUSH
4338: LD_INT 51
4340: PPUSH
4341: LD_INT 77
4343: PPUSH
4344: CALL_OW 428
4348: PPUSH
4349: CALL_OW 52
// end ;
4353: GO 4278
4355: POP
4356: POP
// end ;
4357: LD_VAR 0 1
4361: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4362: LD_EXP 42
4366: PPUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 24
4372: PUSH
4373: LD_INT 600
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 3
4386: PUSH
4387: LD_INT 54
4389: PUSH
4390: EMPTY
4391: LIST
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PPUSH
4401: CALL_OW 72
4405: PUSH
4406: LD_INT 66
4408: PPUSH
4409: LD_INT 89
4411: PPUSH
4412: CALL_OW 428
4416: PPUSH
4417: CALL_OW 302
4421: AND
4422: IFFALSE 4507
4424: GO 4426
4426: DISABLE
4427: LD_INT 0
4429: PPUSH
// begin enable ;
4430: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4431: LD_ADDR_VAR 0 1
4435: PUSH
4436: LD_EXP 42
4440: PPUSH
4441: LD_INT 3
4443: PUSH
4444: LD_INT 24
4446: PUSH
4447: LD_INT 600
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 3
4460: PUSH
4461: LD_INT 54
4463: PUSH
4464: EMPTY
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PPUSH
4475: CALL_OW 72
4479: PUSH
4480: FOR_IN
4481: IFFALSE 4505
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4483: LD_VAR 0 1
4487: PPUSH
4488: LD_INT 66
4490: PPUSH
4491: LD_INT 89
4493: PPUSH
4494: CALL_OW 428
4498: PPUSH
4499: CALL_OW 120
4503: GO 4480
4505: POP
4506: POP
// end ;
4507: PPOPN 1
4509: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4510: LD_INT 22
4512: PUSH
4513: LD_INT 2
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PUSH
4520: LD_INT 92
4522: PUSH
4523: LD_INT 54
4525: PUSH
4526: LD_INT 77
4528: PUSH
4529: LD_INT 8
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PPUSH
4542: CALL_OW 69
4546: IFFALSE 4610
4548: GO 4550
4550: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4551: LD_EXP 43
4555: PPUSH
4556: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4560: LD_EXP 43
4564: PPUSH
4565: LD_INT 22
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 92
4577: PUSH
4578: LD_INT 54
4580: PUSH
4581: LD_INT 77
4583: PUSH
4584: LD_INT 8
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_INT 1
4604: ARRAY
4605: PPUSH
4606: CALL_OW 175
// end ;
4610: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4611: LD_INT 0
4613: PPUSH
4614: PPUSH
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4623: LD_ADDR_VAR 0 3
4627: PUSH
4628: LD_INT 1
4630: PPUSH
4631: LD_INT 3
4633: PPUSH
4634: CALL_OW 12
4638: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4639: LD_ADDR_VAR 0 5
4643: PUSH
4644: LD_INT 16
4646: PUSH
4647: LD_INT 17
4649: PUSH
4650: LD_INT 19
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: LIST
4657: PUSH
4658: LD_VAR 0 3
4662: ARRAY
4663: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4664: LD_ADDR_VAR 0 7
4668: PUSH
4669: LD_INT 159
4671: PUSH
4672: LD_INT 25
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 137
4681: PUSH
4682: LD_INT 37
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 123
4691: PUSH
4692: LD_INT 55
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: LD_INT 115
4701: PUSH
4702: LD_INT 71
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: LD_INT 106
4711: PUSH
4712: LD_INT 88
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: PUSH
4719: LD_INT 97
4721: PUSH
4722: LD_INT 114
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 75
4731: PUSH
4732: LD_INT 146
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 206
4750: PUSH
4751: LD_INT 135
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: LD_INT 184
4760: PUSH
4761: LD_INT 111
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PUSH
4768: LD_INT 154
4770: PUSH
4771: LD_INT 97
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 122
4780: PUSH
4781: LD_INT 80
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PUSH
4788: LD_INT 109
4790: PUSH
4791: LD_INT 78
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: LD_INT 97
4800: PUSH
4801: LD_INT 113
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 75
4810: PUSH
4811: LD_INT 147
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 185
4829: PUSH
4830: LD_INT 72
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 171
4839: PUSH
4840: LD_INT 83
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 161
4849: PUSH
4850: LD_INT 99
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: LD_INT 125
4859: PUSH
4860: LD_INT 82
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: LD_INT 105
4869: PUSH
4870: LD_INT 90
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 96
4879: PUSH
4880: LD_INT 116
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 75
4889: PUSH
4890: LD_INT 147
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: PUSH
4911: LD_VAR 0 3
4915: ARRAY
4916: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4917: LD_ADDR_VAR 0 4
4921: PUSH
4922: LD_INT 4
4924: PUSH
4925: LD_INT 5
4927: PUSH
4928: LD_INT 3
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: PUSH
4936: LD_VAR 0 3
4940: ARRAY
4941: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4942: LD_ADDR_VAR 0 6
4946: PUSH
4947: LD_INT 22
4949: PUSH
4950: LD_INT 20
4952: PUSH
4953: LD_INT 21
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: PUSH
4961: LD_VAR 0 3
4965: ARRAY
4966: ST_TO_ADDR
// for i := 1 to 2 do
4967: LD_ADDR_VAR 0 2
4971: PUSH
4972: DOUBLE
4973: LD_INT 1
4975: DEC
4976: ST_TO_ADDR
4977: LD_INT 2
4979: PUSH
4980: FOR_TO
4981: IFFALSE 4999
// EraseResourceArea ( i , outerSpawnArea ) ;
4983: LD_VAR 0 2
4987: PPUSH
4988: LD_VAR 0 6
4992: PPUSH
4993: CALL_OW 286
4997: GO 4980
4999: POP
5000: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5001: LD_VAR 0 6
5005: PPUSH
5006: LD_INT 2
5008: PUSH
5009: LD_INT 21
5011: PUSH
5012: LD_INT 1
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 21
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 21
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: PPUSH
5045: CALL_OW 70
5049: IFFALSE 5264
// repeat wait ( 0 0$1 ) ;
5051: LD_INT 35
5053: PPUSH
5054: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5058: LD_VAR 0 6
5062: PPUSH
5063: LD_INT 2
5065: PUSH
5066: LD_INT 21
5068: PUSH
5069: LD_INT 2
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: PPUSH
5091: CALL_OW 70
5095: IFFALSE 5156
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5097: LD_ADDR_VAR 0 2
5101: PUSH
5102: LD_VAR 0 6
5106: PPUSH
5107: LD_INT 2
5109: PUSH
5110: LD_INT 21
5112: PUSH
5113: LD_INT 2
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_INT 21
5122: PUSH
5123: LD_INT 3
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: PUSH
5140: FOR_IN
5141: IFFALSE 5154
// RemoveUnit ( i ) ;
5143: LD_VAR 0 2
5147: PPUSH
5148: CALL_OW 64
5152: GO 5140
5154: POP
5155: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5156: LD_VAR 0 6
5160: PPUSH
5161: LD_INT 21
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PPUSH
5171: CALL_OW 70
5175: IFFALSE 5224
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5177: LD_ADDR_VAR 0 2
5181: PUSH
5182: LD_VAR 0 6
5186: PPUSH
5187: LD_INT 21
5189: PUSH
5190: LD_INT 1
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 70
5201: PUSH
5202: FOR_IN
5203: IFFALSE 5222
// ComMoveXY ( i , 113 , 53 ) ;
5205: LD_VAR 0 2
5209: PPUSH
5210: LD_INT 113
5212: PPUSH
5213: LD_INT 53
5215: PPUSH
5216: CALL_OW 111
5220: GO 5202
5222: POP
5223: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5224: LD_VAR 0 6
5228: PPUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 21
5234: PUSH
5235: LD_INT 1
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: LD_INT 21
5244: PUSH
5245: LD_INT 2
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: PPUSH
5257: CALL_OW 70
5261: NOT
5262: IFFALSE 5051
// case convoyCounter of 1 .. 3 :
5264: LD_EXP 16
5268: PUSH
5269: LD_INT 1
5271: DOUBLE
5272: GREATEREQUAL
5273: IFFALSE 5281
5275: LD_INT 3
5277: DOUBLE
5278: LESSEQUAL
5279: IFTRUE 5283
5281: GO 5878
5283: POP
// begin uc_side := 3 ;
5284: LD_ADDR_OWVAR 20
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// uc_nation := 3 ;
5292: LD_ADDR_OWVAR 21
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5300: LD_ADDR_VAR 0 2
5304: PUSH
5305: DOUBLE
5306: LD_INT 1
5308: DEC
5309: ST_TO_ADDR
5310: LD_INT 5
5312: PUSH
5313: LD_INT 6
5315: PUSH
5316: LD_INT 7
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: PUSH
5324: LD_OWVAR 67
5328: ARRAY
5329: PUSH
5330: LD_EXP 16
5334: MINUS
5335: PUSH
5336: FOR_TO
5337: IFFALSE 5524
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5339: LD_INT 0
5341: PPUSH
5342: LD_INT 1
5344: PUSH
5345: LD_INT 1
5347: PUSH
5348: LD_INT 1
5350: PUSH
5351: LD_INT 4
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 4
5365: PPUSH
5366: CALL_OW 12
5370: ARRAY
5371: PPUSH
5372: LD_INT 4
5374: PUSH
5375: LD_INT 5
5377: PUSH
5378: LD_INT 6
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: LD_OWVAR 67
5390: ARRAY
5391: PPUSH
5392: CALL_OW 380
// un := CreateHuman ;
5396: LD_ADDR_VAR 0 8
5400: PUSH
5401: CALL_OW 44
5405: ST_TO_ADDR
// SetDir ( un , dir ) ;
5406: LD_VAR 0 8
5410: PPUSH
5411: LD_VAR 0 4
5415: PPUSH
5416: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5420: LD_VAR 0 8
5424: PPUSH
5425: LD_VAR 0 5
5429: PPUSH
5430: LD_INT 0
5432: PPUSH
5433: CALL 67237 0 3
5437: IFFALSE 5522
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5439: LD_ADDR_EXP 41
5443: PUSH
5444: LD_EXP 41
5448: PPUSH
5449: LD_EXP 41
5453: PUSH
5454: LD_INT 1
5456: PLUS
5457: PPUSH
5458: LD_VAR 0 8
5462: PPUSH
5463: CALL_OW 1
5467: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5468: LD_VAR 0 8
5472: PPUSH
5473: LD_INT 1
5475: PPUSH
5476: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5480: LD_VAR 0 8
5484: PPUSH
5485: LD_VAR 0 7
5489: PUSH
5490: LD_INT 1
5492: ARRAY
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PPUSH
5498: LD_VAR 0 7
5502: PUSH
5503: LD_INT 1
5505: ARRAY
5506: PUSH
5507: LD_INT 2
5509: ARRAY
5510: PPUSH
5511: CALL_OW 111
// wait ( 0 0$2 ) ;
5515: LD_INT 70
5517: PPUSH
5518: CALL_OW 67
// end ; end ;
5522: GO 5336
5524: POP
5525: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5526: LD_ADDR_VAR 0 2
5530: PUSH
5531: DOUBLE
5532: LD_INT 1
5534: DEC
5535: ST_TO_ADDR
5536: LD_INT 3
5538: PUSH
5539: LD_INT 4
5541: PUSH
5542: LD_INT 4
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: PUSH
5550: LD_OWVAR 67
5554: ARRAY
5555: PUSH
5556: FOR_TO
5557: IFFALSE 5874
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5559: LD_INT 3
5561: PPUSH
5562: LD_INT 3
5564: PPUSH
5565: LD_INT 21
5567: PUSH
5568: LD_INT 22
5570: PUSH
5571: LD_INT 23
5573: PUSH
5574: LD_INT 24
5576: PUSH
5577: LD_INT 24
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: PUSH
5587: LD_OWVAR 67
5591: PPUSH
5592: LD_OWVAR 67
5596: PUSH
5597: LD_INT 2
5599: PLUS
5600: PPUSH
5601: CALL_OW 12
5605: ARRAY
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: LD_INT 1
5612: PPUSH
5613: LD_INT 42
5615: PUSH
5616: LD_INT 44
5618: PUSH
5619: LD_INT 43
5621: PUSH
5622: LD_INT 44
5624: PUSH
5625: LD_INT 46
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 1
5637: PPUSH
5638: LD_OWVAR 67
5642: PUSH
5643: LD_INT 2
5645: PLUS
5646: PPUSH
5647: CALL_OW 12
5651: ARRAY
5652: PPUSH
5653: LD_INT 90
5655: PPUSH
5656: CALL 435 0 7
// un := CreateVehicle ;
5660: LD_ADDR_VAR 0 8
5664: PUSH
5665: CALL_OW 45
5669: ST_TO_ADDR
// SetDir ( un , dir ) ;
5670: LD_VAR 0 8
5674: PPUSH
5675: LD_VAR 0 4
5679: PPUSH
5680: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5684: LD_VAR 0 8
5688: PPUSH
5689: LD_VAR 0 5
5693: PPUSH
5694: LD_INT 0
5696: PPUSH
5697: CALL 67237 0 3
5701: IFFALSE 5872
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5703: LD_ADDR_EXP 41
5707: PUSH
5708: LD_EXP 41
5712: PPUSH
5713: LD_EXP 41
5717: PUSH
5718: LD_INT 1
5720: PLUS
5721: PPUSH
5722: LD_VAR 0 8
5726: PPUSH
5727: CALL_OW 1
5731: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5732: LD_INT 0
5734: PPUSH
5735: LD_INT 3
5737: PUSH
5738: LD_INT 4
5740: PUSH
5741: LD_INT 5
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: LD_OWVAR 67
5753: ARRAY
5754: PPUSH
5755: CALL_OW 383
// un := CreateHuman ;
5759: LD_ADDR_VAR 0 8
5763: PUSH
5764: CALL_OW 44
5768: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5769: LD_VAR 0 8
5773: PPUSH
5774: LD_EXP 41
5778: PUSH
5779: LD_EXP 41
5783: ARRAY
5784: PPUSH
5785: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5789: LD_ADDR_EXP 41
5793: PUSH
5794: LD_EXP 41
5798: PPUSH
5799: LD_EXP 41
5803: PUSH
5804: LD_INT 1
5806: PLUS
5807: PPUSH
5808: LD_VAR 0 8
5812: PPUSH
5813: CALL_OW 1
5817: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5818: LD_VAR 0 8
5822: PPUSH
5823: LD_INT 1
5825: PPUSH
5826: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5830: LD_VAR 0 8
5834: PPUSH
5835: LD_VAR 0 7
5839: PUSH
5840: LD_INT 1
5842: ARRAY
5843: PUSH
5844: LD_INT 1
5846: ARRAY
5847: PPUSH
5848: LD_VAR 0 7
5852: PUSH
5853: LD_INT 1
5855: ARRAY
5856: PUSH
5857: LD_INT 2
5859: ARRAY
5860: PPUSH
5861: CALL_OW 111
// wait ( 0 0$3 ) ;
5865: LD_INT 105
5867: PPUSH
5868: CALL_OW 67
// end ; end ;
5872: GO 5556
5874: POP
5875: POP
// end ; 4 .. 7 :
5876: GO 6431
5878: LD_INT 4
5880: DOUBLE
5881: GREATEREQUAL
5882: IFFALSE 5890
5884: LD_INT 7
5886: DOUBLE
5887: LESSEQUAL
5888: IFTRUE 5892
5890: GO 6430
5892: POP
// begin uc_side := 3 ;
5893: LD_ADDR_OWVAR 20
5897: PUSH
5898: LD_INT 3
5900: ST_TO_ADDR
// uc_nation := 3 ;
5901: LD_ADDR_OWVAR 21
5905: PUSH
5906: LD_INT 3
5908: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: DOUBLE
5915: LD_INT 1
5917: DEC
5918: ST_TO_ADDR
5919: LD_INT 2
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: LD_INT 4
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: LD_OWVAR 67
5937: ARRAY
5938: PUSH
5939: FOR_TO
5940: IFFALSE 6100
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5942: LD_INT 0
5944: PPUSH
5945: LD_INT 1
5947: PPUSH
5948: LD_INT 4
5950: PUSH
5951: LD_INT 5
5953: PUSH
5954: LD_INT 6
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 67237 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5939
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: LIST
6125: PUSH
6126: LD_OWVAR 67
6130: ARRAY
6131: PUSH
6132: FOR_TO
6133: IFFALSE 6426
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6135: LD_INT 3
6137: PPUSH
6138: LD_INT 3
6140: PPUSH
6141: LD_INT 21
6143: PUSH
6144: LD_INT 22
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 1
6153: PPUSH
6154: LD_INT 2
6156: PPUSH
6157: CALL_OW 12
6161: ARRAY
6162: PPUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 1
6168: PPUSH
6169: LD_INT 42
6171: PUSH
6172: LD_INT 44
6174: PUSH
6175: LD_INT 43
6177: PUSH
6178: LD_INT 44
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: PUSH
6187: LD_INT 1
6189: PPUSH
6190: LD_OWVAR 67
6194: PUSH
6195: LD_INT 1
6197: PLUS
6198: PPUSH
6199: CALL_OW 12
6203: ARRAY
6204: PPUSH
6205: LD_INT 90
6207: PPUSH
6208: CALL 435 0 7
// un := CreateVehicle ;
6212: LD_ADDR_VAR 0 8
6216: PUSH
6217: CALL_OW 45
6221: ST_TO_ADDR
// SetDir ( un , dir ) ;
6222: LD_VAR 0 8
6226: PPUSH
6227: LD_VAR 0 4
6231: PPUSH
6232: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6236: LD_VAR 0 8
6240: PPUSH
6241: LD_VAR 0 5
6245: PPUSH
6246: LD_INT 0
6248: PPUSH
6249: CALL 67237 0 3
6253: IFFALSE 6424
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6255: LD_ADDR_EXP 41
6259: PUSH
6260: LD_EXP 41
6264: PPUSH
6265: LD_EXP 41
6269: PUSH
6270: LD_INT 1
6272: PLUS
6273: PPUSH
6274: LD_VAR 0 8
6278: PPUSH
6279: CALL_OW 1
6283: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6284: LD_INT 0
6286: PPUSH
6287: LD_INT 3
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 5
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_OWVAR 67
6305: ARRAY
6306: PPUSH
6307: CALL_OW 383
// un := CreateHuman ;
6311: LD_ADDR_VAR 0 8
6315: PUSH
6316: CALL_OW 44
6320: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6321: LD_VAR 0 8
6325: PPUSH
6326: LD_EXP 41
6330: PUSH
6331: LD_EXP 41
6335: ARRAY
6336: PPUSH
6337: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6341: LD_ADDR_EXP 41
6345: PUSH
6346: LD_EXP 41
6350: PPUSH
6351: LD_EXP 41
6355: PUSH
6356: LD_INT 1
6358: PLUS
6359: PPUSH
6360: LD_VAR 0 8
6364: PPUSH
6365: CALL_OW 1
6369: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6370: LD_VAR 0 8
6374: PPUSH
6375: LD_INT 1
6377: PPUSH
6378: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6382: LD_VAR 0 8
6386: PPUSH
6387: LD_VAR 0 7
6391: PUSH
6392: LD_INT 1
6394: ARRAY
6395: PUSH
6396: LD_INT 1
6398: ARRAY
6399: PPUSH
6400: LD_VAR 0 7
6404: PUSH
6405: LD_INT 1
6407: ARRAY
6408: PUSH
6409: LD_INT 2
6411: ARRAY
6412: PPUSH
6413: CALL_OW 111
// wait ( 0 0$2 ) ;
6417: LD_INT 70
6419: PPUSH
6420: CALL_OW 67
// end ; end ;
6424: GO 6132
6426: POP
6427: POP
// end ; end ;
6428: GO 6431
6430: POP
// repeat wait ( 0 0$1 ) ;
6431: LD_INT 35
6433: PPUSH
6434: CALL_OW 67
// for un in ruConvoySquad do
6438: LD_ADDR_VAR 0 8
6442: PUSH
6443: LD_EXP 41
6447: PUSH
6448: FOR_IN
6449: IFFALSE 7073
// begin if IsInArea ( un , westSouthOutArea ) then
6451: LD_VAR 0 8
6455: PPUSH
6456: LD_INT 18
6458: PPUSH
6459: CALL_OW 308
6463: IFFALSE 6551
// begin if GetType ( un ) = unit_vehicle then
6465: LD_VAR 0 8
6469: PPUSH
6470: CALL_OW 247
6474: PUSH
6475: LD_INT 2
6477: EQUAL
6478: IFFALSE 6510
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6480: LD_ADDR_EXP 41
6484: PUSH
6485: LD_EXP 41
6489: PUSH
6490: LD_VAR 0 8
6494: PPUSH
6495: CALL_OW 311
6499: DIFF
6500: ST_TO_ADDR
// RemoveUnit ( un ) ;
6501: LD_VAR 0 8
6505: PPUSH
6506: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6510: LD_ADDR_EXP 15
6514: PUSH
6515: LD_EXP 15
6519: PUSH
6520: LD_INT 1
6522: PLUS
6523: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: DIFF
6539: ST_TO_ADDR
// RemoveUnit ( un ) ;
6540: LD_VAR 0 8
6544: PPUSH
6545: CALL_OW 64
// break ;
6549: GO 7073
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6551: LD_VAR 0 8
6555: PPUSH
6556: CALL_OW 305
6560: NOT
6561: PUSH
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 310
6571: NOT
6572: AND
6573: IFFALSE 6591
// ruConvoySquad := ruConvoySquad diff un ;
6575: LD_ADDR_EXP 41
6579: PUSH
6580: LD_EXP 41
6584: PUSH
6585: LD_VAR 0 8
6589: DIFF
6590: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6591: LD_VAR 0 8
6595: PPUSH
6596: CALL_OW 302
6600: PUSH
6601: LD_VAR 0 8
6605: PPUSH
6606: CALL_OW 314
6610: NOT
6611: AND
6612: IFFALSE 7071
// begin tag := GetTag ( un ) ;
6614: LD_ADDR_VAR 0 9
6618: PUSH
6619: LD_VAR 0 8
6623: PPUSH
6624: CALL_OW 110
6628: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6629: LD_VAR 0 8
6633: PPUSH
6634: LD_VAR 0 7
6638: PUSH
6639: LD_VAR 0 9
6643: PUSH
6644: LD_INT 1
6646: PLUS
6647: ARRAY
6648: PUSH
6649: LD_INT 1
6651: ARRAY
6652: PPUSH
6653: LD_VAR 0 7
6657: PUSH
6658: LD_VAR 0 9
6662: PUSH
6663: LD_INT 1
6665: PLUS
6666: ARRAY
6667: PUSH
6668: LD_INT 2
6670: ARRAY
6671: PPUSH
6672: CALL_OW 297
6676: PUSH
6677: LD_INT 6
6679: LESS
6680: IFFALSE 6863
// begin SetTag ( un , tag + 1 ) ;
6682: LD_VAR 0 8
6686: PPUSH
6687: LD_VAR 0 9
6691: PUSH
6692: LD_INT 1
6694: PLUS
6695: PPUSH
6696: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6700: LD_VAR 0 8
6704: PPUSH
6705: CALL_OW 247
6709: PUSH
6710: LD_INT 2
6712: EQUAL
6713: PUSH
6714: LD_VAR 0 8
6718: PPUSH
6719: CALL_OW 257
6723: PUSH
6724: LD_INT 3
6726: EQUAL
6727: OR
6728: IFFALSE 6861
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6730: LD_ADDR_VAR 0 10
6734: PUSH
6735: LD_INT 22
6737: PUSH
6738: LD_INT 2
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 91
6747: PUSH
6748: LD_VAR 0 8
6752: PUSH
6753: LD_INT 8
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PPUSH
6765: CALL_OW 69
6769: ST_TO_ADDR
// if enemy then
6770: LD_VAR 0 10
6774: IFFALSE 6802
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6776: LD_VAR 0 8
6780: PPUSH
6781: LD_VAR 0 10
6785: PPUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 74
6795: PPUSH
6796: CALL_OW 115
6800: GO 6861
// begin AddComWait ( un , 0 0$4 ) ;
6802: LD_VAR 0 8
6806: PPUSH
6807: LD_INT 140
6809: PPUSH
6810: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6814: LD_VAR 0 8
6818: PPUSH
6819: LD_VAR 0 7
6823: PUSH
6824: LD_VAR 0 9
6828: PUSH
6829: LD_INT 1
6831: PLUS
6832: ARRAY
6833: PUSH
6834: LD_INT 1
6836: ARRAY
6837: PPUSH
6838: LD_VAR 0 7
6842: PUSH
6843: LD_VAR 0 9
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: ARRAY
6852: PUSH
6853: LD_INT 2
6855: ARRAY
6856: PPUSH
6857: CALL_OW 174
// end ; end ; end else
6861: GO 7071
// begin if GetClass ( un ) = 4 then
6863: LD_VAR 0 8
6867: PPUSH
6868: CALL_OW 257
6872: PUSH
6873: LD_INT 4
6875: EQUAL
6876: IFFALSE 7024
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6878: LD_EXP 41
6882: PPUSH
6883: LD_INT 21
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: LD_INT 24
6898: PUSH
6899: LD_INT 1000
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PPUSH
6914: CALL_OW 72
6918: IFFALSE 6976
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6920: LD_VAR 0 8
6924: PPUSH
6925: LD_EXP 41
6929: PPUSH
6930: LD_INT 21
6932: PUSH
6933: LD_INT 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 3
6942: PUSH
6943: LD_INT 24
6945: PUSH
6946: LD_INT 1000
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 72
6965: PUSH
6966: LD_INT 1
6968: ARRAY
6969: PPUSH
6970: CALL_OW 128
6974: GO 7022
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
6976: LD_VAR 0 8
6980: PPUSH
6981: LD_EXP 41
6985: PPUSH
6986: LD_INT 3
6988: PUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 4
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PPUSH
7003: CALL_OW 72
7007: PPUSH
7008: LD_VAR 0 8
7012: PPUSH
7013: CALL_OW 74
7017: PPUSH
7018: CALL_OW 112
7022: GO 7071
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7024: LD_VAR 0 8
7028: PPUSH
7029: LD_VAR 0 7
7033: PUSH
7034: LD_VAR 0 9
7038: PUSH
7039: LD_INT 1
7041: PLUS
7042: ARRAY
7043: PUSH
7044: LD_INT 1
7046: ARRAY
7047: PPUSH
7048: LD_VAR 0 7
7052: PUSH
7053: LD_VAR 0 9
7057: PUSH
7058: LD_INT 1
7060: PLUS
7061: ARRAY
7062: PUSH
7063: LD_INT 2
7065: ARRAY
7066: PPUSH
7067: CALL_OW 114
// end ; end ; end ;
7071: GO 6448
7073: POP
7074: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7075: LD_EXP 41
7079: PPUSH
7080: LD_INT 52
7082: PUSH
7083: EMPTY
7084: LIST
7085: PUSH
7086: LD_INT 21
7088: PUSH
7089: LD_INT 1
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: NOT
7105: IFFALSE 6431
// end ;
7107: LD_VAR 0 1
7111: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7112: LD_EXP 16
7116: PUSH
7117: LD_INT 3
7119: PPUSH
7120: LD_INT 5
7122: PPUSH
7123: CALL_OW 12
7127: LESS
7128: PUSH
7129: LD_EXP 41
7133: NOT
7134: AND
7135: PUSH
7136: LD_OWVAR 67
7140: PUSH
7141: LD_INT 1
7143: GREATER
7144: AND
7145: IFFALSE 7533
7147: GO 7149
7149: DISABLE
7150: LD_INT 0
7152: PPUSH
7153: PPUSH
7154: PPUSH
// begin uc_side := 3 ;
7155: LD_ADDR_OWVAR 20
7159: PUSH
7160: LD_INT 3
7162: ST_TO_ADDR
// uc_nation := 3 ;
7163: LD_ADDR_OWVAR 21
7167: PUSH
7168: LD_INT 3
7170: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
7171: LD_ADDR_VAR 0 1
7175: PUSH
7176: DOUBLE
7177: LD_INT 1
7179: DEC
7180: ST_TO_ADDR
7181: LD_INT 2
7183: PUSH
7184: LD_INT 3
7186: PUSH
7187: LD_INT 4
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: PUSH
7195: LD_OWVAR 67
7199: ARRAY
7200: PUSH
7201: FOR_TO
7202: IFFALSE 7454
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7204: LD_INT 3
7206: PPUSH
7207: LD_INT 3
7209: PPUSH
7210: LD_INT 21
7212: PUSH
7213: LD_INT 22
7215: PUSH
7216: LD_INT 23
7218: PUSH
7219: LD_INT 24
7221: PUSH
7222: LD_INT 24
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: PUSH
7232: LD_OWVAR 67
7236: PPUSH
7237: LD_OWVAR 67
7241: PUSH
7242: LD_INT 2
7244: PLUS
7245: PPUSH
7246: CALL_OW 12
7250: ARRAY
7251: PPUSH
7252: LD_INT 1
7254: PPUSH
7255: LD_INT 1
7257: PPUSH
7258: LD_INT 42
7260: PUSH
7261: LD_INT 44
7263: PUSH
7264: LD_INT 43
7266: PUSH
7267: LD_INT 44
7269: PUSH
7270: LD_INT 46
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 1
7282: PPUSH
7283: LD_OWVAR 67
7287: PUSH
7288: LD_INT 2
7290: PLUS
7291: PPUSH
7292: CALL_OW 12
7296: ARRAY
7297: PPUSH
7298: LD_INT 90
7300: PPUSH
7301: CALL 435 0 7
// un := CreateVehicle ;
7305: LD_ADDR_VAR 0 3
7309: PUSH
7310: CALL_OW 45
7314: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7315: LD_VAR 0 3
7319: PPUSH
7320: LD_INT 0
7322: PPUSH
7323: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7327: LD_VAR 0 3
7331: PPUSH
7332: LD_INT 23
7334: PPUSH
7335: LD_INT 0
7337: PPUSH
7338: CALL 67237 0 3
7342: IFFALSE 7452
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7344: LD_ADDR_VAR 0 2
7348: PUSH
7349: LD_VAR 0 2
7353: PPUSH
7354: LD_VAR 0 2
7358: PUSH
7359: LD_INT 1
7361: PLUS
7362: PPUSH
7363: LD_VAR 0 3
7367: PPUSH
7368: CALL_OW 1
7372: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7373: LD_INT 0
7375: PPUSH
7376: LD_INT 3
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: LD_INT 5
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: PUSH
7390: LD_OWVAR 67
7394: ARRAY
7395: PPUSH
7396: CALL_OW 383
// un := CreateHuman ;
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: CALL_OW 44
7409: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7410: LD_VAR 0 3
7414: PPUSH
7415: LD_VAR 0 2
7419: PUSH
7420: LD_VAR 0 2
7424: ARRAY
7425: PPUSH
7426: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7430: LD_VAR 0 3
7434: PPUSH
7435: LD_INT 80
7437: PPUSH
7438: LD_INT 139
7440: PPUSH
7441: CALL_OW 111
// wait ( 0 0$3 ) ;
7445: LD_INT 105
7447: PPUSH
7448: CALL_OW 67
// end ; end ;
7452: GO 7201
7454: POP
7455: POP
// for i in tmp do
7456: LD_ADDR_VAR 0 1
7460: PUSH
7461: LD_VAR 0 2
7465: PUSH
7466: FOR_IN
7467: IFFALSE 7531
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7469: LD_VAR 0 1
7473: PPUSH
7474: LD_INT 101
7476: PPUSH
7477: LD_INT 102
7479: PPUSH
7480: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7484: LD_VAR 0 1
7488: PPUSH
7489: LD_INT 110
7491: PPUSH
7492: LD_INT 78
7494: PPUSH
7495: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7499: LD_VAR 0 1
7503: PPUSH
7504: LD_INT 75
7506: PPUSH
7507: LD_INT 101
7509: PPUSH
7510: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7514: LD_VAR 0 1
7518: PPUSH
7519: LD_INT 57
7521: PPUSH
7522: LD_INT 83
7524: PPUSH
7525: CALL_OW 174
// end ;
7529: GO 7466
7531: POP
7532: POP
// end ;
7533: PPOPN 3
7535: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7536: LD_EXP 39
7540: PPUSH
7541: LD_INT 3
7543: PUSH
7544: LD_INT 24
7546: PUSH
7547: LD_INT 1000
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 72
7562: PUSH
7563: LD_EXP 40
7567: PPUSH
7568: LD_INT 3
7570: PUSH
7571: LD_INT 24
7573: PUSH
7574: LD_INT 1000
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 72
7589: OR
7590: IFFALSE 7689
7592: GO 7594
7594: DISABLE
7595: LD_INT 0
7597: PPUSH
// begin enable ;
7598: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7599: LD_ADDR_VAR 0 1
7603: PUSH
7604: LD_EXP 39
7608: PPUSH
7609: LD_INT 3
7611: PUSH
7612: LD_INT 24
7614: PUSH
7615: LD_INT 1000
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 72
7630: PUSH
7631: LD_EXP 40
7635: PPUSH
7636: LD_INT 3
7638: PUSH
7639: LD_INT 24
7641: PUSH
7642: LD_INT 1000
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 72
7657: UNION
7658: PUSH
7659: FOR_IN
7660: IFFALSE 7687
// if IsSleeping ( i ) then
7662: LD_VAR 0 1
7666: PPUSH
7667: CALL_OW 555
7671: IFFALSE 7685
// ForceSleep ( i , false ) ;
7673: LD_VAR 0 1
7677: PPUSH
7678: LD_INT 0
7680: PPUSH
7681: CALL_OW 585
7685: GO 7659
7687: POP
7688: POP
// end ; end_of_file
7689: PPOPN 1
7691: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7692: LD_VAR 0 1
7696: PUSH
7697: LD_EXP 21
7701: EQUAL
7702: IFFALSE 7711
// YouLost ( Heike ) ;
7704: LD_STRING Heike
7706: PPUSH
7707: CALL_OW 104
// if un in apeSoldGroup then
7711: LD_VAR 0 1
7715: PUSH
7716: LD_EXP 42
7720: IN
7721: IFFALSE 7739
// apeSoldGroup := apeSoldGroup diff un ;
7723: LD_ADDR_EXP 42
7727: PUSH
7728: LD_EXP 42
7732: PUSH
7733: LD_VAR 0 1
7737: DIFF
7738: ST_TO_ADDR
// if un in apeEngGroup then
7739: LD_VAR 0 1
7743: PUSH
7744: LD_EXP 43
7748: IN
7749: IFFALSE 7767
// apeEngGroup := apeEngGroup diff un ;
7751: LD_ADDR_EXP 43
7755: PUSH
7756: LD_EXP 43
7760: PUSH
7761: LD_VAR 0 1
7765: DIFF
7766: ST_TO_ADDR
// if un in oilBaseGuard then
7767: LD_VAR 0 1
7771: PUSH
7772: LD_EXP 38
7776: IN
7777: IFFALSE 7795
// oilBaseGuard := oilBaseGuard diff un ;
7779: LD_ADDR_EXP 38
7783: PUSH
7784: LD_EXP 38
7788: PUSH
7789: LD_VAR 0 1
7793: DIFF
7794: ST_TO_ADDR
// if un in ruNorthGroup then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 39
7804: IN
7805: IFFALSE 7823
// ruNorthGroup := ruNorthGroup diff un ;
7807: LD_ADDR_EXP 39
7811: PUSH
7812: LD_EXP 39
7816: PUSH
7817: LD_VAR 0 1
7821: DIFF
7822: ST_TO_ADDR
// if un in ruSouthGroup then
7823: LD_VAR 0 1
7827: PUSH
7828: LD_EXP 40
7832: IN
7833: IFFALSE 7851
// ruSouthGroup := ruSouthGroup diff un ;
7835: LD_ADDR_EXP 40
7839: PUSH
7840: LD_EXP 40
7844: PUSH
7845: LD_VAR 0 1
7849: DIFF
7850: ST_TO_ADDR
// if un in ruConvoySquad then
7851: LD_VAR 0 1
7855: PUSH
7856: LD_EXP 41
7860: IN
7861: IFFALSE 7879
// ruConvoySquad := ruConvoySquad diff un ;
7863: LD_ADDR_EXP 41
7867: PUSH
7868: LD_EXP 41
7872: PUSH
7873: LD_VAR 0 1
7877: DIFF
7878: ST_TO_ADDR
// end ;
7879: PPOPN 1
7881: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 264
7891: PUSH
7892: LD_INT 30
7894: EQUAL
7895: IFFALSE 7905
// radarConstructed := true ;
7897: LD_ADDR_EXP 13
7901: PUSH
7902: LD_INT 1
7904: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7905: LD_VAR 0 1
7909: PPUSH
7910: CALL_OW 264
7914: PUSH
7915: LD_INT 26
7917: EQUAL
7918: IFFALSE 7928
// flamethrowerBuilt := true ;
7920: LD_ADDR_EXP 20
7924: PUSH
7925: LD_INT 1
7927: ST_TO_ADDR
// end ;
7928: PPOPN 2
7930: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7931: LD_ADDR_EXP 18
7935: PUSH
7936: LD_EXP 18
7940: PUSH
7941: LD_INT 1
7943: PLUS
7944: ST_TO_ADDR
// if oldId in ruConvoySquad then
7945: LD_VAR 0 2
7949: PUSH
7950: LD_EXP 41
7954: IN
7955: IFFALSE 7973
// ruConvoySquad := ruConvoySquad diff oldId ;
7957: LD_ADDR_EXP 41
7961: PUSH
7962: LD_EXP 41
7966: PUSH
7967: LD_VAR 0 2
7971: DIFF
7972: ST_TO_ADDR
// if newId in ruConvoySquad then
7973: LD_VAR 0 1
7977: PUSH
7978: LD_EXP 41
7982: IN
7983: IFFALSE 8001
// ruConvoySquad := ruConvoySquad diff newId ;
7985: LD_ADDR_EXP 41
7989: PUSH
7990: LD_EXP 41
7994: PUSH
7995: LD_VAR 0 1
7999: DIFF
8000: ST_TO_ADDR
// end ; end_of_file
8001: PPOPN 4
8003: END
// export function Action ; var i , p , un , veh , tmp ; begin
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
8009: PPUSH
8010: PPUSH
8011: PPUSH
// InGameOn ;
8012: CALL_OW 8
// music_nat := 2 ;
8016: LD_ADDR_OWVAR 71
8020: PUSH
8021: LD_INT 2
8023: ST_TO_ADDR
// music_class := music_recon ;
8024: LD_ADDR_OWVAR 72
8028: PUSH
8029: LD_INT 3
8031: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8032: LD_INT 7
8034: PPUSH
8035: LD_INT 6
8037: PPUSH
8038: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8042: LD_INT 7
8044: PPUSH
8045: LD_INT 6
8047: PPUSH
8048: LD_INT 2
8050: PPUSH
8051: LD_INT 30
8053: NEG
8054: PPUSH
8055: CALL 1219 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8059: LD_ADDR_VAR 0 6
8063: PUSH
8064: LD_EXP 21
8068: PUSH
8069: LD_EXP 22
8073: PUSH
8074: LD_EXP 23
8078: PUSH
8079: LD_EXP 24
8083: PUSH
8084: LD_EXP 25
8088: PUSH
8089: LD_EXP 26
8093: PUSH
8094: LD_EXP 28
8098: PUSH
8099: LD_EXP 33
8103: PUSH
8104: LD_EXP 27
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: ST_TO_ADDR
// tmp := tmp diff 0 ;
8120: LD_ADDR_VAR 0 6
8124: PUSH
8125: LD_VAR 0 6
8129: PUSH
8130: LD_INT 0
8132: DIFF
8133: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8134: LD_ADDR_VAR 0 6
8138: PUSH
8139: LD_VAR 0 6
8143: PPUSH
8144: LD_INT 3
8146: PPUSH
8147: CALL 66829 0 2
8151: ST_TO_ADDR
// for i in heikeVehicles do
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_EXP 35
8161: PUSH
8162: FOR_IN
8163: IFFALSE 8362
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8165: LD_INT 5
8167: PPUSH
8168: LD_VAR 0 2
8172: PUSH
8173: LD_INT 5
8175: ARRAY
8176: PPUSH
8177: LD_VAR 0 2
8181: PUSH
8182: LD_INT 1
8184: ARRAY
8185: PPUSH
8186: LD_VAR 0 2
8190: PUSH
8191: LD_INT 2
8193: ARRAY
8194: PPUSH
8195: LD_VAR 0 2
8199: PUSH
8200: LD_INT 3
8202: ARRAY
8203: PPUSH
8204: LD_VAR 0 2
8208: PUSH
8209: LD_INT 4
8211: ARRAY
8212: PPUSH
8213: LD_INT 34
8215: PPUSH
8216: CALL 435 0 7
// veh := CreateVehicle ;
8220: LD_ADDR_VAR 0 5
8224: PUSH
8225: CALL_OW 45
8229: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8230: LD_VAR 0 2
8234: PUSH
8235: LD_INT 4
8237: ARRAY
8238: PUSH
8239: LD_INT 51
8241: PUSH
8242: LD_INT 32
8244: PUSH
8245: LD_INT 12
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: IN
8253: IFFALSE 8333
// begin if i [ 7 ] [ 1 ] then
8255: LD_VAR 0 2
8259: PUSH
8260: LD_INT 7
8262: ARRAY
8263: PUSH
8264: LD_INT 1
8266: ARRAY
8267: IFFALSE 8294
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8269: LD_VAR 0 5
8273: PPUSH
8274: LD_INT 1
8276: PPUSH
8277: LD_VAR 0 2
8281: PUSH
8282: LD_INT 7
8284: ARRAY
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8294: LD_VAR 0 2
8298: PUSH
8299: LD_INT 7
8301: ARRAY
8302: PUSH
8303: LD_INT 2
8305: ARRAY
8306: IFFALSE 8333
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8308: LD_VAR 0 5
8312: PPUSH
8313: LD_INT 2
8315: PPUSH
8316: LD_VAR 0 2
8320: PUSH
8321: LD_INT 7
8323: ARRAY
8324: PUSH
8325: LD_INT 2
8327: ARRAY
8328: PPUSH
8329: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8333: LD_VAR 0 5
8337: PPUSH
8338: LD_INT 2
8340: PPUSH
8341: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8345: LD_VAR 0 5
8349: PPUSH
8350: LD_INT 4
8352: PPUSH
8353: LD_INT 0
8355: PPUSH
8356: CALL_OW 49
// end ;
8360: GO 8162
8362: POP
8363: POP
// if tmp then
8364: LD_VAR 0 6
8368: IFFALSE 8478
// begin p := 0 ;
8370: LD_ADDR_VAR 0 3
8374: PUSH
8375: LD_INT 0
8377: ST_TO_ADDR
// for i in tmp do
8378: LD_ADDR_VAR 0 2
8382: PUSH
8383: LD_VAR 0 6
8387: PUSH
8388: FOR_IN
8389: IFFALSE 8476
// begin p := p + 1 ;
8391: LD_ADDR_VAR 0 3
8395: PUSH
8396: LD_VAR 0 3
8400: PUSH
8401: LD_INT 1
8403: PLUS
8404: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8405: LD_VAR 0 2
8409: PPUSH
8410: LD_INT 5
8412: PPUSH
8413: LD_INT 0
8415: PPUSH
8416: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8420: LD_VAR 0 2
8424: PPUSH
8425: LD_INT 26
8427: PPUSH
8428: LD_INT 9
8430: PPUSH
8431: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8435: LD_VAR 0 3
8439: PUSH
8440: LD_EXP 35
8444: GREATEREQUAL
8445: PUSH
8446: LD_VAR 0 2
8450: PPUSH
8451: CALL_OW 257
8455: PUSH
8456: LD_INT 3
8458: EQUAL
8459: AND
8460: IFFALSE 8474
// SetClass ( i , 1 ) ;
8462: LD_VAR 0 2
8466: PPUSH
8467: LD_INT 1
8469: PPUSH
8470: CALL_OW 336
// end ;
8474: GO 8388
8476: POP
8477: POP
// end ; if heikeSecondSquad then
8478: LD_EXP 34
8482: IFFALSE 8596
// for i in heikeSecondSquad do
8484: LD_ADDR_VAR 0 2
8488: PUSH
8489: LD_EXP 34
8493: PUSH
8494: FOR_IN
8495: IFFALSE 8594
// begin p := p + 1 ;
8497: LD_ADDR_VAR 0 3
8501: PUSH
8502: LD_VAR 0 3
8506: PUSH
8507: LD_INT 1
8509: PLUS
8510: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8511: LD_VAR 0 2
8515: PPUSH
8516: LD_INT 6
8518: PPUSH
8519: LD_INT 0
8521: PPUSH
8522: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8526: LD_VAR 0 2
8530: PPUSH
8531: LD_INT 26
8533: PPUSH
8534: LD_INT 9
8536: PPUSH
8537: CALL_OW 118
// ForceSleep ( i , true ) ;
8541: LD_VAR 0 2
8545: PPUSH
8546: LD_INT 1
8548: PPUSH
8549: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8553: LD_VAR 0 3
8557: PUSH
8558: LD_EXP 35
8562: GREATEREQUAL
8563: PUSH
8564: LD_VAR 0 2
8568: PPUSH
8569: CALL_OW 257
8573: PUSH
8574: LD_INT 3
8576: EQUAL
8577: AND
8578: IFFALSE 8592
// SetClass ( i , 1 ) ;
8580: LD_VAR 0 2
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: CALL_OW 336
// end ;
8592: GO 8494
8594: POP
8595: POP
// if heikeApes then
8596: LD_EXP 36
8600: IFFALSE 8643
// for i in heikeApes do
8602: LD_ADDR_VAR 0 2
8606: PUSH
8607: LD_EXP 36
8611: PUSH
8612: FOR_IN
8613: IFFALSE 8641
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8615: LD_VAR 0 2
8619: PPUSH
8620: LD_INT 7
8622: PPUSH
8623: LD_INT 0
8625: PPUSH
8626: CALL_OW 49
// ComHold ( i ) ;
8630: LD_VAR 0 2
8634: PPUSH
8635: CALL_OW 140
// end ;
8639: GO 8612
8641: POP
8642: POP
// if Kurt then
8643: LD_EXP 32
8647: IFFALSE 8679
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8649: LD_EXP 32
8653: PPUSH
8654: LD_INT 8
8656: PPUSH
8657: LD_INT 0
8659: PPUSH
8660: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8664: LD_EXP 32
8668: PPUSH
8669: LD_INT 42
8671: PPUSH
8672: LD_INT 32
8674: PPUSH
8675: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8679: LD_INT 70
8681: PPUSH
8682: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8686: LD_EXP 21
8690: PPUSH
8691: LD_STRING DH-Start-1
8693: PPUSH
8694: CALL_OW 88
// if Givi then
8698: LD_EXP 22
8702: IFFALSE 8965
// begin Say ( Givi , DG-Start-2-5 ) ;
8704: LD_EXP 22
8708: PPUSH
8709: LD_STRING DG-Start-2-5
8711: PPUSH
8712: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8716: LD_EXP 21
8720: PPUSH
8721: LD_STRING DH-Start-3
8723: PPUSH
8724: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8728: LD_EXP 21
8732: PPUSH
8733: LD_STRING DH-Start-4
8735: PPUSH
8736: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8740: LD_EXP 22
8744: PPUSH
8745: LD_STRING DG-Start-5
8747: PPUSH
8748: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8752: LD_EXP 21
8756: PPUSH
8757: LD_STRING DH-Start-6
8759: PPUSH
8760: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8764: LD_EXP 22
8768: PPUSH
8769: LD_STRING DG-Start-7
8771: PPUSH
8772: CALL_OW 88
// if Mike then
8776: LD_EXP 23
8780: IFFALSE 8953
// begin Say ( Mike , DM-Start-8 ) ;
8782: LD_EXP 23
8786: PPUSH
8787: LD_STRING DM-Start-8
8789: PPUSH
8790: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8794: LD_EXP 23
8798: PPUSH
8799: LD_STRING DM-Start-9
8801: PPUSH
8802: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8806: LD_EXP 22
8810: PPUSH
8811: LD_STRING DG-Start-10
8813: PPUSH
8814: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8818: LD_EXP 22
8822: PPUSH
8823: LD_STRING DG-Start-11
8825: PPUSH
8826: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8830: LD_EXP 21
8834: PPUSH
8835: LD_STRING DH-Start-12
8837: PPUSH
8838: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8842: LD_EXP 22
8846: PPUSH
8847: LD_STRING DG-Start-13
8849: PPUSH
8850: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8854: LD_EXP 22
8858: PPUSH
8859: LD_STRING DG-Start-14
8861: PPUSH
8862: CALL_OW 88
// if Kaia then
8866: LD_EXP 26
8870: IFFALSE 8953
// begin Say ( Kaia , DK-Start-15 ) ;
8872: LD_EXP 26
8876: PPUSH
8877: LD_STRING DK-Start-15
8879: PPUSH
8880: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8884: LD_EXP 26
8888: PPUSH
8889: LD_STRING DK-Start-16
8891: PPUSH
8892: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8896: LD_EXP 26
8900: PPUSH
8901: LD_STRING DK-Start-17
8903: PPUSH
8904: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8908: LD_INT 10
8910: PPUSH
8911: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8915: LD_EXP 22
8919: PPUSH
8920: LD_EXP 26
8924: PPUSH
8925: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8929: LD_EXP 22
8933: PPUSH
8934: LD_STRING DG-Start-18
8936: PPUSH
8937: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8941: LD_EXP 26
8945: PPUSH
8946: LD_STRING DK-Start-19
8948: PPUSH
8949: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8953: LD_EXP 21
8957: PPUSH
8958: LD_STRING DH-Start-20
8960: PPUSH
8961: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8965: LD_INT 70
8967: PPUSH
8968: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8972: LD_EXP 29
8976: PPUSH
8977: LD_STRING DShar-Start-21
8979: PPUSH
8980: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8984: LD_EXP 21
8988: PPUSH
8989: LD_STRING DH-Start-22
8991: PPUSH
8992: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8996: LD_EXP 29
9000: PPUSH
9001: LD_STRING DShar-Start-23
9003: PPUSH
9004: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9008: LD_EXP 29
9012: PPUSH
9013: LD_STRING DShar-Start-24
9015: PPUSH
9016: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9020: LD_EXP 29
9024: PPUSH
9025: LD_STRING DShar-Start-25
9027: PPUSH
9028: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9032: LD_EXP 29
9036: PPUSH
9037: LD_STRING DShar-Start-26
9039: PPUSH
9040: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9044: LD_EXP 21
9048: PPUSH
9049: LD_STRING DH-Start-27
9051: PPUSH
9052: CALL_OW 88
// if Kaia then
9056: LD_EXP 26
9060: IFFALSE 9102
// begin ComTurnUnit ( Heike , Kaia ) ;
9062: LD_EXP 21
9066: PPUSH
9067: LD_EXP 26
9071: PPUSH
9072: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9076: LD_EXP 26
9080: PPUSH
9081: LD_STRING DK-Start-28
9083: PPUSH
9084: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9088: LD_EXP 21
9092: PPUSH
9093: LD_STRING DH-Start-29
9095: PPUSH
9096: CALL_OW 88
// end else
9100: GO 9114
// Say ( Heike , DH-Start-a-28 ) ;
9102: LD_EXP 21
9106: PPUSH
9107: LD_STRING DH-Start-a-28
9109: PPUSH
9110: CALL_OW 88
// if Givi then
9114: LD_EXP 22
9118: IFFALSE 9353
// begin ComTurnUnit ( Heike , Givi ) ;
9120: LD_EXP 21
9124: PPUSH
9125: LD_EXP 22
9129: PPUSH
9130: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9134: LD_EXP 22
9138: PPUSH
9139: LD_EXP 21
9143: PPUSH
9144: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9148: LD_EXP 21
9152: PPUSH
9153: LD_STRING DH-Start-30
9155: PPUSH
9156: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9160: LD_EXP 21
9164: PPUSH
9165: LD_STRING DH-Start-31
9167: PPUSH
9168: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9172: LD_EXP 22
9176: PPUSH
9177: LD_STRING DG-Start-32
9179: PPUSH
9180: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9184: LD_EXP 21
9188: PPUSH
9189: LD_STRING DH-Start-33
9191: PPUSH
9192: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9196: LD_EXP 22
9200: PPUSH
9201: LD_STRING DG-Start-34
9203: PPUSH
9204: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9208: LD_EXP 22
9212: PPUSH
9213: LD_STRING DG-Start-35
9215: PPUSH
9216: CALL_OW 88
// if Kurt and not dialogue_skipped then
9220: LD_EXP 32
9224: PUSH
9225: LD_OWVAR 59
9229: NOT
9230: AND
9231: IFFALSE 9262
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9233: LD_EXP 32
9237: PPUSH
9238: LD_INT 28
9240: PPUSH
9241: LD_INT 13
9243: PPUSH
9244: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9248: LD_EXP 32
9252: PPUSH
9253: LD_EXP 21
9257: PPUSH
9258: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9262: LD_EXP 22
9266: PPUSH
9267: LD_STRING DG-Start-36
9269: PPUSH
9270: CALL_OW 88
// if Kurt then
9274: LD_EXP 32
9278: IFFALSE 9351
// begin if not Givi then
9280: LD_EXP 22
9284: NOT
9285: IFFALSE 9301
// Say ( Kurt , DKs-Start-37-a ) else
9287: LD_EXP 32
9291: PPUSH
9292: LD_STRING DKs-Start-37-a
9294: PPUSH
9295: CALL_OW 88
9299: GO 9313
// Say ( Kurt , DKs-Start-37 ) ;
9301: LD_EXP 32
9305: PPUSH
9306: LD_STRING DKs-Start-37
9308: PPUSH
9309: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9313: LD_EXP 32
9317: PPUSH
9318: LD_STRING DKs-Start-38
9320: PPUSH
9321: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9325: LD_EXP 21
9329: PPUSH
9330: LD_EXP 32
9334: PPUSH
9335: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9339: LD_EXP 21
9343: PPUSH
9344: LD_STRING DH-Start-39
9346: PPUSH
9347: CALL_OW 88
// end ; end else
9351: GO 9382
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9353: LD_EXP 34
9357: PPUSH
9358: LD_STRING DArm-Start-a-37
9360: PPUSH
9361: LD_STRING DArf-Start-a-37
9363: PPUSH
9364: CALL 1270 0 3
9368: IFFALSE 9382
// Say ( Heike , DH-Start-39 ) ;
9370: LD_EXP 21
9374: PPUSH
9375: LD_STRING DH-Start-39
9377: PPUSH
9378: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9382: LD_INT 44
9384: PPUSH
9385: LD_INT 25
9387: PPUSH
9388: CALL_OW 428
9392: IFFALSE 9409
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9394: LD_INT 44
9396: PPUSH
9397: LD_INT 25
9399: PPUSH
9400: CALL_OW 428
9404: PPUSH
9405: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9409: LD_EXP 30
9413: PPUSH
9414: LD_INT 5
9416: PPUSH
9417: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9421: LD_EXP 30
9425: PPUSH
9426: LD_INT 44
9428: PPUSH
9429: LD_INT 25
9431: PPUSH
9432: LD_INT 0
9434: PPUSH
9435: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9439: LD_EXP 30
9443: PPUSH
9444: LD_INT 29
9446: PPUSH
9447: LD_INT 12
9449: PPUSH
9450: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9454: LD_INT 35
9456: PPUSH
9457: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9461: LD_OWVAR 59
9465: PUSH
9466: LD_EXP 21
9470: PPUSH
9471: LD_EXP 30
9475: PPUSH
9476: CALL_OW 296
9480: PUSH
9481: LD_INT 8
9483: LESS
9484: OR
9485: PUSH
9486: LD_EXP 30
9490: PPUSH
9491: LD_INT 26
9493: PPUSH
9494: LD_INT 9
9496: PPUSH
9497: CALL_OW 297
9501: PUSH
9502: LD_INT 6
9504: LESS
9505: OR
9506: IFFALSE 9454
// Say ( Olaf , DO-Scout-1 ) ;
9508: LD_EXP 30
9512: PPUSH
9513: LD_STRING DO-Scout-1
9515: PPUSH
9516: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9520: LD_EXP 30
9524: PPUSH
9525: LD_EXP 21
9529: PPUSH
9530: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9534: LD_ADDR_VAR 0 2
9538: PUSH
9539: LD_VAR 0 6
9543: PUSH
9544: LD_EXP 34
9548: UNION
9549: PUSH
9550: FOR_IN
9551: IFFALSE 9569
// ComTurnUnit ( i , Olaf ) ;
9553: LD_VAR 0 2
9557: PPUSH
9558: LD_EXP 30
9562: PPUSH
9563: CALL_OW 119
9567: GO 9550
9569: POP
9570: POP
// wait ( 0 0$0.3 ) ;
9571: LD_INT 10
9573: PPUSH
9574: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9578: LD_EXP 21
9582: PPUSH
9583: LD_EXP 30
9587: PPUSH
9588: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9592: LD_EXP 21
9596: PPUSH
9597: LD_EXP 30
9601: PPUSH
9602: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9606: LD_EXP 21
9610: PPUSH
9611: LD_STRING DH-Scout-2
9613: PPUSH
9614: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9618: LD_EXP 30
9622: PPUSH
9623: LD_STRING DO-Scout-3
9625: PPUSH
9626: CALL_OW 88
// if Mike and Givi then
9630: LD_EXP 23
9634: PUSH
9635: LD_EXP 22
9639: AND
9640: IFFALSE 9656
// Say ( Olaf , DO-Scout-4 ) else
9642: LD_EXP 30
9646: PPUSH
9647: LD_STRING DO-Scout-4
9649: PPUSH
9650: CALL_OW 88
9654: GO 9756
// begin if Mike then
9656: LD_EXP 23
9660: IFFALSE 9688
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9662: LD_EXP 30
9666: PPUSH
9667: LD_STRING DO-Scout-a-4
9669: PPUSH
9670: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9674: LD_EXP 21
9678: PPUSH
9679: LD_STRING DH-Scout-a-5
9681: PPUSH
9682: CALL_OW 88
// end else
9686: GO 9756
// if Givi then
9688: LD_EXP 22
9692: IFFALSE 9720
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9694: LD_EXP 30
9698: PPUSH
9699: LD_STRING DO-Scout-b-4
9701: PPUSH
9702: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9706: LD_EXP 21
9710: PPUSH
9711: LD_STRING DH-Scout-b-5
9713: PPUSH
9714: CALL_OW 88
// end else
9718: GO 9756
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9720: LD_EXP 30
9724: PPUSH
9725: LD_STRING DO-Scout-f-4
9727: PPUSH
9728: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9732: LD_EXP 21
9736: PPUSH
9737: LD_STRING DH-Scout-f-5
9739: PPUSH
9740: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9744: LD_EXP 30
9748: PPUSH
9749: LD_STRING DO-Scout-f-6
9751: PPUSH
9752: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9756: LD_EXP 21
9760: PPUSH
9761: LD_STRING DH-Scout-5
9763: PPUSH
9764: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9768: LD_EXP 30
9772: PPUSH
9773: LD_STRING DO-Scout-6
9775: PPUSH
9776: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9780: LD_EXP 30
9784: PPUSH
9785: LD_STRING DO-Scout-7
9787: PPUSH
9788: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9792: LD_EXP 21
9796: PPUSH
9797: LD_STRING DH-Scout-8
9799: PPUSH
9800: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9804: LD_EXP 21
9808: PPUSH
9809: LD_STRING DH-Scout-9
9811: PPUSH
9812: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9816: LD_EXP 30
9820: PPUSH
9821: LD_STRING DO-Scout-10
9823: PPUSH
9824: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9828: LD_EXP 30
9832: PPUSH
9833: LD_STRING DO-Scout-12
9835: PPUSH
9836: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9840: LD_EXP 30
9844: PPUSH
9845: LD_STRING DO-Scout-13
9847: PPUSH
9848: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9852: LD_EXP 30
9856: PPUSH
9857: LD_STRING DO-Scout-14
9859: PPUSH
9860: CALL_OW 88
// if Givi then
9864: LD_EXP 22
9868: IFFALSE 9894
// begin Say ( Givi , DG-Scout-15 ) ;
9870: LD_EXP 22
9874: PPUSH
9875: LD_STRING DG-Scout-15
9877: PPUSH
9878: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9882: LD_EXP 26
9886: PPUSH
9887: LD_STRING DK-Scout-16
9889: PPUSH
9890: CALL_OW 88
// end ; if not dialogue_skipped then
9894: LD_OWVAR 59
9898: NOT
9899: IFFALSE 10020
// begin async ;
9901: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9902: LD_EXP 30
9906: PPUSH
9907: LD_STRING DO-Scout-17
9909: PPUSH
9910: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9914: LD_INT 55
9916: PPUSH
9917: LD_INT 77
9919: PPUSH
9920: LD_INT 2
9922: PPUSH
9923: LD_INT 6
9925: NEG
9926: PPUSH
9927: CALL 1219 0 4
// wait ( 10 ) ;
9931: LD_INT 10
9933: PPUSH
9934: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9938: LD_INT 55
9940: PPUSH
9941: LD_INT 77
9943: PPUSH
9944: CALL_OW 84
// wait ( 0 0$10 ) ;
9948: LD_INT 350
9950: PPUSH
9951: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9955: LD_EXP 30
9959: PPUSH
9960: LD_STRING DO-Scout-18
9962: PPUSH
9963: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9967: LD_INT 204
9969: PPUSH
9970: LD_INT 107
9972: PPUSH
9973: LD_INT 2
9975: PPUSH
9976: LD_INT 12
9978: NEG
9979: PPUSH
9980: CALL 1219 0 4
// wait ( 10 ) ;
9984: LD_INT 10
9986: PPUSH
9987: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9991: LD_INT 204
9993: PPUSH
9994: LD_INT 107
9996: PPUSH
9997: CALL_OW 84
// wait ( 0 0$10 ) ;
10001: LD_INT 350
10003: PPUSH
10004: CALL_OW 67
// sync ;
10008: SYNC
// CenterNowOnUnits ( Heike ) ;
10009: LD_EXP 21
10013: PPUSH
10014: CALL_OW 87
// end else
10018: GO 10054
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10020: LD_INT 55
10022: PPUSH
10023: LD_INT 77
10025: PPUSH
10026: LD_INT 2
10028: PPUSH
10029: LD_INT 6
10031: NEG
10032: PPUSH
10033: CALL 1219 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10037: LD_INT 204
10039: PPUSH
10040: LD_INT 107
10042: PPUSH
10043: LD_INT 2
10045: PPUSH
10046: LD_INT 12
10048: NEG
10049: PPUSH
10050: CALL 1219 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10054: LD_EXP 30
10058: PPUSH
10059: LD_STRING DO-Scout-19
10061: PPUSH
10062: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-20
10073: PPUSH
10074: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10078: LD_EXP 21
10082: PPUSH
10083: LD_STRING DH-Scout-21
10085: PPUSH
10086: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10090: LD_EXP 21
10094: PPUSH
10095: LD_STRING DH-Scout-22
10097: PPUSH
10098: CALL_OW 88
// InGameOff ;
10102: CALL_OW 9
// if heikeSecondSquad then
10106: LD_EXP 34
10110: IFFALSE 10124
// ForceSleep ( heikeSecondSquad , false ) ;
10112: LD_EXP 34
10116: PPUSH
10117: LD_INT 0
10119: PPUSH
10120: CALL_OW 585
// if Givi then
10124: LD_EXP 22
10128: IFFALSE 10143
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10130: LD_INT 13
10132: PPUSH
10133: LD_INT 2
10135: PPUSH
10136: LD_INT 1
10138: PPUSH
10139: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10143: LD_STRING Road
10145: PPUSH
10146: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10150: LD_ADDR_VAR 0 2
10154: PUSH
10155: LD_INT 22
10157: PUSH
10158: LD_INT 5
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: LD_INT 21
10167: PUSH
10168: LD_INT 2
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PPUSH
10179: CALL_OW 69
10183: PUSH
10184: FOR_IN
10185: IFFALSE 10201
// SetSide ( i , 2 ) ;
10187: LD_VAR 0 2
10191: PPUSH
10192: LD_INT 2
10194: PPUSH
10195: CALL_OW 235
10199: GO 10184
10201: POP
10202: POP
// SaveForQuickRestart ;
10203: CALL_OW 22
// music_class := music_auto ;
10207: LD_ADDR_OWVAR 72
10211: PUSH
10212: LD_INT 0
10214: ST_TO_ADDR
// end ;
10215: LD_VAR 0 1
10219: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10220: LD_INT 2
10222: PPUSH
10223: LD_INT 9
10225: PPUSH
10226: CALL_OW 294
10230: IFFALSE 10597
10232: GO 10234
10234: DISABLE
// begin DialogueOn ;
10235: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10239: LD_INT 111
10241: PPUSH
10242: LD_INT 72
10244: PPUSH
10245: LD_INT 2
10247: PPUSH
10248: LD_INT 20
10250: NEG
10251: PPUSH
10252: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10256: LD_INT 111
10258: PPUSH
10259: LD_INT 72
10261: PPUSH
10262: LD_INT 2
10264: PPUSH
10265: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10269: LD_INT 111
10271: PPUSH
10272: LD_INT 72
10274: PPUSH
10275: CALL_OW 86
// if IsOk ( Kamil ) then
10279: LD_EXP 25
10283: PPUSH
10284: CALL_OW 302
10288: IFFALSE 10405
// begin Say ( Kamil , DKam-Cross-1 ) ;
10290: LD_EXP 25
10294: PPUSH
10295: LD_STRING DKam-Cross-1
10297: PPUSH
10298: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10302: LD_EXP 25
10306: PPUSH
10307: LD_STRING DKam-Cross-2
10309: PPUSH
10310: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10314: LD_EXP 25
10318: PPUSH
10319: LD_STRING DKam-Cross-3
10321: PPUSH
10322: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10326: LD_EXP 25
10330: PPUSH
10331: LD_STRING DKam-Cross-4
10333: PPUSH
10334: CALL_OW 88
// if IsOk ( Ibrahim ) then
10338: LD_EXP 24
10342: PPUSH
10343: CALL_OW 302
10347: IFFALSE 10403
// begin if ibrahimJoinedIn04 then
10349: LD_EXP 4
10353: IFFALSE 10367
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10355: LD_EXP 24
10359: PPUSH
10360: LD_STRING DI-Cross-b-5
10362: PPUSH
10363: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10367: LD_EXP 24
10371: PPUSH
10372: LD_STRING DI-Cross-b-6
10374: PPUSH
10375: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10379: LD_EXP 24
10383: PPUSH
10384: LD_STRING DI-Cross-b-7
10386: PPUSH
10387: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10391: LD_EXP 25
10395: PPUSH
10396: LD_STRING DKam-Cross-8
10398: PPUSH
10399: CALL_OW 88
// end ; end else
10403: GO 10563
// if IsOk ( Sophia ) then
10405: LD_EXP 27
10409: PPUSH
10410: CALL_OW 302
10414: IFFALSE 10531
// begin Say ( Sophia , DS-Cross-1 ) ;
10416: LD_EXP 27
10420: PPUSH
10421: LD_STRING DS-Cross-1
10423: PPUSH
10424: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10428: LD_EXP 27
10432: PPUSH
10433: LD_STRING DS-Cross-2
10435: PPUSH
10436: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10440: LD_EXP 27
10444: PPUSH
10445: LD_STRING DS-Cross-3
10447: PPUSH
10448: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10452: LD_EXP 27
10456: PPUSH
10457: LD_STRING DS-Cross-4
10459: PPUSH
10460: CALL_OW 88
// if IsOk ( Ibrahim ) then
10464: LD_EXP 24
10468: PPUSH
10469: CALL_OW 302
10473: IFFALSE 10529
// begin if ibrahimJoinedIn04 then
10475: LD_EXP 4
10479: IFFALSE 10493
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10481: LD_EXP 24
10485: PPUSH
10486: LD_STRING DI-Cross-b-5
10488: PPUSH
10489: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10493: LD_EXP 24
10497: PPUSH
10498: LD_STRING DI-Cross-b-6
10500: PPUSH
10501: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10505: LD_EXP 24
10509: PPUSH
10510: LD_STRING DI-Cross-b-7
10512: PPUSH
10513: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10517: LD_EXP 27
10521: PPUSH
10522: LD_STRING DS-Cross-8
10524: PPUSH
10525: CALL_OW 88
// end ; end else
10529: GO 10563
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10531: LD_EXP 34
10535: PPUSH
10536: LD_INT 50
10538: PUSH
10539: EMPTY
10540: LIST
10541: PPUSH
10542: CALL_OW 72
10546: IFFALSE 10563
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10548: LD_EXP 34
10552: PPUSH
10553: LD_STRING DArm-Cross-c-1
10555: PPUSH
10556: LD_STRING DArf-Cross-c-1
10558: PPUSH
10559: CALL 1270 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10563: LD_EXP 57
10567: PPUSH
10568: LD_INT 2
10570: PPUSH
10571: LD_INT 1
10573: PPUSH
10574: CALL_OW 322
// DialogueOff ;
10578: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10582: LD_STRING Crane
10584: PPUSH
10585: CALL_OW 337
// spottedCrossRoad := true ;
10589: LD_ADDR_EXP 8
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// end ;
10597: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10598: LD_INT 22
10600: PUSH
10601: LD_INT 2
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 0
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 30
10623: PUSH
10624: LD_INT 1
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 69
10644: PUSH
10645: LD_EXP 26
10649: PPUSH
10650: CALL_OW 302
10654: PUSH
10655: LD_EXP 34
10659: OR
10660: AND
10661: IFFALSE 10873
10663: GO 10665
10665: DISABLE
// begin DialogueOn ;
10666: CALL_OW 6
// if Kaia then
10670: LD_EXP 26
10674: IFFALSE 10687
// CenterNowOnUnits ( Kaia ) else
10676: LD_EXP 26
10680: PPUSH
10681: CALL_OW 87
10685: GO 10696
// CenterNowOnUnits ( Heike ) ;
10687: LD_EXP 21
10691: PPUSH
10692: CALL_OW 87
// if IsOk ( Kaia ) then
10696: LD_EXP 26
10700: PPUSH
10701: CALL_OW 302
10705: IFFALSE 10721
// Say ( Kaia , DK-Cam-1 ) else
10707: LD_EXP 26
10711: PPUSH
10712: LD_STRING DK-Cam-1
10714: PPUSH
10715: CALL_OW 88
10719: GO 10736
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10721: LD_EXP 34
10725: PPUSH
10726: LD_STRING DArm-Cam-1
10728: PPUSH
10729: LD_STRING DArf-Cam-1
10731: PPUSH
10732: CALL 1270 0 3
// Say ( Heike , DH-Cam-2 ) ;
10736: LD_EXP 21
10740: PPUSH
10741: LD_STRING DH-Cam-2
10743: PPUSH
10744: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10748: LD_EXP 21
10752: PPUSH
10753: LD_STRING DH-Cam-3
10755: PPUSH
10756: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10760: LD_EXP 21
10764: PPUSH
10765: LD_STRING DH-Cam-4
10767: PPUSH
10768: CALL_OW 88
// if IsOk ( Kaia ) then
10772: LD_EXP 26
10776: PPUSH
10777: CALL_OW 302
10781: IFFALSE 10797
// Say ( Kaia , DK-Cam-5 ) else
10783: LD_EXP 26
10787: PPUSH
10788: LD_STRING DK-Cam-5
10790: PPUSH
10791: CALL_OW 88
10795: GO 10812
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10797: LD_EXP 34
10801: PPUSH
10802: LD_STRING DArm-Cam-5
10804: PPUSH
10805: LD_STRING DArf-Cam-5
10807: PPUSH
10808: CALL 1270 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10812: LD_EXP 30
10816: PPUSH
10817: LD_STRING DO-Cam-6
10819: PPUSH
10820: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10824: LD_EXP 30
10828: PPUSH
10829: LD_STRING DO-Cam-7
10831: PPUSH
10832: CALL_OW 88
// DialogueOff ;
10836: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10840: LD_STRING Radar
10842: PPUSH
10843: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10847: LD_INT 6
10849: PPUSH
10850: LD_INT 2
10852: PPUSH
10853: LD_INT 1
10855: PPUSH
10856: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10860: LD_INT 20
10862: PPUSH
10863: LD_INT 2
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 324
// end ;
10873: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10874: LD_INT 22
10876: PUSH
10877: LD_INT 2
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 2
10886: PUSH
10887: LD_INT 34
10889: PUSH
10890: LD_INT 30
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 35
10899: PUSH
10900: LD_INT 30
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PPUSH
10916: CALL_OW 69
10920: IFFALSE 10932
10922: GO 10924
10924: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10925: LD_STRING RadarDone
10927: PPUSH
10928: CALL_OW 337
10932: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10933: LD_INT 22
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 34
10945: PUSH
10946: LD_EXP 50
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PPUSH
10959: CALL_OW 69
10963: IFFALSE 10975
10965: GO 10967
10967: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10968: LD_STRING CraneDone
10970: PPUSH
10971: CALL_OW 337
10975: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10976: LD_EXP 30
10980: PPUSH
10981: CALL_OW 302
10985: PUSH
10986: LD_EXP 33
10990: PPUSH
10991: CALL_OW 302
10995: AND
10996: PUSH
10997: LD_INT 6
10999: PPUSH
11000: LD_INT 2
11002: PPUSH
11003: CALL_OW 321
11007: PUSH
11008: LD_INT 2
11010: EQUAL
11011: AND
11012: PUSH
11013: LD_EXP 33
11017: PPUSH
11018: LD_EXP 21
11022: PPUSH
11023: CALL_OW 296
11027: PUSH
11028: LD_INT 10
11030: LESS
11031: PUSH
11032: LD_EXP 33
11036: PPUSH
11037: CALL_OW 310
11041: OR
11042: AND
11043: IFFALSE 11257
11045: GO 11047
11047: DISABLE
// begin DialogueOn ;
11048: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11052: LD_EXP 33
11056: PPUSH
11057: LD_STRING DA-RC-1
11059: PPUSH
11060: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11064: LD_EXP 33
11068: PPUSH
11069: LD_STRING DA-RC-2
11071: PPUSH
11072: CALL_OW 88
// if IsOk ( Kaia ) then
11076: LD_EXP 26
11080: PPUSH
11081: CALL_OW 302
11085: IFFALSE 11159
// begin Say ( Kaia , DK-RC-3 ) ;
11087: LD_EXP 26
11091: PPUSH
11092: LD_STRING DK-RC-3
11094: PPUSH
11095: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11099: LD_EXP 33
11103: PPUSH
11104: LD_STRING DA-RC-4
11106: PPUSH
11107: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11111: LD_EXP 26
11115: PPUSH
11116: LD_STRING DK-RC-5
11118: PPUSH
11119: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11123: LD_EXP 33
11127: PPUSH
11128: LD_STRING DA-RC-6
11130: PPUSH
11131: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11135: LD_EXP 26
11139: PPUSH
11140: LD_STRING DK-RC-7
11142: PPUSH
11143: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11147: LD_EXP 33
11151: PPUSH
11152: LD_STRING DA-RC-8
11154: PPUSH
11155: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11159: LD_EXP 21
11163: PPUSH
11164: LD_STRING DH-RC-9
11166: PPUSH
11167: CALL_OW 88
// if IsOk ( Markov ) then
11171: LD_EXP 28
11175: PPUSH
11176: CALL_OW 302
11180: IFFALSE 11208
// begin Say ( Markov , DMar-RC-10 ) ;
11182: LD_EXP 28
11186: PPUSH
11187: LD_STRING DMar-RC-10
11189: PPUSH
11190: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11194: LD_EXP 28
11198: PPUSH
11199: LD_STRING DMar-RC-11
11201: PPUSH
11202: CALL_OW 88
// end else
11206: GO 11220
// begin Say ( Olaf , DO-RC-a-10 ) ;
11208: LD_EXP 30
11212: PPUSH
11213: LD_STRING DO-RC-a-10
11215: PPUSH
11216: CALL_OW 88
// end ; DialogueOff ;
11220: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11224: LD_STRING RemoteControl
11226: PPUSH
11227: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11231: LD_INT 15
11233: PPUSH
11234: LD_INT 2
11236: PPUSH
11237: LD_INT 1
11239: PPUSH
11240: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11244: LD_INT 22
11246: PPUSH
11247: LD_INT 2
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: CALL_OW 324
// end ;
11257: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11258: LD_INT 12
11260: PPUSH
11261: LD_INT 22
11263: PUSH
11264: LD_INT 2
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 70
11275: IFFALSE 11642
11277: GO 11279
11279: DISABLE
11280: LD_INT 0
11282: PPUSH
// begin PrepareWestBase ;
11283: CALL 3972 0 0
// westBaseSpotted := true ;
11287: LD_ADDR_EXP 5
11291: PUSH
11292: LD_INT 1
11294: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11295: LD_INT 70
11297: PPUSH
11298: CALL_OW 67
// InGameOn ;
11302: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11306: LD_INT 56
11308: PPUSH
11309: LD_INT 77
11311: PPUSH
11312: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11316: LD_INT 56
11318: PPUSH
11319: LD_INT 77
11321: PPUSH
11322: LD_INT 2
11324: PPUSH
11325: LD_INT 12
11327: NEG
11328: PPUSH
11329: CALL_OW 330
// wait ( 0 0$2 ) ;
11333: LD_INT 70
11335: PPUSH
11336: CALL_OW 67
// DialogueOn ;
11340: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11344: LD_EXP 21
11348: PPUSH
11349: LD_STRING DH-Rbase-1
11351: PPUSH
11352: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11356: LD_EXP 26
11360: PPUSH
11361: LD_STRING DK-Rbase-2
11363: PPUSH
11364: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11368: LD_EXP 26
11372: PPUSH
11373: LD_STRING DK-Rbase-3
11375: PPUSH
11376: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11380: LD_EXP 26
11384: PPUSH
11385: LD_STRING DK-Rbase-4
11387: PPUSH
11388: CALL_OW 88
// DialogueOff ;
11392: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11396: LD_INT 56
11398: PPUSH
11399: LD_INT 77
11401: PPUSH
11402: LD_INT 2
11404: PPUSH
11405: CALL_OW 331
// InGameOff ;
11409: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11413: LD_INT 35
11415: PPUSH
11416: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11420: LD_EXP 42
11424: NOT
11425: PUSH
11426: LD_EXP 43
11430: NOT
11431: AND
11432: IFFALSE 11413
// wait ( 0 0$2 ) ;
11434: LD_INT 70
11436: PPUSH
11437: CALL_OW 67
// if IsOk ( Kaia ) then
11441: LD_EXP 26
11445: PPUSH
11446: CALL_OW 302
11450: IFFALSE 11565
// begin DialogueOn ;
11452: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11456: LD_INT 56
11458: PPUSH
11459: LD_INT 81
11461: PPUSH
11462: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11466: LD_EXP 26
11470: PPUSH
11471: LD_STRING DK-Rbase-5
11473: PPUSH
11474: CALL_OW 88
// if IsOk ( Givi ) then
11478: LD_EXP 22
11482: PPUSH
11483: CALL_OW 302
11487: IFFALSE 11561
// begin Say ( Givi , DG-Rbase-6 ) ;
11489: LD_EXP 22
11493: PPUSH
11494: LD_STRING DG-Rbase-6
11496: PPUSH
11497: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11501: LD_EXP 22
11505: PPUSH
11506: LD_STRING DG-Rbase-7
11508: PPUSH
11509: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11513: LD_EXP 26
11517: PPUSH
11518: LD_STRING DK-Rbase-8
11520: PPUSH
11521: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11525: LD_EXP 22
11529: PPUSH
11530: LD_STRING DG-Rbase-9
11532: PPUSH
11533: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11537: LD_EXP 22
11541: PPUSH
11542: LD_STRING DG-Rbase-10
11544: PPUSH
11545: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11549: LD_EXP 26
11553: PPUSH
11554: LD_STRING DK-Rbase-11
11556: PPUSH
11557: CALL_OW 88
// end ; DialogueOff ;
11561: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11565: LD_ADDR_VAR 0 1
11569: PUSH
11570: LD_INT 12
11572: PPUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 21
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 70
11601: PUSH
11602: FOR_IN
11603: IFFALSE 11619
// SetSide ( i , 2 ) ;
11605: LD_VAR 0 1
11609: PPUSH
11610: LD_INT 2
11612: PPUSH
11613: CALL_OW 235
11617: GO 11602
11619: POP
11620: POP
// westBaseCaptured := true ;
11621: LD_ADDR_EXP 9
11625: PUSH
11626: LD_INT 1
11628: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11629: LD_INT 0
11631: PPUSH
11632: LD_INT 2
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 324
// end ;
11642: PPOPN 1
11644: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11645: LD_EXP 38
11649: NOT
11650: PUSH
11651: LD_INT 10
11653: PPUSH
11654: CALL_OW 255
11658: PUSH
11659: LD_INT 2
11661: EQUAL
11662: OR
11663: IFFALSE 11800
11665: GO 11667
11667: DISABLE
// begin DialogueOn ;
11668: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11672: LD_EXP 21
11676: PPUSH
11677: LD_STRING DH-Goal-1
11679: PPUSH
11680: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11684: LD_EXP 29
11688: PPUSH
11689: LD_STRING DShar-Goal-2
11691: PPUSH
11692: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11696: LD_EXP 21
11700: PPUSH
11701: LD_STRING DH-Goal-3
11703: PPUSH
11704: CALL_OW 88
// if reinforcementsAllowed then
11708: LD_EXP 14
11712: IFFALSE 11738
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11714: LD_EXP 29
11718: PPUSH
11719: LD_STRING DShar-Goal-4
11721: PPUSH
11722: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11726: LD_EXP 21
11730: PPUSH
11731: LD_STRING DH-Goal-5
11733: PPUSH
11734: CALL_OW 88
// end ; DialogueOff ;
11738: CALL_OW 7
// eastBaseCaptured := true ;
11742: LD_ADDR_EXP 10
11746: PUSH
11747: LD_INT 1
11749: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11750: LD_STRING BaseCaptured
11752: PPUSH
11753: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11757: LD_INT 10
11759: PPUSH
11760: LD_INT 2
11762: PPUSH
11763: CALL_OW 235
// if not reinforcementsAllowed then
11767: LD_EXP 14
11771: NOT
11772: IFFALSE 11776
// exit ;
11774: GO 11800
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11776: LD_INT 21000
11778: PUSH
11779: LD_INT 1050
11781: NEG
11782: PPUSH
11783: LD_INT 1050
11785: PPUSH
11786: CALL_OW 12
11790: PLUS
11791: PPUSH
11792: CALL_OW 67
// PrepareReinforcements ;
11796: CALL 2238 0 0
// end ;
11800: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11801: LD_INT 22
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 30
11813: PUSH
11814: LD_INT 13
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PPUSH
11825: CALL_OW 69
11829: IFFALSE 11846
11831: GO 11833
11833: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11834: LD_EXP 22
11838: PPUSH
11839: LD_STRING DG-Lab-1
11841: PPUSH
11842: CALL_OW 88
// end ;
11846: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11847: LD_INT 5
11849: PPUSH
11850: LD_INT 2
11852: PPUSH
11853: CALL_OW 321
11857: PUSH
11858: LD_INT 2
11860: EQUAL
11861: PUSH
11862: LD_EXP 22
11866: PPUSH
11867: CALL_OW 302
11871: AND
11872: IFFALSE 11933
11874: GO 11876
11876: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11877: LD_EXP 22
11881: PPUSH
11882: LD_STRING DG-Stim-1
11884: PPUSH
11885: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11889: LD_EXP 21
11893: PPUSH
11894: LD_STRING DH-Stim-2
11896: PPUSH
11897: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11901: LD_EXP 22
11905: PPUSH
11906: LD_STRING DG-Stim-3
11908: PPUSH
11909: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11913: LD_EXP 21
11917: PPUSH
11918: LD_STRING DH-Stim-4
11920: PPUSH
11921: CALL_OW 88
// drugsResearched := true ;
11925: LD_ADDR_EXP 11
11929: PUSH
11930: LD_INT 1
11932: ST_TO_ADDR
// end ;
11933: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11934: LD_EXP 11
11938: IFFALSE 12250
11940: GO 11942
11942: DISABLE
11943: LD_INT 0
11945: PPUSH
11946: PPUSH
11947: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11948: LD_ADDR_VAR 0 2
11952: PUSH
11953: LD_EXP 21
11957: PUSH
11958: LD_EXP 22
11962: PUSH
11963: LD_EXP 30
11967: PUSH
11968: LD_EXP 28
11972: PUSH
11973: LD_EXP 26
11977: PUSH
11978: LD_EXP 27
11982: PUSH
11983: LD_EXP 32
11987: PUSH
11988: LD_EXP 25
11992: PUSH
11993: LD_EXP 23
11997: PUSH
11998: LD_EXP 24
12002: PUSH
12003: LD_EXP 33
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12021: LD_ADDR_VAR 0 3
12025: PUSH
12026: LD_STRING H
12028: PUSH
12029: LD_STRING G
12031: PUSH
12032: LD_STRING O
12034: PUSH
12035: LD_STRING Mar
12037: PUSH
12038: LD_STRING K
12040: PUSH
12041: LD_STRING S
12043: PUSH
12044: LD_STRING Ks
12046: PUSH
12047: LD_STRING Kam
12049: PUSH
12050: LD_STRING M
12052: PUSH
12053: LD_STRING I
12055: PUSH
12056: LD_STRING A
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12072: LD_INT 35
12074: PPUSH
12075: CALL_OW 67
// for i := tmp downto 1 do
12079: LD_ADDR_VAR 0 1
12083: PUSH
12084: DOUBLE
12085: LD_VAR 0 2
12089: INC
12090: ST_TO_ADDR
12091: LD_INT 1
12093: PUSH
12094: FOR_DOWNTO
12095: IFFALSE 12241
// if GetLives ( tmp [ i ] ) < 250 then
12097: LD_VAR 0 2
12101: PUSH
12102: LD_VAR 0 1
12106: ARRAY
12107: PPUSH
12108: CALL_OW 256
12112: PUSH
12113: LD_INT 250
12115: LESS
12116: IFFALSE 12239
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12118: LD_ADDR_EXP 19
12122: PUSH
12123: LD_EXP 19
12127: PUSH
12128: LD_INT 1
12130: PLUS
12131: ST_TO_ADDR
// DialogueOn ;
12132: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12136: LD_VAR 0 2
12140: PUSH
12141: LD_VAR 0 1
12145: ARRAY
12146: PPUSH
12147: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12151: LD_VAR 0 2
12155: PUSH
12156: LD_VAR 0 1
12160: ARRAY
12161: PPUSH
12162: LD_STRING D
12164: PUSH
12165: LD_VAR 0 3
12169: PUSH
12170: LD_VAR 0 1
12174: ARRAY
12175: STR
12176: PUSH
12177: LD_STRING -Stim-a-1
12179: STR
12180: PPUSH
12181: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: LD_VAR 0 2
12194: PPUSH
12195: LD_VAR 0 1
12199: PPUSH
12200: CALL_OW 3
12204: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_VAR 0 3
12214: PPUSH
12215: LD_VAR 0 1
12219: PPUSH
12220: CALL_OW 3
12224: ST_TO_ADDR
// drugsTested := true ;
12225: LD_ADDR_EXP 6
12229: PUSH
12230: LD_INT 1
12232: ST_TO_ADDR
// DialogueOff ;
12233: CALL_OW 7
// break ;
12237: GO 12241
// end ;
12239: GO 12094
12241: POP
12242: POP
// until not tmp ;
12243: LD_VAR 0 2
12247: NOT
12248: IFFALSE 12072
// end ;
12250: PPOPN 3
12252: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12253: LD_INT 22
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 34
12265: PUSH
12266: LD_INT 31
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: PUSH
12282: LD_INT 22
12284: PUSH
12285: LD_INT 2
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 33
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 69
12310: AND
12311: IFFALSE 12324
12313: GO 12315
12315: DISABLE
// remoteControlConstructed := true ;
12316: LD_ADDR_EXP 12
12320: PUSH
12321: LD_INT 1
12323: ST_TO_ADDR
12324: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12325: LD_EXP 12
12329: IFFALSE 12629
12331: GO 12333
12333: DISABLE
12334: LD_INT 0
12336: PPUSH
12337: PPUSH
12338: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12339: LD_ADDR_VAR 0 2
12343: PUSH
12344: LD_EXP 21
12348: PUSH
12349: LD_EXP 22
12353: PUSH
12354: LD_EXP 30
12358: PUSH
12359: LD_EXP 28
12363: PUSH
12364: LD_EXP 26
12368: PUSH
12369: LD_EXP 27
12373: PUSH
12374: LD_EXP 32
12378: PUSH
12379: LD_EXP 25
12383: PUSH
12384: LD_EXP 23
12388: PUSH
12389: LD_EXP 24
12393: PUSH
12394: LD_EXP 33
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12412: LD_ADDR_VAR 0 3
12416: PUSH
12417: LD_STRING H
12419: PUSH
12420: LD_STRING G
12422: PUSH
12423: LD_STRING O
12425: PUSH
12426: LD_STRING Mar
12428: PUSH
12429: LD_STRING K
12431: PUSH
12432: LD_STRING S
12434: PUSH
12435: LD_STRING Ks
12437: PUSH
12438: LD_STRING Kam
12440: PUSH
12441: LD_STRING M
12443: PUSH
12444: LD_STRING I
12446: PUSH
12447: LD_STRING A
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12463: LD_INT 35
12465: PPUSH
12466: CALL_OW 67
// for i := tmp downto 1 do
12470: LD_ADDR_VAR 0 1
12474: PUSH
12475: DOUBLE
12476: LD_VAR 0 2
12480: INC
12481: ST_TO_ADDR
12482: LD_INT 1
12484: PUSH
12485: FOR_DOWNTO
12486: IFFALSE 12620
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12488: LD_VAR 0 2
12492: PUSH
12493: LD_VAR 0 1
12497: ARRAY
12498: PPUSH
12499: CALL_OW 257
12503: PUSH
12504: LD_INT 3
12506: EQUAL
12507: PUSH
12508: LD_VAR 0 2
12512: PUSH
12513: LD_VAR 0 1
12517: ARRAY
12518: PPUSH
12519: CALL_OW 432
12523: AND
12524: IFFALSE 12618
// begin DialogueOn ;
12526: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12530: LD_VAR 0 2
12534: PUSH
12535: LD_VAR 0 1
12539: ARRAY
12540: PPUSH
12541: LD_STRING D
12543: PUSH
12544: LD_VAR 0 3
12548: PUSH
12549: LD_VAR 0 1
12553: ARRAY
12554: STR
12555: PUSH
12556: LD_STRING -RC-a-1
12558: STR
12559: PPUSH
12560: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12564: LD_ADDR_VAR 0 2
12568: PUSH
12569: LD_VAR 0 2
12573: PPUSH
12574: LD_VAR 0 1
12578: PPUSH
12579: CALL_OW 3
12583: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12584: LD_ADDR_VAR 0 3
12588: PUSH
12589: LD_VAR 0 3
12593: PPUSH
12594: LD_VAR 0 1
12598: PPUSH
12599: CALL_OW 3
12603: ST_TO_ADDR
// DialogueOff ;
12604: CALL_OW 7
// remoteControlTested := true ;
12608: LD_ADDR_EXP 7
12612: PUSH
12613: LD_INT 1
12615: ST_TO_ADDR
// break ;
12616: GO 12620
// end ;
12618: GO 12485
12620: POP
12621: POP
// until not tmp ;
12622: LD_VAR 0 2
12626: NOT
12627: IFFALSE 12463
// end ;
12629: PPOPN 3
12631: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12632: LD_EXP 7
12636: PUSH
12637: LD_EXP 28
12641: PPUSH
12642: CALL_OW 302
12646: AND
12647: IFFALSE 12676
12649: GO 12651
12651: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12652: LD_EXP 28
12656: PPUSH
12657: LD_STRING DMar-RC-a-2
12659: PPUSH
12660: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12664: LD_EXP 28
12668: PPUSH
12669: LD_STRING DMar-RC-a-3
12671: PPUSH
12672: CALL_OW 88
// end ;
12676: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12677: LD_EXP 14
12681: PUSH
12682: LD_EXP 21
12686: PPUSH
12687: LD_EXP 33
12691: PPUSH
12692: CALL_OW 296
12696: PUSH
12697: LD_INT 8
12699: LESS
12700: AND
12701: PUSH
12702: LD_INT 2
12704: PPUSH
12705: CALL_OW 463
12709: NOT
12710: AND
12711: PUSH
12712: LD_EXP 33
12716: PPUSH
12717: CALL_OW 302
12721: AND
12722: PUSH
12723: LD_EXP 21
12727: PPUSH
12728: CALL_OW 302
12732: AND
12733: IFFALSE 12911
12735: GO 12737
12737: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12738: LD_EXP 33
12742: PPUSH
12743: CALL_OW 310
12747: NOT
12748: IFFALSE 12764
// ComTurnUnit ( Aviradze , Heike ) ;
12750: LD_EXP 33
12754: PPUSH
12755: LD_EXP 21
12759: PPUSH
12760: CALL_OW 119
// if not IsInUnit ( Heike ) then
12764: LD_EXP 21
12768: PPUSH
12769: CALL_OW 310
12773: NOT
12774: IFFALSE 12790
// ComTurnUnit ( Heike , Aviradze ) ;
12776: LD_EXP 21
12780: PPUSH
12781: LD_EXP 33
12785: PPUSH
12786: CALL_OW 119
// wait ( 0 0$1 ) ;
12790: LD_INT 35
12792: PPUSH
12793: CALL_OW 67
// DialogueOn ;
12797: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12801: LD_EXP 33
12805: PPUSH
12806: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12810: LD_EXP 21
12814: PPUSH
12815: LD_STRING DH-Beria-1
12817: PPUSH
12818: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12822: LD_EXP 33
12826: PPUSH
12827: LD_STRING DA-Beria-2
12829: PPUSH
12830: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12834: LD_EXP 21
12838: PPUSH
12839: LD_STRING DH-Beria-3
12841: PPUSH
12842: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12846: LD_EXP 33
12850: PPUSH
12851: LD_STRING DA-Beria-4
12853: PPUSH
12854: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12858: LD_EXP 33
12862: PPUSH
12863: LD_STRING DA-Beria-5
12865: PPUSH
12866: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12870: LD_EXP 33
12874: PPUSH
12875: LD_STRING DA-Beria-6
12877: PPUSH
12878: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12882: LD_EXP 21
12886: PPUSH
12887: LD_STRING DA-Beria-7
12889: PPUSH
12890: CALL_OW 88
// DialogueOff ;
12894: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12898: LD_INT 52
12900: PPUSH
12901: LD_INT 2
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 322
// end ;
12911: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
12912: LD_EXP 26
12916: PPUSH
12917: CALL_OW 300
12921: PUSH
12922: LD_EXP 26
12926: PPUSH
12927: CALL_OW 256
12931: PUSH
12932: LD_INT 10
12934: LESS
12935: AND
12936: IFFALSE 12973
12938: GO 12940
12940: DISABLE
// begin DialogueOn ;
12941: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12945: LD_EXP 26
12949: PPUSH
12950: LD_STRING DK-Kdeath-1
12952: PPUSH
12953: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12957: LD_EXP 21
12961: PPUSH
12962: LD_STRING DH-Kdeath-2
12964: PPUSH
12965: CALL_OW 88
// DialogueOff ;
12969: CALL_OW 7
// end ;
12973: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12974: LD_INT 2
12976: PPUSH
12977: LD_EXP 39
12981: PPUSH
12982: CALL 1370 0 2
12986: IFFALSE 13003
12988: GO 12990
12990: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12991: LD_EXP 21
12995: PPUSH
12996: LD_STRING DH-Obj-1
12998: PPUSH
12999: CALL_OW 88
13003: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13004: LD_INT 2
13006: PPUSH
13007: LD_EXP 40
13011: PPUSH
13012: CALL 1370 0 2
13016: IFFALSE 13033
13018: GO 13020
13020: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13021: LD_EXP 21
13025: PPUSH
13026: LD_STRING DH-Obj-a-1
13028: PPUSH
13029: CALL_OW 88
13033: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
13034: LD_EXP 10
13038: PUSH
13039: LD_OWVAR 1
13043: PUSH
13044: LD_INT 14700
13046: PUSH
13047: LD_INT 13650
13049: PUSH
13050: LD_INT 12600
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: PUSH
13058: LD_OWVAR 67
13062: ARRAY
13063: GREATEREQUAL
13064: OR
13065: IFFALSE 13093
13067: GO 13069
13069: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13070: LD_INT 4200
13072: PPUSH
13073: LD_INT 5250
13075: PPUSH
13076: CALL_OW 12
13080: PPUSH
13081: CALL_OW 67
// convoyStarted := true ;
13085: LD_ADDR_EXP 17
13089: PUSH
13090: LD_INT 1
13092: ST_TO_ADDR
// end ;
13093: END
// every 0 0$1 trigger convoyStarted do
13094: LD_EXP 17
13098: IFFALSE 13182
13100: GO 13102
13102: DISABLE
// begin DialogueOn ;
13103: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13107: LD_EXP 29
13111: PPUSH
13112: LD_STRING DShar-Convoy-1
13114: PPUSH
13115: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13119: LD_EXP 21
13123: PPUSH
13124: LD_STRING DH-Convoy-2
13126: PPUSH
13127: CALL_OW 88
// DialogueOff ;
13131: CALL_OW 7
// PrepareConvoy ;
13135: CALL 4611 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13139: LD_INT 5250
13141: PPUSH
13142: LD_INT 11550
13144: PPUSH
13145: CALL_OW 12
13149: PPUSH
13150: CALL_OW 67
// PrepareConvoy ;
13154: CALL 4611 0 0
// convoyCounter := convoyCounter - 1 ;
13158: LD_ADDR_EXP 16
13162: PUSH
13163: LD_EXP 16
13167: PUSH
13168: LD_INT 1
13170: MINUS
13171: ST_TO_ADDR
// until convoyCounter <= 0 ;
13172: LD_EXP 16
13176: PUSH
13177: LD_INT 0
13179: LESSEQUAL
13180: IFFALSE 13139
// end ;
13182: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13183: LD_EXP 15
13187: PUSH
13188: LD_INT 10
13190: GREATEREQUAL
13191: IFFALSE 13208
13193: GO 13195
13195: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13196: LD_EXP 31
13200: PPUSH
13201: LD_STRING DOm-Fail-1
13203: PPUSH
13204: CALL_OW 94
13208: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13209: LD_EXP 39
13213: NOT
13214: PUSH
13215: LD_EXP 40
13219: NOT
13220: AND
13221: IFFALSE 13233
13223: GO 13225
13225: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13226: LD_STRING RaiderDone
13228: PPUSH
13229: CALL_OW 337
13233: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13234: LD_INT 22
13236: PUSH
13237: LD_INT 2
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 33
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PPUSH
13258: CALL_OW 69
13262: PUSH
13263: LD_INT 3
13265: GREATEREQUAL
13266: PUSH
13267: LD_INT 22
13269: PUSH
13270: LD_INT 2
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 34
13279: PUSH
13280: LD_INT 31
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL_OW 69
13295: PUSH
13296: LD_INT 2
13298: GREATEREQUAL
13299: AND
13300: IFFALSE 13312
13302: GO 13304
13304: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13305: LD_STRING RemoteControlDone
13307: PPUSH
13308: CALL_OW 337
13312: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13313: LD_EXP 16
13317: PUSH
13318: LD_INT 1
13320: LESS
13321: PUSH
13322: LD_EXP 41
13326: PPUSH
13327: LD_INT 52
13329: PUSH
13330: EMPTY
13331: LIST
13332: PUSH
13333: LD_INT 21
13335: PUSH
13336: LD_INT 1
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 72
13351: NOT
13352: AND
13353: PUSH
13354: LD_OWVAR 1
13358: PUSH
13359: LD_INT 126000
13361: GREATEREQUAL
13362: OR
13363: IFFALSE 14180
13365: GO 13367
13367: DISABLE
13368: LD_INT 0
13370: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13371: LD_STRING ReinforcementsDone
13373: PPUSH
13374: CALL_OW 337
// music_class := music_victory ;
13378: LD_ADDR_OWVAR 72
13382: PUSH
13383: LD_INT 4
13385: ST_TO_ADDR
// InGameOn ;
13386: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13390: LD_EXP 21
13394: PPUSH
13395: LD_STRING DH-end-1
13397: PPUSH
13398: CALL_OW 88
// wait ( 0 0$2 ) ;
13402: LD_INT 70
13404: PPUSH
13405: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13409: LD_EXP 29
13413: PPUSH
13414: LD_STRING DShar-end-2
13416: PPUSH
13417: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13421: LD_EXP 39
13425: NOT
13426: PUSH
13427: LD_EXP 40
13431: NOT
13432: AND
13433: IFFALSE 13449
// begin Say ( Heike , DH-end-3 ) ;
13435: LD_EXP 21
13439: PPUSH
13440: LD_STRING DH-end-3
13442: PPUSH
13443: CALL_OW 88
// end else
13447: GO 13546
// begin Say ( Heike , DH-end-a-3 ) ;
13449: LD_EXP 21
13453: PPUSH
13454: LD_STRING DH-end-a-3
13456: PPUSH
13457: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13461: LD_EXP 29
13465: PPUSH
13466: LD_STRING DShar-end-a-4
13468: PPUSH
13469: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13473: LD_EXP 21
13477: PPUSH
13478: LD_STRING DH-end-a-5
13480: PPUSH
13481: CALL_OW 88
// InGameOff ;
13485: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13489: LD_INT 35
13491: PPUSH
13492: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13496: LD_INT 22
13498: PUSH
13499: LD_INT 3
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 21
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PPUSH
13520: CALL_OW 69
13524: PUSH
13525: LD_INT 0
13527: EQUAL
13528: IFFALSE 13489
// InGameOn ;
13530: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13534: LD_EXP 21
13538: PPUSH
13539: LD_STRING DH-end-a-6
13541: PPUSH
13542: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13546: LD_EXP 29
13550: PPUSH
13551: LD_STRING DShar-end-3
13553: PPUSH
13554: CALL_OW 94
// if not flamethrowerBuilt then
13558: LD_EXP 20
13562: NOT
13563: IFFALSE 13572
// SetAchievement ( ACH_FIRE ) ;
13565: LD_STRING ACH_FIRE
13567: PPUSH
13568: CALL_OW 543
// if drugsTested then
13572: LD_EXP 6
13576: IFFALSE 13590
// AddMedal ( med1 , 1 ) else
13578: LD_STRING med1
13580: PPUSH
13581: LD_INT 1
13583: PPUSH
13584: CALL_OW 101
13588: GO 13630
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13590: LD_INT 5
13592: PPUSH
13593: LD_INT 2
13595: PPUSH
13596: CALL_OW 321
13600: PUSH
13601: LD_INT 2
13603: EQUAL
13604: IFFALSE 13619
// AddMedal ( med1 , - 1 ) else
13606: LD_STRING med1
13608: PPUSH
13609: LD_INT 1
13611: NEG
13612: PPUSH
13613: CALL_OW 101
13617: GO 13630
// AddMedal ( med1 , - 2 ) ;
13619: LD_STRING med1
13621: PPUSH
13622: LD_INT 2
13624: NEG
13625: PPUSH
13626: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13630: LD_INT 22
13632: PUSH
13633: LD_INT 2
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 33
13642: PUSH
13643: LD_INT 2
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PPUSH
13654: CALL_OW 69
13658: PUSH
13659: LD_INT 3
13661: GREATEREQUAL
13662: PUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 2
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 34
13675: PUSH
13676: LD_INT 31
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PUSH
13692: LD_INT 1
13694: GREATEREQUAL
13695: AND
13696: IFFALSE 13710
// AddMedal ( med2 , 1 ) else
13698: LD_STRING med2
13700: PPUSH
13701: LD_INT 1
13703: PPUSH
13704: CALL_OW 101
13708: GO 13721
// AddMedal ( med2 , - 1 ) ;
13710: LD_STRING med2
13712: PPUSH
13713: LD_INT 1
13715: NEG
13716: PPUSH
13717: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13721: LD_EXP 15
13725: PUSH
13726: LD_INT 10
13728: PUSH
13729: LD_INT 8
13731: PUSH
13732: LD_INT 6
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: PUSH
13740: LD_OWVAR 67
13744: ARRAY
13745: LESS
13746: IFFALSE 13760
// AddMedal ( med3 , 1 ) else
13748: LD_STRING med3
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 101
13758: GO 13771
// AddMedal ( med3 , - 1 ) ;
13760: LD_STRING med3
13762: PPUSH
13763: LD_INT 1
13765: NEG
13766: PPUSH
13767: CALL_OW 101
// GiveMedals ( MAIN ) ;
13771: LD_STRING MAIN
13773: PPUSH
13774: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13778: LD_INT 22
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 23
13790: PUSH
13791: LD_INT 2
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 21
13800: PUSH
13801: LD_INT 1
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 69
13817: PPUSH
13818: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13822: LD_EXP 15
13826: PPUSH
13827: LD_STRING 05_ConvoySavedCounter
13829: PPUSH
13830: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13834: LD_EXP 13
13838: PPUSH
13839: LD_STRING 05_Radar
13841: PPUSH
13842: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13846: LD_EXP 6
13850: PPUSH
13851: LD_STRING 05_DrugsTested
13853: PPUSH
13854: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13858: LD_INT 22
13860: PUSH
13861: LD_INT 2
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 33
13870: PUSH
13871: LD_INT 2
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PPUSH
13882: CALL_OW 69
13886: PUSH
13887: LD_INT 3
13889: GREATEREQUAL
13890: PUSH
13891: LD_INT 22
13893: PUSH
13894: LD_INT 2
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 34
13903: PUSH
13904: LD_INT 31
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 69
13919: PUSH
13920: LD_INT 2
13922: GREATEREQUAL
13923: AND
13924: PPUSH
13925: LD_STRING 05_RemoteControl
13927: PPUSH
13928: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13932: LD_EXP 21
13936: PPUSH
13937: LD_STRING 05_Heike
13939: PPUSH
13940: CALL_OW 38
// if Aviradze then
13944: LD_EXP 33
13948: IFFALSE 13962
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13950: LD_EXP 33
13954: PPUSH
13955: LD_STRING 05_Aviradze
13957: PPUSH
13958: CALL_OW 38
// if Ibrahim then
13962: LD_EXP 24
13966: IFFALSE 13980
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13968: LD_EXP 24
13972: PPUSH
13973: LD_STRING 05_Ibrahim
13975: PPUSH
13976: CALL_OW 38
// if Kamil then
13980: LD_EXP 25
13984: IFFALSE 13998
// SaveCharacters ( Kamil , 05_Kamil ) ;
13986: LD_EXP 25
13990: PPUSH
13991: LD_STRING 05_Kamil
13993: PPUSH
13994: CALL_OW 38
// if Sophia then
13998: LD_EXP 27
14002: IFFALSE 14016
// SaveCharacters ( Sophia , 05_Sophia ) ;
14004: LD_EXP 27
14008: PPUSH
14009: LD_STRING 05_Sophia
14011: PPUSH
14012: CALL_OW 38
// if Kaia then
14016: LD_EXP 26
14020: IFFALSE 14034
// SaveCharacters ( Kaia , 05_Kaia ) ;
14022: LD_EXP 26
14026: PPUSH
14027: LD_STRING 05_Kaia
14029: PPUSH
14030: CALL_OW 38
// if Givi then
14034: LD_EXP 22
14038: IFFALSE 14052
// SaveCharacters ( Givi , 05_Givi ) ;
14040: LD_EXP 22
14044: PPUSH
14045: LD_STRING 05_Givi
14047: PPUSH
14048: CALL_OW 38
// if Mike then
14052: LD_EXP 23
14056: IFFALSE 14070
// SaveCharacters ( Mike , 05_Mike ) ;
14058: LD_EXP 23
14062: PPUSH
14063: LD_STRING 05_Mike
14065: PPUSH
14066: CALL_OW 38
// if Markov then
14070: LD_EXP 28
14074: IFFALSE 14088
// SaveCharacters ( Markov , 05_Markov ) ;
14076: LD_EXP 28
14080: PPUSH
14081: LD_STRING 05_Markov
14083: PPUSH
14084: CALL_OW 38
// if Kurt then
14088: LD_EXP 32
14092: IFFALSE 14106
// SaveCharacters ( Kurt , 05_Kurt ) ;
14094: LD_EXP 32
14098: PPUSH
14099: LD_STRING 05_Kurt
14101: PPUSH
14102: CALL_OW 38
// if heikeSecondSquad then
14106: LD_EXP 34
14110: IFFALSE 14124
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14112: LD_EXP 34
14116: PPUSH
14117: LD_STRING 05_others
14119: PPUSH
14120: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14124: LD_ADDR_VAR 0 1
14128: PUSH
14129: LD_INT 22
14131: PUSH
14132: LD_INT 2
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 23
14141: PUSH
14142: LD_INT 0
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PPUSH
14153: CALL_OW 69
14157: ST_TO_ADDR
// if tmp then
14158: LD_VAR 0 1
14162: IFFALSE 14176
// SaveCharacters ( tmp , 05_apes ) ;
14164: LD_VAR 0 1
14168: PPUSH
14169: LD_STRING 05_apes
14171: PPUSH
14172: CALL_OW 38
// YouWin ;
14176: CALL_OW 103
// end ; end_of_file
14180: PPOPN 1
14182: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14183: LD_EXP 9
14187: PUSH
14188: LD_INT 13
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: CALL_OW 287
14198: PUSH
14199: LD_INT 25
14201: LESS
14202: AND
14203: IFFALSE 14230
14205: GO 14207
14207: DISABLE
// begin enable ;
14208: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14209: LD_INT 1
14211: PPUSH
14212: LD_INT 5
14214: PPUSH
14215: CALL_OW 12
14219: PPUSH
14220: LD_INT 13
14222: PPUSH
14223: LD_INT 1
14225: PPUSH
14226: CALL_OW 55
// end ; end_of_file
14230: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14231: LD_INT 0
14233: PPUSH
// ar_miner := 81 ;
14234: LD_ADDR_EXP 51
14238: PUSH
14239: LD_INT 81
14241: ST_TO_ADDR
// ar_crane := 88 ;
14242: LD_ADDR_EXP 50
14246: PUSH
14247: LD_INT 88
14249: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14250: LD_ADDR_EXP 45
14254: PUSH
14255: LD_INT 89
14257: ST_TO_ADDR
// us_hack := 99 ;
14258: LD_ADDR_EXP 46
14262: PUSH
14263: LD_INT 99
14265: ST_TO_ADDR
// us_artillery := 97 ;
14266: LD_ADDR_EXP 47
14270: PUSH
14271: LD_INT 97
14273: ST_TO_ADDR
// ar_bio_bomb := 91 ;
14274: LD_ADDR_EXP 48
14278: PUSH
14279: LD_INT 91
14281: ST_TO_ADDR
// ar_mortar := 92 ;
14282: LD_ADDR_EXP 49
14286: PUSH
14287: LD_INT 92
14289: ST_TO_ADDR
// ru_radar := 98 ;
14290: LD_ADDR_EXP 44
14294: PUSH
14295: LD_INT 98
14297: ST_TO_ADDR
// tech_Artillery := 80 ;
14298: LD_ADDR_EXP 52
14302: PUSH
14303: LD_INT 80
14305: ST_TO_ADDR
// tech_RadMat := 81 ;
14306: LD_ADDR_EXP 53
14310: PUSH
14311: LD_INT 81
14313: ST_TO_ADDR
// tech_BasicTools := 82 ;
14314: LD_ADDR_EXP 54
14318: PUSH
14319: LD_INT 82
14321: ST_TO_ADDR
// tech_Cargo := 83 ;
14322: LD_ADDR_EXP 55
14326: PUSH
14327: LD_INT 83
14329: ST_TO_ADDR
// tech_Track := 84 ;
14330: LD_ADDR_EXP 56
14334: PUSH
14335: LD_INT 84
14337: ST_TO_ADDR
// tech_Crane := 85 ;
14338: LD_ADDR_EXP 57
14342: PUSH
14343: LD_INT 85
14345: ST_TO_ADDR
// tech_Bulldozer := 86 ;
14346: LD_ADDR_EXP 58
14350: PUSH
14351: LD_INT 86
14353: ST_TO_ADDR
// tech_Hovercraft := 87 ;
14354: LD_ADDR_EXP 59
14358: PUSH
14359: LD_INT 87
14361: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
14362: LD_ADDR_EXP 60
14366: PUSH
14367: LD_INT 88
14369: ST_TO_ADDR
// class_mastodont := 31 ;
14370: LD_ADDR_EXP 61
14374: PUSH
14375: LD_INT 31
14377: ST_TO_ADDR
// class_horse := 21 ;
14378: LD_ADDR_EXP 62
14382: PUSH
14383: LD_INT 21
14385: ST_TO_ADDR
// end ;
14386: LD_VAR 0 1
14390: RET
// every 1 do
14391: GO 14393
14393: DISABLE
// InitGlobalVariables ; end_of_file
14394: CALL 14231 0 0
14398: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
14403: PPUSH
14404: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14405: LD_VAR 0 1
14409: PPUSH
14410: CALL_OW 264
14414: PUSH
14415: LD_EXP 48
14419: EQUAL
14420: IFFALSE 14492
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14422: LD_INT 68
14424: PPUSH
14425: LD_VAR 0 1
14429: PPUSH
14430: CALL_OW 255
14434: PPUSH
14435: CALL_OW 321
14439: PUSH
14440: LD_INT 2
14442: EQUAL
14443: IFFALSE 14455
// eff := 70 else
14445: LD_ADDR_VAR 0 4
14449: PUSH
14450: LD_INT 70
14452: ST_TO_ADDR
14453: GO 14463
// eff := 30 ;
14455: LD_ADDR_VAR 0 4
14459: PUSH
14460: LD_INT 30
14462: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14463: LD_VAR 0 1
14467: PPUSH
14468: CALL_OW 250
14472: PPUSH
14473: LD_VAR 0 1
14477: PPUSH
14478: CALL_OW 251
14482: PPUSH
14483: LD_VAR 0 4
14487: PPUSH
14488: CALL_OW 495
// end ; end ;
14492: LD_VAR 0 2
14496: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14497: LD_INT 0
14499: PPUSH
// end ;
14500: LD_VAR 0 4
14504: RET
// export function SOS_Command ( cmd ) ; begin
14505: LD_INT 0
14507: PPUSH
// end ;
14508: LD_VAR 0 2
14512: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14513: LD_INT 0
14515: PPUSH
// if cmd = 121 then
14516: LD_VAR 0 1
14520: PUSH
14521: LD_INT 121
14523: EQUAL
14524: IFFALSE 14526
// end ;
14526: LD_VAR 0 6
14530: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14531: LD_INT 0
14533: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14534: LD_VAR 0 1
14538: PUSH
14539: LD_INT 250
14541: EQUAL
14542: PUSH
14543: LD_VAR 0 2
14547: PPUSH
14548: CALL_OW 264
14552: PUSH
14553: LD_EXP 51
14557: EQUAL
14558: AND
14559: IFFALSE 14580
// MinerPlaceMine ( unit , x , y ) ;
14561: LD_VAR 0 2
14565: PPUSH
14566: LD_VAR 0 4
14570: PPUSH
14571: LD_VAR 0 5
14575: PPUSH
14576: CALL 16929 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14580: LD_VAR 0 1
14584: PUSH
14585: LD_INT 251
14587: EQUAL
14588: PUSH
14589: LD_VAR 0 2
14593: PPUSH
14594: CALL_OW 264
14598: PUSH
14599: LD_EXP 51
14603: EQUAL
14604: AND
14605: IFFALSE 14626
// MinerDetonateMine ( unit , x , y ) ;
14607: LD_VAR 0 2
14611: PPUSH
14612: LD_VAR 0 4
14616: PPUSH
14617: LD_VAR 0 5
14621: PPUSH
14622: CALL 17206 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14626: LD_VAR 0 1
14630: PUSH
14631: LD_INT 252
14633: EQUAL
14634: PUSH
14635: LD_VAR 0 2
14639: PPUSH
14640: CALL_OW 264
14644: PUSH
14645: LD_EXP 51
14649: EQUAL
14650: AND
14651: IFFALSE 14672
// MinerCreateMinefield ( unit , x , y ) ;
14653: LD_VAR 0 2
14657: PPUSH
14658: LD_VAR 0 4
14662: PPUSH
14663: LD_VAR 0 5
14667: PPUSH
14668: CALL 17623 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14672: LD_VAR 0 1
14676: PUSH
14677: LD_INT 253
14679: EQUAL
14680: PUSH
14681: LD_VAR 0 2
14685: PPUSH
14686: CALL_OW 257
14690: PUSH
14691: LD_INT 5
14693: EQUAL
14694: AND
14695: IFFALSE 14716
// ComBinocular ( unit , x , y ) ;
14697: LD_VAR 0 2
14701: PPUSH
14702: LD_VAR 0 4
14706: PPUSH
14707: LD_VAR 0 5
14711: PPUSH
14712: CALL 17994 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14716: LD_VAR 0 1
14720: PUSH
14721: LD_INT 254
14723: EQUAL
14724: PUSH
14725: LD_VAR 0 2
14729: PPUSH
14730: CALL_OW 264
14734: PUSH
14735: LD_EXP 46
14739: EQUAL
14740: AND
14741: PUSH
14742: LD_VAR 0 3
14746: PPUSH
14747: CALL_OW 263
14751: PUSH
14752: LD_INT 3
14754: EQUAL
14755: AND
14756: IFFALSE 14772
// HackDestroyVehicle ( unit , selectedUnit ) ;
14758: LD_VAR 0 2
14762: PPUSH
14763: LD_VAR 0 3
14767: PPUSH
14768: CALL 16289 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14772: LD_VAR 0 1
14776: PUSH
14777: LD_INT 255
14779: EQUAL
14780: PUSH
14781: LD_VAR 0 2
14785: PPUSH
14786: CALL_OW 264
14790: PUSH
14791: LD_INT 14
14793: PUSH
14794: LD_INT 53
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: IN
14801: AND
14802: PUSH
14803: LD_VAR 0 4
14807: PPUSH
14808: LD_VAR 0 5
14812: PPUSH
14813: CALL_OW 488
14817: AND
14818: IFFALSE 14842
// CutTreeXYR ( unit , x , y , 12 ) ;
14820: LD_VAR 0 2
14824: PPUSH
14825: LD_VAR 0 4
14829: PPUSH
14830: LD_VAR 0 5
14834: PPUSH
14835: LD_INT 12
14837: PPUSH
14838: CALL 14855 0 4
// end ;
14842: LD_VAR 0 6
14846: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
14847: LD_INT 0
14849: PPUSH
// end ;
14850: LD_VAR 0 4
14854: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14855: LD_INT 0
14857: PPUSH
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14866: LD_VAR 0 1
14870: NOT
14871: PUSH
14872: LD_VAR 0 2
14876: PPUSH
14877: LD_VAR 0 3
14881: PPUSH
14882: CALL_OW 488
14886: NOT
14887: OR
14888: PUSH
14889: LD_VAR 0 4
14893: NOT
14894: OR
14895: IFFALSE 14899
// exit ;
14897: GO 15239
// list := [ ] ;
14899: LD_ADDR_VAR 0 13
14903: PUSH
14904: EMPTY
14905: ST_TO_ADDR
// if x - r < 0 then
14906: LD_VAR 0 2
14910: PUSH
14911: LD_VAR 0 4
14915: MINUS
14916: PUSH
14917: LD_INT 0
14919: LESS
14920: IFFALSE 14932
// min_x := 0 else
14922: LD_ADDR_VAR 0 7
14926: PUSH
14927: LD_INT 0
14929: ST_TO_ADDR
14930: GO 14948
// min_x := x - r ;
14932: LD_ADDR_VAR 0 7
14936: PUSH
14937: LD_VAR 0 2
14941: PUSH
14942: LD_VAR 0 4
14946: MINUS
14947: ST_TO_ADDR
// if y - r < 0 then
14948: LD_VAR 0 3
14952: PUSH
14953: LD_VAR 0 4
14957: MINUS
14958: PUSH
14959: LD_INT 0
14961: LESS
14962: IFFALSE 14974
// min_y := 0 else
14964: LD_ADDR_VAR 0 8
14968: PUSH
14969: LD_INT 0
14971: ST_TO_ADDR
14972: GO 14990
// min_y := y - r ;
14974: LD_ADDR_VAR 0 8
14978: PUSH
14979: LD_VAR 0 3
14983: PUSH
14984: LD_VAR 0 4
14988: MINUS
14989: ST_TO_ADDR
// max_x := x + r ;
14990: LD_ADDR_VAR 0 9
14994: PUSH
14995: LD_VAR 0 2
14999: PUSH
15000: LD_VAR 0 4
15004: PLUS
15005: ST_TO_ADDR
// max_y := y + r ;
15006: LD_ADDR_VAR 0 10
15010: PUSH
15011: LD_VAR 0 3
15015: PUSH
15016: LD_VAR 0 4
15020: PLUS
15021: ST_TO_ADDR
// for _x = min_x to max_x do
15022: LD_ADDR_VAR 0 11
15026: PUSH
15027: DOUBLE
15028: LD_VAR 0 7
15032: DEC
15033: ST_TO_ADDR
15034: LD_VAR 0 9
15038: PUSH
15039: FOR_TO
15040: IFFALSE 15157
// for _y = min_y to max_y do
15042: LD_ADDR_VAR 0 12
15046: PUSH
15047: DOUBLE
15048: LD_VAR 0 8
15052: DEC
15053: ST_TO_ADDR
15054: LD_VAR 0 10
15058: PUSH
15059: FOR_TO
15060: IFFALSE 15153
// begin if not ValidHex ( _x , _y ) then
15062: LD_VAR 0 11
15066: PPUSH
15067: LD_VAR 0 12
15071: PPUSH
15072: CALL_OW 488
15076: NOT
15077: IFFALSE 15081
// continue ;
15079: GO 15059
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15081: LD_VAR 0 11
15085: PPUSH
15086: LD_VAR 0 12
15090: PPUSH
15091: CALL_OW 351
15095: PUSH
15096: LD_VAR 0 11
15100: PPUSH
15101: LD_VAR 0 12
15105: PPUSH
15106: CALL_OW 554
15110: AND
15111: IFFALSE 15151
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15113: LD_ADDR_VAR 0 13
15117: PUSH
15118: LD_VAR 0 13
15122: PPUSH
15123: LD_VAR 0 13
15127: PUSH
15128: LD_INT 1
15130: PLUS
15131: PPUSH
15132: LD_VAR 0 11
15136: PUSH
15137: LD_VAR 0 12
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 2
15150: ST_TO_ADDR
// end ;
15151: GO 15059
15153: POP
15154: POP
15155: GO 15039
15157: POP
15158: POP
// if not list then
15159: LD_VAR 0 13
15163: NOT
15164: IFFALSE 15168
// exit ;
15166: GO 15239
// for i in list do
15168: LD_ADDR_VAR 0 6
15172: PUSH
15173: LD_VAR 0 13
15177: PUSH
15178: FOR_IN
15179: IFFALSE 15237
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15181: LD_VAR 0 1
15185: PPUSH
15186: LD_STRING M
15188: PUSH
15189: LD_VAR 0 6
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PUSH
15198: LD_VAR 0 6
15202: PUSH
15203: LD_INT 2
15205: ARRAY
15206: PUSH
15207: LD_INT 0
15209: PUSH
15210: LD_INT 0
15212: PUSH
15213: LD_INT 0
15215: PUSH
15216: LD_INT 0
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: PUSH
15228: EMPTY
15229: LIST
15230: PPUSH
15231: CALL_OW 447
15235: GO 15178
15237: POP
15238: POP
// end ;
15239: LD_VAR 0 5
15243: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15244: LD_EXP 65
15248: NOT
15249: IFFALSE 15299
15251: GO 15253
15253: DISABLE
// begin initHack := true ;
15254: LD_ADDR_EXP 65
15258: PUSH
15259: LD_INT 1
15261: ST_TO_ADDR
// hackTanks := [ ] ;
15262: LD_ADDR_EXP 66
15266: PUSH
15267: EMPTY
15268: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15269: LD_ADDR_EXP 67
15273: PUSH
15274: EMPTY
15275: ST_TO_ADDR
// hackLimit := 3 ;
15276: LD_ADDR_EXP 68
15280: PUSH
15281: LD_INT 3
15283: ST_TO_ADDR
// hackDist := 12 ;
15284: LD_ADDR_EXP 69
15288: PUSH
15289: LD_INT 12
15291: ST_TO_ADDR
// hackCounter := [ ] ;
15292: LD_ADDR_EXP 70
15296: PUSH
15297: EMPTY
15298: ST_TO_ADDR
// end ;
15299: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15300: LD_EXP 65
15304: PUSH
15305: LD_INT 34
15307: PUSH
15308: LD_EXP 46
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PPUSH
15317: CALL_OW 69
15321: AND
15322: IFFALSE 15577
15324: GO 15326
15326: DISABLE
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
// begin enable ;
15331: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15332: LD_ADDR_VAR 0 1
15336: PUSH
15337: LD_INT 34
15339: PUSH
15340: LD_EXP 46
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PPUSH
15349: CALL_OW 69
15353: PUSH
15354: FOR_IN
15355: IFFALSE 15575
// begin if not i in hackTanks then
15357: LD_VAR 0 1
15361: PUSH
15362: LD_EXP 66
15366: IN
15367: NOT
15368: IFFALSE 15451
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15370: LD_ADDR_EXP 66
15374: PUSH
15375: LD_EXP 66
15379: PPUSH
15380: LD_EXP 66
15384: PUSH
15385: LD_INT 1
15387: PLUS
15388: PPUSH
15389: LD_VAR 0 1
15393: PPUSH
15394: CALL_OW 1
15398: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15399: LD_ADDR_EXP 67
15403: PUSH
15404: LD_EXP 67
15408: PPUSH
15409: LD_EXP 67
15413: PUSH
15414: LD_INT 1
15416: PLUS
15417: PPUSH
15418: EMPTY
15419: PPUSH
15420: CALL_OW 1
15424: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15425: LD_ADDR_EXP 70
15429: PUSH
15430: LD_EXP 70
15434: PPUSH
15435: LD_EXP 70
15439: PUSH
15440: LD_INT 1
15442: PLUS
15443: PPUSH
15444: EMPTY
15445: PPUSH
15446: CALL_OW 1
15450: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15451: LD_VAR 0 1
15455: PPUSH
15456: CALL_OW 302
15460: NOT
15461: IFFALSE 15474
// begin HackUnlinkAll ( i ) ;
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL 15580 0 1
// continue ;
15472: GO 15354
// end ; HackCheckCapturedStatus ( i ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL 16023 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: LD_INT 81
15490: PUSH
15491: LD_VAR 0 1
15495: PPUSH
15496: CALL_OW 255
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 33
15507: PUSH
15508: LD_INT 3
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 91
15517: PUSH
15518: LD_VAR 0 1
15522: PUSH
15523: LD_EXP 69
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 50
15535: PUSH
15536: EMPTY
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: PPUSH
15545: CALL_OW 69
15549: ST_TO_ADDR
// if not tmp then
15550: LD_VAR 0 2
15554: NOT
15555: IFFALSE 15559
// continue ;
15557: GO 15354
// HackLink ( i , tmp ) ;
15559: LD_VAR 0 1
15563: PPUSH
15564: LD_VAR 0 2
15568: PPUSH
15569: CALL 15716 0 2
// end ;
15573: GO 15354
15575: POP
15576: POP
// end ;
15577: PPOPN 2
15579: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15580: LD_INT 0
15582: PPUSH
15583: PPUSH
15584: PPUSH
// if not hack in hackTanks then
15585: LD_VAR 0 1
15589: PUSH
15590: LD_EXP 66
15594: IN
15595: NOT
15596: IFFALSE 15600
// exit ;
15598: GO 15711
// index := GetElementIndex ( hackTanks , hack ) ;
15600: LD_ADDR_VAR 0 4
15604: PUSH
15605: LD_EXP 66
15609: PPUSH
15610: LD_VAR 0 1
15614: PPUSH
15615: CALL 36357 0 2
15619: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15620: LD_EXP 67
15624: PUSH
15625: LD_VAR 0 4
15629: ARRAY
15630: IFFALSE 15711
// begin for i in hackTanksCaptured [ index ] do
15632: LD_ADDR_VAR 0 3
15636: PUSH
15637: LD_EXP 67
15641: PUSH
15642: LD_VAR 0 4
15646: ARRAY
15647: PUSH
15648: FOR_IN
15649: IFFALSE 15675
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15651: LD_VAR 0 3
15655: PUSH
15656: LD_INT 1
15658: ARRAY
15659: PPUSH
15660: LD_VAR 0 3
15664: PUSH
15665: LD_INT 2
15667: ARRAY
15668: PPUSH
15669: CALL_OW 235
15673: GO 15648
15675: POP
15676: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15677: LD_ADDR_EXP 67
15681: PUSH
15682: LD_EXP 67
15686: PPUSH
15687: LD_VAR 0 4
15691: PPUSH
15692: EMPTY
15693: PPUSH
15694: CALL_OW 1
15698: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 505
// end ; end ;
15711: LD_VAR 0 2
15715: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15716: LD_INT 0
15718: PPUSH
15719: PPUSH
15720: PPUSH
// if not hack in hackTanks or not vehicles then
15721: LD_VAR 0 1
15725: PUSH
15726: LD_EXP 66
15730: IN
15731: NOT
15732: PUSH
15733: LD_VAR 0 2
15737: NOT
15738: OR
15739: IFFALSE 15743
// exit ;
15741: GO 16018
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15743: LD_ADDR_VAR 0 2
15747: PUSH
15748: LD_VAR 0 1
15752: PPUSH
15753: LD_VAR 0 2
15757: PPUSH
15758: LD_INT 1
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL 37007 0 4
15768: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15769: LD_ADDR_VAR 0 5
15773: PUSH
15774: LD_EXP 66
15778: PPUSH
15779: LD_VAR 0 1
15783: PPUSH
15784: CALL 36357 0 2
15788: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15789: LD_EXP 67
15793: PUSH
15794: LD_VAR 0 5
15798: ARRAY
15799: PUSH
15800: LD_EXP 68
15804: LESS
15805: IFFALSE 15994
// begin for i := 1 to vehicles do
15807: LD_ADDR_VAR 0 4
15811: PUSH
15812: DOUBLE
15813: LD_INT 1
15815: DEC
15816: ST_TO_ADDR
15817: LD_VAR 0 2
15821: PUSH
15822: FOR_TO
15823: IFFALSE 15992
// begin if hackTanksCaptured [ index ] = hackLimit then
15825: LD_EXP 67
15829: PUSH
15830: LD_VAR 0 5
15834: ARRAY
15835: PUSH
15836: LD_EXP 68
15840: EQUAL
15841: IFFALSE 15845
// break ;
15843: GO 15992
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15845: LD_ADDR_EXP 70
15849: PUSH
15850: LD_EXP 70
15854: PPUSH
15855: LD_VAR 0 5
15859: PPUSH
15860: LD_EXP 70
15864: PUSH
15865: LD_VAR 0 5
15869: ARRAY
15870: PUSH
15871: LD_INT 1
15873: PLUS
15874: PPUSH
15875: CALL_OW 1
15879: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15880: LD_ADDR_EXP 67
15884: PUSH
15885: LD_EXP 67
15889: PPUSH
15890: LD_VAR 0 5
15894: PUSH
15895: LD_EXP 67
15899: PUSH
15900: LD_VAR 0 5
15904: ARRAY
15905: PUSH
15906: LD_INT 1
15908: PLUS
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: LD_VAR 0 2
15918: PUSH
15919: LD_VAR 0 4
15923: ARRAY
15924: PUSH
15925: LD_VAR 0 2
15929: PUSH
15930: LD_VAR 0 4
15934: ARRAY
15935: PPUSH
15936: CALL_OW 255
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PPUSH
15945: CALL 36572 0 3
15949: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15950: LD_VAR 0 2
15954: PUSH
15955: LD_VAR 0 4
15959: ARRAY
15960: PPUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 255
15970: PPUSH
15971: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15975: LD_VAR 0 2
15979: PUSH
15980: LD_VAR 0 4
15984: ARRAY
15985: PPUSH
15986: CALL_OW 141
// end ;
15990: GO 15822
15992: POP
15993: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15994: LD_VAR 0 1
15998: PPUSH
15999: LD_EXP 67
16003: PUSH
16004: LD_VAR 0 5
16008: ARRAY
16009: PUSH
16010: LD_INT 0
16012: PLUS
16013: PPUSH
16014: CALL_OW 505
// end ;
16018: LD_VAR 0 3
16022: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16023: LD_INT 0
16025: PPUSH
16026: PPUSH
16027: PPUSH
16028: PPUSH
// if not hack in hackTanks then
16029: LD_VAR 0 1
16033: PUSH
16034: LD_EXP 66
16038: IN
16039: NOT
16040: IFFALSE 16044
// exit ;
16042: GO 16284
// index := GetElementIndex ( hackTanks , hack ) ;
16044: LD_ADDR_VAR 0 4
16048: PUSH
16049: LD_EXP 66
16053: PPUSH
16054: LD_VAR 0 1
16058: PPUSH
16059: CALL 36357 0 2
16063: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16064: LD_ADDR_VAR 0 3
16068: PUSH
16069: DOUBLE
16070: LD_EXP 67
16074: PUSH
16075: LD_VAR 0 4
16079: ARRAY
16080: INC
16081: ST_TO_ADDR
16082: LD_INT 1
16084: PUSH
16085: FOR_DOWNTO
16086: IFFALSE 16258
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16088: LD_ADDR_VAR 0 5
16092: PUSH
16093: LD_EXP 67
16097: PUSH
16098: LD_VAR 0 4
16102: ARRAY
16103: PUSH
16104: LD_VAR 0 3
16108: ARRAY
16109: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16110: LD_VAR 0 5
16114: PUSH
16115: LD_INT 1
16117: ARRAY
16118: PPUSH
16119: CALL_OW 302
16123: NOT
16124: PUSH
16125: LD_VAR 0 5
16129: PUSH
16130: LD_INT 1
16132: ARRAY
16133: PPUSH
16134: CALL_OW 255
16138: PUSH
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 255
16148: NONEQUAL
16149: OR
16150: IFFALSE 16256
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16152: LD_VAR 0 5
16156: PUSH
16157: LD_INT 1
16159: ARRAY
16160: PPUSH
16161: CALL_OW 305
16165: PUSH
16166: LD_VAR 0 5
16170: PUSH
16171: LD_INT 1
16173: ARRAY
16174: PPUSH
16175: CALL_OW 255
16179: PUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: CALL_OW 255
16189: EQUAL
16190: AND
16191: IFFALSE 16215
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16193: LD_VAR 0 5
16197: PUSH
16198: LD_INT 1
16200: ARRAY
16201: PPUSH
16202: LD_VAR 0 5
16206: PUSH
16207: LD_INT 2
16209: ARRAY
16210: PPUSH
16211: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16215: LD_ADDR_EXP 67
16219: PUSH
16220: LD_EXP 67
16224: PPUSH
16225: LD_VAR 0 4
16229: PPUSH
16230: LD_EXP 67
16234: PUSH
16235: LD_VAR 0 4
16239: ARRAY
16240: PPUSH
16241: LD_VAR 0 3
16245: PPUSH
16246: CALL_OW 3
16250: PPUSH
16251: CALL_OW 1
16255: ST_TO_ADDR
// end ; end ;
16256: GO 16085
16258: POP
16259: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16260: LD_VAR 0 1
16264: PPUSH
16265: LD_EXP 67
16269: PUSH
16270: LD_VAR 0 4
16274: ARRAY
16275: PUSH
16276: LD_INT 0
16278: PLUS
16279: PPUSH
16280: CALL_OW 505
// end ;
16284: LD_VAR 0 2
16288: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16289: LD_INT 0
16291: PPUSH
16292: PPUSH
16293: PPUSH
16294: PPUSH
// if not hack in hackTanks then
16295: LD_VAR 0 1
16299: PUSH
16300: LD_EXP 66
16304: IN
16305: NOT
16306: IFFALSE 16310
// exit ;
16308: GO 16395
// index := GetElementIndex ( hackTanks , hack ) ;
16310: LD_ADDR_VAR 0 5
16314: PUSH
16315: LD_EXP 66
16319: PPUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL 36357 0 2
16329: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16330: LD_ADDR_VAR 0 4
16334: PUSH
16335: DOUBLE
16336: LD_INT 1
16338: DEC
16339: ST_TO_ADDR
16340: LD_EXP 67
16344: PUSH
16345: LD_VAR 0 5
16349: ARRAY
16350: PUSH
16351: FOR_TO
16352: IFFALSE 16393
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16354: LD_EXP 67
16358: PUSH
16359: LD_VAR 0 5
16363: ARRAY
16364: PUSH
16365: LD_VAR 0 4
16369: ARRAY
16370: PUSH
16371: LD_INT 1
16373: ARRAY
16374: PUSH
16375: LD_VAR 0 2
16379: EQUAL
16380: IFFALSE 16391
// KillUnit ( vehicle ) ;
16382: LD_VAR 0 2
16386: PPUSH
16387: CALL_OW 66
16391: GO 16351
16393: POP
16394: POP
// end ;
16395: LD_VAR 0 3
16399: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16400: LD_EXP 71
16404: NOT
16405: IFFALSE 16440
16407: GO 16409
16409: DISABLE
// begin initMiner := true ;
16410: LD_ADDR_EXP 71
16414: PUSH
16415: LD_INT 1
16417: ST_TO_ADDR
// minersList := [ ] ;
16418: LD_ADDR_EXP 72
16422: PUSH
16423: EMPTY
16424: ST_TO_ADDR
// minerMinesList := [ ] ;
16425: LD_ADDR_EXP 73
16429: PUSH
16430: EMPTY
16431: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16432: LD_ADDR_EXP 74
16436: PUSH
16437: LD_INT 5
16439: ST_TO_ADDR
// end ;
16440: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16441: LD_EXP 71
16445: PUSH
16446: LD_INT 34
16448: PUSH
16449: LD_EXP 51
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PPUSH
16458: CALL_OW 69
16462: AND
16463: IFFALSE 16926
16465: GO 16467
16467: DISABLE
16468: LD_INT 0
16470: PPUSH
16471: PPUSH
16472: PPUSH
16473: PPUSH
// begin enable ;
16474: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16475: LD_ADDR_VAR 0 1
16479: PUSH
16480: LD_INT 34
16482: PUSH
16483: LD_EXP 51
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: PUSH
16497: FOR_IN
16498: IFFALSE 16570
// begin if not i in minersList then
16500: LD_VAR 0 1
16504: PUSH
16505: LD_EXP 72
16509: IN
16510: NOT
16511: IFFALSE 16568
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16513: LD_ADDR_EXP 72
16517: PUSH
16518: LD_EXP 72
16522: PPUSH
16523: LD_EXP 72
16527: PUSH
16528: LD_INT 1
16530: PLUS
16531: PPUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 1
16541: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16542: LD_ADDR_EXP 73
16546: PUSH
16547: LD_EXP 73
16551: PPUSH
16552: LD_EXP 73
16556: PUSH
16557: LD_INT 1
16559: PLUS
16560: PPUSH
16561: EMPTY
16562: PPUSH
16563: CALL_OW 1
16567: ST_TO_ADDR
// end end ;
16568: GO 16497
16570: POP
16571: POP
// for i := minerMinesList downto 1 do
16572: LD_ADDR_VAR 0 1
16576: PUSH
16577: DOUBLE
16578: LD_EXP 73
16582: INC
16583: ST_TO_ADDR
16584: LD_INT 1
16586: PUSH
16587: FOR_DOWNTO
16588: IFFALSE 16924
// begin if IsLive ( minersList [ i ] ) then
16590: LD_EXP 72
16594: PUSH
16595: LD_VAR 0 1
16599: ARRAY
16600: PPUSH
16601: CALL_OW 300
16605: IFFALSE 16633
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16607: LD_EXP 72
16611: PUSH
16612: LD_VAR 0 1
16616: ARRAY
16617: PPUSH
16618: LD_EXP 73
16622: PUSH
16623: LD_VAR 0 1
16627: ARRAY
16628: PPUSH
16629: CALL_OW 505
// if not minerMinesList [ i ] then
16633: LD_EXP 73
16637: PUSH
16638: LD_VAR 0 1
16642: ARRAY
16643: NOT
16644: IFFALSE 16648
// continue ;
16646: GO 16587
// for j := minerMinesList [ i ] downto 1 do
16648: LD_ADDR_VAR 0 2
16652: PUSH
16653: DOUBLE
16654: LD_EXP 73
16658: PUSH
16659: LD_VAR 0 1
16663: ARRAY
16664: INC
16665: ST_TO_ADDR
16666: LD_INT 1
16668: PUSH
16669: FOR_DOWNTO
16670: IFFALSE 16920
// begin side := GetSide ( minersList [ i ] ) ;
16672: LD_ADDR_VAR 0 3
16676: PUSH
16677: LD_EXP 72
16681: PUSH
16682: LD_VAR 0 1
16686: ARRAY
16687: PPUSH
16688: CALL_OW 255
16692: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16693: LD_ADDR_VAR 0 4
16697: PUSH
16698: LD_EXP 73
16702: PUSH
16703: LD_VAR 0 1
16707: ARRAY
16708: PUSH
16709: LD_VAR 0 2
16713: ARRAY
16714: PUSH
16715: LD_INT 1
16717: ARRAY
16718: PPUSH
16719: LD_EXP 73
16723: PUSH
16724: LD_VAR 0 1
16728: ARRAY
16729: PUSH
16730: LD_VAR 0 2
16734: ARRAY
16735: PUSH
16736: LD_INT 2
16738: ARRAY
16739: PPUSH
16740: CALL_OW 428
16744: ST_TO_ADDR
// if not tmp then
16745: LD_VAR 0 4
16749: NOT
16750: IFFALSE 16754
// continue ;
16752: GO 16669
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16754: LD_VAR 0 4
16758: PUSH
16759: LD_INT 81
16761: PUSH
16762: LD_VAR 0 3
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PPUSH
16771: CALL_OW 69
16775: IN
16776: PUSH
16777: LD_EXP 73
16781: PUSH
16782: LD_VAR 0 1
16786: ARRAY
16787: PUSH
16788: LD_VAR 0 2
16792: ARRAY
16793: PUSH
16794: LD_INT 1
16796: ARRAY
16797: PPUSH
16798: LD_EXP 73
16802: PUSH
16803: LD_VAR 0 1
16807: ARRAY
16808: PUSH
16809: LD_VAR 0 2
16813: ARRAY
16814: PUSH
16815: LD_INT 2
16817: ARRAY
16818: PPUSH
16819: CALL_OW 458
16823: AND
16824: IFFALSE 16918
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16826: LD_EXP 73
16830: PUSH
16831: LD_VAR 0 1
16835: ARRAY
16836: PUSH
16837: LD_VAR 0 2
16841: ARRAY
16842: PUSH
16843: LD_INT 1
16845: ARRAY
16846: PPUSH
16847: LD_EXP 73
16851: PUSH
16852: LD_VAR 0 1
16856: ARRAY
16857: PUSH
16858: LD_VAR 0 2
16862: ARRAY
16863: PUSH
16864: LD_INT 2
16866: ARRAY
16867: PPUSH
16868: LD_VAR 0 3
16872: PPUSH
16873: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16877: LD_ADDR_EXP 73
16881: PUSH
16882: LD_EXP 73
16886: PPUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: LD_EXP 73
16896: PUSH
16897: LD_VAR 0 1
16901: ARRAY
16902: PPUSH
16903: LD_VAR 0 2
16907: PPUSH
16908: CALL_OW 3
16912: PPUSH
16913: CALL_OW 1
16917: ST_TO_ADDR
// end ; end ;
16918: GO 16669
16920: POP
16921: POP
// end ;
16922: GO 16587
16924: POP
16925: POP
// end ;
16926: PPOPN 4
16928: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
16929: LD_INT 0
16931: PPUSH
16932: PPUSH
// result := false ;
16933: LD_ADDR_VAR 0 4
16937: PUSH
16938: LD_INT 0
16940: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
16941: LD_VAR 0 1
16945: PPUSH
16946: CALL_OW 264
16950: PUSH
16951: LD_EXP 51
16955: EQUAL
16956: NOT
16957: IFFALSE 16961
// exit ;
16959: GO 17201
// index := GetElementIndex ( minersList , unit ) ;
16961: LD_ADDR_VAR 0 5
16965: PUSH
16966: LD_EXP 72
16970: PPUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: CALL 36357 0 2
16980: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16981: LD_EXP 73
16985: PUSH
16986: LD_VAR 0 5
16990: ARRAY
16991: PUSH
16992: LD_EXP 74
16996: GREATEREQUAL
16997: IFFALSE 17001
// exit ;
16999: GO 17201
// ComMoveXY ( unit , x , y ) ;
17001: LD_VAR 0 1
17005: PPUSH
17006: LD_VAR 0 2
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17020: LD_INT 35
17022: PPUSH
17023: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17027: LD_VAR 0 1
17031: PPUSH
17032: LD_VAR 0 2
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: CALL 67129 0 3
17046: NOT
17047: PUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: CALL_OW 314
17057: AND
17058: IFFALSE 17062
// exit ;
17060: GO 17201
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17062: LD_VAR 0 2
17066: PPUSH
17067: LD_VAR 0 3
17071: PPUSH
17072: CALL_OW 428
17076: PUSH
17077: LD_VAR 0 1
17081: EQUAL
17082: PUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: CALL_OW 314
17092: NOT
17093: AND
17094: IFFALSE 17020
// PlaySoundXY ( x , y , PlantMine ) ;
17096: LD_VAR 0 2
17100: PPUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: LD_STRING PlantMine
17108: PPUSH
17109: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17113: LD_VAR 0 2
17117: PPUSH
17118: LD_VAR 0 3
17122: PPUSH
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 255
17132: PPUSH
17133: LD_INT 0
17135: PPUSH
17136: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17140: LD_ADDR_EXP 73
17144: PUSH
17145: LD_EXP 73
17149: PPUSH
17150: LD_VAR 0 5
17154: PUSH
17155: LD_EXP 73
17159: PUSH
17160: LD_VAR 0 5
17164: ARRAY
17165: PUSH
17166: LD_INT 1
17168: PLUS
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PPUSH
17174: LD_VAR 0 2
17178: PUSH
17179: LD_VAR 0 3
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PPUSH
17188: CALL 36572 0 3
17192: ST_TO_ADDR
// result := true ;
17193: LD_ADDR_VAR 0 4
17197: PUSH
17198: LD_INT 1
17200: ST_TO_ADDR
// end ;
17201: LD_VAR 0 4
17205: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17206: LD_INT 0
17208: PPUSH
17209: PPUSH
17210: PPUSH
// if not unit in minersList then
17211: LD_VAR 0 1
17215: PUSH
17216: LD_EXP 72
17220: IN
17221: NOT
17222: IFFALSE 17226
// exit ;
17224: GO 17618
// index := GetElementIndex ( minersList , unit ) ;
17226: LD_ADDR_VAR 0 6
17230: PUSH
17231: LD_EXP 72
17235: PPUSH
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL 36357 0 2
17245: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17246: LD_ADDR_VAR 0 5
17250: PUSH
17251: DOUBLE
17252: LD_EXP 73
17256: PUSH
17257: LD_VAR 0 6
17261: ARRAY
17262: INC
17263: ST_TO_ADDR
17264: LD_INT 1
17266: PUSH
17267: FOR_DOWNTO
17268: IFFALSE 17429
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17270: LD_EXP 73
17274: PUSH
17275: LD_VAR 0 6
17279: ARRAY
17280: PUSH
17281: LD_VAR 0 5
17285: ARRAY
17286: PUSH
17287: LD_INT 1
17289: ARRAY
17290: PUSH
17291: LD_VAR 0 2
17295: EQUAL
17296: PUSH
17297: LD_EXP 73
17301: PUSH
17302: LD_VAR 0 6
17306: ARRAY
17307: PUSH
17308: LD_VAR 0 5
17312: ARRAY
17313: PUSH
17314: LD_INT 2
17316: ARRAY
17317: PUSH
17318: LD_VAR 0 3
17322: EQUAL
17323: AND
17324: IFFALSE 17427
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17326: LD_EXP 73
17330: PUSH
17331: LD_VAR 0 6
17335: ARRAY
17336: PUSH
17337: LD_VAR 0 5
17341: ARRAY
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: PPUSH
17347: LD_EXP 73
17351: PUSH
17352: LD_VAR 0 6
17356: ARRAY
17357: PUSH
17358: LD_VAR 0 5
17362: ARRAY
17363: PUSH
17364: LD_INT 2
17366: ARRAY
17367: PPUSH
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 255
17377: PPUSH
17378: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17382: LD_ADDR_EXP 73
17386: PUSH
17387: LD_EXP 73
17391: PPUSH
17392: LD_VAR 0 6
17396: PPUSH
17397: LD_EXP 73
17401: PUSH
17402: LD_VAR 0 6
17406: ARRAY
17407: PPUSH
17408: LD_VAR 0 5
17412: PPUSH
17413: CALL_OW 3
17417: PPUSH
17418: CALL_OW 1
17422: ST_TO_ADDR
// exit ;
17423: POP
17424: POP
17425: GO 17618
// end ; end ;
17427: GO 17267
17429: POP
17430: POP
// for i := minerMinesList [ index ] downto 1 do
17431: LD_ADDR_VAR 0 5
17435: PUSH
17436: DOUBLE
17437: LD_EXP 73
17441: PUSH
17442: LD_VAR 0 6
17446: ARRAY
17447: INC
17448: ST_TO_ADDR
17449: LD_INT 1
17451: PUSH
17452: FOR_DOWNTO
17453: IFFALSE 17616
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17455: LD_EXP 73
17459: PUSH
17460: LD_VAR 0 6
17464: ARRAY
17465: PUSH
17466: LD_VAR 0 5
17470: ARRAY
17471: PUSH
17472: LD_INT 1
17474: ARRAY
17475: PPUSH
17476: LD_EXP 73
17480: PUSH
17481: LD_VAR 0 6
17485: ARRAY
17486: PUSH
17487: LD_VAR 0 5
17491: ARRAY
17492: PUSH
17493: LD_INT 2
17495: ARRAY
17496: PPUSH
17497: LD_VAR 0 2
17501: PPUSH
17502: LD_VAR 0 3
17506: PPUSH
17507: CALL_OW 298
17511: PUSH
17512: LD_INT 6
17514: LESS
17515: IFFALSE 17614
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17517: LD_EXP 73
17521: PUSH
17522: LD_VAR 0 6
17526: ARRAY
17527: PUSH
17528: LD_VAR 0 5
17532: ARRAY
17533: PUSH
17534: LD_INT 1
17536: ARRAY
17537: PPUSH
17538: LD_EXP 73
17542: PUSH
17543: LD_VAR 0 6
17547: ARRAY
17548: PUSH
17549: LD_VAR 0 5
17553: ARRAY
17554: PUSH
17555: LD_INT 2
17557: ARRAY
17558: PPUSH
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 255
17568: PPUSH
17569: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17573: LD_ADDR_EXP 73
17577: PUSH
17578: LD_EXP 73
17582: PPUSH
17583: LD_VAR 0 6
17587: PPUSH
17588: LD_EXP 73
17592: PUSH
17593: LD_VAR 0 6
17597: ARRAY
17598: PPUSH
17599: LD_VAR 0 5
17603: PPUSH
17604: CALL_OW 3
17608: PPUSH
17609: CALL_OW 1
17613: ST_TO_ADDR
// end ; end ;
17614: GO 17452
17616: POP
17617: POP
// end ;
17618: LD_VAR 0 4
17622: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17623: LD_INT 0
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 264
17643: PUSH
17644: LD_EXP 51
17648: EQUAL
17649: NOT
17650: PUSH
17651: LD_VAR 0 1
17655: PUSH
17656: LD_EXP 72
17660: IN
17661: NOT
17662: OR
17663: IFFALSE 17667
// exit ;
17665: GO 17989
// index := GetElementIndex ( minersList , unit ) ;
17667: LD_ADDR_VAR 0 6
17671: PUSH
17672: LD_EXP 72
17676: PPUSH
17677: LD_VAR 0 1
17681: PPUSH
17682: CALL 36357 0 2
17686: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17687: LD_ADDR_VAR 0 8
17691: PUSH
17692: LD_EXP 74
17696: PUSH
17697: LD_EXP 73
17701: PUSH
17702: LD_VAR 0 6
17706: ARRAY
17707: MINUS
17708: ST_TO_ADDR
// if not minesFreeAmount then
17709: LD_VAR 0 8
17713: NOT
17714: IFFALSE 17718
// exit ;
17716: GO 17989
// tmp := [ ] ;
17718: LD_ADDR_VAR 0 7
17722: PUSH
17723: EMPTY
17724: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17725: LD_ADDR_VAR 0 5
17729: PUSH
17730: DOUBLE
17731: LD_INT 1
17733: DEC
17734: ST_TO_ADDR
17735: LD_VAR 0 8
17739: PUSH
17740: FOR_TO
17741: IFFALSE 17936
// begin _d := rand ( 0 , 5 ) ;
17743: LD_ADDR_VAR 0 11
17747: PUSH
17748: LD_INT 0
17750: PPUSH
17751: LD_INT 5
17753: PPUSH
17754: CALL_OW 12
17758: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17759: LD_ADDR_VAR 0 12
17763: PUSH
17764: LD_INT 2
17766: PPUSH
17767: LD_INT 6
17769: PPUSH
17770: CALL_OW 12
17774: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17775: LD_ADDR_VAR 0 9
17779: PUSH
17780: LD_VAR 0 2
17784: PPUSH
17785: LD_VAR 0 11
17789: PPUSH
17790: LD_VAR 0 12
17794: PPUSH
17795: CALL_OW 272
17799: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17800: LD_ADDR_VAR 0 10
17804: PUSH
17805: LD_VAR 0 3
17809: PPUSH
17810: LD_VAR 0 11
17814: PPUSH
17815: LD_VAR 0 12
17819: PPUSH
17820: CALL_OW 273
17824: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17825: LD_VAR 0 9
17829: PPUSH
17830: LD_VAR 0 10
17834: PPUSH
17835: CALL_OW 488
17839: PUSH
17840: LD_VAR 0 9
17844: PUSH
17845: LD_VAR 0 10
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_VAR 0 7
17858: IN
17859: NOT
17860: AND
17861: PUSH
17862: LD_VAR 0 9
17866: PPUSH
17867: LD_VAR 0 10
17871: PPUSH
17872: CALL_OW 458
17876: NOT
17877: AND
17878: IFFALSE 17920
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17880: LD_ADDR_VAR 0 7
17884: PUSH
17885: LD_VAR 0 7
17889: PPUSH
17890: LD_VAR 0 7
17894: PUSH
17895: LD_INT 1
17897: PLUS
17898: PPUSH
17899: LD_VAR 0 9
17903: PUSH
17904: LD_VAR 0 10
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PPUSH
17913: CALL_OW 1
17917: ST_TO_ADDR
17918: GO 17934
// i := i - 1 ;
17920: LD_ADDR_VAR 0 5
17924: PUSH
17925: LD_VAR 0 5
17929: PUSH
17930: LD_INT 1
17932: MINUS
17933: ST_TO_ADDR
// end ;
17934: GO 17740
17936: POP
17937: POP
// for i in tmp do
17938: LD_ADDR_VAR 0 5
17942: PUSH
17943: LD_VAR 0 7
17947: PUSH
17948: FOR_IN
17949: IFFALSE 17987
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17951: LD_VAR 0 1
17955: PPUSH
17956: LD_VAR 0 5
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PPUSH
17965: LD_VAR 0 5
17969: PUSH
17970: LD_INT 2
17972: ARRAY
17973: PPUSH
17974: CALL 16929 0 3
17978: NOT
17979: IFFALSE 17985
// exit ;
17981: POP
17982: POP
17983: GO 17989
17985: GO 17948
17987: POP
17988: POP
// end ;
17989: LD_VAR 0 4
17993: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
17994: LD_INT 0
17996: PPUSH
17997: PPUSH
17998: PPUSH
17999: PPUSH
18000: PPUSH
18001: PPUSH
18002: PPUSH
// if not GetClass ( unit ) = class_sniper then
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 257
18012: PUSH
18013: LD_INT 5
18015: EQUAL
18016: NOT
18017: IFFALSE 18021
// exit ;
18019: GO 18409
// dist := 8 ;
18021: LD_ADDR_VAR 0 5
18025: PUSH
18026: LD_INT 8
18028: ST_TO_ADDR
// viewRange := 12 ;
18029: LD_ADDR_VAR 0 7
18033: PUSH
18034: LD_INT 12
18036: ST_TO_ADDR
// side := GetSide ( unit ) ;
18037: LD_ADDR_VAR 0 6
18041: PUSH
18042: LD_VAR 0 1
18046: PPUSH
18047: CALL_OW 255
18051: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18052: LD_INT 61
18054: PPUSH
18055: LD_VAR 0 6
18059: PPUSH
18060: CALL_OW 321
18064: PUSH
18065: LD_INT 2
18067: EQUAL
18068: IFFALSE 18078
// viewRange := 16 ;
18070: LD_ADDR_VAR 0 7
18074: PUSH
18075: LD_INT 16
18077: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18078: LD_VAR 0 1
18082: PPUSH
18083: LD_VAR 0 2
18087: PPUSH
18088: LD_VAR 0 3
18092: PPUSH
18093: CALL_OW 297
18097: PUSH
18098: LD_VAR 0 5
18102: GREATER
18103: IFFALSE 18182
// begin ComMoveXY ( unit , x , y ) ;
18105: LD_VAR 0 1
18109: PPUSH
18110: LD_VAR 0 2
18114: PPUSH
18115: LD_VAR 0 3
18119: PPUSH
18120: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18124: LD_INT 35
18126: PPUSH
18127: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18131: LD_VAR 0 1
18135: PPUSH
18136: LD_VAR 0 2
18140: PPUSH
18141: LD_VAR 0 3
18145: PPUSH
18146: CALL 67129 0 3
18150: NOT
18151: IFFALSE 18155
// exit ;
18153: GO 18409
// until GetDistUnitXY ( unit , x , y ) < dist ;
18155: LD_VAR 0 1
18159: PPUSH
18160: LD_VAR 0 2
18164: PPUSH
18165: LD_VAR 0 3
18169: PPUSH
18170: CALL_OW 297
18174: PUSH
18175: LD_VAR 0 5
18179: LESS
18180: IFFALSE 18124
// end ; ComTurnXY ( unit , x , y ) ;
18182: LD_VAR 0 1
18186: PPUSH
18187: LD_VAR 0 2
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: CALL_OW 118
// wait ( 5 ) ;
18201: LD_INT 5
18203: PPUSH
18204: CALL_OW 67
// _d := GetDir ( unit ) ;
18208: LD_ADDR_VAR 0 10
18212: PUSH
18213: LD_VAR 0 1
18217: PPUSH
18218: CALL_OW 254
18222: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18223: LD_ADDR_VAR 0 8
18227: PUSH
18228: LD_VAR 0 1
18232: PPUSH
18233: CALL_OW 250
18237: PPUSH
18238: LD_VAR 0 10
18242: PPUSH
18243: LD_VAR 0 5
18247: PPUSH
18248: CALL_OW 272
18252: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18253: LD_ADDR_VAR 0 9
18257: PUSH
18258: LD_VAR 0 1
18262: PPUSH
18263: CALL_OW 251
18267: PPUSH
18268: LD_VAR 0 10
18272: PPUSH
18273: LD_VAR 0 5
18277: PPUSH
18278: CALL_OW 273
18282: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18283: LD_VAR 0 8
18287: PPUSH
18288: LD_VAR 0 9
18292: PPUSH
18293: CALL_OW 488
18297: NOT
18298: IFFALSE 18302
// exit ;
18300: GO 18409
// ComAnimCustom ( unit , 1 ) ;
18302: LD_VAR 0 1
18306: PPUSH
18307: LD_INT 1
18309: PPUSH
18310: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18314: LD_VAR 0 8
18318: PPUSH
18319: LD_VAR 0 9
18323: PPUSH
18324: LD_VAR 0 6
18328: PPUSH
18329: LD_VAR 0 7
18333: PPUSH
18334: CALL_OW 330
// repeat wait ( 1 ) ;
18338: LD_INT 1
18340: PPUSH
18341: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 316
18354: PUSH
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL_OW 314
18364: OR
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 302
18375: NOT
18376: OR
18377: PUSH
18378: LD_VAR 0 1
18382: PPUSH
18383: CALL_OW 301
18387: OR
18388: IFFALSE 18338
// RemoveSeeing ( _x , _y , side ) ;
18390: LD_VAR 0 8
18394: PPUSH
18395: LD_VAR 0 9
18399: PPUSH
18400: LD_VAR 0 6
18404: PPUSH
18405: CALL_OW 331
// end ; end_of_file
18409: LD_VAR 0 4
18413: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18414: LD_INT 0
18416: PPUSH
// if p2 = 100 then
18417: LD_VAR 0 2
18421: PUSH
18422: LD_INT 100
18424: EQUAL
18425: IFFALSE 19374
// begin if not StreamModeActive then
18427: LD_EXP 75
18431: NOT
18432: IFFALSE 18442
// StreamModeActive := true ;
18434: LD_ADDR_EXP 75
18438: PUSH
18439: LD_INT 1
18441: ST_TO_ADDR
// if p3 = 0 then
18442: LD_VAR 0 3
18446: PUSH
18447: LD_INT 0
18449: EQUAL
18450: IFFALSE 18456
// InitStreamMode ;
18452: CALL 19534 0 0
// if p3 = 1 then
18456: LD_VAR 0 3
18460: PUSH
18461: LD_INT 1
18463: EQUAL
18464: IFFALSE 18474
// sRocket := true ;
18466: LD_ADDR_EXP 80
18470: PUSH
18471: LD_INT 1
18473: ST_TO_ADDR
// if p3 = 2 then
18474: LD_VAR 0 3
18478: PUSH
18479: LD_INT 2
18481: EQUAL
18482: IFFALSE 18492
// sSpeed := true ;
18484: LD_ADDR_EXP 79
18488: PUSH
18489: LD_INT 1
18491: ST_TO_ADDR
// if p3 = 3 then
18492: LD_VAR 0 3
18496: PUSH
18497: LD_INT 3
18499: EQUAL
18500: IFFALSE 18510
// sEngine := true ;
18502: LD_ADDR_EXP 81
18506: PUSH
18507: LD_INT 1
18509: ST_TO_ADDR
// if p3 = 4 then
18510: LD_VAR 0 3
18514: PUSH
18515: LD_INT 4
18517: EQUAL
18518: IFFALSE 18528
// sSpec := true ;
18520: LD_ADDR_EXP 78
18524: PUSH
18525: LD_INT 1
18527: ST_TO_ADDR
// if p3 = 5 then
18528: LD_VAR 0 3
18532: PUSH
18533: LD_INT 5
18535: EQUAL
18536: IFFALSE 18546
// sLevel := true ;
18538: LD_ADDR_EXP 82
18542: PUSH
18543: LD_INT 1
18545: ST_TO_ADDR
// if p3 = 6 then
18546: LD_VAR 0 3
18550: PUSH
18551: LD_INT 6
18553: EQUAL
18554: IFFALSE 18564
// sArmoury := true ;
18556: LD_ADDR_EXP 83
18560: PUSH
18561: LD_INT 1
18563: ST_TO_ADDR
// if p3 = 7 then
18564: LD_VAR 0 3
18568: PUSH
18569: LD_INT 7
18571: EQUAL
18572: IFFALSE 18582
// sRadar := true ;
18574: LD_ADDR_EXP 84
18578: PUSH
18579: LD_INT 1
18581: ST_TO_ADDR
// if p3 = 8 then
18582: LD_VAR 0 3
18586: PUSH
18587: LD_INT 8
18589: EQUAL
18590: IFFALSE 18600
// sBunker := true ;
18592: LD_ADDR_EXP 85
18596: PUSH
18597: LD_INT 1
18599: ST_TO_ADDR
// if p3 = 9 then
18600: LD_VAR 0 3
18604: PUSH
18605: LD_INT 9
18607: EQUAL
18608: IFFALSE 18618
// sHack := true ;
18610: LD_ADDR_EXP 86
18614: PUSH
18615: LD_INT 1
18617: ST_TO_ADDR
// if p3 = 10 then
18618: LD_VAR 0 3
18622: PUSH
18623: LD_INT 10
18625: EQUAL
18626: IFFALSE 18636
// sFire := true ;
18628: LD_ADDR_EXP 87
18632: PUSH
18633: LD_INT 1
18635: ST_TO_ADDR
// if p3 = 11 then
18636: LD_VAR 0 3
18640: PUSH
18641: LD_INT 11
18643: EQUAL
18644: IFFALSE 18654
// sRefresh := true ;
18646: LD_ADDR_EXP 88
18650: PUSH
18651: LD_INT 1
18653: ST_TO_ADDR
// if p3 = 12 then
18654: LD_VAR 0 3
18658: PUSH
18659: LD_INT 12
18661: EQUAL
18662: IFFALSE 18672
// sExp := true ;
18664: LD_ADDR_EXP 89
18668: PUSH
18669: LD_INT 1
18671: ST_TO_ADDR
// if p3 = 13 then
18672: LD_VAR 0 3
18676: PUSH
18677: LD_INT 13
18679: EQUAL
18680: IFFALSE 18690
// sDepot := true ;
18682: LD_ADDR_EXP 90
18686: PUSH
18687: LD_INT 1
18689: ST_TO_ADDR
// if p3 = 14 then
18690: LD_VAR 0 3
18694: PUSH
18695: LD_INT 14
18697: EQUAL
18698: IFFALSE 18708
// sFlag := true ;
18700: LD_ADDR_EXP 91
18704: PUSH
18705: LD_INT 1
18707: ST_TO_ADDR
// if p3 = 15 then
18708: LD_VAR 0 3
18712: PUSH
18713: LD_INT 15
18715: EQUAL
18716: IFFALSE 18726
// sKamikadze := true ;
18718: LD_ADDR_EXP 99
18722: PUSH
18723: LD_INT 1
18725: ST_TO_ADDR
// if p3 = 16 then
18726: LD_VAR 0 3
18730: PUSH
18731: LD_INT 16
18733: EQUAL
18734: IFFALSE 18744
// sTroll := true ;
18736: LD_ADDR_EXP 100
18740: PUSH
18741: LD_INT 1
18743: ST_TO_ADDR
// if p3 = 17 then
18744: LD_VAR 0 3
18748: PUSH
18749: LD_INT 17
18751: EQUAL
18752: IFFALSE 18762
// sSlow := true ;
18754: LD_ADDR_EXP 101
18758: PUSH
18759: LD_INT 1
18761: ST_TO_ADDR
// if p3 = 18 then
18762: LD_VAR 0 3
18766: PUSH
18767: LD_INT 18
18769: EQUAL
18770: IFFALSE 18780
// sLack := true ;
18772: LD_ADDR_EXP 102
18776: PUSH
18777: LD_INT 1
18779: ST_TO_ADDR
// if p3 = 19 then
18780: LD_VAR 0 3
18784: PUSH
18785: LD_INT 19
18787: EQUAL
18788: IFFALSE 18798
// sTank := true ;
18790: LD_ADDR_EXP 104
18794: PUSH
18795: LD_INT 1
18797: ST_TO_ADDR
// if p3 = 20 then
18798: LD_VAR 0 3
18802: PUSH
18803: LD_INT 20
18805: EQUAL
18806: IFFALSE 18816
// sRemote := true ;
18808: LD_ADDR_EXP 105
18812: PUSH
18813: LD_INT 1
18815: ST_TO_ADDR
// if p3 = 21 then
18816: LD_VAR 0 3
18820: PUSH
18821: LD_INT 21
18823: EQUAL
18824: IFFALSE 18834
// sPowell := true ;
18826: LD_ADDR_EXP 106
18830: PUSH
18831: LD_INT 1
18833: ST_TO_ADDR
// if p3 = 22 then
18834: LD_VAR 0 3
18838: PUSH
18839: LD_INT 22
18841: EQUAL
18842: IFFALSE 18852
// sTeleport := true ;
18844: LD_ADDR_EXP 109
18848: PUSH
18849: LD_INT 1
18851: ST_TO_ADDR
// if p3 = 23 then
18852: LD_VAR 0 3
18856: PUSH
18857: LD_INT 23
18859: EQUAL
18860: IFFALSE 18870
// sOilTower := true ;
18862: LD_ADDR_EXP 111
18866: PUSH
18867: LD_INT 1
18869: ST_TO_ADDR
// if p3 = 24 then
18870: LD_VAR 0 3
18874: PUSH
18875: LD_INT 24
18877: EQUAL
18878: IFFALSE 18888
// sShovel := true ;
18880: LD_ADDR_EXP 112
18884: PUSH
18885: LD_INT 1
18887: ST_TO_ADDR
// if p3 = 25 then
18888: LD_VAR 0 3
18892: PUSH
18893: LD_INT 25
18895: EQUAL
18896: IFFALSE 18906
// sSheik := true ;
18898: LD_ADDR_EXP 113
18902: PUSH
18903: LD_INT 1
18905: ST_TO_ADDR
// if p3 = 26 then
18906: LD_VAR 0 3
18910: PUSH
18911: LD_INT 26
18913: EQUAL
18914: IFFALSE 18924
// sEarthquake := true ;
18916: LD_ADDR_EXP 115
18920: PUSH
18921: LD_INT 1
18923: ST_TO_ADDR
// if p3 = 27 then
18924: LD_VAR 0 3
18928: PUSH
18929: LD_INT 27
18931: EQUAL
18932: IFFALSE 18942
// sAI := true ;
18934: LD_ADDR_EXP 116
18938: PUSH
18939: LD_INT 1
18941: ST_TO_ADDR
// if p3 = 28 then
18942: LD_VAR 0 3
18946: PUSH
18947: LD_INT 28
18949: EQUAL
18950: IFFALSE 18960
// sCargo := true ;
18952: LD_ADDR_EXP 119
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// if p3 = 29 then
18960: LD_VAR 0 3
18964: PUSH
18965: LD_INT 29
18967: EQUAL
18968: IFFALSE 18978
// sDLaser := true ;
18970: LD_ADDR_EXP 120
18974: PUSH
18975: LD_INT 1
18977: ST_TO_ADDR
// if p3 = 30 then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 30
18985: EQUAL
18986: IFFALSE 18996
// sExchange := true ;
18988: LD_ADDR_EXP 121
18992: PUSH
18993: LD_INT 1
18995: ST_TO_ADDR
// if p3 = 31 then
18996: LD_VAR 0 3
19000: PUSH
19001: LD_INT 31
19003: EQUAL
19004: IFFALSE 19014
// sFac := true ;
19006: LD_ADDR_EXP 122
19010: PUSH
19011: LD_INT 1
19013: ST_TO_ADDR
// if p3 = 32 then
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 32
19021: EQUAL
19022: IFFALSE 19032
// sPower := true ;
19024: LD_ADDR_EXP 123
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// if p3 = 33 then
19032: LD_VAR 0 3
19036: PUSH
19037: LD_INT 33
19039: EQUAL
19040: IFFALSE 19050
// sRandom := true ;
19042: LD_ADDR_EXP 124
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// if p3 = 34 then
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 34
19057: EQUAL
19058: IFFALSE 19068
// sShield := true ;
19060: LD_ADDR_EXP 125
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// if p3 = 35 then
19068: LD_VAR 0 3
19072: PUSH
19073: LD_INT 35
19075: EQUAL
19076: IFFALSE 19086
// sTime := true ;
19078: LD_ADDR_EXP 126
19082: PUSH
19083: LD_INT 1
19085: ST_TO_ADDR
// if p3 = 36 then
19086: LD_VAR 0 3
19090: PUSH
19091: LD_INT 36
19093: EQUAL
19094: IFFALSE 19104
// sTools := true ;
19096: LD_ADDR_EXP 127
19100: PUSH
19101: LD_INT 1
19103: ST_TO_ADDR
// if p3 = 101 then
19104: LD_VAR 0 3
19108: PUSH
19109: LD_INT 101
19111: EQUAL
19112: IFFALSE 19122
// sSold := true ;
19114: LD_ADDR_EXP 92
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
// if p3 = 102 then
19122: LD_VAR 0 3
19126: PUSH
19127: LD_INT 102
19129: EQUAL
19130: IFFALSE 19140
// sDiff := true ;
19132: LD_ADDR_EXP 93
19136: PUSH
19137: LD_INT 1
19139: ST_TO_ADDR
// if p3 = 103 then
19140: LD_VAR 0 3
19144: PUSH
19145: LD_INT 103
19147: EQUAL
19148: IFFALSE 19158
// sFog := true ;
19150: LD_ADDR_EXP 96
19154: PUSH
19155: LD_INT 1
19157: ST_TO_ADDR
// if p3 = 104 then
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 104
19165: EQUAL
19166: IFFALSE 19176
// sReset := true ;
19168: LD_ADDR_EXP 97
19172: PUSH
19173: LD_INT 1
19175: ST_TO_ADDR
// if p3 = 105 then
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 105
19183: EQUAL
19184: IFFALSE 19194
// sSun := true ;
19186: LD_ADDR_EXP 98
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// if p3 = 106 then
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 106
19201: EQUAL
19202: IFFALSE 19212
// sTiger := true ;
19204: LD_ADDR_EXP 94
19208: PUSH
19209: LD_INT 1
19211: ST_TO_ADDR
// if p3 = 107 then
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 107
19219: EQUAL
19220: IFFALSE 19230
// sBomb := true ;
19222: LD_ADDR_EXP 95
19226: PUSH
19227: LD_INT 1
19229: ST_TO_ADDR
// if p3 = 108 then
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 108
19237: EQUAL
19238: IFFALSE 19248
// sWound := true ;
19240: LD_ADDR_EXP 103
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if p3 = 109 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 109
19255: EQUAL
19256: IFFALSE 19266
// sBetray := true ;
19258: LD_ADDR_EXP 107
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 110 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 110
19273: EQUAL
19274: IFFALSE 19284
// sContamin := true ;
19276: LD_ADDR_EXP 108
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 111 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 111
19291: EQUAL
19292: IFFALSE 19302
// sOil := true ;
19294: LD_ADDR_EXP 110
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 112 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 112
19309: EQUAL
19310: IFFALSE 19320
// sStu := true ;
19312: LD_ADDR_EXP 114
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 113 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 113
19327: EQUAL
19328: IFFALSE 19338
// sBazooka := true ;
19330: LD_ADDR_EXP 117
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 114 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 114
19345: EQUAL
19346: IFFALSE 19356
// sMortar := true ;
19348: LD_ADDR_EXP 118
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 115 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 115
19363: EQUAL
19364: IFFALSE 19374
// sRanger := true ;
19366: LD_ADDR_EXP 128
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// end ; if p2 = 101 then
19374: LD_VAR 0 2
19378: PUSH
19379: LD_INT 101
19381: EQUAL
19382: IFFALSE 19510
// begin case p3 of 1 :
19384: LD_VAR 0 3
19388: PUSH
19389: LD_INT 1
19391: DOUBLE
19392: EQUAL
19393: IFTRUE 19397
19395: GO 19404
19397: POP
// hHackUnlimitedResources ; 2 :
19398: CALL 30547 0 0
19402: GO 19510
19404: LD_INT 2
19406: DOUBLE
19407: EQUAL
19408: IFTRUE 19412
19410: GO 19419
19412: POP
// hHackSetLevel10 ; 3 :
19413: CALL 30680 0 0
19417: GO 19510
19419: LD_INT 3
19421: DOUBLE
19422: EQUAL
19423: IFTRUE 19427
19425: GO 19434
19427: POP
// hHackSetLevel10YourUnits ; 4 :
19428: CALL 30765 0 0
19432: GO 19510
19434: LD_INT 4
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19449
19442: POP
// hHackInvincible ; 5 :
19443: CALL 31213 0 0
19447: GO 19510
19449: LD_INT 5
19451: DOUBLE
19452: EQUAL
19453: IFTRUE 19457
19455: GO 19464
19457: POP
// hHackInvisible ; 6 :
19458: CALL 31324 0 0
19462: GO 19510
19464: LD_INT 6
19466: DOUBLE
19467: EQUAL
19468: IFTRUE 19472
19470: GO 19479
19472: POP
// hHackChangeYourSide ; 7 :
19473: CALL 31381 0 0
19477: GO 19510
19479: LD_INT 7
19481: DOUBLE
19482: EQUAL
19483: IFTRUE 19487
19485: GO 19494
19487: POP
// hHackChangeUnitSide ; 8 :
19488: CALL 31423 0 0
19492: GO 19510
19494: LD_INT 8
19496: DOUBLE
19497: EQUAL
19498: IFTRUE 19502
19500: GO 19509
19502: POP
// hHackFog ; end ;
19503: CALL 31524 0 0
19507: GO 19510
19509: POP
// end ; end ;
19510: LD_VAR 0 7
19514: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19515: GO 19517
19517: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19518: LD_STRING initStreamRollete();
19520: PPUSH
19521: CALL_OW 559
// InitStreamMode ;
19525: CALL 19534 0 0
// DefineStreamItems ( ) ;
19529: CALL 19974 0 0
// end ;
19533: END
// function InitStreamMode ; begin
19534: LD_INT 0
19536: PPUSH
// streamModeActive := false ;
19537: LD_ADDR_EXP 75
19541: PUSH
19542: LD_INT 0
19544: ST_TO_ADDR
// normalCounter := 36 ;
19545: LD_ADDR_EXP 76
19549: PUSH
19550: LD_INT 36
19552: ST_TO_ADDR
// hardcoreCounter := 16 ;
19553: LD_ADDR_EXP 77
19557: PUSH
19558: LD_INT 16
19560: ST_TO_ADDR
// sRocket := false ;
19561: LD_ADDR_EXP 80
19565: PUSH
19566: LD_INT 0
19568: ST_TO_ADDR
// sSpeed := false ;
19569: LD_ADDR_EXP 79
19573: PUSH
19574: LD_INT 0
19576: ST_TO_ADDR
// sEngine := false ;
19577: LD_ADDR_EXP 81
19581: PUSH
19582: LD_INT 0
19584: ST_TO_ADDR
// sSpec := false ;
19585: LD_ADDR_EXP 78
19589: PUSH
19590: LD_INT 0
19592: ST_TO_ADDR
// sLevel := false ;
19593: LD_ADDR_EXP 82
19597: PUSH
19598: LD_INT 0
19600: ST_TO_ADDR
// sArmoury := false ;
19601: LD_ADDR_EXP 83
19605: PUSH
19606: LD_INT 0
19608: ST_TO_ADDR
// sRadar := false ;
19609: LD_ADDR_EXP 84
19613: PUSH
19614: LD_INT 0
19616: ST_TO_ADDR
// sBunker := false ;
19617: LD_ADDR_EXP 85
19621: PUSH
19622: LD_INT 0
19624: ST_TO_ADDR
// sHack := false ;
19625: LD_ADDR_EXP 86
19629: PUSH
19630: LD_INT 0
19632: ST_TO_ADDR
// sFire := false ;
19633: LD_ADDR_EXP 87
19637: PUSH
19638: LD_INT 0
19640: ST_TO_ADDR
// sRefresh := false ;
19641: LD_ADDR_EXP 88
19645: PUSH
19646: LD_INT 0
19648: ST_TO_ADDR
// sExp := false ;
19649: LD_ADDR_EXP 89
19653: PUSH
19654: LD_INT 0
19656: ST_TO_ADDR
// sDepot := false ;
19657: LD_ADDR_EXP 90
19661: PUSH
19662: LD_INT 0
19664: ST_TO_ADDR
// sFlag := false ;
19665: LD_ADDR_EXP 91
19669: PUSH
19670: LD_INT 0
19672: ST_TO_ADDR
// sKamikadze := false ;
19673: LD_ADDR_EXP 99
19677: PUSH
19678: LD_INT 0
19680: ST_TO_ADDR
// sTroll := false ;
19681: LD_ADDR_EXP 100
19685: PUSH
19686: LD_INT 0
19688: ST_TO_ADDR
// sSlow := false ;
19689: LD_ADDR_EXP 101
19693: PUSH
19694: LD_INT 0
19696: ST_TO_ADDR
// sLack := false ;
19697: LD_ADDR_EXP 102
19701: PUSH
19702: LD_INT 0
19704: ST_TO_ADDR
// sTank := false ;
19705: LD_ADDR_EXP 104
19709: PUSH
19710: LD_INT 0
19712: ST_TO_ADDR
// sRemote := false ;
19713: LD_ADDR_EXP 105
19717: PUSH
19718: LD_INT 0
19720: ST_TO_ADDR
// sPowell := false ;
19721: LD_ADDR_EXP 106
19725: PUSH
19726: LD_INT 0
19728: ST_TO_ADDR
// sTeleport := false ;
19729: LD_ADDR_EXP 109
19733: PUSH
19734: LD_INT 0
19736: ST_TO_ADDR
// sOilTower := false ;
19737: LD_ADDR_EXP 111
19741: PUSH
19742: LD_INT 0
19744: ST_TO_ADDR
// sShovel := false ;
19745: LD_ADDR_EXP 112
19749: PUSH
19750: LD_INT 0
19752: ST_TO_ADDR
// sSheik := false ;
19753: LD_ADDR_EXP 113
19757: PUSH
19758: LD_INT 0
19760: ST_TO_ADDR
// sEarthquake := false ;
19761: LD_ADDR_EXP 115
19765: PUSH
19766: LD_INT 0
19768: ST_TO_ADDR
// sAI := false ;
19769: LD_ADDR_EXP 116
19773: PUSH
19774: LD_INT 0
19776: ST_TO_ADDR
// sCargo := false ;
19777: LD_ADDR_EXP 119
19781: PUSH
19782: LD_INT 0
19784: ST_TO_ADDR
// sDLaser := false ;
19785: LD_ADDR_EXP 120
19789: PUSH
19790: LD_INT 0
19792: ST_TO_ADDR
// sExchange := false ;
19793: LD_ADDR_EXP 121
19797: PUSH
19798: LD_INT 0
19800: ST_TO_ADDR
// sFac := false ;
19801: LD_ADDR_EXP 122
19805: PUSH
19806: LD_INT 0
19808: ST_TO_ADDR
// sPower := false ;
19809: LD_ADDR_EXP 123
19813: PUSH
19814: LD_INT 0
19816: ST_TO_ADDR
// sRandom := false ;
19817: LD_ADDR_EXP 124
19821: PUSH
19822: LD_INT 0
19824: ST_TO_ADDR
// sShield := false ;
19825: LD_ADDR_EXP 125
19829: PUSH
19830: LD_INT 0
19832: ST_TO_ADDR
// sTime := false ;
19833: LD_ADDR_EXP 126
19837: PUSH
19838: LD_INT 0
19840: ST_TO_ADDR
// sTools := false ;
19841: LD_ADDR_EXP 127
19845: PUSH
19846: LD_INT 0
19848: ST_TO_ADDR
// sSold := false ;
19849: LD_ADDR_EXP 92
19853: PUSH
19854: LD_INT 0
19856: ST_TO_ADDR
// sDiff := false ;
19857: LD_ADDR_EXP 93
19861: PUSH
19862: LD_INT 0
19864: ST_TO_ADDR
// sFog := false ;
19865: LD_ADDR_EXP 96
19869: PUSH
19870: LD_INT 0
19872: ST_TO_ADDR
// sReset := false ;
19873: LD_ADDR_EXP 97
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// sSun := false ;
19881: LD_ADDR_EXP 98
19885: PUSH
19886: LD_INT 0
19888: ST_TO_ADDR
// sTiger := false ;
19889: LD_ADDR_EXP 94
19893: PUSH
19894: LD_INT 0
19896: ST_TO_ADDR
// sBomb := false ;
19897: LD_ADDR_EXP 95
19901: PUSH
19902: LD_INT 0
19904: ST_TO_ADDR
// sWound := false ;
19905: LD_ADDR_EXP 103
19909: PUSH
19910: LD_INT 0
19912: ST_TO_ADDR
// sBetray := false ;
19913: LD_ADDR_EXP 107
19917: PUSH
19918: LD_INT 0
19920: ST_TO_ADDR
// sContamin := false ;
19921: LD_ADDR_EXP 108
19925: PUSH
19926: LD_INT 0
19928: ST_TO_ADDR
// sOil := false ;
19929: LD_ADDR_EXP 110
19933: PUSH
19934: LD_INT 0
19936: ST_TO_ADDR
// sStu := false ;
19937: LD_ADDR_EXP 114
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// sBazooka := false ;
19945: LD_ADDR_EXP 117
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// sMortar := false ;
19953: LD_ADDR_EXP 118
19957: PUSH
19958: LD_INT 0
19960: ST_TO_ADDR
// sRanger := false ;
19961: LD_ADDR_EXP 128
19965: PUSH
19966: LD_INT 0
19968: ST_TO_ADDR
// end ;
19969: LD_VAR 0 1
19973: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19974: LD_INT 0
19976: PPUSH
19977: PPUSH
19978: PPUSH
19979: PPUSH
19980: PPUSH
// result := [ ] ;
19981: LD_ADDR_VAR 0 1
19985: PUSH
19986: EMPTY
19987: ST_TO_ADDR
// if campaign_id = 1 then
19988: LD_OWVAR 69
19992: PUSH
19993: LD_INT 1
19995: EQUAL
19996: IFFALSE 22934
// begin case mission_number of 1 :
19998: LD_OWVAR 70
20002: PUSH
20003: LD_INT 1
20005: DOUBLE
20006: EQUAL
20007: IFTRUE 20011
20009: GO 20075
20011: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20012: LD_ADDR_VAR 0 1
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 4
20022: PUSH
20023: LD_INT 11
20025: PUSH
20026: LD_INT 12
20028: PUSH
20029: LD_INT 15
20031: PUSH
20032: LD_INT 16
20034: PUSH
20035: LD_INT 22
20037: PUSH
20038: LD_INT 23
20040: PUSH
20041: LD_INT 26
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 101
20057: PUSH
20058: LD_INT 102
20060: PUSH
20061: LD_INT 106
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: ST_TO_ADDR
20073: GO 22932
20075: LD_INT 2
20077: DOUBLE
20078: EQUAL
20079: IFTRUE 20083
20081: GO 20155
20083: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20084: LD_ADDR_VAR 0 1
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: LD_INT 4
20094: PUSH
20095: LD_INT 11
20097: PUSH
20098: LD_INT 12
20100: PUSH
20101: LD_INT 15
20103: PUSH
20104: LD_INT 16
20106: PUSH
20107: LD_INT 22
20109: PUSH
20110: LD_INT 23
20112: PUSH
20113: LD_INT 26
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 101
20129: PUSH
20130: LD_INT 102
20132: PUSH
20133: LD_INT 105
20135: PUSH
20136: LD_INT 106
20138: PUSH
20139: LD_INT 108
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: ST_TO_ADDR
20153: GO 22932
20155: LD_INT 3
20157: DOUBLE
20158: EQUAL
20159: IFTRUE 20163
20161: GO 20239
20163: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20164: LD_ADDR_VAR 0 1
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: LD_INT 4
20174: PUSH
20175: LD_INT 5
20177: PUSH
20178: LD_INT 11
20180: PUSH
20181: LD_INT 12
20183: PUSH
20184: LD_INT 15
20186: PUSH
20187: LD_INT 16
20189: PUSH
20190: LD_INT 22
20192: PUSH
20193: LD_INT 26
20195: PUSH
20196: LD_INT 36
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 101
20213: PUSH
20214: LD_INT 102
20216: PUSH
20217: LD_INT 105
20219: PUSH
20220: LD_INT 106
20222: PUSH
20223: LD_INT 108
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: ST_TO_ADDR
20237: GO 22932
20239: LD_INT 4
20241: DOUBLE
20242: EQUAL
20243: IFTRUE 20247
20245: GO 20331
20247: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20248: LD_ADDR_VAR 0 1
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: LD_INT 4
20258: PUSH
20259: LD_INT 5
20261: PUSH
20262: LD_INT 8
20264: PUSH
20265: LD_INT 11
20267: PUSH
20268: LD_INT 12
20270: PUSH
20271: LD_INT 15
20273: PUSH
20274: LD_INT 16
20276: PUSH
20277: LD_INT 22
20279: PUSH
20280: LD_INT 23
20282: PUSH
20283: LD_INT 26
20285: PUSH
20286: LD_INT 36
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 101
20305: PUSH
20306: LD_INT 102
20308: PUSH
20309: LD_INT 105
20311: PUSH
20312: LD_INT 106
20314: PUSH
20315: LD_INT 108
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: ST_TO_ADDR
20329: GO 22932
20331: LD_INT 5
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20439
20339: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20340: LD_ADDR_VAR 0 1
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 4
20350: PUSH
20351: LD_INT 5
20353: PUSH
20354: LD_INT 6
20356: PUSH
20357: LD_INT 8
20359: PUSH
20360: LD_INT 11
20362: PUSH
20363: LD_INT 12
20365: PUSH
20366: LD_INT 15
20368: PUSH
20369: LD_INT 16
20371: PUSH
20372: LD_INT 22
20374: PUSH
20375: LD_INT 23
20377: PUSH
20378: LD_INT 25
20380: PUSH
20381: LD_INT 26
20383: PUSH
20384: LD_INT 36
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 101
20405: PUSH
20406: LD_INT 102
20408: PUSH
20409: LD_INT 105
20411: PUSH
20412: LD_INT 106
20414: PUSH
20415: LD_INT 108
20417: PUSH
20418: LD_INT 109
20420: PUSH
20421: LD_INT 112
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: ST_TO_ADDR
20437: GO 22932
20439: LD_INT 6
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20567
20447: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20448: LD_ADDR_VAR 0 1
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 4
20458: PUSH
20459: LD_INT 5
20461: PUSH
20462: LD_INT 6
20464: PUSH
20465: LD_INT 8
20467: PUSH
20468: LD_INT 11
20470: PUSH
20471: LD_INT 12
20473: PUSH
20474: LD_INT 15
20476: PUSH
20477: LD_INT 16
20479: PUSH
20480: LD_INT 20
20482: PUSH
20483: LD_INT 21
20485: PUSH
20486: LD_INT 22
20488: PUSH
20489: LD_INT 23
20491: PUSH
20492: LD_INT 25
20494: PUSH
20495: LD_INT 26
20497: PUSH
20498: LD_INT 30
20500: PUSH
20501: LD_INT 31
20503: PUSH
20504: LD_INT 32
20506: PUSH
20507: LD_INT 36
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 101
20533: PUSH
20534: LD_INT 102
20536: PUSH
20537: LD_INT 105
20539: PUSH
20540: LD_INT 106
20542: PUSH
20543: LD_INT 108
20545: PUSH
20546: LD_INT 109
20548: PUSH
20549: LD_INT 112
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: ST_TO_ADDR
20565: GO 22932
20567: LD_INT 7
20569: DOUBLE
20570: EQUAL
20571: IFTRUE 20575
20573: GO 20675
20575: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20576: LD_ADDR_VAR 0 1
20580: PUSH
20581: LD_INT 2
20583: PUSH
20584: LD_INT 4
20586: PUSH
20587: LD_INT 5
20589: PUSH
20590: LD_INT 7
20592: PUSH
20593: LD_INT 11
20595: PUSH
20596: LD_INT 12
20598: PUSH
20599: LD_INT 15
20601: PUSH
20602: LD_INT 16
20604: PUSH
20605: LD_INT 20
20607: PUSH
20608: LD_INT 21
20610: PUSH
20611: LD_INT 22
20613: PUSH
20614: LD_INT 23
20616: PUSH
20617: LD_INT 25
20619: PUSH
20620: LD_INT 26
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 101
20641: PUSH
20642: LD_INT 102
20644: PUSH
20645: LD_INT 103
20647: PUSH
20648: LD_INT 105
20650: PUSH
20651: LD_INT 106
20653: PUSH
20654: LD_INT 108
20656: PUSH
20657: LD_INT 112
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: ST_TO_ADDR
20673: GO 22932
20675: LD_INT 8
20677: DOUBLE
20678: EQUAL
20679: IFTRUE 20683
20681: GO 20811
20683: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20684: LD_ADDR_VAR 0 1
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: LD_INT 4
20694: PUSH
20695: LD_INT 5
20697: PUSH
20698: LD_INT 6
20700: PUSH
20701: LD_INT 7
20703: PUSH
20704: LD_INT 8
20706: PUSH
20707: LD_INT 11
20709: PUSH
20710: LD_INT 12
20712: PUSH
20713: LD_INT 15
20715: PUSH
20716: LD_INT 16
20718: PUSH
20719: LD_INT 20
20721: PUSH
20722: LD_INT 21
20724: PUSH
20725: LD_INT 22
20727: PUSH
20728: LD_INT 23
20730: PUSH
20731: LD_INT 25
20733: PUSH
20734: LD_INT 26
20736: PUSH
20737: LD_INT 30
20739: PUSH
20740: LD_INT 31
20742: PUSH
20743: LD_INT 32
20745: PUSH
20746: LD_INT 36
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 101
20773: PUSH
20774: LD_INT 102
20776: PUSH
20777: LD_INT 103
20779: PUSH
20780: LD_INT 105
20782: PUSH
20783: LD_INT 106
20785: PUSH
20786: LD_INT 108
20788: PUSH
20789: LD_INT 109
20791: PUSH
20792: LD_INT 112
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: ST_TO_ADDR
20809: GO 22932
20811: LD_INT 9
20813: DOUBLE
20814: EQUAL
20815: IFTRUE 20819
20817: GO 20955
20819: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20820: LD_ADDR_VAR 0 1
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: LD_INT 4
20830: PUSH
20831: LD_INT 5
20833: PUSH
20834: LD_INT 6
20836: PUSH
20837: LD_INT 7
20839: PUSH
20840: LD_INT 8
20842: PUSH
20843: LD_INT 11
20845: PUSH
20846: LD_INT 12
20848: PUSH
20849: LD_INT 15
20851: PUSH
20852: LD_INT 16
20854: PUSH
20855: LD_INT 20
20857: PUSH
20858: LD_INT 21
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_INT 23
20866: PUSH
20867: LD_INT 25
20869: PUSH
20870: LD_INT 26
20872: PUSH
20873: LD_INT 28
20875: PUSH
20876: LD_INT 30
20878: PUSH
20879: LD_INT 31
20881: PUSH
20882: LD_INT 32
20884: PUSH
20885: LD_INT 36
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 101
20913: PUSH
20914: LD_INT 102
20916: PUSH
20917: LD_INT 103
20919: PUSH
20920: LD_INT 105
20922: PUSH
20923: LD_INT 106
20925: PUSH
20926: LD_INT 108
20928: PUSH
20929: LD_INT 109
20931: PUSH
20932: LD_INT 112
20934: PUSH
20935: LD_INT 114
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: ST_TO_ADDR
20953: GO 22932
20955: LD_INT 10
20957: DOUBLE
20958: EQUAL
20959: IFTRUE 20963
20961: GO 21147
20963: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20964: LD_ADDR_VAR 0 1
20968: PUSH
20969: LD_INT 2
20971: PUSH
20972: LD_INT 4
20974: PUSH
20975: LD_INT 5
20977: PUSH
20978: LD_INT 6
20980: PUSH
20981: LD_INT 7
20983: PUSH
20984: LD_INT 8
20986: PUSH
20987: LD_INT 9
20989: PUSH
20990: LD_INT 10
20992: PUSH
20993: LD_INT 11
20995: PUSH
20996: LD_INT 12
20998: PUSH
20999: LD_INT 13
21001: PUSH
21002: LD_INT 14
21004: PUSH
21005: LD_INT 15
21007: PUSH
21008: LD_INT 16
21010: PUSH
21011: LD_INT 17
21013: PUSH
21014: LD_INT 18
21016: PUSH
21017: LD_INT 19
21019: PUSH
21020: LD_INT 20
21022: PUSH
21023: LD_INT 21
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_INT 23
21031: PUSH
21032: LD_INT 24
21034: PUSH
21035: LD_INT 25
21037: PUSH
21038: LD_INT 26
21040: PUSH
21041: LD_INT 28
21043: PUSH
21044: LD_INT 30
21046: PUSH
21047: LD_INT 31
21049: PUSH
21050: LD_INT 32
21052: PUSH
21053: LD_INT 36
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 101
21089: PUSH
21090: LD_INT 102
21092: PUSH
21093: LD_INT 103
21095: PUSH
21096: LD_INT 104
21098: PUSH
21099: LD_INT 105
21101: PUSH
21102: LD_INT 106
21104: PUSH
21105: LD_INT 107
21107: PUSH
21108: LD_INT 108
21110: PUSH
21111: LD_INT 109
21113: PUSH
21114: LD_INT 110
21116: PUSH
21117: LD_INT 111
21119: PUSH
21120: LD_INT 112
21122: PUSH
21123: LD_INT 114
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: ST_TO_ADDR
21145: GO 22932
21147: LD_INT 11
21149: DOUBLE
21150: EQUAL
21151: IFTRUE 21155
21153: GO 21347
21155: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21156: LD_ADDR_VAR 0 1
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: LD_INT 4
21169: PUSH
21170: LD_INT 5
21172: PUSH
21173: LD_INT 6
21175: PUSH
21176: LD_INT 7
21178: PUSH
21179: LD_INT 8
21181: PUSH
21182: LD_INT 9
21184: PUSH
21185: LD_INT 10
21187: PUSH
21188: LD_INT 11
21190: PUSH
21191: LD_INT 12
21193: PUSH
21194: LD_INT 13
21196: PUSH
21197: LD_INT 14
21199: PUSH
21200: LD_INT 15
21202: PUSH
21203: LD_INT 16
21205: PUSH
21206: LD_INT 17
21208: PUSH
21209: LD_INT 18
21211: PUSH
21212: LD_INT 19
21214: PUSH
21215: LD_INT 20
21217: PUSH
21218: LD_INT 21
21220: PUSH
21221: LD_INT 22
21223: PUSH
21224: LD_INT 23
21226: PUSH
21227: LD_INT 24
21229: PUSH
21230: LD_INT 25
21232: PUSH
21233: LD_INT 26
21235: PUSH
21236: LD_INT 28
21238: PUSH
21239: LD_INT 30
21241: PUSH
21242: LD_INT 31
21244: PUSH
21245: LD_INT 32
21247: PUSH
21248: LD_INT 34
21250: PUSH
21251: LD_INT 36
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 101
21289: PUSH
21290: LD_INT 102
21292: PUSH
21293: LD_INT 103
21295: PUSH
21296: LD_INT 104
21298: PUSH
21299: LD_INT 105
21301: PUSH
21302: LD_INT 106
21304: PUSH
21305: LD_INT 107
21307: PUSH
21308: LD_INT 108
21310: PUSH
21311: LD_INT 109
21313: PUSH
21314: LD_INT 110
21316: PUSH
21317: LD_INT 111
21319: PUSH
21320: LD_INT 112
21322: PUSH
21323: LD_INT 114
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: ST_TO_ADDR
21345: GO 22932
21347: LD_INT 12
21349: DOUBLE
21350: EQUAL
21351: IFTRUE 21355
21353: GO 21563
21355: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21356: LD_ADDR_VAR 0 1
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: LD_INT 3
21369: PUSH
21370: LD_INT 4
21372: PUSH
21373: LD_INT 5
21375: PUSH
21376: LD_INT 6
21378: PUSH
21379: LD_INT 7
21381: PUSH
21382: LD_INT 8
21384: PUSH
21385: LD_INT 9
21387: PUSH
21388: LD_INT 10
21390: PUSH
21391: LD_INT 11
21393: PUSH
21394: LD_INT 12
21396: PUSH
21397: LD_INT 13
21399: PUSH
21400: LD_INT 14
21402: PUSH
21403: LD_INT 15
21405: PUSH
21406: LD_INT 16
21408: PUSH
21409: LD_INT 17
21411: PUSH
21412: LD_INT 18
21414: PUSH
21415: LD_INT 19
21417: PUSH
21418: LD_INT 20
21420: PUSH
21421: LD_INT 21
21423: PUSH
21424: LD_INT 22
21426: PUSH
21427: LD_INT 23
21429: PUSH
21430: LD_INT 24
21432: PUSH
21433: LD_INT 25
21435: PUSH
21436: LD_INT 26
21438: PUSH
21439: LD_INT 27
21441: PUSH
21442: LD_INT 28
21444: PUSH
21445: LD_INT 30
21447: PUSH
21448: LD_INT 31
21450: PUSH
21451: LD_INT 32
21453: PUSH
21454: LD_INT 33
21456: PUSH
21457: LD_INT 34
21459: PUSH
21460: LD_INT 36
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 101
21501: PUSH
21502: LD_INT 102
21504: PUSH
21505: LD_INT 103
21507: PUSH
21508: LD_INT 104
21510: PUSH
21511: LD_INT 105
21513: PUSH
21514: LD_INT 106
21516: PUSH
21517: LD_INT 107
21519: PUSH
21520: LD_INT 108
21522: PUSH
21523: LD_INT 109
21525: PUSH
21526: LD_INT 110
21528: PUSH
21529: LD_INT 111
21531: PUSH
21532: LD_INT 112
21534: PUSH
21535: LD_INT 113
21537: PUSH
21538: LD_INT 114
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: ST_TO_ADDR
21561: GO 22932
21563: LD_INT 13
21565: DOUBLE
21566: EQUAL
21567: IFTRUE 21571
21569: GO 21767
21571: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21572: LD_ADDR_VAR 0 1
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: LD_INT 2
21582: PUSH
21583: LD_INT 3
21585: PUSH
21586: LD_INT 4
21588: PUSH
21589: LD_INT 5
21591: PUSH
21592: LD_INT 8
21594: PUSH
21595: LD_INT 9
21597: PUSH
21598: LD_INT 10
21600: PUSH
21601: LD_INT 11
21603: PUSH
21604: LD_INT 12
21606: PUSH
21607: LD_INT 14
21609: PUSH
21610: LD_INT 15
21612: PUSH
21613: LD_INT 16
21615: PUSH
21616: LD_INT 17
21618: PUSH
21619: LD_INT 18
21621: PUSH
21622: LD_INT 19
21624: PUSH
21625: LD_INT 20
21627: PUSH
21628: LD_INT 21
21630: PUSH
21631: LD_INT 22
21633: PUSH
21634: LD_INT 23
21636: PUSH
21637: LD_INT 24
21639: PUSH
21640: LD_INT 25
21642: PUSH
21643: LD_INT 26
21645: PUSH
21646: LD_INT 27
21648: PUSH
21649: LD_INT 28
21651: PUSH
21652: LD_INT 30
21654: PUSH
21655: LD_INT 31
21657: PUSH
21658: LD_INT 32
21660: PUSH
21661: LD_INT 33
21663: PUSH
21664: LD_INT 34
21666: PUSH
21667: LD_INT 36
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 101
21705: PUSH
21706: LD_INT 102
21708: PUSH
21709: LD_INT 103
21711: PUSH
21712: LD_INT 104
21714: PUSH
21715: LD_INT 105
21717: PUSH
21718: LD_INT 106
21720: PUSH
21721: LD_INT 107
21723: PUSH
21724: LD_INT 108
21726: PUSH
21727: LD_INT 109
21729: PUSH
21730: LD_INT 110
21732: PUSH
21733: LD_INT 111
21735: PUSH
21736: LD_INT 112
21738: PUSH
21739: LD_INT 113
21741: PUSH
21742: LD_INT 114
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: ST_TO_ADDR
21765: GO 22932
21767: LD_INT 14
21769: DOUBLE
21770: EQUAL
21771: IFTRUE 21775
21773: GO 21987
21775: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21776: LD_ADDR_VAR 0 1
21780: PUSH
21781: LD_INT 1
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: LD_INT 3
21789: PUSH
21790: LD_INT 4
21792: PUSH
21793: LD_INT 5
21795: PUSH
21796: LD_INT 6
21798: PUSH
21799: LD_INT 7
21801: PUSH
21802: LD_INT 8
21804: PUSH
21805: LD_INT 9
21807: PUSH
21808: LD_INT 10
21810: PUSH
21811: LD_INT 11
21813: PUSH
21814: LD_INT 12
21816: PUSH
21817: LD_INT 13
21819: PUSH
21820: LD_INT 14
21822: PUSH
21823: LD_INT 15
21825: PUSH
21826: LD_INT 16
21828: PUSH
21829: LD_INT 17
21831: PUSH
21832: LD_INT 18
21834: PUSH
21835: LD_INT 19
21837: PUSH
21838: LD_INT 20
21840: PUSH
21841: LD_INT 21
21843: PUSH
21844: LD_INT 22
21846: PUSH
21847: LD_INT 23
21849: PUSH
21850: LD_INT 24
21852: PUSH
21853: LD_INT 25
21855: PUSH
21856: LD_INT 26
21858: PUSH
21859: LD_INT 27
21861: PUSH
21862: LD_INT 28
21864: PUSH
21865: LD_INT 29
21867: PUSH
21868: LD_INT 30
21870: PUSH
21871: LD_INT 31
21873: PUSH
21874: LD_INT 32
21876: PUSH
21877: LD_INT 33
21879: PUSH
21880: LD_INT 34
21882: PUSH
21883: LD_INT 36
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 101
21925: PUSH
21926: LD_INT 102
21928: PUSH
21929: LD_INT 103
21931: PUSH
21932: LD_INT 104
21934: PUSH
21935: LD_INT 105
21937: PUSH
21938: LD_INT 106
21940: PUSH
21941: LD_INT 107
21943: PUSH
21944: LD_INT 108
21946: PUSH
21947: LD_INT 109
21949: PUSH
21950: LD_INT 110
21952: PUSH
21953: LD_INT 111
21955: PUSH
21956: LD_INT 112
21958: PUSH
21959: LD_INT 113
21961: PUSH
21962: LD_INT 114
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: ST_TO_ADDR
21985: GO 22932
21987: LD_INT 15
21989: DOUBLE
21990: EQUAL
21991: IFTRUE 21995
21993: GO 22207
21995: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21996: LD_ADDR_VAR 0 1
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: LD_INT 2
22006: PUSH
22007: LD_INT 3
22009: PUSH
22010: LD_INT 4
22012: PUSH
22013: LD_INT 5
22015: PUSH
22016: LD_INT 6
22018: PUSH
22019: LD_INT 7
22021: PUSH
22022: LD_INT 8
22024: PUSH
22025: LD_INT 9
22027: PUSH
22028: LD_INT 10
22030: PUSH
22031: LD_INT 11
22033: PUSH
22034: LD_INT 12
22036: PUSH
22037: LD_INT 13
22039: PUSH
22040: LD_INT 14
22042: PUSH
22043: LD_INT 15
22045: PUSH
22046: LD_INT 16
22048: PUSH
22049: LD_INT 17
22051: PUSH
22052: LD_INT 18
22054: PUSH
22055: LD_INT 19
22057: PUSH
22058: LD_INT 20
22060: PUSH
22061: LD_INT 21
22063: PUSH
22064: LD_INT 22
22066: PUSH
22067: LD_INT 23
22069: PUSH
22070: LD_INT 24
22072: PUSH
22073: LD_INT 25
22075: PUSH
22076: LD_INT 26
22078: PUSH
22079: LD_INT 27
22081: PUSH
22082: LD_INT 28
22084: PUSH
22085: LD_INT 29
22087: PUSH
22088: LD_INT 30
22090: PUSH
22091: LD_INT 31
22093: PUSH
22094: LD_INT 32
22096: PUSH
22097: LD_INT 33
22099: PUSH
22100: LD_INT 34
22102: PUSH
22103: LD_INT 36
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 101
22145: PUSH
22146: LD_INT 102
22148: PUSH
22149: LD_INT 103
22151: PUSH
22152: LD_INT 104
22154: PUSH
22155: LD_INT 105
22157: PUSH
22158: LD_INT 106
22160: PUSH
22161: LD_INT 107
22163: PUSH
22164: LD_INT 108
22166: PUSH
22167: LD_INT 109
22169: PUSH
22170: LD_INT 110
22172: PUSH
22173: LD_INT 111
22175: PUSH
22176: LD_INT 112
22178: PUSH
22179: LD_INT 113
22181: PUSH
22182: LD_INT 114
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: ST_TO_ADDR
22205: GO 22932
22207: LD_INT 16
22209: DOUBLE
22210: EQUAL
22211: IFTRUE 22215
22213: GO 22339
22215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22216: LD_ADDR_VAR 0 1
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 4
22226: PUSH
22227: LD_INT 5
22229: PUSH
22230: LD_INT 7
22232: PUSH
22233: LD_INT 11
22235: PUSH
22236: LD_INT 12
22238: PUSH
22239: LD_INT 15
22241: PUSH
22242: LD_INT 16
22244: PUSH
22245: LD_INT 20
22247: PUSH
22248: LD_INT 21
22250: PUSH
22251: LD_INT 22
22253: PUSH
22254: LD_INT 23
22256: PUSH
22257: LD_INT 25
22259: PUSH
22260: LD_INT 26
22262: PUSH
22263: LD_INT 30
22265: PUSH
22266: LD_INT 31
22268: PUSH
22269: LD_INT 32
22271: PUSH
22272: LD_INT 33
22274: PUSH
22275: LD_INT 34
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 101
22301: PUSH
22302: LD_INT 102
22304: PUSH
22305: LD_INT 103
22307: PUSH
22308: LD_INT 106
22310: PUSH
22311: LD_INT 108
22313: PUSH
22314: LD_INT 112
22316: PUSH
22317: LD_INT 113
22319: PUSH
22320: LD_INT 114
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: ST_TO_ADDR
22337: GO 22932
22339: LD_INT 17
22341: DOUBLE
22342: EQUAL
22343: IFTRUE 22347
22345: GO 22559
22347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22348: LD_ADDR_VAR 0 1
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: LD_INT 2
22358: PUSH
22359: LD_INT 3
22361: PUSH
22362: LD_INT 4
22364: PUSH
22365: LD_INT 5
22367: PUSH
22368: LD_INT 6
22370: PUSH
22371: LD_INT 7
22373: PUSH
22374: LD_INT 8
22376: PUSH
22377: LD_INT 9
22379: PUSH
22380: LD_INT 10
22382: PUSH
22383: LD_INT 11
22385: PUSH
22386: LD_INT 12
22388: PUSH
22389: LD_INT 13
22391: PUSH
22392: LD_INT 14
22394: PUSH
22395: LD_INT 15
22397: PUSH
22398: LD_INT 16
22400: PUSH
22401: LD_INT 17
22403: PUSH
22404: LD_INT 18
22406: PUSH
22407: LD_INT 19
22409: PUSH
22410: LD_INT 20
22412: PUSH
22413: LD_INT 21
22415: PUSH
22416: LD_INT 22
22418: PUSH
22419: LD_INT 23
22421: PUSH
22422: LD_INT 24
22424: PUSH
22425: LD_INT 25
22427: PUSH
22428: LD_INT 26
22430: PUSH
22431: LD_INT 27
22433: PUSH
22434: LD_INT 28
22436: PUSH
22437: LD_INT 29
22439: PUSH
22440: LD_INT 30
22442: PUSH
22443: LD_INT 31
22445: PUSH
22446: LD_INT 32
22448: PUSH
22449: LD_INT 33
22451: PUSH
22452: LD_INT 34
22454: PUSH
22455: LD_INT 36
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 101
22497: PUSH
22498: LD_INT 102
22500: PUSH
22501: LD_INT 103
22503: PUSH
22504: LD_INT 104
22506: PUSH
22507: LD_INT 105
22509: PUSH
22510: LD_INT 106
22512: PUSH
22513: LD_INT 107
22515: PUSH
22516: LD_INT 108
22518: PUSH
22519: LD_INT 109
22521: PUSH
22522: LD_INT 110
22524: PUSH
22525: LD_INT 111
22527: PUSH
22528: LD_INT 112
22530: PUSH
22531: LD_INT 113
22533: PUSH
22534: LD_INT 114
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: ST_TO_ADDR
22557: GO 22932
22559: LD_INT 18
22561: DOUBLE
22562: EQUAL
22563: IFTRUE 22567
22565: GO 22703
22567: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22568: LD_ADDR_VAR 0 1
22572: PUSH
22573: LD_INT 2
22575: PUSH
22576: LD_INT 4
22578: PUSH
22579: LD_INT 5
22581: PUSH
22582: LD_INT 7
22584: PUSH
22585: LD_INT 11
22587: PUSH
22588: LD_INT 12
22590: PUSH
22591: LD_INT 15
22593: PUSH
22594: LD_INT 16
22596: PUSH
22597: LD_INT 20
22599: PUSH
22600: LD_INT 21
22602: PUSH
22603: LD_INT 22
22605: PUSH
22606: LD_INT 23
22608: PUSH
22609: LD_INT 25
22611: PUSH
22612: LD_INT 26
22614: PUSH
22615: LD_INT 30
22617: PUSH
22618: LD_INT 31
22620: PUSH
22621: LD_INT 32
22623: PUSH
22624: LD_INT 33
22626: PUSH
22627: LD_INT 34
22629: PUSH
22630: LD_INT 35
22632: PUSH
22633: LD_INT 36
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 101
22661: PUSH
22662: LD_INT 102
22664: PUSH
22665: LD_INT 103
22667: PUSH
22668: LD_INT 106
22670: PUSH
22671: LD_INT 108
22673: PUSH
22674: LD_INT 112
22676: PUSH
22677: LD_INT 113
22679: PUSH
22680: LD_INT 114
22682: PUSH
22683: LD_INT 115
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: ST_TO_ADDR
22701: GO 22932
22703: LD_INT 19
22705: DOUBLE
22706: EQUAL
22707: IFTRUE 22711
22709: GO 22931
22711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22712: LD_ADDR_VAR 0 1
22716: PUSH
22717: LD_INT 1
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: LD_INT 4
22728: PUSH
22729: LD_INT 5
22731: PUSH
22732: LD_INT 6
22734: PUSH
22735: LD_INT 7
22737: PUSH
22738: LD_INT 8
22740: PUSH
22741: LD_INT 9
22743: PUSH
22744: LD_INT 10
22746: PUSH
22747: LD_INT 11
22749: PUSH
22750: LD_INT 12
22752: PUSH
22753: LD_INT 13
22755: PUSH
22756: LD_INT 14
22758: PUSH
22759: LD_INT 15
22761: PUSH
22762: LD_INT 16
22764: PUSH
22765: LD_INT 17
22767: PUSH
22768: LD_INT 18
22770: PUSH
22771: LD_INT 19
22773: PUSH
22774: LD_INT 20
22776: PUSH
22777: LD_INT 21
22779: PUSH
22780: LD_INT 22
22782: PUSH
22783: LD_INT 23
22785: PUSH
22786: LD_INT 24
22788: PUSH
22789: LD_INT 25
22791: PUSH
22792: LD_INT 26
22794: PUSH
22795: LD_INT 27
22797: PUSH
22798: LD_INT 28
22800: PUSH
22801: LD_INT 29
22803: PUSH
22804: LD_INT 30
22806: PUSH
22807: LD_INT 31
22809: PUSH
22810: LD_INT 32
22812: PUSH
22813: LD_INT 33
22815: PUSH
22816: LD_INT 34
22818: PUSH
22819: LD_INT 35
22821: PUSH
22822: LD_INT 36
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 101
22865: PUSH
22866: LD_INT 102
22868: PUSH
22869: LD_INT 103
22871: PUSH
22872: LD_INT 104
22874: PUSH
22875: LD_INT 105
22877: PUSH
22878: LD_INT 106
22880: PUSH
22881: LD_INT 107
22883: PUSH
22884: LD_INT 108
22886: PUSH
22887: LD_INT 109
22889: PUSH
22890: LD_INT 110
22892: PUSH
22893: LD_INT 111
22895: PUSH
22896: LD_INT 112
22898: PUSH
22899: LD_INT 113
22901: PUSH
22902: LD_INT 114
22904: PUSH
22905: LD_INT 115
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: ST_TO_ADDR
22929: GO 22932
22931: POP
// end else
22932: GO 23151
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22934: LD_ADDR_VAR 0 1
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: LD_INT 4
22950: PUSH
22951: LD_INT 5
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: LD_INT 7
22959: PUSH
22960: LD_INT 8
22962: PUSH
22963: LD_INT 9
22965: PUSH
22966: LD_INT 10
22968: PUSH
22969: LD_INT 11
22971: PUSH
22972: LD_INT 12
22974: PUSH
22975: LD_INT 13
22977: PUSH
22978: LD_INT 14
22980: PUSH
22981: LD_INT 15
22983: PUSH
22984: LD_INT 16
22986: PUSH
22987: LD_INT 17
22989: PUSH
22990: LD_INT 18
22992: PUSH
22993: LD_INT 19
22995: PUSH
22996: LD_INT 20
22998: PUSH
22999: LD_INT 21
23001: PUSH
23002: LD_INT 22
23004: PUSH
23005: LD_INT 23
23007: PUSH
23008: LD_INT 24
23010: PUSH
23011: LD_INT 25
23013: PUSH
23014: LD_INT 26
23016: PUSH
23017: LD_INT 27
23019: PUSH
23020: LD_INT 28
23022: PUSH
23023: LD_INT 29
23025: PUSH
23026: LD_INT 30
23028: PUSH
23029: LD_INT 31
23031: PUSH
23032: LD_INT 32
23034: PUSH
23035: LD_INT 33
23037: PUSH
23038: LD_INT 34
23040: PUSH
23041: LD_INT 35
23043: PUSH
23044: LD_INT 36
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 101
23087: PUSH
23088: LD_INT 102
23090: PUSH
23091: LD_INT 103
23093: PUSH
23094: LD_INT 104
23096: PUSH
23097: LD_INT 105
23099: PUSH
23100: LD_INT 106
23102: PUSH
23103: LD_INT 107
23105: PUSH
23106: LD_INT 108
23108: PUSH
23109: LD_INT 109
23111: PUSH
23112: LD_INT 110
23114: PUSH
23115: LD_INT 111
23117: PUSH
23118: LD_INT 112
23120: PUSH
23121: LD_INT 113
23123: PUSH
23124: LD_INT 114
23126: PUSH
23127: LD_INT 115
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: ST_TO_ADDR
// if result then
23151: LD_VAR 0 1
23155: IFFALSE 23444
// begin normal :=  ;
23157: LD_ADDR_VAR 0 3
23161: PUSH
23162: LD_STRING 
23164: ST_TO_ADDR
// hardcore :=  ;
23165: LD_ADDR_VAR 0 4
23169: PUSH
23170: LD_STRING 
23172: ST_TO_ADDR
// for i = 1 to normalCounter do
23173: LD_ADDR_VAR 0 5
23177: PUSH
23178: DOUBLE
23179: LD_INT 1
23181: DEC
23182: ST_TO_ADDR
23183: LD_EXP 76
23187: PUSH
23188: FOR_TO
23189: IFFALSE 23290
// begin tmp := 0 ;
23191: LD_ADDR_VAR 0 2
23195: PUSH
23196: LD_STRING 0
23198: ST_TO_ADDR
// if result [ 1 ] then
23199: LD_VAR 0 1
23203: PUSH
23204: LD_INT 1
23206: ARRAY
23207: IFFALSE 23272
// if result [ 1 ] [ 1 ] = i then
23209: LD_VAR 0 1
23213: PUSH
23214: LD_INT 1
23216: ARRAY
23217: PUSH
23218: LD_INT 1
23220: ARRAY
23221: PUSH
23222: LD_VAR 0 5
23226: EQUAL
23227: IFFALSE 23272
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23229: LD_ADDR_VAR 0 1
23233: PUSH
23234: LD_VAR 0 1
23238: PPUSH
23239: LD_INT 1
23241: PPUSH
23242: LD_VAR 0 1
23246: PUSH
23247: LD_INT 1
23249: ARRAY
23250: PPUSH
23251: LD_INT 1
23253: PPUSH
23254: CALL_OW 3
23258: PPUSH
23259: CALL_OW 1
23263: ST_TO_ADDR
// tmp := 1 ;
23264: LD_ADDR_VAR 0 2
23268: PUSH
23269: LD_STRING 1
23271: ST_TO_ADDR
// end ; normal := normal & tmp ;
23272: LD_ADDR_VAR 0 3
23276: PUSH
23277: LD_VAR 0 3
23281: PUSH
23282: LD_VAR 0 2
23286: STR
23287: ST_TO_ADDR
// end ;
23288: GO 23188
23290: POP
23291: POP
// for i = 1 to hardcoreCounter do
23292: LD_ADDR_VAR 0 5
23296: PUSH
23297: DOUBLE
23298: LD_INT 1
23300: DEC
23301: ST_TO_ADDR
23302: LD_EXP 77
23306: PUSH
23307: FOR_TO
23308: IFFALSE 23413
// begin tmp := 0 ;
23310: LD_ADDR_VAR 0 2
23314: PUSH
23315: LD_STRING 0
23317: ST_TO_ADDR
// if result [ 2 ] then
23318: LD_VAR 0 1
23322: PUSH
23323: LD_INT 2
23325: ARRAY
23326: IFFALSE 23395
// if result [ 2 ] [ 1 ] = 100 + i then
23328: LD_VAR 0 1
23332: PUSH
23333: LD_INT 2
23335: ARRAY
23336: PUSH
23337: LD_INT 1
23339: ARRAY
23340: PUSH
23341: LD_INT 100
23343: PUSH
23344: LD_VAR 0 5
23348: PLUS
23349: EQUAL
23350: IFFALSE 23395
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23352: LD_ADDR_VAR 0 1
23356: PUSH
23357: LD_VAR 0 1
23361: PPUSH
23362: LD_INT 2
23364: PPUSH
23365: LD_VAR 0 1
23369: PUSH
23370: LD_INT 2
23372: ARRAY
23373: PPUSH
23374: LD_INT 1
23376: PPUSH
23377: CALL_OW 3
23381: PPUSH
23382: CALL_OW 1
23386: ST_TO_ADDR
// tmp := 1 ;
23387: LD_ADDR_VAR 0 2
23391: PUSH
23392: LD_STRING 1
23394: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23395: LD_ADDR_VAR 0 4
23399: PUSH
23400: LD_VAR 0 4
23404: PUSH
23405: LD_VAR 0 2
23409: STR
23410: ST_TO_ADDR
// end ;
23411: GO 23307
23413: POP
23414: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23415: LD_STRING getStreamItemsFromMission("
23417: PUSH
23418: LD_VAR 0 3
23422: STR
23423: PUSH
23424: LD_STRING ","
23426: STR
23427: PUSH
23428: LD_VAR 0 4
23432: STR
23433: PUSH
23434: LD_STRING ")
23436: STR
23437: PPUSH
23438: CALL_OW 559
// end else
23442: GO 23451
// ToLua ( getStreamItemsFromMission("","") ) ;
23444: LD_STRING getStreamItemsFromMission("","")
23446: PPUSH
23447: CALL_OW 559
// end ;
23451: LD_VAR 0 1
23455: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23456: LD_EXP 75
23460: PUSH
23461: LD_EXP 80
23465: AND
23466: IFFALSE 23590
23468: GO 23470
23470: DISABLE
23471: LD_INT 0
23473: PPUSH
23474: PPUSH
// begin enable ;
23475: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23476: LD_ADDR_VAR 0 2
23480: PUSH
23481: LD_INT 22
23483: PUSH
23484: LD_OWVAR 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: PUSH
23496: LD_INT 34
23498: PUSH
23499: LD_INT 7
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 34
23508: PUSH
23509: LD_INT 45
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 34
23518: PUSH
23519: LD_INT 28
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 34
23528: PUSH
23529: LD_INT 47
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PPUSH
23547: CALL_OW 69
23551: ST_TO_ADDR
// if not tmp then
23552: LD_VAR 0 2
23556: NOT
23557: IFFALSE 23561
// exit ;
23559: GO 23590
// for i in tmp do
23561: LD_ADDR_VAR 0 1
23565: PUSH
23566: LD_VAR 0 2
23570: PUSH
23571: FOR_IN
23572: IFFALSE 23588
// begin SetLives ( i , 0 ) ;
23574: LD_VAR 0 1
23578: PPUSH
23579: LD_INT 0
23581: PPUSH
23582: CALL_OW 234
// end ;
23586: GO 23571
23588: POP
23589: POP
// end ;
23590: PPOPN 2
23592: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23593: LD_EXP 75
23597: PUSH
23598: LD_EXP 81
23602: AND
23603: IFFALSE 23687
23605: GO 23607
23607: DISABLE
23608: LD_INT 0
23610: PPUSH
23611: PPUSH
// begin enable ;
23612: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23613: LD_ADDR_VAR 0 2
23617: PUSH
23618: LD_INT 22
23620: PUSH
23621: LD_OWVAR 2
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 32
23632: PUSH
23633: LD_INT 3
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PPUSH
23644: CALL_OW 69
23648: ST_TO_ADDR
// if not tmp then
23649: LD_VAR 0 2
23653: NOT
23654: IFFALSE 23658
// exit ;
23656: GO 23687
// for i in tmp do
23658: LD_ADDR_VAR 0 1
23662: PUSH
23663: LD_VAR 0 2
23667: PUSH
23668: FOR_IN
23669: IFFALSE 23685
// begin SetLives ( i , 0 ) ;
23671: LD_VAR 0 1
23675: PPUSH
23676: LD_INT 0
23678: PPUSH
23679: CALL_OW 234
// end ;
23683: GO 23668
23685: POP
23686: POP
// end ;
23687: PPOPN 2
23689: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23690: LD_EXP 75
23694: PUSH
23695: LD_EXP 78
23699: AND
23700: IFFALSE 23793
23702: GO 23704
23704: DISABLE
23705: LD_INT 0
23707: PPUSH
// begin enable ;
23708: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23709: LD_ADDR_VAR 0 1
23713: PUSH
23714: LD_INT 22
23716: PUSH
23717: LD_OWVAR 2
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: LD_INT 25
23731: PUSH
23732: LD_INT 5
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 25
23741: PUSH
23742: LD_INT 9
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 25
23751: PUSH
23752: LD_INT 8
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 69
23773: PUSH
23774: FOR_IN
23775: IFFALSE 23791
// begin SetClass ( i , 1 ) ;
23777: LD_VAR 0 1
23781: PPUSH
23782: LD_INT 1
23784: PPUSH
23785: CALL_OW 336
// end ;
23789: GO 23774
23791: POP
23792: POP
// end ;
23793: PPOPN 1
23795: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23796: LD_EXP 75
23800: PUSH
23801: LD_EXP 79
23805: AND
23806: PUSH
23807: LD_OWVAR 65
23811: PUSH
23812: LD_INT 7
23814: LESS
23815: AND
23816: IFFALSE 23830
23818: GO 23820
23820: DISABLE
// begin enable ;
23821: ENABLE
// game_speed := 7 ;
23822: LD_ADDR_OWVAR 65
23826: PUSH
23827: LD_INT 7
23829: ST_TO_ADDR
// end ;
23830: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23831: LD_EXP 75
23835: PUSH
23836: LD_EXP 82
23840: AND
23841: IFFALSE 24043
23843: GO 23845
23845: DISABLE
23846: LD_INT 0
23848: PPUSH
23849: PPUSH
23850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23851: LD_ADDR_VAR 0 3
23855: PUSH
23856: LD_INT 81
23858: PUSH
23859: LD_OWVAR 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 21
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 69
23886: ST_TO_ADDR
// if not tmp then
23887: LD_VAR 0 3
23891: NOT
23892: IFFALSE 23896
// exit ;
23894: GO 24043
// if tmp > 5 then
23896: LD_VAR 0 3
23900: PUSH
23901: LD_INT 5
23903: GREATER
23904: IFFALSE 23916
// k := 5 else
23906: LD_ADDR_VAR 0 2
23910: PUSH
23911: LD_INT 5
23913: ST_TO_ADDR
23914: GO 23926
// k := tmp ;
23916: LD_ADDR_VAR 0 2
23920: PUSH
23921: LD_VAR 0 3
23925: ST_TO_ADDR
// for i := 1 to k do
23926: LD_ADDR_VAR 0 1
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_VAR 0 2
23940: PUSH
23941: FOR_TO
23942: IFFALSE 24041
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23944: LD_VAR 0 3
23948: PUSH
23949: LD_VAR 0 1
23953: ARRAY
23954: PPUSH
23955: LD_VAR 0 1
23959: PUSH
23960: LD_INT 4
23962: MOD
23963: PUSH
23964: LD_INT 1
23966: PLUS
23967: PPUSH
23968: CALL_OW 259
23972: PUSH
23973: LD_INT 10
23975: LESS
23976: IFFALSE 24039
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23978: LD_VAR 0 3
23982: PUSH
23983: LD_VAR 0 1
23987: ARRAY
23988: PPUSH
23989: LD_VAR 0 1
23993: PUSH
23994: LD_INT 4
23996: MOD
23997: PUSH
23998: LD_INT 1
24000: PLUS
24001: PPUSH
24002: LD_VAR 0 3
24006: PUSH
24007: LD_VAR 0 1
24011: ARRAY
24012: PPUSH
24013: LD_VAR 0 1
24017: PUSH
24018: LD_INT 4
24020: MOD
24021: PUSH
24022: LD_INT 1
24024: PLUS
24025: PPUSH
24026: CALL_OW 259
24030: PUSH
24031: LD_INT 1
24033: PLUS
24034: PPUSH
24035: CALL_OW 237
24039: GO 23941
24041: POP
24042: POP
// end ;
24043: PPOPN 3
24045: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24046: LD_EXP 75
24050: PUSH
24051: LD_EXP 83
24055: AND
24056: IFFALSE 24076
24058: GO 24060
24060: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24061: LD_INT 4
24063: PPUSH
24064: LD_OWVAR 2
24068: PPUSH
24069: LD_INT 0
24071: PPUSH
24072: CALL_OW 324
24076: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24077: LD_EXP 75
24081: PUSH
24082: LD_EXP 112
24086: AND
24087: IFFALSE 24107
24089: GO 24091
24091: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24092: LD_INT 19
24094: PPUSH
24095: LD_OWVAR 2
24099: PPUSH
24100: LD_INT 0
24102: PPUSH
24103: CALL_OW 324
24107: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24108: LD_EXP 75
24112: PUSH
24113: LD_EXP 84
24117: AND
24118: IFFALSE 24220
24120: GO 24122
24122: DISABLE
24123: LD_INT 0
24125: PPUSH
24126: PPUSH
// begin enable ;
24127: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24128: LD_ADDR_VAR 0 2
24132: PUSH
24133: LD_INT 22
24135: PUSH
24136: LD_OWVAR 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: LD_INT 34
24150: PUSH
24151: LD_INT 11
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 34
24160: PUSH
24161: LD_INT 30
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PPUSH
24177: CALL_OW 69
24181: ST_TO_ADDR
// if not tmp then
24182: LD_VAR 0 2
24186: NOT
24187: IFFALSE 24191
// exit ;
24189: GO 24220
// for i in tmp do
24191: LD_ADDR_VAR 0 1
24195: PUSH
24196: LD_VAR 0 2
24200: PUSH
24201: FOR_IN
24202: IFFALSE 24218
// begin SetLives ( i , 0 ) ;
24204: LD_VAR 0 1
24208: PPUSH
24209: LD_INT 0
24211: PPUSH
24212: CALL_OW 234
// end ;
24216: GO 24201
24218: POP
24219: POP
// end ;
24220: PPOPN 2
24222: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24223: LD_EXP 75
24227: PUSH
24228: LD_EXP 85
24232: AND
24233: IFFALSE 24253
24235: GO 24237
24237: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24238: LD_INT 32
24240: PPUSH
24241: LD_OWVAR 2
24245: PPUSH
24246: LD_INT 0
24248: PPUSH
24249: CALL_OW 324
24253: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24254: LD_EXP 75
24258: PUSH
24259: LD_EXP 86
24263: AND
24264: IFFALSE 24445
24266: GO 24268
24268: DISABLE
24269: LD_INT 0
24271: PPUSH
24272: PPUSH
24273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24274: LD_ADDR_VAR 0 2
24278: PUSH
24279: LD_INT 22
24281: PUSH
24282: LD_OWVAR 2
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 33
24293: PUSH
24294: LD_INT 3
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PPUSH
24305: CALL_OW 69
24309: ST_TO_ADDR
// if not tmp then
24310: LD_VAR 0 2
24314: NOT
24315: IFFALSE 24319
// exit ;
24317: GO 24445
// side := 0 ;
24319: LD_ADDR_VAR 0 3
24323: PUSH
24324: LD_INT 0
24326: ST_TO_ADDR
// for i := 1 to 8 do
24327: LD_ADDR_VAR 0 1
24331: PUSH
24332: DOUBLE
24333: LD_INT 1
24335: DEC
24336: ST_TO_ADDR
24337: LD_INT 8
24339: PUSH
24340: FOR_TO
24341: IFFALSE 24389
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24343: LD_OWVAR 2
24347: PUSH
24348: LD_VAR 0 1
24352: NONEQUAL
24353: PUSH
24354: LD_OWVAR 2
24358: PPUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 81
24368: PUSH
24369: LD_INT 2
24371: EQUAL
24372: AND
24373: IFFALSE 24387
// begin side := i ;
24375: LD_ADDR_VAR 0 3
24379: PUSH
24380: LD_VAR 0 1
24384: ST_TO_ADDR
// break ;
24385: GO 24389
// end ;
24387: GO 24340
24389: POP
24390: POP
// if not side then
24391: LD_VAR 0 3
24395: NOT
24396: IFFALSE 24400
// exit ;
24398: GO 24445
// for i := 1 to tmp do
24400: LD_ADDR_VAR 0 1
24404: PUSH
24405: DOUBLE
24406: LD_INT 1
24408: DEC
24409: ST_TO_ADDR
24410: LD_VAR 0 2
24414: PUSH
24415: FOR_TO
24416: IFFALSE 24443
// if Prob ( 60 ) then
24418: LD_INT 60
24420: PPUSH
24421: CALL_OW 13
24425: IFFALSE 24441
// SetSide ( i , side ) ;
24427: LD_VAR 0 1
24431: PPUSH
24432: LD_VAR 0 3
24436: PPUSH
24437: CALL_OW 235
24441: GO 24415
24443: POP
24444: POP
// end ;
24445: PPOPN 3
24447: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24448: LD_EXP 75
24452: PUSH
24453: LD_EXP 88
24457: AND
24458: IFFALSE 24577
24460: GO 24462
24462: DISABLE
24463: LD_INT 0
24465: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24466: LD_ADDR_VAR 0 1
24470: PUSH
24471: LD_INT 22
24473: PUSH
24474: LD_OWVAR 2
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 21
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 3
24495: PUSH
24496: LD_INT 23
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: LIST
24514: PPUSH
24515: CALL_OW 69
24519: PUSH
24520: FOR_IN
24521: IFFALSE 24575
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24523: LD_VAR 0 1
24527: PPUSH
24528: CALL_OW 257
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 3
24541: PUSH
24542: LD_INT 4
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: IN
24551: IFFALSE 24573
// SetClass ( un , rand ( 1 , 4 ) ) ;
24553: LD_VAR 0 1
24557: PPUSH
24558: LD_INT 1
24560: PPUSH
24561: LD_INT 4
24563: PPUSH
24564: CALL_OW 12
24568: PPUSH
24569: CALL_OW 336
24573: GO 24520
24575: POP
24576: POP
// end ;
24577: PPOPN 1
24579: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24580: LD_EXP 75
24584: PUSH
24585: LD_EXP 87
24589: AND
24590: IFFALSE 24669
24592: GO 24594
24594: DISABLE
24595: LD_INT 0
24597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24598: LD_ADDR_VAR 0 1
24602: PUSH
24603: LD_INT 22
24605: PUSH
24606: LD_OWVAR 2
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 21
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PPUSH
24629: CALL_OW 69
24633: ST_TO_ADDR
// if not tmp then
24634: LD_VAR 0 1
24638: NOT
24639: IFFALSE 24643
// exit ;
24641: GO 24669
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24643: LD_VAR 0 1
24647: PUSH
24648: LD_INT 1
24650: PPUSH
24651: LD_VAR 0 1
24655: PPUSH
24656: CALL_OW 12
24660: ARRAY
24661: PPUSH
24662: LD_INT 100
24664: PPUSH
24665: CALL_OW 234
// end ;
24669: PPOPN 1
24671: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24672: LD_EXP 75
24676: PUSH
24677: LD_EXP 89
24681: AND
24682: IFFALSE 24780
24684: GO 24686
24686: DISABLE
24687: LD_INT 0
24689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24690: LD_ADDR_VAR 0 1
24694: PUSH
24695: LD_INT 22
24697: PUSH
24698: LD_OWVAR 2
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 21
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PPUSH
24721: CALL_OW 69
24725: ST_TO_ADDR
// if not tmp then
24726: LD_VAR 0 1
24730: NOT
24731: IFFALSE 24735
// exit ;
24733: GO 24780
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24735: LD_VAR 0 1
24739: PUSH
24740: LD_INT 1
24742: PPUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 12
24752: ARRAY
24753: PPUSH
24754: LD_INT 1
24756: PPUSH
24757: LD_INT 4
24759: PPUSH
24760: CALL_OW 12
24764: PPUSH
24765: LD_INT 3000
24767: PPUSH
24768: LD_INT 9000
24770: PPUSH
24771: CALL_OW 12
24775: PPUSH
24776: CALL_OW 492
// end ;
24780: PPOPN 1
24782: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24783: LD_EXP 75
24787: PUSH
24788: LD_EXP 90
24792: AND
24793: IFFALSE 24813
24795: GO 24797
24797: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24798: LD_INT 1
24800: PPUSH
24801: LD_OWVAR 2
24805: PPUSH
24806: LD_INT 0
24808: PPUSH
24809: CALL_OW 324
24813: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24814: LD_EXP 75
24818: PUSH
24819: LD_EXP 91
24823: AND
24824: IFFALSE 24907
24826: GO 24828
24828: DISABLE
24829: LD_INT 0
24831: PPUSH
24832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24833: LD_ADDR_VAR 0 2
24837: PUSH
24838: LD_INT 22
24840: PUSH
24841: LD_OWVAR 2
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 21
24852: PUSH
24853: LD_INT 3
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PPUSH
24864: CALL_OW 69
24868: ST_TO_ADDR
// if not tmp then
24869: LD_VAR 0 2
24873: NOT
24874: IFFALSE 24878
// exit ;
24876: GO 24907
// for i in tmp do
24878: LD_ADDR_VAR 0 1
24882: PUSH
24883: LD_VAR 0 2
24887: PUSH
24888: FOR_IN
24889: IFFALSE 24905
// SetBLevel ( i , 10 ) ;
24891: LD_VAR 0 1
24895: PPUSH
24896: LD_INT 10
24898: PPUSH
24899: CALL_OW 241
24903: GO 24888
24905: POP
24906: POP
// end ;
24907: PPOPN 2
24909: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24910: LD_EXP 75
24914: PUSH
24915: LD_EXP 92
24919: AND
24920: IFFALSE 25031
24922: GO 24924
24924: DISABLE
24925: LD_INT 0
24927: PPUSH
24928: PPUSH
24929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24930: LD_ADDR_VAR 0 3
24934: PUSH
24935: LD_INT 22
24937: PUSH
24938: LD_OWVAR 2
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 25
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 69
24965: ST_TO_ADDR
// if not tmp then
24966: LD_VAR 0 3
24970: NOT
24971: IFFALSE 24975
// exit ;
24973: GO 25031
// un := tmp [ rand ( 1 , tmp ) ] ;
24975: LD_ADDR_VAR 0 2
24979: PUSH
24980: LD_VAR 0 3
24984: PUSH
24985: LD_INT 1
24987: PPUSH
24988: LD_VAR 0 3
24992: PPUSH
24993: CALL_OW 12
24997: ARRAY
24998: ST_TO_ADDR
// if Crawls ( un ) then
24999: LD_VAR 0 2
25003: PPUSH
25004: CALL_OW 318
25008: IFFALSE 25019
// ComWalk ( un ) ;
25010: LD_VAR 0 2
25014: PPUSH
25015: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25019: LD_VAR 0 2
25023: PPUSH
25024: LD_INT 5
25026: PPUSH
25027: CALL_OW 336
// end ;
25031: PPOPN 3
25033: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25034: LD_EXP 75
25038: PUSH
25039: LD_EXP 93
25043: AND
25044: PUSH
25045: LD_OWVAR 67
25049: PUSH
25050: LD_INT 3
25052: LESS
25053: AND
25054: IFFALSE 25073
25056: GO 25058
25058: DISABLE
// Difficulty := Difficulty + 1 ;
25059: LD_ADDR_OWVAR 67
25063: PUSH
25064: LD_OWVAR 67
25068: PUSH
25069: LD_INT 1
25071: PLUS
25072: ST_TO_ADDR
25073: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25074: LD_EXP 75
25078: PUSH
25079: LD_EXP 94
25083: AND
25084: IFFALSE 25187
25086: GO 25088
25088: DISABLE
25089: LD_INT 0
25091: PPUSH
// begin for i := 1 to 5 do
25092: LD_ADDR_VAR 0 1
25096: PUSH
25097: DOUBLE
25098: LD_INT 1
25100: DEC
25101: ST_TO_ADDR
25102: LD_INT 5
25104: PUSH
25105: FOR_TO
25106: IFFALSE 25185
// begin uc_nation := nation_nature ;
25108: LD_ADDR_OWVAR 21
25112: PUSH
25113: LD_INT 0
25115: ST_TO_ADDR
// uc_side := 0 ;
25116: LD_ADDR_OWVAR 20
25120: PUSH
25121: LD_INT 0
25123: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25124: LD_ADDR_OWVAR 29
25128: PUSH
25129: LD_INT 12
25131: PUSH
25132: LD_INT 12
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: ST_TO_ADDR
// hc_agressivity := 20 ;
25139: LD_ADDR_OWVAR 35
25143: PUSH
25144: LD_INT 20
25146: ST_TO_ADDR
// hc_class := class_tiger ;
25147: LD_ADDR_OWVAR 28
25151: PUSH
25152: LD_INT 14
25154: ST_TO_ADDR
// hc_gallery :=  ;
25155: LD_ADDR_OWVAR 33
25159: PUSH
25160: LD_STRING 
25162: ST_TO_ADDR
// hc_name :=  ;
25163: LD_ADDR_OWVAR 26
25167: PUSH
25168: LD_STRING 
25170: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25171: CALL_OW 44
25175: PPUSH
25176: LD_INT 0
25178: PPUSH
25179: CALL_OW 51
// end ;
25183: GO 25105
25185: POP
25186: POP
// end ;
25187: PPOPN 1
25189: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25190: LD_EXP 75
25194: PUSH
25195: LD_EXP 95
25199: AND
25200: IFFALSE 25209
25202: GO 25204
25204: DISABLE
// StreamSibBomb ;
25205: CALL 25210 0 0
25209: END
// export function StreamSibBomb ; var i , x , y ; begin
25210: LD_INT 0
25212: PPUSH
25213: PPUSH
25214: PPUSH
25215: PPUSH
// result := false ;
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_INT 0
25223: ST_TO_ADDR
// for i := 1 to 16 do
25224: LD_ADDR_VAR 0 2
25228: PUSH
25229: DOUBLE
25230: LD_INT 1
25232: DEC
25233: ST_TO_ADDR
25234: LD_INT 16
25236: PUSH
25237: FOR_TO
25238: IFFALSE 25437
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25240: LD_ADDR_VAR 0 3
25244: PUSH
25245: LD_INT 10
25247: PUSH
25248: LD_INT 20
25250: PUSH
25251: LD_INT 30
25253: PUSH
25254: LD_INT 40
25256: PUSH
25257: LD_INT 50
25259: PUSH
25260: LD_INT 60
25262: PUSH
25263: LD_INT 70
25265: PUSH
25266: LD_INT 80
25268: PUSH
25269: LD_INT 90
25271: PUSH
25272: LD_INT 100
25274: PUSH
25275: LD_INT 110
25277: PUSH
25278: LD_INT 120
25280: PUSH
25281: LD_INT 130
25283: PUSH
25284: LD_INT 140
25286: PUSH
25287: LD_INT 150
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: PPUSH
25310: LD_INT 15
25312: PPUSH
25313: CALL_OW 12
25317: ARRAY
25318: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25319: LD_ADDR_VAR 0 4
25323: PUSH
25324: LD_INT 10
25326: PUSH
25327: LD_INT 20
25329: PUSH
25330: LD_INT 30
25332: PUSH
25333: LD_INT 40
25335: PUSH
25336: LD_INT 50
25338: PUSH
25339: LD_INT 60
25341: PUSH
25342: LD_INT 70
25344: PUSH
25345: LD_INT 80
25347: PUSH
25348: LD_INT 90
25350: PUSH
25351: LD_INT 100
25353: PUSH
25354: LD_INT 110
25356: PUSH
25357: LD_INT 120
25359: PUSH
25360: LD_INT 130
25362: PUSH
25363: LD_INT 140
25365: PUSH
25366: LD_INT 150
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: PPUSH
25389: LD_INT 15
25391: PPUSH
25392: CALL_OW 12
25396: ARRAY
25397: ST_TO_ADDR
// if ValidHex ( x , y ) then
25398: LD_VAR 0 3
25402: PPUSH
25403: LD_VAR 0 4
25407: PPUSH
25408: CALL_OW 488
25412: IFFALSE 25435
// begin result := [ x , y ] ;
25414: LD_ADDR_VAR 0 1
25418: PUSH
25419: LD_VAR 0 3
25423: PUSH
25424: LD_VAR 0 4
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: ST_TO_ADDR
// break ;
25433: GO 25437
// end ; end ;
25435: GO 25237
25437: POP
25438: POP
// if result then
25439: LD_VAR 0 1
25443: IFFALSE 25503
// begin ToLua ( playSibBomb() ) ;
25445: LD_STRING playSibBomb()
25447: PPUSH
25448: CALL_OW 559
// wait ( 0 0$14 ) ;
25452: LD_INT 490
25454: PPUSH
25455: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25459: LD_VAR 0 1
25463: PUSH
25464: LD_INT 1
25466: ARRAY
25467: PPUSH
25468: LD_VAR 0 1
25472: PUSH
25473: LD_INT 2
25475: ARRAY
25476: PPUSH
25477: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25481: LD_VAR 0 1
25485: PUSH
25486: LD_INT 1
25488: ARRAY
25489: PPUSH
25490: LD_VAR 0 1
25494: PUSH
25495: LD_INT 2
25497: ARRAY
25498: PPUSH
25499: CALL_OW 429
// end ; end ;
25503: LD_VAR 0 1
25507: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25508: LD_EXP 75
25512: PUSH
25513: LD_EXP 97
25517: AND
25518: IFFALSE 25530
25520: GO 25522
25522: DISABLE
// YouLost (  ) ;
25523: LD_STRING 
25525: PPUSH
25526: CALL_OW 104
25530: END
// every 0 0$1 trigger StreamModeActive and sFog do
25531: LD_EXP 75
25535: PUSH
25536: LD_EXP 96
25540: AND
25541: IFFALSE 25555
25543: GO 25545
25545: DISABLE
// FogOff ( your_side ) ;
25546: LD_OWVAR 2
25550: PPUSH
25551: CALL_OW 344
25555: END
// every 0 0$1 trigger StreamModeActive and sSun do
25556: LD_EXP 75
25560: PUSH
25561: LD_EXP 98
25565: AND
25566: IFFALSE 25594
25568: GO 25570
25570: DISABLE
// begin solar_recharge_percent := 0 ;
25571: LD_ADDR_OWVAR 79
25575: PUSH
25576: LD_INT 0
25578: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25579: LD_INT 10500
25581: PPUSH
25582: CALL_OW 67
// solar_recharge_percent := 100 ;
25586: LD_ADDR_OWVAR 79
25590: PUSH
25591: LD_INT 100
25593: ST_TO_ADDR
// end ;
25594: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25595: LD_EXP 75
25599: PUSH
25600: LD_EXP 99
25604: AND
25605: IFFALSE 25844
25607: GO 25609
25609: DISABLE
25610: LD_INT 0
25612: PPUSH
25613: PPUSH
25614: PPUSH
// begin tmp := [ ] ;
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: EMPTY
25621: ST_TO_ADDR
// for i := 1 to 6 do
25622: LD_ADDR_VAR 0 1
25626: PUSH
25627: DOUBLE
25628: LD_INT 1
25630: DEC
25631: ST_TO_ADDR
25632: LD_INT 6
25634: PUSH
25635: FOR_TO
25636: IFFALSE 25741
// begin uc_nation := nation_nature ;
25638: LD_ADDR_OWVAR 21
25642: PUSH
25643: LD_INT 0
25645: ST_TO_ADDR
// uc_side := 0 ;
25646: LD_ADDR_OWVAR 20
25650: PUSH
25651: LD_INT 0
25653: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25654: LD_ADDR_OWVAR 29
25658: PUSH
25659: LD_INT 12
25661: PUSH
25662: LD_INT 12
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: ST_TO_ADDR
// hc_agressivity := 20 ;
25669: LD_ADDR_OWVAR 35
25673: PUSH
25674: LD_INT 20
25676: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25677: LD_ADDR_OWVAR 28
25681: PUSH
25682: LD_INT 17
25684: ST_TO_ADDR
// hc_gallery :=  ;
25685: LD_ADDR_OWVAR 33
25689: PUSH
25690: LD_STRING 
25692: ST_TO_ADDR
// hc_name :=  ;
25693: LD_ADDR_OWVAR 26
25697: PUSH
25698: LD_STRING 
25700: ST_TO_ADDR
// un := CreateHuman ;
25701: LD_ADDR_VAR 0 2
25705: PUSH
25706: CALL_OW 44
25710: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25711: LD_VAR 0 2
25715: PPUSH
25716: LD_INT 1
25718: PPUSH
25719: CALL_OW 51
// tmp := tmp ^ un ;
25723: LD_ADDR_VAR 0 3
25727: PUSH
25728: LD_VAR 0 3
25732: PUSH
25733: LD_VAR 0 2
25737: ADD
25738: ST_TO_ADDR
// end ;
25739: GO 25635
25741: POP
25742: POP
// repeat wait ( 0 0$1 ) ;
25743: LD_INT 35
25745: PPUSH
25746: CALL_OW 67
// for un in tmp do
25750: LD_ADDR_VAR 0 2
25754: PUSH
25755: LD_VAR 0 3
25759: PUSH
25760: FOR_IN
25761: IFFALSE 25835
// begin if IsDead ( un ) then
25763: LD_VAR 0 2
25767: PPUSH
25768: CALL_OW 301
25772: IFFALSE 25792
// begin tmp := tmp diff un ;
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: LD_VAR 0 3
25783: PUSH
25784: LD_VAR 0 2
25788: DIFF
25789: ST_TO_ADDR
// continue ;
25790: GO 25760
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25792: LD_VAR 0 2
25796: PPUSH
25797: LD_INT 3
25799: PUSH
25800: LD_INT 22
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 69
25818: PPUSH
25819: LD_VAR 0 2
25823: PPUSH
25824: CALL_OW 74
25828: PPUSH
25829: CALL_OW 115
// end ;
25833: GO 25760
25835: POP
25836: POP
// until not tmp ;
25837: LD_VAR 0 3
25841: NOT
25842: IFFALSE 25743
// end ;
25844: PPOPN 3
25846: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25847: LD_EXP 75
25851: PUSH
25852: LD_EXP 100
25856: AND
25857: IFFALSE 25911
25859: GO 25861
25861: DISABLE
// begin ToLua ( displayTroll(); ) ;
25862: LD_STRING displayTroll();
25864: PPUSH
25865: CALL_OW 559
// wait ( 3 3$00 ) ;
25869: LD_INT 6300
25871: PPUSH
25872: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25876: LD_STRING hideTroll();
25878: PPUSH
25879: CALL_OW 559
// wait ( 1 1$00 ) ;
25883: LD_INT 2100
25885: PPUSH
25886: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25890: LD_STRING displayTroll();
25892: PPUSH
25893: CALL_OW 559
// wait ( 1 1$00 ) ;
25897: LD_INT 2100
25899: PPUSH
25900: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25904: LD_STRING hideTroll();
25906: PPUSH
25907: CALL_OW 559
// end ;
25911: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25912: LD_EXP 75
25916: PUSH
25917: LD_EXP 101
25921: AND
25922: IFFALSE 25985
25924: GO 25926
25926: DISABLE
25927: LD_INT 0
25929: PPUSH
// begin p := 0 ;
25930: LD_ADDR_VAR 0 1
25934: PUSH
25935: LD_INT 0
25937: ST_TO_ADDR
// repeat game_speed := 1 ;
25938: LD_ADDR_OWVAR 65
25942: PUSH
25943: LD_INT 1
25945: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25946: LD_INT 35
25948: PPUSH
25949: CALL_OW 67
// p := p + 1 ;
25953: LD_ADDR_VAR 0 1
25957: PUSH
25958: LD_VAR 0 1
25962: PUSH
25963: LD_INT 1
25965: PLUS
25966: ST_TO_ADDR
// until p >= 60 ;
25967: LD_VAR 0 1
25971: PUSH
25972: LD_INT 60
25974: GREATEREQUAL
25975: IFFALSE 25938
// game_speed := 4 ;
25977: LD_ADDR_OWVAR 65
25981: PUSH
25982: LD_INT 4
25984: ST_TO_ADDR
// end ;
25985: PPOPN 1
25987: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25988: LD_EXP 75
25992: PUSH
25993: LD_EXP 102
25997: AND
25998: IFFALSE 26144
26000: GO 26002
26002: DISABLE
26003: LD_INT 0
26005: PPUSH
26006: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26007: LD_ADDR_VAR 0 1
26011: PUSH
26012: LD_INT 22
26014: PUSH
26015: LD_OWVAR 2
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 30
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PPUSH
26056: CALL_OW 69
26060: ST_TO_ADDR
// if not depot then
26061: LD_VAR 0 1
26065: NOT
26066: IFFALSE 26070
// exit ;
26068: GO 26144
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26070: LD_ADDR_VAR 0 2
26074: PUSH
26075: LD_VAR 0 1
26079: PUSH
26080: LD_INT 1
26082: PPUSH
26083: LD_VAR 0 1
26087: PPUSH
26088: CALL_OW 12
26092: ARRAY
26093: PPUSH
26094: CALL_OW 274
26098: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26099: LD_VAR 0 2
26103: PPUSH
26104: LD_INT 1
26106: PPUSH
26107: LD_INT 0
26109: PPUSH
26110: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26114: LD_VAR 0 2
26118: PPUSH
26119: LD_INT 2
26121: PPUSH
26122: LD_INT 0
26124: PPUSH
26125: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26129: LD_VAR 0 2
26133: PPUSH
26134: LD_INT 3
26136: PPUSH
26137: LD_INT 0
26139: PPUSH
26140: CALL_OW 277
// end ;
26144: PPOPN 2
26146: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26147: LD_EXP 75
26151: PUSH
26152: LD_EXP 103
26156: AND
26157: IFFALSE 26254
26159: GO 26161
26161: DISABLE
26162: LD_INT 0
26164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26165: LD_ADDR_VAR 0 1
26169: PUSH
26170: LD_INT 22
26172: PUSH
26173: LD_OWVAR 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 21
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 3
26194: PUSH
26195: LD_INT 23
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: LIST
26213: PPUSH
26214: CALL_OW 69
26218: ST_TO_ADDR
// if not tmp then
26219: LD_VAR 0 1
26223: NOT
26224: IFFALSE 26228
// exit ;
26226: GO 26254
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26228: LD_VAR 0 1
26232: PUSH
26233: LD_INT 1
26235: PPUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 12
26245: ARRAY
26246: PPUSH
26247: LD_INT 200
26249: PPUSH
26250: CALL_OW 234
// end ;
26254: PPOPN 1
26256: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26257: LD_EXP 75
26261: PUSH
26262: LD_EXP 104
26266: AND
26267: IFFALSE 26346
26269: GO 26271
26271: DISABLE
26272: LD_INT 0
26274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26275: LD_ADDR_VAR 0 1
26279: PUSH
26280: LD_INT 22
26282: PUSH
26283: LD_OWVAR 2
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 21
26294: PUSH
26295: LD_INT 2
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PPUSH
26306: CALL_OW 69
26310: ST_TO_ADDR
// if not tmp then
26311: LD_VAR 0 1
26315: NOT
26316: IFFALSE 26320
// exit ;
26318: GO 26346
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26320: LD_VAR 0 1
26324: PUSH
26325: LD_INT 1
26327: PPUSH
26328: LD_VAR 0 1
26332: PPUSH
26333: CALL_OW 12
26337: ARRAY
26338: PPUSH
26339: LD_INT 60
26341: PPUSH
26342: CALL_OW 234
// end ;
26346: PPOPN 1
26348: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26349: LD_EXP 75
26353: PUSH
26354: LD_EXP 105
26358: AND
26359: IFFALSE 26458
26361: GO 26363
26363: DISABLE
26364: LD_INT 0
26366: PPUSH
26367: PPUSH
// begin enable ;
26368: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26369: LD_ADDR_VAR 0 1
26373: PUSH
26374: LD_INT 22
26376: PUSH
26377: LD_OWVAR 2
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 61
26388: PUSH
26389: EMPTY
26390: LIST
26391: PUSH
26392: LD_INT 33
26394: PUSH
26395: LD_INT 2
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: LIST
26406: PPUSH
26407: CALL_OW 69
26411: ST_TO_ADDR
// if not tmp then
26412: LD_VAR 0 1
26416: NOT
26417: IFFALSE 26421
// exit ;
26419: GO 26458
// for i in tmp do
26421: LD_ADDR_VAR 0 2
26425: PUSH
26426: LD_VAR 0 1
26430: PUSH
26431: FOR_IN
26432: IFFALSE 26456
// if IsControledBy ( i ) then
26434: LD_VAR 0 2
26438: PPUSH
26439: CALL_OW 312
26443: IFFALSE 26454
// ComUnlink ( i ) ;
26445: LD_VAR 0 2
26449: PPUSH
26450: CALL_OW 136
26454: GO 26431
26456: POP
26457: POP
// end ;
26458: PPOPN 2
26460: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26461: LD_EXP 75
26465: PUSH
26466: LD_EXP 106
26470: AND
26471: IFFALSE 26611
26473: GO 26475
26475: DISABLE
26476: LD_INT 0
26478: PPUSH
26479: PPUSH
// begin ToLua ( displayPowell(); ) ;
26480: LD_STRING displayPowell();
26482: PPUSH
26483: CALL_OW 559
// uc_side := 0 ;
26487: LD_ADDR_OWVAR 20
26491: PUSH
26492: LD_INT 0
26494: ST_TO_ADDR
// uc_nation := 2 ;
26495: LD_ADDR_OWVAR 21
26499: PUSH
26500: LD_INT 2
26502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26503: LD_ADDR_OWVAR 37
26507: PUSH
26508: LD_INT 14
26510: ST_TO_ADDR
// vc_engine := engine_siberite ;
26511: LD_ADDR_OWVAR 39
26515: PUSH
26516: LD_INT 3
26518: ST_TO_ADDR
// vc_control := control_apeman ;
26519: LD_ADDR_OWVAR 38
26523: PUSH
26524: LD_INT 5
26526: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26527: LD_ADDR_OWVAR 40
26531: PUSH
26532: LD_INT 29
26534: ST_TO_ADDR
// un := CreateVehicle ;
26535: LD_ADDR_VAR 0 2
26539: PUSH
26540: CALL_OW 45
26544: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26545: LD_VAR 0 2
26549: PPUSH
26550: LD_INT 1
26552: PPUSH
26553: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26557: LD_INT 35
26559: PPUSH
26560: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26564: LD_VAR 0 2
26568: PPUSH
26569: LD_INT 22
26571: PUSH
26572: LD_OWVAR 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PPUSH
26581: CALL_OW 69
26585: PPUSH
26586: LD_VAR 0 2
26590: PPUSH
26591: CALL_OW 74
26595: PPUSH
26596: CALL_OW 115
// until IsDead ( un ) ;
26600: LD_VAR 0 2
26604: PPUSH
26605: CALL_OW 301
26609: IFFALSE 26557
// end ;
26611: PPOPN 2
26613: END
// every 0 0$1 trigger StreamModeActive and sStu do
26614: LD_EXP 75
26618: PUSH
26619: LD_EXP 114
26623: AND
26624: IFFALSE 26640
26626: GO 26628
26628: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26629: LD_STRING displayStucuk();
26631: PPUSH
26632: CALL_OW 559
// ResetFog ;
26636: CALL_OW 335
// end ;
26640: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26641: LD_EXP 75
26645: PUSH
26646: LD_EXP 107
26650: AND
26651: IFFALSE 26792
26653: GO 26655
26655: DISABLE
26656: LD_INT 0
26658: PPUSH
26659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26660: LD_ADDR_VAR 0 2
26664: PUSH
26665: LD_INT 22
26667: PUSH
26668: LD_OWVAR 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 21
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PPUSH
26691: CALL_OW 69
26695: ST_TO_ADDR
// if not tmp then
26696: LD_VAR 0 2
26700: NOT
26701: IFFALSE 26705
// exit ;
26703: GO 26792
// un := tmp [ rand ( 1 , tmp ) ] ;
26705: LD_ADDR_VAR 0 1
26709: PUSH
26710: LD_VAR 0 2
26714: PUSH
26715: LD_INT 1
26717: PPUSH
26718: LD_VAR 0 2
26722: PPUSH
26723: CALL_OW 12
26727: ARRAY
26728: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26729: LD_VAR 0 1
26733: PPUSH
26734: LD_INT 0
26736: PPUSH
26737: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26741: LD_VAR 0 1
26745: PPUSH
26746: LD_OWVAR 3
26750: PUSH
26751: LD_VAR 0 1
26755: DIFF
26756: PPUSH
26757: LD_VAR 0 1
26761: PPUSH
26762: CALL_OW 74
26766: PPUSH
26767: CALL_OW 115
// wait ( 0 0$20 ) ;
26771: LD_INT 700
26773: PPUSH
26774: CALL_OW 67
// SetSide ( un , your_side ) ;
26778: LD_VAR 0 1
26782: PPUSH
26783: LD_OWVAR 2
26787: PPUSH
26788: CALL_OW 235
// end ;
26792: PPOPN 2
26794: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26795: LD_EXP 75
26799: PUSH
26800: LD_EXP 108
26804: AND
26805: IFFALSE 26911
26807: GO 26809
26809: DISABLE
26810: LD_INT 0
26812: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26813: LD_ADDR_VAR 0 1
26817: PUSH
26818: LD_INT 22
26820: PUSH
26821: LD_OWVAR 2
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 2
26832: PUSH
26833: LD_INT 30
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 30
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PPUSH
26862: CALL_OW 69
26866: ST_TO_ADDR
// if not depot then
26867: LD_VAR 0 1
26871: NOT
26872: IFFALSE 26876
// exit ;
26874: GO 26911
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26876: LD_VAR 0 1
26880: PUSH
26881: LD_INT 1
26883: ARRAY
26884: PPUSH
26885: CALL_OW 250
26889: PPUSH
26890: LD_VAR 0 1
26894: PUSH
26895: LD_INT 1
26897: ARRAY
26898: PPUSH
26899: CALL_OW 251
26903: PPUSH
26904: LD_INT 70
26906: PPUSH
26907: CALL_OW 495
// end ;
26911: PPOPN 1
26913: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26914: LD_EXP 75
26918: PUSH
26919: LD_EXP 109
26923: AND
26924: IFFALSE 27135
26926: GO 26928
26928: DISABLE
26929: LD_INT 0
26931: PPUSH
26932: PPUSH
26933: PPUSH
26934: PPUSH
26935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26936: LD_ADDR_VAR 0 5
26940: PUSH
26941: LD_INT 22
26943: PUSH
26944: LD_OWVAR 2
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 21
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PPUSH
26967: CALL_OW 69
26971: ST_TO_ADDR
// if not tmp then
26972: LD_VAR 0 5
26976: NOT
26977: IFFALSE 26981
// exit ;
26979: GO 27135
// for i in tmp do
26981: LD_ADDR_VAR 0 1
26985: PUSH
26986: LD_VAR 0 5
26990: PUSH
26991: FOR_IN
26992: IFFALSE 27133
// begin d := rand ( 0 , 5 ) ;
26994: LD_ADDR_VAR 0 4
26998: PUSH
26999: LD_INT 0
27001: PPUSH
27002: LD_INT 5
27004: PPUSH
27005: CALL_OW 12
27009: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27010: LD_ADDR_VAR 0 2
27014: PUSH
27015: LD_VAR 0 1
27019: PPUSH
27020: CALL_OW 250
27024: PPUSH
27025: LD_VAR 0 4
27029: PPUSH
27030: LD_INT 3
27032: PPUSH
27033: LD_INT 12
27035: PPUSH
27036: CALL_OW 12
27040: PPUSH
27041: CALL_OW 272
27045: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27046: LD_ADDR_VAR 0 3
27050: PUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 251
27060: PPUSH
27061: LD_VAR 0 4
27065: PPUSH
27066: LD_INT 3
27068: PPUSH
27069: LD_INT 12
27071: PPUSH
27072: CALL_OW 12
27076: PPUSH
27077: CALL_OW 273
27081: ST_TO_ADDR
// if ValidHex ( x , y ) then
27082: LD_VAR 0 2
27086: PPUSH
27087: LD_VAR 0 3
27091: PPUSH
27092: CALL_OW 488
27096: IFFALSE 27131
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27098: LD_VAR 0 1
27102: PPUSH
27103: LD_VAR 0 2
27107: PPUSH
27108: LD_VAR 0 3
27112: PPUSH
27113: LD_INT 3
27115: PPUSH
27116: LD_INT 6
27118: PPUSH
27119: CALL_OW 12
27123: PPUSH
27124: LD_INT 1
27126: PPUSH
27127: CALL_OW 483
// end ;
27131: GO 26991
27133: POP
27134: POP
// end ;
27135: PPOPN 5
27137: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27138: LD_EXP 75
27142: PUSH
27143: LD_EXP 110
27147: AND
27148: IFFALSE 27242
27150: GO 27152
27152: DISABLE
27153: LD_INT 0
27155: PPUSH
27156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27157: LD_ADDR_VAR 0 2
27161: PUSH
27162: LD_INT 22
27164: PUSH
27165: LD_OWVAR 2
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 32
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 21
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: PPUSH
27199: CALL_OW 69
27203: ST_TO_ADDR
// if not tmp then
27204: LD_VAR 0 2
27208: NOT
27209: IFFALSE 27213
// exit ;
27211: GO 27242
// for i in tmp do
27213: LD_ADDR_VAR 0 1
27217: PUSH
27218: LD_VAR 0 2
27222: PUSH
27223: FOR_IN
27224: IFFALSE 27240
// SetFuel ( i , 0 ) ;
27226: LD_VAR 0 1
27230: PPUSH
27231: LD_INT 0
27233: PPUSH
27234: CALL_OW 240
27238: GO 27223
27240: POP
27241: POP
// end ;
27242: PPOPN 2
27244: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27245: LD_EXP 75
27249: PUSH
27250: LD_EXP 111
27254: AND
27255: IFFALSE 27321
27257: GO 27259
27259: DISABLE
27260: LD_INT 0
27262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27263: LD_ADDR_VAR 0 1
27267: PUSH
27268: LD_INT 22
27270: PUSH
27271: LD_OWVAR 2
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 30
27282: PUSH
27283: LD_INT 29
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PPUSH
27294: CALL_OW 69
27298: ST_TO_ADDR
// if not tmp then
27299: LD_VAR 0 1
27303: NOT
27304: IFFALSE 27308
// exit ;
27306: GO 27321
// DestroyUnit ( tmp [ 1 ] ) ;
27308: LD_VAR 0 1
27312: PUSH
27313: LD_INT 1
27315: ARRAY
27316: PPUSH
27317: CALL_OW 65
// end ;
27321: PPOPN 1
27323: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27324: LD_EXP 75
27328: PUSH
27329: LD_EXP 113
27333: AND
27334: IFFALSE 27463
27336: GO 27338
27338: DISABLE
27339: LD_INT 0
27341: PPUSH
// begin uc_side := 0 ;
27342: LD_ADDR_OWVAR 20
27346: PUSH
27347: LD_INT 0
27349: ST_TO_ADDR
// uc_nation := nation_arabian ;
27350: LD_ADDR_OWVAR 21
27354: PUSH
27355: LD_INT 2
27357: ST_TO_ADDR
// hc_gallery :=  ;
27358: LD_ADDR_OWVAR 33
27362: PUSH
27363: LD_STRING 
27365: ST_TO_ADDR
// hc_name :=  ;
27366: LD_ADDR_OWVAR 26
27370: PUSH
27371: LD_STRING 
27373: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27374: LD_INT 1
27376: PPUSH
27377: LD_INT 11
27379: PPUSH
27380: LD_INT 10
27382: PPUSH
27383: CALL_OW 380
// un := CreateHuman ;
27387: LD_ADDR_VAR 0 1
27391: PUSH
27392: CALL_OW 44
27396: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27397: LD_VAR 0 1
27401: PPUSH
27402: LD_INT 1
27404: PPUSH
27405: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27409: LD_INT 35
27411: PPUSH
27412: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27416: LD_VAR 0 1
27420: PPUSH
27421: LD_INT 22
27423: PUSH
27424: LD_OWVAR 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PPUSH
27433: CALL_OW 69
27437: PPUSH
27438: LD_VAR 0 1
27442: PPUSH
27443: CALL_OW 74
27447: PPUSH
27448: CALL_OW 115
// until IsDead ( un ) ;
27452: LD_VAR 0 1
27456: PPUSH
27457: CALL_OW 301
27461: IFFALSE 27409
// end ;
27463: PPOPN 1
27465: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27466: LD_EXP 75
27470: PUSH
27471: LD_EXP 115
27475: AND
27476: IFFALSE 27488
27478: GO 27480
27480: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27481: LD_STRING earthquake(getX(game), 0, 32)
27483: PPUSH
27484: CALL_OW 559
27488: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27489: LD_EXP 75
27493: PUSH
27494: LD_EXP 116
27498: AND
27499: IFFALSE 27590
27501: GO 27503
27503: DISABLE
27504: LD_INT 0
27506: PPUSH
// begin enable ;
27507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27508: LD_ADDR_VAR 0 1
27512: PUSH
27513: LD_INT 22
27515: PUSH
27516: LD_OWVAR 2
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 21
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 33
27537: PUSH
27538: LD_INT 3
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: PPUSH
27550: CALL_OW 69
27554: ST_TO_ADDR
// if not tmp then
27555: LD_VAR 0 1
27559: NOT
27560: IFFALSE 27564
// exit ;
27562: GO 27590
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27564: LD_VAR 0 1
27568: PUSH
27569: LD_INT 1
27571: PPUSH
27572: LD_VAR 0 1
27576: PPUSH
27577: CALL_OW 12
27581: ARRAY
27582: PPUSH
27583: LD_INT 1
27585: PPUSH
27586: CALL_OW 234
// end ;
27590: PPOPN 1
27592: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27593: LD_EXP 75
27597: PUSH
27598: LD_EXP 117
27602: AND
27603: IFFALSE 27744
27605: GO 27607
27607: DISABLE
27608: LD_INT 0
27610: PPUSH
27611: PPUSH
27612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27613: LD_ADDR_VAR 0 3
27617: PUSH
27618: LD_INT 22
27620: PUSH
27621: LD_OWVAR 2
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 25
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PPUSH
27644: CALL_OW 69
27648: ST_TO_ADDR
// if not tmp then
27649: LD_VAR 0 3
27653: NOT
27654: IFFALSE 27658
// exit ;
27656: GO 27744
// un := tmp [ rand ( 1 , tmp ) ] ;
27658: LD_ADDR_VAR 0 2
27662: PUSH
27663: LD_VAR 0 3
27667: PUSH
27668: LD_INT 1
27670: PPUSH
27671: LD_VAR 0 3
27675: PPUSH
27676: CALL_OW 12
27680: ARRAY
27681: ST_TO_ADDR
// if Crawls ( un ) then
27682: LD_VAR 0 2
27686: PPUSH
27687: CALL_OW 318
27691: IFFALSE 27702
// ComWalk ( un ) ;
27693: LD_VAR 0 2
27697: PPUSH
27698: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27702: LD_VAR 0 2
27706: PPUSH
27707: LD_INT 9
27709: PPUSH
27710: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27714: LD_INT 28
27716: PPUSH
27717: LD_OWVAR 2
27721: PPUSH
27722: LD_INT 2
27724: PPUSH
27725: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27729: LD_INT 29
27731: PPUSH
27732: LD_OWVAR 2
27736: PPUSH
27737: LD_INT 2
27739: PPUSH
27740: CALL_OW 322
// end ;
27744: PPOPN 3
27746: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27747: LD_EXP 75
27751: PUSH
27752: LD_EXP 118
27756: AND
27757: IFFALSE 27868
27759: GO 27761
27761: DISABLE
27762: LD_INT 0
27764: PPUSH
27765: PPUSH
27766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27767: LD_ADDR_VAR 0 3
27771: PUSH
27772: LD_INT 22
27774: PUSH
27775: LD_OWVAR 2
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 25
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PPUSH
27798: CALL_OW 69
27802: ST_TO_ADDR
// if not tmp then
27803: LD_VAR 0 3
27807: NOT
27808: IFFALSE 27812
// exit ;
27810: GO 27868
// un := tmp [ rand ( 1 , tmp ) ] ;
27812: LD_ADDR_VAR 0 2
27816: PUSH
27817: LD_VAR 0 3
27821: PUSH
27822: LD_INT 1
27824: PPUSH
27825: LD_VAR 0 3
27829: PPUSH
27830: CALL_OW 12
27834: ARRAY
27835: ST_TO_ADDR
// if Crawls ( un ) then
27836: LD_VAR 0 2
27840: PPUSH
27841: CALL_OW 318
27845: IFFALSE 27856
// ComWalk ( un ) ;
27847: LD_VAR 0 2
27851: PPUSH
27852: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27856: LD_VAR 0 2
27860: PPUSH
27861: LD_INT 8
27863: PPUSH
27864: CALL_OW 336
// end ;
27868: PPOPN 3
27870: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27871: LD_EXP 75
27875: PUSH
27876: LD_EXP 119
27880: AND
27881: IFFALSE 28025
27883: GO 27885
27885: DISABLE
27886: LD_INT 0
27888: PPUSH
27889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27890: LD_ADDR_VAR 0 2
27894: PUSH
27895: LD_INT 22
27897: PUSH
27898: LD_OWVAR 2
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 21
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 34
27922: PUSH
27923: LD_INT 12
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 34
27932: PUSH
27933: LD_INT 51
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 34
27942: PUSH
27943: LD_INT 32
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: PPUSH
27961: CALL_OW 69
27965: ST_TO_ADDR
// if not tmp then
27966: LD_VAR 0 2
27970: NOT
27971: IFFALSE 27975
// exit ;
27973: GO 28025
// for i in tmp do
27975: LD_ADDR_VAR 0 1
27979: PUSH
27980: LD_VAR 0 2
27984: PUSH
27985: FOR_IN
27986: IFFALSE 28023
// if GetCargo ( i , mat_artifact ) = 0 then
27988: LD_VAR 0 1
27992: PPUSH
27993: LD_INT 4
27995: PPUSH
27996: CALL_OW 289
28000: PUSH
28001: LD_INT 0
28003: EQUAL
28004: IFFALSE 28021
// SetCargo ( i , mat_siberit , 100 ) ;
28006: LD_VAR 0 1
28010: PPUSH
28011: LD_INT 3
28013: PPUSH
28014: LD_INT 100
28016: PPUSH
28017: CALL_OW 290
28021: GO 27985
28023: POP
28024: POP
// end ;
28025: PPOPN 2
28027: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28028: LD_EXP 75
28032: PUSH
28033: LD_EXP 120
28037: AND
28038: IFFALSE 28221
28040: GO 28042
28042: DISABLE
28043: LD_INT 0
28045: PPUSH
28046: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28047: LD_ADDR_VAR 0 2
28051: PUSH
28052: LD_INT 22
28054: PUSH
28055: LD_OWVAR 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: CALL_OW 69
28068: ST_TO_ADDR
// if not tmp then
28069: LD_VAR 0 2
28073: NOT
28074: IFFALSE 28078
// exit ;
28076: GO 28221
// for i := 1 to 2 do
28078: LD_ADDR_VAR 0 1
28082: PUSH
28083: DOUBLE
28084: LD_INT 1
28086: DEC
28087: ST_TO_ADDR
28088: LD_INT 2
28090: PUSH
28091: FOR_TO
28092: IFFALSE 28219
// begin uc_side := your_side ;
28094: LD_ADDR_OWVAR 20
28098: PUSH
28099: LD_OWVAR 2
28103: ST_TO_ADDR
// uc_nation := nation_american ;
28104: LD_ADDR_OWVAR 21
28108: PUSH
28109: LD_INT 1
28111: ST_TO_ADDR
// vc_chassis := us_morphling ;
28112: LD_ADDR_OWVAR 37
28116: PUSH
28117: LD_INT 5
28119: ST_TO_ADDR
// vc_engine := engine_siberite ;
28120: LD_ADDR_OWVAR 39
28124: PUSH
28125: LD_INT 3
28127: ST_TO_ADDR
// vc_control := control_computer ;
28128: LD_ADDR_OWVAR 38
28132: PUSH
28133: LD_INT 3
28135: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28136: LD_ADDR_OWVAR 40
28140: PUSH
28141: LD_INT 10
28143: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28144: LD_VAR 0 2
28148: PUSH
28149: LD_INT 1
28151: ARRAY
28152: PPUSH
28153: CALL_OW 310
28157: NOT
28158: IFFALSE 28205
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28160: CALL_OW 45
28164: PPUSH
28165: LD_VAR 0 2
28169: PUSH
28170: LD_INT 1
28172: ARRAY
28173: PPUSH
28174: CALL_OW 250
28178: PPUSH
28179: LD_VAR 0 2
28183: PUSH
28184: LD_INT 1
28186: ARRAY
28187: PPUSH
28188: CALL_OW 251
28192: PPUSH
28193: LD_INT 12
28195: PPUSH
28196: LD_INT 1
28198: PPUSH
28199: CALL_OW 50
28203: GO 28217
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28205: CALL_OW 45
28209: PPUSH
28210: LD_INT 1
28212: PPUSH
28213: CALL_OW 51
// end ;
28217: GO 28091
28219: POP
28220: POP
// end ;
28221: PPOPN 2
28223: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28224: LD_EXP 75
28228: PUSH
28229: LD_EXP 121
28233: AND
28234: IFFALSE 28456
28236: GO 28238
28238: DISABLE
28239: LD_INT 0
28241: PPUSH
28242: PPUSH
28243: PPUSH
28244: PPUSH
28245: PPUSH
28246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28247: LD_ADDR_VAR 0 6
28251: PUSH
28252: LD_INT 22
28254: PUSH
28255: LD_OWVAR 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 21
28266: PUSH
28267: LD_INT 1
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 3
28276: PUSH
28277: LD_INT 23
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: PPUSH
28296: CALL_OW 69
28300: ST_TO_ADDR
// if not tmp then
28301: LD_VAR 0 6
28305: NOT
28306: IFFALSE 28310
// exit ;
28308: GO 28456
// s1 := rand ( 1 , 4 ) ;
28310: LD_ADDR_VAR 0 2
28314: PUSH
28315: LD_INT 1
28317: PPUSH
28318: LD_INT 4
28320: PPUSH
28321: CALL_OW 12
28325: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28326: LD_ADDR_VAR 0 4
28330: PUSH
28331: LD_VAR 0 6
28335: PUSH
28336: LD_INT 1
28338: ARRAY
28339: PPUSH
28340: LD_VAR 0 2
28344: PPUSH
28345: CALL_OW 259
28349: ST_TO_ADDR
// if s1 = 1 then
28350: LD_VAR 0 2
28354: PUSH
28355: LD_INT 1
28357: EQUAL
28358: IFFALSE 28378
// s2 := rand ( 2 , 4 ) else
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_INT 2
28367: PPUSH
28368: LD_INT 4
28370: PPUSH
28371: CALL_OW 12
28375: ST_TO_ADDR
28376: GO 28386
// s2 := 1 ;
28378: LD_ADDR_VAR 0 3
28382: PUSH
28383: LD_INT 1
28385: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28386: LD_ADDR_VAR 0 5
28390: PUSH
28391: LD_VAR 0 6
28395: PUSH
28396: LD_INT 1
28398: ARRAY
28399: PPUSH
28400: LD_VAR 0 3
28404: PPUSH
28405: CALL_OW 259
28409: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28410: LD_VAR 0 6
28414: PUSH
28415: LD_INT 1
28417: ARRAY
28418: PPUSH
28419: LD_VAR 0 2
28423: PPUSH
28424: LD_VAR 0 5
28428: PPUSH
28429: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28433: LD_VAR 0 6
28437: PUSH
28438: LD_INT 1
28440: ARRAY
28441: PPUSH
28442: LD_VAR 0 3
28446: PPUSH
28447: LD_VAR 0 4
28451: PPUSH
28452: CALL_OW 237
// end ;
28456: PPOPN 6
28458: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28459: LD_EXP 75
28463: PUSH
28464: LD_EXP 122
28468: AND
28469: IFFALSE 28548
28471: GO 28473
28473: DISABLE
28474: LD_INT 0
28476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28477: LD_ADDR_VAR 0 1
28481: PUSH
28482: LD_INT 22
28484: PUSH
28485: LD_OWVAR 2
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 30
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PPUSH
28508: CALL_OW 69
28512: ST_TO_ADDR
// if not tmp then
28513: LD_VAR 0 1
28517: NOT
28518: IFFALSE 28522
// exit ;
28520: GO 28548
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28522: LD_VAR 0 1
28526: PUSH
28527: LD_INT 1
28529: PPUSH
28530: LD_VAR 0 1
28534: PPUSH
28535: CALL_OW 12
28539: ARRAY
28540: PPUSH
28541: LD_INT 1
28543: PPUSH
28544: CALL_OW 234
// end ;
28548: PPOPN 1
28550: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28551: LD_EXP 75
28555: PUSH
28556: LD_EXP 123
28560: AND
28561: IFFALSE 28673
28563: GO 28565
28565: DISABLE
28566: LD_INT 0
28568: PPUSH
28569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28570: LD_ADDR_VAR 0 2
28574: PUSH
28575: LD_INT 22
28577: PUSH
28578: LD_OWVAR 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: LD_INT 30
28592: PUSH
28593: LD_INT 27
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 30
28602: PUSH
28603: LD_INT 26
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 30
28612: PUSH
28613: LD_INT 28
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PPUSH
28630: CALL_OW 69
28634: ST_TO_ADDR
// if not tmp then
28635: LD_VAR 0 2
28639: NOT
28640: IFFALSE 28644
// exit ;
28642: GO 28673
// for i in tmp do
28644: LD_ADDR_VAR 0 1
28648: PUSH
28649: LD_VAR 0 2
28653: PUSH
28654: FOR_IN
28655: IFFALSE 28671
// SetLives ( i , 1 ) ;
28657: LD_VAR 0 1
28661: PPUSH
28662: LD_INT 1
28664: PPUSH
28665: CALL_OW 234
28669: GO 28654
28671: POP
28672: POP
// end ;
28673: PPOPN 2
28675: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28676: LD_EXP 75
28680: PUSH
28681: LD_EXP 124
28685: AND
28686: IFFALSE 28960
28688: GO 28690
28690: DISABLE
28691: LD_INT 0
28693: PPUSH
28694: PPUSH
28695: PPUSH
// begin i := rand ( 1 , 7 ) ;
28696: LD_ADDR_VAR 0 1
28700: PUSH
28701: LD_INT 1
28703: PPUSH
28704: LD_INT 7
28706: PPUSH
28707: CALL_OW 12
28711: ST_TO_ADDR
// case i of 1 :
28712: LD_VAR 0 1
28716: PUSH
28717: LD_INT 1
28719: DOUBLE
28720: EQUAL
28721: IFTRUE 28725
28723: GO 28735
28725: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28726: LD_STRING earthquake(getX(game), 0, 32)
28728: PPUSH
28729: CALL_OW 559
28733: GO 28960
28735: LD_INT 2
28737: DOUBLE
28738: EQUAL
28739: IFTRUE 28743
28741: GO 28757
28743: POP
// begin ToLua ( displayStucuk(); ) ;
28744: LD_STRING displayStucuk();
28746: PPUSH
28747: CALL_OW 559
// ResetFog ;
28751: CALL_OW 335
// end ; 3 :
28755: GO 28960
28757: LD_INT 3
28759: DOUBLE
28760: EQUAL
28761: IFTRUE 28765
28763: GO 28869
28765: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28766: LD_ADDR_VAR 0 2
28770: PUSH
28771: LD_INT 22
28773: PUSH
28774: LD_OWVAR 2
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 25
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 69
28801: ST_TO_ADDR
// if not tmp then
28802: LD_VAR 0 2
28806: NOT
28807: IFFALSE 28811
// exit ;
28809: GO 28960
// un := tmp [ rand ( 1 , tmp ) ] ;
28811: LD_ADDR_VAR 0 3
28815: PUSH
28816: LD_VAR 0 2
28820: PUSH
28821: LD_INT 1
28823: PPUSH
28824: LD_VAR 0 2
28828: PPUSH
28829: CALL_OW 12
28833: ARRAY
28834: ST_TO_ADDR
// if Crawls ( un ) then
28835: LD_VAR 0 3
28839: PPUSH
28840: CALL_OW 318
28844: IFFALSE 28855
// ComWalk ( un ) ;
28846: LD_VAR 0 3
28850: PPUSH
28851: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28855: LD_VAR 0 3
28859: PPUSH
28860: LD_INT 8
28862: PPUSH
28863: CALL_OW 336
// end ; 4 :
28867: GO 28960
28869: LD_INT 4
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 28938
28877: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28878: LD_ADDR_VAR 0 2
28882: PUSH
28883: LD_INT 22
28885: PUSH
28886: LD_OWVAR 2
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 30
28897: PUSH
28898: LD_INT 29
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PPUSH
28909: CALL_OW 69
28913: ST_TO_ADDR
// if not tmp then
28914: LD_VAR 0 2
28918: NOT
28919: IFFALSE 28923
// exit ;
28921: GO 28960
// DestroyUnit ( tmp [ 1 ] ) ;
28923: LD_VAR 0 2
28927: PUSH
28928: LD_INT 1
28930: ARRAY
28931: PPUSH
28932: CALL_OW 65
// end ; 5 .. 7 :
28936: GO 28960
28938: LD_INT 5
28940: DOUBLE
28941: GREATEREQUAL
28942: IFFALSE 28950
28944: LD_INT 7
28946: DOUBLE
28947: LESSEQUAL
28948: IFTRUE 28952
28950: GO 28959
28952: POP
// StreamSibBomb ; end ;
28953: CALL 25210 0 0
28957: GO 28960
28959: POP
// end ;
28960: PPOPN 3
28962: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28963: LD_EXP 75
28967: PUSH
28968: LD_EXP 125
28972: AND
28973: IFFALSE 29129
28975: GO 28977
28977: DISABLE
28978: LD_INT 0
28980: PPUSH
28981: PPUSH
28982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28983: LD_ADDR_VAR 0 2
28987: PUSH
28988: LD_INT 81
28990: PUSH
28991: LD_OWVAR 2
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: LD_INT 21
29005: PUSH
29006: LD_INT 1
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 21
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL_OW 69
29036: ST_TO_ADDR
// if not tmp then
29037: LD_VAR 0 2
29041: NOT
29042: IFFALSE 29046
// exit ;
29044: GO 29129
// p := 0 ;
29046: LD_ADDR_VAR 0 3
29050: PUSH
29051: LD_INT 0
29053: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29054: LD_INT 35
29056: PPUSH
29057: CALL_OW 67
// p := p + 1 ;
29061: LD_ADDR_VAR 0 3
29065: PUSH
29066: LD_VAR 0 3
29070: PUSH
29071: LD_INT 1
29073: PLUS
29074: ST_TO_ADDR
// for i in tmp do
29075: LD_ADDR_VAR 0 1
29079: PUSH
29080: LD_VAR 0 2
29084: PUSH
29085: FOR_IN
29086: IFFALSE 29117
// if GetLives ( i ) < 1000 then
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 256
29097: PUSH
29098: LD_INT 1000
29100: LESS
29101: IFFALSE 29115
// SetLives ( i , 1000 ) ;
29103: LD_VAR 0 1
29107: PPUSH
29108: LD_INT 1000
29110: PPUSH
29111: CALL_OW 234
29115: GO 29085
29117: POP
29118: POP
// until p > 20 ;
29119: LD_VAR 0 3
29123: PUSH
29124: LD_INT 20
29126: GREATER
29127: IFFALSE 29054
// end ;
29129: PPOPN 3
29131: END
// every 0 0$1 trigger StreamModeActive and sTime do
29132: LD_EXP 75
29136: PUSH
29137: LD_EXP 126
29141: AND
29142: IFFALSE 29177
29144: GO 29146
29146: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29147: LD_INT 28
29149: PPUSH
29150: LD_OWVAR 2
29154: PPUSH
29155: LD_INT 2
29157: PPUSH
29158: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29162: LD_INT 30
29164: PPUSH
29165: LD_OWVAR 2
29169: PPUSH
29170: LD_INT 2
29172: PPUSH
29173: CALL_OW 322
// end ;
29177: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29178: LD_EXP 75
29182: PUSH
29183: LD_EXP 127
29187: AND
29188: IFFALSE 29309
29190: GO 29192
29192: DISABLE
29193: LD_INT 0
29195: PPUSH
29196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29197: LD_ADDR_VAR 0 2
29201: PUSH
29202: LD_INT 22
29204: PUSH
29205: LD_OWVAR 2
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 21
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 3
29226: PUSH
29227: LD_INT 23
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: LIST
29245: PPUSH
29246: CALL_OW 69
29250: ST_TO_ADDR
// if not tmp then
29251: LD_VAR 0 2
29255: NOT
29256: IFFALSE 29260
// exit ;
29258: GO 29309
// for i in tmp do
29260: LD_ADDR_VAR 0 1
29264: PUSH
29265: LD_VAR 0 2
29269: PUSH
29270: FOR_IN
29271: IFFALSE 29307
// begin if Crawls ( i ) then
29273: LD_VAR 0 1
29277: PPUSH
29278: CALL_OW 318
29282: IFFALSE 29293
// ComWalk ( i ) ;
29284: LD_VAR 0 1
29288: PPUSH
29289: CALL_OW 138
// SetClass ( i , 2 ) ;
29293: LD_VAR 0 1
29297: PPUSH
29298: LD_INT 2
29300: PPUSH
29301: CALL_OW 336
// end ;
29305: GO 29270
29307: POP
29308: POP
// end ;
29309: PPOPN 2
29311: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29312: LD_EXP 75
29316: PUSH
29317: LD_EXP 128
29321: AND
29322: IFFALSE 29603
29324: GO 29326
29326: DISABLE
29327: LD_INT 0
29329: PPUSH
29330: PPUSH
29331: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29332: LD_OWVAR 2
29336: PPUSH
29337: LD_INT 9
29339: PPUSH
29340: LD_INT 1
29342: PPUSH
29343: LD_INT 1
29345: PPUSH
29346: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29350: LD_INT 9
29352: PPUSH
29353: LD_OWVAR 2
29357: PPUSH
29358: CALL_OW 343
// uc_side := 9 ;
29362: LD_ADDR_OWVAR 20
29366: PUSH
29367: LD_INT 9
29369: ST_TO_ADDR
// uc_nation := 2 ;
29370: LD_ADDR_OWVAR 21
29374: PUSH
29375: LD_INT 2
29377: ST_TO_ADDR
// hc_name := Dark Warrior ;
29378: LD_ADDR_OWVAR 26
29382: PUSH
29383: LD_STRING Dark Warrior
29385: ST_TO_ADDR
// hc_gallery :=  ;
29386: LD_ADDR_OWVAR 33
29390: PUSH
29391: LD_STRING 
29393: ST_TO_ADDR
// hc_noskilllimit := true ;
29394: LD_ADDR_OWVAR 76
29398: PUSH
29399: LD_INT 1
29401: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29402: LD_ADDR_OWVAR 31
29406: PUSH
29407: LD_INT 30
29409: PUSH
29410: LD_INT 30
29412: PUSH
29413: LD_INT 30
29415: PUSH
29416: LD_INT 30
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: ST_TO_ADDR
// un := CreateHuman ;
29425: LD_ADDR_VAR 0 3
29429: PUSH
29430: CALL_OW 44
29434: ST_TO_ADDR
// hc_noskilllimit := false ;
29435: LD_ADDR_OWVAR 76
29439: PUSH
29440: LD_INT 0
29442: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29443: LD_VAR 0 3
29447: PPUSH
29448: LD_INT 1
29450: PPUSH
29451: CALL_OW 51
// p := 0 ;
29455: LD_ADDR_VAR 0 2
29459: PUSH
29460: LD_INT 0
29462: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29463: LD_INT 35
29465: PPUSH
29466: CALL_OW 67
// p := p + 1 ;
29470: LD_ADDR_VAR 0 2
29474: PUSH
29475: LD_VAR 0 2
29479: PUSH
29480: LD_INT 1
29482: PLUS
29483: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29484: LD_VAR 0 3
29488: PPUSH
29489: CALL_OW 256
29493: PUSH
29494: LD_INT 1000
29496: LESS
29497: IFFALSE 29511
// SetLives ( un , 1000 ) ;
29499: LD_VAR 0 3
29503: PPUSH
29504: LD_INT 1000
29506: PPUSH
29507: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29511: LD_VAR 0 3
29515: PPUSH
29516: LD_INT 81
29518: PUSH
29519: LD_OWVAR 2
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 91
29530: PUSH
29531: LD_VAR 0 3
29535: PUSH
29536: LD_INT 30
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PPUSH
29548: CALL_OW 69
29552: PPUSH
29553: LD_VAR 0 3
29557: PPUSH
29558: CALL_OW 74
29562: PPUSH
29563: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29567: LD_VAR 0 2
29571: PUSH
29572: LD_INT 60
29574: GREATER
29575: PUSH
29576: LD_VAR 0 3
29580: PPUSH
29581: CALL_OW 301
29585: OR
29586: IFFALSE 29463
// if un then
29588: LD_VAR 0 3
29592: IFFALSE 29603
// RemoveUnit ( un ) ;
29594: LD_VAR 0 3
29598: PPUSH
29599: CALL_OW 64
// end ;
29603: PPOPN 3
29605: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29606: LD_INT 0
29608: PPUSH
// case cmd of 301 :
29609: LD_VAR 0 1
29613: PUSH
29614: LD_INT 301
29616: DOUBLE
29617: EQUAL
29618: IFTRUE 29622
29620: GO 29654
29622: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29623: LD_VAR 0 6
29627: PPUSH
29628: LD_VAR 0 7
29632: PPUSH
29633: LD_VAR 0 8
29637: PPUSH
29638: LD_VAR 0 4
29642: PPUSH
29643: LD_VAR 0 5
29647: PPUSH
29648: CALL 30855 0 5
29652: GO 29775
29654: LD_INT 302
29656: DOUBLE
29657: EQUAL
29658: IFTRUE 29662
29660: GO 29699
29662: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29663: LD_VAR 0 6
29667: PPUSH
29668: LD_VAR 0 7
29672: PPUSH
29673: LD_VAR 0 8
29677: PPUSH
29678: LD_VAR 0 9
29682: PPUSH
29683: LD_VAR 0 4
29687: PPUSH
29688: LD_VAR 0 5
29692: PPUSH
29693: CALL 30946 0 6
29697: GO 29775
29699: LD_INT 303
29701: DOUBLE
29702: EQUAL
29703: IFTRUE 29707
29705: GO 29744
29707: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29708: LD_VAR 0 6
29712: PPUSH
29713: LD_VAR 0 7
29717: PPUSH
29718: LD_VAR 0 8
29722: PPUSH
29723: LD_VAR 0 9
29727: PPUSH
29728: LD_VAR 0 4
29732: PPUSH
29733: LD_VAR 0 5
29737: PPUSH
29738: CALL 29780 0 6
29742: GO 29775
29744: LD_INT 304
29746: DOUBLE
29747: EQUAL
29748: IFTRUE 29752
29750: GO 29774
29752: POP
// hHackTeleport ( unit , x , y ) ; end ;
29753: LD_VAR 0 2
29757: PPUSH
29758: LD_VAR 0 4
29762: PPUSH
29763: LD_VAR 0 5
29767: PPUSH
29768: CALL 31539 0 3
29772: GO 29775
29774: POP
// end ;
29775: LD_VAR 0 12
29779: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29780: LD_INT 0
29782: PPUSH
29783: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29784: LD_VAR 0 1
29788: PUSH
29789: LD_INT 1
29791: LESS
29792: PUSH
29793: LD_VAR 0 1
29797: PUSH
29798: LD_INT 3
29800: GREATER
29801: OR
29802: PUSH
29803: LD_VAR 0 5
29807: PPUSH
29808: LD_VAR 0 6
29812: PPUSH
29813: CALL_OW 428
29817: OR
29818: IFFALSE 29822
// exit ;
29820: GO 30542
// uc_side := your_side ;
29822: LD_ADDR_OWVAR 20
29826: PUSH
29827: LD_OWVAR 2
29831: ST_TO_ADDR
// uc_nation := nation ;
29832: LD_ADDR_OWVAR 21
29836: PUSH
29837: LD_VAR 0 1
29841: ST_TO_ADDR
// bc_level = 1 ;
29842: LD_ADDR_OWVAR 43
29846: PUSH
29847: LD_INT 1
29849: ST_TO_ADDR
// case btype of 1 :
29850: LD_VAR 0 2
29854: PUSH
29855: LD_INT 1
29857: DOUBLE
29858: EQUAL
29859: IFTRUE 29863
29861: GO 29874
29863: POP
// bc_type := b_depot ; 2 :
29864: LD_ADDR_OWVAR 42
29868: PUSH
29869: LD_INT 0
29871: ST_TO_ADDR
29872: GO 30486
29874: LD_INT 2
29876: DOUBLE
29877: EQUAL
29878: IFTRUE 29882
29880: GO 29893
29882: POP
// bc_type := b_warehouse ; 3 :
29883: LD_ADDR_OWVAR 42
29887: PUSH
29888: LD_INT 1
29890: ST_TO_ADDR
29891: GO 30486
29893: LD_INT 3
29895: DOUBLE
29896: EQUAL
29897: IFTRUE 29901
29899: GO 29912
29901: POP
// bc_type := b_lab ; 4 .. 9 :
29902: LD_ADDR_OWVAR 42
29906: PUSH
29907: LD_INT 6
29909: ST_TO_ADDR
29910: GO 30486
29912: LD_INT 4
29914: DOUBLE
29915: GREATEREQUAL
29916: IFFALSE 29924
29918: LD_INT 9
29920: DOUBLE
29921: LESSEQUAL
29922: IFTRUE 29926
29924: GO 29978
29926: POP
// begin bc_type := b_lab_half ;
29927: LD_ADDR_OWVAR 42
29931: PUSH
29932: LD_INT 7
29934: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29935: LD_ADDR_OWVAR 44
29939: PUSH
29940: LD_INT 10
29942: PUSH
29943: LD_INT 11
29945: PUSH
29946: LD_INT 12
29948: PUSH
29949: LD_INT 15
29951: PUSH
29952: LD_INT 14
29954: PUSH
29955: LD_INT 13
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: PUSH
29966: LD_VAR 0 2
29970: PUSH
29971: LD_INT 3
29973: MINUS
29974: ARRAY
29975: ST_TO_ADDR
// end ; 10 .. 13 :
29976: GO 30486
29978: LD_INT 10
29980: DOUBLE
29981: GREATEREQUAL
29982: IFFALSE 29990
29984: LD_INT 13
29986: DOUBLE
29987: LESSEQUAL
29988: IFTRUE 29992
29990: GO 30069
29992: POP
// begin bc_type := b_lab_full ;
29993: LD_ADDR_OWVAR 42
29997: PUSH
29998: LD_INT 8
30000: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30001: LD_ADDR_OWVAR 44
30005: PUSH
30006: LD_INT 10
30008: PUSH
30009: LD_INT 12
30011: PUSH
30012: LD_INT 14
30014: PUSH
30015: LD_INT 13
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: PUSH
30024: LD_VAR 0 2
30028: PUSH
30029: LD_INT 9
30031: MINUS
30032: ARRAY
30033: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30034: LD_ADDR_OWVAR 45
30038: PUSH
30039: LD_INT 11
30041: PUSH
30042: LD_INT 15
30044: PUSH
30045: LD_INT 12
30047: PUSH
30048: LD_INT 15
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: PUSH
30057: LD_VAR 0 2
30061: PUSH
30062: LD_INT 9
30064: MINUS
30065: ARRAY
30066: ST_TO_ADDR
// end ; 14 :
30067: GO 30486
30069: LD_INT 14
30071: DOUBLE
30072: EQUAL
30073: IFTRUE 30077
30075: GO 30088
30077: POP
// bc_type := b_workshop ; 15 :
30078: LD_ADDR_OWVAR 42
30082: PUSH
30083: LD_INT 2
30085: ST_TO_ADDR
30086: GO 30486
30088: LD_INT 15
30090: DOUBLE
30091: EQUAL
30092: IFTRUE 30096
30094: GO 30107
30096: POP
// bc_type := b_factory ; 16 :
30097: LD_ADDR_OWVAR 42
30101: PUSH
30102: LD_INT 3
30104: ST_TO_ADDR
30105: GO 30486
30107: LD_INT 16
30109: DOUBLE
30110: EQUAL
30111: IFTRUE 30115
30113: GO 30126
30115: POP
// bc_type := b_ext_gun ; 17 :
30116: LD_ADDR_OWVAR 42
30120: PUSH
30121: LD_INT 17
30123: ST_TO_ADDR
30124: GO 30486
30126: LD_INT 17
30128: DOUBLE
30129: EQUAL
30130: IFTRUE 30134
30132: GO 30162
30134: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30135: LD_ADDR_OWVAR 42
30139: PUSH
30140: LD_INT 19
30142: PUSH
30143: LD_INT 23
30145: PUSH
30146: LD_INT 19
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: LIST
30153: PUSH
30154: LD_VAR 0 1
30158: ARRAY
30159: ST_TO_ADDR
30160: GO 30486
30162: LD_INT 18
30164: DOUBLE
30165: EQUAL
30166: IFTRUE 30170
30168: GO 30181
30170: POP
// bc_type := b_ext_radar ; 19 :
30171: LD_ADDR_OWVAR 42
30175: PUSH
30176: LD_INT 20
30178: ST_TO_ADDR
30179: GO 30486
30181: LD_INT 19
30183: DOUBLE
30184: EQUAL
30185: IFTRUE 30189
30187: GO 30200
30189: POP
// bc_type := b_ext_radio ; 20 :
30190: LD_ADDR_OWVAR 42
30194: PUSH
30195: LD_INT 22
30197: ST_TO_ADDR
30198: GO 30486
30200: LD_INT 20
30202: DOUBLE
30203: EQUAL
30204: IFTRUE 30208
30206: GO 30219
30208: POP
// bc_type := b_ext_siberium ; 21 :
30209: LD_ADDR_OWVAR 42
30213: PUSH
30214: LD_INT 21
30216: ST_TO_ADDR
30217: GO 30486
30219: LD_INT 21
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30227
30225: GO 30238
30227: POP
// bc_type := b_ext_computer ; 22 :
30228: LD_ADDR_OWVAR 42
30232: PUSH
30233: LD_INT 24
30235: ST_TO_ADDR
30236: GO 30486
30238: LD_INT 22
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30257
30246: POP
// bc_type := b_ext_track ; 23 :
30247: LD_ADDR_OWVAR 42
30251: PUSH
30252: LD_INT 16
30254: ST_TO_ADDR
30255: GO 30486
30257: LD_INT 23
30259: DOUBLE
30260: EQUAL
30261: IFTRUE 30265
30263: GO 30276
30265: POP
// bc_type := b_ext_laser ; 24 :
30266: LD_ADDR_OWVAR 42
30270: PUSH
30271: LD_INT 25
30273: ST_TO_ADDR
30274: GO 30486
30276: LD_INT 24
30278: DOUBLE
30279: EQUAL
30280: IFTRUE 30284
30282: GO 30295
30284: POP
// bc_type := b_control_tower ; 25 :
30285: LD_ADDR_OWVAR 42
30289: PUSH
30290: LD_INT 36
30292: ST_TO_ADDR
30293: GO 30486
30295: LD_INT 25
30297: DOUBLE
30298: EQUAL
30299: IFTRUE 30303
30301: GO 30314
30303: POP
// bc_type := b_breastwork ; 26 :
30304: LD_ADDR_OWVAR 42
30308: PUSH
30309: LD_INT 31
30311: ST_TO_ADDR
30312: GO 30486
30314: LD_INT 26
30316: DOUBLE
30317: EQUAL
30318: IFTRUE 30322
30320: GO 30333
30322: POP
// bc_type := b_bunker ; 27 :
30323: LD_ADDR_OWVAR 42
30327: PUSH
30328: LD_INT 32
30330: ST_TO_ADDR
30331: GO 30486
30333: LD_INT 27
30335: DOUBLE
30336: EQUAL
30337: IFTRUE 30341
30339: GO 30352
30341: POP
// bc_type := b_turret ; 28 :
30342: LD_ADDR_OWVAR 42
30346: PUSH
30347: LD_INT 33
30349: ST_TO_ADDR
30350: GO 30486
30352: LD_INT 28
30354: DOUBLE
30355: EQUAL
30356: IFTRUE 30360
30358: GO 30371
30360: POP
// bc_type := b_armoury ; 29 :
30361: LD_ADDR_OWVAR 42
30365: PUSH
30366: LD_INT 4
30368: ST_TO_ADDR
30369: GO 30486
30371: LD_INT 29
30373: DOUBLE
30374: EQUAL
30375: IFTRUE 30379
30377: GO 30390
30379: POP
// bc_type := b_barracks ; 30 :
30380: LD_ADDR_OWVAR 42
30384: PUSH
30385: LD_INT 5
30387: ST_TO_ADDR
30388: GO 30486
30390: LD_INT 30
30392: DOUBLE
30393: EQUAL
30394: IFTRUE 30398
30396: GO 30409
30398: POP
// bc_type := b_solar_power ; 31 :
30399: LD_ADDR_OWVAR 42
30403: PUSH
30404: LD_INT 27
30406: ST_TO_ADDR
30407: GO 30486
30409: LD_INT 31
30411: DOUBLE
30412: EQUAL
30413: IFTRUE 30417
30415: GO 30428
30417: POP
// bc_type := b_oil_power ; 32 :
30418: LD_ADDR_OWVAR 42
30422: PUSH
30423: LD_INT 26
30425: ST_TO_ADDR
30426: GO 30486
30428: LD_INT 32
30430: DOUBLE
30431: EQUAL
30432: IFTRUE 30436
30434: GO 30447
30436: POP
// bc_type := b_siberite_power ; 33 :
30437: LD_ADDR_OWVAR 42
30441: PUSH
30442: LD_INT 28
30444: ST_TO_ADDR
30445: GO 30486
30447: LD_INT 33
30449: DOUBLE
30450: EQUAL
30451: IFTRUE 30455
30453: GO 30466
30455: POP
// bc_type := b_oil_mine ; 34 :
30456: LD_ADDR_OWVAR 42
30460: PUSH
30461: LD_INT 29
30463: ST_TO_ADDR
30464: GO 30486
30466: LD_INT 34
30468: DOUBLE
30469: EQUAL
30470: IFTRUE 30474
30472: GO 30485
30474: POP
// bc_type := b_siberite_mine ; end ;
30475: LD_ADDR_OWVAR 42
30479: PUSH
30480: LD_INT 30
30482: ST_TO_ADDR
30483: GO 30486
30485: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30486: LD_ADDR_VAR 0 8
30490: PUSH
30491: LD_VAR 0 5
30495: PPUSH
30496: LD_VAR 0 6
30500: PPUSH
30501: LD_VAR 0 3
30505: PPUSH
30506: CALL_OW 47
30510: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30511: LD_OWVAR 42
30515: PUSH
30516: LD_INT 32
30518: PUSH
30519: LD_INT 33
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: IN
30526: IFFALSE 30542
// PlaceWeaponTurret ( b , weapon ) ;
30528: LD_VAR 0 8
30532: PPUSH
30533: LD_VAR 0 4
30537: PPUSH
30538: CALL_OW 431
// end ;
30542: LD_VAR 0 7
30546: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30547: LD_INT 0
30549: PPUSH
30550: PPUSH
30551: PPUSH
30552: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30553: LD_ADDR_VAR 0 4
30557: PUSH
30558: LD_INT 22
30560: PUSH
30561: LD_OWVAR 2
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: LD_INT 30
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 30
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PPUSH
30602: CALL_OW 69
30606: ST_TO_ADDR
// if not tmp then
30607: LD_VAR 0 4
30611: NOT
30612: IFFALSE 30616
// exit ;
30614: GO 30675
// for i in tmp do
30616: LD_ADDR_VAR 0 2
30620: PUSH
30621: LD_VAR 0 4
30625: PUSH
30626: FOR_IN
30627: IFFALSE 30673
// for j = 1 to 3 do
30629: LD_ADDR_VAR 0 3
30633: PUSH
30634: DOUBLE
30635: LD_INT 1
30637: DEC
30638: ST_TO_ADDR
30639: LD_INT 3
30641: PUSH
30642: FOR_TO
30643: IFFALSE 30669
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30645: LD_VAR 0 2
30649: PPUSH
30650: CALL_OW 274
30654: PPUSH
30655: LD_VAR 0 3
30659: PPUSH
30660: LD_INT 99999
30662: PPUSH
30663: CALL_OW 277
30667: GO 30642
30669: POP
30670: POP
30671: GO 30626
30673: POP
30674: POP
// end ;
30675: LD_VAR 0 1
30679: RET
// export function hHackSetLevel10 ; var i , j ; begin
30680: LD_INT 0
30682: PPUSH
30683: PPUSH
30684: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30685: LD_ADDR_VAR 0 2
30689: PUSH
30690: LD_INT 21
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PPUSH
30700: CALL_OW 69
30704: PUSH
30705: FOR_IN
30706: IFFALSE 30758
// if IsSelected ( i ) then
30708: LD_VAR 0 2
30712: PPUSH
30713: CALL_OW 306
30717: IFFALSE 30756
// begin for j := 1 to 4 do
30719: LD_ADDR_VAR 0 3
30723: PUSH
30724: DOUBLE
30725: LD_INT 1
30727: DEC
30728: ST_TO_ADDR
30729: LD_INT 4
30731: PUSH
30732: FOR_TO
30733: IFFALSE 30754
// SetSkill ( i , j , 10 ) ;
30735: LD_VAR 0 2
30739: PPUSH
30740: LD_VAR 0 3
30744: PPUSH
30745: LD_INT 10
30747: PPUSH
30748: CALL_OW 237
30752: GO 30732
30754: POP
30755: POP
// end ;
30756: GO 30705
30758: POP
30759: POP
// end ;
30760: LD_VAR 0 1
30764: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30765: LD_INT 0
30767: PPUSH
30768: PPUSH
30769: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30770: LD_ADDR_VAR 0 2
30774: PUSH
30775: LD_INT 22
30777: PUSH
30778: LD_OWVAR 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 21
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PPUSH
30801: CALL_OW 69
30805: PUSH
30806: FOR_IN
30807: IFFALSE 30848
// begin for j := 1 to 4 do
30809: LD_ADDR_VAR 0 3
30813: PUSH
30814: DOUBLE
30815: LD_INT 1
30817: DEC
30818: ST_TO_ADDR
30819: LD_INT 4
30821: PUSH
30822: FOR_TO
30823: IFFALSE 30844
// SetSkill ( i , j , 10 ) ;
30825: LD_VAR 0 2
30829: PPUSH
30830: LD_VAR 0 3
30834: PPUSH
30835: LD_INT 10
30837: PPUSH
30838: CALL_OW 237
30842: GO 30822
30844: POP
30845: POP
// end ;
30846: GO 30806
30848: POP
30849: POP
// end ;
30850: LD_VAR 0 1
30854: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30855: LD_INT 0
30857: PPUSH
// uc_side := your_side ;
30858: LD_ADDR_OWVAR 20
30862: PUSH
30863: LD_OWVAR 2
30867: ST_TO_ADDR
// uc_nation := nation ;
30868: LD_ADDR_OWVAR 21
30872: PUSH
30873: LD_VAR 0 1
30877: ST_TO_ADDR
// InitHc ;
30878: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30882: LD_INT 0
30884: PPUSH
30885: LD_VAR 0 2
30889: PPUSH
30890: LD_VAR 0 3
30894: PPUSH
30895: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30899: LD_VAR 0 4
30903: PPUSH
30904: LD_VAR 0 5
30908: PPUSH
30909: CALL_OW 428
30913: PUSH
30914: LD_INT 0
30916: EQUAL
30917: IFFALSE 30941
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30919: CALL_OW 44
30923: PPUSH
30924: LD_VAR 0 4
30928: PPUSH
30929: LD_VAR 0 5
30933: PPUSH
30934: LD_INT 1
30936: PPUSH
30937: CALL_OW 48
// end ;
30941: LD_VAR 0 6
30945: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30946: LD_INT 0
30948: PPUSH
30949: PPUSH
// uc_side := your_side ;
30950: LD_ADDR_OWVAR 20
30954: PUSH
30955: LD_OWVAR 2
30959: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30960: LD_VAR 0 1
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: LD_INT 4
30976: PUSH
30977: LD_INT 5
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: IN
30987: IFFALSE 30999
// uc_nation := nation_american else
30989: LD_ADDR_OWVAR 21
30993: PUSH
30994: LD_INT 1
30996: ST_TO_ADDR
30997: GO 31042
// if chassis in [ 11 , 12 , 13 , 14 ] then
30999: LD_VAR 0 1
31003: PUSH
31004: LD_INT 11
31006: PUSH
31007: LD_INT 12
31009: PUSH
31010: LD_INT 13
31012: PUSH
31013: LD_INT 14
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: IN
31022: IFFALSE 31034
// uc_nation := nation_arabian else
31024: LD_ADDR_OWVAR 21
31028: PUSH
31029: LD_INT 2
31031: ST_TO_ADDR
31032: GO 31042
// uc_nation := nation_russian ;
31034: LD_ADDR_OWVAR 21
31038: PUSH
31039: LD_INT 3
31041: ST_TO_ADDR
// vc_chassis := chassis ;
31042: LD_ADDR_OWVAR 37
31046: PUSH
31047: LD_VAR 0 1
31051: ST_TO_ADDR
// vc_engine := engine ;
31052: LD_ADDR_OWVAR 39
31056: PUSH
31057: LD_VAR 0 2
31061: ST_TO_ADDR
// vc_control := control ;
31062: LD_ADDR_OWVAR 38
31066: PUSH
31067: LD_VAR 0 3
31071: ST_TO_ADDR
// vc_weapon := weapon ;
31072: LD_ADDR_OWVAR 40
31076: PUSH
31077: LD_VAR 0 4
31081: ST_TO_ADDR
// un := CreateVehicle ;
31082: LD_ADDR_VAR 0 8
31086: PUSH
31087: CALL_OW 45
31091: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31092: LD_VAR 0 8
31096: PPUSH
31097: LD_INT 0
31099: PPUSH
31100: LD_INT 5
31102: PPUSH
31103: CALL_OW 12
31107: PPUSH
31108: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31112: LD_VAR 0 8
31116: PPUSH
31117: LD_VAR 0 5
31121: PPUSH
31122: LD_VAR 0 6
31126: PPUSH
31127: LD_INT 1
31129: PPUSH
31130: CALL_OW 48
// end ;
31134: LD_VAR 0 7
31138: RET
// export hInvincible ; every 1 do
31139: GO 31141
31141: DISABLE
// hInvincible := [ ] ;
31142: LD_ADDR_EXP 129
31146: PUSH
31147: EMPTY
31148: ST_TO_ADDR
31149: END
// every 10 do var i ;
31150: GO 31152
31152: DISABLE
31153: LD_INT 0
31155: PPUSH
// begin enable ;
31156: ENABLE
// if not hInvincible then
31157: LD_EXP 129
31161: NOT
31162: IFFALSE 31166
// exit ;
31164: GO 31210
// for i in hInvincible do
31166: LD_ADDR_VAR 0 1
31170: PUSH
31171: LD_EXP 129
31175: PUSH
31176: FOR_IN
31177: IFFALSE 31208
// if GetLives ( i ) < 1000 then
31179: LD_VAR 0 1
31183: PPUSH
31184: CALL_OW 256
31188: PUSH
31189: LD_INT 1000
31191: LESS
31192: IFFALSE 31206
// SetLives ( i , 1000 ) ;
31194: LD_VAR 0 1
31198: PPUSH
31199: LD_INT 1000
31201: PPUSH
31202: CALL_OW 234
31206: GO 31176
31208: POP
31209: POP
// end ;
31210: PPOPN 1
31212: END
// export function hHackInvincible ; var i ; begin
31213: LD_INT 0
31215: PPUSH
31216: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31217: LD_ADDR_VAR 0 2
31221: PUSH
31222: LD_INT 2
31224: PUSH
31225: LD_INT 21
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 21
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: PPUSH
31250: CALL_OW 69
31254: PUSH
31255: FOR_IN
31256: IFFALSE 31317
// if IsSelected ( i ) then
31258: LD_VAR 0 2
31262: PPUSH
31263: CALL_OW 306
31267: IFFALSE 31315
// begin if i in hInvincible then
31269: LD_VAR 0 2
31273: PUSH
31274: LD_EXP 129
31278: IN
31279: IFFALSE 31299
// hInvincible := hInvincible diff i else
31281: LD_ADDR_EXP 129
31285: PUSH
31286: LD_EXP 129
31290: PUSH
31291: LD_VAR 0 2
31295: DIFF
31296: ST_TO_ADDR
31297: GO 31315
// hInvincible := hInvincible union i ;
31299: LD_ADDR_EXP 129
31303: PUSH
31304: LD_EXP 129
31308: PUSH
31309: LD_VAR 0 2
31313: UNION
31314: ST_TO_ADDR
// end ;
31315: GO 31255
31317: POP
31318: POP
// end ;
31319: LD_VAR 0 1
31323: RET
// export function hHackInvisible ; var i , j ; begin
31324: LD_INT 0
31326: PPUSH
31327: PPUSH
31328: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31329: LD_ADDR_VAR 0 2
31333: PUSH
31334: LD_INT 21
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PPUSH
31344: CALL_OW 69
31348: PUSH
31349: FOR_IN
31350: IFFALSE 31374
// if IsSelected ( i ) then
31352: LD_VAR 0 2
31356: PPUSH
31357: CALL_OW 306
31361: IFFALSE 31372
// ComForceInvisible ( i ) ;
31363: LD_VAR 0 2
31367: PPUSH
31368: CALL_OW 496
31372: GO 31349
31374: POP
31375: POP
// end ;
31376: LD_VAR 0 1
31380: RET
// export function hHackChangeYourSide ; begin
31381: LD_INT 0
31383: PPUSH
// if your_side = 8 then
31384: LD_OWVAR 2
31388: PUSH
31389: LD_INT 8
31391: EQUAL
31392: IFFALSE 31404
// your_side := 0 else
31394: LD_ADDR_OWVAR 2
31398: PUSH
31399: LD_INT 0
31401: ST_TO_ADDR
31402: GO 31418
// your_side := your_side + 1 ;
31404: LD_ADDR_OWVAR 2
31408: PUSH
31409: LD_OWVAR 2
31413: PUSH
31414: LD_INT 1
31416: PLUS
31417: ST_TO_ADDR
// end ;
31418: LD_VAR 0 1
31422: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31423: LD_INT 0
31425: PPUSH
31426: PPUSH
31427: PPUSH
// for i in all_units do
31428: LD_ADDR_VAR 0 2
31432: PUSH
31433: LD_OWVAR 3
31437: PUSH
31438: FOR_IN
31439: IFFALSE 31517
// if IsSelected ( i ) then
31441: LD_VAR 0 2
31445: PPUSH
31446: CALL_OW 306
31450: IFFALSE 31515
// begin j := GetSide ( i ) ;
31452: LD_ADDR_VAR 0 3
31456: PUSH
31457: LD_VAR 0 2
31461: PPUSH
31462: CALL_OW 255
31466: ST_TO_ADDR
// if j = 8 then
31467: LD_VAR 0 3
31471: PUSH
31472: LD_INT 8
31474: EQUAL
31475: IFFALSE 31487
// j := 0 else
31477: LD_ADDR_VAR 0 3
31481: PUSH
31482: LD_INT 0
31484: ST_TO_ADDR
31485: GO 31501
// j := j + 1 ;
31487: LD_ADDR_VAR 0 3
31491: PUSH
31492: LD_VAR 0 3
31496: PUSH
31497: LD_INT 1
31499: PLUS
31500: ST_TO_ADDR
// SetSide ( i , j ) ;
31501: LD_VAR 0 2
31505: PPUSH
31506: LD_VAR 0 3
31510: PPUSH
31511: CALL_OW 235
// end ;
31515: GO 31438
31517: POP
31518: POP
// end ;
31519: LD_VAR 0 1
31523: RET
// export function hHackFog ; begin
31524: LD_INT 0
31526: PPUSH
// FogOff ( true ) ;
31527: LD_INT 1
31529: PPUSH
31530: CALL_OW 344
// end ;
31534: LD_VAR 0 1
31538: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31539: LD_INT 0
31541: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31542: LD_VAR 0 1
31546: PPUSH
31547: LD_VAR 0 2
31551: PPUSH
31552: LD_VAR 0 3
31556: PPUSH
31557: LD_INT 1
31559: PPUSH
31560: LD_INT 1
31562: PPUSH
31563: CALL_OW 483
// CenterOnXY ( x , y ) ;
31567: LD_VAR 0 2
31571: PPUSH
31572: LD_VAR 0 3
31576: PPUSH
31577: CALL_OW 84
// end ; end_of_file end_of_file
31581: LD_VAR 0 4
31585: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31586: LD_INT 0
31588: PPUSH
31589: PPUSH
// if exist_mode then
31590: LD_VAR 0 2
31594: IFFALSE 31619
// unit := CreateCharacter ( prefix & ident ) else
31596: LD_ADDR_VAR 0 5
31600: PUSH
31601: LD_VAR 0 3
31605: PUSH
31606: LD_VAR 0 1
31610: STR
31611: PPUSH
31612: CALL_OW 34
31616: ST_TO_ADDR
31617: GO 31634
// unit := NewCharacter ( ident ) ;
31619: LD_ADDR_VAR 0 5
31623: PUSH
31624: LD_VAR 0 1
31628: PPUSH
31629: CALL_OW 25
31633: ST_TO_ADDR
// result := unit ;
31634: LD_ADDR_VAR 0 4
31638: PUSH
31639: LD_VAR 0 5
31643: ST_TO_ADDR
// end ;
31644: LD_VAR 0 4
31648: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31649: LD_INT 0
31651: PPUSH
31652: PPUSH
// if not side or not nation then
31653: LD_VAR 0 1
31657: NOT
31658: PUSH
31659: LD_VAR 0 2
31663: NOT
31664: OR
31665: IFFALSE 31669
// exit ;
31667: GO 32437
// case nation of nation_american :
31669: LD_VAR 0 2
31673: PUSH
31674: LD_INT 1
31676: DOUBLE
31677: EQUAL
31678: IFTRUE 31682
31680: GO 31896
31682: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31683: LD_ADDR_VAR 0 4
31687: PUSH
31688: LD_INT 35
31690: PUSH
31691: LD_INT 45
31693: PUSH
31694: LD_INT 46
31696: PUSH
31697: LD_INT 47
31699: PUSH
31700: LD_INT 82
31702: PUSH
31703: LD_INT 83
31705: PUSH
31706: LD_INT 84
31708: PUSH
31709: LD_INT 85
31711: PUSH
31712: LD_INT 86
31714: PUSH
31715: LD_INT 1
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 6
31723: PUSH
31724: LD_INT 15
31726: PUSH
31727: LD_INT 16
31729: PUSH
31730: LD_INT 7
31732: PUSH
31733: LD_INT 12
31735: PUSH
31736: LD_INT 13
31738: PUSH
31739: LD_INT 10
31741: PUSH
31742: LD_INT 14
31744: PUSH
31745: LD_INT 20
31747: PUSH
31748: LD_INT 21
31750: PUSH
31751: LD_INT 22
31753: PUSH
31754: LD_INT 25
31756: PUSH
31757: LD_INT 32
31759: PUSH
31760: LD_INT 27
31762: PUSH
31763: LD_INT 36
31765: PUSH
31766: LD_INT 69
31768: PUSH
31769: LD_INT 39
31771: PUSH
31772: LD_INT 34
31774: PUSH
31775: LD_INT 40
31777: PUSH
31778: LD_INT 48
31780: PUSH
31781: LD_INT 49
31783: PUSH
31784: LD_INT 50
31786: PUSH
31787: LD_INT 51
31789: PUSH
31790: LD_INT 52
31792: PUSH
31793: LD_INT 53
31795: PUSH
31796: LD_INT 54
31798: PUSH
31799: LD_INT 55
31801: PUSH
31802: LD_INT 56
31804: PUSH
31805: LD_INT 57
31807: PUSH
31808: LD_INT 58
31810: PUSH
31811: LD_INT 59
31813: PUSH
31814: LD_INT 60
31816: PUSH
31817: LD_INT 61
31819: PUSH
31820: LD_INT 62
31822: PUSH
31823: LD_INT 80
31825: PUSH
31826: LD_INT 82
31828: PUSH
31829: LD_INT 83
31831: PUSH
31832: LD_INT 84
31834: PUSH
31835: LD_INT 85
31837: PUSH
31838: LD_INT 86
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: ST_TO_ADDR
31894: GO 32361
31896: LD_INT 2
31898: DOUBLE
31899: EQUAL
31900: IFTRUE 31904
31902: GO 32130
31904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31905: LD_ADDR_VAR 0 4
31909: PUSH
31910: LD_INT 35
31912: PUSH
31913: LD_INT 45
31915: PUSH
31916: LD_INT 46
31918: PUSH
31919: LD_INT 47
31921: PUSH
31922: LD_INT 82
31924: PUSH
31925: LD_INT 83
31927: PUSH
31928: LD_INT 84
31930: PUSH
31931: LD_INT 85
31933: PUSH
31934: LD_INT 87
31936: PUSH
31937: LD_INT 70
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: LD_INT 11
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 4
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: LD_INT 6
31957: PUSH
31958: LD_INT 15
31960: PUSH
31961: LD_INT 18
31963: PUSH
31964: LD_INT 7
31966: PUSH
31967: LD_INT 17
31969: PUSH
31970: LD_INT 8
31972: PUSH
31973: LD_INT 20
31975: PUSH
31976: LD_INT 21
31978: PUSH
31979: LD_INT 22
31981: PUSH
31982: LD_INT 72
31984: PUSH
31985: LD_INT 26
31987: PUSH
31988: LD_INT 69
31990: PUSH
31991: LD_INT 39
31993: PUSH
31994: LD_INT 40
31996: PUSH
31997: LD_INT 41
31999: PUSH
32000: LD_INT 42
32002: PUSH
32003: LD_INT 43
32005: PUSH
32006: LD_INT 48
32008: PUSH
32009: LD_INT 49
32011: PUSH
32012: LD_INT 50
32014: PUSH
32015: LD_INT 51
32017: PUSH
32018: LD_INT 52
32020: PUSH
32021: LD_INT 53
32023: PUSH
32024: LD_INT 54
32026: PUSH
32027: LD_INT 55
32029: PUSH
32030: LD_INT 56
32032: PUSH
32033: LD_INT 60
32035: PUSH
32036: LD_INT 61
32038: PUSH
32039: LD_INT 62
32041: PUSH
32042: LD_INT 66
32044: PUSH
32045: LD_INT 67
32047: PUSH
32048: LD_INT 68
32050: PUSH
32051: LD_INT 81
32053: PUSH
32054: LD_INT 82
32056: PUSH
32057: LD_INT 83
32059: PUSH
32060: LD_INT 84
32062: PUSH
32063: LD_INT 85
32065: PUSH
32066: LD_INT 87
32068: PUSH
32069: LD_INT 88
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: ST_TO_ADDR
32128: GO 32361
32130: LD_INT 3
32132: DOUBLE
32133: EQUAL
32134: IFTRUE 32138
32136: GO 32360
32138: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32139: LD_ADDR_VAR 0 4
32143: PUSH
32144: LD_INT 46
32146: PUSH
32147: LD_INT 47
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: LD_INT 2
32155: PUSH
32156: LD_INT 82
32158: PUSH
32159: LD_INT 83
32161: PUSH
32162: LD_INT 84
32164: PUSH
32165: LD_INT 85
32167: PUSH
32168: LD_INT 86
32170: PUSH
32171: LD_INT 11
32173: PUSH
32174: LD_INT 9
32176: PUSH
32177: LD_INT 20
32179: PUSH
32180: LD_INT 19
32182: PUSH
32183: LD_INT 21
32185: PUSH
32186: LD_INT 24
32188: PUSH
32189: LD_INT 22
32191: PUSH
32192: LD_INT 25
32194: PUSH
32195: LD_INT 28
32197: PUSH
32198: LD_INT 29
32200: PUSH
32201: LD_INT 30
32203: PUSH
32204: LD_INT 31
32206: PUSH
32207: LD_INT 37
32209: PUSH
32210: LD_INT 38
32212: PUSH
32213: LD_INT 32
32215: PUSH
32216: LD_INT 27
32218: PUSH
32219: LD_INT 33
32221: PUSH
32222: LD_INT 69
32224: PUSH
32225: LD_INT 39
32227: PUSH
32228: LD_INT 34
32230: PUSH
32231: LD_INT 40
32233: PUSH
32234: LD_INT 71
32236: PUSH
32237: LD_INT 23
32239: PUSH
32240: LD_INT 44
32242: PUSH
32243: LD_INT 48
32245: PUSH
32246: LD_INT 49
32248: PUSH
32249: LD_INT 50
32251: PUSH
32252: LD_INT 51
32254: PUSH
32255: LD_INT 52
32257: PUSH
32258: LD_INT 53
32260: PUSH
32261: LD_INT 54
32263: PUSH
32264: LD_INT 55
32266: PUSH
32267: LD_INT 56
32269: PUSH
32270: LD_INT 57
32272: PUSH
32273: LD_INT 58
32275: PUSH
32276: LD_INT 59
32278: PUSH
32279: LD_INT 63
32281: PUSH
32282: LD_INT 64
32284: PUSH
32285: LD_INT 65
32287: PUSH
32288: LD_INT 82
32290: PUSH
32291: LD_INT 83
32293: PUSH
32294: LD_INT 84
32296: PUSH
32297: LD_INT 85
32299: PUSH
32300: LD_INT 86
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: ST_TO_ADDR
32358: GO 32361
32360: POP
// if state > - 1 and state < 3 then
32361: LD_VAR 0 3
32365: PUSH
32366: LD_INT 1
32368: NEG
32369: GREATER
32370: PUSH
32371: LD_VAR 0 3
32375: PUSH
32376: LD_INT 3
32378: LESS
32379: AND
32380: IFFALSE 32437
// for i in result do
32382: LD_ADDR_VAR 0 5
32386: PUSH
32387: LD_VAR 0 4
32391: PUSH
32392: FOR_IN
32393: IFFALSE 32435
// if GetTech ( i , side ) <> state then
32395: LD_VAR 0 5
32399: PPUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: CALL_OW 321
32409: PUSH
32410: LD_VAR 0 3
32414: NONEQUAL
32415: IFFALSE 32433
// result := result diff i ;
32417: LD_ADDR_VAR 0 4
32421: PUSH
32422: LD_VAR 0 4
32426: PUSH
32427: LD_VAR 0 5
32431: DIFF
32432: ST_TO_ADDR
32433: GO 32392
32435: POP
32436: POP
// end ;
32437: LD_VAR 0 4
32441: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32442: LD_INT 0
32444: PPUSH
32445: PPUSH
32446: PPUSH
// result := true ;
32447: LD_ADDR_VAR 0 3
32451: PUSH
32452: LD_INT 1
32454: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32455: LD_ADDR_VAR 0 5
32459: PUSH
32460: LD_VAR 0 2
32464: PPUSH
32465: CALL_OW 480
32469: ST_TO_ADDR
// if not tmp then
32470: LD_VAR 0 5
32474: NOT
32475: IFFALSE 32479
// exit ;
32477: GO 32528
// for i in tmp do
32479: LD_ADDR_VAR 0 4
32483: PUSH
32484: LD_VAR 0 5
32488: PUSH
32489: FOR_IN
32490: IFFALSE 32526
// if GetTech ( i , side ) <> state_researched then
32492: LD_VAR 0 4
32496: PPUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 321
32506: PUSH
32507: LD_INT 2
32509: NONEQUAL
32510: IFFALSE 32524
// begin result := false ;
32512: LD_ADDR_VAR 0 3
32516: PUSH
32517: LD_INT 0
32519: ST_TO_ADDR
// exit ;
32520: POP
32521: POP
32522: GO 32528
// end ;
32524: GO 32489
32526: POP
32527: POP
// end ;
32528: LD_VAR 0 3
32532: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32533: LD_INT 0
32535: PPUSH
32536: PPUSH
32537: PPUSH
32538: PPUSH
32539: PPUSH
32540: PPUSH
32541: PPUSH
32542: PPUSH
32543: PPUSH
32544: PPUSH
32545: PPUSH
32546: PPUSH
32547: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32548: LD_VAR 0 1
32552: NOT
32553: PUSH
32554: LD_VAR 0 1
32558: PPUSH
32559: CALL_OW 257
32563: PUSH
32564: LD_INT 9
32566: NONEQUAL
32567: OR
32568: IFFALSE 32572
// exit ;
32570: GO 33145
// side := GetSide ( unit ) ;
32572: LD_ADDR_VAR 0 9
32576: PUSH
32577: LD_VAR 0 1
32581: PPUSH
32582: CALL_OW 255
32586: ST_TO_ADDR
// tech_space := tech_spacanom ;
32587: LD_ADDR_VAR 0 12
32591: PUSH
32592: LD_INT 29
32594: ST_TO_ADDR
// tech_time := tech_taurad ;
32595: LD_ADDR_VAR 0 13
32599: PUSH
32600: LD_INT 28
32602: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32603: LD_ADDR_VAR 0 11
32607: PUSH
32608: LD_VAR 0 1
32612: PPUSH
32613: CALL_OW 310
32617: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32618: LD_VAR 0 11
32622: PPUSH
32623: CALL_OW 247
32627: PUSH
32628: LD_INT 2
32630: EQUAL
32631: IFFALSE 32635
// exit ;
32633: GO 33145
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32635: LD_ADDR_VAR 0 8
32639: PUSH
32640: LD_INT 81
32642: PUSH
32643: LD_VAR 0 9
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: LD_INT 21
32657: PUSH
32658: LD_INT 3
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PPUSH
32673: CALL_OW 69
32677: ST_TO_ADDR
// if not tmp then
32678: LD_VAR 0 8
32682: NOT
32683: IFFALSE 32687
// exit ;
32685: GO 33145
// if in_unit then
32687: LD_VAR 0 11
32691: IFFALSE 32715
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32693: LD_ADDR_VAR 0 10
32697: PUSH
32698: LD_VAR 0 8
32702: PPUSH
32703: LD_VAR 0 11
32707: PPUSH
32708: CALL_OW 74
32712: ST_TO_ADDR
32713: GO 32735
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32715: LD_ADDR_VAR 0 10
32719: PUSH
32720: LD_VAR 0 8
32724: PPUSH
32725: LD_VAR 0 1
32729: PPUSH
32730: CALL_OW 74
32734: ST_TO_ADDR
// if not enemy then
32735: LD_VAR 0 10
32739: NOT
32740: IFFALSE 32744
// exit ;
32742: GO 33145
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32744: LD_VAR 0 11
32748: PUSH
32749: LD_VAR 0 11
32753: PPUSH
32754: LD_VAR 0 10
32758: PPUSH
32759: CALL_OW 296
32763: PUSH
32764: LD_INT 13
32766: GREATER
32767: AND
32768: PUSH
32769: LD_VAR 0 1
32773: PPUSH
32774: LD_VAR 0 10
32778: PPUSH
32779: CALL_OW 296
32783: PUSH
32784: LD_INT 12
32786: GREATER
32787: OR
32788: IFFALSE 32792
// exit ;
32790: GO 33145
// missile := [ 1 ] ;
32792: LD_ADDR_VAR 0 14
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32803: LD_VAR 0 9
32807: PPUSH
32808: LD_VAR 0 12
32812: PPUSH
32813: CALL_OW 325
32817: IFFALSE 32846
// missile := Insert ( missile , missile + 1 , 2 ) ;
32819: LD_ADDR_VAR 0 14
32823: PUSH
32824: LD_VAR 0 14
32828: PPUSH
32829: LD_VAR 0 14
32833: PUSH
32834: LD_INT 1
32836: PLUS
32837: PPUSH
32838: LD_INT 2
32840: PPUSH
32841: CALL_OW 2
32845: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32846: LD_VAR 0 9
32850: PPUSH
32851: LD_VAR 0 13
32855: PPUSH
32856: CALL_OW 325
32860: PUSH
32861: LD_VAR 0 10
32865: PPUSH
32866: CALL_OW 255
32870: PPUSH
32871: LD_VAR 0 13
32875: PPUSH
32876: CALL_OW 325
32880: NOT
32881: AND
32882: IFFALSE 32911
// missile := Insert ( missile , missile + 1 , 3 ) ;
32884: LD_ADDR_VAR 0 14
32888: PUSH
32889: LD_VAR 0 14
32893: PPUSH
32894: LD_VAR 0 14
32898: PUSH
32899: LD_INT 1
32901: PLUS
32902: PPUSH
32903: LD_INT 3
32905: PPUSH
32906: CALL_OW 2
32910: ST_TO_ADDR
// if missile < 2 then
32911: LD_VAR 0 14
32915: PUSH
32916: LD_INT 2
32918: LESS
32919: IFFALSE 32923
// exit ;
32921: GO 33145
// x := GetX ( enemy ) ;
32923: LD_ADDR_VAR 0 4
32927: PUSH
32928: LD_VAR 0 10
32932: PPUSH
32933: CALL_OW 250
32937: ST_TO_ADDR
// y := GetY ( enemy ) ;
32938: LD_ADDR_VAR 0 5
32942: PUSH
32943: LD_VAR 0 10
32947: PPUSH
32948: CALL_OW 251
32952: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32953: LD_ADDR_VAR 0 6
32957: PUSH
32958: LD_VAR 0 4
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PPUSH
32967: LD_INT 1
32969: PPUSH
32970: CALL_OW 12
32974: PLUS
32975: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32976: LD_ADDR_VAR 0 7
32980: PUSH
32981: LD_VAR 0 5
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PPUSH
32990: LD_INT 1
32992: PPUSH
32993: CALL_OW 12
32997: PLUS
32998: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32999: LD_VAR 0 6
33003: PPUSH
33004: LD_VAR 0 7
33008: PPUSH
33009: CALL_OW 488
33013: NOT
33014: IFFALSE 33036
// begin _x := x ;
33016: LD_ADDR_VAR 0 6
33020: PUSH
33021: LD_VAR 0 4
33025: ST_TO_ADDR
// _y := y ;
33026: LD_ADDR_VAR 0 7
33030: PUSH
33031: LD_VAR 0 5
33035: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33036: LD_ADDR_VAR 0 3
33040: PUSH
33041: LD_INT 1
33043: PPUSH
33044: LD_VAR 0 14
33048: PPUSH
33049: CALL_OW 12
33053: ST_TO_ADDR
// case i of 1 :
33054: LD_VAR 0 3
33058: PUSH
33059: LD_INT 1
33061: DOUBLE
33062: EQUAL
33063: IFTRUE 33067
33065: GO 33084
33067: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33068: LD_VAR 0 1
33072: PPUSH
33073: LD_VAR 0 10
33077: PPUSH
33078: CALL_OW 115
33082: GO 33145
33084: LD_INT 2
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33114
33092: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33093: LD_VAR 0 1
33097: PPUSH
33098: LD_VAR 0 6
33102: PPUSH
33103: LD_VAR 0 7
33107: PPUSH
33108: CALL_OW 153
33112: GO 33145
33114: LD_INT 3
33116: DOUBLE
33117: EQUAL
33118: IFTRUE 33122
33120: GO 33144
33122: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33123: LD_VAR 0 1
33127: PPUSH
33128: LD_VAR 0 6
33132: PPUSH
33133: LD_VAR 0 7
33137: PPUSH
33138: CALL_OW 154
33142: GO 33145
33144: POP
// end ;
33145: LD_VAR 0 2
33149: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33150: LD_INT 0
33152: PPUSH
33153: PPUSH
33154: PPUSH
33155: PPUSH
33156: PPUSH
33157: PPUSH
// if not unit or not building then
33158: LD_VAR 0 1
33162: NOT
33163: PUSH
33164: LD_VAR 0 2
33168: NOT
33169: OR
33170: IFFALSE 33174
// exit ;
33172: GO 33332
// x := GetX ( building ) ;
33174: LD_ADDR_VAR 0 5
33178: PUSH
33179: LD_VAR 0 2
33183: PPUSH
33184: CALL_OW 250
33188: ST_TO_ADDR
// y := GetY ( building ) ;
33189: LD_ADDR_VAR 0 6
33193: PUSH
33194: LD_VAR 0 2
33198: PPUSH
33199: CALL_OW 251
33203: ST_TO_ADDR
// for i = 0 to 5 do
33204: LD_ADDR_VAR 0 4
33208: PUSH
33209: DOUBLE
33210: LD_INT 0
33212: DEC
33213: ST_TO_ADDR
33214: LD_INT 5
33216: PUSH
33217: FOR_TO
33218: IFFALSE 33330
// begin _x := ShiftX ( x , i , 3 ) ;
33220: LD_ADDR_VAR 0 7
33224: PUSH
33225: LD_VAR 0 5
33229: PPUSH
33230: LD_VAR 0 4
33234: PPUSH
33235: LD_INT 3
33237: PPUSH
33238: CALL_OW 272
33242: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33243: LD_ADDR_VAR 0 8
33247: PUSH
33248: LD_VAR 0 6
33252: PPUSH
33253: LD_VAR 0 4
33257: PPUSH
33258: LD_INT 3
33260: PPUSH
33261: CALL_OW 273
33265: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33266: LD_VAR 0 7
33270: PPUSH
33271: LD_VAR 0 8
33275: PPUSH
33276: CALL_OW 488
33280: NOT
33281: IFFALSE 33285
// continue ;
33283: GO 33217
// if HexInfo ( _x , _y ) = 0 then
33285: LD_VAR 0 7
33289: PPUSH
33290: LD_VAR 0 8
33294: PPUSH
33295: CALL_OW 428
33299: PUSH
33300: LD_INT 0
33302: EQUAL
33303: IFFALSE 33328
// begin ComMoveXY ( unit , _x , _y ) ;
33305: LD_VAR 0 1
33309: PPUSH
33310: LD_VAR 0 7
33314: PPUSH
33315: LD_VAR 0 8
33319: PPUSH
33320: CALL_OW 111
// exit ;
33324: POP
33325: POP
33326: GO 33332
// end ; end ;
33328: GO 33217
33330: POP
33331: POP
// end ;
33332: LD_VAR 0 3
33336: RET
// export function ScanBase ( side , base_area ) ; begin
33337: LD_INT 0
33339: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33340: LD_ADDR_VAR 0 3
33344: PUSH
33345: LD_VAR 0 2
33349: PPUSH
33350: LD_INT 81
33352: PUSH
33353: LD_VAR 0 1
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PPUSH
33362: CALL_OW 70
33366: ST_TO_ADDR
// end ;
33367: LD_VAR 0 3
33371: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33372: LD_INT 0
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
// result := false ;
33378: LD_ADDR_VAR 0 2
33382: PUSH
33383: LD_INT 0
33385: ST_TO_ADDR
// side := GetSide ( unit ) ;
33386: LD_ADDR_VAR 0 3
33390: PUSH
33391: LD_VAR 0 1
33395: PPUSH
33396: CALL_OW 255
33400: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33401: LD_ADDR_VAR 0 4
33405: PUSH
33406: LD_VAR 0 1
33410: PPUSH
33411: CALL_OW 248
33415: ST_TO_ADDR
// case nat of 1 :
33416: LD_VAR 0 4
33420: PUSH
33421: LD_INT 1
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33429
33427: GO 33440
33429: POP
// tech := tech_lassight ; 2 :
33430: LD_ADDR_VAR 0 5
33434: PUSH
33435: LD_INT 12
33437: ST_TO_ADDR
33438: GO 33479
33440: LD_INT 2
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33448
33446: GO 33459
33448: POP
// tech := tech_mortar ; 3 :
33449: LD_ADDR_VAR 0 5
33453: PUSH
33454: LD_INT 41
33456: ST_TO_ADDR
33457: GO 33479
33459: LD_INT 3
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33467
33465: GO 33478
33467: POP
// tech := tech_bazooka ; end ;
33468: LD_ADDR_VAR 0 5
33472: PUSH
33473: LD_INT 44
33475: ST_TO_ADDR
33476: GO 33479
33478: POP
// if Researched ( side , tech ) then
33479: LD_VAR 0 3
33483: PPUSH
33484: LD_VAR 0 5
33488: PPUSH
33489: CALL_OW 325
33493: IFFALSE 33520
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33495: LD_ADDR_VAR 0 2
33499: PUSH
33500: LD_INT 5
33502: PUSH
33503: LD_INT 8
33505: PUSH
33506: LD_INT 9
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: PUSH
33514: LD_VAR 0 4
33518: ARRAY
33519: ST_TO_ADDR
// end ;
33520: LD_VAR 0 2
33524: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33525: LD_INT 0
33527: PPUSH
33528: PPUSH
33529: PPUSH
// if not mines then
33530: LD_VAR 0 2
33534: NOT
33535: IFFALSE 33539
// exit ;
33537: GO 33683
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33539: LD_ADDR_VAR 0 5
33543: PUSH
33544: LD_INT 81
33546: PUSH
33547: LD_VAR 0 1
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: LD_INT 21
33561: PUSH
33562: LD_INT 3
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PPUSH
33577: CALL_OW 69
33581: ST_TO_ADDR
// for i in mines do
33582: LD_ADDR_VAR 0 4
33586: PUSH
33587: LD_VAR 0 2
33591: PUSH
33592: FOR_IN
33593: IFFALSE 33681
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33595: LD_VAR 0 4
33599: PUSH
33600: LD_INT 1
33602: ARRAY
33603: PPUSH
33604: LD_VAR 0 4
33608: PUSH
33609: LD_INT 2
33611: ARRAY
33612: PPUSH
33613: CALL_OW 458
33617: NOT
33618: IFFALSE 33622
// continue ;
33620: GO 33592
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33622: LD_VAR 0 4
33626: PUSH
33627: LD_INT 1
33629: ARRAY
33630: PPUSH
33631: LD_VAR 0 4
33635: PUSH
33636: LD_INT 2
33638: ARRAY
33639: PPUSH
33640: CALL_OW 428
33644: PUSH
33645: LD_VAR 0 5
33649: IN
33650: IFFALSE 33679
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33652: LD_VAR 0 4
33656: PUSH
33657: LD_INT 1
33659: ARRAY
33660: PPUSH
33661: LD_VAR 0 4
33665: PUSH
33666: LD_INT 2
33668: ARRAY
33669: PPUSH
33670: LD_VAR 0 1
33674: PPUSH
33675: CALL_OW 456
// end ;
33679: GO 33592
33681: POP
33682: POP
// end ;
33683: LD_VAR 0 3
33687: RET
// export function Count ( array ) ; var i ; begin
33688: LD_INT 0
33690: PPUSH
33691: PPUSH
// result := 0 ;
33692: LD_ADDR_VAR 0 2
33696: PUSH
33697: LD_INT 0
33699: ST_TO_ADDR
// for i in array do
33700: LD_ADDR_VAR 0 3
33704: PUSH
33705: LD_VAR 0 1
33709: PUSH
33710: FOR_IN
33711: IFFALSE 33735
// if i then
33713: LD_VAR 0 3
33717: IFFALSE 33733
// result := result + 1 ;
33719: LD_ADDR_VAR 0 2
33723: PUSH
33724: LD_VAR 0 2
33728: PUSH
33729: LD_INT 1
33731: PLUS
33732: ST_TO_ADDR
33733: GO 33710
33735: POP
33736: POP
// end ;
33737: LD_VAR 0 2
33741: RET
// export function IsEmpty ( building ) ; begin
33742: LD_INT 0
33744: PPUSH
// if not building then
33745: LD_VAR 0 1
33749: NOT
33750: IFFALSE 33754
// exit ;
33752: GO 33797
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33754: LD_ADDR_VAR 0 2
33758: PUSH
33759: LD_VAR 0 1
33763: PUSH
33764: LD_INT 22
33766: PUSH
33767: LD_VAR 0 1
33771: PPUSH
33772: CALL_OW 255
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 58
33783: PUSH
33784: EMPTY
33785: LIST
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PPUSH
33791: CALL_OW 69
33795: IN
33796: ST_TO_ADDR
// end ;
33797: LD_VAR 0 2
33801: RET
// export function IsNotFull ( building ) ; begin
33802: LD_INT 0
33804: PPUSH
// if not building then
33805: LD_VAR 0 1
33809: NOT
33810: IFFALSE 33814
// exit ;
33812: GO 33833
// result := UnitsInside ( building ) < 6 ;
33814: LD_ADDR_VAR 0 2
33818: PUSH
33819: LD_VAR 0 1
33823: PPUSH
33824: CALL_OW 313
33828: PUSH
33829: LD_INT 6
33831: LESS
33832: ST_TO_ADDR
// end ;
33833: LD_VAR 0 2
33837: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33838: LD_INT 0
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
// tmp := [ ] ;
33844: LD_ADDR_VAR 0 3
33848: PUSH
33849: EMPTY
33850: ST_TO_ADDR
// list := [ ] ;
33851: LD_ADDR_VAR 0 5
33855: PUSH
33856: EMPTY
33857: ST_TO_ADDR
// for i = 16 to 25 do
33858: LD_ADDR_VAR 0 4
33862: PUSH
33863: DOUBLE
33864: LD_INT 16
33866: DEC
33867: ST_TO_ADDR
33868: LD_INT 25
33870: PUSH
33871: FOR_TO
33872: IFFALSE 33945
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33874: LD_ADDR_VAR 0 3
33878: PUSH
33879: LD_VAR 0 3
33883: PUSH
33884: LD_INT 22
33886: PUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 255
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 91
33903: PUSH
33904: LD_VAR 0 1
33908: PUSH
33909: LD_INT 6
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 30
33919: PUSH
33920: LD_VAR 0 4
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: PUSH
33934: EMPTY
33935: LIST
33936: PPUSH
33937: CALL_OW 69
33941: ADD
33942: ST_TO_ADDR
33943: GO 33871
33945: POP
33946: POP
// for i = 1 to tmp do
33947: LD_ADDR_VAR 0 4
33951: PUSH
33952: DOUBLE
33953: LD_INT 1
33955: DEC
33956: ST_TO_ADDR
33957: LD_VAR 0 3
33961: PUSH
33962: FOR_TO
33963: IFFALSE 34051
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33965: LD_ADDR_VAR 0 5
33969: PUSH
33970: LD_VAR 0 5
33974: PUSH
33975: LD_VAR 0 3
33979: PUSH
33980: LD_VAR 0 4
33984: ARRAY
33985: PPUSH
33986: CALL_OW 266
33990: PUSH
33991: LD_VAR 0 3
33995: PUSH
33996: LD_VAR 0 4
34000: ARRAY
34001: PPUSH
34002: CALL_OW 250
34006: PUSH
34007: LD_VAR 0 3
34011: PUSH
34012: LD_VAR 0 4
34016: ARRAY
34017: PPUSH
34018: CALL_OW 251
34022: PUSH
34023: LD_VAR 0 3
34027: PUSH
34028: LD_VAR 0 4
34032: ARRAY
34033: PPUSH
34034: CALL_OW 254
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: PUSH
34045: EMPTY
34046: LIST
34047: ADD
34048: ST_TO_ADDR
34049: GO 33962
34051: POP
34052: POP
// result := list ;
34053: LD_ADDR_VAR 0 2
34057: PUSH
34058: LD_VAR 0 5
34062: ST_TO_ADDR
// end ;
34063: LD_VAR 0 2
34067: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34068: LD_INT 0
34070: PPUSH
34071: PPUSH
34072: PPUSH
34073: PPUSH
34074: PPUSH
34075: PPUSH
34076: PPUSH
// if not factory then
34077: LD_VAR 0 1
34081: NOT
34082: IFFALSE 34086
// exit ;
34084: GO 34679
// if control = control_apeman then
34086: LD_VAR 0 4
34090: PUSH
34091: LD_INT 5
34093: EQUAL
34094: IFFALSE 34203
// begin tmp := UnitsInside ( factory ) ;
34096: LD_ADDR_VAR 0 8
34100: PUSH
34101: LD_VAR 0 1
34105: PPUSH
34106: CALL_OW 313
34110: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34111: LD_VAR 0 8
34115: PPUSH
34116: LD_INT 25
34118: PUSH
34119: LD_INT 12
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PPUSH
34126: CALL_OW 72
34130: NOT
34131: IFFALSE 34141
// control := control_manual ;
34133: LD_ADDR_VAR 0 4
34137: PUSH
34138: LD_INT 1
34140: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34141: LD_ADDR_VAR 0 8
34145: PUSH
34146: LD_VAR 0 1
34150: PPUSH
34151: CALL 33838 0 1
34155: ST_TO_ADDR
// if tmp then
34156: LD_VAR 0 8
34160: IFFALSE 34203
// begin for i in tmp do
34162: LD_ADDR_VAR 0 7
34166: PUSH
34167: LD_VAR 0 8
34171: PUSH
34172: FOR_IN
34173: IFFALSE 34201
// if i [ 1 ] = b_ext_radio then
34175: LD_VAR 0 7
34179: PUSH
34180: LD_INT 1
34182: ARRAY
34183: PUSH
34184: LD_INT 22
34186: EQUAL
34187: IFFALSE 34199
// begin control := control_remote ;
34189: LD_ADDR_VAR 0 4
34193: PUSH
34194: LD_INT 2
34196: ST_TO_ADDR
// break ;
34197: GO 34201
// end ;
34199: GO 34172
34201: POP
34202: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34203: LD_VAR 0 1
34207: PPUSH
34208: LD_VAR 0 2
34212: PPUSH
34213: LD_VAR 0 3
34217: PPUSH
34218: LD_VAR 0 4
34222: PPUSH
34223: LD_VAR 0 5
34227: PPUSH
34228: CALL_OW 448
34232: IFFALSE 34267
// begin result := [ chassis , engine , control , weapon ] ;
34234: LD_ADDR_VAR 0 6
34238: PUSH
34239: LD_VAR 0 2
34243: PUSH
34244: LD_VAR 0 3
34248: PUSH
34249: LD_VAR 0 4
34253: PUSH
34254: LD_VAR 0 5
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: ST_TO_ADDR
// exit ;
34265: GO 34679
// end ; _chassis := AvailableChassisList ( factory ) ;
34267: LD_ADDR_VAR 0 9
34271: PUSH
34272: LD_VAR 0 1
34276: PPUSH
34277: CALL_OW 475
34281: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34282: LD_ADDR_VAR 0 11
34286: PUSH
34287: LD_VAR 0 1
34291: PPUSH
34292: CALL_OW 476
34296: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34297: LD_ADDR_VAR 0 12
34301: PUSH
34302: LD_VAR 0 1
34306: PPUSH
34307: CALL_OW 477
34311: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34312: LD_ADDR_VAR 0 10
34316: PUSH
34317: LD_VAR 0 1
34321: PPUSH
34322: CALL_OW 478
34326: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34327: LD_VAR 0 9
34331: NOT
34332: PUSH
34333: LD_VAR 0 11
34337: NOT
34338: OR
34339: PUSH
34340: LD_VAR 0 12
34344: NOT
34345: OR
34346: PUSH
34347: LD_VAR 0 10
34351: NOT
34352: OR
34353: IFFALSE 34388
// begin result := [ chassis , engine , control , weapon ] ;
34355: LD_ADDR_VAR 0 6
34359: PUSH
34360: LD_VAR 0 2
34364: PUSH
34365: LD_VAR 0 3
34369: PUSH
34370: LD_VAR 0 4
34374: PUSH
34375: LD_VAR 0 5
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: ST_TO_ADDR
// exit ;
34386: GO 34679
// end ; if not chassis in _chassis then
34388: LD_VAR 0 2
34392: PUSH
34393: LD_VAR 0 9
34397: IN
34398: NOT
34399: IFFALSE 34425
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34401: LD_ADDR_VAR 0 2
34405: PUSH
34406: LD_VAR 0 9
34410: PUSH
34411: LD_INT 1
34413: PPUSH
34414: LD_VAR 0 9
34418: PPUSH
34419: CALL_OW 12
34423: ARRAY
34424: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34425: LD_VAR 0 2
34429: PPUSH
34430: LD_VAR 0 3
34434: PPUSH
34435: CALL 34684 0 2
34439: NOT
34440: IFFALSE 34499
// repeat engine := _engine [ 1 ] ;
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_VAR 0 11
34451: PUSH
34452: LD_INT 1
34454: ARRAY
34455: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34456: LD_ADDR_VAR 0 11
34460: PUSH
34461: LD_VAR 0 11
34465: PPUSH
34466: LD_INT 1
34468: PPUSH
34469: CALL_OW 3
34473: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34474: LD_VAR 0 2
34478: PPUSH
34479: LD_VAR 0 3
34483: PPUSH
34484: CALL 34684 0 2
34488: PUSH
34489: LD_VAR 0 11
34493: PUSH
34494: EMPTY
34495: EQUAL
34496: OR
34497: IFFALSE 34442
// if not control in _control then
34499: LD_VAR 0 4
34503: PUSH
34504: LD_VAR 0 12
34508: IN
34509: NOT
34510: IFFALSE 34536
// control := _control [ rand ( 1 , _control ) ] ;
34512: LD_ADDR_VAR 0 4
34516: PUSH
34517: LD_VAR 0 12
34521: PUSH
34522: LD_INT 1
34524: PPUSH
34525: LD_VAR 0 12
34529: PPUSH
34530: CALL_OW 12
34534: ARRAY
34535: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34536: LD_VAR 0 2
34540: PPUSH
34541: LD_VAR 0 5
34545: PPUSH
34546: CALL 34904 0 2
34550: NOT
34551: IFFALSE 34610
// repeat weapon := _weapon [ 1 ] ;
34553: LD_ADDR_VAR 0 5
34557: PUSH
34558: LD_VAR 0 10
34562: PUSH
34563: LD_INT 1
34565: ARRAY
34566: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34567: LD_ADDR_VAR 0 10
34571: PUSH
34572: LD_VAR 0 10
34576: PPUSH
34577: LD_INT 1
34579: PPUSH
34580: CALL_OW 3
34584: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34585: LD_VAR 0 2
34589: PPUSH
34590: LD_VAR 0 5
34594: PPUSH
34595: CALL 34904 0 2
34599: PUSH
34600: LD_VAR 0 10
34604: PUSH
34605: EMPTY
34606: EQUAL
34607: OR
34608: IFFALSE 34553
// result := [ ] ;
34610: LD_ADDR_VAR 0 6
34614: PUSH
34615: EMPTY
34616: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34617: LD_VAR 0 1
34621: PPUSH
34622: LD_VAR 0 2
34626: PPUSH
34627: LD_VAR 0 3
34631: PPUSH
34632: LD_VAR 0 4
34636: PPUSH
34637: LD_VAR 0 5
34641: PPUSH
34642: CALL_OW 448
34646: IFFALSE 34679
// result := [ chassis , engine , control , weapon ] ;
34648: LD_ADDR_VAR 0 6
34652: PUSH
34653: LD_VAR 0 2
34657: PUSH
34658: LD_VAR 0 3
34662: PUSH
34663: LD_VAR 0 4
34667: PUSH
34668: LD_VAR 0 5
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: ST_TO_ADDR
// end ;
34679: LD_VAR 0 6
34683: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34684: LD_INT 0
34686: PPUSH
// if not chassis or not engine then
34687: LD_VAR 0 1
34691: NOT
34692: PUSH
34693: LD_VAR 0 2
34697: NOT
34698: OR
34699: IFFALSE 34703
// exit ;
34701: GO 34899
// case engine of engine_solar :
34703: LD_VAR 0 2
34707: PUSH
34708: LD_INT 2
34710: DOUBLE
34711: EQUAL
34712: IFTRUE 34716
34714: GO 34754
34716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: LD_INT 11
34724: PUSH
34725: LD_INT 12
34727: PUSH
34728: LD_INT 13
34730: PUSH
34731: LD_INT 14
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: ST_TO_ADDR
34752: GO 34883
34754: LD_INT 1
34756: DOUBLE
34757: EQUAL
34758: IFTRUE 34762
34760: GO 34824
34762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34763: LD_ADDR_VAR 0 3
34767: PUSH
34768: LD_INT 11
34770: PUSH
34771: LD_INT 12
34773: PUSH
34774: LD_INT 13
34776: PUSH
34777: LD_INT 14
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: LD_INT 3
34788: PUSH
34789: LD_INT 4
34791: PUSH
34792: LD_INT 5
34794: PUSH
34795: LD_INT 21
34797: PUSH
34798: LD_INT 23
34800: PUSH
34801: LD_INT 22
34803: PUSH
34804: LD_INT 24
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: ST_TO_ADDR
34822: GO 34883
34824: LD_INT 3
34826: DOUBLE
34827: EQUAL
34828: IFTRUE 34832
34830: GO 34882
34832: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34833: LD_ADDR_VAR 0 3
34837: PUSH
34838: LD_INT 13
34840: PUSH
34841: LD_INT 14
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: LD_INT 3
34849: PUSH
34850: LD_INT 4
34852: PUSH
34853: LD_INT 5
34855: PUSH
34856: LD_INT 21
34858: PUSH
34859: LD_INT 22
34861: PUSH
34862: LD_INT 23
34864: PUSH
34865: LD_INT 24
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: ST_TO_ADDR
34880: GO 34883
34882: POP
// result := ( chassis in result ) ;
34883: LD_ADDR_VAR 0 3
34887: PUSH
34888: LD_VAR 0 1
34892: PUSH
34893: LD_VAR 0 3
34897: IN
34898: ST_TO_ADDR
// end ;
34899: LD_VAR 0 3
34903: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34904: LD_INT 0
34906: PPUSH
// if not chassis or not weapon then
34907: LD_VAR 0 1
34911: NOT
34912: PUSH
34913: LD_VAR 0 2
34917: NOT
34918: OR
34919: IFFALSE 34923
// exit ;
34921: GO 35985
// case weapon of us_machine_gun :
34923: LD_VAR 0 2
34927: PUSH
34928: LD_INT 2
34930: DOUBLE
34931: EQUAL
34932: IFTRUE 34936
34934: GO 34966
34936: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 3
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 5
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
34964: GO 35969
34966: LD_INT 3
34968: DOUBLE
34969: EQUAL
34970: IFTRUE 34974
34972: GO 35004
34974: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34975: LD_ADDR_VAR 0 3
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 3
34988: PUSH
34989: LD_INT 4
34991: PUSH
34992: LD_INT 5
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: ST_TO_ADDR
35002: GO 35969
35004: LD_INT 11
35006: DOUBLE
35007: EQUAL
35008: IFTRUE 35012
35010: GO 35042
35012: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35013: LD_ADDR_VAR 0 3
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: LD_INT 4
35029: PUSH
35030: LD_INT 5
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: ST_TO_ADDR
35040: GO 35969
35042: LD_INT 4
35044: DOUBLE
35045: EQUAL
35046: IFTRUE 35050
35048: GO 35076
35050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35051: LD_ADDR_VAR 0 3
35055: PUSH
35056: LD_INT 2
35058: PUSH
35059: LD_INT 3
35061: PUSH
35062: LD_INT 4
35064: PUSH
35065: LD_INT 5
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: ST_TO_ADDR
35074: GO 35969
35076: LD_INT 5
35078: DOUBLE
35079: EQUAL
35080: IFTRUE 35084
35082: GO 35110
35084: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35085: LD_ADDR_VAR 0 3
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 4
35098: PUSH
35099: LD_INT 5
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: ST_TO_ADDR
35108: GO 35969
35110: LD_INT 9
35112: DOUBLE
35113: EQUAL
35114: IFTRUE 35118
35116: GO 35144
35118: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35119: LD_ADDR_VAR 0 3
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: LD_INT 3
35129: PUSH
35130: LD_INT 4
35132: PUSH
35133: LD_INT 5
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
35142: GO 35969
35144: LD_INT 7
35146: DOUBLE
35147: EQUAL
35148: IFTRUE 35152
35150: GO 35178
35152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35153: LD_ADDR_VAR 0 3
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: LD_INT 3
35163: PUSH
35164: LD_INT 4
35166: PUSH
35167: LD_INT 5
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
35176: GO 35969
35178: LD_INT 12
35180: DOUBLE
35181: EQUAL
35182: IFTRUE 35186
35184: GO 35212
35186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35187: LD_ADDR_VAR 0 3
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: LD_INT 3
35197: PUSH
35198: LD_INT 4
35200: PUSH
35201: LD_INT 5
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
35210: GO 35969
35212: LD_INT 13
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35220
35218: GO 35246
35220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35221: LD_ADDR_VAR 0 3
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: LD_INT 3
35231: PUSH
35232: LD_INT 4
35234: PUSH
35235: LD_INT 5
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
35244: GO 35969
35246: LD_INT 14
35248: DOUBLE
35249: EQUAL
35250: IFTRUE 35254
35252: GO 35272
35254: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35255: LD_ADDR_VAR 0 3
35259: PUSH
35260: LD_INT 4
35262: PUSH
35263: LD_INT 5
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: ST_TO_ADDR
35270: GO 35969
35272: LD_INT 6
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35280
35278: GO 35298
35280: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35281: LD_ADDR_VAR 0 3
35285: PUSH
35286: LD_INT 4
35288: PUSH
35289: LD_INT 5
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: ST_TO_ADDR
35296: GO 35969
35298: LD_INT 10
35300: DOUBLE
35301: EQUAL
35302: IFTRUE 35306
35304: GO 35324
35306: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35307: LD_ADDR_VAR 0 3
35311: PUSH
35312: LD_INT 4
35314: PUSH
35315: LD_INT 5
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: ST_TO_ADDR
35322: GO 35969
35324: LD_INT 22
35326: DOUBLE
35327: EQUAL
35328: IFTRUE 35332
35330: GO 35358
35332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_INT 11
35340: PUSH
35341: LD_INT 12
35343: PUSH
35344: LD_INT 13
35346: PUSH
35347: LD_INT 14
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: ST_TO_ADDR
35356: GO 35969
35358: LD_INT 23
35360: DOUBLE
35361: EQUAL
35362: IFTRUE 35366
35364: GO 35392
35366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35367: LD_ADDR_VAR 0 3
35371: PUSH
35372: LD_INT 11
35374: PUSH
35375: LD_INT 12
35377: PUSH
35378: LD_INT 13
35380: PUSH
35381: LD_INT 14
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
35390: GO 35969
35392: LD_INT 24
35394: DOUBLE
35395: EQUAL
35396: IFTRUE 35400
35398: GO 35426
35400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35401: LD_ADDR_VAR 0 3
35405: PUSH
35406: LD_INT 11
35408: PUSH
35409: LD_INT 12
35411: PUSH
35412: LD_INT 13
35414: PUSH
35415: LD_INT 14
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: ST_TO_ADDR
35424: GO 35969
35426: LD_INT 30
35428: DOUBLE
35429: EQUAL
35430: IFTRUE 35434
35432: GO 35460
35434: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35435: LD_ADDR_VAR 0 3
35439: PUSH
35440: LD_INT 11
35442: PUSH
35443: LD_INT 12
35445: PUSH
35446: LD_INT 13
35448: PUSH
35449: LD_INT 14
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: ST_TO_ADDR
35458: GO 35969
35460: LD_INT 25
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35468
35466: GO 35486
35468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35469: LD_ADDR_VAR 0 3
35473: PUSH
35474: LD_INT 13
35476: PUSH
35477: LD_INT 14
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: ST_TO_ADDR
35484: GO 35969
35486: LD_INT 27
35488: DOUBLE
35489: EQUAL
35490: IFTRUE 35494
35492: GO 35512
35494: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35495: LD_ADDR_VAR 0 3
35499: PUSH
35500: LD_INT 13
35502: PUSH
35503: LD_INT 14
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: ST_TO_ADDR
35510: GO 35969
35512: LD_EXP 49
35516: DOUBLE
35517: EQUAL
35518: IFTRUE 35522
35520: GO 35548
35522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35523: LD_ADDR_VAR 0 3
35527: PUSH
35528: LD_INT 11
35530: PUSH
35531: LD_INT 12
35533: PUSH
35534: LD_INT 13
35536: PUSH
35537: LD_INT 14
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: ST_TO_ADDR
35546: GO 35969
35548: LD_INT 28
35550: DOUBLE
35551: EQUAL
35552: IFTRUE 35556
35554: GO 35574
35556: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35557: LD_ADDR_VAR 0 3
35561: PUSH
35562: LD_INT 13
35564: PUSH
35565: LD_INT 14
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: ST_TO_ADDR
35572: GO 35969
35574: LD_INT 29
35576: DOUBLE
35577: EQUAL
35578: IFTRUE 35582
35580: GO 35600
35582: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35583: LD_ADDR_VAR 0 3
35587: PUSH
35588: LD_INT 13
35590: PUSH
35591: LD_INT 14
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: ST_TO_ADDR
35598: GO 35969
35600: LD_INT 31
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35608
35606: GO 35626
35608: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_INT 13
35616: PUSH
35617: LD_INT 14
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: ST_TO_ADDR
35624: GO 35969
35626: LD_INT 26
35628: DOUBLE
35629: EQUAL
35630: IFTRUE 35634
35632: GO 35652
35634: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35635: LD_ADDR_VAR 0 3
35639: PUSH
35640: LD_INT 13
35642: PUSH
35643: LD_INT 14
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: ST_TO_ADDR
35650: GO 35969
35652: LD_INT 42
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35660
35658: GO 35686
35660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35661: LD_ADDR_VAR 0 3
35665: PUSH
35666: LD_INT 21
35668: PUSH
35669: LD_INT 22
35671: PUSH
35672: LD_INT 23
35674: PUSH
35675: LD_INT 24
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: ST_TO_ADDR
35684: GO 35969
35686: LD_INT 43
35688: DOUBLE
35689: EQUAL
35690: IFTRUE 35694
35692: GO 35720
35694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35695: LD_ADDR_VAR 0 3
35699: PUSH
35700: LD_INT 21
35702: PUSH
35703: LD_INT 22
35705: PUSH
35706: LD_INT 23
35708: PUSH
35709: LD_INT 24
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: ST_TO_ADDR
35718: GO 35969
35720: LD_INT 44
35722: DOUBLE
35723: EQUAL
35724: IFTRUE 35728
35726: GO 35754
35728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35729: LD_ADDR_VAR 0 3
35733: PUSH
35734: LD_INT 21
35736: PUSH
35737: LD_INT 22
35739: PUSH
35740: LD_INT 23
35742: PUSH
35743: LD_INT 24
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: ST_TO_ADDR
35752: GO 35969
35754: LD_INT 45
35756: DOUBLE
35757: EQUAL
35758: IFTRUE 35762
35760: GO 35788
35762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35763: LD_ADDR_VAR 0 3
35767: PUSH
35768: LD_INT 21
35770: PUSH
35771: LD_INT 22
35773: PUSH
35774: LD_INT 23
35776: PUSH
35777: LD_INT 24
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: ST_TO_ADDR
35786: GO 35969
35788: LD_INT 49
35790: DOUBLE
35791: EQUAL
35792: IFTRUE 35796
35794: GO 35822
35796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35797: LD_ADDR_VAR 0 3
35801: PUSH
35802: LD_INT 21
35804: PUSH
35805: LD_INT 22
35807: PUSH
35808: LD_INT 23
35810: PUSH
35811: LD_INT 24
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: ST_TO_ADDR
35820: GO 35969
35822: LD_INT 51
35824: DOUBLE
35825: EQUAL
35826: IFTRUE 35830
35828: GO 35856
35830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35831: LD_ADDR_VAR 0 3
35835: PUSH
35836: LD_INT 21
35838: PUSH
35839: LD_INT 22
35841: PUSH
35842: LD_INT 23
35844: PUSH
35845: LD_INT 24
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: ST_TO_ADDR
35854: GO 35969
35856: LD_INT 52
35858: DOUBLE
35859: EQUAL
35860: IFTRUE 35864
35862: GO 35890
35864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35865: LD_ADDR_VAR 0 3
35869: PUSH
35870: LD_INT 21
35872: PUSH
35873: LD_INT 22
35875: PUSH
35876: LD_INT 23
35878: PUSH
35879: LD_INT 24
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: ST_TO_ADDR
35888: GO 35969
35890: LD_INT 53
35892: DOUBLE
35893: EQUAL
35894: IFTRUE 35898
35896: GO 35916
35898: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35899: LD_ADDR_VAR 0 3
35903: PUSH
35904: LD_INT 23
35906: PUSH
35907: LD_INT 24
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: ST_TO_ADDR
35914: GO 35969
35916: LD_INT 46
35918: DOUBLE
35919: EQUAL
35920: IFTRUE 35924
35922: GO 35942
35924: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35925: LD_ADDR_VAR 0 3
35929: PUSH
35930: LD_INT 23
35932: PUSH
35933: LD_INT 24
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: ST_TO_ADDR
35940: GO 35969
35942: LD_INT 47
35944: DOUBLE
35945: EQUAL
35946: IFTRUE 35950
35948: GO 35968
35950: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35951: LD_ADDR_VAR 0 3
35955: PUSH
35956: LD_INT 23
35958: PUSH
35959: LD_INT 24
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: ST_TO_ADDR
35966: GO 35969
35968: POP
// result := ( chassis in result ) ;
35969: LD_ADDR_VAR 0 3
35973: PUSH
35974: LD_VAR 0 1
35978: PUSH
35979: LD_VAR 0 3
35983: IN
35984: ST_TO_ADDR
// end ;
35985: LD_VAR 0 3
35989: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35990: LD_INT 0
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
35997: PPUSH
35998: PPUSH
// result := array ;
35999: LD_ADDR_VAR 0 5
36003: PUSH
36004: LD_VAR 0 1
36008: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36009: LD_VAR 0 1
36013: NOT
36014: PUSH
36015: LD_VAR 0 2
36019: NOT
36020: OR
36021: PUSH
36022: LD_VAR 0 3
36026: NOT
36027: OR
36028: PUSH
36029: LD_VAR 0 2
36033: PUSH
36034: LD_VAR 0 1
36038: GREATER
36039: OR
36040: PUSH
36041: LD_VAR 0 3
36045: PUSH
36046: LD_VAR 0 1
36050: GREATER
36051: OR
36052: IFFALSE 36056
// exit ;
36054: GO 36352
// if direction then
36056: LD_VAR 0 4
36060: IFFALSE 36124
// begin d := 1 ;
36062: LD_ADDR_VAR 0 9
36066: PUSH
36067: LD_INT 1
36069: ST_TO_ADDR
// if i_from > i_to then
36070: LD_VAR 0 2
36074: PUSH
36075: LD_VAR 0 3
36079: GREATER
36080: IFFALSE 36106
// length := ( array - i_from ) + i_to else
36082: LD_ADDR_VAR 0 11
36086: PUSH
36087: LD_VAR 0 1
36091: PUSH
36092: LD_VAR 0 2
36096: MINUS
36097: PUSH
36098: LD_VAR 0 3
36102: PLUS
36103: ST_TO_ADDR
36104: GO 36122
// length := i_to - i_from ;
36106: LD_ADDR_VAR 0 11
36110: PUSH
36111: LD_VAR 0 3
36115: PUSH
36116: LD_VAR 0 2
36120: MINUS
36121: ST_TO_ADDR
// end else
36122: GO 36185
// begin d := - 1 ;
36124: LD_ADDR_VAR 0 9
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: ST_TO_ADDR
// if i_from > i_to then
36133: LD_VAR 0 2
36137: PUSH
36138: LD_VAR 0 3
36142: GREATER
36143: IFFALSE 36163
// length := i_from - i_to else
36145: LD_ADDR_VAR 0 11
36149: PUSH
36150: LD_VAR 0 2
36154: PUSH
36155: LD_VAR 0 3
36159: MINUS
36160: ST_TO_ADDR
36161: GO 36185
// length := ( array - i_to ) + i_from ;
36163: LD_ADDR_VAR 0 11
36167: PUSH
36168: LD_VAR 0 1
36172: PUSH
36173: LD_VAR 0 3
36177: MINUS
36178: PUSH
36179: LD_VAR 0 2
36183: PLUS
36184: ST_TO_ADDR
// end ; if not length then
36185: LD_VAR 0 11
36189: NOT
36190: IFFALSE 36194
// exit ;
36192: GO 36352
// tmp := array ;
36194: LD_ADDR_VAR 0 10
36198: PUSH
36199: LD_VAR 0 1
36203: ST_TO_ADDR
// for i = 1 to length do
36204: LD_ADDR_VAR 0 6
36208: PUSH
36209: DOUBLE
36210: LD_INT 1
36212: DEC
36213: ST_TO_ADDR
36214: LD_VAR 0 11
36218: PUSH
36219: FOR_TO
36220: IFFALSE 36340
// begin for j = 1 to array do
36222: LD_ADDR_VAR 0 7
36226: PUSH
36227: DOUBLE
36228: LD_INT 1
36230: DEC
36231: ST_TO_ADDR
36232: LD_VAR 0 1
36236: PUSH
36237: FOR_TO
36238: IFFALSE 36326
// begin k := j + d ;
36240: LD_ADDR_VAR 0 8
36244: PUSH
36245: LD_VAR 0 7
36249: PUSH
36250: LD_VAR 0 9
36254: PLUS
36255: ST_TO_ADDR
// if k > array then
36256: LD_VAR 0 8
36260: PUSH
36261: LD_VAR 0 1
36265: GREATER
36266: IFFALSE 36276
// k := 1 ;
36268: LD_ADDR_VAR 0 8
36272: PUSH
36273: LD_INT 1
36275: ST_TO_ADDR
// if not k then
36276: LD_VAR 0 8
36280: NOT
36281: IFFALSE 36293
// k := array ;
36283: LD_ADDR_VAR 0 8
36287: PUSH
36288: LD_VAR 0 1
36292: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36293: LD_ADDR_VAR 0 10
36297: PUSH
36298: LD_VAR 0 10
36302: PPUSH
36303: LD_VAR 0 8
36307: PPUSH
36308: LD_VAR 0 1
36312: PUSH
36313: LD_VAR 0 7
36317: ARRAY
36318: PPUSH
36319: CALL_OW 1
36323: ST_TO_ADDR
// end ;
36324: GO 36237
36326: POP
36327: POP
// array := tmp ;
36328: LD_ADDR_VAR 0 1
36332: PUSH
36333: LD_VAR 0 10
36337: ST_TO_ADDR
// end ;
36338: GO 36219
36340: POP
36341: POP
// result := array ;
36342: LD_ADDR_VAR 0 5
36346: PUSH
36347: LD_VAR 0 1
36351: ST_TO_ADDR
// end ;
36352: LD_VAR 0 5
36356: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36357: LD_INT 0
36359: PPUSH
36360: PPUSH
// result := 0 ;
36361: LD_ADDR_VAR 0 3
36365: PUSH
36366: LD_INT 0
36368: ST_TO_ADDR
// if not array or not value in array then
36369: LD_VAR 0 1
36373: NOT
36374: PUSH
36375: LD_VAR 0 2
36379: PUSH
36380: LD_VAR 0 1
36384: IN
36385: NOT
36386: OR
36387: IFFALSE 36391
// exit ;
36389: GO 36445
// for i = 1 to array do
36391: LD_ADDR_VAR 0 4
36395: PUSH
36396: DOUBLE
36397: LD_INT 1
36399: DEC
36400: ST_TO_ADDR
36401: LD_VAR 0 1
36405: PUSH
36406: FOR_TO
36407: IFFALSE 36443
// if value = array [ i ] then
36409: LD_VAR 0 2
36413: PUSH
36414: LD_VAR 0 1
36418: PUSH
36419: LD_VAR 0 4
36423: ARRAY
36424: EQUAL
36425: IFFALSE 36441
// begin result := i ;
36427: LD_ADDR_VAR 0 3
36431: PUSH
36432: LD_VAR 0 4
36436: ST_TO_ADDR
// exit ;
36437: POP
36438: POP
36439: GO 36445
// end ;
36441: GO 36406
36443: POP
36444: POP
// end ;
36445: LD_VAR 0 3
36449: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36450: LD_INT 0
36452: PPUSH
// vc_chassis := chassis ;
36453: LD_ADDR_OWVAR 37
36457: PUSH
36458: LD_VAR 0 1
36462: ST_TO_ADDR
// vc_engine := engine ;
36463: LD_ADDR_OWVAR 39
36467: PUSH
36468: LD_VAR 0 2
36472: ST_TO_ADDR
// vc_control := control ;
36473: LD_ADDR_OWVAR 38
36477: PUSH
36478: LD_VAR 0 3
36482: ST_TO_ADDR
// vc_weapon := weapon ;
36483: LD_ADDR_OWVAR 40
36487: PUSH
36488: LD_VAR 0 4
36492: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36493: LD_ADDR_OWVAR 41
36497: PUSH
36498: LD_VAR 0 5
36502: ST_TO_ADDR
// end ;
36503: LD_VAR 0 6
36507: RET
// export function WantPlant ( unit ) ; var task ; begin
36508: LD_INT 0
36510: PPUSH
36511: PPUSH
// result := false ;
36512: LD_ADDR_VAR 0 2
36516: PUSH
36517: LD_INT 0
36519: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36520: LD_ADDR_VAR 0 3
36524: PUSH
36525: LD_VAR 0 1
36529: PPUSH
36530: CALL_OW 437
36534: ST_TO_ADDR
// if task then
36535: LD_VAR 0 3
36539: IFFALSE 36567
// if task [ 1 ] [ 1 ] = p then
36541: LD_VAR 0 3
36545: PUSH
36546: LD_INT 1
36548: ARRAY
36549: PUSH
36550: LD_INT 1
36552: ARRAY
36553: PUSH
36554: LD_STRING p
36556: EQUAL
36557: IFFALSE 36567
// result := true ;
36559: LD_ADDR_VAR 0 2
36563: PUSH
36564: LD_INT 1
36566: ST_TO_ADDR
// end ;
36567: LD_VAR 0 2
36571: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36572: LD_INT 0
36574: PPUSH
36575: PPUSH
36576: PPUSH
36577: PPUSH
// if pos < 1 then
36578: LD_VAR 0 2
36582: PUSH
36583: LD_INT 1
36585: LESS
36586: IFFALSE 36590
// exit ;
36588: GO 36893
// if pos = 1 then
36590: LD_VAR 0 2
36594: PUSH
36595: LD_INT 1
36597: EQUAL
36598: IFFALSE 36631
// result := Replace ( arr , pos [ 1 ] , value ) else
36600: LD_ADDR_VAR 0 4
36604: PUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: LD_VAR 0 2
36614: PUSH
36615: LD_INT 1
36617: ARRAY
36618: PPUSH
36619: LD_VAR 0 3
36623: PPUSH
36624: CALL_OW 1
36628: ST_TO_ADDR
36629: GO 36893
// begin tmp := arr ;
36631: LD_ADDR_VAR 0 6
36635: PUSH
36636: LD_VAR 0 1
36640: ST_TO_ADDR
// s_arr := [ tmp ] ;
36641: LD_ADDR_VAR 0 7
36645: PUSH
36646: LD_VAR 0 6
36650: PUSH
36651: EMPTY
36652: LIST
36653: ST_TO_ADDR
// for i = 1 to pos - 1 do
36654: LD_ADDR_VAR 0 5
36658: PUSH
36659: DOUBLE
36660: LD_INT 1
36662: DEC
36663: ST_TO_ADDR
36664: LD_VAR 0 2
36668: PUSH
36669: LD_INT 1
36671: MINUS
36672: PUSH
36673: FOR_TO
36674: IFFALSE 36719
// begin tmp := tmp [ pos [ i ] ] ;
36676: LD_ADDR_VAR 0 6
36680: PUSH
36681: LD_VAR 0 6
36685: PUSH
36686: LD_VAR 0 2
36690: PUSH
36691: LD_VAR 0 5
36695: ARRAY
36696: ARRAY
36697: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36698: LD_ADDR_VAR 0 7
36702: PUSH
36703: LD_VAR 0 7
36707: PUSH
36708: LD_VAR 0 6
36712: PUSH
36713: EMPTY
36714: LIST
36715: ADD
36716: ST_TO_ADDR
// end ;
36717: GO 36673
36719: POP
36720: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36721: LD_ADDR_VAR 0 6
36725: PUSH
36726: LD_VAR 0 6
36730: PPUSH
36731: LD_VAR 0 2
36735: PUSH
36736: LD_VAR 0 2
36740: ARRAY
36741: PPUSH
36742: LD_VAR 0 3
36746: PPUSH
36747: CALL_OW 1
36751: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36752: LD_ADDR_VAR 0 7
36756: PUSH
36757: LD_VAR 0 7
36761: PPUSH
36762: LD_VAR 0 7
36766: PPUSH
36767: LD_VAR 0 6
36771: PPUSH
36772: CALL_OW 1
36776: ST_TO_ADDR
// for i = s_arr downto 2 do
36777: LD_ADDR_VAR 0 5
36781: PUSH
36782: DOUBLE
36783: LD_VAR 0 7
36787: INC
36788: ST_TO_ADDR
36789: LD_INT 2
36791: PUSH
36792: FOR_DOWNTO
36793: IFFALSE 36877
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36795: LD_ADDR_VAR 0 6
36799: PUSH
36800: LD_VAR 0 7
36804: PUSH
36805: LD_VAR 0 5
36809: PUSH
36810: LD_INT 1
36812: MINUS
36813: ARRAY
36814: PPUSH
36815: LD_VAR 0 2
36819: PUSH
36820: LD_VAR 0 5
36824: PUSH
36825: LD_INT 1
36827: MINUS
36828: ARRAY
36829: PPUSH
36830: LD_VAR 0 7
36834: PUSH
36835: LD_VAR 0 5
36839: ARRAY
36840: PPUSH
36841: CALL_OW 1
36845: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36846: LD_ADDR_VAR 0 7
36850: PUSH
36851: LD_VAR 0 7
36855: PPUSH
36856: LD_VAR 0 5
36860: PUSH
36861: LD_INT 1
36863: MINUS
36864: PPUSH
36865: LD_VAR 0 6
36869: PPUSH
36870: CALL_OW 1
36874: ST_TO_ADDR
// end ;
36875: GO 36792
36877: POP
36878: POP
// result := s_arr [ 1 ] ;
36879: LD_ADDR_VAR 0 4
36883: PUSH
36884: LD_VAR 0 7
36888: PUSH
36889: LD_INT 1
36891: ARRAY
36892: ST_TO_ADDR
// end ; end ;
36893: LD_VAR 0 4
36897: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36898: LD_INT 0
36900: PPUSH
36901: PPUSH
// if not list then
36902: LD_VAR 0 1
36906: NOT
36907: IFFALSE 36911
// exit ;
36909: GO 37002
// i := list [ pos1 ] ;
36911: LD_ADDR_VAR 0 5
36915: PUSH
36916: LD_VAR 0 1
36920: PUSH
36921: LD_VAR 0 2
36925: ARRAY
36926: ST_TO_ADDR
// if not i then
36927: LD_VAR 0 5
36931: NOT
36932: IFFALSE 36936
// exit ;
36934: GO 37002
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36936: LD_ADDR_VAR 0 1
36940: PUSH
36941: LD_VAR 0 1
36945: PPUSH
36946: LD_VAR 0 2
36950: PPUSH
36951: LD_VAR 0 1
36955: PUSH
36956: LD_VAR 0 3
36960: ARRAY
36961: PPUSH
36962: CALL_OW 1
36966: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36967: LD_ADDR_VAR 0 1
36971: PUSH
36972: LD_VAR 0 1
36976: PPUSH
36977: LD_VAR 0 3
36981: PPUSH
36982: LD_VAR 0 5
36986: PPUSH
36987: CALL_OW 1
36991: ST_TO_ADDR
// result := list ;
36992: LD_ADDR_VAR 0 4
36996: PUSH
36997: LD_VAR 0 1
37001: ST_TO_ADDR
// end ;
37002: LD_VAR 0 4
37006: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37007: LD_INT 0
37009: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37010: LD_ADDR_VAR 0 5
37014: PUSH
37015: LD_VAR 0 1
37019: PPUSH
37020: CALL_OW 250
37024: PPUSH
37025: LD_VAR 0 1
37029: PPUSH
37030: CALL_OW 251
37034: PPUSH
37035: LD_VAR 0 2
37039: PPUSH
37040: LD_VAR 0 3
37044: PPUSH
37045: LD_VAR 0 4
37049: PPUSH
37050: CALL 37060 0 5
37054: ST_TO_ADDR
// end ;
37055: LD_VAR 0 5
37059: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37060: LD_INT 0
37062: PPUSH
37063: PPUSH
37064: PPUSH
37065: PPUSH
// if not list then
37066: LD_VAR 0 3
37070: NOT
37071: IFFALSE 37075
// exit ;
37073: GO 37463
// result := [ ] ;
37075: LD_ADDR_VAR 0 6
37079: PUSH
37080: EMPTY
37081: ST_TO_ADDR
// for i in list do
37082: LD_ADDR_VAR 0 7
37086: PUSH
37087: LD_VAR 0 3
37091: PUSH
37092: FOR_IN
37093: IFFALSE 37295
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37095: LD_ADDR_VAR 0 9
37099: PUSH
37100: LD_VAR 0 7
37104: PPUSH
37105: LD_VAR 0 1
37109: PPUSH
37110: LD_VAR 0 2
37114: PPUSH
37115: CALL_OW 297
37119: ST_TO_ADDR
// if not result then
37120: LD_VAR 0 6
37124: NOT
37125: IFFALSE 37151
// result := [ [ i , tmp ] ] else
37127: LD_ADDR_VAR 0 6
37131: PUSH
37132: LD_VAR 0 7
37136: PUSH
37137: LD_VAR 0 9
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: ST_TO_ADDR
37149: GO 37293
// begin if result [ result ] [ 2 ] < tmp then
37151: LD_VAR 0 6
37155: PUSH
37156: LD_VAR 0 6
37160: ARRAY
37161: PUSH
37162: LD_INT 2
37164: ARRAY
37165: PUSH
37166: LD_VAR 0 9
37170: LESS
37171: IFFALSE 37213
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37173: LD_ADDR_VAR 0 6
37177: PUSH
37178: LD_VAR 0 6
37182: PPUSH
37183: LD_VAR 0 6
37187: PUSH
37188: LD_INT 1
37190: PLUS
37191: PPUSH
37192: LD_VAR 0 7
37196: PUSH
37197: LD_VAR 0 9
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PPUSH
37206: CALL_OW 2
37210: ST_TO_ADDR
37211: GO 37293
// for j = 1 to result do
37213: LD_ADDR_VAR 0 8
37217: PUSH
37218: DOUBLE
37219: LD_INT 1
37221: DEC
37222: ST_TO_ADDR
37223: LD_VAR 0 6
37227: PUSH
37228: FOR_TO
37229: IFFALSE 37291
// begin if tmp < result [ j ] [ 2 ] then
37231: LD_VAR 0 9
37235: PUSH
37236: LD_VAR 0 6
37240: PUSH
37241: LD_VAR 0 8
37245: ARRAY
37246: PUSH
37247: LD_INT 2
37249: ARRAY
37250: LESS
37251: IFFALSE 37289
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37253: LD_ADDR_VAR 0 6
37257: PUSH
37258: LD_VAR 0 6
37262: PPUSH
37263: LD_VAR 0 8
37267: PPUSH
37268: LD_VAR 0 7
37272: PUSH
37273: LD_VAR 0 9
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PPUSH
37282: CALL_OW 2
37286: ST_TO_ADDR
// break ;
37287: GO 37291
// end ; end ;
37289: GO 37228
37291: POP
37292: POP
// end ; end ;
37293: GO 37092
37295: POP
37296: POP
// if result and not asc then
37297: LD_VAR 0 6
37301: PUSH
37302: LD_VAR 0 4
37306: NOT
37307: AND
37308: IFFALSE 37383
// begin tmp := result ;
37310: LD_ADDR_VAR 0 9
37314: PUSH
37315: LD_VAR 0 6
37319: ST_TO_ADDR
// for i = tmp downto 1 do
37320: LD_ADDR_VAR 0 7
37324: PUSH
37325: DOUBLE
37326: LD_VAR 0 9
37330: INC
37331: ST_TO_ADDR
37332: LD_INT 1
37334: PUSH
37335: FOR_DOWNTO
37336: IFFALSE 37381
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37338: LD_ADDR_VAR 0 6
37342: PUSH
37343: LD_VAR 0 6
37347: PPUSH
37348: LD_VAR 0 9
37352: PUSH
37353: LD_VAR 0 7
37357: MINUS
37358: PUSH
37359: LD_INT 1
37361: PLUS
37362: PPUSH
37363: LD_VAR 0 9
37367: PUSH
37368: LD_VAR 0 7
37372: ARRAY
37373: PPUSH
37374: CALL_OW 1
37378: ST_TO_ADDR
37379: GO 37335
37381: POP
37382: POP
// end ; tmp := [ ] ;
37383: LD_ADDR_VAR 0 9
37387: PUSH
37388: EMPTY
37389: ST_TO_ADDR
// if mode then
37390: LD_VAR 0 5
37394: IFFALSE 37463
// begin for i = 1 to result do
37396: LD_ADDR_VAR 0 7
37400: PUSH
37401: DOUBLE
37402: LD_INT 1
37404: DEC
37405: ST_TO_ADDR
37406: LD_VAR 0 6
37410: PUSH
37411: FOR_TO
37412: IFFALSE 37451
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37414: LD_ADDR_VAR 0 9
37418: PUSH
37419: LD_VAR 0 9
37423: PPUSH
37424: LD_VAR 0 7
37428: PPUSH
37429: LD_VAR 0 6
37433: PUSH
37434: LD_VAR 0 7
37438: ARRAY
37439: PUSH
37440: LD_INT 1
37442: ARRAY
37443: PPUSH
37444: CALL_OW 1
37448: ST_TO_ADDR
37449: GO 37411
37451: POP
37452: POP
// result := tmp ;
37453: LD_ADDR_VAR 0 6
37457: PUSH
37458: LD_VAR 0 9
37462: ST_TO_ADDR
// end ; end ;
37463: LD_VAR 0 6
37467: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37468: LD_INT 0
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37476: LD_ADDR_VAR 0 5
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: ST_TO_ADDR
// if not x or not y then
37498: LD_VAR 0 2
37502: NOT
37503: PUSH
37504: LD_VAR 0 3
37508: NOT
37509: OR
37510: IFFALSE 37514
// exit ;
37512: GO 39166
// if not range then
37514: LD_VAR 0 4
37518: NOT
37519: IFFALSE 37529
// range := 10 ;
37521: LD_ADDR_VAR 0 4
37525: PUSH
37526: LD_INT 10
37528: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37529: LD_ADDR_VAR 0 8
37533: PUSH
37534: LD_INT 81
37536: PUSH
37537: LD_VAR 0 1
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 92
37548: PUSH
37549: LD_VAR 0 2
37553: PUSH
37554: LD_VAR 0 3
37558: PUSH
37559: LD_VAR 0 4
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 21
37575: PUSH
37576: LD_INT 3
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: PPUSH
37592: CALL_OW 69
37596: ST_TO_ADDR
// if not tmp then
37597: LD_VAR 0 8
37601: NOT
37602: IFFALSE 37606
// exit ;
37604: GO 39166
// for i in tmp do
37606: LD_ADDR_VAR 0 6
37610: PUSH
37611: LD_VAR 0 8
37615: PUSH
37616: FOR_IN
37617: IFFALSE 39141
// begin points := [ 0 , 0 , 0 ] ;
37619: LD_ADDR_VAR 0 9
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: LIST
37637: ST_TO_ADDR
// bpoints := 1 ;
37638: LD_ADDR_VAR 0 10
37642: PUSH
37643: LD_INT 1
37645: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37646: LD_VAR 0 6
37650: PPUSH
37651: CALL_OW 247
37655: PUSH
37656: LD_INT 1
37658: DOUBLE
37659: EQUAL
37660: IFTRUE 37664
37662: GO 38242
37664: POP
// begin if GetClass ( i ) = 1 then
37665: LD_VAR 0 6
37669: PPUSH
37670: CALL_OW 257
37674: PUSH
37675: LD_INT 1
37677: EQUAL
37678: IFFALSE 37699
// points := [ 10 , 5 , 3 ] ;
37680: LD_ADDR_VAR 0 9
37684: PUSH
37685: LD_INT 10
37687: PUSH
37688: LD_INT 5
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37699: LD_VAR 0 6
37703: PPUSH
37704: CALL_OW 257
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: LD_INT 3
37714: PUSH
37715: LD_INT 4
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: IN
37723: IFFALSE 37744
// points := [ 3 , 2 , 1 ] ;
37725: LD_ADDR_VAR 0 9
37729: PUSH
37730: LD_INT 3
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37744: LD_VAR 0 6
37748: PPUSH
37749: CALL_OW 257
37753: PUSH
37754: LD_INT 5
37756: EQUAL
37757: IFFALSE 37778
// points := [ 130 , 5 , 2 ] ;
37759: LD_ADDR_VAR 0 9
37763: PUSH
37764: LD_INT 130
37766: PUSH
37767: LD_INT 5
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37778: LD_VAR 0 6
37782: PPUSH
37783: CALL_OW 257
37787: PUSH
37788: LD_INT 8
37790: EQUAL
37791: IFFALSE 37812
// points := [ 35 , 35 , 30 ] ;
37793: LD_ADDR_VAR 0 9
37797: PUSH
37798: LD_INT 35
37800: PUSH
37801: LD_INT 35
37803: PUSH
37804: LD_INT 30
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37812: LD_VAR 0 6
37816: PPUSH
37817: CALL_OW 257
37821: PUSH
37822: LD_INT 9
37824: EQUAL
37825: IFFALSE 37846
// points := [ 20 , 55 , 40 ] ;
37827: LD_ADDR_VAR 0 9
37831: PUSH
37832: LD_INT 20
37834: PUSH
37835: LD_INT 55
37837: PUSH
37838: LD_INT 40
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37846: LD_VAR 0 6
37850: PPUSH
37851: CALL_OW 257
37855: PUSH
37856: LD_INT 12
37858: PUSH
37859: LD_INT 16
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: IN
37866: IFFALSE 37887
// points := [ 5 , 3 , 2 ] ;
37868: LD_ADDR_VAR 0 9
37872: PUSH
37873: LD_INT 5
37875: PUSH
37876: LD_INT 3
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37887: LD_VAR 0 6
37891: PPUSH
37892: CALL_OW 257
37896: PUSH
37897: LD_INT 17
37899: EQUAL
37900: IFFALSE 37921
// points := [ 100 , 50 , 75 ] ;
37902: LD_ADDR_VAR 0 9
37906: PUSH
37907: LD_INT 100
37909: PUSH
37910: LD_INT 50
37912: PUSH
37913: LD_INT 75
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37921: LD_VAR 0 6
37925: PPUSH
37926: CALL_OW 257
37930: PUSH
37931: LD_INT 15
37933: EQUAL
37934: IFFALSE 37955
// points := [ 10 , 5 , 3 ] ;
37936: LD_ADDR_VAR 0 9
37940: PUSH
37941: LD_INT 10
37943: PUSH
37944: LD_INT 5
37946: PUSH
37947: LD_INT 3
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37955: LD_VAR 0 6
37959: PPUSH
37960: CALL_OW 257
37964: PUSH
37965: LD_INT 14
37967: EQUAL
37968: IFFALSE 37989
// points := [ 10 , 0 , 0 ] ;
37970: LD_ADDR_VAR 0 9
37974: PUSH
37975: LD_INT 10
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: LIST
37988: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37989: LD_VAR 0 6
37993: PPUSH
37994: CALL_OW 257
37998: PUSH
37999: LD_INT 11
38001: EQUAL
38002: IFFALSE 38023
// points := [ 30 , 10 , 5 ] ;
38004: LD_ADDR_VAR 0 9
38008: PUSH
38009: LD_INT 30
38011: PUSH
38012: LD_INT 10
38014: PUSH
38015: LD_INT 5
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: LIST
38022: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38023: LD_VAR 0 1
38027: PPUSH
38028: LD_INT 5
38030: PPUSH
38031: CALL_OW 321
38035: PUSH
38036: LD_INT 2
38038: EQUAL
38039: IFFALSE 38056
// bpoints := bpoints * 1.8 ;
38041: LD_ADDR_VAR 0 10
38045: PUSH
38046: LD_VAR 0 10
38050: PUSH
38051: LD_REAL  1.80000000000000E+0000
38054: MUL
38055: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38056: LD_VAR 0 6
38060: PPUSH
38061: CALL_OW 257
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: LD_INT 4
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: IN
38084: PUSH
38085: LD_VAR 0 1
38089: PPUSH
38090: LD_INT 51
38092: PPUSH
38093: CALL_OW 321
38097: PUSH
38098: LD_INT 2
38100: EQUAL
38101: AND
38102: IFFALSE 38119
// bpoints := bpoints * 1.2 ;
38104: LD_ADDR_VAR 0 10
38108: PUSH
38109: LD_VAR 0 10
38113: PUSH
38114: LD_REAL  1.20000000000000E+0000
38117: MUL
38118: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38119: LD_VAR 0 6
38123: PPUSH
38124: CALL_OW 257
38128: PUSH
38129: LD_INT 5
38131: PUSH
38132: LD_INT 7
38134: PUSH
38135: LD_INT 9
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: LIST
38142: IN
38143: PUSH
38144: LD_VAR 0 1
38148: PPUSH
38149: LD_INT 52
38151: PPUSH
38152: CALL_OW 321
38156: PUSH
38157: LD_INT 2
38159: EQUAL
38160: AND
38161: IFFALSE 38178
// bpoints := bpoints * 1.5 ;
38163: LD_ADDR_VAR 0 10
38167: PUSH
38168: LD_VAR 0 10
38172: PUSH
38173: LD_REAL  1.50000000000000E+0000
38176: MUL
38177: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38178: LD_VAR 0 1
38182: PPUSH
38183: LD_INT 66
38185: PPUSH
38186: CALL_OW 321
38190: PUSH
38191: LD_INT 2
38193: EQUAL
38194: IFFALSE 38211
// bpoints := bpoints * 1.1 ;
38196: LD_ADDR_VAR 0 10
38200: PUSH
38201: LD_VAR 0 10
38205: PUSH
38206: LD_REAL  1.10000000000000E+0000
38209: MUL
38210: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38211: LD_ADDR_VAR 0 10
38215: PUSH
38216: LD_VAR 0 10
38220: PUSH
38221: LD_VAR 0 6
38225: PPUSH
38226: LD_INT 1
38228: PPUSH
38229: CALL_OW 259
38233: PUSH
38234: LD_REAL  1.15000000000000E+0000
38237: MUL
38238: MUL
38239: ST_TO_ADDR
// end ; unit_vehicle :
38240: GO 39070
38242: LD_INT 2
38244: DOUBLE
38245: EQUAL
38246: IFTRUE 38250
38248: GO 39058
38250: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38251: LD_VAR 0 6
38255: PPUSH
38256: CALL_OW 264
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: LD_INT 42
38266: PUSH
38267: LD_INT 24
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: IN
38275: IFFALSE 38296
// points := [ 25 , 5 , 3 ] ;
38277: LD_ADDR_VAR 0 9
38281: PUSH
38282: LD_INT 25
38284: PUSH
38285: LD_INT 5
38287: PUSH
38288: LD_INT 3
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38296: LD_VAR 0 6
38300: PPUSH
38301: CALL_OW 264
38305: PUSH
38306: LD_INT 4
38308: PUSH
38309: LD_INT 43
38311: PUSH
38312: LD_INT 25
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: IN
38320: IFFALSE 38341
// points := [ 40 , 15 , 5 ] ;
38322: LD_ADDR_VAR 0 9
38326: PUSH
38327: LD_INT 40
38329: PUSH
38330: LD_INT 15
38332: PUSH
38333: LD_INT 5
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38341: LD_VAR 0 6
38345: PPUSH
38346: CALL_OW 264
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: LD_INT 23
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: IN
38361: IFFALSE 38382
// points := [ 7 , 25 , 8 ] ;
38363: LD_ADDR_VAR 0 9
38367: PUSH
38368: LD_INT 7
38370: PUSH
38371: LD_INT 25
38373: PUSH
38374: LD_INT 8
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38382: LD_VAR 0 6
38386: PPUSH
38387: CALL_OW 264
38391: PUSH
38392: LD_INT 5
38394: PUSH
38395: LD_INT 27
38397: PUSH
38398: LD_INT 44
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: IN
38406: IFFALSE 38427
// points := [ 14 , 50 , 16 ] ;
38408: LD_ADDR_VAR 0 9
38412: PUSH
38413: LD_INT 14
38415: PUSH
38416: LD_INT 50
38418: PUSH
38419: LD_INT 16
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38427: LD_VAR 0 6
38431: PPUSH
38432: CALL_OW 264
38436: PUSH
38437: LD_INT 6
38439: PUSH
38440: LD_INT 46
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: IN
38447: IFFALSE 38468
// points := [ 32 , 120 , 70 ] ;
38449: LD_ADDR_VAR 0 9
38453: PUSH
38454: LD_INT 32
38456: PUSH
38457: LD_INT 120
38459: PUSH
38460: LD_INT 70
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38468: LD_VAR 0 6
38472: PPUSH
38473: CALL_OW 264
38477: PUSH
38478: LD_INT 7
38480: PUSH
38481: LD_INT 28
38483: PUSH
38484: LD_INT 45
38486: PUSH
38487: LD_EXP 49
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: IN
38498: IFFALSE 38519
// points := [ 35 , 20 , 45 ] ;
38500: LD_ADDR_VAR 0 9
38504: PUSH
38505: LD_INT 35
38507: PUSH
38508: LD_INT 20
38510: PUSH
38511: LD_INT 45
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38519: LD_VAR 0 6
38523: PPUSH
38524: CALL_OW 264
38528: PUSH
38529: LD_INT 47
38531: PUSH
38532: EMPTY
38533: LIST
38534: IN
38535: IFFALSE 38556
// points := [ 67 , 45 , 75 ] ;
38537: LD_ADDR_VAR 0 9
38541: PUSH
38542: LD_INT 67
38544: PUSH
38545: LD_INT 45
38547: PUSH
38548: LD_INT 75
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38556: LD_VAR 0 6
38560: PPUSH
38561: CALL_OW 264
38565: PUSH
38566: LD_INT 26
38568: PUSH
38569: EMPTY
38570: LIST
38571: IN
38572: IFFALSE 38593
// points := [ 120 , 30 , 80 ] ;
38574: LD_ADDR_VAR 0 9
38578: PUSH
38579: LD_INT 120
38581: PUSH
38582: LD_INT 30
38584: PUSH
38585: LD_INT 80
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38593: LD_VAR 0 6
38597: PPUSH
38598: CALL_OW 264
38602: PUSH
38603: LD_INT 22
38605: PUSH
38606: EMPTY
38607: LIST
38608: IN
38609: IFFALSE 38630
// points := [ 40 , 1 , 1 ] ;
38611: LD_ADDR_VAR 0 9
38615: PUSH
38616: LD_INT 40
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38630: LD_VAR 0 6
38634: PPUSH
38635: CALL_OW 264
38639: PUSH
38640: LD_INT 29
38642: PUSH
38643: EMPTY
38644: LIST
38645: IN
38646: IFFALSE 38667
// points := [ 70 , 200 , 400 ] ;
38648: LD_ADDR_VAR 0 9
38652: PUSH
38653: LD_INT 70
38655: PUSH
38656: LD_INT 200
38658: PUSH
38659: LD_INT 400
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38667: LD_VAR 0 6
38671: PPUSH
38672: CALL_OW 264
38676: PUSH
38677: LD_INT 14
38679: PUSH
38680: LD_INT 53
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: IN
38687: IFFALSE 38708
// points := [ 40 , 10 , 20 ] ;
38689: LD_ADDR_VAR 0 9
38693: PUSH
38694: LD_INT 40
38696: PUSH
38697: LD_INT 10
38699: PUSH
38700: LD_INT 20
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38708: LD_VAR 0 6
38712: PPUSH
38713: CALL_OW 264
38717: PUSH
38718: LD_INT 9
38720: PUSH
38721: EMPTY
38722: LIST
38723: IN
38724: IFFALSE 38745
// points := [ 5 , 70 , 20 ] ;
38726: LD_ADDR_VAR 0 9
38730: PUSH
38731: LD_INT 5
38733: PUSH
38734: LD_INT 70
38736: PUSH
38737: LD_INT 20
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38745: LD_VAR 0 6
38749: PPUSH
38750: CALL_OW 264
38754: PUSH
38755: LD_INT 10
38757: PUSH
38758: EMPTY
38759: LIST
38760: IN
38761: IFFALSE 38782
// points := [ 35 , 110 , 70 ] ;
38763: LD_ADDR_VAR 0 9
38767: PUSH
38768: LD_INT 35
38770: PUSH
38771: LD_INT 110
38773: PUSH
38774: LD_INT 70
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38782: LD_VAR 0 6
38786: PPUSH
38787: CALL_OW 265
38791: PUSH
38792: LD_INT 25
38794: EQUAL
38795: IFFALSE 38816
// points := [ 80 , 65 , 100 ] ;
38797: LD_ADDR_VAR 0 9
38801: PUSH
38802: LD_INT 80
38804: PUSH
38805: LD_INT 65
38807: PUSH
38808: LD_INT 100
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38816: LD_VAR 0 6
38820: PPUSH
38821: CALL_OW 263
38825: PUSH
38826: LD_INT 1
38828: EQUAL
38829: IFFALSE 38864
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38831: LD_ADDR_VAR 0 10
38835: PUSH
38836: LD_VAR 0 10
38840: PUSH
38841: LD_VAR 0 6
38845: PPUSH
38846: CALL_OW 311
38850: PPUSH
38851: LD_INT 3
38853: PPUSH
38854: CALL_OW 259
38858: PUSH
38859: LD_INT 4
38861: MUL
38862: MUL
38863: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38864: LD_VAR 0 6
38868: PPUSH
38869: CALL_OW 263
38873: PUSH
38874: LD_INT 2
38876: EQUAL
38877: IFFALSE 38928
// begin j := IsControledBy ( i ) ;
38879: LD_ADDR_VAR 0 7
38883: PUSH
38884: LD_VAR 0 6
38888: PPUSH
38889: CALL_OW 312
38893: ST_TO_ADDR
// if j then
38894: LD_VAR 0 7
38898: IFFALSE 38928
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38900: LD_ADDR_VAR 0 10
38904: PUSH
38905: LD_VAR 0 10
38909: PUSH
38910: LD_VAR 0 7
38914: PPUSH
38915: LD_INT 3
38917: PPUSH
38918: CALL_OW 259
38922: PUSH
38923: LD_INT 3
38925: MUL
38926: MUL
38927: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38928: LD_VAR 0 6
38932: PPUSH
38933: CALL_OW 264
38937: PUSH
38938: LD_INT 5
38940: PUSH
38941: LD_INT 6
38943: PUSH
38944: LD_INT 46
38946: PUSH
38947: LD_INT 44
38949: PUSH
38950: LD_INT 47
38952: PUSH
38953: LD_INT 45
38955: PUSH
38956: LD_INT 28
38958: PUSH
38959: LD_INT 7
38961: PUSH
38962: LD_INT 27
38964: PUSH
38965: LD_INT 29
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: IN
38980: PUSH
38981: LD_VAR 0 1
38985: PPUSH
38986: LD_INT 52
38988: PPUSH
38989: CALL_OW 321
38993: PUSH
38994: LD_INT 2
38996: EQUAL
38997: AND
38998: IFFALSE 39015
// bpoints := bpoints * 1.2 ;
39000: LD_ADDR_VAR 0 10
39004: PUSH
39005: LD_VAR 0 10
39009: PUSH
39010: LD_REAL  1.20000000000000E+0000
39013: MUL
39014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39015: LD_VAR 0 6
39019: PPUSH
39020: CALL_OW 264
39024: PUSH
39025: LD_INT 6
39027: PUSH
39028: LD_INT 46
39030: PUSH
39031: LD_INT 47
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: IN
39039: IFFALSE 39056
// bpoints := bpoints * 1.2 ;
39041: LD_ADDR_VAR 0 10
39045: PUSH
39046: LD_VAR 0 10
39050: PUSH
39051: LD_REAL  1.20000000000000E+0000
39054: MUL
39055: ST_TO_ADDR
// end ; unit_building :
39056: GO 39070
39058: LD_INT 3
39060: DOUBLE
39061: EQUAL
39062: IFTRUE 39066
39064: GO 39069
39066: POP
// ; end ;
39067: GO 39070
39069: POP
// for j = 1 to 3 do
39070: LD_ADDR_VAR 0 7
39074: PUSH
39075: DOUBLE
39076: LD_INT 1
39078: DEC
39079: ST_TO_ADDR
39080: LD_INT 3
39082: PUSH
39083: FOR_TO
39084: IFFALSE 39137
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39086: LD_ADDR_VAR 0 5
39090: PUSH
39091: LD_VAR 0 5
39095: PPUSH
39096: LD_VAR 0 7
39100: PPUSH
39101: LD_VAR 0 5
39105: PUSH
39106: LD_VAR 0 7
39110: ARRAY
39111: PUSH
39112: LD_VAR 0 9
39116: PUSH
39117: LD_VAR 0 7
39121: ARRAY
39122: PUSH
39123: LD_VAR 0 10
39127: MUL
39128: PLUS
39129: PPUSH
39130: CALL_OW 1
39134: ST_TO_ADDR
39135: GO 39083
39137: POP
39138: POP
// end ;
39139: GO 37616
39141: POP
39142: POP
// result := Replace ( result , 4 , tmp ) ;
39143: LD_ADDR_VAR 0 5
39147: PUSH
39148: LD_VAR 0 5
39152: PPUSH
39153: LD_INT 4
39155: PPUSH
39156: LD_VAR 0 8
39160: PPUSH
39161: CALL_OW 1
39165: ST_TO_ADDR
// end ;
39166: LD_VAR 0 5
39170: RET
// export function DangerAtRange ( unit , range ) ; begin
39171: LD_INT 0
39173: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39174: LD_ADDR_VAR 0 3
39178: PUSH
39179: LD_VAR 0 1
39183: PPUSH
39184: CALL_OW 255
39188: PPUSH
39189: LD_VAR 0 1
39193: PPUSH
39194: CALL_OW 250
39198: PPUSH
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 251
39208: PPUSH
39209: LD_VAR 0 2
39213: PPUSH
39214: CALL 37468 0 4
39218: ST_TO_ADDR
// end ;
39219: LD_VAR 0 3
39223: RET
// export function DangerInArea ( side , area ) ; begin
39224: LD_INT 0
39226: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39227: LD_ADDR_VAR 0 3
39231: PUSH
39232: LD_VAR 0 2
39236: PPUSH
39237: LD_INT 81
39239: PUSH
39240: LD_VAR 0 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PPUSH
39249: CALL_OW 70
39253: ST_TO_ADDR
// end ;
39254: LD_VAR 0 3
39258: RET
// export function IsExtension ( b ) ; begin
39259: LD_INT 0
39261: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39262: LD_ADDR_VAR 0 2
39266: PUSH
39267: LD_VAR 0 1
39271: PUSH
39272: LD_INT 23
39274: PUSH
39275: LD_INT 20
39277: PUSH
39278: LD_INT 22
39280: PUSH
39281: LD_INT 17
39283: PUSH
39284: LD_INT 24
39286: PUSH
39287: LD_INT 21
39289: PUSH
39290: LD_INT 19
39292: PUSH
39293: LD_INT 16
39295: PUSH
39296: LD_INT 25
39298: PUSH
39299: LD_INT 18
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: IN
39314: ST_TO_ADDR
// end ;
39315: LD_VAR 0 2
39319: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39320: LD_INT 0
39322: PPUSH
39323: PPUSH
39324: PPUSH
// result := [ ] ;
39325: LD_ADDR_VAR 0 4
39329: PUSH
39330: EMPTY
39331: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39332: LD_ADDR_VAR 0 5
39336: PUSH
39337: LD_VAR 0 2
39341: PPUSH
39342: LD_INT 21
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PPUSH
39352: CALL_OW 70
39356: ST_TO_ADDR
// if not tmp then
39357: LD_VAR 0 5
39361: NOT
39362: IFFALSE 39366
// exit ;
39364: GO 39430
// if checkLink then
39366: LD_VAR 0 3
39370: IFFALSE 39420
// begin for i in tmp do
39372: LD_ADDR_VAR 0 6
39376: PUSH
39377: LD_VAR 0 5
39381: PUSH
39382: FOR_IN
39383: IFFALSE 39418
// if GetBase ( i ) <> base then
39385: LD_VAR 0 6
39389: PPUSH
39390: CALL_OW 274
39394: PUSH
39395: LD_VAR 0 1
39399: NONEQUAL
39400: IFFALSE 39416
// ComLinkToBase ( base , i ) ;
39402: LD_VAR 0 1
39406: PPUSH
39407: LD_VAR 0 6
39411: PPUSH
39412: CALL_OW 169
39416: GO 39382
39418: POP
39419: POP
// end ; result := tmp ;
39420: LD_ADDR_VAR 0 4
39424: PUSH
39425: LD_VAR 0 5
39429: ST_TO_ADDR
// end ;
39430: LD_VAR 0 4
39434: RET
// export function ComComplete ( units , b ) ; var i ; begin
39435: LD_INT 0
39437: PPUSH
39438: PPUSH
// if not units then
39439: LD_VAR 0 1
39443: NOT
39444: IFFALSE 39448
// exit ;
39446: GO 39538
// for i in units do
39448: LD_ADDR_VAR 0 4
39452: PUSH
39453: LD_VAR 0 1
39457: PUSH
39458: FOR_IN
39459: IFFALSE 39536
// if BuildingStatus ( b ) = bs_build then
39461: LD_VAR 0 2
39465: PPUSH
39466: CALL_OW 461
39470: PUSH
39471: LD_INT 1
39473: EQUAL
39474: IFFALSE 39534
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39476: LD_VAR 0 4
39480: PPUSH
39481: LD_STRING h
39483: PUSH
39484: LD_VAR 0 2
39488: PPUSH
39489: CALL_OW 250
39493: PUSH
39494: LD_VAR 0 2
39498: PPUSH
39499: CALL_OW 251
39503: PUSH
39504: LD_VAR 0 2
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: PPUSH
39530: CALL_OW 446
39534: GO 39458
39536: POP
39537: POP
// end ;
39538: LD_VAR 0 3
39542: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39543: LD_INT 0
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39551: LD_VAR 0 1
39555: NOT
39556: PUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 263
39566: PUSH
39567: LD_INT 2
39569: NONEQUAL
39570: OR
39571: IFFALSE 39575
// exit ;
39573: GO 39891
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39575: LD_ADDR_VAR 0 6
39579: PUSH
39580: LD_INT 22
39582: PUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 255
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: PUSH
39600: LD_INT 30
39602: PUSH
39603: LD_INT 36
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 34
39612: PUSH
39613: LD_INT 31
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PPUSH
39629: CALL_OW 69
39633: ST_TO_ADDR
// if not tmp then
39634: LD_VAR 0 6
39638: NOT
39639: IFFALSE 39643
// exit ;
39641: GO 39891
// result := [ ] ;
39643: LD_ADDR_VAR 0 2
39647: PUSH
39648: EMPTY
39649: ST_TO_ADDR
// for i in tmp do
39650: LD_ADDR_VAR 0 3
39654: PUSH
39655: LD_VAR 0 6
39659: PUSH
39660: FOR_IN
39661: IFFALSE 39732
// begin t := UnitsInside ( i ) ;
39663: LD_ADDR_VAR 0 4
39667: PUSH
39668: LD_VAR 0 3
39672: PPUSH
39673: CALL_OW 313
39677: ST_TO_ADDR
// if t then
39678: LD_VAR 0 4
39682: IFFALSE 39730
// for j in t do
39684: LD_ADDR_VAR 0 7
39688: PUSH
39689: LD_VAR 0 4
39693: PUSH
39694: FOR_IN
39695: IFFALSE 39728
// result := Replace ( result , result + 1 , j ) ;
39697: LD_ADDR_VAR 0 2
39701: PUSH
39702: LD_VAR 0 2
39706: PPUSH
39707: LD_VAR 0 2
39711: PUSH
39712: LD_INT 1
39714: PLUS
39715: PPUSH
39716: LD_VAR 0 7
39720: PPUSH
39721: CALL_OW 1
39725: ST_TO_ADDR
39726: GO 39694
39728: POP
39729: POP
// end ;
39730: GO 39660
39732: POP
39733: POP
// if not result then
39734: LD_VAR 0 2
39738: NOT
39739: IFFALSE 39743
// exit ;
39741: GO 39891
// mech := result [ 1 ] ;
39743: LD_ADDR_VAR 0 5
39747: PUSH
39748: LD_VAR 0 2
39752: PUSH
39753: LD_INT 1
39755: ARRAY
39756: ST_TO_ADDR
// if result > 1 then
39757: LD_VAR 0 2
39761: PUSH
39762: LD_INT 1
39764: GREATER
39765: IFFALSE 39877
// begin for i = 2 to result do
39767: LD_ADDR_VAR 0 3
39771: PUSH
39772: DOUBLE
39773: LD_INT 2
39775: DEC
39776: ST_TO_ADDR
39777: LD_VAR 0 2
39781: PUSH
39782: FOR_TO
39783: IFFALSE 39875
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39785: LD_ADDR_VAR 0 4
39789: PUSH
39790: LD_VAR 0 2
39794: PUSH
39795: LD_VAR 0 3
39799: ARRAY
39800: PPUSH
39801: LD_INT 3
39803: PPUSH
39804: CALL_OW 259
39808: PUSH
39809: LD_VAR 0 2
39813: PUSH
39814: LD_VAR 0 3
39818: ARRAY
39819: PPUSH
39820: CALL_OW 432
39824: MINUS
39825: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39826: LD_VAR 0 4
39830: PUSH
39831: LD_VAR 0 5
39835: PPUSH
39836: LD_INT 3
39838: PPUSH
39839: CALL_OW 259
39843: PUSH
39844: LD_VAR 0 5
39848: PPUSH
39849: CALL_OW 432
39853: MINUS
39854: GREATEREQUAL
39855: IFFALSE 39873
// mech := result [ i ] ;
39857: LD_ADDR_VAR 0 5
39861: PUSH
39862: LD_VAR 0 2
39866: PUSH
39867: LD_VAR 0 3
39871: ARRAY
39872: ST_TO_ADDR
// end ;
39873: GO 39782
39875: POP
39876: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39877: LD_VAR 0 1
39881: PPUSH
39882: LD_VAR 0 5
39886: PPUSH
39887: CALL_OW 135
// end ;
39891: LD_VAR 0 2
39895: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39896: LD_INT 0
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
// result := [ ] ;
39911: LD_ADDR_VAR 0 7
39915: PUSH
39916: EMPTY
39917: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39918: LD_VAR 0 1
39922: PPUSH
39923: CALL_OW 266
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: IN
39938: NOT
39939: IFFALSE 39943
// exit ;
39941: GO 41577
// if name then
39943: LD_VAR 0 3
39947: IFFALSE 39963
// SetBName ( base_dep , name ) ;
39949: LD_VAR 0 1
39953: PPUSH
39954: LD_VAR 0 3
39958: PPUSH
39959: CALL_OW 500
// base := GetBase ( base_dep ) ;
39963: LD_ADDR_VAR 0 15
39967: PUSH
39968: LD_VAR 0 1
39972: PPUSH
39973: CALL_OW 274
39977: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39978: LD_ADDR_VAR 0 16
39982: PUSH
39983: LD_VAR 0 1
39987: PPUSH
39988: CALL_OW 255
39992: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39993: LD_ADDR_VAR 0 17
39997: PUSH
39998: LD_VAR 0 1
40002: PPUSH
40003: CALL_OW 248
40007: ST_TO_ADDR
// if sources then
40008: LD_VAR 0 5
40012: IFFALSE 40059
// for i = 1 to 3 do
40014: LD_ADDR_VAR 0 8
40018: PUSH
40019: DOUBLE
40020: LD_INT 1
40022: DEC
40023: ST_TO_ADDR
40024: LD_INT 3
40026: PUSH
40027: FOR_TO
40028: IFFALSE 40057
// AddResourceType ( base , i , sources [ i ] ) ;
40030: LD_VAR 0 15
40034: PPUSH
40035: LD_VAR 0 8
40039: PPUSH
40040: LD_VAR 0 5
40044: PUSH
40045: LD_VAR 0 8
40049: ARRAY
40050: PPUSH
40051: CALL_OW 276
40055: GO 40027
40057: POP
40058: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40059: LD_ADDR_VAR 0 18
40063: PUSH
40064: LD_VAR 0 15
40068: PPUSH
40069: LD_VAR 0 2
40073: PPUSH
40074: LD_INT 1
40076: PPUSH
40077: CALL 39320 0 3
40081: ST_TO_ADDR
// InitHc ;
40082: CALL_OW 19
// InitUc ;
40086: CALL_OW 18
// uc_side := side ;
40090: LD_ADDR_OWVAR 20
40094: PUSH
40095: LD_VAR 0 16
40099: ST_TO_ADDR
// uc_nation := nation ;
40100: LD_ADDR_OWVAR 21
40104: PUSH
40105: LD_VAR 0 17
40109: ST_TO_ADDR
// if buildings then
40110: LD_VAR 0 18
40114: IFFALSE 41436
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40116: LD_ADDR_VAR 0 19
40120: PUSH
40121: LD_VAR 0 18
40125: PPUSH
40126: LD_INT 2
40128: PUSH
40129: LD_INT 30
40131: PUSH
40132: LD_INT 29
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 30
40141: PUSH
40142: LD_INT 30
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: PPUSH
40154: CALL_OW 72
40158: ST_TO_ADDR
// if tmp then
40159: LD_VAR 0 19
40163: IFFALSE 40211
// for i in tmp do
40165: LD_ADDR_VAR 0 8
40169: PUSH
40170: LD_VAR 0 19
40174: PUSH
40175: FOR_IN
40176: IFFALSE 40209
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40178: LD_VAR 0 8
40182: PPUSH
40183: CALL_OW 250
40187: PPUSH
40188: LD_VAR 0 8
40192: PPUSH
40193: CALL_OW 251
40197: PPUSH
40198: LD_VAR 0 16
40202: PPUSH
40203: CALL_OW 441
40207: GO 40175
40209: POP
40210: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40211: LD_VAR 0 18
40215: PPUSH
40216: LD_INT 2
40218: PUSH
40219: LD_INT 30
40221: PUSH
40222: LD_INT 32
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 30
40231: PUSH
40232: LD_INT 33
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: PPUSH
40244: CALL_OW 72
40248: IFFALSE 40336
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40250: LD_ADDR_VAR 0 8
40254: PUSH
40255: LD_VAR 0 18
40259: PPUSH
40260: LD_INT 2
40262: PUSH
40263: LD_INT 30
40265: PUSH
40266: LD_INT 32
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 30
40275: PUSH
40276: LD_INT 33
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: PPUSH
40288: CALL_OW 72
40292: PUSH
40293: FOR_IN
40294: IFFALSE 40334
// begin if not GetBWeapon ( i ) then
40296: LD_VAR 0 8
40300: PPUSH
40301: CALL_OW 269
40305: NOT
40306: IFFALSE 40332
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40308: LD_VAR 0 8
40312: PPUSH
40313: LD_VAR 0 8
40317: PPUSH
40318: LD_VAR 0 2
40322: PPUSH
40323: CALL 41582 0 2
40327: PPUSH
40328: CALL_OW 431
// end ;
40332: GO 40293
40334: POP
40335: POP
// end ; for i = 1 to personel do
40336: LD_ADDR_VAR 0 8
40340: PUSH
40341: DOUBLE
40342: LD_INT 1
40344: DEC
40345: ST_TO_ADDR
40346: LD_VAR 0 6
40350: PUSH
40351: FOR_TO
40352: IFFALSE 41416
// begin if i > 4 then
40354: LD_VAR 0 8
40358: PUSH
40359: LD_INT 4
40361: GREATER
40362: IFFALSE 40366
// break ;
40364: GO 41416
// case i of 1 :
40366: LD_VAR 0 8
40370: PUSH
40371: LD_INT 1
40373: DOUBLE
40374: EQUAL
40375: IFTRUE 40379
40377: GO 40459
40379: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40380: LD_ADDR_VAR 0 12
40384: PUSH
40385: LD_VAR 0 18
40389: PPUSH
40390: LD_INT 22
40392: PUSH
40393: LD_VAR 0 16
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 58
40404: PUSH
40405: EMPTY
40406: LIST
40407: PUSH
40408: LD_INT 2
40410: PUSH
40411: LD_INT 30
40413: PUSH
40414: LD_INT 32
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 30
40423: PUSH
40424: LD_INT 4
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 30
40433: PUSH
40434: LD_INT 5
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: PPUSH
40452: CALL_OW 72
40456: ST_TO_ADDR
40457: GO 40681
40459: LD_INT 2
40461: DOUBLE
40462: EQUAL
40463: IFTRUE 40467
40465: GO 40529
40467: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40468: LD_ADDR_VAR 0 12
40472: PUSH
40473: LD_VAR 0 18
40477: PPUSH
40478: LD_INT 22
40480: PUSH
40481: LD_VAR 0 16
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: LD_INT 30
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 30
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PPUSH
40522: CALL_OW 72
40526: ST_TO_ADDR
40527: GO 40681
40529: LD_INT 3
40531: DOUBLE
40532: EQUAL
40533: IFTRUE 40537
40535: GO 40599
40537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40538: LD_ADDR_VAR 0 12
40542: PUSH
40543: LD_VAR 0 18
40547: PPUSH
40548: LD_INT 22
40550: PUSH
40551: LD_VAR 0 16
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: LD_INT 30
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 30
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PPUSH
40592: CALL_OW 72
40596: ST_TO_ADDR
40597: GO 40681
40599: LD_INT 4
40601: DOUBLE
40602: EQUAL
40603: IFTRUE 40607
40605: GO 40680
40607: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40608: LD_ADDR_VAR 0 12
40612: PUSH
40613: LD_VAR 0 18
40617: PPUSH
40618: LD_INT 22
40620: PUSH
40621: LD_VAR 0 16
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: LD_INT 30
40635: PUSH
40636: LD_INT 6
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 30
40645: PUSH
40646: LD_INT 7
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 30
40655: PUSH
40656: LD_INT 8
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PPUSH
40673: CALL_OW 72
40677: ST_TO_ADDR
40678: GO 40681
40680: POP
// if i = 1 then
40681: LD_VAR 0 8
40685: PUSH
40686: LD_INT 1
40688: EQUAL
40689: IFFALSE 40800
// begin tmp := [ ] ;
40691: LD_ADDR_VAR 0 19
40695: PUSH
40696: EMPTY
40697: ST_TO_ADDR
// for j in f do
40698: LD_ADDR_VAR 0 9
40702: PUSH
40703: LD_VAR 0 12
40707: PUSH
40708: FOR_IN
40709: IFFALSE 40782
// if GetBType ( j ) = b_bunker then
40711: LD_VAR 0 9
40715: PPUSH
40716: CALL_OW 266
40720: PUSH
40721: LD_INT 32
40723: EQUAL
40724: IFFALSE 40751
// tmp := Insert ( tmp , 1 , j ) else
40726: LD_ADDR_VAR 0 19
40730: PUSH
40731: LD_VAR 0 19
40735: PPUSH
40736: LD_INT 1
40738: PPUSH
40739: LD_VAR 0 9
40743: PPUSH
40744: CALL_OW 2
40748: ST_TO_ADDR
40749: GO 40780
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40751: LD_ADDR_VAR 0 19
40755: PUSH
40756: LD_VAR 0 19
40760: PPUSH
40761: LD_VAR 0 19
40765: PUSH
40766: LD_INT 1
40768: PLUS
40769: PPUSH
40770: LD_VAR 0 9
40774: PPUSH
40775: CALL_OW 2
40779: ST_TO_ADDR
40780: GO 40708
40782: POP
40783: POP
// if tmp then
40784: LD_VAR 0 19
40788: IFFALSE 40800
// f := tmp ;
40790: LD_ADDR_VAR 0 12
40794: PUSH
40795: LD_VAR 0 19
40799: ST_TO_ADDR
// end ; x := personel [ i ] ;
40800: LD_ADDR_VAR 0 13
40804: PUSH
40805: LD_VAR 0 6
40809: PUSH
40810: LD_VAR 0 8
40814: ARRAY
40815: ST_TO_ADDR
// if x = - 1 then
40816: LD_VAR 0 13
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: EQUAL
40825: IFFALSE 41034
// begin for j in f do
40827: LD_ADDR_VAR 0 9
40831: PUSH
40832: LD_VAR 0 12
40836: PUSH
40837: FOR_IN
40838: IFFALSE 41030
// repeat InitHc ;
40840: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40844: LD_VAR 0 9
40848: PPUSH
40849: CALL_OW 266
40853: PUSH
40854: LD_INT 5
40856: EQUAL
40857: IFFALSE 40927
// begin if UnitsInside ( j ) < 3 then
40859: LD_VAR 0 9
40863: PPUSH
40864: CALL_OW 313
40868: PUSH
40869: LD_INT 3
40871: LESS
40872: IFFALSE 40908
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40874: LD_INT 0
40876: PPUSH
40877: LD_INT 5
40879: PUSH
40880: LD_INT 8
40882: PUSH
40883: LD_INT 9
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: PUSH
40891: LD_VAR 0 17
40895: ARRAY
40896: PPUSH
40897: LD_VAR 0 4
40901: PPUSH
40902: CALL_OW 380
40906: GO 40925
// PrepareHuman ( false , i , skill ) ;
40908: LD_INT 0
40910: PPUSH
40911: LD_VAR 0 8
40915: PPUSH
40916: LD_VAR 0 4
40920: PPUSH
40921: CALL_OW 380
// end else
40925: GO 40944
// PrepareHuman ( false , i , skill ) ;
40927: LD_INT 0
40929: PPUSH
40930: LD_VAR 0 8
40934: PPUSH
40935: LD_VAR 0 4
40939: PPUSH
40940: CALL_OW 380
// un := CreateHuman ;
40944: LD_ADDR_VAR 0 14
40948: PUSH
40949: CALL_OW 44
40953: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40954: LD_ADDR_VAR 0 7
40958: PUSH
40959: LD_VAR 0 7
40963: PPUSH
40964: LD_INT 1
40966: PPUSH
40967: LD_VAR 0 14
40971: PPUSH
40972: CALL_OW 2
40976: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40977: LD_VAR 0 14
40981: PPUSH
40982: LD_VAR 0 9
40986: PPUSH
40987: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40991: LD_VAR 0 9
40995: PPUSH
40996: CALL_OW 313
41000: PUSH
41001: LD_INT 6
41003: EQUAL
41004: PUSH
41005: LD_VAR 0 9
41009: PPUSH
41010: CALL_OW 266
41014: PUSH
41015: LD_INT 32
41017: PUSH
41018: LD_INT 31
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: IN
41025: OR
41026: IFFALSE 40840
41028: GO 40837
41030: POP
41031: POP
// end else
41032: GO 41414
// for j = 1 to x do
41034: LD_ADDR_VAR 0 9
41038: PUSH
41039: DOUBLE
41040: LD_INT 1
41042: DEC
41043: ST_TO_ADDR
41044: LD_VAR 0 13
41048: PUSH
41049: FOR_TO
41050: IFFALSE 41412
// begin InitHc ;
41052: CALL_OW 19
// if not f then
41056: LD_VAR 0 12
41060: NOT
41061: IFFALSE 41150
// begin PrepareHuman ( false , i , skill ) ;
41063: LD_INT 0
41065: PPUSH
41066: LD_VAR 0 8
41070: PPUSH
41071: LD_VAR 0 4
41075: PPUSH
41076: CALL_OW 380
// un := CreateHuman ;
41080: LD_ADDR_VAR 0 14
41084: PUSH
41085: CALL_OW 44
41089: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41090: LD_ADDR_VAR 0 7
41094: PUSH
41095: LD_VAR 0 7
41099: PPUSH
41100: LD_INT 1
41102: PPUSH
41103: LD_VAR 0 14
41107: PPUSH
41108: CALL_OW 2
41112: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41113: LD_VAR 0 14
41117: PPUSH
41118: LD_VAR 0 1
41122: PPUSH
41123: CALL_OW 250
41127: PPUSH
41128: LD_VAR 0 1
41132: PPUSH
41133: CALL_OW 251
41137: PPUSH
41138: LD_INT 10
41140: PPUSH
41141: LD_INT 0
41143: PPUSH
41144: CALL_OW 50
// continue ;
41148: GO 41049
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41150: LD_VAR 0 12
41154: PUSH
41155: LD_INT 1
41157: ARRAY
41158: PPUSH
41159: CALL_OW 313
41163: PUSH
41164: LD_VAR 0 12
41168: PUSH
41169: LD_INT 1
41171: ARRAY
41172: PPUSH
41173: CALL_OW 266
41177: PUSH
41178: LD_INT 32
41180: PUSH
41181: LD_INT 31
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: IN
41188: AND
41189: PUSH
41190: LD_VAR 0 12
41194: PUSH
41195: LD_INT 1
41197: ARRAY
41198: PPUSH
41199: CALL_OW 313
41203: PUSH
41204: LD_INT 6
41206: EQUAL
41207: OR
41208: IFFALSE 41228
// f := Delete ( f , 1 ) ;
41210: LD_ADDR_VAR 0 12
41214: PUSH
41215: LD_VAR 0 12
41219: PPUSH
41220: LD_INT 1
41222: PPUSH
41223: CALL_OW 3
41227: ST_TO_ADDR
// if not f then
41228: LD_VAR 0 12
41232: NOT
41233: IFFALSE 41251
// begin x := x + 2 ;
41235: LD_ADDR_VAR 0 13
41239: PUSH
41240: LD_VAR 0 13
41244: PUSH
41245: LD_INT 2
41247: PLUS
41248: ST_TO_ADDR
// continue ;
41249: GO 41049
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41251: LD_VAR 0 12
41255: PUSH
41256: LD_INT 1
41258: ARRAY
41259: PPUSH
41260: CALL_OW 266
41264: PUSH
41265: LD_INT 5
41267: EQUAL
41268: IFFALSE 41342
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41270: LD_VAR 0 12
41274: PUSH
41275: LD_INT 1
41277: ARRAY
41278: PPUSH
41279: CALL_OW 313
41283: PUSH
41284: LD_INT 3
41286: LESS
41287: IFFALSE 41323
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41289: LD_INT 0
41291: PPUSH
41292: LD_INT 5
41294: PUSH
41295: LD_INT 8
41297: PUSH
41298: LD_INT 9
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: LIST
41305: PUSH
41306: LD_VAR 0 17
41310: ARRAY
41311: PPUSH
41312: LD_VAR 0 4
41316: PPUSH
41317: CALL_OW 380
41321: GO 41340
// PrepareHuman ( false , i , skill ) ;
41323: LD_INT 0
41325: PPUSH
41326: LD_VAR 0 8
41330: PPUSH
41331: LD_VAR 0 4
41335: PPUSH
41336: CALL_OW 380
// end else
41340: GO 41359
// PrepareHuman ( false , i , skill ) ;
41342: LD_INT 0
41344: PPUSH
41345: LD_VAR 0 8
41349: PPUSH
41350: LD_VAR 0 4
41354: PPUSH
41355: CALL_OW 380
// un := CreateHuman ;
41359: LD_ADDR_VAR 0 14
41363: PUSH
41364: CALL_OW 44
41368: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41369: LD_ADDR_VAR 0 7
41373: PUSH
41374: LD_VAR 0 7
41378: PPUSH
41379: LD_INT 1
41381: PPUSH
41382: LD_VAR 0 14
41386: PPUSH
41387: CALL_OW 2
41391: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41392: LD_VAR 0 14
41396: PPUSH
41397: LD_VAR 0 12
41401: PUSH
41402: LD_INT 1
41404: ARRAY
41405: PPUSH
41406: CALL_OW 52
// end ;
41410: GO 41049
41412: POP
41413: POP
// end ;
41414: GO 40351
41416: POP
41417: POP
// result := result ^ buildings ;
41418: LD_ADDR_VAR 0 7
41422: PUSH
41423: LD_VAR 0 7
41427: PUSH
41428: LD_VAR 0 18
41432: ADD
41433: ST_TO_ADDR
// end else
41434: GO 41577
// begin for i = 1 to personel do
41436: LD_ADDR_VAR 0 8
41440: PUSH
41441: DOUBLE
41442: LD_INT 1
41444: DEC
41445: ST_TO_ADDR
41446: LD_VAR 0 6
41450: PUSH
41451: FOR_TO
41452: IFFALSE 41575
// begin if i > 4 then
41454: LD_VAR 0 8
41458: PUSH
41459: LD_INT 4
41461: GREATER
41462: IFFALSE 41466
// break ;
41464: GO 41575
// x := personel [ i ] ;
41466: LD_ADDR_VAR 0 13
41470: PUSH
41471: LD_VAR 0 6
41475: PUSH
41476: LD_VAR 0 8
41480: ARRAY
41481: ST_TO_ADDR
// if x = - 1 then
41482: LD_VAR 0 13
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: EQUAL
41491: IFFALSE 41495
// continue ;
41493: GO 41451
// PrepareHuman ( false , i , skill ) ;
41495: LD_INT 0
41497: PPUSH
41498: LD_VAR 0 8
41502: PPUSH
41503: LD_VAR 0 4
41507: PPUSH
41508: CALL_OW 380
// un := CreateHuman ;
41512: LD_ADDR_VAR 0 14
41516: PUSH
41517: CALL_OW 44
41521: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41522: LD_VAR 0 14
41526: PPUSH
41527: LD_VAR 0 1
41531: PPUSH
41532: CALL_OW 250
41536: PPUSH
41537: LD_VAR 0 1
41541: PPUSH
41542: CALL_OW 251
41546: PPUSH
41547: LD_INT 10
41549: PPUSH
41550: LD_INT 0
41552: PPUSH
41553: CALL_OW 50
// result := result ^ un ;
41557: LD_ADDR_VAR 0 7
41561: PUSH
41562: LD_VAR 0 7
41566: PUSH
41567: LD_VAR 0 14
41571: ADD
41572: ST_TO_ADDR
// end ;
41573: GO 41451
41575: POP
41576: POP
// end ; end ;
41577: LD_VAR 0 7
41581: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41582: LD_INT 0
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
41590: PPUSH
41591: PPUSH
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
41596: PPUSH
41597: PPUSH
41598: PPUSH
41599: PPUSH
// result := false ;
41600: LD_ADDR_VAR 0 3
41604: PUSH
41605: LD_INT 0
41607: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41608: LD_VAR 0 1
41612: NOT
41613: PUSH
41614: LD_VAR 0 1
41618: PPUSH
41619: CALL_OW 266
41623: PUSH
41624: LD_INT 32
41626: PUSH
41627: LD_INT 33
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: IN
41634: NOT
41635: OR
41636: IFFALSE 41640
// exit ;
41638: GO 42749
// nat := GetNation ( tower ) ;
41640: LD_ADDR_VAR 0 12
41644: PUSH
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 248
41654: ST_TO_ADDR
// side := GetSide ( tower ) ;
41655: LD_ADDR_VAR 0 16
41659: PUSH
41660: LD_VAR 0 1
41664: PPUSH
41665: CALL_OW 255
41669: ST_TO_ADDR
// x := GetX ( tower ) ;
41670: LD_ADDR_VAR 0 10
41674: PUSH
41675: LD_VAR 0 1
41679: PPUSH
41680: CALL_OW 250
41684: ST_TO_ADDR
// y := GetY ( tower ) ;
41685: LD_ADDR_VAR 0 11
41689: PUSH
41690: LD_VAR 0 1
41694: PPUSH
41695: CALL_OW 251
41699: ST_TO_ADDR
// if not x or not y then
41700: LD_VAR 0 10
41704: NOT
41705: PUSH
41706: LD_VAR 0 11
41710: NOT
41711: OR
41712: IFFALSE 41716
// exit ;
41714: GO 42749
// weapon := 0 ;
41716: LD_ADDR_VAR 0 18
41720: PUSH
41721: LD_INT 0
41723: ST_TO_ADDR
// fac_list := [ ] ;
41724: LD_ADDR_VAR 0 17
41728: PUSH
41729: EMPTY
41730: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41731: LD_ADDR_VAR 0 6
41735: PUSH
41736: LD_VAR 0 1
41740: PPUSH
41741: CALL_OW 274
41745: PPUSH
41746: LD_VAR 0 2
41750: PPUSH
41751: LD_INT 0
41753: PPUSH
41754: CALL 39320 0 3
41758: PPUSH
41759: LD_INT 30
41761: PUSH
41762: LD_INT 3
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PPUSH
41769: CALL_OW 72
41773: ST_TO_ADDR
// if not factories then
41774: LD_VAR 0 6
41778: NOT
41779: IFFALSE 41783
// exit ;
41781: GO 42749
// for i in factories do
41783: LD_ADDR_VAR 0 8
41787: PUSH
41788: LD_VAR 0 6
41792: PUSH
41793: FOR_IN
41794: IFFALSE 41819
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41796: LD_ADDR_VAR 0 17
41800: PUSH
41801: LD_VAR 0 17
41805: PUSH
41806: LD_VAR 0 8
41810: PPUSH
41811: CALL_OW 478
41815: UNION
41816: ST_TO_ADDR
41817: GO 41793
41819: POP
41820: POP
// if not fac_list then
41821: LD_VAR 0 17
41825: NOT
41826: IFFALSE 41830
// exit ;
41828: GO 42749
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41830: LD_ADDR_VAR 0 5
41834: PUSH
41835: LD_INT 4
41837: PUSH
41838: LD_INT 5
41840: PUSH
41841: LD_INT 9
41843: PUSH
41844: LD_INT 10
41846: PUSH
41847: LD_INT 6
41849: PUSH
41850: LD_INT 7
41852: PUSH
41853: LD_INT 11
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 27
41867: PUSH
41868: LD_INT 28
41870: PUSH
41871: LD_INT 26
41873: PUSH
41874: LD_INT 30
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 43
41885: PUSH
41886: LD_INT 44
41888: PUSH
41889: LD_INT 46
41891: PUSH
41892: LD_INT 45
41894: PUSH
41895: LD_INT 47
41897: PUSH
41898: LD_INT 49
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: LIST
41913: PUSH
41914: LD_VAR 0 12
41918: ARRAY
41919: ST_TO_ADDR
// list := list isect fac_list ;
41920: LD_ADDR_VAR 0 5
41924: PUSH
41925: LD_VAR 0 5
41929: PUSH
41930: LD_VAR 0 17
41934: ISECT
41935: ST_TO_ADDR
// if not list then
41936: LD_VAR 0 5
41940: NOT
41941: IFFALSE 41945
// exit ;
41943: GO 42749
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41945: LD_VAR 0 12
41949: PUSH
41950: LD_INT 3
41952: EQUAL
41953: PUSH
41954: LD_INT 49
41956: PUSH
41957: LD_VAR 0 5
41961: IN
41962: AND
41963: PUSH
41964: LD_INT 31
41966: PPUSH
41967: LD_VAR 0 16
41971: PPUSH
41972: CALL_OW 321
41976: PUSH
41977: LD_INT 2
41979: EQUAL
41980: AND
41981: IFFALSE 42041
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41983: LD_INT 22
41985: PUSH
41986: LD_VAR 0 16
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 35
41997: PUSH
41998: LD_INT 49
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 91
42007: PUSH
42008: LD_VAR 0 1
42012: PUSH
42013: LD_INT 10
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: PPUSH
42026: CALL_OW 69
42030: NOT
42031: IFFALSE 42041
// weapon := ru_time_lapser ;
42033: LD_ADDR_VAR 0 18
42037: PUSH
42038: LD_INT 49
42040: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42041: LD_VAR 0 12
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: IN
42056: PUSH
42057: LD_INT 11
42059: PUSH
42060: LD_VAR 0 5
42064: IN
42065: PUSH
42066: LD_INT 30
42068: PUSH
42069: LD_VAR 0 5
42073: IN
42074: OR
42075: AND
42076: PUSH
42077: LD_INT 6
42079: PPUSH
42080: LD_VAR 0 16
42084: PPUSH
42085: CALL_OW 321
42089: PUSH
42090: LD_INT 2
42092: EQUAL
42093: AND
42094: IFFALSE 42259
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42096: LD_INT 22
42098: PUSH
42099: LD_VAR 0 16
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: PUSH
42111: LD_INT 35
42113: PUSH
42114: LD_INT 11
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 35
42123: PUSH
42124: LD_INT 30
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 91
42138: PUSH
42139: LD_VAR 0 1
42143: PUSH
42144: LD_INT 18
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: LIST
42156: PPUSH
42157: CALL_OW 69
42161: NOT
42162: PUSH
42163: LD_INT 22
42165: PUSH
42166: LD_VAR 0 16
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: LD_INT 30
42180: PUSH
42181: LD_INT 32
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 30
42190: PUSH
42191: LD_INT 33
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 91
42205: PUSH
42206: LD_VAR 0 1
42210: PUSH
42211: LD_INT 12
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: PUSH
42224: EMPTY
42225: LIST
42226: PPUSH
42227: CALL_OW 69
42231: PUSH
42232: LD_INT 2
42234: GREATER
42235: AND
42236: IFFALSE 42259
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42238: LD_ADDR_VAR 0 18
42242: PUSH
42243: LD_INT 11
42245: PUSH
42246: LD_INT 30
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_VAR 0 12
42257: ARRAY
42258: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42259: LD_VAR 0 18
42263: NOT
42264: PUSH
42265: LD_INT 40
42267: PPUSH
42268: LD_VAR 0 16
42272: PPUSH
42273: CALL_OW 321
42277: PUSH
42278: LD_INT 2
42280: EQUAL
42281: AND
42282: PUSH
42283: LD_INT 7
42285: PUSH
42286: LD_VAR 0 5
42290: IN
42291: PUSH
42292: LD_INT 28
42294: PUSH
42295: LD_VAR 0 5
42299: IN
42300: OR
42301: PUSH
42302: LD_INT 45
42304: PUSH
42305: LD_VAR 0 5
42309: IN
42310: OR
42311: AND
42312: IFFALSE 42566
// begin hex := GetHexInfo ( x , y ) ;
42314: LD_ADDR_VAR 0 4
42318: PUSH
42319: LD_VAR 0 10
42323: PPUSH
42324: LD_VAR 0 11
42328: PPUSH
42329: CALL_OW 546
42333: ST_TO_ADDR
// if hex [ 1 ] then
42334: LD_VAR 0 4
42338: PUSH
42339: LD_INT 1
42341: ARRAY
42342: IFFALSE 42346
// exit ;
42344: GO 42749
// height := hex [ 2 ] ;
42346: LD_ADDR_VAR 0 15
42350: PUSH
42351: LD_VAR 0 4
42355: PUSH
42356: LD_INT 2
42358: ARRAY
42359: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42360: LD_ADDR_VAR 0 14
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: LD_INT 5
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: ST_TO_ADDR
// for i in tmp do
42383: LD_ADDR_VAR 0 8
42387: PUSH
42388: LD_VAR 0 14
42392: PUSH
42393: FOR_IN
42394: IFFALSE 42564
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42396: LD_ADDR_VAR 0 9
42400: PUSH
42401: LD_VAR 0 10
42405: PPUSH
42406: LD_VAR 0 8
42410: PPUSH
42411: LD_INT 5
42413: PPUSH
42414: CALL_OW 272
42418: PUSH
42419: LD_VAR 0 11
42423: PPUSH
42424: LD_VAR 0 8
42428: PPUSH
42429: LD_INT 5
42431: PPUSH
42432: CALL_OW 273
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42441: LD_VAR 0 9
42445: PUSH
42446: LD_INT 1
42448: ARRAY
42449: PPUSH
42450: LD_VAR 0 9
42454: PUSH
42455: LD_INT 2
42457: ARRAY
42458: PPUSH
42459: CALL_OW 488
42463: IFFALSE 42562
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42465: LD_ADDR_VAR 0 4
42469: PUSH
42470: LD_VAR 0 9
42474: PUSH
42475: LD_INT 1
42477: ARRAY
42478: PPUSH
42479: LD_VAR 0 9
42483: PUSH
42484: LD_INT 2
42486: ARRAY
42487: PPUSH
42488: CALL_OW 546
42492: ST_TO_ADDR
// if hex [ 1 ] then
42493: LD_VAR 0 4
42497: PUSH
42498: LD_INT 1
42500: ARRAY
42501: IFFALSE 42505
// continue ;
42503: GO 42393
// h := hex [ 2 ] ;
42505: LD_ADDR_VAR 0 13
42509: PUSH
42510: LD_VAR 0 4
42514: PUSH
42515: LD_INT 2
42517: ARRAY
42518: ST_TO_ADDR
// if h + 7 < height then
42519: LD_VAR 0 13
42523: PUSH
42524: LD_INT 7
42526: PLUS
42527: PUSH
42528: LD_VAR 0 15
42532: LESS
42533: IFFALSE 42562
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42535: LD_ADDR_VAR 0 18
42539: PUSH
42540: LD_INT 7
42542: PUSH
42543: LD_INT 28
42545: PUSH
42546: LD_INT 45
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: PUSH
42554: LD_VAR 0 12
42558: ARRAY
42559: ST_TO_ADDR
// break ;
42560: GO 42564
// end ; end ; end ;
42562: GO 42393
42564: POP
42565: POP
// end ; if not weapon then
42566: LD_VAR 0 18
42570: NOT
42571: IFFALSE 42631
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42573: LD_ADDR_VAR 0 5
42577: PUSH
42578: LD_VAR 0 5
42582: PUSH
42583: LD_INT 11
42585: PUSH
42586: LD_INT 30
42588: PUSH
42589: LD_INT 49
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: LIST
42596: DIFF
42597: ST_TO_ADDR
// if not list then
42598: LD_VAR 0 5
42602: NOT
42603: IFFALSE 42607
// exit ;
42605: GO 42749
// weapon := list [ rand ( 1 , list ) ] ;
42607: LD_ADDR_VAR 0 18
42611: PUSH
42612: LD_VAR 0 5
42616: PUSH
42617: LD_INT 1
42619: PPUSH
42620: LD_VAR 0 5
42624: PPUSH
42625: CALL_OW 12
42629: ARRAY
42630: ST_TO_ADDR
// end ; if weapon then
42631: LD_VAR 0 18
42635: IFFALSE 42749
// begin tmp := CostOfWeapon ( weapon ) ;
42637: LD_ADDR_VAR 0 14
42641: PUSH
42642: LD_VAR 0 18
42646: PPUSH
42647: CALL_OW 451
42651: ST_TO_ADDR
// j := GetBase ( tower ) ;
42652: LD_ADDR_VAR 0 9
42656: PUSH
42657: LD_VAR 0 1
42661: PPUSH
42662: CALL_OW 274
42666: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42667: LD_VAR 0 9
42671: PPUSH
42672: LD_INT 1
42674: PPUSH
42675: CALL_OW 275
42679: PUSH
42680: LD_VAR 0 14
42684: PUSH
42685: LD_INT 1
42687: ARRAY
42688: GREATEREQUAL
42689: PUSH
42690: LD_VAR 0 9
42694: PPUSH
42695: LD_INT 2
42697: PPUSH
42698: CALL_OW 275
42702: PUSH
42703: LD_VAR 0 14
42707: PUSH
42708: LD_INT 2
42710: ARRAY
42711: GREATEREQUAL
42712: AND
42713: PUSH
42714: LD_VAR 0 9
42718: PPUSH
42719: LD_INT 3
42721: PPUSH
42722: CALL_OW 275
42726: PUSH
42727: LD_VAR 0 14
42731: PUSH
42732: LD_INT 3
42734: ARRAY
42735: GREATEREQUAL
42736: AND
42737: IFFALSE 42749
// result := weapon ;
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_VAR 0 18
42748: ST_TO_ADDR
// end ; end ;
42749: LD_VAR 0 3
42753: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42754: LD_INT 0
42756: PPUSH
42757: PPUSH
// result := true ;
42758: LD_ADDR_VAR 0 3
42762: PUSH
42763: LD_INT 1
42765: ST_TO_ADDR
// if array1 = array2 then
42766: LD_VAR 0 1
42770: PUSH
42771: LD_VAR 0 2
42775: EQUAL
42776: IFFALSE 42836
// begin for i = 1 to array1 do
42778: LD_ADDR_VAR 0 4
42782: PUSH
42783: DOUBLE
42784: LD_INT 1
42786: DEC
42787: ST_TO_ADDR
42788: LD_VAR 0 1
42792: PUSH
42793: FOR_TO
42794: IFFALSE 42832
// if array1 [ i ] <> array2 [ i ] then
42796: LD_VAR 0 1
42800: PUSH
42801: LD_VAR 0 4
42805: ARRAY
42806: PUSH
42807: LD_VAR 0 2
42811: PUSH
42812: LD_VAR 0 4
42816: ARRAY
42817: NONEQUAL
42818: IFFALSE 42830
// begin result := false ;
42820: LD_ADDR_VAR 0 3
42824: PUSH
42825: LD_INT 0
42827: ST_TO_ADDR
// break ;
42828: GO 42832
// end ;
42830: GO 42793
42832: POP
42833: POP
// end else
42834: GO 42844
// result := false ;
42836: LD_ADDR_VAR 0 3
42840: PUSH
42841: LD_INT 0
42843: ST_TO_ADDR
// end ;
42844: LD_VAR 0 3
42848: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42849: LD_INT 0
42851: PPUSH
42852: PPUSH
// if not array1 or not array2 then
42853: LD_VAR 0 1
42857: NOT
42858: PUSH
42859: LD_VAR 0 2
42863: NOT
42864: OR
42865: IFFALSE 42869
// exit ;
42867: GO 42933
// result := true ;
42869: LD_ADDR_VAR 0 3
42873: PUSH
42874: LD_INT 1
42876: ST_TO_ADDR
// for i = 1 to array1 do
42877: LD_ADDR_VAR 0 4
42881: PUSH
42882: DOUBLE
42883: LD_INT 1
42885: DEC
42886: ST_TO_ADDR
42887: LD_VAR 0 1
42891: PUSH
42892: FOR_TO
42893: IFFALSE 42931
// if array1 [ i ] <> array2 [ i ] then
42895: LD_VAR 0 1
42899: PUSH
42900: LD_VAR 0 4
42904: ARRAY
42905: PUSH
42906: LD_VAR 0 2
42910: PUSH
42911: LD_VAR 0 4
42915: ARRAY
42916: NONEQUAL
42917: IFFALSE 42929
// begin result := false ;
42919: LD_ADDR_VAR 0 3
42923: PUSH
42924: LD_INT 0
42926: ST_TO_ADDR
// break ;
42927: GO 42931
// end ;
42929: GO 42892
42931: POP
42932: POP
// end ;
42933: LD_VAR 0 3
42937: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42938: LD_INT 0
42940: PPUSH
42941: PPUSH
42942: PPUSH
// pom := GetBase ( fac ) ;
42943: LD_ADDR_VAR 0 5
42947: PUSH
42948: LD_VAR 0 1
42952: PPUSH
42953: CALL_OW 274
42957: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42958: LD_ADDR_VAR 0 4
42962: PUSH
42963: LD_VAR 0 2
42967: PUSH
42968: LD_INT 1
42970: ARRAY
42971: PPUSH
42972: LD_VAR 0 2
42976: PUSH
42977: LD_INT 2
42979: ARRAY
42980: PPUSH
42981: LD_VAR 0 2
42985: PUSH
42986: LD_INT 3
42988: ARRAY
42989: PPUSH
42990: LD_VAR 0 2
42994: PUSH
42995: LD_INT 4
42997: ARRAY
42998: PPUSH
42999: CALL_OW 449
43003: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43004: LD_ADDR_VAR 0 3
43008: PUSH
43009: LD_VAR 0 5
43013: PPUSH
43014: LD_INT 1
43016: PPUSH
43017: CALL_OW 275
43021: PUSH
43022: LD_VAR 0 4
43026: PUSH
43027: LD_INT 1
43029: ARRAY
43030: GREATEREQUAL
43031: PUSH
43032: LD_VAR 0 5
43036: PPUSH
43037: LD_INT 2
43039: PPUSH
43040: CALL_OW 275
43044: PUSH
43045: LD_VAR 0 4
43049: PUSH
43050: LD_INT 2
43052: ARRAY
43053: GREATEREQUAL
43054: AND
43055: PUSH
43056: LD_VAR 0 5
43060: PPUSH
43061: LD_INT 3
43063: PPUSH
43064: CALL_OW 275
43068: PUSH
43069: LD_VAR 0 4
43073: PUSH
43074: LD_INT 3
43076: ARRAY
43077: GREATEREQUAL
43078: AND
43079: ST_TO_ADDR
// end ;
43080: LD_VAR 0 3
43084: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43085: LD_INT 0
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
// pom := GetBase ( building ) ;
43091: LD_ADDR_VAR 0 3
43095: PUSH
43096: LD_VAR 0 1
43100: PPUSH
43101: CALL_OW 274
43105: ST_TO_ADDR
// if not pom then
43106: LD_VAR 0 3
43110: NOT
43111: IFFALSE 43115
// exit ;
43113: GO 43285
// btype := GetBType ( building ) ;
43115: LD_ADDR_VAR 0 5
43119: PUSH
43120: LD_VAR 0 1
43124: PPUSH
43125: CALL_OW 266
43129: ST_TO_ADDR
// if btype = b_armoury then
43130: LD_VAR 0 5
43134: PUSH
43135: LD_INT 4
43137: EQUAL
43138: IFFALSE 43148
// btype := b_barracks ;
43140: LD_ADDR_VAR 0 5
43144: PUSH
43145: LD_INT 5
43147: ST_TO_ADDR
// if btype = b_depot then
43148: LD_VAR 0 5
43152: PUSH
43153: LD_INT 0
43155: EQUAL
43156: IFFALSE 43166
// btype := b_warehouse ;
43158: LD_ADDR_VAR 0 5
43162: PUSH
43163: LD_INT 1
43165: ST_TO_ADDR
// if btype = b_workshop then
43166: LD_VAR 0 5
43170: PUSH
43171: LD_INT 2
43173: EQUAL
43174: IFFALSE 43184
// btype := b_factory ;
43176: LD_ADDR_VAR 0 5
43180: PUSH
43181: LD_INT 3
43183: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43184: LD_ADDR_VAR 0 4
43188: PUSH
43189: LD_VAR 0 5
43193: PPUSH
43194: LD_VAR 0 1
43198: PPUSH
43199: CALL_OW 248
43203: PPUSH
43204: CALL_OW 450
43208: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43209: LD_ADDR_VAR 0 2
43213: PUSH
43214: LD_VAR 0 3
43218: PPUSH
43219: LD_INT 1
43221: PPUSH
43222: CALL_OW 275
43226: PUSH
43227: LD_VAR 0 4
43231: PUSH
43232: LD_INT 1
43234: ARRAY
43235: GREATEREQUAL
43236: PUSH
43237: LD_VAR 0 3
43241: PPUSH
43242: LD_INT 2
43244: PPUSH
43245: CALL_OW 275
43249: PUSH
43250: LD_VAR 0 4
43254: PUSH
43255: LD_INT 2
43257: ARRAY
43258: GREATEREQUAL
43259: AND
43260: PUSH
43261: LD_VAR 0 3
43265: PPUSH
43266: LD_INT 3
43268: PPUSH
43269: CALL_OW 275
43273: PUSH
43274: LD_VAR 0 4
43278: PUSH
43279: LD_INT 3
43281: ARRAY
43282: GREATEREQUAL
43283: AND
43284: ST_TO_ADDR
// end ;
43285: LD_VAR 0 2
43289: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43290: LD_INT 0
43292: PPUSH
43293: PPUSH
43294: PPUSH
// pom := GetBase ( building ) ;
43295: LD_ADDR_VAR 0 4
43299: PUSH
43300: LD_VAR 0 1
43304: PPUSH
43305: CALL_OW 274
43309: ST_TO_ADDR
// if not pom then
43310: LD_VAR 0 4
43314: NOT
43315: IFFALSE 43319
// exit ;
43317: GO 43420
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43319: LD_ADDR_VAR 0 5
43323: PUSH
43324: LD_VAR 0 2
43328: PPUSH
43329: LD_VAR 0 1
43333: PPUSH
43334: CALL_OW 248
43338: PPUSH
43339: CALL_OW 450
43343: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43344: LD_ADDR_VAR 0 3
43348: PUSH
43349: LD_VAR 0 4
43353: PPUSH
43354: LD_INT 1
43356: PPUSH
43357: CALL_OW 275
43361: PUSH
43362: LD_VAR 0 5
43366: PUSH
43367: LD_INT 1
43369: ARRAY
43370: GREATEREQUAL
43371: PUSH
43372: LD_VAR 0 4
43376: PPUSH
43377: LD_INT 2
43379: PPUSH
43380: CALL_OW 275
43384: PUSH
43385: LD_VAR 0 5
43389: PUSH
43390: LD_INT 2
43392: ARRAY
43393: GREATEREQUAL
43394: AND
43395: PUSH
43396: LD_VAR 0 4
43400: PPUSH
43401: LD_INT 3
43403: PPUSH
43404: CALL_OW 275
43408: PUSH
43409: LD_VAR 0 5
43413: PUSH
43414: LD_INT 3
43416: ARRAY
43417: GREATEREQUAL
43418: AND
43419: ST_TO_ADDR
// end ;
43420: LD_VAR 0 3
43424: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43425: LD_INT 0
43427: PPUSH
43428: PPUSH
43429: PPUSH
43430: PPUSH
43431: PPUSH
43432: PPUSH
43433: PPUSH
43434: PPUSH
43435: PPUSH
43436: PPUSH
43437: PPUSH
// result := false ;
43438: LD_ADDR_VAR 0 8
43442: PUSH
43443: LD_INT 0
43445: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43446: LD_VAR 0 5
43450: NOT
43451: PUSH
43452: LD_VAR 0 1
43456: NOT
43457: OR
43458: PUSH
43459: LD_VAR 0 2
43463: NOT
43464: OR
43465: PUSH
43466: LD_VAR 0 3
43470: NOT
43471: OR
43472: IFFALSE 43476
// exit ;
43474: GO 44290
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43476: LD_ADDR_VAR 0 14
43480: PUSH
43481: LD_VAR 0 1
43485: PPUSH
43486: LD_VAR 0 2
43490: PPUSH
43491: LD_VAR 0 3
43495: PPUSH
43496: LD_VAR 0 4
43500: PPUSH
43501: LD_VAR 0 5
43505: PUSH
43506: LD_INT 1
43508: ARRAY
43509: PPUSH
43510: CALL_OW 248
43514: PPUSH
43515: LD_INT 0
43517: PPUSH
43518: CALL 45527 0 6
43522: ST_TO_ADDR
// if not hexes then
43523: LD_VAR 0 14
43527: NOT
43528: IFFALSE 43532
// exit ;
43530: GO 44290
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43532: LD_ADDR_VAR 0 17
43536: PUSH
43537: LD_VAR 0 5
43541: PPUSH
43542: LD_INT 22
43544: PUSH
43545: LD_VAR 0 13
43549: PPUSH
43550: CALL_OW 255
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 30
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 30
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PPUSH
43591: CALL_OW 72
43595: ST_TO_ADDR
// for i = 1 to hexes do
43596: LD_ADDR_VAR 0 9
43600: PUSH
43601: DOUBLE
43602: LD_INT 1
43604: DEC
43605: ST_TO_ADDR
43606: LD_VAR 0 14
43610: PUSH
43611: FOR_TO
43612: IFFALSE 44288
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43614: LD_ADDR_VAR 0 13
43618: PUSH
43619: LD_VAR 0 14
43623: PUSH
43624: LD_VAR 0 9
43628: ARRAY
43629: PUSH
43630: LD_INT 1
43632: ARRAY
43633: PPUSH
43634: LD_VAR 0 14
43638: PUSH
43639: LD_VAR 0 9
43643: ARRAY
43644: PUSH
43645: LD_INT 2
43647: ARRAY
43648: PPUSH
43649: CALL_OW 428
43653: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43654: LD_VAR 0 14
43658: PUSH
43659: LD_VAR 0 9
43663: ARRAY
43664: PUSH
43665: LD_INT 1
43667: ARRAY
43668: PPUSH
43669: LD_VAR 0 14
43673: PUSH
43674: LD_VAR 0 9
43678: ARRAY
43679: PUSH
43680: LD_INT 2
43682: ARRAY
43683: PPUSH
43684: CALL_OW 351
43688: PUSH
43689: LD_VAR 0 14
43693: PUSH
43694: LD_VAR 0 9
43698: ARRAY
43699: PUSH
43700: LD_INT 1
43702: ARRAY
43703: PPUSH
43704: LD_VAR 0 14
43708: PUSH
43709: LD_VAR 0 9
43713: ARRAY
43714: PUSH
43715: LD_INT 2
43717: ARRAY
43718: PPUSH
43719: CALL_OW 488
43723: NOT
43724: OR
43725: PUSH
43726: LD_VAR 0 13
43730: PPUSH
43731: CALL_OW 247
43735: PUSH
43736: LD_INT 3
43738: EQUAL
43739: OR
43740: IFFALSE 43746
// exit ;
43742: POP
43743: POP
43744: GO 44290
// if not tmp then
43746: LD_VAR 0 13
43750: NOT
43751: IFFALSE 43755
// continue ;
43753: GO 43611
// result := true ;
43755: LD_ADDR_VAR 0 8
43759: PUSH
43760: LD_INT 1
43762: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43763: LD_VAR 0 6
43767: PUSH
43768: LD_VAR 0 13
43772: PPUSH
43773: CALL_OW 247
43777: PUSH
43778: LD_INT 2
43780: EQUAL
43781: AND
43782: PUSH
43783: LD_VAR 0 13
43787: PPUSH
43788: CALL_OW 263
43792: PUSH
43793: LD_INT 1
43795: EQUAL
43796: AND
43797: IFFALSE 43961
// begin if IsDrivenBy ( tmp ) then
43799: LD_VAR 0 13
43803: PPUSH
43804: CALL_OW 311
43808: IFFALSE 43812
// continue ;
43810: GO 43611
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43812: LD_VAR 0 6
43816: PPUSH
43817: LD_INT 3
43819: PUSH
43820: LD_INT 60
43822: PUSH
43823: EMPTY
43824: LIST
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 3
43832: PUSH
43833: LD_INT 55
43835: PUSH
43836: EMPTY
43837: LIST
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PPUSH
43847: CALL_OW 72
43851: IFFALSE 43959
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43853: LD_ADDR_VAR 0 18
43857: PUSH
43858: LD_VAR 0 6
43862: PPUSH
43863: LD_INT 3
43865: PUSH
43866: LD_INT 60
43868: PUSH
43869: EMPTY
43870: LIST
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 3
43878: PUSH
43879: LD_INT 55
43881: PUSH
43882: EMPTY
43883: LIST
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PPUSH
43893: CALL_OW 72
43897: PUSH
43898: LD_INT 1
43900: ARRAY
43901: ST_TO_ADDR
// if IsInUnit ( driver ) then
43902: LD_VAR 0 18
43906: PPUSH
43907: CALL_OW 310
43911: IFFALSE 43922
// ComExit ( driver ) ;
43913: LD_VAR 0 18
43917: PPUSH
43918: CALL 68711 0 1
// AddComEnterUnit ( driver , tmp ) ;
43922: LD_VAR 0 18
43926: PPUSH
43927: LD_VAR 0 13
43931: PPUSH
43932: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43936: LD_VAR 0 18
43940: PPUSH
43941: LD_VAR 0 7
43945: PPUSH
43946: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43950: LD_VAR 0 18
43954: PPUSH
43955: CALL_OW 181
// end ; continue ;
43959: GO 43611
// end ; if not cleaners or not tmp in cleaners then
43961: LD_VAR 0 6
43965: NOT
43966: PUSH
43967: LD_VAR 0 13
43971: PUSH
43972: LD_VAR 0 6
43976: IN
43977: NOT
43978: OR
43979: IFFALSE 44286
// begin if dep then
43981: LD_VAR 0 17
43985: IFFALSE 44121
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43987: LD_ADDR_VAR 0 16
43991: PUSH
43992: LD_VAR 0 17
43996: PUSH
43997: LD_INT 1
43999: ARRAY
44000: PPUSH
44001: CALL_OW 250
44005: PPUSH
44006: LD_VAR 0 17
44010: PUSH
44011: LD_INT 1
44013: ARRAY
44014: PPUSH
44015: CALL_OW 254
44019: PPUSH
44020: LD_INT 5
44022: PPUSH
44023: CALL_OW 272
44027: PUSH
44028: LD_VAR 0 17
44032: PUSH
44033: LD_INT 1
44035: ARRAY
44036: PPUSH
44037: CALL_OW 251
44041: PPUSH
44042: LD_VAR 0 17
44046: PUSH
44047: LD_INT 1
44049: ARRAY
44050: PPUSH
44051: CALL_OW 254
44055: PPUSH
44056: LD_INT 5
44058: PPUSH
44059: CALL_OW 273
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44068: LD_VAR 0 16
44072: PUSH
44073: LD_INT 1
44075: ARRAY
44076: PPUSH
44077: LD_VAR 0 16
44081: PUSH
44082: LD_INT 2
44084: ARRAY
44085: PPUSH
44086: CALL_OW 488
44090: IFFALSE 44121
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44092: LD_VAR 0 13
44096: PPUSH
44097: LD_VAR 0 16
44101: PUSH
44102: LD_INT 1
44104: ARRAY
44105: PPUSH
44106: LD_VAR 0 16
44110: PUSH
44111: LD_INT 2
44113: ARRAY
44114: PPUSH
44115: CALL_OW 111
// continue ;
44119: GO 43611
// end ; end ; r := GetDir ( tmp ) ;
44121: LD_ADDR_VAR 0 15
44125: PUSH
44126: LD_VAR 0 13
44130: PPUSH
44131: CALL_OW 254
44135: ST_TO_ADDR
// if r = 5 then
44136: LD_VAR 0 15
44140: PUSH
44141: LD_INT 5
44143: EQUAL
44144: IFFALSE 44154
// r := 0 ;
44146: LD_ADDR_VAR 0 15
44150: PUSH
44151: LD_INT 0
44153: ST_TO_ADDR
// for j = r to 5 do
44154: LD_ADDR_VAR 0 10
44158: PUSH
44159: DOUBLE
44160: LD_VAR 0 15
44164: DEC
44165: ST_TO_ADDR
44166: LD_INT 5
44168: PUSH
44169: FOR_TO
44170: IFFALSE 44284
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44172: LD_ADDR_VAR 0 11
44176: PUSH
44177: LD_VAR 0 13
44181: PPUSH
44182: CALL_OW 250
44186: PPUSH
44187: LD_VAR 0 10
44191: PPUSH
44192: LD_INT 2
44194: PPUSH
44195: CALL_OW 272
44199: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44200: LD_ADDR_VAR 0 12
44204: PUSH
44205: LD_VAR 0 13
44209: PPUSH
44210: CALL_OW 251
44214: PPUSH
44215: LD_VAR 0 10
44219: PPUSH
44220: LD_INT 2
44222: PPUSH
44223: CALL_OW 273
44227: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44228: LD_VAR 0 11
44232: PPUSH
44233: LD_VAR 0 12
44237: PPUSH
44238: CALL_OW 488
44242: PUSH
44243: LD_VAR 0 11
44247: PPUSH
44248: LD_VAR 0 12
44252: PPUSH
44253: CALL_OW 428
44257: NOT
44258: AND
44259: IFFALSE 44282
// begin ComMoveXY ( tmp , _x , _y ) ;
44261: LD_VAR 0 13
44265: PPUSH
44266: LD_VAR 0 11
44270: PPUSH
44271: LD_VAR 0 12
44275: PPUSH
44276: CALL_OW 111
// break ;
44280: GO 44284
// end ; end ;
44282: GO 44169
44284: POP
44285: POP
// end ; end ;
44286: GO 43611
44288: POP
44289: POP
// end ;
44290: LD_VAR 0 8
44294: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44295: LD_INT 0
44297: PPUSH
// result := true ;
44298: LD_ADDR_VAR 0 3
44302: PUSH
44303: LD_INT 1
44305: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44306: LD_VAR 0 2
44310: PUSH
44311: LD_INT 24
44313: DOUBLE
44314: EQUAL
44315: IFTRUE 44325
44317: LD_INT 33
44319: DOUBLE
44320: EQUAL
44321: IFTRUE 44325
44323: GO 44350
44325: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44326: LD_ADDR_VAR 0 3
44330: PUSH
44331: LD_INT 32
44333: PPUSH
44334: LD_VAR 0 1
44338: PPUSH
44339: CALL_OW 321
44343: PUSH
44344: LD_INT 2
44346: EQUAL
44347: ST_TO_ADDR
44348: GO 44670
44350: LD_INT 20
44352: DOUBLE
44353: EQUAL
44354: IFTRUE 44358
44356: GO 44383
44358: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44359: LD_ADDR_VAR 0 3
44363: PUSH
44364: LD_INT 6
44366: PPUSH
44367: LD_VAR 0 1
44371: PPUSH
44372: CALL_OW 321
44376: PUSH
44377: LD_INT 2
44379: EQUAL
44380: ST_TO_ADDR
44381: GO 44670
44383: LD_INT 22
44385: DOUBLE
44386: EQUAL
44387: IFTRUE 44397
44389: LD_INT 36
44391: DOUBLE
44392: EQUAL
44393: IFTRUE 44397
44395: GO 44422
44397: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44398: LD_ADDR_VAR 0 3
44402: PUSH
44403: LD_INT 15
44405: PPUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: CALL_OW 321
44415: PUSH
44416: LD_INT 2
44418: EQUAL
44419: ST_TO_ADDR
44420: GO 44670
44422: LD_INT 30
44424: DOUBLE
44425: EQUAL
44426: IFTRUE 44430
44428: GO 44455
44430: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44431: LD_ADDR_VAR 0 3
44435: PUSH
44436: LD_INT 20
44438: PPUSH
44439: LD_VAR 0 1
44443: PPUSH
44444: CALL_OW 321
44448: PUSH
44449: LD_INT 2
44451: EQUAL
44452: ST_TO_ADDR
44453: GO 44670
44455: LD_INT 28
44457: DOUBLE
44458: EQUAL
44459: IFTRUE 44469
44461: LD_INT 21
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 44494
44469: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44470: LD_ADDR_VAR 0 3
44474: PUSH
44475: LD_INT 21
44477: PPUSH
44478: LD_VAR 0 1
44482: PPUSH
44483: CALL_OW 321
44487: PUSH
44488: LD_INT 2
44490: EQUAL
44491: ST_TO_ADDR
44492: GO 44670
44494: LD_INT 16
44496: DOUBLE
44497: EQUAL
44498: IFTRUE 44502
44500: GO 44529
44502: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44503: LD_ADDR_VAR 0 3
44507: PUSH
44508: LD_EXP 56
44512: PPUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: CALL_OW 321
44522: PUSH
44523: LD_INT 2
44525: EQUAL
44526: ST_TO_ADDR
44527: GO 44670
44529: LD_INT 19
44531: DOUBLE
44532: EQUAL
44533: IFTRUE 44543
44535: LD_INT 23
44537: DOUBLE
44538: EQUAL
44539: IFTRUE 44543
44541: GO 44570
44543: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44544: LD_ADDR_VAR 0 3
44548: PUSH
44549: LD_EXP 55
44553: PPUSH
44554: LD_VAR 0 1
44558: PPUSH
44559: CALL_OW 321
44563: PUSH
44564: LD_INT 2
44566: EQUAL
44567: ST_TO_ADDR
44568: GO 44670
44570: LD_INT 17
44572: DOUBLE
44573: EQUAL
44574: IFTRUE 44578
44576: GO 44603
44578: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44579: LD_ADDR_VAR 0 3
44583: PUSH
44584: LD_INT 39
44586: PPUSH
44587: LD_VAR 0 1
44591: PPUSH
44592: CALL_OW 321
44596: PUSH
44597: LD_INT 2
44599: EQUAL
44600: ST_TO_ADDR
44601: GO 44670
44603: LD_INT 18
44605: DOUBLE
44606: EQUAL
44607: IFTRUE 44611
44609: GO 44636
44611: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44612: LD_ADDR_VAR 0 3
44616: PUSH
44617: LD_INT 40
44619: PPUSH
44620: LD_VAR 0 1
44624: PPUSH
44625: CALL_OW 321
44629: PUSH
44630: LD_INT 2
44632: EQUAL
44633: ST_TO_ADDR
44634: GO 44670
44636: LD_INT 27
44638: DOUBLE
44639: EQUAL
44640: IFTRUE 44644
44642: GO 44669
44644: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44645: LD_ADDR_VAR 0 3
44649: PUSH
44650: LD_INT 35
44652: PPUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: CALL_OW 321
44662: PUSH
44663: LD_INT 2
44665: EQUAL
44666: ST_TO_ADDR
44667: GO 44670
44669: POP
// end ;
44670: LD_VAR 0 3
44674: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44675: LD_INT 0
44677: PPUSH
44678: PPUSH
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
// result := false ;
44688: LD_ADDR_VAR 0 6
44692: PUSH
44693: LD_INT 0
44695: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44696: LD_VAR 0 1
44700: NOT
44701: PUSH
44702: LD_VAR 0 1
44706: PPUSH
44707: CALL_OW 266
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: IN
44722: NOT
44723: OR
44724: PUSH
44725: LD_VAR 0 2
44729: NOT
44730: OR
44731: PUSH
44732: LD_VAR 0 5
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: LD_INT 4
44751: PUSH
44752: LD_INT 5
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: IN
44763: NOT
44764: OR
44765: PUSH
44766: LD_VAR 0 3
44770: PPUSH
44771: LD_VAR 0 4
44775: PPUSH
44776: CALL_OW 488
44780: NOT
44781: OR
44782: IFFALSE 44786
// exit ;
44784: GO 45522
// side := GetSide ( depot ) ;
44786: LD_ADDR_VAR 0 9
44790: PUSH
44791: LD_VAR 0 1
44795: PPUSH
44796: CALL_OW 255
44800: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44801: LD_VAR 0 9
44805: PPUSH
44806: LD_VAR 0 2
44810: PPUSH
44811: CALL 44295 0 2
44815: NOT
44816: IFFALSE 44820
// exit ;
44818: GO 45522
// pom := GetBase ( depot ) ;
44820: LD_ADDR_VAR 0 10
44824: PUSH
44825: LD_VAR 0 1
44829: PPUSH
44830: CALL_OW 274
44834: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44835: LD_ADDR_VAR 0 11
44839: PUSH
44840: LD_VAR 0 2
44844: PPUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: CALL_OW 248
44854: PPUSH
44855: CALL_OW 450
44859: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44860: LD_VAR 0 10
44864: PPUSH
44865: LD_INT 1
44867: PPUSH
44868: CALL_OW 275
44872: PUSH
44873: LD_VAR 0 11
44877: PUSH
44878: LD_INT 1
44880: ARRAY
44881: GREATEREQUAL
44882: PUSH
44883: LD_VAR 0 10
44887: PPUSH
44888: LD_INT 2
44890: PPUSH
44891: CALL_OW 275
44895: PUSH
44896: LD_VAR 0 11
44900: PUSH
44901: LD_INT 2
44903: ARRAY
44904: GREATEREQUAL
44905: AND
44906: PUSH
44907: LD_VAR 0 10
44911: PPUSH
44912: LD_INT 3
44914: PPUSH
44915: CALL_OW 275
44919: PUSH
44920: LD_VAR 0 11
44924: PUSH
44925: LD_INT 3
44927: ARRAY
44928: GREATEREQUAL
44929: AND
44930: NOT
44931: IFFALSE 44935
// exit ;
44933: GO 45522
// if GetBType ( depot ) = b_depot then
44935: LD_VAR 0 1
44939: PPUSH
44940: CALL_OW 266
44944: PUSH
44945: LD_INT 0
44947: EQUAL
44948: IFFALSE 44960
// dist := 28 else
44950: LD_ADDR_VAR 0 14
44954: PUSH
44955: LD_INT 28
44957: ST_TO_ADDR
44958: GO 44968
// dist := 36 ;
44960: LD_ADDR_VAR 0 14
44964: PUSH
44965: LD_INT 36
44967: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44968: LD_VAR 0 1
44972: PPUSH
44973: LD_VAR 0 3
44977: PPUSH
44978: LD_VAR 0 4
44982: PPUSH
44983: CALL_OW 297
44987: PUSH
44988: LD_VAR 0 14
44992: GREATER
44993: IFFALSE 44997
// exit ;
44995: GO 45522
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44997: LD_ADDR_VAR 0 12
45001: PUSH
45002: LD_VAR 0 2
45006: PPUSH
45007: LD_VAR 0 3
45011: PPUSH
45012: LD_VAR 0 4
45016: PPUSH
45017: LD_VAR 0 5
45021: PPUSH
45022: LD_VAR 0 1
45026: PPUSH
45027: CALL_OW 248
45031: PPUSH
45032: LD_INT 0
45034: PPUSH
45035: CALL 45527 0 6
45039: ST_TO_ADDR
// if not hexes then
45040: LD_VAR 0 12
45044: NOT
45045: IFFALSE 45049
// exit ;
45047: GO 45522
// hex := GetHexInfo ( x , y ) ;
45049: LD_ADDR_VAR 0 15
45053: PUSH
45054: LD_VAR 0 3
45058: PPUSH
45059: LD_VAR 0 4
45063: PPUSH
45064: CALL_OW 546
45068: ST_TO_ADDR
// if hex [ 1 ] then
45069: LD_VAR 0 15
45073: PUSH
45074: LD_INT 1
45076: ARRAY
45077: IFFALSE 45081
// exit ;
45079: GO 45522
// height := hex [ 2 ] ;
45081: LD_ADDR_VAR 0 13
45085: PUSH
45086: LD_VAR 0 15
45090: PUSH
45091: LD_INT 2
45093: ARRAY
45094: ST_TO_ADDR
// for i = 1 to hexes do
45095: LD_ADDR_VAR 0 7
45099: PUSH
45100: DOUBLE
45101: LD_INT 1
45103: DEC
45104: ST_TO_ADDR
45105: LD_VAR 0 12
45109: PUSH
45110: FOR_TO
45111: IFFALSE 45441
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45113: LD_VAR 0 12
45117: PUSH
45118: LD_VAR 0 7
45122: ARRAY
45123: PUSH
45124: LD_INT 1
45126: ARRAY
45127: PPUSH
45128: LD_VAR 0 12
45132: PUSH
45133: LD_VAR 0 7
45137: ARRAY
45138: PUSH
45139: LD_INT 2
45141: ARRAY
45142: PPUSH
45143: CALL_OW 488
45147: NOT
45148: PUSH
45149: LD_VAR 0 12
45153: PUSH
45154: LD_VAR 0 7
45158: ARRAY
45159: PUSH
45160: LD_INT 1
45162: ARRAY
45163: PPUSH
45164: LD_VAR 0 12
45168: PUSH
45169: LD_VAR 0 7
45173: ARRAY
45174: PUSH
45175: LD_INT 2
45177: ARRAY
45178: PPUSH
45179: CALL_OW 428
45183: PUSH
45184: LD_INT 0
45186: GREATER
45187: OR
45188: PUSH
45189: LD_VAR 0 12
45193: PUSH
45194: LD_VAR 0 7
45198: ARRAY
45199: PUSH
45200: LD_INT 1
45202: ARRAY
45203: PPUSH
45204: LD_VAR 0 12
45208: PUSH
45209: LD_VAR 0 7
45213: ARRAY
45214: PUSH
45215: LD_INT 2
45217: ARRAY
45218: PPUSH
45219: CALL_OW 351
45223: OR
45224: IFFALSE 45230
// exit ;
45226: POP
45227: POP
45228: GO 45522
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45230: LD_ADDR_VAR 0 8
45234: PUSH
45235: LD_VAR 0 12
45239: PUSH
45240: LD_VAR 0 7
45244: ARRAY
45245: PUSH
45246: LD_INT 1
45248: ARRAY
45249: PPUSH
45250: LD_VAR 0 12
45254: PUSH
45255: LD_VAR 0 7
45259: ARRAY
45260: PUSH
45261: LD_INT 2
45263: ARRAY
45264: PPUSH
45265: CALL_OW 546
45269: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45270: LD_VAR 0 8
45274: PUSH
45275: LD_INT 1
45277: ARRAY
45278: PUSH
45279: LD_VAR 0 8
45283: PUSH
45284: LD_INT 2
45286: ARRAY
45287: PUSH
45288: LD_VAR 0 13
45292: PUSH
45293: LD_INT 2
45295: PLUS
45296: GREATER
45297: OR
45298: PUSH
45299: LD_VAR 0 8
45303: PUSH
45304: LD_INT 2
45306: ARRAY
45307: PUSH
45308: LD_VAR 0 13
45312: PUSH
45313: LD_INT 2
45315: MINUS
45316: LESS
45317: OR
45318: PUSH
45319: LD_VAR 0 8
45323: PUSH
45324: LD_INT 3
45326: ARRAY
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 8
45333: PUSH
45334: LD_INT 9
45336: PUSH
45337: LD_INT 10
45339: PUSH
45340: LD_INT 11
45342: PUSH
45343: LD_INT 12
45345: PUSH
45346: LD_INT 13
45348: PUSH
45349: LD_INT 16
45351: PUSH
45352: LD_INT 17
45354: PUSH
45355: LD_INT 18
45357: PUSH
45358: LD_INT 19
45360: PUSH
45361: LD_INT 20
45363: PUSH
45364: LD_INT 21
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: IN
45382: NOT
45383: OR
45384: PUSH
45385: LD_VAR 0 8
45389: PUSH
45390: LD_INT 5
45392: ARRAY
45393: NOT
45394: OR
45395: PUSH
45396: LD_VAR 0 8
45400: PUSH
45401: LD_INT 6
45403: ARRAY
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 7
45413: PUSH
45414: LD_INT 9
45416: PUSH
45417: LD_INT 10
45419: PUSH
45420: LD_INT 11
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: IN
45431: NOT
45432: OR
45433: IFFALSE 45439
// exit ;
45435: POP
45436: POP
45437: GO 45522
// end ;
45439: GO 45110
45441: POP
45442: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45443: LD_VAR 0 9
45447: PPUSH
45448: LD_VAR 0 3
45452: PPUSH
45453: LD_VAR 0 4
45457: PPUSH
45458: LD_INT 20
45460: PPUSH
45461: CALL 37468 0 4
45465: PUSH
45466: LD_INT 4
45468: ARRAY
45469: IFFALSE 45473
// exit ;
45471: GO 45522
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45473: LD_VAR 0 2
45477: PUSH
45478: LD_INT 29
45480: PUSH
45481: LD_INT 30
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: IN
45488: PUSH
45489: LD_VAR 0 3
45493: PPUSH
45494: LD_VAR 0 4
45498: PPUSH
45499: LD_VAR 0 9
45503: PPUSH
45504: CALL_OW 440
45508: NOT
45509: AND
45510: IFFALSE 45514
// exit ;
45512: GO 45522
// result := true ;
45514: LD_ADDR_VAR 0 6
45518: PUSH
45519: LD_INT 1
45521: ST_TO_ADDR
// end ;
45522: LD_VAR 0 6
45526: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45527: LD_INT 0
45529: PPUSH
45530: PPUSH
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
45539: PPUSH
45540: PPUSH
45541: PPUSH
45542: PPUSH
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
45553: PPUSH
45554: PPUSH
45555: PPUSH
45556: PPUSH
45557: PPUSH
45558: PPUSH
45559: PPUSH
45560: PPUSH
45561: PPUSH
45562: PPUSH
45563: PPUSH
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
45577: PPUSH
45578: PPUSH
45579: PPUSH
45580: PPUSH
45581: PPUSH
45582: PPUSH
45583: PPUSH
45584: PPUSH
45585: PPUSH
45586: PPUSH
// result = [ ] ;
45587: LD_ADDR_VAR 0 7
45591: PUSH
45592: EMPTY
45593: ST_TO_ADDR
// temp_list = [ ] ;
45594: LD_ADDR_VAR 0 9
45598: PUSH
45599: EMPTY
45600: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45601: LD_VAR 0 4
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 3
45617: PUSH
45618: LD_INT 4
45620: PUSH
45621: LD_INT 5
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: IN
45632: NOT
45633: PUSH
45634: LD_VAR 0 1
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: IN
45649: PUSH
45650: LD_VAR 0 5
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 3
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: LIST
45668: IN
45669: NOT
45670: AND
45671: OR
45672: IFFALSE 45676
// exit ;
45674: GO 64067
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45676: LD_VAR 0 1
45680: PUSH
45681: LD_INT 6
45683: PUSH
45684: LD_INT 7
45686: PUSH
45687: LD_INT 8
45689: PUSH
45690: LD_INT 13
45692: PUSH
45693: LD_INT 12
45695: PUSH
45696: LD_INT 15
45698: PUSH
45699: LD_INT 11
45701: PUSH
45702: LD_INT 14
45704: PUSH
45705: LD_INT 10
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: IN
45719: IFFALSE 45729
// btype = b_lab ;
45721: LD_ADDR_VAR 0 1
45725: PUSH
45726: LD_INT 6
45728: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45729: LD_VAR 0 6
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: IN
45748: NOT
45749: PUSH
45750: LD_VAR 0 1
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 3
45766: PUSH
45767: LD_INT 6
45769: PUSH
45770: LD_INT 36
45772: PUSH
45773: LD_INT 4
45775: PUSH
45776: LD_INT 5
45778: PUSH
45779: LD_INT 31
45781: PUSH
45782: LD_INT 32
45784: PUSH
45785: LD_INT 33
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: IN
45801: NOT
45802: PUSH
45803: LD_VAR 0 6
45807: PUSH
45808: LD_INT 1
45810: EQUAL
45811: AND
45812: OR
45813: PUSH
45814: LD_VAR 0 1
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: IN
45829: NOT
45830: PUSH
45831: LD_VAR 0 6
45835: PUSH
45836: LD_INT 2
45838: EQUAL
45839: AND
45840: OR
45841: IFFALSE 45851
// mode = 0 ;
45843: LD_ADDR_VAR 0 6
45847: PUSH
45848: LD_INT 0
45850: ST_TO_ADDR
// case mode of 0 :
45851: LD_VAR 0 6
45855: PUSH
45856: LD_INT 0
45858: DOUBLE
45859: EQUAL
45860: IFTRUE 45864
45862: GO 57317
45864: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45865: LD_ADDR_VAR 0 11
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46058: LD_ADDR_VAR 0 12
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 3
46215: NEG
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 3
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46254: LD_ADDR_VAR 0 13
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: LD_INT 3
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 3
46425: NEG
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46453: LD_ADDR_VAR 0 14
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 3
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46649: LD_ADDR_VAR 0 15
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 3
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 3
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46842: LD_ADDR_VAR 0 16
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: PUSH
47000: LD_INT 3
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 3
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47035: LD_ADDR_VAR 0 17
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47265: LD_ADDR_VAR 0 18
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47495: LD_ADDR_VAR 0 19
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47725: LD_ADDR_VAR 0 20
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 2
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47955: LD_ADDR_VAR 0 21
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48185: LD_ADDR_VAR 0 22
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48415: LD_ADDR_VAR 0 23
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48695: LD_ADDR_VAR 0 24
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48971: LD_ADDR_VAR 0 25
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 3
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 3
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49245: LD_ADDR_VAR 0 26
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: LD_INT 3
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 3
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49521: LD_ADDR_VAR 0 27
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49801: LD_ADDR_VAR 0 28
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 3
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 3
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50083: LD_ADDR_VAR 0 29
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50362: LD_ADDR_VAR 0 30
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50640: LD_ADDR_VAR 0 31
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: NEG
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50918: LD_ADDR_VAR 0 32
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 3
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51196: LD_ADDR_VAR 0 33
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 3
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51475: LD_ADDR_VAR 0 34
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 3
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 3
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51755: LD_ADDR_VAR 0 35
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51867: LD_ADDR_VAR 0 36
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51979: LD_ADDR_VAR 0 37
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52091: LD_ADDR_VAR 0 38
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52203: LD_ADDR_VAR 0 39
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52315: LD_ADDR_VAR 0 40
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52427: LD_ADDR_VAR 0 41
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 3
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52777: LD_ADDR_VAR 0 42
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 3
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: LD_INT 3
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 3
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 3
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: LD_INT 3
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53127: LD_ADDR_VAR 0 43
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 3
53423: NEG
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 3
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53475: LD_ADDR_VAR 0 44
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 3
53749: NEG
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: NEG
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: LD_INT 3
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53825: LD_ADDR_VAR 0 45
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: LD_INT 3
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 3
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 3
54134: NEG
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54175: LD_ADDR_VAR 0 46
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 3
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: LD_INT 3
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 3
54471: NEG
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54523: LD_ADDR_VAR 0 47
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54674: LD_ADDR_VAR 0 48
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54821: LD_ADDR_VAR 0 49
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54965: LD_ADDR_VAR 0 50
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55109: LD_ADDR_VAR 0 51
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55256: LD_ADDR_VAR 0 52
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: NEG
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55407: LD_ADDR_VAR 0 53
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55637: LD_ADDR_VAR 0 54
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 2
55813: NEG
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55867: LD_ADDR_VAR 0 55
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56097: LD_ADDR_VAR 0 56
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56327: LD_ADDR_VAR 0 57
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56557: LD_ADDR_VAR 0 58
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56787: LD_ADDR_VAR 0 59
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56875: LD_ADDR_VAR 0 60
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56963: LD_ADDR_VAR 0 61
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57051: LD_ADDR_VAR 0 62
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57139: LD_ADDR_VAR 0 63
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57227: LD_ADDR_VAR 0 64
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// end ; 1 :
57315: GO 63212
57317: LD_INT 1
57319: DOUBLE
57320: EQUAL
57321: IFTRUE 57325
57323: GO 59948
57325: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57326: LD_ADDR_VAR 0 11
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 3
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57370: LD_ADDR_VAR 0 12
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 3
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57411: LD_ADDR_VAR 0 13
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: LIST
57450: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57451: LD_ADDR_VAR 0 14
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: LD_INT 2
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57492: LD_ADDR_VAR 0 15
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 3
57510: NEG
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57536: LD_ADDR_VAR 0 16
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: LD_INT 3
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: LIST
57581: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57582: LD_ADDR_VAR 0 17
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: LIST
57625: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57626: LD_ADDR_VAR 0 18
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57667: LD_ADDR_VAR 0 19
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57707: LD_ADDR_VAR 0 20
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: LD_INT 3
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57748: LD_ADDR_VAR 0 21
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 3
57766: NEG
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 3
57777: NEG
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57792: LD_ADDR_VAR 0 22
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: LD_INT 3
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57838: LD_ADDR_VAR 0 23
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 3
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 4
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: LD_INT 3
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: LIST
57881: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57882: LD_ADDR_VAR 0 24
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 4
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: LIST
57922: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57923: LD_ADDR_VAR 0 25
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: LD_INT 3
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 3
57950: PUSH
57951: LD_INT 4
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: LIST
57962: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57963: LD_ADDR_VAR 0 26
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: LD_INT 3
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 4
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 3
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58004: LD_ADDR_VAR 0 27
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 4
58033: NEG
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58048: LD_ADDR_VAR 0 28
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: LD_INT 4
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: LIST
58093: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58094: LD_ADDR_VAR 0 29
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 4
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 4
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 5
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 5
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 4
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 6
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 6
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 5
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58249: LD_ADDR_VAR 0 30
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 4
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 4
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 5
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 5
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 5
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 6
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 6
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58392: LD_ADDR_VAR 0 31
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 4
58439: PUSH
58440: LD_INT 4
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: LD_INT 4
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: LD_INT 4
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 5
58469: PUSH
58470: LD_INT 5
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 4
58479: PUSH
58480: LD_INT 5
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 6
58489: PUSH
58490: LD_INT 5
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 6
58499: PUSH
58500: LD_INT 6
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 5
58509: PUSH
58510: LD_INT 6
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58531: LD_ADDR_VAR 0 32
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 4
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 4
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 5
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 5
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 4
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 6
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 6
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 5
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58674: LD_ADDR_VAR 0 33
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 4
58726: NEG
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 4
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 4
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 5
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 5
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 5
58783: NEG
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 6
58794: NEG
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 6
58805: NEG
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58829: LD_ADDR_VAR 0 34
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 3
58848: NEG
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: LD_INT 3
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 3
58872: NEG
58873: PUSH
58874: LD_INT 4
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 4
58884: NEG
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 4
58896: NEG
58897: PUSH
58898: LD_INT 4
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 4
58908: NEG
58909: PUSH
58910: LD_INT 5
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 5
58920: NEG
58921: PUSH
58922: LD_INT 4
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 5
58932: NEG
58933: PUSH
58934: LD_INT 5
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 5
58944: NEG
58945: PUSH
58946: LD_INT 6
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 6
58956: NEG
58957: PUSH
58958: LD_INT 5
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 6
58968: NEG
58969: PUSH
58970: LD_INT 6
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58992: LD_ADDR_VAR 0 41
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: LD_INT 3
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59036: LD_ADDR_VAR 0 42
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 3
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: LIST
59076: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59077: LD_ADDR_VAR 0 43
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59117: LD_ADDR_VAR 0 44
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59158: LD_ADDR_VAR 0 45
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: NEG
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59202: LD_ADDR_VAR 0 46
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59248: LD_ADDR_VAR 0 47
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: LD_INT 3
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: LD_INT 3
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59281: LD_ADDR_VAR 0 48
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59312: LD_ADDR_VAR 0 49
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 3
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59341: LD_ADDR_VAR 0 50
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59370: LD_ADDR_VAR 0 51
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59401: LD_ADDR_VAR 0 52
59405: PUSH
59406: LD_INT 3
59408: NEG
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 3
59420: NEG
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59434: LD_ADDR_VAR 0 53
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: LD_INT 2
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: LIST
59477: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59478: LD_ADDR_VAR 0 54
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59519: LD_ADDR_VAR 0 55
59523: PUSH
59524: LD_INT 3
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 3
59536: PUSH
59537: LD_INT 3
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: LD_INT 3
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: LIST
59558: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59559: LD_ADDR_VAR 0 56
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 3
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 3
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: LIST
59599: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59600: LD_ADDR_VAR 0 57
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59644: LD_ADDR_VAR 0 58
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: NEG
59664: PUSH
59665: LD_INT 2
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: NEG
59676: PUSH
59677: LD_INT 3
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59690: LD_ADDR_VAR 0 59
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: LIST
59733: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59734: LD_ADDR_VAR 0 60
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: LIST
59774: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59775: LD_ADDR_VAR 0 61
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59815: LD_ADDR_VAR 0 62
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 2
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59856: LD_ADDR_VAR 0 63
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59900: LD_ADDR_VAR 0 64
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: LIST
59945: ST_TO_ADDR
// end ; 2 :
59946: GO 63212
59948: LD_INT 2
59950: DOUBLE
59951: EQUAL
59952: IFTRUE 59956
59954: GO 63211
59956: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59957: LD_ADDR_VAR 0 29
59961: PUSH
59962: LD_INT 4
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 4
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 5
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 5
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 4
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 5
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: LD_INT 3
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 4
60087: PUSH
60088: LD_INT 4
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 3
60097: PUSH
60098: LD_INT 4
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 4
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: LD_INT 4
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 4
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 4
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 5
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 5
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: LD_INT 5
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 2
60229: NEG
60230: PUSH
60231: LD_INT 3
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: NEG
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: NEG
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 3
60285: NEG
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 4
60296: NEG
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 4
60319: NEG
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 4
60342: NEG
60343: PUSH
60344: LD_INT 4
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 4
60354: NEG
60355: PUSH
60356: LD_INT 5
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: LD_INT 3
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 4
60390: NEG
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 5
60402: NEG
60403: PUSH
60404: LD_INT 4
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 5
60414: NEG
60415: PUSH
60416: LD_INT 5
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: LD_INT 5
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 5
60438: NEG
60439: PUSH
60440: LD_INT 3
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60495: LD_ADDR_VAR 0 30
60499: PUSH
60500: LD_INT 4
60502: PUSH
60503: LD_INT 4
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 4
60512: PUSH
60513: LD_INT 3
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 5
60522: PUSH
60523: LD_INT 4
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 5
60532: PUSH
60533: LD_INT 5
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 4
60542: PUSH
60543: LD_INT 5
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 3
60552: PUSH
60553: LD_INT 4
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 3
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 5
60572: PUSH
60573: LD_INT 3
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 3
60582: PUSH
60583: LD_INT 5
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 3
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: LD_INT 3
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 4
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 4
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 3
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: LD_INT 4
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 4
60685: NEG
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 4
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 3
60708: NEG
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 3
60719: NEG
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 4
60730: NEG
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 5
60741: NEG
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 5
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 5
60764: NEG
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: LD_INT 3
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: LD_INT 4
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 2
60823: NEG
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: LD_INT 2
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 4
60859: NEG
60860: PUSH
60861: LD_INT 4
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: LD_INT 4
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 4
60883: NEG
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 4
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 5
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: LD_INT 4
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 3
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: LD_INT 4
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: LD_INT 5
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: LD_INT 5
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61042: LD_ADDR_VAR 0 31
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 4
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 4
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 5
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 5
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 4
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: LD_INT 5
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: NEG
61132: PUSH
61133: LD_INT 3
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 3
61142: NEG
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: NEG
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: NEG
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: NEG
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 4
61198: NEG
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 4
61209: NEG
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 4
61221: NEG
61222: PUSH
61223: LD_INT 2
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 4
61244: NEG
61245: PUSH
61246: LD_INT 4
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 4
61256: NEG
61257: PUSH
61258: LD_INT 5
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: LD_INT 4
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: LD_INT 3
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 4
61292: NEG
61293: PUSH
61294: LD_INT 3
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 5
61304: NEG
61305: PUSH
61306: LD_INT 4
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 5
61316: NEG
61317: PUSH
61318: LD_INT 5
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 3
61328: NEG
61329: PUSH
61330: LD_INT 5
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 5
61340: NEG
61341: PUSH
61342: LD_INT 3
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: LD_INT 3
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 4
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 2
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 4
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: LD_INT 4
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 4
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 4
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 5
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 5
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 4
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 3
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 5
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61592: LD_ADDR_VAR 0 32
61596: PUSH
61597: LD_INT 4
61599: NEG
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 4
61610: NEG
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 3
61633: NEG
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 4
61644: NEG
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 5
61655: NEG
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 5
61666: NEG
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 5
61678: NEG
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 3
61690: NEG
61691: PUSH
61692: LD_INT 2
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: LD_INT 3
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: LD_INT 4
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: LD_INT 2
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 4
61761: NEG
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 4
61773: NEG
61774: PUSH
61775: LD_INT 4
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: LD_INT 4
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 4
61797: NEG
61798: PUSH
61799: LD_INT 2
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 4
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 5
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: LD_INT 4
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 3
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 4
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: LD_INT 5
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: LD_INT 3
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: LD_INT 5
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 3
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 3
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 4
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 4
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 3
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: PUSH
61984: LD_INT 2
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 4
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 4
62004: PUSH
62005: LD_INT 4
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 4
62014: PUSH
62015: LD_INT 3
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 5
62024: PUSH
62025: LD_INT 4
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 5
62034: PUSH
62035: LD_INT 5
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 4
62044: PUSH
62045: LD_INT 5
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 3
62054: PUSH
62055: LD_INT 4
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 5
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: LD_INT 5
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62139: LD_ADDR_VAR 0 33
62143: PUSH
62144: LD_INT 4
62146: NEG
62147: PUSH
62148: LD_INT 4
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 4
62158: NEG
62159: PUSH
62160: LD_INT 5
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 3
62170: NEG
62171: PUSH
62172: LD_INT 4
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: LD_INT 3
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 4
62194: NEG
62195: PUSH
62196: LD_INT 3
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 5
62206: NEG
62207: PUSH
62208: LD_INT 4
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 5
62218: NEG
62219: PUSH
62220: LD_INT 5
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 3
62230: NEG
62231: PUSH
62232: LD_INT 5
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 5
62242: NEG
62243: PUSH
62244: LD_INT 3
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 3
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: LD_INT 4
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: LD_INT 3
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: LD_INT 2
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 4
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 2
62333: PUSH
62334: LD_INT 2
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: LD_INT 4
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 4
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 4
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 5
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 5
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 4
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 3
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 3
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 5
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: LD_INT 3
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: LD_INT 2
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 4
62469: PUSH
62470: LD_INT 3
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 4
62479: PUSH
62480: LD_INT 4
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: LD_INT 4
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: LD_INT 3
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 2
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 4
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 2
62529: PUSH
62530: LD_INT 4
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: LD_INT 4
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: LD_INT 3
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: LD_INT 4
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: LD_INT 5
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 5
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: LD_INT 4
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 2
62611: PUSH
62612: LD_INT 5
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: LD_INT 3
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62677: LD_ADDR_VAR 0 34
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 4
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: LD_INT 5
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: LD_INT 4
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: LD_INT 3
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 3
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: LD_INT 4
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: NEG
62752: PUSH
62753: LD_INT 5
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: LD_INT 3
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: LD_INT 5
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 4
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 4
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 3
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 2
62858: PUSH
62859: LD_INT 2
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 4
62869: PUSH
62870: LD_INT 2
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 4
62879: PUSH
62880: LD_INT 4
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 4
62889: PUSH
62890: LD_INT 3
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 5
62899: PUSH
62900: LD_INT 4
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 5
62909: PUSH
62910: LD_INT 5
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 4
62919: PUSH
62920: LD_INT 5
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 3
62929: PUSH
62930: LD_INT 4
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 3
62939: PUSH
62940: LD_INT 3
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 5
62949: PUSH
62950: LD_INT 3
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: LD_INT 5
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: LD_INT 3
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 2
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: LD_INT 4
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 4
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: LD_INT 3
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 2
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: LD_INT 4
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 4
63062: NEG
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 4
63073: NEG
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 3
63085: NEG
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 3
63096: NEG
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 4
63107: NEG
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 5
63118: NEG
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 5
63129: NEG
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 5
63141: NEG
63142: PUSH
63143: LD_INT 2
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: LD_INT 2
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: ST_TO_ADDR
// end ; end ;
63209: GO 63212
63211: POP
// case btype of b_depot , b_warehouse :
63212: LD_VAR 0 1
63216: PUSH
63217: LD_INT 0
63219: DOUBLE
63220: EQUAL
63221: IFTRUE 63231
63223: LD_INT 1
63225: DOUBLE
63226: EQUAL
63227: IFTRUE 63231
63229: GO 63432
63231: POP
// case nation of nation_american :
63232: LD_VAR 0 5
63236: PUSH
63237: LD_INT 1
63239: DOUBLE
63240: EQUAL
63241: IFTRUE 63245
63243: GO 63301
63245: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63246: LD_ADDR_VAR 0 9
63250: PUSH
63251: LD_VAR 0 11
63255: PUSH
63256: LD_VAR 0 12
63260: PUSH
63261: LD_VAR 0 13
63265: PUSH
63266: LD_VAR 0 14
63270: PUSH
63271: LD_VAR 0 15
63275: PUSH
63276: LD_VAR 0 16
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: PUSH
63289: LD_VAR 0 4
63293: PUSH
63294: LD_INT 1
63296: PLUS
63297: ARRAY
63298: ST_TO_ADDR
63299: GO 63430
63301: LD_INT 2
63303: DOUBLE
63304: EQUAL
63305: IFTRUE 63309
63307: GO 63365
63309: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63310: LD_ADDR_VAR 0 9
63314: PUSH
63315: LD_VAR 0 17
63319: PUSH
63320: LD_VAR 0 18
63324: PUSH
63325: LD_VAR 0 19
63329: PUSH
63330: LD_VAR 0 20
63334: PUSH
63335: LD_VAR 0 21
63339: PUSH
63340: LD_VAR 0 22
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: PUSH
63353: LD_VAR 0 4
63357: PUSH
63358: LD_INT 1
63360: PLUS
63361: ARRAY
63362: ST_TO_ADDR
63363: GO 63430
63365: LD_INT 3
63367: DOUBLE
63368: EQUAL
63369: IFTRUE 63373
63371: GO 63429
63373: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63374: LD_ADDR_VAR 0 9
63378: PUSH
63379: LD_VAR 0 23
63383: PUSH
63384: LD_VAR 0 24
63388: PUSH
63389: LD_VAR 0 25
63393: PUSH
63394: LD_VAR 0 26
63398: PUSH
63399: LD_VAR 0 27
63403: PUSH
63404: LD_VAR 0 28
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: PUSH
63417: LD_VAR 0 4
63421: PUSH
63422: LD_INT 1
63424: PLUS
63425: ARRAY
63426: ST_TO_ADDR
63427: GO 63430
63429: POP
63430: GO 63985
63432: LD_INT 2
63434: DOUBLE
63435: EQUAL
63436: IFTRUE 63446
63438: LD_INT 3
63440: DOUBLE
63441: EQUAL
63442: IFTRUE 63446
63444: GO 63502
63446: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63447: LD_ADDR_VAR 0 9
63451: PUSH
63452: LD_VAR 0 29
63456: PUSH
63457: LD_VAR 0 30
63461: PUSH
63462: LD_VAR 0 31
63466: PUSH
63467: LD_VAR 0 32
63471: PUSH
63472: LD_VAR 0 33
63476: PUSH
63477: LD_VAR 0 34
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: PUSH
63490: LD_VAR 0 4
63494: PUSH
63495: LD_INT 1
63497: PLUS
63498: ARRAY
63499: ST_TO_ADDR
63500: GO 63985
63502: LD_INT 16
63504: DOUBLE
63505: EQUAL
63506: IFTRUE 63564
63508: LD_INT 17
63510: DOUBLE
63511: EQUAL
63512: IFTRUE 63564
63514: LD_INT 18
63516: DOUBLE
63517: EQUAL
63518: IFTRUE 63564
63520: LD_INT 19
63522: DOUBLE
63523: EQUAL
63524: IFTRUE 63564
63526: LD_INT 22
63528: DOUBLE
63529: EQUAL
63530: IFTRUE 63564
63532: LD_INT 20
63534: DOUBLE
63535: EQUAL
63536: IFTRUE 63564
63538: LD_INT 21
63540: DOUBLE
63541: EQUAL
63542: IFTRUE 63564
63544: LD_INT 23
63546: DOUBLE
63547: EQUAL
63548: IFTRUE 63564
63550: LD_INT 24
63552: DOUBLE
63553: EQUAL
63554: IFTRUE 63564
63556: LD_INT 25
63558: DOUBLE
63559: EQUAL
63560: IFTRUE 63564
63562: GO 63620
63564: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63565: LD_ADDR_VAR 0 9
63569: PUSH
63570: LD_VAR 0 35
63574: PUSH
63575: LD_VAR 0 36
63579: PUSH
63580: LD_VAR 0 37
63584: PUSH
63585: LD_VAR 0 38
63589: PUSH
63590: LD_VAR 0 39
63594: PUSH
63595: LD_VAR 0 40
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: PUSH
63608: LD_VAR 0 4
63612: PUSH
63613: LD_INT 1
63615: PLUS
63616: ARRAY
63617: ST_TO_ADDR
63618: GO 63985
63620: LD_INT 6
63622: DOUBLE
63623: EQUAL
63624: IFTRUE 63676
63626: LD_INT 7
63628: DOUBLE
63629: EQUAL
63630: IFTRUE 63676
63632: LD_INT 8
63634: DOUBLE
63635: EQUAL
63636: IFTRUE 63676
63638: LD_INT 13
63640: DOUBLE
63641: EQUAL
63642: IFTRUE 63676
63644: LD_INT 12
63646: DOUBLE
63647: EQUAL
63648: IFTRUE 63676
63650: LD_INT 15
63652: DOUBLE
63653: EQUAL
63654: IFTRUE 63676
63656: LD_INT 11
63658: DOUBLE
63659: EQUAL
63660: IFTRUE 63676
63662: LD_INT 14
63664: DOUBLE
63665: EQUAL
63666: IFTRUE 63676
63668: LD_INT 10
63670: DOUBLE
63671: EQUAL
63672: IFTRUE 63676
63674: GO 63732
63676: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63677: LD_ADDR_VAR 0 9
63681: PUSH
63682: LD_VAR 0 41
63686: PUSH
63687: LD_VAR 0 42
63691: PUSH
63692: LD_VAR 0 43
63696: PUSH
63697: LD_VAR 0 44
63701: PUSH
63702: LD_VAR 0 45
63706: PUSH
63707: LD_VAR 0 46
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: PUSH
63720: LD_VAR 0 4
63724: PUSH
63725: LD_INT 1
63727: PLUS
63728: ARRAY
63729: ST_TO_ADDR
63730: GO 63985
63732: LD_INT 36
63734: DOUBLE
63735: EQUAL
63736: IFTRUE 63740
63738: GO 63796
63740: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63741: LD_ADDR_VAR 0 9
63745: PUSH
63746: LD_VAR 0 47
63750: PUSH
63751: LD_VAR 0 48
63755: PUSH
63756: LD_VAR 0 49
63760: PUSH
63761: LD_VAR 0 50
63765: PUSH
63766: LD_VAR 0 51
63770: PUSH
63771: LD_VAR 0 52
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: PUSH
63784: LD_VAR 0 4
63788: PUSH
63789: LD_INT 1
63791: PLUS
63792: ARRAY
63793: ST_TO_ADDR
63794: GO 63985
63796: LD_INT 4
63798: DOUBLE
63799: EQUAL
63800: IFTRUE 63822
63802: LD_INT 5
63804: DOUBLE
63805: EQUAL
63806: IFTRUE 63822
63808: LD_INT 34
63810: DOUBLE
63811: EQUAL
63812: IFTRUE 63822
63814: LD_INT 37
63816: DOUBLE
63817: EQUAL
63818: IFTRUE 63822
63820: GO 63878
63822: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63823: LD_ADDR_VAR 0 9
63827: PUSH
63828: LD_VAR 0 53
63832: PUSH
63833: LD_VAR 0 54
63837: PUSH
63838: LD_VAR 0 55
63842: PUSH
63843: LD_VAR 0 56
63847: PUSH
63848: LD_VAR 0 57
63852: PUSH
63853: LD_VAR 0 58
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: PUSH
63866: LD_VAR 0 4
63870: PUSH
63871: LD_INT 1
63873: PLUS
63874: ARRAY
63875: ST_TO_ADDR
63876: GO 63985
63878: LD_INT 31
63880: DOUBLE
63881: EQUAL
63882: IFTRUE 63928
63884: LD_INT 32
63886: DOUBLE
63887: EQUAL
63888: IFTRUE 63928
63890: LD_INT 33
63892: DOUBLE
63893: EQUAL
63894: IFTRUE 63928
63896: LD_INT 27
63898: DOUBLE
63899: EQUAL
63900: IFTRUE 63928
63902: LD_INT 26
63904: DOUBLE
63905: EQUAL
63906: IFTRUE 63928
63908: LD_INT 28
63910: DOUBLE
63911: EQUAL
63912: IFTRUE 63928
63914: LD_INT 29
63916: DOUBLE
63917: EQUAL
63918: IFTRUE 63928
63920: LD_INT 30
63922: DOUBLE
63923: EQUAL
63924: IFTRUE 63928
63926: GO 63984
63928: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63929: LD_ADDR_VAR 0 9
63933: PUSH
63934: LD_VAR 0 59
63938: PUSH
63939: LD_VAR 0 60
63943: PUSH
63944: LD_VAR 0 61
63948: PUSH
63949: LD_VAR 0 62
63953: PUSH
63954: LD_VAR 0 63
63958: PUSH
63959: LD_VAR 0 64
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: PUSH
63972: LD_VAR 0 4
63976: PUSH
63977: LD_INT 1
63979: PLUS
63980: ARRAY
63981: ST_TO_ADDR
63982: GO 63985
63984: POP
// temp_list2 = [ ] ;
63985: LD_ADDR_VAR 0 10
63989: PUSH
63990: EMPTY
63991: ST_TO_ADDR
// for i in temp_list do
63992: LD_ADDR_VAR 0 8
63996: PUSH
63997: LD_VAR 0 9
64001: PUSH
64002: FOR_IN
64003: IFFALSE 64055
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64005: LD_ADDR_VAR 0 10
64009: PUSH
64010: LD_VAR 0 10
64014: PUSH
64015: LD_VAR 0 8
64019: PUSH
64020: LD_INT 1
64022: ARRAY
64023: PUSH
64024: LD_VAR 0 2
64028: PLUS
64029: PUSH
64030: LD_VAR 0 8
64034: PUSH
64035: LD_INT 2
64037: ARRAY
64038: PUSH
64039: LD_VAR 0 3
64043: PLUS
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: EMPTY
64050: LIST
64051: ADD
64052: ST_TO_ADDR
64053: GO 64002
64055: POP
64056: POP
// result = temp_list2 ;
64057: LD_ADDR_VAR 0 7
64061: PUSH
64062: LD_VAR 0 10
64066: ST_TO_ADDR
// end ;
64067: LD_VAR 0 7
64071: RET
// export function EnemyInRange ( unit , dist ) ; begin
64072: LD_INT 0
64074: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64075: LD_ADDR_VAR 0 3
64079: PUSH
64080: LD_VAR 0 1
64084: PPUSH
64085: CALL_OW 255
64089: PPUSH
64090: LD_VAR 0 1
64094: PPUSH
64095: CALL_OW 250
64099: PPUSH
64100: LD_VAR 0 1
64104: PPUSH
64105: CALL_OW 251
64109: PPUSH
64110: LD_VAR 0 2
64114: PPUSH
64115: CALL 37468 0 4
64119: PUSH
64120: LD_INT 4
64122: ARRAY
64123: ST_TO_ADDR
// end ;
64124: LD_VAR 0 3
64128: RET
// export function PlayerSeeMe ( unit ) ; begin
64129: LD_INT 0
64131: PPUSH
// result := See ( your_side , unit ) ;
64132: LD_ADDR_VAR 0 2
64136: PUSH
64137: LD_OWVAR 2
64141: PPUSH
64142: LD_VAR 0 1
64146: PPUSH
64147: CALL_OW 292
64151: ST_TO_ADDR
// end ;
64152: LD_VAR 0 2
64156: RET
// export function ReverseDir ( unit ) ; begin
64157: LD_INT 0
64159: PPUSH
// if not unit then
64160: LD_VAR 0 1
64164: NOT
64165: IFFALSE 64169
// exit ;
64167: GO 64192
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64169: LD_ADDR_VAR 0 2
64173: PUSH
64174: LD_VAR 0 1
64178: PPUSH
64179: CALL_OW 254
64183: PUSH
64184: LD_INT 3
64186: PLUS
64187: PUSH
64188: LD_INT 6
64190: MOD
64191: ST_TO_ADDR
// end ;
64192: LD_VAR 0 2
64196: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64197: LD_INT 0
64199: PPUSH
64200: PPUSH
64201: PPUSH
64202: PPUSH
64203: PPUSH
// if not hexes then
64204: LD_VAR 0 2
64208: NOT
64209: IFFALSE 64213
// exit ;
64211: GO 64361
// dist := 9999 ;
64213: LD_ADDR_VAR 0 5
64217: PUSH
64218: LD_INT 9999
64220: ST_TO_ADDR
// for i = 1 to hexes do
64221: LD_ADDR_VAR 0 4
64225: PUSH
64226: DOUBLE
64227: LD_INT 1
64229: DEC
64230: ST_TO_ADDR
64231: LD_VAR 0 2
64235: PUSH
64236: FOR_TO
64237: IFFALSE 64349
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64239: LD_VAR 0 1
64243: PPUSH
64244: LD_VAR 0 2
64248: PUSH
64249: LD_VAR 0 4
64253: ARRAY
64254: PUSH
64255: LD_INT 1
64257: ARRAY
64258: PPUSH
64259: LD_VAR 0 2
64263: PUSH
64264: LD_VAR 0 4
64268: ARRAY
64269: PUSH
64270: LD_INT 2
64272: ARRAY
64273: PPUSH
64274: CALL_OW 297
64278: PUSH
64279: LD_VAR 0 5
64283: LESS
64284: IFFALSE 64347
// begin hex := hexes [ i ] ;
64286: LD_ADDR_VAR 0 7
64290: PUSH
64291: LD_VAR 0 2
64295: PUSH
64296: LD_VAR 0 4
64300: ARRAY
64301: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64302: LD_ADDR_VAR 0 5
64306: PUSH
64307: LD_VAR 0 1
64311: PPUSH
64312: LD_VAR 0 2
64316: PUSH
64317: LD_VAR 0 4
64321: ARRAY
64322: PUSH
64323: LD_INT 1
64325: ARRAY
64326: PPUSH
64327: LD_VAR 0 2
64331: PUSH
64332: LD_VAR 0 4
64336: ARRAY
64337: PUSH
64338: LD_INT 2
64340: ARRAY
64341: PPUSH
64342: CALL_OW 297
64346: ST_TO_ADDR
// end ; end ;
64347: GO 64236
64349: POP
64350: POP
// result := hex ;
64351: LD_ADDR_VAR 0 3
64355: PUSH
64356: LD_VAR 0 7
64360: ST_TO_ADDR
// end ;
64361: LD_VAR 0 3
64365: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64366: LD_INT 0
64368: PPUSH
64369: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64370: LD_VAR 0 1
64374: NOT
64375: PUSH
64376: LD_VAR 0 1
64380: PUSH
64381: LD_INT 21
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 23
64393: PUSH
64394: LD_INT 2
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PPUSH
64405: CALL_OW 69
64409: IN
64410: NOT
64411: OR
64412: IFFALSE 64416
// exit ;
64414: GO 64463
// for i = 1 to 3 do
64416: LD_ADDR_VAR 0 3
64420: PUSH
64421: DOUBLE
64422: LD_INT 1
64424: DEC
64425: ST_TO_ADDR
64426: LD_INT 3
64428: PUSH
64429: FOR_TO
64430: IFFALSE 64461
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64432: LD_VAR 0 1
64436: PPUSH
64437: CALL_OW 250
64441: PPUSH
64442: LD_VAR 0 1
64446: PPUSH
64447: CALL_OW 251
64451: PPUSH
64452: LD_INT 1
64454: PPUSH
64455: CALL_OW 453
64459: GO 64429
64461: POP
64462: POP
// end ;
64463: LD_VAR 0 2
64467: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64468: LD_INT 0
64470: PPUSH
64471: PPUSH
64472: PPUSH
64473: PPUSH
64474: PPUSH
64475: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64476: LD_VAR 0 1
64480: NOT
64481: PUSH
64482: LD_VAR 0 2
64486: NOT
64487: OR
64488: PUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: CALL_OW 314
64498: OR
64499: IFFALSE 64503
// exit ;
64501: GO 64944
// x := GetX ( enemy_unit ) ;
64503: LD_ADDR_VAR 0 7
64507: PUSH
64508: LD_VAR 0 2
64512: PPUSH
64513: CALL_OW 250
64517: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64518: LD_ADDR_VAR 0 8
64522: PUSH
64523: LD_VAR 0 2
64527: PPUSH
64528: CALL_OW 251
64532: ST_TO_ADDR
// if not x or not y then
64533: LD_VAR 0 7
64537: NOT
64538: PUSH
64539: LD_VAR 0 8
64543: NOT
64544: OR
64545: IFFALSE 64549
// exit ;
64547: GO 64944
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64549: LD_ADDR_VAR 0 6
64553: PUSH
64554: LD_VAR 0 7
64558: PPUSH
64559: LD_INT 0
64561: PPUSH
64562: LD_INT 4
64564: PPUSH
64565: CALL_OW 272
64569: PUSH
64570: LD_VAR 0 8
64574: PPUSH
64575: LD_INT 0
64577: PPUSH
64578: LD_INT 4
64580: PPUSH
64581: CALL_OW 273
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_VAR 0 7
64594: PPUSH
64595: LD_INT 1
64597: PPUSH
64598: LD_INT 4
64600: PPUSH
64601: CALL_OW 272
64605: PUSH
64606: LD_VAR 0 8
64610: PPUSH
64611: LD_INT 1
64613: PPUSH
64614: LD_INT 4
64616: PPUSH
64617: CALL_OW 273
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_VAR 0 7
64630: PPUSH
64631: LD_INT 2
64633: PPUSH
64634: LD_INT 4
64636: PPUSH
64637: CALL_OW 272
64641: PUSH
64642: LD_VAR 0 8
64646: PPUSH
64647: LD_INT 2
64649: PPUSH
64650: LD_INT 4
64652: PPUSH
64653: CALL_OW 273
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_VAR 0 7
64666: PPUSH
64667: LD_INT 3
64669: PPUSH
64670: LD_INT 4
64672: PPUSH
64673: CALL_OW 272
64677: PUSH
64678: LD_VAR 0 8
64682: PPUSH
64683: LD_INT 3
64685: PPUSH
64686: LD_INT 4
64688: PPUSH
64689: CALL_OW 273
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_VAR 0 7
64702: PPUSH
64703: LD_INT 4
64705: PPUSH
64706: LD_INT 4
64708: PPUSH
64709: CALL_OW 272
64713: PUSH
64714: LD_VAR 0 8
64718: PPUSH
64719: LD_INT 4
64721: PPUSH
64722: LD_INT 4
64724: PPUSH
64725: CALL_OW 273
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_VAR 0 7
64738: PPUSH
64739: LD_INT 5
64741: PPUSH
64742: LD_INT 4
64744: PPUSH
64745: CALL_OW 272
64749: PUSH
64750: LD_VAR 0 8
64754: PPUSH
64755: LD_INT 5
64757: PPUSH
64758: LD_INT 4
64760: PPUSH
64761: CALL_OW 273
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: ST_TO_ADDR
// for i = tmp downto 1 do
64778: LD_ADDR_VAR 0 4
64782: PUSH
64783: DOUBLE
64784: LD_VAR 0 6
64788: INC
64789: ST_TO_ADDR
64790: LD_INT 1
64792: PUSH
64793: FOR_DOWNTO
64794: IFFALSE 64895
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64796: LD_VAR 0 6
64800: PUSH
64801: LD_VAR 0 4
64805: ARRAY
64806: PUSH
64807: LD_INT 1
64809: ARRAY
64810: PPUSH
64811: LD_VAR 0 6
64815: PUSH
64816: LD_VAR 0 4
64820: ARRAY
64821: PUSH
64822: LD_INT 2
64824: ARRAY
64825: PPUSH
64826: CALL_OW 488
64830: NOT
64831: PUSH
64832: LD_VAR 0 6
64836: PUSH
64837: LD_VAR 0 4
64841: ARRAY
64842: PUSH
64843: LD_INT 1
64845: ARRAY
64846: PPUSH
64847: LD_VAR 0 6
64851: PUSH
64852: LD_VAR 0 4
64856: ARRAY
64857: PUSH
64858: LD_INT 2
64860: ARRAY
64861: PPUSH
64862: CALL_OW 428
64866: PUSH
64867: LD_INT 0
64869: NONEQUAL
64870: OR
64871: IFFALSE 64893
// tmp := Delete ( tmp , i ) ;
64873: LD_ADDR_VAR 0 6
64877: PUSH
64878: LD_VAR 0 6
64882: PPUSH
64883: LD_VAR 0 4
64887: PPUSH
64888: CALL_OW 3
64892: ST_TO_ADDR
64893: GO 64793
64895: POP
64896: POP
// j := GetClosestHex ( unit , tmp ) ;
64897: LD_ADDR_VAR 0 5
64901: PUSH
64902: LD_VAR 0 1
64906: PPUSH
64907: LD_VAR 0 6
64911: PPUSH
64912: CALL 64197 0 2
64916: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64917: LD_VAR 0 1
64921: PPUSH
64922: LD_VAR 0 5
64926: PUSH
64927: LD_INT 1
64929: ARRAY
64930: PPUSH
64931: LD_VAR 0 5
64935: PUSH
64936: LD_INT 2
64938: ARRAY
64939: PPUSH
64940: CALL_OW 111
// end ;
64944: LD_VAR 0 3
64948: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64949: LD_INT 0
64951: PPUSH
64952: PPUSH
64953: PPUSH
// uc_side = 0 ;
64954: LD_ADDR_OWVAR 20
64958: PUSH
64959: LD_INT 0
64961: ST_TO_ADDR
// uc_nation = 0 ;
64962: LD_ADDR_OWVAR 21
64966: PUSH
64967: LD_INT 0
64969: ST_TO_ADDR
// InitHc_All ( ) ;
64970: CALL_OW 584
// InitVc ;
64974: CALL_OW 20
// if mastodonts then
64978: LD_VAR 0 6
64982: IFFALSE 65049
// for i = 1 to mastodonts do
64984: LD_ADDR_VAR 0 11
64988: PUSH
64989: DOUBLE
64990: LD_INT 1
64992: DEC
64993: ST_TO_ADDR
64994: LD_VAR 0 6
64998: PUSH
64999: FOR_TO
65000: IFFALSE 65047
// begin vc_chassis := 31 ;
65002: LD_ADDR_OWVAR 37
65006: PUSH
65007: LD_INT 31
65009: ST_TO_ADDR
// vc_control := control_rider ;
65010: LD_ADDR_OWVAR 38
65014: PUSH
65015: LD_INT 4
65017: ST_TO_ADDR
// animal := CreateVehicle ;
65018: LD_ADDR_VAR 0 12
65022: PUSH
65023: CALL_OW 45
65027: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65028: LD_VAR 0 12
65032: PPUSH
65033: LD_VAR 0 8
65037: PPUSH
65038: LD_INT 0
65040: PPUSH
65041: CALL 67237 0 3
// end ;
65045: GO 64999
65047: POP
65048: POP
// if horses then
65049: LD_VAR 0 5
65053: IFFALSE 65120
// for i = 1 to horses do
65055: LD_ADDR_VAR 0 11
65059: PUSH
65060: DOUBLE
65061: LD_INT 1
65063: DEC
65064: ST_TO_ADDR
65065: LD_VAR 0 5
65069: PUSH
65070: FOR_TO
65071: IFFALSE 65118
// begin hc_class := 21 ;
65073: LD_ADDR_OWVAR 28
65077: PUSH
65078: LD_INT 21
65080: ST_TO_ADDR
// hc_gallery :=  ;
65081: LD_ADDR_OWVAR 33
65085: PUSH
65086: LD_STRING 
65088: ST_TO_ADDR
// animal := CreateHuman ;
65089: LD_ADDR_VAR 0 12
65093: PUSH
65094: CALL_OW 44
65098: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65099: LD_VAR 0 12
65103: PPUSH
65104: LD_VAR 0 8
65108: PPUSH
65109: LD_INT 0
65111: PPUSH
65112: CALL 67237 0 3
// end ;
65116: GO 65070
65118: POP
65119: POP
// if birds then
65120: LD_VAR 0 1
65124: IFFALSE 65191
// for i = 1 to birds do
65126: LD_ADDR_VAR 0 11
65130: PUSH
65131: DOUBLE
65132: LD_INT 1
65134: DEC
65135: ST_TO_ADDR
65136: LD_VAR 0 1
65140: PUSH
65141: FOR_TO
65142: IFFALSE 65189
// begin hc_class = 18 ;
65144: LD_ADDR_OWVAR 28
65148: PUSH
65149: LD_INT 18
65151: ST_TO_ADDR
// hc_gallery =  ;
65152: LD_ADDR_OWVAR 33
65156: PUSH
65157: LD_STRING 
65159: ST_TO_ADDR
// animal := CreateHuman ;
65160: LD_ADDR_VAR 0 12
65164: PUSH
65165: CALL_OW 44
65169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65170: LD_VAR 0 12
65174: PPUSH
65175: LD_VAR 0 8
65179: PPUSH
65180: LD_INT 0
65182: PPUSH
65183: CALL 67237 0 3
// end ;
65187: GO 65141
65189: POP
65190: POP
// if tigers then
65191: LD_VAR 0 2
65195: IFFALSE 65279
// for i = 1 to tigers do
65197: LD_ADDR_VAR 0 11
65201: PUSH
65202: DOUBLE
65203: LD_INT 1
65205: DEC
65206: ST_TO_ADDR
65207: LD_VAR 0 2
65211: PUSH
65212: FOR_TO
65213: IFFALSE 65277
// begin hc_class = class_tiger ;
65215: LD_ADDR_OWVAR 28
65219: PUSH
65220: LD_INT 14
65222: ST_TO_ADDR
// hc_gallery =  ;
65223: LD_ADDR_OWVAR 33
65227: PUSH
65228: LD_STRING 
65230: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65231: LD_ADDR_OWVAR 35
65235: PUSH
65236: LD_INT 7
65238: NEG
65239: PPUSH
65240: LD_INT 7
65242: PPUSH
65243: CALL_OW 12
65247: ST_TO_ADDR
// animal := CreateHuman ;
65248: LD_ADDR_VAR 0 12
65252: PUSH
65253: CALL_OW 44
65257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65258: LD_VAR 0 12
65262: PPUSH
65263: LD_VAR 0 8
65267: PPUSH
65268: LD_INT 0
65270: PPUSH
65271: CALL 67237 0 3
// end ;
65275: GO 65212
65277: POP
65278: POP
// if apemans then
65279: LD_VAR 0 3
65283: IFFALSE 65406
// for i = 1 to apemans do
65285: LD_ADDR_VAR 0 11
65289: PUSH
65290: DOUBLE
65291: LD_INT 1
65293: DEC
65294: ST_TO_ADDR
65295: LD_VAR 0 3
65299: PUSH
65300: FOR_TO
65301: IFFALSE 65404
// begin hc_class = class_apeman ;
65303: LD_ADDR_OWVAR 28
65307: PUSH
65308: LD_INT 12
65310: ST_TO_ADDR
// hc_gallery =  ;
65311: LD_ADDR_OWVAR 33
65315: PUSH
65316: LD_STRING 
65318: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65319: LD_ADDR_OWVAR 35
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PPUSH
65328: LD_INT 2
65330: PPUSH
65331: CALL_OW 12
65335: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65336: LD_ADDR_OWVAR 31
65340: PUSH
65341: LD_INT 1
65343: PPUSH
65344: LD_INT 3
65346: PPUSH
65347: CALL_OW 12
65351: PUSH
65352: LD_INT 1
65354: PPUSH
65355: LD_INT 3
65357: PPUSH
65358: CALL_OW 12
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: ST_TO_ADDR
// animal := CreateHuman ;
65375: LD_ADDR_VAR 0 12
65379: PUSH
65380: CALL_OW 44
65384: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65385: LD_VAR 0 12
65389: PPUSH
65390: LD_VAR 0 8
65394: PPUSH
65395: LD_INT 0
65397: PPUSH
65398: CALL 67237 0 3
// end ;
65402: GO 65300
65404: POP
65405: POP
// if enchidnas then
65406: LD_VAR 0 4
65410: IFFALSE 65477
// for i = 1 to enchidnas do
65412: LD_ADDR_VAR 0 11
65416: PUSH
65417: DOUBLE
65418: LD_INT 1
65420: DEC
65421: ST_TO_ADDR
65422: LD_VAR 0 4
65426: PUSH
65427: FOR_TO
65428: IFFALSE 65475
// begin hc_class = 13 ;
65430: LD_ADDR_OWVAR 28
65434: PUSH
65435: LD_INT 13
65437: ST_TO_ADDR
// hc_gallery =  ;
65438: LD_ADDR_OWVAR 33
65442: PUSH
65443: LD_STRING 
65445: ST_TO_ADDR
// animal := CreateHuman ;
65446: LD_ADDR_VAR 0 12
65450: PUSH
65451: CALL_OW 44
65455: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65456: LD_VAR 0 12
65460: PPUSH
65461: LD_VAR 0 8
65465: PPUSH
65466: LD_INT 0
65468: PPUSH
65469: CALL 67237 0 3
// end ;
65473: GO 65427
65475: POP
65476: POP
// if fishes then
65477: LD_VAR 0 7
65481: IFFALSE 65548
// for i = 1 to fishes do
65483: LD_ADDR_VAR 0 11
65487: PUSH
65488: DOUBLE
65489: LD_INT 1
65491: DEC
65492: ST_TO_ADDR
65493: LD_VAR 0 7
65497: PUSH
65498: FOR_TO
65499: IFFALSE 65546
// begin hc_class = 20 ;
65501: LD_ADDR_OWVAR 28
65505: PUSH
65506: LD_INT 20
65508: ST_TO_ADDR
// hc_gallery =  ;
65509: LD_ADDR_OWVAR 33
65513: PUSH
65514: LD_STRING 
65516: ST_TO_ADDR
// animal := CreateHuman ;
65517: LD_ADDR_VAR 0 12
65521: PUSH
65522: CALL_OW 44
65526: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65527: LD_VAR 0 12
65531: PPUSH
65532: LD_VAR 0 9
65536: PPUSH
65537: LD_INT 0
65539: PPUSH
65540: CALL 67237 0 3
// end ;
65544: GO 65498
65546: POP
65547: POP
// end ;
65548: LD_VAR 0 10
65552: RET
// export function WantHeal ( sci , unit ) ; begin
65553: LD_INT 0
65555: PPUSH
// if GetTaskList ( sci ) > 0 then
65556: LD_VAR 0 1
65560: PPUSH
65561: CALL_OW 437
65565: PUSH
65566: LD_INT 0
65568: GREATER
65569: IFFALSE 65639
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65571: LD_VAR 0 1
65575: PPUSH
65576: CALL_OW 437
65580: PUSH
65581: LD_INT 1
65583: ARRAY
65584: PUSH
65585: LD_INT 1
65587: ARRAY
65588: PUSH
65589: LD_STRING l
65591: EQUAL
65592: PUSH
65593: LD_VAR 0 1
65597: PPUSH
65598: CALL_OW 437
65602: PUSH
65603: LD_INT 1
65605: ARRAY
65606: PUSH
65607: LD_INT 4
65609: ARRAY
65610: PUSH
65611: LD_VAR 0 2
65615: EQUAL
65616: AND
65617: IFFALSE 65629
// result := true else
65619: LD_ADDR_VAR 0 3
65623: PUSH
65624: LD_INT 1
65626: ST_TO_ADDR
65627: GO 65637
// result := false ;
65629: LD_ADDR_VAR 0 3
65633: PUSH
65634: LD_INT 0
65636: ST_TO_ADDR
// end else
65637: GO 65647
// result := false ;
65639: LD_ADDR_VAR 0 3
65643: PUSH
65644: LD_INT 0
65646: ST_TO_ADDR
// end ;
65647: LD_VAR 0 3
65651: RET
// export function HealTarget ( sci ) ; begin
65652: LD_INT 0
65654: PPUSH
// if not sci then
65655: LD_VAR 0 1
65659: NOT
65660: IFFALSE 65664
// exit ;
65662: GO 65729
// result := 0 ;
65664: LD_ADDR_VAR 0 2
65668: PUSH
65669: LD_INT 0
65671: ST_TO_ADDR
// if GetTaskList ( sci ) then
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 437
65681: IFFALSE 65729
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65683: LD_VAR 0 1
65687: PPUSH
65688: CALL_OW 437
65692: PUSH
65693: LD_INT 1
65695: ARRAY
65696: PUSH
65697: LD_INT 1
65699: ARRAY
65700: PUSH
65701: LD_STRING l
65703: EQUAL
65704: IFFALSE 65729
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65706: LD_ADDR_VAR 0 2
65710: PUSH
65711: LD_VAR 0 1
65715: PPUSH
65716: CALL_OW 437
65720: PUSH
65721: LD_INT 1
65723: ARRAY
65724: PUSH
65725: LD_INT 4
65727: ARRAY
65728: ST_TO_ADDR
// end ;
65729: LD_VAR 0 2
65733: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65734: LD_INT 0
65736: PPUSH
65737: PPUSH
65738: PPUSH
65739: PPUSH
// if not base_units then
65740: LD_VAR 0 1
65744: NOT
65745: IFFALSE 65749
// exit ;
65747: GO 65836
// result := false ;
65749: LD_ADDR_VAR 0 2
65753: PUSH
65754: LD_INT 0
65756: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65757: LD_ADDR_VAR 0 5
65761: PUSH
65762: LD_VAR 0 1
65766: PPUSH
65767: LD_INT 21
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PPUSH
65777: CALL_OW 72
65781: ST_TO_ADDR
// if not tmp then
65782: LD_VAR 0 5
65786: NOT
65787: IFFALSE 65791
// exit ;
65789: GO 65836
// for i in tmp do
65791: LD_ADDR_VAR 0 3
65795: PUSH
65796: LD_VAR 0 5
65800: PUSH
65801: FOR_IN
65802: IFFALSE 65834
// begin result := EnemyInRange ( i , 22 ) ;
65804: LD_ADDR_VAR 0 2
65808: PUSH
65809: LD_VAR 0 3
65813: PPUSH
65814: LD_INT 22
65816: PPUSH
65817: CALL 64072 0 2
65821: ST_TO_ADDR
// if result then
65822: LD_VAR 0 2
65826: IFFALSE 65832
// exit ;
65828: POP
65829: POP
65830: GO 65836
// end ;
65832: GO 65801
65834: POP
65835: POP
// end ;
65836: LD_VAR 0 2
65840: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65841: LD_INT 0
65843: PPUSH
65844: PPUSH
// if not units then
65845: LD_VAR 0 1
65849: NOT
65850: IFFALSE 65854
// exit ;
65852: GO 65924
// result := [ ] ;
65854: LD_ADDR_VAR 0 3
65858: PUSH
65859: EMPTY
65860: ST_TO_ADDR
// for i in units do
65861: LD_ADDR_VAR 0 4
65865: PUSH
65866: LD_VAR 0 1
65870: PUSH
65871: FOR_IN
65872: IFFALSE 65922
// if GetTag ( i ) = tag then
65874: LD_VAR 0 4
65878: PPUSH
65879: CALL_OW 110
65883: PUSH
65884: LD_VAR 0 2
65888: EQUAL
65889: IFFALSE 65920
// result := Replace ( result , result + 1 , i ) ;
65891: LD_ADDR_VAR 0 3
65895: PUSH
65896: LD_VAR 0 3
65900: PPUSH
65901: LD_VAR 0 3
65905: PUSH
65906: LD_INT 1
65908: PLUS
65909: PPUSH
65910: LD_VAR 0 4
65914: PPUSH
65915: CALL_OW 1
65919: ST_TO_ADDR
65920: GO 65871
65922: POP
65923: POP
// end ;
65924: LD_VAR 0 3
65928: RET
// export function IsDriver ( un ) ; begin
65929: LD_INT 0
65931: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65932: LD_ADDR_VAR 0 2
65936: PUSH
65937: LD_VAR 0 1
65941: PUSH
65942: LD_INT 55
65944: PUSH
65945: EMPTY
65946: LIST
65947: PPUSH
65948: CALL_OW 69
65952: IN
65953: ST_TO_ADDR
// end ;
65954: LD_VAR 0 2
65958: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65959: LD_INT 0
65961: PPUSH
65962: PPUSH
// list := [ ] ;
65963: LD_ADDR_VAR 0 5
65967: PUSH
65968: EMPTY
65969: ST_TO_ADDR
// case d of 0 :
65970: LD_VAR 0 3
65974: PUSH
65975: LD_INT 0
65977: DOUBLE
65978: EQUAL
65979: IFTRUE 65983
65981: GO 66116
65983: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65984: LD_ADDR_VAR 0 5
65988: PUSH
65989: LD_VAR 0 1
65993: PUSH
65994: LD_INT 4
65996: MINUS
65997: PUSH
65998: LD_VAR 0 2
66002: PUSH
66003: LD_INT 4
66005: MINUS
66006: PUSH
66007: LD_INT 2
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: LIST
66014: PUSH
66015: LD_VAR 0 1
66019: PUSH
66020: LD_INT 3
66022: MINUS
66023: PUSH
66024: LD_VAR 0 2
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: PUSH
66037: LD_VAR 0 1
66041: PUSH
66042: LD_INT 4
66044: PLUS
66045: PUSH
66046: LD_VAR 0 2
66050: PUSH
66051: LD_INT 4
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: LIST
66058: PUSH
66059: LD_VAR 0 1
66063: PUSH
66064: LD_INT 3
66066: PLUS
66067: PUSH
66068: LD_VAR 0 2
66072: PUSH
66073: LD_INT 3
66075: PLUS
66076: PUSH
66077: LD_INT 5
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: PUSH
66085: LD_VAR 0 1
66089: PUSH
66090: LD_VAR 0 2
66094: PUSH
66095: LD_INT 4
66097: PLUS
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: ST_TO_ADDR
// end ; 1 :
66114: GO 66814
66116: LD_INT 1
66118: DOUBLE
66119: EQUAL
66120: IFTRUE 66124
66122: GO 66257
66124: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66125: LD_ADDR_VAR 0 5
66129: PUSH
66130: LD_VAR 0 1
66134: PUSH
66135: LD_VAR 0 2
66139: PUSH
66140: LD_INT 4
66142: MINUS
66143: PUSH
66144: LD_INT 3
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: LIST
66151: PUSH
66152: LD_VAR 0 1
66156: PUSH
66157: LD_INT 3
66159: MINUS
66160: PUSH
66161: LD_VAR 0 2
66165: PUSH
66166: LD_INT 3
66168: MINUS
66169: PUSH
66170: LD_INT 2
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: LIST
66177: PUSH
66178: LD_VAR 0 1
66182: PUSH
66183: LD_INT 4
66185: MINUS
66186: PUSH
66187: LD_VAR 0 2
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: LIST
66199: PUSH
66200: LD_VAR 0 1
66204: PUSH
66205: LD_VAR 0 2
66209: PUSH
66210: LD_INT 3
66212: PLUS
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: LIST
66221: PUSH
66222: LD_VAR 0 1
66226: PUSH
66227: LD_INT 4
66229: PLUS
66230: PUSH
66231: LD_VAR 0 2
66235: PUSH
66236: LD_INT 4
66238: PLUS
66239: PUSH
66240: LD_INT 5
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: ST_TO_ADDR
// end ; 2 :
66255: GO 66814
66257: LD_INT 2
66259: DOUBLE
66260: EQUAL
66261: IFTRUE 66265
66263: GO 66394
66265: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66266: LD_ADDR_VAR 0 5
66270: PUSH
66271: LD_VAR 0 1
66275: PUSH
66276: LD_VAR 0 2
66280: PUSH
66281: LD_INT 3
66283: MINUS
66284: PUSH
66285: LD_INT 3
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: LIST
66292: PUSH
66293: LD_VAR 0 1
66297: PUSH
66298: LD_INT 4
66300: PLUS
66301: PUSH
66302: LD_VAR 0 2
66306: PUSH
66307: LD_INT 4
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: PUSH
66315: LD_VAR 0 1
66319: PUSH
66320: LD_VAR 0 2
66324: PUSH
66325: LD_INT 4
66327: PLUS
66328: PUSH
66329: LD_INT 0
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: PUSH
66337: LD_VAR 0 1
66341: PUSH
66342: LD_INT 3
66344: MINUS
66345: PUSH
66346: LD_VAR 0 2
66350: PUSH
66351: LD_INT 1
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: PUSH
66359: LD_VAR 0 1
66363: PUSH
66364: LD_INT 4
66366: MINUS
66367: PUSH
66368: LD_VAR 0 2
66372: PUSH
66373: LD_INT 4
66375: MINUS
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: LIST
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: ST_TO_ADDR
// end ; 3 :
66392: GO 66814
66394: LD_INT 3
66396: DOUBLE
66397: EQUAL
66398: IFTRUE 66402
66400: GO 66535
66402: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66403: LD_ADDR_VAR 0 5
66407: PUSH
66408: LD_VAR 0 1
66412: PUSH
66413: LD_INT 3
66415: PLUS
66416: PUSH
66417: LD_VAR 0 2
66421: PUSH
66422: LD_INT 4
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: LIST
66429: PUSH
66430: LD_VAR 0 1
66434: PUSH
66435: LD_INT 4
66437: PLUS
66438: PUSH
66439: LD_VAR 0 2
66443: PUSH
66444: LD_INT 4
66446: PLUS
66447: PUSH
66448: LD_INT 5
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: LIST
66455: PUSH
66456: LD_VAR 0 1
66460: PUSH
66461: LD_INT 4
66463: MINUS
66464: PUSH
66465: LD_VAR 0 2
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: LIST
66477: PUSH
66478: LD_VAR 0 1
66482: PUSH
66483: LD_VAR 0 2
66487: PUSH
66488: LD_INT 4
66490: MINUS
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: LIST
66499: PUSH
66500: LD_VAR 0 1
66504: PUSH
66505: LD_INT 3
66507: MINUS
66508: PUSH
66509: LD_VAR 0 2
66513: PUSH
66514: LD_INT 3
66516: MINUS
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: ST_TO_ADDR
// end ; 4 :
66533: GO 66814
66535: LD_INT 4
66537: DOUBLE
66538: EQUAL
66539: IFTRUE 66543
66541: GO 66676
66543: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66544: LD_ADDR_VAR 0 5
66548: PUSH
66549: LD_VAR 0 1
66553: PUSH
66554: LD_VAR 0 2
66558: PUSH
66559: LD_INT 4
66561: PLUS
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: LIST
66570: PUSH
66571: LD_VAR 0 1
66575: PUSH
66576: LD_INT 3
66578: PLUS
66579: PUSH
66580: LD_VAR 0 2
66584: PUSH
66585: LD_INT 3
66587: PLUS
66588: PUSH
66589: LD_INT 5
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: PUSH
66597: LD_VAR 0 1
66601: PUSH
66602: LD_INT 4
66604: PLUS
66605: PUSH
66606: LD_VAR 0 2
66610: PUSH
66611: LD_INT 4
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: LIST
66618: PUSH
66619: LD_VAR 0 1
66623: PUSH
66624: LD_VAR 0 2
66628: PUSH
66629: LD_INT 3
66631: MINUS
66632: PUSH
66633: LD_INT 3
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: LIST
66640: PUSH
66641: LD_VAR 0 1
66645: PUSH
66646: LD_INT 4
66648: MINUS
66649: PUSH
66650: LD_VAR 0 2
66654: PUSH
66655: LD_INT 4
66657: MINUS
66658: PUSH
66659: LD_INT 2
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: ST_TO_ADDR
// end ; 5 :
66674: GO 66814
66676: LD_INT 5
66678: DOUBLE
66679: EQUAL
66680: IFTRUE 66684
66682: GO 66813
66684: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66685: LD_ADDR_VAR 0 5
66689: PUSH
66690: LD_VAR 0 1
66694: PUSH
66695: LD_INT 4
66697: MINUS
66698: PUSH
66699: LD_VAR 0 2
66703: PUSH
66704: LD_INT 1
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: LIST
66711: PUSH
66712: LD_VAR 0 1
66716: PUSH
66717: LD_VAR 0 2
66721: PUSH
66722: LD_INT 4
66724: MINUS
66725: PUSH
66726: LD_INT 3
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: LIST
66733: PUSH
66734: LD_VAR 0 1
66738: PUSH
66739: LD_INT 4
66741: PLUS
66742: PUSH
66743: LD_VAR 0 2
66747: PUSH
66748: LD_INT 4
66750: PLUS
66751: PUSH
66752: LD_INT 5
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: PUSH
66760: LD_VAR 0 1
66764: PUSH
66765: LD_INT 3
66767: PLUS
66768: PUSH
66769: LD_VAR 0 2
66773: PUSH
66774: LD_INT 4
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: LIST
66781: PUSH
66782: LD_VAR 0 1
66786: PUSH
66787: LD_VAR 0 2
66791: PUSH
66792: LD_INT 3
66794: PLUS
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: ST_TO_ADDR
// end ; end ;
66811: GO 66814
66813: POP
// result := list ;
66814: LD_ADDR_VAR 0 4
66818: PUSH
66819: LD_VAR 0 5
66823: ST_TO_ADDR
// end ;
66824: LD_VAR 0 4
66828: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66829: LD_INT 0
66831: PPUSH
66832: PPUSH
66833: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66834: LD_VAR 0 1
66838: NOT
66839: PUSH
66840: LD_VAR 0 2
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: LD_INT 3
66853: PUSH
66854: LD_INT 4
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: IN
66863: NOT
66864: OR
66865: IFFALSE 66869
// exit ;
66867: GO 66961
// tmp := [ ] ;
66869: LD_ADDR_VAR 0 5
66873: PUSH
66874: EMPTY
66875: ST_TO_ADDR
// for i in units do
66876: LD_ADDR_VAR 0 4
66880: PUSH
66881: LD_VAR 0 1
66885: PUSH
66886: FOR_IN
66887: IFFALSE 66930
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66889: LD_ADDR_VAR 0 5
66893: PUSH
66894: LD_VAR 0 5
66898: PPUSH
66899: LD_VAR 0 5
66903: PUSH
66904: LD_INT 1
66906: PLUS
66907: PPUSH
66908: LD_VAR 0 4
66912: PPUSH
66913: LD_VAR 0 2
66917: PPUSH
66918: CALL_OW 259
66922: PPUSH
66923: CALL_OW 2
66927: ST_TO_ADDR
66928: GO 66886
66930: POP
66931: POP
// if not tmp then
66932: LD_VAR 0 5
66936: NOT
66937: IFFALSE 66941
// exit ;
66939: GO 66961
// result := SortListByListDesc ( units , tmp ) ;
66941: LD_ADDR_VAR 0 3
66945: PUSH
66946: LD_VAR 0 1
66950: PPUSH
66951: LD_VAR 0 5
66955: PPUSH
66956: CALL_OW 77
66960: ST_TO_ADDR
// end ;
66961: LD_VAR 0 3
66965: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66966: LD_INT 0
66968: PPUSH
66969: PPUSH
66970: PPUSH
// result := false ;
66971: LD_ADDR_VAR 0 3
66975: PUSH
66976: LD_INT 0
66978: ST_TO_ADDR
// x := GetX ( building ) ;
66979: LD_ADDR_VAR 0 4
66983: PUSH
66984: LD_VAR 0 2
66988: PPUSH
66989: CALL_OW 250
66993: ST_TO_ADDR
// y := GetY ( building ) ;
66994: LD_ADDR_VAR 0 5
66998: PUSH
66999: LD_VAR 0 2
67003: PPUSH
67004: CALL_OW 251
67008: ST_TO_ADDR
// if not building or not x or not y then
67009: LD_VAR 0 2
67013: NOT
67014: PUSH
67015: LD_VAR 0 4
67019: NOT
67020: OR
67021: PUSH
67022: LD_VAR 0 5
67026: NOT
67027: OR
67028: IFFALSE 67032
// exit ;
67030: GO 67124
// if GetTaskList ( unit ) then
67032: LD_VAR 0 1
67036: PPUSH
67037: CALL_OW 437
67041: IFFALSE 67124
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67043: LD_STRING e
67045: PUSH
67046: LD_VAR 0 1
67050: PPUSH
67051: CALL_OW 437
67055: PUSH
67056: LD_INT 1
67058: ARRAY
67059: PUSH
67060: LD_INT 1
67062: ARRAY
67063: EQUAL
67064: PUSH
67065: LD_VAR 0 4
67069: PUSH
67070: LD_VAR 0 1
67074: PPUSH
67075: CALL_OW 437
67079: PUSH
67080: LD_INT 1
67082: ARRAY
67083: PUSH
67084: LD_INT 2
67086: ARRAY
67087: EQUAL
67088: AND
67089: PUSH
67090: LD_VAR 0 5
67094: PUSH
67095: LD_VAR 0 1
67099: PPUSH
67100: CALL_OW 437
67104: PUSH
67105: LD_INT 1
67107: ARRAY
67108: PUSH
67109: LD_INT 3
67111: ARRAY
67112: EQUAL
67113: AND
67114: IFFALSE 67124
// result := true end ;
67116: LD_ADDR_VAR 0 3
67120: PUSH
67121: LD_INT 1
67123: ST_TO_ADDR
// end ;
67124: LD_VAR 0 3
67128: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67129: LD_INT 0
67131: PPUSH
// result := false ;
67132: LD_ADDR_VAR 0 4
67136: PUSH
67137: LD_INT 0
67139: ST_TO_ADDR
// if GetTaskList ( unit ) then
67140: LD_VAR 0 1
67144: PPUSH
67145: CALL_OW 437
67149: IFFALSE 67232
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67151: LD_STRING M
67153: PUSH
67154: LD_VAR 0 1
67158: PPUSH
67159: CALL_OW 437
67163: PUSH
67164: LD_INT 1
67166: ARRAY
67167: PUSH
67168: LD_INT 1
67170: ARRAY
67171: EQUAL
67172: PUSH
67173: LD_VAR 0 2
67177: PUSH
67178: LD_VAR 0 1
67182: PPUSH
67183: CALL_OW 437
67187: PUSH
67188: LD_INT 1
67190: ARRAY
67191: PUSH
67192: LD_INT 2
67194: ARRAY
67195: EQUAL
67196: AND
67197: PUSH
67198: LD_VAR 0 3
67202: PUSH
67203: LD_VAR 0 1
67207: PPUSH
67208: CALL_OW 437
67212: PUSH
67213: LD_INT 1
67215: ARRAY
67216: PUSH
67217: LD_INT 3
67219: ARRAY
67220: EQUAL
67221: AND
67222: IFFALSE 67232
// result := true ;
67224: LD_ADDR_VAR 0 4
67228: PUSH
67229: LD_INT 1
67231: ST_TO_ADDR
// end ; end ;
67232: LD_VAR 0 4
67236: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67237: LD_INT 0
67239: PPUSH
67240: PPUSH
67241: PPUSH
67242: PPUSH
// if not unit or not area then
67243: LD_VAR 0 1
67247: NOT
67248: PUSH
67249: LD_VAR 0 2
67253: NOT
67254: OR
67255: IFFALSE 67259
// exit ;
67257: GO 67423
// tmp := AreaToList ( area , i ) ;
67259: LD_ADDR_VAR 0 6
67263: PUSH
67264: LD_VAR 0 2
67268: PPUSH
67269: LD_VAR 0 5
67273: PPUSH
67274: CALL_OW 517
67278: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67279: LD_ADDR_VAR 0 5
67283: PUSH
67284: DOUBLE
67285: LD_INT 1
67287: DEC
67288: ST_TO_ADDR
67289: LD_VAR 0 6
67293: PUSH
67294: LD_INT 1
67296: ARRAY
67297: PUSH
67298: FOR_TO
67299: IFFALSE 67421
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67301: LD_ADDR_VAR 0 7
67305: PUSH
67306: LD_VAR 0 6
67310: PUSH
67311: LD_INT 1
67313: ARRAY
67314: PUSH
67315: LD_VAR 0 5
67319: ARRAY
67320: PUSH
67321: LD_VAR 0 6
67325: PUSH
67326: LD_INT 2
67328: ARRAY
67329: PUSH
67330: LD_VAR 0 5
67334: ARRAY
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67340: LD_VAR 0 7
67344: PUSH
67345: LD_INT 1
67347: ARRAY
67348: PPUSH
67349: LD_VAR 0 7
67353: PUSH
67354: LD_INT 2
67356: ARRAY
67357: PPUSH
67358: CALL_OW 428
67362: PUSH
67363: LD_INT 0
67365: EQUAL
67366: IFFALSE 67419
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67368: LD_VAR 0 1
67372: PPUSH
67373: LD_VAR 0 7
67377: PUSH
67378: LD_INT 1
67380: ARRAY
67381: PPUSH
67382: LD_VAR 0 7
67386: PUSH
67387: LD_INT 2
67389: ARRAY
67390: PPUSH
67391: LD_VAR 0 3
67395: PPUSH
67396: CALL_OW 48
// result := IsPlaced ( unit ) ;
67400: LD_ADDR_VAR 0 4
67404: PUSH
67405: LD_VAR 0 1
67409: PPUSH
67410: CALL_OW 305
67414: ST_TO_ADDR
// exit ;
67415: POP
67416: POP
67417: GO 67423
// end ; end ;
67419: GO 67298
67421: POP
67422: POP
// end ;
67423: LD_VAR 0 4
67427: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67428: LD_INT 0
67430: PPUSH
67431: PPUSH
67432: PPUSH
// if not side or side > 8 then
67433: LD_VAR 0 1
67437: NOT
67438: PUSH
67439: LD_VAR 0 1
67443: PUSH
67444: LD_INT 8
67446: GREATER
67447: OR
67448: IFFALSE 67452
// exit ;
67450: GO 67639
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67452: LD_ADDR_VAR 0 4
67456: PUSH
67457: LD_INT 22
67459: PUSH
67460: LD_VAR 0 1
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 21
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PPUSH
67483: CALL_OW 69
67487: ST_TO_ADDR
// if not tmp then
67488: LD_VAR 0 4
67492: NOT
67493: IFFALSE 67497
// exit ;
67495: GO 67639
// enable_addtolog := true ;
67497: LD_ADDR_OWVAR 81
67501: PUSH
67502: LD_INT 1
67504: ST_TO_ADDR
// AddToLog ( [ ) ;
67505: LD_STRING [
67507: PPUSH
67508: CALL_OW 561
// for i in tmp do
67512: LD_ADDR_VAR 0 3
67516: PUSH
67517: LD_VAR 0 4
67521: PUSH
67522: FOR_IN
67523: IFFALSE 67630
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67525: LD_STRING [
67527: PUSH
67528: LD_VAR 0 3
67532: PPUSH
67533: CALL_OW 266
67537: STR
67538: PUSH
67539: LD_STRING , 
67541: STR
67542: PUSH
67543: LD_VAR 0 3
67547: PPUSH
67548: CALL_OW 250
67552: STR
67553: PUSH
67554: LD_STRING , 
67556: STR
67557: PUSH
67558: LD_VAR 0 3
67562: PPUSH
67563: CALL_OW 251
67567: STR
67568: PUSH
67569: LD_STRING , 
67571: STR
67572: PUSH
67573: LD_VAR 0 3
67577: PPUSH
67578: CALL_OW 254
67582: STR
67583: PUSH
67584: LD_STRING , 
67586: STR
67587: PUSH
67588: LD_VAR 0 3
67592: PPUSH
67593: LD_INT 1
67595: PPUSH
67596: CALL_OW 268
67600: STR
67601: PUSH
67602: LD_STRING , 
67604: STR
67605: PUSH
67606: LD_VAR 0 3
67610: PPUSH
67611: LD_INT 2
67613: PPUSH
67614: CALL_OW 268
67618: STR
67619: PUSH
67620: LD_STRING ],
67622: STR
67623: PPUSH
67624: CALL_OW 561
// end ;
67628: GO 67522
67630: POP
67631: POP
// AddToLog ( ]; ) ;
67632: LD_STRING ];
67634: PPUSH
67635: CALL_OW 561
// end ;
67639: LD_VAR 0 2
67643: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67644: LD_INT 0
67646: PPUSH
67647: PPUSH
67648: PPUSH
67649: PPUSH
67650: PPUSH
// if not area or not rate or not max then
67651: LD_VAR 0 1
67655: NOT
67656: PUSH
67657: LD_VAR 0 2
67661: NOT
67662: OR
67663: PUSH
67664: LD_VAR 0 4
67668: NOT
67669: OR
67670: IFFALSE 67674
// exit ;
67672: GO 67866
// while 1 do
67674: LD_INT 1
67676: IFFALSE 67866
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67678: LD_ADDR_VAR 0 9
67682: PUSH
67683: LD_VAR 0 1
67687: PPUSH
67688: LD_INT 1
67690: PPUSH
67691: CALL_OW 287
67695: PUSH
67696: LD_INT 10
67698: MUL
67699: ST_TO_ADDR
// r := rate / 10 ;
67700: LD_ADDR_VAR 0 7
67704: PUSH
67705: LD_VAR 0 2
67709: PUSH
67710: LD_INT 10
67712: DIVREAL
67713: ST_TO_ADDR
// time := 1 1$00 ;
67714: LD_ADDR_VAR 0 8
67718: PUSH
67719: LD_INT 2100
67721: ST_TO_ADDR
// if amount < min then
67722: LD_VAR 0 9
67726: PUSH
67727: LD_VAR 0 3
67731: LESS
67732: IFFALSE 67750
// r := r * 2 else
67734: LD_ADDR_VAR 0 7
67738: PUSH
67739: LD_VAR 0 7
67743: PUSH
67744: LD_INT 2
67746: MUL
67747: ST_TO_ADDR
67748: GO 67776
// if amount > max then
67750: LD_VAR 0 9
67754: PUSH
67755: LD_VAR 0 4
67759: GREATER
67760: IFFALSE 67776
// r := r / 2 ;
67762: LD_ADDR_VAR 0 7
67766: PUSH
67767: LD_VAR 0 7
67771: PUSH
67772: LD_INT 2
67774: DIVREAL
67775: ST_TO_ADDR
// time := time / r ;
67776: LD_ADDR_VAR 0 8
67780: PUSH
67781: LD_VAR 0 8
67785: PUSH
67786: LD_VAR 0 7
67790: DIVREAL
67791: ST_TO_ADDR
// if time < 0 then
67792: LD_VAR 0 8
67796: PUSH
67797: LD_INT 0
67799: LESS
67800: IFFALSE 67817
// time := time * - 1 ;
67802: LD_ADDR_VAR 0 8
67806: PUSH
67807: LD_VAR 0 8
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: MUL
67816: ST_TO_ADDR
// wait ( time ) ;
67817: LD_VAR 0 8
67821: PPUSH
67822: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67826: LD_INT 35
67828: PPUSH
67829: LD_INT 875
67831: PPUSH
67832: CALL_OW 12
67836: PPUSH
67837: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67841: LD_INT 1
67843: PPUSH
67844: LD_INT 5
67846: PPUSH
67847: CALL_OW 12
67851: PPUSH
67852: LD_VAR 0 1
67856: PPUSH
67857: LD_INT 1
67859: PPUSH
67860: CALL_OW 55
// end ;
67864: GO 67674
// end ;
67866: LD_VAR 0 5
67870: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67871: LD_INT 0
67873: PPUSH
67874: PPUSH
67875: PPUSH
67876: PPUSH
67877: PPUSH
67878: PPUSH
67879: PPUSH
67880: PPUSH
// if not turrets or not factories then
67881: LD_VAR 0 1
67885: NOT
67886: PUSH
67887: LD_VAR 0 2
67891: NOT
67892: OR
67893: IFFALSE 67897
// exit ;
67895: GO 68204
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67897: LD_ADDR_VAR 0 10
67901: PUSH
67902: LD_INT 5
67904: PUSH
67905: LD_INT 6
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 2
67914: PUSH
67915: LD_INT 4
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 3
67924: PUSH
67925: LD_INT 5
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 24
67939: PUSH
67940: LD_INT 25
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 23
67949: PUSH
67950: LD_INT 27
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 42
67963: PUSH
67964: LD_INT 43
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 44
67973: PUSH
67974: LD_INT 46
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 45
67983: PUSH
67984: LD_INT 47
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: LIST
68000: ST_TO_ADDR
// result := [ ] ;
68001: LD_ADDR_VAR 0 3
68005: PUSH
68006: EMPTY
68007: ST_TO_ADDR
// for i in turrets do
68008: LD_ADDR_VAR 0 4
68012: PUSH
68013: LD_VAR 0 1
68017: PUSH
68018: FOR_IN
68019: IFFALSE 68202
// begin nat := GetNation ( i ) ;
68021: LD_ADDR_VAR 0 7
68025: PUSH
68026: LD_VAR 0 4
68030: PPUSH
68031: CALL_OW 248
68035: ST_TO_ADDR
// weapon := 0 ;
68036: LD_ADDR_VAR 0 8
68040: PUSH
68041: LD_INT 0
68043: ST_TO_ADDR
// if not nat then
68044: LD_VAR 0 7
68048: NOT
68049: IFFALSE 68053
// continue ;
68051: GO 68018
// for j in list [ nat ] do
68053: LD_ADDR_VAR 0 5
68057: PUSH
68058: LD_VAR 0 10
68062: PUSH
68063: LD_VAR 0 7
68067: ARRAY
68068: PUSH
68069: FOR_IN
68070: IFFALSE 68111
// if GetBWeapon ( i ) = j [ 1 ] then
68072: LD_VAR 0 4
68076: PPUSH
68077: CALL_OW 269
68081: PUSH
68082: LD_VAR 0 5
68086: PUSH
68087: LD_INT 1
68089: ARRAY
68090: EQUAL
68091: IFFALSE 68109
// begin weapon := j [ 2 ] ;
68093: LD_ADDR_VAR 0 8
68097: PUSH
68098: LD_VAR 0 5
68102: PUSH
68103: LD_INT 2
68105: ARRAY
68106: ST_TO_ADDR
// break ;
68107: GO 68111
// end ;
68109: GO 68069
68111: POP
68112: POP
// if not weapon then
68113: LD_VAR 0 8
68117: NOT
68118: IFFALSE 68122
// continue ;
68120: GO 68018
// for k in factories do
68122: LD_ADDR_VAR 0 6
68126: PUSH
68127: LD_VAR 0 2
68131: PUSH
68132: FOR_IN
68133: IFFALSE 68198
// begin weapons := AvailableWeaponList ( k ) ;
68135: LD_ADDR_VAR 0 9
68139: PUSH
68140: LD_VAR 0 6
68144: PPUSH
68145: CALL_OW 478
68149: ST_TO_ADDR
// if not weapons then
68150: LD_VAR 0 9
68154: NOT
68155: IFFALSE 68159
// continue ;
68157: GO 68132
// if weapon in weapons then
68159: LD_VAR 0 8
68163: PUSH
68164: LD_VAR 0 9
68168: IN
68169: IFFALSE 68196
// begin result := [ i , weapon ] ;
68171: LD_ADDR_VAR 0 3
68175: PUSH
68176: LD_VAR 0 4
68180: PUSH
68181: LD_VAR 0 8
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: ST_TO_ADDR
// exit ;
68190: POP
68191: POP
68192: POP
68193: POP
68194: GO 68204
// end ; end ;
68196: GO 68132
68198: POP
68199: POP
// end ;
68200: GO 68018
68202: POP
68203: POP
// end ;
68204: LD_VAR 0 3
68208: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68209: LD_INT 0
68211: PPUSH
// if not side or side > 8 then
68212: LD_VAR 0 3
68216: NOT
68217: PUSH
68218: LD_VAR 0 3
68222: PUSH
68223: LD_INT 8
68225: GREATER
68226: OR
68227: IFFALSE 68231
// exit ;
68229: GO 68290
// if not range then
68231: LD_VAR 0 4
68235: NOT
68236: IFFALSE 68247
// range := - 12 ;
68238: LD_ADDR_VAR 0 4
68242: PUSH
68243: LD_INT 12
68245: NEG
68246: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68247: LD_VAR 0 1
68251: PPUSH
68252: LD_VAR 0 2
68256: PPUSH
68257: LD_VAR 0 3
68261: PPUSH
68262: LD_VAR 0 4
68266: PPUSH
68267: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68271: LD_VAR 0 1
68275: PPUSH
68276: LD_VAR 0 2
68280: PPUSH
68281: LD_VAR 0 3
68285: PPUSH
68286: CALL_OW 331
// end ;
68290: LD_VAR 0 5
68294: RET
// export function Video ( mode ) ; begin
68295: LD_INT 0
68297: PPUSH
// ingame_video = mode ;
68298: LD_ADDR_OWVAR 52
68302: PUSH
68303: LD_VAR 0 1
68307: ST_TO_ADDR
// interface_hidden = mode ;
68308: LD_ADDR_OWVAR 54
68312: PUSH
68313: LD_VAR 0 1
68317: ST_TO_ADDR
// end ;
68318: LD_VAR 0 2
68322: RET
// export function Join ( array , element ) ; begin
68323: LD_INT 0
68325: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68326: LD_ADDR_VAR 0 3
68330: PUSH
68331: LD_VAR 0 1
68335: PPUSH
68336: LD_VAR 0 1
68340: PUSH
68341: LD_INT 1
68343: PLUS
68344: PPUSH
68345: LD_VAR 0 2
68349: PPUSH
68350: CALL_OW 1
68354: ST_TO_ADDR
// end ;
68355: LD_VAR 0 3
68359: RET
// export function JoinUnion ( array , element ) ; begin
68360: LD_INT 0
68362: PPUSH
// result := array union element ;
68363: LD_ADDR_VAR 0 3
68367: PUSH
68368: LD_VAR 0 1
68372: PUSH
68373: LD_VAR 0 2
68377: UNION
68378: ST_TO_ADDR
// end ;
68379: LD_VAR 0 3
68383: RET
// export function GetBehemoths ( side ) ; begin
68384: LD_INT 0
68386: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68387: LD_ADDR_VAR 0 2
68391: PUSH
68392: LD_INT 22
68394: PUSH
68395: LD_VAR 0 1
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 31
68406: PUSH
68407: LD_INT 25
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PPUSH
68418: CALL_OW 69
68422: ST_TO_ADDR
// end ;
68423: LD_VAR 0 2
68427: RET
// export function Shuffle ( array ) ; var i , index ; begin
68428: LD_INT 0
68430: PPUSH
68431: PPUSH
68432: PPUSH
// result := [ ] ;
68433: LD_ADDR_VAR 0 2
68437: PUSH
68438: EMPTY
68439: ST_TO_ADDR
// if not array then
68440: LD_VAR 0 1
68444: NOT
68445: IFFALSE 68449
// exit ;
68447: GO 68548
// Randomize ;
68449: CALL_OW 10
// for i = array downto 1 do
68453: LD_ADDR_VAR 0 3
68457: PUSH
68458: DOUBLE
68459: LD_VAR 0 1
68463: INC
68464: ST_TO_ADDR
68465: LD_INT 1
68467: PUSH
68468: FOR_DOWNTO
68469: IFFALSE 68546
// begin index := rand ( 1 , array ) ;
68471: LD_ADDR_VAR 0 4
68475: PUSH
68476: LD_INT 1
68478: PPUSH
68479: LD_VAR 0 1
68483: PPUSH
68484: CALL_OW 12
68488: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68489: LD_ADDR_VAR 0 2
68493: PUSH
68494: LD_VAR 0 2
68498: PPUSH
68499: LD_VAR 0 2
68503: PUSH
68504: LD_INT 1
68506: PLUS
68507: PPUSH
68508: LD_VAR 0 1
68512: PUSH
68513: LD_VAR 0 4
68517: ARRAY
68518: PPUSH
68519: CALL_OW 2
68523: ST_TO_ADDR
// array := Delete ( array , index ) ;
68524: LD_ADDR_VAR 0 1
68528: PUSH
68529: LD_VAR 0 1
68533: PPUSH
68534: LD_VAR 0 4
68538: PPUSH
68539: CALL_OW 3
68543: ST_TO_ADDR
// end ;
68544: GO 68468
68546: POP
68547: POP
// end ;
68548: LD_VAR 0 2
68552: RET
// export function GetBaseMaterials ( base ) ; begin
68553: LD_INT 0
68555: PPUSH
// result := [ 0 , 0 , 0 ] ;
68556: LD_ADDR_VAR 0 2
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: LD_INT 0
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// if not base then
68575: LD_VAR 0 1
68579: NOT
68580: IFFALSE 68584
// exit ;
68582: GO 68633
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68584: LD_ADDR_VAR 0 2
68588: PUSH
68589: LD_VAR 0 1
68593: PPUSH
68594: LD_INT 1
68596: PPUSH
68597: CALL_OW 275
68601: PUSH
68602: LD_VAR 0 1
68606: PPUSH
68607: LD_INT 2
68609: PPUSH
68610: CALL_OW 275
68614: PUSH
68615: LD_VAR 0 1
68619: PPUSH
68620: LD_INT 3
68622: PPUSH
68623: CALL_OW 275
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: ST_TO_ADDR
// end ;
68633: LD_VAR 0 2
68637: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68638: LD_INT 0
68640: PPUSH
68641: PPUSH
// result := array ;
68642: LD_ADDR_VAR 0 3
68646: PUSH
68647: LD_VAR 0 1
68651: ST_TO_ADDR
// if size > 0 then
68652: LD_VAR 0 2
68656: PUSH
68657: LD_INT 0
68659: GREATER
68660: IFFALSE 68706
// for i := array downto size do
68662: LD_ADDR_VAR 0 4
68666: PUSH
68667: DOUBLE
68668: LD_VAR 0 1
68672: INC
68673: ST_TO_ADDR
68674: LD_VAR 0 2
68678: PUSH
68679: FOR_DOWNTO
68680: IFFALSE 68704
// result := Delete ( result , result ) ;
68682: LD_ADDR_VAR 0 3
68686: PUSH
68687: LD_VAR 0 3
68691: PPUSH
68692: LD_VAR 0 3
68696: PPUSH
68697: CALL_OW 3
68701: ST_TO_ADDR
68702: GO 68679
68704: POP
68705: POP
// end ;
68706: LD_VAR 0 3
68710: RET
// export function ComExit ( unit ) ; var tmp ; begin
68711: LD_INT 0
68713: PPUSH
68714: PPUSH
// if not IsInUnit ( unit ) then
68715: LD_VAR 0 1
68719: PPUSH
68720: CALL_OW 310
68724: NOT
68725: IFFALSE 68729
// exit ;
68727: GO 68789
// tmp := IsInUnit ( unit ) ;
68729: LD_ADDR_VAR 0 3
68733: PUSH
68734: LD_VAR 0 1
68738: PPUSH
68739: CALL_OW 310
68743: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68744: LD_VAR 0 3
68748: PPUSH
68749: CALL_OW 247
68753: PUSH
68754: LD_INT 2
68756: EQUAL
68757: IFFALSE 68770
// ComExitVehicle ( unit ) else
68759: LD_VAR 0 1
68763: PPUSH
68764: CALL_OW 121
68768: GO 68779
// ComExitBuilding ( unit ) ;
68770: LD_VAR 0 1
68774: PPUSH
68775: CALL_OW 122
// result := tmp ;
68779: LD_ADDR_VAR 0 2
68783: PUSH
68784: LD_VAR 0 3
68788: ST_TO_ADDR
// end ;
68789: LD_VAR 0 2
68793: RET
// export function ComExitAll ( units ) ; var i ; begin
68794: LD_INT 0
68796: PPUSH
68797: PPUSH
// if not units then
68798: LD_VAR 0 1
68802: NOT
68803: IFFALSE 68807
// exit ;
68805: GO 68833
// for i in units do
68807: LD_ADDR_VAR 0 3
68811: PUSH
68812: LD_VAR 0 1
68816: PUSH
68817: FOR_IN
68818: IFFALSE 68831
// ComExit ( i ) ;
68820: LD_VAR 0 3
68824: PPUSH
68825: CALL 68711 0 1
68829: GO 68817
68831: POP
68832: POP
// end ;
68833: LD_VAR 0 2
68837: RET
// export function ResetHc ; begin
68838: LD_INT 0
68840: PPUSH
// InitHc ;
68841: CALL_OW 19
// hc_importance := 0 ;
68845: LD_ADDR_OWVAR 32
68849: PUSH
68850: LD_INT 0
68852: ST_TO_ADDR
// end ;
68853: LD_VAR 0 1
68857: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68858: LD_INT 0
68860: PPUSH
68861: PPUSH
68862: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68863: LD_ADDR_VAR 0 6
68867: PUSH
68868: LD_VAR 0 1
68872: PUSH
68873: LD_VAR 0 3
68877: PLUS
68878: PUSH
68879: LD_INT 2
68881: DIV
68882: ST_TO_ADDR
// if _x < 0 then
68883: LD_VAR 0 6
68887: PUSH
68888: LD_INT 0
68890: LESS
68891: IFFALSE 68908
// _x := _x * - 1 ;
68893: LD_ADDR_VAR 0 6
68897: PUSH
68898: LD_VAR 0 6
68902: PUSH
68903: LD_INT 1
68905: NEG
68906: MUL
68907: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68908: LD_ADDR_VAR 0 7
68912: PUSH
68913: LD_VAR 0 2
68917: PUSH
68918: LD_VAR 0 4
68922: PLUS
68923: PUSH
68924: LD_INT 2
68926: DIV
68927: ST_TO_ADDR
// if _y < 0 then
68928: LD_VAR 0 7
68932: PUSH
68933: LD_INT 0
68935: LESS
68936: IFFALSE 68953
// _y := _y * - 1 ;
68938: LD_ADDR_VAR 0 7
68942: PUSH
68943: LD_VAR 0 7
68947: PUSH
68948: LD_INT 1
68950: NEG
68951: MUL
68952: ST_TO_ADDR
// result := [ _x , _y ] ;
68953: LD_ADDR_VAR 0 5
68957: PUSH
68958: LD_VAR 0 6
68962: PUSH
68963: LD_VAR 0 7
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: ST_TO_ADDR
// end ;
68972: LD_VAR 0 5
68976: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68977: LD_INT 0
68979: PPUSH
68980: PPUSH
68981: PPUSH
68982: PPUSH
// task := GetTaskList ( unit ) ;
68983: LD_ADDR_VAR 0 7
68987: PUSH
68988: LD_VAR 0 1
68992: PPUSH
68993: CALL_OW 437
68997: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68998: LD_VAR 0 7
69002: NOT
69003: PUSH
69004: LD_VAR 0 1
69008: PPUSH
69009: LD_VAR 0 2
69013: PPUSH
69014: CALL_OW 308
69018: NOT
69019: AND
69020: IFFALSE 69024
// exit ;
69022: GO 69142
// if IsInArea ( unit , area ) then
69024: LD_VAR 0 1
69028: PPUSH
69029: LD_VAR 0 2
69033: PPUSH
69034: CALL_OW 308
69038: IFFALSE 69056
// begin ComMoveToArea ( unit , goAway ) ;
69040: LD_VAR 0 1
69044: PPUSH
69045: LD_VAR 0 3
69049: PPUSH
69050: CALL_OW 113
// exit ;
69054: GO 69142
// end ; if task [ 1 ] [ 1 ] <> M then
69056: LD_VAR 0 7
69060: PUSH
69061: LD_INT 1
69063: ARRAY
69064: PUSH
69065: LD_INT 1
69067: ARRAY
69068: PUSH
69069: LD_STRING M
69071: NONEQUAL
69072: IFFALSE 69076
// exit ;
69074: GO 69142
// x := task [ 1 ] [ 2 ] ;
69076: LD_ADDR_VAR 0 5
69080: PUSH
69081: LD_VAR 0 7
69085: PUSH
69086: LD_INT 1
69088: ARRAY
69089: PUSH
69090: LD_INT 2
69092: ARRAY
69093: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69094: LD_ADDR_VAR 0 6
69098: PUSH
69099: LD_VAR 0 7
69103: PUSH
69104: LD_INT 1
69106: ARRAY
69107: PUSH
69108: LD_INT 3
69110: ARRAY
69111: ST_TO_ADDR
// if InArea ( x , y , area ) then
69112: LD_VAR 0 5
69116: PPUSH
69117: LD_VAR 0 6
69121: PPUSH
69122: LD_VAR 0 2
69126: PPUSH
69127: CALL_OW 309
69131: IFFALSE 69142
// ComStop ( unit ) ;
69133: LD_VAR 0 1
69137: PPUSH
69138: CALL_OW 141
// end ;
69142: LD_VAR 0 4
69146: RET
// export function Abs ( value ) ; begin
69147: LD_INT 0
69149: PPUSH
// result := value ;
69150: LD_ADDR_VAR 0 2
69154: PUSH
69155: LD_VAR 0 1
69159: ST_TO_ADDR
// if value < 0 then
69160: LD_VAR 0 1
69164: PUSH
69165: LD_INT 0
69167: LESS
69168: IFFALSE 69185
// result := value * - 1 ;
69170: LD_ADDR_VAR 0 2
69174: PUSH
69175: LD_VAR 0 1
69179: PUSH
69180: LD_INT 1
69182: NEG
69183: MUL
69184: ST_TO_ADDR
// end ;
69185: LD_VAR 0 2
69189: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69190: LD_INT 0
69192: PPUSH
69193: PPUSH
69194: PPUSH
69195: PPUSH
69196: PPUSH
69197: PPUSH
69198: PPUSH
69199: PPUSH
// if not unit or not building then
69200: LD_VAR 0 1
69204: NOT
69205: PUSH
69206: LD_VAR 0 2
69210: NOT
69211: OR
69212: IFFALSE 69216
// exit ;
69214: GO 69442
// x := GetX ( building ) ;
69216: LD_ADDR_VAR 0 4
69220: PUSH
69221: LD_VAR 0 2
69225: PPUSH
69226: CALL_OW 250
69230: ST_TO_ADDR
// y := GetY ( building ) ;
69231: LD_ADDR_VAR 0 6
69235: PUSH
69236: LD_VAR 0 2
69240: PPUSH
69241: CALL_OW 251
69245: ST_TO_ADDR
// d := GetDir ( building ) ;
69246: LD_ADDR_VAR 0 8
69250: PUSH
69251: LD_VAR 0 2
69255: PPUSH
69256: CALL_OW 254
69260: ST_TO_ADDR
// r := 4 ;
69261: LD_ADDR_VAR 0 9
69265: PUSH
69266: LD_INT 4
69268: ST_TO_ADDR
// for i := 1 to 5 do
69269: LD_ADDR_VAR 0 10
69273: PUSH
69274: DOUBLE
69275: LD_INT 1
69277: DEC
69278: ST_TO_ADDR
69279: LD_INT 5
69281: PUSH
69282: FOR_TO
69283: IFFALSE 69440
// begin _x := ShiftX ( x , d , r + i ) ;
69285: LD_ADDR_VAR 0 5
69289: PUSH
69290: LD_VAR 0 4
69294: PPUSH
69295: LD_VAR 0 8
69299: PPUSH
69300: LD_VAR 0 9
69304: PUSH
69305: LD_VAR 0 10
69309: PLUS
69310: PPUSH
69311: CALL_OW 272
69315: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69316: LD_ADDR_VAR 0 7
69320: PUSH
69321: LD_VAR 0 6
69325: PPUSH
69326: LD_VAR 0 8
69330: PPUSH
69331: LD_VAR 0 9
69335: PUSH
69336: LD_VAR 0 10
69340: PLUS
69341: PPUSH
69342: CALL_OW 273
69346: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69347: LD_VAR 0 5
69351: PPUSH
69352: LD_VAR 0 7
69356: PPUSH
69357: CALL_OW 488
69361: PUSH
69362: LD_VAR 0 5
69366: PPUSH
69367: LD_VAR 0 7
69371: PPUSH
69372: CALL_OW 428
69376: PPUSH
69377: CALL_OW 247
69381: PUSH
69382: LD_INT 3
69384: PUSH
69385: LD_INT 2
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: IN
69392: NOT
69393: AND
69394: IFFALSE 69438
// begin ComMoveXY ( unit , _x , _y ) ;
69396: LD_VAR 0 1
69400: PPUSH
69401: LD_VAR 0 5
69405: PPUSH
69406: LD_VAR 0 7
69410: PPUSH
69411: CALL_OW 111
// result := [ _x , _y ] ;
69415: LD_ADDR_VAR 0 3
69419: PUSH
69420: LD_VAR 0 5
69424: PUSH
69425: LD_VAR 0 7
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: ST_TO_ADDR
// exit ;
69434: POP
69435: POP
69436: GO 69442
// end ; end ;
69438: GO 69282
69440: POP
69441: POP
// end ;
69442: LD_VAR 0 3
69446: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69447: LD_INT 0
69449: PPUSH
69450: PPUSH
69451: PPUSH
// result := 0 ;
69452: LD_ADDR_VAR 0 3
69456: PUSH
69457: LD_INT 0
69459: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69460: LD_VAR 0 1
69464: PUSH
69465: LD_INT 0
69467: LESS
69468: PUSH
69469: LD_VAR 0 1
69473: PUSH
69474: LD_INT 8
69476: GREATER
69477: OR
69478: PUSH
69479: LD_VAR 0 2
69483: PUSH
69484: LD_INT 0
69486: LESS
69487: OR
69488: PUSH
69489: LD_VAR 0 2
69493: PUSH
69494: LD_INT 8
69496: GREATER
69497: OR
69498: IFFALSE 69502
// exit ;
69500: GO 69577
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69502: LD_ADDR_VAR 0 4
69506: PUSH
69507: LD_INT 22
69509: PUSH
69510: LD_VAR 0 2
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PPUSH
69519: CALL_OW 69
69523: PUSH
69524: FOR_IN
69525: IFFALSE 69575
// begin un := UnitShoot ( i ) ;
69527: LD_ADDR_VAR 0 5
69531: PUSH
69532: LD_VAR 0 4
69536: PPUSH
69537: CALL_OW 504
69541: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69542: LD_VAR 0 5
69546: PPUSH
69547: CALL_OW 255
69551: PUSH
69552: LD_VAR 0 1
69556: EQUAL
69557: IFFALSE 69573
// begin result := un ;
69559: LD_ADDR_VAR 0 3
69563: PUSH
69564: LD_VAR 0 5
69568: ST_TO_ADDR
// exit ;
69569: POP
69570: POP
69571: GO 69577
// end ; end ;
69573: GO 69524
69575: POP
69576: POP
// end ;
69577: LD_VAR 0 3
69581: RET
// export function GetCargoBay ( units ) ; begin
69582: LD_INT 0
69584: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69585: LD_ADDR_VAR 0 2
69589: PUSH
69590: LD_VAR 0 1
69594: PPUSH
69595: LD_INT 2
69597: PUSH
69598: LD_INT 34
69600: PUSH
69601: LD_INT 12
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 34
69610: PUSH
69611: LD_INT 51
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 34
69620: PUSH
69621: LD_INT 32
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 34
69630: PUSH
69631: LD_EXP 45
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: PPUSH
69647: CALL_OW 72
69651: ST_TO_ADDR
// end ;
69652: LD_VAR 0 2
69656: RET
// export function Negate ( value ) ; begin
69657: LD_INT 0
69659: PPUSH
// result := not value ;
69660: LD_ADDR_VAR 0 2
69664: PUSH
69665: LD_VAR 0 1
69669: NOT
69670: ST_TO_ADDR
// end ;
69671: LD_VAR 0 2
69675: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
69676: LD_INT 0
69678: PPUSH
// if x1 = x2 then
69679: LD_VAR 0 1
69683: PUSH
69684: LD_VAR 0 3
69688: EQUAL
69689: IFFALSE 69723
// begin if y1 > y2 then
69691: LD_VAR 0 2
69695: PUSH
69696: LD_VAR 0 4
69700: GREATER
69701: IFFALSE 69713
// result := 0 else
69703: LD_ADDR_VAR 0 5
69707: PUSH
69708: LD_INT 0
69710: ST_TO_ADDR
69711: GO 69721
// result := 3 ;
69713: LD_ADDR_VAR 0 5
69717: PUSH
69718: LD_INT 3
69720: ST_TO_ADDR
// exit ;
69721: GO 69809
// end ; if y1 = y2 then
69723: LD_VAR 0 2
69727: PUSH
69728: LD_VAR 0 4
69732: EQUAL
69733: IFFALSE 69767
// begin if x1 > x2 then
69735: LD_VAR 0 1
69739: PUSH
69740: LD_VAR 0 3
69744: GREATER
69745: IFFALSE 69757
// result := 1 else
69747: LD_ADDR_VAR 0 5
69751: PUSH
69752: LD_INT 1
69754: ST_TO_ADDR
69755: GO 69765
// result := 4 ;
69757: LD_ADDR_VAR 0 5
69761: PUSH
69762: LD_INT 4
69764: ST_TO_ADDR
// exit ;
69765: GO 69809
// end ; if x1 > x2 and y1 > y2 then
69767: LD_VAR 0 1
69771: PUSH
69772: LD_VAR 0 3
69776: GREATER
69777: PUSH
69778: LD_VAR 0 2
69782: PUSH
69783: LD_VAR 0 4
69787: GREATER
69788: AND
69789: IFFALSE 69801
// result := 2 else
69791: LD_ADDR_VAR 0 5
69795: PUSH
69796: LD_INT 2
69798: ST_TO_ADDR
69799: GO 69809
// result := 5 ;
69801: LD_ADDR_VAR 0 5
69805: PUSH
69806: LD_INT 5
69808: ST_TO_ADDR
// end ;
69809: LD_VAR 0 5
69813: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69814: LD_INT 0
69816: PPUSH
69817: PPUSH
// if not driver or not IsInUnit ( driver ) then
69818: LD_VAR 0 1
69822: NOT
69823: PUSH
69824: LD_VAR 0 1
69828: PPUSH
69829: CALL_OW 310
69833: NOT
69834: OR
69835: IFFALSE 69839
// exit ;
69837: GO 69929
// vehicle := IsInUnit ( driver ) ;
69839: LD_ADDR_VAR 0 3
69843: PUSH
69844: LD_VAR 0 1
69848: PPUSH
69849: CALL_OW 310
69853: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69854: LD_VAR 0 1
69858: PPUSH
69859: LD_STRING \
69861: PUSH
69862: LD_INT 0
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: LD_INT 0
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: PUSH
69889: LD_STRING E
69891: PUSH
69892: LD_INT 0
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: LD_VAR 0 3
69902: PUSH
69903: LD_INT 0
69905: PUSH
69906: LD_INT 0
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PPUSH
69925: CALL_OW 446
// end ;
69929: LD_VAR 0 2
69933: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69934: LD_INT 0
69936: PPUSH
69937: PPUSH
// if not driver or not IsInUnit ( driver ) then
69938: LD_VAR 0 1
69942: NOT
69943: PUSH
69944: LD_VAR 0 1
69948: PPUSH
69949: CALL_OW 310
69953: NOT
69954: OR
69955: IFFALSE 69959
// exit ;
69957: GO 70049
// vehicle := IsInUnit ( driver ) ;
69959: LD_ADDR_VAR 0 3
69963: PUSH
69964: LD_VAR 0 1
69968: PPUSH
69969: CALL_OW 310
69973: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69974: LD_VAR 0 1
69978: PPUSH
69979: LD_STRING \
69981: PUSH
69982: LD_INT 0
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: LD_INT 0
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: PUSH
70009: LD_STRING E
70011: PUSH
70012: LD_INT 0
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: LD_VAR 0 3
70022: PUSH
70023: LD_INT 0
70025: PUSH
70026: LD_INT 0
70028: PUSH
70029: LD_INT 0
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PPUSH
70045: CALL_OW 447
// end ;
70049: LD_VAR 0 2
70053: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70054: LD_INT 0
70056: PPUSH
70057: PPUSH
70058: PPUSH
// tmp := [ ] ;
70059: LD_ADDR_VAR 0 5
70063: PUSH
70064: EMPTY
70065: ST_TO_ADDR
// for i in units do
70066: LD_ADDR_VAR 0 4
70070: PUSH
70071: LD_VAR 0 1
70075: PUSH
70076: FOR_IN
70077: IFFALSE 70115
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70079: LD_ADDR_VAR 0 5
70083: PUSH
70084: LD_VAR 0 5
70088: PPUSH
70089: LD_VAR 0 5
70093: PUSH
70094: LD_INT 1
70096: PLUS
70097: PPUSH
70098: LD_VAR 0 4
70102: PPUSH
70103: CALL_OW 256
70107: PPUSH
70108: CALL_OW 2
70112: ST_TO_ADDR
70113: GO 70076
70115: POP
70116: POP
// if not tmp then
70117: LD_VAR 0 5
70121: NOT
70122: IFFALSE 70126
// exit ;
70124: GO 70174
// if asc then
70126: LD_VAR 0 2
70130: IFFALSE 70154
// result := SortListByListAsc ( units , tmp ) else
70132: LD_ADDR_VAR 0 3
70136: PUSH
70137: LD_VAR 0 1
70141: PPUSH
70142: LD_VAR 0 5
70146: PPUSH
70147: CALL_OW 76
70151: ST_TO_ADDR
70152: GO 70174
// result := SortListByListDesc ( units , tmp ) ;
70154: LD_ADDR_VAR 0 3
70158: PUSH
70159: LD_VAR 0 1
70163: PPUSH
70164: LD_VAR 0 5
70168: PPUSH
70169: CALL_OW 77
70173: ST_TO_ADDR
// end ;
70174: LD_VAR 0 3
70178: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70179: LD_INT 0
70181: PPUSH
70182: PPUSH
// task := GetTaskList ( mech ) ;
70183: LD_ADDR_VAR 0 4
70187: PUSH
70188: LD_VAR 0 1
70192: PPUSH
70193: CALL_OW 437
70197: ST_TO_ADDR
// if not task then
70198: LD_VAR 0 4
70202: NOT
70203: IFFALSE 70207
// exit ;
70205: GO 70249
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70207: LD_ADDR_VAR 0 3
70211: PUSH
70212: LD_VAR 0 4
70216: PUSH
70217: LD_INT 1
70219: ARRAY
70220: PUSH
70221: LD_INT 1
70223: ARRAY
70224: PUSH
70225: LD_STRING r
70227: EQUAL
70228: PUSH
70229: LD_VAR 0 4
70233: PUSH
70234: LD_INT 1
70236: ARRAY
70237: PUSH
70238: LD_INT 4
70240: ARRAY
70241: PUSH
70242: LD_VAR 0 2
70246: EQUAL
70247: AND
70248: ST_TO_ADDR
// end ;
70249: LD_VAR 0 3
70253: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70254: LD_INT 0
70256: PPUSH
// SetDir ( unit , d ) ;
70257: LD_VAR 0 1
70261: PPUSH
70262: LD_VAR 0 4
70266: PPUSH
70267: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70271: LD_VAR 0 1
70275: PPUSH
70276: LD_VAR 0 2
70280: PPUSH
70281: LD_VAR 0 3
70285: PPUSH
70286: LD_VAR 0 5
70290: PPUSH
70291: CALL_OW 48
// end ;
70295: LD_VAR 0 6
70299: RET
// export function ToNaturalNumber ( number ) ; begin
70300: LD_INT 0
70302: PPUSH
// result := number div 1 ;
70303: LD_ADDR_VAR 0 2
70307: PUSH
70308: LD_VAR 0 1
70312: PUSH
70313: LD_INT 1
70315: DIV
70316: ST_TO_ADDR
// if number < 0 then
70317: LD_VAR 0 1
70321: PUSH
70322: LD_INT 0
70324: LESS
70325: IFFALSE 70335
// result := 0 ;
70327: LD_ADDR_VAR 0 2
70331: PUSH
70332: LD_INT 0
70334: ST_TO_ADDR
// end ;
70335: LD_VAR 0 2
70339: RET
// export function SortByClass ( units , class ) ; var un ; begin
70340: LD_INT 0
70342: PPUSH
70343: PPUSH
// if not units or not class then
70344: LD_VAR 0 1
70348: NOT
70349: PUSH
70350: LD_VAR 0 2
70354: NOT
70355: OR
70356: IFFALSE 70360
// exit ;
70358: GO 70455
// result := [ ] ;
70360: LD_ADDR_VAR 0 3
70364: PUSH
70365: EMPTY
70366: ST_TO_ADDR
// for un in units do
70367: LD_ADDR_VAR 0 4
70371: PUSH
70372: LD_VAR 0 1
70376: PUSH
70377: FOR_IN
70378: IFFALSE 70453
// if GetClass ( un ) = class then
70380: LD_VAR 0 4
70384: PPUSH
70385: CALL_OW 257
70389: PUSH
70390: LD_VAR 0 2
70394: EQUAL
70395: IFFALSE 70422
// result := Insert ( result , 1 , un ) else
70397: LD_ADDR_VAR 0 3
70401: PUSH
70402: LD_VAR 0 3
70406: PPUSH
70407: LD_INT 1
70409: PPUSH
70410: LD_VAR 0 4
70414: PPUSH
70415: CALL_OW 2
70419: ST_TO_ADDR
70420: GO 70451
// result := Replace ( result , result + 1 , un ) ;
70422: LD_ADDR_VAR 0 3
70426: PUSH
70427: LD_VAR 0 3
70431: PPUSH
70432: LD_VAR 0 3
70436: PUSH
70437: LD_INT 1
70439: PLUS
70440: PPUSH
70441: LD_VAR 0 4
70445: PPUSH
70446: CALL_OW 1
70450: ST_TO_ADDR
70451: GO 70377
70453: POP
70454: POP
// end ;
70455: LD_VAR 0 3
70459: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70460: LD_INT 0
70462: PPUSH
70463: PPUSH
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
70468: PPUSH
// result := [ ] ;
70469: LD_ADDR_VAR 0 4
70473: PUSH
70474: EMPTY
70475: ST_TO_ADDR
// if x - r < 0 then
70476: LD_VAR 0 1
70480: PUSH
70481: LD_VAR 0 3
70485: MINUS
70486: PUSH
70487: LD_INT 0
70489: LESS
70490: IFFALSE 70502
// min_x := 0 else
70492: LD_ADDR_VAR 0 8
70496: PUSH
70497: LD_INT 0
70499: ST_TO_ADDR
70500: GO 70518
// min_x := x - r ;
70502: LD_ADDR_VAR 0 8
70506: PUSH
70507: LD_VAR 0 1
70511: PUSH
70512: LD_VAR 0 3
70516: MINUS
70517: ST_TO_ADDR
// if y - r < 0 then
70518: LD_VAR 0 2
70522: PUSH
70523: LD_VAR 0 3
70527: MINUS
70528: PUSH
70529: LD_INT 0
70531: LESS
70532: IFFALSE 70544
// min_y := 0 else
70534: LD_ADDR_VAR 0 7
70538: PUSH
70539: LD_INT 0
70541: ST_TO_ADDR
70542: GO 70560
// min_y := y - r ;
70544: LD_ADDR_VAR 0 7
70548: PUSH
70549: LD_VAR 0 2
70553: PUSH
70554: LD_VAR 0 3
70558: MINUS
70559: ST_TO_ADDR
// max_x := x + r ;
70560: LD_ADDR_VAR 0 9
70564: PUSH
70565: LD_VAR 0 1
70569: PUSH
70570: LD_VAR 0 3
70574: PLUS
70575: ST_TO_ADDR
// max_y := y + r ;
70576: LD_ADDR_VAR 0 10
70580: PUSH
70581: LD_VAR 0 2
70585: PUSH
70586: LD_VAR 0 3
70590: PLUS
70591: ST_TO_ADDR
// for _x = min_x to max_x do
70592: LD_ADDR_VAR 0 5
70596: PUSH
70597: DOUBLE
70598: LD_VAR 0 8
70602: DEC
70603: ST_TO_ADDR
70604: LD_VAR 0 9
70608: PUSH
70609: FOR_TO
70610: IFFALSE 70711
// for _y = min_y to max_y do
70612: LD_ADDR_VAR 0 6
70616: PUSH
70617: DOUBLE
70618: LD_VAR 0 7
70622: DEC
70623: ST_TO_ADDR
70624: LD_VAR 0 10
70628: PUSH
70629: FOR_TO
70630: IFFALSE 70707
// begin if not ValidHex ( _x , _y ) then
70632: LD_VAR 0 5
70636: PPUSH
70637: LD_VAR 0 6
70641: PPUSH
70642: CALL_OW 488
70646: NOT
70647: IFFALSE 70651
// continue ;
70649: GO 70629
// if GetResourceTypeXY ( _x , _y ) then
70651: LD_VAR 0 5
70655: PPUSH
70656: LD_VAR 0 6
70660: PPUSH
70661: CALL_OW 283
70665: IFFALSE 70705
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70667: LD_ADDR_VAR 0 4
70671: PUSH
70672: LD_VAR 0 4
70676: PPUSH
70677: LD_VAR 0 4
70681: PUSH
70682: LD_INT 1
70684: PLUS
70685: PPUSH
70686: LD_VAR 0 5
70690: PUSH
70691: LD_VAR 0 6
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PPUSH
70700: CALL_OW 1
70704: ST_TO_ADDR
// end ;
70705: GO 70629
70707: POP
70708: POP
70709: GO 70609
70711: POP
70712: POP
// end ;
70713: LD_VAR 0 4
70717: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
70718: LD_INT 0
70720: PPUSH
70721: PPUSH
70722: PPUSH
70723: PPUSH
70724: PPUSH
70725: PPUSH
// if not units then
70726: LD_VAR 0 1
70730: NOT
70731: IFFALSE 70735
// exit ;
70733: GO 71136
// result := UnitFilter ( units , [ f_ok ] ) ;
70735: LD_ADDR_VAR 0 3
70739: PUSH
70740: LD_VAR 0 1
70744: PPUSH
70745: LD_INT 50
70747: PUSH
70748: EMPTY
70749: LIST
70750: PPUSH
70751: CALL_OW 72
70755: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70756: LD_ADDR_VAR 0 7
70760: PUSH
70761: LD_VAR 0 1
70765: PUSH
70766: LD_INT 1
70768: ARRAY
70769: PPUSH
70770: CALL_OW 255
70774: ST_TO_ADDR
// if not result then
70775: LD_VAR 0 3
70779: NOT
70780: IFFALSE 70784
// exit ;
70782: GO 71136
// for i in result do
70784: LD_ADDR_VAR 0 4
70788: PUSH
70789: LD_VAR 0 3
70793: PUSH
70794: FOR_IN
70795: IFFALSE 71134
// begin tag := GetTag ( i ) + 1 ;
70797: LD_ADDR_VAR 0 8
70801: PUSH
70802: LD_VAR 0 4
70806: PPUSH
70807: CALL_OW 110
70811: PUSH
70812: LD_INT 1
70814: PLUS
70815: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70816: LD_ADDR_VAR 0 6
70820: PUSH
70821: LD_VAR 0 4
70825: PPUSH
70826: CALL_OW 250
70830: PPUSH
70831: LD_VAR 0 4
70835: PPUSH
70836: CALL_OW 251
70840: PPUSH
70841: LD_INT 6
70843: PPUSH
70844: CALL 70460 0 3
70848: ST_TO_ADDR
// if cr then
70849: LD_VAR 0 6
70853: IFFALSE 70892
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70855: LD_VAR 0 4
70859: PPUSH
70860: LD_VAR 0 6
70864: PUSH
70865: LD_INT 1
70867: ARRAY
70868: PUSH
70869: LD_INT 1
70871: ARRAY
70872: PPUSH
70873: LD_VAR 0 6
70877: PUSH
70878: LD_INT 1
70880: ARRAY
70881: PUSH
70882: LD_INT 2
70884: ARRAY
70885: PPUSH
70886: CALL_OW 116
70890: GO 71132
// if path > tag then
70892: LD_VAR 0 2
70896: PUSH
70897: LD_VAR 0 8
70901: GREATER
70902: IFFALSE 71080
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
70904: LD_ADDR_VAR 0 5
70908: PUSH
70909: LD_INT 81
70911: PUSH
70912: LD_VAR 0 7
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 91
70923: PUSH
70924: LD_VAR 0 4
70928: PUSH
70929: LD_INT 12
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PPUSH
70941: CALL_OW 69
70945: ST_TO_ADDR
// if enemy then
70946: LD_VAR 0 5
70950: IFFALSE 70978
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70952: LD_VAR 0 4
70956: PPUSH
70957: LD_VAR 0 5
70961: PPUSH
70962: LD_VAR 0 4
70966: PPUSH
70967: CALL_OW 74
70971: PPUSH
70972: CALL_OW 115
70976: GO 71078
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70978: LD_VAR 0 4
70982: PPUSH
70983: LD_VAR 0 2
70987: PUSH
70988: LD_VAR 0 8
70992: ARRAY
70993: PUSH
70994: LD_INT 1
70996: ARRAY
70997: PPUSH
70998: LD_VAR 0 2
71002: PUSH
71003: LD_VAR 0 8
71007: ARRAY
71008: PUSH
71009: LD_INT 2
71011: ARRAY
71012: PPUSH
71013: CALL_OW 297
71017: PUSH
71018: LD_INT 6
71020: GREATER
71021: IFFALSE 71064
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71023: LD_VAR 0 4
71027: PPUSH
71028: LD_VAR 0 2
71032: PUSH
71033: LD_VAR 0 8
71037: ARRAY
71038: PUSH
71039: LD_INT 1
71041: ARRAY
71042: PPUSH
71043: LD_VAR 0 2
71047: PUSH
71048: LD_VAR 0 8
71052: ARRAY
71053: PUSH
71054: LD_INT 2
71056: ARRAY
71057: PPUSH
71058: CALL_OW 114
71062: GO 71078
// SetTag ( i , tag ) ;
71064: LD_VAR 0 4
71068: PPUSH
71069: LD_VAR 0 8
71073: PPUSH
71074: CALL_OW 109
// end else
71078: GO 71132
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71080: LD_ADDR_VAR 0 5
71084: PUSH
71085: LD_INT 81
71087: PUSH
71088: LD_VAR 0 7
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PPUSH
71097: CALL_OW 69
71101: ST_TO_ADDR
// if enemy then
71102: LD_VAR 0 5
71106: IFFALSE 71132
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71108: LD_VAR 0 4
71112: PPUSH
71113: LD_VAR 0 5
71117: PPUSH
71118: LD_VAR 0 4
71122: PPUSH
71123: CALL_OW 74
71127: PPUSH
71128: CALL_OW 115
// end ; end ;
71132: GO 70794
71134: POP
71135: POP
// end ; end_of_file
71136: LD_VAR 0 3
71140: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71141: LD_VAR 0 1
71145: PUSH
71146: LD_INT 200
71148: DOUBLE
71149: GREATEREQUAL
71150: IFFALSE 71158
71152: LD_INT 299
71154: DOUBLE
71155: LESSEQUAL
71156: IFTRUE 71160
71158: GO 71192
71160: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71161: LD_VAR 0 1
71165: PPUSH
71166: LD_VAR 0 2
71170: PPUSH
71171: LD_VAR 0 3
71175: PPUSH
71176: LD_VAR 0 4
71180: PPUSH
71181: LD_VAR 0 5
71185: PPUSH
71186: CALL 14531 0 5
71190: GO 71269
71192: LD_INT 300
71194: DOUBLE
71195: GREATEREQUAL
71196: IFFALSE 71204
71198: LD_INT 399
71200: DOUBLE
71201: LESSEQUAL
71202: IFTRUE 71206
71204: GO 71268
71206: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71207: LD_VAR 0 1
71211: PPUSH
71212: LD_VAR 0 2
71216: PPUSH
71217: LD_VAR 0 3
71221: PPUSH
71222: LD_VAR 0 4
71226: PPUSH
71227: LD_VAR 0 5
71231: PPUSH
71232: LD_VAR 0 6
71236: PPUSH
71237: LD_VAR 0 7
71241: PPUSH
71242: LD_VAR 0 8
71246: PPUSH
71247: LD_VAR 0 9
71251: PPUSH
71252: LD_VAR 0 10
71256: PPUSH
71257: LD_VAR 0 11
71261: PPUSH
71262: CALL 29606 0 11
71266: GO 71269
71268: POP
// end ;
71269: PPOPN 11
71271: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71272: LD_VAR 0 1
71276: PPUSH
71277: LD_VAR 0 2
71281: PPUSH
71282: LD_VAR 0 3
71286: PPUSH
71287: LD_VAR 0 4
71291: PPUSH
71292: LD_VAR 0 5
71296: PPUSH
71297: CALL 14513 0 5
// end ; end_of_file
71301: PPOPN 5
71303: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71304: LD_VAR 0 1
71308: PPUSH
71309: LD_VAR 0 2
71313: PPUSH
71314: LD_VAR 0 3
71318: PPUSH
71319: LD_VAR 0 4
71323: PPUSH
71324: LD_VAR 0 5
71328: PPUSH
71329: LD_VAR 0 6
71333: PPUSH
71334: CALL 18414 0 6
// end ;
71338: PPOPN 6
71340: END
