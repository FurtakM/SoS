// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 752 0 2
// PrepareArabian ;
  31: CALL 1369 0 0
// PrepareRussian ;
  35: CALL 3020 0 0
// Action ;
  39: CALL 8440 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// solar_recharge_amount := 0 ;
 262: LD_ADDR_OWVAR 82
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// end ;
 270: LD_VAR 0 1
 274: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 275: LD_EXP 10
 279: NOT
 280: PUSH
 281: LD_EXP 9
 285: NOT
 286: AND
 287: PUSH
 288: LD_EXP 39
 292: NOT
 293: AND
 294: PUSH
 295: LD_EXP 40
 299: NOT
 300: AND
 301: IFFALSE 313
 303: GO 305
 305: DISABLE
// SetAchievement ( ACH_EXT ) ;
 306: LD_STRING ACH_EXT
 308: PPUSH
 309: CALL_OW 543
 313: END
// every 0 0$1 trigger captureCounter >= 6 do
 314: LD_EXP 18
 318: PUSH
 319: LD_INT 6
 321: GREATEREQUAL
 322: IFFALSE 334
 324: GO 326
 326: DISABLE
// SetAchievement ( ACH_KEY ) ;
 327: LD_STRING ACH_KEY
 329: PPUSH
 330: CALL_OW 543
 334: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 335: LD_EXP 19
 339: PUSH
 340: LD_INT 3
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 348: LD_STRING ACH_CHEM
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger debug do var i ;
 356: LD_EXP 1
 360: IFFALSE 444
 362: GO 364
 364: DISABLE
 365: LD_INT 0
 367: PPUSH
// begin enable ;
 368: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 369: LD_ADDR_VAR 0 1
 373: PUSH
 374: LD_INT 22
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 3
 386: PUSH
 387: LD_INT 21
 389: PUSH
 390: LD_INT 3
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 442
// if GetLives ( i ) < 1000 then
 413: LD_VAR 0 1
 417: PPUSH
 418: CALL_OW 256
 422: PUSH
 423: LD_INT 1000
 425: LESS
 426: IFFALSE 440
// SetLives ( i , 1000 ) ;
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_INT 1000
 435: PPUSH
 436: CALL_OW 234
 440: GO 410
 442: POP
 443: POP
// end ; end_of_file
 444: PPOPN 1
 446: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 447: LD_INT 0
 449: PPUSH
// uc_side := side ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_VAR 0 1
 459: ST_TO_ADDR
// uc_nation := nation ;
 460: LD_ADDR_OWVAR 21
 464: PUSH
 465: LD_VAR 0 2
 469: ST_TO_ADDR
// vc_chassis := chassis ;
 470: LD_ADDR_OWVAR 37
 474: PUSH
 475: LD_VAR 0 3
 479: ST_TO_ADDR
// vc_engine := engine ;
 480: LD_ADDR_OWVAR 39
 484: PUSH
 485: LD_VAR 0 4
 489: ST_TO_ADDR
// vc_control := control ;
 490: LD_ADDR_OWVAR 38
 494: PUSH
 495: LD_VAR 0 5
 499: ST_TO_ADDR
// vc_weapon := weapon ;
 500: LD_ADDR_OWVAR 40
 504: PUSH
 505: LD_VAR 0 6
 509: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 510: LD_ADDR_OWVAR 41
 514: PUSH
 515: LD_VAR 0 7
 519: ST_TO_ADDR
// result := CreateVehicle ;
 520: LD_ADDR_VAR 0 8
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// end ;
 530: LD_VAR 0 8
 534: RET
// export function SayX ( units , ident ) ; var i ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
// result := false ;
 539: LD_ADDR_VAR 0 3
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// if not units then
 547: LD_VAR 0 1
 551: NOT
 552: IFFALSE 556
// exit ;
 554: GO 610
// for i in units do
 556: LD_ADDR_VAR 0 4
 560: PUSH
 561: LD_VAR 0 1
 565: PUSH
 566: FOR_IN
 567: IFFALSE 608
// if IsOk ( i ) then
 569: LD_VAR 0 4
 573: PPUSH
 574: CALL_OW 302
 578: IFFALSE 606
// begin Say ( i , ident ) ;
 580: LD_VAR 0 4
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 88
// result := i ;
 594: LD_ADDR_VAR 0 3
 598: PUSH
 599: LD_VAR 0 4
 603: ST_TO_ADDR
// break ;
 604: GO 608
// end ;
 606: GO 566
 608: POP
 609: POP
// end ;
 610: LD_VAR 0 3
 614: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 615: LD_INT 0
 617: PPUSH
 618: PPUSH
// InitUc ;
 619: CALL_OW 18
// InitHc ;
 623: CALL_OW 19
// uc_side := 0 ;
 627: LD_ADDR_OWVAR 20
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// uc_nation := 0 ;
 635: LD_ADDR_OWVAR 21
 639: PUSH
 640: LD_INT 0
 642: ST_TO_ADDR
// for i = 1 to amount do
 643: LD_ADDR_VAR 0 4
 647: PUSH
 648: DOUBLE
 649: LD_INT 1
 651: DEC
 652: ST_TO_ADDR
 653: LD_VAR 0 2
 657: PUSH
 658: FOR_TO
 659: IFFALSE 741
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 661: LD_ADDR_OWVAR 29
 665: PUSH
 666: LD_INT 9
 668: PPUSH
 669: LD_INT 12
 671: PPUSH
 672: CALL_OW 12
 676: PUSH
 677: LD_INT 9
 679: PPUSH
 680: LD_INT 12
 682: PPUSH
 683: CALL_OW 12
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 692: LD_ADDR_OWVAR 35
 696: PUSH
 697: LD_INT 1
 699: NEG
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL_OW 12
 708: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 12
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 722: CALL_OW 44
 726: PPUSH
 727: LD_VAR 0 1
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL_OW 49
// end ;
 739: GO 658
 741: POP
 742: POP
// InitHc ;
 743: CALL_OW 19
// end ;
 747: LD_VAR 0 3
 751: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 752: LD_INT 0
 754: PPUSH
 755: PPUSH
// uc_side := 0 ;
 756: LD_ADDR_OWVAR 20
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// uc_nation := 0 ;
 764: LD_ADDR_OWVAR 21
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// for i := 1 to 3 do
 772: LD_ADDR_VAR 0 4
 776: PUSH
 777: DOUBLE
 778: LD_INT 1
 780: DEC
 781: ST_TO_ADDR
 782: LD_INT 3
 784: PUSH
 785: FOR_TO
 786: IFFALSE 823
// begin hc_class := 21 ;
 788: LD_ADDR_OWVAR 28
 792: PUSH
 793: LD_INT 21
 795: ST_TO_ADDR
// hc_gallery :=  ;
 796: LD_ADDR_OWVAR 33
 800: PUSH
 801: LD_STRING 
 803: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 804: CALL_OW 44
 808: PPUSH
 809: LD_VAR 0 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 785
 823: POP
 824: POP
// for i := 1 to 3 do
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: DOUBLE
 831: LD_INT 1
 833: DEC
 834: ST_TO_ADDR
 835: LD_INT 3
 837: PUSH
 838: FOR_TO
 839: IFFALSE 876
// begin hc_class := 18 ;
 841: LD_ADDR_OWVAR 28
 845: PUSH
 846: LD_INT 18
 848: ST_TO_ADDR
// hc_gallery :=  ;
 849: LD_ADDR_OWVAR 33
 853: PUSH
 854: LD_STRING 
 856: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 857: CALL_OW 44
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// end ;
 874: GO 838
 876: POP
 877: POP
// for i := 1 to 3 do
 878: LD_ADDR_VAR 0 4
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 3
 890: PUSH
 891: FOR_TO
 892: IFFALSE 929
// begin hc_class := 13 ;
 894: LD_ADDR_OWVAR 28
 898: PUSH
 899: LD_INT 13
 901: ST_TO_ADDR
// hc_gallery :=  ;
 902: LD_ADDR_OWVAR 33
 906: PUSH
 907: LD_STRING 
 909: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 910: CALL_OW 44
 914: PPUSH
 915: LD_VAR 0 1
 919: PPUSH
 920: LD_INT 0
 922: PPUSH
 923: CALL_OW 49
// end ;
 927: GO 891
 929: POP
 930: POP
// for i := 1 to 4 do
 931: LD_ADDR_VAR 0 4
 935: PUSH
 936: DOUBLE
 937: LD_INT 1
 939: DEC
 940: ST_TO_ADDR
 941: LD_INT 4
 943: PUSH
 944: FOR_TO
 945: IFFALSE 982
// begin hc_class := class_frog ;
 947: LD_ADDR_OWVAR 28
 951: PUSH
 952: LD_INT 19
 954: ST_TO_ADDR
// hc_gallery :=  ;
 955: LD_ADDR_OWVAR 33
 959: PUSH
 960: LD_STRING 
 962: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 963: CALL_OW 44
 967: PPUSH
 968: LD_VAR 0 2
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 49
// end ;
 980: GO 944
 982: POP
 983: POP
// end ;
 984: LD_VAR 0 3
 988: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
 993: PPUSH
// if not observer or not unit then
 994: LD_VAR 0 1
 998: NOT
 999: PUSH
1000: LD_VAR 0 2
1004: NOT
1005: OR
1006: IFFALSE 1010
// exit ;
1008: GO 1058
// if not See ( GetSide ( observer ) , unit ) then
1010: LD_VAR 0 1
1014: PPUSH
1015: CALL_OW 255
1019: PPUSH
1020: LD_VAR 0 2
1024: PPUSH
1025: CALL_OW 292
1029: NOT
1030: IFFALSE 1034
// exit ;
1032: GO 1058
// result := GetDistUnits ( observer , unit ) < 12 ;
1034: LD_ADDR_VAR 0 3
1038: PUSH
1039: LD_VAR 0 1
1043: PPUSH
1044: LD_VAR 0 2
1048: PPUSH
1049: CALL_OW 296
1053: PUSH
1054: LD_INT 12
1056: LESS
1057: ST_TO_ADDR
// end ;
1058: LD_VAR 0 3
1062: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1063: LD_INT 0
1065: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1066: LD_VAR 0 2
1070: PUSH
1071: LD_INT 1
1073: ARRAY
1074: PPUSH
1075: LD_VAR 0 2
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: CALL_OW 488
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 2
1102: PUSH
1103: LD_INT 2
1105: ARRAY
1106: PPUSH
1107: CALL_OW 428
1111: PUSH
1112: LD_INT 0
1114: EQUAL
1115: AND
1116: IFFALSE 1150
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1118: LD_VAR 0 1
1122: PPUSH
1123: LD_VAR 0 2
1127: PUSH
1128: LD_INT 1
1130: ARRAY
1131: PPUSH
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 3
1145: PPUSH
1146: CALL_OW 48
// end ;
1150: LD_VAR 0 4
1154: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1155: LD_INT 0
1157: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1158: LD_VAR 0 1
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1182: LD_VAR 0 1
1186: PPUSH
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_VAR 0 3
1196: PPUSH
1197: CALL_OW 331
// end ;
1201: LD_VAR 0 5
1205: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1206: LD_INT 0
1208: PPUSH
// if not units then
1209: LD_VAR 0 1
1213: NOT
1214: IFFALSE 1218
// exit ;
1216: GO 1301
// result := true ;
1218: LD_ADDR_VAR 0 4
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_INT 26
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_VAR 0 2
1254: PPUSH
1255: CALL_OW 88
1259: NOT
1260: IFFALSE 1301
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_VAR 0 1
1271: PPUSH
1272: LD_INT 26
1274: PUSH
1275: LD_INT 2
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 72
1286: PUSH
1287: LD_INT 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 3
1295: PPUSH
1296: CALL_OW 88
1300: ST_TO_ADDR
// end ;
1301: LD_VAR 0 4
1305: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1306: LD_INT 0
1308: PPUSH
1309: PPUSH
// if not group then
1310: LD_VAR 0 2
1314: NOT
1315: IFFALSE 1319
// exit ;
1317: GO 1364
// for i in group do
1319: LD_ADDR_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1362
// if See ( side , i ) then
1332: LD_VAR 0 1
1336: PPUSH
1337: LD_VAR 0 4
1341: PPUSH
1342: CALL_OW 292
1346: IFFALSE 1360
// begin result := true ;
1348: LD_ADDR_VAR 0 3
1352: PUSH
1353: LD_INT 1
1355: ST_TO_ADDR
// exit ;
1356: POP
1357: POP
1358: GO 1364
// end ;
1360: GO 1329
1362: POP
1363: POP
// end ; end_of_file
1364: LD_VAR 0 3
1368: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1369: LD_INT 0
1371: PPUSH
1372: PPUSH
// uc_side := 2 ;
1373: LD_ADDR_OWVAR 20
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// uc_nation := 2 ;
1381: LD_ADDR_OWVAR 21
1385: PUSH
1386: LD_INT 2
1388: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1389: LD_ADDR_EXP 21
1393: PUSH
1394: LD_STRING Heike
1396: PPUSH
1397: LD_EXP 1
1401: NOT
1402: PPUSH
1403: LD_EXP 2
1407: PPUSH
1408: CALL 36266 0 3
1412: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1413: LD_ADDR_EXP 24
1417: PUSH
1418: LD_STRING Ibrahim
1420: PPUSH
1421: LD_EXP 1
1425: NOT
1426: PPUSH
1427: LD_EXP 2
1431: PPUSH
1432: CALL 36266 0 3
1436: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1437: LD_ADDR_EXP 22
1441: PUSH
1442: LD_STRING Givi
1444: PPUSH
1445: LD_EXP 1
1449: NOT
1450: PPUSH
1451: LD_EXP 2
1455: PPUSH
1456: CALL 36266 0 3
1460: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1461: LD_ADDR_EXP 25
1465: PUSH
1466: LD_STRING Kamil
1468: PPUSH
1469: LD_EXP 1
1473: NOT
1474: PPUSH
1475: LD_EXP 2
1479: PPUSH
1480: CALL 36266 0 3
1484: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1485: LD_ADDR_EXP 26
1489: PUSH
1490: LD_STRING Kaia
1492: PPUSH
1493: LD_EXP 1
1497: NOT
1498: PPUSH
1499: LD_EXP 2
1503: PPUSH
1504: CALL 36266 0 3
1508: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Sophia
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 36266 0 3
1532: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1533: LD_ADDR_EXP 28
1537: PUSH
1538: LD_STRING Markov
1540: PPUSH
1541: LD_EXP 1
1545: NOT
1546: PPUSH
1547: LD_EXP 2
1551: PPUSH
1552: CALL 36266 0 3
1556: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 33
1561: PUSH
1562: LD_STRING Aviradze
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 36266 0 3
1580: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1581: LD_ADDR_EXP 32
1585: PUSH
1586: LD_STRING Kurt
1588: PPUSH
1589: LD_EXP 1
1593: NOT
1594: PPUSH
1595: LD_EXP 2
1599: PPUSH
1600: CALL 36266 0 3
1604: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1605: LD_ADDR_EXP 23
1609: PUSH
1610: LD_STRING Mike
1612: PPUSH
1613: LD_EXP 1
1617: NOT
1618: PPUSH
1619: LD_EXP 2
1623: PPUSH
1624: CALL 36266 0 3
1628: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1629: LD_ADDR_EXP 30
1633: PUSH
1634: LD_STRING Olaf
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: LD_STRING 
1642: PPUSH
1643: CALL 36266 0 3
1647: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1648: LD_ADDR_EXP 34
1652: PUSH
1653: LD_STRING 04_2_others
1655: PPUSH
1656: CALL_OW 31
1660: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1661: LD_ADDR_EXP 36
1665: PUSH
1666: LD_STRING 04_2_apes
1668: PPUSH
1669: CALL_OW 31
1673: ST_TO_ADDR
// if hasFlamethrower then
1674: LD_EXP 3
1678: IFFALSE 1913
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1680: LD_INT 70
1682: PPUSH
1683: LD_INT 2
1685: PPUSH
1686: LD_INT 2
1688: PPUSH
1689: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1693: LD_ADDR_EXP 35
1697: PUSH
1698: LD_INT 13
1700: PUSH
1701: LD_INT 1
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 27
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: LD_INT 1000
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 13
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 25
1746: PUSH
1747: LD_INT 2
1749: PUSH
1750: LD_INT 1000
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: LD_INT 0
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 1
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 26
1783: PUSH
1784: LD_INT 2
1786: PUSH
1787: LD_INT 1000
1789: PUSH
1790: LD_INT 0
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 13
1811: PUSH
1812: LD_INT 1
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: LD_INT 27
1820: PUSH
1821: LD_INT 2
1823: PUSH
1824: LD_INT 1000
1826: PUSH
1827: LD_INT 0
1829: PUSH
1830: LD_INT 0
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 13
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: LD_INT 32
1857: PUSH
1858: LD_INT 2
1860: PUSH
1861: LD_INT 1000
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: LD_INT 60
1869: PUSH
1870: LD_INT 40
1872: PUSH
1873: LD_INT 20
1875: PUSH
1876: LD_INT 10
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_OWVAR 67
1889: ARRAY
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: ST_TO_ADDR
// end else
1911: GO 2131
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1913: LD_ADDR_EXP 35
1917: PUSH
1918: LD_INT 13
1920: PUSH
1921: LD_INT 1
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 25
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 1000
1935: PUSH
1936: LD_INT 0
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 13
1957: PUSH
1958: LD_INT 1
1960: PUSH
1961: LD_INT 1
1963: PUSH
1964: LD_INT 27
1966: PUSH
1967: LD_INT 2
1969: PUSH
1970: LD_INT 1000
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: LD_INT 0
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 13
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: LD_INT 1
2000: PUSH
2001: LD_INT 24
2003: PUSH
2004: LD_INT 2
2006: PUSH
2007: LD_INT 1000
2009: PUSH
2010: LD_INT 0
2012: PUSH
2013: LD_INT 0
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 13
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: LD_INT 1
2037: PUSH
2038: LD_INT 27
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: LD_INT 1000
2046: PUSH
2047: LD_INT 0
2049: PUSH
2050: LD_INT 0
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 13
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 2
2080: PUSH
2081: LD_INT 1000
2083: PUSH
2084: LD_INT 0
2086: PUSH
2087: LD_INT 50
2089: PUSH
2090: LD_INT 30
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 10
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_OWVAR 67
2109: ARRAY
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: ST_TO_ADDR
// end ; uc_side := 5 ;
2131: LD_ADDR_OWVAR 20
2135: PUSH
2136: LD_INT 5
2138: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2139: LD_ADDR_EXP 29
2143: PUSH
2144: LD_STRING Abdul
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: LD_STRING 
2152: PPUSH
2153: CALL 36266 0 3
2157: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2158: LD_ADDR_EXP 31
2162: PUSH
2163: LD_STRING Omar
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: LD_STRING 
2171: PPUSH
2172: CALL 36266 0 3
2176: ST_TO_ADDR
// end ;
2177: LD_VAR 0 1
2181: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2182: LD_INT 0
2184: PPUSH
2185: PPUSH
2186: PPUSH
2187: PPUSH
2188: PPUSH
// pfx := 04_1_ ;
2189: LD_ADDR_VAR 0 2
2193: PUSH
2194: LD_STRING 04_1_
2196: ST_TO_ADDR
// if HexInfo ( 10 , 16 ) then
2197: LD_INT 10
2199: PPUSH
2200: LD_INT 16
2202: PPUSH
2203: CALL_OW 428
2207: IFFALSE 2232
// ComMoveXY ( HexInfo ( 10 , 16 ) , 18 , 18 ) else
2209: LD_INT 10
2211: PPUSH
2212: LD_INT 16
2214: PPUSH
2215: CALL_OW 428
2219: PPUSH
2220: LD_INT 18
2222: PPUSH
2223: LD_INT 18
2225: PPUSH
2226: CALL_OW 111
2230: GO 2242
// EraseResourceArea ( mat_cans , westSpawnPointArea ) ;
2232: LD_INT 1
2234: PPUSH
2235: LD_INT 14
2237: PPUSH
2238: CALL_OW 286
// repeat wait ( 0 0$1 ) ;
2242: LD_INT 35
2244: PPUSH
2245: CALL_OW 67
// until not HexInfo ( 10 , 16 ) ;
2249: LD_INT 10
2251: PPUSH
2252: LD_INT 16
2254: PPUSH
2255: CALL_OW 428
2259: NOT
2260: IFFALSE 2242
// tmp := [ ] ;
2262: LD_ADDR_VAR 0 4
2266: PUSH
2267: EMPTY
2268: ST_TO_ADDR
// uc_side := 5 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 5
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2285: LD_ADDR_EXP 33
2289: PUSH
2290: LD_STRING Aviradze_L
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_VAR 0 2
2303: PPUSH
2304: CALL 36266 0 3
2308: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2309: LD_EXP 33
2313: PPUSH
2314: LD_INT 2
2316: PPUSH
2317: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2321: LD_EXP 33
2325: PPUSH
2326: LD_INT 14
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: CALL_OW 49
// ComMoveXY ( Aviradze , 25 , 19 ) ;
2336: LD_EXP 33
2340: PPUSH
2341: LD_INT 25
2343: PPUSH
2344: LD_INT 19
2346: PPUSH
2347: CALL_OW 111
// AddComHold ( Aviradze ) ;
2351: LD_EXP 33
2355: PPUSH
2356: CALL_OW 200
// tmp := [ Aviradze ] ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_EXP 33
2369: PUSH
2370: EMPTY
2371: LIST
2372: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2373: LD_INT 70
2375: PPUSH
2376: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2380: LD_STRING Ibrahim_L
2382: PPUSH
2383: LD_EXP 1
2387: NOT
2388: PPUSH
2389: LD_VAR 0 2
2393: PPUSH
2394: CALL 36266 0 3
2398: IFFALSE 2498
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2400: LD_ADDR_EXP 24
2404: PUSH
2405: LD_STRING Ibrahim_L
2407: PPUSH
2408: LD_EXP 1
2412: NOT
2413: PPUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 36266 0 3
2423: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2424: LD_EXP 24
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2436: LD_EXP 24
2440: PPUSH
2441: LD_INT 14
2443: PPUSH
2444: LD_INT 0
2446: PPUSH
2447: CALL_OW 49
// ComMoveXY ( Ibrahim , 25 , 19 ) ;
2451: LD_EXP 24
2455: PPUSH
2456: LD_INT 25
2458: PPUSH
2459: LD_INT 19
2461: PPUSH
2462: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2475: LD_ADDR_VAR 0 4
2479: PUSH
2480: LD_VAR 0 4
2484: PUSH
2485: LD_EXP 24
2489: ADD
2490: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2491: LD_INT 70
2493: PPUSH
2494: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2498: LD_STRING Kaia_L
2500: PPUSH
2501: LD_EXP 1
2505: NOT
2506: PPUSH
2507: LD_VAR 0 2
2511: PPUSH
2512: CALL 36266 0 3
2516: IFFALSE 2616
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2518: LD_ADDR_EXP 26
2522: PUSH
2523: LD_STRING Kaia_L
2525: PPUSH
2526: LD_EXP 1
2530: NOT
2531: PPUSH
2532: LD_VAR 0 2
2536: PPUSH
2537: CALL 36266 0 3
2541: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2542: LD_EXP 26
2546: PPUSH
2547: LD_INT 2
2549: PPUSH
2550: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2554: LD_EXP 26
2558: PPUSH
2559: LD_INT 14
2561: PPUSH
2562: LD_INT 0
2564: PPUSH
2565: CALL_OW 49
// ComMoveXY ( Kaia , 25 , 19 ) ;
2569: LD_EXP 26
2573: PPUSH
2574: LD_INT 25
2576: PPUSH
2577: LD_INT 19
2579: PPUSH
2580: CALL_OW 111
// AddComHold ( Kaia ) ;
2584: LD_EXP 26
2588: PPUSH
2589: CALL_OW 200
// tmp := tmp ^ Kaia ;
2593: LD_ADDR_VAR 0 4
2597: PUSH
2598: LD_VAR 0 4
2602: PUSH
2603: LD_EXP 26
2607: ADD
2608: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2609: LD_INT 70
2611: PPUSH
2612: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2616: LD_STRING Kamil_L
2618: PPUSH
2619: LD_EXP 1
2623: NOT
2624: PPUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: CALL 36266 0 3
2634: IFFALSE 2734
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2636: LD_ADDR_EXP 25
2640: PUSH
2641: LD_STRING Kamil_L
2643: PPUSH
2644: LD_EXP 1
2648: NOT
2649: PPUSH
2650: LD_VAR 0 2
2654: PPUSH
2655: CALL 36266 0 3
2659: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2660: LD_EXP 25
2664: PPUSH
2665: LD_INT 2
2667: PPUSH
2668: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2672: LD_EXP 25
2676: PPUSH
2677: LD_INT 14
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// ComMoveXY ( Kamil , 25 , 19 ) ;
2687: LD_EXP 25
2691: PPUSH
2692: LD_INT 25
2694: PPUSH
2695: LD_INT 19
2697: PPUSH
2698: CALL_OW 111
// AddComHold ( Kamil ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 200
// tmp := tmp ^ Kamil ;
2711: LD_ADDR_VAR 0 4
2715: PUSH
2716: LD_VAR 0 4
2720: PUSH
2721: LD_EXP 25
2725: ADD
2726: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2727: LD_INT 70
2729: PPUSH
2730: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2734: LD_STRING Sophia_L
2736: PPUSH
2737: LD_EXP 1
2741: NOT
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: CALL 36266 0 3
2752: IFFALSE 2852
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2754: LD_ADDR_EXP 27
2758: PUSH
2759: LD_STRING Sophia_L
2761: PPUSH
2762: LD_EXP 1
2766: NOT
2767: PPUSH
2768: LD_VAR 0 2
2772: PPUSH
2773: CALL 36266 0 3
2777: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2778: LD_EXP 27
2782: PPUSH
2783: LD_INT 2
2785: PPUSH
2786: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2790: LD_EXP 27
2794: PPUSH
2795: LD_INT 14
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 49
// ComMoveXY ( Sophia , 25 , 19 ) ;
2805: LD_EXP 27
2809: PPUSH
2810: LD_INT 25
2812: PPUSH
2813: LD_INT 19
2815: PPUSH
2816: CALL_OW 111
// AddComHold ( Sophia ) ;
2820: LD_EXP 27
2824: PPUSH
2825: CALL_OW 200
// tmp := tmp ^ Sophia ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_EXP 27
2843: ADD
2844: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2845: LD_INT 70
2847: PPUSH
2848: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2852: LD_ADDR_VAR 0 5
2856: PUSH
2857: LD_STRING 04_1_others_L
2859: PPUSH
2860: CALL_OW 31
2864: ST_TO_ADDR
// if tmp2 then
2865: LD_VAR 0 5
2869: IFFALSE 2966
// for i in tmp2 do
2871: LD_ADDR_VAR 0 3
2875: PUSH
2876: LD_VAR 0 5
2880: PUSH
2881: FOR_IN
2882: IFFALSE 2964
// begin SetDir ( i , 2 ) ;
2884: LD_VAR 0 3
2888: PPUSH
2889: LD_INT 2
2891: PPUSH
2892: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2896: LD_VAR 0 3
2900: PPUSH
2901: LD_INT 14
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2911: LD_ADDR_EXP 34
2915: PUSH
2916: LD_EXP 34
2920: PPUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL_OW 1
2939: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2940: LD_VAR 0 3
2944: PPUSH
2945: LD_INT 17
2947: PPUSH
2948: LD_INT 14
2950: PPUSH
2951: CALL_OW 111
// wait ( 0 0$2 ) ;
2955: LD_INT 70
2957: PPUSH
2958: CALL_OW 67
// end ;
2962: GO 2881
2964: POP
2965: POP
// for i in tmp union tmp2 do
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 4
2975: PUSH
2976: LD_VAR 0 5
2980: UNION
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3013
// begin SetSide ( i , 2 ) ;
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_INT 2
2992: PPUSH
2993: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2997: LD_VAR 0 3
3001: PPUSH
3002: LD_EXP 21
3006: PPUSH
3007: CALL_OW 112
// end ;
3011: GO 2982
3013: POP
3014: POP
// end ; end_of_file
3015: LD_VAR 0 1
3019: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3020: LD_INT 0
3022: PPUSH
3023: PPUSH
3024: PPUSH
// uc_side := 3 ;
3025: LD_ADDR_OWVAR 20
3029: PUSH
3030: LD_INT 3
3032: ST_TO_ADDR
// uc_nation := 3 ;
3033: LD_ADDR_OWVAR 21
3037: PUSH
3038: LD_INT 3
3040: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3041: LD_ADDR_EXP 37
3045: PUSH
3046: EMPTY
3047: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3048: LD_ADDR_EXP 38
3052: PUSH
3053: EMPTY
3054: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3055: LD_ADDR_EXP 41
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// for i := 1 to 2 do
3062: LD_ADDR_VAR 0 2
3066: PUSH
3067: DOUBLE
3068: LD_INT 1
3070: DEC
3071: ST_TO_ADDR
3072: LD_INT 2
3074: PUSH
3075: FOR_TO
3076: IFFALSE 3215
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3078: LD_INT 0
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: LD_INT 3
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: LD_INT 5
3092: PUSH
3093: LD_INT 6
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: LD_OWVAR 67
3106: ARRAY
3107: PPUSH
3108: CALL_OW 380
// un := CreateHuman ;
3112: LD_ADDR_VAR 0 3
3116: PUSH
3117: CALL_OW 44
3121: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3122: LD_ADDR_EXP 37
3126: PUSH
3127: LD_EXP 37
3131: PPUSH
3132: LD_EXP 37
3136: PUSH
3137: LD_INT 1
3139: PLUS
3140: PPUSH
3141: LD_VAR 0 3
3145: PPUSH
3146: CALL_OW 1
3150: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3151: LD_VAR 0 3
3155: PPUSH
3156: LD_INT 100
3158: PPUSH
3159: LD_INT 63
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_INT 97
3179: PPUSH
3180: LD_INT 64
3182: PPUSH
3183: CALL_OW 428
3187: PUSH
3188: LD_INT 98
3190: PPUSH
3191: LD_INT 58
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_VAR 0 2
3207: ARRAY
3208: PPUSH
3209: CALL_OW 120
// end ;
3213: GO 3075
3215: POP
3216: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3217: LD_INT 51
3219: PPUSH
3220: LD_INT 77
3222: PPUSH
3223: CALL_OW 428
3227: PPUSH
3228: CALL_OW 274
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: LD_INT 120
3238: PPUSH
3239: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3243: LD_INT 10
3245: PPUSH
3246: CALL_OW 274
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: LD_INT 300
3256: PPUSH
3257: CALL_OW 277
// for i := 1 to 2 do
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_INT 2
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3393
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 3
3285: PUSH
3286: LD_INT 4
3288: PUSH
3289: LD_INT 5
3291: PUSH
3292: LD_INT 6
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PUSH
3301: LD_OWVAR 67
3305: ARRAY
3306: PPUSH
3307: CALL_OW 380
// un := CreateHuman ;
3311: LD_ADDR_VAR 0 3
3315: PUSH
3316: CALL_OW 44
3320: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3321: LD_ADDR_EXP 38
3325: PUSH
3326: LD_EXP 38
3330: PPUSH
3331: LD_EXP 38
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 3
3344: PPUSH
3345: CALL_OW 1
3349: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3350: LD_VAR 0 3
3354: PPUSH
3355: LD_INT 198
3357: PPUSH
3358: LD_INT 106
3360: PPUSH
3361: CALL_OW 428
3365: PUSH
3366: LD_INT 205
3368: PPUSH
3369: LD_INT 114
3371: PPUSH
3372: CALL_OW 428
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_VAR 0 2
3385: ARRAY
3386: PPUSH
3387: CALL_OW 52
// end ;
3391: GO 3274
3393: POP
3394: POP
// for i := 1 to 2 do
3395: LD_ADDR_VAR 0 2
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_INT 2
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3486
// begin PrepareHuman ( false , 2 , 3 ) ;
3411: LD_INT 0
3413: PPUSH
3414: LD_INT 2
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL_OW 380
// un := CreateHuman ;
3424: LD_ADDR_VAR 0 3
3428: PUSH
3429: CALL_OW 44
3433: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3434: LD_ADDR_EXP 38
3438: PUSH
3439: LD_EXP 38
3443: PPUSH
3444: LD_EXP 38
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: PPUSH
3453: LD_VAR 0 3
3457: PPUSH
3458: CALL_OW 1
3462: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3463: LD_VAR 0 3
3467: PPUSH
3468: LD_INT 204
3470: PPUSH
3471: LD_INT 108
3473: PPUSH
3474: LD_INT 2
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 50
// end ;
3484: GO 3408
3486: POP
3487: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_INT 4
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 6
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_OWVAR 67
3520: ARRAY
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3669
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_INT 1
3530: PUSH
3531: LD_INT 1
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 4
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 1
3552: PPUSH
3553: LD_INT 5
3555: PPUSH
3556: CALL_OW 12
3560: ARRAY
3561: PPUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 5
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_OWVAR 67
3584: ARRAY
3585: PPUSH
3586: CALL_OW 380
// un := CreateHuman ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: CALL_OW 44
3599: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_INT 10
3607: PPUSH
3608: LD_INT 0
3610: PPUSH
3611: CALL 72903 0 3
3615: IFFALSE 3667
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3617: LD_ADDR_EXP 39
3621: PUSH
3622: LD_EXP 39
3626: PPUSH
3627: LD_EXP 39
3631: PUSH
3632: LD_INT 1
3634: PLUS
3635: PPUSH
3636: LD_VAR 0 3
3640: PPUSH
3641: CALL_OW 1
3645: ST_TO_ADDR
// if Prob ( 50 ) then
3646: LD_INT 50
3648: PPUSH
3649: CALL_OW 13
3653: IFFALSE 3667
// ForceSleep ( un , true ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_INT 1
3662: PPUSH
3663: CALL_OW 585
// end ; end ;
3667: GO 3522
3669: POP
3670: POP
// for i := 1 to 3 do
3671: LD_ADDR_VAR 0 2
3675: PUSH
3676: DOUBLE
3677: LD_INT 1
3679: DEC
3680: ST_TO_ADDR
3681: LD_INT 3
3683: PUSH
3684: FOR_TO
3685: IFFALSE 3779
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3687: LD_INT 0
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 4
3698: PUSH
3699: LD_INT 4
3701: PUSH
3702: LD_INT 5
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: PUSH
3711: LD_OWVAR 67
3715: ARRAY
3716: PPUSH
3717: CALL_OW 380
// un := CreateHuman ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: CALL_OW 44
3730: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_INT 11
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL 72903 0 3
3746: IFFALSE 3777
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3748: LD_ADDR_EXP 39
3752: PUSH
3753: LD_EXP 39
3757: PPUSH
3758: LD_EXP 39
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: PPUSH
3767: LD_VAR 0 3
3771: PPUSH
3772: CALL_OW 1
3776: ST_TO_ADDR
// end ;
3777: GO 3684
3779: POP
3780: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3781: LD_ADDR_VAR 0 2
3785: PUSH
3786: DOUBLE
3787: LD_INT 1
3789: DEC
3790: ST_TO_ADDR
3791: LD_INT 5
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: LD_INT 7
3799: PUSH
3800: LD_INT 8
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_OWVAR 67
3813: ARRAY
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3962
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3818: LD_INT 0
3820: PPUSH
3821: LD_INT 1
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: LD_INT 5
3848: PPUSH
3849: CALL_OW 12
3853: ARRAY
3854: PPUSH
3855: LD_INT 3
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 5
3863: PUSH
3864: LD_INT 5
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_OWVAR 67
3877: ARRAY
3878: PPUSH
3879: CALL_OW 380
// un := CreateHuman ;
3883: LD_ADDR_VAR 0 3
3887: PUSH
3888: CALL_OW 44
3892: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3893: LD_VAR 0 3
3897: PPUSH
3898: LD_INT 15
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL 72903 0 3
3908: IFFALSE 3960
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3910: LD_ADDR_EXP 40
3914: PUSH
3915: LD_EXP 40
3919: PPUSH
3920: LD_EXP 40
3924: PUSH
3925: LD_INT 1
3927: PLUS
3928: PPUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 1
3938: ST_TO_ADDR
// if Prob ( 50 ) then
3939: LD_INT 50
3941: PPUSH
3942: CALL_OW 13
3946: IFFALSE 3960
// ForceSleep ( un , true ) ;
3948: LD_VAR 0 3
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: CALL_OW 585
// end ; end ;
3960: GO 3815
3962: POP
3963: POP
// end ;
3964: LD_VAR 0 1
3968: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3969: LD_INT 0
3971: PPUSH
3972: PPUSH
3973: PPUSH
// uc_side := 3 ;
3974: LD_ADDR_OWVAR 20
3978: PUSH
3979: LD_INT 3
3981: ST_TO_ADDR
// uc_nation := 3 ;
3982: LD_ADDR_OWVAR 21
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// for i := 1 to 6 do
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_INT 6
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4083
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4006: LD_INT 0
4008: PPUSH
4009: LD_INT 1
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 12
4029: ARRAY
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 380
// un := CreateHuman ;
4038: LD_ADDR_VAR 0 3
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4048: LD_VAR 0 3
4052: PPUSH
4053: LD_INT 54
4055: PPUSH
4056: LD_INT 88
4058: PPUSH
4059: LD_INT 12
4061: PPUSH
4062: LD_INT 0
4064: PPUSH
4065: CALL_OW 50
// SetLives ( un , 1 ) ;
4069: LD_VAR 0 3
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: CALL_OW 234
// end ;
4081: GO 4003
4083: POP
4084: POP
// uc_side := 3 ;
4085: LD_ADDR_OWVAR 20
4089: PUSH
4090: LD_INT 3
4092: ST_TO_ADDR
// uc_nation := 0 ;
4093: LD_ADDR_OWVAR 21
4097: PUSH
4098: LD_INT 0
4100: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4101: LD_ADDR_EXP 42
4105: PUSH
4106: EMPTY
4107: ST_TO_ADDR
// apeEngGroup := [ ] ;
4108: LD_ADDR_EXP 43
4112: PUSH
4113: EMPTY
4114: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4115: LD_ADDR_VAR 0 2
4119: PUSH
4120: DOUBLE
4121: LD_INT 1
4123: DEC
4124: ST_TO_ADDR
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 6
4133: PUSH
4134: LD_INT 7
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: LD_OWVAR 67
4147: ARRAY
4148: PUSH
4149: FOR_TO
4150: IFFALSE 4268
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4152: LD_INT 0
4154: PPUSH
4155: LD_INT 15
4157: PPUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: LD_INT 6
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: PUSH
4176: LD_OWVAR 67
4180: ARRAY
4181: PPUSH
4182: CALL_OW 380
// un := CreateHuman ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4196: LD_ADDR_EXP 42
4200: PUSH
4201: LD_EXP 42
4205: PPUSH
4206: LD_EXP 42
4210: PUSH
4211: LD_INT 1
4213: PLUS
4214: PPUSH
4215: LD_VAR 0 3
4219: PPUSH
4220: CALL_OW 1
4224: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4225: LD_VAR 0 3
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: CALL_OW 12
4240: PPUSH
4241: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: LD_INT 56
4252: PPUSH
4253: LD_INT 82
4255: PPUSH
4256: LD_INT 6
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 50
// end ;
4266: GO 4149
4268: POP
4269: POP
// for i := 1 to 2 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_INT 1
4278: DEC
4279: ST_TO_ADDR
4280: LD_INT 2
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4360
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 16
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4309: LD_ADDR_EXP 43
4313: PUSH
4314: LD_EXP 43
4318: PPUSH
4319: LD_EXP 43
4323: PUSH
4324: LD_INT 1
4326: PLUS
4327: PPUSH
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL_OW 1
4337: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 51
4345: PPUSH
4346: LD_INT 77
4348: PPUSH
4349: CALL_OW 428
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4283
4360: POP
4361: POP
// end ;
4362: LD_VAR 0 1
4366: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4367: LD_EXP 42
4371: PPUSH
4372: LD_INT 3
4374: PUSH
4375: LD_INT 24
4377: PUSH
4378: LD_INT 600
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 54
4394: PUSH
4395: EMPTY
4396: LIST
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 72
4410: PUSH
4411: LD_INT 66
4413: PPUSH
4414: LD_INT 89
4416: PPUSH
4417: CALL_OW 428
4421: PPUSH
4422: CALL_OW 302
4426: AND
4427: IFFALSE 4512
4429: GO 4431
4431: DISABLE
4432: LD_INT 0
4434: PPUSH
// begin enable ;
4435: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4436: LD_ADDR_VAR 0 1
4440: PUSH
4441: LD_EXP 42
4445: PPUSH
4446: LD_INT 3
4448: PUSH
4449: LD_INT 24
4451: PUSH
4452: LD_INT 600
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 72
4484: PUSH
4485: FOR_IN
4486: IFFALSE 4510
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4488: LD_VAR 0 1
4492: PPUSH
4493: LD_INT 66
4495: PPUSH
4496: LD_INT 89
4498: PPUSH
4499: CALL_OW 428
4503: PPUSH
4504: CALL_OW 120
4508: GO 4485
4510: POP
4511: POP
// end ;
4512: PPOPN 1
4514: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4515: LD_INT 22
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 92
4527: PUSH
4528: LD_INT 54
4530: PUSH
4531: LD_INT 77
4533: PUSH
4534: LD_INT 8
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 69
4551: IFFALSE 4615
4553: GO 4555
4555: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4556: LD_EXP 43
4560: PPUSH
4561: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4565: LD_EXP 43
4569: PPUSH
4570: LD_INT 22
4572: PUSH
4573: LD_INT 2
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 92
4582: PUSH
4583: LD_INT 54
4585: PUSH
4586: LD_INT 77
4588: PUSH
4589: LD_INT 8
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PUSH
4607: LD_INT 1
4609: ARRAY
4610: PPUSH
4611: CALL_OW 175
// end ;
4615: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_INT 3
4638: PPUSH
4639: CALL_OW 12
4643: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4644: LD_ADDR_VAR 0 5
4648: PUSH
4649: LD_INT 16
4651: PUSH
4652: LD_INT 17
4654: PUSH
4655: LD_INT 19
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: PUSH
4663: LD_VAR 0 3
4667: ARRAY
4668: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4669: LD_ADDR_VAR 0 7
4673: PUSH
4674: LD_INT 159
4676: PUSH
4677: LD_INT 25
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 137
4686: PUSH
4687: LD_INT 37
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 123
4696: PUSH
4697: LD_INT 55
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 115
4706: PUSH
4707: LD_INT 71
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 106
4716: PUSH
4717: LD_INT 88
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 97
4726: PUSH
4727: LD_INT 114
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 75
4736: PUSH
4737: LD_INT 146
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 206
4755: PUSH
4756: LD_INT 135
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 184
4765: PUSH
4766: LD_INT 111
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 154
4775: PUSH
4776: LD_INT 97
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 122
4785: PUSH
4786: LD_INT 80
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 109
4795: PUSH
4796: LD_INT 78
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 97
4805: PUSH
4806: LD_INT 113
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 75
4815: PUSH
4816: LD_INT 147
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 185
4834: PUSH
4835: LD_INT 72
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 171
4844: PUSH
4845: LD_INT 83
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 161
4854: PUSH
4855: LD_INT 99
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 125
4864: PUSH
4865: LD_INT 82
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 105
4874: PUSH
4875: LD_INT 90
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 96
4884: PUSH
4885: LD_INT 116
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 75
4894: PUSH
4895: LD_INT 147
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_VAR 0 3
4920: ARRAY
4921: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 5
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: LD_VAR 0 3
4945: ARRAY
4946: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4947: LD_ADDR_VAR 0 6
4951: PUSH
4952: LD_INT 22
4954: PUSH
4955: LD_INT 20
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PUSH
4966: LD_VAR 0 3
4970: ARRAY
4971: ST_TO_ADDR
// for i := 1 to 2 do
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: DOUBLE
4978: LD_INT 1
4980: DEC
4981: ST_TO_ADDR
4982: LD_INT 2
4984: PUSH
4985: FOR_TO
4986: IFFALSE 5004
// EraseResourceArea ( i , outerSpawnArea ) ;
4988: LD_VAR 0 2
4992: PPUSH
4993: LD_VAR 0 6
4997: PPUSH
4998: CALL_OW 286
5002: GO 4985
5004: POP
5005: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5006: LD_VAR 0 6
5010: PPUSH
5011: LD_INT 2
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 21
5026: PUSH
5027: LD_INT 2
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 21
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 70
5054: IFFALSE 5269
// repeat wait ( 0 0$1 ) ;
5056: LD_INT 35
5058: PPUSH
5059: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_INT 2
5070: PUSH
5071: LD_INT 21
5073: PUSH
5074: LD_INT 2
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 21
5083: PUSH
5084: LD_INT 3
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 2
5114: PUSH
5115: LD_INT 21
5117: PUSH
5118: LD_INT 2
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 21
5127: PUSH
5128: LD_INT 3
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: PPUSH
5140: CALL_OW 70
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5159
// RemoveUnit ( i ) ;
5148: LD_VAR 0 2
5152: PPUSH
5153: CALL_OW 64
5157: GO 5145
5159: POP
5160: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 21
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PPUSH
5176: CALL_OW 70
5180: IFFALSE 5229
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_VAR 0 6
5191: PPUSH
5192: LD_INT 21
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 70
5206: PUSH
5207: FOR_IN
5208: IFFALSE 5227
// ComMoveXY ( i , 113 , 53 ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: LD_INT 113
5217: PPUSH
5218: LD_INT 53
5220: PPUSH
5221: CALL_OW 111
5225: GO 5207
5227: POP
5228: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5229: LD_VAR 0 6
5233: PPUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 21
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 2
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 70
5266: NOT
5267: IFFALSE 5056
// case convoyCounter of 1 .. 3 :
5269: LD_EXP 16
5273: PUSH
5274: LD_INT 1
5276: DOUBLE
5277: GREATEREQUAL
5278: IFFALSE 5286
5280: LD_INT 3
5282: DOUBLE
5283: LESSEQUAL
5284: IFTRUE 5288
5286: GO 5923
5288: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 5
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_INT 7
5307: PUSH
5308: LD_INT 8
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_OWVAR 67
5321: ARRAY
5322: PUSH
5323: LD_EXP 16
5327: MINUS
5328: PUSH
5329: FOR_TO
5330: IFFALSE 5537
// begin uc_side := 3 ;
5332: LD_ADDR_OWVAR 20
5336: PUSH
5337: LD_INT 3
5339: ST_TO_ADDR
// uc_nation := 3 ;
5340: LD_ADDR_OWVAR 21
5344: PUSH
5345: LD_INT 3
5347: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PUSH
5354: LD_INT 1
5356: PUSH
5357: LD_INT 1
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_INT 4
5374: PPUSH
5375: CALL_OW 12
5379: ARRAY
5380: PPUSH
5381: LD_INT 4
5383: PUSH
5384: LD_INT 5
5386: PUSH
5387: LD_INT 6
5389: PUSH
5390: LD_INT 7
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: PUSH
5399: LD_OWVAR 67
5403: ARRAY
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 8
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , dir ) ;
5419: LD_VAR 0 8
5423: PPUSH
5424: LD_VAR 0 4
5428: PPUSH
5429: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5433: LD_VAR 0 8
5437: PPUSH
5438: LD_VAR 0 5
5442: PPUSH
5443: LD_INT 0
5445: PPUSH
5446: CALL 72903 0 3
5450: IFFALSE 5535
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5452: LD_ADDR_EXP 41
5456: PUSH
5457: LD_EXP 41
5461: PPUSH
5462: LD_EXP 41
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: PPUSH
5471: LD_VAR 0 8
5475: PPUSH
5476: CALL_OW 1
5480: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5481: LD_VAR 0 8
5485: PPUSH
5486: LD_INT 1
5488: PPUSH
5489: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5493: LD_VAR 0 8
5497: PPUSH
5498: LD_VAR 0 7
5502: PUSH
5503: LD_INT 1
5505: ARRAY
5506: PUSH
5507: LD_INT 1
5509: ARRAY
5510: PPUSH
5511: LD_VAR 0 7
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PUSH
5520: LD_INT 2
5522: ARRAY
5523: PPUSH
5524: CALL_OW 111
// wait ( 0 0$2 ) ;
5528: LD_INT 70
5530: PPUSH
5531: CALL_OW 67
// end ; end ;
5535: GO 5329
5537: POP
5538: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5539: LD_ADDR_VAR 0 2
5543: PUSH
5544: DOUBLE
5545: LD_INT 1
5547: DEC
5548: ST_TO_ADDR
5549: LD_INT 3
5551: PUSH
5552: LD_INT 4
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 4
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_OWVAR 67
5571: ARRAY
5572: PUSH
5573: FOR_TO
5574: IFFALSE 5919
// begin uc_side := 3 ;
5576: LD_ADDR_OWVAR 20
5580: PUSH
5581: LD_INT 3
5583: ST_TO_ADDR
// uc_nation := 3 ;
5584: LD_ADDR_OWVAR 21
5588: PUSH
5589: LD_INT 3
5591: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5592: LD_INT 3
5594: PPUSH
5595: LD_INT 3
5597: PPUSH
5598: LD_INT 21
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 23
5606: PUSH
5607: LD_INT 24
5609: PUSH
5610: LD_INT 24
5612: PUSH
5613: LD_INT 24
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: PUSH
5624: LD_OWVAR 67
5628: PPUSH
5629: LD_OWVAR 67
5633: PUSH
5634: LD_INT 2
5636: PLUS
5637: PPUSH
5638: CALL_OW 12
5642: ARRAY
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: LD_INT 42
5652: PUSH
5653: LD_INT 44
5655: PUSH
5656: LD_INT 43
5658: PUSH
5659: LD_INT 44
5661: PUSH
5662: LD_INT 46
5664: PUSH
5665: LD_INT 46
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 1
5678: PPUSH
5679: LD_OWVAR 67
5683: PUSH
5684: LD_INT 2
5686: PLUS
5687: PPUSH
5688: CALL_OW 12
5692: ARRAY
5693: PPUSH
5694: LD_INT 90
5696: PPUSH
5697: CALL 447 0 7
// un := CreateVehicle ;
5701: LD_ADDR_VAR 0 8
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( un , dir ) ;
5711: LD_VAR 0 8
5715: PPUSH
5716: LD_VAR 0 4
5720: PPUSH
5721: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5725: LD_VAR 0 8
5729: PPUSH
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL 72903 0 3
5742: IFFALSE 5917
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5744: LD_ADDR_EXP 41
5748: PUSH
5749: LD_EXP 41
5753: PPUSH
5754: LD_EXP 41
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: PPUSH
5763: LD_VAR 0 8
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5773: LD_INT 0
5775: PPUSH
5776: LD_INT 3
5778: PUSH
5779: LD_INT 4
5781: PUSH
5782: LD_INT 5
5784: PUSH
5785: LD_INT 6
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: LD_OWVAR 67
5798: ARRAY
5799: PPUSH
5800: CALL_OW 383
// un := CreateHuman ;
5804: LD_ADDR_VAR 0 8
5808: PUSH
5809: CALL_OW 44
5813: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5814: LD_VAR 0 8
5818: PPUSH
5819: LD_EXP 41
5823: PUSH
5824: LD_EXP 41
5828: ARRAY
5829: PPUSH
5830: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5834: LD_ADDR_EXP 41
5838: PUSH
5839: LD_EXP 41
5843: PPUSH
5844: LD_EXP 41
5848: PUSH
5849: LD_INT 1
5851: PLUS
5852: PPUSH
5853: LD_VAR 0 8
5857: PPUSH
5858: CALL_OW 1
5862: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5863: LD_VAR 0 8
5867: PPUSH
5868: LD_INT 1
5870: PPUSH
5871: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5875: LD_VAR 0 8
5879: PPUSH
5880: LD_VAR 0 7
5884: PUSH
5885: LD_INT 1
5887: ARRAY
5888: PUSH
5889: LD_INT 1
5891: ARRAY
5892: PPUSH
5893: LD_VAR 0 7
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PUSH
5902: LD_INT 2
5904: ARRAY
5905: PPUSH
5906: CALL_OW 111
// wait ( 0 0$3 ) ;
5910: LD_INT 105
5912: PPUSH
5913: CALL_OW 67
// end ; end ;
5917: GO 5573
5919: POP
5920: POP
// end ; 4 .. 7 :
5921: GO 6528
5923: LD_INT 4
5925: DOUBLE
5926: GREATEREQUAL
5927: IFFALSE 5935
5929: LD_INT 7
5931: DOUBLE
5932: LESSEQUAL
5933: IFTRUE 5937
5935: GO 6527
5937: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_INT 2
5950: PUSH
5951: LD_INT 3
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: LD_INT 4
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: PUSH
5966: LD_OWVAR 67
5970: ARRAY
5971: PUSH
5972: FOR_TO
5973: IFFALSE 6153
// begin uc_side := 3 ;
5975: LD_ADDR_OWVAR 20
5979: PUSH
5980: LD_INT 3
5982: ST_TO_ADDR
// uc_nation := 3 ;
5983: LD_ADDR_OWVAR 21
5987: PUSH
5988: LD_INT 3
5990: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5991: LD_INT 0
5993: PPUSH
5994: LD_INT 1
5996: PPUSH
5997: LD_INT 4
5999: PUSH
6000: LD_INT 5
6002: PUSH
6003: LD_INT 6
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_OWVAR 67
6019: ARRAY
6020: PPUSH
6021: CALL_OW 380
// un := CreateHuman ;
6025: LD_ADDR_VAR 0 8
6029: PUSH
6030: CALL_OW 44
6034: ST_TO_ADDR
// SetDir ( un , dir ) ;
6035: LD_VAR 0 8
6039: PPUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_VAR 0 5
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL 72903 0 3
6066: IFFALSE 6151
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6068: LD_ADDR_EXP 41
6072: PUSH
6073: LD_EXP 41
6077: PPUSH
6078: LD_EXP 41
6082: PUSH
6083: LD_INT 1
6085: PLUS
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6097: LD_VAR 0 8
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6109: LD_VAR 0 8
6113: PPUSH
6114: LD_VAR 0 7
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 7
6131: PUSH
6132: LD_INT 1
6134: ARRAY
6135: PUSH
6136: LD_INT 2
6138: ARRAY
6139: PPUSH
6140: CALL_OW 111
// wait ( 0 0$2 ) ;
6144: LD_INT 70
6146: PPUSH
6147: CALL_OW 67
// end ; end ;
6151: GO 5972
6153: POP
6154: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6155: LD_ADDR_VAR 0 2
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 2
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 4
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_OWVAR 67
6187: ARRAY
6188: PUSH
6189: FOR_TO
6190: IFFALSE 6523
// begin uc_side := 3 ;
6192: LD_ADDR_OWVAR 20
6196: PUSH
6197: LD_INT 3
6199: ST_TO_ADDR
// uc_nation := 3 ;
6200: LD_ADDR_OWVAR 21
6204: PUSH
6205: LD_INT 3
6207: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6208: LD_INT 3
6210: PPUSH
6211: LD_INT 3
6213: PPUSH
6214: LD_INT 21
6216: PUSH
6217: LD_INT 22
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 1
6226: PPUSH
6227: LD_INT 2
6229: PPUSH
6230: CALL_OW 12
6234: ARRAY
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 42
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: LD_INT 43
6250: PUSH
6251: LD_INT 44
6253: PUSH
6254: LD_INT 44
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 1
6266: PPUSH
6267: LD_OWVAR 67
6271: PUSH
6272: LD_INT 1
6274: PLUS
6275: PPUSH
6276: CALL_OW 12
6280: ARRAY
6281: PPUSH
6282: LD_INT 90
6284: PPUSH
6285: CALL 447 0 7
// un := CreateVehicle ;
6289: LD_ADDR_VAR 0 8
6293: PUSH
6294: CALL_OW 45
6298: ST_TO_ADDR
// SetDir ( un , dir ) ;
6299: LD_VAR 0 8
6303: PPUSH
6304: LD_VAR 0 4
6308: PPUSH
6309: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6313: LD_VAR 0 8
6317: PPUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 0
6325: PPUSH
6326: CALL 72903 0 3
6330: IFFALSE 6521
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6332: LD_ADDR_EXP 41
6336: PUSH
6337: LD_EXP 41
6341: PPUSH
6342: LD_EXP 41
6346: PUSH
6347: LD_INT 1
6349: PLUS
6350: PPUSH
6351: LD_VAR 0 8
6355: PPUSH
6356: CALL_OW 1
6360: ST_TO_ADDR
// uc_side := 3 ;
6361: LD_ADDR_OWVAR 20
6365: PUSH
6366: LD_INT 3
6368: ST_TO_ADDR
// uc_nation := 3 ;
6369: LD_ADDR_OWVAR 21
6373: PUSH
6374: LD_INT 3
6376: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6377: LD_INT 0
6379: PPUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: LD_INT 6
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: PUSH
6398: LD_OWVAR 67
6402: ARRAY
6403: PPUSH
6404: CALL_OW 383
// un := CreateHuman ;
6408: LD_ADDR_VAR 0 8
6412: PUSH
6413: CALL_OW 44
6417: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6418: LD_VAR 0 8
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_EXP 41
6432: ARRAY
6433: PPUSH
6434: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6438: LD_ADDR_EXP 41
6442: PUSH
6443: LD_EXP 41
6447: PPUSH
6448: LD_EXP 41
6452: PUSH
6453: LD_INT 1
6455: PLUS
6456: PPUSH
6457: LD_VAR 0 8
6461: PPUSH
6462: CALL_OW 1
6466: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6467: LD_VAR 0 8
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6479: LD_VAR 0 8
6483: PPUSH
6484: LD_VAR 0 7
6488: PUSH
6489: LD_INT 1
6491: ARRAY
6492: PUSH
6493: LD_INT 1
6495: ARRAY
6496: PPUSH
6497: LD_VAR 0 7
6501: PUSH
6502: LD_INT 1
6504: ARRAY
6505: PUSH
6506: LD_INT 2
6508: ARRAY
6509: PPUSH
6510: CALL_OW 111
// wait ( 0 0$2 ) ;
6514: LD_INT 70
6516: PPUSH
6517: CALL_OW 67
// end ; end ;
6521: GO 6189
6523: POP
6524: POP
// end ; end ;
6525: GO 6528
6527: POP
// repeat wait ( 0 0$1 ) ;
6528: LD_INT 35
6530: PPUSH
6531: CALL_OW 67
// for un in ruConvoySquad do
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_EXP 41
6544: PUSH
6545: FOR_IN
6546: IFFALSE 7170
// begin if IsInArea ( un , westSouthOutArea ) then
6548: LD_VAR 0 8
6552: PPUSH
6553: LD_INT 18
6555: PPUSH
6556: CALL_OW 308
6560: IFFALSE 6648
// begin if GetType ( un ) = unit_vehicle then
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 247
6571: PUSH
6572: LD_INT 2
6574: EQUAL
6575: IFFALSE 6607
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6577: LD_ADDR_EXP 41
6581: PUSH
6582: LD_EXP 41
6586: PUSH
6587: LD_VAR 0 8
6591: PPUSH
6592: CALL_OW 311
6596: DIFF
6597: ST_TO_ADDR
// RemoveUnit ( un ) ;
6598: LD_VAR 0 8
6602: PPUSH
6603: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6607: LD_ADDR_EXP 15
6611: PUSH
6612: LD_EXP 15
6616: PUSH
6617: LD_INT 1
6619: PLUS
6620: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6621: LD_ADDR_EXP 41
6625: PUSH
6626: LD_EXP 41
6630: PUSH
6631: LD_VAR 0 8
6635: DIFF
6636: ST_TO_ADDR
// RemoveUnit ( un ) ;
6637: LD_VAR 0 8
6641: PPUSH
6642: CALL_OW 64
// break ;
6646: GO 7170
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6648: LD_VAR 0 8
6652: PPUSH
6653: CALL_OW 305
6657: NOT
6658: PUSH
6659: LD_VAR 0 8
6663: PPUSH
6664: CALL_OW 310
6668: NOT
6669: AND
6670: IFFALSE 6688
// ruConvoySquad := ruConvoySquad diff un ;
6672: LD_ADDR_EXP 41
6676: PUSH
6677: LD_EXP 41
6681: PUSH
6682: LD_VAR 0 8
6686: DIFF
6687: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6688: LD_VAR 0 8
6692: PPUSH
6693: CALL_OW 302
6697: PUSH
6698: LD_VAR 0 8
6702: PPUSH
6703: CALL_OW 314
6707: NOT
6708: AND
6709: IFFALSE 7168
// begin tag := GetTag ( un ) ;
6711: LD_ADDR_VAR 0 9
6715: PUSH
6716: LD_VAR 0 8
6720: PPUSH
6721: CALL_OW 110
6725: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 7
6735: PUSH
6736: LD_VAR 0 9
6740: PUSH
6741: LD_INT 1
6743: PLUS
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 7
6754: PUSH
6755: LD_VAR 0 9
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ARRAY
6764: PUSH
6765: LD_INT 2
6767: ARRAY
6768: PPUSH
6769: CALL_OW 297
6773: PUSH
6774: LD_INT 6
6776: LESS
6777: IFFALSE 6960
// begin SetTag ( un , tag + 1 ) ;
6779: LD_VAR 0 8
6783: PPUSH
6784: LD_VAR 0 9
6788: PUSH
6789: LD_INT 1
6791: PLUS
6792: PPUSH
6793: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6797: LD_VAR 0 8
6801: PPUSH
6802: CALL_OW 247
6806: PUSH
6807: LD_INT 2
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 8
6815: PPUSH
6816: CALL_OW 257
6820: PUSH
6821: LD_INT 3
6823: EQUAL
6824: OR
6825: IFFALSE 6958
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6827: LD_ADDR_VAR 0 10
6831: PUSH
6832: LD_INT 22
6834: PUSH
6835: LD_INT 2
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 91
6844: PUSH
6845: LD_VAR 0 8
6849: PUSH
6850: LD_INT 8
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// if enemy then
6867: LD_VAR 0 10
6871: IFFALSE 6899
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6873: LD_VAR 0 8
6877: PPUSH
6878: LD_VAR 0 10
6882: PPUSH
6883: LD_VAR 0 8
6887: PPUSH
6888: CALL_OW 74
6892: PPUSH
6893: CALL_OW 115
6897: GO 6958
// begin AddComWait ( un , 0 0$4 ) ;
6899: LD_VAR 0 8
6903: PPUSH
6904: LD_INT 140
6906: PPUSH
6907: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6911: LD_VAR 0 8
6915: PPUSH
6916: LD_VAR 0 7
6920: PUSH
6921: LD_VAR 0 9
6925: PUSH
6926: LD_INT 1
6928: PLUS
6929: ARRAY
6930: PUSH
6931: LD_INT 1
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 7
6939: PUSH
6940: LD_VAR 0 9
6944: PUSH
6945: LD_INT 1
6947: PLUS
6948: ARRAY
6949: PUSH
6950: LD_INT 2
6952: ARRAY
6953: PPUSH
6954: CALL_OW 174
// end ; end ; end else
6958: GO 7168
// begin if GetClass ( un ) = 4 then
6960: LD_VAR 0 8
6964: PPUSH
6965: CALL_OW 257
6969: PUSH
6970: LD_INT 4
6972: EQUAL
6973: IFFALSE 7121
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6975: LD_EXP 41
6979: PPUSH
6980: LD_INT 21
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 24
6995: PUSH
6996: LD_INT 1000
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 72
7015: IFFALSE 7073
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7017: LD_VAR 0 8
7021: PPUSH
7022: LD_EXP 41
7026: PPUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 1
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 24
7042: PUSH
7043: LD_INT 1000
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 72
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PPUSH
7067: CALL_OW 128
7071: GO 7119
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7073: LD_VAR 0 8
7077: PPUSH
7078: LD_EXP 41
7082: PPUSH
7083: LD_INT 3
7085: PUSH
7086: LD_INT 25
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PPUSH
7105: LD_VAR 0 8
7109: PPUSH
7110: CALL_OW 74
7114: PPUSH
7115: CALL_OW 112
7119: GO 7168
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7121: LD_VAR 0 8
7125: PPUSH
7126: LD_VAR 0 7
7130: PUSH
7131: LD_VAR 0 9
7135: PUSH
7136: LD_INT 1
7138: PLUS
7139: ARRAY
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PPUSH
7145: LD_VAR 0 7
7149: PUSH
7150: LD_VAR 0 9
7154: PUSH
7155: LD_INT 1
7157: PLUS
7158: ARRAY
7159: PUSH
7160: LD_INT 2
7162: ARRAY
7163: PPUSH
7164: CALL_OW 114
// end ; end ; end ;
7168: GO 6545
7170: POP
7171: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7172: LD_EXP 41
7176: PPUSH
7177: LD_INT 52
7179: PUSH
7180: EMPTY
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PPUSH
7197: CALL_OW 72
7201: NOT
7202: IFFALSE 6528
// end ;
7204: LD_VAR 0 1
7208: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7209: LD_EXP 16
7213: PUSH
7214: LD_INT 3
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: LESS
7225: PUSH
7226: LD_EXP 41
7230: NOT
7231: AND
7232: PUSH
7233: LD_OWVAR 67
7237: PUSH
7238: LD_INT 1
7240: GREATER
7241: AND
7242: IFFALSE 7662
7244: GO 7246
7246: DISABLE
7247: LD_INT 0
7249: PPUSH
7250: PPUSH
7251: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7252: LD_ADDR_VAR 0 1
7256: PUSH
7257: DOUBLE
7258: LD_INT 1
7260: DEC
7261: ST_TO_ADDR
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_OWVAR 67
7284: ARRAY
7285: PUSH
7286: FOR_TO
7287: IFFALSE 7583
// begin uc_side := 3 ;
7289: LD_ADDR_OWVAR 20
7293: PUSH
7294: LD_INT 3
7296: ST_TO_ADDR
// uc_nation := 3 ;
7297: LD_ADDR_OWVAR 21
7301: PUSH
7302: LD_INT 3
7304: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7305: LD_INT 3
7307: PPUSH
7308: LD_INT 3
7310: PPUSH
7311: LD_INT 21
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 23
7319: PUSH
7320: LD_INT 24
7322: PUSH
7323: LD_INT 24
7325: PUSH
7326: LD_INT 24
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: PPUSH
7342: LD_OWVAR 67
7346: PUSH
7347: LD_INT 2
7349: PLUS
7350: PPUSH
7351: CALL_OW 12
7355: ARRAY
7356: PPUSH
7357: LD_INT 1
7359: PPUSH
7360: LD_INT 1
7362: PPUSH
7363: LD_INT 42
7365: PUSH
7366: LD_INT 44
7368: PUSH
7369: LD_INT 43
7371: PUSH
7372: LD_INT 44
7374: PUSH
7375: LD_INT 46
7377: PUSH
7378: LD_INT 46
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 1
7391: PPUSH
7392: LD_OWVAR 67
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: CALL_OW 12
7405: ARRAY
7406: PPUSH
7407: LD_INT 90
7409: PPUSH
7410: CALL 447 0 7
// un := CreateVehicle ;
7414: LD_ADDR_VAR 0 3
7418: PUSH
7419: CALL_OW 45
7423: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7424: LD_VAR 0 3
7428: PPUSH
7429: LD_INT 0
7431: PPUSH
7432: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7436: LD_VAR 0 3
7440: PPUSH
7441: LD_INT 23
7443: PPUSH
7444: LD_INT 0
7446: PPUSH
7447: CALL 72903 0 3
7451: IFFALSE 7581
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7453: LD_ADDR_VAR 0 2
7457: PUSH
7458: LD_VAR 0 2
7462: PPUSH
7463: LD_VAR 0 2
7467: PUSH
7468: LD_INT 1
7470: PLUS
7471: PPUSH
7472: LD_VAR 0 3
7476: PPUSH
7477: CALL_OW 1
7481: ST_TO_ADDR
// uc_side := 3 ;
7482: LD_ADDR_OWVAR 20
7486: PUSH
7487: LD_INT 3
7489: ST_TO_ADDR
// uc_nation := 3 ;
7490: LD_ADDR_OWVAR 21
7494: PUSH
7495: LD_INT 3
7497: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7498: LD_INT 0
7500: PPUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 4
7506: PUSH
7507: LD_INT 5
7509: PUSH
7510: LD_INT 6
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: PUSH
7519: LD_OWVAR 67
7523: ARRAY
7524: PPUSH
7525: CALL_OW 383
// un := CreateHuman ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: CALL_OW 44
7538: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7539: LD_VAR 0 3
7543: PPUSH
7544: LD_VAR 0 2
7548: PUSH
7549: LD_VAR 0 2
7553: ARRAY
7554: PPUSH
7555: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7559: LD_VAR 0 3
7563: PPUSH
7564: LD_INT 80
7566: PPUSH
7567: LD_INT 139
7569: PPUSH
7570: CALL_OW 111
// wait ( 0 0$3 ) ;
7574: LD_INT 105
7576: PPUSH
7577: CALL_OW 67
// end ; end ;
7581: GO 7286
7583: POP
7584: POP
// for i in tmp do
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_VAR 0 2
7594: PUSH
7595: FOR_IN
7596: IFFALSE 7660
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7598: LD_VAR 0 1
7602: PPUSH
7603: LD_INT 101
7605: PPUSH
7606: LD_INT 102
7608: PPUSH
7609: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_INT 110
7620: PPUSH
7621: LD_INT 78
7623: PPUSH
7624: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7628: LD_VAR 0 1
7632: PPUSH
7633: LD_INT 75
7635: PPUSH
7636: LD_INT 101
7638: PPUSH
7639: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7643: LD_VAR 0 1
7647: PPUSH
7648: LD_INT 57
7650: PPUSH
7651: LD_INT 83
7653: PPUSH
7654: CALL_OW 174
// end ;
7658: GO 7595
7660: POP
7661: POP
// end ;
7662: PPOPN 3
7664: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7665: LD_EXP 39
7669: PPUSH
7670: LD_INT 3
7672: PUSH
7673: LD_INT 24
7675: PUSH
7676: LD_INT 1000
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PPUSH
7687: CALL_OW 72
7691: PUSH
7692: LD_EXP 40
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: OR
7719: IFFALSE 7818
7721: GO 7723
7723: DISABLE
7724: LD_INT 0
7726: PPUSH
// begin enable ;
7727: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7728: LD_ADDR_VAR 0 1
7732: PUSH
7733: LD_EXP 39
7737: PPUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 24
7743: PUSH
7744: LD_INT 1000
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 72
7759: PUSH
7760: LD_EXP 40
7764: PPUSH
7765: LD_INT 3
7767: PUSH
7768: LD_INT 24
7770: PUSH
7771: LD_INT 1000
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 72
7786: UNION
7787: PUSH
7788: FOR_IN
7789: IFFALSE 7816
// if IsSleeping ( i ) then
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 555
7800: IFFALSE 7814
// ForceSleep ( i , false ) ;
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL_OW 585
7814: GO 7788
7816: POP
7817: POP
// end ;
7818: PPOPN 1
7820: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7821: LD_EXP 38
7825: PPUSH
7826: LD_INT 1
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 54
7834: PUSH
7835: EMPTY
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 3
7844: PUSH
7845: LD_INT 95
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 72
7868: IFFALSE 7963
7870: GO 7872
7872: DISABLE
7873: LD_INT 0
7875: PPUSH
7876: PPUSH
// begin enable ;
7877: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7878: LD_ADDR_VAR 0 2
7882: PUSH
7883: LD_EXP 38
7887: PPUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 54
7896: PUSH
7897: EMPTY
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: LD_INT 95
7909: PUSH
7910: LD_INT 26
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 72
7930: ST_TO_ADDR
// for i in tmp do
7931: LD_ADDR_VAR 0 1
7935: PUSH
7936: LD_VAR 0 2
7940: PUSH
7941: FOR_IN
7942: IFFALSE 7961
// ComMoveXY ( i , 206 , 110 ) ;
7944: LD_VAR 0 1
7948: PPUSH
7949: LD_INT 206
7951: PPUSH
7952: LD_INT 110
7954: PPUSH
7955: CALL_OW 111
7959: GO 7941
7961: POP
7962: POP
// end ;
7963: PPOPN 2
7965: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7966: LD_INT 26
7968: PPUSH
7969: LD_INT 22
7971: PUSH
7972: LD_INT 2
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 70
7983: PUSH
7984: LD_INT 26
7986: PPUSH
7987: LD_INT 22
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 32
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 50
8009: PUSH
8010: EMPTY
8011: LIST
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 70
8022: AND
8023: IFFALSE 8102
8025: GO 8027
8027: DISABLE
8028: LD_INT 0
8030: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_INT 26
8038: PPUSH
8039: LD_INT 22
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 30
8051: PUSH
8052: LD_INT 32
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 50
8061: PUSH
8062: EMPTY
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 70
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8100
// if IsInUnit ( i ) then
8078: LD_VAR 0 1
8082: PPUSH
8083: CALL_OW 310
8087: IFFALSE 8098
// ComExitBuilding ( i ) ;
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 122
8098: GO 8075
8100: POP
8101: POP
// end ; end_of_file
8102: PPOPN 1
8104: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL 15035 0 1
// if un = Heike then
8114: LD_VAR 0 1
8118: PUSH
8119: LD_EXP 21
8123: EQUAL
8124: IFFALSE 8133
// YouLost ( Heike ) ;
8126: LD_STRING Heike
8128: PPUSH
8129: CALL_OW 104
// if un in apeSoldGroup then
8133: LD_VAR 0 1
8137: PUSH
8138: LD_EXP 42
8142: IN
8143: IFFALSE 8161
// apeSoldGroup := apeSoldGroup diff un ;
8145: LD_ADDR_EXP 42
8149: PUSH
8150: LD_EXP 42
8154: PUSH
8155: LD_VAR 0 1
8159: DIFF
8160: ST_TO_ADDR
// if un in apeEngGroup then
8161: LD_VAR 0 1
8165: PUSH
8166: LD_EXP 43
8170: IN
8171: IFFALSE 8189
// apeEngGroup := apeEngGroup diff un ;
8173: LD_ADDR_EXP 43
8177: PUSH
8178: LD_EXP 43
8182: PUSH
8183: LD_VAR 0 1
8187: DIFF
8188: ST_TO_ADDR
// if un in oilBaseGuard then
8189: LD_VAR 0 1
8193: PUSH
8194: LD_EXP 38
8198: IN
8199: IFFALSE 8217
// oilBaseGuard := oilBaseGuard diff un ;
8201: LD_ADDR_EXP 38
8205: PUSH
8206: LD_EXP 38
8210: PUSH
8211: LD_VAR 0 1
8215: DIFF
8216: ST_TO_ADDR
// if un in ruNorthGroup then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 39
8226: IN
8227: IFFALSE 8245
// ruNorthGroup := ruNorthGroup diff un ;
8229: LD_ADDR_EXP 39
8233: PUSH
8234: LD_EXP 39
8238: PUSH
8239: LD_VAR 0 1
8243: DIFF
8244: ST_TO_ADDR
// if un in ruSouthGroup then
8245: LD_VAR 0 1
8249: PUSH
8250: LD_EXP 40
8254: IN
8255: IFFALSE 8273
// ruSouthGroup := ruSouthGroup diff un ;
8257: LD_ADDR_EXP 40
8261: PUSH
8262: LD_EXP 40
8266: PUSH
8267: LD_VAR 0 1
8271: DIFF
8272: ST_TO_ADDR
// if un in ruConvoySquad then
8273: LD_VAR 0 1
8277: PUSH
8278: LD_EXP 41
8282: IN
8283: IFFALSE 8301
// ruConvoySquad := ruConvoySquad diff un ;
8285: LD_ADDR_EXP 41
8289: PUSH
8290: LD_EXP 41
8294: PUSH
8295: LD_VAR 0 1
8299: DIFF
8300: ST_TO_ADDR
// end ;
8301: PPOPN 1
8303: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8304: LD_VAR 0 1
8308: PPUSH
8309: LD_VAR 0 2
8313: PPUSH
8314: CALL 15093 0 2
// if GetWeapon ( veh ) = ar_radar then
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 264
8327: PUSH
8328: LD_INT 30
8330: EQUAL
8331: IFFALSE 8341
// radarConstructed := true ;
8333: LD_ADDR_EXP 13
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 264
8350: PUSH
8351: LD_INT 26
8353: EQUAL
8354: IFFALSE 8364
// flamethrowerBuilt := true ;
8356: LD_ADDR_EXP 20
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// end ;
8364: PPOPN 2
8366: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8367: LD_ADDR_EXP 18
8371: PUSH
8372: LD_EXP 18
8376: PUSH
8377: LD_INT 1
8379: PLUS
8380: ST_TO_ADDR
// if oldId in ruConvoySquad then
8381: LD_VAR 0 2
8385: PUSH
8386: LD_EXP 41
8390: IN
8391: IFFALSE 8409
// ruConvoySquad := ruConvoySquad diff oldId ;
8393: LD_ADDR_EXP 41
8397: PUSH
8398: LD_EXP 41
8402: PUSH
8403: LD_VAR 0 2
8407: DIFF
8408: ST_TO_ADDR
// if newId in ruConvoySquad then
8409: LD_VAR 0 1
8413: PUSH
8414: LD_EXP 41
8418: IN
8419: IFFALSE 8437
// ruConvoySquad := ruConvoySquad diff newId ;
8421: LD_ADDR_EXP 41
8425: PUSH
8426: LD_EXP 41
8430: PUSH
8431: LD_VAR 0 1
8435: DIFF
8436: ST_TO_ADDR
// end ; end_of_file
8437: PPOPN 4
8439: END
// export function Action ; var i , p , un , veh , tmp ; begin
8440: LD_INT 0
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
8447: PPUSH
// InGameOn ;
8448: CALL_OW 8
// music_nat := 2 ;
8452: LD_ADDR_OWVAR 71
8456: PUSH
8457: LD_INT 2
8459: ST_TO_ADDR
// music_class := music_recon ;
8460: LD_ADDR_OWVAR 72
8464: PUSH
8465: LD_INT 3
8467: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8468: LD_INT 7
8470: PPUSH
8471: LD_INT 6
8473: PPUSH
8474: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8478: LD_INT 7
8480: PPUSH
8481: LD_INT 6
8483: PPUSH
8484: LD_INT 2
8486: PPUSH
8487: LD_INT 30
8489: NEG
8490: PPUSH
8491: CALL 1155 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8495: LD_ADDR_VAR 0 6
8499: PUSH
8500: LD_EXP 21
8504: PUSH
8505: LD_EXP 22
8509: PUSH
8510: LD_EXP 23
8514: PUSH
8515: LD_EXP 24
8519: PUSH
8520: LD_EXP 25
8524: PUSH
8525: LD_EXP 26
8529: PUSH
8530: LD_EXP 28
8534: PUSH
8535: LD_EXP 33
8539: PUSH
8540: LD_EXP 27
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: ST_TO_ADDR
// tmp := tmp diff 0 ;
8556: LD_ADDR_VAR 0 6
8560: PUSH
8561: LD_VAR 0 6
8565: PUSH
8566: LD_INT 0
8568: DIFF
8569: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8570: LD_ADDR_VAR 0 6
8574: PUSH
8575: LD_VAR 0 6
8579: PPUSH
8580: LD_INT 3
8582: PPUSH
8583: CALL 72502 0 2
8587: ST_TO_ADDR
// for i in heikeVehicles do
8588: LD_ADDR_VAR 0 2
8592: PUSH
8593: LD_EXP 35
8597: PUSH
8598: FOR_IN
8599: IFFALSE 8798
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8601: LD_INT 5
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_INT 5
8611: ARRAY
8612: PPUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 2
8635: PUSH
8636: LD_INT 3
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 2
8644: PUSH
8645: LD_INT 4
8647: ARRAY
8648: PPUSH
8649: LD_INT 34
8651: PPUSH
8652: CALL 447 0 7
// veh := CreateVehicle ;
8656: LD_ADDR_VAR 0 5
8660: PUSH
8661: CALL_OW 45
8665: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 4
8673: ARRAY
8674: PUSH
8675: LD_INT 51
8677: PUSH
8678: LD_INT 32
8680: PUSH
8681: LD_INT 12
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: IN
8689: IFFALSE 8769
// begin if i [ 7 ] [ 1 ] then
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 7
8698: ARRAY
8699: PUSH
8700: LD_INT 1
8702: ARRAY
8703: IFFALSE 8730
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8705: LD_VAR 0 5
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: LD_VAR 0 2
8717: PUSH
8718: LD_INT 7
8720: ARRAY
8721: PUSH
8722: LD_INT 1
8724: ARRAY
8725: PPUSH
8726: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8730: LD_VAR 0 2
8734: PUSH
8735: LD_INT 7
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: IFFALSE 8769
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: LD_VAR 0 2
8756: PUSH
8757: LD_INT 7
8759: ARRAY
8760: PUSH
8761: LD_INT 2
8763: ARRAY
8764: PPUSH
8765: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8769: LD_VAR 0 5
8773: PPUSH
8774: LD_INT 2
8776: PPUSH
8777: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8781: LD_VAR 0 5
8785: PPUSH
8786: LD_INT 4
8788: PPUSH
8789: LD_INT 0
8791: PPUSH
8792: CALL_OW 49
// end ;
8796: GO 8598
8798: POP
8799: POP
// if tmp then
8800: LD_VAR 0 6
8804: IFFALSE 8914
// begin p := 0 ;
8806: LD_ADDR_VAR 0 3
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// for i in tmp do
8814: LD_ADDR_VAR 0 2
8818: PUSH
8819: LD_VAR 0 6
8823: PUSH
8824: FOR_IN
8825: IFFALSE 8912
// begin p := p + 1 ;
8827: LD_ADDR_VAR 0 3
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: LD_INT 0
8851: PPUSH
8852: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 26
8863: PPUSH
8864: LD_INT 9
8866: PPUSH
8867: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8871: LD_VAR 0 3
8875: PUSH
8876: LD_EXP 35
8880: GREATEREQUAL
8881: PUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 3
8894: EQUAL
8895: AND
8896: IFFALSE 8910
// SetClass ( i , 1 ) ;
8898: LD_VAR 0 2
8902: PPUSH
8903: LD_INT 1
8905: PPUSH
8906: CALL_OW 336
// end ;
8910: GO 8824
8912: POP
8913: POP
// end ; if heikeSecondSquad then
8914: LD_EXP 34
8918: IFFALSE 9020
// for i in heikeSecondSquad do
8920: LD_ADDR_VAR 0 2
8924: PUSH
8925: LD_EXP 34
8929: PUSH
8930: FOR_IN
8931: IFFALSE 9018
// begin p := p + 1 ;
8933: LD_ADDR_VAR 0 3
8937: PUSH
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 1
8945: PLUS
8946: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8947: LD_VAR 0 2
8951: PPUSH
8952: LD_INT 6
8954: PPUSH
8955: LD_INT 0
8957: PPUSH
8958: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8962: LD_VAR 0 2
8966: PPUSH
8967: LD_INT 26
8969: PPUSH
8970: LD_INT 9
8972: PPUSH
8973: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_EXP 35
8986: GREATEREQUAL
8987: PUSH
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 257
8997: PUSH
8998: LD_INT 3
9000: EQUAL
9001: AND
9002: IFFALSE 9016
// SetClass ( i , 1 ) ;
9004: LD_VAR 0 2
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 336
// end ;
9016: GO 8930
9018: POP
9019: POP
// if heikeApes then
9020: LD_EXP 36
9024: IFFALSE 9067
// for i in heikeApes do
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_EXP 36
9035: PUSH
9036: FOR_IN
9037: IFFALSE 9065
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9039: LD_VAR 0 2
9043: PPUSH
9044: LD_INT 7
9046: PPUSH
9047: LD_INT 0
9049: PPUSH
9050: CALL_OW 49
// ComHold ( i ) ;
9054: LD_VAR 0 2
9058: PPUSH
9059: CALL_OW 140
// end ;
9063: GO 9036
9065: POP
9066: POP
// if Kurt then
9067: LD_EXP 32
9071: IFFALSE 9103
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9073: LD_EXP 32
9077: PPUSH
9078: LD_INT 8
9080: PPUSH
9081: LD_INT 0
9083: PPUSH
9084: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9088: LD_EXP 32
9092: PPUSH
9093: LD_INT 42
9095: PPUSH
9096: LD_INT 32
9098: PPUSH
9099: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9103: LD_INT 70
9105: PPUSH
9106: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9110: LD_EXP 21
9114: PPUSH
9115: LD_STRING DH-Start-1
9117: PPUSH
9118: CALL_OW 88
// if Givi then
9122: LD_EXP 22
9126: IFFALSE 9389
// begin Say ( Givi , DG-Start-2-5 ) ;
9128: LD_EXP 22
9132: PPUSH
9133: LD_STRING DG-Start-2-5
9135: PPUSH
9136: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9140: LD_EXP 21
9144: PPUSH
9145: LD_STRING DH-Start-3
9147: PPUSH
9148: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9152: LD_EXP 21
9156: PPUSH
9157: LD_STRING DH-Start-4
9159: PPUSH
9160: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9164: LD_EXP 22
9168: PPUSH
9169: LD_STRING DG-Start-5
9171: PPUSH
9172: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-Start-6
9183: PPUSH
9184: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9188: LD_EXP 22
9192: PPUSH
9193: LD_STRING DG-Start-7
9195: PPUSH
9196: CALL_OW 88
// if Mike then
9200: LD_EXP 23
9204: IFFALSE 9377
// begin Say ( Mike , DM-Start-8 ) ;
9206: LD_EXP 23
9210: PPUSH
9211: LD_STRING DM-Start-8
9213: PPUSH
9214: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9218: LD_EXP 23
9222: PPUSH
9223: LD_STRING DM-Start-9
9225: PPUSH
9226: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9230: LD_EXP 22
9234: PPUSH
9235: LD_STRING DG-Start-10
9237: PPUSH
9238: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9242: LD_EXP 22
9246: PPUSH
9247: LD_STRING DG-Start-11
9249: PPUSH
9250: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9254: LD_EXP 21
9258: PPUSH
9259: LD_STRING DH-Start-12
9261: PPUSH
9262: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9266: LD_EXP 22
9270: PPUSH
9271: LD_STRING DG-Start-13
9273: PPUSH
9274: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9278: LD_EXP 22
9282: PPUSH
9283: LD_STRING DG-Start-14
9285: PPUSH
9286: CALL_OW 88
// if Kaia then
9290: LD_EXP 26
9294: IFFALSE 9377
// begin Say ( Kaia , DK-Start-15 ) ;
9296: LD_EXP 26
9300: PPUSH
9301: LD_STRING DK-Start-15
9303: PPUSH
9304: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9308: LD_EXP 26
9312: PPUSH
9313: LD_STRING DK-Start-16
9315: PPUSH
9316: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9320: LD_EXP 26
9324: PPUSH
9325: LD_STRING DK-Start-17
9327: PPUSH
9328: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9332: LD_INT 10
9334: PPUSH
9335: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9339: LD_EXP 22
9343: PPUSH
9344: LD_EXP 26
9348: PPUSH
9349: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9353: LD_EXP 22
9357: PPUSH
9358: LD_STRING DG-Start-18
9360: PPUSH
9361: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9365: LD_EXP 26
9369: PPUSH
9370: LD_STRING DK-Start-19
9372: PPUSH
9373: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9377: LD_EXP 21
9381: PPUSH
9382: LD_STRING DH-Start-20
9384: PPUSH
9385: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9389: LD_INT 70
9391: PPUSH
9392: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9396: LD_EXP 29
9400: PPUSH
9401: LD_STRING DShar-Start-21
9403: PPUSH
9404: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9408: LD_EXP 21
9412: PPUSH
9413: LD_STRING DH-Start-22
9415: PPUSH
9416: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9420: LD_EXP 29
9424: PPUSH
9425: LD_STRING DShar-Start-23
9427: PPUSH
9428: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9432: LD_EXP 29
9436: PPUSH
9437: LD_STRING DShar-Start-24
9439: PPUSH
9440: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9444: LD_EXP 29
9448: PPUSH
9449: LD_STRING DShar-Start-25
9451: PPUSH
9452: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9456: LD_EXP 29
9460: PPUSH
9461: LD_STRING DShar-Start-26
9463: PPUSH
9464: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9468: LD_EXP 21
9472: PPUSH
9473: LD_STRING DH-Start-27
9475: PPUSH
9476: CALL_OW 88
// if Kaia then
9480: LD_EXP 26
9484: IFFALSE 9526
// begin ComTurnUnit ( Heike , Kaia ) ;
9486: LD_EXP 21
9490: PPUSH
9491: LD_EXP 26
9495: PPUSH
9496: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9500: LD_EXP 26
9504: PPUSH
9505: LD_STRING DK-Start-28
9507: PPUSH
9508: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9512: LD_EXP 21
9516: PPUSH
9517: LD_STRING DH-Start-29
9519: PPUSH
9520: CALL_OW 88
// end else
9524: GO 9538
// Say ( Heike , DH-Start-a-28 ) ;
9526: LD_EXP 21
9530: PPUSH
9531: LD_STRING DH-Start-a-28
9533: PPUSH
9534: CALL_OW 88
// if Givi then
9538: LD_EXP 22
9542: IFFALSE 9777
// begin ComTurnUnit ( Heike , Givi ) ;
9544: LD_EXP 21
9548: PPUSH
9549: LD_EXP 22
9553: PPUSH
9554: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9558: LD_EXP 22
9562: PPUSH
9563: LD_EXP 21
9567: PPUSH
9568: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9572: LD_EXP 21
9576: PPUSH
9577: LD_STRING DH-Start-30
9579: PPUSH
9580: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9584: LD_EXP 21
9588: PPUSH
9589: LD_STRING DH-Start-31
9591: PPUSH
9592: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9596: LD_EXP 22
9600: PPUSH
9601: LD_STRING DG-Start-32
9603: PPUSH
9604: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9608: LD_EXP 21
9612: PPUSH
9613: LD_STRING DH-Start-33
9615: PPUSH
9616: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9620: LD_EXP 22
9624: PPUSH
9625: LD_STRING DG-Start-34
9627: PPUSH
9628: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9632: LD_EXP 22
9636: PPUSH
9637: LD_STRING DG-Start-35
9639: PPUSH
9640: CALL_OW 88
// if Kurt and not dialogue_skipped then
9644: LD_EXP 32
9648: PUSH
9649: LD_OWVAR 59
9653: NOT
9654: AND
9655: IFFALSE 9686
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9657: LD_EXP 32
9661: PPUSH
9662: LD_INT 28
9664: PPUSH
9665: LD_INT 13
9667: PPUSH
9668: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9672: LD_EXP 32
9676: PPUSH
9677: LD_EXP 21
9681: PPUSH
9682: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9686: LD_EXP 22
9690: PPUSH
9691: LD_STRING DG-Start-36
9693: PPUSH
9694: CALL_OW 88
// if Kurt then
9698: LD_EXP 32
9702: IFFALSE 9775
// begin if not Givi then
9704: LD_EXP 22
9708: NOT
9709: IFFALSE 9725
// Say ( Kurt , DKs-Start-37-a ) else
9711: LD_EXP 32
9715: PPUSH
9716: LD_STRING DKs-Start-37-a
9718: PPUSH
9719: CALL_OW 88
9723: GO 9737
// Say ( Kurt , DKs-Start-37 ) ;
9725: LD_EXP 32
9729: PPUSH
9730: LD_STRING DKs-Start-37
9732: PPUSH
9733: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9737: LD_EXP 32
9741: PPUSH
9742: LD_STRING DKs-Start-38
9744: PPUSH
9745: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9749: LD_EXP 21
9753: PPUSH
9754: LD_EXP 32
9758: PPUSH
9759: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9763: LD_EXP 21
9767: PPUSH
9768: LD_STRING DH-Start-39
9770: PPUSH
9771: CALL_OW 88
// end ; end else
9775: GO 9806
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9777: LD_EXP 34
9781: PPUSH
9782: LD_STRING DArm-Start-a-37
9784: PPUSH
9785: LD_STRING DArf-Start-a-37
9787: PPUSH
9788: CALL 1206 0 3
9792: IFFALSE 9806
// Say ( Heike , DH-Start-39 ) ;
9794: LD_EXP 21
9798: PPUSH
9799: LD_STRING DH-Start-39
9801: PPUSH
9802: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9806: LD_INT 44
9808: PPUSH
9809: LD_INT 25
9811: PPUSH
9812: CALL_OW 428
9816: IFFALSE 9833
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9818: LD_INT 44
9820: PPUSH
9821: LD_INT 25
9823: PPUSH
9824: CALL_OW 428
9828: PPUSH
9829: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9833: LD_EXP 30
9837: PPUSH
9838: LD_INT 5
9840: PPUSH
9841: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9845: LD_EXP 30
9849: PPUSH
9850: LD_INT 44
9852: PPUSH
9853: LD_INT 25
9855: PPUSH
9856: LD_INT 0
9858: PPUSH
9859: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9863: LD_EXP 30
9867: PPUSH
9868: LD_INT 29
9870: PPUSH
9871: LD_INT 12
9873: PPUSH
9874: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9878: LD_INT 35
9880: PPUSH
9881: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9885: LD_OWVAR 59
9889: PUSH
9890: LD_EXP 21
9894: PPUSH
9895: LD_EXP 30
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: LESS
9908: OR
9909: PUSH
9910: LD_EXP 30
9914: PPUSH
9915: LD_INT 26
9917: PPUSH
9918: LD_INT 9
9920: PPUSH
9921: CALL_OW 297
9925: PUSH
9926: LD_INT 6
9928: LESS
9929: OR
9930: IFFALSE 9878
// Say ( Olaf , DO-Scout-1 ) ;
9932: LD_EXP 30
9936: PPUSH
9937: LD_STRING DO-Scout-1
9939: PPUSH
9940: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9944: LD_EXP 30
9948: PPUSH
9949: LD_EXP 21
9953: PPUSH
9954: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9958: LD_ADDR_VAR 0 2
9962: PUSH
9963: LD_VAR 0 6
9967: PUSH
9968: LD_EXP 34
9972: UNION
9973: PUSH
9974: FOR_IN
9975: IFFALSE 9993
// ComTurnUnit ( i , Olaf ) ;
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_EXP 30
9986: PPUSH
9987: CALL_OW 119
9991: GO 9974
9993: POP
9994: POP
// wait ( 0 0$0.3 ) ;
9995: LD_INT 10
9997: PPUSH
9998: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10002: LD_EXP 21
10006: PPUSH
10007: LD_EXP 30
10011: PPUSH
10012: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10016: LD_EXP 21
10020: PPUSH
10021: LD_EXP 30
10025: PPUSH
10026: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10030: LD_EXP 21
10034: PPUSH
10035: LD_STRING DH-Scout-2
10037: PPUSH
10038: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10042: LD_EXP 30
10046: PPUSH
10047: LD_STRING DO-Scout-3
10049: PPUSH
10050: CALL_OW 88
// if Mike and Givi then
10054: LD_EXP 23
10058: PUSH
10059: LD_EXP 22
10063: AND
10064: IFFALSE 10080
// Say ( Olaf , DO-Scout-4 ) else
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-4
10073: PPUSH
10074: CALL_OW 88
10078: GO 10180
// begin if Mike then
10080: LD_EXP 23
10084: IFFALSE 10112
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10086: LD_EXP 30
10090: PPUSH
10091: LD_STRING DO-Scout-a-4
10093: PPUSH
10094: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10098: LD_EXP 21
10102: PPUSH
10103: LD_STRING DH-Scout-a-5
10105: PPUSH
10106: CALL_OW 88
// end else
10110: GO 10180
// if Givi then
10112: LD_EXP 22
10116: IFFALSE 10144
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10118: LD_EXP 30
10122: PPUSH
10123: LD_STRING DO-Scout-b-4
10125: PPUSH
10126: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10130: LD_EXP 21
10134: PPUSH
10135: LD_STRING DH-Scout-b-5
10137: PPUSH
10138: CALL_OW 88
// end else
10142: GO 10180
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10144: LD_EXP 30
10148: PPUSH
10149: LD_STRING DO-Scout-f-4
10151: PPUSH
10152: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10156: LD_EXP 21
10160: PPUSH
10161: LD_STRING DH-Scout-f-5
10163: PPUSH
10164: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10168: LD_EXP 30
10172: PPUSH
10173: LD_STRING DO-Scout-f-6
10175: PPUSH
10176: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10180: LD_EXP 21
10184: PPUSH
10185: LD_STRING DH-Scout-5
10187: PPUSH
10188: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10192: LD_EXP 30
10196: PPUSH
10197: LD_STRING DO-Scout-6
10199: PPUSH
10200: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10204: LD_EXP 30
10208: PPUSH
10209: LD_STRING DO-Scout-7
10211: PPUSH
10212: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10216: LD_EXP 21
10220: PPUSH
10221: LD_STRING DH-Scout-8
10223: PPUSH
10224: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10228: LD_EXP 21
10232: PPUSH
10233: LD_STRING DH-Scout-9
10235: PPUSH
10236: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10240: LD_EXP 30
10244: PPUSH
10245: LD_STRING DO-Scout-10
10247: PPUSH
10248: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10252: LD_EXP 30
10256: PPUSH
10257: LD_STRING DO-Scout-12
10259: PPUSH
10260: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10264: LD_EXP 30
10268: PPUSH
10269: LD_STRING DO-Scout-13
10271: PPUSH
10272: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10276: LD_EXP 30
10280: PPUSH
10281: LD_STRING DO-Scout-14
10283: PPUSH
10284: CALL_OW 88
// if Givi then
10288: LD_EXP 22
10292: IFFALSE 10318
// begin Say ( Givi , DG-Scout-15 ) ;
10294: LD_EXP 22
10298: PPUSH
10299: LD_STRING DG-Scout-15
10301: PPUSH
10302: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10306: LD_EXP 26
10310: PPUSH
10311: LD_STRING DK-Scout-16
10313: PPUSH
10314: CALL_OW 88
// end ; if not dialogue_skipped then
10318: LD_OWVAR 59
10322: NOT
10323: IFFALSE 10444
// begin async ;
10325: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10326: LD_EXP 30
10330: PPUSH
10331: LD_STRING DO-Scout-17
10333: PPUSH
10334: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10338: LD_INT 55
10340: PPUSH
10341: LD_INT 77
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 6
10349: NEG
10350: PPUSH
10351: CALL 1155 0 4
// wait ( 10 ) ;
10355: LD_INT 10
10357: PPUSH
10358: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10362: LD_INT 55
10364: PPUSH
10365: LD_INT 77
10367: PPUSH
10368: CALL_OW 84
// wait ( 0 0$10 ) ;
10372: LD_INT 350
10374: PPUSH
10375: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10379: LD_EXP 30
10383: PPUSH
10384: LD_STRING DO-Scout-18
10386: PPUSH
10387: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10391: LD_INT 204
10393: PPUSH
10394: LD_INT 107
10396: PPUSH
10397: LD_INT 2
10399: PPUSH
10400: LD_INT 12
10402: NEG
10403: PPUSH
10404: CALL 1155 0 4
// wait ( 10 ) ;
10408: LD_INT 10
10410: PPUSH
10411: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10415: LD_INT 204
10417: PPUSH
10418: LD_INT 107
10420: PPUSH
10421: CALL_OW 84
// wait ( 0 0$10 ) ;
10425: LD_INT 350
10427: PPUSH
10428: CALL_OW 67
// sync ;
10432: SYNC
// CenterNowOnUnits ( Heike ) ;
10433: LD_EXP 21
10437: PPUSH
10438: CALL_OW 87
// end else
10442: GO 10478
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10444: LD_INT 55
10446: PPUSH
10447: LD_INT 77
10449: PPUSH
10450: LD_INT 2
10452: PPUSH
10453: LD_INT 6
10455: NEG
10456: PPUSH
10457: CALL 1155 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10461: LD_INT 204
10463: PPUSH
10464: LD_INT 107
10466: PPUSH
10467: LD_INT 2
10469: PPUSH
10470: LD_INT 12
10472: NEG
10473: PPUSH
10474: CALL 1155 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10478: LD_EXP 30
10482: PPUSH
10483: LD_STRING DO-Scout-19
10485: PPUSH
10486: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10490: LD_EXP 30
10494: PPUSH
10495: LD_STRING DO-Scout-20
10497: PPUSH
10498: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10502: LD_EXP 21
10506: PPUSH
10507: LD_STRING DH-Scout-21
10509: PPUSH
10510: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10514: LD_EXP 21
10518: PPUSH
10519: LD_STRING DH-Scout-22
10521: PPUSH
10522: CALL_OW 88
// InGameOff ;
10526: CALL_OW 9
// if heikeSecondSquad then
10530: LD_EXP 34
10534: IFFALSE 10548
// ForceSleep ( heikeSecondSquad , false ) ;
10536: LD_EXP 34
10540: PPUSH
10541: LD_INT 0
10543: PPUSH
10544: CALL_OW 585
// if Givi then
10548: LD_EXP 22
10552: IFFALSE 10567
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10554: LD_INT 13
10556: PPUSH
10557: LD_INT 2
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10567: LD_STRING Road
10569: PPUSH
10570: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: LD_INT 22
10581: PUSH
10582: LD_INT 5
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 21
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 69
10607: PUSH
10608: FOR_IN
10609: IFFALSE 10625
// SetSide ( i , 2 ) ;
10611: LD_VAR 0 2
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: CALL_OW 235
10623: GO 10608
10625: POP
10626: POP
// SaveForQuickRestart ;
10627: CALL_OW 22
// music_class := music_auto ;
10631: LD_ADDR_OWVAR 72
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// end ;
10639: LD_VAR 0 1
10643: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10644: LD_INT 2
10646: PPUSH
10647: LD_INT 9
10649: PPUSH
10650: CALL_OW 294
10654: IFFALSE 11019
10656: GO 10658
10658: DISABLE
// begin DialogueOn ;
10659: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10663: LD_INT 111
10665: PPUSH
10666: LD_INT 72
10668: PPUSH
10669: LD_INT 2
10671: PPUSH
10672: LD_INT 20
10674: NEG
10675: PPUSH
10676: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10680: LD_INT 111
10682: PPUSH
10683: LD_INT 72
10685: PPUSH
10686: LD_INT 2
10688: PPUSH
10689: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10693: LD_INT 111
10695: PPUSH
10696: LD_INT 72
10698: PPUSH
10699: CALL_OW 86
// if IsOk ( Kamil ) then
10703: LD_EXP 25
10707: PPUSH
10708: CALL_OW 302
10712: IFFALSE 10829
// begin Say ( Kamil , DKam-Cross-1 ) ;
10714: LD_EXP 25
10718: PPUSH
10719: LD_STRING DKam-Cross-1
10721: PPUSH
10722: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10726: LD_EXP 25
10730: PPUSH
10731: LD_STRING DKam-Cross-2
10733: PPUSH
10734: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10738: LD_EXP 25
10742: PPUSH
10743: LD_STRING DKam-Cross-3
10745: PPUSH
10746: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10750: LD_EXP 25
10754: PPUSH
10755: LD_STRING DKam-Cross-4
10757: PPUSH
10758: CALL_OW 88
// if IsOk ( Ibrahim ) then
10762: LD_EXP 24
10766: PPUSH
10767: CALL_OW 302
10771: IFFALSE 10827
// begin if ibrahimJoinedIn04 then
10773: LD_EXP 4
10777: IFFALSE 10791
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10779: LD_EXP 24
10783: PPUSH
10784: LD_STRING DI-Cross-b-5
10786: PPUSH
10787: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10791: LD_EXP 24
10795: PPUSH
10796: LD_STRING DI-Cross-b-6
10798: PPUSH
10799: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10803: LD_EXP 24
10807: PPUSH
10808: LD_STRING DI-Cross-b-7
10810: PPUSH
10811: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10815: LD_EXP 25
10819: PPUSH
10820: LD_STRING DKam-Cross-8
10822: PPUSH
10823: CALL_OW 88
// end ; end else
10827: GO 10987
// if IsOk ( Sophia ) then
10829: LD_EXP 27
10833: PPUSH
10834: CALL_OW 302
10838: IFFALSE 10955
// begin Say ( Sophia , DS-Cross-1 ) ;
10840: LD_EXP 27
10844: PPUSH
10845: LD_STRING DS-Cross-1
10847: PPUSH
10848: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10852: LD_EXP 27
10856: PPUSH
10857: LD_STRING DS-Cross-2
10859: PPUSH
10860: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10864: LD_EXP 27
10868: PPUSH
10869: LD_STRING DS-Cross-3
10871: PPUSH
10872: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10876: LD_EXP 27
10880: PPUSH
10881: LD_STRING DS-Cross-4
10883: PPUSH
10884: CALL_OW 88
// if IsOk ( Ibrahim ) then
10888: LD_EXP 24
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10953
// begin if ibrahimJoinedIn04 then
10899: LD_EXP 4
10903: IFFALSE 10917
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10905: LD_EXP 24
10909: PPUSH
10910: LD_STRING DI-Cross-b-5
10912: PPUSH
10913: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10917: LD_EXP 24
10921: PPUSH
10922: LD_STRING DI-Cross-b-6
10924: PPUSH
10925: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10929: LD_EXP 24
10933: PPUSH
10934: LD_STRING DI-Cross-b-7
10936: PPUSH
10937: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10941: LD_EXP 27
10945: PPUSH
10946: LD_STRING DS-Cross-8
10948: PPUSH
10949: CALL_OW 88
// end ; end else
10953: GO 10987
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10955: LD_EXP 34
10959: PPUSH
10960: LD_INT 50
10962: PUSH
10963: EMPTY
10964: LIST
10965: PPUSH
10966: CALL_OW 72
10970: IFFALSE 10987
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10972: LD_EXP 34
10976: PPUSH
10977: LD_STRING DArm-Cross-c-1
10979: PPUSH
10980: LD_STRING DArf-Cross-c-1
10982: PPUSH
10983: CALL 1206 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10987: LD_INT 85
10989: PPUSH
10990: LD_INT 2
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// DialogueOff ;
11000: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11004: LD_STRING Crane
11006: PPUSH
11007: CALL_OW 337
// spottedCrossRoad := true ;
11011: LD_ADDR_EXP 8
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// end ;
11019: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11020: LD_INT 22
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: LD_INT 30
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: PUSH
11067: LD_EXP 26
11071: PPUSH
11072: CALL_OW 302
11076: PUSH
11077: LD_EXP 34
11081: OR
11082: AND
11083: IFFALSE 11295
11085: GO 11087
11087: DISABLE
// begin DialogueOn ;
11088: CALL_OW 6
// if Kaia then
11092: LD_EXP 26
11096: IFFALSE 11109
// CenterNowOnUnits ( Kaia ) else
11098: LD_EXP 26
11102: PPUSH
11103: CALL_OW 87
11107: GO 11118
// CenterNowOnUnits ( Heike ) ;
11109: LD_EXP 21
11113: PPUSH
11114: CALL_OW 87
// if IsOk ( Kaia ) then
11118: LD_EXP 26
11122: PPUSH
11123: CALL_OW 302
11127: IFFALSE 11143
// Say ( Kaia , DK-Cam-1 ) else
11129: LD_EXP 26
11133: PPUSH
11134: LD_STRING DK-Cam-1
11136: PPUSH
11137: CALL_OW 88
11141: GO 11158
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11143: LD_EXP 34
11147: PPUSH
11148: LD_STRING DArm-Cam-1
11150: PPUSH
11151: LD_STRING DArf-Cam-1
11153: PPUSH
11154: CALL 1206 0 3
// Say ( Heike , DH-Cam-2 ) ;
11158: LD_EXP 21
11162: PPUSH
11163: LD_STRING DH-Cam-2
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11170: LD_EXP 21
11174: PPUSH
11175: LD_STRING DH-Cam-3
11177: PPUSH
11178: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11182: LD_EXP 21
11186: PPUSH
11187: LD_STRING DH-Cam-4
11189: PPUSH
11190: CALL_OW 88
// if IsOk ( Kaia ) then
11194: LD_EXP 26
11198: PPUSH
11199: CALL_OW 302
11203: IFFALSE 11219
// Say ( Kaia , DK-Cam-5 ) else
11205: LD_EXP 26
11209: PPUSH
11210: LD_STRING DK-Cam-5
11212: PPUSH
11213: CALL_OW 88
11217: GO 11234
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11219: LD_EXP 34
11223: PPUSH
11224: LD_STRING DArm-Cam-5
11226: PPUSH
11227: LD_STRING DArf-Cam-5
11229: PPUSH
11230: CALL 1206 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11234: LD_EXP 30
11238: PPUSH
11239: LD_STRING DO-Cam-6
11241: PPUSH
11242: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11246: LD_EXP 30
11250: PPUSH
11251: LD_STRING DO-Cam-7
11253: PPUSH
11254: CALL_OW 88
// DialogueOff ;
11258: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11262: LD_STRING Radar
11264: PPUSH
11265: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11269: LD_INT 6
11271: PPUSH
11272: LD_INT 2
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11282: LD_INT 20
11284: PPUSH
11285: LD_INT 2
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 324
// end ;
11295: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11296: LD_INT 22
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 2
11308: PUSH
11309: LD_INT 34
11311: PUSH
11312: LD_INT 30
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 35
11321: PUSH
11322: LD_INT 30
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PPUSH
11338: CALL_OW 69
11342: IFFALSE 11354
11344: GO 11346
11346: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11347: LD_STRING RadarDone
11349: PPUSH
11350: CALL_OW 337
11354: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11355: LD_INT 22
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 34
11367: PUSH
11368: LD_INT 88
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: IFFALSE 11395
11385: GO 11387
11387: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11388: LD_STRING CraneDone
11390: PPUSH
11391: CALL_OW 337
11395: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11396: LD_EXP 30
11400: PPUSH
11401: CALL_OW 302
11405: PUSH
11406: LD_EXP 33
11410: PPUSH
11411: CALL_OW 302
11415: AND
11416: PUSH
11417: LD_INT 6
11419: PPUSH
11420: LD_INT 2
11422: PPUSH
11423: CALL_OW 321
11427: PUSH
11428: LD_INT 2
11430: EQUAL
11431: AND
11432: PUSH
11433: LD_EXP 33
11437: PPUSH
11438: LD_EXP 21
11442: PPUSH
11443: CALL_OW 296
11447: PUSH
11448: LD_INT 10
11450: LESS
11451: PUSH
11452: LD_EXP 33
11456: PPUSH
11457: CALL_OW 310
11461: OR
11462: AND
11463: IFFALSE 11677
11465: GO 11467
11467: DISABLE
// begin DialogueOn ;
11468: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11472: LD_EXP 33
11476: PPUSH
11477: LD_STRING DA-RC-1
11479: PPUSH
11480: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11484: LD_EXP 33
11488: PPUSH
11489: LD_STRING DA-RC-2
11491: PPUSH
11492: CALL_OW 88
// if IsOk ( Kaia ) then
11496: LD_EXP 26
11500: PPUSH
11501: CALL_OW 302
11505: IFFALSE 11579
// begin Say ( Kaia , DK-RC-3 ) ;
11507: LD_EXP 26
11511: PPUSH
11512: LD_STRING DK-RC-3
11514: PPUSH
11515: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11519: LD_EXP 33
11523: PPUSH
11524: LD_STRING DA-RC-4
11526: PPUSH
11527: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11531: LD_EXP 26
11535: PPUSH
11536: LD_STRING DK-RC-5
11538: PPUSH
11539: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11543: LD_EXP 33
11547: PPUSH
11548: LD_STRING DA-RC-6
11550: PPUSH
11551: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11555: LD_EXP 26
11559: PPUSH
11560: LD_STRING DK-RC-7
11562: PPUSH
11563: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11567: LD_EXP 33
11571: PPUSH
11572: LD_STRING DA-RC-8
11574: PPUSH
11575: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11579: LD_EXP 21
11583: PPUSH
11584: LD_STRING DH-RC-9
11586: PPUSH
11587: CALL_OW 88
// if IsOk ( Markov ) then
11591: LD_EXP 28
11595: PPUSH
11596: CALL_OW 302
11600: IFFALSE 11628
// begin Say ( Markov , DMar-RC-10 ) ;
11602: LD_EXP 28
11606: PPUSH
11607: LD_STRING DMar-RC-10
11609: PPUSH
11610: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11614: LD_EXP 28
11618: PPUSH
11619: LD_STRING DMar-RC-11
11621: PPUSH
11622: CALL_OW 88
// end else
11626: GO 11640
// begin Say ( Olaf , DO-RC-a-10 ) ;
11628: LD_EXP 30
11632: PPUSH
11633: LD_STRING DO-RC-a-10
11635: PPUSH
11636: CALL_OW 88
// end ; DialogueOff ;
11640: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11644: LD_STRING RemoteControl
11646: PPUSH
11647: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11651: LD_INT 15
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11664: LD_INT 22
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 324
// end ;
11677: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11678: LD_INT 12
11680: PPUSH
11681: LD_INT 22
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 70
11695: IFFALSE 12062
11697: GO 11699
11699: DISABLE
11700: LD_INT 0
11702: PPUSH
// begin PrepareWestBase ;
11703: CALL 3969 0 0
// westBaseSpotted := true ;
11707: LD_ADDR_EXP 5
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11715: LD_INT 70
11717: PPUSH
11718: CALL_OW 67
// InGameOn ;
11722: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11726: LD_INT 56
11728: PPUSH
11729: LD_INT 77
11731: PPUSH
11732: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11736: LD_INT 56
11738: PPUSH
11739: LD_INT 77
11741: PPUSH
11742: LD_INT 2
11744: PPUSH
11745: LD_INT 12
11747: NEG
11748: PPUSH
11749: CALL_OW 330
// wait ( 0 0$2 ) ;
11753: LD_INT 70
11755: PPUSH
11756: CALL_OW 67
// DialogueOn ;
11760: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11764: LD_EXP 21
11768: PPUSH
11769: LD_STRING DH-Rbase-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11776: LD_EXP 26
11780: PPUSH
11781: LD_STRING DK-Rbase-2
11783: PPUSH
11784: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11788: LD_EXP 26
11792: PPUSH
11793: LD_STRING DK-Rbase-3
11795: PPUSH
11796: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11800: LD_EXP 26
11804: PPUSH
11805: LD_STRING DK-Rbase-4
11807: PPUSH
11808: CALL_OW 88
// DialogueOff ;
11812: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11816: LD_INT 56
11818: PPUSH
11819: LD_INT 77
11821: PPUSH
11822: LD_INT 2
11824: PPUSH
11825: CALL_OW 331
// InGameOff ;
11829: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11833: LD_INT 35
11835: PPUSH
11836: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11840: LD_EXP 42
11844: NOT
11845: PUSH
11846: LD_EXP 43
11850: NOT
11851: AND
11852: IFFALSE 11833
// wait ( 0 0$2 ) ;
11854: LD_INT 70
11856: PPUSH
11857: CALL_OW 67
// if IsOk ( Kaia ) then
11861: LD_EXP 26
11865: PPUSH
11866: CALL_OW 302
11870: IFFALSE 11985
// begin DialogueOn ;
11872: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11876: LD_INT 56
11878: PPUSH
11879: LD_INT 81
11881: PPUSH
11882: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11886: LD_EXP 26
11890: PPUSH
11891: LD_STRING DK-Rbase-5
11893: PPUSH
11894: CALL_OW 88
// if IsOk ( Givi ) then
11898: LD_EXP 22
11902: PPUSH
11903: CALL_OW 302
11907: IFFALSE 11981
// begin Say ( Givi , DG-Rbase-6 ) ;
11909: LD_EXP 22
11913: PPUSH
11914: LD_STRING DG-Rbase-6
11916: PPUSH
11917: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11921: LD_EXP 22
11925: PPUSH
11926: LD_STRING DG-Rbase-7
11928: PPUSH
11929: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11933: LD_EXP 26
11937: PPUSH
11938: LD_STRING DK-Rbase-8
11940: PPUSH
11941: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11945: LD_EXP 22
11949: PPUSH
11950: LD_STRING DG-Rbase-9
11952: PPUSH
11953: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11957: LD_EXP 22
11961: PPUSH
11962: LD_STRING DG-Rbase-10
11964: PPUSH
11965: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11969: LD_EXP 26
11973: PPUSH
11974: LD_STRING DK-Rbase-11
11976: PPUSH
11977: CALL_OW 88
// end ; DialogueOff ;
11981: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: LD_INT 12
11992: PPUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 3
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 21
12005: PUSH
12006: LD_INT 3
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 70
12021: PUSH
12022: FOR_IN
12023: IFFALSE 12039
// SetSide ( i , 2 ) ;
12025: LD_VAR 0 1
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 235
12037: GO 12022
12039: POP
12040: POP
// westBaseCaptured := true ;
12041: LD_ADDR_EXP 9
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12049: LD_INT 0
12051: PPUSH
12052: LD_INT 2
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 324
// end ;
12062: PPOPN 1
12064: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12065: LD_EXP 38
12069: NOT
12070: PUSH
12071: LD_INT 10
12073: PPUSH
12074: CALL_OW 255
12078: PUSH
12079: LD_INT 2
12081: EQUAL
12082: OR
12083: IFFALSE 12220
12085: GO 12087
12087: DISABLE
// begin DialogueOn ;
12088: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12092: LD_EXP 21
12096: PPUSH
12097: LD_STRING DH-Goal-1
12099: PPUSH
12100: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12104: LD_EXP 29
12108: PPUSH
12109: LD_STRING DShar-Goal-2
12111: PPUSH
12112: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12116: LD_EXP 21
12120: PPUSH
12121: LD_STRING DH-Goal-3
12123: PPUSH
12124: CALL_OW 88
// if reinforcementsAllowed then
12128: LD_EXP 14
12132: IFFALSE 12158
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12134: LD_EXP 29
12138: PPUSH
12139: LD_STRING DShar-Goal-4
12141: PPUSH
12142: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12146: LD_EXP 21
12150: PPUSH
12151: LD_STRING DH-Goal-5
12153: PPUSH
12154: CALL_OW 88
// end ; DialogueOff ;
12158: CALL_OW 7
// eastBaseCaptured := true ;
12162: LD_ADDR_EXP 10
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12170: LD_STRING BaseCaptured
12172: PPUSH
12173: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12177: LD_INT 10
12179: PPUSH
12180: LD_INT 2
12182: PPUSH
12183: CALL_OW 235
// if not reinforcementsAllowed then
12187: LD_EXP 14
12191: NOT
12192: IFFALSE 12196
// exit ;
12194: GO 12220
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12196: LD_INT 21000
12198: PUSH
12199: LD_INT 1050
12201: NEG
12202: PPUSH
12203: LD_INT 1050
12205: PPUSH
12206: CALL_OW 12
12210: PLUS
12211: PPUSH
12212: CALL_OW 67
// PrepareReinforcements ;
12216: CALL 2182 0 0
// end ;
12220: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12221: LD_INT 22
12223: PUSH
12224: LD_INT 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 30
12233: PUSH
12234: LD_INT 13
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PPUSH
12245: CALL_OW 69
12249: IFFALSE 12266
12251: GO 12253
12253: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12254: LD_EXP 22
12258: PPUSH
12259: LD_STRING DG-Lab-1
12261: PPUSH
12262: CALL_OW 88
// end ;
12266: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12267: LD_INT 5
12269: PPUSH
12270: LD_INT 2
12272: PPUSH
12273: CALL_OW 321
12277: PUSH
12278: LD_INT 2
12280: EQUAL
12281: PUSH
12282: LD_EXP 22
12286: PPUSH
12287: CALL_OW 302
12291: AND
12292: IFFALSE 12353
12294: GO 12296
12296: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12297: LD_EXP 22
12301: PPUSH
12302: LD_STRING DG-Stim-1
12304: PPUSH
12305: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12309: LD_EXP 21
12313: PPUSH
12314: LD_STRING DH-Stim-2
12316: PPUSH
12317: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12321: LD_EXP 22
12325: PPUSH
12326: LD_STRING DG-Stim-3
12328: PPUSH
12329: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12333: LD_EXP 21
12337: PPUSH
12338: LD_STRING DH-Stim-4
12340: PPUSH
12341: CALL_OW 88
// drugsResearched := true ;
12345: LD_ADDR_EXP 11
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// end ;
12353: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12354: LD_EXP 11
12358: IFFALSE 12670
12360: GO 12362
12362: DISABLE
12363: LD_INT 0
12365: PPUSH
12366: PPUSH
12367: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12368: LD_ADDR_VAR 0 2
12372: PUSH
12373: LD_EXP 21
12377: PUSH
12378: LD_EXP 22
12382: PUSH
12383: LD_EXP 30
12387: PUSH
12388: LD_EXP 28
12392: PUSH
12393: LD_EXP 26
12397: PUSH
12398: LD_EXP 27
12402: PUSH
12403: LD_EXP 32
12407: PUSH
12408: LD_EXP 25
12412: PUSH
12413: LD_EXP 23
12417: PUSH
12418: LD_EXP 24
12422: PUSH
12423: LD_EXP 33
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_STRING H
12448: PUSH
12449: LD_STRING G
12451: PUSH
12452: LD_STRING O
12454: PUSH
12455: LD_STRING Mar
12457: PUSH
12458: LD_STRING K
12460: PUSH
12461: LD_STRING S
12463: PUSH
12464: LD_STRING Ks
12466: PUSH
12467: LD_STRING Kam
12469: PUSH
12470: LD_STRING M
12472: PUSH
12473: LD_STRING I
12475: PUSH
12476: LD_STRING A
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12492: LD_INT 35
12494: PPUSH
12495: CALL_OW 67
// for i := tmp downto 1 do
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: DOUBLE
12505: LD_VAR 0 2
12509: INC
12510: ST_TO_ADDR
12511: LD_INT 1
12513: PUSH
12514: FOR_DOWNTO
12515: IFFALSE 12661
// if GetLives ( tmp [ i ] ) < 250 then
12517: LD_VAR 0 2
12521: PUSH
12522: LD_VAR 0 1
12526: ARRAY
12527: PPUSH
12528: CALL_OW 256
12532: PUSH
12533: LD_INT 250
12535: LESS
12536: IFFALSE 12659
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12538: LD_ADDR_EXP 19
12542: PUSH
12543: LD_EXP 19
12547: PUSH
12548: LD_INT 1
12550: PLUS
12551: ST_TO_ADDR
// DialogueOn ;
12552: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12556: LD_VAR 0 2
12560: PUSH
12561: LD_VAR 0 1
12565: ARRAY
12566: PPUSH
12567: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12571: LD_VAR 0 2
12575: PUSH
12576: LD_VAR 0 1
12580: ARRAY
12581: PPUSH
12582: LD_STRING D
12584: PUSH
12585: LD_VAR 0 3
12589: PUSH
12590: LD_VAR 0 1
12594: ARRAY
12595: STR
12596: PUSH
12597: LD_STRING -Stim-a-1
12599: STR
12600: PPUSH
12601: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12605: LD_ADDR_VAR 0 2
12609: PUSH
12610: LD_VAR 0 2
12614: PPUSH
12615: LD_VAR 0 1
12619: PPUSH
12620: CALL_OW 3
12624: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12625: LD_ADDR_VAR 0 3
12629: PUSH
12630: LD_VAR 0 3
12634: PPUSH
12635: LD_VAR 0 1
12639: PPUSH
12640: CALL_OW 3
12644: ST_TO_ADDR
// drugsTested := true ;
12645: LD_ADDR_EXP 6
12649: PUSH
12650: LD_INT 1
12652: ST_TO_ADDR
// DialogueOff ;
12653: CALL_OW 7
// break ;
12657: GO 12661
// end ;
12659: GO 12514
12661: POP
12662: POP
// until not tmp ;
12663: LD_VAR 0 2
12667: NOT
12668: IFFALSE 12492
// end ;
12670: PPOPN 3
12672: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12673: LD_INT 22
12675: PUSH
12676: LD_INT 2
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 34
12685: PUSH
12686: LD_INT 31
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PPUSH
12697: CALL_OW 69
12701: PUSH
12702: LD_INT 22
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 33
12714: PUSH
12715: LD_INT 2
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: AND
12731: IFFALSE 12744
12733: GO 12735
12735: DISABLE
// remoteControlConstructed := true ;
12736: LD_ADDR_EXP 12
12740: PUSH
12741: LD_INT 1
12743: ST_TO_ADDR
12744: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12745: LD_EXP 12
12749: IFFALSE 13049
12751: GO 12753
12753: DISABLE
12754: LD_INT 0
12756: PPUSH
12757: PPUSH
12758: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12759: LD_ADDR_VAR 0 2
12763: PUSH
12764: LD_EXP 21
12768: PUSH
12769: LD_EXP 22
12773: PUSH
12774: LD_EXP 30
12778: PUSH
12779: LD_EXP 28
12783: PUSH
12784: LD_EXP 26
12788: PUSH
12789: LD_EXP 27
12793: PUSH
12794: LD_EXP 32
12798: PUSH
12799: LD_EXP 25
12803: PUSH
12804: LD_EXP 23
12808: PUSH
12809: LD_EXP 24
12813: PUSH
12814: LD_EXP 33
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12832: LD_ADDR_VAR 0 3
12836: PUSH
12837: LD_STRING H
12839: PUSH
12840: LD_STRING G
12842: PUSH
12843: LD_STRING O
12845: PUSH
12846: LD_STRING Mar
12848: PUSH
12849: LD_STRING K
12851: PUSH
12852: LD_STRING S
12854: PUSH
12855: LD_STRING Ks
12857: PUSH
12858: LD_STRING Kam
12860: PUSH
12861: LD_STRING M
12863: PUSH
12864: LD_STRING I
12866: PUSH
12867: LD_STRING A
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12883: LD_INT 35
12885: PPUSH
12886: CALL_OW 67
// for i := tmp downto 1 do
12890: LD_ADDR_VAR 0 1
12894: PUSH
12895: DOUBLE
12896: LD_VAR 0 2
12900: INC
12901: ST_TO_ADDR
12902: LD_INT 1
12904: PUSH
12905: FOR_DOWNTO
12906: IFFALSE 13040
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12908: LD_VAR 0 2
12912: PUSH
12913: LD_VAR 0 1
12917: ARRAY
12918: PPUSH
12919: CALL_OW 257
12923: PUSH
12924: LD_INT 3
12926: EQUAL
12927: PUSH
12928: LD_VAR 0 2
12932: PUSH
12933: LD_VAR 0 1
12937: ARRAY
12938: PPUSH
12939: CALL_OW 432
12943: AND
12944: IFFALSE 13038
// begin DialogueOn ;
12946: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12950: LD_VAR 0 2
12954: PUSH
12955: LD_VAR 0 1
12959: ARRAY
12960: PPUSH
12961: LD_STRING D
12963: PUSH
12964: LD_VAR 0 3
12968: PUSH
12969: LD_VAR 0 1
12973: ARRAY
12974: STR
12975: PUSH
12976: LD_STRING -RC-a-1
12978: STR
12979: PPUSH
12980: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12984: LD_ADDR_VAR 0 2
12988: PUSH
12989: LD_VAR 0 2
12993: PPUSH
12994: LD_VAR 0 1
12998: PPUSH
12999: CALL_OW 3
13003: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13004: LD_ADDR_VAR 0 3
13008: PUSH
13009: LD_VAR 0 3
13013: PPUSH
13014: LD_VAR 0 1
13018: PPUSH
13019: CALL_OW 3
13023: ST_TO_ADDR
// DialogueOff ;
13024: CALL_OW 7
// remoteControlTested := true ;
13028: LD_ADDR_EXP 7
13032: PUSH
13033: LD_INT 1
13035: ST_TO_ADDR
// break ;
13036: GO 13040
// end ;
13038: GO 12905
13040: POP
13041: POP
// until not tmp ;
13042: LD_VAR 0 2
13046: NOT
13047: IFFALSE 12883
// end ;
13049: PPOPN 3
13051: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13052: LD_EXP 7
13056: PUSH
13057: LD_EXP 28
13061: PPUSH
13062: CALL_OW 302
13066: AND
13067: IFFALSE 13096
13069: GO 13071
13071: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13072: LD_EXP 28
13076: PPUSH
13077: LD_STRING DMar-RC-a-2
13079: PPUSH
13080: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13084: LD_EXP 28
13088: PPUSH
13089: LD_STRING DMar-RC-a-3
13091: PPUSH
13092: CALL_OW 88
// end ;
13096: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13097: LD_EXP 14
13101: PUSH
13102: LD_EXP 21
13106: PPUSH
13107: LD_EXP 33
13111: PPUSH
13112: CALL_OW 296
13116: PUSH
13117: LD_INT 8
13119: LESS
13120: AND
13121: PUSH
13122: LD_INT 2
13124: PPUSH
13125: CALL_OW 463
13129: NOT
13130: AND
13131: PUSH
13132: LD_EXP 33
13136: PPUSH
13137: CALL_OW 302
13141: AND
13142: PUSH
13143: LD_EXP 21
13147: PPUSH
13148: CALL_OW 302
13152: AND
13153: IFFALSE 13331
13155: GO 13157
13157: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13158: LD_EXP 33
13162: PPUSH
13163: CALL_OW 310
13167: NOT
13168: IFFALSE 13184
// ComTurnUnit ( Aviradze , Heike ) ;
13170: LD_EXP 33
13174: PPUSH
13175: LD_EXP 21
13179: PPUSH
13180: CALL_OW 119
// if not IsInUnit ( Heike ) then
13184: LD_EXP 21
13188: PPUSH
13189: CALL_OW 310
13193: NOT
13194: IFFALSE 13210
// ComTurnUnit ( Heike , Aviradze ) ;
13196: LD_EXP 21
13200: PPUSH
13201: LD_EXP 33
13205: PPUSH
13206: CALL_OW 119
// wait ( 0 0$1 ) ;
13210: LD_INT 35
13212: PPUSH
13213: CALL_OW 67
// DialogueOn ;
13217: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13221: LD_EXP 33
13225: PPUSH
13226: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13230: LD_EXP 21
13234: PPUSH
13235: LD_STRING DH-Beria-1
13237: PPUSH
13238: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13242: LD_EXP 33
13246: PPUSH
13247: LD_STRING DA-Beria-2
13249: PPUSH
13250: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13254: LD_EXP 21
13258: PPUSH
13259: LD_STRING DH-Beria-3
13261: PPUSH
13262: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13266: LD_EXP 33
13270: PPUSH
13271: LD_STRING DA-Beria-4
13273: PPUSH
13274: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13278: LD_EXP 33
13282: PPUSH
13283: LD_STRING DA-Beria-5
13285: PPUSH
13286: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13290: LD_EXP 33
13294: PPUSH
13295: LD_STRING DA-Beria-6
13297: PPUSH
13298: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13302: LD_EXP 21
13306: PPUSH
13307: LD_STRING DA-Beria-7
13309: PPUSH
13310: CALL_OW 88
// DialogueOff ;
13314: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13318: LD_INT 52
13320: PPUSH
13321: LD_INT 2
13323: PPUSH
13324: LD_INT 1
13326: PPUSH
13327: CALL_OW 322
// end ;
13331: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13332: LD_EXP 26
13336: PPUSH
13337: CALL_OW 300
13341: PUSH
13342: LD_EXP 26
13346: PPUSH
13347: CALL_OW 256
13351: PUSH
13352: LD_INT 10
13354: LESS
13355: AND
13356: IFFALSE 13393
13358: GO 13360
13360: DISABLE
// begin DialogueOn ;
13361: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13365: LD_EXP 26
13369: PPUSH
13370: LD_STRING DK-Kdeath-1
13372: PPUSH
13373: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13377: LD_EXP 21
13381: PPUSH
13382: LD_STRING DH-Kdeath-2
13384: PPUSH
13385: CALL_OW 88
// DialogueOff ;
13389: CALL_OW 7
// end ;
13393: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13394: LD_INT 2
13396: PPUSH
13397: LD_EXP 39
13401: PPUSH
13402: CALL 1306 0 2
13406: IFFALSE 13423
13408: GO 13410
13410: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13411: LD_EXP 21
13415: PPUSH
13416: LD_STRING DH-Obj-1
13418: PPUSH
13419: CALL_OW 88
13423: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13424: LD_INT 2
13426: PPUSH
13427: LD_EXP 40
13431: PPUSH
13432: CALL 1306 0 2
13436: IFFALSE 13453
13438: GO 13440
13440: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13441: LD_EXP 21
13445: PPUSH
13446: LD_STRING DH-Obj-a-1
13448: PPUSH
13449: CALL_OW 88
13453: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13454: LD_EXP 10
13458: PUSH
13459: LD_OWVAR 1
13463: PUSH
13464: LD_INT 23100
13466: PUSH
13467: LD_INT 22050
13469: PUSH
13470: LD_INT 21000
13472: PUSH
13473: LD_INT 19950
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_OWVAR 67
13486: ARRAY
13487: GREATEREQUAL
13488: OR
13489: IFFALSE 13515
13491: GO 13493
13493: DISABLE
// begin if eastBaseCaptured then
13494: LD_EXP 10
13498: IFFALSE 13507
// wait ( 2 2$00 ) ;
13500: LD_INT 4200
13502: PPUSH
13503: CALL_OW 67
// convoyStarted := true ;
13507: LD_ADDR_EXP 17
13511: PUSH
13512: LD_INT 1
13514: ST_TO_ADDR
// end ;
13515: END
// every 0 0$1 trigger convoyStarted do
13516: LD_EXP 17
13520: IFFALSE 13611
13522: GO 13524
13524: DISABLE
// begin DialogueOn ;
13525: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13529: LD_EXP 29
13533: PPUSH
13534: LD_STRING DShar-Convoy-1
13536: PPUSH
13537: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13541: LD_EXP 21
13545: PPUSH
13546: LD_STRING DH-Convoy-2
13548: PPUSH
13549: CALL_OW 88
// DialogueOff ;
13553: CALL_OW 7
// wait ( 0 0$10 ) ;
13557: LD_INT 350
13559: PPUSH
13560: CALL_OW 67
// PrepareConvoy ;
13564: CALL 4616 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13568: LD_INT 5250
13570: PPUSH
13571: LD_INT 11550
13573: PPUSH
13574: CALL_OW 12
13578: PPUSH
13579: CALL_OW 67
// PrepareConvoy ;
13583: CALL 4616 0 0
// convoyCounter := convoyCounter - 1 ;
13587: LD_ADDR_EXP 16
13591: PUSH
13592: LD_EXP 16
13596: PUSH
13597: LD_INT 1
13599: MINUS
13600: ST_TO_ADDR
// until convoyCounter <= 0 ;
13601: LD_EXP 16
13605: PUSH
13606: LD_INT 0
13608: LESSEQUAL
13609: IFFALSE 13568
// end ;
13611: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13612: LD_EXP 15
13616: PUSH
13617: LD_INT 10
13619: GREATEREQUAL
13620: IFFALSE 13637
13622: GO 13624
13624: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13625: LD_EXP 31
13629: PPUSH
13630: LD_STRING DOm-Fail-1
13632: PPUSH
13633: CALL_OW 94
13637: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13638: LD_EXP 39
13642: NOT
13643: PUSH
13644: LD_EXP 40
13648: NOT
13649: AND
13650: IFFALSE 13662
13652: GO 13654
13654: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13655: LD_STRING RaiderDone
13657: PPUSH
13658: CALL_OW 337
13662: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13663: LD_INT 22
13665: PUSH
13666: LD_INT 2
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 33
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PUSH
13692: LD_INT 3
13694: GREATEREQUAL
13695: PUSH
13696: LD_INT 22
13698: PUSH
13699: LD_INT 2
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 34
13708: PUSH
13709: LD_INT 31
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PPUSH
13720: CALL_OW 69
13724: PUSH
13725: LD_INT 2
13727: GREATEREQUAL
13728: AND
13729: IFFALSE 13741
13731: GO 13733
13733: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13734: LD_STRING RemoteControlDone
13736: PPUSH
13737: CALL_OW 337
13741: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13742: LD_EXP 16
13746: PUSH
13747: LD_INT 1
13749: LESS
13750: PUSH
13751: LD_EXP 41
13755: PPUSH
13756: LD_INT 52
13758: PUSH
13759: EMPTY
13760: LIST
13761: PUSH
13762: LD_INT 21
13764: PUSH
13765: LD_INT 1
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL_OW 72
13780: NOT
13781: AND
13782: PUSH
13783: LD_OWVAR 1
13787: PUSH
13788: LD_INT 126000
13790: GREATEREQUAL
13791: OR
13792: IFFALSE 14984
13794: GO 13796
13796: DISABLE
13797: LD_INT 0
13799: PPUSH
13800: PPUSH
13801: PPUSH
13802: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13803: LD_STRING ReinforcementsDone
13805: PPUSH
13806: CALL_OW 337
// music_class := music_victory ;
13810: LD_ADDR_OWVAR 72
13814: PUSH
13815: LD_INT 4
13817: ST_TO_ADDR
// if tick <= 45 45$00 then
13818: LD_OWVAR 1
13822: PUSH
13823: LD_INT 94500
13825: LESSEQUAL
13826: IFFALSE 13835
// SetAchievement ( ACH_HSPEED_5 ) ;
13828: LD_STRING ACH_HSPEED_5
13830: PPUSH
13831: CALL_OW 543
// InGameOn ;
13835: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13839: LD_EXP 21
13843: PPUSH
13844: LD_STRING DH-end-1
13846: PPUSH
13847: CALL_OW 88
// wait ( 0 0$2 ) ;
13851: LD_INT 70
13853: PPUSH
13854: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13858: LD_EXP 29
13862: PPUSH
13863: LD_STRING DShar-end-2
13865: PPUSH
13866: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13870: LD_EXP 39
13874: NOT
13875: PUSH
13876: LD_EXP 40
13880: NOT
13881: AND
13882: IFFALSE 13898
// begin Say ( Heike , DH-end-3 ) ;
13884: LD_EXP 21
13888: PPUSH
13889: LD_STRING DH-end-3
13891: PPUSH
13892: CALL_OW 88
// end else
13896: GO 14002
// begin Say ( Heike , DH-end-a-3 ) ;
13898: LD_EXP 21
13902: PPUSH
13903: LD_STRING DH-end-a-3
13905: PPUSH
13906: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13910: LD_EXP 29
13914: PPUSH
13915: LD_STRING DShar-end-a-4
13917: PPUSH
13918: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13922: LD_EXP 21
13926: PPUSH
13927: LD_STRING DH-end-a-5
13929: PPUSH
13930: CALL_OW 88
// InGameOff ;
13934: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13938: LD_INT 35
13940: PPUSH
13941: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 ;
13945: LD_INT 22
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 50
13957: PUSH
13958: EMPTY
13959: LIST
13960: PUSH
13961: LD_INT 21
13963: PUSH
13964: LD_INT 1
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 69
13980: PUSH
13981: LD_INT 0
13983: EQUAL
13984: IFFALSE 13938
// InGameOn ;
13986: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13990: LD_EXP 21
13994: PPUSH
13995: LD_STRING DH-end-a-6
13997: PPUSH
13998: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14002: LD_EXP 29
14006: PPUSH
14007: LD_STRING DShar-end-3
14009: PPUSH
14010: CALL_OW 94
// if not flamethrowerBuilt then
14014: LD_EXP 20
14018: NOT
14019: IFFALSE 14028
// SetAchievement ( ACH_FIRE ) ;
14021: LD_STRING ACH_FIRE
14023: PPUSH
14024: CALL_OW 543
// if drugsTested then
14028: LD_EXP 6
14032: IFFALSE 14046
// AddMedal ( med1 , 1 ) else
14034: LD_STRING med1
14036: PPUSH
14037: LD_INT 1
14039: PPUSH
14040: CALL_OW 101
14044: GO 14086
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
14046: LD_INT 5
14048: PPUSH
14049: LD_INT 2
14051: PPUSH
14052: CALL_OW 321
14056: PUSH
14057: LD_INT 2
14059: EQUAL
14060: IFFALSE 14075
// AddMedal ( med1 , - 1 ) else
14062: LD_STRING med1
14064: PPUSH
14065: LD_INT 1
14067: NEG
14068: PPUSH
14069: CALL_OW 101
14073: GO 14086
// AddMedal ( med1 , - 2 ) ;
14075: LD_STRING med1
14077: PPUSH
14078: LD_INT 2
14080: NEG
14081: PPUSH
14082: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14086: LD_INT 22
14088: PUSH
14089: LD_INT 2
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 33
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 69
14114: PUSH
14115: LD_INT 3
14117: GREATEREQUAL
14118: PUSH
14119: LD_INT 22
14121: PUSH
14122: LD_INT 2
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 34
14131: PUSH
14132: LD_INT 31
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: PUSH
14148: LD_INT 1
14150: GREATEREQUAL
14151: AND
14152: IFFALSE 14166
// AddMedal ( med2 , 1 ) else
14154: LD_STRING med2
14156: PPUSH
14157: LD_INT 1
14159: PPUSH
14160: CALL_OW 101
14164: GO 14177
// AddMedal ( med2 , - 1 ) ;
14166: LD_STRING med2
14168: PPUSH
14169: LD_INT 1
14171: NEG
14172: PPUSH
14173: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14177: LD_EXP 15
14181: PUSH
14182: LD_INT 10
14184: PUSH
14185: LD_INT 8
14187: PUSH
14188: LD_INT 6
14190: PUSH
14191: LD_INT 5
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: LD_OWVAR 67
14204: ARRAY
14205: LESS
14206: IFFALSE 14220
// AddMedal ( med3 , 1 ) else
14208: LD_STRING med3
14210: PPUSH
14211: LD_INT 1
14213: PPUSH
14214: CALL_OW 101
14218: GO 14231
// AddMedal ( med3 , - 1 ) ;
14220: LD_STRING med3
14222: PPUSH
14223: LD_INT 1
14225: NEG
14226: PPUSH
14227: CALL_OW 101
// GiveMedals ( MAIN ) ;
14231: LD_STRING MAIN
14233: PPUSH
14234: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14238: LD_INT 22
14240: PUSH
14241: LD_INT 2
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 23
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: PPUSH
14278: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14282: LD_EXP 15
14286: PPUSH
14287: LD_STRING 05_ConvoySavedCounter
14289: PPUSH
14290: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14294: LD_EXP 13
14298: PPUSH
14299: LD_STRING 05_Radar
14301: PPUSH
14302: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14306: LD_EXP 6
14310: PPUSH
14311: LD_STRING 05_DrugsTested
14313: PPUSH
14314: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14318: LD_INT 22
14320: PUSH
14321: LD_INT 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 33
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: PUSH
14347: LD_INT 3
14349: GREATEREQUAL
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 2
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 34
14363: PUSH
14364: LD_INT 31
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PPUSH
14375: CALL_OW 69
14379: PUSH
14380: LD_INT 2
14382: GREATEREQUAL
14383: AND
14384: PPUSH
14385: LD_STRING 05_RemoteControl
14387: PPUSH
14388: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14392: LD_ADDR_VAR 0 2
14396: PUSH
14397: LD_INT 22
14399: PUSH
14400: LD_INT 2
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 21
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: ST_TO_ADDR
// if tmp then
14426: LD_VAR 0 2
14430: IFFALSE 14549
// begin vehs := [ ] ;
14432: LD_ADDR_VAR 0 4
14436: PUSH
14437: EMPTY
14438: ST_TO_ADDR
// for i in tmp do
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_VAR 0 2
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14535
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_VAR 0 4
14466: PUSH
14467: LD_INT 1
14469: PLUS
14470: PPUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 265
14480: PUSH
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 262
14490: PUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 263
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 264
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 248
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: PPUSH
14528: CALL_OW 1
14532: ST_TO_ADDR
14533: GO 14449
14535: POP
14536: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14537: LD_VAR 0 4
14541: PPUSH
14542: LD_STRING 05_Vehicles
14544: PPUSH
14545: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14549: LD_ADDR_VAR 0 2
14553: PUSH
14554: LD_INT 25
14556: PPUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 3
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 70
14571: ST_TO_ADDR
// tmp2 := [ ] ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: EMPTY
14578: ST_TO_ADDR
// if tmp then
14579: LD_VAR 0 2
14583: IFFALSE 14736
// begin for i in tmp do
14585: LD_ADDR_VAR 0 1
14589: PUSH
14590: LD_VAR 0 2
14594: PUSH
14595: FOR_IN
14596: IFFALSE 14722
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14598: LD_ADDR_VAR 0 3
14602: PUSH
14603: LD_VAR 0 3
14607: PPUSH
14608: LD_VAR 0 1
14612: PPUSH
14613: CALL_OW 266
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 250
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 251
14637: PUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 254
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 248
14657: PUSH
14658: LD_VAR 0 1
14662: PPUSH
14663: CALL_OW 267
14667: PUSH
14668: LD_VAR 0 1
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 268
14680: PUSH
14681: LD_VAR 0 1
14685: PPUSH
14686: LD_INT 2
14688: PPUSH
14689: CALL_OW 268
14693: PUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 269
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL 73998 0 2
14719: ST_TO_ADDR
14720: GO 14595
14722: POP
14723: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14724: LD_VAR 0 3
14728: PPUSH
14729: LD_STRING 05_Buildings
14731: PPUSH
14732: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14736: LD_EXP 21
14740: PPUSH
14741: LD_STRING 05_Heike
14743: PPUSH
14744: CALL_OW 38
// if Aviradze then
14748: LD_EXP 33
14752: IFFALSE 14766
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14754: LD_EXP 33
14758: PPUSH
14759: LD_STRING 05_Aviradze
14761: PPUSH
14762: CALL_OW 38
// if Ibrahim then
14766: LD_EXP 24
14770: IFFALSE 14784
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14772: LD_EXP 24
14776: PPUSH
14777: LD_STRING 05_Ibrahim
14779: PPUSH
14780: CALL_OW 38
// if Kamil then
14784: LD_EXP 25
14788: IFFALSE 14802
// SaveCharacters ( Kamil , 05_Kamil ) ;
14790: LD_EXP 25
14794: PPUSH
14795: LD_STRING 05_Kamil
14797: PPUSH
14798: CALL_OW 38
// if Sophia then
14802: LD_EXP 27
14806: IFFALSE 14820
// SaveCharacters ( Sophia , 05_Sophia ) ;
14808: LD_EXP 27
14812: PPUSH
14813: LD_STRING 05_Sophia
14815: PPUSH
14816: CALL_OW 38
// if Kaia then
14820: LD_EXP 26
14824: IFFALSE 14838
// SaveCharacters ( Kaia , 05_Kaia ) ;
14826: LD_EXP 26
14830: PPUSH
14831: LD_STRING 05_Kaia
14833: PPUSH
14834: CALL_OW 38
// if Givi then
14838: LD_EXP 22
14842: IFFALSE 14856
// SaveCharacters ( Givi , 05_Givi ) ;
14844: LD_EXP 22
14848: PPUSH
14849: LD_STRING 05_Givi
14851: PPUSH
14852: CALL_OW 38
// if Mike then
14856: LD_EXP 23
14860: IFFALSE 14874
// SaveCharacters ( Mike , 05_Mike ) ;
14862: LD_EXP 23
14866: PPUSH
14867: LD_STRING 05_Mike
14869: PPUSH
14870: CALL_OW 38
// if Markov then
14874: LD_EXP 28
14878: IFFALSE 14892
// SaveCharacters ( Markov , 05_Markov ) ;
14880: LD_EXP 28
14884: PPUSH
14885: LD_STRING 05_Markov
14887: PPUSH
14888: CALL_OW 38
// if Kurt then
14892: LD_EXP 32
14896: IFFALSE 14910
// SaveCharacters ( Kurt , 05_Kurt ) ;
14898: LD_EXP 32
14902: PPUSH
14903: LD_STRING 05_Kurt
14905: PPUSH
14906: CALL_OW 38
// if heikeSecondSquad then
14910: LD_EXP 34
14914: IFFALSE 14928
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14916: LD_EXP 34
14920: PPUSH
14921: LD_STRING 05_others
14923: PPUSH
14924: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14928: LD_ADDR_VAR 0 2
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_INT 2
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 23
14945: PUSH
14946: LD_INT 0
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PPUSH
14957: CALL_OW 69
14961: ST_TO_ADDR
// if tmp then
14962: LD_VAR 0 2
14966: IFFALSE 14980
// SaveCharacters ( tmp , 05_apes ) ;
14968: LD_VAR 0 2
14972: PPUSH
14973: LD_STRING 05_apes
14975: PPUSH
14976: CALL_OW 38
// YouWin ;
14980: CALL_OW 103
// end ; end_of_file
14984: PPOPN 4
14986: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14987: LD_EXP 9
14991: PUSH
14992: LD_INT 13
14994: PPUSH
14995: LD_INT 1
14997: PPUSH
14998: CALL_OW 287
15002: PUSH
15003: LD_INT 25
15005: LESS
15006: AND
15007: IFFALSE 15034
15009: GO 15011
15011: DISABLE
// begin enable ;
15012: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15013: LD_INT 1
15015: PPUSH
15016: LD_INT 5
15018: PPUSH
15019: CALL_OW 12
15023: PPUSH
15024: LD_INT 13
15026: PPUSH
15027: LD_INT 1
15029: PPUSH
15030: CALL_OW 55
// end ; end_of_file
15034: END
// export function SOS_UnitDestroyed ( un ) ; begin
15035: LD_INT 0
15037: PPUSH
// ComRadiation ( un ) ;
15038: LD_VAR 0 1
15042: PPUSH
15043: CALL 16024 0 1
// end ;
15047: LD_VAR 0 2
15051: RET
// export function SOS_UnitKamikazed ( un ) ; begin
15052: LD_INT 0
15054: PPUSH
// ComRadiation ( un ) ;
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL 16024 0 1
// end ;
15064: LD_VAR 0 2
15068: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15069: LD_INT 0
15071: PPUSH
// end ;
15072: LD_VAR 0 4
15076: RET
// export function SOS_Command ( cmd ) ; begin
15077: LD_INT 0
15079: PPUSH
// end ;
15080: LD_VAR 0 2
15084: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15085: LD_INT 0
15087: PPUSH
// end ;
15088: LD_VAR 0 6
15092: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
15093: LD_INT 0
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
// if not vehicle or not factory then
15100: LD_VAR 0 1
15104: NOT
15105: PUSH
15106: LD_VAR 0 2
15110: NOT
15111: OR
15112: IFFALSE 15116
// exit ;
15114: GO 15615
// if not factoryWaypoints then
15116: LD_EXP 113
15120: NOT
15121: IFFALSE 15125
// exit ;
15123: GO 15615
// for i := 1 to Count ( factoryWaypoints ) do
15125: LD_ADDR_VAR 0 4
15129: PUSH
15130: DOUBLE
15131: LD_INT 1
15133: DEC
15134: ST_TO_ADDR
15135: LD_EXP 113
15139: PPUSH
15140: CALL 38389 0 1
15144: PUSH
15145: FOR_TO
15146: IFFALSE 15613
// if factoryWaypoints [ i ] [ 2 ] = factory then
15148: LD_EXP 113
15152: PUSH
15153: LD_VAR 0 4
15157: ARRAY
15158: PUSH
15159: LD_INT 2
15161: ARRAY
15162: PUSH
15163: LD_VAR 0 2
15167: EQUAL
15168: IFFALSE 15611
// begin if GetControl ( vehicle ) = control_manual then
15170: LD_VAR 0 1
15174: PPUSH
15175: CALL_OW 263
15179: PUSH
15180: LD_INT 1
15182: EQUAL
15183: IFFALSE 15494
// begin driver := IsDrivenBy ( vehicle ) ;
15185: LD_ADDR_VAR 0 6
15189: PUSH
15190: LD_VAR 0 1
15194: PPUSH
15195: CALL_OW 311
15199: ST_TO_ADDR
// tag := GetTag ( driver ) ;
15200: LD_ADDR_VAR 0 5
15204: PUSH
15205: LD_VAR 0 6
15209: PPUSH
15210: CALL_OW 110
15214: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
15215: LD_VAR 0 5
15219: PUSH
15220: LD_INT 501
15222: EQUAL
15223: PUSH
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 110
15233: PUSH
15234: LD_INT 501
15236: EQUAL
15237: OR
15238: IFFALSE 15244
// exit ;
15240: POP
15241: POP
15242: GO 15615
// if not HasTask ( driver ) then
15244: LD_VAR 0 6
15248: PPUSH
15249: CALL_OW 314
15253: NOT
15254: IFFALSE 15492
// begin SetTag ( driver , tDriver ) ;
15256: LD_VAR 0 6
15260: PPUSH
15261: LD_INT 501
15263: PPUSH
15264: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
15268: LD_VAR 0 1
15272: PPUSH
15273: LD_INT 501
15275: PPUSH
15276: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15280: LD_ADDR_VAR 0 7
15284: PUSH
15285: LD_EXP 113
15289: PUSH
15290: LD_VAR 0 4
15294: ARRAY
15295: PUSH
15296: LD_INT 3
15298: ARRAY
15299: PPUSH
15300: LD_EXP 113
15304: PUSH
15305: LD_VAR 0 4
15309: ARRAY
15310: PUSH
15311: LD_INT 4
15313: ARRAY
15314: PPUSH
15315: CALL_OW 428
15319: ST_TO_ADDR
// if hex then
15320: LD_VAR 0 7
15324: IFFALSE 15342
// ComMoveUnit ( driver , hex ) else
15326: LD_VAR 0 6
15330: PPUSH
15331: LD_VAR 0 7
15335: PPUSH
15336: CALL_OW 112
15340: GO 15381
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15342: LD_VAR 0 6
15346: PPUSH
15347: LD_EXP 113
15351: PUSH
15352: LD_VAR 0 4
15356: ARRAY
15357: PUSH
15358: LD_INT 3
15360: ARRAY
15361: PPUSH
15362: LD_EXP 113
15366: PUSH
15367: LD_VAR 0 4
15371: ARRAY
15372: PUSH
15373: LD_INT 4
15375: ARRAY
15376: PPUSH
15377: CALL_OW 111
// AddComExitVehicle ( driver ) ;
15381: LD_VAR 0 6
15385: PPUSH
15386: CALL_OW 181
// if Multiplayer then
15390: LD_OWVAR 4
15394: IFFALSE 15443
// begin repeat wait ( 10 ) ;
15396: LD_INT 10
15398: PPUSH
15399: CALL_OW 67
// until not IsInUnit ( driver ) ;
15403: LD_VAR 0 6
15407: PPUSH
15408: CALL_OW 310
15412: NOT
15413: IFFALSE 15396
// if not HasTask ( driver ) then
15415: LD_VAR 0 6
15419: PPUSH
15420: CALL_OW 314
15424: NOT
15425: IFFALSE 15441
// ComEnterUnit ( driver , factory ) ;
15427: LD_VAR 0 6
15431: PPUSH
15432: LD_VAR 0 2
15436: PPUSH
15437: CALL_OW 120
// end else
15441: GO 15457
// AddComEnterUnit ( driver , factory ) ;
15443: LD_VAR 0 6
15447: PPUSH
15448: LD_VAR 0 2
15452: PPUSH
15453: CALL_OW 180
// wait ( 0 0$1 ) ;
15457: LD_INT 35
15459: PPUSH
15460: CALL_OW 67
// SetTag ( driver , tag ) ;
15464: LD_VAR 0 6
15468: PPUSH
15469: LD_VAR 0 5
15473: PPUSH
15474: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
15478: LD_VAR 0 1
15482: PPUSH
15483: LD_INT 0
15485: PPUSH
15486: CALL_OW 109
// break ;
15490: GO 15613
// end ; end else
15492: GO 15611
// if GetControl ( vehicle ) = control_remote then
15494: LD_VAR 0 1
15498: PPUSH
15499: CALL_OW 263
15503: PUSH
15504: LD_INT 2
15506: EQUAL
15507: IFFALSE 15570
// begin wait ( 0 0$2 ) ;
15509: LD_INT 70
15511: PPUSH
15512: CALL_OW 67
// if Connect ( vehicle ) then
15516: LD_VAR 0 1
15520: PPUSH
15521: CALL 44595 0 1
15525: IFFALSE 15566
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15527: LD_VAR 0 1
15531: PPUSH
15532: LD_EXP 113
15536: PUSH
15537: LD_VAR 0 4
15541: ARRAY
15542: PUSH
15543: LD_INT 3
15545: ARRAY
15546: PPUSH
15547: LD_EXP 113
15551: PUSH
15552: LD_VAR 0 4
15556: ARRAY
15557: PUSH
15558: LD_INT 4
15560: ARRAY
15561: PPUSH
15562: CALL_OW 171
// break ;
15566: GO 15613
// end else
15568: GO 15611
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15570: LD_VAR 0 1
15574: PPUSH
15575: LD_EXP 113
15579: PUSH
15580: LD_VAR 0 4
15584: ARRAY
15585: PUSH
15586: LD_INT 3
15588: ARRAY
15589: PPUSH
15590: LD_EXP 113
15594: PUSH
15595: LD_VAR 0 4
15599: ARRAY
15600: PUSH
15601: LD_INT 4
15603: ARRAY
15604: PPUSH
15605: CALL_OW 171
// break ;
15609: GO 15613
// end ; end ;
15611: GO 15145
15613: POP
15614: POP
// end ;
15615: LD_VAR 0 3
15619: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15620: LD_INT 0
15622: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15623: LD_VAR 0 1
15627: PUSH
15628: LD_INT 250
15630: EQUAL
15631: PUSH
15632: LD_VAR 0 2
15636: PPUSH
15637: CALL_OW 264
15641: PUSH
15642: LD_INT 81
15644: EQUAL
15645: AND
15646: IFFALSE 15667
// MinerPlaceMine ( unit , x , y ) ;
15648: LD_VAR 0 2
15652: PPUSH
15653: LD_VAR 0 4
15657: PPUSH
15658: LD_VAR 0 5
15662: PPUSH
15663: CALL 18759 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15667: LD_VAR 0 1
15671: PUSH
15672: LD_INT 251
15674: EQUAL
15675: PUSH
15676: LD_VAR 0 2
15680: PPUSH
15681: CALL_OW 264
15685: PUSH
15686: LD_INT 81
15688: EQUAL
15689: AND
15690: IFFALSE 15711
// MinerDetonateMine ( unit , x , y ) ;
15692: LD_VAR 0 2
15696: PPUSH
15697: LD_VAR 0 4
15701: PPUSH
15702: LD_VAR 0 5
15706: PPUSH
15707: CALL 19034 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15711: LD_VAR 0 1
15715: PUSH
15716: LD_INT 252
15718: EQUAL
15719: PUSH
15720: LD_VAR 0 2
15724: PPUSH
15725: CALL_OW 264
15729: PUSH
15730: LD_INT 81
15732: EQUAL
15733: AND
15734: IFFALSE 15755
// MinerCreateMinefield ( unit , x , y ) ;
15736: LD_VAR 0 2
15740: PPUSH
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_VAR 0 5
15750: PPUSH
15751: CALL 19451 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15755: LD_VAR 0 1
15759: PUSH
15760: LD_INT 253
15762: EQUAL
15763: PUSH
15764: LD_VAR 0 2
15768: PPUSH
15769: CALL_OW 257
15773: PUSH
15774: LD_INT 5
15776: EQUAL
15777: AND
15778: IFFALSE 15799
// ComBinocular ( unit , x , y ) ;
15780: LD_VAR 0 2
15784: PPUSH
15785: LD_VAR 0 4
15789: PPUSH
15790: LD_VAR 0 5
15794: PPUSH
15795: CALL 19820 0 3
// if selectedUnit then
15799: LD_VAR 0 3
15803: IFFALSE 15859
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15805: LD_VAR 0 1
15809: PUSH
15810: LD_INT 254
15812: EQUAL
15813: PUSH
15814: LD_VAR 0 2
15818: PPUSH
15819: CALL_OW 264
15823: PUSH
15824: LD_INT 99
15826: EQUAL
15827: AND
15828: PUSH
15829: LD_VAR 0 3
15833: PPUSH
15834: CALL_OW 263
15838: PUSH
15839: LD_INT 3
15841: EQUAL
15842: AND
15843: IFFALSE 15859
// HackDestroyVehicle ( unit , selectedUnit ) ;
15845: LD_VAR 0 2
15849: PPUSH
15850: LD_VAR 0 3
15854: PPUSH
15855: CALL 18123 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15859: LD_VAR 0 1
15863: PUSH
15864: LD_INT 255
15866: EQUAL
15867: PUSH
15868: LD_VAR 0 2
15872: PPUSH
15873: CALL_OW 264
15877: PUSH
15878: LD_INT 14
15880: PUSH
15881: LD_INT 53
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: IN
15888: AND
15889: PUSH
15890: LD_VAR 0 4
15894: PPUSH
15895: LD_VAR 0 5
15899: PPUSH
15900: CALL_OW 488
15904: AND
15905: IFFALSE 15929
// CutTreeXYR ( unit , x , y , 12 ) ;
15907: LD_VAR 0 2
15911: PPUSH
15912: LD_VAR 0 4
15916: PPUSH
15917: LD_VAR 0 5
15921: PPUSH
15922: LD_INT 12
15924: PPUSH
15925: CALL 16120 0 4
// if cmd = 256 then
15929: LD_VAR 0 1
15933: PUSH
15934: LD_INT 256
15936: EQUAL
15937: IFFALSE 15958
// SetFactoryWaypoint ( unit , x , y ) ;
15939: LD_VAR 0 2
15943: PPUSH
15944: LD_VAR 0 4
15948: PPUSH
15949: LD_VAR 0 5
15953: PPUSH
15954: CALL 34827 0 3
// if cmd = 257 then
15958: LD_VAR 0 1
15962: PUSH
15963: LD_INT 257
15965: EQUAL
15966: IFFALSE 15987
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15968: LD_VAR 0 2
15972: PPUSH
15973: LD_VAR 0 4
15977: PPUSH
15978: LD_VAR 0 5
15982: PPUSH
15983: CALL 35317 0 3
// if cmd = 258 then
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 258
15994: EQUAL
15995: IFFALSE 16019
// BurnTreeXYR ( unit , x , y , 8 ) ;
15997: LD_VAR 0 2
16001: PPUSH
16002: LD_VAR 0 4
16006: PPUSH
16007: LD_VAR 0 5
16011: PPUSH
16012: LD_INT 8
16014: PPUSH
16015: CALL 16514 0 4
// end ;
16019: LD_VAR 0 6
16023: RET
// export function ComRadiation ( un ) ; var eff ; begin
16024: LD_INT 0
16026: PPUSH
16027: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 264
16037: PUSH
16038: LD_INT 91
16040: NONEQUAL
16041: IFFALSE 16045
// exit ;
16043: GO 16115
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16045: LD_INT 68
16047: PPUSH
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 255
16057: PPUSH
16058: CALL_OW 321
16062: PUSH
16063: LD_INT 2
16065: EQUAL
16066: IFFALSE 16078
// eff := 70 else
16068: LD_ADDR_VAR 0 3
16072: PUSH
16073: LD_INT 70
16075: ST_TO_ADDR
16076: GO 16086
// eff := 30 ;
16078: LD_ADDR_VAR 0 3
16082: PUSH
16083: LD_INT 30
16085: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 250
16095: PPUSH
16096: LD_VAR 0 1
16100: PPUSH
16101: CALL_OW 251
16105: PPUSH
16106: LD_VAR 0 3
16110: PPUSH
16111: CALL_OW 495
// end ;
16115: LD_VAR 0 2
16119: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16120: LD_INT 0
16122: PPUSH
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
16128: PPUSH
16129: PPUSH
16130: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16131: LD_VAR 0 1
16135: PPUSH
16136: CALL_OW 302
16140: NOT
16141: PUSH
16142: LD_VAR 0 2
16146: PPUSH
16147: LD_VAR 0 3
16151: PPUSH
16152: CALL_OW 488
16156: NOT
16157: OR
16158: PUSH
16159: LD_VAR 0 4
16163: NOT
16164: OR
16165: IFFALSE 16169
// exit ;
16167: GO 16509
// list := [ ] ;
16169: LD_ADDR_VAR 0 13
16173: PUSH
16174: EMPTY
16175: ST_TO_ADDR
// if x - r < 0 then
16176: LD_VAR 0 2
16180: PUSH
16181: LD_VAR 0 4
16185: MINUS
16186: PUSH
16187: LD_INT 0
16189: LESS
16190: IFFALSE 16202
// min_x := 0 else
16192: LD_ADDR_VAR 0 7
16196: PUSH
16197: LD_INT 0
16199: ST_TO_ADDR
16200: GO 16218
// min_x := x - r ;
16202: LD_ADDR_VAR 0 7
16206: PUSH
16207: LD_VAR 0 2
16211: PUSH
16212: LD_VAR 0 4
16216: MINUS
16217: ST_TO_ADDR
// if y - r < 0 then
16218: LD_VAR 0 3
16222: PUSH
16223: LD_VAR 0 4
16227: MINUS
16228: PUSH
16229: LD_INT 0
16231: LESS
16232: IFFALSE 16244
// min_y := 0 else
16234: LD_ADDR_VAR 0 8
16238: PUSH
16239: LD_INT 0
16241: ST_TO_ADDR
16242: GO 16260
// min_y := y - r ;
16244: LD_ADDR_VAR 0 8
16248: PUSH
16249: LD_VAR 0 3
16253: PUSH
16254: LD_VAR 0 4
16258: MINUS
16259: ST_TO_ADDR
// max_x := x + r ;
16260: LD_ADDR_VAR 0 9
16264: PUSH
16265: LD_VAR 0 2
16269: PUSH
16270: LD_VAR 0 4
16274: PLUS
16275: ST_TO_ADDR
// max_y := y + r ;
16276: LD_ADDR_VAR 0 10
16280: PUSH
16281: LD_VAR 0 3
16285: PUSH
16286: LD_VAR 0 4
16290: PLUS
16291: ST_TO_ADDR
// for _x = min_x to max_x do
16292: LD_ADDR_VAR 0 11
16296: PUSH
16297: DOUBLE
16298: LD_VAR 0 7
16302: DEC
16303: ST_TO_ADDR
16304: LD_VAR 0 9
16308: PUSH
16309: FOR_TO
16310: IFFALSE 16427
// for _y = min_y to max_y do
16312: LD_ADDR_VAR 0 12
16316: PUSH
16317: DOUBLE
16318: LD_VAR 0 8
16322: DEC
16323: ST_TO_ADDR
16324: LD_VAR 0 10
16328: PUSH
16329: FOR_TO
16330: IFFALSE 16423
// begin if not ValidHex ( _x , _y ) then
16332: LD_VAR 0 11
16336: PPUSH
16337: LD_VAR 0 12
16341: PPUSH
16342: CALL_OW 488
16346: NOT
16347: IFFALSE 16351
// continue ;
16349: GO 16329
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16351: LD_VAR 0 11
16355: PPUSH
16356: LD_VAR 0 12
16360: PPUSH
16361: CALL_OW 351
16365: PUSH
16366: LD_VAR 0 11
16370: PPUSH
16371: LD_VAR 0 12
16375: PPUSH
16376: CALL_OW 554
16380: AND
16381: IFFALSE 16421
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16383: LD_ADDR_VAR 0 13
16387: PUSH
16388: LD_VAR 0 13
16392: PPUSH
16393: LD_VAR 0 13
16397: PUSH
16398: LD_INT 1
16400: PLUS
16401: PPUSH
16402: LD_VAR 0 11
16406: PUSH
16407: LD_VAR 0 12
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 2
16420: ST_TO_ADDR
// end ;
16421: GO 16329
16423: POP
16424: POP
16425: GO 16309
16427: POP
16428: POP
// if not list then
16429: LD_VAR 0 13
16433: NOT
16434: IFFALSE 16438
// exit ;
16436: GO 16509
// for i in list do
16438: LD_ADDR_VAR 0 6
16442: PUSH
16443: LD_VAR 0 13
16447: PUSH
16448: FOR_IN
16449: IFFALSE 16507
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16451: LD_VAR 0 1
16455: PPUSH
16456: LD_STRING M
16458: PUSH
16459: LD_VAR 0 6
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PUSH
16468: LD_VAR 0 6
16472: PUSH
16473: LD_INT 2
16475: ARRAY
16476: PUSH
16477: LD_INT 0
16479: PUSH
16480: LD_INT 0
16482: PUSH
16483: LD_INT 0
16485: PUSH
16486: LD_INT 0
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: PPUSH
16501: CALL_OW 447
16505: GO 16448
16507: POP
16508: POP
// end ;
16509: LD_VAR 0 5
16513: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
16514: LD_INT 0
16516: PPUSH
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
16525: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16526: LD_VAR 0 1
16530: PPUSH
16531: CALL_OW 302
16535: NOT
16536: PUSH
16537: LD_VAR 0 2
16541: PPUSH
16542: LD_VAR 0 3
16546: PPUSH
16547: CALL_OW 488
16551: NOT
16552: OR
16553: PUSH
16554: LD_VAR 0 4
16558: NOT
16559: OR
16560: IFFALSE 16564
// exit ;
16562: GO 17077
// list := [ ] ;
16564: LD_ADDR_VAR 0 13
16568: PUSH
16569: EMPTY
16570: ST_TO_ADDR
// if x - r < 0 then
16571: LD_VAR 0 2
16575: PUSH
16576: LD_VAR 0 4
16580: MINUS
16581: PUSH
16582: LD_INT 0
16584: LESS
16585: IFFALSE 16597
// min_x := 0 else
16587: LD_ADDR_VAR 0 7
16591: PUSH
16592: LD_INT 0
16594: ST_TO_ADDR
16595: GO 16613
// min_x := x - r ;
16597: LD_ADDR_VAR 0 7
16601: PUSH
16602: LD_VAR 0 2
16606: PUSH
16607: LD_VAR 0 4
16611: MINUS
16612: ST_TO_ADDR
// if y - r < 0 then
16613: LD_VAR 0 3
16617: PUSH
16618: LD_VAR 0 4
16622: MINUS
16623: PUSH
16624: LD_INT 0
16626: LESS
16627: IFFALSE 16639
// min_y := 0 else
16629: LD_ADDR_VAR 0 8
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
16637: GO 16655
// min_y := y - r ;
16639: LD_ADDR_VAR 0 8
16643: PUSH
16644: LD_VAR 0 3
16648: PUSH
16649: LD_VAR 0 4
16653: MINUS
16654: ST_TO_ADDR
// max_x := x + r ;
16655: LD_ADDR_VAR 0 9
16659: PUSH
16660: LD_VAR 0 2
16664: PUSH
16665: LD_VAR 0 4
16669: PLUS
16670: ST_TO_ADDR
// max_y := y + r ;
16671: LD_ADDR_VAR 0 10
16675: PUSH
16676: LD_VAR 0 3
16680: PUSH
16681: LD_VAR 0 4
16685: PLUS
16686: ST_TO_ADDR
// for _x = min_x to max_x do
16687: LD_ADDR_VAR 0 11
16691: PUSH
16692: DOUBLE
16693: LD_VAR 0 7
16697: DEC
16698: ST_TO_ADDR
16699: LD_VAR 0 9
16703: PUSH
16704: FOR_TO
16705: IFFALSE 16822
// for _y = min_y to max_y do
16707: LD_ADDR_VAR 0 12
16711: PUSH
16712: DOUBLE
16713: LD_VAR 0 8
16717: DEC
16718: ST_TO_ADDR
16719: LD_VAR 0 10
16723: PUSH
16724: FOR_TO
16725: IFFALSE 16818
// begin if not ValidHex ( _x , _y ) then
16727: LD_VAR 0 11
16731: PPUSH
16732: LD_VAR 0 12
16736: PPUSH
16737: CALL_OW 488
16741: NOT
16742: IFFALSE 16746
// continue ;
16744: GO 16724
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16746: LD_VAR 0 11
16750: PPUSH
16751: LD_VAR 0 12
16755: PPUSH
16756: CALL_OW 351
16760: PUSH
16761: LD_VAR 0 11
16765: PPUSH
16766: LD_VAR 0 12
16770: PPUSH
16771: CALL_OW 554
16775: AND
16776: IFFALSE 16816
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16778: LD_ADDR_VAR 0 13
16782: PUSH
16783: LD_VAR 0 13
16787: PPUSH
16788: LD_VAR 0 13
16792: PUSH
16793: LD_INT 1
16795: PLUS
16796: PPUSH
16797: LD_VAR 0 11
16801: PUSH
16802: LD_VAR 0 12
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PPUSH
16811: CALL_OW 2
16815: ST_TO_ADDR
// end ;
16816: GO 16724
16818: POP
16819: POP
16820: GO 16704
16822: POP
16823: POP
// if not list then
16824: LD_VAR 0 13
16828: NOT
16829: IFFALSE 16833
// exit ;
16831: GO 17077
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
16833: LD_ADDR_VAR 0 13
16837: PUSH
16838: LD_VAR 0 1
16842: PPUSH
16843: LD_VAR 0 13
16847: PPUSH
16848: LD_INT 1
16850: PPUSH
16851: LD_INT 1
16853: PPUSH
16854: CALL 41737 0 4
16858: ST_TO_ADDR
// ComStop ( flame ) ;
16859: LD_VAR 0 1
16863: PPUSH
16864: CALL_OW 141
// for i in list do
16868: LD_ADDR_VAR 0 6
16872: PUSH
16873: LD_VAR 0 13
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16910
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_VAR 0 6
16890: PUSH
16891: LD_INT 1
16893: ARRAY
16894: PPUSH
16895: LD_VAR 0 6
16899: PUSH
16900: LD_INT 2
16902: ARRAY
16903: PPUSH
16904: CALL_OW 176
16908: GO 16878
16910: POP
16911: POP
// repeat wait ( 0 0$1 ) ;
16912: LD_INT 35
16914: PPUSH
16915: CALL_OW 67
// task := GetTaskList ( flame ) ;
16919: LD_ADDR_VAR 0 14
16923: PUSH
16924: LD_VAR 0 1
16928: PPUSH
16929: CALL_OW 437
16933: ST_TO_ADDR
// if not task then
16934: LD_VAR 0 14
16938: NOT
16939: IFFALSE 16943
// exit ;
16941: GO 17077
// if task [ 1 ] [ 1 ] <> | then
16943: LD_VAR 0 14
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: PUSH
16952: LD_INT 1
16954: ARRAY
16955: PUSH
16956: LD_STRING |
16958: NONEQUAL
16959: IFFALSE 16963
// exit ;
16961: GO 17077
// _x := task [ 1 ] [ 2 ] ;
16963: LD_ADDR_VAR 0 11
16967: PUSH
16968: LD_VAR 0 14
16972: PUSH
16973: LD_INT 1
16975: ARRAY
16976: PUSH
16977: LD_INT 2
16979: ARRAY
16980: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
16981: LD_ADDR_VAR 0 12
16985: PUSH
16986: LD_VAR 0 14
16990: PUSH
16991: LD_INT 1
16993: ARRAY
16994: PUSH
16995: LD_INT 3
16997: ARRAY
16998: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
16999: LD_VAR 0 11
17003: PPUSH
17004: LD_VAR 0 12
17008: PPUSH
17009: CALL_OW 351
17013: NOT
17014: PUSH
17015: LD_VAR 0 11
17019: PPUSH
17020: LD_VAR 0 12
17024: PPUSH
17025: CALL_OW 554
17029: NOT
17030: OR
17031: IFFALSE 17065
// begin task := Delete ( task , 1 ) ;
17033: LD_ADDR_VAR 0 14
17037: PUSH
17038: LD_VAR 0 14
17042: PPUSH
17043: LD_INT 1
17045: PPUSH
17046: CALL_OW 3
17050: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_VAR 0 14
17060: PPUSH
17061: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 314
17074: NOT
17075: IFFALSE 16912
// end ;
17077: LD_VAR 0 5
17081: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17082: LD_EXP 44
17086: NOT
17087: IFFALSE 17137
17089: GO 17091
17091: DISABLE
// begin initHack := true ;
17092: LD_ADDR_EXP 44
17096: PUSH
17097: LD_INT 1
17099: ST_TO_ADDR
// hackTanks := [ ] ;
17100: LD_ADDR_EXP 45
17104: PUSH
17105: EMPTY
17106: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17107: LD_ADDR_EXP 46
17111: PUSH
17112: EMPTY
17113: ST_TO_ADDR
// hackLimit := 3 ;
17114: LD_ADDR_EXP 47
17118: PUSH
17119: LD_INT 3
17121: ST_TO_ADDR
// hackDist := 12 ;
17122: LD_ADDR_EXP 48
17126: PUSH
17127: LD_INT 12
17129: ST_TO_ADDR
// hackCounter := [ ] ;
17130: LD_ADDR_EXP 49
17134: PUSH
17135: EMPTY
17136: ST_TO_ADDR
// end ;
17137: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17138: LD_EXP 44
17142: PUSH
17143: LD_INT 34
17145: PUSH
17146: LD_INT 99
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PPUSH
17153: CALL_OW 69
17157: AND
17158: IFFALSE 17411
17160: GO 17162
17162: DISABLE
17163: LD_INT 0
17165: PPUSH
17166: PPUSH
// begin enable ;
17167: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17168: LD_ADDR_VAR 0 1
17172: PUSH
17173: LD_INT 34
17175: PUSH
17176: LD_INT 99
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PPUSH
17183: CALL_OW 69
17187: PUSH
17188: FOR_IN
17189: IFFALSE 17409
// begin if not i in hackTanks then
17191: LD_VAR 0 1
17195: PUSH
17196: LD_EXP 45
17200: IN
17201: NOT
17202: IFFALSE 17285
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17204: LD_ADDR_EXP 45
17208: PUSH
17209: LD_EXP 45
17213: PPUSH
17214: LD_EXP 45
17218: PUSH
17219: LD_INT 1
17221: PLUS
17222: PPUSH
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 1
17232: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17233: LD_ADDR_EXP 46
17237: PUSH
17238: LD_EXP 46
17242: PPUSH
17243: LD_EXP 46
17247: PUSH
17248: LD_INT 1
17250: PLUS
17251: PPUSH
17252: EMPTY
17253: PPUSH
17254: CALL_OW 1
17258: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17259: LD_ADDR_EXP 49
17263: PUSH
17264: LD_EXP 49
17268: PPUSH
17269: LD_EXP 49
17273: PUSH
17274: LD_INT 1
17276: PLUS
17277: PPUSH
17278: EMPTY
17279: PPUSH
17280: CALL_OW 1
17284: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 302
17294: NOT
17295: IFFALSE 17308
// begin HackUnlinkAll ( i ) ;
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL 17414 0 1
// continue ;
17306: GO 17188
// end ; HackCheckCapturedStatus ( i ) ;
17308: LD_VAR 0 1
17312: PPUSH
17313: CALL 17857 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17317: LD_ADDR_VAR 0 2
17321: PUSH
17322: LD_INT 81
17324: PUSH
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 255
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 33
17341: PUSH
17342: LD_INT 3
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 91
17351: PUSH
17352: LD_VAR 0 1
17356: PUSH
17357: LD_EXP 48
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 50
17369: PUSH
17370: EMPTY
17371: LIST
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: ST_TO_ADDR
// if not tmp then
17384: LD_VAR 0 2
17388: NOT
17389: IFFALSE 17393
// continue ;
17391: GO 17188
// HackLink ( i , tmp ) ;
17393: LD_VAR 0 1
17397: PPUSH
17398: LD_VAR 0 2
17402: PPUSH
17403: CALL 17550 0 2
// end ;
17407: GO 17188
17409: POP
17410: POP
// end ;
17411: PPOPN 2
17413: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17414: LD_INT 0
17416: PPUSH
17417: PPUSH
17418: PPUSH
// if not hack in hackTanks then
17419: LD_VAR 0 1
17423: PUSH
17424: LD_EXP 45
17428: IN
17429: NOT
17430: IFFALSE 17434
// exit ;
17432: GO 17545
// index := GetElementIndex ( hackTanks , hack ) ;
17434: LD_ADDR_VAR 0 4
17438: PUSH
17439: LD_EXP 45
17443: PPUSH
17444: LD_VAR 0 1
17448: PPUSH
17449: CALL 41034 0 2
17453: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17454: LD_EXP 46
17458: PUSH
17459: LD_VAR 0 4
17463: ARRAY
17464: IFFALSE 17545
// begin for i in hackTanksCaptured [ index ] do
17466: LD_ADDR_VAR 0 3
17470: PUSH
17471: LD_EXP 46
17475: PUSH
17476: LD_VAR 0 4
17480: ARRAY
17481: PUSH
17482: FOR_IN
17483: IFFALSE 17509
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17485: LD_VAR 0 3
17489: PUSH
17490: LD_INT 1
17492: ARRAY
17493: PPUSH
17494: LD_VAR 0 3
17498: PUSH
17499: LD_INT 2
17501: ARRAY
17502: PPUSH
17503: CALL_OW 235
17507: GO 17482
17509: POP
17510: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17511: LD_ADDR_EXP 46
17515: PUSH
17516: LD_EXP 46
17520: PPUSH
17521: LD_VAR 0 4
17525: PPUSH
17526: EMPTY
17527: PPUSH
17528: CALL_OW 1
17532: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17533: LD_VAR 0 1
17537: PPUSH
17538: LD_INT 0
17540: PPUSH
17541: CALL_OW 505
// end ; end ;
17545: LD_VAR 0 2
17549: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17550: LD_INT 0
17552: PPUSH
17553: PPUSH
17554: PPUSH
// if not hack in hackTanks or not vehicles then
17555: LD_VAR 0 1
17559: PUSH
17560: LD_EXP 45
17564: IN
17565: NOT
17566: PUSH
17567: LD_VAR 0 2
17571: NOT
17572: OR
17573: IFFALSE 17577
// exit ;
17575: GO 17852
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17577: LD_ADDR_VAR 0 2
17581: PUSH
17582: LD_VAR 0 1
17586: PPUSH
17587: LD_VAR 0 2
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: CALL 41684 0 4
17602: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17603: LD_ADDR_VAR 0 5
17607: PUSH
17608: LD_EXP 45
17612: PPUSH
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL 41034 0 2
17622: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17623: LD_EXP 46
17627: PUSH
17628: LD_VAR 0 5
17632: ARRAY
17633: PUSH
17634: LD_EXP 47
17638: LESS
17639: IFFALSE 17828
// begin for i := 1 to vehicles do
17641: LD_ADDR_VAR 0 4
17645: PUSH
17646: DOUBLE
17647: LD_INT 1
17649: DEC
17650: ST_TO_ADDR
17651: LD_VAR 0 2
17655: PUSH
17656: FOR_TO
17657: IFFALSE 17826
// begin if hackTanksCaptured [ index ] = hackLimit then
17659: LD_EXP 46
17663: PUSH
17664: LD_VAR 0 5
17668: ARRAY
17669: PUSH
17670: LD_EXP 47
17674: EQUAL
17675: IFFALSE 17679
// break ;
17677: GO 17826
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17679: LD_ADDR_EXP 49
17683: PUSH
17684: LD_EXP 49
17688: PPUSH
17689: LD_VAR 0 5
17693: PPUSH
17694: LD_EXP 49
17698: PUSH
17699: LD_VAR 0 5
17703: ARRAY
17704: PUSH
17705: LD_INT 1
17707: PLUS
17708: PPUSH
17709: CALL_OW 1
17713: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17714: LD_ADDR_EXP 46
17718: PUSH
17719: LD_EXP 46
17723: PPUSH
17724: LD_VAR 0 5
17728: PUSH
17729: LD_EXP 46
17733: PUSH
17734: LD_VAR 0 5
17738: ARRAY
17739: PUSH
17740: LD_INT 1
17742: PLUS
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PPUSH
17748: LD_VAR 0 2
17752: PUSH
17753: LD_VAR 0 4
17757: ARRAY
17758: PUSH
17759: LD_VAR 0 2
17763: PUSH
17764: LD_VAR 0 4
17768: ARRAY
17769: PPUSH
17770: CALL_OW 255
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PPUSH
17779: CALL 41249 0 3
17783: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17784: LD_VAR 0 2
17788: PUSH
17789: LD_VAR 0 4
17793: ARRAY
17794: PPUSH
17795: LD_VAR 0 1
17799: PPUSH
17800: CALL_OW 255
17804: PPUSH
17805: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17809: LD_VAR 0 2
17813: PUSH
17814: LD_VAR 0 4
17818: ARRAY
17819: PPUSH
17820: CALL_OW 141
// end ;
17824: GO 17656
17826: POP
17827: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17828: LD_VAR 0 1
17832: PPUSH
17833: LD_EXP 46
17837: PUSH
17838: LD_VAR 0 5
17842: ARRAY
17843: PUSH
17844: LD_INT 0
17846: PLUS
17847: PPUSH
17848: CALL_OW 505
// end ;
17852: LD_VAR 0 3
17856: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17857: LD_INT 0
17859: PPUSH
17860: PPUSH
17861: PPUSH
17862: PPUSH
// if not hack in hackTanks then
17863: LD_VAR 0 1
17867: PUSH
17868: LD_EXP 45
17872: IN
17873: NOT
17874: IFFALSE 17878
// exit ;
17876: GO 18118
// index := GetElementIndex ( hackTanks , hack ) ;
17878: LD_ADDR_VAR 0 4
17882: PUSH
17883: LD_EXP 45
17887: PPUSH
17888: LD_VAR 0 1
17892: PPUSH
17893: CALL 41034 0 2
17897: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17898: LD_ADDR_VAR 0 3
17902: PUSH
17903: DOUBLE
17904: LD_EXP 46
17908: PUSH
17909: LD_VAR 0 4
17913: ARRAY
17914: INC
17915: ST_TO_ADDR
17916: LD_INT 1
17918: PUSH
17919: FOR_DOWNTO
17920: IFFALSE 18092
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17922: LD_ADDR_VAR 0 5
17926: PUSH
17927: LD_EXP 46
17931: PUSH
17932: LD_VAR 0 4
17936: ARRAY
17937: PUSH
17938: LD_VAR 0 3
17942: ARRAY
17943: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17944: LD_VAR 0 5
17948: PUSH
17949: LD_INT 1
17951: ARRAY
17952: PPUSH
17953: CALL_OW 302
17957: NOT
17958: PUSH
17959: LD_VAR 0 5
17963: PUSH
17964: LD_INT 1
17966: ARRAY
17967: PPUSH
17968: CALL_OW 255
17972: PUSH
17973: LD_VAR 0 1
17977: PPUSH
17978: CALL_OW 255
17982: NONEQUAL
17983: OR
17984: IFFALSE 18090
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17986: LD_VAR 0 5
17990: PUSH
17991: LD_INT 1
17993: ARRAY
17994: PPUSH
17995: CALL_OW 305
17999: PUSH
18000: LD_VAR 0 5
18004: PUSH
18005: LD_INT 1
18007: ARRAY
18008: PPUSH
18009: CALL_OW 255
18013: PUSH
18014: LD_VAR 0 1
18018: PPUSH
18019: CALL_OW 255
18023: EQUAL
18024: AND
18025: IFFALSE 18049
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18027: LD_VAR 0 5
18031: PUSH
18032: LD_INT 1
18034: ARRAY
18035: PPUSH
18036: LD_VAR 0 5
18040: PUSH
18041: LD_INT 2
18043: ARRAY
18044: PPUSH
18045: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18049: LD_ADDR_EXP 46
18053: PUSH
18054: LD_EXP 46
18058: PPUSH
18059: LD_VAR 0 4
18063: PPUSH
18064: LD_EXP 46
18068: PUSH
18069: LD_VAR 0 4
18073: ARRAY
18074: PPUSH
18075: LD_VAR 0 3
18079: PPUSH
18080: CALL_OW 3
18084: PPUSH
18085: CALL_OW 1
18089: ST_TO_ADDR
// end ; end ;
18090: GO 17919
18092: POP
18093: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_EXP 46
18103: PUSH
18104: LD_VAR 0 4
18108: ARRAY
18109: PUSH
18110: LD_INT 0
18112: PLUS
18113: PPUSH
18114: CALL_OW 505
// end ;
18118: LD_VAR 0 2
18122: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18123: LD_INT 0
18125: PPUSH
18126: PPUSH
18127: PPUSH
18128: PPUSH
// if not hack in hackTanks then
18129: LD_VAR 0 1
18133: PUSH
18134: LD_EXP 45
18138: IN
18139: NOT
18140: IFFALSE 18144
// exit ;
18142: GO 18229
// index := GetElementIndex ( hackTanks , hack ) ;
18144: LD_ADDR_VAR 0 5
18148: PUSH
18149: LD_EXP 45
18153: PPUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL 41034 0 2
18163: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18164: LD_ADDR_VAR 0 4
18168: PUSH
18169: DOUBLE
18170: LD_INT 1
18172: DEC
18173: ST_TO_ADDR
18174: LD_EXP 46
18178: PUSH
18179: LD_VAR 0 5
18183: ARRAY
18184: PUSH
18185: FOR_TO
18186: IFFALSE 18227
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18188: LD_EXP 46
18192: PUSH
18193: LD_VAR 0 5
18197: ARRAY
18198: PUSH
18199: LD_VAR 0 4
18203: ARRAY
18204: PUSH
18205: LD_INT 1
18207: ARRAY
18208: PUSH
18209: LD_VAR 0 2
18213: EQUAL
18214: IFFALSE 18225
// KillUnit ( vehicle ) ;
18216: LD_VAR 0 2
18220: PPUSH
18221: CALL_OW 66
18225: GO 18185
18227: POP
18228: POP
// end ;
18229: LD_VAR 0 3
18233: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18234: LD_EXP 50
18238: NOT
18239: IFFALSE 18274
18241: GO 18243
18243: DISABLE
// begin initMiner := true ;
18244: LD_ADDR_EXP 50
18248: PUSH
18249: LD_INT 1
18251: ST_TO_ADDR
// minersList := [ ] ;
18252: LD_ADDR_EXP 51
18256: PUSH
18257: EMPTY
18258: ST_TO_ADDR
// minerMinesList := [ ] ;
18259: LD_ADDR_EXP 52
18263: PUSH
18264: EMPTY
18265: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18266: LD_ADDR_EXP 53
18270: PUSH
18271: LD_INT 5
18273: ST_TO_ADDR
// end ;
18274: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18275: LD_EXP 50
18279: PUSH
18280: LD_INT 34
18282: PUSH
18283: LD_INT 81
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PPUSH
18290: CALL_OW 69
18294: AND
18295: IFFALSE 18756
18297: GO 18299
18299: DISABLE
18300: LD_INT 0
18302: PPUSH
18303: PPUSH
18304: PPUSH
18305: PPUSH
// begin enable ;
18306: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18307: LD_ADDR_VAR 0 1
18311: PUSH
18312: LD_INT 34
18314: PUSH
18315: LD_INT 81
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PPUSH
18322: CALL_OW 69
18326: PUSH
18327: FOR_IN
18328: IFFALSE 18400
// begin if not i in minersList then
18330: LD_VAR 0 1
18334: PUSH
18335: LD_EXP 51
18339: IN
18340: NOT
18341: IFFALSE 18398
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18343: LD_ADDR_EXP 51
18347: PUSH
18348: LD_EXP 51
18352: PPUSH
18353: LD_EXP 51
18357: PUSH
18358: LD_INT 1
18360: PLUS
18361: PPUSH
18362: LD_VAR 0 1
18366: PPUSH
18367: CALL_OW 1
18371: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18372: LD_ADDR_EXP 52
18376: PUSH
18377: LD_EXP 52
18381: PPUSH
18382: LD_EXP 52
18386: PUSH
18387: LD_INT 1
18389: PLUS
18390: PPUSH
18391: EMPTY
18392: PPUSH
18393: CALL_OW 1
18397: ST_TO_ADDR
// end end ;
18398: GO 18327
18400: POP
18401: POP
// for i := minerMinesList downto 1 do
18402: LD_ADDR_VAR 0 1
18406: PUSH
18407: DOUBLE
18408: LD_EXP 52
18412: INC
18413: ST_TO_ADDR
18414: LD_INT 1
18416: PUSH
18417: FOR_DOWNTO
18418: IFFALSE 18754
// begin if IsLive ( minersList [ i ] ) then
18420: LD_EXP 51
18424: PUSH
18425: LD_VAR 0 1
18429: ARRAY
18430: PPUSH
18431: CALL_OW 300
18435: IFFALSE 18463
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18437: LD_EXP 51
18441: PUSH
18442: LD_VAR 0 1
18446: ARRAY
18447: PPUSH
18448: LD_EXP 52
18452: PUSH
18453: LD_VAR 0 1
18457: ARRAY
18458: PPUSH
18459: CALL_OW 505
// if not minerMinesList [ i ] then
18463: LD_EXP 52
18467: PUSH
18468: LD_VAR 0 1
18472: ARRAY
18473: NOT
18474: IFFALSE 18478
// continue ;
18476: GO 18417
// for j := minerMinesList [ i ] downto 1 do
18478: LD_ADDR_VAR 0 2
18482: PUSH
18483: DOUBLE
18484: LD_EXP 52
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: INC
18495: ST_TO_ADDR
18496: LD_INT 1
18498: PUSH
18499: FOR_DOWNTO
18500: IFFALSE 18750
// begin side := GetSide ( minersList [ i ] ) ;
18502: LD_ADDR_VAR 0 3
18506: PUSH
18507: LD_EXP 51
18511: PUSH
18512: LD_VAR 0 1
18516: ARRAY
18517: PPUSH
18518: CALL_OW 255
18522: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18523: LD_ADDR_VAR 0 4
18527: PUSH
18528: LD_EXP 52
18532: PUSH
18533: LD_VAR 0 1
18537: ARRAY
18538: PUSH
18539: LD_VAR 0 2
18543: ARRAY
18544: PUSH
18545: LD_INT 1
18547: ARRAY
18548: PPUSH
18549: LD_EXP 52
18553: PUSH
18554: LD_VAR 0 1
18558: ARRAY
18559: PUSH
18560: LD_VAR 0 2
18564: ARRAY
18565: PUSH
18566: LD_INT 2
18568: ARRAY
18569: PPUSH
18570: CALL_OW 428
18574: ST_TO_ADDR
// if not tmp then
18575: LD_VAR 0 4
18579: NOT
18580: IFFALSE 18584
// continue ;
18582: GO 18499
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18584: LD_VAR 0 4
18588: PUSH
18589: LD_INT 81
18591: PUSH
18592: LD_VAR 0 3
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PPUSH
18601: CALL_OW 69
18605: IN
18606: PUSH
18607: LD_EXP 52
18611: PUSH
18612: LD_VAR 0 1
18616: ARRAY
18617: PUSH
18618: LD_VAR 0 2
18622: ARRAY
18623: PUSH
18624: LD_INT 1
18626: ARRAY
18627: PPUSH
18628: LD_EXP 52
18632: PUSH
18633: LD_VAR 0 1
18637: ARRAY
18638: PUSH
18639: LD_VAR 0 2
18643: ARRAY
18644: PUSH
18645: LD_INT 2
18647: ARRAY
18648: PPUSH
18649: CALL_OW 458
18653: AND
18654: IFFALSE 18748
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18656: LD_EXP 52
18660: PUSH
18661: LD_VAR 0 1
18665: ARRAY
18666: PUSH
18667: LD_VAR 0 2
18671: ARRAY
18672: PUSH
18673: LD_INT 1
18675: ARRAY
18676: PPUSH
18677: LD_EXP 52
18681: PUSH
18682: LD_VAR 0 1
18686: ARRAY
18687: PUSH
18688: LD_VAR 0 2
18692: ARRAY
18693: PUSH
18694: LD_INT 2
18696: ARRAY
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18707: LD_ADDR_EXP 52
18711: PUSH
18712: LD_EXP 52
18716: PPUSH
18717: LD_VAR 0 1
18721: PPUSH
18722: LD_EXP 52
18726: PUSH
18727: LD_VAR 0 1
18731: ARRAY
18732: PPUSH
18733: LD_VAR 0 2
18737: PPUSH
18738: CALL_OW 3
18742: PPUSH
18743: CALL_OW 1
18747: ST_TO_ADDR
// end ; end ;
18748: GO 18499
18750: POP
18751: POP
// end ;
18752: GO 18417
18754: POP
18755: POP
// end ;
18756: PPOPN 4
18758: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18759: LD_INT 0
18761: PPUSH
18762: PPUSH
// result := false ;
18763: LD_ADDR_VAR 0 4
18767: PUSH
18768: LD_INT 0
18770: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18771: LD_VAR 0 1
18775: PPUSH
18776: CALL_OW 264
18780: PUSH
18781: LD_INT 81
18783: EQUAL
18784: NOT
18785: IFFALSE 18789
// exit ;
18787: GO 19029
// index := GetElementIndex ( minersList , unit ) ;
18789: LD_ADDR_VAR 0 5
18793: PUSH
18794: LD_EXP 51
18798: PPUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL 41034 0 2
18808: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18809: LD_EXP 52
18813: PUSH
18814: LD_VAR 0 5
18818: ARRAY
18819: PUSH
18820: LD_EXP 53
18824: GREATEREQUAL
18825: IFFALSE 18829
// exit ;
18827: GO 19029
// ComMoveXY ( unit , x , y ) ;
18829: LD_VAR 0 1
18833: PPUSH
18834: LD_VAR 0 2
18838: PPUSH
18839: LD_VAR 0 3
18843: PPUSH
18844: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18848: LD_INT 35
18850: PPUSH
18851: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18855: LD_VAR 0 1
18859: PPUSH
18860: LD_VAR 0 2
18864: PPUSH
18865: LD_VAR 0 3
18869: PPUSH
18870: CALL 72795 0 3
18874: NOT
18875: PUSH
18876: LD_VAR 0 1
18880: PPUSH
18881: CALL_OW 314
18885: AND
18886: IFFALSE 18890
// exit ;
18888: GO 19029
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18890: LD_VAR 0 2
18894: PPUSH
18895: LD_VAR 0 3
18899: PPUSH
18900: CALL_OW 428
18904: PUSH
18905: LD_VAR 0 1
18909: EQUAL
18910: PUSH
18911: LD_VAR 0 1
18915: PPUSH
18916: CALL_OW 314
18920: NOT
18921: AND
18922: IFFALSE 18848
// PlaySoundXY ( x , y , PlantMine ) ;
18924: LD_VAR 0 2
18928: PPUSH
18929: LD_VAR 0 3
18933: PPUSH
18934: LD_STRING PlantMine
18936: PPUSH
18937: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18941: LD_VAR 0 2
18945: PPUSH
18946: LD_VAR 0 3
18950: PPUSH
18951: LD_VAR 0 1
18955: PPUSH
18956: CALL_OW 255
18960: PPUSH
18961: LD_INT 0
18963: PPUSH
18964: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18968: LD_ADDR_EXP 52
18972: PUSH
18973: LD_EXP 52
18977: PPUSH
18978: LD_VAR 0 5
18982: PUSH
18983: LD_EXP 52
18987: PUSH
18988: LD_VAR 0 5
18992: ARRAY
18993: PUSH
18994: LD_INT 1
18996: PLUS
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PPUSH
19002: LD_VAR 0 2
19006: PUSH
19007: LD_VAR 0 3
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PPUSH
19016: CALL 41249 0 3
19020: ST_TO_ADDR
// result := true ;
19021: LD_ADDR_VAR 0 4
19025: PUSH
19026: LD_INT 1
19028: ST_TO_ADDR
// end ;
19029: LD_VAR 0 4
19033: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19034: LD_INT 0
19036: PPUSH
19037: PPUSH
19038: PPUSH
// if not unit in minersList then
19039: LD_VAR 0 1
19043: PUSH
19044: LD_EXP 51
19048: IN
19049: NOT
19050: IFFALSE 19054
// exit ;
19052: GO 19446
// index := GetElementIndex ( minersList , unit ) ;
19054: LD_ADDR_VAR 0 6
19058: PUSH
19059: LD_EXP 51
19063: PPUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL 41034 0 2
19073: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19074: LD_ADDR_VAR 0 5
19078: PUSH
19079: DOUBLE
19080: LD_EXP 52
19084: PUSH
19085: LD_VAR 0 6
19089: ARRAY
19090: INC
19091: ST_TO_ADDR
19092: LD_INT 1
19094: PUSH
19095: FOR_DOWNTO
19096: IFFALSE 19257
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19098: LD_EXP 52
19102: PUSH
19103: LD_VAR 0 6
19107: ARRAY
19108: PUSH
19109: LD_VAR 0 5
19113: ARRAY
19114: PUSH
19115: LD_INT 1
19117: ARRAY
19118: PUSH
19119: LD_VAR 0 2
19123: EQUAL
19124: PUSH
19125: LD_EXP 52
19129: PUSH
19130: LD_VAR 0 6
19134: ARRAY
19135: PUSH
19136: LD_VAR 0 5
19140: ARRAY
19141: PUSH
19142: LD_INT 2
19144: ARRAY
19145: PUSH
19146: LD_VAR 0 3
19150: EQUAL
19151: AND
19152: IFFALSE 19255
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19154: LD_EXP 52
19158: PUSH
19159: LD_VAR 0 6
19163: ARRAY
19164: PUSH
19165: LD_VAR 0 5
19169: ARRAY
19170: PUSH
19171: LD_INT 1
19173: ARRAY
19174: PPUSH
19175: LD_EXP 52
19179: PUSH
19180: LD_VAR 0 6
19184: ARRAY
19185: PUSH
19186: LD_VAR 0 5
19190: ARRAY
19191: PUSH
19192: LD_INT 2
19194: ARRAY
19195: PPUSH
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 255
19205: PPUSH
19206: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19210: LD_ADDR_EXP 52
19214: PUSH
19215: LD_EXP 52
19219: PPUSH
19220: LD_VAR 0 6
19224: PPUSH
19225: LD_EXP 52
19229: PUSH
19230: LD_VAR 0 6
19234: ARRAY
19235: PPUSH
19236: LD_VAR 0 5
19240: PPUSH
19241: CALL_OW 3
19245: PPUSH
19246: CALL_OW 1
19250: ST_TO_ADDR
// exit ;
19251: POP
19252: POP
19253: GO 19446
// end ; end ;
19255: GO 19095
19257: POP
19258: POP
// for i := minerMinesList [ index ] downto 1 do
19259: LD_ADDR_VAR 0 5
19263: PUSH
19264: DOUBLE
19265: LD_EXP 52
19269: PUSH
19270: LD_VAR 0 6
19274: ARRAY
19275: INC
19276: ST_TO_ADDR
19277: LD_INT 1
19279: PUSH
19280: FOR_DOWNTO
19281: IFFALSE 19444
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19283: LD_EXP 52
19287: PUSH
19288: LD_VAR 0 6
19292: ARRAY
19293: PUSH
19294: LD_VAR 0 5
19298: ARRAY
19299: PUSH
19300: LD_INT 1
19302: ARRAY
19303: PPUSH
19304: LD_EXP 52
19308: PUSH
19309: LD_VAR 0 6
19313: ARRAY
19314: PUSH
19315: LD_VAR 0 5
19319: ARRAY
19320: PUSH
19321: LD_INT 2
19323: ARRAY
19324: PPUSH
19325: LD_VAR 0 2
19329: PPUSH
19330: LD_VAR 0 3
19334: PPUSH
19335: CALL_OW 298
19339: PUSH
19340: LD_INT 6
19342: LESS
19343: IFFALSE 19442
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19345: LD_EXP 52
19349: PUSH
19350: LD_VAR 0 6
19354: ARRAY
19355: PUSH
19356: LD_VAR 0 5
19360: ARRAY
19361: PUSH
19362: LD_INT 1
19364: ARRAY
19365: PPUSH
19366: LD_EXP 52
19370: PUSH
19371: LD_VAR 0 6
19375: ARRAY
19376: PUSH
19377: LD_VAR 0 5
19381: ARRAY
19382: PUSH
19383: LD_INT 2
19385: ARRAY
19386: PPUSH
19387: LD_VAR 0 1
19391: PPUSH
19392: CALL_OW 255
19396: PPUSH
19397: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19401: LD_ADDR_EXP 52
19405: PUSH
19406: LD_EXP 52
19410: PPUSH
19411: LD_VAR 0 6
19415: PPUSH
19416: LD_EXP 52
19420: PUSH
19421: LD_VAR 0 6
19425: ARRAY
19426: PPUSH
19427: LD_VAR 0 5
19431: PPUSH
19432: CALL_OW 3
19436: PPUSH
19437: CALL_OW 1
19441: ST_TO_ADDR
// end ; end ;
19442: GO 19280
19444: POP
19445: POP
// end ;
19446: LD_VAR 0 4
19450: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19451: LD_INT 0
19453: PPUSH
19454: PPUSH
19455: PPUSH
19456: PPUSH
19457: PPUSH
19458: PPUSH
19459: PPUSH
19460: PPUSH
19461: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19462: LD_VAR 0 1
19466: PPUSH
19467: CALL_OW 264
19471: PUSH
19472: LD_INT 81
19474: EQUAL
19475: NOT
19476: PUSH
19477: LD_VAR 0 1
19481: PUSH
19482: LD_EXP 51
19486: IN
19487: NOT
19488: OR
19489: IFFALSE 19493
// exit ;
19491: GO 19815
// index := GetElementIndex ( minersList , unit ) ;
19493: LD_ADDR_VAR 0 6
19497: PUSH
19498: LD_EXP 51
19502: PPUSH
19503: LD_VAR 0 1
19507: PPUSH
19508: CALL 41034 0 2
19512: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19513: LD_ADDR_VAR 0 8
19517: PUSH
19518: LD_EXP 53
19522: PUSH
19523: LD_EXP 52
19527: PUSH
19528: LD_VAR 0 6
19532: ARRAY
19533: MINUS
19534: ST_TO_ADDR
// if not minesFreeAmount then
19535: LD_VAR 0 8
19539: NOT
19540: IFFALSE 19544
// exit ;
19542: GO 19815
// tmp := [ ] ;
19544: LD_ADDR_VAR 0 7
19548: PUSH
19549: EMPTY
19550: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19551: LD_ADDR_VAR 0 5
19555: PUSH
19556: DOUBLE
19557: LD_INT 1
19559: DEC
19560: ST_TO_ADDR
19561: LD_VAR 0 8
19565: PUSH
19566: FOR_TO
19567: IFFALSE 19762
// begin _d := rand ( 0 , 5 ) ;
19569: LD_ADDR_VAR 0 11
19573: PUSH
19574: LD_INT 0
19576: PPUSH
19577: LD_INT 5
19579: PPUSH
19580: CALL_OW 12
19584: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19585: LD_ADDR_VAR 0 12
19589: PUSH
19590: LD_INT 2
19592: PPUSH
19593: LD_INT 6
19595: PPUSH
19596: CALL_OW 12
19600: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19601: LD_ADDR_VAR 0 9
19605: PUSH
19606: LD_VAR 0 2
19610: PPUSH
19611: LD_VAR 0 11
19615: PPUSH
19616: LD_VAR 0 12
19620: PPUSH
19621: CALL_OW 272
19625: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19626: LD_ADDR_VAR 0 10
19630: PUSH
19631: LD_VAR 0 3
19635: PPUSH
19636: LD_VAR 0 11
19640: PPUSH
19641: LD_VAR 0 12
19645: PPUSH
19646: CALL_OW 273
19650: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19651: LD_VAR 0 9
19655: PPUSH
19656: LD_VAR 0 10
19660: PPUSH
19661: CALL_OW 488
19665: PUSH
19666: LD_VAR 0 9
19670: PUSH
19671: LD_VAR 0 10
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_VAR 0 7
19684: IN
19685: NOT
19686: AND
19687: PUSH
19688: LD_VAR 0 9
19692: PPUSH
19693: LD_VAR 0 10
19697: PPUSH
19698: CALL_OW 458
19702: NOT
19703: AND
19704: IFFALSE 19746
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19706: LD_ADDR_VAR 0 7
19710: PUSH
19711: LD_VAR 0 7
19715: PPUSH
19716: LD_VAR 0 7
19720: PUSH
19721: LD_INT 1
19723: PLUS
19724: PPUSH
19725: LD_VAR 0 9
19729: PUSH
19730: LD_VAR 0 10
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PPUSH
19739: CALL_OW 1
19743: ST_TO_ADDR
19744: GO 19760
// i := i - 1 ;
19746: LD_ADDR_VAR 0 5
19750: PUSH
19751: LD_VAR 0 5
19755: PUSH
19756: LD_INT 1
19758: MINUS
19759: ST_TO_ADDR
// end ;
19760: GO 19566
19762: POP
19763: POP
// for i in tmp do
19764: LD_ADDR_VAR 0 5
19768: PUSH
19769: LD_VAR 0 7
19773: PUSH
19774: FOR_IN
19775: IFFALSE 19813
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19777: LD_VAR 0 1
19781: PPUSH
19782: LD_VAR 0 5
19786: PUSH
19787: LD_INT 1
19789: ARRAY
19790: PPUSH
19791: LD_VAR 0 5
19795: PUSH
19796: LD_INT 2
19798: ARRAY
19799: PPUSH
19800: CALL 18759 0 3
19804: NOT
19805: IFFALSE 19811
// exit ;
19807: POP
19808: POP
19809: GO 19815
19811: GO 19774
19813: POP
19814: POP
// end ;
19815: LD_VAR 0 4
19819: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
19820: LD_INT 0
19822: PPUSH
19823: PPUSH
19824: PPUSH
19825: PPUSH
19826: PPUSH
19827: PPUSH
19828: PPUSH
19829: PPUSH
19830: PPUSH
// if GetClass ( unit ) <> class_sniper then
19831: LD_VAR 0 1
19835: PPUSH
19836: CALL_OW 257
19840: PUSH
19841: LD_INT 5
19843: NONEQUAL
19844: IFFALSE 19848
// exit ;
19846: GO 20314
// dist := 8 ;
19848: LD_ADDR_VAR 0 5
19852: PUSH
19853: LD_INT 8
19855: ST_TO_ADDR
// viewRange := 12 ;
19856: LD_ADDR_VAR 0 8
19860: PUSH
19861: LD_INT 12
19863: ST_TO_ADDR
// side := GetSide ( unit ) ;
19864: LD_ADDR_VAR 0 6
19868: PUSH
19869: LD_VAR 0 1
19873: PPUSH
19874: CALL_OW 255
19878: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19879: LD_INT 61
19881: PPUSH
19882: LD_VAR 0 6
19886: PPUSH
19887: CALL_OW 321
19891: PUSH
19892: LD_INT 2
19894: EQUAL
19895: IFFALSE 19905
// viewRange := 16 ;
19897: LD_ADDR_VAR 0 8
19901: PUSH
19902: LD_INT 16
19904: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19905: LD_VAR 0 1
19909: PPUSH
19910: LD_VAR 0 2
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 297
19924: PUSH
19925: LD_VAR 0 5
19929: GREATER
19930: IFFALSE 20009
// begin ComMoveXY ( unit , x , y ) ;
19932: LD_VAR 0 1
19936: PPUSH
19937: LD_VAR 0 2
19941: PPUSH
19942: LD_VAR 0 3
19946: PPUSH
19947: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19951: LD_INT 35
19953: PPUSH
19954: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19958: LD_VAR 0 1
19962: PPUSH
19963: LD_VAR 0 2
19967: PPUSH
19968: LD_VAR 0 3
19972: PPUSH
19973: CALL 72795 0 3
19977: NOT
19978: IFFALSE 19982
// exit ;
19980: GO 20314
// until GetDistUnitXY ( unit , x , y ) < dist ;
19982: LD_VAR 0 1
19986: PPUSH
19987: LD_VAR 0 2
19991: PPUSH
19992: LD_VAR 0 3
19996: PPUSH
19997: CALL_OW 297
20001: PUSH
20002: LD_VAR 0 5
20006: LESS
20007: IFFALSE 19951
// end ; ComTurnXY ( unit , x , y ) ;
20009: LD_VAR 0 1
20013: PPUSH
20014: LD_VAR 0 2
20018: PPUSH
20019: LD_VAR 0 3
20023: PPUSH
20024: CALL_OW 118
// repeat if Multiplayer then
20028: LD_OWVAR 4
20032: IFFALSE 20043
// wait ( 35 ) else
20034: LD_INT 35
20036: PPUSH
20037: CALL_OW 67
20041: GO 20050
// wait ( 5 ) ;
20043: LD_INT 5
20045: PPUSH
20046: CALL_OW 67
// _d := GetDir ( unit ) ;
20050: LD_ADDR_VAR 0 11
20054: PUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 254
20064: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
20065: LD_ADDR_VAR 0 7
20069: PUSH
20070: LD_VAR 0 1
20074: PPUSH
20075: CALL_OW 250
20079: PPUSH
20080: LD_VAR 0 1
20084: PPUSH
20085: CALL_OW 251
20089: PPUSH
20090: LD_VAR 0 2
20094: PPUSH
20095: LD_VAR 0 3
20099: PPUSH
20100: CALL 75403 0 4
20104: ST_TO_ADDR
// until dir = _d ;
20105: LD_VAR 0 7
20109: PUSH
20110: LD_VAR 0 11
20114: EQUAL
20115: IFFALSE 20028
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
20117: LD_ADDR_VAR 0 9
20121: PUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 250
20131: PPUSH
20132: LD_VAR 0 7
20136: PPUSH
20137: LD_VAR 0 5
20141: PPUSH
20142: CALL_OW 272
20146: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
20147: LD_ADDR_VAR 0 10
20151: PUSH
20152: LD_VAR 0 1
20156: PPUSH
20157: CALL_OW 251
20161: PPUSH
20162: LD_VAR 0 7
20166: PPUSH
20167: LD_VAR 0 5
20171: PPUSH
20172: CALL_OW 273
20176: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20177: LD_VAR 0 9
20181: PPUSH
20182: LD_VAR 0 10
20186: PPUSH
20187: CALL_OW 488
20191: NOT
20192: IFFALSE 20196
// exit ;
20194: GO 20314
// ComAnimCustom ( unit , 1 ) ;
20196: LD_VAR 0 1
20200: PPUSH
20201: LD_INT 1
20203: PPUSH
20204: CALL_OW 592
// p := 0 ;
20208: LD_ADDR_VAR 0 12
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20216: LD_VAR 0 9
20220: PPUSH
20221: LD_VAR 0 10
20225: PPUSH
20226: LD_VAR 0 6
20230: PPUSH
20231: LD_VAR 0 8
20235: PPUSH
20236: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
20240: LD_INT 35
20242: PPUSH
20243: CALL_OW 67
// p := Inc ( p ) ;
20247: LD_ADDR_VAR 0 12
20251: PUSH
20252: LD_VAR 0 12
20256: PPUSH
20257: CALL 75359 0 1
20261: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
20262: LD_VAR 0 12
20266: PUSH
20267: LD_INT 3
20269: EQUAL
20270: PUSH
20271: LD_VAR 0 1
20275: PPUSH
20276: CALL_OW 302
20280: NOT
20281: OR
20282: PUSH
20283: LD_VAR 0 1
20287: PPUSH
20288: CALL_OW 301
20292: OR
20293: IFFALSE 20240
// RemoveSeeing ( _x , _y , side ) ;
20295: LD_VAR 0 9
20299: PPUSH
20300: LD_VAR 0 10
20304: PPUSH
20305: LD_VAR 0 6
20309: PPUSH
20310: CALL_OW 331
// end ; end_of_file
20314: LD_VAR 0 4
20318: RET
// export globalGameSaveCounter ; every 0 0$1 do
20319: GO 20321
20321: DISABLE
// begin enable ;
20322: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20323: LD_STRING updateTimer(
20325: PUSH
20326: LD_OWVAR 1
20330: STR
20331: PUSH
20332: LD_STRING );
20334: STR
20335: PPUSH
20336: CALL_OW 559
// end ;
20340: END
// every 0 0$1 do
20341: GO 20343
20343: DISABLE
// begin globalGameSaveCounter := 0 ;
20344: LD_ADDR_EXP 54
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20352: LD_STRING setGameSaveCounter(0)
20354: PPUSH
20355: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20359: LD_STRING initStreamRollete();
20361: PPUSH
20362: CALL_OW 559
// InitStreamMode ;
20366: CALL 21709 0 0
// DefineStreamItems ( false ) ;
20370: LD_INT 0
20372: PPUSH
20373: CALL 22173 0 1
// end ;
20377: END
// export function SOS_MapStart ( ) ; begin
20378: LD_INT 0
20380: PPUSH
// if streamModeActive then
20381: LD_EXP 55
20385: IFFALSE 20394
// DefineStreamItems ( true ) ;
20387: LD_INT 1
20389: PPUSH
20390: CALL 22173 0 1
// UpdateLuaVariables ( ) ;
20394: CALL 20411 0 0
// UpdateFactoryWaypoints ( ) ;
20398: CALL 35175 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20402: CALL 35427 0 0
// end ;
20406: LD_VAR 0 1
20410: RET
// function UpdateLuaVariables ( ) ; begin
20411: LD_INT 0
20413: PPUSH
// if globalGameSaveCounter then
20414: LD_EXP 54
20418: IFFALSE 20452
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20420: LD_ADDR_EXP 54
20424: PUSH
20425: LD_EXP 54
20429: PPUSH
20430: CALL 75359 0 1
20434: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20435: LD_STRING setGameSaveCounter(
20437: PUSH
20438: LD_EXP 54
20442: STR
20443: PUSH
20444: LD_STRING )
20446: STR
20447: PPUSH
20448: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20452: LD_STRING setGameDifficulty(
20454: PUSH
20455: LD_OWVAR 67
20459: STR
20460: PUSH
20461: LD_STRING )
20463: STR
20464: PPUSH
20465: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20469: LD_STRING displayDifficulty(
20471: PUSH
20472: LD_OWVAR 67
20476: STR
20477: PUSH
20478: LD_STRING )
20480: STR
20481: PPUSH
20482: CALL_OW 559
// end ;
20486: LD_VAR 0 1
20490: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20491: LD_INT 0
20493: PPUSH
// if p2 = stream_mode then
20494: LD_VAR 0 2
20498: PUSH
20499: LD_INT 100
20501: EQUAL
20502: IFFALSE 21505
// begin if not StreamModeActive then
20504: LD_EXP 55
20508: NOT
20509: IFFALSE 20519
// StreamModeActive := true ;
20511: LD_ADDR_EXP 55
20515: PUSH
20516: LD_INT 1
20518: ST_TO_ADDR
// if p3 = 0 then
20519: LD_VAR 0 3
20523: PUSH
20524: LD_INT 0
20526: EQUAL
20527: IFFALSE 20533
// InitStreamMode ;
20529: CALL 21709 0 0
// if p3 = 1 then
20533: LD_VAR 0 3
20537: PUSH
20538: LD_INT 1
20540: EQUAL
20541: IFFALSE 20551
// sRocket := true ;
20543: LD_ADDR_EXP 60
20547: PUSH
20548: LD_INT 1
20550: ST_TO_ADDR
// if p3 = 2 then
20551: LD_VAR 0 3
20555: PUSH
20556: LD_INT 2
20558: EQUAL
20559: IFFALSE 20569
// sSpeed := true ;
20561: LD_ADDR_EXP 59
20565: PUSH
20566: LD_INT 1
20568: ST_TO_ADDR
// if p3 = 3 then
20569: LD_VAR 0 3
20573: PUSH
20574: LD_INT 3
20576: EQUAL
20577: IFFALSE 20587
// sEngine := true ;
20579: LD_ADDR_EXP 61
20583: PUSH
20584: LD_INT 1
20586: ST_TO_ADDR
// if p3 = 4 then
20587: LD_VAR 0 3
20591: PUSH
20592: LD_INT 4
20594: EQUAL
20595: IFFALSE 20605
// sSpec := true ;
20597: LD_ADDR_EXP 58
20601: PUSH
20602: LD_INT 1
20604: ST_TO_ADDR
// if p3 = 5 then
20605: LD_VAR 0 3
20609: PUSH
20610: LD_INT 5
20612: EQUAL
20613: IFFALSE 20623
// sLevel := true ;
20615: LD_ADDR_EXP 62
20619: PUSH
20620: LD_INT 1
20622: ST_TO_ADDR
// if p3 = 6 then
20623: LD_VAR 0 3
20627: PUSH
20628: LD_INT 6
20630: EQUAL
20631: IFFALSE 20641
// sArmoury := true ;
20633: LD_ADDR_EXP 63
20637: PUSH
20638: LD_INT 1
20640: ST_TO_ADDR
// if p3 = 7 then
20641: LD_VAR 0 3
20645: PUSH
20646: LD_INT 7
20648: EQUAL
20649: IFFALSE 20659
// sRadar := true ;
20651: LD_ADDR_EXP 64
20655: PUSH
20656: LD_INT 1
20658: ST_TO_ADDR
// if p3 = 8 then
20659: LD_VAR 0 3
20663: PUSH
20664: LD_INT 8
20666: EQUAL
20667: IFFALSE 20677
// sBunker := true ;
20669: LD_ADDR_EXP 65
20673: PUSH
20674: LD_INT 1
20676: ST_TO_ADDR
// if p3 = 9 then
20677: LD_VAR 0 3
20681: PUSH
20682: LD_INT 9
20684: EQUAL
20685: IFFALSE 20695
// sHack := true ;
20687: LD_ADDR_EXP 66
20691: PUSH
20692: LD_INT 1
20694: ST_TO_ADDR
// if p3 = 10 then
20695: LD_VAR 0 3
20699: PUSH
20700: LD_INT 10
20702: EQUAL
20703: IFFALSE 20713
// sFire := true ;
20705: LD_ADDR_EXP 67
20709: PUSH
20710: LD_INT 1
20712: ST_TO_ADDR
// if p3 = 11 then
20713: LD_VAR 0 3
20717: PUSH
20718: LD_INT 11
20720: EQUAL
20721: IFFALSE 20731
// sRefresh := true ;
20723: LD_ADDR_EXP 68
20727: PUSH
20728: LD_INT 1
20730: ST_TO_ADDR
// if p3 = 12 then
20731: LD_VAR 0 3
20735: PUSH
20736: LD_INT 12
20738: EQUAL
20739: IFFALSE 20749
// sExp := true ;
20741: LD_ADDR_EXP 69
20745: PUSH
20746: LD_INT 1
20748: ST_TO_ADDR
// if p3 = 13 then
20749: LD_VAR 0 3
20753: PUSH
20754: LD_INT 13
20756: EQUAL
20757: IFFALSE 20767
// sDepot := true ;
20759: LD_ADDR_EXP 70
20763: PUSH
20764: LD_INT 1
20766: ST_TO_ADDR
// if p3 = 14 then
20767: LD_VAR 0 3
20771: PUSH
20772: LD_INT 14
20774: EQUAL
20775: IFFALSE 20785
// sFlag := true ;
20777: LD_ADDR_EXP 71
20781: PUSH
20782: LD_INT 1
20784: ST_TO_ADDR
// if p3 = 15 then
20785: LD_VAR 0 3
20789: PUSH
20790: LD_INT 15
20792: EQUAL
20793: IFFALSE 20803
// sKamikadze := true ;
20795: LD_ADDR_EXP 79
20799: PUSH
20800: LD_INT 1
20802: ST_TO_ADDR
// if p3 = 16 then
20803: LD_VAR 0 3
20807: PUSH
20808: LD_INT 16
20810: EQUAL
20811: IFFALSE 20821
// sTroll := true ;
20813: LD_ADDR_EXP 80
20817: PUSH
20818: LD_INT 1
20820: ST_TO_ADDR
// if p3 = 17 then
20821: LD_VAR 0 3
20825: PUSH
20826: LD_INT 17
20828: EQUAL
20829: IFFALSE 20839
// sSlow := true ;
20831: LD_ADDR_EXP 81
20835: PUSH
20836: LD_INT 1
20838: ST_TO_ADDR
// if p3 = 18 then
20839: LD_VAR 0 3
20843: PUSH
20844: LD_INT 18
20846: EQUAL
20847: IFFALSE 20857
// sLack := true ;
20849: LD_ADDR_EXP 82
20853: PUSH
20854: LD_INT 1
20856: ST_TO_ADDR
// if p3 = 19 then
20857: LD_VAR 0 3
20861: PUSH
20862: LD_INT 19
20864: EQUAL
20865: IFFALSE 20875
// sTank := true ;
20867: LD_ADDR_EXP 84
20871: PUSH
20872: LD_INT 1
20874: ST_TO_ADDR
// if p3 = 20 then
20875: LD_VAR 0 3
20879: PUSH
20880: LD_INT 20
20882: EQUAL
20883: IFFALSE 20893
// sRemote := true ;
20885: LD_ADDR_EXP 85
20889: PUSH
20890: LD_INT 1
20892: ST_TO_ADDR
// if p3 = 21 then
20893: LD_VAR 0 3
20897: PUSH
20898: LD_INT 21
20900: EQUAL
20901: IFFALSE 20911
// sPowell := true ;
20903: LD_ADDR_EXP 86
20907: PUSH
20908: LD_INT 1
20910: ST_TO_ADDR
// if p3 = 22 then
20911: LD_VAR 0 3
20915: PUSH
20916: LD_INT 22
20918: EQUAL
20919: IFFALSE 20929
// sTeleport := true ;
20921: LD_ADDR_EXP 89
20925: PUSH
20926: LD_INT 1
20928: ST_TO_ADDR
// if p3 = 23 then
20929: LD_VAR 0 3
20933: PUSH
20934: LD_INT 23
20936: EQUAL
20937: IFFALSE 20947
// sOilTower := true ;
20939: LD_ADDR_EXP 91
20943: PUSH
20944: LD_INT 1
20946: ST_TO_ADDR
// if p3 = 24 then
20947: LD_VAR 0 3
20951: PUSH
20952: LD_INT 24
20954: EQUAL
20955: IFFALSE 20965
// sShovel := true ;
20957: LD_ADDR_EXP 92
20961: PUSH
20962: LD_INT 1
20964: ST_TO_ADDR
// if p3 = 25 then
20965: LD_VAR 0 3
20969: PUSH
20970: LD_INT 25
20972: EQUAL
20973: IFFALSE 20983
// sSheik := true ;
20975: LD_ADDR_EXP 93
20979: PUSH
20980: LD_INT 1
20982: ST_TO_ADDR
// if p3 = 26 then
20983: LD_VAR 0 3
20987: PUSH
20988: LD_INT 26
20990: EQUAL
20991: IFFALSE 21001
// sEarthquake := true ;
20993: LD_ADDR_EXP 95
20997: PUSH
20998: LD_INT 1
21000: ST_TO_ADDR
// if p3 = 27 then
21001: LD_VAR 0 3
21005: PUSH
21006: LD_INT 27
21008: EQUAL
21009: IFFALSE 21019
// sAI := true ;
21011: LD_ADDR_EXP 96
21015: PUSH
21016: LD_INT 1
21018: ST_TO_ADDR
// if p3 = 28 then
21019: LD_VAR 0 3
21023: PUSH
21024: LD_INT 28
21026: EQUAL
21027: IFFALSE 21037
// sCargo := true ;
21029: LD_ADDR_EXP 99
21033: PUSH
21034: LD_INT 1
21036: ST_TO_ADDR
// if p3 = 29 then
21037: LD_VAR 0 3
21041: PUSH
21042: LD_INT 29
21044: EQUAL
21045: IFFALSE 21055
// sDLaser := true ;
21047: LD_ADDR_EXP 100
21051: PUSH
21052: LD_INT 1
21054: ST_TO_ADDR
// if p3 = 30 then
21055: LD_VAR 0 3
21059: PUSH
21060: LD_INT 30
21062: EQUAL
21063: IFFALSE 21073
// sExchange := true ;
21065: LD_ADDR_EXP 101
21069: PUSH
21070: LD_INT 1
21072: ST_TO_ADDR
// if p3 = 31 then
21073: LD_VAR 0 3
21077: PUSH
21078: LD_INT 31
21080: EQUAL
21081: IFFALSE 21091
// sFac := true ;
21083: LD_ADDR_EXP 102
21087: PUSH
21088: LD_INT 1
21090: ST_TO_ADDR
// if p3 = 32 then
21091: LD_VAR 0 3
21095: PUSH
21096: LD_INT 32
21098: EQUAL
21099: IFFALSE 21109
// sPower := true ;
21101: LD_ADDR_EXP 103
21105: PUSH
21106: LD_INT 1
21108: ST_TO_ADDR
// if p3 = 33 then
21109: LD_VAR 0 3
21113: PUSH
21114: LD_INT 33
21116: EQUAL
21117: IFFALSE 21127
// sRandom := true ;
21119: LD_ADDR_EXP 104
21123: PUSH
21124: LD_INT 1
21126: ST_TO_ADDR
// if p3 = 34 then
21127: LD_VAR 0 3
21131: PUSH
21132: LD_INT 34
21134: EQUAL
21135: IFFALSE 21145
// sShield := true ;
21137: LD_ADDR_EXP 105
21141: PUSH
21142: LD_INT 1
21144: ST_TO_ADDR
// if p3 = 35 then
21145: LD_VAR 0 3
21149: PUSH
21150: LD_INT 35
21152: EQUAL
21153: IFFALSE 21163
// sTime := true ;
21155: LD_ADDR_EXP 106
21159: PUSH
21160: LD_INT 1
21162: ST_TO_ADDR
// if p3 = 36 then
21163: LD_VAR 0 3
21167: PUSH
21168: LD_INT 36
21170: EQUAL
21171: IFFALSE 21181
// sTools := true ;
21173: LD_ADDR_EXP 107
21177: PUSH
21178: LD_INT 1
21180: ST_TO_ADDR
// if p3 = 101 then
21181: LD_VAR 0 3
21185: PUSH
21186: LD_INT 101
21188: EQUAL
21189: IFFALSE 21199
// sSold := true ;
21191: LD_ADDR_EXP 72
21195: PUSH
21196: LD_INT 1
21198: ST_TO_ADDR
// if p3 = 102 then
21199: LD_VAR 0 3
21203: PUSH
21204: LD_INT 102
21206: EQUAL
21207: IFFALSE 21217
// sDiff := true ;
21209: LD_ADDR_EXP 73
21213: PUSH
21214: LD_INT 1
21216: ST_TO_ADDR
// if p3 = 103 then
21217: LD_VAR 0 3
21221: PUSH
21222: LD_INT 103
21224: EQUAL
21225: IFFALSE 21235
// sFog := true ;
21227: LD_ADDR_EXP 76
21231: PUSH
21232: LD_INT 1
21234: ST_TO_ADDR
// if p3 = 104 then
21235: LD_VAR 0 3
21239: PUSH
21240: LD_INT 104
21242: EQUAL
21243: IFFALSE 21253
// sReset := true ;
21245: LD_ADDR_EXP 77
21249: PUSH
21250: LD_INT 1
21252: ST_TO_ADDR
// if p3 = 105 then
21253: LD_VAR 0 3
21257: PUSH
21258: LD_INT 105
21260: EQUAL
21261: IFFALSE 21271
// sSun := true ;
21263: LD_ADDR_EXP 78
21267: PUSH
21268: LD_INT 1
21270: ST_TO_ADDR
// if p3 = 106 then
21271: LD_VAR 0 3
21275: PUSH
21276: LD_INT 106
21278: EQUAL
21279: IFFALSE 21289
// sTiger := true ;
21281: LD_ADDR_EXP 74
21285: PUSH
21286: LD_INT 1
21288: ST_TO_ADDR
// if p3 = 107 then
21289: LD_VAR 0 3
21293: PUSH
21294: LD_INT 107
21296: EQUAL
21297: IFFALSE 21307
// sBomb := true ;
21299: LD_ADDR_EXP 75
21303: PUSH
21304: LD_INT 1
21306: ST_TO_ADDR
// if p3 = 108 then
21307: LD_VAR 0 3
21311: PUSH
21312: LD_INT 108
21314: EQUAL
21315: IFFALSE 21325
// sWound := true ;
21317: LD_ADDR_EXP 83
21321: PUSH
21322: LD_INT 1
21324: ST_TO_ADDR
// if p3 = 109 then
21325: LD_VAR 0 3
21329: PUSH
21330: LD_INT 109
21332: EQUAL
21333: IFFALSE 21343
// sBetray := true ;
21335: LD_ADDR_EXP 87
21339: PUSH
21340: LD_INT 1
21342: ST_TO_ADDR
// if p3 = 110 then
21343: LD_VAR 0 3
21347: PUSH
21348: LD_INT 110
21350: EQUAL
21351: IFFALSE 21361
// sContamin := true ;
21353: LD_ADDR_EXP 88
21357: PUSH
21358: LD_INT 1
21360: ST_TO_ADDR
// if p3 = 111 then
21361: LD_VAR 0 3
21365: PUSH
21366: LD_INT 111
21368: EQUAL
21369: IFFALSE 21379
// sOil := true ;
21371: LD_ADDR_EXP 90
21375: PUSH
21376: LD_INT 1
21378: ST_TO_ADDR
// if p3 = 112 then
21379: LD_VAR 0 3
21383: PUSH
21384: LD_INT 112
21386: EQUAL
21387: IFFALSE 21397
// sStu := true ;
21389: LD_ADDR_EXP 94
21393: PUSH
21394: LD_INT 1
21396: ST_TO_ADDR
// if p3 = 113 then
21397: LD_VAR 0 3
21401: PUSH
21402: LD_INT 113
21404: EQUAL
21405: IFFALSE 21415
// sBazooka := true ;
21407: LD_ADDR_EXP 97
21411: PUSH
21412: LD_INT 1
21414: ST_TO_ADDR
// if p3 = 114 then
21415: LD_VAR 0 3
21419: PUSH
21420: LD_INT 114
21422: EQUAL
21423: IFFALSE 21433
// sMortar := true ;
21425: LD_ADDR_EXP 98
21429: PUSH
21430: LD_INT 1
21432: ST_TO_ADDR
// if p3 = 115 then
21433: LD_VAR 0 3
21437: PUSH
21438: LD_INT 115
21440: EQUAL
21441: IFFALSE 21451
// sRanger := true ;
21443: LD_ADDR_EXP 108
21447: PUSH
21448: LD_INT 1
21450: ST_TO_ADDR
// if p3 = 116 then
21451: LD_VAR 0 3
21455: PUSH
21456: LD_INT 116
21458: EQUAL
21459: IFFALSE 21469
// sComputer := true ;
21461: LD_ADDR_EXP 109
21465: PUSH
21466: LD_INT 1
21468: ST_TO_ADDR
// if p3 = 117 then
21469: LD_VAR 0 3
21473: PUSH
21474: LD_INT 117
21476: EQUAL
21477: IFFALSE 21487
// s30 := true ;
21479: LD_ADDR_EXP 110
21483: PUSH
21484: LD_INT 1
21486: ST_TO_ADDR
// if p3 = 118 then
21487: LD_VAR 0 3
21491: PUSH
21492: LD_INT 118
21494: EQUAL
21495: IFFALSE 21505
// s60 := true ;
21497: LD_ADDR_EXP 111
21501: PUSH
21502: LD_INT 1
21504: ST_TO_ADDR
// end ; if p2 = hack_mode then
21505: LD_VAR 0 2
21509: PUSH
21510: LD_INT 101
21512: EQUAL
21513: IFFALSE 21641
// begin case p3 of 1 :
21515: LD_VAR 0 3
21519: PUSH
21520: LD_INT 1
21522: DOUBLE
21523: EQUAL
21524: IFTRUE 21528
21526: GO 21535
21528: POP
// hHackUnlimitedResources ; 2 :
21529: CALL 33788 0 0
21533: GO 21641
21535: LD_INT 2
21537: DOUBLE
21538: EQUAL
21539: IFTRUE 21543
21541: GO 21550
21543: POP
// hHackSetLevel10 ; 3 :
21544: CALL 33921 0 0
21548: GO 21641
21550: LD_INT 3
21552: DOUBLE
21553: EQUAL
21554: IFTRUE 21558
21556: GO 21565
21558: POP
// hHackSetLevel10YourUnits ; 4 :
21559: CALL 34006 0 0
21563: GO 21641
21565: LD_INT 4
21567: DOUBLE
21568: EQUAL
21569: IFTRUE 21573
21571: GO 21580
21573: POP
// hHackInvincible ; 5 :
21574: CALL 34454 0 0
21578: GO 21641
21580: LD_INT 5
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21595
21588: POP
// hHackInvisible ; 6 :
21589: CALL 34565 0 0
21593: GO 21641
21595: LD_INT 6
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21610
21603: POP
// hHackChangeYourSide ; 7 :
21604: CALL 34622 0 0
21608: GO 21641
21610: LD_INT 7
21612: DOUBLE
21613: EQUAL
21614: IFTRUE 21618
21616: GO 21625
21618: POP
// hHackChangeUnitSide ; 8 :
21619: CALL 34664 0 0
21623: GO 21641
21625: LD_INT 8
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21640
21633: POP
// hHackFog ; end ;
21634: CALL 34765 0 0
21638: GO 21641
21640: POP
// end ; if p2 = game_save_mode then
21641: LD_VAR 0 2
21645: PUSH
21646: LD_INT 102
21648: EQUAL
21649: IFFALSE 21704
// begin if p3 = 1 then
21651: LD_VAR 0 3
21655: PUSH
21656: LD_INT 1
21658: EQUAL
21659: IFFALSE 21671
// globalGameSaveCounter := p4 ;
21661: LD_ADDR_EXP 54
21665: PUSH
21666: LD_VAR 0 4
21670: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21671: LD_VAR 0 3
21675: PUSH
21676: LD_INT 2
21678: EQUAL
21679: PUSH
21680: LD_EXP 54
21684: AND
21685: IFFALSE 21704
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21687: LD_STRING setGameSaveCounter(
21689: PUSH
21690: LD_EXP 54
21694: STR
21695: PUSH
21696: LD_STRING )
21698: STR
21699: PPUSH
21700: CALL_OW 559
// end ; end ;
21704: LD_VAR 0 7
21708: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21709: LD_INT 0
21711: PPUSH
// streamModeActive := false ;
21712: LD_ADDR_EXP 55
21716: PUSH
21717: LD_INT 0
21719: ST_TO_ADDR
// normalCounter := 36 ;
21720: LD_ADDR_EXP 56
21724: PUSH
21725: LD_INT 36
21727: ST_TO_ADDR
// hardcoreCounter := 18 ;
21728: LD_ADDR_EXP 57
21732: PUSH
21733: LD_INT 18
21735: ST_TO_ADDR
// sRocket := false ;
21736: LD_ADDR_EXP 60
21740: PUSH
21741: LD_INT 0
21743: ST_TO_ADDR
// sSpeed := false ;
21744: LD_ADDR_EXP 59
21748: PUSH
21749: LD_INT 0
21751: ST_TO_ADDR
// sEngine := false ;
21752: LD_ADDR_EXP 61
21756: PUSH
21757: LD_INT 0
21759: ST_TO_ADDR
// sSpec := false ;
21760: LD_ADDR_EXP 58
21764: PUSH
21765: LD_INT 0
21767: ST_TO_ADDR
// sLevel := false ;
21768: LD_ADDR_EXP 62
21772: PUSH
21773: LD_INT 0
21775: ST_TO_ADDR
// sArmoury := false ;
21776: LD_ADDR_EXP 63
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// sRadar := false ;
21784: LD_ADDR_EXP 64
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// sBunker := false ;
21792: LD_ADDR_EXP 65
21796: PUSH
21797: LD_INT 0
21799: ST_TO_ADDR
// sHack := false ;
21800: LD_ADDR_EXP 66
21804: PUSH
21805: LD_INT 0
21807: ST_TO_ADDR
// sFire := false ;
21808: LD_ADDR_EXP 67
21812: PUSH
21813: LD_INT 0
21815: ST_TO_ADDR
// sRefresh := false ;
21816: LD_ADDR_EXP 68
21820: PUSH
21821: LD_INT 0
21823: ST_TO_ADDR
// sExp := false ;
21824: LD_ADDR_EXP 69
21828: PUSH
21829: LD_INT 0
21831: ST_TO_ADDR
// sDepot := false ;
21832: LD_ADDR_EXP 70
21836: PUSH
21837: LD_INT 0
21839: ST_TO_ADDR
// sFlag := false ;
21840: LD_ADDR_EXP 71
21844: PUSH
21845: LD_INT 0
21847: ST_TO_ADDR
// sKamikadze := false ;
21848: LD_ADDR_EXP 79
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// sTroll := false ;
21856: LD_ADDR_EXP 80
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// sSlow := false ;
21864: LD_ADDR_EXP 81
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// sLack := false ;
21872: LD_ADDR_EXP 82
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// sTank := false ;
21880: LD_ADDR_EXP 84
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// sRemote := false ;
21888: LD_ADDR_EXP 85
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// sPowell := false ;
21896: LD_ADDR_EXP 86
21900: PUSH
21901: LD_INT 0
21903: ST_TO_ADDR
// sTeleport := false ;
21904: LD_ADDR_EXP 89
21908: PUSH
21909: LD_INT 0
21911: ST_TO_ADDR
// sOilTower := false ;
21912: LD_ADDR_EXP 91
21916: PUSH
21917: LD_INT 0
21919: ST_TO_ADDR
// sShovel := false ;
21920: LD_ADDR_EXP 92
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// sSheik := false ;
21928: LD_ADDR_EXP 93
21932: PUSH
21933: LD_INT 0
21935: ST_TO_ADDR
// sEarthquake := false ;
21936: LD_ADDR_EXP 95
21940: PUSH
21941: LD_INT 0
21943: ST_TO_ADDR
// sAI := false ;
21944: LD_ADDR_EXP 96
21948: PUSH
21949: LD_INT 0
21951: ST_TO_ADDR
// sCargo := false ;
21952: LD_ADDR_EXP 99
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
// sDLaser := false ;
21960: LD_ADDR_EXP 100
21964: PUSH
21965: LD_INT 0
21967: ST_TO_ADDR
// sExchange := false ;
21968: LD_ADDR_EXP 101
21972: PUSH
21973: LD_INT 0
21975: ST_TO_ADDR
// sFac := false ;
21976: LD_ADDR_EXP 102
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
// sPower := false ;
21984: LD_ADDR_EXP 103
21988: PUSH
21989: LD_INT 0
21991: ST_TO_ADDR
// sRandom := false ;
21992: LD_ADDR_EXP 104
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// sShield := false ;
22000: LD_ADDR_EXP 105
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// sTime := false ;
22008: LD_ADDR_EXP 106
22012: PUSH
22013: LD_INT 0
22015: ST_TO_ADDR
// sTools := false ;
22016: LD_ADDR_EXP 107
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// sSold := false ;
22024: LD_ADDR_EXP 72
22028: PUSH
22029: LD_INT 0
22031: ST_TO_ADDR
// sDiff := false ;
22032: LD_ADDR_EXP 73
22036: PUSH
22037: LD_INT 0
22039: ST_TO_ADDR
// sFog := false ;
22040: LD_ADDR_EXP 76
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// sReset := false ;
22048: LD_ADDR_EXP 77
22052: PUSH
22053: LD_INT 0
22055: ST_TO_ADDR
// sSun := false ;
22056: LD_ADDR_EXP 78
22060: PUSH
22061: LD_INT 0
22063: ST_TO_ADDR
// sTiger := false ;
22064: LD_ADDR_EXP 74
22068: PUSH
22069: LD_INT 0
22071: ST_TO_ADDR
// sBomb := false ;
22072: LD_ADDR_EXP 75
22076: PUSH
22077: LD_INT 0
22079: ST_TO_ADDR
// sWound := false ;
22080: LD_ADDR_EXP 83
22084: PUSH
22085: LD_INT 0
22087: ST_TO_ADDR
// sBetray := false ;
22088: LD_ADDR_EXP 87
22092: PUSH
22093: LD_INT 0
22095: ST_TO_ADDR
// sContamin := false ;
22096: LD_ADDR_EXP 88
22100: PUSH
22101: LD_INT 0
22103: ST_TO_ADDR
// sOil := false ;
22104: LD_ADDR_EXP 90
22108: PUSH
22109: LD_INT 0
22111: ST_TO_ADDR
// sStu := false ;
22112: LD_ADDR_EXP 94
22116: PUSH
22117: LD_INT 0
22119: ST_TO_ADDR
// sBazooka := false ;
22120: LD_ADDR_EXP 97
22124: PUSH
22125: LD_INT 0
22127: ST_TO_ADDR
// sMortar := false ;
22128: LD_ADDR_EXP 98
22132: PUSH
22133: LD_INT 0
22135: ST_TO_ADDR
// sRanger := false ;
22136: LD_ADDR_EXP 108
22140: PUSH
22141: LD_INT 0
22143: ST_TO_ADDR
// sComputer := false ;
22144: LD_ADDR_EXP 109
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// s30 := false ;
22152: LD_ADDR_EXP 110
22156: PUSH
22157: LD_INT 0
22159: ST_TO_ADDR
// s60 := false ;
22160: LD_ADDR_EXP 111
22164: PUSH
22165: LD_INT 0
22167: ST_TO_ADDR
// end ;
22168: LD_VAR 0 1
22172: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22173: LD_INT 0
22175: PPUSH
22176: PPUSH
22177: PPUSH
22178: PPUSH
22179: PPUSH
22180: PPUSH
22181: PPUSH
// result := [ ] ;
22182: LD_ADDR_VAR 0 2
22186: PUSH
22187: EMPTY
22188: ST_TO_ADDR
// if campaign_id = 1 then
22189: LD_OWVAR 69
22193: PUSH
22194: LD_INT 1
22196: EQUAL
22197: IFFALSE 25363
// begin case mission_number of 1 :
22199: LD_OWVAR 70
22203: PUSH
22204: LD_INT 1
22206: DOUBLE
22207: EQUAL
22208: IFTRUE 22212
22210: GO 22288
22212: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22213: LD_ADDR_VAR 0 2
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 4
22223: PUSH
22224: LD_INT 11
22226: PUSH
22227: LD_INT 12
22229: PUSH
22230: LD_INT 15
22232: PUSH
22233: LD_INT 16
22235: PUSH
22236: LD_INT 22
22238: PUSH
22239: LD_INT 23
22241: PUSH
22242: LD_INT 26
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 101
22258: PUSH
22259: LD_INT 102
22261: PUSH
22262: LD_INT 106
22264: PUSH
22265: LD_INT 116
22267: PUSH
22268: LD_INT 117
22270: PUSH
22271: LD_INT 118
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: ST_TO_ADDR
22286: GO 25361
22288: LD_INT 2
22290: DOUBLE
22291: EQUAL
22292: IFTRUE 22296
22294: GO 22380
22296: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22297: LD_ADDR_VAR 0 2
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: LD_INT 4
22307: PUSH
22308: LD_INT 11
22310: PUSH
22311: LD_INT 12
22313: PUSH
22314: LD_INT 15
22316: PUSH
22317: LD_INT 16
22319: PUSH
22320: LD_INT 22
22322: PUSH
22323: LD_INT 23
22325: PUSH
22326: LD_INT 26
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 101
22342: PUSH
22343: LD_INT 102
22345: PUSH
22346: LD_INT 105
22348: PUSH
22349: LD_INT 106
22351: PUSH
22352: LD_INT 108
22354: PUSH
22355: LD_INT 116
22357: PUSH
22358: LD_INT 117
22360: PUSH
22361: LD_INT 118
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: ST_TO_ADDR
22378: GO 25361
22380: LD_INT 3
22382: DOUBLE
22383: EQUAL
22384: IFTRUE 22388
22386: GO 22476
22388: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22389: LD_ADDR_VAR 0 2
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: LD_INT 4
22399: PUSH
22400: LD_INT 5
22402: PUSH
22403: LD_INT 11
22405: PUSH
22406: LD_INT 12
22408: PUSH
22409: LD_INT 15
22411: PUSH
22412: LD_INT 16
22414: PUSH
22415: LD_INT 22
22417: PUSH
22418: LD_INT 26
22420: PUSH
22421: LD_INT 36
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 101
22438: PUSH
22439: LD_INT 102
22441: PUSH
22442: LD_INT 105
22444: PUSH
22445: LD_INT 106
22447: PUSH
22448: LD_INT 108
22450: PUSH
22451: LD_INT 116
22453: PUSH
22454: LD_INT 117
22456: PUSH
22457: LD_INT 118
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: ST_TO_ADDR
22474: GO 25361
22476: LD_INT 4
22478: DOUBLE
22479: EQUAL
22480: IFTRUE 22484
22482: GO 22580
22484: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22485: LD_ADDR_VAR 0 2
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: LD_INT 4
22495: PUSH
22496: LD_INT 5
22498: PUSH
22499: LD_INT 8
22501: PUSH
22502: LD_INT 11
22504: PUSH
22505: LD_INT 12
22507: PUSH
22508: LD_INT 15
22510: PUSH
22511: LD_INT 16
22513: PUSH
22514: LD_INT 22
22516: PUSH
22517: LD_INT 23
22519: PUSH
22520: LD_INT 26
22522: PUSH
22523: LD_INT 36
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 101
22542: PUSH
22543: LD_INT 102
22545: PUSH
22546: LD_INT 105
22548: PUSH
22549: LD_INT 106
22551: PUSH
22552: LD_INT 108
22554: PUSH
22555: LD_INT 116
22557: PUSH
22558: LD_INT 117
22560: PUSH
22561: LD_INT 118
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: ST_TO_ADDR
22578: GO 25361
22580: LD_INT 5
22582: DOUBLE
22583: EQUAL
22584: IFTRUE 22588
22586: GO 22700
22588: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22589: LD_ADDR_VAR 0 2
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 4
22599: PUSH
22600: LD_INT 5
22602: PUSH
22603: LD_INT 6
22605: PUSH
22606: LD_INT 8
22608: PUSH
22609: LD_INT 11
22611: PUSH
22612: LD_INT 12
22614: PUSH
22615: LD_INT 15
22617: PUSH
22618: LD_INT 16
22620: PUSH
22621: LD_INT 22
22623: PUSH
22624: LD_INT 23
22626: PUSH
22627: LD_INT 25
22629: PUSH
22630: LD_INT 26
22632: PUSH
22633: LD_INT 36
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 101
22654: PUSH
22655: LD_INT 102
22657: PUSH
22658: LD_INT 105
22660: PUSH
22661: LD_INT 106
22663: PUSH
22664: LD_INT 108
22666: PUSH
22667: LD_INT 109
22669: PUSH
22670: LD_INT 112
22672: PUSH
22673: LD_INT 116
22675: PUSH
22676: LD_INT 117
22678: PUSH
22679: LD_INT 118
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: ST_TO_ADDR
22698: GO 25361
22700: LD_INT 6
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22840
22708: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22709: LD_ADDR_VAR 0 2
22713: PUSH
22714: LD_INT 2
22716: PUSH
22717: LD_INT 4
22719: PUSH
22720: LD_INT 5
22722: PUSH
22723: LD_INT 6
22725: PUSH
22726: LD_INT 8
22728: PUSH
22729: LD_INT 11
22731: PUSH
22732: LD_INT 12
22734: PUSH
22735: LD_INT 15
22737: PUSH
22738: LD_INT 16
22740: PUSH
22741: LD_INT 20
22743: PUSH
22744: LD_INT 21
22746: PUSH
22747: LD_INT 22
22749: PUSH
22750: LD_INT 23
22752: PUSH
22753: LD_INT 25
22755: PUSH
22756: LD_INT 26
22758: PUSH
22759: LD_INT 30
22761: PUSH
22762: LD_INT 31
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 36
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 101
22794: PUSH
22795: LD_INT 102
22797: PUSH
22798: LD_INT 105
22800: PUSH
22801: LD_INT 106
22803: PUSH
22804: LD_INT 108
22806: PUSH
22807: LD_INT 109
22809: PUSH
22810: LD_INT 112
22812: PUSH
22813: LD_INT 116
22815: PUSH
22816: LD_INT 117
22818: PUSH
22819: LD_INT 118
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: ST_TO_ADDR
22838: GO 25361
22840: LD_INT 7
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 22960
22848: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22849: LD_ADDR_VAR 0 2
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: LD_INT 4
22859: PUSH
22860: LD_INT 5
22862: PUSH
22863: LD_INT 7
22865: PUSH
22866: LD_INT 11
22868: PUSH
22869: LD_INT 12
22871: PUSH
22872: LD_INT 15
22874: PUSH
22875: LD_INT 16
22877: PUSH
22878: LD_INT 20
22880: PUSH
22881: LD_INT 21
22883: PUSH
22884: LD_INT 22
22886: PUSH
22887: LD_INT 23
22889: PUSH
22890: LD_INT 25
22892: PUSH
22893: LD_INT 26
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 101
22914: PUSH
22915: LD_INT 102
22917: PUSH
22918: LD_INT 103
22920: PUSH
22921: LD_INT 105
22923: PUSH
22924: LD_INT 106
22926: PUSH
22927: LD_INT 108
22929: PUSH
22930: LD_INT 112
22932: PUSH
22933: LD_INT 116
22935: PUSH
22936: LD_INT 117
22938: PUSH
22939: LD_INT 118
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: ST_TO_ADDR
22958: GO 25361
22960: LD_INT 8
22962: DOUBLE
22963: EQUAL
22964: IFTRUE 22968
22966: GO 23108
22968: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22969: LD_ADDR_VAR 0 2
22973: PUSH
22974: LD_INT 2
22976: PUSH
22977: LD_INT 4
22979: PUSH
22980: LD_INT 5
22982: PUSH
22983: LD_INT 6
22985: PUSH
22986: LD_INT 7
22988: PUSH
22989: LD_INT 8
22991: PUSH
22992: LD_INT 11
22994: PUSH
22995: LD_INT 12
22997: PUSH
22998: LD_INT 15
23000: PUSH
23001: LD_INT 16
23003: PUSH
23004: LD_INT 20
23006: PUSH
23007: LD_INT 21
23009: PUSH
23010: LD_INT 22
23012: PUSH
23013: LD_INT 23
23015: PUSH
23016: LD_INT 25
23018: PUSH
23019: LD_INT 26
23021: PUSH
23022: LD_INT 30
23024: PUSH
23025: LD_INT 31
23027: PUSH
23028: LD_INT 32
23030: PUSH
23031: LD_INT 36
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 101
23058: PUSH
23059: LD_INT 102
23061: PUSH
23062: LD_INT 103
23064: PUSH
23065: LD_INT 105
23067: PUSH
23068: LD_INT 106
23070: PUSH
23071: LD_INT 108
23073: PUSH
23074: LD_INT 109
23076: PUSH
23077: LD_INT 112
23079: PUSH
23080: LD_INT 116
23082: PUSH
23083: LD_INT 117
23085: PUSH
23086: LD_INT 118
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: ST_TO_ADDR
23106: GO 25361
23108: LD_INT 9
23110: DOUBLE
23111: EQUAL
23112: IFTRUE 23116
23114: GO 23264
23116: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23117: LD_ADDR_VAR 0 2
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: LD_INT 4
23127: PUSH
23128: LD_INT 5
23130: PUSH
23131: LD_INT 6
23133: PUSH
23134: LD_INT 7
23136: PUSH
23137: LD_INT 8
23139: PUSH
23140: LD_INT 11
23142: PUSH
23143: LD_INT 12
23145: PUSH
23146: LD_INT 15
23148: PUSH
23149: LD_INT 16
23151: PUSH
23152: LD_INT 20
23154: PUSH
23155: LD_INT 21
23157: PUSH
23158: LD_INT 22
23160: PUSH
23161: LD_INT 23
23163: PUSH
23164: LD_INT 25
23166: PUSH
23167: LD_INT 26
23169: PUSH
23170: LD_INT 28
23172: PUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 31
23178: PUSH
23179: LD_INT 32
23181: PUSH
23182: LD_INT 36
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 101
23210: PUSH
23211: LD_INT 102
23213: PUSH
23214: LD_INT 103
23216: PUSH
23217: LD_INT 105
23219: PUSH
23220: LD_INT 106
23222: PUSH
23223: LD_INT 108
23225: PUSH
23226: LD_INT 109
23228: PUSH
23229: LD_INT 112
23231: PUSH
23232: LD_INT 114
23234: PUSH
23235: LD_INT 116
23237: PUSH
23238: LD_INT 117
23240: PUSH
23241: LD_INT 118
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: ST_TO_ADDR
23262: GO 25361
23264: LD_INT 10
23266: DOUBLE
23267: EQUAL
23268: IFTRUE 23272
23270: GO 23468
23272: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23273: LD_ADDR_VAR 0 2
23277: PUSH
23278: LD_INT 2
23280: PUSH
23281: LD_INT 4
23283: PUSH
23284: LD_INT 5
23286: PUSH
23287: LD_INT 6
23289: PUSH
23290: LD_INT 7
23292: PUSH
23293: LD_INT 8
23295: PUSH
23296: LD_INT 9
23298: PUSH
23299: LD_INT 10
23301: PUSH
23302: LD_INT 11
23304: PUSH
23305: LD_INT 12
23307: PUSH
23308: LD_INT 13
23310: PUSH
23311: LD_INT 14
23313: PUSH
23314: LD_INT 15
23316: PUSH
23317: LD_INT 16
23319: PUSH
23320: LD_INT 17
23322: PUSH
23323: LD_INT 18
23325: PUSH
23326: LD_INT 19
23328: PUSH
23329: LD_INT 20
23331: PUSH
23332: LD_INT 21
23334: PUSH
23335: LD_INT 22
23337: PUSH
23338: LD_INT 23
23340: PUSH
23341: LD_INT 24
23343: PUSH
23344: LD_INT 25
23346: PUSH
23347: LD_INT 26
23349: PUSH
23350: LD_INT 28
23352: PUSH
23353: LD_INT 30
23355: PUSH
23356: LD_INT 31
23358: PUSH
23359: LD_INT 32
23361: PUSH
23362: LD_INT 36
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 101
23398: PUSH
23399: LD_INT 102
23401: PUSH
23402: LD_INT 103
23404: PUSH
23405: LD_INT 104
23407: PUSH
23408: LD_INT 105
23410: PUSH
23411: LD_INT 106
23413: PUSH
23414: LD_INT 107
23416: PUSH
23417: LD_INT 108
23419: PUSH
23420: LD_INT 109
23422: PUSH
23423: LD_INT 110
23425: PUSH
23426: LD_INT 111
23428: PUSH
23429: LD_INT 112
23431: PUSH
23432: LD_INT 114
23434: PUSH
23435: LD_INT 116
23437: PUSH
23438: LD_INT 117
23440: PUSH
23441: LD_INT 118
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: ST_TO_ADDR
23466: GO 25361
23468: LD_INT 11
23470: DOUBLE
23471: EQUAL
23472: IFTRUE 23476
23474: GO 23680
23476: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23477: LD_ADDR_VAR 0 2
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: LD_INT 3
23487: PUSH
23488: LD_INT 4
23490: PUSH
23491: LD_INT 5
23493: PUSH
23494: LD_INT 6
23496: PUSH
23497: LD_INT 7
23499: PUSH
23500: LD_INT 8
23502: PUSH
23503: LD_INT 9
23505: PUSH
23506: LD_INT 10
23508: PUSH
23509: LD_INT 11
23511: PUSH
23512: LD_INT 12
23514: PUSH
23515: LD_INT 13
23517: PUSH
23518: LD_INT 14
23520: PUSH
23521: LD_INT 15
23523: PUSH
23524: LD_INT 16
23526: PUSH
23527: LD_INT 17
23529: PUSH
23530: LD_INT 18
23532: PUSH
23533: LD_INT 19
23535: PUSH
23536: LD_INT 20
23538: PUSH
23539: LD_INT 21
23541: PUSH
23542: LD_INT 22
23544: PUSH
23545: LD_INT 23
23547: PUSH
23548: LD_INT 24
23550: PUSH
23551: LD_INT 25
23553: PUSH
23554: LD_INT 26
23556: PUSH
23557: LD_INT 28
23559: PUSH
23560: LD_INT 30
23562: PUSH
23563: LD_INT 31
23565: PUSH
23566: LD_INT 32
23568: PUSH
23569: LD_INT 34
23571: PUSH
23572: LD_INT 36
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 101
23610: PUSH
23611: LD_INT 102
23613: PUSH
23614: LD_INT 103
23616: PUSH
23617: LD_INT 104
23619: PUSH
23620: LD_INT 105
23622: PUSH
23623: LD_INT 106
23625: PUSH
23626: LD_INT 107
23628: PUSH
23629: LD_INT 108
23631: PUSH
23632: LD_INT 109
23634: PUSH
23635: LD_INT 110
23637: PUSH
23638: LD_INT 111
23640: PUSH
23641: LD_INT 112
23643: PUSH
23644: LD_INT 114
23646: PUSH
23647: LD_INT 116
23649: PUSH
23650: LD_INT 117
23652: PUSH
23653: LD_INT 118
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: ST_TO_ADDR
23678: GO 25361
23680: LD_INT 12
23682: DOUBLE
23683: EQUAL
23684: IFTRUE 23688
23686: GO 23908
23688: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: LD_INT 2
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: LD_INT 4
23705: PUSH
23706: LD_INT 5
23708: PUSH
23709: LD_INT 6
23711: PUSH
23712: LD_INT 7
23714: PUSH
23715: LD_INT 8
23717: PUSH
23718: LD_INT 9
23720: PUSH
23721: LD_INT 10
23723: PUSH
23724: LD_INT 11
23726: PUSH
23727: LD_INT 12
23729: PUSH
23730: LD_INT 13
23732: PUSH
23733: LD_INT 14
23735: PUSH
23736: LD_INT 15
23738: PUSH
23739: LD_INT 16
23741: PUSH
23742: LD_INT 17
23744: PUSH
23745: LD_INT 18
23747: PUSH
23748: LD_INT 19
23750: PUSH
23751: LD_INT 20
23753: PUSH
23754: LD_INT 21
23756: PUSH
23757: LD_INT 22
23759: PUSH
23760: LD_INT 23
23762: PUSH
23763: LD_INT 24
23765: PUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 26
23771: PUSH
23772: LD_INT 27
23774: PUSH
23775: LD_INT 28
23777: PUSH
23778: LD_INT 30
23780: PUSH
23781: LD_INT 31
23783: PUSH
23784: LD_INT 32
23786: PUSH
23787: LD_INT 33
23789: PUSH
23790: LD_INT 34
23792: PUSH
23793: LD_INT 36
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 101
23834: PUSH
23835: LD_INT 102
23837: PUSH
23838: LD_INT 103
23840: PUSH
23841: LD_INT 104
23843: PUSH
23844: LD_INT 105
23846: PUSH
23847: LD_INT 106
23849: PUSH
23850: LD_INT 107
23852: PUSH
23853: LD_INT 108
23855: PUSH
23856: LD_INT 109
23858: PUSH
23859: LD_INT 110
23861: PUSH
23862: LD_INT 111
23864: PUSH
23865: LD_INT 112
23867: PUSH
23868: LD_INT 113
23870: PUSH
23871: LD_INT 114
23873: PUSH
23874: LD_INT 116
23876: PUSH
23877: LD_INT 117
23879: PUSH
23880: LD_INT 118
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: ST_TO_ADDR
23906: GO 25361
23908: LD_INT 13
23910: DOUBLE
23911: EQUAL
23912: IFTRUE 23916
23914: GO 24124
23916: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23917: LD_ADDR_VAR 0 2
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 2
23927: PUSH
23928: LD_INT 3
23930: PUSH
23931: LD_INT 4
23933: PUSH
23934: LD_INT 5
23936: PUSH
23937: LD_INT 8
23939: PUSH
23940: LD_INT 9
23942: PUSH
23943: LD_INT 10
23945: PUSH
23946: LD_INT 11
23948: PUSH
23949: LD_INT 12
23951: PUSH
23952: LD_INT 14
23954: PUSH
23955: LD_INT 15
23957: PUSH
23958: LD_INT 16
23960: PUSH
23961: LD_INT 17
23963: PUSH
23964: LD_INT 18
23966: PUSH
23967: LD_INT 19
23969: PUSH
23970: LD_INT 20
23972: PUSH
23973: LD_INT 21
23975: PUSH
23976: LD_INT 22
23978: PUSH
23979: LD_INT 23
23981: PUSH
23982: LD_INT 24
23984: PUSH
23985: LD_INT 25
23987: PUSH
23988: LD_INT 26
23990: PUSH
23991: LD_INT 27
23993: PUSH
23994: LD_INT 28
23996: PUSH
23997: LD_INT 30
23999: PUSH
24000: LD_INT 31
24002: PUSH
24003: LD_INT 32
24005: PUSH
24006: LD_INT 33
24008: PUSH
24009: LD_INT 34
24011: PUSH
24012: LD_INT 36
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 101
24050: PUSH
24051: LD_INT 102
24053: PUSH
24054: LD_INT 103
24056: PUSH
24057: LD_INT 104
24059: PUSH
24060: LD_INT 105
24062: PUSH
24063: LD_INT 106
24065: PUSH
24066: LD_INT 107
24068: PUSH
24069: LD_INT 108
24071: PUSH
24072: LD_INT 109
24074: PUSH
24075: LD_INT 110
24077: PUSH
24078: LD_INT 111
24080: PUSH
24081: LD_INT 112
24083: PUSH
24084: LD_INT 113
24086: PUSH
24087: LD_INT 114
24089: PUSH
24090: LD_INT 116
24092: PUSH
24093: LD_INT 117
24095: PUSH
24096: LD_INT 118
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: ST_TO_ADDR
24122: GO 25361
24124: LD_INT 14
24126: DOUBLE
24127: EQUAL
24128: IFTRUE 24132
24130: GO 24356
24132: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24133: LD_ADDR_VAR 0 2
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: LD_INT 3
24146: PUSH
24147: LD_INT 4
24149: PUSH
24150: LD_INT 5
24152: PUSH
24153: LD_INT 6
24155: PUSH
24156: LD_INT 7
24158: PUSH
24159: LD_INT 8
24161: PUSH
24162: LD_INT 9
24164: PUSH
24165: LD_INT 10
24167: PUSH
24168: LD_INT 11
24170: PUSH
24171: LD_INT 12
24173: PUSH
24174: LD_INT 13
24176: PUSH
24177: LD_INT 14
24179: PUSH
24180: LD_INT 15
24182: PUSH
24183: LD_INT 16
24185: PUSH
24186: LD_INT 17
24188: PUSH
24189: LD_INT 18
24191: PUSH
24192: LD_INT 19
24194: PUSH
24195: LD_INT 20
24197: PUSH
24198: LD_INT 21
24200: PUSH
24201: LD_INT 22
24203: PUSH
24204: LD_INT 23
24206: PUSH
24207: LD_INT 24
24209: PUSH
24210: LD_INT 25
24212: PUSH
24213: LD_INT 26
24215: PUSH
24216: LD_INT 27
24218: PUSH
24219: LD_INT 28
24221: PUSH
24222: LD_INT 29
24224: PUSH
24225: LD_INT 30
24227: PUSH
24228: LD_INT 31
24230: PUSH
24231: LD_INT 32
24233: PUSH
24234: LD_INT 33
24236: PUSH
24237: LD_INT 34
24239: PUSH
24240: LD_INT 36
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 101
24282: PUSH
24283: LD_INT 102
24285: PUSH
24286: LD_INT 103
24288: PUSH
24289: LD_INT 104
24291: PUSH
24292: LD_INT 105
24294: PUSH
24295: LD_INT 106
24297: PUSH
24298: LD_INT 107
24300: PUSH
24301: LD_INT 108
24303: PUSH
24304: LD_INT 109
24306: PUSH
24307: LD_INT 110
24309: PUSH
24310: LD_INT 111
24312: PUSH
24313: LD_INT 112
24315: PUSH
24316: LD_INT 113
24318: PUSH
24319: LD_INT 114
24321: PUSH
24322: LD_INT 116
24324: PUSH
24325: LD_INT 117
24327: PUSH
24328: LD_INT 118
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: ST_TO_ADDR
24354: GO 25361
24356: LD_INT 15
24358: DOUBLE
24359: EQUAL
24360: IFTRUE 24364
24362: GO 24588
24364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24365: LD_ADDR_VAR 0 2
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: LD_INT 3
24378: PUSH
24379: LD_INT 4
24381: PUSH
24382: LD_INT 5
24384: PUSH
24385: LD_INT 6
24387: PUSH
24388: LD_INT 7
24390: PUSH
24391: LD_INT 8
24393: PUSH
24394: LD_INT 9
24396: PUSH
24397: LD_INT 10
24399: PUSH
24400: LD_INT 11
24402: PUSH
24403: LD_INT 12
24405: PUSH
24406: LD_INT 13
24408: PUSH
24409: LD_INT 14
24411: PUSH
24412: LD_INT 15
24414: PUSH
24415: LD_INT 16
24417: PUSH
24418: LD_INT 17
24420: PUSH
24421: LD_INT 18
24423: PUSH
24424: LD_INT 19
24426: PUSH
24427: LD_INT 20
24429: PUSH
24430: LD_INT 21
24432: PUSH
24433: LD_INT 22
24435: PUSH
24436: LD_INT 23
24438: PUSH
24439: LD_INT 24
24441: PUSH
24442: LD_INT 25
24444: PUSH
24445: LD_INT 26
24447: PUSH
24448: LD_INT 27
24450: PUSH
24451: LD_INT 28
24453: PUSH
24454: LD_INT 29
24456: PUSH
24457: LD_INT 30
24459: PUSH
24460: LD_INT 31
24462: PUSH
24463: LD_INT 32
24465: PUSH
24466: LD_INT 33
24468: PUSH
24469: LD_INT 34
24471: PUSH
24472: LD_INT 36
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 101
24514: PUSH
24515: LD_INT 102
24517: PUSH
24518: LD_INT 103
24520: PUSH
24521: LD_INT 104
24523: PUSH
24524: LD_INT 105
24526: PUSH
24527: LD_INT 106
24529: PUSH
24530: LD_INT 107
24532: PUSH
24533: LD_INT 108
24535: PUSH
24536: LD_INT 109
24538: PUSH
24539: LD_INT 110
24541: PUSH
24542: LD_INT 111
24544: PUSH
24545: LD_INT 112
24547: PUSH
24548: LD_INT 113
24550: PUSH
24551: LD_INT 114
24553: PUSH
24554: LD_INT 116
24556: PUSH
24557: LD_INT 117
24559: PUSH
24560: LD_INT 118
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: ST_TO_ADDR
24586: GO 25361
24588: LD_INT 16
24590: DOUBLE
24591: EQUAL
24592: IFTRUE 24596
24594: GO 24732
24596: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24597: LD_ADDR_VAR 0 2
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: LD_INT 4
24607: PUSH
24608: LD_INT 5
24610: PUSH
24611: LD_INT 7
24613: PUSH
24614: LD_INT 11
24616: PUSH
24617: LD_INT 12
24619: PUSH
24620: LD_INT 15
24622: PUSH
24623: LD_INT 16
24625: PUSH
24626: LD_INT 20
24628: PUSH
24629: LD_INT 21
24631: PUSH
24632: LD_INT 22
24634: PUSH
24635: LD_INT 23
24637: PUSH
24638: LD_INT 25
24640: PUSH
24641: LD_INT 26
24643: PUSH
24644: LD_INT 30
24646: PUSH
24647: LD_INT 31
24649: PUSH
24650: LD_INT 32
24652: PUSH
24653: LD_INT 33
24655: PUSH
24656: LD_INT 34
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 101
24682: PUSH
24683: LD_INT 102
24685: PUSH
24686: LD_INT 103
24688: PUSH
24689: LD_INT 106
24691: PUSH
24692: LD_INT 108
24694: PUSH
24695: LD_INT 112
24697: PUSH
24698: LD_INT 113
24700: PUSH
24701: LD_INT 114
24703: PUSH
24704: LD_INT 116
24706: PUSH
24707: LD_INT 117
24709: PUSH
24710: LD_INT 118
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: ST_TO_ADDR
24730: GO 25361
24732: LD_INT 17
24734: DOUBLE
24735: EQUAL
24736: IFTRUE 24740
24738: GO 24964
24740: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24741: LD_ADDR_VAR 0 2
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: LD_INT 3
24754: PUSH
24755: LD_INT 4
24757: PUSH
24758: LD_INT 5
24760: PUSH
24761: LD_INT 6
24763: PUSH
24764: LD_INT 7
24766: PUSH
24767: LD_INT 8
24769: PUSH
24770: LD_INT 9
24772: PUSH
24773: LD_INT 10
24775: PUSH
24776: LD_INT 11
24778: PUSH
24779: LD_INT 12
24781: PUSH
24782: LD_INT 13
24784: PUSH
24785: LD_INT 14
24787: PUSH
24788: LD_INT 15
24790: PUSH
24791: LD_INT 16
24793: PUSH
24794: LD_INT 17
24796: PUSH
24797: LD_INT 18
24799: PUSH
24800: LD_INT 19
24802: PUSH
24803: LD_INT 20
24805: PUSH
24806: LD_INT 21
24808: PUSH
24809: LD_INT 22
24811: PUSH
24812: LD_INT 23
24814: PUSH
24815: LD_INT 24
24817: PUSH
24818: LD_INT 25
24820: PUSH
24821: LD_INT 26
24823: PUSH
24824: LD_INT 27
24826: PUSH
24827: LD_INT 28
24829: PUSH
24830: LD_INT 29
24832: PUSH
24833: LD_INT 30
24835: PUSH
24836: LD_INT 31
24838: PUSH
24839: LD_INT 32
24841: PUSH
24842: LD_INT 33
24844: PUSH
24845: LD_INT 34
24847: PUSH
24848: LD_INT 36
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 101
24890: PUSH
24891: LD_INT 102
24893: PUSH
24894: LD_INT 103
24896: PUSH
24897: LD_INT 104
24899: PUSH
24900: LD_INT 105
24902: PUSH
24903: LD_INT 106
24905: PUSH
24906: LD_INT 107
24908: PUSH
24909: LD_INT 108
24911: PUSH
24912: LD_INT 109
24914: PUSH
24915: LD_INT 110
24917: PUSH
24918: LD_INT 111
24920: PUSH
24921: LD_INT 112
24923: PUSH
24924: LD_INT 113
24926: PUSH
24927: LD_INT 114
24929: PUSH
24930: LD_INT 116
24932: PUSH
24933: LD_INT 117
24935: PUSH
24936: LD_INT 118
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: ST_TO_ADDR
24962: GO 25361
24964: LD_INT 18
24966: DOUBLE
24967: EQUAL
24968: IFTRUE 24972
24970: GO 25120
24972: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24973: LD_ADDR_VAR 0 2
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 4
24983: PUSH
24984: LD_INT 5
24986: PUSH
24987: LD_INT 7
24989: PUSH
24990: LD_INT 11
24992: PUSH
24993: LD_INT 12
24995: PUSH
24996: LD_INT 15
24998: PUSH
24999: LD_INT 16
25001: PUSH
25002: LD_INT 20
25004: PUSH
25005: LD_INT 21
25007: PUSH
25008: LD_INT 22
25010: PUSH
25011: LD_INT 23
25013: PUSH
25014: LD_INT 25
25016: PUSH
25017: LD_INT 26
25019: PUSH
25020: LD_INT 30
25022: PUSH
25023: LD_INT 31
25025: PUSH
25026: LD_INT 32
25028: PUSH
25029: LD_INT 33
25031: PUSH
25032: LD_INT 34
25034: PUSH
25035: LD_INT 35
25037: PUSH
25038: LD_INT 36
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 101
25066: PUSH
25067: LD_INT 102
25069: PUSH
25070: LD_INT 103
25072: PUSH
25073: LD_INT 106
25075: PUSH
25076: LD_INT 108
25078: PUSH
25079: LD_INT 112
25081: PUSH
25082: LD_INT 113
25084: PUSH
25085: LD_INT 114
25087: PUSH
25088: LD_INT 115
25090: PUSH
25091: LD_INT 116
25093: PUSH
25094: LD_INT 117
25096: PUSH
25097: LD_INT 118
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: ST_TO_ADDR
25118: GO 25361
25120: LD_INT 19
25122: DOUBLE
25123: EQUAL
25124: IFTRUE 25128
25126: GO 25360
25128: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25129: LD_ADDR_VAR 0 2
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: LD_INT 4
25145: PUSH
25146: LD_INT 5
25148: PUSH
25149: LD_INT 6
25151: PUSH
25152: LD_INT 7
25154: PUSH
25155: LD_INT 8
25157: PUSH
25158: LD_INT 9
25160: PUSH
25161: LD_INT 10
25163: PUSH
25164: LD_INT 11
25166: PUSH
25167: LD_INT 12
25169: PUSH
25170: LD_INT 13
25172: PUSH
25173: LD_INT 14
25175: PUSH
25176: LD_INT 15
25178: PUSH
25179: LD_INT 16
25181: PUSH
25182: LD_INT 17
25184: PUSH
25185: LD_INT 18
25187: PUSH
25188: LD_INT 19
25190: PUSH
25191: LD_INT 20
25193: PUSH
25194: LD_INT 21
25196: PUSH
25197: LD_INT 22
25199: PUSH
25200: LD_INT 23
25202: PUSH
25203: LD_INT 24
25205: PUSH
25206: LD_INT 25
25208: PUSH
25209: LD_INT 26
25211: PUSH
25212: LD_INT 27
25214: PUSH
25215: LD_INT 28
25217: PUSH
25218: LD_INT 29
25220: PUSH
25221: LD_INT 30
25223: PUSH
25224: LD_INT 31
25226: PUSH
25227: LD_INT 32
25229: PUSH
25230: LD_INT 33
25232: PUSH
25233: LD_INT 34
25235: PUSH
25236: LD_INT 35
25238: PUSH
25239: LD_INT 36
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 101
25282: PUSH
25283: LD_INT 102
25285: PUSH
25286: LD_INT 103
25288: PUSH
25289: LD_INT 104
25291: PUSH
25292: LD_INT 105
25294: PUSH
25295: LD_INT 106
25297: PUSH
25298: LD_INT 107
25300: PUSH
25301: LD_INT 108
25303: PUSH
25304: LD_INT 109
25306: PUSH
25307: LD_INT 110
25309: PUSH
25310: LD_INT 111
25312: PUSH
25313: LD_INT 112
25315: PUSH
25316: LD_INT 113
25318: PUSH
25319: LD_INT 114
25321: PUSH
25322: LD_INT 115
25324: PUSH
25325: LD_INT 116
25327: PUSH
25328: LD_INT 117
25330: PUSH
25331: LD_INT 118
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: ST_TO_ADDR
25358: GO 25361
25360: POP
// end else
25361: GO 25592
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25363: LD_ADDR_VAR 0 2
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: LD_INT 2
25373: PUSH
25374: LD_INT 3
25376: PUSH
25377: LD_INT 4
25379: PUSH
25380: LD_INT 5
25382: PUSH
25383: LD_INT 6
25385: PUSH
25386: LD_INT 7
25388: PUSH
25389: LD_INT 8
25391: PUSH
25392: LD_INT 9
25394: PUSH
25395: LD_INT 10
25397: PUSH
25398: LD_INT 11
25400: PUSH
25401: LD_INT 12
25403: PUSH
25404: LD_INT 13
25406: PUSH
25407: LD_INT 14
25409: PUSH
25410: LD_INT 15
25412: PUSH
25413: LD_INT 16
25415: PUSH
25416: LD_INT 17
25418: PUSH
25419: LD_INT 18
25421: PUSH
25422: LD_INT 19
25424: PUSH
25425: LD_INT 20
25427: PUSH
25428: LD_INT 21
25430: PUSH
25431: LD_INT 22
25433: PUSH
25434: LD_INT 23
25436: PUSH
25437: LD_INT 24
25439: PUSH
25440: LD_INT 25
25442: PUSH
25443: LD_INT 26
25445: PUSH
25446: LD_INT 27
25448: PUSH
25449: LD_INT 28
25451: PUSH
25452: LD_INT 29
25454: PUSH
25455: LD_INT 30
25457: PUSH
25458: LD_INT 31
25460: PUSH
25461: LD_INT 32
25463: PUSH
25464: LD_INT 33
25466: PUSH
25467: LD_INT 34
25469: PUSH
25470: LD_INT 35
25472: PUSH
25473: LD_INT 36
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 101
25516: PUSH
25517: LD_INT 102
25519: PUSH
25520: LD_INT 103
25522: PUSH
25523: LD_INT 104
25525: PUSH
25526: LD_INT 105
25528: PUSH
25529: LD_INT 106
25531: PUSH
25532: LD_INT 107
25534: PUSH
25535: LD_INT 108
25537: PUSH
25538: LD_INT 109
25540: PUSH
25541: LD_INT 110
25543: PUSH
25544: LD_INT 111
25546: PUSH
25547: LD_INT 112
25549: PUSH
25550: LD_INT 113
25552: PUSH
25553: LD_INT 114
25555: PUSH
25556: LD_INT 115
25558: PUSH
25559: LD_INT 116
25561: PUSH
25562: LD_INT 117
25564: PUSH
25565: LD_INT 118
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: ST_TO_ADDR
// if result then
25592: LD_VAR 0 2
25596: IFFALSE 26382
// begin normal :=  ;
25598: LD_ADDR_VAR 0 5
25602: PUSH
25603: LD_STRING 
25605: ST_TO_ADDR
// hardcore :=  ;
25606: LD_ADDR_VAR 0 6
25610: PUSH
25611: LD_STRING 
25613: ST_TO_ADDR
// active :=  ;
25614: LD_ADDR_VAR 0 7
25618: PUSH
25619: LD_STRING 
25621: ST_TO_ADDR
// for i = 1 to normalCounter do
25622: LD_ADDR_VAR 0 8
25626: PUSH
25627: DOUBLE
25628: LD_INT 1
25630: DEC
25631: ST_TO_ADDR
25632: LD_EXP 56
25636: PUSH
25637: FOR_TO
25638: IFFALSE 25739
// begin tmp := 0 ;
25640: LD_ADDR_VAR 0 3
25644: PUSH
25645: LD_STRING 0
25647: ST_TO_ADDR
// if result [ 1 ] then
25648: LD_VAR 0 2
25652: PUSH
25653: LD_INT 1
25655: ARRAY
25656: IFFALSE 25721
// if result [ 1 ] [ 1 ] = i then
25658: LD_VAR 0 2
25662: PUSH
25663: LD_INT 1
25665: ARRAY
25666: PUSH
25667: LD_INT 1
25669: ARRAY
25670: PUSH
25671: LD_VAR 0 8
25675: EQUAL
25676: IFFALSE 25721
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25678: LD_ADDR_VAR 0 2
25682: PUSH
25683: LD_VAR 0 2
25687: PPUSH
25688: LD_INT 1
25690: PPUSH
25691: LD_VAR 0 2
25695: PUSH
25696: LD_INT 1
25698: ARRAY
25699: PPUSH
25700: LD_INT 1
25702: PPUSH
25703: CALL_OW 3
25707: PPUSH
25708: CALL_OW 1
25712: ST_TO_ADDR
// tmp := 1 ;
25713: LD_ADDR_VAR 0 3
25717: PUSH
25718: LD_STRING 1
25720: ST_TO_ADDR
// end ; normal := normal & tmp ;
25721: LD_ADDR_VAR 0 5
25725: PUSH
25726: LD_VAR 0 5
25730: PUSH
25731: LD_VAR 0 3
25735: STR
25736: ST_TO_ADDR
// end ;
25737: GO 25637
25739: POP
25740: POP
// for i = 1 to hardcoreCounter do
25741: LD_ADDR_VAR 0 8
25745: PUSH
25746: DOUBLE
25747: LD_INT 1
25749: DEC
25750: ST_TO_ADDR
25751: LD_EXP 57
25755: PUSH
25756: FOR_TO
25757: IFFALSE 25862
// begin tmp := 0 ;
25759: LD_ADDR_VAR 0 3
25763: PUSH
25764: LD_STRING 0
25766: ST_TO_ADDR
// if result [ 2 ] then
25767: LD_VAR 0 2
25771: PUSH
25772: LD_INT 2
25774: ARRAY
25775: IFFALSE 25844
// if result [ 2 ] [ 1 ] = 100 + i then
25777: LD_VAR 0 2
25781: PUSH
25782: LD_INT 2
25784: ARRAY
25785: PUSH
25786: LD_INT 1
25788: ARRAY
25789: PUSH
25790: LD_INT 100
25792: PUSH
25793: LD_VAR 0 8
25797: PLUS
25798: EQUAL
25799: IFFALSE 25844
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25801: LD_ADDR_VAR 0 2
25805: PUSH
25806: LD_VAR 0 2
25810: PPUSH
25811: LD_INT 2
25813: PPUSH
25814: LD_VAR 0 2
25818: PUSH
25819: LD_INT 2
25821: ARRAY
25822: PPUSH
25823: LD_INT 1
25825: PPUSH
25826: CALL_OW 3
25830: PPUSH
25831: CALL_OW 1
25835: ST_TO_ADDR
// tmp := 1 ;
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_STRING 1
25843: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25844: LD_ADDR_VAR 0 6
25848: PUSH
25849: LD_VAR 0 6
25853: PUSH
25854: LD_VAR 0 3
25858: STR
25859: ST_TO_ADDR
// end ;
25860: GO 25756
25862: POP
25863: POP
// if isGameLoad then
25864: LD_VAR 0 1
25868: IFFALSE 26343
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25870: LD_ADDR_VAR 0 4
25874: PUSH
25875: LD_EXP 60
25879: PUSH
25880: LD_EXP 59
25884: PUSH
25885: LD_EXP 61
25889: PUSH
25890: LD_EXP 58
25894: PUSH
25895: LD_EXP 62
25899: PUSH
25900: LD_EXP 63
25904: PUSH
25905: LD_EXP 64
25909: PUSH
25910: LD_EXP 65
25914: PUSH
25915: LD_EXP 66
25919: PUSH
25920: LD_EXP 67
25924: PUSH
25925: LD_EXP 68
25929: PUSH
25930: LD_EXP 69
25934: PUSH
25935: LD_EXP 70
25939: PUSH
25940: LD_EXP 71
25944: PUSH
25945: LD_EXP 79
25949: PUSH
25950: LD_EXP 80
25954: PUSH
25955: LD_EXP 81
25959: PUSH
25960: LD_EXP 82
25964: PUSH
25965: LD_EXP 84
25969: PUSH
25970: LD_EXP 85
25974: PUSH
25975: LD_EXP 86
25979: PUSH
25980: LD_EXP 89
25984: PUSH
25985: LD_EXP 91
25989: PUSH
25990: LD_EXP 92
25994: PUSH
25995: LD_EXP 93
25999: PUSH
26000: LD_EXP 95
26004: PUSH
26005: LD_EXP 96
26009: PUSH
26010: LD_EXP 99
26014: PUSH
26015: LD_EXP 100
26019: PUSH
26020: LD_EXP 101
26024: PUSH
26025: LD_EXP 102
26029: PUSH
26030: LD_EXP 103
26034: PUSH
26035: LD_EXP 104
26039: PUSH
26040: LD_EXP 105
26044: PUSH
26045: LD_EXP 106
26049: PUSH
26050: LD_EXP 107
26054: PUSH
26055: LD_EXP 72
26059: PUSH
26060: LD_EXP 73
26064: PUSH
26065: LD_EXP 76
26069: PUSH
26070: LD_EXP 77
26074: PUSH
26075: LD_EXP 78
26079: PUSH
26080: LD_EXP 74
26084: PUSH
26085: LD_EXP 75
26089: PUSH
26090: LD_EXP 83
26094: PUSH
26095: LD_EXP 87
26099: PUSH
26100: LD_EXP 88
26104: PUSH
26105: LD_EXP 90
26109: PUSH
26110: LD_EXP 94
26114: PUSH
26115: LD_EXP 97
26119: PUSH
26120: LD_EXP 98
26124: PUSH
26125: LD_EXP 108
26129: PUSH
26130: LD_EXP 109
26134: PUSH
26135: LD_EXP 110
26139: PUSH
26140: LD_EXP 111
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: ST_TO_ADDR
// tmp :=  ;
26201: LD_ADDR_VAR 0 3
26205: PUSH
26206: LD_STRING 
26208: ST_TO_ADDR
// for i = 1 to normalCounter do
26209: LD_ADDR_VAR 0 8
26213: PUSH
26214: DOUBLE
26215: LD_INT 1
26217: DEC
26218: ST_TO_ADDR
26219: LD_EXP 56
26223: PUSH
26224: FOR_TO
26225: IFFALSE 26261
// begin if flags [ i ] then
26227: LD_VAR 0 4
26231: PUSH
26232: LD_VAR 0 8
26236: ARRAY
26237: IFFALSE 26259
// tmp := tmp & i & ; ;
26239: LD_ADDR_VAR 0 3
26243: PUSH
26244: LD_VAR 0 3
26248: PUSH
26249: LD_VAR 0 8
26253: STR
26254: PUSH
26255: LD_STRING ;
26257: STR
26258: ST_TO_ADDR
// end ;
26259: GO 26224
26261: POP
26262: POP
// for i = 1 to hardcoreCounter do
26263: LD_ADDR_VAR 0 8
26267: PUSH
26268: DOUBLE
26269: LD_INT 1
26271: DEC
26272: ST_TO_ADDR
26273: LD_EXP 57
26277: PUSH
26278: FOR_TO
26279: IFFALSE 26325
// begin if flags [ normalCounter + i ] then
26281: LD_VAR 0 4
26285: PUSH
26286: LD_EXP 56
26290: PUSH
26291: LD_VAR 0 8
26295: PLUS
26296: ARRAY
26297: IFFALSE 26323
// tmp := tmp & ( 100 + i ) & ; ;
26299: LD_ADDR_VAR 0 3
26303: PUSH
26304: LD_VAR 0 3
26308: PUSH
26309: LD_INT 100
26311: PUSH
26312: LD_VAR 0 8
26316: PLUS
26317: STR
26318: PUSH
26319: LD_STRING ;
26321: STR
26322: ST_TO_ADDR
// end ;
26323: GO 26278
26325: POP
26326: POP
// if tmp then
26327: LD_VAR 0 3
26331: IFFALSE 26343
// active := tmp ;
26333: LD_ADDR_VAR 0 7
26337: PUSH
26338: LD_VAR 0 3
26342: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26343: LD_STRING getStreamItemsFromMission("
26345: PUSH
26346: LD_VAR 0 5
26350: STR
26351: PUSH
26352: LD_STRING ","
26354: STR
26355: PUSH
26356: LD_VAR 0 6
26360: STR
26361: PUSH
26362: LD_STRING ","
26364: STR
26365: PUSH
26366: LD_VAR 0 7
26370: STR
26371: PUSH
26372: LD_STRING ")
26374: STR
26375: PPUSH
26376: CALL_OW 559
// end else
26380: GO 26389
// ToLua ( getStreamItemsFromMission("","","") ) ;
26382: LD_STRING getStreamItemsFromMission("","","")
26384: PPUSH
26385: CALL_OW 559
// end ;
26389: LD_VAR 0 2
26393: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26394: LD_EXP 55
26398: PUSH
26399: LD_EXP 60
26403: AND
26404: IFFALSE 26528
26406: GO 26408
26408: DISABLE
26409: LD_INT 0
26411: PPUSH
26412: PPUSH
// begin enable ;
26413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26414: LD_ADDR_VAR 0 2
26418: PUSH
26419: LD_INT 22
26421: PUSH
26422: LD_OWVAR 2
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 34
26436: PUSH
26437: LD_INT 7
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 34
26446: PUSH
26447: LD_INT 45
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 34
26456: PUSH
26457: LD_INT 28
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 34
26466: PUSH
26467: LD_INT 47
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PPUSH
26485: CALL_OW 69
26489: ST_TO_ADDR
// if not tmp then
26490: LD_VAR 0 2
26494: NOT
26495: IFFALSE 26499
// exit ;
26497: GO 26528
// for i in tmp do
26499: LD_ADDR_VAR 0 1
26503: PUSH
26504: LD_VAR 0 2
26508: PUSH
26509: FOR_IN
26510: IFFALSE 26526
// begin SetLives ( i , 0 ) ;
26512: LD_VAR 0 1
26516: PPUSH
26517: LD_INT 0
26519: PPUSH
26520: CALL_OW 234
// end ;
26524: GO 26509
26526: POP
26527: POP
// end ;
26528: PPOPN 2
26530: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26531: LD_EXP 55
26535: PUSH
26536: LD_EXP 61
26540: AND
26541: IFFALSE 26625
26543: GO 26545
26545: DISABLE
26546: LD_INT 0
26548: PPUSH
26549: PPUSH
// begin enable ;
26550: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26551: LD_ADDR_VAR 0 2
26555: PUSH
26556: LD_INT 22
26558: PUSH
26559: LD_OWVAR 2
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 32
26570: PUSH
26571: LD_INT 3
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PPUSH
26582: CALL_OW 69
26586: ST_TO_ADDR
// if not tmp then
26587: LD_VAR 0 2
26591: NOT
26592: IFFALSE 26596
// exit ;
26594: GO 26625
// for i in tmp do
26596: LD_ADDR_VAR 0 1
26600: PUSH
26601: LD_VAR 0 2
26605: PUSH
26606: FOR_IN
26607: IFFALSE 26623
// begin SetLives ( i , 0 ) ;
26609: LD_VAR 0 1
26613: PPUSH
26614: LD_INT 0
26616: PPUSH
26617: CALL_OW 234
// end ;
26621: GO 26606
26623: POP
26624: POP
// end ;
26625: PPOPN 2
26627: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26628: LD_EXP 55
26632: PUSH
26633: LD_EXP 58
26637: AND
26638: IFFALSE 26731
26640: GO 26642
26642: DISABLE
26643: LD_INT 0
26645: PPUSH
// begin enable ;
26646: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26647: LD_ADDR_VAR 0 1
26651: PUSH
26652: LD_INT 22
26654: PUSH
26655: LD_OWVAR 2
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 2
26666: PUSH
26667: LD_INT 25
26669: PUSH
26670: LD_INT 5
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 25
26679: PUSH
26680: LD_INT 9
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 25
26689: PUSH
26690: LD_INT 8
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PPUSH
26707: CALL_OW 69
26711: PUSH
26712: FOR_IN
26713: IFFALSE 26729
// begin SetClass ( i , 1 ) ;
26715: LD_VAR 0 1
26719: PPUSH
26720: LD_INT 1
26722: PPUSH
26723: CALL_OW 336
// end ;
26727: GO 26712
26729: POP
26730: POP
// end ;
26731: PPOPN 1
26733: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26734: LD_EXP 55
26738: PUSH
26739: LD_EXP 59
26743: AND
26744: PUSH
26745: LD_OWVAR 65
26749: PUSH
26750: LD_INT 7
26752: LESS
26753: AND
26754: IFFALSE 26768
26756: GO 26758
26758: DISABLE
// begin enable ;
26759: ENABLE
// game_speed := 7 ;
26760: LD_ADDR_OWVAR 65
26764: PUSH
26765: LD_INT 7
26767: ST_TO_ADDR
// end ;
26768: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26769: LD_EXP 55
26773: PUSH
26774: LD_EXP 62
26778: AND
26779: IFFALSE 26981
26781: GO 26783
26783: DISABLE
26784: LD_INT 0
26786: PPUSH
26787: PPUSH
26788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26789: LD_ADDR_VAR 0 3
26793: PUSH
26794: LD_INT 81
26796: PUSH
26797: LD_OWVAR 2
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 21
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PPUSH
26820: CALL_OW 69
26824: ST_TO_ADDR
// if not tmp then
26825: LD_VAR 0 3
26829: NOT
26830: IFFALSE 26834
// exit ;
26832: GO 26981
// if tmp > 5 then
26834: LD_VAR 0 3
26838: PUSH
26839: LD_INT 5
26841: GREATER
26842: IFFALSE 26854
// k := 5 else
26844: LD_ADDR_VAR 0 2
26848: PUSH
26849: LD_INT 5
26851: ST_TO_ADDR
26852: GO 26864
// k := tmp ;
26854: LD_ADDR_VAR 0 2
26858: PUSH
26859: LD_VAR 0 3
26863: ST_TO_ADDR
// for i := 1 to k do
26864: LD_ADDR_VAR 0 1
26868: PUSH
26869: DOUBLE
26870: LD_INT 1
26872: DEC
26873: ST_TO_ADDR
26874: LD_VAR 0 2
26878: PUSH
26879: FOR_TO
26880: IFFALSE 26979
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26882: LD_VAR 0 3
26886: PUSH
26887: LD_VAR 0 1
26891: ARRAY
26892: PPUSH
26893: LD_VAR 0 1
26897: PUSH
26898: LD_INT 4
26900: MOD
26901: PUSH
26902: LD_INT 1
26904: PLUS
26905: PPUSH
26906: CALL_OW 259
26910: PUSH
26911: LD_INT 10
26913: LESS
26914: IFFALSE 26977
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26916: LD_VAR 0 3
26920: PUSH
26921: LD_VAR 0 1
26925: ARRAY
26926: PPUSH
26927: LD_VAR 0 1
26931: PUSH
26932: LD_INT 4
26934: MOD
26935: PUSH
26936: LD_INT 1
26938: PLUS
26939: PPUSH
26940: LD_VAR 0 3
26944: PUSH
26945: LD_VAR 0 1
26949: ARRAY
26950: PPUSH
26951: LD_VAR 0 1
26955: PUSH
26956: LD_INT 4
26958: MOD
26959: PUSH
26960: LD_INT 1
26962: PLUS
26963: PPUSH
26964: CALL_OW 259
26968: PUSH
26969: LD_INT 1
26971: PLUS
26972: PPUSH
26973: CALL_OW 237
26977: GO 26879
26979: POP
26980: POP
// end ;
26981: PPOPN 3
26983: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26984: LD_EXP 55
26988: PUSH
26989: LD_EXP 63
26993: AND
26994: IFFALSE 27014
26996: GO 26998
26998: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26999: LD_INT 4
27001: PPUSH
27002: LD_OWVAR 2
27006: PPUSH
27007: LD_INT 0
27009: PPUSH
27010: CALL_OW 324
27014: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27015: LD_EXP 55
27019: PUSH
27020: LD_EXP 92
27024: AND
27025: IFFALSE 27045
27027: GO 27029
27029: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27030: LD_INT 19
27032: PPUSH
27033: LD_OWVAR 2
27037: PPUSH
27038: LD_INT 0
27040: PPUSH
27041: CALL_OW 324
27045: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27046: LD_EXP 55
27050: PUSH
27051: LD_EXP 64
27055: AND
27056: IFFALSE 27158
27058: GO 27060
27060: DISABLE
27061: LD_INT 0
27063: PPUSH
27064: PPUSH
// begin enable ;
27065: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27066: LD_ADDR_VAR 0 2
27070: PUSH
27071: LD_INT 22
27073: PUSH
27074: LD_OWVAR 2
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 2
27085: PUSH
27086: LD_INT 34
27088: PUSH
27089: LD_INT 11
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 34
27098: PUSH
27099: LD_INT 30
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: LIST
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PPUSH
27115: CALL_OW 69
27119: ST_TO_ADDR
// if not tmp then
27120: LD_VAR 0 2
27124: NOT
27125: IFFALSE 27129
// exit ;
27127: GO 27158
// for i in tmp do
27129: LD_ADDR_VAR 0 1
27133: PUSH
27134: LD_VAR 0 2
27138: PUSH
27139: FOR_IN
27140: IFFALSE 27156
// begin SetLives ( i , 0 ) ;
27142: LD_VAR 0 1
27146: PPUSH
27147: LD_INT 0
27149: PPUSH
27150: CALL_OW 234
// end ;
27154: GO 27139
27156: POP
27157: POP
// end ;
27158: PPOPN 2
27160: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27161: LD_EXP 55
27165: PUSH
27166: LD_EXP 65
27170: AND
27171: IFFALSE 27191
27173: GO 27175
27175: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27176: LD_INT 32
27178: PPUSH
27179: LD_OWVAR 2
27183: PPUSH
27184: LD_INT 0
27186: PPUSH
27187: CALL_OW 324
27191: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27192: LD_EXP 55
27196: PUSH
27197: LD_EXP 66
27201: AND
27202: IFFALSE 27383
27204: GO 27206
27206: DISABLE
27207: LD_INT 0
27209: PPUSH
27210: PPUSH
27211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27212: LD_ADDR_VAR 0 2
27216: PUSH
27217: LD_INT 22
27219: PUSH
27220: LD_OWVAR 2
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 33
27231: PUSH
27232: LD_INT 3
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PPUSH
27243: CALL_OW 69
27247: ST_TO_ADDR
// if not tmp then
27248: LD_VAR 0 2
27252: NOT
27253: IFFALSE 27257
// exit ;
27255: GO 27383
// side := 0 ;
27257: LD_ADDR_VAR 0 3
27261: PUSH
27262: LD_INT 0
27264: ST_TO_ADDR
// for i := 1 to 8 do
27265: LD_ADDR_VAR 0 1
27269: PUSH
27270: DOUBLE
27271: LD_INT 1
27273: DEC
27274: ST_TO_ADDR
27275: LD_INT 8
27277: PUSH
27278: FOR_TO
27279: IFFALSE 27327
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27281: LD_OWVAR 2
27285: PUSH
27286: LD_VAR 0 1
27290: NONEQUAL
27291: PUSH
27292: LD_OWVAR 2
27296: PPUSH
27297: LD_VAR 0 1
27301: PPUSH
27302: CALL_OW 81
27306: PUSH
27307: LD_INT 2
27309: EQUAL
27310: AND
27311: IFFALSE 27325
// begin side := i ;
27313: LD_ADDR_VAR 0 3
27317: PUSH
27318: LD_VAR 0 1
27322: ST_TO_ADDR
// break ;
27323: GO 27327
// end ;
27325: GO 27278
27327: POP
27328: POP
// if not side then
27329: LD_VAR 0 3
27333: NOT
27334: IFFALSE 27338
// exit ;
27336: GO 27383
// for i := 1 to tmp do
27338: LD_ADDR_VAR 0 1
27342: PUSH
27343: DOUBLE
27344: LD_INT 1
27346: DEC
27347: ST_TO_ADDR
27348: LD_VAR 0 2
27352: PUSH
27353: FOR_TO
27354: IFFALSE 27381
// if Prob ( 60 ) then
27356: LD_INT 60
27358: PPUSH
27359: CALL_OW 13
27363: IFFALSE 27379
// SetSide ( i , side ) ;
27365: LD_VAR 0 1
27369: PPUSH
27370: LD_VAR 0 3
27374: PPUSH
27375: CALL_OW 235
27379: GO 27353
27381: POP
27382: POP
// end ;
27383: PPOPN 3
27385: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27386: LD_EXP 55
27390: PUSH
27391: LD_EXP 68
27395: AND
27396: IFFALSE 27515
27398: GO 27400
27400: DISABLE
27401: LD_INT 0
27403: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27404: LD_ADDR_VAR 0 1
27408: PUSH
27409: LD_INT 22
27411: PUSH
27412: LD_OWVAR 2
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 21
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 3
27433: PUSH
27434: LD_INT 23
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: PPUSH
27453: CALL_OW 69
27457: PUSH
27458: FOR_IN
27459: IFFALSE 27513
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27461: LD_VAR 0 1
27465: PPUSH
27466: CALL_OW 257
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: LD_INT 2
27476: PUSH
27477: LD_INT 3
27479: PUSH
27480: LD_INT 4
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: IN
27489: IFFALSE 27511
// SetClass ( un , rand ( 1 , 4 ) ) ;
27491: LD_VAR 0 1
27495: PPUSH
27496: LD_INT 1
27498: PPUSH
27499: LD_INT 4
27501: PPUSH
27502: CALL_OW 12
27506: PPUSH
27507: CALL_OW 336
27511: GO 27458
27513: POP
27514: POP
// end ;
27515: PPOPN 1
27517: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27518: LD_EXP 55
27522: PUSH
27523: LD_EXP 67
27527: AND
27528: IFFALSE 27607
27530: GO 27532
27532: DISABLE
27533: LD_INT 0
27535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27536: LD_ADDR_VAR 0 1
27540: PUSH
27541: LD_INT 22
27543: PUSH
27544: LD_OWVAR 2
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 21
27555: PUSH
27556: LD_INT 3
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PPUSH
27567: CALL_OW 69
27571: ST_TO_ADDR
// if not tmp then
27572: LD_VAR 0 1
27576: NOT
27577: IFFALSE 27581
// exit ;
27579: GO 27607
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27581: LD_VAR 0 1
27585: PUSH
27586: LD_INT 1
27588: PPUSH
27589: LD_VAR 0 1
27593: PPUSH
27594: CALL_OW 12
27598: ARRAY
27599: PPUSH
27600: LD_INT 100
27602: PPUSH
27603: CALL_OW 234
// end ;
27607: PPOPN 1
27609: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27610: LD_EXP 55
27614: PUSH
27615: LD_EXP 69
27619: AND
27620: IFFALSE 27718
27622: GO 27624
27624: DISABLE
27625: LD_INT 0
27627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27628: LD_ADDR_VAR 0 1
27632: PUSH
27633: LD_INT 22
27635: PUSH
27636: LD_OWVAR 2
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 21
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PPUSH
27659: CALL_OW 69
27663: ST_TO_ADDR
// if not tmp then
27664: LD_VAR 0 1
27668: NOT
27669: IFFALSE 27673
// exit ;
27671: GO 27718
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27673: LD_VAR 0 1
27677: PUSH
27678: LD_INT 1
27680: PPUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: CALL_OW 12
27690: ARRAY
27691: PPUSH
27692: LD_INT 1
27694: PPUSH
27695: LD_INT 4
27697: PPUSH
27698: CALL_OW 12
27702: PPUSH
27703: LD_INT 3000
27705: PPUSH
27706: LD_INT 9000
27708: PPUSH
27709: CALL_OW 12
27713: PPUSH
27714: CALL_OW 492
// end ;
27718: PPOPN 1
27720: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27721: LD_EXP 55
27725: PUSH
27726: LD_EXP 70
27730: AND
27731: IFFALSE 27751
27733: GO 27735
27735: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27736: LD_INT 1
27738: PPUSH
27739: LD_OWVAR 2
27743: PPUSH
27744: LD_INT 0
27746: PPUSH
27747: CALL_OW 324
27751: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27752: LD_EXP 55
27756: PUSH
27757: LD_EXP 71
27761: AND
27762: IFFALSE 27845
27764: GO 27766
27766: DISABLE
27767: LD_INT 0
27769: PPUSH
27770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27771: LD_ADDR_VAR 0 2
27775: PUSH
27776: LD_INT 22
27778: PUSH
27779: LD_OWVAR 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 21
27790: PUSH
27791: LD_INT 3
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PPUSH
27802: CALL_OW 69
27806: ST_TO_ADDR
// if not tmp then
27807: LD_VAR 0 2
27811: NOT
27812: IFFALSE 27816
// exit ;
27814: GO 27845
// for i in tmp do
27816: LD_ADDR_VAR 0 1
27820: PUSH
27821: LD_VAR 0 2
27825: PUSH
27826: FOR_IN
27827: IFFALSE 27843
// SetBLevel ( i , 10 ) ;
27829: LD_VAR 0 1
27833: PPUSH
27834: LD_INT 10
27836: PPUSH
27837: CALL_OW 241
27841: GO 27826
27843: POP
27844: POP
// end ;
27845: PPOPN 2
27847: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27848: LD_EXP 55
27852: PUSH
27853: LD_EXP 72
27857: AND
27858: IFFALSE 27969
27860: GO 27862
27862: DISABLE
27863: LD_INT 0
27865: PPUSH
27866: PPUSH
27867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27868: LD_ADDR_VAR 0 3
27872: PUSH
27873: LD_INT 22
27875: PUSH
27876: LD_OWVAR 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 25
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PPUSH
27899: CALL_OW 69
27903: ST_TO_ADDR
// if not tmp then
27904: LD_VAR 0 3
27908: NOT
27909: IFFALSE 27913
// exit ;
27911: GO 27969
// un := tmp [ rand ( 1 , tmp ) ] ;
27913: LD_ADDR_VAR 0 2
27917: PUSH
27918: LD_VAR 0 3
27922: PUSH
27923: LD_INT 1
27925: PPUSH
27926: LD_VAR 0 3
27930: PPUSH
27931: CALL_OW 12
27935: ARRAY
27936: ST_TO_ADDR
// if Crawls ( un ) then
27937: LD_VAR 0 2
27941: PPUSH
27942: CALL_OW 318
27946: IFFALSE 27957
// ComWalk ( un ) ;
27948: LD_VAR 0 2
27952: PPUSH
27953: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27957: LD_VAR 0 2
27961: PPUSH
27962: LD_INT 5
27964: PPUSH
27965: CALL_OW 336
// end ;
27969: PPOPN 3
27971: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27972: LD_EXP 55
27976: PUSH
27977: LD_EXP 73
27981: AND
27982: PUSH
27983: LD_OWVAR 67
27987: PUSH
27988: LD_INT 4
27990: LESS
27991: AND
27992: IFFALSE 28011
27994: GO 27996
27996: DISABLE
// begin Difficulty := Difficulty + 1 ;
27997: LD_ADDR_OWVAR 67
28001: PUSH
28002: LD_OWVAR 67
28006: PUSH
28007: LD_INT 1
28009: PLUS
28010: ST_TO_ADDR
// end ;
28011: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28012: LD_EXP 55
28016: PUSH
28017: LD_EXP 74
28021: AND
28022: IFFALSE 28125
28024: GO 28026
28026: DISABLE
28027: LD_INT 0
28029: PPUSH
// begin for i := 1 to 5 do
28030: LD_ADDR_VAR 0 1
28034: PUSH
28035: DOUBLE
28036: LD_INT 1
28038: DEC
28039: ST_TO_ADDR
28040: LD_INT 5
28042: PUSH
28043: FOR_TO
28044: IFFALSE 28123
// begin uc_nation := nation_nature ;
28046: LD_ADDR_OWVAR 21
28050: PUSH
28051: LD_INT 0
28053: ST_TO_ADDR
// uc_side := 0 ;
28054: LD_ADDR_OWVAR 20
28058: PUSH
28059: LD_INT 0
28061: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28062: LD_ADDR_OWVAR 29
28066: PUSH
28067: LD_INT 12
28069: PUSH
28070: LD_INT 12
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: ST_TO_ADDR
// hc_agressivity := 20 ;
28077: LD_ADDR_OWVAR 35
28081: PUSH
28082: LD_INT 20
28084: ST_TO_ADDR
// hc_class := class_tiger ;
28085: LD_ADDR_OWVAR 28
28089: PUSH
28090: LD_INT 14
28092: ST_TO_ADDR
// hc_gallery :=  ;
28093: LD_ADDR_OWVAR 33
28097: PUSH
28098: LD_STRING 
28100: ST_TO_ADDR
// hc_name :=  ;
28101: LD_ADDR_OWVAR 26
28105: PUSH
28106: LD_STRING 
28108: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28109: CALL_OW 44
28113: PPUSH
28114: LD_INT 0
28116: PPUSH
28117: CALL_OW 51
// end ;
28121: GO 28043
28123: POP
28124: POP
// end ;
28125: PPOPN 1
28127: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28128: LD_EXP 55
28132: PUSH
28133: LD_EXP 75
28137: AND
28138: IFFALSE 28147
28140: GO 28142
28142: DISABLE
// StreamSibBomb ;
28143: CALL 28148 0 0
28147: END
// export function StreamSibBomb ; var i , x , y ; begin
28148: LD_INT 0
28150: PPUSH
28151: PPUSH
28152: PPUSH
28153: PPUSH
// result := false ;
28154: LD_ADDR_VAR 0 1
28158: PUSH
28159: LD_INT 0
28161: ST_TO_ADDR
// for i := 1 to 16 do
28162: LD_ADDR_VAR 0 2
28166: PUSH
28167: DOUBLE
28168: LD_INT 1
28170: DEC
28171: ST_TO_ADDR
28172: LD_INT 16
28174: PUSH
28175: FOR_TO
28176: IFFALSE 28375
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28178: LD_ADDR_VAR 0 3
28182: PUSH
28183: LD_INT 10
28185: PUSH
28186: LD_INT 20
28188: PUSH
28189: LD_INT 30
28191: PUSH
28192: LD_INT 40
28194: PUSH
28195: LD_INT 50
28197: PUSH
28198: LD_INT 60
28200: PUSH
28201: LD_INT 70
28203: PUSH
28204: LD_INT 80
28206: PUSH
28207: LD_INT 90
28209: PUSH
28210: LD_INT 100
28212: PUSH
28213: LD_INT 110
28215: PUSH
28216: LD_INT 120
28218: PUSH
28219: LD_INT 130
28221: PUSH
28222: LD_INT 140
28224: PUSH
28225: LD_INT 150
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: PPUSH
28248: LD_INT 15
28250: PPUSH
28251: CALL_OW 12
28255: ARRAY
28256: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28257: LD_ADDR_VAR 0 4
28261: PUSH
28262: LD_INT 10
28264: PUSH
28265: LD_INT 20
28267: PUSH
28268: LD_INT 30
28270: PUSH
28271: LD_INT 40
28273: PUSH
28274: LD_INT 50
28276: PUSH
28277: LD_INT 60
28279: PUSH
28280: LD_INT 70
28282: PUSH
28283: LD_INT 80
28285: PUSH
28286: LD_INT 90
28288: PUSH
28289: LD_INT 100
28291: PUSH
28292: LD_INT 110
28294: PUSH
28295: LD_INT 120
28297: PUSH
28298: LD_INT 130
28300: PUSH
28301: LD_INT 140
28303: PUSH
28304: LD_INT 150
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: PPUSH
28327: LD_INT 15
28329: PPUSH
28330: CALL_OW 12
28334: ARRAY
28335: ST_TO_ADDR
// if ValidHex ( x , y ) then
28336: LD_VAR 0 3
28340: PPUSH
28341: LD_VAR 0 4
28345: PPUSH
28346: CALL_OW 488
28350: IFFALSE 28373
// begin result := [ x , y ] ;
28352: LD_ADDR_VAR 0 1
28356: PUSH
28357: LD_VAR 0 3
28361: PUSH
28362: LD_VAR 0 4
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: ST_TO_ADDR
// break ;
28371: GO 28375
// end ; end ;
28373: GO 28175
28375: POP
28376: POP
// if result then
28377: LD_VAR 0 1
28381: IFFALSE 28441
// begin ToLua ( playSibBomb() ) ;
28383: LD_STRING playSibBomb()
28385: PPUSH
28386: CALL_OW 559
// wait ( 0 0$14 ) ;
28390: LD_INT 490
28392: PPUSH
28393: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 1
28404: ARRAY
28405: PPUSH
28406: LD_VAR 0 1
28410: PUSH
28411: LD_INT 2
28413: ARRAY
28414: PPUSH
28415: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28419: LD_VAR 0 1
28423: PUSH
28424: LD_INT 1
28426: ARRAY
28427: PPUSH
28428: LD_VAR 0 1
28432: PUSH
28433: LD_INT 2
28435: ARRAY
28436: PPUSH
28437: CALL_OW 429
// end ; end ;
28441: LD_VAR 0 1
28445: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28446: LD_EXP 55
28450: PUSH
28451: LD_EXP 77
28455: AND
28456: IFFALSE 28468
28458: GO 28460
28460: DISABLE
// YouLost (  ) ;
28461: LD_STRING 
28463: PPUSH
28464: CALL_OW 104
28468: END
// every 0 0$1 trigger StreamModeActive and sFog do
28469: LD_EXP 55
28473: PUSH
28474: LD_EXP 76
28478: AND
28479: IFFALSE 28493
28481: GO 28483
28483: DISABLE
// FogOff ( your_side ) ;
28484: LD_OWVAR 2
28488: PPUSH
28489: CALL_OW 344
28493: END
// every 0 0$1 trigger StreamModeActive and sSun do
28494: LD_EXP 55
28498: PUSH
28499: LD_EXP 78
28503: AND
28504: IFFALSE 28532
28506: GO 28508
28508: DISABLE
// begin solar_recharge_percent := 0 ;
28509: LD_ADDR_OWVAR 79
28513: PUSH
28514: LD_INT 0
28516: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28517: LD_INT 10500
28519: PPUSH
28520: CALL_OW 67
// solar_recharge_percent := 100 ;
28524: LD_ADDR_OWVAR 79
28528: PUSH
28529: LD_INT 100
28531: ST_TO_ADDR
// end ;
28532: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28533: LD_EXP 55
28537: PUSH
28538: LD_EXP 79
28542: AND
28543: IFFALSE 28782
28545: GO 28547
28547: DISABLE
28548: LD_INT 0
28550: PPUSH
28551: PPUSH
28552: PPUSH
// begin tmp := [ ] ;
28553: LD_ADDR_VAR 0 3
28557: PUSH
28558: EMPTY
28559: ST_TO_ADDR
// for i := 1 to 6 do
28560: LD_ADDR_VAR 0 1
28564: PUSH
28565: DOUBLE
28566: LD_INT 1
28568: DEC
28569: ST_TO_ADDR
28570: LD_INT 6
28572: PUSH
28573: FOR_TO
28574: IFFALSE 28679
// begin uc_nation := nation_nature ;
28576: LD_ADDR_OWVAR 21
28580: PUSH
28581: LD_INT 0
28583: ST_TO_ADDR
// uc_side := 0 ;
28584: LD_ADDR_OWVAR 20
28588: PUSH
28589: LD_INT 0
28591: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28592: LD_ADDR_OWVAR 29
28596: PUSH
28597: LD_INT 12
28599: PUSH
28600: LD_INT 12
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: ST_TO_ADDR
// hc_agressivity := 20 ;
28607: LD_ADDR_OWVAR 35
28611: PUSH
28612: LD_INT 20
28614: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28615: LD_ADDR_OWVAR 28
28619: PUSH
28620: LD_INT 17
28622: ST_TO_ADDR
// hc_gallery :=  ;
28623: LD_ADDR_OWVAR 33
28627: PUSH
28628: LD_STRING 
28630: ST_TO_ADDR
// hc_name :=  ;
28631: LD_ADDR_OWVAR 26
28635: PUSH
28636: LD_STRING 
28638: ST_TO_ADDR
// un := CreateHuman ;
28639: LD_ADDR_VAR 0 2
28643: PUSH
28644: CALL_OW 44
28648: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28649: LD_VAR 0 2
28653: PPUSH
28654: LD_INT 1
28656: PPUSH
28657: CALL_OW 51
// tmp := tmp ^ un ;
28661: LD_ADDR_VAR 0 3
28665: PUSH
28666: LD_VAR 0 3
28670: PUSH
28671: LD_VAR 0 2
28675: ADD
28676: ST_TO_ADDR
// end ;
28677: GO 28573
28679: POP
28680: POP
// repeat wait ( 0 0$1 ) ;
28681: LD_INT 35
28683: PPUSH
28684: CALL_OW 67
// for un in tmp do
28688: LD_ADDR_VAR 0 2
28692: PUSH
28693: LD_VAR 0 3
28697: PUSH
28698: FOR_IN
28699: IFFALSE 28773
// begin if IsDead ( un ) then
28701: LD_VAR 0 2
28705: PPUSH
28706: CALL_OW 301
28710: IFFALSE 28730
// begin tmp := tmp diff un ;
28712: LD_ADDR_VAR 0 3
28716: PUSH
28717: LD_VAR 0 3
28721: PUSH
28722: LD_VAR 0 2
28726: DIFF
28727: ST_TO_ADDR
// continue ;
28728: GO 28698
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28730: LD_VAR 0 2
28734: PPUSH
28735: LD_INT 3
28737: PUSH
28738: LD_INT 22
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PPUSH
28752: CALL_OW 69
28756: PPUSH
28757: LD_VAR 0 2
28761: PPUSH
28762: CALL_OW 74
28766: PPUSH
28767: CALL_OW 115
// end ;
28771: GO 28698
28773: POP
28774: POP
// until not tmp ;
28775: LD_VAR 0 3
28779: NOT
28780: IFFALSE 28681
// end ;
28782: PPOPN 3
28784: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28785: LD_EXP 55
28789: PUSH
28790: LD_EXP 80
28794: AND
28795: IFFALSE 28849
28797: GO 28799
28799: DISABLE
// begin ToLua ( displayTroll(); ) ;
28800: LD_STRING displayTroll();
28802: PPUSH
28803: CALL_OW 559
// wait ( 3 3$00 ) ;
28807: LD_INT 6300
28809: PPUSH
28810: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28814: LD_STRING hideTroll();
28816: PPUSH
28817: CALL_OW 559
// wait ( 1 1$00 ) ;
28821: LD_INT 2100
28823: PPUSH
28824: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28828: LD_STRING displayTroll();
28830: PPUSH
28831: CALL_OW 559
// wait ( 1 1$00 ) ;
28835: LD_INT 2100
28837: PPUSH
28838: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28842: LD_STRING hideTroll();
28844: PPUSH
28845: CALL_OW 559
// end ;
28849: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28850: LD_EXP 55
28854: PUSH
28855: LD_EXP 81
28859: AND
28860: IFFALSE 28923
28862: GO 28864
28864: DISABLE
28865: LD_INT 0
28867: PPUSH
// begin p := 0 ;
28868: LD_ADDR_VAR 0 1
28872: PUSH
28873: LD_INT 0
28875: ST_TO_ADDR
// repeat game_speed := 1 ;
28876: LD_ADDR_OWVAR 65
28880: PUSH
28881: LD_INT 1
28883: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28884: LD_INT 35
28886: PPUSH
28887: CALL_OW 67
// p := p + 1 ;
28891: LD_ADDR_VAR 0 1
28895: PUSH
28896: LD_VAR 0 1
28900: PUSH
28901: LD_INT 1
28903: PLUS
28904: ST_TO_ADDR
// until p >= 60 ;
28905: LD_VAR 0 1
28909: PUSH
28910: LD_INT 60
28912: GREATEREQUAL
28913: IFFALSE 28876
// game_speed := 4 ;
28915: LD_ADDR_OWVAR 65
28919: PUSH
28920: LD_INT 4
28922: ST_TO_ADDR
// end ;
28923: PPOPN 1
28925: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28926: LD_EXP 55
28930: PUSH
28931: LD_EXP 82
28935: AND
28936: IFFALSE 29082
28938: GO 28940
28940: DISABLE
28941: LD_INT 0
28943: PPUSH
28944: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28945: LD_ADDR_VAR 0 1
28949: PUSH
28950: LD_INT 22
28952: PUSH
28953: LD_OWVAR 2
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: LD_INT 30
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 30
28977: PUSH
28978: LD_INT 1
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 69
28998: ST_TO_ADDR
// if not depot then
28999: LD_VAR 0 1
29003: NOT
29004: IFFALSE 29008
// exit ;
29006: GO 29082
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29008: LD_ADDR_VAR 0 2
29012: PUSH
29013: LD_VAR 0 1
29017: PUSH
29018: LD_INT 1
29020: PPUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 12
29030: ARRAY
29031: PPUSH
29032: CALL_OW 274
29036: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29037: LD_VAR 0 2
29041: PPUSH
29042: LD_INT 1
29044: PPUSH
29045: LD_INT 0
29047: PPUSH
29048: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29052: LD_VAR 0 2
29056: PPUSH
29057: LD_INT 2
29059: PPUSH
29060: LD_INT 0
29062: PPUSH
29063: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29067: LD_VAR 0 2
29071: PPUSH
29072: LD_INT 3
29074: PPUSH
29075: LD_INT 0
29077: PPUSH
29078: CALL_OW 277
// end ;
29082: PPOPN 2
29084: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29085: LD_EXP 55
29089: PUSH
29090: LD_EXP 83
29094: AND
29095: IFFALSE 29192
29097: GO 29099
29099: DISABLE
29100: LD_INT 0
29102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29103: LD_ADDR_VAR 0 1
29107: PUSH
29108: LD_INT 22
29110: PUSH
29111: LD_OWVAR 2
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 21
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 3
29132: PUSH
29133: LD_INT 23
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: PPUSH
29152: CALL_OW 69
29156: ST_TO_ADDR
// if not tmp then
29157: LD_VAR 0 1
29161: NOT
29162: IFFALSE 29166
// exit ;
29164: GO 29192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29166: LD_VAR 0 1
29170: PUSH
29171: LD_INT 1
29173: PPUSH
29174: LD_VAR 0 1
29178: PPUSH
29179: CALL_OW 12
29183: ARRAY
29184: PPUSH
29185: LD_INT 200
29187: PPUSH
29188: CALL_OW 234
// end ;
29192: PPOPN 1
29194: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29195: LD_EXP 55
29199: PUSH
29200: LD_EXP 84
29204: AND
29205: IFFALSE 29284
29207: GO 29209
29209: DISABLE
29210: LD_INT 0
29212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29213: LD_ADDR_VAR 0 1
29217: PUSH
29218: LD_INT 22
29220: PUSH
29221: LD_OWVAR 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 21
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 69
29248: ST_TO_ADDR
// if not tmp then
29249: LD_VAR 0 1
29253: NOT
29254: IFFALSE 29258
// exit ;
29256: GO 29284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29258: LD_VAR 0 1
29262: PUSH
29263: LD_INT 1
29265: PPUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: CALL_OW 12
29275: ARRAY
29276: PPUSH
29277: LD_INT 60
29279: PPUSH
29280: CALL_OW 234
// end ;
29284: PPOPN 1
29286: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29287: LD_EXP 55
29291: PUSH
29292: LD_EXP 85
29296: AND
29297: IFFALSE 29396
29299: GO 29301
29301: DISABLE
29302: LD_INT 0
29304: PPUSH
29305: PPUSH
// begin enable ;
29306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29307: LD_ADDR_VAR 0 1
29311: PUSH
29312: LD_INT 22
29314: PUSH
29315: LD_OWVAR 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 61
29326: PUSH
29327: EMPTY
29328: LIST
29329: PUSH
29330: LD_INT 33
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: PPUSH
29345: CALL_OW 69
29349: ST_TO_ADDR
// if not tmp then
29350: LD_VAR 0 1
29354: NOT
29355: IFFALSE 29359
// exit ;
29357: GO 29396
// for i in tmp do
29359: LD_ADDR_VAR 0 2
29363: PUSH
29364: LD_VAR 0 1
29368: PUSH
29369: FOR_IN
29370: IFFALSE 29394
// if IsControledBy ( i ) then
29372: LD_VAR 0 2
29376: PPUSH
29377: CALL_OW 312
29381: IFFALSE 29392
// ComUnlink ( i ) ;
29383: LD_VAR 0 2
29387: PPUSH
29388: CALL_OW 136
29392: GO 29369
29394: POP
29395: POP
// end ;
29396: PPOPN 2
29398: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29399: LD_EXP 55
29403: PUSH
29404: LD_EXP 86
29408: AND
29409: IFFALSE 29549
29411: GO 29413
29413: DISABLE
29414: LD_INT 0
29416: PPUSH
29417: PPUSH
// begin ToLua ( displayPowell(); ) ;
29418: LD_STRING displayPowell();
29420: PPUSH
29421: CALL_OW 559
// uc_side := 0 ;
29425: LD_ADDR_OWVAR 20
29429: PUSH
29430: LD_INT 0
29432: ST_TO_ADDR
// uc_nation := 2 ;
29433: LD_ADDR_OWVAR 21
29437: PUSH
29438: LD_INT 2
29440: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29441: LD_ADDR_OWVAR 37
29445: PUSH
29446: LD_INT 14
29448: ST_TO_ADDR
// vc_engine := engine_siberite ;
29449: LD_ADDR_OWVAR 39
29453: PUSH
29454: LD_INT 3
29456: ST_TO_ADDR
// vc_control := control_apeman ;
29457: LD_ADDR_OWVAR 38
29461: PUSH
29462: LD_INT 5
29464: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29465: LD_ADDR_OWVAR 40
29469: PUSH
29470: LD_INT 29
29472: ST_TO_ADDR
// un := CreateVehicle ;
29473: LD_ADDR_VAR 0 2
29477: PUSH
29478: CALL_OW 45
29482: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29483: LD_VAR 0 2
29487: PPUSH
29488: LD_INT 1
29490: PPUSH
29491: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29495: LD_INT 35
29497: PPUSH
29498: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29502: LD_VAR 0 2
29506: PPUSH
29507: LD_INT 22
29509: PUSH
29510: LD_OWVAR 2
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PPUSH
29519: CALL_OW 69
29523: PPUSH
29524: LD_VAR 0 2
29528: PPUSH
29529: CALL_OW 74
29533: PPUSH
29534: CALL_OW 115
// until IsDead ( un ) ;
29538: LD_VAR 0 2
29542: PPUSH
29543: CALL_OW 301
29547: IFFALSE 29495
// end ;
29549: PPOPN 2
29551: END
// every 0 0$1 trigger StreamModeActive and sStu do
29552: LD_EXP 55
29556: PUSH
29557: LD_EXP 94
29561: AND
29562: IFFALSE 29578
29564: GO 29566
29566: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29567: LD_STRING displayStucuk();
29569: PPUSH
29570: CALL_OW 559
// ResetFog ;
29574: CALL_OW 335
// end ;
29578: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29579: LD_EXP 55
29583: PUSH
29584: LD_EXP 87
29588: AND
29589: IFFALSE 29730
29591: GO 29593
29593: DISABLE
29594: LD_INT 0
29596: PPUSH
29597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29598: LD_ADDR_VAR 0 2
29602: PUSH
29603: LD_INT 22
29605: PUSH
29606: LD_OWVAR 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 21
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PPUSH
29629: CALL_OW 69
29633: ST_TO_ADDR
// if not tmp then
29634: LD_VAR 0 2
29638: NOT
29639: IFFALSE 29643
// exit ;
29641: GO 29730
// un := tmp [ rand ( 1 , tmp ) ] ;
29643: LD_ADDR_VAR 0 1
29647: PUSH
29648: LD_VAR 0 2
29652: PUSH
29653: LD_INT 1
29655: PPUSH
29656: LD_VAR 0 2
29660: PPUSH
29661: CALL_OW 12
29665: ARRAY
29666: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29667: LD_VAR 0 1
29671: PPUSH
29672: LD_INT 0
29674: PPUSH
29675: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29679: LD_VAR 0 1
29683: PPUSH
29684: LD_OWVAR 3
29688: PUSH
29689: LD_VAR 0 1
29693: DIFF
29694: PPUSH
29695: LD_VAR 0 1
29699: PPUSH
29700: CALL_OW 74
29704: PPUSH
29705: CALL_OW 115
// wait ( 0 0$20 ) ;
29709: LD_INT 700
29711: PPUSH
29712: CALL_OW 67
// SetSide ( un , your_side ) ;
29716: LD_VAR 0 1
29720: PPUSH
29721: LD_OWVAR 2
29725: PPUSH
29726: CALL_OW 235
// end ;
29730: PPOPN 2
29732: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29733: LD_EXP 55
29737: PUSH
29738: LD_EXP 88
29742: AND
29743: IFFALSE 29849
29745: GO 29747
29747: DISABLE
29748: LD_INT 0
29750: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29751: LD_ADDR_VAR 0 1
29755: PUSH
29756: LD_INT 22
29758: PUSH
29759: LD_OWVAR 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 2
29770: PUSH
29771: LD_INT 30
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 30
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PPUSH
29800: CALL_OW 69
29804: ST_TO_ADDR
// if not depot then
29805: LD_VAR 0 1
29809: NOT
29810: IFFALSE 29814
// exit ;
29812: GO 29849
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29814: LD_VAR 0 1
29818: PUSH
29819: LD_INT 1
29821: ARRAY
29822: PPUSH
29823: CALL_OW 250
29827: PPUSH
29828: LD_VAR 0 1
29832: PUSH
29833: LD_INT 1
29835: ARRAY
29836: PPUSH
29837: CALL_OW 251
29841: PPUSH
29842: LD_INT 70
29844: PPUSH
29845: CALL_OW 495
// end ;
29849: PPOPN 1
29851: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29852: LD_EXP 55
29856: PUSH
29857: LD_EXP 89
29861: AND
29862: IFFALSE 30073
29864: GO 29866
29866: DISABLE
29867: LD_INT 0
29869: PPUSH
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29874: LD_ADDR_VAR 0 5
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_OWVAR 2
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 21
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PPUSH
29905: CALL_OW 69
29909: ST_TO_ADDR
// if not tmp then
29910: LD_VAR 0 5
29914: NOT
29915: IFFALSE 29919
// exit ;
29917: GO 30073
// for i in tmp do
29919: LD_ADDR_VAR 0 1
29923: PUSH
29924: LD_VAR 0 5
29928: PUSH
29929: FOR_IN
29930: IFFALSE 30071
// begin d := rand ( 0 , 5 ) ;
29932: LD_ADDR_VAR 0 4
29936: PUSH
29937: LD_INT 0
29939: PPUSH
29940: LD_INT 5
29942: PPUSH
29943: CALL_OW 12
29947: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29948: LD_ADDR_VAR 0 2
29952: PUSH
29953: LD_VAR 0 1
29957: PPUSH
29958: CALL_OW 250
29962: PPUSH
29963: LD_VAR 0 4
29967: PPUSH
29968: LD_INT 3
29970: PPUSH
29971: LD_INT 12
29973: PPUSH
29974: CALL_OW 12
29978: PPUSH
29979: CALL_OW 272
29983: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29984: LD_ADDR_VAR 0 3
29988: PUSH
29989: LD_VAR 0 1
29993: PPUSH
29994: CALL_OW 251
29998: PPUSH
29999: LD_VAR 0 4
30003: PPUSH
30004: LD_INT 3
30006: PPUSH
30007: LD_INT 12
30009: PPUSH
30010: CALL_OW 12
30014: PPUSH
30015: CALL_OW 273
30019: ST_TO_ADDR
// if ValidHex ( x , y ) then
30020: LD_VAR 0 2
30024: PPUSH
30025: LD_VAR 0 3
30029: PPUSH
30030: CALL_OW 488
30034: IFFALSE 30069
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30036: LD_VAR 0 1
30040: PPUSH
30041: LD_VAR 0 2
30045: PPUSH
30046: LD_VAR 0 3
30050: PPUSH
30051: LD_INT 3
30053: PPUSH
30054: LD_INT 6
30056: PPUSH
30057: CALL_OW 12
30061: PPUSH
30062: LD_INT 1
30064: PPUSH
30065: CALL_OW 483
// end ;
30069: GO 29929
30071: POP
30072: POP
// end ;
30073: PPOPN 5
30075: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30076: LD_EXP 55
30080: PUSH
30081: LD_EXP 90
30085: AND
30086: IFFALSE 30180
30088: GO 30090
30090: DISABLE
30091: LD_INT 0
30093: PPUSH
30094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30095: LD_ADDR_VAR 0 2
30099: PUSH
30100: LD_INT 22
30102: PUSH
30103: LD_OWVAR 2
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 32
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 21
30124: PUSH
30125: LD_INT 2
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: LIST
30136: PPUSH
30137: CALL_OW 69
30141: ST_TO_ADDR
// if not tmp then
30142: LD_VAR 0 2
30146: NOT
30147: IFFALSE 30151
// exit ;
30149: GO 30180
// for i in tmp do
30151: LD_ADDR_VAR 0 1
30155: PUSH
30156: LD_VAR 0 2
30160: PUSH
30161: FOR_IN
30162: IFFALSE 30178
// SetFuel ( i , 0 ) ;
30164: LD_VAR 0 1
30168: PPUSH
30169: LD_INT 0
30171: PPUSH
30172: CALL_OW 240
30176: GO 30161
30178: POP
30179: POP
// end ;
30180: PPOPN 2
30182: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30183: LD_EXP 55
30187: PUSH
30188: LD_EXP 91
30192: AND
30193: IFFALSE 30259
30195: GO 30197
30197: DISABLE
30198: LD_INT 0
30200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30201: LD_ADDR_VAR 0 1
30205: PUSH
30206: LD_INT 22
30208: PUSH
30209: LD_OWVAR 2
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 30
30220: PUSH
30221: LD_INT 29
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PPUSH
30232: CALL_OW 69
30236: ST_TO_ADDR
// if not tmp then
30237: LD_VAR 0 1
30241: NOT
30242: IFFALSE 30246
// exit ;
30244: GO 30259
// DestroyUnit ( tmp [ 1 ] ) ;
30246: LD_VAR 0 1
30250: PUSH
30251: LD_INT 1
30253: ARRAY
30254: PPUSH
30255: CALL_OW 65
// end ;
30259: PPOPN 1
30261: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30262: LD_EXP 55
30266: PUSH
30267: LD_EXP 93
30271: AND
30272: IFFALSE 30401
30274: GO 30276
30276: DISABLE
30277: LD_INT 0
30279: PPUSH
// begin uc_side := 0 ;
30280: LD_ADDR_OWVAR 20
30284: PUSH
30285: LD_INT 0
30287: ST_TO_ADDR
// uc_nation := nation_arabian ;
30288: LD_ADDR_OWVAR 21
30292: PUSH
30293: LD_INT 2
30295: ST_TO_ADDR
// hc_gallery :=  ;
30296: LD_ADDR_OWVAR 33
30300: PUSH
30301: LD_STRING 
30303: ST_TO_ADDR
// hc_name :=  ;
30304: LD_ADDR_OWVAR 26
30308: PUSH
30309: LD_STRING 
30311: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30312: LD_INT 1
30314: PPUSH
30315: LD_INT 11
30317: PPUSH
30318: LD_INT 10
30320: PPUSH
30321: CALL_OW 380
// un := CreateHuman ;
30325: LD_ADDR_VAR 0 1
30329: PUSH
30330: CALL_OW 44
30334: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30335: LD_VAR 0 1
30339: PPUSH
30340: LD_INT 1
30342: PPUSH
30343: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30347: LD_INT 35
30349: PPUSH
30350: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30354: LD_VAR 0 1
30358: PPUSH
30359: LD_INT 22
30361: PUSH
30362: LD_OWVAR 2
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PPUSH
30371: CALL_OW 69
30375: PPUSH
30376: LD_VAR 0 1
30380: PPUSH
30381: CALL_OW 74
30385: PPUSH
30386: CALL_OW 115
// until IsDead ( un ) ;
30390: LD_VAR 0 1
30394: PPUSH
30395: CALL_OW 301
30399: IFFALSE 30347
// end ;
30401: PPOPN 1
30403: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30404: LD_EXP 55
30408: PUSH
30409: LD_EXP 95
30413: AND
30414: IFFALSE 30426
30416: GO 30418
30418: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30419: LD_STRING earthquake(getX(game), 0, 32)
30421: PPUSH
30422: CALL_OW 559
30426: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30427: LD_EXP 55
30431: PUSH
30432: LD_EXP 96
30436: AND
30437: IFFALSE 30528
30439: GO 30441
30441: DISABLE
30442: LD_INT 0
30444: PPUSH
// begin enable ;
30445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30446: LD_ADDR_VAR 0 1
30450: PUSH
30451: LD_INT 22
30453: PUSH
30454: LD_OWVAR 2
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 21
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 33
30475: PUSH
30476: LD_INT 3
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: PPUSH
30488: CALL_OW 69
30492: ST_TO_ADDR
// if not tmp then
30493: LD_VAR 0 1
30497: NOT
30498: IFFALSE 30502
// exit ;
30500: GO 30528
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30502: LD_VAR 0 1
30506: PUSH
30507: LD_INT 1
30509: PPUSH
30510: LD_VAR 0 1
30514: PPUSH
30515: CALL_OW 12
30519: ARRAY
30520: PPUSH
30521: LD_INT 1
30523: PPUSH
30524: CALL_OW 234
// end ;
30528: PPOPN 1
30530: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30531: LD_EXP 55
30535: PUSH
30536: LD_EXP 97
30540: AND
30541: IFFALSE 30682
30543: GO 30545
30545: DISABLE
30546: LD_INT 0
30548: PPUSH
30549: PPUSH
30550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30551: LD_ADDR_VAR 0 3
30555: PUSH
30556: LD_INT 22
30558: PUSH
30559: LD_OWVAR 2
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 25
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PPUSH
30582: CALL_OW 69
30586: ST_TO_ADDR
// if not tmp then
30587: LD_VAR 0 3
30591: NOT
30592: IFFALSE 30596
// exit ;
30594: GO 30682
// un := tmp [ rand ( 1 , tmp ) ] ;
30596: LD_ADDR_VAR 0 2
30600: PUSH
30601: LD_VAR 0 3
30605: PUSH
30606: LD_INT 1
30608: PPUSH
30609: LD_VAR 0 3
30613: PPUSH
30614: CALL_OW 12
30618: ARRAY
30619: ST_TO_ADDR
// if Crawls ( un ) then
30620: LD_VAR 0 2
30624: PPUSH
30625: CALL_OW 318
30629: IFFALSE 30640
// ComWalk ( un ) ;
30631: LD_VAR 0 2
30635: PPUSH
30636: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30640: LD_VAR 0 2
30644: PPUSH
30645: LD_INT 9
30647: PPUSH
30648: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30652: LD_INT 28
30654: PPUSH
30655: LD_OWVAR 2
30659: PPUSH
30660: LD_INT 2
30662: PPUSH
30663: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30667: LD_INT 29
30669: PPUSH
30670: LD_OWVAR 2
30674: PPUSH
30675: LD_INT 2
30677: PPUSH
30678: CALL_OW 322
// end ;
30682: PPOPN 3
30684: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30685: LD_EXP 55
30689: PUSH
30690: LD_EXP 98
30694: AND
30695: IFFALSE 30806
30697: GO 30699
30699: DISABLE
30700: LD_INT 0
30702: PPUSH
30703: PPUSH
30704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30705: LD_ADDR_VAR 0 3
30709: PUSH
30710: LD_INT 22
30712: PUSH
30713: LD_OWVAR 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 25
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PPUSH
30736: CALL_OW 69
30740: ST_TO_ADDR
// if not tmp then
30741: LD_VAR 0 3
30745: NOT
30746: IFFALSE 30750
// exit ;
30748: GO 30806
// un := tmp [ rand ( 1 , tmp ) ] ;
30750: LD_ADDR_VAR 0 2
30754: PUSH
30755: LD_VAR 0 3
30759: PUSH
30760: LD_INT 1
30762: PPUSH
30763: LD_VAR 0 3
30767: PPUSH
30768: CALL_OW 12
30772: ARRAY
30773: ST_TO_ADDR
// if Crawls ( un ) then
30774: LD_VAR 0 2
30778: PPUSH
30779: CALL_OW 318
30783: IFFALSE 30794
// ComWalk ( un ) ;
30785: LD_VAR 0 2
30789: PPUSH
30790: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30794: LD_VAR 0 2
30798: PPUSH
30799: LD_INT 8
30801: PPUSH
30802: CALL_OW 336
// end ;
30806: PPOPN 3
30808: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30809: LD_EXP 55
30813: PUSH
30814: LD_EXP 99
30818: AND
30819: IFFALSE 30963
30821: GO 30823
30823: DISABLE
30824: LD_INT 0
30826: PPUSH
30827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30828: LD_ADDR_VAR 0 2
30832: PUSH
30833: LD_INT 22
30835: PUSH
30836: LD_OWVAR 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 21
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 34
30860: PUSH
30861: LD_INT 12
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 34
30870: PUSH
30871: LD_INT 51
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 34
30880: PUSH
30881: LD_INT 32
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: ST_TO_ADDR
// if not tmp then
30904: LD_VAR 0 2
30908: NOT
30909: IFFALSE 30913
// exit ;
30911: GO 30963
// for i in tmp do
30913: LD_ADDR_VAR 0 1
30917: PUSH
30918: LD_VAR 0 2
30922: PUSH
30923: FOR_IN
30924: IFFALSE 30961
// if GetCargo ( i , mat_artifact ) = 0 then
30926: LD_VAR 0 1
30930: PPUSH
30931: LD_INT 4
30933: PPUSH
30934: CALL_OW 289
30938: PUSH
30939: LD_INT 0
30941: EQUAL
30942: IFFALSE 30959
// SetCargo ( i , mat_siberit , 100 ) ;
30944: LD_VAR 0 1
30948: PPUSH
30949: LD_INT 3
30951: PPUSH
30952: LD_INT 100
30954: PPUSH
30955: CALL_OW 290
30959: GO 30923
30961: POP
30962: POP
// end ;
30963: PPOPN 2
30965: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30966: LD_EXP 55
30970: PUSH
30971: LD_EXP 100
30975: AND
30976: IFFALSE 31159
30978: GO 30980
30980: DISABLE
30981: LD_INT 0
30983: PPUSH
30984: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30985: LD_ADDR_VAR 0 2
30989: PUSH
30990: LD_INT 22
30992: PUSH
30993: LD_OWVAR 2
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PPUSH
31002: CALL_OW 69
31006: ST_TO_ADDR
// if not tmp then
31007: LD_VAR 0 2
31011: NOT
31012: IFFALSE 31016
// exit ;
31014: GO 31159
// for i := 1 to 2 do
31016: LD_ADDR_VAR 0 1
31020: PUSH
31021: DOUBLE
31022: LD_INT 1
31024: DEC
31025: ST_TO_ADDR
31026: LD_INT 2
31028: PUSH
31029: FOR_TO
31030: IFFALSE 31157
// begin uc_side := your_side ;
31032: LD_ADDR_OWVAR 20
31036: PUSH
31037: LD_OWVAR 2
31041: ST_TO_ADDR
// uc_nation := nation_american ;
31042: LD_ADDR_OWVAR 21
31046: PUSH
31047: LD_INT 1
31049: ST_TO_ADDR
// vc_chassis := us_morphling ;
31050: LD_ADDR_OWVAR 37
31054: PUSH
31055: LD_INT 5
31057: ST_TO_ADDR
// vc_engine := engine_siberite ;
31058: LD_ADDR_OWVAR 39
31062: PUSH
31063: LD_INT 3
31065: ST_TO_ADDR
// vc_control := control_computer ;
31066: LD_ADDR_OWVAR 38
31070: PUSH
31071: LD_INT 3
31073: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31074: LD_ADDR_OWVAR 40
31078: PUSH
31079: LD_INT 10
31081: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31082: LD_VAR 0 2
31086: PUSH
31087: LD_INT 1
31089: ARRAY
31090: PPUSH
31091: CALL_OW 310
31095: NOT
31096: IFFALSE 31143
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31098: CALL_OW 45
31102: PPUSH
31103: LD_VAR 0 2
31107: PUSH
31108: LD_INT 1
31110: ARRAY
31111: PPUSH
31112: CALL_OW 250
31116: PPUSH
31117: LD_VAR 0 2
31121: PUSH
31122: LD_INT 1
31124: ARRAY
31125: PPUSH
31126: CALL_OW 251
31130: PPUSH
31131: LD_INT 12
31133: PPUSH
31134: LD_INT 1
31136: PPUSH
31137: CALL_OW 50
31141: GO 31155
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31143: CALL_OW 45
31147: PPUSH
31148: LD_INT 1
31150: PPUSH
31151: CALL_OW 51
// end ;
31155: GO 31029
31157: POP
31158: POP
// end ;
31159: PPOPN 2
31161: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31162: LD_EXP 55
31166: PUSH
31167: LD_EXP 101
31171: AND
31172: IFFALSE 31394
31174: GO 31176
31176: DISABLE
31177: LD_INT 0
31179: PPUSH
31180: PPUSH
31181: PPUSH
31182: PPUSH
31183: PPUSH
31184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31185: LD_ADDR_VAR 0 6
31189: PUSH
31190: LD_INT 22
31192: PUSH
31193: LD_OWVAR 2
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 21
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 3
31214: PUSH
31215: LD_INT 23
31217: PUSH
31218: LD_INT 0
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: PPUSH
31234: CALL_OW 69
31238: ST_TO_ADDR
// if not tmp then
31239: LD_VAR 0 6
31243: NOT
31244: IFFALSE 31248
// exit ;
31246: GO 31394
// s1 := rand ( 1 , 4 ) ;
31248: LD_ADDR_VAR 0 2
31252: PUSH
31253: LD_INT 1
31255: PPUSH
31256: LD_INT 4
31258: PPUSH
31259: CALL_OW 12
31263: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31264: LD_ADDR_VAR 0 4
31268: PUSH
31269: LD_VAR 0 6
31273: PUSH
31274: LD_INT 1
31276: ARRAY
31277: PPUSH
31278: LD_VAR 0 2
31282: PPUSH
31283: CALL_OW 259
31287: ST_TO_ADDR
// if s1 = 1 then
31288: LD_VAR 0 2
31292: PUSH
31293: LD_INT 1
31295: EQUAL
31296: IFFALSE 31316
// s2 := rand ( 2 , 4 ) else
31298: LD_ADDR_VAR 0 3
31302: PUSH
31303: LD_INT 2
31305: PPUSH
31306: LD_INT 4
31308: PPUSH
31309: CALL_OW 12
31313: ST_TO_ADDR
31314: GO 31324
// s2 := 1 ;
31316: LD_ADDR_VAR 0 3
31320: PUSH
31321: LD_INT 1
31323: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31324: LD_ADDR_VAR 0 5
31328: PUSH
31329: LD_VAR 0 6
31333: PUSH
31334: LD_INT 1
31336: ARRAY
31337: PPUSH
31338: LD_VAR 0 3
31342: PPUSH
31343: CALL_OW 259
31347: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31348: LD_VAR 0 6
31352: PUSH
31353: LD_INT 1
31355: ARRAY
31356: PPUSH
31357: LD_VAR 0 2
31361: PPUSH
31362: LD_VAR 0 5
31366: PPUSH
31367: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31371: LD_VAR 0 6
31375: PUSH
31376: LD_INT 1
31378: ARRAY
31379: PPUSH
31380: LD_VAR 0 3
31384: PPUSH
31385: LD_VAR 0 4
31389: PPUSH
31390: CALL_OW 237
// end ;
31394: PPOPN 6
31396: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31397: LD_EXP 55
31401: PUSH
31402: LD_EXP 102
31406: AND
31407: IFFALSE 31486
31409: GO 31411
31411: DISABLE
31412: LD_INT 0
31414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31415: LD_ADDR_VAR 0 1
31419: PUSH
31420: LD_INT 22
31422: PUSH
31423: LD_OWVAR 2
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 30
31434: PUSH
31435: LD_INT 3
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PPUSH
31446: CALL_OW 69
31450: ST_TO_ADDR
// if not tmp then
31451: LD_VAR 0 1
31455: NOT
31456: IFFALSE 31460
// exit ;
31458: GO 31486
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31460: LD_VAR 0 1
31464: PUSH
31465: LD_INT 1
31467: PPUSH
31468: LD_VAR 0 1
31472: PPUSH
31473: CALL_OW 12
31477: ARRAY
31478: PPUSH
31479: LD_INT 1
31481: PPUSH
31482: CALL_OW 234
// end ;
31486: PPOPN 1
31488: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31489: LD_EXP 55
31493: PUSH
31494: LD_EXP 103
31498: AND
31499: IFFALSE 31611
31501: GO 31503
31503: DISABLE
31504: LD_INT 0
31506: PPUSH
31507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31508: LD_ADDR_VAR 0 2
31512: PUSH
31513: LD_INT 22
31515: PUSH
31516: LD_OWVAR 2
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: LD_INT 30
31530: PUSH
31531: LD_INT 27
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 30
31540: PUSH
31541: LD_INT 26
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 30
31550: PUSH
31551: LD_INT 28
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PPUSH
31568: CALL_OW 69
31572: ST_TO_ADDR
// if not tmp then
31573: LD_VAR 0 2
31577: NOT
31578: IFFALSE 31582
// exit ;
31580: GO 31611
// for i in tmp do
31582: LD_ADDR_VAR 0 1
31586: PUSH
31587: LD_VAR 0 2
31591: PUSH
31592: FOR_IN
31593: IFFALSE 31609
// SetLives ( i , 1 ) ;
31595: LD_VAR 0 1
31599: PPUSH
31600: LD_INT 1
31602: PPUSH
31603: CALL_OW 234
31607: GO 31592
31609: POP
31610: POP
// end ;
31611: PPOPN 2
31613: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31614: LD_EXP 55
31618: PUSH
31619: LD_EXP 104
31623: AND
31624: IFFALSE 31911
31626: GO 31628
31628: DISABLE
31629: LD_INT 0
31631: PPUSH
31632: PPUSH
31633: PPUSH
// begin i := rand ( 1 , 7 ) ;
31634: LD_ADDR_VAR 0 1
31638: PUSH
31639: LD_INT 1
31641: PPUSH
31642: LD_INT 7
31644: PPUSH
31645: CALL_OW 12
31649: ST_TO_ADDR
// case i of 1 :
31650: LD_VAR 0 1
31654: PUSH
31655: LD_INT 1
31657: DOUBLE
31658: EQUAL
31659: IFTRUE 31663
31661: GO 31673
31663: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31664: LD_STRING earthquake(getX(game), 0, 32)
31666: PPUSH
31667: CALL_OW 559
31671: GO 31911
31673: LD_INT 2
31675: DOUBLE
31676: EQUAL
31677: IFTRUE 31681
31679: GO 31695
31681: POP
// begin ToLua ( displayStucuk(); ) ;
31682: LD_STRING displayStucuk();
31684: PPUSH
31685: CALL_OW 559
// ResetFog ;
31689: CALL_OW 335
// end ; 3 :
31693: GO 31911
31695: LD_INT 3
31697: DOUBLE
31698: EQUAL
31699: IFTRUE 31703
31701: GO 31807
31703: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31704: LD_ADDR_VAR 0 2
31708: PUSH
31709: LD_INT 22
31711: PUSH
31712: LD_OWVAR 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 25
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PPUSH
31735: CALL_OW 69
31739: ST_TO_ADDR
// if not tmp then
31740: LD_VAR 0 2
31744: NOT
31745: IFFALSE 31749
// exit ;
31747: GO 31911
// un := tmp [ rand ( 1 , tmp ) ] ;
31749: LD_ADDR_VAR 0 3
31753: PUSH
31754: LD_VAR 0 2
31758: PUSH
31759: LD_INT 1
31761: PPUSH
31762: LD_VAR 0 2
31766: PPUSH
31767: CALL_OW 12
31771: ARRAY
31772: ST_TO_ADDR
// if Crawls ( un ) then
31773: LD_VAR 0 3
31777: PPUSH
31778: CALL_OW 318
31782: IFFALSE 31793
// ComWalk ( un ) ;
31784: LD_VAR 0 3
31788: PPUSH
31789: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31793: LD_VAR 0 3
31797: PPUSH
31798: LD_INT 8
31800: PPUSH
31801: CALL_OW 336
// end ; 4 :
31805: GO 31911
31807: LD_INT 4
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31889
31815: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31816: LD_ADDR_VAR 0 2
31820: PUSH
31821: LD_INT 22
31823: PUSH
31824: LD_OWVAR 2
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 30
31835: PUSH
31836: LD_INT 29
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PPUSH
31847: CALL_OW 69
31851: ST_TO_ADDR
// if not tmp then
31852: LD_VAR 0 2
31856: NOT
31857: IFFALSE 31861
// exit ;
31859: GO 31911
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31861: LD_VAR 0 2
31865: PUSH
31866: LD_INT 1
31868: ARRAY
31869: PPUSH
31870: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31874: LD_VAR 0 2
31878: PUSH
31879: LD_INT 1
31881: ARRAY
31882: PPUSH
31883: CALL_OW 65
// end ; 5 .. 7 :
31887: GO 31911
31889: LD_INT 5
31891: DOUBLE
31892: GREATEREQUAL
31893: IFFALSE 31901
31895: LD_INT 7
31897: DOUBLE
31898: LESSEQUAL
31899: IFTRUE 31903
31901: GO 31910
31903: POP
// StreamSibBomb ; end ;
31904: CALL 28148 0 0
31908: GO 31911
31910: POP
// end ;
31911: PPOPN 3
31913: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31914: LD_EXP 55
31918: PUSH
31919: LD_EXP 105
31923: AND
31924: IFFALSE 32080
31926: GO 31928
31928: DISABLE
31929: LD_INT 0
31931: PPUSH
31932: PPUSH
31933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31934: LD_ADDR_VAR 0 2
31938: PUSH
31939: LD_INT 81
31941: PUSH
31942: LD_OWVAR 2
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 21
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 21
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PPUSH
31983: CALL_OW 69
31987: ST_TO_ADDR
// if not tmp then
31988: LD_VAR 0 2
31992: NOT
31993: IFFALSE 31997
// exit ;
31995: GO 32080
// p := 0 ;
31997: LD_ADDR_VAR 0 3
32001: PUSH
32002: LD_INT 0
32004: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32005: LD_INT 35
32007: PPUSH
32008: CALL_OW 67
// p := p + 1 ;
32012: LD_ADDR_VAR 0 3
32016: PUSH
32017: LD_VAR 0 3
32021: PUSH
32022: LD_INT 1
32024: PLUS
32025: ST_TO_ADDR
// for i in tmp do
32026: LD_ADDR_VAR 0 1
32030: PUSH
32031: LD_VAR 0 2
32035: PUSH
32036: FOR_IN
32037: IFFALSE 32068
// if GetLives ( i ) < 1000 then
32039: LD_VAR 0 1
32043: PPUSH
32044: CALL_OW 256
32048: PUSH
32049: LD_INT 1000
32051: LESS
32052: IFFALSE 32066
// SetLives ( i , 1000 ) ;
32054: LD_VAR 0 1
32058: PPUSH
32059: LD_INT 1000
32061: PPUSH
32062: CALL_OW 234
32066: GO 32036
32068: POP
32069: POP
// until p > 20 ;
32070: LD_VAR 0 3
32074: PUSH
32075: LD_INT 20
32077: GREATER
32078: IFFALSE 32005
// end ;
32080: PPOPN 3
32082: END
// every 0 0$1 trigger StreamModeActive and sTime do
32083: LD_EXP 55
32087: PUSH
32088: LD_EXP 106
32092: AND
32093: IFFALSE 32128
32095: GO 32097
32097: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32098: LD_INT 28
32100: PPUSH
32101: LD_OWVAR 2
32105: PPUSH
32106: LD_INT 2
32108: PPUSH
32109: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32113: LD_INT 30
32115: PPUSH
32116: LD_OWVAR 2
32120: PPUSH
32121: LD_INT 2
32123: PPUSH
32124: CALL_OW 322
// end ;
32128: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32129: LD_EXP 55
32133: PUSH
32134: LD_EXP 107
32138: AND
32139: IFFALSE 32260
32141: GO 32143
32143: DISABLE
32144: LD_INT 0
32146: PPUSH
32147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32148: LD_ADDR_VAR 0 2
32152: PUSH
32153: LD_INT 22
32155: PUSH
32156: LD_OWVAR 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 21
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 3
32177: PUSH
32178: LD_INT 23
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: LIST
32196: PPUSH
32197: CALL_OW 69
32201: ST_TO_ADDR
// if not tmp then
32202: LD_VAR 0 2
32206: NOT
32207: IFFALSE 32211
// exit ;
32209: GO 32260
// for i in tmp do
32211: LD_ADDR_VAR 0 1
32215: PUSH
32216: LD_VAR 0 2
32220: PUSH
32221: FOR_IN
32222: IFFALSE 32258
// begin if Crawls ( i ) then
32224: LD_VAR 0 1
32228: PPUSH
32229: CALL_OW 318
32233: IFFALSE 32244
// ComWalk ( i ) ;
32235: LD_VAR 0 1
32239: PPUSH
32240: CALL_OW 138
// SetClass ( i , 2 ) ;
32244: LD_VAR 0 1
32248: PPUSH
32249: LD_INT 2
32251: PPUSH
32252: CALL_OW 336
// end ;
32256: GO 32221
32258: POP
32259: POP
// end ;
32260: PPOPN 2
32262: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32263: LD_EXP 55
32267: PUSH
32268: LD_EXP 108
32272: AND
32273: IFFALSE 32561
32275: GO 32277
32277: DISABLE
32278: LD_INT 0
32280: PPUSH
32281: PPUSH
32282: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32283: LD_OWVAR 2
32287: PPUSH
32288: LD_INT 9
32290: PPUSH
32291: LD_INT 1
32293: PPUSH
32294: LD_INT 1
32296: PPUSH
32297: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32301: LD_INT 9
32303: PPUSH
32304: LD_OWVAR 2
32308: PPUSH
32309: CALL_OW 343
// uc_side := 9 ;
32313: LD_ADDR_OWVAR 20
32317: PUSH
32318: LD_INT 9
32320: ST_TO_ADDR
// uc_nation := 2 ;
32321: LD_ADDR_OWVAR 21
32325: PUSH
32326: LD_INT 2
32328: ST_TO_ADDR
// hc_name := Dark Warrior ;
32329: LD_ADDR_OWVAR 26
32333: PUSH
32334: LD_STRING Dark Warrior
32336: ST_TO_ADDR
// hc_gallery :=  ;
32337: LD_ADDR_OWVAR 33
32341: PUSH
32342: LD_STRING 
32344: ST_TO_ADDR
// hc_noskilllimit := true ;
32345: LD_ADDR_OWVAR 76
32349: PUSH
32350: LD_INT 1
32352: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32353: LD_ADDR_OWVAR 31
32357: PUSH
32358: LD_INT 30
32360: PUSH
32361: LD_INT 30
32363: PUSH
32364: LD_INT 30
32366: PUSH
32367: LD_INT 30
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// un := CreateHuman ;
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: CALL_OW 44
32385: ST_TO_ADDR
// hc_noskilllimit := false ;
32386: LD_ADDR_OWVAR 76
32390: PUSH
32391: LD_INT 0
32393: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32394: LD_VAR 0 3
32398: PPUSH
32399: LD_INT 1
32401: PPUSH
32402: CALL_OW 51
// ToLua ( playRanger() ) ;
32406: LD_STRING playRanger()
32408: PPUSH
32409: CALL_OW 559
// p := 0 ;
32413: LD_ADDR_VAR 0 2
32417: PUSH
32418: LD_INT 0
32420: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32421: LD_INT 35
32423: PPUSH
32424: CALL_OW 67
// p := p + 1 ;
32428: LD_ADDR_VAR 0 2
32432: PUSH
32433: LD_VAR 0 2
32437: PUSH
32438: LD_INT 1
32440: PLUS
32441: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32442: LD_VAR 0 3
32446: PPUSH
32447: CALL_OW 256
32451: PUSH
32452: LD_INT 1000
32454: LESS
32455: IFFALSE 32469
// SetLives ( un , 1000 ) ;
32457: LD_VAR 0 3
32461: PPUSH
32462: LD_INT 1000
32464: PPUSH
32465: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32469: LD_VAR 0 3
32473: PPUSH
32474: LD_INT 81
32476: PUSH
32477: LD_OWVAR 2
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 91
32488: PUSH
32489: LD_VAR 0 3
32493: PUSH
32494: LD_INT 30
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PPUSH
32506: CALL_OW 69
32510: PPUSH
32511: LD_VAR 0 3
32515: PPUSH
32516: CALL_OW 74
32520: PPUSH
32521: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32525: LD_VAR 0 2
32529: PUSH
32530: LD_INT 80
32532: GREATER
32533: PUSH
32534: LD_VAR 0 3
32538: PPUSH
32539: CALL_OW 301
32543: OR
32544: IFFALSE 32421
// if un then
32546: LD_VAR 0 3
32550: IFFALSE 32561
// RemoveUnit ( un ) ;
32552: LD_VAR 0 3
32556: PPUSH
32557: CALL_OW 64
// end ;
32561: PPOPN 3
32563: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32564: LD_EXP 109
32568: IFFALSE 32684
32570: GO 32572
32572: DISABLE
32573: LD_INT 0
32575: PPUSH
32576: PPUSH
32577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32578: LD_ADDR_VAR 0 2
32582: PUSH
32583: LD_INT 81
32585: PUSH
32586: LD_OWVAR 2
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 21
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PPUSH
32609: CALL_OW 69
32613: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32614: LD_STRING playComputer()
32616: PPUSH
32617: CALL_OW 559
// if not tmp then
32621: LD_VAR 0 2
32625: NOT
32626: IFFALSE 32630
// exit ;
32628: GO 32684
// for i in tmp do
32630: LD_ADDR_VAR 0 1
32634: PUSH
32635: LD_VAR 0 2
32639: PUSH
32640: FOR_IN
32641: IFFALSE 32682
// for j := 1 to 4 do
32643: LD_ADDR_VAR 0 3
32647: PUSH
32648: DOUBLE
32649: LD_INT 1
32651: DEC
32652: ST_TO_ADDR
32653: LD_INT 4
32655: PUSH
32656: FOR_TO
32657: IFFALSE 32678
// SetSkill ( i , j , 10 ) ;
32659: LD_VAR 0 1
32663: PPUSH
32664: LD_VAR 0 3
32668: PPUSH
32669: LD_INT 10
32671: PPUSH
32672: CALL_OW 237
32676: GO 32656
32678: POP
32679: POP
32680: GO 32640
32682: POP
32683: POP
// end ;
32684: PPOPN 3
32686: END
// every 0 0$1 trigger s30 do var i , tmp ;
32687: LD_EXP 110
32691: IFFALSE 32760
32693: GO 32695
32695: DISABLE
32696: LD_INT 0
32698: PPUSH
32699: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32700: LD_ADDR_VAR 0 2
32704: PUSH
32705: LD_INT 22
32707: PUSH
32708: LD_OWVAR 2
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PPUSH
32717: CALL_OW 69
32721: ST_TO_ADDR
// if not tmp then
32722: LD_VAR 0 2
32726: NOT
32727: IFFALSE 32731
// exit ;
32729: GO 32760
// for i in tmp do
32731: LD_ADDR_VAR 0 1
32735: PUSH
32736: LD_VAR 0 2
32740: PUSH
32741: FOR_IN
32742: IFFALSE 32758
// SetLives ( i , 300 ) ;
32744: LD_VAR 0 1
32748: PPUSH
32749: LD_INT 300
32751: PPUSH
32752: CALL_OW 234
32756: GO 32741
32758: POP
32759: POP
// end ;
32760: PPOPN 2
32762: END
// every 0 0$1 trigger s60 do var i , tmp ;
32763: LD_EXP 111
32767: IFFALSE 32836
32769: GO 32771
32771: DISABLE
32772: LD_INT 0
32774: PPUSH
32775: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32776: LD_ADDR_VAR 0 2
32780: PUSH
32781: LD_INT 22
32783: PUSH
32784: LD_OWVAR 2
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PPUSH
32793: CALL_OW 69
32797: ST_TO_ADDR
// if not tmp then
32798: LD_VAR 0 2
32802: NOT
32803: IFFALSE 32807
// exit ;
32805: GO 32836
// for i in tmp do
32807: LD_ADDR_VAR 0 1
32811: PUSH
32812: LD_VAR 0 2
32816: PUSH
32817: FOR_IN
32818: IFFALSE 32834
// SetLives ( i , 600 ) ;
32820: LD_VAR 0 1
32824: PPUSH
32825: LD_INT 600
32827: PPUSH
32828: CALL_OW 234
32832: GO 32817
32834: POP
32835: POP
// end ;
32836: PPOPN 2
32838: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32839: LD_INT 0
32841: PPUSH
// case cmd of 301 :
32842: LD_VAR 0 1
32846: PUSH
32847: LD_INT 301
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32887
32855: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32856: LD_VAR 0 6
32860: PPUSH
32861: LD_VAR 0 7
32865: PPUSH
32866: LD_VAR 0 8
32870: PPUSH
32871: LD_VAR 0 4
32875: PPUSH
32876: LD_VAR 0 5
32880: PPUSH
32881: CALL 34096 0 5
32885: GO 33008
32887: LD_INT 302
32889: DOUBLE
32890: EQUAL
32891: IFTRUE 32895
32893: GO 32932
32895: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32896: LD_VAR 0 6
32900: PPUSH
32901: LD_VAR 0 7
32905: PPUSH
32906: LD_VAR 0 8
32910: PPUSH
32911: LD_VAR 0 9
32915: PPUSH
32916: LD_VAR 0 4
32920: PPUSH
32921: LD_VAR 0 5
32925: PPUSH
32926: CALL 34187 0 6
32930: GO 33008
32932: LD_INT 303
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 32977
32940: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32941: LD_VAR 0 6
32945: PPUSH
32946: LD_VAR 0 7
32950: PPUSH
32951: LD_VAR 0 8
32955: PPUSH
32956: LD_VAR 0 9
32960: PPUSH
32961: LD_VAR 0 4
32965: PPUSH
32966: LD_VAR 0 5
32970: PPUSH
32971: CALL 33013 0 6
32975: GO 33008
32977: LD_INT 304
32979: DOUBLE
32980: EQUAL
32981: IFTRUE 32985
32983: GO 33007
32985: POP
// hHackTeleport ( unit , x , y ) ; end ;
32986: LD_VAR 0 2
32990: PPUSH
32991: LD_VAR 0 4
32995: PPUSH
32996: LD_VAR 0 5
33000: PPUSH
33001: CALL 34780 0 3
33005: GO 33008
33007: POP
// end ;
33008: LD_VAR 0 12
33012: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33013: LD_INT 0
33015: PPUSH
33016: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33017: LD_VAR 0 1
33021: PUSH
33022: LD_INT 1
33024: LESS
33025: PUSH
33026: LD_VAR 0 1
33030: PUSH
33031: LD_INT 3
33033: GREATER
33034: OR
33035: PUSH
33036: LD_VAR 0 5
33040: PPUSH
33041: LD_VAR 0 6
33045: PPUSH
33046: CALL_OW 428
33050: OR
33051: IFFALSE 33055
// exit ;
33053: GO 33783
// uc_side := your_side ;
33055: LD_ADDR_OWVAR 20
33059: PUSH
33060: LD_OWVAR 2
33064: ST_TO_ADDR
// uc_nation := nation ;
33065: LD_ADDR_OWVAR 21
33069: PUSH
33070: LD_VAR 0 1
33074: ST_TO_ADDR
// bc_level = 1 ;
33075: LD_ADDR_OWVAR 43
33079: PUSH
33080: LD_INT 1
33082: ST_TO_ADDR
// case btype of 1 :
33083: LD_VAR 0 2
33087: PUSH
33088: LD_INT 1
33090: DOUBLE
33091: EQUAL
33092: IFTRUE 33096
33094: GO 33107
33096: POP
// bc_type := b_depot ; 2 :
33097: LD_ADDR_OWVAR 42
33101: PUSH
33102: LD_INT 0
33104: ST_TO_ADDR
33105: GO 33727
33107: LD_INT 2
33109: DOUBLE
33110: EQUAL
33111: IFTRUE 33115
33113: GO 33126
33115: POP
// bc_type := b_warehouse ; 3 :
33116: LD_ADDR_OWVAR 42
33120: PUSH
33121: LD_INT 1
33123: ST_TO_ADDR
33124: GO 33727
33126: LD_INT 3
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33134
33132: GO 33145
33134: POP
// bc_type := b_lab ; 4 .. 9 :
33135: LD_ADDR_OWVAR 42
33139: PUSH
33140: LD_INT 6
33142: ST_TO_ADDR
33143: GO 33727
33145: LD_INT 4
33147: DOUBLE
33148: GREATEREQUAL
33149: IFFALSE 33157
33151: LD_INT 9
33153: DOUBLE
33154: LESSEQUAL
33155: IFTRUE 33159
33157: GO 33219
33159: POP
// begin bc_type := b_lab_half ;
33160: LD_ADDR_OWVAR 42
33164: PUSH
33165: LD_INT 7
33167: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33168: LD_ADDR_OWVAR 44
33172: PUSH
33173: LD_INT 10
33175: PUSH
33176: LD_INT 11
33178: PUSH
33179: LD_INT 12
33181: PUSH
33182: LD_INT 15
33184: PUSH
33185: LD_INT 14
33187: PUSH
33188: LD_INT 13
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: PUSH
33199: LD_VAR 0 2
33203: PUSH
33204: LD_INT 3
33206: MINUS
33207: ARRAY
33208: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33209: LD_ADDR_OWVAR 45
33213: PUSH
33214: LD_INT 9
33216: ST_TO_ADDR
// end ; 10 .. 13 :
33217: GO 33727
33219: LD_INT 10
33221: DOUBLE
33222: GREATEREQUAL
33223: IFFALSE 33231
33225: LD_INT 13
33227: DOUBLE
33228: LESSEQUAL
33229: IFTRUE 33233
33231: GO 33310
33233: POP
// begin bc_type := b_lab_full ;
33234: LD_ADDR_OWVAR 42
33238: PUSH
33239: LD_INT 8
33241: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33242: LD_ADDR_OWVAR 44
33246: PUSH
33247: LD_INT 10
33249: PUSH
33250: LD_INT 12
33252: PUSH
33253: LD_INT 14
33255: PUSH
33256: LD_INT 13
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: PUSH
33265: LD_VAR 0 2
33269: PUSH
33270: LD_INT 9
33272: MINUS
33273: ARRAY
33274: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33275: LD_ADDR_OWVAR 45
33279: PUSH
33280: LD_INT 11
33282: PUSH
33283: LD_INT 15
33285: PUSH
33286: LD_INT 12
33288: PUSH
33289: LD_INT 15
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: PUSH
33298: LD_VAR 0 2
33302: PUSH
33303: LD_INT 9
33305: MINUS
33306: ARRAY
33307: ST_TO_ADDR
// end ; 14 :
33308: GO 33727
33310: LD_INT 14
33312: DOUBLE
33313: EQUAL
33314: IFTRUE 33318
33316: GO 33329
33318: POP
// bc_type := b_workshop ; 15 :
33319: LD_ADDR_OWVAR 42
33323: PUSH
33324: LD_INT 2
33326: ST_TO_ADDR
33327: GO 33727
33329: LD_INT 15
33331: DOUBLE
33332: EQUAL
33333: IFTRUE 33337
33335: GO 33348
33337: POP
// bc_type := b_factory ; 16 :
33338: LD_ADDR_OWVAR 42
33342: PUSH
33343: LD_INT 3
33345: ST_TO_ADDR
33346: GO 33727
33348: LD_INT 16
33350: DOUBLE
33351: EQUAL
33352: IFTRUE 33356
33354: GO 33367
33356: POP
// bc_type := b_ext_gun ; 17 :
33357: LD_ADDR_OWVAR 42
33361: PUSH
33362: LD_INT 17
33364: ST_TO_ADDR
33365: GO 33727
33367: LD_INT 17
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33403
33375: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33376: LD_ADDR_OWVAR 42
33380: PUSH
33381: LD_INT 19
33383: PUSH
33384: LD_INT 23
33386: PUSH
33387: LD_INT 19
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: PUSH
33395: LD_VAR 0 1
33399: ARRAY
33400: ST_TO_ADDR
33401: GO 33727
33403: LD_INT 18
33405: DOUBLE
33406: EQUAL
33407: IFTRUE 33411
33409: GO 33422
33411: POP
// bc_type := b_ext_radar ; 19 :
33412: LD_ADDR_OWVAR 42
33416: PUSH
33417: LD_INT 20
33419: ST_TO_ADDR
33420: GO 33727
33422: LD_INT 19
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33441
33430: POP
// bc_type := b_ext_radio ; 20 :
33431: LD_ADDR_OWVAR 42
33435: PUSH
33436: LD_INT 22
33438: ST_TO_ADDR
33439: GO 33727
33441: LD_INT 20
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33449
33447: GO 33460
33449: POP
// bc_type := b_ext_siberium ; 21 :
33450: LD_ADDR_OWVAR 42
33454: PUSH
33455: LD_INT 21
33457: ST_TO_ADDR
33458: GO 33727
33460: LD_INT 21
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33479
33468: POP
// bc_type := b_ext_computer ; 22 :
33469: LD_ADDR_OWVAR 42
33473: PUSH
33474: LD_INT 24
33476: ST_TO_ADDR
33477: GO 33727
33479: LD_INT 22
33481: DOUBLE
33482: EQUAL
33483: IFTRUE 33487
33485: GO 33498
33487: POP
// bc_type := b_ext_track ; 23 :
33488: LD_ADDR_OWVAR 42
33492: PUSH
33493: LD_INT 16
33495: ST_TO_ADDR
33496: GO 33727
33498: LD_INT 23
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33506
33504: GO 33517
33506: POP
// bc_type := b_ext_laser ; 24 :
33507: LD_ADDR_OWVAR 42
33511: PUSH
33512: LD_INT 25
33514: ST_TO_ADDR
33515: GO 33727
33517: LD_INT 24
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33536
33525: POP
// bc_type := b_control_tower ; 25 :
33526: LD_ADDR_OWVAR 42
33530: PUSH
33531: LD_INT 36
33533: ST_TO_ADDR
33534: GO 33727
33536: LD_INT 25
33538: DOUBLE
33539: EQUAL
33540: IFTRUE 33544
33542: GO 33555
33544: POP
// bc_type := b_breastwork ; 26 :
33545: LD_ADDR_OWVAR 42
33549: PUSH
33550: LD_INT 31
33552: ST_TO_ADDR
33553: GO 33727
33555: LD_INT 26
33557: DOUBLE
33558: EQUAL
33559: IFTRUE 33563
33561: GO 33574
33563: POP
// bc_type := b_bunker ; 27 :
33564: LD_ADDR_OWVAR 42
33568: PUSH
33569: LD_INT 32
33571: ST_TO_ADDR
33572: GO 33727
33574: LD_INT 27
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33582
33580: GO 33593
33582: POP
// bc_type := b_turret ; 28 :
33583: LD_ADDR_OWVAR 42
33587: PUSH
33588: LD_INT 33
33590: ST_TO_ADDR
33591: GO 33727
33593: LD_INT 28
33595: DOUBLE
33596: EQUAL
33597: IFTRUE 33601
33599: GO 33612
33601: POP
// bc_type := b_armoury ; 29 :
33602: LD_ADDR_OWVAR 42
33606: PUSH
33607: LD_INT 4
33609: ST_TO_ADDR
33610: GO 33727
33612: LD_INT 29
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33620
33618: GO 33631
33620: POP
// bc_type := b_barracks ; 30 :
33621: LD_ADDR_OWVAR 42
33625: PUSH
33626: LD_INT 5
33628: ST_TO_ADDR
33629: GO 33727
33631: LD_INT 30
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33650
33639: POP
// bc_type := b_solar_power ; 31 :
33640: LD_ADDR_OWVAR 42
33644: PUSH
33645: LD_INT 27
33647: ST_TO_ADDR
33648: GO 33727
33650: LD_INT 31
33652: DOUBLE
33653: EQUAL
33654: IFTRUE 33658
33656: GO 33669
33658: POP
// bc_type := b_oil_power ; 32 :
33659: LD_ADDR_OWVAR 42
33663: PUSH
33664: LD_INT 26
33666: ST_TO_ADDR
33667: GO 33727
33669: LD_INT 32
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33677
33675: GO 33688
33677: POP
// bc_type := b_siberite_power ; 33 :
33678: LD_ADDR_OWVAR 42
33682: PUSH
33683: LD_INT 28
33685: ST_TO_ADDR
33686: GO 33727
33688: LD_INT 33
33690: DOUBLE
33691: EQUAL
33692: IFTRUE 33696
33694: GO 33707
33696: POP
// bc_type := b_oil_mine ; 34 :
33697: LD_ADDR_OWVAR 42
33701: PUSH
33702: LD_INT 29
33704: ST_TO_ADDR
33705: GO 33727
33707: LD_INT 34
33709: DOUBLE
33710: EQUAL
33711: IFTRUE 33715
33713: GO 33726
33715: POP
// bc_type := b_siberite_mine ; end ;
33716: LD_ADDR_OWVAR 42
33720: PUSH
33721: LD_INT 30
33723: ST_TO_ADDR
33724: GO 33727
33726: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33727: LD_ADDR_VAR 0 8
33731: PUSH
33732: LD_VAR 0 5
33736: PPUSH
33737: LD_VAR 0 6
33741: PPUSH
33742: LD_VAR 0 3
33746: PPUSH
33747: CALL_OW 47
33751: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33752: LD_OWVAR 42
33756: PUSH
33757: LD_INT 32
33759: PUSH
33760: LD_INT 33
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: IN
33767: IFFALSE 33783
// PlaceWeaponTurret ( b , weapon ) ;
33769: LD_VAR 0 8
33773: PPUSH
33774: LD_VAR 0 4
33778: PPUSH
33779: CALL_OW 431
// end ;
33783: LD_VAR 0 7
33787: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33788: LD_INT 0
33790: PPUSH
33791: PPUSH
33792: PPUSH
33793: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33794: LD_ADDR_VAR 0 4
33798: PUSH
33799: LD_INT 22
33801: PUSH
33802: LD_OWVAR 2
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 30
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 30
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: LIST
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PPUSH
33843: CALL_OW 69
33847: ST_TO_ADDR
// if not tmp then
33848: LD_VAR 0 4
33852: NOT
33853: IFFALSE 33857
// exit ;
33855: GO 33916
// for i in tmp do
33857: LD_ADDR_VAR 0 2
33861: PUSH
33862: LD_VAR 0 4
33866: PUSH
33867: FOR_IN
33868: IFFALSE 33914
// for j = 1 to 3 do
33870: LD_ADDR_VAR 0 3
33874: PUSH
33875: DOUBLE
33876: LD_INT 1
33878: DEC
33879: ST_TO_ADDR
33880: LD_INT 3
33882: PUSH
33883: FOR_TO
33884: IFFALSE 33910
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33886: LD_VAR 0 2
33890: PPUSH
33891: CALL_OW 274
33895: PPUSH
33896: LD_VAR 0 3
33900: PPUSH
33901: LD_INT 99999
33903: PPUSH
33904: CALL_OW 277
33908: GO 33883
33910: POP
33911: POP
33912: GO 33867
33914: POP
33915: POP
// end ;
33916: LD_VAR 0 1
33920: RET
// export function hHackSetLevel10 ; var i , j ; begin
33921: LD_INT 0
33923: PPUSH
33924: PPUSH
33925: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33926: LD_ADDR_VAR 0 2
33930: PUSH
33931: LD_INT 21
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PPUSH
33941: CALL_OW 69
33945: PUSH
33946: FOR_IN
33947: IFFALSE 33999
// if IsSelected ( i ) then
33949: LD_VAR 0 2
33953: PPUSH
33954: CALL_OW 306
33958: IFFALSE 33997
// begin for j := 1 to 4 do
33960: LD_ADDR_VAR 0 3
33964: PUSH
33965: DOUBLE
33966: LD_INT 1
33968: DEC
33969: ST_TO_ADDR
33970: LD_INT 4
33972: PUSH
33973: FOR_TO
33974: IFFALSE 33995
// SetSkill ( i , j , 10 ) ;
33976: LD_VAR 0 2
33980: PPUSH
33981: LD_VAR 0 3
33985: PPUSH
33986: LD_INT 10
33988: PPUSH
33989: CALL_OW 237
33993: GO 33973
33995: POP
33996: POP
// end ;
33997: GO 33946
33999: POP
34000: POP
// end ;
34001: LD_VAR 0 1
34005: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34006: LD_INT 0
34008: PPUSH
34009: PPUSH
34010: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34011: LD_ADDR_VAR 0 2
34015: PUSH
34016: LD_INT 22
34018: PUSH
34019: LD_OWVAR 2
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 21
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PPUSH
34042: CALL_OW 69
34046: PUSH
34047: FOR_IN
34048: IFFALSE 34089
// begin for j := 1 to 4 do
34050: LD_ADDR_VAR 0 3
34054: PUSH
34055: DOUBLE
34056: LD_INT 1
34058: DEC
34059: ST_TO_ADDR
34060: LD_INT 4
34062: PUSH
34063: FOR_TO
34064: IFFALSE 34085
// SetSkill ( i , j , 10 ) ;
34066: LD_VAR 0 2
34070: PPUSH
34071: LD_VAR 0 3
34075: PPUSH
34076: LD_INT 10
34078: PPUSH
34079: CALL_OW 237
34083: GO 34063
34085: POP
34086: POP
// end ;
34087: GO 34047
34089: POP
34090: POP
// end ;
34091: LD_VAR 0 1
34095: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34096: LD_INT 0
34098: PPUSH
// uc_side := your_side ;
34099: LD_ADDR_OWVAR 20
34103: PUSH
34104: LD_OWVAR 2
34108: ST_TO_ADDR
// uc_nation := nation ;
34109: LD_ADDR_OWVAR 21
34113: PUSH
34114: LD_VAR 0 1
34118: ST_TO_ADDR
// InitHc ;
34119: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34123: LD_INT 0
34125: PPUSH
34126: LD_VAR 0 2
34130: PPUSH
34131: LD_VAR 0 3
34135: PPUSH
34136: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34140: LD_VAR 0 4
34144: PPUSH
34145: LD_VAR 0 5
34149: PPUSH
34150: CALL_OW 428
34154: PUSH
34155: LD_INT 0
34157: EQUAL
34158: IFFALSE 34182
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34160: CALL_OW 44
34164: PPUSH
34165: LD_VAR 0 4
34169: PPUSH
34170: LD_VAR 0 5
34174: PPUSH
34175: LD_INT 1
34177: PPUSH
34178: CALL_OW 48
// end ;
34182: LD_VAR 0 6
34186: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34187: LD_INT 0
34189: PPUSH
34190: PPUSH
// uc_side := your_side ;
34191: LD_ADDR_OWVAR 20
34195: PUSH
34196: LD_OWVAR 2
34200: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34201: LD_VAR 0 1
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: LD_INT 4
34217: PUSH
34218: LD_INT 5
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: IN
34228: IFFALSE 34240
// uc_nation := nation_american else
34230: LD_ADDR_OWVAR 21
34234: PUSH
34235: LD_INT 1
34237: ST_TO_ADDR
34238: GO 34283
// if chassis in [ 11 , 12 , 13 , 14 ] then
34240: LD_VAR 0 1
34244: PUSH
34245: LD_INT 11
34247: PUSH
34248: LD_INT 12
34250: PUSH
34251: LD_INT 13
34253: PUSH
34254: LD_INT 14
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: IN
34263: IFFALSE 34275
// uc_nation := nation_arabian else
34265: LD_ADDR_OWVAR 21
34269: PUSH
34270: LD_INT 2
34272: ST_TO_ADDR
34273: GO 34283
// uc_nation := nation_russian ;
34275: LD_ADDR_OWVAR 21
34279: PUSH
34280: LD_INT 3
34282: ST_TO_ADDR
// vc_chassis := chassis ;
34283: LD_ADDR_OWVAR 37
34287: PUSH
34288: LD_VAR 0 1
34292: ST_TO_ADDR
// vc_engine := engine ;
34293: LD_ADDR_OWVAR 39
34297: PUSH
34298: LD_VAR 0 2
34302: ST_TO_ADDR
// vc_control := control ;
34303: LD_ADDR_OWVAR 38
34307: PUSH
34308: LD_VAR 0 3
34312: ST_TO_ADDR
// vc_weapon := weapon ;
34313: LD_ADDR_OWVAR 40
34317: PUSH
34318: LD_VAR 0 4
34322: ST_TO_ADDR
// un := CreateVehicle ;
34323: LD_ADDR_VAR 0 8
34327: PUSH
34328: CALL_OW 45
34332: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34333: LD_VAR 0 8
34337: PPUSH
34338: LD_INT 0
34340: PPUSH
34341: LD_INT 5
34343: PPUSH
34344: CALL_OW 12
34348: PPUSH
34349: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34353: LD_VAR 0 8
34357: PPUSH
34358: LD_VAR 0 5
34362: PPUSH
34363: LD_VAR 0 6
34367: PPUSH
34368: LD_INT 1
34370: PPUSH
34371: CALL_OW 48
// end ;
34375: LD_VAR 0 7
34379: RET
// export hInvincible ; every 1 do
34380: GO 34382
34382: DISABLE
// hInvincible := [ ] ;
34383: LD_ADDR_EXP 112
34387: PUSH
34388: EMPTY
34389: ST_TO_ADDR
34390: END
// every 10 do var i ;
34391: GO 34393
34393: DISABLE
34394: LD_INT 0
34396: PPUSH
// begin enable ;
34397: ENABLE
// if not hInvincible then
34398: LD_EXP 112
34402: NOT
34403: IFFALSE 34407
// exit ;
34405: GO 34451
// for i in hInvincible do
34407: LD_ADDR_VAR 0 1
34411: PUSH
34412: LD_EXP 112
34416: PUSH
34417: FOR_IN
34418: IFFALSE 34449
// if GetLives ( i ) < 1000 then
34420: LD_VAR 0 1
34424: PPUSH
34425: CALL_OW 256
34429: PUSH
34430: LD_INT 1000
34432: LESS
34433: IFFALSE 34447
// SetLives ( i , 1000 ) ;
34435: LD_VAR 0 1
34439: PPUSH
34440: LD_INT 1000
34442: PPUSH
34443: CALL_OW 234
34447: GO 34417
34449: POP
34450: POP
// end ;
34451: PPOPN 1
34453: END
// export function hHackInvincible ; var i ; begin
34454: LD_INT 0
34456: PPUSH
34457: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34458: LD_ADDR_VAR 0 2
34462: PUSH
34463: LD_INT 2
34465: PUSH
34466: LD_INT 21
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 21
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: PPUSH
34491: CALL_OW 69
34495: PUSH
34496: FOR_IN
34497: IFFALSE 34558
// if IsSelected ( i ) then
34499: LD_VAR 0 2
34503: PPUSH
34504: CALL_OW 306
34508: IFFALSE 34556
// begin if i in hInvincible then
34510: LD_VAR 0 2
34514: PUSH
34515: LD_EXP 112
34519: IN
34520: IFFALSE 34540
// hInvincible := hInvincible diff i else
34522: LD_ADDR_EXP 112
34526: PUSH
34527: LD_EXP 112
34531: PUSH
34532: LD_VAR 0 2
34536: DIFF
34537: ST_TO_ADDR
34538: GO 34556
// hInvincible := hInvincible union i ;
34540: LD_ADDR_EXP 112
34544: PUSH
34545: LD_EXP 112
34549: PUSH
34550: LD_VAR 0 2
34554: UNION
34555: ST_TO_ADDR
// end ;
34556: GO 34496
34558: POP
34559: POP
// end ;
34560: LD_VAR 0 1
34564: RET
// export function hHackInvisible ; var i , j ; begin
34565: LD_INT 0
34567: PPUSH
34568: PPUSH
34569: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34570: LD_ADDR_VAR 0 2
34574: PUSH
34575: LD_INT 21
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PPUSH
34585: CALL_OW 69
34589: PUSH
34590: FOR_IN
34591: IFFALSE 34615
// if IsSelected ( i ) then
34593: LD_VAR 0 2
34597: PPUSH
34598: CALL_OW 306
34602: IFFALSE 34613
// ComForceInvisible ( i ) ;
34604: LD_VAR 0 2
34608: PPUSH
34609: CALL_OW 496
34613: GO 34590
34615: POP
34616: POP
// end ;
34617: LD_VAR 0 1
34621: RET
// export function hHackChangeYourSide ; begin
34622: LD_INT 0
34624: PPUSH
// if your_side = 8 then
34625: LD_OWVAR 2
34629: PUSH
34630: LD_INT 8
34632: EQUAL
34633: IFFALSE 34645
// your_side := 0 else
34635: LD_ADDR_OWVAR 2
34639: PUSH
34640: LD_INT 0
34642: ST_TO_ADDR
34643: GO 34659
// your_side := your_side + 1 ;
34645: LD_ADDR_OWVAR 2
34649: PUSH
34650: LD_OWVAR 2
34654: PUSH
34655: LD_INT 1
34657: PLUS
34658: ST_TO_ADDR
// end ;
34659: LD_VAR 0 1
34663: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34664: LD_INT 0
34666: PPUSH
34667: PPUSH
34668: PPUSH
// for i in all_units do
34669: LD_ADDR_VAR 0 2
34673: PUSH
34674: LD_OWVAR 3
34678: PUSH
34679: FOR_IN
34680: IFFALSE 34758
// if IsSelected ( i ) then
34682: LD_VAR 0 2
34686: PPUSH
34687: CALL_OW 306
34691: IFFALSE 34756
// begin j := GetSide ( i ) ;
34693: LD_ADDR_VAR 0 3
34697: PUSH
34698: LD_VAR 0 2
34702: PPUSH
34703: CALL_OW 255
34707: ST_TO_ADDR
// if j = 8 then
34708: LD_VAR 0 3
34712: PUSH
34713: LD_INT 8
34715: EQUAL
34716: IFFALSE 34728
// j := 0 else
34718: LD_ADDR_VAR 0 3
34722: PUSH
34723: LD_INT 0
34725: ST_TO_ADDR
34726: GO 34742
// j := j + 1 ;
34728: LD_ADDR_VAR 0 3
34732: PUSH
34733: LD_VAR 0 3
34737: PUSH
34738: LD_INT 1
34740: PLUS
34741: ST_TO_ADDR
// SetSide ( i , j ) ;
34742: LD_VAR 0 2
34746: PPUSH
34747: LD_VAR 0 3
34751: PPUSH
34752: CALL_OW 235
// end ;
34756: GO 34679
34758: POP
34759: POP
// end ;
34760: LD_VAR 0 1
34764: RET
// export function hHackFog ; begin
34765: LD_INT 0
34767: PPUSH
// FogOff ( true ) ;
34768: LD_INT 1
34770: PPUSH
34771: CALL_OW 344
// end ;
34775: LD_VAR 0 1
34779: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34780: LD_INT 0
34782: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34783: LD_VAR 0 1
34787: PPUSH
34788: LD_VAR 0 2
34792: PPUSH
34793: LD_VAR 0 3
34797: PPUSH
34798: LD_INT 1
34800: PPUSH
34801: LD_INT 1
34803: PPUSH
34804: CALL_OW 483
// CenterOnXY ( x , y ) ;
34808: LD_VAR 0 2
34812: PPUSH
34813: LD_VAR 0 3
34817: PPUSH
34818: CALL_OW 84
// end ;
34822: LD_VAR 0 4
34826: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34827: LD_INT 0
34829: PPUSH
34830: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34831: LD_VAR 0 1
34835: NOT
34836: PUSH
34837: LD_VAR 0 2
34841: PPUSH
34842: LD_VAR 0 3
34846: PPUSH
34847: CALL_OW 488
34851: NOT
34852: OR
34853: PUSH
34854: LD_VAR 0 1
34858: PPUSH
34859: CALL_OW 266
34863: PUSH
34864: LD_INT 3
34866: NONEQUAL
34867: PUSH
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 247
34877: PUSH
34878: LD_INT 1
34880: EQUAL
34881: NOT
34882: AND
34883: OR
34884: IFFALSE 34888
// exit ;
34886: GO 35170
// if GetType ( factory ) = unit_human then
34888: LD_VAR 0 1
34892: PPUSH
34893: CALL_OW 247
34897: PUSH
34898: LD_INT 1
34900: EQUAL
34901: IFFALSE 34918
// factory := IsInUnit ( factory ) ;
34903: LD_ADDR_VAR 0 1
34907: PUSH
34908: LD_VAR 0 1
34912: PPUSH
34913: CALL_OW 310
34917: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 266
34927: PUSH
34928: LD_INT 3
34930: NONEQUAL
34931: IFFALSE 34935
// exit ;
34933: GO 35170
// for i := 1 to Count ( factoryWaypoints ) do
34935: LD_ADDR_VAR 0 5
34939: PUSH
34940: DOUBLE
34941: LD_INT 1
34943: DEC
34944: ST_TO_ADDR
34945: LD_EXP 113
34949: PPUSH
34950: CALL 38389 0 1
34954: PUSH
34955: FOR_TO
34956: IFFALSE 35118
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34958: LD_VAR 0 2
34962: PPUSH
34963: LD_VAR 0 3
34967: PPUSH
34968: CALL_OW 428
34972: PUSH
34973: LD_EXP 113
34977: PUSH
34978: LD_VAR 0 5
34982: ARRAY
34983: PUSH
34984: LD_INT 2
34986: ARRAY
34987: EQUAL
34988: IFFALSE 35020
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34990: LD_ADDR_EXP 113
34994: PUSH
34995: LD_EXP 113
34999: PPUSH
35000: LD_VAR 0 5
35004: PPUSH
35005: CALL_OW 3
35009: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35010: CALL 35175 0 0
// exit ;
35014: POP
35015: POP
35016: GO 35170
// end else
35018: GO 35116
// if factory = factoryWaypoints [ i ] [ 2 ] then
35020: LD_VAR 0 1
35024: PUSH
35025: LD_EXP 113
35029: PUSH
35030: LD_VAR 0 5
35034: ARRAY
35035: PUSH
35036: LD_INT 2
35038: ARRAY
35039: EQUAL
35040: IFFALSE 35116
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35042: LD_ADDR_EXP 113
35046: PUSH
35047: LD_EXP 113
35051: PPUSH
35052: LD_VAR 0 5
35056: PPUSH
35057: CALL_OW 3
35061: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35062: LD_ADDR_EXP 113
35066: PUSH
35067: LD_EXP 113
35071: PPUSH
35072: LD_VAR 0 1
35076: PPUSH
35077: CALL_OW 255
35081: PUSH
35082: LD_VAR 0 1
35086: PUSH
35087: LD_VAR 0 2
35091: PUSH
35092: LD_VAR 0 3
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: PPUSH
35103: CALL 73998 0 2
35107: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35108: CALL 35175 0 0
// exit ;
35112: POP
35113: POP
35114: GO 35170
// end ; end ;
35116: GO 34955
35118: POP
35119: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35120: LD_ADDR_EXP 113
35124: PUSH
35125: LD_EXP 113
35129: PPUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: CALL_OW 255
35139: PUSH
35140: LD_VAR 0 1
35144: PUSH
35145: LD_VAR 0 2
35149: PUSH
35150: LD_VAR 0 3
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: PPUSH
35161: CALL 73998 0 2
35165: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35166: CALL 35175 0 0
// end ;
35170: LD_VAR 0 4
35174: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35175: LD_INT 0
35177: PPUSH
35178: PPUSH
35179: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35180: LD_STRING resetFactoryWaypoint();
35182: PPUSH
35183: CALL_OW 559
// if factoryWaypoints then
35187: LD_EXP 113
35191: IFFALSE 35312
// begin list := factoryWaypoints ;
35193: LD_ADDR_VAR 0 3
35197: PUSH
35198: LD_EXP 113
35202: ST_TO_ADDR
// for i := 1 to list do
35203: LD_ADDR_VAR 0 2
35207: PUSH
35208: DOUBLE
35209: LD_INT 1
35211: DEC
35212: ST_TO_ADDR
35213: LD_VAR 0 3
35217: PUSH
35218: FOR_TO
35219: IFFALSE 35310
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35221: LD_STRING setFactoryWaypointXY(
35223: PUSH
35224: LD_VAR 0 3
35228: PUSH
35229: LD_VAR 0 2
35233: ARRAY
35234: PUSH
35235: LD_INT 1
35237: ARRAY
35238: STR
35239: PUSH
35240: LD_STRING ,
35242: STR
35243: PUSH
35244: LD_VAR 0 3
35248: PUSH
35249: LD_VAR 0 2
35253: ARRAY
35254: PUSH
35255: LD_INT 2
35257: ARRAY
35258: STR
35259: PUSH
35260: LD_STRING ,
35262: STR
35263: PUSH
35264: LD_VAR 0 3
35268: PUSH
35269: LD_VAR 0 2
35273: ARRAY
35274: PUSH
35275: LD_INT 3
35277: ARRAY
35278: STR
35279: PUSH
35280: LD_STRING ,
35282: STR
35283: PUSH
35284: LD_VAR 0 3
35288: PUSH
35289: LD_VAR 0 2
35293: ARRAY
35294: PUSH
35295: LD_INT 4
35297: ARRAY
35298: STR
35299: PUSH
35300: LD_STRING )
35302: STR
35303: PPUSH
35304: CALL_OW 559
35308: GO 35218
35310: POP
35311: POP
// end ; end ;
35312: LD_VAR 0 1
35316: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35317: LD_INT 0
35319: PPUSH
// if HexInfo ( x , y ) = warehouse then
35320: LD_VAR 0 2
35324: PPUSH
35325: LD_VAR 0 3
35329: PPUSH
35330: CALL_OW 428
35334: PUSH
35335: LD_VAR 0 1
35339: EQUAL
35340: IFFALSE 35367
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35342: LD_ADDR_EXP 114
35346: PUSH
35347: LD_EXP 114
35351: PPUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: LD_INT 0
35359: PPUSH
35360: CALL_OW 1
35364: ST_TO_ADDR
35365: GO 35418
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35367: LD_ADDR_EXP 114
35371: PUSH
35372: LD_EXP 114
35376: PPUSH
35377: LD_VAR 0 1
35381: PPUSH
35382: LD_VAR 0 1
35386: PPUSH
35387: CALL_OW 255
35391: PUSH
35392: LD_VAR 0 1
35396: PUSH
35397: LD_VAR 0 2
35401: PUSH
35402: LD_VAR 0 3
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: PPUSH
35413: CALL_OW 1
35417: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35418: CALL 35427 0 0
// end ;
35422: LD_VAR 0 4
35426: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35427: LD_INT 0
35429: PPUSH
35430: PPUSH
35431: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35432: LD_STRING resetWarehouseGatheringPoints();
35434: PPUSH
35435: CALL_OW 559
// if warehouseGatheringPoints then
35439: LD_EXP 114
35443: IFFALSE 35569
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35445: LD_ADDR_VAR 0 3
35449: PUSH
35450: LD_EXP 114
35454: PPUSH
35455: CALL 77760 0 1
35459: ST_TO_ADDR
// for i := 1 to list do
35460: LD_ADDR_VAR 0 2
35464: PUSH
35465: DOUBLE
35466: LD_INT 1
35468: DEC
35469: ST_TO_ADDR
35470: LD_VAR 0 3
35474: PUSH
35475: FOR_TO
35476: IFFALSE 35567
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35478: LD_STRING setWarehouseGatheringPointXY(
35480: PUSH
35481: LD_VAR 0 3
35485: PUSH
35486: LD_VAR 0 2
35490: ARRAY
35491: PUSH
35492: LD_INT 1
35494: ARRAY
35495: STR
35496: PUSH
35497: LD_STRING ,
35499: STR
35500: PUSH
35501: LD_VAR 0 3
35505: PUSH
35506: LD_VAR 0 2
35510: ARRAY
35511: PUSH
35512: LD_INT 2
35514: ARRAY
35515: STR
35516: PUSH
35517: LD_STRING ,
35519: STR
35520: PUSH
35521: LD_VAR 0 3
35525: PUSH
35526: LD_VAR 0 2
35530: ARRAY
35531: PUSH
35532: LD_INT 3
35534: ARRAY
35535: STR
35536: PUSH
35537: LD_STRING ,
35539: STR
35540: PUSH
35541: LD_VAR 0 3
35545: PUSH
35546: LD_VAR 0 2
35550: ARRAY
35551: PUSH
35552: LD_INT 4
35554: ARRAY
35555: STR
35556: PUSH
35557: LD_STRING )
35559: STR
35560: PPUSH
35561: CALL_OW 559
35565: GO 35475
35567: POP
35568: POP
// end ; end ;
35569: LD_VAR 0 1
35573: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35574: LD_EXP 114
35578: IFFALSE 36263
35580: GO 35582
35582: DISABLE
35583: LD_INT 0
35585: PPUSH
35586: PPUSH
35587: PPUSH
35588: PPUSH
35589: PPUSH
35590: PPUSH
35591: PPUSH
35592: PPUSH
35593: PPUSH
// begin enable ;
35594: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35595: LD_ADDR_VAR 0 3
35599: PUSH
35600: LD_EXP 114
35604: PPUSH
35605: CALL 77760 0 1
35609: ST_TO_ADDR
// if not list then
35610: LD_VAR 0 3
35614: NOT
35615: IFFALSE 35619
// exit ;
35617: GO 36263
// for i := 1 to list do
35619: LD_ADDR_VAR 0 1
35623: PUSH
35624: DOUBLE
35625: LD_INT 1
35627: DEC
35628: ST_TO_ADDR
35629: LD_VAR 0 3
35633: PUSH
35634: FOR_TO
35635: IFFALSE 36261
// begin depot := list [ i ] [ 2 ] ;
35637: LD_ADDR_VAR 0 8
35641: PUSH
35642: LD_VAR 0 3
35646: PUSH
35647: LD_VAR 0 1
35651: ARRAY
35652: PUSH
35653: LD_INT 2
35655: ARRAY
35656: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35657: LD_ADDR_VAR 0 5
35661: PUSH
35662: LD_VAR 0 3
35666: PUSH
35667: LD_VAR 0 1
35671: ARRAY
35672: PUSH
35673: LD_INT 1
35675: ARRAY
35676: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35677: LD_VAR 0 8
35681: PPUSH
35682: CALL_OW 301
35686: PUSH
35687: LD_VAR 0 5
35691: PUSH
35692: LD_VAR 0 8
35696: PPUSH
35697: CALL_OW 255
35701: NONEQUAL
35702: OR
35703: IFFALSE 35732
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35705: LD_ADDR_EXP 114
35709: PUSH
35710: LD_EXP 114
35714: PPUSH
35715: LD_VAR 0 8
35719: PPUSH
35720: LD_INT 0
35722: PPUSH
35723: CALL_OW 1
35727: ST_TO_ADDR
// exit ;
35728: POP
35729: POP
35730: GO 36263
// end ; x := list [ i ] [ 3 ] ;
35732: LD_ADDR_VAR 0 6
35736: PUSH
35737: LD_VAR 0 3
35741: PUSH
35742: LD_VAR 0 1
35746: ARRAY
35747: PUSH
35748: LD_INT 3
35750: ARRAY
35751: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35752: LD_ADDR_VAR 0 7
35756: PUSH
35757: LD_VAR 0 3
35761: PUSH
35762: LD_VAR 0 1
35766: ARRAY
35767: PUSH
35768: LD_INT 4
35770: ARRAY
35771: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35772: LD_ADDR_VAR 0 9
35776: PUSH
35777: LD_VAR 0 6
35781: PPUSH
35782: LD_VAR 0 7
35786: PPUSH
35787: LD_INT 16
35789: PPUSH
35790: CALL 76344 0 3
35794: ST_TO_ADDR
// if not cratesNearbyPoint then
35795: LD_VAR 0 9
35799: NOT
35800: IFFALSE 35806
// exit ;
35802: POP
35803: POP
35804: GO 36263
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35806: LD_ADDR_VAR 0 4
35810: PUSH
35811: LD_INT 22
35813: PUSH
35814: LD_VAR 0 5
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 3
35825: PUSH
35826: LD_INT 60
35828: PUSH
35829: EMPTY
35830: LIST
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 91
35838: PUSH
35839: LD_VAR 0 8
35843: PUSH
35844: LD_INT 6
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: LD_INT 25
35857: PUSH
35858: LD_INT 2
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 25
35867: PUSH
35868: LD_INT 16
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: LIST
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: PPUSH
35886: CALL_OW 69
35890: PUSH
35891: LD_VAR 0 8
35895: PPUSH
35896: CALL_OW 313
35900: PPUSH
35901: LD_INT 3
35903: PUSH
35904: LD_INT 60
35906: PUSH
35907: EMPTY
35908: LIST
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: LD_INT 25
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 25
35929: PUSH
35930: LD_INT 16
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PPUSH
35946: CALL_OW 72
35950: UNION
35951: ST_TO_ADDR
// if tmp then
35952: LD_VAR 0 4
35956: IFFALSE 36036
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35958: LD_ADDR_VAR 0 4
35962: PUSH
35963: LD_VAR 0 4
35967: PPUSH
35968: LD_INT 3
35970: PPUSH
35971: CALL 74313 0 2
35975: ST_TO_ADDR
// for j in tmp do
35976: LD_ADDR_VAR 0 2
35980: PUSH
35981: LD_VAR 0 4
35985: PUSH
35986: FOR_IN
35987: IFFALSE 36030
// begin if IsInUnit ( j ) then
35989: LD_VAR 0 2
35993: PPUSH
35994: CALL_OW 310
35998: IFFALSE 36009
// ComExit ( j ) ;
36000: LD_VAR 0 2
36004: PPUSH
36005: CALL 74396 0 1
// AddComCollect ( j , x , y ) ;
36009: LD_VAR 0 2
36013: PPUSH
36014: LD_VAR 0 6
36018: PPUSH
36019: LD_VAR 0 7
36023: PPUSH
36024: CALL_OW 177
// end ;
36028: GO 35986
36030: POP
36031: POP
// exit ;
36032: POP
36033: POP
36034: GO 36263
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36036: LD_ADDR_VAR 0 4
36040: PUSH
36041: LD_INT 22
36043: PUSH
36044: LD_VAR 0 5
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 91
36055: PUSH
36056: LD_VAR 0 8
36060: PUSH
36061: LD_INT 8
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: LD_INT 34
36074: PUSH
36075: LD_INT 12
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 34
36084: PUSH
36085: LD_INT 51
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 34
36094: PUSH
36095: LD_INT 32
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 34
36104: PUSH
36105: LD_INT 89
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: PPUSH
36124: CALL_OW 69
36128: ST_TO_ADDR
// if tmp then
36129: LD_VAR 0 4
36133: IFFALSE 36259
// begin for j in tmp do
36135: LD_ADDR_VAR 0 2
36139: PUSH
36140: LD_VAR 0 4
36144: PUSH
36145: FOR_IN
36146: IFFALSE 36257
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36148: LD_VAR 0 2
36152: PPUSH
36153: CALL_OW 262
36157: PUSH
36158: LD_INT 3
36160: EQUAL
36161: PUSH
36162: LD_VAR 0 2
36166: PPUSH
36167: CALL_OW 261
36171: PUSH
36172: LD_INT 20
36174: GREATER
36175: OR
36176: PUSH
36177: LD_VAR 0 2
36181: PPUSH
36182: CALL_OW 314
36186: NOT
36187: AND
36188: PUSH
36189: LD_VAR 0 2
36193: PPUSH
36194: CALL_OW 263
36198: PUSH
36199: LD_INT 1
36201: NONEQUAL
36202: PUSH
36203: LD_VAR 0 2
36207: PPUSH
36208: CALL_OW 311
36212: OR
36213: AND
36214: IFFALSE 36255
// begin ComCollect ( j , x , y ) ;
36216: LD_VAR 0 2
36220: PPUSH
36221: LD_VAR 0 6
36225: PPUSH
36226: LD_VAR 0 7
36230: PPUSH
36231: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36235: LD_VAR 0 2
36239: PPUSH
36240: LD_VAR 0 8
36244: PPUSH
36245: CALL_OW 172
// exit ;
36249: POP
36250: POP
36251: POP
36252: POP
36253: GO 36263
// end ;
36255: GO 36145
36257: POP
36258: POP
// end ; end ;
36259: GO 35634
36261: POP
36262: POP
// end ; end_of_file end_of_file
36263: PPOPN 9
36265: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36266: LD_INT 0
36268: PPUSH
36269: PPUSH
// if exist_mode then
36270: LD_VAR 0 2
36274: IFFALSE 36320
// begin unit := CreateCharacter ( prefix & ident ) ;
36276: LD_ADDR_VAR 0 5
36280: PUSH
36281: LD_VAR 0 3
36285: PUSH
36286: LD_VAR 0 1
36290: STR
36291: PPUSH
36292: CALL_OW 34
36296: ST_TO_ADDR
// if unit then
36297: LD_VAR 0 5
36301: IFFALSE 36318
// DeleteCharacters ( prefix & ident ) ;
36303: LD_VAR 0 3
36307: PUSH
36308: LD_VAR 0 1
36312: STR
36313: PPUSH
36314: CALL_OW 40
// end else
36318: GO 36335
// unit := NewCharacter ( ident ) ;
36320: LD_ADDR_VAR 0 5
36324: PUSH
36325: LD_VAR 0 1
36329: PPUSH
36330: CALL_OW 25
36334: ST_TO_ADDR
// result := unit ;
36335: LD_ADDR_VAR 0 4
36339: PUSH
36340: LD_VAR 0 5
36344: ST_TO_ADDR
// end ;
36345: LD_VAR 0 4
36349: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36350: LD_INT 0
36352: PPUSH
36353: PPUSH
// if not side or not nation then
36354: LD_VAR 0 1
36358: NOT
36359: PUSH
36360: LD_VAR 0 2
36364: NOT
36365: OR
36366: IFFALSE 36370
// exit ;
36368: GO 37138
// case nation of nation_american :
36370: LD_VAR 0 2
36374: PUSH
36375: LD_INT 1
36377: DOUBLE
36378: EQUAL
36379: IFTRUE 36383
36381: GO 36597
36383: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36384: LD_ADDR_VAR 0 4
36388: PUSH
36389: LD_INT 35
36391: PUSH
36392: LD_INT 45
36394: PUSH
36395: LD_INT 46
36397: PUSH
36398: LD_INT 47
36400: PUSH
36401: LD_INT 82
36403: PUSH
36404: LD_INT 83
36406: PUSH
36407: LD_INT 84
36409: PUSH
36410: LD_INT 85
36412: PUSH
36413: LD_INT 86
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 6
36424: PUSH
36425: LD_INT 15
36427: PUSH
36428: LD_INT 16
36430: PUSH
36431: LD_INT 7
36433: PUSH
36434: LD_INT 12
36436: PUSH
36437: LD_INT 13
36439: PUSH
36440: LD_INT 10
36442: PUSH
36443: LD_INT 14
36445: PUSH
36446: LD_INT 20
36448: PUSH
36449: LD_INT 21
36451: PUSH
36452: LD_INT 22
36454: PUSH
36455: LD_INT 25
36457: PUSH
36458: LD_INT 32
36460: PUSH
36461: LD_INT 27
36463: PUSH
36464: LD_INT 36
36466: PUSH
36467: LD_INT 69
36469: PUSH
36470: LD_INT 39
36472: PUSH
36473: LD_INT 34
36475: PUSH
36476: LD_INT 40
36478: PUSH
36479: LD_INT 48
36481: PUSH
36482: LD_INT 49
36484: PUSH
36485: LD_INT 50
36487: PUSH
36488: LD_INT 51
36490: PUSH
36491: LD_INT 52
36493: PUSH
36494: LD_INT 53
36496: PUSH
36497: LD_INT 54
36499: PUSH
36500: LD_INT 55
36502: PUSH
36503: LD_INT 56
36505: PUSH
36506: LD_INT 57
36508: PUSH
36509: LD_INT 58
36511: PUSH
36512: LD_INT 59
36514: PUSH
36515: LD_INT 60
36517: PUSH
36518: LD_INT 61
36520: PUSH
36521: LD_INT 62
36523: PUSH
36524: LD_INT 80
36526: PUSH
36527: LD_INT 82
36529: PUSH
36530: LD_INT 83
36532: PUSH
36533: LD_INT 84
36535: PUSH
36536: LD_INT 85
36538: PUSH
36539: LD_INT 86
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: ST_TO_ADDR
36595: GO 37062
36597: LD_INT 2
36599: DOUBLE
36600: EQUAL
36601: IFTRUE 36605
36603: GO 36831
36605: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36606: LD_ADDR_VAR 0 4
36610: PUSH
36611: LD_INT 35
36613: PUSH
36614: LD_INT 45
36616: PUSH
36617: LD_INT 46
36619: PUSH
36620: LD_INT 47
36622: PUSH
36623: LD_INT 82
36625: PUSH
36626: LD_INT 83
36628: PUSH
36629: LD_INT 84
36631: PUSH
36632: LD_INT 85
36634: PUSH
36635: LD_INT 87
36637: PUSH
36638: LD_INT 70
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 11
36646: PUSH
36647: LD_INT 3
36649: PUSH
36650: LD_INT 4
36652: PUSH
36653: LD_INT 5
36655: PUSH
36656: LD_INT 6
36658: PUSH
36659: LD_INT 15
36661: PUSH
36662: LD_INT 18
36664: PUSH
36665: LD_INT 7
36667: PUSH
36668: LD_INT 17
36670: PUSH
36671: LD_INT 8
36673: PUSH
36674: LD_INT 20
36676: PUSH
36677: LD_INT 21
36679: PUSH
36680: LD_INT 22
36682: PUSH
36683: LD_INT 72
36685: PUSH
36686: LD_INT 26
36688: PUSH
36689: LD_INT 69
36691: PUSH
36692: LD_INT 39
36694: PUSH
36695: LD_INT 40
36697: PUSH
36698: LD_INT 41
36700: PUSH
36701: LD_INT 42
36703: PUSH
36704: LD_INT 43
36706: PUSH
36707: LD_INT 48
36709: PUSH
36710: LD_INT 49
36712: PUSH
36713: LD_INT 50
36715: PUSH
36716: LD_INT 51
36718: PUSH
36719: LD_INT 52
36721: PUSH
36722: LD_INT 53
36724: PUSH
36725: LD_INT 54
36727: PUSH
36728: LD_INT 55
36730: PUSH
36731: LD_INT 56
36733: PUSH
36734: LD_INT 60
36736: PUSH
36737: LD_INT 61
36739: PUSH
36740: LD_INT 62
36742: PUSH
36743: LD_INT 66
36745: PUSH
36746: LD_INT 67
36748: PUSH
36749: LD_INT 68
36751: PUSH
36752: LD_INT 81
36754: PUSH
36755: LD_INT 82
36757: PUSH
36758: LD_INT 83
36760: PUSH
36761: LD_INT 84
36763: PUSH
36764: LD_INT 85
36766: PUSH
36767: LD_INT 87
36769: PUSH
36770: LD_INT 88
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: ST_TO_ADDR
36829: GO 37062
36831: LD_INT 3
36833: DOUBLE
36834: EQUAL
36835: IFTRUE 36839
36837: GO 37061
36839: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36840: LD_ADDR_VAR 0 4
36844: PUSH
36845: LD_INT 46
36847: PUSH
36848: LD_INT 47
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: LD_INT 82
36859: PUSH
36860: LD_INT 83
36862: PUSH
36863: LD_INT 84
36865: PUSH
36866: LD_INT 85
36868: PUSH
36869: LD_INT 86
36871: PUSH
36872: LD_INT 11
36874: PUSH
36875: LD_INT 9
36877: PUSH
36878: LD_INT 20
36880: PUSH
36881: LD_INT 19
36883: PUSH
36884: LD_INT 21
36886: PUSH
36887: LD_INT 24
36889: PUSH
36890: LD_INT 22
36892: PUSH
36893: LD_INT 25
36895: PUSH
36896: LD_INT 28
36898: PUSH
36899: LD_INT 29
36901: PUSH
36902: LD_INT 30
36904: PUSH
36905: LD_INT 31
36907: PUSH
36908: LD_INT 37
36910: PUSH
36911: LD_INT 38
36913: PUSH
36914: LD_INT 32
36916: PUSH
36917: LD_INT 27
36919: PUSH
36920: LD_INT 33
36922: PUSH
36923: LD_INT 69
36925: PUSH
36926: LD_INT 39
36928: PUSH
36929: LD_INT 34
36931: PUSH
36932: LD_INT 40
36934: PUSH
36935: LD_INT 71
36937: PUSH
36938: LD_INT 23
36940: PUSH
36941: LD_INT 44
36943: PUSH
36944: LD_INT 48
36946: PUSH
36947: LD_INT 49
36949: PUSH
36950: LD_INT 50
36952: PUSH
36953: LD_INT 51
36955: PUSH
36956: LD_INT 52
36958: PUSH
36959: LD_INT 53
36961: PUSH
36962: LD_INT 54
36964: PUSH
36965: LD_INT 55
36967: PUSH
36968: LD_INT 56
36970: PUSH
36971: LD_INT 57
36973: PUSH
36974: LD_INT 58
36976: PUSH
36977: LD_INT 59
36979: PUSH
36980: LD_INT 63
36982: PUSH
36983: LD_INT 64
36985: PUSH
36986: LD_INT 65
36988: PUSH
36989: LD_INT 82
36991: PUSH
36992: LD_INT 83
36994: PUSH
36995: LD_INT 84
36997: PUSH
36998: LD_INT 85
37000: PUSH
37001: LD_INT 86
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: ST_TO_ADDR
37059: GO 37062
37061: POP
// if state > - 1 and state < 3 then
37062: LD_VAR 0 3
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: GREATER
37071: PUSH
37072: LD_VAR 0 3
37076: PUSH
37077: LD_INT 3
37079: LESS
37080: AND
37081: IFFALSE 37138
// for i in result do
37083: LD_ADDR_VAR 0 5
37087: PUSH
37088: LD_VAR 0 4
37092: PUSH
37093: FOR_IN
37094: IFFALSE 37136
// if GetTech ( i , side ) <> state then
37096: LD_VAR 0 5
37100: PPUSH
37101: LD_VAR 0 1
37105: PPUSH
37106: CALL_OW 321
37110: PUSH
37111: LD_VAR 0 3
37115: NONEQUAL
37116: IFFALSE 37134
// result := result diff i ;
37118: LD_ADDR_VAR 0 4
37122: PUSH
37123: LD_VAR 0 4
37127: PUSH
37128: LD_VAR 0 5
37132: DIFF
37133: ST_TO_ADDR
37134: GO 37093
37136: POP
37137: POP
// end ;
37138: LD_VAR 0 4
37142: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37143: LD_INT 0
37145: PPUSH
37146: PPUSH
37147: PPUSH
// result := true ;
37148: LD_ADDR_VAR 0 3
37152: PUSH
37153: LD_INT 1
37155: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37156: LD_ADDR_VAR 0 5
37160: PUSH
37161: LD_VAR 0 2
37165: PPUSH
37166: CALL_OW 480
37170: ST_TO_ADDR
// if not tmp then
37171: LD_VAR 0 5
37175: NOT
37176: IFFALSE 37180
// exit ;
37178: GO 37229
// for i in tmp do
37180: LD_ADDR_VAR 0 4
37184: PUSH
37185: LD_VAR 0 5
37189: PUSH
37190: FOR_IN
37191: IFFALSE 37227
// if GetTech ( i , side ) <> state_researched then
37193: LD_VAR 0 4
37197: PPUSH
37198: LD_VAR 0 1
37202: PPUSH
37203: CALL_OW 321
37207: PUSH
37208: LD_INT 2
37210: NONEQUAL
37211: IFFALSE 37225
// begin result := false ;
37213: LD_ADDR_VAR 0 3
37217: PUSH
37218: LD_INT 0
37220: ST_TO_ADDR
// exit ;
37221: POP
37222: POP
37223: GO 37229
// end ;
37225: GO 37190
37227: POP
37228: POP
// end ;
37229: LD_VAR 0 3
37233: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37234: LD_INT 0
37236: PPUSH
37237: PPUSH
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37249: LD_VAR 0 1
37253: NOT
37254: PUSH
37255: LD_VAR 0 1
37259: PPUSH
37260: CALL_OW 257
37264: PUSH
37265: LD_INT 9
37267: NONEQUAL
37268: OR
37269: IFFALSE 37273
// exit ;
37271: GO 37846
// side := GetSide ( unit ) ;
37273: LD_ADDR_VAR 0 9
37277: PUSH
37278: LD_VAR 0 1
37282: PPUSH
37283: CALL_OW 255
37287: ST_TO_ADDR
// tech_space := tech_spacanom ;
37288: LD_ADDR_VAR 0 12
37292: PUSH
37293: LD_INT 29
37295: ST_TO_ADDR
// tech_time := tech_taurad ;
37296: LD_ADDR_VAR 0 13
37300: PUSH
37301: LD_INT 28
37303: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37304: LD_ADDR_VAR 0 11
37308: PUSH
37309: LD_VAR 0 1
37313: PPUSH
37314: CALL_OW 310
37318: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37319: LD_VAR 0 11
37323: PPUSH
37324: CALL_OW 247
37328: PUSH
37329: LD_INT 2
37331: EQUAL
37332: IFFALSE 37336
// exit ;
37334: GO 37846
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37336: LD_ADDR_VAR 0 8
37340: PUSH
37341: LD_INT 81
37343: PUSH
37344: LD_VAR 0 9
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 3
37355: PUSH
37356: LD_INT 21
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PPUSH
37374: CALL_OW 69
37378: ST_TO_ADDR
// if not tmp then
37379: LD_VAR 0 8
37383: NOT
37384: IFFALSE 37388
// exit ;
37386: GO 37846
// if in_unit then
37388: LD_VAR 0 11
37392: IFFALSE 37416
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37394: LD_ADDR_VAR 0 10
37398: PUSH
37399: LD_VAR 0 8
37403: PPUSH
37404: LD_VAR 0 11
37408: PPUSH
37409: CALL_OW 74
37413: ST_TO_ADDR
37414: GO 37436
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37416: LD_ADDR_VAR 0 10
37420: PUSH
37421: LD_VAR 0 8
37425: PPUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: CALL_OW 74
37435: ST_TO_ADDR
// if not enemy then
37436: LD_VAR 0 10
37440: NOT
37441: IFFALSE 37445
// exit ;
37443: GO 37846
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37445: LD_VAR 0 11
37449: PUSH
37450: LD_VAR 0 11
37454: PPUSH
37455: LD_VAR 0 10
37459: PPUSH
37460: CALL_OW 296
37464: PUSH
37465: LD_INT 13
37467: GREATER
37468: AND
37469: PUSH
37470: LD_VAR 0 1
37474: PPUSH
37475: LD_VAR 0 10
37479: PPUSH
37480: CALL_OW 296
37484: PUSH
37485: LD_INT 12
37487: GREATER
37488: OR
37489: IFFALSE 37493
// exit ;
37491: GO 37846
// missile := [ 1 ] ;
37493: LD_ADDR_VAR 0 14
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37504: LD_VAR 0 9
37508: PPUSH
37509: LD_VAR 0 12
37513: PPUSH
37514: CALL_OW 325
37518: IFFALSE 37547
// missile := Replace ( missile , missile + 1 , 2 ) ;
37520: LD_ADDR_VAR 0 14
37524: PUSH
37525: LD_VAR 0 14
37529: PPUSH
37530: LD_VAR 0 14
37534: PUSH
37535: LD_INT 1
37537: PLUS
37538: PPUSH
37539: LD_INT 2
37541: PPUSH
37542: CALL_OW 1
37546: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37547: LD_VAR 0 9
37551: PPUSH
37552: LD_VAR 0 13
37556: PPUSH
37557: CALL_OW 325
37561: PUSH
37562: LD_VAR 0 10
37566: PPUSH
37567: CALL_OW 255
37571: PPUSH
37572: LD_VAR 0 13
37576: PPUSH
37577: CALL_OW 325
37581: NOT
37582: AND
37583: IFFALSE 37612
// missile := Replace ( missile , missile + 1 , 3 ) ;
37585: LD_ADDR_VAR 0 14
37589: PUSH
37590: LD_VAR 0 14
37594: PPUSH
37595: LD_VAR 0 14
37599: PUSH
37600: LD_INT 1
37602: PLUS
37603: PPUSH
37604: LD_INT 3
37606: PPUSH
37607: CALL_OW 1
37611: ST_TO_ADDR
// if missile < 2 then
37612: LD_VAR 0 14
37616: PUSH
37617: LD_INT 2
37619: LESS
37620: IFFALSE 37624
// exit ;
37622: GO 37846
// x := GetX ( enemy ) ;
37624: LD_ADDR_VAR 0 4
37628: PUSH
37629: LD_VAR 0 10
37633: PPUSH
37634: CALL_OW 250
37638: ST_TO_ADDR
// y := GetY ( enemy ) ;
37639: LD_ADDR_VAR 0 5
37643: PUSH
37644: LD_VAR 0 10
37648: PPUSH
37649: CALL_OW 251
37653: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37654: LD_ADDR_VAR 0 6
37658: PUSH
37659: LD_VAR 0 4
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PPUSH
37668: LD_INT 1
37670: PPUSH
37671: CALL_OW 12
37675: PLUS
37676: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37677: LD_ADDR_VAR 0 7
37681: PUSH
37682: LD_VAR 0 5
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PPUSH
37691: LD_INT 1
37693: PPUSH
37694: CALL_OW 12
37698: PLUS
37699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37700: LD_VAR 0 6
37704: PPUSH
37705: LD_VAR 0 7
37709: PPUSH
37710: CALL_OW 488
37714: NOT
37715: IFFALSE 37737
// begin _x := x ;
37717: LD_ADDR_VAR 0 6
37721: PUSH
37722: LD_VAR 0 4
37726: ST_TO_ADDR
// _y := y ;
37727: LD_ADDR_VAR 0 7
37731: PUSH
37732: LD_VAR 0 5
37736: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_INT 1
37744: PPUSH
37745: LD_VAR 0 14
37749: PPUSH
37750: CALL_OW 12
37754: ST_TO_ADDR
// case i of 1 :
37755: LD_VAR 0 3
37759: PUSH
37760: LD_INT 1
37762: DOUBLE
37763: EQUAL
37764: IFTRUE 37768
37766: GO 37785
37768: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37769: LD_VAR 0 1
37773: PPUSH
37774: LD_VAR 0 10
37778: PPUSH
37779: CALL_OW 115
37783: GO 37846
37785: LD_INT 2
37787: DOUBLE
37788: EQUAL
37789: IFTRUE 37793
37791: GO 37815
37793: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37794: LD_VAR 0 1
37798: PPUSH
37799: LD_VAR 0 6
37803: PPUSH
37804: LD_VAR 0 7
37808: PPUSH
37809: CALL_OW 153
37813: GO 37846
37815: LD_INT 3
37817: DOUBLE
37818: EQUAL
37819: IFTRUE 37823
37821: GO 37845
37823: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37824: LD_VAR 0 1
37828: PPUSH
37829: LD_VAR 0 6
37833: PPUSH
37834: LD_VAR 0 7
37838: PPUSH
37839: CALL_OW 154
37843: GO 37846
37845: POP
// end ;
37846: LD_VAR 0 2
37850: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37851: LD_INT 0
37853: PPUSH
37854: PPUSH
37855: PPUSH
37856: PPUSH
37857: PPUSH
37858: PPUSH
// if not unit or not building then
37859: LD_VAR 0 1
37863: NOT
37864: PUSH
37865: LD_VAR 0 2
37869: NOT
37870: OR
37871: IFFALSE 37875
// exit ;
37873: GO 38033
// x := GetX ( building ) ;
37875: LD_ADDR_VAR 0 5
37879: PUSH
37880: LD_VAR 0 2
37884: PPUSH
37885: CALL_OW 250
37889: ST_TO_ADDR
// y := GetY ( building ) ;
37890: LD_ADDR_VAR 0 6
37894: PUSH
37895: LD_VAR 0 2
37899: PPUSH
37900: CALL_OW 251
37904: ST_TO_ADDR
// for i = 0 to 5 do
37905: LD_ADDR_VAR 0 4
37909: PUSH
37910: DOUBLE
37911: LD_INT 0
37913: DEC
37914: ST_TO_ADDR
37915: LD_INT 5
37917: PUSH
37918: FOR_TO
37919: IFFALSE 38031
// begin _x := ShiftX ( x , i , 3 ) ;
37921: LD_ADDR_VAR 0 7
37925: PUSH
37926: LD_VAR 0 5
37930: PPUSH
37931: LD_VAR 0 4
37935: PPUSH
37936: LD_INT 3
37938: PPUSH
37939: CALL_OW 272
37943: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37944: LD_ADDR_VAR 0 8
37948: PUSH
37949: LD_VAR 0 6
37953: PPUSH
37954: LD_VAR 0 4
37958: PPUSH
37959: LD_INT 3
37961: PPUSH
37962: CALL_OW 273
37966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37967: LD_VAR 0 7
37971: PPUSH
37972: LD_VAR 0 8
37976: PPUSH
37977: CALL_OW 488
37981: NOT
37982: IFFALSE 37986
// continue ;
37984: GO 37918
// if HexInfo ( _x , _y ) = 0 then
37986: LD_VAR 0 7
37990: PPUSH
37991: LD_VAR 0 8
37995: PPUSH
37996: CALL_OW 428
38000: PUSH
38001: LD_INT 0
38003: EQUAL
38004: IFFALSE 38029
// begin ComMoveXY ( unit , _x , _y ) ;
38006: LD_VAR 0 1
38010: PPUSH
38011: LD_VAR 0 7
38015: PPUSH
38016: LD_VAR 0 8
38020: PPUSH
38021: CALL_OW 111
// exit ;
38025: POP
38026: POP
38027: GO 38033
// end ; end ;
38029: GO 37918
38031: POP
38032: POP
// end ;
38033: LD_VAR 0 3
38037: RET
// export function ScanBase ( side , base_area ) ; begin
38038: LD_INT 0
38040: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38041: LD_ADDR_VAR 0 3
38045: PUSH
38046: LD_VAR 0 2
38050: PPUSH
38051: LD_INT 81
38053: PUSH
38054: LD_VAR 0 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PPUSH
38063: CALL_OW 70
38067: ST_TO_ADDR
// end ;
38068: LD_VAR 0 3
38072: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38073: LD_INT 0
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
// result := false ;
38079: LD_ADDR_VAR 0 2
38083: PUSH
38084: LD_INT 0
38086: ST_TO_ADDR
// side := GetSide ( unit ) ;
38087: LD_ADDR_VAR 0 3
38091: PUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL_OW 255
38101: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38102: LD_ADDR_VAR 0 4
38106: PUSH
38107: LD_VAR 0 1
38111: PPUSH
38112: CALL_OW 248
38116: ST_TO_ADDR
// case nat of 1 :
38117: LD_VAR 0 4
38121: PUSH
38122: LD_INT 1
38124: DOUBLE
38125: EQUAL
38126: IFTRUE 38130
38128: GO 38141
38130: POP
// tech := tech_lassight ; 2 :
38131: LD_ADDR_VAR 0 5
38135: PUSH
38136: LD_INT 12
38138: ST_TO_ADDR
38139: GO 38180
38141: LD_INT 2
38143: DOUBLE
38144: EQUAL
38145: IFTRUE 38149
38147: GO 38160
38149: POP
// tech := tech_mortar ; 3 :
38150: LD_ADDR_VAR 0 5
38154: PUSH
38155: LD_INT 41
38157: ST_TO_ADDR
38158: GO 38180
38160: LD_INT 3
38162: DOUBLE
38163: EQUAL
38164: IFTRUE 38168
38166: GO 38179
38168: POP
// tech := tech_bazooka ; end ;
38169: LD_ADDR_VAR 0 5
38173: PUSH
38174: LD_INT 44
38176: ST_TO_ADDR
38177: GO 38180
38179: POP
// if Researched ( side , tech ) then
38180: LD_VAR 0 3
38184: PPUSH
38185: LD_VAR 0 5
38189: PPUSH
38190: CALL_OW 325
38194: IFFALSE 38221
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38196: LD_ADDR_VAR 0 2
38200: PUSH
38201: LD_INT 5
38203: PUSH
38204: LD_INT 8
38206: PUSH
38207: LD_INT 9
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: LIST
38214: PUSH
38215: LD_VAR 0 4
38219: ARRAY
38220: ST_TO_ADDR
// end ;
38221: LD_VAR 0 2
38225: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38226: LD_INT 0
38228: PPUSH
38229: PPUSH
38230: PPUSH
// if not mines then
38231: LD_VAR 0 2
38235: NOT
38236: IFFALSE 38240
// exit ;
38238: GO 38384
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38240: LD_ADDR_VAR 0 5
38244: PUSH
38245: LD_INT 81
38247: PUSH
38248: LD_VAR 0 1
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 3
38259: PUSH
38260: LD_INT 21
38262: PUSH
38263: LD_INT 3
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PPUSH
38278: CALL_OW 69
38282: ST_TO_ADDR
// for i in mines do
38283: LD_ADDR_VAR 0 4
38287: PUSH
38288: LD_VAR 0 2
38292: PUSH
38293: FOR_IN
38294: IFFALSE 38382
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38296: LD_VAR 0 4
38300: PUSH
38301: LD_INT 1
38303: ARRAY
38304: PPUSH
38305: LD_VAR 0 4
38309: PUSH
38310: LD_INT 2
38312: ARRAY
38313: PPUSH
38314: CALL_OW 458
38318: NOT
38319: IFFALSE 38323
// continue ;
38321: GO 38293
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38323: LD_VAR 0 4
38327: PUSH
38328: LD_INT 1
38330: ARRAY
38331: PPUSH
38332: LD_VAR 0 4
38336: PUSH
38337: LD_INT 2
38339: ARRAY
38340: PPUSH
38341: CALL_OW 428
38345: PUSH
38346: LD_VAR 0 5
38350: IN
38351: IFFALSE 38380
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38353: LD_VAR 0 4
38357: PUSH
38358: LD_INT 1
38360: ARRAY
38361: PPUSH
38362: LD_VAR 0 4
38366: PUSH
38367: LD_INT 2
38369: ARRAY
38370: PPUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: CALL_OW 456
// end ;
38380: GO 38293
38382: POP
38383: POP
// end ;
38384: LD_VAR 0 3
38388: RET
// export function Count ( array ) ; begin
38389: LD_INT 0
38391: PPUSH
// result := array + 0 ;
38392: LD_ADDR_VAR 0 2
38396: PUSH
38397: LD_VAR 0 1
38401: PUSH
38402: LD_INT 0
38404: PLUS
38405: ST_TO_ADDR
// end ;
38406: LD_VAR 0 2
38410: RET
// export function IsEmpty ( building ) ; begin
38411: LD_INT 0
38413: PPUSH
// if not building then
38414: LD_VAR 0 1
38418: NOT
38419: IFFALSE 38423
// exit ;
38421: GO 38466
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38423: LD_ADDR_VAR 0 2
38427: PUSH
38428: LD_VAR 0 1
38432: PUSH
38433: LD_INT 22
38435: PUSH
38436: LD_VAR 0 1
38440: PPUSH
38441: CALL_OW 255
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 58
38452: PUSH
38453: EMPTY
38454: LIST
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PPUSH
38460: CALL_OW 69
38464: IN
38465: ST_TO_ADDR
// end ;
38466: LD_VAR 0 2
38470: RET
// export function IsNotFull ( building ) ; var places ; begin
38471: LD_INT 0
38473: PPUSH
38474: PPUSH
// if not building then
38475: LD_VAR 0 1
38479: NOT
38480: IFFALSE 38484
// exit ;
38482: GO 38512
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38484: LD_ADDR_VAR 0 2
38488: PUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: LD_INT 3
38496: PUSH
38497: LD_INT 62
38499: PUSH
38500: EMPTY
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PPUSH
38507: CALL_OW 72
38511: ST_TO_ADDR
// end ;
38512: LD_VAR 0 2
38516: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38517: LD_INT 0
38519: PPUSH
38520: PPUSH
38521: PPUSH
38522: PPUSH
// tmp := [ ] ;
38523: LD_ADDR_VAR 0 3
38527: PUSH
38528: EMPTY
38529: ST_TO_ADDR
// list := [ ] ;
38530: LD_ADDR_VAR 0 5
38534: PUSH
38535: EMPTY
38536: ST_TO_ADDR
// for i = 16 to 25 do
38537: LD_ADDR_VAR 0 4
38541: PUSH
38542: DOUBLE
38543: LD_INT 16
38545: DEC
38546: ST_TO_ADDR
38547: LD_INT 25
38549: PUSH
38550: FOR_TO
38551: IFFALSE 38624
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38553: LD_ADDR_VAR 0 3
38557: PUSH
38558: LD_VAR 0 3
38562: PUSH
38563: LD_INT 22
38565: PUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL_OW 255
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 91
38582: PUSH
38583: LD_VAR 0 1
38587: PUSH
38588: LD_INT 6
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 30
38598: PUSH
38599: LD_VAR 0 4
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: PPUSH
38616: CALL_OW 69
38620: ADD
38621: ST_TO_ADDR
38622: GO 38550
38624: POP
38625: POP
// for i = 1 to tmp do
38626: LD_ADDR_VAR 0 4
38630: PUSH
38631: DOUBLE
38632: LD_INT 1
38634: DEC
38635: ST_TO_ADDR
38636: LD_VAR 0 3
38640: PUSH
38641: FOR_TO
38642: IFFALSE 38730
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38644: LD_ADDR_VAR 0 5
38648: PUSH
38649: LD_VAR 0 5
38653: PUSH
38654: LD_VAR 0 3
38658: PUSH
38659: LD_VAR 0 4
38663: ARRAY
38664: PPUSH
38665: CALL_OW 266
38669: PUSH
38670: LD_VAR 0 3
38674: PUSH
38675: LD_VAR 0 4
38679: ARRAY
38680: PPUSH
38681: CALL_OW 250
38685: PUSH
38686: LD_VAR 0 3
38690: PUSH
38691: LD_VAR 0 4
38695: ARRAY
38696: PPUSH
38697: CALL_OW 251
38701: PUSH
38702: LD_VAR 0 3
38706: PUSH
38707: LD_VAR 0 4
38711: ARRAY
38712: PPUSH
38713: CALL_OW 254
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: ADD
38727: ST_TO_ADDR
38728: GO 38641
38730: POP
38731: POP
// result := list ;
38732: LD_ADDR_VAR 0 2
38736: PUSH
38737: LD_VAR 0 5
38741: ST_TO_ADDR
// end ;
38742: LD_VAR 0 2
38746: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38747: LD_INT 0
38749: PPUSH
38750: PPUSH
38751: PPUSH
38752: PPUSH
38753: PPUSH
38754: PPUSH
38755: PPUSH
// if not factory then
38756: LD_VAR 0 1
38760: NOT
38761: IFFALSE 38765
// exit ;
38763: GO 39358
// if control = control_apeman then
38765: LD_VAR 0 4
38769: PUSH
38770: LD_INT 5
38772: EQUAL
38773: IFFALSE 38882
// begin tmp := UnitsInside ( factory ) ;
38775: LD_ADDR_VAR 0 8
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 313
38789: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38790: LD_VAR 0 8
38794: PPUSH
38795: LD_INT 25
38797: PUSH
38798: LD_INT 12
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PPUSH
38805: CALL_OW 72
38809: NOT
38810: IFFALSE 38820
// control := control_manual ;
38812: LD_ADDR_VAR 0 4
38816: PUSH
38817: LD_INT 1
38819: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38820: LD_ADDR_VAR 0 8
38824: PUSH
38825: LD_VAR 0 1
38829: PPUSH
38830: CALL 38517 0 1
38834: ST_TO_ADDR
// if tmp then
38835: LD_VAR 0 8
38839: IFFALSE 38882
// begin for i in tmp do
38841: LD_ADDR_VAR 0 7
38845: PUSH
38846: LD_VAR 0 8
38850: PUSH
38851: FOR_IN
38852: IFFALSE 38880
// if i [ 1 ] = b_ext_radio then
38854: LD_VAR 0 7
38858: PUSH
38859: LD_INT 1
38861: ARRAY
38862: PUSH
38863: LD_INT 22
38865: EQUAL
38866: IFFALSE 38878
// begin control := control_remote ;
38868: LD_ADDR_VAR 0 4
38872: PUSH
38873: LD_INT 2
38875: ST_TO_ADDR
// break ;
38876: GO 38880
// end ;
38878: GO 38851
38880: POP
38881: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38882: LD_VAR 0 1
38886: PPUSH
38887: LD_VAR 0 2
38891: PPUSH
38892: LD_VAR 0 3
38896: PPUSH
38897: LD_VAR 0 4
38901: PPUSH
38902: LD_VAR 0 5
38906: PPUSH
38907: CALL_OW 448
38911: IFFALSE 38946
// begin result := [ chassis , engine , control , weapon ] ;
38913: LD_ADDR_VAR 0 6
38917: PUSH
38918: LD_VAR 0 2
38922: PUSH
38923: LD_VAR 0 3
38927: PUSH
38928: LD_VAR 0 4
38932: PUSH
38933: LD_VAR 0 5
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: ST_TO_ADDR
// exit ;
38944: GO 39358
// end ; _chassis := AvailableChassisList ( factory ) ;
38946: LD_ADDR_VAR 0 9
38950: PUSH
38951: LD_VAR 0 1
38955: PPUSH
38956: CALL_OW 475
38960: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38961: LD_ADDR_VAR 0 11
38965: PUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: CALL_OW 476
38975: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38976: LD_ADDR_VAR 0 12
38980: PUSH
38981: LD_VAR 0 1
38985: PPUSH
38986: CALL_OW 477
38990: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38991: LD_ADDR_VAR 0 10
38995: PUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: CALL_OW 478
39005: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39006: LD_VAR 0 9
39010: NOT
39011: PUSH
39012: LD_VAR 0 11
39016: NOT
39017: OR
39018: PUSH
39019: LD_VAR 0 12
39023: NOT
39024: OR
39025: PUSH
39026: LD_VAR 0 10
39030: NOT
39031: OR
39032: IFFALSE 39067
// begin result := [ chassis , engine , control , weapon ] ;
39034: LD_ADDR_VAR 0 6
39038: PUSH
39039: LD_VAR 0 2
39043: PUSH
39044: LD_VAR 0 3
39048: PUSH
39049: LD_VAR 0 4
39053: PUSH
39054: LD_VAR 0 5
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: ST_TO_ADDR
// exit ;
39065: GO 39358
// end ; if not chassis in _chassis then
39067: LD_VAR 0 2
39071: PUSH
39072: LD_VAR 0 9
39076: IN
39077: NOT
39078: IFFALSE 39104
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39080: LD_ADDR_VAR 0 2
39084: PUSH
39085: LD_VAR 0 9
39089: PUSH
39090: LD_INT 1
39092: PPUSH
39093: LD_VAR 0 9
39097: PPUSH
39098: CALL_OW 12
39102: ARRAY
39103: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39104: LD_VAR 0 2
39108: PPUSH
39109: LD_VAR 0 3
39113: PPUSH
39114: CALL 39363 0 2
39118: NOT
39119: IFFALSE 39178
// repeat engine := _engine [ 1 ] ;
39121: LD_ADDR_VAR 0 3
39125: PUSH
39126: LD_VAR 0 11
39130: PUSH
39131: LD_INT 1
39133: ARRAY
39134: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39135: LD_ADDR_VAR 0 11
39139: PUSH
39140: LD_VAR 0 11
39144: PPUSH
39145: LD_INT 1
39147: PPUSH
39148: CALL_OW 3
39152: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39153: LD_VAR 0 2
39157: PPUSH
39158: LD_VAR 0 3
39162: PPUSH
39163: CALL 39363 0 2
39167: PUSH
39168: LD_VAR 0 11
39172: PUSH
39173: EMPTY
39174: EQUAL
39175: OR
39176: IFFALSE 39121
// if not control in _control then
39178: LD_VAR 0 4
39182: PUSH
39183: LD_VAR 0 12
39187: IN
39188: NOT
39189: IFFALSE 39215
// control := _control [ rand ( 1 , _control ) ] ;
39191: LD_ADDR_VAR 0 4
39195: PUSH
39196: LD_VAR 0 12
39200: PUSH
39201: LD_INT 1
39203: PPUSH
39204: LD_VAR 0 12
39208: PPUSH
39209: CALL_OW 12
39213: ARRAY
39214: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39215: LD_VAR 0 2
39219: PPUSH
39220: LD_VAR 0 5
39224: PPUSH
39225: CALL 39583 0 2
39229: NOT
39230: IFFALSE 39289
// repeat weapon := _weapon [ 1 ] ;
39232: LD_ADDR_VAR 0 5
39236: PUSH
39237: LD_VAR 0 10
39241: PUSH
39242: LD_INT 1
39244: ARRAY
39245: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39246: LD_ADDR_VAR 0 10
39250: PUSH
39251: LD_VAR 0 10
39255: PPUSH
39256: LD_INT 1
39258: PPUSH
39259: CALL_OW 3
39263: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39264: LD_VAR 0 2
39268: PPUSH
39269: LD_VAR 0 5
39273: PPUSH
39274: CALL 39583 0 2
39278: PUSH
39279: LD_VAR 0 10
39283: PUSH
39284: EMPTY
39285: EQUAL
39286: OR
39287: IFFALSE 39232
// result := [ ] ;
39289: LD_ADDR_VAR 0 6
39293: PUSH
39294: EMPTY
39295: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39296: LD_VAR 0 1
39300: PPUSH
39301: LD_VAR 0 2
39305: PPUSH
39306: LD_VAR 0 3
39310: PPUSH
39311: LD_VAR 0 4
39315: PPUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: CALL_OW 448
39325: IFFALSE 39358
// result := [ chassis , engine , control , weapon ] ;
39327: LD_ADDR_VAR 0 6
39331: PUSH
39332: LD_VAR 0 2
39336: PUSH
39337: LD_VAR 0 3
39341: PUSH
39342: LD_VAR 0 4
39346: PUSH
39347: LD_VAR 0 5
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: ST_TO_ADDR
// end ;
39358: LD_VAR 0 6
39362: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39363: LD_INT 0
39365: PPUSH
// if not chassis or not engine then
39366: LD_VAR 0 1
39370: NOT
39371: PUSH
39372: LD_VAR 0 2
39376: NOT
39377: OR
39378: IFFALSE 39382
// exit ;
39380: GO 39578
// case engine of engine_solar :
39382: LD_VAR 0 2
39386: PUSH
39387: LD_INT 2
39389: DOUBLE
39390: EQUAL
39391: IFTRUE 39395
39393: GO 39433
39395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39396: LD_ADDR_VAR 0 3
39400: PUSH
39401: LD_INT 11
39403: PUSH
39404: LD_INT 12
39406: PUSH
39407: LD_INT 13
39409: PUSH
39410: LD_INT 14
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: ST_TO_ADDR
39431: GO 39562
39433: LD_INT 1
39435: DOUBLE
39436: EQUAL
39437: IFTRUE 39441
39439: GO 39503
39441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39442: LD_ADDR_VAR 0 3
39446: PUSH
39447: LD_INT 11
39449: PUSH
39450: LD_INT 12
39452: PUSH
39453: LD_INT 13
39455: PUSH
39456: LD_INT 14
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: LD_INT 4
39470: PUSH
39471: LD_INT 5
39473: PUSH
39474: LD_INT 21
39476: PUSH
39477: LD_INT 23
39479: PUSH
39480: LD_INT 22
39482: PUSH
39483: LD_INT 24
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: ST_TO_ADDR
39501: GO 39562
39503: LD_INT 3
39505: DOUBLE
39506: EQUAL
39507: IFTRUE 39511
39509: GO 39561
39511: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39512: LD_ADDR_VAR 0 3
39516: PUSH
39517: LD_INT 13
39519: PUSH
39520: LD_INT 14
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 3
39528: PUSH
39529: LD_INT 4
39531: PUSH
39532: LD_INT 5
39534: PUSH
39535: LD_INT 21
39537: PUSH
39538: LD_INT 22
39540: PUSH
39541: LD_INT 23
39543: PUSH
39544: LD_INT 24
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: ST_TO_ADDR
39559: GO 39562
39561: POP
// result := ( chassis in result ) ;
39562: LD_ADDR_VAR 0 3
39566: PUSH
39567: LD_VAR 0 1
39571: PUSH
39572: LD_VAR 0 3
39576: IN
39577: ST_TO_ADDR
// end ;
39578: LD_VAR 0 3
39582: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39583: LD_INT 0
39585: PPUSH
// if not chassis or not weapon then
39586: LD_VAR 0 1
39590: NOT
39591: PUSH
39592: LD_VAR 0 2
39596: NOT
39597: OR
39598: IFFALSE 39602
// exit ;
39600: GO 40662
// case weapon of us_machine_gun :
39602: LD_VAR 0 2
39606: PUSH
39607: LD_INT 2
39609: DOUBLE
39610: EQUAL
39611: IFTRUE 39615
39613: GO 39645
39615: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39616: LD_ADDR_VAR 0 3
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: LD_INT 3
39629: PUSH
39630: LD_INT 4
39632: PUSH
39633: LD_INT 5
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: ST_TO_ADDR
39643: GO 40646
39645: LD_INT 3
39647: DOUBLE
39648: EQUAL
39649: IFTRUE 39653
39651: GO 39683
39653: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39654: LD_ADDR_VAR 0 3
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: LD_INT 4
39670: PUSH
39671: LD_INT 5
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: ST_TO_ADDR
39681: GO 40646
39683: LD_INT 11
39685: DOUBLE
39686: EQUAL
39687: IFTRUE 39691
39689: GO 39721
39691: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39692: LD_ADDR_VAR 0 3
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: LD_INT 4
39708: PUSH
39709: LD_INT 5
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: ST_TO_ADDR
39719: GO 40646
39721: LD_INT 4
39723: DOUBLE
39724: EQUAL
39725: IFTRUE 39729
39727: GO 39755
39729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39730: LD_ADDR_VAR 0 3
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: LD_INT 4
39743: PUSH
39744: LD_INT 5
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: ST_TO_ADDR
39753: GO 40646
39755: LD_INT 5
39757: DOUBLE
39758: EQUAL
39759: IFTRUE 39763
39761: GO 39789
39763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39764: LD_ADDR_VAR 0 3
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 3
39774: PUSH
39775: LD_INT 4
39777: PUSH
39778: LD_INT 5
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: ST_TO_ADDR
39787: GO 40646
39789: LD_INT 9
39791: DOUBLE
39792: EQUAL
39793: IFTRUE 39797
39795: GO 39823
39797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39798: LD_ADDR_VAR 0 3
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 3
39808: PUSH
39809: LD_INT 4
39811: PUSH
39812: LD_INT 5
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: ST_TO_ADDR
39821: GO 40646
39823: LD_INT 7
39825: DOUBLE
39826: EQUAL
39827: IFTRUE 39831
39829: GO 39857
39831: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39832: LD_ADDR_VAR 0 3
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: LD_INT 3
39842: PUSH
39843: LD_INT 4
39845: PUSH
39846: LD_INT 5
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: ST_TO_ADDR
39855: GO 40646
39857: LD_INT 12
39859: DOUBLE
39860: EQUAL
39861: IFTRUE 39865
39863: GO 39891
39865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39866: LD_ADDR_VAR 0 3
39870: PUSH
39871: LD_INT 2
39873: PUSH
39874: LD_INT 3
39876: PUSH
39877: LD_INT 4
39879: PUSH
39880: LD_INT 5
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: ST_TO_ADDR
39889: GO 40646
39891: LD_INT 13
39893: DOUBLE
39894: EQUAL
39895: IFTRUE 39899
39897: GO 39925
39899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39900: LD_ADDR_VAR 0 3
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 3
39910: PUSH
39911: LD_INT 4
39913: PUSH
39914: LD_INT 5
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: ST_TO_ADDR
39923: GO 40646
39925: LD_INT 14
39927: DOUBLE
39928: EQUAL
39929: IFTRUE 39933
39931: GO 39951
39933: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_INT 4
39941: PUSH
39942: LD_INT 5
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: ST_TO_ADDR
39949: GO 40646
39951: LD_INT 6
39953: DOUBLE
39954: EQUAL
39955: IFTRUE 39959
39957: GO 39977
39959: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39960: LD_ADDR_VAR 0 3
39964: PUSH
39965: LD_INT 4
39967: PUSH
39968: LD_INT 5
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: ST_TO_ADDR
39975: GO 40646
39977: LD_INT 10
39979: DOUBLE
39980: EQUAL
39981: IFTRUE 39985
39983: GO 40003
39985: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39986: LD_ADDR_VAR 0 3
39990: PUSH
39991: LD_INT 4
39993: PUSH
39994: LD_INT 5
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: ST_TO_ADDR
40001: GO 40646
40003: LD_INT 22
40005: DOUBLE
40006: EQUAL
40007: IFTRUE 40011
40009: GO 40037
40011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40012: LD_ADDR_VAR 0 3
40016: PUSH
40017: LD_INT 11
40019: PUSH
40020: LD_INT 12
40022: PUSH
40023: LD_INT 13
40025: PUSH
40026: LD_INT 14
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: ST_TO_ADDR
40035: GO 40646
40037: LD_INT 23
40039: DOUBLE
40040: EQUAL
40041: IFTRUE 40045
40043: GO 40071
40045: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40046: LD_ADDR_VAR 0 3
40050: PUSH
40051: LD_INT 11
40053: PUSH
40054: LD_INT 12
40056: PUSH
40057: LD_INT 13
40059: PUSH
40060: LD_INT 14
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: ST_TO_ADDR
40069: GO 40646
40071: LD_INT 24
40073: DOUBLE
40074: EQUAL
40075: IFTRUE 40079
40077: GO 40105
40079: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40080: LD_ADDR_VAR 0 3
40084: PUSH
40085: LD_INT 11
40087: PUSH
40088: LD_INT 12
40090: PUSH
40091: LD_INT 13
40093: PUSH
40094: LD_INT 14
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: ST_TO_ADDR
40103: GO 40646
40105: LD_INT 30
40107: DOUBLE
40108: EQUAL
40109: IFTRUE 40113
40111: GO 40139
40113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40114: LD_ADDR_VAR 0 3
40118: PUSH
40119: LD_INT 11
40121: PUSH
40122: LD_INT 12
40124: PUSH
40125: LD_INT 13
40127: PUSH
40128: LD_INT 14
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: ST_TO_ADDR
40137: GO 40646
40139: LD_INT 25
40141: DOUBLE
40142: EQUAL
40143: IFTRUE 40147
40145: GO 40165
40147: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40148: LD_ADDR_VAR 0 3
40152: PUSH
40153: LD_INT 13
40155: PUSH
40156: LD_INT 14
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: ST_TO_ADDR
40163: GO 40646
40165: LD_INT 27
40167: DOUBLE
40168: EQUAL
40169: IFTRUE 40173
40171: GO 40191
40173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40174: LD_ADDR_VAR 0 3
40178: PUSH
40179: LD_INT 13
40181: PUSH
40182: LD_INT 14
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: ST_TO_ADDR
40189: GO 40646
40191: LD_INT 92
40193: DOUBLE
40194: EQUAL
40195: IFTRUE 40199
40197: GO 40225
40199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40200: LD_ADDR_VAR 0 3
40204: PUSH
40205: LD_INT 11
40207: PUSH
40208: LD_INT 12
40210: PUSH
40211: LD_INT 13
40213: PUSH
40214: LD_INT 14
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: ST_TO_ADDR
40223: GO 40646
40225: LD_INT 28
40227: DOUBLE
40228: EQUAL
40229: IFTRUE 40233
40231: GO 40251
40233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40234: LD_ADDR_VAR 0 3
40238: PUSH
40239: LD_INT 13
40241: PUSH
40242: LD_INT 14
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: ST_TO_ADDR
40249: GO 40646
40251: LD_INT 29
40253: DOUBLE
40254: EQUAL
40255: IFTRUE 40259
40257: GO 40277
40259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40260: LD_ADDR_VAR 0 3
40264: PUSH
40265: LD_INT 13
40267: PUSH
40268: LD_INT 14
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: ST_TO_ADDR
40275: GO 40646
40277: LD_INT 31
40279: DOUBLE
40280: EQUAL
40281: IFTRUE 40285
40283: GO 40303
40285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40286: LD_ADDR_VAR 0 3
40290: PUSH
40291: LD_INT 13
40293: PUSH
40294: LD_INT 14
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: ST_TO_ADDR
40301: GO 40646
40303: LD_INT 26
40305: DOUBLE
40306: EQUAL
40307: IFTRUE 40311
40309: GO 40329
40311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40312: LD_ADDR_VAR 0 3
40316: PUSH
40317: LD_INT 13
40319: PUSH
40320: LD_INT 14
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: ST_TO_ADDR
40327: GO 40646
40329: LD_INT 42
40331: DOUBLE
40332: EQUAL
40333: IFTRUE 40337
40335: GO 40363
40337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40338: LD_ADDR_VAR 0 3
40342: PUSH
40343: LD_INT 21
40345: PUSH
40346: LD_INT 22
40348: PUSH
40349: LD_INT 23
40351: PUSH
40352: LD_INT 24
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: ST_TO_ADDR
40361: GO 40646
40363: LD_INT 43
40365: DOUBLE
40366: EQUAL
40367: IFTRUE 40371
40369: GO 40397
40371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40372: LD_ADDR_VAR 0 3
40376: PUSH
40377: LD_INT 21
40379: PUSH
40380: LD_INT 22
40382: PUSH
40383: LD_INT 23
40385: PUSH
40386: LD_INT 24
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: ST_TO_ADDR
40395: GO 40646
40397: LD_INT 44
40399: DOUBLE
40400: EQUAL
40401: IFTRUE 40405
40403: GO 40431
40405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40406: LD_ADDR_VAR 0 3
40410: PUSH
40411: LD_INT 21
40413: PUSH
40414: LD_INT 22
40416: PUSH
40417: LD_INT 23
40419: PUSH
40420: LD_INT 24
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
40429: GO 40646
40431: LD_INT 45
40433: DOUBLE
40434: EQUAL
40435: IFTRUE 40439
40437: GO 40465
40439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40440: LD_ADDR_VAR 0 3
40444: PUSH
40445: LD_INT 21
40447: PUSH
40448: LD_INT 22
40450: PUSH
40451: LD_INT 23
40453: PUSH
40454: LD_INT 24
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: ST_TO_ADDR
40463: GO 40646
40465: LD_INT 49
40467: DOUBLE
40468: EQUAL
40469: IFTRUE 40473
40471: GO 40499
40473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_INT 21
40481: PUSH
40482: LD_INT 22
40484: PUSH
40485: LD_INT 23
40487: PUSH
40488: LD_INT 24
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: ST_TO_ADDR
40497: GO 40646
40499: LD_INT 51
40501: DOUBLE
40502: EQUAL
40503: IFTRUE 40507
40505: GO 40533
40507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40508: LD_ADDR_VAR 0 3
40512: PUSH
40513: LD_INT 21
40515: PUSH
40516: LD_INT 22
40518: PUSH
40519: LD_INT 23
40521: PUSH
40522: LD_INT 24
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: ST_TO_ADDR
40531: GO 40646
40533: LD_INT 52
40535: DOUBLE
40536: EQUAL
40537: IFTRUE 40541
40539: GO 40567
40541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40542: LD_ADDR_VAR 0 3
40546: PUSH
40547: LD_INT 21
40549: PUSH
40550: LD_INT 22
40552: PUSH
40553: LD_INT 23
40555: PUSH
40556: LD_INT 24
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: ST_TO_ADDR
40565: GO 40646
40567: LD_INT 53
40569: DOUBLE
40570: EQUAL
40571: IFTRUE 40575
40573: GO 40593
40575: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40576: LD_ADDR_VAR 0 3
40580: PUSH
40581: LD_INT 23
40583: PUSH
40584: LD_INT 24
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: ST_TO_ADDR
40591: GO 40646
40593: LD_INT 46
40595: DOUBLE
40596: EQUAL
40597: IFTRUE 40601
40599: GO 40619
40601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: LD_INT 23
40609: PUSH
40610: LD_INT 24
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: ST_TO_ADDR
40617: GO 40646
40619: LD_INT 47
40621: DOUBLE
40622: EQUAL
40623: IFTRUE 40627
40625: GO 40645
40627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40628: LD_ADDR_VAR 0 3
40632: PUSH
40633: LD_INT 23
40635: PUSH
40636: LD_INT 24
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: ST_TO_ADDR
40643: GO 40646
40645: POP
// result := ( chassis in result ) ;
40646: LD_ADDR_VAR 0 3
40650: PUSH
40651: LD_VAR 0 1
40655: PUSH
40656: LD_VAR 0 3
40660: IN
40661: ST_TO_ADDR
// end ;
40662: LD_VAR 0 3
40666: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40667: LD_INT 0
40669: PPUSH
40670: PPUSH
40671: PPUSH
40672: PPUSH
40673: PPUSH
40674: PPUSH
40675: PPUSH
// result := array ;
40676: LD_ADDR_VAR 0 5
40680: PUSH
40681: LD_VAR 0 1
40685: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40686: LD_VAR 0 1
40690: NOT
40691: PUSH
40692: LD_VAR 0 2
40696: NOT
40697: OR
40698: PUSH
40699: LD_VAR 0 3
40703: NOT
40704: OR
40705: PUSH
40706: LD_VAR 0 2
40710: PUSH
40711: LD_VAR 0 1
40715: GREATER
40716: OR
40717: PUSH
40718: LD_VAR 0 3
40722: PUSH
40723: LD_VAR 0 1
40727: GREATER
40728: OR
40729: IFFALSE 40733
// exit ;
40731: GO 41029
// if direction then
40733: LD_VAR 0 4
40737: IFFALSE 40801
// begin d := 1 ;
40739: LD_ADDR_VAR 0 9
40743: PUSH
40744: LD_INT 1
40746: ST_TO_ADDR
// if i_from > i_to then
40747: LD_VAR 0 2
40751: PUSH
40752: LD_VAR 0 3
40756: GREATER
40757: IFFALSE 40783
// length := ( array - i_from ) + i_to else
40759: LD_ADDR_VAR 0 11
40763: PUSH
40764: LD_VAR 0 1
40768: PUSH
40769: LD_VAR 0 2
40773: MINUS
40774: PUSH
40775: LD_VAR 0 3
40779: PLUS
40780: ST_TO_ADDR
40781: GO 40799
// length := i_to - i_from ;
40783: LD_ADDR_VAR 0 11
40787: PUSH
40788: LD_VAR 0 3
40792: PUSH
40793: LD_VAR 0 2
40797: MINUS
40798: ST_TO_ADDR
// end else
40799: GO 40862
// begin d := - 1 ;
40801: LD_ADDR_VAR 0 9
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: ST_TO_ADDR
// if i_from > i_to then
40810: LD_VAR 0 2
40814: PUSH
40815: LD_VAR 0 3
40819: GREATER
40820: IFFALSE 40840
// length := i_from - i_to else
40822: LD_ADDR_VAR 0 11
40826: PUSH
40827: LD_VAR 0 2
40831: PUSH
40832: LD_VAR 0 3
40836: MINUS
40837: ST_TO_ADDR
40838: GO 40862
// length := ( array - i_to ) + i_from ;
40840: LD_ADDR_VAR 0 11
40844: PUSH
40845: LD_VAR 0 1
40849: PUSH
40850: LD_VAR 0 3
40854: MINUS
40855: PUSH
40856: LD_VAR 0 2
40860: PLUS
40861: ST_TO_ADDR
// end ; if not length then
40862: LD_VAR 0 11
40866: NOT
40867: IFFALSE 40871
// exit ;
40869: GO 41029
// tmp := array ;
40871: LD_ADDR_VAR 0 10
40875: PUSH
40876: LD_VAR 0 1
40880: ST_TO_ADDR
// for i = 1 to length do
40881: LD_ADDR_VAR 0 6
40885: PUSH
40886: DOUBLE
40887: LD_INT 1
40889: DEC
40890: ST_TO_ADDR
40891: LD_VAR 0 11
40895: PUSH
40896: FOR_TO
40897: IFFALSE 41017
// begin for j = 1 to array do
40899: LD_ADDR_VAR 0 7
40903: PUSH
40904: DOUBLE
40905: LD_INT 1
40907: DEC
40908: ST_TO_ADDR
40909: LD_VAR 0 1
40913: PUSH
40914: FOR_TO
40915: IFFALSE 41003
// begin k := j + d ;
40917: LD_ADDR_VAR 0 8
40921: PUSH
40922: LD_VAR 0 7
40926: PUSH
40927: LD_VAR 0 9
40931: PLUS
40932: ST_TO_ADDR
// if k > array then
40933: LD_VAR 0 8
40937: PUSH
40938: LD_VAR 0 1
40942: GREATER
40943: IFFALSE 40953
// k := 1 ;
40945: LD_ADDR_VAR 0 8
40949: PUSH
40950: LD_INT 1
40952: ST_TO_ADDR
// if not k then
40953: LD_VAR 0 8
40957: NOT
40958: IFFALSE 40970
// k := array ;
40960: LD_ADDR_VAR 0 8
40964: PUSH
40965: LD_VAR 0 1
40969: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40970: LD_ADDR_VAR 0 10
40974: PUSH
40975: LD_VAR 0 10
40979: PPUSH
40980: LD_VAR 0 8
40984: PPUSH
40985: LD_VAR 0 1
40989: PUSH
40990: LD_VAR 0 7
40994: ARRAY
40995: PPUSH
40996: CALL_OW 1
41000: ST_TO_ADDR
// end ;
41001: GO 40914
41003: POP
41004: POP
// array := tmp ;
41005: LD_ADDR_VAR 0 1
41009: PUSH
41010: LD_VAR 0 10
41014: ST_TO_ADDR
// end ;
41015: GO 40896
41017: POP
41018: POP
// result := array ;
41019: LD_ADDR_VAR 0 5
41023: PUSH
41024: LD_VAR 0 1
41028: ST_TO_ADDR
// end ;
41029: LD_VAR 0 5
41033: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41034: LD_INT 0
41036: PPUSH
41037: PPUSH
// result := 0 ;
41038: LD_ADDR_VAR 0 3
41042: PUSH
41043: LD_INT 0
41045: ST_TO_ADDR
// if not array or not value in array then
41046: LD_VAR 0 1
41050: NOT
41051: PUSH
41052: LD_VAR 0 2
41056: PUSH
41057: LD_VAR 0 1
41061: IN
41062: NOT
41063: OR
41064: IFFALSE 41068
// exit ;
41066: GO 41122
// for i = 1 to array do
41068: LD_ADDR_VAR 0 4
41072: PUSH
41073: DOUBLE
41074: LD_INT 1
41076: DEC
41077: ST_TO_ADDR
41078: LD_VAR 0 1
41082: PUSH
41083: FOR_TO
41084: IFFALSE 41120
// if value = array [ i ] then
41086: LD_VAR 0 2
41090: PUSH
41091: LD_VAR 0 1
41095: PUSH
41096: LD_VAR 0 4
41100: ARRAY
41101: EQUAL
41102: IFFALSE 41118
// begin result := i ;
41104: LD_ADDR_VAR 0 3
41108: PUSH
41109: LD_VAR 0 4
41113: ST_TO_ADDR
// exit ;
41114: POP
41115: POP
41116: GO 41122
// end ;
41118: GO 41083
41120: POP
41121: POP
// end ;
41122: LD_VAR 0 3
41126: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41127: LD_INT 0
41129: PPUSH
// vc_chassis := chassis ;
41130: LD_ADDR_OWVAR 37
41134: PUSH
41135: LD_VAR 0 1
41139: ST_TO_ADDR
// vc_engine := engine ;
41140: LD_ADDR_OWVAR 39
41144: PUSH
41145: LD_VAR 0 2
41149: ST_TO_ADDR
// vc_control := control ;
41150: LD_ADDR_OWVAR 38
41154: PUSH
41155: LD_VAR 0 3
41159: ST_TO_ADDR
// vc_weapon := weapon ;
41160: LD_ADDR_OWVAR 40
41164: PUSH
41165: LD_VAR 0 4
41169: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41170: LD_ADDR_OWVAR 41
41174: PUSH
41175: LD_VAR 0 5
41179: ST_TO_ADDR
// end ;
41180: LD_VAR 0 6
41184: RET
// export function WantPlant ( unit ) ; var task ; begin
41185: LD_INT 0
41187: PPUSH
41188: PPUSH
// result := false ;
41189: LD_ADDR_VAR 0 2
41193: PUSH
41194: LD_INT 0
41196: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_VAR 0 1
41206: PPUSH
41207: CALL_OW 437
41211: ST_TO_ADDR
// if task then
41212: LD_VAR 0 3
41216: IFFALSE 41244
// if task [ 1 ] [ 1 ] = p then
41218: LD_VAR 0 3
41222: PUSH
41223: LD_INT 1
41225: ARRAY
41226: PUSH
41227: LD_INT 1
41229: ARRAY
41230: PUSH
41231: LD_STRING p
41233: EQUAL
41234: IFFALSE 41244
// result := true ;
41236: LD_ADDR_VAR 0 2
41240: PUSH
41241: LD_INT 1
41243: ST_TO_ADDR
// end ;
41244: LD_VAR 0 2
41248: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41249: LD_INT 0
41251: PPUSH
41252: PPUSH
41253: PPUSH
41254: PPUSH
// if pos < 1 then
41255: LD_VAR 0 2
41259: PUSH
41260: LD_INT 1
41262: LESS
41263: IFFALSE 41267
// exit ;
41265: GO 41570
// if pos = 1 then
41267: LD_VAR 0 2
41271: PUSH
41272: LD_INT 1
41274: EQUAL
41275: IFFALSE 41308
// result := Replace ( arr , pos [ 1 ] , value ) else
41277: LD_ADDR_VAR 0 4
41281: PUSH
41282: LD_VAR 0 1
41286: PPUSH
41287: LD_VAR 0 2
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PPUSH
41296: LD_VAR 0 3
41300: PPUSH
41301: CALL_OW 1
41305: ST_TO_ADDR
41306: GO 41570
// begin tmp := arr ;
41308: LD_ADDR_VAR 0 6
41312: PUSH
41313: LD_VAR 0 1
41317: ST_TO_ADDR
// s_arr := [ tmp ] ;
41318: LD_ADDR_VAR 0 7
41322: PUSH
41323: LD_VAR 0 6
41327: PUSH
41328: EMPTY
41329: LIST
41330: ST_TO_ADDR
// for i = 1 to pos - 1 do
41331: LD_ADDR_VAR 0 5
41335: PUSH
41336: DOUBLE
41337: LD_INT 1
41339: DEC
41340: ST_TO_ADDR
41341: LD_VAR 0 2
41345: PUSH
41346: LD_INT 1
41348: MINUS
41349: PUSH
41350: FOR_TO
41351: IFFALSE 41396
// begin tmp := tmp [ pos [ i ] ] ;
41353: LD_ADDR_VAR 0 6
41357: PUSH
41358: LD_VAR 0 6
41362: PUSH
41363: LD_VAR 0 2
41367: PUSH
41368: LD_VAR 0 5
41372: ARRAY
41373: ARRAY
41374: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41375: LD_ADDR_VAR 0 7
41379: PUSH
41380: LD_VAR 0 7
41384: PUSH
41385: LD_VAR 0 6
41389: PUSH
41390: EMPTY
41391: LIST
41392: ADD
41393: ST_TO_ADDR
// end ;
41394: GO 41350
41396: POP
41397: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41398: LD_ADDR_VAR 0 6
41402: PUSH
41403: LD_VAR 0 6
41407: PPUSH
41408: LD_VAR 0 2
41412: PUSH
41413: LD_VAR 0 2
41417: ARRAY
41418: PPUSH
41419: LD_VAR 0 3
41423: PPUSH
41424: CALL_OW 1
41428: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41429: LD_ADDR_VAR 0 7
41433: PUSH
41434: LD_VAR 0 7
41438: PPUSH
41439: LD_VAR 0 7
41443: PPUSH
41444: LD_VAR 0 6
41448: PPUSH
41449: CALL_OW 1
41453: ST_TO_ADDR
// for i = s_arr downto 2 do
41454: LD_ADDR_VAR 0 5
41458: PUSH
41459: DOUBLE
41460: LD_VAR 0 7
41464: INC
41465: ST_TO_ADDR
41466: LD_INT 2
41468: PUSH
41469: FOR_DOWNTO
41470: IFFALSE 41554
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41472: LD_ADDR_VAR 0 6
41476: PUSH
41477: LD_VAR 0 7
41481: PUSH
41482: LD_VAR 0 5
41486: PUSH
41487: LD_INT 1
41489: MINUS
41490: ARRAY
41491: PPUSH
41492: LD_VAR 0 2
41496: PUSH
41497: LD_VAR 0 5
41501: PUSH
41502: LD_INT 1
41504: MINUS
41505: ARRAY
41506: PPUSH
41507: LD_VAR 0 7
41511: PUSH
41512: LD_VAR 0 5
41516: ARRAY
41517: PPUSH
41518: CALL_OW 1
41522: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41523: LD_ADDR_VAR 0 7
41527: PUSH
41528: LD_VAR 0 7
41532: PPUSH
41533: LD_VAR 0 5
41537: PUSH
41538: LD_INT 1
41540: MINUS
41541: PPUSH
41542: LD_VAR 0 6
41546: PPUSH
41547: CALL_OW 1
41551: ST_TO_ADDR
// end ;
41552: GO 41469
41554: POP
41555: POP
// result := s_arr [ 1 ] ;
41556: LD_ADDR_VAR 0 4
41560: PUSH
41561: LD_VAR 0 7
41565: PUSH
41566: LD_INT 1
41568: ARRAY
41569: ST_TO_ADDR
// end ; end ;
41570: LD_VAR 0 4
41574: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41575: LD_INT 0
41577: PPUSH
41578: PPUSH
// if not list then
41579: LD_VAR 0 1
41583: NOT
41584: IFFALSE 41588
// exit ;
41586: GO 41679
// i := list [ pos1 ] ;
41588: LD_ADDR_VAR 0 5
41592: PUSH
41593: LD_VAR 0 1
41597: PUSH
41598: LD_VAR 0 2
41602: ARRAY
41603: ST_TO_ADDR
// if not i then
41604: LD_VAR 0 5
41608: NOT
41609: IFFALSE 41613
// exit ;
41611: GO 41679
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41613: LD_ADDR_VAR 0 1
41617: PUSH
41618: LD_VAR 0 1
41622: PPUSH
41623: LD_VAR 0 2
41627: PPUSH
41628: LD_VAR 0 1
41632: PUSH
41633: LD_VAR 0 3
41637: ARRAY
41638: PPUSH
41639: CALL_OW 1
41643: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41644: LD_ADDR_VAR 0 1
41648: PUSH
41649: LD_VAR 0 1
41653: PPUSH
41654: LD_VAR 0 3
41658: PPUSH
41659: LD_VAR 0 5
41663: PPUSH
41664: CALL_OW 1
41668: ST_TO_ADDR
// result := list ;
41669: LD_ADDR_VAR 0 4
41673: PUSH
41674: LD_VAR 0 1
41678: ST_TO_ADDR
// end ;
41679: LD_VAR 0 4
41683: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41684: LD_INT 0
41686: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41687: LD_ADDR_VAR 0 5
41691: PUSH
41692: LD_VAR 0 1
41696: PPUSH
41697: CALL_OW 250
41701: PPUSH
41702: LD_VAR 0 1
41706: PPUSH
41707: CALL_OW 251
41711: PPUSH
41712: LD_VAR 0 2
41716: PPUSH
41717: LD_VAR 0 3
41721: PPUSH
41722: LD_VAR 0 4
41726: PPUSH
41727: CALL 42105 0 5
41731: ST_TO_ADDR
// end ;
41732: LD_VAR 0 5
41736: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41737: LD_INT 0
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
// if not list or not unit then
41743: LD_VAR 0 2
41747: NOT
41748: PUSH
41749: LD_VAR 0 1
41753: NOT
41754: OR
41755: IFFALSE 41759
// exit ;
41757: GO 42100
// result := [ ] ;
41759: LD_ADDR_VAR 0 5
41763: PUSH
41764: EMPTY
41765: ST_TO_ADDR
// for i in list do
41766: LD_ADDR_VAR 0 6
41770: PUSH
41771: LD_VAR 0 2
41775: PUSH
41776: FOR_IN
41777: IFFALSE 41995
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41779: LD_ADDR_VAR 0 8
41783: PUSH
41784: LD_VAR 0 1
41788: PPUSH
41789: LD_VAR 0 6
41793: PUSH
41794: LD_INT 1
41796: ARRAY
41797: PPUSH
41798: LD_VAR 0 6
41802: PUSH
41803: LD_INT 2
41805: ARRAY
41806: PPUSH
41807: CALL_OW 297
41811: ST_TO_ADDR
// if not Count ( result ) then
41812: LD_VAR 0 5
41816: PPUSH
41817: CALL 38389 0 1
41821: NOT
41822: IFFALSE 41855
// begin result := Join ( result , [ i , tmp ] ) ;
41824: LD_ADDR_VAR 0 5
41828: PUSH
41829: LD_VAR 0 5
41833: PPUSH
41834: LD_VAR 0 6
41838: PUSH
41839: LD_VAR 0 8
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PPUSH
41848: CALL 73998 0 2
41852: ST_TO_ADDR
// continue ;
41853: GO 41776
// end ; if result [ result ] [ 2 ] <= tmp then
41855: LD_VAR 0 5
41859: PUSH
41860: LD_VAR 0 5
41864: ARRAY
41865: PUSH
41866: LD_INT 2
41868: ARRAY
41869: PUSH
41870: LD_VAR 0 8
41874: LESSEQUAL
41875: IFFALSE 41908
// result := Join ( result , [ i , tmp ] ) else
41877: LD_ADDR_VAR 0 5
41881: PUSH
41882: LD_VAR 0 5
41886: PPUSH
41887: LD_VAR 0 6
41891: PUSH
41892: LD_VAR 0 8
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PPUSH
41901: CALL 73998 0 2
41905: ST_TO_ADDR
41906: GO 41993
// begin for j := 1 to Count ( result ) do
41908: LD_ADDR_VAR 0 7
41912: PUSH
41913: DOUBLE
41914: LD_INT 1
41916: DEC
41917: ST_TO_ADDR
41918: LD_VAR 0 5
41922: PPUSH
41923: CALL 38389 0 1
41927: PUSH
41928: FOR_TO
41929: IFFALSE 41991
// begin if tmp < result [ j ] [ 2 ] then
41931: LD_VAR 0 8
41935: PUSH
41936: LD_VAR 0 5
41940: PUSH
41941: LD_VAR 0 7
41945: ARRAY
41946: PUSH
41947: LD_INT 2
41949: ARRAY
41950: LESS
41951: IFFALSE 41989
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41953: LD_ADDR_VAR 0 5
41957: PUSH
41958: LD_VAR 0 5
41962: PPUSH
41963: LD_VAR 0 7
41967: PPUSH
41968: LD_VAR 0 6
41972: PUSH
41973: LD_VAR 0 8
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PPUSH
41982: CALL_OW 2
41986: ST_TO_ADDR
// break ;
41987: GO 41991
// end ; end ;
41989: GO 41928
41991: POP
41992: POP
// end ; end ;
41993: GO 41776
41995: POP
41996: POP
// if result and not asc then
41997: LD_VAR 0 5
42001: PUSH
42002: LD_VAR 0 3
42006: NOT
42007: AND
42008: IFFALSE 42025
// result := ReverseArray ( result ) ;
42010: LD_ADDR_VAR 0 5
42014: PUSH
42015: LD_VAR 0 5
42019: PPUSH
42020: CALL 69265 0 1
42024: ST_TO_ADDR
// tmp := [ ] ;
42025: LD_ADDR_VAR 0 8
42029: PUSH
42030: EMPTY
42031: ST_TO_ADDR
// if mode then
42032: LD_VAR 0 4
42036: IFFALSE 42100
// begin for i := 1 to result do
42038: LD_ADDR_VAR 0 6
42042: PUSH
42043: DOUBLE
42044: LD_INT 1
42046: DEC
42047: ST_TO_ADDR
42048: LD_VAR 0 5
42052: PUSH
42053: FOR_TO
42054: IFFALSE 42088
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
42056: LD_ADDR_VAR 0 8
42060: PUSH
42061: LD_VAR 0 8
42065: PPUSH
42066: LD_VAR 0 5
42070: PUSH
42071: LD_VAR 0 6
42075: ARRAY
42076: PUSH
42077: LD_INT 1
42079: ARRAY
42080: PPUSH
42081: CALL 73998 0 2
42085: ST_TO_ADDR
42086: GO 42053
42088: POP
42089: POP
// result := tmp ;
42090: LD_ADDR_VAR 0 5
42094: PUSH
42095: LD_VAR 0 8
42099: ST_TO_ADDR
// end ; end ;
42100: LD_VAR 0 5
42104: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42105: LD_INT 0
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
// if not list then
42111: LD_VAR 0 3
42115: NOT
42116: IFFALSE 42120
// exit ;
42118: GO 42508
// result := [ ] ;
42120: LD_ADDR_VAR 0 6
42124: PUSH
42125: EMPTY
42126: ST_TO_ADDR
// for i in list do
42127: LD_ADDR_VAR 0 7
42131: PUSH
42132: LD_VAR 0 3
42136: PUSH
42137: FOR_IN
42138: IFFALSE 42340
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42140: LD_ADDR_VAR 0 9
42144: PUSH
42145: LD_VAR 0 7
42149: PPUSH
42150: LD_VAR 0 1
42154: PPUSH
42155: LD_VAR 0 2
42159: PPUSH
42160: CALL_OW 297
42164: ST_TO_ADDR
// if not result then
42165: LD_VAR 0 6
42169: NOT
42170: IFFALSE 42196
// result := [ [ i , tmp ] ] else
42172: LD_ADDR_VAR 0 6
42176: PUSH
42177: LD_VAR 0 7
42181: PUSH
42182: LD_VAR 0 9
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: EMPTY
42192: LIST
42193: ST_TO_ADDR
42194: GO 42338
// begin if result [ result ] [ 2 ] <= tmp then
42196: LD_VAR 0 6
42200: PUSH
42201: LD_VAR 0 6
42205: ARRAY
42206: PUSH
42207: LD_INT 2
42209: ARRAY
42210: PUSH
42211: LD_VAR 0 9
42215: LESSEQUAL
42216: IFFALSE 42258
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42218: LD_ADDR_VAR 0 6
42222: PUSH
42223: LD_VAR 0 6
42227: PPUSH
42228: LD_VAR 0 6
42232: PUSH
42233: LD_INT 1
42235: PLUS
42236: PPUSH
42237: LD_VAR 0 7
42241: PUSH
42242: LD_VAR 0 9
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PPUSH
42251: CALL_OW 2
42255: ST_TO_ADDR
42256: GO 42338
// for j := 1 to result do
42258: LD_ADDR_VAR 0 8
42262: PUSH
42263: DOUBLE
42264: LD_INT 1
42266: DEC
42267: ST_TO_ADDR
42268: LD_VAR 0 6
42272: PUSH
42273: FOR_TO
42274: IFFALSE 42336
// begin if tmp < result [ j ] [ 2 ] then
42276: LD_VAR 0 9
42280: PUSH
42281: LD_VAR 0 6
42285: PUSH
42286: LD_VAR 0 8
42290: ARRAY
42291: PUSH
42292: LD_INT 2
42294: ARRAY
42295: LESS
42296: IFFALSE 42334
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42298: LD_ADDR_VAR 0 6
42302: PUSH
42303: LD_VAR 0 6
42307: PPUSH
42308: LD_VAR 0 8
42312: PPUSH
42313: LD_VAR 0 7
42317: PUSH
42318: LD_VAR 0 9
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PPUSH
42327: CALL_OW 2
42331: ST_TO_ADDR
// break ;
42332: GO 42336
// end ; end ;
42334: GO 42273
42336: POP
42337: POP
// end ; end ;
42338: GO 42137
42340: POP
42341: POP
// if result and not asc then
42342: LD_VAR 0 6
42346: PUSH
42347: LD_VAR 0 4
42351: NOT
42352: AND
42353: IFFALSE 42428
// begin tmp := result ;
42355: LD_ADDR_VAR 0 9
42359: PUSH
42360: LD_VAR 0 6
42364: ST_TO_ADDR
// for i = tmp downto 1 do
42365: LD_ADDR_VAR 0 7
42369: PUSH
42370: DOUBLE
42371: LD_VAR 0 9
42375: INC
42376: ST_TO_ADDR
42377: LD_INT 1
42379: PUSH
42380: FOR_DOWNTO
42381: IFFALSE 42426
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42383: LD_ADDR_VAR 0 6
42387: PUSH
42388: LD_VAR 0 6
42392: PPUSH
42393: LD_VAR 0 9
42397: PUSH
42398: LD_VAR 0 7
42402: MINUS
42403: PUSH
42404: LD_INT 1
42406: PLUS
42407: PPUSH
42408: LD_VAR 0 9
42412: PUSH
42413: LD_VAR 0 7
42417: ARRAY
42418: PPUSH
42419: CALL_OW 1
42423: ST_TO_ADDR
42424: GO 42380
42426: POP
42427: POP
// end ; tmp := [ ] ;
42428: LD_ADDR_VAR 0 9
42432: PUSH
42433: EMPTY
42434: ST_TO_ADDR
// if mode then
42435: LD_VAR 0 5
42439: IFFALSE 42508
// begin for i = 1 to result do
42441: LD_ADDR_VAR 0 7
42445: PUSH
42446: DOUBLE
42447: LD_INT 1
42449: DEC
42450: ST_TO_ADDR
42451: LD_VAR 0 6
42455: PUSH
42456: FOR_TO
42457: IFFALSE 42496
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42459: LD_ADDR_VAR 0 9
42463: PUSH
42464: LD_VAR 0 9
42468: PPUSH
42469: LD_VAR 0 7
42473: PPUSH
42474: LD_VAR 0 6
42478: PUSH
42479: LD_VAR 0 7
42483: ARRAY
42484: PUSH
42485: LD_INT 1
42487: ARRAY
42488: PPUSH
42489: CALL_OW 1
42493: ST_TO_ADDR
42494: GO 42456
42496: POP
42497: POP
// result := tmp ;
42498: LD_ADDR_VAR 0 6
42502: PUSH
42503: LD_VAR 0 9
42507: ST_TO_ADDR
// end ; end ;
42508: LD_VAR 0 6
42512: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42513: LD_INT 0
42515: PPUSH
42516: PPUSH
42517: PPUSH
42518: PPUSH
42519: PPUSH
42520: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42521: LD_ADDR_VAR 0 5
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: ST_TO_ADDR
// if not x or not y then
42543: LD_VAR 0 2
42547: NOT
42548: PUSH
42549: LD_VAR 0 3
42553: NOT
42554: OR
42555: IFFALSE 42559
// exit ;
42557: GO 44209
// if not range then
42559: LD_VAR 0 4
42563: NOT
42564: IFFALSE 42574
// range := 10 ;
42566: LD_ADDR_VAR 0 4
42570: PUSH
42571: LD_INT 10
42573: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42574: LD_ADDR_VAR 0 8
42578: PUSH
42579: LD_INT 81
42581: PUSH
42582: LD_VAR 0 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 92
42593: PUSH
42594: LD_VAR 0 2
42598: PUSH
42599: LD_VAR 0 3
42603: PUSH
42604: LD_VAR 0 4
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: LD_INT 21
42620: PUSH
42621: LD_INT 3
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: LIST
42636: PPUSH
42637: CALL_OW 69
42641: ST_TO_ADDR
// if not tmp then
42642: LD_VAR 0 8
42646: NOT
42647: IFFALSE 42651
// exit ;
42649: GO 44209
// for i in tmp do
42651: LD_ADDR_VAR 0 6
42655: PUSH
42656: LD_VAR 0 8
42660: PUSH
42661: FOR_IN
42662: IFFALSE 44184
// begin points := [ 0 , 0 , 0 ] ;
42664: LD_ADDR_VAR 0 9
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: ST_TO_ADDR
// bpoints := 1 ;
42683: LD_ADDR_VAR 0 10
42687: PUSH
42688: LD_INT 1
42690: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42691: LD_VAR 0 6
42695: PPUSH
42696: CALL_OW 247
42700: PUSH
42701: LD_INT 1
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42709
42707: GO 43287
42709: POP
// begin if GetClass ( i ) = 1 then
42710: LD_VAR 0 6
42714: PPUSH
42715: CALL_OW 257
42719: PUSH
42720: LD_INT 1
42722: EQUAL
42723: IFFALSE 42744
// points := [ 10 , 5 , 3 ] ;
42725: LD_ADDR_VAR 0 9
42729: PUSH
42730: LD_INT 10
42732: PUSH
42733: LD_INT 5
42735: PUSH
42736: LD_INT 3
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: LIST
42743: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42744: LD_VAR 0 6
42748: PPUSH
42749: CALL_OW 257
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: LD_INT 3
42759: PUSH
42760: LD_INT 4
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: IN
42768: IFFALSE 42789
// points := [ 3 , 2 , 1 ] ;
42770: LD_ADDR_VAR 0 9
42774: PUSH
42775: LD_INT 3
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42789: LD_VAR 0 6
42793: PPUSH
42794: CALL_OW 257
42798: PUSH
42799: LD_INT 5
42801: EQUAL
42802: IFFALSE 42823
// points := [ 130 , 5 , 2 ] ;
42804: LD_ADDR_VAR 0 9
42808: PUSH
42809: LD_INT 130
42811: PUSH
42812: LD_INT 5
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42823: LD_VAR 0 6
42827: PPUSH
42828: CALL_OW 257
42832: PUSH
42833: LD_INT 8
42835: EQUAL
42836: IFFALSE 42857
// points := [ 35 , 35 , 30 ] ;
42838: LD_ADDR_VAR 0 9
42842: PUSH
42843: LD_INT 35
42845: PUSH
42846: LD_INT 35
42848: PUSH
42849: LD_INT 30
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42857: LD_VAR 0 6
42861: PPUSH
42862: CALL_OW 257
42866: PUSH
42867: LD_INT 9
42869: EQUAL
42870: IFFALSE 42891
// points := [ 20 , 55 , 40 ] ;
42872: LD_ADDR_VAR 0 9
42876: PUSH
42877: LD_INT 20
42879: PUSH
42880: LD_INT 55
42882: PUSH
42883: LD_INT 40
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42891: LD_VAR 0 6
42895: PPUSH
42896: CALL_OW 257
42900: PUSH
42901: LD_INT 12
42903: PUSH
42904: LD_INT 16
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: IN
42911: IFFALSE 42932
// points := [ 5 , 3 , 2 ] ;
42913: LD_ADDR_VAR 0 9
42917: PUSH
42918: LD_INT 5
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42932: LD_VAR 0 6
42936: PPUSH
42937: CALL_OW 257
42941: PUSH
42942: LD_INT 17
42944: EQUAL
42945: IFFALSE 42966
// points := [ 100 , 50 , 75 ] ;
42947: LD_ADDR_VAR 0 9
42951: PUSH
42952: LD_INT 100
42954: PUSH
42955: LD_INT 50
42957: PUSH
42958: LD_INT 75
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42966: LD_VAR 0 6
42970: PPUSH
42971: CALL_OW 257
42975: PUSH
42976: LD_INT 15
42978: EQUAL
42979: IFFALSE 43000
// points := [ 10 , 5 , 3 ] ;
42981: LD_ADDR_VAR 0 9
42985: PUSH
42986: LD_INT 10
42988: PUSH
42989: LD_INT 5
42991: PUSH
42992: LD_INT 3
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43000: LD_VAR 0 6
43004: PPUSH
43005: CALL_OW 257
43009: PUSH
43010: LD_INT 14
43012: EQUAL
43013: IFFALSE 43034
// points := [ 10 , 0 , 0 ] ;
43015: LD_ADDR_VAR 0 9
43019: PUSH
43020: LD_INT 10
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43034: LD_VAR 0 6
43038: PPUSH
43039: CALL_OW 257
43043: PUSH
43044: LD_INT 11
43046: EQUAL
43047: IFFALSE 43068
// points := [ 30 , 10 , 5 ] ;
43049: LD_ADDR_VAR 0 9
43053: PUSH
43054: LD_INT 30
43056: PUSH
43057: LD_INT 10
43059: PUSH
43060: LD_INT 5
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43068: LD_VAR 0 1
43072: PPUSH
43073: LD_INT 5
43075: PPUSH
43076: CALL_OW 321
43080: PUSH
43081: LD_INT 2
43083: EQUAL
43084: IFFALSE 43101
// bpoints := bpoints * 1.8 ;
43086: LD_ADDR_VAR 0 10
43090: PUSH
43091: LD_VAR 0 10
43095: PUSH
43096: LD_REAL  1.80000000000000E+0000
43099: MUL
43100: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43101: LD_VAR 0 6
43105: PPUSH
43106: CALL_OW 257
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: LD_INT 4
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: IN
43129: PUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: LD_INT 51
43137: PPUSH
43138: CALL_OW 321
43142: PUSH
43143: LD_INT 2
43145: EQUAL
43146: AND
43147: IFFALSE 43164
// bpoints := bpoints * 1.2 ;
43149: LD_ADDR_VAR 0 10
43153: PUSH
43154: LD_VAR 0 10
43158: PUSH
43159: LD_REAL  1.20000000000000E+0000
43162: MUL
43163: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43164: LD_VAR 0 6
43168: PPUSH
43169: CALL_OW 257
43173: PUSH
43174: LD_INT 5
43176: PUSH
43177: LD_INT 7
43179: PUSH
43180: LD_INT 9
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: IN
43188: PUSH
43189: LD_VAR 0 1
43193: PPUSH
43194: LD_INT 52
43196: PPUSH
43197: CALL_OW 321
43201: PUSH
43202: LD_INT 2
43204: EQUAL
43205: AND
43206: IFFALSE 43223
// bpoints := bpoints * 1.5 ;
43208: LD_ADDR_VAR 0 10
43212: PUSH
43213: LD_VAR 0 10
43217: PUSH
43218: LD_REAL  1.50000000000000E+0000
43221: MUL
43222: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43223: LD_VAR 0 1
43227: PPUSH
43228: LD_INT 66
43230: PPUSH
43231: CALL_OW 321
43235: PUSH
43236: LD_INT 2
43238: EQUAL
43239: IFFALSE 43256
// bpoints := bpoints * 1.1 ;
43241: LD_ADDR_VAR 0 10
43245: PUSH
43246: LD_VAR 0 10
43250: PUSH
43251: LD_REAL  1.10000000000000E+0000
43254: MUL
43255: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43256: LD_ADDR_VAR 0 10
43260: PUSH
43261: LD_VAR 0 10
43265: PUSH
43266: LD_VAR 0 6
43270: PPUSH
43271: LD_INT 1
43273: PPUSH
43274: CALL_OW 259
43278: PUSH
43279: LD_REAL  1.15000000000000E+0000
43282: MUL
43283: MUL
43284: ST_TO_ADDR
// end ; unit_vehicle :
43285: GO 44113
43287: LD_INT 2
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43295
43293: GO 44101
43295: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43296: LD_VAR 0 6
43300: PPUSH
43301: CALL_OW 264
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: LD_INT 42
43311: PUSH
43312: LD_INT 24
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: IN
43320: IFFALSE 43341
// points := [ 25 , 5 , 3 ] ;
43322: LD_ADDR_VAR 0 9
43326: PUSH
43327: LD_INT 25
43329: PUSH
43330: LD_INT 5
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: LIST
43340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43341: LD_VAR 0 6
43345: PPUSH
43346: CALL_OW 264
43350: PUSH
43351: LD_INT 4
43353: PUSH
43354: LD_INT 43
43356: PUSH
43357: LD_INT 25
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: IN
43365: IFFALSE 43386
// points := [ 40 , 15 , 5 ] ;
43367: LD_ADDR_VAR 0 9
43371: PUSH
43372: LD_INT 40
43374: PUSH
43375: LD_INT 15
43377: PUSH
43378: LD_INT 5
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43386: LD_VAR 0 6
43390: PPUSH
43391: CALL_OW 264
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 23
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: IN
43406: IFFALSE 43427
// points := [ 7 , 25 , 8 ] ;
43408: LD_ADDR_VAR 0 9
43412: PUSH
43413: LD_INT 7
43415: PUSH
43416: LD_INT 25
43418: PUSH
43419: LD_INT 8
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43427: LD_VAR 0 6
43431: PPUSH
43432: CALL_OW 264
43436: PUSH
43437: LD_INT 5
43439: PUSH
43440: LD_INT 27
43442: PUSH
43443: LD_INT 44
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: IN
43451: IFFALSE 43472
// points := [ 14 , 50 , 16 ] ;
43453: LD_ADDR_VAR 0 9
43457: PUSH
43458: LD_INT 14
43460: PUSH
43461: LD_INT 50
43463: PUSH
43464: LD_INT 16
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43472: LD_VAR 0 6
43476: PPUSH
43477: CALL_OW 264
43481: PUSH
43482: LD_INT 6
43484: PUSH
43485: LD_INT 46
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: IN
43492: IFFALSE 43513
// points := [ 32 , 120 , 70 ] ;
43494: LD_ADDR_VAR 0 9
43498: PUSH
43499: LD_INT 32
43501: PUSH
43502: LD_INT 120
43504: PUSH
43505: LD_INT 70
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43513: LD_VAR 0 6
43517: PPUSH
43518: CALL_OW 264
43522: PUSH
43523: LD_INT 7
43525: PUSH
43526: LD_INT 28
43528: PUSH
43529: LD_INT 45
43531: PUSH
43532: LD_INT 92
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: IN
43541: IFFALSE 43562
// points := [ 35 , 20 , 45 ] ;
43543: LD_ADDR_VAR 0 9
43547: PUSH
43548: LD_INT 35
43550: PUSH
43551: LD_INT 20
43553: PUSH
43554: LD_INT 45
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43562: LD_VAR 0 6
43566: PPUSH
43567: CALL_OW 264
43571: PUSH
43572: LD_INT 47
43574: PUSH
43575: EMPTY
43576: LIST
43577: IN
43578: IFFALSE 43599
// points := [ 67 , 45 , 75 ] ;
43580: LD_ADDR_VAR 0 9
43584: PUSH
43585: LD_INT 67
43587: PUSH
43588: LD_INT 45
43590: PUSH
43591: LD_INT 75
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43599: LD_VAR 0 6
43603: PPUSH
43604: CALL_OW 264
43608: PUSH
43609: LD_INT 26
43611: PUSH
43612: EMPTY
43613: LIST
43614: IN
43615: IFFALSE 43636
// points := [ 120 , 30 , 80 ] ;
43617: LD_ADDR_VAR 0 9
43621: PUSH
43622: LD_INT 120
43624: PUSH
43625: LD_INT 30
43627: PUSH
43628: LD_INT 80
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43636: LD_VAR 0 6
43640: PPUSH
43641: CALL_OW 264
43645: PUSH
43646: LD_INT 22
43648: PUSH
43649: EMPTY
43650: LIST
43651: IN
43652: IFFALSE 43673
// points := [ 40 , 1 , 1 ] ;
43654: LD_ADDR_VAR 0 9
43658: PUSH
43659: LD_INT 40
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43673: LD_VAR 0 6
43677: PPUSH
43678: CALL_OW 264
43682: PUSH
43683: LD_INT 29
43685: PUSH
43686: EMPTY
43687: LIST
43688: IN
43689: IFFALSE 43710
// points := [ 70 , 200 , 400 ] ;
43691: LD_ADDR_VAR 0 9
43695: PUSH
43696: LD_INT 70
43698: PUSH
43699: LD_INT 200
43701: PUSH
43702: LD_INT 400
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43710: LD_VAR 0 6
43714: PPUSH
43715: CALL_OW 264
43719: PUSH
43720: LD_INT 14
43722: PUSH
43723: LD_INT 53
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: IN
43730: IFFALSE 43751
// points := [ 40 , 10 , 20 ] ;
43732: LD_ADDR_VAR 0 9
43736: PUSH
43737: LD_INT 40
43739: PUSH
43740: LD_INT 10
43742: PUSH
43743: LD_INT 20
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43751: LD_VAR 0 6
43755: PPUSH
43756: CALL_OW 264
43760: PUSH
43761: LD_INT 9
43763: PUSH
43764: EMPTY
43765: LIST
43766: IN
43767: IFFALSE 43788
// points := [ 5 , 70 , 20 ] ;
43769: LD_ADDR_VAR 0 9
43773: PUSH
43774: LD_INT 5
43776: PUSH
43777: LD_INT 70
43779: PUSH
43780: LD_INT 20
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43788: LD_VAR 0 6
43792: PPUSH
43793: CALL_OW 264
43797: PUSH
43798: LD_INT 10
43800: PUSH
43801: EMPTY
43802: LIST
43803: IN
43804: IFFALSE 43825
// points := [ 35 , 110 , 70 ] ;
43806: LD_ADDR_VAR 0 9
43810: PUSH
43811: LD_INT 35
43813: PUSH
43814: LD_INT 110
43816: PUSH
43817: LD_INT 70
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: LIST
43824: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43825: LD_VAR 0 6
43829: PPUSH
43830: CALL_OW 265
43834: PUSH
43835: LD_INT 25
43837: EQUAL
43838: IFFALSE 43859
// points := [ 80 , 65 , 100 ] ;
43840: LD_ADDR_VAR 0 9
43844: PUSH
43845: LD_INT 80
43847: PUSH
43848: LD_INT 65
43850: PUSH
43851: LD_INT 100
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43859: LD_VAR 0 6
43863: PPUSH
43864: CALL_OW 263
43868: PUSH
43869: LD_INT 1
43871: EQUAL
43872: IFFALSE 43907
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43874: LD_ADDR_VAR 0 10
43878: PUSH
43879: LD_VAR 0 10
43883: PUSH
43884: LD_VAR 0 6
43888: PPUSH
43889: CALL_OW 311
43893: PPUSH
43894: LD_INT 3
43896: PPUSH
43897: CALL_OW 259
43901: PUSH
43902: LD_INT 4
43904: MUL
43905: MUL
43906: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43907: LD_VAR 0 6
43911: PPUSH
43912: CALL_OW 263
43916: PUSH
43917: LD_INT 2
43919: EQUAL
43920: IFFALSE 43971
// begin j := IsControledBy ( i ) ;
43922: LD_ADDR_VAR 0 7
43926: PUSH
43927: LD_VAR 0 6
43931: PPUSH
43932: CALL_OW 312
43936: ST_TO_ADDR
// if j then
43937: LD_VAR 0 7
43941: IFFALSE 43971
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43943: LD_ADDR_VAR 0 10
43947: PUSH
43948: LD_VAR 0 10
43952: PUSH
43953: LD_VAR 0 7
43957: PPUSH
43958: LD_INT 3
43960: PPUSH
43961: CALL_OW 259
43965: PUSH
43966: LD_INT 3
43968: MUL
43969: MUL
43970: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43971: LD_VAR 0 6
43975: PPUSH
43976: CALL_OW 264
43980: PUSH
43981: LD_INT 5
43983: PUSH
43984: LD_INT 6
43986: PUSH
43987: LD_INT 46
43989: PUSH
43990: LD_INT 44
43992: PUSH
43993: LD_INT 47
43995: PUSH
43996: LD_INT 45
43998: PUSH
43999: LD_INT 28
44001: PUSH
44002: LD_INT 7
44004: PUSH
44005: LD_INT 27
44007: PUSH
44008: LD_INT 29
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: IN
44023: PUSH
44024: LD_VAR 0 1
44028: PPUSH
44029: LD_INT 52
44031: PPUSH
44032: CALL_OW 321
44036: PUSH
44037: LD_INT 2
44039: EQUAL
44040: AND
44041: IFFALSE 44058
// bpoints := bpoints * 1.2 ;
44043: LD_ADDR_VAR 0 10
44047: PUSH
44048: LD_VAR 0 10
44052: PUSH
44053: LD_REAL  1.20000000000000E+0000
44056: MUL
44057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44058: LD_VAR 0 6
44062: PPUSH
44063: CALL_OW 264
44067: PUSH
44068: LD_INT 6
44070: PUSH
44071: LD_INT 46
44073: PUSH
44074: LD_INT 47
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: IN
44082: IFFALSE 44099
// bpoints := bpoints * 1.2 ;
44084: LD_ADDR_VAR 0 10
44088: PUSH
44089: LD_VAR 0 10
44093: PUSH
44094: LD_REAL  1.20000000000000E+0000
44097: MUL
44098: ST_TO_ADDR
// end ; unit_building :
44099: GO 44113
44101: LD_INT 3
44103: DOUBLE
44104: EQUAL
44105: IFTRUE 44109
44107: GO 44112
44109: POP
// ; end ;
44110: GO 44113
44112: POP
// for j = 1 to 3 do
44113: LD_ADDR_VAR 0 7
44117: PUSH
44118: DOUBLE
44119: LD_INT 1
44121: DEC
44122: ST_TO_ADDR
44123: LD_INT 3
44125: PUSH
44126: FOR_TO
44127: IFFALSE 44180
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44129: LD_ADDR_VAR 0 5
44133: PUSH
44134: LD_VAR 0 5
44138: PPUSH
44139: LD_VAR 0 7
44143: PPUSH
44144: LD_VAR 0 5
44148: PUSH
44149: LD_VAR 0 7
44153: ARRAY
44154: PUSH
44155: LD_VAR 0 9
44159: PUSH
44160: LD_VAR 0 7
44164: ARRAY
44165: PUSH
44166: LD_VAR 0 10
44170: MUL
44171: PLUS
44172: PPUSH
44173: CALL_OW 1
44177: ST_TO_ADDR
44178: GO 44126
44180: POP
44181: POP
// end ;
44182: GO 42661
44184: POP
44185: POP
// result := Replace ( result , 4 , tmp ) ;
44186: LD_ADDR_VAR 0 5
44190: PUSH
44191: LD_VAR 0 5
44195: PPUSH
44196: LD_INT 4
44198: PPUSH
44199: LD_VAR 0 8
44203: PPUSH
44204: CALL_OW 1
44208: ST_TO_ADDR
// end ;
44209: LD_VAR 0 5
44213: RET
// export function DangerAtRange ( unit , range ) ; begin
44214: LD_INT 0
44216: PPUSH
// if not unit then
44217: LD_VAR 0 1
44221: NOT
44222: IFFALSE 44226
// exit ;
44224: GO 44271
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44226: LD_ADDR_VAR 0 3
44230: PUSH
44231: LD_VAR 0 1
44235: PPUSH
44236: CALL_OW 255
44240: PPUSH
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 250
44250: PPUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 251
44260: PPUSH
44261: LD_VAR 0 2
44265: PPUSH
44266: CALL 42513 0 4
44270: ST_TO_ADDR
// end ;
44271: LD_VAR 0 3
44275: RET
// export function DangerInArea ( side , area ) ; begin
44276: LD_INT 0
44278: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44279: LD_ADDR_VAR 0 3
44283: PUSH
44284: LD_VAR 0 2
44288: PPUSH
44289: LD_INT 81
44291: PUSH
44292: LD_VAR 0 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PPUSH
44301: CALL_OW 70
44305: ST_TO_ADDR
// end ;
44306: LD_VAR 0 3
44310: RET
// export function IsExtension ( b ) ; begin
44311: LD_INT 0
44313: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44314: LD_ADDR_VAR 0 2
44318: PUSH
44319: LD_VAR 0 1
44323: PUSH
44324: LD_INT 23
44326: PUSH
44327: LD_INT 20
44329: PUSH
44330: LD_INT 22
44332: PUSH
44333: LD_INT 17
44335: PUSH
44336: LD_INT 24
44338: PUSH
44339: LD_INT 21
44341: PUSH
44342: LD_INT 19
44344: PUSH
44345: LD_INT 16
44347: PUSH
44348: LD_INT 25
44350: PUSH
44351: LD_INT 18
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: IN
44366: ST_TO_ADDR
// end ;
44367: LD_VAR 0 2
44371: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44372: LD_INT 0
44374: PPUSH
44375: PPUSH
44376: PPUSH
// result := [ ] ;
44377: LD_ADDR_VAR 0 4
44381: PUSH
44382: EMPTY
44383: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44384: LD_ADDR_VAR 0 5
44388: PUSH
44389: LD_VAR 0 2
44393: PPUSH
44394: LD_INT 21
44396: PUSH
44397: LD_INT 3
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PPUSH
44404: CALL_OW 70
44408: ST_TO_ADDR
// if not tmp then
44409: LD_VAR 0 5
44413: NOT
44414: IFFALSE 44418
// exit ;
44416: GO 44482
// if checkLink then
44418: LD_VAR 0 3
44422: IFFALSE 44472
// begin for i in tmp do
44424: LD_ADDR_VAR 0 6
44428: PUSH
44429: LD_VAR 0 5
44433: PUSH
44434: FOR_IN
44435: IFFALSE 44470
// if GetBase ( i ) <> base then
44437: LD_VAR 0 6
44441: PPUSH
44442: CALL_OW 274
44446: PUSH
44447: LD_VAR 0 1
44451: NONEQUAL
44452: IFFALSE 44468
// ComLinkToBase ( base , i ) ;
44454: LD_VAR 0 1
44458: PPUSH
44459: LD_VAR 0 6
44463: PPUSH
44464: CALL_OW 169
44468: GO 44434
44470: POP
44471: POP
// end ; result := tmp ;
44472: LD_ADDR_VAR 0 4
44476: PUSH
44477: LD_VAR 0 5
44481: ST_TO_ADDR
// end ;
44482: LD_VAR 0 4
44486: RET
// export function ComComplete ( units , b ) ; var i ; begin
44487: LD_INT 0
44489: PPUSH
44490: PPUSH
// if not units then
44491: LD_VAR 0 1
44495: NOT
44496: IFFALSE 44500
// exit ;
44498: GO 44590
// for i in units do
44500: LD_ADDR_VAR 0 4
44504: PUSH
44505: LD_VAR 0 1
44509: PUSH
44510: FOR_IN
44511: IFFALSE 44588
// if BuildingStatus ( b ) = bs_build then
44513: LD_VAR 0 2
44517: PPUSH
44518: CALL_OW 461
44522: PUSH
44523: LD_INT 1
44525: EQUAL
44526: IFFALSE 44586
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44528: LD_VAR 0 4
44532: PPUSH
44533: LD_STRING h
44535: PUSH
44536: LD_VAR 0 2
44540: PPUSH
44541: CALL_OW 250
44545: PUSH
44546: LD_VAR 0 2
44550: PPUSH
44551: CALL_OW 251
44555: PUSH
44556: LD_VAR 0 2
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: PUSH
44579: EMPTY
44580: LIST
44581: PPUSH
44582: CALL_OW 446
44586: GO 44510
44588: POP
44589: POP
// end ;
44590: LD_VAR 0 3
44594: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44595: LD_INT 0
44597: PPUSH
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
44602: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44603: LD_VAR 0 1
44607: NOT
44608: PUSH
44609: LD_VAR 0 1
44613: PPUSH
44614: CALL_OW 263
44618: PUSH
44619: LD_INT 2
44621: NONEQUAL
44622: OR
44623: IFFALSE 44627
// exit ;
44625: GO 44943
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44627: LD_ADDR_VAR 0 6
44631: PUSH
44632: LD_INT 22
44634: PUSH
44635: LD_VAR 0 1
44639: PPUSH
44640: CALL_OW 255
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: LD_INT 30
44654: PUSH
44655: LD_INT 36
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 34
44664: PUSH
44665: LD_INT 31
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PPUSH
44681: CALL_OW 69
44685: ST_TO_ADDR
// if not tmp then
44686: LD_VAR 0 6
44690: NOT
44691: IFFALSE 44695
// exit ;
44693: GO 44943
// result := [ ] ;
44695: LD_ADDR_VAR 0 2
44699: PUSH
44700: EMPTY
44701: ST_TO_ADDR
// for i in tmp do
44702: LD_ADDR_VAR 0 3
44706: PUSH
44707: LD_VAR 0 6
44711: PUSH
44712: FOR_IN
44713: IFFALSE 44784
// begin t := UnitsInside ( i ) ;
44715: LD_ADDR_VAR 0 4
44719: PUSH
44720: LD_VAR 0 3
44724: PPUSH
44725: CALL_OW 313
44729: ST_TO_ADDR
// if t then
44730: LD_VAR 0 4
44734: IFFALSE 44782
// for j in t do
44736: LD_ADDR_VAR 0 7
44740: PUSH
44741: LD_VAR 0 4
44745: PUSH
44746: FOR_IN
44747: IFFALSE 44780
// result := Replace ( result , result + 1 , j ) ;
44749: LD_ADDR_VAR 0 2
44753: PUSH
44754: LD_VAR 0 2
44758: PPUSH
44759: LD_VAR 0 2
44763: PUSH
44764: LD_INT 1
44766: PLUS
44767: PPUSH
44768: LD_VAR 0 7
44772: PPUSH
44773: CALL_OW 1
44777: ST_TO_ADDR
44778: GO 44746
44780: POP
44781: POP
// end ;
44782: GO 44712
44784: POP
44785: POP
// if not result then
44786: LD_VAR 0 2
44790: NOT
44791: IFFALSE 44795
// exit ;
44793: GO 44943
// mech := result [ 1 ] ;
44795: LD_ADDR_VAR 0 5
44799: PUSH
44800: LD_VAR 0 2
44804: PUSH
44805: LD_INT 1
44807: ARRAY
44808: ST_TO_ADDR
// if result > 1 then
44809: LD_VAR 0 2
44813: PUSH
44814: LD_INT 1
44816: GREATER
44817: IFFALSE 44929
// begin for i = 2 to result do
44819: LD_ADDR_VAR 0 3
44823: PUSH
44824: DOUBLE
44825: LD_INT 2
44827: DEC
44828: ST_TO_ADDR
44829: LD_VAR 0 2
44833: PUSH
44834: FOR_TO
44835: IFFALSE 44927
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44837: LD_ADDR_VAR 0 4
44841: PUSH
44842: LD_VAR 0 2
44846: PUSH
44847: LD_VAR 0 3
44851: ARRAY
44852: PPUSH
44853: LD_INT 3
44855: PPUSH
44856: CALL_OW 259
44860: PUSH
44861: LD_VAR 0 2
44865: PUSH
44866: LD_VAR 0 3
44870: ARRAY
44871: PPUSH
44872: CALL_OW 432
44876: MINUS
44877: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44878: LD_VAR 0 4
44882: PUSH
44883: LD_VAR 0 5
44887: PPUSH
44888: LD_INT 3
44890: PPUSH
44891: CALL_OW 259
44895: PUSH
44896: LD_VAR 0 5
44900: PPUSH
44901: CALL_OW 432
44905: MINUS
44906: GREATEREQUAL
44907: IFFALSE 44925
// mech := result [ i ] ;
44909: LD_ADDR_VAR 0 5
44913: PUSH
44914: LD_VAR 0 2
44918: PUSH
44919: LD_VAR 0 3
44923: ARRAY
44924: ST_TO_ADDR
// end ;
44925: GO 44834
44927: POP
44928: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44929: LD_VAR 0 1
44933: PPUSH
44934: LD_VAR 0 5
44938: PPUSH
44939: CALL_OW 135
// end ;
44943: LD_VAR 0 2
44947: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44948: LD_INT 0
44950: PPUSH
44951: PPUSH
44952: PPUSH
44953: PPUSH
44954: PPUSH
44955: PPUSH
44956: PPUSH
44957: PPUSH
44958: PPUSH
44959: PPUSH
44960: PPUSH
44961: PPUSH
44962: PPUSH
// result := [ ] ;
44963: LD_ADDR_VAR 0 7
44967: PUSH
44968: EMPTY
44969: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44970: LD_VAR 0 1
44974: PPUSH
44975: CALL_OW 266
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: IN
44990: NOT
44991: IFFALSE 44995
// exit ;
44993: GO 46629
// if name then
44995: LD_VAR 0 3
44999: IFFALSE 45015
// SetBName ( base_dep , name ) ;
45001: LD_VAR 0 1
45005: PPUSH
45006: LD_VAR 0 3
45010: PPUSH
45011: CALL_OW 500
// base := GetBase ( base_dep ) ;
45015: LD_ADDR_VAR 0 15
45019: PUSH
45020: LD_VAR 0 1
45024: PPUSH
45025: CALL_OW 274
45029: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45030: LD_ADDR_VAR 0 16
45034: PUSH
45035: LD_VAR 0 1
45039: PPUSH
45040: CALL_OW 255
45044: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45045: LD_ADDR_VAR 0 17
45049: PUSH
45050: LD_VAR 0 1
45054: PPUSH
45055: CALL_OW 248
45059: ST_TO_ADDR
// if sources then
45060: LD_VAR 0 5
45064: IFFALSE 45111
// for i = 1 to 3 do
45066: LD_ADDR_VAR 0 8
45070: PUSH
45071: DOUBLE
45072: LD_INT 1
45074: DEC
45075: ST_TO_ADDR
45076: LD_INT 3
45078: PUSH
45079: FOR_TO
45080: IFFALSE 45109
// AddResourceType ( base , i , sources [ i ] ) ;
45082: LD_VAR 0 15
45086: PPUSH
45087: LD_VAR 0 8
45091: PPUSH
45092: LD_VAR 0 5
45096: PUSH
45097: LD_VAR 0 8
45101: ARRAY
45102: PPUSH
45103: CALL_OW 276
45107: GO 45079
45109: POP
45110: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45111: LD_ADDR_VAR 0 18
45115: PUSH
45116: LD_VAR 0 15
45120: PPUSH
45121: LD_VAR 0 2
45125: PPUSH
45126: LD_INT 1
45128: PPUSH
45129: CALL 44372 0 3
45133: ST_TO_ADDR
// InitHc ;
45134: CALL_OW 19
// InitUc ;
45138: CALL_OW 18
// uc_side := side ;
45142: LD_ADDR_OWVAR 20
45146: PUSH
45147: LD_VAR 0 16
45151: ST_TO_ADDR
// uc_nation := nation ;
45152: LD_ADDR_OWVAR 21
45156: PUSH
45157: LD_VAR 0 17
45161: ST_TO_ADDR
// if buildings then
45162: LD_VAR 0 18
45166: IFFALSE 46488
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45168: LD_ADDR_VAR 0 19
45172: PUSH
45173: LD_VAR 0 18
45177: PPUSH
45178: LD_INT 2
45180: PUSH
45181: LD_INT 30
45183: PUSH
45184: LD_INT 29
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 30
45193: PUSH
45194: LD_INT 30
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: LIST
45205: PPUSH
45206: CALL_OW 72
45210: ST_TO_ADDR
// if tmp then
45211: LD_VAR 0 19
45215: IFFALSE 45263
// for i in tmp do
45217: LD_ADDR_VAR 0 8
45221: PUSH
45222: LD_VAR 0 19
45226: PUSH
45227: FOR_IN
45228: IFFALSE 45261
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45230: LD_VAR 0 8
45234: PPUSH
45235: CALL_OW 250
45239: PPUSH
45240: LD_VAR 0 8
45244: PPUSH
45245: CALL_OW 251
45249: PPUSH
45250: LD_VAR 0 16
45254: PPUSH
45255: CALL_OW 441
45259: GO 45227
45261: POP
45262: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45263: LD_VAR 0 18
45267: PPUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 30
45273: PUSH
45274: LD_INT 32
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 30
45283: PUSH
45284: LD_INT 33
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: LIST
45295: PPUSH
45296: CALL_OW 72
45300: IFFALSE 45388
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45302: LD_ADDR_VAR 0 8
45306: PUSH
45307: LD_VAR 0 18
45311: PPUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 30
45317: PUSH
45318: LD_INT 32
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 30
45327: PUSH
45328: LD_INT 33
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: PPUSH
45340: CALL_OW 72
45344: PUSH
45345: FOR_IN
45346: IFFALSE 45386
// begin if not GetBWeapon ( i ) then
45348: LD_VAR 0 8
45352: PPUSH
45353: CALL_OW 269
45357: NOT
45358: IFFALSE 45384
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45360: LD_VAR 0 8
45364: PPUSH
45365: LD_VAR 0 8
45369: PPUSH
45370: LD_VAR 0 2
45374: PPUSH
45375: CALL 46634 0 2
45379: PPUSH
45380: CALL_OW 431
// end ;
45384: GO 45345
45386: POP
45387: POP
// end ; for i = 1 to personel do
45388: LD_ADDR_VAR 0 8
45392: PUSH
45393: DOUBLE
45394: LD_INT 1
45396: DEC
45397: ST_TO_ADDR
45398: LD_VAR 0 6
45402: PUSH
45403: FOR_TO
45404: IFFALSE 46468
// begin if i > 4 then
45406: LD_VAR 0 8
45410: PUSH
45411: LD_INT 4
45413: GREATER
45414: IFFALSE 45418
// break ;
45416: GO 46468
// case i of 1 :
45418: LD_VAR 0 8
45422: PUSH
45423: LD_INT 1
45425: DOUBLE
45426: EQUAL
45427: IFTRUE 45431
45429: GO 45511
45431: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45432: LD_ADDR_VAR 0 12
45436: PUSH
45437: LD_VAR 0 18
45441: PPUSH
45442: LD_INT 22
45444: PUSH
45445: LD_VAR 0 16
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 58
45456: PUSH
45457: EMPTY
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 30
45465: PUSH
45466: LD_INT 32
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 30
45475: PUSH
45476: LD_INT 4
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 30
45485: PUSH
45486: LD_INT 5
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: LIST
45503: PPUSH
45504: CALL_OW 72
45508: ST_TO_ADDR
45509: GO 45733
45511: LD_INT 2
45513: DOUBLE
45514: EQUAL
45515: IFTRUE 45519
45517: GO 45581
45519: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45520: LD_ADDR_VAR 0 12
45524: PUSH
45525: LD_VAR 0 18
45529: PPUSH
45530: LD_INT 22
45532: PUSH
45533: LD_VAR 0 16
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 30
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 30
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PPUSH
45574: CALL_OW 72
45578: ST_TO_ADDR
45579: GO 45733
45581: LD_INT 3
45583: DOUBLE
45584: EQUAL
45585: IFTRUE 45589
45587: GO 45651
45589: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45590: LD_ADDR_VAR 0 12
45594: PUSH
45595: LD_VAR 0 18
45599: PPUSH
45600: LD_INT 22
45602: PUSH
45603: LD_VAR 0 16
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 30
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 30
45627: PUSH
45628: LD_INT 3
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PPUSH
45644: CALL_OW 72
45648: ST_TO_ADDR
45649: GO 45733
45651: LD_INT 4
45653: DOUBLE
45654: EQUAL
45655: IFTRUE 45659
45657: GO 45732
45659: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45660: LD_ADDR_VAR 0 12
45664: PUSH
45665: LD_VAR 0 18
45669: PPUSH
45670: LD_INT 22
45672: PUSH
45673: LD_VAR 0 16
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: LD_INT 30
45687: PUSH
45688: LD_INT 6
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 30
45697: PUSH
45698: LD_INT 7
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 30
45707: PUSH
45708: LD_INT 8
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PPUSH
45725: CALL_OW 72
45729: ST_TO_ADDR
45730: GO 45733
45732: POP
// if i = 1 then
45733: LD_VAR 0 8
45737: PUSH
45738: LD_INT 1
45740: EQUAL
45741: IFFALSE 45852
// begin tmp := [ ] ;
45743: LD_ADDR_VAR 0 19
45747: PUSH
45748: EMPTY
45749: ST_TO_ADDR
// for j in f do
45750: LD_ADDR_VAR 0 9
45754: PUSH
45755: LD_VAR 0 12
45759: PUSH
45760: FOR_IN
45761: IFFALSE 45834
// if GetBType ( j ) = b_bunker then
45763: LD_VAR 0 9
45767: PPUSH
45768: CALL_OW 266
45772: PUSH
45773: LD_INT 32
45775: EQUAL
45776: IFFALSE 45803
// tmp := Insert ( tmp , 1 , j ) else
45778: LD_ADDR_VAR 0 19
45782: PUSH
45783: LD_VAR 0 19
45787: PPUSH
45788: LD_INT 1
45790: PPUSH
45791: LD_VAR 0 9
45795: PPUSH
45796: CALL_OW 2
45800: ST_TO_ADDR
45801: GO 45832
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45803: LD_ADDR_VAR 0 19
45807: PUSH
45808: LD_VAR 0 19
45812: PPUSH
45813: LD_VAR 0 19
45817: PUSH
45818: LD_INT 1
45820: PLUS
45821: PPUSH
45822: LD_VAR 0 9
45826: PPUSH
45827: CALL_OW 2
45831: ST_TO_ADDR
45832: GO 45760
45834: POP
45835: POP
// if tmp then
45836: LD_VAR 0 19
45840: IFFALSE 45852
// f := tmp ;
45842: LD_ADDR_VAR 0 12
45846: PUSH
45847: LD_VAR 0 19
45851: ST_TO_ADDR
// end ; x := personel [ i ] ;
45852: LD_ADDR_VAR 0 13
45856: PUSH
45857: LD_VAR 0 6
45861: PUSH
45862: LD_VAR 0 8
45866: ARRAY
45867: ST_TO_ADDR
// if x = - 1 then
45868: LD_VAR 0 13
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: EQUAL
45877: IFFALSE 46086
// begin for j in f do
45879: LD_ADDR_VAR 0 9
45883: PUSH
45884: LD_VAR 0 12
45888: PUSH
45889: FOR_IN
45890: IFFALSE 46082
// repeat InitHc ;
45892: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45896: LD_VAR 0 9
45900: PPUSH
45901: CALL_OW 266
45905: PUSH
45906: LD_INT 5
45908: EQUAL
45909: IFFALSE 45979
// begin if UnitsInside ( j ) < 3 then
45911: LD_VAR 0 9
45915: PPUSH
45916: CALL_OW 313
45920: PUSH
45921: LD_INT 3
45923: LESS
45924: IFFALSE 45960
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45926: LD_INT 0
45928: PPUSH
45929: LD_INT 5
45931: PUSH
45932: LD_INT 8
45934: PUSH
45935: LD_INT 9
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: PUSH
45943: LD_VAR 0 17
45947: ARRAY
45948: PPUSH
45949: LD_VAR 0 4
45953: PPUSH
45954: CALL_OW 380
45958: GO 45977
// PrepareHuman ( false , i , skill ) ;
45960: LD_INT 0
45962: PPUSH
45963: LD_VAR 0 8
45967: PPUSH
45968: LD_VAR 0 4
45972: PPUSH
45973: CALL_OW 380
// end else
45977: GO 45996
// PrepareHuman ( false , i , skill ) ;
45979: LD_INT 0
45981: PPUSH
45982: LD_VAR 0 8
45986: PPUSH
45987: LD_VAR 0 4
45991: PPUSH
45992: CALL_OW 380
// un := CreateHuman ;
45996: LD_ADDR_VAR 0 14
46000: PUSH
46001: CALL_OW 44
46005: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46006: LD_ADDR_VAR 0 7
46010: PUSH
46011: LD_VAR 0 7
46015: PPUSH
46016: LD_INT 1
46018: PPUSH
46019: LD_VAR 0 14
46023: PPUSH
46024: CALL_OW 2
46028: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46029: LD_VAR 0 14
46033: PPUSH
46034: LD_VAR 0 9
46038: PPUSH
46039: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46043: LD_VAR 0 9
46047: PPUSH
46048: CALL_OW 313
46052: PUSH
46053: LD_INT 6
46055: EQUAL
46056: PUSH
46057: LD_VAR 0 9
46061: PPUSH
46062: CALL_OW 266
46066: PUSH
46067: LD_INT 32
46069: PUSH
46070: LD_INT 31
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: IN
46077: OR
46078: IFFALSE 45892
46080: GO 45889
46082: POP
46083: POP
// end else
46084: GO 46466
// for j = 1 to x do
46086: LD_ADDR_VAR 0 9
46090: PUSH
46091: DOUBLE
46092: LD_INT 1
46094: DEC
46095: ST_TO_ADDR
46096: LD_VAR 0 13
46100: PUSH
46101: FOR_TO
46102: IFFALSE 46464
// begin InitHc ;
46104: CALL_OW 19
// if not f then
46108: LD_VAR 0 12
46112: NOT
46113: IFFALSE 46202
// begin PrepareHuman ( false , i , skill ) ;
46115: LD_INT 0
46117: PPUSH
46118: LD_VAR 0 8
46122: PPUSH
46123: LD_VAR 0 4
46127: PPUSH
46128: CALL_OW 380
// un := CreateHuman ;
46132: LD_ADDR_VAR 0 14
46136: PUSH
46137: CALL_OW 44
46141: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46142: LD_ADDR_VAR 0 7
46146: PUSH
46147: LD_VAR 0 7
46151: PPUSH
46152: LD_INT 1
46154: PPUSH
46155: LD_VAR 0 14
46159: PPUSH
46160: CALL_OW 2
46164: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46165: LD_VAR 0 14
46169: PPUSH
46170: LD_VAR 0 1
46174: PPUSH
46175: CALL_OW 250
46179: PPUSH
46180: LD_VAR 0 1
46184: PPUSH
46185: CALL_OW 251
46189: PPUSH
46190: LD_INT 10
46192: PPUSH
46193: LD_INT 0
46195: PPUSH
46196: CALL_OW 50
// continue ;
46200: GO 46101
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46202: LD_VAR 0 12
46206: PUSH
46207: LD_INT 1
46209: ARRAY
46210: PPUSH
46211: CALL_OW 313
46215: PUSH
46216: LD_VAR 0 12
46220: PUSH
46221: LD_INT 1
46223: ARRAY
46224: PPUSH
46225: CALL_OW 266
46229: PUSH
46230: LD_INT 32
46232: PUSH
46233: LD_INT 31
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: IN
46240: AND
46241: PUSH
46242: LD_VAR 0 12
46246: PUSH
46247: LD_INT 1
46249: ARRAY
46250: PPUSH
46251: CALL_OW 313
46255: PUSH
46256: LD_INT 6
46258: EQUAL
46259: OR
46260: IFFALSE 46280
// f := Delete ( f , 1 ) ;
46262: LD_ADDR_VAR 0 12
46266: PUSH
46267: LD_VAR 0 12
46271: PPUSH
46272: LD_INT 1
46274: PPUSH
46275: CALL_OW 3
46279: ST_TO_ADDR
// if not f then
46280: LD_VAR 0 12
46284: NOT
46285: IFFALSE 46303
// begin x := x + 2 ;
46287: LD_ADDR_VAR 0 13
46291: PUSH
46292: LD_VAR 0 13
46296: PUSH
46297: LD_INT 2
46299: PLUS
46300: ST_TO_ADDR
// continue ;
46301: GO 46101
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46303: LD_VAR 0 12
46307: PUSH
46308: LD_INT 1
46310: ARRAY
46311: PPUSH
46312: CALL_OW 266
46316: PUSH
46317: LD_INT 5
46319: EQUAL
46320: IFFALSE 46394
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46322: LD_VAR 0 12
46326: PUSH
46327: LD_INT 1
46329: ARRAY
46330: PPUSH
46331: CALL_OW 313
46335: PUSH
46336: LD_INT 3
46338: LESS
46339: IFFALSE 46375
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46341: LD_INT 0
46343: PPUSH
46344: LD_INT 5
46346: PUSH
46347: LD_INT 8
46349: PUSH
46350: LD_INT 9
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: PUSH
46358: LD_VAR 0 17
46362: ARRAY
46363: PPUSH
46364: LD_VAR 0 4
46368: PPUSH
46369: CALL_OW 380
46373: GO 46392
// PrepareHuman ( false , i , skill ) ;
46375: LD_INT 0
46377: PPUSH
46378: LD_VAR 0 8
46382: PPUSH
46383: LD_VAR 0 4
46387: PPUSH
46388: CALL_OW 380
// end else
46392: GO 46411
// PrepareHuman ( false , i , skill ) ;
46394: LD_INT 0
46396: PPUSH
46397: LD_VAR 0 8
46401: PPUSH
46402: LD_VAR 0 4
46406: PPUSH
46407: CALL_OW 380
// un := CreateHuman ;
46411: LD_ADDR_VAR 0 14
46415: PUSH
46416: CALL_OW 44
46420: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46421: LD_ADDR_VAR 0 7
46425: PUSH
46426: LD_VAR 0 7
46430: PPUSH
46431: LD_INT 1
46433: PPUSH
46434: LD_VAR 0 14
46438: PPUSH
46439: CALL_OW 2
46443: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46444: LD_VAR 0 14
46448: PPUSH
46449: LD_VAR 0 12
46453: PUSH
46454: LD_INT 1
46456: ARRAY
46457: PPUSH
46458: CALL_OW 52
// end ;
46462: GO 46101
46464: POP
46465: POP
// end ;
46466: GO 45403
46468: POP
46469: POP
// result := result ^ buildings ;
46470: LD_ADDR_VAR 0 7
46474: PUSH
46475: LD_VAR 0 7
46479: PUSH
46480: LD_VAR 0 18
46484: ADD
46485: ST_TO_ADDR
// end else
46486: GO 46629
// begin for i = 1 to personel do
46488: LD_ADDR_VAR 0 8
46492: PUSH
46493: DOUBLE
46494: LD_INT 1
46496: DEC
46497: ST_TO_ADDR
46498: LD_VAR 0 6
46502: PUSH
46503: FOR_TO
46504: IFFALSE 46627
// begin if i > 4 then
46506: LD_VAR 0 8
46510: PUSH
46511: LD_INT 4
46513: GREATER
46514: IFFALSE 46518
// break ;
46516: GO 46627
// x := personel [ i ] ;
46518: LD_ADDR_VAR 0 13
46522: PUSH
46523: LD_VAR 0 6
46527: PUSH
46528: LD_VAR 0 8
46532: ARRAY
46533: ST_TO_ADDR
// if x = - 1 then
46534: LD_VAR 0 13
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: EQUAL
46543: IFFALSE 46547
// continue ;
46545: GO 46503
// PrepareHuman ( false , i , skill ) ;
46547: LD_INT 0
46549: PPUSH
46550: LD_VAR 0 8
46554: PPUSH
46555: LD_VAR 0 4
46559: PPUSH
46560: CALL_OW 380
// un := CreateHuman ;
46564: LD_ADDR_VAR 0 14
46568: PUSH
46569: CALL_OW 44
46573: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46574: LD_VAR 0 14
46578: PPUSH
46579: LD_VAR 0 1
46583: PPUSH
46584: CALL_OW 250
46588: PPUSH
46589: LD_VAR 0 1
46593: PPUSH
46594: CALL_OW 251
46598: PPUSH
46599: LD_INT 10
46601: PPUSH
46602: LD_INT 0
46604: PPUSH
46605: CALL_OW 50
// result := result ^ un ;
46609: LD_ADDR_VAR 0 7
46613: PUSH
46614: LD_VAR 0 7
46618: PUSH
46619: LD_VAR 0 14
46623: ADD
46624: ST_TO_ADDR
// end ;
46625: GO 46503
46627: POP
46628: POP
// end ; end ;
46629: LD_VAR 0 7
46633: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46634: LD_INT 0
46636: PPUSH
46637: PPUSH
46638: PPUSH
46639: PPUSH
46640: PPUSH
46641: PPUSH
46642: PPUSH
46643: PPUSH
46644: PPUSH
46645: PPUSH
46646: PPUSH
46647: PPUSH
46648: PPUSH
46649: PPUSH
46650: PPUSH
46651: PPUSH
// result := false ;
46652: LD_ADDR_VAR 0 3
46656: PUSH
46657: LD_INT 0
46659: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46660: LD_VAR 0 1
46664: NOT
46665: PUSH
46666: LD_VAR 0 1
46670: PPUSH
46671: CALL_OW 266
46675: PUSH
46676: LD_INT 32
46678: PUSH
46679: LD_INT 33
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: IN
46686: NOT
46687: OR
46688: IFFALSE 46692
// exit ;
46690: GO 47801
// nat := GetNation ( tower ) ;
46692: LD_ADDR_VAR 0 12
46696: PUSH
46697: LD_VAR 0 1
46701: PPUSH
46702: CALL_OW 248
46706: ST_TO_ADDR
// side := GetSide ( tower ) ;
46707: LD_ADDR_VAR 0 16
46711: PUSH
46712: LD_VAR 0 1
46716: PPUSH
46717: CALL_OW 255
46721: ST_TO_ADDR
// x := GetX ( tower ) ;
46722: LD_ADDR_VAR 0 10
46726: PUSH
46727: LD_VAR 0 1
46731: PPUSH
46732: CALL_OW 250
46736: ST_TO_ADDR
// y := GetY ( tower ) ;
46737: LD_ADDR_VAR 0 11
46741: PUSH
46742: LD_VAR 0 1
46746: PPUSH
46747: CALL_OW 251
46751: ST_TO_ADDR
// if not x or not y then
46752: LD_VAR 0 10
46756: NOT
46757: PUSH
46758: LD_VAR 0 11
46762: NOT
46763: OR
46764: IFFALSE 46768
// exit ;
46766: GO 47801
// weapon := 0 ;
46768: LD_ADDR_VAR 0 18
46772: PUSH
46773: LD_INT 0
46775: ST_TO_ADDR
// fac_list := [ ] ;
46776: LD_ADDR_VAR 0 17
46780: PUSH
46781: EMPTY
46782: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46783: LD_ADDR_VAR 0 6
46787: PUSH
46788: LD_VAR 0 1
46792: PPUSH
46793: CALL_OW 274
46797: PPUSH
46798: LD_VAR 0 2
46802: PPUSH
46803: LD_INT 0
46805: PPUSH
46806: CALL 44372 0 3
46810: PPUSH
46811: LD_INT 30
46813: PUSH
46814: LD_INT 3
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PPUSH
46821: CALL_OW 72
46825: ST_TO_ADDR
// if not factories then
46826: LD_VAR 0 6
46830: NOT
46831: IFFALSE 46835
// exit ;
46833: GO 47801
// for i in factories do
46835: LD_ADDR_VAR 0 8
46839: PUSH
46840: LD_VAR 0 6
46844: PUSH
46845: FOR_IN
46846: IFFALSE 46871
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46848: LD_ADDR_VAR 0 17
46852: PUSH
46853: LD_VAR 0 17
46857: PUSH
46858: LD_VAR 0 8
46862: PPUSH
46863: CALL_OW 478
46867: UNION
46868: ST_TO_ADDR
46869: GO 46845
46871: POP
46872: POP
// if not fac_list then
46873: LD_VAR 0 17
46877: NOT
46878: IFFALSE 46882
// exit ;
46880: GO 47801
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46882: LD_ADDR_VAR 0 5
46886: PUSH
46887: LD_INT 4
46889: PUSH
46890: LD_INT 5
46892: PUSH
46893: LD_INT 9
46895: PUSH
46896: LD_INT 10
46898: PUSH
46899: LD_INT 6
46901: PUSH
46902: LD_INT 7
46904: PUSH
46905: LD_INT 11
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 27
46919: PUSH
46920: LD_INT 28
46922: PUSH
46923: LD_INT 26
46925: PUSH
46926: LD_INT 30
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 43
46937: PUSH
46938: LD_INT 44
46940: PUSH
46941: LD_INT 46
46943: PUSH
46944: LD_INT 45
46946: PUSH
46947: LD_INT 47
46949: PUSH
46950: LD_INT 49
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: PUSH
46966: LD_VAR 0 12
46970: ARRAY
46971: ST_TO_ADDR
// list := list isect fac_list ;
46972: LD_ADDR_VAR 0 5
46976: PUSH
46977: LD_VAR 0 5
46981: PUSH
46982: LD_VAR 0 17
46986: ISECT
46987: ST_TO_ADDR
// if not list then
46988: LD_VAR 0 5
46992: NOT
46993: IFFALSE 46997
// exit ;
46995: GO 47801
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46997: LD_VAR 0 12
47001: PUSH
47002: LD_INT 3
47004: EQUAL
47005: PUSH
47006: LD_INT 49
47008: PUSH
47009: LD_VAR 0 5
47013: IN
47014: AND
47015: PUSH
47016: LD_INT 31
47018: PPUSH
47019: LD_VAR 0 16
47023: PPUSH
47024: CALL_OW 321
47028: PUSH
47029: LD_INT 2
47031: EQUAL
47032: AND
47033: IFFALSE 47093
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47035: LD_INT 22
47037: PUSH
47038: LD_VAR 0 16
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 35
47049: PUSH
47050: LD_INT 49
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 91
47059: PUSH
47060: LD_VAR 0 1
47064: PUSH
47065: LD_INT 10
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: LIST
47077: PPUSH
47078: CALL_OW 69
47082: NOT
47083: IFFALSE 47093
// weapon := ru_time_lapser ;
47085: LD_ADDR_VAR 0 18
47089: PUSH
47090: LD_INT 49
47092: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47093: LD_VAR 0 12
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: IN
47108: PUSH
47109: LD_INT 11
47111: PUSH
47112: LD_VAR 0 5
47116: IN
47117: PUSH
47118: LD_INT 30
47120: PUSH
47121: LD_VAR 0 5
47125: IN
47126: OR
47127: AND
47128: PUSH
47129: LD_INT 6
47131: PPUSH
47132: LD_VAR 0 16
47136: PPUSH
47137: CALL_OW 321
47141: PUSH
47142: LD_INT 2
47144: EQUAL
47145: AND
47146: IFFALSE 47311
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47148: LD_INT 22
47150: PUSH
47151: LD_VAR 0 16
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: LD_INT 35
47165: PUSH
47166: LD_INT 11
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 35
47175: PUSH
47176: LD_INT 30
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 91
47190: PUSH
47191: LD_VAR 0 1
47195: PUSH
47196: LD_INT 18
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: PPUSH
47209: CALL_OW 69
47213: NOT
47214: PUSH
47215: LD_INT 22
47217: PUSH
47218: LD_VAR 0 16
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 30
47232: PUSH
47233: LD_INT 32
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 30
47242: PUSH
47243: LD_INT 33
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 91
47257: PUSH
47258: LD_VAR 0 1
47262: PUSH
47263: LD_INT 12
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: LIST
47275: PUSH
47276: EMPTY
47277: LIST
47278: PPUSH
47279: CALL_OW 69
47283: PUSH
47284: LD_INT 2
47286: GREATER
47287: AND
47288: IFFALSE 47311
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47290: LD_ADDR_VAR 0 18
47294: PUSH
47295: LD_INT 11
47297: PUSH
47298: LD_INT 30
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_VAR 0 12
47309: ARRAY
47310: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47311: LD_VAR 0 18
47315: NOT
47316: PUSH
47317: LD_INT 40
47319: PPUSH
47320: LD_VAR 0 16
47324: PPUSH
47325: CALL_OW 321
47329: PUSH
47330: LD_INT 2
47332: EQUAL
47333: AND
47334: PUSH
47335: LD_INT 7
47337: PUSH
47338: LD_VAR 0 5
47342: IN
47343: PUSH
47344: LD_INT 28
47346: PUSH
47347: LD_VAR 0 5
47351: IN
47352: OR
47353: PUSH
47354: LD_INT 45
47356: PUSH
47357: LD_VAR 0 5
47361: IN
47362: OR
47363: AND
47364: IFFALSE 47618
// begin hex := GetHexInfo ( x , y ) ;
47366: LD_ADDR_VAR 0 4
47370: PUSH
47371: LD_VAR 0 10
47375: PPUSH
47376: LD_VAR 0 11
47380: PPUSH
47381: CALL_OW 546
47385: ST_TO_ADDR
// if hex [ 1 ] then
47386: LD_VAR 0 4
47390: PUSH
47391: LD_INT 1
47393: ARRAY
47394: IFFALSE 47398
// exit ;
47396: GO 47801
// height := hex [ 2 ] ;
47398: LD_ADDR_VAR 0 15
47402: PUSH
47403: LD_VAR 0 4
47407: PUSH
47408: LD_INT 2
47410: ARRAY
47411: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47412: LD_ADDR_VAR 0 14
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: LD_INT 5
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: ST_TO_ADDR
// for i in tmp do
47435: LD_ADDR_VAR 0 8
47439: PUSH
47440: LD_VAR 0 14
47444: PUSH
47445: FOR_IN
47446: IFFALSE 47616
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47448: LD_ADDR_VAR 0 9
47452: PUSH
47453: LD_VAR 0 10
47457: PPUSH
47458: LD_VAR 0 8
47462: PPUSH
47463: LD_INT 5
47465: PPUSH
47466: CALL_OW 272
47470: PUSH
47471: LD_VAR 0 11
47475: PPUSH
47476: LD_VAR 0 8
47480: PPUSH
47481: LD_INT 5
47483: PPUSH
47484: CALL_OW 273
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47493: LD_VAR 0 9
47497: PUSH
47498: LD_INT 1
47500: ARRAY
47501: PPUSH
47502: LD_VAR 0 9
47506: PUSH
47507: LD_INT 2
47509: ARRAY
47510: PPUSH
47511: CALL_OW 488
47515: IFFALSE 47614
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47517: LD_ADDR_VAR 0 4
47521: PUSH
47522: LD_VAR 0 9
47526: PUSH
47527: LD_INT 1
47529: ARRAY
47530: PPUSH
47531: LD_VAR 0 9
47535: PUSH
47536: LD_INT 2
47538: ARRAY
47539: PPUSH
47540: CALL_OW 546
47544: ST_TO_ADDR
// if hex [ 1 ] then
47545: LD_VAR 0 4
47549: PUSH
47550: LD_INT 1
47552: ARRAY
47553: IFFALSE 47557
// continue ;
47555: GO 47445
// h := hex [ 2 ] ;
47557: LD_ADDR_VAR 0 13
47561: PUSH
47562: LD_VAR 0 4
47566: PUSH
47567: LD_INT 2
47569: ARRAY
47570: ST_TO_ADDR
// if h + 7 < height then
47571: LD_VAR 0 13
47575: PUSH
47576: LD_INT 7
47578: PLUS
47579: PUSH
47580: LD_VAR 0 15
47584: LESS
47585: IFFALSE 47614
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47587: LD_ADDR_VAR 0 18
47591: PUSH
47592: LD_INT 7
47594: PUSH
47595: LD_INT 28
47597: PUSH
47598: LD_INT 45
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: PUSH
47606: LD_VAR 0 12
47610: ARRAY
47611: ST_TO_ADDR
// break ;
47612: GO 47616
// end ; end ; end ;
47614: GO 47445
47616: POP
47617: POP
// end ; if not weapon then
47618: LD_VAR 0 18
47622: NOT
47623: IFFALSE 47683
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47625: LD_ADDR_VAR 0 5
47629: PUSH
47630: LD_VAR 0 5
47634: PUSH
47635: LD_INT 11
47637: PUSH
47638: LD_INT 30
47640: PUSH
47641: LD_INT 49
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: LIST
47648: DIFF
47649: ST_TO_ADDR
// if not list then
47650: LD_VAR 0 5
47654: NOT
47655: IFFALSE 47659
// exit ;
47657: GO 47801
// weapon := list [ rand ( 1 , list ) ] ;
47659: LD_ADDR_VAR 0 18
47663: PUSH
47664: LD_VAR 0 5
47668: PUSH
47669: LD_INT 1
47671: PPUSH
47672: LD_VAR 0 5
47676: PPUSH
47677: CALL_OW 12
47681: ARRAY
47682: ST_TO_ADDR
// end ; if weapon then
47683: LD_VAR 0 18
47687: IFFALSE 47801
// begin tmp := CostOfWeapon ( weapon ) ;
47689: LD_ADDR_VAR 0 14
47693: PUSH
47694: LD_VAR 0 18
47698: PPUSH
47699: CALL_OW 451
47703: ST_TO_ADDR
// j := GetBase ( tower ) ;
47704: LD_ADDR_VAR 0 9
47708: PUSH
47709: LD_VAR 0 1
47713: PPUSH
47714: CALL_OW 274
47718: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47719: LD_VAR 0 9
47723: PPUSH
47724: LD_INT 1
47726: PPUSH
47727: CALL_OW 275
47731: PUSH
47732: LD_VAR 0 14
47736: PUSH
47737: LD_INT 1
47739: ARRAY
47740: GREATEREQUAL
47741: PUSH
47742: LD_VAR 0 9
47746: PPUSH
47747: LD_INT 2
47749: PPUSH
47750: CALL_OW 275
47754: PUSH
47755: LD_VAR 0 14
47759: PUSH
47760: LD_INT 2
47762: ARRAY
47763: GREATEREQUAL
47764: AND
47765: PUSH
47766: LD_VAR 0 9
47770: PPUSH
47771: LD_INT 3
47773: PPUSH
47774: CALL_OW 275
47778: PUSH
47779: LD_VAR 0 14
47783: PUSH
47784: LD_INT 3
47786: ARRAY
47787: GREATEREQUAL
47788: AND
47789: IFFALSE 47801
// result := weapon ;
47791: LD_ADDR_VAR 0 3
47795: PUSH
47796: LD_VAR 0 18
47800: ST_TO_ADDR
// end ; end ;
47801: LD_VAR 0 3
47805: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47806: LD_INT 0
47808: PPUSH
47809: PPUSH
// result := true ;
47810: LD_ADDR_VAR 0 3
47814: PUSH
47815: LD_INT 1
47817: ST_TO_ADDR
// if array1 = array2 then
47818: LD_VAR 0 1
47822: PUSH
47823: LD_VAR 0 2
47827: EQUAL
47828: IFFALSE 47888
// begin for i = 1 to array1 do
47830: LD_ADDR_VAR 0 4
47834: PUSH
47835: DOUBLE
47836: LD_INT 1
47838: DEC
47839: ST_TO_ADDR
47840: LD_VAR 0 1
47844: PUSH
47845: FOR_TO
47846: IFFALSE 47884
// if array1 [ i ] <> array2 [ i ] then
47848: LD_VAR 0 1
47852: PUSH
47853: LD_VAR 0 4
47857: ARRAY
47858: PUSH
47859: LD_VAR 0 2
47863: PUSH
47864: LD_VAR 0 4
47868: ARRAY
47869: NONEQUAL
47870: IFFALSE 47882
// begin result := false ;
47872: LD_ADDR_VAR 0 3
47876: PUSH
47877: LD_INT 0
47879: ST_TO_ADDR
// break ;
47880: GO 47884
// end ;
47882: GO 47845
47884: POP
47885: POP
// end else
47886: GO 47896
// result := false ;
47888: LD_ADDR_VAR 0 3
47892: PUSH
47893: LD_INT 0
47895: ST_TO_ADDR
// end ;
47896: LD_VAR 0 3
47900: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47901: LD_INT 0
47903: PPUSH
47904: PPUSH
// if not array1 or not array2 then
47905: LD_VAR 0 1
47909: NOT
47910: PUSH
47911: LD_VAR 0 2
47915: NOT
47916: OR
47917: IFFALSE 47921
// exit ;
47919: GO 47985
// result := true ;
47921: LD_ADDR_VAR 0 3
47925: PUSH
47926: LD_INT 1
47928: ST_TO_ADDR
// for i = 1 to array1 do
47929: LD_ADDR_VAR 0 4
47933: PUSH
47934: DOUBLE
47935: LD_INT 1
47937: DEC
47938: ST_TO_ADDR
47939: LD_VAR 0 1
47943: PUSH
47944: FOR_TO
47945: IFFALSE 47983
// if array1 [ i ] <> array2 [ i ] then
47947: LD_VAR 0 1
47951: PUSH
47952: LD_VAR 0 4
47956: ARRAY
47957: PUSH
47958: LD_VAR 0 2
47962: PUSH
47963: LD_VAR 0 4
47967: ARRAY
47968: NONEQUAL
47969: IFFALSE 47981
// begin result := false ;
47971: LD_ADDR_VAR 0 3
47975: PUSH
47976: LD_INT 0
47978: ST_TO_ADDR
// break ;
47979: GO 47983
// end ;
47981: GO 47944
47983: POP
47984: POP
// end ;
47985: LD_VAR 0 3
47989: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47990: LD_INT 0
47992: PPUSH
47993: PPUSH
47994: PPUSH
// pom := GetBase ( fac ) ;
47995: LD_ADDR_VAR 0 5
47999: PUSH
48000: LD_VAR 0 1
48004: PPUSH
48005: CALL_OW 274
48009: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48010: LD_ADDR_VAR 0 4
48014: PUSH
48015: LD_VAR 0 2
48019: PUSH
48020: LD_INT 1
48022: ARRAY
48023: PPUSH
48024: LD_VAR 0 2
48028: PUSH
48029: LD_INT 2
48031: ARRAY
48032: PPUSH
48033: LD_VAR 0 2
48037: PUSH
48038: LD_INT 3
48040: ARRAY
48041: PPUSH
48042: LD_VAR 0 2
48046: PUSH
48047: LD_INT 4
48049: ARRAY
48050: PPUSH
48051: CALL_OW 449
48055: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48056: LD_ADDR_VAR 0 3
48060: PUSH
48061: LD_VAR 0 5
48065: PPUSH
48066: LD_INT 1
48068: PPUSH
48069: CALL_OW 275
48073: PUSH
48074: LD_VAR 0 4
48078: PUSH
48079: LD_INT 1
48081: ARRAY
48082: GREATEREQUAL
48083: PUSH
48084: LD_VAR 0 5
48088: PPUSH
48089: LD_INT 2
48091: PPUSH
48092: CALL_OW 275
48096: PUSH
48097: LD_VAR 0 4
48101: PUSH
48102: LD_INT 2
48104: ARRAY
48105: GREATEREQUAL
48106: AND
48107: PUSH
48108: LD_VAR 0 5
48112: PPUSH
48113: LD_INT 3
48115: PPUSH
48116: CALL_OW 275
48120: PUSH
48121: LD_VAR 0 4
48125: PUSH
48126: LD_INT 3
48128: ARRAY
48129: GREATEREQUAL
48130: AND
48131: ST_TO_ADDR
// end ;
48132: LD_VAR 0 3
48136: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48137: LD_INT 0
48139: PPUSH
48140: PPUSH
48141: PPUSH
48142: PPUSH
// pom := GetBase ( building ) ;
48143: LD_ADDR_VAR 0 3
48147: PUSH
48148: LD_VAR 0 1
48152: PPUSH
48153: CALL_OW 274
48157: ST_TO_ADDR
// if not pom then
48158: LD_VAR 0 3
48162: NOT
48163: IFFALSE 48167
// exit ;
48165: GO 48337
// btype := GetBType ( building ) ;
48167: LD_ADDR_VAR 0 5
48171: PUSH
48172: LD_VAR 0 1
48176: PPUSH
48177: CALL_OW 266
48181: ST_TO_ADDR
// if btype = b_armoury then
48182: LD_VAR 0 5
48186: PUSH
48187: LD_INT 4
48189: EQUAL
48190: IFFALSE 48200
// btype := b_barracks ;
48192: LD_ADDR_VAR 0 5
48196: PUSH
48197: LD_INT 5
48199: ST_TO_ADDR
// if btype = b_depot then
48200: LD_VAR 0 5
48204: PUSH
48205: LD_INT 0
48207: EQUAL
48208: IFFALSE 48218
// btype := b_warehouse ;
48210: LD_ADDR_VAR 0 5
48214: PUSH
48215: LD_INT 1
48217: ST_TO_ADDR
// if btype = b_workshop then
48218: LD_VAR 0 5
48222: PUSH
48223: LD_INT 2
48225: EQUAL
48226: IFFALSE 48236
// btype := b_factory ;
48228: LD_ADDR_VAR 0 5
48232: PUSH
48233: LD_INT 3
48235: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48236: LD_ADDR_VAR 0 4
48240: PUSH
48241: LD_VAR 0 5
48245: PPUSH
48246: LD_VAR 0 1
48250: PPUSH
48251: CALL_OW 248
48255: PPUSH
48256: CALL_OW 450
48260: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48261: LD_ADDR_VAR 0 2
48265: PUSH
48266: LD_VAR 0 3
48270: PPUSH
48271: LD_INT 1
48273: PPUSH
48274: CALL_OW 275
48278: PUSH
48279: LD_VAR 0 4
48283: PUSH
48284: LD_INT 1
48286: ARRAY
48287: GREATEREQUAL
48288: PUSH
48289: LD_VAR 0 3
48293: PPUSH
48294: LD_INT 2
48296: PPUSH
48297: CALL_OW 275
48301: PUSH
48302: LD_VAR 0 4
48306: PUSH
48307: LD_INT 2
48309: ARRAY
48310: GREATEREQUAL
48311: AND
48312: PUSH
48313: LD_VAR 0 3
48317: PPUSH
48318: LD_INT 3
48320: PPUSH
48321: CALL_OW 275
48325: PUSH
48326: LD_VAR 0 4
48330: PUSH
48331: LD_INT 3
48333: ARRAY
48334: GREATEREQUAL
48335: AND
48336: ST_TO_ADDR
// end ;
48337: LD_VAR 0 2
48341: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48342: LD_INT 0
48344: PPUSH
48345: PPUSH
48346: PPUSH
// pom := GetBase ( building ) ;
48347: LD_ADDR_VAR 0 4
48351: PUSH
48352: LD_VAR 0 1
48356: PPUSH
48357: CALL_OW 274
48361: ST_TO_ADDR
// if not pom then
48362: LD_VAR 0 4
48366: NOT
48367: IFFALSE 48371
// exit ;
48369: GO 48472
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48371: LD_ADDR_VAR 0 5
48375: PUSH
48376: LD_VAR 0 2
48380: PPUSH
48381: LD_VAR 0 1
48385: PPUSH
48386: CALL_OW 248
48390: PPUSH
48391: CALL_OW 450
48395: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48396: LD_ADDR_VAR 0 3
48400: PUSH
48401: LD_VAR 0 4
48405: PPUSH
48406: LD_INT 1
48408: PPUSH
48409: CALL_OW 275
48413: PUSH
48414: LD_VAR 0 5
48418: PUSH
48419: LD_INT 1
48421: ARRAY
48422: GREATEREQUAL
48423: PUSH
48424: LD_VAR 0 4
48428: PPUSH
48429: LD_INT 2
48431: PPUSH
48432: CALL_OW 275
48436: PUSH
48437: LD_VAR 0 5
48441: PUSH
48442: LD_INT 2
48444: ARRAY
48445: GREATEREQUAL
48446: AND
48447: PUSH
48448: LD_VAR 0 4
48452: PPUSH
48453: LD_INT 3
48455: PPUSH
48456: CALL_OW 275
48460: PUSH
48461: LD_VAR 0 5
48465: PUSH
48466: LD_INT 3
48468: ARRAY
48469: GREATEREQUAL
48470: AND
48471: ST_TO_ADDR
// end ;
48472: LD_VAR 0 3
48476: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48477: LD_INT 0
48479: PPUSH
48480: PPUSH
48481: PPUSH
48482: PPUSH
48483: PPUSH
48484: PPUSH
48485: PPUSH
48486: PPUSH
48487: PPUSH
48488: PPUSH
48489: PPUSH
// result := false ;
48490: LD_ADDR_VAR 0 8
48494: PUSH
48495: LD_INT 0
48497: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48498: LD_VAR 0 5
48502: NOT
48503: PUSH
48504: LD_VAR 0 1
48508: NOT
48509: OR
48510: PUSH
48511: LD_VAR 0 2
48515: NOT
48516: OR
48517: PUSH
48518: LD_VAR 0 3
48522: NOT
48523: OR
48524: IFFALSE 48528
// exit ;
48526: GO 49342
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48528: LD_ADDR_VAR 0 14
48532: PUSH
48533: LD_VAR 0 1
48537: PPUSH
48538: LD_VAR 0 2
48542: PPUSH
48543: LD_VAR 0 3
48547: PPUSH
48548: LD_VAR 0 4
48552: PPUSH
48553: LD_VAR 0 5
48557: PUSH
48558: LD_INT 1
48560: ARRAY
48561: PPUSH
48562: CALL_OW 248
48566: PPUSH
48567: LD_INT 0
48569: PPUSH
48570: CALL 50595 0 6
48574: ST_TO_ADDR
// if not hexes then
48575: LD_VAR 0 14
48579: NOT
48580: IFFALSE 48584
// exit ;
48582: GO 49342
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48584: LD_ADDR_VAR 0 17
48588: PUSH
48589: LD_VAR 0 5
48593: PPUSH
48594: LD_INT 22
48596: PUSH
48597: LD_VAR 0 13
48601: PPUSH
48602: CALL_OW 255
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: LD_INT 30
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 30
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: LIST
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PPUSH
48643: CALL_OW 72
48647: ST_TO_ADDR
// for i = 1 to hexes do
48648: LD_ADDR_VAR 0 9
48652: PUSH
48653: DOUBLE
48654: LD_INT 1
48656: DEC
48657: ST_TO_ADDR
48658: LD_VAR 0 14
48662: PUSH
48663: FOR_TO
48664: IFFALSE 49340
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48666: LD_ADDR_VAR 0 13
48670: PUSH
48671: LD_VAR 0 14
48675: PUSH
48676: LD_VAR 0 9
48680: ARRAY
48681: PUSH
48682: LD_INT 1
48684: ARRAY
48685: PPUSH
48686: LD_VAR 0 14
48690: PUSH
48691: LD_VAR 0 9
48695: ARRAY
48696: PUSH
48697: LD_INT 2
48699: ARRAY
48700: PPUSH
48701: CALL_OW 428
48705: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48706: LD_VAR 0 14
48710: PUSH
48711: LD_VAR 0 9
48715: ARRAY
48716: PUSH
48717: LD_INT 1
48719: ARRAY
48720: PPUSH
48721: LD_VAR 0 14
48725: PUSH
48726: LD_VAR 0 9
48730: ARRAY
48731: PUSH
48732: LD_INT 2
48734: ARRAY
48735: PPUSH
48736: CALL_OW 351
48740: PUSH
48741: LD_VAR 0 14
48745: PUSH
48746: LD_VAR 0 9
48750: ARRAY
48751: PUSH
48752: LD_INT 1
48754: ARRAY
48755: PPUSH
48756: LD_VAR 0 14
48760: PUSH
48761: LD_VAR 0 9
48765: ARRAY
48766: PUSH
48767: LD_INT 2
48769: ARRAY
48770: PPUSH
48771: CALL_OW 488
48775: NOT
48776: OR
48777: PUSH
48778: LD_VAR 0 13
48782: PPUSH
48783: CALL_OW 247
48787: PUSH
48788: LD_INT 3
48790: EQUAL
48791: OR
48792: IFFALSE 48798
// exit ;
48794: POP
48795: POP
48796: GO 49342
// if not tmp then
48798: LD_VAR 0 13
48802: NOT
48803: IFFALSE 48807
// continue ;
48805: GO 48663
// result := true ;
48807: LD_ADDR_VAR 0 8
48811: PUSH
48812: LD_INT 1
48814: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48815: LD_VAR 0 6
48819: PUSH
48820: LD_VAR 0 13
48824: PPUSH
48825: CALL_OW 247
48829: PUSH
48830: LD_INT 2
48832: EQUAL
48833: AND
48834: PUSH
48835: LD_VAR 0 13
48839: PPUSH
48840: CALL_OW 263
48844: PUSH
48845: LD_INT 1
48847: EQUAL
48848: AND
48849: IFFALSE 49013
// begin if IsDrivenBy ( tmp ) then
48851: LD_VAR 0 13
48855: PPUSH
48856: CALL_OW 311
48860: IFFALSE 48864
// continue ;
48862: GO 48663
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48864: LD_VAR 0 6
48868: PPUSH
48869: LD_INT 3
48871: PUSH
48872: LD_INT 60
48874: PUSH
48875: EMPTY
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: LD_INT 55
48887: PUSH
48888: EMPTY
48889: LIST
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PPUSH
48899: CALL_OW 72
48903: IFFALSE 49011
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48905: LD_ADDR_VAR 0 18
48909: PUSH
48910: LD_VAR 0 6
48914: PPUSH
48915: LD_INT 3
48917: PUSH
48918: LD_INT 60
48920: PUSH
48921: EMPTY
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 3
48930: PUSH
48931: LD_INT 55
48933: PUSH
48934: EMPTY
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PPUSH
48945: CALL_OW 72
48949: PUSH
48950: LD_INT 1
48952: ARRAY
48953: ST_TO_ADDR
// if IsInUnit ( driver ) then
48954: LD_VAR 0 18
48958: PPUSH
48959: CALL_OW 310
48963: IFFALSE 48974
// ComExit ( driver ) ;
48965: LD_VAR 0 18
48969: PPUSH
48970: CALL 74396 0 1
// AddComEnterUnit ( driver , tmp ) ;
48974: LD_VAR 0 18
48978: PPUSH
48979: LD_VAR 0 13
48983: PPUSH
48984: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48988: LD_VAR 0 18
48992: PPUSH
48993: LD_VAR 0 7
48997: PPUSH
48998: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49002: LD_VAR 0 18
49006: PPUSH
49007: CALL_OW 181
// end ; continue ;
49011: GO 48663
// end ; if not cleaners or not tmp in cleaners then
49013: LD_VAR 0 6
49017: NOT
49018: PUSH
49019: LD_VAR 0 13
49023: PUSH
49024: LD_VAR 0 6
49028: IN
49029: NOT
49030: OR
49031: IFFALSE 49338
// begin if dep then
49033: LD_VAR 0 17
49037: IFFALSE 49173
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49039: LD_ADDR_VAR 0 16
49043: PUSH
49044: LD_VAR 0 17
49048: PUSH
49049: LD_INT 1
49051: ARRAY
49052: PPUSH
49053: CALL_OW 250
49057: PPUSH
49058: LD_VAR 0 17
49062: PUSH
49063: LD_INT 1
49065: ARRAY
49066: PPUSH
49067: CALL_OW 254
49071: PPUSH
49072: LD_INT 5
49074: PPUSH
49075: CALL_OW 272
49079: PUSH
49080: LD_VAR 0 17
49084: PUSH
49085: LD_INT 1
49087: ARRAY
49088: PPUSH
49089: CALL_OW 251
49093: PPUSH
49094: LD_VAR 0 17
49098: PUSH
49099: LD_INT 1
49101: ARRAY
49102: PPUSH
49103: CALL_OW 254
49107: PPUSH
49108: LD_INT 5
49110: PPUSH
49111: CALL_OW 273
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49120: LD_VAR 0 16
49124: PUSH
49125: LD_INT 1
49127: ARRAY
49128: PPUSH
49129: LD_VAR 0 16
49133: PUSH
49134: LD_INT 2
49136: ARRAY
49137: PPUSH
49138: CALL_OW 488
49142: IFFALSE 49173
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49144: LD_VAR 0 13
49148: PPUSH
49149: LD_VAR 0 16
49153: PUSH
49154: LD_INT 1
49156: ARRAY
49157: PPUSH
49158: LD_VAR 0 16
49162: PUSH
49163: LD_INT 2
49165: ARRAY
49166: PPUSH
49167: CALL_OW 111
// continue ;
49171: GO 48663
// end ; end ; r := GetDir ( tmp ) ;
49173: LD_ADDR_VAR 0 15
49177: PUSH
49178: LD_VAR 0 13
49182: PPUSH
49183: CALL_OW 254
49187: ST_TO_ADDR
// if r = 5 then
49188: LD_VAR 0 15
49192: PUSH
49193: LD_INT 5
49195: EQUAL
49196: IFFALSE 49206
// r := 0 ;
49198: LD_ADDR_VAR 0 15
49202: PUSH
49203: LD_INT 0
49205: ST_TO_ADDR
// for j = r to 5 do
49206: LD_ADDR_VAR 0 10
49210: PUSH
49211: DOUBLE
49212: LD_VAR 0 15
49216: DEC
49217: ST_TO_ADDR
49218: LD_INT 5
49220: PUSH
49221: FOR_TO
49222: IFFALSE 49336
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49224: LD_ADDR_VAR 0 11
49228: PUSH
49229: LD_VAR 0 13
49233: PPUSH
49234: CALL_OW 250
49238: PPUSH
49239: LD_VAR 0 10
49243: PPUSH
49244: LD_INT 2
49246: PPUSH
49247: CALL_OW 272
49251: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49252: LD_ADDR_VAR 0 12
49256: PUSH
49257: LD_VAR 0 13
49261: PPUSH
49262: CALL_OW 251
49266: PPUSH
49267: LD_VAR 0 10
49271: PPUSH
49272: LD_INT 2
49274: PPUSH
49275: CALL_OW 273
49279: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49280: LD_VAR 0 11
49284: PPUSH
49285: LD_VAR 0 12
49289: PPUSH
49290: CALL_OW 488
49294: PUSH
49295: LD_VAR 0 11
49299: PPUSH
49300: LD_VAR 0 12
49304: PPUSH
49305: CALL_OW 428
49309: NOT
49310: AND
49311: IFFALSE 49334
// begin ComMoveXY ( tmp , _x , _y ) ;
49313: LD_VAR 0 13
49317: PPUSH
49318: LD_VAR 0 11
49322: PPUSH
49323: LD_VAR 0 12
49327: PPUSH
49328: CALL_OW 111
// break ;
49332: GO 49336
// end ; end ;
49334: GO 49221
49336: POP
49337: POP
// end ; end ;
49338: GO 48663
49340: POP
49341: POP
// end ;
49342: LD_VAR 0 8
49346: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49347: LD_INT 0
49349: PPUSH
// result := true ;
49350: LD_ADDR_VAR 0 3
49354: PUSH
49355: LD_INT 1
49357: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49358: LD_VAR 0 2
49362: PUSH
49363: LD_INT 24
49365: DOUBLE
49366: EQUAL
49367: IFTRUE 49377
49369: LD_INT 33
49371: DOUBLE
49372: EQUAL
49373: IFTRUE 49377
49375: GO 49402
49377: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49378: LD_ADDR_VAR 0 3
49382: PUSH
49383: LD_INT 32
49385: PPUSH
49386: LD_VAR 0 1
49390: PPUSH
49391: CALL_OW 321
49395: PUSH
49396: LD_INT 2
49398: EQUAL
49399: ST_TO_ADDR
49400: GO 49718
49402: LD_INT 20
49404: DOUBLE
49405: EQUAL
49406: IFTRUE 49410
49408: GO 49435
49410: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49411: LD_ADDR_VAR 0 3
49415: PUSH
49416: LD_INT 6
49418: PPUSH
49419: LD_VAR 0 1
49423: PPUSH
49424: CALL_OW 321
49428: PUSH
49429: LD_INT 2
49431: EQUAL
49432: ST_TO_ADDR
49433: GO 49718
49435: LD_INT 22
49437: DOUBLE
49438: EQUAL
49439: IFTRUE 49449
49441: LD_INT 36
49443: DOUBLE
49444: EQUAL
49445: IFTRUE 49449
49447: GO 49474
49449: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49450: LD_ADDR_VAR 0 3
49454: PUSH
49455: LD_INT 15
49457: PPUSH
49458: LD_VAR 0 1
49462: PPUSH
49463: CALL_OW 321
49467: PUSH
49468: LD_INT 2
49470: EQUAL
49471: ST_TO_ADDR
49472: GO 49718
49474: LD_INT 30
49476: DOUBLE
49477: EQUAL
49478: IFTRUE 49482
49480: GO 49507
49482: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49483: LD_ADDR_VAR 0 3
49487: PUSH
49488: LD_INT 20
49490: PPUSH
49491: LD_VAR 0 1
49495: PPUSH
49496: CALL_OW 321
49500: PUSH
49501: LD_INT 2
49503: EQUAL
49504: ST_TO_ADDR
49505: GO 49718
49507: LD_INT 28
49509: DOUBLE
49510: EQUAL
49511: IFTRUE 49521
49513: LD_INT 21
49515: DOUBLE
49516: EQUAL
49517: IFTRUE 49521
49519: GO 49546
49521: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49522: LD_ADDR_VAR 0 3
49526: PUSH
49527: LD_INT 21
49529: PPUSH
49530: LD_VAR 0 1
49534: PPUSH
49535: CALL_OW 321
49539: PUSH
49540: LD_INT 2
49542: EQUAL
49543: ST_TO_ADDR
49544: GO 49718
49546: LD_INT 16
49548: DOUBLE
49549: EQUAL
49550: IFTRUE 49554
49552: GO 49579
49554: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49555: LD_ADDR_VAR 0 3
49559: PUSH
49560: LD_INT 84
49562: PPUSH
49563: LD_VAR 0 1
49567: PPUSH
49568: CALL_OW 321
49572: PUSH
49573: LD_INT 2
49575: EQUAL
49576: ST_TO_ADDR
49577: GO 49718
49579: LD_INT 19
49581: DOUBLE
49582: EQUAL
49583: IFTRUE 49593
49585: LD_INT 23
49587: DOUBLE
49588: EQUAL
49589: IFTRUE 49593
49591: GO 49618
49593: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49594: LD_ADDR_VAR 0 3
49598: PUSH
49599: LD_INT 83
49601: PPUSH
49602: LD_VAR 0 1
49606: PPUSH
49607: CALL_OW 321
49611: PUSH
49612: LD_INT 2
49614: EQUAL
49615: ST_TO_ADDR
49616: GO 49718
49618: LD_INT 17
49620: DOUBLE
49621: EQUAL
49622: IFTRUE 49626
49624: GO 49651
49626: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49627: LD_ADDR_VAR 0 3
49631: PUSH
49632: LD_INT 39
49634: PPUSH
49635: LD_VAR 0 1
49639: PPUSH
49640: CALL_OW 321
49644: PUSH
49645: LD_INT 2
49647: EQUAL
49648: ST_TO_ADDR
49649: GO 49718
49651: LD_INT 18
49653: DOUBLE
49654: EQUAL
49655: IFTRUE 49659
49657: GO 49684
49659: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49660: LD_ADDR_VAR 0 3
49664: PUSH
49665: LD_INT 40
49667: PPUSH
49668: LD_VAR 0 1
49672: PPUSH
49673: CALL_OW 321
49677: PUSH
49678: LD_INT 2
49680: EQUAL
49681: ST_TO_ADDR
49682: GO 49718
49684: LD_INT 27
49686: DOUBLE
49687: EQUAL
49688: IFTRUE 49692
49690: GO 49717
49692: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49693: LD_ADDR_VAR 0 3
49697: PUSH
49698: LD_INT 35
49700: PPUSH
49701: LD_VAR 0 1
49705: PPUSH
49706: CALL_OW 321
49710: PUSH
49711: LD_INT 2
49713: EQUAL
49714: ST_TO_ADDR
49715: GO 49718
49717: POP
// end ;
49718: LD_VAR 0 3
49722: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49723: LD_INT 0
49725: PPUSH
49726: PPUSH
49727: PPUSH
49728: PPUSH
49729: PPUSH
49730: PPUSH
49731: PPUSH
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
// result := false ;
49736: LD_ADDR_VAR 0 6
49740: PUSH
49741: LD_INT 0
49743: ST_TO_ADDR
// if btype = b_depot then
49744: LD_VAR 0 2
49748: PUSH
49749: LD_INT 0
49751: EQUAL
49752: IFFALSE 49764
// begin result := true ;
49754: LD_ADDR_VAR 0 6
49758: PUSH
49759: LD_INT 1
49761: ST_TO_ADDR
// exit ;
49762: GO 50590
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49764: LD_VAR 0 1
49768: NOT
49769: PUSH
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 266
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: IN
49790: NOT
49791: OR
49792: PUSH
49793: LD_VAR 0 2
49797: NOT
49798: OR
49799: PUSH
49800: LD_VAR 0 5
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: LD_INT 3
49816: PUSH
49817: LD_INT 4
49819: PUSH
49820: LD_INT 5
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: IN
49831: NOT
49832: OR
49833: PUSH
49834: LD_VAR 0 3
49838: PPUSH
49839: LD_VAR 0 4
49843: PPUSH
49844: CALL_OW 488
49848: NOT
49849: OR
49850: IFFALSE 49854
// exit ;
49852: GO 50590
// side := GetSide ( depot ) ;
49854: LD_ADDR_VAR 0 9
49858: PUSH
49859: LD_VAR 0 1
49863: PPUSH
49864: CALL_OW 255
49868: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49869: LD_VAR 0 9
49873: PPUSH
49874: LD_VAR 0 2
49878: PPUSH
49879: CALL 49347 0 2
49883: NOT
49884: IFFALSE 49888
// exit ;
49886: GO 50590
// pom := GetBase ( depot ) ;
49888: LD_ADDR_VAR 0 10
49892: PUSH
49893: LD_VAR 0 1
49897: PPUSH
49898: CALL_OW 274
49902: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49903: LD_ADDR_VAR 0 11
49907: PUSH
49908: LD_VAR 0 2
49912: PPUSH
49913: LD_VAR 0 1
49917: PPUSH
49918: CALL_OW 248
49922: PPUSH
49923: CALL_OW 450
49927: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49928: LD_VAR 0 10
49932: PPUSH
49933: LD_INT 1
49935: PPUSH
49936: CALL_OW 275
49940: PUSH
49941: LD_VAR 0 11
49945: PUSH
49946: LD_INT 1
49948: ARRAY
49949: GREATEREQUAL
49950: PUSH
49951: LD_VAR 0 10
49955: PPUSH
49956: LD_INT 2
49958: PPUSH
49959: CALL_OW 275
49963: PUSH
49964: LD_VAR 0 11
49968: PUSH
49969: LD_INT 2
49971: ARRAY
49972: GREATEREQUAL
49973: AND
49974: PUSH
49975: LD_VAR 0 10
49979: PPUSH
49980: LD_INT 3
49982: PPUSH
49983: CALL_OW 275
49987: PUSH
49988: LD_VAR 0 11
49992: PUSH
49993: LD_INT 3
49995: ARRAY
49996: GREATEREQUAL
49997: AND
49998: NOT
49999: IFFALSE 50003
// exit ;
50001: GO 50590
// if GetBType ( depot ) = b_depot then
50003: LD_VAR 0 1
50007: PPUSH
50008: CALL_OW 266
50012: PUSH
50013: LD_INT 0
50015: EQUAL
50016: IFFALSE 50028
// dist := 28 else
50018: LD_ADDR_VAR 0 14
50022: PUSH
50023: LD_INT 28
50025: ST_TO_ADDR
50026: GO 50036
// dist := 36 ;
50028: LD_ADDR_VAR 0 14
50032: PUSH
50033: LD_INT 36
50035: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50036: LD_VAR 0 1
50040: PPUSH
50041: LD_VAR 0 3
50045: PPUSH
50046: LD_VAR 0 4
50050: PPUSH
50051: CALL_OW 297
50055: PUSH
50056: LD_VAR 0 14
50060: GREATER
50061: IFFALSE 50065
// exit ;
50063: GO 50590
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50065: LD_ADDR_VAR 0 12
50069: PUSH
50070: LD_VAR 0 2
50074: PPUSH
50075: LD_VAR 0 3
50079: PPUSH
50080: LD_VAR 0 4
50084: PPUSH
50085: LD_VAR 0 5
50089: PPUSH
50090: LD_VAR 0 1
50094: PPUSH
50095: CALL_OW 248
50099: PPUSH
50100: LD_INT 0
50102: PPUSH
50103: CALL 50595 0 6
50107: ST_TO_ADDR
// if not hexes then
50108: LD_VAR 0 12
50112: NOT
50113: IFFALSE 50117
// exit ;
50115: GO 50590
// hex := GetHexInfo ( x , y ) ;
50117: LD_ADDR_VAR 0 15
50121: PUSH
50122: LD_VAR 0 3
50126: PPUSH
50127: LD_VAR 0 4
50131: PPUSH
50132: CALL_OW 546
50136: ST_TO_ADDR
// if hex [ 1 ] then
50137: LD_VAR 0 15
50141: PUSH
50142: LD_INT 1
50144: ARRAY
50145: IFFALSE 50149
// exit ;
50147: GO 50590
// height := hex [ 2 ] ;
50149: LD_ADDR_VAR 0 13
50153: PUSH
50154: LD_VAR 0 15
50158: PUSH
50159: LD_INT 2
50161: ARRAY
50162: ST_TO_ADDR
// for i = 1 to hexes do
50163: LD_ADDR_VAR 0 7
50167: PUSH
50168: DOUBLE
50169: LD_INT 1
50171: DEC
50172: ST_TO_ADDR
50173: LD_VAR 0 12
50177: PUSH
50178: FOR_TO
50179: IFFALSE 50509
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50181: LD_VAR 0 12
50185: PUSH
50186: LD_VAR 0 7
50190: ARRAY
50191: PUSH
50192: LD_INT 1
50194: ARRAY
50195: PPUSH
50196: LD_VAR 0 12
50200: PUSH
50201: LD_VAR 0 7
50205: ARRAY
50206: PUSH
50207: LD_INT 2
50209: ARRAY
50210: PPUSH
50211: CALL_OW 488
50215: NOT
50216: PUSH
50217: LD_VAR 0 12
50221: PUSH
50222: LD_VAR 0 7
50226: ARRAY
50227: PUSH
50228: LD_INT 1
50230: ARRAY
50231: PPUSH
50232: LD_VAR 0 12
50236: PUSH
50237: LD_VAR 0 7
50241: ARRAY
50242: PUSH
50243: LD_INT 2
50245: ARRAY
50246: PPUSH
50247: CALL_OW 428
50251: PUSH
50252: LD_INT 0
50254: GREATER
50255: OR
50256: PUSH
50257: LD_VAR 0 12
50261: PUSH
50262: LD_VAR 0 7
50266: ARRAY
50267: PUSH
50268: LD_INT 1
50270: ARRAY
50271: PPUSH
50272: LD_VAR 0 12
50276: PUSH
50277: LD_VAR 0 7
50281: ARRAY
50282: PUSH
50283: LD_INT 2
50285: ARRAY
50286: PPUSH
50287: CALL_OW 351
50291: OR
50292: IFFALSE 50298
// exit ;
50294: POP
50295: POP
50296: GO 50590
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50298: LD_ADDR_VAR 0 8
50302: PUSH
50303: LD_VAR 0 12
50307: PUSH
50308: LD_VAR 0 7
50312: ARRAY
50313: PUSH
50314: LD_INT 1
50316: ARRAY
50317: PPUSH
50318: LD_VAR 0 12
50322: PUSH
50323: LD_VAR 0 7
50327: ARRAY
50328: PUSH
50329: LD_INT 2
50331: ARRAY
50332: PPUSH
50333: CALL_OW 546
50337: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50338: LD_VAR 0 8
50342: PUSH
50343: LD_INT 1
50345: ARRAY
50346: PUSH
50347: LD_VAR 0 8
50351: PUSH
50352: LD_INT 2
50354: ARRAY
50355: PUSH
50356: LD_VAR 0 13
50360: PUSH
50361: LD_INT 2
50363: PLUS
50364: GREATER
50365: OR
50366: PUSH
50367: LD_VAR 0 8
50371: PUSH
50372: LD_INT 2
50374: ARRAY
50375: PUSH
50376: LD_VAR 0 13
50380: PUSH
50381: LD_INT 2
50383: MINUS
50384: LESS
50385: OR
50386: PUSH
50387: LD_VAR 0 8
50391: PUSH
50392: LD_INT 3
50394: ARRAY
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 8
50401: PUSH
50402: LD_INT 9
50404: PUSH
50405: LD_INT 10
50407: PUSH
50408: LD_INT 11
50410: PUSH
50411: LD_INT 12
50413: PUSH
50414: LD_INT 13
50416: PUSH
50417: LD_INT 16
50419: PUSH
50420: LD_INT 17
50422: PUSH
50423: LD_INT 18
50425: PUSH
50426: LD_INT 19
50428: PUSH
50429: LD_INT 20
50431: PUSH
50432: LD_INT 21
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: IN
50450: NOT
50451: OR
50452: PUSH
50453: LD_VAR 0 8
50457: PUSH
50458: LD_INT 5
50460: ARRAY
50461: NOT
50462: OR
50463: PUSH
50464: LD_VAR 0 8
50468: PUSH
50469: LD_INT 6
50471: ARRAY
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 7
50481: PUSH
50482: LD_INT 9
50484: PUSH
50485: LD_INT 10
50487: PUSH
50488: LD_INT 11
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: IN
50499: NOT
50500: OR
50501: IFFALSE 50507
// exit ;
50503: POP
50504: POP
50505: GO 50590
// end ;
50507: GO 50178
50509: POP
50510: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50511: LD_VAR 0 9
50515: PPUSH
50516: LD_VAR 0 3
50520: PPUSH
50521: LD_VAR 0 4
50525: PPUSH
50526: LD_INT 20
50528: PPUSH
50529: CALL 42513 0 4
50533: PUSH
50534: LD_INT 4
50536: ARRAY
50537: IFFALSE 50541
// exit ;
50539: GO 50590
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50541: LD_VAR 0 2
50545: PUSH
50546: LD_INT 29
50548: PUSH
50549: LD_INT 30
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: IN
50556: PUSH
50557: LD_VAR 0 3
50561: PPUSH
50562: LD_VAR 0 4
50566: PPUSH
50567: LD_VAR 0 9
50571: PPUSH
50572: CALL_OW 440
50576: NOT
50577: AND
50578: IFFALSE 50582
// exit ;
50580: GO 50590
// result := true ;
50582: LD_ADDR_VAR 0 6
50586: PUSH
50587: LD_INT 1
50589: ST_TO_ADDR
// end ;
50590: LD_VAR 0 6
50594: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50595: LD_INT 0
50597: PPUSH
50598: PPUSH
50599: PPUSH
50600: PPUSH
50601: PPUSH
50602: PPUSH
50603: PPUSH
50604: PPUSH
50605: PPUSH
50606: PPUSH
50607: PPUSH
50608: PPUSH
50609: PPUSH
50610: PPUSH
50611: PPUSH
50612: PPUSH
50613: PPUSH
50614: PPUSH
50615: PPUSH
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
50620: PPUSH
50621: PPUSH
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
// result = [ ] ;
50655: LD_ADDR_VAR 0 7
50659: PUSH
50660: EMPTY
50661: ST_TO_ADDR
// temp_list = [ ] ;
50662: LD_ADDR_VAR 0 9
50666: PUSH
50667: EMPTY
50668: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50669: LD_VAR 0 4
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 3
50685: PUSH
50686: LD_INT 4
50688: PUSH
50689: LD_INT 5
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: IN
50700: NOT
50701: PUSH
50702: LD_VAR 0 1
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: IN
50717: PUSH
50718: LD_VAR 0 5
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: IN
50737: NOT
50738: AND
50739: OR
50740: IFFALSE 50744
// exit ;
50742: GO 69135
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50744: LD_VAR 0 1
50748: PUSH
50749: LD_INT 6
50751: PUSH
50752: LD_INT 7
50754: PUSH
50755: LD_INT 8
50757: PUSH
50758: LD_INT 13
50760: PUSH
50761: LD_INT 12
50763: PUSH
50764: LD_INT 15
50766: PUSH
50767: LD_INT 11
50769: PUSH
50770: LD_INT 14
50772: PUSH
50773: LD_INT 10
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: IN
50787: IFFALSE 50797
// btype = b_lab ;
50789: LD_ADDR_VAR 0 1
50793: PUSH
50794: LD_INT 6
50796: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50797: LD_VAR 0 6
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: IN
50816: NOT
50817: PUSH
50818: LD_VAR 0 1
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: LD_INT 6
50837: PUSH
50838: LD_INT 36
50840: PUSH
50841: LD_INT 4
50843: PUSH
50844: LD_INT 5
50846: PUSH
50847: LD_INT 31
50849: PUSH
50850: LD_INT 32
50852: PUSH
50853: LD_INT 33
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: IN
50869: NOT
50870: PUSH
50871: LD_VAR 0 6
50875: PUSH
50876: LD_INT 1
50878: EQUAL
50879: AND
50880: OR
50881: PUSH
50882: LD_VAR 0 1
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: IN
50897: NOT
50898: PUSH
50899: LD_VAR 0 6
50903: PUSH
50904: LD_INT 2
50906: EQUAL
50907: AND
50908: OR
50909: IFFALSE 50919
// mode = 0 ;
50911: LD_ADDR_VAR 0 6
50915: PUSH
50916: LD_INT 0
50918: ST_TO_ADDR
// case mode of 0 :
50919: LD_VAR 0 6
50923: PUSH
50924: LD_INT 0
50926: DOUBLE
50927: EQUAL
50928: IFTRUE 50932
50930: GO 62385
50932: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50933: LD_ADDR_VAR 0 11
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51126: LD_ADDR_VAR 0 12
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 3
51283: NEG
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51322: LD_ADDR_VAR 0 13
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 3
51493: NEG
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51521: LD_ADDR_VAR 0 14
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 3
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51717: LD_ADDR_VAR 0 15
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51910: LD_ADDR_VAR 0 16
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: LD_INT 3
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52103: LD_ADDR_VAR 0 17
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52333: LD_ADDR_VAR 0 18
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52563: LD_ADDR_VAR 0 19
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52793: LD_ADDR_VAR 0 20
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53023: LD_ADDR_VAR 0 21
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53253: LD_ADDR_VAR 0 22
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53483: LD_ADDR_VAR 0 23
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 2
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53763: LD_ADDR_VAR 0 24
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54039: LD_ADDR_VAR 0 25
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 3
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54313: LD_ADDR_VAR 0 26
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54589: LD_ADDR_VAR 0 27
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54869: LD_ADDR_VAR 0 28
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 2
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 2
55045: NEG
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: LD_INT 3
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 3
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 3
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 3
55116: NEG
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55151: LD_ADDR_VAR 0 29
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: LD_INT 3
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 3
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55430: LD_ADDR_VAR 0 30
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55708: LD_ADDR_VAR 0 31
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: LD_INT 3
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 3
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55986: LD_ADDR_VAR 0 32
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 3
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: LD_INT 3
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56264: LD_ADDR_VAR 0 33
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 3
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 3
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: NEG
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56543: LD_ADDR_VAR 0 34
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: LD_INT 2
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: LD_INT 3
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 3
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 3
56788: NEG
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56823: LD_ADDR_VAR 0 35
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56935: LD_ADDR_VAR 0 36
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57047: LD_ADDR_VAR 0 37
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57159: LD_ADDR_VAR 0 38
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57271: LD_ADDR_VAR 0 39
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57383: LD_ADDR_VAR 0 40
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57495: LD_ADDR_VAR 0 41
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: NEG
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 3
57780: NEG
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: LD_INT 3
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57845: LD_ADDR_VAR 0 42
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 3
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: NEG
58155: PUSH
58156: LD_INT 3
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58195: LD_ADDR_VAR 0 43
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 3
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 3
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 2
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58543: LD_ADDR_VAR 0 44
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: LD_INT 3
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 3
58852: NEG
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58893: LD_ADDR_VAR 0 45
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: LD_INT 3
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 3
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: LD_INT 3
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: NEG
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 3
59202: NEG
59203: PUSH
59204: LD_INT 3
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59243: LD_ADDR_VAR 0 46
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 2
59409: NEG
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 2
59420: NEG
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 3
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 3
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 3
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 3
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 3
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 3
59539: NEG
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59591: LD_ADDR_VAR 0 47
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59742: LD_ADDR_VAR 0 48
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59889: LD_ADDR_VAR 0 49
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60033: LD_ADDR_VAR 0 50
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60177: LD_ADDR_VAR 0 51
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60324: LD_ADDR_VAR 0 52
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60475: LD_ADDR_VAR 0 53
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: LD_INT 2
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: LD_INT 2
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60705: LD_ADDR_VAR 0 54
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 2
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60935: LD_ADDR_VAR 0 55
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: LD_INT 2
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61165: LD_ADDR_VAR 0 56
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61395: LD_ADDR_VAR 0 57
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 0
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 2
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 2
61571: NEG
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61625: LD_ADDR_VAR 0 58
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 0
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 2
61801: NEG
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61855: LD_ADDR_VAR 0 59
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61943: LD_ADDR_VAR 0 60
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62031: LD_ADDR_VAR 0 61
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62119: LD_ADDR_VAR 0 62
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62207: LD_ADDR_VAR 0 63
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62295: LD_ADDR_VAR 0 64
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// end ; 1 :
62383: GO 68280
62385: LD_INT 1
62387: DOUBLE
62388: EQUAL
62389: IFTRUE 62393
62391: GO 65016
62393: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62394: LD_ADDR_VAR 0 11
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 3
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: LD_INT 3
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62438: LD_ADDR_VAR 0 12
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 3
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 3
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62479: LD_ADDR_VAR 0 13
62483: PUSH
62484: LD_INT 3
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 3
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 2
62506: PUSH
62507: LD_INT 3
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: LIST
62518: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62519: LD_ADDR_VAR 0 14
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: LD_INT 3
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: LD_INT 2
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: LIST
62559: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62560: LD_ADDR_VAR 0 15
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 3
62578: NEG
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: NEG
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: LIST
62603: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62604: LD_ADDR_VAR 0 16
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 3
62623: NEG
62624: PUSH
62625: LD_INT 2
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 3
62635: NEG
62636: PUSH
62637: LD_INT 3
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: LIST
62649: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62650: LD_ADDR_VAR 0 17
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: LD_INT 3
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: LD_INT 3
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: LIST
62693: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62694: LD_ADDR_VAR 0 18
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 3
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62735: LD_ADDR_VAR 0 19
62739: PUSH
62740: LD_INT 3
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 3
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62775: LD_ADDR_VAR 0 20
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: LD_INT 3
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 3
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: LD_INT 2
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: LIST
62815: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62816: LD_ADDR_VAR 0 21
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 3
62834: NEG
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: LD_INT 1
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62860: LD_ADDR_VAR 0 22
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 3
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 3
62879: NEG
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: LD_INT 3
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: LIST
62905: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62906: LD_ADDR_VAR 0 23
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 3
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: LD_INT 4
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: LD_INT 3
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62950: LD_ADDR_VAR 0 24
62954: PUSH
62955: LD_INT 3
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 3
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 4
62978: PUSH
62979: LD_INT 1
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: LIST
62990: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62991: LD_ADDR_VAR 0 25
62995: PUSH
62996: LD_INT 3
62998: PUSH
62999: LD_INT 3
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 4
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 3
63018: PUSH
63019: LD_INT 4
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: LIST
63030: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63031: LD_ADDR_VAR 0 26
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 3
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: LD_INT 4
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: LIST
63071: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63072: LD_ADDR_VAR 0 27
63076: PUSH
63077: LD_INT 3
63079: NEG
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 4
63101: NEG
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63116: LD_ADDR_VAR 0 28
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: LD_INT 3
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 3
63135: NEG
63136: PUSH
63137: LD_INT 4
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 4
63147: NEG
63148: PUSH
63149: LD_INT 3
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: LIST
63161: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63162: LD_ADDR_VAR 0 29
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: LD_INT 3
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 3
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 2
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 4
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 4
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: LD_INT 3
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 5
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: LD_INT 5
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: LD_INT 4
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 6
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 6
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 5
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63317: LD_ADDR_VAR 0 30
63321: PUSH
63322: LD_INT 2
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 3
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 3
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 4
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 4
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 4
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 5
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 5
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 5
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 6
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 6
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63460: LD_ADDR_VAR 0 31
63464: PUSH
63465: LD_INT 3
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 3
63477: PUSH
63478: LD_INT 3
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: LD_INT 3
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 4
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 4
63507: PUSH
63508: LD_INT 4
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: LD_INT 4
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 5
63527: PUSH
63528: LD_INT 4
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 5
63537: PUSH
63538: LD_INT 5
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 4
63547: PUSH
63548: LD_INT 5
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 6
63557: PUSH
63558: LD_INT 5
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 6
63567: PUSH
63568: LD_INT 6
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 5
63577: PUSH
63578: LD_INT 6
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63599: LD_ADDR_VAR 0 32
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: LD_INT 3
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: LD_INT 3
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: LD_INT 4
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: LD_INT 5
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: LD_INT 5
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 4
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 6
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 6
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: LD_INT 5
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63742: LD_ADDR_VAR 0 33
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 3
63760: NEG
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: NEG
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 3
63783: NEG
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 4
63794: NEG
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 4
63805: NEG
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 4
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 5
63828: NEG
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 5
63839: NEG
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 5
63851: NEG
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 6
63862: NEG
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 6
63873: NEG
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63897: LD_ADDR_VAR 0 34
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: LD_INT 3
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 3
63916: NEG
63917: PUSH
63918: LD_INT 2
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 3
63928: NEG
63929: PUSH
63930: LD_INT 3
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: LD_INT 4
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 4
63952: NEG
63953: PUSH
63954: LD_INT 3
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 4
63964: NEG
63965: PUSH
63966: LD_INT 4
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 4
63976: NEG
63977: PUSH
63978: LD_INT 5
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 5
63988: NEG
63989: PUSH
63990: LD_INT 4
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 5
64000: NEG
64001: PUSH
64002: LD_INT 5
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 5
64012: NEG
64013: PUSH
64014: LD_INT 6
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 6
64024: NEG
64025: PUSH
64026: LD_INT 5
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 6
64036: NEG
64037: PUSH
64038: LD_INT 6
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64060: LD_ADDR_VAR 0 41
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: LD_INT 3
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: LD_INT 2
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: LIST
64103: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64104: LD_ADDR_VAR 0 42
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 3
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64145: LD_ADDR_VAR 0 43
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: PUSH
64163: LD_INT 2
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: LD_INT 3
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: LIST
64184: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64185: LD_ADDR_VAR 0 44
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 2
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: LD_INT 3
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: NEG
64213: PUSH
64214: LD_INT 2
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64226: LD_ADDR_VAR 0 45
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 3
64255: NEG
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64270: LD_ADDR_VAR 0 46
64274: PUSH
64275: LD_INT 2
64277: NEG
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: NEG
64290: PUSH
64291: LD_INT 3
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 3
64301: NEG
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: LIST
64315: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64316: LD_ADDR_VAR 0 47
64320: PUSH
64321: LD_INT 2
64323: NEG
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: LD_INT 3
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64349: LD_ADDR_VAR 0 48
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: LD_INT 2
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 2
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64380: LD_ADDR_VAR 0 49
64384: PUSH
64385: LD_INT 3
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 3
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64409: LD_ADDR_VAR 0 50
64413: PUSH
64414: LD_INT 2
64416: PUSH
64417: LD_INT 3
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64438: LD_ADDR_VAR 0 51
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64469: LD_ADDR_VAR 0 52
64473: PUSH
64474: LD_INT 3
64476: NEG
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 3
64488: NEG
64489: PUSH
64490: LD_INT 2
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64502: LD_ADDR_VAR 0 53
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: LD_INT 3
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: LD_INT 3
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: LD_INT 2
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64546: LD_ADDR_VAR 0 54
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: LIST
64586: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64587: LD_ADDR_VAR 0 55
64591: PUSH
64592: LD_INT 3
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: LIST
64626: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64627: LD_ADDR_VAR 0 56
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: LD_INT 2
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64668: LD_ADDR_VAR 0 57
64672: PUSH
64673: LD_INT 2
64675: NEG
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 3
64686: NEG
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 3
64697: NEG
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64712: LD_ADDR_VAR 0 58
64716: PUSH
64717: LD_INT 2
64719: NEG
64720: PUSH
64721: LD_INT 3
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 3
64731: NEG
64732: PUSH
64733: LD_INT 2
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 3
64743: NEG
64744: PUSH
64745: LD_INT 3
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64758: LD_ADDR_VAR 0 59
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: LD_INT 2
64769: NEG
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: LD_INT 2
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64802: LD_ADDR_VAR 0 60
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: LD_INT 1
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: LIST
64842: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64843: LD_ADDR_VAR 0 61
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: LD_INT 2
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: LD_INT 2
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: LIST
64882: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64883: LD_ADDR_VAR 0 62
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: LIST
64923: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64924: LD_ADDR_VAR 0 63
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 1
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 2
64953: NEG
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: LIST
64967: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64968: LD_ADDR_VAR 0 64
64972: PUSH
64973: LD_INT 1
64975: NEG
64976: PUSH
64977: LD_INT 2
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 2
64987: NEG
64988: PUSH
64989: LD_INT 1
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 2
64999: NEG
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: LIST
65013: ST_TO_ADDR
// end ; 2 :
65014: GO 68280
65016: LD_INT 2
65018: DOUBLE
65019: EQUAL
65020: IFTRUE 65024
65022: GO 68279
65024: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65025: LD_ADDR_VAR 0 29
65029: PUSH
65030: LD_INT 4
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 4
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 5
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 5
65063: PUSH
65064: LD_INT 1
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 4
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 3
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: LD_INT 2
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 5
65115: PUSH
65116: LD_INT 2
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 3
65125: PUSH
65126: LD_INT 3
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 3
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 4
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 4
65155: PUSH
65156: LD_INT 4
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 3
65165: PUSH
65166: LD_INT 4
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: LD_INT 2
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 4
65195: PUSH
65196: LD_INT 2
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 2
65205: PUSH
65206: LD_INT 4
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 4
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: LD_INT 4
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 5
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 5
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 4
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: LD_INT 3
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 2
65287: PUSH
65288: LD_INT 5
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: NEG
65298: PUSH
65299: LD_INT 3
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 3
65308: NEG
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 3
65319: NEG
65320: PUSH
65321: LD_INT 1
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 2
65331: NEG
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 4
65364: NEG
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 4
65375: NEG
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 4
65387: NEG
65388: PUSH
65389: LD_INT 2
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: LD_INT 2
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 4
65410: NEG
65411: PUSH
65412: LD_INT 4
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 4
65422: NEG
65423: PUSH
65424: LD_INT 5
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 3
65434: NEG
65435: PUSH
65436: LD_INT 4
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 3
65446: NEG
65447: PUSH
65448: LD_INT 3
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 4
65458: NEG
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 5
65470: NEG
65471: PUSH
65472: LD_INT 4
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 5
65482: NEG
65483: PUSH
65484: LD_INT 5
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 3
65494: NEG
65495: PUSH
65496: LD_INT 5
65498: NEG
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 5
65506: NEG
65507: PUSH
65508: LD_INT 3
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65563: LD_ADDR_VAR 0 30
65567: PUSH
65568: LD_INT 4
65570: PUSH
65571: LD_INT 4
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 4
65580: PUSH
65581: LD_INT 3
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 5
65590: PUSH
65591: LD_INT 4
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 5
65600: PUSH
65601: LD_INT 5
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 4
65610: PUSH
65611: LD_INT 5
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 3
65620: PUSH
65621: LD_INT 4
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 3
65630: PUSH
65631: LD_INT 3
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 5
65640: PUSH
65641: LD_INT 3
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 3
65650: PUSH
65651: LD_INT 5
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: LD_INT 2
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: LD_INT 4
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: LD_INT 4
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 1
65710: NEG
65711: PUSH
65712: LD_INT 3
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: LD_INT 2
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 2
65732: PUSH
65733: LD_INT 4
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: LD_INT 2
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 4
65753: NEG
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 4
65764: NEG
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 3
65776: NEG
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 3
65787: NEG
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 4
65798: NEG
65799: PUSH
65800: LD_INT 1
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 5
65809: NEG
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 5
65820: NEG
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 5
65832: NEG
65833: PUSH
65834: LD_INT 2
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 3
65844: NEG
65845: PUSH
65846: LD_INT 2
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 3
65855: NEG
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: NEG
65868: PUSH
65869: LD_INT 4
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: LD_INT 3
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 2
65891: NEG
65892: PUSH
65893: LD_INT 2
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 3
65903: NEG
65904: PUSH
65905: LD_INT 2
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 4
65915: NEG
65916: PUSH
65917: LD_INT 3
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 4
65927: NEG
65928: PUSH
65929: LD_INT 4
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 2
65939: NEG
65940: PUSH
65941: LD_INT 4
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 4
65951: NEG
65952: PUSH
65953: LD_INT 2
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: LD_INT 4
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 5
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 4
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: LD_INT 3
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: LD_INT 3
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: LD_INT 4
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: LD_INT 5
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: LD_INT 3
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: LD_INT 5
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66110: LD_ADDR_VAR 0 31
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: LD_INT 4
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: LD_INT 3
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 1
66137: PUSH
66138: LD_INT 4
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 1
66147: PUSH
66148: LD_INT 5
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 1
66167: NEG
66168: PUSH
66169: LD_INT 4
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: LD_INT 3
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 2
66189: PUSH
66190: LD_INT 5
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 2
66199: NEG
66200: PUSH
66201: LD_INT 3
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 3
66210: NEG
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 3
66221: NEG
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 2
66233: NEG
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 3
66255: NEG
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 4
66266: NEG
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 4
66277: NEG
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 4
66289: NEG
66290: PUSH
66291: LD_INT 2
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 2
66301: NEG
66302: PUSH
66303: LD_INT 2
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 4
66312: NEG
66313: PUSH
66314: LD_INT 4
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 4
66324: NEG
66325: PUSH
66326: LD_INT 5
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 3
66336: NEG
66337: PUSH
66338: LD_INT 4
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 3
66348: NEG
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 4
66360: NEG
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 5
66372: NEG
66373: PUSH
66374: LD_INT 4
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 5
66384: NEG
66385: PUSH
66386: LD_INT 5
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 3
66396: NEG
66397: PUSH
66398: LD_INT 5
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 5
66408: NEG
66409: PUSH
66410: LD_INT 3
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: LD_INT 3
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: LD_INT 4
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: LD_INT 3
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: LD_INT 2
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 2
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: NEG
66476: PUSH
66477: LD_INT 3
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: LD_INT 4
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: LD_INT 2
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 2
66510: NEG
66511: PUSH
66512: LD_INT 4
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 4
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 4
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 5
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 5
66553: PUSH
66554: LD_INT 1
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 4
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 3
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 3
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 3
66594: PUSH
66595: LD_INT 2
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 5
66605: PUSH
66606: LD_INT 2
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66660: LD_ADDR_VAR 0 32
66664: PUSH
66665: LD_INT 4
66667: NEG
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 4
66678: NEG
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 3
66690: NEG
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 3
66701: NEG
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 4
66712: NEG
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 5
66723: NEG
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 5
66734: NEG
66735: PUSH
66736: LD_INT 1
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 5
66746: NEG
66747: PUSH
66748: LD_INT 2
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 3
66758: NEG
66759: PUSH
66760: LD_INT 2
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 3
66769: NEG
66770: PUSH
66771: LD_INT 3
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 3
66781: NEG
66782: PUSH
66783: LD_INT 4
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 2
66793: NEG
66794: PUSH
66795: LD_INT 3
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 2
66805: NEG
66806: PUSH
66807: LD_INT 2
66809: NEG
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 3
66817: NEG
66818: PUSH
66819: LD_INT 2
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 4
66829: NEG
66830: PUSH
66831: LD_INT 3
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 4
66841: NEG
66842: PUSH
66843: LD_INT 4
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: LD_INT 4
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 4
66865: NEG
66866: PUSH
66867: LD_INT 2
66869: NEG
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: LD_INT 4
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: LD_INT 5
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: LD_INT 4
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 1
66910: PUSH
66911: LD_INT 3
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: LD_INT 3
66924: NEG
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: LD_INT 4
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 1
66944: NEG
66945: PUSH
66946: LD_INT 5
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 2
66956: PUSH
66957: LD_INT 3
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 2
66967: NEG
66968: PUSH
66969: LD_INT 5
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 3
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 3
66989: PUSH
66990: LD_INT 1
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 4
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 4
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: LD_INT 1
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: LD_INT 2
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 4
67062: PUSH
67063: LD_INT 2
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 4
67072: PUSH
67073: LD_INT 4
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 4
67082: PUSH
67083: LD_INT 3
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 5
67092: PUSH
67093: LD_INT 4
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 5
67102: PUSH
67103: LD_INT 5
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 4
67112: PUSH
67113: LD_INT 5
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: PUSH
67123: LD_INT 4
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: PUSH
67133: LD_INT 3
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 5
67142: PUSH
67143: LD_INT 3
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 3
67152: PUSH
67153: LD_INT 5
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67207: LD_ADDR_VAR 0 33
67211: PUSH
67212: LD_INT 4
67214: NEG
67215: PUSH
67216: LD_INT 4
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 4
67226: NEG
67227: PUSH
67228: LD_INT 5
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 3
67238: NEG
67239: PUSH
67240: LD_INT 4
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 3
67250: NEG
67251: PUSH
67252: LD_INT 3
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 4
67262: NEG
67263: PUSH
67264: LD_INT 3
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 5
67274: NEG
67275: PUSH
67276: LD_INT 4
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 5
67286: NEG
67287: PUSH
67288: LD_INT 5
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 3
67298: NEG
67299: PUSH
67300: LD_INT 5
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 5
67310: NEG
67311: PUSH
67312: LD_INT 3
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 0
67322: PUSH
67323: LD_INT 3
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: LD_INT 4
67336: NEG
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: LD_INT 3
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 1
67355: PUSH
67356: LD_INT 2
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: NEG
67390: PUSH
67391: LD_INT 4
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 2
67401: PUSH
67402: LD_INT 2
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 2
67412: NEG
67413: PUSH
67414: LD_INT 4
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 4
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 4
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 5
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 5
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 4
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 3
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 3
67485: PUSH
67486: LD_INT 1
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 3
67496: PUSH
67497: LD_INT 2
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 5
67507: PUSH
67508: LD_INT 2
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 3
67517: PUSH
67518: LD_INT 3
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: LD_INT 2
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 4
67537: PUSH
67538: LD_INT 3
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 4
67547: PUSH
67548: LD_INT 4
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 3
67557: PUSH
67558: LD_INT 4
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 2
67577: PUSH
67578: LD_INT 2
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 4
67587: PUSH
67588: LD_INT 2
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 2
67597: PUSH
67598: LD_INT 4
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: LD_INT 4
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 3
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 1
67627: PUSH
67628: LD_INT 4
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 1
67637: PUSH
67638: LD_INT 5
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: LD_INT 5
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 1
67657: NEG
67658: PUSH
67659: LD_INT 4
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: LD_INT 3
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: LD_INT 5
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 2
67689: NEG
67690: PUSH
67691: LD_INT 3
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67745: LD_ADDR_VAR 0 34
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: LD_INT 4
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 0
67763: PUSH
67764: LD_INT 5
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: LD_INT 4
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: PUSH
67786: LD_INT 3
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: LD_INT 3
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 1
67807: NEG
67808: PUSH
67809: LD_INT 4
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: LD_INT 5
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 2
67831: PUSH
67832: LD_INT 3
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: NEG
67843: PUSH
67844: LD_INT 5
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 3
67854: PUSH
67855: LD_INT 0
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 4
67875: PUSH
67876: LD_INT 0
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 4
67885: PUSH
67886: LD_INT 1
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 3
67895: PUSH
67896: LD_INT 1
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 2
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 2
67915: PUSH
67916: LD_INT 1
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 2
67926: PUSH
67927: LD_INT 2
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 4
67937: PUSH
67938: LD_INT 2
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 4
67947: PUSH
67948: LD_INT 4
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 4
67957: PUSH
67958: LD_INT 3
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 5
67967: PUSH
67968: LD_INT 4
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 5
67977: PUSH
67978: LD_INT 5
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 4
67987: PUSH
67988: LD_INT 5
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 3
67997: PUSH
67998: LD_INT 4
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 3
68007: PUSH
68008: LD_INT 3
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 5
68017: PUSH
68018: LD_INT 3
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 3
68027: PUSH
68028: LD_INT 5
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: LD_INT 3
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: LD_INT 2
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: LD_INT 3
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: LD_INT 4
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 4
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: LD_INT 3
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: LD_INT 2
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 2
68109: PUSH
68110: LD_INT 4
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 2
68119: NEG
68120: PUSH
68121: LD_INT 2
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 4
68130: NEG
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 4
68141: NEG
68142: PUSH
68143: LD_INT 1
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 3
68153: NEG
68154: PUSH
68155: LD_INT 0
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 3
68164: NEG
68165: PUSH
68166: LD_INT 1
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 4
68175: NEG
68176: PUSH
68177: LD_INT 1
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 5
68186: NEG
68187: PUSH
68188: LD_INT 0
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 5
68197: NEG
68198: PUSH
68199: LD_INT 1
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 5
68209: NEG
68210: PUSH
68211: LD_INT 2
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 3
68221: NEG
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: ST_TO_ADDR
// end ; end ;
68277: GO 68280
68279: POP
// case btype of b_depot , b_warehouse :
68280: LD_VAR 0 1
68284: PUSH
68285: LD_INT 0
68287: DOUBLE
68288: EQUAL
68289: IFTRUE 68299
68291: LD_INT 1
68293: DOUBLE
68294: EQUAL
68295: IFTRUE 68299
68297: GO 68500
68299: POP
// case nation of nation_american :
68300: LD_VAR 0 5
68304: PUSH
68305: LD_INT 1
68307: DOUBLE
68308: EQUAL
68309: IFTRUE 68313
68311: GO 68369
68313: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68314: LD_ADDR_VAR 0 9
68318: PUSH
68319: LD_VAR 0 11
68323: PUSH
68324: LD_VAR 0 12
68328: PUSH
68329: LD_VAR 0 13
68333: PUSH
68334: LD_VAR 0 14
68338: PUSH
68339: LD_VAR 0 15
68343: PUSH
68344: LD_VAR 0 16
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: PUSH
68357: LD_VAR 0 4
68361: PUSH
68362: LD_INT 1
68364: PLUS
68365: ARRAY
68366: ST_TO_ADDR
68367: GO 68498
68369: LD_INT 2
68371: DOUBLE
68372: EQUAL
68373: IFTRUE 68377
68375: GO 68433
68377: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68378: LD_ADDR_VAR 0 9
68382: PUSH
68383: LD_VAR 0 17
68387: PUSH
68388: LD_VAR 0 18
68392: PUSH
68393: LD_VAR 0 19
68397: PUSH
68398: LD_VAR 0 20
68402: PUSH
68403: LD_VAR 0 21
68407: PUSH
68408: LD_VAR 0 22
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: PUSH
68421: LD_VAR 0 4
68425: PUSH
68426: LD_INT 1
68428: PLUS
68429: ARRAY
68430: ST_TO_ADDR
68431: GO 68498
68433: LD_INT 3
68435: DOUBLE
68436: EQUAL
68437: IFTRUE 68441
68439: GO 68497
68441: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68442: LD_ADDR_VAR 0 9
68446: PUSH
68447: LD_VAR 0 23
68451: PUSH
68452: LD_VAR 0 24
68456: PUSH
68457: LD_VAR 0 25
68461: PUSH
68462: LD_VAR 0 26
68466: PUSH
68467: LD_VAR 0 27
68471: PUSH
68472: LD_VAR 0 28
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: PUSH
68485: LD_VAR 0 4
68489: PUSH
68490: LD_INT 1
68492: PLUS
68493: ARRAY
68494: ST_TO_ADDR
68495: GO 68498
68497: POP
68498: GO 69053
68500: LD_INT 2
68502: DOUBLE
68503: EQUAL
68504: IFTRUE 68514
68506: LD_INT 3
68508: DOUBLE
68509: EQUAL
68510: IFTRUE 68514
68512: GO 68570
68514: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68515: LD_ADDR_VAR 0 9
68519: PUSH
68520: LD_VAR 0 29
68524: PUSH
68525: LD_VAR 0 30
68529: PUSH
68530: LD_VAR 0 31
68534: PUSH
68535: LD_VAR 0 32
68539: PUSH
68540: LD_VAR 0 33
68544: PUSH
68545: LD_VAR 0 34
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: PUSH
68558: LD_VAR 0 4
68562: PUSH
68563: LD_INT 1
68565: PLUS
68566: ARRAY
68567: ST_TO_ADDR
68568: GO 69053
68570: LD_INT 16
68572: DOUBLE
68573: EQUAL
68574: IFTRUE 68632
68576: LD_INT 17
68578: DOUBLE
68579: EQUAL
68580: IFTRUE 68632
68582: LD_INT 18
68584: DOUBLE
68585: EQUAL
68586: IFTRUE 68632
68588: LD_INT 19
68590: DOUBLE
68591: EQUAL
68592: IFTRUE 68632
68594: LD_INT 22
68596: DOUBLE
68597: EQUAL
68598: IFTRUE 68632
68600: LD_INT 20
68602: DOUBLE
68603: EQUAL
68604: IFTRUE 68632
68606: LD_INT 21
68608: DOUBLE
68609: EQUAL
68610: IFTRUE 68632
68612: LD_INT 23
68614: DOUBLE
68615: EQUAL
68616: IFTRUE 68632
68618: LD_INT 24
68620: DOUBLE
68621: EQUAL
68622: IFTRUE 68632
68624: LD_INT 25
68626: DOUBLE
68627: EQUAL
68628: IFTRUE 68632
68630: GO 68688
68632: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68633: LD_ADDR_VAR 0 9
68637: PUSH
68638: LD_VAR 0 35
68642: PUSH
68643: LD_VAR 0 36
68647: PUSH
68648: LD_VAR 0 37
68652: PUSH
68653: LD_VAR 0 38
68657: PUSH
68658: LD_VAR 0 39
68662: PUSH
68663: LD_VAR 0 40
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: PUSH
68676: LD_VAR 0 4
68680: PUSH
68681: LD_INT 1
68683: PLUS
68684: ARRAY
68685: ST_TO_ADDR
68686: GO 69053
68688: LD_INT 6
68690: DOUBLE
68691: EQUAL
68692: IFTRUE 68744
68694: LD_INT 7
68696: DOUBLE
68697: EQUAL
68698: IFTRUE 68744
68700: LD_INT 8
68702: DOUBLE
68703: EQUAL
68704: IFTRUE 68744
68706: LD_INT 13
68708: DOUBLE
68709: EQUAL
68710: IFTRUE 68744
68712: LD_INT 12
68714: DOUBLE
68715: EQUAL
68716: IFTRUE 68744
68718: LD_INT 15
68720: DOUBLE
68721: EQUAL
68722: IFTRUE 68744
68724: LD_INT 11
68726: DOUBLE
68727: EQUAL
68728: IFTRUE 68744
68730: LD_INT 14
68732: DOUBLE
68733: EQUAL
68734: IFTRUE 68744
68736: LD_INT 10
68738: DOUBLE
68739: EQUAL
68740: IFTRUE 68744
68742: GO 68800
68744: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68745: LD_ADDR_VAR 0 9
68749: PUSH
68750: LD_VAR 0 41
68754: PUSH
68755: LD_VAR 0 42
68759: PUSH
68760: LD_VAR 0 43
68764: PUSH
68765: LD_VAR 0 44
68769: PUSH
68770: LD_VAR 0 45
68774: PUSH
68775: LD_VAR 0 46
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: PUSH
68788: LD_VAR 0 4
68792: PUSH
68793: LD_INT 1
68795: PLUS
68796: ARRAY
68797: ST_TO_ADDR
68798: GO 69053
68800: LD_INT 36
68802: DOUBLE
68803: EQUAL
68804: IFTRUE 68808
68806: GO 68864
68808: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68809: LD_ADDR_VAR 0 9
68813: PUSH
68814: LD_VAR 0 47
68818: PUSH
68819: LD_VAR 0 48
68823: PUSH
68824: LD_VAR 0 49
68828: PUSH
68829: LD_VAR 0 50
68833: PUSH
68834: LD_VAR 0 51
68838: PUSH
68839: LD_VAR 0 52
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: PUSH
68852: LD_VAR 0 4
68856: PUSH
68857: LD_INT 1
68859: PLUS
68860: ARRAY
68861: ST_TO_ADDR
68862: GO 69053
68864: LD_INT 4
68866: DOUBLE
68867: EQUAL
68868: IFTRUE 68890
68870: LD_INT 5
68872: DOUBLE
68873: EQUAL
68874: IFTRUE 68890
68876: LD_INT 34
68878: DOUBLE
68879: EQUAL
68880: IFTRUE 68890
68882: LD_INT 37
68884: DOUBLE
68885: EQUAL
68886: IFTRUE 68890
68888: GO 68946
68890: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68891: LD_ADDR_VAR 0 9
68895: PUSH
68896: LD_VAR 0 53
68900: PUSH
68901: LD_VAR 0 54
68905: PUSH
68906: LD_VAR 0 55
68910: PUSH
68911: LD_VAR 0 56
68915: PUSH
68916: LD_VAR 0 57
68920: PUSH
68921: LD_VAR 0 58
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: PUSH
68934: LD_VAR 0 4
68938: PUSH
68939: LD_INT 1
68941: PLUS
68942: ARRAY
68943: ST_TO_ADDR
68944: GO 69053
68946: LD_INT 31
68948: DOUBLE
68949: EQUAL
68950: IFTRUE 68996
68952: LD_INT 32
68954: DOUBLE
68955: EQUAL
68956: IFTRUE 68996
68958: LD_INT 33
68960: DOUBLE
68961: EQUAL
68962: IFTRUE 68996
68964: LD_INT 27
68966: DOUBLE
68967: EQUAL
68968: IFTRUE 68996
68970: LD_INT 26
68972: DOUBLE
68973: EQUAL
68974: IFTRUE 68996
68976: LD_INT 28
68978: DOUBLE
68979: EQUAL
68980: IFTRUE 68996
68982: LD_INT 29
68984: DOUBLE
68985: EQUAL
68986: IFTRUE 68996
68988: LD_INT 30
68990: DOUBLE
68991: EQUAL
68992: IFTRUE 68996
68994: GO 69052
68996: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68997: LD_ADDR_VAR 0 9
69001: PUSH
69002: LD_VAR 0 59
69006: PUSH
69007: LD_VAR 0 60
69011: PUSH
69012: LD_VAR 0 61
69016: PUSH
69017: LD_VAR 0 62
69021: PUSH
69022: LD_VAR 0 63
69026: PUSH
69027: LD_VAR 0 64
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: PUSH
69040: LD_VAR 0 4
69044: PUSH
69045: LD_INT 1
69047: PLUS
69048: ARRAY
69049: ST_TO_ADDR
69050: GO 69053
69052: POP
// temp_list2 = [ ] ;
69053: LD_ADDR_VAR 0 10
69057: PUSH
69058: EMPTY
69059: ST_TO_ADDR
// for i in temp_list do
69060: LD_ADDR_VAR 0 8
69064: PUSH
69065: LD_VAR 0 9
69069: PUSH
69070: FOR_IN
69071: IFFALSE 69123
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69073: LD_ADDR_VAR 0 10
69077: PUSH
69078: LD_VAR 0 10
69082: PUSH
69083: LD_VAR 0 8
69087: PUSH
69088: LD_INT 1
69090: ARRAY
69091: PUSH
69092: LD_VAR 0 2
69096: PLUS
69097: PUSH
69098: LD_VAR 0 8
69102: PUSH
69103: LD_INT 2
69105: ARRAY
69106: PUSH
69107: LD_VAR 0 3
69111: PLUS
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: EMPTY
69118: LIST
69119: ADD
69120: ST_TO_ADDR
69121: GO 69070
69123: POP
69124: POP
// result = temp_list2 ;
69125: LD_ADDR_VAR 0 7
69129: PUSH
69130: LD_VAR 0 10
69134: ST_TO_ADDR
// end ;
69135: LD_VAR 0 7
69139: RET
// export function EnemyInRange ( unit , dist ) ; begin
69140: LD_INT 0
69142: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69143: LD_ADDR_VAR 0 3
69147: PUSH
69148: LD_VAR 0 1
69152: PPUSH
69153: CALL_OW 255
69157: PPUSH
69158: LD_VAR 0 1
69162: PPUSH
69163: CALL_OW 250
69167: PPUSH
69168: LD_VAR 0 1
69172: PPUSH
69173: CALL_OW 251
69177: PPUSH
69178: LD_VAR 0 2
69182: PPUSH
69183: CALL 42513 0 4
69187: PUSH
69188: LD_INT 4
69190: ARRAY
69191: ST_TO_ADDR
// end ;
69192: LD_VAR 0 3
69196: RET
// export function PlayerSeeMe ( unit ) ; begin
69197: LD_INT 0
69199: PPUSH
// result := See ( your_side , unit ) ;
69200: LD_ADDR_VAR 0 2
69204: PUSH
69205: LD_OWVAR 2
69209: PPUSH
69210: LD_VAR 0 1
69214: PPUSH
69215: CALL_OW 292
69219: ST_TO_ADDR
// end ;
69220: LD_VAR 0 2
69224: RET
// export function ReverseDir ( unit ) ; begin
69225: LD_INT 0
69227: PPUSH
// if not unit then
69228: LD_VAR 0 1
69232: NOT
69233: IFFALSE 69237
// exit ;
69235: GO 69260
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69237: LD_ADDR_VAR 0 2
69241: PUSH
69242: LD_VAR 0 1
69246: PPUSH
69247: CALL_OW 254
69251: PUSH
69252: LD_INT 3
69254: PLUS
69255: PUSH
69256: LD_INT 6
69258: MOD
69259: ST_TO_ADDR
// end ;
69260: LD_VAR 0 2
69264: RET
// export function ReverseArray ( array ) ; var i ; begin
69265: LD_INT 0
69267: PPUSH
69268: PPUSH
// if not array then
69269: LD_VAR 0 1
69273: NOT
69274: IFFALSE 69278
// exit ;
69276: GO 69333
// result := [ ] ;
69278: LD_ADDR_VAR 0 2
69282: PUSH
69283: EMPTY
69284: ST_TO_ADDR
// for i := array downto 1 do
69285: LD_ADDR_VAR 0 3
69289: PUSH
69290: DOUBLE
69291: LD_VAR 0 1
69295: INC
69296: ST_TO_ADDR
69297: LD_INT 1
69299: PUSH
69300: FOR_DOWNTO
69301: IFFALSE 69331
// result := Join ( result , array [ i ] ) ;
69303: LD_ADDR_VAR 0 2
69307: PUSH
69308: LD_VAR 0 2
69312: PPUSH
69313: LD_VAR 0 1
69317: PUSH
69318: LD_VAR 0 3
69322: ARRAY
69323: PPUSH
69324: CALL 73998 0 2
69328: ST_TO_ADDR
69329: GO 69300
69331: POP
69332: POP
// end ;
69333: LD_VAR 0 2
69337: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69338: LD_INT 0
69340: PPUSH
69341: PPUSH
69342: PPUSH
69343: PPUSH
69344: PPUSH
69345: PPUSH
// if not unit or not hexes then
69346: LD_VAR 0 1
69350: NOT
69351: PUSH
69352: LD_VAR 0 2
69356: NOT
69357: OR
69358: IFFALSE 69362
// exit ;
69360: GO 69485
// dist := 9999 ;
69362: LD_ADDR_VAR 0 5
69366: PUSH
69367: LD_INT 9999
69369: ST_TO_ADDR
// for i = 1 to hexes do
69370: LD_ADDR_VAR 0 4
69374: PUSH
69375: DOUBLE
69376: LD_INT 1
69378: DEC
69379: ST_TO_ADDR
69380: LD_VAR 0 2
69384: PUSH
69385: FOR_TO
69386: IFFALSE 69473
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69388: LD_ADDR_VAR 0 6
69392: PUSH
69393: LD_VAR 0 1
69397: PPUSH
69398: LD_VAR 0 2
69402: PUSH
69403: LD_VAR 0 4
69407: ARRAY
69408: PUSH
69409: LD_INT 1
69411: ARRAY
69412: PPUSH
69413: LD_VAR 0 2
69417: PUSH
69418: LD_VAR 0 4
69422: ARRAY
69423: PUSH
69424: LD_INT 2
69426: ARRAY
69427: PPUSH
69428: CALL_OW 297
69432: ST_TO_ADDR
// if tdist < dist then
69433: LD_VAR 0 6
69437: PUSH
69438: LD_VAR 0 5
69442: LESS
69443: IFFALSE 69471
// begin hex := hexes [ i ] ;
69445: LD_ADDR_VAR 0 8
69449: PUSH
69450: LD_VAR 0 2
69454: PUSH
69455: LD_VAR 0 4
69459: ARRAY
69460: ST_TO_ADDR
// dist := tdist ;
69461: LD_ADDR_VAR 0 5
69465: PUSH
69466: LD_VAR 0 6
69470: ST_TO_ADDR
// end ; end ;
69471: GO 69385
69473: POP
69474: POP
// result := hex ;
69475: LD_ADDR_VAR 0 3
69479: PUSH
69480: LD_VAR 0 8
69484: ST_TO_ADDR
// end ;
69485: LD_VAR 0 3
69489: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69490: LD_INT 0
69492: PPUSH
69493: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69494: LD_VAR 0 1
69498: NOT
69499: PUSH
69500: LD_VAR 0 1
69504: PUSH
69505: LD_INT 21
69507: PUSH
69508: LD_INT 2
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 23
69517: PUSH
69518: LD_INT 2
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PPUSH
69529: CALL_OW 69
69533: IN
69534: NOT
69535: OR
69536: IFFALSE 69540
// exit ;
69538: GO 69587
// for i = 1 to 3 do
69540: LD_ADDR_VAR 0 3
69544: PUSH
69545: DOUBLE
69546: LD_INT 1
69548: DEC
69549: ST_TO_ADDR
69550: LD_INT 3
69552: PUSH
69553: FOR_TO
69554: IFFALSE 69585
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69556: LD_VAR 0 1
69560: PPUSH
69561: CALL_OW 250
69565: PPUSH
69566: LD_VAR 0 1
69570: PPUSH
69571: CALL_OW 251
69575: PPUSH
69576: LD_INT 1
69578: PPUSH
69579: CALL_OW 453
69583: GO 69553
69585: POP
69586: POP
// end ;
69587: LD_VAR 0 2
69591: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69592: LD_INT 0
69594: PPUSH
69595: PPUSH
69596: PPUSH
69597: PPUSH
69598: PPUSH
69599: PPUSH
// if not unit or not enemy_unit then
69600: LD_VAR 0 1
69604: NOT
69605: PUSH
69606: LD_VAR 0 2
69610: NOT
69611: OR
69612: IFFALSE 69616
// exit ;
69614: GO 70083
// if GetLives ( i ) < 250 then
69616: LD_VAR 0 4
69620: PPUSH
69621: CALL_OW 256
69625: PUSH
69626: LD_INT 250
69628: LESS
69629: IFFALSE 69642
// begin ComAutodestruct ( i ) ;
69631: LD_VAR 0 4
69635: PPUSH
69636: CALL 69490 0 1
// exit ;
69640: GO 70083
// end ; x := GetX ( enemy_unit ) ;
69642: LD_ADDR_VAR 0 7
69646: PUSH
69647: LD_VAR 0 2
69651: PPUSH
69652: CALL_OW 250
69656: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69657: LD_ADDR_VAR 0 8
69661: PUSH
69662: LD_VAR 0 2
69666: PPUSH
69667: CALL_OW 251
69671: ST_TO_ADDR
// if not x or not y then
69672: LD_VAR 0 7
69676: NOT
69677: PUSH
69678: LD_VAR 0 8
69682: NOT
69683: OR
69684: IFFALSE 69688
// exit ;
69686: GO 70083
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69688: LD_ADDR_VAR 0 6
69692: PUSH
69693: LD_VAR 0 7
69697: PPUSH
69698: LD_INT 0
69700: PPUSH
69701: LD_INT 4
69703: PPUSH
69704: CALL_OW 272
69708: PUSH
69709: LD_VAR 0 8
69713: PPUSH
69714: LD_INT 0
69716: PPUSH
69717: LD_INT 4
69719: PPUSH
69720: CALL_OW 273
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_VAR 0 7
69733: PPUSH
69734: LD_INT 1
69736: PPUSH
69737: LD_INT 4
69739: PPUSH
69740: CALL_OW 272
69744: PUSH
69745: LD_VAR 0 8
69749: PPUSH
69750: LD_INT 1
69752: PPUSH
69753: LD_INT 4
69755: PPUSH
69756: CALL_OW 273
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_VAR 0 7
69769: PPUSH
69770: LD_INT 2
69772: PPUSH
69773: LD_INT 4
69775: PPUSH
69776: CALL_OW 272
69780: PUSH
69781: LD_VAR 0 8
69785: PPUSH
69786: LD_INT 2
69788: PPUSH
69789: LD_INT 4
69791: PPUSH
69792: CALL_OW 273
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_VAR 0 7
69805: PPUSH
69806: LD_INT 3
69808: PPUSH
69809: LD_INT 4
69811: PPUSH
69812: CALL_OW 272
69816: PUSH
69817: LD_VAR 0 8
69821: PPUSH
69822: LD_INT 3
69824: PPUSH
69825: LD_INT 4
69827: PPUSH
69828: CALL_OW 273
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_VAR 0 7
69841: PPUSH
69842: LD_INT 4
69844: PPUSH
69845: LD_INT 4
69847: PPUSH
69848: CALL_OW 272
69852: PUSH
69853: LD_VAR 0 8
69857: PPUSH
69858: LD_INT 4
69860: PPUSH
69861: LD_INT 4
69863: PPUSH
69864: CALL_OW 273
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_VAR 0 7
69877: PPUSH
69878: LD_INT 5
69880: PPUSH
69881: LD_INT 4
69883: PPUSH
69884: CALL_OW 272
69888: PUSH
69889: LD_VAR 0 8
69893: PPUSH
69894: LD_INT 5
69896: PPUSH
69897: LD_INT 4
69899: PPUSH
69900: CALL_OW 273
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: ST_TO_ADDR
// for i = tmp downto 1 do
69917: LD_ADDR_VAR 0 4
69921: PUSH
69922: DOUBLE
69923: LD_VAR 0 6
69927: INC
69928: ST_TO_ADDR
69929: LD_INT 1
69931: PUSH
69932: FOR_DOWNTO
69933: IFFALSE 70034
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69935: LD_VAR 0 6
69939: PUSH
69940: LD_VAR 0 4
69944: ARRAY
69945: PUSH
69946: LD_INT 1
69948: ARRAY
69949: PPUSH
69950: LD_VAR 0 6
69954: PUSH
69955: LD_VAR 0 4
69959: ARRAY
69960: PUSH
69961: LD_INT 2
69963: ARRAY
69964: PPUSH
69965: CALL_OW 488
69969: NOT
69970: PUSH
69971: LD_VAR 0 6
69975: PUSH
69976: LD_VAR 0 4
69980: ARRAY
69981: PUSH
69982: LD_INT 1
69984: ARRAY
69985: PPUSH
69986: LD_VAR 0 6
69990: PUSH
69991: LD_VAR 0 4
69995: ARRAY
69996: PUSH
69997: LD_INT 2
69999: ARRAY
70000: PPUSH
70001: CALL_OW 428
70005: PUSH
70006: LD_INT 0
70008: NONEQUAL
70009: OR
70010: IFFALSE 70032
// tmp := Delete ( tmp , i ) ;
70012: LD_ADDR_VAR 0 6
70016: PUSH
70017: LD_VAR 0 6
70021: PPUSH
70022: LD_VAR 0 4
70026: PPUSH
70027: CALL_OW 3
70031: ST_TO_ADDR
70032: GO 69932
70034: POP
70035: POP
// j := GetClosestHex ( unit , tmp ) ;
70036: LD_ADDR_VAR 0 5
70040: PUSH
70041: LD_VAR 0 1
70045: PPUSH
70046: LD_VAR 0 6
70050: PPUSH
70051: CALL 69338 0 2
70055: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70056: LD_VAR 0 1
70060: PPUSH
70061: LD_VAR 0 5
70065: PUSH
70066: LD_INT 1
70068: ARRAY
70069: PPUSH
70070: LD_VAR 0 5
70074: PUSH
70075: LD_INT 2
70077: ARRAY
70078: PPUSH
70079: CALL_OW 111
// end ;
70083: LD_VAR 0 3
70087: RET
// export function PrepareApemanSoldier ( ) ; begin
70088: LD_INT 0
70090: PPUSH
// uc_nation := 0 ;
70091: LD_ADDR_OWVAR 21
70095: PUSH
70096: LD_INT 0
70098: ST_TO_ADDR
// hc_sex := sex_male ;
70099: LD_ADDR_OWVAR 27
70103: PUSH
70104: LD_INT 1
70106: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70107: LD_ADDR_OWVAR 28
70111: PUSH
70112: LD_INT 15
70114: ST_TO_ADDR
// hc_gallery :=  ;
70115: LD_ADDR_OWVAR 33
70119: PUSH
70120: LD_STRING 
70122: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70123: LD_ADDR_OWVAR 31
70127: PUSH
70128: LD_INT 0
70130: PPUSH
70131: LD_INT 3
70133: PPUSH
70134: CALL_OW 12
70138: PUSH
70139: LD_INT 0
70141: PPUSH
70142: LD_INT 3
70144: PPUSH
70145: CALL_OW 12
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: ST_TO_ADDR
// end ;
70162: LD_VAR 0 1
70166: RET
// export function PrepareApemanEngineer ( ) ; begin
70167: LD_INT 0
70169: PPUSH
// uc_nation := 0 ;
70170: LD_ADDR_OWVAR 21
70174: PUSH
70175: LD_INT 0
70177: ST_TO_ADDR
// hc_sex := sex_male ;
70178: LD_ADDR_OWVAR 27
70182: PUSH
70183: LD_INT 1
70185: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70186: LD_ADDR_OWVAR 28
70190: PUSH
70191: LD_INT 16
70193: ST_TO_ADDR
// hc_gallery :=  ;
70194: LD_ADDR_OWVAR 33
70198: PUSH
70199: LD_STRING 
70201: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70202: LD_ADDR_OWVAR 31
70206: PUSH
70207: LD_INT 0
70209: PPUSH
70210: LD_INT 3
70212: PPUSH
70213: CALL_OW 12
70217: PUSH
70218: LD_INT 0
70220: PPUSH
70221: LD_INT 3
70223: PPUSH
70224: CALL_OW 12
70228: PUSH
70229: LD_INT 0
70231: PUSH
70232: LD_INT 0
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: ST_TO_ADDR
// end ;
70241: LD_VAR 0 1
70245: RET
// export function PrepareApeman ( agressivity ) ; begin
70246: LD_INT 0
70248: PPUSH
// uc_side := 0 ;
70249: LD_ADDR_OWVAR 20
70253: PUSH
70254: LD_INT 0
70256: ST_TO_ADDR
// uc_nation := 0 ;
70257: LD_ADDR_OWVAR 21
70261: PUSH
70262: LD_INT 0
70264: ST_TO_ADDR
// hc_sex := sex_male ;
70265: LD_ADDR_OWVAR 27
70269: PUSH
70270: LD_INT 1
70272: ST_TO_ADDR
// hc_class := class_apeman ;
70273: LD_ADDR_OWVAR 28
70277: PUSH
70278: LD_INT 12
70280: ST_TO_ADDR
// hc_gallery :=  ;
70281: LD_ADDR_OWVAR 33
70285: PUSH
70286: LD_STRING 
70288: ST_TO_ADDR
// if agressivity = 0 then
70289: LD_VAR 0 1
70293: PUSH
70294: LD_INT 0
70296: EQUAL
70297: IFFALSE 70309
// hc_agressivity := 0 else
70299: LD_ADDR_OWVAR 35
70303: PUSH
70304: LD_INT 0
70306: ST_TO_ADDR
70307: GO 70330
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70309: LD_ADDR_OWVAR 35
70313: PUSH
70314: LD_VAR 0 1
70318: NEG
70319: PPUSH
70320: LD_VAR 0 1
70324: PPUSH
70325: CALL_OW 12
70329: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70330: LD_ADDR_OWVAR 31
70334: PUSH
70335: LD_INT 0
70337: PPUSH
70338: LD_INT 3
70340: PPUSH
70341: CALL_OW 12
70345: PUSH
70346: LD_INT 0
70348: PPUSH
70349: LD_INT 3
70351: PPUSH
70352: CALL_OW 12
70356: PUSH
70357: LD_INT 0
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: ST_TO_ADDR
// end ;
70369: LD_VAR 0 2
70373: RET
// export function PrepareTiger ( agressivity ) ; begin
70374: LD_INT 0
70376: PPUSH
// uc_side := 0 ;
70377: LD_ADDR_OWVAR 20
70381: PUSH
70382: LD_INT 0
70384: ST_TO_ADDR
// uc_nation := 0 ;
70385: LD_ADDR_OWVAR 21
70389: PUSH
70390: LD_INT 0
70392: ST_TO_ADDR
// hc_class := class_tiger ;
70393: LD_ADDR_OWVAR 28
70397: PUSH
70398: LD_INT 14
70400: ST_TO_ADDR
// hc_gallery :=  ;
70401: LD_ADDR_OWVAR 33
70405: PUSH
70406: LD_STRING 
70408: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70409: LD_ADDR_OWVAR 35
70413: PUSH
70414: LD_VAR 0 1
70418: NEG
70419: PPUSH
70420: LD_VAR 0 1
70424: PPUSH
70425: CALL_OW 12
70429: ST_TO_ADDR
// end ;
70430: LD_VAR 0 2
70434: RET
// export function PrepareEnchidna ( ) ; begin
70435: LD_INT 0
70437: PPUSH
// uc_side := 0 ;
70438: LD_ADDR_OWVAR 20
70442: PUSH
70443: LD_INT 0
70445: ST_TO_ADDR
// uc_nation := 0 ;
70446: LD_ADDR_OWVAR 21
70450: PUSH
70451: LD_INT 0
70453: ST_TO_ADDR
// hc_class := class_baggie ;
70454: LD_ADDR_OWVAR 28
70458: PUSH
70459: LD_INT 13
70461: ST_TO_ADDR
// hc_gallery :=  ;
70462: LD_ADDR_OWVAR 33
70466: PUSH
70467: LD_STRING 
70469: ST_TO_ADDR
// end ;
70470: LD_VAR 0 1
70474: RET
// export function PrepareFrog ( ) ; begin
70475: LD_INT 0
70477: PPUSH
// uc_side := 0 ;
70478: LD_ADDR_OWVAR 20
70482: PUSH
70483: LD_INT 0
70485: ST_TO_ADDR
// uc_nation := 0 ;
70486: LD_ADDR_OWVAR 21
70490: PUSH
70491: LD_INT 0
70493: ST_TO_ADDR
// hc_class := class_frog ;
70494: LD_ADDR_OWVAR 28
70498: PUSH
70499: LD_INT 19
70501: ST_TO_ADDR
// hc_gallery :=  ;
70502: LD_ADDR_OWVAR 33
70506: PUSH
70507: LD_STRING 
70509: ST_TO_ADDR
// end ;
70510: LD_VAR 0 1
70514: RET
// export function PrepareFish ( ) ; begin
70515: LD_INT 0
70517: PPUSH
// uc_side := 0 ;
70518: LD_ADDR_OWVAR 20
70522: PUSH
70523: LD_INT 0
70525: ST_TO_ADDR
// uc_nation := 0 ;
70526: LD_ADDR_OWVAR 21
70530: PUSH
70531: LD_INT 0
70533: ST_TO_ADDR
// hc_class := class_fish ;
70534: LD_ADDR_OWVAR 28
70538: PUSH
70539: LD_INT 20
70541: ST_TO_ADDR
// hc_gallery :=  ;
70542: LD_ADDR_OWVAR 33
70546: PUSH
70547: LD_STRING 
70549: ST_TO_ADDR
// end ;
70550: LD_VAR 0 1
70554: RET
// export function PrepareBird ( ) ; begin
70555: LD_INT 0
70557: PPUSH
// uc_side := 0 ;
70558: LD_ADDR_OWVAR 20
70562: PUSH
70563: LD_INT 0
70565: ST_TO_ADDR
// uc_nation := 0 ;
70566: LD_ADDR_OWVAR 21
70570: PUSH
70571: LD_INT 0
70573: ST_TO_ADDR
// hc_class := class_phororhacos ;
70574: LD_ADDR_OWVAR 28
70578: PUSH
70579: LD_INT 18
70581: ST_TO_ADDR
// hc_gallery :=  ;
70582: LD_ADDR_OWVAR 33
70586: PUSH
70587: LD_STRING 
70589: ST_TO_ADDR
// end ;
70590: LD_VAR 0 1
70594: RET
// export function PrepareHorse ( ) ; begin
70595: LD_INT 0
70597: PPUSH
// uc_side := 0 ;
70598: LD_ADDR_OWVAR 20
70602: PUSH
70603: LD_INT 0
70605: ST_TO_ADDR
// uc_nation := 0 ;
70606: LD_ADDR_OWVAR 21
70610: PUSH
70611: LD_INT 0
70613: ST_TO_ADDR
// hc_class := class_horse ;
70614: LD_ADDR_OWVAR 28
70618: PUSH
70619: LD_INT 21
70621: ST_TO_ADDR
// hc_gallery :=  ;
70622: LD_ADDR_OWVAR 33
70626: PUSH
70627: LD_STRING 
70629: ST_TO_ADDR
// end ;
70630: LD_VAR 0 1
70634: RET
// export function PrepareMastodont ( ) ; begin
70635: LD_INT 0
70637: PPUSH
// uc_side := 0 ;
70638: LD_ADDR_OWVAR 20
70642: PUSH
70643: LD_INT 0
70645: ST_TO_ADDR
// uc_nation := 0 ;
70646: LD_ADDR_OWVAR 21
70650: PUSH
70651: LD_INT 0
70653: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70654: LD_ADDR_OWVAR 37
70658: PUSH
70659: LD_INT 31
70661: ST_TO_ADDR
// vc_control := control_rider ;
70662: LD_ADDR_OWVAR 38
70666: PUSH
70667: LD_INT 4
70669: ST_TO_ADDR
// end ;
70670: LD_VAR 0 1
70674: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70675: LD_INT 0
70677: PPUSH
70678: PPUSH
70679: PPUSH
// uc_side = 0 ;
70680: LD_ADDR_OWVAR 20
70684: PUSH
70685: LD_INT 0
70687: ST_TO_ADDR
// uc_nation = 0 ;
70688: LD_ADDR_OWVAR 21
70692: PUSH
70693: LD_INT 0
70695: ST_TO_ADDR
// InitHc_All ( ) ;
70696: CALL_OW 584
// InitVc ;
70700: CALL_OW 20
// if mastodonts then
70704: LD_VAR 0 6
70708: IFFALSE 70775
// for i = 1 to mastodonts do
70710: LD_ADDR_VAR 0 11
70714: PUSH
70715: DOUBLE
70716: LD_INT 1
70718: DEC
70719: ST_TO_ADDR
70720: LD_VAR 0 6
70724: PUSH
70725: FOR_TO
70726: IFFALSE 70773
// begin vc_chassis := 31 ;
70728: LD_ADDR_OWVAR 37
70732: PUSH
70733: LD_INT 31
70735: ST_TO_ADDR
// vc_control := control_rider ;
70736: LD_ADDR_OWVAR 38
70740: PUSH
70741: LD_INT 4
70743: ST_TO_ADDR
// animal := CreateVehicle ;
70744: LD_ADDR_VAR 0 12
70748: PUSH
70749: CALL_OW 45
70753: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70754: LD_VAR 0 12
70758: PPUSH
70759: LD_VAR 0 8
70763: PPUSH
70764: LD_INT 0
70766: PPUSH
70767: CALL 72903 0 3
// end ;
70771: GO 70725
70773: POP
70774: POP
// if horses then
70775: LD_VAR 0 5
70779: IFFALSE 70846
// for i = 1 to horses do
70781: LD_ADDR_VAR 0 11
70785: PUSH
70786: DOUBLE
70787: LD_INT 1
70789: DEC
70790: ST_TO_ADDR
70791: LD_VAR 0 5
70795: PUSH
70796: FOR_TO
70797: IFFALSE 70844
// begin hc_class := 21 ;
70799: LD_ADDR_OWVAR 28
70803: PUSH
70804: LD_INT 21
70806: ST_TO_ADDR
// hc_gallery :=  ;
70807: LD_ADDR_OWVAR 33
70811: PUSH
70812: LD_STRING 
70814: ST_TO_ADDR
// animal := CreateHuman ;
70815: LD_ADDR_VAR 0 12
70819: PUSH
70820: CALL_OW 44
70824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70825: LD_VAR 0 12
70829: PPUSH
70830: LD_VAR 0 8
70834: PPUSH
70835: LD_INT 0
70837: PPUSH
70838: CALL 72903 0 3
// end ;
70842: GO 70796
70844: POP
70845: POP
// if birds then
70846: LD_VAR 0 1
70850: IFFALSE 70917
// for i = 1 to birds do
70852: LD_ADDR_VAR 0 11
70856: PUSH
70857: DOUBLE
70858: LD_INT 1
70860: DEC
70861: ST_TO_ADDR
70862: LD_VAR 0 1
70866: PUSH
70867: FOR_TO
70868: IFFALSE 70915
// begin hc_class := 18 ;
70870: LD_ADDR_OWVAR 28
70874: PUSH
70875: LD_INT 18
70877: ST_TO_ADDR
// hc_gallery =  ;
70878: LD_ADDR_OWVAR 33
70882: PUSH
70883: LD_STRING 
70885: ST_TO_ADDR
// animal := CreateHuman ;
70886: LD_ADDR_VAR 0 12
70890: PUSH
70891: CALL_OW 44
70895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70896: LD_VAR 0 12
70900: PPUSH
70901: LD_VAR 0 8
70905: PPUSH
70906: LD_INT 0
70908: PPUSH
70909: CALL 72903 0 3
// end ;
70913: GO 70867
70915: POP
70916: POP
// if tigers then
70917: LD_VAR 0 2
70921: IFFALSE 71005
// for i = 1 to tigers do
70923: LD_ADDR_VAR 0 11
70927: PUSH
70928: DOUBLE
70929: LD_INT 1
70931: DEC
70932: ST_TO_ADDR
70933: LD_VAR 0 2
70937: PUSH
70938: FOR_TO
70939: IFFALSE 71003
// begin hc_class = class_tiger ;
70941: LD_ADDR_OWVAR 28
70945: PUSH
70946: LD_INT 14
70948: ST_TO_ADDR
// hc_gallery =  ;
70949: LD_ADDR_OWVAR 33
70953: PUSH
70954: LD_STRING 
70956: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70957: LD_ADDR_OWVAR 35
70961: PUSH
70962: LD_INT 7
70964: NEG
70965: PPUSH
70966: LD_INT 7
70968: PPUSH
70969: CALL_OW 12
70973: ST_TO_ADDR
// animal := CreateHuman ;
70974: LD_ADDR_VAR 0 12
70978: PUSH
70979: CALL_OW 44
70983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70984: LD_VAR 0 12
70988: PPUSH
70989: LD_VAR 0 8
70993: PPUSH
70994: LD_INT 0
70996: PPUSH
70997: CALL 72903 0 3
// end ;
71001: GO 70938
71003: POP
71004: POP
// if apemans then
71005: LD_VAR 0 3
71009: IFFALSE 71132
// for i = 1 to apemans do
71011: LD_ADDR_VAR 0 11
71015: PUSH
71016: DOUBLE
71017: LD_INT 1
71019: DEC
71020: ST_TO_ADDR
71021: LD_VAR 0 3
71025: PUSH
71026: FOR_TO
71027: IFFALSE 71130
// begin hc_class = class_apeman ;
71029: LD_ADDR_OWVAR 28
71033: PUSH
71034: LD_INT 12
71036: ST_TO_ADDR
// hc_gallery =  ;
71037: LD_ADDR_OWVAR 33
71041: PUSH
71042: LD_STRING 
71044: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71045: LD_ADDR_OWVAR 35
71049: PUSH
71050: LD_INT 2
71052: NEG
71053: PPUSH
71054: LD_INT 2
71056: PPUSH
71057: CALL_OW 12
71061: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71062: LD_ADDR_OWVAR 31
71066: PUSH
71067: LD_INT 1
71069: PPUSH
71070: LD_INT 3
71072: PPUSH
71073: CALL_OW 12
71077: PUSH
71078: LD_INT 1
71080: PPUSH
71081: LD_INT 3
71083: PPUSH
71084: CALL_OW 12
71088: PUSH
71089: LD_INT 0
71091: PUSH
71092: LD_INT 0
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: ST_TO_ADDR
// animal := CreateHuman ;
71101: LD_ADDR_VAR 0 12
71105: PUSH
71106: CALL_OW 44
71110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71111: LD_VAR 0 12
71115: PPUSH
71116: LD_VAR 0 8
71120: PPUSH
71121: LD_INT 0
71123: PPUSH
71124: CALL 72903 0 3
// end ;
71128: GO 71026
71130: POP
71131: POP
// if enchidnas then
71132: LD_VAR 0 4
71136: IFFALSE 71203
// for i = 1 to enchidnas do
71138: LD_ADDR_VAR 0 11
71142: PUSH
71143: DOUBLE
71144: LD_INT 1
71146: DEC
71147: ST_TO_ADDR
71148: LD_VAR 0 4
71152: PUSH
71153: FOR_TO
71154: IFFALSE 71201
// begin hc_class = 13 ;
71156: LD_ADDR_OWVAR 28
71160: PUSH
71161: LD_INT 13
71163: ST_TO_ADDR
// hc_gallery =  ;
71164: LD_ADDR_OWVAR 33
71168: PUSH
71169: LD_STRING 
71171: ST_TO_ADDR
// animal := CreateHuman ;
71172: LD_ADDR_VAR 0 12
71176: PUSH
71177: CALL_OW 44
71181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71182: LD_VAR 0 12
71186: PPUSH
71187: LD_VAR 0 8
71191: PPUSH
71192: LD_INT 0
71194: PPUSH
71195: CALL 72903 0 3
// end ;
71199: GO 71153
71201: POP
71202: POP
// if fishes then
71203: LD_VAR 0 7
71207: IFFALSE 71274
// for i = 1 to fishes do
71209: LD_ADDR_VAR 0 11
71213: PUSH
71214: DOUBLE
71215: LD_INT 1
71217: DEC
71218: ST_TO_ADDR
71219: LD_VAR 0 7
71223: PUSH
71224: FOR_TO
71225: IFFALSE 71272
// begin hc_class = 20 ;
71227: LD_ADDR_OWVAR 28
71231: PUSH
71232: LD_INT 20
71234: ST_TO_ADDR
// hc_gallery =  ;
71235: LD_ADDR_OWVAR 33
71239: PUSH
71240: LD_STRING 
71242: ST_TO_ADDR
// animal := CreateHuman ;
71243: LD_ADDR_VAR 0 12
71247: PUSH
71248: CALL_OW 44
71252: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71253: LD_VAR 0 12
71257: PPUSH
71258: LD_VAR 0 9
71262: PPUSH
71263: LD_INT 0
71265: PPUSH
71266: CALL 72903 0 3
// end ;
71270: GO 71224
71272: POP
71273: POP
// end ;
71274: LD_VAR 0 10
71278: RET
// export function WantHeal ( sci , unit ) ; begin
71279: LD_INT 0
71281: PPUSH
// if GetTaskList ( sci ) > 0 then
71282: LD_VAR 0 1
71286: PPUSH
71287: CALL_OW 437
71291: PUSH
71292: LD_INT 0
71294: GREATER
71295: IFFALSE 71365
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71297: LD_VAR 0 1
71301: PPUSH
71302: CALL_OW 437
71306: PUSH
71307: LD_INT 1
71309: ARRAY
71310: PUSH
71311: LD_INT 1
71313: ARRAY
71314: PUSH
71315: LD_STRING l
71317: EQUAL
71318: PUSH
71319: LD_VAR 0 1
71323: PPUSH
71324: CALL_OW 437
71328: PUSH
71329: LD_INT 1
71331: ARRAY
71332: PUSH
71333: LD_INT 4
71335: ARRAY
71336: PUSH
71337: LD_VAR 0 2
71341: EQUAL
71342: AND
71343: IFFALSE 71355
// result := true else
71345: LD_ADDR_VAR 0 3
71349: PUSH
71350: LD_INT 1
71352: ST_TO_ADDR
71353: GO 71363
// result := false ;
71355: LD_ADDR_VAR 0 3
71359: PUSH
71360: LD_INT 0
71362: ST_TO_ADDR
// end else
71363: GO 71373
// result := false ;
71365: LD_ADDR_VAR 0 3
71369: PUSH
71370: LD_INT 0
71372: ST_TO_ADDR
// end ;
71373: LD_VAR 0 3
71377: RET
// export function HealTarget ( sci ) ; begin
71378: LD_INT 0
71380: PPUSH
// if not sci then
71381: LD_VAR 0 1
71385: NOT
71386: IFFALSE 71390
// exit ;
71388: GO 71455
// result := 0 ;
71390: LD_ADDR_VAR 0 2
71394: PUSH
71395: LD_INT 0
71397: ST_TO_ADDR
// if GetTaskList ( sci ) then
71398: LD_VAR 0 1
71402: PPUSH
71403: CALL_OW 437
71407: IFFALSE 71455
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71409: LD_VAR 0 1
71413: PPUSH
71414: CALL_OW 437
71418: PUSH
71419: LD_INT 1
71421: ARRAY
71422: PUSH
71423: LD_INT 1
71425: ARRAY
71426: PUSH
71427: LD_STRING l
71429: EQUAL
71430: IFFALSE 71455
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71432: LD_ADDR_VAR 0 2
71436: PUSH
71437: LD_VAR 0 1
71441: PPUSH
71442: CALL_OW 437
71446: PUSH
71447: LD_INT 1
71449: ARRAY
71450: PUSH
71451: LD_INT 4
71453: ARRAY
71454: ST_TO_ADDR
// end ;
71455: LD_VAR 0 2
71459: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71460: LD_INT 0
71462: PPUSH
71463: PPUSH
71464: PPUSH
71465: PPUSH
// if not base_units then
71466: LD_VAR 0 1
71470: NOT
71471: IFFALSE 71475
// exit ;
71473: GO 71562
// result := false ;
71475: LD_ADDR_VAR 0 2
71479: PUSH
71480: LD_INT 0
71482: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71483: LD_ADDR_VAR 0 5
71487: PUSH
71488: LD_VAR 0 1
71492: PPUSH
71493: LD_INT 21
71495: PUSH
71496: LD_INT 3
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PPUSH
71503: CALL_OW 72
71507: ST_TO_ADDR
// if not tmp then
71508: LD_VAR 0 5
71512: NOT
71513: IFFALSE 71517
// exit ;
71515: GO 71562
// for i in tmp do
71517: LD_ADDR_VAR 0 3
71521: PUSH
71522: LD_VAR 0 5
71526: PUSH
71527: FOR_IN
71528: IFFALSE 71560
// begin result := EnemyInRange ( i , 22 ) ;
71530: LD_ADDR_VAR 0 2
71534: PUSH
71535: LD_VAR 0 3
71539: PPUSH
71540: LD_INT 22
71542: PPUSH
71543: CALL 69140 0 2
71547: ST_TO_ADDR
// if result then
71548: LD_VAR 0 2
71552: IFFALSE 71558
// exit ;
71554: POP
71555: POP
71556: GO 71562
// end ;
71558: GO 71527
71560: POP
71561: POP
// end ;
71562: LD_VAR 0 2
71566: RET
// export function FilterByTag ( units , tag ) ; begin
71567: LD_INT 0
71569: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71570: LD_ADDR_VAR 0 3
71574: PUSH
71575: LD_VAR 0 1
71579: PPUSH
71580: LD_INT 120
71582: PUSH
71583: LD_VAR 0 2
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PPUSH
71592: CALL_OW 72
71596: ST_TO_ADDR
// end ;
71597: LD_VAR 0 3
71601: RET
// export function IsDriver ( un ) ; begin
71602: LD_INT 0
71604: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71605: LD_ADDR_VAR 0 2
71609: PUSH
71610: LD_VAR 0 1
71614: PUSH
71615: LD_INT 55
71617: PUSH
71618: EMPTY
71619: LIST
71620: PPUSH
71621: CALL_OW 69
71625: IN
71626: ST_TO_ADDR
// end ;
71627: LD_VAR 0 2
71631: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71632: LD_INT 0
71634: PPUSH
71635: PPUSH
// list := [ ] ;
71636: LD_ADDR_VAR 0 5
71640: PUSH
71641: EMPTY
71642: ST_TO_ADDR
// case d of 0 :
71643: LD_VAR 0 3
71647: PUSH
71648: LD_INT 0
71650: DOUBLE
71651: EQUAL
71652: IFTRUE 71656
71654: GO 71789
71656: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71657: LD_ADDR_VAR 0 5
71661: PUSH
71662: LD_VAR 0 1
71666: PUSH
71667: LD_INT 4
71669: MINUS
71670: PUSH
71671: LD_VAR 0 2
71675: PUSH
71676: LD_INT 4
71678: MINUS
71679: PUSH
71680: LD_INT 2
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: LIST
71687: PUSH
71688: LD_VAR 0 1
71692: PUSH
71693: LD_INT 3
71695: MINUS
71696: PUSH
71697: LD_VAR 0 2
71701: PUSH
71702: LD_INT 1
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: LIST
71709: PUSH
71710: LD_VAR 0 1
71714: PUSH
71715: LD_INT 4
71717: PLUS
71718: PUSH
71719: LD_VAR 0 2
71723: PUSH
71724: LD_INT 4
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: LIST
71731: PUSH
71732: LD_VAR 0 1
71736: PUSH
71737: LD_INT 3
71739: PLUS
71740: PUSH
71741: LD_VAR 0 2
71745: PUSH
71746: LD_INT 3
71748: PLUS
71749: PUSH
71750: LD_INT 5
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: LIST
71757: PUSH
71758: LD_VAR 0 1
71762: PUSH
71763: LD_VAR 0 2
71767: PUSH
71768: LD_INT 4
71770: PLUS
71771: PUSH
71772: LD_INT 0
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: LIST
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: ST_TO_ADDR
// end ; 1 :
71787: GO 72487
71789: LD_INT 1
71791: DOUBLE
71792: EQUAL
71793: IFTRUE 71797
71795: GO 71930
71797: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71798: LD_ADDR_VAR 0 5
71802: PUSH
71803: LD_VAR 0 1
71807: PUSH
71808: LD_VAR 0 2
71812: PUSH
71813: LD_INT 4
71815: MINUS
71816: PUSH
71817: LD_INT 3
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: LIST
71824: PUSH
71825: LD_VAR 0 1
71829: PUSH
71830: LD_INT 3
71832: MINUS
71833: PUSH
71834: LD_VAR 0 2
71838: PUSH
71839: LD_INT 3
71841: MINUS
71842: PUSH
71843: LD_INT 2
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: LIST
71850: PUSH
71851: LD_VAR 0 1
71855: PUSH
71856: LD_INT 4
71858: MINUS
71859: PUSH
71860: LD_VAR 0 2
71864: PUSH
71865: LD_INT 1
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: LIST
71872: PUSH
71873: LD_VAR 0 1
71877: PUSH
71878: LD_VAR 0 2
71882: PUSH
71883: LD_INT 3
71885: PLUS
71886: PUSH
71887: LD_INT 0
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: LIST
71894: PUSH
71895: LD_VAR 0 1
71899: PUSH
71900: LD_INT 4
71902: PLUS
71903: PUSH
71904: LD_VAR 0 2
71908: PUSH
71909: LD_INT 4
71911: PLUS
71912: PUSH
71913: LD_INT 5
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: LIST
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: ST_TO_ADDR
// end ; 2 :
71928: GO 72487
71930: LD_INT 2
71932: DOUBLE
71933: EQUAL
71934: IFTRUE 71938
71936: GO 72067
71938: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71939: LD_ADDR_VAR 0 5
71943: PUSH
71944: LD_VAR 0 1
71948: PUSH
71949: LD_VAR 0 2
71953: PUSH
71954: LD_INT 3
71956: MINUS
71957: PUSH
71958: LD_INT 3
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: LIST
71965: PUSH
71966: LD_VAR 0 1
71970: PUSH
71971: LD_INT 4
71973: PLUS
71974: PUSH
71975: LD_VAR 0 2
71979: PUSH
71980: LD_INT 4
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: LIST
71987: PUSH
71988: LD_VAR 0 1
71992: PUSH
71993: LD_VAR 0 2
71997: PUSH
71998: LD_INT 4
72000: PLUS
72001: PUSH
72002: LD_INT 0
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: LIST
72009: PUSH
72010: LD_VAR 0 1
72014: PUSH
72015: LD_INT 3
72017: MINUS
72018: PUSH
72019: LD_VAR 0 2
72023: PUSH
72024: LD_INT 1
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: LIST
72031: PUSH
72032: LD_VAR 0 1
72036: PUSH
72037: LD_INT 4
72039: MINUS
72040: PUSH
72041: LD_VAR 0 2
72045: PUSH
72046: LD_INT 4
72048: MINUS
72049: PUSH
72050: LD_INT 2
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: LIST
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: ST_TO_ADDR
// end ; 3 :
72065: GO 72487
72067: LD_INT 3
72069: DOUBLE
72070: EQUAL
72071: IFTRUE 72075
72073: GO 72208
72075: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72076: LD_ADDR_VAR 0 5
72080: PUSH
72081: LD_VAR 0 1
72085: PUSH
72086: LD_INT 3
72088: PLUS
72089: PUSH
72090: LD_VAR 0 2
72094: PUSH
72095: LD_INT 4
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: LIST
72102: PUSH
72103: LD_VAR 0 1
72107: PUSH
72108: LD_INT 4
72110: PLUS
72111: PUSH
72112: LD_VAR 0 2
72116: PUSH
72117: LD_INT 4
72119: PLUS
72120: PUSH
72121: LD_INT 5
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: LIST
72128: PUSH
72129: LD_VAR 0 1
72133: PUSH
72134: LD_INT 4
72136: MINUS
72137: PUSH
72138: LD_VAR 0 2
72142: PUSH
72143: LD_INT 1
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: LIST
72150: PUSH
72151: LD_VAR 0 1
72155: PUSH
72156: LD_VAR 0 2
72160: PUSH
72161: LD_INT 4
72163: MINUS
72164: PUSH
72165: LD_INT 3
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: LIST
72172: PUSH
72173: LD_VAR 0 1
72177: PUSH
72178: LD_INT 3
72180: MINUS
72181: PUSH
72182: LD_VAR 0 2
72186: PUSH
72187: LD_INT 3
72189: MINUS
72190: PUSH
72191: LD_INT 2
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: LIST
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: ST_TO_ADDR
// end ; 4 :
72206: GO 72487
72208: LD_INT 4
72210: DOUBLE
72211: EQUAL
72212: IFTRUE 72216
72214: GO 72349
72216: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72217: LD_ADDR_VAR 0 5
72221: PUSH
72222: LD_VAR 0 1
72226: PUSH
72227: LD_VAR 0 2
72231: PUSH
72232: LD_INT 4
72234: PLUS
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: PUSH
72244: LD_VAR 0 1
72248: PUSH
72249: LD_INT 3
72251: PLUS
72252: PUSH
72253: LD_VAR 0 2
72257: PUSH
72258: LD_INT 3
72260: PLUS
72261: PUSH
72262: LD_INT 5
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: LIST
72269: PUSH
72270: LD_VAR 0 1
72274: PUSH
72275: LD_INT 4
72277: PLUS
72278: PUSH
72279: LD_VAR 0 2
72283: PUSH
72284: LD_INT 4
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: LIST
72291: PUSH
72292: LD_VAR 0 1
72296: PUSH
72297: LD_VAR 0 2
72301: PUSH
72302: LD_INT 3
72304: MINUS
72305: PUSH
72306: LD_INT 3
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: LIST
72313: PUSH
72314: LD_VAR 0 1
72318: PUSH
72319: LD_INT 4
72321: MINUS
72322: PUSH
72323: LD_VAR 0 2
72327: PUSH
72328: LD_INT 4
72330: MINUS
72331: PUSH
72332: LD_INT 2
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: LIST
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: ST_TO_ADDR
// end ; 5 :
72347: GO 72487
72349: LD_INT 5
72351: DOUBLE
72352: EQUAL
72353: IFTRUE 72357
72355: GO 72486
72357: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72358: LD_ADDR_VAR 0 5
72362: PUSH
72363: LD_VAR 0 1
72367: PUSH
72368: LD_INT 4
72370: MINUS
72371: PUSH
72372: LD_VAR 0 2
72376: PUSH
72377: LD_INT 1
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: LIST
72384: PUSH
72385: LD_VAR 0 1
72389: PUSH
72390: LD_VAR 0 2
72394: PUSH
72395: LD_INT 4
72397: MINUS
72398: PUSH
72399: LD_INT 3
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: LIST
72406: PUSH
72407: LD_VAR 0 1
72411: PUSH
72412: LD_INT 4
72414: PLUS
72415: PUSH
72416: LD_VAR 0 2
72420: PUSH
72421: LD_INT 4
72423: PLUS
72424: PUSH
72425: LD_INT 5
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: LIST
72432: PUSH
72433: LD_VAR 0 1
72437: PUSH
72438: LD_INT 3
72440: PLUS
72441: PUSH
72442: LD_VAR 0 2
72446: PUSH
72447: LD_INT 4
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: LIST
72454: PUSH
72455: LD_VAR 0 1
72459: PUSH
72460: LD_VAR 0 2
72464: PUSH
72465: LD_INT 3
72467: PLUS
72468: PUSH
72469: LD_INT 0
72471: PUSH
72472: EMPTY
72473: LIST
72474: LIST
72475: LIST
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: ST_TO_ADDR
// end ; end ;
72484: GO 72487
72486: POP
// result := list ;
72487: LD_ADDR_VAR 0 4
72491: PUSH
72492: LD_VAR 0 5
72496: ST_TO_ADDR
// end ;
72497: LD_VAR 0 4
72501: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72502: LD_INT 0
72504: PPUSH
72505: PPUSH
72506: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72507: LD_VAR 0 1
72511: NOT
72512: PUSH
72513: LD_VAR 0 2
72517: PUSH
72518: LD_INT 1
72520: PUSH
72521: LD_INT 2
72523: PUSH
72524: LD_INT 3
72526: PUSH
72527: LD_INT 4
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: IN
72536: NOT
72537: OR
72538: IFFALSE 72542
// exit ;
72540: GO 72625
// tmp := [ ] ;
72542: LD_ADDR_VAR 0 5
72546: PUSH
72547: EMPTY
72548: ST_TO_ADDR
// for i in units do
72549: LD_ADDR_VAR 0 4
72553: PUSH
72554: LD_VAR 0 1
72558: PUSH
72559: FOR_IN
72560: IFFALSE 72594
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72562: LD_ADDR_VAR 0 5
72566: PUSH
72567: LD_VAR 0 5
72571: PPUSH
72572: LD_VAR 0 4
72576: PPUSH
72577: LD_VAR 0 2
72581: PPUSH
72582: CALL_OW 259
72586: PPUSH
72587: CALL 73998 0 2
72591: ST_TO_ADDR
72592: GO 72559
72594: POP
72595: POP
// if not tmp then
72596: LD_VAR 0 5
72600: NOT
72601: IFFALSE 72605
// exit ;
72603: GO 72625
// result := SortListByListDesc ( units , tmp ) ;
72605: LD_ADDR_VAR 0 3
72609: PUSH
72610: LD_VAR 0 1
72614: PPUSH
72615: LD_VAR 0 5
72619: PPUSH
72620: CALL_OW 77
72624: ST_TO_ADDR
// end ;
72625: LD_VAR 0 3
72629: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72630: LD_INT 0
72632: PPUSH
72633: PPUSH
72634: PPUSH
// result := false ;
72635: LD_ADDR_VAR 0 3
72639: PUSH
72640: LD_INT 0
72642: ST_TO_ADDR
// if not building then
72643: LD_VAR 0 2
72647: NOT
72648: IFFALSE 72652
// exit ;
72650: GO 72790
// x := GetX ( building ) ;
72652: LD_ADDR_VAR 0 4
72656: PUSH
72657: LD_VAR 0 2
72661: PPUSH
72662: CALL_OW 250
72666: ST_TO_ADDR
// y := GetY ( building ) ;
72667: LD_ADDR_VAR 0 5
72671: PUSH
72672: LD_VAR 0 2
72676: PPUSH
72677: CALL_OW 251
72681: ST_TO_ADDR
// if not x or not y then
72682: LD_VAR 0 4
72686: NOT
72687: PUSH
72688: LD_VAR 0 5
72692: NOT
72693: OR
72694: IFFALSE 72698
// exit ;
72696: GO 72790
// if GetTaskList ( unit ) then
72698: LD_VAR 0 1
72702: PPUSH
72703: CALL_OW 437
72707: IFFALSE 72790
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72709: LD_STRING e
72711: PUSH
72712: LD_VAR 0 1
72716: PPUSH
72717: CALL_OW 437
72721: PUSH
72722: LD_INT 1
72724: ARRAY
72725: PUSH
72726: LD_INT 1
72728: ARRAY
72729: EQUAL
72730: PUSH
72731: LD_VAR 0 4
72735: PUSH
72736: LD_VAR 0 1
72740: PPUSH
72741: CALL_OW 437
72745: PUSH
72746: LD_INT 1
72748: ARRAY
72749: PUSH
72750: LD_INT 2
72752: ARRAY
72753: EQUAL
72754: AND
72755: PUSH
72756: LD_VAR 0 5
72760: PUSH
72761: LD_VAR 0 1
72765: PPUSH
72766: CALL_OW 437
72770: PUSH
72771: LD_INT 1
72773: ARRAY
72774: PUSH
72775: LD_INT 3
72777: ARRAY
72778: EQUAL
72779: AND
72780: IFFALSE 72790
// result := true end ;
72782: LD_ADDR_VAR 0 3
72786: PUSH
72787: LD_INT 1
72789: ST_TO_ADDR
// end ;
72790: LD_VAR 0 3
72794: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72795: LD_INT 0
72797: PPUSH
// result := false ;
72798: LD_ADDR_VAR 0 4
72802: PUSH
72803: LD_INT 0
72805: ST_TO_ADDR
// if GetTaskList ( unit ) then
72806: LD_VAR 0 1
72810: PPUSH
72811: CALL_OW 437
72815: IFFALSE 72898
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72817: LD_STRING M
72819: PUSH
72820: LD_VAR 0 1
72824: PPUSH
72825: CALL_OW 437
72829: PUSH
72830: LD_INT 1
72832: ARRAY
72833: PUSH
72834: LD_INT 1
72836: ARRAY
72837: EQUAL
72838: PUSH
72839: LD_VAR 0 2
72843: PUSH
72844: LD_VAR 0 1
72848: PPUSH
72849: CALL_OW 437
72853: PUSH
72854: LD_INT 1
72856: ARRAY
72857: PUSH
72858: LD_INT 2
72860: ARRAY
72861: EQUAL
72862: AND
72863: PUSH
72864: LD_VAR 0 3
72868: PUSH
72869: LD_VAR 0 1
72873: PPUSH
72874: CALL_OW 437
72878: PUSH
72879: LD_INT 1
72881: ARRAY
72882: PUSH
72883: LD_INT 3
72885: ARRAY
72886: EQUAL
72887: AND
72888: IFFALSE 72898
// result := true ;
72890: LD_ADDR_VAR 0 4
72894: PUSH
72895: LD_INT 1
72897: ST_TO_ADDR
// end ; end ;
72898: LD_VAR 0 4
72902: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72903: LD_INT 0
72905: PPUSH
72906: PPUSH
72907: PPUSH
72908: PPUSH
// if not unit or not area then
72909: LD_VAR 0 1
72913: NOT
72914: PUSH
72915: LD_VAR 0 2
72919: NOT
72920: OR
72921: IFFALSE 72925
// exit ;
72923: GO 73101
// tmp := AreaToList ( area , i ) ;
72925: LD_ADDR_VAR 0 6
72929: PUSH
72930: LD_VAR 0 2
72934: PPUSH
72935: LD_VAR 0 5
72939: PPUSH
72940: CALL_OW 517
72944: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72945: LD_ADDR_VAR 0 5
72949: PUSH
72950: DOUBLE
72951: LD_INT 1
72953: DEC
72954: ST_TO_ADDR
72955: LD_VAR 0 6
72959: PUSH
72960: LD_INT 1
72962: ARRAY
72963: PUSH
72964: FOR_TO
72965: IFFALSE 73099
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72967: LD_ADDR_VAR 0 7
72971: PUSH
72972: LD_VAR 0 6
72976: PUSH
72977: LD_INT 1
72979: ARRAY
72980: PUSH
72981: LD_VAR 0 5
72985: ARRAY
72986: PUSH
72987: LD_VAR 0 6
72991: PUSH
72992: LD_INT 2
72994: ARRAY
72995: PUSH
72996: LD_VAR 0 5
73000: ARRAY
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73006: LD_INT 92
73008: PUSH
73009: LD_VAR 0 7
73013: PUSH
73014: LD_INT 1
73016: ARRAY
73017: PUSH
73018: LD_VAR 0 7
73022: PUSH
73023: LD_INT 2
73025: ARRAY
73026: PUSH
73027: LD_INT 2
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: PPUSH
73036: CALL_OW 69
73040: PUSH
73041: LD_INT 0
73043: EQUAL
73044: IFFALSE 73097
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73046: LD_VAR 0 1
73050: PPUSH
73051: LD_VAR 0 7
73055: PUSH
73056: LD_INT 1
73058: ARRAY
73059: PPUSH
73060: LD_VAR 0 7
73064: PUSH
73065: LD_INT 2
73067: ARRAY
73068: PPUSH
73069: LD_VAR 0 3
73073: PPUSH
73074: CALL_OW 48
// result := IsPlaced ( unit ) ;
73078: LD_ADDR_VAR 0 4
73082: PUSH
73083: LD_VAR 0 1
73087: PPUSH
73088: CALL_OW 305
73092: ST_TO_ADDR
// exit ;
73093: POP
73094: POP
73095: GO 73101
// end ; end ;
73097: GO 72964
73099: POP
73100: POP
// end ;
73101: LD_VAR 0 4
73105: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73106: LD_INT 0
73108: PPUSH
73109: PPUSH
73110: PPUSH
// if not side or side > 8 then
73111: LD_VAR 0 1
73115: NOT
73116: PUSH
73117: LD_VAR 0 1
73121: PUSH
73122: LD_INT 8
73124: GREATER
73125: OR
73126: IFFALSE 73130
// exit ;
73128: GO 73317
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73130: LD_ADDR_VAR 0 4
73134: PUSH
73135: LD_INT 22
73137: PUSH
73138: LD_VAR 0 1
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_INT 21
73149: PUSH
73150: LD_INT 3
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PPUSH
73161: CALL_OW 69
73165: ST_TO_ADDR
// if not tmp then
73166: LD_VAR 0 4
73170: NOT
73171: IFFALSE 73175
// exit ;
73173: GO 73317
// enable_addtolog := true ;
73175: LD_ADDR_OWVAR 81
73179: PUSH
73180: LD_INT 1
73182: ST_TO_ADDR
// AddToLog ( [ ) ;
73183: LD_STRING [
73185: PPUSH
73186: CALL_OW 561
// for i in tmp do
73190: LD_ADDR_VAR 0 3
73194: PUSH
73195: LD_VAR 0 4
73199: PUSH
73200: FOR_IN
73201: IFFALSE 73308
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73203: LD_STRING [
73205: PUSH
73206: LD_VAR 0 3
73210: PPUSH
73211: CALL_OW 266
73215: STR
73216: PUSH
73217: LD_STRING , 
73219: STR
73220: PUSH
73221: LD_VAR 0 3
73225: PPUSH
73226: CALL_OW 250
73230: STR
73231: PUSH
73232: LD_STRING , 
73234: STR
73235: PUSH
73236: LD_VAR 0 3
73240: PPUSH
73241: CALL_OW 251
73245: STR
73246: PUSH
73247: LD_STRING , 
73249: STR
73250: PUSH
73251: LD_VAR 0 3
73255: PPUSH
73256: CALL_OW 254
73260: STR
73261: PUSH
73262: LD_STRING , 
73264: STR
73265: PUSH
73266: LD_VAR 0 3
73270: PPUSH
73271: LD_INT 1
73273: PPUSH
73274: CALL_OW 268
73278: STR
73279: PUSH
73280: LD_STRING , 
73282: STR
73283: PUSH
73284: LD_VAR 0 3
73288: PPUSH
73289: LD_INT 2
73291: PPUSH
73292: CALL_OW 268
73296: STR
73297: PUSH
73298: LD_STRING ],
73300: STR
73301: PPUSH
73302: CALL_OW 561
// end ;
73306: GO 73200
73308: POP
73309: POP
// AddToLog ( ]; ) ;
73310: LD_STRING ];
73312: PPUSH
73313: CALL_OW 561
// end ;
73317: LD_VAR 0 2
73321: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73322: LD_INT 0
73324: PPUSH
73325: PPUSH
73326: PPUSH
73327: PPUSH
73328: PPUSH
// if not area or not rate or not max then
73329: LD_VAR 0 1
73333: NOT
73334: PUSH
73335: LD_VAR 0 2
73339: NOT
73340: OR
73341: PUSH
73342: LD_VAR 0 4
73346: NOT
73347: OR
73348: IFFALSE 73352
// exit ;
73350: GO 73541
// while 1 do
73352: LD_INT 1
73354: IFFALSE 73541
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73356: LD_ADDR_VAR 0 9
73360: PUSH
73361: LD_VAR 0 1
73365: PPUSH
73366: LD_INT 1
73368: PPUSH
73369: CALL_OW 287
73373: PUSH
73374: LD_INT 10
73376: MUL
73377: ST_TO_ADDR
// r := rate / 10 ;
73378: LD_ADDR_VAR 0 7
73382: PUSH
73383: LD_VAR 0 2
73387: PUSH
73388: LD_INT 10
73390: DIVREAL
73391: ST_TO_ADDR
// time := 1 1$00 ;
73392: LD_ADDR_VAR 0 8
73396: PUSH
73397: LD_INT 2100
73399: ST_TO_ADDR
// if amount < min then
73400: LD_VAR 0 9
73404: PUSH
73405: LD_VAR 0 3
73409: LESS
73410: IFFALSE 73428
// r := r * 2 else
73412: LD_ADDR_VAR 0 7
73416: PUSH
73417: LD_VAR 0 7
73421: PUSH
73422: LD_INT 2
73424: MUL
73425: ST_TO_ADDR
73426: GO 73454
// if amount > max then
73428: LD_VAR 0 9
73432: PUSH
73433: LD_VAR 0 4
73437: GREATER
73438: IFFALSE 73454
// r := r / 2 ;
73440: LD_ADDR_VAR 0 7
73444: PUSH
73445: LD_VAR 0 7
73449: PUSH
73450: LD_INT 2
73452: DIVREAL
73453: ST_TO_ADDR
// time := time / r ;
73454: LD_ADDR_VAR 0 8
73458: PUSH
73459: LD_VAR 0 8
73463: PUSH
73464: LD_VAR 0 7
73468: DIVREAL
73469: ST_TO_ADDR
// if time < 0 then
73470: LD_VAR 0 8
73474: PUSH
73475: LD_INT 0
73477: LESS
73478: IFFALSE 73495
// time := time * - 1 ;
73480: LD_ADDR_VAR 0 8
73484: PUSH
73485: LD_VAR 0 8
73489: PUSH
73490: LD_INT 1
73492: NEG
73493: MUL
73494: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73495: LD_VAR 0 8
73499: PUSH
73500: LD_INT 35
73502: PPUSH
73503: LD_INT 875
73505: PPUSH
73506: CALL_OW 12
73510: PLUS
73511: PPUSH
73512: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73516: LD_INT 1
73518: PPUSH
73519: LD_INT 5
73521: PPUSH
73522: CALL_OW 12
73526: PPUSH
73527: LD_VAR 0 1
73531: PPUSH
73532: LD_INT 1
73534: PPUSH
73535: CALL_OW 55
// end ;
73539: GO 73352
// end ;
73541: LD_VAR 0 5
73545: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73546: LD_INT 0
73548: PPUSH
73549: PPUSH
73550: PPUSH
73551: PPUSH
73552: PPUSH
73553: PPUSH
73554: PPUSH
73555: PPUSH
// if not turrets or not factories then
73556: LD_VAR 0 1
73560: NOT
73561: PUSH
73562: LD_VAR 0 2
73566: NOT
73567: OR
73568: IFFALSE 73572
// exit ;
73570: GO 73879
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73572: LD_ADDR_VAR 0 10
73576: PUSH
73577: LD_INT 5
73579: PUSH
73580: LD_INT 6
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 2
73589: PUSH
73590: LD_INT 4
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 3
73599: PUSH
73600: LD_INT 5
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: LIST
73611: PUSH
73612: LD_INT 24
73614: PUSH
73615: LD_INT 25
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 23
73624: PUSH
73625: LD_INT 27
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PUSH
73636: LD_INT 42
73638: PUSH
73639: LD_INT 43
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PUSH
73646: LD_INT 44
73648: PUSH
73649: LD_INT 46
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 45
73658: PUSH
73659: LD_INT 47
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: LIST
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: LIST
73675: ST_TO_ADDR
// result := [ ] ;
73676: LD_ADDR_VAR 0 3
73680: PUSH
73681: EMPTY
73682: ST_TO_ADDR
// for i in turrets do
73683: LD_ADDR_VAR 0 4
73687: PUSH
73688: LD_VAR 0 1
73692: PUSH
73693: FOR_IN
73694: IFFALSE 73877
// begin nat := GetNation ( i ) ;
73696: LD_ADDR_VAR 0 7
73700: PUSH
73701: LD_VAR 0 4
73705: PPUSH
73706: CALL_OW 248
73710: ST_TO_ADDR
// weapon := 0 ;
73711: LD_ADDR_VAR 0 8
73715: PUSH
73716: LD_INT 0
73718: ST_TO_ADDR
// if not nat then
73719: LD_VAR 0 7
73723: NOT
73724: IFFALSE 73728
// continue ;
73726: GO 73693
// for j in list [ nat ] do
73728: LD_ADDR_VAR 0 5
73732: PUSH
73733: LD_VAR 0 10
73737: PUSH
73738: LD_VAR 0 7
73742: ARRAY
73743: PUSH
73744: FOR_IN
73745: IFFALSE 73786
// if GetBWeapon ( i ) = j [ 1 ] then
73747: LD_VAR 0 4
73751: PPUSH
73752: CALL_OW 269
73756: PUSH
73757: LD_VAR 0 5
73761: PUSH
73762: LD_INT 1
73764: ARRAY
73765: EQUAL
73766: IFFALSE 73784
// begin weapon := j [ 2 ] ;
73768: LD_ADDR_VAR 0 8
73772: PUSH
73773: LD_VAR 0 5
73777: PUSH
73778: LD_INT 2
73780: ARRAY
73781: ST_TO_ADDR
// break ;
73782: GO 73786
// end ;
73784: GO 73744
73786: POP
73787: POP
// if not weapon then
73788: LD_VAR 0 8
73792: NOT
73793: IFFALSE 73797
// continue ;
73795: GO 73693
// for k in factories do
73797: LD_ADDR_VAR 0 6
73801: PUSH
73802: LD_VAR 0 2
73806: PUSH
73807: FOR_IN
73808: IFFALSE 73873
// begin weapons := AvailableWeaponList ( k ) ;
73810: LD_ADDR_VAR 0 9
73814: PUSH
73815: LD_VAR 0 6
73819: PPUSH
73820: CALL_OW 478
73824: ST_TO_ADDR
// if not weapons then
73825: LD_VAR 0 9
73829: NOT
73830: IFFALSE 73834
// continue ;
73832: GO 73807
// if weapon in weapons then
73834: LD_VAR 0 8
73838: PUSH
73839: LD_VAR 0 9
73843: IN
73844: IFFALSE 73871
// begin result := [ i , weapon ] ;
73846: LD_ADDR_VAR 0 3
73850: PUSH
73851: LD_VAR 0 4
73855: PUSH
73856: LD_VAR 0 8
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: ST_TO_ADDR
// exit ;
73865: POP
73866: POP
73867: POP
73868: POP
73869: GO 73879
// end ; end ;
73871: GO 73807
73873: POP
73874: POP
// end ;
73875: GO 73693
73877: POP
73878: POP
// end ;
73879: LD_VAR 0 3
73883: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73884: LD_INT 0
73886: PPUSH
// if not side or side > 8 then
73887: LD_VAR 0 3
73891: NOT
73892: PUSH
73893: LD_VAR 0 3
73897: PUSH
73898: LD_INT 8
73900: GREATER
73901: OR
73902: IFFALSE 73906
// exit ;
73904: GO 73965
// if not range then
73906: LD_VAR 0 4
73910: NOT
73911: IFFALSE 73922
// range := - 12 ;
73913: LD_ADDR_VAR 0 4
73917: PUSH
73918: LD_INT 12
73920: NEG
73921: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73922: LD_VAR 0 1
73926: PPUSH
73927: LD_VAR 0 2
73931: PPUSH
73932: LD_VAR 0 3
73936: PPUSH
73937: LD_VAR 0 4
73941: PPUSH
73942: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73946: LD_VAR 0 1
73950: PPUSH
73951: LD_VAR 0 2
73955: PPUSH
73956: LD_VAR 0 3
73960: PPUSH
73961: CALL_OW 331
// end ;
73965: LD_VAR 0 5
73969: RET
// export function Video ( mode ) ; begin
73970: LD_INT 0
73972: PPUSH
// ingame_video = mode ;
73973: LD_ADDR_OWVAR 52
73977: PUSH
73978: LD_VAR 0 1
73982: ST_TO_ADDR
// interface_hidden = mode ;
73983: LD_ADDR_OWVAR 54
73987: PUSH
73988: LD_VAR 0 1
73992: ST_TO_ADDR
// end ;
73993: LD_VAR 0 2
73997: RET
// export function Join ( array , element ) ; begin
73998: LD_INT 0
74000: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74001: LD_ADDR_VAR 0 3
74005: PUSH
74006: LD_VAR 0 1
74010: PPUSH
74011: LD_VAR 0 1
74015: PUSH
74016: LD_INT 1
74018: PLUS
74019: PPUSH
74020: LD_VAR 0 2
74024: PPUSH
74025: CALL_OW 1
74029: ST_TO_ADDR
// end ;
74030: LD_VAR 0 3
74034: RET
// export function JoinUnion ( array , element ) ; begin
74035: LD_INT 0
74037: PPUSH
// result := array union element ;
74038: LD_ADDR_VAR 0 3
74042: PUSH
74043: LD_VAR 0 1
74047: PUSH
74048: LD_VAR 0 2
74052: UNION
74053: ST_TO_ADDR
// end ;
74054: LD_VAR 0 3
74058: RET
// export function GetBehemoths ( side ) ; begin
74059: LD_INT 0
74061: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74062: LD_ADDR_VAR 0 2
74066: PUSH
74067: LD_INT 22
74069: PUSH
74070: LD_VAR 0 1
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PUSH
74079: LD_INT 31
74081: PUSH
74082: LD_INT 25
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PPUSH
74093: CALL_OW 69
74097: ST_TO_ADDR
// end ;
74098: LD_VAR 0 2
74102: RET
// export function Shuffle ( array ) ; var i , index ; begin
74103: LD_INT 0
74105: PPUSH
74106: PPUSH
74107: PPUSH
// result := [ ] ;
74108: LD_ADDR_VAR 0 2
74112: PUSH
74113: EMPTY
74114: ST_TO_ADDR
// if not array then
74115: LD_VAR 0 1
74119: NOT
74120: IFFALSE 74124
// exit ;
74122: GO 74223
// Randomize ;
74124: CALL_OW 10
// for i = array downto 1 do
74128: LD_ADDR_VAR 0 3
74132: PUSH
74133: DOUBLE
74134: LD_VAR 0 1
74138: INC
74139: ST_TO_ADDR
74140: LD_INT 1
74142: PUSH
74143: FOR_DOWNTO
74144: IFFALSE 74221
// begin index := rand ( 1 , array ) ;
74146: LD_ADDR_VAR 0 4
74150: PUSH
74151: LD_INT 1
74153: PPUSH
74154: LD_VAR 0 1
74158: PPUSH
74159: CALL_OW 12
74163: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74164: LD_ADDR_VAR 0 2
74168: PUSH
74169: LD_VAR 0 2
74173: PPUSH
74174: LD_VAR 0 2
74178: PUSH
74179: LD_INT 1
74181: PLUS
74182: PPUSH
74183: LD_VAR 0 1
74187: PUSH
74188: LD_VAR 0 4
74192: ARRAY
74193: PPUSH
74194: CALL_OW 2
74198: ST_TO_ADDR
// array := Delete ( array , index ) ;
74199: LD_ADDR_VAR 0 1
74203: PUSH
74204: LD_VAR 0 1
74208: PPUSH
74209: LD_VAR 0 4
74213: PPUSH
74214: CALL_OW 3
74218: ST_TO_ADDR
// end ;
74219: GO 74143
74221: POP
74222: POP
// end ;
74223: LD_VAR 0 2
74227: RET
// export function GetBaseMaterials ( base ) ; begin
74228: LD_INT 0
74230: PPUSH
// result := [ 0 , 0 , 0 ] ;
74231: LD_ADDR_VAR 0 2
74235: PUSH
74236: LD_INT 0
74238: PUSH
74239: LD_INT 0
74241: PUSH
74242: LD_INT 0
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: LIST
74249: ST_TO_ADDR
// if not base then
74250: LD_VAR 0 1
74254: NOT
74255: IFFALSE 74259
// exit ;
74257: GO 74308
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74259: LD_ADDR_VAR 0 2
74263: PUSH
74264: LD_VAR 0 1
74268: PPUSH
74269: LD_INT 1
74271: PPUSH
74272: CALL_OW 275
74276: PUSH
74277: LD_VAR 0 1
74281: PPUSH
74282: LD_INT 2
74284: PPUSH
74285: CALL_OW 275
74289: PUSH
74290: LD_VAR 0 1
74294: PPUSH
74295: LD_INT 3
74297: PPUSH
74298: CALL_OW 275
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: LIST
74307: ST_TO_ADDR
// end ;
74308: LD_VAR 0 2
74312: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74313: LD_INT 0
74315: PPUSH
74316: PPUSH
// result := array ;
74317: LD_ADDR_VAR 0 3
74321: PUSH
74322: LD_VAR 0 1
74326: ST_TO_ADDR
// if size >= result then
74327: LD_VAR 0 2
74331: PUSH
74332: LD_VAR 0 3
74336: GREATEREQUAL
74337: IFFALSE 74341
// exit ;
74339: GO 74391
// if size then
74341: LD_VAR 0 2
74345: IFFALSE 74391
// for i := array downto size do
74347: LD_ADDR_VAR 0 4
74351: PUSH
74352: DOUBLE
74353: LD_VAR 0 1
74357: INC
74358: ST_TO_ADDR
74359: LD_VAR 0 2
74363: PUSH
74364: FOR_DOWNTO
74365: IFFALSE 74389
// result := Delete ( result , result ) ;
74367: LD_ADDR_VAR 0 3
74371: PUSH
74372: LD_VAR 0 3
74376: PPUSH
74377: LD_VAR 0 3
74381: PPUSH
74382: CALL_OW 3
74386: ST_TO_ADDR
74387: GO 74364
74389: POP
74390: POP
// end ;
74391: LD_VAR 0 3
74395: RET
// export function ComExit ( unit ) ; var tmp ; begin
74396: LD_INT 0
74398: PPUSH
74399: PPUSH
// if not IsInUnit ( unit ) then
74400: LD_VAR 0 1
74404: PPUSH
74405: CALL_OW 310
74409: NOT
74410: IFFALSE 74414
// exit ;
74412: GO 74474
// tmp := IsInUnit ( unit ) ;
74414: LD_ADDR_VAR 0 3
74418: PUSH
74419: LD_VAR 0 1
74423: PPUSH
74424: CALL_OW 310
74428: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74429: LD_VAR 0 3
74433: PPUSH
74434: CALL_OW 247
74438: PUSH
74439: LD_INT 2
74441: EQUAL
74442: IFFALSE 74455
// ComExitVehicle ( unit ) else
74444: LD_VAR 0 1
74448: PPUSH
74449: CALL_OW 121
74453: GO 74464
// ComExitBuilding ( unit ) ;
74455: LD_VAR 0 1
74459: PPUSH
74460: CALL_OW 122
// result := tmp ;
74464: LD_ADDR_VAR 0 2
74468: PUSH
74469: LD_VAR 0 3
74473: ST_TO_ADDR
// end ;
74474: LD_VAR 0 2
74478: RET
// export function ComExitAll ( units ) ; var i ; begin
74479: LD_INT 0
74481: PPUSH
74482: PPUSH
// if not units then
74483: LD_VAR 0 1
74487: NOT
74488: IFFALSE 74492
// exit ;
74490: GO 74518
// for i in units do
74492: LD_ADDR_VAR 0 3
74496: PUSH
74497: LD_VAR 0 1
74501: PUSH
74502: FOR_IN
74503: IFFALSE 74516
// ComExit ( i ) ;
74505: LD_VAR 0 3
74509: PPUSH
74510: CALL 74396 0 1
74514: GO 74502
74516: POP
74517: POP
// end ;
74518: LD_VAR 0 2
74522: RET
// export function ResetHc ; begin
74523: LD_INT 0
74525: PPUSH
// InitHc ;
74526: CALL_OW 19
// hc_importance := 0 ;
74530: LD_ADDR_OWVAR 32
74534: PUSH
74535: LD_INT 0
74537: ST_TO_ADDR
// end ;
74538: LD_VAR 0 1
74542: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74543: LD_INT 0
74545: PPUSH
74546: PPUSH
74547: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74548: LD_ADDR_VAR 0 6
74552: PUSH
74553: LD_VAR 0 1
74557: PUSH
74558: LD_VAR 0 3
74562: PLUS
74563: PUSH
74564: LD_INT 2
74566: DIV
74567: ST_TO_ADDR
// if _x < 0 then
74568: LD_VAR 0 6
74572: PUSH
74573: LD_INT 0
74575: LESS
74576: IFFALSE 74593
// _x := _x * - 1 ;
74578: LD_ADDR_VAR 0 6
74582: PUSH
74583: LD_VAR 0 6
74587: PUSH
74588: LD_INT 1
74590: NEG
74591: MUL
74592: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74593: LD_ADDR_VAR 0 7
74597: PUSH
74598: LD_VAR 0 2
74602: PUSH
74603: LD_VAR 0 4
74607: PLUS
74608: PUSH
74609: LD_INT 2
74611: DIV
74612: ST_TO_ADDR
// if _y < 0 then
74613: LD_VAR 0 7
74617: PUSH
74618: LD_INT 0
74620: LESS
74621: IFFALSE 74638
// _y := _y * - 1 ;
74623: LD_ADDR_VAR 0 7
74627: PUSH
74628: LD_VAR 0 7
74632: PUSH
74633: LD_INT 1
74635: NEG
74636: MUL
74637: ST_TO_ADDR
// result := [ _x , _y ] ;
74638: LD_ADDR_VAR 0 5
74642: PUSH
74643: LD_VAR 0 6
74647: PUSH
74648: LD_VAR 0 7
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: ST_TO_ADDR
// end ;
74657: LD_VAR 0 5
74661: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74662: LD_INT 0
74664: PPUSH
74665: PPUSH
74666: PPUSH
74667: PPUSH
// task := GetTaskList ( unit ) ;
74668: LD_ADDR_VAR 0 7
74672: PUSH
74673: LD_VAR 0 1
74677: PPUSH
74678: CALL_OW 437
74682: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74683: LD_VAR 0 7
74687: NOT
74688: PUSH
74689: LD_VAR 0 1
74693: PPUSH
74694: LD_VAR 0 2
74698: PPUSH
74699: CALL_OW 308
74703: NOT
74704: AND
74705: IFFALSE 74709
// exit ;
74707: GO 74827
// if IsInArea ( unit , area ) then
74709: LD_VAR 0 1
74713: PPUSH
74714: LD_VAR 0 2
74718: PPUSH
74719: CALL_OW 308
74723: IFFALSE 74741
// begin ComMoveToArea ( unit , goAway ) ;
74725: LD_VAR 0 1
74729: PPUSH
74730: LD_VAR 0 3
74734: PPUSH
74735: CALL_OW 113
// exit ;
74739: GO 74827
// end ; if task [ 1 ] [ 1 ] <> M then
74741: LD_VAR 0 7
74745: PUSH
74746: LD_INT 1
74748: ARRAY
74749: PUSH
74750: LD_INT 1
74752: ARRAY
74753: PUSH
74754: LD_STRING M
74756: NONEQUAL
74757: IFFALSE 74761
// exit ;
74759: GO 74827
// x := task [ 1 ] [ 2 ] ;
74761: LD_ADDR_VAR 0 5
74765: PUSH
74766: LD_VAR 0 7
74770: PUSH
74771: LD_INT 1
74773: ARRAY
74774: PUSH
74775: LD_INT 2
74777: ARRAY
74778: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74779: LD_ADDR_VAR 0 6
74783: PUSH
74784: LD_VAR 0 7
74788: PUSH
74789: LD_INT 1
74791: ARRAY
74792: PUSH
74793: LD_INT 3
74795: ARRAY
74796: ST_TO_ADDR
// if InArea ( x , y , area ) then
74797: LD_VAR 0 5
74801: PPUSH
74802: LD_VAR 0 6
74806: PPUSH
74807: LD_VAR 0 2
74811: PPUSH
74812: CALL_OW 309
74816: IFFALSE 74827
// ComStop ( unit ) ;
74818: LD_VAR 0 1
74822: PPUSH
74823: CALL_OW 141
// end ;
74827: LD_VAR 0 4
74831: RET
// export function Abs ( value ) ; begin
74832: LD_INT 0
74834: PPUSH
// result := value ;
74835: LD_ADDR_VAR 0 2
74839: PUSH
74840: LD_VAR 0 1
74844: ST_TO_ADDR
// if value < 0 then
74845: LD_VAR 0 1
74849: PUSH
74850: LD_INT 0
74852: LESS
74853: IFFALSE 74870
// result := value * - 1 ;
74855: LD_ADDR_VAR 0 2
74859: PUSH
74860: LD_VAR 0 1
74864: PUSH
74865: LD_INT 1
74867: NEG
74868: MUL
74869: ST_TO_ADDR
// end ;
74870: LD_VAR 0 2
74874: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74875: LD_INT 0
74877: PPUSH
74878: PPUSH
74879: PPUSH
74880: PPUSH
74881: PPUSH
74882: PPUSH
74883: PPUSH
74884: PPUSH
// if not unit or not building then
74885: LD_VAR 0 1
74889: NOT
74890: PUSH
74891: LD_VAR 0 2
74895: NOT
74896: OR
74897: IFFALSE 74901
// exit ;
74899: GO 75127
// x := GetX ( building ) ;
74901: LD_ADDR_VAR 0 4
74905: PUSH
74906: LD_VAR 0 2
74910: PPUSH
74911: CALL_OW 250
74915: ST_TO_ADDR
// y := GetY ( building ) ;
74916: LD_ADDR_VAR 0 6
74920: PUSH
74921: LD_VAR 0 2
74925: PPUSH
74926: CALL_OW 251
74930: ST_TO_ADDR
// d := GetDir ( building ) ;
74931: LD_ADDR_VAR 0 8
74935: PUSH
74936: LD_VAR 0 2
74940: PPUSH
74941: CALL_OW 254
74945: ST_TO_ADDR
// r := 4 ;
74946: LD_ADDR_VAR 0 9
74950: PUSH
74951: LD_INT 4
74953: ST_TO_ADDR
// for i := 1 to 5 do
74954: LD_ADDR_VAR 0 10
74958: PUSH
74959: DOUBLE
74960: LD_INT 1
74962: DEC
74963: ST_TO_ADDR
74964: LD_INT 5
74966: PUSH
74967: FOR_TO
74968: IFFALSE 75125
// begin _x := ShiftX ( x , d , r + i ) ;
74970: LD_ADDR_VAR 0 5
74974: PUSH
74975: LD_VAR 0 4
74979: PPUSH
74980: LD_VAR 0 8
74984: PPUSH
74985: LD_VAR 0 9
74989: PUSH
74990: LD_VAR 0 10
74994: PLUS
74995: PPUSH
74996: CALL_OW 272
75000: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75001: LD_ADDR_VAR 0 7
75005: PUSH
75006: LD_VAR 0 6
75010: PPUSH
75011: LD_VAR 0 8
75015: PPUSH
75016: LD_VAR 0 9
75020: PUSH
75021: LD_VAR 0 10
75025: PLUS
75026: PPUSH
75027: CALL_OW 273
75031: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75032: LD_VAR 0 5
75036: PPUSH
75037: LD_VAR 0 7
75041: PPUSH
75042: CALL_OW 488
75046: PUSH
75047: LD_VAR 0 5
75051: PPUSH
75052: LD_VAR 0 7
75056: PPUSH
75057: CALL_OW 428
75061: PPUSH
75062: CALL_OW 247
75066: PUSH
75067: LD_INT 3
75069: PUSH
75070: LD_INT 2
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: IN
75077: NOT
75078: AND
75079: IFFALSE 75123
// begin ComMoveXY ( unit , _x , _y ) ;
75081: LD_VAR 0 1
75085: PPUSH
75086: LD_VAR 0 5
75090: PPUSH
75091: LD_VAR 0 7
75095: PPUSH
75096: CALL_OW 111
// result := [ _x , _y ] ;
75100: LD_ADDR_VAR 0 3
75104: PUSH
75105: LD_VAR 0 5
75109: PUSH
75110: LD_VAR 0 7
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: ST_TO_ADDR
// exit ;
75119: POP
75120: POP
75121: GO 75127
// end ; end ;
75123: GO 74967
75125: POP
75126: POP
// end ;
75127: LD_VAR 0 3
75131: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75132: LD_INT 0
75134: PPUSH
75135: PPUSH
75136: PPUSH
// result := 0 ;
75137: LD_ADDR_VAR 0 3
75141: PUSH
75142: LD_INT 0
75144: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75145: LD_VAR 0 1
75149: PUSH
75150: LD_INT 0
75152: LESS
75153: PUSH
75154: LD_VAR 0 1
75158: PUSH
75159: LD_INT 8
75161: GREATER
75162: OR
75163: PUSH
75164: LD_VAR 0 2
75168: PUSH
75169: LD_INT 0
75171: LESS
75172: OR
75173: PUSH
75174: LD_VAR 0 2
75178: PUSH
75179: LD_INT 8
75181: GREATER
75182: OR
75183: IFFALSE 75187
// exit ;
75185: GO 75262
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75187: LD_ADDR_VAR 0 4
75191: PUSH
75192: LD_INT 22
75194: PUSH
75195: LD_VAR 0 2
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PPUSH
75204: CALL_OW 69
75208: PUSH
75209: FOR_IN
75210: IFFALSE 75260
// begin un := UnitShoot ( i ) ;
75212: LD_ADDR_VAR 0 5
75216: PUSH
75217: LD_VAR 0 4
75221: PPUSH
75222: CALL_OW 504
75226: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75227: LD_VAR 0 5
75231: PPUSH
75232: CALL_OW 255
75236: PUSH
75237: LD_VAR 0 1
75241: EQUAL
75242: IFFALSE 75258
// begin result := un ;
75244: LD_ADDR_VAR 0 3
75248: PUSH
75249: LD_VAR 0 5
75253: ST_TO_ADDR
// exit ;
75254: POP
75255: POP
75256: GO 75262
// end ; end ;
75258: GO 75209
75260: POP
75261: POP
// end ;
75262: LD_VAR 0 3
75266: RET
// export function GetCargoBay ( units ) ; begin
75267: LD_INT 0
75269: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75270: LD_ADDR_VAR 0 2
75274: PUSH
75275: LD_VAR 0 1
75279: PPUSH
75280: LD_INT 2
75282: PUSH
75283: LD_INT 34
75285: PUSH
75286: LD_INT 12
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: LD_INT 34
75295: PUSH
75296: LD_INT 51
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: PUSH
75303: LD_INT 34
75305: PUSH
75306: LD_INT 32
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_INT 34
75315: PUSH
75316: LD_INT 89
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: PPUSH
75330: CALL_OW 72
75334: ST_TO_ADDR
// end ;
75335: LD_VAR 0 2
75339: RET
// export function Negate ( value ) ; begin
75340: LD_INT 0
75342: PPUSH
// result := not value ;
75343: LD_ADDR_VAR 0 2
75347: PUSH
75348: LD_VAR 0 1
75352: NOT
75353: ST_TO_ADDR
// end ;
75354: LD_VAR 0 2
75358: RET
// export function Inc ( value ) ; begin
75359: LD_INT 0
75361: PPUSH
// result := value + 1 ;
75362: LD_ADDR_VAR 0 2
75366: PUSH
75367: LD_VAR 0 1
75371: PUSH
75372: LD_INT 1
75374: PLUS
75375: ST_TO_ADDR
// end ;
75376: LD_VAR 0 2
75380: RET
// export function Dec ( value ) ; begin
75381: LD_INT 0
75383: PPUSH
// result := value - 1 ;
75384: LD_ADDR_VAR 0 2
75388: PUSH
75389: LD_VAR 0 1
75393: PUSH
75394: LD_INT 1
75396: MINUS
75397: ST_TO_ADDR
// end ;
75398: LD_VAR 0 2
75402: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75403: LD_INT 0
75405: PPUSH
75406: PPUSH
75407: PPUSH
75408: PPUSH
75409: PPUSH
75410: PPUSH
75411: PPUSH
75412: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75413: LD_VAR 0 1
75417: PPUSH
75418: LD_VAR 0 2
75422: PPUSH
75423: CALL_OW 488
75427: NOT
75428: PUSH
75429: LD_VAR 0 3
75433: PPUSH
75434: LD_VAR 0 4
75438: PPUSH
75439: CALL_OW 488
75443: NOT
75444: OR
75445: IFFALSE 75458
// begin result := - 1 ;
75447: LD_ADDR_VAR 0 5
75451: PUSH
75452: LD_INT 1
75454: NEG
75455: ST_TO_ADDR
// exit ;
75456: GO 75693
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75458: LD_ADDR_VAR 0 12
75462: PUSH
75463: LD_VAR 0 1
75467: PPUSH
75468: LD_VAR 0 2
75472: PPUSH
75473: LD_VAR 0 3
75477: PPUSH
75478: LD_VAR 0 4
75482: PPUSH
75483: CALL 74543 0 4
75487: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75488: LD_ADDR_VAR 0 11
75492: PUSH
75493: LD_VAR 0 1
75497: PPUSH
75498: LD_VAR 0 2
75502: PPUSH
75503: LD_VAR 0 12
75507: PUSH
75508: LD_INT 1
75510: ARRAY
75511: PPUSH
75512: LD_VAR 0 12
75516: PUSH
75517: LD_INT 2
75519: ARRAY
75520: PPUSH
75521: CALL_OW 298
75525: ST_TO_ADDR
// distance := 9999 ;
75526: LD_ADDR_VAR 0 10
75530: PUSH
75531: LD_INT 9999
75533: ST_TO_ADDR
// for i := 0 to 5 do
75534: LD_ADDR_VAR 0 6
75538: PUSH
75539: DOUBLE
75540: LD_INT 0
75542: DEC
75543: ST_TO_ADDR
75544: LD_INT 5
75546: PUSH
75547: FOR_TO
75548: IFFALSE 75691
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75550: LD_ADDR_VAR 0 7
75554: PUSH
75555: LD_VAR 0 1
75559: PPUSH
75560: LD_VAR 0 6
75564: PPUSH
75565: LD_VAR 0 11
75569: PPUSH
75570: CALL_OW 272
75574: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75575: LD_ADDR_VAR 0 8
75579: PUSH
75580: LD_VAR 0 2
75584: PPUSH
75585: LD_VAR 0 6
75589: PPUSH
75590: LD_VAR 0 11
75594: PPUSH
75595: CALL_OW 273
75599: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75600: LD_VAR 0 7
75604: PPUSH
75605: LD_VAR 0 8
75609: PPUSH
75610: CALL_OW 488
75614: NOT
75615: IFFALSE 75619
// continue ;
75617: GO 75547
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75619: LD_ADDR_VAR 0 9
75623: PUSH
75624: LD_VAR 0 12
75628: PUSH
75629: LD_INT 1
75631: ARRAY
75632: PPUSH
75633: LD_VAR 0 12
75637: PUSH
75638: LD_INT 2
75640: ARRAY
75641: PPUSH
75642: LD_VAR 0 7
75646: PPUSH
75647: LD_VAR 0 8
75651: PPUSH
75652: CALL_OW 298
75656: ST_TO_ADDR
// if tmp < distance then
75657: LD_VAR 0 9
75661: PUSH
75662: LD_VAR 0 10
75666: LESS
75667: IFFALSE 75689
// begin result := i ;
75669: LD_ADDR_VAR 0 5
75673: PUSH
75674: LD_VAR 0 6
75678: ST_TO_ADDR
// distance := tmp ;
75679: LD_ADDR_VAR 0 10
75683: PUSH
75684: LD_VAR 0 9
75688: ST_TO_ADDR
// end ; end ;
75689: GO 75547
75691: POP
75692: POP
// end ;
75693: LD_VAR 0 5
75697: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75698: LD_INT 0
75700: PPUSH
75701: PPUSH
// if not driver or not IsInUnit ( driver ) then
75702: LD_VAR 0 1
75706: NOT
75707: PUSH
75708: LD_VAR 0 1
75712: PPUSH
75713: CALL_OW 310
75717: NOT
75718: OR
75719: IFFALSE 75723
// exit ;
75721: GO 75813
// vehicle := IsInUnit ( driver ) ;
75723: LD_ADDR_VAR 0 3
75727: PUSH
75728: LD_VAR 0 1
75732: PPUSH
75733: CALL_OW 310
75737: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75738: LD_VAR 0 1
75742: PPUSH
75743: LD_STRING \
75745: PUSH
75746: LD_INT 0
75748: PUSH
75749: LD_INT 0
75751: PUSH
75752: LD_INT 0
75754: PUSH
75755: LD_INT 0
75757: PUSH
75758: LD_INT 0
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: EMPTY
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: PUSH
75773: LD_STRING E
75775: PUSH
75776: LD_INT 0
75778: PUSH
75779: LD_INT 0
75781: PUSH
75782: LD_VAR 0 3
75786: PUSH
75787: LD_INT 0
75789: PUSH
75790: LD_INT 0
75792: PUSH
75793: LD_INT 0
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: PPUSH
75809: CALL_OW 446
// end ;
75813: LD_VAR 0 2
75817: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75818: LD_INT 0
75820: PPUSH
75821: PPUSH
// if not driver or not IsInUnit ( driver ) then
75822: LD_VAR 0 1
75826: NOT
75827: PUSH
75828: LD_VAR 0 1
75832: PPUSH
75833: CALL_OW 310
75837: NOT
75838: OR
75839: IFFALSE 75843
// exit ;
75841: GO 75933
// vehicle := IsInUnit ( driver ) ;
75843: LD_ADDR_VAR 0 3
75847: PUSH
75848: LD_VAR 0 1
75852: PPUSH
75853: CALL_OW 310
75857: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75858: LD_VAR 0 1
75862: PPUSH
75863: LD_STRING \
75865: PUSH
75866: LD_INT 0
75868: PUSH
75869: LD_INT 0
75871: PUSH
75872: LD_INT 0
75874: PUSH
75875: LD_INT 0
75877: PUSH
75878: LD_INT 0
75880: PUSH
75881: LD_INT 0
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: PUSH
75893: LD_STRING E
75895: PUSH
75896: LD_INT 0
75898: PUSH
75899: LD_INT 0
75901: PUSH
75902: LD_VAR 0 3
75906: PUSH
75907: LD_INT 0
75909: PUSH
75910: LD_INT 0
75912: PUSH
75913: LD_INT 0
75915: PUSH
75916: EMPTY
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PPUSH
75929: CALL_OW 447
// end ;
75933: LD_VAR 0 2
75937: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75938: LD_INT 0
75940: PPUSH
75941: PPUSH
75942: PPUSH
// tmp := [ ] ;
75943: LD_ADDR_VAR 0 5
75947: PUSH
75948: EMPTY
75949: ST_TO_ADDR
// for i in units do
75950: LD_ADDR_VAR 0 4
75954: PUSH
75955: LD_VAR 0 1
75959: PUSH
75960: FOR_IN
75961: IFFALSE 75999
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75963: LD_ADDR_VAR 0 5
75967: PUSH
75968: LD_VAR 0 5
75972: PPUSH
75973: LD_VAR 0 5
75977: PUSH
75978: LD_INT 1
75980: PLUS
75981: PPUSH
75982: LD_VAR 0 4
75986: PPUSH
75987: CALL_OW 256
75991: PPUSH
75992: CALL_OW 2
75996: ST_TO_ADDR
75997: GO 75960
75999: POP
76000: POP
// if not tmp then
76001: LD_VAR 0 5
76005: NOT
76006: IFFALSE 76010
// exit ;
76008: GO 76058
// if asc then
76010: LD_VAR 0 2
76014: IFFALSE 76038
// result := SortListByListAsc ( units , tmp ) else
76016: LD_ADDR_VAR 0 3
76020: PUSH
76021: LD_VAR 0 1
76025: PPUSH
76026: LD_VAR 0 5
76030: PPUSH
76031: CALL_OW 76
76035: ST_TO_ADDR
76036: GO 76058
// result := SortListByListDesc ( units , tmp ) ;
76038: LD_ADDR_VAR 0 3
76042: PUSH
76043: LD_VAR 0 1
76047: PPUSH
76048: LD_VAR 0 5
76052: PPUSH
76053: CALL_OW 77
76057: ST_TO_ADDR
// end ;
76058: LD_VAR 0 3
76062: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76063: LD_INT 0
76065: PPUSH
76066: PPUSH
// task := GetTaskList ( mech ) ;
76067: LD_ADDR_VAR 0 4
76071: PUSH
76072: LD_VAR 0 1
76076: PPUSH
76077: CALL_OW 437
76081: ST_TO_ADDR
// if not task then
76082: LD_VAR 0 4
76086: NOT
76087: IFFALSE 76091
// exit ;
76089: GO 76133
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76091: LD_ADDR_VAR 0 3
76095: PUSH
76096: LD_VAR 0 4
76100: PUSH
76101: LD_INT 1
76103: ARRAY
76104: PUSH
76105: LD_INT 1
76107: ARRAY
76108: PUSH
76109: LD_STRING r
76111: EQUAL
76112: PUSH
76113: LD_VAR 0 4
76117: PUSH
76118: LD_INT 1
76120: ARRAY
76121: PUSH
76122: LD_INT 4
76124: ARRAY
76125: PUSH
76126: LD_VAR 0 2
76130: EQUAL
76131: AND
76132: ST_TO_ADDR
// end ;
76133: LD_VAR 0 3
76137: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76138: LD_INT 0
76140: PPUSH
// SetDir ( unit , d ) ;
76141: LD_VAR 0 1
76145: PPUSH
76146: LD_VAR 0 4
76150: PPUSH
76151: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76155: LD_VAR 0 1
76159: PPUSH
76160: LD_VAR 0 2
76164: PPUSH
76165: LD_VAR 0 3
76169: PPUSH
76170: LD_VAR 0 5
76174: PPUSH
76175: CALL_OW 48
// end ;
76179: LD_VAR 0 6
76183: RET
// export function ToNaturalNumber ( number ) ; begin
76184: LD_INT 0
76186: PPUSH
// result := number div 1 ;
76187: LD_ADDR_VAR 0 2
76191: PUSH
76192: LD_VAR 0 1
76196: PUSH
76197: LD_INT 1
76199: DIV
76200: ST_TO_ADDR
// if number < 0 then
76201: LD_VAR 0 1
76205: PUSH
76206: LD_INT 0
76208: LESS
76209: IFFALSE 76219
// result := 0 ;
76211: LD_ADDR_VAR 0 2
76215: PUSH
76216: LD_INT 0
76218: ST_TO_ADDR
// end ;
76219: LD_VAR 0 2
76223: RET
// export function SortByClass ( units , class ) ; var un ; begin
76224: LD_INT 0
76226: PPUSH
76227: PPUSH
// if not units or not class then
76228: LD_VAR 0 1
76232: NOT
76233: PUSH
76234: LD_VAR 0 2
76238: NOT
76239: OR
76240: IFFALSE 76244
// exit ;
76242: GO 76339
// result := [ ] ;
76244: LD_ADDR_VAR 0 3
76248: PUSH
76249: EMPTY
76250: ST_TO_ADDR
// for un in units do
76251: LD_ADDR_VAR 0 4
76255: PUSH
76256: LD_VAR 0 1
76260: PUSH
76261: FOR_IN
76262: IFFALSE 76337
// if GetClass ( un ) = class then
76264: LD_VAR 0 4
76268: PPUSH
76269: CALL_OW 257
76273: PUSH
76274: LD_VAR 0 2
76278: EQUAL
76279: IFFALSE 76306
// result := Insert ( result , 1 , un ) else
76281: LD_ADDR_VAR 0 3
76285: PUSH
76286: LD_VAR 0 3
76290: PPUSH
76291: LD_INT 1
76293: PPUSH
76294: LD_VAR 0 4
76298: PPUSH
76299: CALL_OW 2
76303: ST_TO_ADDR
76304: GO 76335
// result := Replace ( result , result + 1 , un ) ;
76306: LD_ADDR_VAR 0 3
76310: PUSH
76311: LD_VAR 0 3
76315: PPUSH
76316: LD_VAR 0 3
76320: PUSH
76321: LD_INT 1
76323: PLUS
76324: PPUSH
76325: LD_VAR 0 4
76329: PPUSH
76330: CALL_OW 1
76334: ST_TO_ADDR
76335: GO 76261
76337: POP
76338: POP
// end ;
76339: LD_VAR 0 3
76343: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76344: LD_INT 0
76346: PPUSH
76347: PPUSH
76348: PPUSH
76349: PPUSH
76350: PPUSH
76351: PPUSH
76352: PPUSH
// result := [ ] ;
76353: LD_ADDR_VAR 0 4
76357: PUSH
76358: EMPTY
76359: ST_TO_ADDR
// if x - r < 0 then
76360: LD_VAR 0 1
76364: PUSH
76365: LD_VAR 0 3
76369: MINUS
76370: PUSH
76371: LD_INT 0
76373: LESS
76374: IFFALSE 76386
// min_x := 0 else
76376: LD_ADDR_VAR 0 8
76380: PUSH
76381: LD_INT 0
76383: ST_TO_ADDR
76384: GO 76402
// min_x := x - r ;
76386: LD_ADDR_VAR 0 8
76390: PUSH
76391: LD_VAR 0 1
76395: PUSH
76396: LD_VAR 0 3
76400: MINUS
76401: ST_TO_ADDR
// if y - r < 0 then
76402: LD_VAR 0 2
76406: PUSH
76407: LD_VAR 0 3
76411: MINUS
76412: PUSH
76413: LD_INT 0
76415: LESS
76416: IFFALSE 76428
// min_y := 0 else
76418: LD_ADDR_VAR 0 7
76422: PUSH
76423: LD_INT 0
76425: ST_TO_ADDR
76426: GO 76444
// min_y := y - r ;
76428: LD_ADDR_VAR 0 7
76432: PUSH
76433: LD_VAR 0 2
76437: PUSH
76438: LD_VAR 0 3
76442: MINUS
76443: ST_TO_ADDR
// max_x := x + r ;
76444: LD_ADDR_VAR 0 9
76448: PUSH
76449: LD_VAR 0 1
76453: PUSH
76454: LD_VAR 0 3
76458: PLUS
76459: ST_TO_ADDR
// max_y := y + r ;
76460: LD_ADDR_VAR 0 10
76464: PUSH
76465: LD_VAR 0 2
76469: PUSH
76470: LD_VAR 0 3
76474: PLUS
76475: ST_TO_ADDR
// for _x = min_x to max_x do
76476: LD_ADDR_VAR 0 5
76480: PUSH
76481: DOUBLE
76482: LD_VAR 0 8
76486: DEC
76487: ST_TO_ADDR
76488: LD_VAR 0 9
76492: PUSH
76493: FOR_TO
76494: IFFALSE 76595
// for _y = min_y to max_y do
76496: LD_ADDR_VAR 0 6
76500: PUSH
76501: DOUBLE
76502: LD_VAR 0 7
76506: DEC
76507: ST_TO_ADDR
76508: LD_VAR 0 10
76512: PUSH
76513: FOR_TO
76514: IFFALSE 76591
// begin if not ValidHex ( _x , _y ) then
76516: LD_VAR 0 5
76520: PPUSH
76521: LD_VAR 0 6
76525: PPUSH
76526: CALL_OW 488
76530: NOT
76531: IFFALSE 76535
// continue ;
76533: GO 76513
// if GetResourceTypeXY ( _x , _y ) then
76535: LD_VAR 0 5
76539: PPUSH
76540: LD_VAR 0 6
76544: PPUSH
76545: CALL_OW 283
76549: IFFALSE 76589
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76551: LD_ADDR_VAR 0 4
76555: PUSH
76556: LD_VAR 0 4
76560: PPUSH
76561: LD_VAR 0 4
76565: PUSH
76566: LD_INT 1
76568: PLUS
76569: PPUSH
76570: LD_VAR 0 5
76574: PUSH
76575: LD_VAR 0 6
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PPUSH
76584: CALL_OW 1
76588: ST_TO_ADDR
// end ;
76589: GO 76513
76591: POP
76592: POP
76593: GO 76493
76595: POP
76596: POP
// end ;
76597: LD_VAR 0 4
76601: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76602: LD_INT 0
76604: PPUSH
76605: PPUSH
76606: PPUSH
76607: PPUSH
76608: PPUSH
76609: PPUSH
76610: PPUSH
76611: PPUSH
// if not units then
76612: LD_VAR 0 1
76616: NOT
76617: IFFALSE 76621
// exit ;
76619: GO 77149
// result := UnitFilter ( units , [ f_ok ] ) ;
76621: LD_ADDR_VAR 0 3
76625: PUSH
76626: LD_VAR 0 1
76630: PPUSH
76631: LD_INT 50
76633: PUSH
76634: EMPTY
76635: LIST
76636: PPUSH
76637: CALL_OW 72
76641: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76642: LD_ADDR_VAR 0 8
76646: PUSH
76647: LD_VAR 0 1
76651: PUSH
76652: LD_INT 1
76654: ARRAY
76655: PPUSH
76656: CALL_OW 255
76660: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76661: LD_ADDR_VAR 0 10
76665: PUSH
76666: LD_INT 29
76668: PUSH
76669: LD_INT 91
76671: PUSH
76672: LD_INT 49
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: LIST
76679: ST_TO_ADDR
// if not result then
76680: LD_VAR 0 3
76684: NOT
76685: IFFALSE 76689
// exit ;
76687: GO 77149
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76689: LD_ADDR_VAR 0 5
76693: PUSH
76694: LD_INT 81
76696: PUSH
76697: LD_VAR 0 8
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PPUSH
76706: CALL_OW 69
76710: ST_TO_ADDR
// for i in result do
76711: LD_ADDR_VAR 0 4
76715: PUSH
76716: LD_VAR 0 3
76720: PUSH
76721: FOR_IN
76722: IFFALSE 77147
// begin tag := GetTag ( i ) + 1 ;
76724: LD_ADDR_VAR 0 9
76728: PUSH
76729: LD_VAR 0 4
76733: PPUSH
76734: CALL_OW 110
76738: PUSH
76739: LD_INT 1
76741: PLUS
76742: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
76743: LD_ADDR_VAR 0 7
76747: PUSH
76748: LD_VAR 0 4
76752: PPUSH
76753: CALL_OW 250
76757: PPUSH
76758: LD_VAR 0 4
76762: PPUSH
76763: CALL_OW 251
76767: PPUSH
76768: LD_INT 4
76770: PPUSH
76771: CALL 76344 0 3
76775: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
76776: LD_VAR 0 4
76780: PPUSH
76781: CALL_OW 247
76785: PUSH
76786: LD_INT 2
76788: EQUAL
76789: PUSH
76790: LD_VAR 0 7
76794: PUSH
76795: LD_INT 2
76797: GREATER
76798: AND
76799: PUSH
76800: LD_VAR 0 4
76804: PPUSH
76805: CALL_OW 264
76809: PUSH
76810: LD_VAR 0 10
76814: IN
76815: NOT
76816: AND
76817: IFFALSE 76856
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76819: LD_VAR 0 4
76823: PPUSH
76824: LD_VAR 0 7
76828: PUSH
76829: LD_INT 1
76831: ARRAY
76832: PUSH
76833: LD_INT 1
76835: ARRAY
76836: PPUSH
76837: LD_VAR 0 7
76841: PUSH
76842: LD_INT 1
76844: ARRAY
76845: PUSH
76846: LD_INT 2
76848: ARRAY
76849: PPUSH
76850: CALL_OW 116
76854: GO 77145
// if path > tag then
76856: LD_VAR 0 2
76860: PUSH
76861: LD_VAR 0 9
76865: GREATER
76866: IFFALSE 77074
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76868: LD_ADDR_VAR 0 6
76872: PUSH
76873: LD_VAR 0 5
76877: PPUSH
76878: LD_INT 91
76880: PUSH
76881: LD_VAR 0 4
76885: PUSH
76886: LD_INT 8
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: LIST
76893: PPUSH
76894: CALL_OW 72
76898: ST_TO_ADDR
// if nearEnemy then
76899: LD_VAR 0 6
76903: IFFALSE 76972
// begin if GetWeapon ( i ) = ru_time_lapser then
76905: LD_VAR 0 4
76909: PPUSH
76910: CALL_OW 264
76914: PUSH
76915: LD_INT 49
76917: EQUAL
76918: IFFALSE 76946
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76920: LD_VAR 0 4
76924: PPUSH
76925: LD_VAR 0 6
76929: PPUSH
76930: LD_VAR 0 4
76934: PPUSH
76935: CALL_OW 74
76939: PPUSH
76940: CALL_OW 112
76944: GO 76970
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76946: LD_VAR 0 4
76950: PPUSH
76951: LD_VAR 0 6
76955: PPUSH
76956: LD_VAR 0 4
76960: PPUSH
76961: CALL_OW 74
76965: PPUSH
76966: CALL 78220 0 2
// end else
76970: GO 77072
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76972: LD_VAR 0 4
76976: PPUSH
76977: LD_VAR 0 2
76981: PUSH
76982: LD_VAR 0 9
76986: ARRAY
76987: PUSH
76988: LD_INT 1
76990: ARRAY
76991: PPUSH
76992: LD_VAR 0 2
76996: PUSH
76997: LD_VAR 0 9
77001: ARRAY
77002: PUSH
77003: LD_INT 2
77005: ARRAY
77006: PPUSH
77007: CALL_OW 297
77011: PUSH
77012: LD_INT 6
77014: GREATER
77015: IFFALSE 77058
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77017: LD_VAR 0 4
77021: PPUSH
77022: LD_VAR 0 2
77026: PUSH
77027: LD_VAR 0 9
77031: ARRAY
77032: PUSH
77033: LD_INT 1
77035: ARRAY
77036: PPUSH
77037: LD_VAR 0 2
77041: PUSH
77042: LD_VAR 0 9
77046: ARRAY
77047: PUSH
77048: LD_INT 2
77050: ARRAY
77051: PPUSH
77052: CALL_OW 114
77056: GO 77072
// SetTag ( i , tag ) ;
77058: LD_VAR 0 4
77062: PPUSH
77063: LD_VAR 0 9
77067: PPUSH
77068: CALL_OW 109
// end else
77072: GO 77145
// if enemy then
77074: LD_VAR 0 5
77078: IFFALSE 77145
// begin if GetWeapon ( i ) = ru_time_lapser then
77080: LD_VAR 0 4
77084: PPUSH
77085: CALL_OW 264
77089: PUSH
77090: LD_INT 49
77092: EQUAL
77093: IFFALSE 77121
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77095: LD_VAR 0 4
77099: PPUSH
77100: LD_VAR 0 5
77104: PPUSH
77105: LD_VAR 0 4
77109: PPUSH
77110: CALL_OW 74
77114: PPUSH
77115: CALL_OW 112
77119: GO 77145
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77121: LD_VAR 0 4
77125: PPUSH
77126: LD_VAR 0 5
77130: PPUSH
77131: LD_VAR 0 4
77135: PPUSH
77136: CALL_OW 74
77140: PPUSH
77141: CALL 78220 0 2
// end ; end ;
77145: GO 76721
77147: POP
77148: POP
// end ;
77149: LD_VAR 0 3
77153: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77154: LD_INT 0
77156: PPUSH
77157: PPUSH
77158: PPUSH
// if not unit or IsInUnit ( unit ) then
77159: LD_VAR 0 1
77163: NOT
77164: PUSH
77165: LD_VAR 0 1
77169: PPUSH
77170: CALL_OW 310
77174: OR
77175: IFFALSE 77179
// exit ;
77177: GO 77270
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77179: LD_ADDR_VAR 0 4
77183: PUSH
77184: LD_VAR 0 1
77188: PPUSH
77189: CALL_OW 250
77193: PPUSH
77194: LD_VAR 0 2
77198: PPUSH
77199: LD_INT 1
77201: PPUSH
77202: CALL_OW 272
77206: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77207: LD_ADDR_VAR 0 5
77211: PUSH
77212: LD_VAR 0 1
77216: PPUSH
77217: CALL_OW 251
77221: PPUSH
77222: LD_VAR 0 2
77226: PPUSH
77227: LD_INT 1
77229: PPUSH
77230: CALL_OW 273
77234: ST_TO_ADDR
// if ValidHex ( x , y ) then
77235: LD_VAR 0 4
77239: PPUSH
77240: LD_VAR 0 5
77244: PPUSH
77245: CALL_OW 488
77249: IFFALSE 77270
// ComTurnXY ( unit , x , y ) ;
77251: LD_VAR 0 1
77255: PPUSH
77256: LD_VAR 0 4
77260: PPUSH
77261: LD_VAR 0 5
77265: PPUSH
77266: CALL_OW 118
// end ;
77270: LD_VAR 0 3
77274: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77275: LD_INT 0
77277: PPUSH
77278: PPUSH
// result := false ;
77279: LD_ADDR_VAR 0 3
77283: PUSH
77284: LD_INT 0
77286: ST_TO_ADDR
// if not units then
77287: LD_VAR 0 2
77291: NOT
77292: IFFALSE 77296
// exit ;
77294: GO 77341
// for i in units do
77296: LD_ADDR_VAR 0 4
77300: PUSH
77301: LD_VAR 0 2
77305: PUSH
77306: FOR_IN
77307: IFFALSE 77339
// if See ( side , i ) then
77309: LD_VAR 0 1
77313: PPUSH
77314: LD_VAR 0 4
77318: PPUSH
77319: CALL_OW 292
77323: IFFALSE 77337
// begin result := true ;
77325: LD_ADDR_VAR 0 3
77329: PUSH
77330: LD_INT 1
77332: ST_TO_ADDR
// exit ;
77333: POP
77334: POP
77335: GO 77341
// end ;
77337: GO 77306
77339: POP
77340: POP
// end ;
77341: LD_VAR 0 3
77345: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77346: LD_INT 0
77348: PPUSH
77349: PPUSH
77350: PPUSH
77351: PPUSH
// if not unit or not points then
77352: LD_VAR 0 1
77356: NOT
77357: PUSH
77358: LD_VAR 0 2
77362: NOT
77363: OR
77364: IFFALSE 77368
// exit ;
77366: GO 77458
// dist := 99999 ;
77368: LD_ADDR_VAR 0 5
77372: PUSH
77373: LD_INT 99999
77375: ST_TO_ADDR
// for i in points do
77376: LD_ADDR_VAR 0 4
77380: PUSH
77381: LD_VAR 0 2
77385: PUSH
77386: FOR_IN
77387: IFFALSE 77456
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77389: LD_ADDR_VAR 0 6
77393: PUSH
77394: LD_VAR 0 1
77398: PPUSH
77399: LD_VAR 0 4
77403: PUSH
77404: LD_INT 1
77406: ARRAY
77407: PPUSH
77408: LD_VAR 0 4
77412: PUSH
77413: LD_INT 2
77415: ARRAY
77416: PPUSH
77417: CALL_OW 297
77421: ST_TO_ADDR
// if tmpDist < dist then
77422: LD_VAR 0 6
77426: PUSH
77427: LD_VAR 0 5
77431: LESS
77432: IFFALSE 77454
// begin result := i ;
77434: LD_ADDR_VAR 0 3
77438: PUSH
77439: LD_VAR 0 4
77443: ST_TO_ADDR
// dist := tmpDist ;
77444: LD_ADDR_VAR 0 5
77448: PUSH
77449: LD_VAR 0 6
77453: ST_TO_ADDR
// end ; end ;
77454: GO 77386
77456: POP
77457: POP
// end ;
77458: LD_VAR 0 3
77462: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77463: LD_INT 0
77465: PPUSH
// uc_side := side ;
77466: LD_ADDR_OWVAR 20
77470: PUSH
77471: LD_VAR 0 1
77475: ST_TO_ADDR
// uc_nation := 3 ;
77476: LD_ADDR_OWVAR 21
77480: PUSH
77481: LD_INT 3
77483: ST_TO_ADDR
// vc_chassis := 25 ;
77484: LD_ADDR_OWVAR 37
77488: PUSH
77489: LD_INT 25
77491: ST_TO_ADDR
// vc_engine := engine_siberite ;
77492: LD_ADDR_OWVAR 39
77496: PUSH
77497: LD_INT 3
77499: ST_TO_ADDR
// vc_control := control_computer ;
77500: LD_ADDR_OWVAR 38
77504: PUSH
77505: LD_INT 3
77507: ST_TO_ADDR
// vc_weapon := 59 ;
77508: LD_ADDR_OWVAR 40
77512: PUSH
77513: LD_INT 59
77515: ST_TO_ADDR
// result := CreateVehicle ;
77516: LD_ADDR_VAR 0 5
77520: PUSH
77521: CALL_OW 45
77525: ST_TO_ADDR
// SetDir ( result , d ) ;
77526: LD_VAR 0 5
77530: PPUSH
77531: LD_VAR 0 4
77535: PPUSH
77536: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77540: LD_VAR 0 5
77544: PPUSH
77545: LD_VAR 0 2
77549: PPUSH
77550: LD_VAR 0 3
77554: PPUSH
77555: LD_INT 0
77557: PPUSH
77558: CALL_OW 48
// end ;
77562: LD_VAR 0 5
77566: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77567: LD_INT 0
77569: PPUSH
77570: PPUSH
77571: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77572: LD_ADDR_VAR 0 2
77576: PUSH
77577: LD_INT 0
77579: PUSH
77580: LD_INT 0
77582: PUSH
77583: LD_INT 0
77585: PUSH
77586: LD_INT 0
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: LIST
77593: LIST
77594: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77595: LD_VAR 0 1
77599: NOT
77600: PUSH
77601: LD_VAR 0 1
77605: PPUSH
77606: CALL_OW 264
77610: PUSH
77611: LD_INT 12
77613: PUSH
77614: LD_INT 51
77616: PUSH
77617: LD_INT 32
77619: PUSH
77620: LD_INT 89
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: LIST
77627: LIST
77628: IN
77629: NOT
77630: OR
77631: IFFALSE 77635
// exit ;
77633: GO 77733
// for i := 1 to 3 do
77635: LD_ADDR_VAR 0 3
77639: PUSH
77640: DOUBLE
77641: LD_INT 1
77643: DEC
77644: ST_TO_ADDR
77645: LD_INT 3
77647: PUSH
77648: FOR_TO
77649: IFFALSE 77731
// begin tmp := GetCargo ( cargo , i ) ;
77651: LD_ADDR_VAR 0 4
77655: PUSH
77656: LD_VAR 0 1
77660: PPUSH
77661: LD_VAR 0 3
77665: PPUSH
77666: CALL_OW 289
77670: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77671: LD_ADDR_VAR 0 2
77675: PUSH
77676: LD_VAR 0 2
77680: PPUSH
77681: LD_VAR 0 3
77685: PPUSH
77686: LD_VAR 0 4
77690: PPUSH
77691: CALL_OW 1
77695: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77696: LD_ADDR_VAR 0 2
77700: PUSH
77701: LD_VAR 0 2
77705: PPUSH
77706: LD_INT 4
77708: PPUSH
77709: LD_VAR 0 2
77713: PUSH
77714: LD_INT 4
77716: ARRAY
77717: PUSH
77718: LD_VAR 0 4
77722: PLUS
77723: PPUSH
77724: CALL_OW 1
77728: ST_TO_ADDR
// end ;
77729: GO 77648
77731: POP
77732: POP
// end ;
77733: LD_VAR 0 2
77737: RET
// export function Length ( array ) ; begin
77738: LD_INT 0
77740: PPUSH
// result := array + 0 ;
77741: LD_ADDR_VAR 0 2
77745: PUSH
77746: LD_VAR 0 1
77750: PUSH
77751: LD_INT 0
77753: PLUS
77754: ST_TO_ADDR
// end ;
77755: LD_VAR 0 2
77759: RET
// export function PrepareArray ( array ) ; begin
77760: LD_INT 0
77762: PPUSH
// result := array diff 0 ;
77763: LD_ADDR_VAR 0 2
77767: PUSH
77768: LD_VAR 0 1
77772: PUSH
77773: LD_INT 0
77775: DIFF
77776: ST_TO_ADDR
// if not result [ 1 ] then
77777: LD_VAR 0 2
77781: PUSH
77782: LD_INT 1
77784: ARRAY
77785: NOT
77786: IFFALSE 77806
// result := Delete ( result , 1 ) ;
77788: LD_ADDR_VAR 0 2
77792: PUSH
77793: LD_VAR 0 2
77797: PPUSH
77798: LD_INT 1
77800: PPUSH
77801: CALL_OW 3
77805: ST_TO_ADDR
// end ;
77806: LD_VAR 0 2
77810: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77811: LD_INT 0
77813: PPUSH
77814: PPUSH
77815: PPUSH
77816: PPUSH
// sibRocketRange := 25 ;
77817: LD_ADDR_VAR 0 6
77821: PUSH
77822: LD_INT 25
77824: ST_TO_ADDR
// result := false ;
77825: LD_ADDR_VAR 0 4
77829: PUSH
77830: LD_INT 0
77832: ST_TO_ADDR
// for i := 0 to 5 do
77833: LD_ADDR_VAR 0 5
77837: PUSH
77838: DOUBLE
77839: LD_INT 0
77841: DEC
77842: ST_TO_ADDR
77843: LD_INT 5
77845: PUSH
77846: FOR_TO
77847: IFFALSE 77914
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77849: LD_VAR 0 1
77853: PPUSH
77854: LD_VAR 0 5
77858: PPUSH
77859: LD_VAR 0 6
77863: PPUSH
77864: CALL_OW 272
77868: PPUSH
77869: LD_VAR 0 2
77873: PPUSH
77874: LD_VAR 0 5
77878: PPUSH
77879: LD_VAR 0 6
77883: PPUSH
77884: CALL_OW 273
77888: PPUSH
77889: LD_VAR 0 3
77893: PPUSH
77894: CALL_OW 309
77898: IFFALSE 77912
// begin result := true ;
77900: LD_ADDR_VAR 0 4
77904: PUSH
77905: LD_INT 1
77907: ST_TO_ADDR
// exit ;
77908: POP
77909: POP
77910: GO 77916
// end ;
77912: GO 77846
77914: POP
77915: POP
// end ;
77916: LD_VAR 0 4
77920: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
77921: LD_INT 0
77923: PPUSH
77924: PPUSH
77925: PPUSH
// if btype = b_depot then
77926: LD_VAR 0 2
77930: PUSH
77931: LD_INT 0
77933: EQUAL
77934: IFFALSE 77946
// begin result := true ;
77936: LD_ADDR_VAR 0 3
77940: PUSH
77941: LD_INT 1
77943: ST_TO_ADDR
// exit ;
77944: GO 78062
// end ; pom := GetBase ( depot ) ;
77946: LD_ADDR_VAR 0 4
77950: PUSH
77951: LD_VAR 0 1
77955: PPUSH
77956: CALL_OW 274
77960: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
77961: LD_ADDR_VAR 0 5
77965: PUSH
77966: LD_VAR 0 2
77970: PPUSH
77971: LD_VAR 0 1
77975: PPUSH
77976: CALL_OW 248
77980: PPUSH
77981: CALL_OW 450
77985: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
77986: LD_ADDR_VAR 0 3
77990: PUSH
77991: LD_VAR 0 4
77995: PPUSH
77996: LD_INT 1
77998: PPUSH
77999: CALL_OW 275
78003: PUSH
78004: LD_VAR 0 5
78008: PUSH
78009: LD_INT 1
78011: ARRAY
78012: GREATEREQUAL
78013: PUSH
78014: LD_VAR 0 4
78018: PPUSH
78019: LD_INT 2
78021: PPUSH
78022: CALL_OW 275
78026: PUSH
78027: LD_VAR 0 5
78031: PUSH
78032: LD_INT 2
78034: ARRAY
78035: GREATEREQUAL
78036: AND
78037: PUSH
78038: LD_VAR 0 4
78042: PPUSH
78043: LD_INT 3
78045: PPUSH
78046: CALL_OW 275
78050: PUSH
78051: LD_VAR 0 5
78055: PUSH
78056: LD_INT 3
78058: ARRAY
78059: GREATEREQUAL
78060: AND
78061: ST_TO_ADDR
// end ;
78062: LD_VAR 0 3
78066: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78067: LD_INT 0
78069: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78070: LD_VAR 0 1
78074: PPUSH
78075: LD_VAR 0 2
78079: PPUSH
78080: LD_INT 0
78082: PPUSH
78083: LD_INT 0
78085: PPUSH
78086: LD_INT 1
78088: PPUSH
78089: LD_INT 0
78091: PPUSH
78092: CALL_OW 587
// end ;
78096: LD_VAR 0 3
78100: RET
// export function CenterOnNow ( unit ) ; begin
78101: LD_INT 0
78103: PPUSH
// result := IsInUnit ( unit ) ;
78104: LD_ADDR_VAR 0 2
78108: PUSH
78109: LD_VAR 0 1
78113: PPUSH
78114: CALL_OW 310
78118: ST_TO_ADDR
// if not result then
78119: LD_VAR 0 2
78123: NOT
78124: IFFALSE 78136
// result := unit ;
78126: LD_ADDR_VAR 0 2
78130: PUSH
78131: LD_VAR 0 1
78135: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78136: LD_VAR 0 1
78140: PPUSH
78141: CALL_OW 87
// end ;
78145: LD_VAR 0 2
78149: RET
// export function ComMoveHex ( unit , hex ) ; begin
78150: LD_INT 0
78152: PPUSH
// if not hex then
78153: LD_VAR 0 2
78157: NOT
78158: IFFALSE 78162
// exit ;
78160: GO 78215
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78162: LD_VAR 0 2
78166: PUSH
78167: LD_INT 1
78169: ARRAY
78170: PPUSH
78171: LD_VAR 0 2
78175: PUSH
78176: LD_INT 2
78178: ARRAY
78179: PPUSH
78180: CALL_OW 428
78184: IFFALSE 78188
// exit ;
78186: GO 78215
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78188: LD_VAR 0 1
78192: PPUSH
78193: LD_VAR 0 2
78197: PUSH
78198: LD_INT 1
78200: ARRAY
78201: PPUSH
78202: LD_VAR 0 2
78206: PUSH
78207: LD_INT 2
78209: ARRAY
78210: PPUSH
78211: CALL_OW 111
// end ;
78215: LD_VAR 0 3
78219: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78220: LD_INT 0
78222: PPUSH
78223: PPUSH
78224: PPUSH
// if not unit or not enemy then
78225: LD_VAR 0 1
78229: NOT
78230: PUSH
78231: LD_VAR 0 2
78235: NOT
78236: OR
78237: IFFALSE 78241
// exit ;
78239: GO 78365
// x := GetX ( enemy ) ;
78241: LD_ADDR_VAR 0 4
78245: PUSH
78246: LD_VAR 0 2
78250: PPUSH
78251: CALL_OW 250
78255: ST_TO_ADDR
// y := GetY ( enemy ) ;
78256: LD_ADDR_VAR 0 5
78260: PUSH
78261: LD_VAR 0 2
78265: PPUSH
78266: CALL_OW 251
78270: ST_TO_ADDR
// if ValidHex ( x , y ) then
78271: LD_VAR 0 4
78275: PPUSH
78276: LD_VAR 0 5
78280: PPUSH
78281: CALL_OW 488
78285: IFFALSE 78365
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
78287: LD_VAR 0 2
78291: PPUSH
78292: CALL_OW 247
78296: PUSH
78297: LD_INT 3
78299: PUSH
78300: LD_INT 2
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: IN
78307: PUSH
78308: LD_VAR 0 1
78312: PPUSH
78313: CALL_OW 255
78317: PPUSH
78318: LD_VAR 0 2
78322: PPUSH
78323: CALL_OW 292
78327: OR
78328: IFFALSE 78346
// ComAttackUnit ( unit , enemy ) else
78330: LD_VAR 0 1
78334: PPUSH
78335: LD_VAR 0 2
78339: PPUSH
78340: CALL_OW 115
78344: GO 78365
// ComAgressiveMove ( unit , x , y ) ;
78346: LD_VAR 0 1
78350: PPUSH
78351: LD_VAR 0 4
78355: PPUSH
78356: LD_VAR 0 5
78360: PPUSH
78361: CALL_OW 114
// end ;
78365: LD_VAR 0 3
78369: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78370: LD_INT 0
78372: PPUSH
78373: PPUSH
78374: PPUSH
// list := AreaToList ( area , 0 ) ;
78375: LD_ADDR_VAR 0 5
78379: PUSH
78380: LD_VAR 0 1
78384: PPUSH
78385: LD_INT 0
78387: PPUSH
78388: CALL_OW 517
78392: ST_TO_ADDR
// if not list then
78393: LD_VAR 0 5
78397: NOT
78398: IFFALSE 78402
// exit ;
78400: GO 78532
// if all then
78402: LD_VAR 0 2
78406: IFFALSE 78494
// begin for i := 1 to list [ 1 ] do
78408: LD_ADDR_VAR 0 4
78412: PUSH
78413: DOUBLE
78414: LD_INT 1
78416: DEC
78417: ST_TO_ADDR
78418: LD_VAR 0 5
78422: PUSH
78423: LD_INT 1
78425: ARRAY
78426: PUSH
78427: FOR_TO
78428: IFFALSE 78490
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78430: LD_ADDR_VAR 0 3
78434: PUSH
78435: LD_VAR 0 3
78439: PPUSH
78440: LD_VAR 0 3
78444: PUSH
78445: LD_INT 1
78447: PLUS
78448: PPUSH
78449: LD_VAR 0 5
78453: PUSH
78454: LD_INT 1
78456: ARRAY
78457: PUSH
78458: LD_VAR 0 4
78462: ARRAY
78463: PUSH
78464: LD_VAR 0 5
78468: PUSH
78469: LD_INT 2
78471: ARRAY
78472: PUSH
78473: LD_VAR 0 4
78477: ARRAY
78478: PUSH
78479: EMPTY
78480: LIST
78481: LIST
78482: PPUSH
78483: CALL_OW 1
78487: ST_TO_ADDR
78488: GO 78427
78490: POP
78491: POP
// exit ;
78492: GO 78532
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
78494: LD_ADDR_VAR 0 3
78498: PUSH
78499: LD_VAR 0 5
78503: PUSH
78504: LD_INT 1
78506: ARRAY
78507: PUSH
78508: LD_INT 1
78510: ARRAY
78511: PUSH
78512: LD_VAR 0 5
78516: PUSH
78517: LD_INT 2
78519: ARRAY
78520: PUSH
78521: LD_INT 1
78523: ARRAY
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: EMPTY
78530: LIST
78531: ST_TO_ADDR
// end ;
78532: LD_VAR 0 3
78536: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
78537: LD_INT 0
78539: PPUSH
78540: PPUSH
// list := AreaToList ( area , 0 ) ;
78541: LD_ADDR_VAR 0 4
78545: PUSH
78546: LD_VAR 0 1
78550: PPUSH
78551: LD_INT 0
78553: PPUSH
78554: CALL_OW 517
78558: ST_TO_ADDR
// if not list then
78559: LD_VAR 0 4
78563: NOT
78564: IFFALSE 78568
// exit ;
78566: GO 78609
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78568: LD_ADDR_VAR 0 3
78572: PUSH
78573: LD_VAR 0 4
78577: PUSH
78578: LD_INT 1
78580: ARRAY
78581: PUSH
78582: LD_INT 1
78584: ARRAY
78585: PUSH
78586: LD_VAR 0 4
78590: PUSH
78591: LD_INT 2
78593: ARRAY
78594: PUSH
78595: LD_INT 1
78597: ARRAY
78598: PUSH
78599: LD_VAR 0 2
78603: PUSH
78604: EMPTY
78605: LIST
78606: LIST
78607: LIST
78608: ST_TO_ADDR
// end ;
78609: LD_VAR 0 3
78613: RET
// export function First ( array ) ; begin
78614: LD_INT 0
78616: PPUSH
// if not array then
78617: LD_VAR 0 1
78621: NOT
78622: IFFALSE 78626
// exit ;
78624: GO 78640
// result := array [ 1 ] ;
78626: LD_ADDR_VAR 0 2
78630: PUSH
78631: LD_VAR 0 1
78635: PUSH
78636: LD_INT 1
78638: ARRAY
78639: ST_TO_ADDR
// end ;
78640: LD_VAR 0 2
78644: RET
// export function Last ( array ) ; begin
78645: LD_INT 0
78647: PPUSH
// if not array then
78648: LD_VAR 0 1
78652: NOT
78653: IFFALSE 78657
// exit ;
78655: GO 78673
// result := array [ array ] ;
78657: LD_ADDR_VAR 0 2
78661: PUSH
78662: LD_VAR 0 1
78666: PUSH
78667: LD_VAR 0 1
78671: ARRAY
78672: ST_TO_ADDR
// end ;
78673: LD_VAR 0 2
78677: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
78678: LD_INT 0
78680: PPUSH
78681: PPUSH
// result := [ ] ;
78682: LD_ADDR_VAR 0 5
78686: PUSH
78687: EMPTY
78688: ST_TO_ADDR
// if not array then
78689: LD_VAR 0 1
78693: NOT
78694: IFFALSE 78698
// exit ;
78696: GO 78810
// for i := 1 to array do
78698: LD_ADDR_VAR 0 6
78702: PUSH
78703: DOUBLE
78704: LD_INT 1
78706: DEC
78707: ST_TO_ADDR
78708: LD_VAR 0 1
78712: PUSH
78713: FOR_TO
78714: IFFALSE 78808
// if array [ i ] [ index ] = value then
78716: LD_VAR 0 1
78720: PUSH
78721: LD_VAR 0 6
78725: ARRAY
78726: PUSH
78727: LD_VAR 0 2
78731: ARRAY
78732: PUSH
78733: LD_VAR 0 3
78737: EQUAL
78738: IFFALSE 78806
// begin if indexColumn then
78740: LD_VAR 0 4
78744: IFFALSE 78780
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78746: LD_ADDR_VAR 0 5
78750: PUSH
78751: LD_VAR 0 5
78755: PPUSH
78756: LD_VAR 0 1
78760: PUSH
78761: LD_VAR 0 6
78765: ARRAY
78766: PUSH
78767: LD_VAR 0 4
78771: ARRAY
78772: PPUSH
78773: CALL 73998 0 2
78777: ST_TO_ADDR
78778: GO 78806
// result := Join ( result , array [ i ] ) ;
78780: LD_ADDR_VAR 0 5
78784: PUSH
78785: LD_VAR 0 5
78789: PPUSH
78790: LD_VAR 0 1
78794: PUSH
78795: LD_VAR 0 6
78799: ARRAY
78800: PPUSH
78801: CALL 73998 0 2
78805: ST_TO_ADDR
// end ;
78806: GO 78713
78808: POP
78809: POP
// end ;
78810: LD_VAR 0 5
78814: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78815: LD_INT 0
78817: PPUSH
// if not vehicles or not parkingPoint then
78818: LD_VAR 0 1
78822: NOT
78823: PUSH
78824: LD_VAR 0 2
78828: NOT
78829: OR
78830: IFFALSE 78834
// exit ;
78832: GO 78932
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78834: LD_ADDR_VAR 0 1
78838: PUSH
78839: LD_VAR 0 1
78843: PPUSH
78844: LD_INT 50
78846: PUSH
78847: EMPTY
78848: LIST
78849: PUSH
78850: LD_INT 3
78852: PUSH
78853: LD_INT 92
78855: PUSH
78856: LD_VAR 0 2
78860: PUSH
78861: LD_INT 1
78863: ARRAY
78864: PUSH
78865: LD_VAR 0 2
78869: PUSH
78870: LD_INT 2
78872: ARRAY
78873: PUSH
78874: LD_INT 8
78876: PUSH
78877: EMPTY
78878: LIST
78879: LIST
78880: LIST
78881: LIST
78882: PUSH
78883: EMPTY
78884: LIST
78885: LIST
78886: PUSH
78887: EMPTY
78888: LIST
78889: LIST
78890: PPUSH
78891: CALL_OW 72
78895: ST_TO_ADDR
// if not vehicles then
78896: LD_VAR 0 1
78900: NOT
78901: IFFALSE 78905
// exit ;
78903: GO 78932
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
78905: LD_VAR 0 1
78909: PPUSH
78910: LD_VAR 0 2
78914: PUSH
78915: LD_INT 1
78917: ARRAY
78918: PPUSH
78919: LD_VAR 0 2
78923: PUSH
78924: LD_INT 2
78926: ARRAY
78927: PPUSH
78928: CALL_OW 111
// end ;
78932: LD_VAR 0 3
78936: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
78937: LD_INT 0
78939: PPUSH
78940: PPUSH
78941: PPUSH
// if not side or not area then
78942: LD_VAR 0 1
78946: NOT
78947: PUSH
78948: LD_VAR 0 2
78952: NOT
78953: OR
78954: IFFALSE 78958
// exit ;
78956: GO 79077
// tmp := AreaToList ( area , 0 ) ;
78958: LD_ADDR_VAR 0 5
78962: PUSH
78963: LD_VAR 0 2
78967: PPUSH
78968: LD_INT 0
78970: PPUSH
78971: CALL_OW 517
78975: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
78976: LD_ADDR_VAR 0 4
78980: PUSH
78981: DOUBLE
78982: LD_INT 1
78984: DEC
78985: ST_TO_ADDR
78986: LD_VAR 0 5
78990: PUSH
78991: LD_INT 1
78993: ARRAY
78994: PUSH
78995: FOR_TO
78996: IFFALSE 79075
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
78998: LD_VAR 0 5
79002: PUSH
79003: LD_INT 1
79005: ARRAY
79006: PUSH
79007: LD_VAR 0 4
79011: ARRAY
79012: PPUSH
79013: LD_VAR 0 5
79017: PUSH
79018: LD_INT 2
79020: ARRAY
79021: PUSH
79022: LD_VAR 0 4
79026: ARRAY
79027: PPUSH
79028: CALL_OW 351
79032: IFFALSE 79073
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
79034: LD_VAR 0 5
79038: PUSH
79039: LD_INT 1
79041: ARRAY
79042: PUSH
79043: LD_VAR 0 4
79047: ARRAY
79048: PPUSH
79049: LD_VAR 0 5
79053: PUSH
79054: LD_INT 2
79056: ARRAY
79057: PUSH
79058: LD_VAR 0 4
79062: ARRAY
79063: PPUSH
79064: LD_VAR 0 1
79068: PPUSH
79069: CALL_OW 244
// end ;
79073: GO 78995
79075: POP
79076: POP
// end ; end_of_file
79077: LD_VAR 0 3
79081: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79082: LD_VAR 0 1
79086: PUSH
79087: LD_INT 200
79089: DOUBLE
79090: GREATEREQUAL
79091: IFFALSE 79099
79093: LD_INT 299
79095: DOUBLE
79096: LESSEQUAL
79097: IFTRUE 79101
79099: GO 79133
79101: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79102: LD_VAR 0 1
79106: PPUSH
79107: LD_VAR 0 2
79111: PPUSH
79112: LD_VAR 0 3
79116: PPUSH
79117: LD_VAR 0 4
79121: PPUSH
79122: LD_VAR 0 5
79126: PPUSH
79127: CALL 15620 0 5
79131: GO 79210
79133: LD_INT 300
79135: DOUBLE
79136: GREATEREQUAL
79137: IFFALSE 79145
79139: LD_INT 399
79141: DOUBLE
79142: LESSEQUAL
79143: IFTRUE 79147
79145: GO 79209
79147: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79148: LD_VAR 0 1
79152: PPUSH
79153: LD_VAR 0 2
79157: PPUSH
79158: LD_VAR 0 3
79162: PPUSH
79163: LD_VAR 0 4
79167: PPUSH
79168: LD_VAR 0 5
79172: PPUSH
79173: LD_VAR 0 6
79177: PPUSH
79178: LD_VAR 0 7
79182: PPUSH
79183: LD_VAR 0 8
79187: PPUSH
79188: LD_VAR 0 9
79192: PPUSH
79193: LD_VAR 0 10
79197: PPUSH
79198: LD_VAR 0 11
79202: PPUSH
79203: CALL 32839 0 11
79207: GO 79210
79209: POP
// end ;
79210: PPOPN 11
79212: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79213: LD_VAR 0 1
79217: PPUSH
79218: LD_VAR 0 2
79222: PPUSH
79223: LD_VAR 0 3
79227: PPUSH
79228: LD_VAR 0 4
79232: PPUSH
79233: LD_VAR 0 5
79237: PPUSH
79238: CALL 15085 0 5
// end ; end_of_file
79242: PPOPN 5
79244: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79245: LD_VAR 0 1
79249: PPUSH
79250: LD_VAR 0 2
79254: PPUSH
79255: LD_VAR 0 3
79259: PPUSH
79260: LD_VAR 0 4
79264: PPUSH
79265: LD_VAR 0 5
79269: PPUSH
79270: LD_VAR 0 6
79274: PPUSH
79275: CALL 20491 0 6
// end ;
79279: PPOPN 6
79281: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79282: LD_INT 0
79284: PPUSH
// begin if not units then
79285: LD_VAR 0 1
79289: NOT
79290: IFFALSE 79294
// exit ;
79292: GO 79294
// end ;
79294: PPOPN 7
79296: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79297: CALL 20378 0 0
// end ;
79301: PPOPN 1
79303: END
