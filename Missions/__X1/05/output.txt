// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 2967 0 0
// Action ;
  39: CALL 8103 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 34272 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 34272 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 34272 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 34272 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 34272 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34272 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 34272 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 34272 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 34272 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 34272 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 34272 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 34272 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 34272 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2189: LD_INT 35
2191: PPUSH
2192: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 428
2206: NOT
2207: IFFALSE 2189
// tmp := [ ] ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: EMPTY
2215: ST_TO_ADDR
// uc_side := 5 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 5
2223: ST_TO_ADDR
// uc_nation := 2 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2232: LD_ADDR_EXP 33
2236: PUSH
2237: LD_STRING Aviradze_L
2239: PPUSH
2240: LD_EXP 1
2244: NOT
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL 34272 0 3
2255: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2256: LD_EXP 33
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2268: LD_EXP 33
2272: PPUSH
2273: LD_INT 14
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2283: LD_EXP 33
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: CALL_OW 111
// AddComHold ( Aviradze ) ;
2298: LD_EXP 33
2302: PPUSH
2303: CALL_OW 200
// tmp := [ Aviradze ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_EXP 33
2316: PUSH
2317: EMPTY
2318: LIST
2319: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2320: LD_INT 70
2322: PPUSH
2323: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2327: LD_STRING Ibrahim_L
2329: PPUSH
2330: LD_EXP 1
2334: NOT
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL 34272 0 3
2345: IFFALSE 2445
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2347: LD_ADDR_EXP 24
2351: PUSH
2352: LD_STRING Ibrahim_L
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 34272 0 3
2370: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2371: LD_EXP 24
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2383: LD_EXP 24
2387: PPUSH
2388: LD_INT 14
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2398: LD_EXP 24
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: LD_INT 7
2408: PPUSH
2409: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2413: LD_EXP 24
2417: PPUSH
2418: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_EXP 24
2436: ADD
2437: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2438: LD_INT 70
2440: PPUSH
2441: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2445: LD_STRING Kaia_L
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_VAR 0 2
2458: PPUSH
2459: CALL 34272 0 3
2463: IFFALSE 2563
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2465: LD_ADDR_EXP 26
2469: PUSH
2470: LD_STRING Kaia_L
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 34272 0 3
2488: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2489: LD_EXP 26
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2501: LD_EXP 26
2505: PPUSH
2506: LD_INT 14
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2516: LD_EXP 26
2520: PPUSH
2521: LD_INT 8
2523: PPUSH
2524: LD_INT 7
2526: PPUSH
2527: CALL_OW 111
// AddComHold ( Kaia ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 200
// tmp := tmp ^ Kaia ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_VAR 0 4
2549: PUSH
2550: LD_EXP 26
2554: ADD
2555: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2563: LD_STRING Kamil_L
2565: PPUSH
2566: LD_EXP 1
2570: NOT
2571: PPUSH
2572: LD_VAR 0 2
2576: PPUSH
2577: CALL 34272 0 3
2581: IFFALSE 2681
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2583: LD_ADDR_EXP 25
2587: PUSH
2588: LD_STRING Kamil_L
2590: PPUSH
2591: LD_EXP 1
2595: NOT
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL 34272 0 3
2606: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2607: LD_EXP 25
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2619: LD_EXP 25
2623: PPUSH
2624: LD_INT 14
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2634: LD_EXP 25
2638: PPUSH
2639: LD_INT 8
2641: PPUSH
2642: LD_INT 7
2644: PPUSH
2645: CALL_OW 111
// AddComHold ( Kamil ) ;
2649: LD_EXP 25
2653: PPUSH
2654: CALL_OW 200
// tmp := tmp ^ Kamil ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 4
2667: PUSH
2668: LD_EXP 25
2672: ADD
2673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2674: LD_INT 70
2676: PPUSH
2677: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2681: LD_STRING Sophia_L
2683: PPUSH
2684: LD_EXP 1
2688: NOT
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL 34272 0 3
2699: IFFALSE 2799
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2701: LD_ADDR_EXP 27
2705: PUSH
2706: LD_STRING Sophia_L
2708: PPUSH
2709: LD_EXP 1
2713: NOT
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL 34272 0 3
2724: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2725: LD_EXP 27
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 14
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2752: LD_EXP 27
2756: PPUSH
2757: LD_INT 9
2759: PPUSH
2760: LD_INT 6
2762: PPUSH
2763: CALL_OW 111
// AddComHold ( Sophia ) ;
2767: LD_EXP 27
2771: PPUSH
2772: CALL_OW 200
// tmp := tmp ^ Sophia ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_EXP 27
2790: ADD
2791: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_STRING 04_1_others_L
2806: PPUSH
2807: CALL_OW 31
2811: ST_TO_ADDR
// if tmp2 then
2812: LD_VAR 0 5
2816: IFFALSE 2913
// for i in tmp2 do
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2911
// begin SetDir ( i , 2 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2858: LD_ADDR_EXP 34
2862: PUSH
2863: LD_EXP 34
2867: PPUSH
2868: LD_EXP 34
2872: PUSH
2873: LD_INT 1
2875: PLUS
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 17
2894: PPUSH
2895: LD_INT 14
2897: PPUSH
2898: CALL_OW 111
// wait ( 0 0$2 ) ;
2902: LD_INT 70
2904: PPUSH
2905: CALL_OW 67
// end ;
2909: GO 2828
2911: POP
2912: POP
// for i in tmp union tmp2 do
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_VAR 0 5
2927: UNION
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2960
// begin SetSide ( i , 2 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2944: LD_VAR 0 3
2948: PPUSH
2949: LD_EXP 21
2953: PPUSH
2954: CALL_OW 112
// end ;
2958: GO 2929
2960: POP
2961: POP
// end ; end_of_file
2962: LD_VAR 0 1
2966: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
// uc_side := 3 ;
2972: LD_ADDR_OWVAR 20
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// uc_nation := 3 ;
2980: LD_ADDR_OWVAR 21
2984: PUSH
2985: LD_INT 3
2987: ST_TO_ADDR
// crossRoadGuard := [ ] ;
2988: LD_ADDR_EXP 37
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// oilBaseGuard := [ ] ;
2995: LD_ADDR_EXP 38
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3002: LD_ADDR_EXP 41
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// for i := 1 to 2 do
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: DOUBLE
3015: LD_INT 1
3017: DEC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_TO
3023: IFFALSE 3162
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3025: LD_INT 0
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: CALL_OW 380
// un := CreateHuman ;
3059: LD_ADDR_VAR 0 3
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_EXP 37
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: LD_VAR 0 3
3092: PPUSH
3093: CALL_OW 1
3097: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3098: LD_VAR 0 3
3102: PPUSH
3103: LD_INT 100
3105: PPUSH
3106: LD_INT 63
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3119: LD_VAR 0 3
3123: PPUSH
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 64
3129: PPUSH
3130: CALL_OW 428
3134: PUSH
3135: LD_INT 98
3137: PPUSH
3138: LD_INT 58
3140: PPUSH
3141: CALL_OW 428
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_VAR 0 2
3154: ARRAY
3155: PPUSH
3156: CALL_OW 120
// end ;
3160: GO 3022
3162: POP
3163: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3164: LD_INT 51
3166: PPUSH
3167: LD_INT 77
3169: PPUSH
3170: CALL_OW 428
3174: PPUSH
3175: CALL_OW 274
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 120
3185: PPUSH
3186: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3190: LD_INT 10
3192: PPUSH
3193: CALL_OW 274
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 300
3203: PPUSH
3204: CALL_OW 277
// for i := 1 to 2 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 2
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3340
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_OWVAR 67
3252: ARRAY
3253: PPUSH
3254: CALL_OW 380
// un := CreateHuman ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_EXP 38
3277: PPUSH
3278: LD_EXP 38
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 1
3296: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 198
3304: PPUSH
3305: LD_INT 106
3307: PPUSH
3308: CALL_OW 428
3312: PUSH
3313: LD_INT 205
3315: PPUSH
3316: LD_INT 114
3318: PPUSH
3319: CALL_OW 428
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PPUSH
3334: CALL_OW 52
// end ;
3338: GO 3221
3340: POP
3341: POP
// for i := 1 to 2 do
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: DOUBLE
3348: LD_INT 1
3350: DEC
3351: ST_TO_ADDR
3352: LD_INT 2
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3433
// begin PrepareHuman ( false , 2 , 3 ) ;
3358: LD_INT 0
3360: PPUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 380
// un := CreateHuman ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: CALL_OW 44
3380: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PPUSH
3391: LD_EXP 38
3395: PUSH
3396: LD_INT 1
3398: PLUS
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 204
3417: PPUSH
3418: LD_INT 108
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 50
// end ;
3431: GO 3355
3433: POP
3434: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 1
3499: PPUSH
3500: LD_INT 5
3502: PPUSH
3503: CALL_OW 12
3507: ARRAY
3508: PPUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 10
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 70638 0 3
3562: IFFALSE 3614
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3564: LD_ADDR_EXP 39
3568: PUSH
3569: LD_EXP 39
3573: PPUSH
3574: LD_EXP 39
3578: PUSH
3579: LD_INT 1
3581: PLUS
3582: PPUSH
3583: LD_VAR 0 3
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// if Prob ( 50 ) then
3593: LD_INT 50
3595: PPUSH
3596: CALL_OW 13
3600: IFFALSE 3614
// ForceSleep ( un , true ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 585
// end ; end ;
3614: GO 3469
3616: POP
3617: POP
// for i := 1 to 3 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 3
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3726
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_OWVAR 67
3662: ARRAY
3663: PPUSH
3664: CALL_OW 380
// un := CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL 70638 0 3
3693: IFFALSE 3724
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3695: LD_ADDR_EXP 39
3699: PUSH
3700: LD_EXP 39
3704: PPUSH
3705: LD_EXP 39
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: PPUSH
3714: LD_VAR 0 3
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: GO 3631
3726: POP
3727: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3909
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PPUSH
3826: CALL_OW 380
// un := CreateHuman ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_INT 15
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 70638 0 3
3855: IFFALSE 3907
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PPUSH
3867: LD_EXP 40
3871: PUSH
3872: LD_INT 1
3874: PLUS
3875: PPUSH
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 1
3885: ST_TO_ADDR
// if Prob ( 50 ) then
3886: LD_INT 50
3888: PPUSH
3889: CALL_OW 13
3893: IFFALSE 3907
// ForceSleep ( un , true ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 585
// end ; end ;
3907: GO 3762
3909: POP
3910: POP
// end ;
3911: LD_VAR 0 1
3915: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation := 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// for i := 1 to 6 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 6
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4030
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 4
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 380
// un := CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 54
4002: PPUSH
4003: LD_INT 88
4005: PPUSH
4006: LD_INT 12
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 50
// SetLives ( un , 1 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3950
4030: POP
4031: POP
// uc_side := 3 ;
4032: LD_ADDR_OWVAR 20
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// uc_nation := 0 ;
4040: LD_ADDR_OWVAR 21
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4048: LD_ADDR_EXP 42
4052: PUSH
4053: EMPTY
4054: ST_TO_ADDR
// apeEngGroup := [ ] ;
4055: LD_ADDR_EXP 43
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: LD_INT 6
4080: PUSH
4081: LD_INT 7
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4215
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4099: LD_INT 0
4101: PPUSH
4102: LD_INT 15
4104: PPUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: LD_INT 6
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4143: LD_ADDR_EXP 42
4147: PUSH
4148: LD_EXP 42
4152: PPUSH
4153: LD_EXP 42
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 12
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 56
4199: PPUSH
4200: LD_INT 82
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 50
// end ;
4213: GO 4096
4215: POP
4216: POP
// for i := 1 to 2 do
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: DOUBLE
4223: LD_INT 1
4225: DEC
4226: ST_TO_ADDR
4227: LD_INT 2
4229: PUSH
4230: FOR_TO
4231: IFFALSE 4307
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 16
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: CALL_OW 380
// un := CreateHuman ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 44
4255: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4256: LD_ADDR_EXP 43
4260: PUSH
4261: LD_EXP 43
4265: PPUSH
4266: LD_EXP 43
4270: PUSH
4271: LD_INT 1
4273: PLUS
4274: PPUSH
4275: LD_VAR 0 3
4279: PPUSH
4280: CALL_OW 1
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 51
4292: PPUSH
4293: LD_INT 77
4295: PPUSH
4296: CALL_OW 428
4300: PPUSH
4301: CALL_OW 52
// end ;
4305: GO 4230
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4314: LD_EXP 42
4318: PPUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 24
4324: PUSH
4325: LD_INT 600
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 54
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 72
4357: PUSH
4358: LD_INT 66
4360: PPUSH
4361: LD_INT 89
4363: PPUSH
4364: CALL_OW 428
4368: PPUSH
4369: CALL_OW 302
4373: AND
4374: IFFALSE 4459
4376: GO 4378
4378: DISABLE
4379: LD_INT 0
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_EXP 42
4392: PPUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 24
4398: PUSH
4399: LD_INT 600
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 54
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4457
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 66
4442: PPUSH
4443: LD_INT 89
4445: PPUSH
4446: CALL_OW 428
4450: PPUSH
4451: CALL_OW 120
4455: GO 4432
4457: POP
4458: POP
// end ;
4459: PPOPN 1
4461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4462: LD_INT 22
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 92
4474: PUSH
4475: LD_INT 54
4477: PUSH
4478: LD_INT 77
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: IFFALSE 4562
4500: GO 4502
4502: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4503: LD_EXP 43
4507: PPUSH
4508: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4512: LD_EXP 43
4516: PPUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 2
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 92
4529: PUSH
4530: LD_INT 54
4532: PUSH
4533: LD_INT 77
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PPUSH
4558: CALL_OW 175
// end ;
4562: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_INT 3
4585: PPUSH
4586: CALL_OW 12
4590: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4591: LD_ADDR_VAR 0 5
4595: PUSH
4596: LD_INT 16
4598: PUSH
4599: LD_INT 17
4601: PUSH
4602: LD_INT 19
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 159
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 137
4633: PUSH
4634: LD_INT 37
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 123
4643: PUSH
4644: LD_INT 55
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 115
4653: PUSH
4654: LD_INT 71
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 88
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 97
4673: PUSH
4674: LD_INT 114
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 75
4683: PUSH
4684: LD_INT 146
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 206
4702: PUSH
4703: LD_INT 135
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 184
4712: PUSH
4713: LD_INT 111
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 154
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 122
4732: PUSH
4733: LD_INT 80
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 109
4742: PUSH
4743: LD_INT 78
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 97
4752: PUSH
4753: LD_INT 113
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 75
4762: PUSH
4763: LD_INT 147
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 185
4781: PUSH
4782: LD_INT 72
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 171
4791: PUSH
4792: LD_INT 83
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 161
4801: PUSH
4802: LD_INT 99
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 125
4811: PUSH
4812: LD_INT 82
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 90
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 96
4831: PUSH
4832: LD_INT 116
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 75
4841: PUSH
4842: LD_INT 147
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 3
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4869: LD_ADDR_VAR 0 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 3
4892: ARRAY
4893: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 20
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: LD_VAR 0 3
4917: ARRAY
4918: ST_TO_ADDR
// for i := 1 to 2 do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_INT 2
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4951
// EraseResourceArea ( i , outerSpawnArea ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 286
4949: GO 4932
4951: POP
4952: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 70
5001: IFFALSE 5216
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5010: LD_VAR 0 6
5014: PPUSH
5015: LD_INT 2
5017: PUSH
5018: LD_INT 21
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: PPUSH
5043: CALL_OW 70
5047: IFFALSE 5108
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5106
// RemoveUnit ( i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: CALL_OW 64
5104: GO 5092
5106: POP
5107: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5176
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 6
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5174
// ComMoveXY ( i , 113 , 53 ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_INT 113
5164: PPUSH
5165: LD_INT 53
5167: PPUSH
5168: CALL_OW 111
5172: GO 5154
5174: POP
5175: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 21
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 70
5213: NOT
5214: IFFALSE 5003
// case convoyCounter of 1 .. 3 :
5216: LD_EXP 16
5220: PUSH
5221: LD_INT 1
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 3
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5870
5235: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 5
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 7
5254: PUSH
5255: LD_INT 8
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_OWVAR 67
5268: ARRAY
5269: PUSH
5270: LD_EXP 16
5274: MINUS
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5484
// begin uc_side := 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation := 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL_OW 12
5326: ARRAY
5327: PPUSH
5328: LD_INT 4
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 7
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 8
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// SetDir ( un , dir ) ;
5366: LD_VAR 0 8
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: CALL 70638 0 3
5397: IFFALSE 5482
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5399: LD_ADDR_EXP 41
5403: PUSH
5404: LD_EXP 41
5408: PPUSH
5409: LD_EXP 41
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 8
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5428: LD_VAR 0 8
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 111
// wait ( 0 0$2 ) ;
5475: LD_INT 70
5477: PPUSH
5478: CALL_OW 67
// end ; end ;
5482: GO 5276
5484: POP
5485: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: DOUBLE
5492: LD_INT 1
5494: DEC
5495: ST_TO_ADDR
5496: LD_INT 3
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: LD_OWVAR 67
5518: ARRAY
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5866
// begin uc_side := 3 ;
5523: LD_ADDR_OWVAR 20
5527: PUSH
5528: LD_INT 3
5530: ST_TO_ADDR
// uc_nation := 3 ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_INT 3
5538: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5539: LD_INT 3
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 24
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_OWVAR 67
5575: PPUSH
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: PLUS
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 42
5599: PUSH
5600: LD_INT 44
5602: PUSH
5603: LD_INT 43
5605: PUSH
5606: LD_INT 44
5608: PUSH
5609: LD_INT 46
5611: PUSH
5612: LD_INT 46
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_OWVAR 67
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: CALL_OW 12
5639: ARRAY
5640: PPUSH
5641: LD_INT 90
5643: PPUSH
5644: CALL 439 0 7
// un := CreateVehicle ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: CALL_OW 45
5657: ST_TO_ADDR
// SetDir ( un , dir ) ;
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5672: LD_VAR 0 8
5676: PPUSH
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL 70638 0 3
5689: IFFALSE 5864
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5691: LD_ADDR_EXP 41
5695: PUSH
5696: LD_EXP 41
5700: PPUSH
5701: LD_EXP 41
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: LD_VAR 0 8
5714: PPUSH
5715: CALL_OW 1
5719: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 3
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 6
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 383
// un := CreateHuman ;
5751: LD_ADDR_VAR 0 8
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_EXP 41
5775: ARRAY
5776: PPUSH
5777: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5781: LD_ADDR_EXP 41
5785: PUSH
5786: LD_EXP 41
5790: PPUSH
5791: LD_EXP 41
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 8
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5810: LD_VAR 0 8
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5822: LD_VAR 0 8
5826: PPUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: ARRAY
5852: PPUSH
5853: CALL_OW 111
// wait ( 0 0$3 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// end ; end ;
5864: GO 5520
5866: POP
5867: POP
// end ; 4 .. 7 :
5868: GO 6475
5870: LD_INT 4
5872: DOUBLE
5873: GREATEREQUAL
5874: IFFALSE 5882
5876: LD_INT 7
5878: DOUBLE
5879: LESSEQUAL
5880: IFTRUE 5884
5882: GO 6474
5884: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_INT 2
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: LD_OWVAR 67
5917: ARRAY
5918: PUSH
5919: FOR_TO
5920: IFFALSE 6100
// begin uc_side := 3 ;
5922: LD_ADDR_OWVAR 20
5926: PUSH
5927: LD_INT 3
5929: ST_TO_ADDR
// uc_nation := 3 ;
5930: LD_ADDR_OWVAR 21
5934: PUSH
5935: LD_INT 3
5937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 4
5946: PUSH
5947: LD_INT 5
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 7
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 70638 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5919
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6470
// begin uc_side := 3 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 3
6146: ST_TO_ADDR
// uc_nation := 3 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 3
6160: PPUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 42
6191: PUSH
6192: LD_INT 44
6194: PUSH
6195: LD_INT 43
6197: PUSH
6198: LD_INT 44
6200: PUSH
6201: LD_INT 44
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 1
6213: PPUSH
6214: LD_OWVAR 67
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: PPUSH
6229: LD_INT 90
6231: PPUSH
6232: CALL 439 0 7
// un := CreateVehicle ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 45
6245: ST_TO_ADDR
// SetDir ( un , dir ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL 70638 0 3
6277: IFFALSE 6468
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6279: LD_ADDR_EXP 41
6283: PUSH
6284: LD_EXP 41
6288: PPUSH
6289: LD_EXP 41
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: PPUSH
6298: LD_VAR 0 8
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// uc_side := 3 ;
6308: LD_ADDR_OWVAR 20
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// uc_nation := 3 ;
6316: LD_ADDR_OWVAR 21
6320: PUSH
6321: LD_INT 3
6323: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6324: LD_INT 0
6326: PPUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: LD_INT 6
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_OWVAR 67
6349: ARRAY
6350: PPUSH
6351: CALL_OW 383
// un := CreateHuman ;
6355: LD_ADDR_VAR 0 8
6359: PUSH
6360: CALL_OW 44
6364: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6365: LD_VAR 0 8
6369: PPUSH
6370: LD_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: ARRAY
6380: PPUSH
6381: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6385: LD_ADDR_EXP 41
6389: PUSH
6390: LD_EXP 41
6394: PPUSH
6395: LD_EXP 41
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 8
6408: PPUSH
6409: CALL_OW 1
6413: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6414: LD_VAR 0 8
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6426: LD_VAR 0 8
6430: PPUSH
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 7
6448: PUSH
6449: LD_INT 1
6451: ARRAY
6452: PUSH
6453: LD_INT 2
6455: ARRAY
6456: PPUSH
6457: CALL_OW 111
// wait ( 0 0$2 ) ;
6461: LD_INT 70
6463: PPUSH
6464: CALL_OW 67
// end ; end ;
6468: GO 6136
6470: POP
6471: POP
// end ; end ;
6472: GO 6475
6474: POP
// repeat wait ( 0 0$1 ) ;
6475: LD_INT 35
6477: PPUSH
6478: CALL_OW 67
// for un in ruConvoySquad do
6482: LD_ADDR_VAR 0 8
6486: PUSH
6487: LD_EXP 41
6491: PUSH
6492: FOR_IN
6493: IFFALSE 7117
// begin if IsInArea ( un , westSouthOutArea ) then
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_INT 18
6502: PPUSH
6503: CALL_OW 308
6507: IFFALSE 6595
// begin if GetType ( un ) = unit_vehicle then
6509: LD_VAR 0 8
6513: PPUSH
6514: CALL_OW 247
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6554
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: PPUSH
6539: CALL_OW 311
6543: DIFF
6544: ST_TO_ADDR
// RemoveUnit ( un ) ;
6545: LD_VAR 0 8
6549: PPUSH
6550: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6554: LD_ADDR_EXP 15
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6568: LD_ADDR_EXP 41
6572: PUSH
6573: LD_EXP 41
6577: PUSH
6578: LD_VAR 0 8
6582: DIFF
6583: ST_TO_ADDR
// RemoveUnit ( un ) ;
6584: LD_VAR 0 8
6588: PPUSH
6589: CALL_OW 64
// break ;
6593: GO 7117
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6595: LD_VAR 0 8
6599: PPUSH
6600: CALL_OW 305
6604: NOT
6605: PUSH
6606: LD_VAR 0 8
6610: PPUSH
6611: CALL_OW 310
6615: NOT
6616: AND
6617: IFFALSE 6635
// ruConvoySquad := ruConvoySquad diff un ;
6619: LD_ADDR_EXP 41
6623: PUSH
6624: LD_EXP 41
6628: PUSH
6629: LD_VAR 0 8
6633: DIFF
6634: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6635: LD_VAR 0 8
6639: PPUSH
6640: CALL_OW 302
6644: PUSH
6645: LD_VAR 0 8
6649: PPUSH
6650: CALL_OW 314
6654: NOT
6655: AND
6656: IFFALSE 7115
// begin tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 9
6662: PUSH
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6673: LD_VAR 0 8
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: LD_INT 1
6690: PLUS
6691: ARRAY
6692: PUSH
6693: LD_INT 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 9
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: ARRAY
6711: PUSH
6712: LD_INT 2
6714: ARRAY
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: IFFALSE 6907
// begin SetTag ( un , tag + 1 ) ;
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL_OW 247
6753: PUSH
6754: LD_INT 2
6756: EQUAL
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 257
6767: PUSH
6768: LD_INT 3
6770: EQUAL
6771: OR
6772: IFFALSE 6905
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6774: LD_ADDR_VAR 0 10
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 91
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: ST_TO_ADDR
// if enemy then
6814: LD_VAR 0 10
6818: IFFALSE 6846
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: LD_VAR 0 8
6834: PPUSH
6835: CALL_OW 74
6839: PPUSH
6840: CALL_OW 115
6844: GO 6905
// begin AddComWait ( un , 0 0$4 ) ;
6846: LD_VAR 0 8
6850: PPUSH
6851: LD_INT 140
6853: PPUSH
6854: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6858: LD_VAR 0 8
6862: PPUSH
6863: LD_VAR 0 7
6867: PUSH
6868: LD_VAR 0 9
6872: PUSH
6873: LD_INT 1
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 7
6886: PUSH
6887: LD_VAR 0 9
6891: PUSH
6892: LD_INT 1
6894: PLUS
6895: ARRAY
6896: PUSH
6897: LD_INT 2
6899: ARRAY
6900: PPUSH
6901: CALL_OW 174
// end ; end ; end else
6905: GO 7115
// begin if GetClass ( un ) = 4 then
6907: LD_VAR 0 8
6911: PPUSH
6912: CALL_OW 257
6916: PUSH
6917: LD_INT 4
6919: EQUAL
6920: IFFALSE 7068
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6922: LD_EXP 41
6926: PPUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: LD_INT 24
6942: PUSH
6943: LD_INT 1000
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: IFFALSE 7020
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6964: LD_VAR 0 8
6968: PPUSH
6969: LD_EXP 41
6973: PPUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 1000
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PPUSH
7014: CALL_OW 128
7018: GO 7066
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7020: LD_VAR 0 8
7024: PPUSH
7025: LD_EXP 41
7029: PPUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PPUSH
7052: LD_VAR 0 8
7056: PPUSH
7057: CALL_OW 74
7061: PPUSH
7062: CALL_OW 112
7066: GO 7115
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7068: LD_VAR 0 8
7072: PPUSH
7073: LD_VAR 0 7
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ARRAY
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 7
7096: PUSH
7097: LD_VAR 0 9
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 114
// end ; end ; end ;
7115: GO 6492
7117: POP
7118: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7119: LD_EXP 41
7123: PPUSH
7124: LD_INT 52
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: NOT
7149: IFFALSE 6475
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7156: LD_EXP 16
7160: PUSH
7161: LD_INT 3
7163: PPUSH
7164: LD_INT 5
7166: PPUSH
7167: CALL_OW 12
7171: LESS
7172: PUSH
7173: LD_EXP 41
7177: NOT
7178: AND
7179: PUSH
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: AND
7189: IFFALSE 7609
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: DOUBLE
7205: LD_INT 1
7207: DEC
7208: ST_TO_ADDR
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_OWVAR 67
7231: ARRAY
7232: PUSH
7233: FOR_TO
7234: IFFALSE 7530
// begin uc_side := 3 ;
7236: LD_ADDR_OWVAR 20
7240: PUSH
7241: LD_INT 3
7243: ST_TO_ADDR
// uc_nation := 3 ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7252: LD_INT 3
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 24
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_OWVAR 67
7288: PPUSH
7289: LD_OWVAR 67
7293: PUSH
7294: LD_INT 2
7296: PLUS
7297: PPUSH
7298: CALL_OW 12
7302: ARRAY
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 42
7312: PUSH
7313: LD_INT 44
7315: PUSH
7316: LD_INT 43
7318: PUSH
7319: LD_INT 44
7321: PUSH
7322: LD_INT 46
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 1
7338: PPUSH
7339: LD_OWVAR 67
7343: PUSH
7344: LD_INT 2
7346: PLUS
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 90
7356: PPUSH
7357: CALL 439 0 7
// un := CreateVehicle ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 45
7370: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7383: LD_VAR 0 3
7387: PPUSH
7388: LD_INT 23
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL 70638 0 3
7398: IFFALSE 7528
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
// uc_side := 3 ;
7429: LD_ADDR_OWVAR 20
7433: PUSH
7434: LD_INT 3
7436: ST_TO_ADDR
// uc_nation := 3 ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_INT 3
7444: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7445: LD_INT 0
7447: PPUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_OWVAR 67
7470: ARRAY
7471: PPUSH
7472: CALL_OW 383
// un := CreateHuman ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: CALL_OW 44
7485: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: PPUSH
7502: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 80
7513: PPUSH
7514: LD_INT 139
7516: PPUSH
7517: CALL_OW 111
// wait ( 0 0$3 ) ;
7521: LD_INT 105
7523: PPUSH
7524: CALL_OW 67
// end ; end ;
7528: GO 7233
7530: POP
7531: POP
// for i in tmp do
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7607
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 101
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 110
7567: PPUSH
7568: LD_INT 78
7570: PPUSH
7571: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: LD_INT 75
7582: PPUSH
7583: LD_INT 101
7585: PPUSH
7586: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 57
7597: PPUSH
7598: LD_INT 83
7600: PPUSH
7601: CALL_OW 174
// end ;
7605: GO 7542
7607: POP
7608: POP
// end ;
7609: PPOPN 3
7611: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7612: LD_EXP 39
7616: PPUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: LD_INT 1000
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 72
7638: PUSH
7639: LD_EXP 40
7643: PPUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 1000
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: OR
7666: IFFALSE 7765
7668: GO 7670
7670: DISABLE
7671: LD_INT 0
7673: PPUSH
// begin enable ;
7674: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 39
7684: PPUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: LD_INT 1000
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 72
7706: PUSH
7707: LD_EXP 40
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: LD_INT 1000
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 72
7733: UNION
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7763
// if IsSleeping ( i ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 555
7747: IFFALSE 7761
// ForceSleep ( i , false ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 585
7761: GO 7735
7763: POP
7764: POP
// end ; end_of_file
7765: PPOPN 1
7767: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL 14334 0 1
// if un = Heike then
7777: LD_VAR 0 1
7781: PUSH
7782: LD_EXP 21
7786: EQUAL
7787: IFFALSE 7796
// YouLost ( Heike ) ;
7789: LD_STRING Heike
7791: PPUSH
7792: CALL_OW 104
// if un in apeSoldGroup then
7796: LD_VAR 0 1
7800: PUSH
7801: LD_EXP 42
7805: IN
7806: IFFALSE 7824
// apeSoldGroup := apeSoldGroup diff un ;
7808: LD_ADDR_EXP 42
7812: PUSH
7813: LD_EXP 42
7817: PUSH
7818: LD_VAR 0 1
7822: DIFF
7823: ST_TO_ADDR
// if un in apeEngGroup then
7824: LD_VAR 0 1
7828: PUSH
7829: LD_EXP 43
7833: IN
7834: IFFALSE 7852
// apeEngGroup := apeEngGroup diff un ;
7836: LD_ADDR_EXP 43
7840: PUSH
7841: LD_EXP 43
7845: PUSH
7846: LD_VAR 0 1
7850: DIFF
7851: ST_TO_ADDR
// if un in oilBaseGuard then
7852: LD_VAR 0 1
7856: PUSH
7857: LD_EXP 38
7861: IN
7862: IFFALSE 7880
// oilBaseGuard := oilBaseGuard diff un ;
7864: LD_ADDR_EXP 38
7868: PUSH
7869: LD_EXP 38
7873: PUSH
7874: LD_VAR 0 1
7878: DIFF
7879: ST_TO_ADDR
// if un in ruNorthGroup then
7880: LD_VAR 0 1
7884: PUSH
7885: LD_EXP 39
7889: IN
7890: IFFALSE 7908
// ruNorthGroup := ruNorthGroup diff un ;
7892: LD_ADDR_EXP 39
7896: PUSH
7897: LD_EXP 39
7901: PUSH
7902: LD_VAR 0 1
7906: DIFF
7907: ST_TO_ADDR
// if un in ruSouthGroup then
7908: LD_VAR 0 1
7912: PUSH
7913: LD_EXP 40
7917: IN
7918: IFFALSE 7936
// ruSouthGroup := ruSouthGroup diff un ;
7920: LD_ADDR_EXP 40
7924: PUSH
7925: LD_EXP 40
7929: PUSH
7930: LD_VAR 0 1
7934: DIFF
7935: ST_TO_ADDR
// if un in ruConvoySquad then
7936: LD_VAR 0 1
7940: PUSH
7941: LD_EXP 41
7945: IN
7946: IFFALSE 7964
// ruConvoySquad := ruConvoySquad diff un ;
7948: LD_ADDR_EXP 41
7952: PUSH
7953: LD_EXP 41
7957: PUSH
7958: LD_VAR 0 1
7962: DIFF
7963: ST_TO_ADDR
// end ;
7964: PPOPN 1
7966: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7967: LD_VAR 0 1
7971: PPUSH
7972: LD_VAR 0 2
7976: PPUSH
7977: CALL 14454 0 2
// if GetWeapon ( veh ) = ar_radar then
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 264
7990: PUSH
7991: LD_INT 30
7993: EQUAL
7994: IFFALSE 8004
// radarConstructed := true ;
7996: LD_ADDR_EXP 13
8000: PUSH
8001: LD_INT 1
8003: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 264
8013: PUSH
8014: LD_INT 26
8016: EQUAL
8017: IFFALSE 8027
// flamethrowerBuilt := true ;
8019: LD_ADDR_EXP 20
8023: PUSH
8024: LD_INT 1
8026: ST_TO_ADDR
// end ;
8027: PPOPN 2
8029: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8030: LD_ADDR_EXP 18
8034: PUSH
8035: LD_EXP 18
8039: PUSH
8040: LD_INT 1
8042: PLUS
8043: ST_TO_ADDR
// if oldId in ruConvoySquad then
8044: LD_VAR 0 2
8048: PUSH
8049: LD_EXP 41
8053: IN
8054: IFFALSE 8072
// ruConvoySquad := ruConvoySquad diff oldId ;
8056: LD_ADDR_EXP 41
8060: PUSH
8061: LD_EXP 41
8065: PUSH
8066: LD_VAR 0 2
8070: DIFF
8071: ST_TO_ADDR
// if newId in ruConvoySquad then
8072: LD_VAR 0 1
8076: PUSH
8077: LD_EXP 41
8081: IN
8082: IFFALSE 8100
// ruConvoySquad := ruConvoySquad diff newId ;
8084: LD_ADDR_EXP 41
8088: PUSH
8089: LD_EXP 41
8093: PUSH
8094: LD_VAR 0 1
8098: DIFF
8099: ST_TO_ADDR
// end ; end_of_file
8100: PPOPN 4
8102: END
// export function Action ; var i , p , un , veh , tmp ; begin
8103: LD_INT 0
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
// InGameOn ;
8111: CALL_OW 8
// music_nat := 2 ;
8115: LD_ADDR_OWVAR 71
8119: PUSH
8120: LD_INT 2
8122: ST_TO_ADDR
// music_class := music_recon ;
8123: LD_ADDR_OWVAR 72
8127: PUSH
8128: LD_INT 3
8130: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8131: LD_INT 7
8133: PPUSH
8134: LD_INT 6
8136: PPUSH
8137: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8141: LD_INT 7
8143: PPUSH
8144: LD_INT 6
8146: PPUSH
8147: LD_INT 2
8149: PPUSH
8150: LD_INT 30
8152: NEG
8153: PPUSH
8154: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8158: LD_ADDR_VAR 0 6
8162: PUSH
8163: LD_EXP 21
8167: PUSH
8168: LD_EXP 22
8172: PUSH
8173: LD_EXP 23
8177: PUSH
8178: LD_EXP 24
8182: PUSH
8183: LD_EXP 25
8187: PUSH
8188: LD_EXP 26
8192: PUSH
8193: LD_EXP 28
8197: PUSH
8198: LD_EXP 33
8202: PUSH
8203: LD_EXP 27
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: ST_TO_ADDR
// tmp := tmp diff 0 ;
8219: LD_ADDR_VAR 0 6
8223: PUSH
8224: LD_VAR 0 6
8228: PUSH
8229: LD_INT 0
8231: DIFF
8232: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8233: LD_ADDR_VAR 0 6
8237: PUSH
8238: LD_VAR 0 6
8242: PPUSH
8243: LD_INT 3
8245: PPUSH
8246: CALL 70230 0 2
8250: ST_TO_ADDR
// for i in heikeVehicles do
8251: LD_ADDR_VAR 0 2
8255: PUSH
8256: LD_EXP 35
8260: PUSH
8261: FOR_IN
8262: IFFALSE 8461
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8264: LD_INT 5
8266: PPUSH
8267: LD_VAR 0 2
8271: PUSH
8272: LD_INT 5
8274: ARRAY
8275: PPUSH
8276: LD_VAR 0 2
8280: PUSH
8281: LD_INT 1
8283: ARRAY
8284: PPUSH
8285: LD_VAR 0 2
8289: PUSH
8290: LD_INT 2
8292: ARRAY
8293: PPUSH
8294: LD_VAR 0 2
8298: PUSH
8299: LD_INT 3
8301: ARRAY
8302: PPUSH
8303: LD_VAR 0 2
8307: PUSH
8308: LD_INT 4
8310: ARRAY
8311: PPUSH
8312: LD_INT 34
8314: PPUSH
8315: CALL 439 0 7
// veh := CreateVehicle ;
8319: LD_ADDR_VAR 0 5
8323: PUSH
8324: CALL_OW 45
8328: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8329: LD_VAR 0 2
8333: PUSH
8334: LD_INT 4
8336: ARRAY
8337: PUSH
8338: LD_INT 51
8340: PUSH
8341: LD_INT 32
8343: PUSH
8344: LD_INT 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: IN
8352: IFFALSE 8432
// begin if i [ 7 ] [ 1 ] then
8354: LD_VAR 0 2
8358: PUSH
8359: LD_INT 7
8361: ARRAY
8362: PUSH
8363: LD_INT 1
8365: ARRAY
8366: IFFALSE 8393
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8368: LD_VAR 0 5
8372: PPUSH
8373: LD_INT 1
8375: PPUSH
8376: LD_VAR 0 2
8380: PUSH
8381: LD_INT 7
8383: ARRAY
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PPUSH
8389: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 7
8400: ARRAY
8401: PUSH
8402: LD_INT 2
8404: ARRAY
8405: IFFALSE 8432
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8407: LD_VAR 0 5
8411: PPUSH
8412: LD_INT 2
8414: PPUSH
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 7
8422: ARRAY
8423: PUSH
8424: LD_INT 2
8426: ARRAY
8427: PPUSH
8428: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8432: LD_VAR 0 5
8436: PPUSH
8437: LD_INT 2
8439: PPUSH
8440: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_INT 4
8451: PPUSH
8452: LD_INT 0
8454: PPUSH
8455: CALL_OW 49
// end ;
8459: GO 8261
8461: POP
8462: POP
// if tmp then
8463: LD_VAR 0 6
8467: IFFALSE 8577
// begin p := 0 ;
8469: LD_ADDR_VAR 0 3
8473: PUSH
8474: LD_INT 0
8476: ST_TO_ADDR
// for i in tmp do
8477: LD_ADDR_VAR 0 2
8481: PUSH
8482: LD_VAR 0 6
8486: PUSH
8487: FOR_IN
8488: IFFALSE 8575
// begin p := p + 1 ;
8490: LD_ADDR_VAR 0 3
8494: PUSH
8495: LD_VAR 0 3
8499: PUSH
8500: LD_INT 1
8502: PLUS
8503: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8504: LD_VAR 0 2
8508: PPUSH
8509: LD_INT 5
8511: PPUSH
8512: LD_INT 0
8514: PPUSH
8515: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8519: LD_VAR 0 2
8523: PPUSH
8524: LD_INT 26
8526: PPUSH
8527: LD_INT 9
8529: PPUSH
8530: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8534: LD_VAR 0 3
8538: PUSH
8539: LD_EXP 35
8543: GREATEREQUAL
8544: PUSH
8545: LD_VAR 0 2
8549: PPUSH
8550: CALL_OW 257
8554: PUSH
8555: LD_INT 3
8557: EQUAL
8558: AND
8559: IFFALSE 8573
// SetClass ( i , 1 ) ;
8561: LD_VAR 0 2
8565: PPUSH
8566: LD_INT 1
8568: PPUSH
8569: CALL_OW 336
// end ;
8573: GO 8487
8575: POP
8576: POP
// end ; if heikeSecondSquad then
8577: LD_EXP 34
8581: IFFALSE 8695
// for i in heikeSecondSquad do
8583: LD_ADDR_VAR 0 2
8587: PUSH
8588: LD_EXP 34
8592: PUSH
8593: FOR_IN
8594: IFFALSE 8693
// begin p := p + 1 ;
8596: LD_ADDR_VAR 0 3
8600: PUSH
8601: LD_VAR 0 3
8605: PUSH
8606: LD_INT 1
8608: PLUS
8609: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8610: LD_VAR 0 2
8614: PPUSH
8615: LD_INT 6
8617: PPUSH
8618: LD_INT 0
8620: PPUSH
8621: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: LD_INT 26
8632: PPUSH
8633: LD_INT 9
8635: PPUSH
8636: CALL_OW 118
// ForceSleep ( i , true ) ;
8640: LD_VAR 0 2
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8652: LD_VAR 0 3
8656: PUSH
8657: LD_EXP 35
8661: GREATEREQUAL
8662: PUSH
8663: LD_VAR 0 2
8667: PPUSH
8668: CALL_OW 257
8672: PUSH
8673: LD_INT 3
8675: EQUAL
8676: AND
8677: IFFALSE 8691
// SetClass ( i , 1 ) ;
8679: LD_VAR 0 2
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 336
// end ;
8691: GO 8593
8693: POP
8694: POP
// if heikeApes then
8695: LD_EXP 36
8699: IFFALSE 8742
// for i in heikeApes do
8701: LD_ADDR_VAR 0 2
8705: PUSH
8706: LD_EXP 36
8710: PUSH
8711: FOR_IN
8712: IFFALSE 8740
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8714: LD_VAR 0 2
8718: PPUSH
8719: LD_INT 7
8721: PPUSH
8722: LD_INT 0
8724: PPUSH
8725: CALL_OW 49
// ComHold ( i ) ;
8729: LD_VAR 0 2
8733: PPUSH
8734: CALL_OW 140
// end ;
8738: GO 8711
8740: POP
8741: POP
// if Kurt then
8742: LD_EXP 32
8746: IFFALSE 8778
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8748: LD_EXP 32
8752: PPUSH
8753: LD_INT 8
8755: PPUSH
8756: LD_INT 0
8758: PPUSH
8759: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8763: LD_EXP 32
8767: PPUSH
8768: LD_INT 42
8770: PPUSH
8771: LD_INT 32
8773: PPUSH
8774: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8778: LD_INT 70
8780: PPUSH
8781: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8785: LD_EXP 21
8789: PPUSH
8790: LD_STRING DH-Start-1
8792: PPUSH
8793: CALL_OW 88
// if Givi then
8797: LD_EXP 22
8801: IFFALSE 9064
// begin Say ( Givi , DG-Start-2-5 ) ;
8803: LD_EXP 22
8807: PPUSH
8808: LD_STRING DG-Start-2-5
8810: PPUSH
8811: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8815: LD_EXP 21
8819: PPUSH
8820: LD_STRING DH-Start-3
8822: PPUSH
8823: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8827: LD_EXP 21
8831: PPUSH
8832: LD_STRING DH-Start-4
8834: PPUSH
8835: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8839: LD_EXP 22
8843: PPUSH
8844: LD_STRING DG-Start-5
8846: PPUSH
8847: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8851: LD_EXP 21
8855: PPUSH
8856: LD_STRING DH-Start-6
8858: PPUSH
8859: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8863: LD_EXP 22
8867: PPUSH
8868: LD_STRING DG-Start-7
8870: PPUSH
8871: CALL_OW 88
// if Mike then
8875: LD_EXP 23
8879: IFFALSE 9052
// begin Say ( Mike , DM-Start-8 ) ;
8881: LD_EXP 23
8885: PPUSH
8886: LD_STRING DM-Start-8
8888: PPUSH
8889: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8893: LD_EXP 23
8897: PPUSH
8898: LD_STRING DM-Start-9
8900: PPUSH
8901: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8905: LD_EXP 22
8909: PPUSH
8910: LD_STRING DG-Start-10
8912: PPUSH
8913: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8917: LD_EXP 22
8921: PPUSH
8922: LD_STRING DG-Start-11
8924: PPUSH
8925: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8929: LD_EXP 21
8933: PPUSH
8934: LD_STRING DH-Start-12
8936: PPUSH
8937: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8941: LD_EXP 22
8945: PPUSH
8946: LD_STRING DG-Start-13
8948: PPUSH
8949: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8953: LD_EXP 22
8957: PPUSH
8958: LD_STRING DG-Start-14
8960: PPUSH
8961: CALL_OW 88
// if Kaia then
8965: LD_EXP 26
8969: IFFALSE 9052
// begin Say ( Kaia , DK-Start-15 ) ;
8971: LD_EXP 26
8975: PPUSH
8976: LD_STRING DK-Start-15
8978: PPUSH
8979: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_STRING DK-Start-16
8990: PPUSH
8991: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8995: LD_EXP 26
8999: PPUSH
9000: LD_STRING DK-Start-17
9002: PPUSH
9003: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9007: LD_INT 10
9009: PPUSH
9010: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9014: LD_EXP 22
9018: PPUSH
9019: LD_EXP 26
9023: PPUSH
9024: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9028: LD_EXP 22
9032: PPUSH
9033: LD_STRING DG-Start-18
9035: PPUSH
9036: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9040: LD_EXP 26
9044: PPUSH
9045: LD_STRING DK-Start-19
9047: PPUSH
9048: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9052: LD_EXP 21
9056: PPUSH
9057: LD_STRING DH-Start-20
9059: PPUSH
9060: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9064: LD_INT 70
9066: PPUSH
9067: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9071: LD_EXP 29
9075: PPUSH
9076: LD_STRING DShar-Start-21
9078: PPUSH
9079: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9083: LD_EXP 21
9087: PPUSH
9088: LD_STRING DH-Start-22
9090: PPUSH
9091: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9095: LD_EXP 29
9099: PPUSH
9100: LD_STRING DShar-Start-23
9102: PPUSH
9103: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9107: LD_EXP 29
9111: PPUSH
9112: LD_STRING DShar-Start-24
9114: PPUSH
9115: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9119: LD_EXP 29
9123: PPUSH
9124: LD_STRING DShar-Start-25
9126: PPUSH
9127: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9131: LD_EXP 29
9135: PPUSH
9136: LD_STRING DShar-Start-26
9138: PPUSH
9139: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9143: LD_EXP 21
9147: PPUSH
9148: LD_STRING DH-Start-27
9150: PPUSH
9151: CALL_OW 88
// if Kaia then
9155: LD_EXP 26
9159: IFFALSE 9201
// begin ComTurnUnit ( Heike , Kaia ) ;
9161: LD_EXP 21
9165: PPUSH
9166: LD_EXP 26
9170: PPUSH
9171: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9175: LD_EXP 26
9179: PPUSH
9180: LD_STRING DK-Start-28
9182: PPUSH
9183: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9187: LD_EXP 21
9191: PPUSH
9192: LD_STRING DH-Start-29
9194: PPUSH
9195: CALL_OW 88
// end else
9199: GO 9213
// Say ( Heike , DH-Start-a-28 ) ;
9201: LD_EXP 21
9205: PPUSH
9206: LD_STRING DH-Start-a-28
9208: PPUSH
9209: CALL_OW 88
// if Givi then
9213: LD_EXP 22
9217: IFFALSE 9452
// begin ComTurnUnit ( Heike , Givi ) ;
9219: LD_EXP 21
9223: PPUSH
9224: LD_EXP 22
9228: PPUSH
9229: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9233: LD_EXP 22
9237: PPUSH
9238: LD_EXP 21
9242: PPUSH
9243: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9247: LD_EXP 21
9251: PPUSH
9252: LD_STRING DH-Start-30
9254: PPUSH
9255: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9259: LD_EXP 21
9263: PPUSH
9264: LD_STRING DH-Start-31
9266: PPUSH
9267: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9271: LD_EXP 22
9275: PPUSH
9276: LD_STRING DG-Start-32
9278: PPUSH
9279: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9283: LD_EXP 21
9287: PPUSH
9288: LD_STRING DH-Start-33
9290: PPUSH
9291: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9295: LD_EXP 22
9299: PPUSH
9300: LD_STRING DG-Start-34
9302: PPUSH
9303: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9307: LD_EXP 22
9311: PPUSH
9312: LD_STRING DG-Start-35
9314: PPUSH
9315: CALL_OW 88
// if Kurt and not dialogue_skipped then
9319: LD_EXP 32
9323: PUSH
9324: LD_OWVAR 59
9328: NOT
9329: AND
9330: IFFALSE 9361
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9332: LD_EXP 32
9336: PPUSH
9337: LD_INT 28
9339: PPUSH
9340: LD_INT 13
9342: PPUSH
9343: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9347: LD_EXP 32
9351: PPUSH
9352: LD_EXP 21
9356: PPUSH
9357: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9361: LD_EXP 22
9365: PPUSH
9366: LD_STRING DG-Start-36
9368: PPUSH
9369: CALL_OW 88
// if Kurt then
9373: LD_EXP 32
9377: IFFALSE 9450
// begin if not Givi then
9379: LD_EXP 22
9383: NOT
9384: IFFALSE 9400
// Say ( Kurt , DKs-Start-37-a ) else
9386: LD_EXP 32
9390: PPUSH
9391: LD_STRING DKs-Start-37-a
9393: PPUSH
9394: CALL_OW 88
9398: GO 9412
// Say ( Kurt , DKs-Start-37 ) ;
9400: LD_EXP 32
9404: PPUSH
9405: LD_STRING DKs-Start-37
9407: PPUSH
9408: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9412: LD_EXP 32
9416: PPUSH
9417: LD_STRING DKs-Start-38
9419: PPUSH
9420: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9424: LD_EXP 21
9428: PPUSH
9429: LD_EXP 32
9433: PPUSH
9434: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9438: LD_EXP 21
9442: PPUSH
9443: LD_STRING DH-Start-39
9445: PPUSH
9446: CALL_OW 88
// end ; end else
9450: GO 9481
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9452: LD_EXP 34
9456: PPUSH
9457: LD_STRING DArm-Start-a-37
9459: PPUSH
9460: LD_STRING DArf-Start-a-37
9462: PPUSH
9463: CALL 1198 0 3
9467: IFFALSE 9481
// Say ( Heike , DH-Start-39 ) ;
9469: LD_EXP 21
9473: PPUSH
9474: LD_STRING DH-Start-39
9476: PPUSH
9477: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9481: LD_INT 44
9483: PPUSH
9484: LD_INT 25
9486: PPUSH
9487: CALL_OW 428
9491: IFFALSE 9508
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9493: LD_INT 44
9495: PPUSH
9496: LD_INT 25
9498: PPUSH
9499: CALL_OW 428
9503: PPUSH
9504: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9508: LD_EXP 30
9512: PPUSH
9513: LD_INT 5
9515: PPUSH
9516: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9520: LD_EXP 30
9524: PPUSH
9525: LD_INT 44
9527: PPUSH
9528: LD_INT 25
9530: PPUSH
9531: LD_INT 0
9533: PPUSH
9534: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9538: LD_EXP 30
9542: PPUSH
9543: LD_INT 29
9545: PPUSH
9546: LD_INT 12
9548: PPUSH
9549: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9553: LD_INT 35
9555: PPUSH
9556: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9560: LD_OWVAR 59
9564: PUSH
9565: LD_EXP 21
9569: PPUSH
9570: LD_EXP 30
9574: PPUSH
9575: CALL_OW 296
9579: PUSH
9580: LD_INT 8
9582: LESS
9583: OR
9584: PUSH
9585: LD_EXP 30
9589: PPUSH
9590: LD_INT 26
9592: PPUSH
9593: LD_INT 9
9595: PPUSH
9596: CALL_OW 297
9600: PUSH
9601: LD_INT 6
9603: LESS
9604: OR
9605: IFFALSE 9553
// Say ( Olaf , DO-Scout-1 ) ;
9607: LD_EXP 30
9611: PPUSH
9612: LD_STRING DO-Scout-1
9614: PPUSH
9615: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9619: LD_EXP 30
9623: PPUSH
9624: LD_EXP 21
9628: PPUSH
9629: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_VAR 0 6
9642: PUSH
9643: LD_EXP 34
9647: UNION
9648: PUSH
9649: FOR_IN
9650: IFFALSE 9668
// ComTurnUnit ( i , Olaf ) ;
9652: LD_VAR 0 2
9656: PPUSH
9657: LD_EXP 30
9661: PPUSH
9662: CALL_OW 119
9666: GO 9649
9668: POP
9669: POP
// wait ( 0 0$0.3 ) ;
9670: LD_INT 10
9672: PPUSH
9673: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9677: LD_EXP 21
9681: PPUSH
9682: LD_EXP 30
9686: PPUSH
9687: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9691: LD_EXP 21
9695: PPUSH
9696: LD_EXP 30
9700: PPUSH
9701: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9705: LD_EXP 21
9709: PPUSH
9710: LD_STRING DH-Scout-2
9712: PPUSH
9713: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9717: LD_EXP 30
9721: PPUSH
9722: LD_STRING DO-Scout-3
9724: PPUSH
9725: CALL_OW 88
// if Mike and Givi then
9729: LD_EXP 23
9733: PUSH
9734: LD_EXP 22
9738: AND
9739: IFFALSE 9755
// Say ( Olaf , DO-Scout-4 ) else
9741: LD_EXP 30
9745: PPUSH
9746: LD_STRING DO-Scout-4
9748: PPUSH
9749: CALL_OW 88
9753: GO 9855
// begin if Mike then
9755: LD_EXP 23
9759: IFFALSE 9787
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9761: LD_EXP 30
9765: PPUSH
9766: LD_STRING DO-Scout-a-4
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9773: LD_EXP 21
9777: PPUSH
9778: LD_STRING DH-Scout-a-5
9780: PPUSH
9781: CALL_OW 88
// end else
9785: GO 9855
// if Givi then
9787: LD_EXP 22
9791: IFFALSE 9819
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9793: LD_EXP 30
9797: PPUSH
9798: LD_STRING DO-Scout-b-4
9800: PPUSH
9801: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9805: LD_EXP 21
9809: PPUSH
9810: LD_STRING DH-Scout-b-5
9812: PPUSH
9813: CALL_OW 88
// end else
9817: GO 9855
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9819: LD_EXP 30
9823: PPUSH
9824: LD_STRING DO-Scout-f-4
9826: PPUSH
9827: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9831: LD_EXP 21
9835: PPUSH
9836: LD_STRING DH-Scout-f-5
9838: PPUSH
9839: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9843: LD_EXP 30
9847: PPUSH
9848: LD_STRING DO-Scout-f-6
9850: PPUSH
9851: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9855: LD_EXP 21
9859: PPUSH
9860: LD_STRING DH-Scout-5
9862: PPUSH
9863: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9867: LD_EXP 30
9871: PPUSH
9872: LD_STRING DO-Scout-6
9874: PPUSH
9875: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-7
9886: PPUSH
9887: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9891: LD_EXP 21
9895: PPUSH
9896: LD_STRING DH-Scout-8
9898: PPUSH
9899: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9903: LD_EXP 21
9907: PPUSH
9908: LD_STRING DH-Scout-9
9910: PPUSH
9911: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9915: LD_EXP 30
9919: PPUSH
9920: LD_STRING DO-Scout-10
9922: PPUSH
9923: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9927: LD_EXP 30
9931: PPUSH
9932: LD_STRING DO-Scout-12
9934: PPUSH
9935: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9939: LD_EXP 30
9943: PPUSH
9944: LD_STRING DO-Scout-13
9946: PPUSH
9947: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9951: LD_EXP 30
9955: PPUSH
9956: LD_STRING DO-Scout-14
9958: PPUSH
9959: CALL_OW 88
// if Givi then
9963: LD_EXP 22
9967: IFFALSE 9993
// begin Say ( Givi , DG-Scout-15 ) ;
9969: LD_EXP 22
9973: PPUSH
9974: LD_STRING DG-Scout-15
9976: PPUSH
9977: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9981: LD_EXP 26
9985: PPUSH
9986: LD_STRING DK-Scout-16
9988: PPUSH
9989: CALL_OW 88
// end ; if not dialogue_skipped then
9993: LD_OWVAR 59
9997: NOT
9998: IFFALSE 10119
// begin async ;
10000: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10001: LD_EXP 30
10005: PPUSH
10006: LD_STRING DO-Scout-17
10008: PPUSH
10009: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10013: LD_INT 55
10015: PPUSH
10016: LD_INT 77
10018: PPUSH
10019: LD_INT 2
10021: PPUSH
10022: LD_INT 6
10024: NEG
10025: PPUSH
10026: CALL 1147 0 4
// wait ( 10 ) ;
10030: LD_INT 10
10032: PPUSH
10033: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10037: LD_INT 55
10039: PPUSH
10040: LD_INT 77
10042: PPUSH
10043: CALL_OW 84
// wait ( 0 0$10 ) ;
10047: LD_INT 350
10049: PPUSH
10050: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10054: LD_EXP 30
10058: PPUSH
10059: LD_STRING DO-Scout-18
10061: PPUSH
10062: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10066: LD_INT 204
10068: PPUSH
10069: LD_INT 107
10071: PPUSH
10072: LD_INT 2
10074: PPUSH
10075: LD_INT 12
10077: NEG
10078: PPUSH
10079: CALL 1147 0 4
// wait ( 10 ) ;
10083: LD_INT 10
10085: PPUSH
10086: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10090: LD_INT 204
10092: PPUSH
10093: LD_INT 107
10095: PPUSH
10096: CALL_OW 84
// wait ( 0 0$10 ) ;
10100: LD_INT 350
10102: PPUSH
10103: CALL_OW 67
// sync ;
10107: SYNC
// CenterNowOnUnits ( Heike ) ;
10108: LD_EXP 21
10112: PPUSH
10113: CALL_OW 87
// end else
10117: GO 10153
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10119: LD_INT 55
10121: PPUSH
10122: LD_INT 77
10124: PPUSH
10125: LD_INT 2
10127: PPUSH
10128: LD_INT 6
10130: NEG
10131: PPUSH
10132: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10136: LD_INT 204
10138: PPUSH
10139: LD_INT 107
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: LD_INT 12
10147: NEG
10148: PPUSH
10149: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10153: LD_EXP 30
10157: PPUSH
10158: LD_STRING DO-Scout-19
10160: PPUSH
10161: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10165: LD_EXP 30
10169: PPUSH
10170: LD_STRING DO-Scout-20
10172: PPUSH
10173: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10177: LD_EXP 21
10181: PPUSH
10182: LD_STRING DH-Scout-21
10184: PPUSH
10185: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10189: LD_EXP 21
10193: PPUSH
10194: LD_STRING DH-Scout-22
10196: PPUSH
10197: CALL_OW 88
// InGameOff ;
10201: CALL_OW 9
// if heikeSecondSquad then
10205: LD_EXP 34
10209: IFFALSE 10223
// ForceSleep ( heikeSecondSquad , false ) ;
10211: LD_EXP 34
10215: PPUSH
10216: LD_INT 0
10218: PPUSH
10219: CALL_OW 585
// if Givi then
10223: LD_EXP 22
10227: IFFALSE 10242
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10229: LD_INT 13
10231: PPUSH
10232: LD_INT 2
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10242: LD_STRING Road
10244: PPUSH
10245: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 22
10256: PUSH
10257: LD_INT 5
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 21
10266: PUSH
10267: LD_INT 2
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 69
10282: PUSH
10283: FOR_IN
10284: IFFALSE 10300
// SetSide ( i , 2 ) ;
10286: LD_VAR 0 2
10290: PPUSH
10291: LD_INT 2
10293: PPUSH
10294: CALL_OW 235
10298: GO 10283
10300: POP
10301: POP
// SaveForQuickRestart ;
10302: CALL_OW 22
// music_class := music_auto ;
10306: LD_ADDR_OWVAR 72
10310: PUSH
10311: LD_INT 0
10313: ST_TO_ADDR
// end ;
10314: LD_VAR 0 1
10318: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10319: LD_INT 2
10321: PPUSH
10322: LD_INT 9
10324: PPUSH
10325: CALL_OW 294
10329: IFFALSE 10694
10331: GO 10333
10333: DISABLE
// begin DialogueOn ;
10334: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10338: LD_INT 111
10340: PPUSH
10341: LD_INT 72
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 20
10349: NEG
10350: PPUSH
10351: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10355: LD_INT 111
10357: PPUSH
10358: LD_INT 72
10360: PPUSH
10361: LD_INT 2
10363: PPUSH
10364: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10368: LD_INT 111
10370: PPUSH
10371: LD_INT 72
10373: PPUSH
10374: CALL_OW 86
// if IsOk ( Kamil ) then
10378: LD_EXP 25
10382: PPUSH
10383: CALL_OW 302
10387: IFFALSE 10504
// begin Say ( Kamil , DKam-Cross-1 ) ;
10389: LD_EXP 25
10393: PPUSH
10394: LD_STRING DKam-Cross-1
10396: PPUSH
10397: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10401: LD_EXP 25
10405: PPUSH
10406: LD_STRING DKam-Cross-2
10408: PPUSH
10409: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10413: LD_EXP 25
10417: PPUSH
10418: LD_STRING DKam-Cross-3
10420: PPUSH
10421: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10425: LD_EXP 25
10429: PPUSH
10430: LD_STRING DKam-Cross-4
10432: PPUSH
10433: CALL_OW 88
// if IsOk ( Ibrahim ) then
10437: LD_EXP 24
10441: PPUSH
10442: CALL_OW 302
10446: IFFALSE 10502
// begin if ibrahimJoinedIn04 then
10448: LD_EXP 4
10452: IFFALSE 10466
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10454: LD_EXP 24
10458: PPUSH
10459: LD_STRING DI-Cross-b-5
10461: PPUSH
10462: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10466: LD_EXP 24
10470: PPUSH
10471: LD_STRING DI-Cross-b-6
10473: PPUSH
10474: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10478: LD_EXP 24
10482: PPUSH
10483: LD_STRING DI-Cross-b-7
10485: PPUSH
10486: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10490: LD_EXP 25
10494: PPUSH
10495: LD_STRING DKam-Cross-8
10497: PPUSH
10498: CALL_OW 88
// end ; end else
10502: GO 10662
// if IsOk ( Sophia ) then
10504: LD_EXP 27
10508: PPUSH
10509: CALL_OW 302
10513: IFFALSE 10630
// begin Say ( Sophia , DS-Cross-1 ) ;
10515: LD_EXP 27
10519: PPUSH
10520: LD_STRING DS-Cross-1
10522: PPUSH
10523: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10527: LD_EXP 27
10531: PPUSH
10532: LD_STRING DS-Cross-2
10534: PPUSH
10535: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_STRING DS-Cross-3
10546: PPUSH
10547: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10551: LD_EXP 27
10555: PPUSH
10556: LD_STRING DS-Cross-4
10558: PPUSH
10559: CALL_OW 88
// if IsOk ( Ibrahim ) then
10563: LD_EXP 24
10567: PPUSH
10568: CALL_OW 302
10572: IFFALSE 10628
// begin if ibrahimJoinedIn04 then
10574: LD_EXP 4
10578: IFFALSE 10592
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10580: LD_EXP 24
10584: PPUSH
10585: LD_STRING DI-Cross-b-5
10587: PPUSH
10588: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10592: LD_EXP 24
10596: PPUSH
10597: LD_STRING DI-Cross-b-6
10599: PPUSH
10600: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10604: LD_EXP 24
10608: PPUSH
10609: LD_STRING DI-Cross-b-7
10611: PPUSH
10612: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10616: LD_EXP 27
10620: PPUSH
10621: LD_STRING DS-Cross-8
10623: PPUSH
10624: CALL_OW 88
// end ; end else
10628: GO 10662
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10630: LD_EXP 34
10634: PPUSH
10635: LD_INT 50
10637: PUSH
10638: EMPTY
10639: LIST
10640: PPUSH
10641: CALL_OW 72
10645: IFFALSE 10662
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10647: LD_EXP 34
10651: PPUSH
10652: LD_STRING DArm-Cross-c-1
10654: PPUSH
10655: LD_STRING DArf-Cross-c-1
10657: PPUSH
10658: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10662: LD_INT 85
10664: PPUSH
10665: LD_INT 2
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 322
// DialogueOff ;
10675: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10679: LD_STRING Crane
10681: PPUSH
10682: CALL_OW 337
// spottedCrossRoad := true ;
10686: LD_ADDR_EXP 8
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// end ;
10694: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10695: LD_INT 22
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: LD_INT 30
10710: PUSH
10711: LD_INT 0
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 30
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PPUSH
10737: CALL_OW 69
10741: PUSH
10742: LD_EXP 26
10746: PPUSH
10747: CALL_OW 302
10751: PUSH
10752: LD_EXP 34
10756: OR
10757: AND
10758: IFFALSE 10970
10760: GO 10762
10762: DISABLE
// begin DialogueOn ;
10763: CALL_OW 6
// if Kaia then
10767: LD_EXP 26
10771: IFFALSE 10784
// CenterNowOnUnits ( Kaia ) else
10773: LD_EXP 26
10777: PPUSH
10778: CALL_OW 87
10782: GO 10793
// CenterNowOnUnits ( Heike ) ;
10784: LD_EXP 21
10788: PPUSH
10789: CALL_OW 87
// if IsOk ( Kaia ) then
10793: LD_EXP 26
10797: PPUSH
10798: CALL_OW 302
10802: IFFALSE 10818
// Say ( Kaia , DK-Cam-1 ) else
10804: LD_EXP 26
10808: PPUSH
10809: LD_STRING DK-Cam-1
10811: PPUSH
10812: CALL_OW 88
10816: GO 10833
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10818: LD_EXP 34
10822: PPUSH
10823: LD_STRING DArm-Cam-1
10825: PPUSH
10826: LD_STRING DArf-Cam-1
10828: PPUSH
10829: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
10833: LD_EXP 21
10837: PPUSH
10838: LD_STRING DH-Cam-2
10840: PPUSH
10841: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10845: LD_EXP 21
10849: PPUSH
10850: LD_STRING DH-Cam-3
10852: PPUSH
10853: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10857: LD_EXP 21
10861: PPUSH
10862: LD_STRING DH-Cam-4
10864: PPUSH
10865: CALL_OW 88
// if IsOk ( Kaia ) then
10869: LD_EXP 26
10873: PPUSH
10874: CALL_OW 302
10878: IFFALSE 10894
// Say ( Kaia , DK-Cam-5 ) else
10880: LD_EXP 26
10884: PPUSH
10885: LD_STRING DK-Cam-5
10887: PPUSH
10888: CALL_OW 88
10892: GO 10909
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10894: LD_EXP 34
10898: PPUSH
10899: LD_STRING DArm-Cam-5
10901: PPUSH
10902: LD_STRING DArf-Cam-5
10904: PPUSH
10905: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10909: LD_EXP 30
10913: PPUSH
10914: LD_STRING DO-Cam-6
10916: PPUSH
10917: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10921: LD_EXP 30
10925: PPUSH
10926: LD_STRING DO-Cam-7
10928: PPUSH
10929: CALL_OW 88
// DialogueOff ;
10933: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10937: LD_STRING Radar
10939: PPUSH
10940: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10944: LD_INT 6
10946: PPUSH
10947: LD_INT 2
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10957: LD_INT 20
10959: PPUSH
10960: LD_INT 2
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 324
// end ;
10970: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10971: LD_INT 22
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 2
10983: PUSH
10984: LD_INT 34
10986: PUSH
10987: LD_INT 30
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 35
10996: PUSH
10997: LD_INT 30
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 69
11017: IFFALSE 11029
11019: GO 11021
11021: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11022: LD_STRING RadarDone
11024: PPUSH
11025: CALL_OW 337
11029: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11030: LD_INT 22
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 34
11042: PUSH
11043: LD_INT 88
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: IFFALSE 11070
11060: GO 11062
11062: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11063: LD_STRING CraneDone
11065: PPUSH
11066: CALL_OW 337
11070: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11071: LD_EXP 30
11075: PPUSH
11076: CALL_OW 302
11080: PUSH
11081: LD_EXP 33
11085: PPUSH
11086: CALL_OW 302
11090: AND
11091: PUSH
11092: LD_INT 6
11094: PPUSH
11095: LD_INT 2
11097: PPUSH
11098: CALL_OW 321
11102: PUSH
11103: LD_INT 2
11105: EQUAL
11106: AND
11107: PUSH
11108: LD_EXP 33
11112: PPUSH
11113: LD_EXP 21
11117: PPUSH
11118: CALL_OW 296
11122: PUSH
11123: LD_INT 10
11125: LESS
11126: PUSH
11127: LD_EXP 33
11131: PPUSH
11132: CALL_OW 310
11136: OR
11137: AND
11138: IFFALSE 11352
11140: GO 11142
11142: DISABLE
// begin DialogueOn ;
11143: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11147: LD_EXP 33
11151: PPUSH
11152: LD_STRING DA-RC-1
11154: PPUSH
11155: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11159: LD_EXP 33
11163: PPUSH
11164: LD_STRING DA-RC-2
11166: PPUSH
11167: CALL_OW 88
// if IsOk ( Kaia ) then
11171: LD_EXP 26
11175: PPUSH
11176: CALL_OW 302
11180: IFFALSE 11254
// begin Say ( Kaia , DK-RC-3 ) ;
11182: LD_EXP 26
11186: PPUSH
11187: LD_STRING DK-RC-3
11189: PPUSH
11190: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11194: LD_EXP 33
11198: PPUSH
11199: LD_STRING DA-RC-4
11201: PPUSH
11202: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11206: LD_EXP 26
11210: PPUSH
11211: LD_STRING DK-RC-5
11213: PPUSH
11214: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11218: LD_EXP 33
11222: PPUSH
11223: LD_STRING DA-RC-6
11225: PPUSH
11226: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11230: LD_EXP 26
11234: PPUSH
11235: LD_STRING DK-RC-7
11237: PPUSH
11238: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11242: LD_EXP 33
11246: PPUSH
11247: LD_STRING DA-RC-8
11249: PPUSH
11250: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11254: LD_EXP 21
11258: PPUSH
11259: LD_STRING DH-RC-9
11261: PPUSH
11262: CALL_OW 88
// if IsOk ( Markov ) then
11266: LD_EXP 28
11270: PPUSH
11271: CALL_OW 302
11275: IFFALSE 11303
// begin Say ( Markov , DMar-RC-10 ) ;
11277: LD_EXP 28
11281: PPUSH
11282: LD_STRING DMar-RC-10
11284: PPUSH
11285: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11289: LD_EXP 28
11293: PPUSH
11294: LD_STRING DMar-RC-11
11296: PPUSH
11297: CALL_OW 88
// end else
11301: GO 11315
// begin Say ( Olaf , DO-RC-a-10 ) ;
11303: LD_EXP 30
11307: PPUSH
11308: LD_STRING DO-RC-a-10
11310: PPUSH
11311: CALL_OW 88
// end ; DialogueOff ;
11315: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11319: LD_STRING RemoteControl
11321: PPUSH
11322: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11326: LD_INT 15
11328: PPUSH
11329: LD_INT 2
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11339: LD_INT 22
11341: PPUSH
11342: LD_INT 2
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 324
// end ;
11352: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11353: LD_INT 12
11355: PPUSH
11356: LD_INT 22
11358: PUSH
11359: LD_INT 2
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 70
11370: IFFALSE 11737
11372: GO 11374
11374: DISABLE
11375: LD_INT 0
11377: PPUSH
// begin PrepareWestBase ;
11378: CALL 3916 0 0
// westBaseSpotted := true ;
11382: LD_ADDR_EXP 5
11386: PUSH
11387: LD_INT 1
11389: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11390: LD_INT 70
11392: PPUSH
11393: CALL_OW 67
// InGameOn ;
11397: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11401: LD_INT 56
11403: PPUSH
11404: LD_INT 77
11406: PPUSH
11407: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11411: LD_INT 56
11413: PPUSH
11414: LD_INT 77
11416: PPUSH
11417: LD_INT 2
11419: PPUSH
11420: LD_INT 12
11422: NEG
11423: PPUSH
11424: CALL_OW 330
// wait ( 0 0$2 ) ;
11428: LD_INT 70
11430: PPUSH
11431: CALL_OW 67
// DialogueOn ;
11435: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11439: LD_EXP 21
11443: PPUSH
11444: LD_STRING DH-Rbase-1
11446: PPUSH
11447: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11451: LD_EXP 26
11455: PPUSH
11456: LD_STRING DK-Rbase-2
11458: PPUSH
11459: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11463: LD_EXP 26
11467: PPUSH
11468: LD_STRING DK-Rbase-3
11470: PPUSH
11471: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11475: LD_EXP 26
11479: PPUSH
11480: LD_STRING DK-Rbase-4
11482: PPUSH
11483: CALL_OW 88
// DialogueOff ;
11487: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11491: LD_INT 56
11493: PPUSH
11494: LD_INT 77
11496: PPUSH
11497: LD_INT 2
11499: PPUSH
11500: CALL_OW 331
// InGameOff ;
11504: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11508: LD_INT 35
11510: PPUSH
11511: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11515: LD_EXP 42
11519: NOT
11520: PUSH
11521: LD_EXP 43
11525: NOT
11526: AND
11527: IFFALSE 11508
// wait ( 0 0$2 ) ;
11529: LD_INT 70
11531: PPUSH
11532: CALL_OW 67
// if IsOk ( Kaia ) then
11536: LD_EXP 26
11540: PPUSH
11541: CALL_OW 302
11545: IFFALSE 11660
// begin DialogueOn ;
11547: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11551: LD_INT 56
11553: PPUSH
11554: LD_INT 81
11556: PPUSH
11557: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11561: LD_EXP 26
11565: PPUSH
11566: LD_STRING DK-Rbase-5
11568: PPUSH
11569: CALL_OW 88
// if IsOk ( Givi ) then
11573: LD_EXP 22
11577: PPUSH
11578: CALL_OW 302
11582: IFFALSE 11656
// begin Say ( Givi , DG-Rbase-6 ) ;
11584: LD_EXP 22
11588: PPUSH
11589: LD_STRING DG-Rbase-6
11591: PPUSH
11592: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11596: LD_EXP 22
11600: PPUSH
11601: LD_STRING DG-Rbase-7
11603: PPUSH
11604: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11608: LD_EXP 26
11612: PPUSH
11613: LD_STRING DK-Rbase-8
11615: PPUSH
11616: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11620: LD_EXP 22
11624: PPUSH
11625: LD_STRING DG-Rbase-9
11627: PPUSH
11628: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11632: LD_EXP 22
11636: PPUSH
11637: LD_STRING DG-Rbase-10
11639: PPUSH
11640: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11644: LD_EXP 26
11648: PPUSH
11649: LD_STRING DK-Rbase-11
11651: PPUSH
11652: CALL_OW 88
// end ; DialogueOff ;
11656: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11660: LD_ADDR_VAR 0 1
11664: PUSH
11665: LD_INT 12
11667: PPUSH
11668: LD_INT 22
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 21
11680: PUSH
11681: LD_INT 3
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PPUSH
11692: CALL_OW 70
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11714
// SetSide ( i , 2 ) ;
11700: LD_VAR 0 1
11704: PPUSH
11705: LD_INT 2
11707: PPUSH
11708: CALL_OW 235
11712: GO 11697
11714: POP
11715: POP
// westBaseCaptured := true ;
11716: LD_ADDR_EXP 9
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11724: LD_INT 0
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: CALL_OW 324
// end ;
11737: PPOPN 1
11739: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11740: LD_EXP 38
11744: NOT
11745: PUSH
11746: LD_INT 10
11748: PPUSH
11749: CALL_OW 255
11753: PUSH
11754: LD_INT 2
11756: EQUAL
11757: OR
11758: IFFALSE 11895
11760: GO 11762
11762: DISABLE
// begin DialogueOn ;
11763: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11767: LD_EXP 21
11771: PPUSH
11772: LD_STRING DH-Goal-1
11774: PPUSH
11775: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11779: LD_EXP 29
11783: PPUSH
11784: LD_STRING DShar-Goal-2
11786: PPUSH
11787: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11791: LD_EXP 21
11795: PPUSH
11796: LD_STRING DH-Goal-3
11798: PPUSH
11799: CALL_OW 88
// if reinforcementsAllowed then
11803: LD_EXP 14
11807: IFFALSE 11833
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11809: LD_EXP 29
11813: PPUSH
11814: LD_STRING DShar-Goal-4
11816: PPUSH
11817: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11821: LD_EXP 21
11825: PPUSH
11826: LD_STRING DH-Goal-5
11828: PPUSH
11829: CALL_OW 88
// end ; DialogueOff ;
11833: CALL_OW 7
// eastBaseCaptured := true ;
11837: LD_ADDR_EXP 10
11841: PUSH
11842: LD_INT 1
11844: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11845: LD_STRING BaseCaptured
11847: PPUSH
11848: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11852: LD_INT 10
11854: PPUSH
11855: LD_INT 2
11857: PPUSH
11858: CALL_OW 235
// if not reinforcementsAllowed then
11862: LD_EXP 14
11866: NOT
11867: IFFALSE 11871
// exit ;
11869: GO 11895
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11871: LD_INT 21000
11873: PUSH
11874: LD_INT 1050
11876: NEG
11877: PPUSH
11878: LD_INT 1050
11880: PPUSH
11881: CALL_OW 12
11885: PLUS
11886: PPUSH
11887: CALL_OW 67
// PrepareReinforcements ;
11891: CALL 2174 0 0
// end ;
11895: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11896: LD_INT 22
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 13
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PPUSH
11920: CALL_OW 69
11924: IFFALSE 11941
11926: GO 11928
11928: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11929: LD_EXP 22
11933: PPUSH
11934: LD_STRING DG-Lab-1
11936: PPUSH
11937: CALL_OW 88
// end ;
11941: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11942: LD_INT 5
11944: PPUSH
11945: LD_INT 2
11947: PPUSH
11948: CALL_OW 321
11952: PUSH
11953: LD_INT 2
11955: EQUAL
11956: PUSH
11957: LD_EXP 22
11961: PPUSH
11962: CALL_OW 302
11966: AND
11967: IFFALSE 12028
11969: GO 11971
11971: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11972: LD_EXP 22
11976: PPUSH
11977: LD_STRING DG-Stim-1
11979: PPUSH
11980: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11984: LD_EXP 21
11988: PPUSH
11989: LD_STRING DH-Stim-2
11991: PPUSH
11992: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11996: LD_EXP 22
12000: PPUSH
12001: LD_STRING DG-Stim-3
12003: PPUSH
12004: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12008: LD_EXP 21
12012: PPUSH
12013: LD_STRING DH-Stim-4
12015: PPUSH
12016: CALL_OW 88
// drugsResearched := true ;
12020: LD_ADDR_EXP 11
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// end ;
12028: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12029: LD_EXP 11
12033: IFFALSE 12345
12035: GO 12037
12037: DISABLE
12038: LD_INT 0
12040: PPUSH
12041: PPUSH
12042: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12043: LD_ADDR_VAR 0 2
12047: PUSH
12048: LD_EXP 21
12052: PUSH
12053: LD_EXP 22
12057: PUSH
12058: LD_EXP 30
12062: PUSH
12063: LD_EXP 28
12067: PUSH
12068: LD_EXP 26
12072: PUSH
12073: LD_EXP 27
12077: PUSH
12078: LD_EXP 32
12082: PUSH
12083: LD_EXP 25
12087: PUSH
12088: LD_EXP 23
12092: PUSH
12093: LD_EXP 24
12097: PUSH
12098: LD_EXP 33
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12116: LD_ADDR_VAR 0 3
12120: PUSH
12121: LD_STRING H
12123: PUSH
12124: LD_STRING G
12126: PUSH
12127: LD_STRING O
12129: PUSH
12130: LD_STRING Mar
12132: PUSH
12133: LD_STRING K
12135: PUSH
12136: LD_STRING S
12138: PUSH
12139: LD_STRING Ks
12141: PUSH
12142: LD_STRING Kam
12144: PUSH
12145: LD_STRING M
12147: PUSH
12148: LD_STRING I
12150: PUSH
12151: LD_STRING A
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12167: LD_INT 35
12169: PPUSH
12170: CALL_OW 67
// for i := tmp downto 1 do
12174: LD_ADDR_VAR 0 1
12178: PUSH
12179: DOUBLE
12180: LD_VAR 0 2
12184: INC
12185: ST_TO_ADDR
12186: LD_INT 1
12188: PUSH
12189: FOR_DOWNTO
12190: IFFALSE 12336
// if GetLives ( tmp [ i ] ) < 250 then
12192: LD_VAR 0 2
12196: PUSH
12197: LD_VAR 0 1
12201: ARRAY
12202: PPUSH
12203: CALL_OW 256
12207: PUSH
12208: LD_INT 250
12210: LESS
12211: IFFALSE 12334
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12213: LD_ADDR_EXP 19
12217: PUSH
12218: LD_EXP 19
12222: PUSH
12223: LD_INT 1
12225: PLUS
12226: ST_TO_ADDR
// DialogueOn ;
12227: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12231: LD_VAR 0 2
12235: PUSH
12236: LD_VAR 0 1
12240: ARRAY
12241: PPUSH
12242: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12246: LD_VAR 0 2
12250: PUSH
12251: LD_VAR 0 1
12255: ARRAY
12256: PPUSH
12257: LD_STRING D
12259: PUSH
12260: LD_VAR 0 3
12264: PUSH
12265: LD_VAR 0 1
12269: ARRAY
12270: STR
12271: PUSH
12272: LD_STRING -Stim-a-1
12274: STR
12275: PPUSH
12276: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: LD_VAR 0 2
12289: PPUSH
12290: LD_VAR 0 1
12294: PPUSH
12295: CALL_OW 3
12299: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12300: LD_ADDR_VAR 0 3
12304: PUSH
12305: LD_VAR 0 3
12309: PPUSH
12310: LD_VAR 0 1
12314: PPUSH
12315: CALL_OW 3
12319: ST_TO_ADDR
// drugsTested := true ;
12320: LD_ADDR_EXP 6
12324: PUSH
12325: LD_INT 1
12327: ST_TO_ADDR
// DialogueOff ;
12328: CALL_OW 7
// break ;
12332: GO 12336
// end ;
12334: GO 12189
12336: POP
12337: POP
// until not tmp ;
12338: LD_VAR 0 2
12342: NOT
12343: IFFALSE 12167
// end ;
12345: PPOPN 3
12347: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12348: LD_INT 22
12350: PUSH
12351: LD_INT 2
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 34
12360: PUSH
12361: LD_INT 31
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_INT 2
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 33
12389: PUSH
12390: LD_INT 2
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 69
12405: AND
12406: IFFALSE 12419
12408: GO 12410
12410: DISABLE
// remoteControlConstructed := true ;
12411: LD_ADDR_EXP 12
12415: PUSH
12416: LD_INT 1
12418: ST_TO_ADDR
12419: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12420: LD_EXP 12
12424: IFFALSE 12724
12426: GO 12428
12428: DISABLE
12429: LD_INT 0
12431: PPUSH
12432: PPUSH
12433: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12434: LD_ADDR_VAR 0 2
12438: PUSH
12439: LD_EXP 21
12443: PUSH
12444: LD_EXP 22
12448: PUSH
12449: LD_EXP 30
12453: PUSH
12454: LD_EXP 28
12458: PUSH
12459: LD_EXP 26
12463: PUSH
12464: LD_EXP 27
12468: PUSH
12469: LD_EXP 32
12473: PUSH
12474: LD_EXP 25
12478: PUSH
12479: LD_EXP 23
12483: PUSH
12484: LD_EXP 24
12488: PUSH
12489: LD_EXP 33
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12507: LD_ADDR_VAR 0 3
12511: PUSH
12512: LD_STRING H
12514: PUSH
12515: LD_STRING G
12517: PUSH
12518: LD_STRING O
12520: PUSH
12521: LD_STRING Mar
12523: PUSH
12524: LD_STRING K
12526: PUSH
12527: LD_STRING S
12529: PUSH
12530: LD_STRING Ks
12532: PUSH
12533: LD_STRING Kam
12535: PUSH
12536: LD_STRING M
12538: PUSH
12539: LD_STRING I
12541: PUSH
12542: LD_STRING A
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12558: LD_INT 35
12560: PPUSH
12561: CALL_OW 67
// for i := tmp downto 1 do
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: DOUBLE
12571: LD_VAR 0 2
12575: INC
12576: ST_TO_ADDR
12577: LD_INT 1
12579: PUSH
12580: FOR_DOWNTO
12581: IFFALSE 12715
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12583: LD_VAR 0 2
12587: PUSH
12588: LD_VAR 0 1
12592: ARRAY
12593: PPUSH
12594: CALL_OW 257
12598: PUSH
12599: LD_INT 3
12601: EQUAL
12602: PUSH
12603: LD_VAR 0 2
12607: PUSH
12608: LD_VAR 0 1
12612: ARRAY
12613: PPUSH
12614: CALL_OW 432
12618: AND
12619: IFFALSE 12713
// begin DialogueOn ;
12621: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12625: LD_VAR 0 2
12629: PUSH
12630: LD_VAR 0 1
12634: ARRAY
12635: PPUSH
12636: LD_STRING D
12638: PUSH
12639: LD_VAR 0 3
12643: PUSH
12644: LD_VAR 0 1
12648: ARRAY
12649: STR
12650: PUSH
12651: LD_STRING -RC-a-1
12653: STR
12654: PPUSH
12655: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12659: LD_ADDR_VAR 0 2
12663: PUSH
12664: LD_VAR 0 2
12668: PPUSH
12669: LD_VAR 0 1
12673: PPUSH
12674: CALL_OW 3
12678: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12679: LD_ADDR_VAR 0 3
12683: PUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 3
12698: ST_TO_ADDR
// DialogueOff ;
12699: CALL_OW 7
// remoteControlTested := true ;
12703: LD_ADDR_EXP 7
12707: PUSH
12708: LD_INT 1
12710: ST_TO_ADDR
// break ;
12711: GO 12715
// end ;
12713: GO 12580
12715: POP
12716: POP
// until not tmp ;
12717: LD_VAR 0 2
12721: NOT
12722: IFFALSE 12558
// end ;
12724: PPOPN 3
12726: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12727: LD_EXP 7
12731: PUSH
12732: LD_EXP 28
12736: PPUSH
12737: CALL_OW 302
12741: AND
12742: IFFALSE 12771
12744: GO 12746
12746: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12747: LD_EXP 28
12751: PPUSH
12752: LD_STRING DMar-RC-a-2
12754: PPUSH
12755: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12759: LD_EXP 28
12763: PPUSH
12764: LD_STRING DMar-RC-a-3
12766: PPUSH
12767: CALL_OW 88
// end ;
12771: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12772: LD_EXP 14
12776: PUSH
12777: LD_EXP 21
12781: PPUSH
12782: LD_EXP 33
12786: PPUSH
12787: CALL_OW 296
12791: PUSH
12792: LD_INT 8
12794: LESS
12795: AND
12796: PUSH
12797: LD_INT 2
12799: PPUSH
12800: CALL_OW 463
12804: NOT
12805: AND
12806: PUSH
12807: LD_EXP 33
12811: PPUSH
12812: CALL_OW 302
12816: AND
12817: PUSH
12818: LD_EXP 21
12822: PPUSH
12823: CALL_OW 302
12827: AND
12828: IFFALSE 13006
12830: GO 12832
12832: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12833: LD_EXP 33
12837: PPUSH
12838: CALL_OW 310
12842: NOT
12843: IFFALSE 12859
// ComTurnUnit ( Aviradze , Heike ) ;
12845: LD_EXP 33
12849: PPUSH
12850: LD_EXP 21
12854: PPUSH
12855: CALL_OW 119
// if not IsInUnit ( Heike ) then
12859: LD_EXP 21
12863: PPUSH
12864: CALL_OW 310
12868: NOT
12869: IFFALSE 12885
// ComTurnUnit ( Heike , Aviradze ) ;
12871: LD_EXP 21
12875: PPUSH
12876: LD_EXP 33
12880: PPUSH
12881: CALL_OW 119
// wait ( 0 0$1 ) ;
12885: LD_INT 35
12887: PPUSH
12888: CALL_OW 67
// DialogueOn ;
12892: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12896: LD_EXP 33
12900: PPUSH
12901: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12905: LD_EXP 21
12909: PPUSH
12910: LD_STRING DH-Beria-1
12912: PPUSH
12913: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12917: LD_EXP 33
12921: PPUSH
12922: LD_STRING DA-Beria-2
12924: PPUSH
12925: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12929: LD_EXP 21
12933: PPUSH
12934: LD_STRING DH-Beria-3
12936: PPUSH
12937: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12941: LD_EXP 33
12945: PPUSH
12946: LD_STRING DA-Beria-4
12948: PPUSH
12949: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12953: LD_EXP 33
12957: PPUSH
12958: LD_STRING DA-Beria-5
12960: PPUSH
12961: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12965: LD_EXP 33
12969: PPUSH
12970: LD_STRING DA-Beria-6
12972: PPUSH
12973: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12977: LD_EXP 21
12981: PPUSH
12982: LD_STRING DA-Beria-7
12984: PPUSH
12985: CALL_OW 88
// DialogueOff ;
12989: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12993: LD_INT 52
12995: PPUSH
12996: LD_INT 2
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: CALL_OW 322
// end ;
13006: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13007: LD_EXP 26
13011: PPUSH
13012: CALL_OW 300
13016: PUSH
13017: LD_EXP 26
13021: PPUSH
13022: CALL_OW 256
13026: PUSH
13027: LD_INT 10
13029: LESS
13030: AND
13031: IFFALSE 13068
13033: GO 13035
13035: DISABLE
// begin DialogueOn ;
13036: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13040: LD_EXP 26
13044: PPUSH
13045: LD_STRING DK-Kdeath-1
13047: PPUSH
13048: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13052: LD_EXP 21
13056: PPUSH
13057: LD_STRING DH-Kdeath-2
13059: PPUSH
13060: CALL_OW 88
// DialogueOff ;
13064: CALL_OW 7
// end ;
13068: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13069: LD_INT 2
13071: PPUSH
13072: LD_EXP 39
13076: PPUSH
13077: CALL 1298 0 2
13081: IFFALSE 13098
13083: GO 13085
13085: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13086: LD_EXP 21
13090: PPUSH
13091: LD_STRING DH-Obj-1
13093: PPUSH
13094: CALL_OW 88
13098: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13099: LD_INT 2
13101: PPUSH
13102: LD_EXP 40
13106: PPUSH
13107: CALL 1298 0 2
13111: IFFALSE 13128
13113: GO 13115
13115: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13116: LD_EXP 21
13120: PPUSH
13121: LD_STRING DH-Obj-a-1
13123: PPUSH
13124: CALL_OW 88
13128: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 , 5 5$30 ] [ Difficulty ] do
13129: LD_EXP 10
13133: PUSH
13134: LD_OWVAR 1
13138: PUSH
13139: LD_INT 14700
13141: PUSH
13142: LD_INT 13650
13144: PUSH
13145: LD_INT 12600
13147: PUSH
13148: LD_INT 11550
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: LD_OWVAR 67
13161: ARRAY
13162: GREATEREQUAL
13163: OR
13164: IFFALSE 13192
13166: GO 13168
13168: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13169: LD_INT 4200
13171: PPUSH
13172: LD_INT 5250
13174: PPUSH
13175: CALL_OW 12
13179: PPUSH
13180: CALL_OW 67
// convoyStarted := true ;
13184: LD_ADDR_EXP 17
13188: PUSH
13189: LD_INT 1
13191: ST_TO_ADDR
// end ;
13192: END
// every 0 0$1 trigger convoyStarted do
13193: LD_EXP 17
13197: IFFALSE 13281
13199: GO 13201
13201: DISABLE
// begin DialogueOn ;
13202: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13206: LD_EXP 29
13210: PPUSH
13211: LD_STRING DShar-Convoy-1
13213: PPUSH
13214: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13218: LD_EXP 21
13222: PPUSH
13223: LD_STRING DH-Convoy-2
13225: PPUSH
13226: CALL_OW 88
// DialogueOff ;
13230: CALL_OW 7
// PrepareConvoy ;
13234: CALL 4563 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13238: LD_INT 5250
13240: PPUSH
13241: LD_INT 11550
13243: PPUSH
13244: CALL_OW 12
13248: PPUSH
13249: CALL_OW 67
// PrepareConvoy ;
13253: CALL 4563 0 0
// convoyCounter := convoyCounter - 1 ;
13257: LD_ADDR_EXP 16
13261: PUSH
13262: LD_EXP 16
13266: PUSH
13267: LD_INT 1
13269: MINUS
13270: ST_TO_ADDR
// until convoyCounter <= 0 ;
13271: LD_EXP 16
13275: PUSH
13276: LD_INT 0
13278: LESSEQUAL
13279: IFFALSE 13238
// end ;
13281: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13282: LD_EXP 15
13286: PUSH
13287: LD_INT 10
13289: GREATEREQUAL
13290: IFFALSE 13307
13292: GO 13294
13294: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13295: LD_EXP 31
13299: PPUSH
13300: LD_STRING DOm-Fail-1
13302: PPUSH
13303: CALL_OW 94
13307: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13308: LD_EXP 39
13312: NOT
13313: PUSH
13314: LD_EXP 40
13318: NOT
13319: AND
13320: IFFALSE 13332
13322: GO 13324
13324: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13325: LD_STRING RaiderDone
13327: PPUSH
13328: CALL_OW 337
13332: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13333: LD_INT 22
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 33
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL_OW 69
13361: PUSH
13362: LD_INT 3
13364: GREATEREQUAL
13365: PUSH
13366: LD_INT 22
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 34
13378: PUSH
13379: LD_INT 31
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PPUSH
13390: CALL_OW 69
13394: PUSH
13395: LD_INT 2
13397: GREATEREQUAL
13398: AND
13399: IFFALSE 13411
13401: GO 13403
13403: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13404: LD_STRING RemoteControlDone
13406: PPUSH
13407: CALL_OW 337
13411: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13412: LD_EXP 16
13416: PUSH
13417: LD_INT 1
13419: LESS
13420: PUSH
13421: LD_EXP 41
13425: PPUSH
13426: LD_INT 52
13428: PUSH
13429: EMPTY
13430: LIST
13431: PUSH
13432: LD_INT 21
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PPUSH
13446: CALL_OW 72
13450: NOT
13451: AND
13452: PUSH
13453: LD_OWVAR 1
13457: PUSH
13458: LD_INT 126000
13460: GREATEREQUAL
13461: OR
13462: IFFALSE 14283
13464: GO 13466
13466: DISABLE
13467: LD_INT 0
13469: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13470: LD_STRING ReinforcementsDone
13472: PPUSH
13473: CALL_OW 337
// music_class := music_victory ;
13477: LD_ADDR_OWVAR 72
13481: PUSH
13482: LD_INT 4
13484: ST_TO_ADDR
// InGameOn ;
13485: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13489: LD_EXP 21
13493: PPUSH
13494: LD_STRING DH-end-1
13496: PPUSH
13497: CALL_OW 88
// wait ( 0 0$2 ) ;
13501: LD_INT 70
13503: PPUSH
13504: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13508: LD_EXP 29
13512: PPUSH
13513: LD_STRING DShar-end-2
13515: PPUSH
13516: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13520: LD_EXP 39
13524: NOT
13525: PUSH
13526: LD_EXP 40
13530: NOT
13531: AND
13532: IFFALSE 13548
// begin Say ( Heike , DH-end-3 ) ;
13534: LD_EXP 21
13538: PPUSH
13539: LD_STRING DH-end-3
13541: PPUSH
13542: CALL_OW 88
// end else
13546: GO 13645
// begin Say ( Heike , DH-end-a-3 ) ;
13548: LD_EXP 21
13552: PPUSH
13553: LD_STRING DH-end-a-3
13555: PPUSH
13556: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13560: LD_EXP 29
13564: PPUSH
13565: LD_STRING DShar-end-a-4
13567: PPUSH
13568: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13572: LD_EXP 21
13576: PPUSH
13577: LD_STRING DH-end-a-5
13579: PPUSH
13580: CALL_OW 88
// InGameOff ;
13584: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13588: LD_INT 35
13590: PPUSH
13591: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13595: LD_INT 22
13597: PUSH
13598: LD_INT 3
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 21
13607: PUSH
13608: LD_INT 1
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PPUSH
13619: CALL_OW 69
13623: PUSH
13624: LD_INT 0
13626: EQUAL
13627: IFFALSE 13588
// InGameOn ;
13629: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13633: LD_EXP 21
13637: PPUSH
13638: LD_STRING DH-end-a-6
13640: PPUSH
13641: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13645: LD_EXP 29
13649: PPUSH
13650: LD_STRING DShar-end-3
13652: PPUSH
13653: CALL_OW 94
// if not flamethrowerBuilt then
13657: LD_EXP 20
13661: NOT
13662: IFFALSE 13671
// SetAchievement ( ACH_FIRE ) ;
13664: LD_STRING ACH_FIRE
13666: PPUSH
13667: CALL_OW 543
// if drugsTested then
13671: LD_EXP 6
13675: IFFALSE 13689
// AddMedal ( med1 , 1 ) else
13677: LD_STRING med1
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: CALL_OW 101
13687: GO 13729
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13689: LD_INT 5
13691: PPUSH
13692: LD_INT 2
13694: PPUSH
13695: CALL_OW 321
13699: PUSH
13700: LD_INT 2
13702: EQUAL
13703: IFFALSE 13718
// AddMedal ( med1 , - 1 ) else
13705: LD_STRING med1
13707: PPUSH
13708: LD_INT 1
13710: NEG
13711: PPUSH
13712: CALL_OW 101
13716: GO 13729
// AddMedal ( med1 , - 2 ) ;
13718: LD_STRING med1
13720: PPUSH
13721: LD_INT 2
13723: NEG
13724: PPUSH
13725: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13729: LD_INT 22
13731: PUSH
13732: LD_INT 2
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 33
13741: PUSH
13742: LD_INT 2
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: PUSH
13758: LD_INT 3
13760: GREATEREQUAL
13761: PUSH
13762: LD_INT 22
13764: PUSH
13765: LD_INT 2
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 34
13774: PUSH
13775: LD_INT 31
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PPUSH
13786: CALL_OW 69
13790: PUSH
13791: LD_INT 1
13793: GREATEREQUAL
13794: AND
13795: IFFALSE 13809
// AddMedal ( med2 , 1 ) else
13797: LD_STRING med2
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: CALL_OW 101
13807: GO 13820
// AddMedal ( med2 , - 1 ) ;
13809: LD_STRING med2
13811: PPUSH
13812: LD_INT 1
13814: NEG
13815: PPUSH
13816: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13820: LD_EXP 15
13824: PUSH
13825: LD_INT 10
13827: PUSH
13828: LD_INT 8
13830: PUSH
13831: LD_INT 6
13833: PUSH
13834: LD_INT 5
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: PUSH
13843: LD_OWVAR 67
13847: ARRAY
13848: LESS
13849: IFFALSE 13863
// AddMedal ( med3 , 1 ) else
13851: LD_STRING med3
13853: PPUSH
13854: LD_INT 1
13856: PPUSH
13857: CALL_OW 101
13861: GO 13874
// AddMedal ( med3 , - 1 ) ;
13863: LD_STRING med3
13865: PPUSH
13866: LD_INT 1
13868: NEG
13869: PPUSH
13870: CALL_OW 101
// GiveMedals ( MAIN ) ;
13874: LD_STRING MAIN
13876: PPUSH
13877: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13881: LD_INT 22
13883: PUSH
13884: LD_INT 2
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 23
13893: PUSH
13894: LD_INT 2
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 1
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: PPUSH
13921: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13925: LD_EXP 15
13929: PPUSH
13930: LD_STRING 05_ConvoySavedCounter
13932: PPUSH
13933: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13937: LD_EXP 13
13941: PPUSH
13942: LD_STRING 05_Radar
13944: PPUSH
13945: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13949: LD_EXP 6
13953: PPUSH
13954: LD_STRING 05_DrugsTested
13956: PPUSH
13957: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13961: LD_INT 22
13963: PUSH
13964: LD_INT 2
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 33
13973: PUSH
13974: LD_INT 2
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PPUSH
13985: CALL_OW 69
13989: PUSH
13990: LD_INT 3
13992: GREATEREQUAL
13993: PUSH
13994: LD_INT 22
13996: PUSH
13997: LD_INT 2
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 34
14006: PUSH
14007: LD_INT 31
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 69
14022: PUSH
14023: LD_INT 2
14025: GREATEREQUAL
14026: AND
14027: PPUSH
14028: LD_STRING 05_RemoteControl
14030: PPUSH
14031: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14035: LD_EXP 21
14039: PPUSH
14040: LD_STRING 05_Heike
14042: PPUSH
14043: CALL_OW 38
// if Aviradze then
14047: LD_EXP 33
14051: IFFALSE 14065
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14053: LD_EXP 33
14057: PPUSH
14058: LD_STRING 05_Aviradze
14060: PPUSH
14061: CALL_OW 38
// if Ibrahim then
14065: LD_EXP 24
14069: IFFALSE 14083
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14071: LD_EXP 24
14075: PPUSH
14076: LD_STRING 05_Ibrahim
14078: PPUSH
14079: CALL_OW 38
// if Kamil then
14083: LD_EXP 25
14087: IFFALSE 14101
// SaveCharacters ( Kamil , 05_Kamil ) ;
14089: LD_EXP 25
14093: PPUSH
14094: LD_STRING 05_Kamil
14096: PPUSH
14097: CALL_OW 38
// if Sophia then
14101: LD_EXP 27
14105: IFFALSE 14119
// SaveCharacters ( Sophia , 05_Sophia ) ;
14107: LD_EXP 27
14111: PPUSH
14112: LD_STRING 05_Sophia
14114: PPUSH
14115: CALL_OW 38
// if Kaia then
14119: LD_EXP 26
14123: IFFALSE 14137
// SaveCharacters ( Kaia , 05_Kaia ) ;
14125: LD_EXP 26
14129: PPUSH
14130: LD_STRING 05_Kaia
14132: PPUSH
14133: CALL_OW 38
// if Givi then
14137: LD_EXP 22
14141: IFFALSE 14155
// SaveCharacters ( Givi , 05_Givi ) ;
14143: LD_EXP 22
14147: PPUSH
14148: LD_STRING 05_Givi
14150: PPUSH
14151: CALL_OW 38
// if Mike then
14155: LD_EXP 23
14159: IFFALSE 14173
// SaveCharacters ( Mike , 05_Mike ) ;
14161: LD_EXP 23
14165: PPUSH
14166: LD_STRING 05_Mike
14168: PPUSH
14169: CALL_OW 38
// if Markov then
14173: LD_EXP 28
14177: IFFALSE 14191
// SaveCharacters ( Markov , 05_Markov ) ;
14179: LD_EXP 28
14183: PPUSH
14184: LD_STRING 05_Markov
14186: PPUSH
14187: CALL_OW 38
// if Kurt then
14191: LD_EXP 32
14195: IFFALSE 14209
// SaveCharacters ( Kurt , 05_Kurt ) ;
14197: LD_EXP 32
14201: PPUSH
14202: LD_STRING 05_Kurt
14204: PPUSH
14205: CALL_OW 38
// if heikeSecondSquad then
14209: LD_EXP 34
14213: IFFALSE 14227
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14215: LD_EXP 34
14219: PPUSH
14220: LD_STRING 05_others
14222: PPUSH
14223: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14227: LD_ADDR_VAR 0 1
14231: PUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 23
14244: PUSH
14245: LD_INT 0
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// if tmp then
14261: LD_VAR 0 1
14265: IFFALSE 14279
// SaveCharacters ( tmp , 05_apes ) ;
14267: LD_VAR 0 1
14271: PPUSH
14272: LD_STRING 05_apes
14274: PPUSH
14275: CALL_OW 38
// YouWin ;
14279: CALL_OW 103
// end ; end_of_file
14283: PPOPN 1
14285: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14286: LD_EXP 9
14290: PUSH
14291: LD_INT 13
14293: PPUSH
14294: LD_INT 1
14296: PPUSH
14297: CALL_OW 287
14301: PUSH
14302: LD_INT 25
14304: LESS
14305: AND
14306: IFFALSE 14333
14308: GO 14310
14310: DISABLE
// begin enable ;
14311: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14312: LD_INT 1
14314: PPUSH
14315: LD_INT 5
14317: PPUSH
14318: CALL_OW 12
14322: PPUSH
14323: LD_INT 13
14325: PPUSH
14326: LD_INT 1
14328: PPUSH
14329: CALL_OW 55
// end ; end_of_file
14333: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14334: LD_INT 0
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14340: LD_VAR 0 1
14344: PPUSH
14345: CALL_OW 264
14349: PUSH
14350: LD_INT 91
14352: EQUAL
14353: IFFALSE 14425
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14355: LD_INT 68
14357: PPUSH
14358: LD_VAR 0 1
14362: PPUSH
14363: CALL_OW 255
14367: PPUSH
14368: CALL_OW 321
14372: PUSH
14373: LD_INT 2
14375: EQUAL
14376: IFFALSE 14388
// eff := 70 else
14378: LD_ADDR_VAR 0 4
14382: PUSH
14383: LD_INT 70
14385: ST_TO_ADDR
14386: GO 14396
// eff := 30 ;
14388: LD_ADDR_VAR 0 4
14392: PUSH
14393: LD_INT 30
14395: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14396: LD_VAR 0 1
14400: PPUSH
14401: CALL_OW 250
14405: PPUSH
14406: LD_VAR 0 1
14410: PPUSH
14411: CALL_OW 251
14415: PPUSH
14416: LD_VAR 0 4
14420: PPUSH
14421: CALL_OW 495
// end ; end ;
14425: LD_VAR 0 2
14429: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14430: LD_INT 0
14432: PPUSH
// end ;
14433: LD_VAR 0 4
14437: RET
// export function SOS_Command ( cmd ) ; begin
14438: LD_INT 0
14440: PPUSH
// end ;
14441: LD_VAR 0 2
14445: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14446: LD_INT 0
14448: PPUSH
// end ;
14449: LD_VAR 0 6
14453: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14454: LD_INT 0
14456: PPUSH
14457: PPUSH
// if not vehicle or not factory then
14458: LD_VAR 0 1
14462: NOT
14463: PUSH
14464: LD_VAR 0 2
14468: NOT
14469: OR
14470: IFFALSE 14474
// exit ;
14472: GO 14705
// if factoryWaypoints >= factory then
14474: LD_EXP 112
14478: PUSH
14479: LD_VAR 0 2
14483: GREATEREQUAL
14484: IFFALSE 14705
// if factoryWaypoints [ factory ] then
14486: LD_EXP 112
14490: PUSH
14491: LD_VAR 0 2
14495: ARRAY
14496: IFFALSE 14705
// begin if GetControl ( vehicle ) = control_manual then
14498: LD_VAR 0 1
14502: PPUSH
14503: CALL_OW 263
14507: PUSH
14508: LD_INT 1
14510: EQUAL
14511: IFFALSE 14592
// begin driver := IsDrivenBy ( vehicle ) ;
14513: LD_ADDR_VAR 0 4
14517: PUSH
14518: LD_VAR 0 1
14522: PPUSH
14523: CALL_OW 311
14527: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14528: LD_VAR 0 4
14532: PPUSH
14533: LD_EXP 112
14537: PUSH
14538: LD_VAR 0 2
14542: ARRAY
14543: PUSH
14544: LD_INT 3
14546: ARRAY
14547: PPUSH
14548: LD_EXP 112
14552: PUSH
14553: LD_VAR 0 2
14557: ARRAY
14558: PUSH
14559: LD_INT 4
14561: ARRAY
14562: PPUSH
14563: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14567: LD_VAR 0 4
14571: PPUSH
14572: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14576: LD_VAR 0 4
14580: PPUSH
14581: LD_VAR 0 2
14585: PPUSH
14586: CALL_OW 180
// end else
14590: GO 14705
// if GetControl ( vehicle ) = control_remote then
14592: LD_VAR 0 1
14596: PPUSH
14597: CALL_OW 263
14601: PUSH
14602: LD_INT 2
14604: EQUAL
14605: IFFALSE 14666
// begin wait ( 0 0$2 ) ;
14607: LD_INT 70
14609: PPUSH
14610: CALL_OW 67
// if Connect ( vehicle ) then
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL 42378 0 1
14623: IFFALSE 14664
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14625: LD_VAR 0 1
14629: PPUSH
14630: LD_EXP 112
14634: PUSH
14635: LD_VAR 0 2
14639: ARRAY
14640: PUSH
14641: LD_INT 3
14643: ARRAY
14644: PPUSH
14645: LD_EXP 112
14649: PUSH
14650: LD_VAR 0 2
14654: ARRAY
14655: PUSH
14656: LD_INT 4
14658: ARRAY
14659: PPUSH
14660: CALL_OW 171
// end else
14664: GO 14705
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_EXP 112
14675: PUSH
14676: LD_VAR 0 2
14680: ARRAY
14681: PUSH
14682: LD_INT 3
14684: ARRAY
14685: PPUSH
14686: LD_EXP 112
14690: PUSH
14691: LD_VAR 0 2
14695: ARRAY
14696: PUSH
14697: LD_INT 4
14699: ARRAY
14700: PPUSH
14701: CALL_OW 171
// end ; end ;
14705: LD_VAR 0 3
14709: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14710: LD_INT 0
14712: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14713: LD_VAR 0 1
14717: PUSH
14718: LD_INT 250
14720: EQUAL
14721: PUSH
14722: LD_VAR 0 2
14726: PPUSH
14727: CALL_OW 264
14731: PUSH
14732: LD_INT 81
14734: EQUAL
14735: AND
14736: IFFALSE 14757
// MinerPlaceMine ( unit , x , y ) ;
14738: LD_VAR 0 2
14742: PPUSH
14743: LD_VAR 0 4
14747: PPUSH
14748: LD_VAR 0 5
14752: PPUSH
14753: CALL 17142 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14757: LD_VAR 0 1
14761: PUSH
14762: LD_INT 251
14764: EQUAL
14765: PUSH
14766: LD_VAR 0 2
14770: PPUSH
14771: CALL_OW 264
14775: PUSH
14776: LD_INT 81
14778: EQUAL
14779: AND
14780: IFFALSE 14801
// MinerDetonateMine ( unit , x , y ) ;
14782: LD_VAR 0 2
14786: PPUSH
14787: LD_VAR 0 4
14791: PPUSH
14792: LD_VAR 0 5
14796: PPUSH
14797: CALL 17417 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14801: LD_VAR 0 1
14805: PUSH
14806: LD_INT 252
14808: EQUAL
14809: PUSH
14810: LD_VAR 0 2
14814: PPUSH
14815: CALL_OW 264
14819: PUSH
14820: LD_INT 81
14822: EQUAL
14823: AND
14824: IFFALSE 14845
// MinerCreateMinefield ( unit , x , y ) ;
14826: LD_VAR 0 2
14830: PPUSH
14831: LD_VAR 0 4
14835: PPUSH
14836: LD_VAR 0 5
14840: PPUSH
14841: CALL 17834 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14845: LD_VAR 0 1
14849: PUSH
14850: LD_INT 253
14852: EQUAL
14853: PUSH
14854: LD_VAR 0 2
14858: PPUSH
14859: CALL_OW 257
14863: PUSH
14864: LD_INT 5
14866: EQUAL
14867: AND
14868: IFFALSE 14889
// ComBinocular ( unit , x , y ) ;
14870: LD_VAR 0 2
14874: PPUSH
14875: LD_VAR 0 4
14879: PPUSH
14880: LD_VAR 0 5
14884: PPUSH
14885: CALL 18203 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14889: LD_VAR 0 1
14893: PUSH
14894: LD_INT 254
14896: EQUAL
14897: PUSH
14898: LD_VAR 0 2
14902: PPUSH
14903: CALL_OW 264
14907: PUSH
14908: LD_INT 99
14910: EQUAL
14911: AND
14912: PUSH
14913: LD_VAR 0 3
14917: PPUSH
14918: CALL_OW 263
14922: PUSH
14923: LD_INT 3
14925: EQUAL
14926: AND
14927: IFFALSE 14943
// HackDestroyVehicle ( unit , selectedUnit ) ;
14929: LD_VAR 0 2
14933: PPUSH
14934: LD_VAR 0 3
14938: PPUSH
14939: CALL 16506 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14943: LD_VAR 0 1
14947: PUSH
14948: LD_INT 255
14950: EQUAL
14951: PUSH
14952: LD_VAR 0 2
14956: PPUSH
14957: CALL_OW 264
14961: PUSH
14962: LD_INT 14
14964: PUSH
14965: LD_INT 53
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: IN
14972: AND
14973: PUSH
14974: LD_VAR 0 4
14978: PPUSH
14979: LD_VAR 0 5
14983: PPUSH
14984: CALL_OW 488
14988: AND
14989: IFFALSE 15013
// CutTreeXYR ( unit , x , y , 12 ) ;
14991: LD_VAR 0 2
14995: PPUSH
14996: LD_VAR 0 4
15000: PPUSH
15001: LD_VAR 0 5
15005: PPUSH
15006: LD_INT 12
15008: PPUSH
15009: CALL 15076 0 4
// if cmd = 256 then
15013: LD_VAR 0 1
15017: PUSH
15018: LD_INT 256
15020: EQUAL
15021: IFFALSE 15042
// SetFactoryWaypoint ( unit , x , y ) ;
15023: LD_VAR 0 2
15027: PPUSH
15028: LD_VAR 0 4
15032: PPUSH
15033: LD_VAR 0 5
15037: PPUSH
15038: CALL 32961 0 3
// if cmd = 257 then
15042: LD_VAR 0 1
15046: PUSH
15047: LD_INT 257
15049: EQUAL
15050: IFFALSE 15071
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15052: LD_VAR 0 2
15056: PPUSH
15057: LD_VAR 0 4
15061: PPUSH
15062: LD_VAR 0 5
15066: PPUSH
15067: CALL 33323 0 3
// end ;
15071: LD_VAR 0 6
15075: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15076: LD_INT 0
15078: PPUSH
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
15085: PPUSH
15086: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15087: LD_VAR 0 1
15091: NOT
15092: PUSH
15093: LD_VAR 0 2
15097: PPUSH
15098: LD_VAR 0 3
15102: PPUSH
15103: CALL_OW 488
15107: NOT
15108: OR
15109: PUSH
15110: LD_VAR 0 4
15114: NOT
15115: OR
15116: IFFALSE 15120
// exit ;
15118: GO 15460
// list := [ ] ;
15120: LD_ADDR_VAR 0 13
15124: PUSH
15125: EMPTY
15126: ST_TO_ADDR
// if x - r < 0 then
15127: LD_VAR 0 2
15131: PUSH
15132: LD_VAR 0 4
15136: MINUS
15137: PUSH
15138: LD_INT 0
15140: LESS
15141: IFFALSE 15153
// min_x := 0 else
15143: LD_ADDR_VAR 0 7
15147: PUSH
15148: LD_INT 0
15150: ST_TO_ADDR
15151: GO 15169
// min_x := x - r ;
15153: LD_ADDR_VAR 0 7
15157: PUSH
15158: LD_VAR 0 2
15162: PUSH
15163: LD_VAR 0 4
15167: MINUS
15168: ST_TO_ADDR
// if y - r < 0 then
15169: LD_VAR 0 3
15173: PUSH
15174: LD_VAR 0 4
15178: MINUS
15179: PUSH
15180: LD_INT 0
15182: LESS
15183: IFFALSE 15195
// min_y := 0 else
15185: LD_ADDR_VAR 0 8
15189: PUSH
15190: LD_INT 0
15192: ST_TO_ADDR
15193: GO 15211
// min_y := y - r ;
15195: LD_ADDR_VAR 0 8
15199: PUSH
15200: LD_VAR 0 3
15204: PUSH
15205: LD_VAR 0 4
15209: MINUS
15210: ST_TO_ADDR
// max_x := x + r ;
15211: LD_ADDR_VAR 0 9
15215: PUSH
15216: LD_VAR 0 2
15220: PUSH
15221: LD_VAR 0 4
15225: PLUS
15226: ST_TO_ADDR
// max_y := y + r ;
15227: LD_ADDR_VAR 0 10
15231: PUSH
15232: LD_VAR 0 3
15236: PUSH
15237: LD_VAR 0 4
15241: PLUS
15242: ST_TO_ADDR
// for _x = min_x to max_x do
15243: LD_ADDR_VAR 0 11
15247: PUSH
15248: DOUBLE
15249: LD_VAR 0 7
15253: DEC
15254: ST_TO_ADDR
15255: LD_VAR 0 9
15259: PUSH
15260: FOR_TO
15261: IFFALSE 15378
// for _y = min_y to max_y do
15263: LD_ADDR_VAR 0 12
15267: PUSH
15268: DOUBLE
15269: LD_VAR 0 8
15273: DEC
15274: ST_TO_ADDR
15275: LD_VAR 0 10
15279: PUSH
15280: FOR_TO
15281: IFFALSE 15374
// begin if not ValidHex ( _x , _y ) then
15283: LD_VAR 0 11
15287: PPUSH
15288: LD_VAR 0 12
15292: PPUSH
15293: CALL_OW 488
15297: NOT
15298: IFFALSE 15302
// continue ;
15300: GO 15280
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15302: LD_VAR 0 11
15306: PPUSH
15307: LD_VAR 0 12
15311: PPUSH
15312: CALL_OW 351
15316: PUSH
15317: LD_VAR 0 11
15321: PPUSH
15322: LD_VAR 0 12
15326: PPUSH
15327: CALL_OW 554
15331: AND
15332: IFFALSE 15372
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15334: LD_ADDR_VAR 0 13
15338: PUSH
15339: LD_VAR 0 13
15343: PPUSH
15344: LD_VAR 0 13
15348: PUSH
15349: LD_INT 1
15351: PLUS
15352: PPUSH
15353: LD_VAR 0 11
15357: PUSH
15358: LD_VAR 0 12
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PPUSH
15367: CALL_OW 2
15371: ST_TO_ADDR
// end ;
15372: GO 15280
15374: POP
15375: POP
15376: GO 15260
15378: POP
15379: POP
// if not list then
15380: LD_VAR 0 13
15384: NOT
15385: IFFALSE 15389
// exit ;
15387: GO 15460
// for i in list do
15389: LD_ADDR_VAR 0 6
15393: PUSH
15394: LD_VAR 0 13
15398: PUSH
15399: FOR_IN
15400: IFFALSE 15458
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15402: LD_VAR 0 1
15406: PPUSH
15407: LD_STRING M
15409: PUSH
15410: LD_VAR 0 6
15414: PUSH
15415: LD_INT 1
15417: ARRAY
15418: PUSH
15419: LD_VAR 0 6
15423: PUSH
15424: LD_INT 2
15426: ARRAY
15427: PUSH
15428: LD_INT 0
15430: PUSH
15431: LD_INT 0
15433: PUSH
15434: LD_INT 0
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: PPUSH
15452: CALL_OW 447
15456: GO 15399
15458: POP
15459: POP
// end ;
15460: LD_VAR 0 5
15464: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15465: LD_EXP 44
15469: NOT
15470: IFFALSE 15520
15472: GO 15474
15474: DISABLE
// begin initHack := true ;
15475: LD_ADDR_EXP 44
15479: PUSH
15480: LD_INT 1
15482: ST_TO_ADDR
// hackTanks := [ ] ;
15483: LD_ADDR_EXP 45
15487: PUSH
15488: EMPTY
15489: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15490: LD_ADDR_EXP 46
15494: PUSH
15495: EMPTY
15496: ST_TO_ADDR
// hackLimit := 3 ;
15497: LD_ADDR_EXP 47
15501: PUSH
15502: LD_INT 3
15504: ST_TO_ADDR
// hackDist := 12 ;
15505: LD_ADDR_EXP 48
15509: PUSH
15510: LD_INT 12
15512: ST_TO_ADDR
// hackCounter := [ ] ;
15513: LD_ADDR_EXP 49
15517: PUSH
15518: EMPTY
15519: ST_TO_ADDR
// end ;
15520: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15521: LD_EXP 44
15525: PUSH
15526: LD_INT 34
15528: PUSH
15529: LD_INT 99
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PPUSH
15536: CALL_OW 69
15540: AND
15541: IFFALSE 15794
15543: GO 15545
15545: DISABLE
15546: LD_INT 0
15548: PPUSH
15549: PPUSH
// begin enable ;
15550: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15551: LD_ADDR_VAR 0 1
15555: PUSH
15556: LD_INT 34
15558: PUSH
15559: LD_INT 99
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PPUSH
15566: CALL_OW 69
15570: PUSH
15571: FOR_IN
15572: IFFALSE 15792
// begin if not i in hackTanks then
15574: LD_VAR 0 1
15578: PUSH
15579: LD_EXP 45
15583: IN
15584: NOT
15585: IFFALSE 15668
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15587: LD_ADDR_EXP 45
15591: PUSH
15592: LD_EXP 45
15596: PPUSH
15597: LD_EXP 45
15601: PUSH
15602: LD_INT 1
15604: PLUS
15605: PPUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 1
15615: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15616: LD_ADDR_EXP 46
15620: PUSH
15621: LD_EXP 46
15625: PPUSH
15626: LD_EXP 46
15630: PUSH
15631: LD_INT 1
15633: PLUS
15634: PPUSH
15635: EMPTY
15636: PPUSH
15637: CALL_OW 1
15641: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15642: LD_ADDR_EXP 49
15646: PUSH
15647: LD_EXP 49
15651: PPUSH
15652: LD_EXP 49
15656: PUSH
15657: LD_INT 1
15659: PLUS
15660: PPUSH
15661: EMPTY
15662: PPUSH
15663: CALL_OW 1
15667: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 302
15677: NOT
15678: IFFALSE 15691
// begin HackUnlinkAll ( i ) ;
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL 15797 0 1
// continue ;
15689: GO 15571
// end ; HackCheckCapturedStatus ( i ) ;
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL 16240 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15700: LD_ADDR_VAR 0 2
15704: PUSH
15705: LD_INT 81
15707: PUSH
15708: LD_VAR 0 1
15712: PPUSH
15713: CALL_OW 255
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 33
15724: PUSH
15725: LD_INT 3
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 91
15734: PUSH
15735: LD_VAR 0 1
15739: PUSH
15740: LD_EXP 48
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 50
15752: PUSH
15753: EMPTY
15754: LIST
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: PPUSH
15762: CALL_OW 69
15766: ST_TO_ADDR
// if not tmp then
15767: LD_VAR 0 2
15771: NOT
15772: IFFALSE 15776
// continue ;
15774: GO 15571
// HackLink ( i , tmp ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_VAR 0 2
15785: PPUSH
15786: CALL 15933 0 2
// end ;
15790: GO 15571
15792: POP
15793: POP
// end ;
15794: PPOPN 2
15796: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15797: LD_INT 0
15799: PPUSH
15800: PPUSH
15801: PPUSH
// if not hack in hackTanks then
15802: LD_VAR 0 1
15806: PUSH
15807: LD_EXP 45
15811: IN
15812: NOT
15813: IFFALSE 15817
// exit ;
15815: GO 15928
// index := GetElementIndex ( hackTanks , hack ) ;
15817: LD_ADDR_VAR 0 4
15821: PUSH
15822: LD_EXP 45
15826: PPUSH
15827: LD_VAR 0 1
15831: PPUSH
15832: CALL 39194 0 2
15836: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15837: LD_EXP 46
15841: PUSH
15842: LD_VAR 0 4
15846: ARRAY
15847: IFFALSE 15928
// begin for i in hackTanksCaptured [ index ] do
15849: LD_ADDR_VAR 0 3
15853: PUSH
15854: LD_EXP 46
15858: PUSH
15859: LD_VAR 0 4
15863: ARRAY
15864: PUSH
15865: FOR_IN
15866: IFFALSE 15892
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15868: LD_VAR 0 3
15872: PUSH
15873: LD_INT 1
15875: ARRAY
15876: PPUSH
15877: LD_VAR 0 3
15881: PUSH
15882: LD_INT 2
15884: ARRAY
15885: PPUSH
15886: CALL_OW 235
15890: GO 15865
15892: POP
15893: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15894: LD_ADDR_EXP 46
15898: PUSH
15899: LD_EXP 46
15903: PPUSH
15904: LD_VAR 0 4
15908: PPUSH
15909: EMPTY
15910: PPUSH
15911: CALL_OW 1
15915: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_INT 0
15923: PPUSH
15924: CALL_OW 505
// end ; end ;
15928: LD_VAR 0 2
15932: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15933: LD_INT 0
15935: PPUSH
15936: PPUSH
15937: PPUSH
// if not hack in hackTanks or not vehicles then
15938: LD_VAR 0 1
15942: PUSH
15943: LD_EXP 45
15947: IN
15948: NOT
15949: PUSH
15950: LD_VAR 0 2
15954: NOT
15955: OR
15956: IFFALSE 15960
// exit ;
15958: GO 16235
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15960: LD_ADDR_VAR 0 2
15964: PUSH
15965: LD_VAR 0 1
15969: PPUSH
15970: LD_VAR 0 2
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: CALL 39844 0 4
15985: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15986: LD_ADDR_VAR 0 5
15990: PUSH
15991: LD_EXP 45
15995: PPUSH
15996: LD_VAR 0 1
16000: PPUSH
16001: CALL 39194 0 2
16005: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16006: LD_EXP 46
16010: PUSH
16011: LD_VAR 0 5
16015: ARRAY
16016: PUSH
16017: LD_EXP 47
16021: LESS
16022: IFFALSE 16211
// begin for i := 1 to vehicles do
16024: LD_ADDR_VAR 0 4
16028: PUSH
16029: DOUBLE
16030: LD_INT 1
16032: DEC
16033: ST_TO_ADDR
16034: LD_VAR 0 2
16038: PUSH
16039: FOR_TO
16040: IFFALSE 16209
// begin if hackTanksCaptured [ index ] = hackLimit then
16042: LD_EXP 46
16046: PUSH
16047: LD_VAR 0 5
16051: ARRAY
16052: PUSH
16053: LD_EXP 47
16057: EQUAL
16058: IFFALSE 16062
// break ;
16060: GO 16209
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16062: LD_ADDR_EXP 49
16066: PUSH
16067: LD_EXP 49
16071: PPUSH
16072: LD_VAR 0 5
16076: PPUSH
16077: LD_EXP 49
16081: PUSH
16082: LD_VAR 0 5
16086: ARRAY
16087: PUSH
16088: LD_INT 1
16090: PLUS
16091: PPUSH
16092: CALL_OW 1
16096: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16097: LD_ADDR_EXP 46
16101: PUSH
16102: LD_EXP 46
16106: PPUSH
16107: LD_VAR 0 5
16111: PUSH
16112: LD_EXP 46
16116: PUSH
16117: LD_VAR 0 5
16121: ARRAY
16122: PUSH
16123: LD_INT 1
16125: PLUS
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PPUSH
16131: LD_VAR 0 2
16135: PUSH
16136: LD_VAR 0 4
16140: ARRAY
16141: PUSH
16142: LD_VAR 0 2
16146: PUSH
16147: LD_VAR 0 4
16151: ARRAY
16152: PPUSH
16153: CALL_OW 255
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PPUSH
16162: CALL 39409 0 3
16166: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16167: LD_VAR 0 2
16171: PUSH
16172: LD_VAR 0 4
16176: ARRAY
16177: PPUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 255
16187: PPUSH
16188: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16192: LD_VAR 0 2
16196: PUSH
16197: LD_VAR 0 4
16201: ARRAY
16202: PPUSH
16203: CALL_OW 141
// end ;
16207: GO 16039
16209: POP
16210: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16211: LD_VAR 0 1
16215: PPUSH
16216: LD_EXP 46
16220: PUSH
16221: LD_VAR 0 5
16225: ARRAY
16226: PUSH
16227: LD_INT 0
16229: PLUS
16230: PPUSH
16231: CALL_OW 505
// end ;
16235: LD_VAR 0 3
16239: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16240: LD_INT 0
16242: PPUSH
16243: PPUSH
16244: PPUSH
16245: PPUSH
// if not hack in hackTanks then
16246: LD_VAR 0 1
16250: PUSH
16251: LD_EXP 45
16255: IN
16256: NOT
16257: IFFALSE 16261
// exit ;
16259: GO 16501
// index := GetElementIndex ( hackTanks , hack ) ;
16261: LD_ADDR_VAR 0 4
16265: PUSH
16266: LD_EXP 45
16270: PPUSH
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL 39194 0 2
16280: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16281: LD_ADDR_VAR 0 3
16285: PUSH
16286: DOUBLE
16287: LD_EXP 46
16291: PUSH
16292: LD_VAR 0 4
16296: ARRAY
16297: INC
16298: ST_TO_ADDR
16299: LD_INT 1
16301: PUSH
16302: FOR_DOWNTO
16303: IFFALSE 16475
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16305: LD_ADDR_VAR 0 5
16309: PUSH
16310: LD_EXP 46
16314: PUSH
16315: LD_VAR 0 4
16319: ARRAY
16320: PUSH
16321: LD_VAR 0 3
16325: ARRAY
16326: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16327: LD_VAR 0 5
16331: PUSH
16332: LD_INT 1
16334: ARRAY
16335: PPUSH
16336: CALL_OW 302
16340: NOT
16341: PUSH
16342: LD_VAR 0 5
16346: PUSH
16347: LD_INT 1
16349: ARRAY
16350: PPUSH
16351: CALL_OW 255
16355: PUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 255
16365: NONEQUAL
16366: OR
16367: IFFALSE 16473
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16369: LD_VAR 0 5
16373: PUSH
16374: LD_INT 1
16376: ARRAY
16377: PPUSH
16378: CALL_OW 305
16382: PUSH
16383: LD_VAR 0 5
16387: PUSH
16388: LD_INT 1
16390: ARRAY
16391: PPUSH
16392: CALL_OW 255
16396: PUSH
16397: LD_VAR 0 1
16401: PPUSH
16402: CALL_OW 255
16406: EQUAL
16407: AND
16408: IFFALSE 16432
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16410: LD_VAR 0 5
16414: PUSH
16415: LD_INT 1
16417: ARRAY
16418: PPUSH
16419: LD_VAR 0 5
16423: PUSH
16424: LD_INT 2
16426: ARRAY
16427: PPUSH
16428: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16432: LD_ADDR_EXP 46
16436: PUSH
16437: LD_EXP 46
16441: PPUSH
16442: LD_VAR 0 4
16446: PPUSH
16447: LD_EXP 46
16451: PUSH
16452: LD_VAR 0 4
16456: ARRAY
16457: PPUSH
16458: LD_VAR 0 3
16462: PPUSH
16463: CALL_OW 3
16467: PPUSH
16468: CALL_OW 1
16472: ST_TO_ADDR
// end ; end ;
16473: GO 16302
16475: POP
16476: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16477: LD_VAR 0 1
16481: PPUSH
16482: LD_EXP 46
16486: PUSH
16487: LD_VAR 0 4
16491: ARRAY
16492: PUSH
16493: LD_INT 0
16495: PLUS
16496: PPUSH
16497: CALL_OW 505
// end ;
16501: LD_VAR 0 2
16505: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16506: LD_INT 0
16508: PPUSH
16509: PPUSH
16510: PPUSH
16511: PPUSH
// if not hack in hackTanks then
16512: LD_VAR 0 1
16516: PUSH
16517: LD_EXP 45
16521: IN
16522: NOT
16523: IFFALSE 16527
// exit ;
16525: GO 16612
// index := GetElementIndex ( hackTanks , hack ) ;
16527: LD_ADDR_VAR 0 5
16531: PUSH
16532: LD_EXP 45
16536: PPUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL 39194 0 2
16546: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16547: LD_ADDR_VAR 0 4
16551: PUSH
16552: DOUBLE
16553: LD_INT 1
16555: DEC
16556: ST_TO_ADDR
16557: LD_EXP 46
16561: PUSH
16562: LD_VAR 0 5
16566: ARRAY
16567: PUSH
16568: FOR_TO
16569: IFFALSE 16610
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16571: LD_EXP 46
16575: PUSH
16576: LD_VAR 0 5
16580: ARRAY
16581: PUSH
16582: LD_VAR 0 4
16586: ARRAY
16587: PUSH
16588: LD_INT 1
16590: ARRAY
16591: PUSH
16592: LD_VAR 0 2
16596: EQUAL
16597: IFFALSE 16608
// KillUnit ( vehicle ) ;
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL_OW 66
16608: GO 16568
16610: POP
16611: POP
// end ;
16612: LD_VAR 0 3
16616: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16617: LD_EXP 50
16621: NOT
16622: IFFALSE 16657
16624: GO 16626
16626: DISABLE
// begin initMiner := true ;
16627: LD_ADDR_EXP 50
16631: PUSH
16632: LD_INT 1
16634: ST_TO_ADDR
// minersList := [ ] ;
16635: LD_ADDR_EXP 51
16639: PUSH
16640: EMPTY
16641: ST_TO_ADDR
// minerMinesList := [ ] ;
16642: LD_ADDR_EXP 52
16646: PUSH
16647: EMPTY
16648: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16649: LD_ADDR_EXP 53
16653: PUSH
16654: LD_INT 5
16656: ST_TO_ADDR
// end ;
16657: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16658: LD_EXP 50
16662: PUSH
16663: LD_INT 34
16665: PUSH
16666: LD_INT 81
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PPUSH
16673: CALL_OW 69
16677: AND
16678: IFFALSE 17139
16680: GO 16682
16682: DISABLE
16683: LD_INT 0
16685: PPUSH
16686: PPUSH
16687: PPUSH
16688: PPUSH
// begin enable ;
16689: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16690: LD_ADDR_VAR 0 1
16694: PUSH
16695: LD_INT 34
16697: PUSH
16698: LD_INT 81
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL_OW 69
16709: PUSH
16710: FOR_IN
16711: IFFALSE 16783
// begin if not i in minersList then
16713: LD_VAR 0 1
16717: PUSH
16718: LD_EXP 51
16722: IN
16723: NOT
16724: IFFALSE 16781
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16726: LD_ADDR_EXP 51
16730: PUSH
16731: LD_EXP 51
16735: PPUSH
16736: LD_EXP 51
16740: PUSH
16741: LD_INT 1
16743: PLUS
16744: PPUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 1
16754: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16755: LD_ADDR_EXP 52
16759: PUSH
16760: LD_EXP 52
16764: PPUSH
16765: LD_EXP 52
16769: PUSH
16770: LD_INT 1
16772: PLUS
16773: PPUSH
16774: EMPTY
16775: PPUSH
16776: CALL_OW 1
16780: ST_TO_ADDR
// end end ;
16781: GO 16710
16783: POP
16784: POP
// for i := minerMinesList downto 1 do
16785: LD_ADDR_VAR 0 1
16789: PUSH
16790: DOUBLE
16791: LD_EXP 52
16795: INC
16796: ST_TO_ADDR
16797: LD_INT 1
16799: PUSH
16800: FOR_DOWNTO
16801: IFFALSE 17137
// begin if IsLive ( minersList [ i ] ) then
16803: LD_EXP 51
16807: PUSH
16808: LD_VAR 0 1
16812: ARRAY
16813: PPUSH
16814: CALL_OW 300
16818: IFFALSE 16846
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16820: LD_EXP 51
16824: PUSH
16825: LD_VAR 0 1
16829: ARRAY
16830: PPUSH
16831: LD_EXP 52
16835: PUSH
16836: LD_VAR 0 1
16840: ARRAY
16841: PPUSH
16842: CALL_OW 505
// if not minerMinesList [ i ] then
16846: LD_EXP 52
16850: PUSH
16851: LD_VAR 0 1
16855: ARRAY
16856: NOT
16857: IFFALSE 16861
// continue ;
16859: GO 16800
// for j := minerMinesList [ i ] downto 1 do
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: DOUBLE
16867: LD_EXP 52
16871: PUSH
16872: LD_VAR 0 1
16876: ARRAY
16877: INC
16878: ST_TO_ADDR
16879: LD_INT 1
16881: PUSH
16882: FOR_DOWNTO
16883: IFFALSE 17133
// begin side := GetSide ( minersList [ i ] ) ;
16885: LD_ADDR_VAR 0 3
16889: PUSH
16890: LD_EXP 51
16894: PUSH
16895: LD_VAR 0 1
16899: ARRAY
16900: PPUSH
16901: CALL_OW 255
16905: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16906: LD_ADDR_VAR 0 4
16910: PUSH
16911: LD_EXP 52
16915: PUSH
16916: LD_VAR 0 1
16920: ARRAY
16921: PUSH
16922: LD_VAR 0 2
16926: ARRAY
16927: PUSH
16928: LD_INT 1
16930: ARRAY
16931: PPUSH
16932: LD_EXP 52
16936: PUSH
16937: LD_VAR 0 1
16941: ARRAY
16942: PUSH
16943: LD_VAR 0 2
16947: ARRAY
16948: PUSH
16949: LD_INT 2
16951: ARRAY
16952: PPUSH
16953: CALL_OW 428
16957: ST_TO_ADDR
// if not tmp then
16958: LD_VAR 0 4
16962: NOT
16963: IFFALSE 16967
// continue ;
16965: GO 16882
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16967: LD_VAR 0 4
16971: PUSH
16972: LD_INT 81
16974: PUSH
16975: LD_VAR 0 3
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PPUSH
16984: CALL_OW 69
16988: IN
16989: PUSH
16990: LD_EXP 52
16994: PUSH
16995: LD_VAR 0 1
16999: ARRAY
17000: PUSH
17001: LD_VAR 0 2
17005: ARRAY
17006: PUSH
17007: LD_INT 1
17009: ARRAY
17010: PPUSH
17011: LD_EXP 52
17015: PUSH
17016: LD_VAR 0 1
17020: ARRAY
17021: PUSH
17022: LD_VAR 0 2
17026: ARRAY
17027: PUSH
17028: LD_INT 2
17030: ARRAY
17031: PPUSH
17032: CALL_OW 458
17036: AND
17037: IFFALSE 17131
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17039: LD_EXP 52
17043: PUSH
17044: LD_VAR 0 1
17048: ARRAY
17049: PUSH
17050: LD_VAR 0 2
17054: ARRAY
17055: PUSH
17056: LD_INT 1
17058: ARRAY
17059: PPUSH
17060: LD_EXP 52
17064: PUSH
17065: LD_VAR 0 1
17069: ARRAY
17070: PUSH
17071: LD_VAR 0 2
17075: ARRAY
17076: PUSH
17077: LD_INT 2
17079: ARRAY
17080: PPUSH
17081: LD_VAR 0 3
17085: PPUSH
17086: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17090: LD_ADDR_EXP 52
17094: PUSH
17095: LD_EXP 52
17099: PPUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: LD_EXP 52
17109: PUSH
17110: LD_VAR 0 1
17114: ARRAY
17115: PPUSH
17116: LD_VAR 0 2
17120: PPUSH
17121: CALL_OW 3
17125: PPUSH
17126: CALL_OW 1
17130: ST_TO_ADDR
// end ; end ;
17131: GO 16882
17133: POP
17134: POP
// end ;
17135: GO 16800
17137: POP
17138: POP
// end ;
17139: PPOPN 4
17141: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
// result := false ;
17146: LD_ADDR_VAR 0 4
17150: PUSH
17151: LD_INT 0
17153: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 264
17163: PUSH
17164: LD_INT 81
17166: EQUAL
17167: NOT
17168: IFFALSE 17172
// exit ;
17170: GO 17412
// index := GetElementIndex ( minersList , unit ) ;
17172: LD_ADDR_VAR 0 5
17176: PUSH
17177: LD_EXP 51
17181: PPUSH
17182: LD_VAR 0 1
17186: PPUSH
17187: CALL 39194 0 2
17191: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17192: LD_EXP 52
17196: PUSH
17197: LD_VAR 0 5
17201: ARRAY
17202: PUSH
17203: LD_EXP 53
17207: GREATEREQUAL
17208: IFFALSE 17212
// exit ;
17210: GO 17412
// ComMoveXY ( unit , x , y ) ;
17212: LD_VAR 0 1
17216: PPUSH
17217: LD_VAR 0 2
17221: PPUSH
17222: LD_VAR 0 3
17226: PPUSH
17227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17231: LD_INT 35
17233: PPUSH
17234: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_VAR 0 2
17247: PPUSH
17248: LD_VAR 0 3
17252: PPUSH
17253: CALL 70530 0 3
17257: NOT
17258: PUSH
17259: LD_VAR 0 1
17263: PPUSH
17264: CALL_OW 314
17268: AND
17269: IFFALSE 17273
// exit ;
17271: GO 17412
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17273: LD_VAR 0 2
17277: PPUSH
17278: LD_VAR 0 3
17282: PPUSH
17283: CALL_OW 428
17287: PUSH
17288: LD_VAR 0 1
17292: EQUAL
17293: PUSH
17294: LD_VAR 0 1
17298: PPUSH
17299: CALL_OW 314
17303: NOT
17304: AND
17305: IFFALSE 17231
// PlaySoundXY ( x , y , PlantMine ) ;
17307: LD_VAR 0 2
17311: PPUSH
17312: LD_VAR 0 3
17316: PPUSH
17317: LD_STRING PlantMine
17319: PPUSH
17320: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17324: LD_VAR 0 2
17328: PPUSH
17329: LD_VAR 0 3
17333: PPUSH
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL_OW 255
17343: PPUSH
17344: LD_INT 0
17346: PPUSH
17347: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17351: LD_ADDR_EXP 52
17355: PUSH
17356: LD_EXP 52
17360: PPUSH
17361: LD_VAR 0 5
17365: PUSH
17366: LD_EXP 52
17370: PUSH
17371: LD_VAR 0 5
17375: ARRAY
17376: PUSH
17377: LD_INT 1
17379: PLUS
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PPUSH
17385: LD_VAR 0 2
17389: PUSH
17390: LD_VAR 0 3
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL 39409 0 3
17403: ST_TO_ADDR
// result := true ;
17404: LD_ADDR_VAR 0 4
17408: PUSH
17409: LD_INT 1
17411: ST_TO_ADDR
// end ;
17412: LD_VAR 0 4
17416: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17417: LD_INT 0
17419: PPUSH
17420: PPUSH
17421: PPUSH
// if not unit in minersList then
17422: LD_VAR 0 1
17426: PUSH
17427: LD_EXP 51
17431: IN
17432: NOT
17433: IFFALSE 17437
// exit ;
17435: GO 17829
// index := GetElementIndex ( minersList , unit ) ;
17437: LD_ADDR_VAR 0 6
17441: PUSH
17442: LD_EXP 51
17446: PPUSH
17447: LD_VAR 0 1
17451: PPUSH
17452: CALL 39194 0 2
17456: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17457: LD_ADDR_VAR 0 5
17461: PUSH
17462: DOUBLE
17463: LD_EXP 52
17467: PUSH
17468: LD_VAR 0 6
17472: ARRAY
17473: INC
17474: ST_TO_ADDR
17475: LD_INT 1
17477: PUSH
17478: FOR_DOWNTO
17479: IFFALSE 17640
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17481: LD_EXP 52
17485: PUSH
17486: LD_VAR 0 6
17490: ARRAY
17491: PUSH
17492: LD_VAR 0 5
17496: ARRAY
17497: PUSH
17498: LD_INT 1
17500: ARRAY
17501: PUSH
17502: LD_VAR 0 2
17506: EQUAL
17507: PUSH
17508: LD_EXP 52
17512: PUSH
17513: LD_VAR 0 6
17517: ARRAY
17518: PUSH
17519: LD_VAR 0 5
17523: ARRAY
17524: PUSH
17525: LD_INT 2
17527: ARRAY
17528: PUSH
17529: LD_VAR 0 3
17533: EQUAL
17534: AND
17535: IFFALSE 17638
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17537: LD_EXP 52
17541: PUSH
17542: LD_VAR 0 6
17546: ARRAY
17547: PUSH
17548: LD_VAR 0 5
17552: ARRAY
17553: PUSH
17554: LD_INT 1
17556: ARRAY
17557: PPUSH
17558: LD_EXP 52
17562: PUSH
17563: LD_VAR 0 6
17567: ARRAY
17568: PUSH
17569: LD_VAR 0 5
17573: ARRAY
17574: PUSH
17575: LD_INT 2
17577: ARRAY
17578: PPUSH
17579: LD_VAR 0 1
17583: PPUSH
17584: CALL_OW 255
17588: PPUSH
17589: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17593: LD_ADDR_EXP 52
17597: PUSH
17598: LD_EXP 52
17602: PPUSH
17603: LD_VAR 0 6
17607: PPUSH
17608: LD_EXP 52
17612: PUSH
17613: LD_VAR 0 6
17617: ARRAY
17618: PPUSH
17619: LD_VAR 0 5
17623: PPUSH
17624: CALL_OW 3
17628: PPUSH
17629: CALL_OW 1
17633: ST_TO_ADDR
// exit ;
17634: POP
17635: POP
17636: GO 17829
// end ; end ;
17638: GO 17478
17640: POP
17641: POP
// for i := minerMinesList [ index ] downto 1 do
17642: LD_ADDR_VAR 0 5
17646: PUSH
17647: DOUBLE
17648: LD_EXP 52
17652: PUSH
17653: LD_VAR 0 6
17657: ARRAY
17658: INC
17659: ST_TO_ADDR
17660: LD_INT 1
17662: PUSH
17663: FOR_DOWNTO
17664: IFFALSE 17827
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17666: LD_EXP 52
17670: PUSH
17671: LD_VAR 0 6
17675: ARRAY
17676: PUSH
17677: LD_VAR 0 5
17681: ARRAY
17682: PUSH
17683: LD_INT 1
17685: ARRAY
17686: PPUSH
17687: LD_EXP 52
17691: PUSH
17692: LD_VAR 0 6
17696: ARRAY
17697: PUSH
17698: LD_VAR 0 5
17702: ARRAY
17703: PUSH
17704: LD_INT 2
17706: ARRAY
17707: PPUSH
17708: LD_VAR 0 2
17712: PPUSH
17713: LD_VAR 0 3
17717: PPUSH
17718: CALL_OW 298
17722: PUSH
17723: LD_INT 6
17725: LESS
17726: IFFALSE 17825
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17728: LD_EXP 52
17732: PUSH
17733: LD_VAR 0 6
17737: ARRAY
17738: PUSH
17739: LD_VAR 0 5
17743: ARRAY
17744: PUSH
17745: LD_INT 1
17747: ARRAY
17748: PPUSH
17749: LD_EXP 52
17753: PUSH
17754: LD_VAR 0 6
17758: ARRAY
17759: PUSH
17760: LD_VAR 0 5
17764: ARRAY
17765: PUSH
17766: LD_INT 2
17768: ARRAY
17769: PPUSH
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 255
17779: PPUSH
17780: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17784: LD_ADDR_EXP 52
17788: PUSH
17789: LD_EXP 52
17793: PPUSH
17794: LD_VAR 0 6
17798: PPUSH
17799: LD_EXP 52
17803: PUSH
17804: LD_VAR 0 6
17808: ARRAY
17809: PPUSH
17810: LD_VAR 0 5
17814: PPUSH
17815: CALL_OW 3
17819: PPUSH
17820: CALL_OW 1
17824: ST_TO_ADDR
// end ; end ;
17825: GO 17663
17827: POP
17828: POP
// end ;
17829: LD_VAR 0 4
17833: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17834: LD_INT 0
17836: PPUSH
17837: PPUSH
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17845: LD_VAR 0 1
17849: PPUSH
17850: CALL_OW 264
17854: PUSH
17855: LD_INT 81
17857: EQUAL
17858: NOT
17859: PUSH
17860: LD_VAR 0 1
17864: PUSH
17865: LD_EXP 51
17869: IN
17870: NOT
17871: OR
17872: IFFALSE 17876
// exit ;
17874: GO 18198
// index := GetElementIndex ( minersList , unit ) ;
17876: LD_ADDR_VAR 0 6
17880: PUSH
17881: LD_EXP 51
17885: PPUSH
17886: LD_VAR 0 1
17890: PPUSH
17891: CALL 39194 0 2
17895: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17896: LD_ADDR_VAR 0 8
17900: PUSH
17901: LD_EXP 53
17905: PUSH
17906: LD_EXP 52
17910: PUSH
17911: LD_VAR 0 6
17915: ARRAY
17916: MINUS
17917: ST_TO_ADDR
// if not minesFreeAmount then
17918: LD_VAR 0 8
17922: NOT
17923: IFFALSE 17927
// exit ;
17925: GO 18198
// tmp := [ ] ;
17927: LD_ADDR_VAR 0 7
17931: PUSH
17932: EMPTY
17933: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17934: LD_ADDR_VAR 0 5
17938: PUSH
17939: DOUBLE
17940: LD_INT 1
17942: DEC
17943: ST_TO_ADDR
17944: LD_VAR 0 8
17948: PUSH
17949: FOR_TO
17950: IFFALSE 18145
// begin _d := rand ( 0 , 5 ) ;
17952: LD_ADDR_VAR 0 11
17956: PUSH
17957: LD_INT 0
17959: PPUSH
17960: LD_INT 5
17962: PPUSH
17963: CALL_OW 12
17967: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17968: LD_ADDR_VAR 0 12
17972: PUSH
17973: LD_INT 2
17975: PPUSH
17976: LD_INT 6
17978: PPUSH
17979: CALL_OW 12
17983: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17984: LD_ADDR_VAR 0 9
17988: PUSH
17989: LD_VAR 0 2
17993: PPUSH
17994: LD_VAR 0 11
17998: PPUSH
17999: LD_VAR 0 12
18003: PPUSH
18004: CALL_OW 272
18008: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18009: LD_ADDR_VAR 0 10
18013: PUSH
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_VAR 0 11
18023: PPUSH
18024: LD_VAR 0 12
18028: PPUSH
18029: CALL_OW 273
18033: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18034: LD_VAR 0 9
18038: PPUSH
18039: LD_VAR 0 10
18043: PPUSH
18044: CALL_OW 488
18048: PUSH
18049: LD_VAR 0 9
18053: PUSH
18054: LD_VAR 0 10
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_VAR 0 7
18067: IN
18068: NOT
18069: AND
18070: PUSH
18071: LD_VAR 0 9
18075: PPUSH
18076: LD_VAR 0 10
18080: PPUSH
18081: CALL_OW 458
18085: NOT
18086: AND
18087: IFFALSE 18129
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18089: LD_ADDR_VAR 0 7
18093: PUSH
18094: LD_VAR 0 7
18098: PPUSH
18099: LD_VAR 0 7
18103: PUSH
18104: LD_INT 1
18106: PLUS
18107: PPUSH
18108: LD_VAR 0 9
18112: PUSH
18113: LD_VAR 0 10
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PPUSH
18122: CALL_OW 1
18126: ST_TO_ADDR
18127: GO 18143
// i := i - 1 ;
18129: LD_ADDR_VAR 0 5
18133: PUSH
18134: LD_VAR 0 5
18138: PUSH
18139: LD_INT 1
18141: MINUS
18142: ST_TO_ADDR
// end ;
18143: GO 17949
18145: POP
18146: POP
// for i in tmp do
18147: LD_ADDR_VAR 0 5
18151: PUSH
18152: LD_VAR 0 7
18156: PUSH
18157: FOR_IN
18158: IFFALSE 18196
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_VAR 0 5
18169: PUSH
18170: LD_INT 1
18172: ARRAY
18173: PPUSH
18174: LD_VAR 0 5
18178: PUSH
18179: LD_INT 2
18181: ARRAY
18182: PPUSH
18183: CALL 17142 0 3
18187: NOT
18188: IFFALSE 18194
// exit ;
18190: POP
18191: POP
18192: GO 18198
18194: GO 18157
18196: POP
18197: POP
// end ;
18198: LD_VAR 0 4
18202: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18203: LD_INT 0
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
18211: PPUSH
// if not GetClass ( unit ) = class_sniper then
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 257
18221: PUSH
18222: LD_INT 5
18224: EQUAL
18225: NOT
18226: IFFALSE 18230
// exit ;
18228: GO 18618
// dist := 8 ;
18230: LD_ADDR_VAR 0 5
18234: PUSH
18235: LD_INT 8
18237: ST_TO_ADDR
// viewRange := 12 ;
18238: LD_ADDR_VAR 0 7
18242: PUSH
18243: LD_INT 12
18245: ST_TO_ADDR
// side := GetSide ( unit ) ;
18246: LD_ADDR_VAR 0 6
18250: PUSH
18251: LD_VAR 0 1
18255: PPUSH
18256: CALL_OW 255
18260: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18261: LD_INT 61
18263: PPUSH
18264: LD_VAR 0 6
18268: PPUSH
18269: CALL_OW 321
18273: PUSH
18274: LD_INT 2
18276: EQUAL
18277: IFFALSE 18287
// viewRange := 16 ;
18279: LD_ADDR_VAR 0 7
18283: PUSH
18284: LD_INT 16
18286: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18287: LD_VAR 0 1
18291: PPUSH
18292: LD_VAR 0 2
18296: PPUSH
18297: LD_VAR 0 3
18301: PPUSH
18302: CALL_OW 297
18306: PUSH
18307: LD_VAR 0 5
18311: GREATER
18312: IFFALSE 18391
// begin ComMoveXY ( unit , x , y ) ;
18314: LD_VAR 0 1
18318: PPUSH
18319: LD_VAR 0 2
18323: PPUSH
18324: LD_VAR 0 3
18328: PPUSH
18329: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18333: LD_INT 35
18335: PPUSH
18336: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18340: LD_VAR 0 1
18344: PPUSH
18345: LD_VAR 0 2
18349: PPUSH
18350: LD_VAR 0 3
18354: PPUSH
18355: CALL 70530 0 3
18359: NOT
18360: IFFALSE 18364
// exit ;
18362: GO 18618
// until GetDistUnitXY ( unit , x , y ) < dist ;
18364: LD_VAR 0 1
18368: PPUSH
18369: LD_VAR 0 2
18373: PPUSH
18374: LD_VAR 0 3
18378: PPUSH
18379: CALL_OW 297
18383: PUSH
18384: LD_VAR 0 5
18388: LESS
18389: IFFALSE 18333
// end ; ComTurnXY ( unit , x , y ) ;
18391: LD_VAR 0 1
18395: PPUSH
18396: LD_VAR 0 2
18400: PPUSH
18401: LD_VAR 0 3
18405: PPUSH
18406: CALL_OW 118
// wait ( 5 ) ;
18410: LD_INT 5
18412: PPUSH
18413: CALL_OW 67
// _d := GetDir ( unit ) ;
18417: LD_ADDR_VAR 0 10
18421: PUSH
18422: LD_VAR 0 1
18426: PPUSH
18427: CALL_OW 254
18431: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18432: LD_ADDR_VAR 0 8
18436: PUSH
18437: LD_VAR 0 1
18441: PPUSH
18442: CALL_OW 250
18446: PPUSH
18447: LD_VAR 0 10
18451: PPUSH
18452: LD_VAR 0 5
18456: PPUSH
18457: CALL_OW 272
18461: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18462: LD_ADDR_VAR 0 9
18466: PUSH
18467: LD_VAR 0 1
18471: PPUSH
18472: CALL_OW 251
18476: PPUSH
18477: LD_VAR 0 10
18481: PPUSH
18482: LD_VAR 0 5
18486: PPUSH
18487: CALL_OW 273
18491: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18492: LD_VAR 0 8
18496: PPUSH
18497: LD_VAR 0 9
18501: PPUSH
18502: CALL_OW 488
18506: NOT
18507: IFFALSE 18511
// exit ;
18509: GO 18618
// ComAnimCustom ( unit , 1 ) ;
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 1
18518: PPUSH
18519: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18523: LD_VAR 0 8
18527: PPUSH
18528: LD_VAR 0 9
18532: PPUSH
18533: LD_VAR 0 6
18537: PPUSH
18538: LD_VAR 0 7
18542: PPUSH
18543: CALL_OW 330
// repeat wait ( 1 ) ;
18547: LD_INT 1
18549: PPUSH
18550: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 316
18563: PUSH
18564: LD_VAR 0 1
18568: PPUSH
18569: CALL_OW 314
18573: OR
18574: PUSH
18575: LD_VAR 0 1
18579: PPUSH
18580: CALL_OW 302
18584: NOT
18585: OR
18586: PUSH
18587: LD_VAR 0 1
18591: PPUSH
18592: CALL_OW 301
18596: OR
18597: IFFALSE 18547
// RemoveSeeing ( _x , _y , side ) ;
18599: LD_VAR 0 8
18603: PPUSH
18604: LD_VAR 0 9
18608: PPUSH
18609: LD_VAR 0 6
18613: PPUSH
18614: CALL_OW 331
// end ; end_of_file
18618: LD_VAR 0 4
18622: RET
// every 0 0$1 do
18623: GO 18625
18625: DISABLE
// begin enable ;
18626: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18627: LD_STRING updateTimer(
18629: PUSH
18630: LD_OWVAR 1
18634: STR
18635: PUSH
18636: LD_STRING );
18638: STR
18639: PPUSH
18640: CALL_OW 559
// end ;
18644: END
// export function SOS_MapStart ( ) ; begin
18645: LD_INT 0
18647: PPUSH
// if streamModeActive then
18648: LD_EXP 54
18652: IFFALSE 18661
// DefineStreamItems ( true ) ;
18654: LD_INT 1
18656: PPUSH
18657: CALL 20315 0 1
// UpdateFactoryWaypoints ( ) ;
18661: CALL 33176 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18665: CALL 33433 0 0
// end ;
18669: LD_VAR 0 1
18673: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18674: LD_INT 0
18676: PPUSH
// if p2 = 100 then
18677: LD_VAR 0 2
18681: PUSH
18682: LD_INT 100
18684: EQUAL
18685: IFFALSE 19688
// begin if not StreamModeActive then
18687: LD_EXP 54
18691: NOT
18692: IFFALSE 18702
// StreamModeActive := true ;
18694: LD_ADDR_EXP 54
18698: PUSH
18699: LD_INT 1
18701: ST_TO_ADDR
// if p3 = 0 then
18702: LD_VAR 0 3
18706: PUSH
18707: LD_INT 0
18709: EQUAL
18710: IFFALSE 18716
// InitStreamMode ;
18712: CALL 19851 0 0
// if p3 = 1 then
18716: LD_VAR 0 3
18720: PUSH
18721: LD_INT 1
18723: EQUAL
18724: IFFALSE 18734
// sRocket := true ;
18726: LD_ADDR_EXP 59
18730: PUSH
18731: LD_INT 1
18733: ST_TO_ADDR
// if p3 = 2 then
18734: LD_VAR 0 3
18738: PUSH
18739: LD_INT 2
18741: EQUAL
18742: IFFALSE 18752
// sSpeed := true ;
18744: LD_ADDR_EXP 58
18748: PUSH
18749: LD_INT 1
18751: ST_TO_ADDR
// if p3 = 3 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 3
18759: EQUAL
18760: IFFALSE 18770
// sEngine := true ;
18762: LD_ADDR_EXP 60
18766: PUSH
18767: LD_INT 1
18769: ST_TO_ADDR
// if p3 = 4 then
18770: LD_VAR 0 3
18774: PUSH
18775: LD_INT 4
18777: EQUAL
18778: IFFALSE 18788
// sSpec := true ;
18780: LD_ADDR_EXP 57
18784: PUSH
18785: LD_INT 1
18787: ST_TO_ADDR
// if p3 = 5 then
18788: LD_VAR 0 3
18792: PUSH
18793: LD_INT 5
18795: EQUAL
18796: IFFALSE 18806
// sLevel := true ;
18798: LD_ADDR_EXP 61
18802: PUSH
18803: LD_INT 1
18805: ST_TO_ADDR
// if p3 = 6 then
18806: LD_VAR 0 3
18810: PUSH
18811: LD_INT 6
18813: EQUAL
18814: IFFALSE 18824
// sArmoury := true ;
18816: LD_ADDR_EXP 62
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// if p3 = 7 then
18824: LD_VAR 0 3
18828: PUSH
18829: LD_INT 7
18831: EQUAL
18832: IFFALSE 18842
// sRadar := true ;
18834: LD_ADDR_EXP 63
18838: PUSH
18839: LD_INT 1
18841: ST_TO_ADDR
// if p3 = 8 then
18842: LD_VAR 0 3
18846: PUSH
18847: LD_INT 8
18849: EQUAL
18850: IFFALSE 18860
// sBunker := true ;
18852: LD_ADDR_EXP 64
18856: PUSH
18857: LD_INT 1
18859: ST_TO_ADDR
// if p3 = 9 then
18860: LD_VAR 0 3
18864: PUSH
18865: LD_INT 9
18867: EQUAL
18868: IFFALSE 18878
// sHack := true ;
18870: LD_ADDR_EXP 65
18874: PUSH
18875: LD_INT 1
18877: ST_TO_ADDR
// if p3 = 10 then
18878: LD_VAR 0 3
18882: PUSH
18883: LD_INT 10
18885: EQUAL
18886: IFFALSE 18896
// sFire := true ;
18888: LD_ADDR_EXP 66
18892: PUSH
18893: LD_INT 1
18895: ST_TO_ADDR
// if p3 = 11 then
18896: LD_VAR 0 3
18900: PUSH
18901: LD_INT 11
18903: EQUAL
18904: IFFALSE 18914
// sRefresh := true ;
18906: LD_ADDR_EXP 67
18910: PUSH
18911: LD_INT 1
18913: ST_TO_ADDR
// if p3 = 12 then
18914: LD_VAR 0 3
18918: PUSH
18919: LD_INT 12
18921: EQUAL
18922: IFFALSE 18932
// sExp := true ;
18924: LD_ADDR_EXP 68
18928: PUSH
18929: LD_INT 1
18931: ST_TO_ADDR
// if p3 = 13 then
18932: LD_VAR 0 3
18936: PUSH
18937: LD_INT 13
18939: EQUAL
18940: IFFALSE 18950
// sDepot := true ;
18942: LD_ADDR_EXP 69
18946: PUSH
18947: LD_INT 1
18949: ST_TO_ADDR
// if p3 = 14 then
18950: LD_VAR 0 3
18954: PUSH
18955: LD_INT 14
18957: EQUAL
18958: IFFALSE 18968
// sFlag := true ;
18960: LD_ADDR_EXP 70
18964: PUSH
18965: LD_INT 1
18967: ST_TO_ADDR
// if p3 = 15 then
18968: LD_VAR 0 3
18972: PUSH
18973: LD_INT 15
18975: EQUAL
18976: IFFALSE 18986
// sKamikadze := true ;
18978: LD_ADDR_EXP 78
18982: PUSH
18983: LD_INT 1
18985: ST_TO_ADDR
// if p3 = 16 then
18986: LD_VAR 0 3
18990: PUSH
18991: LD_INT 16
18993: EQUAL
18994: IFFALSE 19004
// sTroll := true ;
18996: LD_ADDR_EXP 79
19000: PUSH
19001: LD_INT 1
19003: ST_TO_ADDR
// if p3 = 17 then
19004: LD_VAR 0 3
19008: PUSH
19009: LD_INT 17
19011: EQUAL
19012: IFFALSE 19022
// sSlow := true ;
19014: LD_ADDR_EXP 80
19018: PUSH
19019: LD_INT 1
19021: ST_TO_ADDR
// if p3 = 18 then
19022: LD_VAR 0 3
19026: PUSH
19027: LD_INT 18
19029: EQUAL
19030: IFFALSE 19040
// sLack := true ;
19032: LD_ADDR_EXP 81
19036: PUSH
19037: LD_INT 1
19039: ST_TO_ADDR
// if p3 = 19 then
19040: LD_VAR 0 3
19044: PUSH
19045: LD_INT 19
19047: EQUAL
19048: IFFALSE 19058
// sTank := true ;
19050: LD_ADDR_EXP 83
19054: PUSH
19055: LD_INT 1
19057: ST_TO_ADDR
// if p3 = 20 then
19058: LD_VAR 0 3
19062: PUSH
19063: LD_INT 20
19065: EQUAL
19066: IFFALSE 19076
// sRemote := true ;
19068: LD_ADDR_EXP 84
19072: PUSH
19073: LD_INT 1
19075: ST_TO_ADDR
// if p3 = 21 then
19076: LD_VAR 0 3
19080: PUSH
19081: LD_INT 21
19083: EQUAL
19084: IFFALSE 19094
// sPowell := true ;
19086: LD_ADDR_EXP 85
19090: PUSH
19091: LD_INT 1
19093: ST_TO_ADDR
// if p3 = 22 then
19094: LD_VAR 0 3
19098: PUSH
19099: LD_INT 22
19101: EQUAL
19102: IFFALSE 19112
// sTeleport := true ;
19104: LD_ADDR_EXP 88
19108: PUSH
19109: LD_INT 1
19111: ST_TO_ADDR
// if p3 = 23 then
19112: LD_VAR 0 3
19116: PUSH
19117: LD_INT 23
19119: EQUAL
19120: IFFALSE 19130
// sOilTower := true ;
19122: LD_ADDR_EXP 90
19126: PUSH
19127: LD_INT 1
19129: ST_TO_ADDR
// if p3 = 24 then
19130: LD_VAR 0 3
19134: PUSH
19135: LD_INT 24
19137: EQUAL
19138: IFFALSE 19148
// sShovel := true ;
19140: LD_ADDR_EXP 91
19144: PUSH
19145: LD_INT 1
19147: ST_TO_ADDR
// if p3 = 25 then
19148: LD_VAR 0 3
19152: PUSH
19153: LD_INT 25
19155: EQUAL
19156: IFFALSE 19166
// sSheik := true ;
19158: LD_ADDR_EXP 92
19162: PUSH
19163: LD_INT 1
19165: ST_TO_ADDR
// if p3 = 26 then
19166: LD_VAR 0 3
19170: PUSH
19171: LD_INT 26
19173: EQUAL
19174: IFFALSE 19184
// sEarthquake := true ;
19176: LD_ADDR_EXP 94
19180: PUSH
19181: LD_INT 1
19183: ST_TO_ADDR
// if p3 = 27 then
19184: LD_VAR 0 3
19188: PUSH
19189: LD_INT 27
19191: EQUAL
19192: IFFALSE 19202
// sAI := true ;
19194: LD_ADDR_EXP 95
19198: PUSH
19199: LD_INT 1
19201: ST_TO_ADDR
// if p3 = 28 then
19202: LD_VAR 0 3
19206: PUSH
19207: LD_INT 28
19209: EQUAL
19210: IFFALSE 19220
// sCargo := true ;
19212: LD_ADDR_EXP 98
19216: PUSH
19217: LD_INT 1
19219: ST_TO_ADDR
// if p3 = 29 then
19220: LD_VAR 0 3
19224: PUSH
19225: LD_INT 29
19227: EQUAL
19228: IFFALSE 19238
// sDLaser := true ;
19230: LD_ADDR_EXP 99
19234: PUSH
19235: LD_INT 1
19237: ST_TO_ADDR
// if p3 = 30 then
19238: LD_VAR 0 3
19242: PUSH
19243: LD_INT 30
19245: EQUAL
19246: IFFALSE 19256
// sExchange := true ;
19248: LD_ADDR_EXP 100
19252: PUSH
19253: LD_INT 1
19255: ST_TO_ADDR
// if p3 = 31 then
19256: LD_VAR 0 3
19260: PUSH
19261: LD_INT 31
19263: EQUAL
19264: IFFALSE 19274
// sFac := true ;
19266: LD_ADDR_EXP 101
19270: PUSH
19271: LD_INT 1
19273: ST_TO_ADDR
// if p3 = 32 then
19274: LD_VAR 0 3
19278: PUSH
19279: LD_INT 32
19281: EQUAL
19282: IFFALSE 19292
// sPower := true ;
19284: LD_ADDR_EXP 102
19288: PUSH
19289: LD_INT 1
19291: ST_TO_ADDR
// if p3 = 33 then
19292: LD_VAR 0 3
19296: PUSH
19297: LD_INT 33
19299: EQUAL
19300: IFFALSE 19310
// sRandom := true ;
19302: LD_ADDR_EXP 103
19306: PUSH
19307: LD_INT 1
19309: ST_TO_ADDR
// if p3 = 34 then
19310: LD_VAR 0 3
19314: PUSH
19315: LD_INT 34
19317: EQUAL
19318: IFFALSE 19328
// sShield := true ;
19320: LD_ADDR_EXP 104
19324: PUSH
19325: LD_INT 1
19327: ST_TO_ADDR
// if p3 = 35 then
19328: LD_VAR 0 3
19332: PUSH
19333: LD_INT 35
19335: EQUAL
19336: IFFALSE 19346
// sTime := true ;
19338: LD_ADDR_EXP 105
19342: PUSH
19343: LD_INT 1
19345: ST_TO_ADDR
// if p3 = 36 then
19346: LD_VAR 0 3
19350: PUSH
19351: LD_INT 36
19353: EQUAL
19354: IFFALSE 19364
// sTools := true ;
19356: LD_ADDR_EXP 106
19360: PUSH
19361: LD_INT 1
19363: ST_TO_ADDR
// if p3 = 101 then
19364: LD_VAR 0 3
19368: PUSH
19369: LD_INT 101
19371: EQUAL
19372: IFFALSE 19382
// sSold := true ;
19374: LD_ADDR_EXP 71
19378: PUSH
19379: LD_INT 1
19381: ST_TO_ADDR
// if p3 = 102 then
19382: LD_VAR 0 3
19386: PUSH
19387: LD_INT 102
19389: EQUAL
19390: IFFALSE 19400
// sDiff := true ;
19392: LD_ADDR_EXP 72
19396: PUSH
19397: LD_INT 1
19399: ST_TO_ADDR
// if p3 = 103 then
19400: LD_VAR 0 3
19404: PUSH
19405: LD_INT 103
19407: EQUAL
19408: IFFALSE 19418
// sFog := true ;
19410: LD_ADDR_EXP 75
19414: PUSH
19415: LD_INT 1
19417: ST_TO_ADDR
// if p3 = 104 then
19418: LD_VAR 0 3
19422: PUSH
19423: LD_INT 104
19425: EQUAL
19426: IFFALSE 19436
// sReset := true ;
19428: LD_ADDR_EXP 76
19432: PUSH
19433: LD_INT 1
19435: ST_TO_ADDR
// if p3 = 105 then
19436: LD_VAR 0 3
19440: PUSH
19441: LD_INT 105
19443: EQUAL
19444: IFFALSE 19454
// sSun := true ;
19446: LD_ADDR_EXP 77
19450: PUSH
19451: LD_INT 1
19453: ST_TO_ADDR
// if p3 = 106 then
19454: LD_VAR 0 3
19458: PUSH
19459: LD_INT 106
19461: EQUAL
19462: IFFALSE 19472
// sTiger := true ;
19464: LD_ADDR_EXP 73
19468: PUSH
19469: LD_INT 1
19471: ST_TO_ADDR
// if p3 = 107 then
19472: LD_VAR 0 3
19476: PUSH
19477: LD_INT 107
19479: EQUAL
19480: IFFALSE 19490
// sBomb := true ;
19482: LD_ADDR_EXP 74
19486: PUSH
19487: LD_INT 1
19489: ST_TO_ADDR
// if p3 = 108 then
19490: LD_VAR 0 3
19494: PUSH
19495: LD_INT 108
19497: EQUAL
19498: IFFALSE 19508
// sWound := true ;
19500: LD_ADDR_EXP 82
19504: PUSH
19505: LD_INT 1
19507: ST_TO_ADDR
// if p3 = 109 then
19508: LD_VAR 0 3
19512: PUSH
19513: LD_INT 109
19515: EQUAL
19516: IFFALSE 19526
// sBetray := true ;
19518: LD_ADDR_EXP 86
19522: PUSH
19523: LD_INT 1
19525: ST_TO_ADDR
// if p3 = 110 then
19526: LD_VAR 0 3
19530: PUSH
19531: LD_INT 110
19533: EQUAL
19534: IFFALSE 19544
// sContamin := true ;
19536: LD_ADDR_EXP 87
19540: PUSH
19541: LD_INT 1
19543: ST_TO_ADDR
// if p3 = 111 then
19544: LD_VAR 0 3
19548: PUSH
19549: LD_INT 111
19551: EQUAL
19552: IFFALSE 19562
// sOil := true ;
19554: LD_ADDR_EXP 89
19558: PUSH
19559: LD_INT 1
19561: ST_TO_ADDR
// if p3 = 112 then
19562: LD_VAR 0 3
19566: PUSH
19567: LD_INT 112
19569: EQUAL
19570: IFFALSE 19580
// sStu := true ;
19572: LD_ADDR_EXP 93
19576: PUSH
19577: LD_INT 1
19579: ST_TO_ADDR
// if p3 = 113 then
19580: LD_VAR 0 3
19584: PUSH
19585: LD_INT 113
19587: EQUAL
19588: IFFALSE 19598
// sBazooka := true ;
19590: LD_ADDR_EXP 96
19594: PUSH
19595: LD_INT 1
19597: ST_TO_ADDR
// if p3 = 114 then
19598: LD_VAR 0 3
19602: PUSH
19603: LD_INT 114
19605: EQUAL
19606: IFFALSE 19616
// sMortar := true ;
19608: LD_ADDR_EXP 97
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
// if p3 = 115 then
19616: LD_VAR 0 3
19620: PUSH
19621: LD_INT 115
19623: EQUAL
19624: IFFALSE 19634
// sRanger := true ;
19626: LD_ADDR_EXP 107
19630: PUSH
19631: LD_INT 1
19633: ST_TO_ADDR
// if p3 = 116 then
19634: LD_VAR 0 3
19638: PUSH
19639: LD_INT 116
19641: EQUAL
19642: IFFALSE 19652
// sComputer := true ;
19644: LD_ADDR_EXP 108
19648: PUSH
19649: LD_INT 1
19651: ST_TO_ADDR
// if p3 = 117 then
19652: LD_VAR 0 3
19656: PUSH
19657: LD_INT 117
19659: EQUAL
19660: IFFALSE 19670
// s30 := true ;
19662: LD_ADDR_EXP 109
19666: PUSH
19667: LD_INT 1
19669: ST_TO_ADDR
// if p3 = 118 then
19670: LD_VAR 0 3
19674: PUSH
19675: LD_INT 118
19677: EQUAL
19678: IFFALSE 19688
// s60 := true ;
19680: LD_ADDR_EXP 110
19684: PUSH
19685: LD_INT 1
19687: ST_TO_ADDR
// end ; if p2 = 101 then
19688: LD_VAR 0 2
19692: PUSH
19693: LD_INT 101
19695: EQUAL
19696: IFFALSE 19824
// begin case p3 of 1 :
19698: LD_VAR 0 3
19702: PUSH
19703: LD_INT 1
19705: DOUBLE
19706: EQUAL
19707: IFTRUE 19711
19709: GO 19718
19711: POP
// hHackUnlimitedResources ; 2 :
19712: CALL 31922 0 0
19716: GO 19824
19718: LD_INT 2
19720: DOUBLE
19721: EQUAL
19722: IFTRUE 19726
19724: GO 19733
19726: POP
// hHackSetLevel10 ; 3 :
19727: CALL 32055 0 0
19731: GO 19824
19733: LD_INT 3
19735: DOUBLE
19736: EQUAL
19737: IFTRUE 19741
19739: GO 19748
19741: POP
// hHackSetLevel10YourUnits ; 4 :
19742: CALL 32140 0 0
19746: GO 19824
19748: LD_INT 4
19750: DOUBLE
19751: EQUAL
19752: IFTRUE 19756
19754: GO 19763
19756: POP
// hHackInvincible ; 5 :
19757: CALL 32588 0 0
19761: GO 19824
19763: LD_INT 5
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19778
19771: POP
// hHackInvisible ; 6 :
19772: CALL 32699 0 0
19776: GO 19824
19778: LD_INT 6
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19793
19786: POP
// hHackChangeYourSide ; 7 :
19787: CALL 32756 0 0
19791: GO 19824
19793: LD_INT 7
19795: DOUBLE
19796: EQUAL
19797: IFTRUE 19801
19799: GO 19808
19801: POP
// hHackChangeUnitSide ; 8 :
19802: CALL 32798 0 0
19806: GO 19824
19808: LD_INT 8
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19823
19816: POP
// hHackFog ; end ;
19817: CALL 32899 0 0
19821: GO 19824
19823: POP
// end ; end ;
19824: LD_VAR 0 7
19828: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19829: GO 19831
19831: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19832: LD_STRING initStreamRollete();
19834: PPUSH
19835: CALL_OW 559
// InitStreamMode ;
19839: CALL 19851 0 0
// DefineStreamItems ( false ) ;
19843: LD_INT 0
19845: PPUSH
19846: CALL 20315 0 1
// end ;
19850: END
// function InitStreamMode ; begin
19851: LD_INT 0
19853: PPUSH
// streamModeActive := false ;
19854: LD_ADDR_EXP 54
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// normalCounter := 36 ;
19862: LD_ADDR_EXP 55
19866: PUSH
19867: LD_INT 36
19869: ST_TO_ADDR
// hardcoreCounter := 18 ;
19870: LD_ADDR_EXP 56
19874: PUSH
19875: LD_INT 18
19877: ST_TO_ADDR
// sRocket := false ;
19878: LD_ADDR_EXP 59
19882: PUSH
19883: LD_INT 0
19885: ST_TO_ADDR
// sSpeed := false ;
19886: LD_ADDR_EXP 58
19890: PUSH
19891: LD_INT 0
19893: ST_TO_ADDR
// sEngine := false ;
19894: LD_ADDR_EXP 60
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// sSpec := false ;
19902: LD_ADDR_EXP 57
19906: PUSH
19907: LD_INT 0
19909: ST_TO_ADDR
// sLevel := false ;
19910: LD_ADDR_EXP 61
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// sArmoury := false ;
19918: LD_ADDR_EXP 62
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// sRadar := false ;
19926: LD_ADDR_EXP 63
19930: PUSH
19931: LD_INT 0
19933: ST_TO_ADDR
// sBunker := false ;
19934: LD_ADDR_EXP 64
19938: PUSH
19939: LD_INT 0
19941: ST_TO_ADDR
// sHack := false ;
19942: LD_ADDR_EXP 65
19946: PUSH
19947: LD_INT 0
19949: ST_TO_ADDR
// sFire := false ;
19950: LD_ADDR_EXP 66
19954: PUSH
19955: LD_INT 0
19957: ST_TO_ADDR
// sRefresh := false ;
19958: LD_ADDR_EXP 67
19962: PUSH
19963: LD_INT 0
19965: ST_TO_ADDR
// sExp := false ;
19966: LD_ADDR_EXP 68
19970: PUSH
19971: LD_INT 0
19973: ST_TO_ADDR
// sDepot := false ;
19974: LD_ADDR_EXP 69
19978: PUSH
19979: LD_INT 0
19981: ST_TO_ADDR
// sFlag := false ;
19982: LD_ADDR_EXP 70
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// sKamikadze := false ;
19990: LD_ADDR_EXP 78
19994: PUSH
19995: LD_INT 0
19997: ST_TO_ADDR
// sTroll := false ;
19998: LD_ADDR_EXP 79
20002: PUSH
20003: LD_INT 0
20005: ST_TO_ADDR
// sSlow := false ;
20006: LD_ADDR_EXP 80
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// sLack := false ;
20014: LD_ADDR_EXP 81
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// sTank := false ;
20022: LD_ADDR_EXP 83
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// sRemote := false ;
20030: LD_ADDR_EXP 84
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// sPowell := false ;
20038: LD_ADDR_EXP 85
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// sTeleport := false ;
20046: LD_ADDR_EXP 88
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sOilTower := false ;
20054: LD_ADDR_EXP 90
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sShovel := false ;
20062: LD_ADDR_EXP 91
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sSheik := false ;
20070: LD_ADDR_EXP 92
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sEarthquake := false ;
20078: LD_ADDR_EXP 94
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sAI := false ;
20086: LD_ADDR_EXP 95
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sCargo := false ;
20094: LD_ADDR_EXP 98
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// sDLaser := false ;
20102: LD_ADDR_EXP 99
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// sExchange := false ;
20110: LD_ADDR_EXP 100
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
// sFac := false ;
20118: LD_ADDR_EXP 101
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// sPower := false ;
20126: LD_ADDR_EXP 102
20130: PUSH
20131: LD_INT 0
20133: ST_TO_ADDR
// sRandom := false ;
20134: LD_ADDR_EXP 103
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// sShield := false ;
20142: LD_ADDR_EXP 104
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// sTime := false ;
20150: LD_ADDR_EXP 105
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// sTools := false ;
20158: LD_ADDR_EXP 106
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// sSold := false ;
20166: LD_ADDR_EXP 71
20170: PUSH
20171: LD_INT 0
20173: ST_TO_ADDR
// sDiff := false ;
20174: LD_ADDR_EXP 72
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// sFog := false ;
20182: LD_ADDR_EXP 75
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// sReset := false ;
20190: LD_ADDR_EXP 76
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// sSun := false ;
20198: LD_ADDR_EXP 77
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
// sTiger := false ;
20206: LD_ADDR_EXP 73
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// sBomb := false ;
20214: LD_ADDR_EXP 74
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// sWound := false ;
20222: LD_ADDR_EXP 82
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// sBetray := false ;
20230: LD_ADDR_EXP 86
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// sContamin := false ;
20238: LD_ADDR_EXP 87
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// sOil := false ;
20246: LD_ADDR_EXP 89
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// sStu := false ;
20254: LD_ADDR_EXP 93
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// sBazooka := false ;
20262: LD_ADDR_EXP 96
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// sMortar := false ;
20270: LD_ADDR_EXP 97
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// sRanger := false ;
20278: LD_ADDR_EXP 107
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// sComputer := false ;
20286: LD_ADDR_EXP 108
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// s30 := false ;
20294: LD_ADDR_EXP 109
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// s60 := false ;
20302: LD_ADDR_EXP 110
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// end ;
20310: LD_VAR 0 1
20314: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20315: LD_INT 0
20317: PPUSH
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
20322: PPUSH
20323: PPUSH
// result := [ ] ;
20324: LD_ADDR_VAR 0 2
20328: PUSH
20329: EMPTY
20330: ST_TO_ADDR
// if campaign_id = 1 then
20331: LD_OWVAR 69
20335: PUSH
20336: LD_INT 1
20338: EQUAL
20339: IFFALSE 23505
// begin case mission_number of 1 :
20341: LD_OWVAR 70
20345: PUSH
20346: LD_INT 1
20348: DOUBLE
20349: EQUAL
20350: IFTRUE 20354
20352: GO 20430
20354: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20355: LD_ADDR_VAR 0 2
20359: PUSH
20360: LD_INT 2
20362: PUSH
20363: LD_INT 4
20365: PUSH
20366: LD_INT 11
20368: PUSH
20369: LD_INT 12
20371: PUSH
20372: LD_INT 15
20374: PUSH
20375: LD_INT 16
20377: PUSH
20378: LD_INT 22
20380: PUSH
20381: LD_INT 23
20383: PUSH
20384: LD_INT 26
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 101
20400: PUSH
20401: LD_INT 102
20403: PUSH
20404: LD_INT 106
20406: PUSH
20407: LD_INT 116
20409: PUSH
20410: LD_INT 117
20412: PUSH
20413: LD_INT 118
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: ST_TO_ADDR
20428: GO 23503
20430: LD_INT 2
20432: DOUBLE
20433: EQUAL
20434: IFTRUE 20438
20436: GO 20522
20438: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20439: LD_ADDR_VAR 0 2
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: LD_INT 4
20449: PUSH
20450: LD_INT 11
20452: PUSH
20453: LD_INT 12
20455: PUSH
20456: LD_INT 15
20458: PUSH
20459: LD_INT 16
20461: PUSH
20462: LD_INT 22
20464: PUSH
20465: LD_INT 23
20467: PUSH
20468: LD_INT 26
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 101
20484: PUSH
20485: LD_INT 102
20487: PUSH
20488: LD_INT 105
20490: PUSH
20491: LD_INT 106
20493: PUSH
20494: LD_INT 108
20496: PUSH
20497: LD_INT 116
20499: PUSH
20500: LD_INT 117
20502: PUSH
20503: LD_INT 118
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: ST_TO_ADDR
20520: GO 23503
20522: LD_INT 3
20524: DOUBLE
20525: EQUAL
20526: IFTRUE 20530
20528: GO 20618
20530: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20531: LD_ADDR_VAR 0 2
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: LD_INT 4
20541: PUSH
20542: LD_INT 5
20544: PUSH
20545: LD_INT 11
20547: PUSH
20548: LD_INT 12
20550: PUSH
20551: LD_INT 15
20553: PUSH
20554: LD_INT 16
20556: PUSH
20557: LD_INT 22
20559: PUSH
20560: LD_INT 26
20562: PUSH
20563: LD_INT 36
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 101
20580: PUSH
20581: LD_INT 102
20583: PUSH
20584: LD_INT 105
20586: PUSH
20587: LD_INT 106
20589: PUSH
20590: LD_INT 108
20592: PUSH
20593: LD_INT 116
20595: PUSH
20596: LD_INT 117
20598: PUSH
20599: LD_INT 118
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: ST_TO_ADDR
20616: GO 23503
20618: LD_INT 4
20620: DOUBLE
20621: EQUAL
20622: IFTRUE 20626
20624: GO 20722
20626: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20627: LD_ADDR_VAR 0 2
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: LD_INT 4
20637: PUSH
20638: LD_INT 5
20640: PUSH
20641: LD_INT 8
20643: PUSH
20644: LD_INT 11
20646: PUSH
20647: LD_INT 12
20649: PUSH
20650: LD_INT 15
20652: PUSH
20653: LD_INT 16
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 23
20661: PUSH
20662: LD_INT 26
20664: PUSH
20665: LD_INT 36
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 101
20684: PUSH
20685: LD_INT 102
20687: PUSH
20688: LD_INT 105
20690: PUSH
20691: LD_INT 106
20693: PUSH
20694: LD_INT 108
20696: PUSH
20697: LD_INT 116
20699: PUSH
20700: LD_INT 117
20702: PUSH
20703: LD_INT 118
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: ST_TO_ADDR
20720: GO 23503
20722: LD_INT 5
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20842
20730: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20731: LD_ADDR_VAR 0 2
20735: PUSH
20736: LD_INT 2
20738: PUSH
20739: LD_INT 4
20741: PUSH
20742: LD_INT 5
20744: PUSH
20745: LD_INT 6
20747: PUSH
20748: LD_INT 8
20750: PUSH
20751: LD_INT 11
20753: PUSH
20754: LD_INT 12
20756: PUSH
20757: LD_INT 15
20759: PUSH
20760: LD_INT 16
20762: PUSH
20763: LD_INT 22
20765: PUSH
20766: LD_INT 23
20768: PUSH
20769: LD_INT 25
20771: PUSH
20772: LD_INT 26
20774: PUSH
20775: LD_INT 36
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 101
20796: PUSH
20797: LD_INT 102
20799: PUSH
20800: LD_INT 105
20802: PUSH
20803: LD_INT 106
20805: PUSH
20806: LD_INT 108
20808: PUSH
20809: LD_INT 109
20811: PUSH
20812: LD_INT 112
20814: PUSH
20815: LD_INT 116
20817: PUSH
20818: LD_INT 117
20820: PUSH
20821: LD_INT 118
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: ST_TO_ADDR
20840: GO 23503
20842: LD_INT 6
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20850
20848: GO 20982
20850: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20851: LD_ADDR_VAR 0 2
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: LD_INT 4
20861: PUSH
20862: LD_INT 5
20864: PUSH
20865: LD_INT 6
20867: PUSH
20868: LD_INT 8
20870: PUSH
20871: LD_INT 11
20873: PUSH
20874: LD_INT 12
20876: PUSH
20877: LD_INT 15
20879: PUSH
20880: LD_INT 16
20882: PUSH
20883: LD_INT 20
20885: PUSH
20886: LD_INT 21
20888: PUSH
20889: LD_INT 22
20891: PUSH
20892: LD_INT 23
20894: PUSH
20895: LD_INT 25
20897: PUSH
20898: LD_INT 26
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: LD_INT 31
20906: PUSH
20907: LD_INT 32
20909: PUSH
20910: LD_INT 36
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 101
20936: PUSH
20937: LD_INT 102
20939: PUSH
20940: LD_INT 105
20942: PUSH
20943: LD_INT 106
20945: PUSH
20946: LD_INT 108
20948: PUSH
20949: LD_INT 109
20951: PUSH
20952: LD_INT 112
20954: PUSH
20955: LD_INT 116
20957: PUSH
20958: LD_INT 117
20960: PUSH
20961: LD_INT 118
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: ST_TO_ADDR
20980: GO 23503
20982: LD_INT 7
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 21102
20990: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20991: LD_ADDR_VAR 0 2
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: LD_INT 4
21001: PUSH
21002: LD_INT 5
21004: PUSH
21005: LD_INT 7
21007: PUSH
21008: LD_INT 11
21010: PUSH
21011: LD_INT 12
21013: PUSH
21014: LD_INT 15
21016: PUSH
21017: LD_INT 16
21019: PUSH
21020: LD_INT 20
21022: PUSH
21023: LD_INT 21
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_INT 23
21031: PUSH
21032: LD_INT 25
21034: PUSH
21035: LD_INT 26
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 101
21056: PUSH
21057: LD_INT 102
21059: PUSH
21060: LD_INT 103
21062: PUSH
21063: LD_INT 105
21065: PUSH
21066: LD_INT 106
21068: PUSH
21069: LD_INT 108
21071: PUSH
21072: LD_INT 112
21074: PUSH
21075: LD_INT 116
21077: PUSH
21078: LD_INT 117
21080: PUSH
21081: LD_INT 118
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: ST_TO_ADDR
21100: GO 23503
21102: LD_INT 8
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21250
21110: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21111: LD_ADDR_VAR 0 2
21115: PUSH
21116: LD_INT 2
21118: PUSH
21119: LD_INT 4
21121: PUSH
21122: LD_INT 5
21124: PUSH
21125: LD_INT 6
21127: PUSH
21128: LD_INT 7
21130: PUSH
21131: LD_INT 8
21133: PUSH
21134: LD_INT 11
21136: PUSH
21137: LD_INT 12
21139: PUSH
21140: LD_INT 15
21142: PUSH
21143: LD_INT 16
21145: PUSH
21146: LD_INT 20
21148: PUSH
21149: LD_INT 21
21151: PUSH
21152: LD_INT 22
21154: PUSH
21155: LD_INT 23
21157: PUSH
21158: LD_INT 25
21160: PUSH
21161: LD_INT 26
21163: PUSH
21164: LD_INT 30
21166: PUSH
21167: LD_INT 31
21169: PUSH
21170: LD_INT 32
21172: PUSH
21173: LD_INT 36
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 101
21200: PUSH
21201: LD_INT 102
21203: PUSH
21204: LD_INT 103
21206: PUSH
21207: LD_INT 105
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 108
21215: PUSH
21216: LD_INT 109
21218: PUSH
21219: LD_INT 112
21221: PUSH
21222: LD_INT 116
21224: PUSH
21225: LD_INT 117
21227: PUSH
21228: LD_INT 118
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: ST_TO_ADDR
21248: GO 23503
21250: LD_INT 9
21252: DOUBLE
21253: EQUAL
21254: IFTRUE 21258
21256: GO 21406
21258: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21259: LD_ADDR_VAR 0 2
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: LD_INT 4
21269: PUSH
21270: LD_INT 5
21272: PUSH
21273: LD_INT 6
21275: PUSH
21276: LD_INT 7
21278: PUSH
21279: LD_INT 8
21281: PUSH
21282: LD_INT 11
21284: PUSH
21285: LD_INT 12
21287: PUSH
21288: LD_INT 15
21290: PUSH
21291: LD_INT 16
21293: PUSH
21294: LD_INT 20
21296: PUSH
21297: LD_INT 21
21299: PUSH
21300: LD_INT 22
21302: PUSH
21303: LD_INT 23
21305: PUSH
21306: LD_INT 25
21308: PUSH
21309: LD_INT 26
21311: PUSH
21312: LD_INT 28
21314: PUSH
21315: LD_INT 30
21317: PUSH
21318: LD_INT 31
21320: PUSH
21321: LD_INT 32
21323: PUSH
21324: LD_INT 36
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 101
21352: PUSH
21353: LD_INT 102
21355: PUSH
21356: LD_INT 103
21358: PUSH
21359: LD_INT 105
21361: PUSH
21362: LD_INT 106
21364: PUSH
21365: LD_INT 108
21367: PUSH
21368: LD_INT 109
21370: PUSH
21371: LD_INT 112
21373: PUSH
21374: LD_INT 114
21376: PUSH
21377: LD_INT 116
21379: PUSH
21380: LD_INT 117
21382: PUSH
21383: LD_INT 118
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: ST_TO_ADDR
21404: GO 23503
21406: LD_INT 10
21408: DOUBLE
21409: EQUAL
21410: IFTRUE 21414
21412: GO 21610
21414: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21415: LD_ADDR_VAR 0 2
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: LD_INT 4
21425: PUSH
21426: LD_INT 5
21428: PUSH
21429: LD_INT 6
21431: PUSH
21432: LD_INT 7
21434: PUSH
21435: LD_INT 8
21437: PUSH
21438: LD_INT 9
21440: PUSH
21441: LD_INT 10
21443: PUSH
21444: LD_INT 11
21446: PUSH
21447: LD_INT 12
21449: PUSH
21450: LD_INT 13
21452: PUSH
21453: LD_INT 14
21455: PUSH
21456: LD_INT 15
21458: PUSH
21459: LD_INT 16
21461: PUSH
21462: LD_INT 17
21464: PUSH
21465: LD_INT 18
21467: PUSH
21468: LD_INT 19
21470: PUSH
21471: LD_INT 20
21473: PUSH
21474: LD_INT 21
21476: PUSH
21477: LD_INT 22
21479: PUSH
21480: LD_INT 23
21482: PUSH
21483: LD_INT 24
21485: PUSH
21486: LD_INT 25
21488: PUSH
21489: LD_INT 26
21491: PUSH
21492: LD_INT 28
21494: PUSH
21495: LD_INT 30
21497: PUSH
21498: LD_INT 31
21500: PUSH
21501: LD_INT 32
21503: PUSH
21504: LD_INT 36
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 101
21540: PUSH
21541: LD_INT 102
21543: PUSH
21544: LD_INT 103
21546: PUSH
21547: LD_INT 104
21549: PUSH
21550: LD_INT 105
21552: PUSH
21553: LD_INT 106
21555: PUSH
21556: LD_INT 107
21558: PUSH
21559: LD_INT 108
21561: PUSH
21562: LD_INT 109
21564: PUSH
21565: LD_INT 110
21567: PUSH
21568: LD_INT 111
21570: PUSH
21571: LD_INT 112
21573: PUSH
21574: LD_INT 114
21576: PUSH
21577: LD_INT 116
21579: PUSH
21580: LD_INT 117
21582: PUSH
21583: LD_INT 118
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: ST_TO_ADDR
21608: GO 23503
21610: LD_INT 11
21612: DOUBLE
21613: EQUAL
21614: IFTRUE 21618
21616: GO 21822
21618: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 3
21629: PUSH
21630: LD_INT 4
21632: PUSH
21633: LD_INT 5
21635: PUSH
21636: LD_INT 6
21638: PUSH
21639: LD_INT 7
21641: PUSH
21642: LD_INT 8
21644: PUSH
21645: LD_INT 9
21647: PUSH
21648: LD_INT 10
21650: PUSH
21651: LD_INT 11
21653: PUSH
21654: LD_INT 12
21656: PUSH
21657: LD_INT 13
21659: PUSH
21660: LD_INT 14
21662: PUSH
21663: LD_INT 15
21665: PUSH
21666: LD_INT 16
21668: PUSH
21669: LD_INT 17
21671: PUSH
21672: LD_INT 18
21674: PUSH
21675: LD_INT 19
21677: PUSH
21678: LD_INT 20
21680: PUSH
21681: LD_INT 21
21683: PUSH
21684: LD_INT 22
21686: PUSH
21687: LD_INT 23
21689: PUSH
21690: LD_INT 24
21692: PUSH
21693: LD_INT 25
21695: PUSH
21696: LD_INT 26
21698: PUSH
21699: LD_INT 28
21701: PUSH
21702: LD_INT 30
21704: PUSH
21705: LD_INT 31
21707: PUSH
21708: LD_INT 32
21710: PUSH
21711: LD_INT 34
21713: PUSH
21714: LD_INT 36
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 101
21752: PUSH
21753: LD_INT 102
21755: PUSH
21756: LD_INT 103
21758: PUSH
21759: LD_INT 104
21761: PUSH
21762: LD_INT 105
21764: PUSH
21765: LD_INT 106
21767: PUSH
21768: LD_INT 107
21770: PUSH
21771: LD_INT 108
21773: PUSH
21774: LD_INT 109
21776: PUSH
21777: LD_INT 110
21779: PUSH
21780: LD_INT 111
21782: PUSH
21783: LD_INT 112
21785: PUSH
21786: LD_INT 114
21788: PUSH
21789: LD_INT 116
21791: PUSH
21792: LD_INT 117
21794: PUSH
21795: LD_INT 118
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: ST_TO_ADDR
21820: GO 23503
21822: LD_INT 12
21824: DOUBLE
21825: EQUAL
21826: IFTRUE 21830
21828: GO 22050
21830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21831: LD_ADDR_VAR 0 2
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: LD_INT 3
21844: PUSH
21845: LD_INT 4
21847: PUSH
21848: LD_INT 5
21850: PUSH
21851: LD_INT 6
21853: PUSH
21854: LD_INT 7
21856: PUSH
21857: LD_INT 8
21859: PUSH
21860: LD_INT 9
21862: PUSH
21863: LD_INT 10
21865: PUSH
21866: LD_INT 11
21868: PUSH
21869: LD_INT 12
21871: PUSH
21872: LD_INT 13
21874: PUSH
21875: LD_INT 14
21877: PUSH
21878: LD_INT 15
21880: PUSH
21881: LD_INT 16
21883: PUSH
21884: LD_INT 17
21886: PUSH
21887: LD_INT 18
21889: PUSH
21890: LD_INT 19
21892: PUSH
21893: LD_INT 20
21895: PUSH
21896: LD_INT 21
21898: PUSH
21899: LD_INT 22
21901: PUSH
21902: LD_INT 23
21904: PUSH
21905: LD_INT 24
21907: PUSH
21908: LD_INT 25
21910: PUSH
21911: LD_INT 26
21913: PUSH
21914: LD_INT 27
21916: PUSH
21917: LD_INT 28
21919: PUSH
21920: LD_INT 30
21922: PUSH
21923: LD_INT 31
21925: PUSH
21926: LD_INT 32
21928: PUSH
21929: LD_INT 33
21931: PUSH
21932: LD_INT 34
21934: PUSH
21935: LD_INT 36
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 101
21976: PUSH
21977: LD_INT 102
21979: PUSH
21980: LD_INT 103
21982: PUSH
21983: LD_INT 104
21985: PUSH
21986: LD_INT 105
21988: PUSH
21989: LD_INT 106
21991: PUSH
21992: LD_INT 107
21994: PUSH
21995: LD_INT 108
21997: PUSH
21998: LD_INT 109
22000: PUSH
22001: LD_INT 110
22003: PUSH
22004: LD_INT 111
22006: PUSH
22007: LD_INT 112
22009: PUSH
22010: LD_INT 113
22012: PUSH
22013: LD_INT 114
22015: PUSH
22016: LD_INT 116
22018: PUSH
22019: LD_INT 117
22021: PUSH
22022: LD_INT 118
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: ST_TO_ADDR
22048: GO 23503
22050: LD_INT 13
22052: DOUBLE
22053: EQUAL
22054: IFTRUE 22058
22056: GO 22266
22058: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22059: LD_ADDR_VAR 0 2
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: LD_INT 3
22072: PUSH
22073: LD_INT 4
22075: PUSH
22076: LD_INT 5
22078: PUSH
22079: LD_INT 8
22081: PUSH
22082: LD_INT 9
22084: PUSH
22085: LD_INT 10
22087: PUSH
22088: LD_INT 11
22090: PUSH
22091: LD_INT 12
22093: PUSH
22094: LD_INT 14
22096: PUSH
22097: LD_INT 15
22099: PUSH
22100: LD_INT 16
22102: PUSH
22103: LD_INT 17
22105: PUSH
22106: LD_INT 18
22108: PUSH
22109: LD_INT 19
22111: PUSH
22112: LD_INT 20
22114: PUSH
22115: LD_INT 21
22117: PUSH
22118: LD_INT 22
22120: PUSH
22121: LD_INT 23
22123: PUSH
22124: LD_INT 24
22126: PUSH
22127: LD_INT 25
22129: PUSH
22130: LD_INT 26
22132: PUSH
22133: LD_INT 27
22135: PUSH
22136: LD_INT 28
22138: PUSH
22139: LD_INT 30
22141: PUSH
22142: LD_INT 31
22144: PUSH
22145: LD_INT 32
22147: PUSH
22148: LD_INT 33
22150: PUSH
22151: LD_INT 34
22153: PUSH
22154: LD_INT 36
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 101
22192: PUSH
22193: LD_INT 102
22195: PUSH
22196: LD_INT 103
22198: PUSH
22199: LD_INT 104
22201: PUSH
22202: LD_INT 105
22204: PUSH
22205: LD_INT 106
22207: PUSH
22208: LD_INT 107
22210: PUSH
22211: LD_INT 108
22213: PUSH
22214: LD_INT 109
22216: PUSH
22217: LD_INT 110
22219: PUSH
22220: LD_INT 111
22222: PUSH
22223: LD_INT 112
22225: PUSH
22226: LD_INT 113
22228: PUSH
22229: LD_INT 114
22231: PUSH
22232: LD_INT 116
22234: PUSH
22235: LD_INT 117
22237: PUSH
22238: LD_INT 118
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: ST_TO_ADDR
22264: GO 23503
22266: LD_INT 14
22268: DOUBLE
22269: EQUAL
22270: IFTRUE 22274
22272: GO 22498
22274: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22275: LD_ADDR_VAR 0 2
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: LD_INT 2
22285: PUSH
22286: LD_INT 3
22288: PUSH
22289: LD_INT 4
22291: PUSH
22292: LD_INT 5
22294: PUSH
22295: LD_INT 6
22297: PUSH
22298: LD_INT 7
22300: PUSH
22301: LD_INT 8
22303: PUSH
22304: LD_INT 9
22306: PUSH
22307: LD_INT 10
22309: PUSH
22310: LD_INT 11
22312: PUSH
22313: LD_INT 12
22315: PUSH
22316: LD_INT 13
22318: PUSH
22319: LD_INT 14
22321: PUSH
22322: LD_INT 15
22324: PUSH
22325: LD_INT 16
22327: PUSH
22328: LD_INT 17
22330: PUSH
22331: LD_INT 18
22333: PUSH
22334: LD_INT 19
22336: PUSH
22337: LD_INT 20
22339: PUSH
22340: LD_INT 21
22342: PUSH
22343: LD_INT 22
22345: PUSH
22346: LD_INT 23
22348: PUSH
22349: LD_INT 24
22351: PUSH
22352: LD_INT 25
22354: PUSH
22355: LD_INT 26
22357: PUSH
22358: LD_INT 27
22360: PUSH
22361: LD_INT 28
22363: PUSH
22364: LD_INT 29
22366: PUSH
22367: LD_INT 30
22369: PUSH
22370: LD_INT 31
22372: PUSH
22373: LD_INT 32
22375: PUSH
22376: LD_INT 33
22378: PUSH
22379: LD_INT 34
22381: PUSH
22382: LD_INT 36
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 101
22424: PUSH
22425: LD_INT 102
22427: PUSH
22428: LD_INT 103
22430: PUSH
22431: LD_INT 104
22433: PUSH
22434: LD_INT 105
22436: PUSH
22437: LD_INT 106
22439: PUSH
22440: LD_INT 107
22442: PUSH
22443: LD_INT 108
22445: PUSH
22446: LD_INT 109
22448: PUSH
22449: LD_INT 110
22451: PUSH
22452: LD_INT 111
22454: PUSH
22455: LD_INT 112
22457: PUSH
22458: LD_INT 113
22460: PUSH
22461: LD_INT 114
22463: PUSH
22464: LD_INT 116
22466: PUSH
22467: LD_INT 117
22469: PUSH
22470: LD_INT 118
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: ST_TO_ADDR
22496: GO 23503
22498: LD_INT 15
22500: DOUBLE
22501: EQUAL
22502: IFTRUE 22506
22504: GO 22730
22506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22507: LD_ADDR_VAR 0 2
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: LD_INT 4
22523: PUSH
22524: LD_INT 5
22526: PUSH
22527: LD_INT 6
22529: PUSH
22530: LD_INT 7
22532: PUSH
22533: LD_INT 8
22535: PUSH
22536: LD_INT 9
22538: PUSH
22539: LD_INT 10
22541: PUSH
22542: LD_INT 11
22544: PUSH
22545: LD_INT 12
22547: PUSH
22548: LD_INT 13
22550: PUSH
22551: LD_INT 14
22553: PUSH
22554: LD_INT 15
22556: PUSH
22557: LD_INT 16
22559: PUSH
22560: LD_INT 17
22562: PUSH
22563: LD_INT 18
22565: PUSH
22566: LD_INT 19
22568: PUSH
22569: LD_INT 20
22571: PUSH
22572: LD_INT 21
22574: PUSH
22575: LD_INT 22
22577: PUSH
22578: LD_INT 23
22580: PUSH
22581: LD_INT 24
22583: PUSH
22584: LD_INT 25
22586: PUSH
22587: LD_INT 26
22589: PUSH
22590: LD_INT 27
22592: PUSH
22593: LD_INT 28
22595: PUSH
22596: LD_INT 29
22598: PUSH
22599: LD_INT 30
22601: PUSH
22602: LD_INT 31
22604: PUSH
22605: LD_INT 32
22607: PUSH
22608: LD_INT 33
22610: PUSH
22611: LD_INT 34
22613: PUSH
22614: LD_INT 36
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 101
22656: PUSH
22657: LD_INT 102
22659: PUSH
22660: LD_INT 103
22662: PUSH
22663: LD_INT 104
22665: PUSH
22666: LD_INT 105
22668: PUSH
22669: LD_INT 106
22671: PUSH
22672: LD_INT 107
22674: PUSH
22675: LD_INT 108
22677: PUSH
22678: LD_INT 109
22680: PUSH
22681: LD_INT 110
22683: PUSH
22684: LD_INT 111
22686: PUSH
22687: LD_INT 112
22689: PUSH
22690: LD_INT 113
22692: PUSH
22693: LD_INT 114
22695: PUSH
22696: LD_INT 116
22698: PUSH
22699: LD_INT 117
22701: PUSH
22702: LD_INT 118
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: ST_TO_ADDR
22728: GO 23503
22730: LD_INT 16
22732: DOUBLE
22733: EQUAL
22734: IFTRUE 22738
22736: GO 22874
22738: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: LD_INT 4
22749: PUSH
22750: LD_INT 5
22752: PUSH
22753: LD_INT 7
22755: PUSH
22756: LD_INT 11
22758: PUSH
22759: LD_INT 12
22761: PUSH
22762: LD_INT 15
22764: PUSH
22765: LD_INT 16
22767: PUSH
22768: LD_INT 20
22770: PUSH
22771: LD_INT 21
22773: PUSH
22774: LD_INT 22
22776: PUSH
22777: LD_INT 23
22779: PUSH
22780: LD_INT 25
22782: PUSH
22783: LD_INT 26
22785: PUSH
22786: LD_INT 30
22788: PUSH
22789: LD_INT 31
22791: PUSH
22792: LD_INT 32
22794: PUSH
22795: LD_INT 33
22797: PUSH
22798: LD_INT 34
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 101
22824: PUSH
22825: LD_INT 102
22827: PUSH
22828: LD_INT 103
22830: PUSH
22831: LD_INT 106
22833: PUSH
22834: LD_INT 108
22836: PUSH
22837: LD_INT 112
22839: PUSH
22840: LD_INT 113
22842: PUSH
22843: LD_INT 114
22845: PUSH
22846: LD_INT 116
22848: PUSH
22849: LD_INT 117
22851: PUSH
22852: LD_INT 118
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: ST_TO_ADDR
22872: GO 23503
22874: LD_INT 17
22876: DOUBLE
22877: EQUAL
22878: IFTRUE 22882
22880: GO 23106
22882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22883: LD_ADDR_VAR 0 2
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: LD_INT 3
22896: PUSH
22897: LD_INT 4
22899: PUSH
22900: LD_INT 5
22902: PUSH
22903: LD_INT 6
22905: PUSH
22906: LD_INT 7
22908: PUSH
22909: LD_INT 8
22911: PUSH
22912: LD_INT 9
22914: PUSH
22915: LD_INT 10
22917: PUSH
22918: LD_INT 11
22920: PUSH
22921: LD_INT 12
22923: PUSH
22924: LD_INT 13
22926: PUSH
22927: LD_INT 14
22929: PUSH
22930: LD_INT 15
22932: PUSH
22933: LD_INT 16
22935: PUSH
22936: LD_INT 17
22938: PUSH
22939: LD_INT 18
22941: PUSH
22942: LD_INT 19
22944: PUSH
22945: LD_INT 20
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 23
22956: PUSH
22957: LD_INT 24
22959: PUSH
22960: LD_INT 25
22962: PUSH
22963: LD_INT 26
22965: PUSH
22966: LD_INT 27
22968: PUSH
22969: LD_INT 28
22971: PUSH
22972: LD_INT 29
22974: PUSH
22975: LD_INT 30
22977: PUSH
22978: LD_INT 31
22980: PUSH
22981: LD_INT 32
22983: PUSH
22984: LD_INT 33
22986: PUSH
22987: LD_INT 34
22989: PUSH
22990: LD_INT 36
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 101
23032: PUSH
23033: LD_INT 102
23035: PUSH
23036: LD_INT 103
23038: PUSH
23039: LD_INT 104
23041: PUSH
23042: LD_INT 105
23044: PUSH
23045: LD_INT 106
23047: PUSH
23048: LD_INT 107
23050: PUSH
23051: LD_INT 108
23053: PUSH
23054: LD_INT 109
23056: PUSH
23057: LD_INT 110
23059: PUSH
23060: LD_INT 111
23062: PUSH
23063: LD_INT 112
23065: PUSH
23066: LD_INT 113
23068: PUSH
23069: LD_INT 114
23071: PUSH
23072: LD_INT 116
23074: PUSH
23075: LD_INT 117
23077: PUSH
23078: LD_INT 118
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: ST_TO_ADDR
23104: GO 23503
23106: LD_INT 18
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 23262
23114: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23115: LD_ADDR_VAR 0 2
23119: PUSH
23120: LD_INT 2
23122: PUSH
23123: LD_INT 4
23125: PUSH
23126: LD_INT 5
23128: PUSH
23129: LD_INT 7
23131: PUSH
23132: LD_INT 11
23134: PUSH
23135: LD_INT 12
23137: PUSH
23138: LD_INT 15
23140: PUSH
23141: LD_INT 16
23143: PUSH
23144: LD_INT 20
23146: PUSH
23147: LD_INT 21
23149: PUSH
23150: LD_INT 22
23152: PUSH
23153: LD_INT 23
23155: PUSH
23156: LD_INT 25
23158: PUSH
23159: LD_INT 26
23161: PUSH
23162: LD_INT 30
23164: PUSH
23165: LD_INT 31
23167: PUSH
23168: LD_INT 32
23170: PUSH
23171: LD_INT 33
23173: PUSH
23174: LD_INT 34
23176: PUSH
23177: LD_INT 35
23179: PUSH
23180: LD_INT 36
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 101
23208: PUSH
23209: LD_INT 102
23211: PUSH
23212: LD_INT 103
23214: PUSH
23215: LD_INT 106
23217: PUSH
23218: LD_INT 108
23220: PUSH
23221: LD_INT 112
23223: PUSH
23224: LD_INT 113
23226: PUSH
23227: LD_INT 114
23229: PUSH
23230: LD_INT 115
23232: PUSH
23233: LD_INT 116
23235: PUSH
23236: LD_INT 117
23238: PUSH
23239: LD_INT 118
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: ST_TO_ADDR
23260: GO 23503
23262: LD_INT 19
23264: DOUBLE
23265: EQUAL
23266: IFTRUE 23270
23268: GO 23502
23270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23271: LD_ADDR_VAR 0 2
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: LD_INT 3
23284: PUSH
23285: LD_INT 4
23287: PUSH
23288: LD_INT 5
23290: PUSH
23291: LD_INT 6
23293: PUSH
23294: LD_INT 7
23296: PUSH
23297: LD_INT 8
23299: PUSH
23300: LD_INT 9
23302: PUSH
23303: LD_INT 10
23305: PUSH
23306: LD_INT 11
23308: PUSH
23309: LD_INT 12
23311: PUSH
23312: LD_INT 13
23314: PUSH
23315: LD_INT 14
23317: PUSH
23318: LD_INT 15
23320: PUSH
23321: LD_INT 16
23323: PUSH
23324: LD_INT 17
23326: PUSH
23327: LD_INT 18
23329: PUSH
23330: LD_INT 19
23332: PUSH
23333: LD_INT 20
23335: PUSH
23336: LD_INT 21
23338: PUSH
23339: LD_INT 22
23341: PUSH
23342: LD_INT 23
23344: PUSH
23345: LD_INT 24
23347: PUSH
23348: LD_INT 25
23350: PUSH
23351: LD_INT 26
23353: PUSH
23354: LD_INT 27
23356: PUSH
23357: LD_INT 28
23359: PUSH
23360: LD_INT 29
23362: PUSH
23363: LD_INT 30
23365: PUSH
23366: LD_INT 31
23368: PUSH
23369: LD_INT 32
23371: PUSH
23372: LD_INT 33
23374: PUSH
23375: LD_INT 34
23377: PUSH
23378: LD_INT 35
23380: PUSH
23381: LD_INT 36
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 101
23424: PUSH
23425: LD_INT 102
23427: PUSH
23428: LD_INT 103
23430: PUSH
23431: LD_INT 104
23433: PUSH
23434: LD_INT 105
23436: PUSH
23437: LD_INT 106
23439: PUSH
23440: LD_INT 107
23442: PUSH
23443: LD_INT 108
23445: PUSH
23446: LD_INT 109
23448: PUSH
23449: LD_INT 110
23451: PUSH
23452: LD_INT 111
23454: PUSH
23455: LD_INT 112
23457: PUSH
23458: LD_INT 113
23460: PUSH
23461: LD_INT 114
23463: PUSH
23464: LD_INT 115
23466: PUSH
23467: LD_INT 116
23469: PUSH
23470: LD_INT 117
23472: PUSH
23473: LD_INT 118
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: ST_TO_ADDR
23500: GO 23503
23502: POP
// end else
23503: GO 23734
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23505: LD_ADDR_VAR 0 2
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 2
23515: PUSH
23516: LD_INT 3
23518: PUSH
23519: LD_INT 4
23521: PUSH
23522: LD_INT 5
23524: PUSH
23525: LD_INT 6
23527: PUSH
23528: LD_INT 7
23530: PUSH
23531: LD_INT 8
23533: PUSH
23534: LD_INT 9
23536: PUSH
23537: LD_INT 10
23539: PUSH
23540: LD_INT 11
23542: PUSH
23543: LD_INT 12
23545: PUSH
23546: LD_INT 13
23548: PUSH
23549: LD_INT 14
23551: PUSH
23552: LD_INT 15
23554: PUSH
23555: LD_INT 16
23557: PUSH
23558: LD_INT 17
23560: PUSH
23561: LD_INT 18
23563: PUSH
23564: LD_INT 19
23566: PUSH
23567: LD_INT 20
23569: PUSH
23570: LD_INT 21
23572: PUSH
23573: LD_INT 22
23575: PUSH
23576: LD_INT 23
23578: PUSH
23579: LD_INT 24
23581: PUSH
23582: LD_INT 25
23584: PUSH
23585: LD_INT 26
23587: PUSH
23588: LD_INT 27
23590: PUSH
23591: LD_INT 28
23593: PUSH
23594: LD_INT 29
23596: PUSH
23597: LD_INT 30
23599: PUSH
23600: LD_INT 31
23602: PUSH
23603: LD_INT 32
23605: PUSH
23606: LD_INT 33
23608: PUSH
23609: LD_INT 34
23611: PUSH
23612: LD_INT 35
23614: PUSH
23615: LD_INT 36
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 101
23658: PUSH
23659: LD_INT 102
23661: PUSH
23662: LD_INT 103
23664: PUSH
23665: LD_INT 104
23667: PUSH
23668: LD_INT 105
23670: PUSH
23671: LD_INT 106
23673: PUSH
23674: LD_INT 107
23676: PUSH
23677: LD_INT 108
23679: PUSH
23680: LD_INT 109
23682: PUSH
23683: LD_INT 110
23685: PUSH
23686: LD_INT 111
23688: PUSH
23689: LD_INT 112
23691: PUSH
23692: LD_INT 113
23694: PUSH
23695: LD_INT 114
23697: PUSH
23698: LD_INT 115
23700: PUSH
23701: LD_INT 116
23703: PUSH
23704: LD_INT 117
23706: PUSH
23707: LD_INT 118
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: ST_TO_ADDR
// if result then
23734: LD_VAR 0 2
23738: IFFALSE 24524
// begin normal :=  ;
23740: LD_ADDR_VAR 0 5
23744: PUSH
23745: LD_STRING 
23747: ST_TO_ADDR
// hardcore :=  ;
23748: LD_ADDR_VAR 0 6
23752: PUSH
23753: LD_STRING 
23755: ST_TO_ADDR
// active :=  ;
23756: LD_ADDR_VAR 0 7
23760: PUSH
23761: LD_STRING 
23763: ST_TO_ADDR
// for i = 1 to normalCounter do
23764: LD_ADDR_VAR 0 8
23768: PUSH
23769: DOUBLE
23770: LD_INT 1
23772: DEC
23773: ST_TO_ADDR
23774: LD_EXP 55
23778: PUSH
23779: FOR_TO
23780: IFFALSE 23881
// begin tmp := 0 ;
23782: LD_ADDR_VAR 0 3
23786: PUSH
23787: LD_STRING 0
23789: ST_TO_ADDR
// if result [ 1 ] then
23790: LD_VAR 0 2
23794: PUSH
23795: LD_INT 1
23797: ARRAY
23798: IFFALSE 23863
// if result [ 1 ] [ 1 ] = i then
23800: LD_VAR 0 2
23804: PUSH
23805: LD_INT 1
23807: ARRAY
23808: PUSH
23809: LD_INT 1
23811: ARRAY
23812: PUSH
23813: LD_VAR 0 8
23817: EQUAL
23818: IFFALSE 23863
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23820: LD_ADDR_VAR 0 2
23824: PUSH
23825: LD_VAR 0 2
23829: PPUSH
23830: LD_INT 1
23832: PPUSH
23833: LD_VAR 0 2
23837: PUSH
23838: LD_INT 1
23840: ARRAY
23841: PPUSH
23842: LD_INT 1
23844: PPUSH
23845: CALL_OW 3
23849: PPUSH
23850: CALL_OW 1
23854: ST_TO_ADDR
// tmp := 1 ;
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_STRING 1
23862: ST_TO_ADDR
// end ; normal := normal & tmp ;
23863: LD_ADDR_VAR 0 5
23867: PUSH
23868: LD_VAR 0 5
23872: PUSH
23873: LD_VAR 0 3
23877: STR
23878: ST_TO_ADDR
// end ;
23879: GO 23779
23881: POP
23882: POP
// for i = 1 to hardcoreCounter do
23883: LD_ADDR_VAR 0 8
23887: PUSH
23888: DOUBLE
23889: LD_INT 1
23891: DEC
23892: ST_TO_ADDR
23893: LD_EXP 56
23897: PUSH
23898: FOR_TO
23899: IFFALSE 24004
// begin tmp := 0 ;
23901: LD_ADDR_VAR 0 3
23905: PUSH
23906: LD_STRING 0
23908: ST_TO_ADDR
// if result [ 2 ] then
23909: LD_VAR 0 2
23913: PUSH
23914: LD_INT 2
23916: ARRAY
23917: IFFALSE 23986
// if result [ 2 ] [ 1 ] = 100 + i then
23919: LD_VAR 0 2
23923: PUSH
23924: LD_INT 2
23926: ARRAY
23927: PUSH
23928: LD_INT 1
23930: ARRAY
23931: PUSH
23932: LD_INT 100
23934: PUSH
23935: LD_VAR 0 8
23939: PLUS
23940: EQUAL
23941: IFFALSE 23986
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23943: LD_ADDR_VAR 0 2
23947: PUSH
23948: LD_VAR 0 2
23952: PPUSH
23953: LD_INT 2
23955: PPUSH
23956: LD_VAR 0 2
23960: PUSH
23961: LD_INT 2
23963: ARRAY
23964: PPUSH
23965: LD_INT 1
23967: PPUSH
23968: CALL_OW 3
23972: PPUSH
23973: CALL_OW 1
23977: ST_TO_ADDR
// tmp := 1 ;
23978: LD_ADDR_VAR 0 3
23982: PUSH
23983: LD_STRING 1
23985: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23986: LD_ADDR_VAR 0 6
23990: PUSH
23991: LD_VAR 0 6
23995: PUSH
23996: LD_VAR 0 3
24000: STR
24001: ST_TO_ADDR
// end ;
24002: GO 23898
24004: POP
24005: POP
// if isGameLoad then
24006: LD_VAR 0 1
24010: IFFALSE 24485
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24012: LD_ADDR_VAR 0 4
24016: PUSH
24017: LD_EXP 59
24021: PUSH
24022: LD_EXP 58
24026: PUSH
24027: LD_EXP 60
24031: PUSH
24032: LD_EXP 57
24036: PUSH
24037: LD_EXP 61
24041: PUSH
24042: LD_EXP 62
24046: PUSH
24047: LD_EXP 63
24051: PUSH
24052: LD_EXP 64
24056: PUSH
24057: LD_EXP 65
24061: PUSH
24062: LD_EXP 66
24066: PUSH
24067: LD_EXP 67
24071: PUSH
24072: LD_EXP 68
24076: PUSH
24077: LD_EXP 69
24081: PUSH
24082: LD_EXP 70
24086: PUSH
24087: LD_EXP 78
24091: PUSH
24092: LD_EXP 79
24096: PUSH
24097: LD_EXP 80
24101: PUSH
24102: LD_EXP 81
24106: PUSH
24107: LD_EXP 83
24111: PUSH
24112: LD_EXP 84
24116: PUSH
24117: LD_EXP 85
24121: PUSH
24122: LD_EXP 88
24126: PUSH
24127: LD_EXP 90
24131: PUSH
24132: LD_EXP 91
24136: PUSH
24137: LD_EXP 92
24141: PUSH
24142: LD_EXP 94
24146: PUSH
24147: LD_EXP 95
24151: PUSH
24152: LD_EXP 98
24156: PUSH
24157: LD_EXP 99
24161: PUSH
24162: LD_EXP 100
24166: PUSH
24167: LD_EXP 101
24171: PUSH
24172: LD_EXP 102
24176: PUSH
24177: LD_EXP 103
24181: PUSH
24182: LD_EXP 104
24186: PUSH
24187: LD_EXP 105
24191: PUSH
24192: LD_EXP 106
24196: PUSH
24197: LD_EXP 71
24201: PUSH
24202: LD_EXP 72
24206: PUSH
24207: LD_EXP 75
24211: PUSH
24212: LD_EXP 76
24216: PUSH
24217: LD_EXP 77
24221: PUSH
24222: LD_EXP 73
24226: PUSH
24227: LD_EXP 74
24231: PUSH
24232: LD_EXP 82
24236: PUSH
24237: LD_EXP 86
24241: PUSH
24242: LD_EXP 87
24246: PUSH
24247: LD_EXP 89
24251: PUSH
24252: LD_EXP 93
24256: PUSH
24257: LD_EXP 96
24261: PUSH
24262: LD_EXP 97
24266: PUSH
24267: LD_EXP 107
24271: PUSH
24272: LD_EXP 108
24276: PUSH
24277: LD_EXP 109
24281: PUSH
24282: LD_EXP 110
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: ST_TO_ADDR
// tmp :=  ;
24343: LD_ADDR_VAR 0 3
24347: PUSH
24348: LD_STRING 
24350: ST_TO_ADDR
// for i = 1 to normalCounter do
24351: LD_ADDR_VAR 0 8
24355: PUSH
24356: DOUBLE
24357: LD_INT 1
24359: DEC
24360: ST_TO_ADDR
24361: LD_EXP 55
24365: PUSH
24366: FOR_TO
24367: IFFALSE 24403
// begin if flags [ i ] then
24369: LD_VAR 0 4
24373: PUSH
24374: LD_VAR 0 8
24378: ARRAY
24379: IFFALSE 24401
// tmp := tmp & i & ; ;
24381: LD_ADDR_VAR 0 3
24385: PUSH
24386: LD_VAR 0 3
24390: PUSH
24391: LD_VAR 0 8
24395: STR
24396: PUSH
24397: LD_STRING ;
24399: STR
24400: ST_TO_ADDR
// end ;
24401: GO 24366
24403: POP
24404: POP
// for i = 1 to hardcoreCounter do
24405: LD_ADDR_VAR 0 8
24409: PUSH
24410: DOUBLE
24411: LD_INT 1
24413: DEC
24414: ST_TO_ADDR
24415: LD_EXP 56
24419: PUSH
24420: FOR_TO
24421: IFFALSE 24467
// begin if flags [ normalCounter + i ] then
24423: LD_VAR 0 4
24427: PUSH
24428: LD_EXP 55
24432: PUSH
24433: LD_VAR 0 8
24437: PLUS
24438: ARRAY
24439: IFFALSE 24465
// tmp := tmp & ( 100 + i ) & ; ;
24441: LD_ADDR_VAR 0 3
24445: PUSH
24446: LD_VAR 0 3
24450: PUSH
24451: LD_INT 100
24453: PUSH
24454: LD_VAR 0 8
24458: PLUS
24459: STR
24460: PUSH
24461: LD_STRING ;
24463: STR
24464: ST_TO_ADDR
// end ;
24465: GO 24420
24467: POP
24468: POP
// if tmp then
24469: LD_VAR 0 3
24473: IFFALSE 24485
// active := tmp ;
24475: LD_ADDR_VAR 0 7
24479: PUSH
24480: LD_VAR 0 3
24484: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24485: LD_STRING getStreamItemsFromMission("
24487: PUSH
24488: LD_VAR 0 5
24492: STR
24493: PUSH
24494: LD_STRING ","
24496: STR
24497: PUSH
24498: LD_VAR 0 6
24502: STR
24503: PUSH
24504: LD_STRING ","
24506: STR
24507: PUSH
24508: LD_VAR 0 7
24512: STR
24513: PUSH
24514: LD_STRING ")
24516: STR
24517: PPUSH
24518: CALL_OW 559
// end else
24522: GO 24531
// ToLua ( getStreamItemsFromMission("","","") ) ;
24524: LD_STRING getStreamItemsFromMission("","","")
24526: PPUSH
24527: CALL_OW 559
// end ;
24531: LD_VAR 0 2
24535: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24536: LD_EXP 54
24540: PUSH
24541: LD_EXP 59
24545: AND
24546: IFFALSE 24670
24548: GO 24550
24550: DISABLE
24551: LD_INT 0
24553: PPUSH
24554: PPUSH
// begin enable ;
24555: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24556: LD_ADDR_VAR 0 2
24560: PUSH
24561: LD_INT 22
24563: PUSH
24564: LD_OWVAR 2
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: LD_INT 34
24578: PUSH
24579: LD_INT 7
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 34
24588: PUSH
24589: LD_INT 45
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 34
24598: PUSH
24599: LD_INT 28
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 34
24608: PUSH
24609: LD_INT 47
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PPUSH
24627: CALL_OW 69
24631: ST_TO_ADDR
// if not tmp then
24632: LD_VAR 0 2
24636: NOT
24637: IFFALSE 24641
// exit ;
24639: GO 24670
// for i in tmp do
24641: LD_ADDR_VAR 0 1
24645: PUSH
24646: LD_VAR 0 2
24650: PUSH
24651: FOR_IN
24652: IFFALSE 24668
// begin SetLives ( i , 0 ) ;
24654: LD_VAR 0 1
24658: PPUSH
24659: LD_INT 0
24661: PPUSH
24662: CALL_OW 234
// end ;
24666: GO 24651
24668: POP
24669: POP
// end ;
24670: PPOPN 2
24672: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24673: LD_EXP 54
24677: PUSH
24678: LD_EXP 60
24682: AND
24683: IFFALSE 24767
24685: GO 24687
24687: DISABLE
24688: LD_INT 0
24690: PPUSH
24691: PPUSH
// begin enable ;
24692: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24693: LD_ADDR_VAR 0 2
24697: PUSH
24698: LD_INT 22
24700: PUSH
24701: LD_OWVAR 2
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 32
24712: PUSH
24713: LD_INT 3
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PPUSH
24724: CALL_OW 69
24728: ST_TO_ADDR
// if not tmp then
24729: LD_VAR 0 2
24733: NOT
24734: IFFALSE 24738
// exit ;
24736: GO 24767
// for i in tmp do
24738: LD_ADDR_VAR 0 1
24742: PUSH
24743: LD_VAR 0 2
24747: PUSH
24748: FOR_IN
24749: IFFALSE 24765
// begin SetLives ( i , 0 ) ;
24751: LD_VAR 0 1
24755: PPUSH
24756: LD_INT 0
24758: PPUSH
24759: CALL_OW 234
// end ;
24763: GO 24748
24765: POP
24766: POP
// end ;
24767: PPOPN 2
24769: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24770: LD_EXP 54
24774: PUSH
24775: LD_EXP 57
24779: AND
24780: IFFALSE 24873
24782: GO 24784
24784: DISABLE
24785: LD_INT 0
24787: PPUSH
// begin enable ;
24788: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24789: LD_ADDR_VAR 0 1
24793: PUSH
24794: LD_INT 22
24796: PUSH
24797: LD_OWVAR 2
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 2
24808: PUSH
24809: LD_INT 25
24811: PUSH
24812: LD_INT 5
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 25
24821: PUSH
24822: LD_INT 9
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 25
24831: PUSH
24832: LD_INT 8
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PPUSH
24849: CALL_OW 69
24853: PUSH
24854: FOR_IN
24855: IFFALSE 24871
// begin SetClass ( i , 1 ) ;
24857: LD_VAR 0 1
24861: PPUSH
24862: LD_INT 1
24864: PPUSH
24865: CALL_OW 336
// end ;
24869: GO 24854
24871: POP
24872: POP
// end ;
24873: PPOPN 1
24875: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24876: LD_EXP 54
24880: PUSH
24881: LD_EXP 58
24885: AND
24886: PUSH
24887: LD_OWVAR 65
24891: PUSH
24892: LD_INT 7
24894: LESS
24895: AND
24896: IFFALSE 24910
24898: GO 24900
24900: DISABLE
// begin enable ;
24901: ENABLE
// game_speed := 7 ;
24902: LD_ADDR_OWVAR 65
24906: PUSH
24907: LD_INT 7
24909: ST_TO_ADDR
// end ;
24910: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24911: LD_EXP 54
24915: PUSH
24916: LD_EXP 61
24920: AND
24921: IFFALSE 25123
24923: GO 24925
24925: DISABLE
24926: LD_INT 0
24928: PPUSH
24929: PPUSH
24930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24931: LD_ADDR_VAR 0 3
24935: PUSH
24936: LD_INT 81
24938: PUSH
24939: LD_OWVAR 2
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 21
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PPUSH
24962: CALL_OW 69
24966: ST_TO_ADDR
// if not tmp then
24967: LD_VAR 0 3
24971: NOT
24972: IFFALSE 24976
// exit ;
24974: GO 25123
// if tmp > 5 then
24976: LD_VAR 0 3
24980: PUSH
24981: LD_INT 5
24983: GREATER
24984: IFFALSE 24996
// k := 5 else
24986: LD_ADDR_VAR 0 2
24990: PUSH
24991: LD_INT 5
24993: ST_TO_ADDR
24994: GO 25006
// k := tmp ;
24996: LD_ADDR_VAR 0 2
25000: PUSH
25001: LD_VAR 0 3
25005: ST_TO_ADDR
// for i := 1 to k do
25006: LD_ADDR_VAR 0 1
25010: PUSH
25011: DOUBLE
25012: LD_INT 1
25014: DEC
25015: ST_TO_ADDR
25016: LD_VAR 0 2
25020: PUSH
25021: FOR_TO
25022: IFFALSE 25121
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25024: LD_VAR 0 3
25028: PUSH
25029: LD_VAR 0 1
25033: ARRAY
25034: PPUSH
25035: LD_VAR 0 1
25039: PUSH
25040: LD_INT 4
25042: MOD
25043: PUSH
25044: LD_INT 1
25046: PLUS
25047: PPUSH
25048: CALL_OW 259
25052: PUSH
25053: LD_INT 10
25055: LESS
25056: IFFALSE 25119
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25058: LD_VAR 0 3
25062: PUSH
25063: LD_VAR 0 1
25067: ARRAY
25068: PPUSH
25069: LD_VAR 0 1
25073: PUSH
25074: LD_INT 4
25076: MOD
25077: PUSH
25078: LD_INT 1
25080: PLUS
25081: PPUSH
25082: LD_VAR 0 3
25086: PUSH
25087: LD_VAR 0 1
25091: ARRAY
25092: PPUSH
25093: LD_VAR 0 1
25097: PUSH
25098: LD_INT 4
25100: MOD
25101: PUSH
25102: LD_INT 1
25104: PLUS
25105: PPUSH
25106: CALL_OW 259
25110: PUSH
25111: LD_INT 1
25113: PLUS
25114: PPUSH
25115: CALL_OW 237
25119: GO 25021
25121: POP
25122: POP
// end ;
25123: PPOPN 3
25125: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25126: LD_EXP 54
25130: PUSH
25131: LD_EXP 62
25135: AND
25136: IFFALSE 25156
25138: GO 25140
25140: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25141: LD_INT 4
25143: PPUSH
25144: LD_OWVAR 2
25148: PPUSH
25149: LD_INT 0
25151: PPUSH
25152: CALL_OW 324
25156: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25157: LD_EXP 54
25161: PUSH
25162: LD_EXP 91
25166: AND
25167: IFFALSE 25187
25169: GO 25171
25171: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25172: LD_INT 19
25174: PPUSH
25175: LD_OWVAR 2
25179: PPUSH
25180: LD_INT 0
25182: PPUSH
25183: CALL_OW 324
25187: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25188: LD_EXP 54
25192: PUSH
25193: LD_EXP 63
25197: AND
25198: IFFALSE 25300
25200: GO 25202
25202: DISABLE
25203: LD_INT 0
25205: PPUSH
25206: PPUSH
// begin enable ;
25207: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25208: LD_ADDR_VAR 0 2
25212: PUSH
25213: LD_INT 22
25215: PUSH
25216: LD_OWVAR 2
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: LD_INT 34
25230: PUSH
25231: LD_INT 11
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 34
25240: PUSH
25241: LD_INT 30
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PPUSH
25257: CALL_OW 69
25261: ST_TO_ADDR
// if not tmp then
25262: LD_VAR 0 2
25266: NOT
25267: IFFALSE 25271
// exit ;
25269: GO 25300
// for i in tmp do
25271: LD_ADDR_VAR 0 1
25275: PUSH
25276: LD_VAR 0 2
25280: PUSH
25281: FOR_IN
25282: IFFALSE 25298
// begin SetLives ( i , 0 ) ;
25284: LD_VAR 0 1
25288: PPUSH
25289: LD_INT 0
25291: PPUSH
25292: CALL_OW 234
// end ;
25296: GO 25281
25298: POP
25299: POP
// end ;
25300: PPOPN 2
25302: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25303: LD_EXP 54
25307: PUSH
25308: LD_EXP 64
25312: AND
25313: IFFALSE 25333
25315: GO 25317
25317: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25318: LD_INT 32
25320: PPUSH
25321: LD_OWVAR 2
25325: PPUSH
25326: LD_INT 0
25328: PPUSH
25329: CALL_OW 324
25333: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25334: LD_EXP 54
25338: PUSH
25339: LD_EXP 65
25343: AND
25344: IFFALSE 25525
25346: GO 25348
25348: DISABLE
25349: LD_INT 0
25351: PPUSH
25352: PPUSH
25353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25354: LD_ADDR_VAR 0 2
25358: PUSH
25359: LD_INT 22
25361: PUSH
25362: LD_OWVAR 2
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 33
25373: PUSH
25374: LD_INT 3
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PPUSH
25385: CALL_OW 69
25389: ST_TO_ADDR
// if not tmp then
25390: LD_VAR 0 2
25394: NOT
25395: IFFALSE 25399
// exit ;
25397: GO 25525
// side := 0 ;
25399: LD_ADDR_VAR 0 3
25403: PUSH
25404: LD_INT 0
25406: ST_TO_ADDR
// for i := 1 to 8 do
25407: LD_ADDR_VAR 0 1
25411: PUSH
25412: DOUBLE
25413: LD_INT 1
25415: DEC
25416: ST_TO_ADDR
25417: LD_INT 8
25419: PUSH
25420: FOR_TO
25421: IFFALSE 25469
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25423: LD_OWVAR 2
25427: PUSH
25428: LD_VAR 0 1
25432: NONEQUAL
25433: PUSH
25434: LD_OWVAR 2
25438: PPUSH
25439: LD_VAR 0 1
25443: PPUSH
25444: CALL_OW 81
25448: PUSH
25449: LD_INT 2
25451: EQUAL
25452: AND
25453: IFFALSE 25467
// begin side := i ;
25455: LD_ADDR_VAR 0 3
25459: PUSH
25460: LD_VAR 0 1
25464: ST_TO_ADDR
// break ;
25465: GO 25469
// end ;
25467: GO 25420
25469: POP
25470: POP
// if not side then
25471: LD_VAR 0 3
25475: NOT
25476: IFFALSE 25480
// exit ;
25478: GO 25525
// for i := 1 to tmp do
25480: LD_ADDR_VAR 0 1
25484: PUSH
25485: DOUBLE
25486: LD_INT 1
25488: DEC
25489: ST_TO_ADDR
25490: LD_VAR 0 2
25494: PUSH
25495: FOR_TO
25496: IFFALSE 25523
// if Prob ( 60 ) then
25498: LD_INT 60
25500: PPUSH
25501: CALL_OW 13
25505: IFFALSE 25521
// SetSide ( i , side ) ;
25507: LD_VAR 0 1
25511: PPUSH
25512: LD_VAR 0 3
25516: PPUSH
25517: CALL_OW 235
25521: GO 25495
25523: POP
25524: POP
// end ;
25525: PPOPN 3
25527: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25528: LD_EXP 54
25532: PUSH
25533: LD_EXP 67
25537: AND
25538: IFFALSE 25657
25540: GO 25542
25542: DISABLE
25543: LD_INT 0
25545: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25546: LD_ADDR_VAR 0 1
25550: PUSH
25551: LD_INT 22
25553: PUSH
25554: LD_OWVAR 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 21
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 3
25575: PUSH
25576: LD_INT 23
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: LIST
25594: PPUSH
25595: CALL_OW 69
25599: PUSH
25600: FOR_IN
25601: IFFALSE 25655
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25603: LD_VAR 0 1
25607: PPUSH
25608: CALL_OW 257
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: LD_INT 3
25621: PUSH
25622: LD_INT 4
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: IN
25631: IFFALSE 25653
// SetClass ( un , rand ( 1 , 4 ) ) ;
25633: LD_VAR 0 1
25637: PPUSH
25638: LD_INT 1
25640: PPUSH
25641: LD_INT 4
25643: PPUSH
25644: CALL_OW 12
25648: PPUSH
25649: CALL_OW 336
25653: GO 25600
25655: POP
25656: POP
// end ;
25657: PPOPN 1
25659: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25660: LD_EXP 54
25664: PUSH
25665: LD_EXP 66
25669: AND
25670: IFFALSE 25749
25672: GO 25674
25674: DISABLE
25675: LD_INT 0
25677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25678: LD_ADDR_VAR 0 1
25682: PUSH
25683: LD_INT 22
25685: PUSH
25686: LD_OWVAR 2
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 21
25697: PUSH
25698: LD_INT 3
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PPUSH
25709: CALL_OW 69
25713: ST_TO_ADDR
// if not tmp then
25714: LD_VAR 0 1
25718: NOT
25719: IFFALSE 25723
// exit ;
25721: GO 25749
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25723: LD_VAR 0 1
25727: PUSH
25728: LD_INT 1
25730: PPUSH
25731: LD_VAR 0 1
25735: PPUSH
25736: CALL_OW 12
25740: ARRAY
25741: PPUSH
25742: LD_INT 100
25744: PPUSH
25745: CALL_OW 234
// end ;
25749: PPOPN 1
25751: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25752: LD_EXP 54
25756: PUSH
25757: LD_EXP 68
25761: AND
25762: IFFALSE 25860
25764: GO 25766
25766: DISABLE
25767: LD_INT 0
25769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25770: LD_ADDR_VAR 0 1
25774: PUSH
25775: LD_INT 22
25777: PUSH
25778: LD_OWVAR 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 21
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PPUSH
25801: CALL_OW 69
25805: ST_TO_ADDR
// if not tmp then
25806: LD_VAR 0 1
25810: NOT
25811: IFFALSE 25815
// exit ;
25813: GO 25860
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25815: LD_VAR 0 1
25819: PUSH
25820: LD_INT 1
25822: PPUSH
25823: LD_VAR 0 1
25827: PPUSH
25828: CALL_OW 12
25832: ARRAY
25833: PPUSH
25834: LD_INT 1
25836: PPUSH
25837: LD_INT 4
25839: PPUSH
25840: CALL_OW 12
25844: PPUSH
25845: LD_INT 3000
25847: PPUSH
25848: LD_INT 9000
25850: PPUSH
25851: CALL_OW 12
25855: PPUSH
25856: CALL_OW 492
// end ;
25860: PPOPN 1
25862: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25863: LD_EXP 54
25867: PUSH
25868: LD_EXP 69
25872: AND
25873: IFFALSE 25893
25875: GO 25877
25877: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25878: LD_INT 1
25880: PPUSH
25881: LD_OWVAR 2
25885: PPUSH
25886: LD_INT 0
25888: PPUSH
25889: CALL_OW 324
25893: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25894: LD_EXP 54
25898: PUSH
25899: LD_EXP 70
25903: AND
25904: IFFALSE 25987
25906: GO 25908
25908: DISABLE
25909: LD_INT 0
25911: PPUSH
25912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25913: LD_ADDR_VAR 0 2
25917: PUSH
25918: LD_INT 22
25920: PUSH
25921: LD_OWVAR 2
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 21
25932: PUSH
25933: LD_INT 3
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PPUSH
25944: CALL_OW 69
25948: ST_TO_ADDR
// if not tmp then
25949: LD_VAR 0 2
25953: NOT
25954: IFFALSE 25958
// exit ;
25956: GO 25987
// for i in tmp do
25958: LD_ADDR_VAR 0 1
25962: PUSH
25963: LD_VAR 0 2
25967: PUSH
25968: FOR_IN
25969: IFFALSE 25985
// SetBLevel ( i , 10 ) ;
25971: LD_VAR 0 1
25975: PPUSH
25976: LD_INT 10
25978: PPUSH
25979: CALL_OW 241
25983: GO 25968
25985: POP
25986: POP
// end ;
25987: PPOPN 2
25989: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25990: LD_EXP 54
25994: PUSH
25995: LD_EXP 71
25999: AND
26000: IFFALSE 26111
26002: GO 26004
26004: DISABLE
26005: LD_INT 0
26007: PPUSH
26008: PPUSH
26009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26010: LD_ADDR_VAR 0 3
26014: PUSH
26015: LD_INT 22
26017: PUSH
26018: LD_OWVAR 2
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 25
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PPUSH
26041: CALL_OW 69
26045: ST_TO_ADDR
// if not tmp then
26046: LD_VAR 0 3
26050: NOT
26051: IFFALSE 26055
// exit ;
26053: GO 26111
// un := tmp [ rand ( 1 , tmp ) ] ;
26055: LD_ADDR_VAR 0 2
26059: PUSH
26060: LD_VAR 0 3
26064: PUSH
26065: LD_INT 1
26067: PPUSH
26068: LD_VAR 0 3
26072: PPUSH
26073: CALL_OW 12
26077: ARRAY
26078: ST_TO_ADDR
// if Crawls ( un ) then
26079: LD_VAR 0 2
26083: PPUSH
26084: CALL_OW 318
26088: IFFALSE 26099
// ComWalk ( un ) ;
26090: LD_VAR 0 2
26094: PPUSH
26095: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26099: LD_VAR 0 2
26103: PPUSH
26104: LD_INT 5
26106: PPUSH
26107: CALL_OW 336
// end ;
26111: PPOPN 3
26113: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26114: LD_EXP 54
26118: PUSH
26119: LD_EXP 72
26123: AND
26124: PUSH
26125: LD_OWVAR 67
26129: PUSH
26130: LD_INT 4
26132: LESS
26133: AND
26134: IFFALSE 26153
26136: GO 26138
26138: DISABLE
// begin Difficulty := Difficulty + 1 ;
26139: LD_ADDR_OWVAR 67
26143: PUSH
26144: LD_OWVAR 67
26148: PUSH
26149: LD_INT 1
26151: PLUS
26152: ST_TO_ADDR
// end ;
26153: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26154: LD_EXP 54
26158: PUSH
26159: LD_EXP 73
26163: AND
26164: IFFALSE 26267
26166: GO 26168
26168: DISABLE
26169: LD_INT 0
26171: PPUSH
// begin for i := 1 to 5 do
26172: LD_ADDR_VAR 0 1
26176: PUSH
26177: DOUBLE
26178: LD_INT 1
26180: DEC
26181: ST_TO_ADDR
26182: LD_INT 5
26184: PUSH
26185: FOR_TO
26186: IFFALSE 26265
// begin uc_nation := nation_nature ;
26188: LD_ADDR_OWVAR 21
26192: PUSH
26193: LD_INT 0
26195: ST_TO_ADDR
// uc_side := 0 ;
26196: LD_ADDR_OWVAR 20
26200: PUSH
26201: LD_INT 0
26203: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26204: LD_ADDR_OWVAR 29
26208: PUSH
26209: LD_INT 12
26211: PUSH
26212: LD_INT 12
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: ST_TO_ADDR
// hc_agressivity := 20 ;
26219: LD_ADDR_OWVAR 35
26223: PUSH
26224: LD_INT 20
26226: ST_TO_ADDR
// hc_class := class_tiger ;
26227: LD_ADDR_OWVAR 28
26231: PUSH
26232: LD_INT 14
26234: ST_TO_ADDR
// hc_gallery :=  ;
26235: LD_ADDR_OWVAR 33
26239: PUSH
26240: LD_STRING 
26242: ST_TO_ADDR
// hc_name :=  ;
26243: LD_ADDR_OWVAR 26
26247: PUSH
26248: LD_STRING 
26250: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26251: CALL_OW 44
26255: PPUSH
26256: LD_INT 0
26258: PPUSH
26259: CALL_OW 51
// end ;
26263: GO 26185
26265: POP
26266: POP
// end ;
26267: PPOPN 1
26269: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26270: LD_EXP 54
26274: PUSH
26275: LD_EXP 74
26279: AND
26280: IFFALSE 26289
26282: GO 26284
26284: DISABLE
// StreamSibBomb ;
26285: CALL 26290 0 0
26289: END
// export function StreamSibBomb ; var i , x , y ; begin
26290: LD_INT 0
26292: PPUSH
26293: PPUSH
26294: PPUSH
26295: PPUSH
// result := false ;
26296: LD_ADDR_VAR 0 1
26300: PUSH
26301: LD_INT 0
26303: ST_TO_ADDR
// for i := 1 to 16 do
26304: LD_ADDR_VAR 0 2
26308: PUSH
26309: DOUBLE
26310: LD_INT 1
26312: DEC
26313: ST_TO_ADDR
26314: LD_INT 16
26316: PUSH
26317: FOR_TO
26318: IFFALSE 26517
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26320: LD_ADDR_VAR 0 3
26324: PUSH
26325: LD_INT 10
26327: PUSH
26328: LD_INT 20
26330: PUSH
26331: LD_INT 30
26333: PUSH
26334: LD_INT 40
26336: PUSH
26337: LD_INT 50
26339: PUSH
26340: LD_INT 60
26342: PUSH
26343: LD_INT 70
26345: PUSH
26346: LD_INT 80
26348: PUSH
26349: LD_INT 90
26351: PUSH
26352: LD_INT 100
26354: PUSH
26355: LD_INT 110
26357: PUSH
26358: LD_INT 120
26360: PUSH
26361: LD_INT 130
26363: PUSH
26364: LD_INT 140
26366: PUSH
26367: LD_INT 150
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 1
26389: PPUSH
26390: LD_INT 15
26392: PPUSH
26393: CALL_OW 12
26397: ARRAY
26398: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26399: LD_ADDR_VAR 0 4
26403: PUSH
26404: LD_INT 10
26406: PUSH
26407: LD_INT 20
26409: PUSH
26410: LD_INT 30
26412: PUSH
26413: LD_INT 40
26415: PUSH
26416: LD_INT 50
26418: PUSH
26419: LD_INT 60
26421: PUSH
26422: LD_INT 70
26424: PUSH
26425: LD_INT 80
26427: PUSH
26428: LD_INT 90
26430: PUSH
26431: LD_INT 100
26433: PUSH
26434: LD_INT 110
26436: PUSH
26437: LD_INT 120
26439: PUSH
26440: LD_INT 130
26442: PUSH
26443: LD_INT 140
26445: PUSH
26446: LD_INT 150
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: PPUSH
26469: LD_INT 15
26471: PPUSH
26472: CALL_OW 12
26476: ARRAY
26477: ST_TO_ADDR
// if ValidHex ( x , y ) then
26478: LD_VAR 0 3
26482: PPUSH
26483: LD_VAR 0 4
26487: PPUSH
26488: CALL_OW 488
26492: IFFALSE 26515
// begin result := [ x , y ] ;
26494: LD_ADDR_VAR 0 1
26498: PUSH
26499: LD_VAR 0 3
26503: PUSH
26504: LD_VAR 0 4
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: ST_TO_ADDR
// break ;
26513: GO 26517
// end ; end ;
26515: GO 26317
26517: POP
26518: POP
// if result then
26519: LD_VAR 0 1
26523: IFFALSE 26583
// begin ToLua ( playSibBomb() ) ;
26525: LD_STRING playSibBomb()
26527: PPUSH
26528: CALL_OW 559
// wait ( 0 0$14 ) ;
26532: LD_INT 490
26534: PPUSH
26535: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26539: LD_VAR 0 1
26543: PUSH
26544: LD_INT 1
26546: ARRAY
26547: PPUSH
26548: LD_VAR 0 1
26552: PUSH
26553: LD_INT 2
26555: ARRAY
26556: PPUSH
26557: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26561: LD_VAR 0 1
26565: PUSH
26566: LD_INT 1
26568: ARRAY
26569: PPUSH
26570: LD_VAR 0 1
26574: PUSH
26575: LD_INT 2
26577: ARRAY
26578: PPUSH
26579: CALL_OW 429
// end ; end ;
26583: LD_VAR 0 1
26587: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26588: LD_EXP 54
26592: PUSH
26593: LD_EXP 76
26597: AND
26598: IFFALSE 26610
26600: GO 26602
26602: DISABLE
// YouLost (  ) ;
26603: LD_STRING 
26605: PPUSH
26606: CALL_OW 104
26610: END
// every 0 0$1 trigger StreamModeActive and sFog do
26611: LD_EXP 54
26615: PUSH
26616: LD_EXP 75
26620: AND
26621: IFFALSE 26635
26623: GO 26625
26625: DISABLE
// FogOff ( your_side ) ;
26626: LD_OWVAR 2
26630: PPUSH
26631: CALL_OW 344
26635: END
// every 0 0$1 trigger StreamModeActive and sSun do
26636: LD_EXP 54
26640: PUSH
26641: LD_EXP 77
26645: AND
26646: IFFALSE 26674
26648: GO 26650
26650: DISABLE
// begin solar_recharge_percent := 0 ;
26651: LD_ADDR_OWVAR 79
26655: PUSH
26656: LD_INT 0
26658: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26659: LD_INT 10500
26661: PPUSH
26662: CALL_OW 67
// solar_recharge_percent := 100 ;
26666: LD_ADDR_OWVAR 79
26670: PUSH
26671: LD_INT 100
26673: ST_TO_ADDR
// end ;
26674: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26675: LD_EXP 54
26679: PUSH
26680: LD_EXP 78
26684: AND
26685: IFFALSE 26924
26687: GO 26689
26689: DISABLE
26690: LD_INT 0
26692: PPUSH
26693: PPUSH
26694: PPUSH
// begin tmp := [ ] ;
26695: LD_ADDR_VAR 0 3
26699: PUSH
26700: EMPTY
26701: ST_TO_ADDR
// for i := 1 to 6 do
26702: LD_ADDR_VAR 0 1
26706: PUSH
26707: DOUBLE
26708: LD_INT 1
26710: DEC
26711: ST_TO_ADDR
26712: LD_INT 6
26714: PUSH
26715: FOR_TO
26716: IFFALSE 26821
// begin uc_nation := nation_nature ;
26718: LD_ADDR_OWVAR 21
26722: PUSH
26723: LD_INT 0
26725: ST_TO_ADDR
// uc_side := 0 ;
26726: LD_ADDR_OWVAR 20
26730: PUSH
26731: LD_INT 0
26733: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26734: LD_ADDR_OWVAR 29
26738: PUSH
26739: LD_INT 12
26741: PUSH
26742: LD_INT 12
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: ST_TO_ADDR
// hc_agressivity := 20 ;
26749: LD_ADDR_OWVAR 35
26753: PUSH
26754: LD_INT 20
26756: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26757: LD_ADDR_OWVAR 28
26761: PUSH
26762: LD_INT 17
26764: ST_TO_ADDR
// hc_gallery :=  ;
26765: LD_ADDR_OWVAR 33
26769: PUSH
26770: LD_STRING 
26772: ST_TO_ADDR
// hc_name :=  ;
26773: LD_ADDR_OWVAR 26
26777: PUSH
26778: LD_STRING 
26780: ST_TO_ADDR
// un := CreateHuman ;
26781: LD_ADDR_VAR 0 2
26785: PUSH
26786: CALL_OW 44
26790: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26791: LD_VAR 0 2
26795: PPUSH
26796: LD_INT 1
26798: PPUSH
26799: CALL_OW 51
// tmp := tmp ^ un ;
26803: LD_ADDR_VAR 0 3
26807: PUSH
26808: LD_VAR 0 3
26812: PUSH
26813: LD_VAR 0 2
26817: ADD
26818: ST_TO_ADDR
// end ;
26819: GO 26715
26821: POP
26822: POP
// repeat wait ( 0 0$1 ) ;
26823: LD_INT 35
26825: PPUSH
26826: CALL_OW 67
// for un in tmp do
26830: LD_ADDR_VAR 0 2
26834: PUSH
26835: LD_VAR 0 3
26839: PUSH
26840: FOR_IN
26841: IFFALSE 26915
// begin if IsDead ( un ) then
26843: LD_VAR 0 2
26847: PPUSH
26848: CALL_OW 301
26852: IFFALSE 26872
// begin tmp := tmp diff un ;
26854: LD_ADDR_VAR 0 3
26858: PUSH
26859: LD_VAR 0 3
26863: PUSH
26864: LD_VAR 0 2
26868: DIFF
26869: ST_TO_ADDR
// continue ;
26870: GO 26840
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26872: LD_VAR 0 2
26876: PPUSH
26877: LD_INT 3
26879: PUSH
26880: LD_INT 22
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PPUSH
26894: CALL_OW 69
26898: PPUSH
26899: LD_VAR 0 2
26903: PPUSH
26904: CALL_OW 74
26908: PPUSH
26909: CALL_OW 115
// end ;
26913: GO 26840
26915: POP
26916: POP
// until not tmp ;
26917: LD_VAR 0 3
26921: NOT
26922: IFFALSE 26823
// end ;
26924: PPOPN 3
26926: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26927: LD_EXP 54
26931: PUSH
26932: LD_EXP 79
26936: AND
26937: IFFALSE 26991
26939: GO 26941
26941: DISABLE
// begin ToLua ( displayTroll(); ) ;
26942: LD_STRING displayTroll();
26944: PPUSH
26945: CALL_OW 559
// wait ( 3 3$00 ) ;
26949: LD_INT 6300
26951: PPUSH
26952: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26956: LD_STRING hideTroll();
26958: PPUSH
26959: CALL_OW 559
// wait ( 1 1$00 ) ;
26963: LD_INT 2100
26965: PPUSH
26966: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26970: LD_STRING displayTroll();
26972: PPUSH
26973: CALL_OW 559
// wait ( 1 1$00 ) ;
26977: LD_INT 2100
26979: PPUSH
26980: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26984: LD_STRING hideTroll();
26986: PPUSH
26987: CALL_OW 559
// end ;
26991: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26992: LD_EXP 54
26996: PUSH
26997: LD_EXP 80
27001: AND
27002: IFFALSE 27065
27004: GO 27006
27006: DISABLE
27007: LD_INT 0
27009: PPUSH
// begin p := 0 ;
27010: LD_ADDR_VAR 0 1
27014: PUSH
27015: LD_INT 0
27017: ST_TO_ADDR
// repeat game_speed := 1 ;
27018: LD_ADDR_OWVAR 65
27022: PUSH
27023: LD_INT 1
27025: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27026: LD_INT 35
27028: PPUSH
27029: CALL_OW 67
// p := p + 1 ;
27033: LD_ADDR_VAR 0 1
27037: PUSH
27038: LD_VAR 0 1
27042: PUSH
27043: LD_INT 1
27045: PLUS
27046: ST_TO_ADDR
// until p >= 60 ;
27047: LD_VAR 0 1
27051: PUSH
27052: LD_INT 60
27054: GREATEREQUAL
27055: IFFALSE 27018
// game_speed := 4 ;
27057: LD_ADDR_OWVAR 65
27061: PUSH
27062: LD_INT 4
27064: ST_TO_ADDR
// end ;
27065: PPOPN 1
27067: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27068: LD_EXP 54
27072: PUSH
27073: LD_EXP 81
27077: AND
27078: IFFALSE 27224
27080: GO 27082
27082: DISABLE
27083: LD_INT 0
27085: PPUSH
27086: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27087: LD_ADDR_VAR 0 1
27091: PUSH
27092: LD_INT 22
27094: PUSH
27095: LD_OWVAR 2
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 2
27106: PUSH
27107: LD_INT 30
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 30
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PPUSH
27136: CALL_OW 69
27140: ST_TO_ADDR
// if not depot then
27141: LD_VAR 0 1
27145: NOT
27146: IFFALSE 27150
// exit ;
27148: GO 27224
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27150: LD_ADDR_VAR 0 2
27154: PUSH
27155: LD_VAR 0 1
27159: PUSH
27160: LD_INT 1
27162: PPUSH
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 12
27172: ARRAY
27173: PPUSH
27174: CALL_OW 274
27178: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27179: LD_VAR 0 2
27183: PPUSH
27184: LD_INT 1
27186: PPUSH
27187: LD_INT 0
27189: PPUSH
27190: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27194: LD_VAR 0 2
27198: PPUSH
27199: LD_INT 2
27201: PPUSH
27202: LD_INT 0
27204: PPUSH
27205: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27209: LD_VAR 0 2
27213: PPUSH
27214: LD_INT 3
27216: PPUSH
27217: LD_INT 0
27219: PPUSH
27220: CALL_OW 277
// end ;
27224: PPOPN 2
27226: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27227: LD_EXP 54
27231: PUSH
27232: LD_EXP 82
27236: AND
27237: IFFALSE 27334
27239: GO 27241
27241: DISABLE
27242: LD_INT 0
27244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27245: LD_ADDR_VAR 0 1
27249: PUSH
27250: LD_INT 22
27252: PUSH
27253: LD_OWVAR 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 21
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 3
27274: PUSH
27275: LD_INT 23
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: PPUSH
27294: CALL_OW 69
27298: ST_TO_ADDR
// if not tmp then
27299: LD_VAR 0 1
27303: NOT
27304: IFFALSE 27308
// exit ;
27306: GO 27334
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27308: LD_VAR 0 1
27312: PUSH
27313: LD_INT 1
27315: PPUSH
27316: LD_VAR 0 1
27320: PPUSH
27321: CALL_OW 12
27325: ARRAY
27326: PPUSH
27327: LD_INT 200
27329: PPUSH
27330: CALL_OW 234
// end ;
27334: PPOPN 1
27336: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27337: LD_EXP 54
27341: PUSH
27342: LD_EXP 83
27346: AND
27347: IFFALSE 27426
27349: GO 27351
27351: DISABLE
27352: LD_INT 0
27354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27355: LD_ADDR_VAR 0 1
27359: PUSH
27360: LD_INT 22
27362: PUSH
27363: LD_OWVAR 2
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 21
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PPUSH
27386: CALL_OW 69
27390: ST_TO_ADDR
// if not tmp then
27391: LD_VAR 0 1
27395: NOT
27396: IFFALSE 27400
// exit ;
27398: GO 27426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27400: LD_VAR 0 1
27404: PUSH
27405: LD_INT 1
27407: PPUSH
27408: LD_VAR 0 1
27412: PPUSH
27413: CALL_OW 12
27417: ARRAY
27418: PPUSH
27419: LD_INT 60
27421: PPUSH
27422: CALL_OW 234
// end ;
27426: PPOPN 1
27428: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27429: LD_EXP 54
27433: PUSH
27434: LD_EXP 84
27438: AND
27439: IFFALSE 27538
27441: GO 27443
27443: DISABLE
27444: LD_INT 0
27446: PPUSH
27447: PPUSH
// begin enable ;
27448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27449: LD_ADDR_VAR 0 1
27453: PUSH
27454: LD_INT 22
27456: PUSH
27457: LD_OWVAR 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 61
27468: PUSH
27469: EMPTY
27470: LIST
27471: PUSH
27472: LD_INT 33
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: PPUSH
27487: CALL_OW 69
27491: ST_TO_ADDR
// if not tmp then
27492: LD_VAR 0 1
27496: NOT
27497: IFFALSE 27501
// exit ;
27499: GO 27538
// for i in tmp do
27501: LD_ADDR_VAR 0 2
27505: PUSH
27506: LD_VAR 0 1
27510: PUSH
27511: FOR_IN
27512: IFFALSE 27536
// if IsControledBy ( i ) then
27514: LD_VAR 0 2
27518: PPUSH
27519: CALL_OW 312
27523: IFFALSE 27534
// ComUnlink ( i ) ;
27525: LD_VAR 0 2
27529: PPUSH
27530: CALL_OW 136
27534: GO 27511
27536: POP
27537: POP
// end ;
27538: PPOPN 2
27540: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27541: LD_EXP 54
27545: PUSH
27546: LD_EXP 85
27550: AND
27551: IFFALSE 27691
27553: GO 27555
27555: DISABLE
27556: LD_INT 0
27558: PPUSH
27559: PPUSH
// begin ToLua ( displayPowell(); ) ;
27560: LD_STRING displayPowell();
27562: PPUSH
27563: CALL_OW 559
// uc_side := 0 ;
27567: LD_ADDR_OWVAR 20
27571: PUSH
27572: LD_INT 0
27574: ST_TO_ADDR
// uc_nation := 2 ;
27575: LD_ADDR_OWVAR 21
27579: PUSH
27580: LD_INT 2
27582: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27583: LD_ADDR_OWVAR 37
27587: PUSH
27588: LD_INT 14
27590: ST_TO_ADDR
// vc_engine := engine_siberite ;
27591: LD_ADDR_OWVAR 39
27595: PUSH
27596: LD_INT 3
27598: ST_TO_ADDR
// vc_control := control_apeman ;
27599: LD_ADDR_OWVAR 38
27603: PUSH
27604: LD_INT 5
27606: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27607: LD_ADDR_OWVAR 40
27611: PUSH
27612: LD_INT 29
27614: ST_TO_ADDR
// un := CreateVehicle ;
27615: LD_ADDR_VAR 0 2
27619: PUSH
27620: CALL_OW 45
27624: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27625: LD_VAR 0 2
27629: PPUSH
27630: LD_INT 1
27632: PPUSH
27633: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27637: LD_INT 35
27639: PPUSH
27640: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27644: LD_VAR 0 2
27648: PPUSH
27649: LD_INT 22
27651: PUSH
27652: LD_OWVAR 2
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PPUSH
27661: CALL_OW 69
27665: PPUSH
27666: LD_VAR 0 2
27670: PPUSH
27671: CALL_OW 74
27675: PPUSH
27676: CALL_OW 115
// until IsDead ( un ) ;
27680: LD_VAR 0 2
27684: PPUSH
27685: CALL_OW 301
27689: IFFALSE 27637
// end ;
27691: PPOPN 2
27693: END
// every 0 0$1 trigger StreamModeActive and sStu do
27694: LD_EXP 54
27698: PUSH
27699: LD_EXP 93
27703: AND
27704: IFFALSE 27720
27706: GO 27708
27708: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27709: LD_STRING displayStucuk();
27711: PPUSH
27712: CALL_OW 559
// ResetFog ;
27716: CALL_OW 335
// end ;
27720: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27721: LD_EXP 54
27725: PUSH
27726: LD_EXP 86
27730: AND
27731: IFFALSE 27872
27733: GO 27735
27735: DISABLE
27736: LD_INT 0
27738: PPUSH
27739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27740: LD_ADDR_VAR 0 2
27744: PUSH
27745: LD_INT 22
27747: PUSH
27748: LD_OWVAR 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 21
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PPUSH
27771: CALL_OW 69
27775: ST_TO_ADDR
// if not tmp then
27776: LD_VAR 0 2
27780: NOT
27781: IFFALSE 27785
// exit ;
27783: GO 27872
// un := tmp [ rand ( 1 , tmp ) ] ;
27785: LD_ADDR_VAR 0 1
27789: PUSH
27790: LD_VAR 0 2
27794: PUSH
27795: LD_INT 1
27797: PPUSH
27798: LD_VAR 0 2
27802: PPUSH
27803: CALL_OW 12
27807: ARRAY
27808: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27809: LD_VAR 0 1
27813: PPUSH
27814: LD_INT 0
27816: PPUSH
27817: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27821: LD_VAR 0 1
27825: PPUSH
27826: LD_OWVAR 3
27830: PUSH
27831: LD_VAR 0 1
27835: DIFF
27836: PPUSH
27837: LD_VAR 0 1
27841: PPUSH
27842: CALL_OW 74
27846: PPUSH
27847: CALL_OW 115
// wait ( 0 0$20 ) ;
27851: LD_INT 700
27853: PPUSH
27854: CALL_OW 67
// SetSide ( un , your_side ) ;
27858: LD_VAR 0 1
27862: PPUSH
27863: LD_OWVAR 2
27867: PPUSH
27868: CALL_OW 235
// end ;
27872: PPOPN 2
27874: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27875: LD_EXP 54
27879: PUSH
27880: LD_EXP 87
27884: AND
27885: IFFALSE 27991
27887: GO 27889
27889: DISABLE
27890: LD_INT 0
27892: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27893: LD_ADDR_VAR 0 1
27897: PUSH
27898: LD_INT 22
27900: PUSH
27901: LD_OWVAR 2
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 30
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 30
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PPUSH
27942: CALL_OW 69
27946: ST_TO_ADDR
// if not depot then
27947: LD_VAR 0 1
27951: NOT
27952: IFFALSE 27956
// exit ;
27954: GO 27991
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27956: LD_VAR 0 1
27960: PUSH
27961: LD_INT 1
27963: ARRAY
27964: PPUSH
27965: CALL_OW 250
27969: PPUSH
27970: LD_VAR 0 1
27974: PUSH
27975: LD_INT 1
27977: ARRAY
27978: PPUSH
27979: CALL_OW 251
27983: PPUSH
27984: LD_INT 70
27986: PPUSH
27987: CALL_OW 495
// end ;
27991: PPOPN 1
27993: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27994: LD_EXP 54
27998: PUSH
27999: LD_EXP 88
28003: AND
28004: IFFALSE 28215
28006: GO 28008
28008: DISABLE
28009: LD_INT 0
28011: PPUSH
28012: PPUSH
28013: PPUSH
28014: PPUSH
28015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28016: LD_ADDR_VAR 0 5
28020: PUSH
28021: LD_INT 22
28023: PUSH
28024: LD_OWVAR 2
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 21
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 69
28051: ST_TO_ADDR
// if not tmp then
28052: LD_VAR 0 5
28056: NOT
28057: IFFALSE 28061
// exit ;
28059: GO 28215
// for i in tmp do
28061: LD_ADDR_VAR 0 1
28065: PUSH
28066: LD_VAR 0 5
28070: PUSH
28071: FOR_IN
28072: IFFALSE 28213
// begin d := rand ( 0 , 5 ) ;
28074: LD_ADDR_VAR 0 4
28078: PUSH
28079: LD_INT 0
28081: PPUSH
28082: LD_INT 5
28084: PPUSH
28085: CALL_OW 12
28089: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28090: LD_ADDR_VAR 0 2
28094: PUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL_OW 250
28104: PPUSH
28105: LD_VAR 0 4
28109: PPUSH
28110: LD_INT 3
28112: PPUSH
28113: LD_INT 12
28115: PPUSH
28116: CALL_OW 12
28120: PPUSH
28121: CALL_OW 272
28125: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28126: LD_ADDR_VAR 0 3
28130: PUSH
28131: LD_VAR 0 1
28135: PPUSH
28136: CALL_OW 251
28140: PPUSH
28141: LD_VAR 0 4
28145: PPUSH
28146: LD_INT 3
28148: PPUSH
28149: LD_INT 12
28151: PPUSH
28152: CALL_OW 12
28156: PPUSH
28157: CALL_OW 273
28161: ST_TO_ADDR
// if ValidHex ( x , y ) then
28162: LD_VAR 0 2
28166: PPUSH
28167: LD_VAR 0 3
28171: PPUSH
28172: CALL_OW 488
28176: IFFALSE 28211
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28178: LD_VAR 0 1
28182: PPUSH
28183: LD_VAR 0 2
28187: PPUSH
28188: LD_VAR 0 3
28192: PPUSH
28193: LD_INT 3
28195: PPUSH
28196: LD_INT 6
28198: PPUSH
28199: CALL_OW 12
28203: PPUSH
28204: LD_INT 1
28206: PPUSH
28207: CALL_OW 483
// end ;
28211: GO 28071
28213: POP
28214: POP
// end ;
28215: PPOPN 5
28217: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28218: LD_EXP 54
28222: PUSH
28223: LD_EXP 89
28227: AND
28228: IFFALSE 28322
28230: GO 28232
28232: DISABLE
28233: LD_INT 0
28235: PPUSH
28236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28237: LD_ADDR_VAR 0 2
28241: PUSH
28242: LD_INT 22
28244: PUSH
28245: LD_OWVAR 2
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 32
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 21
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: PPUSH
28279: CALL_OW 69
28283: ST_TO_ADDR
// if not tmp then
28284: LD_VAR 0 2
28288: NOT
28289: IFFALSE 28293
// exit ;
28291: GO 28322
// for i in tmp do
28293: LD_ADDR_VAR 0 1
28297: PUSH
28298: LD_VAR 0 2
28302: PUSH
28303: FOR_IN
28304: IFFALSE 28320
// SetFuel ( i , 0 ) ;
28306: LD_VAR 0 1
28310: PPUSH
28311: LD_INT 0
28313: PPUSH
28314: CALL_OW 240
28318: GO 28303
28320: POP
28321: POP
// end ;
28322: PPOPN 2
28324: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28325: LD_EXP 54
28329: PUSH
28330: LD_EXP 90
28334: AND
28335: IFFALSE 28401
28337: GO 28339
28339: DISABLE
28340: LD_INT 0
28342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28343: LD_ADDR_VAR 0 1
28347: PUSH
28348: LD_INT 22
28350: PUSH
28351: LD_OWVAR 2
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 30
28362: PUSH
28363: LD_INT 29
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PPUSH
28374: CALL_OW 69
28378: ST_TO_ADDR
// if not tmp then
28379: LD_VAR 0 1
28383: NOT
28384: IFFALSE 28388
// exit ;
28386: GO 28401
// DestroyUnit ( tmp [ 1 ] ) ;
28388: LD_VAR 0 1
28392: PUSH
28393: LD_INT 1
28395: ARRAY
28396: PPUSH
28397: CALL_OW 65
// end ;
28401: PPOPN 1
28403: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28404: LD_EXP 54
28408: PUSH
28409: LD_EXP 92
28413: AND
28414: IFFALSE 28543
28416: GO 28418
28418: DISABLE
28419: LD_INT 0
28421: PPUSH
// begin uc_side := 0 ;
28422: LD_ADDR_OWVAR 20
28426: PUSH
28427: LD_INT 0
28429: ST_TO_ADDR
// uc_nation := nation_arabian ;
28430: LD_ADDR_OWVAR 21
28434: PUSH
28435: LD_INT 2
28437: ST_TO_ADDR
// hc_gallery :=  ;
28438: LD_ADDR_OWVAR 33
28442: PUSH
28443: LD_STRING 
28445: ST_TO_ADDR
// hc_name :=  ;
28446: LD_ADDR_OWVAR 26
28450: PUSH
28451: LD_STRING 
28453: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28454: LD_INT 1
28456: PPUSH
28457: LD_INT 11
28459: PPUSH
28460: LD_INT 10
28462: PPUSH
28463: CALL_OW 380
// un := CreateHuman ;
28467: LD_ADDR_VAR 0 1
28471: PUSH
28472: CALL_OW 44
28476: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28477: LD_VAR 0 1
28481: PPUSH
28482: LD_INT 1
28484: PPUSH
28485: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28489: LD_INT 35
28491: PPUSH
28492: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28496: LD_VAR 0 1
28500: PPUSH
28501: LD_INT 22
28503: PUSH
28504: LD_OWVAR 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PPUSH
28513: CALL_OW 69
28517: PPUSH
28518: LD_VAR 0 1
28522: PPUSH
28523: CALL_OW 74
28527: PPUSH
28528: CALL_OW 115
// until IsDead ( un ) ;
28532: LD_VAR 0 1
28536: PPUSH
28537: CALL_OW 301
28541: IFFALSE 28489
// end ;
28543: PPOPN 1
28545: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28546: LD_EXP 54
28550: PUSH
28551: LD_EXP 94
28555: AND
28556: IFFALSE 28568
28558: GO 28560
28560: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28561: LD_STRING earthquake(getX(game), 0, 32)
28563: PPUSH
28564: CALL_OW 559
28568: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28569: LD_EXP 54
28573: PUSH
28574: LD_EXP 95
28578: AND
28579: IFFALSE 28670
28581: GO 28583
28583: DISABLE
28584: LD_INT 0
28586: PPUSH
// begin enable ;
28587: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28588: LD_ADDR_VAR 0 1
28592: PUSH
28593: LD_INT 22
28595: PUSH
28596: LD_OWVAR 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 21
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 33
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: PPUSH
28630: CALL_OW 69
28634: ST_TO_ADDR
// if not tmp then
28635: LD_VAR 0 1
28639: NOT
28640: IFFALSE 28644
// exit ;
28642: GO 28670
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28644: LD_VAR 0 1
28648: PUSH
28649: LD_INT 1
28651: PPUSH
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 12
28661: ARRAY
28662: PPUSH
28663: LD_INT 1
28665: PPUSH
28666: CALL_OW 234
// end ;
28670: PPOPN 1
28672: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28673: LD_EXP 54
28677: PUSH
28678: LD_EXP 96
28682: AND
28683: IFFALSE 28824
28685: GO 28687
28687: DISABLE
28688: LD_INT 0
28690: PPUSH
28691: PPUSH
28692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28693: LD_ADDR_VAR 0 3
28697: PUSH
28698: LD_INT 22
28700: PUSH
28701: LD_OWVAR 2
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 25
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PPUSH
28724: CALL_OW 69
28728: ST_TO_ADDR
// if not tmp then
28729: LD_VAR 0 3
28733: NOT
28734: IFFALSE 28738
// exit ;
28736: GO 28824
// un := tmp [ rand ( 1 , tmp ) ] ;
28738: LD_ADDR_VAR 0 2
28742: PUSH
28743: LD_VAR 0 3
28747: PUSH
28748: LD_INT 1
28750: PPUSH
28751: LD_VAR 0 3
28755: PPUSH
28756: CALL_OW 12
28760: ARRAY
28761: ST_TO_ADDR
// if Crawls ( un ) then
28762: LD_VAR 0 2
28766: PPUSH
28767: CALL_OW 318
28771: IFFALSE 28782
// ComWalk ( un ) ;
28773: LD_VAR 0 2
28777: PPUSH
28778: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28782: LD_VAR 0 2
28786: PPUSH
28787: LD_INT 9
28789: PPUSH
28790: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28794: LD_INT 28
28796: PPUSH
28797: LD_OWVAR 2
28801: PPUSH
28802: LD_INT 2
28804: PPUSH
28805: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28809: LD_INT 29
28811: PPUSH
28812: LD_OWVAR 2
28816: PPUSH
28817: LD_INT 2
28819: PPUSH
28820: CALL_OW 322
// end ;
28824: PPOPN 3
28826: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28827: LD_EXP 54
28831: PUSH
28832: LD_EXP 97
28836: AND
28837: IFFALSE 28948
28839: GO 28841
28841: DISABLE
28842: LD_INT 0
28844: PPUSH
28845: PPUSH
28846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28847: LD_ADDR_VAR 0 3
28851: PUSH
28852: LD_INT 22
28854: PUSH
28855: LD_OWVAR 2
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 25
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL_OW 69
28882: ST_TO_ADDR
// if not tmp then
28883: LD_VAR 0 3
28887: NOT
28888: IFFALSE 28892
// exit ;
28890: GO 28948
// un := tmp [ rand ( 1 , tmp ) ] ;
28892: LD_ADDR_VAR 0 2
28896: PUSH
28897: LD_VAR 0 3
28901: PUSH
28902: LD_INT 1
28904: PPUSH
28905: LD_VAR 0 3
28909: PPUSH
28910: CALL_OW 12
28914: ARRAY
28915: ST_TO_ADDR
// if Crawls ( un ) then
28916: LD_VAR 0 2
28920: PPUSH
28921: CALL_OW 318
28925: IFFALSE 28936
// ComWalk ( un ) ;
28927: LD_VAR 0 2
28931: PPUSH
28932: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28936: LD_VAR 0 2
28940: PPUSH
28941: LD_INT 8
28943: PPUSH
28944: CALL_OW 336
// end ;
28948: PPOPN 3
28950: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28951: LD_EXP 54
28955: PUSH
28956: LD_EXP 98
28960: AND
28961: IFFALSE 29105
28963: GO 28965
28965: DISABLE
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28970: LD_ADDR_VAR 0 2
28974: PUSH
28975: LD_INT 22
28977: PUSH
28978: LD_OWVAR 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 21
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: LD_INT 34
29002: PUSH
29003: LD_INT 12
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 34
29012: PUSH
29013: LD_INT 51
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 34
29022: PUSH
29023: LD_INT 32
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: PPUSH
29041: CALL_OW 69
29045: ST_TO_ADDR
// if not tmp then
29046: LD_VAR 0 2
29050: NOT
29051: IFFALSE 29055
// exit ;
29053: GO 29105
// for i in tmp do
29055: LD_ADDR_VAR 0 1
29059: PUSH
29060: LD_VAR 0 2
29064: PUSH
29065: FOR_IN
29066: IFFALSE 29103
// if GetCargo ( i , mat_artifact ) = 0 then
29068: LD_VAR 0 1
29072: PPUSH
29073: LD_INT 4
29075: PPUSH
29076: CALL_OW 289
29080: PUSH
29081: LD_INT 0
29083: EQUAL
29084: IFFALSE 29101
// SetCargo ( i , mat_siberit , 100 ) ;
29086: LD_VAR 0 1
29090: PPUSH
29091: LD_INT 3
29093: PPUSH
29094: LD_INT 100
29096: PPUSH
29097: CALL_OW 290
29101: GO 29065
29103: POP
29104: POP
// end ;
29105: PPOPN 2
29107: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29108: LD_EXP 54
29112: PUSH
29113: LD_EXP 99
29117: AND
29118: IFFALSE 29301
29120: GO 29122
29122: DISABLE
29123: LD_INT 0
29125: PPUSH
29126: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29127: LD_ADDR_VAR 0 2
29131: PUSH
29132: LD_INT 22
29134: PUSH
29135: LD_OWVAR 2
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PPUSH
29144: CALL_OW 69
29148: ST_TO_ADDR
// if not tmp then
29149: LD_VAR 0 2
29153: NOT
29154: IFFALSE 29158
// exit ;
29156: GO 29301
// for i := 1 to 2 do
29158: LD_ADDR_VAR 0 1
29162: PUSH
29163: DOUBLE
29164: LD_INT 1
29166: DEC
29167: ST_TO_ADDR
29168: LD_INT 2
29170: PUSH
29171: FOR_TO
29172: IFFALSE 29299
// begin uc_side := your_side ;
29174: LD_ADDR_OWVAR 20
29178: PUSH
29179: LD_OWVAR 2
29183: ST_TO_ADDR
// uc_nation := nation_american ;
29184: LD_ADDR_OWVAR 21
29188: PUSH
29189: LD_INT 1
29191: ST_TO_ADDR
// vc_chassis := us_morphling ;
29192: LD_ADDR_OWVAR 37
29196: PUSH
29197: LD_INT 5
29199: ST_TO_ADDR
// vc_engine := engine_siberite ;
29200: LD_ADDR_OWVAR 39
29204: PUSH
29205: LD_INT 3
29207: ST_TO_ADDR
// vc_control := control_computer ;
29208: LD_ADDR_OWVAR 38
29212: PUSH
29213: LD_INT 3
29215: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29216: LD_ADDR_OWVAR 40
29220: PUSH
29221: LD_INT 10
29223: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29224: LD_VAR 0 2
29228: PUSH
29229: LD_INT 1
29231: ARRAY
29232: PPUSH
29233: CALL_OW 310
29237: NOT
29238: IFFALSE 29285
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29240: CALL_OW 45
29244: PPUSH
29245: LD_VAR 0 2
29249: PUSH
29250: LD_INT 1
29252: ARRAY
29253: PPUSH
29254: CALL_OW 250
29258: PPUSH
29259: LD_VAR 0 2
29263: PUSH
29264: LD_INT 1
29266: ARRAY
29267: PPUSH
29268: CALL_OW 251
29272: PPUSH
29273: LD_INT 12
29275: PPUSH
29276: LD_INT 1
29278: PPUSH
29279: CALL_OW 50
29283: GO 29297
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29285: CALL_OW 45
29289: PPUSH
29290: LD_INT 1
29292: PPUSH
29293: CALL_OW 51
// end ;
29297: GO 29171
29299: POP
29300: POP
// end ;
29301: PPOPN 2
29303: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29304: LD_EXP 54
29308: PUSH
29309: LD_EXP 100
29313: AND
29314: IFFALSE 29536
29316: GO 29318
29318: DISABLE
29319: LD_INT 0
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
29326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29327: LD_ADDR_VAR 0 6
29331: PUSH
29332: LD_INT 22
29334: PUSH
29335: LD_OWVAR 2
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 21
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: LD_INT 23
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: PPUSH
29376: CALL_OW 69
29380: ST_TO_ADDR
// if not tmp then
29381: LD_VAR 0 6
29385: NOT
29386: IFFALSE 29390
// exit ;
29388: GO 29536
// s1 := rand ( 1 , 4 ) ;
29390: LD_ADDR_VAR 0 2
29394: PUSH
29395: LD_INT 1
29397: PPUSH
29398: LD_INT 4
29400: PPUSH
29401: CALL_OW 12
29405: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29406: LD_ADDR_VAR 0 4
29410: PUSH
29411: LD_VAR 0 6
29415: PUSH
29416: LD_INT 1
29418: ARRAY
29419: PPUSH
29420: LD_VAR 0 2
29424: PPUSH
29425: CALL_OW 259
29429: ST_TO_ADDR
// if s1 = 1 then
29430: LD_VAR 0 2
29434: PUSH
29435: LD_INT 1
29437: EQUAL
29438: IFFALSE 29458
// s2 := rand ( 2 , 4 ) else
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_INT 2
29447: PPUSH
29448: LD_INT 4
29450: PPUSH
29451: CALL_OW 12
29455: ST_TO_ADDR
29456: GO 29466
// s2 := 1 ;
29458: LD_ADDR_VAR 0 3
29462: PUSH
29463: LD_INT 1
29465: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29466: LD_ADDR_VAR 0 5
29470: PUSH
29471: LD_VAR 0 6
29475: PUSH
29476: LD_INT 1
29478: ARRAY
29479: PPUSH
29480: LD_VAR 0 3
29484: PPUSH
29485: CALL_OW 259
29489: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29490: LD_VAR 0 6
29494: PUSH
29495: LD_INT 1
29497: ARRAY
29498: PPUSH
29499: LD_VAR 0 2
29503: PPUSH
29504: LD_VAR 0 5
29508: PPUSH
29509: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29513: LD_VAR 0 6
29517: PUSH
29518: LD_INT 1
29520: ARRAY
29521: PPUSH
29522: LD_VAR 0 3
29526: PPUSH
29527: LD_VAR 0 4
29531: PPUSH
29532: CALL_OW 237
// end ;
29536: PPOPN 6
29538: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29539: LD_EXP 54
29543: PUSH
29544: LD_EXP 101
29548: AND
29549: IFFALSE 29628
29551: GO 29553
29553: DISABLE
29554: LD_INT 0
29556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29557: LD_ADDR_VAR 0 1
29561: PUSH
29562: LD_INT 22
29564: PUSH
29565: LD_OWVAR 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 30
29576: PUSH
29577: LD_INT 3
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PPUSH
29588: CALL_OW 69
29592: ST_TO_ADDR
// if not tmp then
29593: LD_VAR 0 1
29597: NOT
29598: IFFALSE 29602
// exit ;
29600: GO 29628
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29602: LD_VAR 0 1
29606: PUSH
29607: LD_INT 1
29609: PPUSH
29610: LD_VAR 0 1
29614: PPUSH
29615: CALL_OW 12
29619: ARRAY
29620: PPUSH
29621: LD_INT 1
29623: PPUSH
29624: CALL_OW 234
// end ;
29628: PPOPN 1
29630: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29631: LD_EXP 54
29635: PUSH
29636: LD_EXP 102
29640: AND
29641: IFFALSE 29753
29643: GO 29645
29645: DISABLE
29646: LD_INT 0
29648: PPUSH
29649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29650: LD_ADDR_VAR 0 2
29654: PUSH
29655: LD_INT 22
29657: PUSH
29658: LD_OWVAR 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 30
29672: PUSH
29673: LD_INT 27
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 30
29682: PUSH
29683: LD_INT 26
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 30
29692: PUSH
29693: LD_INT 28
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PPUSH
29710: CALL_OW 69
29714: ST_TO_ADDR
// if not tmp then
29715: LD_VAR 0 2
29719: NOT
29720: IFFALSE 29724
// exit ;
29722: GO 29753
// for i in tmp do
29724: LD_ADDR_VAR 0 1
29728: PUSH
29729: LD_VAR 0 2
29733: PUSH
29734: FOR_IN
29735: IFFALSE 29751
// SetLives ( i , 1 ) ;
29737: LD_VAR 0 1
29741: PPUSH
29742: LD_INT 1
29744: PPUSH
29745: CALL_OW 234
29749: GO 29734
29751: POP
29752: POP
// end ;
29753: PPOPN 2
29755: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29756: LD_EXP 54
29760: PUSH
29761: LD_EXP 103
29765: AND
29766: IFFALSE 30053
29768: GO 29770
29770: DISABLE
29771: LD_INT 0
29773: PPUSH
29774: PPUSH
29775: PPUSH
// begin i := rand ( 1 , 7 ) ;
29776: LD_ADDR_VAR 0 1
29780: PUSH
29781: LD_INT 1
29783: PPUSH
29784: LD_INT 7
29786: PPUSH
29787: CALL_OW 12
29791: ST_TO_ADDR
// case i of 1 :
29792: LD_VAR 0 1
29796: PUSH
29797: LD_INT 1
29799: DOUBLE
29800: EQUAL
29801: IFTRUE 29805
29803: GO 29815
29805: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29806: LD_STRING earthquake(getX(game), 0, 32)
29808: PPUSH
29809: CALL_OW 559
29813: GO 30053
29815: LD_INT 2
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 29837
29823: POP
// begin ToLua ( displayStucuk(); ) ;
29824: LD_STRING displayStucuk();
29826: PPUSH
29827: CALL_OW 559
// ResetFog ;
29831: CALL_OW 335
// end ; 3 :
29835: GO 30053
29837: LD_INT 3
29839: DOUBLE
29840: EQUAL
29841: IFTRUE 29845
29843: GO 29949
29845: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29846: LD_ADDR_VAR 0 2
29850: PUSH
29851: LD_INT 22
29853: PUSH
29854: LD_OWVAR 2
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 25
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PPUSH
29877: CALL_OW 69
29881: ST_TO_ADDR
// if not tmp then
29882: LD_VAR 0 2
29886: NOT
29887: IFFALSE 29891
// exit ;
29889: GO 30053
// un := tmp [ rand ( 1 , tmp ) ] ;
29891: LD_ADDR_VAR 0 3
29895: PUSH
29896: LD_VAR 0 2
29900: PUSH
29901: LD_INT 1
29903: PPUSH
29904: LD_VAR 0 2
29908: PPUSH
29909: CALL_OW 12
29913: ARRAY
29914: ST_TO_ADDR
// if Crawls ( un ) then
29915: LD_VAR 0 3
29919: PPUSH
29920: CALL_OW 318
29924: IFFALSE 29935
// ComWalk ( un ) ;
29926: LD_VAR 0 3
29930: PPUSH
29931: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29935: LD_VAR 0 3
29939: PPUSH
29940: LD_INT 8
29942: PPUSH
29943: CALL_OW 336
// end ; 4 :
29947: GO 30053
29949: LD_INT 4
29951: DOUBLE
29952: EQUAL
29953: IFTRUE 29957
29955: GO 30031
29957: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29958: LD_ADDR_VAR 0 2
29962: PUSH
29963: LD_INT 22
29965: PUSH
29966: LD_OWVAR 2
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 30
29977: PUSH
29978: LD_INT 29
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PPUSH
29989: CALL_OW 69
29993: ST_TO_ADDR
// if not tmp then
29994: LD_VAR 0 2
29998: NOT
29999: IFFALSE 30003
// exit ;
30001: GO 30053
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30003: LD_VAR 0 2
30007: PUSH
30008: LD_INT 1
30010: ARRAY
30011: PPUSH
30012: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30016: LD_VAR 0 2
30020: PUSH
30021: LD_INT 1
30023: ARRAY
30024: PPUSH
30025: CALL_OW 65
// end ; 5 .. 7 :
30029: GO 30053
30031: LD_INT 5
30033: DOUBLE
30034: GREATEREQUAL
30035: IFFALSE 30043
30037: LD_INT 7
30039: DOUBLE
30040: LESSEQUAL
30041: IFTRUE 30045
30043: GO 30052
30045: POP
// StreamSibBomb ; end ;
30046: CALL 26290 0 0
30050: GO 30053
30052: POP
// end ;
30053: PPOPN 3
30055: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30056: LD_EXP 54
30060: PUSH
30061: LD_EXP 104
30065: AND
30066: IFFALSE 30222
30068: GO 30070
30070: DISABLE
30071: LD_INT 0
30073: PPUSH
30074: PPUSH
30075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30076: LD_ADDR_VAR 0 2
30080: PUSH
30081: LD_INT 81
30083: PUSH
30084: LD_OWVAR 2
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: LD_INT 21
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 21
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: LIST
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PPUSH
30125: CALL_OW 69
30129: ST_TO_ADDR
// if not tmp then
30130: LD_VAR 0 2
30134: NOT
30135: IFFALSE 30139
// exit ;
30137: GO 30222
// p := 0 ;
30139: LD_ADDR_VAR 0 3
30143: PUSH
30144: LD_INT 0
30146: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30147: LD_INT 35
30149: PPUSH
30150: CALL_OW 67
// p := p + 1 ;
30154: LD_ADDR_VAR 0 3
30158: PUSH
30159: LD_VAR 0 3
30163: PUSH
30164: LD_INT 1
30166: PLUS
30167: ST_TO_ADDR
// for i in tmp do
30168: LD_ADDR_VAR 0 1
30172: PUSH
30173: LD_VAR 0 2
30177: PUSH
30178: FOR_IN
30179: IFFALSE 30210
// if GetLives ( i ) < 1000 then
30181: LD_VAR 0 1
30185: PPUSH
30186: CALL_OW 256
30190: PUSH
30191: LD_INT 1000
30193: LESS
30194: IFFALSE 30208
// SetLives ( i , 1000 ) ;
30196: LD_VAR 0 1
30200: PPUSH
30201: LD_INT 1000
30203: PPUSH
30204: CALL_OW 234
30208: GO 30178
30210: POP
30211: POP
// until p > 20 ;
30212: LD_VAR 0 3
30216: PUSH
30217: LD_INT 20
30219: GREATER
30220: IFFALSE 30147
// end ;
30222: PPOPN 3
30224: END
// every 0 0$1 trigger StreamModeActive and sTime do
30225: LD_EXP 54
30229: PUSH
30230: LD_EXP 105
30234: AND
30235: IFFALSE 30270
30237: GO 30239
30239: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30240: LD_INT 28
30242: PPUSH
30243: LD_OWVAR 2
30247: PPUSH
30248: LD_INT 2
30250: PPUSH
30251: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30255: LD_INT 30
30257: PPUSH
30258: LD_OWVAR 2
30262: PPUSH
30263: LD_INT 2
30265: PPUSH
30266: CALL_OW 322
// end ;
30270: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30271: LD_EXP 54
30275: PUSH
30276: LD_EXP 106
30280: AND
30281: IFFALSE 30402
30283: GO 30285
30285: DISABLE
30286: LD_INT 0
30288: PPUSH
30289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30290: LD_ADDR_VAR 0 2
30294: PUSH
30295: LD_INT 22
30297: PUSH
30298: LD_OWVAR 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 21
30309: PUSH
30310: LD_INT 1
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 3
30319: PUSH
30320: LD_INT 23
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: PPUSH
30339: CALL_OW 69
30343: ST_TO_ADDR
// if not tmp then
30344: LD_VAR 0 2
30348: NOT
30349: IFFALSE 30353
// exit ;
30351: GO 30402
// for i in tmp do
30353: LD_ADDR_VAR 0 1
30357: PUSH
30358: LD_VAR 0 2
30362: PUSH
30363: FOR_IN
30364: IFFALSE 30400
// begin if Crawls ( i ) then
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 318
30375: IFFALSE 30386
// ComWalk ( i ) ;
30377: LD_VAR 0 1
30381: PPUSH
30382: CALL_OW 138
// SetClass ( i , 2 ) ;
30386: LD_VAR 0 1
30390: PPUSH
30391: LD_INT 2
30393: PPUSH
30394: CALL_OW 336
// end ;
30398: GO 30363
30400: POP
30401: POP
// end ;
30402: PPOPN 2
30404: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30405: LD_EXP 54
30409: PUSH
30410: LD_EXP 107
30414: AND
30415: IFFALSE 30703
30417: GO 30419
30419: DISABLE
30420: LD_INT 0
30422: PPUSH
30423: PPUSH
30424: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30425: LD_OWVAR 2
30429: PPUSH
30430: LD_INT 9
30432: PPUSH
30433: LD_INT 1
30435: PPUSH
30436: LD_INT 1
30438: PPUSH
30439: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30443: LD_INT 9
30445: PPUSH
30446: LD_OWVAR 2
30450: PPUSH
30451: CALL_OW 343
// uc_side := 9 ;
30455: LD_ADDR_OWVAR 20
30459: PUSH
30460: LD_INT 9
30462: ST_TO_ADDR
// uc_nation := 2 ;
30463: LD_ADDR_OWVAR 21
30467: PUSH
30468: LD_INT 2
30470: ST_TO_ADDR
// hc_name := Dark Warrior ;
30471: LD_ADDR_OWVAR 26
30475: PUSH
30476: LD_STRING Dark Warrior
30478: ST_TO_ADDR
// hc_gallery :=  ;
30479: LD_ADDR_OWVAR 33
30483: PUSH
30484: LD_STRING 
30486: ST_TO_ADDR
// hc_noskilllimit := true ;
30487: LD_ADDR_OWVAR 76
30491: PUSH
30492: LD_INT 1
30494: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30495: LD_ADDR_OWVAR 31
30499: PUSH
30500: LD_INT 30
30502: PUSH
30503: LD_INT 30
30505: PUSH
30506: LD_INT 30
30508: PUSH
30509: LD_INT 30
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: ST_TO_ADDR
// un := CreateHuman ;
30518: LD_ADDR_VAR 0 3
30522: PUSH
30523: CALL_OW 44
30527: ST_TO_ADDR
// hc_noskilllimit := false ;
30528: LD_ADDR_OWVAR 76
30532: PUSH
30533: LD_INT 0
30535: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30536: LD_VAR 0 3
30540: PPUSH
30541: LD_INT 1
30543: PPUSH
30544: CALL_OW 51
// ToLua ( playRanger() ) ;
30548: LD_STRING playRanger()
30550: PPUSH
30551: CALL_OW 559
// p := 0 ;
30555: LD_ADDR_VAR 0 2
30559: PUSH
30560: LD_INT 0
30562: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30563: LD_INT 35
30565: PPUSH
30566: CALL_OW 67
// p := p + 1 ;
30570: LD_ADDR_VAR 0 2
30574: PUSH
30575: LD_VAR 0 2
30579: PUSH
30580: LD_INT 1
30582: PLUS
30583: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30584: LD_VAR 0 3
30588: PPUSH
30589: CALL_OW 256
30593: PUSH
30594: LD_INT 1000
30596: LESS
30597: IFFALSE 30611
// SetLives ( un , 1000 ) ;
30599: LD_VAR 0 3
30603: PPUSH
30604: LD_INT 1000
30606: PPUSH
30607: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30611: LD_VAR 0 3
30615: PPUSH
30616: LD_INT 81
30618: PUSH
30619: LD_OWVAR 2
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 91
30630: PUSH
30631: LD_VAR 0 3
30635: PUSH
30636: LD_INT 30
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PPUSH
30648: CALL_OW 69
30652: PPUSH
30653: LD_VAR 0 3
30657: PPUSH
30658: CALL_OW 74
30662: PPUSH
30663: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30667: LD_VAR 0 2
30671: PUSH
30672: LD_INT 80
30674: GREATER
30675: PUSH
30676: LD_VAR 0 3
30680: PPUSH
30681: CALL_OW 301
30685: OR
30686: IFFALSE 30563
// if un then
30688: LD_VAR 0 3
30692: IFFALSE 30703
// RemoveUnit ( un ) ;
30694: LD_VAR 0 3
30698: PPUSH
30699: CALL_OW 64
// end ;
30703: PPOPN 3
30705: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30706: LD_EXP 108
30710: IFFALSE 30826
30712: GO 30714
30714: DISABLE
30715: LD_INT 0
30717: PPUSH
30718: PPUSH
30719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30720: LD_ADDR_VAR 0 2
30724: PUSH
30725: LD_INT 81
30727: PUSH
30728: LD_OWVAR 2
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 21
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PPUSH
30751: CALL_OW 69
30755: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30756: LD_STRING playComputer()
30758: PPUSH
30759: CALL_OW 559
// if not tmp then
30763: LD_VAR 0 2
30767: NOT
30768: IFFALSE 30772
// exit ;
30770: GO 30826
// for i in tmp do
30772: LD_ADDR_VAR 0 1
30776: PUSH
30777: LD_VAR 0 2
30781: PUSH
30782: FOR_IN
30783: IFFALSE 30824
// for j := 1 to 4 do
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: DOUBLE
30791: LD_INT 1
30793: DEC
30794: ST_TO_ADDR
30795: LD_INT 4
30797: PUSH
30798: FOR_TO
30799: IFFALSE 30820
// SetSkill ( i , j , 10 ) ;
30801: LD_VAR 0 1
30805: PPUSH
30806: LD_VAR 0 3
30810: PPUSH
30811: LD_INT 10
30813: PPUSH
30814: CALL_OW 237
30818: GO 30798
30820: POP
30821: POP
30822: GO 30782
30824: POP
30825: POP
// end ;
30826: PPOPN 3
30828: END
// every 0 0$1 trigger s30 do var i , tmp ;
30829: LD_EXP 109
30833: IFFALSE 30902
30835: GO 30837
30837: DISABLE
30838: LD_INT 0
30840: PPUSH
30841: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30842: LD_ADDR_VAR 0 2
30846: PUSH
30847: LD_INT 22
30849: PUSH
30850: LD_OWVAR 2
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PPUSH
30859: CALL_OW 69
30863: ST_TO_ADDR
// if not tmp then
30864: LD_VAR 0 2
30868: NOT
30869: IFFALSE 30873
// exit ;
30871: GO 30902
// for i in tmp do
30873: LD_ADDR_VAR 0 1
30877: PUSH
30878: LD_VAR 0 2
30882: PUSH
30883: FOR_IN
30884: IFFALSE 30900
// SetLives ( i , 300 ) ;
30886: LD_VAR 0 1
30890: PPUSH
30891: LD_INT 300
30893: PPUSH
30894: CALL_OW 234
30898: GO 30883
30900: POP
30901: POP
// end ;
30902: PPOPN 2
30904: END
// every 0 0$1 trigger s60 do var i , tmp ;
30905: LD_EXP 110
30909: IFFALSE 30978
30911: GO 30913
30913: DISABLE
30914: LD_INT 0
30916: PPUSH
30917: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30918: LD_ADDR_VAR 0 2
30922: PUSH
30923: LD_INT 22
30925: PUSH
30926: LD_OWVAR 2
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PPUSH
30935: CALL_OW 69
30939: ST_TO_ADDR
// if not tmp then
30940: LD_VAR 0 2
30944: NOT
30945: IFFALSE 30949
// exit ;
30947: GO 30978
// for i in tmp do
30949: LD_ADDR_VAR 0 1
30953: PUSH
30954: LD_VAR 0 2
30958: PUSH
30959: FOR_IN
30960: IFFALSE 30976
// SetLives ( i , 600 ) ;
30962: LD_VAR 0 1
30966: PPUSH
30967: LD_INT 600
30969: PPUSH
30970: CALL_OW 234
30974: GO 30959
30976: POP
30977: POP
// end ;
30978: PPOPN 2
30980: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30981: LD_INT 0
30983: PPUSH
// case cmd of 301 :
30984: LD_VAR 0 1
30988: PUSH
30989: LD_INT 301
30991: DOUBLE
30992: EQUAL
30993: IFTRUE 30997
30995: GO 31029
30997: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30998: LD_VAR 0 6
31002: PPUSH
31003: LD_VAR 0 7
31007: PPUSH
31008: LD_VAR 0 8
31012: PPUSH
31013: LD_VAR 0 4
31017: PPUSH
31018: LD_VAR 0 5
31022: PPUSH
31023: CALL 32230 0 5
31027: GO 31150
31029: LD_INT 302
31031: DOUBLE
31032: EQUAL
31033: IFTRUE 31037
31035: GO 31074
31037: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31038: LD_VAR 0 6
31042: PPUSH
31043: LD_VAR 0 7
31047: PPUSH
31048: LD_VAR 0 8
31052: PPUSH
31053: LD_VAR 0 9
31057: PPUSH
31058: LD_VAR 0 4
31062: PPUSH
31063: LD_VAR 0 5
31067: PPUSH
31068: CALL 32321 0 6
31072: GO 31150
31074: LD_INT 303
31076: DOUBLE
31077: EQUAL
31078: IFTRUE 31082
31080: GO 31119
31082: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31083: LD_VAR 0 6
31087: PPUSH
31088: LD_VAR 0 7
31092: PPUSH
31093: LD_VAR 0 8
31097: PPUSH
31098: LD_VAR 0 9
31102: PPUSH
31103: LD_VAR 0 4
31107: PPUSH
31108: LD_VAR 0 5
31112: PPUSH
31113: CALL 31155 0 6
31117: GO 31150
31119: LD_INT 304
31121: DOUBLE
31122: EQUAL
31123: IFTRUE 31127
31125: GO 31149
31127: POP
// hHackTeleport ( unit , x , y ) ; end ;
31128: LD_VAR 0 2
31132: PPUSH
31133: LD_VAR 0 4
31137: PPUSH
31138: LD_VAR 0 5
31142: PPUSH
31143: CALL 32914 0 3
31147: GO 31150
31149: POP
// end ;
31150: LD_VAR 0 12
31154: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31155: LD_INT 0
31157: PPUSH
31158: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31159: LD_VAR 0 1
31163: PUSH
31164: LD_INT 1
31166: LESS
31167: PUSH
31168: LD_VAR 0 1
31172: PUSH
31173: LD_INT 3
31175: GREATER
31176: OR
31177: PUSH
31178: LD_VAR 0 5
31182: PPUSH
31183: LD_VAR 0 6
31187: PPUSH
31188: CALL_OW 428
31192: OR
31193: IFFALSE 31197
// exit ;
31195: GO 31917
// uc_side := your_side ;
31197: LD_ADDR_OWVAR 20
31201: PUSH
31202: LD_OWVAR 2
31206: ST_TO_ADDR
// uc_nation := nation ;
31207: LD_ADDR_OWVAR 21
31211: PUSH
31212: LD_VAR 0 1
31216: ST_TO_ADDR
// bc_level = 1 ;
31217: LD_ADDR_OWVAR 43
31221: PUSH
31222: LD_INT 1
31224: ST_TO_ADDR
// case btype of 1 :
31225: LD_VAR 0 2
31229: PUSH
31230: LD_INT 1
31232: DOUBLE
31233: EQUAL
31234: IFTRUE 31238
31236: GO 31249
31238: POP
// bc_type := b_depot ; 2 :
31239: LD_ADDR_OWVAR 42
31243: PUSH
31244: LD_INT 0
31246: ST_TO_ADDR
31247: GO 31861
31249: LD_INT 2
31251: DOUBLE
31252: EQUAL
31253: IFTRUE 31257
31255: GO 31268
31257: POP
// bc_type := b_warehouse ; 3 :
31258: LD_ADDR_OWVAR 42
31262: PUSH
31263: LD_INT 1
31265: ST_TO_ADDR
31266: GO 31861
31268: LD_INT 3
31270: DOUBLE
31271: EQUAL
31272: IFTRUE 31276
31274: GO 31287
31276: POP
// bc_type := b_lab ; 4 .. 9 :
31277: LD_ADDR_OWVAR 42
31281: PUSH
31282: LD_INT 6
31284: ST_TO_ADDR
31285: GO 31861
31287: LD_INT 4
31289: DOUBLE
31290: GREATEREQUAL
31291: IFFALSE 31299
31293: LD_INT 9
31295: DOUBLE
31296: LESSEQUAL
31297: IFTRUE 31301
31299: GO 31353
31301: POP
// begin bc_type := b_lab_half ;
31302: LD_ADDR_OWVAR 42
31306: PUSH
31307: LD_INT 7
31309: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31310: LD_ADDR_OWVAR 44
31314: PUSH
31315: LD_INT 10
31317: PUSH
31318: LD_INT 11
31320: PUSH
31321: LD_INT 12
31323: PUSH
31324: LD_INT 15
31326: PUSH
31327: LD_INT 14
31329: PUSH
31330: LD_INT 13
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: PUSH
31341: LD_VAR 0 2
31345: PUSH
31346: LD_INT 3
31348: MINUS
31349: ARRAY
31350: ST_TO_ADDR
// end ; 10 .. 13 :
31351: GO 31861
31353: LD_INT 10
31355: DOUBLE
31356: GREATEREQUAL
31357: IFFALSE 31365
31359: LD_INT 13
31361: DOUBLE
31362: LESSEQUAL
31363: IFTRUE 31367
31365: GO 31444
31367: POP
// begin bc_type := b_lab_full ;
31368: LD_ADDR_OWVAR 42
31372: PUSH
31373: LD_INT 8
31375: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31376: LD_ADDR_OWVAR 44
31380: PUSH
31381: LD_INT 10
31383: PUSH
31384: LD_INT 12
31386: PUSH
31387: LD_INT 14
31389: PUSH
31390: LD_INT 13
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: PUSH
31399: LD_VAR 0 2
31403: PUSH
31404: LD_INT 9
31406: MINUS
31407: ARRAY
31408: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31409: LD_ADDR_OWVAR 45
31413: PUSH
31414: LD_INT 11
31416: PUSH
31417: LD_INT 15
31419: PUSH
31420: LD_INT 12
31422: PUSH
31423: LD_INT 15
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: PUSH
31432: LD_VAR 0 2
31436: PUSH
31437: LD_INT 9
31439: MINUS
31440: ARRAY
31441: ST_TO_ADDR
// end ; 14 :
31442: GO 31861
31444: LD_INT 14
31446: DOUBLE
31447: EQUAL
31448: IFTRUE 31452
31450: GO 31463
31452: POP
// bc_type := b_workshop ; 15 :
31453: LD_ADDR_OWVAR 42
31457: PUSH
31458: LD_INT 2
31460: ST_TO_ADDR
31461: GO 31861
31463: LD_INT 15
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 31482
31471: POP
// bc_type := b_factory ; 16 :
31472: LD_ADDR_OWVAR 42
31476: PUSH
31477: LD_INT 3
31479: ST_TO_ADDR
31480: GO 31861
31482: LD_INT 16
31484: DOUBLE
31485: EQUAL
31486: IFTRUE 31490
31488: GO 31501
31490: POP
// bc_type := b_ext_gun ; 17 :
31491: LD_ADDR_OWVAR 42
31495: PUSH
31496: LD_INT 17
31498: ST_TO_ADDR
31499: GO 31861
31501: LD_INT 17
31503: DOUBLE
31504: EQUAL
31505: IFTRUE 31509
31507: GO 31537
31509: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31510: LD_ADDR_OWVAR 42
31514: PUSH
31515: LD_INT 19
31517: PUSH
31518: LD_INT 23
31520: PUSH
31521: LD_INT 19
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: PUSH
31529: LD_VAR 0 1
31533: ARRAY
31534: ST_TO_ADDR
31535: GO 31861
31537: LD_INT 18
31539: DOUBLE
31540: EQUAL
31541: IFTRUE 31545
31543: GO 31556
31545: POP
// bc_type := b_ext_radar ; 19 :
31546: LD_ADDR_OWVAR 42
31550: PUSH
31551: LD_INT 20
31553: ST_TO_ADDR
31554: GO 31861
31556: LD_INT 19
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31564
31562: GO 31575
31564: POP
// bc_type := b_ext_radio ; 20 :
31565: LD_ADDR_OWVAR 42
31569: PUSH
31570: LD_INT 22
31572: ST_TO_ADDR
31573: GO 31861
31575: LD_INT 20
31577: DOUBLE
31578: EQUAL
31579: IFTRUE 31583
31581: GO 31594
31583: POP
// bc_type := b_ext_siberium ; 21 :
31584: LD_ADDR_OWVAR 42
31588: PUSH
31589: LD_INT 21
31591: ST_TO_ADDR
31592: GO 31861
31594: LD_INT 21
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31613
31602: POP
// bc_type := b_ext_computer ; 22 :
31603: LD_ADDR_OWVAR 42
31607: PUSH
31608: LD_INT 24
31610: ST_TO_ADDR
31611: GO 31861
31613: LD_INT 22
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31632
31621: POP
// bc_type := b_ext_track ; 23 :
31622: LD_ADDR_OWVAR 42
31626: PUSH
31627: LD_INT 16
31629: ST_TO_ADDR
31630: GO 31861
31632: LD_INT 23
31634: DOUBLE
31635: EQUAL
31636: IFTRUE 31640
31638: GO 31651
31640: POP
// bc_type := b_ext_laser ; 24 :
31641: LD_ADDR_OWVAR 42
31645: PUSH
31646: LD_INT 25
31648: ST_TO_ADDR
31649: GO 31861
31651: LD_INT 24
31653: DOUBLE
31654: EQUAL
31655: IFTRUE 31659
31657: GO 31670
31659: POP
// bc_type := b_control_tower ; 25 :
31660: LD_ADDR_OWVAR 42
31664: PUSH
31665: LD_INT 36
31667: ST_TO_ADDR
31668: GO 31861
31670: LD_INT 25
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31678
31676: GO 31689
31678: POP
// bc_type := b_breastwork ; 26 :
31679: LD_ADDR_OWVAR 42
31683: PUSH
31684: LD_INT 31
31686: ST_TO_ADDR
31687: GO 31861
31689: LD_INT 26
31691: DOUBLE
31692: EQUAL
31693: IFTRUE 31697
31695: GO 31708
31697: POP
// bc_type := b_bunker ; 27 :
31698: LD_ADDR_OWVAR 42
31702: PUSH
31703: LD_INT 32
31705: ST_TO_ADDR
31706: GO 31861
31708: LD_INT 27
31710: DOUBLE
31711: EQUAL
31712: IFTRUE 31716
31714: GO 31727
31716: POP
// bc_type := b_turret ; 28 :
31717: LD_ADDR_OWVAR 42
31721: PUSH
31722: LD_INT 33
31724: ST_TO_ADDR
31725: GO 31861
31727: LD_INT 28
31729: DOUBLE
31730: EQUAL
31731: IFTRUE 31735
31733: GO 31746
31735: POP
// bc_type := b_armoury ; 29 :
31736: LD_ADDR_OWVAR 42
31740: PUSH
31741: LD_INT 4
31743: ST_TO_ADDR
31744: GO 31861
31746: LD_INT 29
31748: DOUBLE
31749: EQUAL
31750: IFTRUE 31754
31752: GO 31765
31754: POP
// bc_type := b_barracks ; 30 :
31755: LD_ADDR_OWVAR 42
31759: PUSH
31760: LD_INT 5
31762: ST_TO_ADDR
31763: GO 31861
31765: LD_INT 30
31767: DOUBLE
31768: EQUAL
31769: IFTRUE 31773
31771: GO 31784
31773: POP
// bc_type := b_solar_power ; 31 :
31774: LD_ADDR_OWVAR 42
31778: PUSH
31779: LD_INT 27
31781: ST_TO_ADDR
31782: GO 31861
31784: LD_INT 31
31786: DOUBLE
31787: EQUAL
31788: IFTRUE 31792
31790: GO 31803
31792: POP
// bc_type := b_oil_power ; 32 :
31793: LD_ADDR_OWVAR 42
31797: PUSH
31798: LD_INT 26
31800: ST_TO_ADDR
31801: GO 31861
31803: LD_INT 32
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 31822
31811: POP
// bc_type := b_siberite_power ; 33 :
31812: LD_ADDR_OWVAR 42
31816: PUSH
31817: LD_INT 28
31819: ST_TO_ADDR
31820: GO 31861
31822: LD_INT 33
31824: DOUBLE
31825: EQUAL
31826: IFTRUE 31830
31828: GO 31841
31830: POP
// bc_type := b_oil_mine ; 34 :
31831: LD_ADDR_OWVAR 42
31835: PUSH
31836: LD_INT 29
31838: ST_TO_ADDR
31839: GO 31861
31841: LD_INT 34
31843: DOUBLE
31844: EQUAL
31845: IFTRUE 31849
31847: GO 31860
31849: POP
// bc_type := b_siberite_mine ; end ;
31850: LD_ADDR_OWVAR 42
31854: PUSH
31855: LD_INT 30
31857: ST_TO_ADDR
31858: GO 31861
31860: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31861: LD_ADDR_VAR 0 8
31865: PUSH
31866: LD_VAR 0 5
31870: PPUSH
31871: LD_VAR 0 6
31875: PPUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: CALL_OW 47
31885: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31886: LD_OWVAR 42
31890: PUSH
31891: LD_INT 32
31893: PUSH
31894: LD_INT 33
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: IN
31901: IFFALSE 31917
// PlaceWeaponTurret ( b , weapon ) ;
31903: LD_VAR 0 8
31907: PPUSH
31908: LD_VAR 0 4
31912: PPUSH
31913: CALL_OW 431
// end ;
31917: LD_VAR 0 7
31921: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31922: LD_INT 0
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31928: LD_ADDR_VAR 0 4
31932: PUSH
31933: LD_INT 22
31935: PUSH
31936: LD_OWVAR 2
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: LD_INT 30
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 30
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PPUSH
31977: CALL_OW 69
31981: ST_TO_ADDR
// if not tmp then
31982: LD_VAR 0 4
31986: NOT
31987: IFFALSE 31991
// exit ;
31989: GO 32050
// for i in tmp do
31991: LD_ADDR_VAR 0 2
31995: PUSH
31996: LD_VAR 0 4
32000: PUSH
32001: FOR_IN
32002: IFFALSE 32048
// for j = 1 to 3 do
32004: LD_ADDR_VAR 0 3
32008: PUSH
32009: DOUBLE
32010: LD_INT 1
32012: DEC
32013: ST_TO_ADDR
32014: LD_INT 3
32016: PUSH
32017: FOR_TO
32018: IFFALSE 32044
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32020: LD_VAR 0 2
32024: PPUSH
32025: CALL_OW 274
32029: PPUSH
32030: LD_VAR 0 3
32034: PPUSH
32035: LD_INT 99999
32037: PPUSH
32038: CALL_OW 277
32042: GO 32017
32044: POP
32045: POP
32046: GO 32001
32048: POP
32049: POP
// end ;
32050: LD_VAR 0 1
32054: RET
// export function hHackSetLevel10 ; var i , j ; begin
32055: LD_INT 0
32057: PPUSH
32058: PPUSH
32059: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32060: LD_ADDR_VAR 0 2
32064: PUSH
32065: LD_INT 21
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PPUSH
32075: CALL_OW 69
32079: PUSH
32080: FOR_IN
32081: IFFALSE 32133
// if IsSelected ( i ) then
32083: LD_VAR 0 2
32087: PPUSH
32088: CALL_OW 306
32092: IFFALSE 32131
// begin for j := 1 to 4 do
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: DOUBLE
32100: LD_INT 1
32102: DEC
32103: ST_TO_ADDR
32104: LD_INT 4
32106: PUSH
32107: FOR_TO
32108: IFFALSE 32129
// SetSkill ( i , j , 10 ) ;
32110: LD_VAR 0 2
32114: PPUSH
32115: LD_VAR 0 3
32119: PPUSH
32120: LD_INT 10
32122: PPUSH
32123: CALL_OW 237
32127: GO 32107
32129: POP
32130: POP
// end ;
32131: GO 32080
32133: POP
32134: POP
// end ;
32135: LD_VAR 0 1
32139: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32140: LD_INT 0
32142: PPUSH
32143: PPUSH
32144: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32145: LD_ADDR_VAR 0 2
32149: PUSH
32150: LD_INT 22
32152: PUSH
32153: LD_OWVAR 2
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 21
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PPUSH
32176: CALL_OW 69
32180: PUSH
32181: FOR_IN
32182: IFFALSE 32223
// begin for j := 1 to 4 do
32184: LD_ADDR_VAR 0 3
32188: PUSH
32189: DOUBLE
32190: LD_INT 1
32192: DEC
32193: ST_TO_ADDR
32194: LD_INT 4
32196: PUSH
32197: FOR_TO
32198: IFFALSE 32219
// SetSkill ( i , j , 10 ) ;
32200: LD_VAR 0 2
32204: PPUSH
32205: LD_VAR 0 3
32209: PPUSH
32210: LD_INT 10
32212: PPUSH
32213: CALL_OW 237
32217: GO 32197
32219: POP
32220: POP
// end ;
32221: GO 32181
32223: POP
32224: POP
// end ;
32225: LD_VAR 0 1
32229: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32230: LD_INT 0
32232: PPUSH
// uc_side := your_side ;
32233: LD_ADDR_OWVAR 20
32237: PUSH
32238: LD_OWVAR 2
32242: ST_TO_ADDR
// uc_nation := nation ;
32243: LD_ADDR_OWVAR 21
32247: PUSH
32248: LD_VAR 0 1
32252: ST_TO_ADDR
// InitHc ;
32253: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32257: LD_INT 0
32259: PPUSH
32260: LD_VAR 0 2
32264: PPUSH
32265: LD_VAR 0 3
32269: PPUSH
32270: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32274: LD_VAR 0 4
32278: PPUSH
32279: LD_VAR 0 5
32283: PPUSH
32284: CALL_OW 428
32288: PUSH
32289: LD_INT 0
32291: EQUAL
32292: IFFALSE 32316
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32294: CALL_OW 44
32298: PPUSH
32299: LD_VAR 0 4
32303: PPUSH
32304: LD_VAR 0 5
32308: PPUSH
32309: LD_INT 1
32311: PPUSH
32312: CALL_OW 48
// end ;
32316: LD_VAR 0 6
32320: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32321: LD_INT 0
32323: PPUSH
32324: PPUSH
// uc_side := your_side ;
32325: LD_ADDR_OWVAR 20
32329: PUSH
32330: LD_OWVAR 2
32334: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32335: LD_VAR 0 1
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 3
32348: PUSH
32349: LD_INT 4
32351: PUSH
32352: LD_INT 5
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: IN
32362: IFFALSE 32374
// uc_nation := nation_american else
32364: LD_ADDR_OWVAR 21
32368: PUSH
32369: LD_INT 1
32371: ST_TO_ADDR
32372: GO 32417
// if chassis in [ 11 , 12 , 13 , 14 ] then
32374: LD_VAR 0 1
32378: PUSH
32379: LD_INT 11
32381: PUSH
32382: LD_INT 12
32384: PUSH
32385: LD_INT 13
32387: PUSH
32388: LD_INT 14
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: IN
32397: IFFALSE 32409
// uc_nation := nation_arabian else
32399: LD_ADDR_OWVAR 21
32403: PUSH
32404: LD_INT 2
32406: ST_TO_ADDR
32407: GO 32417
// uc_nation := nation_russian ;
32409: LD_ADDR_OWVAR 21
32413: PUSH
32414: LD_INT 3
32416: ST_TO_ADDR
// vc_chassis := chassis ;
32417: LD_ADDR_OWVAR 37
32421: PUSH
32422: LD_VAR 0 1
32426: ST_TO_ADDR
// vc_engine := engine ;
32427: LD_ADDR_OWVAR 39
32431: PUSH
32432: LD_VAR 0 2
32436: ST_TO_ADDR
// vc_control := control ;
32437: LD_ADDR_OWVAR 38
32441: PUSH
32442: LD_VAR 0 3
32446: ST_TO_ADDR
// vc_weapon := weapon ;
32447: LD_ADDR_OWVAR 40
32451: PUSH
32452: LD_VAR 0 4
32456: ST_TO_ADDR
// un := CreateVehicle ;
32457: LD_ADDR_VAR 0 8
32461: PUSH
32462: CALL_OW 45
32466: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32467: LD_VAR 0 8
32471: PPUSH
32472: LD_INT 0
32474: PPUSH
32475: LD_INT 5
32477: PPUSH
32478: CALL_OW 12
32482: PPUSH
32483: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32487: LD_VAR 0 8
32491: PPUSH
32492: LD_VAR 0 5
32496: PPUSH
32497: LD_VAR 0 6
32501: PPUSH
32502: LD_INT 1
32504: PPUSH
32505: CALL_OW 48
// end ;
32509: LD_VAR 0 7
32513: RET
// export hInvincible ; every 1 do
32514: GO 32516
32516: DISABLE
// hInvincible := [ ] ;
32517: LD_ADDR_EXP 111
32521: PUSH
32522: EMPTY
32523: ST_TO_ADDR
32524: END
// every 10 do var i ;
32525: GO 32527
32527: DISABLE
32528: LD_INT 0
32530: PPUSH
// begin enable ;
32531: ENABLE
// if not hInvincible then
32532: LD_EXP 111
32536: NOT
32537: IFFALSE 32541
// exit ;
32539: GO 32585
// for i in hInvincible do
32541: LD_ADDR_VAR 0 1
32545: PUSH
32546: LD_EXP 111
32550: PUSH
32551: FOR_IN
32552: IFFALSE 32583
// if GetLives ( i ) < 1000 then
32554: LD_VAR 0 1
32558: PPUSH
32559: CALL_OW 256
32563: PUSH
32564: LD_INT 1000
32566: LESS
32567: IFFALSE 32581
// SetLives ( i , 1000 ) ;
32569: LD_VAR 0 1
32573: PPUSH
32574: LD_INT 1000
32576: PPUSH
32577: CALL_OW 234
32581: GO 32551
32583: POP
32584: POP
// end ;
32585: PPOPN 1
32587: END
// export function hHackInvincible ; var i ; begin
32588: LD_INT 0
32590: PPUSH
32591: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32592: LD_ADDR_VAR 0 2
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: LD_INT 21
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 21
32612: PUSH
32613: LD_INT 2
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: PPUSH
32625: CALL_OW 69
32629: PUSH
32630: FOR_IN
32631: IFFALSE 32692
// if IsSelected ( i ) then
32633: LD_VAR 0 2
32637: PPUSH
32638: CALL_OW 306
32642: IFFALSE 32690
// begin if i in hInvincible then
32644: LD_VAR 0 2
32648: PUSH
32649: LD_EXP 111
32653: IN
32654: IFFALSE 32674
// hInvincible := hInvincible diff i else
32656: LD_ADDR_EXP 111
32660: PUSH
32661: LD_EXP 111
32665: PUSH
32666: LD_VAR 0 2
32670: DIFF
32671: ST_TO_ADDR
32672: GO 32690
// hInvincible := hInvincible union i ;
32674: LD_ADDR_EXP 111
32678: PUSH
32679: LD_EXP 111
32683: PUSH
32684: LD_VAR 0 2
32688: UNION
32689: ST_TO_ADDR
// end ;
32690: GO 32630
32692: POP
32693: POP
// end ;
32694: LD_VAR 0 1
32698: RET
// export function hHackInvisible ; var i , j ; begin
32699: LD_INT 0
32701: PPUSH
32702: PPUSH
32703: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32704: LD_ADDR_VAR 0 2
32708: PUSH
32709: LD_INT 21
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PPUSH
32719: CALL_OW 69
32723: PUSH
32724: FOR_IN
32725: IFFALSE 32749
// if IsSelected ( i ) then
32727: LD_VAR 0 2
32731: PPUSH
32732: CALL_OW 306
32736: IFFALSE 32747
// ComForceInvisible ( i ) ;
32738: LD_VAR 0 2
32742: PPUSH
32743: CALL_OW 496
32747: GO 32724
32749: POP
32750: POP
// end ;
32751: LD_VAR 0 1
32755: RET
// export function hHackChangeYourSide ; begin
32756: LD_INT 0
32758: PPUSH
// if your_side = 8 then
32759: LD_OWVAR 2
32763: PUSH
32764: LD_INT 8
32766: EQUAL
32767: IFFALSE 32779
// your_side := 0 else
32769: LD_ADDR_OWVAR 2
32773: PUSH
32774: LD_INT 0
32776: ST_TO_ADDR
32777: GO 32793
// your_side := your_side + 1 ;
32779: LD_ADDR_OWVAR 2
32783: PUSH
32784: LD_OWVAR 2
32788: PUSH
32789: LD_INT 1
32791: PLUS
32792: ST_TO_ADDR
// end ;
32793: LD_VAR 0 1
32797: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32798: LD_INT 0
32800: PPUSH
32801: PPUSH
32802: PPUSH
// for i in all_units do
32803: LD_ADDR_VAR 0 2
32807: PUSH
32808: LD_OWVAR 3
32812: PUSH
32813: FOR_IN
32814: IFFALSE 32892
// if IsSelected ( i ) then
32816: LD_VAR 0 2
32820: PPUSH
32821: CALL_OW 306
32825: IFFALSE 32890
// begin j := GetSide ( i ) ;
32827: LD_ADDR_VAR 0 3
32831: PUSH
32832: LD_VAR 0 2
32836: PPUSH
32837: CALL_OW 255
32841: ST_TO_ADDR
// if j = 8 then
32842: LD_VAR 0 3
32846: PUSH
32847: LD_INT 8
32849: EQUAL
32850: IFFALSE 32862
// j := 0 else
32852: LD_ADDR_VAR 0 3
32856: PUSH
32857: LD_INT 0
32859: ST_TO_ADDR
32860: GO 32876
// j := j + 1 ;
32862: LD_ADDR_VAR 0 3
32866: PUSH
32867: LD_VAR 0 3
32871: PUSH
32872: LD_INT 1
32874: PLUS
32875: ST_TO_ADDR
// SetSide ( i , j ) ;
32876: LD_VAR 0 2
32880: PPUSH
32881: LD_VAR 0 3
32885: PPUSH
32886: CALL_OW 235
// end ;
32890: GO 32813
32892: POP
32893: POP
// end ;
32894: LD_VAR 0 1
32898: RET
// export function hHackFog ; begin
32899: LD_INT 0
32901: PPUSH
// FogOff ( true ) ;
32902: LD_INT 1
32904: PPUSH
32905: CALL_OW 344
// end ;
32909: LD_VAR 0 1
32913: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32914: LD_INT 0
32916: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32917: LD_VAR 0 1
32921: PPUSH
32922: LD_VAR 0 2
32926: PPUSH
32927: LD_VAR 0 3
32931: PPUSH
32932: LD_INT 1
32934: PPUSH
32935: LD_INT 1
32937: PPUSH
32938: CALL_OW 483
// CenterOnXY ( x , y ) ;
32942: LD_VAR 0 2
32946: PPUSH
32947: LD_VAR 0 3
32951: PPUSH
32952: CALL_OW 84
// end ;
32956: LD_VAR 0 4
32960: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32961: LD_INT 0
32963: PPUSH
32964: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32965: LD_VAR 0 1
32969: NOT
32970: PUSH
32971: LD_VAR 0 2
32975: PPUSH
32976: LD_VAR 0 3
32980: PPUSH
32981: CALL_OW 488
32985: NOT
32986: OR
32987: PUSH
32988: LD_VAR 0 1
32992: PPUSH
32993: CALL_OW 266
32997: PUSH
32998: LD_INT 3
33000: NONEQUAL
33001: PUSH
33002: LD_VAR 0 1
33006: PPUSH
33007: CALL_OW 247
33011: PUSH
33012: LD_INT 1
33014: EQUAL
33015: NOT
33016: AND
33017: OR
33018: IFFALSE 33022
// exit ;
33020: GO 33171
// if GetType ( factory ) = unit_human then
33022: LD_VAR 0 1
33026: PPUSH
33027: CALL_OW 247
33031: PUSH
33032: LD_INT 1
33034: EQUAL
33035: IFFALSE 33052
// factory := IsInUnit ( factory ) ;
33037: LD_ADDR_VAR 0 1
33041: PUSH
33042: LD_VAR 0 1
33046: PPUSH
33047: CALL_OW 310
33051: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 266
33061: PUSH
33062: LD_INT 3
33064: NONEQUAL
33065: IFFALSE 33069
// exit ;
33067: GO 33171
// if HexInfo ( x , y ) = factory then
33069: LD_VAR 0 2
33073: PPUSH
33074: LD_VAR 0 3
33078: PPUSH
33079: CALL_OW 428
33083: PUSH
33084: LD_VAR 0 1
33088: EQUAL
33089: IFFALSE 33116
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33091: LD_ADDR_EXP 112
33095: PUSH
33096: LD_EXP 112
33100: PPUSH
33101: LD_VAR 0 1
33105: PPUSH
33106: LD_INT 0
33108: PPUSH
33109: CALL_OW 1
33113: ST_TO_ADDR
33114: GO 33167
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33116: LD_ADDR_EXP 112
33120: PUSH
33121: LD_EXP 112
33125: PPUSH
33126: LD_VAR 0 1
33130: PPUSH
33131: LD_VAR 0 1
33135: PPUSH
33136: CALL_OW 255
33140: PUSH
33141: LD_VAR 0 1
33145: PUSH
33146: LD_VAR 0 2
33150: PUSH
33151: LD_VAR 0 3
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: PPUSH
33162: CALL_OW 1
33166: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33167: CALL 33176 0 0
// end ;
33171: LD_VAR 0 4
33175: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33176: LD_INT 0
33178: PPUSH
33179: PPUSH
33180: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33181: LD_STRING resetFactoryWaypoint();
33183: PPUSH
33184: CALL_OW 559
// if factoryWaypoints then
33188: LD_EXP 112
33192: IFFALSE 33318
// begin list := PrepareArray ( factoryWaypoints ) ;
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: LD_EXP 112
33203: PPUSH
33204: CALL 75479 0 1
33208: ST_TO_ADDR
// for i := 1 to list do
33209: LD_ADDR_VAR 0 2
33213: PUSH
33214: DOUBLE
33215: LD_INT 1
33217: DEC
33218: ST_TO_ADDR
33219: LD_VAR 0 3
33223: PUSH
33224: FOR_TO
33225: IFFALSE 33316
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33227: LD_STRING setFactoryWaypointXY(
33229: PUSH
33230: LD_VAR 0 3
33234: PUSH
33235: LD_VAR 0 2
33239: ARRAY
33240: PUSH
33241: LD_INT 1
33243: ARRAY
33244: STR
33245: PUSH
33246: LD_STRING ,
33248: STR
33249: PUSH
33250: LD_VAR 0 3
33254: PUSH
33255: LD_VAR 0 2
33259: ARRAY
33260: PUSH
33261: LD_INT 2
33263: ARRAY
33264: STR
33265: PUSH
33266: LD_STRING ,
33268: STR
33269: PUSH
33270: LD_VAR 0 3
33274: PUSH
33275: LD_VAR 0 2
33279: ARRAY
33280: PUSH
33281: LD_INT 3
33283: ARRAY
33284: STR
33285: PUSH
33286: LD_STRING ,
33288: STR
33289: PUSH
33290: LD_VAR 0 3
33294: PUSH
33295: LD_VAR 0 2
33299: ARRAY
33300: PUSH
33301: LD_INT 4
33303: ARRAY
33304: STR
33305: PUSH
33306: LD_STRING )
33308: STR
33309: PPUSH
33310: CALL_OW 559
33314: GO 33224
33316: POP
33317: POP
// end ; end ;
33318: LD_VAR 0 1
33322: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33323: LD_INT 0
33325: PPUSH
// if HexInfo ( x , y ) = warehouse then
33326: LD_VAR 0 2
33330: PPUSH
33331: LD_VAR 0 3
33335: PPUSH
33336: CALL_OW 428
33340: PUSH
33341: LD_VAR 0 1
33345: EQUAL
33346: IFFALSE 33373
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33348: LD_ADDR_EXP 113
33352: PUSH
33353: LD_EXP 113
33357: PPUSH
33358: LD_VAR 0 1
33362: PPUSH
33363: LD_INT 0
33365: PPUSH
33366: CALL_OW 1
33370: ST_TO_ADDR
33371: GO 33424
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33373: LD_ADDR_EXP 113
33377: PUSH
33378: LD_EXP 113
33382: PPUSH
33383: LD_VAR 0 1
33387: PPUSH
33388: LD_VAR 0 1
33392: PPUSH
33393: CALL_OW 255
33397: PUSH
33398: LD_VAR 0 1
33402: PUSH
33403: LD_VAR 0 2
33407: PUSH
33408: LD_VAR 0 3
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: PPUSH
33419: CALL_OW 1
33423: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33424: CALL 33433 0 0
// end ;
33428: LD_VAR 0 4
33432: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33433: LD_INT 0
33435: PPUSH
33436: PPUSH
33437: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33438: LD_STRING resetWarehouseGatheringPoints();
33440: PPUSH
33441: CALL_OW 559
// if warehouseGatheringPoints then
33445: LD_EXP 113
33449: IFFALSE 33575
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33451: LD_ADDR_VAR 0 3
33455: PUSH
33456: LD_EXP 113
33460: PPUSH
33461: CALL 75479 0 1
33465: ST_TO_ADDR
// for i := 1 to list do
33466: LD_ADDR_VAR 0 2
33470: PUSH
33471: DOUBLE
33472: LD_INT 1
33474: DEC
33475: ST_TO_ADDR
33476: LD_VAR 0 3
33480: PUSH
33481: FOR_TO
33482: IFFALSE 33573
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33484: LD_STRING setWarehouseGatheringPointXY(
33486: PUSH
33487: LD_VAR 0 3
33491: PUSH
33492: LD_VAR 0 2
33496: ARRAY
33497: PUSH
33498: LD_INT 1
33500: ARRAY
33501: STR
33502: PUSH
33503: LD_STRING ,
33505: STR
33506: PUSH
33507: LD_VAR 0 3
33511: PUSH
33512: LD_VAR 0 2
33516: ARRAY
33517: PUSH
33518: LD_INT 2
33520: ARRAY
33521: STR
33522: PUSH
33523: LD_STRING ,
33525: STR
33526: PUSH
33527: LD_VAR 0 3
33531: PUSH
33532: LD_VAR 0 2
33536: ARRAY
33537: PUSH
33538: LD_INT 3
33540: ARRAY
33541: STR
33542: PUSH
33543: LD_STRING ,
33545: STR
33546: PUSH
33547: LD_VAR 0 3
33551: PUSH
33552: LD_VAR 0 2
33556: ARRAY
33557: PUSH
33558: LD_INT 4
33560: ARRAY
33561: STR
33562: PUSH
33563: LD_STRING )
33565: STR
33566: PPUSH
33567: CALL_OW 559
33571: GO 33481
33573: POP
33574: POP
// end ; end ;
33575: LD_VAR 0 1
33579: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33580: LD_EXP 113
33584: IFFALSE 34269
33586: GO 33588
33588: DISABLE
33589: LD_INT 0
33591: PPUSH
33592: PPUSH
33593: PPUSH
33594: PPUSH
33595: PPUSH
33596: PPUSH
33597: PPUSH
33598: PPUSH
33599: PPUSH
// begin enable ;
33600: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33601: LD_ADDR_VAR 0 3
33605: PUSH
33606: LD_EXP 113
33610: PPUSH
33611: CALL 75479 0 1
33615: ST_TO_ADDR
// if not list then
33616: LD_VAR 0 3
33620: NOT
33621: IFFALSE 33625
// exit ;
33623: GO 34269
// for i := 1 to list do
33625: LD_ADDR_VAR 0 1
33629: PUSH
33630: DOUBLE
33631: LD_INT 1
33633: DEC
33634: ST_TO_ADDR
33635: LD_VAR 0 3
33639: PUSH
33640: FOR_TO
33641: IFFALSE 34267
// begin depot := list [ i ] [ 2 ] ;
33643: LD_ADDR_VAR 0 8
33647: PUSH
33648: LD_VAR 0 3
33652: PUSH
33653: LD_VAR 0 1
33657: ARRAY
33658: PUSH
33659: LD_INT 2
33661: ARRAY
33662: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33663: LD_ADDR_VAR 0 5
33667: PUSH
33668: LD_VAR 0 3
33672: PUSH
33673: LD_VAR 0 1
33677: ARRAY
33678: PUSH
33679: LD_INT 1
33681: ARRAY
33682: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33683: LD_VAR 0 8
33687: PPUSH
33688: CALL_OW 301
33692: PUSH
33693: LD_VAR 0 5
33697: PUSH
33698: LD_VAR 0 8
33702: PPUSH
33703: CALL_OW 255
33707: NONEQUAL
33708: OR
33709: IFFALSE 33738
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33711: LD_ADDR_EXP 113
33715: PUSH
33716: LD_EXP 113
33720: PPUSH
33721: LD_VAR 0 8
33725: PPUSH
33726: LD_INT 0
33728: PPUSH
33729: CALL_OW 1
33733: ST_TO_ADDR
// exit ;
33734: POP
33735: POP
33736: GO 34269
// end ; x := list [ i ] [ 3 ] ;
33738: LD_ADDR_VAR 0 6
33742: PUSH
33743: LD_VAR 0 3
33747: PUSH
33748: LD_VAR 0 1
33752: ARRAY
33753: PUSH
33754: LD_INT 3
33756: ARRAY
33757: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33758: LD_ADDR_VAR 0 7
33762: PUSH
33763: LD_VAR 0 3
33767: PUSH
33768: LD_VAR 0 1
33772: ARRAY
33773: PUSH
33774: LD_INT 4
33776: ARRAY
33777: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33778: LD_ADDR_VAR 0 9
33782: PUSH
33783: LD_VAR 0 6
33787: PPUSH
33788: LD_VAR 0 7
33792: PPUSH
33793: LD_INT 16
33795: PPUSH
33796: CALL 74067 0 3
33800: ST_TO_ADDR
// if not cratesNearbyPoint then
33801: LD_VAR 0 9
33805: NOT
33806: IFFALSE 33812
// exit ;
33808: POP
33809: POP
33810: GO 34269
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33812: LD_ADDR_VAR 0 4
33816: PUSH
33817: LD_INT 22
33819: PUSH
33820: LD_VAR 0 5
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 60
33834: PUSH
33835: EMPTY
33836: LIST
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 91
33844: PUSH
33845: LD_VAR 0 8
33849: PUSH
33850: LD_INT 6
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 25
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 25
33873: PUSH
33874: LD_INT 16
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: LIST
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: PPUSH
33892: CALL_OW 69
33896: PUSH
33897: LD_VAR 0 8
33901: PPUSH
33902: CALL_OW 313
33906: PPUSH
33907: LD_INT 3
33909: PUSH
33910: LD_INT 60
33912: PUSH
33913: EMPTY
33914: LIST
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: LD_INT 25
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 25
33935: PUSH
33936: LD_INT 16
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PPUSH
33952: CALL_OW 72
33956: UNION
33957: ST_TO_ADDR
// if tmp then
33958: LD_VAR 0 4
33962: IFFALSE 34042
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33964: LD_ADDR_VAR 0 4
33968: PUSH
33969: LD_VAR 0 4
33973: PPUSH
33974: LD_INT 3
33976: PPUSH
33977: CALL 72036 0 2
33981: ST_TO_ADDR
// for j in tmp do
33982: LD_ADDR_VAR 0 2
33986: PUSH
33987: LD_VAR 0 4
33991: PUSH
33992: FOR_IN
33993: IFFALSE 34036
// begin if IsInUnit ( j ) then
33995: LD_VAR 0 2
33999: PPUSH
34000: CALL_OW 310
34004: IFFALSE 34015
// ComExit ( j ) ;
34006: LD_VAR 0 2
34010: PPUSH
34011: CALL 72119 0 1
// AddComCollect ( j , x , y ) ;
34015: LD_VAR 0 2
34019: PPUSH
34020: LD_VAR 0 6
34024: PPUSH
34025: LD_VAR 0 7
34029: PPUSH
34030: CALL_OW 177
// end ;
34034: GO 33992
34036: POP
34037: POP
// exit ;
34038: POP
34039: POP
34040: GO 34269
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34042: LD_ADDR_VAR 0 4
34046: PUSH
34047: LD_INT 22
34049: PUSH
34050: LD_VAR 0 5
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 91
34061: PUSH
34062: LD_VAR 0 8
34066: PUSH
34067: LD_INT 8
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: PUSH
34078: LD_INT 34
34080: PUSH
34081: LD_INT 12
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 34
34090: PUSH
34091: LD_INT 51
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 34
34100: PUSH
34101: LD_INT 32
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 34
34110: PUSH
34111: LD_INT 89
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: LIST
34129: PPUSH
34130: CALL_OW 69
34134: ST_TO_ADDR
// if tmp then
34135: LD_VAR 0 4
34139: IFFALSE 34265
// begin for j in tmp do
34141: LD_ADDR_VAR 0 2
34145: PUSH
34146: LD_VAR 0 4
34150: PUSH
34151: FOR_IN
34152: IFFALSE 34263
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34154: LD_VAR 0 2
34158: PPUSH
34159: CALL_OW 262
34163: PUSH
34164: LD_INT 3
34166: EQUAL
34167: PUSH
34168: LD_VAR 0 2
34172: PPUSH
34173: CALL_OW 261
34177: PUSH
34178: LD_INT 20
34180: GREATER
34181: OR
34182: PUSH
34183: LD_VAR 0 2
34187: PPUSH
34188: CALL_OW 314
34192: NOT
34193: AND
34194: PUSH
34195: LD_VAR 0 2
34199: PPUSH
34200: CALL_OW 263
34204: PUSH
34205: LD_INT 1
34207: NONEQUAL
34208: PUSH
34209: LD_VAR 0 2
34213: PPUSH
34214: CALL_OW 311
34218: OR
34219: AND
34220: IFFALSE 34261
// begin ComCollect ( j , x , y ) ;
34222: LD_VAR 0 2
34226: PPUSH
34227: LD_VAR 0 6
34231: PPUSH
34232: LD_VAR 0 7
34236: PPUSH
34237: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34241: LD_VAR 0 2
34245: PPUSH
34246: LD_VAR 0 8
34250: PPUSH
34251: CALL_OW 172
// exit ;
34255: POP
34256: POP
34257: POP
34258: POP
34259: GO 34269
// end ;
34261: GO 34151
34263: POP
34264: POP
// end ; end ;
34265: GO 33640
34267: POP
34268: POP
// end ; end_of_file end_of_file
34269: PPOPN 9
34271: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34272: LD_INT 0
34274: PPUSH
34275: PPUSH
// if exist_mode then
34276: LD_VAR 0 2
34280: IFFALSE 34305
// unit := CreateCharacter ( prefix & ident ) else
34282: LD_ADDR_VAR 0 5
34286: PUSH
34287: LD_VAR 0 3
34291: PUSH
34292: LD_VAR 0 1
34296: STR
34297: PPUSH
34298: CALL_OW 34
34302: ST_TO_ADDR
34303: GO 34320
// unit := NewCharacter ( ident ) ;
34305: LD_ADDR_VAR 0 5
34309: PUSH
34310: LD_VAR 0 1
34314: PPUSH
34315: CALL_OW 25
34319: ST_TO_ADDR
// result := unit ;
34320: LD_ADDR_VAR 0 4
34324: PUSH
34325: LD_VAR 0 5
34329: ST_TO_ADDR
// end ;
34330: LD_VAR 0 4
34334: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34335: LD_INT 0
34337: PPUSH
34338: PPUSH
// if not side or not nation then
34339: LD_VAR 0 1
34343: NOT
34344: PUSH
34345: LD_VAR 0 2
34349: NOT
34350: OR
34351: IFFALSE 34355
// exit ;
34353: GO 35123
// case nation of nation_american :
34355: LD_VAR 0 2
34359: PUSH
34360: LD_INT 1
34362: DOUBLE
34363: EQUAL
34364: IFTRUE 34368
34366: GO 34582
34368: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34369: LD_ADDR_VAR 0 4
34373: PUSH
34374: LD_INT 35
34376: PUSH
34377: LD_INT 45
34379: PUSH
34380: LD_INT 46
34382: PUSH
34383: LD_INT 47
34385: PUSH
34386: LD_INT 82
34388: PUSH
34389: LD_INT 83
34391: PUSH
34392: LD_INT 84
34394: PUSH
34395: LD_INT 85
34397: PUSH
34398: LD_INT 86
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: LD_INT 6
34409: PUSH
34410: LD_INT 15
34412: PUSH
34413: LD_INT 16
34415: PUSH
34416: LD_INT 7
34418: PUSH
34419: LD_INT 12
34421: PUSH
34422: LD_INT 13
34424: PUSH
34425: LD_INT 10
34427: PUSH
34428: LD_INT 14
34430: PUSH
34431: LD_INT 20
34433: PUSH
34434: LD_INT 21
34436: PUSH
34437: LD_INT 22
34439: PUSH
34440: LD_INT 25
34442: PUSH
34443: LD_INT 32
34445: PUSH
34446: LD_INT 27
34448: PUSH
34449: LD_INT 36
34451: PUSH
34452: LD_INT 69
34454: PUSH
34455: LD_INT 39
34457: PUSH
34458: LD_INT 34
34460: PUSH
34461: LD_INT 40
34463: PUSH
34464: LD_INT 48
34466: PUSH
34467: LD_INT 49
34469: PUSH
34470: LD_INT 50
34472: PUSH
34473: LD_INT 51
34475: PUSH
34476: LD_INT 52
34478: PUSH
34479: LD_INT 53
34481: PUSH
34482: LD_INT 54
34484: PUSH
34485: LD_INT 55
34487: PUSH
34488: LD_INT 56
34490: PUSH
34491: LD_INT 57
34493: PUSH
34494: LD_INT 58
34496: PUSH
34497: LD_INT 59
34499: PUSH
34500: LD_INT 60
34502: PUSH
34503: LD_INT 61
34505: PUSH
34506: LD_INT 62
34508: PUSH
34509: LD_INT 80
34511: PUSH
34512: LD_INT 82
34514: PUSH
34515: LD_INT 83
34517: PUSH
34518: LD_INT 84
34520: PUSH
34521: LD_INT 85
34523: PUSH
34524: LD_INT 86
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: ST_TO_ADDR
34580: GO 35047
34582: LD_INT 2
34584: DOUBLE
34585: EQUAL
34586: IFTRUE 34590
34588: GO 34816
34590: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34591: LD_ADDR_VAR 0 4
34595: PUSH
34596: LD_INT 35
34598: PUSH
34599: LD_INT 45
34601: PUSH
34602: LD_INT 46
34604: PUSH
34605: LD_INT 47
34607: PUSH
34608: LD_INT 82
34610: PUSH
34611: LD_INT 83
34613: PUSH
34614: LD_INT 84
34616: PUSH
34617: LD_INT 85
34619: PUSH
34620: LD_INT 87
34622: PUSH
34623: LD_INT 70
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 11
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 4
34637: PUSH
34638: LD_INT 5
34640: PUSH
34641: LD_INT 6
34643: PUSH
34644: LD_INT 15
34646: PUSH
34647: LD_INT 18
34649: PUSH
34650: LD_INT 7
34652: PUSH
34653: LD_INT 17
34655: PUSH
34656: LD_INT 8
34658: PUSH
34659: LD_INT 20
34661: PUSH
34662: LD_INT 21
34664: PUSH
34665: LD_INT 22
34667: PUSH
34668: LD_INT 72
34670: PUSH
34671: LD_INT 26
34673: PUSH
34674: LD_INT 69
34676: PUSH
34677: LD_INT 39
34679: PUSH
34680: LD_INT 40
34682: PUSH
34683: LD_INT 41
34685: PUSH
34686: LD_INT 42
34688: PUSH
34689: LD_INT 43
34691: PUSH
34692: LD_INT 48
34694: PUSH
34695: LD_INT 49
34697: PUSH
34698: LD_INT 50
34700: PUSH
34701: LD_INT 51
34703: PUSH
34704: LD_INT 52
34706: PUSH
34707: LD_INT 53
34709: PUSH
34710: LD_INT 54
34712: PUSH
34713: LD_INT 55
34715: PUSH
34716: LD_INT 56
34718: PUSH
34719: LD_INT 60
34721: PUSH
34722: LD_INT 61
34724: PUSH
34725: LD_INT 62
34727: PUSH
34728: LD_INT 66
34730: PUSH
34731: LD_INT 67
34733: PUSH
34734: LD_INT 68
34736: PUSH
34737: LD_INT 81
34739: PUSH
34740: LD_INT 82
34742: PUSH
34743: LD_INT 83
34745: PUSH
34746: LD_INT 84
34748: PUSH
34749: LD_INT 85
34751: PUSH
34752: LD_INT 87
34754: PUSH
34755: LD_INT 88
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 35047
34816: LD_INT 3
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 35046
34824: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34825: LD_ADDR_VAR 0 4
34829: PUSH
34830: LD_INT 46
34832: PUSH
34833: LD_INT 47
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: LD_INT 82
34844: PUSH
34845: LD_INT 83
34847: PUSH
34848: LD_INT 84
34850: PUSH
34851: LD_INT 85
34853: PUSH
34854: LD_INT 86
34856: PUSH
34857: LD_INT 11
34859: PUSH
34860: LD_INT 9
34862: PUSH
34863: LD_INT 20
34865: PUSH
34866: LD_INT 19
34868: PUSH
34869: LD_INT 21
34871: PUSH
34872: LD_INT 24
34874: PUSH
34875: LD_INT 22
34877: PUSH
34878: LD_INT 25
34880: PUSH
34881: LD_INT 28
34883: PUSH
34884: LD_INT 29
34886: PUSH
34887: LD_INT 30
34889: PUSH
34890: LD_INT 31
34892: PUSH
34893: LD_INT 37
34895: PUSH
34896: LD_INT 38
34898: PUSH
34899: LD_INT 32
34901: PUSH
34902: LD_INT 27
34904: PUSH
34905: LD_INT 33
34907: PUSH
34908: LD_INT 69
34910: PUSH
34911: LD_INT 39
34913: PUSH
34914: LD_INT 34
34916: PUSH
34917: LD_INT 40
34919: PUSH
34920: LD_INT 71
34922: PUSH
34923: LD_INT 23
34925: PUSH
34926: LD_INT 44
34928: PUSH
34929: LD_INT 48
34931: PUSH
34932: LD_INT 49
34934: PUSH
34935: LD_INT 50
34937: PUSH
34938: LD_INT 51
34940: PUSH
34941: LD_INT 52
34943: PUSH
34944: LD_INT 53
34946: PUSH
34947: LD_INT 54
34949: PUSH
34950: LD_INT 55
34952: PUSH
34953: LD_INT 56
34955: PUSH
34956: LD_INT 57
34958: PUSH
34959: LD_INT 58
34961: PUSH
34962: LD_INT 59
34964: PUSH
34965: LD_INT 63
34967: PUSH
34968: LD_INT 64
34970: PUSH
34971: LD_INT 65
34973: PUSH
34974: LD_INT 82
34976: PUSH
34977: LD_INT 83
34979: PUSH
34980: LD_INT 84
34982: PUSH
34983: LD_INT 85
34985: PUSH
34986: LD_INT 86
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: ST_TO_ADDR
35044: GO 35047
35046: POP
// if state > - 1 and state < 3 then
35047: LD_VAR 0 3
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: GREATER
35056: PUSH
35057: LD_VAR 0 3
35061: PUSH
35062: LD_INT 3
35064: LESS
35065: AND
35066: IFFALSE 35123
// for i in result do
35068: LD_ADDR_VAR 0 5
35072: PUSH
35073: LD_VAR 0 4
35077: PUSH
35078: FOR_IN
35079: IFFALSE 35121
// if GetTech ( i , side ) <> state then
35081: LD_VAR 0 5
35085: PPUSH
35086: LD_VAR 0 1
35090: PPUSH
35091: CALL_OW 321
35095: PUSH
35096: LD_VAR 0 3
35100: NONEQUAL
35101: IFFALSE 35119
// result := result diff i ;
35103: LD_ADDR_VAR 0 4
35107: PUSH
35108: LD_VAR 0 4
35112: PUSH
35113: LD_VAR 0 5
35117: DIFF
35118: ST_TO_ADDR
35119: GO 35078
35121: POP
35122: POP
// end ;
35123: LD_VAR 0 4
35127: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35128: LD_INT 0
35130: PPUSH
35131: PPUSH
35132: PPUSH
// result := true ;
35133: LD_ADDR_VAR 0 3
35137: PUSH
35138: LD_INT 1
35140: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35141: LD_ADDR_VAR 0 5
35145: PUSH
35146: LD_VAR 0 2
35150: PPUSH
35151: CALL_OW 480
35155: ST_TO_ADDR
// if not tmp then
35156: LD_VAR 0 5
35160: NOT
35161: IFFALSE 35165
// exit ;
35163: GO 35214
// for i in tmp do
35165: LD_ADDR_VAR 0 4
35169: PUSH
35170: LD_VAR 0 5
35174: PUSH
35175: FOR_IN
35176: IFFALSE 35212
// if GetTech ( i , side ) <> state_researched then
35178: LD_VAR 0 4
35182: PPUSH
35183: LD_VAR 0 1
35187: PPUSH
35188: CALL_OW 321
35192: PUSH
35193: LD_INT 2
35195: NONEQUAL
35196: IFFALSE 35210
// begin result := false ;
35198: LD_ADDR_VAR 0 3
35202: PUSH
35203: LD_INT 0
35205: ST_TO_ADDR
// exit ;
35206: POP
35207: POP
35208: GO 35214
// end ;
35210: GO 35175
35212: POP
35213: POP
// end ;
35214: LD_VAR 0 3
35218: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35219: LD_INT 0
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35234: LD_VAR 0 1
35238: NOT
35239: PUSH
35240: LD_VAR 0 1
35244: PPUSH
35245: CALL_OW 257
35249: PUSH
35250: LD_INT 9
35252: NONEQUAL
35253: OR
35254: IFFALSE 35258
// exit ;
35256: GO 35831
// side := GetSide ( unit ) ;
35258: LD_ADDR_VAR 0 9
35262: PUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: CALL_OW 255
35272: ST_TO_ADDR
// tech_space := tech_spacanom ;
35273: LD_ADDR_VAR 0 12
35277: PUSH
35278: LD_INT 29
35280: ST_TO_ADDR
// tech_time := tech_taurad ;
35281: LD_ADDR_VAR 0 13
35285: PUSH
35286: LD_INT 28
35288: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35289: LD_ADDR_VAR 0 11
35293: PUSH
35294: LD_VAR 0 1
35298: PPUSH
35299: CALL_OW 310
35303: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35304: LD_VAR 0 11
35308: PPUSH
35309: CALL_OW 247
35313: PUSH
35314: LD_INT 2
35316: EQUAL
35317: IFFALSE 35321
// exit ;
35319: GO 35831
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35321: LD_ADDR_VAR 0 8
35325: PUSH
35326: LD_INT 81
35328: PUSH
35329: LD_VAR 0 9
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 3
35340: PUSH
35341: LD_INT 21
35343: PUSH
35344: LD_INT 3
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PPUSH
35359: CALL_OW 69
35363: ST_TO_ADDR
// if not tmp then
35364: LD_VAR 0 8
35368: NOT
35369: IFFALSE 35373
// exit ;
35371: GO 35831
// if in_unit then
35373: LD_VAR 0 11
35377: IFFALSE 35401
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35379: LD_ADDR_VAR 0 10
35383: PUSH
35384: LD_VAR 0 8
35388: PPUSH
35389: LD_VAR 0 11
35393: PPUSH
35394: CALL_OW 74
35398: ST_TO_ADDR
35399: GO 35421
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35401: LD_ADDR_VAR 0 10
35405: PUSH
35406: LD_VAR 0 8
35410: PPUSH
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL_OW 74
35420: ST_TO_ADDR
// if not enemy then
35421: LD_VAR 0 10
35425: NOT
35426: IFFALSE 35430
// exit ;
35428: GO 35831
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35430: LD_VAR 0 11
35434: PUSH
35435: LD_VAR 0 11
35439: PPUSH
35440: LD_VAR 0 10
35444: PPUSH
35445: CALL_OW 296
35449: PUSH
35450: LD_INT 13
35452: GREATER
35453: AND
35454: PUSH
35455: LD_VAR 0 1
35459: PPUSH
35460: LD_VAR 0 10
35464: PPUSH
35465: CALL_OW 296
35469: PUSH
35470: LD_INT 12
35472: GREATER
35473: OR
35474: IFFALSE 35478
// exit ;
35476: GO 35831
// missile := [ 1 ] ;
35478: LD_ADDR_VAR 0 14
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: EMPTY
35487: LIST
35488: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35489: LD_VAR 0 9
35493: PPUSH
35494: LD_VAR 0 12
35498: PPUSH
35499: CALL_OW 325
35503: IFFALSE 35532
// missile := Replace ( missile , missile + 1 , 2 ) ;
35505: LD_ADDR_VAR 0 14
35509: PUSH
35510: LD_VAR 0 14
35514: PPUSH
35515: LD_VAR 0 14
35519: PUSH
35520: LD_INT 1
35522: PLUS
35523: PPUSH
35524: LD_INT 2
35526: PPUSH
35527: CALL_OW 1
35531: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35532: LD_VAR 0 9
35536: PPUSH
35537: LD_VAR 0 13
35541: PPUSH
35542: CALL_OW 325
35546: PUSH
35547: LD_VAR 0 10
35551: PPUSH
35552: CALL_OW 255
35556: PPUSH
35557: LD_VAR 0 13
35561: PPUSH
35562: CALL_OW 325
35566: NOT
35567: AND
35568: IFFALSE 35597
// missile := Replace ( missile , missile + 1 , 3 ) ;
35570: LD_ADDR_VAR 0 14
35574: PUSH
35575: LD_VAR 0 14
35579: PPUSH
35580: LD_VAR 0 14
35584: PUSH
35585: LD_INT 1
35587: PLUS
35588: PPUSH
35589: LD_INT 3
35591: PPUSH
35592: CALL_OW 1
35596: ST_TO_ADDR
// if missile < 2 then
35597: LD_VAR 0 14
35601: PUSH
35602: LD_INT 2
35604: LESS
35605: IFFALSE 35609
// exit ;
35607: GO 35831
// x := GetX ( enemy ) ;
35609: LD_ADDR_VAR 0 4
35613: PUSH
35614: LD_VAR 0 10
35618: PPUSH
35619: CALL_OW 250
35623: ST_TO_ADDR
// y := GetY ( enemy ) ;
35624: LD_ADDR_VAR 0 5
35628: PUSH
35629: LD_VAR 0 10
35633: PPUSH
35634: CALL_OW 251
35638: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35639: LD_ADDR_VAR 0 6
35643: PUSH
35644: LD_VAR 0 4
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PPUSH
35653: LD_INT 1
35655: PPUSH
35656: CALL_OW 12
35660: PLUS
35661: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35662: LD_ADDR_VAR 0 7
35666: PUSH
35667: LD_VAR 0 5
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PPUSH
35676: LD_INT 1
35678: PPUSH
35679: CALL_OW 12
35683: PLUS
35684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35685: LD_VAR 0 6
35689: PPUSH
35690: LD_VAR 0 7
35694: PPUSH
35695: CALL_OW 488
35699: NOT
35700: IFFALSE 35722
// begin _x := x ;
35702: LD_ADDR_VAR 0 6
35706: PUSH
35707: LD_VAR 0 4
35711: ST_TO_ADDR
// _y := y ;
35712: LD_ADDR_VAR 0 7
35716: PUSH
35717: LD_VAR 0 5
35721: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35722: LD_ADDR_VAR 0 3
35726: PUSH
35727: LD_INT 1
35729: PPUSH
35730: LD_VAR 0 14
35734: PPUSH
35735: CALL_OW 12
35739: ST_TO_ADDR
// case i of 1 :
35740: LD_VAR 0 3
35744: PUSH
35745: LD_INT 1
35747: DOUBLE
35748: EQUAL
35749: IFTRUE 35753
35751: GO 35770
35753: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35754: LD_VAR 0 1
35758: PPUSH
35759: LD_VAR 0 10
35763: PPUSH
35764: CALL_OW 115
35768: GO 35831
35770: LD_INT 2
35772: DOUBLE
35773: EQUAL
35774: IFTRUE 35778
35776: GO 35800
35778: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35779: LD_VAR 0 1
35783: PPUSH
35784: LD_VAR 0 6
35788: PPUSH
35789: LD_VAR 0 7
35793: PPUSH
35794: CALL_OW 153
35798: GO 35831
35800: LD_INT 3
35802: DOUBLE
35803: EQUAL
35804: IFTRUE 35808
35806: GO 35830
35808: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35809: LD_VAR 0 1
35813: PPUSH
35814: LD_VAR 0 6
35818: PPUSH
35819: LD_VAR 0 7
35823: PPUSH
35824: CALL_OW 154
35828: GO 35831
35830: POP
// end ;
35831: LD_VAR 0 2
35835: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35836: LD_INT 0
35838: PPUSH
35839: PPUSH
35840: PPUSH
35841: PPUSH
35842: PPUSH
35843: PPUSH
// if not unit or not building then
35844: LD_VAR 0 1
35848: NOT
35849: PUSH
35850: LD_VAR 0 2
35854: NOT
35855: OR
35856: IFFALSE 35860
// exit ;
35858: GO 36018
// x := GetX ( building ) ;
35860: LD_ADDR_VAR 0 5
35864: PUSH
35865: LD_VAR 0 2
35869: PPUSH
35870: CALL_OW 250
35874: ST_TO_ADDR
// y := GetY ( building ) ;
35875: LD_ADDR_VAR 0 6
35879: PUSH
35880: LD_VAR 0 2
35884: PPUSH
35885: CALL_OW 251
35889: ST_TO_ADDR
// for i = 0 to 5 do
35890: LD_ADDR_VAR 0 4
35894: PUSH
35895: DOUBLE
35896: LD_INT 0
35898: DEC
35899: ST_TO_ADDR
35900: LD_INT 5
35902: PUSH
35903: FOR_TO
35904: IFFALSE 36016
// begin _x := ShiftX ( x , i , 3 ) ;
35906: LD_ADDR_VAR 0 7
35910: PUSH
35911: LD_VAR 0 5
35915: PPUSH
35916: LD_VAR 0 4
35920: PPUSH
35921: LD_INT 3
35923: PPUSH
35924: CALL_OW 272
35928: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35929: LD_ADDR_VAR 0 8
35933: PUSH
35934: LD_VAR 0 6
35938: PPUSH
35939: LD_VAR 0 4
35943: PPUSH
35944: LD_INT 3
35946: PPUSH
35947: CALL_OW 273
35951: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35952: LD_VAR 0 7
35956: PPUSH
35957: LD_VAR 0 8
35961: PPUSH
35962: CALL_OW 488
35966: NOT
35967: IFFALSE 35971
// continue ;
35969: GO 35903
// if HexInfo ( _x , _y ) = 0 then
35971: LD_VAR 0 7
35975: PPUSH
35976: LD_VAR 0 8
35980: PPUSH
35981: CALL_OW 428
35985: PUSH
35986: LD_INT 0
35988: EQUAL
35989: IFFALSE 36014
// begin ComMoveXY ( unit , _x , _y ) ;
35991: LD_VAR 0 1
35995: PPUSH
35996: LD_VAR 0 7
36000: PPUSH
36001: LD_VAR 0 8
36005: PPUSH
36006: CALL_OW 111
// exit ;
36010: POP
36011: POP
36012: GO 36018
// end ; end ;
36014: GO 35903
36016: POP
36017: POP
// end ;
36018: LD_VAR 0 3
36022: RET
// export function ScanBase ( side , base_area ) ; begin
36023: LD_INT 0
36025: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36026: LD_ADDR_VAR 0 3
36030: PUSH
36031: LD_VAR 0 2
36035: PPUSH
36036: LD_INT 81
36038: PUSH
36039: LD_VAR 0 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PPUSH
36048: CALL_OW 70
36052: ST_TO_ADDR
// end ;
36053: LD_VAR 0 3
36057: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36058: LD_INT 0
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
// result := false ;
36064: LD_ADDR_VAR 0 2
36068: PUSH
36069: LD_INT 0
36071: ST_TO_ADDR
// side := GetSide ( unit ) ;
36072: LD_ADDR_VAR 0 3
36076: PUSH
36077: LD_VAR 0 1
36081: PPUSH
36082: CALL_OW 255
36086: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36087: LD_ADDR_VAR 0 4
36091: PUSH
36092: LD_VAR 0 1
36096: PPUSH
36097: CALL_OW 248
36101: ST_TO_ADDR
// case nat of 1 :
36102: LD_VAR 0 4
36106: PUSH
36107: LD_INT 1
36109: DOUBLE
36110: EQUAL
36111: IFTRUE 36115
36113: GO 36126
36115: POP
// tech := tech_lassight ; 2 :
36116: LD_ADDR_VAR 0 5
36120: PUSH
36121: LD_INT 12
36123: ST_TO_ADDR
36124: GO 36165
36126: LD_INT 2
36128: DOUBLE
36129: EQUAL
36130: IFTRUE 36134
36132: GO 36145
36134: POP
// tech := tech_mortar ; 3 :
36135: LD_ADDR_VAR 0 5
36139: PUSH
36140: LD_INT 41
36142: ST_TO_ADDR
36143: GO 36165
36145: LD_INT 3
36147: DOUBLE
36148: EQUAL
36149: IFTRUE 36153
36151: GO 36164
36153: POP
// tech := tech_bazooka ; end ;
36154: LD_ADDR_VAR 0 5
36158: PUSH
36159: LD_INT 44
36161: ST_TO_ADDR
36162: GO 36165
36164: POP
// if Researched ( side , tech ) then
36165: LD_VAR 0 3
36169: PPUSH
36170: LD_VAR 0 5
36174: PPUSH
36175: CALL_OW 325
36179: IFFALSE 36206
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36181: LD_ADDR_VAR 0 2
36185: PUSH
36186: LD_INT 5
36188: PUSH
36189: LD_INT 8
36191: PUSH
36192: LD_INT 9
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: PUSH
36200: LD_VAR 0 4
36204: ARRAY
36205: ST_TO_ADDR
// end ;
36206: LD_VAR 0 2
36210: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36211: LD_INT 0
36213: PPUSH
36214: PPUSH
36215: PPUSH
// if not mines then
36216: LD_VAR 0 2
36220: NOT
36221: IFFALSE 36225
// exit ;
36223: GO 36369
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36225: LD_ADDR_VAR 0 5
36229: PUSH
36230: LD_INT 81
36232: PUSH
36233: LD_VAR 0 1
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 3
36244: PUSH
36245: LD_INT 21
36247: PUSH
36248: LD_INT 3
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PPUSH
36263: CALL_OW 69
36267: ST_TO_ADDR
// for i in mines do
36268: LD_ADDR_VAR 0 4
36272: PUSH
36273: LD_VAR 0 2
36277: PUSH
36278: FOR_IN
36279: IFFALSE 36367
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36281: LD_VAR 0 4
36285: PUSH
36286: LD_INT 1
36288: ARRAY
36289: PPUSH
36290: LD_VAR 0 4
36294: PUSH
36295: LD_INT 2
36297: ARRAY
36298: PPUSH
36299: CALL_OW 458
36303: NOT
36304: IFFALSE 36308
// continue ;
36306: GO 36278
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36308: LD_VAR 0 4
36312: PUSH
36313: LD_INT 1
36315: ARRAY
36316: PPUSH
36317: LD_VAR 0 4
36321: PUSH
36322: LD_INT 2
36324: ARRAY
36325: PPUSH
36326: CALL_OW 428
36330: PUSH
36331: LD_VAR 0 5
36335: IN
36336: IFFALSE 36365
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36338: LD_VAR 0 4
36342: PUSH
36343: LD_INT 1
36345: ARRAY
36346: PPUSH
36347: LD_VAR 0 4
36351: PUSH
36352: LD_INT 2
36354: ARRAY
36355: PPUSH
36356: LD_VAR 0 1
36360: PPUSH
36361: CALL_OW 456
// end ;
36365: GO 36278
36367: POP
36368: POP
// end ;
36369: LD_VAR 0 3
36373: RET
// export function Count ( array ) ; var i ; begin
36374: LD_INT 0
36376: PPUSH
36377: PPUSH
// result := 0 ;
36378: LD_ADDR_VAR 0 2
36382: PUSH
36383: LD_INT 0
36385: ST_TO_ADDR
// for i in array do
36386: LD_ADDR_VAR 0 3
36390: PUSH
36391: LD_VAR 0 1
36395: PUSH
36396: FOR_IN
36397: IFFALSE 36421
// if i then
36399: LD_VAR 0 3
36403: IFFALSE 36419
// result := result + 1 ;
36405: LD_ADDR_VAR 0 2
36409: PUSH
36410: LD_VAR 0 2
36414: PUSH
36415: LD_INT 1
36417: PLUS
36418: ST_TO_ADDR
36419: GO 36396
36421: POP
36422: POP
// end ;
36423: LD_VAR 0 2
36427: RET
// export function IsEmpty ( building ) ; begin
36428: LD_INT 0
36430: PPUSH
// if not building then
36431: LD_VAR 0 1
36435: NOT
36436: IFFALSE 36440
// exit ;
36438: GO 36483
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36440: LD_ADDR_VAR 0 2
36444: PUSH
36445: LD_VAR 0 1
36449: PUSH
36450: LD_INT 22
36452: PUSH
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL_OW 255
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 58
36469: PUSH
36470: EMPTY
36471: LIST
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PPUSH
36477: CALL_OW 69
36481: IN
36482: ST_TO_ADDR
// end ;
36483: LD_VAR 0 2
36487: RET
// export function IsNotFull ( building ) ; var places ; begin
36488: LD_INT 0
36490: PPUSH
36491: PPUSH
// if not building then
36492: LD_VAR 0 1
36496: NOT
36497: IFFALSE 36501
// exit ;
36499: GO 36672
// result := false ;
36501: LD_ADDR_VAR 0 2
36505: PUSH
36506: LD_INT 0
36508: ST_TO_ADDR
// places := 0 ;
36509: LD_ADDR_VAR 0 3
36513: PUSH
36514: LD_INT 0
36516: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
36517: LD_VAR 0 1
36521: PPUSH
36522: CALL_OW 266
36526: PUSH
36527: LD_INT 0
36529: DOUBLE
36530: EQUAL
36531: IFTRUE 36589
36533: LD_INT 1
36535: DOUBLE
36536: EQUAL
36537: IFTRUE 36589
36539: LD_INT 6
36541: DOUBLE
36542: EQUAL
36543: IFTRUE 36589
36545: LD_INT 7
36547: DOUBLE
36548: EQUAL
36549: IFTRUE 36589
36551: LD_INT 8
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36589
36557: LD_INT 4
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36589
36563: LD_INT 5
36565: DOUBLE
36566: EQUAL
36567: IFTRUE 36589
36569: LD_INT 2
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36589
36575: LD_INT 3
36577: DOUBLE
36578: EQUAL
36579: IFTRUE 36589
36581: LD_INT 35
36583: DOUBLE
36584: EQUAL
36585: IFTRUE 36589
36587: GO 36600
36589: POP
// places := 6 ; b_bunker , b_breastwork :
36590: LD_ADDR_VAR 0 3
36594: PUSH
36595: LD_INT 6
36597: ST_TO_ADDR
36598: GO 36645
36600: LD_INT 32
36602: DOUBLE
36603: EQUAL
36604: IFTRUE 36614
36606: LD_INT 31
36608: DOUBLE
36609: EQUAL
36610: IFTRUE 36614
36612: GO 36625
36614: POP
// places := 1 ; b_control_tower :
36615: LD_ADDR_VAR 0 3
36619: PUSH
36620: LD_INT 1
36622: ST_TO_ADDR
36623: GO 36645
36625: LD_INT 36
36627: DOUBLE
36628: EQUAL
36629: IFTRUE 36633
36631: GO 36644
36633: POP
// places := 3 ; end ;
36634: LD_ADDR_VAR 0 3
36638: PUSH
36639: LD_INT 3
36641: ST_TO_ADDR
36642: GO 36645
36644: POP
// if places then
36645: LD_VAR 0 3
36649: IFFALSE 36672
// result := UnitsInside ( building ) < places ;
36651: LD_ADDR_VAR 0 2
36655: PUSH
36656: LD_VAR 0 1
36660: PPUSH
36661: CALL_OW 313
36665: PUSH
36666: LD_VAR 0 3
36670: LESS
36671: ST_TO_ADDR
// end ;
36672: LD_VAR 0 2
36676: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36677: LD_INT 0
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
// tmp := [ ] ;
36683: LD_ADDR_VAR 0 3
36687: PUSH
36688: EMPTY
36689: ST_TO_ADDR
// list := [ ] ;
36690: LD_ADDR_VAR 0 5
36694: PUSH
36695: EMPTY
36696: ST_TO_ADDR
// for i = 16 to 25 do
36697: LD_ADDR_VAR 0 4
36701: PUSH
36702: DOUBLE
36703: LD_INT 16
36705: DEC
36706: ST_TO_ADDR
36707: LD_INT 25
36709: PUSH
36710: FOR_TO
36711: IFFALSE 36784
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36713: LD_ADDR_VAR 0 3
36717: PUSH
36718: LD_VAR 0 3
36722: PUSH
36723: LD_INT 22
36725: PUSH
36726: LD_VAR 0 1
36730: PPUSH
36731: CALL_OW 255
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 91
36742: PUSH
36743: LD_VAR 0 1
36747: PUSH
36748: LD_INT 6
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 30
36758: PUSH
36759: LD_VAR 0 4
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: PPUSH
36776: CALL_OW 69
36780: ADD
36781: ST_TO_ADDR
36782: GO 36710
36784: POP
36785: POP
// for i = 1 to tmp do
36786: LD_ADDR_VAR 0 4
36790: PUSH
36791: DOUBLE
36792: LD_INT 1
36794: DEC
36795: ST_TO_ADDR
36796: LD_VAR 0 3
36800: PUSH
36801: FOR_TO
36802: IFFALSE 36890
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36804: LD_ADDR_VAR 0 5
36808: PUSH
36809: LD_VAR 0 5
36813: PUSH
36814: LD_VAR 0 3
36818: PUSH
36819: LD_VAR 0 4
36823: ARRAY
36824: PPUSH
36825: CALL_OW 266
36829: PUSH
36830: LD_VAR 0 3
36834: PUSH
36835: LD_VAR 0 4
36839: ARRAY
36840: PPUSH
36841: CALL_OW 250
36845: PUSH
36846: LD_VAR 0 3
36850: PUSH
36851: LD_VAR 0 4
36855: ARRAY
36856: PPUSH
36857: CALL_OW 251
36861: PUSH
36862: LD_VAR 0 3
36866: PUSH
36867: LD_VAR 0 4
36871: ARRAY
36872: PPUSH
36873: CALL_OW 254
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: PUSH
36884: EMPTY
36885: LIST
36886: ADD
36887: ST_TO_ADDR
36888: GO 36801
36890: POP
36891: POP
// result := list ;
36892: LD_ADDR_VAR 0 2
36896: PUSH
36897: LD_VAR 0 5
36901: ST_TO_ADDR
// end ;
36902: LD_VAR 0 2
36906: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36907: LD_INT 0
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
// if not factory then
36916: LD_VAR 0 1
36920: NOT
36921: IFFALSE 36925
// exit ;
36923: GO 37518
// if control = control_apeman then
36925: LD_VAR 0 4
36929: PUSH
36930: LD_INT 5
36932: EQUAL
36933: IFFALSE 37042
// begin tmp := UnitsInside ( factory ) ;
36935: LD_ADDR_VAR 0 8
36939: PUSH
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL_OW 313
36949: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36950: LD_VAR 0 8
36954: PPUSH
36955: LD_INT 25
36957: PUSH
36958: LD_INT 12
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PPUSH
36965: CALL_OW 72
36969: NOT
36970: IFFALSE 36980
// control := control_manual ;
36972: LD_ADDR_VAR 0 4
36976: PUSH
36977: LD_INT 1
36979: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36980: LD_ADDR_VAR 0 8
36984: PUSH
36985: LD_VAR 0 1
36989: PPUSH
36990: CALL 36677 0 1
36994: ST_TO_ADDR
// if tmp then
36995: LD_VAR 0 8
36999: IFFALSE 37042
// begin for i in tmp do
37001: LD_ADDR_VAR 0 7
37005: PUSH
37006: LD_VAR 0 8
37010: PUSH
37011: FOR_IN
37012: IFFALSE 37040
// if i [ 1 ] = b_ext_radio then
37014: LD_VAR 0 7
37018: PUSH
37019: LD_INT 1
37021: ARRAY
37022: PUSH
37023: LD_INT 22
37025: EQUAL
37026: IFFALSE 37038
// begin control := control_remote ;
37028: LD_ADDR_VAR 0 4
37032: PUSH
37033: LD_INT 2
37035: ST_TO_ADDR
// break ;
37036: GO 37040
// end ;
37038: GO 37011
37040: POP
37041: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37042: LD_VAR 0 1
37046: PPUSH
37047: LD_VAR 0 2
37051: PPUSH
37052: LD_VAR 0 3
37056: PPUSH
37057: LD_VAR 0 4
37061: PPUSH
37062: LD_VAR 0 5
37066: PPUSH
37067: CALL_OW 448
37071: IFFALSE 37106
// begin result := [ chassis , engine , control , weapon ] ;
37073: LD_ADDR_VAR 0 6
37077: PUSH
37078: LD_VAR 0 2
37082: PUSH
37083: LD_VAR 0 3
37087: PUSH
37088: LD_VAR 0 4
37092: PUSH
37093: LD_VAR 0 5
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// exit ;
37104: GO 37518
// end ; _chassis := AvailableChassisList ( factory ) ;
37106: LD_ADDR_VAR 0 9
37110: PUSH
37111: LD_VAR 0 1
37115: PPUSH
37116: CALL_OW 475
37120: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37121: LD_ADDR_VAR 0 11
37125: PUSH
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 476
37135: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37136: LD_ADDR_VAR 0 12
37140: PUSH
37141: LD_VAR 0 1
37145: PPUSH
37146: CALL_OW 477
37150: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37151: LD_ADDR_VAR 0 10
37155: PUSH
37156: LD_VAR 0 1
37160: PPUSH
37161: CALL_OW 478
37165: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37166: LD_VAR 0 9
37170: NOT
37171: PUSH
37172: LD_VAR 0 11
37176: NOT
37177: OR
37178: PUSH
37179: LD_VAR 0 12
37183: NOT
37184: OR
37185: PUSH
37186: LD_VAR 0 10
37190: NOT
37191: OR
37192: IFFALSE 37227
// begin result := [ chassis , engine , control , weapon ] ;
37194: LD_ADDR_VAR 0 6
37198: PUSH
37199: LD_VAR 0 2
37203: PUSH
37204: LD_VAR 0 3
37208: PUSH
37209: LD_VAR 0 4
37213: PUSH
37214: LD_VAR 0 5
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
// exit ;
37225: GO 37518
// end ; if not chassis in _chassis then
37227: LD_VAR 0 2
37231: PUSH
37232: LD_VAR 0 9
37236: IN
37237: NOT
37238: IFFALSE 37264
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37240: LD_ADDR_VAR 0 2
37244: PUSH
37245: LD_VAR 0 9
37249: PUSH
37250: LD_INT 1
37252: PPUSH
37253: LD_VAR 0 9
37257: PPUSH
37258: CALL_OW 12
37262: ARRAY
37263: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37264: LD_VAR 0 2
37268: PPUSH
37269: LD_VAR 0 3
37273: PPUSH
37274: CALL 37523 0 2
37278: NOT
37279: IFFALSE 37338
// repeat engine := _engine [ 1 ] ;
37281: LD_ADDR_VAR 0 3
37285: PUSH
37286: LD_VAR 0 11
37290: PUSH
37291: LD_INT 1
37293: ARRAY
37294: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37295: LD_ADDR_VAR 0 11
37299: PUSH
37300: LD_VAR 0 11
37304: PPUSH
37305: LD_INT 1
37307: PPUSH
37308: CALL_OW 3
37312: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37313: LD_VAR 0 2
37317: PPUSH
37318: LD_VAR 0 3
37322: PPUSH
37323: CALL 37523 0 2
37327: PUSH
37328: LD_VAR 0 11
37332: PUSH
37333: EMPTY
37334: EQUAL
37335: OR
37336: IFFALSE 37281
// if not control in _control then
37338: LD_VAR 0 4
37342: PUSH
37343: LD_VAR 0 12
37347: IN
37348: NOT
37349: IFFALSE 37375
// control := _control [ rand ( 1 , _control ) ] ;
37351: LD_ADDR_VAR 0 4
37355: PUSH
37356: LD_VAR 0 12
37360: PUSH
37361: LD_INT 1
37363: PPUSH
37364: LD_VAR 0 12
37368: PPUSH
37369: CALL_OW 12
37373: ARRAY
37374: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37375: LD_VAR 0 2
37379: PPUSH
37380: LD_VAR 0 5
37384: PPUSH
37385: CALL 37743 0 2
37389: NOT
37390: IFFALSE 37449
// repeat weapon := _weapon [ 1 ] ;
37392: LD_ADDR_VAR 0 5
37396: PUSH
37397: LD_VAR 0 10
37401: PUSH
37402: LD_INT 1
37404: ARRAY
37405: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37406: LD_ADDR_VAR 0 10
37410: PUSH
37411: LD_VAR 0 10
37415: PPUSH
37416: LD_INT 1
37418: PPUSH
37419: CALL_OW 3
37423: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37424: LD_VAR 0 2
37428: PPUSH
37429: LD_VAR 0 5
37433: PPUSH
37434: CALL 37743 0 2
37438: PUSH
37439: LD_VAR 0 10
37443: PUSH
37444: EMPTY
37445: EQUAL
37446: OR
37447: IFFALSE 37392
// result := [ ] ;
37449: LD_ADDR_VAR 0 6
37453: PUSH
37454: EMPTY
37455: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37456: LD_VAR 0 1
37460: PPUSH
37461: LD_VAR 0 2
37465: PPUSH
37466: LD_VAR 0 3
37470: PPUSH
37471: LD_VAR 0 4
37475: PPUSH
37476: LD_VAR 0 5
37480: PPUSH
37481: CALL_OW 448
37485: IFFALSE 37518
// result := [ chassis , engine , control , weapon ] ;
37487: LD_ADDR_VAR 0 6
37491: PUSH
37492: LD_VAR 0 2
37496: PUSH
37497: LD_VAR 0 3
37501: PUSH
37502: LD_VAR 0 4
37506: PUSH
37507: LD_VAR 0 5
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
// end ;
37518: LD_VAR 0 6
37522: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37523: LD_INT 0
37525: PPUSH
// if not chassis or not engine then
37526: LD_VAR 0 1
37530: NOT
37531: PUSH
37532: LD_VAR 0 2
37536: NOT
37537: OR
37538: IFFALSE 37542
// exit ;
37540: GO 37738
// case engine of engine_solar :
37542: LD_VAR 0 2
37546: PUSH
37547: LD_INT 2
37549: DOUBLE
37550: EQUAL
37551: IFTRUE 37555
37553: GO 37593
37555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37556: LD_ADDR_VAR 0 3
37560: PUSH
37561: LD_INT 11
37563: PUSH
37564: LD_INT 12
37566: PUSH
37567: LD_INT 13
37569: PUSH
37570: LD_INT 14
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: LD_INT 2
37578: PUSH
37579: LD_INT 3
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: ST_TO_ADDR
37591: GO 37722
37593: LD_INT 1
37595: DOUBLE
37596: EQUAL
37597: IFTRUE 37601
37599: GO 37663
37601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37602: LD_ADDR_VAR 0 3
37606: PUSH
37607: LD_INT 11
37609: PUSH
37610: LD_INT 12
37612: PUSH
37613: LD_INT 13
37615: PUSH
37616: LD_INT 14
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: LD_INT 3
37627: PUSH
37628: LD_INT 4
37630: PUSH
37631: LD_INT 5
37633: PUSH
37634: LD_INT 21
37636: PUSH
37637: LD_INT 23
37639: PUSH
37640: LD_INT 22
37642: PUSH
37643: LD_INT 24
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
37661: GO 37722
37663: LD_INT 3
37665: DOUBLE
37666: EQUAL
37667: IFTRUE 37671
37669: GO 37721
37671: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37672: LD_ADDR_VAR 0 3
37676: PUSH
37677: LD_INT 13
37679: PUSH
37680: LD_INT 14
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: LD_INT 3
37688: PUSH
37689: LD_INT 4
37691: PUSH
37692: LD_INT 5
37694: PUSH
37695: LD_INT 21
37697: PUSH
37698: LD_INT 22
37700: PUSH
37701: LD_INT 23
37703: PUSH
37704: LD_INT 24
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: ST_TO_ADDR
37719: GO 37722
37721: POP
// result := ( chassis in result ) ;
37722: LD_ADDR_VAR 0 3
37726: PUSH
37727: LD_VAR 0 1
37731: PUSH
37732: LD_VAR 0 3
37736: IN
37737: ST_TO_ADDR
// end ;
37738: LD_VAR 0 3
37742: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37743: LD_INT 0
37745: PPUSH
// if not chassis or not weapon then
37746: LD_VAR 0 1
37750: NOT
37751: PUSH
37752: LD_VAR 0 2
37756: NOT
37757: OR
37758: IFFALSE 37762
// exit ;
37760: GO 38822
// case weapon of us_machine_gun :
37762: LD_VAR 0 2
37766: PUSH
37767: LD_INT 2
37769: DOUBLE
37770: EQUAL
37771: IFTRUE 37775
37773: GO 37805
37775: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37776: LD_ADDR_VAR 0 3
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: LD_INT 2
37786: PUSH
37787: LD_INT 3
37789: PUSH
37790: LD_INT 4
37792: PUSH
37793: LD_INT 5
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: ST_TO_ADDR
37803: GO 38806
37805: LD_INT 3
37807: DOUBLE
37808: EQUAL
37809: IFTRUE 37813
37811: GO 37843
37813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37814: LD_ADDR_VAR 0 3
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: LD_INT 3
37827: PUSH
37828: LD_INT 4
37830: PUSH
37831: LD_INT 5
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: ST_TO_ADDR
37841: GO 38806
37843: LD_INT 11
37845: DOUBLE
37846: EQUAL
37847: IFTRUE 37851
37849: GO 37881
37851: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37852: LD_ADDR_VAR 0 3
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: LD_INT 4
37868: PUSH
37869: LD_INT 5
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: ST_TO_ADDR
37879: GO 38806
37881: LD_INT 4
37883: DOUBLE
37884: EQUAL
37885: IFTRUE 37889
37887: GO 37915
37889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37890: LD_ADDR_VAR 0 3
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: LD_INT 4
37903: PUSH
37904: LD_INT 5
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
37913: GO 38806
37915: LD_INT 5
37917: DOUBLE
37918: EQUAL
37919: IFTRUE 37923
37921: GO 37949
37923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: LD_INT 3
37934: PUSH
37935: LD_INT 4
37937: PUSH
37938: LD_INT 5
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
37947: GO 38806
37949: LD_INT 9
37951: DOUBLE
37952: EQUAL
37953: IFTRUE 37957
37955: GO 37983
37957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37958: LD_ADDR_VAR 0 3
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: LD_INT 3
37968: PUSH
37969: LD_INT 4
37971: PUSH
37972: LD_INT 5
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: ST_TO_ADDR
37981: GO 38806
37983: LD_INT 7
37985: DOUBLE
37986: EQUAL
37987: IFTRUE 37991
37989: GO 38017
37991: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37992: LD_ADDR_VAR 0 3
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 3
38002: PUSH
38003: LD_INT 4
38005: PUSH
38006: LD_INT 5
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
38015: GO 38806
38017: LD_INT 12
38019: DOUBLE
38020: EQUAL
38021: IFTRUE 38025
38023: GO 38051
38025: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38026: LD_ADDR_VAR 0 3
38030: PUSH
38031: LD_INT 2
38033: PUSH
38034: LD_INT 3
38036: PUSH
38037: LD_INT 4
38039: PUSH
38040: LD_INT 5
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: ST_TO_ADDR
38049: GO 38806
38051: LD_INT 13
38053: DOUBLE
38054: EQUAL
38055: IFTRUE 38059
38057: GO 38085
38059: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38060: LD_ADDR_VAR 0 3
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 3
38070: PUSH
38071: LD_INT 4
38073: PUSH
38074: LD_INT 5
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: ST_TO_ADDR
38083: GO 38806
38085: LD_INT 14
38087: DOUBLE
38088: EQUAL
38089: IFTRUE 38093
38091: GO 38111
38093: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38094: LD_ADDR_VAR 0 3
38098: PUSH
38099: LD_INT 4
38101: PUSH
38102: LD_INT 5
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: ST_TO_ADDR
38109: GO 38806
38111: LD_INT 6
38113: DOUBLE
38114: EQUAL
38115: IFTRUE 38119
38117: GO 38137
38119: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38120: LD_ADDR_VAR 0 3
38124: PUSH
38125: LD_INT 4
38127: PUSH
38128: LD_INT 5
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: ST_TO_ADDR
38135: GO 38806
38137: LD_INT 10
38139: DOUBLE
38140: EQUAL
38141: IFTRUE 38145
38143: GO 38163
38145: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38146: LD_ADDR_VAR 0 3
38150: PUSH
38151: LD_INT 4
38153: PUSH
38154: LD_INT 5
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: ST_TO_ADDR
38161: GO 38806
38163: LD_INT 22
38165: DOUBLE
38166: EQUAL
38167: IFTRUE 38171
38169: GO 38197
38171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38172: LD_ADDR_VAR 0 3
38176: PUSH
38177: LD_INT 11
38179: PUSH
38180: LD_INT 12
38182: PUSH
38183: LD_INT 13
38185: PUSH
38186: LD_INT 14
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: ST_TO_ADDR
38195: GO 38806
38197: LD_INT 23
38199: DOUBLE
38200: EQUAL
38201: IFTRUE 38205
38203: GO 38231
38205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38206: LD_ADDR_VAR 0 3
38210: PUSH
38211: LD_INT 11
38213: PUSH
38214: LD_INT 12
38216: PUSH
38217: LD_INT 13
38219: PUSH
38220: LD_INT 14
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: ST_TO_ADDR
38229: GO 38806
38231: LD_INT 24
38233: DOUBLE
38234: EQUAL
38235: IFTRUE 38239
38237: GO 38265
38239: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38240: LD_ADDR_VAR 0 3
38244: PUSH
38245: LD_INT 11
38247: PUSH
38248: LD_INT 12
38250: PUSH
38251: LD_INT 13
38253: PUSH
38254: LD_INT 14
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: ST_TO_ADDR
38263: GO 38806
38265: LD_INT 30
38267: DOUBLE
38268: EQUAL
38269: IFTRUE 38273
38271: GO 38299
38273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38274: LD_ADDR_VAR 0 3
38278: PUSH
38279: LD_INT 11
38281: PUSH
38282: LD_INT 12
38284: PUSH
38285: LD_INT 13
38287: PUSH
38288: LD_INT 14
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: ST_TO_ADDR
38297: GO 38806
38299: LD_INT 25
38301: DOUBLE
38302: EQUAL
38303: IFTRUE 38307
38305: GO 38325
38307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38308: LD_ADDR_VAR 0 3
38312: PUSH
38313: LD_INT 13
38315: PUSH
38316: LD_INT 14
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: ST_TO_ADDR
38323: GO 38806
38325: LD_INT 27
38327: DOUBLE
38328: EQUAL
38329: IFTRUE 38333
38331: GO 38351
38333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38334: LD_ADDR_VAR 0 3
38338: PUSH
38339: LD_INT 13
38341: PUSH
38342: LD_INT 14
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: ST_TO_ADDR
38349: GO 38806
38351: LD_INT 92
38353: DOUBLE
38354: EQUAL
38355: IFTRUE 38359
38357: GO 38385
38359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38360: LD_ADDR_VAR 0 3
38364: PUSH
38365: LD_INT 11
38367: PUSH
38368: LD_INT 12
38370: PUSH
38371: LD_INT 13
38373: PUSH
38374: LD_INT 14
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: ST_TO_ADDR
38383: GO 38806
38385: LD_INT 28
38387: DOUBLE
38388: EQUAL
38389: IFTRUE 38393
38391: GO 38411
38393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38394: LD_ADDR_VAR 0 3
38398: PUSH
38399: LD_INT 13
38401: PUSH
38402: LD_INT 14
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: ST_TO_ADDR
38409: GO 38806
38411: LD_INT 29
38413: DOUBLE
38414: EQUAL
38415: IFTRUE 38419
38417: GO 38437
38419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38420: LD_ADDR_VAR 0 3
38424: PUSH
38425: LD_INT 13
38427: PUSH
38428: LD_INT 14
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: ST_TO_ADDR
38435: GO 38806
38437: LD_INT 31
38439: DOUBLE
38440: EQUAL
38441: IFTRUE 38445
38443: GO 38463
38445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38446: LD_ADDR_VAR 0 3
38450: PUSH
38451: LD_INT 13
38453: PUSH
38454: LD_INT 14
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: ST_TO_ADDR
38461: GO 38806
38463: LD_INT 26
38465: DOUBLE
38466: EQUAL
38467: IFTRUE 38471
38469: GO 38489
38471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38472: LD_ADDR_VAR 0 3
38476: PUSH
38477: LD_INT 13
38479: PUSH
38480: LD_INT 14
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: ST_TO_ADDR
38487: GO 38806
38489: LD_INT 42
38491: DOUBLE
38492: EQUAL
38493: IFTRUE 38497
38495: GO 38523
38497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38498: LD_ADDR_VAR 0 3
38502: PUSH
38503: LD_INT 21
38505: PUSH
38506: LD_INT 22
38508: PUSH
38509: LD_INT 23
38511: PUSH
38512: LD_INT 24
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
38521: GO 38806
38523: LD_INT 43
38525: DOUBLE
38526: EQUAL
38527: IFTRUE 38531
38529: GO 38557
38531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38532: LD_ADDR_VAR 0 3
38536: PUSH
38537: LD_INT 21
38539: PUSH
38540: LD_INT 22
38542: PUSH
38543: LD_INT 23
38545: PUSH
38546: LD_INT 24
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: ST_TO_ADDR
38555: GO 38806
38557: LD_INT 44
38559: DOUBLE
38560: EQUAL
38561: IFTRUE 38565
38563: GO 38591
38565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38566: LD_ADDR_VAR 0 3
38570: PUSH
38571: LD_INT 21
38573: PUSH
38574: LD_INT 22
38576: PUSH
38577: LD_INT 23
38579: PUSH
38580: LD_INT 24
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
38589: GO 38806
38591: LD_INT 45
38593: DOUBLE
38594: EQUAL
38595: IFTRUE 38599
38597: GO 38625
38599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38600: LD_ADDR_VAR 0 3
38604: PUSH
38605: LD_INT 21
38607: PUSH
38608: LD_INT 22
38610: PUSH
38611: LD_INT 23
38613: PUSH
38614: LD_INT 24
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
38623: GO 38806
38625: LD_INT 49
38627: DOUBLE
38628: EQUAL
38629: IFTRUE 38633
38631: GO 38659
38633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38634: LD_ADDR_VAR 0 3
38638: PUSH
38639: LD_INT 21
38641: PUSH
38642: LD_INT 22
38644: PUSH
38645: LD_INT 23
38647: PUSH
38648: LD_INT 24
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
38657: GO 38806
38659: LD_INT 51
38661: DOUBLE
38662: EQUAL
38663: IFTRUE 38667
38665: GO 38693
38667: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38668: LD_ADDR_VAR 0 3
38672: PUSH
38673: LD_INT 21
38675: PUSH
38676: LD_INT 22
38678: PUSH
38679: LD_INT 23
38681: PUSH
38682: LD_INT 24
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: ST_TO_ADDR
38691: GO 38806
38693: LD_INT 52
38695: DOUBLE
38696: EQUAL
38697: IFTRUE 38701
38699: GO 38727
38701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38702: LD_ADDR_VAR 0 3
38706: PUSH
38707: LD_INT 21
38709: PUSH
38710: LD_INT 22
38712: PUSH
38713: LD_INT 23
38715: PUSH
38716: LD_INT 24
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: ST_TO_ADDR
38725: GO 38806
38727: LD_INT 53
38729: DOUBLE
38730: EQUAL
38731: IFTRUE 38735
38733: GO 38753
38735: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38736: LD_ADDR_VAR 0 3
38740: PUSH
38741: LD_INT 23
38743: PUSH
38744: LD_INT 24
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: ST_TO_ADDR
38751: GO 38806
38753: LD_INT 46
38755: DOUBLE
38756: EQUAL
38757: IFTRUE 38761
38759: GO 38779
38761: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38762: LD_ADDR_VAR 0 3
38766: PUSH
38767: LD_INT 23
38769: PUSH
38770: LD_INT 24
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: ST_TO_ADDR
38777: GO 38806
38779: LD_INT 47
38781: DOUBLE
38782: EQUAL
38783: IFTRUE 38787
38785: GO 38805
38787: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38788: LD_ADDR_VAR 0 3
38792: PUSH
38793: LD_INT 23
38795: PUSH
38796: LD_INT 24
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: ST_TO_ADDR
38803: GO 38806
38805: POP
// result := ( chassis in result ) ;
38806: LD_ADDR_VAR 0 3
38810: PUSH
38811: LD_VAR 0 1
38815: PUSH
38816: LD_VAR 0 3
38820: IN
38821: ST_TO_ADDR
// end ;
38822: LD_VAR 0 3
38826: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38827: LD_INT 0
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
// result := array ;
38836: LD_ADDR_VAR 0 5
38840: PUSH
38841: LD_VAR 0 1
38845: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38846: LD_VAR 0 1
38850: NOT
38851: PUSH
38852: LD_VAR 0 2
38856: NOT
38857: OR
38858: PUSH
38859: LD_VAR 0 3
38863: NOT
38864: OR
38865: PUSH
38866: LD_VAR 0 2
38870: PUSH
38871: LD_VAR 0 1
38875: GREATER
38876: OR
38877: PUSH
38878: LD_VAR 0 3
38882: PUSH
38883: LD_VAR 0 1
38887: GREATER
38888: OR
38889: IFFALSE 38893
// exit ;
38891: GO 39189
// if direction then
38893: LD_VAR 0 4
38897: IFFALSE 38961
// begin d := 1 ;
38899: LD_ADDR_VAR 0 9
38903: PUSH
38904: LD_INT 1
38906: ST_TO_ADDR
// if i_from > i_to then
38907: LD_VAR 0 2
38911: PUSH
38912: LD_VAR 0 3
38916: GREATER
38917: IFFALSE 38943
// length := ( array - i_from ) + i_to else
38919: LD_ADDR_VAR 0 11
38923: PUSH
38924: LD_VAR 0 1
38928: PUSH
38929: LD_VAR 0 2
38933: MINUS
38934: PUSH
38935: LD_VAR 0 3
38939: PLUS
38940: ST_TO_ADDR
38941: GO 38959
// length := i_to - i_from ;
38943: LD_ADDR_VAR 0 11
38947: PUSH
38948: LD_VAR 0 3
38952: PUSH
38953: LD_VAR 0 2
38957: MINUS
38958: ST_TO_ADDR
// end else
38959: GO 39022
// begin d := - 1 ;
38961: LD_ADDR_VAR 0 9
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: ST_TO_ADDR
// if i_from > i_to then
38970: LD_VAR 0 2
38974: PUSH
38975: LD_VAR 0 3
38979: GREATER
38980: IFFALSE 39000
// length := i_from - i_to else
38982: LD_ADDR_VAR 0 11
38986: PUSH
38987: LD_VAR 0 2
38991: PUSH
38992: LD_VAR 0 3
38996: MINUS
38997: ST_TO_ADDR
38998: GO 39022
// length := ( array - i_to ) + i_from ;
39000: LD_ADDR_VAR 0 11
39004: PUSH
39005: LD_VAR 0 1
39009: PUSH
39010: LD_VAR 0 3
39014: MINUS
39015: PUSH
39016: LD_VAR 0 2
39020: PLUS
39021: ST_TO_ADDR
// end ; if not length then
39022: LD_VAR 0 11
39026: NOT
39027: IFFALSE 39031
// exit ;
39029: GO 39189
// tmp := array ;
39031: LD_ADDR_VAR 0 10
39035: PUSH
39036: LD_VAR 0 1
39040: ST_TO_ADDR
// for i = 1 to length do
39041: LD_ADDR_VAR 0 6
39045: PUSH
39046: DOUBLE
39047: LD_INT 1
39049: DEC
39050: ST_TO_ADDR
39051: LD_VAR 0 11
39055: PUSH
39056: FOR_TO
39057: IFFALSE 39177
// begin for j = 1 to array do
39059: LD_ADDR_VAR 0 7
39063: PUSH
39064: DOUBLE
39065: LD_INT 1
39067: DEC
39068: ST_TO_ADDR
39069: LD_VAR 0 1
39073: PUSH
39074: FOR_TO
39075: IFFALSE 39163
// begin k := j + d ;
39077: LD_ADDR_VAR 0 8
39081: PUSH
39082: LD_VAR 0 7
39086: PUSH
39087: LD_VAR 0 9
39091: PLUS
39092: ST_TO_ADDR
// if k > array then
39093: LD_VAR 0 8
39097: PUSH
39098: LD_VAR 0 1
39102: GREATER
39103: IFFALSE 39113
// k := 1 ;
39105: LD_ADDR_VAR 0 8
39109: PUSH
39110: LD_INT 1
39112: ST_TO_ADDR
// if not k then
39113: LD_VAR 0 8
39117: NOT
39118: IFFALSE 39130
// k := array ;
39120: LD_ADDR_VAR 0 8
39124: PUSH
39125: LD_VAR 0 1
39129: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39130: LD_ADDR_VAR 0 10
39134: PUSH
39135: LD_VAR 0 10
39139: PPUSH
39140: LD_VAR 0 8
39144: PPUSH
39145: LD_VAR 0 1
39149: PUSH
39150: LD_VAR 0 7
39154: ARRAY
39155: PPUSH
39156: CALL_OW 1
39160: ST_TO_ADDR
// end ;
39161: GO 39074
39163: POP
39164: POP
// array := tmp ;
39165: LD_ADDR_VAR 0 1
39169: PUSH
39170: LD_VAR 0 10
39174: ST_TO_ADDR
// end ;
39175: GO 39056
39177: POP
39178: POP
// result := array ;
39179: LD_ADDR_VAR 0 5
39183: PUSH
39184: LD_VAR 0 1
39188: ST_TO_ADDR
// end ;
39189: LD_VAR 0 5
39193: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39194: LD_INT 0
39196: PPUSH
39197: PPUSH
// result := 0 ;
39198: LD_ADDR_VAR 0 3
39202: PUSH
39203: LD_INT 0
39205: ST_TO_ADDR
// if not array or not value in array then
39206: LD_VAR 0 1
39210: NOT
39211: PUSH
39212: LD_VAR 0 2
39216: PUSH
39217: LD_VAR 0 1
39221: IN
39222: NOT
39223: OR
39224: IFFALSE 39228
// exit ;
39226: GO 39282
// for i = 1 to array do
39228: LD_ADDR_VAR 0 4
39232: PUSH
39233: DOUBLE
39234: LD_INT 1
39236: DEC
39237: ST_TO_ADDR
39238: LD_VAR 0 1
39242: PUSH
39243: FOR_TO
39244: IFFALSE 39280
// if value = array [ i ] then
39246: LD_VAR 0 2
39250: PUSH
39251: LD_VAR 0 1
39255: PUSH
39256: LD_VAR 0 4
39260: ARRAY
39261: EQUAL
39262: IFFALSE 39278
// begin result := i ;
39264: LD_ADDR_VAR 0 3
39268: PUSH
39269: LD_VAR 0 4
39273: ST_TO_ADDR
// exit ;
39274: POP
39275: POP
39276: GO 39282
// end ;
39278: GO 39243
39280: POP
39281: POP
// end ;
39282: LD_VAR 0 3
39286: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39287: LD_INT 0
39289: PPUSH
// vc_chassis := chassis ;
39290: LD_ADDR_OWVAR 37
39294: PUSH
39295: LD_VAR 0 1
39299: ST_TO_ADDR
// vc_engine := engine ;
39300: LD_ADDR_OWVAR 39
39304: PUSH
39305: LD_VAR 0 2
39309: ST_TO_ADDR
// vc_control := control ;
39310: LD_ADDR_OWVAR 38
39314: PUSH
39315: LD_VAR 0 3
39319: ST_TO_ADDR
// vc_weapon := weapon ;
39320: LD_ADDR_OWVAR 40
39324: PUSH
39325: LD_VAR 0 4
39329: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39330: LD_ADDR_OWVAR 41
39334: PUSH
39335: LD_VAR 0 5
39339: ST_TO_ADDR
// end ;
39340: LD_VAR 0 6
39344: RET
// export function WantPlant ( unit ) ; var task ; begin
39345: LD_INT 0
39347: PPUSH
39348: PPUSH
// result := false ;
39349: LD_ADDR_VAR 0 2
39353: PUSH
39354: LD_INT 0
39356: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39357: LD_ADDR_VAR 0 3
39361: PUSH
39362: LD_VAR 0 1
39366: PPUSH
39367: CALL_OW 437
39371: ST_TO_ADDR
// if task then
39372: LD_VAR 0 3
39376: IFFALSE 39404
// if task [ 1 ] [ 1 ] = p then
39378: LD_VAR 0 3
39382: PUSH
39383: LD_INT 1
39385: ARRAY
39386: PUSH
39387: LD_INT 1
39389: ARRAY
39390: PUSH
39391: LD_STRING p
39393: EQUAL
39394: IFFALSE 39404
// result := true ;
39396: LD_ADDR_VAR 0 2
39400: PUSH
39401: LD_INT 1
39403: ST_TO_ADDR
// end ;
39404: LD_VAR 0 2
39408: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39409: LD_INT 0
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
// if pos < 1 then
39415: LD_VAR 0 2
39419: PUSH
39420: LD_INT 1
39422: LESS
39423: IFFALSE 39427
// exit ;
39425: GO 39730
// if pos = 1 then
39427: LD_VAR 0 2
39431: PUSH
39432: LD_INT 1
39434: EQUAL
39435: IFFALSE 39468
// result := Replace ( arr , pos [ 1 ] , value ) else
39437: LD_ADDR_VAR 0 4
39441: PUSH
39442: LD_VAR 0 1
39446: PPUSH
39447: LD_VAR 0 2
39451: PUSH
39452: LD_INT 1
39454: ARRAY
39455: PPUSH
39456: LD_VAR 0 3
39460: PPUSH
39461: CALL_OW 1
39465: ST_TO_ADDR
39466: GO 39730
// begin tmp := arr ;
39468: LD_ADDR_VAR 0 6
39472: PUSH
39473: LD_VAR 0 1
39477: ST_TO_ADDR
// s_arr := [ tmp ] ;
39478: LD_ADDR_VAR 0 7
39482: PUSH
39483: LD_VAR 0 6
39487: PUSH
39488: EMPTY
39489: LIST
39490: ST_TO_ADDR
// for i = 1 to pos - 1 do
39491: LD_ADDR_VAR 0 5
39495: PUSH
39496: DOUBLE
39497: LD_INT 1
39499: DEC
39500: ST_TO_ADDR
39501: LD_VAR 0 2
39505: PUSH
39506: LD_INT 1
39508: MINUS
39509: PUSH
39510: FOR_TO
39511: IFFALSE 39556
// begin tmp := tmp [ pos [ i ] ] ;
39513: LD_ADDR_VAR 0 6
39517: PUSH
39518: LD_VAR 0 6
39522: PUSH
39523: LD_VAR 0 2
39527: PUSH
39528: LD_VAR 0 5
39532: ARRAY
39533: ARRAY
39534: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39535: LD_ADDR_VAR 0 7
39539: PUSH
39540: LD_VAR 0 7
39544: PUSH
39545: LD_VAR 0 6
39549: PUSH
39550: EMPTY
39551: LIST
39552: ADD
39553: ST_TO_ADDR
// end ;
39554: GO 39510
39556: POP
39557: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39558: LD_ADDR_VAR 0 6
39562: PUSH
39563: LD_VAR 0 6
39567: PPUSH
39568: LD_VAR 0 2
39572: PUSH
39573: LD_VAR 0 2
39577: ARRAY
39578: PPUSH
39579: LD_VAR 0 3
39583: PPUSH
39584: CALL_OW 1
39588: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39589: LD_ADDR_VAR 0 7
39593: PUSH
39594: LD_VAR 0 7
39598: PPUSH
39599: LD_VAR 0 7
39603: PPUSH
39604: LD_VAR 0 6
39608: PPUSH
39609: CALL_OW 1
39613: ST_TO_ADDR
// for i = s_arr downto 2 do
39614: LD_ADDR_VAR 0 5
39618: PUSH
39619: DOUBLE
39620: LD_VAR 0 7
39624: INC
39625: ST_TO_ADDR
39626: LD_INT 2
39628: PUSH
39629: FOR_DOWNTO
39630: IFFALSE 39714
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39632: LD_ADDR_VAR 0 6
39636: PUSH
39637: LD_VAR 0 7
39641: PUSH
39642: LD_VAR 0 5
39646: PUSH
39647: LD_INT 1
39649: MINUS
39650: ARRAY
39651: PPUSH
39652: LD_VAR 0 2
39656: PUSH
39657: LD_VAR 0 5
39661: PUSH
39662: LD_INT 1
39664: MINUS
39665: ARRAY
39666: PPUSH
39667: LD_VAR 0 7
39671: PUSH
39672: LD_VAR 0 5
39676: ARRAY
39677: PPUSH
39678: CALL_OW 1
39682: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39683: LD_ADDR_VAR 0 7
39687: PUSH
39688: LD_VAR 0 7
39692: PPUSH
39693: LD_VAR 0 5
39697: PUSH
39698: LD_INT 1
39700: MINUS
39701: PPUSH
39702: LD_VAR 0 6
39706: PPUSH
39707: CALL_OW 1
39711: ST_TO_ADDR
// end ;
39712: GO 39629
39714: POP
39715: POP
// result := s_arr [ 1 ] ;
39716: LD_ADDR_VAR 0 4
39720: PUSH
39721: LD_VAR 0 7
39725: PUSH
39726: LD_INT 1
39728: ARRAY
39729: ST_TO_ADDR
// end ; end ;
39730: LD_VAR 0 4
39734: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39735: LD_INT 0
39737: PPUSH
39738: PPUSH
// if not list then
39739: LD_VAR 0 1
39743: NOT
39744: IFFALSE 39748
// exit ;
39746: GO 39839
// i := list [ pos1 ] ;
39748: LD_ADDR_VAR 0 5
39752: PUSH
39753: LD_VAR 0 1
39757: PUSH
39758: LD_VAR 0 2
39762: ARRAY
39763: ST_TO_ADDR
// if not i then
39764: LD_VAR 0 5
39768: NOT
39769: IFFALSE 39773
// exit ;
39771: GO 39839
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39773: LD_ADDR_VAR 0 1
39777: PUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: LD_VAR 0 2
39787: PPUSH
39788: LD_VAR 0 1
39792: PUSH
39793: LD_VAR 0 3
39797: ARRAY
39798: PPUSH
39799: CALL_OW 1
39803: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39804: LD_ADDR_VAR 0 1
39808: PUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: LD_VAR 0 3
39818: PPUSH
39819: LD_VAR 0 5
39823: PPUSH
39824: CALL_OW 1
39828: ST_TO_ADDR
// result := list ;
39829: LD_ADDR_VAR 0 4
39833: PUSH
39834: LD_VAR 0 1
39838: ST_TO_ADDR
// end ;
39839: LD_VAR 0 4
39843: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39844: LD_INT 0
39846: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39847: LD_ADDR_VAR 0 5
39851: PUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: CALL_OW 250
39861: PPUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 251
39871: PPUSH
39872: LD_VAR 0 2
39876: PPUSH
39877: LD_VAR 0 3
39881: PPUSH
39882: LD_VAR 0 4
39886: PPUSH
39887: CALL 39897 0 5
39891: ST_TO_ADDR
// end ;
39892: LD_VAR 0 5
39896: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39897: LD_INT 0
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
// if not list then
39903: LD_VAR 0 3
39907: NOT
39908: IFFALSE 39912
// exit ;
39910: GO 40300
// result := [ ] ;
39912: LD_ADDR_VAR 0 6
39916: PUSH
39917: EMPTY
39918: ST_TO_ADDR
// for i in list do
39919: LD_ADDR_VAR 0 7
39923: PUSH
39924: LD_VAR 0 3
39928: PUSH
39929: FOR_IN
39930: IFFALSE 40132
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39932: LD_ADDR_VAR 0 9
39936: PUSH
39937: LD_VAR 0 7
39941: PPUSH
39942: LD_VAR 0 1
39946: PPUSH
39947: LD_VAR 0 2
39951: PPUSH
39952: CALL_OW 297
39956: ST_TO_ADDR
// if not result then
39957: LD_VAR 0 6
39961: NOT
39962: IFFALSE 39988
// result := [ [ i , tmp ] ] else
39964: LD_ADDR_VAR 0 6
39968: PUSH
39969: LD_VAR 0 7
39973: PUSH
39974: LD_VAR 0 9
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: EMPTY
39984: LIST
39985: ST_TO_ADDR
39986: GO 40130
// begin if result [ result ] [ 2 ] < tmp then
39988: LD_VAR 0 6
39992: PUSH
39993: LD_VAR 0 6
39997: ARRAY
39998: PUSH
39999: LD_INT 2
40001: ARRAY
40002: PUSH
40003: LD_VAR 0 9
40007: LESS
40008: IFFALSE 40050
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40010: LD_ADDR_VAR 0 6
40014: PUSH
40015: LD_VAR 0 6
40019: PPUSH
40020: LD_VAR 0 6
40024: PUSH
40025: LD_INT 1
40027: PLUS
40028: PPUSH
40029: LD_VAR 0 7
40033: PUSH
40034: LD_VAR 0 9
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PPUSH
40043: CALL_OW 2
40047: ST_TO_ADDR
40048: GO 40130
// for j = 1 to result do
40050: LD_ADDR_VAR 0 8
40054: PUSH
40055: DOUBLE
40056: LD_INT 1
40058: DEC
40059: ST_TO_ADDR
40060: LD_VAR 0 6
40064: PUSH
40065: FOR_TO
40066: IFFALSE 40128
// begin if tmp < result [ j ] [ 2 ] then
40068: LD_VAR 0 9
40072: PUSH
40073: LD_VAR 0 6
40077: PUSH
40078: LD_VAR 0 8
40082: ARRAY
40083: PUSH
40084: LD_INT 2
40086: ARRAY
40087: LESS
40088: IFFALSE 40126
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40090: LD_ADDR_VAR 0 6
40094: PUSH
40095: LD_VAR 0 6
40099: PPUSH
40100: LD_VAR 0 8
40104: PPUSH
40105: LD_VAR 0 7
40109: PUSH
40110: LD_VAR 0 9
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PPUSH
40119: CALL_OW 2
40123: ST_TO_ADDR
// break ;
40124: GO 40128
// end ; end ;
40126: GO 40065
40128: POP
40129: POP
// end ; end ;
40130: GO 39929
40132: POP
40133: POP
// if result and not asc then
40134: LD_VAR 0 6
40138: PUSH
40139: LD_VAR 0 4
40143: NOT
40144: AND
40145: IFFALSE 40220
// begin tmp := result ;
40147: LD_ADDR_VAR 0 9
40151: PUSH
40152: LD_VAR 0 6
40156: ST_TO_ADDR
// for i = tmp downto 1 do
40157: LD_ADDR_VAR 0 7
40161: PUSH
40162: DOUBLE
40163: LD_VAR 0 9
40167: INC
40168: ST_TO_ADDR
40169: LD_INT 1
40171: PUSH
40172: FOR_DOWNTO
40173: IFFALSE 40218
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40175: LD_ADDR_VAR 0 6
40179: PUSH
40180: LD_VAR 0 6
40184: PPUSH
40185: LD_VAR 0 9
40189: PUSH
40190: LD_VAR 0 7
40194: MINUS
40195: PUSH
40196: LD_INT 1
40198: PLUS
40199: PPUSH
40200: LD_VAR 0 9
40204: PUSH
40205: LD_VAR 0 7
40209: ARRAY
40210: PPUSH
40211: CALL_OW 1
40215: ST_TO_ADDR
40216: GO 40172
40218: POP
40219: POP
// end ; tmp := [ ] ;
40220: LD_ADDR_VAR 0 9
40224: PUSH
40225: EMPTY
40226: ST_TO_ADDR
// if mode then
40227: LD_VAR 0 5
40231: IFFALSE 40300
// begin for i = 1 to result do
40233: LD_ADDR_VAR 0 7
40237: PUSH
40238: DOUBLE
40239: LD_INT 1
40241: DEC
40242: ST_TO_ADDR
40243: LD_VAR 0 6
40247: PUSH
40248: FOR_TO
40249: IFFALSE 40288
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40251: LD_ADDR_VAR 0 9
40255: PUSH
40256: LD_VAR 0 9
40260: PPUSH
40261: LD_VAR 0 7
40265: PPUSH
40266: LD_VAR 0 6
40270: PUSH
40271: LD_VAR 0 7
40275: ARRAY
40276: PUSH
40277: LD_INT 1
40279: ARRAY
40280: PPUSH
40281: CALL_OW 1
40285: ST_TO_ADDR
40286: GO 40248
40288: POP
40289: POP
// result := tmp ;
40290: LD_ADDR_VAR 0 6
40294: PUSH
40295: LD_VAR 0 9
40299: ST_TO_ADDR
// end ; end ;
40300: LD_VAR 0 6
40304: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40305: LD_INT 0
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40313: LD_ADDR_VAR 0 5
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: ST_TO_ADDR
// if not x or not y then
40335: LD_VAR 0 2
40339: NOT
40340: PUSH
40341: LD_VAR 0 3
40345: NOT
40346: OR
40347: IFFALSE 40351
// exit ;
40349: GO 42001
// if not range then
40351: LD_VAR 0 4
40355: NOT
40356: IFFALSE 40366
// range := 10 ;
40358: LD_ADDR_VAR 0 4
40362: PUSH
40363: LD_INT 10
40365: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40366: LD_ADDR_VAR 0 8
40370: PUSH
40371: LD_INT 81
40373: PUSH
40374: LD_VAR 0 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 92
40385: PUSH
40386: LD_VAR 0 2
40390: PUSH
40391: LD_VAR 0 3
40395: PUSH
40396: LD_VAR 0 4
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 3
40409: PUSH
40410: LD_INT 21
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: PPUSH
40429: CALL_OW 69
40433: ST_TO_ADDR
// if not tmp then
40434: LD_VAR 0 8
40438: NOT
40439: IFFALSE 40443
// exit ;
40441: GO 42001
// for i in tmp do
40443: LD_ADDR_VAR 0 6
40447: PUSH
40448: LD_VAR 0 8
40452: PUSH
40453: FOR_IN
40454: IFFALSE 41976
// begin points := [ 0 , 0 , 0 ] ;
40456: LD_ADDR_VAR 0 9
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: ST_TO_ADDR
// bpoints := 1 ;
40475: LD_ADDR_VAR 0 10
40479: PUSH
40480: LD_INT 1
40482: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40483: LD_VAR 0 6
40487: PPUSH
40488: CALL_OW 247
40492: PUSH
40493: LD_INT 1
40495: DOUBLE
40496: EQUAL
40497: IFTRUE 40501
40499: GO 41079
40501: POP
// begin if GetClass ( i ) = 1 then
40502: LD_VAR 0 6
40506: PPUSH
40507: CALL_OW 257
40511: PUSH
40512: LD_INT 1
40514: EQUAL
40515: IFFALSE 40536
// points := [ 10 , 5 , 3 ] ;
40517: LD_ADDR_VAR 0 9
40521: PUSH
40522: LD_INT 10
40524: PUSH
40525: LD_INT 5
40527: PUSH
40528: LD_INT 3
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40536: LD_VAR 0 6
40540: PPUSH
40541: CALL_OW 257
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: LD_INT 3
40551: PUSH
40552: LD_INT 4
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: IN
40560: IFFALSE 40581
// points := [ 3 , 2 , 1 ] ;
40562: LD_ADDR_VAR 0 9
40566: PUSH
40567: LD_INT 3
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40581: LD_VAR 0 6
40585: PPUSH
40586: CALL_OW 257
40590: PUSH
40591: LD_INT 5
40593: EQUAL
40594: IFFALSE 40615
// points := [ 130 , 5 , 2 ] ;
40596: LD_ADDR_VAR 0 9
40600: PUSH
40601: LD_INT 130
40603: PUSH
40604: LD_INT 5
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40615: LD_VAR 0 6
40619: PPUSH
40620: CALL_OW 257
40624: PUSH
40625: LD_INT 8
40627: EQUAL
40628: IFFALSE 40649
// points := [ 35 , 35 , 30 ] ;
40630: LD_ADDR_VAR 0 9
40634: PUSH
40635: LD_INT 35
40637: PUSH
40638: LD_INT 35
40640: PUSH
40641: LD_INT 30
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40649: LD_VAR 0 6
40653: PPUSH
40654: CALL_OW 257
40658: PUSH
40659: LD_INT 9
40661: EQUAL
40662: IFFALSE 40683
// points := [ 20 , 55 , 40 ] ;
40664: LD_ADDR_VAR 0 9
40668: PUSH
40669: LD_INT 20
40671: PUSH
40672: LD_INT 55
40674: PUSH
40675: LD_INT 40
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40683: LD_VAR 0 6
40687: PPUSH
40688: CALL_OW 257
40692: PUSH
40693: LD_INT 12
40695: PUSH
40696: LD_INT 16
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: IN
40703: IFFALSE 40724
// points := [ 5 , 3 , 2 ] ;
40705: LD_ADDR_VAR 0 9
40709: PUSH
40710: LD_INT 5
40712: PUSH
40713: LD_INT 3
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40724: LD_VAR 0 6
40728: PPUSH
40729: CALL_OW 257
40733: PUSH
40734: LD_INT 17
40736: EQUAL
40737: IFFALSE 40758
// points := [ 100 , 50 , 75 ] ;
40739: LD_ADDR_VAR 0 9
40743: PUSH
40744: LD_INT 100
40746: PUSH
40747: LD_INT 50
40749: PUSH
40750: LD_INT 75
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40758: LD_VAR 0 6
40762: PPUSH
40763: CALL_OW 257
40767: PUSH
40768: LD_INT 15
40770: EQUAL
40771: IFFALSE 40792
// points := [ 10 , 5 , 3 ] ;
40773: LD_ADDR_VAR 0 9
40777: PUSH
40778: LD_INT 10
40780: PUSH
40781: LD_INT 5
40783: PUSH
40784: LD_INT 3
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40792: LD_VAR 0 6
40796: PPUSH
40797: CALL_OW 257
40801: PUSH
40802: LD_INT 14
40804: EQUAL
40805: IFFALSE 40826
// points := [ 10 , 0 , 0 ] ;
40807: LD_ADDR_VAR 0 9
40811: PUSH
40812: LD_INT 10
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40826: LD_VAR 0 6
40830: PPUSH
40831: CALL_OW 257
40835: PUSH
40836: LD_INT 11
40838: EQUAL
40839: IFFALSE 40860
// points := [ 30 , 10 , 5 ] ;
40841: LD_ADDR_VAR 0 9
40845: PUSH
40846: LD_INT 30
40848: PUSH
40849: LD_INT 10
40851: PUSH
40852: LD_INT 5
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40860: LD_VAR 0 1
40864: PPUSH
40865: LD_INT 5
40867: PPUSH
40868: CALL_OW 321
40872: PUSH
40873: LD_INT 2
40875: EQUAL
40876: IFFALSE 40893
// bpoints := bpoints * 1.8 ;
40878: LD_ADDR_VAR 0 10
40882: PUSH
40883: LD_VAR 0 10
40887: PUSH
40888: LD_REAL  1.80000000000000E+0000
40891: MUL
40892: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40893: LD_VAR 0 6
40897: PPUSH
40898: CALL_OW 257
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: LD_INT 4
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: IN
40921: PUSH
40922: LD_VAR 0 1
40926: PPUSH
40927: LD_INT 51
40929: PPUSH
40930: CALL_OW 321
40934: PUSH
40935: LD_INT 2
40937: EQUAL
40938: AND
40939: IFFALSE 40956
// bpoints := bpoints * 1.2 ;
40941: LD_ADDR_VAR 0 10
40945: PUSH
40946: LD_VAR 0 10
40950: PUSH
40951: LD_REAL  1.20000000000000E+0000
40954: MUL
40955: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40956: LD_VAR 0 6
40960: PPUSH
40961: CALL_OW 257
40965: PUSH
40966: LD_INT 5
40968: PUSH
40969: LD_INT 7
40971: PUSH
40972: LD_INT 9
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: LIST
40979: IN
40980: PUSH
40981: LD_VAR 0 1
40985: PPUSH
40986: LD_INT 52
40988: PPUSH
40989: CALL_OW 321
40993: PUSH
40994: LD_INT 2
40996: EQUAL
40997: AND
40998: IFFALSE 41015
// bpoints := bpoints * 1.5 ;
41000: LD_ADDR_VAR 0 10
41004: PUSH
41005: LD_VAR 0 10
41009: PUSH
41010: LD_REAL  1.50000000000000E+0000
41013: MUL
41014: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41015: LD_VAR 0 1
41019: PPUSH
41020: LD_INT 66
41022: PPUSH
41023: CALL_OW 321
41027: PUSH
41028: LD_INT 2
41030: EQUAL
41031: IFFALSE 41048
// bpoints := bpoints * 1.1 ;
41033: LD_ADDR_VAR 0 10
41037: PUSH
41038: LD_VAR 0 10
41042: PUSH
41043: LD_REAL  1.10000000000000E+0000
41046: MUL
41047: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41048: LD_ADDR_VAR 0 10
41052: PUSH
41053: LD_VAR 0 10
41057: PUSH
41058: LD_VAR 0 6
41062: PPUSH
41063: LD_INT 1
41065: PPUSH
41066: CALL_OW 259
41070: PUSH
41071: LD_REAL  1.15000000000000E+0000
41074: MUL
41075: MUL
41076: ST_TO_ADDR
// end ; unit_vehicle :
41077: GO 41905
41079: LD_INT 2
41081: DOUBLE
41082: EQUAL
41083: IFTRUE 41087
41085: GO 41893
41087: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41088: LD_VAR 0 6
41092: PPUSH
41093: CALL_OW 264
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: LD_INT 42
41103: PUSH
41104: LD_INT 24
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: LIST
41111: IN
41112: IFFALSE 41133
// points := [ 25 , 5 , 3 ] ;
41114: LD_ADDR_VAR 0 9
41118: PUSH
41119: LD_INT 25
41121: PUSH
41122: LD_INT 5
41124: PUSH
41125: LD_INT 3
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41133: LD_VAR 0 6
41137: PPUSH
41138: CALL_OW 264
41142: PUSH
41143: LD_INT 4
41145: PUSH
41146: LD_INT 43
41148: PUSH
41149: LD_INT 25
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: IN
41157: IFFALSE 41178
// points := [ 40 , 15 , 5 ] ;
41159: LD_ADDR_VAR 0 9
41163: PUSH
41164: LD_INT 40
41166: PUSH
41167: LD_INT 15
41169: PUSH
41170: LD_INT 5
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41178: LD_VAR 0 6
41182: PPUSH
41183: CALL_OW 264
41187: PUSH
41188: LD_INT 3
41190: PUSH
41191: LD_INT 23
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: IN
41198: IFFALSE 41219
// points := [ 7 , 25 , 8 ] ;
41200: LD_ADDR_VAR 0 9
41204: PUSH
41205: LD_INT 7
41207: PUSH
41208: LD_INT 25
41210: PUSH
41211: LD_INT 8
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41219: LD_VAR 0 6
41223: PPUSH
41224: CALL_OW 264
41228: PUSH
41229: LD_INT 5
41231: PUSH
41232: LD_INT 27
41234: PUSH
41235: LD_INT 44
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: IN
41243: IFFALSE 41264
// points := [ 14 , 50 , 16 ] ;
41245: LD_ADDR_VAR 0 9
41249: PUSH
41250: LD_INT 14
41252: PUSH
41253: LD_INT 50
41255: PUSH
41256: LD_INT 16
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: LIST
41263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41264: LD_VAR 0 6
41268: PPUSH
41269: CALL_OW 264
41273: PUSH
41274: LD_INT 6
41276: PUSH
41277: LD_INT 46
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: IN
41284: IFFALSE 41305
// points := [ 32 , 120 , 70 ] ;
41286: LD_ADDR_VAR 0 9
41290: PUSH
41291: LD_INT 32
41293: PUSH
41294: LD_INT 120
41296: PUSH
41297: LD_INT 70
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: LIST
41304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41305: LD_VAR 0 6
41309: PPUSH
41310: CALL_OW 264
41314: PUSH
41315: LD_INT 7
41317: PUSH
41318: LD_INT 28
41320: PUSH
41321: LD_INT 45
41323: PUSH
41324: LD_INT 92
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: IN
41333: IFFALSE 41354
// points := [ 35 , 20 , 45 ] ;
41335: LD_ADDR_VAR 0 9
41339: PUSH
41340: LD_INT 35
41342: PUSH
41343: LD_INT 20
41345: PUSH
41346: LD_INT 45
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41354: LD_VAR 0 6
41358: PPUSH
41359: CALL_OW 264
41363: PUSH
41364: LD_INT 47
41366: PUSH
41367: EMPTY
41368: LIST
41369: IN
41370: IFFALSE 41391
// points := [ 67 , 45 , 75 ] ;
41372: LD_ADDR_VAR 0 9
41376: PUSH
41377: LD_INT 67
41379: PUSH
41380: LD_INT 45
41382: PUSH
41383: LD_INT 75
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41391: LD_VAR 0 6
41395: PPUSH
41396: CALL_OW 264
41400: PUSH
41401: LD_INT 26
41403: PUSH
41404: EMPTY
41405: LIST
41406: IN
41407: IFFALSE 41428
// points := [ 120 , 30 , 80 ] ;
41409: LD_ADDR_VAR 0 9
41413: PUSH
41414: LD_INT 120
41416: PUSH
41417: LD_INT 30
41419: PUSH
41420: LD_INT 80
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41428: LD_VAR 0 6
41432: PPUSH
41433: CALL_OW 264
41437: PUSH
41438: LD_INT 22
41440: PUSH
41441: EMPTY
41442: LIST
41443: IN
41444: IFFALSE 41465
// points := [ 40 , 1 , 1 ] ;
41446: LD_ADDR_VAR 0 9
41450: PUSH
41451: LD_INT 40
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41465: LD_VAR 0 6
41469: PPUSH
41470: CALL_OW 264
41474: PUSH
41475: LD_INT 29
41477: PUSH
41478: EMPTY
41479: LIST
41480: IN
41481: IFFALSE 41502
// points := [ 70 , 200 , 400 ] ;
41483: LD_ADDR_VAR 0 9
41487: PUSH
41488: LD_INT 70
41490: PUSH
41491: LD_INT 200
41493: PUSH
41494: LD_INT 400
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41502: LD_VAR 0 6
41506: PPUSH
41507: CALL_OW 264
41511: PUSH
41512: LD_INT 14
41514: PUSH
41515: LD_INT 53
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: IN
41522: IFFALSE 41543
// points := [ 40 , 10 , 20 ] ;
41524: LD_ADDR_VAR 0 9
41528: PUSH
41529: LD_INT 40
41531: PUSH
41532: LD_INT 10
41534: PUSH
41535: LD_INT 20
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41543: LD_VAR 0 6
41547: PPUSH
41548: CALL_OW 264
41552: PUSH
41553: LD_INT 9
41555: PUSH
41556: EMPTY
41557: LIST
41558: IN
41559: IFFALSE 41580
// points := [ 5 , 70 , 20 ] ;
41561: LD_ADDR_VAR 0 9
41565: PUSH
41566: LD_INT 5
41568: PUSH
41569: LD_INT 70
41571: PUSH
41572: LD_INT 20
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: LIST
41579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41580: LD_VAR 0 6
41584: PPUSH
41585: CALL_OW 264
41589: PUSH
41590: LD_INT 10
41592: PUSH
41593: EMPTY
41594: LIST
41595: IN
41596: IFFALSE 41617
// points := [ 35 , 110 , 70 ] ;
41598: LD_ADDR_VAR 0 9
41602: PUSH
41603: LD_INT 35
41605: PUSH
41606: LD_INT 110
41608: PUSH
41609: LD_INT 70
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41617: LD_VAR 0 6
41621: PPUSH
41622: CALL_OW 265
41626: PUSH
41627: LD_INT 25
41629: EQUAL
41630: IFFALSE 41651
// points := [ 80 , 65 , 100 ] ;
41632: LD_ADDR_VAR 0 9
41636: PUSH
41637: LD_INT 80
41639: PUSH
41640: LD_INT 65
41642: PUSH
41643: LD_INT 100
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41651: LD_VAR 0 6
41655: PPUSH
41656: CALL_OW 263
41660: PUSH
41661: LD_INT 1
41663: EQUAL
41664: IFFALSE 41699
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41666: LD_ADDR_VAR 0 10
41670: PUSH
41671: LD_VAR 0 10
41675: PUSH
41676: LD_VAR 0 6
41680: PPUSH
41681: CALL_OW 311
41685: PPUSH
41686: LD_INT 3
41688: PPUSH
41689: CALL_OW 259
41693: PUSH
41694: LD_INT 4
41696: MUL
41697: MUL
41698: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41699: LD_VAR 0 6
41703: PPUSH
41704: CALL_OW 263
41708: PUSH
41709: LD_INT 2
41711: EQUAL
41712: IFFALSE 41763
// begin j := IsControledBy ( i ) ;
41714: LD_ADDR_VAR 0 7
41718: PUSH
41719: LD_VAR 0 6
41723: PPUSH
41724: CALL_OW 312
41728: ST_TO_ADDR
// if j then
41729: LD_VAR 0 7
41733: IFFALSE 41763
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41735: LD_ADDR_VAR 0 10
41739: PUSH
41740: LD_VAR 0 10
41744: PUSH
41745: LD_VAR 0 7
41749: PPUSH
41750: LD_INT 3
41752: PPUSH
41753: CALL_OW 259
41757: PUSH
41758: LD_INT 3
41760: MUL
41761: MUL
41762: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41763: LD_VAR 0 6
41767: PPUSH
41768: CALL_OW 264
41772: PUSH
41773: LD_INT 5
41775: PUSH
41776: LD_INT 6
41778: PUSH
41779: LD_INT 46
41781: PUSH
41782: LD_INT 44
41784: PUSH
41785: LD_INT 47
41787: PUSH
41788: LD_INT 45
41790: PUSH
41791: LD_INT 28
41793: PUSH
41794: LD_INT 7
41796: PUSH
41797: LD_INT 27
41799: PUSH
41800: LD_INT 29
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: IN
41815: PUSH
41816: LD_VAR 0 1
41820: PPUSH
41821: LD_INT 52
41823: PPUSH
41824: CALL_OW 321
41828: PUSH
41829: LD_INT 2
41831: EQUAL
41832: AND
41833: IFFALSE 41850
// bpoints := bpoints * 1.2 ;
41835: LD_ADDR_VAR 0 10
41839: PUSH
41840: LD_VAR 0 10
41844: PUSH
41845: LD_REAL  1.20000000000000E+0000
41848: MUL
41849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41850: LD_VAR 0 6
41854: PPUSH
41855: CALL_OW 264
41859: PUSH
41860: LD_INT 6
41862: PUSH
41863: LD_INT 46
41865: PUSH
41866: LD_INT 47
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: IN
41874: IFFALSE 41891
// bpoints := bpoints * 1.2 ;
41876: LD_ADDR_VAR 0 10
41880: PUSH
41881: LD_VAR 0 10
41885: PUSH
41886: LD_REAL  1.20000000000000E+0000
41889: MUL
41890: ST_TO_ADDR
// end ; unit_building :
41891: GO 41905
41893: LD_INT 3
41895: DOUBLE
41896: EQUAL
41897: IFTRUE 41901
41899: GO 41904
41901: POP
// ; end ;
41902: GO 41905
41904: POP
// for j = 1 to 3 do
41905: LD_ADDR_VAR 0 7
41909: PUSH
41910: DOUBLE
41911: LD_INT 1
41913: DEC
41914: ST_TO_ADDR
41915: LD_INT 3
41917: PUSH
41918: FOR_TO
41919: IFFALSE 41972
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41921: LD_ADDR_VAR 0 5
41925: PUSH
41926: LD_VAR 0 5
41930: PPUSH
41931: LD_VAR 0 7
41935: PPUSH
41936: LD_VAR 0 5
41940: PUSH
41941: LD_VAR 0 7
41945: ARRAY
41946: PUSH
41947: LD_VAR 0 9
41951: PUSH
41952: LD_VAR 0 7
41956: ARRAY
41957: PUSH
41958: LD_VAR 0 10
41962: MUL
41963: PLUS
41964: PPUSH
41965: CALL_OW 1
41969: ST_TO_ADDR
41970: GO 41918
41972: POP
41973: POP
// end ;
41974: GO 40453
41976: POP
41977: POP
// result := Replace ( result , 4 , tmp ) ;
41978: LD_ADDR_VAR 0 5
41982: PUSH
41983: LD_VAR 0 5
41987: PPUSH
41988: LD_INT 4
41990: PPUSH
41991: LD_VAR 0 8
41995: PPUSH
41996: CALL_OW 1
42000: ST_TO_ADDR
// end ;
42001: LD_VAR 0 5
42005: RET
// export function DangerAtRange ( unit , range ) ; begin
42006: LD_INT 0
42008: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42009: LD_ADDR_VAR 0 3
42013: PUSH
42014: LD_VAR 0 1
42018: PPUSH
42019: CALL_OW 255
42023: PPUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: CALL_OW 250
42033: PPUSH
42034: LD_VAR 0 1
42038: PPUSH
42039: CALL_OW 251
42043: PPUSH
42044: LD_VAR 0 2
42048: PPUSH
42049: CALL 40305 0 4
42053: ST_TO_ADDR
// end ;
42054: LD_VAR 0 3
42058: RET
// export function DangerInArea ( side , area ) ; begin
42059: LD_INT 0
42061: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_VAR 0 2
42071: PPUSH
42072: LD_INT 81
42074: PUSH
42075: LD_VAR 0 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PPUSH
42084: CALL_OW 70
42088: ST_TO_ADDR
// end ;
42089: LD_VAR 0 3
42093: RET
// export function IsExtension ( b ) ; begin
42094: LD_INT 0
42096: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42097: LD_ADDR_VAR 0 2
42101: PUSH
42102: LD_VAR 0 1
42106: PUSH
42107: LD_INT 23
42109: PUSH
42110: LD_INT 20
42112: PUSH
42113: LD_INT 22
42115: PUSH
42116: LD_INT 17
42118: PUSH
42119: LD_INT 24
42121: PUSH
42122: LD_INT 21
42124: PUSH
42125: LD_INT 19
42127: PUSH
42128: LD_INT 16
42130: PUSH
42131: LD_INT 25
42133: PUSH
42134: LD_INT 18
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: IN
42149: ST_TO_ADDR
// end ;
42150: LD_VAR 0 2
42154: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42155: LD_INT 0
42157: PPUSH
42158: PPUSH
42159: PPUSH
// result := [ ] ;
42160: LD_ADDR_VAR 0 4
42164: PUSH
42165: EMPTY
42166: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42167: LD_ADDR_VAR 0 5
42171: PUSH
42172: LD_VAR 0 2
42176: PPUSH
42177: LD_INT 21
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PPUSH
42187: CALL_OW 70
42191: ST_TO_ADDR
// if not tmp then
42192: LD_VAR 0 5
42196: NOT
42197: IFFALSE 42201
// exit ;
42199: GO 42265
// if checkLink then
42201: LD_VAR 0 3
42205: IFFALSE 42255
// begin for i in tmp do
42207: LD_ADDR_VAR 0 6
42211: PUSH
42212: LD_VAR 0 5
42216: PUSH
42217: FOR_IN
42218: IFFALSE 42253
// if GetBase ( i ) <> base then
42220: LD_VAR 0 6
42224: PPUSH
42225: CALL_OW 274
42229: PUSH
42230: LD_VAR 0 1
42234: NONEQUAL
42235: IFFALSE 42251
// ComLinkToBase ( base , i ) ;
42237: LD_VAR 0 1
42241: PPUSH
42242: LD_VAR 0 6
42246: PPUSH
42247: CALL_OW 169
42251: GO 42217
42253: POP
42254: POP
// end ; result := tmp ;
42255: LD_ADDR_VAR 0 4
42259: PUSH
42260: LD_VAR 0 5
42264: ST_TO_ADDR
// end ;
42265: LD_VAR 0 4
42269: RET
// export function ComComplete ( units , b ) ; var i ; begin
42270: LD_INT 0
42272: PPUSH
42273: PPUSH
// if not units then
42274: LD_VAR 0 1
42278: NOT
42279: IFFALSE 42283
// exit ;
42281: GO 42373
// for i in units do
42283: LD_ADDR_VAR 0 4
42287: PUSH
42288: LD_VAR 0 1
42292: PUSH
42293: FOR_IN
42294: IFFALSE 42371
// if BuildingStatus ( b ) = bs_build then
42296: LD_VAR 0 2
42300: PPUSH
42301: CALL_OW 461
42305: PUSH
42306: LD_INT 1
42308: EQUAL
42309: IFFALSE 42369
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42311: LD_VAR 0 4
42315: PPUSH
42316: LD_STRING h
42318: PUSH
42319: LD_VAR 0 2
42323: PPUSH
42324: CALL_OW 250
42328: PUSH
42329: LD_VAR 0 2
42333: PPUSH
42334: CALL_OW 251
42338: PUSH
42339: LD_VAR 0 2
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: PPUSH
42365: CALL_OW 446
42369: GO 42293
42371: POP
42372: POP
// end ;
42373: LD_VAR 0 3
42377: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42378: LD_INT 0
42380: PPUSH
42381: PPUSH
42382: PPUSH
42383: PPUSH
42384: PPUSH
42385: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42386: LD_VAR 0 1
42390: NOT
42391: PUSH
42392: LD_VAR 0 1
42396: PPUSH
42397: CALL_OW 263
42401: PUSH
42402: LD_INT 2
42404: NONEQUAL
42405: OR
42406: IFFALSE 42410
// exit ;
42408: GO 42726
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42410: LD_ADDR_VAR 0 6
42414: PUSH
42415: LD_INT 22
42417: PUSH
42418: LD_VAR 0 1
42422: PPUSH
42423: CALL_OW 255
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 30
42437: PUSH
42438: LD_INT 36
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 34
42447: PUSH
42448: LD_INT 31
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: LIST
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PPUSH
42464: CALL_OW 69
42468: ST_TO_ADDR
// if not tmp then
42469: LD_VAR 0 6
42473: NOT
42474: IFFALSE 42478
// exit ;
42476: GO 42726
// result := [ ] ;
42478: LD_ADDR_VAR 0 2
42482: PUSH
42483: EMPTY
42484: ST_TO_ADDR
// for i in tmp do
42485: LD_ADDR_VAR 0 3
42489: PUSH
42490: LD_VAR 0 6
42494: PUSH
42495: FOR_IN
42496: IFFALSE 42567
// begin t := UnitsInside ( i ) ;
42498: LD_ADDR_VAR 0 4
42502: PUSH
42503: LD_VAR 0 3
42507: PPUSH
42508: CALL_OW 313
42512: ST_TO_ADDR
// if t then
42513: LD_VAR 0 4
42517: IFFALSE 42565
// for j in t do
42519: LD_ADDR_VAR 0 7
42523: PUSH
42524: LD_VAR 0 4
42528: PUSH
42529: FOR_IN
42530: IFFALSE 42563
// result := Replace ( result , result + 1 , j ) ;
42532: LD_ADDR_VAR 0 2
42536: PUSH
42537: LD_VAR 0 2
42541: PPUSH
42542: LD_VAR 0 2
42546: PUSH
42547: LD_INT 1
42549: PLUS
42550: PPUSH
42551: LD_VAR 0 7
42555: PPUSH
42556: CALL_OW 1
42560: ST_TO_ADDR
42561: GO 42529
42563: POP
42564: POP
// end ;
42565: GO 42495
42567: POP
42568: POP
// if not result then
42569: LD_VAR 0 2
42573: NOT
42574: IFFALSE 42578
// exit ;
42576: GO 42726
// mech := result [ 1 ] ;
42578: LD_ADDR_VAR 0 5
42582: PUSH
42583: LD_VAR 0 2
42587: PUSH
42588: LD_INT 1
42590: ARRAY
42591: ST_TO_ADDR
// if result > 1 then
42592: LD_VAR 0 2
42596: PUSH
42597: LD_INT 1
42599: GREATER
42600: IFFALSE 42712
// begin for i = 2 to result do
42602: LD_ADDR_VAR 0 3
42606: PUSH
42607: DOUBLE
42608: LD_INT 2
42610: DEC
42611: ST_TO_ADDR
42612: LD_VAR 0 2
42616: PUSH
42617: FOR_TO
42618: IFFALSE 42710
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42620: LD_ADDR_VAR 0 4
42624: PUSH
42625: LD_VAR 0 2
42629: PUSH
42630: LD_VAR 0 3
42634: ARRAY
42635: PPUSH
42636: LD_INT 3
42638: PPUSH
42639: CALL_OW 259
42643: PUSH
42644: LD_VAR 0 2
42648: PUSH
42649: LD_VAR 0 3
42653: ARRAY
42654: PPUSH
42655: CALL_OW 432
42659: MINUS
42660: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42661: LD_VAR 0 4
42665: PUSH
42666: LD_VAR 0 5
42670: PPUSH
42671: LD_INT 3
42673: PPUSH
42674: CALL_OW 259
42678: PUSH
42679: LD_VAR 0 5
42683: PPUSH
42684: CALL_OW 432
42688: MINUS
42689: GREATEREQUAL
42690: IFFALSE 42708
// mech := result [ i ] ;
42692: LD_ADDR_VAR 0 5
42696: PUSH
42697: LD_VAR 0 2
42701: PUSH
42702: LD_VAR 0 3
42706: ARRAY
42707: ST_TO_ADDR
// end ;
42708: GO 42617
42710: POP
42711: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42712: LD_VAR 0 1
42716: PPUSH
42717: LD_VAR 0 5
42721: PPUSH
42722: CALL_OW 135
// end ;
42726: LD_VAR 0 2
42730: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42731: LD_INT 0
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
// result := [ ] ;
42746: LD_ADDR_VAR 0 7
42750: PUSH
42751: EMPTY
42752: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42753: LD_VAR 0 1
42757: PPUSH
42758: CALL_OW 266
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: IN
42773: NOT
42774: IFFALSE 42778
// exit ;
42776: GO 44412
// if name then
42778: LD_VAR 0 3
42782: IFFALSE 42798
// SetBName ( base_dep , name ) ;
42784: LD_VAR 0 1
42788: PPUSH
42789: LD_VAR 0 3
42793: PPUSH
42794: CALL_OW 500
// base := GetBase ( base_dep ) ;
42798: LD_ADDR_VAR 0 15
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 274
42812: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42813: LD_ADDR_VAR 0 16
42817: PUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 255
42827: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42828: LD_ADDR_VAR 0 17
42832: PUSH
42833: LD_VAR 0 1
42837: PPUSH
42838: CALL_OW 248
42842: ST_TO_ADDR
// if sources then
42843: LD_VAR 0 5
42847: IFFALSE 42894
// for i = 1 to 3 do
42849: LD_ADDR_VAR 0 8
42853: PUSH
42854: DOUBLE
42855: LD_INT 1
42857: DEC
42858: ST_TO_ADDR
42859: LD_INT 3
42861: PUSH
42862: FOR_TO
42863: IFFALSE 42892
// AddResourceType ( base , i , sources [ i ] ) ;
42865: LD_VAR 0 15
42869: PPUSH
42870: LD_VAR 0 8
42874: PPUSH
42875: LD_VAR 0 5
42879: PUSH
42880: LD_VAR 0 8
42884: ARRAY
42885: PPUSH
42886: CALL_OW 276
42890: GO 42862
42892: POP
42893: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42894: LD_ADDR_VAR 0 18
42898: PUSH
42899: LD_VAR 0 15
42903: PPUSH
42904: LD_VAR 0 2
42908: PPUSH
42909: LD_INT 1
42911: PPUSH
42912: CALL 42155 0 3
42916: ST_TO_ADDR
// InitHc ;
42917: CALL_OW 19
// InitUc ;
42921: CALL_OW 18
// uc_side := side ;
42925: LD_ADDR_OWVAR 20
42929: PUSH
42930: LD_VAR 0 16
42934: ST_TO_ADDR
// uc_nation := nation ;
42935: LD_ADDR_OWVAR 21
42939: PUSH
42940: LD_VAR 0 17
42944: ST_TO_ADDR
// if buildings then
42945: LD_VAR 0 18
42949: IFFALSE 44271
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42951: LD_ADDR_VAR 0 19
42955: PUSH
42956: LD_VAR 0 18
42960: PPUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 30
42966: PUSH
42967: LD_INT 29
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 30
42976: PUSH
42977: LD_INT 30
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: PPUSH
42989: CALL_OW 72
42993: ST_TO_ADDR
// if tmp then
42994: LD_VAR 0 19
42998: IFFALSE 43046
// for i in tmp do
43000: LD_ADDR_VAR 0 8
43004: PUSH
43005: LD_VAR 0 19
43009: PUSH
43010: FOR_IN
43011: IFFALSE 43044
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43013: LD_VAR 0 8
43017: PPUSH
43018: CALL_OW 250
43022: PPUSH
43023: LD_VAR 0 8
43027: PPUSH
43028: CALL_OW 251
43032: PPUSH
43033: LD_VAR 0 16
43037: PPUSH
43038: CALL_OW 441
43042: GO 43010
43044: POP
43045: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43046: LD_VAR 0 18
43050: PPUSH
43051: LD_INT 2
43053: PUSH
43054: LD_INT 30
43056: PUSH
43057: LD_INT 32
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 30
43066: PUSH
43067: LD_INT 33
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: LIST
43078: PPUSH
43079: CALL_OW 72
43083: IFFALSE 43171
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43085: LD_ADDR_VAR 0 8
43089: PUSH
43090: LD_VAR 0 18
43094: PPUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 30
43100: PUSH
43101: LD_INT 32
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 30
43110: PUSH
43111: LD_INT 33
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: PPUSH
43123: CALL_OW 72
43127: PUSH
43128: FOR_IN
43129: IFFALSE 43169
// begin if not GetBWeapon ( i ) then
43131: LD_VAR 0 8
43135: PPUSH
43136: CALL_OW 269
43140: NOT
43141: IFFALSE 43167
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43143: LD_VAR 0 8
43147: PPUSH
43148: LD_VAR 0 8
43152: PPUSH
43153: LD_VAR 0 2
43157: PPUSH
43158: CALL 44417 0 2
43162: PPUSH
43163: CALL_OW 431
// end ;
43167: GO 43128
43169: POP
43170: POP
// end ; for i = 1 to personel do
43171: LD_ADDR_VAR 0 8
43175: PUSH
43176: DOUBLE
43177: LD_INT 1
43179: DEC
43180: ST_TO_ADDR
43181: LD_VAR 0 6
43185: PUSH
43186: FOR_TO
43187: IFFALSE 44251
// begin if i > 4 then
43189: LD_VAR 0 8
43193: PUSH
43194: LD_INT 4
43196: GREATER
43197: IFFALSE 43201
// break ;
43199: GO 44251
// case i of 1 :
43201: LD_VAR 0 8
43205: PUSH
43206: LD_INT 1
43208: DOUBLE
43209: EQUAL
43210: IFTRUE 43214
43212: GO 43294
43214: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43215: LD_ADDR_VAR 0 12
43219: PUSH
43220: LD_VAR 0 18
43224: PPUSH
43225: LD_INT 22
43227: PUSH
43228: LD_VAR 0 16
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 58
43239: PUSH
43240: EMPTY
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: LD_INT 30
43248: PUSH
43249: LD_INT 32
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 30
43258: PUSH
43259: LD_INT 4
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 30
43268: PUSH
43269: LD_INT 5
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: PPUSH
43287: CALL_OW 72
43291: ST_TO_ADDR
43292: GO 43516
43294: LD_INT 2
43296: DOUBLE
43297: EQUAL
43298: IFTRUE 43302
43300: GO 43364
43302: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43303: LD_ADDR_VAR 0 12
43307: PUSH
43308: LD_VAR 0 18
43312: PPUSH
43313: LD_INT 22
43315: PUSH
43316: LD_VAR 0 16
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 30
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 30
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: LIST
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PPUSH
43357: CALL_OW 72
43361: ST_TO_ADDR
43362: GO 43516
43364: LD_INT 3
43366: DOUBLE
43367: EQUAL
43368: IFTRUE 43372
43370: GO 43434
43372: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43373: LD_ADDR_VAR 0 12
43377: PUSH
43378: LD_VAR 0 18
43382: PPUSH
43383: LD_INT 22
43385: PUSH
43386: LD_VAR 0 16
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: LD_INT 30
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 30
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PPUSH
43427: CALL_OW 72
43431: ST_TO_ADDR
43432: GO 43516
43434: LD_INT 4
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43442
43440: GO 43515
43442: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43443: LD_ADDR_VAR 0 12
43447: PUSH
43448: LD_VAR 0 18
43452: PPUSH
43453: LD_INT 22
43455: PUSH
43456: LD_VAR 0 16
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: LD_INT 30
43470: PUSH
43471: LD_INT 6
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 30
43480: PUSH
43481: LD_INT 7
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 30
43490: PUSH
43491: LD_INT 8
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PPUSH
43508: CALL_OW 72
43512: ST_TO_ADDR
43513: GO 43516
43515: POP
// if i = 1 then
43516: LD_VAR 0 8
43520: PUSH
43521: LD_INT 1
43523: EQUAL
43524: IFFALSE 43635
// begin tmp := [ ] ;
43526: LD_ADDR_VAR 0 19
43530: PUSH
43531: EMPTY
43532: ST_TO_ADDR
// for j in f do
43533: LD_ADDR_VAR 0 9
43537: PUSH
43538: LD_VAR 0 12
43542: PUSH
43543: FOR_IN
43544: IFFALSE 43617
// if GetBType ( j ) = b_bunker then
43546: LD_VAR 0 9
43550: PPUSH
43551: CALL_OW 266
43555: PUSH
43556: LD_INT 32
43558: EQUAL
43559: IFFALSE 43586
// tmp := Insert ( tmp , 1 , j ) else
43561: LD_ADDR_VAR 0 19
43565: PUSH
43566: LD_VAR 0 19
43570: PPUSH
43571: LD_INT 1
43573: PPUSH
43574: LD_VAR 0 9
43578: PPUSH
43579: CALL_OW 2
43583: ST_TO_ADDR
43584: GO 43615
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43586: LD_ADDR_VAR 0 19
43590: PUSH
43591: LD_VAR 0 19
43595: PPUSH
43596: LD_VAR 0 19
43600: PUSH
43601: LD_INT 1
43603: PLUS
43604: PPUSH
43605: LD_VAR 0 9
43609: PPUSH
43610: CALL_OW 2
43614: ST_TO_ADDR
43615: GO 43543
43617: POP
43618: POP
// if tmp then
43619: LD_VAR 0 19
43623: IFFALSE 43635
// f := tmp ;
43625: LD_ADDR_VAR 0 12
43629: PUSH
43630: LD_VAR 0 19
43634: ST_TO_ADDR
// end ; x := personel [ i ] ;
43635: LD_ADDR_VAR 0 13
43639: PUSH
43640: LD_VAR 0 6
43644: PUSH
43645: LD_VAR 0 8
43649: ARRAY
43650: ST_TO_ADDR
// if x = - 1 then
43651: LD_VAR 0 13
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: EQUAL
43660: IFFALSE 43869
// begin for j in f do
43662: LD_ADDR_VAR 0 9
43666: PUSH
43667: LD_VAR 0 12
43671: PUSH
43672: FOR_IN
43673: IFFALSE 43865
// repeat InitHc ;
43675: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43679: LD_VAR 0 9
43683: PPUSH
43684: CALL_OW 266
43688: PUSH
43689: LD_INT 5
43691: EQUAL
43692: IFFALSE 43762
// begin if UnitsInside ( j ) < 3 then
43694: LD_VAR 0 9
43698: PPUSH
43699: CALL_OW 313
43703: PUSH
43704: LD_INT 3
43706: LESS
43707: IFFALSE 43743
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43709: LD_INT 0
43711: PPUSH
43712: LD_INT 5
43714: PUSH
43715: LD_INT 8
43717: PUSH
43718: LD_INT 9
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: LIST
43725: PUSH
43726: LD_VAR 0 17
43730: ARRAY
43731: PPUSH
43732: LD_VAR 0 4
43736: PPUSH
43737: CALL_OW 380
43741: GO 43760
// PrepareHuman ( false , i , skill ) ;
43743: LD_INT 0
43745: PPUSH
43746: LD_VAR 0 8
43750: PPUSH
43751: LD_VAR 0 4
43755: PPUSH
43756: CALL_OW 380
// end else
43760: GO 43779
// PrepareHuman ( false , i , skill ) ;
43762: LD_INT 0
43764: PPUSH
43765: LD_VAR 0 8
43769: PPUSH
43770: LD_VAR 0 4
43774: PPUSH
43775: CALL_OW 380
// un := CreateHuman ;
43779: LD_ADDR_VAR 0 14
43783: PUSH
43784: CALL_OW 44
43788: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43789: LD_ADDR_VAR 0 7
43793: PUSH
43794: LD_VAR 0 7
43798: PPUSH
43799: LD_INT 1
43801: PPUSH
43802: LD_VAR 0 14
43806: PPUSH
43807: CALL_OW 2
43811: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43812: LD_VAR 0 14
43816: PPUSH
43817: LD_VAR 0 9
43821: PPUSH
43822: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43826: LD_VAR 0 9
43830: PPUSH
43831: CALL_OW 313
43835: PUSH
43836: LD_INT 6
43838: EQUAL
43839: PUSH
43840: LD_VAR 0 9
43844: PPUSH
43845: CALL_OW 266
43849: PUSH
43850: LD_INT 32
43852: PUSH
43853: LD_INT 31
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: IN
43860: OR
43861: IFFALSE 43675
43863: GO 43672
43865: POP
43866: POP
// end else
43867: GO 44249
// for j = 1 to x do
43869: LD_ADDR_VAR 0 9
43873: PUSH
43874: DOUBLE
43875: LD_INT 1
43877: DEC
43878: ST_TO_ADDR
43879: LD_VAR 0 13
43883: PUSH
43884: FOR_TO
43885: IFFALSE 44247
// begin InitHc ;
43887: CALL_OW 19
// if not f then
43891: LD_VAR 0 12
43895: NOT
43896: IFFALSE 43985
// begin PrepareHuman ( false , i , skill ) ;
43898: LD_INT 0
43900: PPUSH
43901: LD_VAR 0 8
43905: PPUSH
43906: LD_VAR 0 4
43910: PPUSH
43911: CALL_OW 380
// un := CreateHuman ;
43915: LD_ADDR_VAR 0 14
43919: PUSH
43920: CALL_OW 44
43924: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43925: LD_ADDR_VAR 0 7
43929: PUSH
43930: LD_VAR 0 7
43934: PPUSH
43935: LD_INT 1
43937: PPUSH
43938: LD_VAR 0 14
43942: PPUSH
43943: CALL_OW 2
43947: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43948: LD_VAR 0 14
43952: PPUSH
43953: LD_VAR 0 1
43957: PPUSH
43958: CALL_OW 250
43962: PPUSH
43963: LD_VAR 0 1
43967: PPUSH
43968: CALL_OW 251
43972: PPUSH
43973: LD_INT 10
43975: PPUSH
43976: LD_INT 0
43978: PPUSH
43979: CALL_OW 50
// continue ;
43983: GO 43884
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43985: LD_VAR 0 12
43989: PUSH
43990: LD_INT 1
43992: ARRAY
43993: PPUSH
43994: CALL_OW 313
43998: PUSH
43999: LD_VAR 0 12
44003: PUSH
44004: LD_INT 1
44006: ARRAY
44007: PPUSH
44008: CALL_OW 266
44012: PUSH
44013: LD_INT 32
44015: PUSH
44016: LD_INT 31
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: IN
44023: AND
44024: PUSH
44025: LD_VAR 0 12
44029: PUSH
44030: LD_INT 1
44032: ARRAY
44033: PPUSH
44034: CALL_OW 313
44038: PUSH
44039: LD_INT 6
44041: EQUAL
44042: OR
44043: IFFALSE 44063
// f := Delete ( f , 1 ) ;
44045: LD_ADDR_VAR 0 12
44049: PUSH
44050: LD_VAR 0 12
44054: PPUSH
44055: LD_INT 1
44057: PPUSH
44058: CALL_OW 3
44062: ST_TO_ADDR
// if not f then
44063: LD_VAR 0 12
44067: NOT
44068: IFFALSE 44086
// begin x := x + 2 ;
44070: LD_ADDR_VAR 0 13
44074: PUSH
44075: LD_VAR 0 13
44079: PUSH
44080: LD_INT 2
44082: PLUS
44083: ST_TO_ADDR
// continue ;
44084: GO 43884
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44086: LD_VAR 0 12
44090: PUSH
44091: LD_INT 1
44093: ARRAY
44094: PPUSH
44095: CALL_OW 266
44099: PUSH
44100: LD_INT 5
44102: EQUAL
44103: IFFALSE 44177
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44105: LD_VAR 0 12
44109: PUSH
44110: LD_INT 1
44112: ARRAY
44113: PPUSH
44114: CALL_OW 313
44118: PUSH
44119: LD_INT 3
44121: LESS
44122: IFFALSE 44158
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44124: LD_INT 0
44126: PPUSH
44127: LD_INT 5
44129: PUSH
44130: LD_INT 8
44132: PUSH
44133: LD_INT 9
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: PUSH
44141: LD_VAR 0 17
44145: ARRAY
44146: PPUSH
44147: LD_VAR 0 4
44151: PPUSH
44152: CALL_OW 380
44156: GO 44175
// PrepareHuman ( false , i , skill ) ;
44158: LD_INT 0
44160: PPUSH
44161: LD_VAR 0 8
44165: PPUSH
44166: LD_VAR 0 4
44170: PPUSH
44171: CALL_OW 380
// end else
44175: GO 44194
// PrepareHuman ( false , i , skill ) ;
44177: LD_INT 0
44179: PPUSH
44180: LD_VAR 0 8
44184: PPUSH
44185: LD_VAR 0 4
44189: PPUSH
44190: CALL_OW 380
// un := CreateHuman ;
44194: LD_ADDR_VAR 0 14
44198: PUSH
44199: CALL_OW 44
44203: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44204: LD_ADDR_VAR 0 7
44208: PUSH
44209: LD_VAR 0 7
44213: PPUSH
44214: LD_INT 1
44216: PPUSH
44217: LD_VAR 0 14
44221: PPUSH
44222: CALL_OW 2
44226: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44227: LD_VAR 0 14
44231: PPUSH
44232: LD_VAR 0 12
44236: PUSH
44237: LD_INT 1
44239: ARRAY
44240: PPUSH
44241: CALL_OW 52
// end ;
44245: GO 43884
44247: POP
44248: POP
// end ;
44249: GO 43186
44251: POP
44252: POP
// result := result ^ buildings ;
44253: LD_ADDR_VAR 0 7
44257: PUSH
44258: LD_VAR 0 7
44262: PUSH
44263: LD_VAR 0 18
44267: ADD
44268: ST_TO_ADDR
// end else
44269: GO 44412
// begin for i = 1 to personel do
44271: LD_ADDR_VAR 0 8
44275: PUSH
44276: DOUBLE
44277: LD_INT 1
44279: DEC
44280: ST_TO_ADDR
44281: LD_VAR 0 6
44285: PUSH
44286: FOR_TO
44287: IFFALSE 44410
// begin if i > 4 then
44289: LD_VAR 0 8
44293: PUSH
44294: LD_INT 4
44296: GREATER
44297: IFFALSE 44301
// break ;
44299: GO 44410
// x := personel [ i ] ;
44301: LD_ADDR_VAR 0 13
44305: PUSH
44306: LD_VAR 0 6
44310: PUSH
44311: LD_VAR 0 8
44315: ARRAY
44316: ST_TO_ADDR
// if x = - 1 then
44317: LD_VAR 0 13
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: EQUAL
44326: IFFALSE 44330
// continue ;
44328: GO 44286
// PrepareHuman ( false , i , skill ) ;
44330: LD_INT 0
44332: PPUSH
44333: LD_VAR 0 8
44337: PPUSH
44338: LD_VAR 0 4
44342: PPUSH
44343: CALL_OW 380
// un := CreateHuman ;
44347: LD_ADDR_VAR 0 14
44351: PUSH
44352: CALL_OW 44
44356: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44357: LD_VAR 0 14
44361: PPUSH
44362: LD_VAR 0 1
44366: PPUSH
44367: CALL_OW 250
44371: PPUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: CALL_OW 251
44381: PPUSH
44382: LD_INT 10
44384: PPUSH
44385: LD_INT 0
44387: PPUSH
44388: CALL_OW 50
// result := result ^ un ;
44392: LD_ADDR_VAR 0 7
44396: PUSH
44397: LD_VAR 0 7
44401: PUSH
44402: LD_VAR 0 14
44406: ADD
44407: ST_TO_ADDR
// end ;
44408: GO 44286
44410: POP
44411: POP
// end ; end ;
44412: LD_VAR 0 7
44416: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44417: LD_INT 0
44419: PPUSH
44420: PPUSH
44421: PPUSH
44422: PPUSH
44423: PPUSH
44424: PPUSH
44425: PPUSH
44426: PPUSH
44427: PPUSH
44428: PPUSH
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
// result := false ;
44435: LD_ADDR_VAR 0 3
44439: PUSH
44440: LD_INT 0
44442: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44443: LD_VAR 0 1
44447: NOT
44448: PUSH
44449: LD_VAR 0 1
44453: PPUSH
44454: CALL_OW 266
44458: PUSH
44459: LD_INT 32
44461: PUSH
44462: LD_INT 33
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: IN
44469: NOT
44470: OR
44471: IFFALSE 44475
// exit ;
44473: GO 45584
// nat := GetNation ( tower ) ;
44475: LD_ADDR_VAR 0 12
44479: PUSH
44480: LD_VAR 0 1
44484: PPUSH
44485: CALL_OW 248
44489: ST_TO_ADDR
// side := GetSide ( tower ) ;
44490: LD_ADDR_VAR 0 16
44494: PUSH
44495: LD_VAR 0 1
44499: PPUSH
44500: CALL_OW 255
44504: ST_TO_ADDR
// x := GetX ( tower ) ;
44505: LD_ADDR_VAR 0 10
44509: PUSH
44510: LD_VAR 0 1
44514: PPUSH
44515: CALL_OW 250
44519: ST_TO_ADDR
// y := GetY ( tower ) ;
44520: LD_ADDR_VAR 0 11
44524: PUSH
44525: LD_VAR 0 1
44529: PPUSH
44530: CALL_OW 251
44534: ST_TO_ADDR
// if not x or not y then
44535: LD_VAR 0 10
44539: NOT
44540: PUSH
44541: LD_VAR 0 11
44545: NOT
44546: OR
44547: IFFALSE 44551
// exit ;
44549: GO 45584
// weapon := 0 ;
44551: LD_ADDR_VAR 0 18
44555: PUSH
44556: LD_INT 0
44558: ST_TO_ADDR
// fac_list := [ ] ;
44559: LD_ADDR_VAR 0 17
44563: PUSH
44564: EMPTY
44565: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44566: LD_ADDR_VAR 0 6
44570: PUSH
44571: LD_VAR 0 1
44575: PPUSH
44576: CALL_OW 274
44580: PPUSH
44581: LD_VAR 0 2
44585: PPUSH
44586: LD_INT 0
44588: PPUSH
44589: CALL 42155 0 3
44593: PPUSH
44594: LD_INT 30
44596: PUSH
44597: LD_INT 3
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PPUSH
44604: CALL_OW 72
44608: ST_TO_ADDR
// if not factories then
44609: LD_VAR 0 6
44613: NOT
44614: IFFALSE 44618
// exit ;
44616: GO 45584
// for i in factories do
44618: LD_ADDR_VAR 0 8
44622: PUSH
44623: LD_VAR 0 6
44627: PUSH
44628: FOR_IN
44629: IFFALSE 44654
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44631: LD_ADDR_VAR 0 17
44635: PUSH
44636: LD_VAR 0 17
44640: PUSH
44641: LD_VAR 0 8
44645: PPUSH
44646: CALL_OW 478
44650: UNION
44651: ST_TO_ADDR
44652: GO 44628
44654: POP
44655: POP
// if not fac_list then
44656: LD_VAR 0 17
44660: NOT
44661: IFFALSE 44665
// exit ;
44663: GO 45584
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44665: LD_ADDR_VAR 0 5
44669: PUSH
44670: LD_INT 4
44672: PUSH
44673: LD_INT 5
44675: PUSH
44676: LD_INT 9
44678: PUSH
44679: LD_INT 10
44681: PUSH
44682: LD_INT 6
44684: PUSH
44685: LD_INT 7
44687: PUSH
44688: LD_INT 11
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 27
44702: PUSH
44703: LD_INT 28
44705: PUSH
44706: LD_INT 26
44708: PUSH
44709: LD_INT 30
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 43
44720: PUSH
44721: LD_INT 44
44723: PUSH
44724: LD_INT 46
44726: PUSH
44727: LD_INT 45
44729: PUSH
44730: LD_INT 47
44732: PUSH
44733: LD_INT 49
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: LIST
44748: PUSH
44749: LD_VAR 0 12
44753: ARRAY
44754: ST_TO_ADDR
// list := list isect fac_list ;
44755: LD_ADDR_VAR 0 5
44759: PUSH
44760: LD_VAR 0 5
44764: PUSH
44765: LD_VAR 0 17
44769: ISECT
44770: ST_TO_ADDR
// if not list then
44771: LD_VAR 0 5
44775: NOT
44776: IFFALSE 44780
// exit ;
44778: GO 45584
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44780: LD_VAR 0 12
44784: PUSH
44785: LD_INT 3
44787: EQUAL
44788: PUSH
44789: LD_INT 49
44791: PUSH
44792: LD_VAR 0 5
44796: IN
44797: AND
44798: PUSH
44799: LD_INT 31
44801: PPUSH
44802: LD_VAR 0 16
44806: PPUSH
44807: CALL_OW 321
44811: PUSH
44812: LD_INT 2
44814: EQUAL
44815: AND
44816: IFFALSE 44876
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44818: LD_INT 22
44820: PUSH
44821: LD_VAR 0 16
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 35
44832: PUSH
44833: LD_INT 49
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 91
44842: PUSH
44843: LD_VAR 0 1
44847: PUSH
44848: LD_INT 10
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: PPUSH
44861: CALL_OW 69
44865: NOT
44866: IFFALSE 44876
// weapon := ru_time_lapser ;
44868: LD_ADDR_VAR 0 18
44872: PUSH
44873: LD_INT 49
44875: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44876: LD_VAR 0 12
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: IN
44891: PUSH
44892: LD_INT 11
44894: PUSH
44895: LD_VAR 0 5
44899: IN
44900: PUSH
44901: LD_INT 30
44903: PUSH
44904: LD_VAR 0 5
44908: IN
44909: OR
44910: AND
44911: PUSH
44912: LD_INT 6
44914: PPUSH
44915: LD_VAR 0 16
44919: PPUSH
44920: CALL_OW 321
44924: PUSH
44925: LD_INT 2
44927: EQUAL
44928: AND
44929: IFFALSE 45094
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44931: LD_INT 22
44933: PUSH
44934: LD_VAR 0 16
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 35
44948: PUSH
44949: LD_INT 11
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 35
44958: PUSH
44959: LD_INT 30
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 91
44973: PUSH
44974: LD_VAR 0 1
44978: PUSH
44979: LD_INT 18
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: PPUSH
44992: CALL_OW 69
44996: NOT
44997: PUSH
44998: LD_INT 22
45000: PUSH
45001: LD_VAR 0 16
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 30
45015: PUSH
45016: LD_INT 32
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 30
45025: PUSH
45026: LD_INT 33
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 91
45040: PUSH
45041: LD_VAR 0 1
45045: PUSH
45046: LD_INT 12
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: PUSH
45059: EMPTY
45060: LIST
45061: PPUSH
45062: CALL_OW 69
45066: PUSH
45067: LD_INT 2
45069: GREATER
45070: AND
45071: IFFALSE 45094
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45073: LD_ADDR_VAR 0 18
45077: PUSH
45078: LD_INT 11
45080: PUSH
45081: LD_INT 30
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_VAR 0 12
45092: ARRAY
45093: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45094: LD_VAR 0 18
45098: NOT
45099: PUSH
45100: LD_INT 40
45102: PPUSH
45103: LD_VAR 0 16
45107: PPUSH
45108: CALL_OW 321
45112: PUSH
45113: LD_INT 2
45115: EQUAL
45116: AND
45117: PUSH
45118: LD_INT 7
45120: PUSH
45121: LD_VAR 0 5
45125: IN
45126: PUSH
45127: LD_INT 28
45129: PUSH
45130: LD_VAR 0 5
45134: IN
45135: OR
45136: PUSH
45137: LD_INT 45
45139: PUSH
45140: LD_VAR 0 5
45144: IN
45145: OR
45146: AND
45147: IFFALSE 45401
// begin hex := GetHexInfo ( x , y ) ;
45149: LD_ADDR_VAR 0 4
45153: PUSH
45154: LD_VAR 0 10
45158: PPUSH
45159: LD_VAR 0 11
45163: PPUSH
45164: CALL_OW 546
45168: ST_TO_ADDR
// if hex [ 1 ] then
45169: LD_VAR 0 4
45173: PUSH
45174: LD_INT 1
45176: ARRAY
45177: IFFALSE 45181
// exit ;
45179: GO 45584
// height := hex [ 2 ] ;
45181: LD_ADDR_VAR 0 15
45185: PUSH
45186: LD_VAR 0 4
45190: PUSH
45191: LD_INT 2
45193: ARRAY
45194: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45195: LD_ADDR_VAR 0 14
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: LD_INT 3
45208: PUSH
45209: LD_INT 5
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// for i in tmp do
45218: LD_ADDR_VAR 0 8
45222: PUSH
45223: LD_VAR 0 14
45227: PUSH
45228: FOR_IN
45229: IFFALSE 45399
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45231: LD_ADDR_VAR 0 9
45235: PUSH
45236: LD_VAR 0 10
45240: PPUSH
45241: LD_VAR 0 8
45245: PPUSH
45246: LD_INT 5
45248: PPUSH
45249: CALL_OW 272
45253: PUSH
45254: LD_VAR 0 11
45258: PPUSH
45259: LD_VAR 0 8
45263: PPUSH
45264: LD_INT 5
45266: PPUSH
45267: CALL_OW 273
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45276: LD_VAR 0 9
45280: PUSH
45281: LD_INT 1
45283: ARRAY
45284: PPUSH
45285: LD_VAR 0 9
45289: PUSH
45290: LD_INT 2
45292: ARRAY
45293: PPUSH
45294: CALL_OW 488
45298: IFFALSE 45397
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45300: LD_ADDR_VAR 0 4
45304: PUSH
45305: LD_VAR 0 9
45309: PUSH
45310: LD_INT 1
45312: ARRAY
45313: PPUSH
45314: LD_VAR 0 9
45318: PUSH
45319: LD_INT 2
45321: ARRAY
45322: PPUSH
45323: CALL_OW 546
45327: ST_TO_ADDR
// if hex [ 1 ] then
45328: LD_VAR 0 4
45332: PUSH
45333: LD_INT 1
45335: ARRAY
45336: IFFALSE 45340
// continue ;
45338: GO 45228
// h := hex [ 2 ] ;
45340: LD_ADDR_VAR 0 13
45344: PUSH
45345: LD_VAR 0 4
45349: PUSH
45350: LD_INT 2
45352: ARRAY
45353: ST_TO_ADDR
// if h + 7 < height then
45354: LD_VAR 0 13
45358: PUSH
45359: LD_INT 7
45361: PLUS
45362: PUSH
45363: LD_VAR 0 15
45367: LESS
45368: IFFALSE 45397
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45370: LD_ADDR_VAR 0 18
45374: PUSH
45375: LD_INT 7
45377: PUSH
45378: LD_INT 28
45380: PUSH
45381: LD_INT 45
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: PUSH
45389: LD_VAR 0 12
45393: ARRAY
45394: ST_TO_ADDR
// break ;
45395: GO 45399
// end ; end ; end ;
45397: GO 45228
45399: POP
45400: POP
// end ; if not weapon then
45401: LD_VAR 0 18
45405: NOT
45406: IFFALSE 45466
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45408: LD_ADDR_VAR 0 5
45412: PUSH
45413: LD_VAR 0 5
45417: PUSH
45418: LD_INT 11
45420: PUSH
45421: LD_INT 30
45423: PUSH
45424: LD_INT 49
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: DIFF
45432: ST_TO_ADDR
// if not list then
45433: LD_VAR 0 5
45437: NOT
45438: IFFALSE 45442
// exit ;
45440: GO 45584
// weapon := list [ rand ( 1 , list ) ] ;
45442: LD_ADDR_VAR 0 18
45446: PUSH
45447: LD_VAR 0 5
45451: PUSH
45452: LD_INT 1
45454: PPUSH
45455: LD_VAR 0 5
45459: PPUSH
45460: CALL_OW 12
45464: ARRAY
45465: ST_TO_ADDR
// end ; if weapon then
45466: LD_VAR 0 18
45470: IFFALSE 45584
// begin tmp := CostOfWeapon ( weapon ) ;
45472: LD_ADDR_VAR 0 14
45476: PUSH
45477: LD_VAR 0 18
45481: PPUSH
45482: CALL_OW 451
45486: ST_TO_ADDR
// j := GetBase ( tower ) ;
45487: LD_ADDR_VAR 0 9
45491: PUSH
45492: LD_VAR 0 1
45496: PPUSH
45497: CALL_OW 274
45501: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45502: LD_VAR 0 9
45506: PPUSH
45507: LD_INT 1
45509: PPUSH
45510: CALL_OW 275
45514: PUSH
45515: LD_VAR 0 14
45519: PUSH
45520: LD_INT 1
45522: ARRAY
45523: GREATEREQUAL
45524: PUSH
45525: LD_VAR 0 9
45529: PPUSH
45530: LD_INT 2
45532: PPUSH
45533: CALL_OW 275
45537: PUSH
45538: LD_VAR 0 14
45542: PUSH
45543: LD_INT 2
45545: ARRAY
45546: GREATEREQUAL
45547: AND
45548: PUSH
45549: LD_VAR 0 9
45553: PPUSH
45554: LD_INT 3
45556: PPUSH
45557: CALL_OW 275
45561: PUSH
45562: LD_VAR 0 14
45566: PUSH
45567: LD_INT 3
45569: ARRAY
45570: GREATEREQUAL
45571: AND
45572: IFFALSE 45584
// result := weapon ;
45574: LD_ADDR_VAR 0 3
45578: PUSH
45579: LD_VAR 0 18
45583: ST_TO_ADDR
// end ; end ;
45584: LD_VAR 0 3
45588: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45589: LD_INT 0
45591: PPUSH
45592: PPUSH
// result := true ;
45593: LD_ADDR_VAR 0 3
45597: PUSH
45598: LD_INT 1
45600: ST_TO_ADDR
// if array1 = array2 then
45601: LD_VAR 0 1
45605: PUSH
45606: LD_VAR 0 2
45610: EQUAL
45611: IFFALSE 45671
// begin for i = 1 to array1 do
45613: LD_ADDR_VAR 0 4
45617: PUSH
45618: DOUBLE
45619: LD_INT 1
45621: DEC
45622: ST_TO_ADDR
45623: LD_VAR 0 1
45627: PUSH
45628: FOR_TO
45629: IFFALSE 45667
// if array1 [ i ] <> array2 [ i ] then
45631: LD_VAR 0 1
45635: PUSH
45636: LD_VAR 0 4
45640: ARRAY
45641: PUSH
45642: LD_VAR 0 2
45646: PUSH
45647: LD_VAR 0 4
45651: ARRAY
45652: NONEQUAL
45653: IFFALSE 45665
// begin result := false ;
45655: LD_ADDR_VAR 0 3
45659: PUSH
45660: LD_INT 0
45662: ST_TO_ADDR
// break ;
45663: GO 45667
// end ;
45665: GO 45628
45667: POP
45668: POP
// end else
45669: GO 45679
// result := false ;
45671: LD_ADDR_VAR 0 3
45675: PUSH
45676: LD_INT 0
45678: ST_TO_ADDR
// end ;
45679: LD_VAR 0 3
45683: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45684: LD_INT 0
45686: PPUSH
45687: PPUSH
// if not array1 or not array2 then
45688: LD_VAR 0 1
45692: NOT
45693: PUSH
45694: LD_VAR 0 2
45698: NOT
45699: OR
45700: IFFALSE 45704
// exit ;
45702: GO 45768
// result := true ;
45704: LD_ADDR_VAR 0 3
45708: PUSH
45709: LD_INT 1
45711: ST_TO_ADDR
// for i = 1 to array1 do
45712: LD_ADDR_VAR 0 4
45716: PUSH
45717: DOUBLE
45718: LD_INT 1
45720: DEC
45721: ST_TO_ADDR
45722: LD_VAR 0 1
45726: PUSH
45727: FOR_TO
45728: IFFALSE 45766
// if array1 [ i ] <> array2 [ i ] then
45730: LD_VAR 0 1
45734: PUSH
45735: LD_VAR 0 4
45739: ARRAY
45740: PUSH
45741: LD_VAR 0 2
45745: PUSH
45746: LD_VAR 0 4
45750: ARRAY
45751: NONEQUAL
45752: IFFALSE 45764
// begin result := false ;
45754: LD_ADDR_VAR 0 3
45758: PUSH
45759: LD_INT 0
45761: ST_TO_ADDR
// break ;
45762: GO 45766
// end ;
45764: GO 45727
45766: POP
45767: POP
// end ;
45768: LD_VAR 0 3
45772: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45773: LD_INT 0
45775: PPUSH
45776: PPUSH
45777: PPUSH
// pom := GetBase ( fac ) ;
45778: LD_ADDR_VAR 0 5
45782: PUSH
45783: LD_VAR 0 1
45787: PPUSH
45788: CALL_OW 274
45792: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45793: LD_ADDR_VAR 0 4
45797: PUSH
45798: LD_VAR 0 2
45802: PUSH
45803: LD_INT 1
45805: ARRAY
45806: PPUSH
45807: LD_VAR 0 2
45811: PUSH
45812: LD_INT 2
45814: ARRAY
45815: PPUSH
45816: LD_VAR 0 2
45820: PUSH
45821: LD_INT 3
45823: ARRAY
45824: PPUSH
45825: LD_VAR 0 2
45829: PUSH
45830: LD_INT 4
45832: ARRAY
45833: PPUSH
45834: CALL_OW 449
45838: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45839: LD_ADDR_VAR 0 3
45843: PUSH
45844: LD_VAR 0 5
45848: PPUSH
45849: LD_INT 1
45851: PPUSH
45852: CALL_OW 275
45856: PUSH
45857: LD_VAR 0 4
45861: PUSH
45862: LD_INT 1
45864: ARRAY
45865: GREATEREQUAL
45866: PUSH
45867: LD_VAR 0 5
45871: PPUSH
45872: LD_INT 2
45874: PPUSH
45875: CALL_OW 275
45879: PUSH
45880: LD_VAR 0 4
45884: PUSH
45885: LD_INT 2
45887: ARRAY
45888: GREATEREQUAL
45889: AND
45890: PUSH
45891: LD_VAR 0 5
45895: PPUSH
45896: LD_INT 3
45898: PPUSH
45899: CALL_OW 275
45903: PUSH
45904: LD_VAR 0 4
45908: PUSH
45909: LD_INT 3
45911: ARRAY
45912: GREATEREQUAL
45913: AND
45914: ST_TO_ADDR
// end ;
45915: LD_VAR 0 3
45919: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45920: LD_INT 0
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
// pom := GetBase ( building ) ;
45926: LD_ADDR_VAR 0 3
45930: PUSH
45931: LD_VAR 0 1
45935: PPUSH
45936: CALL_OW 274
45940: ST_TO_ADDR
// if not pom then
45941: LD_VAR 0 3
45945: NOT
45946: IFFALSE 45950
// exit ;
45948: GO 46120
// btype := GetBType ( building ) ;
45950: LD_ADDR_VAR 0 5
45954: PUSH
45955: LD_VAR 0 1
45959: PPUSH
45960: CALL_OW 266
45964: ST_TO_ADDR
// if btype = b_armoury then
45965: LD_VAR 0 5
45969: PUSH
45970: LD_INT 4
45972: EQUAL
45973: IFFALSE 45983
// btype := b_barracks ;
45975: LD_ADDR_VAR 0 5
45979: PUSH
45980: LD_INT 5
45982: ST_TO_ADDR
// if btype = b_depot then
45983: LD_VAR 0 5
45987: PUSH
45988: LD_INT 0
45990: EQUAL
45991: IFFALSE 46001
// btype := b_warehouse ;
45993: LD_ADDR_VAR 0 5
45997: PUSH
45998: LD_INT 1
46000: ST_TO_ADDR
// if btype = b_workshop then
46001: LD_VAR 0 5
46005: PUSH
46006: LD_INT 2
46008: EQUAL
46009: IFFALSE 46019
// btype := b_factory ;
46011: LD_ADDR_VAR 0 5
46015: PUSH
46016: LD_INT 3
46018: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46019: LD_ADDR_VAR 0 4
46023: PUSH
46024: LD_VAR 0 5
46028: PPUSH
46029: LD_VAR 0 1
46033: PPUSH
46034: CALL_OW 248
46038: PPUSH
46039: CALL_OW 450
46043: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46044: LD_ADDR_VAR 0 2
46048: PUSH
46049: LD_VAR 0 3
46053: PPUSH
46054: LD_INT 1
46056: PPUSH
46057: CALL_OW 275
46061: PUSH
46062: LD_VAR 0 4
46066: PUSH
46067: LD_INT 1
46069: ARRAY
46070: GREATEREQUAL
46071: PUSH
46072: LD_VAR 0 3
46076: PPUSH
46077: LD_INT 2
46079: PPUSH
46080: CALL_OW 275
46084: PUSH
46085: LD_VAR 0 4
46089: PUSH
46090: LD_INT 2
46092: ARRAY
46093: GREATEREQUAL
46094: AND
46095: PUSH
46096: LD_VAR 0 3
46100: PPUSH
46101: LD_INT 3
46103: PPUSH
46104: CALL_OW 275
46108: PUSH
46109: LD_VAR 0 4
46113: PUSH
46114: LD_INT 3
46116: ARRAY
46117: GREATEREQUAL
46118: AND
46119: ST_TO_ADDR
// end ;
46120: LD_VAR 0 2
46124: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46125: LD_INT 0
46127: PPUSH
46128: PPUSH
46129: PPUSH
// pom := GetBase ( building ) ;
46130: LD_ADDR_VAR 0 4
46134: PUSH
46135: LD_VAR 0 1
46139: PPUSH
46140: CALL_OW 274
46144: ST_TO_ADDR
// if not pom then
46145: LD_VAR 0 4
46149: NOT
46150: IFFALSE 46154
// exit ;
46152: GO 46255
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46154: LD_ADDR_VAR 0 5
46158: PUSH
46159: LD_VAR 0 2
46163: PPUSH
46164: LD_VAR 0 1
46168: PPUSH
46169: CALL_OW 248
46173: PPUSH
46174: CALL_OW 450
46178: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46179: LD_ADDR_VAR 0 3
46183: PUSH
46184: LD_VAR 0 4
46188: PPUSH
46189: LD_INT 1
46191: PPUSH
46192: CALL_OW 275
46196: PUSH
46197: LD_VAR 0 5
46201: PUSH
46202: LD_INT 1
46204: ARRAY
46205: GREATEREQUAL
46206: PUSH
46207: LD_VAR 0 4
46211: PPUSH
46212: LD_INT 2
46214: PPUSH
46215: CALL_OW 275
46219: PUSH
46220: LD_VAR 0 5
46224: PUSH
46225: LD_INT 2
46227: ARRAY
46228: GREATEREQUAL
46229: AND
46230: PUSH
46231: LD_VAR 0 4
46235: PPUSH
46236: LD_INT 3
46238: PPUSH
46239: CALL_OW 275
46243: PUSH
46244: LD_VAR 0 5
46248: PUSH
46249: LD_INT 3
46251: ARRAY
46252: GREATEREQUAL
46253: AND
46254: ST_TO_ADDR
// end ;
46255: LD_VAR 0 3
46259: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46260: LD_INT 0
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
// result := false ;
46273: LD_ADDR_VAR 0 8
46277: PUSH
46278: LD_INT 0
46280: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46281: LD_VAR 0 5
46285: NOT
46286: PUSH
46287: LD_VAR 0 1
46291: NOT
46292: OR
46293: PUSH
46294: LD_VAR 0 2
46298: NOT
46299: OR
46300: PUSH
46301: LD_VAR 0 3
46305: NOT
46306: OR
46307: IFFALSE 46311
// exit ;
46309: GO 47125
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46311: LD_ADDR_VAR 0 14
46315: PUSH
46316: LD_VAR 0 1
46320: PPUSH
46321: LD_VAR 0 2
46325: PPUSH
46326: LD_VAR 0 3
46330: PPUSH
46331: LD_VAR 0 4
46335: PPUSH
46336: LD_VAR 0 5
46340: PUSH
46341: LD_INT 1
46343: ARRAY
46344: PPUSH
46345: CALL_OW 248
46349: PPUSH
46350: LD_INT 0
46352: PPUSH
46353: CALL 48358 0 6
46357: ST_TO_ADDR
// if not hexes then
46358: LD_VAR 0 14
46362: NOT
46363: IFFALSE 46367
// exit ;
46365: GO 47125
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46367: LD_ADDR_VAR 0 17
46371: PUSH
46372: LD_VAR 0 5
46376: PPUSH
46377: LD_INT 22
46379: PUSH
46380: LD_VAR 0 13
46384: PPUSH
46385: CALL_OW 255
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: LD_INT 30
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 30
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PPUSH
46426: CALL_OW 72
46430: ST_TO_ADDR
// for i = 1 to hexes do
46431: LD_ADDR_VAR 0 9
46435: PUSH
46436: DOUBLE
46437: LD_INT 1
46439: DEC
46440: ST_TO_ADDR
46441: LD_VAR 0 14
46445: PUSH
46446: FOR_TO
46447: IFFALSE 47123
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46449: LD_ADDR_VAR 0 13
46453: PUSH
46454: LD_VAR 0 14
46458: PUSH
46459: LD_VAR 0 9
46463: ARRAY
46464: PUSH
46465: LD_INT 1
46467: ARRAY
46468: PPUSH
46469: LD_VAR 0 14
46473: PUSH
46474: LD_VAR 0 9
46478: ARRAY
46479: PUSH
46480: LD_INT 2
46482: ARRAY
46483: PPUSH
46484: CALL_OW 428
46488: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46489: LD_VAR 0 14
46493: PUSH
46494: LD_VAR 0 9
46498: ARRAY
46499: PUSH
46500: LD_INT 1
46502: ARRAY
46503: PPUSH
46504: LD_VAR 0 14
46508: PUSH
46509: LD_VAR 0 9
46513: ARRAY
46514: PUSH
46515: LD_INT 2
46517: ARRAY
46518: PPUSH
46519: CALL_OW 351
46523: PUSH
46524: LD_VAR 0 14
46528: PUSH
46529: LD_VAR 0 9
46533: ARRAY
46534: PUSH
46535: LD_INT 1
46537: ARRAY
46538: PPUSH
46539: LD_VAR 0 14
46543: PUSH
46544: LD_VAR 0 9
46548: ARRAY
46549: PUSH
46550: LD_INT 2
46552: ARRAY
46553: PPUSH
46554: CALL_OW 488
46558: NOT
46559: OR
46560: PUSH
46561: LD_VAR 0 13
46565: PPUSH
46566: CALL_OW 247
46570: PUSH
46571: LD_INT 3
46573: EQUAL
46574: OR
46575: IFFALSE 46581
// exit ;
46577: POP
46578: POP
46579: GO 47125
// if not tmp then
46581: LD_VAR 0 13
46585: NOT
46586: IFFALSE 46590
// continue ;
46588: GO 46446
// result := true ;
46590: LD_ADDR_VAR 0 8
46594: PUSH
46595: LD_INT 1
46597: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46598: LD_VAR 0 6
46602: PUSH
46603: LD_VAR 0 13
46607: PPUSH
46608: CALL_OW 247
46612: PUSH
46613: LD_INT 2
46615: EQUAL
46616: AND
46617: PUSH
46618: LD_VAR 0 13
46622: PPUSH
46623: CALL_OW 263
46627: PUSH
46628: LD_INT 1
46630: EQUAL
46631: AND
46632: IFFALSE 46796
// begin if IsDrivenBy ( tmp ) then
46634: LD_VAR 0 13
46638: PPUSH
46639: CALL_OW 311
46643: IFFALSE 46647
// continue ;
46645: GO 46446
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46647: LD_VAR 0 6
46651: PPUSH
46652: LD_INT 3
46654: PUSH
46655: LD_INT 60
46657: PUSH
46658: EMPTY
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: LD_INT 55
46670: PUSH
46671: EMPTY
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PPUSH
46682: CALL_OW 72
46686: IFFALSE 46794
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46688: LD_ADDR_VAR 0 18
46692: PUSH
46693: LD_VAR 0 6
46697: PPUSH
46698: LD_INT 3
46700: PUSH
46701: LD_INT 60
46703: PUSH
46704: EMPTY
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: LD_INT 55
46716: PUSH
46717: EMPTY
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PPUSH
46728: CALL_OW 72
46732: PUSH
46733: LD_INT 1
46735: ARRAY
46736: ST_TO_ADDR
// if IsInUnit ( driver ) then
46737: LD_VAR 0 18
46741: PPUSH
46742: CALL_OW 310
46746: IFFALSE 46757
// ComExit ( driver ) ;
46748: LD_VAR 0 18
46752: PPUSH
46753: CALL 72119 0 1
// AddComEnterUnit ( driver , tmp ) ;
46757: LD_VAR 0 18
46761: PPUSH
46762: LD_VAR 0 13
46766: PPUSH
46767: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46771: LD_VAR 0 18
46775: PPUSH
46776: LD_VAR 0 7
46780: PPUSH
46781: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46785: LD_VAR 0 18
46789: PPUSH
46790: CALL_OW 181
// end ; continue ;
46794: GO 46446
// end ; if not cleaners or not tmp in cleaners then
46796: LD_VAR 0 6
46800: NOT
46801: PUSH
46802: LD_VAR 0 13
46806: PUSH
46807: LD_VAR 0 6
46811: IN
46812: NOT
46813: OR
46814: IFFALSE 47121
// begin if dep then
46816: LD_VAR 0 17
46820: IFFALSE 46956
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46822: LD_ADDR_VAR 0 16
46826: PUSH
46827: LD_VAR 0 17
46831: PUSH
46832: LD_INT 1
46834: ARRAY
46835: PPUSH
46836: CALL_OW 250
46840: PPUSH
46841: LD_VAR 0 17
46845: PUSH
46846: LD_INT 1
46848: ARRAY
46849: PPUSH
46850: CALL_OW 254
46854: PPUSH
46855: LD_INT 5
46857: PPUSH
46858: CALL_OW 272
46862: PUSH
46863: LD_VAR 0 17
46867: PUSH
46868: LD_INT 1
46870: ARRAY
46871: PPUSH
46872: CALL_OW 251
46876: PPUSH
46877: LD_VAR 0 17
46881: PUSH
46882: LD_INT 1
46884: ARRAY
46885: PPUSH
46886: CALL_OW 254
46890: PPUSH
46891: LD_INT 5
46893: PPUSH
46894: CALL_OW 273
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46903: LD_VAR 0 16
46907: PUSH
46908: LD_INT 1
46910: ARRAY
46911: PPUSH
46912: LD_VAR 0 16
46916: PUSH
46917: LD_INT 2
46919: ARRAY
46920: PPUSH
46921: CALL_OW 488
46925: IFFALSE 46956
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46927: LD_VAR 0 13
46931: PPUSH
46932: LD_VAR 0 16
46936: PUSH
46937: LD_INT 1
46939: ARRAY
46940: PPUSH
46941: LD_VAR 0 16
46945: PUSH
46946: LD_INT 2
46948: ARRAY
46949: PPUSH
46950: CALL_OW 111
// continue ;
46954: GO 46446
// end ; end ; r := GetDir ( tmp ) ;
46956: LD_ADDR_VAR 0 15
46960: PUSH
46961: LD_VAR 0 13
46965: PPUSH
46966: CALL_OW 254
46970: ST_TO_ADDR
// if r = 5 then
46971: LD_VAR 0 15
46975: PUSH
46976: LD_INT 5
46978: EQUAL
46979: IFFALSE 46989
// r := 0 ;
46981: LD_ADDR_VAR 0 15
46985: PUSH
46986: LD_INT 0
46988: ST_TO_ADDR
// for j = r to 5 do
46989: LD_ADDR_VAR 0 10
46993: PUSH
46994: DOUBLE
46995: LD_VAR 0 15
46999: DEC
47000: ST_TO_ADDR
47001: LD_INT 5
47003: PUSH
47004: FOR_TO
47005: IFFALSE 47119
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47007: LD_ADDR_VAR 0 11
47011: PUSH
47012: LD_VAR 0 13
47016: PPUSH
47017: CALL_OW 250
47021: PPUSH
47022: LD_VAR 0 10
47026: PPUSH
47027: LD_INT 2
47029: PPUSH
47030: CALL_OW 272
47034: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47035: LD_ADDR_VAR 0 12
47039: PUSH
47040: LD_VAR 0 13
47044: PPUSH
47045: CALL_OW 251
47049: PPUSH
47050: LD_VAR 0 10
47054: PPUSH
47055: LD_INT 2
47057: PPUSH
47058: CALL_OW 273
47062: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47063: LD_VAR 0 11
47067: PPUSH
47068: LD_VAR 0 12
47072: PPUSH
47073: CALL_OW 488
47077: PUSH
47078: LD_VAR 0 11
47082: PPUSH
47083: LD_VAR 0 12
47087: PPUSH
47088: CALL_OW 428
47092: NOT
47093: AND
47094: IFFALSE 47117
// begin ComMoveXY ( tmp , _x , _y ) ;
47096: LD_VAR 0 13
47100: PPUSH
47101: LD_VAR 0 11
47105: PPUSH
47106: LD_VAR 0 12
47110: PPUSH
47111: CALL_OW 111
// break ;
47115: GO 47119
// end ; end ;
47117: GO 47004
47119: POP
47120: POP
// end ; end ;
47121: GO 46446
47123: POP
47124: POP
// end ;
47125: LD_VAR 0 8
47129: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47130: LD_INT 0
47132: PPUSH
// result := true ;
47133: LD_ADDR_VAR 0 3
47137: PUSH
47138: LD_INT 1
47140: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47141: LD_VAR 0 2
47145: PUSH
47146: LD_INT 24
47148: DOUBLE
47149: EQUAL
47150: IFTRUE 47160
47152: LD_INT 33
47154: DOUBLE
47155: EQUAL
47156: IFTRUE 47160
47158: GO 47185
47160: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47161: LD_ADDR_VAR 0 3
47165: PUSH
47166: LD_INT 32
47168: PPUSH
47169: LD_VAR 0 1
47173: PPUSH
47174: CALL_OW 321
47178: PUSH
47179: LD_INT 2
47181: EQUAL
47182: ST_TO_ADDR
47183: GO 47501
47185: LD_INT 20
47187: DOUBLE
47188: EQUAL
47189: IFTRUE 47193
47191: GO 47218
47193: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47194: LD_ADDR_VAR 0 3
47198: PUSH
47199: LD_INT 6
47201: PPUSH
47202: LD_VAR 0 1
47206: PPUSH
47207: CALL_OW 321
47211: PUSH
47212: LD_INT 2
47214: EQUAL
47215: ST_TO_ADDR
47216: GO 47501
47218: LD_INT 22
47220: DOUBLE
47221: EQUAL
47222: IFTRUE 47232
47224: LD_INT 36
47226: DOUBLE
47227: EQUAL
47228: IFTRUE 47232
47230: GO 47257
47232: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47233: LD_ADDR_VAR 0 3
47237: PUSH
47238: LD_INT 15
47240: PPUSH
47241: LD_VAR 0 1
47245: PPUSH
47246: CALL_OW 321
47250: PUSH
47251: LD_INT 2
47253: EQUAL
47254: ST_TO_ADDR
47255: GO 47501
47257: LD_INT 30
47259: DOUBLE
47260: EQUAL
47261: IFTRUE 47265
47263: GO 47290
47265: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47266: LD_ADDR_VAR 0 3
47270: PUSH
47271: LD_INT 20
47273: PPUSH
47274: LD_VAR 0 1
47278: PPUSH
47279: CALL_OW 321
47283: PUSH
47284: LD_INT 2
47286: EQUAL
47287: ST_TO_ADDR
47288: GO 47501
47290: LD_INT 28
47292: DOUBLE
47293: EQUAL
47294: IFTRUE 47304
47296: LD_INT 21
47298: DOUBLE
47299: EQUAL
47300: IFTRUE 47304
47302: GO 47329
47304: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47305: LD_ADDR_VAR 0 3
47309: PUSH
47310: LD_INT 21
47312: PPUSH
47313: LD_VAR 0 1
47317: PPUSH
47318: CALL_OW 321
47322: PUSH
47323: LD_INT 2
47325: EQUAL
47326: ST_TO_ADDR
47327: GO 47501
47329: LD_INT 16
47331: DOUBLE
47332: EQUAL
47333: IFTRUE 47337
47335: GO 47362
47337: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47338: LD_ADDR_VAR 0 3
47342: PUSH
47343: LD_INT 84
47345: PPUSH
47346: LD_VAR 0 1
47350: PPUSH
47351: CALL_OW 321
47355: PUSH
47356: LD_INT 2
47358: EQUAL
47359: ST_TO_ADDR
47360: GO 47501
47362: LD_INT 19
47364: DOUBLE
47365: EQUAL
47366: IFTRUE 47376
47368: LD_INT 23
47370: DOUBLE
47371: EQUAL
47372: IFTRUE 47376
47374: GO 47401
47376: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47377: LD_ADDR_VAR 0 3
47381: PUSH
47382: LD_INT 83
47384: PPUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: CALL_OW 321
47394: PUSH
47395: LD_INT 2
47397: EQUAL
47398: ST_TO_ADDR
47399: GO 47501
47401: LD_INT 17
47403: DOUBLE
47404: EQUAL
47405: IFTRUE 47409
47407: GO 47434
47409: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47410: LD_ADDR_VAR 0 3
47414: PUSH
47415: LD_INT 39
47417: PPUSH
47418: LD_VAR 0 1
47422: PPUSH
47423: CALL_OW 321
47427: PUSH
47428: LD_INT 2
47430: EQUAL
47431: ST_TO_ADDR
47432: GO 47501
47434: LD_INT 18
47436: DOUBLE
47437: EQUAL
47438: IFTRUE 47442
47440: GO 47467
47442: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47443: LD_ADDR_VAR 0 3
47447: PUSH
47448: LD_INT 40
47450: PPUSH
47451: LD_VAR 0 1
47455: PPUSH
47456: CALL_OW 321
47460: PUSH
47461: LD_INT 2
47463: EQUAL
47464: ST_TO_ADDR
47465: GO 47501
47467: LD_INT 27
47469: DOUBLE
47470: EQUAL
47471: IFTRUE 47475
47473: GO 47500
47475: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47476: LD_ADDR_VAR 0 3
47480: PUSH
47481: LD_INT 35
47483: PPUSH
47484: LD_VAR 0 1
47488: PPUSH
47489: CALL_OW 321
47493: PUSH
47494: LD_INT 2
47496: EQUAL
47497: ST_TO_ADDR
47498: GO 47501
47500: POP
// end ;
47501: LD_VAR 0 3
47505: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47506: LD_INT 0
47508: PPUSH
47509: PPUSH
47510: PPUSH
47511: PPUSH
47512: PPUSH
47513: PPUSH
47514: PPUSH
47515: PPUSH
47516: PPUSH
47517: PPUSH
47518: PPUSH
// result := false ;
47519: LD_ADDR_VAR 0 6
47523: PUSH
47524: LD_INT 0
47526: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47527: LD_VAR 0 1
47531: NOT
47532: PUSH
47533: LD_VAR 0 1
47537: PPUSH
47538: CALL_OW 266
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: IN
47553: NOT
47554: OR
47555: PUSH
47556: LD_VAR 0 2
47560: NOT
47561: OR
47562: PUSH
47563: LD_VAR 0 5
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: LD_INT 4
47582: PUSH
47583: LD_INT 5
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: IN
47594: NOT
47595: OR
47596: PUSH
47597: LD_VAR 0 3
47601: PPUSH
47602: LD_VAR 0 4
47606: PPUSH
47607: CALL_OW 488
47611: NOT
47612: OR
47613: IFFALSE 47617
// exit ;
47615: GO 48353
// side := GetSide ( depot ) ;
47617: LD_ADDR_VAR 0 9
47621: PUSH
47622: LD_VAR 0 1
47626: PPUSH
47627: CALL_OW 255
47631: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47632: LD_VAR 0 9
47636: PPUSH
47637: LD_VAR 0 2
47641: PPUSH
47642: CALL 47130 0 2
47646: NOT
47647: IFFALSE 47651
// exit ;
47649: GO 48353
// pom := GetBase ( depot ) ;
47651: LD_ADDR_VAR 0 10
47655: PUSH
47656: LD_VAR 0 1
47660: PPUSH
47661: CALL_OW 274
47665: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47666: LD_ADDR_VAR 0 11
47670: PUSH
47671: LD_VAR 0 2
47675: PPUSH
47676: LD_VAR 0 1
47680: PPUSH
47681: CALL_OW 248
47685: PPUSH
47686: CALL_OW 450
47690: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47691: LD_VAR 0 10
47695: PPUSH
47696: LD_INT 1
47698: PPUSH
47699: CALL_OW 275
47703: PUSH
47704: LD_VAR 0 11
47708: PUSH
47709: LD_INT 1
47711: ARRAY
47712: GREATEREQUAL
47713: PUSH
47714: LD_VAR 0 10
47718: PPUSH
47719: LD_INT 2
47721: PPUSH
47722: CALL_OW 275
47726: PUSH
47727: LD_VAR 0 11
47731: PUSH
47732: LD_INT 2
47734: ARRAY
47735: GREATEREQUAL
47736: AND
47737: PUSH
47738: LD_VAR 0 10
47742: PPUSH
47743: LD_INT 3
47745: PPUSH
47746: CALL_OW 275
47750: PUSH
47751: LD_VAR 0 11
47755: PUSH
47756: LD_INT 3
47758: ARRAY
47759: GREATEREQUAL
47760: AND
47761: NOT
47762: IFFALSE 47766
// exit ;
47764: GO 48353
// if GetBType ( depot ) = b_depot then
47766: LD_VAR 0 1
47770: PPUSH
47771: CALL_OW 266
47775: PUSH
47776: LD_INT 0
47778: EQUAL
47779: IFFALSE 47791
// dist := 28 else
47781: LD_ADDR_VAR 0 14
47785: PUSH
47786: LD_INT 28
47788: ST_TO_ADDR
47789: GO 47799
// dist := 36 ;
47791: LD_ADDR_VAR 0 14
47795: PUSH
47796: LD_INT 36
47798: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47799: LD_VAR 0 1
47803: PPUSH
47804: LD_VAR 0 3
47808: PPUSH
47809: LD_VAR 0 4
47813: PPUSH
47814: CALL_OW 297
47818: PUSH
47819: LD_VAR 0 14
47823: GREATER
47824: IFFALSE 47828
// exit ;
47826: GO 48353
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47828: LD_ADDR_VAR 0 12
47832: PUSH
47833: LD_VAR 0 2
47837: PPUSH
47838: LD_VAR 0 3
47842: PPUSH
47843: LD_VAR 0 4
47847: PPUSH
47848: LD_VAR 0 5
47852: PPUSH
47853: LD_VAR 0 1
47857: PPUSH
47858: CALL_OW 248
47862: PPUSH
47863: LD_INT 0
47865: PPUSH
47866: CALL 48358 0 6
47870: ST_TO_ADDR
// if not hexes then
47871: LD_VAR 0 12
47875: NOT
47876: IFFALSE 47880
// exit ;
47878: GO 48353
// hex := GetHexInfo ( x , y ) ;
47880: LD_ADDR_VAR 0 15
47884: PUSH
47885: LD_VAR 0 3
47889: PPUSH
47890: LD_VAR 0 4
47894: PPUSH
47895: CALL_OW 546
47899: ST_TO_ADDR
// if hex [ 1 ] then
47900: LD_VAR 0 15
47904: PUSH
47905: LD_INT 1
47907: ARRAY
47908: IFFALSE 47912
// exit ;
47910: GO 48353
// height := hex [ 2 ] ;
47912: LD_ADDR_VAR 0 13
47916: PUSH
47917: LD_VAR 0 15
47921: PUSH
47922: LD_INT 2
47924: ARRAY
47925: ST_TO_ADDR
// for i = 1 to hexes do
47926: LD_ADDR_VAR 0 7
47930: PUSH
47931: DOUBLE
47932: LD_INT 1
47934: DEC
47935: ST_TO_ADDR
47936: LD_VAR 0 12
47940: PUSH
47941: FOR_TO
47942: IFFALSE 48272
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47944: LD_VAR 0 12
47948: PUSH
47949: LD_VAR 0 7
47953: ARRAY
47954: PUSH
47955: LD_INT 1
47957: ARRAY
47958: PPUSH
47959: LD_VAR 0 12
47963: PUSH
47964: LD_VAR 0 7
47968: ARRAY
47969: PUSH
47970: LD_INT 2
47972: ARRAY
47973: PPUSH
47974: CALL_OW 488
47978: NOT
47979: PUSH
47980: LD_VAR 0 12
47984: PUSH
47985: LD_VAR 0 7
47989: ARRAY
47990: PUSH
47991: LD_INT 1
47993: ARRAY
47994: PPUSH
47995: LD_VAR 0 12
47999: PUSH
48000: LD_VAR 0 7
48004: ARRAY
48005: PUSH
48006: LD_INT 2
48008: ARRAY
48009: PPUSH
48010: CALL_OW 428
48014: PUSH
48015: LD_INT 0
48017: GREATER
48018: OR
48019: PUSH
48020: LD_VAR 0 12
48024: PUSH
48025: LD_VAR 0 7
48029: ARRAY
48030: PUSH
48031: LD_INT 1
48033: ARRAY
48034: PPUSH
48035: LD_VAR 0 12
48039: PUSH
48040: LD_VAR 0 7
48044: ARRAY
48045: PUSH
48046: LD_INT 2
48048: ARRAY
48049: PPUSH
48050: CALL_OW 351
48054: OR
48055: IFFALSE 48061
// exit ;
48057: POP
48058: POP
48059: GO 48353
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48061: LD_ADDR_VAR 0 8
48065: PUSH
48066: LD_VAR 0 12
48070: PUSH
48071: LD_VAR 0 7
48075: ARRAY
48076: PUSH
48077: LD_INT 1
48079: ARRAY
48080: PPUSH
48081: LD_VAR 0 12
48085: PUSH
48086: LD_VAR 0 7
48090: ARRAY
48091: PUSH
48092: LD_INT 2
48094: ARRAY
48095: PPUSH
48096: CALL_OW 546
48100: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48101: LD_VAR 0 8
48105: PUSH
48106: LD_INT 1
48108: ARRAY
48109: PUSH
48110: LD_VAR 0 8
48114: PUSH
48115: LD_INT 2
48117: ARRAY
48118: PUSH
48119: LD_VAR 0 13
48123: PUSH
48124: LD_INT 2
48126: PLUS
48127: GREATER
48128: OR
48129: PUSH
48130: LD_VAR 0 8
48134: PUSH
48135: LD_INT 2
48137: ARRAY
48138: PUSH
48139: LD_VAR 0 13
48143: PUSH
48144: LD_INT 2
48146: MINUS
48147: LESS
48148: OR
48149: PUSH
48150: LD_VAR 0 8
48154: PUSH
48155: LD_INT 3
48157: ARRAY
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 8
48164: PUSH
48165: LD_INT 9
48167: PUSH
48168: LD_INT 10
48170: PUSH
48171: LD_INT 11
48173: PUSH
48174: LD_INT 12
48176: PUSH
48177: LD_INT 13
48179: PUSH
48180: LD_INT 16
48182: PUSH
48183: LD_INT 17
48185: PUSH
48186: LD_INT 18
48188: PUSH
48189: LD_INT 19
48191: PUSH
48192: LD_INT 20
48194: PUSH
48195: LD_INT 21
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: IN
48213: NOT
48214: OR
48215: PUSH
48216: LD_VAR 0 8
48220: PUSH
48221: LD_INT 5
48223: ARRAY
48224: NOT
48225: OR
48226: PUSH
48227: LD_VAR 0 8
48231: PUSH
48232: LD_INT 6
48234: ARRAY
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 7
48244: PUSH
48245: LD_INT 9
48247: PUSH
48248: LD_INT 10
48250: PUSH
48251: LD_INT 11
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: IN
48262: NOT
48263: OR
48264: IFFALSE 48270
// exit ;
48266: POP
48267: POP
48268: GO 48353
// end ;
48270: GO 47941
48272: POP
48273: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48274: LD_VAR 0 9
48278: PPUSH
48279: LD_VAR 0 3
48283: PPUSH
48284: LD_VAR 0 4
48288: PPUSH
48289: LD_INT 20
48291: PPUSH
48292: CALL 40305 0 4
48296: PUSH
48297: LD_INT 4
48299: ARRAY
48300: IFFALSE 48304
// exit ;
48302: GO 48353
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48304: LD_VAR 0 2
48308: PUSH
48309: LD_INT 29
48311: PUSH
48312: LD_INT 30
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: IN
48319: PUSH
48320: LD_VAR 0 3
48324: PPUSH
48325: LD_VAR 0 4
48329: PPUSH
48330: LD_VAR 0 9
48334: PPUSH
48335: CALL_OW 440
48339: NOT
48340: AND
48341: IFFALSE 48345
// exit ;
48343: GO 48353
// result := true ;
48345: LD_ADDR_VAR 0 6
48349: PUSH
48350: LD_INT 1
48352: ST_TO_ADDR
// end ;
48353: LD_VAR 0 6
48357: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48358: LD_INT 0
48360: PPUSH
48361: PPUSH
48362: PPUSH
48363: PPUSH
48364: PPUSH
48365: PPUSH
48366: PPUSH
48367: PPUSH
48368: PPUSH
48369: PPUSH
48370: PPUSH
48371: PPUSH
48372: PPUSH
48373: PPUSH
48374: PPUSH
48375: PPUSH
48376: PPUSH
48377: PPUSH
48378: PPUSH
48379: PPUSH
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
48387: PPUSH
48388: PPUSH
48389: PPUSH
48390: PPUSH
48391: PPUSH
48392: PPUSH
48393: PPUSH
48394: PPUSH
48395: PPUSH
48396: PPUSH
48397: PPUSH
48398: PPUSH
48399: PPUSH
48400: PPUSH
48401: PPUSH
48402: PPUSH
48403: PPUSH
48404: PPUSH
48405: PPUSH
48406: PPUSH
48407: PPUSH
48408: PPUSH
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
// result = [ ] ;
48418: LD_ADDR_VAR 0 7
48422: PUSH
48423: EMPTY
48424: ST_TO_ADDR
// temp_list = [ ] ;
48425: LD_ADDR_VAR 0 9
48429: PUSH
48430: EMPTY
48431: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48432: LD_VAR 0 4
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: LD_INT 4
48451: PUSH
48452: LD_INT 5
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: IN
48463: NOT
48464: PUSH
48465: LD_VAR 0 1
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: IN
48480: PUSH
48481: LD_VAR 0 5
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 3
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: IN
48500: NOT
48501: AND
48502: OR
48503: IFFALSE 48507
// exit ;
48505: GO 66898
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48507: LD_VAR 0 1
48511: PUSH
48512: LD_INT 6
48514: PUSH
48515: LD_INT 7
48517: PUSH
48518: LD_INT 8
48520: PUSH
48521: LD_INT 13
48523: PUSH
48524: LD_INT 12
48526: PUSH
48527: LD_INT 15
48529: PUSH
48530: LD_INT 11
48532: PUSH
48533: LD_INT 14
48535: PUSH
48536: LD_INT 10
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: IN
48550: IFFALSE 48560
// btype = b_lab ;
48552: LD_ADDR_VAR 0 1
48556: PUSH
48557: LD_INT 6
48559: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48560: LD_VAR 0 6
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: IN
48579: NOT
48580: PUSH
48581: LD_VAR 0 1
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: LD_INT 6
48600: PUSH
48601: LD_INT 36
48603: PUSH
48604: LD_INT 4
48606: PUSH
48607: LD_INT 5
48609: PUSH
48610: LD_INT 31
48612: PUSH
48613: LD_INT 32
48615: PUSH
48616: LD_INT 33
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: IN
48632: NOT
48633: PUSH
48634: LD_VAR 0 6
48638: PUSH
48639: LD_INT 1
48641: EQUAL
48642: AND
48643: OR
48644: PUSH
48645: LD_VAR 0 1
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 3
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: IN
48660: NOT
48661: PUSH
48662: LD_VAR 0 6
48666: PUSH
48667: LD_INT 2
48669: EQUAL
48670: AND
48671: OR
48672: IFFALSE 48682
// mode = 0 ;
48674: LD_ADDR_VAR 0 6
48678: PUSH
48679: LD_INT 0
48681: ST_TO_ADDR
// case mode of 0 :
48682: LD_VAR 0 6
48686: PUSH
48687: LD_INT 0
48689: DOUBLE
48690: EQUAL
48691: IFTRUE 48695
48693: GO 60148
48695: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48696: LD_ADDR_VAR 0 11
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48889: LD_ADDR_VAR 0 12
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 3
49046: NEG
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 3
49057: NEG
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49085: LD_ADDR_VAR 0 13
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 3
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: LD_INT 3
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49284: LD_ADDR_VAR 0 14
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 3
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49480: LD_ADDR_VAR 0 15
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 3
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49673: LD_ADDR_VAR 0 16
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: LD_INT 3
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49866: LD_ADDR_VAR 0 17
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50096: LD_ADDR_VAR 0 18
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 2
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50326: LD_ADDR_VAR 0 19
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50556: LD_ADDR_VAR 0 20
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50786: LD_ADDR_VAR 0 21
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 2
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51016: LD_ADDR_VAR 0 22
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51246: LD_ADDR_VAR 0 23
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51526: LD_ADDR_VAR 0 24
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51802: LD_ADDR_VAR 0 25
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 3
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52076: LD_ADDR_VAR 0 26
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 3
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52352: LD_ADDR_VAR 0 27
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52632: LD_ADDR_VAR 0 28
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 3
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52914: LD_ADDR_VAR 0 29
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53193: LD_ADDR_VAR 0 30
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53471: LD_ADDR_VAR 0 31
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53749: LD_ADDR_VAR 0 32
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 3
53992: NEG
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54027: LD_ADDR_VAR 0 33
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 3
54271: NEG
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54306: LD_ADDR_VAR 0 34
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 3
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54586: LD_ADDR_VAR 0 35
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54698: LD_ADDR_VAR 0 36
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54810: LD_ADDR_VAR 0 37
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54922: LD_ADDR_VAR 0 38
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55034: LD_ADDR_VAR 0 39
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55146: LD_ADDR_VAR 0 40
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55258: LD_ADDR_VAR 0 41
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 3
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55608: LD_ADDR_VAR 0 42
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 3
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 3
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 3
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55958: LD_ADDR_VAR 0 43
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56306: LD_ADDR_VAR 0 44
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 2
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56656: LD_ADDR_VAR 0 45
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57006: LD_ADDR_VAR 0 46
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: LD_INT 3
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 3
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 3
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: NEG
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57354: LD_ADDR_VAR 0 47
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57505: LD_ADDR_VAR 0 48
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57652: LD_ADDR_VAR 0 49
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57796: LD_ADDR_VAR 0 50
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57940: LD_ADDR_VAR 0 51
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58087: LD_ADDR_VAR 0 52
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58238: LD_ADDR_VAR 0 53
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: NEG
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58468: LD_ADDR_VAR 0 54
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58698: LD_ADDR_VAR 0 55
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58928: LD_ADDR_VAR 0 56
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59158: LD_ADDR_VAR 0 57
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59388: LD_ADDR_VAR 0 58
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59618: LD_ADDR_VAR 0 59
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59706: LD_ADDR_VAR 0 60
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59794: LD_ADDR_VAR 0 61
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59882: LD_ADDR_VAR 0 62
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59970: LD_ADDR_VAR 0 63
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60058: LD_ADDR_VAR 0 64
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// end ; 1 :
60146: GO 66043
60148: LD_INT 1
60150: DOUBLE
60151: EQUAL
60152: IFTRUE 60156
60154: GO 62779
60156: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60157: LD_ADDR_VAR 0 11
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 2
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60201: LD_ADDR_VAR 0 12
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: LIST
60241: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60242: LD_ADDR_VAR 0 13
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: LIST
60281: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60282: LD_ADDR_VAR 0 14
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60323: LD_ADDR_VAR 0 15
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 3
60341: NEG
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60367: LD_ADDR_VAR 0 16
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60413: LD_ADDR_VAR 0 17
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 3
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 3
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60457: LD_ADDR_VAR 0 18
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60498: LD_ADDR_VAR 0 19
60502: PUSH
60503: LD_INT 3
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 3
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60538: LD_ADDR_VAR 0 20
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 3
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 3
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60579: LD_ADDR_VAR 0 21
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 3
60597: NEG
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 3
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60623: LD_ADDR_VAR 0 22
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: LD_INT 3
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: LIST
60668: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60669: LD_ADDR_VAR 0 23
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 3
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 4
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: LIST
60712: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60713: LD_ADDR_VAR 0 24
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 4
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: LIST
60753: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60754: LD_ADDR_VAR 0 25
60758: PUSH
60759: LD_INT 3
60761: PUSH
60762: LD_INT 3
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 4
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: LD_INT 4
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60794: LD_ADDR_VAR 0 26
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 3
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 4
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: LIST
60834: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60835: LD_ADDR_VAR 0 27
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 3
60853: NEG
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 4
60864: NEG
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: LIST
60878: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60879: LD_ADDR_VAR 0 28
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: NEG
60899: PUSH
60900: LD_INT 4
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 4
60910: NEG
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60925: LD_ADDR_VAR 0 29
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 4
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 4
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 5
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 5
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 4
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: LD_INT 6
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 6
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 5
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61080: LD_ADDR_VAR 0 30
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 4
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 4
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 5
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 5
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 5
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 6
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 6
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61223: LD_ADDR_VAR 0 31
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: LD_INT 3
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 4
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 4
61270: PUSH
61271: LD_INT 4
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: LD_INT 4
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 5
61290: PUSH
61291: LD_INT 4
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 5
61300: PUSH
61301: LD_INT 5
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 4
61310: PUSH
61311: LD_INT 5
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 6
61320: PUSH
61321: LD_INT 5
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 6
61330: PUSH
61331: LD_INT 6
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 5
61340: PUSH
61341: LD_INT 6
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61362: LD_ADDR_VAR 0 32
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 4
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 4
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: LD_INT 3
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 5
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 5
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 4
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 6
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 6
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 5
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61505: LD_ADDR_VAR 0 33
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 3
61523: NEG
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: NEG
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 4
61557: NEG
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 4
61568: NEG
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 4
61580: NEG
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 5
61591: NEG
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 5
61602: NEG
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 5
61614: NEG
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 6
61625: NEG
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 6
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61660: LD_ADDR_VAR 0 34
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 3
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: NEG
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: LD_INT 4
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 4
61715: NEG
61716: PUSH
61717: LD_INT 3
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 4
61727: NEG
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 4
61739: NEG
61740: PUSH
61741: LD_INT 5
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 5
61751: NEG
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 5
61763: NEG
61764: PUSH
61765: LD_INT 5
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 5
61775: NEG
61776: PUSH
61777: LD_INT 6
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 6
61787: NEG
61788: PUSH
61789: LD_INT 5
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 6
61799: NEG
61800: PUSH
61801: LD_INT 6
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61823: LD_ADDR_VAR 0 41
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61867: LD_ADDR_VAR 0 42
61871: PUSH
61872: LD_INT 2
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 3
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61908: LD_ADDR_VAR 0 43
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 3
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: LIST
61947: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61948: LD_ADDR_VAR 0 44
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: LD_INT 3
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: LIST
61988: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61989: LD_ADDR_VAR 0 45
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62033: LD_ADDR_VAR 0 46
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 3
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62079: LD_ADDR_VAR 0 47
62083: PUSH
62084: LD_INT 2
62086: NEG
62087: PUSH
62088: LD_INT 3
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62112: LD_ADDR_VAR 0 48
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62143: LD_ADDR_VAR 0 49
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: LD_INT 2
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62172: LD_ADDR_VAR 0 50
62176: PUSH
62177: LD_INT 2
62179: PUSH
62180: LD_INT 3
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62201: LD_ADDR_VAR 0 51
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: LD_INT 2
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 1
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62232: LD_ADDR_VAR 0 52
62236: PUSH
62237: LD_INT 3
62239: NEG
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62265: LD_ADDR_VAR 0 53
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 3
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 3
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 2
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62309: LD_ADDR_VAR 0 54
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 3
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 3
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62350: LD_ADDR_VAR 0 55
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 3
62367: PUSH
62368: LD_INT 3
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: LD_INT 3
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: LIST
62389: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62390: LD_ADDR_VAR 0 56
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: LD_INT 3
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62431: LD_ADDR_VAR 0 57
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: NEG
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 3
62460: NEG
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: LIST
62474: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62475: LD_ADDR_VAR 0 58
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 3
62494: NEG
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62521: LD_ADDR_VAR 0 59
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62565: LD_ADDR_VAR 0 60
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62606: LD_ADDR_VAR 0 61
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62646: LD_ADDR_VAR 0 62
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: LD_INT 2
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62687: LD_ADDR_VAR 0 63
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62731: LD_ADDR_VAR 0 64
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 2
62750: NEG
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: LIST
62776: ST_TO_ADDR
// end ; 2 :
62777: GO 66043
62779: LD_INT 2
62781: DOUBLE
62782: EQUAL
62783: IFTRUE 62787
62785: GO 66042
62787: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62788: LD_ADDR_VAR 0 29
62792: PUSH
62793: LD_INT 4
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 4
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 5
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 5
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 4
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 3
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: LD_INT 2
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 5
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 3
62888: PUSH
62889: LD_INT 3
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: LD_INT 2
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 4
62918: PUSH
62919: LD_INT 4
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: LD_INT 4
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: LD_INT 3
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 2
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 4
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: LD_INT 4
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: LD_INT 4
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 3
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: LD_INT 4
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: LD_INT 5
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 5
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 4
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 3
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: LD_INT 5
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 2
63060: NEG
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 3
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 4
63127: NEG
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 4
63138: NEG
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 4
63150: NEG
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 4
63173: NEG
63174: PUSH
63175: LD_INT 4
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: NEG
63186: PUSH
63187: LD_INT 5
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 3
63197: NEG
63198: PUSH
63199: LD_INT 4
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: NEG
63210: PUSH
63211: LD_INT 3
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 4
63221: NEG
63222: PUSH
63223: LD_INT 3
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 5
63233: NEG
63234: PUSH
63235: LD_INT 4
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 5
63245: NEG
63246: PUSH
63247: LD_INT 5
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: NEG
63258: PUSH
63259: LD_INT 5
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 5
63269: NEG
63270: PUSH
63271: LD_INT 3
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63326: LD_ADDR_VAR 0 30
63330: PUSH
63331: LD_INT 4
63333: PUSH
63334: LD_INT 4
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 4
63343: PUSH
63344: LD_INT 3
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 5
63353: PUSH
63354: LD_INT 4
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 5
63363: PUSH
63364: LD_INT 5
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 4
63373: PUSH
63374: LD_INT 5
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: LD_INT 4
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: LD_INT 3
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 5
63403: PUSH
63404: LD_INT 3
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: LD_INT 5
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 3
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 3
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: LD_INT 4
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 4
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 3
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: LD_INT 4
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 4
63516: NEG
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 4
63527: NEG
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 3
63539: NEG
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 4
63561: NEG
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 5
63572: NEG
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 5
63583: NEG
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 5
63595: NEG
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 3
63618: NEG
63619: PUSH
63620: LD_INT 3
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 3
63630: NEG
63631: PUSH
63632: LD_INT 4
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: NEG
63643: PUSH
63644: LD_INT 3
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 3
63666: NEG
63667: PUSH
63668: LD_INT 2
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 4
63678: NEG
63679: PUSH
63680: LD_INT 3
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 4
63690: NEG
63691: PUSH
63692: LD_INT 4
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 2
63702: NEG
63703: PUSH
63704: LD_INT 4
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 4
63714: NEG
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 4
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 5
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 4
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 3
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: LD_INT 4
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 5
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: LD_INT 3
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 2
63816: NEG
63817: PUSH
63818: LD_INT 5
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63873: LD_ADDR_VAR 0 31
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 4
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 3
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: LD_INT 4
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: LD_INT 5
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 5
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: LD_INT 4
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: LD_INT 3
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: LD_INT 5
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 2
63962: NEG
63963: PUSH
63964: LD_INT 3
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 3
63973: NEG
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 3
63984: NEG
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: NEG
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 4
64029: NEG
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 4
64040: NEG
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 4
64052: NEG
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: NEG
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 4
64075: NEG
64076: PUSH
64077: LD_INT 4
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 4
64087: NEG
64088: PUSH
64089: LD_INT 5
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 3
64099: NEG
64100: PUSH
64101: LD_INT 4
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: NEG
64112: PUSH
64113: LD_INT 3
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 4
64123: NEG
64124: PUSH
64125: LD_INT 3
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 5
64135: NEG
64136: PUSH
64137: LD_INT 4
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 5
64147: NEG
64148: PUSH
64149: LD_INT 5
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 3
64159: NEG
64160: PUSH
64161: LD_INT 5
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 5
64171: NEG
64172: PUSH
64173: LD_INT 3
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 3
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: LD_INT 4
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: LD_INT 3
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: LD_INT 2
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 2
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: LD_INT 3
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: LD_INT 4
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: LD_INT 2
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 2
64273: NEG
64274: PUSH
64275: LD_INT 4
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 4
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 4
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 5
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 5
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 4
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 3
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 3
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 3
64357: PUSH
64358: LD_INT 2
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 5
64368: PUSH
64369: LD_INT 2
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64423: LD_ADDR_VAR 0 32
64427: PUSH
64428: LD_INT 4
64430: NEG
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 4
64441: NEG
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 3
64453: NEG
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 3
64464: NEG
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 4
64475: NEG
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 5
64486: NEG
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 5
64497: NEG
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 5
64509: NEG
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 3
64521: NEG
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 3
64532: NEG
64533: PUSH
64534: LD_INT 3
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: LD_INT 4
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: LD_INT 3
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 3
64580: NEG
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 4
64592: NEG
64593: PUSH
64594: LD_INT 3
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 4
64604: NEG
64605: PUSH
64606: LD_INT 4
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: LD_INT 4
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 4
64628: NEG
64629: PUSH
64630: LD_INT 2
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 4
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: LD_INT 5
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: LD_INT 4
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: LD_INT 3
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 3
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: LD_INT 4
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 5
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 2
64730: NEG
64731: PUSH
64732: LD_INT 5
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 3
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 4
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 4
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 3
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 4
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 4
64835: PUSH
64836: LD_INT 4
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 4
64845: PUSH
64846: LD_INT 3
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 5
64855: PUSH
64856: LD_INT 4
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 5
64865: PUSH
64866: LD_INT 5
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 4
64875: PUSH
64876: LD_INT 5
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: PUSH
64886: LD_INT 4
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 3
64895: PUSH
64896: LD_INT 3
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 5
64905: PUSH
64906: LD_INT 3
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 3
64915: PUSH
64916: LD_INT 5
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64970: LD_ADDR_VAR 0 33
64974: PUSH
64975: LD_INT 4
64977: NEG
64978: PUSH
64979: LD_INT 4
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 4
64989: NEG
64990: PUSH
64991: LD_INT 5
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: LD_INT 4
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: LD_INT 3
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 4
65025: NEG
65026: PUSH
65027: LD_INT 3
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 5
65037: NEG
65038: PUSH
65039: LD_INT 4
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 5
65049: NEG
65050: PUSH
65051: LD_INT 5
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 3
65061: NEG
65062: PUSH
65063: LD_INT 5
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 5
65073: NEG
65074: PUSH
65075: LD_INT 3
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: LD_INT 3
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 4
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: LD_INT 3
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: LD_INT 2
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 2
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 4
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 4
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 4
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 4
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 5
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 5
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 4
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 3
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: LD_INT 2
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 5
65270: PUSH
65271: LD_INT 2
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 3
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: LD_INT 2
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 4
65300: PUSH
65301: LD_INT 3
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 4
65310: PUSH
65311: LD_INT 4
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: LD_INT 4
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: LD_INT 2
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 4
65350: PUSH
65351: LD_INT 2
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: LD_INT 4
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 4
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: LD_INT 3
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: LD_INT 4
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: LD_INT 5
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: LD_INT 5
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: LD_INT 4
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: NEG
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 2
65442: PUSH
65443: LD_INT 5
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 2
65452: NEG
65453: PUSH
65454: LD_INT 3
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65508: LD_ADDR_VAR 0 34
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: LD_INT 4
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: LD_INT 5
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: PUSH
65538: LD_INT 4
65540: NEG
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: LD_INT 3
65551: NEG
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: LD_INT 3
65562: NEG
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: LD_INT 4
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: LD_INT 5
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 2
65594: PUSH
65595: LD_INT 3
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 2
65605: NEG
65606: PUSH
65607: LD_INT 5
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 3
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 4
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 4
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 2
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 2
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: LD_INT 2
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 4
65700: PUSH
65701: LD_INT 2
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 4
65710: PUSH
65711: LD_INT 4
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 4
65720: PUSH
65721: LD_INT 3
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 5
65730: PUSH
65731: LD_INT 4
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 5
65740: PUSH
65741: LD_INT 5
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 4
65750: PUSH
65751: LD_INT 5
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: LD_INT 4
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 3
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 5
65780: PUSH
65781: LD_INT 3
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: LD_INT 5
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: LD_INT 3
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: LD_INT 3
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: LD_INT 4
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: LD_INT 4
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 1
65861: NEG
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: LD_INT 4
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 4
65893: NEG
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 4
65904: NEG
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 3
65916: NEG
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 4
65938: NEG
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 5
65949: NEG
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 5
65960: NEG
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 5
65972: NEG
65973: PUSH
65974: LD_INT 2
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 3
65984: NEG
65985: PUSH
65986: LD_INT 2
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: ST_TO_ADDR
// end ; end ;
66040: GO 66043
66042: POP
// case btype of b_depot , b_warehouse :
66043: LD_VAR 0 1
66047: PUSH
66048: LD_INT 0
66050: DOUBLE
66051: EQUAL
66052: IFTRUE 66062
66054: LD_INT 1
66056: DOUBLE
66057: EQUAL
66058: IFTRUE 66062
66060: GO 66263
66062: POP
// case nation of nation_american :
66063: LD_VAR 0 5
66067: PUSH
66068: LD_INT 1
66070: DOUBLE
66071: EQUAL
66072: IFTRUE 66076
66074: GO 66132
66076: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66077: LD_ADDR_VAR 0 9
66081: PUSH
66082: LD_VAR 0 11
66086: PUSH
66087: LD_VAR 0 12
66091: PUSH
66092: LD_VAR 0 13
66096: PUSH
66097: LD_VAR 0 14
66101: PUSH
66102: LD_VAR 0 15
66106: PUSH
66107: LD_VAR 0 16
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: PUSH
66120: LD_VAR 0 4
66124: PUSH
66125: LD_INT 1
66127: PLUS
66128: ARRAY
66129: ST_TO_ADDR
66130: GO 66261
66132: LD_INT 2
66134: DOUBLE
66135: EQUAL
66136: IFTRUE 66140
66138: GO 66196
66140: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66141: LD_ADDR_VAR 0 9
66145: PUSH
66146: LD_VAR 0 17
66150: PUSH
66151: LD_VAR 0 18
66155: PUSH
66156: LD_VAR 0 19
66160: PUSH
66161: LD_VAR 0 20
66165: PUSH
66166: LD_VAR 0 21
66170: PUSH
66171: LD_VAR 0 22
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: PUSH
66184: LD_VAR 0 4
66188: PUSH
66189: LD_INT 1
66191: PLUS
66192: ARRAY
66193: ST_TO_ADDR
66194: GO 66261
66196: LD_INT 3
66198: DOUBLE
66199: EQUAL
66200: IFTRUE 66204
66202: GO 66260
66204: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66205: LD_ADDR_VAR 0 9
66209: PUSH
66210: LD_VAR 0 23
66214: PUSH
66215: LD_VAR 0 24
66219: PUSH
66220: LD_VAR 0 25
66224: PUSH
66225: LD_VAR 0 26
66229: PUSH
66230: LD_VAR 0 27
66234: PUSH
66235: LD_VAR 0 28
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: LD_VAR 0 4
66252: PUSH
66253: LD_INT 1
66255: PLUS
66256: ARRAY
66257: ST_TO_ADDR
66258: GO 66261
66260: POP
66261: GO 66816
66263: LD_INT 2
66265: DOUBLE
66266: EQUAL
66267: IFTRUE 66277
66269: LD_INT 3
66271: DOUBLE
66272: EQUAL
66273: IFTRUE 66277
66275: GO 66333
66277: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66278: LD_ADDR_VAR 0 9
66282: PUSH
66283: LD_VAR 0 29
66287: PUSH
66288: LD_VAR 0 30
66292: PUSH
66293: LD_VAR 0 31
66297: PUSH
66298: LD_VAR 0 32
66302: PUSH
66303: LD_VAR 0 33
66307: PUSH
66308: LD_VAR 0 34
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: PUSH
66321: LD_VAR 0 4
66325: PUSH
66326: LD_INT 1
66328: PLUS
66329: ARRAY
66330: ST_TO_ADDR
66331: GO 66816
66333: LD_INT 16
66335: DOUBLE
66336: EQUAL
66337: IFTRUE 66395
66339: LD_INT 17
66341: DOUBLE
66342: EQUAL
66343: IFTRUE 66395
66345: LD_INT 18
66347: DOUBLE
66348: EQUAL
66349: IFTRUE 66395
66351: LD_INT 19
66353: DOUBLE
66354: EQUAL
66355: IFTRUE 66395
66357: LD_INT 22
66359: DOUBLE
66360: EQUAL
66361: IFTRUE 66395
66363: LD_INT 20
66365: DOUBLE
66366: EQUAL
66367: IFTRUE 66395
66369: LD_INT 21
66371: DOUBLE
66372: EQUAL
66373: IFTRUE 66395
66375: LD_INT 23
66377: DOUBLE
66378: EQUAL
66379: IFTRUE 66395
66381: LD_INT 24
66383: DOUBLE
66384: EQUAL
66385: IFTRUE 66395
66387: LD_INT 25
66389: DOUBLE
66390: EQUAL
66391: IFTRUE 66395
66393: GO 66451
66395: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66396: LD_ADDR_VAR 0 9
66400: PUSH
66401: LD_VAR 0 35
66405: PUSH
66406: LD_VAR 0 36
66410: PUSH
66411: LD_VAR 0 37
66415: PUSH
66416: LD_VAR 0 38
66420: PUSH
66421: LD_VAR 0 39
66425: PUSH
66426: LD_VAR 0 40
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: PUSH
66439: LD_VAR 0 4
66443: PUSH
66444: LD_INT 1
66446: PLUS
66447: ARRAY
66448: ST_TO_ADDR
66449: GO 66816
66451: LD_INT 6
66453: DOUBLE
66454: EQUAL
66455: IFTRUE 66507
66457: LD_INT 7
66459: DOUBLE
66460: EQUAL
66461: IFTRUE 66507
66463: LD_INT 8
66465: DOUBLE
66466: EQUAL
66467: IFTRUE 66507
66469: LD_INT 13
66471: DOUBLE
66472: EQUAL
66473: IFTRUE 66507
66475: LD_INT 12
66477: DOUBLE
66478: EQUAL
66479: IFTRUE 66507
66481: LD_INT 15
66483: DOUBLE
66484: EQUAL
66485: IFTRUE 66507
66487: LD_INT 11
66489: DOUBLE
66490: EQUAL
66491: IFTRUE 66507
66493: LD_INT 14
66495: DOUBLE
66496: EQUAL
66497: IFTRUE 66507
66499: LD_INT 10
66501: DOUBLE
66502: EQUAL
66503: IFTRUE 66507
66505: GO 66563
66507: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66508: LD_ADDR_VAR 0 9
66512: PUSH
66513: LD_VAR 0 41
66517: PUSH
66518: LD_VAR 0 42
66522: PUSH
66523: LD_VAR 0 43
66527: PUSH
66528: LD_VAR 0 44
66532: PUSH
66533: LD_VAR 0 45
66537: PUSH
66538: LD_VAR 0 46
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: PUSH
66551: LD_VAR 0 4
66555: PUSH
66556: LD_INT 1
66558: PLUS
66559: ARRAY
66560: ST_TO_ADDR
66561: GO 66816
66563: LD_INT 36
66565: DOUBLE
66566: EQUAL
66567: IFTRUE 66571
66569: GO 66627
66571: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66572: LD_ADDR_VAR 0 9
66576: PUSH
66577: LD_VAR 0 47
66581: PUSH
66582: LD_VAR 0 48
66586: PUSH
66587: LD_VAR 0 49
66591: PUSH
66592: LD_VAR 0 50
66596: PUSH
66597: LD_VAR 0 51
66601: PUSH
66602: LD_VAR 0 52
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: PUSH
66615: LD_VAR 0 4
66619: PUSH
66620: LD_INT 1
66622: PLUS
66623: ARRAY
66624: ST_TO_ADDR
66625: GO 66816
66627: LD_INT 4
66629: DOUBLE
66630: EQUAL
66631: IFTRUE 66653
66633: LD_INT 5
66635: DOUBLE
66636: EQUAL
66637: IFTRUE 66653
66639: LD_INT 34
66641: DOUBLE
66642: EQUAL
66643: IFTRUE 66653
66645: LD_INT 37
66647: DOUBLE
66648: EQUAL
66649: IFTRUE 66653
66651: GO 66709
66653: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66654: LD_ADDR_VAR 0 9
66658: PUSH
66659: LD_VAR 0 53
66663: PUSH
66664: LD_VAR 0 54
66668: PUSH
66669: LD_VAR 0 55
66673: PUSH
66674: LD_VAR 0 56
66678: PUSH
66679: LD_VAR 0 57
66683: PUSH
66684: LD_VAR 0 58
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: PUSH
66697: LD_VAR 0 4
66701: PUSH
66702: LD_INT 1
66704: PLUS
66705: ARRAY
66706: ST_TO_ADDR
66707: GO 66816
66709: LD_INT 31
66711: DOUBLE
66712: EQUAL
66713: IFTRUE 66759
66715: LD_INT 32
66717: DOUBLE
66718: EQUAL
66719: IFTRUE 66759
66721: LD_INT 33
66723: DOUBLE
66724: EQUAL
66725: IFTRUE 66759
66727: LD_INT 27
66729: DOUBLE
66730: EQUAL
66731: IFTRUE 66759
66733: LD_INT 26
66735: DOUBLE
66736: EQUAL
66737: IFTRUE 66759
66739: LD_INT 28
66741: DOUBLE
66742: EQUAL
66743: IFTRUE 66759
66745: LD_INT 29
66747: DOUBLE
66748: EQUAL
66749: IFTRUE 66759
66751: LD_INT 30
66753: DOUBLE
66754: EQUAL
66755: IFTRUE 66759
66757: GO 66815
66759: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66760: LD_ADDR_VAR 0 9
66764: PUSH
66765: LD_VAR 0 59
66769: PUSH
66770: LD_VAR 0 60
66774: PUSH
66775: LD_VAR 0 61
66779: PUSH
66780: LD_VAR 0 62
66784: PUSH
66785: LD_VAR 0 63
66789: PUSH
66790: LD_VAR 0 64
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: PUSH
66803: LD_VAR 0 4
66807: PUSH
66808: LD_INT 1
66810: PLUS
66811: ARRAY
66812: ST_TO_ADDR
66813: GO 66816
66815: POP
// temp_list2 = [ ] ;
66816: LD_ADDR_VAR 0 10
66820: PUSH
66821: EMPTY
66822: ST_TO_ADDR
// for i in temp_list do
66823: LD_ADDR_VAR 0 8
66827: PUSH
66828: LD_VAR 0 9
66832: PUSH
66833: FOR_IN
66834: IFFALSE 66886
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66836: LD_ADDR_VAR 0 10
66840: PUSH
66841: LD_VAR 0 10
66845: PUSH
66846: LD_VAR 0 8
66850: PUSH
66851: LD_INT 1
66853: ARRAY
66854: PUSH
66855: LD_VAR 0 2
66859: PLUS
66860: PUSH
66861: LD_VAR 0 8
66865: PUSH
66866: LD_INT 2
66868: ARRAY
66869: PUSH
66870: LD_VAR 0 3
66874: PLUS
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: EMPTY
66881: LIST
66882: ADD
66883: ST_TO_ADDR
66884: GO 66833
66886: POP
66887: POP
// result = temp_list2 ;
66888: LD_ADDR_VAR 0 7
66892: PUSH
66893: LD_VAR 0 10
66897: ST_TO_ADDR
// end ;
66898: LD_VAR 0 7
66902: RET
// export function EnemyInRange ( unit , dist ) ; begin
66903: LD_INT 0
66905: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66906: LD_ADDR_VAR 0 3
66910: PUSH
66911: LD_VAR 0 1
66915: PPUSH
66916: CALL_OW 255
66920: PPUSH
66921: LD_VAR 0 1
66925: PPUSH
66926: CALL_OW 250
66930: PPUSH
66931: LD_VAR 0 1
66935: PPUSH
66936: CALL_OW 251
66940: PPUSH
66941: LD_VAR 0 2
66945: PPUSH
66946: CALL 40305 0 4
66950: PUSH
66951: LD_INT 4
66953: ARRAY
66954: ST_TO_ADDR
// end ;
66955: LD_VAR 0 3
66959: RET
// export function PlayerSeeMe ( unit ) ; begin
66960: LD_INT 0
66962: PPUSH
// result := See ( your_side , unit ) ;
66963: LD_ADDR_VAR 0 2
66967: PUSH
66968: LD_OWVAR 2
66972: PPUSH
66973: LD_VAR 0 1
66977: PPUSH
66978: CALL_OW 292
66982: ST_TO_ADDR
// end ;
66983: LD_VAR 0 2
66987: RET
// export function ReverseDir ( unit ) ; begin
66988: LD_INT 0
66990: PPUSH
// if not unit then
66991: LD_VAR 0 1
66995: NOT
66996: IFFALSE 67000
// exit ;
66998: GO 67023
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67000: LD_ADDR_VAR 0 2
67004: PUSH
67005: LD_VAR 0 1
67009: PPUSH
67010: CALL_OW 254
67014: PUSH
67015: LD_INT 3
67017: PLUS
67018: PUSH
67019: LD_INT 6
67021: MOD
67022: ST_TO_ADDR
// end ;
67023: LD_VAR 0 2
67027: RET
// export function ReverseArray ( array ) ; var i ; begin
67028: LD_INT 0
67030: PPUSH
67031: PPUSH
// if not array then
67032: LD_VAR 0 1
67036: NOT
67037: IFFALSE 67041
// exit ;
67039: GO 67096
// result := [ ] ;
67041: LD_ADDR_VAR 0 2
67045: PUSH
67046: EMPTY
67047: ST_TO_ADDR
// for i := array downto 1 do
67048: LD_ADDR_VAR 0 3
67052: PUSH
67053: DOUBLE
67054: LD_VAR 0 1
67058: INC
67059: ST_TO_ADDR
67060: LD_INT 1
67062: PUSH
67063: FOR_DOWNTO
67064: IFFALSE 67094
// result := Join ( result , array [ i ] ) ;
67066: LD_ADDR_VAR 0 2
67070: PUSH
67071: LD_VAR 0 2
67075: PPUSH
67076: LD_VAR 0 1
67080: PUSH
67081: LD_VAR 0 3
67085: ARRAY
67086: PPUSH
67087: CALL 71721 0 2
67091: ST_TO_ADDR
67092: GO 67063
67094: POP
67095: POP
// end ;
67096: LD_VAR 0 2
67100: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67101: LD_INT 0
67103: PPUSH
67104: PPUSH
67105: PPUSH
67106: PPUSH
67107: PPUSH
67108: PPUSH
// if not unit or not hexes then
67109: LD_VAR 0 1
67113: NOT
67114: PUSH
67115: LD_VAR 0 2
67119: NOT
67120: OR
67121: IFFALSE 67125
// exit ;
67123: GO 67248
// dist := 9999 ;
67125: LD_ADDR_VAR 0 5
67129: PUSH
67130: LD_INT 9999
67132: ST_TO_ADDR
// for i = 1 to hexes do
67133: LD_ADDR_VAR 0 4
67137: PUSH
67138: DOUBLE
67139: LD_INT 1
67141: DEC
67142: ST_TO_ADDR
67143: LD_VAR 0 2
67147: PUSH
67148: FOR_TO
67149: IFFALSE 67236
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67151: LD_ADDR_VAR 0 6
67155: PUSH
67156: LD_VAR 0 1
67160: PPUSH
67161: LD_VAR 0 2
67165: PUSH
67166: LD_VAR 0 4
67170: ARRAY
67171: PUSH
67172: LD_INT 1
67174: ARRAY
67175: PPUSH
67176: LD_VAR 0 2
67180: PUSH
67181: LD_VAR 0 4
67185: ARRAY
67186: PUSH
67187: LD_INT 2
67189: ARRAY
67190: PPUSH
67191: CALL_OW 297
67195: ST_TO_ADDR
// if tdist < dist then
67196: LD_VAR 0 6
67200: PUSH
67201: LD_VAR 0 5
67205: LESS
67206: IFFALSE 67234
// begin hex := hexes [ i ] ;
67208: LD_ADDR_VAR 0 8
67212: PUSH
67213: LD_VAR 0 2
67217: PUSH
67218: LD_VAR 0 4
67222: ARRAY
67223: ST_TO_ADDR
// dist := tdist ;
67224: LD_ADDR_VAR 0 5
67228: PUSH
67229: LD_VAR 0 6
67233: ST_TO_ADDR
// end ; end ;
67234: GO 67148
67236: POP
67237: POP
// result := hex ;
67238: LD_ADDR_VAR 0 3
67242: PUSH
67243: LD_VAR 0 8
67247: ST_TO_ADDR
// end ;
67248: LD_VAR 0 3
67252: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67253: LD_INT 0
67255: PPUSH
67256: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67257: LD_VAR 0 1
67261: NOT
67262: PUSH
67263: LD_VAR 0 1
67267: PUSH
67268: LD_INT 21
67270: PUSH
67271: LD_INT 2
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 23
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PPUSH
67292: CALL_OW 69
67296: IN
67297: NOT
67298: OR
67299: IFFALSE 67303
// exit ;
67301: GO 67350
// for i = 1 to 3 do
67303: LD_ADDR_VAR 0 3
67307: PUSH
67308: DOUBLE
67309: LD_INT 1
67311: DEC
67312: ST_TO_ADDR
67313: LD_INT 3
67315: PUSH
67316: FOR_TO
67317: IFFALSE 67348
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67319: LD_VAR 0 1
67323: PPUSH
67324: CALL_OW 250
67328: PPUSH
67329: LD_VAR 0 1
67333: PPUSH
67334: CALL_OW 251
67338: PPUSH
67339: LD_INT 1
67341: PPUSH
67342: CALL_OW 453
67346: GO 67316
67348: POP
67349: POP
// end ;
67350: LD_VAR 0 2
67354: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67355: LD_INT 0
67357: PPUSH
67358: PPUSH
67359: PPUSH
67360: PPUSH
67361: PPUSH
67362: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67363: LD_VAR 0 1
67367: NOT
67368: PUSH
67369: LD_VAR 0 2
67373: NOT
67374: OR
67375: PUSH
67376: LD_VAR 0 1
67380: PPUSH
67381: CALL_OW 314
67385: OR
67386: IFFALSE 67390
// exit ;
67388: GO 67831
// x := GetX ( enemy_unit ) ;
67390: LD_ADDR_VAR 0 7
67394: PUSH
67395: LD_VAR 0 2
67399: PPUSH
67400: CALL_OW 250
67404: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67405: LD_ADDR_VAR 0 8
67409: PUSH
67410: LD_VAR 0 2
67414: PPUSH
67415: CALL_OW 251
67419: ST_TO_ADDR
// if not x or not y then
67420: LD_VAR 0 7
67424: NOT
67425: PUSH
67426: LD_VAR 0 8
67430: NOT
67431: OR
67432: IFFALSE 67436
// exit ;
67434: GO 67831
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67436: LD_ADDR_VAR 0 6
67440: PUSH
67441: LD_VAR 0 7
67445: PPUSH
67446: LD_INT 0
67448: PPUSH
67449: LD_INT 4
67451: PPUSH
67452: CALL_OW 272
67456: PUSH
67457: LD_VAR 0 8
67461: PPUSH
67462: LD_INT 0
67464: PPUSH
67465: LD_INT 4
67467: PPUSH
67468: CALL_OW 273
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_VAR 0 7
67481: PPUSH
67482: LD_INT 1
67484: PPUSH
67485: LD_INT 4
67487: PPUSH
67488: CALL_OW 272
67492: PUSH
67493: LD_VAR 0 8
67497: PPUSH
67498: LD_INT 1
67500: PPUSH
67501: LD_INT 4
67503: PPUSH
67504: CALL_OW 273
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_VAR 0 7
67517: PPUSH
67518: LD_INT 2
67520: PPUSH
67521: LD_INT 4
67523: PPUSH
67524: CALL_OW 272
67528: PUSH
67529: LD_VAR 0 8
67533: PPUSH
67534: LD_INT 2
67536: PPUSH
67537: LD_INT 4
67539: PPUSH
67540: CALL_OW 273
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_VAR 0 7
67553: PPUSH
67554: LD_INT 3
67556: PPUSH
67557: LD_INT 4
67559: PPUSH
67560: CALL_OW 272
67564: PUSH
67565: LD_VAR 0 8
67569: PPUSH
67570: LD_INT 3
67572: PPUSH
67573: LD_INT 4
67575: PPUSH
67576: CALL_OW 273
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_VAR 0 7
67589: PPUSH
67590: LD_INT 4
67592: PPUSH
67593: LD_INT 4
67595: PPUSH
67596: CALL_OW 272
67600: PUSH
67601: LD_VAR 0 8
67605: PPUSH
67606: LD_INT 4
67608: PPUSH
67609: LD_INT 4
67611: PPUSH
67612: CALL_OW 273
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_VAR 0 7
67625: PPUSH
67626: LD_INT 5
67628: PPUSH
67629: LD_INT 4
67631: PPUSH
67632: CALL_OW 272
67636: PUSH
67637: LD_VAR 0 8
67641: PPUSH
67642: LD_INT 5
67644: PPUSH
67645: LD_INT 4
67647: PPUSH
67648: CALL_OW 273
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: ST_TO_ADDR
// for i = tmp downto 1 do
67665: LD_ADDR_VAR 0 4
67669: PUSH
67670: DOUBLE
67671: LD_VAR 0 6
67675: INC
67676: ST_TO_ADDR
67677: LD_INT 1
67679: PUSH
67680: FOR_DOWNTO
67681: IFFALSE 67782
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67683: LD_VAR 0 6
67687: PUSH
67688: LD_VAR 0 4
67692: ARRAY
67693: PUSH
67694: LD_INT 1
67696: ARRAY
67697: PPUSH
67698: LD_VAR 0 6
67702: PUSH
67703: LD_VAR 0 4
67707: ARRAY
67708: PUSH
67709: LD_INT 2
67711: ARRAY
67712: PPUSH
67713: CALL_OW 488
67717: NOT
67718: PUSH
67719: LD_VAR 0 6
67723: PUSH
67724: LD_VAR 0 4
67728: ARRAY
67729: PUSH
67730: LD_INT 1
67732: ARRAY
67733: PPUSH
67734: LD_VAR 0 6
67738: PUSH
67739: LD_VAR 0 4
67743: ARRAY
67744: PUSH
67745: LD_INT 2
67747: ARRAY
67748: PPUSH
67749: CALL_OW 428
67753: PUSH
67754: LD_INT 0
67756: NONEQUAL
67757: OR
67758: IFFALSE 67780
// tmp := Delete ( tmp , i ) ;
67760: LD_ADDR_VAR 0 6
67764: PUSH
67765: LD_VAR 0 6
67769: PPUSH
67770: LD_VAR 0 4
67774: PPUSH
67775: CALL_OW 3
67779: ST_TO_ADDR
67780: GO 67680
67782: POP
67783: POP
// j := GetClosestHex ( unit , tmp ) ;
67784: LD_ADDR_VAR 0 5
67788: PUSH
67789: LD_VAR 0 1
67793: PPUSH
67794: LD_VAR 0 6
67798: PPUSH
67799: CALL 67101 0 2
67803: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67804: LD_VAR 0 1
67808: PPUSH
67809: LD_VAR 0 5
67813: PUSH
67814: LD_INT 1
67816: ARRAY
67817: PPUSH
67818: LD_VAR 0 5
67822: PUSH
67823: LD_INT 2
67825: ARRAY
67826: PPUSH
67827: CALL_OW 111
// end ;
67831: LD_VAR 0 3
67835: RET
// export function PrepareApemanSoldier ( ) ; begin
67836: LD_INT 0
67838: PPUSH
// uc_nation := 0 ;
67839: LD_ADDR_OWVAR 21
67843: PUSH
67844: LD_INT 0
67846: ST_TO_ADDR
// hc_sex := sex_male ;
67847: LD_ADDR_OWVAR 27
67851: PUSH
67852: LD_INT 1
67854: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67855: LD_ADDR_OWVAR 28
67859: PUSH
67860: LD_INT 15
67862: ST_TO_ADDR
// hc_gallery :=  ;
67863: LD_ADDR_OWVAR 33
67867: PUSH
67868: LD_STRING 
67870: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67871: LD_ADDR_OWVAR 31
67875: PUSH
67876: LD_INT 0
67878: PPUSH
67879: LD_INT 3
67881: PPUSH
67882: CALL_OW 12
67886: PUSH
67887: LD_INT 0
67889: PPUSH
67890: LD_INT 3
67892: PPUSH
67893: CALL_OW 12
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: ST_TO_ADDR
// end ;
67910: LD_VAR 0 1
67914: RET
// export function PrepareApemanEngineer ( ) ; begin
67915: LD_INT 0
67917: PPUSH
// uc_nation := 0 ;
67918: LD_ADDR_OWVAR 21
67922: PUSH
67923: LD_INT 0
67925: ST_TO_ADDR
// hc_sex := sex_male ;
67926: LD_ADDR_OWVAR 27
67930: PUSH
67931: LD_INT 1
67933: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67934: LD_ADDR_OWVAR 28
67938: PUSH
67939: LD_INT 16
67941: ST_TO_ADDR
// hc_gallery :=  ;
67942: LD_ADDR_OWVAR 33
67946: PUSH
67947: LD_STRING 
67949: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67950: LD_ADDR_OWVAR 31
67954: PUSH
67955: LD_INT 0
67957: PPUSH
67958: LD_INT 3
67960: PPUSH
67961: CALL_OW 12
67965: PUSH
67966: LD_INT 0
67968: PPUSH
67969: LD_INT 3
67971: PPUSH
67972: CALL_OW 12
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: ST_TO_ADDR
// end ;
67989: LD_VAR 0 1
67993: RET
// export function PrepareApeman ( agressivity ) ; begin
67994: LD_INT 0
67996: PPUSH
// uc_side := 0 ;
67997: LD_ADDR_OWVAR 20
68001: PUSH
68002: LD_INT 0
68004: ST_TO_ADDR
// uc_nation := 0 ;
68005: LD_ADDR_OWVAR 21
68009: PUSH
68010: LD_INT 0
68012: ST_TO_ADDR
// hc_sex := sex_male ;
68013: LD_ADDR_OWVAR 27
68017: PUSH
68018: LD_INT 1
68020: ST_TO_ADDR
// hc_class := class_apeman ;
68021: LD_ADDR_OWVAR 28
68025: PUSH
68026: LD_INT 12
68028: ST_TO_ADDR
// hc_gallery :=  ;
68029: LD_ADDR_OWVAR 33
68033: PUSH
68034: LD_STRING 
68036: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68037: LD_ADDR_OWVAR 35
68041: PUSH
68042: LD_VAR 0 1
68046: NEG
68047: PPUSH
68048: LD_VAR 0 1
68052: PPUSH
68053: CALL_OW 12
68057: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68058: LD_ADDR_OWVAR 31
68062: PUSH
68063: LD_INT 0
68065: PPUSH
68066: LD_INT 3
68068: PPUSH
68069: CALL_OW 12
68073: PUSH
68074: LD_INT 0
68076: PPUSH
68077: LD_INT 3
68079: PPUSH
68080: CALL_OW 12
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// end ;
68097: LD_VAR 0 2
68101: RET
// export function PrepareTiger ( agressivity ) ; begin
68102: LD_INT 0
68104: PPUSH
// uc_side := 0 ;
68105: LD_ADDR_OWVAR 20
68109: PUSH
68110: LD_INT 0
68112: ST_TO_ADDR
// uc_nation := 0 ;
68113: LD_ADDR_OWVAR 21
68117: PUSH
68118: LD_INT 0
68120: ST_TO_ADDR
// hc_class := class_tiger ;
68121: LD_ADDR_OWVAR 28
68125: PUSH
68126: LD_INT 14
68128: ST_TO_ADDR
// hc_gallery :=  ;
68129: LD_ADDR_OWVAR 33
68133: PUSH
68134: LD_STRING 
68136: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68137: LD_ADDR_OWVAR 35
68141: PUSH
68142: LD_VAR 0 1
68146: NEG
68147: PPUSH
68148: LD_VAR 0 1
68152: PPUSH
68153: CALL_OW 12
68157: ST_TO_ADDR
// end ;
68158: LD_VAR 0 2
68162: RET
// export function PrepareEnchidna ( ) ; begin
68163: LD_INT 0
68165: PPUSH
// uc_side := 0 ;
68166: LD_ADDR_OWVAR 20
68170: PUSH
68171: LD_INT 0
68173: ST_TO_ADDR
// uc_nation := 0 ;
68174: LD_ADDR_OWVAR 21
68178: PUSH
68179: LD_INT 0
68181: ST_TO_ADDR
// hc_class := class_baggie ;
68182: LD_ADDR_OWVAR 28
68186: PUSH
68187: LD_INT 13
68189: ST_TO_ADDR
// hc_gallery :=  ;
68190: LD_ADDR_OWVAR 33
68194: PUSH
68195: LD_STRING 
68197: ST_TO_ADDR
// end ;
68198: LD_VAR 0 1
68202: RET
// export function PrepareFrog ( ) ; begin
68203: LD_INT 0
68205: PPUSH
// uc_side := 0 ;
68206: LD_ADDR_OWVAR 20
68210: PUSH
68211: LD_INT 0
68213: ST_TO_ADDR
// uc_nation := 0 ;
68214: LD_ADDR_OWVAR 21
68218: PUSH
68219: LD_INT 0
68221: ST_TO_ADDR
// hc_class := class_frog ;
68222: LD_ADDR_OWVAR 28
68226: PUSH
68227: LD_INT 19
68229: ST_TO_ADDR
// hc_gallery :=  ;
68230: LD_ADDR_OWVAR 33
68234: PUSH
68235: LD_STRING 
68237: ST_TO_ADDR
// end ;
68238: LD_VAR 0 1
68242: RET
// export function PrepareFish ( ) ; begin
68243: LD_INT 0
68245: PPUSH
// uc_side := 0 ;
68246: LD_ADDR_OWVAR 20
68250: PUSH
68251: LD_INT 0
68253: ST_TO_ADDR
// uc_nation := 0 ;
68254: LD_ADDR_OWVAR 21
68258: PUSH
68259: LD_INT 0
68261: ST_TO_ADDR
// hc_class := class_fish ;
68262: LD_ADDR_OWVAR 28
68266: PUSH
68267: LD_INT 20
68269: ST_TO_ADDR
// hc_gallery :=  ;
68270: LD_ADDR_OWVAR 33
68274: PUSH
68275: LD_STRING 
68277: ST_TO_ADDR
// end ;
68278: LD_VAR 0 1
68282: RET
// export function PrepareBird ( ) ; begin
68283: LD_INT 0
68285: PPUSH
// uc_side := 0 ;
68286: LD_ADDR_OWVAR 20
68290: PUSH
68291: LD_INT 0
68293: ST_TO_ADDR
// uc_nation := 0 ;
68294: LD_ADDR_OWVAR 21
68298: PUSH
68299: LD_INT 0
68301: ST_TO_ADDR
// hc_class := class_phororhacos ;
68302: LD_ADDR_OWVAR 28
68306: PUSH
68307: LD_INT 18
68309: ST_TO_ADDR
// hc_gallery :=  ;
68310: LD_ADDR_OWVAR 33
68314: PUSH
68315: LD_STRING 
68317: ST_TO_ADDR
// end ;
68318: LD_VAR 0 1
68322: RET
// export function PrepareHorse ( ) ; begin
68323: LD_INT 0
68325: PPUSH
// uc_side := 0 ;
68326: LD_ADDR_OWVAR 20
68330: PUSH
68331: LD_INT 0
68333: ST_TO_ADDR
// uc_nation := 0 ;
68334: LD_ADDR_OWVAR 21
68338: PUSH
68339: LD_INT 0
68341: ST_TO_ADDR
// hc_class := class_horse ;
68342: LD_ADDR_OWVAR 28
68346: PUSH
68347: LD_INT 21
68349: ST_TO_ADDR
// hc_gallery :=  ;
68350: LD_ADDR_OWVAR 33
68354: PUSH
68355: LD_STRING 
68357: ST_TO_ADDR
// end ;
68358: LD_VAR 0 1
68362: RET
// export function PrepareMastodont ( ) ; begin
68363: LD_INT 0
68365: PPUSH
// uc_side := 0 ;
68366: LD_ADDR_OWVAR 20
68370: PUSH
68371: LD_INT 0
68373: ST_TO_ADDR
// uc_nation := 0 ;
68374: LD_ADDR_OWVAR 21
68378: PUSH
68379: LD_INT 0
68381: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68382: LD_ADDR_OWVAR 37
68386: PUSH
68387: LD_INT 31
68389: ST_TO_ADDR
// vc_control := control_rider ;
68390: LD_ADDR_OWVAR 38
68394: PUSH
68395: LD_INT 4
68397: ST_TO_ADDR
// end ;
68398: LD_VAR 0 1
68402: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68403: LD_INT 0
68405: PPUSH
68406: PPUSH
68407: PPUSH
// uc_side = 0 ;
68408: LD_ADDR_OWVAR 20
68412: PUSH
68413: LD_INT 0
68415: ST_TO_ADDR
// uc_nation = 0 ;
68416: LD_ADDR_OWVAR 21
68420: PUSH
68421: LD_INT 0
68423: ST_TO_ADDR
// InitHc_All ( ) ;
68424: CALL_OW 584
// InitVc ;
68428: CALL_OW 20
// if mastodonts then
68432: LD_VAR 0 6
68436: IFFALSE 68503
// for i = 1 to mastodonts do
68438: LD_ADDR_VAR 0 11
68442: PUSH
68443: DOUBLE
68444: LD_INT 1
68446: DEC
68447: ST_TO_ADDR
68448: LD_VAR 0 6
68452: PUSH
68453: FOR_TO
68454: IFFALSE 68501
// begin vc_chassis := 31 ;
68456: LD_ADDR_OWVAR 37
68460: PUSH
68461: LD_INT 31
68463: ST_TO_ADDR
// vc_control := control_rider ;
68464: LD_ADDR_OWVAR 38
68468: PUSH
68469: LD_INT 4
68471: ST_TO_ADDR
// animal := CreateVehicle ;
68472: LD_ADDR_VAR 0 12
68476: PUSH
68477: CALL_OW 45
68481: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68482: LD_VAR 0 12
68486: PPUSH
68487: LD_VAR 0 8
68491: PPUSH
68492: LD_INT 0
68494: PPUSH
68495: CALL 70638 0 3
// end ;
68499: GO 68453
68501: POP
68502: POP
// if horses then
68503: LD_VAR 0 5
68507: IFFALSE 68574
// for i = 1 to horses do
68509: LD_ADDR_VAR 0 11
68513: PUSH
68514: DOUBLE
68515: LD_INT 1
68517: DEC
68518: ST_TO_ADDR
68519: LD_VAR 0 5
68523: PUSH
68524: FOR_TO
68525: IFFALSE 68572
// begin hc_class := 21 ;
68527: LD_ADDR_OWVAR 28
68531: PUSH
68532: LD_INT 21
68534: ST_TO_ADDR
// hc_gallery :=  ;
68535: LD_ADDR_OWVAR 33
68539: PUSH
68540: LD_STRING 
68542: ST_TO_ADDR
// animal := CreateHuman ;
68543: LD_ADDR_VAR 0 12
68547: PUSH
68548: CALL_OW 44
68552: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68553: LD_VAR 0 12
68557: PPUSH
68558: LD_VAR 0 8
68562: PPUSH
68563: LD_INT 0
68565: PPUSH
68566: CALL 70638 0 3
// end ;
68570: GO 68524
68572: POP
68573: POP
// if birds then
68574: LD_VAR 0 1
68578: IFFALSE 68645
// for i = 1 to birds do
68580: LD_ADDR_VAR 0 11
68584: PUSH
68585: DOUBLE
68586: LD_INT 1
68588: DEC
68589: ST_TO_ADDR
68590: LD_VAR 0 1
68594: PUSH
68595: FOR_TO
68596: IFFALSE 68643
// begin hc_class = 18 ;
68598: LD_ADDR_OWVAR 28
68602: PUSH
68603: LD_INT 18
68605: ST_TO_ADDR
// hc_gallery =  ;
68606: LD_ADDR_OWVAR 33
68610: PUSH
68611: LD_STRING 
68613: ST_TO_ADDR
// animal := CreateHuman ;
68614: LD_ADDR_VAR 0 12
68618: PUSH
68619: CALL_OW 44
68623: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68624: LD_VAR 0 12
68628: PPUSH
68629: LD_VAR 0 8
68633: PPUSH
68634: LD_INT 0
68636: PPUSH
68637: CALL 70638 0 3
// end ;
68641: GO 68595
68643: POP
68644: POP
// if tigers then
68645: LD_VAR 0 2
68649: IFFALSE 68733
// for i = 1 to tigers do
68651: LD_ADDR_VAR 0 11
68655: PUSH
68656: DOUBLE
68657: LD_INT 1
68659: DEC
68660: ST_TO_ADDR
68661: LD_VAR 0 2
68665: PUSH
68666: FOR_TO
68667: IFFALSE 68731
// begin hc_class = class_tiger ;
68669: LD_ADDR_OWVAR 28
68673: PUSH
68674: LD_INT 14
68676: ST_TO_ADDR
// hc_gallery =  ;
68677: LD_ADDR_OWVAR 33
68681: PUSH
68682: LD_STRING 
68684: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68685: LD_ADDR_OWVAR 35
68689: PUSH
68690: LD_INT 7
68692: NEG
68693: PPUSH
68694: LD_INT 7
68696: PPUSH
68697: CALL_OW 12
68701: ST_TO_ADDR
// animal := CreateHuman ;
68702: LD_ADDR_VAR 0 12
68706: PUSH
68707: CALL_OW 44
68711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68712: LD_VAR 0 12
68716: PPUSH
68717: LD_VAR 0 8
68721: PPUSH
68722: LD_INT 0
68724: PPUSH
68725: CALL 70638 0 3
// end ;
68729: GO 68666
68731: POP
68732: POP
// if apemans then
68733: LD_VAR 0 3
68737: IFFALSE 68860
// for i = 1 to apemans do
68739: LD_ADDR_VAR 0 11
68743: PUSH
68744: DOUBLE
68745: LD_INT 1
68747: DEC
68748: ST_TO_ADDR
68749: LD_VAR 0 3
68753: PUSH
68754: FOR_TO
68755: IFFALSE 68858
// begin hc_class = class_apeman ;
68757: LD_ADDR_OWVAR 28
68761: PUSH
68762: LD_INT 12
68764: ST_TO_ADDR
// hc_gallery =  ;
68765: LD_ADDR_OWVAR 33
68769: PUSH
68770: LD_STRING 
68772: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68773: LD_ADDR_OWVAR 35
68777: PUSH
68778: LD_INT 2
68780: NEG
68781: PPUSH
68782: LD_INT 2
68784: PPUSH
68785: CALL_OW 12
68789: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68790: LD_ADDR_OWVAR 31
68794: PUSH
68795: LD_INT 1
68797: PPUSH
68798: LD_INT 3
68800: PPUSH
68801: CALL_OW 12
68805: PUSH
68806: LD_INT 1
68808: PPUSH
68809: LD_INT 3
68811: PPUSH
68812: CALL_OW 12
68816: PUSH
68817: LD_INT 0
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: ST_TO_ADDR
// animal := CreateHuman ;
68829: LD_ADDR_VAR 0 12
68833: PUSH
68834: CALL_OW 44
68838: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68839: LD_VAR 0 12
68843: PPUSH
68844: LD_VAR 0 8
68848: PPUSH
68849: LD_INT 0
68851: PPUSH
68852: CALL 70638 0 3
// end ;
68856: GO 68754
68858: POP
68859: POP
// if enchidnas then
68860: LD_VAR 0 4
68864: IFFALSE 68931
// for i = 1 to enchidnas do
68866: LD_ADDR_VAR 0 11
68870: PUSH
68871: DOUBLE
68872: LD_INT 1
68874: DEC
68875: ST_TO_ADDR
68876: LD_VAR 0 4
68880: PUSH
68881: FOR_TO
68882: IFFALSE 68929
// begin hc_class = 13 ;
68884: LD_ADDR_OWVAR 28
68888: PUSH
68889: LD_INT 13
68891: ST_TO_ADDR
// hc_gallery =  ;
68892: LD_ADDR_OWVAR 33
68896: PUSH
68897: LD_STRING 
68899: ST_TO_ADDR
// animal := CreateHuman ;
68900: LD_ADDR_VAR 0 12
68904: PUSH
68905: CALL_OW 44
68909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68910: LD_VAR 0 12
68914: PPUSH
68915: LD_VAR 0 8
68919: PPUSH
68920: LD_INT 0
68922: PPUSH
68923: CALL 70638 0 3
// end ;
68927: GO 68881
68929: POP
68930: POP
// if fishes then
68931: LD_VAR 0 7
68935: IFFALSE 69002
// for i = 1 to fishes do
68937: LD_ADDR_VAR 0 11
68941: PUSH
68942: DOUBLE
68943: LD_INT 1
68945: DEC
68946: ST_TO_ADDR
68947: LD_VAR 0 7
68951: PUSH
68952: FOR_TO
68953: IFFALSE 69000
// begin hc_class = 20 ;
68955: LD_ADDR_OWVAR 28
68959: PUSH
68960: LD_INT 20
68962: ST_TO_ADDR
// hc_gallery =  ;
68963: LD_ADDR_OWVAR 33
68967: PUSH
68968: LD_STRING 
68970: ST_TO_ADDR
// animal := CreateHuman ;
68971: LD_ADDR_VAR 0 12
68975: PUSH
68976: CALL_OW 44
68980: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68981: LD_VAR 0 12
68985: PPUSH
68986: LD_VAR 0 9
68990: PPUSH
68991: LD_INT 0
68993: PPUSH
68994: CALL 70638 0 3
// end ;
68998: GO 68952
69000: POP
69001: POP
// end ;
69002: LD_VAR 0 10
69006: RET
// export function WantHeal ( sci , unit ) ; begin
69007: LD_INT 0
69009: PPUSH
// if GetTaskList ( sci ) > 0 then
69010: LD_VAR 0 1
69014: PPUSH
69015: CALL_OW 437
69019: PUSH
69020: LD_INT 0
69022: GREATER
69023: IFFALSE 69093
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69025: LD_VAR 0 1
69029: PPUSH
69030: CALL_OW 437
69034: PUSH
69035: LD_INT 1
69037: ARRAY
69038: PUSH
69039: LD_INT 1
69041: ARRAY
69042: PUSH
69043: LD_STRING l
69045: EQUAL
69046: PUSH
69047: LD_VAR 0 1
69051: PPUSH
69052: CALL_OW 437
69056: PUSH
69057: LD_INT 1
69059: ARRAY
69060: PUSH
69061: LD_INT 4
69063: ARRAY
69064: PUSH
69065: LD_VAR 0 2
69069: EQUAL
69070: AND
69071: IFFALSE 69083
// result := true else
69073: LD_ADDR_VAR 0 3
69077: PUSH
69078: LD_INT 1
69080: ST_TO_ADDR
69081: GO 69091
// result := false ;
69083: LD_ADDR_VAR 0 3
69087: PUSH
69088: LD_INT 0
69090: ST_TO_ADDR
// end else
69091: GO 69101
// result := false ;
69093: LD_ADDR_VAR 0 3
69097: PUSH
69098: LD_INT 0
69100: ST_TO_ADDR
// end ;
69101: LD_VAR 0 3
69105: RET
// export function HealTarget ( sci ) ; begin
69106: LD_INT 0
69108: PPUSH
// if not sci then
69109: LD_VAR 0 1
69113: NOT
69114: IFFALSE 69118
// exit ;
69116: GO 69183
// result := 0 ;
69118: LD_ADDR_VAR 0 2
69122: PUSH
69123: LD_INT 0
69125: ST_TO_ADDR
// if GetTaskList ( sci ) then
69126: LD_VAR 0 1
69130: PPUSH
69131: CALL_OW 437
69135: IFFALSE 69183
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69137: LD_VAR 0 1
69141: PPUSH
69142: CALL_OW 437
69146: PUSH
69147: LD_INT 1
69149: ARRAY
69150: PUSH
69151: LD_INT 1
69153: ARRAY
69154: PUSH
69155: LD_STRING l
69157: EQUAL
69158: IFFALSE 69183
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69160: LD_ADDR_VAR 0 2
69164: PUSH
69165: LD_VAR 0 1
69169: PPUSH
69170: CALL_OW 437
69174: PUSH
69175: LD_INT 1
69177: ARRAY
69178: PUSH
69179: LD_INT 4
69181: ARRAY
69182: ST_TO_ADDR
// end ;
69183: LD_VAR 0 2
69187: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69188: LD_INT 0
69190: PPUSH
69191: PPUSH
69192: PPUSH
69193: PPUSH
// if not base_units then
69194: LD_VAR 0 1
69198: NOT
69199: IFFALSE 69203
// exit ;
69201: GO 69290
// result := false ;
69203: LD_ADDR_VAR 0 2
69207: PUSH
69208: LD_INT 0
69210: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69211: LD_ADDR_VAR 0 5
69215: PUSH
69216: LD_VAR 0 1
69220: PPUSH
69221: LD_INT 21
69223: PUSH
69224: LD_INT 3
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PPUSH
69231: CALL_OW 72
69235: ST_TO_ADDR
// if not tmp then
69236: LD_VAR 0 5
69240: NOT
69241: IFFALSE 69245
// exit ;
69243: GO 69290
// for i in tmp do
69245: LD_ADDR_VAR 0 3
69249: PUSH
69250: LD_VAR 0 5
69254: PUSH
69255: FOR_IN
69256: IFFALSE 69288
// begin result := EnemyInRange ( i , 22 ) ;
69258: LD_ADDR_VAR 0 2
69262: PUSH
69263: LD_VAR 0 3
69267: PPUSH
69268: LD_INT 22
69270: PPUSH
69271: CALL 66903 0 2
69275: ST_TO_ADDR
// if result then
69276: LD_VAR 0 2
69280: IFFALSE 69286
// exit ;
69282: POP
69283: POP
69284: GO 69290
// end ;
69286: GO 69255
69288: POP
69289: POP
// end ;
69290: LD_VAR 0 2
69294: RET
// export function FilterByTag ( units , tag ) ; begin
69295: LD_INT 0
69297: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69298: LD_ADDR_VAR 0 3
69302: PUSH
69303: LD_VAR 0 1
69307: PPUSH
69308: LD_INT 120
69310: PUSH
69311: LD_VAR 0 2
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PPUSH
69320: CALL_OW 72
69324: ST_TO_ADDR
// end ;
69325: LD_VAR 0 3
69329: RET
// export function IsDriver ( un ) ; begin
69330: LD_INT 0
69332: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69333: LD_ADDR_VAR 0 2
69337: PUSH
69338: LD_VAR 0 1
69342: PUSH
69343: LD_INT 55
69345: PUSH
69346: EMPTY
69347: LIST
69348: PPUSH
69349: CALL_OW 69
69353: IN
69354: ST_TO_ADDR
// end ;
69355: LD_VAR 0 2
69359: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69360: LD_INT 0
69362: PPUSH
69363: PPUSH
// list := [ ] ;
69364: LD_ADDR_VAR 0 5
69368: PUSH
69369: EMPTY
69370: ST_TO_ADDR
// case d of 0 :
69371: LD_VAR 0 3
69375: PUSH
69376: LD_INT 0
69378: DOUBLE
69379: EQUAL
69380: IFTRUE 69384
69382: GO 69517
69384: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69385: LD_ADDR_VAR 0 5
69389: PUSH
69390: LD_VAR 0 1
69394: PUSH
69395: LD_INT 4
69397: MINUS
69398: PUSH
69399: LD_VAR 0 2
69403: PUSH
69404: LD_INT 4
69406: MINUS
69407: PUSH
69408: LD_INT 2
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: LIST
69415: PUSH
69416: LD_VAR 0 1
69420: PUSH
69421: LD_INT 3
69423: MINUS
69424: PUSH
69425: LD_VAR 0 2
69429: PUSH
69430: LD_INT 1
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: LIST
69437: PUSH
69438: LD_VAR 0 1
69442: PUSH
69443: LD_INT 4
69445: PLUS
69446: PUSH
69447: LD_VAR 0 2
69451: PUSH
69452: LD_INT 4
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: LIST
69459: PUSH
69460: LD_VAR 0 1
69464: PUSH
69465: LD_INT 3
69467: PLUS
69468: PUSH
69469: LD_VAR 0 2
69473: PUSH
69474: LD_INT 3
69476: PLUS
69477: PUSH
69478: LD_INT 5
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: LIST
69485: PUSH
69486: LD_VAR 0 1
69490: PUSH
69491: LD_VAR 0 2
69495: PUSH
69496: LD_INT 4
69498: PLUS
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: ST_TO_ADDR
// end ; 1 :
69515: GO 70215
69517: LD_INT 1
69519: DOUBLE
69520: EQUAL
69521: IFTRUE 69525
69523: GO 69658
69525: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69526: LD_ADDR_VAR 0 5
69530: PUSH
69531: LD_VAR 0 1
69535: PUSH
69536: LD_VAR 0 2
69540: PUSH
69541: LD_INT 4
69543: MINUS
69544: PUSH
69545: LD_INT 3
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: LIST
69552: PUSH
69553: LD_VAR 0 1
69557: PUSH
69558: LD_INT 3
69560: MINUS
69561: PUSH
69562: LD_VAR 0 2
69566: PUSH
69567: LD_INT 3
69569: MINUS
69570: PUSH
69571: LD_INT 2
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: LIST
69578: PUSH
69579: LD_VAR 0 1
69583: PUSH
69584: LD_INT 4
69586: MINUS
69587: PUSH
69588: LD_VAR 0 2
69592: PUSH
69593: LD_INT 1
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: LIST
69600: PUSH
69601: LD_VAR 0 1
69605: PUSH
69606: LD_VAR 0 2
69610: PUSH
69611: LD_INT 3
69613: PLUS
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: LIST
69622: PUSH
69623: LD_VAR 0 1
69627: PUSH
69628: LD_INT 4
69630: PLUS
69631: PUSH
69632: LD_VAR 0 2
69636: PUSH
69637: LD_INT 4
69639: PLUS
69640: PUSH
69641: LD_INT 5
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: LIST
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: ST_TO_ADDR
// end ; 2 :
69656: GO 70215
69658: LD_INT 2
69660: DOUBLE
69661: EQUAL
69662: IFTRUE 69666
69664: GO 69795
69666: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69667: LD_ADDR_VAR 0 5
69671: PUSH
69672: LD_VAR 0 1
69676: PUSH
69677: LD_VAR 0 2
69681: PUSH
69682: LD_INT 3
69684: MINUS
69685: PUSH
69686: LD_INT 3
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: PUSH
69694: LD_VAR 0 1
69698: PUSH
69699: LD_INT 4
69701: PLUS
69702: PUSH
69703: LD_VAR 0 2
69707: PUSH
69708: LD_INT 4
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: LIST
69715: PUSH
69716: LD_VAR 0 1
69720: PUSH
69721: LD_VAR 0 2
69725: PUSH
69726: LD_INT 4
69728: PLUS
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: LIST
69737: PUSH
69738: LD_VAR 0 1
69742: PUSH
69743: LD_INT 3
69745: MINUS
69746: PUSH
69747: LD_VAR 0 2
69751: PUSH
69752: LD_INT 1
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: LIST
69759: PUSH
69760: LD_VAR 0 1
69764: PUSH
69765: LD_INT 4
69767: MINUS
69768: PUSH
69769: LD_VAR 0 2
69773: PUSH
69774: LD_INT 4
69776: MINUS
69777: PUSH
69778: LD_INT 2
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: LIST
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: ST_TO_ADDR
// end ; 3 :
69793: GO 70215
69795: LD_INT 3
69797: DOUBLE
69798: EQUAL
69799: IFTRUE 69803
69801: GO 69936
69803: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69804: LD_ADDR_VAR 0 5
69808: PUSH
69809: LD_VAR 0 1
69813: PUSH
69814: LD_INT 3
69816: PLUS
69817: PUSH
69818: LD_VAR 0 2
69822: PUSH
69823: LD_INT 4
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: LIST
69830: PUSH
69831: LD_VAR 0 1
69835: PUSH
69836: LD_INT 4
69838: PLUS
69839: PUSH
69840: LD_VAR 0 2
69844: PUSH
69845: LD_INT 4
69847: PLUS
69848: PUSH
69849: LD_INT 5
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: LIST
69856: PUSH
69857: LD_VAR 0 1
69861: PUSH
69862: LD_INT 4
69864: MINUS
69865: PUSH
69866: LD_VAR 0 2
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: LIST
69878: PUSH
69879: LD_VAR 0 1
69883: PUSH
69884: LD_VAR 0 2
69888: PUSH
69889: LD_INT 4
69891: MINUS
69892: PUSH
69893: LD_INT 3
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: LIST
69900: PUSH
69901: LD_VAR 0 1
69905: PUSH
69906: LD_INT 3
69908: MINUS
69909: PUSH
69910: LD_VAR 0 2
69914: PUSH
69915: LD_INT 3
69917: MINUS
69918: PUSH
69919: LD_INT 2
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: LIST
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: ST_TO_ADDR
// end ; 4 :
69934: GO 70215
69936: LD_INT 4
69938: DOUBLE
69939: EQUAL
69940: IFTRUE 69944
69942: GO 70077
69944: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69945: LD_ADDR_VAR 0 5
69949: PUSH
69950: LD_VAR 0 1
69954: PUSH
69955: LD_VAR 0 2
69959: PUSH
69960: LD_INT 4
69962: PLUS
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: LIST
69971: PUSH
69972: LD_VAR 0 1
69976: PUSH
69977: LD_INT 3
69979: PLUS
69980: PUSH
69981: LD_VAR 0 2
69985: PUSH
69986: LD_INT 3
69988: PLUS
69989: PUSH
69990: LD_INT 5
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: LIST
69997: PUSH
69998: LD_VAR 0 1
70002: PUSH
70003: LD_INT 4
70005: PLUS
70006: PUSH
70007: LD_VAR 0 2
70011: PUSH
70012: LD_INT 4
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: LIST
70019: PUSH
70020: LD_VAR 0 1
70024: PUSH
70025: LD_VAR 0 2
70029: PUSH
70030: LD_INT 3
70032: MINUS
70033: PUSH
70034: LD_INT 3
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: LIST
70041: PUSH
70042: LD_VAR 0 1
70046: PUSH
70047: LD_INT 4
70049: MINUS
70050: PUSH
70051: LD_VAR 0 2
70055: PUSH
70056: LD_INT 4
70058: MINUS
70059: PUSH
70060: LD_INT 2
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: LIST
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: ST_TO_ADDR
// end ; 5 :
70075: GO 70215
70077: LD_INT 5
70079: DOUBLE
70080: EQUAL
70081: IFTRUE 70085
70083: GO 70214
70085: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70086: LD_ADDR_VAR 0 5
70090: PUSH
70091: LD_VAR 0 1
70095: PUSH
70096: LD_INT 4
70098: MINUS
70099: PUSH
70100: LD_VAR 0 2
70104: PUSH
70105: LD_INT 1
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: LIST
70112: PUSH
70113: LD_VAR 0 1
70117: PUSH
70118: LD_VAR 0 2
70122: PUSH
70123: LD_INT 4
70125: MINUS
70126: PUSH
70127: LD_INT 3
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: LIST
70134: PUSH
70135: LD_VAR 0 1
70139: PUSH
70140: LD_INT 4
70142: PLUS
70143: PUSH
70144: LD_VAR 0 2
70148: PUSH
70149: LD_INT 4
70151: PLUS
70152: PUSH
70153: LD_INT 5
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: PUSH
70161: LD_VAR 0 1
70165: PUSH
70166: LD_INT 3
70168: PLUS
70169: PUSH
70170: LD_VAR 0 2
70174: PUSH
70175: LD_INT 4
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: LIST
70182: PUSH
70183: LD_VAR 0 1
70187: PUSH
70188: LD_VAR 0 2
70192: PUSH
70193: LD_INT 3
70195: PLUS
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: LIST
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: ST_TO_ADDR
// end ; end ;
70212: GO 70215
70214: POP
// result := list ;
70215: LD_ADDR_VAR 0 4
70219: PUSH
70220: LD_VAR 0 5
70224: ST_TO_ADDR
// end ;
70225: LD_VAR 0 4
70229: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70230: LD_INT 0
70232: PPUSH
70233: PPUSH
70234: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70235: LD_VAR 0 1
70239: NOT
70240: PUSH
70241: LD_VAR 0 2
70245: PUSH
70246: LD_INT 1
70248: PUSH
70249: LD_INT 2
70251: PUSH
70252: LD_INT 3
70254: PUSH
70255: LD_INT 4
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: IN
70264: NOT
70265: OR
70266: IFFALSE 70270
// exit ;
70268: GO 70362
// tmp := [ ] ;
70270: LD_ADDR_VAR 0 5
70274: PUSH
70275: EMPTY
70276: ST_TO_ADDR
// for i in units do
70277: LD_ADDR_VAR 0 4
70281: PUSH
70282: LD_VAR 0 1
70286: PUSH
70287: FOR_IN
70288: IFFALSE 70331
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70290: LD_ADDR_VAR 0 5
70294: PUSH
70295: LD_VAR 0 5
70299: PPUSH
70300: LD_VAR 0 5
70304: PUSH
70305: LD_INT 1
70307: PLUS
70308: PPUSH
70309: LD_VAR 0 4
70313: PPUSH
70314: LD_VAR 0 2
70318: PPUSH
70319: CALL_OW 259
70323: PPUSH
70324: CALL_OW 2
70328: ST_TO_ADDR
70329: GO 70287
70331: POP
70332: POP
// if not tmp then
70333: LD_VAR 0 5
70337: NOT
70338: IFFALSE 70342
// exit ;
70340: GO 70362
// result := SortListByListDesc ( units , tmp ) ;
70342: LD_ADDR_VAR 0 3
70346: PUSH
70347: LD_VAR 0 1
70351: PPUSH
70352: LD_VAR 0 5
70356: PPUSH
70357: CALL_OW 77
70361: ST_TO_ADDR
// end ;
70362: LD_VAR 0 3
70366: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70367: LD_INT 0
70369: PPUSH
70370: PPUSH
70371: PPUSH
// result := false ;
70372: LD_ADDR_VAR 0 3
70376: PUSH
70377: LD_INT 0
70379: ST_TO_ADDR
// x := GetX ( building ) ;
70380: LD_ADDR_VAR 0 4
70384: PUSH
70385: LD_VAR 0 2
70389: PPUSH
70390: CALL_OW 250
70394: ST_TO_ADDR
// y := GetY ( building ) ;
70395: LD_ADDR_VAR 0 5
70399: PUSH
70400: LD_VAR 0 2
70404: PPUSH
70405: CALL_OW 251
70409: ST_TO_ADDR
// if not building or not x or not y then
70410: LD_VAR 0 2
70414: NOT
70415: PUSH
70416: LD_VAR 0 4
70420: NOT
70421: OR
70422: PUSH
70423: LD_VAR 0 5
70427: NOT
70428: OR
70429: IFFALSE 70433
// exit ;
70431: GO 70525
// if GetTaskList ( unit ) then
70433: LD_VAR 0 1
70437: PPUSH
70438: CALL_OW 437
70442: IFFALSE 70525
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70444: LD_STRING e
70446: PUSH
70447: LD_VAR 0 1
70451: PPUSH
70452: CALL_OW 437
70456: PUSH
70457: LD_INT 1
70459: ARRAY
70460: PUSH
70461: LD_INT 1
70463: ARRAY
70464: EQUAL
70465: PUSH
70466: LD_VAR 0 4
70470: PUSH
70471: LD_VAR 0 1
70475: PPUSH
70476: CALL_OW 437
70480: PUSH
70481: LD_INT 1
70483: ARRAY
70484: PUSH
70485: LD_INT 2
70487: ARRAY
70488: EQUAL
70489: AND
70490: PUSH
70491: LD_VAR 0 5
70495: PUSH
70496: LD_VAR 0 1
70500: PPUSH
70501: CALL_OW 437
70505: PUSH
70506: LD_INT 1
70508: ARRAY
70509: PUSH
70510: LD_INT 3
70512: ARRAY
70513: EQUAL
70514: AND
70515: IFFALSE 70525
// result := true end ;
70517: LD_ADDR_VAR 0 3
70521: PUSH
70522: LD_INT 1
70524: ST_TO_ADDR
// end ;
70525: LD_VAR 0 3
70529: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70530: LD_INT 0
70532: PPUSH
// result := false ;
70533: LD_ADDR_VAR 0 4
70537: PUSH
70538: LD_INT 0
70540: ST_TO_ADDR
// if GetTaskList ( unit ) then
70541: LD_VAR 0 1
70545: PPUSH
70546: CALL_OW 437
70550: IFFALSE 70633
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70552: LD_STRING M
70554: PUSH
70555: LD_VAR 0 1
70559: PPUSH
70560: CALL_OW 437
70564: PUSH
70565: LD_INT 1
70567: ARRAY
70568: PUSH
70569: LD_INT 1
70571: ARRAY
70572: EQUAL
70573: PUSH
70574: LD_VAR 0 2
70578: PUSH
70579: LD_VAR 0 1
70583: PPUSH
70584: CALL_OW 437
70588: PUSH
70589: LD_INT 1
70591: ARRAY
70592: PUSH
70593: LD_INT 2
70595: ARRAY
70596: EQUAL
70597: AND
70598: PUSH
70599: LD_VAR 0 3
70603: PUSH
70604: LD_VAR 0 1
70608: PPUSH
70609: CALL_OW 437
70613: PUSH
70614: LD_INT 1
70616: ARRAY
70617: PUSH
70618: LD_INT 3
70620: ARRAY
70621: EQUAL
70622: AND
70623: IFFALSE 70633
// result := true ;
70625: LD_ADDR_VAR 0 4
70629: PUSH
70630: LD_INT 1
70632: ST_TO_ADDR
// end ; end ;
70633: LD_VAR 0 4
70637: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70638: LD_INT 0
70640: PPUSH
70641: PPUSH
70642: PPUSH
70643: PPUSH
// if not unit or not area then
70644: LD_VAR 0 1
70648: NOT
70649: PUSH
70650: LD_VAR 0 2
70654: NOT
70655: OR
70656: IFFALSE 70660
// exit ;
70658: GO 70824
// tmp := AreaToList ( area , i ) ;
70660: LD_ADDR_VAR 0 6
70664: PUSH
70665: LD_VAR 0 2
70669: PPUSH
70670: LD_VAR 0 5
70674: PPUSH
70675: CALL_OW 517
70679: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70680: LD_ADDR_VAR 0 5
70684: PUSH
70685: DOUBLE
70686: LD_INT 1
70688: DEC
70689: ST_TO_ADDR
70690: LD_VAR 0 6
70694: PUSH
70695: LD_INT 1
70697: ARRAY
70698: PUSH
70699: FOR_TO
70700: IFFALSE 70822
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70702: LD_ADDR_VAR 0 7
70706: PUSH
70707: LD_VAR 0 6
70711: PUSH
70712: LD_INT 1
70714: ARRAY
70715: PUSH
70716: LD_VAR 0 5
70720: ARRAY
70721: PUSH
70722: LD_VAR 0 6
70726: PUSH
70727: LD_INT 2
70729: ARRAY
70730: PUSH
70731: LD_VAR 0 5
70735: ARRAY
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70741: LD_VAR 0 7
70745: PUSH
70746: LD_INT 1
70748: ARRAY
70749: PPUSH
70750: LD_VAR 0 7
70754: PUSH
70755: LD_INT 2
70757: ARRAY
70758: PPUSH
70759: CALL_OW 428
70763: PUSH
70764: LD_INT 0
70766: EQUAL
70767: IFFALSE 70820
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70769: LD_VAR 0 1
70773: PPUSH
70774: LD_VAR 0 7
70778: PUSH
70779: LD_INT 1
70781: ARRAY
70782: PPUSH
70783: LD_VAR 0 7
70787: PUSH
70788: LD_INT 2
70790: ARRAY
70791: PPUSH
70792: LD_VAR 0 3
70796: PPUSH
70797: CALL_OW 48
// result := IsPlaced ( unit ) ;
70801: LD_ADDR_VAR 0 4
70805: PUSH
70806: LD_VAR 0 1
70810: PPUSH
70811: CALL_OW 305
70815: ST_TO_ADDR
// exit ;
70816: POP
70817: POP
70818: GO 70824
// end ; end ;
70820: GO 70699
70822: POP
70823: POP
// end ;
70824: LD_VAR 0 4
70828: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70829: LD_INT 0
70831: PPUSH
70832: PPUSH
70833: PPUSH
// if not side or side > 8 then
70834: LD_VAR 0 1
70838: NOT
70839: PUSH
70840: LD_VAR 0 1
70844: PUSH
70845: LD_INT 8
70847: GREATER
70848: OR
70849: IFFALSE 70853
// exit ;
70851: GO 71040
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70853: LD_ADDR_VAR 0 4
70857: PUSH
70858: LD_INT 22
70860: PUSH
70861: LD_VAR 0 1
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 21
70872: PUSH
70873: LD_INT 3
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PPUSH
70884: CALL_OW 69
70888: ST_TO_ADDR
// if not tmp then
70889: LD_VAR 0 4
70893: NOT
70894: IFFALSE 70898
// exit ;
70896: GO 71040
// enable_addtolog := true ;
70898: LD_ADDR_OWVAR 81
70902: PUSH
70903: LD_INT 1
70905: ST_TO_ADDR
// AddToLog ( [ ) ;
70906: LD_STRING [
70908: PPUSH
70909: CALL_OW 561
// for i in tmp do
70913: LD_ADDR_VAR 0 3
70917: PUSH
70918: LD_VAR 0 4
70922: PUSH
70923: FOR_IN
70924: IFFALSE 71031
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70926: LD_STRING [
70928: PUSH
70929: LD_VAR 0 3
70933: PPUSH
70934: CALL_OW 266
70938: STR
70939: PUSH
70940: LD_STRING , 
70942: STR
70943: PUSH
70944: LD_VAR 0 3
70948: PPUSH
70949: CALL_OW 250
70953: STR
70954: PUSH
70955: LD_STRING , 
70957: STR
70958: PUSH
70959: LD_VAR 0 3
70963: PPUSH
70964: CALL_OW 251
70968: STR
70969: PUSH
70970: LD_STRING , 
70972: STR
70973: PUSH
70974: LD_VAR 0 3
70978: PPUSH
70979: CALL_OW 254
70983: STR
70984: PUSH
70985: LD_STRING , 
70987: STR
70988: PUSH
70989: LD_VAR 0 3
70993: PPUSH
70994: LD_INT 1
70996: PPUSH
70997: CALL_OW 268
71001: STR
71002: PUSH
71003: LD_STRING , 
71005: STR
71006: PUSH
71007: LD_VAR 0 3
71011: PPUSH
71012: LD_INT 2
71014: PPUSH
71015: CALL_OW 268
71019: STR
71020: PUSH
71021: LD_STRING ],
71023: STR
71024: PPUSH
71025: CALL_OW 561
// end ;
71029: GO 70923
71031: POP
71032: POP
// AddToLog ( ]; ) ;
71033: LD_STRING ];
71035: PPUSH
71036: CALL_OW 561
// end ;
71040: LD_VAR 0 2
71044: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71045: LD_INT 0
71047: PPUSH
71048: PPUSH
71049: PPUSH
71050: PPUSH
71051: PPUSH
// if not area or not rate or not max then
71052: LD_VAR 0 1
71056: NOT
71057: PUSH
71058: LD_VAR 0 2
71062: NOT
71063: OR
71064: PUSH
71065: LD_VAR 0 4
71069: NOT
71070: OR
71071: IFFALSE 71075
// exit ;
71073: GO 71264
// while 1 do
71075: LD_INT 1
71077: IFFALSE 71264
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71079: LD_ADDR_VAR 0 9
71083: PUSH
71084: LD_VAR 0 1
71088: PPUSH
71089: LD_INT 1
71091: PPUSH
71092: CALL_OW 287
71096: PUSH
71097: LD_INT 10
71099: MUL
71100: ST_TO_ADDR
// r := rate / 10 ;
71101: LD_ADDR_VAR 0 7
71105: PUSH
71106: LD_VAR 0 2
71110: PUSH
71111: LD_INT 10
71113: DIVREAL
71114: ST_TO_ADDR
// time := 1 1$00 ;
71115: LD_ADDR_VAR 0 8
71119: PUSH
71120: LD_INT 2100
71122: ST_TO_ADDR
// if amount < min then
71123: LD_VAR 0 9
71127: PUSH
71128: LD_VAR 0 3
71132: LESS
71133: IFFALSE 71151
// r := r * 2 else
71135: LD_ADDR_VAR 0 7
71139: PUSH
71140: LD_VAR 0 7
71144: PUSH
71145: LD_INT 2
71147: MUL
71148: ST_TO_ADDR
71149: GO 71177
// if amount > max then
71151: LD_VAR 0 9
71155: PUSH
71156: LD_VAR 0 4
71160: GREATER
71161: IFFALSE 71177
// r := r / 2 ;
71163: LD_ADDR_VAR 0 7
71167: PUSH
71168: LD_VAR 0 7
71172: PUSH
71173: LD_INT 2
71175: DIVREAL
71176: ST_TO_ADDR
// time := time / r ;
71177: LD_ADDR_VAR 0 8
71181: PUSH
71182: LD_VAR 0 8
71186: PUSH
71187: LD_VAR 0 7
71191: DIVREAL
71192: ST_TO_ADDR
// if time < 0 then
71193: LD_VAR 0 8
71197: PUSH
71198: LD_INT 0
71200: LESS
71201: IFFALSE 71218
// time := time * - 1 ;
71203: LD_ADDR_VAR 0 8
71207: PUSH
71208: LD_VAR 0 8
71212: PUSH
71213: LD_INT 1
71215: NEG
71216: MUL
71217: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71218: LD_VAR 0 8
71222: PUSH
71223: LD_INT 35
71225: PPUSH
71226: LD_INT 875
71228: PPUSH
71229: CALL_OW 12
71233: PLUS
71234: PPUSH
71235: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71239: LD_INT 1
71241: PPUSH
71242: LD_INT 5
71244: PPUSH
71245: CALL_OW 12
71249: PPUSH
71250: LD_VAR 0 1
71254: PPUSH
71255: LD_INT 1
71257: PPUSH
71258: CALL_OW 55
// end ;
71262: GO 71075
// end ;
71264: LD_VAR 0 5
71268: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71269: LD_INT 0
71271: PPUSH
71272: PPUSH
71273: PPUSH
71274: PPUSH
71275: PPUSH
71276: PPUSH
71277: PPUSH
71278: PPUSH
// if not turrets or not factories then
71279: LD_VAR 0 1
71283: NOT
71284: PUSH
71285: LD_VAR 0 2
71289: NOT
71290: OR
71291: IFFALSE 71295
// exit ;
71293: GO 71602
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71295: LD_ADDR_VAR 0 10
71299: PUSH
71300: LD_INT 5
71302: PUSH
71303: LD_INT 6
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 2
71312: PUSH
71313: LD_INT 4
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 3
71322: PUSH
71323: LD_INT 5
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 24
71337: PUSH
71338: LD_INT 25
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 23
71347: PUSH
71348: LD_INT 27
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 42
71361: PUSH
71362: LD_INT 43
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 44
71371: PUSH
71372: LD_INT 46
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 45
71381: PUSH
71382: LD_INT 47
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: LIST
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: ST_TO_ADDR
// result := [ ] ;
71399: LD_ADDR_VAR 0 3
71403: PUSH
71404: EMPTY
71405: ST_TO_ADDR
// for i in turrets do
71406: LD_ADDR_VAR 0 4
71410: PUSH
71411: LD_VAR 0 1
71415: PUSH
71416: FOR_IN
71417: IFFALSE 71600
// begin nat := GetNation ( i ) ;
71419: LD_ADDR_VAR 0 7
71423: PUSH
71424: LD_VAR 0 4
71428: PPUSH
71429: CALL_OW 248
71433: ST_TO_ADDR
// weapon := 0 ;
71434: LD_ADDR_VAR 0 8
71438: PUSH
71439: LD_INT 0
71441: ST_TO_ADDR
// if not nat then
71442: LD_VAR 0 7
71446: NOT
71447: IFFALSE 71451
// continue ;
71449: GO 71416
// for j in list [ nat ] do
71451: LD_ADDR_VAR 0 5
71455: PUSH
71456: LD_VAR 0 10
71460: PUSH
71461: LD_VAR 0 7
71465: ARRAY
71466: PUSH
71467: FOR_IN
71468: IFFALSE 71509
// if GetBWeapon ( i ) = j [ 1 ] then
71470: LD_VAR 0 4
71474: PPUSH
71475: CALL_OW 269
71479: PUSH
71480: LD_VAR 0 5
71484: PUSH
71485: LD_INT 1
71487: ARRAY
71488: EQUAL
71489: IFFALSE 71507
// begin weapon := j [ 2 ] ;
71491: LD_ADDR_VAR 0 8
71495: PUSH
71496: LD_VAR 0 5
71500: PUSH
71501: LD_INT 2
71503: ARRAY
71504: ST_TO_ADDR
// break ;
71505: GO 71509
// end ;
71507: GO 71467
71509: POP
71510: POP
// if not weapon then
71511: LD_VAR 0 8
71515: NOT
71516: IFFALSE 71520
// continue ;
71518: GO 71416
// for k in factories do
71520: LD_ADDR_VAR 0 6
71524: PUSH
71525: LD_VAR 0 2
71529: PUSH
71530: FOR_IN
71531: IFFALSE 71596
// begin weapons := AvailableWeaponList ( k ) ;
71533: LD_ADDR_VAR 0 9
71537: PUSH
71538: LD_VAR 0 6
71542: PPUSH
71543: CALL_OW 478
71547: ST_TO_ADDR
// if not weapons then
71548: LD_VAR 0 9
71552: NOT
71553: IFFALSE 71557
// continue ;
71555: GO 71530
// if weapon in weapons then
71557: LD_VAR 0 8
71561: PUSH
71562: LD_VAR 0 9
71566: IN
71567: IFFALSE 71594
// begin result := [ i , weapon ] ;
71569: LD_ADDR_VAR 0 3
71573: PUSH
71574: LD_VAR 0 4
71578: PUSH
71579: LD_VAR 0 8
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: ST_TO_ADDR
// exit ;
71588: POP
71589: POP
71590: POP
71591: POP
71592: GO 71602
// end ; end ;
71594: GO 71530
71596: POP
71597: POP
// end ;
71598: GO 71416
71600: POP
71601: POP
// end ;
71602: LD_VAR 0 3
71606: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71607: LD_INT 0
71609: PPUSH
// if not side or side > 8 then
71610: LD_VAR 0 3
71614: NOT
71615: PUSH
71616: LD_VAR 0 3
71620: PUSH
71621: LD_INT 8
71623: GREATER
71624: OR
71625: IFFALSE 71629
// exit ;
71627: GO 71688
// if not range then
71629: LD_VAR 0 4
71633: NOT
71634: IFFALSE 71645
// range := - 12 ;
71636: LD_ADDR_VAR 0 4
71640: PUSH
71641: LD_INT 12
71643: NEG
71644: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71645: LD_VAR 0 1
71649: PPUSH
71650: LD_VAR 0 2
71654: PPUSH
71655: LD_VAR 0 3
71659: PPUSH
71660: LD_VAR 0 4
71664: PPUSH
71665: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71669: LD_VAR 0 1
71673: PPUSH
71674: LD_VAR 0 2
71678: PPUSH
71679: LD_VAR 0 3
71683: PPUSH
71684: CALL_OW 331
// end ;
71688: LD_VAR 0 5
71692: RET
// export function Video ( mode ) ; begin
71693: LD_INT 0
71695: PPUSH
// ingame_video = mode ;
71696: LD_ADDR_OWVAR 52
71700: PUSH
71701: LD_VAR 0 1
71705: ST_TO_ADDR
// interface_hidden = mode ;
71706: LD_ADDR_OWVAR 54
71710: PUSH
71711: LD_VAR 0 1
71715: ST_TO_ADDR
// end ;
71716: LD_VAR 0 2
71720: RET
// export function Join ( array , element ) ; begin
71721: LD_INT 0
71723: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71724: LD_ADDR_VAR 0 3
71728: PUSH
71729: LD_VAR 0 1
71733: PPUSH
71734: LD_VAR 0 1
71738: PUSH
71739: LD_INT 1
71741: PLUS
71742: PPUSH
71743: LD_VAR 0 2
71747: PPUSH
71748: CALL_OW 1
71752: ST_TO_ADDR
// end ;
71753: LD_VAR 0 3
71757: RET
// export function JoinUnion ( array , element ) ; begin
71758: LD_INT 0
71760: PPUSH
// result := array union element ;
71761: LD_ADDR_VAR 0 3
71765: PUSH
71766: LD_VAR 0 1
71770: PUSH
71771: LD_VAR 0 2
71775: UNION
71776: ST_TO_ADDR
// end ;
71777: LD_VAR 0 3
71781: RET
// export function GetBehemoths ( side ) ; begin
71782: LD_INT 0
71784: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71785: LD_ADDR_VAR 0 2
71789: PUSH
71790: LD_INT 22
71792: PUSH
71793: LD_VAR 0 1
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 31
71804: PUSH
71805: LD_INT 25
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PPUSH
71816: CALL_OW 69
71820: ST_TO_ADDR
// end ;
71821: LD_VAR 0 2
71825: RET
// export function Shuffle ( array ) ; var i , index ; begin
71826: LD_INT 0
71828: PPUSH
71829: PPUSH
71830: PPUSH
// result := [ ] ;
71831: LD_ADDR_VAR 0 2
71835: PUSH
71836: EMPTY
71837: ST_TO_ADDR
// if not array then
71838: LD_VAR 0 1
71842: NOT
71843: IFFALSE 71847
// exit ;
71845: GO 71946
// Randomize ;
71847: CALL_OW 10
// for i = array downto 1 do
71851: LD_ADDR_VAR 0 3
71855: PUSH
71856: DOUBLE
71857: LD_VAR 0 1
71861: INC
71862: ST_TO_ADDR
71863: LD_INT 1
71865: PUSH
71866: FOR_DOWNTO
71867: IFFALSE 71944
// begin index := rand ( 1 , array ) ;
71869: LD_ADDR_VAR 0 4
71873: PUSH
71874: LD_INT 1
71876: PPUSH
71877: LD_VAR 0 1
71881: PPUSH
71882: CALL_OW 12
71886: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71887: LD_ADDR_VAR 0 2
71891: PUSH
71892: LD_VAR 0 2
71896: PPUSH
71897: LD_VAR 0 2
71901: PUSH
71902: LD_INT 1
71904: PLUS
71905: PPUSH
71906: LD_VAR 0 1
71910: PUSH
71911: LD_VAR 0 4
71915: ARRAY
71916: PPUSH
71917: CALL_OW 2
71921: ST_TO_ADDR
// array := Delete ( array , index ) ;
71922: LD_ADDR_VAR 0 1
71926: PUSH
71927: LD_VAR 0 1
71931: PPUSH
71932: LD_VAR 0 4
71936: PPUSH
71937: CALL_OW 3
71941: ST_TO_ADDR
// end ;
71942: GO 71866
71944: POP
71945: POP
// end ;
71946: LD_VAR 0 2
71950: RET
// export function GetBaseMaterials ( base ) ; begin
71951: LD_INT 0
71953: PPUSH
// result := [ 0 , 0 , 0 ] ;
71954: LD_ADDR_VAR 0 2
71958: PUSH
71959: LD_INT 0
71961: PUSH
71962: LD_INT 0
71964: PUSH
71965: LD_INT 0
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: LIST
71972: ST_TO_ADDR
// if not base then
71973: LD_VAR 0 1
71977: NOT
71978: IFFALSE 71982
// exit ;
71980: GO 72031
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71982: LD_ADDR_VAR 0 2
71986: PUSH
71987: LD_VAR 0 1
71991: PPUSH
71992: LD_INT 1
71994: PPUSH
71995: CALL_OW 275
71999: PUSH
72000: LD_VAR 0 1
72004: PPUSH
72005: LD_INT 2
72007: PPUSH
72008: CALL_OW 275
72012: PUSH
72013: LD_VAR 0 1
72017: PPUSH
72018: LD_INT 3
72020: PPUSH
72021: CALL_OW 275
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: LIST
72030: ST_TO_ADDR
// end ;
72031: LD_VAR 0 2
72035: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72036: LD_INT 0
72038: PPUSH
72039: PPUSH
// result := array ;
72040: LD_ADDR_VAR 0 3
72044: PUSH
72045: LD_VAR 0 1
72049: ST_TO_ADDR
// if size >= result then
72050: LD_VAR 0 2
72054: PUSH
72055: LD_VAR 0 3
72059: GREATEREQUAL
72060: IFFALSE 72064
// exit ;
72062: GO 72114
// if size then
72064: LD_VAR 0 2
72068: IFFALSE 72114
// for i := array downto size do
72070: LD_ADDR_VAR 0 4
72074: PUSH
72075: DOUBLE
72076: LD_VAR 0 1
72080: INC
72081: ST_TO_ADDR
72082: LD_VAR 0 2
72086: PUSH
72087: FOR_DOWNTO
72088: IFFALSE 72112
// result := Delete ( result , result ) ;
72090: LD_ADDR_VAR 0 3
72094: PUSH
72095: LD_VAR 0 3
72099: PPUSH
72100: LD_VAR 0 3
72104: PPUSH
72105: CALL_OW 3
72109: ST_TO_ADDR
72110: GO 72087
72112: POP
72113: POP
// end ;
72114: LD_VAR 0 3
72118: RET
// export function ComExit ( unit ) ; var tmp ; begin
72119: LD_INT 0
72121: PPUSH
72122: PPUSH
// if not IsInUnit ( unit ) then
72123: LD_VAR 0 1
72127: PPUSH
72128: CALL_OW 310
72132: NOT
72133: IFFALSE 72137
// exit ;
72135: GO 72197
// tmp := IsInUnit ( unit ) ;
72137: LD_ADDR_VAR 0 3
72141: PUSH
72142: LD_VAR 0 1
72146: PPUSH
72147: CALL_OW 310
72151: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72152: LD_VAR 0 3
72156: PPUSH
72157: CALL_OW 247
72161: PUSH
72162: LD_INT 2
72164: EQUAL
72165: IFFALSE 72178
// ComExitVehicle ( unit ) else
72167: LD_VAR 0 1
72171: PPUSH
72172: CALL_OW 121
72176: GO 72187
// ComExitBuilding ( unit ) ;
72178: LD_VAR 0 1
72182: PPUSH
72183: CALL_OW 122
// result := tmp ;
72187: LD_ADDR_VAR 0 2
72191: PUSH
72192: LD_VAR 0 3
72196: ST_TO_ADDR
// end ;
72197: LD_VAR 0 2
72201: RET
// export function ComExitAll ( units ) ; var i ; begin
72202: LD_INT 0
72204: PPUSH
72205: PPUSH
// if not units then
72206: LD_VAR 0 1
72210: NOT
72211: IFFALSE 72215
// exit ;
72213: GO 72241
// for i in units do
72215: LD_ADDR_VAR 0 3
72219: PUSH
72220: LD_VAR 0 1
72224: PUSH
72225: FOR_IN
72226: IFFALSE 72239
// ComExit ( i ) ;
72228: LD_VAR 0 3
72232: PPUSH
72233: CALL 72119 0 1
72237: GO 72225
72239: POP
72240: POP
// end ;
72241: LD_VAR 0 2
72245: RET
// export function ResetHc ; begin
72246: LD_INT 0
72248: PPUSH
// InitHc ;
72249: CALL_OW 19
// hc_importance := 0 ;
72253: LD_ADDR_OWVAR 32
72257: PUSH
72258: LD_INT 0
72260: ST_TO_ADDR
// end ;
72261: LD_VAR 0 1
72265: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72266: LD_INT 0
72268: PPUSH
72269: PPUSH
72270: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72271: LD_ADDR_VAR 0 6
72275: PUSH
72276: LD_VAR 0 1
72280: PUSH
72281: LD_VAR 0 3
72285: PLUS
72286: PUSH
72287: LD_INT 2
72289: DIV
72290: ST_TO_ADDR
// if _x < 0 then
72291: LD_VAR 0 6
72295: PUSH
72296: LD_INT 0
72298: LESS
72299: IFFALSE 72316
// _x := _x * - 1 ;
72301: LD_ADDR_VAR 0 6
72305: PUSH
72306: LD_VAR 0 6
72310: PUSH
72311: LD_INT 1
72313: NEG
72314: MUL
72315: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72316: LD_ADDR_VAR 0 7
72320: PUSH
72321: LD_VAR 0 2
72325: PUSH
72326: LD_VAR 0 4
72330: PLUS
72331: PUSH
72332: LD_INT 2
72334: DIV
72335: ST_TO_ADDR
// if _y < 0 then
72336: LD_VAR 0 7
72340: PUSH
72341: LD_INT 0
72343: LESS
72344: IFFALSE 72361
// _y := _y * - 1 ;
72346: LD_ADDR_VAR 0 7
72350: PUSH
72351: LD_VAR 0 7
72355: PUSH
72356: LD_INT 1
72358: NEG
72359: MUL
72360: ST_TO_ADDR
// result := [ _x , _y ] ;
72361: LD_ADDR_VAR 0 5
72365: PUSH
72366: LD_VAR 0 6
72370: PUSH
72371: LD_VAR 0 7
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: ST_TO_ADDR
// end ;
72380: LD_VAR 0 5
72384: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72385: LD_INT 0
72387: PPUSH
72388: PPUSH
72389: PPUSH
72390: PPUSH
// task := GetTaskList ( unit ) ;
72391: LD_ADDR_VAR 0 7
72395: PUSH
72396: LD_VAR 0 1
72400: PPUSH
72401: CALL_OW 437
72405: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72406: LD_VAR 0 7
72410: NOT
72411: PUSH
72412: LD_VAR 0 1
72416: PPUSH
72417: LD_VAR 0 2
72421: PPUSH
72422: CALL_OW 308
72426: NOT
72427: AND
72428: IFFALSE 72432
// exit ;
72430: GO 72550
// if IsInArea ( unit , area ) then
72432: LD_VAR 0 1
72436: PPUSH
72437: LD_VAR 0 2
72441: PPUSH
72442: CALL_OW 308
72446: IFFALSE 72464
// begin ComMoveToArea ( unit , goAway ) ;
72448: LD_VAR 0 1
72452: PPUSH
72453: LD_VAR 0 3
72457: PPUSH
72458: CALL_OW 113
// exit ;
72462: GO 72550
// end ; if task [ 1 ] [ 1 ] <> M then
72464: LD_VAR 0 7
72468: PUSH
72469: LD_INT 1
72471: ARRAY
72472: PUSH
72473: LD_INT 1
72475: ARRAY
72476: PUSH
72477: LD_STRING M
72479: NONEQUAL
72480: IFFALSE 72484
// exit ;
72482: GO 72550
// x := task [ 1 ] [ 2 ] ;
72484: LD_ADDR_VAR 0 5
72488: PUSH
72489: LD_VAR 0 7
72493: PUSH
72494: LD_INT 1
72496: ARRAY
72497: PUSH
72498: LD_INT 2
72500: ARRAY
72501: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72502: LD_ADDR_VAR 0 6
72506: PUSH
72507: LD_VAR 0 7
72511: PUSH
72512: LD_INT 1
72514: ARRAY
72515: PUSH
72516: LD_INT 3
72518: ARRAY
72519: ST_TO_ADDR
// if InArea ( x , y , area ) then
72520: LD_VAR 0 5
72524: PPUSH
72525: LD_VAR 0 6
72529: PPUSH
72530: LD_VAR 0 2
72534: PPUSH
72535: CALL_OW 309
72539: IFFALSE 72550
// ComStop ( unit ) ;
72541: LD_VAR 0 1
72545: PPUSH
72546: CALL_OW 141
// end ;
72550: LD_VAR 0 4
72554: RET
// export function Abs ( value ) ; begin
72555: LD_INT 0
72557: PPUSH
// result := value ;
72558: LD_ADDR_VAR 0 2
72562: PUSH
72563: LD_VAR 0 1
72567: ST_TO_ADDR
// if value < 0 then
72568: LD_VAR 0 1
72572: PUSH
72573: LD_INT 0
72575: LESS
72576: IFFALSE 72593
// result := value * - 1 ;
72578: LD_ADDR_VAR 0 2
72582: PUSH
72583: LD_VAR 0 1
72587: PUSH
72588: LD_INT 1
72590: NEG
72591: MUL
72592: ST_TO_ADDR
// end ;
72593: LD_VAR 0 2
72597: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72598: LD_INT 0
72600: PPUSH
72601: PPUSH
72602: PPUSH
72603: PPUSH
72604: PPUSH
72605: PPUSH
72606: PPUSH
72607: PPUSH
// if not unit or not building then
72608: LD_VAR 0 1
72612: NOT
72613: PUSH
72614: LD_VAR 0 2
72618: NOT
72619: OR
72620: IFFALSE 72624
// exit ;
72622: GO 72850
// x := GetX ( building ) ;
72624: LD_ADDR_VAR 0 4
72628: PUSH
72629: LD_VAR 0 2
72633: PPUSH
72634: CALL_OW 250
72638: ST_TO_ADDR
// y := GetY ( building ) ;
72639: LD_ADDR_VAR 0 6
72643: PUSH
72644: LD_VAR 0 2
72648: PPUSH
72649: CALL_OW 251
72653: ST_TO_ADDR
// d := GetDir ( building ) ;
72654: LD_ADDR_VAR 0 8
72658: PUSH
72659: LD_VAR 0 2
72663: PPUSH
72664: CALL_OW 254
72668: ST_TO_ADDR
// r := 4 ;
72669: LD_ADDR_VAR 0 9
72673: PUSH
72674: LD_INT 4
72676: ST_TO_ADDR
// for i := 1 to 5 do
72677: LD_ADDR_VAR 0 10
72681: PUSH
72682: DOUBLE
72683: LD_INT 1
72685: DEC
72686: ST_TO_ADDR
72687: LD_INT 5
72689: PUSH
72690: FOR_TO
72691: IFFALSE 72848
// begin _x := ShiftX ( x , d , r + i ) ;
72693: LD_ADDR_VAR 0 5
72697: PUSH
72698: LD_VAR 0 4
72702: PPUSH
72703: LD_VAR 0 8
72707: PPUSH
72708: LD_VAR 0 9
72712: PUSH
72713: LD_VAR 0 10
72717: PLUS
72718: PPUSH
72719: CALL_OW 272
72723: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72724: LD_ADDR_VAR 0 7
72728: PUSH
72729: LD_VAR 0 6
72733: PPUSH
72734: LD_VAR 0 8
72738: PPUSH
72739: LD_VAR 0 9
72743: PUSH
72744: LD_VAR 0 10
72748: PLUS
72749: PPUSH
72750: CALL_OW 273
72754: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72755: LD_VAR 0 5
72759: PPUSH
72760: LD_VAR 0 7
72764: PPUSH
72765: CALL_OW 488
72769: PUSH
72770: LD_VAR 0 5
72774: PPUSH
72775: LD_VAR 0 7
72779: PPUSH
72780: CALL_OW 428
72784: PPUSH
72785: CALL_OW 247
72789: PUSH
72790: LD_INT 3
72792: PUSH
72793: LD_INT 2
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: IN
72800: NOT
72801: AND
72802: IFFALSE 72846
// begin ComMoveXY ( unit , _x , _y ) ;
72804: LD_VAR 0 1
72808: PPUSH
72809: LD_VAR 0 5
72813: PPUSH
72814: LD_VAR 0 7
72818: PPUSH
72819: CALL_OW 111
// result := [ _x , _y ] ;
72823: LD_ADDR_VAR 0 3
72827: PUSH
72828: LD_VAR 0 5
72832: PUSH
72833: LD_VAR 0 7
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: ST_TO_ADDR
// exit ;
72842: POP
72843: POP
72844: GO 72850
// end ; end ;
72846: GO 72690
72848: POP
72849: POP
// end ;
72850: LD_VAR 0 3
72854: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72855: LD_INT 0
72857: PPUSH
72858: PPUSH
72859: PPUSH
// result := 0 ;
72860: LD_ADDR_VAR 0 3
72864: PUSH
72865: LD_INT 0
72867: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72868: LD_VAR 0 1
72872: PUSH
72873: LD_INT 0
72875: LESS
72876: PUSH
72877: LD_VAR 0 1
72881: PUSH
72882: LD_INT 8
72884: GREATER
72885: OR
72886: PUSH
72887: LD_VAR 0 2
72891: PUSH
72892: LD_INT 0
72894: LESS
72895: OR
72896: PUSH
72897: LD_VAR 0 2
72901: PUSH
72902: LD_INT 8
72904: GREATER
72905: OR
72906: IFFALSE 72910
// exit ;
72908: GO 72985
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72910: LD_ADDR_VAR 0 4
72914: PUSH
72915: LD_INT 22
72917: PUSH
72918: LD_VAR 0 2
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PPUSH
72927: CALL_OW 69
72931: PUSH
72932: FOR_IN
72933: IFFALSE 72983
// begin un := UnitShoot ( i ) ;
72935: LD_ADDR_VAR 0 5
72939: PUSH
72940: LD_VAR 0 4
72944: PPUSH
72945: CALL_OW 504
72949: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72950: LD_VAR 0 5
72954: PPUSH
72955: CALL_OW 255
72959: PUSH
72960: LD_VAR 0 1
72964: EQUAL
72965: IFFALSE 72981
// begin result := un ;
72967: LD_ADDR_VAR 0 3
72971: PUSH
72972: LD_VAR 0 5
72976: ST_TO_ADDR
// exit ;
72977: POP
72978: POP
72979: GO 72985
// end ; end ;
72981: GO 72932
72983: POP
72984: POP
// end ;
72985: LD_VAR 0 3
72989: RET
// export function GetCargoBay ( units ) ; begin
72990: LD_INT 0
72992: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72993: LD_ADDR_VAR 0 2
72997: PUSH
72998: LD_VAR 0 1
73002: PPUSH
73003: LD_INT 2
73005: PUSH
73006: LD_INT 34
73008: PUSH
73009: LD_INT 12
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 34
73018: PUSH
73019: LD_INT 51
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 34
73028: PUSH
73029: LD_INT 32
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 34
73038: PUSH
73039: LD_INT 89
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: PPUSH
73053: CALL_OW 72
73057: ST_TO_ADDR
// end ;
73058: LD_VAR 0 2
73062: RET
// export function Negate ( value ) ; begin
73063: LD_INT 0
73065: PPUSH
// result := not value ;
73066: LD_ADDR_VAR 0 2
73070: PUSH
73071: LD_VAR 0 1
73075: NOT
73076: ST_TO_ADDR
// end ;
73077: LD_VAR 0 2
73081: RET
// export function Inc ( value ) ; begin
73082: LD_INT 0
73084: PPUSH
// result := value + 1 ;
73085: LD_ADDR_VAR 0 2
73089: PUSH
73090: LD_VAR 0 1
73094: PUSH
73095: LD_INT 1
73097: PLUS
73098: ST_TO_ADDR
// end ;
73099: LD_VAR 0 2
73103: RET
// export function Dec ( value ) ; begin
73104: LD_INT 0
73106: PPUSH
// result := value - 1 ;
73107: LD_ADDR_VAR 0 2
73111: PUSH
73112: LD_VAR 0 1
73116: PUSH
73117: LD_INT 1
73119: MINUS
73120: ST_TO_ADDR
// end ;
73121: LD_VAR 0 2
73125: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73126: LD_INT 0
73128: PPUSH
73129: PPUSH
73130: PPUSH
73131: PPUSH
73132: PPUSH
73133: PPUSH
73134: PPUSH
73135: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73136: LD_VAR 0 1
73140: PPUSH
73141: LD_VAR 0 2
73145: PPUSH
73146: CALL_OW 488
73150: NOT
73151: PUSH
73152: LD_VAR 0 3
73156: PPUSH
73157: LD_VAR 0 4
73161: PPUSH
73162: CALL_OW 488
73166: NOT
73167: OR
73168: IFFALSE 73181
// begin result := - 1 ;
73170: LD_ADDR_VAR 0 5
73174: PUSH
73175: LD_INT 1
73177: NEG
73178: ST_TO_ADDR
// exit ;
73179: GO 73416
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73181: LD_ADDR_VAR 0 12
73185: PUSH
73186: LD_VAR 0 1
73190: PPUSH
73191: LD_VAR 0 2
73195: PPUSH
73196: LD_VAR 0 3
73200: PPUSH
73201: LD_VAR 0 4
73205: PPUSH
73206: CALL 72266 0 4
73210: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73211: LD_ADDR_VAR 0 11
73215: PUSH
73216: LD_VAR 0 1
73220: PPUSH
73221: LD_VAR 0 2
73225: PPUSH
73226: LD_VAR 0 12
73230: PUSH
73231: LD_INT 1
73233: ARRAY
73234: PPUSH
73235: LD_VAR 0 12
73239: PUSH
73240: LD_INT 2
73242: ARRAY
73243: PPUSH
73244: CALL_OW 298
73248: ST_TO_ADDR
// distance := 9999 ;
73249: LD_ADDR_VAR 0 10
73253: PUSH
73254: LD_INT 9999
73256: ST_TO_ADDR
// for i := 0 to 5 do
73257: LD_ADDR_VAR 0 6
73261: PUSH
73262: DOUBLE
73263: LD_INT 0
73265: DEC
73266: ST_TO_ADDR
73267: LD_INT 5
73269: PUSH
73270: FOR_TO
73271: IFFALSE 73414
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73273: LD_ADDR_VAR 0 7
73277: PUSH
73278: LD_VAR 0 1
73282: PPUSH
73283: LD_VAR 0 6
73287: PPUSH
73288: LD_VAR 0 11
73292: PPUSH
73293: CALL_OW 272
73297: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73298: LD_ADDR_VAR 0 8
73302: PUSH
73303: LD_VAR 0 2
73307: PPUSH
73308: LD_VAR 0 6
73312: PPUSH
73313: LD_VAR 0 11
73317: PPUSH
73318: CALL_OW 273
73322: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73323: LD_VAR 0 7
73327: PPUSH
73328: LD_VAR 0 8
73332: PPUSH
73333: CALL_OW 488
73337: NOT
73338: IFFALSE 73342
// continue ;
73340: GO 73270
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73342: LD_ADDR_VAR 0 9
73346: PUSH
73347: LD_VAR 0 12
73351: PUSH
73352: LD_INT 1
73354: ARRAY
73355: PPUSH
73356: LD_VAR 0 12
73360: PUSH
73361: LD_INT 2
73363: ARRAY
73364: PPUSH
73365: LD_VAR 0 7
73369: PPUSH
73370: LD_VAR 0 8
73374: PPUSH
73375: CALL_OW 298
73379: ST_TO_ADDR
// if tmp < distance then
73380: LD_VAR 0 9
73384: PUSH
73385: LD_VAR 0 10
73389: LESS
73390: IFFALSE 73412
// begin result := i ;
73392: LD_ADDR_VAR 0 5
73396: PUSH
73397: LD_VAR 0 6
73401: ST_TO_ADDR
// distance := tmp ;
73402: LD_ADDR_VAR 0 10
73406: PUSH
73407: LD_VAR 0 9
73411: ST_TO_ADDR
// end ; end ;
73412: GO 73270
73414: POP
73415: POP
// end ;
73416: LD_VAR 0 5
73420: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73421: LD_INT 0
73423: PPUSH
73424: PPUSH
// if not driver or not IsInUnit ( driver ) then
73425: LD_VAR 0 1
73429: NOT
73430: PUSH
73431: LD_VAR 0 1
73435: PPUSH
73436: CALL_OW 310
73440: NOT
73441: OR
73442: IFFALSE 73446
// exit ;
73444: GO 73536
// vehicle := IsInUnit ( driver ) ;
73446: LD_ADDR_VAR 0 3
73450: PUSH
73451: LD_VAR 0 1
73455: PPUSH
73456: CALL_OW 310
73460: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73461: LD_VAR 0 1
73465: PPUSH
73466: LD_STRING \
73468: PUSH
73469: LD_INT 0
73471: PUSH
73472: LD_INT 0
73474: PUSH
73475: LD_INT 0
73477: PUSH
73478: LD_INT 0
73480: PUSH
73481: LD_INT 0
73483: PUSH
73484: LD_INT 0
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: PUSH
73496: LD_STRING E
73498: PUSH
73499: LD_INT 0
73501: PUSH
73502: LD_INT 0
73504: PUSH
73505: LD_VAR 0 3
73509: PUSH
73510: LD_INT 0
73512: PUSH
73513: LD_INT 0
73515: PUSH
73516: LD_INT 0
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PPUSH
73532: CALL_OW 446
// end ;
73536: LD_VAR 0 2
73540: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73541: LD_INT 0
73543: PPUSH
73544: PPUSH
// if not driver or not IsInUnit ( driver ) then
73545: LD_VAR 0 1
73549: NOT
73550: PUSH
73551: LD_VAR 0 1
73555: PPUSH
73556: CALL_OW 310
73560: NOT
73561: OR
73562: IFFALSE 73566
// exit ;
73564: GO 73656
// vehicle := IsInUnit ( driver ) ;
73566: LD_ADDR_VAR 0 3
73570: PUSH
73571: LD_VAR 0 1
73575: PPUSH
73576: CALL_OW 310
73580: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73581: LD_VAR 0 1
73585: PPUSH
73586: LD_STRING \
73588: PUSH
73589: LD_INT 0
73591: PUSH
73592: LD_INT 0
73594: PUSH
73595: LD_INT 0
73597: PUSH
73598: LD_INT 0
73600: PUSH
73601: LD_INT 0
73603: PUSH
73604: LD_INT 0
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: PUSH
73616: LD_STRING E
73618: PUSH
73619: LD_INT 0
73621: PUSH
73622: LD_INT 0
73624: PUSH
73625: LD_VAR 0 3
73629: PUSH
73630: LD_INT 0
73632: PUSH
73633: LD_INT 0
73635: PUSH
73636: LD_INT 0
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PPUSH
73652: CALL_OW 447
// end ;
73656: LD_VAR 0 2
73660: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73661: LD_INT 0
73663: PPUSH
73664: PPUSH
73665: PPUSH
// tmp := [ ] ;
73666: LD_ADDR_VAR 0 5
73670: PUSH
73671: EMPTY
73672: ST_TO_ADDR
// for i in units do
73673: LD_ADDR_VAR 0 4
73677: PUSH
73678: LD_VAR 0 1
73682: PUSH
73683: FOR_IN
73684: IFFALSE 73722
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73686: LD_ADDR_VAR 0 5
73690: PUSH
73691: LD_VAR 0 5
73695: PPUSH
73696: LD_VAR 0 5
73700: PUSH
73701: LD_INT 1
73703: PLUS
73704: PPUSH
73705: LD_VAR 0 4
73709: PPUSH
73710: CALL_OW 256
73714: PPUSH
73715: CALL_OW 2
73719: ST_TO_ADDR
73720: GO 73683
73722: POP
73723: POP
// if not tmp then
73724: LD_VAR 0 5
73728: NOT
73729: IFFALSE 73733
// exit ;
73731: GO 73781
// if asc then
73733: LD_VAR 0 2
73737: IFFALSE 73761
// result := SortListByListAsc ( units , tmp ) else
73739: LD_ADDR_VAR 0 3
73743: PUSH
73744: LD_VAR 0 1
73748: PPUSH
73749: LD_VAR 0 5
73753: PPUSH
73754: CALL_OW 76
73758: ST_TO_ADDR
73759: GO 73781
// result := SortListByListDesc ( units , tmp ) ;
73761: LD_ADDR_VAR 0 3
73765: PUSH
73766: LD_VAR 0 1
73770: PPUSH
73771: LD_VAR 0 5
73775: PPUSH
73776: CALL_OW 77
73780: ST_TO_ADDR
// end ;
73781: LD_VAR 0 3
73785: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73786: LD_INT 0
73788: PPUSH
73789: PPUSH
// task := GetTaskList ( mech ) ;
73790: LD_ADDR_VAR 0 4
73794: PUSH
73795: LD_VAR 0 1
73799: PPUSH
73800: CALL_OW 437
73804: ST_TO_ADDR
// if not task then
73805: LD_VAR 0 4
73809: NOT
73810: IFFALSE 73814
// exit ;
73812: GO 73856
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73814: LD_ADDR_VAR 0 3
73818: PUSH
73819: LD_VAR 0 4
73823: PUSH
73824: LD_INT 1
73826: ARRAY
73827: PUSH
73828: LD_INT 1
73830: ARRAY
73831: PUSH
73832: LD_STRING r
73834: EQUAL
73835: PUSH
73836: LD_VAR 0 4
73840: PUSH
73841: LD_INT 1
73843: ARRAY
73844: PUSH
73845: LD_INT 4
73847: ARRAY
73848: PUSH
73849: LD_VAR 0 2
73853: EQUAL
73854: AND
73855: ST_TO_ADDR
// end ;
73856: LD_VAR 0 3
73860: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73861: LD_INT 0
73863: PPUSH
// SetDir ( unit , d ) ;
73864: LD_VAR 0 1
73868: PPUSH
73869: LD_VAR 0 4
73873: PPUSH
73874: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73878: LD_VAR 0 1
73882: PPUSH
73883: LD_VAR 0 2
73887: PPUSH
73888: LD_VAR 0 3
73892: PPUSH
73893: LD_VAR 0 5
73897: PPUSH
73898: CALL_OW 48
// end ;
73902: LD_VAR 0 6
73906: RET
// export function ToNaturalNumber ( number ) ; begin
73907: LD_INT 0
73909: PPUSH
// result := number div 1 ;
73910: LD_ADDR_VAR 0 2
73914: PUSH
73915: LD_VAR 0 1
73919: PUSH
73920: LD_INT 1
73922: DIV
73923: ST_TO_ADDR
// if number < 0 then
73924: LD_VAR 0 1
73928: PUSH
73929: LD_INT 0
73931: LESS
73932: IFFALSE 73942
// result := 0 ;
73934: LD_ADDR_VAR 0 2
73938: PUSH
73939: LD_INT 0
73941: ST_TO_ADDR
// end ;
73942: LD_VAR 0 2
73946: RET
// export function SortByClass ( units , class ) ; var un ; begin
73947: LD_INT 0
73949: PPUSH
73950: PPUSH
// if not units or not class then
73951: LD_VAR 0 1
73955: NOT
73956: PUSH
73957: LD_VAR 0 2
73961: NOT
73962: OR
73963: IFFALSE 73967
// exit ;
73965: GO 74062
// result := [ ] ;
73967: LD_ADDR_VAR 0 3
73971: PUSH
73972: EMPTY
73973: ST_TO_ADDR
// for un in units do
73974: LD_ADDR_VAR 0 4
73978: PUSH
73979: LD_VAR 0 1
73983: PUSH
73984: FOR_IN
73985: IFFALSE 74060
// if GetClass ( un ) = class then
73987: LD_VAR 0 4
73991: PPUSH
73992: CALL_OW 257
73996: PUSH
73997: LD_VAR 0 2
74001: EQUAL
74002: IFFALSE 74029
// result := Insert ( result , 1 , un ) else
74004: LD_ADDR_VAR 0 3
74008: PUSH
74009: LD_VAR 0 3
74013: PPUSH
74014: LD_INT 1
74016: PPUSH
74017: LD_VAR 0 4
74021: PPUSH
74022: CALL_OW 2
74026: ST_TO_ADDR
74027: GO 74058
// result := Replace ( result , result + 1 , un ) ;
74029: LD_ADDR_VAR 0 3
74033: PUSH
74034: LD_VAR 0 3
74038: PPUSH
74039: LD_VAR 0 3
74043: PUSH
74044: LD_INT 1
74046: PLUS
74047: PPUSH
74048: LD_VAR 0 4
74052: PPUSH
74053: CALL_OW 1
74057: ST_TO_ADDR
74058: GO 73984
74060: POP
74061: POP
// end ;
74062: LD_VAR 0 3
74066: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74067: LD_INT 0
74069: PPUSH
74070: PPUSH
74071: PPUSH
74072: PPUSH
74073: PPUSH
74074: PPUSH
74075: PPUSH
// result := [ ] ;
74076: LD_ADDR_VAR 0 4
74080: PUSH
74081: EMPTY
74082: ST_TO_ADDR
// if x - r < 0 then
74083: LD_VAR 0 1
74087: PUSH
74088: LD_VAR 0 3
74092: MINUS
74093: PUSH
74094: LD_INT 0
74096: LESS
74097: IFFALSE 74109
// min_x := 0 else
74099: LD_ADDR_VAR 0 8
74103: PUSH
74104: LD_INT 0
74106: ST_TO_ADDR
74107: GO 74125
// min_x := x - r ;
74109: LD_ADDR_VAR 0 8
74113: PUSH
74114: LD_VAR 0 1
74118: PUSH
74119: LD_VAR 0 3
74123: MINUS
74124: ST_TO_ADDR
// if y - r < 0 then
74125: LD_VAR 0 2
74129: PUSH
74130: LD_VAR 0 3
74134: MINUS
74135: PUSH
74136: LD_INT 0
74138: LESS
74139: IFFALSE 74151
// min_y := 0 else
74141: LD_ADDR_VAR 0 7
74145: PUSH
74146: LD_INT 0
74148: ST_TO_ADDR
74149: GO 74167
// min_y := y - r ;
74151: LD_ADDR_VAR 0 7
74155: PUSH
74156: LD_VAR 0 2
74160: PUSH
74161: LD_VAR 0 3
74165: MINUS
74166: ST_TO_ADDR
// max_x := x + r ;
74167: LD_ADDR_VAR 0 9
74171: PUSH
74172: LD_VAR 0 1
74176: PUSH
74177: LD_VAR 0 3
74181: PLUS
74182: ST_TO_ADDR
// max_y := y + r ;
74183: LD_ADDR_VAR 0 10
74187: PUSH
74188: LD_VAR 0 2
74192: PUSH
74193: LD_VAR 0 3
74197: PLUS
74198: ST_TO_ADDR
// for _x = min_x to max_x do
74199: LD_ADDR_VAR 0 5
74203: PUSH
74204: DOUBLE
74205: LD_VAR 0 8
74209: DEC
74210: ST_TO_ADDR
74211: LD_VAR 0 9
74215: PUSH
74216: FOR_TO
74217: IFFALSE 74318
// for _y = min_y to max_y do
74219: LD_ADDR_VAR 0 6
74223: PUSH
74224: DOUBLE
74225: LD_VAR 0 7
74229: DEC
74230: ST_TO_ADDR
74231: LD_VAR 0 10
74235: PUSH
74236: FOR_TO
74237: IFFALSE 74314
// begin if not ValidHex ( _x , _y ) then
74239: LD_VAR 0 5
74243: PPUSH
74244: LD_VAR 0 6
74248: PPUSH
74249: CALL_OW 488
74253: NOT
74254: IFFALSE 74258
// continue ;
74256: GO 74236
// if GetResourceTypeXY ( _x , _y ) then
74258: LD_VAR 0 5
74262: PPUSH
74263: LD_VAR 0 6
74267: PPUSH
74268: CALL_OW 283
74272: IFFALSE 74312
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74274: LD_ADDR_VAR 0 4
74278: PUSH
74279: LD_VAR 0 4
74283: PPUSH
74284: LD_VAR 0 4
74288: PUSH
74289: LD_INT 1
74291: PLUS
74292: PPUSH
74293: LD_VAR 0 5
74297: PUSH
74298: LD_VAR 0 6
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PPUSH
74307: CALL_OW 1
74311: ST_TO_ADDR
// end ;
74312: GO 74236
74314: POP
74315: POP
74316: GO 74216
74318: POP
74319: POP
// end ;
74320: LD_VAR 0 4
74324: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74325: LD_INT 0
74327: PPUSH
74328: PPUSH
74329: PPUSH
74330: PPUSH
74331: PPUSH
74332: PPUSH
74333: PPUSH
74334: PPUSH
// if not units then
74335: LD_VAR 0 1
74339: NOT
74340: IFFALSE 74344
// exit ;
74342: GO 74868
// result := UnitFilter ( units , [ f_ok ] ) ;
74344: LD_ADDR_VAR 0 3
74348: PUSH
74349: LD_VAR 0 1
74353: PPUSH
74354: LD_INT 50
74356: PUSH
74357: EMPTY
74358: LIST
74359: PPUSH
74360: CALL_OW 72
74364: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74365: LD_ADDR_VAR 0 8
74369: PUSH
74370: LD_VAR 0 1
74374: PUSH
74375: LD_INT 1
74377: ARRAY
74378: PPUSH
74379: CALL_OW 255
74383: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74384: LD_ADDR_VAR 0 10
74388: PUSH
74389: LD_INT 29
74391: PUSH
74392: LD_INT 91
74394: PUSH
74395: LD_INT 49
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: LIST
74402: ST_TO_ADDR
// if not result then
74403: LD_VAR 0 3
74407: NOT
74408: IFFALSE 74412
// exit ;
74410: GO 74868
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74412: LD_ADDR_VAR 0 5
74416: PUSH
74417: LD_INT 81
74419: PUSH
74420: LD_VAR 0 8
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PPUSH
74429: CALL_OW 69
74433: ST_TO_ADDR
// for i in result do
74434: LD_ADDR_VAR 0 4
74438: PUSH
74439: LD_VAR 0 3
74443: PUSH
74444: FOR_IN
74445: IFFALSE 74866
// begin tag := GetTag ( i ) + 1 ;
74447: LD_ADDR_VAR 0 9
74451: PUSH
74452: LD_VAR 0 4
74456: PPUSH
74457: CALL_OW 110
74461: PUSH
74462: LD_INT 1
74464: PLUS
74465: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74466: LD_ADDR_VAR 0 7
74470: PUSH
74471: LD_VAR 0 4
74475: PPUSH
74476: CALL_OW 250
74480: PPUSH
74481: LD_VAR 0 4
74485: PPUSH
74486: CALL_OW 251
74490: PPUSH
74491: LD_INT 6
74493: PPUSH
74494: CALL 74067 0 3
74498: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74499: LD_VAR 0 4
74503: PPUSH
74504: CALL_OW 247
74508: PUSH
74509: LD_INT 2
74511: EQUAL
74512: PUSH
74513: LD_VAR 0 7
74517: AND
74518: PUSH
74519: LD_VAR 0 4
74523: PPUSH
74524: CALL_OW 264
74528: PUSH
74529: LD_VAR 0 10
74533: IN
74534: NOT
74535: AND
74536: IFFALSE 74575
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74538: LD_VAR 0 4
74542: PPUSH
74543: LD_VAR 0 7
74547: PUSH
74548: LD_INT 1
74550: ARRAY
74551: PUSH
74552: LD_INT 1
74554: ARRAY
74555: PPUSH
74556: LD_VAR 0 7
74560: PUSH
74561: LD_INT 1
74563: ARRAY
74564: PUSH
74565: LD_INT 2
74567: ARRAY
74568: PPUSH
74569: CALL_OW 116
74573: GO 74864
// if path > tag then
74575: LD_VAR 0 2
74579: PUSH
74580: LD_VAR 0 9
74584: GREATER
74585: IFFALSE 74793
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74587: LD_ADDR_VAR 0 6
74591: PUSH
74592: LD_VAR 0 5
74596: PPUSH
74597: LD_INT 91
74599: PUSH
74600: LD_VAR 0 4
74604: PUSH
74605: LD_INT 8
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: LIST
74612: PPUSH
74613: CALL_OW 72
74617: ST_TO_ADDR
// if nearEnemy then
74618: LD_VAR 0 6
74622: IFFALSE 74691
// begin if GetWeapon ( i ) = ru_time_lapser then
74624: LD_VAR 0 4
74628: PPUSH
74629: CALL_OW 264
74633: PUSH
74634: LD_INT 49
74636: EQUAL
74637: IFFALSE 74665
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74639: LD_VAR 0 4
74643: PPUSH
74644: LD_VAR 0 6
74648: PPUSH
74649: LD_VAR 0 4
74653: PPUSH
74654: CALL_OW 74
74658: PPUSH
74659: CALL_OW 112
74663: GO 74689
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74665: LD_VAR 0 4
74669: PPUSH
74670: LD_VAR 0 6
74674: PPUSH
74675: LD_VAR 0 4
74679: PPUSH
74680: CALL_OW 74
74684: PPUSH
74685: CALL_OW 115
// end else
74689: GO 74791
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74691: LD_VAR 0 4
74695: PPUSH
74696: LD_VAR 0 2
74700: PUSH
74701: LD_VAR 0 9
74705: ARRAY
74706: PUSH
74707: LD_INT 1
74709: ARRAY
74710: PPUSH
74711: LD_VAR 0 2
74715: PUSH
74716: LD_VAR 0 9
74720: ARRAY
74721: PUSH
74722: LD_INT 2
74724: ARRAY
74725: PPUSH
74726: CALL_OW 297
74730: PUSH
74731: LD_INT 6
74733: GREATER
74734: IFFALSE 74777
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74736: LD_VAR 0 4
74740: PPUSH
74741: LD_VAR 0 2
74745: PUSH
74746: LD_VAR 0 9
74750: ARRAY
74751: PUSH
74752: LD_INT 1
74754: ARRAY
74755: PPUSH
74756: LD_VAR 0 2
74760: PUSH
74761: LD_VAR 0 9
74765: ARRAY
74766: PUSH
74767: LD_INT 2
74769: ARRAY
74770: PPUSH
74771: CALL_OW 114
74775: GO 74791
// SetTag ( i , tag ) ;
74777: LD_VAR 0 4
74781: PPUSH
74782: LD_VAR 0 9
74786: PPUSH
74787: CALL_OW 109
// end else
74791: GO 74864
// if enemy then
74793: LD_VAR 0 5
74797: IFFALSE 74864
// begin if GetWeapon ( i ) = ru_time_lapser then
74799: LD_VAR 0 4
74803: PPUSH
74804: CALL_OW 264
74808: PUSH
74809: LD_INT 49
74811: EQUAL
74812: IFFALSE 74840
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74814: LD_VAR 0 4
74818: PPUSH
74819: LD_VAR 0 5
74823: PPUSH
74824: LD_VAR 0 4
74828: PPUSH
74829: CALL_OW 74
74833: PPUSH
74834: CALL_OW 112
74838: GO 74864
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74840: LD_VAR 0 4
74844: PPUSH
74845: LD_VAR 0 5
74849: PPUSH
74850: LD_VAR 0 4
74854: PPUSH
74855: CALL_OW 74
74859: PPUSH
74860: CALL_OW 115
// end ; end ;
74864: GO 74444
74866: POP
74867: POP
// end ;
74868: LD_VAR 0 3
74872: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74873: LD_INT 0
74875: PPUSH
74876: PPUSH
74877: PPUSH
// if not unit or IsInUnit ( unit ) then
74878: LD_VAR 0 1
74882: NOT
74883: PUSH
74884: LD_VAR 0 1
74888: PPUSH
74889: CALL_OW 310
74893: OR
74894: IFFALSE 74898
// exit ;
74896: GO 74989
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74898: LD_ADDR_VAR 0 4
74902: PUSH
74903: LD_VAR 0 1
74907: PPUSH
74908: CALL_OW 250
74912: PPUSH
74913: LD_VAR 0 2
74917: PPUSH
74918: LD_INT 1
74920: PPUSH
74921: CALL_OW 272
74925: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74926: LD_ADDR_VAR 0 5
74930: PUSH
74931: LD_VAR 0 1
74935: PPUSH
74936: CALL_OW 251
74940: PPUSH
74941: LD_VAR 0 2
74945: PPUSH
74946: LD_INT 1
74948: PPUSH
74949: CALL_OW 273
74953: ST_TO_ADDR
// if ValidHex ( x , y ) then
74954: LD_VAR 0 4
74958: PPUSH
74959: LD_VAR 0 5
74963: PPUSH
74964: CALL_OW 488
74968: IFFALSE 74989
// ComTurnXY ( unit , x , y ) ;
74970: LD_VAR 0 1
74974: PPUSH
74975: LD_VAR 0 4
74979: PPUSH
74980: LD_VAR 0 5
74984: PPUSH
74985: CALL_OW 118
// end ;
74989: LD_VAR 0 3
74993: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74994: LD_INT 0
74996: PPUSH
74997: PPUSH
// result := false ;
74998: LD_ADDR_VAR 0 3
75002: PUSH
75003: LD_INT 0
75005: ST_TO_ADDR
// if not units then
75006: LD_VAR 0 2
75010: NOT
75011: IFFALSE 75015
// exit ;
75013: GO 75060
// for i in units do
75015: LD_ADDR_VAR 0 4
75019: PUSH
75020: LD_VAR 0 2
75024: PUSH
75025: FOR_IN
75026: IFFALSE 75058
// if See ( side , i ) then
75028: LD_VAR 0 1
75032: PPUSH
75033: LD_VAR 0 4
75037: PPUSH
75038: CALL_OW 292
75042: IFFALSE 75056
// begin result := true ;
75044: LD_ADDR_VAR 0 3
75048: PUSH
75049: LD_INT 1
75051: ST_TO_ADDR
// exit ;
75052: POP
75053: POP
75054: GO 75060
// end ;
75056: GO 75025
75058: POP
75059: POP
// end ;
75060: LD_VAR 0 3
75064: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75065: LD_INT 0
75067: PPUSH
75068: PPUSH
75069: PPUSH
75070: PPUSH
// if not unit or not points then
75071: LD_VAR 0 1
75075: NOT
75076: PUSH
75077: LD_VAR 0 2
75081: NOT
75082: OR
75083: IFFALSE 75087
// exit ;
75085: GO 75177
// dist := 99999 ;
75087: LD_ADDR_VAR 0 5
75091: PUSH
75092: LD_INT 99999
75094: ST_TO_ADDR
// for i in points do
75095: LD_ADDR_VAR 0 4
75099: PUSH
75100: LD_VAR 0 2
75104: PUSH
75105: FOR_IN
75106: IFFALSE 75175
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75108: LD_ADDR_VAR 0 6
75112: PUSH
75113: LD_VAR 0 1
75117: PPUSH
75118: LD_VAR 0 4
75122: PUSH
75123: LD_INT 1
75125: ARRAY
75126: PPUSH
75127: LD_VAR 0 4
75131: PUSH
75132: LD_INT 2
75134: ARRAY
75135: PPUSH
75136: CALL_OW 297
75140: ST_TO_ADDR
// if tmpDist < dist then
75141: LD_VAR 0 6
75145: PUSH
75146: LD_VAR 0 5
75150: LESS
75151: IFFALSE 75173
// begin result := i ;
75153: LD_ADDR_VAR 0 3
75157: PUSH
75158: LD_VAR 0 4
75162: ST_TO_ADDR
// dist := tmpDist ;
75163: LD_ADDR_VAR 0 5
75167: PUSH
75168: LD_VAR 0 6
75172: ST_TO_ADDR
// end ; end ;
75173: GO 75105
75175: POP
75176: POP
// end ;
75177: LD_VAR 0 3
75181: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75182: LD_INT 0
75184: PPUSH
// uc_side := side ;
75185: LD_ADDR_OWVAR 20
75189: PUSH
75190: LD_VAR 0 1
75194: ST_TO_ADDR
// uc_nation := 3 ;
75195: LD_ADDR_OWVAR 21
75199: PUSH
75200: LD_INT 3
75202: ST_TO_ADDR
// vc_chassis := 25 ;
75203: LD_ADDR_OWVAR 37
75207: PUSH
75208: LD_INT 25
75210: ST_TO_ADDR
// vc_engine := engine_siberite ;
75211: LD_ADDR_OWVAR 39
75215: PUSH
75216: LD_INT 3
75218: ST_TO_ADDR
// vc_control := control_computer ;
75219: LD_ADDR_OWVAR 38
75223: PUSH
75224: LD_INT 3
75226: ST_TO_ADDR
// vc_weapon := 59 ;
75227: LD_ADDR_OWVAR 40
75231: PUSH
75232: LD_INT 59
75234: ST_TO_ADDR
// result := CreateVehicle ;
75235: LD_ADDR_VAR 0 5
75239: PUSH
75240: CALL_OW 45
75244: ST_TO_ADDR
// SetDir ( result , d ) ;
75245: LD_VAR 0 5
75249: PPUSH
75250: LD_VAR 0 4
75254: PPUSH
75255: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75259: LD_VAR 0 5
75263: PPUSH
75264: LD_VAR 0 2
75268: PPUSH
75269: LD_VAR 0 3
75273: PPUSH
75274: LD_INT 0
75276: PPUSH
75277: CALL_OW 48
// end ;
75281: LD_VAR 0 5
75285: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75286: LD_INT 0
75288: PPUSH
75289: PPUSH
75290: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75291: LD_ADDR_VAR 0 2
75295: PUSH
75296: LD_INT 0
75298: PUSH
75299: LD_INT 0
75301: PUSH
75302: LD_INT 0
75304: PUSH
75305: LD_INT 0
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75314: LD_VAR 0 1
75318: NOT
75319: PUSH
75320: LD_VAR 0 1
75324: PPUSH
75325: CALL_OW 264
75329: PUSH
75330: LD_INT 12
75332: PUSH
75333: LD_INT 51
75335: PUSH
75336: LD_INT 32
75338: PUSH
75339: LD_INT 89
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: IN
75348: NOT
75349: OR
75350: IFFALSE 75354
// exit ;
75352: GO 75452
// for i := 1 to 3 do
75354: LD_ADDR_VAR 0 3
75358: PUSH
75359: DOUBLE
75360: LD_INT 1
75362: DEC
75363: ST_TO_ADDR
75364: LD_INT 3
75366: PUSH
75367: FOR_TO
75368: IFFALSE 75450
// begin tmp := GetCargo ( cargo , i ) ;
75370: LD_ADDR_VAR 0 4
75374: PUSH
75375: LD_VAR 0 1
75379: PPUSH
75380: LD_VAR 0 3
75384: PPUSH
75385: CALL_OW 289
75389: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75390: LD_ADDR_VAR 0 2
75394: PUSH
75395: LD_VAR 0 2
75399: PPUSH
75400: LD_VAR 0 3
75404: PPUSH
75405: LD_VAR 0 4
75409: PPUSH
75410: CALL_OW 1
75414: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75415: LD_ADDR_VAR 0 2
75419: PUSH
75420: LD_VAR 0 2
75424: PPUSH
75425: LD_INT 4
75427: PPUSH
75428: LD_VAR 0 2
75432: PUSH
75433: LD_INT 4
75435: ARRAY
75436: PUSH
75437: LD_VAR 0 4
75441: PLUS
75442: PPUSH
75443: CALL_OW 1
75447: ST_TO_ADDR
// end ;
75448: GO 75367
75450: POP
75451: POP
// end ;
75452: LD_VAR 0 2
75456: RET
// export function Length ( array ) ; begin
75457: LD_INT 0
75459: PPUSH
// result := array + 0 ;
75460: LD_ADDR_VAR 0 2
75464: PUSH
75465: LD_VAR 0 1
75469: PUSH
75470: LD_INT 0
75472: PLUS
75473: ST_TO_ADDR
// end ;
75474: LD_VAR 0 2
75478: RET
// export function PrepareArray ( array ) ; begin
75479: LD_INT 0
75481: PPUSH
// result := array diff 0 ;
75482: LD_ADDR_VAR 0 2
75486: PUSH
75487: LD_VAR 0 1
75491: PUSH
75492: LD_INT 0
75494: DIFF
75495: ST_TO_ADDR
// if not result [ 1 ] then
75496: LD_VAR 0 2
75500: PUSH
75501: LD_INT 1
75503: ARRAY
75504: NOT
75505: IFFALSE 75525
// result := Delete ( result , 1 ) ;
75507: LD_ADDR_VAR 0 2
75511: PUSH
75512: LD_VAR 0 2
75516: PPUSH
75517: LD_INT 1
75519: PPUSH
75520: CALL_OW 3
75524: ST_TO_ADDR
// end ;
75525: LD_VAR 0 2
75529: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75530: LD_INT 0
75532: PPUSH
75533: PPUSH
75534: PPUSH
75535: PPUSH
// sibRocketRange := 25 ;
75536: LD_ADDR_VAR 0 6
75540: PUSH
75541: LD_INT 25
75543: ST_TO_ADDR
// result := false ;
75544: LD_ADDR_VAR 0 4
75548: PUSH
75549: LD_INT 0
75551: ST_TO_ADDR
// for i := 0 to 5 do
75552: LD_ADDR_VAR 0 5
75556: PUSH
75557: DOUBLE
75558: LD_INT 0
75560: DEC
75561: ST_TO_ADDR
75562: LD_INT 5
75564: PUSH
75565: FOR_TO
75566: IFFALSE 75633
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75568: LD_VAR 0 1
75572: PPUSH
75573: LD_VAR 0 5
75577: PPUSH
75578: LD_VAR 0 6
75582: PPUSH
75583: CALL_OW 272
75587: PPUSH
75588: LD_VAR 0 2
75592: PPUSH
75593: LD_VAR 0 5
75597: PPUSH
75598: LD_VAR 0 6
75602: PPUSH
75603: CALL_OW 273
75607: PPUSH
75608: LD_VAR 0 3
75612: PPUSH
75613: CALL_OW 309
75617: IFFALSE 75631
// begin result := true ;
75619: LD_ADDR_VAR 0 4
75623: PUSH
75624: LD_INT 1
75626: ST_TO_ADDR
// exit ;
75627: POP
75628: POP
75629: GO 75635
// end ;
75631: GO 75565
75633: POP
75634: POP
// end ; end_of_file
75635: LD_VAR 0 4
75639: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75640: LD_VAR 0 1
75644: PUSH
75645: LD_INT 200
75647: DOUBLE
75648: GREATEREQUAL
75649: IFFALSE 75657
75651: LD_INT 299
75653: DOUBLE
75654: LESSEQUAL
75655: IFTRUE 75659
75657: GO 75691
75659: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75660: LD_VAR 0 1
75664: PPUSH
75665: LD_VAR 0 2
75669: PPUSH
75670: LD_VAR 0 3
75674: PPUSH
75675: LD_VAR 0 4
75679: PPUSH
75680: LD_VAR 0 5
75684: PPUSH
75685: CALL 14710 0 5
75689: GO 75768
75691: LD_INT 300
75693: DOUBLE
75694: GREATEREQUAL
75695: IFFALSE 75703
75697: LD_INT 399
75699: DOUBLE
75700: LESSEQUAL
75701: IFTRUE 75705
75703: GO 75767
75705: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75706: LD_VAR 0 1
75710: PPUSH
75711: LD_VAR 0 2
75715: PPUSH
75716: LD_VAR 0 3
75720: PPUSH
75721: LD_VAR 0 4
75725: PPUSH
75726: LD_VAR 0 5
75730: PPUSH
75731: LD_VAR 0 6
75735: PPUSH
75736: LD_VAR 0 7
75740: PPUSH
75741: LD_VAR 0 8
75745: PPUSH
75746: LD_VAR 0 9
75750: PPUSH
75751: LD_VAR 0 10
75755: PPUSH
75756: LD_VAR 0 11
75760: PPUSH
75761: CALL 30981 0 11
75765: GO 75768
75767: POP
// end ;
75768: PPOPN 11
75770: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75771: LD_VAR 0 1
75775: PPUSH
75776: LD_VAR 0 2
75780: PPUSH
75781: LD_VAR 0 3
75785: PPUSH
75786: LD_VAR 0 4
75790: PPUSH
75791: LD_VAR 0 5
75795: PPUSH
75796: CALL 14446 0 5
// end ; end_of_file
75800: PPOPN 5
75802: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75803: LD_VAR 0 1
75807: PPUSH
75808: LD_VAR 0 2
75812: PPUSH
75813: LD_VAR 0 3
75817: PPUSH
75818: LD_VAR 0 4
75822: PPUSH
75823: LD_VAR 0 5
75827: PPUSH
75828: LD_VAR 0 6
75832: PPUSH
75833: CALL 18674 0 6
// end ;
75837: PPOPN 6
75839: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75840: LD_INT 0
75842: PPUSH
// begin if not units then
75843: LD_VAR 0 1
75847: NOT
75848: IFFALSE 75852
// exit ;
75850: GO 75852
// end ;
75852: PPOPN 7
75854: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75855: CALL 18645 0 0
// end ;
75859: PPOPN 1
75861: END
