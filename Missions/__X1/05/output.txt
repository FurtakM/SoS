// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 48 0 0
// InitTag ;
   8: CALL 114 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 25
// FogOff ( 2 ) ;
  18: LD_INT 2
  20: PPUSH
  21: CALL_OW 344
// PrepareNature ( forestArea , swampArea ) ;
  25: LD_INT 3
  27: PPUSH
  28: LD_INT 2
  30: PPUSH
  31: CALL 581 0 2
// PrepareArabian ;
  35: CALL 2826 0 0
// PrepareRussian ;
  39: CALL 3612 0 0
// Action ;
  43: CALL 4205 0 0
// end ;
  47: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , spottedCrossRoad ; function Init ; begin
  48: LD_INT 0
  50: PPUSH
// debug := true ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 1
  58: ST_TO_ADDR
// prefix := 04_2_ ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_STRING 04_2_
  66: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_STRING 04_1_Flamethrower
  74: PPUSH
  75: LD_EXP 1
  79: PPUSH
  80: CALL_OW 30
  84: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  85: LD_ADDR_EXP 4
  89: PUSH
  90: LD_STRING 04_2_IbrahimJoined
  92: PPUSH
  93: LD_INT 0
  95: PPUSH
  96: CALL_OW 30
 100: ST_TO_ADDR
// spottedCrossRoad := false ;
 101: LD_ADDR_EXP 5
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// end ;
 109: LD_VAR 0 1
 113: RET
// function InitTag ; begin
 114: LD_INT 0
 116: PPUSH
// end ;
 117: LD_VAR 0 1
 121: RET
// every 0 0$1 trigger debug do var i ;
 122: LD_EXP 1
 126: IFFALSE 210
 128: GO 130
 130: DISABLE
 131: LD_INT 0
 133: PPUSH
// begin enable ;
 134: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 135: LD_ADDR_VAR 0 1
 139: PUSH
 140: LD_INT 22
 142: PUSH
 143: LD_INT 2
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: LD_INT 3
 152: PUSH
 153: LD_INT 21
 155: PUSH
 156: LD_INT 3
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: PPUSH
 171: CALL_OW 69
 175: PUSH
 176: FOR_IN
 177: IFFALSE 208
// if GetLives ( i ) < 1000 then
 179: LD_VAR 0 1
 183: PPUSH
 184: CALL_OW 256
 188: PUSH
 189: LD_INT 1000
 191: LESS
 192: IFFALSE 206
// SetLives ( i , 1000 ) ;
 194: LD_VAR 0 1
 198: PPUSH
 199: LD_INT 1000
 201: PPUSH
 202: CALL_OW 234
 206: GO 176
 208: POP
 209: POP
// end ; end_of_file
 210: PPOPN 1
 212: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 213: LD_INT 0
 215: PPUSH
 216: PPUSH
// if exist_mode then
 217: LD_VAR 0 2
 221: IFFALSE 246
// unit := CreateCharacter ( prefix & ident ) else
 223: LD_ADDR_VAR 0 5
 227: PUSH
 228: LD_VAR 0 3
 232: PUSH
 233: LD_VAR 0 1
 237: STR
 238: PPUSH
 239: CALL_OW 34
 243: ST_TO_ADDR
 244: GO 261
// unit := NewCharacter ( ident ) ;
 246: LD_ADDR_VAR 0 5
 250: PUSH
 251: LD_VAR 0 1
 255: PPUSH
 256: CALL_OW 25
 260: ST_TO_ADDR
// result := unit ;
 261: LD_ADDR_VAR 0 4
 265: PUSH
 266: LD_VAR 0 5
 270: ST_TO_ADDR
// end ;
 271: LD_VAR 0 4
 275: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 276: LD_INT 0
 278: PPUSH
// uc_side := side ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_VAR 0 1
 288: ST_TO_ADDR
// uc_nation := nation ;
 289: LD_ADDR_OWVAR 21
 293: PUSH
 294: LD_VAR 0 2
 298: ST_TO_ADDR
// vc_chassis := chassis ;
 299: LD_ADDR_OWVAR 37
 303: PUSH
 304: LD_VAR 0 3
 308: ST_TO_ADDR
// vc_engine := engine ;
 309: LD_ADDR_OWVAR 39
 313: PUSH
 314: LD_VAR 0 4
 318: ST_TO_ADDR
// vc_control := control ;
 319: LD_ADDR_OWVAR 38
 323: PUSH
 324: LD_VAR 0 5
 328: ST_TO_ADDR
// vc_weapon := weapon ;
 329: LD_ADDR_OWVAR 40
 333: PUSH
 334: LD_VAR 0 6
 338: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 339: LD_ADDR_OWVAR 41
 343: PUSH
 344: LD_VAR 0 7
 348: ST_TO_ADDR
// result := CreateVehicle ;
 349: LD_ADDR_VAR 0 8
 353: PUSH
 354: CALL_OW 45
 358: ST_TO_ADDR
// end ;
 359: LD_VAR 0 8
 363: RET
// export function SayX ( units , ident ) ; var i ; begin
 364: LD_INT 0
 366: PPUSH
 367: PPUSH
// result := false ;
 368: LD_ADDR_VAR 0 3
 372: PUSH
 373: LD_INT 0
 375: ST_TO_ADDR
// if not units then
 376: LD_VAR 0 1
 380: NOT
 381: IFFALSE 385
// exit ;
 383: GO 439
// for i in units do
 385: LD_ADDR_VAR 0 4
 389: PUSH
 390: LD_VAR 0 1
 394: PUSH
 395: FOR_IN
 396: IFFALSE 437
// if IsOk ( i ) then
 398: LD_VAR 0 4
 402: PPUSH
 403: CALL_OW 302
 407: IFFALSE 435
// begin Say ( i , ident ) ;
 409: LD_VAR 0 4
 413: PPUSH
 414: LD_VAR 0 2
 418: PPUSH
 419: CALL_OW 88
// result := i ;
 423: LD_ADDR_VAR 0 3
 427: PUSH
 428: LD_VAR 0 4
 432: ST_TO_ADDR
// break ;
 433: GO 437
// end ;
 435: GO 395
 437: POP
 438: POP
// end ;
 439: LD_VAR 0 3
 443: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 444: LD_INT 0
 446: PPUSH
 447: PPUSH
// InitUc ;
 448: CALL_OW 18
// InitHc ;
 452: CALL_OW 19
// uc_side := 0 ;
 456: LD_ADDR_OWVAR 20
 460: PUSH
 461: LD_INT 0
 463: ST_TO_ADDR
// uc_nation := 0 ;
 464: LD_ADDR_OWVAR 21
 468: PUSH
 469: LD_INT 0
 471: ST_TO_ADDR
// for i = 1 to amount do
 472: LD_ADDR_VAR 0 4
 476: PUSH
 477: DOUBLE
 478: LD_INT 1
 480: DEC
 481: ST_TO_ADDR
 482: LD_VAR 0 2
 486: PUSH
 487: FOR_TO
 488: IFFALSE 570
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 490: LD_ADDR_OWVAR 29
 494: PUSH
 495: LD_INT 9
 497: PPUSH
 498: LD_INT 12
 500: PPUSH
 501: CALL_OW 12
 505: PUSH
 506: LD_INT 9
 508: PPUSH
 509: LD_INT 12
 511: PPUSH
 512: CALL_OW 12
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 521: LD_ADDR_OWVAR 35
 525: PUSH
 526: LD_INT 1
 528: NEG
 529: PPUSH
 530: LD_INT 1
 532: PPUSH
 533: CALL_OW 12
 537: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 538: LD_INT 0
 540: PPUSH
 541: LD_INT 12
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 551: CALL_OW 44
 555: PPUSH
 556: LD_VAR 0 1
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
// end ;
 568: GO 487
 570: POP
 571: POP
// InitHc ;
 572: CALL_OW 19
// end ;
 576: LD_VAR 0 3
 580: RET
// export function PrepareNature ( forest , swamp ) ; var i ; begin
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 585: LD_VAR 0 1
 589: PPUSH
 590: LD_INT 5
 592: PUSH
 593: LD_INT 4
 595: PUSH
 596: LD_INT 4
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: PUSH
 604: LD_OWVAR 67
 608: ARRAY
 609: PPUSH
 610: CALL 444 0 2
// for i := 1 to 3 do
 614: LD_ADDR_VAR 0 4
 618: PUSH
 619: DOUBLE
 620: LD_INT 1
 622: DEC
 623: ST_TO_ADDR
 624: LD_INT 3
 626: PUSH
 627: FOR_TO
 628: IFFALSE 665
// begin hc_class := 21 ;
 630: LD_ADDR_OWVAR 28
 634: PUSH
 635: LD_INT 21
 637: ST_TO_ADDR
// hc_gallery :=  ;
 638: LD_ADDR_OWVAR 33
 642: PUSH
 643: LD_STRING 
 645: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 646: CALL_OW 44
 650: PPUSH
 651: LD_VAR 0 1
 655: PPUSH
 656: LD_INT 0
 658: PPUSH
 659: CALL_OW 49
// end ;
 663: GO 627
 665: POP
 666: POP
// for i := 1 to 3 do
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: DOUBLE
 673: LD_INT 1
 675: DEC
 676: ST_TO_ADDR
 677: LD_INT 3
 679: PUSH
 680: FOR_TO
 681: IFFALSE 718
// begin hc_class := 18 ;
 683: LD_ADDR_OWVAR 28
 687: PUSH
 688: LD_INT 18
 690: ST_TO_ADDR
// hc_gallery :=  ;
 691: LD_ADDR_OWVAR 33
 695: PUSH
 696: LD_STRING 
 698: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 699: CALL_OW 44
 703: PPUSH
 704: LD_VAR 0 1
 708: PPUSH
 709: LD_INT 0
 711: PPUSH
 712: CALL_OW 49
// end ;
 716: GO 680
 718: POP
 719: POP
// for i := 1 to 3 do
 720: LD_ADDR_VAR 0 4
 724: PUSH
 725: DOUBLE
 726: LD_INT 1
 728: DEC
 729: ST_TO_ADDR
 730: LD_INT 3
 732: PUSH
 733: FOR_TO
 734: IFFALSE 771
// begin hc_class := 13 ;
 736: LD_ADDR_OWVAR 28
 740: PUSH
 741: LD_INT 13
 743: ST_TO_ADDR
// hc_gallery :=  ;
 744: LD_ADDR_OWVAR 33
 748: PUSH
 749: LD_STRING 
 751: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 752: CALL_OW 44
 756: PPUSH
 757: LD_VAR 0 1
 761: PPUSH
 762: LD_INT 0
 764: PPUSH
 765: CALL_OW 49
// end ;
 769: GO 733
 771: POP
 772: POP
// for i := 1 to 4 do
 773: LD_ADDR_VAR 0 4
 777: PUSH
 778: DOUBLE
 779: LD_INT 1
 781: DEC
 782: ST_TO_ADDR
 783: LD_INT 4
 785: PUSH
 786: FOR_TO
 787: IFFALSE 824
// begin hc_class := class_frog ;
 789: LD_ADDR_OWVAR 28
 793: PUSH
 794: LD_INT 19
 796: ST_TO_ADDR
// hc_gallery :=  ;
 797: LD_ADDR_OWVAR 33
 801: PUSH
 802: LD_STRING 
 804: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 805: CALL_OW 44
 809: PPUSH
 810: LD_VAR 0 2
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end ;
 822: GO 786
 824: POP
 825: POP
// end ;
 826: LD_VAR 0 3
 830: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 831: LD_INT 0
 833: PPUSH
 834: PPUSH
 835: PPUSH
// if not observer or not unit then
 836: LD_VAR 0 1
 840: NOT
 841: PUSH
 842: LD_VAR 0 2
 846: NOT
 847: OR
 848: IFFALSE 852
// exit ;
 850: GO 900
// if not See ( GetSide ( observer ) , unit ) then
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 255
 861: PPUSH
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 292
 871: NOT
 872: IFFALSE 876
// exit ;
 874: GO 900
// result := GetDistUnits ( observer , unit ) < 12 ;
 876: LD_ADDR_VAR 0 3
 880: PUSH
 881: LD_VAR 0 1
 885: PPUSH
 886: LD_VAR 0 2
 890: PPUSH
 891: CALL_OW 296
 895: PUSH
 896: LD_INT 12
 898: LESS
 899: ST_TO_ADDR
// end ;
 900: LD_VAR 0 3
 904: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 905: LD_INT 0
 907: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 908: LD_VAR 0 2
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: PPUSH
 917: LD_VAR 0 2
 921: PUSH
 922: LD_INT 2
 924: ARRAY
 925: PPUSH
 926: CALL_OW 488
 930: PUSH
 931: LD_VAR 0 2
 935: PUSH
 936: LD_INT 1
 938: ARRAY
 939: PPUSH
 940: LD_VAR 0 2
 944: PUSH
 945: LD_INT 2
 947: ARRAY
 948: PPUSH
 949: CALL_OW 428
 953: PUSH
 954: LD_INT 0
 956: EQUAL
 957: AND
 958: IFFALSE 992
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 960: LD_VAR 0 1
 964: PPUSH
 965: LD_VAR 0 2
 969: PUSH
 970: LD_INT 1
 972: ARRAY
 973: PPUSH
 974: LD_VAR 0 2
 978: PUSH
 979: LD_INT 2
 981: ARRAY
 982: PPUSH
 983: LD_VAR 0 3
 987: PPUSH
 988: CALL_OW 48
// end ;
 992: LD_VAR 0 4
 996: RET
// export function Video ( mode ) ; begin
 997: LD_INT 0
 999: PPUSH
// ingame_video = mode ;
1000: LD_ADDR_OWVAR 52
1004: PUSH
1005: LD_VAR 0 1
1009: ST_TO_ADDR
// interface_hidden = mode ;
1010: LD_ADDR_OWVAR 54
1014: PUSH
1015: LD_VAR 0 1
1019: ST_TO_ADDR
// end ;
1020: LD_VAR 0 2
1024: RET
// export function ReverseArray ( array ) ; var i ; begin
1025: LD_INT 0
1027: PPUSH
1028: PPUSH
// if not array then
1029: LD_VAR 0 1
1033: NOT
1034: IFFALSE 1038
// exit ;
1036: GO 1096
// result := [ ] ;
1038: LD_ADDR_VAR 0 2
1042: PUSH
1043: EMPTY
1044: ST_TO_ADDR
// for i := 1 to array do
1045: LD_ADDR_VAR 0 3
1049: PUSH
1050: DOUBLE
1051: LD_INT 1
1053: DEC
1054: ST_TO_ADDR
1055: LD_VAR 0 1
1059: PUSH
1060: FOR_TO
1061: IFFALSE 1094
// result := Insert ( result , 1 , array [ i ] ) ;
1063: LD_ADDR_VAR 0 2
1067: PUSH
1068: LD_VAR 0 2
1072: PPUSH
1073: LD_INT 1
1075: PPUSH
1076: LD_VAR 0 1
1080: PUSH
1081: LD_VAR 0 3
1085: ARRAY
1086: PPUSH
1087: CALL_OW 2
1091: ST_TO_ADDR
1092: GO 1060
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 2
1100: RET
// export function ComExit ( unit ) ; begin
1101: LD_INT 0
1103: PPUSH
// result := IsInUnit ( unit ) ;
1104: LD_ADDR_VAR 0 2
1108: PUSH
1109: LD_VAR 0 1
1113: PPUSH
1114: CALL_OW 310
1118: ST_TO_ADDR
// if not result then
1119: LD_VAR 0 2
1123: NOT
1124: IFFALSE 1128
// exit ;
1126: GO 1163
// if GetType ( result ) = unit_vehicle then
1128: LD_VAR 0 2
1132: PPUSH
1133: CALL_OW 247
1137: PUSH
1138: LD_INT 2
1140: EQUAL
1141: IFFALSE 1154
// ComExitVehicle ( unit ) else
1143: LD_VAR 0 1
1147: PPUSH
1148: CALL_OW 121
1152: GO 1163
// ComExitBuilding ( unit ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: CALL_OW 122
// end ;
1163: LD_VAR 0 2
1167: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1168: LD_INT 0
1170: PPUSH
1171: PPUSH
// if not side or not nation then
1172: LD_VAR 0 1
1176: NOT
1177: PUSH
1178: LD_VAR 0 2
1182: NOT
1183: OR
1184: IFFALSE 1188
// exit ;
1186: GO 1952
// case nation of nation_american :
1188: LD_VAR 0 2
1192: PUSH
1193: LD_INT 1
1195: DOUBLE
1196: EQUAL
1197: IFTRUE 1201
1199: GO 1415
1201: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1202: LD_ADDR_VAR 0 4
1206: PUSH
1207: LD_INT 35
1209: PUSH
1210: LD_INT 45
1212: PUSH
1213: LD_INT 46
1215: PUSH
1216: LD_INT 47
1218: PUSH
1219: LD_INT 82
1221: PUSH
1222: LD_INT 83
1224: PUSH
1225: LD_INT 84
1227: PUSH
1228: LD_INT 85
1230: PUSH
1231: LD_INT 86
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: LD_INT 2
1239: PUSH
1240: LD_INT 6
1242: PUSH
1243: LD_INT 15
1245: PUSH
1246: LD_INT 16
1248: PUSH
1249: LD_INT 7
1251: PUSH
1252: LD_INT 12
1254: PUSH
1255: LD_INT 13
1257: PUSH
1258: LD_INT 10
1260: PUSH
1261: LD_INT 14
1263: PUSH
1264: LD_INT 20
1266: PUSH
1267: LD_INT 21
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: LD_INT 25
1275: PUSH
1276: LD_INT 32
1278: PUSH
1279: LD_INT 27
1281: PUSH
1282: LD_INT 36
1284: PUSH
1285: LD_INT 69
1287: PUSH
1288: LD_INT 39
1290: PUSH
1291: LD_INT 34
1293: PUSH
1294: LD_INT 40
1296: PUSH
1297: LD_INT 48
1299: PUSH
1300: LD_INT 49
1302: PUSH
1303: LD_INT 50
1305: PUSH
1306: LD_INT 51
1308: PUSH
1309: LD_INT 52
1311: PUSH
1312: LD_INT 53
1314: PUSH
1315: LD_INT 54
1317: PUSH
1318: LD_INT 55
1320: PUSH
1321: LD_INT 56
1323: PUSH
1324: LD_INT 57
1326: PUSH
1327: LD_INT 58
1329: PUSH
1330: LD_INT 59
1332: PUSH
1333: LD_INT 60
1335: PUSH
1336: LD_INT 61
1338: PUSH
1339: LD_INT 62
1341: PUSH
1342: LD_INT 80
1344: PUSH
1345: LD_INT 82
1347: PUSH
1348: LD_INT 83
1350: PUSH
1351: LD_INT 84
1353: PUSH
1354: LD_INT 85
1356: PUSH
1357: LD_INT 86
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: ST_TO_ADDR
1413: GO 1876
1415: LD_INT 2
1417: DOUBLE
1418: EQUAL
1419: IFTRUE 1423
1421: GO 1645
1423: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1424: LD_ADDR_VAR 0 4
1428: PUSH
1429: LD_INT 35
1431: PUSH
1432: LD_INT 45
1434: PUSH
1435: LD_INT 46
1437: PUSH
1438: LD_INT 47
1440: PUSH
1441: LD_INT 82
1443: PUSH
1444: LD_INT 83
1446: PUSH
1447: LD_INT 84
1449: PUSH
1450: LD_INT 85
1452: PUSH
1453: LD_INT 87
1455: PUSH
1456: LD_INT 70
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 11
1464: PUSH
1465: LD_INT 3
1467: PUSH
1468: LD_INT 4
1470: PUSH
1471: LD_INT 5
1473: PUSH
1474: LD_INT 6
1476: PUSH
1477: LD_INT 15
1479: PUSH
1480: LD_INT 18
1482: PUSH
1483: LD_INT 7
1485: PUSH
1486: LD_INT 17
1488: PUSH
1489: LD_INT 8
1491: PUSH
1492: LD_INT 20
1494: PUSH
1495: LD_INT 21
1497: PUSH
1498: LD_INT 22
1500: PUSH
1501: LD_INT 72
1503: PUSH
1504: LD_INT 26
1506: PUSH
1507: LD_INT 69
1509: PUSH
1510: LD_INT 39
1512: PUSH
1513: LD_INT 40
1515: PUSH
1516: LD_INT 41
1518: PUSH
1519: LD_INT 42
1521: PUSH
1522: LD_INT 43
1524: PUSH
1525: LD_INT 48
1527: PUSH
1528: LD_INT 49
1530: PUSH
1531: LD_INT 50
1533: PUSH
1534: LD_INT 51
1536: PUSH
1537: LD_INT 52
1539: PUSH
1540: LD_INT 53
1542: PUSH
1543: LD_INT 54
1545: PUSH
1546: LD_INT 55
1548: PUSH
1549: LD_INT 56
1551: PUSH
1552: LD_INT 60
1554: PUSH
1555: LD_INT 61
1557: PUSH
1558: LD_INT 62
1560: PUSH
1561: LD_INT 66
1563: PUSH
1564: LD_INT 67
1566: PUSH
1567: LD_INT 68
1569: PUSH
1570: LD_INT 81
1572: PUSH
1573: LD_INT 82
1575: PUSH
1576: LD_INT 83
1578: PUSH
1579: LD_INT 84
1581: PUSH
1582: LD_INT 85
1584: PUSH
1585: LD_INT 87
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
1643: GO 1876
1645: LD_INT 3
1647: DOUBLE
1648: EQUAL
1649: IFTRUE 1653
1651: GO 1875
1653: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1654: LD_ADDR_VAR 0 4
1658: PUSH
1659: LD_INT 46
1661: PUSH
1662: LD_INT 47
1664: PUSH
1665: LD_INT 1
1667: PUSH
1668: LD_INT 2
1670: PUSH
1671: LD_INT 82
1673: PUSH
1674: LD_INT 83
1676: PUSH
1677: LD_INT 84
1679: PUSH
1680: LD_INT 85
1682: PUSH
1683: LD_INT 86
1685: PUSH
1686: LD_INT 11
1688: PUSH
1689: LD_INT 9
1691: PUSH
1692: LD_INT 20
1694: PUSH
1695: LD_INT 19
1697: PUSH
1698: LD_INT 21
1700: PUSH
1701: LD_INT 24
1703: PUSH
1704: LD_INT 22
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 28
1712: PUSH
1713: LD_INT 29
1715: PUSH
1716: LD_INT 30
1718: PUSH
1719: LD_INT 31
1721: PUSH
1722: LD_INT 37
1724: PUSH
1725: LD_INT 38
1727: PUSH
1728: LD_INT 32
1730: PUSH
1731: LD_INT 27
1733: PUSH
1734: LD_INT 33
1736: PUSH
1737: LD_INT 69
1739: PUSH
1740: LD_INT 39
1742: PUSH
1743: LD_INT 34
1745: PUSH
1746: LD_INT 40
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: LD_INT 23
1754: PUSH
1755: LD_INT 44
1757: PUSH
1758: LD_INT 48
1760: PUSH
1761: LD_INT 49
1763: PUSH
1764: LD_INT 50
1766: PUSH
1767: LD_INT 51
1769: PUSH
1770: LD_INT 52
1772: PUSH
1773: LD_INT 53
1775: PUSH
1776: LD_INT 54
1778: PUSH
1779: LD_INT 55
1781: PUSH
1782: LD_INT 56
1784: PUSH
1785: LD_INT 57
1787: PUSH
1788: LD_INT 58
1790: PUSH
1791: LD_INT 59
1793: PUSH
1794: LD_INT 63
1796: PUSH
1797: LD_INT 64
1799: PUSH
1800: LD_INT 65
1802: PUSH
1803: LD_INT 82
1805: PUSH
1806: LD_INT 83
1808: PUSH
1809: LD_INT 84
1811: PUSH
1812: LD_INT 85
1814: PUSH
1815: LD_INT 86
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: ST_TO_ADDR
1873: GO 1876
1875: POP
// if state > - 1 and state < 3 then
1876: LD_VAR 0 3
1880: PUSH
1881: LD_INT 1
1883: NEG
1884: GREATER
1885: PUSH
1886: LD_VAR 0 3
1890: PUSH
1891: LD_INT 3
1893: LESS
1894: AND
1895: IFFALSE 1952
// for i in result do
1897: LD_ADDR_VAR 0 5
1901: PUSH
1902: LD_VAR 0 4
1906: PUSH
1907: FOR_IN
1908: IFFALSE 1950
// if GetTech ( i , side ) <> state then
1910: LD_VAR 0 5
1914: PPUSH
1915: LD_VAR 0 1
1919: PPUSH
1920: CALL_OW 321
1924: PUSH
1925: LD_VAR 0 3
1929: NONEQUAL
1930: IFFALSE 1948
// result := result diff i ;
1932: LD_ADDR_VAR 0 4
1936: PUSH
1937: LD_VAR 0 4
1941: PUSH
1942: LD_VAR 0 5
1946: DIFF
1947: ST_TO_ADDR
1948: GO 1907
1950: POP
1951: POP
// end ;
1952: LD_VAR 0 4
1956: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
1957: LD_INT 0
1959: PPUSH
1960: PPUSH
1961: PPUSH
1962: PPUSH
// if not list then
1963: LD_VAR 0 3
1967: NOT
1968: IFFALSE 1972
// exit ;
1970: GO 2280
// result := [ ] ;
1972: LD_ADDR_VAR 0 5
1976: PUSH
1977: EMPTY
1978: ST_TO_ADDR
// for i in list do
1979: LD_ADDR_VAR 0 6
1983: PUSH
1984: LD_VAR 0 3
1988: PUSH
1989: FOR_IN
1990: IFFALSE 2192
// begin tmp := GetDistUnitXY ( i , x , y ) ;
1992: LD_ADDR_VAR 0 8
1996: PUSH
1997: LD_VAR 0 6
2001: PPUSH
2002: LD_VAR 0 1
2006: PPUSH
2007: LD_VAR 0 2
2011: PPUSH
2012: CALL_OW 297
2016: ST_TO_ADDR
// if not result then
2017: LD_VAR 0 5
2021: NOT
2022: IFFALSE 2048
// result := [ [ i , tmp ] ] else
2024: LD_ADDR_VAR 0 5
2028: PUSH
2029: LD_VAR 0 6
2033: PUSH
2034: LD_VAR 0 8
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: EMPTY
2044: LIST
2045: ST_TO_ADDR
2046: GO 2190
// begin if result [ result ] [ 2 ] < tmp then
2048: LD_VAR 0 5
2052: PUSH
2053: LD_VAR 0 5
2057: ARRAY
2058: PUSH
2059: LD_INT 2
2061: ARRAY
2062: PUSH
2063: LD_VAR 0 8
2067: LESS
2068: IFFALSE 2110
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 6
2093: PUSH
2094: LD_VAR 0 8
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PPUSH
2103: CALL_OW 2
2107: ST_TO_ADDR
2108: GO 2190
// for j = 1 to result do
2110: LD_ADDR_VAR 0 7
2114: PUSH
2115: DOUBLE
2116: LD_INT 1
2118: DEC
2119: ST_TO_ADDR
2120: LD_VAR 0 5
2124: PUSH
2125: FOR_TO
2126: IFFALSE 2188
// begin if tmp < result [ j ] [ 2 ] then
2128: LD_VAR 0 8
2132: PUSH
2133: LD_VAR 0 5
2137: PUSH
2138: LD_VAR 0 7
2142: ARRAY
2143: PUSH
2144: LD_INT 2
2146: ARRAY
2147: LESS
2148: IFFALSE 2186
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2150: LD_ADDR_VAR 0 5
2154: PUSH
2155: LD_VAR 0 5
2159: PPUSH
2160: LD_VAR 0 7
2164: PPUSH
2165: LD_VAR 0 6
2169: PUSH
2170: LD_VAR 0 8
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PPUSH
2179: CALL_OW 2
2183: ST_TO_ADDR
// break ;
2184: GO 2188
// end ; end ;
2186: GO 2125
2188: POP
2189: POP
// end ; end ;
2190: GO 1989
2192: POP
2193: POP
// if result and not asc then
2194: LD_VAR 0 5
2198: PUSH
2199: LD_VAR 0 4
2203: NOT
2204: AND
2205: IFFALSE 2280
// begin tmp := result ;
2207: LD_ADDR_VAR 0 8
2211: PUSH
2212: LD_VAR 0 5
2216: ST_TO_ADDR
// for i = tmp downto 1 do
2217: LD_ADDR_VAR 0 6
2221: PUSH
2222: DOUBLE
2223: LD_VAR 0 8
2227: INC
2228: ST_TO_ADDR
2229: LD_INT 1
2231: PUSH
2232: FOR_DOWNTO
2233: IFFALSE 2278
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2235: LD_ADDR_VAR 0 5
2239: PUSH
2240: LD_VAR 0 5
2244: PPUSH
2245: LD_VAR 0 8
2249: PUSH
2250: LD_VAR 0 6
2254: MINUS
2255: PUSH
2256: LD_INT 1
2258: PLUS
2259: PPUSH
2260: LD_VAR 0 8
2264: PUSH
2265: LD_VAR 0 6
2269: ARRAY
2270: PPUSH
2271: CALL_OW 1
2275: ST_TO_ADDR
2276: GO 2232
2278: POP
2279: POP
// end ; end ;
2280: LD_VAR 0 5
2284: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
2285: LD_INT 0
2287: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
2288: LD_ADDR_VAR 0 4
2292: PUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 250
2302: PPUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 251
2312: PPUSH
2313: LD_VAR 0 2
2317: PPUSH
2318: LD_VAR 0 3
2322: PPUSH
2323: CALL 1957 0 4
2327: ST_TO_ADDR
// end ;
2328: LD_VAR 0 4
2332: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
2333: LD_INT 0
2335: PPUSH
2336: PPUSH
2337: PPUSH
2338: PPUSH
2339: PPUSH
// if not unit then
2340: LD_VAR 0 1
2344: NOT
2345: IFFALSE 2349
// exit ;
2347: GO 2551
// side := GetSide ( unit ) ;
2349: LD_ADDR_VAR 0 4
2353: PUSH
2354: LD_VAR 0 1
2358: PPUSH
2359: CALL_OW 255
2363: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
2364: LD_ADDR_VAR 0 5
2368: PUSH
2369: LD_INT 22
2371: PUSH
2372: LD_VAR 0 4
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 30
2383: PUSH
2384: LD_VAR 0 2
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PPUSH
2397: CALL_OW 69
2401: ST_TO_ADDR
// if not tmp then
2402: LD_VAR 0 5
2406: NOT
2407: IFFALSE 2411
// exit ;
2409: GO 2551
// tmp := SortByDistanceUnit ( unit , tmp , true ) ;
2411: LD_ADDR_VAR 0 5
2415: PUSH
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_VAR 0 5
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL 2285 0 3
2433: ST_TO_ADDR
// places := 1 ;
2434: LD_ADDR_VAR 0 7
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
2442: LD_VAR 0 2
2446: PUSH
2447: LD_INT 0
2449: PUSH
2450: LD_INT 1
2452: PUSH
2453: LD_INT 4
2455: PUSH
2456: LD_INT 5
2458: PUSH
2459: LD_INT 2
2461: PUSH
2462: LD_INT 3
2464: PUSH
2465: LD_INT 6
2467: PUSH
2468: LD_INT 7
2470: PUSH
2471: LD_INT 8
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: IN
2485: IFFALSE 2495
// places := 6 ;
2487: LD_ADDR_VAR 0 7
2491: PUSH
2492: LD_INT 6
2494: ST_TO_ADDR
// for i in tmp do
2495: LD_ADDR_VAR 0 6
2499: PUSH
2500: LD_VAR 0 5
2504: PUSH
2505: FOR_IN
2506: IFFALSE 2549
// begin if UnitsInside ( i ) - places <= 0 then
2508: LD_VAR 0 6
2512: PPUSH
2513: CALL_OW 313
2517: PUSH
2518: LD_VAR 0 7
2522: MINUS
2523: PUSH
2524: LD_INT 0
2526: LESSEQUAL
2527: IFFALSE 2533
// continue else
2529: GO 2505
2531: GO 2547
// begin result := i ;
2533: LD_ADDR_VAR 0 3
2537: PUSH
2538: LD_VAR 0 6
2542: ST_TO_ADDR
// exit ;
2543: POP
2544: POP
2545: GO 2551
// end ; end ;
2547: GO 2505
2549: POP
2550: POP
// end ;
2551: LD_VAR 0 3
2555: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
2556: LD_INT 0
2558: PPUSH
2559: PPUSH
2560: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
2561: LD_VAR 0 1
2565: NOT
2566: PUSH
2567: LD_VAR 0 2
2571: PUSH
2572: LD_INT 1
2574: PUSH
2575: LD_INT 2
2577: PUSH
2578: LD_INT 3
2580: PUSH
2581: LD_INT 4
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: IN
2590: NOT
2591: OR
2592: IFFALSE 2596
// exit ;
2594: GO 2688
// tmp := [ ] ;
2596: LD_ADDR_VAR 0 5
2600: PUSH
2601: EMPTY
2602: ST_TO_ADDR
// for i in units do
2603: LD_ADDR_VAR 0 4
2607: PUSH
2608: LD_VAR 0 1
2612: PUSH
2613: FOR_IN
2614: IFFALSE 2657
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
2616: LD_ADDR_VAR 0 5
2620: PUSH
2621: LD_VAR 0 5
2625: PPUSH
2626: LD_VAR 0 5
2630: PUSH
2631: LD_INT 1
2633: PLUS
2634: PPUSH
2635: LD_VAR 0 4
2639: PPUSH
2640: LD_VAR 0 2
2644: PPUSH
2645: CALL_OW 259
2649: PPUSH
2650: CALL_OW 2
2654: ST_TO_ADDR
2655: GO 2613
2657: POP
2658: POP
// if not tmp then
2659: LD_VAR 0 5
2663: NOT
2664: IFFALSE 2668
// exit ;
2666: GO 2688
// result := SortListByListDesc ( units , tmp ) ;
2668: LD_ADDR_VAR 0 3
2672: PUSH
2673: LD_VAR 0 1
2677: PPUSH
2678: LD_VAR 0 5
2682: PPUSH
2683: CALL_OW 77
2687: ST_TO_ADDR
// end ;
2688: LD_VAR 0 3
2692: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2693: LD_INT 0
2695: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2696: LD_VAR 0 1
2700: PPUSH
2701: LD_VAR 0 2
2705: PPUSH
2706: LD_VAR 0 3
2710: PPUSH
2711: LD_VAR 0 4
2715: PPUSH
2716: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2720: LD_VAR 0 1
2724: PPUSH
2725: LD_VAR 0 2
2729: PPUSH
2730: LD_VAR 0 3
2734: PPUSH
2735: CALL_OW 331
// end ;
2739: LD_VAR 0 5
2743: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2744: LD_INT 0
2746: PPUSH
// if not units then
2747: LD_VAR 0 1
2751: NOT
2752: IFFALSE 2756
// exit ;
2754: GO 2821
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) , menDialog ) then
2756: LD_VAR 0 1
2760: PPUSH
2761: LD_INT 26
2763: PUSH
2764: LD_INT 1
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PPUSH
2771: CALL_OW 72
2775: PPUSH
2776: LD_VAR 0 2
2780: PPUSH
2781: CALL_OW 88
2785: NOT
2786: IFFALSE 2821
// Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2788: LD_VAR 0 1
2792: PPUSH
2793: LD_INT 26
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PPUSH
2803: CALL_OW 72
2807: PUSH
2808: LD_INT 1
2810: ARRAY
2811: PPUSH
2812: LD_VAR 0 3
2816: PPUSH
2817: CALL_OW 88
// end ; end_of_file
2821: LD_VAR 0 4
2825: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
2826: LD_INT 0
2828: PPUSH
2829: PPUSH
// uc_side := 2 ;
2830: LD_ADDR_OWVAR 20
2834: PUSH
2835: LD_INT 2
2837: ST_TO_ADDR
// uc_nation := 2 ;
2838: LD_ADDR_OWVAR 21
2842: PUSH
2843: LD_INT 2
2845: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2846: LD_ADDR_EXP 6
2850: PUSH
2851: LD_STRING Heike
2853: PPUSH
2854: LD_EXP 1
2858: NOT
2859: PPUSH
2860: LD_EXP 2
2864: PPUSH
2865: CALL 213 0 3
2869: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2870: LD_ADDR_EXP 9
2874: PUSH
2875: LD_STRING Ibrahim
2877: PPUSH
2878: LD_EXP 1
2882: NOT
2883: PPUSH
2884: LD_EXP 2
2888: PPUSH
2889: CALL 213 0 3
2893: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2894: LD_ADDR_EXP 7
2898: PUSH
2899: LD_STRING Givi
2901: PPUSH
2902: LD_EXP 1
2906: NOT
2907: PPUSH
2908: LD_EXP 2
2912: PPUSH
2913: CALL 213 0 3
2917: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2918: LD_ADDR_EXP 10
2922: PUSH
2923: LD_STRING Kamil
2925: PPUSH
2926: LD_EXP 1
2930: NOT
2931: PPUSH
2932: LD_EXP 2
2936: PPUSH
2937: CALL 213 0 3
2941: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2942: LD_ADDR_EXP 11
2946: PUSH
2947: LD_STRING Kaia
2949: PPUSH
2950: LD_EXP 1
2954: NOT
2955: PPUSH
2956: LD_EXP 2
2960: PPUSH
2961: CALL 213 0 3
2965: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2966: LD_ADDR_EXP 12
2970: PUSH
2971: LD_STRING Sophia
2973: PPUSH
2974: LD_EXP 1
2978: NOT
2979: PPUSH
2980: LD_EXP 2
2984: PPUSH
2985: CALL 213 0 3
2989: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2990: LD_ADDR_EXP 13
2994: PUSH
2995: LD_STRING Markov
2997: PPUSH
2998: LD_EXP 1
3002: NOT
3003: PPUSH
3004: LD_EXP 2
3008: PPUSH
3009: CALL 213 0 3
3013: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
3014: LD_ADDR_EXP 17
3018: PUSH
3019: LD_STRING Aviradze
3021: PPUSH
3022: LD_EXP 1
3026: NOT
3027: PPUSH
3028: LD_EXP 2
3032: PPUSH
3033: CALL 213 0 3
3037: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
3038: LD_ADDR_EXP 16
3042: PUSH
3043: LD_STRING Kurt
3045: PPUSH
3046: LD_EXP 1
3050: NOT
3051: PPUSH
3052: LD_EXP 2
3056: PPUSH
3057: CALL 213 0 3
3061: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
3062: LD_ADDR_EXP 8
3066: PUSH
3067: LD_STRING Mike
3069: PPUSH
3070: LD_EXP 1
3074: NOT
3075: PPUSH
3076: LD_EXP 2
3080: PPUSH
3081: CALL 213 0 3
3085: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
3086: LD_ADDR_EXP 15
3090: PUSH
3091: LD_STRING Olaf
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: LD_STRING 
3099: PPUSH
3100: CALL 213 0 3
3104: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
3105: LD_ADDR_EXP 18
3109: PUSH
3110: LD_STRING 04_2_others
3112: PPUSH
3113: CALL_OW 31
3117: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
3118: LD_ADDR_EXP 20
3122: PUSH
3123: LD_STRING 04_2_apes
3125: PPUSH
3126: CALL_OW 31
3130: ST_TO_ADDR
// if hasFlamethrower then
3131: LD_EXP 3
3135: IFFALSE 3366
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
3137: LD_INT 70
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: LD_INT 2
3145: PPUSH
3146: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
3150: LD_ADDR_EXP 19
3154: PUSH
3155: LD_INT 13
3157: PUSH
3158: LD_INT 1
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 27
3166: PUSH
3167: LD_INT 2
3169: PUSH
3170: LD_INT 1000
3172: PUSH
3173: LD_INT 0
3175: PUSH
3176: LD_INT 0
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 13
3194: PUSH
3195: LD_INT 1
3197: PUSH
3198: LD_INT 1
3200: PUSH
3201: LD_INT 25
3203: PUSH
3204: LD_INT 2
3206: PUSH
3207: LD_INT 1000
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 13
3231: PUSH
3232: LD_INT 1
3234: PUSH
3235: LD_INT 1
3237: PUSH
3238: LD_INT 26
3240: PUSH
3241: LD_INT 2
3243: PUSH
3244: LD_INT 1000
3246: PUSH
3247: LD_INT 0
3249: PUSH
3250: LD_INT 0
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: PUSH
3266: LD_INT 13
3268: PUSH
3269: LD_INT 1
3271: PUSH
3272: LD_INT 1
3274: PUSH
3275: LD_INT 27
3277: PUSH
3278: LD_INT 2
3280: PUSH
3281: LD_INT 1000
3283: PUSH
3284: LD_INT 0
3286: PUSH
3287: LD_INT 0
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: PUSH
3303: LD_INT 13
3305: PUSH
3306: LD_INT 1
3308: PUSH
3309: LD_INT 1
3311: PUSH
3312: LD_INT 32
3314: PUSH
3315: LD_INT 2
3317: PUSH
3318: LD_INT 1000
3320: PUSH
3321: LD_INT 0
3323: PUSH
3324: LD_INT 60
3326: PUSH
3327: LD_INT 40
3329: PUSH
3330: LD_INT 20
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: LIST
3337: PUSH
3338: LD_OWVAR 67
3342: ARRAY
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: ST_TO_ADDR
// end else
3364: GO 3580
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
3366: LD_ADDR_EXP 19
3370: PUSH
3371: LD_INT 13
3373: PUSH
3374: LD_INT 1
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: LD_INT 25
3382: PUSH
3383: LD_INT 2
3385: PUSH
3386: LD_INT 1000
3388: PUSH
3389: LD_INT 0
3391: PUSH
3392: LD_INT 0
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PUSH
3408: LD_INT 13
3410: PUSH
3411: LD_INT 1
3413: PUSH
3414: LD_INT 1
3416: PUSH
3417: LD_INT 27
3419: PUSH
3420: LD_INT 2
3422: PUSH
3423: LD_INT 1000
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: LD_INT 0
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: PUSH
3445: LD_INT 13
3447: PUSH
3448: LD_INT 1
3450: PUSH
3451: LD_INT 1
3453: PUSH
3454: LD_INT 24
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: LD_INT 1000
3462: PUSH
3463: LD_INT 0
3465: PUSH
3466: LD_INT 0
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 13
3484: PUSH
3485: LD_INT 1
3487: PUSH
3488: LD_INT 1
3490: PUSH
3491: LD_INT 27
3493: PUSH
3494: LD_INT 2
3496: PUSH
3497: LD_INT 1000
3499: PUSH
3500: LD_INT 0
3502: PUSH
3503: LD_INT 0
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: PUSH
3519: LD_INT 13
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: LD_INT 1
3527: PUSH
3528: LD_INT 32
3530: PUSH
3531: LD_INT 2
3533: PUSH
3534: LD_INT 1000
3536: PUSH
3537: LD_INT 0
3539: PUSH
3540: LD_INT 50
3542: PUSH
3543: LD_INT 30
3545: PUSH
3546: LD_INT 20
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_OWVAR 67
3558: ARRAY
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: ST_TO_ADDR
// end ; uc_side := 5 ;
3580: LD_ADDR_OWVAR 20
3584: PUSH
3585: LD_INT 5
3587: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
3588: LD_ADDR_EXP 14
3592: PUSH
3593: LD_STRING Abdul
3595: PPUSH
3596: LD_INT 0
3598: PPUSH
3599: LD_STRING 
3601: PPUSH
3602: CALL 213 0 3
3606: ST_TO_ADDR
// end ; end_of_file
3607: LD_VAR 0 1
3611: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup ; export function PrepareRussian ; var i , un ; begin
3612: LD_INT 0
3614: PPUSH
3615: PPUSH
3616: PPUSH
// uc_side := 3 ;
3617: LD_ADDR_OWVAR 20
3621: PUSH
3622: LD_INT 3
3624: ST_TO_ADDR
// uc_nation := 3 ;
3625: LD_ADDR_OWVAR 21
3629: PUSH
3630: LD_INT 3
3632: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3633: LD_ADDR_EXP 21
3637: PUSH
3638: EMPTY
3639: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3640: LD_ADDR_EXP 22
3644: PUSH
3645: EMPTY
3646: ST_TO_ADDR
// for i := 1 to 2 do
3647: LD_ADDR_VAR 0 2
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 2
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3796
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3663: LD_INT 0
3665: PPUSH
3666: LD_INT 1
3668: PPUSH
3669: LD_INT 3
3671: PUSH
3672: LD_INT 4
3674: PUSH
3675: LD_INT 5
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: LD_OWVAR 67
3687: ARRAY
3688: PPUSH
3689: CALL_OW 380
// un := CreateHuman ;
3693: LD_ADDR_VAR 0 3
3697: PUSH
3698: CALL_OW 44
3702: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3703: LD_ADDR_EXP 21
3707: PUSH
3708: LD_EXP 21
3712: PPUSH
3713: LD_EXP 21
3717: PUSH
3718: LD_INT 1
3720: PLUS
3721: PPUSH
3722: LD_VAR 0 3
3726: PPUSH
3727: CALL_OW 1
3731: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3732: LD_VAR 0 3
3736: PPUSH
3737: LD_INT 100
3739: PPUSH
3740: LD_INT 63
3742: PPUSH
3743: LD_INT 3
3745: PPUSH
3746: LD_INT 0
3748: PPUSH
3749: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3753: LD_VAR 0 3
3757: PPUSH
3758: LD_INT 97
3760: PPUSH
3761: LD_INT 64
3763: PPUSH
3764: CALL_OW 428
3768: PUSH
3769: LD_INT 98
3771: PPUSH
3772: LD_INT 58
3774: PPUSH
3775: CALL_OW 428
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_VAR 0 2
3788: ARRAY
3789: PPUSH
3790: CALL_OW 120
// end ;
3794: GO 3660
3796: POP
3797: POP
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3798: LD_INT 10
3800: PPUSH
3801: CALL_OW 274
3805: PPUSH
3806: LD_INT 2
3808: PPUSH
3809: LD_INT 300
3811: PPUSH
3812: CALL_OW 277
// for i := 1 to 2 do
3816: LD_ADDR_VAR 0 2
3820: PUSH
3821: DOUBLE
3822: LD_INT 1
3824: DEC
3825: ST_TO_ADDR
3826: LD_INT 2
3828: PUSH
3829: FOR_TO
3830: IFFALSE 3944
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3832: LD_INT 0
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: LD_INT 3
3840: PUSH
3841: LD_INT 4
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_OWVAR 67
3856: ARRAY
3857: PPUSH
3858: CALL_OW 380
// un := CreateHuman ;
3862: LD_ADDR_VAR 0 3
3866: PUSH
3867: CALL_OW 44
3871: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3872: LD_ADDR_EXP 22
3876: PUSH
3877: LD_EXP 22
3881: PPUSH
3882: LD_EXP 22
3886: PUSH
3887: LD_INT 1
3889: PLUS
3890: PPUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: CALL_OW 1
3900: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3901: LD_VAR 0 3
3905: PPUSH
3906: LD_INT 198
3908: PPUSH
3909: LD_INT 106
3911: PPUSH
3912: CALL_OW 428
3916: PUSH
3917: LD_INT 205
3919: PPUSH
3920: LD_INT 114
3922: PPUSH
3923: CALL_OW 428
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_VAR 0 2
3936: ARRAY
3937: PPUSH
3938: CALL_OW 52
// end ;
3942: GO 3829
3944: POP
3945: POP
// for i := 1 to 2 do
3946: LD_ADDR_VAR 0 2
3950: PUSH
3951: DOUBLE
3952: LD_INT 1
3954: DEC
3955: ST_TO_ADDR
3956: LD_INT 2
3958: PUSH
3959: FOR_TO
3960: IFFALSE 4037
// begin PrepareHuman ( false , 2 , 3 ) ;
3962: LD_INT 0
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: CALL_OW 380
// un := CreateHuman ;
3975: LD_ADDR_VAR 0 3
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3985: LD_ADDR_EXP 22
3989: PUSH
3990: LD_EXP 22
3994: PPUSH
3995: LD_EXP 22
3999: PUSH
4000: LD_INT 1
4002: PLUS
4003: PPUSH
4004: LD_VAR 0 3
4008: PPUSH
4009: CALL_OW 1
4013: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
4014: LD_VAR 0 3
4018: PPUSH
4019: LD_INT 204
4021: PPUSH
4022: LD_INT 108
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: LD_INT 0
4030: PPUSH
4031: CALL_OW 50
// end ;
4035: GO 3959
4037: POP
4038: POP
// for i := 1 to [ 4 , 6 , 7 ] [ Difficulty ] do
4039: LD_ADDR_VAR 0 2
4043: PUSH
4044: DOUBLE
4045: LD_INT 1
4047: DEC
4048: ST_TO_ADDR
4049: LD_INT 4
4051: PUSH
4052: LD_INT 6
4054: PUSH
4055: LD_INT 7
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: LIST
4062: PUSH
4063: LD_OWVAR 67
4067: ARRAY
4068: PUSH
4069: FOR_TO
4070: IFFALSE 4198
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4072: LD_INT 0
4074: PPUSH
4075: LD_INT 1
4077: PUSH
4078: LD_INT 1
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: LD_INT 4
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 5
4102: PPUSH
4103: CALL_OW 12
4107: ARRAY
4108: PPUSH
4109: LD_INT 3
4111: PUSH
4112: LD_INT 4
4114: PUSH
4115: LD_INT 5
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
4143: LD_ADDR_EXP 23
4147: PUSH
4148: LD_EXP 23
4152: PPUSH
4153: LD_EXP 23
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// PlaceUnitArea ( un , northGroupArea , false ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 10
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL_OW 49
// ComHold ( un ) ;
4187: LD_VAR 0 3
4191: PPUSH
4192: CALL_OW 140
// end ;
4196: GO 4069
4198: POP
4199: POP
// end ; end_of_file end_of_file
4200: LD_VAR 0 1
4204: RET
// export function Action ; var i , un , veh , tmp ; begin
4205: LD_INT 0
4207: PPUSH
4208: PPUSH
4209: PPUSH
4210: PPUSH
4211: PPUSH
// InGameOn ;
4212: CALL_OW 8
// music_nat := 2 ;
4216: LD_ADDR_OWVAR 71
4220: PUSH
4221: LD_INT 2
4223: ST_TO_ADDR
// music_class := 0 ;
4224: LD_ADDR_OWVAR 72
4228: PUSH
4229: LD_INT 0
4231: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
4232: LD_INT 7
4234: PPUSH
4235: LD_INT 6
4237: PPUSH
4238: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
4242: LD_INT 7
4244: PPUSH
4245: LD_INT 6
4247: PPUSH
4248: LD_INT 2
4250: PPUSH
4251: LD_INT 20
4253: NEG
4254: PPUSH
4255: CALL 2693 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
4259: LD_ADDR_VAR 0 5
4263: PUSH
4264: LD_EXP 6
4268: PUSH
4269: LD_EXP 7
4273: PUSH
4274: LD_EXP 8
4278: PUSH
4279: LD_EXP 9
4283: PUSH
4284: LD_EXP 10
4288: PUSH
4289: LD_EXP 11
4293: PUSH
4294: LD_EXP 12
4298: PUSH
4299: LD_EXP 13
4303: PUSH
4304: LD_EXP 17
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: ST_TO_ADDR
// tmp := tmp diff 0 ;
4320: LD_ADDR_VAR 0 5
4324: PUSH
4325: LD_VAR 0 5
4329: PUSH
4330: LD_INT 0
4332: DIFF
4333: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
4334: LD_ADDR_VAR 0 5
4338: PUSH
4339: LD_VAR 0 5
4343: PPUSH
4344: LD_INT 3
4346: PPUSH
4347: CALL 2556 0 2
4351: ST_TO_ADDR
// for i in heikeVehicles do
4352: LD_ADDR_VAR 0 2
4356: PUSH
4357: LD_EXP 19
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4562
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
4365: LD_INT 5
4367: PPUSH
4368: LD_VAR 0 2
4372: PUSH
4373: LD_INT 5
4375: ARRAY
4376: PPUSH
4377: LD_VAR 0 2
4381: PUSH
4382: LD_INT 1
4384: ARRAY
4385: PPUSH
4386: LD_VAR 0 2
4390: PUSH
4391: LD_INT 2
4393: ARRAY
4394: PPUSH
4395: LD_VAR 0 2
4399: PUSH
4400: LD_INT 3
4402: ARRAY
4403: PPUSH
4404: LD_VAR 0 2
4408: PUSH
4409: LD_INT 4
4411: ARRAY
4412: PPUSH
4413: LD_INT 34
4415: PPUSH
4416: CALL 276 0 7
// veh := CreateVehicle ;
4420: LD_ADDR_VAR 0 4
4424: PUSH
4425: CALL_OW 45
4429: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
4430: LD_VAR 0 2
4434: PUSH
4435: LD_INT 4
4437: ARRAY
4438: PUSH
4439: LD_INT 51
4441: PUSH
4442: LD_INT 32
4444: PUSH
4445: LD_INT 12
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: LIST
4452: IN
4453: IFFALSE 4533
// begin if i [ 7 ] [ 1 ] then
4455: LD_VAR 0 2
4459: PUSH
4460: LD_INT 7
4462: ARRAY
4463: PUSH
4464: LD_INT 1
4466: ARRAY
4467: IFFALSE 4494
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
4469: LD_VAR 0 4
4473: PPUSH
4474: LD_INT 1
4476: PPUSH
4477: LD_VAR 0 2
4481: PUSH
4482: LD_INT 7
4484: ARRAY
4485: PUSH
4486: LD_INT 1
4488: ARRAY
4489: PPUSH
4490: CALL_OW 291
// if i [ 7 ] [ 2 ] then
4494: LD_VAR 0 2
4498: PUSH
4499: LD_INT 7
4501: ARRAY
4502: PUSH
4503: LD_INT 2
4505: ARRAY
4506: IFFALSE 4533
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
4508: LD_VAR 0 4
4512: PPUSH
4513: LD_INT 2
4515: PPUSH
4516: LD_VAR 0 2
4520: PUSH
4521: LD_INT 7
4523: ARRAY
4524: PUSH
4525: LD_INT 2
4527: ARRAY
4528: PPUSH
4529: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
4545: LD_VAR 0 4
4549: PPUSH
4550: LD_INT 4
4552: PPUSH
4553: LD_INT 0
4555: PPUSH
4556: CALL_OW 49
// end ;
4560: GO 4362
4562: POP
4563: POP
// if tmp then
4564: LD_VAR 0 5
4568: IFFALSE 4623
// for i in tmp union heikeApes do
4570: LD_ADDR_VAR 0 2
4574: PUSH
4575: LD_VAR 0 5
4579: PUSH
4580: LD_EXP 20
4584: UNION
4585: PUSH
4586: FOR_IN
4587: IFFALSE 4621
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_INT 5
4596: PPUSH
4597: LD_INT 0
4599: PPUSH
4600: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
4604: LD_VAR 0 2
4608: PPUSH
4609: LD_INT 26
4611: PPUSH
4612: LD_INT 9
4614: PPUSH
4615: CALL_OW 118
// end ;
4619: GO 4586
4621: POP
4622: POP
// if heikeSecondSquad then
4623: LD_EXP 18
4627: IFFALSE 4676
// for i in heikeSecondSquad do
4629: LD_ADDR_VAR 0 2
4633: PUSH
4634: LD_EXP 18
4638: PUSH
4639: FOR_IN
4640: IFFALSE 4674
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
4642: LD_VAR 0 2
4646: PPUSH
4647: LD_INT 6
4649: PPUSH
4650: LD_INT 0
4652: PPUSH
4653: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
4657: LD_VAR 0 2
4661: PPUSH
4662: LD_INT 26
4664: PPUSH
4665: LD_INT 9
4667: PPUSH
4668: CALL_OW 118
// end ;
4672: GO 4639
4674: POP
4675: POP
// if heikeApes then
4676: LD_EXP 20
4680: IFFALSE 4723
// for i in heikeApes do
4682: LD_ADDR_VAR 0 2
4686: PUSH
4687: LD_EXP 20
4691: PUSH
4692: FOR_IN
4693: IFFALSE 4721
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
4695: LD_VAR 0 2
4699: PPUSH
4700: LD_INT 7
4702: PPUSH
4703: LD_INT 0
4705: PPUSH
4706: CALL_OW 49
// ComHold ( i ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: CALL_OW 140
// end ;
4719: GO 4692
4721: POP
4722: POP
// if Kurt then
4723: LD_EXP 16
4727: IFFALSE 4759
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
4729: LD_EXP 16
4733: PPUSH
4734: LD_INT 8
4736: PPUSH
4737: LD_INT 0
4739: PPUSH
4740: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
4744: LD_EXP 16
4748: PPUSH
4749: LD_INT 42
4751: PPUSH
4752: LD_INT 32
4754: PPUSH
4755: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
4759: LD_EXP 6
4763: PPUSH
4764: LD_STRING DH-Start-1
4766: PPUSH
4767: CALL_OW 88
// if Givi then
4771: LD_EXP 7
4775: IFFALSE 5038
// begin Say ( Givi , DG-Start-2-5 ) ;
4777: LD_EXP 7
4781: PPUSH
4782: LD_STRING DG-Start-2-5
4784: PPUSH
4785: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
4789: LD_EXP 6
4793: PPUSH
4794: LD_STRING DH-Start-3
4796: PPUSH
4797: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
4801: LD_EXP 6
4805: PPUSH
4806: LD_STRING DH-Start-4
4808: PPUSH
4809: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
4813: LD_EXP 7
4817: PPUSH
4818: LD_STRING DG-Start-5
4820: PPUSH
4821: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
4825: LD_EXP 6
4829: PPUSH
4830: LD_STRING DH-Start-6
4832: PPUSH
4833: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
4837: LD_EXP 7
4841: PPUSH
4842: LD_STRING DG-Start-7
4844: PPUSH
4845: CALL_OW 88
// if Mike then
4849: LD_EXP 8
4853: IFFALSE 5026
// begin Say ( Mike , DM-Start-8 ) ;
4855: LD_EXP 8
4859: PPUSH
4860: LD_STRING DM-Start-8
4862: PPUSH
4863: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
4867: LD_EXP 8
4871: PPUSH
4872: LD_STRING DM-Start-9
4874: PPUSH
4875: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
4879: LD_EXP 7
4883: PPUSH
4884: LD_STRING DG-Start-10
4886: PPUSH
4887: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
4891: LD_EXP 7
4895: PPUSH
4896: LD_STRING DG-Start-11
4898: PPUSH
4899: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
4903: LD_EXP 6
4907: PPUSH
4908: LD_STRING DH-Start-12
4910: PPUSH
4911: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
4915: LD_EXP 7
4919: PPUSH
4920: LD_STRING DG-Start-13
4922: PPUSH
4923: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
4927: LD_EXP 7
4931: PPUSH
4932: LD_STRING DG-Start-14
4934: PPUSH
4935: CALL_OW 88
// if Kaia then
4939: LD_EXP 11
4943: IFFALSE 5026
// begin Say ( Kaia , DK-Start-15 ) ;
4945: LD_EXP 11
4949: PPUSH
4950: LD_STRING DK-Start-15
4952: PPUSH
4953: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
4957: LD_EXP 11
4961: PPUSH
4962: LD_STRING DK-Start-16
4964: PPUSH
4965: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
4969: LD_EXP 11
4973: PPUSH
4974: LD_STRING DK-Start-17
4976: PPUSH
4977: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4981: LD_INT 10
4983: PPUSH
4984: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
4988: LD_EXP 7
4992: PPUSH
4993: LD_EXP 11
4997: PPUSH
4998: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
5002: LD_EXP 7
5006: PPUSH
5007: LD_STRING DG-Start-18
5009: PPUSH
5010: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
5014: LD_EXP 11
5018: PPUSH
5019: LD_STRING DK-Start-19
5021: PPUSH
5022: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
5026: LD_EXP 6
5030: PPUSH
5031: LD_STRING DH-Start-20
5033: PPUSH
5034: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
5038: LD_INT 70
5040: PPUSH
5041: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
5045: LD_EXP 14
5049: PPUSH
5050: LD_STRING DShar-Start-21
5052: PPUSH
5053: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
5057: LD_EXP 6
5061: PPUSH
5062: LD_STRING DH-Start-22
5064: PPUSH
5065: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
5069: LD_EXP 14
5073: PPUSH
5074: LD_STRING DShar-Start-23
5076: PPUSH
5077: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
5081: LD_EXP 14
5085: PPUSH
5086: LD_STRING DShar-Start-24
5088: PPUSH
5089: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
5093: LD_EXP 14
5097: PPUSH
5098: LD_STRING DShar-Start-25
5100: PPUSH
5101: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
5105: LD_EXP 14
5109: PPUSH
5110: LD_STRING DShar-Start-26
5112: PPUSH
5113: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
5117: LD_EXP 6
5121: PPUSH
5122: LD_STRING DH-Start-27
5124: PPUSH
5125: CALL_OW 88
// if Kaia then
5129: LD_EXP 11
5133: IFFALSE 5173
// begin ComTurnUnit ( Heike , Kaia ) ;
5135: LD_EXP 6
5139: PPUSH
5140: LD_EXP 11
5144: PPUSH
5145: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
5149: LD_EXP 11
5153: PPUSH
5154: LD_STRING DK-Start-28
5156: PPUSH
5157: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
5161: LD_EXP 6
5165: PPUSH
5166: LD_STRING DH-Start-29
5168: PPUSH
5169: CALL_OW 88
// end ; if Givi then
5173: LD_EXP 7
5177: IFFALSE 5389
// begin ComTurnUnit ( Heike , Givi ) ;
5179: LD_EXP 6
5183: PPUSH
5184: LD_EXP 7
5188: PPUSH
5189: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
5193: LD_EXP 7
5197: PPUSH
5198: LD_EXP 6
5202: PPUSH
5203: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
5207: LD_EXP 6
5211: PPUSH
5212: LD_STRING DH-Start-30
5214: PPUSH
5215: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
5219: LD_EXP 6
5223: PPUSH
5224: LD_STRING DH-Start-31
5226: PPUSH
5227: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
5231: LD_EXP 7
5235: PPUSH
5236: LD_STRING DG-Start-32
5238: PPUSH
5239: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
5243: LD_EXP 6
5247: PPUSH
5248: LD_STRING DH-Start-33
5250: PPUSH
5251: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
5255: LD_EXP 7
5259: PPUSH
5260: LD_STRING DG-Start-34
5262: PPUSH
5263: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
5267: LD_EXP 7
5271: PPUSH
5272: LD_STRING DG-Start-35
5274: PPUSH
5275: CALL_OW 88
// if Kurt and not dialogue_skipped then
5279: LD_EXP 16
5283: PUSH
5284: LD_OWVAR 59
5288: NOT
5289: AND
5290: IFFALSE 5321
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
5292: LD_EXP 16
5296: PPUSH
5297: LD_INT 28
5299: PPUSH
5300: LD_INT 13
5302: PPUSH
5303: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
5307: LD_EXP 16
5311: PPUSH
5312: LD_EXP 6
5316: PPUSH
5317: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
5321: LD_EXP 7
5325: PPUSH
5326: LD_STRING DG-Start-36
5328: PPUSH
5329: CALL_OW 88
// if Kurt then
5333: LD_EXP 16
5337: IFFALSE 5389
// begin Say ( Kurt , DKs-Start-37 ) ;
5339: LD_EXP 16
5343: PPUSH
5344: LD_STRING DKs-Start-37
5346: PPUSH
5347: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
5351: LD_EXP 16
5355: PPUSH
5356: LD_STRING DKs-Start-38
5358: PPUSH
5359: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
5363: LD_EXP 6
5367: PPUSH
5368: LD_EXP 16
5372: PPUSH
5373: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
5377: LD_EXP 6
5381: PPUSH
5382: LD_STRING DH-Start-39
5384: PPUSH
5385: CALL_OW 88
// end ; end ; if HexInfo ( 44 , 25 ) then
5389: LD_INT 44
5391: PPUSH
5392: LD_INT 25
5394: PPUSH
5395: CALL_OW 428
5399: IFFALSE 5416
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
5401: LD_INT 44
5403: PPUSH
5404: LD_INT 25
5406: PPUSH
5407: CALL_OW 428
5411: PPUSH
5412: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
5416: LD_EXP 15
5420: PPUSH
5421: LD_INT 5
5423: PPUSH
5424: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
5428: LD_EXP 15
5432: PPUSH
5433: LD_INT 44
5435: PPUSH
5436: LD_INT 25
5438: PPUSH
5439: LD_INT 0
5441: PPUSH
5442: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
5446: LD_EXP 15
5450: PPUSH
5451: LD_INT 29
5453: PPUSH
5454: LD_INT 12
5456: PPUSH
5457: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5461: LD_INT 35
5463: PPUSH
5464: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
5468: LD_OWVAR 59
5472: PUSH
5473: LD_EXP 6
5477: PPUSH
5478: LD_EXP 15
5482: PPUSH
5483: CALL_OW 296
5487: PUSH
5488: LD_INT 8
5490: LESS
5491: OR
5492: PUSH
5493: LD_EXP 15
5497: PPUSH
5498: LD_INT 26
5500: PPUSH
5501: LD_INT 9
5503: PPUSH
5504: CALL_OW 297
5508: PUSH
5509: LD_INT 6
5511: LESS
5512: OR
5513: IFFALSE 5461
// Say ( Olaf , DO-Scout-1 ) ;
5515: LD_EXP 15
5519: PPUSH
5520: LD_STRING DO-Scout-1
5522: PPUSH
5523: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
5527: LD_EXP 15
5531: PPUSH
5532: LD_EXP 6
5536: PPUSH
5537: CALL_OW 119
// for i in tmp union heikeSecondSquad do
5541: LD_ADDR_VAR 0 2
5545: PUSH
5546: LD_VAR 0 5
5550: PUSH
5551: LD_EXP 18
5555: UNION
5556: PUSH
5557: FOR_IN
5558: IFFALSE 5576
// ComTurnUnit ( i , Olaf ) ;
5560: LD_VAR 0 2
5564: PPUSH
5565: LD_EXP 15
5569: PPUSH
5570: CALL_OW 119
5574: GO 5557
5576: POP
5577: POP
// wait ( 0 0$0.3 ) ;
5578: LD_INT 10
5580: PPUSH
5581: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
5585: LD_EXP 6
5589: PPUSH
5590: LD_EXP 15
5594: PPUSH
5595: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
5599: LD_EXP 6
5603: PPUSH
5604: LD_EXP 15
5608: PPUSH
5609: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
5613: LD_EXP 6
5617: PPUSH
5618: LD_STRING DH-Scout-2
5620: PPUSH
5621: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
5625: LD_EXP 15
5629: PPUSH
5630: LD_STRING DO-Scout-3
5632: PPUSH
5633: CALL_OW 88
// if Mike and Givi then
5637: LD_EXP 8
5641: PUSH
5642: LD_EXP 7
5646: AND
5647: IFFALSE 5663
// Say ( Olaf , DO-Scout-4 ) else
5649: LD_EXP 15
5653: PPUSH
5654: LD_STRING DO-Scout-4
5656: PPUSH
5657: CALL_OW 88
5661: GO 5763
// begin if Mike then
5663: LD_EXP 8
5667: IFFALSE 5695
// begin Say ( Olaf , DO-Scout-a-4 ) ;
5669: LD_EXP 15
5673: PPUSH
5674: LD_STRING DO-Scout-a-4
5676: PPUSH
5677: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
5681: LD_EXP 6
5685: PPUSH
5686: LD_STRING DH-Scout-a-5
5688: PPUSH
5689: CALL_OW 88
// end else
5693: GO 5763
// if Givi then
5695: LD_EXP 7
5699: IFFALSE 5727
// begin Say ( Olaf , DO-Scout-b-4 ) ;
5701: LD_EXP 15
5705: PPUSH
5706: LD_STRING DO-Scout-b-4
5708: PPUSH
5709: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
5713: LD_EXP 6
5717: PPUSH
5718: LD_STRING DH-Scout-b-5
5720: PPUSH
5721: CALL_OW 88
// end else
5725: GO 5763
// begin Say ( Olaf , DO-Scout-f-4 ) ;
5727: LD_EXP 15
5731: PPUSH
5732: LD_STRING DO-Scout-f-4
5734: PPUSH
5735: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
5739: LD_EXP 6
5743: PPUSH
5744: LD_STRING DH-Scout-f-5
5746: PPUSH
5747: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
5751: LD_EXP 15
5755: PPUSH
5756: LD_STRING DO-Scout-f-6
5758: PPUSH
5759: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
5763: LD_EXP 6
5767: PPUSH
5768: LD_STRING DH-Scout-5
5770: PPUSH
5771: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
5775: LD_EXP 15
5779: PPUSH
5780: LD_STRING DO-Scout-6
5782: PPUSH
5783: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
5787: LD_EXP 15
5791: PPUSH
5792: LD_STRING DO-Scout-7
5794: PPUSH
5795: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
5799: LD_EXP 6
5803: PPUSH
5804: LD_STRING DH-Scout-8
5806: PPUSH
5807: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
5811: LD_EXP 6
5815: PPUSH
5816: LD_STRING DH-Scout-9
5818: PPUSH
5819: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
5823: LD_EXP 15
5827: PPUSH
5828: LD_STRING DO-Scout-10
5830: PPUSH
5831: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
5835: LD_EXP 15
5839: PPUSH
5840: LD_STRING DO-Scout-12
5842: PPUSH
5843: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
5847: LD_EXP 15
5851: PPUSH
5852: LD_STRING DO-Scout-13
5854: PPUSH
5855: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
5859: LD_EXP 15
5863: PPUSH
5864: LD_STRING DO-Scout-14
5866: PPUSH
5867: CALL_OW 88
// if Givi then
5871: LD_EXP 7
5875: IFFALSE 5901
// begin Say ( Givi , DG-Scout-15 ) ;
5877: LD_EXP 7
5881: PPUSH
5882: LD_STRING DG-Scout-15
5884: PPUSH
5885: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
5889: LD_EXP 11
5893: PPUSH
5894: LD_STRING DK-Scout-16
5896: PPUSH
5897: CALL_OW 88
// end ; if not dialogue_skipped then
5901: LD_OWVAR 59
5905: NOT
5906: IFFALSE 6025
// begin async ;
5908: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
5909: LD_EXP 15
5913: PPUSH
5914: LD_STRING DO-Scout-17
5916: PPUSH
5917: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
5921: LD_INT 55
5923: PPUSH
5924: LD_INT 77
5926: PPUSH
5927: LD_INT 2
5929: PPUSH
5930: LD_INT 6
5932: NEG
5933: PPUSH
5934: CALL 2693 0 4
// wait ( 10 ) ;
5938: LD_INT 10
5940: PPUSH
5941: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
5945: LD_INT 55
5947: PPUSH
5948: LD_INT 77
5950: PPUSH
5951: CALL_OW 84
// wait ( 0 0$5 ) ;
5955: LD_INT 175
5957: PPUSH
5958: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
5962: LD_EXP 15
5966: PPUSH
5967: LD_STRING DO-Scout-18
5969: PPUSH
5970: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
5974: LD_INT 204
5976: PPUSH
5977: LD_INT 107
5979: PPUSH
5980: LD_INT 2
5982: PPUSH
5983: LD_INT 12
5985: NEG
5986: PPUSH
5987: CALL 2693 0 4
// wait ( 10 ) ;
5991: LD_INT 10
5993: PPUSH
5994: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
5998: LD_INT 204
6000: PPUSH
6001: LD_INT 107
6003: PPUSH
6004: CALL_OW 84
// wait ( 0 0$5 ) ;
6008: LD_INT 175
6010: PPUSH
6011: CALL_OW 67
// sync ;
6015: SYNC
// CenterNowOnUnits ( Heike ) ;
6016: LD_EXP 6
6020: PPUSH
6021: CALL_OW 87
// end ; Say ( Olaf , DO-Scout-19 ) ;
6025: LD_EXP 15
6029: PPUSH
6030: LD_STRING DO-Scout-19
6032: PPUSH
6033: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
6037: LD_EXP 15
6041: PPUSH
6042: LD_STRING DO-Scout-20
6044: PPUSH
6045: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
6049: LD_EXP 6
6053: PPUSH
6054: LD_STRING DH-Scout-21
6056: PPUSH
6057: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
6061: LD_EXP 6
6065: PPUSH
6066: LD_STRING DH-Scout-22
6068: PPUSH
6069: CALL_OW 88
// InGameOff ;
6073: CALL_OW 9
// if Givi then
6077: LD_EXP 7
6081: IFFALSE 6096
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
6083: LD_INT 13
6085: PPUSH
6086: LD_INT 2
6088: PPUSH
6089: LD_INT 1
6091: PPUSH
6092: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
6096: LD_STRING Road
6098: PPUSH
6099: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
6103: LD_ADDR_VAR 0 2
6107: PUSH
6108: LD_INT 22
6110: PUSH
6111: LD_INT 5
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 21
6120: PUSH
6121: LD_INT 2
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PPUSH
6132: CALL_OW 69
6136: PUSH
6137: FOR_IN
6138: IFFALSE 6154
// SetSide ( i , 2 ) ;
6140: LD_VAR 0 2
6144: PPUSH
6145: LD_INT 2
6147: PPUSH
6148: CALL_OW 235
6152: GO 6137
6154: POP
6155: POP
// SaveForQuickRestart ;
6156: CALL_OW 22
// end ;
6160: LD_VAR 0 1
6164: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
6165: LD_INT 2
6167: PPUSH
6168: LD_INT 9
6170: PPUSH
6171: CALL_OW 294
6175: IFFALSE 6522
6177: GO 6179
6179: DISABLE
// begin DialogueOn ;
6180: CALL_OW 6
// ShowArea ( 2 , crossRoadArea ) ;
6184: LD_INT 2
6186: PPUSH
6187: LD_INT 9
6189: PPUSH
6190: CALL_OW 334
// CenterNowOnXY ( 111 , 72 ) ;
6194: LD_INT 111
6196: PPUSH
6197: LD_INT 72
6199: PPUSH
6200: CALL_OW 86
// if IsOk ( Kamil ) then
6204: LD_EXP 10
6208: PPUSH
6209: CALL_OW 302
6213: IFFALSE 6330
// begin Say ( Kamil , DKam-Cross-1 ) ;
6215: LD_EXP 10
6219: PPUSH
6220: LD_STRING DKam-Cross-1
6222: PPUSH
6223: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
6227: LD_EXP 10
6231: PPUSH
6232: LD_STRING DKam-Cross-2
6234: PPUSH
6235: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
6239: LD_EXP 10
6243: PPUSH
6244: LD_STRING DKam-Cross-3
6246: PPUSH
6247: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
6251: LD_EXP 10
6255: PPUSH
6256: LD_STRING DKam-Cross-4
6258: PPUSH
6259: CALL_OW 88
// if IsOk ( Ibrahim ) then
6263: LD_EXP 9
6267: PPUSH
6268: CALL_OW 302
6272: IFFALSE 6328
// begin if ibrahimJoinedIn04 then
6274: LD_EXP 4
6278: IFFALSE 6292
// Say ( Ibrahim , DI-Cross-b-5 ) ;
6280: LD_EXP 9
6284: PPUSH
6285: LD_STRING DI-Cross-b-5
6287: PPUSH
6288: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
6292: LD_EXP 9
6296: PPUSH
6297: LD_STRING DI-Cross-b-6
6299: PPUSH
6300: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
6304: LD_EXP 9
6308: PPUSH
6309: LD_STRING DI-Cross-b-7
6311: PPUSH
6312: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
6316: LD_EXP 10
6320: PPUSH
6321: LD_STRING DKam-Cross-8
6323: PPUSH
6324: CALL_OW 88
// end ; end else
6328: GO 6488
// if IsOk ( Sophia ) then
6330: LD_EXP 12
6334: PPUSH
6335: CALL_OW 302
6339: IFFALSE 6456
// begin Say ( Sophia , DS-Cross-1 ) ;
6341: LD_EXP 12
6345: PPUSH
6346: LD_STRING DS-Cross-1
6348: PPUSH
6349: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
6353: LD_EXP 12
6357: PPUSH
6358: LD_STRING DS-Cross-2
6360: PPUSH
6361: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
6365: LD_EXP 12
6369: PPUSH
6370: LD_STRING DS-Cross-3
6372: PPUSH
6373: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
6377: LD_EXP 12
6381: PPUSH
6382: LD_STRING DS-Cross-4
6384: PPUSH
6385: CALL_OW 88
// if IsOk ( Ibrahim ) then
6389: LD_EXP 9
6393: PPUSH
6394: CALL_OW 302
6398: IFFALSE 6454
// begin if ibrahimJoinedIn04 then
6400: LD_EXP 4
6404: IFFALSE 6418
// Say ( Ibrahim , DI-Cross-b-5 ) ;
6406: LD_EXP 9
6410: PPUSH
6411: LD_STRING DI-Cross-b-5
6413: PPUSH
6414: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
6418: LD_EXP 9
6422: PPUSH
6423: LD_STRING DI-Cross-b-6
6425: PPUSH
6426: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
6430: LD_EXP 9
6434: PPUSH
6435: LD_STRING DI-Cross-b-7
6437: PPUSH
6438: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
6442: LD_EXP 12
6446: PPUSH
6447: LD_STRING DS-Cross-8
6449: PPUSH
6450: CALL_OW 88
// end ; end else
6454: GO 6488
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
6456: LD_EXP 18
6460: PPUSH
6461: LD_INT 50
6463: PUSH
6464: EMPTY
6465: LIST
6466: PPUSH
6467: CALL_OW 72
6471: IFFALSE 6488
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
6473: LD_EXP 18
6477: PPUSH
6478: LD_STRING DArm-Cross-c-1
6480: PPUSH
6481: LD_STRING DArf-Cross-c-1
6483: PPUSH
6484: CALL 2744 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
6488: LD_EXP 36
6492: PPUSH
6493: LD_INT 2
6495: PPUSH
6496: LD_INT 1
6498: PPUSH
6499: CALL_OW 322
// DialogueOff ;
6503: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
6507: LD_STRING Crane
6509: PPUSH
6510: CALL_OW 337
// spottedCrossRoad := true ;
6514: LD_ADDR_EXP 5
6518: PUSH
6519: LD_INT 1
6521: ST_TO_ADDR
// end ;
6522: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
6523: LD_INT 22
6525: PUSH
6526: LD_INT 2
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 2
6535: PUSH
6536: LD_INT 30
6538: PUSH
6539: LD_INT 0
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 30
6548: PUSH
6549: LD_INT 1
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PPUSH
6565: CALL_OW 69
6569: IFFALSE 6574
6571: GO 6573
6573: DISABLE
// begin end ; end_of_file
6574: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
6575: GO 6577
6577: DISABLE
// begin ru_radar := 98 ;
6578: LD_ADDR_EXP 25
6582: PUSH
6583: LD_INT 98
6585: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
6586: LD_ADDR_EXP 26
6590: PUSH
6591: LD_INT 89
6593: ST_TO_ADDR
// us_hack := 99 ;
6594: LD_ADDR_EXP 27
6598: PUSH
6599: LD_INT 99
6601: ST_TO_ADDR
// us_artillery := 97 ;
6602: LD_ADDR_EXP 28
6606: PUSH
6607: LD_INT 97
6609: ST_TO_ADDR
// ar_bio_bomb := 91 ;
6610: LD_ADDR_EXP 29
6614: PUSH
6615: LD_INT 91
6617: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
6618: LD_ADDR_EXP 30
6622: PUSH
6623: LD_INT 92
6625: ST_TO_ADDR
// tech_Artillery := 80 ;
6626: LD_ADDR_EXP 31
6630: PUSH
6631: LD_INT 80
6633: ST_TO_ADDR
// tech_RadMat := 81 ;
6634: LD_ADDR_EXP 32
6638: PUSH
6639: LD_INT 81
6641: ST_TO_ADDR
// tech_BasicTools := 82 ;
6642: LD_ADDR_EXP 33
6646: PUSH
6647: LD_INT 82
6649: ST_TO_ADDR
// tech_Cargo := 83 ;
6650: LD_ADDR_EXP 34
6654: PUSH
6655: LD_INT 83
6657: ST_TO_ADDR
// tech_Track := 84 ;
6658: LD_ADDR_EXP 35
6662: PUSH
6663: LD_INT 84
6665: ST_TO_ADDR
// tech_Crane := 85 ;
6666: LD_ADDR_EXP 36
6670: PUSH
6671: LD_INT 85
6673: ST_TO_ADDR
// tech_Bulldozer := 86 ;
6674: LD_ADDR_EXP 37
6678: PUSH
6679: LD_INT 86
6681: ST_TO_ADDR
// tech_Hovercraft := 87 ;
6682: LD_ADDR_EXP 38
6686: PUSH
6687: LD_INT 87
6689: ST_TO_ADDR
// end ;
6690: END
