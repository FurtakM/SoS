// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 35 0 0
// InitTag ;
   8: CALL 77 0 0
// PrepareNature ( forestArea , swampArea ) ;
  12: LD_INT 3
  14: PPUSH
  15: LD_INT 2
  17: PPUSH
  18: CALL 544 0 2
// PrepareArabian ;
  22: CALL 2707 0 0
// PrepareRussian ;
  26: CALL 3493 0 0
// Action ;
  30: CALL 3501 0 0
// end ;
  34: END
// export debug , prefix , hasFlamethrower ; function Init ; begin
  35: LD_INT 0
  37: PPUSH
// debug := true ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_INT 1
  45: ST_TO_ADDR
// prefix := 04_2_ ;
  46: LD_ADDR_EXP 2
  50: PUSH
  51: LD_STRING 04_2_
  53: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 04_1_Flamethrower
  61: PPUSH
  62: LD_EXP 1
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// end ;
  72: LD_VAR 0 1
  76: RET
// function InitTag ; begin
  77: LD_INT 0
  79: PPUSH
// end ;
  80: LD_VAR 0 1
  84: RET
// every 0 0$1 trigger debug do var i ;
  85: LD_EXP 1
  89: IFFALSE 173
  91: GO 93
  93: DISABLE
  94: LD_INT 0
  96: PPUSH
// begin enable ;
  97: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
  98: LD_ADDR_VAR 0 1
 102: PUSH
 103: LD_INT 22
 105: PUSH
 106: LD_INT 2
 108: PUSH
 109: EMPTY
 110: LIST
 111: LIST
 112: PUSH
 113: LD_INT 3
 115: PUSH
 116: LD_INT 21
 118: PUSH
 119: LD_INT 3
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: EMPTY
 131: LIST
 132: LIST
 133: PPUSH
 134: CALL_OW 69
 138: PUSH
 139: FOR_IN
 140: IFFALSE 171
// if GetLives ( i ) < 1000 then
 142: LD_VAR 0 1
 146: PPUSH
 147: CALL_OW 256
 151: PUSH
 152: LD_INT 1000
 154: LESS
 155: IFFALSE 169
// SetLives ( i , 1000 ) ;
 157: LD_VAR 0 1
 161: PPUSH
 162: LD_INT 1000
 164: PPUSH
 165: CALL_OW 234
 169: GO 139
 171: POP
 172: POP
// end ; end_of_file
 173: PPOPN 1
 175: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 176: LD_INT 0
 178: PPUSH
 179: PPUSH
// if exist_mode then
 180: LD_VAR 0 2
 184: IFFALSE 209
// unit := CreateCharacter ( prefix & ident ) else
 186: LD_ADDR_VAR 0 5
 190: PUSH
 191: LD_VAR 0 3
 195: PUSH
 196: LD_VAR 0 1
 200: STR
 201: PPUSH
 202: CALL_OW 34
 206: ST_TO_ADDR
 207: GO 224
// unit := NewCharacter ( ident ) ;
 209: LD_ADDR_VAR 0 5
 213: PUSH
 214: LD_VAR 0 1
 218: PPUSH
 219: CALL_OW 25
 223: ST_TO_ADDR
// result := unit ;
 224: LD_ADDR_VAR 0 4
 228: PUSH
 229: LD_VAR 0 5
 233: ST_TO_ADDR
// end ;
 234: LD_VAR 0 4
 238: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 239: LD_INT 0
 241: PPUSH
// uc_side := side ;
 242: LD_ADDR_OWVAR 20
 246: PUSH
 247: LD_VAR 0 1
 251: ST_TO_ADDR
// uc_nation := nation ;
 252: LD_ADDR_OWVAR 21
 256: PUSH
 257: LD_VAR 0 2
 261: ST_TO_ADDR
// vc_chassis := chassis ;
 262: LD_ADDR_OWVAR 37
 266: PUSH
 267: LD_VAR 0 3
 271: ST_TO_ADDR
// vc_engine := engine ;
 272: LD_ADDR_OWVAR 39
 276: PUSH
 277: LD_VAR 0 4
 281: ST_TO_ADDR
// vc_control := control ;
 282: LD_ADDR_OWVAR 38
 286: PUSH
 287: LD_VAR 0 5
 291: ST_TO_ADDR
// vc_weapon := weapon ;
 292: LD_ADDR_OWVAR 40
 296: PUSH
 297: LD_VAR 0 6
 301: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 302: LD_ADDR_OWVAR 41
 306: PUSH
 307: LD_VAR 0 7
 311: ST_TO_ADDR
// result := CreateVehicle ;
 312: LD_ADDR_VAR 0 8
 316: PUSH
 317: CALL_OW 45
 321: ST_TO_ADDR
// end ;
 322: LD_VAR 0 8
 326: RET
// export function SayX ( units , ident ) ; var i ; begin
 327: LD_INT 0
 329: PPUSH
 330: PPUSH
// result := false ;
 331: LD_ADDR_VAR 0 3
 335: PUSH
 336: LD_INT 0
 338: ST_TO_ADDR
// if not units then
 339: LD_VAR 0 1
 343: NOT
 344: IFFALSE 348
// exit ;
 346: GO 402
// for i in units do
 348: LD_ADDR_VAR 0 4
 352: PUSH
 353: LD_VAR 0 1
 357: PUSH
 358: FOR_IN
 359: IFFALSE 400
// if IsOk ( i ) then
 361: LD_VAR 0 4
 365: PPUSH
 366: CALL_OW 302
 370: IFFALSE 398
// begin Say ( i , ident ) ;
 372: LD_VAR 0 4
 376: PPUSH
 377: LD_VAR 0 2
 381: PPUSH
 382: CALL_OW 88
// result := i ;
 386: LD_ADDR_VAR 0 3
 390: PUSH
 391: LD_VAR 0 4
 395: ST_TO_ADDR
// break ;
 396: GO 400
// end ;
 398: GO 358
 400: POP
 401: POP
// end ;
 402: LD_VAR 0 3
 406: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 407: LD_INT 0
 409: PPUSH
 410: PPUSH
// InitUc ;
 411: CALL_OW 18
// InitHc ;
 415: CALL_OW 19
// uc_side := 0 ;
 419: LD_ADDR_OWVAR 20
 423: PUSH
 424: LD_INT 0
 426: ST_TO_ADDR
// uc_nation := 0 ;
 427: LD_ADDR_OWVAR 21
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// for i = 1 to amount do
 435: LD_ADDR_VAR 0 4
 439: PUSH
 440: DOUBLE
 441: LD_INT 1
 443: DEC
 444: ST_TO_ADDR
 445: LD_VAR 0 2
 449: PUSH
 450: FOR_TO
 451: IFFALSE 533
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 453: LD_ADDR_OWVAR 29
 457: PUSH
 458: LD_INT 9
 460: PPUSH
 461: LD_INT 12
 463: PPUSH
 464: CALL_OW 12
 468: PUSH
 469: LD_INT 9
 471: PPUSH
 472: LD_INT 12
 474: PPUSH
 475: CALL_OW 12
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 484: LD_ADDR_OWVAR 35
 488: PUSH
 489: LD_INT 1
 491: NEG
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL_OW 12
 500: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 501: LD_INT 0
 503: PPUSH
 504: LD_INT 12
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 514: CALL_OW 44
 518: PPUSH
 519: LD_VAR 0 1
 523: PPUSH
 524: LD_INT 0
 526: PPUSH
 527: CALL_OW 49
// end ;
 531: GO 450
 533: POP
 534: POP
// InitHc ;
 535: CALL_OW 19
// end ;
 539: LD_VAR 0 3
 543: RET
// export function PrepareNature ( forest , swamp ) ; var i ; begin
 544: LD_INT 0
 546: PPUSH
 547: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 548: LD_VAR 0 1
 552: PPUSH
 553: LD_INT 5
 555: PUSH
 556: LD_INT 4
 558: PUSH
 559: LD_INT 4
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PUSH
 567: LD_OWVAR 67
 571: ARRAY
 572: PPUSH
 573: CALL 407 0 2
// for i := 1 to 3 do
 577: LD_ADDR_VAR 0 4
 581: PUSH
 582: DOUBLE
 583: LD_INT 1
 585: DEC
 586: ST_TO_ADDR
 587: LD_INT 3
 589: PUSH
 590: FOR_TO
 591: IFFALSE 628
// begin hc_class := 21 ;
 593: LD_ADDR_OWVAR 28
 597: PUSH
 598: LD_INT 21
 600: ST_TO_ADDR
// hc_gallery :=  ;
 601: LD_ADDR_OWVAR 33
 605: PUSH
 606: LD_STRING 
 608: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 609: CALL_OW 44
 613: PPUSH
 614: LD_VAR 0 1
 618: PPUSH
 619: LD_INT 0
 621: PPUSH
 622: CALL_OW 49
// end ;
 626: GO 590
 628: POP
 629: POP
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 4
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 681
// begin hc_class := 18 ;
 646: LD_ADDR_OWVAR 28
 650: PUSH
 651: LD_INT 18
 653: ST_TO_ADDR
// hc_gallery :=  ;
 654: LD_ADDR_OWVAR 33
 658: PUSH
 659: LD_STRING 
 661: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 662: CALL_OW 44
 666: PPUSH
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_INT 0
 674: PPUSH
 675: CALL_OW 49
// end ;
 679: GO 643
 681: POP
 682: POP
// for i := 1 to 3 do
 683: LD_ADDR_VAR 0 4
 687: PUSH
 688: DOUBLE
 689: LD_INT 1
 691: DEC
 692: ST_TO_ADDR
 693: LD_INT 3
 695: PUSH
 696: FOR_TO
 697: IFFALSE 734
// begin hc_class := 13 ;
 699: LD_ADDR_OWVAR 28
 703: PUSH
 704: LD_INT 13
 706: ST_TO_ADDR
// hc_gallery :=  ;
 707: LD_ADDR_OWVAR 33
 711: PUSH
 712: LD_STRING 
 714: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 715: CALL_OW 44
 719: PPUSH
 720: LD_VAR 0 1
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: CALL_OW 49
// end ;
 732: GO 696
 734: POP
 735: POP
// for i := 1 to 4 do
 736: LD_ADDR_VAR 0 4
 740: PUSH
 741: DOUBLE
 742: LD_INT 1
 744: DEC
 745: ST_TO_ADDR
 746: LD_INT 4
 748: PUSH
 749: FOR_TO
 750: IFFALSE 787
// begin hc_class := class_frog ;
 752: LD_ADDR_OWVAR 28
 756: PUSH
 757: LD_INT 19
 759: ST_TO_ADDR
// hc_gallery :=  ;
 760: LD_ADDR_OWVAR 33
 764: PUSH
 765: LD_STRING 
 767: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 768: CALL_OW 44
 772: PPUSH
 773: LD_VAR 0 2
 777: PPUSH
 778: LD_INT 0
 780: PPUSH
 781: CALL_OW 49
// end ;
 785: GO 749
 787: POP
 788: POP
// end ;
 789: LD_VAR 0 3
 793: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 794: LD_INT 0
 796: PPUSH
 797: PPUSH
 798: PPUSH
// if not observer or not unit then
 799: LD_VAR 0 1
 803: NOT
 804: PUSH
 805: LD_VAR 0 2
 809: NOT
 810: OR
 811: IFFALSE 815
// exit ;
 813: GO 863
// if not See ( GetSide ( observer ) , unit ) then
 815: LD_VAR 0 1
 819: PPUSH
 820: CALL_OW 255
 824: PPUSH
 825: LD_VAR 0 2
 829: PPUSH
 830: CALL_OW 292
 834: NOT
 835: IFFALSE 839
// exit ;
 837: GO 863
// result := GetDistUnits ( observer , unit ) < 12 ;
 839: LD_ADDR_VAR 0 3
 843: PUSH
 844: LD_VAR 0 1
 848: PPUSH
 849: LD_VAR 0 2
 853: PPUSH
 854: CALL_OW 296
 858: PUSH
 859: LD_INT 12
 861: LESS
 862: ST_TO_ADDR
// end ;
 863: LD_VAR 0 3
 867: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 868: LD_INT 0
 870: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 871: LD_VAR 0 2
 875: PUSH
 876: LD_INT 1
 878: ARRAY
 879: PPUSH
 880: LD_VAR 0 2
 884: PUSH
 885: LD_INT 2
 887: ARRAY
 888: PPUSH
 889: CALL_OW 488
 893: PUSH
 894: LD_VAR 0 2
 898: PUSH
 899: LD_INT 1
 901: ARRAY
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: CALL_OW 428
 916: PUSH
 917: LD_INT 0
 919: EQUAL
 920: AND
 921: IFFALSE 955
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 923: LD_VAR 0 1
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 1
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 2
 941: PUSH
 942: LD_INT 2
 944: ARRAY
 945: PPUSH
 946: LD_VAR 0 3
 950: PPUSH
 951: CALL_OW 48
// end ;
 955: LD_VAR 0 4
 959: RET
// export function Video ( mode ) ; begin
 960: LD_INT 0
 962: PPUSH
// ingame_video = mode ;
 963: LD_ADDR_OWVAR 52
 967: PUSH
 968: LD_VAR 0 1
 972: ST_TO_ADDR
// interface_hidden = mode ;
 973: LD_ADDR_OWVAR 54
 977: PUSH
 978: LD_VAR 0 1
 982: ST_TO_ADDR
// end ;
 983: LD_VAR 0 2
 987: RET
// export function ReverseArray ( array ) ; var i ; begin
 988: LD_INT 0
 990: PPUSH
 991: PPUSH
// if not array then
 992: LD_VAR 0 1
 996: NOT
 997: IFFALSE 1001
// exit ;
 999: GO 1059
// result := [ ] ;
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: EMPTY
1007: ST_TO_ADDR
// for i := 1 to array do
1008: LD_ADDR_VAR 0 3
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_VAR 0 1
1022: PUSH
1023: FOR_TO
1024: IFFALSE 1057
// result := Insert ( result , 1 , array [ i ] ) ;
1026: LD_ADDR_VAR 0 2
1030: PUSH
1031: LD_VAR 0 2
1035: PPUSH
1036: LD_INT 1
1038: PPUSH
1039: LD_VAR 0 1
1043: PUSH
1044: LD_VAR 0 3
1048: ARRAY
1049: PPUSH
1050: CALL_OW 2
1054: ST_TO_ADDR
1055: GO 1023
1057: POP
1058: POP
// end ;
1059: LD_VAR 0 2
1063: RET
// export function ComExit ( unit ) ; begin
1064: LD_INT 0
1066: PPUSH
// result := IsInUnit ( unit ) ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_VAR 0 1
1076: PPUSH
1077: CALL_OW 310
1081: ST_TO_ADDR
// if not result then
1082: LD_VAR 0 2
1086: NOT
1087: IFFALSE 1091
// exit ;
1089: GO 1126
// if GetType ( result ) = unit_vehicle then
1091: LD_VAR 0 2
1095: PPUSH
1096: CALL_OW 247
1100: PUSH
1101: LD_INT 2
1103: EQUAL
1104: IFFALSE 1117
// ComExitVehicle ( unit ) else
1106: LD_VAR 0 1
1110: PPUSH
1111: CALL_OW 121
1115: GO 1126
// ComExitBuilding ( unit ) ;
1117: LD_VAR 0 1
1121: PPUSH
1122: CALL_OW 122
// end ;
1126: LD_VAR 0 2
1130: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1131: LD_INT 0
1133: PPUSH
1134: PPUSH
// if not side or not nation then
1135: LD_VAR 0 1
1139: NOT
1140: PUSH
1141: LD_VAR 0 2
1145: NOT
1146: OR
1147: IFFALSE 1151
// exit ;
1149: GO 1915
// case nation of nation_american :
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 1
1158: DOUBLE
1159: EQUAL
1160: IFTRUE 1164
1162: GO 1378
1164: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1165: LD_ADDR_VAR 0 4
1169: PUSH
1170: LD_INT 35
1172: PUSH
1173: LD_INT 45
1175: PUSH
1176: LD_INT 46
1178: PUSH
1179: LD_INT 47
1181: PUSH
1182: LD_INT 82
1184: PUSH
1185: LD_INT 83
1187: PUSH
1188: LD_INT 84
1190: PUSH
1191: LD_INT 85
1193: PUSH
1194: LD_INT 86
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 2
1202: PUSH
1203: LD_INT 6
1205: PUSH
1206: LD_INT 15
1208: PUSH
1209: LD_INT 16
1211: PUSH
1212: LD_INT 7
1214: PUSH
1215: LD_INT 12
1217: PUSH
1218: LD_INT 13
1220: PUSH
1221: LD_INT 10
1223: PUSH
1224: LD_INT 14
1226: PUSH
1227: LD_INT 20
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 22
1235: PUSH
1236: LD_INT 25
1238: PUSH
1239: LD_INT 32
1241: PUSH
1242: LD_INT 27
1244: PUSH
1245: LD_INT 36
1247: PUSH
1248: LD_INT 69
1250: PUSH
1251: LD_INT 39
1253: PUSH
1254: LD_INT 34
1256: PUSH
1257: LD_INT 40
1259: PUSH
1260: LD_INT 48
1262: PUSH
1263: LD_INT 49
1265: PUSH
1266: LD_INT 50
1268: PUSH
1269: LD_INT 51
1271: PUSH
1272: LD_INT 52
1274: PUSH
1275: LD_INT 53
1277: PUSH
1278: LD_INT 54
1280: PUSH
1281: LD_INT 55
1283: PUSH
1284: LD_INT 56
1286: PUSH
1287: LD_INT 57
1289: PUSH
1290: LD_INT 58
1292: PUSH
1293: LD_INT 59
1295: PUSH
1296: LD_INT 60
1298: PUSH
1299: LD_INT 61
1301: PUSH
1302: LD_INT 62
1304: PUSH
1305: LD_INT 80
1307: PUSH
1308: LD_INT 82
1310: PUSH
1311: LD_INT 83
1313: PUSH
1314: LD_INT 84
1316: PUSH
1317: LD_INT 85
1319: PUSH
1320: LD_INT 86
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: ST_TO_ADDR
1376: GO 1839
1378: LD_INT 2
1380: DOUBLE
1381: EQUAL
1382: IFTRUE 1386
1384: GO 1608
1386: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_INT 35
1394: PUSH
1395: LD_INT 45
1397: PUSH
1398: LD_INT 46
1400: PUSH
1401: LD_INT 47
1403: PUSH
1404: LD_INT 82
1406: PUSH
1407: LD_INT 83
1409: PUSH
1410: LD_INT 84
1412: PUSH
1413: LD_INT 85
1415: PUSH
1416: LD_INT 87
1418: PUSH
1419: LD_INT 70
1421: PUSH
1422: LD_INT 1
1424: PUSH
1425: LD_INT 11
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 4
1433: PUSH
1434: LD_INT 5
1436: PUSH
1437: LD_INT 6
1439: PUSH
1440: LD_INT 15
1442: PUSH
1443: LD_INT 18
1445: PUSH
1446: LD_INT 7
1448: PUSH
1449: LD_INT 17
1451: PUSH
1452: LD_INT 8
1454: PUSH
1455: LD_INT 20
1457: PUSH
1458: LD_INT 21
1460: PUSH
1461: LD_INT 22
1463: PUSH
1464: LD_INT 72
1466: PUSH
1467: LD_INT 26
1469: PUSH
1470: LD_INT 69
1472: PUSH
1473: LD_INT 39
1475: PUSH
1476: LD_INT 40
1478: PUSH
1479: LD_INT 41
1481: PUSH
1482: LD_INT 42
1484: PUSH
1485: LD_INT 43
1487: PUSH
1488: LD_INT 48
1490: PUSH
1491: LD_INT 49
1493: PUSH
1494: LD_INT 50
1496: PUSH
1497: LD_INT 51
1499: PUSH
1500: LD_INT 52
1502: PUSH
1503: LD_INT 53
1505: PUSH
1506: LD_INT 54
1508: PUSH
1509: LD_INT 55
1511: PUSH
1512: LD_INT 56
1514: PUSH
1515: LD_INT 60
1517: PUSH
1518: LD_INT 61
1520: PUSH
1521: LD_INT 62
1523: PUSH
1524: LD_INT 66
1526: PUSH
1527: LD_INT 67
1529: PUSH
1530: LD_INT 68
1532: PUSH
1533: LD_INT 81
1535: PUSH
1536: LD_INT 82
1538: PUSH
1539: LD_INT 83
1541: PUSH
1542: LD_INT 84
1544: PUSH
1545: LD_INT 85
1547: PUSH
1548: LD_INT 87
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: ST_TO_ADDR
1606: GO 1839
1608: LD_INT 3
1610: DOUBLE
1611: EQUAL
1612: IFTRUE 1616
1614: GO 1838
1616: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1617: LD_ADDR_VAR 0 4
1621: PUSH
1622: LD_INT 46
1624: PUSH
1625: LD_INT 47
1627: PUSH
1628: LD_INT 1
1630: PUSH
1631: LD_INT 2
1633: PUSH
1634: LD_INT 82
1636: PUSH
1637: LD_INT 83
1639: PUSH
1640: LD_INT 84
1642: PUSH
1643: LD_INT 85
1645: PUSH
1646: LD_INT 86
1648: PUSH
1649: LD_INT 11
1651: PUSH
1652: LD_INT 9
1654: PUSH
1655: LD_INT 20
1657: PUSH
1658: LD_INT 19
1660: PUSH
1661: LD_INT 21
1663: PUSH
1664: LD_INT 24
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 25
1672: PUSH
1673: LD_INT 28
1675: PUSH
1676: LD_INT 29
1678: PUSH
1679: LD_INT 30
1681: PUSH
1682: LD_INT 31
1684: PUSH
1685: LD_INT 37
1687: PUSH
1688: LD_INT 38
1690: PUSH
1691: LD_INT 32
1693: PUSH
1694: LD_INT 27
1696: PUSH
1697: LD_INT 33
1699: PUSH
1700: LD_INT 69
1702: PUSH
1703: LD_INT 39
1705: PUSH
1706: LD_INT 34
1708: PUSH
1709: LD_INT 40
1711: PUSH
1712: LD_INT 71
1714: PUSH
1715: LD_INT 23
1717: PUSH
1718: LD_INT 44
1720: PUSH
1721: LD_INT 48
1723: PUSH
1724: LD_INT 49
1726: PUSH
1727: LD_INT 50
1729: PUSH
1730: LD_INT 51
1732: PUSH
1733: LD_INT 52
1735: PUSH
1736: LD_INT 53
1738: PUSH
1739: LD_INT 54
1741: PUSH
1742: LD_INT 55
1744: PUSH
1745: LD_INT 56
1747: PUSH
1748: LD_INT 57
1750: PUSH
1751: LD_INT 58
1753: PUSH
1754: LD_INT 59
1756: PUSH
1757: LD_INT 63
1759: PUSH
1760: LD_INT 64
1762: PUSH
1763: LD_INT 65
1765: PUSH
1766: LD_INT 82
1768: PUSH
1769: LD_INT 83
1771: PUSH
1772: LD_INT 84
1774: PUSH
1775: LD_INT 85
1777: PUSH
1778: LD_INT 86
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: ST_TO_ADDR
1836: GO 1839
1838: POP
// if state > - 1 and state < 3 then
1839: LD_VAR 0 3
1843: PUSH
1844: LD_INT 1
1846: NEG
1847: GREATER
1848: PUSH
1849: LD_VAR 0 3
1853: PUSH
1854: LD_INT 3
1856: LESS
1857: AND
1858: IFFALSE 1915
// for i in result do
1860: LD_ADDR_VAR 0 5
1864: PUSH
1865: LD_VAR 0 4
1869: PUSH
1870: FOR_IN
1871: IFFALSE 1913
// if GetTech ( i , side ) <> state then
1873: LD_VAR 0 5
1877: PPUSH
1878: LD_VAR 0 1
1882: PPUSH
1883: CALL_OW 321
1887: PUSH
1888: LD_VAR 0 3
1892: NONEQUAL
1893: IFFALSE 1911
// result := result diff i ;
1895: LD_ADDR_VAR 0 4
1899: PUSH
1900: LD_VAR 0 4
1904: PUSH
1905: LD_VAR 0 5
1909: DIFF
1910: ST_TO_ADDR
1911: GO 1870
1913: POP
1914: POP
// end ;
1915: LD_VAR 0 4
1919: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
1920: LD_INT 0
1922: PPUSH
1923: PPUSH
1924: PPUSH
1925: PPUSH
// if not list then
1926: LD_VAR 0 3
1930: NOT
1931: IFFALSE 1935
// exit ;
1933: GO 2243
// result := [ ] ;
1935: LD_ADDR_VAR 0 5
1939: PUSH
1940: EMPTY
1941: ST_TO_ADDR
// for i in list do
1942: LD_ADDR_VAR 0 6
1946: PUSH
1947: LD_VAR 0 3
1951: PUSH
1952: FOR_IN
1953: IFFALSE 2155
// begin tmp := GetDistUnitXY ( i , x , y ) ;
1955: LD_ADDR_VAR 0 8
1959: PUSH
1960: LD_VAR 0 6
1964: PPUSH
1965: LD_VAR 0 1
1969: PPUSH
1970: LD_VAR 0 2
1974: PPUSH
1975: CALL_OW 297
1979: ST_TO_ADDR
// if not result then
1980: LD_VAR 0 5
1984: NOT
1985: IFFALSE 2011
// result := [ [ i , tmp ] ] else
1987: LD_ADDR_VAR 0 5
1991: PUSH
1992: LD_VAR 0 6
1996: PUSH
1997: LD_VAR 0 8
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: EMPTY
2007: LIST
2008: ST_TO_ADDR
2009: GO 2153
// begin if result [ result ] [ 2 ] < tmp then
2011: LD_VAR 0 5
2015: PUSH
2016: LD_VAR 0 5
2020: ARRAY
2021: PUSH
2022: LD_INT 2
2024: ARRAY
2025: PUSH
2026: LD_VAR 0 8
2030: LESS
2031: IFFALSE 2073
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2033: LD_ADDR_VAR 0 5
2037: PUSH
2038: LD_VAR 0 5
2042: PPUSH
2043: LD_VAR 0 5
2047: PUSH
2048: LD_INT 1
2050: PLUS
2051: PPUSH
2052: LD_VAR 0 6
2056: PUSH
2057: LD_VAR 0 8
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PPUSH
2066: CALL_OW 2
2070: ST_TO_ADDR
2071: GO 2153
// for j = 1 to result do
2073: LD_ADDR_VAR 0 7
2077: PUSH
2078: DOUBLE
2079: LD_INT 1
2081: DEC
2082: ST_TO_ADDR
2083: LD_VAR 0 5
2087: PUSH
2088: FOR_TO
2089: IFFALSE 2151
// begin if tmp < result [ j ] [ 2 ] then
2091: LD_VAR 0 8
2095: PUSH
2096: LD_VAR 0 5
2100: PUSH
2101: LD_VAR 0 7
2105: ARRAY
2106: PUSH
2107: LD_INT 2
2109: ARRAY
2110: LESS
2111: IFFALSE 2149
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2113: LD_ADDR_VAR 0 5
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 7
2127: PPUSH
2128: LD_VAR 0 6
2132: PUSH
2133: LD_VAR 0 8
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 2
2146: ST_TO_ADDR
// break ;
2147: GO 2151
// end ; end ;
2149: GO 2088
2151: POP
2152: POP
// end ; end ;
2153: GO 1952
2155: POP
2156: POP
// if result and not asc then
2157: LD_VAR 0 5
2161: PUSH
2162: LD_VAR 0 4
2166: NOT
2167: AND
2168: IFFALSE 2243
// begin tmp := result ;
2170: LD_ADDR_VAR 0 8
2174: PUSH
2175: LD_VAR 0 5
2179: ST_TO_ADDR
// for i = tmp downto 1 do
2180: LD_ADDR_VAR 0 6
2184: PUSH
2185: DOUBLE
2186: LD_VAR 0 8
2190: INC
2191: ST_TO_ADDR
2192: LD_INT 1
2194: PUSH
2195: FOR_DOWNTO
2196: IFFALSE 2241
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2198: LD_ADDR_VAR 0 5
2202: PUSH
2203: LD_VAR 0 5
2207: PPUSH
2208: LD_VAR 0 8
2212: PUSH
2213: LD_VAR 0 6
2217: MINUS
2218: PUSH
2219: LD_INT 1
2221: PLUS
2222: PPUSH
2223: LD_VAR 0 8
2227: PUSH
2228: LD_VAR 0 6
2232: ARRAY
2233: PPUSH
2234: CALL_OW 1
2238: ST_TO_ADDR
2239: GO 2195
2241: POP
2242: POP
// end ; end ;
2243: LD_VAR 0 5
2247: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
2248: LD_INT 0
2250: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
2251: LD_ADDR_VAR 0 4
2255: PUSH
2256: LD_VAR 0 1
2260: PPUSH
2261: CALL_OW 250
2265: PPUSH
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL_OW 251
2275: PPUSH
2276: LD_VAR 0 2
2280: PPUSH
2281: LD_VAR 0 3
2285: PPUSH
2286: CALL 1920 0 4
2290: ST_TO_ADDR
// end ;
2291: LD_VAR 0 4
2295: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
2296: LD_INT 0
2298: PPUSH
2299: PPUSH
2300: PPUSH
2301: PPUSH
2302: PPUSH
// if not unit then
2303: LD_VAR 0 1
2307: NOT
2308: IFFALSE 2312
// exit ;
2310: GO 2514
// side := GetSide ( unit ) ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: LD_VAR 0 1
2321: PPUSH
2322: CALL_OW 255
2326: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
2327: LD_ADDR_VAR 0 5
2331: PUSH
2332: LD_INT 22
2334: PUSH
2335: LD_VAR 0 4
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 30
2346: PUSH
2347: LD_VAR 0 2
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PPUSH
2360: CALL_OW 69
2364: ST_TO_ADDR
// if not tmp then
2365: LD_VAR 0 5
2369: NOT
2370: IFFALSE 2374
// exit ;
2372: GO 2514
// tmp := SortByDistanceUnit ( unit , tmp , true ) ;
2374: LD_ADDR_VAR 0 5
2378: PUSH
2379: LD_VAR 0 1
2383: PPUSH
2384: LD_VAR 0 5
2388: PPUSH
2389: LD_INT 1
2391: PPUSH
2392: CALL 2248 0 3
2396: ST_TO_ADDR
// places := 1 ;
2397: LD_ADDR_VAR 0 7
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
2405: LD_VAR 0 2
2409: PUSH
2410: LD_INT 0
2412: PUSH
2413: LD_INT 1
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: LD_INT 5
2421: PUSH
2422: LD_INT 2
2424: PUSH
2425: LD_INT 3
2427: PUSH
2428: LD_INT 6
2430: PUSH
2431: LD_INT 7
2433: PUSH
2434: LD_INT 8
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: IN
2448: IFFALSE 2458
// places := 6 ;
2450: LD_ADDR_VAR 0 7
2454: PUSH
2455: LD_INT 6
2457: ST_TO_ADDR
// for i in tmp do
2458: LD_ADDR_VAR 0 6
2462: PUSH
2463: LD_VAR 0 5
2467: PUSH
2468: FOR_IN
2469: IFFALSE 2512
// begin if UnitsInside ( i ) - places <= 0 then
2471: LD_VAR 0 6
2475: PPUSH
2476: CALL_OW 313
2480: PUSH
2481: LD_VAR 0 7
2485: MINUS
2486: PUSH
2487: LD_INT 0
2489: LESSEQUAL
2490: IFFALSE 2496
// continue else
2492: GO 2468
2494: GO 2510
// begin result := i ;
2496: LD_ADDR_VAR 0 3
2500: PUSH
2501: LD_VAR 0 6
2505: ST_TO_ADDR
// exit ;
2506: POP
2507: POP
2508: GO 2514
// end ; end ;
2510: GO 2468
2512: POP
2513: POP
// end ;
2514: LD_VAR 0 3
2518: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
2523: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
2524: LD_VAR 0 1
2528: NOT
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: LD_INT 1
2537: PUSH
2538: LD_INT 2
2540: PUSH
2541: LD_INT 3
2543: PUSH
2544: LD_INT 4
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: IN
2553: NOT
2554: OR
2555: IFFALSE 2559
// exit ;
2557: GO 2651
// tmp := [ ] ;
2559: LD_ADDR_VAR 0 5
2563: PUSH
2564: EMPTY
2565: ST_TO_ADDR
// for i in units do
2566: LD_ADDR_VAR 0 4
2570: PUSH
2571: LD_VAR 0 1
2575: PUSH
2576: FOR_IN
2577: IFFALSE 2620
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
2579: LD_ADDR_VAR 0 5
2583: PUSH
2584: LD_VAR 0 5
2588: PPUSH
2589: LD_VAR 0 5
2593: PUSH
2594: LD_INT 1
2596: PLUS
2597: PPUSH
2598: LD_VAR 0 4
2602: PPUSH
2603: LD_VAR 0 2
2607: PPUSH
2608: CALL_OW 259
2612: PPUSH
2613: CALL_OW 2
2617: ST_TO_ADDR
2618: GO 2576
2620: POP
2621: POP
// if not tmp then
2622: LD_VAR 0 5
2626: NOT
2627: IFFALSE 2631
// exit ;
2629: GO 2651
// result := SortListByListDesc ( units , tmp ) ;
2631: LD_ADDR_VAR 0 3
2635: PUSH
2636: LD_VAR 0 1
2640: PPUSH
2641: LD_VAR 0 5
2645: PPUSH
2646: CALL_OW 77
2650: ST_TO_ADDR
// end ;
2651: LD_VAR 0 3
2655: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2656: LD_INT 0
2658: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_VAR 0 3
2673: PPUSH
2674: LD_VAR 0 4
2678: PPUSH
2679: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: LD_VAR 0 2
2692: PPUSH
2693: LD_VAR 0 3
2697: PPUSH
2698: CALL_OW 331
// end ; end_of_file
2702: LD_VAR 0 5
2706: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
2707: LD_INT 0
2709: PPUSH
2710: PPUSH
// uc_side := 2 ;
2711: LD_ADDR_OWVAR 20
2715: PUSH
2716: LD_INT 2
2718: ST_TO_ADDR
// uc_nation := 2 ;
2719: LD_ADDR_OWVAR 21
2723: PUSH
2724: LD_INT 2
2726: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2727: LD_ADDR_EXP 4
2731: PUSH
2732: LD_STRING Heike
2734: PPUSH
2735: LD_EXP 1
2739: NOT
2740: PPUSH
2741: LD_EXP 2
2745: PPUSH
2746: CALL 176 0 3
2750: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2751: LD_ADDR_EXP 7
2755: PUSH
2756: LD_STRING Ibrahim
2758: PPUSH
2759: LD_EXP 1
2763: NOT
2764: PPUSH
2765: LD_EXP 2
2769: PPUSH
2770: CALL 176 0 3
2774: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2775: LD_ADDR_EXP 5
2779: PUSH
2780: LD_STRING Givi
2782: PPUSH
2783: LD_EXP 1
2787: NOT
2788: PPUSH
2789: LD_EXP 2
2793: PPUSH
2794: CALL 176 0 3
2798: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2799: LD_ADDR_EXP 8
2803: PUSH
2804: LD_STRING Kamil
2806: PPUSH
2807: LD_EXP 1
2811: NOT
2812: PPUSH
2813: LD_EXP 2
2817: PPUSH
2818: CALL 176 0 3
2822: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2823: LD_ADDR_EXP 9
2827: PUSH
2828: LD_STRING Kaia
2830: PPUSH
2831: LD_EXP 1
2835: NOT
2836: PPUSH
2837: LD_EXP 2
2841: PPUSH
2842: CALL 176 0 3
2846: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2847: LD_ADDR_EXP 10
2851: PUSH
2852: LD_STRING Sophia
2854: PPUSH
2855: LD_EXP 1
2859: NOT
2860: PPUSH
2861: LD_EXP 2
2865: PPUSH
2866: CALL 176 0 3
2870: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2871: LD_ADDR_EXP 11
2875: PUSH
2876: LD_STRING Markov
2878: PPUSH
2879: LD_EXP 1
2883: NOT
2884: PPUSH
2885: LD_EXP 2
2889: PPUSH
2890: CALL 176 0 3
2894: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2895: LD_ADDR_EXP 15
2899: PUSH
2900: LD_STRING Aviradze
2902: PPUSH
2903: LD_EXP 1
2907: NOT
2908: PPUSH
2909: LD_EXP 2
2913: PPUSH
2914: CALL 176 0 3
2918: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
2919: LD_ADDR_EXP 14
2923: PUSH
2924: LD_STRING Kurt
2926: PPUSH
2927: LD_EXP 1
2931: NOT
2932: PPUSH
2933: LD_EXP 2
2937: PPUSH
2938: CALL 176 0 3
2942: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2943: LD_ADDR_EXP 6
2947: PUSH
2948: LD_STRING Mike
2950: PPUSH
2951: LD_EXP 1
2955: NOT
2956: PPUSH
2957: LD_EXP 2
2961: PPUSH
2962: CALL 176 0 3
2966: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
2967: LD_ADDR_EXP 13
2971: PUSH
2972: LD_STRING Olaf
2974: PPUSH
2975: LD_INT 0
2977: PPUSH
2978: LD_STRING 
2980: PPUSH
2981: CALL 176 0 3
2985: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
2986: LD_ADDR_EXP 16
2990: PUSH
2991: LD_STRING 04_2_others
2993: PPUSH
2994: CALL_OW 31
2998: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
2999: LD_ADDR_EXP 18
3003: PUSH
3004: LD_STRING 04_2_apes
3006: PPUSH
3007: CALL_OW 31
3011: ST_TO_ADDR
// if hasFlamethrower then
3012: LD_EXP 3
3016: IFFALSE 3247
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
3018: LD_INT 70
3020: PPUSH
3021: LD_INT 2
3023: PPUSH
3024: LD_INT 2
3026: PPUSH
3027: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
3031: LD_ADDR_EXP 17
3035: PUSH
3036: LD_INT 13
3038: PUSH
3039: LD_INT 1
3041: PUSH
3042: LD_INT 1
3044: PUSH
3045: LD_INT 27
3047: PUSH
3048: LD_INT 2
3050: PUSH
3051: LD_INT 1000
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 13
3075: PUSH
3076: LD_INT 1
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 2
3087: PUSH
3088: LD_INT 1000
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: LD_INT 0
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 13
3112: PUSH
3113: LD_INT 1
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: LD_INT 26
3121: PUSH
3122: LD_INT 2
3124: PUSH
3125: LD_INT 1000
3127: PUSH
3128: LD_INT 0
3130: PUSH
3131: LD_INT 0
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 13
3149: PUSH
3150: LD_INT 1
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: LD_INT 27
3158: PUSH
3159: LD_INT 2
3161: PUSH
3162: LD_INT 1000
3164: PUSH
3165: LD_INT 0
3167: PUSH
3168: LD_INT 0
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: PUSH
3184: LD_INT 13
3186: PUSH
3187: LD_INT 1
3189: PUSH
3190: LD_INT 1
3192: PUSH
3193: LD_INT 32
3195: PUSH
3196: LD_INT 2
3198: PUSH
3199: LD_INT 1000
3201: PUSH
3202: LD_INT 0
3204: PUSH
3205: LD_INT 60
3207: PUSH
3208: LD_INT 40
3210: PUSH
3211: LD_INT 20
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: LIST
3218: PUSH
3219: LD_OWVAR 67
3223: ARRAY
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: ST_TO_ADDR
// end else
3245: GO 3461
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
3247: LD_ADDR_EXP 17
3251: PUSH
3252: LD_INT 13
3254: PUSH
3255: LD_INT 1
3257: PUSH
3258: LD_INT 1
3260: PUSH
3261: LD_INT 25
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: LD_INT 1000
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: LD_INT 0
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 13
3291: PUSH
3292: LD_INT 1
3294: PUSH
3295: LD_INT 1
3297: PUSH
3298: LD_INT 27
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: LD_INT 1000
3306: PUSH
3307: LD_INT 0
3309: PUSH
3310: LD_INT 0
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: PUSH
3326: LD_INT 13
3328: PUSH
3329: LD_INT 1
3331: PUSH
3332: LD_INT 1
3334: PUSH
3335: LD_INT 24
3337: PUSH
3338: LD_INT 2
3340: PUSH
3341: LD_INT 1000
3343: PUSH
3344: LD_INT 0
3346: PUSH
3347: LD_INT 0
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_INT 13
3365: PUSH
3366: LD_INT 1
3368: PUSH
3369: LD_INT 1
3371: PUSH
3372: LD_INT 27
3374: PUSH
3375: LD_INT 2
3377: PUSH
3378: LD_INT 1000
3380: PUSH
3381: LD_INT 0
3383: PUSH
3384: LD_INT 0
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: PUSH
3400: LD_INT 13
3402: PUSH
3403: LD_INT 1
3405: PUSH
3406: LD_INT 1
3408: PUSH
3409: LD_INT 32
3411: PUSH
3412: LD_INT 2
3414: PUSH
3415: LD_INT 1000
3417: PUSH
3418: LD_INT 0
3420: PUSH
3421: LD_INT 50
3423: PUSH
3424: LD_INT 30
3426: PUSH
3427: LD_INT 20
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_OWVAR 67
3439: ARRAY
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: ST_TO_ADDR
// end ; uc_side := 5 ;
3461: LD_ADDR_OWVAR 20
3465: PUSH
3466: LD_INT 5
3468: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
3469: LD_ADDR_EXP 12
3473: PUSH
3474: LD_STRING Abdul
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: LD_STRING 
3482: PPUSH
3483: CALL 176 0 3
3487: ST_TO_ADDR
// end ; end_of_file
3488: LD_VAR 0 1
3492: RET
// export function PrepareRussian ; begin
3493: LD_INT 0
3495: PPUSH
// end ; end_of_file end_of_file
3496: LD_VAR 0 1
3500: RET
// export function Action ; var i , un , veh , tmp ; begin
3501: LD_INT 0
3503: PPUSH
3504: PPUSH
3505: PPUSH
3506: PPUSH
3507: PPUSH
// InGameOn ;
3508: CALL_OW 8
// music_nat := 2 ;
3512: LD_ADDR_OWVAR 71
3516: PUSH
3517: LD_INT 2
3519: ST_TO_ADDR
// music_class := 0 ;
3520: LD_ADDR_OWVAR 72
3524: PUSH
3525: LD_INT 0
3527: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
3528: LD_INT 7
3530: PPUSH
3531: LD_INT 6
3533: PPUSH
3534: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
3538: LD_INT 7
3540: PPUSH
3541: LD_INT 6
3543: PPUSH
3544: LD_INT 2
3546: PPUSH
3547: LD_INT 20
3549: NEG
3550: PPUSH
3551: CALL 2656 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
3555: LD_ADDR_VAR 0 5
3559: PUSH
3560: LD_EXP 4
3564: PUSH
3565: LD_EXP 5
3569: PUSH
3570: LD_EXP 6
3574: PUSH
3575: LD_EXP 7
3579: PUSH
3580: LD_EXP 8
3584: PUSH
3585: LD_EXP 9
3589: PUSH
3590: LD_EXP 10
3594: PUSH
3595: LD_EXP 11
3599: PUSH
3600: LD_EXP 15
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: ST_TO_ADDR
// tmp := tmp diff 0 ;
3616: LD_ADDR_VAR 0 5
3620: PUSH
3621: LD_VAR 0 5
3625: PUSH
3626: LD_INT 0
3628: DIFF
3629: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
3630: LD_ADDR_VAR 0 5
3634: PUSH
3635: LD_VAR 0 5
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: CALL 2519 0 2
3647: ST_TO_ADDR
// for i in heikeVehicles do
3648: LD_ADDR_VAR 0 2
3652: PUSH
3653: LD_EXP 17
3657: PUSH
3658: FOR_IN
3659: IFFALSE 3858
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
3661: LD_INT 5
3663: PPUSH
3664: LD_VAR 0 2
3668: PUSH
3669: LD_INT 5
3671: ARRAY
3672: PPUSH
3673: LD_VAR 0 2
3677: PUSH
3678: LD_INT 1
3680: ARRAY
3681: PPUSH
3682: LD_VAR 0 2
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: LD_VAR 0 2
3695: PUSH
3696: LD_INT 3
3698: ARRAY
3699: PPUSH
3700: LD_VAR 0 2
3704: PUSH
3705: LD_INT 4
3707: ARRAY
3708: PPUSH
3709: LD_INT 34
3711: PPUSH
3712: CALL 239 0 7
// veh := CreateVehicle ;
3716: LD_ADDR_VAR 0 4
3720: PUSH
3721: CALL_OW 45
3725: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
3726: LD_VAR 0 2
3730: PUSH
3731: LD_INT 4
3733: ARRAY
3734: PUSH
3735: LD_INT 51
3737: PUSH
3738: LD_INT 32
3740: PUSH
3741: LD_INT 12
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: IN
3749: IFFALSE 3829
// begin if i [ 7 ] [ 1 ] then
3751: LD_VAR 0 2
3755: PUSH
3756: LD_INT 7
3758: ARRAY
3759: PUSH
3760: LD_INT 1
3762: ARRAY
3763: IFFALSE 3790
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
3765: LD_VAR 0 4
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_VAR 0 2
3777: PUSH
3778: LD_INT 7
3780: ARRAY
3781: PUSH
3782: LD_INT 1
3784: ARRAY
3785: PPUSH
3786: CALL_OW 291
// if i [ 7 ] [ 2 ] then
3790: LD_VAR 0 2
3794: PUSH
3795: LD_INT 7
3797: ARRAY
3798: PUSH
3799: LD_INT 2
3801: ARRAY
3802: IFFALSE 3829
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
3804: LD_VAR 0 4
3808: PPUSH
3809: LD_INT 2
3811: PPUSH
3812: LD_VAR 0 2
3816: PUSH
3817: LD_INT 7
3819: ARRAY
3820: PUSH
3821: LD_INT 2
3823: ARRAY
3824: PPUSH
3825: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
3829: LD_VAR 0 4
3833: PPUSH
3834: LD_INT 2
3836: PPUSH
3837: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
3841: LD_VAR 0 4
3845: PPUSH
3846: LD_INT 4
3848: PPUSH
3849: LD_INT 0
3851: PPUSH
3852: CALL_OW 49
// end ;
3856: GO 3658
3858: POP
3859: POP
// if tmp then
3860: LD_VAR 0 5
3864: IFFALSE 3919
// for i in tmp union heikeApes do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: LD_VAR 0 5
3875: PUSH
3876: LD_EXP 18
3880: UNION
3881: PUSH
3882: FOR_IN
3883: IFFALSE 3917
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
3885: LD_VAR 0 2
3889: PPUSH
3890: LD_INT 5
3892: PPUSH
3893: LD_INT 0
3895: PPUSH
3896: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
3900: LD_VAR 0 2
3904: PPUSH
3905: LD_INT 26
3907: PPUSH
3908: LD_INT 9
3910: PPUSH
3911: CALL_OW 118
// end ;
3915: GO 3882
3917: POP
3918: POP
// if heikeSecondSquad then
3919: LD_EXP 16
3923: IFFALSE 3972
// for i in heikeSecondSquad do
3925: LD_ADDR_VAR 0 2
3929: PUSH
3930: LD_EXP 16
3934: PUSH
3935: FOR_IN
3936: IFFALSE 3970
// begin PlaceUnitArea ( i , spawnHumanArea2 , false ) ;
3938: LD_VAR 0 2
3942: PPUSH
3943: LD_INT 6
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
3953: LD_VAR 0 2
3957: PPUSH
3958: LD_INT 26
3960: PPUSH
3961: LD_INT 9
3963: PPUSH
3964: CALL_OW 118
// end ;
3968: GO 3935
3970: POP
3971: POP
// if heikeApes then
3972: LD_EXP 18
3976: IFFALSE 4019
// for i in heikeApes do
3978: LD_ADDR_VAR 0 2
3982: PUSH
3983: LD_EXP 18
3987: PUSH
3988: FOR_IN
3989: IFFALSE 4017
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
3991: LD_VAR 0 2
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// ComHold ( i ) ;
4006: LD_VAR 0 2
4010: PPUSH
4011: CALL_OW 140
// end ;
4015: GO 3988
4017: POP
4018: POP
// if Kurt then
4019: LD_EXP 14
4023: IFFALSE 4055
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
4025: LD_EXP 14
4029: PPUSH
4030: LD_INT 8
4032: PPUSH
4033: LD_INT 0
4035: PPUSH
4036: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
4040: LD_EXP 14
4044: PPUSH
4045: LD_INT 42
4047: PPUSH
4048: LD_INT 32
4050: PPUSH
4051: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
4055: LD_EXP 4
4059: PPUSH
4060: LD_STRING DH-Start-1
4062: PPUSH
4063: CALL_OW 88
// if Givi then
4067: LD_EXP 5
4071: IFFALSE 4334
// begin Say ( Givi , DG-Start-2-5 ) ;
4073: LD_EXP 5
4077: PPUSH
4078: LD_STRING DG-Start-2-5
4080: PPUSH
4081: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
4085: LD_EXP 4
4089: PPUSH
4090: LD_STRING DH-Start-3
4092: PPUSH
4093: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
4097: LD_EXP 4
4101: PPUSH
4102: LD_STRING DH-Start-4
4104: PPUSH
4105: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
4109: LD_EXP 5
4113: PPUSH
4114: LD_STRING DG-Start-5
4116: PPUSH
4117: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
4121: LD_EXP 4
4125: PPUSH
4126: LD_STRING DH-Start-6
4128: PPUSH
4129: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
4133: LD_EXP 5
4137: PPUSH
4138: LD_STRING DG-Start-7
4140: PPUSH
4141: CALL_OW 88
// if Mike then
4145: LD_EXP 6
4149: IFFALSE 4322
// begin Say ( Mike , DM-Start-8 ) ;
4151: LD_EXP 6
4155: PPUSH
4156: LD_STRING DM-Start-8
4158: PPUSH
4159: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
4163: LD_EXP 6
4167: PPUSH
4168: LD_STRING DM-Start-9
4170: PPUSH
4171: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
4175: LD_EXP 5
4179: PPUSH
4180: LD_STRING DG-Start-10
4182: PPUSH
4183: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
4187: LD_EXP 5
4191: PPUSH
4192: LD_STRING DG-Start-11
4194: PPUSH
4195: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
4199: LD_EXP 4
4203: PPUSH
4204: LD_STRING DH-Start-12
4206: PPUSH
4207: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
4211: LD_EXP 5
4215: PPUSH
4216: LD_STRING DG-Start-13
4218: PPUSH
4219: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
4223: LD_EXP 5
4227: PPUSH
4228: LD_STRING DG-Start-14
4230: PPUSH
4231: CALL_OW 88
// if Kaia then
4235: LD_EXP 9
4239: IFFALSE 4322
// begin Say ( Kaia , DK-Start-15 ) ;
4241: LD_EXP 9
4245: PPUSH
4246: LD_STRING DK-Start-15
4248: PPUSH
4249: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
4253: LD_EXP 9
4257: PPUSH
4258: LD_STRING DK-Start-16
4260: PPUSH
4261: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
4265: LD_EXP 9
4269: PPUSH
4270: LD_STRING DK-Start-17
4272: PPUSH
4273: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4277: LD_INT 10
4279: PPUSH
4280: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
4284: LD_EXP 5
4288: PPUSH
4289: LD_EXP 9
4293: PPUSH
4294: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
4298: LD_EXP 5
4302: PPUSH
4303: LD_STRING DG-Start-18
4305: PPUSH
4306: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
4310: LD_EXP 9
4314: PPUSH
4315: LD_STRING DK-Start-19
4317: PPUSH
4318: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
4322: LD_EXP 4
4326: PPUSH
4327: LD_STRING DH-Start-20
4329: PPUSH
4330: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
4334: LD_INT 70
4336: PPUSH
4337: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
4341: LD_EXP 12
4345: PPUSH
4346: LD_STRING DShar-Start-21
4348: PPUSH
4349: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
4353: LD_EXP 4
4357: PPUSH
4358: LD_STRING DH-Start-22
4360: PPUSH
4361: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
4365: LD_EXP 12
4369: PPUSH
4370: LD_STRING DShar-Start-23
4372: PPUSH
4373: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
4377: LD_EXP 12
4381: PPUSH
4382: LD_STRING DShar-Start-24
4384: PPUSH
4385: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
4389: LD_EXP 12
4393: PPUSH
4394: LD_STRING DShar-Start-25
4396: PPUSH
4397: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
4401: LD_EXP 12
4405: PPUSH
4406: LD_STRING DShar-Start-26
4408: PPUSH
4409: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
4413: LD_EXP 4
4417: PPUSH
4418: LD_STRING DH-Start-27
4420: PPUSH
4421: CALL_OW 88
// if Kaia then
4425: LD_EXP 9
4429: IFFALSE 4469
// begin ComTurnUnit ( Heike , Kaia ) ;
4431: LD_EXP 4
4435: PPUSH
4436: LD_EXP 9
4440: PPUSH
4441: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
4445: LD_EXP 9
4449: PPUSH
4450: LD_STRING DK-Start-28
4452: PPUSH
4453: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
4457: LD_EXP 4
4461: PPUSH
4462: LD_STRING DH-Start-29
4464: PPUSH
4465: CALL_OW 88
// end ; if Givi then
4469: LD_EXP 5
4473: IFFALSE 4685
// begin ComTurnUnit ( Heike , Givi ) ;
4475: LD_EXP 4
4479: PPUSH
4480: LD_EXP 5
4484: PPUSH
4485: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
4489: LD_EXP 5
4493: PPUSH
4494: LD_EXP 4
4498: PPUSH
4499: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
4503: LD_EXP 4
4507: PPUSH
4508: LD_STRING DH-Start-30
4510: PPUSH
4511: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
4515: LD_EXP 4
4519: PPUSH
4520: LD_STRING DH-Start-31
4522: PPUSH
4523: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
4527: LD_EXP 5
4531: PPUSH
4532: LD_STRING DG-Start-32
4534: PPUSH
4535: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
4539: LD_EXP 4
4543: PPUSH
4544: LD_STRING DH-Start-33
4546: PPUSH
4547: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
4551: LD_EXP 5
4555: PPUSH
4556: LD_STRING DG-Start-34
4558: PPUSH
4559: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
4563: LD_EXP 5
4567: PPUSH
4568: LD_STRING DG-Start-35
4570: PPUSH
4571: CALL_OW 88
// if Kurt and not dialogue_skipped then
4575: LD_EXP 14
4579: PUSH
4580: LD_OWVAR 59
4584: NOT
4585: AND
4586: IFFALSE 4617
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
4588: LD_EXP 14
4592: PPUSH
4593: LD_INT 28
4595: PPUSH
4596: LD_INT 13
4598: PPUSH
4599: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
4603: LD_EXP 14
4607: PPUSH
4608: LD_EXP 4
4612: PPUSH
4613: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
4617: LD_EXP 5
4621: PPUSH
4622: LD_STRING DG-Start-36
4624: PPUSH
4625: CALL_OW 88
// if Kurt then
4629: LD_EXP 14
4633: IFFALSE 4685
// begin Say ( Kurt , DKs-Start-37 ) ;
4635: LD_EXP 14
4639: PPUSH
4640: LD_STRING DKs-Start-37
4642: PPUSH
4643: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
4647: LD_EXP 14
4651: PPUSH
4652: LD_STRING DKs-Start-38
4654: PPUSH
4655: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
4659: LD_EXP 4
4663: PPUSH
4664: LD_EXP 14
4668: PPUSH
4669: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
4673: LD_EXP 4
4677: PPUSH
4678: LD_STRING DH-Start-39
4680: PPUSH
4681: CALL_OW 88
// end ; end ; if HexInfo ( 44 , 25 ) then
4685: LD_INT 44
4687: PPUSH
4688: LD_INT 25
4690: PPUSH
4691: CALL_OW 428
4695: IFFALSE 4712
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
4697: LD_INT 44
4699: PPUSH
4700: LD_INT 25
4702: PPUSH
4703: CALL_OW 428
4707: PPUSH
4708: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
4712: LD_EXP 13
4716: PPUSH
4717: LD_INT 5
4719: PPUSH
4720: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
4724: LD_EXP 13
4728: PPUSH
4729: LD_INT 44
4731: PPUSH
4732: LD_INT 25
4734: PPUSH
4735: LD_INT 0
4737: PPUSH
4738: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
4742: LD_EXP 13
4746: PPUSH
4747: LD_INT 29
4749: PPUSH
4750: LD_INT 12
4752: PPUSH
4753: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4757: LD_INT 35
4759: PPUSH
4760: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
4764: LD_EXP 4
4768: PPUSH
4769: LD_EXP 13
4773: PPUSH
4774: CALL_OW 296
4778: PUSH
4779: LD_INT 8
4781: LESS
4782: PUSH
4783: LD_EXP 13
4787: PPUSH
4788: LD_INT 26
4790: PPUSH
4791: LD_INT 9
4793: PPUSH
4794: CALL_OW 297
4798: PUSH
4799: LD_INT 6
4801: LESS
4802: OR
4803: IFFALSE 4757
// Say ( Olaf , DO-Scout-1 ) ;
4805: LD_EXP 13
4809: PPUSH
4810: LD_STRING DO-Scout-1
4812: PPUSH
4813: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
4817: LD_EXP 13
4821: PPUSH
4822: LD_EXP 4
4826: PPUSH
4827: CALL_OW 119
// for i in tmp union heikeSecondSquad do
4831: LD_ADDR_VAR 0 2
4835: PUSH
4836: LD_VAR 0 5
4840: PUSH
4841: LD_EXP 16
4845: UNION
4846: PUSH
4847: FOR_IN
4848: IFFALSE 4866
// ComTurnUnit ( i , Olaf ) ;
4850: LD_VAR 0 2
4854: PPUSH
4855: LD_EXP 13
4859: PPUSH
4860: CALL_OW 119
4864: GO 4847
4866: POP
4867: POP
// wait ( 0 0$0.3 ) ;
4868: LD_INT 10
4870: PPUSH
4871: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
4875: LD_EXP 4
4879: PPUSH
4880: LD_EXP 13
4884: PPUSH
4885: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
4889: LD_EXP 4
4893: PPUSH
4894: LD_EXP 13
4898: PPUSH
4899: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
4903: LD_EXP 4
4907: PPUSH
4908: LD_STRING DH-Scout-2
4910: PPUSH
4911: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
4915: LD_EXP 13
4919: PPUSH
4920: LD_STRING DO-Scout-3
4922: PPUSH
4923: CALL_OW 88
// if Mike and Givi then
4927: LD_EXP 6
4931: PUSH
4932: LD_EXP 5
4936: AND
4937: IFFALSE 4953
// Say ( Olaf , DO-Scout-4 ) else
4939: LD_EXP 13
4943: PPUSH
4944: LD_STRING DO-Scout-4
4946: PPUSH
4947: CALL_OW 88
4951: GO 5053
// begin if Mike then
4953: LD_EXP 6
4957: IFFALSE 4985
// begin Say ( Olaf , DO-Scout-a-4 ) ;
4959: LD_EXP 13
4963: PPUSH
4964: LD_STRING DO-Scout-a-4
4966: PPUSH
4967: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
4971: LD_EXP 4
4975: PPUSH
4976: LD_STRING DH-Scout-a-5
4978: PPUSH
4979: CALL_OW 88
// end else
4983: GO 5053
// if Givi then
4985: LD_EXP 5
4989: IFFALSE 5017
// begin Say ( Olaf , DO-Scout-b-4 ) ;
4991: LD_EXP 13
4995: PPUSH
4996: LD_STRING DO-Scout-b-4
4998: PPUSH
4999: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
5003: LD_EXP 4
5007: PPUSH
5008: LD_STRING DH-Scout-b-5
5010: PPUSH
5011: CALL_OW 88
// end else
5015: GO 5053
// begin Say ( Olaf , DO-Scout-f-4 ) ;
5017: LD_EXP 13
5021: PPUSH
5022: LD_STRING DO-Scout-f-4
5024: PPUSH
5025: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
5029: LD_EXP 4
5033: PPUSH
5034: LD_STRING DH-Scout-f-5
5036: PPUSH
5037: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
5041: LD_EXP 13
5045: PPUSH
5046: LD_STRING DO-Scout-f-6
5048: PPUSH
5049: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
5053: LD_EXP 4
5057: PPUSH
5058: LD_STRING DH-Scout-5
5060: PPUSH
5061: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
5065: LD_EXP 13
5069: PPUSH
5070: LD_STRING DO-Scout-6
5072: PPUSH
5073: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
5077: LD_EXP 13
5081: PPUSH
5082: LD_STRING DO-Scout-7
5084: PPUSH
5085: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
5089: LD_EXP 4
5093: PPUSH
5094: LD_STRING DH-Scout-8
5096: PPUSH
5097: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
5101: LD_EXP 4
5105: PPUSH
5106: LD_STRING DH-Scout-9
5108: PPUSH
5109: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
5113: LD_EXP 13
5117: PPUSH
5118: LD_STRING DO-Scout-10
5120: PPUSH
5121: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
5125: LD_EXP 13
5129: PPUSH
5130: LD_STRING DO-Scout-12
5132: PPUSH
5133: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
5137: LD_EXP 13
5141: PPUSH
5142: LD_STRING DO-Scout-13
5144: PPUSH
5145: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
5149: LD_EXP 13
5153: PPUSH
5154: LD_STRING DO-Scout-14
5156: PPUSH
5157: CALL_OW 88
// if Givi then
5161: LD_EXP 5
5165: IFFALSE 5191
// begin Say ( Givi , DG-Scout-15 ) ;
5167: LD_EXP 5
5171: PPUSH
5172: LD_STRING DG-Scout-15
5174: PPUSH
5175: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
5179: LD_EXP 9
5183: PPUSH
5184: LD_STRING DK-Scout-16
5186: PPUSH
5187: CALL_OW 88
// end ; async ;
5191: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
5192: LD_EXP 13
5196: PPUSH
5197: LD_STRING DO-Scout-17
5199: PPUSH
5200: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
5204: LD_INT 55
5206: PPUSH
5207: LD_INT 77
5209: PPUSH
5210: LD_INT 2
5212: PPUSH
5213: LD_INT 6
5215: NEG
5216: PPUSH
5217: CALL 2656 0 4
// wait ( 10 ) ;
5221: LD_INT 10
5223: PPUSH
5224: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
5228: LD_INT 55
5230: PPUSH
5231: LD_INT 77
5233: PPUSH
5234: CALL_OW 84
// wait ( 0 0$5 ) ;
5238: LD_INT 175
5240: PPUSH
5241: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
5245: LD_EXP 13
5249: PPUSH
5250: LD_STRING DO-Scout-18
5252: PPUSH
5253: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
5257: LD_INT 204
5259: PPUSH
5260: LD_INT 107
5262: PPUSH
5263: LD_INT 2
5265: PPUSH
5266: LD_INT 12
5268: NEG
5269: PPUSH
5270: CALL 2656 0 4
// wait ( 10 ) ;
5274: LD_INT 10
5276: PPUSH
5277: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
5281: LD_INT 204
5283: PPUSH
5284: LD_INT 107
5286: PPUSH
5287: CALL_OW 84
// wait ( 0 0$5 ) ;
5291: LD_INT 175
5293: PPUSH
5294: CALL_OW 67
// sync ;
5298: SYNC
// CenterNowOnUnits ( Heike ) ;
5299: LD_EXP 4
5303: PPUSH
5304: CALL_OW 87
// Say ( Olaf , DO-Scout-19 ) ;
5308: LD_EXP 13
5312: PPUSH
5313: LD_STRING DO-Scout-19
5315: PPUSH
5316: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
5320: LD_EXP 13
5324: PPUSH
5325: LD_STRING DO-Scout-20
5327: PPUSH
5328: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
5332: LD_EXP 4
5336: PPUSH
5337: LD_STRING DH-Scout-21
5339: PPUSH
5340: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
5344: LD_EXP 4
5348: PPUSH
5349: LD_STRING DH-Scout-22
5351: PPUSH
5352: CALL_OW 88
// InGameOff ;
5356: CALL_OW 9
// ChangeMissionObjectives ( Road ) ;
5360: LD_STRING Road
5362: PPUSH
5363: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5367: LD_ADDR_VAR 0 2
5371: PUSH
5372: LD_INT 22
5374: PUSH
5375: LD_INT 5
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: LD_INT 21
5384: PUSH
5385: LD_INT 2
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PPUSH
5396: CALL_OW 69
5400: PUSH
5401: FOR_IN
5402: IFFALSE 5418
// SetSide ( i , 2 ) ;
5404: LD_VAR 0 2
5408: PPUSH
5409: LD_INT 2
5411: PPUSH
5412: CALL_OW 235
5416: GO 5401
5418: POP
5419: POP
// SaveForQuickRestart ;
5420: CALL_OW 22
// end ;
5424: LD_VAR 0 1
5428: RET
