// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1437 0 0
// PrepareRussian ;
  35: CALL 3043 0 0
// Action ;
  39: CALL 8115 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function ReverseArray ( array ) ; var i ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
// if not array then
1151: LD_VAR 0 1
1155: NOT
1156: IFFALSE 1160
// exit ;
1158: GO 1218
// result := [ ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: EMPTY
1166: ST_TO_ADDR
// for i := 1 to array do
1167: LD_ADDR_VAR 0 3
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_VAR 0 1
1181: PUSH
1182: FOR_TO
1183: IFFALSE 1216
// result := Insert ( result , 1 , array [ i ] ) ;
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_VAR 0 1
1202: PUSH
1203: LD_VAR 0 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 2
1213: ST_TO_ADDR
1214: GO 1182
1216: POP
1217: POP
// end ;
1218: LD_VAR 0 2
1222: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1223: LD_INT 0
1225: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_VAR 0 2
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: CALL_OW 331
// end ;
1269: LD_VAR 0 5
1273: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1274: LD_INT 0
1276: PPUSH
// if not units then
1277: LD_VAR 0 1
1281: NOT
1282: IFFALSE 1286
// exit ;
1284: GO 1369
// result := true ;
1286: LD_ADDR_VAR 0 4
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1294: LD_VAR 0 1
1298: PPUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PPUSH
1309: CALL_OW 72
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 2
1322: PPUSH
1323: CALL_OW 88
1327: NOT
1328: IFFALSE 1369
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 26
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 72
1354: PUSH
1355: LD_INT 1
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 3
1363: PPUSH
1364: CALL_OW 88
1368: ST_TO_ADDR
// end ;
1369: LD_VAR 0 4
1373: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
// if not group then
1378: LD_VAR 0 2
1382: NOT
1383: IFFALSE 1387
// exit ;
1385: GO 1432
// for i in group do
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_VAR 0 2
1396: PUSH
1397: FOR_IN
1398: IFFALSE 1430
// if See ( side , i ) then
1400: LD_VAR 0 1
1404: PPUSH
1405: LD_VAR 0 4
1409: PPUSH
1410: CALL_OW 292
1414: IFFALSE 1428
// begin result := true ;
1416: LD_ADDR_VAR 0 3
1420: PUSH
1421: LD_INT 1
1423: ST_TO_ADDR
// exit ;
1424: POP
1425: POP
1426: GO 1432
// end ;
1428: GO 1397
1430: POP
1431: POP
// end ; end_of_file
1432: LD_VAR 0 3
1436: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
// uc_side := 2 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 2
1448: ST_TO_ADDR
// uc_nation := 2 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 2
1456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1457: LD_ADDR_EXP 21
1461: PUSH
1462: LD_STRING Heike
1464: PPUSH
1465: LD_EXP 1
1469: NOT
1470: PPUSH
1471: LD_EXP 2
1475: PPUSH
1476: CALL 33500 0 3
1480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1481: LD_ADDR_EXP 24
1485: PUSH
1486: LD_STRING Ibrahim
1488: PPUSH
1489: LD_EXP 1
1493: NOT
1494: PPUSH
1495: LD_EXP 2
1499: PPUSH
1500: CALL 33500 0 3
1504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1505: LD_ADDR_EXP 22
1509: PUSH
1510: LD_STRING Givi
1512: PPUSH
1513: LD_EXP 1
1517: NOT
1518: PPUSH
1519: LD_EXP 2
1523: PPUSH
1524: CALL 33500 0 3
1528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1529: LD_ADDR_EXP 25
1533: PUSH
1534: LD_STRING Kamil
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_EXP 2
1547: PPUSH
1548: CALL 33500 0 3
1552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_STRING Kaia
1560: PPUSH
1561: LD_EXP 1
1565: NOT
1566: PPUSH
1567: LD_EXP 2
1571: PPUSH
1572: CALL 33500 0 3
1576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1577: LD_ADDR_EXP 27
1581: PUSH
1582: LD_STRING Sophia
1584: PPUSH
1585: LD_EXP 1
1589: NOT
1590: PPUSH
1591: LD_EXP 2
1595: PPUSH
1596: CALL 33500 0 3
1600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1601: LD_ADDR_EXP 28
1605: PUSH
1606: LD_STRING Markov
1608: PPUSH
1609: LD_EXP 1
1613: NOT
1614: PPUSH
1615: LD_EXP 2
1619: PPUSH
1620: CALL 33500 0 3
1624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1625: LD_ADDR_EXP 33
1629: PUSH
1630: LD_STRING Aviradze
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 2
1643: PPUSH
1644: CALL 33500 0 3
1648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1649: LD_ADDR_EXP 32
1653: PUSH
1654: LD_STRING Kurt
1656: PPUSH
1657: LD_EXP 1
1661: NOT
1662: PPUSH
1663: LD_EXP 2
1667: PPUSH
1668: CALL 33500 0 3
1672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1673: LD_ADDR_EXP 23
1677: PUSH
1678: LD_STRING Mike
1680: PPUSH
1681: LD_EXP 1
1685: NOT
1686: PPUSH
1687: LD_EXP 2
1691: PPUSH
1692: CALL 33500 0 3
1696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1697: LD_ADDR_EXP 30
1701: PUSH
1702: LD_STRING Olaf
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_STRING 
1710: PPUSH
1711: CALL 33500 0 3
1715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1716: LD_ADDR_EXP 34
1720: PUSH
1721: LD_STRING 04_2_others
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1729: LD_ADDR_EXP 36
1733: PUSH
1734: LD_STRING 04_2_apes
1736: PPUSH
1737: CALL_OW 31
1741: ST_TO_ADDR
// if hasFlamethrower then
1742: LD_EXP 3
1746: IFFALSE 1981
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1748: LD_INT 70
1750: PPUSH
1751: LD_INT 2
1753: PPUSH
1754: LD_INT 2
1756: PPUSH
1757: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1761: LD_ADDR_EXP 35
1765: PUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: LD_INT 27
1777: PUSH
1778: LD_INT 2
1780: PUSH
1781: LD_INT 1000
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 13
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 25
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1000
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 13
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: LD_INT 26
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 1000
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: LD_INT 27
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 1000
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 13
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 32
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 0
1934: PUSH
1935: LD_INT 60
1937: PUSH
1938: LD_INT 40
1940: PUSH
1941: LD_INT 20
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_OWVAR 67
1957: ARRAY
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: ST_TO_ADDR
// end else
1979: GO 2199
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1981: LD_ADDR_EXP 35
1985: PUSH
1986: LD_INT 13
1988: PUSH
1989: LD_INT 1
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 25
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: LD_INT 1000
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: LD_INT 1
2031: PUSH
2032: LD_INT 27
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: LD_INT 1000
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 13
2062: PUSH
2063: LD_INT 1
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: LD_INT 24
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 1000
2077: PUSH
2078: LD_INT 0
2080: PUSH
2081: LD_INT 0
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 13
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: LD_INT 27
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 1000
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: LD_INT 0
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 1
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 50
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 20
2163: PUSH
2164: LD_INT 10
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_OWVAR 67
2177: ARRAY
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
// end ; uc_side := 5 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 5
2206: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Abdul
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_STRING 
2220: PPUSH
2221: CALL 33500 0 3
2225: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2226: LD_ADDR_EXP 31
2230: PUSH
2231: LD_STRING Omar
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 33500 0 3
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 1
2249: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// pfx := 04_1_ ;
2257: LD_ADDR_VAR 0 2
2261: PUSH
2262: LD_STRING 04_1_
2264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2265: LD_INT 35
2267: PPUSH
2268: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2272: LD_INT 3
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: CALL_OW 428
2282: NOT
2283: IFFALSE 2265
// tmp := [ ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// uc_side := 5 ;
2292: LD_ADDR_OWVAR 20
2296: PUSH
2297: LD_INT 5
2299: ST_TO_ADDR
// uc_nation := 2 ;
2300: LD_ADDR_OWVAR 21
2304: PUSH
2305: LD_INT 2
2307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2308: LD_ADDR_EXP 33
2312: PUSH
2313: LD_STRING Aviradze_L
2315: PPUSH
2316: LD_EXP 1
2320: NOT
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL 33500 0 3
2331: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2344: LD_EXP 33
2348: PPUSH
2349: LD_INT 14
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2359: LD_EXP 33
2363: PPUSH
2364: LD_INT 8
2366: PPUSH
2367: LD_INT 6
2369: PPUSH
2370: CALL_OW 111
// AddComHold ( Aviradze ) ;
2374: LD_EXP 33
2378: PPUSH
2379: CALL_OW 200
// tmp := [ Aviradze ] ;
2383: LD_ADDR_VAR 0 4
2387: PUSH
2388: LD_EXP 33
2392: PUSH
2393: EMPTY
2394: LIST
2395: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2396: LD_INT 70
2398: PPUSH
2399: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2403: LD_STRING Ibrahim_L
2405: PPUSH
2406: LD_EXP 1
2410: NOT
2411: PPUSH
2412: LD_VAR 0 2
2416: PPUSH
2417: CALL 33500 0 3
2421: IFFALSE 2521
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2423: LD_ADDR_EXP 24
2427: PUSH
2428: LD_STRING Ibrahim_L
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_VAR 0 2
2441: PPUSH
2442: CALL 33500 0 3
2446: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2459: LD_EXP 24
2463: PPUSH
2464: LD_INT 14
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2474: LD_EXP 24
2478: PPUSH
2479: LD_INT 8
2481: PPUSH
2482: LD_INT 7
2484: PPUSH
2485: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2489: LD_EXP 24
2493: PPUSH
2494: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 4
2507: PUSH
2508: LD_EXP 24
2512: ADD
2513: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2521: LD_STRING Kaia_L
2523: PPUSH
2524: LD_EXP 1
2528: NOT
2529: PPUSH
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL 33500 0 3
2539: IFFALSE 2639
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2541: LD_ADDR_EXP 26
2545: PUSH
2546: LD_STRING Kaia_L
2548: PPUSH
2549: LD_EXP 1
2553: NOT
2554: PPUSH
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL 33500 0 3
2564: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2577: LD_EXP 26
2581: PPUSH
2582: LD_INT 14
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2592: LD_EXP 26
2596: PPUSH
2597: LD_INT 8
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 111
// AddComHold ( Kaia ) ;
2607: LD_EXP 26
2611: PPUSH
2612: CALL_OW 200
// tmp := tmp ^ Kaia ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_EXP 26
2630: ADD
2631: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2632: LD_INT 70
2634: PPUSH
2635: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2639: LD_STRING Kamil_L
2641: PPUSH
2642: LD_EXP 1
2646: NOT
2647: PPUSH
2648: LD_VAR 0 2
2652: PPUSH
2653: CALL 33500 0 3
2657: IFFALSE 2757
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2659: LD_ADDR_EXP 25
2663: PUSH
2664: LD_STRING Kamil_L
2666: PPUSH
2667: LD_EXP 1
2671: NOT
2672: PPUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 33500 0 3
2682: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2695: LD_EXP 25
2699: PPUSH
2700: LD_INT 14
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2710: LD_EXP 25
2714: PPUSH
2715: LD_INT 8
2717: PPUSH
2718: LD_INT 7
2720: PPUSH
2721: CALL_OW 111
// AddComHold ( Kamil ) ;
2725: LD_EXP 25
2729: PPUSH
2730: CALL_OW 200
// tmp := tmp ^ Kamil ;
2734: LD_ADDR_VAR 0 4
2738: PUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_EXP 25
2748: ADD
2749: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2750: LD_INT 70
2752: PPUSH
2753: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2757: LD_STRING Sophia_L
2759: PPUSH
2760: LD_EXP 1
2764: NOT
2765: PPUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL 33500 0 3
2775: IFFALSE 2875
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2777: LD_ADDR_EXP 27
2781: PUSH
2782: LD_STRING Sophia_L
2784: PPUSH
2785: LD_EXP 1
2789: NOT
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 33500 0 3
2800: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 2
2808: PPUSH
2809: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2813: LD_EXP 27
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: LD_INT 0
2823: PPUSH
2824: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2828: LD_EXP 27
2832: PPUSH
2833: LD_INT 9
2835: PPUSH
2836: LD_INT 6
2838: PPUSH
2839: CALL_OW 111
// AddComHold ( Sophia ) ;
2843: LD_EXP 27
2847: PPUSH
2848: CALL_OW 200
// tmp := tmp ^ Sophia ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_VAR 0 4
2861: PUSH
2862: LD_EXP 27
2866: ADD
2867: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2868: LD_INT 70
2870: PPUSH
2871: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2875: LD_ADDR_VAR 0 5
2879: PUSH
2880: LD_STRING 04_1_others_L
2882: PPUSH
2883: CALL_OW 31
2887: ST_TO_ADDR
// if tmp2 then
2888: LD_VAR 0 5
2892: IFFALSE 2989
// for i in tmp2 do
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2987
// begin SetDir ( i , 2 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 14
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_EXP 34
2943: PPUSH
2944: LD_EXP 34
2948: PUSH
2949: LD_INT 1
2951: PLUS
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 1
2962: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2963: LD_VAR 0 3
2967: PPUSH
2968: LD_INT 17
2970: PPUSH
2971: LD_INT 14
2973: PPUSH
2974: CALL_OW 111
// wait ( 0 0$2 ) ;
2978: LD_INT 70
2980: PPUSH
2981: CALL_OW 67
// end ;
2985: GO 2904
2987: POP
2988: POP
// for i in tmp union tmp2 do
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: LD_VAR 0 4
2998: PUSH
2999: LD_VAR 0 5
3003: UNION
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3036
// begin SetSide ( i , 2 ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 2
3015: PPUSH
3016: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3020: LD_VAR 0 3
3024: PPUSH
3025: LD_EXP 21
3029: PPUSH
3030: CALL_OW 112
// end ;
3034: GO 3005
3036: POP
3037: POP
// end ; end_of_file
3038: LD_VAR 0 1
3042: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
// uc_side := 3 ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_INT 3
3055: ST_TO_ADDR
// uc_nation := 3 ;
3056: LD_ADDR_OWVAR 21
3060: PUSH
3061: LD_INT 3
3063: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3064: LD_ADDR_EXP 37
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3071: LD_ADDR_EXP 38
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3078: LD_ADDR_EXP 41
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 2 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 2
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3238
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 3
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: LD_INT 5
3115: PUSH
3116: LD_INT 6
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_OWVAR 67
3129: ARRAY
3130: PPUSH
3131: CALL_OW 380
// un := CreateHuman ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 44
3144: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3145: LD_ADDR_EXP 37
3149: PUSH
3150: LD_EXP 37
3154: PPUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: PPUSH
3164: LD_VAR 0 3
3168: PPUSH
3169: CALL_OW 1
3173: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 100
3181: PPUSH
3182: LD_INT 63
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3195: LD_VAR 0 3
3199: PPUSH
3200: LD_INT 97
3202: PPUSH
3203: LD_INT 64
3205: PPUSH
3206: CALL_OW 428
3210: PUSH
3211: LD_INT 98
3213: PPUSH
3214: LD_INT 58
3216: PPUSH
3217: CALL_OW 428
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_VAR 0 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 120
// end ;
3236: GO 3098
3238: POP
3239: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3240: LD_INT 51
3242: PPUSH
3243: LD_INT 77
3245: PPUSH
3246: CALL_OW 428
3250: PPUSH
3251: CALL_OW 274
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: LD_INT 120
3261: PPUSH
3262: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 274
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_INT 300
3279: PPUSH
3280: CALL_OW 277
// for i := 1 to 2 do
3284: LD_ADDR_VAR 0 2
3288: PUSH
3289: DOUBLE
3290: LD_INT 1
3292: DEC
3293: ST_TO_ADDR
3294: LD_INT 2
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3416
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3300: LD_INT 0
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 6
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PUSH
3324: LD_OWVAR 67
3328: ARRAY
3329: PPUSH
3330: CALL_OW 380
// un := CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3344: LD_ADDR_EXP 38
3348: PUSH
3349: LD_EXP 38
3353: PPUSH
3354: LD_EXP 38
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 198
3380: PPUSH
3381: LD_INT 106
3383: PPUSH
3384: CALL_OW 428
3388: PUSH
3389: LD_INT 205
3391: PPUSH
3392: LD_INT 114
3394: PPUSH
3395: CALL_OW 428
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PPUSH
3410: CALL_OW 52
// end ;
3414: GO 3297
3416: POP
3417: POP
// for i := 1 to 2 do
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_INT 2
3430: PUSH
3431: FOR_TO
3432: IFFALSE 3509
// begin PrepareHuman ( false , 2 , 3 ) ;
3434: LD_INT 0
3436: PPUSH
3437: LD_INT 2
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: CALL_OW 380
// un := CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3457: LD_ADDR_EXP 38
3461: PUSH
3462: LD_EXP 38
3466: PPUSH
3467: LD_EXP 38
3471: PUSH
3472: LD_INT 1
3474: PLUS
3475: PPUSH
3476: LD_VAR 0 3
3480: PPUSH
3481: CALL_OW 1
3485: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_INT 204
3493: PPUSH
3494: LD_INT 108
3496: PPUSH
3497: LD_INT 2
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 50
// end ;
3507: GO 3431
3509: POP
3510: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 4
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 6
3529: PUSH
3530: LD_INT 7
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_OWVAR 67
3543: ARRAY
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3692
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: LD_INT 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 5
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 3
3587: PUSH
3588: LD_INT 4
3590: PUSH
3591: LD_INT 5
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_OWVAR 67
3607: ARRAY
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_INT 10
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 69098 0 3
3638: IFFALSE 3690
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3640: LD_ADDR_EXP 39
3644: PUSH
3645: LD_EXP 39
3649: PPUSH
3650: LD_EXP 39
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// if Prob ( 50 ) then
3669: LD_INT 50
3671: PPUSH
3672: CALL_OW 13
3676: IFFALSE 3690
// ForceSleep ( un , true ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: CALL_OW 585
// end ; end ;
3690: GO 3545
3692: POP
3693: POP
// for i := 1 to 3 do
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_INT 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 4
3724: PUSH
3725: LD_INT 5
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PPUSH
3740: CALL_OW 380
// un := CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 11
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 69098 0 3
3769: IFFALSE 3800
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3771: LD_ADDR_EXP 39
3775: PUSH
3776: LD_EXP 39
3780: PPUSH
3781: LD_EXP 39
3785: PUSH
3786: LD_INT 1
3788: PLUS
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: CALL_OW 1
3799: ST_TO_ADDR
// end ;
3800: GO 3707
3802: POP
3803: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3804: LD_ADDR_VAR 0 2
3808: PUSH
3809: DOUBLE
3810: LD_INT 1
3812: DEC
3813: ST_TO_ADDR
3814: LD_INT 5
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: LD_INT 7
3822: PUSH
3823: LD_INT 8
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_OWVAR 67
3836: ARRAY
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3985
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3841: LD_INT 0
3843: PPUSH
3844: LD_INT 1
3846: PUSH
3847: LD_INT 1
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: LD_INT 4
3855: PUSH
3856: LD_INT 1
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: CALL_OW 12
3876: ARRAY
3877: PPUSH
3878: LD_INT 3
3880: PUSH
3881: LD_INT 4
3883: PUSH
3884: LD_INT 5
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_OWVAR 67
3900: ARRAY
3901: PPUSH
3902: CALL_OW 380
// un := CreateHuman ;
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: CALL_OW 44
3915: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 15
3923: PPUSH
3924: LD_INT 0
3926: PPUSH
3927: CALL 69098 0 3
3931: IFFALSE 3983
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3933: LD_ADDR_EXP 40
3937: PUSH
3938: LD_EXP 40
3942: PPUSH
3943: LD_EXP 40
3947: PUSH
3948: LD_INT 1
3950: PLUS
3951: PPUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 1
3961: ST_TO_ADDR
// if Prob ( 50 ) then
3962: LD_INT 50
3964: PPUSH
3965: CALL_OW 13
3969: IFFALSE 3983
// ForceSleep ( un , true ) ;
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: CALL_OW 585
// end ; end ;
3983: GO 3838
3985: POP
3986: POP
// end ;
3987: LD_VAR 0 1
3991: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// uc_side := 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation := 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// for i := 1 to 6 do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_INT 6
4025: PUSH
4026: FOR_TO
4027: IFFALSE 4106
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 1
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 380
// un := CreateHuman ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: CALL_OW 44
4070: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_INT 54
4078: PPUSH
4079: LD_INT 88
4081: PPUSH
4082: LD_INT 12
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// SetLives ( un , 1 ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 234
// end ;
4104: GO 4026
4106: POP
4107: POP
// uc_side := 3 ;
4108: LD_ADDR_OWVAR 20
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// uc_nation := 0 ;
4116: LD_ADDR_OWVAR 21
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4124: LD_ADDR_EXP 42
4128: PUSH
4129: EMPTY
4130: ST_TO_ADDR
// apeEngGroup := [ ] ;
4131: LD_ADDR_EXP 43
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: DOUBLE
4144: LD_INT 1
4146: DEC
4147: ST_TO_ADDR
4148: LD_INT 4
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 6
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_OWVAR 67
4170: ARRAY
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4291
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 15
4180: PPUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 4
4186: PUSH
4187: LD_INT 5
4189: PUSH
4190: LD_INT 6
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: LD_OWVAR 67
4203: ARRAY
4204: PPUSH
4205: CALL_OW 380
// un := CreateHuman ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4219: LD_ADDR_EXP 42
4223: PUSH
4224: LD_EXP 42
4228: PPUSH
4229: LD_EXP 42
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: PPUSH
4238: LD_VAR 0 3
4242: PPUSH
4243: CALL_OW 1
4247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: LD_INT 5
4258: PPUSH
4259: CALL_OW 12
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 56
4275: PPUSH
4276: LD_INT 82
4278: PPUSH
4279: LD_INT 6
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 50
// end ;
4289: GO 4172
4291: POP
4292: POP
// for i := 1 to 2 do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 2
4305: PUSH
4306: FOR_TO
4307: IFFALSE 4383
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 16
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: CALL_OW 380
// un := CreateHuman ;
4322: LD_ADDR_VAR 0 3
4326: PUSH
4327: CALL_OW 44
4331: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4332: LD_ADDR_EXP 43
4336: PUSH
4337: LD_EXP 43
4341: PPUSH
4342: LD_EXP 43
4346: PUSH
4347: LD_INT 1
4349: PLUS
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL_OW 1
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_INT 51
4368: PPUSH
4369: LD_INT 77
4371: PPUSH
4372: CALL_OW 428
4376: PPUSH
4377: CALL_OW 52
// end ;
4381: GO 4306
4383: POP
4384: POP
// end ;
4385: LD_VAR 0 1
4389: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4390: LD_EXP 42
4394: PPUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 24
4400: PUSH
4401: LD_INT 600
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 54
4417: PUSH
4418: EMPTY
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: PUSH
4434: LD_INT 66
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: CALL_OW 428
4444: PPUSH
4445: CALL_OW 302
4449: AND
4450: IFFALSE 4535
4452: GO 4454
4454: DISABLE
4455: LD_INT 0
4457: PPUSH
// begin enable ;
4458: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4459: LD_ADDR_VAR 0 1
4463: PUSH
4464: LD_EXP 42
4468: PPUSH
4469: LD_INT 3
4471: PUSH
4472: LD_INT 24
4474: PUSH
4475: LD_INT 600
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 3
4488: PUSH
4489: LD_INT 54
4491: PUSH
4492: EMPTY
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 72
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4533
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 66
4518: PPUSH
4519: LD_INT 89
4521: PPUSH
4522: CALL_OW 428
4526: PPUSH
4527: CALL_OW 120
4531: GO 4508
4533: POP
4534: POP
// end ;
4535: PPOPN 1
4537: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4538: LD_INT 22
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 92
4550: PUSH
4551: LD_INT 54
4553: PUSH
4554: LD_INT 77
4556: PUSH
4557: LD_INT 8
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PPUSH
4570: CALL_OW 69
4574: IFFALSE 4638
4576: GO 4578
4578: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4579: LD_EXP 43
4583: PPUSH
4584: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4588: LD_EXP 43
4592: PPUSH
4593: LD_INT 22
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 92
4605: PUSH
4606: LD_INT 54
4608: PUSH
4609: LD_INT 77
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: PUSH
4630: LD_INT 1
4632: ARRAY
4633: PPUSH
4634: CALL_OW 175
// end ;
4638: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4639: LD_INT 0
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 12
4666: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4667: LD_ADDR_VAR 0 5
4671: PUSH
4672: LD_INT 16
4674: PUSH
4675: LD_INT 17
4677: PUSH
4678: LD_INT 19
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_VAR 0 3
4690: ARRAY
4691: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4692: LD_ADDR_VAR 0 7
4696: PUSH
4697: LD_INT 159
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 137
4709: PUSH
4710: LD_INT 37
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 123
4719: PUSH
4720: LD_INT 55
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 115
4729: PUSH
4730: LD_INT 71
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 106
4739: PUSH
4740: LD_INT 88
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 97
4749: PUSH
4750: LD_INT 114
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 75
4759: PUSH
4760: LD_INT 146
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 206
4778: PUSH
4779: LD_INT 135
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 184
4788: PUSH
4789: LD_INT 111
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 154
4798: PUSH
4799: LD_INT 97
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 122
4808: PUSH
4809: LD_INT 80
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 109
4818: PUSH
4819: LD_INT 78
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 97
4828: PUSH
4829: LD_INT 113
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 75
4838: PUSH
4839: LD_INT 147
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 185
4857: PUSH
4858: LD_INT 72
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 171
4867: PUSH
4868: LD_INT 83
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 161
4877: PUSH
4878: LD_INT 99
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 125
4887: PUSH
4888: LD_INT 82
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 105
4897: PUSH
4898: LD_INT 90
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 96
4907: PUSH
4908: LD_INT 116
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 75
4917: PUSH
4918: LD_INT 147
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_VAR 0 3
4943: ARRAY
4944: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4945: LD_ADDR_VAR 0 4
4949: PUSH
4950: LD_INT 4
4952: PUSH
4953: LD_INT 5
4955: PUSH
4956: LD_INT 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: LD_VAR 0 3
4968: ARRAY
4969: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4970: LD_ADDR_VAR 0 6
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: LD_VAR 0 3
4993: ARRAY
4994: ST_TO_ADDR
// for i := 1 to 2 do
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_INT 2
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5027
// EraseResourceArea ( i , outerSpawnArea ) ;
5011: LD_VAR 0 2
5015: PPUSH
5016: LD_VAR 0 6
5020: PPUSH
5021: CALL_OW 286
5025: GO 5008
5027: POP
5028: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: IFFALSE 5292
// repeat wait ( 0 0$1 ) ;
5079: LD_INT 35
5081: PPUSH
5082: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 2
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PPUSH
5119: CALL_OW 70
5123: IFFALSE 5184
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: LD_VAR 0 6
5134: PPUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5182
// RemoveUnit ( i ) ;
5171: LD_VAR 0 2
5175: PPUSH
5176: CALL_OW 64
5180: GO 5168
5182: POP
5183: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 21
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PPUSH
5199: CALL_OW 70
5203: IFFALSE 5252
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_VAR 0 6
5214: PPUSH
5215: LD_INT 21
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 70
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5250
// ComMoveXY ( i , 113 , 53 ) ;
5233: LD_VAR 0 2
5237: PPUSH
5238: LD_INT 113
5240: PPUSH
5241: LD_INT 53
5243: PPUSH
5244: CALL_OW 111
5248: GO 5230
5250: POP
5251: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5252: LD_VAR 0 6
5256: PPUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 21
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 21
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: PPUSH
5285: CALL_OW 70
5289: NOT
5290: IFFALSE 5079
// case convoyCounter of 1 .. 3 :
5292: LD_EXP 16
5296: PUSH
5297: LD_INT 1
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 3
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5930
5311: POP
// begin uc_side := 3 ;
5312: LD_ADDR_OWVAR 20
5316: PUSH
5317: LD_INT 3
5319: ST_TO_ADDR
// uc_nation := 3 ;
5320: LD_ADDR_OWVAR 21
5324: PUSH
5325: LD_INT 3
5327: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_INT 5
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 7
5346: PUSH
5347: LD_INT 8
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PUSH
5362: LD_EXP 16
5366: MINUS
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5560
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_INT 1
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: CALL_OW 12
5402: ARRAY
5403: PPUSH
5404: LD_INT 4
5406: PUSH
5407: LD_INT 5
5409: PUSH
5410: LD_INT 6
5412: PUSH
5413: LD_INT 7
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_OWVAR 67
5426: ARRAY
5427: PPUSH
5428: CALL_OW 380
// un := CreateHuman ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// SetDir ( un , dir ) ;
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 4
5451: PPUSH
5452: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5456: LD_VAR 0 8
5460: PPUSH
5461: LD_VAR 0 5
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL 69098 0 3
5473: IFFALSE 5558
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5475: LD_ADDR_EXP 41
5479: PUSH
5480: LD_EXP 41
5484: PPUSH
5485: LD_EXP 41
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: LD_VAR 0 8
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5504: LD_VAR 0 8
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5516: LD_VAR 0 8
5520: PPUSH
5521: LD_VAR 0 7
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 111
// wait ( 0 0$2 ) ;
5551: LD_INT 70
5553: PPUSH
5554: CALL_OW 67
// end ; end ;
5558: GO 5368
5560: POP
5561: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: DOUBLE
5568: LD_INT 1
5570: DEC
5571: ST_TO_ADDR
5572: LD_INT 3
5574: PUSH
5575: LD_INT 4
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_OWVAR 67
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5926
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5599: LD_INT 3
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 23
5613: PUSH
5614: LD_INT 24
5616: PUSH
5617: LD_INT 24
5619: PUSH
5620: LD_INT 24
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_OWVAR 67
5635: PPUSH
5636: LD_OWVAR 67
5640: PUSH
5641: LD_INT 2
5643: PLUS
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 42
5659: PUSH
5660: LD_INT 44
5662: PUSH
5663: LD_INT 43
5665: PUSH
5666: LD_INT 44
5668: PUSH
5669: LD_INT 46
5671: PUSH
5672: LD_INT 46
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PUSH
5691: LD_INT 2
5693: PLUS
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: PPUSH
5701: LD_INT 90
5703: PPUSH
5704: CALL 439 0 7
// un := CreateVehicle ;
5708: LD_ADDR_VAR 0 8
5712: PUSH
5713: CALL_OW 45
5717: ST_TO_ADDR
// SetDir ( un , dir ) ;
5718: LD_VAR 0 8
5722: PPUSH
5723: LD_VAR 0 4
5727: PPUSH
5728: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5732: LD_VAR 0 8
5736: PPUSH
5737: LD_VAR 0 5
5741: PPUSH
5742: LD_INT 0
5744: PPUSH
5745: CALL 69098 0 3
5749: IFFALSE 5924
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5751: LD_ADDR_EXP 41
5755: PUSH
5756: LD_EXP 41
5760: PPUSH
5761: LD_EXP 41
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PPUSH
5770: LD_VAR 0 8
5774: PPUSH
5775: CALL_OW 1
5779: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_OWVAR 67
5805: ARRAY
5806: PPUSH
5807: CALL_OW 383
// un := CreateHuman ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: CALL_OW 44
5820: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5821: LD_VAR 0 8
5825: PPUSH
5826: LD_EXP 41
5830: PUSH
5831: LD_EXP 41
5835: ARRAY
5836: PPUSH
5837: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5841: LD_ADDR_EXP 41
5845: PUSH
5846: LD_EXP 41
5850: PPUSH
5851: LD_EXP 41
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: PPUSH
5860: LD_VAR 0 8
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5870: LD_VAR 0 8
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5882: LD_VAR 0 8
5886: PPUSH
5887: LD_VAR 0 7
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: LD_VAR 0 7
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PUSH
5909: LD_INT 2
5911: ARRAY
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$3 ) ;
5917: LD_INT 105
5919: PPUSH
5920: CALL_OW 67
// end ; end ;
5924: GO 5596
5926: POP
5927: POP
// end ; 4 .. 7 :
5928: GO 6503
5930: LD_INT 4
5932: DOUBLE
5933: GREATEREQUAL
5934: IFFALSE 5942
5936: LD_INT 7
5938: DOUBLE
5939: LESSEQUAL
5940: IFTRUE 5944
5942: GO 6502
5944: POP
// begin uc_side := 3 ;
5945: LD_ADDR_OWVAR 20
5949: PUSH
5950: LD_INT 3
5952: ST_TO_ADDR
// uc_nation := 3 ;
5953: LD_ADDR_OWVAR 21
5957: PUSH
5958: LD_INT 3
5960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: DOUBLE
5967: LD_INT 1
5969: DEC
5970: ST_TO_ADDR
5971: LD_INT 2
5973: PUSH
5974: LD_INT 3
5976: PUSH
5977: LD_INT 4
5979: PUSH
5980: LD_INT 4
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: ARRAY
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6160
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5998: LD_INT 0
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 6
6012: PUSH
6013: LD_INT 7
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_OWVAR 67
6026: ARRAY
6027: PPUSH
6028: CALL_OW 380
// un := CreateHuman ;
6032: LD_ADDR_VAR 0 8
6036: PUSH
6037: CALL_OW 44
6041: ST_TO_ADDR
// SetDir ( un , dir ) ;
6042: LD_VAR 0 8
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 5
6065: PPUSH
6066: LD_INT 0
6068: PPUSH
6069: CALL 69098 0 3
6073: IFFALSE 6158
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6075: LD_ADDR_EXP 41
6079: PUSH
6080: LD_EXP 41
6084: PPUSH
6085: LD_EXP 41
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PPUSH
6094: LD_VAR 0 8
6098: PPUSH
6099: CALL_OW 1
6103: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6104: LD_VAR 0 8
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_VAR 0 7
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PUSH
6130: LD_INT 1
6132: ARRAY
6133: PPUSH
6134: LD_VAR 0 7
6138: PUSH
6139: LD_INT 1
6141: ARRAY
6142: PUSH
6143: LD_INT 2
6145: ARRAY
6146: PPUSH
6147: CALL_OW 111
// wait ( 0 0$2 ) ;
6151: LD_INT 70
6153: PPUSH
6154: CALL_OW 67
// end ; end ;
6158: GO 5995
6160: POP
6161: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: DOUBLE
6168: LD_INT 1
6170: DEC
6171: ST_TO_ADDR
6172: LD_INT 2
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_OWVAR 67
6194: ARRAY
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6498
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 2
6220: PPUSH
6221: CALL_OW 12
6225: ARRAY
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 42
6235: PUSH
6236: LD_INT 44
6238: PUSH
6239: LD_INT 43
6241: PUSH
6242: LD_INT 44
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_OWVAR 67
6262: PUSH
6263: LD_INT 1
6265: PLUS
6266: PPUSH
6267: CALL_OW 12
6271: ARRAY
6272: PPUSH
6273: LD_INT 90
6275: PPUSH
6276: CALL 439 0 7
// un := CreateVehicle ;
6280: LD_ADDR_VAR 0 8
6284: PUSH
6285: CALL_OW 45
6289: ST_TO_ADDR
// SetDir ( un , dir ) ;
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6304: LD_VAR 0 8
6308: PPUSH
6309: LD_VAR 0 5
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL 69098 0 3
6321: IFFALSE 6496
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6323: LD_ADDR_EXP 41
6327: PUSH
6328: LD_EXP 41
6332: PPUSH
6333: LD_EXP 41
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 8
6346: PPUSH
6347: CALL_OW 1
6351: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6352: LD_INT 0
6354: PPUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 6
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_OWVAR 67
6377: ARRAY
6378: PPUSH
6379: CALL_OW 383
// un := CreateHuman ;
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6393: LD_VAR 0 8
6397: PPUSH
6398: LD_EXP 41
6402: PUSH
6403: LD_EXP 41
6407: ARRAY
6408: PPUSH
6409: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6413: LD_ADDR_EXP 41
6417: PUSH
6418: LD_EXP 41
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: PPUSH
6432: LD_VAR 0 8
6436: PPUSH
6437: CALL_OW 1
6441: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6442: LD_VAR 0 8
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6454: LD_VAR 0 8
6458: PPUSH
6459: LD_VAR 0 7
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 7
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PUSH
6481: LD_INT 2
6483: ARRAY
6484: PPUSH
6485: CALL_OW 111
// wait ( 0 0$2 ) ;
6489: LD_INT 70
6491: PPUSH
6492: CALL_OW 67
// end ; end ;
6496: GO 6196
6498: POP
6499: POP
// end ; end ;
6500: GO 6503
6502: POP
// repeat wait ( 0 0$1 ) ;
6503: LD_INT 35
6505: PPUSH
6506: CALL_OW 67
// for un in ruConvoySquad do
6510: LD_ADDR_VAR 0 8
6514: PUSH
6515: LD_EXP 41
6519: PUSH
6520: FOR_IN
6521: IFFALSE 7145
// begin if IsInArea ( un , westSouthOutArea ) then
6523: LD_VAR 0 8
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: CALL_OW 308
6535: IFFALSE 6623
// begin if GetType ( un ) = unit_vehicle then
6537: LD_VAR 0 8
6541: PPUSH
6542: CALL_OW 247
6546: PUSH
6547: LD_INT 2
6549: EQUAL
6550: IFFALSE 6582
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6552: LD_ADDR_EXP 41
6556: PUSH
6557: LD_EXP 41
6561: PUSH
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 311
6571: DIFF
6572: ST_TO_ADDR
// RemoveUnit ( un ) ;
6573: LD_VAR 0 8
6577: PPUSH
6578: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6582: LD_ADDR_EXP 15
6586: PUSH
6587: LD_EXP 15
6591: PUSH
6592: LD_INT 1
6594: PLUS
6595: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6596: LD_ADDR_EXP 41
6600: PUSH
6601: LD_EXP 41
6605: PUSH
6606: LD_VAR 0 8
6610: DIFF
6611: ST_TO_ADDR
// RemoveUnit ( un ) ;
6612: LD_VAR 0 8
6616: PPUSH
6617: CALL_OW 64
// break ;
6621: GO 7145
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6623: LD_VAR 0 8
6627: PPUSH
6628: CALL_OW 305
6632: NOT
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 310
6643: NOT
6644: AND
6645: IFFALSE 6663
// ruConvoySquad := ruConvoySquad diff un ;
6647: LD_ADDR_EXP 41
6651: PUSH
6652: LD_EXP 41
6656: PUSH
6657: LD_VAR 0 8
6661: DIFF
6662: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 302
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 314
6682: NOT
6683: AND
6684: IFFALSE 7143
// begin tag := GetTag ( un ) ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_VAR 0 8
6695: PPUSH
6696: CALL_OW 110
6700: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6701: LD_VAR 0 8
6705: PPUSH
6706: LD_VAR 0 7
6710: PUSH
6711: LD_VAR 0 9
6715: PUSH
6716: LD_INT 1
6718: PLUS
6719: ARRAY
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 7
6729: PUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PUSH
6740: LD_INT 2
6742: ARRAY
6743: PPUSH
6744: CALL_OW 297
6748: PUSH
6749: LD_INT 6
6751: LESS
6752: IFFALSE 6935
// begin SetTag ( un , tag + 1 ) ;
6754: LD_VAR 0 8
6758: PPUSH
6759: LD_VAR 0 9
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: PPUSH
6768: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 247
6781: PUSH
6782: LD_INT 2
6784: EQUAL
6785: PUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: OR
6800: IFFALSE 6933
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6802: LD_ADDR_VAR 0 10
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 2
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 91
6819: PUSH
6820: LD_VAR 0 8
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
// if enemy then
6842: LD_VAR 0 10
6846: IFFALSE 6874
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6848: LD_VAR 0 8
6852: PPUSH
6853: LD_VAR 0 10
6857: PPUSH
6858: LD_VAR 0 8
6862: PPUSH
6863: CALL_OW 74
6867: PPUSH
6868: CALL_OW 115
6872: GO 6933
// begin AddComWait ( un , 0 0$4 ) ;
6874: LD_VAR 0 8
6878: PPUSH
6879: LD_INT 140
6881: PPUSH
6882: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6886: LD_VAR 0 8
6890: PPUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 9
6900: PUSH
6901: LD_INT 1
6903: PLUS
6904: ARRAY
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 7
6914: PUSH
6915: LD_VAR 0 9
6919: PUSH
6920: LD_INT 1
6922: PLUS
6923: ARRAY
6924: PUSH
6925: LD_INT 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 174
// end ; end ; end else
6933: GO 7143
// begin if GetClass ( un ) = 4 then
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 257
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 7096
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6950: LD_EXP 41
6954: PPUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: LD_INT 1000
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: IFFALSE 7048
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6992: LD_VAR 0 8
6996: PPUSH
6997: LD_EXP 41
7001: PPUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: LD_INT 1000
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 1
7040: ARRAY
7041: PPUSH
7042: CALL_OW 128
7046: GO 7094
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7048: LD_VAR 0 8
7052: PPUSH
7053: LD_EXP 41
7057: PPUSH
7058: LD_INT 3
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 72
7079: PPUSH
7080: LD_VAR 0 8
7084: PPUSH
7085: CALL_OW 74
7089: PPUSH
7090: CALL_OW 112
7094: GO 7143
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7096: LD_VAR 0 8
7100: PPUSH
7101: LD_VAR 0 7
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ARRAY
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: LD_VAR 0 7
7124: PUSH
7125: LD_VAR 0 9
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: ARRAY
7134: PUSH
7135: LD_INT 2
7137: ARRAY
7138: PPUSH
7139: CALL_OW 114
// end ; end ; end ;
7143: GO 6520
7145: POP
7146: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7147: LD_EXP 41
7151: PPUSH
7152: LD_INT 52
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 72
7176: NOT
7177: IFFALSE 6503
// end ;
7179: LD_VAR 0 1
7183: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7184: LD_EXP 16
7188: PUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: LESS
7200: PUSH
7201: LD_EXP 41
7205: NOT
7206: AND
7207: PUSH
7208: LD_OWVAR 67
7212: PUSH
7213: LD_INT 1
7215: GREATER
7216: AND
7217: IFFALSE 7621
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// begin uc_side := 3 ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_INT 3
7234: ST_TO_ADDR
// uc_nation := 3 ;
7235: LD_ADDR_OWVAR 21
7239: PUSH
7240: LD_INT 3
7242: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 2
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_OWVAR 67
7275: ARRAY
7276: PUSH
7277: FOR_TO
7278: IFFALSE 7542
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 3
7285: PPUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_OWVAR 67
7316: PPUSH
7317: LD_OWVAR 67
7321: PUSH
7322: LD_INT 2
7324: PLUS
7325: PPUSH
7326: CALL_OW 12
7330: ARRAY
7331: PPUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 42
7340: PUSH
7341: LD_INT 44
7343: PUSH
7344: LD_INT 43
7346: PUSH
7347: LD_INT 44
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: LD_INT 46
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_OWVAR 67
7371: PUSH
7372: LD_INT 2
7374: PLUS
7375: PPUSH
7376: CALL_OW 12
7380: ARRAY
7381: PPUSH
7382: LD_INT 90
7384: PPUSH
7385: CALL 439 0 7
// un := CreateVehicle ;
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: CALL_OW 45
7398: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_INT 23
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: CALL 69098 0 3
7426: IFFALSE 7540
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: LD_VAR 0 3
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7457: LD_INT 0
7459: PPUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_OWVAR 67
7482: ARRAY
7483: PPUSH
7484: CALL_OW 383
// un := CreateHuman ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: CALL_OW 44
7497: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7498: LD_VAR 0 3
7502: PPUSH
7503: LD_VAR 0 2
7507: PUSH
7508: LD_VAR 0 2
7512: ARRAY
7513: PPUSH
7514: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 80
7525: PPUSH
7526: LD_INT 139
7528: PPUSH
7529: CALL_OW 111
// wait ( 0 0$3 ) ;
7533: LD_INT 105
7535: PPUSH
7536: CALL_OW 67
// end ; end ;
7540: GO 7277
7542: POP
7543: POP
// for i in tmp do
7544: LD_ADDR_VAR 0 1
7548: PUSH
7549: LD_VAR 0 2
7553: PUSH
7554: FOR_IN
7555: IFFALSE 7619
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 101
7564: PPUSH
7565: LD_INT 102
7567: PPUSH
7568: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7572: LD_VAR 0 1
7576: PPUSH
7577: LD_INT 110
7579: PPUSH
7580: LD_INT 78
7582: PPUSH
7583: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7587: LD_VAR 0 1
7591: PPUSH
7592: LD_INT 75
7594: PPUSH
7595: LD_INT 101
7597: PPUSH
7598: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 83
7612: PPUSH
7613: CALL_OW 174
// end ;
7617: GO 7554
7619: POP
7620: POP
// end ;
7621: PPOPN 3
7623: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7624: LD_EXP 39
7628: PPUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 24
7634: PUSH
7635: LD_INT 1000
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_EXP 40
7655: PPUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 24
7661: PUSH
7662: LD_INT 1000
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: OR
7678: IFFALSE 7777
7680: GO 7682
7682: DISABLE
7683: LD_INT 0
7685: PPUSH
// begin enable ;
7686: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_EXP 39
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: PUSH
7719: LD_EXP 40
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 1000
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 72
7745: UNION
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7775
// if IsSleeping ( i ) then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 555
7759: IFFALSE 7773
// ForceSleep ( i , false ) ;
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL_OW 585
7773: GO 7747
7775: POP
7776: POP
// end ; end_of_file
7777: PPOPN 1
7779: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7780: LD_VAR 0 1
7784: PPUSH
7785: CALL 14526 0 1
// if un = Heike then
7789: LD_VAR 0 1
7793: PUSH
7794: LD_EXP 21
7798: EQUAL
7799: IFFALSE 7808
// YouLost ( Heike ) ;
7801: LD_STRING Heike
7803: PPUSH
7804: CALL_OW 104
// if un in apeSoldGroup then
7808: LD_VAR 0 1
7812: PUSH
7813: LD_EXP 42
7817: IN
7818: IFFALSE 7836
// apeSoldGroup := apeSoldGroup diff un ;
7820: LD_ADDR_EXP 42
7824: PUSH
7825: LD_EXP 42
7829: PUSH
7830: LD_VAR 0 1
7834: DIFF
7835: ST_TO_ADDR
// if un in apeEngGroup then
7836: LD_VAR 0 1
7840: PUSH
7841: LD_EXP 43
7845: IN
7846: IFFALSE 7864
// apeEngGroup := apeEngGroup diff un ;
7848: LD_ADDR_EXP 43
7852: PUSH
7853: LD_EXP 43
7857: PUSH
7858: LD_VAR 0 1
7862: DIFF
7863: ST_TO_ADDR
// if un in oilBaseGuard then
7864: LD_VAR 0 1
7868: PUSH
7869: LD_EXP 38
7873: IN
7874: IFFALSE 7892
// oilBaseGuard := oilBaseGuard diff un ;
7876: LD_ADDR_EXP 38
7880: PUSH
7881: LD_EXP 38
7885: PUSH
7886: LD_VAR 0 1
7890: DIFF
7891: ST_TO_ADDR
// if un in ruNorthGroup then
7892: LD_VAR 0 1
7896: PUSH
7897: LD_EXP 39
7901: IN
7902: IFFALSE 7920
// ruNorthGroup := ruNorthGroup diff un ;
7904: LD_ADDR_EXP 39
7908: PUSH
7909: LD_EXP 39
7913: PUSH
7914: LD_VAR 0 1
7918: DIFF
7919: ST_TO_ADDR
// if un in ruSouthGroup then
7920: LD_VAR 0 1
7924: PUSH
7925: LD_EXP 40
7929: IN
7930: IFFALSE 7948
// ruSouthGroup := ruSouthGroup diff un ;
7932: LD_ADDR_EXP 40
7936: PUSH
7937: LD_EXP 40
7941: PUSH
7942: LD_VAR 0 1
7946: DIFF
7947: ST_TO_ADDR
// if un in ruConvoySquad then
7948: LD_VAR 0 1
7952: PUSH
7953: LD_EXP 41
7957: IN
7958: IFFALSE 7976
// ruConvoySquad := ruConvoySquad diff un ;
7960: LD_ADDR_EXP 41
7964: PUSH
7965: LD_EXP 41
7969: PUSH
7970: LD_VAR 0 1
7974: DIFF
7975: ST_TO_ADDR
// end ;
7976: PPOPN 1
7978: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_VAR 0 2
7988: PPUSH
7989: CALL 14648 0 2
// if GetWeapon ( veh ) = ar_radar then
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 264
8002: PUSH
8003: LD_INT 30
8005: EQUAL
8006: IFFALSE 8016
// radarConstructed := true ;
8008: LD_ADDR_EXP 13
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 264
8025: PUSH
8026: LD_INT 26
8028: EQUAL
8029: IFFALSE 8039
// flamethrowerBuilt := true ;
8031: LD_ADDR_EXP 20
8035: PUSH
8036: LD_INT 1
8038: ST_TO_ADDR
// end ;
8039: PPOPN 2
8041: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8042: LD_ADDR_EXP 18
8046: PUSH
8047: LD_EXP 18
8051: PUSH
8052: LD_INT 1
8054: PLUS
8055: ST_TO_ADDR
// if oldId in ruConvoySquad then
8056: LD_VAR 0 2
8060: PUSH
8061: LD_EXP 41
8065: IN
8066: IFFALSE 8084
// ruConvoySquad := ruConvoySquad diff oldId ;
8068: LD_ADDR_EXP 41
8072: PUSH
8073: LD_EXP 41
8077: PUSH
8078: LD_VAR 0 2
8082: DIFF
8083: ST_TO_ADDR
// if newId in ruConvoySquad then
8084: LD_VAR 0 1
8088: PUSH
8089: LD_EXP 41
8093: IN
8094: IFFALSE 8112
// ruConvoySquad := ruConvoySquad diff newId ;
8096: LD_ADDR_EXP 41
8100: PUSH
8101: LD_EXP 41
8105: PUSH
8106: LD_VAR 0 1
8110: DIFF
8111: ST_TO_ADDR
// end ; end_of_file
8112: PPOPN 4
8114: END
// export function Action ; var i , p , un , veh , tmp ; begin
8115: LD_INT 0
8117: PPUSH
8118: PPUSH
8119: PPUSH
8120: PPUSH
8121: PPUSH
8122: PPUSH
// InGameOn ;
8123: CALL_OW 8
// music_nat := 2 ;
8127: LD_ADDR_OWVAR 71
8131: PUSH
8132: LD_INT 2
8134: ST_TO_ADDR
// music_class := music_recon ;
8135: LD_ADDR_OWVAR 72
8139: PUSH
8140: LD_INT 3
8142: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8143: LD_INT 7
8145: PPUSH
8146: LD_INT 6
8148: PPUSH
8149: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8153: LD_INT 7
8155: PPUSH
8156: LD_INT 6
8158: PPUSH
8159: LD_INT 2
8161: PPUSH
8162: LD_INT 30
8164: NEG
8165: PPUSH
8166: CALL 1223 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 21
8179: PUSH
8180: LD_EXP 22
8184: PUSH
8185: LD_EXP 23
8189: PUSH
8190: LD_EXP 24
8194: PUSH
8195: LD_EXP 25
8199: PUSH
8200: LD_EXP 26
8204: PUSH
8205: LD_EXP 28
8209: PUSH
8210: LD_EXP 33
8214: PUSH
8215: LD_EXP 27
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: ST_TO_ADDR
// tmp := tmp diff 0 ;
8231: LD_ADDR_VAR 0 6
8235: PUSH
8236: LD_VAR 0 6
8240: PUSH
8241: LD_INT 0
8243: DIFF
8244: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8245: LD_ADDR_VAR 0 6
8249: PUSH
8250: LD_VAR 0 6
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL 68690 0 2
8262: ST_TO_ADDR
// for i in heikeVehicles do
8263: LD_ADDR_VAR 0 2
8267: PUSH
8268: LD_EXP 35
8272: PUSH
8273: FOR_IN
8274: IFFALSE 8473
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8276: LD_INT 5
8278: PPUSH
8279: LD_VAR 0 2
8283: PUSH
8284: LD_INT 5
8286: ARRAY
8287: PPUSH
8288: LD_VAR 0 2
8292: PUSH
8293: LD_INT 1
8295: ARRAY
8296: PPUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 2
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 2
8310: PUSH
8311: LD_INT 3
8313: ARRAY
8314: PPUSH
8315: LD_VAR 0 2
8319: PUSH
8320: LD_INT 4
8322: ARRAY
8323: PPUSH
8324: LD_INT 34
8326: PPUSH
8327: CALL 439 0 7
// veh := CreateVehicle ;
8331: LD_ADDR_VAR 0 5
8335: PUSH
8336: CALL_OW 45
8340: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8341: LD_VAR 0 2
8345: PUSH
8346: LD_INT 4
8348: ARRAY
8349: PUSH
8350: LD_INT 51
8352: PUSH
8353: LD_INT 32
8355: PUSH
8356: LD_INT 12
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: IN
8364: IFFALSE 8444
// begin if i [ 7 ] [ 1 ] then
8366: LD_VAR 0 2
8370: PUSH
8371: LD_INT 7
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: IFFALSE 8405
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8380: LD_VAR 0 5
8384: PPUSH
8385: LD_INT 1
8387: PPUSH
8388: LD_VAR 0 2
8392: PUSH
8393: LD_INT 7
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8405: LD_VAR 0 2
8409: PUSH
8410: LD_INT 7
8412: ARRAY
8413: PUSH
8414: LD_INT 2
8416: ARRAY
8417: IFFALSE 8444
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8419: LD_VAR 0 5
8423: PPUSH
8424: LD_INT 2
8426: PPUSH
8427: LD_VAR 0 2
8431: PUSH
8432: LD_INT 7
8434: ARRAY
8435: PUSH
8436: LD_INT 2
8438: ARRAY
8439: PPUSH
8440: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_INT 2
8451: PPUSH
8452: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8456: LD_VAR 0 5
8460: PPUSH
8461: LD_INT 4
8463: PPUSH
8464: LD_INT 0
8466: PPUSH
8467: CALL_OW 49
// end ;
8471: GO 8273
8473: POP
8474: POP
// if tmp then
8475: LD_VAR 0 6
8479: IFFALSE 8589
// begin p := 0 ;
8481: LD_ADDR_VAR 0 3
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// for i in tmp do
8489: LD_ADDR_VAR 0 2
8493: PUSH
8494: LD_VAR 0 6
8498: PUSH
8499: FOR_IN
8500: IFFALSE 8587
// begin p := p + 1 ;
8502: LD_ADDR_VAR 0 3
8506: PUSH
8507: LD_VAR 0 3
8511: PUSH
8512: LD_INT 1
8514: PLUS
8515: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8516: LD_VAR 0 2
8520: PPUSH
8521: LD_INT 5
8523: PPUSH
8524: LD_INT 0
8526: PPUSH
8527: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8531: LD_VAR 0 2
8535: PPUSH
8536: LD_INT 26
8538: PPUSH
8539: LD_INT 9
8541: PPUSH
8542: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8546: LD_VAR 0 3
8550: PUSH
8551: LD_EXP 35
8555: GREATEREQUAL
8556: PUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 257
8566: PUSH
8567: LD_INT 3
8569: EQUAL
8570: AND
8571: IFFALSE 8585
// SetClass ( i , 1 ) ;
8573: LD_VAR 0 2
8577: PPUSH
8578: LD_INT 1
8580: PPUSH
8581: CALL_OW 336
// end ;
8585: GO 8499
8587: POP
8588: POP
// end ; if heikeSecondSquad then
8589: LD_EXP 34
8593: IFFALSE 8707
// for i in heikeSecondSquad do
8595: LD_ADDR_VAR 0 2
8599: PUSH
8600: LD_EXP 34
8604: PUSH
8605: FOR_IN
8606: IFFALSE 8705
// begin p := p + 1 ;
8608: LD_ADDR_VAR 0 3
8612: PUSH
8613: LD_VAR 0 3
8617: PUSH
8618: LD_INT 1
8620: PLUS
8621: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8622: LD_VAR 0 2
8626: PPUSH
8627: LD_INT 6
8629: PPUSH
8630: LD_INT 0
8632: PPUSH
8633: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8637: LD_VAR 0 2
8641: PPUSH
8642: LD_INT 26
8644: PPUSH
8645: LD_INT 9
8647: PPUSH
8648: CALL_OW 118
// ForceSleep ( i , true ) ;
8652: LD_VAR 0 2
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8664: LD_VAR 0 3
8668: PUSH
8669: LD_EXP 35
8673: GREATEREQUAL
8674: PUSH
8675: LD_VAR 0 2
8679: PPUSH
8680: CALL_OW 257
8684: PUSH
8685: LD_INT 3
8687: EQUAL
8688: AND
8689: IFFALSE 8703
// SetClass ( i , 1 ) ;
8691: LD_VAR 0 2
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: CALL_OW 336
// end ;
8703: GO 8605
8705: POP
8706: POP
// if heikeApes then
8707: LD_EXP 36
8711: IFFALSE 8754
// for i in heikeApes do
8713: LD_ADDR_VAR 0 2
8717: PUSH
8718: LD_EXP 36
8722: PUSH
8723: FOR_IN
8724: IFFALSE 8752
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8726: LD_VAR 0 2
8730: PPUSH
8731: LD_INT 7
8733: PPUSH
8734: LD_INT 0
8736: PPUSH
8737: CALL_OW 49
// ComHold ( i ) ;
8741: LD_VAR 0 2
8745: PPUSH
8746: CALL_OW 140
// end ;
8750: GO 8723
8752: POP
8753: POP
// if Kurt then
8754: LD_EXP 32
8758: IFFALSE 8790
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8760: LD_EXP 32
8764: PPUSH
8765: LD_INT 8
8767: PPUSH
8768: LD_INT 0
8770: PPUSH
8771: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8775: LD_EXP 32
8779: PPUSH
8780: LD_INT 42
8782: PPUSH
8783: LD_INT 32
8785: PPUSH
8786: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8790: LD_INT 70
8792: PPUSH
8793: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8797: LD_EXP 21
8801: PPUSH
8802: LD_STRING DH-Start-1
8804: PPUSH
8805: CALL_OW 88
// if Givi then
8809: LD_EXP 22
8813: IFFALSE 9076
// begin Say ( Givi , DG-Start-2-5 ) ;
8815: LD_EXP 22
8819: PPUSH
8820: LD_STRING DG-Start-2-5
8822: PPUSH
8823: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8827: LD_EXP 21
8831: PPUSH
8832: LD_STRING DH-Start-3
8834: PPUSH
8835: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8839: LD_EXP 21
8843: PPUSH
8844: LD_STRING DH-Start-4
8846: PPUSH
8847: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8851: LD_EXP 22
8855: PPUSH
8856: LD_STRING DG-Start-5
8858: PPUSH
8859: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8863: LD_EXP 21
8867: PPUSH
8868: LD_STRING DH-Start-6
8870: PPUSH
8871: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8875: LD_EXP 22
8879: PPUSH
8880: LD_STRING DG-Start-7
8882: PPUSH
8883: CALL_OW 88
// if Mike then
8887: LD_EXP 23
8891: IFFALSE 9064
// begin Say ( Mike , DM-Start-8 ) ;
8893: LD_EXP 23
8897: PPUSH
8898: LD_STRING DM-Start-8
8900: PPUSH
8901: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8905: LD_EXP 23
8909: PPUSH
8910: LD_STRING DM-Start-9
8912: PPUSH
8913: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8917: LD_EXP 22
8921: PPUSH
8922: LD_STRING DG-Start-10
8924: PPUSH
8925: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8929: LD_EXP 22
8933: PPUSH
8934: LD_STRING DG-Start-11
8936: PPUSH
8937: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8941: LD_EXP 21
8945: PPUSH
8946: LD_STRING DH-Start-12
8948: PPUSH
8949: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8953: LD_EXP 22
8957: PPUSH
8958: LD_STRING DG-Start-13
8960: PPUSH
8961: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8965: LD_EXP 22
8969: PPUSH
8970: LD_STRING DG-Start-14
8972: PPUSH
8973: CALL_OW 88
// if Kaia then
8977: LD_EXP 26
8981: IFFALSE 9064
// begin Say ( Kaia , DK-Start-15 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_STRING DK-Start-15
8990: PPUSH
8991: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8995: LD_EXP 26
8999: PPUSH
9000: LD_STRING DK-Start-16
9002: PPUSH
9003: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9007: LD_EXP 26
9011: PPUSH
9012: LD_STRING DK-Start-17
9014: PPUSH
9015: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9019: LD_INT 10
9021: PPUSH
9022: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9026: LD_EXP 22
9030: PPUSH
9031: LD_EXP 26
9035: PPUSH
9036: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9040: LD_EXP 22
9044: PPUSH
9045: LD_STRING DG-Start-18
9047: PPUSH
9048: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9052: LD_EXP 26
9056: PPUSH
9057: LD_STRING DK-Start-19
9059: PPUSH
9060: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9064: LD_EXP 21
9068: PPUSH
9069: LD_STRING DH-Start-20
9071: PPUSH
9072: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9076: LD_INT 70
9078: PPUSH
9079: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9083: LD_EXP 29
9087: PPUSH
9088: LD_STRING DShar-Start-21
9090: PPUSH
9091: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9095: LD_EXP 21
9099: PPUSH
9100: LD_STRING DH-Start-22
9102: PPUSH
9103: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9107: LD_EXP 29
9111: PPUSH
9112: LD_STRING DShar-Start-23
9114: PPUSH
9115: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9119: LD_EXP 29
9123: PPUSH
9124: LD_STRING DShar-Start-24
9126: PPUSH
9127: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9131: LD_EXP 29
9135: PPUSH
9136: LD_STRING DShar-Start-25
9138: PPUSH
9139: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9143: LD_EXP 29
9147: PPUSH
9148: LD_STRING DShar-Start-26
9150: PPUSH
9151: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9155: LD_EXP 21
9159: PPUSH
9160: LD_STRING DH-Start-27
9162: PPUSH
9163: CALL_OW 88
// if Kaia then
9167: LD_EXP 26
9171: IFFALSE 9213
// begin ComTurnUnit ( Heike , Kaia ) ;
9173: LD_EXP 21
9177: PPUSH
9178: LD_EXP 26
9182: PPUSH
9183: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9187: LD_EXP 26
9191: PPUSH
9192: LD_STRING DK-Start-28
9194: PPUSH
9195: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9199: LD_EXP 21
9203: PPUSH
9204: LD_STRING DH-Start-29
9206: PPUSH
9207: CALL_OW 88
// end else
9211: GO 9225
// Say ( Heike , DH-Start-a-28 ) ;
9213: LD_EXP 21
9217: PPUSH
9218: LD_STRING DH-Start-a-28
9220: PPUSH
9221: CALL_OW 88
// if Givi then
9225: LD_EXP 22
9229: IFFALSE 9464
// begin ComTurnUnit ( Heike , Givi ) ;
9231: LD_EXP 21
9235: PPUSH
9236: LD_EXP 22
9240: PPUSH
9241: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9245: LD_EXP 22
9249: PPUSH
9250: LD_EXP 21
9254: PPUSH
9255: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9259: LD_EXP 21
9263: PPUSH
9264: LD_STRING DH-Start-30
9266: PPUSH
9267: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9271: LD_EXP 21
9275: PPUSH
9276: LD_STRING DH-Start-31
9278: PPUSH
9279: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9283: LD_EXP 22
9287: PPUSH
9288: LD_STRING DG-Start-32
9290: PPUSH
9291: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9295: LD_EXP 21
9299: PPUSH
9300: LD_STRING DH-Start-33
9302: PPUSH
9303: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9307: LD_EXP 22
9311: PPUSH
9312: LD_STRING DG-Start-34
9314: PPUSH
9315: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9319: LD_EXP 22
9323: PPUSH
9324: LD_STRING DG-Start-35
9326: PPUSH
9327: CALL_OW 88
// if Kurt and not dialogue_skipped then
9331: LD_EXP 32
9335: PUSH
9336: LD_OWVAR 59
9340: NOT
9341: AND
9342: IFFALSE 9373
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9344: LD_EXP 32
9348: PPUSH
9349: LD_INT 28
9351: PPUSH
9352: LD_INT 13
9354: PPUSH
9355: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9359: LD_EXP 32
9363: PPUSH
9364: LD_EXP 21
9368: PPUSH
9369: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9373: LD_EXP 22
9377: PPUSH
9378: LD_STRING DG-Start-36
9380: PPUSH
9381: CALL_OW 88
// if Kurt then
9385: LD_EXP 32
9389: IFFALSE 9462
// begin if not Givi then
9391: LD_EXP 22
9395: NOT
9396: IFFALSE 9412
// Say ( Kurt , DKs-Start-37-a ) else
9398: LD_EXP 32
9402: PPUSH
9403: LD_STRING DKs-Start-37-a
9405: PPUSH
9406: CALL_OW 88
9410: GO 9424
// Say ( Kurt , DKs-Start-37 ) ;
9412: LD_EXP 32
9416: PPUSH
9417: LD_STRING DKs-Start-37
9419: PPUSH
9420: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9424: LD_EXP 32
9428: PPUSH
9429: LD_STRING DKs-Start-38
9431: PPUSH
9432: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9436: LD_EXP 21
9440: PPUSH
9441: LD_EXP 32
9445: PPUSH
9446: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9450: LD_EXP 21
9454: PPUSH
9455: LD_STRING DH-Start-39
9457: PPUSH
9458: CALL_OW 88
// end ; end else
9462: GO 9493
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9464: LD_EXP 34
9468: PPUSH
9469: LD_STRING DArm-Start-a-37
9471: PPUSH
9472: LD_STRING DArf-Start-a-37
9474: PPUSH
9475: CALL 1274 0 3
9479: IFFALSE 9493
// Say ( Heike , DH-Start-39 ) ;
9481: LD_EXP 21
9485: PPUSH
9486: LD_STRING DH-Start-39
9488: PPUSH
9489: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9493: LD_INT 44
9495: PPUSH
9496: LD_INT 25
9498: PPUSH
9499: CALL_OW 428
9503: IFFALSE 9520
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9505: LD_INT 44
9507: PPUSH
9508: LD_INT 25
9510: PPUSH
9511: CALL_OW 428
9515: PPUSH
9516: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9520: LD_EXP 30
9524: PPUSH
9525: LD_INT 5
9527: PPUSH
9528: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9532: LD_EXP 30
9536: PPUSH
9537: LD_INT 44
9539: PPUSH
9540: LD_INT 25
9542: PPUSH
9543: LD_INT 0
9545: PPUSH
9546: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9550: LD_EXP 30
9554: PPUSH
9555: LD_INT 29
9557: PPUSH
9558: LD_INT 12
9560: PPUSH
9561: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9572: LD_OWVAR 59
9576: PUSH
9577: LD_EXP 21
9581: PPUSH
9582: LD_EXP 30
9586: PPUSH
9587: CALL_OW 296
9591: PUSH
9592: LD_INT 8
9594: LESS
9595: OR
9596: PUSH
9597: LD_EXP 30
9601: PPUSH
9602: LD_INT 26
9604: PPUSH
9605: LD_INT 9
9607: PPUSH
9608: CALL_OW 297
9612: PUSH
9613: LD_INT 6
9615: LESS
9616: OR
9617: IFFALSE 9565
// Say ( Olaf , DO-Scout-1 ) ;
9619: LD_EXP 30
9623: PPUSH
9624: LD_STRING DO-Scout-1
9626: PPUSH
9627: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9631: LD_EXP 30
9635: PPUSH
9636: LD_EXP 21
9640: PPUSH
9641: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9645: LD_ADDR_VAR 0 2
9649: PUSH
9650: LD_VAR 0 6
9654: PUSH
9655: LD_EXP 34
9659: UNION
9660: PUSH
9661: FOR_IN
9662: IFFALSE 9680
// ComTurnUnit ( i , Olaf ) ;
9664: LD_VAR 0 2
9668: PPUSH
9669: LD_EXP 30
9673: PPUSH
9674: CALL_OW 119
9678: GO 9661
9680: POP
9681: POP
// wait ( 0 0$0.3 ) ;
9682: LD_INT 10
9684: PPUSH
9685: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9689: LD_EXP 21
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9703: LD_EXP 21
9707: PPUSH
9708: LD_EXP 30
9712: PPUSH
9713: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9717: LD_EXP 21
9721: PPUSH
9722: LD_STRING DH-Scout-2
9724: PPUSH
9725: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9729: LD_EXP 30
9733: PPUSH
9734: LD_STRING DO-Scout-3
9736: PPUSH
9737: CALL_OW 88
// if Mike and Givi then
9741: LD_EXP 23
9745: PUSH
9746: LD_EXP 22
9750: AND
9751: IFFALSE 9767
// Say ( Olaf , DO-Scout-4 ) else
9753: LD_EXP 30
9757: PPUSH
9758: LD_STRING DO-Scout-4
9760: PPUSH
9761: CALL_OW 88
9765: GO 9867
// begin if Mike then
9767: LD_EXP 23
9771: IFFALSE 9799
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9773: LD_EXP 30
9777: PPUSH
9778: LD_STRING DO-Scout-a-4
9780: PPUSH
9781: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9785: LD_EXP 21
9789: PPUSH
9790: LD_STRING DH-Scout-a-5
9792: PPUSH
9793: CALL_OW 88
// end else
9797: GO 9867
// if Givi then
9799: LD_EXP 22
9803: IFFALSE 9831
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9805: LD_EXP 30
9809: PPUSH
9810: LD_STRING DO-Scout-b-4
9812: PPUSH
9813: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9817: LD_EXP 21
9821: PPUSH
9822: LD_STRING DH-Scout-b-5
9824: PPUSH
9825: CALL_OW 88
// end else
9829: GO 9867
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9831: LD_EXP 30
9835: PPUSH
9836: LD_STRING DO-Scout-f-4
9838: PPUSH
9839: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9843: LD_EXP 21
9847: PPUSH
9848: LD_STRING DH-Scout-f-5
9850: PPUSH
9851: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9855: LD_EXP 30
9859: PPUSH
9860: LD_STRING DO-Scout-f-6
9862: PPUSH
9863: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9867: LD_EXP 21
9871: PPUSH
9872: LD_STRING DH-Scout-5
9874: PPUSH
9875: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-6
9886: PPUSH
9887: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9891: LD_EXP 30
9895: PPUSH
9896: LD_STRING DO-Scout-7
9898: PPUSH
9899: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9903: LD_EXP 21
9907: PPUSH
9908: LD_STRING DH-Scout-8
9910: PPUSH
9911: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9915: LD_EXP 21
9919: PPUSH
9920: LD_STRING DH-Scout-9
9922: PPUSH
9923: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9927: LD_EXP 30
9931: PPUSH
9932: LD_STRING DO-Scout-10
9934: PPUSH
9935: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9939: LD_EXP 30
9943: PPUSH
9944: LD_STRING DO-Scout-12
9946: PPUSH
9947: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9951: LD_EXP 30
9955: PPUSH
9956: LD_STRING DO-Scout-13
9958: PPUSH
9959: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9963: LD_EXP 30
9967: PPUSH
9968: LD_STRING DO-Scout-14
9970: PPUSH
9971: CALL_OW 88
// if Givi then
9975: LD_EXP 22
9979: IFFALSE 10005
// begin Say ( Givi , DG-Scout-15 ) ;
9981: LD_EXP 22
9985: PPUSH
9986: LD_STRING DG-Scout-15
9988: PPUSH
9989: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9993: LD_EXP 26
9997: PPUSH
9998: LD_STRING DK-Scout-16
10000: PPUSH
10001: CALL_OW 88
// end ; if not dialogue_skipped then
10005: LD_OWVAR 59
10009: NOT
10010: IFFALSE 10131
// begin async ;
10012: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10013: LD_EXP 30
10017: PPUSH
10018: LD_STRING DO-Scout-17
10020: PPUSH
10021: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10025: LD_INT 55
10027: PPUSH
10028: LD_INT 77
10030: PPUSH
10031: LD_INT 2
10033: PPUSH
10034: LD_INT 6
10036: NEG
10037: PPUSH
10038: CALL 1223 0 4
// wait ( 10 ) ;
10042: LD_INT 10
10044: PPUSH
10045: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10049: LD_INT 55
10051: PPUSH
10052: LD_INT 77
10054: PPUSH
10055: CALL_OW 84
// wait ( 0 0$10 ) ;
10059: LD_INT 350
10061: PPUSH
10062: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-18
10073: PPUSH
10074: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10078: LD_INT 204
10080: PPUSH
10081: LD_INT 107
10083: PPUSH
10084: LD_INT 2
10086: PPUSH
10087: LD_INT 12
10089: NEG
10090: PPUSH
10091: CALL 1223 0 4
// wait ( 10 ) ;
10095: LD_INT 10
10097: PPUSH
10098: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10102: LD_INT 204
10104: PPUSH
10105: LD_INT 107
10107: PPUSH
10108: CALL_OW 84
// wait ( 0 0$10 ) ;
10112: LD_INT 350
10114: PPUSH
10115: CALL_OW 67
// sync ;
10119: SYNC
// CenterNowOnUnits ( Heike ) ;
10120: LD_EXP 21
10124: PPUSH
10125: CALL_OW 87
// end else
10129: GO 10165
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10131: LD_INT 55
10133: PPUSH
10134: LD_INT 77
10136: PPUSH
10137: LD_INT 2
10139: PPUSH
10140: LD_INT 6
10142: NEG
10143: PPUSH
10144: CALL 1223 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10148: LD_INT 204
10150: PPUSH
10151: LD_INT 107
10153: PPUSH
10154: LD_INT 2
10156: PPUSH
10157: LD_INT 12
10159: NEG
10160: PPUSH
10161: CALL 1223 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10165: LD_EXP 30
10169: PPUSH
10170: LD_STRING DO-Scout-19
10172: PPUSH
10173: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10177: LD_EXP 30
10181: PPUSH
10182: LD_STRING DO-Scout-20
10184: PPUSH
10185: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10189: LD_EXP 21
10193: PPUSH
10194: LD_STRING DH-Scout-21
10196: PPUSH
10197: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10201: LD_EXP 21
10205: PPUSH
10206: LD_STRING DH-Scout-22
10208: PPUSH
10209: CALL_OW 88
// InGameOff ;
10213: CALL_OW 9
// if heikeSecondSquad then
10217: LD_EXP 34
10221: IFFALSE 10235
// ForceSleep ( heikeSecondSquad , false ) ;
10223: LD_EXP 34
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 585
// if Givi then
10235: LD_EXP 22
10239: IFFALSE 10254
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10241: LD_INT 13
10243: PPUSH
10244: LD_INT 2
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10254: LD_STRING Road
10256: PPUSH
10257: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10261: LD_ADDR_VAR 0 2
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 5
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 69
10294: PUSH
10295: FOR_IN
10296: IFFALSE 10312
// SetSide ( i , 2 ) ;
10298: LD_VAR 0 2
10302: PPUSH
10303: LD_INT 2
10305: PPUSH
10306: CALL_OW 235
10310: GO 10295
10312: POP
10313: POP
// SaveForQuickRestart ;
10314: CALL_OW 22
// music_class := music_auto ;
10318: LD_ADDR_OWVAR 72
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// end ;
10326: LD_VAR 0 1
10330: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10331: LD_INT 2
10333: PPUSH
10334: LD_INT 9
10336: PPUSH
10337: CALL_OW 294
10341: IFFALSE 10708
10343: GO 10345
10345: DISABLE
// begin DialogueOn ;
10346: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10350: LD_INT 111
10352: PPUSH
10353: LD_INT 72
10355: PPUSH
10356: LD_INT 2
10358: PPUSH
10359: LD_INT 20
10361: NEG
10362: PPUSH
10363: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10367: LD_INT 111
10369: PPUSH
10370: LD_INT 72
10372: PPUSH
10373: LD_INT 2
10375: PPUSH
10376: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10380: LD_INT 111
10382: PPUSH
10383: LD_INT 72
10385: PPUSH
10386: CALL_OW 86
// if IsOk ( Kamil ) then
10390: LD_EXP 25
10394: PPUSH
10395: CALL_OW 302
10399: IFFALSE 10516
// begin Say ( Kamil , DKam-Cross-1 ) ;
10401: LD_EXP 25
10405: PPUSH
10406: LD_STRING DKam-Cross-1
10408: PPUSH
10409: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10413: LD_EXP 25
10417: PPUSH
10418: LD_STRING DKam-Cross-2
10420: PPUSH
10421: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10425: LD_EXP 25
10429: PPUSH
10430: LD_STRING DKam-Cross-3
10432: PPUSH
10433: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10437: LD_EXP 25
10441: PPUSH
10442: LD_STRING DKam-Cross-4
10444: PPUSH
10445: CALL_OW 88
// if IsOk ( Ibrahim ) then
10449: LD_EXP 24
10453: PPUSH
10454: CALL_OW 302
10458: IFFALSE 10514
// begin if ibrahimJoinedIn04 then
10460: LD_EXP 4
10464: IFFALSE 10478
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10466: LD_EXP 24
10470: PPUSH
10471: LD_STRING DI-Cross-b-5
10473: PPUSH
10474: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10478: LD_EXP 24
10482: PPUSH
10483: LD_STRING DI-Cross-b-6
10485: PPUSH
10486: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10490: LD_EXP 24
10494: PPUSH
10495: LD_STRING DI-Cross-b-7
10497: PPUSH
10498: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10502: LD_EXP 25
10506: PPUSH
10507: LD_STRING DKam-Cross-8
10509: PPUSH
10510: CALL_OW 88
// end ; end else
10514: GO 10674
// if IsOk ( Sophia ) then
10516: LD_EXP 27
10520: PPUSH
10521: CALL_OW 302
10525: IFFALSE 10642
// begin Say ( Sophia , DS-Cross-1 ) ;
10527: LD_EXP 27
10531: PPUSH
10532: LD_STRING DS-Cross-1
10534: PPUSH
10535: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_STRING DS-Cross-2
10546: PPUSH
10547: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10551: LD_EXP 27
10555: PPUSH
10556: LD_STRING DS-Cross-3
10558: PPUSH
10559: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10563: LD_EXP 27
10567: PPUSH
10568: LD_STRING DS-Cross-4
10570: PPUSH
10571: CALL_OW 88
// if IsOk ( Ibrahim ) then
10575: LD_EXP 24
10579: PPUSH
10580: CALL_OW 302
10584: IFFALSE 10640
// begin if ibrahimJoinedIn04 then
10586: LD_EXP 4
10590: IFFALSE 10604
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10592: LD_EXP 24
10596: PPUSH
10597: LD_STRING DI-Cross-b-5
10599: PPUSH
10600: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10604: LD_EXP 24
10608: PPUSH
10609: LD_STRING DI-Cross-b-6
10611: PPUSH
10612: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10616: LD_EXP 24
10620: PPUSH
10621: LD_STRING DI-Cross-b-7
10623: PPUSH
10624: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10628: LD_EXP 27
10632: PPUSH
10633: LD_STRING DS-Cross-8
10635: PPUSH
10636: CALL_OW 88
// end ; end else
10640: GO 10674
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10642: LD_EXP 34
10646: PPUSH
10647: LD_INT 50
10649: PUSH
10650: EMPTY
10651: LIST
10652: PPUSH
10653: CALL_OW 72
10657: IFFALSE 10674
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10659: LD_EXP 34
10663: PPUSH
10664: LD_STRING DArm-Cross-c-1
10666: PPUSH
10667: LD_STRING DArf-Cross-c-1
10669: PPUSH
10670: CALL 1274 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10674: LD_EXP 58
10678: PPUSH
10679: LD_INT 2
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 322
// DialogueOff ;
10689: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10693: LD_STRING Crane
10695: PPUSH
10696: CALL_OW 337
// spottedCrossRoad := true ;
10700: LD_ADDR_EXP 8
10704: PUSH
10705: LD_INT 1
10707: ST_TO_ADDR
// end ;
10708: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10709: LD_INT 22
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 2
10721: PUSH
10722: LD_INT 30
10724: PUSH
10725: LD_INT 0
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 30
10734: PUSH
10735: LD_INT 1
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 69
10755: PUSH
10756: LD_EXP 26
10760: PPUSH
10761: CALL_OW 302
10765: PUSH
10766: LD_EXP 34
10770: OR
10771: AND
10772: IFFALSE 10984
10774: GO 10776
10776: DISABLE
// begin DialogueOn ;
10777: CALL_OW 6
// if Kaia then
10781: LD_EXP 26
10785: IFFALSE 10798
// CenterNowOnUnits ( Kaia ) else
10787: LD_EXP 26
10791: PPUSH
10792: CALL_OW 87
10796: GO 10807
// CenterNowOnUnits ( Heike ) ;
10798: LD_EXP 21
10802: PPUSH
10803: CALL_OW 87
// if IsOk ( Kaia ) then
10807: LD_EXP 26
10811: PPUSH
10812: CALL_OW 302
10816: IFFALSE 10832
// Say ( Kaia , DK-Cam-1 ) else
10818: LD_EXP 26
10822: PPUSH
10823: LD_STRING DK-Cam-1
10825: PPUSH
10826: CALL_OW 88
10830: GO 10847
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10832: LD_EXP 34
10836: PPUSH
10837: LD_STRING DArm-Cam-1
10839: PPUSH
10840: LD_STRING DArf-Cam-1
10842: PPUSH
10843: CALL 1274 0 3
// Say ( Heike , DH-Cam-2 ) ;
10847: LD_EXP 21
10851: PPUSH
10852: LD_STRING DH-Cam-2
10854: PPUSH
10855: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10859: LD_EXP 21
10863: PPUSH
10864: LD_STRING DH-Cam-3
10866: PPUSH
10867: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10871: LD_EXP 21
10875: PPUSH
10876: LD_STRING DH-Cam-4
10878: PPUSH
10879: CALL_OW 88
// if IsOk ( Kaia ) then
10883: LD_EXP 26
10887: PPUSH
10888: CALL_OW 302
10892: IFFALSE 10908
// Say ( Kaia , DK-Cam-5 ) else
10894: LD_EXP 26
10898: PPUSH
10899: LD_STRING DK-Cam-5
10901: PPUSH
10902: CALL_OW 88
10906: GO 10923
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10908: LD_EXP 34
10912: PPUSH
10913: LD_STRING DArm-Cam-5
10915: PPUSH
10916: LD_STRING DArf-Cam-5
10918: PPUSH
10919: CALL 1274 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10923: LD_EXP 30
10927: PPUSH
10928: LD_STRING DO-Cam-6
10930: PPUSH
10931: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10935: LD_EXP 30
10939: PPUSH
10940: LD_STRING DO-Cam-7
10942: PPUSH
10943: CALL_OW 88
// DialogueOff ;
10947: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10951: LD_STRING Radar
10953: PPUSH
10954: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10958: LD_INT 6
10960: PPUSH
10961: LD_INT 2
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10971: LD_INT 20
10973: PPUSH
10974: LD_INT 2
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 324
// end ;
10984: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10985: LD_INT 22
10987: PUSH
10988: LD_INT 2
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 2
10997: PUSH
10998: LD_INT 34
11000: PUSH
11001: LD_INT 30
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 35
11010: PUSH
11011: LD_INT 30
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: IFFALSE 11043
11033: GO 11035
11035: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11036: LD_STRING RadarDone
11038: PPUSH
11039: CALL_OW 337
11043: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11044: LD_INT 22
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 34
11056: PUSH
11057: LD_EXP 50
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PPUSH
11070: CALL_OW 69
11074: IFFALSE 11086
11076: GO 11078
11078: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11079: LD_STRING CraneDone
11081: PPUSH
11082: CALL_OW 337
11086: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11087: LD_EXP 30
11091: PPUSH
11092: CALL_OW 302
11096: PUSH
11097: LD_EXP 33
11101: PPUSH
11102: CALL_OW 302
11106: AND
11107: PUSH
11108: LD_INT 6
11110: PPUSH
11111: LD_INT 2
11113: PPUSH
11114: CALL_OW 321
11118: PUSH
11119: LD_INT 2
11121: EQUAL
11122: AND
11123: PUSH
11124: LD_EXP 33
11128: PPUSH
11129: LD_EXP 21
11133: PPUSH
11134: CALL_OW 296
11138: PUSH
11139: LD_INT 10
11141: LESS
11142: PUSH
11143: LD_EXP 33
11147: PPUSH
11148: CALL_OW 310
11152: OR
11153: AND
11154: IFFALSE 11368
11156: GO 11158
11158: DISABLE
// begin DialogueOn ;
11159: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11163: LD_EXP 33
11167: PPUSH
11168: LD_STRING DA-RC-1
11170: PPUSH
11171: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11175: LD_EXP 33
11179: PPUSH
11180: LD_STRING DA-RC-2
11182: PPUSH
11183: CALL_OW 88
// if IsOk ( Kaia ) then
11187: LD_EXP 26
11191: PPUSH
11192: CALL_OW 302
11196: IFFALSE 11270
// begin Say ( Kaia , DK-RC-3 ) ;
11198: LD_EXP 26
11202: PPUSH
11203: LD_STRING DK-RC-3
11205: PPUSH
11206: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11210: LD_EXP 33
11214: PPUSH
11215: LD_STRING DA-RC-4
11217: PPUSH
11218: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11222: LD_EXP 26
11226: PPUSH
11227: LD_STRING DK-RC-5
11229: PPUSH
11230: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11234: LD_EXP 33
11238: PPUSH
11239: LD_STRING DA-RC-6
11241: PPUSH
11242: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11246: LD_EXP 26
11250: PPUSH
11251: LD_STRING DK-RC-7
11253: PPUSH
11254: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11258: LD_EXP 33
11262: PPUSH
11263: LD_STRING DA-RC-8
11265: PPUSH
11266: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11270: LD_EXP 21
11274: PPUSH
11275: LD_STRING DH-RC-9
11277: PPUSH
11278: CALL_OW 88
// if IsOk ( Markov ) then
11282: LD_EXP 28
11286: PPUSH
11287: CALL_OW 302
11291: IFFALSE 11319
// begin Say ( Markov , DMar-RC-10 ) ;
11293: LD_EXP 28
11297: PPUSH
11298: LD_STRING DMar-RC-10
11300: PPUSH
11301: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11305: LD_EXP 28
11309: PPUSH
11310: LD_STRING DMar-RC-11
11312: PPUSH
11313: CALL_OW 88
// end else
11317: GO 11331
// begin Say ( Olaf , DO-RC-a-10 ) ;
11319: LD_EXP 30
11323: PPUSH
11324: LD_STRING DO-RC-a-10
11326: PPUSH
11327: CALL_OW 88
// end ; DialogueOff ;
11331: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11335: LD_STRING RemoteControl
11337: PPUSH
11338: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11342: LD_INT 15
11344: PPUSH
11345: LD_INT 2
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11355: LD_INT 22
11357: PPUSH
11358: LD_INT 2
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 324
// end ;
11368: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11369: LD_INT 12
11371: PPUSH
11372: LD_INT 22
11374: PUSH
11375: LD_INT 2
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PPUSH
11382: CALL_OW 70
11386: IFFALSE 11753
11388: GO 11390
11390: DISABLE
11391: LD_INT 0
11393: PPUSH
// begin PrepareWestBase ;
11394: CALL 3992 0 0
// westBaseSpotted := true ;
11398: LD_ADDR_EXP 5
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11406: LD_INT 70
11408: PPUSH
11409: CALL_OW 67
// InGameOn ;
11413: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11417: LD_INT 56
11419: PPUSH
11420: LD_INT 77
11422: PPUSH
11423: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11427: LD_INT 56
11429: PPUSH
11430: LD_INT 77
11432: PPUSH
11433: LD_INT 2
11435: PPUSH
11436: LD_INT 12
11438: NEG
11439: PPUSH
11440: CALL_OW 330
// wait ( 0 0$2 ) ;
11444: LD_INT 70
11446: PPUSH
11447: CALL_OW 67
// DialogueOn ;
11451: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11455: LD_EXP 21
11459: PPUSH
11460: LD_STRING DH-Rbase-1
11462: PPUSH
11463: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11467: LD_EXP 26
11471: PPUSH
11472: LD_STRING DK-Rbase-2
11474: PPUSH
11475: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11479: LD_EXP 26
11483: PPUSH
11484: LD_STRING DK-Rbase-3
11486: PPUSH
11487: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11491: LD_EXP 26
11495: PPUSH
11496: LD_STRING DK-Rbase-4
11498: PPUSH
11499: CALL_OW 88
// DialogueOff ;
11503: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11507: LD_INT 56
11509: PPUSH
11510: LD_INT 77
11512: PPUSH
11513: LD_INT 2
11515: PPUSH
11516: CALL_OW 331
// InGameOff ;
11520: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11524: LD_INT 35
11526: PPUSH
11527: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11531: LD_EXP 42
11535: NOT
11536: PUSH
11537: LD_EXP 43
11541: NOT
11542: AND
11543: IFFALSE 11524
// wait ( 0 0$2 ) ;
11545: LD_INT 70
11547: PPUSH
11548: CALL_OW 67
// if IsOk ( Kaia ) then
11552: LD_EXP 26
11556: PPUSH
11557: CALL_OW 302
11561: IFFALSE 11676
// begin DialogueOn ;
11563: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11567: LD_INT 56
11569: PPUSH
11570: LD_INT 81
11572: PPUSH
11573: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11577: LD_EXP 26
11581: PPUSH
11582: LD_STRING DK-Rbase-5
11584: PPUSH
11585: CALL_OW 88
// if IsOk ( Givi ) then
11589: LD_EXP 22
11593: PPUSH
11594: CALL_OW 302
11598: IFFALSE 11672
// begin Say ( Givi , DG-Rbase-6 ) ;
11600: LD_EXP 22
11604: PPUSH
11605: LD_STRING DG-Rbase-6
11607: PPUSH
11608: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11612: LD_EXP 22
11616: PPUSH
11617: LD_STRING DG-Rbase-7
11619: PPUSH
11620: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11624: LD_EXP 26
11628: PPUSH
11629: LD_STRING DK-Rbase-8
11631: PPUSH
11632: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11636: LD_EXP 22
11640: PPUSH
11641: LD_STRING DG-Rbase-9
11643: PPUSH
11644: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11648: LD_EXP 22
11652: PPUSH
11653: LD_STRING DG-Rbase-10
11655: PPUSH
11656: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11660: LD_EXP 26
11664: PPUSH
11665: LD_STRING DK-Rbase-11
11667: PPUSH
11668: CALL_OW 88
// end ; DialogueOff ;
11672: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11676: LD_ADDR_VAR 0 1
11680: PUSH
11681: LD_INT 12
11683: PPUSH
11684: LD_INT 22
11686: PUSH
11687: LD_INT 3
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 21
11696: PUSH
11697: LD_INT 3
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 70
11712: PUSH
11713: FOR_IN
11714: IFFALSE 11730
// SetSide ( i , 2 ) ;
11716: LD_VAR 0 1
11720: PPUSH
11721: LD_INT 2
11723: PPUSH
11724: CALL_OW 235
11728: GO 11713
11730: POP
11731: POP
// westBaseCaptured := true ;
11732: LD_ADDR_EXP 9
11736: PUSH
11737: LD_INT 1
11739: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11740: LD_INT 0
11742: PPUSH
11743: LD_INT 2
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 324
// end ;
11753: PPOPN 1
11755: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11756: LD_EXP 38
11760: NOT
11761: PUSH
11762: LD_INT 10
11764: PPUSH
11765: CALL_OW 255
11769: PUSH
11770: LD_INT 2
11772: EQUAL
11773: OR
11774: IFFALSE 11911
11776: GO 11778
11778: DISABLE
// begin DialogueOn ;
11779: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11783: LD_EXP 21
11787: PPUSH
11788: LD_STRING DH-Goal-1
11790: PPUSH
11791: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11795: LD_EXP 29
11799: PPUSH
11800: LD_STRING DShar-Goal-2
11802: PPUSH
11803: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11807: LD_EXP 21
11811: PPUSH
11812: LD_STRING DH-Goal-3
11814: PPUSH
11815: CALL_OW 88
// if reinforcementsAllowed then
11819: LD_EXP 14
11823: IFFALSE 11849
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11825: LD_EXP 29
11829: PPUSH
11830: LD_STRING DShar-Goal-4
11832: PPUSH
11833: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11837: LD_EXP 21
11841: PPUSH
11842: LD_STRING DH-Goal-5
11844: PPUSH
11845: CALL_OW 88
// end ; DialogueOff ;
11849: CALL_OW 7
// eastBaseCaptured := true ;
11853: LD_ADDR_EXP 10
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11861: LD_STRING BaseCaptured
11863: PPUSH
11864: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11868: LD_INT 10
11870: PPUSH
11871: LD_INT 2
11873: PPUSH
11874: CALL_OW 235
// if not reinforcementsAllowed then
11878: LD_EXP 14
11882: NOT
11883: IFFALSE 11887
// exit ;
11885: GO 11911
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11887: LD_INT 21000
11889: PUSH
11890: LD_INT 1050
11892: NEG
11893: PPUSH
11894: LD_INT 1050
11896: PPUSH
11897: CALL_OW 12
11901: PLUS
11902: PPUSH
11903: CALL_OW 67
// PrepareReinforcements ;
11907: CALL 2250 0 0
// end ;
11911: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11912: LD_INT 22
11914: PUSH
11915: LD_INT 2
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 30
11924: PUSH
11925: LD_INT 13
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PPUSH
11936: CALL_OW 69
11940: IFFALSE 11957
11942: GO 11944
11944: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11945: LD_EXP 22
11949: PPUSH
11950: LD_STRING DG-Lab-1
11952: PPUSH
11953: CALL_OW 88
// end ;
11957: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11958: LD_INT 5
11960: PPUSH
11961: LD_INT 2
11963: PPUSH
11964: CALL_OW 321
11968: PUSH
11969: LD_INT 2
11971: EQUAL
11972: PUSH
11973: LD_EXP 22
11977: PPUSH
11978: CALL_OW 302
11982: AND
11983: IFFALSE 12044
11985: GO 11987
11987: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11988: LD_EXP 22
11992: PPUSH
11993: LD_STRING DG-Stim-1
11995: PPUSH
11996: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12000: LD_EXP 21
12004: PPUSH
12005: LD_STRING DH-Stim-2
12007: PPUSH
12008: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12012: LD_EXP 22
12016: PPUSH
12017: LD_STRING DG-Stim-3
12019: PPUSH
12020: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12024: LD_EXP 21
12028: PPUSH
12029: LD_STRING DH-Stim-4
12031: PPUSH
12032: CALL_OW 88
// drugsResearched := true ;
12036: LD_ADDR_EXP 11
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// end ;
12044: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12045: LD_EXP 11
12049: IFFALSE 12361
12051: GO 12053
12053: DISABLE
12054: LD_INT 0
12056: PPUSH
12057: PPUSH
12058: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12059: LD_ADDR_VAR 0 2
12063: PUSH
12064: LD_EXP 21
12068: PUSH
12069: LD_EXP 22
12073: PUSH
12074: LD_EXP 30
12078: PUSH
12079: LD_EXP 28
12083: PUSH
12084: LD_EXP 26
12088: PUSH
12089: LD_EXP 27
12093: PUSH
12094: LD_EXP 32
12098: PUSH
12099: LD_EXP 25
12103: PUSH
12104: LD_EXP 23
12108: PUSH
12109: LD_EXP 24
12113: PUSH
12114: LD_EXP 33
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_STRING H
12139: PUSH
12140: LD_STRING G
12142: PUSH
12143: LD_STRING O
12145: PUSH
12146: LD_STRING Mar
12148: PUSH
12149: LD_STRING K
12151: PUSH
12152: LD_STRING S
12154: PUSH
12155: LD_STRING Ks
12157: PUSH
12158: LD_STRING Kam
12160: PUSH
12161: LD_STRING M
12163: PUSH
12164: LD_STRING I
12166: PUSH
12167: LD_STRING A
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12183: LD_INT 35
12185: PPUSH
12186: CALL_OW 67
// for i := tmp downto 1 do
12190: LD_ADDR_VAR 0 1
12194: PUSH
12195: DOUBLE
12196: LD_VAR 0 2
12200: INC
12201: ST_TO_ADDR
12202: LD_INT 1
12204: PUSH
12205: FOR_DOWNTO
12206: IFFALSE 12352
// if GetLives ( tmp [ i ] ) < 250 then
12208: LD_VAR 0 2
12212: PUSH
12213: LD_VAR 0 1
12217: ARRAY
12218: PPUSH
12219: CALL_OW 256
12223: PUSH
12224: LD_INT 250
12226: LESS
12227: IFFALSE 12350
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12229: LD_ADDR_EXP 19
12233: PUSH
12234: LD_EXP 19
12238: PUSH
12239: LD_INT 1
12241: PLUS
12242: ST_TO_ADDR
// DialogueOn ;
12243: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12247: LD_VAR 0 2
12251: PUSH
12252: LD_VAR 0 1
12256: ARRAY
12257: PPUSH
12258: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12262: LD_VAR 0 2
12266: PUSH
12267: LD_VAR 0 1
12271: ARRAY
12272: PPUSH
12273: LD_STRING D
12275: PUSH
12276: LD_VAR 0 3
12280: PUSH
12281: LD_VAR 0 1
12285: ARRAY
12286: STR
12287: PUSH
12288: LD_STRING -Stim-a-1
12290: STR
12291: PPUSH
12292: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: LD_VAR 0 2
12305: PPUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 3
12315: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12316: LD_ADDR_VAR 0 3
12320: PUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: LD_VAR 0 1
12330: PPUSH
12331: CALL_OW 3
12335: ST_TO_ADDR
// drugsTested := true ;
12336: LD_ADDR_EXP 6
12340: PUSH
12341: LD_INT 1
12343: ST_TO_ADDR
// DialogueOff ;
12344: CALL_OW 7
// break ;
12348: GO 12352
// end ;
12350: GO 12205
12352: POP
12353: POP
// until not tmp ;
12354: LD_VAR 0 2
12358: NOT
12359: IFFALSE 12183
// end ;
12361: PPOPN 3
12363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12364: LD_INT 22
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 34
12376: PUSH
12377: LD_INT 31
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: PUSH
12393: LD_INT 22
12395: PUSH
12396: LD_INT 2
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 33
12405: PUSH
12406: LD_INT 2
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 69
12421: AND
12422: IFFALSE 12435
12424: GO 12426
12426: DISABLE
// remoteControlConstructed := true ;
12427: LD_ADDR_EXP 12
12431: PUSH
12432: LD_INT 1
12434: ST_TO_ADDR
12435: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12436: LD_EXP 12
12440: IFFALSE 12740
12442: GO 12444
12444: DISABLE
12445: LD_INT 0
12447: PPUSH
12448: PPUSH
12449: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12450: LD_ADDR_VAR 0 2
12454: PUSH
12455: LD_EXP 21
12459: PUSH
12460: LD_EXP 22
12464: PUSH
12465: LD_EXP 30
12469: PUSH
12470: LD_EXP 28
12474: PUSH
12475: LD_EXP 26
12479: PUSH
12480: LD_EXP 27
12484: PUSH
12485: LD_EXP 32
12489: PUSH
12490: LD_EXP 25
12494: PUSH
12495: LD_EXP 23
12499: PUSH
12500: LD_EXP 24
12504: PUSH
12505: LD_EXP 33
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: LD_STRING H
12530: PUSH
12531: LD_STRING G
12533: PUSH
12534: LD_STRING O
12536: PUSH
12537: LD_STRING Mar
12539: PUSH
12540: LD_STRING K
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: LD_STRING Ks
12548: PUSH
12549: LD_STRING Kam
12551: PUSH
12552: LD_STRING M
12554: PUSH
12555: LD_STRING I
12557: PUSH
12558: LD_STRING A
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12574: LD_INT 35
12576: PPUSH
12577: CALL_OW 67
// for i := tmp downto 1 do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: DOUBLE
12587: LD_VAR 0 2
12591: INC
12592: ST_TO_ADDR
12593: LD_INT 1
12595: PUSH
12596: FOR_DOWNTO
12597: IFFALSE 12731
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12599: LD_VAR 0 2
12603: PUSH
12604: LD_VAR 0 1
12608: ARRAY
12609: PPUSH
12610: CALL_OW 257
12614: PUSH
12615: LD_INT 3
12617: EQUAL
12618: PUSH
12619: LD_VAR 0 2
12623: PUSH
12624: LD_VAR 0 1
12628: ARRAY
12629: PPUSH
12630: CALL_OW 432
12634: AND
12635: IFFALSE 12729
// begin DialogueOn ;
12637: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12641: LD_VAR 0 2
12645: PUSH
12646: LD_VAR 0 1
12650: ARRAY
12651: PPUSH
12652: LD_STRING D
12654: PUSH
12655: LD_VAR 0 3
12659: PUSH
12660: LD_VAR 0 1
12664: ARRAY
12665: STR
12666: PUSH
12667: LD_STRING -RC-a-1
12669: STR
12670: PPUSH
12671: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12675: LD_ADDR_VAR 0 2
12679: PUSH
12680: LD_VAR 0 2
12684: PPUSH
12685: LD_VAR 0 1
12689: PPUSH
12690: CALL_OW 3
12694: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12695: LD_ADDR_VAR 0 3
12699: PUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_VAR 0 1
12709: PPUSH
12710: CALL_OW 3
12714: ST_TO_ADDR
// DialogueOff ;
12715: CALL_OW 7
// remoteControlTested := true ;
12719: LD_ADDR_EXP 7
12723: PUSH
12724: LD_INT 1
12726: ST_TO_ADDR
// break ;
12727: GO 12731
// end ;
12729: GO 12596
12731: POP
12732: POP
// until not tmp ;
12733: LD_VAR 0 2
12737: NOT
12738: IFFALSE 12574
// end ;
12740: PPOPN 3
12742: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12743: LD_EXP 7
12747: PUSH
12748: LD_EXP 28
12752: PPUSH
12753: CALL_OW 302
12757: AND
12758: IFFALSE 12787
12760: GO 12762
12762: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12763: LD_EXP 28
12767: PPUSH
12768: LD_STRING DMar-RC-a-2
12770: PPUSH
12771: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12775: LD_EXP 28
12779: PPUSH
12780: LD_STRING DMar-RC-a-3
12782: PPUSH
12783: CALL_OW 88
// end ;
12787: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12788: LD_EXP 14
12792: PUSH
12793: LD_EXP 21
12797: PPUSH
12798: LD_EXP 33
12802: PPUSH
12803: CALL_OW 296
12807: PUSH
12808: LD_INT 8
12810: LESS
12811: AND
12812: PUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 463
12820: NOT
12821: AND
12822: PUSH
12823: LD_EXP 33
12827: PPUSH
12828: CALL_OW 302
12832: AND
12833: PUSH
12834: LD_EXP 21
12838: PPUSH
12839: CALL_OW 302
12843: AND
12844: IFFALSE 13022
12846: GO 12848
12848: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12849: LD_EXP 33
12853: PPUSH
12854: CALL_OW 310
12858: NOT
12859: IFFALSE 12875
// ComTurnUnit ( Aviradze , Heike ) ;
12861: LD_EXP 33
12865: PPUSH
12866: LD_EXP 21
12870: PPUSH
12871: CALL_OW 119
// if not IsInUnit ( Heike ) then
12875: LD_EXP 21
12879: PPUSH
12880: CALL_OW 310
12884: NOT
12885: IFFALSE 12901
// ComTurnUnit ( Heike , Aviradze ) ;
12887: LD_EXP 21
12891: PPUSH
12892: LD_EXP 33
12896: PPUSH
12897: CALL_OW 119
// wait ( 0 0$1 ) ;
12901: LD_INT 35
12903: PPUSH
12904: CALL_OW 67
// DialogueOn ;
12908: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12912: LD_EXP 33
12916: PPUSH
12917: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12921: LD_EXP 21
12925: PPUSH
12926: LD_STRING DH-Beria-1
12928: PPUSH
12929: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12933: LD_EXP 33
12937: PPUSH
12938: LD_STRING DA-Beria-2
12940: PPUSH
12941: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12945: LD_EXP 21
12949: PPUSH
12950: LD_STRING DH-Beria-3
12952: PPUSH
12953: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12957: LD_EXP 33
12961: PPUSH
12962: LD_STRING DA-Beria-4
12964: PPUSH
12965: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12969: LD_EXP 33
12973: PPUSH
12974: LD_STRING DA-Beria-5
12976: PPUSH
12977: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12981: LD_EXP 33
12985: PPUSH
12986: LD_STRING DA-Beria-6
12988: PPUSH
12989: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12993: LD_EXP 21
12997: PPUSH
12998: LD_STRING DA-Beria-7
13000: PPUSH
13001: CALL_OW 88
// DialogueOff ;
13005: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13009: LD_INT 52
13011: PPUSH
13012: LD_INT 2
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 322
// end ;
13022: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13023: LD_EXP 26
13027: PPUSH
13028: CALL_OW 300
13032: PUSH
13033: LD_EXP 26
13037: PPUSH
13038: CALL_OW 256
13042: PUSH
13043: LD_INT 10
13045: LESS
13046: AND
13047: IFFALSE 13084
13049: GO 13051
13051: DISABLE
// begin DialogueOn ;
13052: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13056: LD_EXP 26
13060: PPUSH
13061: LD_STRING DK-Kdeath-1
13063: PPUSH
13064: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13068: LD_EXP 21
13072: PPUSH
13073: LD_STRING DH-Kdeath-2
13075: PPUSH
13076: CALL_OW 88
// DialogueOff ;
13080: CALL_OW 7
// end ;
13084: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13085: LD_INT 2
13087: PPUSH
13088: LD_EXP 39
13092: PPUSH
13093: CALL 1374 0 2
13097: IFFALSE 13114
13099: GO 13101
13101: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13102: LD_EXP 21
13106: PPUSH
13107: LD_STRING DH-Obj-1
13109: PPUSH
13110: CALL_OW 88
13114: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13115: LD_INT 2
13117: PPUSH
13118: LD_EXP 40
13122: PPUSH
13123: CALL 1374 0 2
13127: IFFALSE 13144
13129: GO 13131
13131: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13132: LD_EXP 21
13136: PPUSH
13137: LD_STRING DH-Obj-a-1
13139: PPUSH
13140: CALL_OW 88
13144: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 , 5 5$30 ] [ Difficulty ] do
13145: LD_EXP 10
13149: PUSH
13150: LD_OWVAR 1
13154: PUSH
13155: LD_INT 14700
13157: PUSH
13158: LD_INT 13650
13160: PUSH
13161: LD_INT 12600
13163: PUSH
13164: LD_INT 11550
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: PUSH
13173: LD_OWVAR 67
13177: ARRAY
13178: GREATEREQUAL
13179: OR
13180: IFFALSE 13208
13182: GO 13184
13184: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13185: LD_INT 4200
13187: PPUSH
13188: LD_INT 5250
13190: PPUSH
13191: CALL_OW 12
13195: PPUSH
13196: CALL_OW 67
// convoyStarted := true ;
13200: LD_ADDR_EXP 17
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// end ;
13208: END
// every 0 0$1 trigger convoyStarted do
13209: LD_EXP 17
13213: IFFALSE 13297
13215: GO 13217
13217: DISABLE
// begin DialogueOn ;
13218: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13222: LD_EXP 29
13226: PPUSH
13227: LD_STRING DShar-Convoy-1
13229: PPUSH
13230: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13234: LD_EXP 21
13238: PPUSH
13239: LD_STRING DH-Convoy-2
13241: PPUSH
13242: CALL_OW 88
// DialogueOff ;
13246: CALL_OW 7
// PrepareConvoy ;
13250: CALL 4639 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13254: LD_INT 5250
13256: PPUSH
13257: LD_INT 11550
13259: PPUSH
13260: CALL_OW 12
13264: PPUSH
13265: CALL_OW 67
// PrepareConvoy ;
13269: CALL 4639 0 0
// convoyCounter := convoyCounter - 1 ;
13273: LD_ADDR_EXP 16
13277: PUSH
13278: LD_EXP 16
13282: PUSH
13283: LD_INT 1
13285: MINUS
13286: ST_TO_ADDR
// until convoyCounter <= 0 ;
13287: LD_EXP 16
13291: PUSH
13292: LD_INT 0
13294: LESSEQUAL
13295: IFFALSE 13254
// end ;
13297: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13298: LD_EXP 15
13302: PUSH
13303: LD_INT 10
13305: GREATEREQUAL
13306: IFFALSE 13323
13308: GO 13310
13310: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13311: LD_EXP 31
13315: PPUSH
13316: LD_STRING DOm-Fail-1
13318: PPUSH
13319: CALL_OW 94
13323: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13324: LD_EXP 39
13328: NOT
13329: PUSH
13330: LD_EXP 40
13334: NOT
13335: AND
13336: IFFALSE 13348
13338: GO 13340
13340: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13341: LD_STRING RaiderDone
13343: PPUSH
13344: CALL_OW 337
13348: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13349: LD_INT 22
13351: PUSH
13352: LD_INT 2
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 33
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: PUSH
13378: LD_INT 3
13380: GREATEREQUAL
13381: PUSH
13382: LD_INT 22
13384: PUSH
13385: LD_INT 2
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 34
13394: PUSH
13395: LD_INT 31
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: PUSH
13411: LD_INT 2
13413: GREATEREQUAL
13414: AND
13415: IFFALSE 13427
13417: GO 13419
13419: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13420: LD_STRING RemoteControlDone
13422: PPUSH
13423: CALL_OW 337
13427: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13428: LD_EXP 16
13432: PUSH
13433: LD_INT 1
13435: LESS
13436: PUSH
13437: LD_EXP 41
13441: PPUSH
13442: LD_INT 52
13444: PUSH
13445: EMPTY
13446: LIST
13447: PUSH
13448: LD_INT 21
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 72
13466: NOT
13467: AND
13468: PUSH
13469: LD_OWVAR 1
13473: PUSH
13474: LD_INT 126000
13476: GREATEREQUAL
13477: OR
13478: IFFALSE 14299
13480: GO 13482
13482: DISABLE
13483: LD_INT 0
13485: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13486: LD_STRING ReinforcementsDone
13488: PPUSH
13489: CALL_OW 337
// music_class := music_victory ;
13493: LD_ADDR_OWVAR 72
13497: PUSH
13498: LD_INT 4
13500: ST_TO_ADDR
// InGameOn ;
13501: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13505: LD_EXP 21
13509: PPUSH
13510: LD_STRING DH-end-1
13512: PPUSH
13513: CALL_OW 88
// wait ( 0 0$2 ) ;
13517: LD_INT 70
13519: PPUSH
13520: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13524: LD_EXP 29
13528: PPUSH
13529: LD_STRING DShar-end-2
13531: PPUSH
13532: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13536: LD_EXP 39
13540: NOT
13541: PUSH
13542: LD_EXP 40
13546: NOT
13547: AND
13548: IFFALSE 13564
// begin Say ( Heike , DH-end-3 ) ;
13550: LD_EXP 21
13554: PPUSH
13555: LD_STRING DH-end-3
13557: PPUSH
13558: CALL_OW 88
// end else
13562: GO 13661
// begin Say ( Heike , DH-end-a-3 ) ;
13564: LD_EXP 21
13568: PPUSH
13569: LD_STRING DH-end-a-3
13571: PPUSH
13572: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13576: LD_EXP 29
13580: PPUSH
13581: LD_STRING DShar-end-a-4
13583: PPUSH
13584: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13588: LD_EXP 21
13592: PPUSH
13593: LD_STRING DH-end-a-5
13595: PPUSH
13596: CALL_OW 88
// InGameOff ;
13600: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13604: LD_INT 35
13606: PPUSH
13607: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13611: LD_INT 22
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 1
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: PUSH
13640: LD_INT 0
13642: EQUAL
13643: IFFALSE 13604
// InGameOn ;
13645: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13649: LD_EXP 21
13653: PPUSH
13654: LD_STRING DH-end-a-6
13656: PPUSH
13657: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13661: LD_EXP 29
13665: PPUSH
13666: LD_STRING DShar-end-3
13668: PPUSH
13669: CALL_OW 94
// if not flamethrowerBuilt then
13673: LD_EXP 20
13677: NOT
13678: IFFALSE 13687
// SetAchievement ( ACH_FIRE ) ;
13680: LD_STRING ACH_FIRE
13682: PPUSH
13683: CALL_OW 543
// if drugsTested then
13687: LD_EXP 6
13691: IFFALSE 13705
// AddMedal ( med1 , 1 ) else
13693: LD_STRING med1
13695: PPUSH
13696: LD_INT 1
13698: PPUSH
13699: CALL_OW 101
13703: GO 13745
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13705: LD_INT 5
13707: PPUSH
13708: LD_INT 2
13710: PPUSH
13711: CALL_OW 321
13715: PUSH
13716: LD_INT 2
13718: EQUAL
13719: IFFALSE 13734
// AddMedal ( med1 , - 1 ) else
13721: LD_STRING med1
13723: PPUSH
13724: LD_INT 1
13726: NEG
13727: PPUSH
13728: CALL_OW 101
13732: GO 13745
// AddMedal ( med1 , - 2 ) ;
13734: LD_STRING med1
13736: PPUSH
13737: LD_INT 2
13739: NEG
13740: PPUSH
13741: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13745: LD_INT 22
13747: PUSH
13748: LD_INT 2
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 33
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: PUSH
13774: LD_INT 3
13776: GREATEREQUAL
13777: PUSH
13778: LD_INT 22
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 34
13790: PUSH
13791: LD_INT 31
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: PUSH
13807: LD_INT 1
13809: GREATEREQUAL
13810: AND
13811: IFFALSE 13825
// AddMedal ( med2 , 1 ) else
13813: LD_STRING med2
13815: PPUSH
13816: LD_INT 1
13818: PPUSH
13819: CALL_OW 101
13823: GO 13836
// AddMedal ( med2 , - 1 ) ;
13825: LD_STRING med2
13827: PPUSH
13828: LD_INT 1
13830: NEG
13831: PPUSH
13832: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13836: LD_EXP 15
13840: PUSH
13841: LD_INT 10
13843: PUSH
13844: LD_INT 8
13846: PUSH
13847: LD_INT 6
13849: PUSH
13850: LD_INT 5
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_OWVAR 67
13863: ARRAY
13864: LESS
13865: IFFALSE 13879
// AddMedal ( med3 , 1 ) else
13867: LD_STRING med3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 101
13877: GO 13890
// AddMedal ( med3 , - 1 ) ;
13879: LD_STRING med3
13881: PPUSH
13882: LD_INT 1
13884: NEG
13885: PPUSH
13886: CALL_OW 101
// GiveMedals ( MAIN ) ;
13890: LD_STRING MAIN
13892: PPUSH
13893: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13897: LD_INT 22
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 23
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 21
13919: PUSH
13920: LD_INT 1
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: PPUSH
13937: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13941: LD_EXP 15
13945: PPUSH
13946: LD_STRING 05_ConvoySavedCounter
13948: PPUSH
13949: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13953: LD_EXP 13
13957: PPUSH
13958: LD_STRING 05_Radar
13960: PPUSH
13961: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13965: LD_EXP 6
13969: PPUSH
13970: LD_STRING 05_DrugsTested
13972: PPUSH
13973: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13977: LD_INT 22
13979: PUSH
13980: LD_INT 2
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 33
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: CALL_OW 69
14005: PUSH
14006: LD_INT 3
14008: GREATEREQUAL
14009: PUSH
14010: LD_INT 22
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 34
14022: PUSH
14023: LD_INT 31
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: PUSH
14039: LD_INT 2
14041: GREATEREQUAL
14042: AND
14043: PPUSH
14044: LD_STRING 05_RemoteControl
14046: PPUSH
14047: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14051: LD_EXP 21
14055: PPUSH
14056: LD_STRING 05_Heike
14058: PPUSH
14059: CALL_OW 38
// if Aviradze then
14063: LD_EXP 33
14067: IFFALSE 14081
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14069: LD_EXP 33
14073: PPUSH
14074: LD_STRING 05_Aviradze
14076: PPUSH
14077: CALL_OW 38
// if Ibrahim then
14081: LD_EXP 24
14085: IFFALSE 14099
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14087: LD_EXP 24
14091: PPUSH
14092: LD_STRING 05_Ibrahim
14094: PPUSH
14095: CALL_OW 38
// if Kamil then
14099: LD_EXP 25
14103: IFFALSE 14117
// SaveCharacters ( Kamil , 05_Kamil ) ;
14105: LD_EXP 25
14109: PPUSH
14110: LD_STRING 05_Kamil
14112: PPUSH
14113: CALL_OW 38
// if Sophia then
14117: LD_EXP 27
14121: IFFALSE 14135
// SaveCharacters ( Sophia , 05_Sophia ) ;
14123: LD_EXP 27
14127: PPUSH
14128: LD_STRING 05_Sophia
14130: PPUSH
14131: CALL_OW 38
// if Kaia then
14135: LD_EXP 26
14139: IFFALSE 14153
// SaveCharacters ( Kaia , 05_Kaia ) ;
14141: LD_EXP 26
14145: PPUSH
14146: LD_STRING 05_Kaia
14148: PPUSH
14149: CALL_OW 38
// if Givi then
14153: LD_EXP 22
14157: IFFALSE 14171
// SaveCharacters ( Givi , 05_Givi ) ;
14159: LD_EXP 22
14163: PPUSH
14164: LD_STRING 05_Givi
14166: PPUSH
14167: CALL_OW 38
// if Mike then
14171: LD_EXP 23
14175: IFFALSE 14189
// SaveCharacters ( Mike , 05_Mike ) ;
14177: LD_EXP 23
14181: PPUSH
14182: LD_STRING 05_Mike
14184: PPUSH
14185: CALL_OW 38
// if Markov then
14189: LD_EXP 28
14193: IFFALSE 14207
// SaveCharacters ( Markov , 05_Markov ) ;
14195: LD_EXP 28
14199: PPUSH
14200: LD_STRING 05_Markov
14202: PPUSH
14203: CALL_OW 38
// if Kurt then
14207: LD_EXP 32
14211: IFFALSE 14225
// SaveCharacters ( Kurt , 05_Kurt ) ;
14213: LD_EXP 32
14217: PPUSH
14218: LD_STRING 05_Kurt
14220: PPUSH
14221: CALL_OW 38
// if heikeSecondSquad then
14225: LD_EXP 34
14229: IFFALSE 14243
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14231: LD_EXP 34
14235: PPUSH
14236: LD_STRING 05_others
14238: PPUSH
14239: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: ST_TO_ADDR
// if tmp then
14277: LD_VAR 0 1
14281: IFFALSE 14295
// SaveCharacters ( tmp , 05_apes ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_STRING 05_apes
14290: PPUSH
14291: CALL_OW 38
// YouWin ;
14295: CALL_OW 103
// end ; end_of_file
14299: PPOPN 1
14301: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14302: LD_EXP 9
14306: PUSH
14307: LD_INT 13
14309: PPUSH
14310: LD_INT 1
14312: PPUSH
14313: CALL_OW 287
14317: PUSH
14318: LD_INT 25
14320: LESS
14321: AND
14322: IFFALSE 14349
14324: GO 14326
14326: DISABLE
// begin enable ;
14327: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14328: LD_INT 1
14330: PPUSH
14331: LD_INT 5
14333: PPUSH
14334: CALL_OW 12
14338: PPUSH
14339: LD_INT 13
14341: PPUSH
14342: LD_INT 1
14344: PPUSH
14345: CALL_OW 55
// end ; end_of_file
14349: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14350: LD_INT 0
14352: PPUSH
// ar_miner := 81 ;
14353: LD_ADDR_EXP 51
14357: PUSH
14358: LD_INT 81
14360: ST_TO_ADDR
// ar_crane := 88 ;
14361: LD_ADDR_EXP 50
14365: PUSH
14366: LD_INT 88
14368: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14369: LD_ADDR_EXP 45
14373: PUSH
14374: LD_INT 89
14376: ST_TO_ADDR
// us_hack := 99 ;
14377: LD_ADDR_EXP 46
14381: PUSH
14382: LD_INT 99
14384: ST_TO_ADDR
// us_artillery := 97 ;
14385: LD_ADDR_EXP 47
14389: PUSH
14390: LD_INT 97
14392: ST_TO_ADDR
// ar_bio_bomb := 91 ;
14393: LD_ADDR_EXP 48
14397: PUSH
14398: LD_INT 91
14400: ST_TO_ADDR
// ar_mortar := 92 ;
14401: LD_ADDR_EXP 49
14405: PUSH
14406: LD_INT 92
14408: ST_TO_ADDR
// ru_flamethrower := 93 ;
14409: LD_ADDR_EXP 52
14413: PUSH
14414: LD_INT 93
14416: ST_TO_ADDR
// ru_radar := 98 ;
14417: LD_ADDR_EXP 44
14421: PUSH
14422: LD_INT 98
14424: ST_TO_ADDR
// tech_Artillery := 80 ;
14425: LD_ADDR_EXP 53
14429: PUSH
14430: LD_INT 80
14432: ST_TO_ADDR
// tech_RadMat := 81 ;
14433: LD_ADDR_EXP 54
14437: PUSH
14438: LD_INT 81
14440: ST_TO_ADDR
// tech_BasicTools := 82 ;
14441: LD_ADDR_EXP 55
14445: PUSH
14446: LD_INT 82
14448: ST_TO_ADDR
// tech_Cargo := 83 ;
14449: LD_ADDR_EXP 56
14453: PUSH
14454: LD_INT 83
14456: ST_TO_ADDR
// tech_Track := 84 ;
14457: LD_ADDR_EXP 57
14461: PUSH
14462: LD_INT 84
14464: ST_TO_ADDR
// tech_Crane := 85 ;
14465: LD_ADDR_EXP 58
14469: PUSH
14470: LD_INT 85
14472: ST_TO_ADDR
// tech_Bulldozer := 86 ;
14473: LD_ADDR_EXP 59
14477: PUSH
14478: LD_INT 86
14480: ST_TO_ADDR
// tech_Hovercraft := 87 ;
14481: LD_ADDR_EXP 60
14485: PUSH
14486: LD_INT 87
14488: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
14489: LD_ADDR_EXP 61
14493: PUSH
14494: LD_INT 88
14496: ST_TO_ADDR
// class_mastodont := 31 ;
14497: LD_ADDR_EXP 62
14501: PUSH
14502: LD_INT 31
14504: ST_TO_ADDR
// class_horse := 21 ;
14505: LD_ADDR_EXP 63
14509: PUSH
14510: LD_INT 21
14512: ST_TO_ADDR
// end ;
14513: LD_VAR 0 1
14517: RET
// every 1 do
14518: GO 14520
14520: DISABLE
// InitGlobalVariables ; end_of_file
14521: CALL 14350 0 0
14525: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14526: LD_INT 0
14528: PPUSH
14529: PPUSH
14530: PPUSH
14531: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14532: LD_VAR 0 1
14536: PPUSH
14537: CALL_OW 264
14541: PUSH
14542: LD_EXP 48
14546: EQUAL
14547: IFFALSE 14619
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14549: LD_INT 68
14551: PPUSH
14552: LD_VAR 0 1
14556: PPUSH
14557: CALL_OW 255
14561: PPUSH
14562: CALL_OW 321
14566: PUSH
14567: LD_INT 2
14569: EQUAL
14570: IFFALSE 14582
// eff := 70 else
14572: LD_ADDR_VAR 0 4
14576: PUSH
14577: LD_INT 70
14579: ST_TO_ADDR
14580: GO 14590
// eff := 30 ;
14582: LD_ADDR_VAR 0 4
14586: PUSH
14587: LD_INT 30
14589: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 250
14599: PPUSH
14600: LD_VAR 0 1
14604: PPUSH
14605: CALL_OW 251
14609: PPUSH
14610: LD_VAR 0 4
14614: PPUSH
14615: CALL_OW 495
// end ; end ;
14619: LD_VAR 0 2
14623: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14624: LD_INT 0
14626: PPUSH
// end ;
14627: LD_VAR 0 4
14631: RET
// export function SOS_Command ( cmd ) ; begin
14632: LD_INT 0
14634: PPUSH
// end ;
14635: LD_VAR 0 2
14639: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14640: LD_INT 0
14642: PPUSH
// end ;
14643: LD_VAR 0 6
14647: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14648: LD_INT 0
14650: PPUSH
14651: PPUSH
// if not vehicle or not factory then
14652: LD_VAR 0 1
14656: NOT
14657: PUSH
14658: LD_VAR 0 2
14662: NOT
14663: OR
14664: IFFALSE 14668
// exit ;
14666: GO 14899
// if factoryWaypoints >= factory then
14668: LD_EXP 64
14672: PUSH
14673: LD_VAR 0 2
14677: GREATEREQUAL
14678: IFFALSE 14899
// if factoryWaypoints [ factory ] then
14680: LD_EXP 64
14684: PUSH
14685: LD_VAR 0 2
14689: ARRAY
14690: IFFALSE 14899
// begin if GetControl ( vehicle ) = control_manual then
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 263
14701: PUSH
14702: LD_INT 1
14704: EQUAL
14705: IFFALSE 14786
// begin driver := IsDrivenBy ( vehicle ) ;
14707: LD_ADDR_VAR 0 4
14711: PUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 311
14721: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14722: LD_VAR 0 4
14726: PPUSH
14727: LD_EXP 64
14731: PUSH
14732: LD_VAR 0 2
14736: ARRAY
14737: PUSH
14738: LD_INT 3
14740: ARRAY
14741: PPUSH
14742: LD_EXP 64
14746: PUSH
14747: LD_VAR 0 2
14751: ARRAY
14752: PUSH
14753: LD_INT 4
14755: ARRAY
14756: PPUSH
14757: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14761: LD_VAR 0 4
14765: PPUSH
14766: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14770: LD_VAR 0 4
14774: PPUSH
14775: LD_VAR 0 2
14779: PPUSH
14780: CALL_OW 180
// end else
14784: GO 14899
// if GetControl ( vehicle ) = control_remote then
14786: LD_VAR 0 1
14790: PPUSH
14791: CALL_OW 263
14795: PUSH
14796: LD_INT 2
14798: EQUAL
14799: IFFALSE 14860
// begin wait ( 0 0$2 ) ;
14801: LD_INT 70
14803: PPUSH
14804: CALL_OW 67
// if Connect ( vehicle ) then
14808: LD_VAR 0 1
14812: PPUSH
14813: CALL 41457 0 1
14817: IFFALSE 14858
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_EXP 64
14828: PUSH
14829: LD_VAR 0 2
14833: ARRAY
14834: PUSH
14835: LD_INT 3
14837: ARRAY
14838: PPUSH
14839: LD_EXP 64
14843: PUSH
14844: LD_VAR 0 2
14848: ARRAY
14849: PUSH
14850: LD_INT 4
14852: ARRAY
14853: PPUSH
14854: CALL_OW 171
// end else
14858: GO 14899
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14860: LD_VAR 0 1
14864: PPUSH
14865: LD_EXP 64
14869: PUSH
14870: LD_VAR 0 2
14874: ARRAY
14875: PUSH
14876: LD_INT 3
14878: ARRAY
14879: PPUSH
14880: LD_EXP 64
14884: PUSH
14885: LD_VAR 0 2
14889: ARRAY
14890: PUSH
14891: LD_INT 4
14893: ARRAY
14894: PPUSH
14895: CALL_OW 171
// end ; end ;
14899: LD_VAR 0 3
14903: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14904: LD_INT 0
14906: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14907: LD_VAR 0 1
14911: PUSH
14912: LD_INT 250
14914: EQUAL
14915: PUSH
14916: LD_VAR 0 2
14920: PPUSH
14921: CALL_OW 264
14925: PUSH
14926: LD_EXP 51
14930: EQUAL
14931: AND
14932: IFFALSE 14953
// MinerPlaceMine ( unit , x , y ) ;
14934: LD_VAR 0 2
14938: PPUSH
14939: LD_VAR 0 4
14943: PPUSH
14944: LD_VAR 0 5
14948: PPUSH
14949: CALL 17681 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14953: LD_VAR 0 1
14957: PUSH
14958: LD_INT 251
14960: EQUAL
14961: PUSH
14962: LD_VAR 0 2
14966: PPUSH
14967: CALL_OW 264
14971: PUSH
14972: LD_EXP 51
14976: EQUAL
14977: AND
14978: IFFALSE 14999
// MinerDetonateMine ( unit , x , y ) ;
14980: LD_VAR 0 2
14984: PPUSH
14985: LD_VAR 0 4
14989: PPUSH
14990: LD_VAR 0 5
14994: PPUSH
14995: CALL 17958 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14999: LD_VAR 0 1
15003: PUSH
15004: LD_INT 252
15006: EQUAL
15007: PUSH
15008: LD_VAR 0 2
15012: PPUSH
15013: CALL_OW 264
15017: PUSH
15018: LD_EXP 51
15022: EQUAL
15023: AND
15024: IFFALSE 15045
// MinerCreateMinefield ( unit , x , y ) ;
15026: LD_VAR 0 2
15030: PPUSH
15031: LD_VAR 0 4
15035: PPUSH
15036: LD_VAR 0 5
15040: PPUSH
15041: CALL 18375 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15045: LD_VAR 0 1
15049: PUSH
15050: LD_INT 253
15052: EQUAL
15053: PUSH
15054: LD_VAR 0 2
15058: PPUSH
15059: CALL_OW 257
15063: PUSH
15064: LD_INT 5
15066: EQUAL
15067: AND
15068: IFFALSE 15089
// ComBinocular ( unit , x , y ) ;
15070: LD_VAR 0 2
15074: PPUSH
15075: LD_VAR 0 4
15079: PPUSH
15080: LD_VAR 0 5
15084: PPUSH
15085: CALL 18746 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15089: LD_VAR 0 1
15093: PUSH
15094: LD_INT 254
15096: EQUAL
15097: PUSH
15098: LD_VAR 0 2
15102: PPUSH
15103: CALL_OW 264
15107: PUSH
15108: LD_EXP 46
15112: EQUAL
15113: AND
15114: PUSH
15115: LD_VAR 0 3
15119: PPUSH
15120: CALL_OW 263
15124: PUSH
15125: LD_INT 3
15127: EQUAL
15128: AND
15129: IFFALSE 15145
// HackDestroyVehicle ( unit , selectedUnit ) ;
15131: LD_VAR 0 2
15135: PPUSH
15136: LD_VAR 0 3
15140: PPUSH
15141: CALL 17041 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15145: LD_VAR 0 1
15149: PUSH
15150: LD_INT 255
15152: EQUAL
15153: PUSH
15154: LD_VAR 0 2
15158: PPUSH
15159: CALL_OW 264
15163: PUSH
15164: LD_INT 14
15166: PUSH
15167: LD_INT 53
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: IN
15174: AND
15175: PUSH
15176: LD_VAR 0 4
15180: PPUSH
15181: LD_VAR 0 5
15185: PPUSH
15186: CALL_OW 488
15190: AND
15191: IFFALSE 15215
// CutTreeXYR ( unit , x , y , 12 ) ;
15193: LD_VAR 0 2
15197: PPUSH
15198: LD_VAR 0 4
15202: PPUSH
15203: LD_VAR 0 5
15207: PPUSH
15208: LD_INT 12
15210: PPUSH
15211: CALL 15607 0 4
// if cmd = 256 then
15215: LD_VAR 0 1
15219: PUSH
15220: LD_INT 256
15222: EQUAL
15223: IFFALSE 15244
// SetFactoryWaypoint ( unit , x , y ) ;
15225: LD_VAR 0 2
15229: PPUSH
15230: LD_VAR 0 4
15234: PPUSH
15235: LD_VAR 0 5
15239: PPUSH
15240: CALL 15249 0 3
// end ;
15244: LD_VAR 0 6
15248: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15249: LD_INT 0
15251: PPUSH
15252: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15253: LD_VAR 0 1
15257: NOT
15258: PUSH
15259: LD_VAR 0 2
15263: PPUSH
15264: LD_VAR 0 3
15268: PPUSH
15269: CALL_OW 488
15273: NOT
15274: OR
15275: PUSH
15276: LD_VAR 0 1
15280: PPUSH
15281: CALL_OW 266
15285: PUSH
15286: LD_INT 3
15288: NONEQUAL
15289: PUSH
15290: LD_VAR 0 1
15294: PPUSH
15295: CALL_OW 247
15299: PUSH
15300: LD_INT 1
15302: EQUAL
15303: NOT
15304: AND
15305: OR
15306: IFFALSE 15310
// exit ;
15308: GO 15459
// if GetType ( factory ) = unit_human then
15310: LD_VAR 0 1
15314: PPUSH
15315: CALL_OW 247
15319: PUSH
15320: LD_INT 1
15322: EQUAL
15323: IFFALSE 15340
// factory := IsInUnit ( factory ) ;
15325: LD_ADDR_VAR 0 1
15329: PUSH
15330: LD_VAR 0 1
15334: PPUSH
15335: CALL_OW 310
15339: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15340: LD_VAR 0 1
15344: PPUSH
15345: CALL_OW 266
15349: PUSH
15350: LD_INT 3
15352: NONEQUAL
15353: IFFALSE 15357
// exit ;
15355: GO 15459
// if HexInfo ( x , y ) = factory then
15357: LD_VAR 0 2
15361: PPUSH
15362: LD_VAR 0 3
15366: PPUSH
15367: CALL_OW 428
15371: PUSH
15372: LD_VAR 0 1
15376: EQUAL
15377: IFFALSE 15404
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15379: LD_ADDR_EXP 64
15383: PUSH
15384: LD_EXP 64
15388: PPUSH
15389: LD_VAR 0 1
15393: PPUSH
15394: LD_INT 0
15396: PPUSH
15397: CALL_OW 1
15401: ST_TO_ADDR
15402: GO 15455
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15404: LD_ADDR_EXP 64
15408: PUSH
15409: LD_EXP 64
15413: PPUSH
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_VAR 0 1
15423: PPUSH
15424: CALL_OW 255
15428: PUSH
15429: LD_VAR 0 1
15433: PUSH
15434: LD_VAR 0 2
15438: PUSH
15439: LD_VAR 0 3
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: PPUSH
15450: CALL_OW 1
15454: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15455: CALL 15464 0 0
// end ;
15459: LD_VAR 0 4
15463: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
15464: LD_INT 0
15466: PPUSH
15467: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15468: LD_STRING resetFactoryWaypoint();
15470: PPUSH
15471: CALL_OW 559
// if factoryWaypoints then
15475: LD_EXP 64
15479: IFFALSE 15602
// begin for i := 1 to factoryWaypoints do
15481: LD_ADDR_VAR 0 2
15485: PUSH
15486: DOUBLE
15487: LD_INT 1
15489: DEC
15490: ST_TO_ADDR
15491: LD_EXP 64
15495: PUSH
15496: FOR_TO
15497: IFFALSE 15600
// if factoryWaypoints [ i ] then
15499: LD_EXP 64
15503: PUSH
15504: LD_VAR 0 2
15508: ARRAY
15509: IFFALSE 15598
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
15511: LD_STRING setFactoryWaypointXY(
15513: PUSH
15514: LD_EXP 64
15518: PUSH
15519: LD_VAR 0 2
15523: ARRAY
15524: PUSH
15525: LD_INT 1
15527: ARRAY
15528: STR
15529: PUSH
15530: LD_STRING ,
15532: STR
15533: PUSH
15534: LD_EXP 64
15538: PUSH
15539: LD_VAR 0 2
15543: ARRAY
15544: PUSH
15545: LD_INT 2
15547: ARRAY
15548: STR
15549: PUSH
15550: LD_STRING ,
15552: STR
15553: PUSH
15554: LD_EXP 64
15558: PUSH
15559: LD_VAR 0 2
15563: ARRAY
15564: PUSH
15565: LD_INT 3
15567: ARRAY
15568: STR
15569: PUSH
15570: LD_STRING ,
15572: STR
15573: PUSH
15574: LD_EXP 64
15578: PUSH
15579: LD_VAR 0 2
15583: ARRAY
15584: PUSH
15585: LD_INT 4
15587: ARRAY
15588: STR
15589: PUSH
15590: LD_STRING )
15592: STR
15593: PPUSH
15594: CALL_OW 559
15598: GO 15496
15600: POP
15601: POP
// end ; end ;
15602: LD_VAR 0 1
15606: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15607: LD_INT 0
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15618: LD_VAR 0 1
15622: NOT
15623: PUSH
15624: LD_VAR 0 2
15628: PPUSH
15629: LD_VAR 0 3
15633: PPUSH
15634: CALL_OW 488
15638: NOT
15639: OR
15640: PUSH
15641: LD_VAR 0 4
15645: NOT
15646: OR
15647: IFFALSE 15651
// exit ;
15649: GO 15991
// list := [ ] ;
15651: LD_ADDR_VAR 0 13
15655: PUSH
15656: EMPTY
15657: ST_TO_ADDR
// if x - r < 0 then
15658: LD_VAR 0 2
15662: PUSH
15663: LD_VAR 0 4
15667: MINUS
15668: PUSH
15669: LD_INT 0
15671: LESS
15672: IFFALSE 15684
// min_x := 0 else
15674: LD_ADDR_VAR 0 7
15678: PUSH
15679: LD_INT 0
15681: ST_TO_ADDR
15682: GO 15700
// min_x := x - r ;
15684: LD_ADDR_VAR 0 7
15688: PUSH
15689: LD_VAR 0 2
15693: PUSH
15694: LD_VAR 0 4
15698: MINUS
15699: ST_TO_ADDR
// if y - r < 0 then
15700: LD_VAR 0 3
15704: PUSH
15705: LD_VAR 0 4
15709: MINUS
15710: PUSH
15711: LD_INT 0
15713: LESS
15714: IFFALSE 15726
// min_y := 0 else
15716: LD_ADDR_VAR 0 8
15720: PUSH
15721: LD_INT 0
15723: ST_TO_ADDR
15724: GO 15742
// min_y := y - r ;
15726: LD_ADDR_VAR 0 8
15730: PUSH
15731: LD_VAR 0 3
15735: PUSH
15736: LD_VAR 0 4
15740: MINUS
15741: ST_TO_ADDR
// max_x := x + r ;
15742: LD_ADDR_VAR 0 9
15746: PUSH
15747: LD_VAR 0 2
15751: PUSH
15752: LD_VAR 0 4
15756: PLUS
15757: ST_TO_ADDR
// max_y := y + r ;
15758: LD_ADDR_VAR 0 10
15762: PUSH
15763: LD_VAR 0 3
15767: PUSH
15768: LD_VAR 0 4
15772: PLUS
15773: ST_TO_ADDR
// for _x = min_x to max_x do
15774: LD_ADDR_VAR 0 11
15778: PUSH
15779: DOUBLE
15780: LD_VAR 0 7
15784: DEC
15785: ST_TO_ADDR
15786: LD_VAR 0 9
15790: PUSH
15791: FOR_TO
15792: IFFALSE 15909
// for _y = min_y to max_y do
15794: LD_ADDR_VAR 0 12
15798: PUSH
15799: DOUBLE
15800: LD_VAR 0 8
15804: DEC
15805: ST_TO_ADDR
15806: LD_VAR 0 10
15810: PUSH
15811: FOR_TO
15812: IFFALSE 15905
// begin if not ValidHex ( _x , _y ) then
15814: LD_VAR 0 11
15818: PPUSH
15819: LD_VAR 0 12
15823: PPUSH
15824: CALL_OW 488
15828: NOT
15829: IFFALSE 15833
// continue ;
15831: GO 15811
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15833: LD_VAR 0 11
15837: PPUSH
15838: LD_VAR 0 12
15842: PPUSH
15843: CALL_OW 351
15847: PUSH
15848: LD_VAR 0 11
15852: PPUSH
15853: LD_VAR 0 12
15857: PPUSH
15858: CALL_OW 554
15862: AND
15863: IFFALSE 15903
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15865: LD_ADDR_VAR 0 13
15869: PUSH
15870: LD_VAR 0 13
15874: PPUSH
15875: LD_VAR 0 13
15879: PUSH
15880: LD_INT 1
15882: PLUS
15883: PPUSH
15884: LD_VAR 0 11
15888: PUSH
15889: LD_VAR 0 12
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PPUSH
15898: CALL_OW 2
15902: ST_TO_ADDR
// end ;
15903: GO 15811
15905: POP
15906: POP
15907: GO 15791
15909: POP
15910: POP
// if not list then
15911: LD_VAR 0 13
15915: NOT
15916: IFFALSE 15920
// exit ;
15918: GO 15991
// for i in list do
15920: LD_ADDR_VAR 0 6
15924: PUSH
15925: LD_VAR 0 13
15929: PUSH
15930: FOR_IN
15931: IFFALSE 15989
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15933: LD_VAR 0 1
15937: PPUSH
15938: LD_STRING M
15940: PUSH
15941: LD_VAR 0 6
15945: PUSH
15946: LD_INT 1
15948: ARRAY
15949: PUSH
15950: LD_VAR 0 6
15954: PUSH
15955: LD_INT 2
15957: ARRAY
15958: PUSH
15959: LD_INT 0
15961: PUSH
15962: LD_INT 0
15964: PUSH
15965: LD_INT 0
15967: PUSH
15968: LD_INT 0
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: PPUSH
15983: CALL_OW 447
15987: GO 15930
15989: POP
15990: POP
// end ;
15991: LD_VAR 0 5
15995: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15996: LD_EXP 65
16000: NOT
16001: IFFALSE 16051
16003: GO 16005
16005: DISABLE
// begin initHack := true ;
16006: LD_ADDR_EXP 65
16010: PUSH
16011: LD_INT 1
16013: ST_TO_ADDR
// hackTanks := [ ] ;
16014: LD_ADDR_EXP 66
16018: PUSH
16019: EMPTY
16020: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16021: LD_ADDR_EXP 67
16025: PUSH
16026: EMPTY
16027: ST_TO_ADDR
// hackLimit := 3 ;
16028: LD_ADDR_EXP 68
16032: PUSH
16033: LD_INT 3
16035: ST_TO_ADDR
// hackDist := 12 ;
16036: LD_ADDR_EXP 69
16040: PUSH
16041: LD_INT 12
16043: ST_TO_ADDR
// hackCounter := [ ] ;
16044: LD_ADDR_EXP 70
16048: PUSH
16049: EMPTY
16050: ST_TO_ADDR
// end ;
16051: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16052: LD_EXP 65
16056: PUSH
16057: LD_INT 34
16059: PUSH
16060: LD_EXP 46
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PPUSH
16069: CALL_OW 69
16073: AND
16074: IFFALSE 16329
16076: GO 16078
16078: DISABLE
16079: LD_INT 0
16081: PPUSH
16082: PPUSH
// begin enable ;
16083: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16084: LD_ADDR_VAR 0 1
16088: PUSH
16089: LD_INT 34
16091: PUSH
16092: LD_EXP 46
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 69
16105: PUSH
16106: FOR_IN
16107: IFFALSE 16327
// begin if not i in hackTanks then
16109: LD_VAR 0 1
16113: PUSH
16114: LD_EXP 66
16118: IN
16119: NOT
16120: IFFALSE 16203
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16122: LD_ADDR_EXP 66
16126: PUSH
16127: LD_EXP 66
16131: PPUSH
16132: LD_EXP 66
16136: PUSH
16137: LD_INT 1
16139: PLUS
16140: PPUSH
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 1
16150: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16151: LD_ADDR_EXP 67
16155: PUSH
16156: LD_EXP 67
16160: PPUSH
16161: LD_EXP 67
16165: PUSH
16166: LD_INT 1
16168: PLUS
16169: PPUSH
16170: EMPTY
16171: PPUSH
16172: CALL_OW 1
16176: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16177: LD_ADDR_EXP 70
16181: PUSH
16182: LD_EXP 70
16186: PPUSH
16187: LD_EXP 70
16191: PUSH
16192: LD_INT 1
16194: PLUS
16195: PPUSH
16196: EMPTY
16197: PPUSH
16198: CALL_OW 1
16202: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 302
16212: NOT
16213: IFFALSE 16226
// begin HackUnlinkAll ( i ) ;
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL 16332 0 1
// continue ;
16224: GO 16106
// end ; HackCheckCapturedStatus ( i ) ;
16226: LD_VAR 0 1
16230: PPUSH
16231: CALL 16775 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16235: LD_ADDR_VAR 0 2
16239: PUSH
16240: LD_INT 81
16242: PUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 255
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 33
16259: PUSH
16260: LD_INT 3
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 91
16269: PUSH
16270: LD_VAR 0 1
16274: PUSH
16275: LD_EXP 69
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 50
16287: PUSH
16288: EMPTY
16289: LIST
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: PPUSH
16297: CALL_OW 69
16301: ST_TO_ADDR
// if not tmp then
16302: LD_VAR 0 2
16306: NOT
16307: IFFALSE 16311
// continue ;
16309: GO 16106
// HackLink ( i , tmp ) ;
16311: LD_VAR 0 1
16315: PPUSH
16316: LD_VAR 0 2
16320: PPUSH
16321: CALL 16468 0 2
// end ;
16325: GO 16106
16327: POP
16328: POP
// end ;
16329: PPOPN 2
16331: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16332: LD_INT 0
16334: PPUSH
16335: PPUSH
16336: PPUSH
// if not hack in hackTanks then
16337: LD_VAR 0 1
16341: PUSH
16342: LD_EXP 66
16346: IN
16347: NOT
16348: IFFALSE 16352
// exit ;
16350: GO 16463
// index := GetElementIndex ( hackTanks , hack ) ;
16352: LD_ADDR_VAR 0 4
16356: PUSH
16357: LD_EXP 66
16361: PPUSH
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL 38271 0 2
16371: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16372: LD_EXP 67
16376: PUSH
16377: LD_VAR 0 4
16381: ARRAY
16382: IFFALSE 16463
// begin for i in hackTanksCaptured [ index ] do
16384: LD_ADDR_VAR 0 3
16388: PUSH
16389: LD_EXP 67
16393: PUSH
16394: LD_VAR 0 4
16398: ARRAY
16399: PUSH
16400: FOR_IN
16401: IFFALSE 16427
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16403: LD_VAR 0 3
16407: PUSH
16408: LD_INT 1
16410: ARRAY
16411: PPUSH
16412: LD_VAR 0 3
16416: PUSH
16417: LD_INT 2
16419: ARRAY
16420: PPUSH
16421: CALL_OW 235
16425: GO 16400
16427: POP
16428: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16429: LD_ADDR_EXP 67
16433: PUSH
16434: LD_EXP 67
16438: PPUSH
16439: LD_VAR 0 4
16443: PPUSH
16444: EMPTY
16445: PPUSH
16446: CALL_OW 1
16450: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16451: LD_VAR 0 1
16455: PPUSH
16456: LD_INT 0
16458: PPUSH
16459: CALL_OW 505
// end ; end ;
16463: LD_VAR 0 2
16467: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16468: LD_INT 0
16470: PPUSH
16471: PPUSH
16472: PPUSH
// if not hack in hackTanks or not vehicles then
16473: LD_VAR 0 1
16477: PUSH
16478: LD_EXP 66
16482: IN
16483: NOT
16484: PUSH
16485: LD_VAR 0 2
16489: NOT
16490: OR
16491: IFFALSE 16495
// exit ;
16493: GO 16770
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16495: LD_ADDR_VAR 0 2
16499: PUSH
16500: LD_VAR 0 1
16504: PPUSH
16505: LD_VAR 0 2
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: LD_INT 1
16515: PPUSH
16516: CALL 38921 0 4
16520: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16521: LD_ADDR_VAR 0 5
16525: PUSH
16526: LD_EXP 66
16530: PPUSH
16531: LD_VAR 0 1
16535: PPUSH
16536: CALL 38271 0 2
16540: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16541: LD_EXP 67
16545: PUSH
16546: LD_VAR 0 5
16550: ARRAY
16551: PUSH
16552: LD_EXP 68
16556: LESS
16557: IFFALSE 16746
// begin for i := 1 to vehicles do
16559: LD_ADDR_VAR 0 4
16563: PUSH
16564: DOUBLE
16565: LD_INT 1
16567: DEC
16568: ST_TO_ADDR
16569: LD_VAR 0 2
16573: PUSH
16574: FOR_TO
16575: IFFALSE 16744
// begin if hackTanksCaptured [ index ] = hackLimit then
16577: LD_EXP 67
16581: PUSH
16582: LD_VAR 0 5
16586: ARRAY
16587: PUSH
16588: LD_EXP 68
16592: EQUAL
16593: IFFALSE 16597
// break ;
16595: GO 16744
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16597: LD_ADDR_EXP 70
16601: PUSH
16602: LD_EXP 70
16606: PPUSH
16607: LD_VAR 0 5
16611: PPUSH
16612: LD_EXP 70
16616: PUSH
16617: LD_VAR 0 5
16621: ARRAY
16622: PUSH
16623: LD_INT 1
16625: PLUS
16626: PPUSH
16627: CALL_OW 1
16631: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16632: LD_ADDR_EXP 67
16636: PUSH
16637: LD_EXP 67
16641: PPUSH
16642: LD_VAR 0 5
16646: PUSH
16647: LD_EXP 67
16651: PUSH
16652: LD_VAR 0 5
16656: ARRAY
16657: PUSH
16658: LD_INT 1
16660: PLUS
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PPUSH
16666: LD_VAR 0 2
16670: PUSH
16671: LD_VAR 0 4
16675: ARRAY
16676: PUSH
16677: LD_VAR 0 2
16681: PUSH
16682: LD_VAR 0 4
16686: ARRAY
16687: PPUSH
16688: CALL_OW 255
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PPUSH
16697: CALL 38486 0 3
16701: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16702: LD_VAR 0 2
16706: PUSH
16707: LD_VAR 0 4
16711: ARRAY
16712: PPUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 255
16722: PPUSH
16723: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16727: LD_VAR 0 2
16731: PUSH
16732: LD_VAR 0 4
16736: ARRAY
16737: PPUSH
16738: CALL_OW 141
// end ;
16742: GO 16574
16744: POP
16745: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16746: LD_VAR 0 1
16750: PPUSH
16751: LD_EXP 67
16755: PUSH
16756: LD_VAR 0 5
16760: ARRAY
16761: PUSH
16762: LD_INT 0
16764: PLUS
16765: PPUSH
16766: CALL_OW 505
// end ;
16770: LD_VAR 0 3
16774: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16775: LD_INT 0
16777: PPUSH
16778: PPUSH
16779: PPUSH
16780: PPUSH
// if not hack in hackTanks then
16781: LD_VAR 0 1
16785: PUSH
16786: LD_EXP 66
16790: IN
16791: NOT
16792: IFFALSE 16796
// exit ;
16794: GO 17036
// index := GetElementIndex ( hackTanks , hack ) ;
16796: LD_ADDR_VAR 0 4
16800: PUSH
16801: LD_EXP 66
16805: PPUSH
16806: LD_VAR 0 1
16810: PPUSH
16811: CALL 38271 0 2
16815: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16816: LD_ADDR_VAR 0 3
16820: PUSH
16821: DOUBLE
16822: LD_EXP 67
16826: PUSH
16827: LD_VAR 0 4
16831: ARRAY
16832: INC
16833: ST_TO_ADDR
16834: LD_INT 1
16836: PUSH
16837: FOR_DOWNTO
16838: IFFALSE 17010
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16840: LD_ADDR_VAR 0 5
16844: PUSH
16845: LD_EXP 67
16849: PUSH
16850: LD_VAR 0 4
16854: ARRAY
16855: PUSH
16856: LD_VAR 0 3
16860: ARRAY
16861: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16862: LD_VAR 0 5
16866: PUSH
16867: LD_INT 1
16869: ARRAY
16870: PPUSH
16871: CALL_OW 302
16875: NOT
16876: PUSH
16877: LD_VAR 0 5
16881: PUSH
16882: LD_INT 1
16884: ARRAY
16885: PPUSH
16886: CALL_OW 255
16890: PUSH
16891: LD_VAR 0 1
16895: PPUSH
16896: CALL_OW 255
16900: NONEQUAL
16901: OR
16902: IFFALSE 17008
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16904: LD_VAR 0 5
16908: PUSH
16909: LD_INT 1
16911: ARRAY
16912: PPUSH
16913: CALL_OW 305
16917: PUSH
16918: LD_VAR 0 5
16922: PUSH
16923: LD_INT 1
16925: ARRAY
16926: PPUSH
16927: CALL_OW 255
16931: PUSH
16932: LD_VAR 0 1
16936: PPUSH
16937: CALL_OW 255
16941: EQUAL
16942: AND
16943: IFFALSE 16967
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16945: LD_VAR 0 5
16949: PUSH
16950: LD_INT 1
16952: ARRAY
16953: PPUSH
16954: LD_VAR 0 5
16958: PUSH
16959: LD_INT 2
16961: ARRAY
16962: PPUSH
16963: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16967: LD_ADDR_EXP 67
16971: PUSH
16972: LD_EXP 67
16976: PPUSH
16977: LD_VAR 0 4
16981: PPUSH
16982: LD_EXP 67
16986: PUSH
16987: LD_VAR 0 4
16991: ARRAY
16992: PPUSH
16993: LD_VAR 0 3
16997: PPUSH
16998: CALL_OW 3
17002: PPUSH
17003: CALL_OW 1
17007: ST_TO_ADDR
// end ; end ;
17008: GO 16837
17010: POP
17011: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17012: LD_VAR 0 1
17016: PPUSH
17017: LD_EXP 67
17021: PUSH
17022: LD_VAR 0 4
17026: ARRAY
17027: PUSH
17028: LD_INT 0
17030: PLUS
17031: PPUSH
17032: CALL_OW 505
// end ;
17036: LD_VAR 0 2
17040: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17041: LD_INT 0
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
// if not hack in hackTanks then
17047: LD_VAR 0 1
17051: PUSH
17052: LD_EXP 66
17056: IN
17057: NOT
17058: IFFALSE 17062
// exit ;
17060: GO 17147
// index := GetElementIndex ( hackTanks , hack ) ;
17062: LD_ADDR_VAR 0 5
17066: PUSH
17067: LD_EXP 66
17071: PPUSH
17072: LD_VAR 0 1
17076: PPUSH
17077: CALL 38271 0 2
17081: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17082: LD_ADDR_VAR 0 4
17086: PUSH
17087: DOUBLE
17088: LD_INT 1
17090: DEC
17091: ST_TO_ADDR
17092: LD_EXP 67
17096: PUSH
17097: LD_VAR 0 5
17101: ARRAY
17102: PUSH
17103: FOR_TO
17104: IFFALSE 17145
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17106: LD_EXP 67
17110: PUSH
17111: LD_VAR 0 5
17115: ARRAY
17116: PUSH
17117: LD_VAR 0 4
17121: ARRAY
17122: PUSH
17123: LD_INT 1
17125: ARRAY
17126: PUSH
17127: LD_VAR 0 2
17131: EQUAL
17132: IFFALSE 17143
// KillUnit ( vehicle ) ;
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 66
17143: GO 17103
17145: POP
17146: POP
// end ;
17147: LD_VAR 0 3
17151: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17152: LD_EXP 71
17156: NOT
17157: IFFALSE 17192
17159: GO 17161
17161: DISABLE
// begin initMiner := true ;
17162: LD_ADDR_EXP 71
17166: PUSH
17167: LD_INT 1
17169: ST_TO_ADDR
// minersList := [ ] ;
17170: LD_ADDR_EXP 72
17174: PUSH
17175: EMPTY
17176: ST_TO_ADDR
// minerMinesList := [ ] ;
17177: LD_ADDR_EXP 73
17181: PUSH
17182: EMPTY
17183: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17184: LD_ADDR_EXP 74
17188: PUSH
17189: LD_INT 5
17191: ST_TO_ADDR
// end ;
17192: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17193: LD_EXP 71
17197: PUSH
17198: LD_INT 34
17200: PUSH
17201: LD_EXP 51
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: AND
17215: IFFALSE 17678
17217: GO 17219
17219: DISABLE
17220: LD_INT 0
17222: PPUSH
17223: PPUSH
17224: PPUSH
17225: PPUSH
// begin enable ;
17226: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17227: LD_ADDR_VAR 0 1
17231: PUSH
17232: LD_INT 34
17234: PUSH
17235: LD_EXP 51
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17322
// begin if not i in minersList then
17252: LD_VAR 0 1
17256: PUSH
17257: LD_EXP 72
17261: IN
17262: NOT
17263: IFFALSE 17320
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17265: LD_ADDR_EXP 72
17269: PUSH
17270: LD_EXP 72
17274: PPUSH
17275: LD_EXP 72
17279: PUSH
17280: LD_INT 1
17282: PLUS
17283: PPUSH
17284: LD_VAR 0 1
17288: PPUSH
17289: CALL_OW 1
17293: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17294: LD_ADDR_EXP 73
17298: PUSH
17299: LD_EXP 73
17303: PPUSH
17304: LD_EXP 73
17308: PUSH
17309: LD_INT 1
17311: PLUS
17312: PPUSH
17313: EMPTY
17314: PPUSH
17315: CALL_OW 1
17319: ST_TO_ADDR
// end end ;
17320: GO 17249
17322: POP
17323: POP
// for i := minerMinesList downto 1 do
17324: LD_ADDR_VAR 0 1
17328: PUSH
17329: DOUBLE
17330: LD_EXP 73
17334: INC
17335: ST_TO_ADDR
17336: LD_INT 1
17338: PUSH
17339: FOR_DOWNTO
17340: IFFALSE 17676
// begin if IsLive ( minersList [ i ] ) then
17342: LD_EXP 72
17346: PUSH
17347: LD_VAR 0 1
17351: ARRAY
17352: PPUSH
17353: CALL_OW 300
17357: IFFALSE 17385
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17359: LD_EXP 72
17363: PUSH
17364: LD_VAR 0 1
17368: ARRAY
17369: PPUSH
17370: LD_EXP 73
17374: PUSH
17375: LD_VAR 0 1
17379: ARRAY
17380: PPUSH
17381: CALL_OW 505
// if not minerMinesList [ i ] then
17385: LD_EXP 73
17389: PUSH
17390: LD_VAR 0 1
17394: ARRAY
17395: NOT
17396: IFFALSE 17400
// continue ;
17398: GO 17339
// for j := minerMinesList [ i ] downto 1 do
17400: LD_ADDR_VAR 0 2
17404: PUSH
17405: DOUBLE
17406: LD_EXP 73
17410: PUSH
17411: LD_VAR 0 1
17415: ARRAY
17416: INC
17417: ST_TO_ADDR
17418: LD_INT 1
17420: PUSH
17421: FOR_DOWNTO
17422: IFFALSE 17672
// begin side := GetSide ( minersList [ i ] ) ;
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_EXP 72
17433: PUSH
17434: LD_VAR 0 1
17438: ARRAY
17439: PPUSH
17440: CALL_OW 255
17444: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17445: LD_ADDR_VAR 0 4
17449: PUSH
17450: LD_EXP 73
17454: PUSH
17455: LD_VAR 0 1
17459: ARRAY
17460: PUSH
17461: LD_VAR 0 2
17465: ARRAY
17466: PUSH
17467: LD_INT 1
17469: ARRAY
17470: PPUSH
17471: LD_EXP 73
17475: PUSH
17476: LD_VAR 0 1
17480: ARRAY
17481: PUSH
17482: LD_VAR 0 2
17486: ARRAY
17487: PUSH
17488: LD_INT 2
17490: ARRAY
17491: PPUSH
17492: CALL_OW 428
17496: ST_TO_ADDR
// if not tmp then
17497: LD_VAR 0 4
17501: NOT
17502: IFFALSE 17506
// continue ;
17504: GO 17421
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17506: LD_VAR 0 4
17510: PUSH
17511: LD_INT 81
17513: PUSH
17514: LD_VAR 0 3
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PPUSH
17523: CALL_OW 69
17527: IN
17528: PUSH
17529: LD_EXP 73
17533: PUSH
17534: LD_VAR 0 1
17538: ARRAY
17539: PUSH
17540: LD_VAR 0 2
17544: ARRAY
17545: PUSH
17546: LD_INT 1
17548: ARRAY
17549: PPUSH
17550: LD_EXP 73
17554: PUSH
17555: LD_VAR 0 1
17559: ARRAY
17560: PUSH
17561: LD_VAR 0 2
17565: ARRAY
17566: PUSH
17567: LD_INT 2
17569: ARRAY
17570: PPUSH
17571: CALL_OW 458
17575: AND
17576: IFFALSE 17670
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17578: LD_EXP 73
17582: PUSH
17583: LD_VAR 0 1
17587: ARRAY
17588: PUSH
17589: LD_VAR 0 2
17593: ARRAY
17594: PUSH
17595: LD_INT 1
17597: ARRAY
17598: PPUSH
17599: LD_EXP 73
17603: PUSH
17604: LD_VAR 0 1
17608: ARRAY
17609: PUSH
17610: LD_VAR 0 2
17614: ARRAY
17615: PUSH
17616: LD_INT 2
17618: ARRAY
17619: PPUSH
17620: LD_VAR 0 3
17624: PPUSH
17625: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17629: LD_ADDR_EXP 73
17633: PUSH
17634: LD_EXP 73
17638: PPUSH
17639: LD_VAR 0 1
17643: PPUSH
17644: LD_EXP 73
17648: PUSH
17649: LD_VAR 0 1
17653: ARRAY
17654: PPUSH
17655: LD_VAR 0 2
17659: PPUSH
17660: CALL_OW 3
17664: PPUSH
17665: CALL_OW 1
17669: ST_TO_ADDR
// end ; end ;
17670: GO 17421
17672: POP
17673: POP
// end ;
17674: GO 17339
17676: POP
17677: POP
// end ;
17678: PPOPN 4
17680: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17681: LD_INT 0
17683: PPUSH
17684: PPUSH
// result := false ;
17685: LD_ADDR_VAR 0 4
17689: PUSH
17690: LD_INT 0
17692: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17693: LD_VAR 0 1
17697: PPUSH
17698: CALL_OW 264
17702: PUSH
17703: LD_EXP 51
17707: EQUAL
17708: NOT
17709: IFFALSE 17713
// exit ;
17711: GO 17953
// index := GetElementIndex ( minersList , unit ) ;
17713: LD_ADDR_VAR 0 5
17717: PUSH
17718: LD_EXP 72
17722: PPUSH
17723: LD_VAR 0 1
17727: PPUSH
17728: CALL 38271 0 2
17732: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17733: LD_EXP 73
17737: PUSH
17738: LD_VAR 0 5
17742: ARRAY
17743: PUSH
17744: LD_EXP 74
17748: GREATEREQUAL
17749: IFFALSE 17753
// exit ;
17751: GO 17953
// ComMoveXY ( unit , x , y ) ;
17753: LD_VAR 0 1
17757: PPUSH
17758: LD_VAR 0 2
17762: PPUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17772: LD_INT 35
17774: PPUSH
17775: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_VAR 0 2
17788: PPUSH
17789: LD_VAR 0 3
17793: PPUSH
17794: CALL 68990 0 3
17798: NOT
17799: PUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 314
17809: AND
17810: IFFALSE 17814
// exit ;
17812: GO 17953
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17814: LD_VAR 0 2
17818: PPUSH
17819: LD_VAR 0 3
17823: PPUSH
17824: CALL_OW 428
17828: PUSH
17829: LD_VAR 0 1
17833: EQUAL
17834: PUSH
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL_OW 314
17844: NOT
17845: AND
17846: IFFALSE 17772
// PlaySoundXY ( x , y , PlantMine ) ;
17848: LD_VAR 0 2
17852: PPUSH
17853: LD_VAR 0 3
17857: PPUSH
17858: LD_STRING PlantMine
17860: PPUSH
17861: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17865: LD_VAR 0 2
17869: PPUSH
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_VAR 0 1
17879: PPUSH
17880: CALL_OW 255
17884: PPUSH
17885: LD_INT 0
17887: PPUSH
17888: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17892: LD_ADDR_EXP 73
17896: PUSH
17897: LD_EXP 73
17901: PPUSH
17902: LD_VAR 0 5
17906: PUSH
17907: LD_EXP 73
17911: PUSH
17912: LD_VAR 0 5
17916: ARRAY
17917: PUSH
17918: LD_INT 1
17920: PLUS
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PPUSH
17926: LD_VAR 0 2
17930: PUSH
17931: LD_VAR 0 3
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PPUSH
17940: CALL 38486 0 3
17944: ST_TO_ADDR
// result := true ;
17945: LD_ADDR_VAR 0 4
17949: PUSH
17950: LD_INT 1
17952: ST_TO_ADDR
// end ;
17953: LD_VAR 0 4
17957: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17958: LD_INT 0
17960: PPUSH
17961: PPUSH
17962: PPUSH
// if not unit in minersList then
17963: LD_VAR 0 1
17967: PUSH
17968: LD_EXP 72
17972: IN
17973: NOT
17974: IFFALSE 17978
// exit ;
17976: GO 18370
// index := GetElementIndex ( minersList , unit ) ;
17978: LD_ADDR_VAR 0 6
17982: PUSH
17983: LD_EXP 72
17987: PPUSH
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL 38271 0 2
17997: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17998: LD_ADDR_VAR 0 5
18002: PUSH
18003: DOUBLE
18004: LD_EXP 73
18008: PUSH
18009: LD_VAR 0 6
18013: ARRAY
18014: INC
18015: ST_TO_ADDR
18016: LD_INT 1
18018: PUSH
18019: FOR_DOWNTO
18020: IFFALSE 18181
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18022: LD_EXP 73
18026: PUSH
18027: LD_VAR 0 6
18031: ARRAY
18032: PUSH
18033: LD_VAR 0 5
18037: ARRAY
18038: PUSH
18039: LD_INT 1
18041: ARRAY
18042: PUSH
18043: LD_VAR 0 2
18047: EQUAL
18048: PUSH
18049: LD_EXP 73
18053: PUSH
18054: LD_VAR 0 6
18058: ARRAY
18059: PUSH
18060: LD_VAR 0 5
18064: ARRAY
18065: PUSH
18066: LD_INT 2
18068: ARRAY
18069: PUSH
18070: LD_VAR 0 3
18074: EQUAL
18075: AND
18076: IFFALSE 18179
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18078: LD_EXP 73
18082: PUSH
18083: LD_VAR 0 6
18087: ARRAY
18088: PUSH
18089: LD_VAR 0 5
18093: ARRAY
18094: PUSH
18095: LD_INT 1
18097: ARRAY
18098: PPUSH
18099: LD_EXP 73
18103: PUSH
18104: LD_VAR 0 6
18108: ARRAY
18109: PUSH
18110: LD_VAR 0 5
18114: ARRAY
18115: PUSH
18116: LD_INT 2
18118: ARRAY
18119: PPUSH
18120: LD_VAR 0 1
18124: PPUSH
18125: CALL_OW 255
18129: PPUSH
18130: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18134: LD_ADDR_EXP 73
18138: PUSH
18139: LD_EXP 73
18143: PPUSH
18144: LD_VAR 0 6
18148: PPUSH
18149: LD_EXP 73
18153: PUSH
18154: LD_VAR 0 6
18158: ARRAY
18159: PPUSH
18160: LD_VAR 0 5
18164: PPUSH
18165: CALL_OW 3
18169: PPUSH
18170: CALL_OW 1
18174: ST_TO_ADDR
// exit ;
18175: POP
18176: POP
18177: GO 18370
// end ; end ;
18179: GO 18019
18181: POP
18182: POP
// for i := minerMinesList [ index ] downto 1 do
18183: LD_ADDR_VAR 0 5
18187: PUSH
18188: DOUBLE
18189: LD_EXP 73
18193: PUSH
18194: LD_VAR 0 6
18198: ARRAY
18199: INC
18200: ST_TO_ADDR
18201: LD_INT 1
18203: PUSH
18204: FOR_DOWNTO
18205: IFFALSE 18368
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18207: LD_EXP 73
18211: PUSH
18212: LD_VAR 0 6
18216: ARRAY
18217: PUSH
18218: LD_VAR 0 5
18222: ARRAY
18223: PUSH
18224: LD_INT 1
18226: ARRAY
18227: PPUSH
18228: LD_EXP 73
18232: PUSH
18233: LD_VAR 0 6
18237: ARRAY
18238: PUSH
18239: LD_VAR 0 5
18243: ARRAY
18244: PUSH
18245: LD_INT 2
18247: ARRAY
18248: PPUSH
18249: LD_VAR 0 2
18253: PPUSH
18254: LD_VAR 0 3
18258: PPUSH
18259: CALL_OW 298
18263: PUSH
18264: LD_INT 6
18266: LESS
18267: IFFALSE 18366
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18269: LD_EXP 73
18273: PUSH
18274: LD_VAR 0 6
18278: ARRAY
18279: PUSH
18280: LD_VAR 0 5
18284: ARRAY
18285: PUSH
18286: LD_INT 1
18288: ARRAY
18289: PPUSH
18290: LD_EXP 73
18294: PUSH
18295: LD_VAR 0 6
18299: ARRAY
18300: PUSH
18301: LD_VAR 0 5
18305: ARRAY
18306: PUSH
18307: LD_INT 2
18309: ARRAY
18310: PPUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 255
18320: PPUSH
18321: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18325: LD_ADDR_EXP 73
18329: PUSH
18330: LD_EXP 73
18334: PPUSH
18335: LD_VAR 0 6
18339: PPUSH
18340: LD_EXP 73
18344: PUSH
18345: LD_VAR 0 6
18349: ARRAY
18350: PPUSH
18351: LD_VAR 0 5
18355: PPUSH
18356: CALL_OW 3
18360: PPUSH
18361: CALL_OW 1
18365: ST_TO_ADDR
// end ; end ;
18366: GO 18204
18368: POP
18369: POP
// end ;
18370: LD_VAR 0 4
18374: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18375: LD_INT 0
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
18381: PPUSH
18382: PPUSH
18383: PPUSH
18384: PPUSH
18385: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18386: LD_VAR 0 1
18390: PPUSH
18391: CALL_OW 264
18395: PUSH
18396: LD_EXP 51
18400: EQUAL
18401: NOT
18402: PUSH
18403: LD_VAR 0 1
18407: PUSH
18408: LD_EXP 72
18412: IN
18413: NOT
18414: OR
18415: IFFALSE 18419
// exit ;
18417: GO 18741
// index := GetElementIndex ( minersList , unit ) ;
18419: LD_ADDR_VAR 0 6
18423: PUSH
18424: LD_EXP 72
18428: PPUSH
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL 38271 0 2
18438: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18439: LD_ADDR_VAR 0 8
18443: PUSH
18444: LD_EXP 74
18448: PUSH
18449: LD_EXP 73
18453: PUSH
18454: LD_VAR 0 6
18458: ARRAY
18459: MINUS
18460: ST_TO_ADDR
// if not minesFreeAmount then
18461: LD_VAR 0 8
18465: NOT
18466: IFFALSE 18470
// exit ;
18468: GO 18741
// tmp := [ ] ;
18470: LD_ADDR_VAR 0 7
18474: PUSH
18475: EMPTY
18476: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18477: LD_ADDR_VAR 0 5
18481: PUSH
18482: DOUBLE
18483: LD_INT 1
18485: DEC
18486: ST_TO_ADDR
18487: LD_VAR 0 8
18491: PUSH
18492: FOR_TO
18493: IFFALSE 18688
// begin _d := rand ( 0 , 5 ) ;
18495: LD_ADDR_VAR 0 11
18499: PUSH
18500: LD_INT 0
18502: PPUSH
18503: LD_INT 5
18505: PPUSH
18506: CALL_OW 12
18510: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18511: LD_ADDR_VAR 0 12
18515: PUSH
18516: LD_INT 2
18518: PPUSH
18519: LD_INT 6
18521: PPUSH
18522: CALL_OW 12
18526: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18527: LD_ADDR_VAR 0 9
18531: PUSH
18532: LD_VAR 0 2
18536: PPUSH
18537: LD_VAR 0 11
18541: PPUSH
18542: LD_VAR 0 12
18546: PPUSH
18547: CALL_OW 272
18551: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18552: LD_ADDR_VAR 0 10
18556: PUSH
18557: LD_VAR 0 3
18561: PPUSH
18562: LD_VAR 0 11
18566: PPUSH
18567: LD_VAR 0 12
18571: PPUSH
18572: CALL_OW 273
18576: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18577: LD_VAR 0 9
18581: PPUSH
18582: LD_VAR 0 10
18586: PPUSH
18587: CALL_OW 488
18591: PUSH
18592: LD_VAR 0 9
18596: PUSH
18597: LD_VAR 0 10
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_VAR 0 7
18610: IN
18611: NOT
18612: AND
18613: PUSH
18614: LD_VAR 0 9
18618: PPUSH
18619: LD_VAR 0 10
18623: PPUSH
18624: CALL_OW 458
18628: NOT
18629: AND
18630: IFFALSE 18672
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18632: LD_ADDR_VAR 0 7
18636: PUSH
18637: LD_VAR 0 7
18641: PPUSH
18642: LD_VAR 0 7
18646: PUSH
18647: LD_INT 1
18649: PLUS
18650: PPUSH
18651: LD_VAR 0 9
18655: PUSH
18656: LD_VAR 0 10
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 1
18669: ST_TO_ADDR
18670: GO 18686
// i := i - 1 ;
18672: LD_ADDR_VAR 0 5
18676: PUSH
18677: LD_VAR 0 5
18681: PUSH
18682: LD_INT 1
18684: MINUS
18685: ST_TO_ADDR
// end ;
18686: GO 18492
18688: POP
18689: POP
// for i in tmp do
18690: LD_ADDR_VAR 0 5
18694: PUSH
18695: LD_VAR 0 7
18699: PUSH
18700: FOR_IN
18701: IFFALSE 18739
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18703: LD_VAR 0 1
18707: PPUSH
18708: LD_VAR 0 5
18712: PUSH
18713: LD_INT 1
18715: ARRAY
18716: PPUSH
18717: LD_VAR 0 5
18721: PUSH
18722: LD_INT 2
18724: ARRAY
18725: PPUSH
18726: CALL 17681 0 3
18730: NOT
18731: IFFALSE 18737
// exit ;
18733: POP
18734: POP
18735: GO 18741
18737: GO 18700
18739: POP
18740: POP
// end ;
18741: LD_VAR 0 4
18745: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18746: LD_INT 0
18748: PPUSH
18749: PPUSH
18750: PPUSH
18751: PPUSH
18752: PPUSH
18753: PPUSH
18754: PPUSH
// if not GetClass ( unit ) = class_sniper then
18755: LD_VAR 0 1
18759: PPUSH
18760: CALL_OW 257
18764: PUSH
18765: LD_INT 5
18767: EQUAL
18768: NOT
18769: IFFALSE 18773
// exit ;
18771: GO 19161
// dist := 8 ;
18773: LD_ADDR_VAR 0 5
18777: PUSH
18778: LD_INT 8
18780: ST_TO_ADDR
// viewRange := 12 ;
18781: LD_ADDR_VAR 0 7
18785: PUSH
18786: LD_INT 12
18788: ST_TO_ADDR
// side := GetSide ( unit ) ;
18789: LD_ADDR_VAR 0 6
18793: PUSH
18794: LD_VAR 0 1
18798: PPUSH
18799: CALL_OW 255
18803: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18804: LD_INT 61
18806: PPUSH
18807: LD_VAR 0 6
18811: PPUSH
18812: CALL_OW 321
18816: PUSH
18817: LD_INT 2
18819: EQUAL
18820: IFFALSE 18830
// viewRange := 16 ;
18822: LD_ADDR_VAR 0 7
18826: PUSH
18827: LD_INT 16
18829: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18830: LD_VAR 0 1
18834: PPUSH
18835: LD_VAR 0 2
18839: PPUSH
18840: LD_VAR 0 3
18844: PPUSH
18845: CALL_OW 297
18849: PUSH
18850: LD_VAR 0 5
18854: GREATER
18855: IFFALSE 18934
// begin ComMoveXY ( unit , x , y ) ;
18857: LD_VAR 0 1
18861: PPUSH
18862: LD_VAR 0 2
18866: PPUSH
18867: LD_VAR 0 3
18871: PPUSH
18872: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18876: LD_INT 35
18878: PPUSH
18879: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18883: LD_VAR 0 1
18887: PPUSH
18888: LD_VAR 0 2
18892: PPUSH
18893: LD_VAR 0 3
18897: PPUSH
18898: CALL 68990 0 3
18902: NOT
18903: IFFALSE 18907
// exit ;
18905: GO 19161
// until GetDistUnitXY ( unit , x , y ) < dist ;
18907: LD_VAR 0 1
18911: PPUSH
18912: LD_VAR 0 2
18916: PPUSH
18917: LD_VAR 0 3
18921: PPUSH
18922: CALL_OW 297
18926: PUSH
18927: LD_VAR 0 5
18931: LESS
18932: IFFALSE 18876
// end ; ComTurnXY ( unit , x , y ) ;
18934: LD_VAR 0 1
18938: PPUSH
18939: LD_VAR 0 2
18943: PPUSH
18944: LD_VAR 0 3
18948: PPUSH
18949: CALL_OW 118
// wait ( 5 ) ;
18953: LD_INT 5
18955: PPUSH
18956: CALL_OW 67
// _d := GetDir ( unit ) ;
18960: LD_ADDR_VAR 0 10
18964: PUSH
18965: LD_VAR 0 1
18969: PPUSH
18970: CALL_OW 254
18974: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18975: LD_ADDR_VAR 0 8
18979: PUSH
18980: LD_VAR 0 1
18984: PPUSH
18985: CALL_OW 250
18989: PPUSH
18990: LD_VAR 0 10
18994: PPUSH
18995: LD_VAR 0 5
18999: PPUSH
19000: CALL_OW 272
19004: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19005: LD_ADDR_VAR 0 9
19009: PUSH
19010: LD_VAR 0 1
19014: PPUSH
19015: CALL_OW 251
19019: PPUSH
19020: LD_VAR 0 10
19024: PPUSH
19025: LD_VAR 0 5
19029: PPUSH
19030: CALL_OW 273
19034: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19035: LD_VAR 0 8
19039: PPUSH
19040: LD_VAR 0 9
19044: PPUSH
19045: CALL_OW 488
19049: NOT
19050: IFFALSE 19054
// exit ;
19052: GO 19161
// ComAnimCustom ( unit , 1 ) ;
19054: LD_VAR 0 1
19058: PPUSH
19059: LD_INT 1
19061: PPUSH
19062: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19066: LD_VAR 0 8
19070: PPUSH
19071: LD_VAR 0 9
19075: PPUSH
19076: LD_VAR 0 6
19080: PPUSH
19081: LD_VAR 0 7
19085: PPUSH
19086: CALL_OW 330
// repeat wait ( 1 ) ;
19090: LD_INT 1
19092: PPUSH
19093: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19097: LD_VAR 0 1
19101: PPUSH
19102: CALL_OW 316
19106: PUSH
19107: LD_VAR 0 1
19111: PPUSH
19112: CALL_OW 314
19116: OR
19117: PUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL_OW 302
19127: NOT
19128: OR
19129: PUSH
19130: LD_VAR 0 1
19134: PPUSH
19135: CALL_OW 301
19139: OR
19140: IFFALSE 19090
// RemoveSeeing ( _x , _y , side ) ;
19142: LD_VAR 0 8
19146: PPUSH
19147: LD_VAR 0 9
19151: PPUSH
19152: LD_VAR 0 6
19156: PPUSH
19157: CALL_OW 331
// end ; end_of_file
19161: LD_VAR 0 4
19165: RET
// every 0 0$1 do
19166: GO 19168
19168: DISABLE
// begin enable ;
19169: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19170: LD_STRING updateTimer(
19172: PUSH
19173: LD_OWVAR 1
19177: STR
19178: PUSH
19179: LD_STRING );
19181: STR
19182: PPUSH
19183: CALL_OW 559
// end ;
19187: END
// export function SOS_MapStart ( ) ; begin
19188: LD_INT 0
19190: PPUSH
// if streamModeActive then
19191: LD_EXP 75
19195: IFFALSE 19204
// DefineStreamItems ( true ) ;
19197: LD_INT 1
19199: PPUSH
19200: CALL 20854 0 1
// UpdateFactoryWaypoints ( ) ;
19204: CALL 15464 0 0
// end ;
19208: LD_VAR 0 1
19212: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19213: LD_INT 0
19215: PPUSH
// if p2 = 100 then
19216: LD_VAR 0 2
19220: PUSH
19221: LD_INT 100
19223: EQUAL
19224: IFFALSE 20227
// begin if not StreamModeActive then
19226: LD_EXP 75
19230: NOT
19231: IFFALSE 19241
// StreamModeActive := true ;
19233: LD_ADDR_EXP 75
19237: PUSH
19238: LD_INT 1
19240: ST_TO_ADDR
// if p3 = 0 then
19241: LD_VAR 0 3
19245: PUSH
19246: LD_INT 0
19248: EQUAL
19249: IFFALSE 19255
// InitStreamMode ;
19251: CALL 20390 0 0
// if p3 = 1 then
19255: LD_VAR 0 3
19259: PUSH
19260: LD_INT 1
19262: EQUAL
19263: IFFALSE 19273
// sRocket := true ;
19265: LD_ADDR_EXP 80
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// if p3 = 2 then
19273: LD_VAR 0 3
19277: PUSH
19278: LD_INT 2
19280: EQUAL
19281: IFFALSE 19291
// sSpeed := true ;
19283: LD_ADDR_EXP 79
19287: PUSH
19288: LD_INT 1
19290: ST_TO_ADDR
// if p3 = 3 then
19291: LD_VAR 0 3
19295: PUSH
19296: LD_INT 3
19298: EQUAL
19299: IFFALSE 19309
// sEngine := true ;
19301: LD_ADDR_EXP 81
19305: PUSH
19306: LD_INT 1
19308: ST_TO_ADDR
// if p3 = 4 then
19309: LD_VAR 0 3
19313: PUSH
19314: LD_INT 4
19316: EQUAL
19317: IFFALSE 19327
// sSpec := true ;
19319: LD_ADDR_EXP 78
19323: PUSH
19324: LD_INT 1
19326: ST_TO_ADDR
// if p3 = 5 then
19327: LD_VAR 0 3
19331: PUSH
19332: LD_INT 5
19334: EQUAL
19335: IFFALSE 19345
// sLevel := true ;
19337: LD_ADDR_EXP 82
19341: PUSH
19342: LD_INT 1
19344: ST_TO_ADDR
// if p3 = 6 then
19345: LD_VAR 0 3
19349: PUSH
19350: LD_INT 6
19352: EQUAL
19353: IFFALSE 19363
// sArmoury := true ;
19355: LD_ADDR_EXP 83
19359: PUSH
19360: LD_INT 1
19362: ST_TO_ADDR
// if p3 = 7 then
19363: LD_VAR 0 3
19367: PUSH
19368: LD_INT 7
19370: EQUAL
19371: IFFALSE 19381
// sRadar := true ;
19373: LD_ADDR_EXP 84
19377: PUSH
19378: LD_INT 1
19380: ST_TO_ADDR
// if p3 = 8 then
19381: LD_VAR 0 3
19385: PUSH
19386: LD_INT 8
19388: EQUAL
19389: IFFALSE 19399
// sBunker := true ;
19391: LD_ADDR_EXP 85
19395: PUSH
19396: LD_INT 1
19398: ST_TO_ADDR
// if p3 = 9 then
19399: LD_VAR 0 3
19403: PUSH
19404: LD_INT 9
19406: EQUAL
19407: IFFALSE 19417
// sHack := true ;
19409: LD_ADDR_EXP 86
19413: PUSH
19414: LD_INT 1
19416: ST_TO_ADDR
// if p3 = 10 then
19417: LD_VAR 0 3
19421: PUSH
19422: LD_INT 10
19424: EQUAL
19425: IFFALSE 19435
// sFire := true ;
19427: LD_ADDR_EXP 87
19431: PUSH
19432: LD_INT 1
19434: ST_TO_ADDR
// if p3 = 11 then
19435: LD_VAR 0 3
19439: PUSH
19440: LD_INT 11
19442: EQUAL
19443: IFFALSE 19453
// sRefresh := true ;
19445: LD_ADDR_EXP 88
19449: PUSH
19450: LD_INT 1
19452: ST_TO_ADDR
// if p3 = 12 then
19453: LD_VAR 0 3
19457: PUSH
19458: LD_INT 12
19460: EQUAL
19461: IFFALSE 19471
// sExp := true ;
19463: LD_ADDR_EXP 89
19467: PUSH
19468: LD_INT 1
19470: ST_TO_ADDR
// if p3 = 13 then
19471: LD_VAR 0 3
19475: PUSH
19476: LD_INT 13
19478: EQUAL
19479: IFFALSE 19489
// sDepot := true ;
19481: LD_ADDR_EXP 90
19485: PUSH
19486: LD_INT 1
19488: ST_TO_ADDR
// if p3 = 14 then
19489: LD_VAR 0 3
19493: PUSH
19494: LD_INT 14
19496: EQUAL
19497: IFFALSE 19507
// sFlag := true ;
19499: LD_ADDR_EXP 91
19503: PUSH
19504: LD_INT 1
19506: ST_TO_ADDR
// if p3 = 15 then
19507: LD_VAR 0 3
19511: PUSH
19512: LD_INT 15
19514: EQUAL
19515: IFFALSE 19525
// sKamikadze := true ;
19517: LD_ADDR_EXP 99
19521: PUSH
19522: LD_INT 1
19524: ST_TO_ADDR
// if p3 = 16 then
19525: LD_VAR 0 3
19529: PUSH
19530: LD_INT 16
19532: EQUAL
19533: IFFALSE 19543
// sTroll := true ;
19535: LD_ADDR_EXP 100
19539: PUSH
19540: LD_INT 1
19542: ST_TO_ADDR
// if p3 = 17 then
19543: LD_VAR 0 3
19547: PUSH
19548: LD_INT 17
19550: EQUAL
19551: IFFALSE 19561
// sSlow := true ;
19553: LD_ADDR_EXP 101
19557: PUSH
19558: LD_INT 1
19560: ST_TO_ADDR
// if p3 = 18 then
19561: LD_VAR 0 3
19565: PUSH
19566: LD_INT 18
19568: EQUAL
19569: IFFALSE 19579
// sLack := true ;
19571: LD_ADDR_EXP 102
19575: PUSH
19576: LD_INT 1
19578: ST_TO_ADDR
// if p3 = 19 then
19579: LD_VAR 0 3
19583: PUSH
19584: LD_INT 19
19586: EQUAL
19587: IFFALSE 19597
// sTank := true ;
19589: LD_ADDR_EXP 104
19593: PUSH
19594: LD_INT 1
19596: ST_TO_ADDR
// if p3 = 20 then
19597: LD_VAR 0 3
19601: PUSH
19602: LD_INT 20
19604: EQUAL
19605: IFFALSE 19615
// sRemote := true ;
19607: LD_ADDR_EXP 105
19611: PUSH
19612: LD_INT 1
19614: ST_TO_ADDR
// if p3 = 21 then
19615: LD_VAR 0 3
19619: PUSH
19620: LD_INT 21
19622: EQUAL
19623: IFFALSE 19633
// sPowell := true ;
19625: LD_ADDR_EXP 106
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// if p3 = 22 then
19633: LD_VAR 0 3
19637: PUSH
19638: LD_INT 22
19640: EQUAL
19641: IFFALSE 19651
// sTeleport := true ;
19643: LD_ADDR_EXP 109
19647: PUSH
19648: LD_INT 1
19650: ST_TO_ADDR
// if p3 = 23 then
19651: LD_VAR 0 3
19655: PUSH
19656: LD_INT 23
19658: EQUAL
19659: IFFALSE 19669
// sOilTower := true ;
19661: LD_ADDR_EXP 111
19665: PUSH
19666: LD_INT 1
19668: ST_TO_ADDR
// if p3 = 24 then
19669: LD_VAR 0 3
19673: PUSH
19674: LD_INT 24
19676: EQUAL
19677: IFFALSE 19687
// sShovel := true ;
19679: LD_ADDR_EXP 112
19683: PUSH
19684: LD_INT 1
19686: ST_TO_ADDR
// if p3 = 25 then
19687: LD_VAR 0 3
19691: PUSH
19692: LD_INT 25
19694: EQUAL
19695: IFFALSE 19705
// sSheik := true ;
19697: LD_ADDR_EXP 113
19701: PUSH
19702: LD_INT 1
19704: ST_TO_ADDR
// if p3 = 26 then
19705: LD_VAR 0 3
19709: PUSH
19710: LD_INT 26
19712: EQUAL
19713: IFFALSE 19723
// sEarthquake := true ;
19715: LD_ADDR_EXP 115
19719: PUSH
19720: LD_INT 1
19722: ST_TO_ADDR
// if p3 = 27 then
19723: LD_VAR 0 3
19727: PUSH
19728: LD_INT 27
19730: EQUAL
19731: IFFALSE 19741
// sAI := true ;
19733: LD_ADDR_EXP 116
19737: PUSH
19738: LD_INT 1
19740: ST_TO_ADDR
// if p3 = 28 then
19741: LD_VAR 0 3
19745: PUSH
19746: LD_INT 28
19748: EQUAL
19749: IFFALSE 19759
// sCargo := true ;
19751: LD_ADDR_EXP 119
19755: PUSH
19756: LD_INT 1
19758: ST_TO_ADDR
// if p3 = 29 then
19759: LD_VAR 0 3
19763: PUSH
19764: LD_INT 29
19766: EQUAL
19767: IFFALSE 19777
// sDLaser := true ;
19769: LD_ADDR_EXP 120
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
// if p3 = 30 then
19777: LD_VAR 0 3
19781: PUSH
19782: LD_INT 30
19784: EQUAL
19785: IFFALSE 19795
// sExchange := true ;
19787: LD_ADDR_EXP 121
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
// if p3 = 31 then
19795: LD_VAR 0 3
19799: PUSH
19800: LD_INT 31
19802: EQUAL
19803: IFFALSE 19813
// sFac := true ;
19805: LD_ADDR_EXP 122
19809: PUSH
19810: LD_INT 1
19812: ST_TO_ADDR
// if p3 = 32 then
19813: LD_VAR 0 3
19817: PUSH
19818: LD_INT 32
19820: EQUAL
19821: IFFALSE 19831
// sPower := true ;
19823: LD_ADDR_EXP 123
19827: PUSH
19828: LD_INT 1
19830: ST_TO_ADDR
// if p3 = 33 then
19831: LD_VAR 0 3
19835: PUSH
19836: LD_INT 33
19838: EQUAL
19839: IFFALSE 19849
// sRandom := true ;
19841: LD_ADDR_EXP 124
19845: PUSH
19846: LD_INT 1
19848: ST_TO_ADDR
// if p3 = 34 then
19849: LD_VAR 0 3
19853: PUSH
19854: LD_INT 34
19856: EQUAL
19857: IFFALSE 19867
// sShield := true ;
19859: LD_ADDR_EXP 125
19863: PUSH
19864: LD_INT 1
19866: ST_TO_ADDR
// if p3 = 35 then
19867: LD_VAR 0 3
19871: PUSH
19872: LD_INT 35
19874: EQUAL
19875: IFFALSE 19885
// sTime := true ;
19877: LD_ADDR_EXP 126
19881: PUSH
19882: LD_INT 1
19884: ST_TO_ADDR
// if p3 = 36 then
19885: LD_VAR 0 3
19889: PUSH
19890: LD_INT 36
19892: EQUAL
19893: IFFALSE 19903
// sTools := true ;
19895: LD_ADDR_EXP 127
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// if p3 = 101 then
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 101
19910: EQUAL
19911: IFFALSE 19921
// sSold := true ;
19913: LD_ADDR_EXP 92
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if p3 = 102 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 102
19928: EQUAL
19929: IFFALSE 19939
// sDiff := true ;
19931: LD_ADDR_EXP 93
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 103 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 103
19946: EQUAL
19947: IFFALSE 19957
// sFog := true ;
19949: LD_ADDR_EXP 96
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 104 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 104
19964: EQUAL
19965: IFFALSE 19975
// sReset := true ;
19967: LD_ADDR_EXP 97
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 105 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 105
19982: EQUAL
19983: IFFALSE 19993
// sSun := true ;
19985: LD_ADDR_EXP 98
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 106 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 106
20000: EQUAL
20001: IFFALSE 20011
// sTiger := true ;
20003: LD_ADDR_EXP 94
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 107 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 107
20018: EQUAL
20019: IFFALSE 20029
// sBomb := true ;
20021: LD_ADDR_EXP 95
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 108 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 108
20036: EQUAL
20037: IFFALSE 20047
// sWound := true ;
20039: LD_ADDR_EXP 103
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 109 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 109
20054: EQUAL
20055: IFFALSE 20065
// sBetray := true ;
20057: LD_ADDR_EXP 107
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 110 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 110
20072: EQUAL
20073: IFFALSE 20083
// sContamin := true ;
20075: LD_ADDR_EXP 108
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 111 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 111
20090: EQUAL
20091: IFFALSE 20101
// sOil := true ;
20093: LD_ADDR_EXP 110
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 112 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 112
20108: EQUAL
20109: IFFALSE 20119
// sStu := true ;
20111: LD_ADDR_EXP 114
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 113 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 113
20126: EQUAL
20127: IFFALSE 20137
// sBazooka := true ;
20129: LD_ADDR_EXP 117
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 114 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 114
20144: EQUAL
20145: IFFALSE 20155
// sMortar := true ;
20147: LD_ADDR_EXP 118
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// if p3 = 115 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 115
20162: EQUAL
20163: IFFALSE 20173
// sRanger := true ;
20165: LD_ADDR_EXP 128
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// if p3 = 116 then
20173: LD_VAR 0 3
20177: PUSH
20178: LD_INT 116
20180: EQUAL
20181: IFFALSE 20191
// sComputer := true ;
20183: LD_ADDR_EXP 129
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// if p3 = 117 then
20191: LD_VAR 0 3
20195: PUSH
20196: LD_INT 117
20198: EQUAL
20199: IFFALSE 20209
// s30 := true ;
20201: LD_ADDR_EXP 130
20205: PUSH
20206: LD_INT 1
20208: ST_TO_ADDR
// if p3 = 118 then
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 118
20216: EQUAL
20217: IFFALSE 20227
// s60 := true ;
20219: LD_ADDR_EXP 131
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
// end ; if p2 = 101 then
20227: LD_VAR 0 2
20231: PUSH
20232: LD_INT 101
20234: EQUAL
20235: IFFALSE 20363
// begin case p3 of 1 :
20237: LD_VAR 0 3
20241: PUSH
20242: LD_INT 1
20244: DOUBLE
20245: EQUAL
20246: IFTRUE 20250
20248: GO 20257
20250: POP
// hHackUnlimitedResources ; 2 :
20251: CALL 32461 0 0
20255: GO 20363
20257: LD_INT 2
20259: DOUBLE
20260: EQUAL
20261: IFTRUE 20265
20263: GO 20272
20265: POP
// hHackSetLevel10 ; 3 :
20266: CALL 32594 0 0
20270: GO 20363
20272: LD_INT 3
20274: DOUBLE
20275: EQUAL
20276: IFTRUE 20280
20278: GO 20287
20280: POP
// hHackSetLevel10YourUnits ; 4 :
20281: CALL 32679 0 0
20285: GO 20363
20287: LD_INT 4
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20302
20295: POP
// hHackInvincible ; 5 :
20296: CALL 33127 0 0
20300: GO 20363
20302: LD_INT 5
20304: DOUBLE
20305: EQUAL
20306: IFTRUE 20310
20308: GO 20317
20310: POP
// hHackInvisible ; 6 :
20311: CALL 33238 0 0
20315: GO 20363
20317: LD_INT 6
20319: DOUBLE
20320: EQUAL
20321: IFTRUE 20325
20323: GO 20332
20325: POP
// hHackChangeYourSide ; 7 :
20326: CALL 33295 0 0
20330: GO 20363
20332: LD_INT 7
20334: DOUBLE
20335: EQUAL
20336: IFTRUE 20340
20338: GO 20347
20340: POP
// hHackChangeUnitSide ; 8 :
20341: CALL 33337 0 0
20345: GO 20363
20347: LD_INT 8
20349: DOUBLE
20350: EQUAL
20351: IFTRUE 20355
20353: GO 20362
20355: POP
// hHackFog ; end ;
20356: CALL 33438 0 0
20360: GO 20363
20362: POP
// end ; end ;
20363: LD_VAR 0 7
20367: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20368: GO 20370
20370: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20371: LD_STRING initStreamRollete();
20373: PPUSH
20374: CALL_OW 559
// InitStreamMode ;
20378: CALL 20390 0 0
// DefineStreamItems ( false ) ;
20382: LD_INT 0
20384: PPUSH
20385: CALL 20854 0 1
// end ;
20389: END
// function InitStreamMode ; begin
20390: LD_INT 0
20392: PPUSH
// streamModeActive := false ;
20393: LD_ADDR_EXP 75
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// normalCounter := 36 ;
20401: LD_ADDR_EXP 76
20405: PUSH
20406: LD_INT 36
20408: ST_TO_ADDR
// hardcoreCounter := 18 ;
20409: LD_ADDR_EXP 77
20413: PUSH
20414: LD_INT 18
20416: ST_TO_ADDR
// sRocket := false ;
20417: LD_ADDR_EXP 80
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sSpeed := false ;
20425: LD_ADDR_EXP 79
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sEngine := false ;
20433: LD_ADDR_EXP 81
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sSpec := false ;
20441: LD_ADDR_EXP 78
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sLevel := false ;
20449: LD_ADDR_EXP 82
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sArmoury := false ;
20457: LD_ADDR_EXP 83
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sRadar := false ;
20465: LD_ADDR_EXP 84
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sBunker := false ;
20473: LD_ADDR_EXP 85
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sHack := false ;
20481: LD_ADDR_EXP 86
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sFire := false ;
20489: LD_ADDR_EXP 87
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sRefresh := false ;
20497: LD_ADDR_EXP 88
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sExp := false ;
20505: LD_ADDR_EXP 89
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sDepot := false ;
20513: LD_ADDR_EXP 90
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sFlag := false ;
20521: LD_ADDR_EXP 91
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sKamikadze := false ;
20529: LD_ADDR_EXP 99
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sTroll := false ;
20537: LD_ADDR_EXP 100
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sSlow := false ;
20545: LD_ADDR_EXP 101
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sLack := false ;
20553: LD_ADDR_EXP 102
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// sTank := false ;
20561: LD_ADDR_EXP 104
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// sRemote := false ;
20569: LD_ADDR_EXP 105
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// sPowell := false ;
20577: LD_ADDR_EXP 106
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// sTeleport := false ;
20585: LD_ADDR_EXP 109
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// sOilTower := false ;
20593: LD_ADDR_EXP 111
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// sShovel := false ;
20601: LD_ADDR_EXP 112
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sSheik := false ;
20609: LD_ADDR_EXP 113
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sEarthquake := false ;
20617: LD_ADDR_EXP 115
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sAI := false ;
20625: LD_ADDR_EXP 116
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sCargo := false ;
20633: LD_ADDR_EXP 119
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sDLaser := false ;
20641: LD_ADDR_EXP 120
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sExchange := false ;
20649: LD_ADDR_EXP 121
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sFac := false ;
20657: LD_ADDR_EXP 122
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sPower := false ;
20665: LD_ADDR_EXP 123
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sRandom := false ;
20673: LD_ADDR_EXP 124
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sShield := false ;
20681: LD_ADDR_EXP 125
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sTime := false ;
20689: LD_ADDR_EXP 126
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sTools := false ;
20697: LD_ADDR_EXP 127
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sSold := false ;
20705: LD_ADDR_EXP 92
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sDiff := false ;
20713: LD_ADDR_EXP 93
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// sFog := false ;
20721: LD_ADDR_EXP 96
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// sReset := false ;
20729: LD_ADDR_EXP 97
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// sSun := false ;
20737: LD_ADDR_EXP 98
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sTiger := false ;
20745: LD_ADDR_EXP 94
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sBomb := false ;
20753: LD_ADDR_EXP 95
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sWound := false ;
20761: LD_ADDR_EXP 103
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sBetray := false ;
20769: LD_ADDR_EXP 107
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sContamin := false ;
20777: LD_ADDR_EXP 108
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sOil := false ;
20785: LD_ADDR_EXP 110
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sStu := false ;
20793: LD_ADDR_EXP 114
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sBazooka := false ;
20801: LD_ADDR_EXP 117
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sMortar := false ;
20809: LD_ADDR_EXP 118
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sRanger := false ;
20817: LD_ADDR_EXP 128
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sComputer := false ;
20825: LD_ADDR_EXP 129
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// s30 := false ;
20833: LD_ADDR_EXP 130
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// s60 := false ;
20841: LD_ADDR_EXP 131
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// end ;
20849: LD_VAR 0 1
20853: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20854: LD_INT 0
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
20860: PPUSH
20861: PPUSH
20862: PPUSH
// result := [ ] ;
20863: LD_ADDR_VAR 0 2
20867: PUSH
20868: EMPTY
20869: ST_TO_ADDR
// if campaign_id = 1 then
20870: LD_OWVAR 69
20874: PUSH
20875: LD_INT 1
20877: EQUAL
20878: IFFALSE 24044
// begin case mission_number of 1 :
20880: LD_OWVAR 70
20884: PUSH
20885: LD_INT 1
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20969
20893: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20894: LD_ADDR_VAR 0 2
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 4
20904: PUSH
20905: LD_INT 11
20907: PUSH
20908: LD_INT 12
20910: PUSH
20911: LD_INT 15
20913: PUSH
20914: LD_INT 16
20916: PUSH
20917: LD_INT 22
20919: PUSH
20920: LD_INT 23
20922: PUSH
20923: LD_INT 26
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 101
20939: PUSH
20940: LD_INT 102
20942: PUSH
20943: LD_INT 106
20945: PUSH
20946: LD_INT 116
20948: PUSH
20949: LD_INT 117
20951: PUSH
20952: LD_INT 118
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: ST_TO_ADDR
20967: GO 24042
20969: LD_INT 2
20971: DOUBLE
20972: EQUAL
20973: IFTRUE 20977
20975: GO 21061
20977: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20978: LD_ADDR_VAR 0 2
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: LD_INT 4
20988: PUSH
20989: LD_INT 11
20991: PUSH
20992: LD_INT 12
20994: PUSH
20995: LD_INT 15
20997: PUSH
20998: LD_INT 16
21000: PUSH
21001: LD_INT 22
21003: PUSH
21004: LD_INT 23
21006: PUSH
21007: LD_INT 26
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 101
21023: PUSH
21024: LD_INT 102
21026: PUSH
21027: LD_INT 105
21029: PUSH
21030: LD_INT 106
21032: PUSH
21033: LD_INT 108
21035: PUSH
21036: LD_INT 116
21038: PUSH
21039: LD_INT 117
21041: PUSH
21042: LD_INT 118
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: ST_TO_ADDR
21059: GO 24042
21061: LD_INT 3
21063: DOUBLE
21064: EQUAL
21065: IFTRUE 21069
21067: GO 21157
21069: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21070: LD_ADDR_VAR 0 2
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: LD_INT 4
21080: PUSH
21081: LD_INT 5
21083: PUSH
21084: LD_INT 11
21086: PUSH
21087: LD_INT 12
21089: PUSH
21090: LD_INT 15
21092: PUSH
21093: LD_INT 16
21095: PUSH
21096: LD_INT 22
21098: PUSH
21099: LD_INT 26
21101: PUSH
21102: LD_INT 36
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 101
21119: PUSH
21120: LD_INT 102
21122: PUSH
21123: LD_INT 105
21125: PUSH
21126: LD_INT 106
21128: PUSH
21129: LD_INT 108
21131: PUSH
21132: LD_INT 116
21134: PUSH
21135: LD_INT 117
21137: PUSH
21138: LD_INT 118
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: ST_TO_ADDR
21155: GO 24042
21157: LD_INT 4
21159: DOUBLE
21160: EQUAL
21161: IFTRUE 21165
21163: GO 21261
21165: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21166: LD_ADDR_VAR 0 2
21170: PUSH
21171: LD_INT 2
21173: PUSH
21174: LD_INT 4
21176: PUSH
21177: LD_INT 5
21179: PUSH
21180: LD_INT 8
21182: PUSH
21183: LD_INT 11
21185: PUSH
21186: LD_INT 12
21188: PUSH
21189: LD_INT 15
21191: PUSH
21192: LD_INT 16
21194: PUSH
21195: LD_INT 22
21197: PUSH
21198: LD_INT 23
21200: PUSH
21201: LD_INT 26
21203: PUSH
21204: LD_INT 36
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 101
21223: PUSH
21224: LD_INT 102
21226: PUSH
21227: LD_INT 105
21229: PUSH
21230: LD_INT 106
21232: PUSH
21233: LD_INT 108
21235: PUSH
21236: LD_INT 116
21238: PUSH
21239: LD_INT 117
21241: PUSH
21242: LD_INT 118
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: ST_TO_ADDR
21259: GO 24042
21261: LD_INT 5
21263: DOUBLE
21264: EQUAL
21265: IFTRUE 21269
21267: GO 21381
21269: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_INT 2
21277: PUSH
21278: LD_INT 4
21280: PUSH
21281: LD_INT 5
21283: PUSH
21284: LD_INT 6
21286: PUSH
21287: LD_INT 8
21289: PUSH
21290: LD_INT 11
21292: PUSH
21293: LD_INT 12
21295: PUSH
21296: LD_INT 15
21298: PUSH
21299: LD_INT 16
21301: PUSH
21302: LD_INT 22
21304: PUSH
21305: LD_INT 23
21307: PUSH
21308: LD_INT 25
21310: PUSH
21311: LD_INT 26
21313: PUSH
21314: LD_INT 36
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 101
21335: PUSH
21336: LD_INT 102
21338: PUSH
21339: LD_INT 105
21341: PUSH
21342: LD_INT 106
21344: PUSH
21345: LD_INT 108
21347: PUSH
21348: LD_INT 109
21350: PUSH
21351: LD_INT 112
21353: PUSH
21354: LD_INT 116
21356: PUSH
21357: LD_INT 117
21359: PUSH
21360: LD_INT 118
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: ST_TO_ADDR
21379: GO 24042
21381: LD_INT 6
21383: DOUBLE
21384: EQUAL
21385: IFTRUE 21389
21387: GO 21521
21389: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21390: LD_ADDR_VAR 0 2
21394: PUSH
21395: LD_INT 2
21397: PUSH
21398: LD_INT 4
21400: PUSH
21401: LD_INT 5
21403: PUSH
21404: LD_INT 6
21406: PUSH
21407: LD_INT 8
21409: PUSH
21410: LD_INT 11
21412: PUSH
21413: LD_INT 12
21415: PUSH
21416: LD_INT 15
21418: PUSH
21419: LD_INT 16
21421: PUSH
21422: LD_INT 20
21424: PUSH
21425: LD_INT 21
21427: PUSH
21428: LD_INT 22
21430: PUSH
21431: LD_INT 23
21433: PUSH
21434: LD_INT 25
21436: PUSH
21437: LD_INT 26
21439: PUSH
21440: LD_INT 30
21442: PUSH
21443: LD_INT 31
21445: PUSH
21446: LD_INT 32
21448: PUSH
21449: LD_INT 36
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 101
21475: PUSH
21476: LD_INT 102
21478: PUSH
21479: LD_INT 105
21481: PUSH
21482: LD_INT 106
21484: PUSH
21485: LD_INT 108
21487: PUSH
21488: LD_INT 109
21490: PUSH
21491: LD_INT 112
21493: PUSH
21494: LD_INT 116
21496: PUSH
21497: LD_INT 117
21499: PUSH
21500: LD_INT 118
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: ST_TO_ADDR
21519: GO 24042
21521: LD_INT 7
21523: DOUBLE
21524: EQUAL
21525: IFTRUE 21529
21527: GO 21641
21529: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21530: LD_ADDR_VAR 0 2
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: LD_INT 4
21540: PUSH
21541: LD_INT 5
21543: PUSH
21544: LD_INT 7
21546: PUSH
21547: LD_INT 11
21549: PUSH
21550: LD_INT 12
21552: PUSH
21553: LD_INT 15
21555: PUSH
21556: LD_INT 16
21558: PUSH
21559: LD_INT 20
21561: PUSH
21562: LD_INT 21
21564: PUSH
21565: LD_INT 22
21567: PUSH
21568: LD_INT 23
21570: PUSH
21571: LD_INT 25
21573: PUSH
21574: LD_INT 26
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 101
21595: PUSH
21596: LD_INT 102
21598: PUSH
21599: LD_INT 103
21601: PUSH
21602: LD_INT 105
21604: PUSH
21605: LD_INT 106
21607: PUSH
21608: LD_INT 108
21610: PUSH
21611: LD_INT 112
21613: PUSH
21614: LD_INT 116
21616: PUSH
21617: LD_INT 117
21619: PUSH
21620: LD_INT 118
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: ST_TO_ADDR
21639: GO 24042
21641: LD_INT 8
21643: DOUBLE
21644: EQUAL
21645: IFTRUE 21649
21647: GO 21789
21649: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: LD_INT 4
21660: PUSH
21661: LD_INT 5
21663: PUSH
21664: LD_INT 6
21666: PUSH
21667: LD_INT 7
21669: PUSH
21670: LD_INT 8
21672: PUSH
21673: LD_INT 11
21675: PUSH
21676: LD_INT 12
21678: PUSH
21679: LD_INT 15
21681: PUSH
21682: LD_INT 16
21684: PUSH
21685: LD_INT 20
21687: PUSH
21688: LD_INT 21
21690: PUSH
21691: LD_INT 22
21693: PUSH
21694: LD_INT 23
21696: PUSH
21697: LD_INT 25
21699: PUSH
21700: LD_INT 26
21702: PUSH
21703: LD_INT 30
21705: PUSH
21706: LD_INT 31
21708: PUSH
21709: LD_INT 32
21711: PUSH
21712: LD_INT 36
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 101
21739: PUSH
21740: LD_INT 102
21742: PUSH
21743: LD_INT 103
21745: PUSH
21746: LD_INT 105
21748: PUSH
21749: LD_INT 106
21751: PUSH
21752: LD_INT 108
21754: PUSH
21755: LD_INT 109
21757: PUSH
21758: LD_INT 112
21760: PUSH
21761: LD_INT 116
21763: PUSH
21764: LD_INT 117
21766: PUSH
21767: LD_INT 118
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: ST_TO_ADDR
21787: GO 24042
21789: LD_INT 9
21791: DOUBLE
21792: EQUAL
21793: IFTRUE 21797
21795: GO 21945
21797: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21798: LD_ADDR_VAR 0 2
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: LD_INT 4
21808: PUSH
21809: LD_INT 5
21811: PUSH
21812: LD_INT 6
21814: PUSH
21815: LD_INT 7
21817: PUSH
21818: LD_INT 8
21820: PUSH
21821: LD_INT 11
21823: PUSH
21824: LD_INT 12
21826: PUSH
21827: LD_INT 15
21829: PUSH
21830: LD_INT 16
21832: PUSH
21833: LD_INT 20
21835: PUSH
21836: LD_INT 21
21838: PUSH
21839: LD_INT 22
21841: PUSH
21842: LD_INT 23
21844: PUSH
21845: LD_INT 25
21847: PUSH
21848: LD_INT 26
21850: PUSH
21851: LD_INT 28
21853: PUSH
21854: LD_INT 30
21856: PUSH
21857: LD_INT 31
21859: PUSH
21860: LD_INT 32
21862: PUSH
21863: LD_INT 36
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 101
21891: PUSH
21892: LD_INT 102
21894: PUSH
21895: LD_INT 103
21897: PUSH
21898: LD_INT 105
21900: PUSH
21901: LD_INT 106
21903: PUSH
21904: LD_INT 108
21906: PUSH
21907: LD_INT 109
21909: PUSH
21910: LD_INT 112
21912: PUSH
21913: LD_INT 114
21915: PUSH
21916: LD_INT 116
21918: PUSH
21919: LD_INT 117
21921: PUSH
21922: LD_INT 118
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: ST_TO_ADDR
21943: GO 24042
21945: LD_INT 10
21947: DOUBLE
21948: EQUAL
21949: IFTRUE 21953
21951: GO 22149
21953: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21954: LD_ADDR_VAR 0 2
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: LD_INT 4
21964: PUSH
21965: LD_INT 5
21967: PUSH
21968: LD_INT 6
21970: PUSH
21971: LD_INT 7
21973: PUSH
21974: LD_INT 8
21976: PUSH
21977: LD_INT 9
21979: PUSH
21980: LD_INT 10
21982: PUSH
21983: LD_INT 11
21985: PUSH
21986: LD_INT 12
21988: PUSH
21989: LD_INT 13
21991: PUSH
21992: LD_INT 14
21994: PUSH
21995: LD_INT 15
21997: PUSH
21998: LD_INT 16
22000: PUSH
22001: LD_INT 17
22003: PUSH
22004: LD_INT 18
22006: PUSH
22007: LD_INT 19
22009: PUSH
22010: LD_INT 20
22012: PUSH
22013: LD_INT 21
22015: PUSH
22016: LD_INT 22
22018: PUSH
22019: LD_INT 23
22021: PUSH
22022: LD_INT 24
22024: PUSH
22025: LD_INT 25
22027: PUSH
22028: LD_INT 26
22030: PUSH
22031: LD_INT 28
22033: PUSH
22034: LD_INT 30
22036: PUSH
22037: LD_INT 31
22039: PUSH
22040: LD_INT 32
22042: PUSH
22043: LD_INT 36
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 101
22079: PUSH
22080: LD_INT 102
22082: PUSH
22083: LD_INT 103
22085: PUSH
22086: LD_INT 104
22088: PUSH
22089: LD_INT 105
22091: PUSH
22092: LD_INT 106
22094: PUSH
22095: LD_INT 107
22097: PUSH
22098: LD_INT 108
22100: PUSH
22101: LD_INT 109
22103: PUSH
22104: LD_INT 110
22106: PUSH
22107: LD_INT 111
22109: PUSH
22110: LD_INT 112
22112: PUSH
22113: LD_INT 114
22115: PUSH
22116: LD_INT 116
22118: PUSH
22119: LD_INT 117
22121: PUSH
22122: LD_INT 118
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: ST_TO_ADDR
22147: GO 24042
22149: LD_INT 11
22151: DOUBLE
22152: EQUAL
22153: IFTRUE 22157
22155: GO 22361
22157: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22158: LD_ADDR_VAR 0 2
22162: PUSH
22163: LD_INT 2
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: LD_INT 4
22171: PUSH
22172: LD_INT 5
22174: PUSH
22175: LD_INT 6
22177: PUSH
22178: LD_INT 7
22180: PUSH
22181: LD_INT 8
22183: PUSH
22184: LD_INT 9
22186: PUSH
22187: LD_INT 10
22189: PUSH
22190: LD_INT 11
22192: PUSH
22193: LD_INT 12
22195: PUSH
22196: LD_INT 13
22198: PUSH
22199: LD_INT 14
22201: PUSH
22202: LD_INT 15
22204: PUSH
22205: LD_INT 16
22207: PUSH
22208: LD_INT 17
22210: PUSH
22211: LD_INT 18
22213: PUSH
22214: LD_INT 19
22216: PUSH
22217: LD_INT 20
22219: PUSH
22220: LD_INT 21
22222: PUSH
22223: LD_INT 22
22225: PUSH
22226: LD_INT 23
22228: PUSH
22229: LD_INT 24
22231: PUSH
22232: LD_INT 25
22234: PUSH
22235: LD_INT 26
22237: PUSH
22238: LD_INT 28
22240: PUSH
22241: LD_INT 30
22243: PUSH
22244: LD_INT 31
22246: PUSH
22247: LD_INT 32
22249: PUSH
22250: LD_INT 34
22252: PUSH
22253: LD_INT 36
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 101
22291: PUSH
22292: LD_INT 102
22294: PUSH
22295: LD_INT 103
22297: PUSH
22298: LD_INT 104
22300: PUSH
22301: LD_INT 105
22303: PUSH
22304: LD_INT 106
22306: PUSH
22307: LD_INT 107
22309: PUSH
22310: LD_INT 108
22312: PUSH
22313: LD_INT 109
22315: PUSH
22316: LD_INT 110
22318: PUSH
22319: LD_INT 111
22321: PUSH
22322: LD_INT 112
22324: PUSH
22325: LD_INT 114
22327: PUSH
22328: LD_INT 116
22330: PUSH
22331: LD_INT 117
22333: PUSH
22334: LD_INT 118
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: ST_TO_ADDR
22359: GO 24042
22361: LD_INT 12
22363: DOUBLE
22364: EQUAL
22365: IFTRUE 22369
22367: GO 22589
22369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22370: LD_ADDR_VAR 0 2
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 3
22383: PUSH
22384: LD_INT 4
22386: PUSH
22387: LD_INT 5
22389: PUSH
22390: LD_INT 6
22392: PUSH
22393: LD_INT 7
22395: PUSH
22396: LD_INT 8
22398: PUSH
22399: LD_INT 9
22401: PUSH
22402: LD_INT 10
22404: PUSH
22405: LD_INT 11
22407: PUSH
22408: LD_INT 12
22410: PUSH
22411: LD_INT 13
22413: PUSH
22414: LD_INT 14
22416: PUSH
22417: LD_INT 15
22419: PUSH
22420: LD_INT 16
22422: PUSH
22423: LD_INT 17
22425: PUSH
22426: LD_INT 18
22428: PUSH
22429: LD_INT 19
22431: PUSH
22432: LD_INT 20
22434: PUSH
22435: LD_INT 21
22437: PUSH
22438: LD_INT 22
22440: PUSH
22441: LD_INT 23
22443: PUSH
22444: LD_INT 24
22446: PUSH
22447: LD_INT 25
22449: PUSH
22450: LD_INT 26
22452: PUSH
22453: LD_INT 27
22455: PUSH
22456: LD_INT 28
22458: PUSH
22459: LD_INT 30
22461: PUSH
22462: LD_INT 31
22464: PUSH
22465: LD_INT 32
22467: PUSH
22468: LD_INT 33
22470: PUSH
22471: LD_INT 34
22473: PUSH
22474: LD_INT 36
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 101
22515: PUSH
22516: LD_INT 102
22518: PUSH
22519: LD_INT 103
22521: PUSH
22522: LD_INT 104
22524: PUSH
22525: LD_INT 105
22527: PUSH
22528: LD_INT 106
22530: PUSH
22531: LD_INT 107
22533: PUSH
22534: LD_INT 108
22536: PUSH
22537: LD_INT 109
22539: PUSH
22540: LD_INT 110
22542: PUSH
22543: LD_INT 111
22545: PUSH
22546: LD_INT 112
22548: PUSH
22549: LD_INT 113
22551: PUSH
22552: LD_INT 114
22554: PUSH
22555: LD_INT 116
22557: PUSH
22558: LD_INT 117
22560: PUSH
22561: LD_INT 118
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: ST_TO_ADDR
22587: GO 24042
22589: LD_INT 13
22591: DOUBLE
22592: EQUAL
22593: IFTRUE 22597
22595: GO 22805
22597: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22598: LD_ADDR_VAR 0 2
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: LD_INT 4
22614: PUSH
22615: LD_INT 5
22617: PUSH
22618: LD_INT 8
22620: PUSH
22621: LD_INT 9
22623: PUSH
22624: LD_INT 10
22626: PUSH
22627: LD_INT 11
22629: PUSH
22630: LD_INT 12
22632: PUSH
22633: LD_INT 14
22635: PUSH
22636: LD_INT 15
22638: PUSH
22639: LD_INT 16
22641: PUSH
22642: LD_INT 17
22644: PUSH
22645: LD_INT 18
22647: PUSH
22648: LD_INT 19
22650: PUSH
22651: LD_INT 20
22653: PUSH
22654: LD_INT 21
22656: PUSH
22657: LD_INT 22
22659: PUSH
22660: LD_INT 23
22662: PUSH
22663: LD_INT 24
22665: PUSH
22666: LD_INT 25
22668: PUSH
22669: LD_INT 26
22671: PUSH
22672: LD_INT 27
22674: PUSH
22675: LD_INT 28
22677: PUSH
22678: LD_INT 30
22680: PUSH
22681: LD_INT 31
22683: PUSH
22684: LD_INT 32
22686: PUSH
22687: LD_INT 33
22689: PUSH
22690: LD_INT 34
22692: PUSH
22693: LD_INT 36
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 101
22731: PUSH
22732: LD_INT 102
22734: PUSH
22735: LD_INT 103
22737: PUSH
22738: LD_INT 104
22740: PUSH
22741: LD_INT 105
22743: PUSH
22744: LD_INT 106
22746: PUSH
22747: LD_INT 107
22749: PUSH
22750: LD_INT 108
22752: PUSH
22753: LD_INT 109
22755: PUSH
22756: LD_INT 110
22758: PUSH
22759: LD_INT 111
22761: PUSH
22762: LD_INT 112
22764: PUSH
22765: LD_INT 113
22767: PUSH
22768: LD_INT 114
22770: PUSH
22771: LD_INT 116
22773: PUSH
22774: LD_INT 117
22776: PUSH
22777: LD_INT 118
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: ST_TO_ADDR
22803: GO 24042
22805: LD_INT 14
22807: DOUBLE
22808: EQUAL
22809: IFTRUE 22813
22811: GO 23037
22813: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22814: LD_ADDR_VAR 0 2
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: LD_INT 2
22824: PUSH
22825: LD_INT 3
22827: PUSH
22828: LD_INT 4
22830: PUSH
22831: LD_INT 5
22833: PUSH
22834: LD_INT 6
22836: PUSH
22837: LD_INT 7
22839: PUSH
22840: LD_INT 8
22842: PUSH
22843: LD_INT 9
22845: PUSH
22846: LD_INT 10
22848: PUSH
22849: LD_INT 11
22851: PUSH
22852: LD_INT 12
22854: PUSH
22855: LD_INT 13
22857: PUSH
22858: LD_INT 14
22860: PUSH
22861: LD_INT 15
22863: PUSH
22864: LD_INT 16
22866: PUSH
22867: LD_INT 17
22869: PUSH
22870: LD_INT 18
22872: PUSH
22873: LD_INT 19
22875: PUSH
22876: LD_INT 20
22878: PUSH
22879: LD_INT 21
22881: PUSH
22882: LD_INT 22
22884: PUSH
22885: LD_INT 23
22887: PUSH
22888: LD_INT 24
22890: PUSH
22891: LD_INT 25
22893: PUSH
22894: LD_INT 26
22896: PUSH
22897: LD_INT 27
22899: PUSH
22900: LD_INT 28
22902: PUSH
22903: LD_INT 29
22905: PUSH
22906: LD_INT 30
22908: PUSH
22909: LD_INT 31
22911: PUSH
22912: LD_INT 32
22914: PUSH
22915: LD_INT 33
22917: PUSH
22918: LD_INT 34
22920: PUSH
22921: LD_INT 36
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 101
22963: PUSH
22964: LD_INT 102
22966: PUSH
22967: LD_INT 103
22969: PUSH
22970: LD_INT 104
22972: PUSH
22973: LD_INT 105
22975: PUSH
22976: LD_INT 106
22978: PUSH
22979: LD_INT 107
22981: PUSH
22982: LD_INT 108
22984: PUSH
22985: LD_INT 109
22987: PUSH
22988: LD_INT 110
22990: PUSH
22991: LD_INT 111
22993: PUSH
22994: LD_INT 112
22996: PUSH
22997: LD_INT 113
22999: PUSH
23000: LD_INT 114
23002: PUSH
23003: LD_INT 116
23005: PUSH
23006: LD_INT 117
23008: PUSH
23009: LD_INT 118
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: ST_TO_ADDR
23035: GO 24042
23037: LD_INT 15
23039: DOUBLE
23040: EQUAL
23041: IFTRUE 23045
23043: GO 23269
23045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23046: LD_ADDR_VAR 0 2
23050: PUSH
23051: LD_INT 1
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: LD_INT 3
23059: PUSH
23060: LD_INT 4
23062: PUSH
23063: LD_INT 5
23065: PUSH
23066: LD_INT 6
23068: PUSH
23069: LD_INT 7
23071: PUSH
23072: LD_INT 8
23074: PUSH
23075: LD_INT 9
23077: PUSH
23078: LD_INT 10
23080: PUSH
23081: LD_INT 11
23083: PUSH
23084: LD_INT 12
23086: PUSH
23087: LD_INT 13
23089: PUSH
23090: LD_INT 14
23092: PUSH
23093: LD_INT 15
23095: PUSH
23096: LD_INT 16
23098: PUSH
23099: LD_INT 17
23101: PUSH
23102: LD_INT 18
23104: PUSH
23105: LD_INT 19
23107: PUSH
23108: LD_INT 20
23110: PUSH
23111: LD_INT 21
23113: PUSH
23114: LD_INT 22
23116: PUSH
23117: LD_INT 23
23119: PUSH
23120: LD_INT 24
23122: PUSH
23123: LD_INT 25
23125: PUSH
23126: LD_INT 26
23128: PUSH
23129: LD_INT 27
23131: PUSH
23132: LD_INT 28
23134: PUSH
23135: LD_INT 29
23137: PUSH
23138: LD_INT 30
23140: PUSH
23141: LD_INT 31
23143: PUSH
23144: LD_INT 32
23146: PUSH
23147: LD_INT 33
23149: PUSH
23150: LD_INT 34
23152: PUSH
23153: LD_INT 36
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 101
23195: PUSH
23196: LD_INT 102
23198: PUSH
23199: LD_INT 103
23201: PUSH
23202: LD_INT 104
23204: PUSH
23205: LD_INT 105
23207: PUSH
23208: LD_INT 106
23210: PUSH
23211: LD_INT 107
23213: PUSH
23214: LD_INT 108
23216: PUSH
23217: LD_INT 109
23219: PUSH
23220: LD_INT 110
23222: PUSH
23223: LD_INT 111
23225: PUSH
23226: LD_INT 112
23228: PUSH
23229: LD_INT 113
23231: PUSH
23232: LD_INT 114
23234: PUSH
23235: LD_INT 116
23237: PUSH
23238: LD_INT 117
23240: PUSH
23241: LD_INT 118
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: ST_TO_ADDR
23267: GO 24042
23269: LD_INT 16
23271: DOUBLE
23272: EQUAL
23273: IFTRUE 23277
23275: GO 23413
23277: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23278: LD_ADDR_VAR 0 2
23282: PUSH
23283: LD_INT 2
23285: PUSH
23286: LD_INT 4
23288: PUSH
23289: LD_INT 5
23291: PUSH
23292: LD_INT 7
23294: PUSH
23295: LD_INT 11
23297: PUSH
23298: LD_INT 12
23300: PUSH
23301: LD_INT 15
23303: PUSH
23304: LD_INT 16
23306: PUSH
23307: LD_INT 20
23309: PUSH
23310: LD_INT 21
23312: PUSH
23313: LD_INT 22
23315: PUSH
23316: LD_INT 23
23318: PUSH
23319: LD_INT 25
23321: PUSH
23322: LD_INT 26
23324: PUSH
23325: LD_INT 30
23327: PUSH
23328: LD_INT 31
23330: PUSH
23331: LD_INT 32
23333: PUSH
23334: LD_INT 33
23336: PUSH
23337: LD_INT 34
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 101
23363: PUSH
23364: LD_INT 102
23366: PUSH
23367: LD_INT 103
23369: PUSH
23370: LD_INT 106
23372: PUSH
23373: LD_INT 108
23375: PUSH
23376: LD_INT 112
23378: PUSH
23379: LD_INT 113
23381: PUSH
23382: LD_INT 114
23384: PUSH
23385: LD_INT 116
23387: PUSH
23388: LD_INT 117
23390: PUSH
23391: LD_INT 118
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: ST_TO_ADDR
23411: GO 24042
23413: LD_INT 17
23415: DOUBLE
23416: EQUAL
23417: IFTRUE 23421
23419: GO 23645
23421: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23422: LD_ADDR_VAR 0 2
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: LD_INT 3
23435: PUSH
23436: LD_INT 4
23438: PUSH
23439: LD_INT 5
23441: PUSH
23442: LD_INT 6
23444: PUSH
23445: LD_INT 7
23447: PUSH
23448: LD_INT 8
23450: PUSH
23451: LD_INT 9
23453: PUSH
23454: LD_INT 10
23456: PUSH
23457: LD_INT 11
23459: PUSH
23460: LD_INT 12
23462: PUSH
23463: LD_INT 13
23465: PUSH
23466: LD_INT 14
23468: PUSH
23469: LD_INT 15
23471: PUSH
23472: LD_INT 16
23474: PUSH
23475: LD_INT 17
23477: PUSH
23478: LD_INT 18
23480: PUSH
23481: LD_INT 19
23483: PUSH
23484: LD_INT 20
23486: PUSH
23487: LD_INT 21
23489: PUSH
23490: LD_INT 22
23492: PUSH
23493: LD_INT 23
23495: PUSH
23496: LD_INT 24
23498: PUSH
23499: LD_INT 25
23501: PUSH
23502: LD_INT 26
23504: PUSH
23505: LD_INT 27
23507: PUSH
23508: LD_INT 28
23510: PUSH
23511: LD_INT 29
23513: PUSH
23514: LD_INT 30
23516: PUSH
23517: LD_INT 31
23519: PUSH
23520: LD_INT 32
23522: PUSH
23523: LD_INT 33
23525: PUSH
23526: LD_INT 34
23528: PUSH
23529: LD_INT 36
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 101
23571: PUSH
23572: LD_INT 102
23574: PUSH
23575: LD_INT 103
23577: PUSH
23578: LD_INT 104
23580: PUSH
23581: LD_INT 105
23583: PUSH
23584: LD_INT 106
23586: PUSH
23587: LD_INT 107
23589: PUSH
23590: LD_INT 108
23592: PUSH
23593: LD_INT 109
23595: PUSH
23596: LD_INT 110
23598: PUSH
23599: LD_INT 111
23601: PUSH
23602: LD_INT 112
23604: PUSH
23605: LD_INT 113
23607: PUSH
23608: LD_INT 114
23610: PUSH
23611: LD_INT 116
23613: PUSH
23614: LD_INT 117
23616: PUSH
23617: LD_INT 118
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: ST_TO_ADDR
23643: GO 24042
23645: LD_INT 18
23647: DOUBLE
23648: EQUAL
23649: IFTRUE 23653
23651: GO 23801
23653: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23654: LD_ADDR_VAR 0 2
23658: PUSH
23659: LD_INT 2
23661: PUSH
23662: LD_INT 4
23664: PUSH
23665: LD_INT 5
23667: PUSH
23668: LD_INT 7
23670: PUSH
23671: LD_INT 11
23673: PUSH
23674: LD_INT 12
23676: PUSH
23677: LD_INT 15
23679: PUSH
23680: LD_INT 16
23682: PUSH
23683: LD_INT 20
23685: PUSH
23686: LD_INT 21
23688: PUSH
23689: LD_INT 22
23691: PUSH
23692: LD_INT 23
23694: PUSH
23695: LD_INT 25
23697: PUSH
23698: LD_INT 26
23700: PUSH
23701: LD_INT 30
23703: PUSH
23704: LD_INT 31
23706: PUSH
23707: LD_INT 32
23709: PUSH
23710: LD_INT 33
23712: PUSH
23713: LD_INT 34
23715: PUSH
23716: LD_INT 35
23718: PUSH
23719: LD_INT 36
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 101
23747: PUSH
23748: LD_INT 102
23750: PUSH
23751: LD_INT 103
23753: PUSH
23754: LD_INT 106
23756: PUSH
23757: LD_INT 108
23759: PUSH
23760: LD_INT 112
23762: PUSH
23763: LD_INT 113
23765: PUSH
23766: LD_INT 114
23768: PUSH
23769: LD_INT 115
23771: PUSH
23772: LD_INT 116
23774: PUSH
23775: LD_INT 117
23777: PUSH
23778: LD_INT 118
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: ST_TO_ADDR
23799: GO 24042
23801: LD_INT 19
23803: DOUBLE
23804: EQUAL
23805: IFTRUE 23809
23807: GO 24041
23809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23810: LD_ADDR_VAR 0 2
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: LD_INT 3
23823: PUSH
23824: LD_INT 4
23826: PUSH
23827: LD_INT 5
23829: PUSH
23830: LD_INT 6
23832: PUSH
23833: LD_INT 7
23835: PUSH
23836: LD_INT 8
23838: PUSH
23839: LD_INT 9
23841: PUSH
23842: LD_INT 10
23844: PUSH
23845: LD_INT 11
23847: PUSH
23848: LD_INT 12
23850: PUSH
23851: LD_INT 13
23853: PUSH
23854: LD_INT 14
23856: PUSH
23857: LD_INT 15
23859: PUSH
23860: LD_INT 16
23862: PUSH
23863: LD_INT 17
23865: PUSH
23866: LD_INT 18
23868: PUSH
23869: LD_INT 19
23871: PUSH
23872: LD_INT 20
23874: PUSH
23875: LD_INT 21
23877: PUSH
23878: LD_INT 22
23880: PUSH
23881: LD_INT 23
23883: PUSH
23884: LD_INT 24
23886: PUSH
23887: LD_INT 25
23889: PUSH
23890: LD_INT 26
23892: PUSH
23893: LD_INT 27
23895: PUSH
23896: LD_INT 28
23898: PUSH
23899: LD_INT 29
23901: PUSH
23902: LD_INT 30
23904: PUSH
23905: LD_INT 31
23907: PUSH
23908: LD_INT 32
23910: PUSH
23911: LD_INT 33
23913: PUSH
23914: LD_INT 34
23916: PUSH
23917: LD_INT 35
23919: PUSH
23920: LD_INT 36
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 101
23963: PUSH
23964: LD_INT 102
23966: PUSH
23967: LD_INT 103
23969: PUSH
23970: LD_INT 104
23972: PUSH
23973: LD_INT 105
23975: PUSH
23976: LD_INT 106
23978: PUSH
23979: LD_INT 107
23981: PUSH
23982: LD_INT 108
23984: PUSH
23985: LD_INT 109
23987: PUSH
23988: LD_INT 110
23990: PUSH
23991: LD_INT 111
23993: PUSH
23994: LD_INT 112
23996: PUSH
23997: LD_INT 113
23999: PUSH
24000: LD_INT 114
24002: PUSH
24003: LD_INT 115
24005: PUSH
24006: LD_INT 116
24008: PUSH
24009: LD_INT 117
24011: PUSH
24012: LD_INT 118
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: ST_TO_ADDR
24039: GO 24042
24041: POP
// end else
24042: GO 24273
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24044: LD_ADDR_VAR 0 2
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: LD_INT 2
24054: PUSH
24055: LD_INT 3
24057: PUSH
24058: LD_INT 4
24060: PUSH
24061: LD_INT 5
24063: PUSH
24064: LD_INT 6
24066: PUSH
24067: LD_INT 7
24069: PUSH
24070: LD_INT 8
24072: PUSH
24073: LD_INT 9
24075: PUSH
24076: LD_INT 10
24078: PUSH
24079: LD_INT 11
24081: PUSH
24082: LD_INT 12
24084: PUSH
24085: LD_INT 13
24087: PUSH
24088: LD_INT 14
24090: PUSH
24091: LD_INT 15
24093: PUSH
24094: LD_INT 16
24096: PUSH
24097: LD_INT 17
24099: PUSH
24100: LD_INT 18
24102: PUSH
24103: LD_INT 19
24105: PUSH
24106: LD_INT 20
24108: PUSH
24109: LD_INT 21
24111: PUSH
24112: LD_INT 22
24114: PUSH
24115: LD_INT 23
24117: PUSH
24118: LD_INT 24
24120: PUSH
24121: LD_INT 25
24123: PUSH
24124: LD_INT 26
24126: PUSH
24127: LD_INT 27
24129: PUSH
24130: LD_INT 28
24132: PUSH
24133: LD_INT 29
24135: PUSH
24136: LD_INT 30
24138: PUSH
24139: LD_INT 31
24141: PUSH
24142: LD_INT 32
24144: PUSH
24145: LD_INT 33
24147: PUSH
24148: LD_INT 34
24150: PUSH
24151: LD_INT 35
24153: PUSH
24154: LD_INT 36
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 101
24197: PUSH
24198: LD_INT 102
24200: PUSH
24201: LD_INT 103
24203: PUSH
24204: LD_INT 104
24206: PUSH
24207: LD_INT 105
24209: PUSH
24210: LD_INT 106
24212: PUSH
24213: LD_INT 107
24215: PUSH
24216: LD_INT 108
24218: PUSH
24219: LD_INT 109
24221: PUSH
24222: LD_INT 110
24224: PUSH
24225: LD_INT 111
24227: PUSH
24228: LD_INT 112
24230: PUSH
24231: LD_INT 113
24233: PUSH
24234: LD_INT 114
24236: PUSH
24237: LD_INT 115
24239: PUSH
24240: LD_INT 116
24242: PUSH
24243: LD_INT 117
24245: PUSH
24246: LD_INT 118
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: ST_TO_ADDR
// if result then
24273: LD_VAR 0 2
24277: IFFALSE 25063
// begin normal :=  ;
24279: LD_ADDR_VAR 0 5
24283: PUSH
24284: LD_STRING 
24286: ST_TO_ADDR
// hardcore :=  ;
24287: LD_ADDR_VAR 0 6
24291: PUSH
24292: LD_STRING 
24294: ST_TO_ADDR
// active :=  ;
24295: LD_ADDR_VAR 0 7
24299: PUSH
24300: LD_STRING 
24302: ST_TO_ADDR
// for i = 1 to normalCounter do
24303: LD_ADDR_VAR 0 8
24307: PUSH
24308: DOUBLE
24309: LD_INT 1
24311: DEC
24312: ST_TO_ADDR
24313: LD_EXP 76
24317: PUSH
24318: FOR_TO
24319: IFFALSE 24420
// begin tmp := 0 ;
24321: LD_ADDR_VAR 0 3
24325: PUSH
24326: LD_STRING 0
24328: ST_TO_ADDR
// if result [ 1 ] then
24329: LD_VAR 0 2
24333: PUSH
24334: LD_INT 1
24336: ARRAY
24337: IFFALSE 24402
// if result [ 1 ] [ 1 ] = i then
24339: LD_VAR 0 2
24343: PUSH
24344: LD_INT 1
24346: ARRAY
24347: PUSH
24348: LD_INT 1
24350: ARRAY
24351: PUSH
24352: LD_VAR 0 8
24356: EQUAL
24357: IFFALSE 24402
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24359: LD_ADDR_VAR 0 2
24363: PUSH
24364: LD_VAR 0 2
24368: PPUSH
24369: LD_INT 1
24371: PPUSH
24372: LD_VAR 0 2
24376: PUSH
24377: LD_INT 1
24379: ARRAY
24380: PPUSH
24381: LD_INT 1
24383: PPUSH
24384: CALL_OW 3
24388: PPUSH
24389: CALL_OW 1
24393: ST_TO_ADDR
// tmp := 1 ;
24394: LD_ADDR_VAR 0 3
24398: PUSH
24399: LD_STRING 1
24401: ST_TO_ADDR
// end ; normal := normal & tmp ;
24402: LD_ADDR_VAR 0 5
24406: PUSH
24407: LD_VAR 0 5
24411: PUSH
24412: LD_VAR 0 3
24416: STR
24417: ST_TO_ADDR
// end ;
24418: GO 24318
24420: POP
24421: POP
// for i = 1 to hardcoreCounter do
24422: LD_ADDR_VAR 0 8
24426: PUSH
24427: DOUBLE
24428: LD_INT 1
24430: DEC
24431: ST_TO_ADDR
24432: LD_EXP 77
24436: PUSH
24437: FOR_TO
24438: IFFALSE 24543
// begin tmp := 0 ;
24440: LD_ADDR_VAR 0 3
24444: PUSH
24445: LD_STRING 0
24447: ST_TO_ADDR
// if result [ 2 ] then
24448: LD_VAR 0 2
24452: PUSH
24453: LD_INT 2
24455: ARRAY
24456: IFFALSE 24525
// if result [ 2 ] [ 1 ] = 100 + i then
24458: LD_VAR 0 2
24462: PUSH
24463: LD_INT 2
24465: ARRAY
24466: PUSH
24467: LD_INT 1
24469: ARRAY
24470: PUSH
24471: LD_INT 100
24473: PUSH
24474: LD_VAR 0 8
24478: PLUS
24479: EQUAL
24480: IFFALSE 24525
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24482: LD_ADDR_VAR 0 2
24486: PUSH
24487: LD_VAR 0 2
24491: PPUSH
24492: LD_INT 2
24494: PPUSH
24495: LD_VAR 0 2
24499: PUSH
24500: LD_INT 2
24502: ARRAY
24503: PPUSH
24504: LD_INT 1
24506: PPUSH
24507: CALL_OW 3
24511: PPUSH
24512: CALL_OW 1
24516: ST_TO_ADDR
// tmp := 1 ;
24517: LD_ADDR_VAR 0 3
24521: PUSH
24522: LD_STRING 1
24524: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24525: LD_ADDR_VAR 0 6
24529: PUSH
24530: LD_VAR 0 6
24534: PUSH
24535: LD_VAR 0 3
24539: STR
24540: ST_TO_ADDR
// end ;
24541: GO 24437
24543: POP
24544: POP
// if isGameLoad then
24545: LD_VAR 0 1
24549: IFFALSE 25024
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24551: LD_ADDR_VAR 0 4
24555: PUSH
24556: LD_EXP 80
24560: PUSH
24561: LD_EXP 79
24565: PUSH
24566: LD_EXP 81
24570: PUSH
24571: LD_EXP 78
24575: PUSH
24576: LD_EXP 82
24580: PUSH
24581: LD_EXP 83
24585: PUSH
24586: LD_EXP 84
24590: PUSH
24591: LD_EXP 85
24595: PUSH
24596: LD_EXP 86
24600: PUSH
24601: LD_EXP 87
24605: PUSH
24606: LD_EXP 88
24610: PUSH
24611: LD_EXP 89
24615: PUSH
24616: LD_EXP 90
24620: PUSH
24621: LD_EXP 91
24625: PUSH
24626: LD_EXP 99
24630: PUSH
24631: LD_EXP 100
24635: PUSH
24636: LD_EXP 101
24640: PUSH
24641: LD_EXP 102
24645: PUSH
24646: LD_EXP 104
24650: PUSH
24651: LD_EXP 105
24655: PUSH
24656: LD_EXP 106
24660: PUSH
24661: LD_EXP 109
24665: PUSH
24666: LD_EXP 111
24670: PUSH
24671: LD_EXP 112
24675: PUSH
24676: LD_EXP 113
24680: PUSH
24681: LD_EXP 115
24685: PUSH
24686: LD_EXP 116
24690: PUSH
24691: LD_EXP 119
24695: PUSH
24696: LD_EXP 120
24700: PUSH
24701: LD_EXP 121
24705: PUSH
24706: LD_EXP 122
24710: PUSH
24711: LD_EXP 123
24715: PUSH
24716: LD_EXP 124
24720: PUSH
24721: LD_EXP 125
24725: PUSH
24726: LD_EXP 126
24730: PUSH
24731: LD_EXP 127
24735: PUSH
24736: LD_EXP 92
24740: PUSH
24741: LD_EXP 93
24745: PUSH
24746: LD_EXP 96
24750: PUSH
24751: LD_EXP 97
24755: PUSH
24756: LD_EXP 98
24760: PUSH
24761: LD_EXP 94
24765: PUSH
24766: LD_EXP 95
24770: PUSH
24771: LD_EXP 103
24775: PUSH
24776: LD_EXP 107
24780: PUSH
24781: LD_EXP 108
24785: PUSH
24786: LD_EXP 110
24790: PUSH
24791: LD_EXP 114
24795: PUSH
24796: LD_EXP 117
24800: PUSH
24801: LD_EXP 118
24805: PUSH
24806: LD_EXP 128
24810: PUSH
24811: LD_EXP 129
24815: PUSH
24816: LD_EXP 130
24820: PUSH
24821: LD_EXP 131
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: ST_TO_ADDR
// tmp :=  ;
24882: LD_ADDR_VAR 0 3
24886: PUSH
24887: LD_STRING 
24889: ST_TO_ADDR
// for i = 1 to normalCounter do
24890: LD_ADDR_VAR 0 8
24894: PUSH
24895: DOUBLE
24896: LD_INT 1
24898: DEC
24899: ST_TO_ADDR
24900: LD_EXP 76
24904: PUSH
24905: FOR_TO
24906: IFFALSE 24942
// begin if flags [ i ] then
24908: LD_VAR 0 4
24912: PUSH
24913: LD_VAR 0 8
24917: ARRAY
24918: IFFALSE 24940
// tmp := tmp & i & ; ;
24920: LD_ADDR_VAR 0 3
24924: PUSH
24925: LD_VAR 0 3
24929: PUSH
24930: LD_VAR 0 8
24934: STR
24935: PUSH
24936: LD_STRING ;
24938: STR
24939: ST_TO_ADDR
// end ;
24940: GO 24905
24942: POP
24943: POP
// for i = 1 to hardcoreCounter do
24944: LD_ADDR_VAR 0 8
24948: PUSH
24949: DOUBLE
24950: LD_INT 1
24952: DEC
24953: ST_TO_ADDR
24954: LD_EXP 77
24958: PUSH
24959: FOR_TO
24960: IFFALSE 25006
// begin if flags [ normalCounter + i ] then
24962: LD_VAR 0 4
24966: PUSH
24967: LD_EXP 76
24971: PUSH
24972: LD_VAR 0 8
24976: PLUS
24977: ARRAY
24978: IFFALSE 25004
// tmp := tmp & ( 100 + i ) & ; ;
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: LD_VAR 0 3
24989: PUSH
24990: LD_INT 100
24992: PUSH
24993: LD_VAR 0 8
24997: PLUS
24998: STR
24999: PUSH
25000: LD_STRING ;
25002: STR
25003: ST_TO_ADDR
// end ;
25004: GO 24959
25006: POP
25007: POP
// if tmp then
25008: LD_VAR 0 3
25012: IFFALSE 25024
// active := tmp ;
25014: LD_ADDR_VAR 0 7
25018: PUSH
25019: LD_VAR 0 3
25023: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25024: LD_STRING getStreamItemsFromMission("
25026: PUSH
25027: LD_VAR 0 5
25031: STR
25032: PUSH
25033: LD_STRING ","
25035: STR
25036: PUSH
25037: LD_VAR 0 6
25041: STR
25042: PUSH
25043: LD_STRING ","
25045: STR
25046: PUSH
25047: LD_VAR 0 7
25051: STR
25052: PUSH
25053: LD_STRING ")
25055: STR
25056: PPUSH
25057: CALL_OW 559
// end else
25061: GO 25070
// ToLua ( getStreamItemsFromMission("","","") ) ;
25063: LD_STRING getStreamItemsFromMission("","","")
25065: PPUSH
25066: CALL_OW 559
// end ;
25070: LD_VAR 0 2
25074: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25075: LD_EXP 75
25079: PUSH
25080: LD_EXP 80
25084: AND
25085: IFFALSE 25209
25087: GO 25089
25089: DISABLE
25090: LD_INT 0
25092: PPUSH
25093: PPUSH
// begin enable ;
25094: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25095: LD_ADDR_VAR 0 2
25099: PUSH
25100: LD_INT 22
25102: PUSH
25103: LD_OWVAR 2
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 2
25114: PUSH
25115: LD_INT 34
25117: PUSH
25118: LD_INT 7
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 34
25127: PUSH
25128: LD_INT 45
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 34
25137: PUSH
25138: LD_INT 28
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 34
25147: PUSH
25148: LD_INT 47
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PPUSH
25166: CALL_OW 69
25170: ST_TO_ADDR
// if not tmp then
25171: LD_VAR 0 2
25175: NOT
25176: IFFALSE 25180
// exit ;
25178: GO 25209
// for i in tmp do
25180: LD_ADDR_VAR 0 1
25184: PUSH
25185: LD_VAR 0 2
25189: PUSH
25190: FOR_IN
25191: IFFALSE 25207
// begin SetLives ( i , 0 ) ;
25193: LD_VAR 0 1
25197: PPUSH
25198: LD_INT 0
25200: PPUSH
25201: CALL_OW 234
// end ;
25205: GO 25190
25207: POP
25208: POP
// end ;
25209: PPOPN 2
25211: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25212: LD_EXP 75
25216: PUSH
25217: LD_EXP 81
25221: AND
25222: IFFALSE 25306
25224: GO 25226
25226: DISABLE
25227: LD_INT 0
25229: PPUSH
25230: PPUSH
// begin enable ;
25231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25232: LD_ADDR_VAR 0 2
25236: PUSH
25237: LD_INT 22
25239: PUSH
25240: LD_OWVAR 2
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 32
25251: PUSH
25252: LD_INT 3
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PPUSH
25263: CALL_OW 69
25267: ST_TO_ADDR
// if not tmp then
25268: LD_VAR 0 2
25272: NOT
25273: IFFALSE 25277
// exit ;
25275: GO 25306
// for i in tmp do
25277: LD_ADDR_VAR 0 1
25281: PUSH
25282: LD_VAR 0 2
25286: PUSH
25287: FOR_IN
25288: IFFALSE 25304
// begin SetLives ( i , 0 ) ;
25290: LD_VAR 0 1
25294: PPUSH
25295: LD_INT 0
25297: PPUSH
25298: CALL_OW 234
// end ;
25302: GO 25287
25304: POP
25305: POP
// end ;
25306: PPOPN 2
25308: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25309: LD_EXP 75
25313: PUSH
25314: LD_EXP 78
25318: AND
25319: IFFALSE 25412
25321: GO 25323
25323: DISABLE
25324: LD_INT 0
25326: PPUSH
// begin enable ;
25327: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25328: LD_ADDR_VAR 0 1
25332: PUSH
25333: LD_INT 22
25335: PUSH
25336: LD_OWVAR 2
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 2
25347: PUSH
25348: LD_INT 25
25350: PUSH
25351: LD_INT 5
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 25
25360: PUSH
25361: LD_INT 9
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 25
25370: PUSH
25371: LD_INT 8
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PPUSH
25388: CALL_OW 69
25392: PUSH
25393: FOR_IN
25394: IFFALSE 25410
// begin SetClass ( i , 1 ) ;
25396: LD_VAR 0 1
25400: PPUSH
25401: LD_INT 1
25403: PPUSH
25404: CALL_OW 336
// end ;
25408: GO 25393
25410: POP
25411: POP
// end ;
25412: PPOPN 1
25414: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25415: LD_EXP 75
25419: PUSH
25420: LD_EXP 79
25424: AND
25425: PUSH
25426: LD_OWVAR 65
25430: PUSH
25431: LD_INT 7
25433: LESS
25434: AND
25435: IFFALSE 25449
25437: GO 25439
25439: DISABLE
// begin enable ;
25440: ENABLE
// game_speed := 7 ;
25441: LD_ADDR_OWVAR 65
25445: PUSH
25446: LD_INT 7
25448: ST_TO_ADDR
// end ;
25449: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25450: LD_EXP 75
25454: PUSH
25455: LD_EXP 82
25459: AND
25460: IFFALSE 25662
25462: GO 25464
25464: DISABLE
25465: LD_INT 0
25467: PPUSH
25468: PPUSH
25469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25470: LD_ADDR_VAR 0 3
25474: PUSH
25475: LD_INT 81
25477: PUSH
25478: LD_OWVAR 2
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 21
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PPUSH
25501: CALL_OW 69
25505: ST_TO_ADDR
// if not tmp then
25506: LD_VAR 0 3
25510: NOT
25511: IFFALSE 25515
// exit ;
25513: GO 25662
// if tmp > 5 then
25515: LD_VAR 0 3
25519: PUSH
25520: LD_INT 5
25522: GREATER
25523: IFFALSE 25535
// k := 5 else
25525: LD_ADDR_VAR 0 2
25529: PUSH
25530: LD_INT 5
25532: ST_TO_ADDR
25533: GO 25545
// k := tmp ;
25535: LD_ADDR_VAR 0 2
25539: PUSH
25540: LD_VAR 0 3
25544: ST_TO_ADDR
// for i := 1 to k do
25545: LD_ADDR_VAR 0 1
25549: PUSH
25550: DOUBLE
25551: LD_INT 1
25553: DEC
25554: ST_TO_ADDR
25555: LD_VAR 0 2
25559: PUSH
25560: FOR_TO
25561: IFFALSE 25660
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25563: LD_VAR 0 3
25567: PUSH
25568: LD_VAR 0 1
25572: ARRAY
25573: PPUSH
25574: LD_VAR 0 1
25578: PUSH
25579: LD_INT 4
25581: MOD
25582: PUSH
25583: LD_INT 1
25585: PLUS
25586: PPUSH
25587: CALL_OW 259
25591: PUSH
25592: LD_INT 10
25594: LESS
25595: IFFALSE 25658
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25597: LD_VAR 0 3
25601: PUSH
25602: LD_VAR 0 1
25606: ARRAY
25607: PPUSH
25608: LD_VAR 0 1
25612: PUSH
25613: LD_INT 4
25615: MOD
25616: PUSH
25617: LD_INT 1
25619: PLUS
25620: PPUSH
25621: LD_VAR 0 3
25625: PUSH
25626: LD_VAR 0 1
25630: ARRAY
25631: PPUSH
25632: LD_VAR 0 1
25636: PUSH
25637: LD_INT 4
25639: MOD
25640: PUSH
25641: LD_INT 1
25643: PLUS
25644: PPUSH
25645: CALL_OW 259
25649: PUSH
25650: LD_INT 1
25652: PLUS
25653: PPUSH
25654: CALL_OW 237
25658: GO 25560
25660: POP
25661: POP
// end ;
25662: PPOPN 3
25664: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25665: LD_EXP 75
25669: PUSH
25670: LD_EXP 83
25674: AND
25675: IFFALSE 25695
25677: GO 25679
25679: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25680: LD_INT 4
25682: PPUSH
25683: LD_OWVAR 2
25687: PPUSH
25688: LD_INT 0
25690: PPUSH
25691: CALL_OW 324
25695: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25696: LD_EXP 75
25700: PUSH
25701: LD_EXP 112
25705: AND
25706: IFFALSE 25726
25708: GO 25710
25710: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25711: LD_INT 19
25713: PPUSH
25714: LD_OWVAR 2
25718: PPUSH
25719: LD_INT 0
25721: PPUSH
25722: CALL_OW 324
25726: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25727: LD_EXP 75
25731: PUSH
25732: LD_EXP 84
25736: AND
25737: IFFALSE 25839
25739: GO 25741
25741: DISABLE
25742: LD_INT 0
25744: PPUSH
25745: PPUSH
// begin enable ;
25746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25747: LD_ADDR_VAR 0 2
25751: PUSH
25752: LD_INT 22
25754: PUSH
25755: LD_OWVAR 2
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: LD_INT 34
25769: PUSH
25770: LD_INT 11
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 34
25779: PUSH
25780: LD_INT 30
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PPUSH
25796: CALL_OW 69
25800: ST_TO_ADDR
// if not tmp then
25801: LD_VAR 0 2
25805: NOT
25806: IFFALSE 25810
// exit ;
25808: GO 25839
// for i in tmp do
25810: LD_ADDR_VAR 0 1
25814: PUSH
25815: LD_VAR 0 2
25819: PUSH
25820: FOR_IN
25821: IFFALSE 25837
// begin SetLives ( i , 0 ) ;
25823: LD_VAR 0 1
25827: PPUSH
25828: LD_INT 0
25830: PPUSH
25831: CALL_OW 234
// end ;
25835: GO 25820
25837: POP
25838: POP
// end ;
25839: PPOPN 2
25841: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25842: LD_EXP 75
25846: PUSH
25847: LD_EXP 85
25851: AND
25852: IFFALSE 25872
25854: GO 25856
25856: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25857: LD_INT 32
25859: PPUSH
25860: LD_OWVAR 2
25864: PPUSH
25865: LD_INT 0
25867: PPUSH
25868: CALL_OW 324
25872: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25873: LD_EXP 75
25877: PUSH
25878: LD_EXP 86
25882: AND
25883: IFFALSE 26064
25885: GO 25887
25887: DISABLE
25888: LD_INT 0
25890: PPUSH
25891: PPUSH
25892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25893: LD_ADDR_VAR 0 2
25897: PUSH
25898: LD_INT 22
25900: PUSH
25901: LD_OWVAR 2
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 33
25912: PUSH
25913: LD_INT 3
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PPUSH
25924: CALL_OW 69
25928: ST_TO_ADDR
// if not tmp then
25929: LD_VAR 0 2
25933: NOT
25934: IFFALSE 25938
// exit ;
25936: GO 26064
// side := 0 ;
25938: LD_ADDR_VAR 0 3
25942: PUSH
25943: LD_INT 0
25945: ST_TO_ADDR
// for i := 1 to 8 do
25946: LD_ADDR_VAR 0 1
25950: PUSH
25951: DOUBLE
25952: LD_INT 1
25954: DEC
25955: ST_TO_ADDR
25956: LD_INT 8
25958: PUSH
25959: FOR_TO
25960: IFFALSE 26008
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25962: LD_OWVAR 2
25966: PUSH
25967: LD_VAR 0 1
25971: NONEQUAL
25972: PUSH
25973: LD_OWVAR 2
25977: PPUSH
25978: LD_VAR 0 1
25982: PPUSH
25983: CALL_OW 81
25987: PUSH
25988: LD_INT 2
25990: EQUAL
25991: AND
25992: IFFALSE 26006
// begin side := i ;
25994: LD_ADDR_VAR 0 3
25998: PUSH
25999: LD_VAR 0 1
26003: ST_TO_ADDR
// break ;
26004: GO 26008
// end ;
26006: GO 25959
26008: POP
26009: POP
// if not side then
26010: LD_VAR 0 3
26014: NOT
26015: IFFALSE 26019
// exit ;
26017: GO 26064
// for i := 1 to tmp do
26019: LD_ADDR_VAR 0 1
26023: PUSH
26024: DOUBLE
26025: LD_INT 1
26027: DEC
26028: ST_TO_ADDR
26029: LD_VAR 0 2
26033: PUSH
26034: FOR_TO
26035: IFFALSE 26062
// if Prob ( 60 ) then
26037: LD_INT 60
26039: PPUSH
26040: CALL_OW 13
26044: IFFALSE 26060
// SetSide ( i , side ) ;
26046: LD_VAR 0 1
26050: PPUSH
26051: LD_VAR 0 3
26055: PPUSH
26056: CALL_OW 235
26060: GO 26034
26062: POP
26063: POP
// end ;
26064: PPOPN 3
26066: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26067: LD_EXP 75
26071: PUSH
26072: LD_EXP 88
26076: AND
26077: IFFALSE 26196
26079: GO 26081
26081: DISABLE
26082: LD_INT 0
26084: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26085: LD_ADDR_VAR 0 1
26089: PUSH
26090: LD_INT 22
26092: PUSH
26093: LD_OWVAR 2
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 21
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 3
26114: PUSH
26115: LD_INT 23
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: PPUSH
26134: CALL_OW 69
26138: PUSH
26139: FOR_IN
26140: IFFALSE 26194
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26142: LD_VAR 0 1
26146: PPUSH
26147: CALL_OW 257
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: LD_INT 2
26157: PUSH
26158: LD_INT 3
26160: PUSH
26161: LD_INT 4
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: IN
26170: IFFALSE 26192
// SetClass ( un , rand ( 1 , 4 ) ) ;
26172: LD_VAR 0 1
26176: PPUSH
26177: LD_INT 1
26179: PPUSH
26180: LD_INT 4
26182: PPUSH
26183: CALL_OW 12
26187: PPUSH
26188: CALL_OW 336
26192: GO 26139
26194: POP
26195: POP
// end ;
26196: PPOPN 1
26198: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26199: LD_EXP 75
26203: PUSH
26204: LD_EXP 87
26208: AND
26209: IFFALSE 26288
26211: GO 26213
26213: DISABLE
26214: LD_INT 0
26216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26217: LD_ADDR_VAR 0 1
26221: PUSH
26222: LD_INT 22
26224: PUSH
26225: LD_OWVAR 2
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 21
26236: PUSH
26237: LD_INT 3
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PPUSH
26248: CALL_OW 69
26252: ST_TO_ADDR
// if not tmp then
26253: LD_VAR 0 1
26257: NOT
26258: IFFALSE 26262
// exit ;
26260: GO 26288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26262: LD_VAR 0 1
26266: PUSH
26267: LD_INT 1
26269: PPUSH
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL_OW 12
26279: ARRAY
26280: PPUSH
26281: LD_INT 100
26283: PPUSH
26284: CALL_OW 234
// end ;
26288: PPOPN 1
26290: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26291: LD_EXP 75
26295: PUSH
26296: LD_EXP 89
26300: AND
26301: IFFALSE 26399
26303: GO 26305
26305: DISABLE
26306: LD_INT 0
26308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26309: LD_ADDR_VAR 0 1
26313: PUSH
26314: LD_INT 22
26316: PUSH
26317: LD_OWVAR 2
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 21
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PPUSH
26340: CALL_OW 69
26344: ST_TO_ADDR
// if not tmp then
26345: LD_VAR 0 1
26349: NOT
26350: IFFALSE 26354
// exit ;
26352: GO 26399
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26354: LD_VAR 0 1
26358: PUSH
26359: LD_INT 1
26361: PPUSH
26362: LD_VAR 0 1
26366: PPUSH
26367: CALL_OW 12
26371: ARRAY
26372: PPUSH
26373: LD_INT 1
26375: PPUSH
26376: LD_INT 4
26378: PPUSH
26379: CALL_OW 12
26383: PPUSH
26384: LD_INT 3000
26386: PPUSH
26387: LD_INT 9000
26389: PPUSH
26390: CALL_OW 12
26394: PPUSH
26395: CALL_OW 492
// end ;
26399: PPOPN 1
26401: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26402: LD_EXP 75
26406: PUSH
26407: LD_EXP 90
26411: AND
26412: IFFALSE 26432
26414: GO 26416
26416: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26417: LD_INT 1
26419: PPUSH
26420: LD_OWVAR 2
26424: PPUSH
26425: LD_INT 0
26427: PPUSH
26428: CALL_OW 324
26432: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26433: LD_EXP 75
26437: PUSH
26438: LD_EXP 91
26442: AND
26443: IFFALSE 26526
26445: GO 26447
26447: DISABLE
26448: LD_INT 0
26450: PPUSH
26451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26452: LD_ADDR_VAR 0 2
26456: PUSH
26457: LD_INT 22
26459: PUSH
26460: LD_OWVAR 2
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 21
26471: PUSH
26472: LD_INT 3
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PPUSH
26483: CALL_OW 69
26487: ST_TO_ADDR
// if not tmp then
26488: LD_VAR 0 2
26492: NOT
26493: IFFALSE 26497
// exit ;
26495: GO 26526
// for i in tmp do
26497: LD_ADDR_VAR 0 1
26501: PUSH
26502: LD_VAR 0 2
26506: PUSH
26507: FOR_IN
26508: IFFALSE 26524
// SetBLevel ( i , 10 ) ;
26510: LD_VAR 0 1
26514: PPUSH
26515: LD_INT 10
26517: PPUSH
26518: CALL_OW 241
26522: GO 26507
26524: POP
26525: POP
// end ;
26526: PPOPN 2
26528: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26529: LD_EXP 75
26533: PUSH
26534: LD_EXP 92
26538: AND
26539: IFFALSE 26650
26541: GO 26543
26543: DISABLE
26544: LD_INT 0
26546: PPUSH
26547: PPUSH
26548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26549: LD_ADDR_VAR 0 3
26553: PUSH
26554: LD_INT 22
26556: PUSH
26557: LD_OWVAR 2
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 25
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 69
26584: ST_TO_ADDR
// if not tmp then
26585: LD_VAR 0 3
26589: NOT
26590: IFFALSE 26594
// exit ;
26592: GO 26650
// un := tmp [ rand ( 1 , tmp ) ] ;
26594: LD_ADDR_VAR 0 2
26598: PUSH
26599: LD_VAR 0 3
26603: PUSH
26604: LD_INT 1
26606: PPUSH
26607: LD_VAR 0 3
26611: PPUSH
26612: CALL_OW 12
26616: ARRAY
26617: ST_TO_ADDR
// if Crawls ( un ) then
26618: LD_VAR 0 2
26622: PPUSH
26623: CALL_OW 318
26627: IFFALSE 26638
// ComWalk ( un ) ;
26629: LD_VAR 0 2
26633: PPUSH
26634: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26638: LD_VAR 0 2
26642: PPUSH
26643: LD_INT 5
26645: PPUSH
26646: CALL_OW 336
// end ;
26650: PPOPN 3
26652: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26653: LD_EXP 75
26657: PUSH
26658: LD_EXP 93
26662: AND
26663: PUSH
26664: LD_OWVAR 67
26668: PUSH
26669: LD_INT 4
26671: LESS
26672: AND
26673: IFFALSE 26692
26675: GO 26677
26677: DISABLE
// begin Difficulty := Difficulty + 1 ;
26678: LD_ADDR_OWVAR 67
26682: PUSH
26683: LD_OWVAR 67
26687: PUSH
26688: LD_INT 1
26690: PLUS
26691: ST_TO_ADDR
// end ;
26692: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26693: LD_EXP 75
26697: PUSH
26698: LD_EXP 94
26702: AND
26703: IFFALSE 26806
26705: GO 26707
26707: DISABLE
26708: LD_INT 0
26710: PPUSH
// begin for i := 1 to 5 do
26711: LD_ADDR_VAR 0 1
26715: PUSH
26716: DOUBLE
26717: LD_INT 1
26719: DEC
26720: ST_TO_ADDR
26721: LD_INT 5
26723: PUSH
26724: FOR_TO
26725: IFFALSE 26804
// begin uc_nation := nation_nature ;
26727: LD_ADDR_OWVAR 21
26731: PUSH
26732: LD_INT 0
26734: ST_TO_ADDR
// uc_side := 0 ;
26735: LD_ADDR_OWVAR 20
26739: PUSH
26740: LD_INT 0
26742: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26743: LD_ADDR_OWVAR 29
26747: PUSH
26748: LD_INT 12
26750: PUSH
26751: LD_INT 12
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: ST_TO_ADDR
// hc_agressivity := 20 ;
26758: LD_ADDR_OWVAR 35
26762: PUSH
26763: LD_INT 20
26765: ST_TO_ADDR
// hc_class := class_tiger ;
26766: LD_ADDR_OWVAR 28
26770: PUSH
26771: LD_INT 14
26773: ST_TO_ADDR
// hc_gallery :=  ;
26774: LD_ADDR_OWVAR 33
26778: PUSH
26779: LD_STRING 
26781: ST_TO_ADDR
// hc_name :=  ;
26782: LD_ADDR_OWVAR 26
26786: PUSH
26787: LD_STRING 
26789: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26790: CALL_OW 44
26794: PPUSH
26795: LD_INT 0
26797: PPUSH
26798: CALL_OW 51
// end ;
26802: GO 26724
26804: POP
26805: POP
// end ;
26806: PPOPN 1
26808: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26809: LD_EXP 75
26813: PUSH
26814: LD_EXP 95
26818: AND
26819: IFFALSE 26828
26821: GO 26823
26823: DISABLE
// StreamSibBomb ;
26824: CALL 26829 0 0
26828: END
// export function StreamSibBomb ; var i , x , y ; begin
26829: LD_INT 0
26831: PPUSH
26832: PPUSH
26833: PPUSH
26834: PPUSH
// result := false ;
26835: LD_ADDR_VAR 0 1
26839: PUSH
26840: LD_INT 0
26842: ST_TO_ADDR
// for i := 1 to 16 do
26843: LD_ADDR_VAR 0 2
26847: PUSH
26848: DOUBLE
26849: LD_INT 1
26851: DEC
26852: ST_TO_ADDR
26853: LD_INT 16
26855: PUSH
26856: FOR_TO
26857: IFFALSE 27056
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26859: LD_ADDR_VAR 0 3
26863: PUSH
26864: LD_INT 10
26866: PUSH
26867: LD_INT 20
26869: PUSH
26870: LD_INT 30
26872: PUSH
26873: LD_INT 40
26875: PUSH
26876: LD_INT 50
26878: PUSH
26879: LD_INT 60
26881: PUSH
26882: LD_INT 70
26884: PUSH
26885: LD_INT 80
26887: PUSH
26888: LD_INT 90
26890: PUSH
26891: LD_INT 100
26893: PUSH
26894: LD_INT 110
26896: PUSH
26897: LD_INT 120
26899: PUSH
26900: LD_INT 130
26902: PUSH
26903: LD_INT 140
26905: PUSH
26906: LD_INT 150
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: PPUSH
26929: LD_INT 15
26931: PPUSH
26932: CALL_OW 12
26936: ARRAY
26937: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26938: LD_ADDR_VAR 0 4
26942: PUSH
26943: LD_INT 10
26945: PUSH
26946: LD_INT 20
26948: PUSH
26949: LD_INT 30
26951: PUSH
26952: LD_INT 40
26954: PUSH
26955: LD_INT 50
26957: PUSH
26958: LD_INT 60
26960: PUSH
26961: LD_INT 70
26963: PUSH
26964: LD_INT 80
26966: PUSH
26967: LD_INT 90
26969: PUSH
26970: LD_INT 100
26972: PUSH
26973: LD_INT 110
26975: PUSH
26976: LD_INT 120
26978: PUSH
26979: LD_INT 130
26981: PUSH
26982: LD_INT 140
26984: PUSH
26985: LD_INT 150
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: PPUSH
27008: LD_INT 15
27010: PPUSH
27011: CALL_OW 12
27015: ARRAY
27016: ST_TO_ADDR
// if ValidHex ( x , y ) then
27017: LD_VAR 0 3
27021: PPUSH
27022: LD_VAR 0 4
27026: PPUSH
27027: CALL_OW 488
27031: IFFALSE 27054
// begin result := [ x , y ] ;
27033: LD_ADDR_VAR 0 1
27037: PUSH
27038: LD_VAR 0 3
27042: PUSH
27043: LD_VAR 0 4
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: ST_TO_ADDR
// break ;
27052: GO 27056
// end ; end ;
27054: GO 26856
27056: POP
27057: POP
// if result then
27058: LD_VAR 0 1
27062: IFFALSE 27122
// begin ToLua ( playSibBomb() ) ;
27064: LD_STRING playSibBomb()
27066: PPUSH
27067: CALL_OW 559
// wait ( 0 0$14 ) ;
27071: LD_INT 490
27073: PPUSH
27074: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27078: LD_VAR 0 1
27082: PUSH
27083: LD_INT 1
27085: ARRAY
27086: PPUSH
27087: LD_VAR 0 1
27091: PUSH
27092: LD_INT 2
27094: ARRAY
27095: PPUSH
27096: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27100: LD_VAR 0 1
27104: PUSH
27105: LD_INT 1
27107: ARRAY
27108: PPUSH
27109: LD_VAR 0 1
27113: PUSH
27114: LD_INT 2
27116: ARRAY
27117: PPUSH
27118: CALL_OW 429
// end ; end ;
27122: LD_VAR 0 1
27126: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27127: LD_EXP 75
27131: PUSH
27132: LD_EXP 97
27136: AND
27137: IFFALSE 27149
27139: GO 27141
27141: DISABLE
// YouLost (  ) ;
27142: LD_STRING 
27144: PPUSH
27145: CALL_OW 104
27149: END
// every 0 0$1 trigger StreamModeActive and sFog do
27150: LD_EXP 75
27154: PUSH
27155: LD_EXP 96
27159: AND
27160: IFFALSE 27174
27162: GO 27164
27164: DISABLE
// FogOff ( your_side ) ;
27165: LD_OWVAR 2
27169: PPUSH
27170: CALL_OW 344
27174: END
// every 0 0$1 trigger StreamModeActive and sSun do
27175: LD_EXP 75
27179: PUSH
27180: LD_EXP 98
27184: AND
27185: IFFALSE 27213
27187: GO 27189
27189: DISABLE
// begin solar_recharge_percent := 0 ;
27190: LD_ADDR_OWVAR 79
27194: PUSH
27195: LD_INT 0
27197: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27198: LD_INT 10500
27200: PPUSH
27201: CALL_OW 67
// solar_recharge_percent := 100 ;
27205: LD_ADDR_OWVAR 79
27209: PUSH
27210: LD_INT 100
27212: ST_TO_ADDR
// end ;
27213: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27214: LD_EXP 75
27218: PUSH
27219: LD_EXP 99
27223: AND
27224: IFFALSE 27463
27226: GO 27228
27228: DISABLE
27229: LD_INT 0
27231: PPUSH
27232: PPUSH
27233: PPUSH
// begin tmp := [ ] ;
27234: LD_ADDR_VAR 0 3
27238: PUSH
27239: EMPTY
27240: ST_TO_ADDR
// for i := 1 to 6 do
27241: LD_ADDR_VAR 0 1
27245: PUSH
27246: DOUBLE
27247: LD_INT 1
27249: DEC
27250: ST_TO_ADDR
27251: LD_INT 6
27253: PUSH
27254: FOR_TO
27255: IFFALSE 27360
// begin uc_nation := nation_nature ;
27257: LD_ADDR_OWVAR 21
27261: PUSH
27262: LD_INT 0
27264: ST_TO_ADDR
// uc_side := 0 ;
27265: LD_ADDR_OWVAR 20
27269: PUSH
27270: LD_INT 0
27272: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27273: LD_ADDR_OWVAR 29
27277: PUSH
27278: LD_INT 12
27280: PUSH
27281: LD_INT 12
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: ST_TO_ADDR
// hc_agressivity := 20 ;
27288: LD_ADDR_OWVAR 35
27292: PUSH
27293: LD_INT 20
27295: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27296: LD_ADDR_OWVAR 28
27300: PUSH
27301: LD_INT 17
27303: ST_TO_ADDR
// hc_gallery :=  ;
27304: LD_ADDR_OWVAR 33
27308: PUSH
27309: LD_STRING 
27311: ST_TO_ADDR
// hc_name :=  ;
27312: LD_ADDR_OWVAR 26
27316: PUSH
27317: LD_STRING 
27319: ST_TO_ADDR
// un := CreateHuman ;
27320: LD_ADDR_VAR 0 2
27324: PUSH
27325: CALL_OW 44
27329: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27330: LD_VAR 0 2
27334: PPUSH
27335: LD_INT 1
27337: PPUSH
27338: CALL_OW 51
// tmp := tmp ^ un ;
27342: LD_ADDR_VAR 0 3
27346: PUSH
27347: LD_VAR 0 3
27351: PUSH
27352: LD_VAR 0 2
27356: ADD
27357: ST_TO_ADDR
// end ;
27358: GO 27254
27360: POP
27361: POP
// repeat wait ( 0 0$1 ) ;
27362: LD_INT 35
27364: PPUSH
27365: CALL_OW 67
// for un in tmp do
27369: LD_ADDR_VAR 0 2
27373: PUSH
27374: LD_VAR 0 3
27378: PUSH
27379: FOR_IN
27380: IFFALSE 27454
// begin if IsDead ( un ) then
27382: LD_VAR 0 2
27386: PPUSH
27387: CALL_OW 301
27391: IFFALSE 27411
// begin tmp := tmp diff un ;
27393: LD_ADDR_VAR 0 3
27397: PUSH
27398: LD_VAR 0 3
27402: PUSH
27403: LD_VAR 0 2
27407: DIFF
27408: ST_TO_ADDR
// continue ;
27409: GO 27379
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27411: LD_VAR 0 2
27415: PPUSH
27416: LD_INT 3
27418: PUSH
27419: LD_INT 22
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PPUSH
27433: CALL_OW 69
27437: PPUSH
27438: LD_VAR 0 2
27442: PPUSH
27443: CALL_OW 74
27447: PPUSH
27448: CALL_OW 115
// end ;
27452: GO 27379
27454: POP
27455: POP
// until not tmp ;
27456: LD_VAR 0 3
27460: NOT
27461: IFFALSE 27362
// end ;
27463: PPOPN 3
27465: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27466: LD_EXP 75
27470: PUSH
27471: LD_EXP 100
27475: AND
27476: IFFALSE 27530
27478: GO 27480
27480: DISABLE
// begin ToLua ( displayTroll(); ) ;
27481: LD_STRING displayTroll();
27483: PPUSH
27484: CALL_OW 559
// wait ( 3 3$00 ) ;
27488: LD_INT 6300
27490: PPUSH
27491: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27495: LD_STRING hideTroll();
27497: PPUSH
27498: CALL_OW 559
// wait ( 1 1$00 ) ;
27502: LD_INT 2100
27504: PPUSH
27505: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27509: LD_STRING displayTroll();
27511: PPUSH
27512: CALL_OW 559
// wait ( 1 1$00 ) ;
27516: LD_INT 2100
27518: PPUSH
27519: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27523: LD_STRING hideTroll();
27525: PPUSH
27526: CALL_OW 559
// end ;
27530: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27531: LD_EXP 75
27535: PUSH
27536: LD_EXP 101
27540: AND
27541: IFFALSE 27604
27543: GO 27545
27545: DISABLE
27546: LD_INT 0
27548: PPUSH
// begin p := 0 ;
27549: LD_ADDR_VAR 0 1
27553: PUSH
27554: LD_INT 0
27556: ST_TO_ADDR
// repeat game_speed := 1 ;
27557: LD_ADDR_OWVAR 65
27561: PUSH
27562: LD_INT 1
27564: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27565: LD_INT 35
27567: PPUSH
27568: CALL_OW 67
// p := p + 1 ;
27572: LD_ADDR_VAR 0 1
27576: PUSH
27577: LD_VAR 0 1
27581: PUSH
27582: LD_INT 1
27584: PLUS
27585: ST_TO_ADDR
// until p >= 60 ;
27586: LD_VAR 0 1
27590: PUSH
27591: LD_INT 60
27593: GREATEREQUAL
27594: IFFALSE 27557
// game_speed := 4 ;
27596: LD_ADDR_OWVAR 65
27600: PUSH
27601: LD_INT 4
27603: ST_TO_ADDR
// end ;
27604: PPOPN 1
27606: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27607: LD_EXP 75
27611: PUSH
27612: LD_EXP 102
27616: AND
27617: IFFALSE 27763
27619: GO 27621
27621: DISABLE
27622: LD_INT 0
27624: PPUSH
27625: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27626: LD_ADDR_VAR 0 1
27630: PUSH
27631: LD_INT 22
27633: PUSH
27634: LD_OWVAR 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: LD_INT 30
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 30
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PPUSH
27675: CALL_OW 69
27679: ST_TO_ADDR
// if not depot then
27680: LD_VAR 0 1
27684: NOT
27685: IFFALSE 27689
// exit ;
27687: GO 27763
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27689: LD_ADDR_VAR 0 2
27693: PUSH
27694: LD_VAR 0 1
27698: PUSH
27699: LD_INT 1
27701: PPUSH
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL_OW 12
27711: ARRAY
27712: PPUSH
27713: CALL_OW 274
27717: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27718: LD_VAR 0 2
27722: PPUSH
27723: LD_INT 1
27725: PPUSH
27726: LD_INT 0
27728: PPUSH
27729: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27733: LD_VAR 0 2
27737: PPUSH
27738: LD_INT 2
27740: PPUSH
27741: LD_INT 0
27743: PPUSH
27744: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27748: LD_VAR 0 2
27752: PPUSH
27753: LD_INT 3
27755: PPUSH
27756: LD_INT 0
27758: PPUSH
27759: CALL_OW 277
// end ;
27763: PPOPN 2
27765: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27766: LD_EXP 75
27770: PUSH
27771: LD_EXP 103
27775: AND
27776: IFFALSE 27873
27778: GO 27780
27780: DISABLE
27781: LD_INT 0
27783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27784: LD_ADDR_VAR 0 1
27788: PUSH
27789: LD_INT 22
27791: PUSH
27792: LD_OWVAR 2
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 21
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 3
27813: PUSH
27814: LD_INT 23
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: LIST
27832: PPUSH
27833: CALL_OW 69
27837: ST_TO_ADDR
// if not tmp then
27838: LD_VAR 0 1
27842: NOT
27843: IFFALSE 27847
// exit ;
27845: GO 27873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27847: LD_VAR 0 1
27851: PUSH
27852: LD_INT 1
27854: PPUSH
27855: LD_VAR 0 1
27859: PPUSH
27860: CALL_OW 12
27864: ARRAY
27865: PPUSH
27866: LD_INT 200
27868: PPUSH
27869: CALL_OW 234
// end ;
27873: PPOPN 1
27875: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27876: LD_EXP 75
27880: PUSH
27881: LD_EXP 104
27885: AND
27886: IFFALSE 27965
27888: GO 27890
27890: DISABLE
27891: LD_INT 0
27893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27894: LD_ADDR_VAR 0 1
27898: PUSH
27899: LD_INT 22
27901: PUSH
27902: LD_OWVAR 2
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 21
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PPUSH
27925: CALL_OW 69
27929: ST_TO_ADDR
// if not tmp then
27930: LD_VAR 0 1
27934: NOT
27935: IFFALSE 27939
// exit ;
27937: GO 27965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27939: LD_VAR 0 1
27943: PUSH
27944: LD_INT 1
27946: PPUSH
27947: LD_VAR 0 1
27951: PPUSH
27952: CALL_OW 12
27956: ARRAY
27957: PPUSH
27958: LD_INT 60
27960: PPUSH
27961: CALL_OW 234
// end ;
27965: PPOPN 1
27967: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27968: LD_EXP 75
27972: PUSH
27973: LD_EXP 105
27977: AND
27978: IFFALSE 28077
27980: GO 27982
27982: DISABLE
27983: LD_INT 0
27985: PPUSH
27986: PPUSH
// begin enable ;
27987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27988: LD_ADDR_VAR 0 1
27992: PUSH
27993: LD_INT 22
27995: PUSH
27996: LD_OWVAR 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 61
28007: PUSH
28008: EMPTY
28009: LIST
28010: PUSH
28011: LD_INT 33
28013: PUSH
28014: LD_INT 2
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: PPUSH
28026: CALL_OW 69
28030: ST_TO_ADDR
// if not tmp then
28031: LD_VAR 0 1
28035: NOT
28036: IFFALSE 28040
// exit ;
28038: GO 28077
// for i in tmp do
28040: LD_ADDR_VAR 0 2
28044: PUSH
28045: LD_VAR 0 1
28049: PUSH
28050: FOR_IN
28051: IFFALSE 28075
// if IsControledBy ( i ) then
28053: LD_VAR 0 2
28057: PPUSH
28058: CALL_OW 312
28062: IFFALSE 28073
// ComUnlink ( i ) ;
28064: LD_VAR 0 2
28068: PPUSH
28069: CALL_OW 136
28073: GO 28050
28075: POP
28076: POP
// end ;
28077: PPOPN 2
28079: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28080: LD_EXP 75
28084: PUSH
28085: LD_EXP 106
28089: AND
28090: IFFALSE 28230
28092: GO 28094
28094: DISABLE
28095: LD_INT 0
28097: PPUSH
28098: PPUSH
// begin ToLua ( displayPowell(); ) ;
28099: LD_STRING displayPowell();
28101: PPUSH
28102: CALL_OW 559
// uc_side := 0 ;
28106: LD_ADDR_OWVAR 20
28110: PUSH
28111: LD_INT 0
28113: ST_TO_ADDR
// uc_nation := 2 ;
28114: LD_ADDR_OWVAR 21
28118: PUSH
28119: LD_INT 2
28121: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28122: LD_ADDR_OWVAR 37
28126: PUSH
28127: LD_INT 14
28129: ST_TO_ADDR
// vc_engine := engine_siberite ;
28130: LD_ADDR_OWVAR 39
28134: PUSH
28135: LD_INT 3
28137: ST_TO_ADDR
// vc_control := control_apeman ;
28138: LD_ADDR_OWVAR 38
28142: PUSH
28143: LD_INT 5
28145: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28146: LD_ADDR_OWVAR 40
28150: PUSH
28151: LD_INT 29
28153: ST_TO_ADDR
// un := CreateVehicle ;
28154: LD_ADDR_VAR 0 2
28158: PUSH
28159: CALL_OW 45
28163: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28164: LD_VAR 0 2
28168: PPUSH
28169: LD_INT 1
28171: PPUSH
28172: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28176: LD_INT 35
28178: PPUSH
28179: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28183: LD_VAR 0 2
28187: PPUSH
28188: LD_INT 22
28190: PUSH
28191: LD_OWVAR 2
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PPUSH
28200: CALL_OW 69
28204: PPUSH
28205: LD_VAR 0 2
28209: PPUSH
28210: CALL_OW 74
28214: PPUSH
28215: CALL_OW 115
// until IsDead ( un ) ;
28219: LD_VAR 0 2
28223: PPUSH
28224: CALL_OW 301
28228: IFFALSE 28176
// end ;
28230: PPOPN 2
28232: END
// every 0 0$1 trigger StreamModeActive and sStu do
28233: LD_EXP 75
28237: PUSH
28238: LD_EXP 114
28242: AND
28243: IFFALSE 28259
28245: GO 28247
28247: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28248: LD_STRING displayStucuk();
28250: PPUSH
28251: CALL_OW 559
// ResetFog ;
28255: CALL_OW 335
// end ;
28259: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28260: LD_EXP 75
28264: PUSH
28265: LD_EXP 107
28269: AND
28270: IFFALSE 28411
28272: GO 28274
28274: DISABLE
28275: LD_INT 0
28277: PPUSH
28278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28279: LD_ADDR_VAR 0 2
28283: PUSH
28284: LD_INT 22
28286: PUSH
28287: LD_OWVAR 2
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 21
28298: PUSH
28299: LD_INT 1
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PPUSH
28310: CALL_OW 69
28314: ST_TO_ADDR
// if not tmp then
28315: LD_VAR 0 2
28319: NOT
28320: IFFALSE 28324
// exit ;
28322: GO 28411
// un := tmp [ rand ( 1 , tmp ) ] ;
28324: LD_ADDR_VAR 0 1
28328: PUSH
28329: LD_VAR 0 2
28333: PUSH
28334: LD_INT 1
28336: PPUSH
28337: LD_VAR 0 2
28341: PPUSH
28342: CALL_OW 12
28346: ARRAY
28347: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28348: LD_VAR 0 1
28352: PPUSH
28353: LD_INT 0
28355: PPUSH
28356: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28360: LD_VAR 0 1
28364: PPUSH
28365: LD_OWVAR 3
28369: PUSH
28370: LD_VAR 0 1
28374: DIFF
28375: PPUSH
28376: LD_VAR 0 1
28380: PPUSH
28381: CALL_OW 74
28385: PPUSH
28386: CALL_OW 115
// wait ( 0 0$20 ) ;
28390: LD_INT 700
28392: PPUSH
28393: CALL_OW 67
// SetSide ( un , your_side ) ;
28397: LD_VAR 0 1
28401: PPUSH
28402: LD_OWVAR 2
28406: PPUSH
28407: CALL_OW 235
// end ;
28411: PPOPN 2
28413: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28414: LD_EXP 75
28418: PUSH
28419: LD_EXP 108
28423: AND
28424: IFFALSE 28530
28426: GO 28428
28428: DISABLE
28429: LD_INT 0
28431: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28432: LD_ADDR_VAR 0 1
28436: PUSH
28437: LD_INT 22
28439: PUSH
28440: LD_OWVAR 2
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: LD_INT 30
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 30
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: LIST
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PPUSH
28481: CALL_OW 69
28485: ST_TO_ADDR
// if not depot then
28486: LD_VAR 0 1
28490: NOT
28491: IFFALSE 28495
// exit ;
28493: GO 28530
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28495: LD_VAR 0 1
28499: PUSH
28500: LD_INT 1
28502: ARRAY
28503: PPUSH
28504: CALL_OW 250
28508: PPUSH
28509: LD_VAR 0 1
28513: PUSH
28514: LD_INT 1
28516: ARRAY
28517: PPUSH
28518: CALL_OW 251
28522: PPUSH
28523: LD_INT 70
28525: PPUSH
28526: CALL_OW 495
// end ;
28530: PPOPN 1
28532: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28533: LD_EXP 75
28537: PUSH
28538: LD_EXP 109
28542: AND
28543: IFFALSE 28754
28545: GO 28547
28547: DISABLE
28548: LD_INT 0
28550: PPUSH
28551: PPUSH
28552: PPUSH
28553: PPUSH
28554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28555: LD_ADDR_VAR 0 5
28559: PUSH
28560: LD_INT 22
28562: PUSH
28563: LD_OWVAR 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 21
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PPUSH
28586: CALL_OW 69
28590: ST_TO_ADDR
// if not tmp then
28591: LD_VAR 0 5
28595: NOT
28596: IFFALSE 28600
// exit ;
28598: GO 28754
// for i in tmp do
28600: LD_ADDR_VAR 0 1
28604: PUSH
28605: LD_VAR 0 5
28609: PUSH
28610: FOR_IN
28611: IFFALSE 28752
// begin d := rand ( 0 , 5 ) ;
28613: LD_ADDR_VAR 0 4
28617: PUSH
28618: LD_INT 0
28620: PPUSH
28621: LD_INT 5
28623: PPUSH
28624: CALL_OW 12
28628: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28629: LD_ADDR_VAR 0 2
28633: PUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 250
28643: PPUSH
28644: LD_VAR 0 4
28648: PPUSH
28649: LD_INT 3
28651: PPUSH
28652: LD_INT 12
28654: PPUSH
28655: CALL_OW 12
28659: PPUSH
28660: CALL_OW 272
28664: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28665: LD_ADDR_VAR 0 3
28669: PUSH
28670: LD_VAR 0 1
28674: PPUSH
28675: CALL_OW 251
28679: PPUSH
28680: LD_VAR 0 4
28684: PPUSH
28685: LD_INT 3
28687: PPUSH
28688: LD_INT 12
28690: PPUSH
28691: CALL_OW 12
28695: PPUSH
28696: CALL_OW 273
28700: ST_TO_ADDR
// if ValidHex ( x , y ) then
28701: LD_VAR 0 2
28705: PPUSH
28706: LD_VAR 0 3
28710: PPUSH
28711: CALL_OW 488
28715: IFFALSE 28750
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28717: LD_VAR 0 1
28721: PPUSH
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: LD_INT 3
28734: PPUSH
28735: LD_INT 6
28737: PPUSH
28738: CALL_OW 12
28742: PPUSH
28743: LD_INT 1
28745: PPUSH
28746: CALL_OW 483
// end ;
28750: GO 28610
28752: POP
28753: POP
// end ;
28754: PPOPN 5
28756: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28757: LD_EXP 75
28761: PUSH
28762: LD_EXP 110
28766: AND
28767: IFFALSE 28861
28769: GO 28771
28771: DISABLE
28772: LD_INT 0
28774: PPUSH
28775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28776: LD_ADDR_VAR 0 2
28780: PUSH
28781: LD_INT 22
28783: PUSH
28784: LD_OWVAR 2
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 32
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 21
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: PPUSH
28818: CALL_OW 69
28822: ST_TO_ADDR
// if not tmp then
28823: LD_VAR 0 2
28827: NOT
28828: IFFALSE 28832
// exit ;
28830: GO 28861
// for i in tmp do
28832: LD_ADDR_VAR 0 1
28836: PUSH
28837: LD_VAR 0 2
28841: PUSH
28842: FOR_IN
28843: IFFALSE 28859
// SetFuel ( i , 0 ) ;
28845: LD_VAR 0 1
28849: PPUSH
28850: LD_INT 0
28852: PPUSH
28853: CALL_OW 240
28857: GO 28842
28859: POP
28860: POP
// end ;
28861: PPOPN 2
28863: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28864: LD_EXP 75
28868: PUSH
28869: LD_EXP 111
28873: AND
28874: IFFALSE 28940
28876: GO 28878
28878: DISABLE
28879: LD_INT 0
28881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28882: LD_ADDR_VAR 0 1
28886: PUSH
28887: LD_INT 22
28889: PUSH
28890: LD_OWVAR 2
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 30
28901: PUSH
28902: LD_INT 29
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PPUSH
28913: CALL_OW 69
28917: ST_TO_ADDR
// if not tmp then
28918: LD_VAR 0 1
28922: NOT
28923: IFFALSE 28927
// exit ;
28925: GO 28940
// DestroyUnit ( tmp [ 1 ] ) ;
28927: LD_VAR 0 1
28931: PUSH
28932: LD_INT 1
28934: ARRAY
28935: PPUSH
28936: CALL_OW 65
// end ;
28940: PPOPN 1
28942: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28943: LD_EXP 75
28947: PUSH
28948: LD_EXP 113
28952: AND
28953: IFFALSE 29082
28955: GO 28957
28957: DISABLE
28958: LD_INT 0
28960: PPUSH
// begin uc_side := 0 ;
28961: LD_ADDR_OWVAR 20
28965: PUSH
28966: LD_INT 0
28968: ST_TO_ADDR
// uc_nation := nation_arabian ;
28969: LD_ADDR_OWVAR 21
28973: PUSH
28974: LD_INT 2
28976: ST_TO_ADDR
// hc_gallery :=  ;
28977: LD_ADDR_OWVAR 33
28981: PUSH
28982: LD_STRING 
28984: ST_TO_ADDR
// hc_name :=  ;
28985: LD_ADDR_OWVAR 26
28989: PUSH
28990: LD_STRING 
28992: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28993: LD_INT 1
28995: PPUSH
28996: LD_INT 11
28998: PPUSH
28999: LD_INT 10
29001: PPUSH
29002: CALL_OW 380
// un := CreateHuman ;
29006: LD_ADDR_VAR 0 1
29010: PUSH
29011: CALL_OW 44
29015: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29016: LD_VAR 0 1
29020: PPUSH
29021: LD_INT 1
29023: PPUSH
29024: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29028: LD_INT 35
29030: PPUSH
29031: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29035: LD_VAR 0 1
29039: PPUSH
29040: LD_INT 22
29042: PUSH
29043: LD_OWVAR 2
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PPUSH
29052: CALL_OW 69
29056: PPUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 74
29066: PPUSH
29067: CALL_OW 115
// until IsDead ( un ) ;
29071: LD_VAR 0 1
29075: PPUSH
29076: CALL_OW 301
29080: IFFALSE 29028
// end ;
29082: PPOPN 1
29084: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29085: LD_EXP 75
29089: PUSH
29090: LD_EXP 115
29094: AND
29095: IFFALSE 29107
29097: GO 29099
29099: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29100: LD_STRING earthquake(getX(game), 0, 32)
29102: PPUSH
29103: CALL_OW 559
29107: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29108: LD_EXP 75
29112: PUSH
29113: LD_EXP 116
29117: AND
29118: IFFALSE 29209
29120: GO 29122
29122: DISABLE
29123: LD_INT 0
29125: PPUSH
// begin enable ;
29126: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29127: LD_ADDR_VAR 0 1
29131: PUSH
29132: LD_INT 22
29134: PUSH
29135: LD_OWVAR 2
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 21
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 33
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: PPUSH
29169: CALL_OW 69
29173: ST_TO_ADDR
// if not tmp then
29174: LD_VAR 0 1
29178: NOT
29179: IFFALSE 29183
// exit ;
29181: GO 29209
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29183: LD_VAR 0 1
29187: PUSH
29188: LD_INT 1
29190: PPUSH
29191: LD_VAR 0 1
29195: PPUSH
29196: CALL_OW 12
29200: ARRAY
29201: PPUSH
29202: LD_INT 1
29204: PPUSH
29205: CALL_OW 234
// end ;
29209: PPOPN 1
29211: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29212: LD_EXP 75
29216: PUSH
29217: LD_EXP 117
29221: AND
29222: IFFALSE 29363
29224: GO 29226
29226: DISABLE
29227: LD_INT 0
29229: PPUSH
29230: PPUSH
29231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29232: LD_ADDR_VAR 0 3
29236: PUSH
29237: LD_INT 22
29239: PUSH
29240: LD_OWVAR 2
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 25
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PPUSH
29263: CALL_OW 69
29267: ST_TO_ADDR
// if not tmp then
29268: LD_VAR 0 3
29272: NOT
29273: IFFALSE 29277
// exit ;
29275: GO 29363
// un := tmp [ rand ( 1 , tmp ) ] ;
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: LD_VAR 0 3
29286: PUSH
29287: LD_INT 1
29289: PPUSH
29290: LD_VAR 0 3
29294: PPUSH
29295: CALL_OW 12
29299: ARRAY
29300: ST_TO_ADDR
// if Crawls ( un ) then
29301: LD_VAR 0 2
29305: PPUSH
29306: CALL_OW 318
29310: IFFALSE 29321
// ComWalk ( un ) ;
29312: LD_VAR 0 2
29316: PPUSH
29317: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29321: LD_VAR 0 2
29325: PPUSH
29326: LD_INT 9
29328: PPUSH
29329: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29333: LD_INT 28
29335: PPUSH
29336: LD_OWVAR 2
29340: PPUSH
29341: LD_INT 2
29343: PPUSH
29344: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29348: LD_INT 29
29350: PPUSH
29351: LD_OWVAR 2
29355: PPUSH
29356: LD_INT 2
29358: PPUSH
29359: CALL_OW 322
// end ;
29363: PPOPN 3
29365: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29366: LD_EXP 75
29370: PUSH
29371: LD_EXP 118
29375: AND
29376: IFFALSE 29487
29378: GO 29380
29380: DISABLE
29381: LD_INT 0
29383: PPUSH
29384: PPUSH
29385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29386: LD_ADDR_VAR 0 3
29390: PUSH
29391: LD_INT 22
29393: PUSH
29394: LD_OWVAR 2
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 25
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PPUSH
29417: CALL_OW 69
29421: ST_TO_ADDR
// if not tmp then
29422: LD_VAR 0 3
29426: NOT
29427: IFFALSE 29431
// exit ;
29429: GO 29487
// un := tmp [ rand ( 1 , tmp ) ] ;
29431: LD_ADDR_VAR 0 2
29435: PUSH
29436: LD_VAR 0 3
29440: PUSH
29441: LD_INT 1
29443: PPUSH
29444: LD_VAR 0 3
29448: PPUSH
29449: CALL_OW 12
29453: ARRAY
29454: ST_TO_ADDR
// if Crawls ( un ) then
29455: LD_VAR 0 2
29459: PPUSH
29460: CALL_OW 318
29464: IFFALSE 29475
// ComWalk ( un ) ;
29466: LD_VAR 0 2
29470: PPUSH
29471: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29475: LD_VAR 0 2
29479: PPUSH
29480: LD_INT 8
29482: PPUSH
29483: CALL_OW 336
// end ;
29487: PPOPN 3
29489: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29490: LD_EXP 75
29494: PUSH
29495: LD_EXP 119
29499: AND
29500: IFFALSE 29644
29502: GO 29504
29504: DISABLE
29505: LD_INT 0
29507: PPUSH
29508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29509: LD_ADDR_VAR 0 2
29513: PUSH
29514: LD_INT 22
29516: PUSH
29517: LD_OWVAR 2
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 21
29528: PUSH
29529: LD_INT 2
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 2
29538: PUSH
29539: LD_INT 34
29541: PUSH
29542: LD_INT 12
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 34
29551: PUSH
29552: LD_INT 51
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 34
29561: PUSH
29562: LD_INT 32
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: LIST
29579: PPUSH
29580: CALL_OW 69
29584: ST_TO_ADDR
// if not tmp then
29585: LD_VAR 0 2
29589: NOT
29590: IFFALSE 29594
// exit ;
29592: GO 29644
// for i in tmp do
29594: LD_ADDR_VAR 0 1
29598: PUSH
29599: LD_VAR 0 2
29603: PUSH
29604: FOR_IN
29605: IFFALSE 29642
// if GetCargo ( i , mat_artifact ) = 0 then
29607: LD_VAR 0 1
29611: PPUSH
29612: LD_INT 4
29614: PPUSH
29615: CALL_OW 289
29619: PUSH
29620: LD_INT 0
29622: EQUAL
29623: IFFALSE 29640
// SetCargo ( i , mat_siberit , 100 ) ;
29625: LD_VAR 0 1
29629: PPUSH
29630: LD_INT 3
29632: PPUSH
29633: LD_INT 100
29635: PPUSH
29636: CALL_OW 290
29640: GO 29604
29642: POP
29643: POP
// end ;
29644: PPOPN 2
29646: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29647: LD_EXP 75
29651: PUSH
29652: LD_EXP 120
29656: AND
29657: IFFALSE 29840
29659: GO 29661
29661: DISABLE
29662: LD_INT 0
29664: PPUSH
29665: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29666: LD_ADDR_VAR 0 2
29670: PUSH
29671: LD_INT 22
29673: PUSH
29674: LD_OWVAR 2
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PPUSH
29683: CALL_OW 69
29687: ST_TO_ADDR
// if not tmp then
29688: LD_VAR 0 2
29692: NOT
29693: IFFALSE 29697
// exit ;
29695: GO 29840
// for i := 1 to 2 do
29697: LD_ADDR_VAR 0 1
29701: PUSH
29702: DOUBLE
29703: LD_INT 1
29705: DEC
29706: ST_TO_ADDR
29707: LD_INT 2
29709: PUSH
29710: FOR_TO
29711: IFFALSE 29838
// begin uc_side := your_side ;
29713: LD_ADDR_OWVAR 20
29717: PUSH
29718: LD_OWVAR 2
29722: ST_TO_ADDR
// uc_nation := nation_american ;
29723: LD_ADDR_OWVAR 21
29727: PUSH
29728: LD_INT 1
29730: ST_TO_ADDR
// vc_chassis := us_morphling ;
29731: LD_ADDR_OWVAR 37
29735: PUSH
29736: LD_INT 5
29738: ST_TO_ADDR
// vc_engine := engine_siberite ;
29739: LD_ADDR_OWVAR 39
29743: PUSH
29744: LD_INT 3
29746: ST_TO_ADDR
// vc_control := control_computer ;
29747: LD_ADDR_OWVAR 38
29751: PUSH
29752: LD_INT 3
29754: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29755: LD_ADDR_OWVAR 40
29759: PUSH
29760: LD_INT 10
29762: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29763: LD_VAR 0 2
29767: PUSH
29768: LD_INT 1
29770: ARRAY
29771: PPUSH
29772: CALL_OW 310
29776: NOT
29777: IFFALSE 29824
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29779: CALL_OW 45
29783: PPUSH
29784: LD_VAR 0 2
29788: PUSH
29789: LD_INT 1
29791: ARRAY
29792: PPUSH
29793: CALL_OW 250
29797: PPUSH
29798: LD_VAR 0 2
29802: PUSH
29803: LD_INT 1
29805: ARRAY
29806: PPUSH
29807: CALL_OW 251
29811: PPUSH
29812: LD_INT 12
29814: PPUSH
29815: LD_INT 1
29817: PPUSH
29818: CALL_OW 50
29822: GO 29836
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29824: CALL_OW 45
29828: PPUSH
29829: LD_INT 1
29831: PPUSH
29832: CALL_OW 51
// end ;
29836: GO 29710
29838: POP
29839: POP
// end ;
29840: PPOPN 2
29842: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29843: LD_EXP 75
29847: PUSH
29848: LD_EXP 121
29852: AND
29853: IFFALSE 30075
29855: GO 29857
29857: DISABLE
29858: LD_INT 0
29860: PPUSH
29861: PPUSH
29862: PPUSH
29863: PPUSH
29864: PPUSH
29865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29866: LD_ADDR_VAR 0 6
29870: PUSH
29871: LD_INT 22
29873: PUSH
29874: LD_OWVAR 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 21
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 3
29895: PUSH
29896: LD_INT 23
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: LIST
29914: PPUSH
29915: CALL_OW 69
29919: ST_TO_ADDR
// if not tmp then
29920: LD_VAR 0 6
29924: NOT
29925: IFFALSE 29929
// exit ;
29927: GO 30075
// s1 := rand ( 1 , 4 ) ;
29929: LD_ADDR_VAR 0 2
29933: PUSH
29934: LD_INT 1
29936: PPUSH
29937: LD_INT 4
29939: PPUSH
29940: CALL_OW 12
29944: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29945: LD_ADDR_VAR 0 4
29949: PUSH
29950: LD_VAR 0 6
29954: PUSH
29955: LD_INT 1
29957: ARRAY
29958: PPUSH
29959: LD_VAR 0 2
29963: PPUSH
29964: CALL_OW 259
29968: ST_TO_ADDR
// if s1 = 1 then
29969: LD_VAR 0 2
29973: PUSH
29974: LD_INT 1
29976: EQUAL
29977: IFFALSE 29997
// s2 := rand ( 2 , 4 ) else
29979: LD_ADDR_VAR 0 3
29983: PUSH
29984: LD_INT 2
29986: PPUSH
29987: LD_INT 4
29989: PPUSH
29990: CALL_OW 12
29994: ST_TO_ADDR
29995: GO 30005
// s2 := 1 ;
29997: LD_ADDR_VAR 0 3
30001: PUSH
30002: LD_INT 1
30004: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30005: LD_ADDR_VAR 0 5
30009: PUSH
30010: LD_VAR 0 6
30014: PUSH
30015: LD_INT 1
30017: ARRAY
30018: PPUSH
30019: LD_VAR 0 3
30023: PPUSH
30024: CALL_OW 259
30028: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30029: LD_VAR 0 6
30033: PUSH
30034: LD_INT 1
30036: ARRAY
30037: PPUSH
30038: LD_VAR 0 2
30042: PPUSH
30043: LD_VAR 0 5
30047: PPUSH
30048: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30052: LD_VAR 0 6
30056: PUSH
30057: LD_INT 1
30059: ARRAY
30060: PPUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: LD_VAR 0 4
30070: PPUSH
30071: CALL_OW 237
// end ;
30075: PPOPN 6
30077: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30078: LD_EXP 75
30082: PUSH
30083: LD_EXP 122
30087: AND
30088: IFFALSE 30167
30090: GO 30092
30092: DISABLE
30093: LD_INT 0
30095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30096: LD_ADDR_VAR 0 1
30100: PUSH
30101: LD_INT 22
30103: PUSH
30104: LD_OWVAR 2
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 30
30115: PUSH
30116: LD_INT 3
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PPUSH
30127: CALL_OW 69
30131: ST_TO_ADDR
// if not tmp then
30132: LD_VAR 0 1
30136: NOT
30137: IFFALSE 30141
// exit ;
30139: GO 30167
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30141: LD_VAR 0 1
30145: PUSH
30146: LD_INT 1
30148: PPUSH
30149: LD_VAR 0 1
30153: PPUSH
30154: CALL_OW 12
30158: ARRAY
30159: PPUSH
30160: LD_INT 1
30162: PPUSH
30163: CALL_OW 234
// end ;
30167: PPOPN 1
30169: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30170: LD_EXP 75
30174: PUSH
30175: LD_EXP 123
30179: AND
30180: IFFALSE 30292
30182: GO 30184
30184: DISABLE
30185: LD_INT 0
30187: PPUSH
30188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30189: LD_ADDR_VAR 0 2
30193: PUSH
30194: LD_INT 22
30196: PUSH
30197: LD_OWVAR 2
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 2
30208: PUSH
30209: LD_INT 30
30211: PUSH
30212: LD_INT 27
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 30
30221: PUSH
30222: LD_INT 26
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 30
30231: PUSH
30232: LD_INT 28
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PPUSH
30249: CALL_OW 69
30253: ST_TO_ADDR
// if not tmp then
30254: LD_VAR 0 2
30258: NOT
30259: IFFALSE 30263
// exit ;
30261: GO 30292
// for i in tmp do
30263: LD_ADDR_VAR 0 1
30267: PUSH
30268: LD_VAR 0 2
30272: PUSH
30273: FOR_IN
30274: IFFALSE 30290
// SetLives ( i , 1 ) ;
30276: LD_VAR 0 1
30280: PPUSH
30281: LD_INT 1
30283: PPUSH
30284: CALL_OW 234
30288: GO 30273
30290: POP
30291: POP
// end ;
30292: PPOPN 2
30294: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30295: LD_EXP 75
30299: PUSH
30300: LD_EXP 124
30304: AND
30305: IFFALSE 30592
30307: GO 30309
30309: DISABLE
30310: LD_INT 0
30312: PPUSH
30313: PPUSH
30314: PPUSH
// begin i := rand ( 1 , 7 ) ;
30315: LD_ADDR_VAR 0 1
30319: PUSH
30320: LD_INT 1
30322: PPUSH
30323: LD_INT 7
30325: PPUSH
30326: CALL_OW 12
30330: ST_TO_ADDR
// case i of 1 :
30331: LD_VAR 0 1
30335: PUSH
30336: LD_INT 1
30338: DOUBLE
30339: EQUAL
30340: IFTRUE 30344
30342: GO 30354
30344: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30345: LD_STRING earthquake(getX(game), 0, 32)
30347: PPUSH
30348: CALL_OW 559
30352: GO 30592
30354: LD_INT 2
30356: DOUBLE
30357: EQUAL
30358: IFTRUE 30362
30360: GO 30376
30362: POP
// begin ToLua ( displayStucuk(); ) ;
30363: LD_STRING displayStucuk();
30365: PPUSH
30366: CALL_OW 559
// ResetFog ;
30370: CALL_OW 335
// end ; 3 :
30374: GO 30592
30376: LD_INT 3
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30488
30384: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30385: LD_ADDR_VAR 0 2
30389: PUSH
30390: LD_INT 22
30392: PUSH
30393: LD_OWVAR 2
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 25
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PPUSH
30416: CALL_OW 69
30420: ST_TO_ADDR
// if not tmp then
30421: LD_VAR 0 2
30425: NOT
30426: IFFALSE 30430
// exit ;
30428: GO 30592
// un := tmp [ rand ( 1 , tmp ) ] ;
30430: LD_ADDR_VAR 0 3
30434: PUSH
30435: LD_VAR 0 2
30439: PUSH
30440: LD_INT 1
30442: PPUSH
30443: LD_VAR 0 2
30447: PPUSH
30448: CALL_OW 12
30452: ARRAY
30453: ST_TO_ADDR
// if Crawls ( un ) then
30454: LD_VAR 0 3
30458: PPUSH
30459: CALL_OW 318
30463: IFFALSE 30474
// ComWalk ( un ) ;
30465: LD_VAR 0 3
30469: PPUSH
30470: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30474: LD_VAR 0 3
30478: PPUSH
30479: LD_INT 8
30481: PPUSH
30482: CALL_OW 336
// end ; 4 :
30486: GO 30592
30488: LD_INT 4
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30570
30496: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30497: LD_ADDR_VAR 0 2
30501: PUSH
30502: LD_INT 22
30504: PUSH
30505: LD_OWVAR 2
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 30
30516: PUSH
30517: LD_INT 29
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PPUSH
30528: CALL_OW 69
30532: ST_TO_ADDR
// if not tmp then
30533: LD_VAR 0 2
30537: NOT
30538: IFFALSE 30542
// exit ;
30540: GO 30592
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30542: LD_VAR 0 2
30546: PUSH
30547: LD_INT 1
30549: ARRAY
30550: PPUSH
30551: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30555: LD_VAR 0 2
30559: PUSH
30560: LD_INT 1
30562: ARRAY
30563: PPUSH
30564: CALL_OW 65
// end ; 5 .. 7 :
30568: GO 30592
30570: LD_INT 5
30572: DOUBLE
30573: GREATEREQUAL
30574: IFFALSE 30582
30576: LD_INT 7
30578: DOUBLE
30579: LESSEQUAL
30580: IFTRUE 30584
30582: GO 30591
30584: POP
// StreamSibBomb ; end ;
30585: CALL 26829 0 0
30589: GO 30592
30591: POP
// end ;
30592: PPOPN 3
30594: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30595: LD_EXP 75
30599: PUSH
30600: LD_EXP 125
30604: AND
30605: IFFALSE 30761
30607: GO 30609
30609: DISABLE
30610: LD_INT 0
30612: PPUSH
30613: PPUSH
30614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_INT 81
30622: PUSH
30623: LD_OWVAR 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 21
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 21
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PPUSH
30664: CALL_OW 69
30668: ST_TO_ADDR
// if not tmp then
30669: LD_VAR 0 2
30673: NOT
30674: IFFALSE 30678
// exit ;
30676: GO 30761
// p := 0 ;
30678: LD_ADDR_VAR 0 3
30682: PUSH
30683: LD_INT 0
30685: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30686: LD_INT 35
30688: PPUSH
30689: CALL_OW 67
// p := p + 1 ;
30693: LD_ADDR_VAR 0 3
30697: PUSH
30698: LD_VAR 0 3
30702: PUSH
30703: LD_INT 1
30705: PLUS
30706: ST_TO_ADDR
// for i in tmp do
30707: LD_ADDR_VAR 0 1
30711: PUSH
30712: LD_VAR 0 2
30716: PUSH
30717: FOR_IN
30718: IFFALSE 30749
// if GetLives ( i ) < 1000 then
30720: LD_VAR 0 1
30724: PPUSH
30725: CALL_OW 256
30729: PUSH
30730: LD_INT 1000
30732: LESS
30733: IFFALSE 30747
// SetLives ( i , 1000 ) ;
30735: LD_VAR 0 1
30739: PPUSH
30740: LD_INT 1000
30742: PPUSH
30743: CALL_OW 234
30747: GO 30717
30749: POP
30750: POP
// until p > 20 ;
30751: LD_VAR 0 3
30755: PUSH
30756: LD_INT 20
30758: GREATER
30759: IFFALSE 30686
// end ;
30761: PPOPN 3
30763: END
// every 0 0$1 trigger StreamModeActive and sTime do
30764: LD_EXP 75
30768: PUSH
30769: LD_EXP 126
30773: AND
30774: IFFALSE 30809
30776: GO 30778
30778: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30779: LD_INT 28
30781: PPUSH
30782: LD_OWVAR 2
30786: PPUSH
30787: LD_INT 2
30789: PPUSH
30790: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30794: LD_INT 30
30796: PPUSH
30797: LD_OWVAR 2
30801: PPUSH
30802: LD_INT 2
30804: PPUSH
30805: CALL_OW 322
// end ;
30809: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30810: LD_EXP 75
30814: PUSH
30815: LD_EXP 127
30819: AND
30820: IFFALSE 30941
30822: GO 30824
30824: DISABLE
30825: LD_INT 0
30827: PPUSH
30828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30829: LD_ADDR_VAR 0 2
30833: PUSH
30834: LD_INT 22
30836: PUSH
30837: LD_OWVAR 2
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 21
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: LD_INT 23
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: PPUSH
30878: CALL_OW 69
30882: ST_TO_ADDR
// if not tmp then
30883: LD_VAR 0 2
30887: NOT
30888: IFFALSE 30892
// exit ;
30890: GO 30941
// for i in tmp do
30892: LD_ADDR_VAR 0 1
30896: PUSH
30897: LD_VAR 0 2
30901: PUSH
30902: FOR_IN
30903: IFFALSE 30939
// begin if Crawls ( i ) then
30905: LD_VAR 0 1
30909: PPUSH
30910: CALL_OW 318
30914: IFFALSE 30925
// ComWalk ( i ) ;
30916: LD_VAR 0 1
30920: PPUSH
30921: CALL_OW 138
// SetClass ( i , 2 ) ;
30925: LD_VAR 0 1
30929: PPUSH
30930: LD_INT 2
30932: PPUSH
30933: CALL_OW 336
// end ;
30937: GO 30902
30939: POP
30940: POP
// end ;
30941: PPOPN 2
30943: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30944: LD_EXP 75
30948: PUSH
30949: LD_EXP 128
30953: AND
30954: IFFALSE 31242
30956: GO 30958
30958: DISABLE
30959: LD_INT 0
30961: PPUSH
30962: PPUSH
30963: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30964: LD_OWVAR 2
30968: PPUSH
30969: LD_INT 9
30971: PPUSH
30972: LD_INT 1
30974: PPUSH
30975: LD_INT 1
30977: PPUSH
30978: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30982: LD_INT 9
30984: PPUSH
30985: LD_OWVAR 2
30989: PPUSH
30990: CALL_OW 343
// uc_side := 9 ;
30994: LD_ADDR_OWVAR 20
30998: PUSH
30999: LD_INT 9
31001: ST_TO_ADDR
// uc_nation := 2 ;
31002: LD_ADDR_OWVAR 21
31006: PUSH
31007: LD_INT 2
31009: ST_TO_ADDR
// hc_name := Dark Warrior ;
31010: LD_ADDR_OWVAR 26
31014: PUSH
31015: LD_STRING Dark Warrior
31017: ST_TO_ADDR
// hc_gallery :=  ;
31018: LD_ADDR_OWVAR 33
31022: PUSH
31023: LD_STRING 
31025: ST_TO_ADDR
// hc_noskilllimit := true ;
31026: LD_ADDR_OWVAR 76
31030: PUSH
31031: LD_INT 1
31033: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31034: LD_ADDR_OWVAR 31
31038: PUSH
31039: LD_INT 30
31041: PUSH
31042: LD_INT 30
31044: PUSH
31045: LD_INT 30
31047: PUSH
31048: LD_INT 30
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: ST_TO_ADDR
// un := CreateHuman ;
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: CALL_OW 44
31066: ST_TO_ADDR
// hc_noskilllimit := false ;
31067: LD_ADDR_OWVAR 76
31071: PUSH
31072: LD_INT 0
31074: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31075: LD_VAR 0 3
31079: PPUSH
31080: LD_INT 1
31082: PPUSH
31083: CALL_OW 51
// ToLua ( playRanger() ) ;
31087: LD_STRING playRanger()
31089: PPUSH
31090: CALL_OW 559
// p := 0 ;
31094: LD_ADDR_VAR 0 2
31098: PUSH
31099: LD_INT 0
31101: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31102: LD_INT 35
31104: PPUSH
31105: CALL_OW 67
// p := p + 1 ;
31109: LD_ADDR_VAR 0 2
31113: PUSH
31114: LD_VAR 0 2
31118: PUSH
31119: LD_INT 1
31121: PLUS
31122: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31123: LD_VAR 0 3
31127: PPUSH
31128: CALL_OW 256
31132: PUSH
31133: LD_INT 1000
31135: LESS
31136: IFFALSE 31150
// SetLives ( un , 1000 ) ;
31138: LD_VAR 0 3
31142: PPUSH
31143: LD_INT 1000
31145: PPUSH
31146: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31150: LD_VAR 0 3
31154: PPUSH
31155: LD_INT 81
31157: PUSH
31158: LD_OWVAR 2
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 91
31169: PUSH
31170: LD_VAR 0 3
31174: PUSH
31175: LD_INT 30
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PPUSH
31187: CALL_OW 69
31191: PPUSH
31192: LD_VAR 0 3
31196: PPUSH
31197: CALL_OW 74
31201: PPUSH
31202: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31206: LD_VAR 0 2
31210: PUSH
31211: LD_INT 80
31213: GREATER
31214: PUSH
31215: LD_VAR 0 3
31219: PPUSH
31220: CALL_OW 301
31224: OR
31225: IFFALSE 31102
// if un then
31227: LD_VAR 0 3
31231: IFFALSE 31242
// RemoveUnit ( un ) ;
31233: LD_VAR 0 3
31237: PPUSH
31238: CALL_OW 64
// end ;
31242: PPOPN 3
31244: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31245: LD_EXP 129
31249: IFFALSE 31365
31251: GO 31253
31253: DISABLE
31254: LD_INT 0
31256: PPUSH
31257: PPUSH
31258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31259: LD_ADDR_VAR 0 2
31263: PUSH
31264: LD_INT 81
31266: PUSH
31267: LD_OWVAR 2
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 21
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PPUSH
31290: CALL_OW 69
31294: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31295: LD_STRING playComputer()
31297: PPUSH
31298: CALL_OW 559
// if not tmp then
31302: LD_VAR 0 2
31306: NOT
31307: IFFALSE 31311
// exit ;
31309: GO 31365
// for i in tmp do
31311: LD_ADDR_VAR 0 1
31315: PUSH
31316: LD_VAR 0 2
31320: PUSH
31321: FOR_IN
31322: IFFALSE 31363
// for j := 1 to 4 do
31324: LD_ADDR_VAR 0 3
31328: PUSH
31329: DOUBLE
31330: LD_INT 1
31332: DEC
31333: ST_TO_ADDR
31334: LD_INT 4
31336: PUSH
31337: FOR_TO
31338: IFFALSE 31359
// SetSkill ( i , j , 10 ) ;
31340: LD_VAR 0 1
31344: PPUSH
31345: LD_VAR 0 3
31349: PPUSH
31350: LD_INT 10
31352: PPUSH
31353: CALL_OW 237
31357: GO 31337
31359: POP
31360: POP
31361: GO 31321
31363: POP
31364: POP
// end ;
31365: PPOPN 3
31367: END
// every 0 0$1 trigger s30 do var i , tmp ;
31368: LD_EXP 130
31372: IFFALSE 31441
31374: GO 31376
31376: DISABLE
31377: LD_INT 0
31379: PPUSH
31380: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31381: LD_ADDR_VAR 0 2
31385: PUSH
31386: LD_INT 22
31388: PUSH
31389: LD_OWVAR 2
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PPUSH
31398: CALL_OW 69
31402: ST_TO_ADDR
// if not tmp then
31403: LD_VAR 0 2
31407: NOT
31408: IFFALSE 31412
// exit ;
31410: GO 31441
// for i in tmp do
31412: LD_ADDR_VAR 0 1
31416: PUSH
31417: LD_VAR 0 2
31421: PUSH
31422: FOR_IN
31423: IFFALSE 31439
// SetLives ( i , 300 ) ;
31425: LD_VAR 0 1
31429: PPUSH
31430: LD_INT 300
31432: PPUSH
31433: CALL_OW 234
31437: GO 31422
31439: POP
31440: POP
// end ;
31441: PPOPN 2
31443: END
// every 0 0$1 trigger s60 do var i , tmp ;
31444: LD_EXP 131
31448: IFFALSE 31517
31450: GO 31452
31452: DISABLE
31453: LD_INT 0
31455: PPUSH
31456: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31457: LD_ADDR_VAR 0 2
31461: PUSH
31462: LD_INT 22
31464: PUSH
31465: LD_OWVAR 2
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PPUSH
31474: CALL_OW 69
31478: ST_TO_ADDR
// if not tmp then
31479: LD_VAR 0 2
31483: NOT
31484: IFFALSE 31488
// exit ;
31486: GO 31517
// for i in tmp do
31488: LD_ADDR_VAR 0 1
31492: PUSH
31493: LD_VAR 0 2
31497: PUSH
31498: FOR_IN
31499: IFFALSE 31515
// SetLives ( i , 600 ) ;
31501: LD_VAR 0 1
31505: PPUSH
31506: LD_INT 600
31508: PPUSH
31509: CALL_OW 234
31513: GO 31498
31515: POP
31516: POP
// end ;
31517: PPOPN 2
31519: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31520: LD_INT 0
31522: PPUSH
// case cmd of 301 :
31523: LD_VAR 0 1
31527: PUSH
31528: LD_INT 301
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31568
31536: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31537: LD_VAR 0 6
31541: PPUSH
31542: LD_VAR 0 7
31546: PPUSH
31547: LD_VAR 0 8
31551: PPUSH
31552: LD_VAR 0 4
31556: PPUSH
31557: LD_VAR 0 5
31561: PPUSH
31562: CALL 32769 0 5
31566: GO 31689
31568: LD_INT 302
31570: DOUBLE
31571: EQUAL
31572: IFTRUE 31576
31574: GO 31613
31576: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31577: LD_VAR 0 6
31581: PPUSH
31582: LD_VAR 0 7
31586: PPUSH
31587: LD_VAR 0 8
31591: PPUSH
31592: LD_VAR 0 9
31596: PPUSH
31597: LD_VAR 0 4
31601: PPUSH
31602: LD_VAR 0 5
31606: PPUSH
31607: CALL 32860 0 6
31611: GO 31689
31613: LD_INT 303
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31658
31621: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31622: LD_VAR 0 6
31626: PPUSH
31627: LD_VAR 0 7
31631: PPUSH
31632: LD_VAR 0 8
31636: PPUSH
31637: LD_VAR 0 9
31641: PPUSH
31642: LD_VAR 0 4
31646: PPUSH
31647: LD_VAR 0 5
31651: PPUSH
31652: CALL 31694 0 6
31656: GO 31689
31658: LD_INT 304
31660: DOUBLE
31661: EQUAL
31662: IFTRUE 31666
31664: GO 31688
31666: POP
// hHackTeleport ( unit , x , y ) ; end ;
31667: LD_VAR 0 2
31671: PPUSH
31672: LD_VAR 0 4
31676: PPUSH
31677: LD_VAR 0 5
31681: PPUSH
31682: CALL 33453 0 3
31686: GO 31689
31688: POP
// end ;
31689: LD_VAR 0 12
31693: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31694: LD_INT 0
31696: PPUSH
31697: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31698: LD_VAR 0 1
31702: PUSH
31703: LD_INT 1
31705: LESS
31706: PUSH
31707: LD_VAR 0 1
31711: PUSH
31712: LD_INT 3
31714: GREATER
31715: OR
31716: PUSH
31717: LD_VAR 0 5
31721: PPUSH
31722: LD_VAR 0 6
31726: PPUSH
31727: CALL_OW 428
31731: OR
31732: IFFALSE 31736
// exit ;
31734: GO 32456
// uc_side := your_side ;
31736: LD_ADDR_OWVAR 20
31740: PUSH
31741: LD_OWVAR 2
31745: ST_TO_ADDR
// uc_nation := nation ;
31746: LD_ADDR_OWVAR 21
31750: PUSH
31751: LD_VAR 0 1
31755: ST_TO_ADDR
// bc_level = 1 ;
31756: LD_ADDR_OWVAR 43
31760: PUSH
31761: LD_INT 1
31763: ST_TO_ADDR
// case btype of 1 :
31764: LD_VAR 0 2
31768: PUSH
31769: LD_INT 1
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31777
31775: GO 31788
31777: POP
// bc_type := b_depot ; 2 :
31778: LD_ADDR_OWVAR 42
31782: PUSH
31783: LD_INT 0
31785: ST_TO_ADDR
31786: GO 32400
31788: LD_INT 2
31790: DOUBLE
31791: EQUAL
31792: IFTRUE 31796
31794: GO 31807
31796: POP
// bc_type := b_warehouse ; 3 :
31797: LD_ADDR_OWVAR 42
31801: PUSH
31802: LD_INT 1
31804: ST_TO_ADDR
31805: GO 32400
31807: LD_INT 3
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31826
31815: POP
// bc_type := b_lab ; 4 .. 9 :
31816: LD_ADDR_OWVAR 42
31820: PUSH
31821: LD_INT 6
31823: ST_TO_ADDR
31824: GO 32400
31826: LD_INT 4
31828: DOUBLE
31829: GREATEREQUAL
31830: IFFALSE 31838
31832: LD_INT 9
31834: DOUBLE
31835: LESSEQUAL
31836: IFTRUE 31840
31838: GO 31892
31840: POP
// begin bc_type := b_lab_half ;
31841: LD_ADDR_OWVAR 42
31845: PUSH
31846: LD_INT 7
31848: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31849: LD_ADDR_OWVAR 44
31853: PUSH
31854: LD_INT 10
31856: PUSH
31857: LD_INT 11
31859: PUSH
31860: LD_INT 12
31862: PUSH
31863: LD_INT 15
31865: PUSH
31866: LD_INT 14
31868: PUSH
31869: LD_INT 13
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: PUSH
31880: LD_VAR 0 2
31884: PUSH
31885: LD_INT 3
31887: MINUS
31888: ARRAY
31889: ST_TO_ADDR
// end ; 10 .. 13 :
31890: GO 32400
31892: LD_INT 10
31894: DOUBLE
31895: GREATEREQUAL
31896: IFFALSE 31904
31898: LD_INT 13
31900: DOUBLE
31901: LESSEQUAL
31902: IFTRUE 31906
31904: GO 31983
31906: POP
// begin bc_type := b_lab_full ;
31907: LD_ADDR_OWVAR 42
31911: PUSH
31912: LD_INT 8
31914: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31915: LD_ADDR_OWVAR 44
31919: PUSH
31920: LD_INT 10
31922: PUSH
31923: LD_INT 12
31925: PUSH
31926: LD_INT 14
31928: PUSH
31929: LD_INT 13
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: PUSH
31938: LD_VAR 0 2
31942: PUSH
31943: LD_INT 9
31945: MINUS
31946: ARRAY
31947: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31948: LD_ADDR_OWVAR 45
31952: PUSH
31953: LD_INT 11
31955: PUSH
31956: LD_INT 15
31958: PUSH
31959: LD_INT 12
31961: PUSH
31962: LD_INT 15
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: PUSH
31971: LD_VAR 0 2
31975: PUSH
31976: LD_INT 9
31978: MINUS
31979: ARRAY
31980: ST_TO_ADDR
// end ; 14 :
31981: GO 32400
31983: LD_INT 14
31985: DOUBLE
31986: EQUAL
31987: IFTRUE 31991
31989: GO 32002
31991: POP
// bc_type := b_workshop ; 15 :
31992: LD_ADDR_OWVAR 42
31996: PUSH
31997: LD_INT 2
31999: ST_TO_ADDR
32000: GO 32400
32002: LD_INT 15
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32021
32010: POP
// bc_type := b_factory ; 16 :
32011: LD_ADDR_OWVAR 42
32015: PUSH
32016: LD_INT 3
32018: ST_TO_ADDR
32019: GO 32400
32021: LD_INT 16
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32040
32029: POP
// bc_type := b_ext_gun ; 17 :
32030: LD_ADDR_OWVAR 42
32034: PUSH
32035: LD_INT 17
32037: ST_TO_ADDR
32038: GO 32400
32040: LD_INT 17
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32076
32048: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32049: LD_ADDR_OWVAR 42
32053: PUSH
32054: LD_INT 19
32056: PUSH
32057: LD_INT 23
32059: PUSH
32060: LD_INT 19
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: LIST
32067: PUSH
32068: LD_VAR 0 1
32072: ARRAY
32073: ST_TO_ADDR
32074: GO 32400
32076: LD_INT 18
32078: DOUBLE
32079: EQUAL
32080: IFTRUE 32084
32082: GO 32095
32084: POP
// bc_type := b_ext_radar ; 19 :
32085: LD_ADDR_OWVAR 42
32089: PUSH
32090: LD_INT 20
32092: ST_TO_ADDR
32093: GO 32400
32095: LD_INT 19
32097: DOUBLE
32098: EQUAL
32099: IFTRUE 32103
32101: GO 32114
32103: POP
// bc_type := b_ext_radio ; 20 :
32104: LD_ADDR_OWVAR 42
32108: PUSH
32109: LD_INT 22
32111: ST_TO_ADDR
32112: GO 32400
32114: LD_INT 20
32116: DOUBLE
32117: EQUAL
32118: IFTRUE 32122
32120: GO 32133
32122: POP
// bc_type := b_ext_siberium ; 21 :
32123: LD_ADDR_OWVAR 42
32127: PUSH
32128: LD_INT 21
32130: ST_TO_ADDR
32131: GO 32400
32133: LD_INT 21
32135: DOUBLE
32136: EQUAL
32137: IFTRUE 32141
32139: GO 32152
32141: POP
// bc_type := b_ext_computer ; 22 :
32142: LD_ADDR_OWVAR 42
32146: PUSH
32147: LD_INT 24
32149: ST_TO_ADDR
32150: GO 32400
32152: LD_INT 22
32154: DOUBLE
32155: EQUAL
32156: IFTRUE 32160
32158: GO 32171
32160: POP
// bc_type := b_ext_track ; 23 :
32161: LD_ADDR_OWVAR 42
32165: PUSH
32166: LD_INT 16
32168: ST_TO_ADDR
32169: GO 32400
32171: LD_INT 23
32173: DOUBLE
32174: EQUAL
32175: IFTRUE 32179
32177: GO 32190
32179: POP
// bc_type := b_ext_laser ; 24 :
32180: LD_ADDR_OWVAR 42
32184: PUSH
32185: LD_INT 25
32187: ST_TO_ADDR
32188: GO 32400
32190: LD_INT 24
32192: DOUBLE
32193: EQUAL
32194: IFTRUE 32198
32196: GO 32209
32198: POP
// bc_type := b_control_tower ; 25 :
32199: LD_ADDR_OWVAR 42
32203: PUSH
32204: LD_INT 36
32206: ST_TO_ADDR
32207: GO 32400
32209: LD_INT 25
32211: DOUBLE
32212: EQUAL
32213: IFTRUE 32217
32215: GO 32228
32217: POP
// bc_type := b_breastwork ; 26 :
32218: LD_ADDR_OWVAR 42
32222: PUSH
32223: LD_INT 31
32225: ST_TO_ADDR
32226: GO 32400
32228: LD_INT 26
32230: DOUBLE
32231: EQUAL
32232: IFTRUE 32236
32234: GO 32247
32236: POP
// bc_type := b_bunker ; 27 :
32237: LD_ADDR_OWVAR 42
32241: PUSH
32242: LD_INT 32
32244: ST_TO_ADDR
32245: GO 32400
32247: LD_INT 27
32249: DOUBLE
32250: EQUAL
32251: IFTRUE 32255
32253: GO 32266
32255: POP
// bc_type := b_turret ; 28 :
32256: LD_ADDR_OWVAR 42
32260: PUSH
32261: LD_INT 33
32263: ST_TO_ADDR
32264: GO 32400
32266: LD_INT 28
32268: DOUBLE
32269: EQUAL
32270: IFTRUE 32274
32272: GO 32285
32274: POP
// bc_type := b_armoury ; 29 :
32275: LD_ADDR_OWVAR 42
32279: PUSH
32280: LD_INT 4
32282: ST_TO_ADDR
32283: GO 32400
32285: LD_INT 29
32287: DOUBLE
32288: EQUAL
32289: IFTRUE 32293
32291: GO 32304
32293: POP
// bc_type := b_barracks ; 30 :
32294: LD_ADDR_OWVAR 42
32298: PUSH
32299: LD_INT 5
32301: ST_TO_ADDR
32302: GO 32400
32304: LD_INT 30
32306: DOUBLE
32307: EQUAL
32308: IFTRUE 32312
32310: GO 32323
32312: POP
// bc_type := b_solar_power ; 31 :
32313: LD_ADDR_OWVAR 42
32317: PUSH
32318: LD_INT 27
32320: ST_TO_ADDR
32321: GO 32400
32323: LD_INT 31
32325: DOUBLE
32326: EQUAL
32327: IFTRUE 32331
32329: GO 32342
32331: POP
// bc_type := b_oil_power ; 32 :
32332: LD_ADDR_OWVAR 42
32336: PUSH
32337: LD_INT 26
32339: ST_TO_ADDR
32340: GO 32400
32342: LD_INT 32
32344: DOUBLE
32345: EQUAL
32346: IFTRUE 32350
32348: GO 32361
32350: POP
// bc_type := b_siberite_power ; 33 :
32351: LD_ADDR_OWVAR 42
32355: PUSH
32356: LD_INT 28
32358: ST_TO_ADDR
32359: GO 32400
32361: LD_INT 33
32363: DOUBLE
32364: EQUAL
32365: IFTRUE 32369
32367: GO 32380
32369: POP
// bc_type := b_oil_mine ; 34 :
32370: LD_ADDR_OWVAR 42
32374: PUSH
32375: LD_INT 29
32377: ST_TO_ADDR
32378: GO 32400
32380: LD_INT 34
32382: DOUBLE
32383: EQUAL
32384: IFTRUE 32388
32386: GO 32399
32388: POP
// bc_type := b_siberite_mine ; end ;
32389: LD_ADDR_OWVAR 42
32393: PUSH
32394: LD_INT 30
32396: ST_TO_ADDR
32397: GO 32400
32399: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32400: LD_ADDR_VAR 0 8
32404: PUSH
32405: LD_VAR 0 5
32409: PPUSH
32410: LD_VAR 0 6
32414: PPUSH
32415: LD_VAR 0 3
32419: PPUSH
32420: CALL_OW 47
32424: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32425: LD_OWVAR 42
32429: PUSH
32430: LD_INT 32
32432: PUSH
32433: LD_INT 33
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: IN
32440: IFFALSE 32456
// PlaceWeaponTurret ( b , weapon ) ;
32442: LD_VAR 0 8
32446: PPUSH
32447: LD_VAR 0 4
32451: PPUSH
32452: CALL_OW 431
// end ;
32456: LD_VAR 0 7
32460: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32461: LD_INT 0
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32467: LD_ADDR_VAR 0 4
32471: PUSH
32472: LD_INT 22
32474: PUSH
32475: LD_OWVAR 2
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 2
32486: PUSH
32487: LD_INT 30
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 30
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PPUSH
32516: CALL_OW 69
32520: ST_TO_ADDR
// if not tmp then
32521: LD_VAR 0 4
32525: NOT
32526: IFFALSE 32530
// exit ;
32528: GO 32589
// for i in tmp do
32530: LD_ADDR_VAR 0 2
32534: PUSH
32535: LD_VAR 0 4
32539: PUSH
32540: FOR_IN
32541: IFFALSE 32587
// for j = 1 to 3 do
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: DOUBLE
32549: LD_INT 1
32551: DEC
32552: ST_TO_ADDR
32553: LD_INT 3
32555: PUSH
32556: FOR_TO
32557: IFFALSE 32583
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32559: LD_VAR 0 2
32563: PPUSH
32564: CALL_OW 274
32568: PPUSH
32569: LD_VAR 0 3
32573: PPUSH
32574: LD_INT 99999
32576: PPUSH
32577: CALL_OW 277
32581: GO 32556
32583: POP
32584: POP
32585: GO 32540
32587: POP
32588: POP
// end ;
32589: LD_VAR 0 1
32593: RET
// export function hHackSetLevel10 ; var i , j ; begin
32594: LD_INT 0
32596: PPUSH
32597: PPUSH
32598: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32599: LD_ADDR_VAR 0 2
32603: PUSH
32604: LD_INT 21
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PPUSH
32614: CALL_OW 69
32618: PUSH
32619: FOR_IN
32620: IFFALSE 32672
// if IsSelected ( i ) then
32622: LD_VAR 0 2
32626: PPUSH
32627: CALL_OW 306
32631: IFFALSE 32670
// begin for j := 1 to 4 do
32633: LD_ADDR_VAR 0 3
32637: PUSH
32638: DOUBLE
32639: LD_INT 1
32641: DEC
32642: ST_TO_ADDR
32643: LD_INT 4
32645: PUSH
32646: FOR_TO
32647: IFFALSE 32668
// SetSkill ( i , j , 10 ) ;
32649: LD_VAR 0 2
32653: PPUSH
32654: LD_VAR 0 3
32658: PPUSH
32659: LD_INT 10
32661: PPUSH
32662: CALL_OW 237
32666: GO 32646
32668: POP
32669: POP
// end ;
32670: GO 32619
32672: POP
32673: POP
// end ;
32674: LD_VAR 0 1
32678: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32679: LD_INT 0
32681: PPUSH
32682: PPUSH
32683: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32684: LD_ADDR_VAR 0 2
32688: PUSH
32689: LD_INT 22
32691: PUSH
32692: LD_OWVAR 2
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 21
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PPUSH
32715: CALL_OW 69
32719: PUSH
32720: FOR_IN
32721: IFFALSE 32762
// begin for j := 1 to 4 do
32723: LD_ADDR_VAR 0 3
32727: PUSH
32728: DOUBLE
32729: LD_INT 1
32731: DEC
32732: ST_TO_ADDR
32733: LD_INT 4
32735: PUSH
32736: FOR_TO
32737: IFFALSE 32758
// SetSkill ( i , j , 10 ) ;
32739: LD_VAR 0 2
32743: PPUSH
32744: LD_VAR 0 3
32748: PPUSH
32749: LD_INT 10
32751: PPUSH
32752: CALL_OW 237
32756: GO 32736
32758: POP
32759: POP
// end ;
32760: GO 32720
32762: POP
32763: POP
// end ;
32764: LD_VAR 0 1
32768: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32769: LD_INT 0
32771: PPUSH
// uc_side := your_side ;
32772: LD_ADDR_OWVAR 20
32776: PUSH
32777: LD_OWVAR 2
32781: ST_TO_ADDR
// uc_nation := nation ;
32782: LD_ADDR_OWVAR 21
32786: PUSH
32787: LD_VAR 0 1
32791: ST_TO_ADDR
// InitHc ;
32792: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32796: LD_INT 0
32798: PPUSH
32799: LD_VAR 0 2
32803: PPUSH
32804: LD_VAR 0 3
32808: PPUSH
32809: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32813: LD_VAR 0 4
32817: PPUSH
32818: LD_VAR 0 5
32822: PPUSH
32823: CALL_OW 428
32827: PUSH
32828: LD_INT 0
32830: EQUAL
32831: IFFALSE 32855
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32833: CALL_OW 44
32837: PPUSH
32838: LD_VAR 0 4
32842: PPUSH
32843: LD_VAR 0 5
32847: PPUSH
32848: LD_INT 1
32850: PPUSH
32851: CALL_OW 48
// end ;
32855: LD_VAR 0 6
32859: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32860: LD_INT 0
32862: PPUSH
32863: PPUSH
// uc_side := your_side ;
32864: LD_ADDR_OWVAR 20
32868: PUSH
32869: LD_OWVAR 2
32873: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32874: LD_VAR 0 1
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: LD_INT 4
32890: PUSH
32891: LD_INT 5
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: IN
32901: IFFALSE 32913
// uc_nation := nation_american else
32903: LD_ADDR_OWVAR 21
32907: PUSH
32908: LD_INT 1
32910: ST_TO_ADDR
32911: GO 32956
// if chassis in [ 11 , 12 , 13 , 14 ] then
32913: LD_VAR 0 1
32917: PUSH
32918: LD_INT 11
32920: PUSH
32921: LD_INT 12
32923: PUSH
32924: LD_INT 13
32926: PUSH
32927: LD_INT 14
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: IN
32936: IFFALSE 32948
// uc_nation := nation_arabian else
32938: LD_ADDR_OWVAR 21
32942: PUSH
32943: LD_INT 2
32945: ST_TO_ADDR
32946: GO 32956
// uc_nation := nation_russian ;
32948: LD_ADDR_OWVAR 21
32952: PUSH
32953: LD_INT 3
32955: ST_TO_ADDR
// vc_chassis := chassis ;
32956: LD_ADDR_OWVAR 37
32960: PUSH
32961: LD_VAR 0 1
32965: ST_TO_ADDR
// vc_engine := engine ;
32966: LD_ADDR_OWVAR 39
32970: PUSH
32971: LD_VAR 0 2
32975: ST_TO_ADDR
// vc_control := control ;
32976: LD_ADDR_OWVAR 38
32980: PUSH
32981: LD_VAR 0 3
32985: ST_TO_ADDR
// vc_weapon := weapon ;
32986: LD_ADDR_OWVAR 40
32990: PUSH
32991: LD_VAR 0 4
32995: ST_TO_ADDR
// un := CreateVehicle ;
32996: LD_ADDR_VAR 0 8
33000: PUSH
33001: CALL_OW 45
33005: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33006: LD_VAR 0 8
33010: PPUSH
33011: LD_INT 0
33013: PPUSH
33014: LD_INT 5
33016: PPUSH
33017: CALL_OW 12
33021: PPUSH
33022: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33026: LD_VAR 0 8
33030: PPUSH
33031: LD_VAR 0 5
33035: PPUSH
33036: LD_VAR 0 6
33040: PPUSH
33041: LD_INT 1
33043: PPUSH
33044: CALL_OW 48
// end ;
33048: LD_VAR 0 7
33052: RET
// export hInvincible ; every 1 do
33053: GO 33055
33055: DISABLE
// hInvincible := [ ] ;
33056: LD_ADDR_EXP 132
33060: PUSH
33061: EMPTY
33062: ST_TO_ADDR
33063: END
// every 10 do var i ;
33064: GO 33066
33066: DISABLE
33067: LD_INT 0
33069: PPUSH
// begin enable ;
33070: ENABLE
// if not hInvincible then
33071: LD_EXP 132
33075: NOT
33076: IFFALSE 33080
// exit ;
33078: GO 33124
// for i in hInvincible do
33080: LD_ADDR_VAR 0 1
33084: PUSH
33085: LD_EXP 132
33089: PUSH
33090: FOR_IN
33091: IFFALSE 33122
// if GetLives ( i ) < 1000 then
33093: LD_VAR 0 1
33097: PPUSH
33098: CALL_OW 256
33102: PUSH
33103: LD_INT 1000
33105: LESS
33106: IFFALSE 33120
// SetLives ( i , 1000 ) ;
33108: LD_VAR 0 1
33112: PPUSH
33113: LD_INT 1000
33115: PPUSH
33116: CALL_OW 234
33120: GO 33090
33122: POP
33123: POP
// end ;
33124: PPOPN 1
33126: END
// export function hHackInvincible ; var i ; begin
33127: LD_INT 0
33129: PPUSH
33130: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33131: LD_ADDR_VAR 0 2
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 21
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 21
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: PPUSH
33164: CALL_OW 69
33168: PUSH
33169: FOR_IN
33170: IFFALSE 33231
// if IsSelected ( i ) then
33172: LD_VAR 0 2
33176: PPUSH
33177: CALL_OW 306
33181: IFFALSE 33229
// begin if i in hInvincible then
33183: LD_VAR 0 2
33187: PUSH
33188: LD_EXP 132
33192: IN
33193: IFFALSE 33213
// hInvincible := hInvincible diff i else
33195: LD_ADDR_EXP 132
33199: PUSH
33200: LD_EXP 132
33204: PUSH
33205: LD_VAR 0 2
33209: DIFF
33210: ST_TO_ADDR
33211: GO 33229
// hInvincible := hInvincible union i ;
33213: LD_ADDR_EXP 132
33217: PUSH
33218: LD_EXP 132
33222: PUSH
33223: LD_VAR 0 2
33227: UNION
33228: ST_TO_ADDR
// end ;
33229: GO 33169
33231: POP
33232: POP
// end ;
33233: LD_VAR 0 1
33237: RET
// export function hHackInvisible ; var i , j ; begin
33238: LD_INT 0
33240: PPUSH
33241: PPUSH
33242: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33243: LD_ADDR_VAR 0 2
33247: PUSH
33248: LD_INT 21
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PPUSH
33258: CALL_OW 69
33262: PUSH
33263: FOR_IN
33264: IFFALSE 33288
// if IsSelected ( i ) then
33266: LD_VAR 0 2
33270: PPUSH
33271: CALL_OW 306
33275: IFFALSE 33286
// ComForceInvisible ( i ) ;
33277: LD_VAR 0 2
33281: PPUSH
33282: CALL_OW 496
33286: GO 33263
33288: POP
33289: POP
// end ;
33290: LD_VAR 0 1
33294: RET
// export function hHackChangeYourSide ; begin
33295: LD_INT 0
33297: PPUSH
// if your_side = 8 then
33298: LD_OWVAR 2
33302: PUSH
33303: LD_INT 8
33305: EQUAL
33306: IFFALSE 33318
// your_side := 0 else
33308: LD_ADDR_OWVAR 2
33312: PUSH
33313: LD_INT 0
33315: ST_TO_ADDR
33316: GO 33332
// your_side := your_side + 1 ;
33318: LD_ADDR_OWVAR 2
33322: PUSH
33323: LD_OWVAR 2
33327: PUSH
33328: LD_INT 1
33330: PLUS
33331: ST_TO_ADDR
// end ;
33332: LD_VAR 0 1
33336: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33337: LD_INT 0
33339: PPUSH
33340: PPUSH
33341: PPUSH
// for i in all_units do
33342: LD_ADDR_VAR 0 2
33346: PUSH
33347: LD_OWVAR 3
33351: PUSH
33352: FOR_IN
33353: IFFALSE 33431
// if IsSelected ( i ) then
33355: LD_VAR 0 2
33359: PPUSH
33360: CALL_OW 306
33364: IFFALSE 33429
// begin j := GetSide ( i ) ;
33366: LD_ADDR_VAR 0 3
33370: PUSH
33371: LD_VAR 0 2
33375: PPUSH
33376: CALL_OW 255
33380: ST_TO_ADDR
// if j = 8 then
33381: LD_VAR 0 3
33385: PUSH
33386: LD_INT 8
33388: EQUAL
33389: IFFALSE 33401
// j := 0 else
33391: LD_ADDR_VAR 0 3
33395: PUSH
33396: LD_INT 0
33398: ST_TO_ADDR
33399: GO 33415
// j := j + 1 ;
33401: LD_ADDR_VAR 0 3
33405: PUSH
33406: LD_VAR 0 3
33410: PUSH
33411: LD_INT 1
33413: PLUS
33414: ST_TO_ADDR
// SetSide ( i , j ) ;
33415: LD_VAR 0 2
33419: PPUSH
33420: LD_VAR 0 3
33424: PPUSH
33425: CALL_OW 235
// end ;
33429: GO 33352
33431: POP
33432: POP
// end ;
33433: LD_VAR 0 1
33437: RET
// export function hHackFog ; begin
33438: LD_INT 0
33440: PPUSH
// FogOff ( true ) ;
33441: LD_INT 1
33443: PPUSH
33444: CALL_OW 344
// end ;
33448: LD_VAR 0 1
33452: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33453: LD_INT 0
33455: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33456: LD_VAR 0 1
33460: PPUSH
33461: LD_VAR 0 2
33465: PPUSH
33466: LD_VAR 0 3
33470: PPUSH
33471: LD_INT 1
33473: PPUSH
33474: LD_INT 1
33476: PPUSH
33477: CALL_OW 483
// CenterOnXY ( x , y ) ;
33481: LD_VAR 0 2
33485: PPUSH
33486: LD_VAR 0 3
33490: PPUSH
33491: CALL_OW 84
// end ; end_of_file end_of_file
33495: LD_VAR 0 4
33499: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33500: LD_INT 0
33502: PPUSH
33503: PPUSH
// if exist_mode then
33504: LD_VAR 0 2
33508: IFFALSE 33533
// unit := CreateCharacter ( prefix & ident ) else
33510: LD_ADDR_VAR 0 5
33514: PUSH
33515: LD_VAR 0 3
33519: PUSH
33520: LD_VAR 0 1
33524: STR
33525: PPUSH
33526: CALL_OW 34
33530: ST_TO_ADDR
33531: GO 33548
// unit := NewCharacter ( ident ) ;
33533: LD_ADDR_VAR 0 5
33537: PUSH
33538: LD_VAR 0 1
33542: PPUSH
33543: CALL_OW 25
33547: ST_TO_ADDR
// result := unit ;
33548: LD_ADDR_VAR 0 4
33552: PUSH
33553: LD_VAR 0 5
33557: ST_TO_ADDR
// end ;
33558: LD_VAR 0 4
33562: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33563: LD_INT 0
33565: PPUSH
33566: PPUSH
// if not side or not nation then
33567: LD_VAR 0 1
33571: NOT
33572: PUSH
33573: LD_VAR 0 2
33577: NOT
33578: OR
33579: IFFALSE 33583
// exit ;
33581: GO 34351
// case nation of nation_american :
33583: LD_VAR 0 2
33587: PUSH
33588: LD_INT 1
33590: DOUBLE
33591: EQUAL
33592: IFTRUE 33596
33594: GO 33810
33596: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33597: LD_ADDR_VAR 0 4
33601: PUSH
33602: LD_INT 35
33604: PUSH
33605: LD_INT 45
33607: PUSH
33608: LD_INT 46
33610: PUSH
33611: LD_INT 47
33613: PUSH
33614: LD_INT 82
33616: PUSH
33617: LD_INT 83
33619: PUSH
33620: LD_INT 84
33622: PUSH
33623: LD_INT 85
33625: PUSH
33626: LD_INT 86
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 6
33637: PUSH
33638: LD_INT 15
33640: PUSH
33641: LD_INT 16
33643: PUSH
33644: LD_INT 7
33646: PUSH
33647: LD_INT 12
33649: PUSH
33650: LD_INT 13
33652: PUSH
33653: LD_INT 10
33655: PUSH
33656: LD_INT 14
33658: PUSH
33659: LD_INT 20
33661: PUSH
33662: LD_INT 21
33664: PUSH
33665: LD_INT 22
33667: PUSH
33668: LD_INT 25
33670: PUSH
33671: LD_INT 32
33673: PUSH
33674: LD_INT 27
33676: PUSH
33677: LD_INT 36
33679: PUSH
33680: LD_INT 69
33682: PUSH
33683: LD_INT 39
33685: PUSH
33686: LD_INT 34
33688: PUSH
33689: LD_INT 40
33691: PUSH
33692: LD_INT 48
33694: PUSH
33695: LD_INT 49
33697: PUSH
33698: LD_INT 50
33700: PUSH
33701: LD_INT 51
33703: PUSH
33704: LD_INT 52
33706: PUSH
33707: LD_INT 53
33709: PUSH
33710: LD_INT 54
33712: PUSH
33713: LD_INT 55
33715: PUSH
33716: LD_INT 56
33718: PUSH
33719: LD_INT 57
33721: PUSH
33722: LD_INT 58
33724: PUSH
33725: LD_INT 59
33727: PUSH
33728: LD_INT 60
33730: PUSH
33731: LD_INT 61
33733: PUSH
33734: LD_INT 62
33736: PUSH
33737: LD_INT 80
33739: PUSH
33740: LD_INT 82
33742: PUSH
33743: LD_INT 83
33745: PUSH
33746: LD_INT 84
33748: PUSH
33749: LD_INT 85
33751: PUSH
33752: LD_INT 86
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: ST_TO_ADDR
33808: GO 34275
33810: LD_INT 2
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 34044
33818: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33819: LD_ADDR_VAR 0 4
33823: PUSH
33824: LD_INT 35
33826: PUSH
33827: LD_INT 45
33829: PUSH
33830: LD_INT 46
33832: PUSH
33833: LD_INT 47
33835: PUSH
33836: LD_INT 82
33838: PUSH
33839: LD_INT 83
33841: PUSH
33842: LD_INT 84
33844: PUSH
33845: LD_INT 85
33847: PUSH
33848: LD_INT 87
33850: PUSH
33851: LD_INT 70
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: LD_INT 11
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: LD_INT 4
33865: PUSH
33866: LD_INT 5
33868: PUSH
33869: LD_INT 6
33871: PUSH
33872: LD_INT 15
33874: PUSH
33875: LD_INT 18
33877: PUSH
33878: LD_INT 7
33880: PUSH
33881: LD_INT 17
33883: PUSH
33884: LD_INT 8
33886: PUSH
33887: LD_INT 20
33889: PUSH
33890: LD_INT 21
33892: PUSH
33893: LD_INT 22
33895: PUSH
33896: LD_INT 72
33898: PUSH
33899: LD_INT 26
33901: PUSH
33902: LD_INT 69
33904: PUSH
33905: LD_INT 39
33907: PUSH
33908: LD_INT 40
33910: PUSH
33911: LD_INT 41
33913: PUSH
33914: LD_INT 42
33916: PUSH
33917: LD_INT 43
33919: PUSH
33920: LD_INT 48
33922: PUSH
33923: LD_INT 49
33925: PUSH
33926: LD_INT 50
33928: PUSH
33929: LD_INT 51
33931: PUSH
33932: LD_INT 52
33934: PUSH
33935: LD_INT 53
33937: PUSH
33938: LD_INT 54
33940: PUSH
33941: LD_INT 55
33943: PUSH
33944: LD_INT 56
33946: PUSH
33947: LD_INT 60
33949: PUSH
33950: LD_INT 61
33952: PUSH
33953: LD_INT 62
33955: PUSH
33956: LD_INT 66
33958: PUSH
33959: LD_INT 67
33961: PUSH
33962: LD_INT 68
33964: PUSH
33965: LD_INT 81
33967: PUSH
33968: LD_INT 82
33970: PUSH
33971: LD_INT 83
33973: PUSH
33974: LD_INT 84
33976: PUSH
33977: LD_INT 85
33979: PUSH
33980: LD_INT 87
33982: PUSH
33983: LD_INT 88
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: ST_TO_ADDR
34042: GO 34275
34044: LD_INT 3
34046: DOUBLE
34047: EQUAL
34048: IFTRUE 34052
34050: GO 34274
34052: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34053: LD_ADDR_VAR 0 4
34057: PUSH
34058: LD_INT 46
34060: PUSH
34061: LD_INT 47
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: LD_INT 82
34072: PUSH
34073: LD_INT 83
34075: PUSH
34076: LD_INT 84
34078: PUSH
34079: LD_INT 85
34081: PUSH
34082: LD_INT 86
34084: PUSH
34085: LD_INT 11
34087: PUSH
34088: LD_INT 9
34090: PUSH
34091: LD_INT 20
34093: PUSH
34094: LD_INT 19
34096: PUSH
34097: LD_INT 21
34099: PUSH
34100: LD_INT 24
34102: PUSH
34103: LD_INT 22
34105: PUSH
34106: LD_INT 25
34108: PUSH
34109: LD_INT 28
34111: PUSH
34112: LD_INT 29
34114: PUSH
34115: LD_INT 30
34117: PUSH
34118: LD_INT 31
34120: PUSH
34121: LD_INT 37
34123: PUSH
34124: LD_INT 38
34126: PUSH
34127: LD_INT 32
34129: PUSH
34130: LD_INT 27
34132: PUSH
34133: LD_INT 33
34135: PUSH
34136: LD_INT 69
34138: PUSH
34139: LD_INT 39
34141: PUSH
34142: LD_INT 34
34144: PUSH
34145: LD_INT 40
34147: PUSH
34148: LD_INT 71
34150: PUSH
34151: LD_INT 23
34153: PUSH
34154: LD_INT 44
34156: PUSH
34157: LD_INT 48
34159: PUSH
34160: LD_INT 49
34162: PUSH
34163: LD_INT 50
34165: PUSH
34166: LD_INT 51
34168: PUSH
34169: LD_INT 52
34171: PUSH
34172: LD_INT 53
34174: PUSH
34175: LD_INT 54
34177: PUSH
34178: LD_INT 55
34180: PUSH
34181: LD_INT 56
34183: PUSH
34184: LD_INT 57
34186: PUSH
34187: LD_INT 58
34189: PUSH
34190: LD_INT 59
34192: PUSH
34193: LD_INT 63
34195: PUSH
34196: LD_INT 64
34198: PUSH
34199: LD_INT 65
34201: PUSH
34202: LD_INT 82
34204: PUSH
34205: LD_INT 83
34207: PUSH
34208: LD_INT 84
34210: PUSH
34211: LD_INT 85
34213: PUSH
34214: LD_INT 86
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: ST_TO_ADDR
34272: GO 34275
34274: POP
// if state > - 1 and state < 3 then
34275: LD_VAR 0 3
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: GREATER
34284: PUSH
34285: LD_VAR 0 3
34289: PUSH
34290: LD_INT 3
34292: LESS
34293: AND
34294: IFFALSE 34351
// for i in result do
34296: LD_ADDR_VAR 0 5
34300: PUSH
34301: LD_VAR 0 4
34305: PUSH
34306: FOR_IN
34307: IFFALSE 34349
// if GetTech ( i , side ) <> state then
34309: LD_VAR 0 5
34313: PPUSH
34314: LD_VAR 0 1
34318: PPUSH
34319: CALL_OW 321
34323: PUSH
34324: LD_VAR 0 3
34328: NONEQUAL
34329: IFFALSE 34347
// result := result diff i ;
34331: LD_ADDR_VAR 0 4
34335: PUSH
34336: LD_VAR 0 4
34340: PUSH
34341: LD_VAR 0 5
34345: DIFF
34346: ST_TO_ADDR
34347: GO 34306
34349: POP
34350: POP
// end ;
34351: LD_VAR 0 4
34355: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34356: LD_INT 0
34358: PPUSH
34359: PPUSH
34360: PPUSH
// result := true ;
34361: LD_ADDR_VAR 0 3
34365: PUSH
34366: LD_INT 1
34368: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34369: LD_ADDR_VAR 0 5
34373: PUSH
34374: LD_VAR 0 2
34378: PPUSH
34379: CALL_OW 480
34383: ST_TO_ADDR
// if not tmp then
34384: LD_VAR 0 5
34388: NOT
34389: IFFALSE 34393
// exit ;
34391: GO 34442
// for i in tmp do
34393: LD_ADDR_VAR 0 4
34397: PUSH
34398: LD_VAR 0 5
34402: PUSH
34403: FOR_IN
34404: IFFALSE 34440
// if GetTech ( i , side ) <> state_researched then
34406: LD_VAR 0 4
34410: PPUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: CALL_OW 321
34420: PUSH
34421: LD_INT 2
34423: NONEQUAL
34424: IFFALSE 34438
// begin result := false ;
34426: LD_ADDR_VAR 0 3
34430: PUSH
34431: LD_INT 0
34433: ST_TO_ADDR
// exit ;
34434: POP
34435: POP
34436: GO 34442
// end ;
34438: GO 34403
34440: POP
34441: POP
// end ;
34442: LD_VAR 0 3
34446: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34447: LD_INT 0
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
34453: PPUSH
34454: PPUSH
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34462: LD_VAR 0 1
34466: NOT
34467: PUSH
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL_OW 257
34477: PUSH
34478: LD_INT 9
34480: NONEQUAL
34481: OR
34482: IFFALSE 34486
// exit ;
34484: GO 35059
// side := GetSide ( unit ) ;
34486: LD_ADDR_VAR 0 9
34490: PUSH
34491: LD_VAR 0 1
34495: PPUSH
34496: CALL_OW 255
34500: ST_TO_ADDR
// tech_space := tech_spacanom ;
34501: LD_ADDR_VAR 0 12
34505: PUSH
34506: LD_INT 29
34508: ST_TO_ADDR
// tech_time := tech_taurad ;
34509: LD_ADDR_VAR 0 13
34513: PUSH
34514: LD_INT 28
34516: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34517: LD_ADDR_VAR 0 11
34521: PUSH
34522: LD_VAR 0 1
34526: PPUSH
34527: CALL_OW 310
34531: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34532: LD_VAR 0 11
34536: PPUSH
34537: CALL_OW 247
34541: PUSH
34542: LD_INT 2
34544: EQUAL
34545: IFFALSE 34549
// exit ;
34547: GO 35059
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34549: LD_ADDR_VAR 0 8
34553: PUSH
34554: LD_INT 81
34556: PUSH
34557: LD_VAR 0 9
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 3
34568: PUSH
34569: LD_INT 21
34571: PUSH
34572: LD_INT 3
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PPUSH
34587: CALL_OW 69
34591: ST_TO_ADDR
// if not tmp then
34592: LD_VAR 0 8
34596: NOT
34597: IFFALSE 34601
// exit ;
34599: GO 35059
// if in_unit then
34601: LD_VAR 0 11
34605: IFFALSE 34629
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34607: LD_ADDR_VAR 0 10
34611: PUSH
34612: LD_VAR 0 8
34616: PPUSH
34617: LD_VAR 0 11
34621: PPUSH
34622: CALL_OW 74
34626: ST_TO_ADDR
34627: GO 34649
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34629: LD_ADDR_VAR 0 10
34633: PUSH
34634: LD_VAR 0 8
34638: PPUSH
34639: LD_VAR 0 1
34643: PPUSH
34644: CALL_OW 74
34648: ST_TO_ADDR
// if not enemy then
34649: LD_VAR 0 10
34653: NOT
34654: IFFALSE 34658
// exit ;
34656: GO 35059
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34658: LD_VAR 0 11
34662: PUSH
34663: LD_VAR 0 11
34667: PPUSH
34668: LD_VAR 0 10
34672: PPUSH
34673: CALL_OW 296
34677: PUSH
34678: LD_INT 13
34680: GREATER
34681: AND
34682: PUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: LD_VAR 0 10
34692: PPUSH
34693: CALL_OW 296
34697: PUSH
34698: LD_INT 12
34700: GREATER
34701: OR
34702: IFFALSE 34706
// exit ;
34704: GO 35059
// missile := [ 1 ] ;
34706: LD_ADDR_VAR 0 14
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: EMPTY
34715: LIST
34716: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34717: LD_VAR 0 9
34721: PPUSH
34722: LD_VAR 0 12
34726: PPUSH
34727: CALL_OW 325
34731: IFFALSE 34760
// missile := Replace ( missile , missile + 1 , 2 ) ;
34733: LD_ADDR_VAR 0 14
34737: PUSH
34738: LD_VAR 0 14
34742: PPUSH
34743: LD_VAR 0 14
34747: PUSH
34748: LD_INT 1
34750: PLUS
34751: PPUSH
34752: LD_INT 2
34754: PPUSH
34755: CALL_OW 1
34759: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34760: LD_VAR 0 9
34764: PPUSH
34765: LD_VAR 0 13
34769: PPUSH
34770: CALL_OW 325
34774: PUSH
34775: LD_VAR 0 10
34779: PPUSH
34780: CALL_OW 255
34784: PPUSH
34785: LD_VAR 0 13
34789: PPUSH
34790: CALL_OW 325
34794: NOT
34795: AND
34796: IFFALSE 34825
// missile := Replace ( missile , missile + 1 , 3 ) ;
34798: LD_ADDR_VAR 0 14
34802: PUSH
34803: LD_VAR 0 14
34807: PPUSH
34808: LD_VAR 0 14
34812: PUSH
34813: LD_INT 1
34815: PLUS
34816: PPUSH
34817: LD_INT 3
34819: PPUSH
34820: CALL_OW 1
34824: ST_TO_ADDR
// if missile < 2 then
34825: LD_VAR 0 14
34829: PUSH
34830: LD_INT 2
34832: LESS
34833: IFFALSE 34837
// exit ;
34835: GO 35059
// x := GetX ( enemy ) ;
34837: LD_ADDR_VAR 0 4
34841: PUSH
34842: LD_VAR 0 10
34846: PPUSH
34847: CALL_OW 250
34851: ST_TO_ADDR
// y := GetY ( enemy ) ;
34852: LD_ADDR_VAR 0 5
34856: PUSH
34857: LD_VAR 0 10
34861: PPUSH
34862: CALL_OW 251
34866: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34867: LD_ADDR_VAR 0 6
34871: PUSH
34872: LD_VAR 0 4
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PPUSH
34881: LD_INT 1
34883: PPUSH
34884: CALL_OW 12
34888: PLUS
34889: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34890: LD_ADDR_VAR 0 7
34894: PUSH
34895: LD_VAR 0 5
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PPUSH
34904: LD_INT 1
34906: PPUSH
34907: CALL_OW 12
34911: PLUS
34912: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34913: LD_VAR 0 6
34917: PPUSH
34918: LD_VAR 0 7
34922: PPUSH
34923: CALL_OW 488
34927: NOT
34928: IFFALSE 34950
// begin _x := x ;
34930: LD_ADDR_VAR 0 6
34934: PUSH
34935: LD_VAR 0 4
34939: ST_TO_ADDR
// _y := y ;
34940: LD_ADDR_VAR 0 7
34944: PUSH
34945: LD_VAR 0 5
34949: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34950: LD_ADDR_VAR 0 3
34954: PUSH
34955: LD_INT 1
34957: PPUSH
34958: LD_VAR 0 14
34962: PPUSH
34963: CALL_OW 12
34967: ST_TO_ADDR
// case i of 1 :
34968: LD_VAR 0 3
34972: PUSH
34973: LD_INT 1
34975: DOUBLE
34976: EQUAL
34977: IFTRUE 34981
34979: GO 34998
34981: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34982: LD_VAR 0 1
34986: PPUSH
34987: LD_VAR 0 10
34991: PPUSH
34992: CALL_OW 115
34996: GO 35059
34998: LD_INT 2
35000: DOUBLE
35001: EQUAL
35002: IFTRUE 35006
35004: GO 35028
35006: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35007: LD_VAR 0 1
35011: PPUSH
35012: LD_VAR 0 6
35016: PPUSH
35017: LD_VAR 0 7
35021: PPUSH
35022: CALL_OW 153
35026: GO 35059
35028: LD_INT 3
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35058
35036: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35037: LD_VAR 0 1
35041: PPUSH
35042: LD_VAR 0 6
35046: PPUSH
35047: LD_VAR 0 7
35051: PPUSH
35052: CALL_OW 154
35056: GO 35059
35058: POP
// end ;
35059: LD_VAR 0 2
35063: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35064: LD_INT 0
35066: PPUSH
35067: PPUSH
35068: PPUSH
35069: PPUSH
35070: PPUSH
35071: PPUSH
// if not unit or not building then
35072: LD_VAR 0 1
35076: NOT
35077: PUSH
35078: LD_VAR 0 2
35082: NOT
35083: OR
35084: IFFALSE 35088
// exit ;
35086: GO 35246
// x := GetX ( building ) ;
35088: LD_ADDR_VAR 0 5
35092: PUSH
35093: LD_VAR 0 2
35097: PPUSH
35098: CALL_OW 250
35102: ST_TO_ADDR
// y := GetY ( building ) ;
35103: LD_ADDR_VAR 0 6
35107: PUSH
35108: LD_VAR 0 2
35112: PPUSH
35113: CALL_OW 251
35117: ST_TO_ADDR
// for i = 0 to 5 do
35118: LD_ADDR_VAR 0 4
35122: PUSH
35123: DOUBLE
35124: LD_INT 0
35126: DEC
35127: ST_TO_ADDR
35128: LD_INT 5
35130: PUSH
35131: FOR_TO
35132: IFFALSE 35244
// begin _x := ShiftX ( x , i , 3 ) ;
35134: LD_ADDR_VAR 0 7
35138: PUSH
35139: LD_VAR 0 5
35143: PPUSH
35144: LD_VAR 0 4
35148: PPUSH
35149: LD_INT 3
35151: PPUSH
35152: CALL_OW 272
35156: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35157: LD_ADDR_VAR 0 8
35161: PUSH
35162: LD_VAR 0 6
35166: PPUSH
35167: LD_VAR 0 4
35171: PPUSH
35172: LD_INT 3
35174: PPUSH
35175: CALL_OW 273
35179: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35180: LD_VAR 0 7
35184: PPUSH
35185: LD_VAR 0 8
35189: PPUSH
35190: CALL_OW 488
35194: NOT
35195: IFFALSE 35199
// continue ;
35197: GO 35131
// if HexInfo ( _x , _y ) = 0 then
35199: LD_VAR 0 7
35203: PPUSH
35204: LD_VAR 0 8
35208: PPUSH
35209: CALL_OW 428
35213: PUSH
35214: LD_INT 0
35216: EQUAL
35217: IFFALSE 35242
// begin ComMoveXY ( unit , _x , _y ) ;
35219: LD_VAR 0 1
35223: PPUSH
35224: LD_VAR 0 7
35228: PPUSH
35229: LD_VAR 0 8
35233: PPUSH
35234: CALL_OW 111
// exit ;
35238: POP
35239: POP
35240: GO 35246
// end ; end ;
35242: GO 35131
35244: POP
35245: POP
// end ;
35246: LD_VAR 0 3
35250: RET
// export function ScanBase ( side , base_area ) ; begin
35251: LD_INT 0
35253: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35254: LD_ADDR_VAR 0 3
35258: PUSH
35259: LD_VAR 0 2
35263: PPUSH
35264: LD_INT 81
35266: PUSH
35267: LD_VAR 0 1
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PPUSH
35276: CALL_OW 70
35280: ST_TO_ADDR
// end ;
35281: LD_VAR 0 3
35285: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35286: LD_INT 0
35288: PPUSH
35289: PPUSH
35290: PPUSH
35291: PPUSH
// result := false ;
35292: LD_ADDR_VAR 0 2
35296: PUSH
35297: LD_INT 0
35299: ST_TO_ADDR
// side := GetSide ( unit ) ;
35300: LD_ADDR_VAR 0 3
35304: PUSH
35305: LD_VAR 0 1
35309: PPUSH
35310: CALL_OW 255
35314: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35315: LD_ADDR_VAR 0 4
35319: PUSH
35320: LD_VAR 0 1
35324: PPUSH
35325: CALL_OW 248
35329: ST_TO_ADDR
// case nat of 1 :
35330: LD_VAR 0 4
35334: PUSH
35335: LD_INT 1
35337: DOUBLE
35338: EQUAL
35339: IFTRUE 35343
35341: GO 35354
35343: POP
// tech := tech_lassight ; 2 :
35344: LD_ADDR_VAR 0 5
35348: PUSH
35349: LD_INT 12
35351: ST_TO_ADDR
35352: GO 35393
35354: LD_INT 2
35356: DOUBLE
35357: EQUAL
35358: IFTRUE 35362
35360: GO 35373
35362: POP
// tech := tech_mortar ; 3 :
35363: LD_ADDR_VAR 0 5
35367: PUSH
35368: LD_INT 41
35370: ST_TO_ADDR
35371: GO 35393
35373: LD_INT 3
35375: DOUBLE
35376: EQUAL
35377: IFTRUE 35381
35379: GO 35392
35381: POP
// tech := tech_bazooka ; end ;
35382: LD_ADDR_VAR 0 5
35386: PUSH
35387: LD_INT 44
35389: ST_TO_ADDR
35390: GO 35393
35392: POP
// if Researched ( side , tech ) then
35393: LD_VAR 0 3
35397: PPUSH
35398: LD_VAR 0 5
35402: PPUSH
35403: CALL_OW 325
35407: IFFALSE 35434
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35409: LD_ADDR_VAR 0 2
35413: PUSH
35414: LD_INT 5
35416: PUSH
35417: LD_INT 8
35419: PUSH
35420: LD_INT 9
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: PUSH
35428: LD_VAR 0 4
35432: ARRAY
35433: ST_TO_ADDR
// end ;
35434: LD_VAR 0 2
35438: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35439: LD_INT 0
35441: PPUSH
35442: PPUSH
35443: PPUSH
// if not mines then
35444: LD_VAR 0 2
35448: NOT
35449: IFFALSE 35453
// exit ;
35451: GO 35597
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35453: LD_ADDR_VAR 0 5
35457: PUSH
35458: LD_INT 81
35460: PUSH
35461: LD_VAR 0 1
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: LD_INT 21
35475: PUSH
35476: LD_INT 3
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PPUSH
35491: CALL_OW 69
35495: ST_TO_ADDR
// for i in mines do
35496: LD_ADDR_VAR 0 4
35500: PUSH
35501: LD_VAR 0 2
35505: PUSH
35506: FOR_IN
35507: IFFALSE 35595
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35509: LD_VAR 0 4
35513: PUSH
35514: LD_INT 1
35516: ARRAY
35517: PPUSH
35518: LD_VAR 0 4
35522: PUSH
35523: LD_INT 2
35525: ARRAY
35526: PPUSH
35527: CALL_OW 458
35531: NOT
35532: IFFALSE 35536
// continue ;
35534: GO 35506
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35536: LD_VAR 0 4
35540: PUSH
35541: LD_INT 1
35543: ARRAY
35544: PPUSH
35545: LD_VAR 0 4
35549: PUSH
35550: LD_INT 2
35552: ARRAY
35553: PPUSH
35554: CALL_OW 428
35558: PUSH
35559: LD_VAR 0 5
35563: IN
35564: IFFALSE 35593
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35566: LD_VAR 0 4
35570: PUSH
35571: LD_INT 1
35573: ARRAY
35574: PPUSH
35575: LD_VAR 0 4
35579: PUSH
35580: LD_INT 2
35582: ARRAY
35583: PPUSH
35584: LD_VAR 0 1
35588: PPUSH
35589: CALL_OW 456
// end ;
35593: GO 35506
35595: POP
35596: POP
// end ;
35597: LD_VAR 0 3
35601: RET
// export function Count ( array ) ; var i ; begin
35602: LD_INT 0
35604: PPUSH
35605: PPUSH
// result := 0 ;
35606: LD_ADDR_VAR 0 2
35610: PUSH
35611: LD_INT 0
35613: ST_TO_ADDR
// for i in array do
35614: LD_ADDR_VAR 0 3
35618: PUSH
35619: LD_VAR 0 1
35623: PUSH
35624: FOR_IN
35625: IFFALSE 35649
// if i then
35627: LD_VAR 0 3
35631: IFFALSE 35647
// result := result + 1 ;
35633: LD_ADDR_VAR 0 2
35637: PUSH
35638: LD_VAR 0 2
35642: PUSH
35643: LD_INT 1
35645: PLUS
35646: ST_TO_ADDR
35647: GO 35624
35649: POP
35650: POP
// end ;
35651: LD_VAR 0 2
35655: RET
// export function IsEmpty ( building ) ; begin
35656: LD_INT 0
35658: PPUSH
// if not building then
35659: LD_VAR 0 1
35663: NOT
35664: IFFALSE 35668
// exit ;
35666: GO 35711
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35668: LD_ADDR_VAR 0 2
35672: PUSH
35673: LD_VAR 0 1
35677: PUSH
35678: LD_INT 22
35680: PUSH
35681: LD_VAR 0 1
35685: PPUSH
35686: CALL_OW 255
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 58
35697: PUSH
35698: EMPTY
35699: LIST
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PPUSH
35705: CALL_OW 69
35709: IN
35710: ST_TO_ADDR
// end ;
35711: LD_VAR 0 2
35715: RET
// export function IsNotFull ( building ) ; begin
35716: LD_INT 0
35718: PPUSH
// if not building then
35719: LD_VAR 0 1
35723: NOT
35724: IFFALSE 35728
// exit ;
35726: GO 35747
// result := UnitsInside ( building ) < 6 ;
35728: LD_ADDR_VAR 0 2
35732: PUSH
35733: LD_VAR 0 1
35737: PPUSH
35738: CALL_OW 313
35742: PUSH
35743: LD_INT 6
35745: LESS
35746: ST_TO_ADDR
// end ;
35747: LD_VAR 0 2
35751: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35752: LD_INT 0
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
// tmp := [ ] ;
35758: LD_ADDR_VAR 0 3
35762: PUSH
35763: EMPTY
35764: ST_TO_ADDR
// list := [ ] ;
35765: LD_ADDR_VAR 0 5
35769: PUSH
35770: EMPTY
35771: ST_TO_ADDR
// for i = 16 to 25 do
35772: LD_ADDR_VAR 0 4
35776: PUSH
35777: DOUBLE
35778: LD_INT 16
35780: DEC
35781: ST_TO_ADDR
35782: LD_INT 25
35784: PUSH
35785: FOR_TO
35786: IFFALSE 35859
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35788: LD_ADDR_VAR 0 3
35792: PUSH
35793: LD_VAR 0 3
35797: PUSH
35798: LD_INT 22
35800: PUSH
35801: LD_VAR 0 1
35805: PPUSH
35806: CALL_OW 255
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 91
35817: PUSH
35818: LD_VAR 0 1
35822: PUSH
35823: LD_INT 6
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 30
35833: PUSH
35834: LD_VAR 0 4
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: PUSH
35848: EMPTY
35849: LIST
35850: PPUSH
35851: CALL_OW 69
35855: ADD
35856: ST_TO_ADDR
35857: GO 35785
35859: POP
35860: POP
// for i = 1 to tmp do
35861: LD_ADDR_VAR 0 4
35865: PUSH
35866: DOUBLE
35867: LD_INT 1
35869: DEC
35870: ST_TO_ADDR
35871: LD_VAR 0 3
35875: PUSH
35876: FOR_TO
35877: IFFALSE 35965
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35879: LD_ADDR_VAR 0 5
35883: PUSH
35884: LD_VAR 0 5
35888: PUSH
35889: LD_VAR 0 3
35893: PUSH
35894: LD_VAR 0 4
35898: ARRAY
35899: PPUSH
35900: CALL_OW 266
35904: PUSH
35905: LD_VAR 0 3
35909: PUSH
35910: LD_VAR 0 4
35914: ARRAY
35915: PPUSH
35916: CALL_OW 250
35920: PUSH
35921: LD_VAR 0 3
35925: PUSH
35926: LD_VAR 0 4
35930: ARRAY
35931: PPUSH
35932: CALL_OW 251
35936: PUSH
35937: LD_VAR 0 3
35941: PUSH
35942: LD_VAR 0 4
35946: ARRAY
35947: PPUSH
35948: CALL_OW 254
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: PUSH
35959: EMPTY
35960: LIST
35961: ADD
35962: ST_TO_ADDR
35963: GO 35876
35965: POP
35966: POP
// result := list ;
35967: LD_ADDR_VAR 0 2
35971: PUSH
35972: LD_VAR 0 5
35976: ST_TO_ADDR
// end ;
35977: LD_VAR 0 2
35981: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35982: LD_INT 0
35984: PPUSH
35985: PPUSH
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
// if not factory then
35991: LD_VAR 0 1
35995: NOT
35996: IFFALSE 36000
// exit ;
35998: GO 36593
// if control = control_apeman then
36000: LD_VAR 0 4
36004: PUSH
36005: LD_INT 5
36007: EQUAL
36008: IFFALSE 36117
// begin tmp := UnitsInside ( factory ) ;
36010: LD_ADDR_VAR 0 8
36014: PUSH
36015: LD_VAR 0 1
36019: PPUSH
36020: CALL_OW 313
36024: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36025: LD_VAR 0 8
36029: PPUSH
36030: LD_INT 25
36032: PUSH
36033: LD_INT 12
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PPUSH
36040: CALL_OW 72
36044: NOT
36045: IFFALSE 36055
// control := control_manual ;
36047: LD_ADDR_VAR 0 4
36051: PUSH
36052: LD_INT 1
36054: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36055: LD_ADDR_VAR 0 8
36059: PUSH
36060: LD_VAR 0 1
36064: PPUSH
36065: CALL 35752 0 1
36069: ST_TO_ADDR
// if tmp then
36070: LD_VAR 0 8
36074: IFFALSE 36117
// begin for i in tmp do
36076: LD_ADDR_VAR 0 7
36080: PUSH
36081: LD_VAR 0 8
36085: PUSH
36086: FOR_IN
36087: IFFALSE 36115
// if i [ 1 ] = b_ext_radio then
36089: LD_VAR 0 7
36093: PUSH
36094: LD_INT 1
36096: ARRAY
36097: PUSH
36098: LD_INT 22
36100: EQUAL
36101: IFFALSE 36113
// begin control := control_remote ;
36103: LD_ADDR_VAR 0 4
36107: PUSH
36108: LD_INT 2
36110: ST_TO_ADDR
// break ;
36111: GO 36115
// end ;
36113: GO 36086
36115: POP
36116: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36117: LD_VAR 0 1
36121: PPUSH
36122: LD_VAR 0 2
36126: PPUSH
36127: LD_VAR 0 3
36131: PPUSH
36132: LD_VAR 0 4
36136: PPUSH
36137: LD_VAR 0 5
36141: PPUSH
36142: CALL_OW 448
36146: IFFALSE 36181
// begin result := [ chassis , engine , control , weapon ] ;
36148: LD_ADDR_VAR 0 6
36152: PUSH
36153: LD_VAR 0 2
36157: PUSH
36158: LD_VAR 0 3
36162: PUSH
36163: LD_VAR 0 4
36167: PUSH
36168: LD_VAR 0 5
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: ST_TO_ADDR
// exit ;
36179: GO 36593
// end ; _chassis := AvailableChassisList ( factory ) ;
36181: LD_ADDR_VAR 0 9
36185: PUSH
36186: LD_VAR 0 1
36190: PPUSH
36191: CALL_OW 475
36195: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36196: LD_ADDR_VAR 0 11
36200: PUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: CALL_OW 476
36210: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36211: LD_ADDR_VAR 0 12
36215: PUSH
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 477
36225: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36226: LD_ADDR_VAR 0 10
36230: PUSH
36231: LD_VAR 0 1
36235: PPUSH
36236: CALL_OW 478
36240: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36241: LD_VAR 0 9
36245: NOT
36246: PUSH
36247: LD_VAR 0 11
36251: NOT
36252: OR
36253: PUSH
36254: LD_VAR 0 12
36258: NOT
36259: OR
36260: PUSH
36261: LD_VAR 0 10
36265: NOT
36266: OR
36267: IFFALSE 36302
// begin result := [ chassis , engine , control , weapon ] ;
36269: LD_ADDR_VAR 0 6
36273: PUSH
36274: LD_VAR 0 2
36278: PUSH
36279: LD_VAR 0 3
36283: PUSH
36284: LD_VAR 0 4
36288: PUSH
36289: LD_VAR 0 5
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// exit ;
36300: GO 36593
// end ; if not chassis in _chassis then
36302: LD_VAR 0 2
36306: PUSH
36307: LD_VAR 0 9
36311: IN
36312: NOT
36313: IFFALSE 36339
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36315: LD_ADDR_VAR 0 2
36319: PUSH
36320: LD_VAR 0 9
36324: PUSH
36325: LD_INT 1
36327: PPUSH
36328: LD_VAR 0 9
36332: PPUSH
36333: CALL_OW 12
36337: ARRAY
36338: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36339: LD_VAR 0 2
36343: PPUSH
36344: LD_VAR 0 3
36348: PPUSH
36349: CALL 36598 0 2
36353: NOT
36354: IFFALSE 36413
// repeat engine := _engine [ 1 ] ;
36356: LD_ADDR_VAR 0 3
36360: PUSH
36361: LD_VAR 0 11
36365: PUSH
36366: LD_INT 1
36368: ARRAY
36369: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36370: LD_ADDR_VAR 0 11
36374: PUSH
36375: LD_VAR 0 11
36379: PPUSH
36380: LD_INT 1
36382: PPUSH
36383: CALL_OW 3
36387: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36388: LD_VAR 0 2
36392: PPUSH
36393: LD_VAR 0 3
36397: PPUSH
36398: CALL 36598 0 2
36402: PUSH
36403: LD_VAR 0 11
36407: PUSH
36408: EMPTY
36409: EQUAL
36410: OR
36411: IFFALSE 36356
// if not control in _control then
36413: LD_VAR 0 4
36417: PUSH
36418: LD_VAR 0 12
36422: IN
36423: NOT
36424: IFFALSE 36450
// control := _control [ rand ( 1 , _control ) ] ;
36426: LD_ADDR_VAR 0 4
36430: PUSH
36431: LD_VAR 0 12
36435: PUSH
36436: LD_INT 1
36438: PPUSH
36439: LD_VAR 0 12
36443: PPUSH
36444: CALL_OW 12
36448: ARRAY
36449: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36450: LD_VAR 0 2
36454: PPUSH
36455: LD_VAR 0 5
36459: PPUSH
36460: CALL 36818 0 2
36464: NOT
36465: IFFALSE 36524
// repeat weapon := _weapon [ 1 ] ;
36467: LD_ADDR_VAR 0 5
36471: PUSH
36472: LD_VAR 0 10
36476: PUSH
36477: LD_INT 1
36479: ARRAY
36480: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36481: LD_ADDR_VAR 0 10
36485: PUSH
36486: LD_VAR 0 10
36490: PPUSH
36491: LD_INT 1
36493: PPUSH
36494: CALL_OW 3
36498: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36499: LD_VAR 0 2
36503: PPUSH
36504: LD_VAR 0 5
36508: PPUSH
36509: CALL 36818 0 2
36513: PUSH
36514: LD_VAR 0 10
36518: PUSH
36519: EMPTY
36520: EQUAL
36521: OR
36522: IFFALSE 36467
// result := [ ] ;
36524: LD_ADDR_VAR 0 6
36528: PUSH
36529: EMPTY
36530: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36531: LD_VAR 0 1
36535: PPUSH
36536: LD_VAR 0 2
36540: PPUSH
36541: LD_VAR 0 3
36545: PPUSH
36546: LD_VAR 0 4
36550: PPUSH
36551: LD_VAR 0 5
36555: PPUSH
36556: CALL_OW 448
36560: IFFALSE 36593
// result := [ chassis , engine , control , weapon ] ;
36562: LD_ADDR_VAR 0 6
36566: PUSH
36567: LD_VAR 0 2
36571: PUSH
36572: LD_VAR 0 3
36576: PUSH
36577: LD_VAR 0 4
36581: PUSH
36582: LD_VAR 0 5
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: ST_TO_ADDR
// end ;
36593: LD_VAR 0 6
36597: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36598: LD_INT 0
36600: PPUSH
// if not chassis or not engine then
36601: LD_VAR 0 1
36605: NOT
36606: PUSH
36607: LD_VAR 0 2
36611: NOT
36612: OR
36613: IFFALSE 36617
// exit ;
36615: GO 36813
// case engine of engine_solar :
36617: LD_VAR 0 2
36621: PUSH
36622: LD_INT 2
36624: DOUBLE
36625: EQUAL
36626: IFTRUE 36630
36628: GO 36668
36630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36631: LD_ADDR_VAR 0 3
36635: PUSH
36636: LD_INT 11
36638: PUSH
36639: LD_INT 12
36641: PUSH
36642: LD_INT 13
36644: PUSH
36645: LD_INT 14
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: LD_INT 3
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: ST_TO_ADDR
36666: GO 36797
36668: LD_INT 1
36670: DOUBLE
36671: EQUAL
36672: IFTRUE 36676
36674: GO 36738
36676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36677: LD_ADDR_VAR 0 3
36681: PUSH
36682: LD_INT 11
36684: PUSH
36685: LD_INT 12
36687: PUSH
36688: LD_INT 13
36690: PUSH
36691: LD_INT 14
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: LD_INT 3
36702: PUSH
36703: LD_INT 4
36705: PUSH
36706: LD_INT 5
36708: PUSH
36709: LD_INT 21
36711: PUSH
36712: LD_INT 23
36714: PUSH
36715: LD_INT 22
36717: PUSH
36718: LD_INT 24
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: ST_TO_ADDR
36736: GO 36797
36738: LD_INT 3
36740: DOUBLE
36741: EQUAL
36742: IFTRUE 36746
36744: GO 36796
36746: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36747: LD_ADDR_VAR 0 3
36751: PUSH
36752: LD_INT 13
36754: PUSH
36755: LD_INT 14
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: LD_INT 3
36763: PUSH
36764: LD_INT 4
36766: PUSH
36767: LD_INT 5
36769: PUSH
36770: LD_INT 21
36772: PUSH
36773: LD_INT 22
36775: PUSH
36776: LD_INT 23
36778: PUSH
36779: LD_INT 24
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: ST_TO_ADDR
36794: GO 36797
36796: POP
// result := ( chassis in result ) ;
36797: LD_ADDR_VAR 0 3
36801: PUSH
36802: LD_VAR 0 1
36806: PUSH
36807: LD_VAR 0 3
36811: IN
36812: ST_TO_ADDR
// end ;
36813: LD_VAR 0 3
36817: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36818: LD_INT 0
36820: PPUSH
// if not chassis or not weapon then
36821: LD_VAR 0 1
36825: NOT
36826: PUSH
36827: LD_VAR 0 2
36831: NOT
36832: OR
36833: IFFALSE 36837
// exit ;
36835: GO 37899
// case weapon of us_machine_gun :
36837: LD_VAR 0 2
36841: PUSH
36842: LD_INT 2
36844: DOUBLE
36845: EQUAL
36846: IFTRUE 36850
36848: GO 36880
36850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36851: LD_ADDR_VAR 0 3
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 3
36864: PUSH
36865: LD_INT 4
36867: PUSH
36868: LD_INT 5
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: ST_TO_ADDR
36878: GO 37883
36880: LD_INT 3
36882: DOUBLE
36883: EQUAL
36884: IFTRUE 36888
36886: GO 36918
36888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36889: LD_ADDR_VAR 0 3
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: LD_INT 3
36902: PUSH
36903: LD_INT 4
36905: PUSH
36906: LD_INT 5
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: ST_TO_ADDR
36916: GO 37883
36918: LD_INT 11
36920: DOUBLE
36921: EQUAL
36922: IFTRUE 36926
36924: GO 36956
36926: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36927: LD_ADDR_VAR 0 3
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 3
36940: PUSH
36941: LD_INT 4
36943: PUSH
36944: LD_INT 5
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: ST_TO_ADDR
36954: GO 37883
36956: LD_INT 4
36958: DOUBLE
36959: EQUAL
36960: IFTRUE 36964
36962: GO 36990
36964: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36965: LD_ADDR_VAR 0 3
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 3
36975: PUSH
36976: LD_INT 4
36978: PUSH
36979: LD_INT 5
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
36988: GO 37883
36990: LD_INT 5
36992: DOUBLE
36993: EQUAL
36994: IFTRUE 36998
36996: GO 37024
36998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36999: LD_ADDR_VAR 0 3
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: LD_INT 3
37009: PUSH
37010: LD_INT 4
37012: PUSH
37013: LD_INT 5
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: ST_TO_ADDR
37022: GO 37883
37024: LD_INT 9
37026: DOUBLE
37027: EQUAL
37028: IFTRUE 37032
37030: GO 37058
37032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37033: LD_ADDR_VAR 0 3
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: LD_INT 4
37046: PUSH
37047: LD_INT 5
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: ST_TO_ADDR
37056: GO 37883
37058: LD_INT 7
37060: DOUBLE
37061: EQUAL
37062: IFTRUE 37066
37064: GO 37092
37066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37067: LD_ADDR_VAR 0 3
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: LD_INT 3
37077: PUSH
37078: LD_INT 4
37080: PUSH
37081: LD_INT 5
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: ST_TO_ADDR
37090: GO 37883
37092: LD_INT 12
37094: DOUBLE
37095: EQUAL
37096: IFTRUE 37100
37098: GO 37126
37100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37101: LD_ADDR_VAR 0 3
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: LD_INT 3
37111: PUSH
37112: LD_INT 4
37114: PUSH
37115: LD_INT 5
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: ST_TO_ADDR
37124: GO 37883
37126: LD_INT 13
37128: DOUBLE
37129: EQUAL
37130: IFTRUE 37134
37132: GO 37160
37134: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37135: LD_ADDR_VAR 0 3
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: LD_INT 3
37145: PUSH
37146: LD_INT 4
37148: PUSH
37149: LD_INT 5
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: ST_TO_ADDR
37158: GO 37883
37160: LD_INT 14
37162: DOUBLE
37163: EQUAL
37164: IFTRUE 37168
37166: GO 37186
37168: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37169: LD_ADDR_VAR 0 3
37173: PUSH
37174: LD_INT 4
37176: PUSH
37177: LD_INT 5
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: ST_TO_ADDR
37184: GO 37883
37186: LD_INT 6
37188: DOUBLE
37189: EQUAL
37190: IFTRUE 37194
37192: GO 37212
37194: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37195: LD_ADDR_VAR 0 3
37199: PUSH
37200: LD_INT 4
37202: PUSH
37203: LD_INT 5
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: ST_TO_ADDR
37210: GO 37883
37212: LD_INT 10
37214: DOUBLE
37215: EQUAL
37216: IFTRUE 37220
37218: GO 37238
37220: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37221: LD_ADDR_VAR 0 3
37225: PUSH
37226: LD_INT 4
37228: PUSH
37229: LD_INT 5
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: ST_TO_ADDR
37236: GO 37883
37238: LD_INT 22
37240: DOUBLE
37241: EQUAL
37242: IFTRUE 37246
37244: GO 37272
37246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37247: LD_ADDR_VAR 0 3
37251: PUSH
37252: LD_INT 11
37254: PUSH
37255: LD_INT 12
37257: PUSH
37258: LD_INT 13
37260: PUSH
37261: LD_INT 14
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: ST_TO_ADDR
37270: GO 37883
37272: LD_INT 23
37274: DOUBLE
37275: EQUAL
37276: IFTRUE 37280
37278: GO 37306
37280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37281: LD_ADDR_VAR 0 3
37285: PUSH
37286: LD_INT 11
37288: PUSH
37289: LD_INT 12
37291: PUSH
37292: LD_INT 13
37294: PUSH
37295: LD_INT 14
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: ST_TO_ADDR
37304: GO 37883
37306: LD_INT 24
37308: DOUBLE
37309: EQUAL
37310: IFTRUE 37314
37312: GO 37340
37314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37315: LD_ADDR_VAR 0 3
37319: PUSH
37320: LD_INT 11
37322: PUSH
37323: LD_INT 12
37325: PUSH
37326: LD_INT 13
37328: PUSH
37329: LD_INT 14
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
37338: GO 37883
37340: LD_INT 30
37342: DOUBLE
37343: EQUAL
37344: IFTRUE 37348
37346: GO 37374
37348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37349: LD_ADDR_VAR 0 3
37353: PUSH
37354: LD_INT 11
37356: PUSH
37357: LD_INT 12
37359: PUSH
37360: LD_INT 13
37362: PUSH
37363: LD_INT 14
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: ST_TO_ADDR
37372: GO 37883
37374: LD_INT 25
37376: DOUBLE
37377: EQUAL
37378: IFTRUE 37382
37380: GO 37400
37382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37383: LD_ADDR_VAR 0 3
37387: PUSH
37388: LD_INT 13
37390: PUSH
37391: LD_INT 14
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: ST_TO_ADDR
37398: GO 37883
37400: LD_INT 27
37402: DOUBLE
37403: EQUAL
37404: IFTRUE 37408
37406: GO 37426
37408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37409: LD_ADDR_VAR 0 3
37413: PUSH
37414: LD_INT 13
37416: PUSH
37417: LD_INT 14
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: ST_TO_ADDR
37424: GO 37883
37426: LD_EXP 49
37430: DOUBLE
37431: EQUAL
37432: IFTRUE 37436
37434: GO 37462
37436: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37437: LD_ADDR_VAR 0 3
37441: PUSH
37442: LD_INT 11
37444: PUSH
37445: LD_INT 12
37447: PUSH
37448: LD_INT 13
37450: PUSH
37451: LD_INT 14
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: ST_TO_ADDR
37460: GO 37883
37462: LD_INT 28
37464: DOUBLE
37465: EQUAL
37466: IFTRUE 37470
37468: GO 37488
37470: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37471: LD_ADDR_VAR 0 3
37475: PUSH
37476: LD_INT 13
37478: PUSH
37479: LD_INT 14
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: ST_TO_ADDR
37486: GO 37883
37488: LD_INT 29
37490: DOUBLE
37491: EQUAL
37492: IFTRUE 37496
37494: GO 37514
37496: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37497: LD_ADDR_VAR 0 3
37501: PUSH
37502: LD_INT 13
37504: PUSH
37505: LD_INT 14
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: ST_TO_ADDR
37512: GO 37883
37514: LD_INT 31
37516: DOUBLE
37517: EQUAL
37518: IFTRUE 37522
37520: GO 37540
37522: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37523: LD_ADDR_VAR 0 3
37527: PUSH
37528: LD_INT 13
37530: PUSH
37531: LD_INT 14
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: ST_TO_ADDR
37538: GO 37883
37540: LD_INT 26
37542: DOUBLE
37543: EQUAL
37544: IFTRUE 37548
37546: GO 37566
37548: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37549: LD_ADDR_VAR 0 3
37553: PUSH
37554: LD_INT 13
37556: PUSH
37557: LD_INT 14
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: ST_TO_ADDR
37564: GO 37883
37566: LD_INT 42
37568: DOUBLE
37569: EQUAL
37570: IFTRUE 37574
37572: GO 37600
37574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37575: LD_ADDR_VAR 0 3
37579: PUSH
37580: LD_INT 21
37582: PUSH
37583: LD_INT 22
37585: PUSH
37586: LD_INT 23
37588: PUSH
37589: LD_INT 24
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: ST_TO_ADDR
37598: GO 37883
37600: LD_INT 43
37602: DOUBLE
37603: EQUAL
37604: IFTRUE 37608
37606: GO 37634
37608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37609: LD_ADDR_VAR 0 3
37613: PUSH
37614: LD_INT 21
37616: PUSH
37617: LD_INT 22
37619: PUSH
37620: LD_INT 23
37622: PUSH
37623: LD_INT 24
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: ST_TO_ADDR
37632: GO 37883
37634: LD_INT 44
37636: DOUBLE
37637: EQUAL
37638: IFTRUE 37642
37640: GO 37668
37642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37643: LD_ADDR_VAR 0 3
37647: PUSH
37648: LD_INT 21
37650: PUSH
37651: LD_INT 22
37653: PUSH
37654: LD_INT 23
37656: PUSH
37657: LD_INT 24
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: ST_TO_ADDR
37666: GO 37883
37668: LD_INT 45
37670: DOUBLE
37671: EQUAL
37672: IFTRUE 37676
37674: GO 37702
37676: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37677: LD_ADDR_VAR 0 3
37681: PUSH
37682: LD_INT 21
37684: PUSH
37685: LD_INT 22
37687: PUSH
37688: LD_INT 23
37690: PUSH
37691: LD_INT 24
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: ST_TO_ADDR
37700: GO 37883
37702: LD_INT 49
37704: DOUBLE
37705: EQUAL
37706: IFTRUE 37710
37708: GO 37736
37710: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37711: LD_ADDR_VAR 0 3
37715: PUSH
37716: LD_INT 21
37718: PUSH
37719: LD_INT 22
37721: PUSH
37722: LD_INT 23
37724: PUSH
37725: LD_INT 24
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: ST_TO_ADDR
37734: GO 37883
37736: LD_INT 51
37738: DOUBLE
37739: EQUAL
37740: IFTRUE 37744
37742: GO 37770
37744: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37745: LD_ADDR_VAR 0 3
37749: PUSH
37750: LD_INT 21
37752: PUSH
37753: LD_INT 22
37755: PUSH
37756: LD_INT 23
37758: PUSH
37759: LD_INT 24
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: ST_TO_ADDR
37768: GO 37883
37770: LD_INT 52
37772: DOUBLE
37773: EQUAL
37774: IFTRUE 37778
37776: GO 37804
37778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37779: LD_ADDR_VAR 0 3
37783: PUSH
37784: LD_INT 21
37786: PUSH
37787: LD_INT 22
37789: PUSH
37790: LD_INT 23
37792: PUSH
37793: LD_INT 24
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: ST_TO_ADDR
37802: GO 37883
37804: LD_INT 53
37806: DOUBLE
37807: EQUAL
37808: IFTRUE 37812
37810: GO 37830
37812: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37813: LD_ADDR_VAR 0 3
37817: PUSH
37818: LD_INT 23
37820: PUSH
37821: LD_INT 24
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: ST_TO_ADDR
37828: GO 37883
37830: LD_INT 46
37832: DOUBLE
37833: EQUAL
37834: IFTRUE 37838
37836: GO 37856
37838: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37839: LD_ADDR_VAR 0 3
37843: PUSH
37844: LD_INT 23
37846: PUSH
37847: LD_INT 24
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: ST_TO_ADDR
37854: GO 37883
37856: LD_INT 47
37858: DOUBLE
37859: EQUAL
37860: IFTRUE 37864
37862: GO 37882
37864: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37865: LD_ADDR_VAR 0 3
37869: PUSH
37870: LD_INT 23
37872: PUSH
37873: LD_INT 24
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: ST_TO_ADDR
37880: GO 37883
37882: POP
// result := ( chassis in result ) ;
37883: LD_ADDR_VAR 0 3
37887: PUSH
37888: LD_VAR 0 1
37892: PUSH
37893: LD_VAR 0 3
37897: IN
37898: ST_TO_ADDR
// end ;
37899: LD_VAR 0 3
37903: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37904: LD_INT 0
37906: PPUSH
37907: PPUSH
37908: PPUSH
37909: PPUSH
37910: PPUSH
37911: PPUSH
37912: PPUSH
// result := array ;
37913: LD_ADDR_VAR 0 5
37917: PUSH
37918: LD_VAR 0 1
37922: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37923: LD_VAR 0 1
37927: NOT
37928: PUSH
37929: LD_VAR 0 2
37933: NOT
37934: OR
37935: PUSH
37936: LD_VAR 0 3
37940: NOT
37941: OR
37942: PUSH
37943: LD_VAR 0 2
37947: PUSH
37948: LD_VAR 0 1
37952: GREATER
37953: OR
37954: PUSH
37955: LD_VAR 0 3
37959: PUSH
37960: LD_VAR 0 1
37964: GREATER
37965: OR
37966: IFFALSE 37970
// exit ;
37968: GO 38266
// if direction then
37970: LD_VAR 0 4
37974: IFFALSE 38038
// begin d := 1 ;
37976: LD_ADDR_VAR 0 9
37980: PUSH
37981: LD_INT 1
37983: ST_TO_ADDR
// if i_from > i_to then
37984: LD_VAR 0 2
37988: PUSH
37989: LD_VAR 0 3
37993: GREATER
37994: IFFALSE 38020
// length := ( array - i_from ) + i_to else
37996: LD_ADDR_VAR 0 11
38000: PUSH
38001: LD_VAR 0 1
38005: PUSH
38006: LD_VAR 0 2
38010: MINUS
38011: PUSH
38012: LD_VAR 0 3
38016: PLUS
38017: ST_TO_ADDR
38018: GO 38036
// length := i_to - i_from ;
38020: LD_ADDR_VAR 0 11
38024: PUSH
38025: LD_VAR 0 3
38029: PUSH
38030: LD_VAR 0 2
38034: MINUS
38035: ST_TO_ADDR
// end else
38036: GO 38099
// begin d := - 1 ;
38038: LD_ADDR_VAR 0 9
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: ST_TO_ADDR
// if i_from > i_to then
38047: LD_VAR 0 2
38051: PUSH
38052: LD_VAR 0 3
38056: GREATER
38057: IFFALSE 38077
// length := i_from - i_to else
38059: LD_ADDR_VAR 0 11
38063: PUSH
38064: LD_VAR 0 2
38068: PUSH
38069: LD_VAR 0 3
38073: MINUS
38074: ST_TO_ADDR
38075: GO 38099
// length := ( array - i_to ) + i_from ;
38077: LD_ADDR_VAR 0 11
38081: PUSH
38082: LD_VAR 0 1
38086: PUSH
38087: LD_VAR 0 3
38091: MINUS
38092: PUSH
38093: LD_VAR 0 2
38097: PLUS
38098: ST_TO_ADDR
// end ; if not length then
38099: LD_VAR 0 11
38103: NOT
38104: IFFALSE 38108
// exit ;
38106: GO 38266
// tmp := array ;
38108: LD_ADDR_VAR 0 10
38112: PUSH
38113: LD_VAR 0 1
38117: ST_TO_ADDR
// for i = 1 to length do
38118: LD_ADDR_VAR 0 6
38122: PUSH
38123: DOUBLE
38124: LD_INT 1
38126: DEC
38127: ST_TO_ADDR
38128: LD_VAR 0 11
38132: PUSH
38133: FOR_TO
38134: IFFALSE 38254
// begin for j = 1 to array do
38136: LD_ADDR_VAR 0 7
38140: PUSH
38141: DOUBLE
38142: LD_INT 1
38144: DEC
38145: ST_TO_ADDR
38146: LD_VAR 0 1
38150: PUSH
38151: FOR_TO
38152: IFFALSE 38240
// begin k := j + d ;
38154: LD_ADDR_VAR 0 8
38158: PUSH
38159: LD_VAR 0 7
38163: PUSH
38164: LD_VAR 0 9
38168: PLUS
38169: ST_TO_ADDR
// if k > array then
38170: LD_VAR 0 8
38174: PUSH
38175: LD_VAR 0 1
38179: GREATER
38180: IFFALSE 38190
// k := 1 ;
38182: LD_ADDR_VAR 0 8
38186: PUSH
38187: LD_INT 1
38189: ST_TO_ADDR
// if not k then
38190: LD_VAR 0 8
38194: NOT
38195: IFFALSE 38207
// k := array ;
38197: LD_ADDR_VAR 0 8
38201: PUSH
38202: LD_VAR 0 1
38206: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38207: LD_ADDR_VAR 0 10
38211: PUSH
38212: LD_VAR 0 10
38216: PPUSH
38217: LD_VAR 0 8
38221: PPUSH
38222: LD_VAR 0 1
38226: PUSH
38227: LD_VAR 0 7
38231: ARRAY
38232: PPUSH
38233: CALL_OW 1
38237: ST_TO_ADDR
// end ;
38238: GO 38151
38240: POP
38241: POP
// array := tmp ;
38242: LD_ADDR_VAR 0 1
38246: PUSH
38247: LD_VAR 0 10
38251: ST_TO_ADDR
// end ;
38252: GO 38133
38254: POP
38255: POP
// result := array ;
38256: LD_ADDR_VAR 0 5
38260: PUSH
38261: LD_VAR 0 1
38265: ST_TO_ADDR
// end ;
38266: LD_VAR 0 5
38270: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38271: LD_INT 0
38273: PPUSH
38274: PPUSH
// result := 0 ;
38275: LD_ADDR_VAR 0 3
38279: PUSH
38280: LD_INT 0
38282: ST_TO_ADDR
// if not array or not value in array then
38283: LD_VAR 0 1
38287: NOT
38288: PUSH
38289: LD_VAR 0 2
38293: PUSH
38294: LD_VAR 0 1
38298: IN
38299: NOT
38300: OR
38301: IFFALSE 38305
// exit ;
38303: GO 38359
// for i = 1 to array do
38305: LD_ADDR_VAR 0 4
38309: PUSH
38310: DOUBLE
38311: LD_INT 1
38313: DEC
38314: ST_TO_ADDR
38315: LD_VAR 0 1
38319: PUSH
38320: FOR_TO
38321: IFFALSE 38357
// if value = array [ i ] then
38323: LD_VAR 0 2
38327: PUSH
38328: LD_VAR 0 1
38332: PUSH
38333: LD_VAR 0 4
38337: ARRAY
38338: EQUAL
38339: IFFALSE 38355
// begin result := i ;
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: LD_VAR 0 4
38350: ST_TO_ADDR
// exit ;
38351: POP
38352: POP
38353: GO 38359
// end ;
38355: GO 38320
38357: POP
38358: POP
// end ;
38359: LD_VAR 0 3
38363: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38364: LD_INT 0
38366: PPUSH
// vc_chassis := chassis ;
38367: LD_ADDR_OWVAR 37
38371: PUSH
38372: LD_VAR 0 1
38376: ST_TO_ADDR
// vc_engine := engine ;
38377: LD_ADDR_OWVAR 39
38381: PUSH
38382: LD_VAR 0 2
38386: ST_TO_ADDR
// vc_control := control ;
38387: LD_ADDR_OWVAR 38
38391: PUSH
38392: LD_VAR 0 3
38396: ST_TO_ADDR
// vc_weapon := weapon ;
38397: LD_ADDR_OWVAR 40
38401: PUSH
38402: LD_VAR 0 4
38406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38407: LD_ADDR_OWVAR 41
38411: PUSH
38412: LD_VAR 0 5
38416: ST_TO_ADDR
// end ;
38417: LD_VAR 0 6
38421: RET
// export function WantPlant ( unit ) ; var task ; begin
38422: LD_INT 0
38424: PPUSH
38425: PPUSH
// result := false ;
38426: LD_ADDR_VAR 0 2
38430: PUSH
38431: LD_INT 0
38433: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38434: LD_ADDR_VAR 0 3
38438: PUSH
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 437
38448: ST_TO_ADDR
// if task then
38449: LD_VAR 0 3
38453: IFFALSE 38481
// if task [ 1 ] [ 1 ] = p then
38455: LD_VAR 0 3
38459: PUSH
38460: LD_INT 1
38462: ARRAY
38463: PUSH
38464: LD_INT 1
38466: ARRAY
38467: PUSH
38468: LD_STRING p
38470: EQUAL
38471: IFFALSE 38481
// result := true ;
38473: LD_ADDR_VAR 0 2
38477: PUSH
38478: LD_INT 1
38480: ST_TO_ADDR
// end ;
38481: LD_VAR 0 2
38485: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38486: LD_INT 0
38488: PPUSH
38489: PPUSH
38490: PPUSH
38491: PPUSH
// if pos < 1 then
38492: LD_VAR 0 2
38496: PUSH
38497: LD_INT 1
38499: LESS
38500: IFFALSE 38504
// exit ;
38502: GO 38807
// if pos = 1 then
38504: LD_VAR 0 2
38508: PUSH
38509: LD_INT 1
38511: EQUAL
38512: IFFALSE 38545
// result := Replace ( arr , pos [ 1 ] , value ) else
38514: LD_ADDR_VAR 0 4
38518: PUSH
38519: LD_VAR 0 1
38523: PPUSH
38524: LD_VAR 0 2
38528: PUSH
38529: LD_INT 1
38531: ARRAY
38532: PPUSH
38533: LD_VAR 0 3
38537: PPUSH
38538: CALL_OW 1
38542: ST_TO_ADDR
38543: GO 38807
// begin tmp := arr ;
38545: LD_ADDR_VAR 0 6
38549: PUSH
38550: LD_VAR 0 1
38554: ST_TO_ADDR
// s_arr := [ tmp ] ;
38555: LD_ADDR_VAR 0 7
38559: PUSH
38560: LD_VAR 0 6
38564: PUSH
38565: EMPTY
38566: LIST
38567: ST_TO_ADDR
// for i = 1 to pos - 1 do
38568: LD_ADDR_VAR 0 5
38572: PUSH
38573: DOUBLE
38574: LD_INT 1
38576: DEC
38577: ST_TO_ADDR
38578: LD_VAR 0 2
38582: PUSH
38583: LD_INT 1
38585: MINUS
38586: PUSH
38587: FOR_TO
38588: IFFALSE 38633
// begin tmp := tmp [ pos [ i ] ] ;
38590: LD_ADDR_VAR 0 6
38594: PUSH
38595: LD_VAR 0 6
38599: PUSH
38600: LD_VAR 0 2
38604: PUSH
38605: LD_VAR 0 5
38609: ARRAY
38610: ARRAY
38611: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38612: LD_ADDR_VAR 0 7
38616: PUSH
38617: LD_VAR 0 7
38621: PUSH
38622: LD_VAR 0 6
38626: PUSH
38627: EMPTY
38628: LIST
38629: ADD
38630: ST_TO_ADDR
// end ;
38631: GO 38587
38633: POP
38634: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38635: LD_ADDR_VAR 0 6
38639: PUSH
38640: LD_VAR 0 6
38644: PPUSH
38645: LD_VAR 0 2
38649: PUSH
38650: LD_VAR 0 2
38654: ARRAY
38655: PPUSH
38656: LD_VAR 0 3
38660: PPUSH
38661: CALL_OW 1
38665: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38666: LD_ADDR_VAR 0 7
38670: PUSH
38671: LD_VAR 0 7
38675: PPUSH
38676: LD_VAR 0 7
38680: PPUSH
38681: LD_VAR 0 6
38685: PPUSH
38686: CALL_OW 1
38690: ST_TO_ADDR
// for i = s_arr downto 2 do
38691: LD_ADDR_VAR 0 5
38695: PUSH
38696: DOUBLE
38697: LD_VAR 0 7
38701: INC
38702: ST_TO_ADDR
38703: LD_INT 2
38705: PUSH
38706: FOR_DOWNTO
38707: IFFALSE 38791
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38709: LD_ADDR_VAR 0 6
38713: PUSH
38714: LD_VAR 0 7
38718: PUSH
38719: LD_VAR 0 5
38723: PUSH
38724: LD_INT 1
38726: MINUS
38727: ARRAY
38728: PPUSH
38729: LD_VAR 0 2
38733: PUSH
38734: LD_VAR 0 5
38738: PUSH
38739: LD_INT 1
38741: MINUS
38742: ARRAY
38743: PPUSH
38744: LD_VAR 0 7
38748: PUSH
38749: LD_VAR 0 5
38753: ARRAY
38754: PPUSH
38755: CALL_OW 1
38759: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38760: LD_ADDR_VAR 0 7
38764: PUSH
38765: LD_VAR 0 7
38769: PPUSH
38770: LD_VAR 0 5
38774: PUSH
38775: LD_INT 1
38777: MINUS
38778: PPUSH
38779: LD_VAR 0 6
38783: PPUSH
38784: CALL_OW 1
38788: ST_TO_ADDR
// end ;
38789: GO 38706
38791: POP
38792: POP
// result := s_arr [ 1 ] ;
38793: LD_ADDR_VAR 0 4
38797: PUSH
38798: LD_VAR 0 7
38802: PUSH
38803: LD_INT 1
38805: ARRAY
38806: ST_TO_ADDR
// end ; end ;
38807: LD_VAR 0 4
38811: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38812: LD_INT 0
38814: PPUSH
38815: PPUSH
// if not list then
38816: LD_VAR 0 1
38820: NOT
38821: IFFALSE 38825
// exit ;
38823: GO 38916
// i := list [ pos1 ] ;
38825: LD_ADDR_VAR 0 5
38829: PUSH
38830: LD_VAR 0 1
38834: PUSH
38835: LD_VAR 0 2
38839: ARRAY
38840: ST_TO_ADDR
// if not i then
38841: LD_VAR 0 5
38845: NOT
38846: IFFALSE 38850
// exit ;
38848: GO 38916
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38850: LD_ADDR_VAR 0 1
38854: PUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: LD_VAR 0 2
38864: PPUSH
38865: LD_VAR 0 1
38869: PUSH
38870: LD_VAR 0 3
38874: ARRAY
38875: PPUSH
38876: CALL_OW 1
38880: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38881: LD_ADDR_VAR 0 1
38885: PUSH
38886: LD_VAR 0 1
38890: PPUSH
38891: LD_VAR 0 3
38895: PPUSH
38896: LD_VAR 0 5
38900: PPUSH
38901: CALL_OW 1
38905: ST_TO_ADDR
// result := list ;
38906: LD_ADDR_VAR 0 4
38910: PUSH
38911: LD_VAR 0 1
38915: ST_TO_ADDR
// end ;
38916: LD_VAR 0 4
38920: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38921: LD_INT 0
38923: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38924: LD_ADDR_VAR 0 5
38928: PUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: CALL_OW 250
38938: PPUSH
38939: LD_VAR 0 1
38943: PPUSH
38944: CALL_OW 251
38948: PPUSH
38949: LD_VAR 0 2
38953: PPUSH
38954: LD_VAR 0 3
38958: PPUSH
38959: LD_VAR 0 4
38963: PPUSH
38964: CALL 38974 0 5
38968: ST_TO_ADDR
// end ;
38969: LD_VAR 0 5
38973: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38974: LD_INT 0
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
// if not list then
38980: LD_VAR 0 3
38984: NOT
38985: IFFALSE 38989
// exit ;
38987: GO 39377
// result := [ ] ;
38989: LD_ADDR_VAR 0 6
38993: PUSH
38994: EMPTY
38995: ST_TO_ADDR
// for i in list do
38996: LD_ADDR_VAR 0 7
39000: PUSH
39001: LD_VAR 0 3
39005: PUSH
39006: FOR_IN
39007: IFFALSE 39209
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39009: LD_ADDR_VAR 0 9
39013: PUSH
39014: LD_VAR 0 7
39018: PPUSH
39019: LD_VAR 0 1
39023: PPUSH
39024: LD_VAR 0 2
39028: PPUSH
39029: CALL_OW 297
39033: ST_TO_ADDR
// if not result then
39034: LD_VAR 0 6
39038: NOT
39039: IFFALSE 39065
// result := [ [ i , tmp ] ] else
39041: LD_ADDR_VAR 0 6
39045: PUSH
39046: LD_VAR 0 7
39050: PUSH
39051: LD_VAR 0 9
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: EMPTY
39061: LIST
39062: ST_TO_ADDR
39063: GO 39207
// begin if result [ result ] [ 2 ] < tmp then
39065: LD_VAR 0 6
39069: PUSH
39070: LD_VAR 0 6
39074: ARRAY
39075: PUSH
39076: LD_INT 2
39078: ARRAY
39079: PUSH
39080: LD_VAR 0 9
39084: LESS
39085: IFFALSE 39127
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39087: LD_ADDR_VAR 0 6
39091: PUSH
39092: LD_VAR 0 6
39096: PPUSH
39097: LD_VAR 0 6
39101: PUSH
39102: LD_INT 1
39104: PLUS
39105: PPUSH
39106: LD_VAR 0 7
39110: PUSH
39111: LD_VAR 0 9
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PPUSH
39120: CALL_OW 2
39124: ST_TO_ADDR
39125: GO 39207
// for j = 1 to result do
39127: LD_ADDR_VAR 0 8
39131: PUSH
39132: DOUBLE
39133: LD_INT 1
39135: DEC
39136: ST_TO_ADDR
39137: LD_VAR 0 6
39141: PUSH
39142: FOR_TO
39143: IFFALSE 39205
// begin if tmp < result [ j ] [ 2 ] then
39145: LD_VAR 0 9
39149: PUSH
39150: LD_VAR 0 6
39154: PUSH
39155: LD_VAR 0 8
39159: ARRAY
39160: PUSH
39161: LD_INT 2
39163: ARRAY
39164: LESS
39165: IFFALSE 39203
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39167: LD_ADDR_VAR 0 6
39171: PUSH
39172: LD_VAR 0 6
39176: PPUSH
39177: LD_VAR 0 8
39181: PPUSH
39182: LD_VAR 0 7
39186: PUSH
39187: LD_VAR 0 9
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PPUSH
39196: CALL_OW 2
39200: ST_TO_ADDR
// break ;
39201: GO 39205
// end ; end ;
39203: GO 39142
39205: POP
39206: POP
// end ; end ;
39207: GO 39006
39209: POP
39210: POP
// if result and not asc then
39211: LD_VAR 0 6
39215: PUSH
39216: LD_VAR 0 4
39220: NOT
39221: AND
39222: IFFALSE 39297
// begin tmp := result ;
39224: LD_ADDR_VAR 0 9
39228: PUSH
39229: LD_VAR 0 6
39233: ST_TO_ADDR
// for i = tmp downto 1 do
39234: LD_ADDR_VAR 0 7
39238: PUSH
39239: DOUBLE
39240: LD_VAR 0 9
39244: INC
39245: ST_TO_ADDR
39246: LD_INT 1
39248: PUSH
39249: FOR_DOWNTO
39250: IFFALSE 39295
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39252: LD_ADDR_VAR 0 6
39256: PUSH
39257: LD_VAR 0 6
39261: PPUSH
39262: LD_VAR 0 9
39266: PUSH
39267: LD_VAR 0 7
39271: MINUS
39272: PUSH
39273: LD_INT 1
39275: PLUS
39276: PPUSH
39277: LD_VAR 0 9
39281: PUSH
39282: LD_VAR 0 7
39286: ARRAY
39287: PPUSH
39288: CALL_OW 1
39292: ST_TO_ADDR
39293: GO 39249
39295: POP
39296: POP
// end ; tmp := [ ] ;
39297: LD_ADDR_VAR 0 9
39301: PUSH
39302: EMPTY
39303: ST_TO_ADDR
// if mode then
39304: LD_VAR 0 5
39308: IFFALSE 39377
// begin for i = 1 to result do
39310: LD_ADDR_VAR 0 7
39314: PUSH
39315: DOUBLE
39316: LD_INT 1
39318: DEC
39319: ST_TO_ADDR
39320: LD_VAR 0 6
39324: PUSH
39325: FOR_TO
39326: IFFALSE 39365
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39328: LD_ADDR_VAR 0 9
39332: PUSH
39333: LD_VAR 0 9
39337: PPUSH
39338: LD_VAR 0 7
39342: PPUSH
39343: LD_VAR 0 6
39347: PUSH
39348: LD_VAR 0 7
39352: ARRAY
39353: PUSH
39354: LD_INT 1
39356: ARRAY
39357: PPUSH
39358: CALL_OW 1
39362: ST_TO_ADDR
39363: GO 39325
39365: POP
39366: POP
// result := tmp ;
39367: LD_ADDR_VAR 0 6
39371: PUSH
39372: LD_VAR 0 9
39376: ST_TO_ADDR
// end ; end ;
39377: LD_VAR 0 6
39381: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39382: LD_INT 0
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39390: LD_ADDR_VAR 0 5
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: ST_TO_ADDR
// if not x or not y then
39412: LD_VAR 0 2
39416: NOT
39417: PUSH
39418: LD_VAR 0 3
39422: NOT
39423: OR
39424: IFFALSE 39428
// exit ;
39426: GO 41080
// if not range then
39428: LD_VAR 0 4
39432: NOT
39433: IFFALSE 39443
// range := 10 ;
39435: LD_ADDR_VAR 0 4
39439: PUSH
39440: LD_INT 10
39442: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39443: LD_ADDR_VAR 0 8
39447: PUSH
39448: LD_INT 81
39450: PUSH
39451: LD_VAR 0 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 92
39462: PUSH
39463: LD_VAR 0 2
39467: PUSH
39468: LD_VAR 0 3
39472: PUSH
39473: LD_VAR 0 4
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 3
39486: PUSH
39487: LD_INT 21
39489: PUSH
39490: LD_INT 3
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: LIST
39505: PPUSH
39506: CALL_OW 69
39510: ST_TO_ADDR
// if not tmp then
39511: LD_VAR 0 8
39515: NOT
39516: IFFALSE 39520
// exit ;
39518: GO 41080
// for i in tmp do
39520: LD_ADDR_VAR 0 6
39524: PUSH
39525: LD_VAR 0 8
39529: PUSH
39530: FOR_IN
39531: IFFALSE 41055
// begin points := [ 0 , 0 , 0 ] ;
39533: LD_ADDR_VAR 0 9
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: ST_TO_ADDR
// bpoints := 1 ;
39552: LD_ADDR_VAR 0 10
39556: PUSH
39557: LD_INT 1
39559: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39560: LD_VAR 0 6
39564: PPUSH
39565: CALL_OW 247
39569: PUSH
39570: LD_INT 1
39572: DOUBLE
39573: EQUAL
39574: IFTRUE 39578
39576: GO 40156
39578: POP
// begin if GetClass ( i ) = 1 then
39579: LD_VAR 0 6
39583: PPUSH
39584: CALL_OW 257
39588: PUSH
39589: LD_INT 1
39591: EQUAL
39592: IFFALSE 39613
// points := [ 10 , 5 , 3 ] ;
39594: LD_ADDR_VAR 0 9
39598: PUSH
39599: LD_INT 10
39601: PUSH
39602: LD_INT 5
39604: PUSH
39605: LD_INT 3
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39613: LD_VAR 0 6
39617: PPUSH
39618: CALL_OW 257
39622: PUSH
39623: LD_INT 2
39625: PUSH
39626: LD_INT 3
39628: PUSH
39629: LD_INT 4
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: IN
39637: IFFALSE 39658
// points := [ 3 , 2 , 1 ] ;
39639: LD_ADDR_VAR 0 9
39643: PUSH
39644: LD_INT 3
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39658: LD_VAR 0 6
39662: PPUSH
39663: CALL_OW 257
39667: PUSH
39668: LD_INT 5
39670: EQUAL
39671: IFFALSE 39692
// points := [ 130 , 5 , 2 ] ;
39673: LD_ADDR_VAR 0 9
39677: PUSH
39678: LD_INT 130
39680: PUSH
39681: LD_INT 5
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39692: LD_VAR 0 6
39696: PPUSH
39697: CALL_OW 257
39701: PUSH
39702: LD_INT 8
39704: EQUAL
39705: IFFALSE 39726
// points := [ 35 , 35 , 30 ] ;
39707: LD_ADDR_VAR 0 9
39711: PUSH
39712: LD_INT 35
39714: PUSH
39715: LD_INT 35
39717: PUSH
39718: LD_INT 30
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39726: LD_VAR 0 6
39730: PPUSH
39731: CALL_OW 257
39735: PUSH
39736: LD_INT 9
39738: EQUAL
39739: IFFALSE 39760
// points := [ 20 , 55 , 40 ] ;
39741: LD_ADDR_VAR 0 9
39745: PUSH
39746: LD_INT 20
39748: PUSH
39749: LD_INT 55
39751: PUSH
39752: LD_INT 40
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39760: LD_VAR 0 6
39764: PPUSH
39765: CALL_OW 257
39769: PUSH
39770: LD_INT 12
39772: PUSH
39773: LD_INT 16
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: IN
39780: IFFALSE 39801
// points := [ 5 , 3 , 2 ] ;
39782: LD_ADDR_VAR 0 9
39786: PUSH
39787: LD_INT 5
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39801: LD_VAR 0 6
39805: PPUSH
39806: CALL_OW 257
39810: PUSH
39811: LD_INT 17
39813: EQUAL
39814: IFFALSE 39835
// points := [ 100 , 50 , 75 ] ;
39816: LD_ADDR_VAR 0 9
39820: PUSH
39821: LD_INT 100
39823: PUSH
39824: LD_INT 50
39826: PUSH
39827: LD_INT 75
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: LIST
39834: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39835: LD_VAR 0 6
39839: PPUSH
39840: CALL_OW 257
39844: PUSH
39845: LD_INT 15
39847: EQUAL
39848: IFFALSE 39869
// points := [ 10 , 5 , 3 ] ;
39850: LD_ADDR_VAR 0 9
39854: PUSH
39855: LD_INT 10
39857: PUSH
39858: LD_INT 5
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: LIST
39868: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39869: LD_VAR 0 6
39873: PPUSH
39874: CALL_OW 257
39878: PUSH
39879: LD_INT 14
39881: EQUAL
39882: IFFALSE 39903
// points := [ 10 , 0 , 0 ] ;
39884: LD_ADDR_VAR 0 9
39888: PUSH
39889: LD_INT 10
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39903: LD_VAR 0 6
39907: PPUSH
39908: CALL_OW 257
39912: PUSH
39913: LD_INT 11
39915: EQUAL
39916: IFFALSE 39937
// points := [ 30 , 10 , 5 ] ;
39918: LD_ADDR_VAR 0 9
39922: PUSH
39923: LD_INT 30
39925: PUSH
39926: LD_INT 10
39928: PUSH
39929: LD_INT 5
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39937: LD_VAR 0 1
39941: PPUSH
39942: LD_INT 5
39944: PPUSH
39945: CALL_OW 321
39949: PUSH
39950: LD_INT 2
39952: EQUAL
39953: IFFALSE 39970
// bpoints := bpoints * 1.8 ;
39955: LD_ADDR_VAR 0 10
39959: PUSH
39960: LD_VAR 0 10
39964: PUSH
39965: LD_REAL  1.80000000000000E+0000
39968: MUL
39969: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39970: LD_VAR 0 6
39974: PPUSH
39975: CALL_OW 257
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 3
39988: PUSH
39989: LD_INT 4
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: IN
39998: PUSH
39999: LD_VAR 0 1
40003: PPUSH
40004: LD_INT 51
40006: PPUSH
40007: CALL_OW 321
40011: PUSH
40012: LD_INT 2
40014: EQUAL
40015: AND
40016: IFFALSE 40033
// bpoints := bpoints * 1.2 ;
40018: LD_ADDR_VAR 0 10
40022: PUSH
40023: LD_VAR 0 10
40027: PUSH
40028: LD_REAL  1.20000000000000E+0000
40031: MUL
40032: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40033: LD_VAR 0 6
40037: PPUSH
40038: CALL_OW 257
40042: PUSH
40043: LD_INT 5
40045: PUSH
40046: LD_INT 7
40048: PUSH
40049: LD_INT 9
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: IN
40057: PUSH
40058: LD_VAR 0 1
40062: PPUSH
40063: LD_INT 52
40065: PPUSH
40066: CALL_OW 321
40070: PUSH
40071: LD_INT 2
40073: EQUAL
40074: AND
40075: IFFALSE 40092
// bpoints := bpoints * 1.5 ;
40077: LD_ADDR_VAR 0 10
40081: PUSH
40082: LD_VAR 0 10
40086: PUSH
40087: LD_REAL  1.50000000000000E+0000
40090: MUL
40091: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40092: LD_VAR 0 1
40096: PPUSH
40097: LD_INT 66
40099: PPUSH
40100: CALL_OW 321
40104: PUSH
40105: LD_INT 2
40107: EQUAL
40108: IFFALSE 40125
// bpoints := bpoints * 1.1 ;
40110: LD_ADDR_VAR 0 10
40114: PUSH
40115: LD_VAR 0 10
40119: PUSH
40120: LD_REAL  1.10000000000000E+0000
40123: MUL
40124: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40125: LD_ADDR_VAR 0 10
40129: PUSH
40130: LD_VAR 0 10
40134: PUSH
40135: LD_VAR 0 6
40139: PPUSH
40140: LD_INT 1
40142: PPUSH
40143: CALL_OW 259
40147: PUSH
40148: LD_REAL  1.15000000000000E+0000
40151: MUL
40152: MUL
40153: ST_TO_ADDR
// end ; unit_vehicle :
40154: GO 40984
40156: LD_INT 2
40158: DOUBLE
40159: EQUAL
40160: IFTRUE 40164
40162: GO 40972
40164: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40165: LD_VAR 0 6
40169: PPUSH
40170: CALL_OW 264
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: LD_INT 42
40180: PUSH
40181: LD_INT 24
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: IN
40189: IFFALSE 40210
// points := [ 25 , 5 , 3 ] ;
40191: LD_ADDR_VAR 0 9
40195: PUSH
40196: LD_INT 25
40198: PUSH
40199: LD_INT 5
40201: PUSH
40202: LD_INT 3
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40210: LD_VAR 0 6
40214: PPUSH
40215: CALL_OW 264
40219: PUSH
40220: LD_INT 4
40222: PUSH
40223: LD_INT 43
40225: PUSH
40226: LD_INT 25
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: IN
40234: IFFALSE 40255
// points := [ 40 , 15 , 5 ] ;
40236: LD_ADDR_VAR 0 9
40240: PUSH
40241: LD_INT 40
40243: PUSH
40244: LD_INT 15
40246: PUSH
40247: LD_INT 5
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40255: LD_VAR 0 6
40259: PPUSH
40260: CALL_OW 264
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: LD_INT 23
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: IN
40275: IFFALSE 40296
// points := [ 7 , 25 , 8 ] ;
40277: LD_ADDR_VAR 0 9
40281: PUSH
40282: LD_INT 7
40284: PUSH
40285: LD_INT 25
40287: PUSH
40288: LD_INT 8
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40296: LD_VAR 0 6
40300: PPUSH
40301: CALL_OW 264
40305: PUSH
40306: LD_INT 5
40308: PUSH
40309: LD_INT 27
40311: PUSH
40312: LD_INT 44
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: IN
40320: IFFALSE 40341
// points := [ 14 , 50 , 16 ] ;
40322: LD_ADDR_VAR 0 9
40326: PUSH
40327: LD_INT 14
40329: PUSH
40330: LD_INT 50
40332: PUSH
40333: LD_INT 16
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: LIST
40340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40341: LD_VAR 0 6
40345: PPUSH
40346: CALL_OW 264
40350: PUSH
40351: LD_INT 6
40353: PUSH
40354: LD_INT 46
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: IN
40361: IFFALSE 40382
// points := [ 32 , 120 , 70 ] ;
40363: LD_ADDR_VAR 0 9
40367: PUSH
40368: LD_INT 32
40370: PUSH
40371: LD_INT 120
40373: PUSH
40374: LD_INT 70
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40382: LD_VAR 0 6
40386: PPUSH
40387: CALL_OW 264
40391: PUSH
40392: LD_INT 7
40394: PUSH
40395: LD_INT 28
40397: PUSH
40398: LD_INT 45
40400: PUSH
40401: LD_EXP 49
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: IN
40412: IFFALSE 40433
// points := [ 35 , 20 , 45 ] ;
40414: LD_ADDR_VAR 0 9
40418: PUSH
40419: LD_INT 35
40421: PUSH
40422: LD_INT 20
40424: PUSH
40425: LD_INT 45
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: LIST
40432: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40433: LD_VAR 0 6
40437: PPUSH
40438: CALL_OW 264
40442: PUSH
40443: LD_INT 47
40445: PUSH
40446: EMPTY
40447: LIST
40448: IN
40449: IFFALSE 40470
// points := [ 67 , 45 , 75 ] ;
40451: LD_ADDR_VAR 0 9
40455: PUSH
40456: LD_INT 67
40458: PUSH
40459: LD_INT 45
40461: PUSH
40462: LD_INT 75
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40470: LD_VAR 0 6
40474: PPUSH
40475: CALL_OW 264
40479: PUSH
40480: LD_INT 26
40482: PUSH
40483: EMPTY
40484: LIST
40485: IN
40486: IFFALSE 40507
// points := [ 120 , 30 , 80 ] ;
40488: LD_ADDR_VAR 0 9
40492: PUSH
40493: LD_INT 120
40495: PUSH
40496: LD_INT 30
40498: PUSH
40499: LD_INT 80
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: LIST
40506: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40507: LD_VAR 0 6
40511: PPUSH
40512: CALL_OW 264
40516: PUSH
40517: LD_INT 22
40519: PUSH
40520: EMPTY
40521: LIST
40522: IN
40523: IFFALSE 40544
// points := [ 40 , 1 , 1 ] ;
40525: LD_ADDR_VAR 0 9
40529: PUSH
40530: LD_INT 40
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40544: LD_VAR 0 6
40548: PPUSH
40549: CALL_OW 264
40553: PUSH
40554: LD_INT 29
40556: PUSH
40557: EMPTY
40558: LIST
40559: IN
40560: IFFALSE 40581
// points := [ 70 , 200 , 400 ] ;
40562: LD_ADDR_VAR 0 9
40566: PUSH
40567: LD_INT 70
40569: PUSH
40570: LD_INT 200
40572: PUSH
40573: LD_INT 400
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40581: LD_VAR 0 6
40585: PPUSH
40586: CALL_OW 264
40590: PUSH
40591: LD_INT 14
40593: PUSH
40594: LD_INT 53
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: IN
40601: IFFALSE 40622
// points := [ 40 , 10 , 20 ] ;
40603: LD_ADDR_VAR 0 9
40607: PUSH
40608: LD_INT 40
40610: PUSH
40611: LD_INT 10
40613: PUSH
40614: LD_INT 20
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: LIST
40621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40622: LD_VAR 0 6
40626: PPUSH
40627: CALL_OW 264
40631: PUSH
40632: LD_INT 9
40634: PUSH
40635: EMPTY
40636: LIST
40637: IN
40638: IFFALSE 40659
// points := [ 5 , 70 , 20 ] ;
40640: LD_ADDR_VAR 0 9
40644: PUSH
40645: LD_INT 5
40647: PUSH
40648: LD_INT 70
40650: PUSH
40651: LD_INT 20
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40659: LD_VAR 0 6
40663: PPUSH
40664: CALL_OW 264
40668: PUSH
40669: LD_INT 10
40671: PUSH
40672: EMPTY
40673: LIST
40674: IN
40675: IFFALSE 40696
// points := [ 35 , 110 , 70 ] ;
40677: LD_ADDR_VAR 0 9
40681: PUSH
40682: LD_INT 35
40684: PUSH
40685: LD_INT 110
40687: PUSH
40688: LD_INT 70
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40696: LD_VAR 0 6
40700: PPUSH
40701: CALL_OW 265
40705: PUSH
40706: LD_INT 25
40708: EQUAL
40709: IFFALSE 40730
// points := [ 80 , 65 , 100 ] ;
40711: LD_ADDR_VAR 0 9
40715: PUSH
40716: LD_INT 80
40718: PUSH
40719: LD_INT 65
40721: PUSH
40722: LD_INT 100
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40730: LD_VAR 0 6
40734: PPUSH
40735: CALL_OW 263
40739: PUSH
40740: LD_INT 1
40742: EQUAL
40743: IFFALSE 40778
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40745: LD_ADDR_VAR 0 10
40749: PUSH
40750: LD_VAR 0 10
40754: PUSH
40755: LD_VAR 0 6
40759: PPUSH
40760: CALL_OW 311
40764: PPUSH
40765: LD_INT 3
40767: PPUSH
40768: CALL_OW 259
40772: PUSH
40773: LD_INT 4
40775: MUL
40776: MUL
40777: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40778: LD_VAR 0 6
40782: PPUSH
40783: CALL_OW 263
40787: PUSH
40788: LD_INT 2
40790: EQUAL
40791: IFFALSE 40842
// begin j := IsControledBy ( i ) ;
40793: LD_ADDR_VAR 0 7
40797: PUSH
40798: LD_VAR 0 6
40802: PPUSH
40803: CALL_OW 312
40807: ST_TO_ADDR
// if j then
40808: LD_VAR 0 7
40812: IFFALSE 40842
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40814: LD_ADDR_VAR 0 10
40818: PUSH
40819: LD_VAR 0 10
40823: PUSH
40824: LD_VAR 0 7
40828: PPUSH
40829: LD_INT 3
40831: PPUSH
40832: CALL_OW 259
40836: PUSH
40837: LD_INT 3
40839: MUL
40840: MUL
40841: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40842: LD_VAR 0 6
40846: PPUSH
40847: CALL_OW 264
40851: PUSH
40852: LD_INT 5
40854: PUSH
40855: LD_INT 6
40857: PUSH
40858: LD_INT 46
40860: PUSH
40861: LD_INT 44
40863: PUSH
40864: LD_INT 47
40866: PUSH
40867: LD_INT 45
40869: PUSH
40870: LD_INT 28
40872: PUSH
40873: LD_INT 7
40875: PUSH
40876: LD_INT 27
40878: PUSH
40879: LD_INT 29
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: IN
40894: PUSH
40895: LD_VAR 0 1
40899: PPUSH
40900: LD_INT 52
40902: PPUSH
40903: CALL_OW 321
40907: PUSH
40908: LD_INT 2
40910: EQUAL
40911: AND
40912: IFFALSE 40929
// bpoints := bpoints * 1.2 ;
40914: LD_ADDR_VAR 0 10
40918: PUSH
40919: LD_VAR 0 10
40923: PUSH
40924: LD_REAL  1.20000000000000E+0000
40927: MUL
40928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40929: LD_VAR 0 6
40933: PPUSH
40934: CALL_OW 264
40938: PUSH
40939: LD_INT 6
40941: PUSH
40942: LD_INT 46
40944: PUSH
40945: LD_INT 47
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: IN
40953: IFFALSE 40970
// bpoints := bpoints * 1.2 ;
40955: LD_ADDR_VAR 0 10
40959: PUSH
40960: LD_VAR 0 10
40964: PUSH
40965: LD_REAL  1.20000000000000E+0000
40968: MUL
40969: ST_TO_ADDR
// end ; unit_building :
40970: GO 40984
40972: LD_INT 3
40974: DOUBLE
40975: EQUAL
40976: IFTRUE 40980
40978: GO 40983
40980: POP
// ; end ;
40981: GO 40984
40983: POP
// for j = 1 to 3 do
40984: LD_ADDR_VAR 0 7
40988: PUSH
40989: DOUBLE
40990: LD_INT 1
40992: DEC
40993: ST_TO_ADDR
40994: LD_INT 3
40996: PUSH
40997: FOR_TO
40998: IFFALSE 41051
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41000: LD_ADDR_VAR 0 5
41004: PUSH
41005: LD_VAR 0 5
41009: PPUSH
41010: LD_VAR 0 7
41014: PPUSH
41015: LD_VAR 0 5
41019: PUSH
41020: LD_VAR 0 7
41024: ARRAY
41025: PUSH
41026: LD_VAR 0 9
41030: PUSH
41031: LD_VAR 0 7
41035: ARRAY
41036: PUSH
41037: LD_VAR 0 10
41041: MUL
41042: PLUS
41043: PPUSH
41044: CALL_OW 1
41048: ST_TO_ADDR
41049: GO 40997
41051: POP
41052: POP
// end ;
41053: GO 39530
41055: POP
41056: POP
// result := Replace ( result , 4 , tmp ) ;
41057: LD_ADDR_VAR 0 5
41061: PUSH
41062: LD_VAR 0 5
41066: PPUSH
41067: LD_INT 4
41069: PPUSH
41070: LD_VAR 0 8
41074: PPUSH
41075: CALL_OW 1
41079: ST_TO_ADDR
// end ;
41080: LD_VAR 0 5
41084: RET
// export function DangerAtRange ( unit , range ) ; begin
41085: LD_INT 0
41087: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_VAR 0 1
41097: PPUSH
41098: CALL_OW 255
41102: PPUSH
41103: LD_VAR 0 1
41107: PPUSH
41108: CALL_OW 250
41112: PPUSH
41113: LD_VAR 0 1
41117: PPUSH
41118: CALL_OW 251
41122: PPUSH
41123: LD_VAR 0 2
41127: PPUSH
41128: CALL 39382 0 4
41132: ST_TO_ADDR
// end ;
41133: LD_VAR 0 3
41137: RET
// export function DangerInArea ( side , area ) ; begin
41138: LD_INT 0
41140: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41141: LD_ADDR_VAR 0 3
41145: PUSH
41146: LD_VAR 0 2
41150: PPUSH
41151: LD_INT 81
41153: PUSH
41154: LD_VAR 0 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PPUSH
41163: CALL_OW 70
41167: ST_TO_ADDR
// end ;
41168: LD_VAR 0 3
41172: RET
// export function IsExtension ( b ) ; begin
41173: LD_INT 0
41175: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41176: LD_ADDR_VAR 0 2
41180: PUSH
41181: LD_VAR 0 1
41185: PUSH
41186: LD_INT 23
41188: PUSH
41189: LD_INT 20
41191: PUSH
41192: LD_INT 22
41194: PUSH
41195: LD_INT 17
41197: PUSH
41198: LD_INT 24
41200: PUSH
41201: LD_INT 21
41203: PUSH
41204: LD_INT 19
41206: PUSH
41207: LD_INT 16
41209: PUSH
41210: LD_INT 25
41212: PUSH
41213: LD_INT 18
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: IN
41228: ST_TO_ADDR
// end ;
41229: LD_VAR 0 2
41233: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41234: LD_INT 0
41236: PPUSH
41237: PPUSH
41238: PPUSH
// result := [ ] ;
41239: LD_ADDR_VAR 0 4
41243: PUSH
41244: EMPTY
41245: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41246: LD_ADDR_VAR 0 5
41250: PUSH
41251: LD_VAR 0 2
41255: PPUSH
41256: LD_INT 21
41258: PUSH
41259: LD_INT 3
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PPUSH
41266: CALL_OW 70
41270: ST_TO_ADDR
// if not tmp then
41271: LD_VAR 0 5
41275: NOT
41276: IFFALSE 41280
// exit ;
41278: GO 41344
// if checkLink then
41280: LD_VAR 0 3
41284: IFFALSE 41334
// begin for i in tmp do
41286: LD_ADDR_VAR 0 6
41290: PUSH
41291: LD_VAR 0 5
41295: PUSH
41296: FOR_IN
41297: IFFALSE 41332
// if GetBase ( i ) <> base then
41299: LD_VAR 0 6
41303: PPUSH
41304: CALL_OW 274
41308: PUSH
41309: LD_VAR 0 1
41313: NONEQUAL
41314: IFFALSE 41330
// ComLinkToBase ( base , i ) ;
41316: LD_VAR 0 1
41320: PPUSH
41321: LD_VAR 0 6
41325: PPUSH
41326: CALL_OW 169
41330: GO 41296
41332: POP
41333: POP
// end ; result := tmp ;
41334: LD_ADDR_VAR 0 4
41338: PUSH
41339: LD_VAR 0 5
41343: ST_TO_ADDR
// end ;
41344: LD_VAR 0 4
41348: RET
// export function ComComplete ( units , b ) ; var i ; begin
41349: LD_INT 0
41351: PPUSH
41352: PPUSH
// if not units then
41353: LD_VAR 0 1
41357: NOT
41358: IFFALSE 41362
// exit ;
41360: GO 41452
// for i in units do
41362: LD_ADDR_VAR 0 4
41366: PUSH
41367: LD_VAR 0 1
41371: PUSH
41372: FOR_IN
41373: IFFALSE 41450
// if BuildingStatus ( b ) = bs_build then
41375: LD_VAR 0 2
41379: PPUSH
41380: CALL_OW 461
41384: PUSH
41385: LD_INT 1
41387: EQUAL
41388: IFFALSE 41448
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41390: LD_VAR 0 4
41394: PPUSH
41395: LD_STRING h
41397: PUSH
41398: LD_VAR 0 2
41402: PPUSH
41403: CALL_OW 250
41407: PUSH
41408: LD_VAR 0 2
41412: PPUSH
41413: CALL_OW 251
41417: PUSH
41418: LD_VAR 0 2
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: PUSH
41441: EMPTY
41442: LIST
41443: PPUSH
41444: CALL_OW 446
41448: GO 41372
41450: POP
41451: POP
// end ;
41452: LD_VAR 0 3
41456: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41457: LD_INT 0
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41465: LD_VAR 0 1
41469: NOT
41470: PUSH
41471: LD_VAR 0 1
41475: PPUSH
41476: CALL_OW 263
41480: PUSH
41481: LD_INT 2
41483: NONEQUAL
41484: OR
41485: IFFALSE 41489
// exit ;
41487: GO 41805
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41489: LD_ADDR_VAR 0 6
41493: PUSH
41494: LD_INT 22
41496: PUSH
41497: LD_VAR 0 1
41501: PPUSH
41502: CALL_OW 255
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: LD_INT 30
41516: PUSH
41517: LD_INT 36
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 34
41526: PUSH
41527: LD_INT 31
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: LIST
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PPUSH
41543: CALL_OW 69
41547: ST_TO_ADDR
// if not tmp then
41548: LD_VAR 0 6
41552: NOT
41553: IFFALSE 41557
// exit ;
41555: GO 41805
// result := [ ] ;
41557: LD_ADDR_VAR 0 2
41561: PUSH
41562: EMPTY
41563: ST_TO_ADDR
// for i in tmp do
41564: LD_ADDR_VAR 0 3
41568: PUSH
41569: LD_VAR 0 6
41573: PUSH
41574: FOR_IN
41575: IFFALSE 41646
// begin t := UnitsInside ( i ) ;
41577: LD_ADDR_VAR 0 4
41581: PUSH
41582: LD_VAR 0 3
41586: PPUSH
41587: CALL_OW 313
41591: ST_TO_ADDR
// if t then
41592: LD_VAR 0 4
41596: IFFALSE 41644
// for j in t do
41598: LD_ADDR_VAR 0 7
41602: PUSH
41603: LD_VAR 0 4
41607: PUSH
41608: FOR_IN
41609: IFFALSE 41642
// result := Replace ( result , result + 1 , j ) ;
41611: LD_ADDR_VAR 0 2
41615: PUSH
41616: LD_VAR 0 2
41620: PPUSH
41621: LD_VAR 0 2
41625: PUSH
41626: LD_INT 1
41628: PLUS
41629: PPUSH
41630: LD_VAR 0 7
41634: PPUSH
41635: CALL_OW 1
41639: ST_TO_ADDR
41640: GO 41608
41642: POP
41643: POP
// end ;
41644: GO 41574
41646: POP
41647: POP
// if not result then
41648: LD_VAR 0 2
41652: NOT
41653: IFFALSE 41657
// exit ;
41655: GO 41805
// mech := result [ 1 ] ;
41657: LD_ADDR_VAR 0 5
41661: PUSH
41662: LD_VAR 0 2
41666: PUSH
41667: LD_INT 1
41669: ARRAY
41670: ST_TO_ADDR
// if result > 1 then
41671: LD_VAR 0 2
41675: PUSH
41676: LD_INT 1
41678: GREATER
41679: IFFALSE 41791
// begin for i = 2 to result do
41681: LD_ADDR_VAR 0 3
41685: PUSH
41686: DOUBLE
41687: LD_INT 2
41689: DEC
41690: ST_TO_ADDR
41691: LD_VAR 0 2
41695: PUSH
41696: FOR_TO
41697: IFFALSE 41789
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41699: LD_ADDR_VAR 0 4
41703: PUSH
41704: LD_VAR 0 2
41708: PUSH
41709: LD_VAR 0 3
41713: ARRAY
41714: PPUSH
41715: LD_INT 3
41717: PPUSH
41718: CALL_OW 259
41722: PUSH
41723: LD_VAR 0 2
41727: PUSH
41728: LD_VAR 0 3
41732: ARRAY
41733: PPUSH
41734: CALL_OW 432
41738: MINUS
41739: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41740: LD_VAR 0 4
41744: PUSH
41745: LD_VAR 0 5
41749: PPUSH
41750: LD_INT 3
41752: PPUSH
41753: CALL_OW 259
41757: PUSH
41758: LD_VAR 0 5
41762: PPUSH
41763: CALL_OW 432
41767: MINUS
41768: GREATEREQUAL
41769: IFFALSE 41787
// mech := result [ i ] ;
41771: LD_ADDR_VAR 0 5
41775: PUSH
41776: LD_VAR 0 2
41780: PUSH
41781: LD_VAR 0 3
41785: ARRAY
41786: ST_TO_ADDR
// end ;
41787: GO 41696
41789: POP
41790: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41791: LD_VAR 0 1
41795: PPUSH
41796: LD_VAR 0 5
41800: PPUSH
41801: CALL_OW 135
// end ;
41805: LD_VAR 0 2
41809: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41810: LD_INT 0
41812: PPUSH
41813: PPUSH
41814: PPUSH
41815: PPUSH
41816: PPUSH
41817: PPUSH
41818: PPUSH
41819: PPUSH
41820: PPUSH
41821: PPUSH
41822: PPUSH
41823: PPUSH
41824: PPUSH
// result := [ ] ;
41825: LD_ADDR_VAR 0 7
41829: PUSH
41830: EMPTY
41831: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41832: LD_VAR 0 1
41836: PPUSH
41837: CALL_OW 266
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: IN
41852: NOT
41853: IFFALSE 41857
// exit ;
41855: GO 43491
// if name then
41857: LD_VAR 0 3
41861: IFFALSE 41877
// SetBName ( base_dep , name ) ;
41863: LD_VAR 0 1
41867: PPUSH
41868: LD_VAR 0 3
41872: PPUSH
41873: CALL_OW 500
// base := GetBase ( base_dep ) ;
41877: LD_ADDR_VAR 0 15
41881: PUSH
41882: LD_VAR 0 1
41886: PPUSH
41887: CALL_OW 274
41891: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41892: LD_ADDR_VAR 0 16
41896: PUSH
41897: LD_VAR 0 1
41901: PPUSH
41902: CALL_OW 255
41906: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41907: LD_ADDR_VAR 0 17
41911: PUSH
41912: LD_VAR 0 1
41916: PPUSH
41917: CALL_OW 248
41921: ST_TO_ADDR
// if sources then
41922: LD_VAR 0 5
41926: IFFALSE 41973
// for i = 1 to 3 do
41928: LD_ADDR_VAR 0 8
41932: PUSH
41933: DOUBLE
41934: LD_INT 1
41936: DEC
41937: ST_TO_ADDR
41938: LD_INT 3
41940: PUSH
41941: FOR_TO
41942: IFFALSE 41971
// AddResourceType ( base , i , sources [ i ] ) ;
41944: LD_VAR 0 15
41948: PPUSH
41949: LD_VAR 0 8
41953: PPUSH
41954: LD_VAR 0 5
41958: PUSH
41959: LD_VAR 0 8
41963: ARRAY
41964: PPUSH
41965: CALL_OW 276
41969: GO 41941
41971: POP
41972: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41973: LD_ADDR_VAR 0 18
41977: PUSH
41978: LD_VAR 0 15
41982: PPUSH
41983: LD_VAR 0 2
41987: PPUSH
41988: LD_INT 1
41990: PPUSH
41991: CALL 41234 0 3
41995: ST_TO_ADDR
// InitHc ;
41996: CALL_OW 19
// InitUc ;
42000: CALL_OW 18
// uc_side := side ;
42004: LD_ADDR_OWVAR 20
42008: PUSH
42009: LD_VAR 0 16
42013: ST_TO_ADDR
// uc_nation := nation ;
42014: LD_ADDR_OWVAR 21
42018: PUSH
42019: LD_VAR 0 17
42023: ST_TO_ADDR
// if buildings then
42024: LD_VAR 0 18
42028: IFFALSE 43350
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42030: LD_ADDR_VAR 0 19
42034: PUSH
42035: LD_VAR 0 18
42039: PPUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 30
42045: PUSH
42046: LD_INT 29
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 30
42055: PUSH
42056: LD_INT 30
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: PPUSH
42068: CALL_OW 72
42072: ST_TO_ADDR
// if tmp then
42073: LD_VAR 0 19
42077: IFFALSE 42125
// for i in tmp do
42079: LD_ADDR_VAR 0 8
42083: PUSH
42084: LD_VAR 0 19
42088: PUSH
42089: FOR_IN
42090: IFFALSE 42123
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42092: LD_VAR 0 8
42096: PPUSH
42097: CALL_OW 250
42101: PPUSH
42102: LD_VAR 0 8
42106: PPUSH
42107: CALL_OW 251
42111: PPUSH
42112: LD_VAR 0 16
42116: PPUSH
42117: CALL_OW 441
42121: GO 42089
42123: POP
42124: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42125: LD_VAR 0 18
42129: PPUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 30
42135: PUSH
42136: LD_INT 32
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 30
42145: PUSH
42146: LD_INT 33
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: PPUSH
42158: CALL_OW 72
42162: IFFALSE 42250
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42164: LD_ADDR_VAR 0 8
42168: PUSH
42169: LD_VAR 0 18
42173: PPUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 30
42179: PUSH
42180: LD_INT 32
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 30
42189: PUSH
42190: LD_INT 33
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: LIST
42201: PPUSH
42202: CALL_OW 72
42206: PUSH
42207: FOR_IN
42208: IFFALSE 42248
// begin if not GetBWeapon ( i ) then
42210: LD_VAR 0 8
42214: PPUSH
42215: CALL_OW 269
42219: NOT
42220: IFFALSE 42246
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42222: LD_VAR 0 8
42226: PPUSH
42227: LD_VAR 0 8
42231: PPUSH
42232: LD_VAR 0 2
42236: PPUSH
42237: CALL 43496 0 2
42241: PPUSH
42242: CALL_OW 431
// end ;
42246: GO 42207
42248: POP
42249: POP
// end ; for i = 1 to personel do
42250: LD_ADDR_VAR 0 8
42254: PUSH
42255: DOUBLE
42256: LD_INT 1
42258: DEC
42259: ST_TO_ADDR
42260: LD_VAR 0 6
42264: PUSH
42265: FOR_TO
42266: IFFALSE 43330
// begin if i > 4 then
42268: LD_VAR 0 8
42272: PUSH
42273: LD_INT 4
42275: GREATER
42276: IFFALSE 42280
// break ;
42278: GO 43330
// case i of 1 :
42280: LD_VAR 0 8
42284: PUSH
42285: LD_INT 1
42287: DOUBLE
42288: EQUAL
42289: IFTRUE 42293
42291: GO 42373
42293: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42294: LD_ADDR_VAR 0 12
42298: PUSH
42299: LD_VAR 0 18
42303: PPUSH
42304: LD_INT 22
42306: PUSH
42307: LD_VAR 0 16
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 58
42318: PUSH
42319: EMPTY
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: LD_INT 30
42327: PUSH
42328: LD_INT 32
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 30
42337: PUSH
42338: LD_INT 4
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 30
42347: PUSH
42348: LD_INT 5
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: PPUSH
42366: CALL_OW 72
42370: ST_TO_ADDR
42371: GO 42595
42373: LD_INT 2
42375: DOUBLE
42376: EQUAL
42377: IFTRUE 42381
42379: GO 42443
42381: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42382: LD_ADDR_VAR 0 12
42386: PUSH
42387: LD_VAR 0 18
42391: PPUSH
42392: LD_INT 22
42394: PUSH
42395: LD_VAR 0 16
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 30
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 30
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PPUSH
42436: CALL_OW 72
42440: ST_TO_ADDR
42441: GO 42595
42443: LD_INT 3
42445: DOUBLE
42446: EQUAL
42447: IFTRUE 42451
42449: GO 42513
42451: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42452: LD_ADDR_VAR 0 12
42456: PUSH
42457: LD_VAR 0 18
42461: PPUSH
42462: LD_INT 22
42464: PUSH
42465: LD_VAR 0 16
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 30
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 30
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PPUSH
42506: CALL_OW 72
42510: ST_TO_ADDR
42511: GO 42595
42513: LD_INT 4
42515: DOUBLE
42516: EQUAL
42517: IFTRUE 42521
42519: GO 42594
42521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42522: LD_ADDR_VAR 0 12
42526: PUSH
42527: LD_VAR 0 18
42531: PPUSH
42532: LD_INT 22
42534: PUSH
42535: LD_VAR 0 16
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 30
42549: PUSH
42550: LD_INT 6
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 30
42559: PUSH
42560: LD_INT 7
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 30
42569: PUSH
42570: LD_INT 8
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PPUSH
42587: CALL_OW 72
42591: ST_TO_ADDR
42592: GO 42595
42594: POP
// if i = 1 then
42595: LD_VAR 0 8
42599: PUSH
42600: LD_INT 1
42602: EQUAL
42603: IFFALSE 42714
// begin tmp := [ ] ;
42605: LD_ADDR_VAR 0 19
42609: PUSH
42610: EMPTY
42611: ST_TO_ADDR
// for j in f do
42612: LD_ADDR_VAR 0 9
42616: PUSH
42617: LD_VAR 0 12
42621: PUSH
42622: FOR_IN
42623: IFFALSE 42696
// if GetBType ( j ) = b_bunker then
42625: LD_VAR 0 9
42629: PPUSH
42630: CALL_OW 266
42634: PUSH
42635: LD_INT 32
42637: EQUAL
42638: IFFALSE 42665
// tmp := Insert ( tmp , 1 , j ) else
42640: LD_ADDR_VAR 0 19
42644: PUSH
42645: LD_VAR 0 19
42649: PPUSH
42650: LD_INT 1
42652: PPUSH
42653: LD_VAR 0 9
42657: PPUSH
42658: CALL_OW 2
42662: ST_TO_ADDR
42663: GO 42694
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42665: LD_ADDR_VAR 0 19
42669: PUSH
42670: LD_VAR 0 19
42674: PPUSH
42675: LD_VAR 0 19
42679: PUSH
42680: LD_INT 1
42682: PLUS
42683: PPUSH
42684: LD_VAR 0 9
42688: PPUSH
42689: CALL_OW 2
42693: ST_TO_ADDR
42694: GO 42622
42696: POP
42697: POP
// if tmp then
42698: LD_VAR 0 19
42702: IFFALSE 42714
// f := tmp ;
42704: LD_ADDR_VAR 0 12
42708: PUSH
42709: LD_VAR 0 19
42713: ST_TO_ADDR
// end ; x := personel [ i ] ;
42714: LD_ADDR_VAR 0 13
42718: PUSH
42719: LD_VAR 0 6
42723: PUSH
42724: LD_VAR 0 8
42728: ARRAY
42729: ST_TO_ADDR
// if x = - 1 then
42730: LD_VAR 0 13
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: EQUAL
42739: IFFALSE 42948
// begin for j in f do
42741: LD_ADDR_VAR 0 9
42745: PUSH
42746: LD_VAR 0 12
42750: PUSH
42751: FOR_IN
42752: IFFALSE 42944
// repeat InitHc ;
42754: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42758: LD_VAR 0 9
42762: PPUSH
42763: CALL_OW 266
42767: PUSH
42768: LD_INT 5
42770: EQUAL
42771: IFFALSE 42841
// begin if UnitsInside ( j ) < 3 then
42773: LD_VAR 0 9
42777: PPUSH
42778: CALL_OW 313
42782: PUSH
42783: LD_INT 3
42785: LESS
42786: IFFALSE 42822
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42788: LD_INT 0
42790: PPUSH
42791: LD_INT 5
42793: PUSH
42794: LD_INT 8
42796: PUSH
42797: LD_INT 9
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: PUSH
42805: LD_VAR 0 17
42809: ARRAY
42810: PPUSH
42811: LD_VAR 0 4
42815: PPUSH
42816: CALL_OW 380
42820: GO 42839
// PrepareHuman ( false , i , skill ) ;
42822: LD_INT 0
42824: PPUSH
42825: LD_VAR 0 8
42829: PPUSH
42830: LD_VAR 0 4
42834: PPUSH
42835: CALL_OW 380
// end else
42839: GO 42858
// PrepareHuman ( false , i , skill ) ;
42841: LD_INT 0
42843: PPUSH
42844: LD_VAR 0 8
42848: PPUSH
42849: LD_VAR 0 4
42853: PPUSH
42854: CALL_OW 380
// un := CreateHuman ;
42858: LD_ADDR_VAR 0 14
42862: PUSH
42863: CALL_OW 44
42867: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42868: LD_ADDR_VAR 0 7
42872: PUSH
42873: LD_VAR 0 7
42877: PPUSH
42878: LD_INT 1
42880: PPUSH
42881: LD_VAR 0 14
42885: PPUSH
42886: CALL_OW 2
42890: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42891: LD_VAR 0 14
42895: PPUSH
42896: LD_VAR 0 9
42900: PPUSH
42901: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42905: LD_VAR 0 9
42909: PPUSH
42910: CALL_OW 313
42914: PUSH
42915: LD_INT 6
42917: EQUAL
42918: PUSH
42919: LD_VAR 0 9
42923: PPUSH
42924: CALL_OW 266
42928: PUSH
42929: LD_INT 32
42931: PUSH
42932: LD_INT 31
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: IN
42939: OR
42940: IFFALSE 42754
42942: GO 42751
42944: POP
42945: POP
// end else
42946: GO 43328
// for j = 1 to x do
42948: LD_ADDR_VAR 0 9
42952: PUSH
42953: DOUBLE
42954: LD_INT 1
42956: DEC
42957: ST_TO_ADDR
42958: LD_VAR 0 13
42962: PUSH
42963: FOR_TO
42964: IFFALSE 43326
// begin InitHc ;
42966: CALL_OW 19
// if not f then
42970: LD_VAR 0 12
42974: NOT
42975: IFFALSE 43064
// begin PrepareHuman ( false , i , skill ) ;
42977: LD_INT 0
42979: PPUSH
42980: LD_VAR 0 8
42984: PPUSH
42985: LD_VAR 0 4
42989: PPUSH
42990: CALL_OW 380
// un := CreateHuman ;
42994: LD_ADDR_VAR 0 14
42998: PUSH
42999: CALL_OW 44
43003: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43004: LD_ADDR_VAR 0 7
43008: PUSH
43009: LD_VAR 0 7
43013: PPUSH
43014: LD_INT 1
43016: PPUSH
43017: LD_VAR 0 14
43021: PPUSH
43022: CALL_OW 2
43026: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43027: LD_VAR 0 14
43031: PPUSH
43032: LD_VAR 0 1
43036: PPUSH
43037: CALL_OW 250
43041: PPUSH
43042: LD_VAR 0 1
43046: PPUSH
43047: CALL_OW 251
43051: PPUSH
43052: LD_INT 10
43054: PPUSH
43055: LD_INT 0
43057: PPUSH
43058: CALL_OW 50
// continue ;
43062: GO 42963
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43064: LD_VAR 0 12
43068: PUSH
43069: LD_INT 1
43071: ARRAY
43072: PPUSH
43073: CALL_OW 313
43077: PUSH
43078: LD_VAR 0 12
43082: PUSH
43083: LD_INT 1
43085: ARRAY
43086: PPUSH
43087: CALL_OW 266
43091: PUSH
43092: LD_INT 32
43094: PUSH
43095: LD_INT 31
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: IN
43102: AND
43103: PUSH
43104: LD_VAR 0 12
43108: PUSH
43109: LD_INT 1
43111: ARRAY
43112: PPUSH
43113: CALL_OW 313
43117: PUSH
43118: LD_INT 6
43120: EQUAL
43121: OR
43122: IFFALSE 43142
// f := Delete ( f , 1 ) ;
43124: LD_ADDR_VAR 0 12
43128: PUSH
43129: LD_VAR 0 12
43133: PPUSH
43134: LD_INT 1
43136: PPUSH
43137: CALL_OW 3
43141: ST_TO_ADDR
// if not f then
43142: LD_VAR 0 12
43146: NOT
43147: IFFALSE 43165
// begin x := x + 2 ;
43149: LD_ADDR_VAR 0 13
43153: PUSH
43154: LD_VAR 0 13
43158: PUSH
43159: LD_INT 2
43161: PLUS
43162: ST_TO_ADDR
// continue ;
43163: GO 42963
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43165: LD_VAR 0 12
43169: PUSH
43170: LD_INT 1
43172: ARRAY
43173: PPUSH
43174: CALL_OW 266
43178: PUSH
43179: LD_INT 5
43181: EQUAL
43182: IFFALSE 43256
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43184: LD_VAR 0 12
43188: PUSH
43189: LD_INT 1
43191: ARRAY
43192: PPUSH
43193: CALL_OW 313
43197: PUSH
43198: LD_INT 3
43200: LESS
43201: IFFALSE 43237
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43203: LD_INT 0
43205: PPUSH
43206: LD_INT 5
43208: PUSH
43209: LD_INT 8
43211: PUSH
43212: LD_INT 9
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: PUSH
43220: LD_VAR 0 17
43224: ARRAY
43225: PPUSH
43226: LD_VAR 0 4
43230: PPUSH
43231: CALL_OW 380
43235: GO 43254
// PrepareHuman ( false , i , skill ) ;
43237: LD_INT 0
43239: PPUSH
43240: LD_VAR 0 8
43244: PPUSH
43245: LD_VAR 0 4
43249: PPUSH
43250: CALL_OW 380
// end else
43254: GO 43273
// PrepareHuman ( false , i , skill ) ;
43256: LD_INT 0
43258: PPUSH
43259: LD_VAR 0 8
43263: PPUSH
43264: LD_VAR 0 4
43268: PPUSH
43269: CALL_OW 380
// un := CreateHuman ;
43273: LD_ADDR_VAR 0 14
43277: PUSH
43278: CALL_OW 44
43282: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43283: LD_ADDR_VAR 0 7
43287: PUSH
43288: LD_VAR 0 7
43292: PPUSH
43293: LD_INT 1
43295: PPUSH
43296: LD_VAR 0 14
43300: PPUSH
43301: CALL_OW 2
43305: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43306: LD_VAR 0 14
43310: PPUSH
43311: LD_VAR 0 12
43315: PUSH
43316: LD_INT 1
43318: ARRAY
43319: PPUSH
43320: CALL_OW 52
// end ;
43324: GO 42963
43326: POP
43327: POP
// end ;
43328: GO 42265
43330: POP
43331: POP
// result := result ^ buildings ;
43332: LD_ADDR_VAR 0 7
43336: PUSH
43337: LD_VAR 0 7
43341: PUSH
43342: LD_VAR 0 18
43346: ADD
43347: ST_TO_ADDR
// end else
43348: GO 43491
// begin for i = 1 to personel do
43350: LD_ADDR_VAR 0 8
43354: PUSH
43355: DOUBLE
43356: LD_INT 1
43358: DEC
43359: ST_TO_ADDR
43360: LD_VAR 0 6
43364: PUSH
43365: FOR_TO
43366: IFFALSE 43489
// begin if i > 4 then
43368: LD_VAR 0 8
43372: PUSH
43373: LD_INT 4
43375: GREATER
43376: IFFALSE 43380
// break ;
43378: GO 43489
// x := personel [ i ] ;
43380: LD_ADDR_VAR 0 13
43384: PUSH
43385: LD_VAR 0 6
43389: PUSH
43390: LD_VAR 0 8
43394: ARRAY
43395: ST_TO_ADDR
// if x = - 1 then
43396: LD_VAR 0 13
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: EQUAL
43405: IFFALSE 43409
// continue ;
43407: GO 43365
// PrepareHuman ( false , i , skill ) ;
43409: LD_INT 0
43411: PPUSH
43412: LD_VAR 0 8
43416: PPUSH
43417: LD_VAR 0 4
43421: PPUSH
43422: CALL_OW 380
// un := CreateHuman ;
43426: LD_ADDR_VAR 0 14
43430: PUSH
43431: CALL_OW 44
43435: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43436: LD_VAR 0 14
43440: PPUSH
43441: LD_VAR 0 1
43445: PPUSH
43446: CALL_OW 250
43450: PPUSH
43451: LD_VAR 0 1
43455: PPUSH
43456: CALL_OW 251
43460: PPUSH
43461: LD_INT 10
43463: PPUSH
43464: LD_INT 0
43466: PPUSH
43467: CALL_OW 50
// result := result ^ un ;
43471: LD_ADDR_VAR 0 7
43475: PUSH
43476: LD_VAR 0 7
43480: PUSH
43481: LD_VAR 0 14
43485: ADD
43486: ST_TO_ADDR
// end ;
43487: GO 43365
43489: POP
43490: POP
// end ; end ;
43491: LD_VAR 0 7
43495: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43496: LD_INT 0
43498: PPUSH
43499: PPUSH
43500: PPUSH
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
// result := false ;
43514: LD_ADDR_VAR 0 3
43518: PUSH
43519: LD_INT 0
43521: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43522: LD_VAR 0 1
43526: NOT
43527: PUSH
43528: LD_VAR 0 1
43532: PPUSH
43533: CALL_OW 266
43537: PUSH
43538: LD_INT 32
43540: PUSH
43541: LD_INT 33
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: IN
43548: NOT
43549: OR
43550: IFFALSE 43554
// exit ;
43552: GO 44663
// nat := GetNation ( tower ) ;
43554: LD_ADDR_VAR 0 12
43558: PUSH
43559: LD_VAR 0 1
43563: PPUSH
43564: CALL_OW 248
43568: ST_TO_ADDR
// side := GetSide ( tower ) ;
43569: LD_ADDR_VAR 0 16
43573: PUSH
43574: LD_VAR 0 1
43578: PPUSH
43579: CALL_OW 255
43583: ST_TO_ADDR
// x := GetX ( tower ) ;
43584: LD_ADDR_VAR 0 10
43588: PUSH
43589: LD_VAR 0 1
43593: PPUSH
43594: CALL_OW 250
43598: ST_TO_ADDR
// y := GetY ( tower ) ;
43599: LD_ADDR_VAR 0 11
43603: PUSH
43604: LD_VAR 0 1
43608: PPUSH
43609: CALL_OW 251
43613: ST_TO_ADDR
// if not x or not y then
43614: LD_VAR 0 10
43618: NOT
43619: PUSH
43620: LD_VAR 0 11
43624: NOT
43625: OR
43626: IFFALSE 43630
// exit ;
43628: GO 44663
// weapon := 0 ;
43630: LD_ADDR_VAR 0 18
43634: PUSH
43635: LD_INT 0
43637: ST_TO_ADDR
// fac_list := [ ] ;
43638: LD_ADDR_VAR 0 17
43642: PUSH
43643: EMPTY
43644: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43645: LD_ADDR_VAR 0 6
43649: PUSH
43650: LD_VAR 0 1
43654: PPUSH
43655: CALL_OW 274
43659: PPUSH
43660: LD_VAR 0 2
43664: PPUSH
43665: LD_INT 0
43667: PPUSH
43668: CALL 41234 0 3
43672: PPUSH
43673: LD_INT 30
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PPUSH
43683: CALL_OW 72
43687: ST_TO_ADDR
// if not factories then
43688: LD_VAR 0 6
43692: NOT
43693: IFFALSE 43697
// exit ;
43695: GO 44663
// for i in factories do
43697: LD_ADDR_VAR 0 8
43701: PUSH
43702: LD_VAR 0 6
43706: PUSH
43707: FOR_IN
43708: IFFALSE 43733
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43710: LD_ADDR_VAR 0 17
43714: PUSH
43715: LD_VAR 0 17
43719: PUSH
43720: LD_VAR 0 8
43724: PPUSH
43725: CALL_OW 478
43729: UNION
43730: ST_TO_ADDR
43731: GO 43707
43733: POP
43734: POP
// if not fac_list then
43735: LD_VAR 0 17
43739: NOT
43740: IFFALSE 43744
// exit ;
43742: GO 44663
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43744: LD_ADDR_VAR 0 5
43748: PUSH
43749: LD_INT 4
43751: PUSH
43752: LD_INT 5
43754: PUSH
43755: LD_INT 9
43757: PUSH
43758: LD_INT 10
43760: PUSH
43761: LD_INT 6
43763: PUSH
43764: LD_INT 7
43766: PUSH
43767: LD_INT 11
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 27
43781: PUSH
43782: LD_INT 28
43784: PUSH
43785: LD_INT 26
43787: PUSH
43788: LD_INT 30
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 43
43799: PUSH
43800: LD_INT 44
43802: PUSH
43803: LD_INT 46
43805: PUSH
43806: LD_INT 45
43808: PUSH
43809: LD_INT 47
43811: PUSH
43812: LD_INT 49
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: PUSH
43828: LD_VAR 0 12
43832: ARRAY
43833: ST_TO_ADDR
// list := list isect fac_list ;
43834: LD_ADDR_VAR 0 5
43838: PUSH
43839: LD_VAR 0 5
43843: PUSH
43844: LD_VAR 0 17
43848: ISECT
43849: ST_TO_ADDR
// if not list then
43850: LD_VAR 0 5
43854: NOT
43855: IFFALSE 43859
// exit ;
43857: GO 44663
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43859: LD_VAR 0 12
43863: PUSH
43864: LD_INT 3
43866: EQUAL
43867: PUSH
43868: LD_INT 49
43870: PUSH
43871: LD_VAR 0 5
43875: IN
43876: AND
43877: PUSH
43878: LD_INT 31
43880: PPUSH
43881: LD_VAR 0 16
43885: PPUSH
43886: CALL_OW 321
43890: PUSH
43891: LD_INT 2
43893: EQUAL
43894: AND
43895: IFFALSE 43955
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43897: LD_INT 22
43899: PUSH
43900: LD_VAR 0 16
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 35
43911: PUSH
43912: LD_INT 49
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 91
43921: PUSH
43922: LD_VAR 0 1
43926: PUSH
43927: LD_INT 10
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: LIST
43939: PPUSH
43940: CALL_OW 69
43944: NOT
43945: IFFALSE 43955
// weapon := ru_time_lapser ;
43947: LD_ADDR_VAR 0 18
43951: PUSH
43952: LD_INT 49
43954: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43955: LD_VAR 0 12
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: IN
43970: PUSH
43971: LD_INT 11
43973: PUSH
43974: LD_VAR 0 5
43978: IN
43979: PUSH
43980: LD_INT 30
43982: PUSH
43983: LD_VAR 0 5
43987: IN
43988: OR
43989: AND
43990: PUSH
43991: LD_INT 6
43993: PPUSH
43994: LD_VAR 0 16
43998: PPUSH
43999: CALL_OW 321
44003: PUSH
44004: LD_INT 2
44006: EQUAL
44007: AND
44008: IFFALSE 44173
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44010: LD_INT 22
44012: PUSH
44013: LD_VAR 0 16
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: LD_INT 35
44027: PUSH
44028: LD_INT 11
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 35
44037: PUSH
44038: LD_INT 30
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 91
44052: PUSH
44053: LD_VAR 0 1
44057: PUSH
44058: LD_INT 18
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: PPUSH
44071: CALL_OW 69
44075: NOT
44076: PUSH
44077: LD_INT 22
44079: PUSH
44080: LD_VAR 0 16
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: LD_INT 30
44094: PUSH
44095: LD_INT 32
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 30
44104: PUSH
44105: LD_INT 33
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 91
44119: PUSH
44120: LD_VAR 0 1
44124: PUSH
44125: LD_INT 12
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: PUSH
44138: EMPTY
44139: LIST
44140: PPUSH
44141: CALL_OW 69
44145: PUSH
44146: LD_INT 2
44148: GREATER
44149: AND
44150: IFFALSE 44173
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44152: LD_ADDR_VAR 0 18
44156: PUSH
44157: LD_INT 11
44159: PUSH
44160: LD_INT 30
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_VAR 0 12
44171: ARRAY
44172: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44173: LD_VAR 0 18
44177: NOT
44178: PUSH
44179: LD_INT 40
44181: PPUSH
44182: LD_VAR 0 16
44186: PPUSH
44187: CALL_OW 321
44191: PUSH
44192: LD_INT 2
44194: EQUAL
44195: AND
44196: PUSH
44197: LD_INT 7
44199: PUSH
44200: LD_VAR 0 5
44204: IN
44205: PUSH
44206: LD_INT 28
44208: PUSH
44209: LD_VAR 0 5
44213: IN
44214: OR
44215: PUSH
44216: LD_INT 45
44218: PUSH
44219: LD_VAR 0 5
44223: IN
44224: OR
44225: AND
44226: IFFALSE 44480
// begin hex := GetHexInfo ( x , y ) ;
44228: LD_ADDR_VAR 0 4
44232: PUSH
44233: LD_VAR 0 10
44237: PPUSH
44238: LD_VAR 0 11
44242: PPUSH
44243: CALL_OW 546
44247: ST_TO_ADDR
// if hex [ 1 ] then
44248: LD_VAR 0 4
44252: PUSH
44253: LD_INT 1
44255: ARRAY
44256: IFFALSE 44260
// exit ;
44258: GO 44663
// height := hex [ 2 ] ;
44260: LD_ADDR_VAR 0 15
44264: PUSH
44265: LD_VAR 0 4
44269: PUSH
44270: LD_INT 2
44272: ARRAY
44273: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44274: LD_ADDR_VAR 0 14
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: LD_INT 3
44287: PUSH
44288: LD_INT 5
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: ST_TO_ADDR
// for i in tmp do
44297: LD_ADDR_VAR 0 8
44301: PUSH
44302: LD_VAR 0 14
44306: PUSH
44307: FOR_IN
44308: IFFALSE 44478
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44310: LD_ADDR_VAR 0 9
44314: PUSH
44315: LD_VAR 0 10
44319: PPUSH
44320: LD_VAR 0 8
44324: PPUSH
44325: LD_INT 5
44327: PPUSH
44328: CALL_OW 272
44332: PUSH
44333: LD_VAR 0 11
44337: PPUSH
44338: LD_VAR 0 8
44342: PPUSH
44343: LD_INT 5
44345: PPUSH
44346: CALL_OW 273
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44355: LD_VAR 0 9
44359: PUSH
44360: LD_INT 1
44362: ARRAY
44363: PPUSH
44364: LD_VAR 0 9
44368: PUSH
44369: LD_INT 2
44371: ARRAY
44372: PPUSH
44373: CALL_OW 488
44377: IFFALSE 44476
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44379: LD_ADDR_VAR 0 4
44383: PUSH
44384: LD_VAR 0 9
44388: PUSH
44389: LD_INT 1
44391: ARRAY
44392: PPUSH
44393: LD_VAR 0 9
44397: PUSH
44398: LD_INT 2
44400: ARRAY
44401: PPUSH
44402: CALL_OW 546
44406: ST_TO_ADDR
// if hex [ 1 ] then
44407: LD_VAR 0 4
44411: PUSH
44412: LD_INT 1
44414: ARRAY
44415: IFFALSE 44419
// continue ;
44417: GO 44307
// h := hex [ 2 ] ;
44419: LD_ADDR_VAR 0 13
44423: PUSH
44424: LD_VAR 0 4
44428: PUSH
44429: LD_INT 2
44431: ARRAY
44432: ST_TO_ADDR
// if h + 7 < height then
44433: LD_VAR 0 13
44437: PUSH
44438: LD_INT 7
44440: PLUS
44441: PUSH
44442: LD_VAR 0 15
44446: LESS
44447: IFFALSE 44476
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44449: LD_ADDR_VAR 0 18
44453: PUSH
44454: LD_INT 7
44456: PUSH
44457: LD_INT 28
44459: PUSH
44460: LD_INT 45
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: PUSH
44468: LD_VAR 0 12
44472: ARRAY
44473: ST_TO_ADDR
// break ;
44474: GO 44478
// end ; end ; end ;
44476: GO 44307
44478: POP
44479: POP
// end ; if not weapon then
44480: LD_VAR 0 18
44484: NOT
44485: IFFALSE 44545
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44487: LD_ADDR_VAR 0 5
44491: PUSH
44492: LD_VAR 0 5
44496: PUSH
44497: LD_INT 11
44499: PUSH
44500: LD_INT 30
44502: PUSH
44503: LD_INT 49
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: LIST
44510: DIFF
44511: ST_TO_ADDR
// if not list then
44512: LD_VAR 0 5
44516: NOT
44517: IFFALSE 44521
// exit ;
44519: GO 44663
// weapon := list [ rand ( 1 , list ) ] ;
44521: LD_ADDR_VAR 0 18
44525: PUSH
44526: LD_VAR 0 5
44530: PUSH
44531: LD_INT 1
44533: PPUSH
44534: LD_VAR 0 5
44538: PPUSH
44539: CALL_OW 12
44543: ARRAY
44544: ST_TO_ADDR
// end ; if weapon then
44545: LD_VAR 0 18
44549: IFFALSE 44663
// begin tmp := CostOfWeapon ( weapon ) ;
44551: LD_ADDR_VAR 0 14
44555: PUSH
44556: LD_VAR 0 18
44560: PPUSH
44561: CALL_OW 451
44565: ST_TO_ADDR
// j := GetBase ( tower ) ;
44566: LD_ADDR_VAR 0 9
44570: PUSH
44571: LD_VAR 0 1
44575: PPUSH
44576: CALL_OW 274
44580: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44581: LD_VAR 0 9
44585: PPUSH
44586: LD_INT 1
44588: PPUSH
44589: CALL_OW 275
44593: PUSH
44594: LD_VAR 0 14
44598: PUSH
44599: LD_INT 1
44601: ARRAY
44602: GREATEREQUAL
44603: PUSH
44604: LD_VAR 0 9
44608: PPUSH
44609: LD_INT 2
44611: PPUSH
44612: CALL_OW 275
44616: PUSH
44617: LD_VAR 0 14
44621: PUSH
44622: LD_INT 2
44624: ARRAY
44625: GREATEREQUAL
44626: AND
44627: PUSH
44628: LD_VAR 0 9
44632: PPUSH
44633: LD_INT 3
44635: PPUSH
44636: CALL_OW 275
44640: PUSH
44641: LD_VAR 0 14
44645: PUSH
44646: LD_INT 3
44648: ARRAY
44649: GREATEREQUAL
44650: AND
44651: IFFALSE 44663
// result := weapon ;
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: LD_VAR 0 18
44662: ST_TO_ADDR
// end ; end ;
44663: LD_VAR 0 3
44667: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44668: LD_INT 0
44670: PPUSH
44671: PPUSH
// result := true ;
44672: LD_ADDR_VAR 0 3
44676: PUSH
44677: LD_INT 1
44679: ST_TO_ADDR
// if array1 = array2 then
44680: LD_VAR 0 1
44684: PUSH
44685: LD_VAR 0 2
44689: EQUAL
44690: IFFALSE 44750
// begin for i = 1 to array1 do
44692: LD_ADDR_VAR 0 4
44696: PUSH
44697: DOUBLE
44698: LD_INT 1
44700: DEC
44701: ST_TO_ADDR
44702: LD_VAR 0 1
44706: PUSH
44707: FOR_TO
44708: IFFALSE 44746
// if array1 [ i ] <> array2 [ i ] then
44710: LD_VAR 0 1
44714: PUSH
44715: LD_VAR 0 4
44719: ARRAY
44720: PUSH
44721: LD_VAR 0 2
44725: PUSH
44726: LD_VAR 0 4
44730: ARRAY
44731: NONEQUAL
44732: IFFALSE 44744
// begin result := false ;
44734: LD_ADDR_VAR 0 3
44738: PUSH
44739: LD_INT 0
44741: ST_TO_ADDR
// break ;
44742: GO 44746
// end ;
44744: GO 44707
44746: POP
44747: POP
// end else
44748: GO 44758
// result := false ;
44750: LD_ADDR_VAR 0 3
44754: PUSH
44755: LD_INT 0
44757: ST_TO_ADDR
// end ;
44758: LD_VAR 0 3
44762: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44763: LD_INT 0
44765: PPUSH
44766: PPUSH
// if not array1 or not array2 then
44767: LD_VAR 0 1
44771: NOT
44772: PUSH
44773: LD_VAR 0 2
44777: NOT
44778: OR
44779: IFFALSE 44783
// exit ;
44781: GO 44847
// result := true ;
44783: LD_ADDR_VAR 0 3
44787: PUSH
44788: LD_INT 1
44790: ST_TO_ADDR
// for i = 1 to array1 do
44791: LD_ADDR_VAR 0 4
44795: PUSH
44796: DOUBLE
44797: LD_INT 1
44799: DEC
44800: ST_TO_ADDR
44801: LD_VAR 0 1
44805: PUSH
44806: FOR_TO
44807: IFFALSE 44845
// if array1 [ i ] <> array2 [ i ] then
44809: LD_VAR 0 1
44813: PUSH
44814: LD_VAR 0 4
44818: ARRAY
44819: PUSH
44820: LD_VAR 0 2
44824: PUSH
44825: LD_VAR 0 4
44829: ARRAY
44830: NONEQUAL
44831: IFFALSE 44843
// begin result := false ;
44833: LD_ADDR_VAR 0 3
44837: PUSH
44838: LD_INT 0
44840: ST_TO_ADDR
// break ;
44841: GO 44845
// end ;
44843: GO 44806
44845: POP
44846: POP
// end ;
44847: LD_VAR 0 3
44851: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44852: LD_INT 0
44854: PPUSH
44855: PPUSH
44856: PPUSH
// pom := GetBase ( fac ) ;
44857: LD_ADDR_VAR 0 5
44861: PUSH
44862: LD_VAR 0 1
44866: PPUSH
44867: CALL_OW 274
44871: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44872: LD_ADDR_VAR 0 4
44876: PUSH
44877: LD_VAR 0 2
44881: PUSH
44882: LD_INT 1
44884: ARRAY
44885: PPUSH
44886: LD_VAR 0 2
44890: PUSH
44891: LD_INT 2
44893: ARRAY
44894: PPUSH
44895: LD_VAR 0 2
44899: PUSH
44900: LD_INT 3
44902: ARRAY
44903: PPUSH
44904: LD_VAR 0 2
44908: PUSH
44909: LD_INT 4
44911: ARRAY
44912: PPUSH
44913: CALL_OW 449
44917: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44918: LD_ADDR_VAR 0 3
44922: PUSH
44923: LD_VAR 0 5
44927: PPUSH
44928: LD_INT 1
44930: PPUSH
44931: CALL_OW 275
44935: PUSH
44936: LD_VAR 0 4
44940: PUSH
44941: LD_INT 1
44943: ARRAY
44944: GREATEREQUAL
44945: PUSH
44946: LD_VAR 0 5
44950: PPUSH
44951: LD_INT 2
44953: PPUSH
44954: CALL_OW 275
44958: PUSH
44959: LD_VAR 0 4
44963: PUSH
44964: LD_INT 2
44966: ARRAY
44967: GREATEREQUAL
44968: AND
44969: PUSH
44970: LD_VAR 0 5
44974: PPUSH
44975: LD_INT 3
44977: PPUSH
44978: CALL_OW 275
44982: PUSH
44983: LD_VAR 0 4
44987: PUSH
44988: LD_INT 3
44990: ARRAY
44991: GREATEREQUAL
44992: AND
44993: ST_TO_ADDR
// end ;
44994: LD_VAR 0 3
44998: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44999: LD_INT 0
45001: PPUSH
45002: PPUSH
45003: PPUSH
45004: PPUSH
// pom := GetBase ( building ) ;
45005: LD_ADDR_VAR 0 3
45009: PUSH
45010: LD_VAR 0 1
45014: PPUSH
45015: CALL_OW 274
45019: ST_TO_ADDR
// if not pom then
45020: LD_VAR 0 3
45024: NOT
45025: IFFALSE 45029
// exit ;
45027: GO 45199
// btype := GetBType ( building ) ;
45029: LD_ADDR_VAR 0 5
45033: PUSH
45034: LD_VAR 0 1
45038: PPUSH
45039: CALL_OW 266
45043: ST_TO_ADDR
// if btype = b_armoury then
45044: LD_VAR 0 5
45048: PUSH
45049: LD_INT 4
45051: EQUAL
45052: IFFALSE 45062
// btype := b_barracks ;
45054: LD_ADDR_VAR 0 5
45058: PUSH
45059: LD_INT 5
45061: ST_TO_ADDR
// if btype = b_depot then
45062: LD_VAR 0 5
45066: PUSH
45067: LD_INT 0
45069: EQUAL
45070: IFFALSE 45080
// btype := b_warehouse ;
45072: LD_ADDR_VAR 0 5
45076: PUSH
45077: LD_INT 1
45079: ST_TO_ADDR
// if btype = b_workshop then
45080: LD_VAR 0 5
45084: PUSH
45085: LD_INT 2
45087: EQUAL
45088: IFFALSE 45098
// btype := b_factory ;
45090: LD_ADDR_VAR 0 5
45094: PUSH
45095: LD_INT 3
45097: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45098: LD_ADDR_VAR 0 4
45102: PUSH
45103: LD_VAR 0 5
45107: PPUSH
45108: LD_VAR 0 1
45112: PPUSH
45113: CALL_OW 248
45117: PPUSH
45118: CALL_OW 450
45122: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45123: LD_ADDR_VAR 0 2
45127: PUSH
45128: LD_VAR 0 3
45132: PPUSH
45133: LD_INT 1
45135: PPUSH
45136: CALL_OW 275
45140: PUSH
45141: LD_VAR 0 4
45145: PUSH
45146: LD_INT 1
45148: ARRAY
45149: GREATEREQUAL
45150: PUSH
45151: LD_VAR 0 3
45155: PPUSH
45156: LD_INT 2
45158: PPUSH
45159: CALL_OW 275
45163: PUSH
45164: LD_VAR 0 4
45168: PUSH
45169: LD_INT 2
45171: ARRAY
45172: GREATEREQUAL
45173: AND
45174: PUSH
45175: LD_VAR 0 3
45179: PPUSH
45180: LD_INT 3
45182: PPUSH
45183: CALL_OW 275
45187: PUSH
45188: LD_VAR 0 4
45192: PUSH
45193: LD_INT 3
45195: ARRAY
45196: GREATEREQUAL
45197: AND
45198: ST_TO_ADDR
// end ;
45199: LD_VAR 0 2
45203: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45204: LD_INT 0
45206: PPUSH
45207: PPUSH
45208: PPUSH
// pom := GetBase ( building ) ;
45209: LD_ADDR_VAR 0 4
45213: PUSH
45214: LD_VAR 0 1
45218: PPUSH
45219: CALL_OW 274
45223: ST_TO_ADDR
// if not pom then
45224: LD_VAR 0 4
45228: NOT
45229: IFFALSE 45233
// exit ;
45231: GO 45334
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45233: LD_ADDR_VAR 0 5
45237: PUSH
45238: LD_VAR 0 2
45242: PPUSH
45243: LD_VAR 0 1
45247: PPUSH
45248: CALL_OW 248
45252: PPUSH
45253: CALL_OW 450
45257: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45258: LD_ADDR_VAR 0 3
45262: PUSH
45263: LD_VAR 0 4
45267: PPUSH
45268: LD_INT 1
45270: PPUSH
45271: CALL_OW 275
45275: PUSH
45276: LD_VAR 0 5
45280: PUSH
45281: LD_INT 1
45283: ARRAY
45284: GREATEREQUAL
45285: PUSH
45286: LD_VAR 0 4
45290: PPUSH
45291: LD_INT 2
45293: PPUSH
45294: CALL_OW 275
45298: PUSH
45299: LD_VAR 0 5
45303: PUSH
45304: LD_INT 2
45306: ARRAY
45307: GREATEREQUAL
45308: AND
45309: PUSH
45310: LD_VAR 0 4
45314: PPUSH
45315: LD_INT 3
45317: PPUSH
45318: CALL_OW 275
45322: PUSH
45323: LD_VAR 0 5
45327: PUSH
45328: LD_INT 3
45330: ARRAY
45331: GREATEREQUAL
45332: AND
45333: ST_TO_ADDR
// end ;
45334: LD_VAR 0 3
45338: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45339: LD_INT 0
45341: PPUSH
45342: PPUSH
45343: PPUSH
45344: PPUSH
45345: PPUSH
45346: PPUSH
45347: PPUSH
45348: PPUSH
45349: PPUSH
45350: PPUSH
45351: PPUSH
// result := false ;
45352: LD_ADDR_VAR 0 8
45356: PUSH
45357: LD_INT 0
45359: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45360: LD_VAR 0 5
45364: NOT
45365: PUSH
45366: LD_VAR 0 1
45370: NOT
45371: OR
45372: PUSH
45373: LD_VAR 0 2
45377: NOT
45378: OR
45379: PUSH
45380: LD_VAR 0 3
45384: NOT
45385: OR
45386: IFFALSE 45390
// exit ;
45388: GO 46204
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45390: LD_ADDR_VAR 0 14
45394: PUSH
45395: LD_VAR 0 1
45399: PPUSH
45400: LD_VAR 0 2
45404: PPUSH
45405: LD_VAR 0 3
45409: PPUSH
45410: LD_VAR 0 4
45414: PPUSH
45415: LD_VAR 0 5
45419: PUSH
45420: LD_INT 1
45422: ARRAY
45423: PPUSH
45424: CALL_OW 248
45428: PPUSH
45429: LD_INT 0
45431: PPUSH
45432: CALL 47441 0 6
45436: ST_TO_ADDR
// if not hexes then
45437: LD_VAR 0 14
45441: NOT
45442: IFFALSE 45446
// exit ;
45444: GO 46204
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45446: LD_ADDR_VAR 0 17
45450: PUSH
45451: LD_VAR 0 5
45455: PPUSH
45456: LD_INT 22
45458: PUSH
45459: LD_VAR 0 13
45463: PPUSH
45464: CALL_OW 255
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 30
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 30
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PPUSH
45505: CALL_OW 72
45509: ST_TO_ADDR
// for i = 1 to hexes do
45510: LD_ADDR_VAR 0 9
45514: PUSH
45515: DOUBLE
45516: LD_INT 1
45518: DEC
45519: ST_TO_ADDR
45520: LD_VAR 0 14
45524: PUSH
45525: FOR_TO
45526: IFFALSE 46202
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45528: LD_ADDR_VAR 0 13
45532: PUSH
45533: LD_VAR 0 14
45537: PUSH
45538: LD_VAR 0 9
45542: ARRAY
45543: PUSH
45544: LD_INT 1
45546: ARRAY
45547: PPUSH
45548: LD_VAR 0 14
45552: PUSH
45553: LD_VAR 0 9
45557: ARRAY
45558: PUSH
45559: LD_INT 2
45561: ARRAY
45562: PPUSH
45563: CALL_OW 428
45567: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45568: LD_VAR 0 14
45572: PUSH
45573: LD_VAR 0 9
45577: ARRAY
45578: PUSH
45579: LD_INT 1
45581: ARRAY
45582: PPUSH
45583: LD_VAR 0 14
45587: PUSH
45588: LD_VAR 0 9
45592: ARRAY
45593: PUSH
45594: LD_INT 2
45596: ARRAY
45597: PPUSH
45598: CALL_OW 351
45602: PUSH
45603: LD_VAR 0 14
45607: PUSH
45608: LD_VAR 0 9
45612: ARRAY
45613: PUSH
45614: LD_INT 1
45616: ARRAY
45617: PPUSH
45618: LD_VAR 0 14
45622: PUSH
45623: LD_VAR 0 9
45627: ARRAY
45628: PUSH
45629: LD_INT 2
45631: ARRAY
45632: PPUSH
45633: CALL_OW 488
45637: NOT
45638: OR
45639: PUSH
45640: LD_VAR 0 13
45644: PPUSH
45645: CALL_OW 247
45649: PUSH
45650: LD_INT 3
45652: EQUAL
45653: OR
45654: IFFALSE 45660
// exit ;
45656: POP
45657: POP
45658: GO 46204
// if not tmp then
45660: LD_VAR 0 13
45664: NOT
45665: IFFALSE 45669
// continue ;
45667: GO 45525
// result := true ;
45669: LD_ADDR_VAR 0 8
45673: PUSH
45674: LD_INT 1
45676: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45677: LD_VAR 0 6
45681: PUSH
45682: LD_VAR 0 13
45686: PPUSH
45687: CALL_OW 247
45691: PUSH
45692: LD_INT 2
45694: EQUAL
45695: AND
45696: PUSH
45697: LD_VAR 0 13
45701: PPUSH
45702: CALL_OW 263
45706: PUSH
45707: LD_INT 1
45709: EQUAL
45710: AND
45711: IFFALSE 45875
// begin if IsDrivenBy ( tmp ) then
45713: LD_VAR 0 13
45717: PPUSH
45718: CALL_OW 311
45722: IFFALSE 45726
// continue ;
45724: GO 45525
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45726: LD_VAR 0 6
45730: PPUSH
45731: LD_INT 3
45733: PUSH
45734: LD_INT 60
45736: PUSH
45737: EMPTY
45738: LIST
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: LD_INT 55
45749: PUSH
45750: EMPTY
45751: LIST
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PPUSH
45761: CALL_OW 72
45765: IFFALSE 45873
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45767: LD_ADDR_VAR 0 18
45771: PUSH
45772: LD_VAR 0 6
45776: PPUSH
45777: LD_INT 3
45779: PUSH
45780: LD_INT 60
45782: PUSH
45783: EMPTY
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 3
45792: PUSH
45793: LD_INT 55
45795: PUSH
45796: EMPTY
45797: LIST
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PPUSH
45807: CALL_OW 72
45811: PUSH
45812: LD_INT 1
45814: ARRAY
45815: ST_TO_ADDR
// if IsInUnit ( driver ) then
45816: LD_VAR 0 18
45820: PPUSH
45821: CALL_OW 310
45825: IFFALSE 45836
// ComExit ( driver ) ;
45827: LD_VAR 0 18
45831: PPUSH
45832: CALL 70569 0 1
// AddComEnterUnit ( driver , tmp ) ;
45836: LD_VAR 0 18
45840: PPUSH
45841: LD_VAR 0 13
45845: PPUSH
45846: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45850: LD_VAR 0 18
45854: PPUSH
45855: LD_VAR 0 7
45859: PPUSH
45860: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45864: LD_VAR 0 18
45868: PPUSH
45869: CALL_OW 181
// end ; continue ;
45873: GO 45525
// end ; if not cleaners or not tmp in cleaners then
45875: LD_VAR 0 6
45879: NOT
45880: PUSH
45881: LD_VAR 0 13
45885: PUSH
45886: LD_VAR 0 6
45890: IN
45891: NOT
45892: OR
45893: IFFALSE 46200
// begin if dep then
45895: LD_VAR 0 17
45899: IFFALSE 46035
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45901: LD_ADDR_VAR 0 16
45905: PUSH
45906: LD_VAR 0 17
45910: PUSH
45911: LD_INT 1
45913: ARRAY
45914: PPUSH
45915: CALL_OW 250
45919: PPUSH
45920: LD_VAR 0 17
45924: PUSH
45925: LD_INT 1
45927: ARRAY
45928: PPUSH
45929: CALL_OW 254
45933: PPUSH
45934: LD_INT 5
45936: PPUSH
45937: CALL_OW 272
45941: PUSH
45942: LD_VAR 0 17
45946: PUSH
45947: LD_INT 1
45949: ARRAY
45950: PPUSH
45951: CALL_OW 251
45955: PPUSH
45956: LD_VAR 0 17
45960: PUSH
45961: LD_INT 1
45963: ARRAY
45964: PPUSH
45965: CALL_OW 254
45969: PPUSH
45970: LD_INT 5
45972: PPUSH
45973: CALL_OW 273
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45982: LD_VAR 0 16
45986: PUSH
45987: LD_INT 1
45989: ARRAY
45990: PPUSH
45991: LD_VAR 0 16
45995: PUSH
45996: LD_INT 2
45998: ARRAY
45999: PPUSH
46000: CALL_OW 488
46004: IFFALSE 46035
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46006: LD_VAR 0 13
46010: PPUSH
46011: LD_VAR 0 16
46015: PUSH
46016: LD_INT 1
46018: ARRAY
46019: PPUSH
46020: LD_VAR 0 16
46024: PUSH
46025: LD_INT 2
46027: ARRAY
46028: PPUSH
46029: CALL_OW 111
// continue ;
46033: GO 45525
// end ; end ; r := GetDir ( tmp ) ;
46035: LD_ADDR_VAR 0 15
46039: PUSH
46040: LD_VAR 0 13
46044: PPUSH
46045: CALL_OW 254
46049: ST_TO_ADDR
// if r = 5 then
46050: LD_VAR 0 15
46054: PUSH
46055: LD_INT 5
46057: EQUAL
46058: IFFALSE 46068
// r := 0 ;
46060: LD_ADDR_VAR 0 15
46064: PUSH
46065: LD_INT 0
46067: ST_TO_ADDR
// for j = r to 5 do
46068: LD_ADDR_VAR 0 10
46072: PUSH
46073: DOUBLE
46074: LD_VAR 0 15
46078: DEC
46079: ST_TO_ADDR
46080: LD_INT 5
46082: PUSH
46083: FOR_TO
46084: IFFALSE 46198
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46086: LD_ADDR_VAR 0 11
46090: PUSH
46091: LD_VAR 0 13
46095: PPUSH
46096: CALL_OW 250
46100: PPUSH
46101: LD_VAR 0 10
46105: PPUSH
46106: LD_INT 2
46108: PPUSH
46109: CALL_OW 272
46113: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46114: LD_ADDR_VAR 0 12
46118: PUSH
46119: LD_VAR 0 13
46123: PPUSH
46124: CALL_OW 251
46128: PPUSH
46129: LD_VAR 0 10
46133: PPUSH
46134: LD_INT 2
46136: PPUSH
46137: CALL_OW 273
46141: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46142: LD_VAR 0 11
46146: PPUSH
46147: LD_VAR 0 12
46151: PPUSH
46152: CALL_OW 488
46156: PUSH
46157: LD_VAR 0 11
46161: PPUSH
46162: LD_VAR 0 12
46166: PPUSH
46167: CALL_OW 428
46171: NOT
46172: AND
46173: IFFALSE 46196
// begin ComMoveXY ( tmp , _x , _y ) ;
46175: LD_VAR 0 13
46179: PPUSH
46180: LD_VAR 0 11
46184: PPUSH
46185: LD_VAR 0 12
46189: PPUSH
46190: CALL_OW 111
// break ;
46194: GO 46198
// end ; end ;
46196: GO 46083
46198: POP
46199: POP
// end ; end ;
46200: GO 45525
46202: POP
46203: POP
// end ;
46204: LD_VAR 0 8
46208: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46209: LD_INT 0
46211: PPUSH
// result := true ;
46212: LD_ADDR_VAR 0 3
46216: PUSH
46217: LD_INT 1
46219: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46220: LD_VAR 0 2
46224: PUSH
46225: LD_INT 24
46227: DOUBLE
46228: EQUAL
46229: IFTRUE 46239
46231: LD_INT 33
46233: DOUBLE
46234: EQUAL
46235: IFTRUE 46239
46237: GO 46264
46239: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46240: LD_ADDR_VAR 0 3
46244: PUSH
46245: LD_INT 32
46247: PPUSH
46248: LD_VAR 0 1
46252: PPUSH
46253: CALL_OW 321
46257: PUSH
46258: LD_INT 2
46260: EQUAL
46261: ST_TO_ADDR
46262: GO 46584
46264: LD_INT 20
46266: DOUBLE
46267: EQUAL
46268: IFTRUE 46272
46270: GO 46297
46272: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46273: LD_ADDR_VAR 0 3
46277: PUSH
46278: LD_INT 6
46280: PPUSH
46281: LD_VAR 0 1
46285: PPUSH
46286: CALL_OW 321
46290: PUSH
46291: LD_INT 2
46293: EQUAL
46294: ST_TO_ADDR
46295: GO 46584
46297: LD_INT 22
46299: DOUBLE
46300: EQUAL
46301: IFTRUE 46311
46303: LD_INT 36
46305: DOUBLE
46306: EQUAL
46307: IFTRUE 46311
46309: GO 46336
46311: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46312: LD_ADDR_VAR 0 3
46316: PUSH
46317: LD_INT 15
46319: PPUSH
46320: LD_VAR 0 1
46324: PPUSH
46325: CALL_OW 321
46329: PUSH
46330: LD_INT 2
46332: EQUAL
46333: ST_TO_ADDR
46334: GO 46584
46336: LD_INT 30
46338: DOUBLE
46339: EQUAL
46340: IFTRUE 46344
46342: GO 46369
46344: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46345: LD_ADDR_VAR 0 3
46349: PUSH
46350: LD_INT 20
46352: PPUSH
46353: LD_VAR 0 1
46357: PPUSH
46358: CALL_OW 321
46362: PUSH
46363: LD_INT 2
46365: EQUAL
46366: ST_TO_ADDR
46367: GO 46584
46369: LD_INT 28
46371: DOUBLE
46372: EQUAL
46373: IFTRUE 46383
46375: LD_INT 21
46377: DOUBLE
46378: EQUAL
46379: IFTRUE 46383
46381: GO 46408
46383: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46384: LD_ADDR_VAR 0 3
46388: PUSH
46389: LD_INT 21
46391: PPUSH
46392: LD_VAR 0 1
46396: PPUSH
46397: CALL_OW 321
46401: PUSH
46402: LD_INT 2
46404: EQUAL
46405: ST_TO_ADDR
46406: GO 46584
46408: LD_INT 16
46410: DOUBLE
46411: EQUAL
46412: IFTRUE 46416
46414: GO 46443
46416: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46417: LD_ADDR_VAR 0 3
46421: PUSH
46422: LD_EXP 57
46426: PPUSH
46427: LD_VAR 0 1
46431: PPUSH
46432: CALL_OW 321
46436: PUSH
46437: LD_INT 2
46439: EQUAL
46440: ST_TO_ADDR
46441: GO 46584
46443: LD_INT 19
46445: DOUBLE
46446: EQUAL
46447: IFTRUE 46457
46449: LD_INT 23
46451: DOUBLE
46452: EQUAL
46453: IFTRUE 46457
46455: GO 46484
46457: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46458: LD_ADDR_VAR 0 3
46462: PUSH
46463: LD_EXP 56
46467: PPUSH
46468: LD_VAR 0 1
46472: PPUSH
46473: CALL_OW 321
46477: PUSH
46478: LD_INT 2
46480: EQUAL
46481: ST_TO_ADDR
46482: GO 46584
46484: LD_INT 17
46486: DOUBLE
46487: EQUAL
46488: IFTRUE 46492
46490: GO 46517
46492: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46493: LD_ADDR_VAR 0 3
46497: PUSH
46498: LD_INT 39
46500: PPUSH
46501: LD_VAR 0 1
46505: PPUSH
46506: CALL_OW 321
46510: PUSH
46511: LD_INT 2
46513: EQUAL
46514: ST_TO_ADDR
46515: GO 46584
46517: LD_INT 18
46519: DOUBLE
46520: EQUAL
46521: IFTRUE 46525
46523: GO 46550
46525: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46526: LD_ADDR_VAR 0 3
46530: PUSH
46531: LD_INT 40
46533: PPUSH
46534: LD_VAR 0 1
46538: PPUSH
46539: CALL_OW 321
46543: PUSH
46544: LD_INT 2
46546: EQUAL
46547: ST_TO_ADDR
46548: GO 46584
46550: LD_INT 27
46552: DOUBLE
46553: EQUAL
46554: IFTRUE 46558
46556: GO 46583
46558: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46559: LD_ADDR_VAR 0 3
46563: PUSH
46564: LD_INT 35
46566: PPUSH
46567: LD_VAR 0 1
46571: PPUSH
46572: CALL_OW 321
46576: PUSH
46577: LD_INT 2
46579: EQUAL
46580: ST_TO_ADDR
46581: GO 46584
46583: POP
// end ;
46584: LD_VAR 0 3
46588: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46589: LD_INT 0
46591: PPUSH
46592: PPUSH
46593: PPUSH
46594: PPUSH
46595: PPUSH
46596: PPUSH
46597: PPUSH
46598: PPUSH
46599: PPUSH
46600: PPUSH
46601: PPUSH
// result := false ;
46602: LD_ADDR_VAR 0 6
46606: PUSH
46607: LD_INT 0
46609: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46610: LD_VAR 0 1
46614: NOT
46615: PUSH
46616: LD_VAR 0 1
46620: PPUSH
46621: CALL_OW 266
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: IN
46636: NOT
46637: OR
46638: PUSH
46639: LD_VAR 0 2
46643: NOT
46644: OR
46645: PUSH
46646: LD_VAR 0 5
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: LD_INT 4
46665: PUSH
46666: LD_INT 5
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: IN
46677: NOT
46678: OR
46679: PUSH
46680: LD_VAR 0 3
46684: PPUSH
46685: LD_VAR 0 4
46689: PPUSH
46690: CALL_OW 488
46694: NOT
46695: OR
46696: IFFALSE 46700
// exit ;
46698: GO 47436
// side := GetSide ( depot ) ;
46700: LD_ADDR_VAR 0 9
46704: PUSH
46705: LD_VAR 0 1
46709: PPUSH
46710: CALL_OW 255
46714: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46715: LD_VAR 0 9
46719: PPUSH
46720: LD_VAR 0 2
46724: PPUSH
46725: CALL 46209 0 2
46729: NOT
46730: IFFALSE 46734
// exit ;
46732: GO 47436
// pom := GetBase ( depot ) ;
46734: LD_ADDR_VAR 0 10
46738: PUSH
46739: LD_VAR 0 1
46743: PPUSH
46744: CALL_OW 274
46748: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46749: LD_ADDR_VAR 0 11
46753: PUSH
46754: LD_VAR 0 2
46758: PPUSH
46759: LD_VAR 0 1
46763: PPUSH
46764: CALL_OW 248
46768: PPUSH
46769: CALL_OW 450
46773: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46774: LD_VAR 0 10
46778: PPUSH
46779: LD_INT 1
46781: PPUSH
46782: CALL_OW 275
46786: PUSH
46787: LD_VAR 0 11
46791: PUSH
46792: LD_INT 1
46794: ARRAY
46795: GREATEREQUAL
46796: PUSH
46797: LD_VAR 0 10
46801: PPUSH
46802: LD_INT 2
46804: PPUSH
46805: CALL_OW 275
46809: PUSH
46810: LD_VAR 0 11
46814: PUSH
46815: LD_INT 2
46817: ARRAY
46818: GREATEREQUAL
46819: AND
46820: PUSH
46821: LD_VAR 0 10
46825: PPUSH
46826: LD_INT 3
46828: PPUSH
46829: CALL_OW 275
46833: PUSH
46834: LD_VAR 0 11
46838: PUSH
46839: LD_INT 3
46841: ARRAY
46842: GREATEREQUAL
46843: AND
46844: NOT
46845: IFFALSE 46849
// exit ;
46847: GO 47436
// if GetBType ( depot ) = b_depot then
46849: LD_VAR 0 1
46853: PPUSH
46854: CALL_OW 266
46858: PUSH
46859: LD_INT 0
46861: EQUAL
46862: IFFALSE 46874
// dist := 28 else
46864: LD_ADDR_VAR 0 14
46868: PUSH
46869: LD_INT 28
46871: ST_TO_ADDR
46872: GO 46882
// dist := 36 ;
46874: LD_ADDR_VAR 0 14
46878: PUSH
46879: LD_INT 36
46881: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46882: LD_VAR 0 1
46886: PPUSH
46887: LD_VAR 0 3
46891: PPUSH
46892: LD_VAR 0 4
46896: PPUSH
46897: CALL_OW 297
46901: PUSH
46902: LD_VAR 0 14
46906: GREATER
46907: IFFALSE 46911
// exit ;
46909: GO 47436
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46911: LD_ADDR_VAR 0 12
46915: PUSH
46916: LD_VAR 0 2
46920: PPUSH
46921: LD_VAR 0 3
46925: PPUSH
46926: LD_VAR 0 4
46930: PPUSH
46931: LD_VAR 0 5
46935: PPUSH
46936: LD_VAR 0 1
46940: PPUSH
46941: CALL_OW 248
46945: PPUSH
46946: LD_INT 0
46948: PPUSH
46949: CALL 47441 0 6
46953: ST_TO_ADDR
// if not hexes then
46954: LD_VAR 0 12
46958: NOT
46959: IFFALSE 46963
// exit ;
46961: GO 47436
// hex := GetHexInfo ( x , y ) ;
46963: LD_ADDR_VAR 0 15
46967: PUSH
46968: LD_VAR 0 3
46972: PPUSH
46973: LD_VAR 0 4
46977: PPUSH
46978: CALL_OW 546
46982: ST_TO_ADDR
// if hex [ 1 ] then
46983: LD_VAR 0 15
46987: PUSH
46988: LD_INT 1
46990: ARRAY
46991: IFFALSE 46995
// exit ;
46993: GO 47436
// height := hex [ 2 ] ;
46995: LD_ADDR_VAR 0 13
46999: PUSH
47000: LD_VAR 0 15
47004: PUSH
47005: LD_INT 2
47007: ARRAY
47008: ST_TO_ADDR
// for i = 1 to hexes do
47009: LD_ADDR_VAR 0 7
47013: PUSH
47014: DOUBLE
47015: LD_INT 1
47017: DEC
47018: ST_TO_ADDR
47019: LD_VAR 0 12
47023: PUSH
47024: FOR_TO
47025: IFFALSE 47355
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47027: LD_VAR 0 12
47031: PUSH
47032: LD_VAR 0 7
47036: ARRAY
47037: PUSH
47038: LD_INT 1
47040: ARRAY
47041: PPUSH
47042: LD_VAR 0 12
47046: PUSH
47047: LD_VAR 0 7
47051: ARRAY
47052: PUSH
47053: LD_INT 2
47055: ARRAY
47056: PPUSH
47057: CALL_OW 488
47061: NOT
47062: PUSH
47063: LD_VAR 0 12
47067: PUSH
47068: LD_VAR 0 7
47072: ARRAY
47073: PUSH
47074: LD_INT 1
47076: ARRAY
47077: PPUSH
47078: LD_VAR 0 12
47082: PUSH
47083: LD_VAR 0 7
47087: ARRAY
47088: PUSH
47089: LD_INT 2
47091: ARRAY
47092: PPUSH
47093: CALL_OW 428
47097: PUSH
47098: LD_INT 0
47100: GREATER
47101: OR
47102: PUSH
47103: LD_VAR 0 12
47107: PUSH
47108: LD_VAR 0 7
47112: ARRAY
47113: PUSH
47114: LD_INT 1
47116: ARRAY
47117: PPUSH
47118: LD_VAR 0 12
47122: PUSH
47123: LD_VAR 0 7
47127: ARRAY
47128: PUSH
47129: LD_INT 2
47131: ARRAY
47132: PPUSH
47133: CALL_OW 351
47137: OR
47138: IFFALSE 47144
// exit ;
47140: POP
47141: POP
47142: GO 47436
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47144: LD_ADDR_VAR 0 8
47148: PUSH
47149: LD_VAR 0 12
47153: PUSH
47154: LD_VAR 0 7
47158: ARRAY
47159: PUSH
47160: LD_INT 1
47162: ARRAY
47163: PPUSH
47164: LD_VAR 0 12
47168: PUSH
47169: LD_VAR 0 7
47173: ARRAY
47174: PUSH
47175: LD_INT 2
47177: ARRAY
47178: PPUSH
47179: CALL_OW 546
47183: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47184: LD_VAR 0 8
47188: PUSH
47189: LD_INT 1
47191: ARRAY
47192: PUSH
47193: LD_VAR 0 8
47197: PUSH
47198: LD_INT 2
47200: ARRAY
47201: PUSH
47202: LD_VAR 0 13
47206: PUSH
47207: LD_INT 2
47209: PLUS
47210: GREATER
47211: OR
47212: PUSH
47213: LD_VAR 0 8
47217: PUSH
47218: LD_INT 2
47220: ARRAY
47221: PUSH
47222: LD_VAR 0 13
47226: PUSH
47227: LD_INT 2
47229: MINUS
47230: LESS
47231: OR
47232: PUSH
47233: LD_VAR 0 8
47237: PUSH
47238: LD_INT 3
47240: ARRAY
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 8
47247: PUSH
47248: LD_INT 9
47250: PUSH
47251: LD_INT 10
47253: PUSH
47254: LD_INT 11
47256: PUSH
47257: LD_INT 12
47259: PUSH
47260: LD_INT 13
47262: PUSH
47263: LD_INT 16
47265: PUSH
47266: LD_INT 17
47268: PUSH
47269: LD_INT 18
47271: PUSH
47272: LD_INT 19
47274: PUSH
47275: LD_INT 20
47277: PUSH
47278: LD_INT 21
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: IN
47296: NOT
47297: OR
47298: PUSH
47299: LD_VAR 0 8
47303: PUSH
47304: LD_INT 5
47306: ARRAY
47307: NOT
47308: OR
47309: PUSH
47310: LD_VAR 0 8
47314: PUSH
47315: LD_INT 6
47317: ARRAY
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 7
47327: PUSH
47328: LD_INT 9
47330: PUSH
47331: LD_INT 10
47333: PUSH
47334: LD_INT 11
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: IN
47345: NOT
47346: OR
47347: IFFALSE 47353
// exit ;
47349: POP
47350: POP
47351: GO 47436
// end ;
47353: GO 47024
47355: POP
47356: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47357: LD_VAR 0 9
47361: PPUSH
47362: LD_VAR 0 3
47366: PPUSH
47367: LD_VAR 0 4
47371: PPUSH
47372: LD_INT 20
47374: PPUSH
47375: CALL 39382 0 4
47379: PUSH
47380: LD_INT 4
47382: ARRAY
47383: IFFALSE 47387
// exit ;
47385: GO 47436
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47387: LD_VAR 0 2
47391: PUSH
47392: LD_INT 29
47394: PUSH
47395: LD_INT 30
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: IN
47402: PUSH
47403: LD_VAR 0 3
47407: PPUSH
47408: LD_VAR 0 4
47412: PPUSH
47413: LD_VAR 0 9
47417: PPUSH
47418: CALL_OW 440
47422: NOT
47423: AND
47424: IFFALSE 47428
// exit ;
47426: GO 47436
// result := true ;
47428: LD_ADDR_VAR 0 6
47432: PUSH
47433: LD_INT 1
47435: ST_TO_ADDR
// end ;
47436: LD_VAR 0 6
47440: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47441: LD_INT 0
47443: PPUSH
47444: PPUSH
47445: PPUSH
47446: PPUSH
47447: PPUSH
47448: PPUSH
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
47456: PPUSH
47457: PPUSH
47458: PPUSH
47459: PPUSH
47460: PPUSH
47461: PPUSH
47462: PPUSH
47463: PPUSH
47464: PPUSH
47465: PPUSH
47466: PPUSH
47467: PPUSH
47468: PPUSH
47469: PPUSH
47470: PPUSH
47471: PPUSH
47472: PPUSH
47473: PPUSH
47474: PPUSH
47475: PPUSH
47476: PPUSH
47477: PPUSH
47478: PPUSH
47479: PPUSH
47480: PPUSH
47481: PPUSH
47482: PPUSH
47483: PPUSH
47484: PPUSH
47485: PPUSH
47486: PPUSH
47487: PPUSH
47488: PPUSH
47489: PPUSH
47490: PPUSH
47491: PPUSH
47492: PPUSH
47493: PPUSH
47494: PPUSH
47495: PPUSH
47496: PPUSH
47497: PPUSH
47498: PPUSH
47499: PPUSH
47500: PPUSH
// result = [ ] ;
47501: LD_ADDR_VAR 0 7
47505: PUSH
47506: EMPTY
47507: ST_TO_ADDR
// temp_list = [ ] ;
47508: LD_ADDR_VAR 0 9
47512: PUSH
47513: EMPTY
47514: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47515: LD_VAR 0 4
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 4
47534: PUSH
47535: LD_INT 5
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: IN
47546: NOT
47547: PUSH
47548: LD_VAR 0 1
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: IN
47563: PUSH
47564: LD_VAR 0 5
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: LIST
47582: IN
47583: NOT
47584: AND
47585: OR
47586: IFFALSE 47590
// exit ;
47588: GO 65981
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47590: LD_VAR 0 1
47594: PUSH
47595: LD_INT 6
47597: PUSH
47598: LD_INT 7
47600: PUSH
47601: LD_INT 8
47603: PUSH
47604: LD_INT 13
47606: PUSH
47607: LD_INT 12
47609: PUSH
47610: LD_INT 15
47612: PUSH
47613: LD_INT 11
47615: PUSH
47616: LD_INT 14
47618: PUSH
47619: LD_INT 10
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: IN
47633: IFFALSE 47643
// btype = b_lab ;
47635: LD_ADDR_VAR 0 1
47639: PUSH
47640: LD_INT 6
47642: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47643: LD_VAR 0 6
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: LIST
47661: IN
47662: NOT
47663: PUSH
47664: LD_VAR 0 1
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: LD_INT 3
47680: PUSH
47681: LD_INT 6
47683: PUSH
47684: LD_INT 36
47686: PUSH
47687: LD_INT 4
47689: PUSH
47690: LD_INT 5
47692: PUSH
47693: LD_INT 31
47695: PUSH
47696: LD_INT 32
47698: PUSH
47699: LD_INT 33
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: IN
47715: NOT
47716: PUSH
47717: LD_VAR 0 6
47721: PUSH
47722: LD_INT 1
47724: EQUAL
47725: AND
47726: OR
47727: PUSH
47728: LD_VAR 0 1
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: IN
47743: NOT
47744: PUSH
47745: LD_VAR 0 6
47749: PUSH
47750: LD_INT 2
47752: EQUAL
47753: AND
47754: OR
47755: IFFALSE 47765
// mode = 0 ;
47757: LD_ADDR_VAR 0 6
47761: PUSH
47762: LD_INT 0
47764: ST_TO_ADDR
// case mode of 0 :
47765: LD_VAR 0 6
47769: PUSH
47770: LD_INT 0
47772: DOUBLE
47773: EQUAL
47774: IFTRUE 47778
47776: GO 59231
47778: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47779: LD_ADDR_VAR 0 11
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47972: LD_ADDR_VAR 0 12
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 3
48129: NEG
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 3
48140: NEG
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48168: LD_ADDR_VAR 0 13
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: LD_INT 3
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 3
48327: NEG
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 3
48339: NEG
48340: PUSH
48341: LD_INT 3
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48367: LD_ADDR_VAR 0 14
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 3
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 3
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48563: LD_ADDR_VAR 0 15
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48756: LD_ADDR_VAR 0 16
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 3
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: LD_INT 3
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 3
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48949: LD_ADDR_VAR 0 17
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49179: LD_ADDR_VAR 0 18
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49409: LD_ADDR_VAR 0 19
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49639: LD_ADDR_VAR 0 20
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49869: LD_ADDR_VAR 0 21
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50099: LD_ADDR_VAR 0 22
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50329: LD_ADDR_VAR 0 23
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50609: LD_ADDR_VAR 0 24
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50885: LD_ADDR_VAR 0 25
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51159: LD_ADDR_VAR 0 26
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51435: LD_ADDR_VAR 0 27
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 3
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51715: LD_ADDR_VAR 0 28
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: NEG
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: NEG
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 3
51962: NEG
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51997: LD_ADDR_VAR 0 29
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: LD_INT 3
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 3
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 3
52241: NEG
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52276: LD_ADDR_VAR 0 30
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 3
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52554: LD_ADDR_VAR 0 31
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52832: LD_ADDR_VAR 0 32
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53110: LD_ADDR_VAR 0 33
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: LD_INT 3
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53389: LD_ADDR_VAR 0 34
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 3
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 3
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53669: LD_ADDR_VAR 0 35
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53781: LD_ADDR_VAR 0 36
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 2
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53893: LD_ADDR_VAR 0 37
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54005: LD_ADDR_VAR 0 38
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54117: LD_ADDR_VAR 0 39
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54229: LD_ADDR_VAR 0 40
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54341: LD_ADDR_VAR 0 41
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: LD_INT 3
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 3
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54691: LD_ADDR_VAR 0 42
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 3
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 3
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 3
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 3
55000: NEG
55001: PUSH
55002: LD_INT 3
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55041: LD_ADDR_VAR 0 43
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 3
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 3
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 3
55337: NEG
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55389: LD_ADDR_VAR 0 44
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: LD_INT 3
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 3
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 3
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: LD_INT 3
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 3
55674: NEG
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 3
55686: NEG
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: LD_INT 3
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55739: LD_ADDR_VAR 0 45
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 2
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: LD_INT 3
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 3
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: NEG
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56089: LD_ADDR_VAR 0 46
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 3
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 3
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 3
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 3
56385: NEG
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 3
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56437: LD_ADDR_VAR 0 47
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56588: LD_ADDR_VAR 0 48
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56735: LD_ADDR_VAR 0 49
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56879: LD_ADDR_VAR 0 50
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57023: LD_ADDR_VAR 0 51
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57170: LD_ADDR_VAR 0 52
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57321: LD_ADDR_VAR 0 53
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57551: LD_ADDR_VAR 0 54
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57781: LD_ADDR_VAR 0 55
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58011: LD_ADDR_VAR 0 56
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58241: LD_ADDR_VAR 0 57
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58471: LD_ADDR_VAR 0 58
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58701: LD_ADDR_VAR 0 59
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58789: LD_ADDR_VAR 0 60
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58877: LD_ADDR_VAR 0 61
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58965: LD_ADDR_VAR 0 62
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59053: LD_ADDR_VAR 0 63
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59141: LD_ADDR_VAR 0 64
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: ST_TO_ADDR
// end ; 1 :
59229: GO 65126
59231: LD_INT 1
59233: DOUBLE
59234: EQUAL
59235: IFTRUE 59239
59237: GO 61862
59239: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59240: LD_ADDR_VAR 0 11
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59284: LD_ADDR_VAR 0 12
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 3
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59325: LD_ADDR_VAR 0 13
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59365: LD_ADDR_VAR 0 14
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: LD_INT 3
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: LIST
59405: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59406: LD_ADDR_VAR 0 15
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 3
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59450: LD_ADDR_VAR 0 16
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 3
59469: NEG
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: LD_INT 3
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59496: LD_ADDR_VAR 0 17
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: LD_INT 3
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59540: LD_ADDR_VAR 0 18
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 3
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59581: LD_ADDR_VAR 0 19
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: LD_INT 3
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: LIST
59620: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59621: LD_ADDR_VAR 0 20
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59662: LD_ADDR_VAR 0 21
59666: PUSH
59667: LD_INT 2
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 3
59680: NEG
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 3
59691: NEG
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: LIST
59705: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59706: LD_ADDR_VAR 0 22
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 3
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 3
59725: NEG
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: NEG
59738: PUSH
59739: LD_INT 3
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: LIST
59751: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59752: LD_ADDR_VAR 0 23
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 3
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: LD_INT 4
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 3
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59796: LD_ADDR_VAR 0 24
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 4
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: LIST
59836: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59837: LD_ADDR_VAR 0 25
59841: PUSH
59842: LD_INT 3
59844: PUSH
59845: LD_INT 3
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 4
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: LD_INT 4
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: LIST
59876: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59877: LD_ADDR_VAR 0 26
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 4
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 3
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59918: LD_ADDR_VAR 0 27
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 3
59936: NEG
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 4
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: LIST
59961: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59962: LD_ADDR_VAR 0 28
59966: PUSH
59967: LD_INT 3
59969: NEG
59970: PUSH
59971: LD_INT 3
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: LD_INT 4
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 4
59993: NEG
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: LIST
60007: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60008: LD_ADDR_VAR 0 29
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: LD_INT 3
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: LD_INT 4
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 4
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: LD_INT 3
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 5
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 5
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 4
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: LD_INT 6
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 6
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 5
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60163: LD_ADDR_VAR 0 30
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 4
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 4
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 5
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 5
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 5
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 6
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 6
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60306: LD_ADDR_VAR 0 31
60310: PUSH
60311: LD_INT 3
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 4
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 4
60353: PUSH
60354: LD_INT 4
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 3
60363: PUSH
60364: LD_INT 4
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 5
60373: PUSH
60374: LD_INT 4
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 5
60383: PUSH
60384: LD_INT 5
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 4
60393: PUSH
60394: LD_INT 5
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 6
60403: PUSH
60404: LD_INT 5
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 6
60413: PUSH
60414: LD_INT 6
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 5
60423: PUSH
60424: LD_INT 6
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60445: LD_ADDR_VAR 0 32
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 3
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: LD_INT 4
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 4
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 3
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 5
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 5
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 4
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 6
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 6
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 5
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60588: LD_ADDR_VAR 0 33
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 4
60640: NEG
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 4
60651: NEG
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 4
60663: NEG
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 5
60674: NEG
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 5
60685: NEG
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 5
60697: NEG
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 6
60708: NEG
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 6
60719: NEG
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60743: LD_ADDR_VAR 0 34
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: LD_INT 3
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 3
60774: NEG
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: LD_INT 4
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: LD_INT 3
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 4
60810: NEG
60811: PUSH
60812: LD_INT 4
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 4
60822: NEG
60823: PUSH
60824: LD_INT 5
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 5
60834: NEG
60835: PUSH
60836: LD_INT 4
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 5
60846: NEG
60847: PUSH
60848: LD_INT 5
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 5
60858: NEG
60859: PUSH
60860: LD_INT 6
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 6
60870: NEG
60871: PUSH
60872: LD_INT 5
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 6
60882: NEG
60883: PUSH
60884: LD_INT 6
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60906: LD_ADDR_VAR 0 41
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: LD_INT 3
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: LIST
60949: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60950: LD_ADDR_VAR 0 42
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 3
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60991: LD_ADDR_VAR 0 43
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: PUSH
61009: LD_INT 2
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 3
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: LIST
61030: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61031: LD_ADDR_VAR 0 44
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 2
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: LD_INT 3
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61072: LD_ADDR_VAR 0 45
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: NEG
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: LIST
61115: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61116: LD_ADDR_VAR 0 46
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: LD_INT 3
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: LIST
61161: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61162: LD_ADDR_VAR 0 47
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 3
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 3
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61195: LD_ADDR_VAR 0 48
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61226: LD_ADDR_VAR 0 49
61230: PUSH
61231: LD_INT 3
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61255: LD_ADDR_VAR 0 50
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61284: LD_ADDR_VAR 0 51
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61315: LD_ADDR_VAR 0 52
61319: PUSH
61320: LD_INT 3
61322: NEG
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61348: LD_ADDR_VAR 0 53
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 3
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: LIST
61391: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61392: LD_ADDR_VAR 0 54
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61433: LD_ADDR_VAR 0 55
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61473: LD_ADDR_VAR 0 56
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: LD_INT 3
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61514: LD_ADDR_VAR 0 57
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: NEG
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 3
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61558: LD_ADDR_VAR 0 58
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 3
61577: NEG
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 3
61589: NEG
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61604: LD_ADDR_VAR 0 59
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 2
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 1
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: LIST
61647: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61648: LD_ADDR_VAR 0 60
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61689: LD_ADDR_VAR 0 61
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 2
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: LD_INT 2
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: LIST
61728: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61729: LD_ADDR_VAR 0 62
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61770: LD_ADDR_VAR 0 63
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61814: LD_ADDR_VAR 0 64
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: ST_TO_ADDR
// end ; 2 :
61860: GO 65126
61862: LD_INT 2
61864: DOUBLE
61865: EQUAL
61866: IFTRUE 61870
61868: GO 65125
61870: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61871: LD_ADDR_VAR 0 29
61875: PUSH
61876: LD_INT 4
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 5
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 5
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 3
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 5
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: LD_INT 3
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 4
61991: PUSH
61992: LD_INT 3
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 4
62001: PUSH
62002: LD_INT 4
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: LD_INT 4
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: LD_INT 3
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 4
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: PUSH
62052: LD_INT 4
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 4
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: LD_INT 4
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: LD_INT 5
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 5
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 4
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: LD_INT 3
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: LD_INT 5
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: NEG
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 3
62154: NEG
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: NEG
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: NEG
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 2
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 4
62210: NEG
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 4
62221: NEG
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 4
62233: NEG
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: NEG
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 4
62256: NEG
62257: PUSH
62258: LD_INT 4
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 4
62268: NEG
62269: PUSH
62270: LD_INT 5
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 3
62280: NEG
62281: PUSH
62282: LD_INT 4
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 3
62292: NEG
62293: PUSH
62294: LD_INT 3
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 4
62304: NEG
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 5
62316: NEG
62317: PUSH
62318: LD_INT 4
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 5
62328: NEG
62329: PUSH
62330: LD_INT 5
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 3
62340: NEG
62341: PUSH
62342: LD_INT 5
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 5
62352: NEG
62353: PUSH
62354: LD_INT 3
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62409: LD_ADDR_VAR 0 30
62413: PUSH
62414: LD_INT 4
62416: PUSH
62417: LD_INT 4
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 4
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 5
62436: PUSH
62437: LD_INT 4
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 5
62446: PUSH
62447: LD_INT 5
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 4
62456: PUSH
62457: LD_INT 5
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 3
62466: PUSH
62467: LD_INT 4
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: PUSH
62477: LD_INT 3
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 5
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 3
62496: PUSH
62497: LD_INT 5
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: LD_INT 3
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: LD_INT 3
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 4
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 3
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 2
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: LD_INT 4
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 2
62588: NEG
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 4
62599: NEG
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 4
62610: NEG
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 3
62622: NEG
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 4
62644: NEG
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 5
62655: NEG
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 5
62666: NEG
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 5
62678: NEG
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 3
62690: NEG
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 3
62701: NEG
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: NEG
62714: PUSH
62715: LD_INT 4
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 3
62749: NEG
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 4
62761: NEG
62762: PUSH
62763: LD_INT 3
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 4
62773: NEG
62774: PUSH
62775: LD_INT 4
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: LD_INT 4
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 4
62797: NEG
62798: PUSH
62799: LD_INT 2
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 4
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: LD_INT 5
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: LD_INT 4
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: LD_INT 3
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: LD_INT 4
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: LD_INT 5
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: LD_INT 5
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62956: LD_ADDR_VAR 0 31
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 4
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: LD_INT 3
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 4
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: LD_INT 5
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 5
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: LD_INT 4
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 3
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: LD_INT 5
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 2
63045: NEG
63046: PUSH
63047: LD_INT 3
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 3
63056: NEG
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 3
63067: NEG
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 2
63079: NEG
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 2
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 3
63101: NEG
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 4
63112: NEG
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 4
63123: NEG
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 4
63135: NEG
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 4
63158: NEG
63159: PUSH
63160: LD_INT 4
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 4
63170: NEG
63171: PUSH
63172: LD_INT 5
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 3
63182: NEG
63183: PUSH
63184: LD_INT 4
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: NEG
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 4
63206: NEG
63207: PUSH
63208: LD_INT 3
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 5
63218: NEG
63219: PUSH
63220: LD_INT 4
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 5
63230: NEG
63231: PUSH
63232: LD_INT 5
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 5
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 5
63254: NEG
63255: PUSH
63256: LD_INT 3
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: LD_INT 3
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: LD_INT 4
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 3
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: LD_INT 2
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: LD_INT 3
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 4
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 2
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: NEG
63357: PUSH
63358: LD_INT 4
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 4
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 4
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 5
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 5
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 4
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 3
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 3
63429: PUSH
63430: LD_INT 1
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 3
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 5
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63506: LD_ADDR_VAR 0 32
63510: PUSH
63511: LD_INT 4
63513: NEG
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 4
63524: NEG
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 3
63536: NEG
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 3
63547: NEG
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 4
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 5
63569: NEG
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 5
63580: NEG
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 5
63592: NEG
63593: PUSH
63594: LD_INT 2
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 3
63604: NEG
63605: PUSH
63606: LD_INT 2
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: LD_INT 3
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: LD_INT 4
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: LD_INT 3
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 2
63651: NEG
63652: PUSH
63653: LD_INT 2
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 3
63663: NEG
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 4
63675: NEG
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 4
63687: NEG
63688: PUSH
63689: LD_INT 4
63691: NEG
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 2
63699: NEG
63700: PUSH
63701: LD_INT 4
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 4
63711: NEG
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 4
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: LD_INT 5
63737: NEG
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: LD_INT 4
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: LD_INT 3
63759: NEG
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 3
63770: NEG
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: LD_INT 4
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 5
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 2
63802: PUSH
63803: LD_INT 3
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 2
63813: NEG
63814: PUSH
63815: LD_INT 5
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 3
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 4
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 4
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: PUSH
63898: LD_INT 2
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 4
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 4
63918: PUSH
63919: LD_INT 4
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 4
63928: PUSH
63929: LD_INT 3
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 5
63938: PUSH
63939: LD_INT 4
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 5
63948: PUSH
63949: LD_INT 5
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 4
63958: PUSH
63959: LD_INT 5
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 3
63968: PUSH
63969: LD_INT 4
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 3
63978: PUSH
63979: LD_INT 3
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 5
63988: PUSH
63989: LD_INT 3
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 3
63998: PUSH
63999: LD_INT 5
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64053: LD_ADDR_VAR 0 33
64057: PUSH
64058: LD_INT 4
64060: NEG
64061: PUSH
64062: LD_INT 4
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 4
64072: NEG
64073: PUSH
64074: LD_INT 5
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 3
64084: NEG
64085: PUSH
64086: LD_INT 4
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 3
64096: NEG
64097: PUSH
64098: LD_INT 3
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 4
64108: NEG
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 5
64120: NEG
64121: PUSH
64122: LD_INT 4
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 5
64132: NEG
64133: PUSH
64134: LD_INT 5
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 3
64144: NEG
64145: PUSH
64146: LD_INT 5
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 5
64156: NEG
64157: PUSH
64158: LD_INT 3
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: LD_INT 3
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 4
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: LD_INT 3
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: LD_INT 2
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: LD_INT 3
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: LD_INT 4
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 2
64258: NEG
64259: PUSH
64260: LD_INT 4
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 4
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 4
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 5
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 5
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 4
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 3
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 3
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 5
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 3
64363: PUSH
64364: LD_INT 3
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 3
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 4
64383: PUSH
64384: LD_INT 3
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 4
64393: PUSH
64394: LD_INT 4
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 3
64403: PUSH
64404: LD_INT 4
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 2
64413: PUSH
64414: LD_INT 3
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 2
64423: PUSH
64424: LD_INT 2
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 4
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 2
64443: PUSH
64444: LD_INT 4
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 4
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 3
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: LD_INT 4
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: LD_INT 5
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: LD_INT 5
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 1
64503: NEG
64504: PUSH
64505: LD_INT 4
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 1
64514: NEG
64515: PUSH
64516: LD_INT 3
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: LD_INT 5
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 2
64535: NEG
64536: PUSH
64537: LD_INT 3
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64591: LD_ADDR_VAR 0 34
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 4
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 5
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: LD_INT 4
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 3
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 3
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: LD_INT 4
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 1
64665: NEG
64666: PUSH
64667: LD_INT 5
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 2
64677: PUSH
64678: LD_INT 3
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 2
64688: NEG
64689: PUSH
64690: LD_INT 5
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 3
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 3
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 4
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 4
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 3
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 2
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: LD_INT 2
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 4
64783: PUSH
64784: LD_INT 2
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 4
64793: PUSH
64794: LD_INT 4
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 4
64803: PUSH
64804: LD_INT 3
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 5
64813: PUSH
64814: LD_INT 4
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 5
64823: PUSH
64824: LD_INT 5
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 4
64833: PUSH
64834: LD_INT 5
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 3
64843: PUSH
64844: LD_INT 4
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 5
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 3
64873: PUSH
64874: LD_INT 5
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: LD_INT 2
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: LD_INT 4
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: LD_INT 4
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: LD_INT 2
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: LD_INT 4
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 2
64965: NEG
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 4
64976: NEG
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 4
64987: NEG
64988: PUSH
64989: LD_INT 1
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 3
64999: NEG
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 3
65010: NEG
65011: PUSH
65012: LD_INT 1
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 4
65021: NEG
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 5
65032: NEG
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 5
65043: NEG
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 5
65055: NEG
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 3
65067: NEG
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: ST_TO_ADDR
// end ; end ;
65123: GO 65126
65125: POP
// case btype of b_depot , b_warehouse :
65126: LD_VAR 0 1
65130: PUSH
65131: LD_INT 0
65133: DOUBLE
65134: EQUAL
65135: IFTRUE 65145
65137: LD_INT 1
65139: DOUBLE
65140: EQUAL
65141: IFTRUE 65145
65143: GO 65346
65145: POP
// case nation of nation_american :
65146: LD_VAR 0 5
65150: PUSH
65151: LD_INT 1
65153: DOUBLE
65154: EQUAL
65155: IFTRUE 65159
65157: GO 65215
65159: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65160: LD_ADDR_VAR 0 9
65164: PUSH
65165: LD_VAR 0 11
65169: PUSH
65170: LD_VAR 0 12
65174: PUSH
65175: LD_VAR 0 13
65179: PUSH
65180: LD_VAR 0 14
65184: PUSH
65185: LD_VAR 0 15
65189: PUSH
65190: LD_VAR 0 16
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: PUSH
65203: LD_VAR 0 4
65207: PUSH
65208: LD_INT 1
65210: PLUS
65211: ARRAY
65212: ST_TO_ADDR
65213: GO 65344
65215: LD_INT 2
65217: DOUBLE
65218: EQUAL
65219: IFTRUE 65223
65221: GO 65279
65223: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65224: LD_ADDR_VAR 0 9
65228: PUSH
65229: LD_VAR 0 17
65233: PUSH
65234: LD_VAR 0 18
65238: PUSH
65239: LD_VAR 0 19
65243: PUSH
65244: LD_VAR 0 20
65248: PUSH
65249: LD_VAR 0 21
65253: PUSH
65254: LD_VAR 0 22
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: LD_VAR 0 4
65271: PUSH
65272: LD_INT 1
65274: PLUS
65275: ARRAY
65276: ST_TO_ADDR
65277: GO 65344
65279: LD_INT 3
65281: DOUBLE
65282: EQUAL
65283: IFTRUE 65287
65285: GO 65343
65287: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65288: LD_ADDR_VAR 0 9
65292: PUSH
65293: LD_VAR 0 23
65297: PUSH
65298: LD_VAR 0 24
65302: PUSH
65303: LD_VAR 0 25
65307: PUSH
65308: LD_VAR 0 26
65312: PUSH
65313: LD_VAR 0 27
65317: PUSH
65318: LD_VAR 0 28
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: PUSH
65331: LD_VAR 0 4
65335: PUSH
65336: LD_INT 1
65338: PLUS
65339: ARRAY
65340: ST_TO_ADDR
65341: GO 65344
65343: POP
65344: GO 65899
65346: LD_INT 2
65348: DOUBLE
65349: EQUAL
65350: IFTRUE 65360
65352: LD_INT 3
65354: DOUBLE
65355: EQUAL
65356: IFTRUE 65360
65358: GO 65416
65360: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65361: LD_ADDR_VAR 0 9
65365: PUSH
65366: LD_VAR 0 29
65370: PUSH
65371: LD_VAR 0 30
65375: PUSH
65376: LD_VAR 0 31
65380: PUSH
65381: LD_VAR 0 32
65385: PUSH
65386: LD_VAR 0 33
65390: PUSH
65391: LD_VAR 0 34
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: PUSH
65404: LD_VAR 0 4
65408: PUSH
65409: LD_INT 1
65411: PLUS
65412: ARRAY
65413: ST_TO_ADDR
65414: GO 65899
65416: LD_INT 16
65418: DOUBLE
65419: EQUAL
65420: IFTRUE 65478
65422: LD_INT 17
65424: DOUBLE
65425: EQUAL
65426: IFTRUE 65478
65428: LD_INT 18
65430: DOUBLE
65431: EQUAL
65432: IFTRUE 65478
65434: LD_INT 19
65436: DOUBLE
65437: EQUAL
65438: IFTRUE 65478
65440: LD_INT 22
65442: DOUBLE
65443: EQUAL
65444: IFTRUE 65478
65446: LD_INT 20
65448: DOUBLE
65449: EQUAL
65450: IFTRUE 65478
65452: LD_INT 21
65454: DOUBLE
65455: EQUAL
65456: IFTRUE 65478
65458: LD_INT 23
65460: DOUBLE
65461: EQUAL
65462: IFTRUE 65478
65464: LD_INT 24
65466: DOUBLE
65467: EQUAL
65468: IFTRUE 65478
65470: LD_INT 25
65472: DOUBLE
65473: EQUAL
65474: IFTRUE 65478
65476: GO 65534
65478: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65479: LD_ADDR_VAR 0 9
65483: PUSH
65484: LD_VAR 0 35
65488: PUSH
65489: LD_VAR 0 36
65493: PUSH
65494: LD_VAR 0 37
65498: PUSH
65499: LD_VAR 0 38
65503: PUSH
65504: LD_VAR 0 39
65508: PUSH
65509: LD_VAR 0 40
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: PUSH
65522: LD_VAR 0 4
65526: PUSH
65527: LD_INT 1
65529: PLUS
65530: ARRAY
65531: ST_TO_ADDR
65532: GO 65899
65534: LD_INT 6
65536: DOUBLE
65537: EQUAL
65538: IFTRUE 65590
65540: LD_INT 7
65542: DOUBLE
65543: EQUAL
65544: IFTRUE 65590
65546: LD_INT 8
65548: DOUBLE
65549: EQUAL
65550: IFTRUE 65590
65552: LD_INT 13
65554: DOUBLE
65555: EQUAL
65556: IFTRUE 65590
65558: LD_INT 12
65560: DOUBLE
65561: EQUAL
65562: IFTRUE 65590
65564: LD_INT 15
65566: DOUBLE
65567: EQUAL
65568: IFTRUE 65590
65570: LD_INT 11
65572: DOUBLE
65573: EQUAL
65574: IFTRUE 65590
65576: LD_INT 14
65578: DOUBLE
65579: EQUAL
65580: IFTRUE 65590
65582: LD_INT 10
65584: DOUBLE
65585: EQUAL
65586: IFTRUE 65590
65588: GO 65646
65590: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65591: LD_ADDR_VAR 0 9
65595: PUSH
65596: LD_VAR 0 41
65600: PUSH
65601: LD_VAR 0 42
65605: PUSH
65606: LD_VAR 0 43
65610: PUSH
65611: LD_VAR 0 44
65615: PUSH
65616: LD_VAR 0 45
65620: PUSH
65621: LD_VAR 0 46
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: PUSH
65634: LD_VAR 0 4
65638: PUSH
65639: LD_INT 1
65641: PLUS
65642: ARRAY
65643: ST_TO_ADDR
65644: GO 65899
65646: LD_INT 36
65648: DOUBLE
65649: EQUAL
65650: IFTRUE 65654
65652: GO 65710
65654: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65655: LD_ADDR_VAR 0 9
65659: PUSH
65660: LD_VAR 0 47
65664: PUSH
65665: LD_VAR 0 48
65669: PUSH
65670: LD_VAR 0 49
65674: PUSH
65675: LD_VAR 0 50
65679: PUSH
65680: LD_VAR 0 51
65684: PUSH
65685: LD_VAR 0 52
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: PUSH
65698: LD_VAR 0 4
65702: PUSH
65703: LD_INT 1
65705: PLUS
65706: ARRAY
65707: ST_TO_ADDR
65708: GO 65899
65710: LD_INT 4
65712: DOUBLE
65713: EQUAL
65714: IFTRUE 65736
65716: LD_INT 5
65718: DOUBLE
65719: EQUAL
65720: IFTRUE 65736
65722: LD_INT 34
65724: DOUBLE
65725: EQUAL
65726: IFTRUE 65736
65728: LD_INT 37
65730: DOUBLE
65731: EQUAL
65732: IFTRUE 65736
65734: GO 65792
65736: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65737: LD_ADDR_VAR 0 9
65741: PUSH
65742: LD_VAR 0 53
65746: PUSH
65747: LD_VAR 0 54
65751: PUSH
65752: LD_VAR 0 55
65756: PUSH
65757: LD_VAR 0 56
65761: PUSH
65762: LD_VAR 0 57
65766: PUSH
65767: LD_VAR 0 58
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: PUSH
65780: LD_VAR 0 4
65784: PUSH
65785: LD_INT 1
65787: PLUS
65788: ARRAY
65789: ST_TO_ADDR
65790: GO 65899
65792: LD_INT 31
65794: DOUBLE
65795: EQUAL
65796: IFTRUE 65842
65798: LD_INT 32
65800: DOUBLE
65801: EQUAL
65802: IFTRUE 65842
65804: LD_INT 33
65806: DOUBLE
65807: EQUAL
65808: IFTRUE 65842
65810: LD_INT 27
65812: DOUBLE
65813: EQUAL
65814: IFTRUE 65842
65816: LD_INT 26
65818: DOUBLE
65819: EQUAL
65820: IFTRUE 65842
65822: LD_INT 28
65824: DOUBLE
65825: EQUAL
65826: IFTRUE 65842
65828: LD_INT 29
65830: DOUBLE
65831: EQUAL
65832: IFTRUE 65842
65834: LD_INT 30
65836: DOUBLE
65837: EQUAL
65838: IFTRUE 65842
65840: GO 65898
65842: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65843: LD_ADDR_VAR 0 9
65847: PUSH
65848: LD_VAR 0 59
65852: PUSH
65853: LD_VAR 0 60
65857: PUSH
65858: LD_VAR 0 61
65862: PUSH
65863: LD_VAR 0 62
65867: PUSH
65868: LD_VAR 0 63
65872: PUSH
65873: LD_VAR 0 64
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: PUSH
65886: LD_VAR 0 4
65890: PUSH
65891: LD_INT 1
65893: PLUS
65894: ARRAY
65895: ST_TO_ADDR
65896: GO 65899
65898: POP
// temp_list2 = [ ] ;
65899: LD_ADDR_VAR 0 10
65903: PUSH
65904: EMPTY
65905: ST_TO_ADDR
// for i in temp_list do
65906: LD_ADDR_VAR 0 8
65910: PUSH
65911: LD_VAR 0 9
65915: PUSH
65916: FOR_IN
65917: IFFALSE 65969
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65919: LD_ADDR_VAR 0 10
65923: PUSH
65924: LD_VAR 0 10
65928: PUSH
65929: LD_VAR 0 8
65933: PUSH
65934: LD_INT 1
65936: ARRAY
65937: PUSH
65938: LD_VAR 0 2
65942: PLUS
65943: PUSH
65944: LD_VAR 0 8
65948: PUSH
65949: LD_INT 2
65951: ARRAY
65952: PUSH
65953: LD_VAR 0 3
65957: PLUS
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: EMPTY
65964: LIST
65965: ADD
65966: ST_TO_ADDR
65967: GO 65916
65969: POP
65970: POP
// result = temp_list2 ;
65971: LD_ADDR_VAR 0 7
65975: PUSH
65976: LD_VAR 0 10
65980: ST_TO_ADDR
// end ;
65981: LD_VAR 0 7
65985: RET
// export function EnemyInRange ( unit , dist ) ; begin
65986: LD_INT 0
65988: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65989: LD_ADDR_VAR 0 3
65993: PUSH
65994: LD_VAR 0 1
65998: PPUSH
65999: CALL_OW 255
66003: PPUSH
66004: LD_VAR 0 1
66008: PPUSH
66009: CALL_OW 250
66013: PPUSH
66014: LD_VAR 0 1
66018: PPUSH
66019: CALL_OW 251
66023: PPUSH
66024: LD_VAR 0 2
66028: PPUSH
66029: CALL 39382 0 4
66033: PUSH
66034: LD_INT 4
66036: ARRAY
66037: ST_TO_ADDR
// end ;
66038: LD_VAR 0 3
66042: RET
// export function PlayerSeeMe ( unit ) ; begin
66043: LD_INT 0
66045: PPUSH
// result := See ( your_side , unit ) ;
66046: LD_ADDR_VAR 0 2
66050: PUSH
66051: LD_OWVAR 2
66055: PPUSH
66056: LD_VAR 0 1
66060: PPUSH
66061: CALL_OW 292
66065: ST_TO_ADDR
// end ;
66066: LD_VAR 0 2
66070: RET
// export function ReverseDir ( unit ) ; begin
66071: LD_INT 0
66073: PPUSH
// if not unit then
66074: LD_VAR 0 1
66078: NOT
66079: IFFALSE 66083
// exit ;
66081: GO 66106
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66083: LD_ADDR_VAR 0 2
66087: PUSH
66088: LD_VAR 0 1
66092: PPUSH
66093: CALL_OW 254
66097: PUSH
66098: LD_INT 3
66100: PLUS
66101: PUSH
66102: LD_INT 6
66104: MOD
66105: ST_TO_ADDR
// end ;
66106: LD_VAR 0 2
66110: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66111: LD_INT 0
66113: PPUSH
66114: PPUSH
66115: PPUSH
66116: PPUSH
66117: PPUSH
// if not hexes then
66118: LD_VAR 0 2
66122: NOT
66123: IFFALSE 66127
// exit ;
66125: GO 66275
// dist := 9999 ;
66127: LD_ADDR_VAR 0 5
66131: PUSH
66132: LD_INT 9999
66134: ST_TO_ADDR
// for i = 1 to hexes do
66135: LD_ADDR_VAR 0 4
66139: PUSH
66140: DOUBLE
66141: LD_INT 1
66143: DEC
66144: ST_TO_ADDR
66145: LD_VAR 0 2
66149: PUSH
66150: FOR_TO
66151: IFFALSE 66263
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66153: LD_VAR 0 1
66157: PPUSH
66158: LD_VAR 0 2
66162: PUSH
66163: LD_VAR 0 4
66167: ARRAY
66168: PUSH
66169: LD_INT 1
66171: ARRAY
66172: PPUSH
66173: LD_VAR 0 2
66177: PUSH
66178: LD_VAR 0 4
66182: ARRAY
66183: PUSH
66184: LD_INT 2
66186: ARRAY
66187: PPUSH
66188: CALL_OW 297
66192: PUSH
66193: LD_VAR 0 5
66197: LESS
66198: IFFALSE 66261
// begin hex := hexes [ i ] ;
66200: LD_ADDR_VAR 0 7
66204: PUSH
66205: LD_VAR 0 2
66209: PUSH
66210: LD_VAR 0 4
66214: ARRAY
66215: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66216: LD_ADDR_VAR 0 5
66220: PUSH
66221: LD_VAR 0 1
66225: PPUSH
66226: LD_VAR 0 2
66230: PUSH
66231: LD_VAR 0 4
66235: ARRAY
66236: PUSH
66237: LD_INT 1
66239: ARRAY
66240: PPUSH
66241: LD_VAR 0 2
66245: PUSH
66246: LD_VAR 0 4
66250: ARRAY
66251: PUSH
66252: LD_INT 2
66254: ARRAY
66255: PPUSH
66256: CALL_OW 297
66260: ST_TO_ADDR
// end ; end ;
66261: GO 66150
66263: POP
66264: POP
// result := hex ;
66265: LD_ADDR_VAR 0 3
66269: PUSH
66270: LD_VAR 0 7
66274: ST_TO_ADDR
// end ;
66275: LD_VAR 0 3
66279: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66280: LD_INT 0
66282: PPUSH
66283: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66284: LD_VAR 0 1
66288: NOT
66289: PUSH
66290: LD_VAR 0 1
66294: PUSH
66295: LD_INT 21
66297: PUSH
66298: LD_INT 2
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 23
66307: PUSH
66308: LD_INT 2
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PPUSH
66319: CALL_OW 69
66323: IN
66324: NOT
66325: OR
66326: IFFALSE 66330
// exit ;
66328: GO 66377
// for i = 1 to 3 do
66330: LD_ADDR_VAR 0 3
66334: PUSH
66335: DOUBLE
66336: LD_INT 1
66338: DEC
66339: ST_TO_ADDR
66340: LD_INT 3
66342: PUSH
66343: FOR_TO
66344: IFFALSE 66375
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66346: LD_VAR 0 1
66350: PPUSH
66351: CALL_OW 250
66355: PPUSH
66356: LD_VAR 0 1
66360: PPUSH
66361: CALL_OW 251
66365: PPUSH
66366: LD_INT 1
66368: PPUSH
66369: CALL_OW 453
66373: GO 66343
66375: POP
66376: POP
// end ;
66377: LD_VAR 0 2
66381: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66382: LD_INT 0
66384: PPUSH
66385: PPUSH
66386: PPUSH
66387: PPUSH
66388: PPUSH
66389: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66390: LD_VAR 0 1
66394: NOT
66395: PUSH
66396: LD_VAR 0 2
66400: NOT
66401: OR
66402: PUSH
66403: LD_VAR 0 1
66407: PPUSH
66408: CALL_OW 314
66412: OR
66413: IFFALSE 66417
// exit ;
66415: GO 66858
// x := GetX ( enemy_unit ) ;
66417: LD_ADDR_VAR 0 7
66421: PUSH
66422: LD_VAR 0 2
66426: PPUSH
66427: CALL_OW 250
66431: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66432: LD_ADDR_VAR 0 8
66436: PUSH
66437: LD_VAR 0 2
66441: PPUSH
66442: CALL_OW 251
66446: ST_TO_ADDR
// if not x or not y then
66447: LD_VAR 0 7
66451: NOT
66452: PUSH
66453: LD_VAR 0 8
66457: NOT
66458: OR
66459: IFFALSE 66463
// exit ;
66461: GO 66858
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66463: LD_ADDR_VAR 0 6
66467: PUSH
66468: LD_VAR 0 7
66472: PPUSH
66473: LD_INT 0
66475: PPUSH
66476: LD_INT 4
66478: PPUSH
66479: CALL_OW 272
66483: PUSH
66484: LD_VAR 0 8
66488: PPUSH
66489: LD_INT 0
66491: PPUSH
66492: LD_INT 4
66494: PPUSH
66495: CALL_OW 273
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_VAR 0 7
66508: PPUSH
66509: LD_INT 1
66511: PPUSH
66512: LD_INT 4
66514: PPUSH
66515: CALL_OW 272
66519: PUSH
66520: LD_VAR 0 8
66524: PPUSH
66525: LD_INT 1
66527: PPUSH
66528: LD_INT 4
66530: PPUSH
66531: CALL_OW 273
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_VAR 0 7
66544: PPUSH
66545: LD_INT 2
66547: PPUSH
66548: LD_INT 4
66550: PPUSH
66551: CALL_OW 272
66555: PUSH
66556: LD_VAR 0 8
66560: PPUSH
66561: LD_INT 2
66563: PPUSH
66564: LD_INT 4
66566: PPUSH
66567: CALL_OW 273
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_VAR 0 7
66580: PPUSH
66581: LD_INT 3
66583: PPUSH
66584: LD_INT 4
66586: PPUSH
66587: CALL_OW 272
66591: PUSH
66592: LD_VAR 0 8
66596: PPUSH
66597: LD_INT 3
66599: PPUSH
66600: LD_INT 4
66602: PPUSH
66603: CALL_OW 273
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_VAR 0 7
66616: PPUSH
66617: LD_INT 4
66619: PPUSH
66620: LD_INT 4
66622: PPUSH
66623: CALL_OW 272
66627: PUSH
66628: LD_VAR 0 8
66632: PPUSH
66633: LD_INT 4
66635: PPUSH
66636: LD_INT 4
66638: PPUSH
66639: CALL_OW 273
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_VAR 0 7
66652: PPUSH
66653: LD_INT 5
66655: PPUSH
66656: LD_INT 4
66658: PPUSH
66659: CALL_OW 272
66663: PUSH
66664: LD_VAR 0 8
66668: PPUSH
66669: LD_INT 5
66671: PPUSH
66672: LD_INT 4
66674: PPUSH
66675: CALL_OW 273
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: ST_TO_ADDR
// for i = tmp downto 1 do
66692: LD_ADDR_VAR 0 4
66696: PUSH
66697: DOUBLE
66698: LD_VAR 0 6
66702: INC
66703: ST_TO_ADDR
66704: LD_INT 1
66706: PUSH
66707: FOR_DOWNTO
66708: IFFALSE 66809
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66710: LD_VAR 0 6
66714: PUSH
66715: LD_VAR 0 4
66719: ARRAY
66720: PUSH
66721: LD_INT 1
66723: ARRAY
66724: PPUSH
66725: LD_VAR 0 6
66729: PUSH
66730: LD_VAR 0 4
66734: ARRAY
66735: PUSH
66736: LD_INT 2
66738: ARRAY
66739: PPUSH
66740: CALL_OW 488
66744: NOT
66745: PUSH
66746: LD_VAR 0 6
66750: PUSH
66751: LD_VAR 0 4
66755: ARRAY
66756: PUSH
66757: LD_INT 1
66759: ARRAY
66760: PPUSH
66761: LD_VAR 0 6
66765: PUSH
66766: LD_VAR 0 4
66770: ARRAY
66771: PUSH
66772: LD_INT 2
66774: ARRAY
66775: PPUSH
66776: CALL_OW 428
66780: PUSH
66781: LD_INT 0
66783: NONEQUAL
66784: OR
66785: IFFALSE 66807
// tmp := Delete ( tmp , i ) ;
66787: LD_ADDR_VAR 0 6
66791: PUSH
66792: LD_VAR 0 6
66796: PPUSH
66797: LD_VAR 0 4
66801: PPUSH
66802: CALL_OW 3
66806: ST_TO_ADDR
66807: GO 66707
66809: POP
66810: POP
// j := GetClosestHex ( unit , tmp ) ;
66811: LD_ADDR_VAR 0 5
66815: PUSH
66816: LD_VAR 0 1
66820: PPUSH
66821: LD_VAR 0 6
66825: PPUSH
66826: CALL 66111 0 2
66830: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66831: LD_VAR 0 1
66835: PPUSH
66836: LD_VAR 0 5
66840: PUSH
66841: LD_INT 1
66843: ARRAY
66844: PPUSH
66845: LD_VAR 0 5
66849: PUSH
66850: LD_INT 2
66852: ARRAY
66853: PPUSH
66854: CALL_OW 111
// end ;
66858: LD_VAR 0 3
66862: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66863: LD_INT 0
66865: PPUSH
66866: PPUSH
66867: PPUSH
// uc_side = 0 ;
66868: LD_ADDR_OWVAR 20
66872: PUSH
66873: LD_INT 0
66875: ST_TO_ADDR
// uc_nation = 0 ;
66876: LD_ADDR_OWVAR 21
66880: PUSH
66881: LD_INT 0
66883: ST_TO_ADDR
// InitHc_All ( ) ;
66884: CALL_OW 584
// InitVc ;
66888: CALL_OW 20
// if mastodonts then
66892: LD_VAR 0 6
66896: IFFALSE 66963
// for i = 1 to mastodonts do
66898: LD_ADDR_VAR 0 11
66902: PUSH
66903: DOUBLE
66904: LD_INT 1
66906: DEC
66907: ST_TO_ADDR
66908: LD_VAR 0 6
66912: PUSH
66913: FOR_TO
66914: IFFALSE 66961
// begin vc_chassis := 31 ;
66916: LD_ADDR_OWVAR 37
66920: PUSH
66921: LD_INT 31
66923: ST_TO_ADDR
// vc_control := control_rider ;
66924: LD_ADDR_OWVAR 38
66928: PUSH
66929: LD_INT 4
66931: ST_TO_ADDR
// animal := CreateVehicle ;
66932: LD_ADDR_VAR 0 12
66936: PUSH
66937: CALL_OW 45
66941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66942: LD_VAR 0 12
66946: PPUSH
66947: LD_VAR 0 8
66951: PPUSH
66952: LD_INT 0
66954: PPUSH
66955: CALL 69098 0 3
// end ;
66959: GO 66913
66961: POP
66962: POP
// if horses then
66963: LD_VAR 0 5
66967: IFFALSE 67034
// for i = 1 to horses do
66969: LD_ADDR_VAR 0 11
66973: PUSH
66974: DOUBLE
66975: LD_INT 1
66977: DEC
66978: ST_TO_ADDR
66979: LD_VAR 0 5
66983: PUSH
66984: FOR_TO
66985: IFFALSE 67032
// begin hc_class := 21 ;
66987: LD_ADDR_OWVAR 28
66991: PUSH
66992: LD_INT 21
66994: ST_TO_ADDR
// hc_gallery :=  ;
66995: LD_ADDR_OWVAR 33
66999: PUSH
67000: LD_STRING 
67002: ST_TO_ADDR
// animal := CreateHuman ;
67003: LD_ADDR_VAR 0 12
67007: PUSH
67008: CALL_OW 44
67012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67013: LD_VAR 0 12
67017: PPUSH
67018: LD_VAR 0 8
67022: PPUSH
67023: LD_INT 0
67025: PPUSH
67026: CALL 69098 0 3
// end ;
67030: GO 66984
67032: POP
67033: POP
// if birds then
67034: LD_VAR 0 1
67038: IFFALSE 67105
// for i = 1 to birds do
67040: LD_ADDR_VAR 0 11
67044: PUSH
67045: DOUBLE
67046: LD_INT 1
67048: DEC
67049: ST_TO_ADDR
67050: LD_VAR 0 1
67054: PUSH
67055: FOR_TO
67056: IFFALSE 67103
// begin hc_class = 18 ;
67058: LD_ADDR_OWVAR 28
67062: PUSH
67063: LD_INT 18
67065: ST_TO_ADDR
// hc_gallery =  ;
67066: LD_ADDR_OWVAR 33
67070: PUSH
67071: LD_STRING 
67073: ST_TO_ADDR
// animal := CreateHuman ;
67074: LD_ADDR_VAR 0 12
67078: PUSH
67079: CALL_OW 44
67083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67084: LD_VAR 0 12
67088: PPUSH
67089: LD_VAR 0 8
67093: PPUSH
67094: LD_INT 0
67096: PPUSH
67097: CALL 69098 0 3
// end ;
67101: GO 67055
67103: POP
67104: POP
// if tigers then
67105: LD_VAR 0 2
67109: IFFALSE 67193
// for i = 1 to tigers do
67111: LD_ADDR_VAR 0 11
67115: PUSH
67116: DOUBLE
67117: LD_INT 1
67119: DEC
67120: ST_TO_ADDR
67121: LD_VAR 0 2
67125: PUSH
67126: FOR_TO
67127: IFFALSE 67191
// begin hc_class = class_tiger ;
67129: LD_ADDR_OWVAR 28
67133: PUSH
67134: LD_INT 14
67136: ST_TO_ADDR
// hc_gallery =  ;
67137: LD_ADDR_OWVAR 33
67141: PUSH
67142: LD_STRING 
67144: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67145: LD_ADDR_OWVAR 35
67149: PUSH
67150: LD_INT 7
67152: NEG
67153: PPUSH
67154: LD_INT 7
67156: PPUSH
67157: CALL_OW 12
67161: ST_TO_ADDR
// animal := CreateHuman ;
67162: LD_ADDR_VAR 0 12
67166: PUSH
67167: CALL_OW 44
67171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67172: LD_VAR 0 12
67176: PPUSH
67177: LD_VAR 0 8
67181: PPUSH
67182: LD_INT 0
67184: PPUSH
67185: CALL 69098 0 3
// end ;
67189: GO 67126
67191: POP
67192: POP
// if apemans then
67193: LD_VAR 0 3
67197: IFFALSE 67320
// for i = 1 to apemans do
67199: LD_ADDR_VAR 0 11
67203: PUSH
67204: DOUBLE
67205: LD_INT 1
67207: DEC
67208: ST_TO_ADDR
67209: LD_VAR 0 3
67213: PUSH
67214: FOR_TO
67215: IFFALSE 67318
// begin hc_class = class_apeman ;
67217: LD_ADDR_OWVAR 28
67221: PUSH
67222: LD_INT 12
67224: ST_TO_ADDR
// hc_gallery =  ;
67225: LD_ADDR_OWVAR 33
67229: PUSH
67230: LD_STRING 
67232: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67233: LD_ADDR_OWVAR 35
67237: PUSH
67238: LD_INT 2
67240: NEG
67241: PPUSH
67242: LD_INT 2
67244: PPUSH
67245: CALL_OW 12
67249: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67250: LD_ADDR_OWVAR 31
67254: PUSH
67255: LD_INT 1
67257: PPUSH
67258: LD_INT 3
67260: PPUSH
67261: CALL_OW 12
67265: PUSH
67266: LD_INT 1
67268: PPUSH
67269: LD_INT 3
67271: PPUSH
67272: CALL_OW 12
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: ST_TO_ADDR
// animal := CreateHuman ;
67289: LD_ADDR_VAR 0 12
67293: PUSH
67294: CALL_OW 44
67298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67299: LD_VAR 0 12
67303: PPUSH
67304: LD_VAR 0 8
67308: PPUSH
67309: LD_INT 0
67311: PPUSH
67312: CALL 69098 0 3
// end ;
67316: GO 67214
67318: POP
67319: POP
// if enchidnas then
67320: LD_VAR 0 4
67324: IFFALSE 67391
// for i = 1 to enchidnas do
67326: LD_ADDR_VAR 0 11
67330: PUSH
67331: DOUBLE
67332: LD_INT 1
67334: DEC
67335: ST_TO_ADDR
67336: LD_VAR 0 4
67340: PUSH
67341: FOR_TO
67342: IFFALSE 67389
// begin hc_class = 13 ;
67344: LD_ADDR_OWVAR 28
67348: PUSH
67349: LD_INT 13
67351: ST_TO_ADDR
// hc_gallery =  ;
67352: LD_ADDR_OWVAR 33
67356: PUSH
67357: LD_STRING 
67359: ST_TO_ADDR
// animal := CreateHuman ;
67360: LD_ADDR_VAR 0 12
67364: PUSH
67365: CALL_OW 44
67369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67370: LD_VAR 0 12
67374: PPUSH
67375: LD_VAR 0 8
67379: PPUSH
67380: LD_INT 0
67382: PPUSH
67383: CALL 69098 0 3
// end ;
67387: GO 67341
67389: POP
67390: POP
// if fishes then
67391: LD_VAR 0 7
67395: IFFALSE 67462
// for i = 1 to fishes do
67397: LD_ADDR_VAR 0 11
67401: PUSH
67402: DOUBLE
67403: LD_INT 1
67405: DEC
67406: ST_TO_ADDR
67407: LD_VAR 0 7
67411: PUSH
67412: FOR_TO
67413: IFFALSE 67460
// begin hc_class = 20 ;
67415: LD_ADDR_OWVAR 28
67419: PUSH
67420: LD_INT 20
67422: ST_TO_ADDR
// hc_gallery =  ;
67423: LD_ADDR_OWVAR 33
67427: PUSH
67428: LD_STRING 
67430: ST_TO_ADDR
// animal := CreateHuman ;
67431: LD_ADDR_VAR 0 12
67435: PUSH
67436: CALL_OW 44
67440: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67441: LD_VAR 0 12
67445: PPUSH
67446: LD_VAR 0 9
67450: PPUSH
67451: LD_INT 0
67453: PPUSH
67454: CALL 69098 0 3
// end ;
67458: GO 67412
67460: POP
67461: POP
// end ;
67462: LD_VAR 0 10
67466: RET
// export function WantHeal ( sci , unit ) ; begin
67467: LD_INT 0
67469: PPUSH
// if GetTaskList ( sci ) > 0 then
67470: LD_VAR 0 1
67474: PPUSH
67475: CALL_OW 437
67479: PUSH
67480: LD_INT 0
67482: GREATER
67483: IFFALSE 67553
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67485: LD_VAR 0 1
67489: PPUSH
67490: CALL_OW 437
67494: PUSH
67495: LD_INT 1
67497: ARRAY
67498: PUSH
67499: LD_INT 1
67501: ARRAY
67502: PUSH
67503: LD_STRING l
67505: EQUAL
67506: PUSH
67507: LD_VAR 0 1
67511: PPUSH
67512: CALL_OW 437
67516: PUSH
67517: LD_INT 1
67519: ARRAY
67520: PUSH
67521: LD_INT 4
67523: ARRAY
67524: PUSH
67525: LD_VAR 0 2
67529: EQUAL
67530: AND
67531: IFFALSE 67543
// result := true else
67533: LD_ADDR_VAR 0 3
67537: PUSH
67538: LD_INT 1
67540: ST_TO_ADDR
67541: GO 67551
// result := false ;
67543: LD_ADDR_VAR 0 3
67547: PUSH
67548: LD_INT 0
67550: ST_TO_ADDR
// end else
67551: GO 67561
// result := false ;
67553: LD_ADDR_VAR 0 3
67557: PUSH
67558: LD_INT 0
67560: ST_TO_ADDR
// end ;
67561: LD_VAR 0 3
67565: RET
// export function HealTarget ( sci ) ; begin
67566: LD_INT 0
67568: PPUSH
// if not sci then
67569: LD_VAR 0 1
67573: NOT
67574: IFFALSE 67578
// exit ;
67576: GO 67643
// result := 0 ;
67578: LD_ADDR_VAR 0 2
67582: PUSH
67583: LD_INT 0
67585: ST_TO_ADDR
// if GetTaskList ( sci ) then
67586: LD_VAR 0 1
67590: PPUSH
67591: CALL_OW 437
67595: IFFALSE 67643
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67597: LD_VAR 0 1
67601: PPUSH
67602: CALL_OW 437
67606: PUSH
67607: LD_INT 1
67609: ARRAY
67610: PUSH
67611: LD_INT 1
67613: ARRAY
67614: PUSH
67615: LD_STRING l
67617: EQUAL
67618: IFFALSE 67643
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67620: LD_ADDR_VAR 0 2
67624: PUSH
67625: LD_VAR 0 1
67629: PPUSH
67630: CALL_OW 437
67634: PUSH
67635: LD_INT 1
67637: ARRAY
67638: PUSH
67639: LD_INT 4
67641: ARRAY
67642: ST_TO_ADDR
// end ;
67643: LD_VAR 0 2
67647: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67648: LD_INT 0
67650: PPUSH
67651: PPUSH
67652: PPUSH
67653: PPUSH
// if not base_units then
67654: LD_VAR 0 1
67658: NOT
67659: IFFALSE 67663
// exit ;
67661: GO 67750
// result := false ;
67663: LD_ADDR_VAR 0 2
67667: PUSH
67668: LD_INT 0
67670: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67671: LD_ADDR_VAR 0 5
67675: PUSH
67676: LD_VAR 0 1
67680: PPUSH
67681: LD_INT 21
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PPUSH
67691: CALL_OW 72
67695: ST_TO_ADDR
// if not tmp then
67696: LD_VAR 0 5
67700: NOT
67701: IFFALSE 67705
// exit ;
67703: GO 67750
// for i in tmp do
67705: LD_ADDR_VAR 0 3
67709: PUSH
67710: LD_VAR 0 5
67714: PUSH
67715: FOR_IN
67716: IFFALSE 67748
// begin result := EnemyInRange ( i , 22 ) ;
67718: LD_ADDR_VAR 0 2
67722: PUSH
67723: LD_VAR 0 3
67727: PPUSH
67728: LD_INT 22
67730: PPUSH
67731: CALL 65986 0 2
67735: ST_TO_ADDR
// if result then
67736: LD_VAR 0 2
67740: IFFALSE 67746
// exit ;
67742: POP
67743: POP
67744: GO 67750
// end ;
67746: GO 67715
67748: POP
67749: POP
// end ;
67750: LD_VAR 0 2
67754: RET
// export function FilterByTag ( units , tag ) ; begin
67755: LD_INT 0
67757: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67758: LD_ADDR_VAR 0 3
67762: PUSH
67763: LD_VAR 0 1
67767: PPUSH
67768: LD_INT 120
67770: PUSH
67771: LD_VAR 0 2
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PPUSH
67780: CALL_OW 72
67784: ST_TO_ADDR
// end ;
67785: LD_VAR 0 3
67789: RET
// export function IsDriver ( un ) ; begin
67790: LD_INT 0
67792: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67793: LD_ADDR_VAR 0 2
67797: PUSH
67798: LD_VAR 0 1
67802: PUSH
67803: LD_INT 55
67805: PUSH
67806: EMPTY
67807: LIST
67808: PPUSH
67809: CALL_OW 69
67813: IN
67814: ST_TO_ADDR
// end ;
67815: LD_VAR 0 2
67819: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67820: LD_INT 0
67822: PPUSH
67823: PPUSH
// list := [ ] ;
67824: LD_ADDR_VAR 0 5
67828: PUSH
67829: EMPTY
67830: ST_TO_ADDR
// case d of 0 :
67831: LD_VAR 0 3
67835: PUSH
67836: LD_INT 0
67838: DOUBLE
67839: EQUAL
67840: IFTRUE 67844
67842: GO 67977
67844: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67845: LD_ADDR_VAR 0 5
67849: PUSH
67850: LD_VAR 0 1
67854: PUSH
67855: LD_INT 4
67857: MINUS
67858: PUSH
67859: LD_VAR 0 2
67863: PUSH
67864: LD_INT 4
67866: MINUS
67867: PUSH
67868: LD_INT 2
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: LIST
67875: PUSH
67876: LD_VAR 0 1
67880: PUSH
67881: LD_INT 3
67883: MINUS
67884: PUSH
67885: LD_VAR 0 2
67889: PUSH
67890: LD_INT 1
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: LIST
67897: PUSH
67898: LD_VAR 0 1
67902: PUSH
67903: LD_INT 4
67905: PLUS
67906: PUSH
67907: LD_VAR 0 2
67911: PUSH
67912: LD_INT 4
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: LIST
67919: PUSH
67920: LD_VAR 0 1
67924: PUSH
67925: LD_INT 3
67927: PLUS
67928: PUSH
67929: LD_VAR 0 2
67933: PUSH
67934: LD_INT 3
67936: PLUS
67937: PUSH
67938: LD_INT 5
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: LIST
67945: PUSH
67946: LD_VAR 0 1
67950: PUSH
67951: LD_VAR 0 2
67955: PUSH
67956: LD_INT 4
67958: PLUS
67959: PUSH
67960: LD_INT 0
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: LIST
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: ST_TO_ADDR
// end ; 1 :
67975: GO 68675
67977: LD_INT 1
67979: DOUBLE
67980: EQUAL
67981: IFTRUE 67985
67983: GO 68118
67985: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67986: LD_ADDR_VAR 0 5
67990: PUSH
67991: LD_VAR 0 1
67995: PUSH
67996: LD_VAR 0 2
68000: PUSH
68001: LD_INT 4
68003: MINUS
68004: PUSH
68005: LD_INT 3
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: LIST
68012: PUSH
68013: LD_VAR 0 1
68017: PUSH
68018: LD_INT 3
68020: MINUS
68021: PUSH
68022: LD_VAR 0 2
68026: PUSH
68027: LD_INT 3
68029: MINUS
68030: PUSH
68031: LD_INT 2
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: PUSH
68039: LD_VAR 0 1
68043: PUSH
68044: LD_INT 4
68046: MINUS
68047: PUSH
68048: LD_VAR 0 2
68052: PUSH
68053: LD_INT 1
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: LIST
68060: PUSH
68061: LD_VAR 0 1
68065: PUSH
68066: LD_VAR 0 2
68070: PUSH
68071: LD_INT 3
68073: PLUS
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: LIST
68082: PUSH
68083: LD_VAR 0 1
68087: PUSH
68088: LD_INT 4
68090: PLUS
68091: PUSH
68092: LD_VAR 0 2
68096: PUSH
68097: LD_INT 4
68099: PLUS
68100: PUSH
68101: LD_INT 5
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: LIST
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: ST_TO_ADDR
// end ; 2 :
68116: GO 68675
68118: LD_INT 2
68120: DOUBLE
68121: EQUAL
68122: IFTRUE 68126
68124: GO 68255
68126: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68127: LD_ADDR_VAR 0 5
68131: PUSH
68132: LD_VAR 0 1
68136: PUSH
68137: LD_VAR 0 2
68141: PUSH
68142: LD_INT 3
68144: MINUS
68145: PUSH
68146: LD_INT 3
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: PUSH
68154: LD_VAR 0 1
68158: PUSH
68159: LD_INT 4
68161: PLUS
68162: PUSH
68163: LD_VAR 0 2
68167: PUSH
68168: LD_INT 4
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: LIST
68175: PUSH
68176: LD_VAR 0 1
68180: PUSH
68181: LD_VAR 0 2
68185: PUSH
68186: LD_INT 4
68188: PLUS
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: PUSH
68198: LD_VAR 0 1
68202: PUSH
68203: LD_INT 3
68205: MINUS
68206: PUSH
68207: LD_VAR 0 2
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: LIST
68219: PUSH
68220: LD_VAR 0 1
68224: PUSH
68225: LD_INT 4
68227: MINUS
68228: PUSH
68229: LD_VAR 0 2
68233: PUSH
68234: LD_INT 4
68236: MINUS
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: ST_TO_ADDR
// end ; 3 :
68253: GO 68675
68255: LD_INT 3
68257: DOUBLE
68258: EQUAL
68259: IFTRUE 68263
68261: GO 68396
68263: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68264: LD_ADDR_VAR 0 5
68268: PUSH
68269: LD_VAR 0 1
68273: PUSH
68274: LD_INT 3
68276: PLUS
68277: PUSH
68278: LD_VAR 0 2
68282: PUSH
68283: LD_INT 4
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: LIST
68290: PUSH
68291: LD_VAR 0 1
68295: PUSH
68296: LD_INT 4
68298: PLUS
68299: PUSH
68300: LD_VAR 0 2
68304: PUSH
68305: LD_INT 4
68307: PLUS
68308: PUSH
68309: LD_INT 5
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: LIST
68316: PUSH
68317: LD_VAR 0 1
68321: PUSH
68322: LD_INT 4
68324: MINUS
68325: PUSH
68326: LD_VAR 0 2
68330: PUSH
68331: LD_INT 1
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: LIST
68338: PUSH
68339: LD_VAR 0 1
68343: PUSH
68344: LD_VAR 0 2
68348: PUSH
68349: LD_INT 4
68351: MINUS
68352: PUSH
68353: LD_INT 3
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: LIST
68360: PUSH
68361: LD_VAR 0 1
68365: PUSH
68366: LD_INT 3
68368: MINUS
68369: PUSH
68370: LD_VAR 0 2
68374: PUSH
68375: LD_INT 3
68377: MINUS
68378: PUSH
68379: LD_INT 2
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: LIST
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: ST_TO_ADDR
// end ; 4 :
68394: GO 68675
68396: LD_INT 4
68398: DOUBLE
68399: EQUAL
68400: IFTRUE 68404
68402: GO 68537
68404: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68405: LD_ADDR_VAR 0 5
68409: PUSH
68410: LD_VAR 0 1
68414: PUSH
68415: LD_VAR 0 2
68419: PUSH
68420: LD_INT 4
68422: PLUS
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: LIST
68431: PUSH
68432: LD_VAR 0 1
68436: PUSH
68437: LD_INT 3
68439: PLUS
68440: PUSH
68441: LD_VAR 0 2
68445: PUSH
68446: LD_INT 3
68448: PLUS
68449: PUSH
68450: LD_INT 5
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: LIST
68457: PUSH
68458: LD_VAR 0 1
68462: PUSH
68463: LD_INT 4
68465: PLUS
68466: PUSH
68467: LD_VAR 0 2
68471: PUSH
68472: LD_INT 4
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: LIST
68479: PUSH
68480: LD_VAR 0 1
68484: PUSH
68485: LD_VAR 0 2
68489: PUSH
68490: LD_INT 3
68492: MINUS
68493: PUSH
68494: LD_INT 3
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: PUSH
68502: LD_VAR 0 1
68506: PUSH
68507: LD_INT 4
68509: MINUS
68510: PUSH
68511: LD_VAR 0 2
68515: PUSH
68516: LD_INT 4
68518: MINUS
68519: PUSH
68520: LD_INT 2
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: LIST
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: ST_TO_ADDR
// end ; 5 :
68535: GO 68675
68537: LD_INT 5
68539: DOUBLE
68540: EQUAL
68541: IFTRUE 68545
68543: GO 68674
68545: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68546: LD_ADDR_VAR 0 5
68550: PUSH
68551: LD_VAR 0 1
68555: PUSH
68556: LD_INT 4
68558: MINUS
68559: PUSH
68560: LD_VAR 0 2
68564: PUSH
68565: LD_INT 1
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: LIST
68572: PUSH
68573: LD_VAR 0 1
68577: PUSH
68578: LD_VAR 0 2
68582: PUSH
68583: LD_INT 4
68585: MINUS
68586: PUSH
68587: LD_INT 3
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: LIST
68594: PUSH
68595: LD_VAR 0 1
68599: PUSH
68600: LD_INT 4
68602: PLUS
68603: PUSH
68604: LD_VAR 0 2
68608: PUSH
68609: LD_INT 4
68611: PLUS
68612: PUSH
68613: LD_INT 5
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: LIST
68620: PUSH
68621: LD_VAR 0 1
68625: PUSH
68626: LD_INT 3
68628: PLUS
68629: PUSH
68630: LD_VAR 0 2
68634: PUSH
68635: LD_INT 4
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: LIST
68642: PUSH
68643: LD_VAR 0 1
68647: PUSH
68648: LD_VAR 0 2
68652: PUSH
68653: LD_INT 3
68655: PLUS
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: LIST
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: ST_TO_ADDR
// end ; end ;
68672: GO 68675
68674: POP
// result := list ;
68675: LD_ADDR_VAR 0 4
68679: PUSH
68680: LD_VAR 0 5
68684: ST_TO_ADDR
// end ;
68685: LD_VAR 0 4
68689: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68690: LD_INT 0
68692: PPUSH
68693: PPUSH
68694: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68695: LD_VAR 0 1
68699: NOT
68700: PUSH
68701: LD_VAR 0 2
68705: PUSH
68706: LD_INT 1
68708: PUSH
68709: LD_INT 2
68711: PUSH
68712: LD_INT 3
68714: PUSH
68715: LD_INT 4
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: IN
68724: NOT
68725: OR
68726: IFFALSE 68730
// exit ;
68728: GO 68822
// tmp := [ ] ;
68730: LD_ADDR_VAR 0 5
68734: PUSH
68735: EMPTY
68736: ST_TO_ADDR
// for i in units do
68737: LD_ADDR_VAR 0 4
68741: PUSH
68742: LD_VAR 0 1
68746: PUSH
68747: FOR_IN
68748: IFFALSE 68791
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68750: LD_ADDR_VAR 0 5
68754: PUSH
68755: LD_VAR 0 5
68759: PPUSH
68760: LD_VAR 0 5
68764: PUSH
68765: LD_INT 1
68767: PLUS
68768: PPUSH
68769: LD_VAR 0 4
68773: PPUSH
68774: LD_VAR 0 2
68778: PPUSH
68779: CALL_OW 259
68783: PPUSH
68784: CALL_OW 2
68788: ST_TO_ADDR
68789: GO 68747
68791: POP
68792: POP
// if not tmp then
68793: LD_VAR 0 5
68797: NOT
68798: IFFALSE 68802
// exit ;
68800: GO 68822
// result := SortListByListDesc ( units , tmp ) ;
68802: LD_ADDR_VAR 0 3
68806: PUSH
68807: LD_VAR 0 1
68811: PPUSH
68812: LD_VAR 0 5
68816: PPUSH
68817: CALL_OW 77
68821: ST_TO_ADDR
// end ;
68822: LD_VAR 0 3
68826: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68827: LD_INT 0
68829: PPUSH
68830: PPUSH
68831: PPUSH
// result := false ;
68832: LD_ADDR_VAR 0 3
68836: PUSH
68837: LD_INT 0
68839: ST_TO_ADDR
// x := GetX ( building ) ;
68840: LD_ADDR_VAR 0 4
68844: PUSH
68845: LD_VAR 0 2
68849: PPUSH
68850: CALL_OW 250
68854: ST_TO_ADDR
// y := GetY ( building ) ;
68855: LD_ADDR_VAR 0 5
68859: PUSH
68860: LD_VAR 0 2
68864: PPUSH
68865: CALL_OW 251
68869: ST_TO_ADDR
// if not building or not x or not y then
68870: LD_VAR 0 2
68874: NOT
68875: PUSH
68876: LD_VAR 0 4
68880: NOT
68881: OR
68882: PUSH
68883: LD_VAR 0 5
68887: NOT
68888: OR
68889: IFFALSE 68893
// exit ;
68891: GO 68985
// if GetTaskList ( unit ) then
68893: LD_VAR 0 1
68897: PPUSH
68898: CALL_OW 437
68902: IFFALSE 68985
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68904: LD_STRING e
68906: PUSH
68907: LD_VAR 0 1
68911: PPUSH
68912: CALL_OW 437
68916: PUSH
68917: LD_INT 1
68919: ARRAY
68920: PUSH
68921: LD_INT 1
68923: ARRAY
68924: EQUAL
68925: PUSH
68926: LD_VAR 0 4
68930: PUSH
68931: LD_VAR 0 1
68935: PPUSH
68936: CALL_OW 437
68940: PUSH
68941: LD_INT 1
68943: ARRAY
68944: PUSH
68945: LD_INT 2
68947: ARRAY
68948: EQUAL
68949: AND
68950: PUSH
68951: LD_VAR 0 5
68955: PUSH
68956: LD_VAR 0 1
68960: PPUSH
68961: CALL_OW 437
68965: PUSH
68966: LD_INT 1
68968: ARRAY
68969: PUSH
68970: LD_INT 3
68972: ARRAY
68973: EQUAL
68974: AND
68975: IFFALSE 68985
// result := true end ;
68977: LD_ADDR_VAR 0 3
68981: PUSH
68982: LD_INT 1
68984: ST_TO_ADDR
// end ;
68985: LD_VAR 0 3
68989: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68990: LD_INT 0
68992: PPUSH
// result := false ;
68993: LD_ADDR_VAR 0 4
68997: PUSH
68998: LD_INT 0
69000: ST_TO_ADDR
// if GetTaskList ( unit ) then
69001: LD_VAR 0 1
69005: PPUSH
69006: CALL_OW 437
69010: IFFALSE 69093
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69012: LD_STRING M
69014: PUSH
69015: LD_VAR 0 1
69019: PPUSH
69020: CALL_OW 437
69024: PUSH
69025: LD_INT 1
69027: ARRAY
69028: PUSH
69029: LD_INT 1
69031: ARRAY
69032: EQUAL
69033: PUSH
69034: LD_VAR 0 2
69038: PUSH
69039: LD_VAR 0 1
69043: PPUSH
69044: CALL_OW 437
69048: PUSH
69049: LD_INT 1
69051: ARRAY
69052: PUSH
69053: LD_INT 2
69055: ARRAY
69056: EQUAL
69057: AND
69058: PUSH
69059: LD_VAR 0 3
69063: PUSH
69064: LD_VAR 0 1
69068: PPUSH
69069: CALL_OW 437
69073: PUSH
69074: LD_INT 1
69076: ARRAY
69077: PUSH
69078: LD_INT 3
69080: ARRAY
69081: EQUAL
69082: AND
69083: IFFALSE 69093
// result := true ;
69085: LD_ADDR_VAR 0 4
69089: PUSH
69090: LD_INT 1
69092: ST_TO_ADDR
// end ; end ;
69093: LD_VAR 0 4
69097: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69098: LD_INT 0
69100: PPUSH
69101: PPUSH
69102: PPUSH
69103: PPUSH
// if not unit or not area then
69104: LD_VAR 0 1
69108: NOT
69109: PUSH
69110: LD_VAR 0 2
69114: NOT
69115: OR
69116: IFFALSE 69120
// exit ;
69118: GO 69284
// tmp := AreaToList ( area , i ) ;
69120: LD_ADDR_VAR 0 6
69124: PUSH
69125: LD_VAR 0 2
69129: PPUSH
69130: LD_VAR 0 5
69134: PPUSH
69135: CALL_OW 517
69139: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69140: LD_ADDR_VAR 0 5
69144: PUSH
69145: DOUBLE
69146: LD_INT 1
69148: DEC
69149: ST_TO_ADDR
69150: LD_VAR 0 6
69154: PUSH
69155: LD_INT 1
69157: ARRAY
69158: PUSH
69159: FOR_TO
69160: IFFALSE 69282
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69162: LD_ADDR_VAR 0 7
69166: PUSH
69167: LD_VAR 0 6
69171: PUSH
69172: LD_INT 1
69174: ARRAY
69175: PUSH
69176: LD_VAR 0 5
69180: ARRAY
69181: PUSH
69182: LD_VAR 0 6
69186: PUSH
69187: LD_INT 2
69189: ARRAY
69190: PUSH
69191: LD_VAR 0 5
69195: ARRAY
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69201: LD_VAR 0 7
69205: PUSH
69206: LD_INT 1
69208: ARRAY
69209: PPUSH
69210: LD_VAR 0 7
69214: PUSH
69215: LD_INT 2
69217: ARRAY
69218: PPUSH
69219: CALL_OW 428
69223: PUSH
69224: LD_INT 0
69226: EQUAL
69227: IFFALSE 69280
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69229: LD_VAR 0 1
69233: PPUSH
69234: LD_VAR 0 7
69238: PUSH
69239: LD_INT 1
69241: ARRAY
69242: PPUSH
69243: LD_VAR 0 7
69247: PUSH
69248: LD_INT 2
69250: ARRAY
69251: PPUSH
69252: LD_VAR 0 3
69256: PPUSH
69257: CALL_OW 48
// result := IsPlaced ( unit ) ;
69261: LD_ADDR_VAR 0 4
69265: PUSH
69266: LD_VAR 0 1
69270: PPUSH
69271: CALL_OW 305
69275: ST_TO_ADDR
// exit ;
69276: POP
69277: POP
69278: GO 69284
// end ; end ;
69280: GO 69159
69282: POP
69283: POP
// end ;
69284: LD_VAR 0 4
69288: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69289: LD_INT 0
69291: PPUSH
69292: PPUSH
69293: PPUSH
// if not side or side > 8 then
69294: LD_VAR 0 1
69298: NOT
69299: PUSH
69300: LD_VAR 0 1
69304: PUSH
69305: LD_INT 8
69307: GREATER
69308: OR
69309: IFFALSE 69313
// exit ;
69311: GO 69500
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69313: LD_ADDR_VAR 0 4
69317: PUSH
69318: LD_INT 22
69320: PUSH
69321: LD_VAR 0 1
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 21
69332: PUSH
69333: LD_INT 3
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PPUSH
69344: CALL_OW 69
69348: ST_TO_ADDR
// if not tmp then
69349: LD_VAR 0 4
69353: NOT
69354: IFFALSE 69358
// exit ;
69356: GO 69500
// enable_addtolog := true ;
69358: LD_ADDR_OWVAR 81
69362: PUSH
69363: LD_INT 1
69365: ST_TO_ADDR
// AddToLog ( [ ) ;
69366: LD_STRING [
69368: PPUSH
69369: CALL_OW 561
// for i in tmp do
69373: LD_ADDR_VAR 0 3
69377: PUSH
69378: LD_VAR 0 4
69382: PUSH
69383: FOR_IN
69384: IFFALSE 69491
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69386: LD_STRING [
69388: PUSH
69389: LD_VAR 0 3
69393: PPUSH
69394: CALL_OW 266
69398: STR
69399: PUSH
69400: LD_STRING , 
69402: STR
69403: PUSH
69404: LD_VAR 0 3
69408: PPUSH
69409: CALL_OW 250
69413: STR
69414: PUSH
69415: LD_STRING , 
69417: STR
69418: PUSH
69419: LD_VAR 0 3
69423: PPUSH
69424: CALL_OW 251
69428: STR
69429: PUSH
69430: LD_STRING , 
69432: STR
69433: PUSH
69434: LD_VAR 0 3
69438: PPUSH
69439: CALL_OW 254
69443: STR
69444: PUSH
69445: LD_STRING , 
69447: STR
69448: PUSH
69449: LD_VAR 0 3
69453: PPUSH
69454: LD_INT 1
69456: PPUSH
69457: CALL_OW 268
69461: STR
69462: PUSH
69463: LD_STRING , 
69465: STR
69466: PUSH
69467: LD_VAR 0 3
69471: PPUSH
69472: LD_INT 2
69474: PPUSH
69475: CALL_OW 268
69479: STR
69480: PUSH
69481: LD_STRING ],
69483: STR
69484: PPUSH
69485: CALL_OW 561
// end ;
69489: GO 69383
69491: POP
69492: POP
// AddToLog ( ]; ) ;
69493: LD_STRING ];
69495: PPUSH
69496: CALL_OW 561
// end ;
69500: LD_VAR 0 2
69504: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69505: LD_INT 0
69507: PPUSH
69508: PPUSH
69509: PPUSH
69510: PPUSH
69511: PPUSH
// if not area or not rate or not max then
69512: LD_VAR 0 1
69516: NOT
69517: PUSH
69518: LD_VAR 0 2
69522: NOT
69523: OR
69524: PUSH
69525: LD_VAR 0 4
69529: NOT
69530: OR
69531: IFFALSE 69535
// exit ;
69533: GO 69724
// while 1 do
69535: LD_INT 1
69537: IFFALSE 69724
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69539: LD_ADDR_VAR 0 9
69543: PUSH
69544: LD_VAR 0 1
69548: PPUSH
69549: LD_INT 1
69551: PPUSH
69552: CALL_OW 287
69556: PUSH
69557: LD_INT 10
69559: MUL
69560: ST_TO_ADDR
// r := rate / 10 ;
69561: LD_ADDR_VAR 0 7
69565: PUSH
69566: LD_VAR 0 2
69570: PUSH
69571: LD_INT 10
69573: DIVREAL
69574: ST_TO_ADDR
// time := 1 1$00 ;
69575: LD_ADDR_VAR 0 8
69579: PUSH
69580: LD_INT 2100
69582: ST_TO_ADDR
// if amount < min then
69583: LD_VAR 0 9
69587: PUSH
69588: LD_VAR 0 3
69592: LESS
69593: IFFALSE 69611
// r := r * 2 else
69595: LD_ADDR_VAR 0 7
69599: PUSH
69600: LD_VAR 0 7
69604: PUSH
69605: LD_INT 2
69607: MUL
69608: ST_TO_ADDR
69609: GO 69637
// if amount > max then
69611: LD_VAR 0 9
69615: PUSH
69616: LD_VAR 0 4
69620: GREATER
69621: IFFALSE 69637
// r := r / 2 ;
69623: LD_ADDR_VAR 0 7
69627: PUSH
69628: LD_VAR 0 7
69632: PUSH
69633: LD_INT 2
69635: DIVREAL
69636: ST_TO_ADDR
// time := time / r ;
69637: LD_ADDR_VAR 0 8
69641: PUSH
69642: LD_VAR 0 8
69646: PUSH
69647: LD_VAR 0 7
69651: DIVREAL
69652: ST_TO_ADDR
// if time < 0 then
69653: LD_VAR 0 8
69657: PUSH
69658: LD_INT 0
69660: LESS
69661: IFFALSE 69678
// time := time * - 1 ;
69663: LD_ADDR_VAR 0 8
69667: PUSH
69668: LD_VAR 0 8
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: MUL
69677: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69678: LD_VAR 0 8
69682: PUSH
69683: LD_INT 35
69685: PPUSH
69686: LD_INT 875
69688: PPUSH
69689: CALL_OW 12
69693: PLUS
69694: PPUSH
69695: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69699: LD_INT 1
69701: PPUSH
69702: LD_INT 5
69704: PPUSH
69705: CALL_OW 12
69709: PPUSH
69710: LD_VAR 0 1
69714: PPUSH
69715: LD_INT 1
69717: PPUSH
69718: CALL_OW 55
// end ;
69722: GO 69535
// end ;
69724: LD_VAR 0 5
69728: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69729: LD_INT 0
69731: PPUSH
69732: PPUSH
69733: PPUSH
69734: PPUSH
69735: PPUSH
69736: PPUSH
69737: PPUSH
69738: PPUSH
// if not turrets or not factories then
69739: LD_VAR 0 1
69743: NOT
69744: PUSH
69745: LD_VAR 0 2
69749: NOT
69750: OR
69751: IFFALSE 69755
// exit ;
69753: GO 70062
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69755: LD_ADDR_VAR 0 10
69759: PUSH
69760: LD_INT 5
69762: PUSH
69763: LD_INT 6
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 2
69772: PUSH
69773: LD_INT 4
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 3
69782: PUSH
69783: LD_INT 5
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 24
69797: PUSH
69798: LD_INT 25
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 23
69807: PUSH
69808: LD_INT 27
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 42
69821: PUSH
69822: LD_INT 43
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 44
69831: PUSH
69832: LD_INT 46
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 45
69841: PUSH
69842: LD_INT 47
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: LIST
69858: ST_TO_ADDR
// result := [ ] ;
69859: LD_ADDR_VAR 0 3
69863: PUSH
69864: EMPTY
69865: ST_TO_ADDR
// for i in turrets do
69866: LD_ADDR_VAR 0 4
69870: PUSH
69871: LD_VAR 0 1
69875: PUSH
69876: FOR_IN
69877: IFFALSE 70060
// begin nat := GetNation ( i ) ;
69879: LD_ADDR_VAR 0 7
69883: PUSH
69884: LD_VAR 0 4
69888: PPUSH
69889: CALL_OW 248
69893: ST_TO_ADDR
// weapon := 0 ;
69894: LD_ADDR_VAR 0 8
69898: PUSH
69899: LD_INT 0
69901: ST_TO_ADDR
// if not nat then
69902: LD_VAR 0 7
69906: NOT
69907: IFFALSE 69911
// continue ;
69909: GO 69876
// for j in list [ nat ] do
69911: LD_ADDR_VAR 0 5
69915: PUSH
69916: LD_VAR 0 10
69920: PUSH
69921: LD_VAR 0 7
69925: ARRAY
69926: PUSH
69927: FOR_IN
69928: IFFALSE 69969
// if GetBWeapon ( i ) = j [ 1 ] then
69930: LD_VAR 0 4
69934: PPUSH
69935: CALL_OW 269
69939: PUSH
69940: LD_VAR 0 5
69944: PUSH
69945: LD_INT 1
69947: ARRAY
69948: EQUAL
69949: IFFALSE 69967
// begin weapon := j [ 2 ] ;
69951: LD_ADDR_VAR 0 8
69955: PUSH
69956: LD_VAR 0 5
69960: PUSH
69961: LD_INT 2
69963: ARRAY
69964: ST_TO_ADDR
// break ;
69965: GO 69969
// end ;
69967: GO 69927
69969: POP
69970: POP
// if not weapon then
69971: LD_VAR 0 8
69975: NOT
69976: IFFALSE 69980
// continue ;
69978: GO 69876
// for k in factories do
69980: LD_ADDR_VAR 0 6
69984: PUSH
69985: LD_VAR 0 2
69989: PUSH
69990: FOR_IN
69991: IFFALSE 70056
// begin weapons := AvailableWeaponList ( k ) ;
69993: LD_ADDR_VAR 0 9
69997: PUSH
69998: LD_VAR 0 6
70002: PPUSH
70003: CALL_OW 478
70007: ST_TO_ADDR
// if not weapons then
70008: LD_VAR 0 9
70012: NOT
70013: IFFALSE 70017
// continue ;
70015: GO 69990
// if weapon in weapons then
70017: LD_VAR 0 8
70021: PUSH
70022: LD_VAR 0 9
70026: IN
70027: IFFALSE 70054
// begin result := [ i , weapon ] ;
70029: LD_ADDR_VAR 0 3
70033: PUSH
70034: LD_VAR 0 4
70038: PUSH
70039: LD_VAR 0 8
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: ST_TO_ADDR
// exit ;
70048: POP
70049: POP
70050: POP
70051: POP
70052: GO 70062
// end ; end ;
70054: GO 69990
70056: POP
70057: POP
// end ;
70058: GO 69876
70060: POP
70061: POP
// end ;
70062: LD_VAR 0 3
70066: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70067: LD_INT 0
70069: PPUSH
// if not side or side > 8 then
70070: LD_VAR 0 3
70074: NOT
70075: PUSH
70076: LD_VAR 0 3
70080: PUSH
70081: LD_INT 8
70083: GREATER
70084: OR
70085: IFFALSE 70089
// exit ;
70087: GO 70148
// if not range then
70089: LD_VAR 0 4
70093: NOT
70094: IFFALSE 70105
// range := - 12 ;
70096: LD_ADDR_VAR 0 4
70100: PUSH
70101: LD_INT 12
70103: NEG
70104: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70105: LD_VAR 0 1
70109: PPUSH
70110: LD_VAR 0 2
70114: PPUSH
70115: LD_VAR 0 3
70119: PPUSH
70120: LD_VAR 0 4
70124: PPUSH
70125: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70129: LD_VAR 0 1
70133: PPUSH
70134: LD_VAR 0 2
70138: PPUSH
70139: LD_VAR 0 3
70143: PPUSH
70144: CALL_OW 331
// end ;
70148: LD_VAR 0 5
70152: RET
// export function Video ( mode ) ; begin
70153: LD_INT 0
70155: PPUSH
// ingame_video = mode ;
70156: LD_ADDR_OWVAR 52
70160: PUSH
70161: LD_VAR 0 1
70165: ST_TO_ADDR
// interface_hidden = mode ;
70166: LD_ADDR_OWVAR 54
70170: PUSH
70171: LD_VAR 0 1
70175: ST_TO_ADDR
// end ;
70176: LD_VAR 0 2
70180: RET
// export function Join ( array , element ) ; begin
70181: LD_INT 0
70183: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70184: LD_ADDR_VAR 0 3
70188: PUSH
70189: LD_VAR 0 1
70193: PPUSH
70194: LD_VAR 0 1
70198: PUSH
70199: LD_INT 1
70201: PLUS
70202: PPUSH
70203: LD_VAR 0 2
70207: PPUSH
70208: CALL_OW 1
70212: ST_TO_ADDR
// end ;
70213: LD_VAR 0 3
70217: RET
// export function JoinUnion ( array , element ) ; begin
70218: LD_INT 0
70220: PPUSH
// result := array union element ;
70221: LD_ADDR_VAR 0 3
70225: PUSH
70226: LD_VAR 0 1
70230: PUSH
70231: LD_VAR 0 2
70235: UNION
70236: ST_TO_ADDR
// end ;
70237: LD_VAR 0 3
70241: RET
// export function GetBehemoths ( side ) ; begin
70242: LD_INT 0
70244: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70245: LD_ADDR_VAR 0 2
70249: PUSH
70250: LD_INT 22
70252: PUSH
70253: LD_VAR 0 1
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 31
70264: PUSH
70265: LD_INT 25
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PPUSH
70276: CALL_OW 69
70280: ST_TO_ADDR
// end ;
70281: LD_VAR 0 2
70285: RET
// export function Shuffle ( array ) ; var i , index ; begin
70286: LD_INT 0
70288: PPUSH
70289: PPUSH
70290: PPUSH
// result := [ ] ;
70291: LD_ADDR_VAR 0 2
70295: PUSH
70296: EMPTY
70297: ST_TO_ADDR
// if not array then
70298: LD_VAR 0 1
70302: NOT
70303: IFFALSE 70307
// exit ;
70305: GO 70406
// Randomize ;
70307: CALL_OW 10
// for i = array downto 1 do
70311: LD_ADDR_VAR 0 3
70315: PUSH
70316: DOUBLE
70317: LD_VAR 0 1
70321: INC
70322: ST_TO_ADDR
70323: LD_INT 1
70325: PUSH
70326: FOR_DOWNTO
70327: IFFALSE 70404
// begin index := rand ( 1 , array ) ;
70329: LD_ADDR_VAR 0 4
70333: PUSH
70334: LD_INT 1
70336: PPUSH
70337: LD_VAR 0 1
70341: PPUSH
70342: CALL_OW 12
70346: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70347: LD_ADDR_VAR 0 2
70351: PUSH
70352: LD_VAR 0 2
70356: PPUSH
70357: LD_VAR 0 2
70361: PUSH
70362: LD_INT 1
70364: PLUS
70365: PPUSH
70366: LD_VAR 0 1
70370: PUSH
70371: LD_VAR 0 4
70375: ARRAY
70376: PPUSH
70377: CALL_OW 2
70381: ST_TO_ADDR
// array := Delete ( array , index ) ;
70382: LD_ADDR_VAR 0 1
70386: PUSH
70387: LD_VAR 0 1
70391: PPUSH
70392: LD_VAR 0 4
70396: PPUSH
70397: CALL_OW 3
70401: ST_TO_ADDR
// end ;
70402: GO 70326
70404: POP
70405: POP
// end ;
70406: LD_VAR 0 2
70410: RET
// export function GetBaseMaterials ( base ) ; begin
70411: LD_INT 0
70413: PPUSH
// result := [ 0 , 0 , 0 ] ;
70414: LD_ADDR_VAR 0 2
70418: PUSH
70419: LD_INT 0
70421: PUSH
70422: LD_INT 0
70424: PUSH
70425: LD_INT 0
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: LIST
70432: ST_TO_ADDR
// if not base then
70433: LD_VAR 0 1
70437: NOT
70438: IFFALSE 70442
// exit ;
70440: GO 70491
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70442: LD_ADDR_VAR 0 2
70446: PUSH
70447: LD_VAR 0 1
70451: PPUSH
70452: LD_INT 1
70454: PPUSH
70455: CALL_OW 275
70459: PUSH
70460: LD_VAR 0 1
70464: PPUSH
70465: LD_INT 2
70467: PPUSH
70468: CALL_OW 275
70472: PUSH
70473: LD_VAR 0 1
70477: PPUSH
70478: LD_INT 3
70480: PPUSH
70481: CALL_OW 275
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: LIST
70490: ST_TO_ADDR
// end ;
70491: LD_VAR 0 2
70495: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70496: LD_INT 0
70498: PPUSH
70499: PPUSH
// result := array ;
70500: LD_ADDR_VAR 0 3
70504: PUSH
70505: LD_VAR 0 1
70509: ST_TO_ADDR
// if size > 0 then
70510: LD_VAR 0 2
70514: PUSH
70515: LD_INT 0
70517: GREATER
70518: IFFALSE 70564
// for i := array downto size do
70520: LD_ADDR_VAR 0 4
70524: PUSH
70525: DOUBLE
70526: LD_VAR 0 1
70530: INC
70531: ST_TO_ADDR
70532: LD_VAR 0 2
70536: PUSH
70537: FOR_DOWNTO
70538: IFFALSE 70562
// result := Delete ( result , result ) ;
70540: LD_ADDR_VAR 0 3
70544: PUSH
70545: LD_VAR 0 3
70549: PPUSH
70550: LD_VAR 0 3
70554: PPUSH
70555: CALL_OW 3
70559: ST_TO_ADDR
70560: GO 70537
70562: POP
70563: POP
// end ;
70564: LD_VAR 0 3
70568: RET
// export function ComExit ( unit ) ; var tmp ; begin
70569: LD_INT 0
70571: PPUSH
70572: PPUSH
// if not IsInUnit ( unit ) then
70573: LD_VAR 0 1
70577: PPUSH
70578: CALL_OW 310
70582: NOT
70583: IFFALSE 70587
// exit ;
70585: GO 70647
// tmp := IsInUnit ( unit ) ;
70587: LD_ADDR_VAR 0 3
70591: PUSH
70592: LD_VAR 0 1
70596: PPUSH
70597: CALL_OW 310
70601: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70602: LD_VAR 0 3
70606: PPUSH
70607: CALL_OW 247
70611: PUSH
70612: LD_INT 2
70614: EQUAL
70615: IFFALSE 70628
// ComExitVehicle ( unit ) else
70617: LD_VAR 0 1
70621: PPUSH
70622: CALL_OW 121
70626: GO 70637
// ComExitBuilding ( unit ) ;
70628: LD_VAR 0 1
70632: PPUSH
70633: CALL_OW 122
// result := tmp ;
70637: LD_ADDR_VAR 0 2
70641: PUSH
70642: LD_VAR 0 3
70646: ST_TO_ADDR
// end ;
70647: LD_VAR 0 2
70651: RET
// export function ComExitAll ( units ) ; var i ; begin
70652: LD_INT 0
70654: PPUSH
70655: PPUSH
// if not units then
70656: LD_VAR 0 1
70660: NOT
70661: IFFALSE 70665
// exit ;
70663: GO 70691
// for i in units do
70665: LD_ADDR_VAR 0 3
70669: PUSH
70670: LD_VAR 0 1
70674: PUSH
70675: FOR_IN
70676: IFFALSE 70689
// ComExit ( i ) ;
70678: LD_VAR 0 3
70682: PPUSH
70683: CALL 70569 0 1
70687: GO 70675
70689: POP
70690: POP
// end ;
70691: LD_VAR 0 2
70695: RET
// export function ResetHc ; begin
70696: LD_INT 0
70698: PPUSH
// InitHc ;
70699: CALL_OW 19
// hc_importance := 0 ;
70703: LD_ADDR_OWVAR 32
70707: PUSH
70708: LD_INT 0
70710: ST_TO_ADDR
// end ;
70711: LD_VAR 0 1
70715: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70716: LD_INT 0
70718: PPUSH
70719: PPUSH
70720: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70721: LD_ADDR_VAR 0 6
70725: PUSH
70726: LD_VAR 0 1
70730: PUSH
70731: LD_VAR 0 3
70735: PLUS
70736: PUSH
70737: LD_INT 2
70739: DIV
70740: ST_TO_ADDR
// if _x < 0 then
70741: LD_VAR 0 6
70745: PUSH
70746: LD_INT 0
70748: LESS
70749: IFFALSE 70766
// _x := _x * - 1 ;
70751: LD_ADDR_VAR 0 6
70755: PUSH
70756: LD_VAR 0 6
70760: PUSH
70761: LD_INT 1
70763: NEG
70764: MUL
70765: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70766: LD_ADDR_VAR 0 7
70770: PUSH
70771: LD_VAR 0 2
70775: PUSH
70776: LD_VAR 0 4
70780: PLUS
70781: PUSH
70782: LD_INT 2
70784: DIV
70785: ST_TO_ADDR
// if _y < 0 then
70786: LD_VAR 0 7
70790: PUSH
70791: LD_INT 0
70793: LESS
70794: IFFALSE 70811
// _y := _y * - 1 ;
70796: LD_ADDR_VAR 0 7
70800: PUSH
70801: LD_VAR 0 7
70805: PUSH
70806: LD_INT 1
70808: NEG
70809: MUL
70810: ST_TO_ADDR
// result := [ _x , _y ] ;
70811: LD_ADDR_VAR 0 5
70815: PUSH
70816: LD_VAR 0 6
70820: PUSH
70821: LD_VAR 0 7
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: ST_TO_ADDR
// end ;
70830: LD_VAR 0 5
70834: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70835: LD_INT 0
70837: PPUSH
70838: PPUSH
70839: PPUSH
70840: PPUSH
// task := GetTaskList ( unit ) ;
70841: LD_ADDR_VAR 0 7
70845: PUSH
70846: LD_VAR 0 1
70850: PPUSH
70851: CALL_OW 437
70855: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70856: LD_VAR 0 7
70860: NOT
70861: PUSH
70862: LD_VAR 0 1
70866: PPUSH
70867: LD_VAR 0 2
70871: PPUSH
70872: CALL_OW 308
70876: NOT
70877: AND
70878: IFFALSE 70882
// exit ;
70880: GO 71000
// if IsInArea ( unit , area ) then
70882: LD_VAR 0 1
70886: PPUSH
70887: LD_VAR 0 2
70891: PPUSH
70892: CALL_OW 308
70896: IFFALSE 70914
// begin ComMoveToArea ( unit , goAway ) ;
70898: LD_VAR 0 1
70902: PPUSH
70903: LD_VAR 0 3
70907: PPUSH
70908: CALL_OW 113
// exit ;
70912: GO 71000
// end ; if task [ 1 ] [ 1 ] <> M then
70914: LD_VAR 0 7
70918: PUSH
70919: LD_INT 1
70921: ARRAY
70922: PUSH
70923: LD_INT 1
70925: ARRAY
70926: PUSH
70927: LD_STRING M
70929: NONEQUAL
70930: IFFALSE 70934
// exit ;
70932: GO 71000
// x := task [ 1 ] [ 2 ] ;
70934: LD_ADDR_VAR 0 5
70938: PUSH
70939: LD_VAR 0 7
70943: PUSH
70944: LD_INT 1
70946: ARRAY
70947: PUSH
70948: LD_INT 2
70950: ARRAY
70951: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70952: LD_ADDR_VAR 0 6
70956: PUSH
70957: LD_VAR 0 7
70961: PUSH
70962: LD_INT 1
70964: ARRAY
70965: PUSH
70966: LD_INT 3
70968: ARRAY
70969: ST_TO_ADDR
// if InArea ( x , y , area ) then
70970: LD_VAR 0 5
70974: PPUSH
70975: LD_VAR 0 6
70979: PPUSH
70980: LD_VAR 0 2
70984: PPUSH
70985: CALL_OW 309
70989: IFFALSE 71000
// ComStop ( unit ) ;
70991: LD_VAR 0 1
70995: PPUSH
70996: CALL_OW 141
// end ;
71000: LD_VAR 0 4
71004: RET
// export function Abs ( value ) ; begin
71005: LD_INT 0
71007: PPUSH
// result := value ;
71008: LD_ADDR_VAR 0 2
71012: PUSH
71013: LD_VAR 0 1
71017: ST_TO_ADDR
// if value < 0 then
71018: LD_VAR 0 1
71022: PUSH
71023: LD_INT 0
71025: LESS
71026: IFFALSE 71043
// result := value * - 1 ;
71028: LD_ADDR_VAR 0 2
71032: PUSH
71033: LD_VAR 0 1
71037: PUSH
71038: LD_INT 1
71040: NEG
71041: MUL
71042: ST_TO_ADDR
// end ;
71043: LD_VAR 0 2
71047: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71048: LD_INT 0
71050: PPUSH
71051: PPUSH
71052: PPUSH
71053: PPUSH
71054: PPUSH
71055: PPUSH
71056: PPUSH
71057: PPUSH
// if not unit or not building then
71058: LD_VAR 0 1
71062: NOT
71063: PUSH
71064: LD_VAR 0 2
71068: NOT
71069: OR
71070: IFFALSE 71074
// exit ;
71072: GO 71300
// x := GetX ( building ) ;
71074: LD_ADDR_VAR 0 4
71078: PUSH
71079: LD_VAR 0 2
71083: PPUSH
71084: CALL_OW 250
71088: ST_TO_ADDR
// y := GetY ( building ) ;
71089: LD_ADDR_VAR 0 6
71093: PUSH
71094: LD_VAR 0 2
71098: PPUSH
71099: CALL_OW 251
71103: ST_TO_ADDR
// d := GetDir ( building ) ;
71104: LD_ADDR_VAR 0 8
71108: PUSH
71109: LD_VAR 0 2
71113: PPUSH
71114: CALL_OW 254
71118: ST_TO_ADDR
// r := 4 ;
71119: LD_ADDR_VAR 0 9
71123: PUSH
71124: LD_INT 4
71126: ST_TO_ADDR
// for i := 1 to 5 do
71127: LD_ADDR_VAR 0 10
71131: PUSH
71132: DOUBLE
71133: LD_INT 1
71135: DEC
71136: ST_TO_ADDR
71137: LD_INT 5
71139: PUSH
71140: FOR_TO
71141: IFFALSE 71298
// begin _x := ShiftX ( x , d , r + i ) ;
71143: LD_ADDR_VAR 0 5
71147: PUSH
71148: LD_VAR 0 4
71152: PPUSH
71153: LD_VAR 0 8
71157: PPUSH
71158: LD_VAR 0 9
71162: PUSH
71163: LD_VAR 0 10
71167: PLUS
71168: PPUSH
71169: CALL_OW 272
71173: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71174: LD_ADDR_VAR 0 7
71178: PUSH
71179: LD_VAR 0 6
71183: PPUSH
71184: LD_VAR 0 8
71188: PPUSH
71189: LD_VAR 0 9
71193: PUSH
71194: LD_VAR 0 10
71198: PLUS
71199: PPUSH
71200: CALL_OW 273
71204: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71205: LD_VAR 0 5
71209: PPUSH
71210: LD_VAR 0 7
71214: PPUSH
71215: CALL_OW 488
71219: PUSH
71220: LD_VAR 0 5
71224: PPUSH
71225: LD_VAR 0 7
71229: PPUSH
71230: CALL_OW 428
71234: PPUSH
71235: CALL_OW 247
71239: PUSH
71240: LD_INT 3
71242: PUSH
71243: LD_INT 2
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: IN
71250: NOT
71251: AND
71252: IFFALSE 71296
// begin ComMoveXY ( unit , _x , _y ) ;
71254: LD_VAR 0 1
71258: PPUSH
71259: LD_VAR 0 5
71263: PPUSH
71264: LD_VAR 0 7
71268: PPUSH
71269: CALL_OW 111
// result := [ _x , _y ] ;
71273: LD_ADDR_VAR 0 3
71277: PUSH
71278: LD_VAR 0 5
71282: PUSH
71283: LD_VAR 0 7
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: ST_TO_ADDR
// exit ;
71292: POP
71293: POP
71294: GO 71300
// end ; end ;
71296: GO 71140
71298: POP
71299: POP
// end ;
71300: LD_VAR 0 3
71304: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71305: LD_INT 0
71307: PPUSH
71308: PPUSH
71309: PPUSH
// result := 0 ;
71310: LD_ADDR_VAR 0 3
71314: PUSH
71315: LD_INT 0
71317: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71318: LD_VAR 0 1
71322: PUSH
71323: LD_INT 0
71325: LESS
71326: PUSH
71327: LD_VAR 0 1
71331: PUSH
71332: LD_INT 8
71334: GREATER
71335: OR
71336: PUSH
71337: LD_VAR 0 2
71341: PUSH
71342: LD_INT 0
71344: LESS
71345: OR
71346: PUSH
71347: LD_VAR 0 2
71351: PUSH
71352: LD_INT 8
71354: GREATER
71355: OR
71356: IFFALSE 71360
// exit ;
71358: GO 71435
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71360: LD_ADDR_VAR 0 4
71364: PUSH
71365: LD_INT 22
71367: PUSH
71368: LD_VAR 0 2
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PPUSH
71377: CALL_OW 69
71381: PUSH
71382: FOR_IN
71383: IFFALSE 71433
// begin un := UnitShoot ( i ) ;
71385: LD_ADDR_VAR 0 5
71389: PUSH
71390: LD_VAR 0 4
71394: PPUSH
71395: CALL_OW 504
71399: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71400: LD_VAR 0 5
71404: PPUSH
71405: CALL_OW 255
71409: PUSH
71410: LD_VAR 0 1
71414: EQUAL
71415: IFFALSE 71431
// begin result := un ;
71417: LD_ADDR_VAR 0 3
71421: PUSH
71422: LD_VAR 0 5
71426: ST_TO_ADDR
// exit ;
71427: POP
71428: POP
71429: GO 71435
// end ; end ;
71431: GO 71382
71433: POP
71434: POP
// end ;
71435: LD_VAR 0 3
71439: RET
// export function GetCargoBay ( units ) ; begin
71440: LD_INT 0
71442: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71443: LD_ADDR_VAR 0 2
71447: PUSH
71448: LD_VAR 0 1
71452: PPUSH
71453: LD_INT 2
71455: PUSH
71456: LD_INT 34
71458: PUSH
71459: LD_INT 12
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 34
71468: PUSH
71469: LD_INT 51
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 34
71478: PUSH
71479: LD_INT 32
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 34
71488: PUSH
71489: LD_EXP 45
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: PPUSH
71505: CALL_OW 72
71509: ST_TO_ADDR
// end ;
71510: LD_VAR 0 2
71514: RET
// export function Negate ( value ) ; begin
71515: LD_INT 0
71517: PPUSH
// result := not value ;
71518: LD_ADDR_VAR 0 2
71522: PUSH
71523: LD_VAR 0 1
71527: NOT
71528: ST_TO_ADDR
// end ;
71529: LD_VAR 0 2
71533: RET
// export function Inc ( value ) ; begin
71534: LD_INT 0
71536: PPUSH
// result := value + 1 ;
71537: LD_ADDR_VAR 0 2
71541: PUSH
71542: LD_VAR 0 1
71546: PUSH
71547: LD_INT 1
71549: PLUS
71550: ST_TO_ADDR
// end ;
71551: LD_VAR 0 2
71555: RET
// export function Dec ( value ) ; begin
71556: LD_INT 0
71558: PPUSH
// result := value - 1 ;
71559: LD_ADDR_VAR 0 2
71563: PUSH
71564: LD_VAR 0 1
71568: PUSH
71569: LD_INT 1
71571: MINUS
71572: ST_TO_ADDR
// end ;
71573: LD_VAR 0 2
71577: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71578: LD_INT 0
71580: PPUSH
71581: PPUSH
71582: PPUSH
71583: PPUSH
71584: PPUSH
71585: PPUSH
71586: PPUSH
71587: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71588: LD_VAR 0 1
71592: PPUSH
71593: LD_VAR 0 2
71597: PPUSH
71598: CALL_OW 488
71602: NOT
71603: PUSH
71604: LD_VAR 0 3
71608: PPUSH
71609: LD_VAR 0 4
71613: PPUSH
71614: CALL_OW 488
71618: NOT
71619: OR
71620: IFFALSE 71633
// begin result := - 1 ;
71622: LD_ADDR_VAR 0 5
71626: PUSH
71627: LD_INT 1
71629: NEG
71630: ST_TO_ADDR
// exit ;
71631: GO 71868
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71633: LD_ADDR_VAR 0 12
71637: PUSH
71638: LD_VAR 0 1
71642: PPUSH
71643: LD_VAR 0 2
71647: PPUSH
71648: LD_VAR 0 3
71652: PPUSH
71653: LD_VAR 0 4
71657: PPUSH
71658: CALL 70716 0 4
71662: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71663: LD_ADDR_VAR 0 11
71667: PUSH
71668: LD_VAR 0 1
71672: PPUSH
71673: LD_VAR 0 2
71677: PPUSH
71678: LD_VAR 0 12
71682: PUSH
71683: LD_INT 1
71685: ARRAY
71686: PPUSH
71687: LD_VAR 0 12
71691: PUSH
71692: LD_INT 2
71694: ARRAY
71695: PPUSH
71696: CALL_OW 298
71700: ST_TO_ADDR
// distance := 9999 ;
71701: LD_ADDR_VAR 0 10
71705: PUSH
71706: LD_INT 9999
71708: ST_TO_ADDR
// for i := 0 to 5 do
71709: LD_ADDR_VAR 0 6
71713: PUSH
71714: DOUBLE
71715: LD_INT 0
71717: DEC
71718: ST_TO_ADDR
71719: LD_INT 5
71721: PUSH
71722: FOR_TO
71723: IFFALSE 71866
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71725: LD_ADDR_VAR 0 7
71729: PUSH
71730: LD_VAR 0 1
71734: PPUSH
71735: LD_VAR 0 6
71739: PPUSH
71740: LD_VAR 0 11
71744: PPUSH
71745: CALL_OW 272
71749: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71750: LD_ADDR_VAR 0 8
71754: PUSH
71755: LD_VAR 0 2
71759: PPUSH
71760: LD_VAR 0 6
71764: PPUSH
71765: LD_VAR 0 11
71769: PPUSH
71770: CALL_OW 273
71774: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71775: LD_VAR 0 7
71779: PPUSH
71780: LD_VAR 0 8
71784: PPUSH
71785: CALL_OW 488
71789: NOT
71790: IFFALSE 71794
// continue ;
71792: GO 71722
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71794: LD_ADDR_VAR 0 9
71798: PUSH
71799: LD_VAR 0 12
71803: PUSH
71804: LD_INT 1
71806: ARRAY
71807: PPUSH
71808: LD_VAR 0 12
71812: PUSH
71813: LD_INT 2
71815: ARRAY
71816: PPUSH
71817: LD_VAR 0 7
71821: PPUSH
71822: LD_VAR 0 8
71826: PPUSH
71827: CALL_OW 298
71831: ST_TO_ADDR
// if tmp < distance then
71832: LD_VAR 0 9
71836: PUSH
71837: LD_VAR 0 10
71841: LESS
71842: IFFALSE 71864
// begin result := i ;
71844: LD_ADDR_VAR 0 5
71848: PUSH
71849: LD_VAR 0 6
71853: ST_TO_ADDR
// distance := tmp ;
71854: LD_ADDR_VAR 0 10
71858: PUSH
71859: LD_VAR 0 9
71863: ST_TO_ADDR
// end ; end ;
71864: GO 71722
71866: POP
71867: POP
// end ;
71868: LD_VAR 0 5
71872: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71873: LD_INT 0
71875: PPUSH
71876: PPUSH
// if not driver or not IsInUnit ( driver ) then
71877: LD_VAR 0 1
71881: NOT
71882: PUSH
71883: LD_VAR 0 1
71887: PPUSH
71888: CALL_OW 310
71892: NOT
71893: OR
71894: IFFALSE 71898
// exit ;
71896: GO 71988
// vehicle := IsInUnit ( driver ) ;
71898: LD_ADDR_VAR 0 3
71902: PUSH
71903: LD_VAR 0 1
71907: PPUSH
71908: CALL_OW 310
71912: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71913: LD_VAR 0 1
71917: PPUSH
71918: LD_STRING \
71920: PUSH
71921: LD_INT 0
71923: PUSH
71924: LD_INT 0
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: LD_INT 0
71932: PUSH
71933: LD_INT 0
71935: PUSH
71936: LD_INT 0
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: PUSH
71948: LD_STRING E
71950: PUSH
71951: LD_INT 0
71953: PUSH
71954: LD_INT 0
71956: PUSH
71957: LD_VAR 0 3
71961: PUSH
71962: LD_INT 0
71964: PUSH
71965: LD_INT 0
71967: PUSH
71968: LD_INT 0
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PPUSH
71984: CALL_OW 446
// end ;
71988: LD_VAR 0 2
71992: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71993: LD_INT 0
71995: PPUSH
71996: PPUSH
// if not driver or not IsInUnit ( driver ) then
71997: LD_VAR 0 1
72001: NOT
72002: PUSH
72003: LD_VAR 0 1
72007: PPUSH
72008: CALL_OW 310
72012: NOT
72013: OR
72014: IFFALSE 72018
// exit ;
72016: GO 72108
// vehicle := IsInUnit ( driver ) ;
72018: LD_ADDR_VAR 0 3
72022: PUSH
72023: LD_VAR 0 1
72027: PPUSH
72028: CALL_OW 310
72032: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72033: LD_VAR 0 1
72037: PPUSH
72038: LD_STRING \
72040: PUSH
72041: LD_INT 0
72043: PUSH
72044: LD_INT 0
72046: PUSH
72047: LD_INT 0
72049: PUSH
72050: LD_INT 0
72052: PUSH
72053: LD_INT 0
72055: PUSH
72056: LD_INT 0
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: PUSH
72068: LD_STRING E
72070: PUSH
72071: LD_INT 0
72073: PUSH
72074: LD_INT 0
72076: PUSH
72077: LD_VAR 0 3
72081: PUSH
72082: LD_INT 0
72084: PUSH
72085: LD_INT 0
72087: PUSH
72088: LD_INT 0
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PPUSH
72104: CALL_OW 447
// end ;
72108: LD_VAR 0 2
72112: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72113: LD_INT 0
72115: PPUSH
72116: PPUSH
72117: PPUSH
// tmp := [ ] ;
72118: LD_ADDR_VAR 0 5
72122: PUSH
72123: EMPTY
72124: ST_TO_ADDR
// for i in units do
72125: LD_ADDR_VAR 0 4
72129: PUSH
72130: LD_VAR 0 1
72134: PUSH
72135: FOR_IN
72136: IFFALSE 72174
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72138: LD_ADDR_VAR 0 5
72142: PUSH
72143: LD_VAR 0 5
72147: PPUSH
72148: LD_VAR 0 5
72152: PUSH
72153: LD_INT 1
72155: PLUS
72156: PPUSH
72157: LD_VAR 0 4
72161: PPUSH
72162: CALL_OW 256
72166: PPUSH
72167: CALL_OW 2
72171: ST_TO_ADDR
72172: GO 72135
72174: POP
72175: POP
// if not tmp then
72176: LD_VAR 0 5
72180: NOT
72181: IFFALSE 72185
// exit ;
72183: GO 72233
// if asc then
72185: LD_VAR 0 2
72189: IFFALSE 72213
// result := SortListByListAsc ( units , tmp ) else
72191: LD_ADDR_VAR 0 3
72195: PUSH
72196: LD_VAR 0 1
72200: PPUSH
72201: LD_VAR 0 5
72205: PPUSH
72206: CALL_OW 76
72210: ST_TO_ADDR
72211: GO 72233
// result := SortListByListDesc ( units , tmp ) ;
72213: LD_ADDR_VAR 0 3
72217: PUSH
72218: LD_VAR 0 1
72222: PPUSH
72223: LD_VAR 0 5
72227: PPUSH
72228: CALL_OW 77
72232: ST_TO_ADDR
// end ;
72233: LD_VAR 0 3
72237: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72238: LD_INT 0
72240: PPUSH
72241: PPUSH
// task := GetTaskList ( mech ) ;
72242: LD_ADDR_VAR 0 4
72246: PUSH
72247: LD_VAR 0 1
72251: PPUSH
72252: CALL_OW 437
72256: ST_TO_ADDR
// if not task then
72257: LD_VAR 0 4
72261: NOT
72262: IFFALSE 72266
// exit ;
72264: GO 72308
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72266: LD_ADDR_VAR 0 3
72270: PUSH
72271: LD_VAR 0 4
72275: PUSH
72276: LD_INT 1
72278: ARRAY
72279: PUSH
72280: LD_INT 1
72282: ARRAY
72283: PUSH
72284: LD_STRING r
72286: EQUAL
72287: PUSH
72288: LD_VAR 0 4
72292: PUSH
72293: LD_INT 1
72295: ARRAY
72296: PUSH
72297: LD_INT 4
72299: ARRAY
72300: PUSH
72301: LD_VAR 0 2
72305: EQUAL
72306: AND
72307: ST_TO_ADDR
// end ;
72308: LD_VAR 0 3
72312: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72313: LD_INT 0
72315: PPUSH
// SetDir ( unit , d ) ;
72316: LD_VAR 0 1
72320: PPUSH
72321: LD_VAR 0 4
72325: PPUSH
72326: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72330: LD_VAR 0 1
72334: PPUSH
72335: LD_VAR 0 2
72339: PPUSH
72340: LD_VAR 0 3
72344: PPUSH
72345: LD_VAR 0 5
72349: PPUSH
72350: CALL_OW 48
// end ;
72354: LD_VAR 0 6
72358: RET
// export function ToNaturalNumber ( number ) ; begin
72359: LD_INT 0
72361: PPUSH
// result := number div 1 ;
72362: LD_ADDR_VAR 0 2
72366: PUSH
72367: LD_VAR 0 1
72371: PUSH
72372: LD_INT 1
72374: DIV
72375: ST_TO_ADDR
// if number < 0 then
72376: LD_VAR 0 1
72380: PUSH
72381: LD_INT 0
72383: LESS
72384: IFFALSE 72394
// result := 0 ;
72386: LD_ADDR_VAR 0 2
72390: PUSH
72391: LD_INT 0
72393: ST_TO_ADDR
// end ;
72394: LD_VAR 0 2
72398: RET
// export function SortByClass ( units , class ) ; var un ; begin
72399: LD_INT 0
72401: PPUSH
72402: PPUSH
// if not units or not class then
72403: LD_VAR 0 1
72407: NOT
72408: PUSH
72409: LD_VAR 0 2
72413: NOT
72414: OR
72415: IFFALSE 72419
// exit ;
72417: GO 72514
// result := [ ] ;
72419: LD_ADDR_VAR 0 3
72423: PUSH
72424: EMPTY
72425: ST_TO_ADDR
// for un in units do
72426: LD_ADDR_VAR 0 4
72430: PUSH
72431: LD_VAR 0 1
72435: PUSH
72436: FOR_IN
72437: IFFALSE 72512
// if GetClass ( un ) = class then
72439: LD_VAR 0 4
72443: PPUSH
72444: CALL_OW 257
72448: PUSH
72449: LD_VAR 0 2
72453: EQUAL
72454: IFFALSE 72481
// result := Insert ( result , 1 , un ) else
72456: LD_ADDR_VAR 0 3
72460: PUSH
72461: LD_VAR 0 3
72465: PPUSH
72466: LD_INT 1
72468: PPUSH
72469: LD_VAR 0 4
72473: PPUSH
72474: CALL_OW 2
72478: ST_TO_ADDR
72479: GO 72510
// result := Replace ( result , result + 1 , un ) ;
72481: LD_ADDR_VAR 0 3
72485: PUSH
72486: LD_VAR 0 3
72490: PPUSH
72491: LD_VAR 0 3
72495: PUSH
72496: LD_INT 1
72498: PLUS
72499: PPUSH
72500: LD_VAR 0 4
72504: PPUSH
72505: CALL_OW 1
72509: ST_TO_ADDR
72510: GO 72436
72512: POP
72513: POP
// end ;
72514: LD_VAR 0 3
72518: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72519: LD_INT 0
72521: PPUSH
72522: PPUSH
72523: PPUSH
72524: PPUSH
72525: PPUSH
72526: PPUSH
72527: PPUSH
// result := [ ] ;
72528: LD_ADDR_VAR 0 4
72532: PUSH
72533: EMPTY
72534: ST_TO_ADDR
// if x - r < 0 then
72535: LD_VAR 0 1
72539: PUSH
72540: LD_VAR 0 3
72544: MINUS
72545: PUSH
72546: LD_INT 0
72548: LESS
72549: IFFALSE 72561
// min_x := 0 else
72551: LD_ADDR_VAR 0 8
72555: PUSH
72556: LD_INT 0
72558: ST_TO_ADDR
72559: GO 72577
// min_x := x - r ;
72561: LD_ADDR_VAR 0 8
72565: PUSH
72566: LD_VAR 0 1
72570: PUSH
72571: LD_VAR 0 3
72575: MINUS
72576: ST_TO_ADDR
// if y - r < 0 then
72577: LD_VAR 0 2
72581: PUSH
72582: LD_VAR 0 3
72586: MINUS
72587: PUSH
72588: LD_INT 0
72590: LESS
72591: IFFALSE 72603
// min_y := 0 else
72593: LD_ADDR_VAR 0 7
72597: PUSH
72598: LD_INT 0
72600: ST_TO_ADDR
72601: GO 72619
// min_y := y - r ;
72603: LD_ADDR_VAR 0 7
72607: PUSH
72608: LD_VAR 0 2
72612: PUSH
72613: LD_VAR 0 3
72617: MINUS
72618: ST_TO_ADDR
// max_x := x + r ;
72619: LD_ADDR_VAR 0 9
72623: PUSH
72624: LD_VAR 0 1
72628: PUSH
72629: LD_VAR 0 3
72633: PLUS
72634: ST_TO_ADDR
// max_y := y + r ;
72635: LD_ADDR_VAR 0 10
72639: PUSH
72640: LD_VAR 0 2
72644: PUSH
72645: LD_VAR 0 3
72649: PLUS
72650: ST_TO_ADDR
// for _x = min_x to max_x do
72651: LD_ADDR_VAR 0 5
72655: PUSH
72656: DOUBLE
72657: LD_VAR 0 8
72661: DEC
72662: ST_TO_ADDR
72663: LD_VAR 0 9
72667: PUSH
72668: FOR_TO
72669: IFFALSE 72770
// for _y = min_y to max_y do
72671: LD_ADDR_VAR 0 6
72675: PUSH
72676: DOUBLE
72677: LD_VAR 0 7
72681: DEC
72682: ST_TO_ADDR
72683: LD_VAR 0 10
72687: PUSH
72688: FOR_TO
72689: IFFALSE 72766
// begin if not ValidHex ( _x , _y ) then
72691: LD_VAR 0 5
72695: PPUSH
72696: LD_VAR 0 6
72700: PPUSH
72701: CALL_OW 488
72705: NOT
72706: IFFALSE 72710
// continue ;
72708: GO 72688
// if GetResourceTypeXY ( _x , _y ) then
72710: LD_VAR 0 5
72714: PPUSH
72715: LD_VAR 0 6
72719: PPUSH
72720: CALL_OW 283
72724: IFFALSE 72764
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72726: LD_ADDR_VAR 0 4
72730: PUSH
72731: LD_VAR 0 4
72735: PPUSH
72736: LD_VAR 0 4
72740: PUSH
72741: LD_INT 1
72743: PLUS
72744: PPUSH
72745: LD_VAR 0 5
72749: PUSH
72750: LD_VAR 0 6
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PPUSH
72759: CALL_OW 1
72763: ST_TO_ADDR
// end ;
72764: GO 72688
72766: POP
72767: POP
72768: GO 72668
72770: POP
72771: POP
// end ;
72772: LD_VAR 0 4
72776: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72777: LD_INT 0
72779: PPUSH
72780: PPUSH
72781: PPUSH
72782: PPUSH
72783: PPUSH
72784: PPUSH
72785: PPUSH
72786: PPUSH
// if not units then
72787: LD_VAR 0 1
72791: NOT
72792: IFFALSE 72796
// exit ;
72794: GO 73221
// result := UnitFilter ( units , [ f_ok ] ) ;
72796: LD_ADDR_VAR 0 3
72800: PUSH
72801: LD_VAR 0 1
72805: PPUSH
72806: LD_INT 50
72808: PUSH
72809: EMPTY
72810: LIST
72811: PPUSH
72812: CALL_OW 72
72816: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72817: LD_ADDR_VAR 0 8
72821: PUSH
72822: LD_VAR 0 1
72826: PUSH
72827: LD_INT 1
72829: ARRAY
72830: PPUSH
72831: CALL_OW 255
72835: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
72836: LD_ADDR_VAR 0 10
72840: PUSH
72841: LD_INT 29
72843: PUSH
72844: LD_EXP 48
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: ST_TO_ADDR
// if not result then
72853: LD_VAR 0 3
72857: NOT
72858: IFFALSE 72862
// exit ;
72860: GO 73221
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72862: LD_ADDR_VAR 0 5
72866: PUSH
72867: LD_INT 81
72869: PUSH
72870: LD_VAR 0 8
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PPUSH
72879: CALL_OW 69
72883: ST_TO_ADDR
// for i in result do
72884: LD_ADDR_VAR 0 4
72888: PUSH
72889: LD_VAR 0 3
72893: PUSH
72894: FOR_IN
72895: IFFALSE 73219
// begin tag := GetTag ( i ) + 1 ;
72897: LD_ADDR_VAR 0 9
72901: PUSH
72902: LD_VAR 0 4
72906: PPUSH
72907: CALL_OW 110
72911: PUSH
72912: LD_INT 1
72914: PLUS
72915: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72916: LD_ADDR_VAR 0 7
72920: PUSH
72921: LD_VAR 0 4
72925: PPUSH
72926: CALL_OW 250
72930: PPUSH
72931: LD_VAR 0 4
72935: PPUSH
72936: CALL_OW 251
72940: PPUSH
72941: LD_INT 6
72943: PPUSH
72944: CALL 72519 0 3
72948: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72949: LD_VAR 0 7
72953: PUSH
72954: LD_VAR 0 4
72958: PPUSH
72959: CALL_OW 264
72963: PUSH
72964: LD_VAR 0 10
72968: IN
72969: NOT
72970: AND
72971: IFFALSE 73010
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72973: LD_VAR 0 4
72977: PPUSH
72978: LD_VAR 0 7
72982: PUSH
72983: LD_INT 1
72985: ARRAY
72986: PUSH
72987: LD_INT 1
72989: ARRAY
72990: PPUSH
72991: LD_VAR 0 7
72995: PUSH
72996: LD_INT 1
72998: ARRAY
72999: PUSH
73000: LD_INT 2
73002: ARRAY
73003: PPUSH
73004: CALL_OW 116
73008: GO 73217
// if path > tag then
73010: LD_VAR 0 2
73014: PUSH
73015: LD_VAR 0 9
73019: GREATER
73020: IFFALSE 73187
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
73022: LD_ADDR_VAR 0 6
73026: PUSH
73027: LD_VAR 0 5
73031: PPUSH
73032: LD_INT 91
73034: PUSH
73035: LD_VAR 0 4
73039: PUSH
73040: LD_INT 12
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: PPUSH
73048: CALL_OW 72
73052: ST_TO_ADDR
// if nearEnemy then
73053: LD_VAR 0 6
73057: IFFALSE 73085
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73059: LD_VAR 0 4
73063: PPUSH
73064: LD_VAR 0 6
73068: PPUSH
73069: LD_VAR 0 4
73073: PPUSH
73074: CALL_OW 74
73078: PPUSH
73079: CALL_OW 115
73083: GO 73185
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73085: LD_VAR 0 4
73089: PPUSH
73090: LD_VAR 0 2
73094: PUSH
73095: LD_VAR 0 9
73099: ARRAY
73100: PUSH
73101: LD_INT 1
73103: ARRAY
73104: PPUSH
73105: LD_VAR 0 2
73109: PUSH
73110: LD_VAR 0 9
73114: ARRAY
73115: PUSH
73116: LD_INT 2
73118: ARRAY
73119: PPUSH
73120: CALL_OW 297
73124: PUSH
73125: LD_INT 6
73127: GREATER
73128: IFFALSE 73171
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73130: LD_VAR 0 4
73134: PPUSH
73135: LD_VAR 0 2
73139: PUSH
73140: LD_VAR 0 9
73144: ARRAY
73145: PUSH
73146: LD_INT 1
73148: ARRAY
73149: PPUSH
73150: LD_VAR 0 2
73154: PUSH
73155: LD_VAR 0 9
73159: ARRAY
73160: PUSH
73161: LD_INT 2
73163: ARRAY
73164: PPUSH
73165: CALL_OW 114
73169: GO 73185
// SetTag ( i , tag ) ;
73171: LD_VAR 0 4
73175: PPUSH
73176: LD_VAR 0 9
73180: PPUSH
73181: CALL_OW 109
// end else
73185: GO 73217
// if enemy then
73187: LD_VAR 0 5
73191: IFFALSE 73217
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73193: LD_VAR 0 4
73197: PPUSH
73198: LD_VAR 0 5
73202: PPUSH
73203: LD_VAR 0 4
73207: PPUSH
73208: CALL_OW 74
73212: PPUSH
73213: CALL_OW 115
// end ;
73217: GO 72894
73219: POP
73220: POP
// end ;
73221: LD_VAR 0 3
73225: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73226: LD_INT 0
73228: PPUSH
73229: PPUSH
73230: PPUSH
// if not unit or IsInUnit ( unit ) then
73231: LD_VAR 0 1
73235: NOT
73236: PUSH
73237: LD_VAR 0 1
73241: PPUSH
73242: CALL_OW 310
73246: OR
73247: IFFALSE 73251
// exit ;
73249: GO 73342
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73251: LD_ADDR_VAR 0 4
73255: PUSH
73256: LD_VAR 0 1
73260: PPUSH
73261: CALL_OW 250
73265: PPUSH
73266: LD_VAR 0 2
73270: PPUSH
73271: LD_INT 1
73273: PPUSH
73274: CALL_OW 272
73278: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73279: LD_ADDR_VAR 0 5
73283: PUSH
73284: LD_VAR 0 1
73288: PPUSH
73289: CALL_OW 251
73293: PPUSH
73294: LD_VAR 0 2
73298: PPUSH
73299: LD_INT 1
73301: PPUSH
73302: CALL_OW 273
73306: ST_TO_ADDR
// if ValidHex ( x , y ) then
73307: LD_VAR 0 4
73311: PPUSH
73312: LD_VAR 0 5
73316: PPUSH
73317: CALL_OW 488
73321: IFFALSE 73342
// ComTurnXY ( unit , x , y ) ;
73323: LD_VAR 0 1
73327: PPUSH
73328: LD_VAR 0 4
73332: PPUSH
73333: LD_VAR 0 5
73337: PPUSH
73338: CALL_OW 118
// end ;
73342: LD_VAR 0 3
73346: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73347: LD_INT 0
73349: PPUSH
73350: PPUSH
// result := false ;
73351: LD_ADDR_VAR 0 3
73355: PUSH
73356: LD_INT 0
73358: ST_TO_ADDR
// if not units then
73359: LD_VAR 0 2
73363: NOT
73364: IFFALSE 73368
// exit ;
73366: GO 73413
// for i in units do
73368: LD_ADDR_VAR 0 4
73372: PUSH
73373: LD_VAR 0 2
73377: PUSH
73378: FOR_IN
73379: IFFALSE 73411
// if See ( side , i ) then
73381: LD_VAR 0 1
73385: PPUSH
73386: LD_VAR 0 4
73390: PPUSH
73391: CALL_OW 292
73395: IFFALSE 73409
// begin result := true ;
73397: LD_ADDR_VAR 0 3
73401: PUSH
73402: LD_INT 1
73404: ST_TO_ADDR
// exit ;
73405: POP
73406: POP
73407: GO 73413
// end ;
73409: GO 73378
73411: POP
73412: POP
// end ;
73413: LD_VAR 0 3
73417: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73418: LD_INT 0
73420: PPUSH
73421: PPUSH
73422: PPUSH
73423: PPUSH
// if not unit or not points then
73424: LD_VAR 0 1
73428: NOT
73429: PUSH
73430: LD_VAR 0 2
73434: NOT
73435: OR
73436: IFFALSE 73440
// exit ;
73438: GO 73530
// dist := 99999 ;
73440: LD_ADDR_VAR 0 5
73444: PUSH
73445: LD_INT 99999
73447: ST_TO_ADDR
// for i in points do
73448: LD_ADDR_VAR 0 4
73452: PUSH
73453: LD_VAR 0 2
73457: PUSH
73458: FOR_IN
73459: IFFALSE 73528
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73461: LD_ADDR_VAR 0 6
73465: PUSH
73466: LD_VAR 0 1
73470: PPUSH
73471: LD_VAR 0 4
73475: PUSH
73476: LD_INT 1
73478: ARRAY
73479: PPUSH
73480: LD_VAR 0 4
73484: PUSH
73485: LD_INT 2
73487: ARRAY
73488: PPUSH
73489: CALL_OW 297
73493: ST_TO_ADDR
// if tmpDist < dist then
73494: LD_VAR 0 6
73498: PUSH
73499: LD_VAR 0 5
73503: LESS
73504: IFFALSE 73526
// begin result := i ;
73506: LD_ADDR_VAR 0 3
73510: PUSH
73511: LD_VAR 0 4
73515: ST_TO_ADDR
// dist := tmpDist ;
73516: LD_ADDR_VAR 0 5
73520: PUSH
73521: LD_VAR 0 6
73525: ST_TO_ADDR
// end ; end ;
73526: GO 73458
73528: POP
73529: POP
// end ;
73530: LD_VAR 0 3
73534: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73535: LD_INT 0
73537: PPUSH
// uc_side := side ;
73538: LD_ADDR_OWVAR 20
73542: PUSH
73543: LD_VAR 0 1
73547: ST_TO_ADDR
// uc_nation := 3 ;
73548: LD_ADDR_OWVAR 21
73552: PUSH
73553: LD_INT 3
73555: ST_TO_ADDR
// vc_chassis := 25 ;
73556: LD_ADDR_OWVAR 37
73560: PUSH
73561: LD_INT 25
73563: ST_TO_ADDR
// vc_engine := engine_siberite ;
73564: LD_ADDR_OWVAR 39
73568: PUSH
73569: LD_INT 3
73571: ST_TO_ADDR
// vc_control := control_computer ;
73572: LD_ADDR_OWVAR 38
73576: PUSH
73577: LD_INT 3
73579: ST_TO_ADDR
// vc_weapon := 59 ;
73580: LD_ADDR_OWVAR 40
73584: PUSH
73585: LD_INT 59
73587: ST_TO_ADDR
// result := CreateVehicle ;
73588: LD_ADDR_VAR 0 5
73592: PUSH
73593: CALL_OW 45
73597: ST_TO_ADDR
// SetDir ( result , d ) ;
73598: LD_VAR 0 5
73602: PPUSH
73603: LD_VAR 0 4
73607: PPUSH
73608: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73612: LD_VAR 0 5
73616: PPUSH
73617: LD_VAR 0 2
73621: PPUSH
73622: LD_VAR 0 3
73626: PPUSH
73627: LD_INT 0
73629: PPUSH
73630: CALL_OW 48
// end ;
73634: LD_VAR 0 5
73638: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73639: LD_INT 0
73641: PPUSH
73642: PPUSH
73643: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73644: LD_ADDR_VAR 0 2
73648: PUSH
73649: LD_INT 0
73651: PUSH
73652: LD_INT 0
73654: PUSH
73655: LD_INT 0
73657: PUSH
73658: LD_INT 0
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73667: LD_VAR 0 1
73671: NOT
73672: PUSH
73673: LD_VAR 0 1
73677: PPUSH
73678: CALL_OW 264
73682: PUSH
73683: LD_INT 12
73685: PUSH
73686: LD_INT 51
73688: PUSH
73689: LD_INT 32
73691: PUSH
73692: LD_EXP 45
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: IN
73703: NOT
73704: OR
73705: IFFALSE 73709
// exit ;
73707: GO 73807
// for i := 1 to 3 do
73709: LD_ADDR_VAR 0 3
73713: PUSH
73714: DOUBLE
73715: LD_INT 1
73717: DEC
73718: ST_TO_ADDR
73719: LD_INT 3
73721: PUSH
73722: FOR_TO
73723: IFFALSE 73805
// begin tmp := GetCargo ( cargo , i ) ;
73725: LD_ADDR_VAR 0 4
73729: PUSH
73730: LD_VAR 0 1
73734: PPUSH
73735: LD_VAR 0 3
73739: PPUSH
73740: CALL_OW 289
73744: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73745: LD_ADDR_VAR 0 2
73749: PUSH
73750: LD_VAR 0 2
73754: PPUSH
73755: LD_VAR 0 3
73759: PPUSH
73760: LD_VAR 0 4
73764: PPUSH
73765: CALL_OW 1
73769: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73770: LD_ADDR_VAR 0 2
73774: PUSH
73775: LD_VAR 0 2
73779: PPUSH
73780: LD_INT 4
73782: PPUSH
73783: LD_VAR 0 2
73787: PUSH
73788: LD_INT 4
73790: ARRAY
73791: PUSH
73792: LD_VAR 0 4
73796: PLUS
73797: PPUSH
73798: CALL_OW 1
73802: ST_TO_ADDR
// end ;
73803: GO 73722
73805: POP
73806: POP
// end ; end_of_file
73807: LD_VAR 0 2
73811: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73812: LD_VAR 0 1
73816: PUSH
73817: LD_INT 200
73819: DOUBLE
73820: GREATEREQUAL
73821: IFFALSE 73829
73823: LD_INT 299
73825: DOUBLE
73826: LESSEQUAL
73827: IFTRUE 73831
73829: GO 73863
73831: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73832: LD_VAR 0 1
73836: PPUSH
73837: LD_VAR 0 2
73841: PPUSH
73842: LD_VAR 0 3
73846: PPUSH
73847: LD_VAR 0 4
73851: PPUSH
73852: LD_VAR 0 5
73856: PPUSH
73857: CALL 14904 0 5
73861: GO 73940
73863: LD_INT 300
73865: DOUBLE
73866: GREATEREQUAL
73867: IFFALSE 73875
73869: LD_INT 399
73871: DOUBLE
73872: LESSEQUAL
73873: IFTRUE 73877
73875: GO 73939
73877: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73878: LD_VAR 0 1
73882: PPUSH
73883: LD_VAR 0 2
73887: PPUSH
73888: LD_VAR 0 3
73892: PPUSH
73893: LD_VAR 0 4
73897: PPUSH
73898: LD_VAR 0 5
73902: PPUSH
73903: LD_VAR 0 6
73907: PPUSH
73908: LD_VAR 0 7
73912: PPUSH
73913: LD_VAR 0 8
73917: PPUSH
73918: LD_VAR 0 9
73922: PPUSH
73923: LD_VAR 0 10
73927: PPUSH
73928: LD_VAR 0 11
73932: PPUSH
73933: CALL 31520 0 11
73937: GO 73940
73939: POP
// end ;
73940: PPOPN 11
73942: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73943: LD_VAR 0 1
73947: PPUSH
73948: LD_VAR 0 2
73952: PPUSH
73953: LD_VAR 0 3
73957: PPUSH
73958: LD_VAR 0 4
73962: PPUSH
73963: LD_VAR 0 5
73967: PPUSH
73968: CALL 14640 0 5
// end ; end_of_file
73972: PPOPN 5
73974: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73975: LD_VAR 0 1
73979: PPUSH
73980: LD_VAR 0 2
73984: PPUSH
73985: LD_VAR 0 3
73989: PPUSH
73990: LD_VAR 0 4
73994: PPUSH
73995: LD_VAR 0 5
73999: PPUSH
74000: LD_VAR 0 6
74004: PPUSH
74005: CALL 19213 0 6
// end ;
74009: PPOPN 6
74011: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74012: CALL 19188 0 0
// end ;
74016: PPOPN 1
74018: END
