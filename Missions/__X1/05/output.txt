// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1437 0 0
// PrepareRussian ;
  35: CALL 3043 0 0
// Action ;
  39: CALL 8092 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function ReverseArray ( array ) ; var i ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
// if not array then
1151: LD_VAR 0 1
1155: NOT
1156: IFFALSE 1160
// exit ;
1158: GO 1218
// result := [ ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: EMPTY
1166: ST_TO_ADDR
// for i := 1 to array do
1167: LD_ADDR_VAR 0 3
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_VAR 0 1
1181: PUSH
1182: FOR_TO
1183: IFFALSE 1216
// result := Insert ( result , 1 , array [ i ] ) ;
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_VAR 0 1
1202: PUSH
1203: LD_VAR 0 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 2
1213: ST_TO_ADDR
1214: GO 1182
1216: POP
1217: POP
// end ;
1218: LD_VAR 0 2
1222: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1223: LD_INT 0
1225: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_VAR 0 2
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: CALL_OW 331
// end ;
1269: LD_VAR 0 5
1273: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1274: LD_INT 0
1276: PPUSH
// if not units then
1277: LD_VAR 0 1
1281: NOT
1282: IFFALSE 1286
// exit ;
1284: GO 1369
// result := true ;
1286: LD_ADDR_VAR 0 4
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1294: LD_VAR 0 1
1298: PPUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PPUSH
1309: CALL_OW 72
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 2
1322: PPUSH
1323: CALL_OW 88
1327: NOT
1328: IFFALSE 1369
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 26
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 72
1354: PUSH
1355: LD_INT 1
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 3
1363: PPUSH
1364: CALL_OW 88
1368: ST_TO_ADDR
// end ;
1369: LD_VAR 0 4
1373: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
// if not group then
1378: LD_VAR 0 2
1382: NOT
1383: IFFALSE 1387
// exit ;
1385: GO 1432
// for i in group do
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_VAR 0 2
1396: PUSH
1397: FOR_IN
1398: IFFALSE 1430
// if See ( side , i ) then
1400: LD_VAR 0 1
1404: PPUSH
1405: LD_VAR 0 4
1409: PPUSH
1410: CALL_OW 292
1414: IFFALSE 1428
// begin result := true ;
1416: LD_ADDR_VAR 0 3
1420: PUSH
1421: LD_INT 1
1423: ST_TO_ADDR
// exit ;
1424: POP
1425: POP
1426: GO 1432
// end ;
1428: GO 1397
1430: POP
1431: POP
// end ; end_of_file
1432: LD_VAR 0 3
1436: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
// uc_side := 2 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 2
1448: ST_TO_ADDR
// uc_nation := 2 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 2
1456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1457: LD_ADDR_EXP 21
1461: PUSH
1462: LD_STRING Heike
1464: PPUSH
1465: LD_EXP 1
1469: NOT
1470: PPUSH
1471: LD_EXP 2
1475: PPUSH
1476: CALL 33464 0 3
1480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1481: LD_ADDR_EXP 24
1485: PUSH
1486: LD_STRING Ibrahim
1488: PPUSH
1489: LD_EXP 1
1493: NOT
1494: PPUSH
1495: LD_EXP 2
1499: PPUSH
1500: CALL 33464 0 3
1504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1505: LD_ADDR_EXP 22
1509: PUSH
1510: LD_STRING Givi
1512: PPUSH
1513: LD_EXP 1
1517: NOT
1518: PPUSH
1519: LD_EXP 2
1523: PPUSH
1524: CALL 33464 0 3
1528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1529: LD_ADDR_EXP 25
1533: PUSH
1534: LD_STRING Kamil
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_EXP 2
1547: PPUSH
1548: CALL 33464 0 3
1552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_STRING Kaia
1560: PPUSH
1561: LD_EXP 1
1565: NOT
1566: PPUSH
1567: LD_EXP 2
1571: PPUSH
1572: CALL 33464 0 3
1576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1577: LD_ADDR_EXP 27
1581: PUSH
1582: LD_STRING Sophia
1584: PPUSH
1585: LD_EXP 1
1589: NOT
1590: PPUSH
1591: LD_EXP 2
1595: PPUSH
1596: CALL 33464 0 3
1600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1601: LD_ADDR_EXP 28
1605: PUSH
1606: LD_STRING Markov
1608: PPUSH
1609: LD_EXP 1
1613: NOT
1614: PPUSH
1615: LD_EXP 2
1619: PPUSH
1620: CALL 33464 0 3
1624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1625: LD_ADDR_EXP 33
1629: PUSH
1630: LD_STRING Aviradze
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 2
1643: PPUSH
1644: CALL 33464 0 3
1648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1649: LD_ADDR_EXP 32
1653: PUSH
1654: LD_STRING Kurt
1656: PPUSH
1657: LD_EXP 1
1661: NOT
1662: PPUSH
1663: LD_EXP 2
1667: PPUSH
1668: CALL 33464 0 3
1672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1673: LD_ADDR_EXP 23
1677: PUSH
1678: LD_STRING Mike
1680: PPUSH
1681: LD_EXP 1
1685: NOT
1686: PPUSH
1687: LD_EXP 2
1691: PPUSH
1692: CALL 33464 0 3
1696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1697: LD_ADDR_EXP 30
1701: PUSH
1702: LD_STRING Olaf
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_STRING 
1710: PPUSH
1711: CALL 33464 0 3
1715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1716: LD_ADDR_EXP 34
1720: PUSH
1721: LD_STRING 04_2_others
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1729: LD_ADDR_EXP 36
1733: PUSH
1734: LD_STRING 04_2_apes
1736: PPUSH
1737: CALL_OW 31
1741: ST_TO_ADDR
// if hasFlamethrower then
1742: LD_EXP 3
1746: IFFALSE 1981
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1748: LD_INT 70
1750: PPUSH
1751: LD_INT 2
1753: PPUSH
1754: LD_INT 2
1756: PPUSH
1757: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1761: LD_ADDR_EXP 35
1765: PUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: LD_INT 27
1777: PUSH
1778: LD_INT 2
1780: PUSH
1781: LD_INT 1000
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 13
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 25
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1000
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 13
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: LD_INT 26
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 1000
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: LD_INT 27
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 1000
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 13
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 32
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 0
1934: PUSH
1935: LD_INT 60
1937: PUSH
1938: LD_INT 40
1940: PUSH
1941: LD_INT 20
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_OWVAR 67
1957: ARRAY
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: ST_TO_ADDR
// end else
1979: GO 2199
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1981: LD_ADDR_EXP 35
1985: PUSH
1986: LD_INT 13
1988: PUSH
1989: LD_INT 1
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 25
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: LD_INT 1000
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: LD_INT 1
2031: PUSH
2032: LD_INT 27
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: LD_INT 1000
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 13
2062: PUSH
2063: LD_INT 1
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: LD_INT 24
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 1000
2077: PUSH
2078: LD_INT 0
2080: PUSH
2081: LD_INT 0
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 13
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: LD_INT 27
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 1000
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: LD_INT 0
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 1
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 50
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 20
2163: PUSH
2164: LD_INT 10
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_OWVAR 67
2177: ARRAY
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
// end ; uc_side := 5 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 5
2206: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Abdul
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_STRING 
2220: PPUSH
2221: CALL 33464 0 3
2225: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2226: LD_ADDR_EXP 31
2230: PUSH
2231: LD_STRING Omar
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 33464 0 3
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 1
2249: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// pfx := 04_1_ ;
2257: LD_ADDR_VAR 0 2
2261: PUSH
2262: LD_STRING 04_1_
2264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2265: LD_INT 35
2267: PPUSH
2268: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2272: LD_INT 3
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: CALL_OW 428
2282: NOT
2283: IFFALSE 2265
// tmp := [ ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// uc_side := 5 ;
2292: LD_ADDR_OWVAR 20
2296: PUSH
2297: LD_INT 5
2299: ST_TO_ADDR
// uc_nation := 2 ;
2300: LD_ADDR_OWVAR 21
2304: PUSH
2305: LD_INT 2
2307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2308: LD_ADDR_EXP 33
2312: PUSH
2313: LD_STRING Aviradze_L
2315: PPUSH
2316: LD_EXP 1
2320: NOT
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL 33464 0 3
2331: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2344: LD_EXP 33
2348: PPUSH
2349: LD_INT 14
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2359: LD_EXP 33
2363: PPUSH
2364: LD_INT 8
2366: PPUSH
2367: LD_INT 6
2369: PPUSH
2370: CALL_OW 111
// AddComHold ( Aviradze ) ;
2374: LD_EXP 33
2378: PPUSH
2379: CALL_OW 200
// tmp := [ Aviradze ] ;
2383: LD_ADDR_VAR 0 4
2387: PUSH
2388: LD_EXP 33
2392: PUSH
2393: EMPTY
2394: LIST
2395: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2396: LD_INT 70
2398: PPUSH
2399: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2403: LD_STRING Ibrahim_L
2405: PPUSH
2406: LD_EXP 1
2410: NOT
2411: PPUSH
2412: LD_VAR 0 2
2416: PPUSH
2417: CALL 33464 0 3
2421: IFFALSE 2521
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2423: LD_ADDR_EXP 24
2427: PUSH
2428: LD_STRING Ibrahim_L
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_VAR 0 2
2441: PPUSH
2442: CALL 33464 0 3
2446: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2459: LD_EXP 24
2463: PPUSH
2464: LD_INT 14
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2474: LD_EXP 24
2478: PPUSH
2479: LD_INT 8
2481: PPUSH
2482: LD_INT 7
2484: PPUSH
2485: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2489: LD_EXP 24
2493: PPUSH
2494: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 4
2507: PUSH
2508: LD_EXP 24
2512: ADD
2513: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2521: LD_STRING Kaia_L
2523: PPUSH
2524: LD_EXP 1
2528: NOT
2529: PPUSH
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL 33464 0 3
2539: IFFALSE 2639
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2541: LD_ADDR_EXP 26
2545: PUSH
2546: LD_STRING Kaia_L
2548: PPUSH
2549: LD_EXP 1
2553: NOT
2554: PPUSH
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL 33464 0 3
2564: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2577: LD_EXP 26
2581: PPUSH
2582: LD_INT 14
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2592: LD_EXP 26
2596: PPUSH
2597: LD_INT 8
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 111
// AddComHold ( Kaia ) ;
2607: LD_EXP 26
2611: PPUSH
2612: CALL_OW 200
// tmp := tmp ^ Kaia ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_EXP 26
2630: ADD
2631: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2632: LD_INT 70
2634: PPUSH
2635: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2639: LD_STRING Kamil_L
2641: PPUSH
2642: LD_EXP 1
2646: NOT
2647: PPUSH
2648: LD_VAR 0 2
2652: PPUSH
2653: CALL 33464 0 3
2657: IFFALSE 2757
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2659: LD_ADDR_EXP 25
2663: PUSH
2664: LD_STRING Kamil_L
2666: PPUSH
2667: LD_EXP 1
2671: NOT
2672: PPUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 33464 0 3
2682: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2695: LD_EXP 25
2699: PPUSH
2700: LD_INT 14
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2710: LD_EXP 25
2714: PPUSH
2715: LD_INT 8
2717: PPUSH
2718: LD_INT 7
2720: PPUSH
2721: CALL_OW 111
// AddComHold ( Kamil ) ;
2725: LD_EXP 25
2729: PPUSH
2730: CALL_OW 200
// tmp := tmp ^ Kamil ;
2734: LD_ADDR_VAR 0 4
2738: PUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_EXP 25
2748: ADD
2749: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2750: LD_INT 70
2752: PPUSH
2753: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2757: LD_STRING Sophia_L
2759: PPUSH
2760: LD_EXP 1
2764: NOT
2765: PPUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL 33464 0 3
2775: IFFALSE 2875
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2777: LD_ADDR_EXP 27
2781: PUSH
2782: LD_STRING Sophia_L
2784: PPUSH
2785: LD_EXP 1
2789: NOT
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 33464 0 3
2800: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 2
2808: PPUSH
2809: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2813: LD_EXP 27
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: LD_INT 0
2823: PPUSH
2824: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2828: LD_EXP 27
2832: PPUSH
2833: LD_INT 9
2835: PPUSH
2836: LD_INT 6
2838: PPUSH
2839: CALL_OW 111
// AddComHold ( Sophia ) ;
2843: LD_EXP 27
2847: PPUSH
2848: CALL_OW 200
// tmp := tmp ^ Sophia ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_VAR 0 4
2861: PUSH
2862: LD_EXP 27
2866: ADD
2867: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2868: LD_INT 70
2870: PPUSH
2871: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2875: LD_ADDR_VAR 0 5
2879: PUSH
2880: LD_STRING 04_1_others_L
2882: PPUSH
2883: CALL_OW 31
2887: ST_TO_ADDR
// if tmp2 then
2888: LD_VAR 0 5
2892: IFFALSE 2989
// for i in tmp2 do
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2987
// begin SetDir ( i , 2 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 14
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_EXP 34
2943: PPUSH
2944: LD_EXP 34
2948: PUSH
2949: LD_INT 1
2951: PLUS
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 1
2962: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2963: LD_VAR 0 3
2967: PPUSH
2968: LD_INT 17
2970: PPUSH
2971: LD_INT 14
2973: PPUSH
2974: CALL_OW 111
// wait ( 0 0$2 ) ;
2978: LD_INT 70
2980: PPUSH
2981: CALL_OW 67
// end ;
2985: GO 2904
2987: POP
2988: POP
// for i in tmp union tmp2 do
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: LD_VAR 0 4
2998: PUSH
2999: LD_VAR 0 5
3003: UNION
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3036
// begin SetSide ( i , 2 ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 2
3015: PPUSH
3016: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3020: LD_VAR 0 3
3024: PPUSH
3025: LD_EXP 21
3029: PPUSH
3030: CALL_OW 112
// end ;
3034: GO 3005
3036: POP
3037: POP
// end ; end_of_file
3038: LD_VAR 0 1
3042: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
// uc_side := 3 ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_INT 3
3055: ST_TO_ADDR
// uc_nation := 3 ;
3056: LD_ADDR_OWVAR 21
3060: PUSH
3061: LD_INT 3
3063: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3064: LD_ADDR_EXP 37
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3071: LD_ADDR_EXP 38
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3078: LD_ADDR_EXP 41
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 2 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 2
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3238
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 3
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: LD_INT 5
3115: PUSH
3116: LD_INT 6
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_OWVAR 67
3129: ARRAY
3130: PPUSH
3131: CALL_OW 380
// un := CreateHuman ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 44
3144: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3145: LD_ADDR_EXP 37
3149: PUSH
3150: LD_EXP 37
3154: PPUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: PPUSH
3164: LD_VAR 0 3
3168: PPUSH
3169: CALL_OW 1
3173: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 100
3181: PPUSH
3182: LD_INT 63
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3195: LD_VAR 0 3
3199: PPUSH
3200: LD_INT 97
3202: PPUSH
3203: LD_INT 64
3205: PPUSH
3206: CALL_OW 428
3210: PUSH
3211: LD_INT 98
3213: PPUSH
3214: LD_INT 58
3216: PPUSH
3217: CALL_OW 428
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_VAR 0 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 120
// end ;
3236: GO 3098
3238: POP
3239: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3240: LD_INT 51
3242: PPUSH
3243: LD_INT 77
3245: PPUSH
3246: CALL_OW 428
3250: PPUSH
3251: CALL_OW 274
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: LD_INT 120
3261: PPUSH
3262: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 274
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_INT 300
3279: PPUSH
3280: CALL_OW 277
// for i := 1 to 2 do
3284: LD_ADDR_VAR 0 2
3288: PUSH
3289: DOUBLE
3290: LD_INT 1
3292: DEC
3293: ST_TO_ADDR
3294: LD_INT 2
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3416
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3300: LD_INT 0
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 6
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PUSH
3324: LD_OWVAR 67
3328: ARRAY
3329: PPUSH
3330: CALL_OW 380
// un := CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3344: LD_ADDR_EXP 38
3348: PUSH
3349: LD_EXP 38
3353: PPUSH
3354: LD_EXP 38
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 198
3380: PPUSH
3381: LD_INT 106
3383: PPUSH
3384: CALL_OW 428
3388: PUSH
3389: LD_INT 205
3391: PPUSH
3392: LD_INT 114
3394: PPUSH
3395: CALL_OW 428
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PPUSH
3410: CALL_OW 52
// end ;
3414: GO 3297
3416: POP
3417: POP
// for i := 1 to 2 do
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_INT 2
3430: PUSH
3431: FOR_TO
3432: IFFALSE 3509
// begin PrepareHuman ( false , 2 , 3 ) ;
3434: LD_INT 0
3436: PPUSH
3437: LD_INT 2
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: CALL_OW 380
// un := CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3457: LD_ADDR_EXP 38
3461: PUSH
3462: LD_EXP 38
3466: PPUSH
3467: LD_EXP 38
3471: PUSH
3472: LD_INT 1
3474: PLUS
3475: PPUSH
3476: LD_VAR 0 3
3480: PPUSH
3481: CALL_OW 1
3485: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_INT 204
3493: PPUSH
3494: LD_INT 108
3496: PPUSH
3497: LD_INT 2
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 50
// end ;
3507: GO 3431
3509: POP
3510: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 4
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 6
3529: PUSH
3530: LD_INT 7
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_OWVAR 67
3543: ARRAY
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3692
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: LD_INT 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 5
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 3
3587: PUSH
3588: LD_INT 4
3590: PUSH
3591: LD_INT 5
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_OWVAR 67
3607: ARRAY
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_INT 10
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 69115 0 3
3638: IFFALSE 3690
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3640: LD_ADDR_EXP 39
3644: PUSH
3645: LD_EXP 39
3649: PPUSH
3650: LD_EXP 39
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// if Prob ( 50 ) then
3669: LD_INT 50
3671: PPUSH
3672: CALL_OW 13
3676: IFFALSE 3690
// ForceSleep ( un , true ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: CALL_OW 585
// end ; end ;
3690: GO 3545
3692: POP
3693: POP
// for i := 1 to 3 do
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_INT 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 4
3724: PUSH
3725: LD_INT 5
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PPUSH
3740: CALL_OW 380
// un := CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 11
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 69115 0 3
3769: IFFALSE 3800
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3771: LD_ADDR_EXP 39
3775: PUSH
3776: LD_EXP 39
3780: PPUSH
3781: LD_EXP 39
3785: PUSH
3786: LD_INT 1
3788: PLUS
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: CALL_OW 1
3799: ST_TO_ADDR
// end ;
3800: GO 3707
3802: POP
3803: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3804: LD_ADDR_VAR 0 2
3808: PUSH
3809: DOUBLE
3810: LD_INT 1
3812: DEC
3813: ST_TO_ADDR
3814: LD_INT 5
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: LD_INT 7
3822: PUSH
3823: LD_INT 8
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_OWVAR 67
3836: ARRAY
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3985
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3841: LD_INT 0
3843: PPUSH
3844: LD_INT 1
3846: PUSH
3847: LD_INT 1
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: LD_INT 4
3855: PUSH
3856: LD_INT 1
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: CALL_OW 12
3876: ARRAY
3877: PPUSH
3878: LD_INT 3
3880: PUSH
3881: LD_INT 4
3883: PUSH
3884: LD_INT 5
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_OWVAR 67
3900: ARRAY
3901: PPUSH
3902: CALL_OW 380
// un := CreateHuman ;
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: CALL_OW 44
3915: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 15
3923: PPUSH
3924: LD_INT 0
3926: PPUSH
3927: CALL 69115 0 3
3931: IFFALSE 3983
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3933: LD_ADDR_EXP 40
3937: PUSH
3938: LD_EXP 40
3942: PPUSH
3943: LD_EXP 40
3947: PUSH
3948: LD_INT 1
3950: PLUS
3951: PPUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 1
3961: ST_TO_ADDR
// if Prob ( 50 ) then
3962: LD_INT 50
3964: PPUSH
3965: CALL_OW 13
3969: IFFALSE 3983
// ForceSleep ( un , true ) ;
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: CALL_OW 585
// end ; end ;
3983: GO 3838
3985: POP
3986: POP
// end ;
3987: LD_VAR 0 1
3991: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// uc_side := 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation := 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// for i := 1 to 6 do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_INT 6
4025: PUSH
4026: FOR_TO
4027: IFFALSE 4106
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 1
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 380
// un := CreateHuman ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: CALL_OW 44
4070: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_INT 54
4078: PPUSH
4079: LD_INT 88
4081: PPUSH
4082: LD_INT 12
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// SetLives ( un , 1 ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 234
// end ;
4104: GO 4026
4106: POP
4107: POP
// uc_side := 3 ;
4108: LD_ADDR_OWVAR 20
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// uc_nation := 0 ;
4116: LD_ADDR_OWVAR 21
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4124: LD_ADDR_EXP 42
4128: PUSH
4129: EMPTY
4130: ST_TO_ADDR
// apeEngGroup := [ ] ;
4131: LD_ADDR_EXP 43
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: DOUBLE
4144: LD_INT 1
4146: DEC
4147: ST_TO_ADDR
4148: LD_INT 4
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 6
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_OWVAR 67
4170: ARRAY
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4291
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 15
4180: PPUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 4
4186: PUSH
4187: LD_INT 5
4189: PUSH
4190: LD_INT 6
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: LD_OWVAR 67
4203: ARRAY
4204: PPUSH
4205: CALL_OW 380
// un := CreateHuman ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4219: LD_ADDR_EXP 42
4223: PUSH
4224: LD_EXP 42
4228: PPUSH
4229: LD_EXP 42
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: PPUSH
4238: LD_VAR 0 3
4242: PPUSH
4243: CALL_OW 1
4247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: LD_INT 5
4258: PPUSH
4259: CALL_OW 12
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 56
4275: PPUSH
4276: LD_INT 82
4278: PPUSH
4279: LD_INT 6
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 50
// end ;
4289: GO 4172
4291: POP
4292: POP
// for i := 1 to 2 do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 2
4305: PUSH
4306: FOR_TO
4307: IFFALSE 4383
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 16
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: CALL_OW 380
// un := CreateHuman ;
4322: LD_ADDR_VAR 0 3
4326: PUSH
4327: CALL_OW 44
4331: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4332: LD_ADDR_EXP 43
4336: PUSH
4337: LD_EXP 43
4341: PPUSH
4342: LD_EXP 43
4346: PUSH
4347: LD_INT 1
4349: PLUS
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL_OW 1
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_INT 51
4368: PPUSH
4369: LD_INT 77
4371: PPUSH
4372: CALL_OW 428
4376: PPUSH
4377: CALL_OW 52
// end ;
4381: GO 4306
4383: POP
4384: POP
// end ;
4385: LD_VAR 0 1
4389: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4390: LD_EXP 42
4394: PPUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 24
4400: PUSH
4401: LD_INT 600
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 54
4417: PUSH
4418: EMPTY
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: PUSH
4434: LD_INT 66
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: CALL_OW 428
4444: PPUSH
4445: CALL_OW 302
4449: AND
4450: IFFALSE 4535
4452: GO 4454
4454: DISABLE
4455: LD_INT 0
4457: PPUSH
// begin enable ;
4458: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4459: LD_ADDR_VAR 0 1
4463: PUSH
4464: LD_EXP 42
4468: PPUSH
4469: LD_INT 3
4471: PUSH
4472: LD_INT 24
4474: PUSH
4475: LD_INT 600
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 3
4488: PUSH
4489: LD_INT 54
4491: PUSH
4492: EMPTY
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 72
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4533
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 66
4518: PPUSH
4519: LD_INT 89
4521: PPUSH
4522: CALL_OW 428
4526: PPUSH
4527: CALL_OW 120
4531: GO 4508
4533: POP
4534: POP
// end ;
4535: PPOPN 1
4537: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4538: LD_INT 22
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 92
4550: PUSH
4551: LD_INT 54
4553: PUSH
4554: LD_INT 77
4556: PUSH
4557: LD_INT 8
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PPUSH
4570: CALL_OW 69
4574: IFFALSE 4638
4576: GO 4578
4578: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4579: LD_EXP 43
4583: PPUSH
4584: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4588: LD_EXP 43
4592: PPUSH
4593: LD_INT 22
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 92
4605: PUSH
4606: LD_INT 54
4608: PUSH
4609: LD_INT 77
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: PUSH
4630: LD_INT 1
4632: ARRAY
4633: PPUSH
4634: CALL_OW 175
// end ;
4638: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4639: LD_INT 0
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 12
4666: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4667: LD_ADDR_VAR 0 5
4671: PUSH
4672: LD_INT 16
4674: PUSH
4675: LD_INT 17
4677: PUSH
4678: LD_INT 19
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_VAR 0 3
4690: ARRAY
4691: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4692: LD_ADDR_VAR 0 7
4696: PUSH
4697: LD_INT 159
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 137
4709: PUSH
4710: LD_INT 37
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 123
4719: PUSH
4720: LD_INT 55
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 115
4729: PUSH
4730: LD_INT 71
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 106
4739: PUSH
4740: LD_INT 88
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 97
4749: PUSH
4750: LD_INT 114
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 75
4759: PUSH
4760: LD_INT 146
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 206
4778: PUSH
4779: LD_INT 135
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 184
4788: PUSH
4789: LD_INT 111
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 154
4798: PUSH
4799: LD_INT 97
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 122
4808: PUSH
4809: LD_INT 80
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 109
4818: PUSH
4819: LD_INT 78
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 97
4828: PUSH
4829: LD_INT 113
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 75
4838: PUSH
4839: LD_INT 147
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 185
4857: PUSH
4858: LD_INT 72
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 171
4867: PUSH
4868: LD_INT 83
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 161
4877: PUSH
4878: LD_INT 99
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 125
4887: PUSH
4888: LD_INT 82
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 105
4897: PUSH
4898: LD_INT 90
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 96
4907: PUSH
4908: LD_INT 116
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 75
4917: PUSH
4918: LD_INT 147
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_VAR 0 3
4943: ARRAY
4944: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4945: LD_ADDR_VAR 0 4
4949: PUSH
4950: LD_INT 4
4952: PUSH
4953: LD_INT 5
4955: PUSH
4956: LD_INT 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: LD_VAR 0 3
4968: ARRAY
4969: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4970: LD_ADDR_VAR 0 6
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: LD_VAR 0 3
4993: ARRAY
4994: ST_TO_ADDR
// for i := 1 to 2 do
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_INT 2
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5027
// EraseResourceArea ( i , outerSpawnArea ) ;
5011: LD_VAR 0 2
5015: PPUSH
5016: LD_VAR 0 6
5020: PPUSH
5021: CALL_OW 286
5025: GO 5008
5027: POP
5028: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: IFFALSE 5292
// repeat wait ( 0 0$1 ) ;
5079: LD_INT 35
5081: PPUSH
5082: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 2
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PPUSH
5119: CALL_OW 70
5123: IFFALSE 5184
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: LD_VAR 0 6
5134: PPUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5182
// RemoveUnit ( i ) ;
5171: LD_VAR 0 2
5175: PPUSH
5176: CALL_OW 64
5180: GO 5168
5182: POP
5183: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 21
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PPUSH
5199: CALL_OW 70
5203: IFFALSE 5252
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_VAR 0 6
5214: PPUSH
5215: LD_INT 21
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 70
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5250
// ComMoveXY ( i , 113 , 53 ) ;
5233: LD_VAR 0 2
5237: PPUSH
5238: LD_INT 113
5240: PPUSH
5241: LD_INT 53
5243: PPUSH
5244: CALL_OW 111
5248: GO 5230
5250: POP
5251: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5252: LD_VAR 0 6
5256: PPUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 21
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 21
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: PPUSH
5285: CALL_OW 70
5289: NOT
5290: IFFALSE 5079
// case convoyCounter of 1 .. 3 :
5292: LD_EXP 16
5296: PUSH
5297: LD_INT 1
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 3
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5930
5311: POP
// begin uc_side := 3 ;
5312: LD_ADDR_OWVAR 20
5316: PUSH
5317: LD_INT 3
5319: ST_TO_ADDR
// uc_nation := 3 ;
5320: LD_ADDR_OWVAR 21
5324: PUSH
5325: LD_INT 3
5327: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_INT 5
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 7
5346: PUSH
5347: LD_INT 8
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PUSH
5362: LD_EXP 16
5366: MINUS
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5560
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_INT 1
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: CALL_OW 12
5402: ARRAY
5403: PPUSH
5404: LD_INT 4
5406: PUSH
5407: LD_INT 5
5409: PUSH
5410: LD_INT 6
5412: PUSH
5413: LD_INT 7
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_OWVAR 67
5426: ARRAY
5427: PPUSH
5428: CALL_OW 380
// un := CreateHuman ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// SetDir ( un , dir ) ;
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 4
5451: PPUSH
5452: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5456: LD_VAR 0 8
5460: PPUSH
5461: LD_VAR 0 5
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL 69115 0 3
5473: IFFALSE 5558
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5475: LD_ADDR_EXP 41
5479: PUSH
5480: LD_EXP 41
5484: PPUSH
5485: LD_EXP 41
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: LD_VAR 0 8
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5504: LD_VAR 0 8
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5516: LD_VAR 0 8
5520: PPUSH
5521: LD_VAR 0 7
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 111
// wait ( 0 0$2 ) ;
5551: LD_INT 70
5553: PPUSH
5554: CALL_OW 67
// end ; end ;
5558: GO 5368
5560: POP
5561: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: DOUBLE
5568: LD_INT 1
5570: DEC
5571: ST_TO_ADDR
5572: LD_INT 3
5574: PUSH
5575: LD_INT 4
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_OWVAR 67
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5926
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5599: LD_INT 3
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 23
5613: PUSH
5614: LD_INT 24
5616: PUSH
5617: LD_INT 24
5619: PUSH
5620: LD_INT 24
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_OWVAR 67
5635: PPUSH
5636: LD_OWVAR 67
5640: PUSH
5641: LD_INT 2
5643: PLUS
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 42
5659: PUSH
5660: LD_INT 44
5662: PUSH
5663: LD_INT 43
5665: PUSH
5666: LD_INT 44
5668: PUSH
5669: LD_INT 46
5671: PUSH
5672: LD_INT 46
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PUSH
5691: LD_INT 2
5693: PLUS
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: PPUSH
5701: LD_INT 90
5703: PPUSH
5704: CALL 439 0 7
// un := CreateVehicle ;
5708: LD_ADDR_VAR 0 8
5712: PUSH
5713: CALL_OW 45
5717: ST_TO_ADDR
// SetDir ( un , dir ) ;
5718: LD_VAR 0 8
5722: PPUSH
5723: LD_VAR 0 4
5727: PPUSH
5728: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5732: LD_VAR 0 8
5736: PPUSH
5737: LD_VAR 0 5
5741: PPUSH
5742: LD_INT 0
5744: PPUSH
5745: CALL 69115 0 3
5749: IFFALSE 5924
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5751: LD_ADDR_EXP 41
5755: PUSH
5756: LD_EXP 41
5760: PPUSH
5761: LD_EXP 41
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PPUSH
5770: LD_VAR 0 8
5774: PPUSH
5775: CALL_OW 1
5779: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_OWVAR 67
5805: ARRAY
5806: PPUSH
5807: CALL_OW 383
// un := CreateHuman ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: CALL_OW 44
5820: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5821: LD_VAR 0 8
5825: PPUSH
5826: LD_EXP 41
5830: PUSH
5831: LD_EXP 41
5835: ARRAY
5836: PPUSH
5837: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5841: LD_ADDR_EXP 41
5845: PUSH
5846: LD_EXP 41
5850: PPUSH
5851: LD_EXP 41
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: PPUSH
5860: LD_VAR 0 8
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5870: LD_VAR 0 8
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5882: LD_VAR 0 8
5886: PPUSH
5887: LD_VAR 0 7
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: LD_VAR 0 7
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PUSH
5909: LD_INT 2
5911: ARRAY
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$3 ) ;
5917: LD_INT 105
5919: PPUSH
5920: CALL_OW 67
// end ; end ;
5924: GO 5596
5926: POP
5927: POP
// end ; 4 .. 7 :
5928: GO 6503
5930: LD_INT 4
5932: DOUBLE
5933: GREATEREQUAL
5934: IFFALSE 5942
5936: LD_INT 7
5938: DOUBLE
5939: LESSEQUAL
5940: IFTRUE 5944
5942: GO 6502
5944: POP
// begin uc_side := 3 ;
5945: LD_ADDR_OWVAR 20
5949: PUSH
5950: LD_INT 3
5952: ST_TO_ADDR
// uc_nation := 3 ;
5953: LD_ADDR_OWVAR 21
5957: PUSH
5958: LD_INT 3
5960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: DOUBLE
5967: LD_INT 1
5969: DEC
5970: ST_TO_ADDR
5971: LD_INT 2
5973: PUSH
5974: LD_INT 3
5976: PUSH
5977: LD_INT 4
5979: PUSH
5980: LD_INT 4
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: ARRAY
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6160
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5998: LD_INT 0
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 6
6012: PUSH
6013: LD_INT 7
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_OWVAR 67
6026: ARRAY
6027: PPUSH
6028: CALL_OW 380
// un := CreateHuman ;
6032: LD_ADDR_VAR 0 8
6036: PUSH
6037: CALL_OW 44
6041: ST_TO_ADDR
// SetDir ( un , dir ) ;
6042: LD_VAR 0 8
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 5
6065: PPUSH
6066: LD_INT 0
6068: PPUSH
6069: CALL 69115 0 3
6073: IFFALSE 6158
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6075: LD_ADDR_EXP 41
6079: PUSH
6080: LD_EXP 41
6084: PPUSH
6085: LD_EXP 41
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PPUSH
6094: LD_VAR 0 8
6098: PPUSH
6099: CALL_OW 1
6103: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6104: LD_VAR 0 8
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_VAR 0 7
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PUSH
6130: LD_INT 1
6132: ARRAY
6133: PPUSH
6134: LD_VAR 0 7
6138: PUSH
6139: LD_INT 1
6141: ARRAY
6142: PUSH
6143: LD_INT 2
6145: ARRAY
6146: PPUSH
6147: CALL_OW 111
// wait ( 0 0$2 ) ;
6151: LD_INT 70
6153: PPUSH
6154: CALL_OW 67
// end ; end ;
6158: GO 5995
6160: POP
6161: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: DOUBLE
6168: LD_INT 1
6170: DEC
6171: ST_TO_ADDR
6172: LD_INT 2
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_OWVAR 67
6194: ARRAY
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6498
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 2
6220: PPUSH
6221: CALL_OW 12
6225: ARRAY
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 42
6235: PUSH
6236: LD_INT 44
6238: PUSH
6239: LD_INT 43
6241: PUSH
6242: LD_INT 44
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_OWVAR 67
6262: PUSH
6263: LD_INT 1
6265: PLUS
6266: PPUSH
6267: CALL_OW 12
6271: ARRAY
6272: PPUSH
6273: LD_INT 90
6275: PPUSH
6276: CALL 439 0 7
// un := CreateVehicle ;
6280: LD_ADDR_VAR 0 8
6284: PUSH
6285: CALL_OW 45
6289: ST_TO_ADDR
// SetDir ( un , dir ) ;
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6304: LD_VAR 0 8
6308: PPUSH
6309: LD_VAR 0 5
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL 69115 0 3
6321: IFFALSE 6496
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6323: LD_ADDR_EXP 41
6327: PUSH
6328: LD_EXP 41
6332: PPUSH
6333: LD_EXP 41
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 8
6346: PPUSH
6347: CALL_OW 1
6351: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6352: LD_INT 0
6354: PPUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 6
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_OWVAR 67
6377: ARRAY
6378: PPUSH
6379: CALL_OW 383
// un := CreateHuman ;
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6393: LD_VAR 0 8
6397: PPUSH
6398: LD_EXP 41
6402: PUSH
6403: LD_EXP 41
6407: ARRAY
6408: PPUSH
6409: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6413: LD_ADDR_EXP 41
6417: PUSH
6418: LD_EXP 41
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: PPUSH
6432: LD_VAR 0 8
6436: PPUSH
6437: CALL_OW 1
6441: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6442: LD_VAR 0 8
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6454: LD_VAR 0 8
6458: PPUSH
6459: LD_VAR 0 7
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 7
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PUSH
6481: LD_INT 2
6483: ARRAY
6484: PPUSH
6485: CALL_OW 111
// wait ( 0 0$2 ) ;
6489: LD_INT 70
6491: PPUSH
6492: CALL_OW 67
// end ; end ;
6496: GO 6196
6498: POP
6499: POP
// end ; end ;
6500: GO 6503
6502: POP
// repeat wait ( 0 0$1 ) ;
6503: LD_INT 35
6505: PPUSH
6506: CALL_OW 67
// for un in ruConvoySquad do
6510: LD_ADDR_VAR 0 8
6514: PUSH
6515: LD_EXP 41
6519: PUSH
6520: FOR_IN
6521: IFFALSE 7145
// begin if IsInArea ( un , westSouthOutArea ) then
6523: LD_VAR 0 8
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: CALL_OW 308
6535: IFFALSE 6623
// begin if GetType ( un ) = unit_vehicle then
6537: LD_VAR 0 8
6541: PPUSH
6542: CALL_OW 247
6546: PUSH
6547: LD_INT 2
6549: EQUAL
6550: IFFALSE 6582
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6552: LD_ADDR_EXP 41
6556: PUSH
6557: LD_EXP 41
6561: PUSH
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 311
6571: DIFF
6572: ST_TO_ADDR
// RemoveUnit ( un ) ;
6573: LD_VAR 0 8
6577: PPUSH
6578: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6582: LD_ADDR_EXP 15
6586: PUSH
6587: LD_EXP 15
6591: PUSH
6592: LD_INT 1
6594: PLUS
6595: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6596: LD_ADDR_EXP 41
6600: PUSH
6601: LD_EXP 41
6605: PUSH
6606: LD_VAR 0 8
6610: DIFF
6611: ST_TO_ADDR
// RemoveUnit ( un ) ;
6612: LD_VAR 0 8
6616: PPUSH
6617: CALL_OW 64
// break ;
6621: GO 7145
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6623: LD_VAR 0 8
6627: PPUSH
6628: CALL_OW 305
6632: NOT
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 310
6643: NOT
6644: AND
6645: IFFALSE 6663
// ruConvoySquad := ruConvoySquad diff un ;
6647: LD_ADDR_EXP 41
6651: PUSH
6652: LD_EXP 41
6656: PUSH
6657: LD_VAR 0 8
6661: DIFF
6662: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 302
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 314
6682: NOT
6683: AND
6684: IFFALSE 7143
// begin tag := GetTag ( un ) ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_VAR 0 8
6695: PPUSH
6696: CALL_OW 110
6700: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6701: LD_VAR 0 8
6705: PPUSH
6706: LD_VAR 0 7
6710: PUSH
6711: LD_VAR 0 9
6715: PUSH
6716: LD_INT 1
6718: PLUS
6719: ARRAY
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 7
6729: PUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PUSH
6740: LD_INT 2
6742: ARRAY
6743: PPUSH
6744: CALL_OW 297
6748: PUSH
6749: LD_INT 6
6751: LESS
6752: IFFALSE 6935
// begin SetTag ( un , tag + 1 ) ;
6754: LD_VAR 0 8
6758: PPUSH
6759: LD_VAR 0 9
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: PPUSH
6768: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 247
6781: PUSH
6782: LD_INT 2
6784: EQUAL
6785: PUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: OR
6800: IFFALSE 6933
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6802: LD_ADDR_VAR 0 10
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 2
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 91
6819: PUSH
6820: LD_VAR 0 8
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
// if enemy then
6842: LD_VAR 0 10
6846: IFFALSE 6874
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6848: LD_VAR 0 8
6852: PPUSH
6853: LD_VAR 0 10
6857: PPUSH
6858: LD_VAR 0 8
6862: PPUSH
6863: CALL_OW 74
6867: PPUSH
6868: CALL_OW 115
6872: GO 6933
// begin AddComWait ( un , 0 0$4 ) ;
6874: LD_VAR 0 8
6878: PPUSH
6879: LD_INT 140
6881: PPUSH
6882: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6886: LD_VAR 0 8
6890: PPUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 9
6900: PUSH
6901: LD_INT 1
6903: PLUS
6904: ARRAY
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 7
6914: PUSH
6915: LD_VAR 0 9
6919: PUSH
6920: LD_INT 1
6922: PLUS
6923: ARRAY
6924: PUSH
6925: LD_INT 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 174
// end ; end ; end else
6933: GO 7143
// begin if GetClass ( un ) = 4 then
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 257
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 7096
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6950: LD_EXP 41
6954: PPUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: LD_INT 1000
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: IFFALSE 7048
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6992: LD_VAR 0 8
6996: PPUSH
6997: LD_EXP 41
7001: PPUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: LD_INT 1000
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 1
7040: ARRAY
7041: PPUSH
7042: CALL_OW 128
7046: GO 7094
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7048: LD_VAR 0 8
7052: PPUSH
7053: LD_EXP 41
7057: PPUSH
7058: LD_INT 3
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 72
7079: PPUSH
7080: LD_VAR 0 8
7084: PPUSH
7085: CALL_OW 74
7089: PPUSH
7090: CALL_OW 112
7094: GO 7143
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7096: LD_VAR 0 8
7100: PPUSH
7101: LD_VAR 0 7
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ARRAY
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: LD_VAR 0 7
7124: PUSH
7125: LD_VAR 0 9
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: ARRAY
7134: PUSH
7135: LD_INT 2
7137: ARRAY
7138: PPUSH
7139: CALL_OW 114
// end ; end ; end ;
7143: GO 6520
7145: POP
7146: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7147: LD_EXP 41
7151: PPUSH
7152: LD_INT 52
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 72
7176: NOT
7177: IFFALSE 6503
// end ;
7179: LD_VAR 0 1
7183: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7184: LD_EXP 16
7188: PUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: LESS
7200: PUSH
7201: LD_EXP 41
7205: NOT
7206: AND
7207: PUSH
7208: LD_OWVAR 67
7212: PUSH
7213: LD_INT 1
7215: GREATER
7216: AND
7217: IFFALSE 7621
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// begin uc_side := 3 ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_INT 3
7234: ST_TO_ADDR
// uc_nation := 3 ;
7235: LD_ADDR_OWVAR 21
7239: PUSH
7240: LD_INT 3
7242: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 2
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_OWVAR 67
7275: ARRAY
7276: PUSH
7277: FOR_TO
7278: IFFALSE 7542
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 3
7285: PPUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_OWVAR 67
7316: PPUSH
7317: LD_OWVAR 67
7321: PUSH
7322: LD_INT 2
7324: PLUS
7325: PPUSH
7326: CALL_OW 12
7330: ARRAY
7331: PPUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 42
7340: PUSH
7341: LD_INT 44
7343: PUSH
7344: LD_INT 43
7346: PUSH
7347: LD_INT 44
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: LD_INT 46
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_OWVAR 67
7371: PUSH
7372: LD_INT 2
7374: PLUS
7375: PPUSH
7376: CALL_OW 12
7380: ARRAY
7381: PPUSH
7382: LD_INT 90
7384: PPUSH
7385: CALL 439 0 7
// un := CreateVehicle ;
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: CALL_OW 45
7398: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_INT 23
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: CALL 69115 0 3
7426: IFFALSE 7540
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: LD_VAR 0 3
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7457: LD_INT 0
7459: PPUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_OWVAR 67
7482: ARRAY
7483: PPUSH
7484: CALL_OW 383
// un := CreateHuman ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: CALL_OW 44
7497: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7498: LD_VAR 0 3
7502: PPUSH
7503: LD_VAR 0 2
7507: PUSH
7508: LD_VAR 0 2
7512: ARRAY
7513: PPUSH
7514: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 80
7525: PPUSH
7526: LD_INT 139
7528: PPUSH
7529: CALL_OW 111
// wait ( 0 0$3 ) ;
7533: LD_INT 105
7535: PPUSH
7536: CALL_OW 67
// end ; end ;
7540: GO 7277
7542: POP
7543: POP
// for i in tmp do
7544: LD_ADDR_VAR 0 1
7548: PUSH
7549: LD_VAR 0 2
7553: PUSH
7554: FOR_IN
7555: IFFALSE 7619
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 101
7564: PPUSH
7565: LD_INT 102
7567: PPUSH
7568: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7572: LD_VAR 0 1
7576: PPUSH
7577: LD_INT 110
7579: PPUSH
7580: LD_INT 78
7582: PPUSH
7583: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7587: LD_VAR 0 1
7591: PPUSH
7592: LD_INT 75
7594: PPUSH
7595: LD_INT 101
7597: PPUSH
7598: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 83
7612: PPUSH
7613: CALL_OW 174
// end ;
7617: GO 7554
7619: POP
7620: POP
// end ;
7621: PPOPN 3
7623: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7624: LD_EXP 39
7628: PPUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 24
7634: PUSH
7635: LD_INT 1000
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_EXP 40
7655: PPUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 24
7661: PUSH
7662: LD_INT 1000
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: OR
7678: IFFALSE 7777
7680: GO 7682
7682: DISABLE
7683: LD_INT 0
7685: PPUSH
// begin enable ;
7686: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_EXP 39
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: PUSH
7719: LD_EXP 40
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 1000
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 72
7745: UNION
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7775
// if IsSleeping ( i ) then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 555
7759: IFFALSE 7773
// ForceSleep ( i , false ) ;
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL_OW 585
7773: GO 7747
7775: POP
7776: POP
// end ; end_of_file
7777: PPOPN 1
7779: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7780: LD_VAR 0 1
7784: PUSH
7785: LD_EXP 21
7789: EQUAL
7790: IFFALSE 7799
// YouLost ( Heike ) ;
7792: LD_STRING Heike
7794: PPUSH
7795: CALL_OW 104
// if un in apeSoldGroup then
7799: LD_VAR 0 1
7803: PUSH
7804: LD_EXP 42
7808: IN
7809: IFFALSE 7827
// apeSoldGroup := apeSoldGroup diff un ;
7811: LD_ADDR_EXP 42
7815: PUSH
7816: LD_EXP 42
7820: PUSH
7821: LD_VAR 0 1
7825: DIFF
7826: ST_TO_ADDR
// if un in apeEngGroup then
7827: LD_VAR 0 1
7831: PUSH
7832: LD_EXP 43
7836: IN
7837: IFFALSE 7855
// apeEngGroup := apeEngGroup diff un ;
7839: LD_ADDR_EXP 43
7843: PUSH
7844: LD_EXP 43
7848: PUSH
7849: LD_VAR 0 1
7853: DIFF
7854: ST_TO_ADDR
// if un in oilBaseGuard then
7855: LD_VAR 0 1
7859: PUSH
7860: LD_EXP 38
7864: IN
7865: IFFALSE 7883
// oilBaseGuard := oilBaseGuard diff un ;
7867: LD_ADDR_EXP 38
7871: PUSH
7872: LD_EXP 38
7876: PUSH
7877: LD_VAR 0 1
7881: DIFF
7882: ST_TO_ADDR
// if un in ruNorthGroup then
7883: LD_VAR 0 1
7887: PUSH
7888: LD_EXP 39
7892: IN
7893: IFFALSE 7911
// ruNorthGroup := ruNorthGroup diff un ;
7895: LD_ADDR_EXP 39
7899: PUSH
7900: LD_EXP 39
7904: PUSH
7905: LD_VAR 0 1
7909: DIFF
7910: ST_TO_ADDR
// if un in ruSouthGroup then
7911: LD_VAR 0 1
7915: PUSH
7916: LD_EXP 40
7920: IN
7921: IFFALSE 7939
// ruSouthGroup := ruSouthGroup diff un ;
7923: LD_ADDR_EXP 40
7927: PUSH
7928: LD_EXP 40
7932: PUSH
7933: LD_VAR 0 1
7937: DIFF
7938: ST_TO_ADDR
// if un in ruConvoySquad then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_EXP 41
7948: IN
7949: IFFALSE 7967
// ruConvoySquad := ruConvoySquad diff un ;
7951: LD_ADDR_EXP 41
7955: PUSH
7956: LD_EXP 41
7960: PUSH
7961: LD_VAR 0 1
7965: DIFF
7966: ST_TO_ADDR
// end ;
7967: PPOPN 1
7969: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL_OW 264
7979: PUSH
7980: LD_INT 30
7982: EQUAL
7983: IFFALSE 7993
// radarConstructed := true ;
7985: LD_ADDR_EXP 13
7989: PUSH
7990: LD_INT 1
7992: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 264
8002: PUSH
8003: LD_INT 26
8005: EQUAL
8006: IFFALSE 8016
// flamethrowerBuilt := true ;
8008: LD_ADDR_EXP 20
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// end ;
8016: PPOPN 2
8018: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8019: LD_ADDR_EXP 18
8023: PUSH
8024: LD_EXP 18
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ST_TO_ADDR
// if oldId in ruConvoySquad then
8033: LD_VAR 0 2
8037: PUSH
8038: LD_EXP 41
8042: IN
8043: IFFALSE 8061
// ruConvoySquad := ruConvoySquad diff oldId ;
8045: LD_ADDR_EXP 41
8049: PUSH
8050: LD_EXP 41
8054: PUSH
8055: LD_VAR 0 2
8059: DIFF
8060: ST_TO_ADDR
// if newId in ruConvoySquad then
8061: LD_VAR 0 1
8065: PUSH
8066: LD_EXP 41
8070: IN
8071: IFFALSE 8089
// ruConvoySquad := ruConvoySquad diff newId ;
8073: LD_ADDR_EXP 41
8077: PUSH
8078: LD_EXP 41
8082: PUSH
8083: LD_VAR 0 1
8087: DIFF
8088: ST_TO_ADDR
// end ; end_of_file
8089: PPOPN 4
8091: END
// export function Action ; var i , p , un , veh , tmp ; begin
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
8096: PPUSH
8097: PPUSH
8098: PPUSH
8099: PPUSH
// InGameOn ;
8100: CALL_OW 8
// music_nat := 2 ;
8104: LD_ADDR_OWVAR 71
8108: PUSH
8109: LD_INT 2
8111: ST_TO_ADDR
// music_class := music_recon ;
8112: LD_ADDR_OWVAR 72
8116: PUSH
8117: LD_INT 3
8119: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8120: LD_INT 7
8122: PPUSH
8123: LD_INT 6
8125: PPUSH
8126: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8130: LD_INT 7
8132: PPUSH
8133: LD_INT 6
8135: PPUSH
8136: LD_INT 2
8138: PPUSH
8139: LD_INT 30
8141: NEG
8142: PPUSH
8143: CALL 1223 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8147: LD_ADDR_VAR 0 6
8151: PUSH
8152: LD_EXP 21
8156: PUSH
8157: LD_EXP 22
8161: PUSH
8162: LD_EXP 23
8166: PUSH
8167: LD_EXP 24
8171: PUSH
8172: LD_EXP 25
8176: PUSH
8177: LD_EXP 26
8181: PUSH
8182: LD_EXP 28
8186: PUSH
8187: LD_EXP 33
8191: PUSH
8192: LD_EXP 27
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: ST_TO_ADDR
// tmp := tmp diff 0 ;
8208: LD_ADDR_VAR 0 6
8212: PUSH
8213: LD_VAR 0 6
8217: PUSH
8218: LD_INT 0
8220: DIFF
8221: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8222: LD_ADDR_VAR 0 6
8226: PUSH
8227: LD_VAR 0 6
8231: PPUSH
8232: LD_INT 3
8234: PPUSH
8235: CALL 68707 0 2
8239: ST_TO_ADDR
// for i in heikeVehicles do
8240: LD_ADDR_VAR 0 2
8244: PUSH
8245: LD_EXP 35
8249: PUSH
8250: FOR_IN
8251: IFFALSE 8450
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8253: LD_INT 5
8255: PPUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 5
8263: ARRAY
8264: PPUSH
8265: LD_VAR 0 2
8269: PUSH
8270: LD_INT 1
8272: ARRAY
8273: PPUSH
8274: LD_VAR 0 2
8278: PUSH
8279: LD_INT 2
8281: ARRAY
8282: PPUSH
8283: LD_VAR 0 2
8287: PUSH
8288: LD_INT 3
8290: ARRAY
8291: PPUSH
8292: LD_VAR 0 2
8296: PUSH
8297: LD_INT 4
8299: ARRAY
8300: PPUSH
8301: LD_INT 34
8303: PPUSH
8304: CALL 439 0 7
// veh := CreateVehicle ;
8308: LD_ADDR_VAR 0 5
8312: PUSH
8313: CALL_OW 45
8317: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8318: LD_VAR 0 2
8322: PUSH
8323: LD_INT 4
8325: ARRAY
8326: PUSH
8327: LD_INT 51
8329: PUSH
8330: LD_INT 32
8332: PUSH
8333: LD_INT 12
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: LIST
8340: IN
8341: IFFALSE 8421
// begin if i [ 7 ] [ 1 ] then
8343: LD_VAR 0 2
8347: PUSH
8348: LD_INT 7
8350: ARRAY
8351: PUSH
8352: LD_INT 1
8354: ARRAY
8355: IFFALSE 8382
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8357: LD_VAR 0 5
8361: PPUSH
8362: LD_INT 1
8364: PPUSH
8365: LD_VAR 0 2
8369: PUSH
8370: LD_INT 7
8372: ARRAY
8373: PUSH
8374: LD_INT 1
8376: ARRAY
8377: PPUSH
8378: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8382: LD_VAR 0 2
8386: PUSH
8387: LD_INT 7
8389: ARRAY
8390: PUSH
8391: LD_INT 2
8393: ARRAY
8394: IFFALSE 8421
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8396: LD_VAR 0 5
8400: PPUSH
8401: LD_INT 2
8403: PPUSH
8404: LD_VAR 0 2
8408: PUSH
8409: LD_INT 7
8411: ARRAY
8412: PUSH
8413: LD_INT 2
8415: ARRAY
8416: PPUSH
8417: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8421: LD_VAR 0 5
8425: PPUSH
8426: LD_INT 2
8428: PPUSH
8429: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8433: LD_VAR 0 5
8437: PPUSH
8438: LD_INT 4
8440: PPUSH
8441: LD_INT 0
8443: PPUSH
8444: CALL_OW 49
// end ;
8448: GO 8250
8450: POP
8451: POP
// if tmp then
8452: LD_VAR 0 6
8456: IFFALSE 8566
// begin p := 0 ;
8458: LD_ADDR_VAR 0 3
8462: PUSH
8463: LD_INT 0
8465: ST_TO_ADDR
// for i in tmp do
8466: LD_ADDR_VAR 0 2
8470: PUSH
8471: LD_VAR 0 6
8475: PUSH
8476: FOR_IN
8477: IFFALSE 8564
// begin p := p + 1 ;
8479: LD_ADDR_VAR 0 3
8483: PUSH
8484: LD_VAR 0 3
8488: PUSH
8489: LD_INT 1
8491: PLUS
8492: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8493: LD_VAR 0 2
8497: PPUSH
8498: LD_INT 5
8500: PPUSH
8501: LD_INT 0
8503: PPUSH
8504: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8508: LD_VAR 0 2
8512: PPUSH
8513: LD_INT 26
8515: PPUSH
8516: LD_INT 9
8518: PPUSH
8519: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8523: LD_VAR 0 3
8527: PUSH
8528: LD_EXP 35
8532: GREATEREQUAL
8533: PUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: CALL_OW 257
8543: PUSH
8544: LD_INT 3
8546: EQUAL
8547: AND
8548: IFFALSE 8562
// SetClass ( i , 1 ) ;
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_INT 1
8557: PPUSH
8558: CALL_OW 336
// end ;
8562: GO 8476
8564: POP
8565: POP
// end ; if heikeSecondSquad then
8566: LD_EXP 34
8570: IFFALSE 8684
// for i in heikeSecondSquad do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_EXP 34
8581: PUSH
8582: FOR_IN
8583: IFFALSE 8682
// begin p := p + 1 ;
8585: LD_ADDR_VAR 0 3
8589: PUSH
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 1
8597: PLUS
8598: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_INT 6
8606: PPUSH
8607: LD_INT 0
8609: PPUSH
8610: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8614: LD_VAR 0 2
8618: PPUSH
8619: LD_INT 26
8621: PPUSH
8622: LD_INT 9
8624: PPUSH
8625: CALL_OW 118
// ForceSleep ( i , true ) ;
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8641: LD_VAR 0 3
8645: PUSH
8646: LD_EXP 35
8650: GREATEREQUAL
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 257
8661: PUSH
8662: LD_INT 3
8664: EQUAL
8665: AND
8666: IFFALSE 8680
// SetClass ( i , 1 ) ;
8668: LD_VAR 0 2
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: CALL_OW 336
// end ;
8680: GO 8582
8682: POP
8683: POP
// if heikeApes then
8684: LD_EXP 36
8688: IFFALSE 8731
// for i in heikeApes do
8690: LD_ADDR_VAR 0 2
8694: PUSH
8695: LD_EXP 36
8699: PUSH
8700: FOR_IN
8701: IFFALSE 8729
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8703: LD_VAR 0 2
8707: PPUSH
8708: LD_INT 7
8710: PPUSH
8711: LD_INT 0
8713: PPUSH
8714: CALL_OW 49
// ComHold ( i ) ;
8718: LD_VAR 0 2
8722: PPUSH
8723: CALL_OW 140
// end ;
8727: GO 8700
8729: POP
8730: POP
// if Kurt then
8731: LD_EXP 32
8735: IFFALSE 8767
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8737: LD_EXP 32
8741: PPUSH
8742: LD_INT 8
8744: PPUSH
8745: LD_INT 0
8747: PPUSH
8748: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8752: LD_EXP 32
8756: PPUSH
8757: LD_INT 42
8759: PPUSH
8760: LD_INT 32
8762: PPUSH
8763: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8767: LD_INT 70
8769: PPUSH
8770: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8774: LD_EXP 21
8778: PPUSH
8779: LD_STRING DH-Start-1
8781: PPUSH
8782: CALL_OW 88
// if Givi then
8786: LD_EXP 22
8790: IFFALSE 9053
// begin Say ( Givi , DG-Start-2-5 ) ;
8792: LD_EXP 22
8796: PPUSH
8797: LD_STRING DG-Start-2-5
8799: PPUSH
8800: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8804: LD_EXP 21
8808: PPUSH
8809: LD_STRING DH-Start-3
8811: PPUSH
8812: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8816: LD_EXP 21
8820: PPUSH
8821: LD_STRING DH-Start-4
8823: PPUSH
8824: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8828: LD_EXP 22
8832: PPUSH
8833: LD_STRING DG-Start-5
8835: PPUSH
8836: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8840: LD_EXP 21
8844: PPUSH
8845: LD_STRING DH-Start-6
8847: PPUSH
8848: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8852: LD_EXP 22
8856: PPUSH
8857: LD_STRING DG-Start-7
8859: PPUSH
8860: CALL_OW 88
// if Mike then
8864: LD_EXP 23
8868: IFFALSE 9041
// begin Say ( Mike , DM-Start-8 ) ;
8870: LD_EXP 23
8874: PPUSH
8875: LD_STRING DM-Start-8
8877: PPUSH
8878: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8882: LD_EXP 23
8886: PPUSH
8887: LD_STRING DM-Start-9
8889: PPUSH
8890: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8894: LD_EXP 22
8898: PPUSH
8899: LD_STRING DG-Start-10
8901: PPUSH
8902: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8906: LD_EXP 22
8910: PPUSH
8911: LD_STRING DG-Start-11
8913: PPUSH
8914: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8918: LD_EXP 21
8922: PPUSH
8923: LD_STRING DH-Start-12
8925: PPUSH
8926: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8930: LD_EXP 22
8934: PPUSH
8935: LD_STRING DG-Start-13
8937: PPUSH
8938: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8942: LD_EXP 22
8946: PPUSH
8947: LD_STRING DG-Start-14
8949: PPUSH
8950: CALL_OW 88
// if Kaia then
8954: LD_EXP 26
8958: IFFALSE 9041
// begin Say ( Kaia , DK-Start-15 ) ;
8960: LD_EXP 26
8964: PPUSH
8965: LD_STRING DK-Start-15
8967: PPUSH
8968: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8972: LD_EXP 26
8976: PPUSH
8977: LD_STRING DK-Start-16
8979: PPUSH
8980: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8984: LD_EXP 26
8988: PPUSH
8989: LD_STRING DK-Start-17
8991: PPUSH
8992: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8996: LD_INT 10
8998: PPUSH
8999: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9003: LD_EXP 22
9007: PPUSH
9008: LD_EXP 26
9012: PPUSH
9013: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9017: LD_EXP 22
9021: PPUSH
9022: LD_STRING DG-Start-18
9024: PPUSH
9025: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9029: LD_EXP 26
9033: PPUSH
9034: LD_STRING DK-Start-19
9036: PPUSH
9037: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9041: LD_EXP 21
9045: PPUSH
9046: LD_STRING DH-Start-20
9048: PPUSH
9049: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9053: LD_INT 70
9055: PPUSH
9056: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9060: LD_EXP 29
9064: PPUSH
9065: LD_STRING DShar-Start-21
9067: PPUSH
9068: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9072: LD_EXP 21
9076: PPUSH
9077: LD_STRING DH-Start-22
9079: PPUSH
9080: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9084: LD_EXP 29
9088: PPUSH
9089: LD_STRING DShar-Start-23
9091: PPUSH
9092: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9096: LD_EXP 29
9100: PPUSH
9101: LD_STRING DShar-Start-24
9103: PPUSH
9104: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9108: LD_EXP 29
9112: PPUSH
9113: LD_STRING DShar-Start-25
9115: PPUSH
9116: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9120: LD_EXP 29
9124: PPUSH
9125: LD_STRING DShar-Start-26
9127: PPUSH
9128: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9132: LD_EXP 21
9136: PPUSH
9137: LD_STRING DH-Start-27
9139: PPUSH
9140: CALL_OW 88
// if Kaia then
9144: LD_EXP 26
9148: IFFALSE 9190
// begin ComTurnUnit ( Heike , Kaia ) ;
9150: LD_EXP 21
9154: PPUSH
9155: LD_EXP 26
9159: PPUSH
9160: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9164: LD_EXP 26
9168: PPUSH
9169: LD_STRING DK-Start-28
9171: PPUSH
9172: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-Start-29
9183: PPUSH
9184: CALL_OW 88
// end else
9188: GO 9202
// Say ( Heike , DH-Start-a-28 ) ;
9190: LD_EXP 21
9194: PPUSH
9195: LD_STRING DH-Start-a-28
9197: PPUSH
9198: CALL_OW 88
// if Givi then
9202: LD_EXP 22
9206: IFFALSE 9441
// begin ComTurnUnit ( Heike , Givi ) ;
9208: LD_EXP 21
9212: PPUSH
9213: LD_EXP 22
9217: PPUSH
9218: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9222: LD_EXP 22
9226: PPUSH
9227: LD_EXP 21
9231: PPUSH
9232: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9236: LD_EXP 21
9240: PPUSH
9241: LD_STRING DH-Start-30
9243: PPUSH
9244: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9248: LD_EXP 21
9252: PPUSH
9253: LD_STRING DH-Start-31
9255: PPUSH
9256: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9260: LD_EXP 22
9264: PPUSH
9265: LD_STRING DG-Start-32
9267: PPUSH
9268: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9272: LD_EXP 21
9276: PPUSH
9277: LD_STRING DH-Start-33
9279: PPUSH
9280: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9284: LD_EXP 22
9288: PPUSH
9289: LD_STRING DG-Start-34
9291: PPUSH
9292: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9296: LD_EXP 22
9300: PPUSH
9301: LD_STRING DG-Start-35
9303: PPUSH
9304: CALL_OW 88
// if Kurt and not dialogue_skipped then
9308: LD_EXP 32
9312: PUSH
9313: LD_OWVAR 59
9317: NOT
9318: AND
9319: IFFALSE 9350
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9321: LD_EXP 32
9325: PPUSH
9326: LD_INT 28
9328: PPUSH
9329: LD_INT 13
9331: PPUSH
9332: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9336: LD_EXP 32
9340: PPUSH
9341: LD_EXP 21
9345: PPUSH
9346: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9350: LD_EXP 22
9354: PPUSH
9355: LD_STRING DG-Start-36
9357: PPUSH
9358: CALL_OW 88
// if Kurt then
9362: LD_EXP 32
9366: IFFALSE 9439
// begin if not Givi then
9368: LD_EXP 22
9372: NOT
9373: IFFALSE 9389
// Say ( Kurt , DKs-Start-37-a ) else
9375: LD_EXP 32
9379: PPUSH
9380: LD_STRING DKs-Start-37-a
9382: PPUSH
9383: CALL_OW 88
9387: GO 9401
// Say ( Kurt , DKs-Start-37 ) ;
9389: LD_EXP 32
9393: PPUSH
9394: LD_STRING DKs-Start-37
9396: PPUSH
9397: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9401: LD_EXP 32
9405: PPUSH
9406: LD_STRING DKs-Start-38
9408: PPUSH
9409: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9413: LD_EXP 21
9417: PPUSH
9418: LD_EXP 32
9422: PPUSH
9423: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9427: LD_EXP 21
9431: PPUSH
9432: LD_STRING DH-Start-39
9434: PPUSH
9435: CALL_OW 88
// end ; end else
9439: GO 9470
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9441: LD_EXP 34
9445: PPUSH
9446: LD_STRING DArm-Start-a-37
9448: PPUSH
9449: LD_STRING DArf-Start-a-37
9451: PPUSH
9452: CALL 1274 0 3
9456: IFFALSE 9470
// Say ( Heike , DH-Start-39 ) ;
9458: LD_EXP 21
9462: PPUSH
9463: LD_STRING DH-Start-39
9465: PPUSH
9466: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9470: LD_INT 44
9472: PPUSH
9473: LD_INT 25
9475: PPUSH
9476: CALL_OW 428
9480: IFFALSE 9497
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9482: LD_INT 44
9484: PPUSH
9485: LD_INT 25
9487: PPUSH
9488: CALL_OW 428
9492: PPUSH
9493: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9497: LD_EXP 30
9501: PPUSH
9502: LD_INT 5
9504: PPUSH
9505: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9509: LD_EXP 30
9513: PPUSH
9514: LD_INT 44
9516: PPUSH
9517: LD_INT 25
9519: PPUSH
9520: LD_INT 0
9522: PPUSH
9523: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9527: LD_EXP 30
9531: PPUSH
9532: LD_INT 29
9534: PPUSH
9535: LD_INT 12
9537: PPUSH
9538: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9542: LD_INT 35
9544: PPUSH
9545: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9549: LD_OWVAR 59
9553: PUSH
9554: LD_EXP 21
9558: PPUSH
9559: LD_EXP 30
9563: PPUSH
9564: CALL_OW 296
9568: PUSH
9569: LD_INT 8
9571: LESS
9572: OR
9573: PUSH
9574: LD_EXP 30
9578: PPUSH
9579: LD_INT 26
9581: PPUSH
9582: LD_INT 9
9584: PPUSH
9585: CALL_OW 297
9589: PUSH
9590: LD_INT 6
9592: LESS
9593: OR
9594: IFFALSE 9542
// Say ( Olaf , DO-Scout-1 ) ;
9596: LD_EXP 30
9600: PPUSH
9601: LD_STRING DO-Scout-1
9603: PPUSH
9604: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 21
9617: PPUSH
9618: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: LD_VAR 0 6
9631: PUSH
9632: LD_EXP 34
9636: UNION
9637: PUSH
9638: FOR_IN
9639: IFFALSE 9657
// ComTurnUnit ( i , Olaf ) ;
9641: LD_VAR 0 2
9645: PPUSH
9646: LD_EXP 30
9650: PPUSH
9651: CALL_OW 119
9655: GO 9638
9657: POP
9658: POP
// wait ( 0 0$0.3 ) ;
9659: LD_INT 10
9661: PPUSH
9662: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9666: LD_EXP 21
9670: PPUSH
9671: LD_EXP 30
9675: PPUSH
9676: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9680: LD_EXP 21
9684: PPUSH
9685: LD_EXP 30
9689: PPUSH
9690: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9694: LD_EXP 21
9698: PPUSH
9699: LD_STRING DH-Scout-2
9701: PPUSH
9702: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9706: LD_EXP 30
9710: PPUSH
9711: LD_STRING DO-Scout-3
9713: PPUSH
9714: CALL_OW 88
// if Mike and Givi then
9718: LD_EXP 23
9722: PUSH
9723: LD_EXP 22
9727: AND
9728: IFFALSE 9744
// Say ( Olaf , DO-Scout-4 ) else
9730: LD_EXP 30
9734: PPUSH
9735: LD_STRING DO-Scout-4
9737: PPUSH
9738: CALL_OW 88
9742: GO 9844
// begin if Mike then
9744: LD_EXP 23
9748: IFFALSE 9776
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9750: LD_EXP 30
9754: PPUSH
9755: LD_STRING DO-Scout-a-4
9757: PPUSH
9758: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9762: LD_EXP 21
9766: PPUSH
9767: LD_STRING DH-Scout-a-5
9769: PPUSH
9770: CALL_OW 88
// end else
9774: GO 9844
// if Givi then
9776: LD_EXP 22
9780: IFFALSE 9808
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9782: LD_EXP 30
9786: PPUSH
9787: LD_STRING DO-Scout-b-4
9789: PPUSH
9790: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9794: LD_EXP 21
9798: PPUSH
9799: LD_STRING DH-Scout-b-5
9801: PPUSH
9802: CALL_OW 88
// end else
9806: GO 9844
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9808: LD_EXP 30
9812: PPUSH
9813: LD_STRING DO-Scout-f-4
9815: PPUSH
9816: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9820: LD_EXP 21
9824: PPUSH
9825: LD_STRING DH-Scout-f-5
9827: PPUSH
9828: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9832: LD_EXP 30
9836: PPUSH
9837: LD_STRING DO-Scout-f-6
9839: PPUSH
9840: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9844: LD_EXP 21
9848: PPUSH
9849: LD_STRING DH-Scout-5
9851: PPUSH
9852: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9856: LD_EXP 30
9860: PPUSH
9861: LD_STRING DO-Scout-6
9863: PPUSH
9864: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9868: LD_EXP 30
9872: PPUSH
9873: LD_STRING DO-Scout-7
9875: PPUSH
9876: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9880: LD_EXP 21
9884: PPUSH
9885: LD_STRING DH-Scout-8
9887: PPUSH
9888: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9892: LD_EXP 21
9896: PPUSH
9897: LD_STRING DH-Scout-9
9899: PPUSH
9900: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9904: LD_EXP 30
9908: PPUSH
9909: LD_STRING DO-Scout-10
9911: PPUSH
9912: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9916: LD_EXP 30
9920: PPUSH
9921: LD_STRING DO-Scout-12
9923: PPUSH
9924: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9928: LD_EXP 30
9932: PPUSH
9933: LD_STRING DO-Scout-13
9935: PPUSH
9936: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9940: LD_EXP 30
9944: PPUSH
9945: LD_STRING DO-Scout-14
9947: PPUSH
9948: CALL_OW 88
// if Givi then
9952: LD_EXP 22
9956: IFFALSE 9982
// begin Say ( Givi , DG-Scout-15 ) ;
9958: LD_EXP 22
9962: PPUSH
9963: LD_STRING DG-Scout-15
9965: PPUSH
9966: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9970: LD_EXP 26
9974: PPUSH
9975: LD_STRING DK-Scout-16
9977: PPUSH
9978: CALL_OW 88
// end ; if not dialogue_skipped then
9982: LD_OWVAR 59
9986: NOT
9987: IFFALSE 10108
// begin async ;
9989: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9990: LD_EXP 30
9994: PPUSH
9995: LD_STRING DO-Scout-17
9997: PPUSH
9998: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10002: LD_INT 55
10004: PPUSH
10005: LD_INT 77
10007: PPUSH
10008: LD_INT 2
10010: PPUSH
10011: LD_INT 6
10013: NEG
10014: PPUSH
10015: CALL 1223 0 4
// wait ( 10 ) ;
10019: LD_INT 10
10021: PPUSH
10022: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10026: LD_INT 55
10028: PPUSH
10029: LD_INT 77
10031: PPUSH
10032: CALL_OW 84
// wait ( 0 0$10 ) ;
10036: LD_INT 350
10038: PPUSH
10039: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10043: LD_EXP 30
10047: PPUSH
10048: LD_STRING DO-Scout-18
10050: PPUSH
10051: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10055: LD_INT 204
10057: PPUSH
10058: LD_INT 107
10060: PPUSH
10061: LD_INT 2
10063: PPUSH
10064: LD_INT 12
10066: NEG
10067: PPUSH
10068: CALL 1223 0 4
// wait ( 10 ) ;
10072: LD_INT 10
10074: PPUSH
10075: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10079: LD_INT 204
10081: PPUSH
10082: LD_INT 107
10084: PPUSH
10085: CALL_OW 84
// wait ( 0 0$10 ) ;
10089: LD_INT 350
10091: PPUSH
10092: CALL_OW 67
// sync ;
10096: SYNC
// CenterNowOnUnits ( Heike ) ;
10097: LD_EXP 21
10101: PPUSH
10102: CALL_OW 87
// end else
10106: GO 10142
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10108: LD_INT 55
10110: PPUSH
10111: LD_INT 77
10113: PPUSH
10114: LD_INT 2
10116: PPUSH
10117: LD_INT 6
10119: NEG
10120: PPUSH
10121: CALL 1223 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10125: LD_INT 204
10127: PPUSH
10128: LD_INT 107
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: LD_INT 12
10136: NEG
10137: PPUSH
10138: CALL 1223 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10142: LD_EXP 30
10146: PPUSH
10147: LD_STRING DO-Scout-19
10149: PPUSH
10150: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10154: LD_EXP 30
10158: PPUSH
10159: LD_STRING DO-Scout-20
10161: PPUSH
10162: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10166: LD_EXP 21
10170: PPUSH
10171: LD_STRING DH-Scout-21
10173: PPUSH
10174: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10178: LD_EXP 21
10182: PPUSH
10183: LD_STRING DH-Scout-22
10185: PPUSH
10186: CALL_OW 88
// InGameOff ;
10190: CALL_OW 9
// if heikeSecondSquad then
10194: LD_EXP 34
10198: IFFALSE 10212
// ForceSleep ( heikeSecondSquad , false ) ;
10200: LD_EXP 34
10204: PPUSH
10205: LD_INT 0
10207: PPUSH
10208: CALL_OW 585
// if Givi then
10212: LD_EXP 22
10216: IFFALSE 10231
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10218: LD_INT 13
10220: PPUSH
10221: LD_INT 2
10223: PPUSH
10224: LD_INT 1
10226: PPUSH
10227: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10231: LD_STRING Road
10233: PPUSH
10234: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10238: LD_ADDR_VAR 0 2
10242: PUSH
10243: LD_INT 22
10245: PUSH
10246: LD_INT 5
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 69
10271: PUSH
10272: FOR_IN
10273: IFFALSE 10289
// SetSide ( i , 2 ) ;
10275: LD_VAR 0 2
10279: PPUSH
10280: LD_INT 2
10282: PPUSH
10283: CALL_OW 235
10287: GO 10272
10289: POP
10290: POP
// SaveForQuickRestart ;
10291: CALL_OW 22
// music_class := music_auto ;
10295: LD_ADDR_OWVAR 72
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// end ;
10303: LD_VAR 0 1
10307: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10308: LD_INT 2
10310: PPUSH
10311: LD_INT 9
10313: PPUSH
10314: CALL_OW 294
10318: IFFALSE 10685
10320: GO 10322
10322: DISABLE
// begin DialogueOn ;
10323: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10327: LD_INT 111
10329: PPUSH
10330: LD_INT 72
10332: PPUSH
10333: LD_INT 2
10335: PPUSH
10336: LD_INT 20
10338: NEG
10339: PPUSH
10340: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10344: LD_INT 111
10346: PPUSH
10347: LD_INT 72
10349: PPUSH
10350: LD_INT 2
10352: PPUSH
10353: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10357: LD_INT 111
10359: PPUSH
10360: LD_INT 72
10362: PPUSH
10363: CALL_OW 86
// if IsOk ( Kamil ) then
10367: LD_EXP 25
10371: PPUSH
10372: CALL_OW 302
10376: IFFALSE 10493
// begin Say ( Kamil , DKam-Cross-1 ) ;
10378: LD_EXP 25
10382: PPUSH
10383: LD_STRING DKam-Cross-1
10385: PPUSH
10386: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10390: LD_EXP 25
10394: PPUSH
10395: LD_STRING DKam-Cross-2
10397: PPUSH
10398: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10402: LD_EXP 25
10406: PPUSH
10407: LD_STRING DKam-Cross-3
10409: PPUSH
10410: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10414: LD_EXP 25
10418: PPUSH
10419: LD_STRING DKam-Cross-4
10421: PPUSH
10422: CALL_OW 88
// if IsOk ( Ibrahim ) then
10426: LD_EXP 24
10430: PPUSH
10431: CALL_OW 302
10435: IFFALSE 10491
// begin if ibrahimJoinedIn04 then
10437: LD_EXP 4
10441: IFFALSE 10455
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10443: LD_EXP 24
10447: PPUSH
10448: LD_STRING DI-Cross-b-5
10450: PPUSH
10451: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10455: LD_EXP 24
10459: PPUSH
10460: LD_STRING DI-Cross-b-6
10462: PPUSH
10463: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10467: LD_EXP 24
10471: PPUSH
10472: LD_STRING DI-Cross-b-7
10474: PPUSH
10475: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10479: LD_EXP 25
10483: PPUSH
10484: LD_STRING DKam-Cross-8
10486: PPUSH
10487: CALL_OW 88
// end ; end else
10491: GO 10651
// if IsOk ( Sophia ) then
10493: LD_EXP 27
10497: PPUSH
10498: CALL_OW 302
10502: IFFALSE 10619
// begin Say ( Sophia , DS-Cross-1 ) ;
10504: LD_EXP 27
10508: PPUSH
10509: LD_STRING DS-Cross-1
10511: PPUSH
10512: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10516: LD_EXP 27
10520: PPUSH
10521: LD_STRING DS-Cross-2
10523: PPUSH
10524: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10528: LD_EXP 27
10532: PPUSH
10533: LD_STRING DS-Cross-3
10535: PPUSH
10536: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10540: LD_EXP 27
10544: PPUSH
10545: LD_STRING DS-Cross-4
10547: PPUSH
10548: CALL_OW 88
// if IsOk ( Ibrahim ) then
10552: LD_EXP 24
10556: PPUSH
10557: CALL_OW 302
10561: IFFALSE 10617
// begin if ibrahimJoinedIn04 then
10563: LD_EXP 4
10567: IFFALSE 10581
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10569: LD_EXP 24
10573: PPUSH
10574: LD_STRING DI-Cross-b-5
10576: PPUSH
10577: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10581: LD_EXP 24
10585: PPUSH
10586: LD_STRING DI-Cross-b-6
10588: PPUSH
10589: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10593: LD_EXP 24
10597: PPUSH
10598: LD_STRING DI-Cross-b-7
10600: PPUSH
10601: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10605: LD_EXP 27
10609: PPUSH
10610: LD_STRING DS-Cross-8
10612: PPUSH
10613: CALL_OW 88
// end ; end else
10617: GO 10651
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10619: LD_EXP 34
10623: PPUSH
10624: LD_INT 50
10626: PUSH
10627: EMPTY
10628: LIST
10629: PPUSH
10630: CALL_OW 72
10634: IFFALSE 10651
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10636: LD_EXP 34
10640: PPUSH
10641: LD_STRING DArm-Cross-c-1
10643: PPUSH
10644: LD_STRING DArf-Cross-c-1
10646: PPUSH
10647: CALL 1274 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10651: LD_EXP 57
10655: PPUSH
10656: LD_INT 2
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 322
// DialogueOff ;
10666: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10670: LD_STRING Crane
10672: PPUSH
10673: CALL_OW 337
// spottedCrossRoad := true ;
10677: LD_ADDR_EXP 8
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// end ;
10685: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10686: LD_INT 22
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: LD_INT 30
10701: PUSH
10702: LD_INT 0
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 30
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PPUSH
10728: CALL_OW 69
10732: PUSH
10733: LD_EXP 26
10737: PPUSH
10738: CALL_OW 302
10742: PUSH
10743: LD_EXP 34
10747: OR
10748: AND
10749: IFFALSE 10961
10751: GO 10753
10753: DISABLE
// begin DialogueOn ;
10754: CALL_OW 6
// if Kaia then
10758: LD_EXP 26
10762: IFFALSE 10775
// CenterNowOnUnits ( Kaia ) else
10764: LD_EXP 26
10768: PPUSH
10769: CALL_OW 87
10773: GO 10784
// CenterNowOnUnits ( Heike ) ;
10775: LD_EXP 21
10779: PPUSH
10780: CALL_OW 87
// if IsOk ( Kaia ) then
10784: LD_EXP 26
10788: PPUSH
10789: CALL_OW 302
10793: IFFALSE 10809
// Say ( Kaia , DK-Cam-1 ) else
10795: LD_EXP 26
10799: PPUSH
10800: LD_STRING DK-Cam-1
10802: PPUSH
10803: CALL_OW 88
10807: GO 10824
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10809: LD_EXP 34
10813: PPUSH
10814: LD_STRING DArm-Cam-1
10816: PPUSH
10817: LD_STRING DArf-Cam-1
10819: PPUSH
10820: CALL 1274 0 3
// Say ( Heike , DH-Cam-2 ) ;
10824: LD_EXP 21
10828: PPUSH
10829: LD_STRING DH-Cam-2
10831: PPUSH
10832: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10836: LD_EXP 21
10840: PPUSH
10841: LD_STRING DH-Cam-3
10843: PPUSH
10844: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10848: LD_EXP 21
10852: PPUSH
10853: LD_STRING DH-Cam-4
10855: PPUSH
10856: CALL_OW 88
// if IsOk ( Kaia ) then
10860: LD_EXP 26
10864: PPUSH
10865: CALL_OW 302
10869: IFFALSE 10885
// Say ( Kaia , DK-Cam-5 ) else
10871: LD_EXP 26
10875: PPUSH
10876: LD_STRING DK-Cam-5
10878: PPUSH
10879: CALL_OW 88
10883: GO 10900
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10885: LD_EXP 34
10889: PPUSH
10890: LD_STRING DArm-Cam-5
10892: PPUSH
10893: LD_STRING DArf-Cam-5
10895: PPUSH
10896: CALL 1274 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10900: LD_EXP 30
10904: PPUSH
10905: LD_STRING DO-Cam-6
10907: PPUSH
10908: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10912: LD_EXP 30
10916: PPUSH
10917: LD_STRING DO-Cam-7
10919: PPUSH
10920: CALL_OW 88
// DialogueOff ;
10924: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10928: LD_STRING Radar
10930: PPUSH
10931: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10935: LD_INT 6
10937: PPUSH
10938: LD_INT 2
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10948: LD_INT 20
10950: PPUSH
10951: LD_INT 2
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 324
// end ;
10961: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10962: LD_INT 22
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: LD_INT 34
10977: PUSH
10978: LD_INT 30
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 35
10987: PUSH
10988: LD_INT 30
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PPUSH
11004: CALL_OW 69
11008: IFFALSE 11020
11010: GO 11012
11012: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11013: LD_STRING RadarDone
11015: PPUSH
11016: CALL_OW 337
11020: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 34
11033: PUSH
11034: LD_EXP 50
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 69
11051: IFFALSE 11063
11053: GO 11055
11055: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11056: LD_STRING CraneDone
11058: PPUSH
11059: CALL_OW 337
11063: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11064: LD_EXP 30
11068: PPUSH
11069: CALL_OW 302
11073: PUSH
11074: LD_EXP 33
11078: PPUSH
11079: CALL_OW 302
11083: AND
11084: PUSH
11085: LD_INT 6
11087: PPUSH
11088: LD_INT 2
11090: PPUSH
11091: CALL_OW 321
11095: PUSH
11096: LD_INT 2
11098: EQUAL
11099: AND
11100: PUSH
11101: LD_EXP 33
11105: PPUSH
11106: LD_EXP 21
11110: PPUSH
11111: CALL_OW 296
11115: PUSH
11116: LD_INT 10
11118: LESS
11119: PUSH
11120: LD_EXP 33
11124: PPUSH
11125: CALL_OW 310
11129: OR
11130: AND
11131: IFFALSE 11345
11133: GO 11135
11135: DISABLE
// begin DialogueOn ;
11136: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11140: LD_EXP 33
11144: PPUSH
11145: LD_STRING DA-RC-1
11147: PPUSH
11148: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11152: LD_EXP 33
11156: PPUSH
11157: LD_STRING DA-RC-2
11159: PPUSH
11160: CALL_OW 88
// if IsOk ( Kaia ) then
11164: LD_EXP 26
11168: PPUSH
11169: CALL_OW 302
11173: IFFALSE 11247
// begin Say ( Kaia , DK-RC-3 ) ;
11175: LD_EXP 26
11179: PPUSH
11180: LD_STRING DK-RC-3
11182: PPUSH
11183: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11187: LD_EXP 33
11191: PPUSH
11192: LD_STRING DA-RC-4
11194: PPUSH
11195: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11199: LD_EXP 26
11203: PPUSH
11204: LD_STRING DK-RC-5
11206: PPUSH
11207: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11211: LD_EXP 33
11215: PPUSH
11216: LD_STRING DA-RC-6
11218: PPUSH
11219: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11223: LD_EXP 26
11227: PPUSH
11228: LD_STRING DK-RC-7
11230: PPUSH
11231: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11235: LD_EXP 33
11239: PPUSH
11240: LD_STRING DA-RC-8
11242: PPUSH
11243: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11247: LD_EXP 21
11251: PPUSH
11252: LD_STRING DH-RC-9
11254: PPUSH
11255: CALL_OW 88
// if IsOk ( Markov ) then
11259: LD_EXP 28
11263: PPUSH
11264: CALL_OW 302
11268: IFFALSE 11296
// begin Say ( Markov , DMar-RC-10 ) ;
11270: LD_EXP 28
11274: PPUSH
11275: LD_STRING DMar-RC-10
11277: PPUSH
11278: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11282: LD_EXP 28
11286: PPUSH
11287: LD_STRING DMar-RC-11
11289: PPUSH
11290: CALL_OW 88
// end else
11294: GO 11308
// begin Say ( Olaf , DO-RC-a-10 ) ;
11296: LD_EXP 30
11300: PPUSH
11301: LD_STRING DO-RC-a-10
11303: PPUSH
11304: CALL_OW 88
// end ; DialogueOff ;
11308: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11312: LD_STRING RemoteControl
11314: PPUSH
11315: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11319: LD_INT 15
11321: PPUSH
11322: LD_INT 2
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11332: LD_INT 22
11334: PPUSH
11335: LD_INT 2
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 324
// end ;
11345: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11346: LD_INT 12
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: IFFALSE 11730
11365: GO 11367
11367: DISABLE
11368: LD_INT 0
11370: PPUSH
// begin PrepareWestBase ;
11371: CALL 3992 0 0
// westBaseSpotted := true ;
11375: LD_ADDR_EXP 5
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11383: LD_INT 70
11385: PPUSH
11386: CALL_OW 67
// InGameOn ;
11390: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11394: LD_INT 56
11396: PPUSH
11397: LD_INT 77
11399: PPUSH
11400: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11404: LD_INT 56
11406: PPUSH
11407: LD_INT 77
11409: PPUSH
11410: LD_INT 2
11412: PPUSH
11413: LD_INT 12
11415: NEG
11416: PPUSH
11417: CALL_OW 330
// wait ( 0 0$2 ) ;
11421: LD_INT 70
11423: PPUSH
11424: CALL_OW 67
// DialogueOn ;
11428: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11432: LD_EXP 21
11436: PPUSH
11437: LD_STRING DH-Rbase-1
11439: PPUSH
11440: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11444: LD_EXP 26
11448: PPUSH
11449: LD_STRING DK-Rbase-2
11451: PPUSH
11452: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11456: LD_EXP 26
11460: PPUSH
11461: LD_STRING DK-Rbase-3
11463: PPUSH
11464: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11468: LD_EXP 26
11472: PPUSH
11473: LD_STRING DK-Rbase-4
11475: PPUSH
11476: CALL_OW 88
// DialogueOff ;
11480: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11484: LD_INT 56
11486: PPUSH
11487: LD_INT 77
11489: PPUSH
11490: LD_INT 2
11492: PPUSH
11493: CALL_OW 331
// InGameOff ;
11497: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11501: LD_INT 35
11503: PPUSH
11504: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11508: LD_EXP 42
11512: NOT
11513: PUSH
11514: LD_EXP 43
11518: NOT
11519: AND
11520: IFFALSE 11501
// wait ( 0 0$2 ) ;
11522: LD_INT 70
11524: PPUSH
11525: CALL_OW 67
// if IsOk ( Kaia ) then
11529: LD_EXP 26
11533: PPUSH
11534: CALL_OW 302
11538: IFFALSE 11653
// begin DialogueOn ;
11540: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11544: LD_INT 56
11546: PPUSH
11547: LD_INT 81
11549: PPUSH
11550: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11554: LD_EXP 26
11558: PPUSH
11559: LD_STRING DK-Rbase-5
11561: PPUSH
11562: CALL_OW 88
// if IsOk ( Givi ) then
11566: LD_EXP 22
11570: PPUSH
11571: CALL_OW 302
11575: IFFALSE 11649
// begin Say ( Givi , DG-Rbase-6 ) ;
11577: LD_EXP 22
11581: PPUSH
11582: LD_STRING DG-Rbase-6
11584: PPUSH
11585: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11589: LD_EXP 22
11593: PPUSH
11594: LD_STRING DG-Rbase-7
11596: PPUSH
11597: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11601: LD_EXP 26
11605: PPUSH
11606: LD_STRING DK-Rbase-8
11608: PPUSH
11609: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11613: LD_EXP 22
11617: PPUSH
11618: LD_STRING DG-Rbase-9
11620: PPUSH
11621: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11625: LD_EXP 22
11629: PPUSH
11630: LD_STRING DG-Rbase-10
11632: PPUSH
11633: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11637: LD_EXP 26
11641: PPUSH
11642: LD_STRING DK-Rbase-11
11644: PPUSH
11645: CALL_OW 88
// end ; DialogueOff ;
11649: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11653: LD_ADDR_VAR 0 1
11657: PUSH
11658: LD_INT 12
11660: PPUSH
11661: LD_INT 22
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 21
11673: PUSH
11674: LD_INT 3
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 70
11689: PUSH
11690: FOR_IN
11691: IFFALSE 11707
// SetSide ( i , 2 ) ;
11693: LD_VAR 0 1
11697: PPUSH
11698: LD_INT 2
11700: PPUSH
11701: CALL_OW 235
11705: GO 11690
11707: POP
11708: POP
// westBaseCaptured := true ;
11709: LD_ADDR_EXP 9
11713: PUSH
11714: LD_INT 1
11716: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11717: LD_INT 0
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 324
// end ;
11730: PPOPN 1
11732: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11733: LD_EXP 38
11737: NOT
11738: PUSH
11739: LD_INT 10
11741: PPUSH
11742: CALL_OW 255
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: OR
11751: IFFALSE 11888
11753: GO 11755
11755: DISABLE
// begin DialogueOn ;
11756: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11760: LD_EXP 21
11764: PPUSH
11765: LD_STRING DH-Goal-1
11767: PPUSH
11768: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11772: LD_EXP 29
11776: PPUSH
11777: LD_STRING DShar-Goal-2
11779: PPUSH
11780: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11784: LD_EXP 21
11788: PPUSH
11789: LD_STRING DH-Goal-3
11791: PPUSH
11792: CALL_OW 88
// if reinforcementsAllowed then
11796: LD_EXP 14
11800: IFFALSE 11826
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11802: LD_EXP 29
11806: PPUSH
11807: LD_STRING DShar-Goal-4
11809: PPUSH
11810: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11814: LD_EXP 21
11818: PPUSH
11819: LD_STRING DH-Goal-5
11821: PPUSH
11822: CALL_OW 88
// end ; DialogueOff ;
11826: CALL_OW 7
// eastBaseCaptured := true ;
11830: LD_ADDR_EXP 10
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11838: LD_STRING BaseCaptured
11840: PPUSH
11841: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11845: LD_INT 10
11847: PPUSH
11848: LD_INT 2
11850: PPUSH
11851: CALL_OW 235
// if not reinforcementsAllowed then
11855: LD_EXP 14
11859: NOT
11860: IFFALSE 11864
// exit ;
11862: GO 11888
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11864: LD_INT 21000
11866: PUSH
11867: LD_INT 1050
11869: NEG
11870: PPUSH
11871: LD_INT 1050
11873: PPUSH
11874: CALL_OW 12
11878: PLUS
11879: PPUSH
11880: CALL_OW 67
// PrepareReinforcements ;
11884: CALL 2250 0 0
// end ;
11888: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11889: LD_INT 22
11891: PUSH
11892: LD_INT 2
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: LD_INT 13
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 69
11917: IFFALSE 11934
11919: GO 11921
11921: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11922: LD_EXP 22
11926: PPUSH
11927: LD_STRING DG-Lab-1
11929: PPUSH
11930: CALL_OW 88
// end ;
11934: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11935: LD_INT 5
11937: PPUSH
11938: LD_INT 2
11940: PPUSH
11941: CALL_OW 321
11945: PUSH
11946: LD_INT 2
11948: EQUAL
11949: PUSH
11950: LD_EXP 22
11954: PPUSH
11955: CALL_OW 302
11959: AND
11960: IFFALSE 12021
11962: GO 11964
11964: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11965: LD_EXP 22
11969: PPUSH
11970: LD_STRING DG-Stim-1
11972: PPUSH
11973: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11977: LD_EXP 21
11981: PPUSH
11982: LD_STRING DH-Stim-2
11984: PPUSH
11985: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11989: LD_EXP 22
11993: PPUSH
11994: LD_STRING DG-Stim-3
11996: PPUSH
11997: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12001: LD_EXP 21
12005: PPUSH
12006: LD_STRING DH-Stim-4
12008: PPUSH
12009: CALL_OW 88
// drugsResearched := true ;
12013: LD_ADDR_EXP 11
12017: PUSH
12018: LD_INT 1
12020: ST_TO_ADDR
// end ;
12021: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12022: LD_EXP 11
12026: IFFALSE 12338
12028: GO 12030
12030: DISABLE
12031: LD_INT 0
12033: PPUSH
12034: PPUSH
12035: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12036: LD_ADDR_VAR 0 2
12040: PUSH
12041: LD_EXP 21
12045: PUSH
12046: LD_EXP 22
12050: PUSH
12051: LD_EXP 30
12055: PUSH
12056: LD_EXP 28
12060: PUSH
12061: LD_EXP 26
12065: PUSH
12066: LD_EXP 27
12070: PUSH
12071: LD_EXP 32
12075: PUSH
12076: LD_EXP 25
12080: PUSH
12081: LD_EXP 23
12085: PUSH
12086: LD_EXP 24
12090: PUSH
12091: LD_EXP 33
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: LD_STRING H
12116: PUSH
12117: LD_STRING G
12119: PUSH
12120: LD_STRING O
12122: PUSH
12123: LD_STRING Mar
12125: PUSH
12126: LD_STRING K
12128: PUSH
12129: LD_STRING S
12131: PUSH
12132: LD_STRING Ks
12134: PUSH
12135: LD_STRING Kam
12137: PUSH
12138: LD_STRING M
12140: PUSH
12141: LD_STRING I
12143: PUSH
12144: LD_STRING A
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12160: LD_INT 35
12162: PPUSH
12163: CALL_OW 67
// for i := tmp downto 1 do
12167: LD_ADDR_VAR 0 1
12171: PUSH
12172: DOUBLE
12173: LD_VAR 0 2
12177: INC
12178: ST_TO_ADDR
12179: LD_INT 1
12181: PUSH
12182: FOR_DOWNTO
12183: IFFALSE 12329
// if GetLives ( tmp [ i ] ) < 250 then
12185: LD_VAR 0 2
12189: PUSH
12190: LD_VAR 0 1
12194: ARRAY
12195: PPUSH
12196: CALL_OW 256
12200: PUSH
12201: LD_INT 250
12203: LESS
12204: IFFALSE 12327
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12206: LD_ADDR_EXP 19
12210: PUSH
12211: LD_EXP 19
12215: PUSH
12216: LD_INT 1
12218: PLUS
12219: ST_TO_ADDR
// DialogueOn ;
12220: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12224: LD_VAR 0 2
12228: PUSH
12229: LD_VAR 0 1
12233: ARRAY
12234: PPUSH
12235: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12239: LD_VAR 0 2
12243: PUSH
12244: LD_VAR 0 1
12248: ARRAY
12249: PPUSH
12250: LD_STRING D
12252: PUSH
12253: LD_VAR 0 3
12257: PUSH
12258: LD_VAR 0 1
12262: ARRAY
12263: STR
12264: PUSH
12265: LD_STRING -Stim-a-1
12267: STR
12268: PPUSH
12269: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: LD_VAR 0 2
12282: PPUSH
12283: LD_VAR 0 1
12287: PPUSH
12288: CALL_OW 3
12292: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12293: LD_ADDR_VAR 0 3
12297: PUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 3
12312: ST_TO_ADDR
// drugsTested := true ;
12313: LD_ADDR_EXP 6
12317: PUSH
12318: LD_INT 1
12320: ST_TO_ADDR
// DialogueOff ;
12321: CALL_OW 7
// break ;
12325: GO 12329
// end ;
12327: GO 12182
12329: POP
12330: POP
// until not tmp ;
12331: LD_VAR 0 2
12335: NOT
12336: IFFALSE 12160
// end ;
12338: PPOPN 3
12340: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12341: LD_INT 22
12343: PUSH
12344: LD_INT 2
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 34
12353: PUSH
12354: LD_INT 31
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: LD_INT 22
12372: PUSH
12373: LD_INT 2
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 33
12382: PUSH
12383: LD_INT 2
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 69
12398: AND
12399: IFFALSE 12412
12401: GO 12403
12403: DISABLE
// remoteControlConstructed := true ;
12404: LD_ADDR_EXP 12
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
12412: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12413: LD_EXP 12
12417: IFFALSE 12717
12419: GO 12421
12421: DISABLE
12422: LD_INT 0
12424: PPUSH
12425: PPUSH
12426: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12427: LD_ADDR_VAR 0 2
12431: PUSH
12432: LD_EXP 21
12436: PUSH
12437: LD_EXP 22
12441: PUSH
12442: LD_EXP 30
12446: PUSH
12447: LD_EXP 28
12451: PUSH
12452: LD_EXP 26
12456: PUSH
12457: LD_EXP 27
12461: PUSH
12462: LD_EXP 32
12466: PUSH
12467: LD_EXP 25
12471: PUSH
12472: LD_EXP 23
12476: PUSH
12477: LD_EXP 24
12481: PUSH
12482: LD_EXP 33
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12500: LD_ADDR_VAR 0 3
12504: PUSH
12505: LD_STRING H
12507: PUSH
12508: LD_STRING G
12510: PUSH
12511: LD_STRING O
12513: PUSH
12514: LD_STRING Mar
12516: PUSH
12517: LD_STRING K
12519: PUSH
12520: LD_STRING S
12522: PUSH
12523: LD_STRING Ks
12525: PUSH
12526: LD_STRING Kam
12528: PUSH
12529: LD_STRING M
12531: PUSH
12532: LD_STRING I
12534: PUSH
12535: LD_STRING A
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12551: LD_INT 35
12553: PPUSH
12554: CALL_OW 67
// for i := tmp downto 1 do
12558: LD_ADDR_VAR 0 1
12562: PUSH
12563: DOUBLE
12564: LD_VAR 0 2
12568: INC
12569: ST_TO_ADDR
12570: LD_INT 1
12572: PUSH
12573: FOR_DOWNTO
12574: IFFALSE 12708
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12576: LD_VAR 0 2
12580: PUSH
12581: LD_VAR 0 1
12585: ARRAY
12586: PPUSH
12587: CALL_OW 257
12591: PUSH
12592: LD_INT 3
12594: EQUAL
12595: PUSH
12596: LD_VAR 0 2
12600: PUSH
12601: LD_VAR 0 1
12605: ARRAY
12606: PPUSH
12607: CALL_OW 432
12611: AND
12612: IFFALSE 12706
// begin DialogueOn ;
12614: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12618: LD_VAR 0 2
12622: PUSH
12623: LD_VAR 0 1
12627: ARRAY
12628: PPUSH
12629: LD_STRING D
12631: PUSH
12632: LD_VAR 0 3
12636: PUSH
12637: LD_VAR 0 1
12641: ARRAY
12642: STR
12643: PUSH
12644: LD_STRING -RC-a-1
12646: STR
12647: PPUSH
12648: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12652: LD_ADDR_VAR 0 2
12656: PUSH
12657: LD_VAR 0 2
12661: PPUSH
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL_OW 3
12671: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12672: LD_ADDR_VAR 0 3
12676: PUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 3
12691: ST_TO_ADDR
// DialogueOff ;
12692: CALL_OW 7
// remoteControlTested := true ;
12696: LD_ADDR_EXP 7
12700: PUSH
12701: LD_INT 1
12703: ST_TO_ADDR
// break ;
12704: GO 12708
// end ;
12706: GO 12573
12708: POP
12709: POP
// until not tmp ;
12710: LD_VAR 0 2
12714: NOT
12715: IFFALSE 12551
// end ;
12717: PPOPN 3
12719: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12720: LD_EXP 7
12724: PUSH
12725: LD_EXP 28
12729: PPUSH
12730: CALL_OW 302
12734: AND
12735: IFFALSE 12764
12737: GO 12739
12739: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12740: LD_EXP 28
12744: PPUSH
12745: LD_STRING DMar-RC-a-2
12747: PPUSH
12748: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12752: LD_EXP 28
12756: PPUSH
12757: LD_STRING DMar-RC-a-3
12759: PPUSH
12760: CALL_OW 88
// end ;
12764: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12765: LD_EXP 14
12769: PUSH
12770: LD_EXP 21
12774: PPUSH
12775: LD_EXP 33
12779: PPUSH
12780: CALL_OW 296
12784: PUSH
12785: LD_INT 8
12787: LESS
12788: AND
12789: PUSH
12790: LD_INT 2
12792: PPUSH
12793: CALL_OW 463
12797: NOT
12798: AND
12799: PUSH
12800: LD_EXP 33
12804: PPUSH
12805: CALL_OW 302
12809: AND
12810: PUSH
12811: LD_EXP 21
12815: PPUSH
12816: CALL_OW 302
12820: AND
12821: IFFALSE 12999
12823: GO 12825
12825: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12826: LD_EXP 33
12830: PPUSH
12831: CALL_OW 310
12835: NOT
12836: IFFALSE 12852
// ComTurnUnit ( Aviradze , Heike ) ;
12838: LD_EXP 33
12842: PPUSH
12843: LD_EXP 21
12847: PPUSH
12848: CALL_OW 119
// if not IsInUnit ( Heike ) then
12852: LD_EXP 21
12856: PPUSH
12857: CALL_OW 310
12861: NOT
12862: IFFALSE 12878
// ComTurnUnit ( Heike , Aviradze ) ;
12864: LD_EXP 21
12868: PPUSH
12869: LD_EXP 33
12873: PPUSH
12874: CALL_OW 119
// wait ( 0 0$1 ) ;
12878: LD_INT 35
12880: PPUSH
12881: CALL_OW 67
// DialogueOn ;
12885: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12889: LD_EXP 33
12893: PPUSH
12894: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12898: LD_EXP 21
12902: PPUSH
12903: LD_STRING DH-Beria-1
12905: PPUSH
12906: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12910: LD_EXP 33
12914: PPUSH
12915: LD_STRING DA-Beria-2
12917: PPUSH
12918: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12922: LD_EXP 21
12926: PPUSH
12927: LD_STRING DH-Beria-3
12929: PPUSH
12930: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12934: LD_EXP 33
12938: PPUSH
12939: LD_STRING DA-Beria-4
12941: PPUSH
12942: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12946: LD_EXP 33
12950: PPUSH
12951: LD_STRING DA-Beria-5
12953: PPUSH
12954: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12958: LD_EXP 33
12962: PPUSH
12963: LD_STRING DA-Beria-6
12965: PPUSH
12966: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12970: LD_EXP 21
12974: PPUSH
12975: LD_STRING DA-Beria-7
12977: PPUSH
12978: CALL_OW 88
// DialogueOff ;
12982: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12986: LD_INT 52
12988: PPUSH
12989: LD_INT 2
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 322
// end ;
12999: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13000: LD_EXP 26
13004: PPUSH
13005: CALL_OW 300
13009: PUSH
13010: LD_EXP 26
13014: PPUSH
13015: CALL_OW 256
13019: PUSH
13020: LD_INT 10
13022: LESS
13023: AND
13024: IFFALSE 13061
13026: GO 13028
13028: DISABLE
// begin DialogueOn ;
13029: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13033: LD_EXP 26
13037: PPUSH
13038: LD_STRING DK-Kdeath-1
13040: PPUSH
13041: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13045: LD_EXP 21
13049: PPUSH
13050: LD_STRING DH-Kdeath-2
13052: PPUSH
13053: CALL_OW 88
// DialogueOff ;
13057: CALL_OW 7
// end ;
13061: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13062: LD_INT 2
13064: PPUSH
13065: LD_EXP 39
13069: PPUSH
13070: CALL 1374 0 2
13074: IFFALSE 13091
13076: GO 13078
13078: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13079: LD_EXP 21
13083: PPUSH
13084: LD_STRING DH-Obj-1
13086: PPUSH
13087: CALL_OW 88
13091: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13092: LD_INT 2
13094: PPUSH
13095: LD_EXP 40
13099: PPUSH
13100: CALL 1374 0 2
13104: IFFALSE 13121
13106: GO 13108
13108: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13109: LD_EXP 21
13113: PPUSH
13114: LD_STRING DH-Obj-a-1
13116: PPUSH
13117: CALL_OW 88
13121: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 , 5 5$30 ] [ Difficulty ] do
13122: LD_EXP 10
13126: PUSH
13127: LD_OWVAR 1
13131: PUSH
13132: LD_INT 14700
13134: PUSH
13135: LD_INT 13650
13137: PUSH
13138: LD_INT 12600
13140: PUSH
13141: LD_INT 11550
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: LD_OWVAR 67
13154: ARRAY
13155: GREATEREQUAL
13156: OR
13157: IFFALSE 13185
13159: GO 13161
13161: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13162: LD_INT 4200
13164: PPUSH
13165: LD_INT 5250
13167: PPUSH
13168: CALL_OW 12
13172: PPUSH
13173: CALL_OW 67
// convoyStarted := true ;
13177: LD_ADDR_EXP 17
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// end ;
13185: END
// every 0 0$1 trigger convoyStarted do
13186: LD_EXP 17
13190: IFFALSE 13274
13192: GO 13194
13194: DISABLE
// begin DialogueOn ;
13195: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13199: LD_EXP 29
13203: PPUSH
13204: LD_STRING DShar-Convoy-1
13206: PPUSH
13207: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13211: LD_EXP 21
13215: PPUSH
13216: LD_STRING DH-Convoy-2
13218: PPUSH
13219: CALL_OW 88
// DialogueOff ;
13223: CALL_OW 7
// PrepareConvoy ;
13227: CALL 4639 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13231: LD_INT 5250
13233: PPUSH
13234: LD_INT 11550
13236: PPUSH
13237: CALL_OW 12
13241: PPUSH
13242: CALL_OW 67
// PrepareConvoy ;
13246: CALL 4639 0 0
// convoyCounter := convoyCounter - 1 ;
13250: LD_ADDR_EXP 16
13254: PUSH
13255: LD_EXP 16
13259: PUSH
13260: LD_INT 1
13262: MINUS
13263: ST_TO_ADDR
// until convoyCounter <= 0 ;
13264: LD_EXP 16
13268: PUSH
13269: LD_INT 0
13271: LESSEQUAL
13272: IFFALSE 13231
// end ;
13274: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13275: LD_EXP 15
13279: PUSH
13280: LD_INT 10
13282: GREATEREQUAL
13283: IFFALSE 13300
13285: GO 13287
13287: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13288: LD_EXP 31
13292: PPUSH
13293: LD_STRING DOm-Fail-1
13295: PPUSH
13296: CALL_OW 94
13300: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13301: LD_EXP 39
13305: NOT
13306: PUSH
13307: LD_EXP 40
13311: NOT
13312: AND
13313: IFFALSE 13325
13315: GO 13317
13317: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13318: LD_STRING RaiderDone
13320: PPUSH
13321: CALL_OW 337
13325: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13326: LD_INT 22
13328: PUSH
13329: LD_INT 2
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 33
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PPUSH
13350: CALL_OW 69
13354: PUSH
13355: LD_INT 3
13357: GREATEREQUAL
13358: PUSH
13359: LD_INT 22
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 34
13371: PUSH
13372: LD_INT 31
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: PUSH
13388: LD_INT 2
13390: GREATEREQUAL
13391: AND
13392: IFFALSE 13404
13394: GO 13396
13396: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13397: LD_STRING RemoteControlDone
13399: PPUSH
13400: CALL_OW 337
13404: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13405: LD_EXP 16
13409: PUSH
13410: LD_INT 1
13412: LESS
13413: PUSH
13414: LD_EXP 41
13418: PPUSH
13419: LD_INT 52
13421: PUSH
13422: EMPTY
13423: LIST
13424: PUSH
13425: LD_INT 21
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 72
13443: NOT
13444: AND
13445: PUSH
13446: LD_OWVAR 1
13450: PUSH
13451: LD_INT 126000
13453: GREATEREQUAL
13454: OR
13455: IFFALSE 14276
13457: GO 13459
13459: DISABLE
13460: LD_INT 0
13462: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13463: LD_STRING ReinforcementsDone
13465: PPUSH
13466: CALL_OW 337
// music_class := music_victory ;
13470: LD_ADDR_OWVAR 72
13474: PUSH
13475: LD_INT 4
13477: ST_TO_ADDR
// InGameOn ;
13478: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13482: LD_EXP 21
13486: PPUSH
13487: LD_STRING DH-end-1
13489: PPUSH
13490: CALL_OW 88
// wait ( 0 0$2 ) ;
13494: LD_INT 70
13496: PPUSH
13497: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13501: LD_EXP 29
13505: PPUSH
13506: LD_STRING DShar-end-2
13508: PPUSH
13509: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13513: LD_EXP 39
13517: NOT
13518: PUSH
13519: LD_EXP 40
13523: NOT
13524: AND
13525: IFFALSE 13541
// begin Say ( Heike , DH-end-3 ) ;
13527: LD_EXP 21
13531: PPUSH
13532: LD_STRING DH-end-3
13534: PPUSH
13535: CALL_OW 88
// end else
13539: GO 13638
// begin Say ( Heike , DH-end-a-3 ) ;
13541: LD_EXP 21
13545: PPUSH
13546: LD_STRING DH-end-a-3
13548: PPUSH
13549: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13553: LD_EXP 29
13557: PPUSH
13558: LD_STRING DShar-end-a-4
13560: PPUSH
13561: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13565: LD_EXP 21
13569: PPUSH
13570: LD_STRING DH-end-a-5
13572: PPUSH
13573: CALL_OW 88
// InGameOff ;
13577: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13581: LD_INT 35
13583: PPUSH
13584: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13588: LD_INT 22
13590: PUSH
13591: LD_INT 3
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 69
13616: PUSH
13617: LD_INT 0
13619: EQUAL
13620: IFFALSE 13581
// InGameOn ;
13622: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13626: LD_EXP 21
13630: PPUSH
13631: LD_STRING DH-end-a-6
13633: PPUSH
13634: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13638: LD_EXP 29
13642: PPUSH
13643: LD_STRING DShar-end-3
13645: PPUSH
13646: CALL_OW 94
// if not flamethrowerBuilt then
13650: LD_EXP 20
13654: NOT
13655: IFFALSE 13664
// SetAchievement ( ACH_FIRE ) ;
13657: LD_STRING ACH_FIRE
13659: PPUSH
13660: CALL_OW 543
// if drugsTested then
13664: LD_EXP 6
13668: IFFALSE 13682
// AddMedal ( med1 , 1 ) else
13670: LD_STRING med1
13672: PPUSH
13673: LD_INT 1
13675: PPUSH
13676: CALL_OW 101
13680: GO 13722
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13682: LD_INT 5
13684: PPUSH
13685: LD_INT 2
13687: PPUSH
13688: CALL_OW 321
13692: PUSH
13693: LD_INT 2
13695: EQUAL
13696: IFFALSE 13711
// AddMedal ( med1 , - 1 ) else
13698: LD_STRING med1
13700: PPUSH
13701: LD_INT 1
13703: NEG
13704: PPUSH
13705: CALL_OW 101
13709: GO 13722
// AddMedal ( med1 , - 2 ) ;
13711: LD_STRING med1
13713: PPUSH
13714: LD_INT 2
13716: NEG
13717: PPUSH
13718: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13722: LD_INT 22
13724: PUSH
13725: LD_INT 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 33
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PPUSH
13746: CALL_OW 69
13750: PUSH
13751: LD_INT 3
13753: GREATEREQUAL
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 34
13767: PUSH
13768: LD_INT 31
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PPUSH
13779: CALL_OW 69
13783: PUSH
13784: LD_INT 1
13786: GREATEREQUAL
13787: AND
13788: IFFALSE 13802
// AddMedal ( med2 , 1 ) else
13790: LD_STRING med2
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: CALL_OW 101
13800: GO 13813
// AddMedal ( med2 , - 1 ) ;
13802: LD_STRING med2
13804: PPUSH
13805: LD_INT 1
13807: NEG
13808: PPUSH
13809: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13813: LD_EXP 15
13817: PUSH
13818: LD_INT 10
13820: PUSH
13821: LD_INT 8
13823: PUSH
13824: LD_INT 6
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: PUSH
13836: LD_OWVAR 67
13840: ARRAY
13841: LESS
13842: IFFALSE 13856
// AddMedal ( med3 , 1 ) else
13844: LD_STRING med3
13846: PPUSH
13847: LD_INT 1
13849: PPUSH
13850: CALL_OW 101
13854: GO 13867
// AddMedal ( med3 , - 1 ) ;
13856: LD_STRING med3
13858: PPUSH
13859: LD_INT 1
13861: NEG
13862: PPUSH
13863: CALL_OW 101
// GiveMedals ( MAIN ) ;
13867: LD_STRING MAIN
13869: PPUSH
13870: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13874: LD_INT 22
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 23
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 21
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PPUSH
13914: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13918: LD_EXP 15
13922: PPUSH
13923: LD_STRING 05_ConvoySavedCounter
13925: PPUSH
13926: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13930: LD_EXP 13
13934: PPUSH
13935: LD_STRING 05_Radar
13937: PPUSH
13938: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13942: LD_EXP 6
13946: PPUSH
13947: LD_STRING 05_DrugsTested
13949: PPUSH
13950: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13954: LD_INT 22
13956: PUSH
13957: LD_INT 2
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 33
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 3
13985: GREATEREQUAL
13986: PUSH
13987: LD_INT 22
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 34
13999: PUSH
14000: LD_INT 31
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PPUSH
14011: CALL_OW 69
14015: PUSH
14016: LD_INT 2
14018: GREATEREQUAL
14019: AND
14020: PPUSH
14021: LD_STRING 05_RemoteControl
14023: PPUSH
14024: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14028: LD_EXP 21
14032: PPUSH
14033: LD_STRING 05_Heike
14035: PPUSH
14036: CALL_OW 38
// if Aviradze then
14040: LD_EXP 33
14044: IFFALSE 14058
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14046: LD_EXP 33
14050: PPUSH
14051: LD_STRING 05_Aviradze
14053: PPUSH
14054: CALL_OW 38
// if Ibrahim then
14058: LD_EXP 24
14062: IFFALSE 14076
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14064: LD_EXP 24
14068: PPUSH
14069: LD_STRING 05_Ibrahim
14071: PPUSH
14072: CALL_OW 38
// if Kamil then
14076: LD_EXP 25
14080: IFFALSE 14094
// SaveCharacters ( Kamil , 05_Kamil ) ;
14082: LD_EXP 25
14086: PPUSH
14087: LD_STRING 05_Kamil
14089: PPUSH
14090: CALL_OW 38
// if Sophia then
14094: LD_EXP 27
14098: IFFALSE 14112
// SaveCharacters ( Sophia , 05_Sophia ) ;
14100: LD_EXP 27
14104: PPUSH
14105: LD_STRING 05_Sophia
14107: PPUSH
14108: CALL_OW 38
// if Kaia then
14112: LD_EXP 26
14116: IFFALSE 14130
// SaveCharacters ( Kaia , 05_Kaia ) ;
14118: LD_EXP 26
14122: PPUSH
14123: LD_STRING 05_Kaia
14125: PPUSH
14126: CALL_OW 38
// if Givi then
14130: LD_EXP 22
14134: IFFALSE 14148
// SaveCharacters ( Givi , 05_Givi ) ;
14136: LD_EXP 22
14140: PPUSH
14141: LD_STRING 05_Givi
14143: PPUSH
14144: CALL_OW 38
// if Mike then
14148: LD_EXP 23
14152: IFFALSE 14166
// SaveCharacters ( Mike , 05_Mike ) ;
14154: LD_EXP 23
14158: PPUSH
14159: LD_STRING 05_Mike
14161: PPUSH
14162: CALL_OW 38
// if Markov then
14166: LD_EXP 28
14170: IFFALSE 14184
// SaveCharacters ( Markov , 05_Markov ) ;
14172: LD_EXP 28
14176: PPUSH
14177: LD_STRING 05_Markov
14179: PPUSH
14180: CALL_OW 38
// if Kurt then
14184: LD_EXP 32
14188: IFFALSE 14202
// SaveCharacters ( Kurt , 05_Kurt ) ;
14190: LD_EXP 32
14194: PPUSH
14195: LD_STRING 05_Kurt
14197: PPUSH
14198: CALL_OW 38
// if heikeSecondSquad then
14202: LD_EXP 34
14206: IFFALSE 14220
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14208: LD_EXP 34
14212: PPUSH
14213: LD_STRING 05_others
14215: PPUSH
14216: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14220: LD_ADDR_VAR 0 1
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 0
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// if tmp then
14254: LD_VAR 0 1
14258: IFFALSE 14272
// SaveCharacters ( tmp , 05_apes ) ;
14260: LD_VAR 0 1
14264: PPUSH
14265: LD_STRING 05_apes
14267: PPUSH
14268: CALL_OW 38
// YouWin ;
14272: CALL_OW 103
// end ; end_of_file
14276: PPOPN 1
14278: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14279: LD_EXP 9
14283: PUSH
14284: LD_INT 13
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 287
14294: PUSH
14295: LD_INT 25
14297: LESS
14298: AND
14299: IFFALSE 14326
14301: GO 14303
14303: DISABLE
// begin enable ;
14304: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14305: LD_INT 1
14307: PPUSH
14308: LD_INT 5
14310: PPUSH
14311: CALL_OW 12
14315: PPUSH
14316: LD_INT 13
14318: PPUSH
14319: LD_INT 1
14321: PPUSH
14322: CALL_OW 55
// end ; end_of_file
14326: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14327: LD_INT 0
14329: PPUSH
// ar_miner := 81 ;
14330: LD_ADDR_EXP 51
14334: PUSH
14335: LD_INT 81
14337: ST_TO_ADDR
// ar_crane := 88 ;
14338: LD_ADDR_EXP 50
14342: PUSH
14343: LD_INT 88
14345: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14346: LD_ADDR_EXP 45
14350: PUSH
14351: LD_INT 89
14353: ST_TO_ADDR
// us_hack := 99 ;
14354: LD_ADDR_EXP 46
14358: PUSH
14359: LD_INT 99
14361: ST_TO_ADDR
// us_artillery := 97 ;
14362: LD_ADDR_EXP 47
14366: PUSH
14367: LD_INT 97
14369: ST_TO_ADDR
// ar_bio_bomb := 91 ;
14370: LD_ADDR_EXP 48
14374: PUSH
14375: LD_INT 91
14377: ST_TO_ADDR
// ar_mortar := 92 ;
14378: LD_ADDR_EXP 49
14382: PUSH
14383: LD_INT 92
14385: ST_TO_ADDR
// ru_radar := 98 ;
14386: LD_ADDR_EXP 44
14390: PUSH
14391: LD_INT 98
14393: ST_TO_ADDR
// tech_Artillery := 80 ;
14394: LD_ADDR_EXP 52
14398: PUSH
14399: LD_INT 80
14401: ST_TO_ADDR
// tech_RadMat := 81 ;
14402: LD_ADDR_EXP 53
14406: PUSH
14407: LD_INT 81
14409: ST_TO_ADDR
// tech_BasicTools := 82 ;
14410: LD_ADDR_EXP 54
14414: PUSH
14415: LD_INT 82
14417: ST_TO_ADDR
// tech_Cargo := 83 ;
14418: LD_ADDR_EXP 55
14422: PUSH
14423: LD_INT 83
14425: ST_TO_ADDR
// tech_Track := 84 ;
14426: LD_ADDR_EXP 56
14430: PUSH
14431: LD_INT 84
14433: ST_TO_ADDR
// tech_Crane := 85 ;
14434: LD_ADDR_EXP 57
14438: PUSH
14439: LD_INT 85
14441: ST_TO_ADDR
// tech_Bulldozer := 86 ;
14442: LD_ADDR_EXP 58
14446: PUSH
14447: LD_INT 86
14449: ST_TO_ADDR
// tech_Hovercraft := 87 ;
14450: LD_ADDR_EXP 59
14454: PUSH
14455: LD_INT 87
14457: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
14458: LD_ADDR_EXP 60
14462: PUSH
14463: LD_INT 88
14465: ST_TO_ADDR
// class_mastodont := 31 ;
14466: LD_ADDR_EXP 61
14470: PUSH
14471: LD_INT 31
14473: ST_TO_ADDR
// class_horse := 21 ;
14474: LD_ADDR_EXP 62
14478: PUSH
14479: LD_INT 21
14481: ST_TO_ADDR
// end ;
14482: LD_VAR 0 1
14486: RET
// every 1 do
14487: GO 14489
14489: DISABLE
// InitGlobalVariables ; end_of_file
14490: CALL 14327 0 0
14494: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 264
14510: PUSH
14511: LD_EXP 48
14515: EQUAL
14516: IFFALSE 14588
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14518: LD_INT 68
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 255
14530: PPUSH
14531: CALL_OW 321
14535: PUSH
14536: LD_INT 2
14538: EQUAL
14539: IFFALSE 14551
// eff := 70 else
14541: LD_ADDR_VAR 0 4
14545: PUSH
14546: LD_INT 70
14548: ST_TO_ADDR
14549: GO 14559
// eff := 30 ;
14551: LD_ADDR_VAR 0 4
14555: PUSH
14556: LD_INT 30
14558: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 250
14568: PPUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 251
14578: PPUSH
14579: LD_VAR 0 4
14583: PPUSH
14584: CALL_OW 495
// end ; end ;
14588: LD_VAR 0 2
14592: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14593: LD_INT 0
14595: PPUSH
// end ;
14596: LD_VAR 0 4
14600: RET
// export function SOS_Command ( cmd ) ; begin
14601: LD_INT 0
14603: PPUSH
// end ;
14604: LD_VAR 0 2
14608: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14609: LD_INT 0
14611: PPUSH
// end ;
14612: LD_VAR 0 6
14616: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14617: LD_INT 0
14619: PPUSH
14620: PPUSH
// if not vehicle or not factory then
14621: LD_VAR 0 1
14625: NOT
14626: PUSH
14627: LD_VAR 0 2
14631: NOT
14632: OR
14633: IFFALSE 14637
// exit ;
14635: GO 14868
// if factoryWaypoints >= factory then
14637: LD_EXP 63
14641: PUSH
14642: LD_VAR 0 2
14646: GREATEREQUAL
14647: IFFALSE 14868
// if factoryWaypoints [ factory ] then
14649: LD_EXP 63
14653: PUSH
14654: LD_VAR 0 2
14658: ARRAY
14659: IFFALSE 14868
// begin if GetControl ( vehicle ) = control_manual then
14661: LD_VAR 0 1
14665: PPUSH
14666: CALL_OW 263
14670: PUSH
14671: LD_INT 1
14673: EQUAL
14674: IFFALSE 14755
// begin driver := IsDrivenBy ( vehicle ) ;
14676: LD_ADDR_VAR 0 4
14680: PUSH
14681: LD_VAR 0 1
14685: PPUSH
14686: CALL_OW 311
14690: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
14691: LD_VAR 0 4
14695: PPUSH
14696: LD_EXP 63
14700: PUSH
14701: LD_VAR 0 2
14705: ARRAY
14706: PUSH
14707: LD_INT 1
14709: ARRAY
14710: PPUSH
14711: LD_EXP 63
14715: PUSH
14716: LD_VAR 0 2
14720: ARRAY
14721: PUSH
14722: LD_INT 2
14724: ARRAY
14725: PPUSH
14726: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14730: LD_VAR 0 4
14734: PPUSH
14735: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14739: LD_VAR 0 4
14743: PPUSH
14744: LD_VAR 0 2
14748: PPUSH
14749: CALL_OW 180
// end else
14753: GO 14868
// if GetControl ( vehicle ) = control_remote then
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 263
14764: PUSH
14765: LD_INT 2
14767: EQUAL
14768: IFFALSE 14829
// begin wait ( 0 0$2 ) ;
14770: LD_INT 70
14772: PPUSH
14773: CALL_OW 67
// if Connect ( vehicle ) then
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL 41421 0 1
14786: IFFALSE 14827
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
14788: LD_VAR 0 1
14792: PPUSH
14793: LD_EXP 63
14797: PUSH
14798: LD_VAR 0 2
14802: ARRAY
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: LD_EXP 63
14812: PUSH
14813: LD_VAR 0 2
14817: ARRAY
14818: PUSH
14819: LD_INT 2
14821: ARRAY
14822: PPUSH
14823: CALL_OW 171
// end else
14827: GO 14868
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
14829: LD_VAR 0 1
14833: PPUSH
14834: LD_EXP 63
14838: PUSH
14839: LD_VAR 0 2
14843: ARRAY
14844: PUSH
14845: LD_INT 1
14847: ARRAY
14848: PPUSH
14849: LD_EXP 63
14853: PUSH
14854: LD_VAR 0 2
14858: ARRAY
14859: PUSH
14860: LD_INT 2
14862: ARRAY
14863: PPUSH
14864: CALL_OW 171
// end ; end ;
14868: LD_VAR 0 3
14872: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14873: LD_INT 0
14875: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14876: LD_VAR 0 1
14880: PUSH
14881: LD_INT 250
14883: EQUAL
14884: PUSH
14885: LD_VAR 0 2
14889: PPUSH
14890: CALL_OW 264
14894: PUSH
14895: LD_EXP 51
14899: EQUAL
14900: AND
14901: IFFALSE 14922
// MinerPlaceMine ( unit , x , y ) ;
14903: LD_VAR 0 2
14907: PPUSH
14908: LD_VAR 0 4
14912: PPUSH
14913: LD_VAR 0 5
14917: PPUSH
14918: CALL 17650 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14922: LD_VAR 0 1
14926: PUSH
14927: LD_INT 251
14929: EQUAL
14930: PUSH
14931: LD_VAR 0 2
14935: PPUSH
14936: CALL_OW 264
14940: PUSH
14941: LD_EXP 51
14945: EQUAL
14946: AND
14947: IFFALSE 14968
// MinerDetonateMine ( unit , x , y ) ;
14949: LD_VAR 0 2
14953: PPUSH
14954: LD_VAR 0 4
14958: PPUSH
14959: LD_VAR 0 5
14963: PPUSH
14964: CALL 17927 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14968: LD_VAR 0 1
14972: PUSH
14973: LD_INT 252
14975: EQUAL
14976: PUSH
14977: LD_VAR 0 2
14981: PPUSH
14982: CALL_OW 264
14986: PUSH
14987: LD_EXP 51
14991: EQUAL
14992: AND
14993: IFFALSE 15014
// MinerCreateMinefield ( unit , x , y ) ;
14995: LD_VAR 0 2
14999: PPUSH
15000: LD_VAR 0 4
15004: PPUSH
15005: LD_VAR 0 5
15009: PPUSH
15010: CALL 18344 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15014: LD_VAR 0 1
15018: PUSH
15019: LD_INT 253
15021: EQUAL
15022: PUSH
15023: LD_VAR 0 2
15027: PPUSH
15028: CALL_OW 257
15032: PUSH
15033: LD_INT 5
15035: EQUAL
15036: AND
15037: IFFALSE 15058
// ComBinocular ( unit , x , y ) ;
15039: LD_VAR 0 2
15043: PPUSH
15044: LD_VAR 0 4
15048: PPUSH
15049: LD_VAR 0 5
15053: PPUSH
15054: CALL 18715 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15058: LD_VAR 0 1
15062: PUSH
15063: LD_INT 254
15065: EQUAL
15066: PUSH
15067: LD_VAR 0 2
15071: PPUSH
15072: CALL_OW 264
15076: PUSH
15077: LD_EXP 46
15081: EQUAL
15082: AND
15083: PUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: CALL_OW 263
15093: PUSH
15094: LD_INT 3
15096: EQUAL
15097: AND
15098: IFFALSE 15114
// HackDestroyVehicle ( unit , selectedUnit ) ;
15100: LD_VAR 0 2
15104: PPUSH
15105: LD_VAR 0 3
15109: PPUSH
15110: CALL 17010 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15114: LD_VAR 0 1
15118: PUSH
15119: LD_INT 255
15121: EQUAL
15122: PUSH
15123: LD_VAR 0 2
15127: PPUSH
15128: CALL_OW 264
15132: PUSH
15133: LD_INT 14
15135: PUSH
15136: LD_INT 53
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: IN
15143: AND
15144: PUSH
15145: LD_VAR 0 4
15149: PPUSH
15150: LD_VAR 0 5
15154: PPUSH
15155: CALL_OW 488
15159: AND
15160: IFFALSE 15184
// CutTreeXYR ( unit , x , y , 12 ) ;
15162: LD_VAR 0 2
15166: PPUSH
15167: LD_VAR 0 4
15171: PPUSH
15172: LD_VAR 0 5
15176: PPUSH
15177: LD_INT 12
15179: PPUSH
15180: CALL 15576 0 4
// if cmd = 256 then
15184: LD_VAR 0 1
15188: PUSH
15189: LD_INT 256
15191: EQUAL
15192: IFFALSE 15213
// SetFactoryWaypoint ( unit , x , y ) ;
15194: LD_VAR 0 2
15198: PPUSH
15199: LD_VAR 0 4
15203: PPUSH
15204: LD_VAR 0 5
15208: PPUSH
15209: CALL 15218 0 3
// end ;
15213: LD_VAR 0 6
15217: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15218: LD_INT 0
15220: PPUSH
15221: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15222: LD_VAR 0 1
15226: NOT
15227: PUSH
15228: LD_VAR 0 2
15232: PPUSH
15233: LD_VAR 0 3
15237: PPUSH
15238: CALL_OW 488
15242: NOT
15243: OR
15244: PUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 266
15254: PUSH
15255: LD_INT 3
15257: NONEQUAL
15258: PUSH
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 247
15268: PUSH
15269: LD_INT 1
15271: EQUAL
15272: NOT
15273: AND
15274: OR
15275: IFFALSE 15279
// exit ;
15277: GO 15428
// if GetType ( factory ) = unit_human then
15279: LD_VAR 0 1
15283: PPUSH
15284: CALL_OW 247
15288: PUSH
15289: LD_INT 1
15291: EQUAL
15292: IFFALSE 15309
// factory := IsInUnit ( factory ) ;
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_VAR 0 1
15303: PPUSH
15304: CALL_OW 310
15308: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL_OW 266
15318: PUSH
15319: LD_INT 3
15321: NONEQUAL
15322: IFFALSE 15326
// exit ;
15324: GO 15428
// if HexInfo ( x , y ) = factory then
15326: LD_VAR 0 2
15330: PPUSH
15331: LD_VAR 0 3
15335: PPUSH
15336: CALL_OW 428
15340: PUSH
15341: LD_VAR 0 1
15345: EQUAL
15346: IFFALSE 15373
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15348: LD_ADDR_EXP 63
15352: PUSH
15353: LD_EXP 63
15357: PPUSH
15358: LD_VAR 0 1
15362: PPUSH
15363: LD_INT 0
15365: PPUSH
15366: CALL_OW 1
15370: ST_TO_ADDR
15371: GO 15424
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15373: LD_ADDR_EXP 63
15377: PUSH
15378: LD_EXP 63
15382: PPUSH
15383: LD_VAR 0 1
15387: PPUSH
15388: LD_VAR 0 1
15392: PPUSH
15393: CALL_OW 255
15397: PUSH
15398: LD_VAR 0 1
15402: PUSH
15403: LD_VAR 0 2
15407: PUSH
15408: LD_VAR 0 3
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: PPUSH
15419: CALL_OW 1
15423: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15424: CALL 15433 0 0
// end ;
15428: LD_VAR 0 4
15432: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
15433: LD_INT 0
15435: PPUSH
15436: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15437: LD_STRING resetFactoryWaypoint();
15439: PPUSH
15440: CALL_OW 559
// if factoryWaypoints then
15444: LD_EXP 63
15448: IFFALSE 15571
// begin for i := 1 to factoryWaypoints do
15450: LD_ADDR_VAR 0 2
15454: PUSH
15455: DOUBLE
15456: LD_INT 1
15458: DEC
15459: ST_TO_ADDR
15460: LD_EXP 63
15464: PUSH
15465: FOR_TO
15466: IFFALSE 15569
// if factoryWaypoints [ i ] then
15468: LD_EXP 63
15472: PUSH
15473: LD_VAR 0 2
15477: ARRAY
15478: IFFALSE 15567
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
15480: LD_STRING setFactoryWaypointXY(
15482: PUSH
15483: LD_EXP 63
15487: PUSH
15488: LD_VAR 0 2
15492: ARRAY
15493: PUSH
15494: LD_INT 1
15496: ARRAY
15497: STR
15498: PUSH
15499: LD_STRING ,
15501: STR
15502: PUSH
15503: LD_EXP 63
15507: PUSH
15508: LD_VAR 0 2
15512: ARRAY
15513: PUSH
15514: LD_INT 2
15516: ARRAY
15517: STR
15518: PUSH
15519: LD_STRING ,
15521: STR
15522: PUSH
15523: LD_EXP 63
15527: PUSH
15528: LD_VAR 0 2
15532: ARRAY
15533: PUSH
15534: LD_INT 3
15536: ARRAY
15537: STR
15538: PUSH
15539: LD_STRING ,
15541: STR
15542: PUSH
15543: LD_EXP 63
15547: PUSH
15548: LD_VAR 0 2
15552: ARRAY
15553: PUSH
15554: LD_INT 4
15556: ARRAY
15557: STR
15558: PUSH
15559: LD_STRING )
15561: STR
15562: PPUSH
15563: CALL_OW 559
15567: GO 15465
15569: POP
15570: POP
// end ; end ;
15571: LD_VAR 0 1
15575: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15576: LD_INT 0
15578: PPUSH
15579: PPUSH
15580: PPUSH
15581: PPUSH
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15587: LD_VAR 0 1
15591: NOT
15592: PUSH
15593: LD_VAR 0 2
15597: PPUSH
15598: LD_VAR 0 3
15602: PPUSH
15603: CALL_OW 488
15607: NOT
15608: OR
15609: PUSH
15610: LD_VAR 0 4
15614: NOT
15615: OR
15616: IFFALSE 15620
// exit ;
15618: GO 15960
// list := [ ] ;
15620: LD_ADDR_VAR 0 13
15624: PUSH
15625: EMPTY
15626: ST_TO_ADDR
// if x - r < 0 then
15627: LD_VAR 0 2
15631: PUSH
15632: LD_VAR 0 4
15636: MINUS
15637: PUSH
15638: LD_INT 0
15640: LESS
15641: IFFALSE 15653
// min_x := 0 else
15643: LD_ADDR_VAR 0 7
15647: PUSH
15648: LD_INT 0
15650: ST_TO_ADDR
15651: GO 15669
// min_x := x - r ;
15653: LD_ADDR_VAR 0 7
15657: PUSH
15658: LD_VAR 0 2
15662: PUSH
15663: LD_VAR 0 4
15667: MINUS
15668: ST_TO_ADDR
// if y - r < 0 then
15669: LD_VAR 0 3
15673: PUSH
15674: LD_VAR 0 4
15678: MINUS
15679: PUSH
15680: LD_INT 0
15682: LESS
15683: IFFALSE 15695
// min_y := 0 else
15685: LD_ADDR_VAR 0 8
15689: PUSH
15690: LD_INT 0
15692: ST_TO_ADDR
15693: GO 15711
// min_y := y - r ;
15695: LD_ADDR_VAR 0 8
15699: PUSH
15700: LD_VAR 0 3
15704: PUSH
15705: LD_VAR 0 4
15709: MINUS
15710: ST_TO_ADDR
// max_x := x + r ;
15711: LD_ADDR_VAR 0 9
15715: PUSH
15716: LD_VAR 0 2
15720: PUSH
15721: LD_VAR 0 4
15725: PLUS
15726: ST_TO_ADDR
// max_y := y + r ;
15727: LD_ADDR_VAR 0 10
15731: PUSH
15732: LD_VAR 0 3
15736: PUSH
15737: LD_VAR 0 4
15741: PLUS
15742: ST_TO_ADDR
// for _x = min_x to max_x do
15743: LD_ADDR_VAR 0 11
15747: PUSH
15748: DOUBLE
15749: LD_VAR 0 7
15753: DEC
15754: ST_TO_ADDR
15755: LD_VAR 0 9
15759: PUSH
15760: FOR_TO
15761: IFFALSE 15878
// for _y = min_y to max_y do
15763: LD_ADDR_VAR 0 12
15767: PUSH
15768: DOUBLE
15769: LD_VAR 0 8
15773: DEC
15774: ST_TO_ADDR
15775: LD_VAR 0 10
15779: PUSH
15780: FOR_TO
15781: IFFALSE 15874
// begin if not ValidHex ( _x , _y ) then
15783: LD_VAR 0 11
15787: PPUSH
15788: LD_VAR 0 12
15792: PPUSH
15793: CALL_OW 488
15797: NOT
15798: IFFALSE 15802
// continue ;
15800: GO 15780
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15802: LD_VAR 0 11
15806: PPUSH
15807: LD_VAR 0 12
15811: PPUSH
15812: CALL_OW 351
15816: PUSH
15817: LD_VAR 0 11
15821: PPUSH
15822: LD_VAR 0 12
15826: PPUSH
15827: CALL_OW 554
15831: AND
15832: IFFALSE 15872
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15834: LD_ADDR_VAR 0 13
15838: PUSH
15839: LD_VAR 0 13
15843: PPUSH
15844: LD_VAR 0 13
15848: PUSH
15849: LD_INT 1
15851: PLUS
15852: PPUSH
15853: LD_VAR 0 11
15857: PUSH
15858: LD_VAR 0 12
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PPUSH
15867: CALL_OW 2
15871: ST_TO_ADDR
// end ;
15872: GO 15780
15874: POP
15875: POP
15876: GO 15760
15878: POP
15879: POP
// if not list then
15880: LD_VAR 0 13
15884: NOT
15885: IFFALSE 15889
// exit ;
15887: GO 15960
// for i in list do
15889: LD_ADDR_VAR 0 6
15893: PUSH
15894: LD_VAR 0 13
15898: PUSH
15899: FOR_IN
15900: IFFALSE 15958
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15902: LD_VAR 0 1
15906: PPUSH
15907: LD_STRING M
15909: PUSH
15910: LD_VAR 0 6
15914: PUSH
15915: LD_INT 1
15917: ARRAY
15918: PUSH
15919: LD_VAR 0 6
15923: PUSH
15924: LD_INT 2
15926: ARRAY
15927: PUSH
15928: LD_INT 0
15930: PUSH
15931: LD_INT 0
15933: PUSH
15934: LD_INT 0
15936: PUSH
15937: LD_INT 0
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: PPUSH
15952: CALL_OW 447
15956: GO 15899
15958: POP
15959: POP
// end ;
15960: LD_VAR 0 5
15964: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15965: LD_EXP 64
15969: NOT
15970: IFFALSE 16020
15972: GO 15974
15974: DISABLE
// begin initHack := true ;
15975: LD_ADDR_EXP 64
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// hackTanks := [ ] ;
15983: LD_ADDR_EXP 65
15987: PUSH
15988: EMPTY
15989: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15990: LD_ADDR_EXP 66
15994: PUSH
15995: EMPTY
15996: ST_TO_ADDR
// hackLimit := 3 ;
15997: LD_ADDR_EXP 67
16001: PUSH
16002: LD_INT 3
16004: ST_TO_ADDR
// hackDist := 12 ;
16005: LD_ADDR_EXP 68
16009: PUSH
16010: LD_INT 12
16012: ST_TO_ADDR
// hackCounter := [ ] ;
16013: LD_ADDR_EXP 69
16017: PUSH
16018: EMPTY
16019: ST_TO_ADDR
// end ;
16020: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16021: LD_EXP 64
16025: PUSH
16026: LD_INT 34
16028: PUSH
16029: LD_EXP 46
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PPUSH
16038: CALL_OW 69
16042: AND
16043: IFFALSE 16298
16045: GO 16047
16047: DISABLE
16048: LD_INT 0
16050: PPUSH
16051: PPUSH
// begin enable ;
16052: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16053: LD_ADDR_VAR 0 1
16057: PUSH
16058: LD_INT 34
16060: PUSH
16061: LD_EXP 46
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PPUSH
16070: CALL_OW 69
16074: PUSH
16075: FOR_IN
16076: IFFALSE 16296
// begin if not i in hackTanks then
16078: LD_VAR 0 1
16082: PUSH
16083: LD_EXP 65
16087: IN
16088: NOT
16089: IFFALSE 16172
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16091: LD_ADDR_EXP 65
16095: PUSH
16096: LD_EXP 65
16100: PPUSH
16101: LD_EXP 65
16105: PUSH
16106: LD_INT 1
16108: PLUS
16109: PPUSH
16110: LD_VAR 0 1
16114: PPUSH
16115: CALL_OW 1
16119: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16120: LD_ADDR_EXP 66
16124: PUSH
16125: LD_EXP 66
16129: PPUSH
16130: LD_EXP 66
16134: PUSH
16135: LD_INT 1
16137: PLUS
16138: PPUSH
16139: EMPTY
16140: PPUSH
16141: CALL_OW 1
16145: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16146: LD_ADDR_EXP 69
16150: PUSH
16151: LD_EXP 69
16155: PPUSH
16156: LD_EXP 69
16160: PUSH
16161: LD_INT 1
16163: PLUS
16164: PPUSH
16165: EMPTY
16166: PPUSH
16167: CALL_OW 1
16171: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16172: LD_VAR 0 1
16176: PPUSH
16177: CALL_OW 302
16181: NOT
16182: IFFALSE 16195
// begin HackUnlinkAll ( i ) ;
16184: LD_VAR 0 1
16188: PPUSH
16189: CALL 16301 0 1
// continue ;
16193: GO 16075
// end ; HackCheckCapturedStatus ( i ) ;
16195: LD_VAR 0 1
16199: PPUSH
16200: CALL 16744 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16204: LD_ADDR_VAR 0 2
16208: PUSH
16209: LD_INT 81
16211: PUSH
16212: LD_VAR 0 1
16216: PPUSH
16217: CALL_OW 255
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 33
16228: PUSH
16229: LD_INT 3
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 91
16238: PUSH
16239: LD_VAR 0 1
16243: PUSH
16244: LD_EXP 68
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 50
16256: PUSH
16257: EMPTY
16258: LIST
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL_OW 69
16270: ST_TO_ADDR
// if not tmp then
16271: LD_VAR 0 2
16275: NOT
16276: IFFALSE 16280
// continue ;
16278: GO 16075
// HackLink ( i , tmp ) ;
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_VAR 0 2
16289: PPUSH
16290: CALL 16437 0 2
// end ;
16294: GO 16075
16296: POP
16297: POP
// end ;
16298: PPOPN 2
16300: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16301: LD_INT 0
16303: PPUSH
16304: PPUSH
16305: PPUSH
// if not hack in hackTanks then
16306: LD_VAR 0 1
16310: PUSH
16311: LD_EXP 65
16315: IN
16316: NOT
16317: IFFALSE 16321
// exit ;
16319: GO 16432
// index := GetElementIndex ( hackTanks , hack ) ;
16321: LD_ADDR_VAR 0 4
16325: PUSH
16326: LD_EXP 65
16330: PPUSH
16331: LD_VAR 0 1
16335: PPUSH
16336: CALL 38235 0 2
16340: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16341: LD_EXP 66
16345: PUSH
16346: LD_VAR 0 4
16350: ARRAY
16351: IFFALSE 16432
// begin for i in hackTanksCaptured [ index ] do
16353: LD_ADDR_VAR 0 3
16357: PUSH
16358: LD_EXP 66
16362: PUSH
16363: LD_VAR 0 4
16367: ARRAY
16368: PUSH
16369: FOR_IN
16370: IFFALSE 16396
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16372: LD_VAR 0 3
16376: PUSH
16377: LD_INT 1
16379: ARRAY
16380: PPUSH
16381: LD_VAR 0 3
16385: PUSH
16386: LD_INT 2
16388: ARRAY
16389: PPUSH
16390: CALL_OW 235
16394: GO 16369
16396: POP
16397: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16398: LD_ADDR_EXP 66
16402: PUSH
16403: LD_EXP 66
16407: PPUSH
16408: LD_VAR 0 4
16412: PPUSH
16413: EMPTY
16414: PPUSH
16415: CALL_OW 1
16419: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_INT 0
16427: PPUSH
16428: CALL_OW 505
// end ; end ;
16432: LD_VAR 0 2
16436: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16437: LD_INT 0
16439: PPUSH
16440: PPUSH
16441: PPUSH
// if not hack in hackTanks or not vehicles then
16442: LD_VAR 0 1
16446: PUSH
16447: LD_EXP 65
16451: IN
16452: NOT
16453: PUSH
16454: LD_VAR 0 2
16458: NOT
16459: OR
16460: IFFALSE 16464
// exit ;
16462: GO 16739
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: LD_VAR 0 2
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: LD_INT 1
16484: PPUSH
16485: CALL 38885 0 4
16489: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16490: LD_ADDR_VAR 0 5
16494: PUSH
16495: LD_EXP 65
16499: PPUSH
16500: LD_VAR 0 1
16504: PPUSH
16505: CALL 38235 0 2
16509: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16510: LD_EXP 66
16514: PUSH
16515: LD_VAR 0 5
16519: ARRAY
16520: PUSH
16521: LD_EXP 67
16525: LESS
16526: IFFALSE 16715
// begin for i := 1 to vehicles do
16528: LD_ADDR_VAR 0 4
16532: PUSH
16533: DOUBLE
16534: LD_INT 1
16536: DEC
16537: ST_TO_ADDR
16538: LD_VAR 0 2
16542: PUSH
16543: FOR_TO
16544: IFFALSE 16713
// begin if hackTanksCaptured [ index ] = hackLimit then
16546: LD_EXP 66
16550: PUSH
16551: LD_VAR 0 5
16555: ARRAY
16556: PUSH
16557: LD_EXP 67
16561: EQUAL
16562: IFFALSE 16566
// break ;
16564: GO 16713
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16566: LD_ADDR_EXP 69
16570: PUSH
16571: LD_EXP 69
16575: PPUSH
16576: LD_VAR 0 5
16580: PPUSH
16581: LD_EXP 69
16585: PUSH
16586: LD_VAR 0 5
16590: ARRAY
16591: PUSH
16592: LD_INT 1
16594: PLUS
16595: PPUSH
16596: CALL_OW 1
16600: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16601: LD_ADDR_EXP 66
16605: PUSH
16606: LD_EXP 66
16610: PPUSH
16611: LD_VAR 0 5
16615: PUSH
16616: LD_EXP 66
16620: PUSH
16621: LD_VAR 0 5
16625: ARRAY
16626: PUSH
16627: LD_INT 1
16629: PLUS
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PPUSH
16635: LD_VAR 0 2
16639: PUSH
16640: LD_VAR 0 4
16644: ARRAY
16645: PUSH
16646: LD_VAR 0 2
16650: PUSH
16651: LD_VAR 0 4
16655: ARRAY
16656: PPUSH
16657: CALL_OW 255
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL 38450 0 3
16670: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16671: LD_VAR 0 2
16675: PUSH
16676: LD_VAR 0 4
16680: ARRAY
16681: PPUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 255
16691: PPUSH
16692: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16696: LD_VAR 0 2
16700: PUSH
16701: LD_VAR 0 4
16705: ARRAY
16706: PPUSH
16707: CALL_OW 141
// end ;
16711: GO 16543
16713: POP
16714: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16715: LD_VAR 0 1
16719: PPUSH
16720: LD_EXP 66
16724: PUSH
16725: LD_VAR 0 5
16729: ARRAY
16730: PUSH
16731: LD_INT 0
16733: PLUS
16734: PPUSH
16735: CALL_OW 505
// end ;
16739: LD_VAR 0 3
16743: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16744: LD_INT 0
16746: PPUSH
16747: PPUSH
16748: PPUSH
16749: PPUSH
// if not hack in hackTanks then
16750: LD_VAR 0 1
16754: PUSH
16755: LD_EXP 65
16759: IN
16760: NOT
16761: IFFALSE 16765
// exit ;
16763: GO 17005
// index := GetElementIndex ( hackTanks , hack ) ;
16765: LD_ADDR_VAR 0 4
16769: PUSH
16770: LD_EXP 65
16774: PPUSH
16775: LD_VAR 0 1
16779: PPUSH
16780: CALL 38235 0 2
16784: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16785: LD_ADDR_VAR 0 3
16789: PUSH
16790: DOUBLE
16791: LD_EXP 66
16795: PUSH
16796: LD_VAR 0 4
16800: ARRAY
16801: INC
16802: ST_TO_ADDR
16803: LD_INT 1
16805: PUSH
16806: FOR_DOWNTO
16807: IFFALSE 16979
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16809: LD_ADDR_VAR 0 5
16813: PUSH
16814: LD_EXP 66
16818: PUSH
16819: LD_VAR 0 4
16823: ARRAY
16824: PUSH
16825: LD_VAR 0 3
16829: ARRAY
16830: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16831: LD_VAR 0 5
16835: PUSH
16836: LD_INT 1
16838: ARRAY
16839: PPUSH
16840: CALL_OW 302
16844: NOT
16845: PUSH
16846: LD_VAR 0 5
16850: PUSH
16851: LD_INT 1
16853: ARRAY
16854: PPUSH
16855: CALL_OW 255
16859: PUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 255
16869: NONEQUAL
16870: OR
16871: IFFALSE 16977
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16873: LD_VAR 0 5
16877: PUSH
16878: LD_INT 1
16880: ARRAY
16881: PPUSH
16882: CALL_OW 305
16886: PUSH
16887: LD_VAR 0 5
16891: PUSH
16892: LD_INT 1
16894: ARRAY
16895: PPUSH
16896: CALL_OW 255
16900: PUSH
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 255
16910: EQUAL
16911: AND
16912: IFFALSE 16936
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16914: LD_VAR 0 5
16918: PUSH
16919: LD_INT 1
16921: ARRAY
16922: PPUSH
16923: LD_VAR 0 5
16927: PUSH
16928: LD_INT 2
16930: ARRAY
16931: PPUSH
16932: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16936: LD_ADDR_EXP 66
16940: PUSH
16941: LD_EXP 66
16945: PPUSH
16946: LD_VAR 0 4
16950: PPUSH
16951: LD_EXP 66
16955: PUSH
16956: LD_VAR 0 4
16960: ARRAY
16961: PPUSH
16962: LD_VAR 0 3
16966: PPUSH
16967: CALL_OW 3
16971: PPUSH
16972: CALL_OW 1
16976: ST_TO_ADDR
// end ; end ;
16977: GO 16806
16979: POP
16980: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16981: LD_VAR 0 1
16985: PPUSH
16986: LD_EXP 66
16990: PUSH
16991: LD_VAR 0 4
16995: ARRAY
16996: PUSH
16997: LD_INT 0
16999: PLUS
17000: PPUSH
17001: CALL_OW 505
// end ;
17005: LD_VAR 0 2
17009: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17010: LD_INT 0
17012: PPUSH
17013: PPUSH
17014: PPUSH
17015: PPUSH
// if not hack in hackTanks then
17016: LD_VAR 0 1
17020: PUSH
17021: LD_EXP 65
17025: IN
17026: NOT
17027: IFFALSE 17031
// exit ;
17029: GO 17116
// index := GetElementIndex ( hackTanks , hack ) ;
17031: LD_ADDR_VAR 0 5
17035: PUSH
17036: LD_EXP 65
17040: PPUSH
17041: LD_VAR 0 1
17045: PPUSH
17046: CALL 38235 0 2
17050: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17051: LD_ADDR_VAR 0 4
17055: PUSH
17056: DOUBLE
17057: LD_INT 1
17059: DEC
17060: ST_TO_ADDR
17061: LD_EXP 66
17065: PUSH
17066: LD_VAR 0 5
17070: ARRAY
17071: PUSH
17072: FOR_TO
17073: IFFALSE 17114
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17075: LD_EXP 66
17079: PUSH
17080: LD_VAR 0 5
17084: ARRAY
17085: PUSH
17086: LD_VAR 0 4
17090: ARRAY
17091: PUSH
17092: LD_INT 1
17094: ARRAY
17095: PUSH
17096: LD_VAR 0 2
17100: EQUAL
17101: IFFALSE 17112
// KillUnit ( vehicle ) ;
17103: LD_VAR 0 2
17107: PPUSH
17108: CALL_OW 66
17112: GO 17072
17114: POP
17115: POP
// end ;
17116: LD_VAR 0 3
17120: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17121: LD_EXP 70
17125: NOT
17126: IFFALSE 17161
17128: GO 17130
17130: DISABLE
// begin initMiner := true ;
17131: LD_ADDR_EXP 70
17135: PUSH
17136: LD_INT 1
17138: ST_TO_ADDR
// minersList := [ ] ;
17139: LD_ADDR_EXP 71
17143: PUSH
17144: EMPTY
17145: ST_TO_ADDR
// minerMinesList := [ ] ;
17146: LD_ADDR_EXP 72
17150: PUSH
17151: EMPTY
17152: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17153: LD_ADDR_EXP 73
17157: PUSH
17158: LD_INT 5
17160: ST_TO_ADDR
// end ;
17161: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17162: LD_EXP 70
17166: PUSH
17167: LD_INT 34
17169: PUSH
17170: LD_EXP 51
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PPUSH
17179: CALL_OW 69
17183: AND
17184: IFFALSE 17647
17186: GO 17188
17188: DISABLE
17189: LD_INT 0
17191: PPUSH
17192: PPUSH
17193: PPUSH
17194: PPUSH
// begin enable ;
17195: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17196: LD_ADDR_VAR 0 1
17200: PUSH
17201: LD_INT 34
17203: PUSH
17204: LD_EXP 51
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PPUSH
17213: CALL_OW 69
17217: PUSH
17218: FOR_IN
17219: IFFALSE 17291
// begin if not i in minersList then
17221: LD_VAR 0 1
17225: PUSH
17226: LD_EXP 71
17230: IN
17231: NOT
17232: IFFALSE 17289
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17234: LD_ADDR_EXP 71
17238: PUSH
17239: LD_EXP 71
17243: PPUSH
17244: LD_EXP 71
17248: PUSH
17249: LD_INT 1
17251: PLUS
17252: PPUSH
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 1
17262: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17263: LD_ADDR_EXP 72
17267: PUSH
17268: LD_EXP 72
17272: PPUSH
17273: LD_EXP 72
17277: PUSH
17278: LD_INT 1
17280: PLUS
17281: PPUSH
17282: EMPTY
17283: PPUSH
17284: CALL_OW 1
17288: ST_TO_ADDR
// end end ;
17289: GO 17218
17291: POP
17292: POP
// for i := minerMinesList downto 1 do
17293: LD_ADDR_VAR 0 1
17297: PUSH
17298: DOUBLE
17299: LD_EXP 72
17303: INC
17304: ST_TO_ADDR
17305: LD_INT 1
17307: PUSH
17308: FOR_DOWNTO
17309: IFFALSE 17645
// begin if IsLive ( minersList [ i ] ) then
17311: LD_EXP 71
17315: PUSH
17316: LD_VAR 0 1
17320: ARRAY
17321: PPUSH
17322: CALL_OW 300
17326: IFFALSE 17354
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17328: LD_EXP 71
17332: PUSH
17333: LD_VAR 0 1
17337: ARRAY
17338: PPUSH
17339: LD_EXP 72
17343: PUSH
17344: LD_VAR 0 1
17348: ARRAY
17349: PPUSH
17350: CALL_OW 505
// if not minerMinesList [ i ] then
17354: LD_EXP 72
17358: PUSH
17359: LD_VAR 0 1
17363: ARRAY
17364: NOT
17365: IFFALSE 17369
// continue ;
17367: GO 17308
// for j := minerMinesList [ i ] downto 1 do
17369: LD_ADDR_VAR 0 2
17373: PUSH
17374: DOUBLE
17375: LD_EXP 72
17379: PUSH
17380: LD_VAR 0 1
17384: ARRAY
17385: INC
17386: ST_TO_ADDR
17387: LD_INT 1
17389: PUSH
17390: FOR_DOWNTO
17391: IFFALSE 17641
// begin side := GetSide ( minersList [ i ] ) ;
17393: LD_ADDR_VAR 0 3
17397: PUSH
17398: LD_EXP 71
17402: PUSH
17403: LD_VAR 0 1
17407: ARRAY
17408: PPUSH
17409: CALL_OW 255
17413: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17414: LD_ADDR_VAR 0 4
17418: PUSH
17419: LD_EXP 72
17423: PUSH
17424: LD_VAR 0 1
17428: ARRAY
17429: PUSH
17430: LD_VAR 0 2
17434: ARRAY
17435: PUSH
17436: LD_INT 1
17438: ARRAY
17439: PPUSH
17440: LD_EXP 72
17444: PUSH
17445: LD_VAR 0 1
17449: ARRAY
17450: PUSH
17451: LD_VAR 0 2
17455: ARRAY
17456: PUSH
17457: LD_INT 2
17459: ARRAY
17460: PPUSH
17461: CALL_OW 428
17465: ST_TO_ADDR
// if not tmp then
17466: LD_VAR 0 4
17470: NOT
17471: IFFALSE 17475
// continue ;
17473: GO 17390
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17475: LD_VAR 0 4
17479: PUSH
17480: LD_INT 81
17482: PUSH
17483: LD_VAR 0 3
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PPUSH
17492: CALL_OW 69
17496: IN
17497: PUSH
17498: LD_EXP 72
17502: PUSH
17503: LD_VAR 0 1
17507: ARRAY
17508: PUSH
17509: LD_VAR 0 2
17513: ARRAY
17514: PUSH
17515: LD_INT 1
17517: ARRAY
17518: PPUSH
17519: LD_EXP 72
17523: PUSH
17524: LD_VAR 0 1
17528: ARRAY
17529: PUSH
17530: LD_VAR 0 2
17534: ARRAY
17535: PUSH
17536: LD_INT 2
17538: ARRAY
17539: PPUSH
17540: CALL_OW 458
17544: AND
17545: IFFALSE 17639
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17547: LD_EXP 72
17551: PUSH
17552: LD_VAR 0 1
17556: ARRAY
17557: PUSH
17558: LD_VAR 0 2
17562: ARRAY
17563: PUSH
17564: LD_INT 1
17566: ARRAY
17567: PPUSH
17568: LD_EXP 72
17572: PUSH
17573: LD_VAR 0 1
17577: ARRAY
17578: PUSH
17579: LD_VAR 0 2
17583: ARRAY
17584: PUSH
17585: LD_INT 2
17587: ARRAY
17588: PPUSH
17589: LD_VAR 0 3
17593: PPUSH
17594: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17598: LD_ADDR_EXP 72
17602: PUSH
17603: LD_EXP 72
17607: PPUSH
17608: LD_VAR 0 1
17612: PPUSH
17613: LD_EXP 72
17617: PUSH
17618: LD_VAR 0 1
17622: ARRAY
17623: PPUSH
17624: LD_VAR 0 2
17628: PPUSH
17629: CALL_OW 3
17633: PPUSH
17634: CALL_OW 1
17638: ST_TO_ADDR
// end ; end ;
17639: GO 17390
17641: POP
17642: POP
// end ;
17643: GO 17308
17645: POP
17646: POP
// end ;
17647: PPOPN 4
17649: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17650: LD_INT 0
17652: PPUSH
17653: PPUSH
// result := false ;
17654: LD_ADDR_VAR 0 4
17658: PUSH
17659: LD_INT 0
17661: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 264
17671: PUSH
17672: LD_EXP 51
17676: EQUAL
17677: NOT
17678: IFFALSE 17682
// exit ;
17680: GO 17922
// index := GetElementIndex ( minersList , unit ) ;
17682: LD_ADDR_VAR 0 5
17686: PUSH
17687: LD_EXP 71
17691: PPUSH
17692: LD_VAR 0 1
17696: PPUSH
17697: CALL 38235 0 2
17701: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17702: LD_EXP 72
17706: PUSH
17707: LD_VAR 0 5
17711: ARRAY
17712: PUSH
17713: LD_EXP 73
17717: GREATEREQUAL
17718: IFFALSE 17722
// exit ;
17720: GO 17922
// ComMoveXY ( unit , x , y ) ;
17722: LD_VAR 0 1
17726: PPUSH
17727: LD_VAR 0 2
17731: PPUSH
17732: LD_VAR 0 3
17736: PPUSH
17737: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17741: LD_INT 35
17743: PPUSH
17744: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17748: LD_VAR 0 1
17752: PPUSH
17753: LD_VAR 0 2
17757: PPUSH
17758: LD_VAR 0 3
17762: PPUSH
17763: CALL 69007 0 3
17767: NOT
17768: PUSH
17769: LD_VAR 0 1
17773: PPUSH
17774: CALL_OW 314
17778: AND
17779: IFFALSE 17783
// exit ;
17781: GO 17922
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17783: LD_VAR 0 2
17787: PPUSH
17788: LD_VAR 0 3
17792: PPUSH
17793: CALL_OW 428
17797: PUSH
17798: LD_VAR 0 1
17802: EQUAL
17803: PUSH
17804: LD_VAR 0 1
17808: PPUSH
17809: CALL_OW 314
17813: NOT
17814: AND
17815: IFFALSE 17741
// PlaySoundXY ( x , y , PlantMine ) ;
17817: LD_VAR 0 2
17821: PPUSH
17822: LD_VAR 0 3
17826: PPUSH
17827: LD_STRING PlantMine
17829: PPUSH
17830: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17834: LD_VAR 0 2
17838: PPUSH
17839: LD_VAR 0 3
17843: PPUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 255
17853: PPUSH
17854: LD_INT 0
17856: PPUSH
17857: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17861: LD_ADDR_EXP 72
17865: PUSH
17866: LD_EXP 72
17870: PPUSH
17871: LD_VAR 0 5
17875: PUSH
17876: LD_EXP 72
17880: PUSH
17881: LD_VAR 0 5
17885: ARRAY
17886: PUSH
17887: LD_INT 1
17889: PLUS
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PPUSH
17895: LD_VAR 0 2
17899: PUSH
17900: LD_VAR 0 3
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL 38450 0 3
17913: ST_TO_ADDR
// result := true ;
17914: LD_ADDR_VAR 0 4
17918: PUSH
17919: LD_INT 1
17921: ST_TO_ADDR
// end ;
17922: LD_VAR 0 4
17926: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17927: LD_INT 0
17929: PPUSH
17930: PPUSH
17931: PPUSH
// if not unit in minersList then
17932: LD_VAR 0 1
17936: PUSH
17937: LD_EXP 71
17941: IN
17942: NOT
17943: IFFALSE 17947
// exit ;
17945: GO 18339
// index := GetElementIndex ( minersList , unit ) ;
17947: LD_ADDR_VAR 0 6
17951: PUSH
17952: LD_EXP 71
17956: PPUSH
17957: LD_VAR 0 1
17961: PPUSH
17962: CALL 38235 0 2
17966: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17967: LD_ADDR_VAR 0 5
17971: PUSH
17972: DOUBLE
17973: LD_EXP 72
17977: PUSH
17978: LD_VAR 0 6
17982: ARRAY
17983: INC
17984: ST_TO_ADDR
17985: LD_INT 1
17987: PUSH
17988: FOR_DOWNTO
17989: IFFALSE 18150
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17991: LD_EXP 72
17995: PUSH
17996: LD_VAR 0 6
18000: ARRAY
18001: PUSH
18002: LD_VAR 0 5
18006: ARRAY
18007: PUSH
18008: LD_INT 1
18010: ARRAY
18011: PUSH
18012: LD_VAR 0 2
18016: EQUAL
18017: PUSH
18018: LD_EXP 72
18022: PUSH
18023: LD_VAR 0 6
18027: ARRAY
18028: PUSH
18029: LD_VAR 0 5
18033: ARRAY
18034: PUSH
18035: LD_INT 2
18037: ARRAY
18038: PUSH
18039: LD_VAR 0 3
18043: EQUAL
18044: AND
18045: IFFALSE 18148
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18047: LD_EXP 72
18051: PUSH
18052: LD_VAR 0 6
18056: ARRAY
18057: PUSH
18058: LD_VAR 0 5
18062: ARRAY
18063: PUSH
18064: LD_INT 1
18066: ARRAY
18067: PPUSH
18068: LD_EXP 72
18072: PUSH
18073: LD_VAR 0 6
18077: ARRAY
18078: PUSH
18079: LD_VAR 0 5
18083: ARRAY
18084: PUSH
18085: LD_INT 2
18087: ARRAY
18088: PPUSH
18089: LD_VAR 0 1
18093: PPUSH
18094: CALL_OW 255
18098: PPUSH
18099: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18103: LD_ADDR_EXP 72
18107: PUSH
18108: LD_EXP 72
18112: PPUSH
18113: LD_VAR 0 6
18117: PPUSH
18118: LD_EXP 72
18122: PUSH
18123: LD_VAR 0 6
18127: ARRAY
18128: PPUSH
18129: LD_VAR 0 5
18133: PPUSH
18134: CALL_OW 3
18138: PPUSH
18139: CALL_OW 1
18143: ST_TO_ADDR
// exit ;
18144: POP
18145: POP
18146: GO 18339
// end ; end ;
18148: GO 17988
18150: POP
18151: POP
// for i := minerMinesList [ index ] downto 1 do
18152: LD_ADDR_VAR 0 5
18156: PUSH
18157: DOUBLE
18158: LD_EXP 72
18162: PUSH
18163: LD_VAR 0 6
18167: ARRAY
18168: INC
18169: ST_TO_ADDR
18170: LD_INT 1
18172: PUSH
18173: FOR_DOWNTO
18174: IFFALSE 18337
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18176: LD_EXP 72
18180: PUSH
18181: LD_VAR 0 6
18185: ARRAY
18186: PUSH
18187: LD_VAR 0 5
18191: ARRAY
18192: PUSH
18193: LD_INT 1
18195: ARRAY
18196: PPUSH
18197: LD_EXP 72
18201: PUSH
18202: LD_VAR 0 6
18206: ARRAY
18207: PUSH
18208: LD_VAR 0 5
18212: ARRAY
18213: PUSH
18214: LD_INT 2
18216: ARRAY
18217: PPUSH
18218: LD_VAR 0 2
18222: PPUSH
18223: LD_VAR 0 3
18227: PPUSH
18228: CALL_OW 298
18232: PUSH
18233: LD_INT 6
18235: LESS
18236: IFFALSE 18335
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18238: LD_EXP 72
18242: PUSH
18243: LD_VAR 0 6
18247: ARRAY
18248: PUSH
18249: LD_VAR 0 5
18253: ARRAY
18254: PUSH
18255: LD_INT 1
18257: ARRAY
18258: PPUSH
18259: LD_EXP 72
18263: PUSH
18264: LD_VAR 0 6
18268: ARRAY
18269: PUSH
18270: LD_VAR 0 5
18274: ARRAY
18275: PUSH
18276: LD_INT 2
18278: ARRAY
18279: PPUSH
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 255
18289: PPUSH
18290: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18294: LD_ADDR_EXP 72
18298: PUSH
18299: LD_EXP 72
18303: PPUSH
18304: LD_VAR 0 6
18308: PPUSH
18309: LD_EXP 72
18313: PUSH
18314: LD_VAR 0 6
18318: ARRAY
18319: PPUSH
18320: LD_VAR 0 5
18324: PPUSH
18325: CALL_OW 3
18329: PPUSH
18330: CALL_OW 1
18334: ST_TO_ADDR
// end ; end ;
18335: GO 18173
18337: POP
18338: POP
// end ;
18339: LD_VAR 0 4
18343: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18344: LD_INT 0
18346: PPUSH
18347: PPUSH
18348: PPUSH
18349: PPUSH
18350: PPUSH
18351: PPUSH
18352: PPUSH
18353: PPUSH
18354: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL_OW 264
18364: PUSH
18365: LD_EXP 51
18369: EQUAL
18370: NOT
18371: PUSH
18372: LD_VAR 0 1
18376: PUSH
18377: LD_EXP 71
18381: IN
18382: NOT
18383: OR
18384: IFFALSE 18388
// exit ;
18386: GO 18710
// index := GetElementIndex ( minersList , unit ) ;
18388: LD_ADDR_VAR 0 6
18392: PUSH
18393: LD_EXP 71
18397: PPUSH
18398: LD_VAR 0 1
18402: PPUSH
18403: CALL 38235 0 2
18407: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18408: LD_ADDR_VAR 0 8
18412: PUSH
18413: LD_EXP 73
18417: PUSH
18418: LD_EXP 72
18422: PUSH
18423: LD_VAR 0 6
18427: ARRAY
18428: MINUS
18429: ST_TO_ADDR
// if not minesFreeAmount then
18430: LD_VAR 0 8
18434: NOT
18435: IFFALSE 18439
// exit ;
18437: GO 18710
// tmp := [ ] ;
18439: LD_ADDR_VAR 0 7
18443: PUSH
18444: EMPTY
18445: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18446: LD_ADDR_VAR 0 5
18450: PUSH
18451: DOUBLE
18452: LD_INT 1
18454: DEC
18455: ST_TO_ADDR
18456: LD_VAR 0 8
18460: PUSH
18461: FOR_TO
18462: IFFALSE 18657
// begin _d := rand ( 0 , 5 ) ;
18464: LD_ADDR_VAR 0 11
18468: PUSH
18469: LD_INT 0
18471: PPUSH
18472: LD_INT 5
18474: PPUSH
18475: CALL_OW 12
18479: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18480: LD_ADDR_VAR 0 12
18484: PUSH
18485: LD_INT 2
18487: PPUSH
18488: LD_INT 6
18490: PPUSH
18491: CALL_OW 12
18495: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18496: LD_ADDR_VAR 0 9
18500: PUSH
18501: LD_VAR 0 2
18505: PPUSH
18506: LD_VAR 0 11
18510: PPUSH
18511: LD_VAR 0 12
18515: PPUSH
18516: CALL_OW 272
18520: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18521: LD_ADDR_VAR 0 10
18525: PUSH
18526: LD_VAR 0 3
18530: PPUSH
18531: LD_VAR 0 11
18535: PPUSH
18536: LD_VAR 0 12
18540: PPUSH
18541: CALL_OW 273
18545: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18546: LD_VAR 0 9
18550: PPUSH
18551: LD_VAR 0 10
18555: PPUSH
18556: CALL_OW 488
18560: PUSH
18561: LD_VAR 0 9
18565: PUSH
18566: LD_VAR 0 10
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_VAR 0 7
18579: IN
18580: NOT
18581: AND
18582: PUSH
18583: LD_VAR 0 9
18587: PPUSH
18588: LD_VAR 0 10
18592: PPUSH
18593: CALL_OW 458
18597: NOT
18598: AND
18599: IFFALSE 18641
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18601: LD_ADDR_VAR 0 7
18605: PUSH
18606: LD_VAR 0 7
18610: PPUSH
18611: LD_VAR 0 7
18615: PUSH
18616: LD_INT 1
18618: PLUS
18619: PPUSH
18620: LD_VAR 0 9
18624: PUSH
18625: LD_VAR 0 10
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PPUSH
18634: CALL_OW 1
18638: ST_TO_ADDR
18639: GO 18655
// i := i - 1 ;
18641: LD_ADDR_VAR 0 5
18645: PUSH
18646: LD_VAR 0 5
18650: PUSH
18651: LD_INT 1
18653: MINUS
18654: ST_TO_ADDR
// end ;
18655: GO 18461
18657: POP
18658: POP
// for i in tmp do
18659: LD_ADDR_VAR 0 5
18663: PUSH
18664: LD_VAR 0 7
18668: PUSH
18669: FOR_IN
18670: IFFALSE 18708
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18672: LD_VAR 0 1
18676: PPUSH
18677: LD_VAR 0 5
18681: PUSH
18682: LD_INT 1
18684: ARRAY
18685: PPUSH
18686: LD_VAR 0 5
18690: PUSH
18691: LD_INT 2
18693: ARRAY
18694: PPUSH
18695: CALL 17650 0 3
18699: NOT
18700: IFFALSE 18706
// exit ;
18702: POP
18703: POP
18704: GO 18710
18706: GO 18669
18708: POP
18709: POP
// end ;
18710: LD_VAR 0 4
18714: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18715: LD_INT 0
18717: PPUSH
18718: PPUSH
18719: PPUSH
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
// if not GetClass ( unit ) = class_sniper then
18724: LD_VAR 0 1
18728: PPUSH
18729: CALL_OW 257
18733: PUSH
18734: LD_INT 5
18736: EQUAL
18737: NOT
18738: IFFALSE 18742
// exit ;
18740: GO 19130
// dist := 8 ;
18742: LD_ADDR_VAR 0 5
18746: PUSH
18747: LD_INT 8
18749: ST_TO_ADDR
// viewRange := 12 ;
18750: LD_ADDR_VAR 0 7
18754: PUSH
18755: LD_INT 12
18757: ST_TO_ADDR
// side := GetSide ( unit ) ;
18758: LD_ADDR_VAR 0 6
18762: PUSH
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL_OW 255
18772: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18773: LD_INT 61
18775: PPUSH
18776: LD_VAR 0 6
18780: PPUSH
18781: CALL_OW 321
18785: PUSH
18786: LD_INT 2
18788: EQUAL
18789: IFFALSE 18799
// viewRange := 16 ;
18791: LD_ADDR_VAR 0 7
18795: PUSH
18796: LD_INT 16
18798: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18799: LD_VAR 0 1
18803: PPUSH
18804: LD_VAR 0 2
18808: PPUSH
18809: LD_VAR 0 3
18813: PPUSH
18814: CALL_OW 297
18818: PUSH
18819: LD_VAR 0 5
18823: GREATER
18824: IFFALSE 18903
// begin ComMoveXY ( unit , x , y ) ;
18826: LD_VAR 0 1
18830: PPUSH
18831: LD_VAR 0 2
18835: PPUSH
18836: LD_VAR 0 3
18840: PPUSH
18841: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18845: LD_INT 35
18847: PPUSH
18848: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18852: LD_VAR 0 1
18856: PPUSH
18857: LD_VAR 0 2
18861: PPUSH
18862: LD_VAR 0 3
18866: PPUSH
18867: CALL 69007 0 3
18871: NOT
18872: IFFALSE 18876
// exit ;
18874: GO 19130
// until GetDistUnitXY ( unit , x , y ) < dist ;
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_VAR 0 2
18885: PPUSH
18886: LD_VAR 0 3
18890: PPUSH
18891: CALL_OW 297
18895: PUSH
18896: LD_VAR 0 5
18900: LESS
18901: IFFALSE 18845
// end ; ComTurnXY ( unit , x , y ) ;
18903: LD_VAR 0 1
18907: PPUSH
18908: LD_VAR 0 2
18912: PPUSH
18913: LD_VAR 0 3
18917: PPUSH
18918: CALL_OW 118
// wait ( 5 ) ;
18922: LD_INT 5
18924: PPUSH
18925: CALL_OW 67
// _d := GetDir ( unit ) ;
18929: LD_ADDR_VAR 0 10
18933: PUSH
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL_OW 254
18943: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18944: LD_ADDR_VAR 0 8
18948: PUSH
18949: LD_VAR 0 1
18953: PPUSH
18954: CALL_OW 250
18958: PPUSH
18959: LD_VAR 0 10
18963: PPUSH
18964: LD_VAR 0 5
18968: PPUSH
18969: CALL_OW 272
18973: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18974: LD_ADDR_VAR 0 9
18978: PUSH
18979: LD_VAR 0 1
18983: PPUSH
18984: CALL_OW 251
18988: PPUSH
18989: LD_VAR 0 10
18993: PPUSH
18994: LD_VAR 0 5
18998: PPUSH
18999: CALL_OW 273
19003: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19004: LD_VAR 0 8
19008: PPUSH
19009: LD_VAR 0 9
19013: PPUSH
19014: CALL_OW 488
19018: NOT
19019: IFFALSE 19023
// exit ;
19021: GO 19130
// ComAnimCustom ( unit , 1 ) ;
19023: LD_VAR 0 1
19027: PPUSH
19028: LD_INT 1
19030: PPUSH
19031: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19035: LD_VAR 0 8
19039: PPUSH
19040: LD_VAR 0 9
19044: PPUSH
19045: LD_VAR 0 6
19049: PPUSH
19050: LD_VAR 0 7
19054: PPUSH
19055: CALL_OW 330
// repeat wait ( 1 ) ;
19059: LD_INT 1
19061: PPUSH
19062: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19066: LD_VAR 0 1
19070: PPUSH
19071: CALL_OW 316
19075: PUSH
19076: LD_VAR 0 1
19080: PPUSH
19081: CALL_OW 314
19085: OR
19086: PUSH
19087: LD_VAR 0 1
19091: PPUSH
19092: CALL_OW 302
19096: NOT
19097: OR
19098: PUSH
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 301
19108: OR
19109: IFFALSE 19059
// RemoveSeeing ( _x , _y , side ) ;
19111: LD_VAR 0 8
19115: PPUSH
19116: LD_VAR 0 9
19120: PPUSH
19121: LD_VAR 0 6
19125: PPUSH
19126: CALL_OW 331
// end ; end_of_file
19130: LD_VAR 0 4
19134: RET
// every 0 0$1 do
19135: GO 19137
19137: DISABLE
// begin enable ;
19138: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19139: LD_STRING updateTimer(
19141: PUSH
19142: LD_OWVAR 1
19146: STR
19147: PUSH
19148: LD_STRING );
19150: STR
19151: PPUSH
19152: CALL_OW 559
// end ;
19156: END
// on MapStart ( p ) do begin if streamModeActive then
19157: LD_EXP 74
19161: IFFALSE 19170
// DefineStreamItems ( true ) ;
19163: LD_INT 1
19165: PPUSH
19166: CALL 20818 0 1
// UpdateFactoryWaypoints ( ) ;
19170: CALL 15433 0 0
// end ;
19174: PPOPN 1
19176: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19177: LD_INT 0
19179: PPUSH
// if p2 = 100 then
19180: LD_VAR 0 2
19184: PUSH
19185: LD_INT 100
19187: EQUAL
19188: IFFALSE 20191
// begin if not StreamModeActive then
19190: LD_EXP 74
19194: NOT
19195: IFFALSE 19205
// StreamModeActive := true ;
19197: LD_ADDR_EXP 74
19201: PUSH
19202: LD_INT 1
19204: ST_TO_ADDR
// if p3 = 0 then
19205: LD_VAR 0 3
19209: PUSH
19210: LD_INT 0
19212: EQUAL
19213: IFFALSE 19219
// InitStreamMode ;
19215: CALL 20354 0 0
// if p3 = 1 then
19219: LD_VAR 0 3
19223: PUSH
19224: LD_INT 1
19226: EQUAL
19227: IFFALSE 19237
// sRocket := true ;
19229: LD_ADDR_EXP 79
19233: PUSH
19234: LD_INT 1
19236: ST_TO_ADDR
// if p3 = 2 then
19237: LD_VAR 0 3
19241: PUSH
19242: LD_INT 2
19244: EQUAL
19245: IFFALSE 19255
// sSpeed := true ;
19247: LD_ADDR_EXP 78
19251: PUSH
19252: LD_INT 1
19254: ST_TO_ADDR
// if p3 = 3 then
19255: LD_VAR 0 3
19259: PUSH
19260: LD_INT 3
19262: EQUAL
19263: IFFALSE 19273
// sEngine := true ;
19265: LD_ADDR_EXP 80
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// if p3 = 4 then
19273: LD_VAR 0 3
19277: PUSH
19278: LD_INT 4
19280: EQUAL
19281: IFFALSE 19291
// sSpec := true ;
19283: LD_ADDR_EXP 77
19287: PUSH
19288: LD_INT 1
19290: ST_TO_ADDR
// if p3 = 5 then
19291: LD_VAR 0 3
19295: PUSH
19296: LD_INT 5
19298: EQUAL
19299: IFFALSE 19309
// sLevel := true ;
19301: LD_ADDR_EXP 81
19305: PUSH
19306: LD_INT 1
19308: ST_TO_ADDR
// if p3 = 6 then
19309: LD_VAR 0 3
19313: PUSH
19314: LD_INT 6
19316: EQUAL
19317: IFFALSE 19327
// sArmoury := true ;
19319: LD_ADDR_EXP 82
19323: PUSH
19324: LD_INT 1
19326: ST_TO_ADDR
// if p3 = 7 then
19327: LD_VAR 0 3
19331: PUSH
19332: LD_INT 7
19334: EQUAL
19335: IFFALSE 19345
// sRadar := true ;
19337: LD_ADDR_EXP 83
19341: PUSH
19342: LD_INT 1
19344: ST_TO_ADDR
// if p3 = 8 then
19345: LD_VAR 0 3
19349: PUSH
19350: LD_INT 8
19352: EQUAL
19353: IFFALSE 19363
// sBunker := true ;
19355: LD_ADDR_EXP 84
19359: PUSH
19360: LD_INT 1
19362: ST_TO_ADDR
// if p3 = 9 then
19363: LD_VAR 0 3
19367: PUSH
19368: LD_INT 9
19370: EQUAL
19371: IFFALSE 19381
// sHack := true ;
19373: LD_ADDR_EXP 85
19377: PUSH
19378: LD_INT 1
19380: ST_TO_ADDR
// if p3 = 10 then
19381: LD_VAR 0 3
19385: PUSH
19386: LD_INT 10
19388: EQUAL
19389: IFFALSE 19399
// sFire := true ;
19391: LD_ADDR_EXP 86
19395: PUSH
19396: LD_INT 1
19398: ST_TO_ADDR
// if p3 = 11 then
19399: LD_VAR 0 3
19403: PUSH
19404: LD_INT 11
19406: EQUAL
19407: IFFALSE 19417
// sRefresh := true ;
19409: LD_ADDR_EXP 87
19413: PUSH
19414: LD_INT 1
19416: ST_TO_ADDR
// if p3 = 12 then
19417: LD_VAR 0 3
19421: PUSH
19422: LD_INT 12
19424: EQUAL
19425: IFFALSE 19435
// sExp := true ;
19427: LD_ADDR_EXP 88
19431: PUSH
19432: LD_INT 1
19434: ST_TO_ADDR
// if p3 = 13 then
19435: LD_VAR 0 3
19439: PUSH
19440: LD_INT 13
19442: EQUAL
19443: IFFALSE 19453
// sDepot := true ;
19445: LD_ADDR_EXP 89
19449: PUSH
19450: LD_INT 1
19452: ST_TO_ADDR
// if p3 = 14 then
19453: LD_VAR 0 3
19457: PUSH
19458: LD_INT 14
19460: EQUAL
19461: IFFALSE 19471
// sFlag := true ;
19463: LD_ADDR_EXP 90
19467: PUSH
19468: LD_INT 1
19470: ST_TO_ADDR
// if p3 = 15 then
19471: LD_VAR 0 3
19475: PUSH
19476: LD_INT 15
19478: EQUAL
19479: IFFALSE 19489
// sKamikadze := true ;
19481: LD_ADDR_EXP 98
19485: PUSH
19486: LD_INT 1
19488: ST_TO_ADDR
// if p3 = 16 then
19489: LD_VAR 0 3
19493: PUSH
19494: LD_INT 16
19496: EQUAL
19497: IFFALSE 19507
// sTroll := true ;
19499: LD_ADDR_EXP 99
19503: PUSH
19504: LD_INT 1
19506: ST_TO_ADDR
// if p3 = 17 then
19507: LD_VAR 0 3
19511: PUSH
19512: LD_INT 17
19514: EQUAL
19515: IFFALSE 19525
// sSlow := true ;
19517: LD_ADDR_EXP 100
19521: PUSH
19522: LD_INT 1
19524: ST_TO_ADDR
// if p3 = 18 then
19525: LD_VAR 0 3
19529: PUSH
19530: LD_INT 18
19532: EQUAL
19533: IFFALSE 19543
// sLack := true ;
19535: LD_ADDR_EXP 101
19539: PUSH
19540: LD_INT 1
19542: ST_TO_ADDR
// if p3 = 19 then
19543: LD_VAR 0 3
19547: PUSH
19548: LD_INT 19
19550: EQUAL
19551: IFFALSE 19561
// sTank := true ;
19553: LD_ADDR_EXP 103
19557: PUSH
19558: LD_INT 1
19560: ST_TO_ADDR
// if p3 = 20 then
19561: LD_VAR 0 3
19565: PUSH
19566: LD_INT 20
19568: EQUAL
19569: IFFALSE 19579
// sRemote := true ;
19571: LD_ADDR_EXP 104
19575: PUSH
19576: LD_INT 1
19578: ST_TO_ADDR
// if p3 = 21 then
19579: LD_VAR 0 3
19583: PUSH
19584: LD_INT 21
19586: EQUAL
19587: IFFALSE 19597
// sPowell := true ;
19589: LD_ADDR_EXP 105
19593: PUSH
19594: LD_INT 1
19596: ST_TO_ADDR
// if p3 = 22 then
19597: LD_VAR 0 3
19601: PUSH
19602: LD_INT 22
19604: EQUAL
19605: IFFALSE 19615
// sTeleport := true ;
19607: LD_ADDR_EXP 108
19611: PUSH
19612: LD_INT 1
19614: ST_TO_ADDR
// if p3 = 23 then
19615: LD_VAR 0 3
19619: PUSH
19620: LD_INT 23
19622: EQUAL
19623: IFFALSE 19633
// sOilTower := true ;
19625: LD_ADDR_EXP 110
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// if p3 = 24 then
19633: LD_VAR 0 3
19637: PUSH
19638: LD_INT 24
19640: EQUAL
19641: IFFALSE 19651
// sShovel := true ;
19643: LD_ADDR_EXP 111
19647: PUSH
19648: LD_INT 1
19650: ST_TO_ADDR
// if p3 = 25 then
19651: LD_VAR 0 3
19655: PUSH
19656: LD_INT 25
19658: EQUAL
19659: IFFALSE 19669
// sSheik := true ;
19661: LD_ADDR_EXP 112
19665: PUSH
19666: LD_INT 1
19668: ST_TO_ADDR
// if p3 = 26 then
19669: LD_VAR 0 3
19673: PUSH
19674: LD_INT 26
19676: EQUAL
19677: IFFALSE 19687
// sEarthquake := true ;
19679: LD_ADDR_EXP 114
19683: PUSH
19684: LD_INT 1
19686: ST_TO_ADDR
// if p3 = 27 then
19687: LD_VAR 0 3
19691: PUSH
19692: LD_INT 27
19694: EQUAL
19695: IFFALSE 19705
// sAI := true ;
19697: LD_ADDR_EXP 115
19701: PUSH
19702: LD_INT 1
19704: ST_TO_ADDR
// if p3 = 28 then
19705: LD_VAR 0 3
19709: PUSH
19710: LD_INT 28
19712: EQUAL
19713: IFFALSE 19723
// sCargo := true ;
19715: LD_ADDR_EXP 118
19719: PUSH
19720: LD_INT 1
19722: ST_TO_ADDR
// if p3 = 29 then
19723: LD_VAR 0 3
19727: PUSH
19728: LD_INT 29
19730: EQUAL
19731: IFFALSE 19741
// sDLaser := true ;
19733: LD_ADDR_EXP 119
19737: PUSH
19738: LD_INT 1
19740: ST_TO_ADDR
// if p3 = 30 then
19741: LD_VAR 0 3
19745: PUSH
19746: LD_INT 30
19748: EQUAL
19749: IFFALSE 19759
// sExchange := true ;
19751: LD_ADDR_EXP 120
19755: PUSH
19756: LD_INT 1
19758: ST_TO_ADDR
// if p3 = 31 then
19759: LD_VAR 0 3
19763: PUSH
19764: LD_INT 31
19766: EQUAL
19767: IFFALSE 19777
// sFac := true ;
19769: LD_ADDR_EXP 121
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
// if p3 = 32 then
19777: LD_VAR 0 3
19781: PUSH
19782: LD_INT 32
19784: EQUAL
19785: IFFALSE 19795
// sPower := true ;
19787: LD_ADDR_EXP 122
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
// if p3 = 33 then
19795: LD_VAR 0 3
19799: PUSH
19800: LD_INT 33
19802: EQUAL
19803: IFFALSE 19813
// sRandom := true ;
19805: LD_ADDR_EXP 123
19809: PUSH
19810: LD_INT 1
19812: ST_TO_ADDR
// if p3 = 34 then
19813: LD_VAR 0 3
19817: PUSH
19818: LD_INT 34
19820: EQUAL
19821: IFFALSE 19831
// sShield := true ;
19823: LD_ADDR_EXP 124
19827: PUSH
19828: LD_INT 1
19830: ST_TO_ADDR
// if p3 = 35 then
19831: LD_VAR 0 3
19835: PUSH
19836: LD_INT 35
19838: EQUAL
19839: IFFALSE 19849
// sTime := true ;
19841: LD_ADDR_EXP 125
19845: PUSH
19846: LD_INT 1
19848: ST_TO_ADDR
// if p3 = 36 then
19849: LD_VAR 0 3
19853: PUSH
19854: LD_INT 36
19856: EQUAL
19857: IFFALSE 19867
// sTools := true ;
19859: LD_ADDR_EXP 126
19863: PUSH
19864: LD_INT 1
19866: ST_TO_ADDR
// if p3 = 101 then
19867: LD_VAR 0 3
19871: PUSH
19872: LD_INT 101
19874: EQUAL
19875: IFFALSE 19885
// sSold := true ;
19877: LD_ADDR_EXP 91
19881: PUSH
19882: LD_INT 1
19884: ST_TO_ADDR
// if p3 = 102 then
19885: LD_VAR 0 3
19889: PUSH
19890: LD_INT 102
19892: EQUAL
19893: IFFALSE 19903
// sDiff := true ;
19895: LD_ADDR_EXP 92
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// if p3 = 103 then
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 103
19910: EQUAL
19911: IFFALSE 19921
// sFog := true ;
19913: LD_ADDR_EXP 95
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if p3 = 104 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 104
19928: EQUAL
19929: IFFALSE 19939
// sReset := true ;
19931: LD_ADDR_EXP 96
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 105 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 105
19946: EQUAL
19947: IFFALSE 19957
// sSun := true ;
19949: LD_ADDR_EXP 97
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 106 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 106
19964: EQUAL
19965: IFFALSE 19975
// sTiger := true ;
19967: LD_ADDR_EXP 93
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 107 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 107
19982: EQUAL
19983: IFFALSE 19993
// sBomb := true ;
19985: LD_ADDR_EXP 94
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 108 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 108
20000: EQUAL
20001: IFFALSE 20011
// sWound := true ;
20003: LD_ADDR_EXP 102
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 109 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 109
20018: EQUAL
20019: IFFALSE 20029
// sBetray := true ;
20021: LD_ADDR_EXP 106
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 110 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 110
20036: EQUAL
20037: IFFALSE 20047
// sContamin := true ;
20039: LD_ADDR_EXP 107
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 111 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 111
20054: EQUAL
20055: IFFALSE 20065
// sOil := true ;
20057: LD_ADDR_EXP 109
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 112 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 112
20072: EQUAL
20073: IFFALSE 20083
// sStu := true ;
20075: LD_ADDR_EXP 113
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 113 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 113
20090: EQUAL
20091: IFFALSE 20101
// sBazooka := true ;
20093: LD_ADDR_EXP 116
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 114 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 114
20108: EQUAL
20109: IFFALSE 20119
// sMortar := true ;
20111: LD_ADDR_EXP 117
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 115 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 115
20126: EQUAL
20127: IFFALSE 20137
// sRanger := true ;
20129: LD_ADDR_EXP 127
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 116 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 116
20144: EQUAL
20145: IFFALSE 20155
// sComputer := true ;
20147: LD_ADDR_EXP 128
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// if p3 = 117 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 117
20162: EQUAL
20163: IFFALSE 20173
// s30 := true ;
20165: LD_ADDR_EXP 129
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// if p3 = 118 then
20173: LD_VAR 0 3
20177: PUSH
20178: LD_INT 118
20180: EQUAL
20181: IFFALSE 20191
// s60 := true ;
20183: LD_ADDR_EXP 130
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// end ; if p2 = 101 then
20191: LD_VAR 0 2
20195: PUSH
20196: LD_INT 101
20198: EQUAL
20199: IFFALSE 20327
// begin case p3 of 1 :
20201: LD_VAR 0 3
20205: PUSH
20206: LD_INT 1
20208: DOUBLE
20209: EQUAL
20210: IFTRUE 20214
20212: GO 20221
20214: POP
// hHackUnlimitedResources ; 2 :
20215: CALL 32425 0 0
20219: GO 20327
20221: LD_INT 2
20223: DOUBLE
20224: EQUAL
20225: IFTRUE 20229
20227: GO 20236
20229: POP
// hHackSetLevel10 ; 3 :
20230: CALL 32558 0 0
20234: GO 20327
20236: LD_INT 3
20238: DOUBLE
20239: EQUAL
20240: IFTRUE 20244
20242: GO 20251
20244: POP
// hHackSetLevel10YourUnits ; 4 :
20245: CALL 32643 0 0
20249: GO 20327
20251: LD_INT 4
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20266
20259: POP
// hHackInvincible ; 5 :
20260: CALL 33091 0 0
20264: GO 20327
20266: LD_INT 5
20268: DOUBLE
20269: EQUAL
20270: IFTRUE 20274
20272: GO 20281
20274: POP
// hHackInvisible ; 6 :
20275: CALL 33202 0 0
20279: GO 20327
20281: LD_INT 6
20283: DOUBLE
20284: EQUAL
20285: IFTRUE 20289
20287: GO 20296
20289: POP
// hHackChangeYourSide ; 7 :
20290: CALL 33259 0 0
20294: GO 20327
20296: LD_INT 7
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20311
20304: POP
// hHackChangeUnitSide ; 8 :
20305: CALL 33301 0 0
20309: GO 20327
20311: LD_INT 8
20313: DOUBLE
20314: EQUAL
20315: IFTRUE 20319
20317: GO 20326
20319: POP
// hHackFog ; end ;
20320: CALL 33402 0 0
20324: GO 20327
20326: POP
// end ; end ;
20327: LD_VAR 0 7
20331: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20332: GO 20334
20334: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20335: LD_STRING initStreamRollete();
20337: PPUSH
20338: CALL_OW 559
// InitStreamMode ;
20342: CALL 20354 0 0
// DefineStreamItems ( false ) ;
20346: LD_INT 0
20348: PPUSH
20349: CALL 20818 0 1
// end ;
20353: END
// function InitStreamMode ; begin
20354: LD_INT 0
20356: PPUSH
// streamModeActive := false ;
20357: LD_ADDR_EXP 74
20361: PUSH
20362: LD_INT 0
20364: ST_TO_ADDR
// normalCounter := 36 ;
20365: LD_ADDR_EXP 75
20369: PUSH
20370: LD_INT 36
20372: ST_TO_ADDR
// hardcoreCounter := 18 ;
20373: LD_ADDR_EXP 76
20377: PUSH
20378: LD_INT 18
20380: ST_TO_ADDR
// sRocket := false ;
20381: LD_ADDR_EXP 79
20385: PUSH
20386: LD_INT 0
20388: ST_TO_ADDR
// sSpeed := false ;
20389: LD_ADDR_EXP 78
20393: PUSH
20394: LD_INT 0
20396: ST_TO_ADDR
// sEngine := false ;
20397: LD_ADDR_EXP 80
20401: PUSH
20402: LD_INT 0
20404: ST_TO_ADDR
// sSpec := false ;
20405: LD_ADDR_EXP 77
20409: PUSH
20410: LD_INT 0
20412: ST_TO_ADDR
// sLevel := false ;
20413: LD_ADDR_EXP 81
20417: PUSH
20418: LD_INT 0
20420: ST_TO_ADDR
// sArmoury := false ;
20421: LD_ADDR_EXP 82
20425: PUSH
20426: LD_INT 0
20428: ST_TO_ADDR
// sRadar := false ;
20429: LD_ADDR_EXP 83
20433: PUSH
20434: LD_INT 0
20436: ST_TO_ADDR
// sBunker := false ;
20437: LD_ADDR_EXP 84
20441: PUSH
20442: LD_INT 0
20444: ST_TO_ADDR
// sHack := false ;
20445: LD_ADDR_EXP 85
20449: PUSH
20450: LD_INT 0
20452: ST_TO_ADDR
// sFire := false ;
20453: LD_ADDR_EXP 86
20457: PUSH
20458: LD_INT 0
20460: ST_TO_ADDR
// sRefresh := false ;
20461: LD_ADDR_EXP 87
20465: PUSH
20466: LD_INT 0
20468: ST_TO_ADDR
// sExp := false ;
20469: LD_ADDR_EXP 88
20473: PUSH
20474: LD_INT 0
20476: ST_TO_ADDR
// sDepot := false ;
20477: LD_ADDR_EXP 89
20481: PUSH
20482: LD_INT 0
20484: ST_TO_ADDR
// sFlag := false ;
20485: LD_ADDR_EXP 90
20489: PUSH
20490: LD_INT 0
20492: ST_TO_ADDR
// sKamikadze := false ;
20493: LD_ADDR_EXP 98
20497: PUSH
20498: LD_INT 0
20500: ST_TO_ADDR
// sTroll := false ;
20501: LD_ADDR_EXP 99
20505: PUSH
20506: LD_INT 0
20508: ST_TO_ADDR
// sSlow := false ;
20509: LD_ADDR_EXP 100
20513: PUSH
20514: LD_INT 0
20516: ST_TO_ADDR
// sLack := false ;
20517: LD_ADDR_EXP 101
20521: PUSH
20522: LD_INT 0
20524: ST_TO_ADDR
// sTank := false ;
20525: LD_ADDR_EXP 103
20529: PUSH
20530: LD_INT 0
20532: ST_TO_ADDR
// sRemote := false ;
20533: LD_ADDR_EXP 104
20537: PUSH
20538: LD_INT 0
20540: ST_TO_ADDR
// sPowell := false ;
20541: LD_ADDR_EXP 105
20545: PUSH
20546: LD_INT 0
20548: ST_TO_ADDR
// sTeleport := false ;
20549: LD_ADDR_EXP 108
20553: PUSH
20554: LD_INT 0
20556: ST_TO_ADDR
// sOilTower := false ;
20557: LD_ADDR_EXP 110
20561: PUSH
20562: LD_INT 0
20564: ST_TO_ADDR
// sShovel := false ;
20565: LD_ADDR_EXP 111
20569: PUSH
20570: LD_INT 0
20572: ST_TO_ADDR
// sSheik := false ;
20573: LD_ADDR_EXP 112
20577: PUSH
20578: LD_INT 0
20580: ST_TO_ADDR
// sEarthquake := false ;
20581: LD_ADDR_EXP 114
20585: PUSH
20586: LD_INT 0
20588: ST_TO_ADDR
// sAI := false ;
20589: LD_ADDR_EXP 115
20593: PUSH
20594: LD_INT 0
20596: ST_TO_ADDR
// sCargo := false ;
20597: LD_ADDR_EXP 118
20601: PUSH
20602: LD_INT 0
20604: ST_TO_ADDR
// sDLaser := false ;
20605: LD_ADDR_EXP 119
20609: PUSH
20610: LD_INT 0
20612: ST_TO_ADDR
// sExchange := false ;
20613: LD_ADDR_EXP 120
20617: PUSH
20618: LD_INT 0
20620: ST_TO_ADDR
// sFac := false ;
20621: LD_ADDR_EXP 121
20625: PUSH
20626: LD_INT 0
20628: ST_TO_ADDR
// sPower := false ;
20629: LD_ADDR_EXP 122
20633: PUSH
20634: LD_INT 0
20636: ST_TO_ADDR
// sRandom := false ;
20637: LD_ADDR_EXP 123
20641: PUSH
20642: LD_INT 0
20644: ST_TO_ADDR
// sShield := false ;
20645: LD_ADDR_EXP 124
20649: PUSH
20650: LD_INT 0
20652: ST_TO_ADDR
// sTime := false ;
20653: LD_ADDR_EXP 125
20657: PUSH
20658: LD_INT 0
20660: ST_TO_ADDR
// sTools := false ;
20661: LD_ADDR_EXP 126
20665: PUSH
20666: LD_INT 0
20668: ST_TO_ADDR
// sSold := false ;
20669: LD_ADDR_EXP 91
20673: PUSH
20674: LD_INT 0
20676: ST_TO_ADDR
// sDiff := false ;
20677: LD_ADDR_EXP 92
20681: PUSH
20682: LD_INT 0
20684: ST_TO_ADDR
// sFog := false ;
20685: LD_ADDR_EXP 95
20689: PUSH
20690: LD_INT 0
20692: ST_TO_ADDR
// sReset := false ;
20693: LD_ADDR_EXP 96
20697: PUSH
20698: LD_INT 0
20700: ST_TO_ADDR
// sSun := false ;
20701: LD_ADDR_EXP 97
20705: PUSH
20706: LD_INT 0
20708: ST_TO_ADDR
// sTiger := false ;
20709: LD_ADDR_EXP 93
20713: PUSH
20714: LD_INT 0
20716: ST_TO_ADDR
// sBomb := false ;
20717: LD_ADDR_EXP 94
20721: PUSH
20722: LD_INT 0
20724: ST_TO_ADDR
// sWound := false ;
20725: LD_ADDR_EXP 102
20729: PUSH
20730: LD_INT 0
20732: ST_TO_ADDR
// sBetray := false ;
20733: LD_ADDR_EXP 106
20737: PUSH
20738: LD_INT 0
20740: ST_TO_ADDR
// sContamin := false ;
20741: LD_ADDR_EXP 107
20745: PUSH
20746: LD_INT 0
20748: ST_TO_ADDR
// sOil := false ;
20749: LD_ADDR_EXP 109
20753: PUSH
20754: LD_INT 0
20756: ST_TO_ADDR
// sStu := false ;
20757: LD_ADDR_EXP 113
20761: PUSH
20762: LD_INT 0
20764: ST_TO_ADDR
// sBazooka := false ;
20765: LD_ADDR_EXP 116
20769: PUSH
20770: LD_INT 0
20772: ST_TO_ADDR
// sMortar := false ;
20773: LD_ADDR_EXP 117
20777: PUSH
20778: LD_INT 0
20780: ST_TO_ADDR
// sRanger := false ;
20781: LD_ADDR_EXP 127
20785: PUSH
20786: LD_INT 0
20788: ST_TO_ADDR
// sComputer := false ;
20789: LD_ADDR_EXP 128
20793: PUSH
20794: LD_INT 0
20796: ST_TO_ADDR
// s30 := false ;
20797: LD_ADDR_EXP 129
20801: PUSH
20802: LD_INT 0
20804: ST_TO_ADDR
// s60 := false ;
20805: LD_ADDR_EXP 130
20809: PUSH
20810: LD_INT 0
20812: ST_TO_ADDR
// end ;
20813: LD_VAR 0 1
20817: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20818: LD_INT 0
20820: PPUSH
20821: PPUSH
20822: PPUSH
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
// result := [ ] ;
20827: LD_ADDR_VAR 0 2
20831: PUSH
20832: EMPTY
20833: ST_TO_ADDR
// if campaign_id = 1 then
20834: LD_OWVAR 69
20838: PUSH
20839: LD_INT 1
20841: EQUAL
20842: IFFALSE 24008
// begin case mission_number of 1 :
20844: LD_OWVAR 70
20848: PUSH
20849: LD_INT 1
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20933
20857: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20858: LD_ADDR_VAR 0 2
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: LD_INT 4
20868: PUSH
20869: LD_INT 11
20871: PUSH
20872: LD_INT 12
20874: PUSH
20875: LD_INT 15
20877: PUSH
20878: LD_INT 16
20880: PUSH
20881: LD_INT 22
20883: PUSH
20884: LD_INT 23
20886: PUSH
20887: LD_INT 26
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 101
20903: PUSH
20904: LD_INT 102
20906: PUSH
20907: LD_INT 106
20909: PUSH
20910: LD_INT 116
20912: PUSH
20913: LD_INT 117
20915: PUSH
20916: LD_INT 118
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: ST_TO_ADDR
20931: GO 24006
20933: LD_INT 2
20935: DOUBLE
20936: EQUAL
20937: IFTRUE 20941
20939: GO 21025
20941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20942: LD_ADDR_VAR 0 2
20946: PUSH
20947: LD_INT 2
20949: PUSH
20950: LD_INT 4
20952: PUSH
20953: LD_INT 11
20955: PUSH
20956: LD_INT 12
20958: PUSH
20959: LD_INT 15
20961: PUSH
20962: LD_INT 16
20964: PUSH
20965: LD_INT 22
20967: PUSH
20968: LD_INT 23
20970: PUSH
20971: LD_INT 26
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 101
20987: PUSH
20988: LD_INT 102
20990: PUSH
20991: LD_INT 105
20993: PUSH
20994: LD_INT 106
20996: PUSH
20997: LD_INT 108
20999: PUSH
21000: LD_INT 116
21002: PUSH
21003: LD_INT 117
21005: PUSH
21006: LD_INT 118
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: ST_TO_ADDR
21023: GO 24006
21025: LD_INT 3
21027: DOUBLE
21028: EQUAL
21029: IFTRUE 21033
21031: GO 21121
21033: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21034: LD_ADDR_VAR 0 2
21038: PUSH
21039: LD_INT 2
21041: PUSH
21042: LD_INT 4
21044: PUSH
21045: LD_INT 5
21047: PUSH
21048: LD_INT 11
21050: PUSH
21051: LD_INT 12
21053: PUSH
21054: LD_INT 15
21056: PUSH
21057: LD_INT 16
21059: PUSH
21060: LD_INT 22
21062: PUSH
21063: LD_INT 26
21065: PUSH
21066: LD_INT 36
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 101
21083: PUSH
21084: LD_INT 102
21086: PUSH
21087: LD_INT 105
21089: PUSH
21090: LD_INT 106
21092: PUSH
21093: LD_INT 108
21095: PUSH
21096: LD_INT 116
21098: PUSH
21099: LD_INT 117
21101: PUSH
21102: LD_INT 118
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: ST_TO_ADDR
21119: GO 24006
21121: LD_INT 4
21123: DOUBLE
21124: EQUAL
21125: IFTRUE 21129
21127: GO 21225
21129: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: LD_INT 4
21140: PUSH
21141: LD_INT 5
21143: PUSH
21144: LD_INT 8
21146: PUSH
21147: LD_INT 11
21149: PUSH
21150: LD_INT 12
21152: PUSH
21153: LD_INT 15
21155: PUSH
21156: LD_INT 16
21158: PUSH
21159: LD_INT 22
21161: PUSH
21162: LD_INT 23
21164: PUSH
21165: LD_INT 26
21167: PUSH
21168: LD_INT 36
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 101
21187: PUSH
21188: LD_INT 102
21190: PUSH
21191: LD_INT 105
21193: PUSH
21194: LD_INT 106
21196: PUSH
21197: LD_INT 108
21199: PUSH
21200: LD_INT 116
21202: PUSH
21203: LD_INT 117
21205: PUSH
21206: LD_INT 118
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: ST_TO_ADDR
21223: GO 24006
21225: LD_INT 5
21227: DOUBLE
21228: EQUAL
21229: IFTRUE 21233
21231: GO 21345
21233: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21234: LD_ADDR_VAR 0 2
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 4
21244: PUSH
21245: LD_INT 5
21247: PUSH
21248: LD_INT 6
21250: PUSH
21251: LD_INT 8
21253: PUSH
21254: LD_INT 11
21256: PUSH
21257: LD_INT 12
21259: PUSH
21260: LD_INT 15
21262: PUSH
21263: LD_INT 16
21265: PUSH
21266: LD_INT 22
21268: PUSH
21269: LD_INT 23
21271: PUSH
21272: LD_INT 25
21274: PUSH
21275: LD_INT 26
21277: PUSH
21278: LD_INT 36
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 101
21299: PUSH
21300: LD_INT 102
21302: PUSH
21303: LD_INT 105
21305: PUSH
21306: LD_INT 106
21308: PUSH
21309: LD_INT 108
21311: PUSH
21312: LD_INT 109
21314: PUSH
21315: LD_INT 112
21317: PUSH
21318: LD_INT 116
21320: PUSH
21321: LD_INT 117
21323: PUSH
21324: LD_INT 118
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: ST_TO_ADDR
21343: GO 24006
21345: LD_INT 6
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21485
21353: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21354: LD_ADDR_VAR 0 2
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: LD_INT 4
21364: PUSH
21365: LD_INT 5
21367: PUSH
21368: LD_INT 6
21370: PUSH
21371: LD_INT 8
21373: PUSH
21374: LD_INT 11
21376: PUSH
21377: LD_INT 12
21379: PUSH
21380: LD_INT 15
21382: PUSH
21383: LD_INT 16
21385: PUSH
21386: LD_INT 20
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 22
21394: PUSH
21395: LD_INT 23
21397: PUSH
21398: LD_INT 25
21400: PUSH
21401: LD_INT 26
21403: PUSH
21404: LD_INT 30
21406: PUSH
21407: LD_INT 31
21409: PUSH
21410: LD_INT 32
21412: PUSH
21413: LD_INT 36
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 101
21439: PUSH
21440: LD_INT 102
21442: PUSH
21443: LD_INT 105
21445: PUSH
21446: LD_INT 106
21448: PUSH
21449: LD_INT 108
21451: PUSH
21452: LD_INT 109
21454: PUSH
21455: LD_INT 112
21457: PUSH
21458: LD_INT 116
21460: PUSH
21461: LD_INT 117
21463: PUSH
21464: LD_INT 118
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: ST_TO_ADDR
21483: GO 24006
21485: LD_INT 7
21487: DOUBLE
21488: EQUAL
21489: IFTRUE 21493
21491: GO 21605
21493: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21494: LD_ADDR_VAR 0 2
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: LD_INT 4
21504: PUSH
21505: LD_INT 5
21507: PUSH
21508: LD_INT 7
21510: PUSH
21511: LD_INT 11
21513: PUSH
21514: LD_INT 12
21516: PUSH
21517: LD_INT 15
21519: PUSH
21520: LD_INT 16
21522: PUSH
21523: LD_INT 20
21525: PUSH
21526: LD_INT 21
21528: PUSH
21529: LD_INT 22
21531: PUSH
21532: LD_INT 23
21534: PUSH
21535: LD_INT 25
21537: PUSH
21538: LD_INT 26
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 101
21559: PUSH
21560: LD_INT 102
21562: PUSH
21563: LD_INT 103
21565: PUSH
21566: LD_INT 105
21568: PUSH
21569: LD_INT 106
21571: PUSH
21572: LD_INT 108
21574: PUSH
21575: LD_INT 112
21577: PUSH
21578: LD_INT 116
21580: PUSH
21581: LD_INT 117
21583: PUSH
21584: LD_INT 118
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: ST_TO_ADDR
21603: GO 24006
21605: LD_INT 8
21607: DOUBLE
21608: EQUAL
21609: IFTRUE 21613
21611: GO 21753
21613: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: LD_INT 4
21624: PUSH
21625: LD_INT 5
21627: PUSH
21628: LD_INT 6
21630: PUSH
21631: LD_INT 7
21633: PUSH
21634: LD_INT 8
21636: PUSH
21637: LD_INT 11
21639: PUSH
21640: LD_INT 12
21642: PUSH
21643: LD_INT 15
21645: PUSH
21646: LD_INT 16
21648: PUSH
21649: LD_INT 20
21651: PUSH
21652: LD_INT 21
21654: PUSH
21655: LD_INT 22
21657: PUSH
21658: LD_INT 23
21660: PUSH
21661: LD_INT 25
21663: PUSH
21664: LD_INT 26
21666: PUSH
21667: LD_INT 30
21669: PUSH
21670: LD_INT 31
21672: PUSH
21673: LD_INT 32
21675: PUSH
21676: LD_INT 36
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 101
21703: PUSH
21704: LD_INT 102
21706: PUSH
21707: LD_INT 103
21709: PUSH
21710: LD_INT 105
21712: PUSH
21713: LD_INT 106
21715: PUSH
21716: LD_INT 108
21718: PUSH
21719: LD_INT 109
21721: PUSH
21722: LD_INT 112
21724: PUSH
21725: LD_INT 116
21727: PUSH
21728: LD_INT 117
21730: PUSH
21731: LD_INT 118
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: ST_TO_ADDR
21751: GO 24006
21753: LD_INT 9
21755: DOUBLE
21756: EQUAL
21757: IFTRUE 21761
21759: GO 21909
21761: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21762: LD_ADDR_VAR 0 2
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 4
21772: PUSH
21773: LD_INT 5
21775: PUSH
21776: LD_INT 6
21778: PUSH
21779: LD_INT 7
21781: PUSH
21782: LD_INT 8
21784: PUSH
21785: LD_INT 11
21787: PUSH
21788: LD_INT 12
21790: PUSH
21791: LD_INT 15
21793: PUSH
21794: LD_INT 16
21796: PUSH
21797: LD_INT 20
21799: PUSH
21800: LD_INT 21
21802: PUSH
21803: LD_INT 22
21805: PUSH
21806: LD_INT 23
21808: PUSH
21809: LD_INT 25
21811: PUSH
21812: LD_INT 26
21814: PUSH
21815: LD_INT 28
21817: PUSH
21818: LD_INT 30
21820: PUSH
21821: LD_INT 31
21823: PUSH
21824: LD_INT 32
21826: PUSH
21827: LD_INT 36
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 101
21855: PUSH
21856: LD_INT 102
21858: PUSH
21859: LD_INT 103
21861: PUSH
21862: LD_INT 105
21864: PUSH
21865: LD_INT 106
21867: PUSH
21868: LD_INT 108
21870: PUSH
21871: LD_INT 109
21873: PUSH
21874: LD_INT 112
21876: PUSH
21877: LD_INT 114
21879: PUSH
21880: LD_INT 116
21882: PUSH
21883: LD_INT 117
21885: PUSH
21886: LD_INT 118
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: ST_TO_ADDR
21907: GO 24006
21909: LD_INT 10
21911: DOUBLE
21912: EQUAL
21913: IFTRUE 21917
21915: GO 22113
21917: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21918: LD_ADDR_VAR 0 2
21922: PUSH
21923: LD_INT 2
21925: PUSH
21926: LD_INT 4
21928: PUSH
21929: LD_INT 5
21931: PUSH
21932: LD_INT 6
21934: PUSH
21935: LD_INT 7
21937: PUSH
21938: LD_INT 8
21940: PUSH
21941: LD_INT 9
21943: PUSH
21944: LD_INT 10
21946: PUSH
21947: LD_INT 11
21949: PUSH
21950: LD_INT 12
21952: PUSH
21953: LD_INT 13
21955: PUSH
21956: LD_INT 14
21958: PUSH
21959: LD_INT 15
21961: PUSH
21962: LD_INT 16
21964: PUSH
21965: LD_INT 17
21967: PUSH
21968: LD_INT 18
21970: PUSH
21971: LD_INT 19
21973: PUSH
21974: LD_INT 20
21976: PUSH
21977: LD_INT 21
21979: PUSH
21980: LD_INT 22
21982: PUSH
21983: LD_INT 23
21985: PUSH
21986: LD_INT 24
21988: PUSH
21989: LD_INT 25
21991: PUSH
21992: LD_INT 26
21994: PUSH
21995: LD_INT 28
21997: PUSH
21998: LD_INT 30
22000: PUSH
22001: LD_INT 31
22003: PUSH
22004: LD_INT 32
22006: PUSH
22007: LD_INT 36
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 101
22043: PUSH
22044: LD_INT 102
22046: PUSH
22047: LD_INT 103
22049: PUSH
22050: LD_INT 104
22052: PUSH
22053: LD_INT 105
22055: PUSH
22056: LD_INT 106
22058: PUSH
22059: LD_INT 107
22061: PUSH
22062: LD_INT 108
22064: PUSH
22065: LD_INT 109
22067: PUSH
22068: LD_INT 110
22070: PUSH
22071: LD_INT 111
22073: PUSH
22074: LD_INT 112
22076: PUSH
22077: LD_INT 114
22079: PUSH
22080: LD_INT 116
22082: PUSH
22083: LD_INT 117
22085: PUSH
22086: LD_INT 118
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: ST_TO_ADDR
22111: GO 24006
22113: LD_INT 11
22115: DOUBLE
22116: EQUAL
22117: IFTRUE 22121
22119: GO 22325
22121: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22122: LD_ADDR_VAR 0 2
22126: PUSH
22127: LD_INT 2
22129: PUSH
22130: LD_INT 3
22132: PUSH
22133: LD_INT 4
22135: PUSH
22136: LD_INT 5
22138: PUSH
22139: LD_INT 6
22141: PUSH
22142: LD_INT 7
22144: PUSH
22145: LD_INT 8
22147: PUSH
22148: LD_INT 9
22150: PUSH
22151: LD_INT 10
22153: PUSH
22154: LD_INT 11
22156: PUSH
22157: LD_INT 12
22159: PUSH
22160: LD_INT 13
22162: PUSH
22163: LD_INT 14
22165: PUSH
22166: LD_INT 15
22168: PUSH
22169: LD_INT 16
22171: PUSH
22172: LD_INT 17
22174: PUSH
22175: LD_INT 18
22177: PUSH
22178: LD_INT 19
22180: PUSH
22181: LD_INT 20
22183: PUSH
22184: LD_INT 21
22186: PUSH
22187: LD_INT 22
22189: PUSH
22190: LD_INT 23
22192: PUSH
22193: LD_INT 24
22195: PUSH
22196: LD_INT 25
22198: PUSH
22199: LD_INT 26
22201: PUSH
22202: LD_INT 28
22204: PUSH
22205: LD_INT 30
22207: PUSH
22208: LD_INT 31
22210: PUSH
22211: LD_INT 32
22213: PUSH
22214: LD_INT 34
22216: PUSH
22217: LD_INT 36
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 101
22255: PUSH
22256: LD_INT 102
22258: PUSH
22259: LD_INT 103
22261: PUSH
22262: LD_INT 104
22264: PUSH
22265: LD_INT 105
22267: PUSH
22268: LD_INT 106
22270: PUSH
22271: LD_INT 107
22273: PUSH
22274: LD_INT 108
22276: PUSH
22277: LD_INT 109
22279: PUSH
22280: LD_INT 110
22282: PUSH
22283: LD_INT 111
22285: PUSH
22286: LD_INT 112
22288: PUSH
22289: LD_INT 114
22291: PUSH
22292: LD_INT 116
22294: PUSH
22295: LD_INT 117
22297: PUSH
22298: LD_INT 118
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: ST_TO_ADDR
22323: GO 24006
22325: LD_INT 12
22327: DOUBLE
22328: EQUAL
22329: IFTRUE 22333
22331: GO 22553
22333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22334: LD_ADDR_VAR 0 2
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: LD_INT 3
22347: PUSH
22348: LD_INT 4
22350: PUSH
22351: LD_INT 5
22353: PUSH
22354: LD_INT 6
22356: PUSH
22357: LD_INT 7
22359: PUSH
22360: LD_INT 8
22362: PUSH
22363: LD_INT 9
22365: PUSH
22366: LD_INT 10
22368: PUSH
22369: LD_INT 11
22371: PUSH
22372: LD_INT 12
22374: PUSH
22375: LD_INT 13
22377: PUSH
22378: LD_INT 14
22380: PUSH
22381: LD_INT 15
22383: PUSH
22384: LD_INT 16
22386: PUSH
22387: LD_INT 17
22389: PUSH
22390: LD_INT 18
22392: PUSH
22393: LD_INT 19
22395: PUSH
22396: LD_INT 20
22398: PUSH
22399: LD_INT 21
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_INT 23
22407: PUSH
22408: LD_INT 24
22410: PUSH
22411: LD_INT 25
22413: PUSH
22414: LD_INT 26
22416: PUSH
22417: LD_INT 27
22419: PUSH
22420: LD_INT 28
22422: PUSH
22423: LD_INT 30
22425: PUSH
22426: LD_INT 31
22428: PUSH
22429: LD_INT 32
22431: PUSH
22432: LD_INT 33
22434: PUSH
22435: LD_INT 34
22437: PUSH
22438: LD_INT 36
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 101
22479: PUSH
22480: LD_INT 102
22482: PUSH
22483: LD_INT 103
22485: PUSH
22486: LD_INT 104
22488: PUSH
22489: LD_INT 105
22491: PUSH
22492: LD_INT 106
22494: PUSH
22495: LD_INT 107
22497: PUSH
22498: LD_INT 108
22500: PUSH
22501: LD_INT 109
22503: PUSH
22504: LD_INT 110
22506: PUSH
22507: LD_INT 111
22509: PUSH
22510: LD_INT 112
22512: PUSH
22513: LD_INT 113
22515: PUSH
22516: LD_INT 114
22518: PUSH
22519: LD_INT 116
22521: PUSH
22522: LD_INT 117
22524: PUSH
22525: LD_INT 118
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: ST_TO_ADDR
22551: GO 24006
22553: LD_INT 13
22555: DOUBLE
22556: EQUAL
22557: IFTRUE 22561
22559: GO 22769
22561: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22562: LD_ADDR_VAR 0 2
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: LD_INT 3
22575: PUSH
22576: LD_INT 4
22578: PUSH
22579: LD_INT 5
22581: PUSH
22582: LD_INT 8
22584: PUSH
22585: LD_INT 9
22587: PUSH
22588: LD_INT 10
22590: PUSH
22591: LD_INT 11
22593: PUSH
22594: LD_INT 12
22596: PUSH
22597: LD_INT 14
22599: PUSH
22600: LD_INT 15
22602: PUSH
22603: LD_INT 16
22605: PUSH
22606: LD_INT 17
22608: PUSH
22609: LD_INT 18
22611: PUSH
22612: LD_INT 19
22614: PUSH
22615: LD_INT 20
22617: PUSH
22618: LD_INT 21
22620: PUSH
22621: LD_INT 22
22623: PUSH
22624: LD_INT 23
22626: PUSH
22627: LD_INT 24
22629: PUSH
22630: LD_INT 25
22632: PUSH
22633: LD_INT 26
22635: PUSH
22636: LD_INT 27
22638: PUSH
22639: LD_INT 28
22641: PUSH
22642: LD_INT 30
22644: PUSH
22645: LD_INT 31
22647: PUSH
22648: LD_INT 32
22650: PUSH
22651: LD_INT 33
22653: PUSH
22654: LD_INT 34
22656: PUSH
22657: LD_INT 36
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 101
22695: PUSH
22696: LD_INT 102
22698: PUSH
22699: LD_INT 103
22701: PUSH
22702: LD_INT 104
22704: PUSH
22705: LD_INT 105
22707: PUSH
22708: LD_INT 106
22710: PUSH
22711: LD_INT 107
22713: PUSH
22714: LD_INT 108
22716: PUSH
22717: LD_INT 109
22719: PUSH
22720: LD_INT 110
22722: PUSH
22723: LD_INT 111
22725: PUSH
22726: LD_INT 112
22728: PUSH
22729: LD_INT 113
22731: PUSH
22732: LD_INT 114
22734: PUSH
22735: LD_INT 116
22737: PUSH
22738: LD_INT 117
22740: PUSH
22741: LD_INT 118
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: ST_TO_ADDR
22767: GO 24006
22769: LD_INT 14
22771: DOUBLE
22772: EQUAL
22773: IFTRUE 22777
22775: GO 23001
22777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22778: LD_ADDR_VAR 0 2
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 3
22791: PUSH
22792: LD_INT 4
22794: PUSH
22795: LD_INT 5
22797: PUSH
22798: LD_INT 6
22800: PUSH
22801: LD_INT 7
22803: PUSH
22804: LD_INT 8
22806: PUSH
22807: LD_INT 9
22809: PUSH
22810: LD_INT 10
22812: PUSH
22813: LD_INT 11
22815: PUSH
22816: LD_INT 12
22818: PUSH
22819: LD_INT 13
22821: PUSH
22822: LD_INT 14
22824: PUSH
22825: LD_INT 15
22827: PUSH
22828: LD_INT 16
22830: PUSH
22831: LD_INT 17
22833: PUSH
22834: LD_INT 18
22836: PUSH
22837: LD_INT 19
22839: PUSH
22840: LD_INT 20
22842: PUSH
22843: LD_INT 21
22845: PUSH
22846: LD_INT 22
22848: PUSH
22849: LD_INT 23
22851: PUSH
22852: LD_INT 24
22854: PUSH
22855: LD_INT 25
22857: PUSH
22858: LD_INT 26
22860: PUSH
22861: LD_INT 27
22863: PUSH
22864: LD_INT 28
22866: PUSH
22867: LD_INT 29
22869: PUSH
22870: LD_INT 30
22872: PUSH
22873: LD_INT 31
22875: PUSH
22876: LD_INT 32
22878: PUSH
22879: LD_INT 33
22881: PUSH
22882: LD_INT 34
22884: PUSH
22885: LD_INT 36
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 101
22927: PUSH
22928: LD_INT 102
22930: PUSH
22931: LD_INT 103
22933: PUSH
22934: LD_INT 104
22936: PUSH
22937: LD_INT 105
22939: PUSH
22940: LD_INT 106
22942: PUSH
22943: LD_INT 107
22945: PUSH
22946: LD_INT 108
22948: PUSH
22949: LD_INT 109
22951: PUSH
22952: LD_INT 110
22954: PUSH
22955: LD_INT 111
22957: PUSH
22958: LD_INT 112
22960: PUSH
22961: LD_INT 113
22963: PUSH
22964: LD_INT 114
22966: PUSH
22967: LD_INT 116
22969: PUSH
22970: LD_INT 117
22972: PUSH
22973: LD_INT 118
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: ST_TO_ADDR
22999: GO 24006
23001: LD_INT 15
23003: DOUBLE
23004: EQUAL
23005: IFTRUE 23009
23007: GO 23233
23009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23010: LD_ADDR_VAR 0 2
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: LD_INT 2
23020: PUSH
23021: LD_INT 3
23023: PUSH
23024: LD_INT 4
23026: PUSH
23027: LD_INT 5
23029: PUSH
23030: LD_INT 6
23032: PUSH
23033: LD_INT 7
23035: PUSH
23036: LD_INT 8
23038: PUSH
23039: LD_INT 9
23041: PUSH
23042: LD_INT 10
23044: PUSH
23045: LD_INT 11
23047: PUSH
23048: LD_INT 12
23050: PUSH
23051: LD_INT 13
23053: PUSH
23054: LD_INT 14
23056: PUSH
23057: LD_INT 15
23059: PUSH
23060: LD_INT 16
23062: PUSH
23063: LD_INT 17
23065: PUSH
23066: LD_INT 18
23068: PUSH
23069: LD_INT 19
23071: PUSH
23072: LD_INT 20
23074: PUSH
23075: LD_INT 21
23077: PUSH
23078: LD_INT 22
23080: PUSH
23081: LD_INT 23
23083: PUSH
23084: LD_INT 24
23086: PUSH
23087: LD_INT 25
23089: PUSH
23090: LD_INT 26
23092: PUSH
23093: LD_INT 27
23095: PUSH
23096: LD_INT 28
23098: PUSH
23099: LD_INT 29
23101: PUSH
23102: LD_INT 30
23104: PUSH
23105: LD_INT 31
23107: PUSH
23108: LD_INT 32
23110: PUSH
23111: LD_INT 33
23113: PUSH
23114: LD_INT 34
23116: PUSH
23117: LD_INT 36
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 101
23159: PUSH
23160: LD_INT 102
23162: PUSH
23163: LD_INT 103
23165: PUSH
23166: LD_INT 104
23168: PUSH
23169: LD_INT 105
23171: PUSH
23172: LD_INT 106
23174: PUSH
23175: LD_INT 107
23177: PUSH
23178: LD_INT 108
23180: PUSH
23181: LD_INT 109
23183: PUSH
23184: LD_INT 110
23186: PUSH
23187: LD_INT 111
23189: PUSH
23190: LD_INT 112
23192: PUSH
23193: LD_INT 113
23195: PUSH
23196: LD_INT 114
23198: PUSH
23199: LD_INT 116
23201: PUSH
23202: LD_INT 117
23204: PUSH
23205: LD_INT 118
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: ST_TO_ADDR
23231: GO 24006
23233: LD_INT 16
23235: DOUBLE
23236: EQUAL
23237: IFTRUE 23241
23239: GO 23377
23241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23242: LD_ADDR_VAR 0 2
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: LD_INT 4
23252: PUSH
23253: LD_INT 5
23255: PUSH
23256: LD_INT 7
23258: PUSH
23259: LD_INT 11
23261: PUSH
23262: LD_INT 12
23264: PUSH
23265: LD_INT 15
23267: PUSH
23268: LD_INT 16
23270: PUSH
23271: LD_INT 20
23273: PUSH
23274: LD_INT 21
23276: PUSH
23277: LD_INT 22
23279: PUSH
23280: LD_INT 23
23282: PUSH
23283: LD_INT 25
23285: PUSH
23286: LD_INT 26
23288: PUSH
23289: LD_INT 30
23291: PUSH
23292: LD_INT 31
23294: PUSH
23295: LD_INT 32
23297: PUSH
23298: LD_INT 33
23300: PUSH
23301: LD_INT 34
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 101
23327: PUSH
23328: LD_INT 102
23330: PUSH
23331: LD_INT 103
23333: PUSH
23334: LD_INT 106
23336: PUSH
23337: LD_INT 108
23339: PUSH
23340: LD_INT 112
23342: PUSH
23343: LD_INT 113
23345: PUSH
23346: LD_INT 114
23348: PUSH
23349: LD_INT 116
23351: PUSH
23352: LD_INT 117
23354: PUSH
23355: LD_INT 118
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: ST_TO_ADDR
23375: GO 24006
23377: LD_INT 17
23379: DOUBLE
23380: EQUAL
23381: IFTRUE 23385
23383: GO 23609
23385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23386: LD_ADDR_VAR 0 2
23390: PUSH
23391: LD_INT 1
23393: PUSH
23394: LD_INT 2
23396: PUSH
23397: LD_INT 3
23399: PUSH
23400: LD_INT 4
23402: PUSH
23403: LD_INT 5
23405: PUSH
23406: LD_INT 6
23408: PUSH
23409: LD_INT 7
23411: PUSH
23412: LD_INT 8
23414: PUSH
23415: LD_INT 9
23417: PUSH
23418: LD_INT 10
23420: PUSH
23421: LD_INT 11
23423: PUSH
23424: LD_INT 12
23426: PUSH
23427: LD_INT 13
23429: PUSH
23430: LD_INT 14
23432: PUSH
23433: LD_INT 15
23435: PUSH
23436: LD_INT 16
23438: PUSH
23439: LD_INT 17
23441: PUSH
23442: LD_INT 18
23444: PUSH
23445: LD_INT 19
23447: PUSH
23448: LD_INT 20
23450: PUSH
23451: LD_INT 21
23453: PUSH
23454: LD_INT 22
23456: PUSH
23457: LD_INT 23
23459: PUSH
23460: LD_INT 24
23462: PUSH
23463: LD_INT 25
23465: PUSH
23466: LD_INT 26
23468: PUSH
23469: LD_INT 27
23471: PUSH
23472: LD_INT 28
23474: PUSH
23475: LD_INT 29
23477: PUSH
23478: LD_INT 30
23480: PUSH
23481: LD_INT 31
23483: PUSH
23484: LD_INT 32
23486: PUSH
23487: LD_INT 33
23489: PUSH
23490: LD_INT 34
23492: PUSH
23493: LD_INT 36
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 101
23535: PUSH
23536: LD_INT 102
23538: PUSH
23539: LD_INT 103
23541: PUSH
23542: LD_INT 104
23544: PUSH
23545: LD_INT 105
23547: PUSH
23548: LD_INT 106
23550: PUSH
23551: LD_INT 107
23553: PUSH
23554: LD_INT 108
23556: PUSH
23557: LD_INT 109
23559: PUSH
23560: LD_INT 110
23562: PUSH
23563: LD_INT 111
23565: PUSH
23566: LD_INT 112
23568: PUSH
23569: LD_INT 113
23571: PUSH
23572: LD_INT 114
23574: PUSH
23575: LD_INT 116
23577: PUSH
23578: LD_INT 117
23580: PUSH
23581: LD_INT 118
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: ST_TO_ADDR
23607: GO 24006
23609: LD_INT 18
23611: DOUBLE
23612: EQUAL
23613: IFTRUE 23617
23615: GO 23765
23617: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23618: LD_ADDR_VAR 0 2
23622: PUSH
23623: LD_INT 2
23625: PUSH
23626: LD_INT 4
23628: PUSH
23629: LD_INT 5
23631: PUSH
23632: LD_INT 7
23634: PUSH
23635: LD_INT 11
23637: PUSH
23638: LD_INT 12
23640: PUSH
23641: LD_INT 15
23643: PUSH
23644: LD_INT 16
23646: PUSH
23647: LD_INT 20
23649: PUSH
23650: LD_INT 21
23652: PUSH
23653: LD_INT 22
23655: PUSH
23656: LD_INT 23
23658: PUSH
23659: LD_INT 25
23661: PUSH
23662: LD_INT 26
23664: PUSH
23665: LD_INT 30
23667: PUSH
23668: LD_INT 31
23670: PUSH
23671: LD_INT 32
23673: PUSH
23674: LD_INT 33
23676: PUSH
23677: LD_INT 34
23679: PUSH
23680: LD_INT 35
23682: PUSH
23683: LD_INT 36
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 101
23711: PUSH
23712: LD_INT 102
23714: PUSH
23715: LD_INT 103
23717: PUSH
23718: LD_INT 106
23720: PUSH
23721: LD_INT 108
23723: PUSH
23724: LD_INT 112
23726: PUSH
23727: LD_INT 113
23729: PUSH
23730: LD_INT 114
23732: PUSH
23733: LD_INT 115
23735: PUSH
23736: LD_INT 116
23738: PUSH
23739: LD_INT 117
23741: PUSH
23742: LD_INT 118
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: ST_TO_ADDR
23763: GO 24006
23765: LD_INT 19
23767: DOUBLE
23768: EQUAL
23769: IFTRUE 23773
23771: GO 24005
23773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23774: LD_ADDR_VAR 0 2
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: LD_INT 3
23787: PUSH
23788: LD_INT 4
23790: PUSH
23791: LD_INT 5
23793: PUSH
23794: LD_INT 6
23796: PUSH
23797: LD_INT 7
23799: PUSH
23800: LD_INT 8
23802: PUSH
23803: LD_INT 9
23805: PUSH
23806: LD_INT 10
23808: PUSH
23809: LD_INT 11
23811: PUSH
23812: LD_INT 12
23814: PUSH
23815: LD_INT 13
23817: PUSH
23818: LD_INT 14
23820: PUSH
23821: LD_INT 15
23823: PUSH
23824: LD_INT 16
23826: PUSH
23827: LD_INT 17
23829: PUSH
23830: LD_INT 18
23832: PUSH
23833: LD_INT 19
23835: PUSH
23836: LD_INT 20
23838: PUSH
23839: LD_INT 21
23841: PUSH
23842: LD_INT 22
23844: PUSH
23845: LD_INT 23
23847: PUSH
23848: LD_INT 24
23850: PUSH
23851: LD_INT 25
23853: PUSH
23854: LD_INT 26
23856: PUSH
23857: LD_INT 27
23859: PUSH
23860: LD_INT 28
23862: PUSH
23863: LD_INT 29
23865: PUSH
23866: LD_INT 30
23868: PUSH
23869: LD_INT 31
23871: PUSH
23872: LD_INT 32
23874: PUSH
23875: LD_INT 33
23877: PUSH
23878: LD_INT 34
23880: PUSH
23881: LD_INT 35
23883: PUSH
23884: LD_INT 36
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 101
23927: PUSH
23928: LD_INT 102
23930: PUSH
23931: LD_INT 103
23933: PUSH
23934: LD_INT 104
23936: PUSH
23937: LD_INT 105
23939: PUSH
23940: LD_INT 106
23942: PUSH
23943: LD_INT 107
23945: PUSH
23946: LD_INT 108
23948: PUSH
23949: LD_INT 109
23951: PUSH
23952: LD_INT 110
23954: PUSH
23955: LD_INT 111
23957: PUSH
23958: LD_INT 112
23960: PUSH
23961: LD_INT 113
23963: PUSH
23964: LD_INT 114
23966: PUSH
23967: LD_INT 115
23969: PUSH
23970: LD_INT 116
23972: PUSH
23973: LD_INT 117
23975: PUSH
23976: LD_INT 118
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: ST_TO_ADDR
24003: GO 24006
24005: POP
// end else
24006: GO 24237
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24008: LD_ADDR_VAR 0 2
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 3
24021: PUSH
24022: LD_INT 4
24024: PUSH
24025: LD_INT 5
24027: PUSH
24028: LD_INT 6
24030: PUSH
24031: LD_INT 7
24033: PUSH
24034: LD_INT 8
24036: PUSH
24037: LD_INT 9
24039: PUSH
24040: LD_INT 10
24042: PUSH
24043: LD_INT 11
24045: PUSH
24046: LD_INT 12
24048: PUSH
24049: LD_INT 13
24051: PUSH
24052: LD_INT 14
24054: PUSH
24055: LD_INT 15
24057: PUSH
24058: LD_INT 16
24060: PUSH
24061: LD_INT 17
24063: PUSH
24064: LD_INT 18
24066: PUSH
24067: LD_INT 19
24069: PUSH
24070: LD_INT 20
24072: PUSH
24073: LD_INT 21
24075: PUSH
24076: LD_INT 22
24078: PUSH
24079: LD_INT 23
24081: PUSH
24082: LD_INT 24
24084: PUSH
24085: LD_INT 25
24087: PUSH
24088: LD_INT 26
24090: PUSH
24091: LD_INT 27
24093: PUSH
24094: LD_INT 28
24096: PUSH
24097: LD_INT 29
24099: PUSH
24100: LD_INT 30
24102: PUSH
24103: LD_INT 31
24105: PUSH
24106: LD_INT 32
24108: PUSH
24109: LD_INT 33
24111: PUSH
24112: LD_INT 34
24114: PUSH
24115: LD_INT 35
24117: PUSH
24118: LD_INT 36
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 101
24161: PUSH
24162: LD_INT 102
24164: PUSH
24165: LD_INT 103
24167: PUSH
24168: LD_INT 104
24170: PUSH
24171: LD_INT 105
24173: PUSH
24174: LD_INT 106
24176: PUSH
24177: LD_INT 107
24179: PUSH
24180: LD_INT 108
24182: PUSH
24183: LD_INT 109
24185: PUSH
24186: LD_INT 110
24188: PUSH
24189: LD_INT 111
24191: PUSH
24192: LD_INT 112
24194: PUSH
24195: LD_INT 113
24197: PUSH
24198: LD_INT 114
24200: PUSH
24201: LD_INT 115
24203: PUSH
24204: LD_INT 116
24206: PUSH
24207: LD_INT 117
24209: PUSH
24210: LD_INT 118
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: ST_TO_ADDR
// if result then
24237: LD_VAR 0 2
24241: IFFALSE 25027
// begin normal :=  ;
24243: LD_ADDR_VAR 0 5
24247: PUSH
24248: LD_STRING 
24250: ST_TO_ADDR
// hardcore :=  ;
24251: LD_ADDR_VAR 0 6
24255: PUSH
24256: LD_STRING 
24258: ST_TO_ADDR
// active :=  ;
24259: LD_ADDR_VAR 0 7
24263: PUSH
24264: LD_STRING 
24266: ST_TO_ADDR
// for i = 1 to normalCounter do
24267: LD_ADDR_VAR 0 8
24271: PUSH
24272: DOUBLE
24273: LD_INT 1
24275: DEC
24276: ST_TO_ADDR
24277: LD_EXP 75
24281: PUSH
24282: FOR_TO
24283: IFFALSE 24384
// begin tmp := 0 ;
24285: LD_ADDR_VAR 0 3
24289: PUSH
24290: LD_STRING 0
24292: ST_TO_ADDR
// if result [ 1 ] then
24293: LD_VAR 0 2
24297: PUSH
24298: LD_INT 1
24300: ARRAY
24301: IFFALSE 24366
// if result [ 1 ] [ 1 ] = i then
24303: LD_VAR 0 2
24307: PUSH
24308: LD_INT 1
24310: ARRAY
24311: PUSH
24312: LD_INT 1
24314: ARRAY
24315: PUSH
24316: LD_VAR 0 8
24320: EQUAL
24321: IFFALSE 24366
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24323: LD_ADDR_VAR 0 2
24327: PUSH
24328: LD_VAR 0 2
24332: PPUSH
24333: LD_INT 1
24335: PPUSH
24336: LD_VAR 0 2
24340: PUSH
24341: LD_INT 1
24343: ARRAY
24344: PPUSH
24345: LD_INT 1
24347: PPUSH
24348: CALL_OW 3
24352: PPUSH
24353: CALL_OW 1
24357: ST_TO_ADDR
// tmp := 1 ;
24358: LD_ADDR_VAR 0 3
24362: PUSH
24363: LD_STRING 1
24365: ST_TO_ADDR
// end ; normal := normal & tmp ;
24366: LD_ADDR_VAR 0 5
24370: PUSH
24371: LD_VAR 0 5
24375: PUSH
24376: LD_VAR 0 3
24380: STR
24381: ST_TO_ADDR
// end ;
24382: GO 24282
24384: POP
24385: POP
// for i = 1 to hardcoreCounter do
24386: LD_ADDR_VAR 0 8
24390: PUSH
24391: DOUBLE
24392: LD_INT 1
24394: DEC
24395: ST_TO_ADDR
24396: LD_EXP 76
24400: PUSH
24401: FOR_TO
24402: IFFALSE 24507
// begin tmp := 0 ;
24404: LD_ADDR_VAR 0 3
24408: PUSH
24409: LD_STRING 0
24411: ST_TO_ADDR
// if result [ 2 ] then
24412: LD_VAR 0 2
24416: PUSH
24417: LD_INT 2
24419: ARRAY
24420: IFFALSE 24489
// if result [ 2 ] [ 1 ] = 100 + i then
24422: LD_VAR 0 2
24426: PUSH
24427: LD_INT 2
24429: ARRAY
24430: PUSH
24431: LD_INT 1
24433: ARRAY
24434: PUSH
24435: LD_INT 100
24437: PUSH
24438: LD_VAR 0 8
24442: PLUS
24443: EQUAL
24444: IFFALSE 24489
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24446: LD_ADDR_VAR 0 2
24450: PUSH
24451: LD_VAR 0 2
24455: PPUSH
24456: LD_INT 2
24458: PPUSH
24459: LD_VAR 0 2
24463: PUSH
24464: LD_INT 2
24466: ARRAY
24467: PPUSH
24468: LD_INT 1
24470: PPUSH
24471: CALL_OW 3
24475: PPUSH
24476: CALL_OW 1
24480: ST_TO_ADDR
// tmp := 1 ;
24481: LD_ADDR_VAR 0 3
24485: PUSH
24486: LD_STRING 1
24488: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24489: LD_ADDR_VAR 0 6
24493: PUSH
24494: LD_VAR 0 6
24498: PUSH
24499: LD_VAR 0 3
24503: STR
24504: ST_TO_ADDR
// end ;
24505: GO 24401
24507: POP
24508: POP
// if isGameLoad then
24509: LD_VAR 0 1
24513: IFFALSE 24988
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24515: LD_ADDR_VAR 0 4
24519: PUSH
24520: LD_EXP 79
24524: PUSH
24525: LD_EXP 78
24529: PUSH
24530: LD_EXP 80
24534: PUSH
24535: LD_EXP 77
24539: PUSH
24540: LD_EXP 81
24544: PUSH
24545: LD_EXP 82
24549: PUSH
24550: LD_EXP 83
24554: PUSH
24555: LD_EXP 84
24559: PUSH
24560: LD_EXP 85
24564: PUSH
24565: LD_EXP 86
24569: PUSH
24570: LD_EXP 87
24574: PUSH
24575: LD_EXP 88
24579: PUSH
24580: LD_EXP 89
24584: PUSH
24585: LD_EXP 90
24589: PUSH
24590: LD_EXP 98
24594: PUSH
24595: LD_EXP 99
24599: PUSH
24600: LD_EXP 100
24604: PUSH
24605: LD_EXP 101
24609: PUSH
24610: LD_EXP 103
24614: PUSH
24615: LD_EXP 104
24619: PUSH
24620: LD_EXP 105
24624: PUSH
24625: LD_EXP 108
24629: PUSH
24630: LD_EXP 110
24634: PUSH
24635: LD_EXP 111
24639: PUSH
24640: LD_EXP 112
24644: PUSH
24645: LD_EXP 114
24649: PUSH
24650: LD_EXP 115
24654: PUSH
24655: LD_EXP 118
24659: PUSH
24660: LD_EXP 119
24664: PUSH
24665: LD_EXP 120
24669: PUSH
24670: LD_EXP 121
24674: PUSH
24675: LD_EXP 122
24679: PUSH
24680: LD_EXP 123
24684: PUSH
24685: LD_EXP 124
24689: PUSH
24690: LD_EXP 125
24694: PUSH
24695: LD_EXP 126
24699: PUSH
24700: LD_EXP 91
24704: PUSH
24705: LD_EXP 92
24709: PUSH
24710: LD_EXP 95
24714: PUSH
24715: LD_EXP 96
24719: PUSH
24720: LD_EXP 97
24724: PUSH
24725: LD_EXP 93
24729: PUSH
24730: LD_EXP 94
24734: PUSH
24735: LD_EXP 102
24739: PUSH
24740: LD_EXP 106
24744: PUSH
24745: LD_EXP 107
24749: PUSH
24750: LD_EXP 109
24754: PUSH
24755: LD_EXP 113
24759: PUSH
24760: LD_EXP 116
24764: PUSH
24765: LD_EXP 117
24769: PUSH
24770: LD_EXP 127
24774: PUSH
24775: LD_EXP 128
24779: PUSH
24780: LD_EXP 129
24784: PUSH
24785: LD_EXP 130
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: ST_TO_ADDR
// tmp :=  ;
24846: LD_ADDR_VAR 0 3
24850: PUSH
24851: LD_STRING 
24853: ST_TO_ADDR
// for i = 1 to normalCounter do
24854: LD_ADDR_VAR 0 8
24858: PUSH
24859: DOUBLE
24860: LD_INT 1
24862: DEC
24863: ST_TO_ADDR
24864: LD_EXP 75
24868: PUSH
24869: FOR_TO
24870: IFFALSE 24906
// begin if flags [ i ] then
24872: LD_VAR 0 4
24876: PUSH
24877: LD_VAR 0 8
24881: ARRAY
24882: IFFALSE 24904
// tmp := tmp & i & ; ;
24884: LD_ADDR_VAR 0 3
24888: PUSH
24889: LD_VAR 0 3
24893: PUSH
24894: LD_VAR 0 8
24898: STR
24899: PUSH
24900: LD_STRING ;
24902: STR
24903: ST_TO_ADDR
// end ;
24904: GO 24869
24906: POP
24907: POP
// for i = 1 to hardcoreCounter do
24908: LD_ADDR_VAR 0 8
24912: PUSH
24913: DOUBLE
24914: LD_INT 1
24916: DEC
24917: ST_TO_ADDR
24918: LD_EXP 76
24922: PUSH
24923: FOR_TO
24924: IFFALSE 24970
// begin if flags [ normalCounter + i ] then
24926: LD_VAR 0 4
24930: PUSH
24931: LD_EXP 75
24935: PUSH
24936: LD_VAR 0 8
24940: PLUS
24941: ARRAY
24942: IFFALSE 24968
// tmp := tmp & ( 100 + i ) & ; ;
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: LD_VAR 0 3
24953: PUSH
24954: LD_INT 100
24956: PUSH
24957: LD_VAR 0 8
24961: PLUS
24962: STR
24963: PUSH
24964: LD_STRING ;
24966: STR
24967: ST_TO_ADDR
// end ;
24968: GO 24923
24970: POP
24971: POP
// if tmp then
24972: LD_VAR 0 3
24976: IFFALSE 24988
// active := tmp ;
24978: LD_ADDR_VAR 0 7
24982: PUSH
24983: LD_VAR 0 3
24987: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24988: LD_STRING getStreamItemsFromMission("
24990: PUSH
24991: LD_VAR 0 5
24995: STR
24996: PUSH
24997: LD_STRING ","
24999: STR
25000: PUSH
25001: LD_VAR 0 6
25005: STR
25006: PUSH
25007: LD_STRING ","
25009: STR
25010: PUSH
25011: LD_VAR 0 7
25015: STR
25016: PUSH
25017: LD_STRING ")
25019: STR
25020: PPUSH
25021: CALL_OW 559
// end else
25025: GO 25034
// ToLua ( getStreamItemsFromMission("","","") ) ;
25027: LD_STRING getStreamItemsFromMission("","","")
25029: PPUSH
25030: CALL_OW 559
// end ;
25034: LD_VAR 0 2
25038: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25039: LD_EXP 74
25043: PUSH
25044: LD_EXP 79
25048: AND
25049: IFFALSE 25173
25051: GO 25053
25053: DISABLE
25054: LD_INT 0
25056: PPUSH
25057: PPUSH
// begin enable ;
25058: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25059: LD_ADDR_VAR 0 2
25063: PUSH
25064: LD_INT 22
25066: PUSH
25067: LD_OWVAR 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 2
25078: PUSH
25079: LD_INT 34
25081: PUSH
25082: LD_INT 7
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 34
25091: PUSH
25092: LD_INT 45
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 34
25101: PUSH
25102: LD_INT 28
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 34
25111: PUSH
25112: LD_INT 47
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PPUSH
25130: CALL_OW 69
25134: ST_TO_ADDR
// if not tmp then
25135: LD_VAR 0 2
25139: NOT
25140: IFFALSE 25144
// exit ;
25142: GO 25173
// for i in tmp do
25144: LD_ADDR_VAR 0 1
25148: PUSH
25149: LD_VAR 0 2
25153: PUSH
25154: FOR_IN
25155: IFFALSE 25171
// begin SetLives ( i , 0 ) ;
25157: LD_VAR 0 1
25161: PPUSH
25162: LD_INT 0
25164: PPUSH
25165: CALL_OW 234
// end ;
25169: GO 25154
25171: POP
25172: POP
// end ;
25173: PPOPN 2
25175: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25176: LD_EXP 74
25180: PUSH
25181: LD_EXP 80
25185: AND
25186: IFFALSE 25270
25188: GO 25190
25190: DISABLE
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
// begin enable ;
25195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25196: LD_ADDR_VAR 0 2
25200: PUSH
25201: LD_INT 22
25203: PUSH
25204: LD_OWVAR 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 32
25215: PUSH
25216: LD_INT 3
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 69
25231: ST_TO_ADDR
// if not tmp then
25232: LD_VAR 0 2
25236: NOT
25237: IFFALSE 25241
// exit ;
25239: GO 25270
// for i in tmp do
25241: LD_ADDR_VAR 0 1
25245: PUSH
25246: LD_VAR 0 2
25250: PUSH
25251: FOR_IN
25252: IFFALSE 25268
// begin SetLives ( i , 0 ) ;
25254: LD_VAR 0 1
25258: PPUSH
25259: LD_INT 0
25261: PPUSH
25262: CALL_OW 234
// end ;
25266: GO 25251
25268: POP
25269: POP
// end ;
25270: PPOPN 2
25272: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25273: LD_EXP 74
25277: PUSH
25278: LD_EXP 77
25282: AND
25283: IFFALSE 25376
25285: GO 25287
25287: DISABLE
25288: LD_INT 0
25290: PPUSH
// begin enable ;
25291: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25292: LD_ADDR_VAR 0 1
25296: PUSH
25297: LD_INT 22
25299: PUSH
25300: LD_OWVAR 2
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: PUSH
25312: LD_INT 25
25314: PUSH
25315: LD_INT 5
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 25
25324: PUSH
25325: LD_INT 9
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 25
25334: PUSH
25335: LD_INT 8
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PPUSH
25352: CALL_OW 69
25356: PUSH
25357: FOR_IN
25358: IFFALSE 25374
// begin SetClass ( i , 1 ) ;
25360: LD_VAR 0 1
25364: PPUSH
25365: LD_INT 1
25367: PPUSH
25368: CALL_OW 336
// end ;
25372: GO 25357
25374: POP
25375: POP
// end ;
25376: PPOPN 1
25378: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25379: LD_EXP 74
25383: PUSH
25384: LD_EXP 78
25388: AND
25389: PUSH
25390: LD_OWVAR 65
25394: PUSH
25395: LD_INT 7
25397: LESS
25398: AND
25399: IFFALSE 25413
25401: GO 25403
25403: DISABLE
// begin enable ;
25404: ENABLE
// game_speed := 7 ;
25405: LD_ADDR_OWVAR 65
25409: PUSH
25410: LD_INT 7
25412: ST_TO_ADDR
// end ;
25413: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25414: LD_EXP 74
25418: PUSH
25419: LD_EXP 81
25423: AND
25424: IFFALSE 25626
25426: GO 25428
25428: DISABLE
25429: LD_INT 0
25431: PPUSH
25432: PPUSH
25433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25434: LD_ADDR_VAR 0 3
25438: PUSH
25439: LD_INT 81
25441: PUSH
25442: LD_OWVAR 2
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 21
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PPUSH
25465: CALL_OW 69
25469: ST_TO_ADDR
// if not tmp then
25470: LD_VAR 0 3
25474: NOT
25475: IFFALSE 25479
// exit ;
25477: GO 25626
// if tmp > 5 then
25479: LD_VAR 0 3
25483: PUSH
25484: LD_INT 5
25486: GREATER
25487: IFFALSE 25499
// k := 5 else
25489: LD_ADDR_VAR 0 2
25493: PUSH
25494: LD_INT 5
25496: ST_TO_ADDR
25497: GO 25509
// k := tmp ;
25499: LD_ADDR_VAR 0 2
25503: PUSH
25504: LD_VAR 0 3
25508: ST_TO_ADDR
// for i := 1 to k do
25509: LD_ADDR_VAR 0 1
25513: PUSH
25514: DOUBLE
25515: LD_INT 1
25517: DEC
25518: ST_TO_ADDR
25519: LD_VAR 0 2
25523: PUSH
25524: FOR_TO
25525: IFFALSE 25624
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25527: LD_VAR 0 3
25531: PUSH
25532: LD_VAR 0 1
25536: ARRAY
25537: PPUSH
25538: LD_VAR 0 1
25542: PUSH
25543: LD_INT 4
25545: MOD
25546: PUSH
25547: LD_INT 1
25549: PLUS
25550: PPUSH
25551: CALL_OW 259
25555: PUSH
25556: LD_INT 10
25558: LESS
25559: IFFALSE 25622
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25561: LD_VAR 0 3
25565: PUSH
25566: LD_VAR 0 1
25570: ARRAY
25571: PPUSH
25572: LD_VAR 0 1
25576: PUSH
25577: LD_INT 4
25579: MOD
25580: PUSH
25581: LD_INT 1
25583: PLUS
25584: PPUSH
25585: LD_VAR 0 3
25589: PUSH
25590: LD_VAR 0 1
25594: ARRAY
25595: PPUSH
25596: LD_VAR 0 1
25600: PUSH
25601: LD_INT 4
25603: MOD
25604: PUSH
25605: LD_INT 1
25607: PLUS
25608: PPUSH
25609: CALL_OW 259
25613: PUSH
25614: LD_INT 1
25616: PLUS
25617: PPUSH
25618: CALL_OW 237
25622: GO 25524
25624: POP
25625: POP
// end ;
25626: PPOPN 3
25628: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25629: LD_EXP 74
25633: PUSH
25634: LD_EXP 82
25638: AND
25639: IFFALSE 25659
25641: GO 25643
25643: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25644: LD_INT 4
25646: PPUSH
25647: LD_OWVAR 2
25651: PPUSH
25652: LD_INT 0
25654: PPUSH
25655: CALL_OW 324
25659: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25660: LD_EXP 74
25664: PUSH
25665: LD_EXP 111
25669: AND
25670: IFFALSE 25690
25672: GO 25674
25674: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25675: LD_INT 19
25677: PPUSH
25678: LD_OWVAR 2
25682: PPUSH
25683: LD_INT 0
25685: PPUSH
25686: CALL_OW 324
25690: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25691: LD_EXP 74
25695: PUSH
25696: LD_EXP 83
25700: AND
25701: IFFALSE 25803
25703: GO 25705
25705: DISABLE
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
// begin enable ;
25710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25711: LD_ADDR_VAR 0 2
25715: PUSH
25716: LD_INT 22
25718: PUSH
25719: LD_OWVAR 2
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 2
25730: PUSH
25731: LD_INT 34
25733: PUSH
25734: LD_INT 11
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 34
25743: PUSH
25744: LD_INT 30
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: LIST
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PPUSH
25760: CALL_OW 69
25764: ST_TO_ADDR
// if not tmp then
25765: LD_VAR 0 2
25769: NOT
25770: IFFALSE 25774
// exit ;
25772: GO 25803
// for i in tmp do
25774: LD_ADDR_VAR 0 1
25778: PUSH
25779: LD_VAR 0 2
25783: PUSH
25784: FOR_IN
25785: IFFALSE 25801
// begin SetLives ( i , 0 ) ;
25787: LD_VAR 0 1
25791: PPUSH
25792: LD_INT 0
25794: PPUSH
25795: CALL_OW 234
// end ;
25799: GO 25784
25801: POP
25802: POP
// end ;
25803: PPOPN 2
25805: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25806: LD_EXP 74
25810: PUSH
25811: LD_EXP 84
25815: AND
25816: IFFALSE 25836
25818: GO 25820
25820: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25821: LD_INT 32
25823: PPUSH
25824: LD_OWVAR 2
25828: PPUSH
25829: LD_INT 0
25831: PPUSH
25832: CALL_OW 324
25836: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25837: LD_EXP 74
25841: PUSH
25842: LD_EXP 85
25846: AND
25847: IFFALSE 26028
25849: GO 25851
25851: DISABLE
25852: LD_INT 0
25854: PPUSH
25855: PPUSH
25856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25857: LD_ADDR_VAR 0 2
25861: PUSH
25862: LD_INT 22
25864: PUSH
25865: LD_OWVAR 2
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 33
25876: PUSH
25877: LD_INT 3
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PPUSH
25888: CALL_OW 69
25892: ST_TO_ADDR
// if not tmp then
25893: LD_VAR 0 2
25897: NOT
25898: IFFALSE 25902
// exit ;
25900: GO 26028
// side := 0 ;
25902: LD_ADDR_VAR 0 3
25906: PUSH
25907: LD_INT 0
25909: ST_TO_ADDR
// for i := 1 to 8 do
25910: LD_ADDR_VAR 0 1
25914: PUSH
25915: DOUBLE
25916: LD_INT 1
25918: DEC
25919: ST_TO_ADDR
25920: LD_INT 8
25922: PUSH
25923: FOR_TO
25924: IFFALSE 25972
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25926: LD_OWVAR 2
25930: PUSH
25931: LD_VAR 0 1
25935: NONEQUAL
25936: PUSH
25937: LD_OWVAR 2
25941: PPUSH
25942: LD_VAR 0 1
25946: PPUSH
25947: CALL_OW 81
25951: PUSH
25952: LD_INT 2
25954: EQUAL
25955: AND
25956: IFFALSE 25970
// begin side := i ;
25958: LD_ADDR_VAR 0 3
25962: PUSH
25963: LD_VAR 0 1
25967: ST_TO_ADDR
// break ;
25968: GO 25972
// end ;
25970: GO 25923
25972: POP
25973: POP
// if not side then
25974: LD_VAR 0 3
25978: NOT
25979: IFFALSE 25983
// exit ;
25981: GO 26028
// for i := 1 to tmp do
25983: LD_ADDR_VAR 0 1
25987: PUSH
25988: DOUBLE
25989: LD_INT 1
25991: DEC
25992: ST_TO_ADDR
25993: LD_VAR 0 2
25997: PUSH
25998: FOR_TO
25999: IFFALSE 26026
// if Prob ( 60 ) then
26001: LD_INT 60
26003: PPUSH
26004: CALL_OW 13
26008: IFFALSE 26024
// SetSide ( i , side ) ;
26010: LD_VAR 0 1
26014: PPUSH
26015: LD_VAR 0 3
26019: PPUSH
26020: CALL_OW 235
26024: GO 25998
26026: POP
26027: POP
// end ;
26028: PPOPN 3
26030: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26031: LD_EXP 74
26035: PUSH
26036: LD_EXP 87
26040: AND
26041: IFFALSE 26160
26043: GO 26045
26045: DISABLE
26046: LD_INT 0
26048: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26049: LD_ADDR_VAR 0 1
26053: PUSH
26054: LD_INT 22
26056: PUSH
26057: LD_OWVAR 2
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 21
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 3
26078: PUSH
26079: LD_INT 23
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: PPUSH
26098: CALL_OW 69
26102: PUSH
26103: FOR_IN
26104: IFFALSE 26158
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26106: LD_VAR 0 1
26110: PPUSH
26111: CALL_OW 257
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: LD_INT 3
26124: PUSH
26125: LD_INT 4
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: IN
26134: IFFALSE 26156
// SetClass ( un , rand ( 1 , 4 ) ) ;
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_INT 1
26143: PPUSH
26144: LD_INT 4
26146: PPUSH
26147: CALL_OW 12
26151: PPUSH
26152: CALL_OW 336
26156: GO 26103
26158: POP
26159: POP
// end ;
26160: PPOPN 1
26162: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26163: LD_EXP 74
26167: PUSH
26168: LD_EXP 86
26172: AND
26173: IFFALSE 26252
26175: GO 26177
26177: DISABLE
26178: LD_INT 0
26180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26181: LD_ADDR_VAR 0 1
26185: PUSH
26186: LD_INT 22
26188: PUSH
26189: LD_OWVAR 2
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 21
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PPUSH
26212: CALL_OW 69
26216: ST_TO_ADDR
// if not tmp then
26217: LD_VAR 0 1
26221: NOT
26222: IFFALSE 26226
// exit ;
26224: GO 26252
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26226: LD_VAR 0 1
26230: PUSH
26231: LD_INT 1
26233: PPUSH
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 12
26243: ARRAY
26244: PPUSH
26245: LD_INT 100
26247: PPUSH
26248: CALL_OW 234
// end ;
26252: PPOPN 1
26254: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26255: LD_EXP 74
26259: PUSH
26260: LD_EXP 88
26264: AND
26265: IFFALSE 26363
26267: GO 26269
26269: DISABLE
26270: LD_INT 0
26272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26273: LD_ADDR_VAR 0 1
26277: PUSH
26278: LD_INT 22
26280: PUSH
26281: LD_OWVAR 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 21
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PPUSH
26304: CALL_OW 69
26308: ST_TO_ADDR
// if not tmp then
26309: LD_VAR 0 1
26313: NOT
26314: IFFALSE 26318
// exit ;
26316: GO 26363
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26318: LD_VAR 0 1
26322: PUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_VAR 0 1
26330: PPUSH
26331: CALL_OW 12
26335: ARRAY
26336: PPUSH
26337: LD_INT 1
26339: PPUSH
26340: LD_INT 4
26342: PPUSH
26343: CALL_OW 12
26347: PPUSH
26348: LD_INT 3000
26350: PPUSH
26351: LD_INT 9000
26353: PPUSH
26354: CALL_OW 12
26358: PPUSH
26359: CALL_OW 492
// end ;
26363: PPOPN 1
26365: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26366: LD_EXP 74
26370: PUSH
26371: LD_EXP 89
26375: AND
26376: IFFALSE 26396
26378: GO 26380
26380: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26381: LD_INT 1
26383: PPUSH
26384: LD_OWVAR 2
26388: PPUSH
26389: LD_INT 0
26391: PPUSH
26392: CALL_OW 324
26396: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26397: LD_EXP 74
26401: PUSH
26402: LD_EXP 90
26406: AND
26407: IFFALSE 26490
26409: GO 26411
26411: DISABLE
26412: LD_INT 0
26414: PPUSH
26415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26416: LD_ADDR_VAR 0 2
26420: PUSH
26421: LD_INT 22
26423: PUSH
26424: LD_OWVAR 2
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 21
26435: PUSH
26436: LD_INT 3
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PPUSH
26447: CALL_OW 69
26451: ST_TO_ADDR
// if not tmp then
26452: LD_VAR 0 2
26456: NOT
26457: IFFALSE 26461
// exit ;
26459: GO 26490
// for i in tmp do
26461: LD_ADDR_VAR 0 1
26465: PUSH
26466: LD_VAR 0 2
26470: PUSH
26471: FOR_IN
26472: IFFALSE 26488
// SetBLevel ( i , 10 ) ;
26474: LD_VAR 0 1
26478: PPUSH
26479: LD_INT 10
26481: PPUSH
26482: CALL_OW 241
26486: GO 26471
26488: POP
26489: POP
// end ;
26490: PPOPN 2
26492: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26493: LD_EXP 74
26497: PUSH
26498: LD_EXP 91
26502: AND
26503: IFFALSE 26614
26505: GO 26507
26507: DISABLE
26508: LD_INT 0
26510: PPUSH
26511: PPUSH
26512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26513: LD_ADDR_VAR 0 3
26517: PUSH
26518: LD_INT 22
26520: PUSH
26521: LD_OWVAR 2
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 25
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PPUSH
26544: CALL_OW 69
26548: ST_TO_ADDR
// if not tmp then
26549: LD_VAR 0 3
26553: NOT
26554: IFFALSE 26558
// exit ;
26556: GO 26614
// un := tmp [ rand ( 1 , tmp ) ] ;
26558: LD_ADDR_VAR 0 2
26562: PUSH
26563: LD_VAR 0 3
26567: PUSH
26568: LD_INT 1
26570: PPUSH
26571: LD_VAR 0 3
26575: PPUSH
26576: CALL_OW 12
26580: ARRAY
26581: ST_TO_ADDR
// if Crawls ( un ) then
26582: LD_VAR 0 2
26586: PPUSH
26587: CALL_OW 318
26591: IFFALSE 26602
// ComWalk ( un ) ;
26593: LD_VAR 0 2
26597: PPUSH
26598: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26602: LD_VAR 0 2
26606: PPUSH
26607: LD_INT 5
26609: PPUSH
26610: CALL_OW 336
// end ;
26614: PPOPN 3
26616: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26617: LD_EXP 74
26621: PUSH
26622: LD_EXP 92
26626: AND
26627: PUSH
26628: LD_OWVAR 67
26632: PUSH
26633: LD_INT 4
26635: LESS
26636: AND
26637: IFFALSE 26656
26639: GO 26641
26641: DISABLE
// begin Difficulty := Difficulty + 1 ;
26642: LD_ADDR_OWVAR 67
26646: PUSH
26647: LD_OWVAR 67
26651: PUSH
26652: LD_INT 1
26654: PLUS
26655: ST_TO_ADDR
// end ;
26656: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26657: LD_EXP 74
26661: PUSH
26662: LD_EXP 93
26666: AND
26667: IFFALSE 26770
26669: GO 26671
26671: DISABLE
26672: LD_INT 0
26674: PPUSH
// begin for i := 1 to 5 do
26675: LD_ADDR_VAR 0 1
26679: PUSH
26680: DOUBLE
26681: LD_INT 1
26683: DEC
26684: ST_TO_ADDR
26685: LD_INT 5
26687: PUSH
26688: FOR_TO
26689: IFFALSE 26768
// begin uc_nation := nation_nature ;
26691: LD_ADDR_OWVAR 21
26695: PUSH
26696: LD_INT 0
26698: ST_TO_ADDR
// uc_side := 0 ;
26699: LD_ADDR_OWVAR 20
26703: PUSH
26704: LD_INT 0
26706: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26707: LD_ADDR_OWVAR 29
26711: PUSH
26712: LD_INT 12
26714: PUSH
26715: LD_INT 12
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: ST_TO_ADDR
// hc_agressivity := 20 ;
26722: LD_ADDR_OWVAR 35
26726: PUSH
26727: LD_INT 20
26729: ST_TO_ADDR
// hc_class := class_tiger ;
26730: LD_ADDR_OWVAR 28
26734: PUSH
26735: LD_INT 14
26737: ST_TO_ADDR
// hc_gallery :=  ;
26738: LD_ADDR_OWVAR 33
26742: PUSH
26743: LD_STRING 
26745: ST_TO_ADDR
// hc_name :=  ;
26746: LD_ADDR_OWVAR 26
26750: PUSH
26751: LD_STRING 
26753: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26754: CALL_OW 44
26758: PPUSH
26759: LD_INT 0
26761: PPUSH
26762: CALL_OW 51
// end ;
26766: GO 26688
26768: POP
26769: POP
// end ;
26770: PPOPN 1
26772: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26773: LD_EXP 74
26777: PUSH
26778: LD_EXP 94
26782: AND
26783: IFFALSE 26792
26785: GO 26787
26787: DISABLE
// StreamSibBomb ;
26788: CALL 26793 0 0
26792: END
// export function StreamSibBomb ; var i , x , y ; begin
26793: LD_INT 0
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
// result := false ;
26799: LD_ADDR_VAR 0 1
26803: PUSH
26804: LD_INT 0
26806: ST_TO_ADDR
// for i := 1 to 16 do
26807: LD_ADDR_VAR 0 2
26811: PUSH
26812: DOUBLE
26813: LD_INT 1
26815: DEC
26816: ST_TO_ADDR
26817: LD_INT 16
26819: PUSH
26820: FOR_TO
26821: IFFALSE 27020
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26823: LD_ADDR_VAR 0 3
26827: PUSH
26828: LD_INT 10
26830: PUSH
26831: LD_INT 20
26833: PUSH
26834: LD_INT 30
26836: PUSH
26837: LD_INT 40
26839: PUSH
26840: LD_INT 50
26842: PUSH
26843: LD_INT 60
26845: PUSH
26846: LD_INT 70
26848: PUSH
26849: LD_INT 80
26851: PUSH
26852: LD_INT 90
26854: PUSH
26855: LD_INT 100
26857: PUSH
26858: LD_INT 110
26860: PUSH
26861: LD_INT 120
26863: PUSH
26864: LD_INT 130
26866: PUSH
26867: LD_INT 140
26869: PUSH
26870: LD_INT 150
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: PPUSH
26893: LD_INT 15
26895: PPUSH
26896: CALL_OW 12
26900: ARRAY
26901: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26902: LD_ADDR_VAR 0 4
26906: PUSH
26907: LD_INT 10
26909: PUSH
26910: LD_INT 20
26912: PUSH
26913: LD_INT 30
26915: PUSH
26916: LD_INT 40
26918: PUSH
26919: LD_INT 50
26921: PUSH
26922: LD_INT 60
26924: PUSH
26925: LD_INT 70
26927: PUSH
26928: LD_INT 80
26930: PUSH
26931: LD_INT 90
26933: PUSH
26934: LD_INT 100
26936: PUSH
26937: LD_INT 110
26939: PUSH
26940: LD_INT 120
26942: PUSH
26943: LD_INT 130
26945: PUSH
26946: LD_INT 140
26948: PUSH
26949: LD_INT 150
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: PPUSH
26972: LD_INT 15
26974: PPUSH
26975: CALL_OW 12
26979: ARRAY
26980: ST_TO_ADDR
// if ValidHex ( x , y ) then
26981: LD_VAR 0 3
26985: PPUSH
26986: LD_VAR 0 4
26990: PPUSH
26991: CALL_OW 488
26995: IFFALSE 27018
// begin result := [ x , y ] ;
26997: LD_ADDR_VAR 0 1
27001: PUSH
27002: LD_VAR 0 3
27006: PUSH
27007: LD_VAR 0 4
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// break ;
27016: GO 27020
// end ; end ;
27018: GO 26820
27020: POP
27021: POP
// if result then
27022: LD_VAR 0 1
27026: IFFALSE 27086
// begin ToLua ( playSibBomb() ) ;
27028: LD_STRING playSibBomb()
27030: PPUSH
27031: CALL_OW 559
// wait ( 0 0$14 ) ;
27035: LD_INT 490
27037: PPUSH
27038: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27042: LD_VAR 0 1
27046: PUSH
27047: LD_INT 1
27049: ARRAY
27050: PPUSH
27051: LD_VAR 0 1
27055: PUSH
27056: LD_INT 2
27058: ARRAY
27059: PPUSH
27060: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27064: LD_VAR 0 1
27068: PUSH
27069: LD_INT 1
27071: ARRAY
27072: PPUSH
27073: LD_VAR 0 1
27077: PUSH
27078: LD_INT 2
27080: ARRAY
27081: PPUSH
27082: CALL_OW 429
// end ; end ;
27086: LD_VAR 0 1
27090: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27091: LD_EXP 74
27095: PUSH
27096: LD_EXP 96
27100: AND
27101: IFFALSE 27113
27103: GO 27105
27105: DISABLE
// YouLost (  ) ;
27106: LD_STRING 
27108: PPUSH
27109: CALL_OW 104
27113: END
// every 0 0$1 trigger StreamModeActive and sFog do
27114: LD_EXP 74
27118: PUSH
27119: LD_EXP 95
27123: AND
27124: IFFALSE 27138
27126: GO 27128
27128: DISABLE
// FogOff ( your_side ) ;
27129: LD_OWVAR 2
27133: PPUSH
27134: CALL_OW 344
27138: END
// every 0 0$1 trigger StreamModeActive and sSun do
27139: LD_EXP 74
27143: PUSH
27144: LD_EXP 97
27148: AND
27149: IFFALSE 27177
27151: GO 27153
27153: DISABLE
// begin solar_recharge_percent := 0 ;
27154: LD_ADDR_OWVAR 79
27158: PUSH
27159: LD_INT 0
27161: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27162: LD_INT 10500
27164: PPUSH
27165: CALL_OW 67
// solar_recharge_percent := 100 ;
27169: LD_ADDR_OWVAR 79
27173: PUSH
27174: LD_INT 100
27176: ST_TO_ADDR
// end ;
27177: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27178: LD_EXP 74
27182: PUSH
27183: LD_EXP 98
27187: AND
27188: IFFALSE 27427
27190: GO 27192
27192: DISABLE
27193: LD_INT 0
27195: PPUSH
27196: PPUSH
27197: PPUSH
// begin tmp := [ ] ;
27198: LD_ADDR_VAR 0 3
27202: PUSH
27203: EMPTY
27204: ST_TO_ADDR
// for i := 1 to 6 do
27205: LD_ADDR_VAR 0 1
27209: PUSH
27210: DOUBLE
27211: LD_INT 1
27213: DEC
27214: ST_TO_ADDR
27215: LD_INT 6
27217: PUSH
27218: FOR_TO
27219: IFFALSE 27324
// begin uc_nation := nation_nature ;
27221: LD_ADDR_OWVAR 21
27225: PUSH
27226: LD_INT 0
27228: ST_TO_ADDR
// uc_side := 0 ;
27229: LD_ADDR_OWVAR 20
27233: PUSH
27234: LD_INT 0
27236: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27237: LD_ADDR_OWVAR 29
27241: PUSH
27242: LD_INT 12
27244: PUSH
27245: LD_INT 12
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: ST_TO_ADDR
// hc_agressivity := 20 ;
27252: LD_ADDR_OWVAR 35
27256: PUSH
27257: LD_INT 20
27259: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27260: LD_ADDR_OWVAR 28
27264: PUSH
27265: LD_INT 17
27267: ST_TO_ADDR
// hc_gallery :=  ;
27268: LD_ADDR_OWVAR 33
27272: PUSH
27273: LD_STRING 
27275: ST_TO_ADDR
// hc_name :=  ;
27276: LD_ADDR_OWVAR 26
27280: PUSH
27281: LD_STRING 
27283: ST_TO_ADDR
// un := CreateHuman ;
27284: LD_ADDR_VAR 0 2
27288: PUSH
27289: CALL_OW 44
27293: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27294: LD_VAR 0 2
27298: PPUSH
27299: LD_INT 1
27301: PPUSH
27302: CALL_OW 51
// tmp := tmp ^ un ;
27306: LD_ADDR_VAR 0 3
27310: PUSH
27311: LD_VAR 0 3
27315: PUSH
27316: LD_VAR 0 2
27320: ADD
27321: ST_TO_ADDR
// end ;
27322: GO 27218
27324: POP
27325: POP
// repeat wait ( 0 0$1 ) ;
27326: LD_INT 35
27328: PPUSH
27329: CALL_OW 67
// for un in tmp do
27333: LD_ADDR_VAR 0 2
27337: PUSH
27338: LD_VAR 0 3
27342: PUSH
27343: FOR_IN
27344: IFFALSE 27418
// begin if IsDead ( un ) then
27346: LD_VAR 0 2
27350: PPUSH
27351: CALL_OW 301
27355: IFFALSE 27375
// begin tmp := tmp diff un ;
27357: LD_ADDR_VAR 0 3
27361: PUSH
27362: LD_VAR 0 3
27366: PUSH
27367: LD_VAR 0 2
27371: DIFF
27372: ST_TO_ADDR
// continue ;
27373: GO 27343
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27375: LD_VAR 0 2
27379: PPUSH
27380: LD_INT 3
27382: PUSH
27383: LD_INT 22
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PPUSH
27397: CALL_OW 69
27401: PPUSH
27402: LD_VAR 0 2
27406: PPUSH
27407: CALL_OW 74
27411: PPUSH
27412: CALL_OW 115
// end ;
27416: GO 27343
27418: POP
27419: POP
// until not tmp ;
27420: LD_VAR 0 3
27424: NOT
27425: IFFALSE 27326
// end ;
27427: PPOPN 3
27429: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27430: LD_EXP 74
27434: PUSH
27435: LD_EXP 99
27439: AND
27440: IFFALSE 27494
27442: GO 27444
27444: DISABLE
// begin ToLua ( displayTroll(); ) ;
27445: LD_STRING displayTroll();
27447: PPUSH
27448: CALL_OW 559
// wait ( 3 3$00 ) ;
27452: LD_INT 6300
27454: PPUSH
27455: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27459: LD_STRING hideTroll();
27461: PPUSH
27462: CALL_OW 559
// wait ( 1 1$00 ) ;
27466: LD_INT 2100
27468: PPUSH
27469: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27473: LD_STRING displayTroll();
27475: PPUSH
27476: CALL_OW 559
// wait ( 1 1$00 ) ;
27480: LD_INT 2100
27482: PPUSH
27483: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27487: LD_STRING hideTroll();
27489: PPUSH
27490: CALL_OW 559
// end ;
27494: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27495: LD_EXP 74
27499: PUSH
27500: LD_EXP 100
27504: AND
27505: IFFALSE 27568
27507: GO 27509
27509: DISABLE
27510: LD_INT 0
27512: PPUSH
// begin p := 0 ;
27513: LD_ADDR_VAR 0 1
27517: PUSH
27518: LD_INT 0
27520: ST_TO_ADDR
// repeat game_speed := 1 ;
27521: LD_ADDR_OWVAR 65
27525: PUSH
27526: LD_INT 1
27528: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27529: LD_INT 35
27531: PPUSH
27532: CALL_OW 67
// p := p + 1 ;
27536: LD_ADDR_VAR 0 1
27540: PUSH
27541: LD_VAR 0 1
27545: PUSH
27546: LD_INT 1
27548: PLUS
27549: ST_TO_ADDR
// until p >= 60 ;
27550: LD_VAR 0 1
27554: PUSH
27555: LD_INT 60
27557: GREATEREQUAL
27558: IFFALSE 27521
// game_speed := 4 ;
27560: LD_ADDR_OWVAR 65
27564: PUSH
27565: LD_INT 4
27567: ST_TO_ADDR
// end ;
27568: PPOPN 1
27570: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27571: LD_EXP 74
27575: PUSH
27576: LD_EXP 101
27580: AND
27581: IFFALSE 27727
27583: GO 27585
27585: DISABLE
27586: LD_INT 0
27588: PPUSH
27589: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27590: LD_ADDR_VAR 0 1
27594: PUSH
27595: LD_INT 22
27597: PUSH
27598: LD_OWVAR 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 2
27609: PUSH
27610: LD_INT 30
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 30
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PPUSH
27639: CALL_OW 69
27643: ST_TO_ADDR
// if not depot then
27644: LD_VAR 0 1
27648: NOT
27649: IFFALSE 27653
// exit ;
27651: GO 27727
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27653: LD_ADDR_VAR 0 2
27657: PUSH
27658: LD_VAR 0 1
27662: PUSH
27663: LD_INT 1
27665: PPUSH
27666: LD_VAR 0 1
27670: PPUSH
27671: CALL_OW 12
27675: ARRAY
27676: PPUSH
27677: CALL_OW 274
27681: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27682: LD_VAR 0 2
27686: PPUSH
27687: LD_INT 1
27689: PPUSH
27690: LD_INT 0
27692: PPUSH
27693: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27697: LD_VAR 0 2
27701: PPUSH
27702: LD_INT 2
27704: PPUSH
27705: LD_INT 0
27707: PPUSH
27708: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27712: LD_VAR 0 2
27716: PPUSH
27717: LD_INT 3
27719: PPUSH
27720: LD_INT 0
27722: PPUSH
27723: CALL_OW 277
// end ;
27727: PPOPN 2
27729: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27730: LD_EXP 74
27734: PUSH
27735: LD_EXP 102
27739: AND
27740: IFFALSE 27837
27742: GO 27744
27744: DISABLE
27745: LD_INT 0
27747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27748: LD_ADDR_VAR 0 1
27752: PUSH
27753: LD_INT 22
27755: PUSH
27756: LD_OWVAR 2
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 21
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 3
27777: PUSH
27778: LD_INT 23
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: PPUSH
27797: CALL_OW 69
27801: ST_TO_ADDR
// if not tmp then
27802: LD_VAR 0 1
27806: NOT
27807: IFFALSE 27811
// exit ;
27809: GO 27837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27811: LD_VAR 0 1
27815: PUSH
27816: LD_INT 1
27818: PPUSH
27819: LD_VAR 0 1
27823: PPUSH
27824: CALL_OW 12
27828: ARRAY
27829: PPUSH
27830: LD_INT 200
27832: PPUSH
27833: CALL_OW 234
// end ;
27837: PPOPN 1
27839: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27840: LD_EXP 74
27844: PUSH
27845: LD_EXP 103
27849: AND
27850: IFFALSE 27929
27852: GO 27854
27854: DISABLE
27855: LD_INT 0
27857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27858: LD_ADDR_VAR 0 1
27862: PUSH
27863: LD_INT 22
27865: PUSH
27866: LD_OWVAR 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 21
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PPUSH
27889: CALL_OW 69
27893: ST_TO_ADDR
// if not tmp then
27894: LD_VAR 0 1
27898: NOT
27899: IFFALSE 27903
// exit ;
27901: GO 27929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27903: LD_VAR 0 1
27907: PUSH
27908: LD_INT 1
27910: PPUSH
27911: LD_VAR 0 1
27915: PPUSH
27916: CALL_OW 12
27920: ARRAY
27921: PPUSH
27922: LD_INT 60
27924: PPUSH
27925: CALL_OW 234
// end ;
27929: PPOPN 1
27931: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27932: LD_EXP 74
27936: PUSH
27937: LD_EXP 104
27941: AND
27942: IFFALSE 28041
27944: GO 27946
27946: DISABLE
27947: LD_INT 0
27949: PPUSH
27950: PPUSH
// begin enable ;
27951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27952: LD_ADDR_VAR 0 1
27956: PUSH
27957: LD_INT 22
27959: PUSH
27960: LD_OWVAR 2
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 61
27971: PUSH
27972: EMPTY
27973: LIST
27974: PUSH
27975: LD_INT 33
27977: PUSH
27978: LD_INT 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: LIST
27989: PPUSH
27990: CALL_OW 69
27994: ST_TO_ADDR
// if not tmp then
27995: LD_VAR 0 1
27999: NOT
28000: IFFALSE 28004
// exit ;
28002: GO 28041
// for i in tmp do
28004: LD_ADDR_VAR 0 2
28008: PUSH
28009: LD_VAR 0 1
28013: PUSH
28014: FOR_IN
28015: IFFALSE 28039
// if IsControledBy ( i ) then
28017: LD_VAR 0 2
28021: PPUSH
28022: CALL_OW 312
28026: IFFALSE 28037
// ComUnlink ( i ) ;
28028: LD_VAR 0 2
28032: PPUSH
28033: CALL_OW 136
28037: GO 28014
28039: POP
28040: POP
// end ;
28041: PPOPN 2
28043: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28044: LD_EXP 74
28048: PUSH
28049: LD_EXP 105
28053: AND
28054: IFFALSE 28194
28056: GO 28058
28058: DISABLE
28059: LD_INT 0
28061: PPUSH
28062: PPUSH
// begin ToLua ( displayPowell(); ) ;
28063: LD_STRING displayPowell();
28065: PPUSH
28066: CALL_OW 559
// uc_side := 0 ;
28070: LD_ADDR_OWVAR 20
28074: PUSH
28075: LD_INT 0
28077: ST_TO_ADDR
// uc_nation := 2 ;
28078: LD_ADDR_OWVAR 21
28082: PUSH
28083: LD_INT 2
28085: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28086: LD_ADDR_OWVAR 37
28090: PUSH
28091: LD_INT 14
28093: ST_TO_ADDR
// vc_engine := engine_siberite ;
28094: LD_ADDR_OWVAR 39
28098: PUSH
28099: LD_INT 3
28101: ST_TO_ADDR
// vc_control := control_apeman ;
28102: LD_ADDR_OWVAR 38
28106: PUSH
28107: LD_INT 5
28109: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28110: LD_ADDR_OWVAR 40
28114: PUSH
28115: LD_INT 29
28117: ST_TO_ADDR
// un := CreateVehicle ;
28118: LD_ADDR_VAR 0 2
28122: PUSH
28123: CALL_OW 45
28127: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28128: LD_VAR 0 2
28132: PPUSH
28133: LD_INT 1
28135: PPUSH
28136: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28140: LD_INT 35
28142: PPUSH
28143: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28147: LD_VAR 0 2
28151: PPUSH
28152: LD_INT 22
28154: PUSH
28155: LD_OWVAR 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 69
28168: PPUSH
28169: LD_VAR 0 2
28173: PPUSH
28174: CALL_OW 74
28178: PPUSH
28179: CALL_OW 115
// until IsDead ( un ) ;
28183: LD_VAR 0 2
28187: PPUSH
28188: CALL_OW 301
28192: IFFALSE 28140
// end ;
28194: PPOPN 2
28196: END
// every 0 0$1 trigger StreamModeActive and sStu do
28197: LD_EXP 74
28201: PUSH
28202: LD_EXP 113
28206: AND
28207: IFFALSE 28223
28209: GO 28211
28211: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28212: LD_STRING displayStucuk();
28214: PPUSH
28215: CALL_OW 559
// ResetFog ;
28219: CALL_OW 335
// end ;
28223: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28224: LD_EXP 74
28228: PUSH
28229: LD_EXP 106
28233: AND
28234: IFFALSE 28375
28236: GO 28238
28238: DISABLE
28239: LD_INT 0
28241: PPUSH
28242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28243: LD_ADDR_VAR 0 2
28247: PUSH
28248: LD_INT 22
28250: PUSH
28251: LD_OWVAR 2
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 21
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 69
28278: ST_TO_ADDR
// if not tmp then
28279: LD_VAR 0 2
28283: NOT
28284: IFFALSE 28288
// exit ;
28286: GO 28375
// un := tmp [ rand ( 1 , tmp ) ] ;
28288: LD_ADDR_VAR 0 1
28292: PUSH
28293: LD_VAR 0 2
28297: PUSH
28298: LD_INT 1
28300: PPUSH
28301: LD_VAR 0 2
28305: PPUSH
28306: CALL_OW 12
28310: ARRAY
28311: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28312: LD_VAR 0 1
28316: PPUSH
28317: LD_INT 0
28319: PPUSH
28320: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28324: LD_VAR 0 1
28328: PPUSH
28329: LD_OWVAR 3
28333: PUSH
28334: LD_VAR 0 1
28338: DIFF
28339: PPUSH
28340: LD_VAR 0 1
28344: PPUSH
28345: CALL_OW 74
28349: PPUSH
28350: CALL_OW 115
// wait ( 0 0$20 ) ;
28354: LD_INT 700
28356: PPUSH
28357: CALL_OW 67
// SetSide ( un , your_side ) ;
28361: LD_VAR 0 1
28365: PPUSH
28366: LD_OWVAR 2
28370: PPUSH
28371: CALL_OW 235
// end ;
28375: PPOPN 2
28377: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28378: LD_EXP 74
28382: PUSH
28383: LD_EXP 107
28387: AND
28388: IFFALSE 28494
28390: GO 28392
28392: DISABLE
28393: LD_INT 0
28395: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28396: LD_ADDR_VAR 0 1
28400: PUSH
28401: LD_INT 22
28403: PUSH
28404: LD_OWVAR 2
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 30
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 30
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PPUSH
28445: CALL_OW 69
28449: ST_TO_ADDR
// if not depot then
28450: LD_VAR 0 1
28454: NOT
28455: IFFALSE 28459
// exit ;
28457: GO 28494
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28459: LD_VAR 0 1
28463: PUSH
28464: LD_INT 1
28466: ARRAY
28467: PPUSH
28468: CALL_OW 250
28472: PPUSH
28473: LD_VAR 0 1
28477: PUSH
28478: LD_INT 1
28480: ARRAY
28481: PPUSH
28482: CALL_OW 251
28486: PPUSH
28487: LD_INT 70
28489: PPUSH
28490: CALL_OW 495
// end ;
28494: PPOPN 1
28496: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28497: LD_EXP 74
28501: PUSH
28502: LD_EXP 108
28506: AND
28507: IFFALSE 28718
28509: GO 28511
28511: DISABLE
28512: LD_INT 0
28514: PPUSH
28515: PPUSH
28516: PPUSH
28517: PPUSH
28518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28519: LD_ADDR_VAR 0 5
28523: PUSH
28524: LD_INT 22
28526: PUSH
28527: LD_OWVAR 2
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 21
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PPUSH
28550: CALL_OW 69
28554: ST_TO_ADDR
// if not tmp then
28555: LD_VAR 0 5
28559: NOT
28560: IFFALSE 28564
// exit ;
28562: GO 28718
// for i in tmp do
28564: LD_ADDR_VAR 0 1
28568: PUSH
28569: LD_VAR 0 5
28573: PUSH
28574: FOR_IN
28575: IFFALSE 28716
// begin d := rand ( 0 , 5 ) ;
28577: LD_ADDR_VAR 0 4
28581: PUSH
28582: LD_INT 0
28584: PPUSH
28585: LD_INT 5
28587: PPUSH
28588: CALL_OW 12
28592: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28593: LD_ADDR_VAR 0 2
28597: PUSH
28598: LD_VAR 0 1
28602: PPUSH
28603: CALL_OW 250
28607: PPUSH
28608: LD_VAR 0 4
28612: PPUSH
28613: LD_INT 3
28615: PPUSH
28616: LD_INT 12
28618: PPUSH
28619: CALL_OW 12
28623: PPUSH
28624: CALL_OW 272
28628: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28629: LD_ADDR_VAR 0 3
28633: PUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 251
28643: PPUSH
28644: LD_VAR 0 4
28648: PPUSH
28649: LD_INT 3
28651: PPUSH
28652: LD_INT 12
28654: PPUSH
28655: CALL_OW 12
28659: PPUSH
28660: CALL_OW 273
28664: ST_TO_ADDR
// if ValidHex ( x , y ) then
28665: LD_VAR 0 2
28669: PPUSH
28670: LD_VAR 0 3
28674: PPUSH
28675: CALL_OW 488
28679: IFFALSE 28714
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28681: LD_VAR 0 1
28685: PPUSH
28686: LD_VAR 0 2
28690: PPUSH
28691: LD_VAR 0 3
28695: PPUSH
28696: LD_INT 3
28698: PPUSH
28699: LD_INT 6
28701: PPUSH
28702: CALL_OW 12
28706: PPUSH
28707: LD_INT 1
28709: PPUSH
28710: CALL_OW 483
// end ;
28714: GO 28574
28716: POP
28717: POP
// end ;
28718: PPOPN 5
28720: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28721: LD_EXP 74
28725: PUSH
28726: LD_EXP 109
28730: AND
28731: IFFALSE 28825
28733: GO 28735
28735: DISABLE
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28740: LD_ADDR_VAR 0 2
28744: PUSH
28745: LD_INT 22
28747: PUSH
28748: LD_OWVAR 2
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 32
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 21
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: PPUSH
28782: CALL_OW 69
28786: ST_TO_ADDR
// if not tmp then
28787: LD_VAR 0 2
28791: NOT
28792: IFFALSE 28796
// exit ;
28794: GO 28825
// for i in tmp do
28796: LD_ADDR_VAR 0 1
28800: PUSH
28801: LD_VAR 0 2
28805: PUSH
28806: FOR_IN
28807: IFFALSE 28823
// SetFuel ( i , 0 ) ;
28809: LD_VAR 0 1
28813: PPUSH
28814: LD_INT 0
28816: PPUSH
28817: CALL_OW 240
28821: GO 28806
28823: POP
28824: POP
// end ;
28825: PPOPN 2
28827: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28828: LD_EXP 74
28832: PUSH
28833: LD_EXP 110
28837: AND
28838: IFFALSE 28904
28840: GO 28842
28842: DISABLE
28843: LD_INT 0
28845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28846: LD_ADDR_VAR 0 1
28850: PUSH
28851: LD_INT 22
28853: PUSH
28854: LD_OWVAR 2
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 30
28865: PUSH
28866: LD_INT 29
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PPUSH
28877: CALL_OW 69
28881: ST_TO_ADDR
// if not tmp then
28882: LD_VAR 0 1
28886: NOT
28887: IFFALSE 28891
// exit ;
28889: GO 28904
// DestroyUnit ( tmp [ 1 ] ) ;
28891: LD_VAR 0 1
28895: PUSH
28896: LD_INT 1
28898: ARRAY
28899: PPUSH
28900: CALL_OW 65
// end ;
28904: PPOPN 1
28906: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28907: LD_EXP 74
28911: PUSH
28912: LD_EXP 112
28916: AND
28917: IFFALSE 29046
28919: GO 28921
28921: DISABLE
28922: LD_INT 0
28924: PPUSH
// begin uc_side := 0 ;
28925: LD_ADDR_OWVAR 20
28929: PUSH
28930: LD_INT 0
28932: ST_TO_ADDR
// uc_nation := nation_arabian ;
28933: LD_ADDR_OWVAR 21
28937: PUSH
28938: LD_INT 2
28940: ST_TO_ADDR
// hc_gallery :=  ;
28941: LD_ADDR_OWVAR 33
28945: PUSH
28946: LD_STRING 
28948: ST_TO_ADDR
// hc_name :=  ;
28949: LD_ADDR_OWVAR 26
28953: PUSH
28954: LD_STRING 
28956: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28957: LD_INT 1
28959: PPUSH
28960: LD_INT 11
28962: PPUSH
28963: LD_INT 10
28965: PPUSH
28966: CALL_OW 380
// un := CreateHuman ;
28970: LD_ADDR_VAR 0 1
28974: PUSH
28975: CALL_OW 44
28979: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28980: LD_VAR 0 1
28984: PPUSH
28985: LD_INT 1
28987: PPUSH
28988: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28992: LD_INT 35
28994: PPUSH
28995: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28999: LD_VAR 0 1
29003: PPUSH
29004: LD_INT 22
29006: PUSH
29007: LD_OWVAR 2
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PPUSH
29016: CALL_OW 69
29020: PPUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 74
29030: PPUSH
29031: CALL_OW 115
// until IsDead ( un ) ;
29035: LD_VAR 0 1
29039: PPUSH
29040: CALL_OW 301
29044: IFFALSE 28992
// end ;
29046: PPOPN 1
29048: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29049: LD_EXP 74
29053: PUSH
29054: LD_EXP 114
29058: AND
29059: IFFALSE 29071
29061: GO 29063
29063: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29064: LD_STRING earthquake(getX(game), 0, 32)
29066: PPUSH
29067: CALL_OW 559
29071: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29072: LD_EXP 74
29076: PUSH
29077: LD_EXP 115
29081: AND
29082: IFFALSE 29173
29084: GO 29086
29086: DISABLE
29087: LD_INT 0
29089: PPUSH
// begin enable ;
29090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29091: LD_ADDR_VAR 0 1
29095: PUSH
29096: LD_INT 22
29098: PUSH
29099: LD_OWVAR 2
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 21
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 33
29120: PUSH
29121: LD_INT 3
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: PPUSH
29133: CALL_OW 69
29137: ST_TO_ADDR
// if not tmp then
29138: LD_VAR 0 1
29142: NOT
29143: IFFALSE 29147
// exit ;
29145: GO 29173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29147: LD_VAR 0 1
29151: PUSH
29152: LD_INT 1
29154: PPUSH
29155: LD_VAR 0 1
29159: PPUSH
29160: CALL_OW 12
29164: ARRAY
29165: PPUSH
29166: LD_INT 1
29168: PPUSH
29169: CALL_OW 234
// end ;
29173: PPOPN 1
29175: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29176: LD_EXP 74
29180: PUSH
29181: LD_EXP 116
29185: AND
29186: IFFALSE 29327
29188: GO 29190
29190: DISABLE
29191: LD_INT 0
29193: PPUSH
29194: PPUSH
29195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29196: LD_ADDR_VAR 0 3
29200: PUSH
29201: LD_INT 22
29203: PUSH
29204: LD_OWVAR 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 25
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PPUSH
29227: CALL_OW 69
29231: ST_TO_ADDR
// if not tmp then
29232: LD_VAR 0 3
29236: NOT
29237: IFFALSE 29241
// exit ;
29239: GO 29327
// un := tmp [ rand ( 1 , tmp ) ] ;
29241: LD_ADDR_VAR 0 2
29245: PUSH
29246: LD_VAR 0 3
29250: PUSH
29251: LD_INT 1
29253: PPUSH
29254: LD_VAR 0 3
29258: PPUSH
29259: CALL_OW 12
29263: ARRAY
29264: ST_TO_ADDR
// if Crawls ( un ) then
29265: LD_VAR 0 2
29269: PPUSH
29270: CALL_OW 318
29274: IFFALSE 29285
// ComWalk ( un ) ;
29276: LD_VAR 0 2
29280: PPUSH
29281: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29285: LD_VAR 0 2
29289: PPUSH
29290: LD_INT 9
29292: PPUSH
29293: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29297: LD_INT 28
29299: PPUSH
29300: LD_OWVAR 2
29304: PPUSH
29305: LD_INT 2
29307: PPUSH
29308: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29312: LD_INT 29
29314: PPUSH
29315: LD_OWVAR 2
29319: PPUSH
29320: LD_INT 2
29322: PPUSH
29323: CALL_OW 322
// end ;
29327: PPOPN 3
29329: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29330: LD_EXP 74
29334: PUSH
29335: LD_EXP 117
29339: AND
29340: IFFALSE 29451
29342: GO 29344
29344: DISABLE
29345: LD_INT 0
29347: PPUSH
29348: PPUSH
29349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29350: LD_ADDR_VAR 0 3
29354: PUSH
29355: LD_INT 22
29357: PUSH
29358: LD_OWVAR 2
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 25
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PPUSH
29381: CALL_OW 69
29385: ST_TO_ADDR
// if not tmp then
29386: LD_VAR 0 3
29390: NOT
29391: IFFALSE 29395
// exit ;
29393: GO 29451
// un := tmp [ rand ( 1 , tmp ) ] ;
29395: LD_ADDR_VAR 0 2
29399: PUSH
29400: LD_VAR 0 3
29404: PUSH
29405: LD_INT 1
29407: PPUSH
29408: LD_VAR 0 3
29412: PPUSH
29413: CALL_OW 12
29417: ARRAY
29418: ST_TO_ADDR
// if Crawls ( un ) then
29419: LD_VAR 0 2
29423: PPUSH
29424: CALL_OW 318
29428: IFFALSE 29439
// ComWalk ( un ) ;
29430: LD_VAR 0 2
29434: PPUSH
29435: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29439: LD_VAR 0 2
29443: PPUSH
29444: LD_INT 8
29446: PPUSH
29447: CALL_OW 336
// end ;
29451: PPOPN 3
29453: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29454: LD_EXP 74
29458: PUSH
29459: LD_EXP 118
29463: AND
29464: IFFALSE 29608
29466: GO 29468
29468: DISABLE
29469: LD_INT 0
29471: PPUSH
29472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29473: LD_ADDR_VAR 0 2
29477: PUSH
29478: LD_INT 22
29480: PUSH
29481: LD_OWVAR 2
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 21
29492: PUSH
29493: LD_INT 2
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: LD_INT 34
29505: PUSH
29506: LD_INT 12
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 34
29515: PUSH
29516: LD_INT 51
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 34
29525: PUSH
29526: LD_INT 32
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: PPUSH
29544: CALL_OW 69
29548: ST_TO_ADDR
// if not tmp then
29549: LD_VAR 0 2
29553: NOT
29554: IFFALSE 29558
// exit ;
29556: GO 29608
// for i in tmp do
29558: LD_ADDR_VAR 0 1
29562: PUSH
29563: LD_VAR 0 2
29567: PUSH
29568: FOR_IN
29569: IFFALSE 29606
// if GetCargo ( i , mat_artifact ) = 0 then
29571: LD_VAR 0 1
29575: PPUSH
29576: LD_INT 4
29578: PPUSH
29579: CALL_OW 289
29583: PUSH
29584: LD_INT 0
29586: EQUAL
29587: IFFALSE 29604
// SetCargo ( i , mat_siberit , 100 ) ;
29589: LD_VAR 0 1
29593: PPUSH
29594: LD_INT 3
29596: PPUSH
29597: LD_INT 100
29599: PPUSH
29600: CALL_OW 290
29604: GO 29568
29606: POP
29607: POP
// end ;
29608: PPOPN 2
29610: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29611: LD_EXP 74
29615: PUSH
29616: LD_EXP 119
29620: AND
29621: IFFALSE 29804
29623: GO 29625
29625: DISABLE
29626: LD_INT 0
29628: PPUSH
29629: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29630: LD_ADDR_VAR 0 2
29634: PUSH
29635: LD_INT 22
29637: PUSH
29638: LD_OWVAR 2
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PPUSH
29647: CALL_OW 69
29651: ST_TO_ADDR
// if not tmp then
29652: LD_VAR 0 2
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 29804
// for i := 1 to 2 do
29661: LD_ADDR_VAR 0 1
29665: PUSH
29666: DOUBLE
29667: LD_INT 1
29669: DEC
29670: ST_TO_ADDR
29671: LD_INT 2
29673: PUSH
29674: FOR_TO
29675: IFFALSE 29802
// begin uc_side := your_side ;
29677: LD_ADDR_OWVAR 20
29681: PUSH
29682: LD_OWVAR 2
29686: ST_TO_ADDR
// uc_nation := nation_american ;
29687: LD_ADDR_OWVAR 21
29691: PUSH
29692: LD_INT 1
29694: ST_TO_ADDR
// vc_chassis := us_morphling ;
29695: LD_ADDR_OWVAR 37
29699: PUSH
29700: LD_INT 5
29702: ST_TO_ADDR
// vc_engine := engine_siberite ;
29703: LD_ADDR_OWVAR 39
29707: PUSH
29708: LD_INT 3
29710: ST_TO_ADDR
// vc_control := control_computer ;
29711: LD_ADDR_OWVAR 38
29715: PUSH
29716: LD_INT 3
29718: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29719: LD_ADDR_OWVAR 40
29723: PUSH
29724: LD_INT 10
29726: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29727: LD_VAR 0 2
29731: PUSH
29732: LD_INT 1
29734: ARRAY
29735: PPUSH
29736: CALL_OW 310
29740: NOT
29741: IFFALSE 29788
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29743: CALL_OW 45
29747: PPUSH
29748: LD_VAR 0 2
29752: PUSH
29753: LD_INT 1
29755: ARRAY
29756: PPUSH
29757: CALL_OW 250
29761: PPUSH
29762: LD_VAR 0 2
29766: PUSH
29767: LD_INT 1
29769: ARRAY
29770: PPUSH
29771: CALL_OW 251
29775: PPUSH
29776: LD_INT 12
29778: PPUSH
29779: LD_INT 1
29781: PPUSH
29782: CALL_OW 50
29786: GO 29800
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29788: CALL_OW 45
29792: PPUSH
29793: LD_INT 1
29795: PPUSH
29796: CALL_OW 51
// end ;
29800: GO 29674
29802: POP
29803: POP
// end ;
29804: PPOPN 2
29806: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29807: LD_EXP 74
29811: PUSH
29812: LD_EXP 120
29816: AND
29817: IFFALSE 30039
29819: GO 29821
29821: DISABLE
29822: LD_INT 0
29824: PPUSH
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29830: LD_ADDR_VAR 0 6
29834: PUSH
29835: LD_INT 22
29837: PUSH
29838: LD_OWVAR 2
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 21
29849: PUSH
29850: LD_INT 1
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: LD_INT 23
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: PPUSH
29879: CALL_OW 69
29883: ST_TO_ADDR
// if not tmp then
29884: LD_VAR 0 6
29888: NOT
29889: IFFALSE 29893
// exit ;
29891: GO 30039
// s1 := rand ( 1 , 4 ) ;
29893: LD_ADDR_VAR 0 2
29897: PUSH
29898: LD_INT 1
29900: PPUSH
29901: LD_INT 4
29903: PPUSH
29904: CALL_OW 12
29908: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29909: LD_ADDR_VAR 0 4
29913: PUSH
29914: LD_VAR 0 6
29918: PUSH
29919: LD_INT 1
29921: ARRAY
29922: PPUSH
29923: LD_VAR 0 2
29927: PPUSH
29928: CALL_OW 259
29932: ST_TO_ADDR
// if s1 = 1 then
29933: LD_VAR 0 2
29937: PUSH
29938: LD_INT 1
29940: EQUAL
29941: IFFALSE 29961
// s2 := rand ( 2 , 4 ) else
29943: LD_ADDR_VAR 0 3
29947: PUSH
29948: LD_INT 2
29950: PPUSH
29951: LD_INT 4
29953: PPUSH
29954: CALL_OW 12
29958: ST_TO_ADDR
29959: GO 29969
// s2 := 1 ;
29961: LD_ADDR_VAR 0 3
29965: PUSH
29966: LD_INT 1
29968: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29969: LD_ADDR_VAR 0 5
29973: PUSH
29974: LD_VAR 0 6
29978: PUSH
29979: LD_INT 1
29981: ARRAY
29982: PPUSH
29983: LD_VAR 0 3
29987: PPUSH
29988: CALL_OW 259
29992: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29993: LD_VAR 0 6
29997: PUSH
29998: LD_INT 1
30000: ARRAY
30001: PPUSH
30002: LD_VAR 0 2
30006: PPUSH
30007: LD_VAR 0 5
30011: PPUSH
30012: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30016: LD_VAR 0 6
30020: PUSH
30021: LD_INT 1
30023: ARRAY
30024: PPUSH
30025: LD_VAR 0 3
30029: PPUSH
30030: LD_VAR 0 4
30034: PPUSH
30035: CALL_OW 237
// end ;
30039: PPOPN 6
30041: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30042: LD_EXP 74
30046: PUSH
30047: LD_EXP 121
30051: AND
30052: IFFALSE 30131
30054: GO 30056
30056: DISABLE
30057: LD_INT 0
30059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30060: LD_ADDR_VAR 0 1
30064: PUSH
30065: LD_INT 22
30067: PUSH
30068: LD_OWVAR 2
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 30
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PPUSH
30091: CALL_OW 69
30095: ST_TO_ADDR
// if not tmp then
30096: LD_VAR 0 1
30100: NOT
30101: IFFALSE 30105
// exit ;
30103: GO 30131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30105: LD_VAR 0 1
30109: PUSH
30110: LD_INT 1
30112: PPUSH
30113: LD_VAR 0 1
30117: PPUSH
30118: CALL_OW 12
30122: ARRAY
30123: PPUSH
30124: LD_INT 1
30126: PPUSH
30127: CALL_OW 234
// end ;
30131: PPOPN 1
30133: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30134: LD_EXP 74
30138: PUSH
30139: LD_EXP 122
30143: AND
30144: IFFALSE 30256
30146: GO 30148
30148: DISABLE
30149: LD_INT 0
30151: PPUSH
30152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30153: LD_ADDR_VAR 0 2
30157: PUSH
30158: LD_INT 22
30160: PUSH
30161: LD_OWVAR 2
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: LD_INT 30
30175: PUSH
30176: LD_INT 27
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 30
30185: PUSH
30186: LD_INT 26
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 30
30195: PUSH
30196: LD_INT 28
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PPUSH
30213: CALL_OW 69
30217: ST_TO_ADDR
// if not tmp then
30218: LD_VAR 0 2
30222: NOT
30223: IFFALSE 30227
// exit ;
30225: GO 30256
// for i in tmp do
30227: LD_ADDR_VAR 0 1
30231: PUSH
30232: LD_VAR 0 2
30236: PUSH
30237: FOR_IN
30238: IFFALSE 30254
// SetLives ( i , 1 ) ;
30240: LD_VAR 0 1
30244: PPUSH
30245: LD_INT 1
30247: PPUSH
30248: CALL_OW 234
30252: GO 30237
30254: POP
30255: POP
// end ;
30256: PPOPN 2
30258: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30259: LD_EXP 74
30263: PUSH
30264: LD_EXP 123
30268: AND
30269: IFFALSE 30556
30271: GO 30273
30273: DISABLE
30274: LD_INT 0
30276: PPUSH
30277: PPUSH
30278: PPUSH
// begin i := rand ( 1 , 7 ) ;
30279: LD_ADDR_VAR 0 1
30283: PUSH
30284: LD_INT 1
30286: PPUSH
30287: LD_INT 7
30289: PPUSH
30290: CALL_OW 12
30294: ST_TO_ADDR
// case i of 1 :
30295: LD_VAR 0 1
30299: PUSH
30300: LD_INT 1
30302: DOUBLE
30303: EQUAL
30304: IFTRUE 30308
30306: GO 30318
30308: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30309: LD_STRING earthquake(getX(game), 0, 32)
30311: PPUSH
30312: CALL_OW 559
30316: GO 30556
30318: LD_INT 2
30320: DOUBLE
30321: EQUAL
30322: IFTRUE 30326
30324: GO 30340
30326: POP
// begin ToLua ( displayStucuk(); ) ;
30327: LD_STRING displayStucuk();
30329: PPUSH
30330: CALL_OW 559
// ResetFog ;
30334: CALL_OW 335
// end ; 3 :
30338: GO 30556
30340: LD_INT 3
30342: DOUBLE
30343: EQUAL
30344: IFTRUE 30348
30346: GO 30452
30348: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30349: LD_ADDR_VAR 0 2
30353: PUSH
30354: LD_INT 22
30356: PUSH
30357: LD_OWVAR 2
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 25
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PPUSH
30380: CALL_OW 69
30384: ST_TO_ADDR
// if not tmp then
30385: LD_VAR 0 2
30389: NOT
30390: IFFALSE 30394
// exit ;
30392: GO 30556
// un := tmp [ rand ( 1 , tmp ) ] ;
30394: LD_ADDR_VAR 0 3
30398: PUSH
30399: LD_VAR 0 2
30403: PUSH
30404: LD_INT 1
30406: PPUSH
30407: LD_VAR 0 2
30411: PPUSH
30412: CALL_OW 12
30416: ARRAY
30417: ST_TO_ADDR
// if Crawls ( un ) then
30418: LD_VAR 0 3
30422: PPUSH
30423: CALL_OW 318
30427: IFFALSE 30438
// ComWalk ( un ) ;
30429: LD_VAR 0 3
30433: PPUSH
30434: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30438: LD_VAR 0 3
30442: PPUSH
30443: LD_INT 8
30445: PPUSH
30446: CALL_OW 336
// end ; 4 :
30450: GO 30556
30452: LD_INT 4
30454: DOUBLE
30455: EQUAL
30456: IFTRUE 30460
30458: GO 30534
30460: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30461: LD_ADDR_VAR 0 2
30465: PUSH
30466: LD_INT 22
30468: PUSH
30469: LD_OWVAR 2
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 30
30480: PUSH
30481: LD_INT 29
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PPUSH
30492: CALL_OW 69
30496: ST_TO_ADDR
// if not tmp then
30497: LD_VAR 0 2
30501: NOT
30502: IFFALSE 30506
// exit ;
30504: GO 30556
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30506: LD_VAR 0 2
30510: PUSH
30511: LD_INT 1
30513: ARRAY
30514: PPUSH
30515: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30519: LD_VAR 0 2
30523: PUSH
30524: LD_INT 1
30526: ARRAY
30527: PPUSH
30528: CALL_OW 65
// end ; 5 .. 7 :
30532: GO 30556
30534: LD_INT 5
30536: DOUBLE
30537: GREATEREQUAL
30538: IFFALSE 30546
30540: LD_INT 7
30542: DOUBLE
30543: LESSEQUAL
30544: IFTRUE 30548
30546: GO 30555
30548: POP
// StreamSibBomb ; end ;
30549: CALL 26793 0 0
30553: GO 30556
30555: POP
// end ;
30556: PPOPN 3
30558: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30559: LD_EXP 74
30563: PUSH
30564: LD_EXP 124
30568: AND
30569: IFFALSE 30725
30571: GO 30573
30573: DISABLE
30574: LD_INT 0
30576: PPUSH
30577: PPUSH
30578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30579: LD_ADDR_VAR 0 2
30583: PUSH
30584: LD_INT 81
30586: PUSH
30587: LD_OWVAR 2
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: LD_INT 21
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 21
30611: PUSH
30612: LD_INT 2
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: LIST
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PPUSH
30628: CALL_OW 69
30632: ST_TO_ADDR
// if not tmp then
30633: LD_VAR 0 2
30637: NOT
30638: IFFALSE 30642
// exit ;
30640: GO 30725
// p := 0 ;
30642: LD_ADDR_VAR 0 3
30646: PUSH
30647: LD_INT 0
30649: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30650: LD_INT 35
30652: PPUSH
30653: CALL_OW 67
// p := p + 1 ;
30657: LD_ADDR_VAR 0 3
30661: PUSH
30662: LD_VAR 0 3
30666: PUSH
30667: LD_INT 1
30669: PLUS
30670: ST_TO_ADDR
// for i in tmp do
30671: LD_ADDR_VAR 0 1
30675: PUSH
30676: LD_VAR 0 2
30680: PUSH
30681: FOR_IN
30682: IFFALSE 30713
// if GetLives ( i ) < 1000 then
30684: LD_VAR 0 1
30688: PPUSH
30689: CALL_OW 256
30693: PUSH
30694: LD_INT 1000
30696: LESS
30697: IFFALSE 30711
// SetLives ( i , 1000 ) ;
30699: LD_VAR 0 1
30703: PPUSH
30704: LD_INT 1000
30706: PPUSH
30707: CALL_OW 234
30711: GO 30681
30713: POP
30714: POP
// until p > 20 ;
30715: LD_VAR 0 3
30719: PUSH
30720: LD_INT 20
30722: GREATER
30723: IFFALSE 30650
// end ;
30725: PPOPN 3
30727: END
// every 0 0$1 trigger StreamModeActive and sTime do
30728: LD_EXP 74
30732: PUSH
30733: LD_EXP 125
30737: AND
30738: IFFALSE 30773
30740: GO 30742
30742: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30743: LD_INT 28
30745: PPUSH
30746: LD_OWVAR 2
30750: PPUSH
30751: LD_INT 2
30753: PPUSH
30754: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30758: LD_INT 30
30760: PPUSH
30761: LD_OWVAR 2
30765: PPUSH
30766: LD_INT 2
30768: PPUSH
30769: CALL_OW 322
// end ;
30773: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30774: LD_EXP 74
30778: PUSH
30779: LD_EXP 126
30783: AND
30784: IFFALSE 30905
30786: GO 30788
30788: DISABLE
30789: LD_INT 0
30791: PPUSH
30792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30793: LD_ADDR_VAR 0 2
30797: PUSH
30798: LD_INT 22
30800: PUSH
30801: LD_OWVAR 2
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 21
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 3
30822: PUSH
30823: LD_INT 23
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: PPUSH
30842: CALL_OW 69
30846: ST_TO_ADDR
// if not tmp then
30847: LD_VAR 0 2
30851: NOT
30852: IFFALSE 30856
// exit ;
30854: GO 30905
// for i in tmp do
30856: LD_ADDR_VAR 0 1
30860: PUSH
30861: LD_VAR 0 2
30865: PUSH
30866: FOR_IN
30867: IFFALSE 30903
// begin if Crawls ( i ) then
30869: LD_VAR 0 1
30873: PPUSH
30874: CALL_OW 318
30878: IFFALSE 30889
// ComWalk ( i ) ;
30880: LD_VAR 0 1
30884: PPUSH
30885: CALL_OW 138
// SetClass ( i , 2 ) ;
30889: LD_VAR 0 1
30893: PPUSH
30894: LD_INT 2
30896: PPUSH
30897: CALL_OW 336
// end ;
30901: GO 30866
30903: POP
30904: POP
// end ;
30905: PPOPN 2
30907: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30908: LD_EXP 74
30912: PUSH
30913: LD_EXP 127
30917: AND
30918: IFFALSE 31206
30920: GO 30922
30922: DISABLE
30923: LD_INT 0
30925: PPUSH
30926: PPUSH
30927: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30928: LD_OWVAR 2
30932: PPUSH
30933: LD_INT 9
30935: PPUSH
30936: LD_INT 1
30938: PPUSH
30939: LD_INT 1
30941: PPUSH
30942: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30946: LD_INT 9
30948: PPUSH
30949: LD_OWVAR 2
30953: PPUSH
30954: CALL_OW 343
// uc_side := 9 ;
30958: LD_ADDR_OWVAR 20
30962: PUSH
30963: LD_INT 9
30965: ST_TO_ADDR
// uc_nation := 2 ;
30966: LD_ADDR_OWVAR 21
30970: PUSH
30971: LD_INT 2
30973: ST_TO_ADDR
// hc_name := Dark Warrior ;
30974: LD_ADDR_OWVAR 26
30978: PUSH
30979: LD_STRING Dark Warrior
30981: ST_TO_ADDR
// hc_gallery :=  ;
30982: LD_ADDR_OWVAR 33
30986: PUSH
30987: LD_STRING 
30989: ST_TO_ADDR
// hc_noskilllimit := true ;
30990: LD_ADDR_OWVAR 76
30994: PUSH
30995: LD_INT 1
30997: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30998: LD_ADDR_OWVAR 31
31002: PUSH
31003: LD_INT 30
31005: PUSH
31006: LD_INT 30
31008: PUSH
31009: LD_INT 30
31011: PUSH
31012: LD_INT 30
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: ST_TO_ADDR
// un := CreateHuman ;
31021: LD_ADDR_VAR 0 3
31025: PUSH
31026: CALL_OW 44
31030: ST_TO_ADDR
// hc_noskilllimit := false ;
31031: LD_ADDR_OWVAR 76
31035: PUSH
31036: LD_INT 0
31038: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31039: LD_VAR 0 3
31043: PPUSH
31044: LD_INT 1
31046: PPUSH
31047: CALL_OW 51
// ToLua ( playRanger() ) ;
31051: LD_STRING playRanger()
31053: PPUSH
31054: CALL_OW 559
// p := 0 ;
31058: LD_ADDR_VAR 0 2
31062: PUSH
31063: LD_INT 0
31065: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31066: LD_INT 35
31068: PPUSH
31069: CALL_OW 67
// p := p + 1 ;
31073: LD_ADDR_VAR 0 2
31077: PUSH
31078: LD_VAR 0 2
31082: PUSH
31083: LD_INT 1
31085: PLUS
31086: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31087: LD_VAR 0 3
31091: PPUSH
31092: CALL_OW 256
31096: PUSH
31097: LD_INT 1000
31099: LESS
31100: IFFALSE 31114
// SetLives ( un , 1000 ) ;
31102: LD_VAR 0 3
31106: PPUSH
31107: LD_INT 1000
31109: PPUSH
31110: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31114: LD_VAR 0 3
31118: PPUSH
31119: LD_INT 81
31121: PUSH
31122: LD_OWVAR 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 91
31133: PUSH
31134: LD_VAR 0 3
31138: PUSH
31139: LD_INT 30
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PPUSH
31151: CALL_OW 69
31155: PPUSH
31156: LD_VAR 0 3
31160: PPUSH
31161: CALL_OW 74
31165: PPUSH
31166: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31170: LD_VAR 0 2
31174: PUSH
31175: LD_INT 80
31177: GREATER
31178: PUSH
31179: LD_VAR 0 3
31183: PPUSH
31184: CALL_OW 301
31188: OR
31189: IFFALSE 31066
// if un then
31191: LD_VAR 0 3
31195: IFFALSE 31206
// RemoveUnit ( un ) ;
31197: LD_VAR 0 3
31201: PPUSH
31202: CALL_OW 64
// end ;
31206: PPOPN 3
31208: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31209: LD_EXP 128
31213: IFFALSE 31329
31215: GO 31217
31217: DISABLE
31218: LD_INT 0
31220: PPUSH
31221: PPUSH
31222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31223: LD_ADDR_VAR 0 2
31227: PUSH
31228: LD_INT 81
31230: PUSH
31231: LD_OWVAR 2
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 21
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PPUSH
31254: CALL_OW 69
31258: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31259: LD_STRING playComputer()
31261: PPUSH
31262: CALL_OW 559
// if not tmp then
31266: LD_VAR 0 2
31270: NOT
31271: IFFALSE 31275
// exit ;
31273: GO 31329
// for i in tmp do
31275: LD_ADDR_VAR 0 1
31279: PUSH
31280: LD_VAR 0 2
31284: PUSH
31285: FOR_IN
31286: IFFALSE 31327
// for j := 1 to 4 do
31288: LD_ADDR_VAR 0 3
31292: PUSH
31293: DOUBLE
31294: LD_INT 1
31296: DEC
31297: ST_TO_ADDR
31298: LD_INT 4
31300: PUSH
31301: FOR_TO
31302: IFFALSE 31323
// SetSkill ( i , j , 10 ) ;
31304: LD_VAR 0 1
31308: PPUSH
31309: LD_VAR 0 3
31313: PPUSH
31314: LD_INT 10
31316: PPUSH
31317: CALL_OW 237
31321: GO 31301
31323: POP
31324: POP
31325: GO 31285
31327: POP
31328: POP
// end ;
31329: PPOPN 3
31331: END
// every 0 0$1 trigger s30 do var i , tmp ;
31332: LD_EXP 129
31336: IFFALSE 31405
31338: GO 31340
31340: DISABLE
31341: LD_INT 0
31343: PPUSH
31344: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31345: LD_ADDR_VAR 0 2
31349: PUSH
31350: LD_INT 22
31352: PUSH
31353: LD_OWVAR 2
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PPUSH
31362: CALL_OW 69
31366: ST_TO_ADDR
// if not tmp then
31367: LD_VAR 0 2
31371: NOT
31372: IFFALSE 31376
// exit ;
31374: GO 31405
// for i in tmp do
31376: LD_ADDR_VAR 0 1
31380: PUSH
31381: LD_VAR 0 2
31385: PUSH
31386: FOR_IN
31387: IFFALSE 31403
// SetLives ( i , 300 ) ;
31389: LD_VAR 0 1
31393: PPUSH
31394: LD_INT 300
31396: PPUSH
31397: CALL_OW 234
31401: GO 31386
31403: POP
31404: POP
// end ;
31405: PPOPN 2
31407: END
// every 0 0$1 trigger s60 do var i , tmp ;
31408: LD_EXP 130
31412: IFFALSE 31481
31414: GO 31416
31416: DISABLE
31417: LD_INT 0
31419: PPUSH
31420: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31421: LD_ADDR_VAR 0 2
31425: PUSH
31426: LD_INT 22
31428: PUSH
31429: LD_OWVAR 2
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PPUSH
31438: CALL_OW 69
31442: ST_TO_ADDR
// if not tmp then
31443: LD_VAR 0 2
31447: NOT
31448: IFFALSE 31452
// exit ;
31450: GO 31481
// for i in tmp do
31452: LD_ADDR_VAR 0 1
31456: PUSH
31457: LD_VAR 0 2
31461: PUSH
31462: FOR_IN
31463: IFFALSE 31479
// SetLives ( i , 600 ) ;
31465: LD_VAR 0 1
31469: PPUSH
31470: LD_INT 600
31472: PPUSH
31473: CALL_OW 234
31477: GO 31462
31479: POP
31480: POP
// end ;
31481: PPOPN 2
31483: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31484: LD_INT 0
31486: PPUSH
// case cmd of 301 :
31487: LD_VAR 0 1
31491: PUSH
31492: LD_INT 301
31494: DOUBLE
31495: EQUAL
31496: IFTRUE 31500
31498: GO 31532
31500: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31501: LD_VAR 0 6
31505: PPUSH
31506: LD_VAR 0 7
31510: PPUSH
31511: LD_VAR 0 8
31515: PPUSH
31516: LD_VAR 0 4
31520: PPUSH
31521: LD_VAR 0 5
31525: PPUSH
31526: CALL 32733 0 5
31530: GO 31653
31532: LD_INT 302
31534: DOUBLE
31535: EQUAL
31536: IFTRUE 31540
31538: GO 31577
31540: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31541: LD_VAR 0 6
31545: PPUSH
31546: LD_VAR 0 7
31550: PPUSH
31551: LD_VAR 0 8
31555: PPUSH
31556: LD_VAR 0 9
31560: PPUSH
31561: LD_VAR 0 4
31565: PPUSH
31566: LD_VAR 0 5
31570: PPUSH
31571: CALL 32824 0 6
31575: GO 31653
31577: LD_INT 303
31579: DOUBLE
31580: EQUAL
31581: IFTRUE 31585
31583: GO 31622
31585: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31586: LD_VAR 0 6
31590: PPUSH
31591: LD_VAR 0 7
31595: PPUSH
31596: LD_VAR 0 8
31600: PPUSH
31601: LD_VAR 0 9
31605: PPUSH
31606: LD_VAR 0 4
31610: PPUSH
31611: LD_VAR 0 5
31615: PPUSH
31616: CALL 31658 0 6
31620: GO 31653
31622: LD_INT 304
31624: DOUBLE
31625: EQUAL
31626: IFTRUE 31630
31628: GO 31652
31630: POP
// hHackTeleport ( unit , x , y ) ; end ;
31631: LD_VAR 0 2
31635: PPUSH
31636: LD_VAR 0 4
31640: PPUSH
31641: LD_VAR 0 5
31645: PPUSH
31646: CALL 33417 0 3
31650: GO 31653
31652: POP
// end ;
31653: LD_VAR 0 12
31657: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31658: LD_INT 0
31660: PPUSH
31661: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31662: LD_VAR 0 1
31666: PUSH
31667: LD_INT 1
31669: LESS
31670: PUSH
31671: LD_VAR 0 1
31675: PUSH
31676: LD_INT 3
31678: GREATER
31679: OR
31680: PUSH
31681: LD_VAR 0 5
31685: PPUSH
31686: LD_VAR 0 6
31690: PPUSH
31691: CALL_OW 428
31695: OR
31696: IFFALSE 31700
// exit ;
31698: GO 32420
// uc_side := your_side ;
31700: LD_ADDR_OWVAR 20
31704: PUSH
31705: LD_OWVAR 2
31709: ST_TO_ADDR
// uc_nation := nation ;
31710: LD_ADDR_OWVAR 21
31714: PUSH
31715: LD_VAR 0 1
31719: ST_TO_ADDR
// bc_level = 1 ;
31720: LD_ADDR_OWVAR 43
31724: PUSH
31725: LD_INT 1
31727: ST_TO_ADDR
// case btype of 1 :
31728: LD_VAR 0 2
31732: PUSH
31733: LD_INT 1
31735: DOUBLE
31736: EQUAL
31737: IFTRUE 31741
31739: GO 31752
31741: POP
// bc_type := b_depot ; 2 :
31742: LD_ADDR_OWVAR 42
31746: PUSH
31747: LD_INT 0
31749: ST_TO_ADDR
31750: GO 32364
31752: LD_INT 2
31754: DOUBLE
31755: EQUAL
31756: IFTRUE 31760
31758: GO 31771
31760: POP
// bc_type := b_warehouse ; 3 :
31761: LD_ADDR_OWVAR 42
31765: PUSH
31766: LD_INT 1
31768: ST_TO_ADDR
31769: GO 32364
31771: LD_INT 3
31773: DOUBLE
31774: EQUAL
31775: IFTRUE 31779
31777: GO 31790
31779: POP
// bc_type := b_lab ; 4 .. 9 :
31780: LD_ADDR_OWVAR 42
31784: PUSH
31785: LD_INT 6
31787: ST_TO_ADDR
31788: GO 32364
31790: LD_INT 4
31792: DOUBLE
31793: GREATEREQUAL
31794: IFFALSE 31802
31796: LD_INT 9
31798: DOUBLE
31799: LESSEQUAL
31800: IFTRUE 31804
31802: GO 31856
31804: POP
// begin bc_type := b_lab_half ;
31805: LD_ADDR_OWVAR 42
31809: PUSH
31810: LD_INT 7
31812: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31813: LD_ADDR_OWVAR 44
31817: PUSH
31818: LD_INT 10
31820: PUSH
31821: LD_INT 11
31823: PUSH
31824: LD_INT 12
31826: PUSH
31827: LD_INT 15
31829: PUSH
31830: LD_INT 14
31832: PUSH
31833: LD_INT 13
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: PUSH
31844: LD_VAR 0 2
31848: PUSH
31849: LD_INT 3
31851: MINUS
31852: ARRAY
31853: ST_TO_ADDR
// end ; 10 .. 13 :
31854: GO 32364
31856: LD_INT 10
31858: DOUBLE
31859: GREATEREQUAL
31860: IFFALSE 31868
31862: LD_INT 13
31864: DOUBLE
31865: LESSEQUAL
31866: IFTRUE 31870
31868: GO 31947
31870: POP
// begin bc_type := b_lab_full ;
31871: LD_ADDR_OWVAR 42
31875: PUSH
31876: LD_INT 8
31878: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31879: LD_ADDR_OWVAR 44
31883: PUSH
31884: LD_INT 10
31886: PUSH
31887: LD_INT 12
31889: PUSH
31890: LD_INT 14
31892: PUSH
31893: LD_INT 13
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: PUSH
31902: LD_VAR 0 2
31906: PUSH
31907: LD_INT 9
31909: MINUS
31910: ARRAY
31911: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31912: LD_ADDR_OWVAR 45
31916: PUSH
31917: LD_INT 11
31919: PUSH
31920: LD_INT 15
31922: PUSH
31923: LD_INT 12
31925: PUSH
31926: LD_INT 15
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: PUSH
31935: LD_VAR 0 2
31939: PUSH
31940: LD_INT 9
31942: MINUS
31943: ARRAY
31944: ST_TO_ADDR
// end ; 14 :
31945: GO 32364
31947: LD_INT 14
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 31966
31955: POP
// bc_type := b_workshop ; 15 :
31956: LD_ADDR_OWVAR 42
31960: PUSH
31961: LD_INT 2
31963: ST_TO_ADDR
31964: GO 32364
31966: LD_INT 15
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 31985
31974: POP
// bc_type := b_factory ; 16 :
31975: LD_ADDR_OWVAR 42
31979: PUSH
31980: LD_INT 3
31982: ST_TO_ADDR
31983: GO 32364
31985: LD_INT 16
31987: DOUBLE
31988: EQUAL
31989: IFTRUE 31993
31991: GO 32004
31993: POP
// bc_type := b_ext_gun ; 17 :
31994: LD_ADDR_OWVAR 42
31998: PUSH
31999: LD_INT 17
32001: ST_TO_ADDR
32002: GO 32364
32004: LD_INT 17
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32040
32012: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32013: LD_ADDR_OWVAR 42
32017: PUSH
32018: LD_INT 19
32020: PUSH
32021: LD_INT 23
32023: PUSH
32024: LD_INT 19
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: LIST
32031: PUSH
32032: LD_VAR 0 1
32036: ARRAY
32037: ST_TO_ADDR
32038: GO 32364
32040: LD_INT 18
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32059
32048: POP
// bc_type := b_ext_radar ; 19 :
32049: LD_ADDR_OWVAR 42
32053: PUSH
32054: LD_INT 20
32056: ST_TO_ADDR
32057: GO 32364
32059: LD_INT 19
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32067
32065: GO 32078
32067: POP
// bc_type := b_ext_radio ; 20 :
32068: LD_ADDR_OWVAR 42
32072: PUSH
32073: LD_INT 22
32075: ST_TO_ADDR
32076: GO 32364
32078: LD_INT 20
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32097
32086: POP
// bc_type := b_ext_siberium ; 21 :
32087: LD_ADDR_OWVAR 42
32091: PUSH
32092: LD_INT 21
32094: ST_TO_ADDR
32095: GO 32364
32097: LD_INT 21
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32116
32105: POP
// bc_type := b_ext_computer ; 22 :
32106: LD_ADDR_OWVAR 42
32110: PUSH
32111: LD_INT 24
32113: ST_TO_ADDR
32114: GO 32364
32116: LD_INT 22
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32135
32124: POP
// bc_type := b_ext_track ; 23 :
32125: LD_ADDR_OWVAR 42
32129: PUSH
32130: LD_INT 16
32132: ST_TO_ADDR
32133: GO 32364
32135: LD_INT 23
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32154
32143: POP
// bc_type := b_ext_laser ; 24 :
32144: LD_ADDR_OWVAR 42
32148: PUSH
32149: LD_INT 25
32151: ST_TO_ADDR
32152: GO 32364
32154: LD_INT 24
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32173
32162: POP
// bc_type := b_control_tower ; 25 :
32163: LD_ADDR_OWVAR 42
32167: PUSH
32168: LD_INT 36
32170: ST_TO_ADDR
32171: GO 32364
32173: LD_INT 25
32175: DOUBLE
32176: EQUAL
32177: IFTRUE 32181
32179: GO 32192
32181: POP
// bc_type := b_breastwork ; 26 :
32182: LD_ADDR_OWVAR 42
32186: PUSH
32187: LD_INT 31
32189: ST_TO_ADDR
32190: GO 32364
32192: LD_INT 26
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32211
32200: POP
// bc_type := b_bunker ; 27 :
32201: LD_ADDR_OWVAR 42
32205: PUSH
32206: LD_INT 32
32208: ST_TO_ADDR
32209: GO 32364
32211: LD_INT 27
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32230
32219: POP
// bc_type := b_turret ; 28 :
32220: LD_ADDR_OWVAR 42
32224: PUSH
32225: LD_INT 33
32227: ST_TO_ADDR
32228: GO 32364
32230: LD_INT 28
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32249
32238: POP
// bc_type := b_armoury ; 29 :
32239: LD_ADDR_OWVAR 42
32243: PUSH
32244: LD_INT 4
32246: ST_TO_ADDR
32247: GO 32364
32249: LD_INT 29
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32268
32257: POP
// bc_type := b_barracks ; 30 :
32258: LD_ADDR_OWVAR 42
32262: PUSH
32263: LD_INT 5
32265: ST_TO_ADDR
32266: GO 32364
32268: LD_INT 30
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32287
32276: POP
// bc_type := b_solar_power ; 31 :
32277: LD_ADDR_OWVAR 42
32281: PUSH
32282: LD_INT 27
32284: ST_TO_ADDR
32285: GO 32364
32287: LD_INT 31
32289: DOUBLE
32290: EQUAL
32291: IFTRUE 32295
32293: GO 32306
32295: POP
// bc_type := b_oil_power ; 32 :
32296: LD_ADDR_OWVAR 42
32300: PUSH
32301: LD_INT 26
32303: ST_TO_ADDR
32304: GO 32364
32306: LD_INT 32
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32314
32312: GO 32325
32314: POP
// bc_type := b_siberite_power ; 33 :
32315: LD_ADDR_OWVAR 42
32319: PUSH
32320: LD_INT 28
32322: ST_TO_ADDR
32323: GO 32364
32325: LD_INT 33
32327: DOUBLE
32328: EQUAL
32329: IFTRUE 32333
32331: GO 32344
32333: POP
// bc_type := b_oil_mine ; 34 :
32334: LD_ADDR_OWVAR 42
32338: PUSH
32339: LD_INT 29
32341: ST_TO_ADDR
32342: GO 32364
32344: LD_INT 34
32346: DOUBLE
32347: EQUAL
32348: IFTRUE 32352
32350: GO 32363
32352: POP
// bc_type := b_siberite_mine ; end ;
32353: LD_ADDR_OWVAR 42
32357: PUSH
32358: LD_INT 30
32360: ST_TO_ADDR
32361: GO 32364
32363: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32364: LD_ADDR_VAR 0 8
32368: PUSH
32369: LD_VAR 0 5
32373: PPUSH
32374: LD_VAR 0 6
32378: PPUSH
32379: LD_VAR 0 3
32383: PPUSH
32384: CALL_OW 47
32388: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32389: LD_OWVAR 42
32393: PUSH
32394: LD_INT 32
32396: PUSH
32397: LD_INT 33
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: IN
32404: IFFALSE 32420
// PlaceWeaponTurret ( b , weapon ) ;
32406: LD_VAR 0 8
32410: PPUSH
32411: LD_VAR 0 4
32415: PPUSH
32416: CALL_OW 431
// end ;
32420: LD_VAR 0 7
32424: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32425: LD_INT 0
32427: PPUSH
32428: PPUSH
32429: PPUSH
32430: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32431: LD_ADDR_VAR 0 4
32435: PUSH
32436: LD_INT 22
32438: PUSH
32439: LD_OWVAR 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 30
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 30
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PPUSH
32480: CALL_OW 69
32484: ST_TO_ADDR
// if not tmp then
32485: LD_VAR 0 4
32489: NOT
32490: IFFALSE 32494
// exit ;
32492: GO 32553
// for i in tmp do
32494: LD_ADDR_VAR 0 2
32498: PUSH
32499: LD_VAR 0 4
32503: PUSH
32504: FOR_IN
32505: IFFALSE 32551
// for j = 1 to 3 do
32507: LD_ADDR_VAR 0 3
32511: PUSH
32512: DOUBLE
32513: LD_INT 1
32515: DEC
32516: ST_TO_ADDR
32517: LD_INT 3
32519: PUSH
32520: FOR_TO
32521: IFFALSE 32547
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32523: LD_VAR 0 2
32527: PPUSH
32528: CALL_OW 274
32532: PPUSH
32533: LD_VAR 0 3
32537: PPUSH
32538: LD_INT 99999
32540: PPUSH
32541: CALL_OW 277
32545: GO 32520
32547: POP
32548: POP
32549: GO 32504
32551: POP
32552: POP
// end ;
32553: LD_VAR 0 1
32557: RET
// export function hHackSetLevel10 ; var i , j ; begin
32558: LD_INT 0
32560: PPUSH
32561: PPUSH
32562: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32563: LD_ADDR_VAR 0 2
32567: PUSH
32568: LD_INT 21
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 69
32582: PUSH
32583: FOR_IN
32584: IFFALSE 32636
// if IsSelected ( i ) then
32586: LD_VAR 0 2
32590: PPUSH
32591: CALL_OW 306
32595: IFFALSE 32634
// begin for j := 1 to 4 do
32597: LD_ADDR_VAR 0 3
32601: PUSH
32602: DOUBLE
32603: LD_INT 1
32605: DEC
32606: ST_TO_ADDR
32607: LD_INT 4
32609: PUSH
32610: FOR_TO
32611: IFFALSE 32632
// SetSkill ( i , j , 10 ) ;
32613: LD_VAR 0 2
32617: PPUSH
32618: LD_VAR 0 3
32622: PPUSH
32623: LD_INT 10
32625: PPUSH
32626: CALL_OW 237
32630: GO 32610
32632: POP
32633: POP
// end ;
32634: GO 32583
32636: POP
32637: POP
// end ;
32638: LD_VAR 0 1
32642: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32643: LD_INT 0
32645: PPUSH
32646: PPUSH
32647: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32648: LD_ADDR_VAR 0 2
32652: PUSH
32653: LD_INT 22
32655: PUSH
32656: LD_OWVAR 2
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 21
32667: PUSH
32668: LD_INT 1
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PPUSH
32679: CALL_OW 69
32683: PUSH
32684: FOR_IN
32685: IFFALSE 32726
// begin for j := 1 to 4 do
32687: LD_ADDR_VAR 0 3
32691: PUSH
32692: DOUBLE
32693: LD_INT 1
32695: DEC
32696: ST_TO_ADDR
32697: LD_INT 4
32699: PUSH
32700: FOR_TO
32701: IFFALSE 32722
// SetSkill ( i , j , 10 ) ;
32703: LD_VAR 0 2
32707: PPUSH
32708: LD_VAR 0 3
32712: PPUSH
32713: LD_INT 10
32715: PPUSH
32716: CALL_OW 237
32720: GO 32700
32722: POP
32723: POP
// end ;
32724: GO 32684
32726: POP
32727: POP
// end ;
32728: LD_VAR 0 1
32732: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32733: LD_INT 0
32735: PPUSH
// uc_side := your_side ;
32736: LD_ADDR_OWVAR 20
32740: PUSH
32741: LD_OWVAR 2
32745: ST_TO_ADDR
// uc_nation := nation ;
32746: LD_ADDR_OWVAR 21
32750: PUSH
32751: LD_VAR 0 1
32755: ST_TO_ADDR
// InitHc ;
32756: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32760: LD_INT 0
32762: PPUSH
32763: LD_VAR 0 2
32767: PPUSH
32768: LD_VAR 0 3
32772: PPUSH
32773: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32777: LD_VAR 0 4
32781: PPUSH
32782: LD_VAR 0 5
32786: PPUSH
32787: CALL_OW 428
32791: PUSH
32792: LD_INT 0
32794: EQUAL
32795: IFFALSE 32819
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32797: CALL_OW 44
32801: PPUSH
32802: LD_VAR 0 4
32806: PPUSH
32807: LD_VAR 0 5
32811: PPUSH
32812: LD_INT 1
32814: PPUSH
32815: CALL_OW 48
// end ;
32819: LD_VAR 0 6
32823: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32824: LD_INT 0
32826: PPUSH
32827: PPUSH
// uc_side := your_side ;
32828: LD_ADDR_OWVAR 20
32832: PUSH
32833: LD_OWVAR 2
32837: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32838: LD_VAR 0 1
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 4
32854: PUSH
32855: LD_INT 5
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: IN
32865: IFFALSE 32877
// uc_nation := nation_american else
32867: LD_ADDR_OWVAR 21
32871: PUSH
32872: LD_INT 1
32874: ST_TO_ADDR
32875: GO 32920
// if chassis in [ 11 , 12 , 13 , 14 ] then
32877: LD_VAR 0 1
32881: PUSH
32882: LD_INT 11
32884: PUSH
32885: LD_INT 12
32887: PUSH
32888: LD_INT 13
32890: PUSH
32891: LD_INT 14
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: IN
32900: IFFALSE 32912
// uc_nation := nation_arabian else
32902: LD_ADDR_OWVAR 21
32906: PUSH
32907: LD_INT 2
32909: ST_TO_ADDR
32910: GO 32920
// uc_nation := nation_russian ;
32912: LD_ADDR_OWVAR 21
32916: PUSH
32917: LD_INT 3
32919: ST_TO_ADDR
// vc_chassis := chassis ;
32920: LD_ADDR_OWVAR 37
32924: PUSH
32925: LD_VAR 0 1
32929: ST_TO_ADDR
// vc_engine := engine ;
32930: LD_ADDR_OWVAR 39
32934: PUSH
32935: LD_VAR 0 2
32939: ST_TO_ADDR
// vc_control := control ;
32940: LD_ADDR_OWVAR 38
32944: PUSH
32945: LD_VAR 0 3
32949: ST_TO_ADDR
// vc_weapon := weapon ;
32950: LD_ADDR_OWVAR 40
32954: PUSH
32955: LD_VAR 0 4
32959: ST_TO_ADDR
// un := CreateVehicle ;
32960: LD_ADDR_VAR 0 8
32964: PUSH
32965: CALL_OW 45
32969: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32970: LD_VAR 0 8
32974: PPUSH
32975: LD_INT 0
32977: PPUSH
32978: LD_INT 5
32980: PPUSH
32981: CALL_OW 12
32985: PPUSH
32986: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32990: LD_VAR 0 8
32994: PPUSH
32995: LD_VAR 0 5
32999: PPUSH
33000: LD_VAR 0 6
33004: PPUSH
33005: LD_INT 1
33007: PPUSH
33008: CALL_OW 48
// end ;
33012: LD_VAR 0 7
33016: RET
// export hInvincible ; every 1 do
33017: GO 33019
33019: DISABLE
// hInvincible := [ ] ;
33020: LD_ADDR_EXP 131
33024: PUSH
33025: EMPTY
33026: ST_TO_ADDR
33027: END
// every 10 do var i ;
33028: GO 33030
33030: DISABLE
33031: LD_INT 0
33033: PPUSH
// begin enable ;
33034: ENABLE
// if not hInvincible then
33035: LD_EXP 131
33039: NOT
33040: IFFALSE 33044
// exit ;
33042: GO 33088
// for i in hInvincible do
33044: LD_ADDR_VAR 0 1
33048: PUSH
33049: LD_EXP 131
33053: PUSH
33054: FOR_IN
33055: IFFALSE 33086
// if GetLives ( i ) < 1000 then
33057: LD_VAR 0 1
33061: PPUSH
33062: CALL_OW 256
33066: PUSH
33067: LD_INT 1000
33069: LESS
33070: IFFALSE 33084
// SetLives ( i , 1000 ) ;
33072: LD_VAR 0 1
33076: PPUSH
33077: LD_INT 1000
33079: PPUSH
33080: CALL_OW 234
33084: GO 33054
33086: POP
33087: POP
// end ;
33088: PPOPN 1
33090: END
// export function hHackInvincible ; var i ; begin
33091: LD_INT 0
33093: PPUSH
33094: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33095: LD_ADDR_VAR 0 2
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: LD_INT 21
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 21
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: PPUSH
33128: CALL_OW 69
33132: PUSH
33133: FOR_IN
33134: IFFALSE 33195
// if IsSelected ( i ) then
33136: LD_VAR 0 2
33140: PPUSH
33141: CALL_OW 306
33145: IFFALSE 33193
// begin if i in hInvincible then
33147: LD_VAR 0 2
33151: PUSH
33152: LD_EXP 131
33156: IN
33157: IFFALSE 33177
// hInvincible := hInvincible diff i else
33159: LD_ADDR_EXP 131
33163: PUSH
33164: LD_EXP 131
33168: PUSH
33169: LD_VAR 0 2
33173: DIFF
33174: ST_TO_ADDR
33175: GO 33193
// hInvincible := hInvincible union i ;
33177: LD_ADDR_EXP 131
33181: PUSH
33182: LD_EXP 131
33186: PUSH
33187: LD_VAR 0 2
33191: UNION
33192: ST_TO_ADDR
// end ;
33193: GO 33133
33195: POP
33196: POP
// end ;
33197: LD_VAR 0 1
33201: RET
// export function hHackInvisible ; var i , j ; begin
33202: LD_INT 0
33204: PPUSH
33205: PPUSH
33206: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33207: LD_ADDR_VAR 0 2
33211: PUSH
33212: LD_INT 21
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PPUSH
33222: CALL_OW 69
33226: PUSH
33227: FOR_IN
33228: IFFALSE 33252
// if IsSelected ( i ) then
33230: LD_VAR 0 2
33234: PPUSH
33235: CALL_OW 306
33239: IFFALSE 33250
// ComForceInvisible ( i ) ;
33241: LD_VAR 0 2
33245: PPUSH
33246: CALL_OW 496
33250: GO 33227
33252: POP
33253: POP
// end ;
33254: LD_VAR 0 1
33258: RET
// export function hHackChangeYourSide ; begin
33259: LD_INT 0
33261: PPUSH
// if your_side = 8 then
33262: LD_OWVAR 2
33266: PUSH
33267: LD_INT 8
33269: EQUAL
33270: IFFALSE 33282
// your_side := 0 else
33272: LD_ADDR_OWVAR 2
33276: PUSH
33277: LD_INT 0
33279: ST_TO_ADDR
33280: GO 33296
// your_side := your_side + 1 ;
33282: LD_ADDR_OWVAR 2
33286: PUSH
33287: LD_OWVAR 2
33291: PUSH
33292: LD_INT 1
33294: PLUS
33295: ST_TO_ADDR
// end ;
33296: LD_VAR 0 1
33300: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33301: LD_INT 0
33303: PPUSH
33304: PPUSH
33305: PPUSH
// for i in all_units do
33306: LD_ADDR_VAR 0 2
33310: PUSH
33311: LD_OWVAR 3
33315: PUSH
33316: FOR_IN
33317: IFFALSE 33395
// if IsSelected ( i ) then
33319: LD_VAR 0 2
33323: PPUSH
33324: CALL_OW 306
33328: IFFALSE 33393
// begin j := GetSide ( i ) ;
33330: LD_ADDR_VAR 0 3
33334: PUSH
33335: LD_VAR 0 2
33339: PPUSH
33340: CALL_OW 255
33344: ST_TO_ADDR
// if j = 8 then
33345: LD_VAR 0 3
33349: PUSH
33350: LD_INT 8
33352: EQUAL
33353: IFFALSE 33365
// j := 0 else
33355: LD_ADDR_VAR 0 3
33359: PUSH
33360: LD_INT 0
33362: ST_TO_ADDR
33363: GO 33379
// j := j + 1 ;
33365: LD_ADDR_VAR 0 3
33369: PUSH
33370: LD_VAR 0 3
33374: PUSH
33375: LD_INT 1
33377: PLUS
33378: ST_TO_ADDR
// SetSide ( i , j ) ;
33379: LD_VAR 0 2
33383: PPUSH
33384: LD_VAR 0 3
33388: PPUSH
33389: CALL_OW 235
// end ;
33393: GO 33316
33395: POP
33396: POP
// end ;
33397: LD_VAR 0 1
33401: RET
// export function hHackFog ; begin
33402: LD_INT 0
33404: PPUSH
// FogOff ( true ) ;
33405: LD_INT 1
33407: PPUSH
33408: CALL_OW 344
// end ;
33412: LD_VAR 0 1
33416: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33417: LD_INT 0
33419: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33420: LD_VAR 0 1
33424: PPUSH
33425: LD_VAR 0 2
33429: PPUSH
33430: LD_VAR 0 3
33434: PPUSH
33435: LD_INT 1
33437: PPUSH
33438: LD_INT 1
33440: PPUSH
33441: CALL_OW 483
// CenterOnXY ( x , y ) ;
33445: LD_VAR 0 2
33449: PPUSH
33450: LD_VAR 0 3
33454: PPUSH
33455: CALL_OW 84
// end ; end_of_file end_of_file
33459: LD_VAR 0 4
33463: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33464: LD_INT 0
33466: PPUSH
33467: PPUSH
// if exist_mode then
33468: LD_VAR 0 2
33472: IFFALSE 33497
// unit := CreateCharacter ( prefix & ident ) else
33474: LD_ADDR_VAR 0 5
33478: PUSH
33479: LD_VAR 0 3
33483: PUSH
33484: LD_VAR 0 1
33488: STR
33489: PPUSH
33490: CALL_OW 34
33494: ST_TO_ADDR
33495: GO 33512
// unit := NewCharacter ( ident ) ;
33497: LD_ADDR_VAR 0 5
33501: PUSH
33502: LD_VAR 0 1
33506: PPUSH
33507: CALL_OW 25
33511: ST_TO_ADDR
// result := unit ;
33512: LD_ADDR_VAR 0 4
33516: PUSH
33517: LD_VAR 0 5
33521: ST_TO_ADDR
// end ;
33522: LD_VAR 0 4
33526: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33527: LD_INT 0
33529: PPUSH
33530: PPUSH
// if not side or not nation then
33531: LD_VAR 0 1
33535: NOT
33536: PUSH
33537: LD_VAR 0 2
33541: NOT
33542: OR
33543: IFFALSE 33547
// exit ;
33545: GO 34315
// case nation of nation_american :
33547: LD_VAR 0 2
33551: PUSH
33552: LD_INT 1
33554: DOUBLE
33555: EQUAL
33556: IFTRUE 33560
33558: GO 33774
33560: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33561: LD_ADDR_VAR 0 4
33565: PUSH
33566: LD_INT 35
33568: PUSH
33569: LD_INT 45
33571: PUSH
33572: LD_INT 46
33574: PUSH
33575: LD_INT 47
33577: PUSH
33578: LD_INT 82
33580: PUSH
33581: LD_INT 83
33583: PUSH
33584: LD_INT 84
33586: PUSH
33587: LD_INT 85
33589: PUSH
33590: LD_INT 86
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: LD_INT 2
33598: PUSH
33599: LD_INT 6
33601: PUSH
33602: LD_INT 15
33604: PUSH
33605: LD_INT 16
33607: PUSH
33608: LD_INT 7
33610: PUSH
33611: LD_INT 12
33613: PUSH
33614: LD_INT 13
33616: PUSH
33617: LD_INT 10
33619: PUSH
33620: LD_INT 14
33622: PUSH
33623: LD_INT 20
33625: PUSH
33626: LD_INT 21
33628: PUSH
33629: LD_INT 22
33631: PUSH
33632: LD_INT 25
33634: PUSH
33635: LD_INT 32
33637: PUSH
33638: LD_INT 27
33640: PUSH
33641: LD_INT 36
33643: PUSH
33644: LD_INT 69
33646: PUSH
33647: LD_INT 39
33649: PUSH
33650: LD_INT 34
33652: PUSH
33653: LD_INT 40
33655: PUSH
33656: LD_INT 48
33658: PUSH
33659: LD_INT 49
33661: PUSH
33662: LD_INT 50
33664: PUSH
33665: LD_INT 51
33667: PUSH
33668: LD_INT 52
33670: PUSH
33671: LD_INT 53
33673: PUSH
33674: LD_INT 54
33676: PUSH
33677: LD_INT 55
33679: PUSH
33680: LD_INT 56
33682: PUSH
33683: LD_INT 57
33685: PUSH
33686: LD_INT 58
33688: PUSH
33689: LD_INT 59
33691: PUSH
33692: LD_INT 60
33694: PUSH
33695: LD_INT 61
33697: PUSH
33698: LD_INT 62
33700: PUSH
33701: LD_INT 80
33703: PUSH
33704: LD_INT 82
33706: PUSH
33707: LD_INT 83
33709: PUSH
33710: LD_INT 84
33712: PUSH
33713: LD_INT 85
33715: PUSH
33716: LD_INT 86
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
33772: GO 34239
33774: LD_INT 2
33776: DOUBLE
33777: EQUAL
33778: IFTRUE 33782
33780: GO 34008
33782: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33783: LD_ADDR_VAR 0 4
33787: PUSH
33788: LD_INT 35
33790: PUSH
33791: LD_INT 45
33793: PUSH
33794: LD_INT 46
33796: PUSH
33797: LD_INT 47
33799: PUSH
33800: LD_INT 82
33802: PUSH
33803: LD_INT 83
33805: PUSH
33806: LD_INT 84
33808: PUSH
33809: LD_INT 85
33811: PUSH
33812: LD_INT 87
33814: PUSH
33815: LD_INT 70
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: LD_INT 11
33823: PUSH
33824: LD_INT 3
33826: PUSH
33827: LD_INT 4
33829: PUSH
33830: LD_INT 5
33832: PUSH
33833: LD_INT 6
33835: PUSH
33836: LD_INT 15
33838: PUSH
33839: LD_INT 18
33841: PUSH
33842: LD_INT 7
33844: PUSH
33845: LD_INT 17
33847: PUSH
33848: LD_INT 8
33850: PUSH
33851: LD_INT 20
33853: PUSH
33854: LD_INT 21
33856: PUSH
33857: LD_INT 22
33859: PUSH
33860: LD_INT 72
33862: PUSH
33863: LD_INT 26
33865: PUSH
33866: LD_INT 69
33868: PUSH
33869: LD_INT 39
33871: PUSH
33872: LD_INT 40
33874: PUSH
33875: LD_INT 41
33877: PUSH
33878: LD_INT 42
33880: PUSH
33881: LD_INT 43
33883: PUSH
33884: LD_INT 48
33886: PUSH
33887: LD_INT 49
33889: PUSH
33890: LD_INT 50
33892: PUSH
33893: LD_INT 51
33895: PUSH
33896: LD_INT 52
33898: PUSH
33899: LD_INT 53
33901: PUSH
33902: LD_INT 54
33904: PUSH
33905: LD_INT 55
33907: PUSH
33908: LD_INT 56
33910: PUSH
33911: LD_INT 60
33913: PUSH
33914: LD_INT 61
33916: PUSH
33917: LD_INT 62
33919: PUSH
33920: LD_INT 66
33922: PUSH
33923: LD_INT 67
33925: PUSH
33926: LD_INT 68
33928: PUSH
33929: LD_INT 81
33931: PUSH
33932: LD_INT 82
33934: PUSH
33935: LD_INT 83
33937: PUSH
33938: LD_INT 84
33940: PUSH
33941: LD_INT 85
33943: PUSH
33944: LD_INT 87
33946: PUSH
33947: LD_INT 88
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
34006: GO 34239
34008: LD_INT 3
34010: DOUBLE
34011: EQUAL
34012: IFTRUE 34016
34014: GO 34238
34016: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34017: LD_ADDR_VAR 0 4
34021: PUSH
34022: LD_INT 46
34024: PUSH
34025: LD_INT 47
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 82
34036: PUSH
34037: LD_INT 83
34039: PUSH
34040: LD_INT 84
34042: PUSH
34043: LD_INT 85
34045: PUSH
34046: LD_INT 86
34048: PUSH
34049: LD_INT 11
34051: PUSH
34052: LD_INT 9
34054: PUSH
34055: LD_INT 20
34057: PUSH
34058: LD_INT 19
34060: PUSH
34061: LD_INT 21
34063: PUSH
34064: LD_INT 24
34066: PUSH
34067: LD_INT 22
34069: PUSH
34070: LD_INT 25
34072: PUSH
34073: LD_INT 28
34075: PUSH
34076: LD_INT 29
34078: PUSH
34079: LD_INT 30
34081: PUSH
34082: LD_INT 31
34084: PUSH
34085: LD_INT 37
34087: PUSH
34088: LD_INT 38
34090: PUSH
34091: LD_INT 32
34093: PUSH
34094: LD_INT 27
34096: PUSH
34097: LD_INT 33
34099: PUSH
34100: LD_INT 69
34102: PUSH
34103: LD_INT 39
34105: PUSH
34106: LD_INT 34
34108: PUSH
34109: LD_INT 40
34111: PUSH
34112: LD_INT 71
34114: PUSH
34115: LD_INT 23
34117: PUSH
34118: LD_INT 44
34120: PUSH
34121: LD_INT 48
34123: PUSH
34124: LD_INT 49
34126: PUSH
34127: LD_INT 50
34129: PUSH
34130: LD_INT 51
34132: PUSH
34133: LD_INT 52
34135: PUSH
34136: LD_INT 53
34138: PUSH
34139: LD_INT 54
34141: PUSH
34142: LD_INT 55
34144: PUSH
34145: LD_INT 56
34147: PUSH
34148: LD_INT 57
34150: PUSH
34151: LD_INT 58
34153: PUSH
34154: LD_INT 59
34156: PUSH
34157: LD_INT 63
34159: PUSH
34160: LD_INT 64
34162: PUSH
34163: LD_INT 65
34165: PUSH
34166: LD_INT 82
34168: PUSH
34169: LD_INT 83
34171: PUSH
34172: LD_INT 84
34174: PUSH
34175: LD_INT 85
34177: PUSH
34178: LD_INT 86
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: ST_TO_ADDR
34236: GO 34239
34238: POP
// if state > - 1 and state < 3 then
34239: LD_VAR 0 3
34243: PUSH
34244: LD_INT 1
34246: NEG
34247: GREATER
34248: PUSH
34249: LD_VAR 0 3
34253: PUSH
34254: LD_INT 3
34256: LESS
34257: AND
34258: IFFALSE 34315
// for i in result do
34260: LD_ADDR_VAR 0 5
34264: PUSH
34265: LD_VAR 0 4
34269: PUSH
34270: FOR_IN
34271: IFFALSE 34313
// if GetTech ( i , side ) <> state then
34273: LD_VAR 0 5
34277: PPUSH
34278: LD_VAR 0 1
34282: PPUSH
34283: CALL_OW 321
34287: PUSH
34288: LD_VAR 0 3
34292: NONEQUAL
34293: IFFALSE 34311
// result := result diff i ;
34295: LD_ADDR_VAR 0 4
34299: PUSH
34300: LD_VAR 0 4
34304: PUSH
34305: LD_VAR 0 5
34309: DIFF
34310: ST_TO_ADDR
34311: GO 34270
34313: POP
34314: POP
// end ;
34315: LD_VAR 0 4
34319: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34320: LD_INT 0
34322: PPUSH
34323: PPUSH
34324: PPUSH
// result := true ;
34325: LD_ADDR_VAR 0 3
34329: PUSH
34330: LD_INT 1
34332: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34333: LD_ADDR_VAR 0 5
34337: PUSH
34338: LD_VAR 0 2
34342: PPUSH
34343: CALL_OW 480
34347: ST_TO_ADDR
// if not tmp then
34348: LD_VAR 0 5
34352: NOT
34353: IFFALSE 34357
// exit ;
34355: GO 34406
// for i in tmp do
34357: LD_ADDR_VAR 0 4
34361: PUSH
34362: LD_VAR 0 5
34366: PUSH
34367: FOR_IN
34368: IFFALSE 34404
// if GetTech ( i , side ) <> state_researched then
34370: LD_VAR 0 4
34374: PPUSH
34375: LD_VAR 0 1
34379: PPUSH
34380: CALL_OW 321
34384: PUSH
34385: LD_INT 2
34387: NONEQUAL
34388: IFFALSE 34402
// begin result := false ;
34390: LD_ADDR_VAR 0 3
34394: PUSH
34395: LD_INT 0
34397: ST_TO_ADDR
// exit ;
34398: POP
34399: POP
34400: GO 34406
// end ;
34402: GO 34367
34404: POP
34405: POP
// end ;
34406: LD_VAR 0 3
34410: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34411: LD_INT 0
34413: PPUSH
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
34418: PPUSH
34419: PPUSH
34420: PPUSH
34421: PPUSH
34422: PPUSH
34423: PPUSH
34424: PPUSH
34425: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34426: LD_VAR 0 1
34430: NOT
34431: PUSH
34432: LD_VAR 0 1
34436: PPUSH
34437: CALL_OW 257
34441: PUSH
34442: LD_INT 9
34444: NONEQUAL
34445: OR
34446: IFFALSE 34450
// exit ;
34448: GO 35023
// side := GetSide ( unit ) ;
34450: LD_ADDR_VAR 0 9
34454: PUSH
34455: LD_VAR 0 1
34459: PPUSH
34460: CALL_OW 255
34464: ST_TO_ADDR
// tech_space := tech_spacanom ;
34465: LD_ADDR_VAR 0 12
34469: PUSH
34470: LD_INT 29
34472: ST_TO_ADDR
// tech_time := tech_taurad ;
34473: LD_ADDR_VAR 0 13
34477: PUSH
34478: LD_INT 28
34480: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34481: LD_ADDR_VAR 0 11
34485: PUSH
34486: LD_VAR 0 1
34490: PPUSH
34491: CALL_OW 310
34495: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34496: LD_VAR 0 11
34500: PPUSH
34501: CALL_OW 247
34505: PUSH
34506: LD_INT 2
34508: EQUAL
34509: IFFALSE 34513
// exit ;
34511: GO 35023
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34513: LD_ADDR_VAR 0 8
34517: PUSH
34518: LD_INT 81
34520: PUSH
34521: LD_VAR 0 9
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: LD_INT 21
34535: PUSH
34536: LD_INT 3
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PPUSH
34551: CALL_OW 69
34555: ST_TO_ADDR
// if not tmp then
34556: LD_VAR 0 8
34560: NOT
34561: IFFALSE 34565
// exit ;
34563: GO 35023
// if in_unit then
34565: LD_VAR 0 11
34569: IFFALSE 34593
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34571: LD_ADDR_VAR 0 10
34575: PUSH
34576: LD_VAR 0 8
34580: PPUSH
34581: LD_VAR 0 11
34585: PPUSH
34586: CALL_OW 74
34590: ST_TO_ADDR
34591: GO 34613
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34593: LD_ADDR_VAR 0 10
34597: PUSH
34598: LD_VAR 0 8
34602: PPUSH
34603: LD_VAR 0 1
34607: PPUSH
34608: CALL_OW 74
34612: ST_TO_ADDR
// if not enemy then
34613: LD_VAR 0 10
34617: NOT
34618: IFFALSE 34622
// exit ;
34620: GO 35023
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34622: LD_VAR 0 11
34626: PUSH
34627: LD_VAR 0 11
34631: PPUSH
34632: LD_VAR 0 10
34636: PPUSH
34637: CALL_OW 296
34641: PUSH
34642: LD_INT 13
34644: GREATER
34645: AND
34646: PUSH
34647: LD_VAR 0 1
34651: PPUSH
34652: LD_VAR 0 10
34656: PPUSH
34657: CALL_OW 296
34661: PUSH
34662: LD_INT 12
34664: GREATER
34665: OR
34666: IFFALSE 34670
// exit ;
34668: GO 35023
// missile := [ 1 ] ;
34670: LD_ADDR_VAR 0 14
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: EMPTY
34679: LIST
34680: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34681: LD_VAR 0 9
34685: PPUSH
34686: LD_VAR 0 12
34690: PPUSH
34691: CALL_OW 325
34695: IFFALSE 34724
// missile := Insert ( missile , missile + 1 , 2 ) ;
34697: LD_ADDR_VAR 0 14
34701: PUSH
34702: LD_VAR 0 14
34706: PPUSH
34707: LD_VAR 0 14
34711: PUSH
34712: LD_INT 1
34714: PLUS
34715: PPUSH
34716: LD_INT 2
34718: PPUSH
34719: CALL_OW 2
34723: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34724: LD_VAR 0 9
34728: PPUSH
34729: LD_VAR 0 13
34733: PPUSH
34734: CALL_OW 325
34738: PUSH
34739: LD_VAR 0 10
34743: PPUSH
34744: CALL_OW 255
34748: PPUSH
34749: LD_VAR 0 13
34753: PPUSH
34754: CALL_OW 325
34758: NOT
34759: AND
34760: IFFALSE 34789
// missile := Insert ( missile , missile + 1 , 3 ) ;
34762: LD_ADDR_VAR 0 14
34766: PUSH
34767: LD_VAR 0 14
34771: PPUSH
34772: LD_VAR 0 14
34776: PUSH
34777: LD_INT 1
34779: PLUS
34780: PPUSH
34781: LD_INT 3
34783: PPUSH
34784: CALL_OW 2
34788: ST_TO_ADDR
// if missile < 2 then
34789: LD_VAR 0 14
34793: PUSH
34794: LD_INT 2
34796: LESS
34797: IFFALSE 34801
// exit ;
34799: GO 35023
// x := GetX ( enemy ) ;
34801: LD_ADDR_VAR 0 4
34805: PUSH
34806: LD_VAR 0 10
34810: PPUSH
34811: CALL_OW 250
34815: ST_TO_ADDR
// y := GetY ( enemy ) ;
34816: LD_ADDR_VAR 0 5
34820: PUSH
34821: LD_VAR 0 10
34825: PPUSH
34826: CALL_OW 251
34830: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34831: LD_ADDR_VAR 0 6
34835: PUSH
34836: LD_VAR 0 4
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PPUSH
34845: LD_INT 1
34847: PPUSH
34848: CALL_OW 12
34852: PLUS
34853: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34854: LD_ADDR_VAR 0 7
34858: PUSH
34859: LD_VAR 0 5
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PPUSH
34868: LD_INT 1
34870: PPUSH
34871: CALL_OW 12
34875: PLUS
34876: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34877: LD_VAR 0 6
34881: PPUSH
34882: LD_VAR 0 7
34886: PPUSH
34887: CALL_OW 488
34891: NOT
34892: IFFALSE 34914
// begin _x := x ;
34894: LD_ADDR_VAR 0 6
34898: PUSH
34899: LD_VAR 0 4
34903: ST_TO_ADDR
// _y := y ;
34904: LD_ADDR_VAR 0 7
34908: PUSH
34909: LD_VAR 0 5
34913: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34914: LD_ADDR_VAR 0 3
34918: PUSH
34919: LD_INT 1
34921: PPUSH
34922: LD_VAR 0 14
34926: PPUSH
34927: CALL_OW 12
34931: ST_TO_ADDR
// case i of 1 :
34932: LD_VAR 0 3
34936: PUSH
34937: LD_INT 1
34939: DOUBLE
34940: EQUAL
34941: IFTRUE 34945
34943: GO 34962
34945: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34946: LD_VAR 0 1
34950: PPUSH
34951: LD_VAR 0 10
34955: PPUSH
34956: CALL_OW 115
34960: GO 35023
34962: LD_INT 2
34964: DOUBLE
34965: EQUAL
34966: IFTRUE 34970
34968: GO 34992
34970: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34971: LD_VAR 0 1
34975: PPUSH
34976: LD_VAR 0 6
34980: PPUSH
34981: LD_VAR 0 7
34985: PPUSH
34986: CALL_OW 153
34990: GO 35023
34992: LD_INT 3
34994: DOUBLE
34995: EQUAL
34996: IFTRUE 35000
34998: GO 35022
35000: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35001: LD_VAR 0 1
35005: PPUSH
35006: LD_VAR 0 6
35010: PPUSH
35011: LD_VAR 0 7
35015: PPUSH
35016: CALL_OW 154
35020: GO 35023
35022: POP
// end ;
35023: LD_VAR 0 2
35027: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35028: LD_INT 0
35030: PPUSH
35031: PPUSH
35032: PPUSH
35033: PPUSH
35034: PPUSH
35035: PPUSH
// if not unit or not building then
35036: LD_VAR 0 1
35040: NOT
35041: PUSH
35042: LD_VAR 0 2
35046: NOT
35047: OR
35048: IFFALSE 35052
// exit ;
35050: GO 35210
// x := GetX ( building ) ;
35052: LD_ADDR_VAR 0 5
35056: PUSH
35057: LD_VAR 0 2
35061: PPUSH
35062: CALL_OW 250
35066: ST_TO_ADDR
// y := GetY ( building ) ;
35067: LD_ADDR_VAR 0 6
35071: PUSH
35072: LD_VAR 0 2
35076: PPUSH
35077: CALL_OW 251
35081: ST_TO_ADDR
// for i = 0 to 5 do
35082: LD_ADDR_VAR 0 4
35086: PUSH
35087: DOUBLE
35088: LD_INT 0
35090: DEC
35091: ST_TO_ADDR
35092: LD_INT 5
35094: PUSH
35095: FOR_TO
35096: IFFALSE 35208
// begin _x := ShiftX ( x , i , 3 ) ;
35098: LD_ADDR_VAR 0 7
35102: PUSH
35103: LD_VAR 0 5
35107: PPUSH
35108: LD_VAR 0 4
35112: PPUSH
35113: LD_INT 3
35115: PPUSH
35116: CALL_OW 272
35120: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35121: LD_ADDR_VAR 0 8
35125: PUSH
35126: LD_VAR 0 6
35130: PPUSH
35131: LD_VAR 0 4
35135: PPUSH
35136: LD_INT 3
35138: PPUSH
35139: CALL_OW 273
35143: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35144: LD_VAR 0 7
35148: PPUSH
35149: LD_VAR 0 8
35153: PPUSH
35154: CALL_OW 488
35158: NOT
35159: IFFALSE 35163
// continue ;
35161: GO 35095
// if HexInfo ( _x , _y ) = 0 then
35163: LD_VAR 0 7
35167: PPUSH
35168: LD_VAR 0 8
35172: PPUSH
35173: CALL_OW 428
35177: PUSH
35178: LD_INT 0
35180: EQUAL
35181: IFFALSE 35206
// begin ComMoveXY ( unit , _x , _y ) ;
35183: LD_VAR 0 1
35187: PPUSH
35188: LD_VAR 0 7
35192: PPUSH
35193: LD_VAR 0 8
35197: PPUSH
35198: CALL_OW 111
// exit ;
35202: POP
35203: POP
35204: GO 35210
// end ; end ;
35206: GO 35095
35208: POP
35209: POP
// end ;
35210: LD_VAR 0 3
35214: RET
// export function ScanBase ( side , base_area ) ; begin
35215: LD_INT 0
35217: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35218: LD_ADDR_VAR 0 3
35222: PUSH
35223: LD_VAR 0 2
35227: PPUSH
35228: LD_INT 81
35230: PUSH
35231: LD_VAR 0 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PPUSH
35240: CALL_OW 70
35244: ST_TO_ADDR
// end ;
35245: LD_VAR 0 3
35249: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35250: LD_INT 0
35252: PPUSH
35253: PPUSH
35254: PPUSH
35255: PPUSH
// result := false ;
35256: LD_ADDR_VAR 0 2
35260: PUSH
35261: LD_INT 0
35263: ST_TO_ADDR
// side := GetSide ( unit ) ;
35264: LD_ADDR_VAR 0 3
35268: PUSH
35269: LD_VAR 0 1
35273: PPUSH
35274: CALL_OW 255
35278: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35279: LD_ADDR_VAR 0 4
35283: PUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL_OW 248
35293: ST_TO_ADDR
// case nat of 1 :
35294: LD_VAR 0 4
35298: PUSH
35299: LD_INT 1
35301: DOUBLE
35302: EQUAL
35303: IFTRUE 35307
35305: GO 35318
35307: POP
// tech := tech_lassight ; 2 :
35308: LD_ADDR_VAR 0 5
35312: PUSH
35313: LD_INT 12
35315: ST_TO_ADDR
35316: GO 35357
35318: LD_INT 2
35320: DOUBLE
35321: EQUAL
35322: IFTRUE 35326
35324: GO 35337
35326: POP
// tech := tech_mortar ; 3 :
35327: LD_ADDR_VAR 0 5
35331: PUSH
35332: LD_INT 41
35334: ST_TO_ADDR
35335: GO 35357
35337: LD_INT 3
35339: DOUBLE
35340: EQUAL
35341: IFTRUE 35345
35343: GO 35356
35345: POP
// tech := tech_bazooka ; end ;
35346: LD_ADDR_VAR 0 5
35350: PUSH
35351: LD_INT 44
35353: ST_TO_ADDR
35354: GO 35357
35356: POP
// if Researched ( side , tech ) then
35357: LD_VAR 0 3
35361: PPUSH
35362: LD_VAR 0 5
35366: PPUSH
35367: CALL_OW 325
35371: IFFALSE 35398
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35373: LD_ADDR_VAR 0 2
35377: PUSH
35378: LD_INT 5
35380: PUSH
35381: LD_INT 8
35383: PUSH
35384: LD_INT 9
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: PUSH
35392: LD_VAR 0 4
35396: ARRAY
35397: ST_TO_ADDR
// end ;
35398: LD_VAR 0 2
35402: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35403: LD_INT 0
35405: PPUSH
35406: PPUSH
35407: PPUSH
// if not mines then
35408: LD_VAR 0 2
35412: NOT
35413: IFFALSE 35417
// exit ;
35415: GO 35561
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35417: LD_ADDR_VAR 0 5
35421: PUSH
35422: LD_INT 81
35424: PUSH
35425: LD_VAR 0 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 3
35436: PUSH
35437: LD_INT 21
35439: PUSH
35440: LD_INT 3
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PPUSH
35455: CALL_OW 69
35459: ST_TO_ADDR
// for i in mines do
35460: LD_ADDR_VAR 0 4
35464: PUSH
35465: LD_VAR 0 2
35469: PUSH
35470: FOR_IN
35471: IFFALSE 35559
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35473: LD_VAR 0 4
35477: PUSH
35478: LD_INT 1
35480: ARRAY
35481: PPUSH
35482: LD_VAR 0 4
35486: PUSH
35487: LD_INT 2
35489: ARRAY
35490: PPUSH
35491: CALL_OW 458
35495: NOT
35496: IFFALSE 35500
// continue ;
35498: GO 35470
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35500: LD_VAR 0 4
35504: PUSH
35505: LD_INT 1
35507: ARRAY
35508: PPUSH
35509: LD_VAR 0 4
35513: PUSH
35514: LD_INT 2
35516: ARRAY
35517: PPUSH
35518: CALL_OW 428
35522: PUSH
35523: LD_VAR 0 5
35527: IN
35528: IFFALSE 35557
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35530: LD_VAR 0 4
35534: PUSH
35535: LD_INT 1
35537: ARRAY
35538: PPUSH
35539: LD_VAR 0 4
35543: PUSH
35544: LD_INT 2
35546: ARRAY
35547: PPUSH
35548: LD_VAR 0 1
35552: PPUSH
35553: CALL_OW 456
// end ;
35557: GO 35470
35559: POP
35560: POP
// end ;
35561: LD_VAR 0 3
35565: RET
// export function Count ( array ) ; var i ; begin
35566: LD_INT 0
35568: PPUSH
35569: PPUSH
// result := 0 ;
35570: LD_ADDR_VAR 0 2
35574: PUSH
35575: LD_INT 0
35577: ST_TO_ADDR
// for i in array do
35578: LD_ADDR_VAR 0 3
35582: PUSH
35583: LD_VAR 0 1
35587: PUSH
35588: FOR_IN
35589: IFFALSE 35613
// if i then
35591: LD_VAR 0 3
35595: IFFALSE 35611
// result := result + 1 ;
35597: LD_ADDR_VAR 0 2
35601: PUSH
35602: LD_VAR 0 2
35606: PUSH
35607: LD_INT 1
35609: PLUS
35610: ST_TO_ADDR
35611: GO 35588
35613: POP
35614: POP
// end ;
35615: LD_VAR 0 2
35619: RET
// export function IsEmpty ( building ) ; begin
35620: LD_INT 0
35622: PPUSH
// if not building then
35623: LD_VAR 0 1
35627: NOT
35628: IFFALSE 35632
// exit ;
35630: GO 35675
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35632: LD_ADDR_VAR 0 2
35636: PUSH
35637: LD_VAR 0 1
35641: PUSH
35642: LD_INT 22
35644: PUSH
35645: LD_VAR 0 1
35649: PPUSH
35650: CALL_OW 255
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 58
35661: PUSH
35662: EMPTY
35663: LIST
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PPUSH
35669: CALL_OW 69
35673: IN
35674: ST_TO_ADDR
// end ;
35675: LD_VAR 0 2
35679: RET
// export function IsNotFull ( building ) ; begin
35680: LD_INT 0
35682: PPUSH
// if not building then
35683: LD_VAR 0 1
35687: NOT
35688: IFFALSE 35692
// exit ;
35690: GO 35711
// result := UnitsInside ( building ) < 6 ;
35692: LD_ADDR_VAR 0 2
35696: PUSH
35697: LD_VAR 0 1
35701: PPUSH
35702: CALL_OW 313
35706: PUSH
35707: LD_INT 6
35709: LESS
35710: ST_TO_ADDR
// end ;
35711: LD_VAR 0 2
35715: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35716: LD_INT 0
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
// tmp := [ ] ;
35722: LD_ADDR_VAR 0 3
35726: PUSH
35727: EMPTY
35728: ST_TO_ADDR
// list := [ ] ;
35729: LD_ADDR_VAR 0 5
35733: PUSH
35734: EMPTY
35735: ST_TO_ADDR
// for i = 16 to 25 do
35736: LD_ADDR_VAR 0 4
35740: PUSH
35741: DOUBLE
35742: LD_INT 16
35744: DEC
35745: ST_TO_ADDR
35746: LD_INT 25
35748: PUSH
35749: FOR_TO
35750: IFFALSE 35823
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35752: LD_ADDR_VAR 0 3
35756: PUSH
35757: LD_VAR 0 3
35761: PUSH
35762: LD_INT 22
35764: PUSH
35765: LD_VAR 0 1
35769: PPUSH
35770: CALL_OW 255
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 91
35781: PUSH
35782: LD_VAR 0 1
35786: PUSH
35787: LD_INT 6
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 30
35797: PUSH
35798: LD_VAR 0 4
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: PPUSH
35815: CALL_OW 69
35819: ADD
35820: ST_TO_ADDR
35821: GO 35749
35823: POP
35824: POP
// for i = 1 to tmp do
35825: LD_ADDR_VAR 0 4
35829: PUSH
35830: DOUBLE
35831: LD_INT 1
35833: DEC
35834: ST_TO_ADDR
35835: LD_VAR 0 3
35839: PUSH
35840: FOR_TO
35841: IFFALSE 35929
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35843: LD_ADDR_VAR 0 5
35847: PUSH
35848: LD_VAR 0 5
35852: PUSH
35853: LD_VAR 0 3
35857: PUSH
35858: LD_VAR 0 4
35862: ARRAY
35863: PPUSH
35864: CALL_OW 266
35868: PUSH
35869: LD_VAR 0 3
35873: PUSH
35874: LD_VAR 0 4
35878: ARRAY
35879: PPUSH
35880: CALL_OW 250
35884: PUSH
35885: LD_VAR 0 3
35889: PUSH
35890: LD_VAR 0 4
35894: ARRAY
35895: PPUSH
35896: CALL_OW 251
35900: PUSH
35901: LD_VAR 0 3
35905: PUSH
35906: LD_VAR 0 4
35910: ARRAY
35911: PPUSH
35912: CALL_OW 254
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: ADD
35926: ST_TO_ADDR
35927: GO 35840
35929: POP
35930: POP
// result := list ;
35931: LD_ADDR_VAR 0 2
35935: PUSH
35936: LD_VAR 0 5
35940: ST_TO_ADDR
// end ;
35941: LD_VAR 0 2
35945: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35946: LD_INT 0
35948: PPUSH
35949: PPUSH
35950: PPUSH
35951: PPUSH
35952: PPUSH
35953: PPUSH
35954: PPUSH
// if not factory then
35955: LD_VAR 0 1
35959: NOT
35960: IFFALSE 35964
// exit ;
35962: GO 36557
// if control = control_apeman then
35964: LD_VAR 0 4
35968: PUSH
35969: LD_INT 5
35971: EQUAL
35972: IFFALSE 36081
// begin tmp := UnitsInside ( factory ) ;
35974: LD_ADDR_VAR 0 8
35978: PUSH
35979: LD_VAR 0 1
35983: PPUSH
35984: CALL_OW 313
35988: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35989: LD_VAR 0 8
35993: PPUSH
35994: LD_INT 25
35996: PUSH
35997: LD_INT 12
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PPUSH
36004: CALL_OW 72
36008: NOT
36009: IFFALSE 36019
// control := control_manual ;
36011: LD_ADDR_VAR 0 4
36015: PUSH
36016: LD_INT 1
36018: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36019: LD_ADDR_VAR 0 8
36023: PUSH
36024: LD_VAR 0 1
36028: PPUSH
36029: CALL 35716 0 1
36033: ST_TO_ADDR
// if tmp then
36034: LD_VAR 0 8
36038: IFFALSE 36081
// begin for i in tmp do
36040: LD_ADDR_VAR 0 7
36044: PUSH
36045: LD_VAR 0 8
36049: PUSH
36050: FOR_IN
36051: IFFALSE 36079
// if i [ 1 ] = b_ext_radio then
36053: LD_VAR 0 7
36057: PUSH
36058: LD_INT 1
36060: ARRAY
36061: PUSH
36062: LD_INT 22
36064: EQUAL
36065: IFFALSE 36077
// begin control := control_remote ;
36067: LD_ADDR_VAR 0 4
36071: PUSH
36072: LD_INT 2
36074: ST_TO_ADDR
// break ;
36075: GO 36079
// end ;
36077: GO 36050
36079: POP
36080: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36081: LD_VAR 0 1
36085: PPUSH
36086: LD_VAR 0 2
36090: PPUSH
36091: LD_VAR 0 3
36095: PPUSH
36096: LD_VAR 0 4
36100: PPUSH
36101: LD_VAR 0 5
36105: PPUSH
36106: CALL_OW 448
36110: IFFALSE 36145
// begin result := [ chassis , engine , control , weapon ] ;
36112: LD_ADDR_VAR 0 6
36116: PUSH
36117: LD_VAR 0 2
36121: PUSH
36122: LD_VAR 0 3
36126: PUSH
36127: LD_VAR 0 4
36131: PUSH
36132: LD_VAR 0 5
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: ST_TO_ADDR
// exit ;
36143: GO 36557
// end ; _chassis := AvailableChassisList ( factory ) ;
36145: LD_ADDR_VAR 0 9
36149: PUSH
36150: LD_VAR 0 1
36154: PPUSH
36155: CALL_OW 475
36159: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36160: LD_ADDR_VAR 0 11
36164: PUSH
36165: LD_VAR 0 1
36169: PPUSH
36170: CALL_OW 476
36174: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36175: LD_ADDR_VAR 0 12
36179: PUSH
36180: LD_VAR 0 1
36184: PPUSH
36185: CALL_OW 477
36189: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36190: LD_ADDR_VAR 0 10
36194: PUSH
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 478
36204: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36205: LD_VAR 0 9
36209: NOT
36210: PUSH
36211: LD_VAR 0 11
36215: NOT
36216: OR
36217: PUSH
36218: LD_VAR 0 12
36222: NOT
36223: OR
36224: PUSH
36225: LD_VAR 0 10
36229: NOT
36230: OR
36231: IFFALSE 36266
// begin result := [ chassis , engine , control , weapon ] ;
36233: LD_ADDR_VAR 0 6
36237: PUSH
36238: LD_VAR 0 2
36242: PUSH
36243: LD_VAR 0 3
36247: PUSH
36248: LD_VAR 0 4
36252: PUSH
36253: LD_VAR 0 5
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: ST_TO_ADDR
// exit ;
36264: GO 36557
// end ; if not chassis in _chassis then
36266: LD_VAR 0 2
36270: PUSH
36271: LD_VAR 0 9
36275: IN
36276: NOT
36277: IFFALSE 36303
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36279: LD_ADDR_VAR 0 2
36283: PUSH
36284: LD_VAR 0 9
36288: PUSH
36289: LD_INT 1
36291: PPUSH
36292: LD_VAR 0 9
36296: PPUSH
36297: CALL_OW 12
36301: ARRAY
36302: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36303: LD_VAR 0 2
36307: PPUSH
36308: LD_VAR 0 3
36312: PPUSH
36313: CALL 36562 0 2
36317: NOT
36318: IFFALSE 36377
// repeat engine := _engine [ 1 ] ;
36320: LD_ADDR_VAR 0 3
36324: PUSH
36325: LD_VAR 0 11
36329: PUSH
36330: LD_INT 1
36332: ARRAY
36333: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36334: LD_ADDR_VAR 0 11
36338: PUSH
36339: LD_VAR 0 11
36343: PPUSH
36344: LD_INT 1
36346: PPUSH
36347: CALL_OW 3
36351: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36352: LD_VAR 0 2
36356: PPUSH
36357: LD_VAR 0 3
36361: PPUSH
36362: CALL 36562 0 2
36366: PUSH
36367: LD_VAR 0 11
36371: PUSH
36372: EMPTY
36373: EQUAL
36374: OR
36375: IFFALSE 36320
// if not control in _control then
36377: LD_VAR 0 4
36381: PUSH
36382: LD_VAR 0 12
36386: IN
36387: NOT
36388: IFFALSE 36414
// control := _control [ rand ( 1 , _control ) ] ;
36390: LD_ADDR_VAR 0 4
36394: PUSH
36395: LD_VAR 0 12
36399: PUSH
36400: LD_INT 1
36402: PPUSH
36403: LD_VAR 0 12
36407: PPUSH
36408: CALL_OW 12
36412: ARRAY
36413: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36414: LD_VAR 0 2
36418: PPUSH
36419: LD_VAR 0 5
36423: PPUSH
36424: CALL 36782 0 2
36428: NOT
36429: IFFALSE 36488
// repeat weapon := _weapon [ 1 ] ;
36431: LD_ADDR_VAR 0 5
36435: PUSH
36436: LD_VAR 0 10
36440: PUSH
36441: LD_INT 1
36443: ARRAY
36444: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36445: LD_ADDR_VAR 0 10
36449: PUSH
36450: LD_VAR 0 10
36454: PPUSH
36455: LD_INT 1
36457: PPUSH
36458: CALL_OW 3
36462: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36463: LD_VAR 0 2
36467: PPUSH
36468: LD_VAR 0 5
36472: PPUSH
36473: CALL 36782 0 2
36477: PUSH
36478: LD_VAR 0 10
36482: PUSH
36483: EMPTY
36484: EQUAL
36485: OR
36486: IFFALSE 36431
// result := [ ] ;
36488: LD_ADDR_VAR 0 6
36492: PUSH
36493: EMPTY
36494: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36495: LD_VAR 0 1
36499: PPUSH
36500: LD_VAR 0 2
36504: PPUSH
36505: LD_VAR 0 3
36509: PPUSH
36510: LD_VAR 0 4
36514: PPUSH
36515: LD_VAR 0 5
36519: PPUSH
36520: CALL_OW 448
36524: IFFALSE 36557
// result := [ chassis , engine , control , weapon ] ;
36526: LD_ADDR_VAR 0 6
36530: PUSH
36531: LD_VAR 0 2
36535: PUSH
36536: LD_VAR 0 3
36540: PUSH
36541: LD_VAR 0 4
36545: PUSH
36546: LD_VAR 0 5
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: ST_TO_ADDR
// end ;
36557: LD_VAR 0 6
36561: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36562: LD_INT 0
36564: PPUSH
// if not chassis or not engine then
36565: LD_VAR 0 1
36569: NOT
36570: PUSH
36571: LD_VAR 0 2
36575: NOT
36576: OR
36577: IFFALSE 36581
// exit ;
36579: GO 36777
// case engine of engine_solar :
36581: LD_VAR 0 2
36585: PUSH
36586: LD_INT 2
36588: DOUBLE
36589: EQUAL
36590: IFTRUE 36594
36592: GO 36632
36594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36595: LD_ADDR_VAR 0 3
36599: PUSH
36600: LD_INT 11
36602: PUSH
36603: LD_INT 12
36605: PUSH
36606: LD_INT 13
36608: PUSH
36609: LD_INT 14
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 3
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: ST_TO_ADDR
36630: GO 36761
36632: LD_INT 1
36634: DOUBLE
36635: EQUAL
36636: IFTRUE 36640
36638: GO 36702
36640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36641: LD_ADDR_VAR 0 3
36645: PUSH
36646: LD_INT 11
36648: PUSH
36649: LD_INT 12
36651: PUSH
36652: LD_INT 13
36654: PUSH
36655: LD_INT 14
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 3
36666: PUSH
36667: LD_INT 4
36669: PUSH
36670: LD_INT 5
36672: PUSH
36673: LD_INT 21
36675: PUSH
36676: LD_INT 23
36678: PUSH
36679: LD_INT 22
36681: PUSH
36682: LD_INT 24
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: ST_TO_ADDR
36700: GO 36761
36702: LD_INT 3
36704: DOUBLE
36705: EQUAL
36706: IFTRUE 36710
36708: GO 36760
36710: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36711: LD_ADDR_VAR 0 3
36715: PUSH
36716: LD_INT 13
36718: PUSH
36719: LD_INT 14
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: LD_INT 3
36727: PUSH
36728: LD_INT 4
36730: PUSH
36731: LD_INT 5
36733: PUSH
36734: LD_INT 21
36736: PUSH
36737: LD_INT 22
36739: PUSH
36740: LD_INT 23
36742: PUSH
36743: LD_INT 24
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: ST_TO_ADDR
36758: GO 36761
36760: POP
// result := ( chassis in result ) ;
36761: LD_ADDR_VAR 0 3
36765: PUSH
36766: LD_VAR 0 1
36770: PUSH
36771: LD_VAR 0 3
36775: IN
36776: ST_TO_ADDR
// end ;
36777: LD_VAR 0 3
36781: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36782: LD_INT 0
36784: PPUSH
// if not chassis or not weapon then
36785: LD_VAR 0 1
36789: NOT
36790: PUSH
36791: LD_VAR 0 2
36795: NOT
36796: OR
36797: IFFALSE 36801
// exit ;
36799: GO 37863
// case weapon of us_machine_gun :
36801: LD_VAR 0 2
36805: PUSH
36806: LD_INT 2
36808: DOUBLE
36809: EQUAL
36810: IFTRUE 36814
36812: GO 36844
36814: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36815: LD_ADDR_VAR 0 3
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: LD_INT 3
36828: PUSH
36829: LD_INT 4
36831: PUSH
36832: LD_INT 5
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: ST_TO_ADDR
36842: GO 37847
36844: LD_INT 3
36846: DOUBLE
36847: EQUAL
36848: IFTRUE 36852
36850: GO 36882
36852: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36853: LD_ADDR_VAR 0 3
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: LD_INT 3
36866: PUSH
36867: LD_INT 4
36869: PUSH
36870: LD_INT 5
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
36880: GO 37847
36882: LD_INT 11
36884: DOUBLE
36885: EQUAL
36886: IFTRUE 36890
36888: GO 36920
36890: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36891: LD_ADDR_VAR 0 3
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: LD_INT 4
36907: PUSH
36908: LD_INT 5
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: ST_TO_ADDR
36918: GO 37847
36920: LD_INT 4
36922: DOUBLE
36923: EQUAL
36924: IFTRUE 36928
36926: GO 36954
36928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36929: LD_ADDR_VAR 0 3
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: LD_INT 3
36939: PUSH
36940: LD_INT 4
36942: PUSH
36943: LD_INT 5
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: ST_TO_ADDR
36952: GO 37847
36954: LD_INT 5
36956: DOUBLE
36957: EQUAL
36958: IFTRUE 36962
36960: GO 36988
36962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36963: LD_ADDR_VAR 0 3
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: LD_INT 4
36976: PUSH
36977: LD_INT 5
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: ST_TO_ADDR
36986: GO 37847
36988: LD_INT 9
36990: DOUBLE
36991: EQUAL
36992: IFTRUE 36996
36994: GO 37022
36996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36997: LD_ADDR_VAR 0 3
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: LD_INT 3
37007: PUSH
37008: LD_INT 4
37010: PUSH
37011: LD_INT 5
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
37020: GO 37847
37022: LD_INT 7
37024: DOUBLE
37025: EQUAL
37026: IFTRUE 37030
37028: GO 37056
37030: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: LD_INT 3
37041: PUSH
37042: LD_INT 4
37044: PUSH
37045: LD_INT 5
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
37054: GO 37847
37056: LD_INT 12
37058: DOUBLE
37059: EQUAL
37060: IFTRUE 37064
37062: GO 37090
37064: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37065: LD_ADDR_VAR 0 3
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: LD_INT 3
37075: PUSH
37076: LD_INT 4
37078: PUSH
37079: LD_INT 5
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: ST_TO_ADDR
37088: GO 37847
37090: LD_INT 13
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37098
37096: GO 37124
37098: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37099: LD_ADDR_VAR 0 3
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: LD_INT 3
37109: PUSH
37110: LD_INT 4
37112: PUSH
37113: LD_INT 5
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
37122: GO 37847
37124: LD_INT 14
37126: DOUBLE
37127: EQUAL
37128: IFTRUE 37132
37130: GO 37150
37132: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37133: LD_ADDR_VAR 0 3
37137: PUSH
37138: LD_INT 4
37140: PUSH
37141: LD_INT 5
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: ST_TO_ADDR
37148: GO 37847
37150: LD_INT 6
37152: DOUBLE
37153: EQUAL
37154: IFTRUE 37158
37156: GO 37176
37158: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37159: LD_ADDR_VAR 0 3
37163: PUSH
37164: LD_INT 4
37166: PUSH
37167: LD_INT 5
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: ST_TO_ADDR
37174: GO 37847
37176: LD_INT 10
37178: DOUBLE
37179: EQUAL
37180: IFTRUE 37184
37182: GO 37202
37184: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37185: LD_ADDR_VAR 0 3
37189: PUSH
37190: LD_INT 4
37192: PUSH
37193: LD_INT 5
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: ST_TO_ADDR
37200: GO 37847
37202: LD_INT 22
37204: DOUBLE
37205: EQUAL
37206: IFTRUE 37210
37208: GO 37236
37210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37211: LD_ADDR_VAR 0 3
37215: PUSH
37216: LD_INT 11
37218: PUSH
37219: LD_INT 12
37221: PUSH
37222: LD_INT 13
37224: PUSH
37225: LD_INT 14
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: ST_TO_ADDR
37234: GO 37847
37236: LD_INT 23
37238: DOUBLE
37239: EQUAL
37240: IFTRUE 37244
37242: GO 37270
37244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37245: LD_ADDR_VAR 0 3
37249: PUSH
37250: LD_INT 11
37252: PUSH
37253: LD_INT 12
37255: PUSH
37256: LD_INT 13
37258: PUSH
37259: LD_INT 14
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: ST_TO_ADDR
37268: GO 37847
37270: LD_INT 24
37272: DOUBLE
37273: EQUAL
37274: IFTRUE 37278
37276: GO 37304
37278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37279: LD_ADDR_VAR 0 3
37283: PUSH
37284: LD_INT 11
37286: PUSH
37287: LD_INT 12
37289: PUSH
37290: LD_INT 13
37292: PUSH
37293: LD_INT 14
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
37302: GO 37847
37304: LD_INT 30
37306: DOUBLE
37307: EQUAL
37308: IFTRUE 37312
37310: GO 37338
37312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37313: LD_ADDR_VAR 0 3
37317: PUSH
37318: LD_INT 11
37320: PUSH
37321: LD_INT 12
37323: PUSH
37324: LD_INT 13
37326: PUSH
37327: LD_INT 14
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: ST_TO_ADDR
37336: GO 37847
37338: LD_INT 25
37340: DOUBLE
37341: EQUAL
37342: IFTRUE 37346
37344: GO 37364
37346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37347: LD_ADDR_VAR 0 3
37351: PUSH
37352: LD_INT 13
37354: PUSH
37355: LD_INT 14
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: ST_TO_ADDR
37362: GO 37847
37364: LD_INT 27
37366: DOUBLE
37367: EQUAL
37368: IFTRUE 37372
37370: GO 37390
37372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37373: LD_ADDR_VAR 0 3
37377: PUSH
37378: LD_INT 13
37380: PUSH
37381: LD_INT 14
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: ST_TO_ADDR
37388: GO 37847
37390: LD_EXP 49
37394: DOUBLE
37395: EQUAL
37396: IFTRUE 37400
37398: GO 37426
37400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37401: LD_ADDR_VAR 0 3
37405: PUSH
37406: LD_INT 11
37408: PUSH
37409: LD_INT 12
37411: PUSH
37412: LD_INT 13
37414: PUSH
37415: LD_INT 14
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: ST_TO_ADDR
37424: GO 37847
37426: LD_INT 28
37428: DOUBLE
37429: EQUAL
37430: IFTRUE 37434
37432: GO 37452
37434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37435: LD_ADDR_VAR 0 3
37439: PUSH
37440: LD_INT 13
37442: PUSH
37443: LD_INT 14
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: ST_TO_ADDR
37450: GO 37847
37452: LD_INT 29
37454: DOUBLE
37455: EQUAL
37456: IFTRUE 37460
37458: GO 37478
37460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37461: LD_ADDR_VAR 0 3
37465: PUSH
37466: LD_INT 13
37468: PUSH
37469: LD_INT 14
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: ST_TO_ADDR
37476: GO 37847
37478: LD_INT 31
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37486
37484: GO 37504
37486: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37487: LD_ADDR_VAR 0 3
37491: PUSH
37492: LD_INT 13
37494: PUSH
37495: LD_INT 14
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: ST_TO_ADDR
37502: GO 37847
37504: LD_INT 26
37506: DOUBLE
37507: EQUAL
37508: IFTRUE 37512
37510: GO 37530
37512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37513: LD_ADDR_VAR 0 3
37517: PUSH
37518: LD_INT 13
37520: PUSH
37521: LD_INT 14
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: ST_TO_ADDR
37528: GO 37847
37530: LD_INT 42
37532: DOUBLE
37533: EQUAL
37534: IFTRUE 37538
37536: GO 37564
37538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37539: LD_ADDR_VAR 0 3
37543: PUSH
37544: LD_INT 21
37546: PUSH
37547: LD_INT 22
37549: PUSH
37550: LD_INT 23
37552: PUSH
37553: LD_INT 24
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
37562: GO 37847
37564: LD_INT 43
37566: DOUBLE
37567: EQUAL
37568: IFTRUE 37572
37570: GO 37598
37572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37573: LD_ADDR_VAR 0 3
37577: PUSH
37578: LD_INT 21
37580: PUSH
37581: LD_INT 22
37583: PUSH
37584: LD_INT 23
37586: PUSH
37587: LD_INT 24
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: ST_TO_ADDR
37596: GO 37847
37598: LD_INT 44
37600: DOUBLE
37601: EQUAL
37602: IFTRUE 37606
37604: GO 37632
37606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37607: LD_ADDR_VAR 0 3
37611: PUSH
37612: LD_INT 21
37614: PUSH
37615: LD_INT 22
37617: PUSH
37618: LD_INT 23
37620: PUSH
37621: LD_INT 24
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: ST_TO_ADDR
37630: GO 37847
37632: LD_INT 45
37634: DOUBLE
37635: EQUAL
37636: IFTRUE 37640
37638: GO 37666
37640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37641: LD_ADDR_VAR 0 3
37645: PUSH
37646: LD_INT 21
37648: PUSH
37649: LD_INT 22
37651: PUSH
37652: LD_INT 23
37654: PUSH
37655: LD_INT 24
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: ST_TO_ADDR
37664: GO 37847
37666: LD_INT 49
37668: DOUBLE
37669: EQUAL
37670: IFTRUE 37674
37672: GO 37700
37674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37675: LD_ADDR_VAR 0 3
37679: PUSH
37680: LD_INT 21
37682: PUSH
37683: LD_INT 22
37685: PUSH
37686: LD_INT 23
37688: PUSH
37689: LD_INT 24
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: ST_TO_ADDR
37698: GO 37847
37700: LD_INT 51
37702: DOUBLE
37703: EQUAL
37704: IFTRUE 37708
37706: GO 37734
37708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37709: LD_ADDR_VAR 0 3
37713: PUSH
37714: LD_INT 21
37716: PUSH
37717: LD_INT 22
37719: PUSH
37720: LD_INT 23
37722: PUSH
37723: LD_INT 24
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: ST_TO_ADDR
37732: GO 37847
37734: LD_INT 52
37736: DOUBLE
37737: EQUAL
37738: IFTRUE 37742
37740: GO 37768
37742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37743: LD_ADDR_VAR 0 3
37747: PUSH
37748: LD_INT 21
37750: PUSH
37751: LD_INT 22
37753: PUSH
37754: LD_INT 23
37756: PUSH
37757: LD_INT 24
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: ST_TO_ADDR
37766: GO 37847
37768: LD_INT 53
37770: DOUBLE
37771: EQUAL
37772: IFTRUE 37776
37774: GO 37794
37776: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37777: LD_ADDR_VAR 0 3
37781: PUSH
37782: LD_INT 23
37784: PUSH
37785: LD_INT 24
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: ST_TO_ADDR
37792: GO 37847
37794: LD_INT 46
37796: DOUBLE
37797: EQUAL
37798: IFTRUE 37802
37800: GO 37820
37802: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37803: LD_ADDR_VAR 0 3
37807: PUSH
37808: LD_INT 23
37810: PUSH
37811: LD_INT 24
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: ST_TO_ADDR
37818: GO 37847
37820: LD_INT 47
37822: DOUBLE
37823: EQUAL
37824: IFTRUE 37828
37826: GO 37846
37828: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37829: LD_ADDR_VAR 0 3
37833: PUSH
37834: LD_INT 23
37836: PUSH
37837: LD_INT 24
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: ST_TO_ADDR
37844: GO 37847
37846: POP
// result := ( chassis in result ) ;
37847: LD_ADDR_VAR 0 3
37851: PUSH
37852: LD_VAR 0 1
37856: PUSH
37857: LD_VAR 0 3
37861: IN
37862: ST_TO_ADDR
// end ;
37863: LD_VAR 0 3
37867: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37868: LD_INT 0
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
// result := array ;
37877: LD_ADDR_VAR 0 5
37881: PUSH
37882: LD_VAR 0 1
37886: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37887: LD_VAR 0 1
37891: NOT
37892: PUSH
37893: LD_VAR 0 2
37897: NOT
37898: OR
37899: PUSH
37900: LD_VAR 0 3
37904: NOT
37905: OR
37906: PUSH
37907: LD_VAR 0 2
37911: PUSH
37912: LD_VAR 0 1
37916: GREATER
37917: OR
37918: PUSH
37919: LD_VAR 0 3
37923: PUSH
37924: LD_VAR 0 1
37928: GREATER
37929: OR
37930: IFFALSE 37934
// exit ;
37932: GO 38230
// if direction then
37934: LD_VAR 0 4
37938: IFFALSE 38002
// begin d := 1 ;
37940: LD_ADDR_VAR 0 9
37944: PUSH
37945: LD_INT 1
37947: ST_TO_ADDR
// if i_from > i_to then
37948: LD_VAR 0 2
37952: PUSH
37953: LD_VAR 0 3
37957: GREATER
37958: IFFALSE 37984
// length := ( array - i_from ) + i_to else
37960: LD_ADDR_VAR 0 11
37964: PUSH
37965: LD_VAR 0 1
37969: PUSH
37970: LD_VAR 0 2
37974: MINUS
37975: PUSH
37976: LD_VAR 0 3
37980: PLUS
37981: ST_TO_ADDR
37982: GO 38000
// length := i_to - i_from ;
37984: LD_ADDR_VAR 0 11
37988: PUSH
37989: LD_VAR 0 3
37993: PUSH
37994: LD_VAR 0 2
37998: MINUS
37999: ST_TO_ADDR
// end else
38000: GO 38063
// begin d := - 1 ;
38002: LD_ADDR_VAR 0 9
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: ST_TO_ADDR
// if i_from > i_to then
38011: LD_VAR 0 2
38015: PUSH
38016: LD_VAR 0 3
38020: GREATER
38021: IFFALSE 38041
// length := i_from - i_to else
38023: LD_ADDR_VAR 0 11
38027: PUSH
38028: LD_VAR 0 2
38032: PUSH
38033: LD_VAR 0 3
38037: MINUS
38038: ST_TO_ADDR
38039: GO 38063
// length := ( array - i_to ) + i_from ;
38041: LD_ADDR_VAR 0 11
38045: PUSH
38046: LD_VAR 0 1
38050: PUSH
38051: LD_VAR 0 3
38055: MINUS
38056: PUSH
38057: LD_VAR 0 2
38061: PLUS
38062: ST_TO_ADDR
// end ; if not length then
38063: LD_VAR 0 11
38067: NOT
38068: IFFALSE 38072
// exit ;
38070: GO 38230
// tmp := array ;
38072: LD_ADDR_VAR 0 10
38076: PUSH
38077: LD_VAR 0 1
38081: ST_TO_ADDR
// for i = 1 to length do
38082: LD_ADDR_VAR 0 6
38086: PUSH
38087: DOUBLE
38088: LD_INT 1
38090: DEC
38091: ST_TO_ADDR
38092: LD_VAR 0 11
38096: PUSH
38097: FOR_TO
38098: IFFALSE 38218
// begin for j = 1 to array do
38100: LD_ADDR_VAR 0 7
38104: PUSH
38105: DOUBLE
38106: LD_INT 1
38108: DEC
38109: ST_TO_ADDR
38110: LD_VAR 0 1
38114: PUSH
38115: FOR_TO
38116: IFFALSE 38204
// begin k := j + d ;
38118: LD_ADDR_VAR 0 8
38122: PUSH
38123: LD_VAR 0 7
38127: PUSH
38128: LD_VAR 0 9
38132: PLUS
38133: ST_TO_ADDR
// if k > array then
38134: LD_VAR 0 8
38138: PUSH
38139: LD_VAR 0 1
38143: GREATER
38144: IFFALSE 38154
// k := 1 ;
38146: LD_ADDR_VAR 0 8
38150: PUSH
38151: LD_INT 1
38153: ST_TO_ADDR
// if not k then
38154: LD_VAR 0 8
38158: NOT
38159: IFFALSE 38171
// k := array ;
38161: LD_ADDR_VAR 0 8
38165: PUSH
38166: LD_VAR 0 1
38170: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38171: LD_ADDR_VAR 0 10
38175: PUSH
38176: LD_VAR 0 10
38180: PPUSH
38181: LD_VAR 0 8
38185: PPUSH
38186: LD_VAR 0 1
38190: PUSH
38191: LD_VAR 0 7
38195: ARRAY
38196: PPUSH
38197: CALL_OW 1
38201: ST_TO_ADDR
// end ;
38202: GO 38115
38204: POP
38205: POP
// array := tmp ;
38206: LD_ADDR_VAR 0 1
38210: PUSH
38211: LD_VAR 0 10
38215: ST_TO_ADDR
// end ;
38216: GO 38097
38218: POP
38219: POP
// result := array ;
38220: LD_ADDR_VAR 0 5
38224: PUSH
38225: LD_VAR 0 1
38229: ST_TO_ADDR
// end ;
38230: LD_VAR 0 5
38234: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38235: LD_INT 0
38237: PPUSH
38238: PPUSH
// result := 0 ;
38239: LD_ADDR_VAR 0 3
38243: PUSH
38244: LD_INT 0
38246: ST_TO_ADDR
// if not array or not value in array then
38247: LD_VAR 0 1
38251: NOT
38252: PUSH
38253: LD_VAR 0 2
38257: PUSH
38258: LD_VAR 0 1
38262: IN
38263: NOT
38264: OR
38265: IFFALSE 38269
// exit ;
38267: GO 38323
// for i = 1 to array do
38269: LD_ADDR_VAR 0 4
38273: PUSH
38274: DOUBLE
38275: LD_INT 1
38277: DEC
38278: ST_TO_ADDR
38279: LD_VAR 0 1
38283: PUSH
38284: FOR_TO
38285: IFFALSE 38321
// if value = array [ i ] then
38287: LD_VAR 0 2
38291: PUSH
38292: LD_VAR 0 1
38296: PUSH
38297: LD_VAR 0 4
38301: ARRAY
38302: EQUAL
38303: IFFALSE 38319
// begin result := i ;
38305: LD_ADDR_VAR 0 3
38309: PUSH
38310: LD_VAR 0 4
38314: ST_TO_ADDR
// exit ;
38315: POP
38316: POP
38317: GO 38323
// end ;
38319: GO 38284
38321: POP
38322: POP
// end ;
38323: LD_VAR 0 3
38327: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38328: LD_INT 0
38330: PPUSH
// vc_chassis := chassis ;
38331: LD_ADDR_OWVAR 37
38335: PUSH
38336: LD_VAR 0 1
38340: ST_TO_ADDR
// vc_engine := engine ;
38341: LD_ADDR_OWVAR 39
38345: PUSH
38346: LD_VAR 0 2
38350: ST_TO_ADDR
// vc_control := control ;
38351: LD_ADDR_OWVAR 38
38355: PUSH
38356: LD_VAR 0 3
38360: ST_TO_ADDR
// vc_weapon := weapon ;
38361: LD_ADDR_OWVAR 40
38365: PUSH
38366: LD_VAR 0 4
38370: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38371: LD_ADDR_OWVAR 41
38375: PUSH
38376: LD_VAR 0 5
38380: ST_TO_ADDR
// end ;
38381: LD_VAR 0 6
38385: RET
// export function WantPlant ( unit ) ; var task ; begin
38386: LD_INT 0
38388: PPUSH
38389: PPUSH
// result := false ;
38390: LD_ADDR_VAR 0 2
38394: PUSH
38395: LD_INT 0
38397: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38398: LD_ADDR_VAR 0 3
38402: PUSH
38403: LD_VAR 0 1
38407: PPUSH
38408: CALL_OW 437
38412: ST_TO_ADDR
// if task then
38413: LD_VAR 0 3
38417: IFFALSE 38445
// if task [ 1 ] [ 1 ] = p then
38419: LD_VAR 0 3
38423: PUSH
38424: LD_INT 1
38426: ARRAY
38427: PUSH
38428: LD_INT 1
38430: ARRAY
38431: PUSH
38432: LD_STRING p
38434: EQUAL
38435: IFFALSE 38445
// result := true ;
38437: LD_ADDR_VAR 0 2
38441: PUSH
38442: LD_INT 1
38444: ST_TO_ADDR
// end ;
38445: LD_VAR 0 2
38449: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38450: LD_INT 0
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
// if pos < 1 then
38456: LD_VAR 0 2
38460: PUSH
38461: LD_INT 1
38463: LESS
38464: IFFALSE 38468
// exit ;
38466: GO 38771
// if pos = 1 then
38468: LD_VAR 0 2
38472: PUSH
38473: LD_INT 1
38475: EQUAL
38476: IFFALSE 38509
// result := Replace ( arr , pos [ 1 ] , value ) else
38478: LD_ADDR_VAR 0 4
38482: PUSH
38483: LD_VAR 0 1
38487: PPUSH
38488: LD_VAR 0 2
38492: PUSH
38493: LD_INT 1
38495: ARRAY
38496: PPUSH
38497: LD_VAR 0 3
38501: PPUSH
38502: CALL_OW 1
38506: ST_TO_ADDR
38507: GO 38771
// begin tmp := arr ;
38509: LD_ADDR_VAR 0 6
38513: PUSH
38514: LD_VAR 0 1
38518: ST_TO_ADDR
// s_arr := [ tmp ] ;
38519: LD_ADDR_VAR 0 7
38523: PUSH
38524: LD_VAR 0 6
38528: PUSH
38529: EMPTY
38530: LIST
38531: ST_TO_ADDR
// for i = 1 to pos - 1 do
38532: LD_ADDR_VAR 0 5
38536: PUSH
38537: DOUBLE
38538: LD_INT 1
38540: DEC
38541: ST_TO_ADDR
38542: LD_VAR 0 2
38546: PUSH
38547: LD_INT 1
38549: MINUS
38550: PUSH
38551: FOR_TO
38552: IFFALSE 38597
// begin tmp := tmp [ pos [ i ] ] ;
38554: LD_ADDR_VAR 0 6
38558: PUSH
38559: LD_VAR 0 6
38563: PUSH
38564: LD_VAR 0 2
38568: PUSH
38569: LD_VAR 0 5
38573: ARRAY
38574: ARRAY
38575: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38576: LD_ADDR_VAR 0 7
38580: PUSH
38581: LD_VAR 0 7
38585: PUSH
38586: LD_VAR 0 6
38590: PUSH
38591: EMPTY
38592: LIST
38593: ADD
38594: ST_TO_ADDR
// end ;
38595: GO 38551
38597: POP
38598: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38599: LD_ADDR_VAR 0 6
38603: PUSH
38604: LD_VAR 0 6
38608: PPUSH
38609: LD_VAR 0 2
38613: PUSH
38614: LD_VAR 0 2
38618: ARRAY
38619: PPUSH
38620: LD_VAR 0 3
38624: PPUSH
38625: CALL_OW 1
38629: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38630: LD_ADDR_VAR 0 7
38634: PUSH
38635: LD_VAR 0 7
38639: PPUSH
38640: LD_VAR 0 7
38644: PPUSH
38645: LD_VAR 0 6
38649: PPUSH
38650: CALL_OW 1
38654: ST_TO_ADDR
// for i = s_arr downto 2 do
38655: LD_ADDR_VAR 0 5
38659: PUSH
38660: DOUBLE
38661: LD_VAR 0 7
38665: INC
38666: ST_TO_ADDR
38667: LD_INT 2
38669: PUSH
38670: FOR_DOWNTO
38671: IFFALSE 38755
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38673: LD_ADDR_VAR 0 6
38677: PUSH
38678: LD_VAR 0 7
38682: PUSH
38683: LD_VAR 0 5
38687: PUSH
38688: LD_INT 1
38690: MINUS
38691: ARRAY
38692: PPUSH
38693: LD_VAR 0 2
38697: PUSH
38698: LD_VAR 0 5
38702: PUSH
38703: LD_INT 1
38705: MINUS
38706: ARRAY
38707: PPUSH
38708: LD_VAR 0 7
38712: PUSH
38713: LD_VAR 0 5
38717: ARRAY
38718: PPUSH
38719: CALL_OW 1
38723: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38724: LD_ADDR_VAR 0 7
38728: PUSH
38729: LD_VAR 0 7
38733: PPUSH
38734: LD_VAR 0 5
38738: PUSH
38739: LD_INT 1
38741: MINUS
38742: PPUSH
38743: LD_VAR 0 6
38747: PPUSH
38748: CALL_OW 1
38752: ST_TO_ADDR
// end ;
38753: GO 38670
38755: POP
38756: POP
// result := s_arr [ 1 ] ;
38757: LD_ADDR_VAR 0 4
38761: PUSH
38762: LD_VAR 0 7
38766: PUSH
38767: LD_INT 1
38769: ARRAY
38770: ST_TO_ADDR
// end ; end ;
38771: LD_VAR 0 4
38775: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38776: LD_INT 0
38778: PPUSH
38779: PPUSH
// if not list then
38780: LD_VAR 0 1
38784: NOT
38785: IFFALSE 38789
// exit ;
38787: GO 38880
// i := list [ pos1 ] ;
38789: LD_ADDR_VAR 0 5
38793: PUSH
38794: LD_VAR 0 1
38798: PUSH
38799: LD_VAR 0 2
38803: ARRAY
38804: ST_TO_ADDR
// if not i then
38805: LD_VAR 0 5
38809: NOT
38810: IFFALSE 38814
// exit ;
38812: GO 38880
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38814: LD_ADDR_VAR 0 1
38818: PUSH
38819: LD_VAR 0 1
38823: PPUSH
38824: LD_VAR 0 2
38828: PPUSH
38829: LD_VAR 0 1
38833: PUSH
38834: LD_VAR 0 3
38838: ARRAY
38839: PPUSH
38840: CALL_OW 1
38844: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38845: LD_ADDR_VAR 0 1
38849: PUSH
38850: LD_VAR 0 1
38854: PPUSH
38855: LD_VAR 0 3
38859: PPUSH
38860: LD_VAR 0 5
38864: PPUSH
38865: CALL_OW 1
38869: ST_TO_ADDR
// result := list ;
38870: LD_ADDR_VAR 0 4
38874: PUSH
38875: LD_VAR 0 1
38879: ST_TO_ADDR
// end ;
38880: LD_VAR 0 4
38884: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38885: LD_INT 0
38887: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38888: LD_ADDR_VAR 0 5
38892: PUSH
38893: LD_VAR 0 1
38897: PPUSH
38898: CALL_OW 250
38902: PPUSH
38903: LD_VAR 0 1
38907: PPUSH
38908: CALL_OW 251
38912: PPUSH
38913: LD_VAR 0 2
38917: PPUSH
38918: LD_VAR 0 3
38922: PPUSH
38923: LD_VAR 0 4
38927: PPUSH
38928: CALL 38938 0 5
38932: ST_TO_ADDR
// end ;
38933: LD_VAR 0 5
38937: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38938: LD_INT 0
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
// if not list then
38944: LD_VAR 0 3
38948: NOT
38949: IFFALSE 38953
// exit ;
38951: GO 39341
// result := [ ] ;
38953: LD_ADDR_VAR 0 6
38957: PUSH
38958: EMPTY
38959: ST_TO_ADDR
// for i in list do
38960: LD_ADDR_VAR 0 7
38964: PUSH
38965: LD_VAR 0 3
38969: PUSH
38970: FOR_IN
38971: IFFALSE 39173
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38973: LD_ADDR_VAR 0 9
38977: PUSH
38978: LD_VAR 0 7
38982: PPUSH
38983: LD_VAR 0 1
38987: PPUSH
38988: LD_VAR 0 2
38992: PPUSH
38993: CALL_OW 297
38997: ST_TO_ADDR
// if not result then
38998: LD_VAR 0 6
39002: NOT
39003: IFFALSE 39029
// result := [ [ i , tmp ] ] else
39005: LD_ADDR_VAR 0 6
39009: PUSH
39010: LD_VAR 0 7
39014: PUSH
39015: LD_VAR 0 9
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: EMPTY
39025: LIST
39026: ST_TO_ADDR
39027: GO 39171
// begin if result [ result ] [ 2 ] < tmp then
39029: LD_VAR 0 6
39033: PUSH
39034: LD_VAR 0 6
39038: ARRAY
39039: PUSH
39040: LD_INT 2
39042: ARRAY
39043: PUSH
39044: LD_VAR 0 9
39048: LESS
39049: IFFALSE 39091
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39051: LD_ADDR_VAR 0 6
39055: PUSH
39056: LD_VAR 0 6
39060: PPUSH
39061: LD_VAR 0 6
39065: PUSH
39066: LD_INT 1
39068: PLUS
39069: PPUSH
39070: LD_VAR 0 7
39074: PUSH
39075: LD_VAR 0 9
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PPUSH
39084: CALL_OW 2
39088: ST_TO_ADDR
39089: GO 39171
// for j = 1 to result do
39091: LD_ADDR_VAR 0 8
39095: PUSH
39096: DOUBLE
39097: LD_INT 1
39099: DEC
39100: ST_TO_ADDR
39101: LD_VAR 0 6
39105: PUSH
39106: FOR_TO
39107: IFFALSE 39169
// begin if tmp < result [ j ] [ 2 ] then
39109: LD_VAR 0 9
39113: PUSH
39114: LD_VAR 0 6
39118: PUSH
39119: LD_VAR 0 8
39123: ARRAY
39124: PUSH
39125: LD_INT 2
39127: ARRAY
39128: LESS
39129: IFFALSE 39167
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39131: LD_ADDR_VAR 0 6
39135: PUSH
39136: LD_VAR 0 6
39140: PPUSH
39141: LD_VAR 0 8
39145: PPUSH
39146: LD_VAR 0 7
39150: PUSH
39151: LD_VAR 0 9
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PPUSH
39160: CALL_OW 2
39164: ST_TO_ADDR
// break ;
39165: GO 39169
// end ; end ;
39167: GO 39106
39169: POP
39170: POP
// end ; end ;
39171: GO 38970
39173: POP
39174: POP
// if result and not asc then
39175: LD_VAR 0 6
39179: PUSH
39180: LD_VAR 0 4
39184: NOT
39185: AND
39186: IFFALSE 39261
// begin tmp := result ;
39188: LD_ADDR_VAR 0 9
39192: PUSH
39193: LD_VAR 0 6
39197: ST_TO_ADDR
// for i = tmp downto 1 do
39198: LD_ADDR_VAR 0 7
39202: PUSH
39203: DOUBLE
39204: LD_VAR 0 9
39208: INC
39209: ST_TO_ADDR
39210: LD_INT 1
39212: PUSH
39213: FOR_DOWNTO
39214: IFFALSE 39259
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39216: LD_ADDR_VAR 0 6
39220: PUSH
39221: LD_VAR 0 6
39225: PPUSH
39226: LD_VAR 0 9
39230: PUSH
39231: LD_VAR 0 7
39235: MINUS
39236: PUSH
39237: LD_INT 1
39239: PLUS
39240: PPUSH
39241: LD_VAR 0 9
39245: PUSH
39246: LD_VAR 0 7
39250: ARRAY
39251: PPUSH
39252: CALL_OW 1
39256: ST_TO_ADDR
39257: GO 39213
39259: POP
39260: POP
// end ; tmp := [ ] ;
39261: LD_ADDR_VAR 0 9
39265: PUSH
39266: EMPTY
39267: ST_TO_ADDR
// if mode then
39268: LD_VAR 0 5
39272: IFFALSE 39341
// begin for i = 1 to result do
39274: LD_ADDR_VAR 0 7
39278: PUSH
39279: DOUBLE
39280: LD_INT 1
39282: DEC
39283: ST_TO_ADDR
39284: LD_VAR 0 6
39288: PUSH
39289: FOR_TO
39290: IFFALSE 39329
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39292: LD_ADDR_VAR 0 9
39296: PUSH
39297: LD_VAR 0 9
39301: PPUSH
39302: LD_VAR 0 7
39306: PPUSH
39307: LD_VAR 0 6
39311: PUSH
39312: LD_VAR 0 7
39316: ARRAY
39317: PUSH
39318: LD_INT 1
39320: ARRAY
39321: PPUSH
39322: CALL_OW 1
39326: ST_TO_ADDR
39327: GO 39289
39329: POP
39330: POP
// result := tmp ;
39331: LD_ADDR_VAR 0 6
39335: PUSH
39336: LD_VAR 0 9
39340: ST_TO_ADDR
// end ; end ;
39341: LD_VAR 0 6
39345: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39346: LD_INT 0
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
39353: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39354: LD_ADDR_VAR 0 5
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: ST_TO_ADDR
// if not x or not y then
39376: LD_VAR 0 2
39380: NOT
39381: PUSH
39382: LD_VAR 0 3
39386: NOT
39387: OR
39388: IFFALSE 39392
// exit ;
39390: GO 41044
// if not range then
39392: LD_VAR 0 4
39396: NOT
39397: IFFALSE 39407
// range := 10 ;
39399: LD_ADDR_VAR 0 4
39403: PUSH
39404: LD_INT 10
39406: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39407: LD_ADDR_VAR 0 8
39411: PUSH
39412: LD_INT 81
39414: PUSH
39415: LD_VAR 0 1
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 92
39426: PUSH
39427: LD_VAR 0 2
39431: PUSH
39432: LD_VAR 0 3
39436: PUSH
39437: LD_VAR 0 4
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: LD_INT 21
39453: PUSH
39454: LD_INT 3
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: PPUSH
39470: CALL_OW 69
39474: ST_TO_ADDR
// if not tmp then
39475: LD_VAR 0 8
39479: NOT
39480: IFFALSE 39484
// exit ;
39482: GO 41044
// for i in tmp do
39484: LD_ADDR_VAR 0 6
39488: PUSH
39489: LD_VAR 0 8
39493: PUSH
39494: FOR_IN
39495: IFFALSE 41019
// begin points := [ 0 , 0 , 0 ] ;
39497: LD_ADDR_VAR 0 9
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: ST_TO_ADDR
// bpoints := 1 ;
39516: LD_ADDR_VAR 0 10
39520: PUSH
39521: LD_INT 1
39523: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39524: LD_VAR 0 6
39528: PPUSH
39529: CALL_OW 247
39533: PUSH
39534: LD_INT 1
39536: DOUBLE
39537: EQUAL
39538: IFTRUE 39542
39540: GO 40120
39542: POP
// begin if GetClass ( i ) = 1 then
39543: LD_VAR 0 6
39547: PPUSH
39548: CALL_OW 257
39552: PUSH
39553: LD_INT 1
39555: EQUAL
39556: IFFALSE 39577
// points := [ 10 , 5 , 3 ] ;
39558: LD_ADDR_VAR 0 9
39562: PUSH
39563: LD_INT 10
39565: PUSH
39566: LD_INT 5
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39577: LD_VAR 0 6
39581: PPUSH
39582: CALL_OW 257
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: LD_INT 3
39592: PUSH
39593: LD_INT 4
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: LIST
39600: IN
39601: IFFALSE 39622
// points := [ 3 , 2 , 1 ] ;
39603: LD_ADDR_VAR 0 9
39607: PUSH
39608: LD_INT 3
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39622: LD_VAR 0 6
39626: PPUSH
39627: CALL_OW 257
39631: PUSH
39632: LD_INT 5
39634: EQUAL
39635: IFFALSE 39656
// points := [ 130 , 5 , 2 ] ;
39637: LD_ADDR_VAR 0 9
39641: PUSH
39642: LD_INT 130
39644: PUSH
39645: LD_INT 5
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: LIST
39655: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39656: LD_VAR 0 6
39660: PPUSH
39661: CALL_OW 257
39665: PUSH
39666: LD_INT 8
39668: EQUAL
39669: IFFALSE 39690
// points := [ 35 , 35 , 30 ] ;
39671: LD_ADDR_VAR 0 9
39675: PUSH
39676: LD_INT 35
39678: PUSH
39679: LD_INT 35
39681: PUSH
39682: LD_INT 30
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: LIST
39689: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39690: LD_VAR 0 6
39694: PPUSH
39695: CALL_OW 257
39699: PUSH
39700: LD_INT 9
39702: EQUAL
39703: IFFALSE 39724
// points := [ 20 , 55 , 40 ] ;
39705: LD_ADDR_VAR 0 9
39709: PUSH
39710: LD_INT 20
39712: PUSH
39713: LD_INT 55
39715: PUSH
39716: LD_INT 40
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39724: LD_VAR 0 6
39728: PPUSH
39729: CALL_OW 257
39733: PUSH
39734: LD_INT 12
39736: PUSH
39737: LD_INT 16
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: IN
39744: IFFALSE 39765
// points := [ 5 , 3 , 2 ] ;
39746: LD_ADDR_VAR 0 9
39750: PUSH
39751: LD_INT 5
39753: PUSH
39754: LD_INT 3
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39765: LD_VAR 0 6
39769: PPUSH
39770: CALL_OW 257
39774: PUSH
39775: LD_INT 17
39777: EQUAL
39778: IFFALSE 39799
// points := [ 100 , 50 , 75 ] ;
39780: LD_ADDR_VAR 0 9
39784: PUSH
39785: LD_INT 100
39787: PUSH
39788: LD_INT 50
39790: PUSH
39791: LD_INT 75
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: LIST
39798: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39799: LD_VAR 0 6
39803: PPUSH
39804: CALL_OW 257
39808: PUSH
39809: LD_INT 15
39811: EQUAL
39812: IFFALSE 39833
// points := [ 10 , 5 , 3 ] ;
39814: LD_ADDR_VAR 0 9
39818: PUSH
39819: LD_INT 10
39821: PUSH
39822: LD_INT 5
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: LIST
39832: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39833: LD_VAR 0 6
39837: PPUSH
39838: CALL_OW 257
39842: PUSH
39843: LD_INT 14
39845: EQUAL
39846: IFFALSE 39867
// points := [ 10 , 0 , 0 ] ;
39848: LD_ADDR_VAR 0 9
39852: PUSH
39853: LD_INT 10
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39867: LD_VAR 0 6
39871: PPUSH
39872: CALL_OW 257
39876: PUSH
39877: LD_INT 11
39879: EQUAL
39880: IFFALSE 39901
// points := [ 30 , 10 , 5 ] ;
39882: LD_ADDR_VAR 0 9
39886: PUSH
39887: LD_INT 30
39889: PUSH
39890: LD_INT 10
39892: PUSH
39893: LD_INT 5
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: LIST
39900: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39901: LD_VAR 0 1
39905: PPUSH
39906: LD_INT 5
39908: PPUSH
39909: CALL_OW 321
39913: PUSH
39914: LD_INT 2
39916: EQUAL
39917: IFFALSE 39934
// bpoints := bpoints * 1.8 ;
39919: LD_ADDR_VAR 0 10
39923: PUSH
39924: LD_VAR 0 10
39928: PUSH
39929: LD_REAL  1.80000000000000E+0000
39932: MUL
39933: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39934: LD_VAR 0 6
39938: PPUSH
39939: CALL_OW 257
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: LD_INT 3
39952: PUSH
39953: LD_INT 4
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: IN
39962: PUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: LD_INT 51
39970: PPUSH
39971: CALL_OW 321
39975: PUSH
39976: LD_INT 2
39978: EQUAL
39979: AND
39980: IFFALSE 39997
// bpoints := bpoints * 1.2 ;
39982: LD_ADDR_VAR 0 10
39986: PUSH
39987: LD_VAR 0 10
39991: PUSH
39992: LD_REAL  1.20000000000000E+0000
39995: MUL
39996: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39997: LD_VAR 0 6
40001: PPUSH
40002: CALL_OW 257
40006: PUSH
40007: LD_INT 5
40009: PUSH
40010: LD_INT 7
40012: PUSH
40013: LD_INT 9
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: IN
40021: PUSH
40022: LD_VAR 0 1
40026: PPUSH
40027: LD_INT 52
40029: PPUSH
40030: CALL_OW 321
40034: PUSH
40035: LD_INT 2
40037: EQUAL
40038: AND
40039: IFFALSE 40056
// bpoints := bpoints * 1.5 ;
40041: LD_ADDR_VAR 0 10
40045: PUSH
40046: LD_VAR 0 10
40050: PUSH
40051: LD_REAL  1.50000000000000E+0000
40054: MUL
40055: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40056: LD_VAR 0 1
40060: PPUSH
40061: LD_INT 66
40063: PPUSH
40064: CALL_OW 321
40068: PUSH
40069: LD_INT 2
40071: EQUAL
40072: IFFALSE 40089
// bpoints := bpoints * 1.1 ;
40074: LD_ADDR_VAR 0 10
40078: PUSH
40079: LD_VAR 0 10
40083: PUSH
40084: LD_REAL  1.10000000000000E+0000
40087: MUL
40088: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40089: LD_ADDR_VAR 0 10
40093: PUSH
40094: LD_VAR 0 10
40098: PUSH
40099: LD_VAR 0 6
40103: PPUSH
40104: LD_INT 1
40106: PPUSH
40107: CALL_OW 259
40111: PUSH
40112: LD_REAL  1.15000000000000E+0000
40115: MUL
40116: MUL
40117: ST_TO_ADDR
// end ; unit_vehicle :
40118: GO 40948
40120: LD_INT 2
40122: DOUBLE
40123: EQUAL
40124: IFTRUE 40128
40126: GO 40936
40128: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40129: LD_VAR 0 6
40133: PPUSH
40134: CALL_OW 264
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: LD_INT 42
40144: PUSH
40145: LD_INT 24
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: IN
40153: IFFALSE 40174
// points := [ 25 , 5 , 3 ] ;
40155: LD_ADDR_VAR 0 9
40159: PUSH
40160: LD_INT 25
40162: PUSH
40163: LD_INT 5
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40174: LD_VAR 0 6
40178: PPUSH
40179: CALL_OW 264
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: LD_INT 43
40189: PUSH
40190: LD_INT 25
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: IN
40198: IFFALSE 40219
// points := [ 40 , 15 , 5 ] ;
40200: LD_ADDR_VAR 0 9
40204: PUSH
40205: LD_INT 40
40207: PUSH
40208: LD_INT 15
40210: PUSH
40211: LD_INT 5
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40219: LD_VAR 0 6
40223: PPUSH
40224: CALL_OW 264
40228: PUSH
40229: LD_INT 3
40231: PUSH
40232: LD_INT 23
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: IN
40239: IFFALSE 40260
// points := [ 7 , 25 , 8 ] ;
40241: LD_ADDR_VAR 0 9
40245: PUSH
40246: LD_INT 7
40248: PUSH
40249: LD_INT 25
40251: PUSH
40252: LD_INT 8
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40260: LD_VAR 0 6
40264: PPUSH
40265: CALL_OW 264
40269: PUSH
40270: LD_INT 5
40272: PUSH
40273: LD_INT 27
40275: PUSH
40276: LD_INT 44
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: IN
40284: IFFALSE 40305
// points := [ 14 , 50 , 16 ] ;
40286: LD_ADDR_VAR 0 9
40290: PUSH
40291: LD_INT 14
40293: PUSH
40294: LD_INT 50
40296: PUSH
40297: LD_INT 16
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: LIST
40304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40305: LD_VAR 0 6
40309: PPUSH
40310: CALL_OW 264
40314: PUSH
40315: LD_INT 6
40317: PUSH
40318: LD_INT 46
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: IN
40325: IFFALSE 40346
// points := [ 32 , 120 , 70 ] ;
40327: LD_ADDR_VAR 0 9
40331: PUSH
40332: LD_INT 32
40334: PUSH
40335: LD_INT 120
40337: PUSH
40338: LD_INT 70
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40346: LD_VAR 0 6
40350: PPUSH
40351: CALL_OW 264
40355: PUSH
40356: LD_INT 7
40358: PUSH
40359: LD_INT 28
40361: PUSH
40362: LD_INT 45
40364: PUSH
40365: LD_EXP 49
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: IN
40376: IFFALSE 40397
// points := [ 35 , 20 , 45 ] ;
40378: LD_ADDR_VAR 0 9
40382: PUSH
40383: LD_INT 35
40385: PUSH
40386: LD_INT 20
40388: PUSH
40389: LD_INT 45
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40397: LD_VAR 0 6
40401: PPUSH
40402: CALL_OW 264
40406: PUSH
40407: LD_INT 47
40409: PUSH
40410: EMPTY
40411: LIST
40412: IN
40413: IFFALSE 40434
// points := [ 67 , 45 , 75 ] ;
40415: LD_ADDR_VAR 0 9
40419: PUSH
40420: LD_INT 67
40422: PUSH
40423: LD_INT 45
40425: PUSH
40426: LD_INT 75
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40434: LD_VAR 0 6
40438: PPUSH
40439: CALL_OW 264
40443: PUSH
40444: LD_INT 26
40446: PUSH
40447: EMPTY
40448: LIST
40449: IN
40450: IFFALSE 40471
// points := [ 120 , 30 , 80 ] ;
40452: LD_ADDR_VAR 0 9
40456: PUSH
40457: LD_INT 120
40459: PUSH
40460: LD_INT 30
40462: PUSH
40463: LD_INT 80
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40471: LD_VAR 0 6
40475: PPUSH
40476: CALL_OW 264
40480: PUSH
40481: LD_INT 22
40483: PUSH
40484: EMPTY
40485: LIST
40486: IN
40487: IFFALSE 40508
// points := [ 40 , 1 , 1 ] ;
40489: LD_ADDR_VAR 0 9
40493: PUSH
40494: LD_INT 40
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40508: LD_VAR 0 6
40512: PPUSH
40513: CALL_OW 264
40517: PUSH
40518: LD_INT 29
40520: PUSH
40521: EMPTY
40522: LIST
40523: IN
40524: IFFALSE 40545
// points := [ 70 , 200 , 400 ] ;
40526: LD_ADDR_VAR 0 9
40530: PUSH
40531: LD_INT 70
40533: PUSH
40534: LD_INT 200
40536: PUSH
40537: LD_INT 400
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40545: LD_VAR 0 6
40549: PPUSH
40550: CALL_OW 264
40554: PUSH
40555: LD_INT 14
40557: PUSH
40558: LD_INT 53
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: IN
40565: IFFALSE 40586
// points := [ 40 , 10 , 20 ] ;
40567: LD_ADDR_VAR 0 9
40571: PUSH
40572: LD_INT 40
40574: PUSH
40575: LD_INT 10
40577: PUSH
40578: LD_INT 20
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40586: LD_VAR 0 6
40590: PPUSH
40591: CALL_OW 264
40595: PUSH
40596: LD_INT 9
40598: PUSH
40599: EMPTY
40600: LIST
40601: IN
40602: IFFALSE 40623
// points := [ 5 , 70 , 20 ] ;
40604: LD_ADDR_VAR 0 9
40608: PUSH
40609: LD_INT 5
40611: PUSH
40612: LD_INT 70
40614: PUSH
40615: LD_INT 20
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40623: LD_VAR 0 6
40627: PPUSH
40628: CALL_OW 264
40632: PUSH
40633: LD_INT 10
40635: PUSH
40636: EMPTY
40637: LIST
40638: IN
40639: IFFALSE 40660
// points := [ 35 , 110 , 70 ] ;
40641: LD_ADDR_VAR 0 9
40645: PUSH
40646: LD_INT 35
40648: PUSH
40649: LD_INT 110
40651: PUSH
40652: LD_INT 70
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: LIST
40659: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40660: LD_VAR 0 6
40664: PPUSH
40665: CALL_OW 265
40669: PUSH
40670: LD_INT 25
40672: EQUAL
40673: IFFALSE 40694
// points := [ 80 , 65 , 100 ] ;
40675: LD_ADDR_VAR 0 9
40679: PUSH
40680: LD_INT 80
40682: PUSH
40683: LD_INT 65
40685: PUSH
40686: LD_INT 100
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40694: LD_VAR 0 6
40698: PPUSH
40699: CALL_OW 263
40703: PUSH
40704: LD_INT 1
40706: EQUAL
40707: IFFALSE 40742
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40709: LD_ADDR_VAR 0 10
40713: PUSH
40714: LD_VAR 0 10
40718: PUSH
40719: LD_VAR 0 6
40723: PPUSH
40724: CALL_OW 311
40728: PPUSH
40729: LD_INT 3
40731: PPUSH
40732: CALL_OW 259
40736: PUSH
40737: LD_INT 4
40739: MUL
40740: MUL
40741: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40742: LD_VAR 0 6
40746: PPUSH
40747: CALL_OW 263
40751: PUSH
40752: LD_INT 2
40754: EQUAL
40755: IFFALSE 40806
// begin j := IsControledBy ( i ) ;
40757: LD_ADDR_VAR 0 7
40761: PUSH
40762: LD_VAR 0 6
40766: PPUSH
40767: CALL_OW 312
40771: ST_TO_ADDR
// if j then
40772: LD_VAR 0 7
40776: IFFALSE 40806
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40778: LD_ADDR_VAR 0 10
40782: PUSH
40783: LD_VAR 0 10
40787: PUSH
40788: LD_VAR 0 7
40792: PPUSH
40793: LD_INT 3
40795: PPUSH
40796: CALL_OW 259
40800: PUSH
40801: LD_INT 3
40803: MUL
40804: MUL
40805: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40806: LD_VAR 0 6
40810: PPUSH
40811: CALL_OW 264
40815: PUSH
40816: LD_INT 5
40818: PUSH
40819: LD_INT 6
40821: PUSH
40822: LD_INT 46
40824: PUSH
40825: LD_INT 44
40827: PUSH
40828: LD_INT 47
40830: PUSH
40831: LD_INT 45
40833: PUSH
40834: LD_INT 28
40836: PUSH
40837: LD_INT 7
40839: PUSH
40840: LD_INT 27
40842: PUSH
40843: LD_INT 29
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: IN
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: LD_INT 52
40866: PPUSH
40867: CALL_OW 321
40871: PUSH
40872: LD_INT 2
40874: EQUAL
40875: AND
40876: IFFALSE 40893
// bpoints := bpoints * 1.2 ;
40878: LD_ADDR_VAR 0 10
40882: PUSH
40883: LD_VAR 0 10
40887: PUSH
40888: LD_REAL  1.20000000000000E+0000
40891: MUL
40892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40893: LD_VAR 0 6
40897: PPUSH
40898: CALL_OW 264
40902: PUSH
40903: LD_INT 6
40905: PUSH
40906: LD_INT 46
40908: PUSH
40909: LD_INT 47
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: IN
40917: IFFALSE 40934
// bpoints := bpoints * 1.2 ;
40919: LD_ADDR_VAR 0 10
40923: PUSH
40924: LD_VAR 0 10
40928: PUSH
40929: LD_REAL  1.20000000000000E+0000
40932: MUL
40933: ST_TO_ADDR
// end ; unit_building :
40934: GO 40948
40936: LD_INT 3
40938: DOUBLE
40939: EQUAL
40940: IFTRUE 40944
40942: GO 40947
40944: POP
// ; end ;
40945: GO 40948
40947: POP
// for j = 1 to 3 do
40948: LD_ADDR_VAR 0 7
40952: PUSH
40953: DOUBLE
40954: LD_INT 1
40956: DEC
40957: ST_TO_ADDR
40958: LD_INT 3
40960: PUSH
40961: FOR_TO
40962: IFFALSE 41015
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40964: LD_ADDR_VAR 0 5
40968: PUSH
40969: LD_VAR 0 5
40973: PPUSH
40974: LD_VAR 0 7
40978: PPUSH
40979: LD_VAR 0 5
40983: PUSH
40984: LD_VAR 0 7
40988: ARRAY
40989: PUSH
40990: LD_VAR 0 9
40994: PUSH
40995: LD_VAR 0 7
40999: ARRAY
41000: PUSH
41001: LD_VAR 0 10
41005: MUL
41006: PLUS
41007: PPUSH
41008: CALL_OW 1
41012: ST_TO_ADDR
41013: GO 40961
41015: POP
41016: POP
// end ;
41017: GO 39494
41019: POP
41020: POP
// result := Replace ( result , 4 , tmp ) ;
41021: LD_ADDR_VAR 0 5
41025: PUSH
41026: LD_VAR 0 5
41030: PPUSH
41031: LD_INT 4
41033: PPUSH
41034: LD_VAR 0 8
41038: PPUSH
41039: CALL_OW 1
41043: ST_TO_ADDR
// end ;
41044: LD_VAR 0 5
41048: RET
// export function DangerAtRange ( unit , range ) ; begin
41049: LD_INT 0
41051: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41052: LD_ADDR_VAR 0 3
41056: PUSH
41057: LD_VAR 0 1
41061: PPUSH
41062: CALL_OW 255
41066: PPUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: CALL_OW 250
41076: PPUSH
41077: LD_VAR 0 1
41081: PPUSH
41082: CALL_OW 251
41086: PPUSH
41087: LD_VAR 0 2
41091: PPUSH
41092: CALL 39346 0 4
41096: ST_TO_ADDR
// end ;
41097: LD_VAR 0 3
41101: RET
// export function DangerInArea ( side , area ) ; begin
41102: LD_INT 0
41104: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41105: LD_ADDR_VAR 0 3
41109: PUSH
41110: LD_VAR 0 2
41114: PPUSH
41115: LD_INT 81
41117: PUSH
41118: LD_VAR 0 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PPUSH
41127: CALL_OW 70
41131: ST_TO_ADDR
// end ;
41132: LD_VAR 0 3
41136: RET
// export function IsExtension ( b ) ; begin
41137: LD_INT 0
41139: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41140: LD_ADDR_VAR 0 2
41144: PUSH
41145: LD_VAR 0 1
41149: PUSH
41150: LD_INT 23
41152: PUSH
41153: LD_INT 20
41155: PUSH
41156: LD_INT 22
41158: PUSH
41159: LD_INT 17
41161: PUSH
41162: LD_INT 24
41164: PUSH
41165: LD_INT 21
41167: PUSH
41168: LD_INT 19
41170: PUSH
41171: LD_INT 16
41173: PUSH
41174: LD_INT 25
41176: PUSH
41177: LD_INT 18
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: IN
41192: ST_TO_ADDR
// end ;
41193: LD_VAR 0 2
41197: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41198: LD_INT 0
41200: PPUSH
41201: PPUSH
41202: PPUSH
// result := [ ] ;
41203: LD_ADDR_VAR 0 4
41207: PUSH
41208: EMPTY
41209: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41210: LD_ADDR_VAR 0 5
41214: PUSH
41215: LD_VAR 0 2
41219: PPUSH
41220: LD_INT 21
41222: PUSH
41223: LD_INT 3
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PPUSH
41230: CALL_OW 70
41234: ST_TO_ADDR
// if not tmp then
41235: LD_VAR 0 5
41239: NOT
41240: IFFALSE 41244
// exit ;
41242: GO 41308
// if checkLink then
41244: LD_VAR 0 3
41248: IFFALSE 41298
// begin for i in tmp do
41250: LD_ADDR_VAR 0 6
41254: PUSH
41255: LD_VAR 0 5
41259: PUSH
41260: FOR_IN
41261: IFFALSE 41296
// if GetBase ( i ) <> base then
41263: LD_VAR 0 6
41267: PPUSH
41268: CALL_OW 274
41272: PUSH
41273: LD_VAR 0 1
41277: NONEQUAL
41278: IFFALSE 41294
// ComLinkToBase ( base , i ) ;
41280: LD_VAR 0 1
41284: PPUSH
41285: LD_VAR 0 6
41289: PPUSH
41290: CALL_OW 169
41294: GO 41260
41296: POP
41297: POP
// end ; result := tmp ;
41298: LD_ADDR_VAR 0 4
41302: PUSH
41303: LD_VAR 0 5
41307: ST_TO_ADDR
// end ;
41308: LD_VAR 0 4
41312: RET
// export function ComComplete ( units , b ) ; var i ; begin
41313: LD_INT 0
41315: PPUSH
41316: PPUSH
// if not units then
41317: LD_VAR 0 1
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 41416
// for i in units do
41326: LD_ADDR_VAR 0 4
41330: PUSH
41331: LD_VAR 0 1
41335: PUSH
41336: FOR_IN
41337: IFFALSE 41414
// if BuildingStatus ( b ) = bs_build then
41339: LD_VAR 0 2
41343: PPUSH
41344: CALL_OW 461
41348: PUSH
41349: LD_INT 1
41351: EQUAL
41352: IFFALSE 41412
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41354: LD_VAR 0 4
41358: PPUSH
41359: LD_STRING h
41361: PUSH
41362: LD_VAR 0 2
41366: PPUSH
41367: CALL_OW 250
41371: PUSH
41372: LD_VAR 0 2
41376: PPUSH
41377: CALL_OW 251
41381: PUSH
41382: LD_VAR 0 2
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: PPUSH
41408: CALL_OW 446
41412: GO 41336
41414: POP
41415: POP
// end ;
41416: LD_VAR 0 3
41420: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41421: LD_INT 0
41423: PPUSH
41424: PPUSH
41425: PPUSH
41426: PPUSH
41427: PPUSH
41428: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41429: LD_VAR 0 1
41433: NOT
41434: PUSH
41435: LD_VAR 0 1
41439: PPUSH
41440: CALL_OW 263
41444: PUSH
41445: LD_INT 2
41447: NONEQUAL
41448: OR
41449: IFFALSE 41453
// exit ;
41451: GO 41769
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41453: LD_ADDR_VAR 0 6
41457: PUSH
41458: LD_INT 22
41460: PUSH
41461: LD_VAR 0 1
41465: PPUSH
41466: CALL_OW 255
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: LD_INT 30
41480: PUSH
41481: LD_INT 36
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 34
41490: PUSH
41491: LD_INT 31
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PPUSH
41507: CALL_OW 69
41511: ST_TO_ADDR
// if not tmp then
41512: LD_VAR 0 6
41516: NOT
41517: IFFALSE 41521
// exit ;
41519: GO 41769
// result := [ ] ;
41521: LD_ADDR_VAR 0 2
41525: PUSH
41526: EMPTY
41527: ST_TO_ADDR
// for i in tmp do
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_VAR 0 6
41537: PUSH
41538: FOR_IN
41539: IFFALSE 41610
// begin t := UnitsInside ( i ) ;
41541: LD_ADDR_VAR 0 4
41545: PUSH
41546: LD_VAR 0 3
41550: PPUSH
41551: CALL_OW 313
41555: ST_TO_ADDR
// if t then
41556: LD_VAR 0 4
41560: IFFALSE 41608
// for j in t do
41562: LD_ADDR_VAR 0 7
41566: PUSH
41567: LD_VAR 0 4
41571: PUSH
41572: FOR_IN
41573: IFFALSE 41606
// result := Replace ( result , result + 1 , j ) ;
41575: LD_ADDR_VAR 0 2
41579: PUSH
41580: LD_VAR 0 2
41584: PPUSH
41585: LD_VAR 0 2
41589: PUSH
41590: LD_INT 1
41592: PLUS
41593: PPUSH
41594: LD_VAR 0 7
41598: PPUSH
41599: CALL_OW 1
41603: ST_TO_ADDR
41604: GO 41572
41606: POP
41607: POP
// end ;
41608: GO 41538
41610: POP
41611: POP
// if not result then
41612: LD_VAR 0 2
41616: NOT
41617: IFFALSE 41621
// exit ;
41619: GO 41769
// mech := result [ 1 ] ;
41621: LD_ADDR_VAR 0 5
41625: PUSH
41626: LD_VAR 0 2
41630: PUSH
41631: LD_INT 1
41633: ARRAY
41634: ST_TO_ADDR
// if result > 1 then
41635: LD_VAR 0 2
41639: PUSH
41640: LD_INT 1
41642: GREATER
41643: IFFALSE 41755
// begin for i = 2 to result do
41645: LD_ADDR_VAR 0 3
41649: PUSH
41650: DOUBLE
41651: LD_INT 2
41653: DEC
41654: ST_TO_ADDR
41655: LD_VAR 0 2
41659: PUSH
41660: FOR_TO
41661: IFFALSE 41753
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41663: LD_ADDR_VAR 0 4
41667: PUSH
41668: LD_VAR 0 2
41672: PUSH
41673: LD_VAR 0 3
41677: ARRAY
41678: PPUSH
41679: LD_INT 3
41681: PPUSH
41682: CALL_OW 259
41686: PUSH
41687: LD_VAR 0 2
41691: PUSH
41692: LD_VAR 0 3
41696: ARRAY
41697: PPUSH
41698: CALL_OW 432
41702: MINUS
41703: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41704: LD_VAR 0 4
41708: PUSH
41709: LD_VAR 0 5
41713: PPUSH
41714: LD_INT 3
41716: PPUSH
41717: CALL_OW 259
41721: PUSH
41722: LD_VAR 0 5
41726: PPUSH
41727: CALL_OW 432
41731: MINUS
41732: GREATEREQUAL
41733: IFFALSE 41751
// mech := result [ i ] ;
41735: LD_ADDR_VAR 0 5
41739: PUSH
41740: LD_VAR 0 2
41744: PUSH
41745: LD_VAR 0 3
41749: ARRAY
41750: ST_TO_ADDR
// end ;
41751: GO 41660
41753: POP
41754: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41755: LD_VAR 0 1
41759: PPUSH
41760: LD_VAR 0 5
41764: PPUSH
41765: CALL_OW 135
// end ;
41769: LD_VAR 0 2
41773: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41774: LD_INT 0
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
41784: PPUSH
41785: PPUSH
41786: PPUSH
41787: PPUSH
41788: PPUSH
// result := [ ] ;
41789: LD_ADDR_VAR 0 7
41793: PUSH
41794: EMPTY
41795: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41796: LD_VAR 0 1
41800: PPUSH
41801: CALL_OW 266
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: IN
41816: NOT
41817: IFFALSE 41821
// exit ;
41819: GO 43455
// if name then
41821: LD_VAR 0 3
41825: IFFALSE 41841
// SetBName ( base_dep , name ) ;
41827: LD_VAR 0 1
41831: PPUSH
41832: LD_VAR 0 3
41836: PPUSH
41837: CALL_OW 500
// base := GetBase ( base_dep ) ;
41841: LD_ADDR_VAR 0 15
41845: PUSH
41846: LD_VAR 0 1
41850: PPUSH
41851: CALL_OW 274
41855: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41856: LD_ADDR_VAR 0 16
41860: PUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: CALL_OW 255
41870: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41871: LD_ADDR_VAR 0 17
41875: PUSH
41876: LD_VAR 0 1
41880: PPUSH
41881: CALL_OW 248
41885: ST_TO_ADDR
// if sources then
41886: LD_VAR 0 5
41890: IFFALSE 41937
// for i = 1 to 3 do
41892: LD_ADDR_VAR 0 8
41896: PUSH
41897: DOUBLE
41898: LD_INT 1
41900: DEC
41901: ST_TO_ADDR
41902: LD_INT 3
41904: PUSH
41905: FOR_TO
41906: IFFALSE 41935
// AddResourceType ( base , i , sources [ i ] ) ;
41908: LD_VAR 0 15
41912: PPUSH
41913: LD_VAR 0 8
41917: PPUSH
41918: LD_VAR 0 5
41922: PUSH
41923: LD_VAR 0 8
41927: ARRAY
41928: PPUSH
41929: CALL_OW 276
41933: GO 41905
41935: POP
41936: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41937: LD_ADDR_VAR 0 18
41941: PUSH
41942: LD_VAR 0 15
41946: PPUSH
41947: LD_VAR 0 2
41951: PPUSH
41952: LD_INT 1
41954: PPUSH
41955: CALL 41198 0 3
41959: ST_TO_ADDR
// InitHc ;
41960: CALL_OW 19
// InitUc ;
41964: CALL_OW 18
// uc_side := side ;
41968: LD_ADDR_OWVAR 20
41972: PUSH
41973: LD_VAR 0 16
41977: ST_TO_ADDR
// uc_nation := nation ;
41978: LD_ADDR_OWVAR 21
41982: PUSH
41983: LD_VAR 0 17
41987: ST_TO_ADDR
// if buildings then
41988: LD_VAR 0 18
41992: IFFALSE 43314
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41994: LD_ADDR_VAR 0 19
41998: PUSH
41999: LD_VAR 0 18
42003: PPUSH
42004: LD_INT 2
42006: PUSH
42007: LD_INT 30
42009: PUSH
42010: LD_INT 29
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 30
42019: PUSH
42020: LD_INT 30
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: PPUSH
42032: CALL_OW 72
42036: ST_TO_ADDR
// if tmp then
42037: LD_VAR 0 19
42041: IFFALSE 42089
// for i in tmp do
42043: LD_ADDR_VAR 0 8
42047: PUSH
42048: LD_VAR 0 19
42052: PUSH
42053: FOR_IN
42054: IFFALSE 42087
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42056: LD_VAR 0 8
42060: PPUSH
42061: CALL_OW 250
42065: PPUSH
42066: LD_VAR 0 8
42070: PPUSH
42071: CALL_OW 251
42075: PPUSH
42076: LD_VAR 0 16
42080: PPUSH
42081: CALL_OW 441
42085: GO 42053
42087: POP
42088: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42089: LD_VAR 0 18
42093: PPUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 30
42099: PUSH
42100: LD_INT 32
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 30
42109: PUSH
42110: LD_INT 33
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: PPUSH
42122: CALL_OW 72
42126: IFFALSE 42214
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42128: LD_ADDR_VAR 0 8
42132: PUSH
42133: LD_VAR 0 18
42137: PPUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 30
42143: PUSH
42144: LD_INT 32
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 30
42153: PUSH
42154: LD_INT 33
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: PPUSH
42166: CALL_OW 72
42170: PUSH
42171: FOR_IN
42172: IFFALSE 42212
// begin if not GetBWeapon ( i ) then
42174: LD_VAR 0 8
42178: PPUSH
42179: CALL_OW 269
42183: NOT
42184: IFFALSE 42210
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42186: LD_VAR 0 8
42190: PPUSH
42191: LD_VAR 0 8
42195: PPUSH
42196: LD_VAR 0 2
42200: PPUSH
42201: CALL 43460 0 2
42205: PPUSH
42206: CALL_OW 431
// end ;
42210: GO 42171
42212: POP
42213: POP
// end ; for i = 1 to personel do
42214: LD_ADDR_VAR 0 8
42218: PUSH
42219: DOUBLE
42220: LD_INT 1
42222: DEC
42223: ST_TO_ADDR
42224: LD_VAR 0 6
42228: PUSH
42229: FOR_TO
42230: IFFALSE 43294
// begin if i > 4 then
42232: LD_VAR 0 8
42236: PUSH
42237: LD_INT 4
42239: GREATER
42240: IFFALSE 42244
// break ;
42242: GO 43294
// case i of 1 :
42244: LD_VAR 0 8
42248: PUSH
42249: LD_INT 1
42251: DOUBLE
42252: EQUAL
42253: IFTRUE 42257
42255: GO 42337
42257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42258: LD_ADDR_VAR 0 12
42262: PUSH
42263: LD_VAR 0 18
42267: PPUSH
42268: LD_INT 22
42270: PUSH
42271: LD_VAR 0 16
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 58
42282: PUSH
42283: EMPTY
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 30
42291: PUSH
42292: LD_INT 32
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 30
42301: PUSH
42302: LD_INT 4
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 30
42311: PUSH
42312: LD_INT 5
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: LIST
42329: PPUSH
42330: CALL_OW 72
42334: ST_TO_ADDR
42335: GO 42559
42337: LD_INT 2
42339: DOUBLE
42340: EQUAL
42341: IFTRUE 42345
42343: GO 42407
42345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42346: LD_ADDR_VAR 0 12
42350: PUSH
42351: LD_VAR 0 18
42355: PPUSH
42356: LD_INT 22
42358: PUSH
42359: LD_VAR 0 16
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 30
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 30
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PPUSH
42400: CALL_OW 72
42404: ST_TO_ADDR
42405: GO 42559
42407: LD_INT 3
42409: DOUBLE
42410: EQUAL
42411: IFTRUE 42415
42413: GO 42477
42415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42416: LD_ADDR_VAR 0 12
42420: PUSH
42421: LD_VAR 0 18
42425: PPUSH
42426: LD_INT 22
42428: PUSH
42429: LD_VAR 0 16
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 30
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 30
42453: PUSH
42454: LD_INT 3
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PPUSH
42470: CALL_OW 72
42474: ST_TO_ADDR
42475: GO 42559
42477: LD_INT 4
42479: DOUBLE
42480: EQUAL
42481: IFTRUE 42485
42483: GO 42558
42485: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42486: LD_ADDR_VAR 0 12
42490: PUSH
42491: LD_VAR 0 18
42495: PPUSH
42496: LD_INT 22
42498: PUSH
42499: LD_VAR 0 16
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: LD_INT 30
42513: PUSH
42514: LD_INT 6
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 30
42523: PUSH
42524: LD_INT 7
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 30
42533: PUSH
42534: LD_INT 8
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PPUSH
42551: CALL_OW 72
42555: ST_TO_ADDR
42556: GO 42559
42558: POP
// if i = 1 then
42559: LD_VAR 0 8
42563: PUSH
42564: LD_INT 1
42566: EQUAL
42567: IFFALSE 42678
// begin tmp := [ ] ;
42569: LD_ADDR_VAR 0 19
42573: PUSH
42574: EMPTY
42575: ST_TO_ADDR
// for j in f do
42576: LD_ADDR_VAR 0 9
42580: PUSH
42581: LD_VAR 0 12
42585: PUSH
42586: FOR_IN
42587: IFFALSE 42660
// if GetBType ( j ) = b_bunker then
42589: LD_VAR 0 9
42593: PPUSH
42594: CALL_OW 266
42598: PUSH
42599: LD_INT 32
42601: EQUAL
42602: IFFALSE 42629
// tmp := Insert ( tmp , 1 , j ) else
42604: LD_ADDR_VAR 0 19
42608: PUSH
42609: LD_VAR 0 19
42613: PPUSH
42614: LD_INT 1
42616: PPUSH
42617: LD_VAR 0 9
42621: PPUSH
42622: CALL_OW 2
42626: ST_TO_ADDR
42627: GO 42658
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42629: LD_ADDR_VAR 0 19
42633: PUSH
42634: LD_VAR 0 19
42638: PPUSH
42639: LD_VAR 0 19
42643: PUSH
42644: LD_INT 1
42646: PLUS
42647: PPUSH
42648: LD_VAR 0 9
42652: PPUSH
42653: CALL_OW 2
42657: ST_TO_ADDR
42658: GO 42586
42660: POP
42661: POP
// if tmp then
42662: LD_VAR 0 19
42666: IFFALSE 42678
// f := tmp ;
42668: LD_ADDR_VAR 0 12
42672: PUSH
42673: LD_VAR 0 19
42677: ST_TO_ADDR
// end ; x := personel [ i ] ;
42678: LD_ADDR_VAR 0 13
42682: PUSH
42683: LD_VAR 0 6
42687: PUSH
42688: LD_VAR 0 8
42692: ARRAY
42693: ST_TO_ADDR
// if x = - 1 then
42694: LD_VAR 0 13
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: EQUAL
42703: IFFALSE 42912
// begin for j in f do
42705: LD_ADDR_VAR 0 9
42709: PUSH
42710: LD_VAR 0 12
42714: PUSH
42715: FOR_IN
42716: IFFALSE 42908
// repeat InitHc ;
42718: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42722: LD_VAR 0 9
42726: PPUSH
42727: CALL_OW 266
42731: PUSH
42732: LD_INT 5
42734: EQUAL
42735: IFFALSE 42805
// begin if UnitsInside ( j ) < 3 then
42737: LD_VAR 0 9
42741: PPUSH
42742: CALL_OW 313
42746: PUSH
42747: LD_INT 3
42749: LESS
42750: IFFALSE 42786
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42752: LD_INT 0
42754: PPUSH
42755: LD_INT 5
42757: PUSH
42758: LD_INT 8
42760: PUSH
42761: LD_INT 9
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: PUSH
42769: LD_VAR 0 17
42773: ARRAY
42774: PPUSH
42775: LD_VAR 0 4
42779: PPUSH
42780: CALL_OW 380
42784: GO 42803
// PrepareHuman ( false , i , skill ) ;
42786: LD_INT 0
42788: PPUSH
42789: LD_VAR 0 8
42793: PPUSH
42794: LD_VAR 0 4
42798: PPUSH
42799: CALL_OW 380
// end else
42803: GO 42822
// PrepareHuman ( false , i , skill ) ;
42805: LD_INT 0
42807: PPUSH
42808: LD_VAR 0 8
42812: PPUSH
42813: LD_VAR 0 4
42817: PPUSH
42818: CALL_OW 380
// un := CreateHuman ;
42822: LD_ADDR_VAR 0 14
42826: PUSH
42827: CALL_OW 44
42831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42832: LD_ADDR_VAR 0 7
42836: PUSH
42837: LD_VAR 0 7
42841: PPUSH
42842: LD_INT 1
42844: PPUSH
42845: LD_VAR 0 14
42849: PPUSH
42850: CALL_OW 2
42854: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42855: LD_VAR 0 14
42859: PPUSH
42860: LD_VAR 0 9
42864: PPUSH
42865: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42869: LD_VAR 0 9
42873: PPUSH
42874: CALL_OW 313
42878: PUSH
42879: LD_INT 6
42881: EQUAL
42882: PUSH
42883: LD_VAR 0 9
42887: PPUSH
42888: CALL_OW 266
42892: PUSH
42893: LD_INT 32
42895: PUSH
42896: LD_INT 31
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: IN
42903: OR
42904: IFFALSE 42718
42906: GO 42715
42908: POP
42909: POP
// end else
42910: GO 43292
// for j = 1 to x do
42912: LD_ADDR_VAR 0 9
42916: PUSH
42917: DOUBLE
42918: LD_INT 1
42920: DEC
42921: ST_TO_ADDR
42922: LD_VAR 0 13
42926: PUSH
42927: FOR_TO
42928: IFFALSE 43290
// begin InitHc ;
42930: CALL_OW 19
// if not f then
42934: LD_VAR 0 12
42938: NOT
42939: IFFALSE 43028
// begin PrepareHuman ( false , i , skill ) ;
42941: LD_INT 0
42943: PPUSH
42944: LD_VAR 0 8
42948: PPUSH
42949: LD_VAR 0 4
42953: PPUSH
42954: CALL_OW 380
// un := CreateHuman ;
42958: LD_ADDR_VAR 0 14
42962: PUSH
42963: CALL_OW 44
42967: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42968: LD_ADDR_VAR 0 7
42972: PUSH
42973: LD_VAR 0 7
42977: PPUSH
42978: LD_INT 1
42980: PPUSH
42981: LD_VAR 0 14
42985: PPUSH
42986: CALL_OW 2
42990: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42991: LD_VAR 0 14
42995: PPUSH
42996: LD_VAR 0 1
43000: PPUSH
43001: CALL_OW 250
43005: PPUSH
43006: LD_VAR 0 1
43010: PPUSH
43011: CALL_OW 251
43015: PPUSH
43016: LD_INT 10
43018: PPUSH
43019: LD_INT 0
43021: PPUSH
43022: CALL_OW 50
// continue ;
43026: GO 42927
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43028: LD_VAR 0 12
43032: PUSH
43033: LD_INT 1
43035: ARRAY
43036: PPUSH
43037: CALL_OW 313
43041: PUSH
43042: LD_VAR 0 12
43046: PUSH
43047: LD_INT 1
43049: ARRAY
43050: PPUSH
43051: CALL_OW 266
43055: PUSH
43056: LD_INT 32
43058: PUSH
43059: LD_INT 31
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: IN
43066: AND
43067: PUSH
43068: LD_VAR 0 12
43072: PUSH
43073: LD_INT 1
43075: ARRAY
43076: PPUSH
43077: CALL_OW 313
43081: PUSH
43082: LD_INT 6
43084: EQUAL
43085: OR
43086: IFFALSE 43106
// f := Delete ( f , 1 ) ;
43088: LD_ADDR_VAR 0 12
43092: PUSH
43093: LD_VAR 0 12
43097: PPUSH
43098: LD_INT 1
43100: PPUSH
43101: CALL_OW 3
43105: ST_TO_ADDR
// if not f then
43106: LD_VAR 0 12
43110: NOT
43111: IFFALSE 43129
// begin x := x + 2 ;
43113: LD_ADDR_VAR 0 13
43117: PUSH
43118: LD_VAR 0 13
43122: PUSH
43123: LD_INT 2
43125: PLUS
43126: ST_TO_ADDR
// continue ;
43127: GO 42927
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43129: LD_VAR 0 12
43133: PUSH
43134: LD_INT 1
43136: ARRAY
43137: PPUSH
43138: CALL_OW 266
43142: PUSH
43143: LD_INT 5
43145: EQUAL
43146: IFFALSE 43220
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43148: LD_VAR 0 12
43152: PUSH
43153: LD_INT 1
43155: ARRAY
43156: PPUSH
43157: CALL_OW 313
43161: PUSH
43162: LD_INT 3
43164: LESS
43165: IFFALSE 43201
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43167: LD_INT 0
43169: PPUSH
43170: LD_INT 5
43172: PUSH
43173: LD_INT 8
43175: PUSH
43176: LD_INT 9
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: PUSH
43184: LD_VAR 0 17
43188: ARRAY
43189: PPUSH
43190: LD_VAR 0 4
43194: PPUSH
43195: CALL_OW 380
43199: GO 43218
// PrepareHuman ( false , i , skill ) ;
43201: LD_INT 0
43203: PPUSH
43204: LD_VAR 0 8
43208: PPUSH
43209: LD_VAR 0 4
43213: PPUSH
43214: CALL_OW 380
// end else
43218: GO 43237
// PrepareHuman ( false , i , skill ) ;
43220: LD_INT 0
43222: PPUSH
43223: LD_VAR 0 8
43227: PPUSH
43228: LD_VAR 0 4
43232: PPUSH
43233: CALL_OW 380
// un := CreateHuman ;
43237: LD_ADDR_VAR 0 14
43241: PUSH
43242: CALL_OW 44
43246: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43247: LD_ADDR_VAR 0 7
43251: PUSH
43252: LD_VAR 0 7
43256: PPUSH
43257: LD_INT 1
43259: PPUSH
43260: LD_VAR 0 14
43264: PPUSH
43265: CALL_OW 2
43269: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43270: LD_VAR 0 14
43274: PPUSH
43275: LD_VAR 0 12
43279: PUSH
43280: LD_INT 1
43282: ARRAY
43283: PPUSH
43284: CALL_OW 52
// end ;
43288: GO 42927
43290: POP
43291: POP
// end ;
43292: GO 42229
43294: POP
43295: POP
// result := result ^ buildings ;
43296: LD_ADDR_VAR 0 7
43300: PUSH
43301: LD_VAR 0 7
43305: PUSH
43306: LD_VAR 0 18
43310: ADD
43311: ST_TO_ADDR
// end else
43312: GO 43455
// begin for i = 1 to personel do
43314: LD_ADDR_VAR 0 8
43318: PUSH
43319: DOUBLE
43320: LD_INT 1
43322: DEC
43323: ST_TO_ADDR
43324: LD_VAR 0 6
43328: PUSH
43329: FOR_TO
43330: IFFALSE 43453
// begin if i > 4 then
43332: LD_VAR 0 8
43336: PUSH
43337: LD_INT 4
43339: GREATER
43340: IFFALSE 43344
// break ;
43342: GO 43453
// x := personel [ i ] ;
43344: LD_ADDR_VAR 0 13
43348: PUSH
43349: LD_VAR 0 6
43353: PUSH
43354: LD_VAR 0 8
43358: ARRAY
43359: ST_TO_ADDR
// if x = - 1 then
43360: LD_VAR 0 13
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: EQUAL
43369: IFFALSE 43373
// continue ;
43371: GO 43329
// PrepareHuman ( false , i , skill ) ;
43373: LD_INT 0
43375: PPUSH
43376: LD_VAR 0 8
43380: PPUSH
43381: LD_VAR 0 4
43385: PPUSH
43386: CALL_OW 380
// un := CreateHuman ;
43390: LD_ADDR_VAR 0 14
43394: PUSH
43395: CALL_OW 44
43399: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43400: LD_VAR 0 14
43404: PPUSH
43405: LD_VAR 0 1
43409: PPUSH
43410: CALL_OW 250
43414: PPUSH
43415: LD_VAR 0 1
43419: PPUSH
43420: CALL_OW 251
43424: PPUSH
43425: LD_INT 10
43427: PPUSH
43428: LD_INT 0
43430: PPUSH
43431: CALL_OW 50
// result := result ^ un ;
43435: LD_ADDR_VAR 0 7
43439: PUSH
43440: LD_VAR 0 7
43444: PUSH
43445: LD_VAR 0 14
43449: ADD
43450: ST_TO_ADDR
// end ;
43451: GO 43329
43453: POP
43454: POP
// end ; end ;
43455: LD_VAR 0 7
43459: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43460: LD_INT 0
43462: PPUSH
43463: PPUSH
43464: PPUSH
43465: PPUSH
43466: PPUSH
43467: PPUSH
43468: PPUSH
43469: PPUSH
43470: PPUSH
43471: PPUSH
43472: PPUSH
43473: PPUSH
43474: PPUSH
43475: PPUSH
43476: PPUSH
43477: PPUSH
// result := false ;
43478: LD_ADDR_VAR 0 3
43482: PUSH
43483: LD_INT 0
43485: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43486: LD_VAR 0 1
43490: NOT
43491: PUSH
43492: LD_VAR 0 1
43496: PPUSH
43497: CALL_OW 266
43501: PUSH
43502: LD_INT 32
43504: PUSH
43505: LD_INT 33
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: IN
43512: NOT
43513: OR
43514: IFFALSE 43518
// exit ;
43516: GO 44627
// nat := GetNation ( tower ) ;
43518: LD_ADDR_VAR 0 12
43522: PUSH
43523: LD_VAR 0 1
43527: PPUSH
43528: CALL_OW 248
43532: ST_TO_ADDR
// side := GetSide ( tower ) ;
43533: LD_ADDR_VAR 0 16
43537: PUSH
43538: LD_VAR 0 1
43542: PPUSH
43543: CALL_OW 255
43547: ST_TO_ADDR
// x := GetX ( tower ) ;
43548: LD_ADDR_VAR 0 10
43552: PUSH
43553: LD_VAR 0 1
43557: PPUSH
43558: CALL_OW 250
43562: ST_TO_ADDR
// y := GetY ( tower ) ;
43563: LD_ADDR_VAR 0 11
43567: PUSH
43568: LD_VAR 0 1
43572: PPUSH
43573: CALL_OW 251
43577: ST_TO_ADDR
// if not x or not y then
43578: LD_VAR 0 10
43582: NOT
43583: PUSH
43584: LD_VAR 0 11
43588: NOT
43589: OR
43590: IFFALSE 43594
// exit ;
43592: GO 44627
// weapon := 0 ;
43594: LD_ADDR_VAR 0 18
43598: PUSH
43599: LD_INT 0
43601: ST_TO_ADDR
// fac_list := [ ] ;
43602: LD_ADDR_VAR 0 17
43606: PUSH
43607: EMPTY
43608: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43609: LD_ADDR_VAR 0 6
43613: PUSH
43614: LD_VAR 0 1
43618: PPUSH
43619: CALL_OW 274
43623: PPUSH
43624: LD_VAR 0 2
43628: PPUSH
43629: LD_INT 0
43631: PPUSH
43632: CALL 41198 0 3
43636: PPUSH
43637: LD_INT 30
43639: PUSH
43640: LD_INT 3
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PPUSH
43647: CALL_OW 72
43651: ST_TO_ADDR
// if not factories then
43652: LD_VAR 0 6
43656: NOT
43657: IFFALSE 43661
// exit ;
43659: GO 44627
// for i in factories do
43661: LD_ADDR_VAR 0 8
43665: PUSH
43666: LD_VAR 0 6
43670: PUSH
43671: FOR_IN
43672: IFFALSE 43697
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43674: LD_ADDR_VAR 0 17
43678: PUSH
43679: LD_VAR 0 17
43683: PUSH
43684: LD_VAR 0 8
43688: PPUSH
43689: CALL_OW 478
43693: UNION
43694: ST_TO_ADDR
43695: GO 43671
43697: POP
43698: POP
// if not fac_list then
43699: LD_VAR 0 17
43703: NOT
43704: IFFALSE 43708
// exit ;
43706: GO 44627
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43708: LD_ADDR_VAR 0 5
43712: PUSH
43713: LD_INT 4
43715: PUSH
43716: LD_INT 5
43718: PUSH
43719: LD_INT 9
43721: PUSH
43722: LD_INT 10
43724: PUSH
43725: LD_INT 6
43727: PUSH
43728: LD_INT 7
43730: PUSH
43731: LD_INT 11
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 27
43745: PUSH
43746: LD_INT 28
43748: PUSH
43749: LD_INT 26
43751: PUSH
43752: LD_INT 30
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 43
43763: PUSH
43764: LD_INT 44
43766: PUSH
43767: LD_INT 46
43769: PUSH
43770: LD_INT 45
43772: PUSH
43773: LD_INT 47
43775: PUSH
43776: LD_INT 49
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: PUSH
43792: LD_VAR 0 12
43796: ARRAY
43797: ST_TO_ADDR
// list := list isect fac_list ;
43798: LD_ADDR_VAR 0 5
43802: PUSH
43803: LD_VAR 0 5
43807: PUSH
43808: LD_VAR 0 17
43812: ISECT
43813: ST_TO_ADDR
// if not list then
43814: LD_VAR 0 5
43818: NOT
43819: IFFALSE 43823
// exit ;
43821: GO 44627
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43823: LD_VAR 0 12
43827: PUSH
43828: LD_INT 3
43830: EQUAL
43831: PUSH
43832: LD_INT 49
43834: PUSH
43835: LD_VAR 0 5
43839: IN
43840: AND
43841: PUSH
43842: LD_INT 31
43844: PPUSH
43845: LD_VAR 0 16
43849: PPUSH
43850: CALL_OW 321
43854: PUSH
43855: LD_INT 2
43857: EQUAL
43858: AND
43859: IFFALSE 43919
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43861: LD_INT 22
43863: PUSH
43864: LD_VAR 0 16
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 35
43875: PUSH
43876: LD_INT 49
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 91
43885: PUSH
43886: LD_VAR 0 1
43890: PUSH
43891: LD_INT 10
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: PPUSH
43904: CALL_OW 69
43908: NOT
43909: IFFALSE 43919
// weapon := ru_time_lapser ;
43911: LD_ADDR_VAR 0 18
43915: PUSH
43916: LD_INT 49
43918: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43919: LD_VAR 0 12
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: IN
43934: PUSH
43935: LD_INT 11
43937: PUSH
43938: LD_VAR 0 5
43942: IN
43943: PUSH
43944: LD_INT 30
43946: PUSH
43947: LD_VAR 0 5
43951: IN
43952: OR
43953: AND
43954: PUSH
43955: LD_INT 6
43957: PPUSH
43958: LD_VAR 0 16
43962: PPUSH
43963: CALL_OW 321
43967: PUSH
43968: LD_INT 2
43970: EQUAL
43971: AND
43972: IFFALSE 44137
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43974: LD_INT 22
43976: PUSH
43977: LD_VAR 0 16
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: LD_INT 35
43991: PUSH
43992: LD_INT 11
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 35
44001: PUSH
44002: LD_INT 30
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 91
44016: PUSH
44017: LD_VAR 0 1
44021: PUSH
44022: LD_INT 18
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: PPUSH
44035: CALL_OW 69
44039: NOT
44040: PUSH
44041: LD_INT 22
44043: PUSH
44044: LD_VAR 0 16
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 30
44058: PUSH
44059: LD_INT 32
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 30
44068: PUSH
44069: LD_INT 33
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 91
44083: PUSH
44084: LD_VAR 0 1
44088: PUSH
44089: LD_INT 12
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: PPUSH
44105: CALL_OW 69
44109: PUSH
44110: LD_INT 2
44112: GREATER
44113: AND
44114: IFFALSE 44137
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44116: LD_ADDR_VAR 0 18
44120: PUSH
44121: LD_INT 11
44123: PUSH
44124: LD_INT 30
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_VAR 0 12
44135: ARRAY
44136: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44137: LD_VAR 0 18
44141: NOT
44142: PUSH
44143: LD_INT 40
44145: PPUSH
44146: LD_VAR 0 16
44150: PPUSH
44151: CALL_OW 321
44155: PUSH
44156: LD_INT 2
44158: EQUAL
44159: AND
44160: PUSH
44161: LD_INT 7
44163: PUSH
44164: LD_VAR 0 5
44168: IN
44169: PUSH
44170: LD_INT 28
44172: PUSH
44173: LD_VAR 0 5
44177: IN
44178: OR
44179: PUSH
44180: LD_INT 45
44182: PUSH
44183: LD_VAR 0 5
44187: IN
44188: OR
44189: AND
44190: IFFALSE 44444
// begin hex := GetHexInfo ( x , y ) ;
44192: LD_ADDR_VAR 0 4
44196: PUSH
44197: LD_VAR 0 10
44201: PPUSH
44202: LD_VAR 0 11
44206: PPUSH
44207: CALL_OW 546
44211: ST_TO_ADDR
// if hex [ 1 ] then
44212: LD_VAR 0 4
44216: PUSH
44217: LD_INT 1
44219: ARRAY
44220: IFFALSE 44224
// exit ;
44222: GO 44627
// height := hex [ 2 ] ;
44224: LD_ADDR_VAR 0 15
44228: PUSH
44229: LD_VAR 0 4
44233: PUSH
44234: LD_INT 2
44236: ARRAY
44237: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44238: LD_ADDR_VAR 0 14
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 3
44251: PUSH
44252: LD_INT 5
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: ST_TO_ADDR
// for i in tmp do
44261: LD_ADDR_VAR 0 8
44265: PUSH
44266: LD_VAR 0 14
44270: PUSH
44271: FOR_IN
44272: IFFALSE 44442
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44274: LD_ADDR_VAR 0 9
44278: PUSH
44279: LD_VAR 0 10
44283: PPUSH
44284: LD_VAR 0 8
44288: PPUSH
44289: LD_INT 5
44291: PPUSH
44292: CALL_OW 272
44296: PUSH
44297: LD_VAR 0 11
44301: PPUSH
44302: LD_VAR 0 8
44306: PPUSH
44307: LD_INT 5
44309: PPUSH
44310: CALL_OW 273
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44319: LD_VAR 0 9
44323: PUSH
44324: LD_INT 1
44326: ARRAY
44327: PPUSH
44328: LD_VAR 0 9
44332: PUSH
44333: LD_INT 2
44335: ARRAY
44336: PPUSH
44337: CALL_OW 488
44341: IFFALSE 44440
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44343: LD_ADDR_VAR 0 4
44347: PUSH
44348: LD_VAR 0 9
44352: PUSH
44353: LD_INT 1
44355: ARRAY
44356: PPUSH
44357: LD_VAR 0 9
44361: PUSH
44362: LD_INT 2
44364: ARRAY
44365: PPUSH
44366: CALL_OW 546
44370: ST_TO_ADDR
// if hex [ 1 ] then
44371: LD_VAR 0 4
44375: PUSH
44376: LD_INT 1
44378: ARRAY
44379: IFFALSE 44383
// continue ;
44381: GO 44271
// h := hex [ 2 ] ;
44383: LD_ADDR_VAR 0 13
44387: PUSH
44388: LD_VAR 0 4
44392: PUSH
44393: LD_INT 2
44395: ARRAY
44396: ST_TO_ADDR
// if h + 7 < height then
44397: LD_VAR 0 13
44401: PUSH
44402: LD_INT 7
44404: PLUS
44405: PUSH
44406: LD_VAR 0 15
44410: LESS
44411: IFFALSE 44440
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44413: LD_ADDR_VAR 0 18
44417: PUSH
44418: LD_INT 7
44420: PUSH
44421: LD_INT 28
44423: PUSH
44424: LD_INT 45
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: PUSH
44432: LD_VAR 0 12
44436: ARRAY
44437: ST_TO_ADDR
// break ;
44438: GO 44442
// end ; end ; end ;
44440: GO 44271
44442: POP
44443: POP
// end ; if not weapon then
44444: LD_VAR 0 18
44448: NOT
44449: IFFALSE 44509
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44451: LD_ADDR_VAR 0 5
44455: PUSH
44456: LD_VAR 0 5
44460: PUSH
44461: LD_INT 11
44463: PUSH
44464: LD_INT 30
44466: PUSH
44467: LD_INT 49
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: LIST
44474: DIFF
44475: ST_TO_ADDR
// if not list then
44476: LD_VAR 0 5
44480: NOT
44481: IFFALSE 44485
// exit ;
44483: GO 44627
// weapon := list [ rand ( 1 , list ) ] ;
44485: LD_ADDR_VAR 0 18
44489: PUSH
44490: LD_VAR 0 5
44494: PUSH
44495: LD_INT 1
44497: PPUSH
44498: LD_VAR 0 5
44502: PPUSH
44503: CALL_OW 12
44507: ARRAY
44508: ST_TO_ADDR
// end ; if weapon then
44509: LD_VAR 0 18
44513: IFFALSE 44627
// begin tmp := CostOfWeapon ( weapon ) ;
44515: LD_ADDR_VAR 0 14
44519: PUSH
44520: LD_VAR 0 18
44524: PPUSH
44525: CALL_OW 451
44529: ST_TO_ADDR
// j := GetBase ( tower ) ;
44530: LD_ADDR_VAR 0 9
44534: PUSH
44535: LD_VAR 0 1
44539: PPUSH
44540: CALL_OW 274
44544: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44545: LD_VAR 0 9
44549: PPUSH
44550: LD_INT 1
44552: PPUSH
44553: CALL_OW 275
44557: PUSH
44558: LD_VAR 0 14
44562: PUSH
44563: LD_INT 1
44565: ARRAY
44566: GREATEREQUAL
44567: PUSH
44568: LD_VAR 0 9
44572: PPUSH
44573: LD_INT 2
44575: PPUSH
44576: CALL_OW 275
44580: PUSH
44581: LD_VAR 0 14
44585: PUSH
44586: LD_INT 2
44588: ARRAY
44589: GREATEREQUAL
44590: AND
44591: PUSH
44592: LD_VAR 0 9
44596: PPUSH
44597: LD_INT 3
44599: PPUSH
44600: CALL_OW 275
44604: PUSH
44605: LD_VAR 0 14
44609: PUSH
44610: LD_INT 3
44612: ARRAY
44613: GREATEREQUAL
44614: AND
44615: IFFALSE 44627
// result := weapon ;
44617: LD_ADDR_VAR 0 3
44621: PUSH
44622: LD_VAR 0 18
44626: ST_TO_ADDR
// end ; end ;
44627: LD_VAR 0 3
44631: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44632: LD_INT 0
44634: PPUSH
44635: PPUSH
// result := true ;
44636: LD_ADDR_VAR 0 3
44640: PUSH
44641: LD_INT 1
44643: ST_TO_ADDR
// if array1 = array2 then
44644: LD_VAR 0 1
44648: PUSH
44649: LD_VAR 0 2
44653: EQUAL
44654: IFFALSE 44714
// begin for i = 1 to array1 do
44656: LD_ADDR_VAR 0 4
44660: PUSH
44661: DOUBLE
44662: LD_INT 1
44664: DEC
44665: ST_TO_ADDR
44666: LD_VAR 0 1
44670: PUSH
44671: FOR_TO
44672: IFFALSE 44710
// if array1 [ i ] <> array2 [ i ] then
44674: LD_VAR 0 1
44678: PUSH
44679: LD_VAR 0 4
44683: ARRAY
44684: PUSH
44685: LD_VAR 0 2
44689: PUSH
44690: LD_VAR 0 4
44694: ARRAY
44695: NONEQUAL
44696: IFFALSE 44708
// begin result := false ;
44698: LD_ADDR_VAR 0 3
44702: PUSH
44703: LD_INT 0
44705: ST_TO_ADDR
// break ;
44706: GO 44710
// end ;
44708: GO 44671
44710: POP
44711: POP
// end else
44712: GO 44722
// result := false ;
44714: LD_ADDR_VAR 0 3
44718: PUSH
44719: LD_INT 0
44721: ST_TO_ADDR
// end ;
44722: LD_VAR 0 3
44726: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44727: LD_INT 0
44729: PPUSH
44730: PPUSH
// if not array1 or not array2 then
44731: LD_VAR 0 1
44735: NOT
44736: PUSH
44737: LD_VAR 0 2
44741: NOT
44742: OR
44743: IFFALSE 44747
// exit ;
44745: GO 44811
// result := true ;
44747: LD_ADDR_VAR 0 3
44751: PUSH
44752: LD_INT 1
44754: ST_TO_ADDR
// for i = 1 to array1 do
44755: LD_ADDR_VAR 0 4
44759: PUSH
44760: DOUBLE
44761: LD_INT 1
44763: DEC
44764: ST_TO_ADDR
44765: LD_VAR 0 1
44769: PUSH
44770: FOR_TO
44771: IFFALSE 44809
// if array1 [ i ] <> array2 [ i ] then
44773: LD_VAR 0 1
44777: PUSH
44778: LD_VAR 0 4
44782: ARRAY
44783: PUSH
44784: LD_VAR 0 2
44788: PUSH
44789: LD_VAR 0 4
44793: ARRAY
44794: NONEQUAL
44795: IFFALSE 44807
// begin result := false ;
44797: LD_ADDR_VAR 0 3
44801: PUSH
44802: LD_INT 0
44804: ST_TO_ADDR
// break ;
44805: GO 44809
// end ;
44807: GO 44770
44809: POP
44810: POP
// end ;
44811: LD_VAR 0 3
44815: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44816: LD_INT 0
44818: PPUSH
44819: PPUSH
44820: PPUSH
// pom := GetBase ( fac ) ;
44821: LD_ADDR_VAR 0 5
44825: PUSH
44826: LD_VAR 0 1
44830: PPUSH
44831: CALL_OW 274
44835: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44836: LD_ADDR_VAR 0 4
44840: PUSH
44841: LD_VAR 0 2
44845: PUSH
44846: LD_INT 1
44848: ARRAY
44849: PPUSH
44850: LD_VAR 0 2
44854: PUSH
44855: LD_INT 2
44857: ARRAY
44858: PPUSH
44859: LD_VAR 0 2
44863: PUSH
44864: LD_INT 3
44866: ARRAY
44867: PPUSH
44868: LD_VAR 0 2
44872: PUSH
44873: LD_INT 4
44875: ARRAY
44876: PPUSH
44877: CALL_OW 449
44881: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44882: LD_ADDR_VAR 0 3
44886: PUSH
44887: LD_VAR 0 5
44891: PPUSH
44892: LD_INT 1
44894: PPUSH
44895: CALL_OW 275
44899: PUSH
44900: LD_VAR 0 4
44904: PUSH
44905: LD_INT 1
44907: ARRAY
44908: GREATEREQUAL
44909: PUSH
44910: LD_VAR 0 5
44914: PPUSH
44915: LD_INT 2
44917: PPUSH
44918: CALL_OW 275
44922: PUSH
44923: LD_VAR 0 4
44927: PUSH
44928: LD_INT 2
44930: ARRAY
44931: GREATEREQUAL
44932: AND
44933: PUSH
44934: LD_VAR 0 5
44938: PPUSH
44939: LD_INT 3
44941: PPUSH
44942: CALL_OW 275
44946: PUSH
44947: LD_VAR 0 4
44951: PUSH
44952: LD_INT 3
44954: ARRAY
44955: GREATEREQUAL
44956: AND
44957: ST_TO_ADDR
// end ;
44958: LD_VAR 0 3
44962: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44963: LD_INT 0
44965: PPUSH
44966: PPUSH
44967: PPUSH
44968: PPUSH
// pom := GetBase ( building ) ;
44969: LD_ADDR_VAR 0 3
44973: PUSH
44974: LD_VAR 0 1
44978: PPUSH
44979: CALL_OW 274
44983: ST_TO_ADDR
// if not pom then
44984: LD_VAR 0 3
44988: NOT
44989: IFFALSE 44993
// exit ;
44991: GO 45163
// btype := GetBType ( building ) ;
44993: LD_ADDR_VAR 0 5
44997: PUSH
44998: LD_VAR 0 1
45002: PPUSH
45003: CALL_OW 266
45007: ST_TO_ADDR
// if btype = b_armoury then
45008: LD_VAR 0 5
45012: PUSH
45013: LD_INT 4
45015: EQUAL
45016: IFFALSE 45026
// btype := b_barracks ;
45018: LD_ADDR_VAR 0 5
45022: PUSH
45023: LD_INT 5
45025: ST_TO_ADDR
// if btype = b_depot then
45026: LD_VAR 0 5
45030: PUSH
45031: LD_INT 0
45033: EQUAL
45034: IFFALSE 45044
// btype := b_warehouse ;
45036: LD_ADDR_VAR 0 5
45040: PUSH
45041: LD_INT 1
45043: ST_TO_ADDR
// if btype = b_workshop then
45044: LD_VAR 0 5
45048: PUSH
45049: LD_INT 2
45051: EQUAL
45052: IFFALSE 45062
// btype := b_factory ;
45054: LD_ADDR_VAR 0 5
45058: PUSH
45059: LD_INT 3
45061: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45062: LD_ADDR_VAR 0 4
45066: PUSH
45067: LD_VAR 0 5
45071: PPUSH
45072: LD_VAR 0 1
45076: PPUSH
45077: CALL_OW 248
45081: PPUSH
45082: CALL_OW 450
45086: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45087: LD_ADDR_VAR 0 2
45091: PUSH
45092: LD_VAR 0 3
45096: PPUSH
45097: LD_INT 1
45099: PPUSH
45100: CALL_OW 275
45104: PUSH
45105: LD_VAR 0 4
45109: PUSH
45110: LD_INT 1
45112: ARRAY
45113: GREATEREQUAL
45114: PUSH
45115: LD_VAR 0 3
45119: PPUSH
45120: LD_INT 2
45122: PPUSH
45123: CALL_OW 275
45127: PUSH
45128: LD_VAR 0 4
45132: PUSH
45133: LD_INT 2
45135: ARRAY
45136: GREATEREQUAL
45137: AND
45138: PUSH
45139: LD_VAR 0 3
45143: PPUSH
45144: LD_INT 3
45146: PPUSH
45147: CALL_OW 275
45151: PUSH
45152: LD_VAR 0 4
45156: PUSH
45157: LD_INT 3
45159: ARRAY
45160: GREATEREQUAL
45161: AND
45162: ST_TO_ADDR
// end ;
45163: LD_VAR 0 2
45167: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45168: LD_INT 0
45170: PPUSH
45171: PPUSH
45172: PPUSH
// pom := GetBase ( building ) ;
45173: LD_ADDR_VAR 0 4
45177: PUSH
45178: LD_VAR 0 1
45182: PPUSH
45183: CALL_OW 274
45187: ST_TO_ADDR
// if not pom then
45188: LD_VAR 0 4
45192: NOT
45193: IFFALSE 45197
// exit ;
45195: GO 45298
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45197: LD_ADDR_VAR 0 5
45201: PUSH
45202: LD_VAR 0 2
45206: PPUSH
45207: LD_VAR 0 1
45211: PPUSH
45212: CALL_OW 248
45216: PPUSH
45217: CALL_OW 450
45221: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45222: LD_ADDR_VAR 0 3
45226: PUSH
45227: LD_VAR 0 4
45231: PPUSH
45232: LD_INT 1
45234: PPUSH
45235: CALL_OW 275
45239: PUSH
45240: LD_VAR 0 5
45244: PUSH
45245: LD_INT 1
45247: ARRAY
45248: GREATEREQUAL
45249: PUSH
45250: LD_VAR 0 4
45254: PPUSH
45255: LD_INT 2
45257: PPUSH
45258: CALL_OW 275
45262: PUSH
45263: LD_VAR 0 5
45267: PUSH
45268: LD_INT 2
45270: ARRAY
45271: GREATEREQUAL
45272: AND
45273: PUSH
45274: LD_VAR 0 4
45278: PPUSH
45279: LD_INT 3
45281: PPUSH
45282: CALL_OW 275
45286: PUSH
45287: LD_VAR 0 5
45291: PUSH
45292: LD_INT 3
45294: ARRAY
45295: GREATEREQUAL
45296: AND
45297: ST_TO_ADDR
// end ;
45298: LD_VAR 0 3
45302: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45303: LD_INT 0
45305: PPUSH
45306: PPUSH
45307: PPUSH
45308: PPUSH
45309: PPUSH
45310: PPUSH
45311: PPUSH
45312: PPUSH
45313: PPUSH
45314: PPUSH
45315: PPUSH
// result := false ;
45316: LD_ADDR_VAR 0 8
45320: PUSH
45321: LD_INT 0
45323: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45324: LD_VAR 0 5
45328: NOT
45329: PUSH
45330: LD_VAR 0 1
45334: NOT
45335: OR
45336: PUSH
45337: LD_VAR 0 2
45341: NOT
45342: OR
45343: PUSH
45344: LD_VAR 0 3
45348: NOT
45349: OR
45350: IFFALSE 45354
// exit ;
45352: GO 46168
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45354: LD_ADDR_VAR 0 14
45358: PUSH
45359: LD_VAR 0 1
45363: PPUSH
45364: LD_VAR 0 2
45368: PPUSH
45369: LD_VAR 0 3
45373: PPUSH
45374: LD_VAR 0 4
45378: PPUSH
45379: LD_VAR 0 5
45383: PUSH
45384: LD_INT 1
45386: ARRAY
45387: PPUSH
45388: CALL_OW 248
45392: PPUSH
45393: LD_INT 0
45395: PPUSH
45396: CALL 47405 0 6
45400: ST_TO_ADDR
// if not hexes then
45401: LD_VAR 0 14
45405: NOT
45406: IFFALSE 45410
// exit ;
45408: GO 46168
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45410: LD_ADDR_VAR 0 17
45414: PUSH
45415: LD_VAR 0 5
45419: PPUSH
45420: LD_INT 22
45422: PUSH
45423: LD_VAR 0 13
45427: PPUSH
45428: CALL_OW 255
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 30
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 30
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PPUSH
45469: CALL_OW 72
45473: ST_TO_ADDR
// for i = 1 to hexes do
45474: LD_ADDR_VAR 0 9
45478: PUSH
45479: DOUBLE
45480: LD_INT 1
45482: DEC
45483: ST_TO_ADDR
45484: LD_VAR 0 14
45488: PUSH
45489: FOR_TO
45490: IFFALSE 46166
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45492: LD_ADDR_VAR 0 13
45496: PUSH
45497: LD_VAR 0 14
45501: PUSH
45502: LD_VAR 0 9
45506: ARRAY
45507: PUSH
45508: LD_INT 1
45510: ARRAY
45511: PPUSH
45512: LD_VAR 0 14
45516: PUSH
45517: LD_VAR 0 9
45521: ARRAY
45522: PUSH
45523: LD_INT 2
45525: ARRAY
45526: PPUSH
45527: CALL_OW 428
45531: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45532: LD_VAR 0 14
45536: PUSH
45537: LD_VAR 0 9
45541: ARRAY
45542: PUSH
45543: LD_INT 1
45545: ARRAY
45546: PPUSH
45547: LD_VAR 0 14
45551: PUSH
45552: LD_VAR 0 9
45556: ARRAY
45557: PUSH
45558: LD_INT 2
45560: ARRAY
45561: PPUSH
45562: CALL_OW 351
45566: PUSH
45567: LD_VAR 0 14
45571: PUSH
45572: LD_VAR 0 9
45576: ARRAY
45577: PUSH
45578: LD_INT 1
45580: ARRAY
45581: PPUSH
45582: LD_VAR 0 14
45586: PUSH
45587: LD_VAR 0 9
45591: ARRAY
45592: PUSH
45593: LD_INT 2
45595: ARRAY
45596: PPUSH
45597: CALL_OW 488
45601: NOT
45602: OR
45603: PUSH
45604: LD_VAR 0 13
45608: PPUSH
45609: CALL_OW 247
45613: PUSH
45614: LD_INT 3
45616: EQUAL
45617: OR
45618: IFFALSE 45624
// exit ;
45620: POP
45621: POP
45622: GO 46168
// if not tmp then
45624: LD_VAR 0 13
45628: NOT
45629: IFFALSE 45633
// continue ;
45631: GO 45489
// result := true ;
45633: LD_ADDR_VAR 0 8
45637: PUSH
45638: LD_INT 1
45640: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45641: LD_VAR 0 6
45645: PUSH
45646: LD_VAR 0 13
45650: PPUSH
45651: CALL_OW 247
45655: PUSH
45656: LD_INT 2
45658: EQUAL
45659: AND
45660: PUSH
45661: LD_VAR 0 13
45665: PPUSH
45666: CALL_OW 263
45670: PUSH
45671: LD_INT 1
45673: EQUAL
45674: AND
45675: IFFALSE 45839
// begin if IsDrivenBy ( tmp ) then
45677: LD_VAR 0 13
45681: PPUSH
45682: CALL_OW 311
45686: IFFALSE 45690
// continue ;
45688: GO 45489
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45690: LD_VAR 0 6
45694: PPUSH
45695: LD_INT 3
45697: PUSH
45698: LD_INT 60
45700: PUSH
45701: EMPTY
45702: LIST
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 3
45710: PUSH
45711: LD_INT 55
45713: PUSH
45714: EMPTY
45715: LIST
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PPUSH
45725: CALL_OW 72
45729: IFFALSE 45837
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45731: LD_ADDR_VAR 0 18
45735: PUSH
45736: LD_VAR 0 6
45740: PPUSH
45741: LD_INT 3
45743: PUSH
45744: LD_INT 60
45746: PUSH
45747: EMPTY
45748: LIST
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 3
45756: PUSH
45757: LD_INT 55
45759: PUSH
45760: EMPTY
45761: LIST
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PPUSH
45771: CALL_OW 72
45775: PUSH
45776: LD_INT 1
45778: ARRAY
45779: ST_TO_ADDR
// if IsInUnit ( driver ) then
45780: LD_VAR 0 18
45784: PPUSH
45785: CALL_OW 310
45789: IFFALSE 45800
// ComExit ( driver ) ;
45791: LD_VAR 0 18
45795: PPUSH
45796: CALL 70589 0 1
// AddComEnterUnit ( driver , tmp ) ;
45800: LD_VAR 0 18
45804: PPUSH
45805: LD_VAR 0 13
45809: PPUSH
45810: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45814: LD_VAR 0 18
45818: PPUSH
45819: LD_VAR 0 7
45823: PPUSH
45824: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45828: LD_VAR 0 18
45832: PPUSH
45833: CALL_OW 181
// end ; continue ;
45837: GO 45489
// end ; if not cleaners or not tmp in cleaners then
45839: LD_VAR 0 6
45843: NOT
45844: PUSH
45845: LD_VAR 0 13
45849: PUSH
45850: LD_VAR 0 6
45854: IN
45855: NOT
45856: OR
45857: IFFALSE 46164
// begin if dep then
45859: LD_VAR 0 17
45863: IFFALSE 45999
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45865: LD_ADDR_VAR 0 16
45869: PUSH
45870: LD_VAR 0 17
45874: PUSH
45875: LD_INT 1
45877: ARRAY
45878: PPUSH
45879: CALL_OW 250
45883: PPUSH
45884: LD_VAR 0 17
45888: PUSH
45889: LD_INT 1
45891: ARRAY
45892: PPUSH
45893: CALL_OW 254
45897: PPUSH
45898: LD_INT 5
45900: PPUSH
45901: CALL_OW 272
45905: PUSH
45906: LD_VAR 0 17
45910: PUSH
45911: LD_INT 1
45913: ARRAY
45914: PPUSH
45915: CALL_OW 251
45919: PPUSH
45920: LD_VAR 0 17
45924: PUSH
45925: LD_INT 1
45927: ARRAY
45928: PPUSH
45929: CALL_OW 254
45933: PPUSH
45934: LD_INT 5
45936: PPUSH
45937: CALL_OW 273
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45946: LD_VAR 0 16
45950: PUSH
45951: LD_INT 1
45953: ARRAY
45954: PPUSH
45955: LD_VAR 0 16
45959: PUSH
45960: LD_INT 2
45962: ARRAY
45963: PPUSH
45964: CALL_OW 488
45968: IFFALSE 45999
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45970: LD_VAR 0 13
45974: PPUSH
45975: LD_VAR 0 16
45979: PUSH
45980: LD_INT 1
45982: ARRAY
45983: PPUSH
45984: LD_VAR 0 16
45988: PUSH
45989: LD_INT 2
45991: ARRAY
45992: PPUSH
45993: CALL_OW 111
// continue ;
45997: GO 45489
// end ; end ; r := GetDir ( tmp ) ;
45999: LD_ADDR_VAR 0 15
46003: PUSH
46004: LD_VAR 0 13
46008: PPUSH
46009: CALL_OW 254
46013: ST_TO_ADDR
// if r = 5 then
46014: LD_VAR 0 15
46018: PUSH
46019: LD_INT 5
46021: EQUAL
46022: IFFALSE 46032
// r := 0 ;
46024: LD_ADDR_VAR 0 15
46028: PUSH
46029: LD_INT 0
46031: ST_TO_ADDR
// for j = r to 5 do
46032: LD_ADDR_VAR 0 10
46036: PUSH
46037: DOUBLE
46038: LD_VAR 0 15
46042: DEC
46043: ST_TO_ADDR
46044: LD_INT 5
46046: PUSH
46047: FOR_TO
46048: IFFALSE 46162
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46050: LD_ADDR_VAR 0 11
46054: PUSH
46055: LD_VAR 0 13
46059: PPUSH
46060: CALL_OW 250
46064: PPUSH
46065: LD_VAR 0 10
46069: PPUSH
46070: LD_INT 2
46072: PPUSH
46073: CALL_OW 272
46077: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46078: LD_ADDR_VAR 0 12
46082: PUSH
46083: LD_VAR 0 13
46087: PPUSH
46088: CALL_OW 251
46092: PPUSH
46093: LD_VAR 0 10
46097: PPUSH
46098: LD_INT 2
46100: PPUSH
46101: CALL_OW 273
46105: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46106: LD_VAR 0 11
46110: PPUSH
46111: LD_VAR 0 12
46115: PPUSH
46116: CALL_OW 488
46120: PUSH
46121: LD_VAR 0 11
46125: PPUSH
46126: LD_VAR 0 12
46130: PPUSH
46131: CALL_OW 428
46135: NOT
46136: AND
46137: IFFALSE 46160
// begin ComMoveXY ( tmp , _x , _y ) ;
46139: LD_VAR 0 13
46143: PPUSH
46144: LD_VAR 0 11
46148: PPUSH
46149: LD_VAR 0 12
46153: PPUSH
46154: CALL_OW 111
// break ;
46158: GO 46162
// end ; end ;
46160: GO 46047
46162: POP
46163: POP
// end ; end ;
46164: GO 45489
46166: POP
46167: POP
// end ;
46168: LD_VAR 0 8
46172: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46173: LD_INT 0
46175: PPUSH
// result := true ;
46176: LD_ADDR_VAR 0 3
46180: PUSH
46181: LD_INT 1
46183: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46184: LD_VAR 0 2
46188: PUSH
46189: LD_INT 24
46191: DOUBLE
46192: EQUAL
46193: IFTRUE 46203
46195: LD_INT 33
46197: DOUBLE
46198: EQUAL
46199: IFTRUE 46203
46201: GO 46228
46203: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46204: LD_ADDR_VAR 0 3
46208: PUSH
46209: LD_INT 32
46211: PPUSH
46212: LD_VAR 0 1
46216: PPUSH
46217: CALL_OW 321
46221: PUSH
46222: LD_INT 2
46224: EQUAL
46225: ST_TO_ADDR
46226: GO 46548
46228: LD_INT 20
46230: DOUBLE
46231: EQUAL
46232: IFTRUE 46236
46234: GO 46261
46236: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46237: LD_ADDR_VAR 0 3
46241: PUSH
46242: LD_INT 6
46244: PPUSH
46245: LD_VAR 0 1
46249: PPUSH
46250: CALL_OW 321
46254: PUSH
46255: LD_INT 2
46257: EQUAL
46258: ST_TO_ADDR
46259: GO 46548
46261: LD_INT 22
46263: DOUBLE
46264: EQUAL
46265: IFTRUE 46275
46267: LD_INT 36
46269: DOUBLE
46270: EQUAL
46271: IFTRUE 46275
46273: GO 46300
46275: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46276: LD_ADDR_VAR 0 3
46280: PUSH
46281: LD_INT 15
46283: PPUSH
46284: LD_VAR 0 1
46288: PPUSH
46289: CALL_OW 321
46293: PUSH
46294: LD_INT 2
46296: EQUAL
46297: ST_TO_ADDR
46298: GO 46548
46300: LD_INT 30
46302: DOUBLE
46303: EQUAL
46304: IFTRUE 46308
46306: GO 46333
46308: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46309: LD_ADDR_VAR 0 3
46313: PUSH
46314: LD_INT 20
46316: PPUSH
46317: LD_VAR 0 1
46321: PPUSH
46322: CALL_OW 321
46326: PUSH
46327: LD_INT 2
46329: EQUAL
46330: ST_TO_ADDR
46331: GO 46548
46333: LD_INT 28
46335: DOUBLE
46336: EQUAL
46337: IFTRUE 46347
46339: LD_INT 21
46341: DOUBLE
46342: EQUAL
46343: IFTRUE 46347
46345: GO 46372
46347: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46348: LD_ADDR_VAR 0 3
46352: PUSH
46353: LD_INT 21
46355: PPUSH
46356: LD_VAR 0 1
46360: PPUSH
46361: CALL_OW 321
46365: PUSH
46366: LD_INT 2
46368: EQUAL
46369: ST_TO_ADDR
46370: GO 46548
46372: LD_INT 16
46374: DOUBLE
46375: EQUAL
46376: IFTRUE 46380
46378: GO 46407
46380: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46381: LD_ADDR_VAR 0 3
46385: PUSH
46386: LD_EXP 56
46390: PPUSH
46391: LD_VAR 0 1
46395: PPUSH
46396: CALL_OW 321
46400: PUSH
46401: LD_INT 2
46403: EQUAL
46404: ST_TO_ADDR
46405: GO 46548
46407: LD_INT 19
46409: DOUBLE
46410: EQUAL
46411: IFTRUE 46421
46413: LD_INT 23
46415: DOUBLE
46416: EQUAL
46417: IFTRUE 46421
46419: GO 46448
46421: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46422: LD_ADDR_VAR 0 3
46426: PUSH
46427: LD_EXP 55
46431: PPUSH
46432: LD_VAR 0 1
46436: PPUSH
46437: CALL_OW 321
46441: PUSH
46442: LD_INT 2
46444: EQUAL
46445: ST_TO_ADDR
46446: GO 46548
46448: LD_INT 17
46450: DOUBLE
46451: EQUAL
46452: IFTRUE 46456
46454: GO 46481
46456: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46457: LD_ADDR_VAR 0 3
46461: PUSH
46462: LD_INT 39
46464: PPUSH
46465: LD_VAR 0 1
46469: PPUSH
46470: CALL_OW 321
46474: PUSH
46475: LD_INT 2
46477: EQUAL
46478: ST_TO_ADDR
46479: GO 46548
46481: LD_INT 18
46483: DOUBLE
46484: EQUAL
46485: IFTRUE 46489
46487: GO 46514
46489: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46490: LD_ADDR_VAR 0 3
46494: PUSH
46495: LD_INT 40
46497: PPUSH
46498: LD_VAR 0 1
46502: PPUSH
46503: CALL_OW 321
46507: PUSH
46508: LD_INT 2
46510: EQUAL
46511: ST_TO_ADDR
46512: GO 46548
46514: LD_INT 27
46516: DOUBLE
46517: EQUAL
46518: IFTRUE 46522
46520: GO 46547
46522: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46523: LD_ADDR_VAR 0 3
46527: PUSH
46528: LD_INT 35
46530: PPUSH
46531: LD_VAR 0 1
46535: PPUSH
46536: CALL_OW 321
46540: PUSH
46541: LD_INT 2
46543: EQUAL
46544: ST_TO_ADDR
46545: GO 46548
46547: POP
// end ;
46548: LD_VAR 0 3
46552: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46553: LD_INT 0
46555: PPUSH
46556: PPUSH
46557: PPUSH
46558: PPUSH
46559: PPUSH
46560: PPUSH
46561: PPUSH
46562: PPUSH
46563: PPUSH
46564: PPUSH
46565: PPUSH
// result := false ;
46566: LD_ADDR_VAR 0 6
46570: PUSH
46571: LD_INT 0
46573: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46574: LD_VAR 0 1
46578: NOT
46579: PUSH
46580: LD_VAR 0 1
46584: PPUSH
46585: CALL_OW 266
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: IN
46600: NOT
46601: OR
46602: PUSH
46603: LD_VAR 0 2
46607: NOT
46608: OR
46609: PUSH
46610: LD_VAR 0 5
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 3
46626: PUSH
46627: LD_INT 4
46629: PUSH
46630: LD_INT 5
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: IN
46641: NOT
46642: OR
46643: PUSH
46644: LD_VAR 0 3
46648: PPUSH
46649: LD_VAR 0 4
46653: PPUSH
46654: CALL_OW 488
46658: NOT
46659: OR
46660: IFFALSE 46664
// exit ;
46662: GO 47400
// side := GetSide ( depot ) ;
46664: LD_ADDR_VAR 0 9
46668: PUSH
46669: LD_VAR 0 1
46673: PPUSH
46674: CALL_OW 255
46678: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46679: LD_VAR 0 9
46683: PPUSH
46684: LD_VAR 0 2
46688: PPUSH
46689: CALL 46173 0 2
46693: NOT
46694: IFFALSE 46698
// exit ;
46696: GO 47400
// pom := GetBase ( depot ) ;
46698: LD_ADDR_VAR 0 10
46702: PUSH
46703: LD_VAR 0 1
46707: PPUSH
46708: CALL_OW 274
46712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46713: LD_ADDR_VAR 0 11
46717: PUSH
46718: LD_VAR 0 2
46722: PPUSH
46723: LD_VAR 0 1
46727: PPUSH
46728: CALL_OW 248
46732: PPUSH
46733: CALL_OW 450
46737: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46738: LD_VAR 0 10
46742: PPUSH
46743: LD_INT 1
46745: PPUSH
46746: CALL_OW 275
46750: PUSH
46751: LD_VAR 0 11
46755: PUSH
46756: LD_INT 1
46758: ARRAY
46759: GREATEREQUAL
46760: PUSH
46761: LD_VAR 0 10
46765: PPUSH
46766: LD_INT 2
46768: PPUSH
46769: CALL_OW 275
46773: PUSH
46774: LD_VAR 0 11
46778: PUSH
46779: LD_INT 2
46781: ARRAY
46782: GREATEREQUAL
46783: AND
46784: PUSH
46785: LD_VAR 0 10
46789: PPUSH
46790: LD_INT 3
46792: PPUSH
46793: CALL_OW 275
46797: PUSH
46798: LD_VAR 0 11
46802: PUSH
46803: LD_INT 3
46805: ARRAY
46806: GREATEREQUAL
46807: AND
46808: NOT
46809: IFFALSE 46813
// exit ;
46811: GO 47400
// if GetBType ( depot ) = b_depot then
46813: LD_VAR 0 1
46817: PPUSH
46818: CALL_OW 266
46822: PUSH
46823: LD_INT 0
46825: EQUAL
46826: IFFALSE 46838
// dist := 28 else
46828: LD_ADDR_VAR 0 14
46832: PUSH
46833: LD_INT 28
46835: ST_TO_ADDR
46836: GO 46846
// dist := 36 ;
46838: LD_ADDR_VAR 0 14
46842: PUSH
46843: LD_INT 36
46845: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46846: LD_VAR 0 1
46850: PPUSH
46851: LD_VAR 0 3
46855: PPUSH
46856: LD_VAR 0 4
46860: PPUSH
46861: CALL_OW 297
46865: PUSH
46866: LD_VAR 0 14
46870: GREATER
46871: IFFALSE 46875
// exit ;
46873: GO 47400
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46875: LD_ADDR_VAR 0 12
46879: PUSH
46880: LD_VAR 0 2
46884: PPUSH
46885: LD_VAR 0 3
46889: PPUSH
46890: LD_VAR 0 4
46894: PPUSH
46895: LD_VAR 0 5
46899: PPUSH
46900: LD_VAR 0 1
46904: PPUSH
46905: CALL_OW 248
46909: PPUSH
46910: LD_INT 0
46912: PPUSH
46913: CALL 47405 0 6
46917: ST_TO_ADDR
// if not hexes then
46918: LD_VAR 0 12
46922: NOT
46923: IFFALSE 46927
// exit ;
46925: GO 47400
// hex := GetHexInfo ( x , y ) ;
46927: LD_ADDR_VAR 0 15
46931: PUSH
46932: LD_VAR 0 3
46936: PPUSH
46937: LD_VAR 0 4
46941: PPUSH
46942: CALL_OW 546
46946: ST_TO_ADDR
// if hex [ 1 ] then
46947: LD_VAR 0 15
46951: PUSH
46952: LD_INT 1
46954: ARRAY
46955: IFFALSE 46959
// exit ;
46957: GO 47400
// height := hex [ 2 ] ;
46959: LD_ADDR_VAR 0 13
46963: PUSH
46964: LD_VAR 0 15
46968: PUSH
46969: LD_INT 2
46971: ARRAY
46972: ST_TO_ADDR
// for i = 1 to hexes do
46973: LD_ADDR_VAR 0 7
46977: PUSH
46978: DOUBLE
46979: LD_INT 1
46981: DEC
46982: ST_TO_ADDR
46983: LD_VAR 0 12
46987: PUSH
46988: FOR_TO
46989: IFFALSE 47319
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46991: LD_VAR 0 12
46995: PUSH
46996: LD_VAR 0 7
47000: ARRAY
47001: PUSH
47002: LD_INT 1
47004: ARRAY
47005: PPUSH
47006: LD_VAR 0 12
47010: PUSH
47011: LD_VAR 0 7
47015: ARRAY
47016: PUSH
47017: LD_INT 2
47019: ARRAY
47020: PPUSH
47021: CALL_OW 488
47025: NOT
47026: PUSH
47027: LD_VAR 0 12
47031: PUSH
47032: LD_VAR 0 7
47036: ARRAY
47037: PUSH
47038: LD_INT 1
47040: ARRAY
47041: PPUSH
47042: LD_VAR 0 12
47046: PUSH
47047: LD_VAR 0 7
47051: ARRAY
47052: PUSH
47053: LD_INT 2
47055: ARRAY
47056: PPUSH
47057: CALL_OW 428
47061: PUSH
47062: LD_INT 0
47064: GREATER
47065: OR
47066: PUSH
47067: LD_VAR 0 12
47071: PUSH
47072: LD_VAR 0 7
47076: ARRAY
47077: PUSH
47078: LD_INT 1
47080: ARRAY
47081: PPUSH
47082: LD_VAR 0 12
47086: PUSH
47087: LD_VAR 0 7
47091: ARRAY
47092: PUSH
47093: LD_INT 2
47095: ARRAY
47096: PPUSH
47097: CALL_OW 351
47101: OR
47102: IFFALSE 47108
// exit ;
47104: POP
47105: POP
47106: GO 47400
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47108: LD_ADDR_VAR 0 8
47112: PUSH
47113: LD_VAR 0 12
47117: PUSH
47118: LD_VAR 0 7
47122: ARRAY
47123: PUSH
47124: LD_INT 1
47126: ARRAY
47127: PPUSH
47128: LD_VAR 0 12
47132: PUSH
47133: LD_VAR 0 7
47137: ARRAY
47138: PUSH
47139: LD_INT 2
47141: ARRAY
47142: PPUSH
47143: CALL_OW 546
47147: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47148: LD_VAR 0 8
47152: PUSH
47153: LD_INT 1
47155: ARRAY
47156: PUSH
47157: LD_VAR 0 8
47161: PUSH
47162: LD_INT 2
47164: ARRAY
47165: PUSH
47166: LD_VAR 0 13
47170: PUSH
47171: LD_INT 2
47173: PLUS
47174: GREATER
47175: OR
47176: PUSH
47177: LD_VAR 0 8
47181: PUSH
47182: LD_INT 2
47184: ARRAY
47185: PUSH
47186: LD_VAR 0 13
47190: PUSH
47191: LD_INT 2
47193: MINUS
47194: LESS
47195: OR
47196: PUSH
47197: LD_VAR 0 8
47201: PUSH
47202: LD_INT 3
47204: ARRAY
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 8
47211: PUSH
47212: LD_INT 9
47214: PUSH
47215: LD_INT 10
47217: PUSH
47218: LD_INT 11
47220: PUSH
47221: LD_INT 12
47223: PUSH
47224: LD_INT 13
47226: PUSH
47227: LD_INT 16
47229: PUSH
47230: LD_INT 17
47232: PUSH
47233: LD_INT 18
47235: PUSH
47236: LD_INT 19
47238: PUSH
47239: LD_INT 20
47241: PUSH
47242: LD_INT 21
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: IN
47260: NOT
47261: OR
47262: PUSH
47263: LD_VAR 0 8
47267: PUSH
47268: LD_INT 5
47270: ARRAY
47271: NOT
47272: OR
47273: PUSH
47274: LD_VAR 0 8
47278: PUSH
47279: LD_INT 6
47281: ARRAY
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 7
47291: PUSH
47292: LD_INT 9
47294: PUSH
47295: LD_INT 10
47297: PUSH
47298: LD_INT 11
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: IN
47309: NOT
47310: OR
47311: IFFALSE 47317
// exit ;
47313: POP
47314: POP
47315: GO 47400
// end ;
47317: GO 46988
47319: POP
47320: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47321: LD_VAR 0 9
47325: PPUSH
47326: LD_VAR 0 3
47330: PPUSH
47331: LD_VAR 0 4
47335: PPUSH
47336: LD_INT 20
47338: PPUSH
47339: CALL 39346 0 4
47343: PUSH
47344: LD_INT 4
47346: ARRAY
47347: IFFALSE 47351
// exit ;
47349: GO 47400
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47351: LD_VAR 0 2
47355: PUSH
47356: LD_INT 29
47358: PUSH
47359: LD_INT 30
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: IN
47366: PUSH
47367: LD_VAR 0 3
47371: PPUSH
47372: LD_VAR 0 4
47376: PPUSH
47377: LD_VAR 0 9
47381: PPUSH
47382: CALL_OW 440
47386: NOT
47387: AND
47388: IFFALSE 47392
// exit ;
47390: GO 47400
// result := true ;
47392: LD_ADDR_VAR 0 6
47396: PUSH
47397: LD_INT 1
47399: ST_TO_ADDR
// end ;
47400: LD_VAR 0 6
47404: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47405: LD_INT 0
47407: PPUSH
47408: PPUSH
47409: PPUSH
47410: PPUSH
47411: PPUSH
47412: PPUSH
47413: PPUSH
47414: PPUSH
47415: PPUSH
47416: PPUSH
47417: PPUSH
47418: PPUSH
47419: PPUSH
47420: PPUSH
47421: PPUSH
47422: PPUSH
47423: PPUSH
47424: PPUSH
47425: PPUSH
47426: PPUSH
47427: PPUSH
47428: PPUSH
47429: PPUSH
47430: PPUSH
47431: PPUSH
47432: PPUSH
47433: PPUSH
47434: PPUSH
47435: PPUSH
47436: PPUSH
47437: PPUSH
47438: PPUSH
47439: PPUSH
47440: PPUSH
47441: PPUSH
47442: PPUSH
47443: PPUSH
47444: PPUSH
47445: PPUSH
47446: PPUSH
47447: PPUSH
47448: PPUSH
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
47456: PPUSH
47457: PPUSH
47458: PPUSH
47459: PPUSH
47460: PPUSH
47461: PPUSH
47462: PPUSH
47463: PPUSH
47464: PPUSH
// result = [ ] ;
47465: LD_ADDR_VAR 0 7
47469: PUSH
47470: EMPTY
47471: ST_TO_ADDR
// temp_list = [ ] ;
47472: LD_ADDR_VAR 0 9
47476: PUSH
47477: EMPTY
47478: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47479: LD_VAR 0 4
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: LD_INT 3
47495: PUSH
47496: LD_INT 4
47498: PUSH
47499: LD_INT 5
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: IN
47510: NOT
47511: PUSH
47512: LD_VAR 0 1
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: IN
47527: PUSH
47528: LD_VAR 0 5
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: IN
47547: NOT
47548: AND
47549: OR
47550: IFFALSE 47554
// exit ;
47552: GO 65945
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47554: LD_VAR 0 1
47558: PUSH
47559: LD_INT 6
47561: PUSH
47562: LD_INT 7
47564: PUSH
47565: LD_INT 8
47567: PUSH
47568: LD_INT 13
47570: PUSH
47571: LD_INT 12
47573: PUSH
47574: LD_INT 15
47576: PUSH
47577: LD_INT 11
47579: PUSH
47580: LD_INT 14
47582: PUSH
47583: LD_INT 10
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: IN
47597: IFFALSE 47607
// btype = b_lab ;
47599: LD_ADDR_VAR 0 1
47603: PUSH
47604: LD_INT 6
47606: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47607: LD_VAR 0 6
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: IN
47626: NOT
47627: PUSH
47628: LD_VAR 0 1
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: LD_INT 6
47647: PUSH
47648: LD_INT 36
47650: PUSH
47651: LD_INT 4
47653: PUSH
47654: LD_INT 5
47656: PUSH
47657: LD_INT 31
47659: PUSH
47660: LD_INT 32
47662: PUSH
47663: LD_INT 33
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: IN
47679: NOT
47680: PUSH
47681: LD_VAR 0 6
47685: PUSH
47686: LD_INT 1
47688: EQUAL
47689: AND
47690: OR
47691: PUSH
47692: LD_VAR 0 1
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: IN
47707: NOT
47708: PUSH
47709: LD_VAR 0 6
47713: PUSH
47714: LD_INT 2
47716: EQUAL
47717: AND
47718: OR
47719: IFFALSE 47729
// mode = 0 ;
47721: LD_ADDR_VAR 0 6
47725: PUSH
47726: LD_INT 0
47728: ST_TO_ADDR
// case mode of 0 :
47729: LD_VAR 0 6
47733: PUSH
47734: LD_INT 0
47736: DOUBLE
47737: EQUAL
47738: IFTRUE 47742
47740: GO 59195
47742: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47743: LD_ADDR_VAR 0 11
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 3
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 3
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47936: LD_ADDR_VAR 0 12
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 3
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48132: LD_ADDR_VAR 0 13
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 3
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 3
48291: NEG
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: LD_INT 3
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48331: LD_ADDR_VAR 0 14
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 3
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 3
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48527: LD_ADDR_VAR 0 15
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 3
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48720: LD_ADDR_VAR 0 16
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 3
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 3
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 3
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48913: LD_ADDR_VAR 0 17
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49143: LD_ADDR_VAR 0 18
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49373: LD_ADDR_VAR 0 19
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 2
49560: NEG
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49603: LD_ADDR_VAR 0 20
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49833: LD_ADDR_VAR 0 21
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50063: LD_ADDR_VAR 0 22
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50293: LD_ADDR_VAR 0 23
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 3
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50573: LD_ADDR_VAR 0 24
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: NEG
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 3
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50849: LD_ADDR_VAR 0 25
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 3
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: LD_INT 3
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 3
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51123: LD_ADDR_VAR 0 26
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51399: LD_ADDR_VAR 0 27
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51679: LD_ADDR_VAR 0 28
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: LD_INT 3
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 3
51914: NEG
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: NEG
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51961: LD_ADDR_VAR 0 29
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: NEG
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52240: LD_ADDR_VAR 0 30
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 3
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52518: LD_ADDR_VAR 0 31
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 2
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 3
52761: NEG
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52796: LD_ADDR_VAR 0 32
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53074: LD_ADDR_VAR 0 33
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 3
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53353: LD_ADDR_VAR 0 34
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 3
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 3
53598: NEG
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53633: LD_ADDR_VAR 0 35
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53745: LD_ADDR_VAR 0 36
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53857: LD_ADDR_VAR 0 37
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53969: LD_ADDR_VAR 0 38
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54081: LD_ADDR_VAR 0 39
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54193: LD_ADDR_VAR 0 40
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54305: LD_ADDR_VAR 0 41
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 3
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 3
54614: NEG
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54655: LD_ADDR_VAR 0 42
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 3
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55005: LD_ADDR_VAR 0 43
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 3
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55353: LD_ADDR_VAR 0 44
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 3
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 3
55638: NEG
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 3
55650: NEG
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55703: LD_ADDR_VAR 0 45
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 3
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 3
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 3
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 3
56000: NEG
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 3
56012: NEG
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56053: LD_ADDR_VAR 0 46
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 3
56360: NEG
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56401: LD_ADDR_VAR 0 47
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 2
56516: NEG
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56552: LD_ADDR_VAR 0 48
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56699: LD_ADDR_VAR 0 49
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56843: LD_ADDR_VAR 0 50
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56987: LD_ADDR_VAR 0 51
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57134: LD_ADDR_VAR 0 52
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57285: LD_ADDR_VAR 0 53
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57515: LD_ADDR_VAR 0 54
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: NEG
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57745: LD_ADDR_VAR 0 55
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 2
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: NEG
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: LD_INT 2
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57975: LD_ADDR_VAR 0 56
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: NEG
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58205: LD_ADDR_VAR 0 57
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58435: LD_ADDR_VAR 0 58
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58665: LD_ADDR_VAR 0 59
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58753: LD_ADDR_VAR 0 60
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58841: LD_ADDR_VAR 0 61
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58929: LD_ADDR_VAR 0 62
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59017: LD_ADDR_VAR 0 63
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59105: LD_ADDR_VAR 0 64
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: ST_TO_ADDR
// end ; 1 :
59193: GO 65090
59195: LD_INT 1
59197: DOUBLE
59198: EQUAL
59199: IFTRUE 59203
59201: GO 61826
59203: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59204: LD_ADDR_VAR 0 11
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59248: LD_ADDR_VAR 0 12
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59289: LD_ADDR_VAR 0 13
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59329: LD_ADDR_VAR 0 14
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 3
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 3
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59370: LD_ADDR_VAR 0 15
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59414: LD_ADDR_VAR 0 16
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: LD_INT 3
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: LIST
59459: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59460: LD_ADDR_VAR 0 17
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 3
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59504: LD_ADDR_VAR 0 18
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 3
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: LIST
59544: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59545: LD_ADDR_VAR 0 19
59549: PUSH
59550: LD_INT 3
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 3
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: LIST
59584: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59585: LD_ADDR_VAR 0 20
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: LD_INT 2
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59626: LD_ADDR_VAR 0 21
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59670: LD_ADDR_VAR 0 22
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 3
59689: NEG
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: NEG
59702: PUSH
59703: LD_INT 3
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: LIST
59715: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59716: LD_ADDR_VAR 0 23
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: LD_INT 3
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: LD_INT 4
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: LIST
59759: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59760: LD_ADDR_VAR 0 24
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 4
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59801: LD_ADDR_VAR 0 25
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 4
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: LD_INT 4
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: LIST
59840: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59841: LD_ADDR_VAR 0 26
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: LD_INT 4
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59882: LD_ADDR_VAR 0 27
59886: PUSH
59887: LD_INT 3
59889: NEG
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 4
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: LIST
59925: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59926: LD_ADDR_VAR 0 28
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: LD_INT 4
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 4
59957: NEG
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: LIST
59971: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59972: LD_ADDR_VAR 0 29
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: LD_INT 4
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 4
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: LD_INT 3
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: LD_INT 5
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 5
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 4
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 6
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 6
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 5
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60127: LD_ADDR_VAR 0 30
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 3
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 4
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 4
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 4
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 5
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 5
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 5
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 6
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 6
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60270: LD_ADDR_VAR 0 31
60274: PUSH
60275: LD_INT 3
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 4
60307: PUSH
60308: LD_INT 3
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: LD_INT 4
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: LD_INT 4
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 5
60337: PUSH
60338: LD_INT 4
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 5
60347: PUSH
60348: LD_INT 5
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 4
60357: PUSH
60358: LD_INT 5
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 6
60367: PUSH
60368: LD_INT 5
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 6
60377: PUSH
60378: LD_INT 6
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 5
60387: PUSH
60388: LD_INT 6
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60409: LD_ADDR_VAR 0 32
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: LD_INT 4
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: LD_INT 4
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: LD_INT 3
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 5
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 5
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: LD_INT 4
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 6
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: LD_INT 6
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: LD_INT 5
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60552: LD_ADDR_VAR 0 33
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: NEG
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 4
60604: NEG
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 4
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 4
60627: NEG
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 5
60638: NEG
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 5
60649: NEG
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 5
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 6
60672: NEG
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 6
60683: NEG
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60707: LD_ADDR_VAR 0 34
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 3
60738: NEG
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 3
60750: NEG
60751: PUSH
60752: LD_INT 4
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 4
60762: NEG
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 4
60774: NEG
60775: PUSH
60776: LD_INT 4
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 4
60786: NEG
60787: PUSH
60788: LD_INT 5
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 5
60798: NEG
60799: PUSH
60800: LD_INT 4
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 5
60810: NEG
60811: PUSH
60812: LD_INT 5
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 5
60822: NEG
60823: PUSH
60824: LD_INT 6
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 6
60834: NEG
60835: PUSH
60836: LD_INT 5
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 6
60846: NEG
60847: PUSH
60848: LD_INT 6
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60870: LD_ADDR_VAR 0 41
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: LIST
60913: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60914: LD_ADDR_VAR 0 42
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: LIST
60954: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60955: LD_ADDR_VAR 0 43
60959: PUSH
60960: LD_INT 2
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: LIST
60994: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60995: LD_ADDR_VAR 0 44
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61036: LD_ADDR_VAR 0 45
61040: PUSH
61041: LD_INT 2
61043: NEG
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 3
61065: NEG
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: LIST
61079: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61080: LD_ADDR_VAR 0 46
61084: PUSH
61085: LD_INT 2
61087: NEG
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: NEG
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61126: LD_ADDR_VAR 0 47
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: LD_INT 3
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: LD_INT 3
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61159: LD_ADDR_VAR 0 48
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61190: LD_ADDR_VAR 0 49
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61219: LD_ADDR_VAR 0 50
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: LD_INT 3
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: LD_INT 3
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61248: LD_ADDR_VAR 0 51
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: NEG
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61279: LD_ADDR_VAR 0 52
61283: PUSH
61284: LD_INT 3
61286: NEG
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61312: LD_ADDR_VAR 0 53
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: LD_INT 3
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: LD_INT 2
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: LIST
61355: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61356: LD_ADDR_VAR 0 54
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 3
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: LIST
61396: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61397: LD_ADDR_VAR 0 55
61401: PUSH
61402: LD_INT 3
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 3
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 2
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: LIST
61436: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61437: LD_ADDR_VAR 0 56
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61478: LD_ADDR_VAR 0 57
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 3
61496: NEG
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 3
61507: NEG
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61522: LD_ADDR_VAR 0 58
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: LD_INT 3
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: LIST
61567: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61568: LD_ADDR_VAR 0 59
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 2
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: LIST
61611: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61612: LD_ADDR_VAR 0 60
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61653: LD_ADDR_VAR 0 61
61657: PUSH
61658: LD_INT 2
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61693: LD_ADDR_VAR 0 62
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: LD_INT 2
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: LIST
61733: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61734: LD_ADDR_VAR 0 63
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 2
61763: NEG
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61778: LD_ADDR_VAR 0 64
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 2
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: ST_TO_ADDR
// end ; 2 :
61824: GO 65090
61826: LD_INT 2
61828: DOUBLE
61829: EQUAL
61830: IFTRUE 61834
61832: GO 65089
61834: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61835: LD_ADDR_VAR 0 29
61839: PUSH
61840: LD_INT 4
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 4
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 5
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 5
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 4
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 3
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 5
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 4
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: LD_INT 4
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: LD_INT 4
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 2
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: LD_INT 2
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 4
62005: PUSH
62006: LD_INT 2
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 4
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 4
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 4
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 5
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 5
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 4
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: LD_INT 5
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 2
62107: NEG
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 3
62118: NEG
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 3
62129: NEG
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: NEG
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 3
62163: NEG
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 4
62174: NEG
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 4
62185: NEG
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 4
62197: NEG
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 2
62209: NEG
62210: PUSH
62211: LD_INT 2
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 4
62220: NEG
62221: PUSH
62222: LD_INT 4
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 4
62232: NEG
62233: PUSH
62234: LD_INT 5
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: LD_INT 4
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 3
62256: NEG
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 4
62268: NEG
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 5
62280: NEG
62281: PUSH
62282: LD_INT 4
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 5
62292: NEG
62293: PUSH
62294: LD_INT 5
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: LD_INT 5
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 5
62316: NEG
62317: PUSH
62318: LD_INT 3
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62373: LD_ADDR_VAR 0 30
62377: PUSH
62378: LD_INT 4
62380: PUSH
62381: LD_INT 4
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 4
62390: PUSH
62391: LD_INT 3
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 5
62400: PUSH
62401: LD_INT 4
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 5
62410: PUSH
62411: LD_INT 5
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 4
62420: PUSH
62421: LD_INT 5
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 3
62430: PUSH
62431: LD_INT 4
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 3
62440: PUSH
62441: LD_INT 3
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 5
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 3
62460: PUSH
62461: LD_INT 5
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: LD_INT 3
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: LD_INT 4
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: LD_INT 4
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: LD_INT 2
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: PUSH
62543: LD_INT 4
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 2
62552: NEG
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 4
62563: NEG
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 4
62574: NEG
62575: PUSH
62576: LD_INT 1
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 3
62597: NEG
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 4
62608: NEG
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 5
62619: NEG
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 5
62630: NEG
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 5
62642: NEG
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 3
62665: NEG
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 3
62677: NEG
62678: PUSH
62679: LD_INT 4
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: NEG
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 4
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 4
62737: NEG
62738: PUSH
62739: LD_INT 4
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: LD_INT 4
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 4
62761: NEG
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: LD_INT 4
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: LD_INT 5
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: LD_INT 4
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: LD_INT 3
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: LD_INT 3
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: LD_INT 4
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: LD_INT 5
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: LD_INT 3
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 2
62863: NEG
62864: PUSH
62865: LD_INT 5
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62920: LD_ADDR_VAR 0 31
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 4
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: LD_INT 4
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 5
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 5
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: NEG
62978: PUSH
62979: LD_INT 4
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: LD_INT 5
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 2
63009: NEG
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 3
63020: NEG
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 3
63031: NEG
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 2
63054: NEG
63055: PUSH
63056: LD_INT 1
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 3
63065: NEG
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 4
63076: NEG
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 4
63087: NEG
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 4
63099: NEG
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 4
63122: NEG
63123: PUSH
63124: LD_INT 4
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 4
63134: NEG
63135: PUSH
63136: LD_INT 5
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 3
63146: NEG
63147: PUSH
63148: LD_INT 4
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: NEG
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 4
63170: NEG
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 5
63182: NEG
63183: PUSH
63184: LD_INT 4
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 5
63194: NEG
63195: PUSH
63196: LD_INT 5
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: NEG
63207: PUSH
63208: LD_INT 5
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 5
63218: NEG
63219: PUSH
63220: LD_INT 3
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 3
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: LD_INT 4
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: LD_INT 3
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: LD_INT 2
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 3
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: LD_INT 4
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 2
63309: PUSH
63310: LD_INT 2
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 2
63320: NEG
63321: PUSH
63322: LD_INT 4
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 4
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 4
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 5
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 5
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 4
63373: PUSH
63374: LD_INT 1
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: LD_INT 1
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 3
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 5
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63470: LD_ADDR_VAR 0 32
63474: PUSH
63475: LD_INT 4
63477: NEG
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 4
63488: NEG
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 3
63511: NEG
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 4
63522: NEG
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 5
63533: NEG
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 5
63544: NEG
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 5
63556: NEG
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 3
63568: NEG
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 3
63579: NEG
63580: PUSH
63581: LD_INT 3
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 3
63591: NEG
63592: PUSH
63593: LD_INT 4
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: NEG
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 2
63615: NEG
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: LD_INT 2
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 4
63639: NEG
63640: PUSH
63641: LD_INT 3
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 4
63651: NEG
63652: PUSH
63653: LD_INT 4
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 2
63663: NEG
63664: PUSH
63665: LD_INT 4
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 4
63675: NEG
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 4
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: LD_INT 5
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: LD_INT 4
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 3
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 3
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: LD_INT 4
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 5
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 2
63766: PUSH
63767: LD_INT 3
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: LD_INT 5
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 3
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 3
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 4
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 4
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 2
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 2
63861: PUSH
63862: LD_INT 2
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 4
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 4
63882: PUSH
63883: LD_INT 4
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 4
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 5
63902: PUSH
63903: LD_INT 4
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 5
63912: PUSH
63913: LD_INT 5
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 4
63922: PUSH
63923: LD_INT 5
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 3
63932: PUSH
63933: LD_INT 4
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: PUSH
63943: LD_INT 3
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 5
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 3
63962: PUSH
63963: LD_INT 5
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64017: LD_ADDR_VAR 0 33
64021: PUSH
64022: LD_INT 4
64024: NEG
64025: PUSH
64026: LD_INT 4
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 4
64036: NEG
64037: PUSH
64038: LD_INT 5
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 3
64048: NEG
64049: PUSH
64050: LD_INT 4
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 3
64060: NEG
64061: PUSH
64062: LD_INT 3
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 4
64072: NEG
64073: PUSH
64074: LD_INT 3
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 5
64084: NEG
64085: PUSH
64086: LD_INT 4
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 5
64096: NEG
64097: PUSH
64098: LD_INT 5
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 3
64108: NEG
64109: PUSH
64110: LD_INT 5
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 5
64120: NEG
64121: PUSH
64122: LD_INT 3
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: LD_INT 3
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: LD_INT 4
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 3
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: LD_INT 2
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: LD_INT 2
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 1
64187: NEG
64188: PUSH
64189: LD_INT 3
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: LD_INT 4
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 2
64211: PUSH
64212: LD_INT 2
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: LD_INT 4
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 4
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 4
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 5
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 5
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 4
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 3
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 3
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 3
64306: PUSH
64307: LD_INT 2
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 5
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 3
64327: PUSH
64328: LD_INT 3
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 3
64337: PUSH
64338: LD_INT 2
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 4
64347: PUSH
64348: LD_INT 3
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 4
64357: PUSH
64358: LD_INT 4
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: PUSH
64368: LD_INT 4
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: LD_INT 3
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 4
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: LD_INT 4
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: LD_INT 4
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 3
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 4
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 5
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 5
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: LD_INT 4
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 3
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 2
64489: PUSH
64490: LD_INT 5
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 2
64499: NEG
64500: PUSH
64501: LD_INT 3
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64555: LD_ADDR_VAR 0 34
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_INT 4
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 5
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: LD_INT 4
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 3
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: LD_INT 3
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 1
64617: NEG
64618: PUSH
64619: LD_INT 4
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: LD_INT 5
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: LD_INT 3
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 2
64652: NEG
64653: PUSH
64654: LD_INT 5
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 3
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 4
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 4
64695: PUSH
64696: LD_INT 1
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 3
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 2
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 2
64736: PUSH
64737: LD_INT 2
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 4
64747: PUSH
64748: LD_INT 2
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 4
64757: PUSH
64758: LD_INT 4
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 4
64767: PUSH
64768: LD_INT 3
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 5
64777: PUSH
64778: LD_INT 4
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 5
64787: PUSH
64788: LD_INT 5
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 4
64797: PUSH
64798: LD_INT 5
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 3
64807: PUSH
64808: LD_INT 4
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 3
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 5
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 3
64837: PUSH
64838: LD_INT 5
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 3
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: LD_INT 3
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: LD_INT 4
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 4
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: LD_INT 4
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 2
64929: NEG
64930: PUSH
64931: LD_INT 2
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 4
64940: NEG
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 4
64951: NEG
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 3
64974: NEG
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 4
64985: NEG
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 5
64996: NEG
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 5
65007: NEG
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 5
65019: NEG
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 3
65031: NEG
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// end ; end ;
65087: GO 65090
65089: POP
// case btype of b_depot , b_warehouse :
65090: LD_VAR 0 1
65094: PUSH
65095: LD_INT 0
65097: DOUBLE
65098: EQUAL
65099: IFTRUE 65109
65101: LD_INT 1
65103: DOUBLE
65104: EQUAL
65105: IFTRUE 65109
65107: GO 65310
65109: POP
// case nation of nation_american :
65110: LD_VAR 0 5
65114: PUSH
65115: LD_INT 1
65117: DOUBLE
65118: EQUAL
65119: IFTRUE 65123
65121: GO 65179
65123: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65124: LD_ADDR_VAR 0 9
65128: PUSH
65129: LD_VAR 0 11
65133: PUSH
65134: LD_VAR 0 12
65138: PUSH
65139: LD_VAR 0 13
65143: PUSH
65144: LD_VAR 0 14
65148: PUSH
65149: LD_VAR 0 15
65153: PUSH
65154: LD_VAR 0 16
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: PUSH
65167: LD_VAR 0 4
65171: PUSH
65172: LD_INT 1
65174: PLUS
65175: ARRAY
65176: ST_TO_ADDR
65177: GO 65308
65179: LD_INT 2
65181: DOUBLE
65182: EQUAL
65183: IFTRUE 65187
65185: GO 65243
65187: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65188: LD_ADDR_VAR 0 9
65192: PUSH
65193: LD_VAR 0 17
65197: PUSH
65198: LD_VAR 0 18
65202: PUSH
65203: LD_VAR 0 19
65207: PUSH
65208: LD_VAR 0 20
65212: PUSH
65213: LD_VAR 0 21
65217: PUSH
65218: LD_VAR 0 22
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: PUSH
65231: LD_VAR 0 4
65235: PUSH
65236: LD_INT 1
65238: PLUS
65239: ARRAY
65240: ST_TO_ADDR
65241: GO 65308
65243: LD_INT 3
65245: DOUBLE
65246: EQUAL
65247: IFTRUE 65251
65249: GO 65307
65251: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65252: LD_ADDR_VAR 0 9
65256: PUSH
65257: LD_VAR 0 23
65261: PUSH
65262: LD_VAR 0 24
65266: PUSH
65267: LD_VAR 0 25
65271: PUSH
65272: LD_VAR 0 26
65276: PUSH
65277: LD_VAR 0 27
65281: PUSH
65282: LD_VAR 0 28
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: PUSH
65295: LD_VAR 0 4
65299: PUSH
65300: LD_INT 1
65302: PLUS
65303: ARRAY
65304: ST_TO_ADDR
65305: GO 65308
65307: POP
65308: GO 65863
65310: LD_INT 2
65312: DOUBLE
65313: EQUAL
65314: IFTRUE 65324
65316: LD_INT 3
65318: DOUBLE
65319: EQUAL
65320: IFTRUE 65324
65322: GO 65380
65324: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65325: LD_ADDR_VAR 0 9
65329: PUSH
65330: LD_VAR 0 29
65334: PUSH
65335: LD_VAR 0 30
65339: PUSH
65340: LD_VAR 0 31
65344: PUSH
65345: LD_VAR 0 32
65349: PUSH
65350: LD_VAR 0 33
65354: PUSH
65355: LD_VAR 0 34
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: PUSH
65368: LD_VAR 0 4
65372: PUSH
65373: LD_INT 1
65375: PLUS
65376: ARRAY
65377: ST_TO_ADDR
65378: GO 65863
65380: LD_INT 16
65382: DOUBLE
65383: EQUAL
65384: IFTRUE 65442
65386: LD_INT 17
65388: DOUBLE
65389: EQUAL
65390: IFTRUE 65442
65392: LD_INT 18
65394: DOUBLE
65395: EQUAL
65396: IFTRUE 65442
65398: LD_INT 19
65400: DOUBLE
65401: EQUAL
65402: IFTRUE 65442
65404: LD_INT 22
65406: DOUBLE
65407: EQUAL
65408: IFTRUE 65442
65410: LD_INT 20
65412: DOUBLE
65413: EQUAL
65414: IFTRUE 65442
65416: LD_INT 21
65418: DOUBLE
65419: EQUAL
65420: IFTRUE 65442
65422: LD_INT 23
65424: DOUBLE
65425: EQUAL
65426: IFTRUE 65442
65428: LD_INT 24
65430: DOUBLE
65431: EQUAL
65432: IFTRUE 65442
65434: LD_INT 25
65436: DOUBLE
65437: EQUAL
65438: IFTRUE 65442
65440: GO 65498
65442: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65443: LD_ADDR_VAR 0 9
65447: PUSH
65448: LD_VAR 0 35
65452: PUSH
65453: LD_VAR 0 36
65457: PUSH
65458: LD_VAR 0 37
65462: PUSH
65463: LD_VAR 0 38
65467: PUSH
65468: LD_VAR 0 39
65472: PUSH
65473: LD_VAR 0 40
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: PUSH
65486: LD_VAR 0 4
65490: PUSH
65491: LD_INT 1
65493: PLUS
65494: ARRAY
65495: ST_TO_ADDR
65496: GO 65863
65498: LD_INT 6
65500: DOUBLE
65501: EQUAL
65502: IFTRUE 65554
65504: LD_INT 7
65506: DOUBLE
65507: EQUAL
65508: IFTRUE 65554
65510: LD_INT 8
65512: DOUBLE
65513: EQUAL
65514: IFTRUE 65554
65516: LD_INT 13
65518: DOUBLE
65519: EQUAL
65520: IFTRUE 65554
65522: LD_INT 12
65524: DOUBLE
65525: EQUAL
65526: IFTRUE 65554
65528: LD_INT 15
65530: DOUBLE
65531: EQUAL
65532: IFTRUE 65554
65534: LD_INT 11
65536: DOUBLE
65537: EQUAL
65538: IFTRUE 65554
65540: LD_INT 14
65542: DOUBLE
65543: EQUAL
65544: IFTRUE 65554
65546: LD_INT 10
65548: DOUBLE
65549: EQUAL
65550: IFTRUE 65554
65552: GO 65610
65554: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65555: LD_ADDR_VAR 0 9
65559: PUSH
65560: LD_VAR 0 41
65564: PUSH
65565: LD_VAR 0 42
65569: PUSH
65570: LD_VAR 0 43
65574: PUSH
65575: LD_VAR 0 44
65579: PUSH
65580: LD_VAR 0 45
65584: PUSH
65585: LD_VAR 0 46
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: PUSH
65598: LD_VAR 0 4
65602: PUSH
65603: LD_INT 1
65605: PLUS
65606: ARRAY
65607: ST_TO_ADDR
65608: GO 65863
65610: LD_INT 36
65612: DOUBLE
65613: EQUAL
65614: IFTRUE 65618
65616: GO 65674
65618: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65619: LD_ADDR_VAR 0 9
65623: PUSH
65624: LD_VAR 0 47
65628: PUSH
65629: LD_VAR 0 48
65633: PUSH
65634: LD_VAR 0 49
65638: PUSH
65639: LD_VAR 0 50
65643: PUSH
65644: LD_VAR 0 51
65648: PUSH
65649: LD_VAR 0 52
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: PUSH
65662: LD_VAR 0 4
65666: PUSH
65667: LD_INT 1
65669: PLUS
65670: ARRAY
65671: ST_TO_ADDR
65672: GO 65863
65674: LD_INT 4
65676: DOUBLE
65677: EQUAL
65678: IFTRUE 65700
65680: LD_INT 5
65682: DOUBLE
65683: EQUAL
65684: IFTRUE 65700
65686: LD_INT 34
65688: DOUBLE
65689: EQUAL
65690: IFTRUE 65700
65692: LD_INT 37
65694: DOUBLE
65695: EQUAL
65696: IFTRUE 65700
65698: GO 65756
65700: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65701: LD_ADDR_VAR 0 9
65705: PUSH
65706: LD_VAR 0 53
65710: PUSH
65711: LD_VAR 0 54
65715: PUSH
65716: LD_VAR 0 55
65720: PUSH
65721: LD_VAR 0 56
65725: PUSH
65726: LD_VAR 0 57
65730: PUSH
65731: LD_VAR 0 58
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: PUSH
65744: LD_VAR 0 4
65748: PUSH
65749: LD_INT 1
65751: PLUS
65752: ARRAY
65753: ST_TO_ADDR
65754: GO 65863
65756: LD_INT 31
65758: DOUBLE
65759: EQUAL
65760: IFTRUE 65806
65762: LD_INT 32
65764: DOUBLE
65765: EQUAL
65766: IFTRUE 65806
65768: LD_INT 33
65770: DOUBLE
65771: EQUAL
65772: IFTRUE 65806
65774: LD_INT 27
65776: DOUBLE
65777: EQUAL
65778: IFTRUE 65806
65780: LD_INT 26
65782: DOUBLE
65783: EQUAL
65784: IFTRUE 65806
65786: LD_INT 28
65788: DOUBLE
65789: EQUAL
65790: IFTRUE 65806
65792: LD_INT 29
65794: DOUBLE
65795: EQUAL
65796: IFTRUE 65806
65798: LD_INT 30
65800: DOUBLE
65801: EQUAL
65802: IFTRUE 65806
65804: GO 65862
65806: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65807: LD_ADDR_VAR 0 9
65811: PUSH
65812: LD_VAR 0 59
65816: PUSH
65817: LD_VAR 0 60
65821: PUSH
65822: LD_VAR 0 61
65826: PUSH
65827: LD_VAR 0 62
65831: PUSH
65832: LD_VAR 0 63
65836: PUSH
65837: LD_VAR 0 64
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: PUSH
65850: LD_VAR 0 4
65854: PUSH
65855: LD_INT 1
65857: PLUS
65858: ARRAY
65859: ST_TO_ADDR
65860: GO 65863
65862: POP
// temp_list2 = [ ] ;
65863: LD_ADDR_VAR 0 10
65867: PUSH
65868: EMPTY
65869: ST_TO_ADDR
// for i in temp_list do
65870: LD_ADDR_VAR 0 8
65874: PUSH
65875: LD_VAR 0 9
65879: PUSH
65880: FOR_IN
65881: IFFALSE 65933
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65883: LD_ADDR_VAR 0 10
65887: PUSH
65888: LD_VAR 0 10
65892: PUSH
65893: LD_VAR 0 8
65897: PUSH
65898: LD_INT 1
65900: ARRAY
65901: PUSH
65902: LD_VAR 0 2
65906: PLUS
65907: PUSH
65908: LD_VAR 0 8
65912: PUSH
65913: LD_INT 2
65915: ARRAY
65916: PUSH
65917: LD_VAR 0 3
65921: PLUS
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: EMPTY
65928: LIST
65929: ADD
65930: ST_TO_ADDR
65931: GO 65880
65933: POP
65934: POP
// result = temp_list2 ;
65935: LD_ADDR_VAR 0 7
65939: PUSH
65940: LD_VAR 0 10
65944: ST_TO_ADDR
// end ;
65945: LD_VAR 0 7
65949: RET
// export function EnemyInRange ( unit , dist ) ; begin
65950: LD_INT 0
65952: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65953: LD_ADDR_VAR 0 3
65957: PUSH
65958: LD_VAR 0 1
65962: PPUSH
65963: CALL_OW 255
65967: PPUSH
65968: LD_VAR 0 1
65972: PPUSH
65973: CALL_OW 250
65977: PPUSH
65978: LD_VAR 0 1
65982: PPUSH
65983: CALL_OW 251
65987: PPUSH
65988: LD_VAR 0 2
65992: PPUSH
65993: CALL 39346 0 4
65997: PUSH
65998: LD_INT 4
66000: ARRAY
66001: ST_TO_ADDR
// end ;
66002: LD_VAR 0 3
66006: RET
// export function PlayerSeeMe ( unit ) ; begin
66007: LD_INT 0
66009: PPUSH
// result := See ( your_side , unit ) ;
66010: LD_ADDR_VAR 0 2
66014: PUSH
66015: LD_OWVAR 2
66019: PPUSH
66020: LD_VAR 0 1
66024: PPUSH
66025: CALL_OW 292
66029: ST_TO_ADDR
// end ;
66030: LD_VAR 0 2
66034: RET
// export function ReverseDir ( unit ) ; begin
66035: LD_INT 0
66037: PPUSH
// if not unit then
66038: LD_VAR 0 1
66042: NOT
66043: IFFALSE 66047
// exit ;
66045: GO 66070
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66047: LD_ADDR_VAR 0 2
66051: PUSH
66052: LD_VAR 0 1
66056: PPUSH
66057: CALL_OW 254
66061: PUSH
66062: LD_INT 3
66064: PLUS
66065: PUSH
66066: LD_INT 6
66068: MOD
66069: ST_TO_ADDR
// end ;
66070: LD_VAR 0 2
66074: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66075: LD_INT 0
66077: PPUSH
66078: PPUSH
66079: PPUSH
66080: PPUSH
66081: PPUSH
// if not hexes then
66082: LD_VAR 0 2
66086: NOT
66087: IFFALSE 66091
// exit ;
66089: GO 66239
// dist := 9999 ;
66091: LD_ADDR_VAR 0 5
66095: PUSH
66096: LD_INT 9999
66098: ST_TO_ADDR
// for i = 1 to hexes do
66099: LD_ADDR_VAR 0 4
66103: PUSH
66104: DOUBLE
66105: LD_INT 1
66107: DEC
66108: ST_TO_ADDR
66109: LD_VAR 0 2
66113: PUSH
66114: FOR_TO
66115: IFFALSE 66227
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66117: LD_VAR 0 1
66121: PPUSH
66122: LD_VAR 0 2
66126: PUSH
66127: LD_VAR 0 4
66131: ARRAY
66132: PUSH
66133: LD_INT 1
66135: ARRAY
66136: PPUSH
66137: LD_VAR 0 2
66141: PUSH
66142: LD_VAR 0 4
66146: ARRAY
66147: PUSH
66148: LD_INT 2
66150: ARRAY
66151: PPUSH
66152: CALL_OW 297
66156: PUSH
66157: LD_VAR 0 5
66161: LESS
66162: IFFALSE 66225
// begin hex := hexes [ i ] ;
66164: LD_ADDR_VAR 0 7
66168: PUSH
66169: LD_VAR 0 2
66173: PUSH
66174: LD_VAR 0 4
66178: ARRAY
66179: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66180: LD_ADDR_VAR 0 5
66184: PUSH
66185: LD_VAR 0 1
66189: PPUSH
66190: LD_VAR 0 2
66194: PUSH
66195: LD_VAR 0 4
66199: ARRAY
66200: PUSH
66201: LD_INT 1
66203: ARRAY
66204: PPUSH
66205: LD_VAR 0 2
66209: PUSH
66210: LD_VAR 0 4
66214: ARRAY
66215: PUSH
66216: LD_INT 2
66218: ARRAY
66219: PPUSH
66220: CALL_OW 297
66224: ST_TO_ADDR
// end ; end ;
66225: GO 66114
66227: POP
66228: POP
// result := hex ;
66229: LD_ADDR_VAR 0 3
66233: PUSH
66234: LD_VAR 0 7
66238: ST_TO_ADDR
// end ;
66239: LD_VAR 0 3
66243: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66244: LD_INT 0
66246: PPUSH
66247: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66248: LD_VAR 0 1
66252: NOT
66253: PUSH
66254: LD_VAR 0 1
66258: PUSH
66259: LD_INT 21
66261: PUSH
66262: LD_INT 2
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 23
66271: PUSH
66272: LD_INT 2
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PPUSH
66283: CALL_OW 69
66287: IN
66288: NOT
66289: OR
66290: IFFALSE 66294
// exit ;
66292: GO 66341
// for i = 1 to 3 do
66294: LD_ADDR_VAR 0 3
66298: PUSH
66299: DOUBLE
66300: LD_INT 1
66302: DEC
66303: ST_TO_ADDR
66304: LD_INT 3
66306: PUSH
66307: FOR_TO
66308: IFFALSE 66339
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66310: LD_VAR 0 1
66314: PPUSH
66315: CALL_OW 250
66319: PPUSH
66320: LD_VAR 0 1
66324: PPUSH
66325: CALL_OW 251
66329: PPUSH
66330: LD_INT 1
66332: PPUSH
66333: CALL_OW 453
66337: GO 66307
66339: POP
66340: POP
// end ;
66341: LD_VAR 0 2
66345: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66346: LD_INT 0
66348: PPUSH
66349: PPUSH
66350: PPUSH
66351: PPUSH
66352: PPUSH
66353: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66354: LD_VAR 0 1
66358: NOT
66359: PUSH
66360: LD_VAR 0 2
66364: NOT
66365: OR
66366: PUSH
66367: LD_VAR 0 1
66371: PPUSH
66372: CALL_OW 314
66376: OR
66377: IFFALSE 66381
// exit ;
66379: GO 66822
// x := GetX ( enemy_unit ) ;
66381: LD_ADDR_VAR 0 7
66385: PUSH
66386: LD_VAR 0 2
66390: PPUSH
66391: CALL_OW 250
66395: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66396: LD_ADDR_VAR 0 8
66400: PUSH
66401: LD_VAR 0 2
66405: PPUSH
66406: CALL_OW 251
66410: ST_TO_ADDR
// if not x or not y then
66411: LD_VAR 0 7
66415: NOT
66416: PUSH
66417: LD_VAR 0 8
66421: NOT
66422: OR
66423: IFFALSE 66427
// exit ;
66425: GO 66822
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66427: LD_ADDR_VAR 0 6
66431: PUSH
66432: LD_VAR 0 7
66436: PPUSH
66437: LD_INT 0
66439: PPUSH
66440: LD_INT 4
66442: PPUSH
66443: CALL_OW 272
66447: PUSH
66448: LD_VAR 0 8
66452: PPUSH
66453: LD_INT 0
66455: PPUSH
66456: LD_INT 4
66458: PPUSH
66459: CALL_OW 273
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_VAR 0 7
66472: PPUSH
66473: LD_INT 1
66475: PPUSH
66476: LD_INT 4
66478: PPUSH
66479: CALL_OW 272
66483: PUSH
66484: LD_VAR 0 8
66488: PPUSH
66489: LD_INT 1
66491: PPUSH
66492: LD_INT 4
66494: PPUSH
66495: CALL_OW 273
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_VAR 0 7
66508: PPUSH
66509: LD_INT 2
66511: PPUSH
66512: LD_INT 4
66514: PPUSH
66515: CALL_OW 272
66519: PUSH
66520: LD_VAR 0 8
66524: PPUSH
66525: LD_INT 2
66527: PPUSH
66528: LD_INT 4
66530: PPUSH
66531: CALL_OW 273
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_VAR 0 7
66544: PPUSH
66545: LD_INT 3
66547: PPUSH
66548: LD_INT 4
66550: PPUSH
66551: CALL_OW 272
66555: PUSH
66556: LD_VAR 0 8
66560: PPUSH
66561: LD_INT 3
66563: PPUSH
66564: LD_INT 4
66566: PPUSH
66567: CALL_OW 273
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_VAR 0 7
66580: PPUSH
66581: LD_INT 4
66583: PPUSH
66584: LD_INT 4
66586: PPUSH
66587: CALL_OW 272
66591: PUSH
66592: LD_VAR 0 8
66596: PPUSH
66597: LD_INT 4
66599: PPUSH
66600: LD_INT 4
66602: PPUSH
66603: CALL_OW 273
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_VAR 0 7
66616: PPUSH
66617: LD_INT 5
66619: PPUSH
66620: LD_INT 4
66622: PPUSH
66623: CALL_OW 272
66627: PUSH
66628: LD_VAR 0 8
66632: PPUSH
66633: LD_INT 5
66635: PPUSH
66636: LD_INT 4
66638: PPUSH
66639: CALL_OW 273
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: ST_TO_ADDR
// for i = tmp downto 1 do
66656: LD_ADDR_VAR 0 4
66660: PUSH
66661: DOUBLE
66662: LD_VAR 0 6
66666: INC
66667: ST_TO_ADDR
66668: LD_INT 1
66670: PUSH
66671: FOR_DOWNTO
66672: IFFALSE 66773
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66674: LD_VAR 0 6
66678: PUSH
66679: LD_VAR 0 4
66683: ARRAY
66684: PUSH
66685: LD_INT 1
66687: ARRAY
66688: PPUSH
66689: LD_VAR 0 6
66693: PUSH
66694: LD_VAR 0 4
66698: ARRAY
66699: PUSH
66700: LD_INT 2
66702: ARRAY
66703: PPUSH
66704: CALL_OW 488
66708: NOT
66709: PUSH
66710: LD_VAR 0 6
66714: PUSH
66715: LD_VAR 0 4
66719: ARRAY
66720: PUSH
66721: LD_INT 1
66723: ARRAY
66724: PPUSH
66725: LD_VAR 0 6
66729: PUSH
66730: LD_VAR 0 4
66734: ARRAY
66735: PUSH
66736: LD_INT 2
66738: ARRAY
66739: PPUSH
66740: CALL_OW 428
66744: PUSH
66745: LD_INT 0
66747: NONEQUAL
66748: OR
66749: IFFALSE 66771
// tmp := Delete ( tmp , i ) ;
66751: LD_ADDR_VAR 0 6
66755: PUSH
66756: LD_VAR 0 6
66760: PPUSH
66761: LD_VAR 0 4
66765: PPUSH
66766: CALL_OW 3
66770: ST_TO_ADDR
66771: GO 66671
66773: POP
66774: POP
// j := GetClosestHex ( unit , tmp ) ;
66775: LD_ADDR_VAR 0 5
66779: PUSH
66780: LD_VAR 0 1
66784: PPUSH
66785: LD_VAR 0 6
66789: PPUSH
66790: CALL 66075 0 2
66794: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66795: LD_VAR 0 1
66799: PPUSH
66800: LD_VAR 0 5
66804: PUSH
66805: LD_INT 1
66807: ARRAY
66808: PPUSH
66809: LD_VAR 0 5
66813: PUSH
66814: LD_INT 2
66816: ARRAY
66817: PPUSH
66818: CALL_OW 111
// end ;
66822: LD_VAR 0 3
66826: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66827: LD_INT 0
66829: PPUSH
66830: PPUSH
66831: PPUSH
// uc_side = 0 ;
66832: LD_ADDR_OWVAR 20
66836: PUSH
66837: LD_INT 0
66839: ST_TO_ADDR
// uc_nation = 0 ;
66840: LD_ADDR_OWVAR 21
66844: PUSH
66845: LD_INT 0
66847: ST_TO_ADDR
// InitHc_All ( ) ;
66848: CALL_OW 584
// InitVc ;
66852: CALL_OW 20
// if mastodonts then
66856: LD_VAR 0 6
66860: IFFALSE 66927
// for i = 1 to mastodonts do
66862: LD_ADDR_VAR 0 11
66866: PUSH
66867: DOUBLE
66868: LD_INT 1
66870: DEC
66871: ST_TO_ADDR
66872: LD_VAR 0 6
66876: PUSH
66877: FOR_TO
66878: IFFALSE 66925
// begin vc_chassis := 31 ;
66880: LD_ADDR_OWVAR 37
66884: PUSH
66885: LD_INT 31
66887: ST_TO_ADDR
// vc_control := control_rider ;
66888: LD_ADDR_OWVAR 38
66892: PUSH
66893: LD_INT 4
66895: ST_TO_ADDR
// animal := CreateVehicle ;
66896: LD_ADDR_VAR 0 12
66900: PUSH
66901: CALL_OW 45
66905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66906: LD_VAR 0 12
66910: PPUSH
66911: LD_VAR 0 8
66915: PPUSH
66916: LD_INT 0
66918: PPUSH
66919: CALL 69115 0 3
// end ;
66923: GO 66877
66925: POP
66926: POP
// if horses then
66927: LD_VAR 0 5
66931: IFFALSE 66998
// for i = 1 to horses do
66933: LD_ADDR_VAR 0 11
66937: PUSH
66938: DOUBLE
66939: LD_INT 1
66941: DEC
66942: ST_TO_ADDR
66943: LD_VAR 0 5
66947: PUSH
66948: FOR_TO
66949: IFFALSE 66996
// begin hc_class := 21 ;
66951: LD_ADDR_OWVAR 28
66955: PUSH
66956: LD_INT 21
66958: ST_TO_ADDR
// hc_gallery :=  ;
66959: LD_ADDR_OWVAR 33
66963: PUSH
66964: LD_STRING 
66966: ST_TO_ADDR
// animal := CreateHuman ;
66967: LD_ADDR_VAR 0 12
66971: PUSH
66972: CALL_OW 44
66976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66977: LD_VAR 0 12
66981: PPUSH
66982: LD_VAR 0 8
66986: PPUSH
66987: LD_INT 0
66989: PPUSH
66990: CALL 69115 0 3
// end ;
66994: GO 66948
66996: POP
66997: POP
// if birds then
66998: LD_VAR 0 1
67002: IFFALSE 67069
// for i = 1 to birds do
67004: LD_ADDR_VAR 0 11
67008: PUSH
67009: DOUBLE
67010: LD_INT 1
67012: DEC
67013: ST_TO_ADDR
67014: LD_VAR 0 1
67018: PUSH
67019: FOR_TO
67020: IFFALSE 67067
// begin hc_class = 18 ;
67022: LD_ADDR_OWVAR 28
67026: PUSH
67027: LD_INT 18
67029: ST_TO_ADDR
// hc_gallery =  ;
67030: LD_ADDR_OWVAR 33
67034: PUSH
67035: LD_STRING 
67037: ST_TO_ADDR
// animal := CreateHuman ;
67038: LD_ADDR_VAR 0 12
67042: PUSH
67043: CALL_OW 44
67047: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67048: LD_VAR 0 12
67052: PPUSH
67053: LD_VAR 0 8
67057: PPUSH
67058: LD_INT 0
67060: PPUSH
67061: CALL 69115 0 3
// end ;
67065: GO 67019
67067: POP
67068: POP
// if tigers then
67069: LD_VAR 0 2
67073: IFFALSE 67157
// for i = 1 to tigers do
67075: LD_ADDR_VAR 0 11
67079: PUSH
67080: DOUBLE
67081: LD_INT 1
67083: DEC
67084: ST_TO_ADDR
67085: LD_VAR 0 2
67089: PUSH
67090: FOR_TO
67091: IFFALSE 67155
// begin hc_class = class_tiger ;
67093: LD_ADDR_OWVAR 28
67097: PUSH
67098: LD_INT 14
67100: ST_TO_ADDR
// hc_gallery =  ;
67101: LD_ADDR_OWVAR 33
67105: PUSH
67106: LD_STRING 
67108: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67109: LD_ADDR_OWVAR 35
67113: PUSH
67114: LD_INT 7
67116: NEG
67117: PPUSH
67118: LD_INT 7
67120: PPUSH
67121: CALL_OW 12
67125: ST_TO_ADDR
// animal := CreateHuman ;
67126: LD_ADDR_VAR 0 12
67130: PUSH
67131: CALL_OW 44
67135: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67136: LD_VAR 0 12
67140: PPUSH
67141: LD_VAR 0 8
67145: PPUSH
67146: LD_INT 0
67148: PPUSH
67149: CALL 69115 0 3
// end ;
67153: GO 67090
67155: POP
67156: POP
// if apemans then
67157: LD_VAR 0 3
67161: IFFALSE 67284
// for i = 1 to apemans do
67163: LD_ADDR_VAR 0 11
67167: PUSH
67168: DOUBLE
67169: LD_INT 1
67171: DEC
67172: ST_TO_ADDR
67173: LD_VAR 0 3
67177: PUSH
67178: FOR_TO
67179: IFFALSE 67282
// begin hc_class = class_apeman ;
67181: LD_ADDR_OWVAR 28
67185: PUSH
67186: LD_INT 12
67188: ST_TO_ADDR
// hc_gallery =  ;
67189: LD_ADDR_OWVAR 33
67193: PUSH
67194: LD_STRING 
67196: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67197: LD_ADDR_OWVAR 35
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PPUSH
67206: LD_INT 2
67208: PPUSH
67209: CALL_OW 12
67213: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67214: LD_ADDR_OWVAR 31
67218: PUSH
67219: LD_INT 1
67221: PPUSH
67222: LD_INT 3
67224: PPUSH
67225: CALL_OW 12
67229: PUSH
67230: LD_INT 1
67232: PPUSH
67233: LD_INT 3
67235: PPUSH
67236: CALL_OW 12
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: ST_TO_ADDR
// animal := CreateHuman ;
67253: LD_ADDR_VAR 0 12
67257: PUSH
67258: CALL_OW 44
67262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67263: LD_VAR 0 12
67267: PPUSH
67268: LD_VAR 0 8
67272: PPUSH
67273: LD_INT 0
67275: PPUSH
67276: CALL 69115 0 3
// end ;
67280: GO 67178
67282: POP
67283: POP
// if enchidnas then
67284: LD_VAR 0 4
67288: IFFALSE 67355
// for i = 1 to enchidnas do
67290: LD_ADDR_VAR 0 11
67294: PUSH
67295: DOUBLE
67296: LD_INT 1
67298: DEC
67299: ST_TO_ADDR
67300: LD_VAR 0 4
67304: PUSH
67305: FOR_TO
67306: IFFALSE 67353
// begin hc_class = 13 ;
67308: LD_ADDR_OWVAR 28
67312: PUSH
67313: LD_INT 13
67315: ST_TO_ADDR
// hc_gallery =  ;
67316: LD_ADDR_OWVAR 33
67320: PUSH
67321: LD_STRING 
67323: ST_TO_ADDR
// animal := CreateHuman ;
67324: LD_ADDR_VAR 0 12
67328: PUSH
67329: CALL_OW 44
67333: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67334: LD_VAR 0 12
67338: PPUSH
67339: LD_VAR 0 8
67343: PPUSH
67344: LD_INT 0
67346: PPUSH
67347: CALL 69115 0 3
// end ;
67351: GO 67305
67353: POP
67354: POP
// if fishes then
67355: LD_VAR 0 7
67359: IFFALSE 67426
// for i = 1 to fishes do
67361: LD_ADDR_VAR 0 11
67365: PUSH
67366: DOUBLE
67367: LD_INT 1
67369: DEC
67370: ST_TO_ADDR
67371: LD_VAR 0 7
67375: PUSH
67376: FOR_TO
67377: IFFALSE 67424
// begin hc_class = 20 ;
67379: LD_ADDR_OWVAR 28
67383: PUSH
67384: LD_INT 20
67386: ST_TO_ADDR
// hc_gallery =  ;
67387: LD_ADDR_OWVAR 33
67391: PUSH
67392: LD_STRING 
67394: ST_TO_ADDR
// animal := CreateHuman ;
67395: LD_ADDR_VAR 0 12
67399: PUSH
67400: CALL_OW 44
67404: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67405: LD_VAR 0 12
67409: PPUSH
67410: LD_VAR 0 9
67414: PPUSH
67415: LD_INT 0
67417: PPUSH
67418: CALL 69115 0 3
// end ;
67422: GO 67376
67424: POP
67425: POP
// end ;
67426: LD_VAR 0 10
67430: RET
// export function WantHeal ( sci , unit ) ; begin
67431: LD_INT 0
67433: PPUSH
// if GetTaskList ( sci ) > 0 then
67434: LD_VAR 0 1
67438: PPUSH
67439: CALL_OW 437
67443: PUSH
67444: LD_INT 0
67446: GREATER
67447: IFFALSE 67517
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67449: LD_VAR 0 1
67453: PPUSH
67454: CALL_OW 437
67458: PUSH
67459: LD_INT 1
67461: ARRAY
67462: PUSH
67463: LD_INT 1
67465: ARRAY
67466: PUSH
67467: LD_STRING l
67469: EQUAL
67470: PUSH
67471: LD_VAR 0 1
67475: PPUSH
67476: CALL_OW 437
67480: PUSH
67481: LD_INT 1
67483: ARRAY
67484: PUSH
67485: LD_INT 4
67487: ARRAY
67488: PUSH
67489: LD_VAR 0 2
67493: EQUAL
67494: AND
67495: IFFALSE 67507
// result := true else
67497: LD_ADDR_VAR 0 3
67501: PUSH
67502: LD_INT 1
67504: ST_TO_ADDR
67505: GO 67515
// result := false ;
67507: LD_ADDR_VAR 0 3
67511: PUSH
67512: LD_INT 0
67514: ST_TO_ADDR
// end else
67515: GO 67525
// result := false ;
67517: LD_ADDR_VAR 0 3
67521: PUSH
67522: LD_INT 0
67524: ST_TO_ADDR
// end ;
67525: LD_VAR 0 3
67529: RET
// export function HealTarget ( sci ) ; begin
67530: LD_INT 0
67532: PPUSH
// if not sci then
67533: LD_VAR 0 1
67537: NOT
67538: IFFALSE 67542
// exit ;
67540: GO 67607
// result := 0 ;
67542: LD_ADDR_VAR 0 2
67546: PUSH
67547: LD_INT 0
67549: ST_TO_ADDR
// if GetTaskList ( sci ) then
67550: LD_VAR 0 1
67554: PPUSH
67555: CALL_OW 437
67559: IFFALSE 67607
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67561: LD_VAR 0 1
67565: PPUSH
67566: CALL_OW 437
67570: PUSH
67571: LD_INT 1
67573: ARRAY
67574: PUSH
67575: LD_INT 1
67577: ARRAY
67578: PUSH
67579: LD_STRING l
67581: EQUAL
67582: IFFALSE 67607
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67584: LD_ADDR_VAR 0 2
67588: PUSH
67589: LD_VAR 0 1
67593: PPUSH
67594: CALL_OW 437
67598: PUSH
67599: LD_INT 1
67601: ARRAY
67602: PUSH
67603: LD_INT 4
67605: ARRAY
67606: ST_TO_ADDR
// end ;
67607: LD_VAR 0 2
67611: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67612: LD_INT 0
67614: PPUSH
67615: PPUSH
67616: PPUSH
67617: PPUSH
// if not base_units then
67618: LD_VAR 0 1
67622: NOT
67623: IFFALSE 67627
// exit ;
67625: GO 67714
// result := false ;
67627: LD_ADDR_VAR 0 2
67631: PUSH
67632: LD_INT 0
67634: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67635: LD_ADDR_VAR 0 5
67639: PUSH
67640: LD_VAR 0 1
67644: PPUSH
67645: LD_INT 21
67647: PUSH
67648: LD_INT 3
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PPUSH
67655: CALL_OW 72
67659: ST_TO_ADDR
// if not tmp then
67660: LD_VAR 0 5
67664: NOT
67665: IFFALSE 67669
// exit ;
67667: GO 67714
// for i in tmp do
67669: LD_ADDR_VAR 0 3
67673: PUSH
67674: LD_VAR 0 5
67678: PUSH
67679: FOR_IN
67680: IFFALSE 67712
// begin result := EnemyInRange ( i , 22 ) ;
67682: LD_ADDR_VAR 0 2
67686: PUSH
67687: LD_VAR 0 3
67691: PPUSH
67692: LD_INT 22
67694: PPUSH
67695: CALL 65950 0 2
67699: ST_TO_ADDR
// if result then
67700: LD_VAR 0 2
67704: IFFALSE 67710
// exit ;
67706: POP
67707: POP
67708: GO 67714
// end ;
67710: GO 67679
67712: POP
67713: POP
// end ;
67714: LD_VAR 0 2
67718: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67719: LD_INT 0
67721: PPUSH
67722: PPUSH
// if not units then
67723: LD_VAR 0 1
67727: NOT
67728: IFFALSE 67732
// exit ;
67730: GO 67802
// result := [ ] ;
67732: LD_ADDR_VAR 0 3
67736: PUSH
67737: EMPTY
67738: ST_TO_ADDR
// for i in units do
67739: LD_ADDR_VAR 0 4
67743: PUSH
67744: LD_VAR 0 1
67748: PUSH
67749: FOR_IN
67750: IFFALSE 67800
// if GetTag ( i ) = tag then
67752: LD_VAR 0 4
67756: PPUSH
67757: CALL_OW 110
67761: PUSH
67762: LD_VAR 0 2
67766: EQUAL
67767: IFFALSE 67798
// result := Replace ( result , result + 1 , i ) ;
67769: LD_ADDR_VAR 0 3
67773: PUSH
67774: LD_VAR 0 3
67778: PPUSH
67779: LD_VAR 0 3
67783: PUSH
67784: LD_INT 1
67786: PLUS
67787: PPUSH
67788: LD_VAR 0 4
67792: PPUSH
67793: CALL_OW 1
67797: ST_TO_ADDR
67798: GO 67749
67800: POP
67801: POP
// end ;
67802: LD_VAR 0 3
67806: RET
// export function IsDriver ( un ) ; begin
67807: LD_INT 0
67809: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67810: LD_ADDR_VAR 0 2
67814: PUSH
67815: LD_VAR 0 1
67819: PUSH
67820: LD_INT 55
67822: PUSH
67823: EMPTY
67824: LIST
67825: PPUSH
67826: CALL_OW 69
67830: IN
67831: ST_TO_ADDR
// end ;
67832: LD_VAR 0 2
67836: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67837: LD_INT 0
67839: PPUSH
67840: PPUSH
// list := [ ] ;
67841: LD_ADDR_VAR 0 5
67845: PUSH
67846: EMPTY
67847: ST_TO_ADDR
// case d of 0 :
67848: LD_VAR 0 3
67852: PUSH
67853: LD_INT 0
67855: DOUBLE
67856: EQUAL
67857: IFTRUE 67861
67859: GO 67994
67861: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67862: LD_ADDR_VAR 0 5
67866: PUSH
67867: LD_VAR 0 1
67871: PUSH
67872: LD_INT 4
67874: MINUS
67875: PUSH
67876: LD_VAR 0 2
67880: PUSH
67881: LD_INT 4
67883: MINUS
67884: PUSH
67885: LD_INT 2
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: LIST
67892: PUSH
67893: LD_VAR 0 1
67897: PUSH
67898: LD_INT 3
67900: MINUS
67901: PUSH
67902: LD_VAR 0 2
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: LIST
67914: PUSH
67915: LD_VAR 0 1
67919: PUSH
67920: LD_INT 4
67922: PLUS
67923: PUSH
67924: LD_VAR 0 2
67928: PUSH
67929: LD_INT 4
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: LIST
67936: PUSH
67937: LD_VAR 0 1
67941: PUSH
67942: LD_INT 3
67944: PLUS
67945: PUSH
67946: LD_VAR 0 2
67950: PUSH
67951: LD_INT 3
67953: PLUS
67954: PUSH
67955: LD_INT 5
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: PUSH
67963: LD_VAR 0 1
67967: PUSH
67968: LD_VAR 0 2
67972: PUSH
67973: LD_INT 4
67975: PLUS
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: LIST
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: ST_TO_ADDR
// end ; 1 :
67992: GO 68692
67994: LD_INT 1
67996: DOUBLE
67997: EQUAL
67998: IFTRUE 68002
68000: GO 68135
68002: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68003: LD_ADDR_VAR 0 5
68007: PUSH
68008: LD_VAR 0 1
68012: PUSH
68013: LD_VAR 0 2
68017: PUSH
68018: LD_INT 4
68020: MINUS
68021: PUSH
68022: LD_INT 3
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: LIST
68029: PUSH
68030: LD_VAR 0 1
68034: PUSH
68035: LD_INT 3
68037: MINUS
68038: PUSH
68039: LD_VAR 0 2
68043: PUSH
68044: LD_INT 3
68046: MINUS
68047: PUSH
68048: LD_INT 2
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: LIST
68055: PUSH
68056: LD_VAR 0 1
68060: PUSH
68061: LD_INT 4
68063: MINUS
68064: PUSH
68065: LD_VAR 0 2
68069: PUSH
68070: LD_INT 1
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: LIST
68077: PUSH
68078: LD_VAR 0 1
68082: PUSH
68083: LD_VAR 0 2
68087: PUSH
68088: LD_INT 3
68090: PLUS
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: PUSH
68100: LD_VAR 0 1
68104: PUSH
68105: LD_INT 4
68107: PLUS
68108: PUSH
68109: LD_VAR 0 2
68113: PUSH
68114: LD_INT 4
68116: PLUS
68117: PUSH
68118: LD_INT 5
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: LIST
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: ST_TO_ADDR
// end ; 2 :
68133: GO 68692
68135: LD_INT 2
68137: DOUBLE
68138: EQUAL
68139: IFTRUE 68143
68141: GO 68272
68143: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68144: LD_ADDR_VAR 0 5
68148: PUSH
68149: LD_VAR 0 1
68153: PUSH
68154: LD_VAR 0 2
68158: PUSH
68159: LD_INT 3
68161: MINUS
68162: PUSH
68163: LD_INT 3
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: LIST
68170: PUSH
68171: LD_VAR 0 1
68175: PUSH
68176: LD_INT 4
68178: PLUS
68179: PUSH
68180: LD_VAR 0 2
68184: PUSH
68185: LD_INT 4
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: PUSH
68193: LD_VAR 0 1
68197: PUSH
68198: LD_VAR 0 2
68202: PUSH
68203: LD_INT 4
68205: PLUS
68206: PUSH
68207: LD_INT 0
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: LIST
68214: PUSH
68215: LD_VAR 0 1
68219: PUSH
68220: LD_INT 3
68222: MINUS
68223: PUSH
68224: LD_VAR 0 2
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: LIST
68236: PUSH
68237: LD_VAR 0 1
68241: PUSH
68242: LD_INT 4
68244: MINUS
68245: PUSH
68246: LD_VAR 0 2
68250: PUSH
68251: LD_INT 4
68253: MINUS
68254: PUSH
68255: LD_INT 2
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: ST_TO_ADDR
// end ; 3 :
68270: GO 68692
68272: LD_INT 3
68274: DOUBLE
68275: EQUAL
68276: IFTRUE 68280
68278: GO 68413
68280: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68281: LD_ADDR_VAR 0 5
68285: PUSH
68286: LD_VAR 0 1
68290: PUSH
68291: LD_INT 3
68293: PLUS
68294: PUSH
68295: LD_VAR 0 2
68299: PUSH
68300: LD_INT 4
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: LIST
68307: PUSH
68308: LD_VAR 0 1
68312: PUSH
68313: LD_INT 4
68315: PLUS
68316: PUSH
68317: LD_VAR 0 2
68321: PUSH
68322: LD_INT 4
68324: PLUS
68325: PUSH
68326: LD_INT 5
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: LIST
68333: PUSH
68334: LD_VAR 0 1
68338: PUSH
68339: LD_INT 4
68341: MINUS
68342: PUSH
68343: LD_VAR 0 2
68347: PUSH
68348: LD_INT 1
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: LIST
68355: PUSH
68356: LD_VAR 0 1
68360: PUSH
68361: LD_VAR 0 2
68365: PUSH
68366: LD_INT 4
68368: MINUS
68369: PUSH
68370: LD_INT 3
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: LIST
68377: PUSH
68378: LD_VAR 0 1
68382: PUSH
68383: LD_INT 3
68385: MINUS
68386: PUSH
68387: LD_VAR 0 2
68391: PUSH
68392: LD_INT 3
68394: MINUS
68395: PUSH
68396: LD_INT 2
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: LIST
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: ST_TO_ADDR
// end ; 4 :
68411: GO 68692
68413: LD_INT 4
68415: DOUBLE
68416: EQUAL
68417: IFTRUE 68421
68419: GO 68554
68421: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68422: LD_ADDR_VAR 0 5
68426: PUSH
68427: LD_VAR 0 1
68431: PUSH
68432: LD_VAR 0 2
68436: PUSH
68437: LD_INT 4
68439: PLUS
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: LIST
68448: PUSH
68449: LD_VAR 0 1
68453: PUSH
68454: LD_INT 3
68456: PLUS
68457: PUSH
68458: LD_VAR 0 2
68462: PUSH
68463: LD_INT 3
68465: PLUS
68466: PUSH
68467: LD_INT 5
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: PUSH
68475: LD_VAR 0 1
68479: PUSH
68480: LD_INT 4
68482: PLUS
68483: PUSH
68484: LD_VAR 0 2
68488: PUSH
68489: LD_INT 4
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: PUSH
68497: LD_VAR 0 1
68501: PUSH
68502: LD_VAR 0 2
68506: PUSH
68507: LD_INT 3
68509: MINUS
68510: PUSH
68511: LD_INT 3
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: PUSH
68519: LD_VAR 0 1
68523: PUSH
68524: LD_INT 4
68526: MINUS
68527: PUSH
68528: LD_VAR 0 2
68532: PUSH
68533: LD_INT 4
68535: MINUS
68536: PUSH
68537: LD_INT 2
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: LIST
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: ST_TO_ADDR
// end ; 5 :
68552: GO 68692
68554: LD_INT 5
68556: DOUBLE
68557: EQUAL
68558: IFTRUE 68562
68560: GO 68691
68562: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68563: LD_ADDR_VAR 0 5
68567: PUSH
68568: LD_VAR 0 1
68572: PUSH
68573: LD_INT 4
68575: MINUS
68576: PUSH
68577: LD_VAR 0 2
68581: PUSH
68582: LD_INT 1
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: LIST
68589: PUSH
68590: LD_VAR 0 1
68594: PUSH
68595: LD_VAR 0 2
68599: PUSH
68600: LD_INT 4
68602: MINUS
68603: PUSH
68604: LD_INT 3
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: LIST
68611: PUSH
68612: LD_VAR 0 1
68616: PUSH
68617: LD_INT 4
68619: PLUS
68620: PUSH
68621: LD_VAR 0 2
68625: PUSH
68626: LD_INT 4
68628: PLUS
68629: PUSH
68630: LD_INT 5
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: PUSH
68638: LD_VAR 0 1
68642: PUSH
68643: LD_INT 3
68645: PLUS
68646: PUSH
68647: LD_VAR 0 2
68651: PUSH
68652: LD_INT 4
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: LIST
68659: PUSH
68660: LD_VAR 0 1
68664: PUSH
68665: LD_VAR 0 2
68669: PUSH
68670: LD_INT 3
68672: PLUS
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: LIST
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: ST_TO_ADDR
// end ; end ;
68689: GO 68692
68691: POP
// result := list ;
68692: LD_ADDR_VAR 0 4
68696: PUSH
68697: LD_VAR 0 5
68701: ST_TO_ADDR
// end ;
68702: LD_VAR 0 4
68706: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68707: LD_INT 0
68709: PPUSH
68710: PPUSH
68711: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68712: LD_VAR 0 1
68716: NOT
68717: PUSH
68718: LD_VAR 0 2
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: LD_INT 2
68728: PUSH
68729: LD_INT 3
68731: PUSH
68732: LD_INT 4
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: IN
68741: NOT
68742: OR
68743: IFFALSE 68747
// exit ;
68745: GO 68839
// tmp := [ ] ;
68747: LD_ADDR_VAR 0 5
68751: PUSH
68752: EMPTY
68753: ST_TO_ADDR
// for i in units do
68754: LD_ADDR_VAR 0 4
68758: PUSH
68759: LD_VAR 0 1
68763: PUSH
68764: FOR_IN
68765: IFFALSE 68808
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68767: LD_ADDR_VAR 0 5
68771: PUSH
68772: LD_VAR 0 5
68776: PPUSH
68777: LD_VAR 0 5
68781: PUSH
68782: LD_INT 1
68784: PLUS
68785: PPUSH
68786: LD_VAR 0 4
68790: PPUSH
68791: LD_VAR 0 2
68795: PPUSH
68796: CALL_OW 259
68800: PPUSH
68801: CALL_OW 2
68805: ST_TO_ADDR
68806: GO 68764
68808: POP
68809: POP
// if not tmp then
68810: LD_VAR 0 5
68814: NOT
68815: IFFALSE 68819
// exit ;
68817: GO 68839
// result := SortListByListDesc ( units , tmp ) ;
68819: LD_ADDR_VAR 0 3
68823: PUSH
68824: LD_VAR 0 1
68828: PPUSH
68829: LD_VAR 0 5
68833: PPUSH
68834: CALL_OW 77
68838: ST_TO_ADDR
// end ;
68839: LD_VAR 0 3
68843: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68844: LD_INT 0
68846: PPUSH
68847: PPUSH
68848: PPUSH
// result := false ;
68849: LD_ADDR_VAR 0 3
68853: PUSH
68854: LD_INT 0
68856: ST_TO_ADDR
// x := GetX ( building ) ;
68857: LD_ADDR_VAR 0 4
68861: PUSH
68862: LD_VAR 0 2
68866: PPUSH
68867: CALL_OW 250
68871: ST_TO_ADDR
// y := GetY ( building ) ;
68872: LD_ADDR_VAR 0 5
68876: PUSH
68877: LD_VAR 0 2
68881: PPUSH
68882: CALL_OW 251
68886: ST_TO_ADDR
// if not building or not x or not y then
68887: LD_VAR 0 2
68891: NOT
68892: PUSH
68893: LD_VAR 0 4
68897: NOT
68898: OR
68899: PUSH
68900: LD_VAR 0 5
68904: NOT
68905: OR
68906: IFFALSE 68910
// exit ;
68908: GO 69002
// if GetTaskList ( unit ) then
68910: LD_VAR 0 1
68914: PPUSH
68915: CALL_OW 437
68919: IFFALSE 69002
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68921: LD_STRING e
68923: PUSH
68924: LD_VAR 0 1
68928: PPUSH
68929: CALL_OW 437
68933: PUSH
68934: LD_INT 1
68936: ARRAY
68937: PUSH
68938: LD_INT 1
68940: ARRAY
68941: EQUAL
68942: PUSH
68943: LD_VAR 0 4
68947: PUSH
68948: LD_VAR 0 1
68952: PPUSH
68953: CALL_OW 437
68957: PUSH
68958: LD_INT 1
68960: ARRAY
68961: PUSH
68962: LD_INT 2
68964: ARRAY
68965: EQUAL
68966: AND
68967: PUSH
68968: LD_VAR 0 5
68972: PUSH
68973: LD_VAR 0 1
68977: PPUSH
68978: CALL_OW 437
68982: PUSH
68983: LD_INT 1
68985: ARRAY
68986: PUSH
68987: LD_INT 3
68989: ARRAY
68990: EQUAL
68991: AND
68992: IFFALSE 69002
// result := true end ;
68994: LD_ADDR_VAR 0 3
68998: PUSH
68999: LD_INT 1
69001: ST_TO_ADDR
// end ;
69002: LD_VAR 0 3
69006: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69007: LD_INT 0
69009: PPUSH
// result := false ;
69010: LD_ADDR_VAR 0 4
69014: PUSH
69015: LD_INT 0
69017: ST_TO_ADDR
// if GetTaskList ( unit ) then
69018: LD_VAR 0 1
69022: PPUSH
69023: CALL_OW 437
69027: IFFALSE 69110
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69029: LD_STRING M
69031: PUSH
69032: LD_VAR 0 1
69036: PPUSH
69037: CALL_OW 437
69041: PUSH
69042: LD_INT 1
69044: ARRAY
69045: PUSH
69046: LD_INT 1
69048: ARRAY
69049: EQUAL
69050: PUSH
69051: LD_VAR 0 2
69055: PUSH
69056: LD_VAR 0 1
69060: PPUSH
69061: CALL_OW 437
69065: PUSH
69066: LD_INT 1
69068: ARRAY
69069: PUSH
69070: LD_INT 2
69072: ARRAY
69073: EQUAL
69074: AND
69075: PUSH
69076: LD_VAR 0 3
69080: PUSH
69081: LD_VAR 0 1
69085: PPUSH
69086: CALL_OW 437
69090: PUSH
69091: LD_INT 1
69093: ARRAY
69094: PUSH
69095: LD_INT 3
69097: ARRAY
69098: EQUAL
69099: AND
69100: IFFALSE 69110
// result := true ;
69102: LD_ADDR_VAR 0 4
69106: PUSH
69107: LD_INT 1
69109: ST_TO_ADDR
// end ; end ;
69110: LD_VAR 0 4
69114: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69115: LD_INT 0
69117: PPUSH
69118: PPUSH
69119: PPUSH
69120: PPUSH
// if not unit or not area then
69121: LD_VAR 0 1
69125: NOT
69126: PUSH
69127: LD_VAR 0 2
69131: NOT
69132: OR
69133: IFFALSE 69137
// exit ;
69135: GO 69301
// tmp := AreaToList ( area , i ) ;
69137: LD_ADDR_VAR 0 6
69141: PUSH
69142: LD_VAR 0 2
69146: PPUSH
69147: LD_VAR 0 5
69151: PPUSH
69152: CALL_OW 517
69156: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69157: LD_ADDR_VAR 0 5
69161: PUSH
69162: DOUBLE
69163: LD_INT 1
69165: DEC
69166: ST_TO_ADDR
69167: LD_VAR 0 6
69171: PUSH
69172: LD_INT 1
69174: ARRAY
69175: PUSH
69176: FOR_TO
69177: IFFALSE 69299
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69179: LD_ADDR_VAR 0 7
69183: PUSH
69184: LD_VAR 0 6
69188: PUSH
69189: LD_INT 1
69191: ARRAY
69192: PUSH
69193: LD_VAR 0 5
69197: ARRAY
69198: PUSH
69199: LD_VAR 0 6
69203: PUSH
69204: LD_INT 2
69206: ARRAY
69207: PUSH
69208: LD_VAR 0 5
69212: ARRAY
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69218: LD_VAR 0 7
69222: PUSH
69223: LD_INT 1
69225: ARRAY
69226: PPUSH
69227: LD_VAR 0 7
69231: PUSH
69232: LD_INT 2
69234: ARRAY
69235: PPUSH
69236: CALL_OW 428
69240: PUSH
69241: LD_INT 0
69243: EQUAL
69244: IFFALSE 69297
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69246: LD_VAR 0 1
69250: PPUSH
69251: LD_VAR 0 7
69255: PUSH
69256: LD_INT 1
69258: ARRAY
69259: PPUSH
69260: LD_VAR 0 7
69264: PUSH
69265: LD_INT 2
69267: ARRAY
69268: PPUSH
69269: LD_VAR 0 3
69273: PPUSH
69274: CALL_OW 48
// result := IsPlaced ( unit ) ;
69278: LD_ADDR_VAR 0 4
69282: PUSH
69283: LD_VAR 0 1
69287: PPUSH
69288: CALL_OW 305
69292: ST_TO_ADDR
// exit ;
69293: POP
69294: POP
69295: GO 69301
// end ; end ;
69297: GO 69176
69299: POP
69300: POP
// end ;
69301: LD_VAR 0 4
69305: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69306: LD_INT 0
69308: PPUSH
69309: PPUSH
69310: PPUSH
// if not side or side > 8 then
69311: LD_VAR 0 1
69315: NOT
69316: PUSH
69317: LD_VAR 0 1
69321: PUSH
69322: LD_INT 8
69324: GREATER
69325: OR
69326: IFFALSE 69330
// exit ;
69328: GO 69517
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69330: LD_ADDR_VAR 0 4
69334: PUSH
69335: LD_INT 22
69337: PUSH
69338: LD_VAR 0 1
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 21
69349: PUSH
69350: LD_INT 3
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PPUSH
69361: CALL_OW 69
69365: ST_TO_ADDR
// if not tmp then
69366: LD_VAR 0 4
69370: NOT
69371: IFFALSE 69375
// exit ;
69373: GO 69517
// enable_addtolog := true ;
69375: LD_ADDR_OWVAR 81
69379: PUSH
69380: LD_INT 1
69382: ST_TO_ADDR
// AddToLog ( [ ) ;
69383: LD_STRING [
69385: PPUSH
69386: CALL_OW 561
// for i in tmp do
69390: LD_ADDR_VAR 0 3
69394: PUSH
69395: LD_VAR 0 4
69399: PUSH
69400: FOR_IN
69401: IFFALSE 69508
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69403: LD_STRING [
69405: PUSH
69406: LD_VAR 0 3
69410: PPUSH
69411: CALL_OW 266
69415: STR
69416: PUSH
69417: LD_STRING , 
69419: STR
69420: PUSH
69421: LD_VAR 0 3
69425: PPUSH
69426: CALL_OW 250
69430: STR
69431: PUSH
69432: LD_STRING , 
69434: STR
69435: PUSH
69436: LD_VAR 0 3
69440: PPUSH
69441: CALL_OW 251
69445: STR
69446: PUSH
69447: LD_STRING , 
69449: STR
69450: PUSH
69451: LD_VAR 0 3
69455: PPUSH
69456: CALL_OW 254
69460: STR
69461: PUSH
69462: LD_STRING , 
69464: STR
69465: PUSH
69466: LD_VAR 0 3
69470: PPUSH
69471: LD_INT 1
69473: PPUSH
69474: CALL_OW 268
69478: STR
69479: PUSH
69480: LD_STRING , 
69482: STR
69483: PUSH
69484: LD_VAR 0 3
69488: PPUSH
69489: LD_INT 2
69491: PPUSH
69492: CALL_OW 268
69496: STR
69497: PUSH
69498: LD_STRING ],
69500: STR
69501: PPUSH
69502: CALL_OW 561
// end ;
69506: GO 69400
69508: POP
69509: POP
// AddToLog ( ]; ) ;
69510: LD_STRING ];
69512: PPUSH
69513: CALL_OW 561
// end ;
69517: LD_VAR 0 2
69521: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69522: LD_INT 0
69524: PPUSH
69525: PPUSH
69526: PPUSH
69527: PPUSH
69528: PPUSH
// if not area or not rate or not max then
69529: LD_VAR 0 1
69533: NOT
69534: PUSH
69535: LD_VAR 0 2
69539: NOT
69540: OR
69541: PUSH
69542: LD_VAR 0 4
69546: NOT
69547: OR
69548: IFFALSE 69552
// exit ;
69550: GO 69744
// while 1 do
69552: LD_INT 1
69554: IFFALSE 69744
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69556: LD_ADDR_VAR 0 9
69560: PUSH
69561: LD_VAR 0 1
69565: PPUSH
69566: LD_INT 1
69568: PPUSH
69569: CALL_OW 287
69573: PUSH
69574: LD_INT 10
69576: MUL
69577: ST_TO_ADDR
// r := rate / 10 ;
69578: LD_ADDR_VAR 0 7
69582: PUSH
69583: LD_VAR 0 2
69587: PUSH
69588: LD_INT 10
69590: DIVREAL
69591: ST_TO_ADDR
// time := 1 1$00 ;
69592: LD_ADDR_VAR 0 8
69596: PUSH
69597: LD_INT 2100
69599: ST_TO_ADDR
// if amount < min then
69600: LD_VAR 0 9
69604: PUSH
69605: LD_VAR 0 3
69609: LESS
69610: IFFALSE 69628
// r := r * 2 else
69612: LD_ADDR_VAR 0 7
69616: PUSH
69617: LD_VAR 0 7
69621: PUSH
69622: LD_INT 2
69624: MUL
69625: ST_TO_ADDR
69626: GO 69654
// if amount > max then
69628: LD_VAR 0 9
69632: PUSH
69633: LD_VAR 0 4
69637: GREATER
69638: IFFALSE 69654
// r := r / 2 ;
69640: LD_ADDR_VAR 0 7
69644: PUSH
69645: LD_VAR 0 7
69649: PUSH
69650: LD_INT 2
69652: DIVREAL
69653: ST_TO_ADDR
// time := time / r ;
69654: LD_ADDR_VAR 0 8
69658: PUSH
69659: LD_VAR 0 8
69663: PUSH
69664: LD_VAR 0 7
69668: DIVREAL
69669: ST_TO_ADDR
// if time < 0 then
69670: LD_VAR 0 8
69674: PUSH
69675: LD_INT 0
69677: LESS
69678: IFFALSE 69695
// time := time * - 1 ;
69680: LD_ADDR_VAR 0 8
69684: PUSH
69685: LD_VAR 0 8
69689: PUSH
69690: LD_INT 1
69692: NEG
69693: MUL
69694: ST_TO_ADDR
// wait ( time ) ;
69695: LD_VAR 0 8
69699: PPUSH
69700: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69704: LD_INT 35
69706: PPUSH
69707: LD_INT 875
69709: PPUSH
69710: CALL_OW 12
69714: PPUSH
69715: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69719: LD_INT 1
69721: PPUSH
69722: LD_INT 5
69724: PPUSH
69725: CALL_OW 12
69729: PPUSH
69730: LD_VAR 0 1
69734: PPUSH
69735: LD_INT 1
69737: PPUSH
69738: CALL_OW 55
// end ;
69742: GO 69552
// end ;
69744: LD_VAR 0 5
69748: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69749: LD_INT 0
69751: PPUSH
69752: PPUSH
69753: PPUSH
69754: PPUSH
69755: PPUSH
69756: PPUSH
69757: PPUSH
69758: PPUSH
// if not turrets or not factories then
69759: LD_VAR 0 1
69763: NOT
69764: PUSH
69765: LD_VAR 0 2
69769: NOT
69770: OR
69771: IFFALSE 69775
// exit ;
69773: GO 70082
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69775: LD_ADDR_VAR 0 10
69779: PUSH
69780: LD_INT 5
69782: PUSH
69783: LD_INT 6
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 2
69792: PUSH
69793: LD_INT 4
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 3
69802: PUSH
69803: LD_INT 5
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 24
69817: PUSH
69818: LD_INT 25
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 23
69827: PUSH
69828: LD_INT 27
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 42
69841: PUSH
69842: LD_INT 43
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 44
69851: PUSH
69852: LD_INT 46
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 45
69861: PUSH
69862: LD_INT 47
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: LIST
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: LIST
69878: ST_TO_ADDR
// result := [ ] ;
69879: LD_ADDR_VAR 0 3
69883: PUSH
69884: EMPTY
69885: ST_TO_ADDR
// for i in turrets do
69886: LD_ADDR_VAR 0 4
69890: PUSH
69891: LD_VAR 0 1
69895: PUSH
69896: FOR_IN
69897: IFFALSE 70080
// begin nat := GetNation ( i ) ;
69899: LD_ADDR_VAR 0 7
69903: PUSH
69904: LD_VAR 0 4
69908: PPUSH
69909: CALL_OW 248
69913: ST_TO_ADDR
// weapon := 0 ;
69914: LD_ADDR_VAR 0 8
69918: PUSH
69919: LD_INT 0
69921: ST_TO_ADDR
// if not nat then
69922: LD_VAR 0 7
69926: NOT
69927: IFFALSE 69931
// continue ;
69929: GO 69896
// for j in list [ nat ] do
69931: LD_ADDR_VAR 0 5
69935: PUSH
69936: LD_VAR 0 10
69940: PUSH
69941: LD_VAR 0 7
69945: ARRAY
69946: PUSH
69947: FOR_IN
69948: IFFALSE 69989
// if GetBWeapon ( i ) = j [ 1 ] then
69950: LD_VAR 0 4
69954: PPUSH
69955: CALL_OW 269
69959: PUSH
69960: LD_VAR 0 5
69964: PUSH
69965: LD_INT 1
69967: ARRAY
69968: EQUAL
69969: IFFALSE 69987
// begin weapon := j [ 2 ] ;
69971: LD_ADDR_VAR 0 8
69975: PUSH
69976: LD_VAR 0 5
69980: PUSH
69981: LD_INT 2
69983: ARRAY
69984: ST_TO_ADDR
// break ;
69985: GO 69989
// end ;
69987: GO 69947
69989: POP
69990: POP
// if not weapon then
69991: LD_VAR 0 8
69995: NOT
69996: IFFALSE 70000
// continue ;
69998: GO 69896
// for k in factories do
70000: LD_ADDR_VAR 0 6
70004: PUSH
70005: LD_VAR 0 2
70009: PUSH
70010: FOR_IN
70011: IFFALSE 70076
// begin weapons := AvailableWeaponList ( k ) ;
70013: LD_ADDR_VAR 0 9
70017: PUSH
70018: LD_VAR 0 6
70022: PPUSH
70023: CALL_OW 478
70027: ST_TO_ADDR
// if not weapons then
70028: LD_VAR 0 9
70032: NOT
70033: IFFALSE 70037
// continue ;
70035: GO 70010
// if weapon in weapons then
70037: LD_VAR 0 8
70041: PUSH
70042: LD_VAR 0 9
70046: IN
70047: IFFALSE 70074
// begin result := [ i , weapon ] ;
70049: LD_ADDR_VAR 0 3
70053: PUSH
70054: LD_VAR 0 4
70058: PUSH
70059: LD_VAR 0 8
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: ST_TO_ADDR
// exit ;
70068: POP
70069: POP
70070: POP
70071: POP
70072: GO 70082
// end ; end ;
70074: GO 70010
70076: POP
70077: POP
// end ;
70078: GO 69896
70080: POP
70081: POP
// end ;
70082: LD_VAR 0 3
70086: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70087: LD_INT 0
70089: PPUSH
// if not side or side > 8 then
70090: LD_VAR 0 3
70094: NOT
70095: PUSH
70096: LD_VAR 0 3
70100: PUSH
70101: LD_INT 8
70103: GREATER
70104: OR
70105: IFFALSE 70109
// exit ;
70107: GO 70168
// if not range then
70109: LD_VAR 0 4
70113: NOT
70114: IFFALSE 70125
// range := - 12 ;
70116: LD_ADDR_VAR 0 4
70120: PUSH
70121: LD_INT 12
70123: NEG
70124: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70125: LD_VAR 0 1
70129: PPUSH
70130: LD_VAR 0 2
70134: PPUSH
70135: LD_VAR 0 3
70139: PPUSH
70140: LD_VAR 0 4
70144: PPUSH
70145: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70149: LD_VAR 0 1
70153: PPUSH
70154: LD_VAR 0 2
70158: PPUSH
70159: LD_VAR 0 3
70163: PPUSH
70164: CALL_OW 331
// end ;
70168: LD_VAR 0 5
70172: RET
// export function Video ( mode ) ; begin
70173: LD_INT 0
70175: PPUSH
// ingame_video = mode ;
70176: LD_ADDR_OWVAR 52
70180: PUSH
70181: LD_VAR 0 1
70185: ST_TO_ADDR
// interface_hidden = mode ;
70186: LD_ADDR_OWVAR 54
70190: PUSH
70191: LD_VAR 0 1
70195: ST_TO_ADDR
// end ;
70196: LD_VAR 0 2
70200: RET
// export function Join ( array , element ) ; begin
70201: LD_INT 0
70203: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70204: LD_ADDR_VAR 0 3
70208: PUSH
70209: LD_VAR 0 1
70213: PPUSH
70214: LD_VAR 0 1
70218: PUSH
70219: LD_INT 1
70221: PLUS
70222: PPUSH
70223: LD_VAR 0 2
70227: PPUSH
70228: CALL_OW 1
70232: ST_TO_ADDR
// end ;
70233: LD_VAR 0 3
70237: RET
// export function JoinUnion ( array , element ) ; begin
70238: LD_INT 0
70240: PPUSH
// result := array union element ;
70241: LD_ADDR_VAR 0 3
70245: PUSH
70246: LD_VAR 0 1
70250: PUSH
70251: LD_VAR 0 2
70255: UNION
70256: ST_TO_ADDR
// end ;
70257: LD_VAR 0 3
70261: RET
// export function GetBehemoths ( side ) ; begin
70262: LD_INT 0
70264: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70265: LD_ADDR_VAR 0 2
70269: PUSH
70270: LD_INT 22
70272: PUSH
70273: LD_VAR 0 1
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 31
70284: PUSH
70285: LD_INT 25
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PPUSH
70296: CALL_OW 69
70300: ST_TO_ADDR
// end ;
70301: LD_VAR 0 2
70305: RET
// export function Shuffle ( array ) ; var i , index ; begin
70306: LD_INT 0
70308: PPUSH
70309: PPUSH
70310: PPUSH
// result := [ ] ;
70311: LD_ADDR_VAR 0 2
70315: PUSH
70316: EMPTY
70317: ST_TO_ADDR
// if not array then
70318: LD_VAR 0 1
70322: NOT
70323: IFFALSE 70327
// exit ;
70325: GO 70426
// Randomize ;
70327: CALL_OW 10
// for i = array downto 1 do
70331: LD_ADDR_VAR 0 3
70335: PUSH
70336: DOUBLE
70337: LD_VAR 0 1
70341: INC
70342: ST_TO_ADDR
70343: LD_INT 1
70345: PUSH
70346: FOR_DOWNTO
70347: IFFALSE 70424
// begin index := rand ( 1 , array ) ;
70349: LD_ADDR_VAR 0 4
70353: PUSH
70354: LD_INT 1
70356: PPUSH
70357: LD_VAR 0 1
70361: PPUSH
70362: CALL_OW 12
70366: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70367: LD_ADDR_VAR 0 2
70371: PUSH
70372: LD_VAR 0 2
70376: PPUSH
70377: LD_VAR 0 2
70381: PUSH
70382: LD_INT 1
70384: PLUS
70385: PPUSH
70386: LD_VAR 0 1
70390: PUSH
70391: LD_VAR 0 4
70395: ARRAY
70396: PPUSH
70397: CALL_OW 2
70401: ST_TO_ADDR
// array := Delete ( array , index ) ;
70402: LD_ADDR_VAR 0 1
70406: PUSH
70407: LD_VAR 0 1
70411: PPUSH
70412: LD_VAR 0 4
70416: PPUSH
70417: CALL_OW 3
70421: ST_TO_ADDR
// end ;
70422: GO 70346
70424: POP
70425: POP
// end ;
70426: LD_VAR 0 2
70430: RET
// export function GetBaseMaterials ( base ) ; begin
70431: LD_INT 0
70433: PPUSH
// result := [ 0 , 0 , 0 ] ;
70434: LD_ADDR_VAR 0 2
70438: PUSH
70439: LD_INT 0
70441: PUSH
70442: LD_INT 0
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: LIST
70452: ST_TO_ADDR
// if not base then
70453: LD_VAR 0 1
70457: NOT
70458: IFFALSE 70462
// exit ;
70460: GO 70511
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70462: LD_ADDR_VAR 0 2
70466: PUSH
70467: LD_VAR 0 1
70471: PPUSH
70472: LD_INT 1
70474: PPUSH
70475: CALL_OW 275
70479: PUSH
70480: LD_VAR 0 1
70484: PPUSH
70485: LD_INT 2
70487: PPUSH
70488: CALL_OW 275
70492: PUSH
70493: LD_VAR 0 1
70497: PPUSH
70498: LD_INT 3
70500: PPUSH
70501: CALL_OW 275
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: LIST
70510: ST_TO_ADDR
// end ;
70511: LD_VAR 0 2
70515: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70516: LD_INT 0
70518: PPUSH
70519: PPUSH
// result := array ;
70520: LD_ADDR_VAR 0 3
70524: PUSH
70525: LD_VAR 0 1
70529: ST_TO_ADDR
// if size > 0 then
70530: LD_VAR 0 2
70534: PUSH
70535: LD_INT 0
70537: GREATER
70538: IFFALSE 70584
// for i := array downto size do
70540: LD_ADDR_VAR 0 4
70544: PUSH
70545: DOUBLE
70546: LD_VAR 0 1
70550: INC
70551: ST_TO_ADDR
70552: LD_VAR 0 2
70556: PUSH
70557: FOR_DOWNTO
70558: IFFALSE 70582
// result := Delete ( result , result ) ;
70560: LD_ADDR_VAR 0 3
70564: PUSH
70565: LD_VAR 0 3
70569: PPUSH
70570: LD_VAR 0 3
70574: PPUSH
70575: CALL_OW 3
70579: ST_TO_ADDR
70580: GO 70557
70582: POP
70583: POP
// end ;
70584: LD_VAR 0 3
70588: RET
// export function ComExit ( unit ) ; var tmp ; begin
70589: LD_INT 0
70591: PPUSH
70592: PPUSH
// if not IsInUnit ( unit ) then
70593: LD_VAR 0 1
70597: PPUSH
70598: CALL_OW 310
70602: NOT
70603: IFFALSE 70607
// exit ;
70605: GO 70667
// tmp := IsInUnit ( unit ) ;
70607: LD_ADDR_VAR 0 3
70611: PUSH
70612: LD_VAR 0 1
70616: PPUSH
70617: CALL_OW 310
70621: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70622: LD_VAR 0 3
70626: PPUSH
70627: CALL_OW 247
70631: PUSH
70632: LD_INT 2
70634: EQUAL
70635: IFFALSE 70648
// ComExitVehicle ( unit ) else
70637: LD_VAR 0 1
70641: PPUSH
70642: CALL_OW 121
70646: GO 70657
// ComExitBuilding ( unit ) ;
70648: LD_VAR 0 1
70652: PPUSH
70653: CALL_OW 122
// result := tmp ;
70657: LD_ADDR_VAR 0 2
70661: PUSH
70662: LD_VAR 0 3
70666: ST_TO_ADDR
// end ;
70667: LD_VAR 0 2
70671: RET
// export function ComExitAll ( units ) ; var i ; begin
70672: LD_INT 0
70674: PPUSH
70675: PPUSH
// if not units then
70676: LD_VAR 0 1
70680: NOT
70681: IFFALSE 70685
// exit ;
70683: GO 70711
// for i in units do
70685: LD_ADDR_VAR 0 3
70689: PUSH
70690: LD_VAR 0 1
70694: PUSH
70695: FOR_IN
70696: IFFALSE 70709
// ComExit ( i ) ;
70698: LD_VAR 0 3
70702: PPUSH
70703: CALL 70589 0 1
70707: GO 70695
70709: POP
70710: POP
// end ;
70711: LD_VAR 0 2
70715: RET
// export function ResetHc ; begin
70716: LD_INT 0
70718: PPUSH
// InitHc ;
70719: CALL_OW 19
// hc_importance := 0 ;
70723: LD_ADDR_OWVAR 32
70727: PUSH
70728: LD_INT 0
70730: ST_TO_ADDR
// end ;
70731: LD_VAR 0 1
70735: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70736: LD_INT 0
70738: PPUSH
70739: PPUSH
70740: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70741: LD_ADDR_VAR 0 6
70745: PUSH
70746: LD_VAR 0 1
70750: PUSH
70751: LD_VAR 0 3
70755: PLUS
70756: PUSH
70757: LD_INT 2
70759: DIV
70760: ST_TO_ADDR
// if _x < 0 then
70761: LD_VAR 0 6
70765: PUSH
70766: LD_INT 0
70768: LESS
70769: IFFALSE 70786
// _x := _x * - 1 ;
70771: LD_ADDR_VAR 0 6
70775: PUSH
70776: LD_VAR 0 6
70780: PUSH
70781: LD_INT 1
70783: NEG
70784: MUL
70785: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70786: LD_ADDR_VAR 0 7
70790: PUSH
70791: LD_VAR 0 2
70795: PUSH
70796: LD_VAR 0 4
70800: PLUS
70801: PUSH
70802: LD_INT 2
70804: DIV
70805: ST_TO_ADDR
// if _y < 0 then
70806: LD_VAR 0 7
70810: PUSH
70811: LD_INT 0
70813: LESS
70814: IFFALSE 70831
// _y := _y * - 1 ;
70816: LD_ADDR_VAR 0 7
70820: PUSH
70821: LD_VAR 0 7
70825: PUSH
70826: LD_INT 1
70828: NEG
70829: MUL
70830: ST_TO_ADDR
// result := [ _x , _y ] ;
70831: LD_ADDR_VAR 0 5
70835: PUSH
70836: LD_VAR 0 6
70840: PUSH
70841: LD_VAR 0 7
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: ST_TO_ADDR
// end ;
70850: LD_VAR 0 5
70854: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70855: LD_INT 0
70857: PPUSH
70858: PPUSH
70859: PPUSH
70860: PPUSH
// task := GetTaskList ( unit ) ;
70861: LD_ADDR_VAR 0 7
70865: PUSH
70866: LD_VAR 0 1
70870: PPUSH
70871: CALL_OW 437
70875: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70876: LD_VAR 0 7
70880: NOT
70881: PUSH
70882: LD_VAR 0 1
70886: PPUSH
70887: LD_VAR 0 2
70891: PPUSH
70892: CALL_OW 308
70896: NOT
70897: AND
70898: IFFALSE 70902
// exit ;
70900: GO 71020
// if IsInArea ( unit , area ) then
70902: LD_VAR 0 1
70906: PPUSH
70907: LD_VAR 0 2
70911: PPUSH
70912: CALL_OW 308
70916: IFFALSE 70934
// begin ComMoveToArea ( unit , goAway ) ;
70918: LD_VAR 0 1
70922: PPUSH
70923: LD_VAR 0 3
70927: PPUSH
70928: CALL_OW 113
// exit ;
70932: GO 71020
// end ; if task [ 1 ] [ 1 ] <> M then
70934: LD_VAR 0 7
70938: PUSH
70939: LD_INT 1
70941: ARRAY
70942: PUSH
70943: LD_INT 1
70945: ARRAY
70946: PUSH
70947: LD_STRING M
70949: NONEQUAL
70950: IFFALSE 70954
// exit ;
70952: GO 71020
// x := task [ 1 ] [ 2 ] ;
70954: LD_ADDR_VAR 0 5
70958: PUSH
70959: LD_VAR 0 7
70963: PUSH
70964: LD_INT 1
70966: ARRAY
70967: PUSH
70968: LD_INT 2
70970: ARRAY
70971: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70972: LD_ADDR_VAR 0 6
70976: PUSH
70977: LD_VAR 0 7
70981: PUSH
70982: LD_INT 1
70984: ARRAY
70985: PUSH
70986: LD_INT 3
70988: ARRAY
70989: ST_TO_ADDR
// if InArea ( x , y , area ) then
70990: LD_VAR 0 5
70994: PPUSH
70995: LD_VAR 0 6
70999: PPUSH
71000: LD_VAR 0 2
71004: PPUSH
71005: CALL_OW 309
71009: IFFALSE 71020
// ComStop ( unit ) ;
71011: LD_VAR 0 1
71015: PPUSH
71016: CALL_OW 141
// end ;
71020: LD_VAR 0 4
71024: RET
// export function Abs ( value ) ; begin
71025: LD_INT 0
71027: PPUSH
// result := value ;
71028: LD_ADDR_VAR 0 2
71032: PUSH
71033: LD_VAR 0 1
71037: ST_TO_ADDR
// if value < 0 then
71038: LD_VAR 0 1
71042: PUSH
71043: LD_INT 0
71045: LESS
71046: IFFALSE 71063
// result := value * - 1 ;
71048: LD_ADDR_VAR 0 2
71052: PUSH
71053: LD_VAR 0 1
71057: PUSH
71058: LD_INT 1
71060: NEG
71061: MUL
71062: ST_TO_ADDR
// end ;
71063: LD_VAR 0 2
71067: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71068: LD_INT 0
71070: PPUSH
71071: PPUSH
71072: PPUSH
71073: PPUSH
71074: PPUSH
71075: PPUSH
71076: PPUSH
71077: PPUSH
// if not unit or not building then
71078: LD_VAR 0 1
71082: NOT
71083: PUSH
71084: LD_VAR 0 2
71088: NOT
71089: OR
71090: IFFALSE 71094
// exit ;
71092: GO 71320
// x := GetX ( building ) ;
71094: LD_ADDR_VAR 0 4
71098: PUSH
71099: LD_VAR 0 2
71103: PPUSH
71104: CALL_OW 250
71108: ST_TO_ADDR
// y := GetY ( building ) ;
71109: LD_ADDR_VAR 0 6
71113: PUSH
71114: LD_VAR 0 2
71118: PPUSH
71119: CALL_OW 251
71123: ST_TO_ADDR
// d := GetDir ( building ) ;
71124: LD_ADDR_VAR 0 8
71128: PUSH
71129: LD_VAR 0 2
71133: PPUSH
71134: CALL_OW 254
71138: ST_TO_ADDR
// r := 4 ;
71139: LD_ADDR_VAR 0 9
71143: PUSH
71144: LD_INT 4
71146: ST_TO_ADDR
// for i := 1 to 5 do
71147: LD_ADDR_VAR 0 10
71151: PUSH
71152: DOUBLE
71153: LD_INT 1
71155: DEC
71156: ST_TO_ADDR
71157: LD_INT 5
71159: PUSH
71160: FOR_TO
71161: IFFALSE 71318
// begin _x := ShiftX ( x , d , r + i ) ;
71163: LD_ADDR_VAR 0 5
71167: PUSH
71168: LD_VAR 0 4
71172: PPUSH
71173: LD_VAR 0 8
71177: PPUSH
71178: LD_VAR 0 9
71182: PUSH
71183: LD_VAR 0 10
71187: PLUS
71188: PPUSH
71189: CALL_OW 272
71193: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71194: LD_ADDR_VAR 0 7
71198: PUSH
71199: LD_VAR 0 6
71203: PPUSH
71204: LD_VAR 0 8
71208: PPUSH
71209: LD_VAR 0 9
71213: PUSH
71214: LD_VAR 0 10
71218: PLUS
71219: PPUSH
71220: CALL_OW 273
71224: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71225: LD_VAR 0 5
71229: PPUSH
71230: LD_VAR 0 7
71234: PPUSH
71235: CALL_OW 488
71239: PUSH
71240: LD_VAR 0 5
71244: PPUSH
71245: LD_VAR 0 7
71249: PPUSH
71250: CALL_OW 428
71254: PPUSH
71255: CALL_OW 247
71259: PUSH
71260: LD_INT 3
71262: PUSH
71263: LD_INT 2
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: IN
71270: NOT
71271: AND
71272: IFFALSE 71316
// begin ComMoveXY ( unit , _x , _y ) ;
71274: LD_VAR 0 1
71278: PPUSH
71279: LD_VAR 0 5
71283: PPUSH
71284: LD_VAR 0 7
71288: PPUSH
71289: CALL_OW 111
// result := [ _x , _y ] ;
71293: LD_ADDR_VAR 0 3
71297: PUSH
71298: LD_VAR 0 5
71302: PUSH
71303: LD_VAR 0 7
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: ST_TO_ADDR
// exit ;
71312: POP
71313: POP
71314: GO 71320
// end ; end ;
71316: GO 71160
71318: POP
71319: POP
// end ;
71320: LD_VAR 0 3
71324: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71325: LD_INT 0
71327: PPUSH
71328: PPUSH
71329: PPUSH
// result := 0 ;
71330: LD_ADDR_VAR 0 3
71334: PUSH
71335: LD_INT 0
71337: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71338: LD_VAR 0 1
71342: PUSH
71343: LD_INT 0
71345: LESS
71346: PUSH
71347: LD_VAR 0 1
71351: PUSH
71352: LD_INT 8
71354: GREATER
71355: OR
71356: PUSH
71357: LD_VAR 0 2
71361: PUSH
71362: LD_INT 0
71364: LESS
71365: OR
71366: PUSH
71367: LD_VAR 0 2
71371: PUSH
71372: LD_INT 8
71374: GREATER
71375: OR
71376: IFFALSE 71380
// exit ;
71378: GO 71455
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71380: LD_ADDR_VAR 0 4
71384: PUSH
71385: LD_INT 22
71387: PUSH
71388: LD_VAR 0 2
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PPUSH
71397: CALL_OW 69
71401: PUSH
71402: FOR_IN
71403: IFFALSE 71453
// begin un := UnitShoot ( i ) ;
71405: LD_ADDR_VAR 0 5
71409: PUSH
71410: LD_VAR 0 4
71414: PPUSH
71415: CALL_OW 504
71419: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71420: LD_VAR 0 5
71424: PPUSH
71425: CALL_OW 255
71429: PUSH
71430: LD_VAR 0 1
71434: EQUAL
71435: IFFALSE 71451
// begin result := un ;
71437: LD_ADDR_VAR 0 3
71441: PUSH
71442: LD_VAR 0 5
71446: ST_TO_ADDR
// exit ;
71447: POP
71448: POP
71449: GO 71455
// end ; end ;
71451: GO 71402
71453: POP
71454: POP
// end ;
71455: LD_VAR 0 3
71459: RET
// export function GetCargoBay ( units ) ; begin
71460: LD_INT 0
71462: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71463: LD_ADDR_VAR 0 2
71467: PUSH
71468: LD_VAR 0 1
71472: PPUSH
71473: LD_INT 2
71475: PUSH
71476: LD_INT 34
71478: PUSH
71479: LD_INT 12
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 34
71488: PUSH
71489: LD_INT 51
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 34
71498: PUSH
71499: LD_INT 32
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 34
71508: PUSH
71509: LD_EXP 45
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: PPUSH
71525: CALL_OW 72
71529: ST_TO_ADDR
// end ;
71530: LD_VAR 0 2
71534: RET
// export function Negate ( value ) ; begin
71535: LD_INT 0
71537: PPUSH
// result := not value ;
71538: LD_ADDR_VAR 0 2
71542: PUSH
71543: LD_VAR 0 1
71547: NOT
71548: ST_TO_ADDR
// end ;
71549: LD_VAR 0 2
71553: RET
// export function Inc ( value ) ; begin
71554: LD_INT 0
71556: PPUSH
// result := value + 1 ;
71557: LD_ADDR_VAR 0 2
71561: PUSH
71562: LD_VAR 0 1
71566: PUSH
71567: LD_INT 1
71569: PLUS
71570: ST_TO_ADDR
// end ;
71571: LD_VAR 0 2
71575: RET
// export function Dec ( value ) ; begin
71576: LD_INT 0
71578: PPUSH
// result := value - 1 ;
71579: LD_ADDR_VAR 0 2
71583: PUSH
71584: LD_VAR 0 1
71588: PUSH
71589: LD_INT 1
71591: MINUS
71592: ST_TO_ADDR
// end ;
71593: LD_VAR 0 2
71597: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71598: LD_INT 0
71600: PPUSH
71601: PPUSH
71602: PPUSH
71603: PPUSH
71604: PPUSH
71605: PPUSH
71606: PPUSH
71607: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71608: LD_VAR 0 1
71612: PPUSH
71613: LD_VAR 0 2
71617: PPUSH
71618: CALL_OW 488
71622: NOT
71623: PUSH
71624: LD_VAR 0 3
71628: PPUSH
71629: LD_VAR 0 4
71633: PPUSH
71634: CALL_OW 488
71638: NOT
71639: OR
71640: IFFALSE 71653
// begin result := - 1 ;
71642: LD_ADDR_VAR 0 5
71646: PUSH
71647: LD_INT 1
71649: NEG
71650: ST_TO_ADDR
// exit ;
71651: GO 71888
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71653: LD_ADDR_VAR 0 12
71657: PUSH
71658: LD_VAR 0 1
71662: PPUSH
71663: LD_VAR 0 2
71667: PPUSH
71668: LD_VAR 0 3
71672: PPUSH
71673: LD_VAR 0 4
71677: PPUSH
71678: CALL 70736 0 4
71682: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71683: LD_ADDR_VAR 0 11
71687: PUSH
71688: LD_VAR 0 1
71692: PPUSH
71693: LD_VAR 0 2
71697: PPUSH
71698: LD_VAR 0 12
71702: PUSH
71703: LD_INT 1
71705: ARRAY
71706: PPUSH
71707: LD_VAR 0 12
71711: PUSH
71712: LD_INT 2
71714: ARRAY
71715: PPUSH
71716: CALL_OW 298
71720: ST_TO_ADDR
// distance := 9999 ;
71721: LD_ADDR_VAR 0 10
71725: PUSH
71726: LD_INT 9999
71728: ST_TO_ADDR
// for i := 0 to 5 do
71729: LD_ADDR_VAR 0 6
71733: PUSH
71734: DOUBLE
71735: LD_INT 0
71737: DEC
71738: ST_TO_ADDR
71739: LD_INT 5
71741: PUSH
71742: FOR_TO
71743: IFFALSE 71886
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71745: LD_ADDR_VAR 0 7
71749: PUSH
71750: LD_VAR 0 1
71754: PPUSH
71755: LD_VAR 0 6
71759: PPUSH
71760: LD_VAR 0 11
71764: PPUSH
71765: CALL_OW 272
71769: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71770: LD_ADDR_VAR 0 8
71774: PUSH
71775: LD_VAR 0 2
71779: PPUSH
71780: LD_VAR 0 6
71784: PPUSH
71785: LD_VAR 0 11
71789: PPUSH
71790: CALL_OW 273
71794: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71795: LD_VAR 0 7
71799: PPUSH
71800: LD_VAR 0 8
71804: PPUSH
71805: CALL_OW 488
71809: NOT
71810: IFFALSE 71814
// continue ;
71812: GO 71742
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71814: LD_ADDR_VAR 0 9
71818: PUSH
71819: LD_VAR 0 12
71823: PUSH
71824: LD_INT 1
71826: ARRAY
71827: PPUSH
71828: LD_VAR 0 12
71832: PUSH
71833: LD_INT 2
71835: ARRAY
71836: PPUSH
71837: LD_VAR 0 7
71841: PPUSH
71842: LD_VAR 0 8
71846: PPUSH
71847: CALL_OW 298
71851: ST_TO_ADDR
// if tmp < distance then
71852: LD_VAR 0 9
71856: PUSH
71857: LD_VAR 0 10
71861: LESS
71862: IFFALSE 71884
// begin result := i ;
71864: LD_ADDR_VAR 0 5
71868: PUSH
71869: LD_VAR 0 6
71873: ST_TO_ADDR
// distance := tmp ;
71874: LD_ADDR_VAR 0 10
71878: PUSH
71879: LD_VAR 0 9
71883: ST_TO_ADDR
// end ; end ;
71884: GO 71742
71886: POP
71887: POP
// end ;
71888: LD_VAR 0 5
71892: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71893: LD_INT 0
71895: PPUSH
71896: PPUSH
// if not driver or not IsInUnit ( driver ) then
71897: LD_VAR 0 1
71901: NOT
71902: PUSH
71903: LD_VAR 0 1
71907: PPUSH
71908: CALL_OW 310
71912: NOT
71913: OR
71914: IFFALSE 71918
// exit ;
71916: GO 72008
// vehicle := IsInUnit ( driver ) ;
71918: LD_ADDR_VAR 0 3
71922: PUSH
71923: LD_VAR 0 1
71927: PPUSH
71928: CALL_OW 310
71932: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71933: LD_VAR 0 1
71937: PPUSH
71938: LD_STRING \
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: LD_INT 0
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: LD_INT 0
71952: PUSH
71953: LD_INT 0
71955: PUSH
71956: LD_INT 0
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: PUSH
71968: LD_STRING E
71970: PUSH
71971: LD_INT 0
71973: PUSH
71974: LD_INT 0
71976: PUSH
71977: LD_VAR 0 3
71981: PUSH
71982: LD_INT 0
71984: PUSH
71985: LD_INT 0
71987: PUSH
71988: LD_INT 0
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PPUSH
72004: CALL_OW 446
// end ;
72008: LD_VAR 0 2
72012: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72013: LD_INT 0
72015: PPUSH
72016: PPUSH
// if not driver or not IsInUnit ( driver ) then
72017: LD_VAR 0 1
72021: NOT
72022: PUSH
72023: LD_VAR 0 1
72027: PPUSH
72028: CALL_OW 310
72032: NOT
72033: OR
72034: IFFALSE 72038
// exit ;
72036: GO 72128
// vehicle := IsInUnit ( driver ) ;
72038: LD_ADDR_VAR 0 3
72042: PUSH
72043: LD_VAR 0 1
72047: PPUSH
72048: CALL_OW 310
72052: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72053: LD_VAR 0 1
72057: PPUSH
72058: LD_STRING \
72060: PUSH
72061: LD_INT 0
72063: PUSH
72064: LD_INT 0
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: LD_INT 0
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: LD_INT 0
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: PUSH
72088: LD_STRING E
72090: PUSH
72091: LD_INT 0
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: LD_VAR 0 3
72101: PUSH
72102: LD_INT 0
72104: PUSH
72105: LD_INT 0
72107: PUSH
72108: LD_INT 0
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PPUSH
72124: CALL_OW 447
// end ;
72128: LD_VAR 0 2
72132: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72133: LD_INT 0
72135: PPUSH
72136: PPUSH
72137: PPUSH
// tmp := [ ] ;
72138: LD_ADDR_VAR 0 5
72142: PUSH
72143: EMPTY
72144: ST_TO_ADDR
// for i in units do
72145: LD_ADDR_VAR 0 4
72149: PUSH
72150: LD_VAR 0 1
72154: PUSH
72155: FOR_IN
72156: IFFALSE 72194
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72158: LD_ADDR_VAR 0 5
72162: PUSH
72163: LD_VAR 0 5
72167: PPUSH
72168: LD_VAR 0 5
72172: PUSH
72173: LD_INT 1
72175: PLUS
72176: PPUSH
72177: LD_VAR 0 4
72181: PPUSH
72182: CALL_OW 256
72186: PPUSH
72187: CALL_OW 2
72191: ST_TO_ADDR
72192: GO 72155
72194: POP
72195: POP
// if not tmp then
72196: LD_VAR 0 5
72200: NOT
72201: IFFALSE 72205
// exit ;
72203: GO 72253
// if asc then
72205: LD_VAR 0 2
72209: IFFALSE 72233
// result := SortListByListAsc ( units , tmp ) else
72211: LD_ADDR_VAR 0 3
72215: PUSH
72216: LD_VAR 0 1
72220: PPUSH
72221: LD_VAR 0 5
72225: PPUSH
72226: CALL_OW 76
72230: ST_TO_ADDR
72231: GO 72253
// result := SortListByListDesc ( units , tmp ) ;
72233: LD_ADDR_VAR 0 3
72237: PUSH
72238: LD_VAR 0 1
72242: PPUSH
72243: LD_VAR 0 5
72247: PPUSH
72248: CALL_OW 77
72252: ST_TO_ADDR
// end ;
72253: LD_VAR 0 3
72257: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72258: LD_INT 0
72260: PPUSH
72261: PPUSH
// task := GetTaskList ( mech ) ;
72262: LD_ADDR_VAR 0 4
72266: PUSH
72267: LD_VAR 0 1
72271: PPUSH
72272: CALL_OW 437
72276: ST_TO_ADDR
// if not task then
72277: LD_VAR 0 4
72281: NOT
72282: IFFALSE 72286
// exit ;
72284: GO 72328
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72286: LD_ADDR_VAR 0 3
72290: PUSH
72291: LD_VAR 0 4
72295: PUSH
72296: LD_INT 1
72298: ARRAY
72299: PUSH
72300: LD_INT 1
72302: ARRAY
72303: PUSH
72304: LD_STRING r
72306: EQUAL
72307: PUSH
72308: LD_VAR 0 4
72312: PUSH
72313: LD_INT 1
72315: ARRAY
72316: PUSH
72317: LD_INT 4
72319: ARRAY
72320: PUSH
72321: LD_VAR 0 2
72325: EQUAL
72326: AND
72327: ST_TO_ADDR
// end ;
72328: LD_VAR 0 3
72332: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72333: LD_INT 0
72335: PPUSH
// SetDir ( unit , d ) ;
72336: LD_VAR 0 1
72340: PPUSH
72341: LD_VAR 0 4
72345: PPUSH
72346: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72350: LD_VAR 0 1
72354: PPUSH
72355: LD_VAR 0 2
72359: PPUSH
72360: LD_VAR 0 3
72364: PPUSH
72365: LD_VAR 0 5
72369: PPUSH
72370: CALL_OW 48
// end ;
72374: LD_VAR 0 6
72378: RET
// export function ToNaturalNumber ( number ) ; begin
72379: LD_INT 0
72381: PPUSH
// result := number div 1 ;
72382: LD_ADDR_VAR 0 2
72386: PUSH
72387: LD_VAR 0 1
72391: PUSH
72392: LD_INT 1
72394: DIV
72395: ST_TO_ADDR
// if number < 0 then
72396: LD_VAR 0 1
72400: PUSH
72401: LD_INT 0
72403: LESS
72404: IFFALSE 72414
// result := 0 ;
72406: LD_ADDR_VAR 0 2
72410: PUSH
72411: LD_INT 0
72413: ST_TO_ADDR
// end ;
72414: LD_VAR 0 2
72418: RET
// export function SortByClass ( units , class ) ; var un ; begin
72419: LD_INT 0
72421: PPUSH
72422: PPUSH
// if not units or not class then
72423: LD_VAR 0 1
72427: NOT
72428: PUSH
72429: LD_VAR 0 2
72433: NOT
72434: OR
72435: IFFALSE 72439
// exit ;
72437: GO 72534
// result := [ ] ;
72439: LD_ADDR_VAR 0 3
72443: PUSH
72444: EMPTY
72445: ST_TO_ADDR
// for un in units do
72446: LD_ADDR_VAR 0 4
72450: PUSH
72451: LD_VAR 0 1
72455: PUSH
72456: FOR_IN
72457: IFFALSE 72532
// if GetClass ( un ) = class then
72459: LD_VAR 0 4
72463: PPUSH
72464: CALL_OW 257
72468: PUSH
72469: LD_VAR 0 2
72473: EQUAL
72474: IFFALSE 72501
// result := Insert ( result , 1 , un ) else
72476: LD_ADDR_VAR 0 3
72480: PUSH
72481: LD_VAR 0 3
72485: PPUSH
72486: LD_INT 1
72488: PPUSH
72489: LD_VAR 0 4
72493: PPUSH
72494: CALL_OW 2
72498: ST_TO_ADDR
72499: GO 72530
// result := Replace ( result , result + 1 , un ) ;
72501: LD_ADDR_VAR 0 3
72505: PUSH
72506: LD_VAR 0 3
72510: PPUSH
72511: LD_VAR 0 3
72515: PUSH
72516: LD_INT 1
72518: PLUS
72519: PPUSH
72520: LD_VAR 0 4
72524: PPUSH
72525: CALL_OW 1
72529: ST_TO_ADDR
72530: GO 72456
72532: POP
72533: POP
// end ;
72534: LD_VAR 0 3
72538: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72539: LD_INT 0
72541: PPUSH
72542: PPUSH
72543: PPUSH
72544: PPUSH
72545: PPUSH
72546: PPUSH
72547: PPUSH
// result := [ ] ;
72548: LD_ADDR_VAR 0 4
72552: PUSH
72553: EMPTY
72554: ST_TO_ADDR
// if x - r < 0 then
72555: LD_VAR 0 1
72559: PUSH
72560: LD_VAR 0 3
72564: MINUS
72565: PUSH
72566: LD_INT 0
72568: LESS
72569: IFFALSE 72581
// min_x := 0 else
72571: LD_ADDR_VAR 0 8
72575: PUSH
72576: LD_INT 0
72578: ST_TO_ADDR
72579: GO 72597
// min_x := x - r ;
72581: LD_ADDR_VAR 0 8
72585: PUSH
72586: LD_VAR 0 1
72590: PUSH
72591: LD_VAR 0 3
72595: MINUS
72596: ST_TO_ADDR
// if y - r < 0 then
72597: LD_VAR 0 2
72601: PUSH
72602: LD_VAR 0 3
72606: MINUS
72607: PUSH
72608: LD_INT 0
72610: LESS
72611: IFFALSE 72623
// min_y := 0 else
72613: LD_ADDR_VAR 0 7
72617: PUSH
72618: LD_INT 0
72620: ST_TO_ADDR
72621: GO 72639
// min_y := y - r ;
72623: LD_ADDR_VAR 0 7
72627: PUSH
72628: LD_VAR 0 2
72632: PUSH
72633: LD_VAR 0 3
72637: MINUS
72638: ST_TO_ADDR
// max_x := x + r ;
72639: LD_ADDR_VAR 0 9
72643: PUSH
72644: LD_VAR 0 1
72648: PUSH
72649: LD_VAR 0 3
72653: PLUS
72654: ST_TO_ADDR
// max_y := y + r ;
72655: LD_ADDR_VAR 0 10
72659: PUSH
72660: LD_VAR 0 2
72664: PUSH
72665: LD_VAR 0 3
72669: PLUS
72670: ST_TO_ADDR
// for _x = min_x to max_x do
72671: LD_ADDR_VAR 0 5
72675: PUSH
72676: DOUBLE
72677: LD_VAR 0 8
72681: DEC
72682: ST_TO_ADDR
72683: LD_VAR 0 9
72687: PUSH
72688: FOR_TO
72689: IFFALSE 72790
// for _y = min_y to max_y do
72691: LD_ADDR_VAR 0 6
72695: PUSH
72696: DOUBLE
72697: LD_VAR 0 7
72701: DEC
72702: ST_TO_ADDR
72703: LD_VAR 0 10
72707: PUSH
72708: FOR_TO
72709: IFFALSE 72786
// begin if not ValidHex ( _x , _y ) then
72711: LD_VAR 0 5
72715: PPUSH
72716: LD_VAR 0 6
72720: PPUSH
72721: CALL_OW 488
72725: NOT
72726: IFFALSE 72730
// continue ;
72728: GO 72708
// if GetResourceTypeXY ( _x , _y ) then
72730: LD_VAR 0 5
72734: PPUSH
72735: LD_VAR 0 6
72739: PPUSH
72740: CALL_OW 283
72744: IFFALSE 72784
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72746: LD_ADDR_VAR 0 4
72750: PUSH
72751: LD_VAR 0 4
72755: PPUSH
72756: LD_VAR 0 4
72760: PUSH
72761: LD_INT 1
72763: PLUS
72764: PPUSH
72765: LD_VAR 0 5
72769: PUSH
72770: LD_VAR 0 6
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PPUSH
72779: CALL_OW 1
72783: ST_TO_ADDR
// end ;
72784: GO 72708
72786: POP
72787: POP
72788: GO 72688
72790: POP
72791: POP
// end ;
72792: LD_VAR 0 4
72796: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72797: LD_INT 0
72799: PPUSH
72800: PPUSH
72801: PPUSH
72802: PPUSH
72803: PPUSH
72804: PPUSH
72805: PPUSH
72806: PPUSH
// if not units then
72807: LD_VAR 0 1
72811: NOT
72812: IFFALSE 72816
// exit ;
72814: GO 73241
// result := UnitFilter ( units , [ f_ok ] ) ;
72816: LD_ADDR_VAR 0 3
72820: PUSH
72821: LD_VAR 0 1
72825: PPUSH
72826: LD_INT 50
72828: PUSH
72829: EMPTY
72830: LIST
72831: PPUSH
72832: CALL_OW 72
72836: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72837: LD_ADDR_VAR 0 8
72841: PUSH
72842: LD_VAR 0 1
72846: PUSH
72847: LD_INT 1
72849: ARRAY
72850: PPUSH
72851: CALL_OW 255
72855: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
72856: LD_ADDR_VAR 0 10
72860: PUSH
72861: LD_INT 29
72863: PUSH
72864: LD_EXP 48
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: ST_TO_ADDR
// if not result then
72873: LD_VAR 0 3
72877: NOT
72878: IFFALSE 72882
// exit ;
72880: GO 73241
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72882: LD_ADDR_VAR 0 5
72886: PUSH
72887: LD_INT 81
72889: PUSH
72890: LD_VAR 0 8
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PPUSH
72899: CALL_OW 69
72903: ST_TO_ADDR
// for i in result do
72904: LD_ADDR_VAR 0 4
72908: PUSH
72909: LD_VAR 0 3
72913: PUSH
72914: FOR_IN
72915: IFFALSE 73239
// begin tag := GetTag ( i ) + 1 ;
72917: LD_ADDR_VAR 0 9
72921: PUSH
72922: LD_VAR 0 4
72926: PPUSH
72927: CALL_OW 110
72931: PUSH
72932: LD_INT 1
72934: PLUS
72935: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72936: LD_ADDR_VAR 0 7
72940: PUSH
72941: LD_VAR 0 4
72945: PPUSH
72946: CALL_OW 250
72950: PPUSH
72951: LD_VAR 0 4
72955: PPUSH
72956: CALL_OW 251
72960: PPUSH
72961: LD_INT 6
72963: PPUSH
72964: CALL 72539 0 3
72968: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72969: LD_VAR 0 7
72973: PUSH
72974: LD_VAR 0 4
72978: PPUSH
72979: CALL_OW 264
72983: PUSH
72984: LD_VAR 0 10
72988: IN
72989: NOT
72990: AND
72991: IFFALSE 73030
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72993: LD_VAR 0 4
72997: PPUSH
72998: LD_VAR 0 7
73002: PUSH
73003: LD_INT 1
73005: ARRAY
73006: PUSH
73007: LD_INT 1
73009: ARRAY
73010: PPUSH
73011: LD_VAR 0 7
73015: PUSH
73016: LD_INT 1
73018: ARRAY
73019: PUSH
73020: LD_INT 2
73022: ARRAY
73023: PPUSH
73024: CALL_OW 116
73028: GO 73237
// if path > tag then
73030: LD_VAR 0 2
73034: PUSH
73035: LD_VAR 0 9
73039: GREATER
73040: IFFALSE 73207
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
73042: LD_ADDR_VAR 0 6
73046: PUSH
73047: LD_VAR 0 5
73051: PPUSH
73052: LD_INT 91
73054: PUSH
73055: LD_VAR 0 4
73059: PUSH
73060: LD_INT 12
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: LIST
73067: PPUSH
73068: CALL_OW 72
73072: ST_TO_ADDR
// if nearEnemy then
73073: LD_VAR 0 6
73077: IFFALSE 73105
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73079: LD_VAR 0 4
73083: PPUSH
73084: LD_VAR 0 6
73088: PPUSH
73089: LD_VAR 0 4
73093: PPUSH
73094: CALL_OW 74
73098: PPUSH
73099: CALL_OW 115
73103: GO 73205
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73105: LD_VAR 0 4
73109: PPUSH
73110: LD_VAR 0 2
73114: PUSH
73115: LD_VAR 0 9
73119: ARRAY
73120: PUSH
73121: LD_INT 1
73123: ARRAY
73124: PPUSH
73125: LD_VAR 0 2
73129: PUSH
73130: LD_VAR 0 9
73134: ARRAY
73135: PUSH
73136: LD_INT 2
73138: ARRAY
73139: PPUSH
73140: CALL_OW 297
73144: PUSH
73145: LD_INT 6
73147: GREATER
73148: IFFALSE 73191
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73150: LD_VAR 0 4
73154: PPUSH
73155: LD_VAR 0 2
73159: PUSH
73160: LD_VAR 0 9
73164: ARRAY
73165: PUSH
73166: LD_INT 1
73168: ARRAY
73169: PPUSH
73170: LD_VAR 0 2
73174: PUSH
73175: LD_VAR 0 9
73179: ARRAY
73180: PUSH
73181: LD_INT 2
73183: ARRAY
73184: PPUSH
73185: CALL_OW 114
73189: GO 73205
// SetTag ( i , tag ) ;
73191: LD_VAR 0 4
73195: PPUSH
73196: LD_VAR 0 9
73200: PPUSH
73201: CALL_OW 109
// end else
73205: GO 73237
// if enemy then
73207: LD_VAR 0 5
73211: IFFALSE 73237
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73213: LD_VAR 0 4
73217: PPUSH
73218: LD_VAR 0 5
73222: PPUSH
73223: LD_VAR 0 4
73227: PPUSH
73228: CALL_OW 74
73232: PPUSH
73233: CALL_OW 115
// end ;
73237: GO 72914
73239: POP
73240: POP
// end ;
73241: LD_VAR 0 3
73245: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73246: LD_INT 0
73248: PPUSH
73249: PPUSH
73250: PPUSH
// if not unit or IsInUnit ( unit ) then
73251: LD_VAR 0 1
73255: NOT
73256: PUSH
73257: LD_VAR 0 1
73261: PPUSH
73262: CALL_OW 310
73266: OR
73267: IFFALSE 73271
// exit ;
73269: GO 73362
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73271: LD_ADDR_VAR 0 4
73275: PUSH
73276: LD_VAR 0 1
73280: PPUSH
73281: CALL_OW 250
73285: PPUSH
73286: LD_VAR 0 2
73290: PPUSH
73291: LD_INT 1
73293: PPUSH
73294: CALL_OW 272
73298: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73299: LD_ADDR_VAR 0 5
73303: PUSH
73304: LD_VAR 0 1
73308: PPUSH
73309: CALL_OW 251
73313: PPUSH
73314: LD_VAR 0 2
73318: PPUSH
73319: LD_INT 1
73321: PPUSH
73322: CALL_OW 273
73326: ST_TO_ADDR
// if ValidHex ( x , y ) then
73327: LD_VAR 0 4
73331: PPUSH
73332: LD_VAR 0 5
73336: PPUSH
73337: CALL_OW 488
73341: IFFALSE 73362
// ComTurnXY ( unit , x , y ) ;
73343: LD_VAR 0 1
73347: PPUSH
73348: LD_VAR 0 4
73352: PPUSH
73353: LD_VAR 0 5
73357: PPUSH
73358: CALL_OW 118
// end ;
73362: LD_VAR 0 3
73366: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73367: LD_INT 0
73369: PPUSH
73370: PPUSH
// result := false ;
73371: LD_ADDR_VAR 0 3
73375: PUSH
73376: LD_INT 0
73378: ST_TO_ADDR
// if not units then
73379: LD_VAR 0 2
73383: NOT
73384: IFFALSE 73388
// exit ;
73386: GO 73433
// for i in units do
73388: LD_ADDR_VAR 0 4
73392: PUSH
73393: LD_VAR 0 2
73397: PUSH
73398: FOR_IN
73399: IFFALSE 73431
// if See ( side , i ) then
73401: LD_VAR 0 1
73405: PPUSH
73406: LD_VAR 0 4
73410: PPUSH
73411: CALL_OW 292
73415: IFFALSE 73429
// begin result := true ;
73417: LD_ADDR_VAR 0 3
73421: PUSH
73422: LD_INT 1
73424: ST_TO_ADDR
// exit ;
73425: POP
73426: POP
73427: GO 73433
// end ;
73429: GO 73398
73431: POP
73432: POP
// end ;
73433: LD_VAR 0 3
73437: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73438: LD_INT 0
73440: PPUSH
73441: PPUSH
73442: PPUSH
73443: PPUSH
// if not unit or not points then
73444: LD_VAR 0 1
73448: NOT
73449: PUSH
73450: LD_VAR 0 2
73454: NOT
73455: OR
73456: IFFALSE 73460
// exit ;
73458: GO 73550
// dist := 99999 ;
73460: LD_ADDR_VAR 0 5
73464: PUSH
73465: LD_INT 99999
73467: ST_TO_ADDR
// for i in points do
73468: LD_ADDR_VAR 0 4
73472: PUSH
73473: LD_VAR 0 2
73477: PUSH
73478: FOR_IN
73479: IFFALSE 73548
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73481: LD_ADDR_VAR 0 6
73485: PUSH
73486: LD_VAR 0 1
73490: PPUSH
73491: LD_VAR 0 4
73495: PUSH
73496: LD_INT 1
73498: ARRAY
73499: PPUSH
73500: LD_VAR 0 4
73504: PUSH
73505: LD_INT 2
73507: ARRAY
73508: PPUSH
73509: CALL_OW 297
73513: ST_TO_ADDR
// if tmpDist < dist then
73514: LD_VAR 0 6
73518: PUSH
73519: LD_VAR 0 5
73523: LESS
73524: IFFALSE 73546
// begin result := i ;
73526: LD_ADDR_VAR 0 3
73530: PUSH
73531: LD_VAR 0 4
73535: ST_TO_ADDR
// dist := tmpDist ;
73536: LD_ADDR_VAR 0 5
73540: PUSH
73541: LD_VAR 0 6
73545: ST_TO_ADDR
// end ; end ;
73546: GO 73478
73548: POP
73549: POP
// end ; end_of_file
73550: LD_VAR 0 3
73554: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73555: LD_VAR 0 1
73559: PUSH
73560: LD_INT 200
73562: DOUBLE
73563: GREATEREQUAL
73564: IFFALSE 73572
73566: LD_INT 299
73568: DOUBLE
73569: LESSEQUAL
73570: IFTRUE 73574
73572: GO 73606
73574: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73575: LD_VAR 0 1
73579: PPUSH
73580: LD_VAR 0 2
73584: PPUSH
73585: LD_VAR 0 3
73589: PPUSH
73590: LD_VAR 0 4
73594: PPUSH
73595: LD_VAR 0 5
73599: PPUSH
73600: CALL 14873 0 5
73604: GO 73683
73606: LD_INT 300
73608: DOUBLE
73609: GREATEREQUAL
73610: IFFALSE 73618
73612: LD_INT 399
73614: DOUBLE
73615: LESSEQUAL
73616: IFTRUE 73620
73618: GO 73682
73620: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73621: LD_VAR 0 1
73625: PPUSH
73626: LD_VAR 0 2
73630: PPUSH
73631: LD_VAR 0 3
73635: PPUSH
73636: LD_VAR 0 4
73640: PPUSH
73641: LD_VAR 0 5
73645: PPUSH
73646: LD_VAR 0 6
73650: PPUSH
73651: LD_VAR 0 7
73655: PPUSH
73656: LD_VAR 0 8
73660: PPUSH
73661: LD_VAR 0 9
73665: PPUSH
73666: LD_VAR 0 10
73670: PPUSH
73671: LD_VAR 0 11
73675: PPUSH
73676: CALL 31484 0 11
73680: GO 73683
73682: POP
// end ;
73683: PPOPN 11
73685: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73686: LD_VAR 0 1
73690: PPUSH
73691: LD_VAR 0 2
73695: PPUSH
73696: LD_VAR 0 3
73700: PPUSH
73701: LD_VAR 0 4
73705: PPUSH
73706: LD_VAR 0 5
73710: PPUSH
73711: CALL 14609 0 5
// end ; end_of_file
73715: PPOPN 5
73717: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73718: LD_VAR 0 1
73722: PPUSH
73723: LD_VAR 0 2
73727: PPUSH
73728: LD_VAR 0 3
73732: PPUSH
73733: LD_VAR 0 4
73737: PPUSH
73738: LD_VAR 0 5
73742: PPUSH
73743: LD_VAR 0 6
73747: PPUSH
73748: CALL 19177 0 6
// end ;
73752: PPOPN 6
73754: END
