// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// PrepareNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 690 0 2
// PrepareArabian ;
  31: CALL 3176 0 0
// PrepareRussian ;
  35: CALL 4774 0 0
// Action ;
  39: CALL 9278 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// end ;
 226: LD_VAR 0 1
 230: RET
// every 0 0$1 trigger debug do var i ;
 231: LD_EXP 1
 235: IFFALSE 319
 237: GO 239
 239: DISABLE
 240: LD_INT 0
 242: PPUSH
// begin enable ;
 243: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 244: LD_ADDR_VAR 0 1
 248: PUSH
 249: LD_INT 22
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 21
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PPUSH
 280: CALL_OW 69
 284: PUSH
 285: FOR_IN
 286: IFFALSE 317
// if GetLives ( i ) < 1000 then
 288: LD_VAR 0 1
 292: PPUSH
 293: CALL_OW 256
 297: PUSH
 298: LD_INT 1000
 300: LESS
 301: IFFALSE 315
// SetLives ( i , 1000 ) ;
 303: LD_VAR 0 1
 307: PPUSH
 308: LD_INT 1000
 310: PPUSH
 311: CALL_OW 234
 315: GO 285
 317: POP
 318: POP
// end ; end_of_file
 319: PPOPN 1
 321: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 322: LD_INT 0
 324: PPUSH
 325: PPUSH
// if exist_mode then
 326: LD_VAR 0 2
 330: IFFALSE 355
// unit := CreateCharacter ( prefix & ident ) else
 332: LD_ADDR_VAR 0 5
 336: PUSH
 337: LD_VAR 0 3
 341: PUSH
 342: LD_VAR 0 1
 346: STR
 347: PPUSH
 348: CALL_OW 34
 352: ST_TO_ADDR
 353: GO 370
// unit := NewCharacter ( ident ) ;
 355: LD_ADDR_VAR 0 5
 359: PUSH
 360: LD_VAR 0 1
 364: PPUSH
 365: CALL_OW 25
 369: ST_TO_ADDR
// result := unit ;
 370: LD_ADDR_VAR 0 4
 374: PUSH
 375: LD_VAR 0 5
 379: ST_TO_ADDR
// end ;
 380: LD_VAR 0 4
 384: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 385: LD_INT 0
 387: PPUSH
// uc_side := side ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_VAR 0 1
 397: ST_TO_ADDR
// uc_nation := nation ;
 398: LD_ADDR_OWVAR 21
 402: PUSH
 403: LD_VAR 0 2
 407: ST_TO_ADDR
// vc_chassis := chassis ;
 408: LD_ADDR_OWVAR 37
 412: PUSH
 413: LD_VAR 0 3
 417: ST_TO_ADDR
// vc_engine := engine ;
 418: LD_ADDR_OWVAR 39
 422: PUSH
 423: LD_VAR 0 4
 427: ST_TO_ADDR
// vc_control := control ;
 428: LD_ADDR_OWVAR 38
 432: PUSH
 433: LD_VAR 0 5
 437: ST_TO_ADDR
// vc_weapon := weapon ;
 438: LD_ADDR_OWVAR 40
 442: PUSH
 443: LD_VAR 0 6
 447: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 448: LD_ADDR_OWVAR 41
 452: PUSH
 453: LD_VAR 0 7
 457: ST_TO_ADDR
// result := CreateVehicle ;
 458: LD_ADDR_VAR 0 8
 462: PUSH
 463: CALL_OW 45
 467: ST_TO_ADDR
// end ;
 468: LD_VAR 0 8
 472: RET
// export function SayX ( units , ident ) ; var i ; begin
 473: LD_INT 0
 475: PPUSH
 476: PPUSH
// result := false ;
 477: LD_ADDR_VAR 0 3
 481: PUSH
 482: LD_INT 0
 484: ST_TO_ADDR
// if not units then
 485: LD_VAR 0 1
 489: NOT
 490: IFFALSE 494
// exit ;
 492: GO 548
// for i in units do
 494: LD_ADDR_VAR 0 4
 498: PUSH
 499: LD_VAR 0 1
 503: PUSH
 504: FOR_IN
 505: IFFALSE 546
// if IsOk ( i ) then
 507: LD_VAR 0 4
 511: PPUSH
 512: CALL_OW 302
 516: IFFALSE 544
// begin Say ( i , ident ) ;
 518: LD_VAR 0 4
 522: PPUSH
 523: LD_VAR 0 2
 527: PPUSH
 528: CALL_OW 88
// result := i ;
 532: LD_ADDR_VAR 0 3
 536: PUSH
 537: LD_VAR 0 4
 541: ST_TO_ADDR
// break ;
 542: GO 546
// end ;
 544: GO 504
 546: POP
 547: POP
// end ;
 548: LD_VAR 0 3
 552: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 553: LD_INT 0
 555: PPUSH
 556: PPUSH
// InitUc ;
 557: CALL_OW 18
// InitHc ;
 561: CALL_OW 19
// uc_side := 0 ;
 565: LD_ADDR_OWVAR 20
 569: PUSH
 570: LD_INT 0
 572: ST_TO_ADDR
// uc_nation := 0 ;
 573: LD_ADDR_OWVAR 21
 577: PUSH
 578: LD_INT 0
 580: ST_TO_ADDR
// for i = 1 to amount do
 581: LD_ADDR_VAR 0 4
 585: PUSH
 586: DOUBLE
 587: LD_INT 1
 589: DEC
 590: ST_TO_ADDR
 591: LD_VAR 0 2
 595: PUSH
 596: FOR_TO
 597: IFFALSE 679
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 599: LD_ADDR_OWVAR 29
 603: PUSH
 604: LD_INT 9
 606: PPUSH
 607: LD_INT 12
 609: PPUSH
 610: CALL_OW 12
 614: PUSH
 615: LD_INT 9
 617: PPUSH
 618: LD_INT 12
 620: PPUSH
 621: CALL_OW 12
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 630: LD_ADDR_OWVAR 35
 634: PUSH
 635: LD_INT 1
 637: NEG
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 12
 646: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 647: LD_INT 0
 649: PPUSH
 650: LD_INT 12
 652: PPUSH
 653: LD_INT 1
 655: PPUSH
 656: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 660: CALL_OW 44
 664: PPUSH
 665: LD_VAR 0 1
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 49
// end ;
 677: GO 596
 679: POP
 680: POP
// InitHc ;
 681: CALL_OW 19
// end ;
 685: LD_VAR 0 3
 689: RET
// export function PrepareNature ( forest , swamp ) ; var i ; begin
 690: LD_INT 0
 692: PPUSH
 693: PPUSH
// uc_side := 0 ;
 694: LD_ADDR_OWVAR 20
 698: PUSH
 699: LD_INT 0
 701: ST_TO_ADDR
// uc_nation := 0 ;
 702: LD_ADDR_OWVAR 21
 706: PUSH
 707: LD_INT 0
 709: ST_TO_ADDR
// for i := 1 to 3 do
 710: LD_ADDR_VAR 0 4
 714: PUSH
 715: DOUBLE
 716: LD_INT 1
 718: DEC
 719: ST_TO_ADDR
 720: LD_INT 3
 722: PUSH
 723: FOR_TO
 724: IFFALSE 761
// begin hc_class := 21 ;
 726: LD_ADDR_OWVAR 28
 730: PUSH
 731: LD_INT 21
 733: ST_TO_ADDR
// hc_gallery :=  ;
 734: LD_ADDR_OWVAR 33
 738: PUSH
 739: LD_STRING 
 741: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 742: CALL_OW 44
 746: PPUSH
 747: LD_VAR 0 1
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 49
// end ;
 759: GO 723
 761: POP
 762: POP
// for i := 1 to 3 do
 763: LD_ADDR_VAR 0 4
 767: PUSH
 768: DOUBLE
 769: LD_INT 1
 771: DEC
 772: ST_TO_ADDR
 773: LD_INT 3
 775: PUSH
 776: FOR_TO
 777: IFFALSE 814
// begin hc_class := 18 ;
 779: LD_ADDR_OWVAR 28
 783: PUSH
 784: LD_INT 18
 786: ST_TO_ADDR
// hc_gallery :=  ;
 787: LD_ADDR_OWVAR 33
 791: PUSH
 792: LD_STRING 
 794: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 795: CALL_OW 44
 799: PPUSH
 800: LD_VAR 0 1
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 49
// end ;
 812: GO 776
 814: POP
 815: POP
// for i := 1 to 3 do
 816: LD_ADDR_VAR 0 4
 820: PUSH
 821: DOUBLE
 822: LD_INT 1
 824: DEC
 825: ST_TO_ADDR
 826: LD_INT 3
 828: PUSH
 829: FOR_TO
 830: IFFALSE 867
// begin hc_class := 13 ;
 832: LD_ADDR_OWVAR 28
 836: PUSH
 837: LD_INT 13
 839: ST_TO_ADDR
// hc_gallery :=  ;
 840: LD_ADDR_OWVAR 33
 844: PUSH
 845: LD_STRING 
 847: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 848: CALL_OW 44
 852: PPUSH
 853: LD_VAR 0 1
 857: PPUSH
 858: LD_INT 0
 860: PPUSH
 861: CALL_OW 49
// end ;
 865: GO 829
 867: POP
 868: POP
// for i := 1 to 4 do
 869: LD_ADDR_VAR 0 4
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_INT 4
 881: PUSH
 882: FOR_TO
 883: IFFALSE 920
// begin hc_class := class_frog ;
 885: LD_ADDR_OWVAR 28
 889: PUSH
 890: LD_INT 19
 892: ST_TO_ADDR
// hc_gallery :=  ;
 893: LD_ADDR_OWVAR 33
 897: PUSH
 898: LD_STRING 
 900: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 901: CALL_OW 44
 905: PPUSH
 906: LD_VAR 0 2
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 49
// end ;
 918: GO 882
 920: POP
 921: POP
// end ;
 922: LD_VAR 0 3
 926: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 927: LD_INT 0
 929: PPUSH
 930: PPUSH
 931: PPUSH
// if not observer or not unit then
 932: LD_VAR 0 1
 936: NOT
 937: PUSH
 938: LD_VAR 0 2
 942: NOT
 943: OR
 944: IFFALSE 948
// exit ;
 946: GO 996
// if not See ( GetSide ( observer ) , unit ) then
 948: LD_VAR 0 1
 952: PPUSH
 953: CALL_OW 255
 957: PPUSH
 958: LD_VAR 0 2
 962: PPUSH
 963: CALL_OW 292
 967: NOT
 968: IFFALSE 972
// exit ;
 970: GO 996
// result := GetDistUnits ( observer , unit ) < 12 ;
 972: LD_ADDR_VAR 0 3
 976: PUSH
 977: LD_VAR 0 1
 981: PPUSH
 982: LD_VAR 0 2
 986: PPUSH
 987: CALL_OW 296
 991: PUSH
 992: LD_INT 12
 994: LESS
 995: ST_TO_ADDR
// end ;
 996: LD_VAR 0 3
1000: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1001: LD_INT 0
1003: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1004: LD_VAR 0 2
1008: PUSH
1009: LD_INT 1
1011: ARRAY
1012: PPUSH
1013: LD_VAR 0 2
1017: PUSH
1018: LD_INT 2
1020: ARRAY
1021: PPUSH
1022: CALL_OW 488
1026: PUSH
1027: LD_VAR 0 2
1031: PUSH
1032: LD_INT 1
1034: ARRAY
1035: PPUSH
1036: LD_VAR 0 2
1040: PUSH
1041: LD_INT 2
1043: ARRAY
1044: PPUSH
1045: CALL_OW 428
1049: PUSH
1050: LD_INT 0
1052: EQUAL
1053: AND
1054: IFFALSE 1088
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1056: LD_VAR 0 1
1060: PPUSH
1061: LD_VAR 0 2
1065: PUSH
1066: LD_INT 1
1068: ARRAY
1069: PPUSH
1070: LD_VAR 0 2
1074: PUSH
1075: LD_INT 2
1077: ARRAY
1078: PPUSH
1079: LD_VAR 0 3
1083: PPUSH
1084: CALL_OW 48
// end ;
1088: LD_VAR 0 4
1092: RET
// export function Video ( mode ) ; begin
1093: LD_INT 0
1095: PPUSH
// ingame_video = mode ;
1096: LD_ADDR_OWVAR 52
1100: PUSH
1101: LD_VAR 0 1
1105: ST_TO_ADDR
// interface_hidden = mode ;
1106: LD_ADDR_OWVAR 54
1110: PUSH
1111: LD_VAR 0 1
1115: ST_TO_ADDR
// end ;
1116: LD_VAR 0 2
1120: RET
// export function ReverseArray ( array ) ; var i ; begin
1121: LD_INT 0
1123: PPUSH
1124: PPUSH
// if not array then
1125: LD_VAR 0 1
1129: NOT
1130: IFFALSE 1134
// exit ;
1132: GO 1192
// result := [ ] ;
1134: LD_ADDR_VAR 0 2
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// for i := 1 to array do
1141: LD_ADDR_VAR 0 3
1145: PUSH
1146: DOUBLE
1147: LD_INT 1
1149: DEC
1150: ST_TO_ADDR
1151: LD_VAR 0 1
1155: PUSH
1156: FOR_TO
1157: IFFALSE 1190
// result := Insert ( result , 1 , array [ i ] ) ;
1159: LD_ADDR_VAR 0 2
1163: PUSH
1164: LD_VAR 0 2
1168: PPUSH
1169: LD_INT 1
1171: PPUSH
1172: LD_VAR 0 1
1176: PUSH
1177: LD_VAR 0 3
1181: ARRAY
1182: PPUSH
1183: CALL_OW 2
1187: ST_TO_ADDR
1188: GO 1156
1190: POP
1191: POP
// end ;
1192: LD_VAR 0 2
1196: RET
// export function ComExit ( unit ) ; begin
1197: LD_INT 0
1199: PPUSH
// result := IsInUnit ( unit ) ;
1200: LD_ADDR_VAR 0 2
1204: PUSH
1205: LD_VAR 0 1
1209: PPUSH
1210: CALL_OW 310
1214: ST_TO_ADDR
// if not result then
1215: LD_VAR 0 2
1219: NOT
1220: IFFALSE 1224
// exit ;
1222: GO 1259
// if GetType ( result ) = unit_vehicle then
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 247
1233: PUSH
1234: LD_INT 2
1236: EQUAL
1237: IFFALSE 1250
// ComExitVehicle ( unit ) else
1239: LD_VAR 0 1
1243: PPUSH
1244: CALL_OW 121
1248: GO 1259
// ComExitBuilding ( unit ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: CALL_OW 122
// end ;
1259: LD_VAR 0 2
1263: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1264: LD_INT 0
1266: PPUSH
1267: PPUSH
// if not side or not nation then
1268: LD_VAR 0 1
1272: NOT
1273: PUSH
1274: LD_VAR 0 2
1278: NOT
1279: OR
1280: IFFALSE 1284
// exit ;
1282: GO 2048
// case nation of nation_american :
1284: LD_VAR 0 2
1288: PUSH
1289: LD_INT 1
1291: DOUBLE
1292: EQUAL
1293: IFTRUE 1297
1295: GO 1511
1297: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1298: LD_ADDR_VAR 0 4
1302: PUSH
1303: LD_INT 35
1305: PUSH
1306: LD_INT 45
1308: PUSH
1309: LD_INT 46
1311: PUSH
1312: LD_INT 47
1314: PUSH
1315: LD_INT 82
1317: PUSH
1318: LD_INT 83
1320: PUSH
1321: LD_INT 84
1323: PUSH
1324: LD_INT 85
1326: PUSH
1327: LD_INT 86
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 2
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 15
1341: PUSH
1342: LD_INT 16
1344: PUSH
1345: LD_INT 7
1347: PUSH
1348: LD_INT 12
1350: PUSH
1351: LD_INT 13
1353: PUSH
1354: LD_INT 10
1356: PUSH
1357: LD_INT 14
1359: PUSH
1360: LD_INT 20
1362: PUSH
1363: LD_INT 21
1365: PUSH
1366: LD_INT 22
1368: PUSH
1369: LD_INT 25
1371: PUSH
1372: LD_INT 32
1374: PUSH
1375: LD_INT 27
1377: PUSH
1378: LD_INT 36
1380: PUSH
1381: LD_INT 69
1383: PUSH
1384: LD_INT 39
1386: PUSH
1387: LD_INT 34
1389: PUSH
1390: LD_INT 40
1392: PUSH
1393: LD_INT 48
1395: PUSH
1396: LD_INT 49
1398: PUSH
1399: LD_INT 50
1401: PUSH
1402: LD_INT 51
1404: PUSH
1405: LD_INT 52
1407: PUSH
1408: LD_INT 53
1410: PUSH
1411: LD_INT 54
1413: PUSH
1414: LD_INT 55
1416: PUSH
1417: LD_INT 56
1419: PUSH
1420: LD_INT 57
1422: PUSH
1423: LD_INT 58
1425: PUSH
1426: LD_INT 59
1428: PUSH
1429: LD_INT 60
1431: PUSH
1432: LD_INT 61
1434: PUSH
1435: LD_INT 62
1437: PUSH
1438: LD_INT 80
1440: PUSH
1441: LD_INT 82
1443: PUSH
1444: LD_INT 83
1446: PUSH
1447: LD_INT 84
1449: PUSH
1450: LD_INT 85
1452: PUSH
1453: LD_INT 86
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: ST_TO_ADDR
1509: GO 1972
1511: LD_INT 2
1513: DOUBLE
1514: EQUAL
1515: IFTRUE 1519
1517: GO 1741
1519: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1520: LD_ADDR_VAR 0 4
1524: PUSH
1525: LD_INT 35
1527: PUSH
1528: LD_INT 45
1530: PUSH
1531: LD_INT 46
1533: PUSH
1534: LD_INT 47
1536: PUSH
1537: LD_INT 82
1539: PUSH
1540: LD_INT 83
1542: PUSH
1543: LD_INT 84
1545: PUSH
1546: LD_INT 85
1548: PUSH
1549: LD_INT 87
1551: PUSH
1552: LD_INT 70
1554: PUSH
1555: LD_INT 1
1557: PUSH
1558: LD_INT 11
1560: PUSH
1561: LD_INT 3
1563: PUSH
1564: LD_INT 4
1566: PUSH
1567: LD_INT 5
1569: PUSH
1570: LD_INT 6
1572: PUSH
1573: LD_INT 15
1575: PUSH
1576: LD_INT 18
1578: PUSH
1579: LD_INT 7
1581: PUSH
1582: LD_INT 17
1584: PUSH
1585: LD_INT 8
1587: PUSH
1588: LD_INT 20
1590: PUSH
1591: LD_INT 21
1593: PUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 72
1599: PUSH
1600: LD_INT 26
1602: PUSH
1603: LD_INT 69
1605: PUSH
1606: LD_INT 39
1608: PUSH
1609: LD_INT 40
1611: PUSH
1612: LD_INT 41
1614: PUSH
1615: LD_INT 42
1617: PUSH
1618: LD_INT 43
1620: PUSH
1621: LD_INT 48
1623: PUSH
1624: LD_INT 49
1626: PUSH
1627: LD_INT 50
1629: PUSH
1630: LD_INT 51
1632: PUSH
1633: LD_INT 52
1635: PUSH
1636: LD_INT 53
1638: PUSH
1639: LD_INT 54
1641: PUSH
1642: LD_INT 55
1644: PUSH
1645: LD_INT 56
1647: PUSH
1648: LD_INT 60
1650: PUSH
1651: LD_INT 61
1653: PUSH
1654: LD_INT 62
1656: PUSH
1657: LD_INT 66
1659: PUSH
1660: LD_INT 67
1662: PUSH
1663: LD_INT 68
1665: PUSH
1666: LD_INT 81
1668: PUSH
1669: LD_INT 82
1671: PUSH
1672: LD_INT 83
1674: PUSH
1675: LD_INT 84
1677: PUSH
1678: LD_INT 85
1680: PUSH
1681: LD_INT 87
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: ST_TO_ADDR
1739: GO 1972
1741: LD_INT 3
1743: DOUBLE
1744: EQUAL
1745: IFTRUE 1749
1747: GO 1971
1749: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1750: LD_ADDR_VAR 0 4
1754: PUSH
1755: LD_INT 46
1757: PUSH
1758: LD_INT 47
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 82
1769: PUSH
1770: LD_INT 83
1772: PUSH
1773: LD_INT 84
1775: PUSH
1776: LD_INT 85
1778: PUSH
1779: LD_INT 86
1781: PUSH
1782: LD_INT 11
1784: PUSH
1785: LD_INT 9
1787: PUSH
1788: LD_INT 20
1790: PUSH
1791: LD_INT 19
1793: PUSH
1794: LD_INT 21
1796: PUSH
1797: LD_INT 24
1799: PUSH
1800: LD_INT 22
1802: PUSH
1803: LD_INT 25
1805: PUSH
1806: LD_INT 28
1808: PUSH
1809: LD_INT 29
1811: PUSH
1812: LD_INT 30
1814: PUSH
1815: LD_INT 31
1817: PUSH
1818: LD_INT 37
1820: PUSH
1821: LD_INT 38
1823: PUSH
1824: LD_INT 32
1826: PUSH
1827: LD_INT 27
1829: PUSH
1830: LD_INT 33
1832: PUSH
1833: LD_INT 69
1835: PUSH
1836: LD_INT 39
1838: PUSH
1839: LD_INT 34
1841: PUSH
1842: LD_INT 40
1844: PUSH
1845: LD_INT 71
1847: PUSH
1848: LD_INT 23
1850: PUSH
1851: LD_INT 44
1853: PUSH
1854: LD_INT 48
1856: PUSH
1857: LD_INT 49
1859: PUSH
1860: LD_INT 50
1862: PUSH
1863: LD_INT 51
1865: PUSH
1866: LD_INT 52
1868: PUSH
1869: LD_INT 53
1871: PUSH
1872: LD_INT 54
1874: PUSH
1875: LD_INT 55
1877: PUSH
1878: LD_INT 56
1880: PUSH
1881: LD_INT 57
1883: PUSH
1884: LD_INT 58
1886: PUSH
1887: LD_INT 59
1889: PUSH
1890: LD_INT 63
1892: PUSH
1893: LD_INT 64
1895: PUSH
1896: LD_INT 65
1898: PUSH
1899: LD_INT 82
1901: PUSH
1902: LD_INT 83
1904: PUSH
1905: LD_INT 84
1907: PUSH
1908: LD_INT 85
1910: PUSH
1911: LD_INT 86
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: ST_TO_ADDR
1969: GO 1972
1971: POP
// if state > - 1 and state < 3 then
1972: LD_VAR 0 3
1976: PUSH
1977: LD_INT 1
1979: NEG
1980: GREATER
1981: PUSH
1982: LD_VAR 0 3
1986: PUSH
1987: LD_INT 3
1989: LESS
1990: AND
1991: IFFALSE 2048
// for i in result do
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 4
2002: PUSH
2003: FOR_IN
2004: IFFALSE 2046
// if GetTech ( i , side ) <> state then
2006: LD_VAR 0 5
2010: PPUSH
2011: LD_VAR 0 1
2015: PPUSH
2016: CALL_OW 321
2020: PUSH
2021: LD_VAR 0 3
2025: NONEQUAL
2026: IFFALSE 2044
// result := result diff i ;
2028: LD_ADDR_VAR 0 4
2032: PUSH
2033: LD_VAR 0 4
2037: PUSH
2038: LD_VAR 0 5
2042: DIFF
2043: ST_TO_ADDR
2044: GO 2003
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 4
2052: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// if not list then
2059: LD_VAR 0 3
2063: NOT
2064: IFFALSE 2068
// exit ;
2066: GO 2376
// result := [ ] ;
2068: LD_ADDR_VAR 0 5
2072: PUSH
2073: EMPTY
2074: ST_TO_ADDR
// for i in list do
2075: LD_ADDR_VAR 0 6
2079: PUSH
2080: LD_VAR 0 3
2084: PUSH
2085: FOR_IN
2086: IFFALSE 2288
// begin tmp := GetDistUnitXY ( i , x , y ) ;
2088: LD_ADDR_VAR 0 8
2092: PUSH
2093: LD_VAR 0 6
2097: PPUSH
2098: LD_VAR 0 1
2102: PPUSH
2103: LD_VAR 0 2
2107: PPUSH
2108: CALL_OW 297
2112: ST_TO_ADDR
// if not result then
2113: LD_VAR 0 5
2117: NOT
2118: IFFALSE 2144
// result := [ [ i , tmp ] ] else
2120: LD_ADDR_VAR 0 5
2124: PUSH
2125: LD_VAR 0 6
2129: PUSH
2130: LD_VAR 0 8
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: ST_TO_ADDR
2142: GO 2286
// begin if result [ result ] [ 2 ] < tmp then
2144: LD_VAR 0 5
2148: PUSH
2149: LD_VAR 0 5
2153: ARRAY
2154: PUSH
2155: LD_INT 2
2157: ARRAY
2158: PUSH
2159: LD_VAR 0 8
2163: LESS
2164: IFFALSE 2206
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2166: LD_ADDR_VAR 0 5
2170: PUSH
2171: LD_VAR 0 5
2175: PPUSH
2176: LD_VAR 0 5
2180: PUSH
2181: LD_INT 1
2183: PLUS
2184: PPUSH
2185: LD_VAR 0 6
2189: PUSH
2190: LD_VAR 0 8
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PPUSH
2199: CALL_OW 2
2203: ST_TO_ADDR
2204: GO 2286
// for j = 1 to result do
2206: LD_ADDR_VAR 0 7
2210: PUSH
2211: DOUBLE
2212: LD_INT 1
2214: DEC
2215: ST_TO_ADDR
2216: LD_VAR 0 5
2220: PUSH
2221: FOR_TO
2222: IFFALSE 2284
// begin if tmp < result [ j ] [ 2 ] then
2224: LD_VAR 0 8
2228: PUSH
2229: LD_VAR 0 5
2233: PUSH
2234: LD_VAR 0 7
2238: ARRAY
2239: PUSH
2240: LD_INT 2
2242: ARRAY
2243: LESS
2244: IFFALSE 2282
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2246: LD_ADDR_VAR 0 5
2250: PUSH
2251: LD_VAR 0 5
2255: PPUSH
2256: LD_VAR 0 7
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 8
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 2
2279: ST_TO_ADDR
// break ;
2280: GO 2284
// end ; end ;
2282: GO 2221
2284: POP
2285: POP
// end ; end ;
2286: GO 2085
2288: POP
2289: POP
// if result and not asc then
2290: LD_VAR 0 5
2294: PUSH
2295: LD_VAR 0 4
2299: NOT
2300: AND
2301: IFFALSE 2376
// begin tmp := result ;
2303: LD_ADDR_VAR 0 8
2307: PUSH
2308: LD_VAR 0 5
2312: ST_TO_ADDR
// for i = tmp downto 1 do
2313: LD_ADDR_VAR 0 6
2317: PUSH
2318: DOUBLE
2319: LD_VAR 0 8
2323: INC
2324: ST_TO_ADDR
2325: LD_INT 1
2327: PUSH
2328: FOR_DOWNTO
2329: IFFALSE 2374
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2331: LD_ADDR_VAR 0 5
2335: PUSH
2336: LD_VAR 0 5
2340: PPUSH
2341: LD_VAR 0 8
2345: PUSH
2346: LD_VAR 0 6
2350: MINUS
2351: PUSH
2352: LD_INT 1
2354: PLUS
2355: PPUSH
2356: LD_VAR 0 8
2360: PUSH
2361: LD_VAR 0 6
2365: ARRAY
2366: PPUSH
2367: CALL_OW 1
2371: ST_TO_ADDR
2372: GO 2328
2374: POP
2375: POP
// end ; end ;
2376: LD_VAR 0 5
2380: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
2381: LD_INT 0
2383: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 250
2398: PPUSH
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 251
2408: PPUSH
2409: LD_VAR 0 2
2413: PPUSH
2414: LD_VAR 0 3
2418: PPUSH
2419: CALL 2053 0 4
2423: ST_TO_ADDR
// end ;
2424: LD_VAR 0 4
2428: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
2429: LD_INT 0
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// if not unit then
2436: LD_VAR 0 1
2440: NOT
2441: IFFALSE 2445
// exit ;
2443: GO 2647
// side := GetSide ( unit ) ;
2445: LD_ADDR_VAR 0 4
2449: PUSH
2450: LD_VAR 0 1
2454: PPUSH
2455: CALL_OW 255
2459: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
2460: LD_ADDR_VAR 0 5
2464: PUSH
2465: LD_INT 22
2467: PUSH
2468: LD_VAR 0 4
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: LD_INT 30
2479: PUSH
2480: LD_VAR 0 2
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL_OW 69
2497: ST_TO_ADDR
// if not tmp then
2498: LD_VAR 0 5
2502: NOT
2503: IFFALSE 2507
// exit ;
2505: GO 2647
// tmp := SortByDistanceUnit ( unit , tmp , true ) ;
2507: LD_ADDR_VAR 0 5
2511: PUSH
2512: LD_VAR 0 1
2516: PPUSH
2517: LD_VAR 0 5
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL 2381 0 3
2529: ST_TO_ADDR
// places := 1 ;
2530: LD_ADDR_VAR 0 7
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
2538: LD_VAR 0 2
2542: PUSH
2543: LD_INT 0
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: LD_INT 4
2551: PUSH
2552: LD_INT 5
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: LD_INT 3
2560: PUSH
2561: LD_INT 6
2563: PUSH
2564: LD_INT 7
2566: PUSH
2567: LD_INT 8
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: IN
2581: IFFALSE 2591
// places := 6 ;
2583: LD_ADDR_VAR 0 7
2587: PUSH
2588: LD_INT 6
2590: ST_TO_ADDR
// for i in tmp do
2591: LD_ADDR_VAR 0 6
2595: PUSH
2596: LD_VAR 0 5
2600: PUSH
2601: FOR_IN
2602: IFFALSE 2645
// begin if UnitsInside ( i ) - places <= 0 then
2604: LD_VAR 0 6
2608: PPUSH
2609: CALL_OW 313
2613: PUSH
2614: LD_VAR 0 7
2618: MINUS
2619: PUSH
2620: LD_INT 0
2622: LESSEQUAL
2623: IFFALSE 2629
// continue else
2625: GO 2601
2627: GO 2643
// begin result := i ;
2629: LD_ADDR_VAR 0 3
2633: PUSH
2634: LD_VAR 0 6
2638: ST_TO_ADDR
// exit ;
2639: POP
2640: POP
2641: GO 2647
// end ; end ;
2643: GO 2601
2645: POP
2646: POP
// end ;
2647: LD_VAR 0 3
2651: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
2652: LD_INT 0
2654: PPUSH
2655: PPUSH
2656: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
2657: LD_VAR 0 1
2661: NOT
2662: PUSH
2663: LD_VAR 0 2
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: LD_INT 2
2673: PUSH
2674: LD_INT 3
2676: PUSH
2677: LD_INT 4
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: LIST
2684: LIST
2685: IN
2686: NOT
2687: OR
2688: IFFALSE 2692
// exit ;
2690: GO 2784
// tmp := [ ] ;
2692: LD_ADDR_VAR 0 5
2696: PUSH
2697: EMPTY
2698: ST_TO_ADDR
// for i in units do
2699: LD_ADDR_VAR 0 4
2703: PUSH
2704: LD_VAR 0 1
2708: PUSH
2709: FOR_IN
2710: IFFALSE 2753
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
2712: LD_ADDR_VAR 0 5
2716: PUSH
2717: LD_VAR 0 5
2721: PPUSH
2722: LD_VAR 0 5
2726: PUSH
2727: LD_INT 1
2729: PLUS
2730: PPUSH
2731: LD_VAR 0 4
2735: PPUSH
2736: LD_VAR 0 2
2740: PPUSH
2741: CALL_OW 259
2745: PPUSH
2746: CALL_OW 2
2750: ST_TO_ADDR
2751: GO 2709
2753: POP
2754: POP
// if not tmp then
2755: LD_VAR 0 5
2759: NOT
2760: IFFALSE 2764
// exit ;
2762: GO 2784
// result := SortListByListDesc ( units , tmp ) ;
2764: LD_ADDR_VAR 0 3
2768: PUSH
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 5
2778: PPUSH
2779: CALL_OW 77
2783: ST_TO_ADDR
// end ;
2784: LD_VAR 0 3
2788: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2789: LD_INT 0
2791: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_VAR 0 2
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2816: LD_VAR 0 1
2820: PPUSH
2821: LD_VAR 0 2
2825: PPUSH
2826: LD_VAR 0 3
2830: PPUSH
2831: CALL_OW 331
// end ;
2835: LD_VAR 0 5
2839: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2840: LD_INT 0
2842: PPUSH
// if not units then
2843: LD_VAR 0 1
2847: NOT
2848: IFFALSE 2852
// exit ;
2850: GO 2917
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) , menDialog ) then
2852: LD_VAR 0 1
2856: PPUSH
2857: LD_INT 26
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 72
2871: PPUSH
2872: LD_VAR 0 2
2876: PPUSH
2877: CALL_OW 88
2881: NOT
2882: IFFALSE 2917
// Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2884: LD_VAR 0 1
2888: PPUSH
2889: LD_INT 26
2891: PUSH
2892: LD_INT 2
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 72
2903: PUSH
2904: LD_INT 1
2906: ARRAY
2907: PPUSH
2908: LD_VAR 0 3
2912: PPUSH
2913: CALL_OW 88
// end ;
2917: LD_VAR 0 4
2921: RET
// export function SeeGroup ( side , group ) ; var i ; begin
2922: LD_INT 0
2924: PPUSH
2925: PPUSH
// if not group then
2926: LD_VAR 0 2
2930: NOT
2931: IFFALSE 2935
// exit ;
2933: GO 2980
// for i in group do
2935: LD_ADDR_VAR 0 4
2939: PUSH
2940: LD_VAR 0 2
2944: PUSH
2945: FOR_IN
2946: IFFALSE 2978
// if See ( side , i ) then
2948: LD_VAR 0 1
2952: PPUSH
2953: LD_VAR 0 4
2957: PPUSH
2958: CALL_OW 292
2962: IFFALSE 2976
// begin result := true ;
2964: LD_ADDR_VAR 0 3
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// exit ;
2972: POP
2973: POP
2974: GO 2980
// end ;
2976: GO 2945
2978: POP
2979: POP
// end ;
2980: LD_VAR 0 3
2984: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
2985: LD_INT 0
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
// if not unit or not area then
2991: LD_VAR 0 1
2995: NOT
2996: PUSH
2997: LD_VAR 0 2
3001: NOT
3002: OR
3003: IFFALSE 3007
// exit ;
3005: GO 3171
// tmp := AreaToList ( area , i ) ;
3007: LD_ADDR_VAR 0 6
3011: PUSH
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_VAR 0 5
3021: PPUSH
3022: CALL_OW 517
3026: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: DOUBLE
3033: LD_INT 1
3035: DEC
3036: ST_TO_ADDR
3037: LD_VAR 0 6
3041: PUSH
3042: LD_INT 1
3044: ARRAY
3045: PUSH
3046: FOR_TO
3047: IFFALSE 3169
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
3049: LD_ADDR_VAR 0 7
3053: PUSH
3054: LD_VAR 0 6
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PUSH
3063: LD_VAR 0 5
3067: ARRAY
3068: PUSH
3069: LD_VAR 0 6
3073: PUSH
3074: LD_INT 2
3076: ARRAY
3077: PUSH
3078: LD_VAR 0 5
3082: ARRAY
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
3088: LD_VAR 0 7
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PPUSH
3097: LD_VAR 0 7
3101: PUSH
3102: LD_INT 2
3104: ARRAY
3105: PPUSH
3106: CALL_OW 428
3110: PUSH
3111: LD_INT 0
3113: EQUAL
3114: IFFALSE 3167
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
3116: LD_VAR 0 1
3120: PPUSH
3121: LD_VAR 0 7
3125: PUSH
3126: LD_INT 1
3128: ARRAY
3129: PPUSH
3130: LD_VAR 0 7
3134: PUSH
3135: LD_INT 2
3137: ARRAY
3138: PPUSH
3139: LD_VAR 0 3
3143: PPUSH
3144: CALL_OW 48
// result := IsPlaced ( unit ) ;
3148: LD_ADDR_VAR 0 4
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 305
3162: ST_TO_ADDR
// exit ;
3163: POP
3164: POP
3165: GO 3171
// end ; end ;
3167: GO 3046
3169: POP
3170: POP
// end ; end_of_file
3171: LD_VAR 0 4
3175: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
3176: LD_INT 0
3178: PPUSH
3179: PPUSH
// uc_side := 2 ;
3180: LD_ADDR_OWVAR 20
3184: PUSH
3185: LD_INT 2
3187: ST_TO_ADDR
// uc_nation := 2 ;
3188: LD_ADDR_OWVAR 21
3192: PUSH
3193: LD_INT 2
3195: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
3196: LD_ADDR_EXP 18
3200: PUSH
3201: LD_STRING Heike
3203: PPUSH
3204: LD_EXP 1
3208: NOT
3209: PPUSH
3210: LD_EXP 2
3214: PPUSH
3215: CALL 322 0 3
3219: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
3220: LD_ADDR_EXP 21
3224: PUSH
3225: LD_STRING Ibrahim
3227: PPUSH
3228: LD_EXP 1
3232: NOT
3233: PPUSH
3234: LD_EXP 2
3238: PPUSH
3239: CALL 322 0 3
3243: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
3244: LD_ADDR_EXP 19
3248: PUSH
3249: LD_STRING Givi
3251: PPUSH
3252: LD_EXP 1
3256: NOT
3257: PPUSH
3258: LD_EXP 2
3262: PPUSH
3263: CALL 322 0 3
3267: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
3268: LD_ADDR_EXP 22
3272: PUSH
3273: LD_STRING Kamil
3275: PPUSH
3276: LD_EXP 1
3280: NOT
3281: PPUSH
3282: LD_EXP 2
3286: PPUSH
3287: CALL 322 0 3
3291: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
3292: LD_ADDR_EXP 23
3296: PUSH
3297: LD_STRING Kaia
3299: PPUSH
3300: LD_EXP 1
3304: NOT
3305: PPUSH
3306: LD_EXP 2
3310: PPUSH
3311: CALL 322 0 3
3315: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
3316: LD_ADDR_EXP 24
3320: PUSH
3321: LD_STRING Sophia
3323: PPUSH
3324: LD_EXP 1
3328: NOT
3329: PPUSH
3330: LD_EXP 2
3334: PPUSH
3335: CALL 322 0 3
3339: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
3340: LD_ADDR_EXP 25
3344: PUSH
3345: LD_STRING Markov
3347: PPUSH
3348: LD_EXP 1
3352: NOT
3353: PPUSH
3354: LD_EXP 2
3358: PPUSH
3359: CALL 322 0 3
3363: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
3364: LD_ADDR_EXP 30
3368: PUSH
3369: LD_STRING Aviradze
3371: PPUSH
3372: LD_EXP 1
3376: NOT
3377: PPUSH
3378: LD_EXP 2
3382: PPUSH
3383: CALL 322 0 3
3387: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
3388: LD_ADDR_EXP 29
3392: PUSH
3393: LD_STRING Kurt
3395: PPUSH
3396: LD_EXP 1
3400: NOT
3401: PPUSH
3402: LD_EXP 2
3406: PPUSH
3407: CALL 322 0 3
3411: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
3412: LD_ADDR_EXP 20
3416: PUSH
3417: LD_STRING Mike
3419: PPUSH
3420: LD_EXP 1
3424: NOT
3425: PPUSH
3426: LD_EXP 2
3430: PPUSH
3431: CALL 322 0 3
3435: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
3436: LD_ADDR_EXP 27
3440: PUSH
3441: LD_STRING Olaf
3443: PPUSH
3444: LD_INT 0
3446: PPUSH
3447: LD_STRING 
3449: PPUSH
3450: CALL 322 0 3
3454: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
3455: LD_ADDR_EXP 31
3459: PUSH
3460: LD_STRING 04_2_others
3462: PPUSH
3463: CALL_OW 31
3467: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
3468: LD_ADDR_EXP 33
3472: PUSH
3473: LD_STRING 04_2_apes
3475: PPUSH
3476: CALL_OW 31
3480: ST_TO_ADDR
// if hasFlamethrower then
3481: LD_EXP 3
3485: IFFALSE 3716
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
3487: LD_INT 70
3489: PPUSH
3490: LD_INT 2
3492: PPUSH
3493: LD_INT 2
3495: PPUSH
3496: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
3500: LD_ADDR_EXP 32
3504: PUSH
3505: LD_INT 13
3507: PUSH
3508: LD_INT 1
3510: PUSH
3511: LD_INT 1
3513: PUSH
3514: LD_INT 27
3516: PUSH
3517: LD_INT 2
3519: PUSH
3520: LD_INT 1000
3522: PUSH
3523: LD_INT 0
3525: PUSH
3526: LD_INT 0
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 13
3544: PUSH
3545: LD_INT 1
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: LD_INT 25
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: LD_INT 1000
3559: PUSH
3560: LD_INT 0
3562: PUSH
3563: LD_INT 0
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 13
3581: PUSH
3582: LD_INT 1
3584: PUSH
3585: LD_INT 1
3587: PUSH
3588: LD_INT 26
3590: PUSH
3591: LD_INT 2
3593: PUSH
3594: LD_INT 1000
3596: PUSH
3597: LD_INT 0
3599: PUSH
3600: LD_INT 0
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 13
3618: PUSH
3619: LD_INT 1
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: LD_INT 27
3627: PUSH
3628: LD_INT 2
3630: PUSH
3631: LD_INT 1000
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: LD_INT 0
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 13
3655: PUSH
3656: LD_INT 1
3658: PUSH
3659: LD_INT 1
3661: PUSH
3662: LD_INT 32
3664: PUSH
3665: LD_INT 2
3667: PUSH
3668: LD_INT 1000
3670: PUSH
3671: LD_INT 0
3673: PUSH
3674: LD_INT 60
3676: PUSH
3677: LD_INT 40
3679: PUSH
3680: LD_INT 20
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: PUSH
3688: LD_OWVAR 67
3692: ARRAY
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: ST_TO_ADDR
// end else
3714: GO 3930
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
3716: LD_ADDR_EXP 32
3720: PUSH
3721: LD_INT 13
3723: PUSH
3724: LD_INT 1
3726: PUSH
3727: LD_INT 1
3729: PUSH
3730: LD_INT 25
3732: PUSH
3733: LD_INT 2
3735: PUSH
3736: LD_INT 1000
3738: PUSH
3739: LD_INT 0
3741: PUSH
3742: LD_INT 0
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 13
3760: PUSH
3761: LD_INT 1
3763: PUSH
3764: LD_INT 1
3766: PUSH
3767: LD_INT 27
3769: PUSH
3770: LD_INT 2
3772: PUSH
3773: LD_INT 1000
3775: PUSH
3776: LD_INT 0
3778: PUSH
3779: LD_INT 0
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 13
3797: PUSH
3798: LD_INT 1
3800: PUSH
3801: LD_INT 1
3803: PUSH
3804: LD_INT 24
3806: PUSH
3807: LD_INT 2
3809: PUSH
3810: LD_INT 1000
3812: PUSH
3813: LD_INT 0
3815: PUSH
3816: LD_INT 0
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 13
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: LD_INT 1
3840: PUSH
3841: LD_INT 27
3843: PUSH
3844: LD_INT 2
3846: PUSH
3847: LD_INT 1000
3849: PUSH
3850: LD_INT 0
3852: PUSH
3853: LD_INT 0
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 13
3871: PUSH
3872: LD_INT 1
3874: PUSH
3875: LD_INT 1
3877: PUSH
3878: LD_INT 32
3880: PUSH
3881: LD_INT 2
3883: PUSH
3884: LD_INT 1000
3886: PUSH
3887: LD_INT 0
3889: PUSH
3890: LD_INT 50
3892: PUSH
3893: LD_INT 30
3895: PUSH
3896: LD_INT 20
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: PUSH
3904: LD_OWVAR 67
3908: ARRAY
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: ST_TO_ADDR
// end ; uc_side := 5 ;
3930: LD_ADDR_OWVAR 20
3934: PUSH
3935: LD_INT 5
3937: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
3938: LD_ADDR_EXP 26
3942: PUSH
3943: LD_STRING Abdul
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: LD_STRING 
3951: PPUSH
3952: CALL 322 0 3
3956: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
3957: LD_ADDR_EXP 28
3961: PUSH
3962: LD_STRING Omar
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: LD_STRING 
3970: PPUSH
3971: CALL 322 0 3
3975: ST_TO_ADDR
// end ;
3976: LD_VAR 0 1
3980: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
3981: LD_INT 0
3983: PPUSH
3984: PPUSH
3985: PPUSH
3986: PPUSH
3987: PPUSH
// pfx := 04_1_ ;
3988: LD_ADDR_VAR 0 2
3992: PUSH
3993: LD_STRING 04_1_
3995: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3996: LD_INT 35
3998: PPUSH
3999: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
4003: LD_INT 3
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 428
4013: NOT
4014: IFFALSE 3996
// tmp := [ ] ;
4016: LD_ADDR_VAR 0 4
4020: PUSH
4021: EMPTY
4022: ST_TO_ADDR
// uc_side := 5 ;
4023: LD_ADDR_OWVAR 20
4027: PUSH
4028: LD_INT 5
4030: ST_TO_ADDR
// uc_nation := 2 ;
4031: LD_ADDR_OWVAR 21
4035: PUSH
4036: LD_INT 2
4038: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
4039: LD_ADDR_EXP 30
4043: PUSH
4044: LD_STRING Aviradze_L
4046: PPUSH
4047: LD_EXP 1
4051: NOT
4052: PPUSH
4053: LD_VAR 0 2
4057: PPUSH
4058: CALL 322 0 3
4062: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
4063: LD_EXP 30
4067: PPUSH
4068: LD_INT 2
4070: PPUSH
4071: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
4075: LD_EXP 30
4079: PPUSH
4080: LD_INT 14
4082: PPUSH
4083: LD_INT 0
4085: PPUSH
4086: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
4090: LD_EXP 30
4094: PPUSH
4095: LD_INT 8
4097: PPUSH
4098: LD_INT 6
4100: PPUSH
4101: CALL_OW 111
// AddComHold ( Aviradze ) ;
4105: LD_EXP 30
4109: PPUSH
4110: CALL_OW 200
// tmp := [ Aviradze ] ;
4114: LD_ADDR_VAR 0 4
4118: PUSH
4119: LD_EXP 30
4123: PUSH
4124: EMPTY
4125: LIST
4126: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4127: LD_INT 70
4129: PPUSH
4130: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
4134: LD_STRING Ibrahim_L
4136: PPUSH
4137: LD_EXP 1
4141: NOT
4142: PPUSH
4143: LD_VAR 0 2
4147: PPUSH
4148: CALL 322 0 3
4152: IFFALSE 4252
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
4154: LD_ADDR_EXP 21
4158: PUSH
4159: LD_STRING Ibrahim_L
4161: PPUSH
4162: LD_EXP 1
4166: NOT
4167: PPUSH
4168: LD_VAR 0 2
4172: PPUSH
4173: CALL 322 0 3
4177: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
4178: LD_EXP 21
4182: PPUSH
4183: LD_INT 2
4185: PPUSH
4186: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
4190: LD_EXP 21
4194: PPUSH
4195: LD_INT 14
4197: PPUSH
4198: LD_INT 0
4200: PPUSH
4201: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
4205: LD_EXP 21
4209: PPUSH
4210: LD_INT 8
4212: PPUSH
4213: LD_INT 7
4215: PPUSH
4216: CALL_OW 111
// AddComHold ( Ibrahim ) ;
4220: LD_EXP 21
4224: PPUSH
4225: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
4229: LD_ADDR_VAR 0 4
4233: PUSH
4234: LD_VAR 0 4
4238: PUSH
4239: LD_EXP 21
4243: ADD
4244: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4245: LD_INT 70
4247: PPUSH
4248: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
4252: LD_STRING Kaia_L
4254: PPUSH
4255: LD_EXP 1
4259: NOT
4260: PPUSH
4261: LD_VAR 0 2
4265: PPUSH
4266: CALL 322 0 3
4270: IFFALSE 4370
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
4272: LD_ADDR_EXP 23
4276: PUSH
4277: LD_STRING Kaia_L
4279: PPUSH
4280: LD_EXP 1
4284: NOT
4285: PPUSH
4286: LD_VAR 0 2
4290: PPUSH
4291: CALL 322 0 3
4295: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
4296: LD_EXP 23
4300: PPUSH
4301: LD_INT 2
4303: PPUSH
4304: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
4308: LD_EXP 23
4312: PPUSH
4313: LD_INT 14
4315: PPUSH
4316: LD_INT 0
4318: PPUSH
4319: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
4323: LD_EXP 23
4327: PPUSH
4328: LD_INT 8
4330: PPUSH
4331: LD_INT 7
4333: PPUSH
4334: CALL_OW 111
// AddComHold ( Kaia ) ;
4338: LD_EXP 23
4342: PPUSH
4343: CALL_OW 200
// tmp := tmp ^ Kaia ;
4347: LD_ADDR_VAR 0 4
4351: PUSH
4352: LD_VAR 0 4
4356: PUSH
4357: LD_EXP 23
4361: ADD
4362: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4363: LD_INT 70
4365: PPUSH
4366: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
4370: LD_STRING Kamil_L
4372: PPUSH
4373: LD_EXP 1
4377: NOT
4378: PPUSH
4379: LD_VAR 0 2
4383: PPUSH
4384: CALL 322 0 3
4388: IFFALSE 4488
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
4390: LD_ADDR_EXP 22
4394: PUSH
4395: LD_STRING Kamil_L
4397: PPUSH
4398: LD_EXP 1
4402: NOT
4403: PPUSH
4404: LD_VAR 0 2
4408: PPUSH
4409: CALL 322 0 3
4413: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
4414: LD_EXP 22
4418: PPUSH
4419: LD_INT 2
4421: PPUSH
4422: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
4426: LD_EXP 22
4430: PPUSH
4431: LD_INT 14
4433: PPUSH
4434: LD_INT 0
4436: PPUSH
4437: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
4441: LD_EXP 22
4445: PPUSH
4446: LD_INT 8
4448: PPUSH
4449: LD_INT 7
4451: PPUSH
4452: CALL_OW 111
// AddComHold ( Kamil ) ;
4456: LD_EXP 22
4460: PPUSH
4461: CALL_OW 200
// tmp := tmp ^ Kamil ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: LD_VAR 0 4
4474: PUSH
4475: LD_EXP 22
4479: ADD
4480: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4481: LD_INT 70
4483: PPUSH
4484: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
4488: LD_STRING Sophia_L
4490: PPUSH
4491: LD_EXP 1
4495: NOT
4496: PPUSH
4497: LD_VAR 0 2
4501: PPUSH
4502: CALL 322 0 3
4506: IFFALSE 4606
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
4508: LD_ADDR_EXP 24
4512: PUSH
4513: LD_STRING Sophia_L
4515: PPUSH
4516: LD_EXP 1
4520: NOT
4521: PPUSH
4522: LD_VAR 0 2
4526: PPUSH
4527: CALL 322 0 3
4531: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
4532: LD_EXP 24
4536: PPUSH
4537: LD_INT 2
4539: PPUSH
4540: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
4544: LD_EXP 24
4548: PPUSH
4549: LD_INT 14
4551: PPUSH
4552: LD_INT 0
4554: PPUSH
4555: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
4559: LD_EXP 24
4563: PPUSH
4564: LD_INT 9
4566: PPUSH
4567: LD_INT 6
4569: PPUSH
4570: CALL_OW 111
// AddComHold ( Sophia ) ;
4574: LD_EXP 24
4578: PPUSH
4579: CALL_OW 200
// tmp := tmp ^ Sophia ;
4583: LD_ADDR_VAR 0 4
4587: PUSH
4588: LD_VAR 0 4
4592: PUSH
4593: LD_EXP 24
4597: ADD
4598: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4599: LD_INT 70
4601: PPUSH
4602: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
4606: LD_ADDR_VAR 0 5
4610: PUSH
4611: LD_STRING 04_1_others_L
4613: PPUSH
4614: CALL_OW 31
4618: ST_TO_ADDR
// if tmp2 then
4619: LD_VAR 0 5
4623: IFFALSE 4720
// for i in tmp2 do
4625: LD_ADDR_VAR 0 3
4629: PUSH
4630: LD_VAR 0 5
4634: PUSH
4635: FOR_IN
4636: IFFALSE 4718
// begin SetDir ( i , 2 ) ;
4638: LD_VAR 0 3
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
4650: LD_VAR 0 3
4654: PPUSH
4655: LD_INT 14
4657: PPUSH
4658: LD_INT 0
4660: PPUSH
4661: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
4665: LD_ADDR_EXP 31
4669: PUSH
4670: LD_EXP 31
4674: PPUSH
4675: LD_EXP 31
4679: PUSH
4680: LD_INT 1
4682: PLUS
4683: PPUSH
4684: LD_VAR 0 3
4688: PPUSH
4689: CALL_OW 1
4693: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_INT 17
4701: PPUSH
4702: LD_INT 14
4704: PPUSH
4705: CALL_OW 111
// wait ( 0 0$2 ) ;
4709: LD_INT 70
4711: PPUSH
4712: CALL_OW 67
// end ;
4716: GO 4635
4718: POP
4719: POP
// for i in tmp union tmp2 do
4720: LD_ADDR_VAR 0 3
4724: PUSH
4725: LD_VAR 0 4
4729: PUSH
4730: LD_VAR 0 5
4734: UNION
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4767
// begin SetSide ( i , 2 ) ;
4739: LD_VAR 0 3
4743: PPUSH
4744: LD_INT 2
4746: PPUSH
4747: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
4751: LD_VAR 0 3
4755: PPUSH
4756: LD_EXP 18
4760: PPUSH
4761: CALL_OW 112
// end ;
4765: GO 4736
4767: POP
4768: POP
// end ; end_of_file
4769: LD_VAR 0 1
4773: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
4778: PPUSH
// uc_side := 3 ;
4779: LD_ADDR_OWVAR 20
4783: PUSH
4784: LD_INT 3
4786: ST_TO_ADDR
// uc_nation := 3 ;
4787: LD_ADDR_OWVAR 21
4791: PUSH
4792: LD_INT 3
4794: ST_TO_ADDR
// crossRoadGuard := [ ] ;
4795: LD_ADDR_EXP 34
4799: PUSH
4800: EMPTY
4801: ST_TO_ADDR
// oilBaseGuard := [ ] ;
4802: LD_ADDR_EXP 35
4806: PUSH
4807: EMPTY
4808: ST_TO_ADDR
// ruConvoySquad := [ ] ;
4809: LD_ADDR_EXP 38
4813: PUSH
4814: EMPTY
4815: ST_TO_ADDR
// for i := 1 to 2 do
4816: LD_ADDR_VAR 0 2
4820: PUSH
4821: DOUBLE
4822: LD_INT 1
4824: DEC
4825: ST_TO_ADDR
4826: LD_INT 2
4828: PUSH
4829: FOR_TO
4830: IFFALSE 4965
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4832: LD_INT 0
4834: PPUSH
4835: LD_INT 1
4837: PPUSH
4838: LD_INT 3
4840: PUSH
4841: LD_INT 4
4843: PUSH
4844: LD_INT 5
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_OWVAR 67
4856: ARRAY
4857: PPUSH
4858: CALL_OW 380
// un := CreateHuman ;
4862: LD_ADDR_VAR 0 3
4866: PUSH
4867: CALL_OW 44
4871: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
4872: LD_ADDR_EXP 34
4876: PUSH
4877: LD_EXP 34
4881: PPUSH
4882: LD_EXP 34
4886: PUSH
4887: LD_INT 1
4889: PLUS
4890: PPUSH
4891: LD_VAR 0 3
4895: PPUSH
4896: CALL_OW 1
4900: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: LD_INT 100
4908: PPUSH
4909: LD_INT 63
4911: PPUSH
4912: LD_INT 3
4914: PPUSH
4915: LD_INT 0
4917: PPUSH
4918: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
4922: LD_VAR 0 3
4926: PPUSH
4927: LD_INT 97
4929: PPUSH
4930: LD_INT 64
4932: PPUSH
4933: CALL_OW 428
4937: PUSH
4938: LD_INT 98
4940: PPUSH
4941: LD_INT 58
4943: PPUSH
4944: CALL_OW 428
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_VAR 0 2
4957: ARRAY
4958: PPUSH
4959: CALL_OW 120
// end ;
4963: GO 4829
4965: POP
4966: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
4967: LD_INT 51
4969: PPUSH
4970: LD_INT 77
4972: PPUSH
4973: CALL_OW 428
4977: PPUSH
4978: CALL_OW 274
4982: PPUSH
4983: LD_INT 1
4985: PPUSH
4986: LD_INT 120
4988: PPUSH
4989: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
4993: LD_INT 10
4995: PPUSH
4996: CALL_OW 274
5000: PPUSH
5001: LD_INT 2
5003: PPUSH
5004: LD_INT 300
5006: PPUSH
5007: CALL_OW 277
// for i := 1 to 2 do
5011: LD_ADDR_VAR 0 2
5015: PUSH
5016: DOUBLE
5017: LD_INT 1
5019: DEC
5020: ST_TO_ADDR
5021: LD_INT 2
5023: PUSH
5024: FOR_TO
5025: IFFALSE 5139
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5027: LD_INT 0
5029: PPUSH
5030: LD_INT 1
5032: PPUSH
5033: LD_INT 3
5035: PUSH
5036: LD_INT 4
5038: PUSH
5039: LD_INT 5
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: PUSH
5047: LD_OWVAR 67
5051: ARRAY
5052: PPUSH
5053: CALL_OW 380
// un := CreateHuman ;
5057: LD_ADDR_VAR 0 3
5061: PUSH
5062: CALL_OW 44
5066: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
5067: LD_ADDR_EXP 35
5071: PUSH
5072: LD_EXP 35
5076: PPUSH
5077: LD_EXP 35
5081: PUSH
5082: LD_INT 1
5084: PLUS
5085: PPUSH
5086: LD_VAR 0 3
5090: PPUSH
5091: CALL_OW 1
5095: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
5096: LD_VAR 0 3
5100: PPUSH
5101: LD_INT 198
5103: PPUSH
5104: LD_INT 106
5106: PPUSH
5107: CALL_OW 428
5111: PUSH
5112: LD_INT 205
5114: PPUSH
5115: LD_INT 114
5117: PPUSH
5118: CALL_OW 428
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: CALL_OW 52
// end ;
5137: GO 5024
5139: POP
5140: POP
// for i := 1 to 2 do
5141: LD_ADDR_VAR 0 2
5145: PUSH
5146: DOUBLE
5147: LD_INT 1
5149: DEC
5150: ST_TO_ADDR
5151: LD_INT 2
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5232
// begin PrepareHuman ( false , 2 , 3 ) ;
5157: LD_INT 0
5159: PPUSH
5160: LD_INT 2
5162: PPUSH
5163: LD_INT 3
5165: PPUSH
5166: CALL_OW 380
// un := CreateHuman ;
5170: LD_ADDR_VAR 0 3
5174: PUSH
5175: CALL_OW 44
5179: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
5180: LD_ADDR_EXP 35
5184: PUSH
5185: LD_EXP 35
5189: PPUSH
5190: LD_EXP 35
5194: PUSH
5195: LD_INT 1
5197: PLUS
5198: PPUSH
5199: LD_VAR 0 3
5203: PPUSH
5204: CALL_OW 1
5208: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
5209: LD_VAR 0 3
5213: PPUSH
5214: LD_INT 204
5216: PPUSH
5217: LD_INT 108
5219: PPUSH
5220: LD_INT 2
5222: PPUSH
5223: LD_INT 0
5225: PPUSH
5226: CALL_OW 50
// end ;
5230: GO 5154
5232: POP
5233: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5234: LD_ADDR_VAR 0 2
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_INT 4
5246: PUSH
5247: LD_INT 5
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: PUSH
5258: LD_OWVAR 67
5262: ARRAY
5263: PUSH
5264: FOR_TO
5265: IFFALSE 5386
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5267: LD_INT 0
5269: PPUSH
5270: LD_INT 1
5272: PUSH
5273: LD_INT 1
5275: PUSH
5276: LD_INT 2
5278: PUSH
5279: LD_INT 4
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: PUSH
5292: LD_INT 1
5294: PPUSH
5295: LD_INT 5
5297: PPUSH
5298: CALL_OW 12
5302: ARRAY
5303: PPUSH
5304: LD_INT 3
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: LD_INT 5
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: PUSH
5318: LD_OWVAR 67
5322: ARRAY
5323: PPUSH
5324: CALL_OW 380
// un := CreateHuman ;
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: CALL_OW 44
5337: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
5338: LD_VAR 0 3
5342: PPUSH
5343: LD_INT 11
5345: PPUSH
5346: LD_INT 0
5348: PPUSH
5349: CALL 2985 0 3
5353: IFFALSE 5384
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
5355: LD_ADDR_EXP 36
5359: PUSH
5360: LD_EXP 36
5364: PPUSH
5365: LD_EXP 36
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PPUSH
5374: LD_VAR 0 3
5378: PPUSH
5379: CALL_OW 1
5383: ST_TO_ADDR
// end ;
5384: GO 5264
5386: POP
5387: POP
// for i := 1 to 3 do
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: DOUBLE
5394: LD_INT 1
5396: DEC
5397: ST_TO_ADDR
5398: LD_INT 3
5400: PUSH
5401: FOR_TO
5402: IFFALSE 5492
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
5404: LD_INT 0
5406: PPUSH
5407: LD_INT 1
5409: PPUSH
5410: LD_INT 3
5412: PUSH
5413: LD_INT 4
5415: PUSH
5416: LD_INT 4
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_OWVAR 67
5428: ARRAY
5429: PPUSH
5430: CALL_OW 380
// un := CreateHuman ;
5434: LD_ADDR_VAR 0 3
5438: PUSH
5439: CALL_OW 44
5443: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
5444: LD_VAR 0 3
5448: PPUSH
5449: LD_INT 11
5451: PPUSH
5452: LD_INT 0
5454: PPUSH
5455: CALL 2985 0 3
5459: IFFALSE 5490
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
5461: LD_ADDR_EXP 36
5465: PUSH
5466: LD_EXP 36
5470: PPUSH
5471: LD_EXP 36
5475: PUSH
5476: LD_INT 1
5478: PLUS
5479: PPUSH
5480: LD_VAR 0 3
5484: PPUSH
5485: CALL_OW 1
5489: ST_TO_ADDR
// end ;
5490: GO 5401
5492: POP
5493: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: DOUBLE
5500: LD_INT 1
5502: DEC
5503: ST_TO_ADDR
5504: LD_INT 5
5506: PUSH
5507: LD_INT 6
5509: PUSH
5510: LD_INT 7
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: PUSH
5518: LD_OWVAR 67
5522: ARRAY
5523: PUSH
5524: FOR_TO
5525: IFFALSE 5646
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5527: LD_INT 0
5529: PPUSH
5530: LD_INT 1
5532: PUSH
5533: LD_INT 1
5535: PUSH
5536: LD_INT 2
5538: PUSH
5539: LD_INT 4
5541: PUSH
5542: LD_INT 1
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: PUSH
5552: LD_INT 1
5554: PPUSH
5555: LD_INT 5
5557: PPUSH
5558: CALL_OW 12
5562: ARRAY
5563: PPUSH
5564: LD_INT 3
5566: PUSH
5567: LD_INT 4
5569: PUSH
5570: LD_INT 5
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: LD_OWVAR 67
5582: ARRAY
5583: PPUSH
5584: CALL_OW 380
// un := CreateHuman ;
5588: LD_ADDR_VAR 0 3
5592: PUSH
5593: CALL_OW 44
5597: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
5598: LD_VAR 0 3
5602: PPUSH
5603: LD_INT 15
5605: PPUSH
5606: LD_INT 0
5608: PPUSH
5609: CALL 2985 0 3
5613: IFFALSE 5644
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
5615: LD_ADDR_EXP 37
5619: PUSH
5620: LD_EXP 37
5624: PPUSH
5625: LD_EXP 37
5629: PUSH
5630: LD_INT 1
5632: PLUS
5633: PPUSH
5634: LD_VAR 0 3
5638: PPUSH
5639: CALL_OW 1
5643: ST_TO_ADDR
// end ;
5644: GO 5524
5646: POP
5647: POP
// end ;
5648: LD_VAR 0 1
5652: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
5653: LD_INT 0
5655: PPUSH
5656: PPUSH
5657: PPUSH
// uc_side := 3 ;
5658: LD_ADDR_OWVAR 20
5662: PUSH
5663: LD_INT 3
5665: ST_TO_ADDR
// uc_nation := 3 ;
5666: LD_ADDR_OWVAR 21
5670: PUSH
5671: LD_INT 3
5673: ST_TO_ADDR
// for i := 1 to 6 do
5674: LD_ADDR_VAR 0 2
5678: PUSH
5679: DOUBLE
5680: LD_INT 1
5682: DEC
5683: ST_TO_ADDR
5684: LD_INT 6
5686: PUSH
5687: FOR_TO
5688: IFFALSE 5767
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
5690: LD_INT 0
5692: PPUSH
5693: LD_INT 1
5695: PUSH
5696: LD_INT 4
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PUSH
5703: LD_INT 1
5705: PPUSH
5706: LD_INT 2
5708: PPUSH
5709: CALL_OW 12
5713: ARRAY
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 380
// un := CreateHuman ;
5722: LD_ADDR_VAR 0 3
5726: PUSH
5727: CALL_OW 44
5731: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
5732: LD_VAR 0 3
5736: PPUSH
5737: LD_INT 54
5739: PPUSH
5740: LD_INT 88
5742: PPUSH
5743: LD_INT 12
5745: PPUSH
5746: LD_INT 0
5748: PPUSH
5749: CALL_OW 50
// SetLives ( un , 1 ) ;
5753: LD_VAR 0 3
5757: PPUSH
5758: LD_INT 1
5760: PPUSH
5761: CALL_OW 234
// end ;
5765: GO 5687
5767: POP
5768: POP
// uc_side := 3 ;
5769: LD_ADDR_OWVAR 20
5773: PUSH
5774: LD_INT 3
5776: ST_TO_ADDR
// uc_nation := 0 ;
5777: LD_ADDR_OWVAR 21
5781: PUSH
5782: LD_INT 0
5784: ST_TO_ADDR
// apeSoldGroup := [ ] ;
5785: LD_ADDR_EXP 39
5789: PUSH
5790: EMPTY
5791: ST_TO_ADDR
// apeEngGroup := [ ] ;
5792: LD_ADDR_EXP 40
5796: PUSH
5797: EMPTY
5798: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5799: LD_ADDR_VAR 0 2
5803: PUSH
5804: DOUBLE
5805: LD_INT 1
5807: DEC
5808: ST_TO_ADDR
5809: LD_INT 4
5811: PUSH
5812: LD_INT 5
5814: PUSH
5815: LD_INT 6
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: PUSH
5823: LD_OWVAR 67
5827: ARRAY
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5944
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5832: LD_INT 0
5834: PPUSH
5835: LD_INT 15
5837: PPUSH
5838: LD_INT 3
5840: PUSH
5841: LD_INT 4
5843: PUSH
5844: LD_INT 5
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: PUSH
5852: LD_OWVAR 67
5856: ARRAY
5857: PPUSH
5858: CALL_OW 380
// un := CreateHuman ;
5862: LD_ADDR_VAR 0 3
5866: PUSH
5867: CALL_OW 44
5871: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
5872: LD_ADDR_EXP 39
5876: PUSH
5877: LD_EXP 39
5881: PPUSH
5882: LD_EXP 39
5886: PUSH
5887: LD_INT 1
5889: PLUS
5890: PPUSH
5891: LD_VAR 0 3
5895: PPUSH
5896: CALL_OW 1
5900: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5901: LD_VAR 0 3
5905: PPUSH
5906: LD_INT 0
5908: PPUSH
5909: LD_INT 5
5911: PPUSH
5912: CALL_OW 12
5916: PPUSH
5917: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
5921: LD_VAR 0 3
5925: PPUSH
5926: LD_INT 56
5928: PPUSH
5929: LD_INT 82
5931: PPUSH
5932: LD_INT 6
5934: PPUSH
5935: LD_INT 0
5937: PPUSH
5938: CALL_OW 50
// end ;
5942: GO 5829
5944: POP
5945: POP
// for i := 1 to 2 do
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: DOUBLE
5952: LD_INT 1
5954: DEC
5955: ST_TO_ADDR
5956: LD_INT 2
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6036
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
5962: LD_INT 0
5964: PPUSH
5965: LD_INT 16
5967: PPUSH
5968: LD_INT 4
5970: PPUSH
5971: CALL_OW 380
// un := CreateHuman ;
5975: LD_ADDR_VAR 0 3
5979: PUSH
5980: CALL_OW 44
5984: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
5985: LD_ADDR_EXP 40
5989: PUSH
5990: LD_EXP 40
5994: PPUSH
5995: LD_EXP 40
5999: PUSH
6000: LD_INT 1
6002: PLUS
6003: PPUSH
6004: LD_VAR 0 3
6008: PPUSH
6009: CALL_OW 1
6013: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
6014: LD_VAR 0 3
6018: PPUSH
6019: LD_INT 51
6021: PPUSH
6022: LD_INT 77
6024: PPUSH
6025: CALL_OW 428
6029: PPUSH
6030: CALL_OW 52
// end ;
6034: GO 5959
6036: POP
6037: POP
// end ;
6038: LD_VAR 0 1
6042: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
6043: LD_EXP 39
6047: PPUSH
6048: LD_INT 3
6050: PUSH
6051: LD_INT 24
6053: PUSH
6054: LD_INT 600
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 3
6067: PUSH
6068: LD_INT 54
6070: PUSH
6071: EMPTY
6072: LIST
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PPUSH
6082: CALL_OW 72
6086: PUSH
6087: LD_INT 66
6089: PPUSH
6090: LD_INT 89
6092: PPUSH
6093: CALL_OW 428
6097: PPUSH
6098: CALL_OW 302
6102: AND
6103: IFFALSE 6188
6105: GO 6107
6107: DISABLE
6108: LD_INT 0
6110: PPUSH
// begin enable ;
6111: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
6112: LD_ADDR_VAR 0 1
6116: PUSH
6117: LD_EXP 39
6121: PPUSH
6122: LD_INT 3
6124: PUSH
6125: LD_INT 24
6127: PUSH
6128: LD_INT 600
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 3
6141: PUSH
6142: LD_INT 54
6144: PUSH
6145: EMPTY
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PPUSH
6156: CALL_OW 72
6160: PUSH
6161: FOR_IN
6162: IFFALSE 6186
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
6164: LD_VAR 0 1
6168: PPUSH
6169: LD_INT 66
6171: PPUSH
6172: LD_INT 89
6174: PPUSH
6175: CALL_OW 428
6179: PPUSH
6180: CALL_OW 120
6184: GO 6161
6186: POP
6187: POP
// end ;
6188: PPOPN 1
6190: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
6191: LD_INT 22
6193: PUSH
6194: LD_INT 2
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 92
6203: PUSH
6204: LD_INT 54
6206: PUSH
6207: LD_INT 77
6209: PUSH
6210: LD_INT 8
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: IFFALSE 6291
6229: GO 6231
6231: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
6232: LD_EXP 40
6236: PPUSH
6237: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
6241: LD_EXP 40
6245: PPUSH
6246: LD_INT 22
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 92
6258: PUSH
6259: LD_INT 54
6261: PUSH
6262: LD_INT 77
6264: PUSH
6265: LD_INT 8
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 69
6282: PUSH
6283: LD_INT 1
6285: ARRAY
6286: PPUSH
6287: CALL_OW 175
// end ;
6291: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
6292: LD_INT 0
6294: PPUSH
6295: PPUSH
6296: PPUSH
6297: PPUSH
6298: PPUSH
6299: PPUSH
6300: PPUSH
6301: PPUSH
6302: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
6303: LD_ADDR_VAR 0 3
6307: PUSH
6308: LD_INT 1
6310: PPUSH
6311: LD_INT 3
6313: PPUSH
6314: CALL_OW 12
6318: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_INT 16
6326: PUSH
6327: LD_INT 17
6329: PUSH
6330: LD_INT 19
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_VAR 0 3
6342: ARRAY
6343: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
6344: LD_ADDR_VAR 0 7
6348: PUSH
6349: LD_INT 159
6351: PUSH
6352: LD_INT 25
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 137
6361: PUSH
6362: LD_INT 37
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 123
6371: PUSH
6372: LD_INT 55
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: LD_INT 115
6381: PUSH
6382: LD_INT 71
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 106
6391: PUSH
6392: LD_INT 88
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 97
6401: PUSH
6402: LD_INT 114
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 75
6411: PUSH
6412: LD_INT 146
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: LD_INT 206
6430: PUSH
6431: LD_INT 135
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 184
6440: PUSH
6441: LD_INT 111
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 154
6450: PUSH
6451: LD_INT 97
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 122
6460: PUSH
6461: LD_INT 80
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 109
6470: PUSH
6471: LD_INT 78
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 97
6480: PUSH
6481: LD_INT 113
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 75
6490: PUSH
6491: LD_INT 147
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 185
6509: PUSH
6510: LD_INT 72
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: LD_INT 171
6519: PUSH
6520: LD_INT 83
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 161
6529: PUSH
6530: LD_INT 99
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 125
6539: PUSH
6540: LD_INT 82
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 105
6549: PUSH
6550: LD_INT 90
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 96
6559: PUSH
6560: LD_INT 116
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 75
6569: PUSH
6570: LD_INT 147
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: PUSH
6591: LD_VAR 0 3
6595: ARRAY
6596: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
6597: LD_ADDR_VAR 0 4
6601: PUSH
6602: LD_INT 4
6604: PUSH
6605: LD_INT 5
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: LD_VAR 0 3
6620: ARRAY
6621: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
6622: LD_ADDR_VAR 0 6
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 20
6632: PUSH
6633: LD_INT 21
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: PUSH
6641: LD_VAR 0 3
6645: ARRAY
6646: ST_TO_ADDR
// for i := 1 to 2 do
6647: LD_ADDR_VAR 0 2
6651: PUSH
6652: DOUBLE
6653: LD_INT 1
6655: DEC
6656: ST_TO_ADDR
6657: LD_INT 2
6659: PUSH
6660: FOR_TO
6661: IFFALSE 6679
// EraseResourceArea ( i , outerSpawnArea ) ;
6663: LD_VAR 0 2
6667: PPUSH
6668: LD_VAR 0 6
6672: PPUSH
6673: CALL_OW 286
6677: GO 6660
6679: POP
6680: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
6681: LD_VAR 0 6
6685: PPUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 21
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PUSH
6699: LD_INT 21
6701: PUSH
6702: LD_INT 2
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: LD_INT 21
6711: PUSH
6712: LD_INT 3
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: PPUSH
6725: CALL_OW 70
6729: IFFALSE 6944
// repeat wait ( 0 0$1 ) ;
6731: LD_INT 35
6733: PPUSH
6734: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
6738: LD_VAR 0 6
6742: PPUSH
6743: LD_INT 2
6745: PUSH
6746: LD_INT 21
6748: PUSH
6749: LD_INT 2
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 21
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: PPUSH
6771: CALL_OW 70
6775: IFFALSE 6836
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
6777: LD_ADDR_VAR 0 2
6781: PUSH
6782: LD_VAR 0 6
6786: PPUSH
6787: LD_INT 2
6789: PUSH
6790: LD_INT 21
6792: PUSH
6793: LD_INT 2
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 21
6802: PUSH
6803: LD_INT 3
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: LIST
6814: PPUSH
6815: CALL_OW 70
6819: PUSH
6820: FOR_IN
6821: IFFALSE 6834
// RemoveUnit ( i ) ;
6823: LD_VAR 0 2
6827: PPUSH
6828: CALL_OW 64
6832: GO 6820
6834: POP
6835: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
6836: LD_VAR 0 6
6840: PPUSH
6841: LD_INT 21
6843: PUSH
6844: LD_INT 1
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 70
6855: IFFALSE 6904
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
6857: LD_ADDR_VAR 0 2
6861: PUSH
6862: LD_VAR 0 6
6866: PPUSH
6867: LD_INT 21
6869: PUSH
6870: LD_INT 1
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PPUSH
6877: CALL_OW 70
6881: PUSH
6882: FOR_IN
6883: IFFALSE 6902
// ComMoveXY ( i , 113 , 53 ) ;
6885: LD_VAR 0 2
6889: PPUSH
6890: LD_INT 113
6892: PPUSH
6893: LD_INT 53
6895: PPUSH
6896: CALL_OW 111
6900: GO 6882
6902: POP
6903: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
6904: LD_VAR 0 6
6908: PPUSH
6909: LD_INT 2
6911: PUSH
6912: LD_INT 21
6914: PUSH
6915: LD_INT 1
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 21
6924: PUSH
6925: LD_INT 2
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: LIST
6936: PPUSH
6937: CALL_OW 70
6941: NOT
6942: IFFALSE 6731
// case convoyCounter of 1 .. 3 :
6944: LD_EXP 16
6948: PUSH
6949: LD_INT 1
6951: DOUBLE
6952: GREATEREQUAL
6953: IFFALSE 6961
6955: LD_INT 3
6957: DOUBLE
6958: LESSEQUAL
6959: IFTRUE 6963
6961: GO 7558
6963: POP
// begin uc_side := 3 ;
6964: LD_ADDR_OWVAR 20
6968: PUSH
6969: LD_INT 3
6971: ST_TO_ADDR
// uc_nation := 3 ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 3
6979: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
6980: LD_ADDR_VAR 0 2
6984: PUSH
6985: DOUBLE
6986: LD_INT 1
6988: DEC
6989: ST_TO_ADDR
6990: LD_INT 5
6992: PUSH
6993: LD_INT 6
6995: PUSH
6996: LD_INT 7
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: PUSH
7004: LD_OWVAR 67
7008: ARRAY
7009: PUSH
7010: LD_EXP 16
7014: MINUS
7015: PUSH
7016: FOR_TO
7017: IFFALSE 7204
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
7019: LD_INT 0
7021: PPUSH
7022: LD_INT 1
7024: PUSH
7025: LD_INT 1
7027: PUSH
7028: LD_INT 1
7030: PUSH
7031: LD_INT 4
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 1
7042: PPUSH
7043: LD_INT 4
7045: PPUSH
7046: CALL_OW 12
7050: ARRAY
7051: PPUSH
7052: LD_INT 4
7054: PUSH
7055: LD_INT 5
7057: PUSH
7058: LD_INT 6
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: LIST
7065: PUSH
7066: LD_OWVAR 67
7070: ARRAY
7071: PPUSH
7072: CALL_OW 380
// un := CreateHuman ;
7076: LD_ADDR_VAR 0 8
7080: PUSH
7081: CALL_OW 44
7085: ST_TO_ADDR
// SetDir ( un , dir ) ;
7086: LD_VAR 0 8
7090: PPUSH
7091: LD_VAR 0 4
7095: PPUSH
7096: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
7100: LD_VAR 0 8
7104: PPUSH
7105: LD_VAR 0 5
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL 2985 0 3
7117: IFFALSE 7202
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7119: LD_ADDR_EXP 38
7123: PUSH
7124: LD_EXP 38
7128: PPUSH
7129: LD_EXP 38
7133: PUSH
7134: LD_INT 1
7136: PLUS
7137: PPUSH
7138: LD_VAR 0 8
7142: PPUSH
7143: CALL_OW 1
7147: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7148: LD_VAR 0 8
7152: PPUSH
7153: LD_INT 1
7155: PPUSH
7156: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7160: LD_VAR 0 8
7164: PPUSH
7165: LD_VAR 0 7
7169: PUSH
7170: LD_INT 1
7172: ARRAY
7173: PUSH
7174: LD_INT 1
7176: ARRAY
7177: PPUSH
7178: LD_VAR 0 7
7182: PUSH
7183: LD_INT 1
7185: ARRAY
7186: PUSH
7187: LD_INT 2
7189: ARRAY
7190: PPUSH
7191: CALL_OW 111
// wait ( 0 0$2 ) ;
7195: LD_INT 70
7197: PPUSH
7198: CALL_OW 67
// end ; end ;
7202: GO 7016
7204: POP
7205: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
7206: LD_ADDR_VAR 0 2
7210: PUSH
7211: DOUBLE
7212: LD_INT 1
7214: DEC
7215: ST_TO_ADDR
7216: LD_INT 3
7218: PUSH
7219: LD_INT 4
7221: PUSH
7222: LD_INT 4
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: LIST
7229: PUSH
7230: LD_OWVAR 67
7234: ARRAY
7235: PUSH
7236: FOR_TO
7237: IFFALSE 7554
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7239: LD_INT 3
7241: PPUSH
7242: LD_INT 3
7244: PPUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 22
7250: PUSH
7251: LD_INT 23
7253: PUSH
7254: LD_INT 24
7256: PUSH
7257: LD_INT 24
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: PUSH
7267: LD_OWVAR 67
7271: PPUSH
7272: LD_OWVAR 67
7276: PUSH
7277: LD_INT 2
7279: PLUS
7280: PPUSH
7281: CALL_OW 12
7285: ARRAY
7286: PPUSH
7287: LD_INT 1
7289: PPUSH
7290: LD_INT 1
7292: PPUSH
7293: LD_INT 42
7295: PUSH
7296: LD_INT 44
7298: PUSH
7299: LD_INT 43
7301: PUSH
7302: LD_INT 44
7304: PUSH
7305: LD_INT 46
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 1
7317: PPUSH
7318: LD_OWVAR 67
7322: PUSH
7323: LD_INT 2
7325: PLUS
7326: PPUSH
7327: CALL_OW 12
7331: ARRAY
7332: PPUSH
7333: LD_INT 90
7335: PPUSH
7336: CALL 385 0 7
// un := CreateVehicle ;
7340: LD_ADDR_VAR 0 8
7344: PUSH
7345: CALL_OW 45
7349: ST_TO_ADDR
// SetDir ( un , dir ) ;
7350: LD_VAR 0 8
7354: PPUSH
7355: LD_VAR 0 4
7359: PPUSH
7360: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
7364: LD_VAR 0 8
7368: PPUSH
7369: LD_VAR 0 5
7373: PPUSH
7374: LD_INT 0
7376: PPUSH
7377: CALL 2985 0 3
7381: IFFALSE 7552
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7383: LD_ADDR_EXP 38
7387: PUSH
7388: LD_EXP 38
7392: PPUSH
7393: LD_EXP 38
7397: PUSH
7398: LD_INT 1
7400: PLUS
7401: PPUSH
7402: LD_VAR 0 8
7406: PPUSH
7407: CALL_OW 1
7411: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7412: LD_INT 0
7414: PPUSH
7415: LD_INT 3
7417: PUSH
7418: LD_INT 4
7420: PUSH
7421: LD_INT 5
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PUSH
7429: LD_OWVAR 67
7433: ARRAY
7434: PPUSH
7435: CALL_OW 383
// un := CreateHuman ;
7439: LD_ADDR_VAR 0 8
7443: PUSH
7444: CALL_OW 44
7448: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
7449: LD_VAR 0 8
7453: PPUSH
7454: LD_EXP 38
7458: PUSH
7459: LD_EXP 38
7463: ARRAY
7464: PPUSH
7465: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7469: LD_ADDR_EXP 38
7473: PUSH
7474: LD_EXP 38
7478: PPUSH
7479: LD_EXP 38
7483: PUSH
7484: LD_INT 1
7486: PLUS
7487: PPUSH
7488: LD_VAR 0 8
7492: PPUSH
7493: CALL_OW 1
7497: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7498: LD_VAR 0 8
7502: PPUSH
7503: LD_INT 1
7505: PPUSH
7506: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7510: LD_VAR 0 8
7514: PPUSH
7515: LD_VAR 0 7
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PUSH
7524: LD_INT 1
7526: ARRAY
7527: PPUSH
7528: LD_VAR 0 7
7532: PUSH
7533: LD_INT 1
7535: ARRAY
7536: PUSH
7537: LD_INT 2
7539: ARRAY
7540: PPUSH
7541: CALL_OW 111
// wait ( 0 0$3 ) ;
7545: LD_INT 105
7547: PPUSH
7548: CALL_OW 67
// end ; end ;
7552: GO 7236
7554: POP
7555: POP
// end ; 4 .. 7 :
7556: GO 8111
7558: LD_INT 4
7560: DOUBLE
7561: GREATEREQUAL
7562: IFFALSE 7570
7564: LD_INT 7
7566: DOUBLE
7567: LESSEQUAL
7568: IFTRUE 7572
7570: GO 8110
7572: POP
// begin uc_side := 3 ;
7573: LD_ADDR_OWVAR 20
7577: PUSH
7578: LD_INT 3
7580: ST_TO_ADDR
// uc_nation := 3 ;
7581: LD_ADDR_OWVAR 21
7585: PUSH
7586: LD_INT 3
7588: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
7589: LD_ADDR_VAR 0 2
7593: PUSH
7594: DOUBLE
7595: LD_INT 1
7597: DEC
7598: ST_TO_ADDR
7599: LD_INT 2
7601: PUSH
7602: LD_INT 3
7604: PUSH
7605: LD_INT 4
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_OWVAR 67
7617: ARRAY
7618: PUSH
7619: FOR_TO
7620: IFFALSE 7780
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
7622: LD_INT 0
7624: PPUSH
7625: LD_INT 1
7627: PPUSH
7628: LD_INT 4
7630: PUSH
7631: LD_INT 5
7633: PUSH
7634: LD_INT 6
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_OWVAR 67
7646: ARRAY
7647: PPUSH
7648: CALL_OW 380
// un := CreateHuman ;
7652: LD_ADDR_VAR 0 8
7656: PUSH
7657: CALL_OW 44
7661: ST_TO_ADDR
// SetDir ( un , dir ) ;
7662: LD_VAR 0 8
7666: PPUSH
7667: LD_VAR 0 4
7671: PPUSH
7672: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
7676: LD_VAR 0 8
7680: PPUSH
7681: LD_VAR 0 5
7685: PPUSH
7686: LD_INT 0
7688: PPUSH
7689: CALL 2985 0 3
7693: IFFALSE 7778
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7695: LD_ADDR_EXP 38
7699: PUSH
7700: LD_EXP 38
7704: PPUSH
7705: LD_EXP 38
7709: PUSH
7710: LD_INT 1
7712: PLUS
7713: PPUSH
7714: LD_VAR 0 8
7718: PPUSH
7719: CALL_OW 1
7723: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7724: LD_VAR 0 8
7728: PPUSH
7729: LD_INT 1
7731: PPUSH
7732: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7736: LD_VAR 0 8
7740: PPUSH
7741: LD_VAR 0 7
7745: PUSH
7746: LD_INT 1
7748: ARRAY
7749: PUSH
7750: LD_INT 1
7752: ARRAY
7753: PPUSH
7754: LD_VAR 0 7
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: PUSH
7763: LD_INT 2
7765: ARRAY
7766: PPUSH
7767: CALL_OW 111
// wait ( 0 0$2 ) ;
7771: LD_INT 70
7773: PPUSH
7774: CALL_OW 67
// end ; end ;
7778: GO 7619
7780: POP
7781: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
7782: LD_ADDR_VAR 0 2
7786: PUSH
7787: DOUBLE
7788: LD_INT 1
7790: DEC
7791: ST_TO_ADDR
7792: LD_INT 2
7794: PUSH
7795: LD_INT 3
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: PUSH
7806: LD_OWVAR 67
7810: ARRAY
7811: PUSH
7812: FOR_TO
7813: IFFALSE 8106
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
7815: LD_INT 3
7817: PPUSH
7818: LD_INT 3
7820: PPUSH
7821: LD_INT 21
7823: PUSH
7824: LD_INT 22
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 1
7833: PPUSH
7834: LD_INT 2
7836: PPUSH
7837: CALL_OW 12
7841: ARRAY
7842: PPUSH
7843: LD_INT 1
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: LD_INT 42
7851: PUSH
7852: LD_INT 44
7854: PUSH
7855: LD_INT 43
7857: PUSH
7858: LD_INT 44
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 1
7869: PPUSH
7870: LD_OWVAR 67
7874: PUSH
7875: LD_INT 1
7877: PLUS
7878: PPUSH
7879: CALL_OW 12
7883: ARRAY
7884: PPUSH
7885: LD_INT 90
7887: PPUSH
7888: CALL 385 0 7
// un := CreateVehicle ;
7892: LD_ADDR_VAR 0 8
7896: PUSH
7897: CALL_OW 45
7901: ST_TO_ADDR
// SetDir ( un , dir ) ;
7902: LD_VAR 0 8
7906: PPUSH
7907: LD_VAR 0 4
7911: PPUSH
7912: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
7916: LD_VAR 0 8
7920: PPUSH
7921: LD_VAR 0 5
7925: PPUSH
7926: LD_INT 0
7928: PPUSH
7929: CALL 2985 0 3
7933: IFFALSE 8104
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7935: LD_ADDR_EXP 38
7939: PUSH
7940: LD_EXP 38
7944: PPUSH
7945: LD_EXP 38
7949: PUSH
7950: LD_INT 1
7952: PLUS
7953: PPUSH
7954: LD_VAR 0 8
7958: PPUSH
7959: CALL_OW 1
7963: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7964: LD_INT 0
7966: PPUSH
7967: LD_INT 3
7969: PUSH
7970: LD_INT 4
7972: PUSH
7973: LD_INT 5
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_OWVAR 67
7985: ARRAY
7986: PPUSH
7987: CALL_OW 383
// un := CreateHuman ;
7991: LD_ADDR_VAR 0 8
7995: PUSH
7996: CALL_OW 44
8000: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
8001: LD_VAR 0 8
8005: PPUSH
8006: LD_EXP 38
8010: PUSH
8011: LD_EXP 38
8015: ARRAY
8016: PPUSH
8017: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
8021: LD_ADDR_EXP 38
8025: PUSH
8026: LD_EXP 38
8030: PPUSH
8031: LD_EXP 38
8035: PUSH
8036: LD_INT 1
8038: PLUS
8039: PPUSH
8040: LD_VAR 0 8
8044: PPUSH
8045: CALL_OW 1
8049: ST_TO_ADDR
// SetTag ( un , 1 ) ;
8050: LD_VAR 0 8
8054: PPUSH
8055: LD_INT 1
8057: PPUSH
8058: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
8062: LD_VAR 0 8
8066: PPUSH
8067: LD_VAR 0 7
8071: PUSH
8072: LD_INT 1
8074: ARRAY
8075: PUSH
8076: LD_INT 1
8078: ARRAY
8079: PPUSH
8080: LD_VAR 0 7
8084: PUSH
8085: LD_INT 1
8087: ARRAY
8088: PUSH
8089: LD_INT 2
8091: ARRAY
8092: PPUSH
8093: CALL_OW 111
// wait ( 0 0$2 ) ;
8097: LD_INT 70
8099: PPUSH
8100: CALL_OW 67
// end ; end ;
8104: GO 7812
8106: POP
8107: POP
// end ; end ;
8108: GO 8111
8110: POP
// repeat wait ( 0 0$1 ) ;
8111: LD_INT 35
8113: PPUSH
8114: CALL_OW 67
// for un in ruConvoySquad do
8118: LD_ADDR_VAR 0 8
8122: PUSH
8123: LD_EXP 38
8127: PUSH
8128: FOR_IN
8129: IFFALSE 8624
// begin if IsInArea ( un , westSouthOutArea ) then
8131: LD_VAR 0 8
8135: PPUSH
8136: LD_INT 18
8138: PPUSH
8139: CALL_OW 308
8143: IFFALSE 8222
// begin if GetType ( un ) = unit_vehicle then
8145: LD_VAR 0 8
8149: PPUSH
8150: CALL_OW 247
8154: PUSH
8155: LD_INT 2
8157: EQUAL
8158: IFFALSE 8181
// ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
8160: LD_ADDR_EXP 38
8164: PUSH
8165: LD_EXP 38
8169: PUSH
8170: LD_VAR 0 8
8174: PPUSH
8175: CALL_OW 311
8179: DIFF
8180: ST_TO_ADDR
// convoySavedCounter := convoySavedCounter + 1 ;
8181: LD_ADDR_EXP 15
8185: PUSH
8186: LD_EXP 15
8190: PUSH
8191: LD_INT 1
8193: PLUS
8194: ST_TO_ADDR
// RemoveUnit ( un ) ;
8195: LD_VAR 0 8
8199: PPUSH
8200: CALL_OW 64
// ruConvoySquad := ruConvoySquad diff un ;
8204: LD_ADDR_EXP 38
8208: PUSH
8209: LD_EXP 38
8213: PUSH
8214: LD_VAR 0 8
8218: DIFF
8219: ST_TO_ADDR
// break ;
8220: GO 8624
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
8222: LD_VAR 0 8
8226: PPUSH
8227: CALL_OW 305
8231: NOT
8232: PUSH
8233: LD_VAR 0 8
8237: PPUSH
8238: CALL_OW 310
8242: NOT
8243: AND
8244: IFFALSE 8262
// ruConvoySquad := ruConvoySquad diff un ;
8246: LD_ADDR_EXP 38
8250: PUSH
8251: LD_EXP 38
8255: PUSH
8256: LD_VAR 0 8
8260: DIFF
8261: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
8262: LD_VAR 0 8
8266: PPUSH
8267: CALL_OW 302
8271: PUSH
8272: LD_VAR 0 8
8276: PPUSH
8277: CALL_OW 314
8281: NOT
8282: AND
8283: IFFALSE 8622
// begin tag := GetTag ( un ) ;
8285: LD_ADDR_VAR 0 9
8289: PUSH
8290: LD_VAR 0 8
8294: PPUSH
8295: CALL_OW 110
8299: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
8300: LD_VAR 0 8
8304: PPUSH
8305: LD_VAR 0 7
8309: PUSH
8310: LD_VAR 0 9
8314: PUSH
8315: LD_INT 1
8317: PLUS
8318: ARRAY
8319: PUSH
8320: LD_INT 1
8322: ARRAY
8323: PPUSH
8324: LD_VAR 0 7
8328: PUSH
8329: LD_VAR 0 9
8333: PUSH
8334: LD_INT 1
8336: PLUS
8337: ARRAY
8338: PUSH
8339: LD_INT 2
8341: ARRAY
8342: PPUSH
8343: CALL_OW 297
8347: PUSH
8348: LD_INT 6
8350: LESS
8351: IFFALSE 8462
// begin SetTag ( un , tag + 1 ) ;
8353: LD_VAR 0 8
8357: PPUSH
8358: LD_VAR 0 9
8362: PUSH
8363: LD_INT 1
8365: PLUS
8366: PPUSH
8367: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
8371: LD_VAR 0 8
8375: PPUSH
8376: CALL_OW 247
8380: PUSH
8381: LD_INT 2
8383: EQUAL
8384: PUSH
8385: LD_VAR 0 8
8389: PPUSH
8390: CALL_OW 257
8394: PUSH
8395: LD_INT 3
8397: EQUAL
8398: OR
8399: IFFALSE 8460
// begin AddComWait ( un , 0 0$4 ) ;
8401: LD_VAR 0 8
8405: PPUSH
8406: LD_INT 140
8408: PPUSH
8409: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
8413: LD_VAR 0 8
8417: PPUSH
8418: LD_VAR 0 7
8422: PUSH
8423: LD_VAR 0 9
8427: PUSH
8428: LD_INT 1
8430: PLUS
8431: ARRAY
8432: PUSH
8433: LD_INT 1
8435: ARRAY
8436: PPUSH
8437: LD_VAR 0 7
8441: PUSH
8442: LD_VAR 0 9
8446: PUSH
8447: LD_INT 1
8449: PLUS
8450: ARRAY
8451: PUSH
8452: LD_INT 2
8454: ARRAY
8455: PPUSH
8456: CALL_OW 174
// end ; end else
8460: GO 8622
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8462: LD_VAR 0 8
8466: PPUSH
8467: CALL_OW 257
8471: PUSH
8472: LD_INT 4
8474: EQUAL
8475: PUSH
8476: LD_EXP 38
8480: PPUSH
8481: LD_INT 21
8483: PUSH
8484: LD_INT 1
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: LD_INT 24
8496: PUSH
8497: LD_INT 1000
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PPUSH
8512: CALL_OW 72
8516: AND
8517: IFFALSE 8575
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
8519: LD_VAR 0 8
8523: PPUSH
8524: LD_EXP 38
8528: PPUSH
8529: LD_INT 21
8531: PUSH
8532: LD_INT 1
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: LD_INT 3
8541: PUSH
8542: LD_INT 24
8544: PUSH
8545: LD_INT 1000
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PPUSH
8560: CALL_OW 72
8564: PUSH
8565: LD_INT 1
8567: ARRAY
8568: PPUSH
8569: CALL_OW 128
8573: GO 8622
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
8575: LD_VAR 0 8
8579: PPUSH
8580: LD_VAR 0 7
8584: PUSH
8585: LD_VAR 0 9
8589: PUSH
8590: LD_INT 1
8592: PLUS
8593: ARRAY
8594: PUSH
8595: LD_INT 1
8597: ARRAY
8598: PPUSH
8599: LD_VAR 0 7
8603: PUSH
8604: LD_VAR 0 9
8608: PUSH
8609: LD_INT 1
8611: PLUS
8612: ARRAY
8613: PUSH
8614: LD_INT 2
8616: ARRAY
8617: PPUSH
8618: CALL_OW 114
// end ; end ; end ;
8622: GO 8128
8624: POP
8625: POP
// until not ruConvoySquad ;
8626: LD_EXP 38
8630: NOT
8631: IFFALSE 8111
// end ;
8633: LD_VAR 0 1
8637: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
8638: LD_EXP 16
8642: PUSH
8643: LD_INT 3
8645: PPUSH
8646: LD_INT 5
8648: PPUSH
8649: CALL_OW 12
8653: LESS
8654: PUSH
8655: LD_EXP 38
8659: NOT
8660: AND
8661: PUSH
8662: LD_OWVAR 67
8666: PUSH
8667: LD_INT 1
8669: GREATER
8670: AND
8671: IFFALSE 9059
8673: GO 8675
8675: DISABLE
8676: LD_INT 0
8678: PPUSH
8679: PPUSH
8680: PPUSH
// begin uc_side := 3 ;
8681: LD_ADDR_OWVAR 20
8685: PUSH
8686: LD_INT 3
8688: ST_TO_ADDR
// uc_nation := 3 ;
8689: LD_ADDR_OWVAR 21
8693: PUSH
8694: LD_INT 3
8696: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: DOUBLE
8703: LD_INT 1
8705: DEC
8706: ST_TO_ADDR
8707: LD_INT 2
8709: PUSH
8710: LD_INT 3
8712: PUSH
8713: LD_INT 4
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: PUSH
8721: LD_OWVAR 67
8725: ARRAY
8726: PUSH
8727: FOR_TO
8728: IFFALSE 8980
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
8730: LD_INT 3
8732: PPUSH
8733: LD_INT 3
8735: PPUSH
8736: LD_INT 21
8738: PUSH
8739: LD_INT 22
8741: PUSH
8742: LD_INT 23
8744: PUSH
8745: LD_INT 24
8747: PUSH
8748: LD_INT 24
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: PUSH
8758: LD_OWVAR 67
8762: PPUSH
8763: LD_OWVAR 67
8767: PUSH
8768: LD_INT 2
8770: PLUS
8771: PPUSH
8772: CALL_OW 12
8776: ARRAY
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: LD_INT 1
8783: PPUSH
8784: LD_INT 42
8786: PUSH
8787: LD_INT 44
8789: PUSH
8790: LD_INT 43
8792: PUSH
8793: LD_INT 44
8795: PUSH
8796: LD_INT 46
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 1
8808: PPUSH
8809: LD_OWVAR 67
8813: PUSH
8814: LD_INT 2
8816: PLUS
8817: PPUSH
8818: CALL_OW 12
8822: ARRAY
8823: PPUSH
8824: LD_INT 90
8826: PPUSH
8827: CALL 385 0 7
// un := CreateVehicle ;
8831: LD_ADDR_VAR 0 3
8835: PUSH
8836: CALL_OW 45
8840: ST_TO_ADDR
// SetDir ( un , 0 ) ;
8841: LD_VAR 0 3
8845: PPUSH
8846: LD_INT 0
8848: PPUSH
8849: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
8853: LD_VAR 0 3
8857: PPUSH
8858: LD_INT 23
8860: PPUSH
8861: LD_INT 0
8863: PPUSH
8864: CALL 2985 0 3
8868: IFFALSE 8978
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
8870: LD_ADDR_VAR 0 2
8874: PUSH
8875: LD_VAR 0 2
8879: PPUSH
8880: LD_VAR 0 2
8884: PUSH
8885: LD_INT 1
8887: PLUS
8888: PPUSH
8889: LD_VAR 0 3
8893: PPUSH
8894: CALL_OW 1
8898: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
8899: LD_INT 0
8901: PPUSH
8902: LD_INT 3
8904: PUSH
8905: LD_INT 4
8907: PUSH
8908: LD_INT 5
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: LIST
8915: PUSH
8916: LD_OWVAR 67
8920: ARRAY
8921: PPUSH
8922: CALL_OW 383
// un := CreateHuman ;
8926: LD_ADDR_VAR 0 3
8930: PUSH
8931: CALL_OW 44
8935: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
8936: LD_VAR 0 3
8940: PPUSH
8941: LD_VAR 0 2
8945: PUSH
8946: LD_VAR 0 2
8950: ARRAY
8951: PPUSH
8952: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
8956: LD_VAR 0 3
8960: PPUSH
8961: LD_INT 80
8963: PPUSH
8964: LD_INT 139
8966: PPUSH
8967: CALL_OW 111
// wait ( 0 0$3 ) ;
8971: LD_INT 105
8973: PPUSH
8974: CALL_OW 67
// end ; end ;
8978: GO 8727
8980: POP
8981: POP
// for i in tmp do
8982: LD_ADDR_VAR 0 1
8986: PUSH
8987: LD_VAR 0 2
8991: PUSH
8992: FOR_IN
8993: IFFALSE 9057
// begin ComAgressiveMove ( i , 101 , 102 ) ;
8995: LD_VAR 0 1
8999: PPUSH
9000: LD_INT 101
9002: PPUSH
9003: LD_INT 102
9005: PPUSH
9006: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
9010: LD_VAR 0 1
9014: PPUSH
9015: LD_INT 110
9017: PPUSH
9018: LD_INT 78
9020: PPUSH
9021: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
9025: LD_VAR 0 1
9029: PPUSH
9030: LD_INT 75
9032: PPUSH
9033: LD_INT 101
9035: PPUSH
9036: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
9040: LD_VAR 0 1
9044: PPUSH
9045: LD_INT 57
9047: PPUSH
9048: LD_INT 83
9050: PPUSH
9051: CALL_OW 174
// end ;
9055: GO 8992
9057: POP
9058: POP
// end ; end_of_file
9059: PPOPN 3
9061: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9062: LD_VAR 0 1
9066: PUSH
9067: LD_EXP 18
9071: EQUAL
9072: IFFALSE 9081
// YouLost ( Heike ) ;
9074: LD_STRING Heike
9076: PPUSH
9077: CALL_OW 104
// if un in apeSoldGroup then
9081: LD_VAR 0 1
9085: PUSH
9086: LD_EXP 39
9090: IN
9091: IFFALSE 9109
// apeSoldGroup := apeSoldGroup diff un ;
9093: LD_ADDR_EXP 39
9097: PUSH
9098: LD_EXP 39
9102: PUSH
9103: LD_VAR 0 1
9107: DIFF
9108: ST_TO_ADDR
// if un in apeEngGroup then
9109: LD_VAR 0 1
9113: PUSH
9114: LD_EXP 40
9118: IN
9119: IFFALSE 9137
// apeEngGroup := apeEngGroup diff un ;
9121: LD_ADDR_EXP 40
9125: PUSH
9126: LD_EXP 40
9130: PUSH
9131: LD_VAR 0 1
9135: DIFF
9136: ST_TO_ADDR
// if un in oilBaseGuard then
9137: LD_VAR 0 1
9141: PUSH
9142: LD_EXP 35
9146: IN
9147: IFFALSE 9165
// oilBaseGuard := oilBaseGuard diff un ;
9149: LD_ADDR_EXP 35
9153: PUSH
9154: LD_EXP 35
9158: PUSH
9159: LD_VAR 0 1
9163: DIFF
9164: ST_TO_ADDR
// if un in ruNorthGroup then
9165: LD_VAR 0 1
9169: PUSH
9170: LD_EXP 36
9174: IN
9175: IFFALSE 9193
// ruNorthGroup := ruNorthGroup diff un ;
9177: LD_ADDR_EXP 36
9181: PUSH
9182: LD_EXP 36
9186: PUSH
9187: LD_VAR 0 1
9191: DIFF
9192: ST_TO_ADDR
// if un in ruSouthGroup then
9193: LD_VAR 0 1
9197: PUSH
9198: LD_EXP 37
9202: IN
9203: IFFALSE 9221
// ruSouthGroup := ruSouthGroup diff un ;
9205: LD_ADDR_EXP 37
9209: PUSH
9210: LD_EXP 37
9214: PUSH
9215: LD_VAR 0 1
9219: DIFF
9220: ST_TO_ADDR
// if un in ruConvoySquad then
9221: LD_VAR 0 1
9225: PUSH
9226: LD_EXP 38
9230: IN
9231: IFFALSE 9249
// ruConvoySquad := ruConvoySquad diff un ;
9233: LD_ADDR_EXP 38
9237: PUSH
9238: LD_EXP 38
9242: PUSH
9243: LD_VAR 0 1
9247: DIFF
9248: ST_TO_ADDR
// end ;
9249: PPOPN 1
9251: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
9252: LD_VAR 0 1
9256: PPUSH
9257: CALL_OW 264
9261: PUSH
9262: LD_INT 30
9264: EQUAL
9265: IFFALSE 9275
// radarConstructed := true ;
9267: LD_ADDR_EXP 13
9271: PUSH
9272: LD_INT 1
9274: ST_TO_ADDR
// end ; end_of_file
9275: PPOPN 2
9277: END
// export function Action ; var i , un , veh , tmp ; begin
9278: LD_INT 0
9280: PPUSH
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
// InGameOn ;
9285: CALL_OW 8
// music_nat := 2 ;
9289: LD_ADDR_OWVAR 71
9293: PUSH
9294: LD_INT 2
9296: ST_TO_ADDR
// music_class := 0 ;
9297: LD_ADDR_OWVAR 72
9301: PUSH
9302: LD_INT 0
9304: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
9305: LD_INT 7
9307: PPUSH
9308: LD_INT 6
9310: PPUSH
9311: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
9315: LD_INT 7
9317: PPUSH
9318: LD_INT 6
9320: PPUSH
9321: LD_INT 2
9323: PPUSH
9324: LD_INT 20
9326: NEG
9327: PPUSH
9328: CALL 2789 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
9332: LD_ADDR_VAR 0 5
9336: PUSH
9337: LD_EXP 18
9341: PUSH
9342: LD_EXP 19
9346: PUSH
9347: LD_EXP 20
9351: PUSH
9352: LD_EXP 21
9356: PUSH
9357: LD_EXP 22
9361: PUSH
9362: LD_EXP 23
9366: PUSH
9367: LD_EXP 24
9371: PUSH
9372: LD_EXP 25
9376: PUSH
9377: LD_EXP 30
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: ST_TO_ADDR
// tmp := tmp diff 0 ;
9393: LD_ADDR_VAR 0 5
9397: PUSH
9398: LD_VAR 0 5
9402: PUSH
9403: LD_INT 0
9405: DIFF
9406: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
9407: LD_ADDR_VAR 0 5
9411: PUSH
9412: LD_VAR 0 5
9416: PPUSH
9417: LD_INT 3
9419: PPUSH
9420: CALL 2652 0 2
9424: ST_TO_ADDR
// for i in heikeVehicles do
9425: LD_ADDR_VAR 0 2
9429: PUSH
9430: LD_EXP 32
9434: PUSH
9435: FOR_IN
9436: IFFALSE 9635
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
9438: LD_INT 5
9440: PPUSH
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 5
9448: ARRAY
9449: PPUSH
9450: LD_VAR 0 2
9454: PUSH
9455: LD_INT 1
9457: ARRAY
9458: PPUSH
9459: LD_VAR 0 2
9463: PUSH
9464: LD_INT 2
9466: ARRAY
9467: PPUSH
9468: LD_VAR 0 2
9472: PUSH
9473: LD_INT 3
9475: ARRAY
9476: PPUSH
9477: LD_VAR 0 2
9481: PUSH
9482: LD_INT 4
9484: ARRAY
9485: PPUSH
9486: LD_INT 34
9488: PPUSH
9489: CALL 385 0 7
// veh := CreateVehicle ;
9493: LD_ADDR_VAR 0 4
9497: PUSH
9498: CALL_OW 45
9502: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
9503: LD_VAR 0 2
9507: PUSH
9508: LD_INT 4
9510: ARRAY
9511: PUSH
9512: LD_INT 51
9514: PUSH
9515: LD_INT 32
9517: PUSH
9518: LD_INT 12
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: IN
9526: IFFALSE 9606
// begin if i [ 7 ] [ 1 ] then
9528: LD_VAR 0 2
9532: PUSH
9533: LD_INT 7
9535: ARRAY
9536: PUSH
9537: LD_INT 1
9539: ARRAY
9540: IFFALSE 9567
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
9542: LD_VAR 0 4
9546: PPUSH
9547: LD_INT 1
9549: PPUSH
9550: LD_VAR 0 2
9554: PUSH
9555: LD_INT 7
9557: ARRAY
9558: PUSH
9559: LD_INT 1
9561: ARRAY
9562: PPUSH
9563: CALL_OW 291
// if i [ 7 ] [ 2 ] then
9567: LD_VAR 0 2
9571: PUSH
9572: LD_INT 7
9574: ARRAY
9575: PUSH
9576: LD_INT 2
9578: ARRAY
9579: IFFALSE 9606
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
9581: LD_VAR 0 4
9585: PPUSH
9586: LD_INT 2
9588: PPUSH
9589: LD_VAR 0 2
9593: PUSH
9594: LD_INT 7
9596: ARRAY
9597: PUSH
9598: LD_INT 2
9600: ARRAY
9601: PPUSH
9602: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
9606: LD_VAR 0 4
9610: PPUSH
9611: LD_INT 2
9613: PPUSH
9614: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
9618: LD_VAR 0 4
9622: PPUSH
9623: LD_INT 4
9625: PPUSH
9626: LD_INT 0
9628: PPUSH
9629: CALL_OW 49
// end ;
9633: GO 9435
9635: POP
9636: POP
// if tmp then
9637: LD_VAR 0 5
9641: IFFALSE 9696
// for i in tmp union heikeApes do
9643: LD_ADDR_VAR 0 2
9647: PUSH
9648: LD_VAR 0 5
9652: PUSH
9653: LD_EXP 33
9657: UNION
9658: PUSH
9659: FOR_IN
9660: IFFALSE 9694
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
9662: LD_VAR 0 2
9666: PPUSH
9667: LD_INT 5
9669: PPUSH
9670: LD_INT 0
9672: PPUSH
9673: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
9677: LD_VAR 0 2
9681: PPUSH
9682: LD_INT 26
9684: PPUSH
9685: LD_INT 9
9687: PPUSH
9688: CALL_OW 118
// end ;
9692: GO 9659
9694: POP
9695: POP
// if heikeSecondSquad then
9696: LD_EXP 31
9700: IFFALSE 9749
// for i in heikeSecondSquad do
9702: LD_ADDR_VAR 0 2
9706: PUSH
9707: LD_EXP 31
9711: PUSH
9712: FOR_IN
9713: IFFALSE 9747
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
9715: LD_VAR 0 2
9719: PPUSH
9720: LD_INT 6
9722: PPUSH
9723: LD_INT 0
9725: PPUSH
9726: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
9730: LD_VAR 0 2
9734: PPUSH
9735: LD_INT 26
9737: PPUSH
9738: LD_INT 9
9740: PPUSH
9741: CALL_OW 118
// end ;
9745: GO 9712
9747: POP
9748: POP
// if heikeApes then
9749: LD_EXP 33
9753: IFFALSE 9796
// for i in heikeApes do
9755: LD_ADDR_VAR 0 2
9759: PUSH
9760: LD_EXP 33
9764: PUSH
9765: FOR_IN
9766: IFFALSE 9794
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9768: LD_VAR 0 2
9772: PPUSH
9773: LD_INT 7
9775: PPUSH
9776: LD_INT 0
9778: PPUSH
9779: CALL_OW 49
// ComHold ( i ) ;
9783: LD_VAR 0 2
9787: PPUSH
9788: CALL_OW 140
// end ;
9792: GO 9765
9794: POP
9795: POP
// if Kurt then
9796: LD_EXP 29
9800: IFFALSE 9832
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9802: LD_EXP 29
9806: PPUSH
9807: LD_INT 8
9809: PPUSH
9810: LD_INT 0
9812: PPUSH
9813: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9817: LD_EXP 29
9821: PPUSH
9822: LD_INT 42
9824: PPUSH
9825: LD_INT 32
9827: PPUSH
9828: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
9832: LD_EXP 18
9836: PPUSH
9837: LD_STRING DH-Start-1
9839: PPUSH
9840: CALL_OW 88
// if Givi then
9844: LD_EXP 19
9848: IFFALSE 10111
// begin Say ( Givi , DG-Start-2-5 ) ;
9850: LD_EXP 19
9854: PPUSH
9855: LD_STRING DG-Start-2-5
9857: PPUSH
9858: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9862: LD_EXP 18
9866: PPUSH
9867: LD_STRING DH-Start-3
9869: PPUSH
9870: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9874: LD_EXP 18
9878: PPUSH
9879: LD_STRING DH-Start-4
9881: PPUSH
9882: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9886: LD_EXP 19
9890: PPUSH
9891: LD_STRING DG-Start-5
9893: PPUSH
9894: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9898: LD_EXP 18
9902: PPUSH
9903: LD_STRING DH-Start-6
9905: PPUSH
9906: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9910: LD_EXP 19
9914: PPUSH
9915: LD_STRING DG-Start-7
9917: PPUSH
9918: CALL_OW 88
// if Mike then
9922: LD_EXP 20
9926: IFFALSE 10099
// begin Say ( Mike , DM-Start-8 ) ;
9928: LD_EXP 20
9932: PPUSH
9933: LD_STRING DM-Start-8
9935: PPUSH
9936: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9940: LD_EXP 20
9944: PPUSH
9945: LD_STRING DM-Start-9
9947: PPUSH
9948: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9952: LD_EXP 19
9956: PPUSH
9957: LD_STRING DG-Start-10
9959: PPUSH
9960: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9964: LD_EXP 19
9968: PPUSH
9969: LD_STRING DG-Start-11
9971: PPUSH
9972: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9976: LD_EXP 18
9980: PPUSH
9981: LD_STRING DH-Start-12
9983: PPUSH
9984: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9988: LD_EXP 19
9992: PPUSH
9993: LD_STRING DG-Start-13
9995: PPUSH
9996: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
10000: LD_EXP 19
10004: PPUSH
10005: LD_STRING DG-Start-14
10007: PPUSH
10008: CALL_OW 88
// if Kaia then
10012: LD_EXP 23
10016: IFFALSE 10099
// begin Say ( Kaia , DK-Start-15 ) ;
10018: LD_EXP 23
10022: PPUSH
10023: LD_STRING DK-Start-15
10025: PPUSH
10026: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
10030: LD_EXP 23
10034: PPUSH
10035: LD_STRING DK-Start-16
10037: PPUSH
10038: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
10042: LD_EXP 23
10046: PPUSH
10047: LD_STRING DK-Start-17
10049: PPUSH
10050: CALL_OW 88
// wait ( 0 0$0.3 ) ;
10054: LD_INT 10
10056: PPUSH
10057: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
10061: LD_EXP 19
10065: PPUSH
10066: LD_EXP 23
10070: PPUSH
10071: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
10075: LD_EXP 19
10079: PPUSH
10080: LD_STRING DG-Start-18
10082: PPUSH
10083: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
10087: LD_EXP 23
10091: PPUSH
10092: LD_STRING DK-Start-19
10094: PPUSH
10095: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
10099: LD_EXP 18
10103: PPUSH
10104: LD_STRING DH-Start-20
10106: PPUSH
10107: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
10111: LD_INT 70
10113: PPUSH
10114: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
10118: LD_EXP 26
10122: PPUSH
10123: LD_STRING DShar-Start-21
10125: PPUSH
10126: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
10130: LD_EXP 18
10134: PPUSH
10135: LD_STRING DH-Start-22
10137: PPUSH
10138: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
10142: LD_EXP 26
10146: PPUSH
10147: LD_STRING DShar-Start-23
10149: PPUSH
10150: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
10154: LD_EXP 26
10158: PPUSH
10159: LD_STRING DShar-Start-24
10161: PPUSH
10162: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
10166: LD_EXP 26
10170: PPUSH
10171: LD_STRING DShar-Start-25
10173: PPUSH
10174: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
10178: LD_EXP 26
10182: PPUSH
10183: LD_STRING DShar-Start-26
10185: PPUSH
10186: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
10190: LD_EXP 18
10194: PPUSH
10195: LD_STRING DH-Start-27
10197: PPUSH
10198: CALL_OW 88
// if Kaia then
10202: LD_EXP 23
10206: IFFALSE 10246
// begin ComTurnUnit ( Heike , Kaia ) ;
10208: LD_EXP 18
10212: PPUSH
10213: LD_EXP 23
10217: PPUSH
10218: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
10222: LD_EXP 23
10226: PPUSH
10227: LD_STRING DK-Start-28
10229: PPUSH
10230: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
10234: LD_EXP 18
10238: PPUSH
10239: LD_STRING DH-Start-29
10241: PPUSH
10242: CALL_OW 88
// end ; if Givi then
10246: LD_EXP 19
10250: IFFALSE 10462
// begin ComTurnUnit ( Heike , Givi ) ;
10252: LD_EXP 18
10256: PPUSH
10257: LD_EXP 19
10261: PPUSH
10262: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
10266: LD_EXP 19
10270: PPUSH
10271: LD_EXP 18
10275: PPUSH
10276: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
10280: LD_EXP 18
10284: PPUSH
10285: LD_STRING DH-Start-30
10287: PPUSH
10288: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
10292: LD_EXP 18
10296: PPUSH
10297: LD_STRING DH-Start-31
10299: PPUSH
10300: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
10304: LD_EXP 19
10308: PPUSH
10309: LD_STRING DG-Start-32
10311: PPUSH
10312: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
10316: LD_EXP 18
10320: PPUSH
10321: LD_STRING DH-Start-33
10323: PPUSH
10324: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
10328: LD_EXP 19
10332: PPUSH
10333: LD_STRING DG-Start-34
10335: PPUSH
10336: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
10340: LD_EXP 19
10344: PPUSH
10345: LD_STRING DG-Start-35
10347: PPUSH
10348: CALL_OW 88
// if Kurt and not dialogue_skipped then
10352: LD_EXP 29
10356: PUSH
10357: LD_OWVAR 59
10361: NOT
10362: AND
10363: IFFALSE 10394
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
10365: LD_EXP 29
10369: PPUSH
10370: LD_INT 28
10372: PPUSH
10373: LD_INT 13
10375: PPUSH
10376: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
10380: LD_EXP 29
10384: PPUSH
10385: LD_EXP 18
10389: PPUSH
10390: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
10394: LD_EXP 19
10398: PPUSH
10399: LD_STRING DG-Start-36
10401: PPUSH
10402: CALL_OW 88
// if Kurt then
10406: LD_EXP 29
10410: IFFALSE 10462
// begin Say ( Kurt , DKs-Start-37 ) ;
10412: LD_EXP 29
10416: PPUSH
10417: LD_STRING DKs-Start-37
10419: PPUSH
10420: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
10424: LD_EXP 29
10428: PPUSH
10429: LD_STRING DKs-Start-38
10431: PPUSH
10432: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
10436: LD_EXP 18
10440: PPUSH
10441: LD_EXP 29
10445: PPUSH
10446: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
10450: LD_EXP 18
10454: PPUSH
10455: LD_STRING DH-Start-39
10457: PPUSH
10458: CALL_OW 88
// end ; end ; if HexInfo ( 44 , 25 ) then
10462: LD_INT 44
10464: PPUSH
10465: LD_INT 25
10467: PPUSH
10468: CALL_OW 428
10472: IFFALSE 10489
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
10474: LD_INT 44
10476: PPUSH
10477: LD_INT 25
10479: PPUSH
10480: CALL_OW 428
10484: PPUSH
10485: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
10489: LD_EXP 27
10493: PPUSH
10494: LD_INT 5
10496: PPUSH
10497: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
10501: LD_EXP 27
10505: PPUSH
10506: LD_INT 44
10508: PPUSH
10509: LD_INT 25
10511: PPUSH
10512: LD_INT 0
10514: PPUSH
10515: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
10519: LD_EXP 27
10523: PPUSH
10524: LD_INT 29
10526: PPUSH
10527: LD_INT 12
10529: PPUSH
10530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10534: LD_INT 35
10536: PPUSH
10537: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
10541: LD_OWVAR 59
10545: PUSH
10546: LD_EXP 18
10550: PPUSH
10551: LD_EXP 27
10555: PPUSH
10556: CALL_OW 296
10560: PUSH
10561: LD_INT 8
10563: LESS
10564: OR
10565: PUSH
10566: LD_EXP 27
10570: PPUSH
10571: LD_INT 26
10573: PPUSH
10574: LD_INT 9
10576: PPUSH
10577: CALL_OW 297
10581: PUSH
10582: LD_INT 6
10584: LESS
10585: OR
10586: IFFALSE 10534
// Say ( Olaf , DO-Scout-1 ) ;
10588: LD_EXP 27
10592: PPUSH
10593: LD_STRING DO-Scout-1
10595: PPUSH
10596: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
10600: LD_EXP 27
10604: PPUSH
10605: LD_EXP 18
10609: PPUSH
10610: CALL_OW 119
// for i in tmp union heikeSecondSquad do
10614: LD_ADDR_VAR 0 2
10618: PUSH
10619: LD_VAR 0 5
10623: PUSH
10624: LD_EXP 31
10628: UNION
10629: PUSH
10630: FOR_IN
10631: IFFALSE 10649
// ComTurnUnit ( i , Olaf ) ;
10633: LD_VAR 0 2
10637: PPUSH
10638: LD_EXP 27
10642: PPUSH
10643: CALL_OW 119
10647: GO 10630
10649: POP
10650: POP
// wait ( 0 0$0.3 ) ;
10651: LD_INT 10
10653: PPUSH
10654: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10658: LD_EXP 18
10662: PPUSH
10663: LD_EXP 27
10667: PPUSH
10668: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10672: LD_EXP 18
10676: PPUSH
10677: LD_EXP 27
10681: PPUSH
10682: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10686: LD_EXP 18
10690: PPUSH
10691: LD_STRING DH-Scout-2
10693: PPUSH
10694: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10698: LD_EXP 27
10702: PPUSH
10703: LD_STRING DO-Scout-3
10705: PPUSH
10706: CALL_OW 88
// if Mike and Givi then
10710: LD_EXP 20
10714: PUSH
10715: LD_EXP 19
10719: AND
10720: IFFALSE 10736
// Say ( Olaf , DO-Scout-4 ) else
10722: LD_EXP 27
10726: PPUSH
10727: LD_STRING DO-Scout-4
10729: PPUSH
10730: CALL_OW 88
10734: GO 10836
// begin if Mike then
10736: LD_EXP 20
10740: IFFALSE 10768
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10742: LD_EXP 27
10746: PPUSH
10747: LD_STRING DO-Scout-a-4
10749: PPUSH
10750: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10754: LD_EXP 18
10758: PPUSH
10759: LD_STRING DH-Scout-a-5
10761: PPUSH
10762: CALL_OW 88
// end else
10766: GO 10836
// if Givi then
10768: LD_EXP 19
10772: IFFALSE 10800
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10774: LD_EXP 27
10778: PPUSH
10779: LD_STRING DO-Scout-b-4
10781: PPUSH
10782: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10786: LD_EXP 18
10790: PPUSH
10791: LD_STRING DH-Scout-b-5
10793: PPUSH
10794: CALL_OW 88
// end else
10798: GO 10836
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10800: LD_EXP 27
10804: PPUSH
10805: LD_STRING DO-Scout-f-4
10807: PPUSH
10808: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10812: LD_EXP 18
10816: PPUSH
10817: LD_STRING DH-Scout-f-5
10819: PPUSH
10820: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10824: LD_EXP 27
10828: PPUSH
10829: LD_STRING DO-Scout-f-6
10831: PPUSH
10832: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10836: LD_EXP 18
10840: PPUSH
10841: LD_STRING DH-Scout-5
10843: PPUSH
10844: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10848: LD_EXP 27
10852: PPUSH
10853: LD_STRING DO-Scout-6
10855: PPUSH
10856: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10860: LD_EXP 27
10864: PPUSH
10865: LD_STRING DO-Scout-7
10867: PPUSH
10868: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10872: LD_EXP 18
10876: PPUSH
10877: LD_STRING DH-Scout-8
10879: PPUSH
10880: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10884: LD_EXP 18
10888: PPUSH
10889: LD_STRING DH-Scout-9
10891: PPUSH
10892: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10896: LD_EXP 27
10900: PPUSH
10901: LD_STRING DO-Scout-10
10903: PPUSH
10904: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10908: LD_EXP 27
10912: PPUSH
10913: LD_STRING DO-Scout-12
10915: PPUSH
10916: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10920: LD_EXP 27
10924: PPUSH
10925: LD_STRING DO-Scout-13
10927: PPUSH
10928: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10932: LD_EXP 27
10936: PPUSH
10937: LD_STRING DO-Scout-14
10939: PPUSH
10940: CALL_OW 88
// if Givi then
10944: LD_EXP 19
10948: IFFALSE 10974
// begin Say ( Givi , DG-Scout-15 ) ;
10950: LD_EXP 19
10954: PPUSH
10955: LD_STRING DG-Scout-15
10957: PPUSH
10958: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10962: LD_EXP 23
10966: PPUSH
10967: LD_STRING DK-Scout-16
10969: PPUSH
10970: CALL_OW 88
// end ; if not dialogue_skipped then
10974: LD_OWVAR 59
10978: NOT
10979: IFFALSE 11098
// begin async ;
10981: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10982: LD_EXP 27
10986: PPUSH
10987: LD_STRING DO-Scout-17
10989: PPUSH
10990: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10994: LD_INT 55
10996: PPUSH
10997: LD_INT 77
10999: PPUSH
11000: LD_INT 2
11002: PPUSH
11003: LD_INT 6
11005: NEG
11006: PPUSH
11007: CALL 2789 0 4
// wait ( 10 ) ;
11011: LD_INT 10
11013: PPUSH
11014: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
11018: LD_INT 55
11020: PPUSH
11021: LD_INT 77
11023: PPUSH
11024: CALL_OW 84
// wait ( 0 0$5 ) ;
11028: LD_INT 175
11030: PPUSH
11031: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
11035: LD_EXP 27
11039: PPUSH
11040: LD_STRING DO-Scout-18
11042: PPUSH
11043: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
11047: LD_INT 204
11049: PPUSH
11050: LD_INT 107
11052: PPUSH
11053: LD_INT 2
11055: PPUSH
11056: LD_INT 12
11058: NEG
11059: PPUSH
11060: CALL 2789 0 4
// wait ( 10 ) ;
11064: LD_INT 10
11066: PPUSH
11067: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
11071: LD_INT 204
11073: PPUSH
11074: LD_INT 107
11076: PPUSH
11077: CALL_OW 84
// wait ( 0 0$5 ) ;
11081: LD_INT 175
11083: PPUSH
11084: CALL_OW 67
// sync ;
11088: SYNC
// CenterNowOnUnits ( Heike ) ;
11089: LD_EXP 18
11093: PPUSH
11094: CALL_OW 87
// end ; Say ( Olaf , DO-Scout-19 ) ;
11098: LD_EXP 27
11102: PPUSH
11103: LD_STRING DO-Scout-19
11105: PPUSH
11106: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
11110: LD_EXP 27
11114: PPUSH
11115: LD_STRING DO-Scout-20
11117: PPUSH
11118: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
11122: LD_EXP 18
11126: PPUSH
11127: LD_STRING DH-Scout-21
11129: PPUSH
11130: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
11134: LD_EXP 18
11138: PPUSH
11139: LD_STRING DH-Scout-22
11141: PPUSH
11142: CALL_OW 88
// InGameOff ;
11146: CALL_OW 9
// if Givi then
11150: LD_EXP 19
11154: IFFALSE 11169
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
11156: LD_INT 13
11158: PPUSH
11159: LD_INT 2
11161: PPUSH
11162: LD_INT 1
11164: PPUSH
11165: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
11169: LD_STRING Road
11171: PPUSH
11172: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
11176: LD_ADDR_VAR 0 2
11180: PUSH
11181: LD_INT 22
11183: PUSH
11184: LD_INT 5
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 21
11193: PUSH
11194: LD_INT 2
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PPUSH
11205: CALL_OW 69
11209: PUSH
11210: FOR_IN
11211: IFFALSE 11227
// SetSide ( i , 2 ) ;
11213: LD_VAR 0 2
11217: PPUSH
11218: LD_INT 2
11220: PPUSH
11221: CALL_OW 235
11225: GO 11210
11227: POP
11228: POP
// SaveForQuickRestart ;
11229: CALL_OW 22
// end ;
11233: LD_VAR 0 1
11237: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
11238: LD_INT 2
11240: PPUSH
11241: LD_INT 9
11243: PPUSH
11244: CALL_OW 294
11248: IFFALSE 11615
11250: GO 11252
11252: DISABLE
// begin DialogueOn ;
11253: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
11257: LD_INT 111
11259: PPUSH
11260: LD_INT 72
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: LD_INT 20
11268: NEG
11269: PPUSH
11270: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
11274: LD_INT 111
11276: PPUSH
11277: LD_INT 72
11279: PPUSH
11280: LD_INT 2
11282: PPUSH
11283: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
11287: LD_INT 111
11289: PPUSH
11290: LD_INT 72
11292: PPUSH
11293: CALL_OW 86
// if IsOk ( Kamil ) then
11297: LD_EXP 22
11301: PPUSH
11302: CALL_OW 302
11306: IFFALSE 11423
// begin Say ( Kamil , DKam-Cross-1 ) ;
11308: LD_EXP 22
11312: PPUSH
11313: LD_STRING DKam-Cross-1
11315: PPUSH
11316: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
11320: LD_EXP 22
11324: PPUSH
11325: LD_STRING DKam-Cross-2
11327: PPUSH
11328: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
11332: LD_EXP 22
11336: PPUSH
11337: LD_STRING DKam-Cross-3
11339: PPUSH
11340: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
11344: LD_EXP 22
11348: PPUSH
11349: LD_STRING DKam-Cross-4
11351: PPUSH
11352: CALL_OW 88
// if IsOk ( Ibrahim ) then
11356: LD_EXP 21
11360: PPUSH
11361: CALL_OW 302
11365: IFFALSE 11421
// begin if ibrahimJoinedIn04 then
11367: LD_EXP 4
11371: IFFALSE 11385
// Say ( Ibrahim , DI-Cross-b-5 ) ;
11373: LD_EXP 21
11377: PPUSH
11378: LD_STRING DI-Cross-b-5
11380: PPUSH
11381: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
11385: LD_EXP 21
11389: PPUSH
11390: LD_STRING DI-Cross-b-6
11392: PPUSH
11393: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
11397: LD_EXP 21
11401: PPUSH
11402: LD_STRING DI-Cross-b-7
11404: PPUSH
11405: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
11409: LD_EXP 22
11413: PPUSH
11414: LD_STRING DKam-Cross-8
11416: PPUSH
11417: CALL_OW 88
// end ; end else
11421: GO 11581
// if IsOk ( Sophia ) then
11423: LD_EXP 24
11427: PPUSH
11428: CALL_OW 302
11432: IFFALSE 11549
// begin Say ( Sophia , DS-Cross-1 ) ;
11434: LD_EXP 24
11438: PPUSH
11439: LD_STRING DS-Cross-1
11441: PPUSH
11442: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
11446: LD_EXP 24
11450: PPUSH
11451: LD_STRING DS-Cross-2
11453: PPUSH
11454: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
11458: LD_EXP 24
11462: PPUSH
11463: LD_STRING DS-Cross-3
11465: PPUSH
11466: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
11470: LD_EXP 24
11474: PPUSH
11475: LD_STRING DS-Cross-4
11477: PPUSH
11478: CALL_OW 88
// if IsOk ( Ibrahim ) then
11482: LD_EXP 21
11486: PPUSH
11487: CALL_OW 302
11491: IFFALSE 11547
// begin if ibrahimJoinedIn04 then
11493: LD_EXP 4
11497: IFFALSE 11511
// Say ( Ibrahim , DI-Cross-b-5 ) ;
11499: LD_EXP 21
11503: PPUSH
11504: LD_STRING DI-Cross-b-5
11506: PPUSH
11507: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
11511: LD_EXP 21
11515: PPUSH
11516: LD_STRING DI-Cross-b-6
11518: PPUSH
11519: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
11523: LD_EXP 21
11527: PPUSH
11528: LD_STRING DI-Cross-b-7
11530: PPUSH
11531: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
11535: LD_EXP 24
11539: PPUSH
11540: LD_STRING DS-Cross-8
11542: PPUSH
11543: CALL_OW 88
// end ; end else
11547: GO 11581
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
11549: LD_EXP 31
11553: PPUSH
11554: LD_INT 50
11556: PUSH
11557: EMPTY
11558: LIST
11559: PPUSH
11560: CALL_OW 72
11564: IFFALSE 11581
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
11566: LD_EXP 31
11570: PPUSH
11571: LD_STRING DArm-Cross-c-1
11573: PPUSH
11574: LD_STRING DArf-Cross-c-1
11576: PPUSH
11577: CALL 2840 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
11581: LD_EXP 52
11585: PPUSH
11586: LD_INT 2
11588: PPUSH
11589: LD_INT 1
11591: PPUSH
11592: CALL_OW 322
// DialogueOff ;
11596: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11600: LD_STRING Crane
11602: PPUSH
11603: CALL_OW 337
// spottedCrossRoad := true ;
11607: LD_ADDR_EXP 8
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// end ;
11615: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11616: LD_INT 22
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 2
11628: PUSH
11629: LD_INT 30
11631: PUSH
11632: LD_INT 0
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 30
11641: PUSH
11642: LD_INT 1
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 69
11662: PUSH
11663: LD_EXP 23
11667: PPUSH
11668: CALL_OW 302
11672: PUSH
11673: LD_EXP 31
11677: OR
11678: AND
11679: IFFALSE 11891
11681: GO 11683
11683: DISABLE
// begin DialogueOn ;
11684: CALL_OW 6
// if Kaia then
11688: LD_EXP 23
11692: IFFALSE 11705
// CenterNowOnUnits ( Kaia ) else
11694: LD_EXP 23
11698: PPUSH
11699: CALL_OW 87
11703: GO 11714
// CenterNowOnUnits ( Heike ) ;
11705: LD_EXP 18
11709: PPUSH
11710: CALL_OW 87
// if IsOk ( Kaia ) then
11714: LD_EXP 23
11718: PPUSH
11719: CALL_OW 302
11723: IFFALSE 11739
// Say ( Kaia , DK-Cam-1 ) else
11725: LD_EXP 23
11729: PPUSH
11730: LD_STRING DK-Cam-1
11732: PPUSH
11733: CALL_OW 88
11737: GO 11754
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11739: LD_EXP 31
11743: PPUSH
11744: LD_STRING DArm-Cam-1
11746: PPUSH
11747: LD_STRING DArf-Cam-1
11749: PPUSH
11750: CALL 2840 0 3
// Say ( Heike , DH-Cam-2 ) ;
11754: LD_EXP 18
11758: PPUSH
11759: LD_STRING DH-Cam-2
11761: PPUSH
11762: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11766: LD_EXP 18
11770: PPUSH
11771: LD_STRING DH-Cam-3
11773: PPUSH
11774: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11778: LD_EXP 18
11782: PPUSH
11783: LD_STRING DH-Cam-4
11785: PPUSH
11786: CALL_OW 88
// if IsOk ( Kaia ) then
11790: LD_EXP 23
11794: PPUSH
11795: CALL_OW 302
11799: IFFALSE 11815
// Say ( Kaia , DK-Cam-5 ) else
11801: LD_EXP 23
11805: PPUSH
11806: LD_STRING DK-Cam-5
11808: PPUSH
11809: CALL_OW 88
11813: GO 11830
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11815: LD_EXP 31
11819: PPUSH
11820: LD_STRING DArm-Cam-5
11822: PPUSH
11823: LD_STRING DArf-Cam-5
11825: PPUSH
11826: CALL 2840 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11830: LD_EXP 27
11834: PPUSH
11835: LD_STRING DO-Cam-6
11837: PPUSH
11838: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11842: LD_EXP 27
11846: PPUSH
11847: LD_STRING DO-Cam-7
11849: PPUSH
11850: CALL_OW 88
// DialogueOff ;
11854: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11858: LD_STRING Radar
11860: PPUSH
11861: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11865: LD_INT 6
11867: PPUSH
11868: LD_INT 2
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11878: LD_INT 20
11880: PPUSH
11881: LD_INT 2
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 324
// end ;
11891: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11892: LD_INT 22
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 2
11904: PUSH
11905: LD_INT 34
11907: PUSH
11908: LD_INT 30
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 35
11917: PUSH
11918: LD_INT 30
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PPUSH
11934: CALL_OW 69
11938: IFFALSE 11950
11940: GO 11942
11942: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11943: LD_STRING RadarDone
11945: PPUSH
11946: CALL_OW 337
11950: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11951: LD_EXP 27
11955: PPUSH
11956: CALL_OW 302
11960: PUSH
11961: LD_EXP 30
11965: PPUSH
11966: CALL_OW 302
11970: AND
11971: PUSH
11972: LD_INT 6
11974: PPUSH
11975: LD_INT 2
11977: PPUSH
11978: CALL_OW 321
11982: PUSH
11983: LD_INT 2
11985: EQUAL
11986: AND
11987: PUSH
11988: LD_EXP 30
11992: PPUSH
11993: LD_EXP 18
11997: PPUSH
11998: CALL_OW 296
12002: PUSH
12003: LD_INT 10
12005: LESS
12006: PUSH
12007: LD_EXP 30
12011: PPUSH
12012: CALL_OW 310
12016: OR
12017: AND
12018: IFFALSE 12232
12020: GO 12022
12022: DISABLE
// begin DialogueOn ;
12023: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
12027: LD_EXP 30
12031: PPUSH
12032: LD_STRING DA-RC-1
12034: PPUSH
12035: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
12039: LD_EXP 30
12043: PPUSH
12044: LD_STRING DA-RC-2
12046: PPUSH
12047: CALL_OW 88
// if IsOk ( Kaia ) then
12051: LD_EXP 23
12055: PPUSH
12056: CALL_OW 302
12060: IFFALSE 12134
// begin Say ( Kaia , DK-RC-3 ) ;
12062: LD_EXP 23
12066: PPUSH
12067: LD_STRING DK-RC-3
12069: PPUSH
12070: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
12074: LD_EXP 30
12078: PPUSH
12079: LD_STRING DA-RC-4
12081: PPUSH
12082: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
12086: LD_EXP 23
12090: PPUSH
12091: LD_STRING DK-RC-5
12093: PPUSH
12094: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
12098: LD_EXP 30
12102: PPUSH
12103: LD_STRING DA-RC-6
12105: PPUSH
12106: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
12110: LD_EXP 23
12114: PPUSH
12115: LD_STRING DK-RC-7
12117: PPUSH
12118: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
12122: LD_EXP 30
12126: PPUSH
12127: LD_STRING DA-RC-8
12129: PPUSH
12130: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
12134: LD_EXP 18
12138: PPUSH
12139: LD_STRING DH-RC-9
12141: PPUSH
12142: CALL_OW 88
// if IsOk ( Markov ) then
12146: LD_EXP 25
12150: PPUSH
12151: CALL_OW 302
12155: IFFALSE 12183
// begin Say ( Markov , DMar-RC-10 ) ;
12157: LD_EXP 25
12161: PPUSH
12162: LD_STRING DMar-RC-10
12164: PPUSH
12165: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
12169: LD_EXP 25
12173: PPUSH
12174: LD_STRING DMar-RC-11
12176: PPUSH
12177: CALL_OW 88
// end else
12181: GO 12195
// begin Say ( Olaf , DO-RC-a-10 ) ;
12183: LD_EXP 27
12187: PPUSH
12188: LD_STRING DO-RC-a-10
12190: PPUSH
12191: CALL_OW 88
// end ; DialogueOff ;
12195: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
12199: LD_STRING RemoteControl
12201: PPUSH
12202: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
12206: LD_INT 15
12208: PPUSH
12209: LD_INT 2
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
12219: LD_INT 22
12221: PPUSH
12222: LD_INT 2
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 324
// end ;
12232: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
12233: LD_INT 12
12235: PPUSH
12236: LD_INT 22
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PPUSH
12246: CALL_OW 70
12250: IFFALSE 12617
12252: GO 12254
12254: DISABLE
12255: LD_INT 0
12257: PPUSH
// begin PrepareWestBase ;
12258: CALL 5653 0 0
// westBaseSpotted := true ;
12262: LD_ADDR_EXP 5
12266: PUSH
12267: LD_INT 1
12269: ST_TO_ADDR
// wait ( 0 0$2 ) ;
12270: LD_INT 70
12272: PPUSH
12273: CALL_OW 67
// InGameOn ;
12277: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
12281: LD_INT 56
12283: PPUSH
12284: LD_INT 77
12286: PPUSH
12287: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
12291: LD_INT 56
12293: PPUSH
12294: LD_INT 77
12296: PPUSH
12297: LD_INT 2
12299: PPUSH
12300: LD_INT 12
12302: NEG
12303: PPUSH
12304: CALL_OW 330
// wait ( 0 0$2 ) ;
12308: LD_INT 70
12310: PPUSH
12311: CALL_OW 67
// DialogueOn ;
12315: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
12319: LD_EXP 18
12323: PPUSH
12324: LD_STRING DH-Rbase-1
12326: PPUSH
12327: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
12331: LD_EXP 23
12335: PPUSH
12336: LD_STRING DK-Rbase-2
12338: PPUSH
12339: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
12343: LD_EXP 23
12347: PPUSH
12348: LD_STRING DK-Rbase-3
12350: PPUSH
12351: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
12355: LD_EXP 23
12359: PPUSH
12360: LD_STRING DK-Rbase-4
12362: PPUSH
12363: CALL_OW 88
// DialogueOff ;
12367: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
12371: LD_INT 56
12373: PPUSH
12374: LD_INT 77
12376: PPUSH
12377: LD_INT 2
12379: PPUSH
12380: CALL_OW 331
// InGameOff ;
12384: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
12388: LD_INT 35
12390: PPUSH
12391: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
12395: LD_EXP 39
12399: NOT
12400: PUSH
12401: LD_EXP 40
12405: NOT
12406: AND
12407: IFFALSE 12388
// wait ( 0 0$2 ) ;
12409: LD_INT 70
12411: PPUSH
12412: CALL_OW 67
// if IsOk ( Kaia ) then
12416: LD_EXP 23
12420: PPUSH
12421: CALL_OW 302
12425: IFFALSE 12540
// begin DialogueOn ;
12427: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
12431: LD_INT 56
12433: PPUSH
12434: LD_INT 81
12436: PPUSH
12437: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
12441: LD_EXP 23
12445: PPUSH
12446: LD_STRING DK-Rbase-5
12448: PPUSH
12449: CALL_OW 88
// if IsOk ( Givi ) then
12453: LD_EXP 19
12457: PPUSH
12458: CALL_OW 302
12462: IFFALSE 12536
// begin Say ( Givi , DG-Rbase-6 ) ;
12464: LD_EXP 19
12468: PPUSH
12469: LD_STRING DG-Rbase-6
12471: PPUSH
12472: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
12476: LD_EXP 19
12480: PPUSH
12481: LD_STRING DG-Rbase-7
12483: PPUSH
12484: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
12488: LD_EXP 23
12492: PPUSH
12493: LD_STRING DK-Rbase-8
12495: PPUSH
12496: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
12500: LD_EXP 19
12504: PPUSH
12505: LD_STRING DG-Rbase-9
12507: PPUSH
12508: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
12512: LD_EXP 19
12516: PPUSH
12517: LD_STRING DG-Rbase-10
12519: PPUSH
12520: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
12524: LD_EXP 23
12528: PPUSH
12529: LD_STRING DK-Rbase-11
12531: PPUSH
12532: CALL_OW 88
// end ; DialogueOff ;
12536: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
12540: LD_ADDR_VAR 0 1
12544: PUSH
12545: LD_INT 12
12547: PPUSH
12548: LD_INT 22
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 21
12560: PUSH
12561: LD_INT 3
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 70
12576: PUSH
12577: FOR_IN
12578: IFFALSE 12594
// SetSide ( i , 2 ) ;
12580: LD_VAR 0 1
12584: PPUSH
12585: LD_INT 2
12587: PPUSH
12588: CALL_OW 235
12592: GO 12577
12594: POP
12595: POP
// westBaseCaptured := true ;
12596: LD_ADDR_EXP 9
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12604: LD_INT 0
12606: PPUSH
12607: LD_INT 2
12609: PPUSH
12610: LD_INT 1
12612: PPUSH
12613: CALL_OW 324
// end ;
12617: PPOPN 1
12619: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12620: LD_EXP 35
12624: NOT
12625: PUSH
12626: LD_INT 10
12628: PPUSH
12629: CALL_OW 255
12633: PUSH
12634: LD_INT 2
12636: EQUAL
12637: OR
12638: IFFALSE 12775
12640: GO 12642
12642: DISABLE
// begin DialogueOn ;
12643: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12647: LD_EXP 18
12651: PPUSH
12652: LD_STRING DH-Goal-1
12654: PPUSH
12655: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12659: LD_EXP 26
12663: PPUSH
12664: LD_STRING DShar-Goal-2
12666: PPUSH
12667: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12671: LD_EXP 18
12675: PPUSH
12676: LD_STRING DH-Goal-3
12678: PPUSH
12679: CALL_OW 88
// if reinforcementsAllowed then
12683: LD_EXP 14
12687: IFFALSE 12713
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12689: LD_EXP 26
12693: PPUSH
12694: LD_STRING DShar-Goal-4
12696: PPUSH
12697: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12701: LD_EXP 18
12705: PPUSH
12706: LD_STRING DH-Goal-5
12708: PPUSH
12709: CALL_OW 88
// end ; DialogueOff ;
12713: CALL_OW 7
// eastBaseCaptured := true ;
12717: LD_ADDR_EXP 10
12721: PUSH
12722: LD_INT 1
12724: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12725: LD_STRING BaseCaptured
12727: PPUSH
12728: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12732: LD_INT 10
12734: PPUSH
12735: LD_INT 2
12737: PPUSH
12738: CALL_OW 235
// if not reinforcementsAllowed then
12742: LD_EXP 14
12746: NOT
12747: IFFALSE 12751
// exit ;
12749: GO 12775
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12751: LD_INT 21000
12753: PUSH
12754: LD_INT 1050
12756: NEG
12757: PPUSH
12758: LD_INT 1050
12760: PPUSH
12761: CALL_OW 12
12765: PLUS
12766: PPUSH
12767: CALL_OW 67
// PrepareReinforcements ;
12771: CALL 3981 0 0
// end ;
12775: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12776: LD_INT 22
12778: PUSH
12779: LD_INT 2
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 30
12788: PUSH
12789: LD_INT 13
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PPUSH
12800: CALL_OW 69
12804: IFFALSE 12821
12806: GO 12808
12808: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12809: LD_EXP 19
12813: PPUSH
12814: LD_STRING DG-Lab-1
12816: PPUSH
12817: CALL_OW 88
// end ;
12821: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched do
12822: LD_INT 5
12824: PPUSH
12825: LD_INT 2
12827: PPUSH
12828: CALL_OW 321
12832: PUSH
12833: LD_INT 2
12835: EQUAL
12836: IFFALSE 12897
12838: GO 12840
12840: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12841: LD_EXP 19
12845: PPUSH
12846: LD_STRING DG-Stim-1
12848: PPUSH
12849: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12853: LD_EXP 18
12857: PPUSH
12858: LD_STRING DH-Stim-2
12860: PPUSH
12861: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12865: LD_EXP 19
12869: PPUSH
12870: LD_STRING DG-Stim-3
12872: PPUSH
12873: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12877: LD_EXP 18
12881: PPUSH
12882: LD_STRING DH-Stim-4
12884: PPUSH
12885: CALL_OW 88
// drugsResearched := true ;
12889: LD_ADDR_EXP 11
12893: PUSH
12894: LD_INT 1
12896: ST_TO_ADDR
// end ;
12897: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12898: LD_EXP 11
12902: IFFALSE 13200
12904: GO 12906
12906: DISABLE
12907: LD_INT 0
12909: PPUSH
12910: PPUSH
12911: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12912: LD_ADDR_VAR 0 2
12916: PUSH
12917: LD_EXP 18
12921: PUSH
12922: LD_EXP 19
12926: PUSH
12927: LD_EXP 27
12931: PUSH
12932: LD_EXP 25
12936: PUSH
12937: LD_EXP 23
12941: PUSH
12942: LD_EXP 24
12946: PUSH
12947: LD_EXP 29
12951: PUSH
12952: LD_EXP 22
12956: PUSH
12957: LD_EXP 20
12961: PUSH
12962: LD_EXP 21
12966: PUSH
12967: LD_EXP 30
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12985: LD_ADDR_VAR 0 3
12989: PUSH
12990: LD_STRING H
12992: PUSH
12993: LD_STRING G
12995: PUSH
12996: LD_STRING O
12998: PUSH
12999: LD_STRING Mar
13001: PUSH
13002: LD_STRING K
13004: PUSH
13005: LD_STRING S
13007: PUSH
13008: LD_STRING Ks
13010: PUSH
13011: LD_STRING Kam
13013: PUSH
13014: LD_STRING M
13016: PUSH
13017: LD_STRING I
13019: PUSH
13020: LD_STRING A
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13036: LD_INT 35
13038: PPUSH
13039: CALL_OW 67
// for i := tmp downto 1 do
13043: LD_ADDR_VAR 0 1
13047: PUSH
13048: DOUBLE
13049: LD_VAR 0 2
13053: INC
13054: ST_TO_ADDR
13055: LD_INT 1
13057: PUSH
13058: FOR_DOWNTO
13059: IFFALSE 13191
// if GetLives ( tmp [ i ] ) < 250 then
13061: LD_VAR 0 2
13065: PUSH
13066: LD_VAR 0 1
13070: ARRAY
13071: PPUSH
13072: CALL_OW 256
13076: PUSH
13077: LD_INT 250
13079: LESS
13080: IFFALSE 13189
// begin DialogueOn ;
13082: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
13086: LD_VAR 0 2
13090: PUSH
13091: LD_VAR 0 1
13095: ARRAY
13096: PPUSH
13097: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
13101: LD_VAR 0 2
13105: PUSH
13106: LD_VAR 0 1
13110: ARRAY
13111: PPUSH
13112: LD_STRING D
13114: PUSH
13115: LD_VAR 0 3
13119: PUSH
13120: LD_VAR 0 1
13124: ARRAY
13125: STR
13126: PUSH
13127: LD_STRING -Stim-a-1
13129: STR
13130: PPUSH
13131: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
13135: LD_ADDR_VAR 0 2
13139: PUSH
13140: LD_VAR 0 2
13144: PPUSH
13145: LD_VAR 0 1
13149: PPUSH
13150: CALL_OW 3
13154: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13155: LD_ADDR_VAR 0 3
13159: PUSH
13160: LD_VAR 0 3
13164: PPUSH
13165: LD_VAR 0 1
13169: PPUSH
13170: CALL_OW 3
13174: ST_TO_ADDR
// drugsTested := true ;
13175: LD_ADDR_EXP 6
13179: PUSH
13180: LD_INT 1
13182: ST_TO_ADDR
// DialogueOff ;
13183: CALL_OW 7
// break ;
13187: GO 13191
// end ;
13189: GO 13058
13191: POP
13192: POP
// until not tmp ;
13193: LD_VAR 0 2
13197: NOT
13198: IFFALSE 13036
// end ;
13200: PPOPN 3
13202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
13203: LD_INT 22
13205: PUSH
13206: LD_INT 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 34
13215: PUSH
13216: LD_INT 31
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: PUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 2
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 33
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PPUSH
13256: CALL_OW 69
13260: AND
13261: IFFALSE 13274
13263: GO 13265
13265: DISABLE
// remoteControlConstructed := true ;
13266: LD_ADDR_EXP 12
13270: PUSH
13271: LD_INT 1
13273: ST_TO_ADDR
13274: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
13275: LD_EXP 12
13279: IFFALSE 13579
13281: GO 13283
13283: DISABLE
13284: LD_INT 0
13286: PPUSH
13287: PPUSH
13288: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
13289: LD_ADDR_VAR 0 2
13293: PUSH
13294: LD_EXP 18
13298: PUSH
13299: LD_EXP 19
13303: PUSH
13304: LD_EXP 27
13308: PUSH
13309: LD_EXP 25
13313: PUSH
13314: LD_EXP 23
13318: PUSH
13319: LD_EXP 24
13323: PUSH
13324: LD_EXP 29
13328: PUSH
13329: LD_EXP 22
13333: PUSH
13334: LD_EXP 20
13338: PUSH
13339: LD_EXP 21
13343: PUSH
13344: LD_EXP 30
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
13362: LD_ADDR_VAR 0 3
13366: PUSH
13367: LD_STRING H
13369: PUSH
13370: LD_STRING G
13372: PUSH
13373: LD_STRING O
13375: PUSH
13376: LD_STRING Mar
13378: PUSH
13379: LD_STRING K
13381: PUSH
13382: LD_STRING S
13384: PUSH
13385: LD_STRING Ks
13387: PUSH
13388: LD_STRING Kam
13390: PUSH
13391: LD_STRING M
13393: PUSH
13394: LD_STRING I
13396: PUSH
13397: LD_STRING A
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13413: LD_INT 35
13415: PPUSH
13416: CALL_OW 67
// for i := tmp downto 1 do
13420: LD_ADDR_VAR 0 1
13424: PUSH
13425: DOUBLE
13426: LD_VAR 0 2
13430: INC
13431: ST_TO_ADDR
13432: LD_INT 1
13434: PUSH
13435: FOR_DOWNTO
13436: IFFALSE 13570
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
13438: LD_VAR 0 2
13442: PUSH
13443: LD_VAR 0 1
13447: ARRAY
13448: PPUSH
13449: CALL_OW 257
13453: PUSH
13454: LD_INT 3
13456: EQUAL
13457: PUSH
13458: LD_VAR 0 2
13462: PUSH
13463: LD_VAR 0 1
13467: ARRAY
13468: PPUSH
13469: CALL_OW 432
13473: AND
13474: IFFALSE 13568
// begin DialogueOn ;
13476: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
13480: LD_VAR 0 2
13484: PUSH
13485: LD_VAR 0 1
13489: ARRAY
13490: PPUSH
13491: LD_STRING D
13493: PUSH
13494: LD_VAR 0 3
13498: PUSH
13499: LD_VAR 0 1
13503: ARRAY
13504: STR
13505: PUSH
13506: LD_STRING -RC-a-1
13508: STR
13509: PPUSH
13510: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: LD_VAR 0 2
13523: PPUSH
13524: LD_VAR 0 1
13528: PPUSH
13529: CALL_OW 3
13533: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13534: LD_ADDR_VAR 0 3
13538: PUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: LD_VAR 0 1
13548: PPUSH
13549: CALL_OW 3
13553: ST_TO_ADDR
// DialogueOff ;
13554: CALL_OW 7
// remoteControlTested := true ;
13558: LD_ADDR_EXP 7
13562: PUSH
13563: LD_INT 1
13565: ST_TO_ADDR
// break ;
13566: GO 13570
// end ;
13568: GO 13435
13570: POP
13571: POP
// until not tmp ;
13572: LD_VAR 0 2
13576: NOT
13577: IFFALSE 13413
// end ;
13579: PPOPN 3
13581: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13582: LD_EXP 7
13586: PUSH
13587: LD_EXP 25
13591: PPUSH
13592: CALL_OW 302
13596: AND
13597: IFFALSE 13626
13599: GO 13601
13601: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13602: LD_EXP 25
13606: PPUSH
13607: LD_STRING DMar-RC-a-2
13609: PPUSH
13610: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13614: LD_EXP 25
13618: PPUSH
13619: LD_STRING DMar-RC-a-3
13621: PPUSH
13622: CALL_OW 88
// end ;
13626: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13627: LD_EXP 14
13631: PUSH
13632: LD_EXP 18
13636: PPUSH
13637: LD_EXP 30
13641: PPUSH
13642: CALL_OW 296
13646: PUSH
13647: LD_INT 8
13649: LESS
13650: AND
13651: PUSH
13652: LD_INT 2
13654: PPUSH
13655: CALL_OW 463
13659: NOT
13660: AND
13661: PUSH
13662: LD_EXP 30
13666: PPUSH
13667: CALL_OW 302
13671: AND
13672: PUSH
13673: LD_EXP 18
13677: PPUSH
13678: CALL_OW 302
13682: AND
13683: IFFALSE 13861
13685: GO 13687
13687: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13688: LD_EXP 30
13692: PPUSH
13693: CALL_OW 310
13697: NOT
13698: IFFALSE 13714
// ComTurnUnit ( Aviradze , Heike ) ;
13700: LD_EXP 30
13704: PPUSH
13705: LD_EXP 18
13709: PPUSH
13710: CALL_OW 119
// if not IsInUnit ( Heike ) then
13714: LD_EXP 18
13718: PPUSH
13719: CALL_OW 310
13723: NOT
13724: IFFALSE 13740
// ComTurnUnit ( Heike , Aviradze ) ;
13726: LD_EXP 18
13730: PPUSH
13731: LD_EXP 30
13735: PPUSH
13736: CALL_OW 119
// wait ( 0 0$1 ) ;
13740: LD_INT 35
13742: PPUSH
13743: CALL_OW 67
// DialogueOn ;
13747: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13751: LD_EXP 30
13755: PPUSH
13756: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13760: LD_EXP 18
13764: PPUSH
13765: LD_STRING DH-Beria-1
13767: PPUSH
13768: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13772: LD_EXP 30
13776: PPUSH
13777: LD_STRING DA-Beria-2
13779: PPUSH
13780: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13784: LD_EXP 18
13788: PPUSH
13789: LD_STRING DH-Beria-3
13791: PPUSH
13792: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13796: LD_EXP 30
13800: PPUSH
13801: LD_STRING DA-Beria-4
13803: PPUSH
13804: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13808: LD_EXP 30
13812: PPUSH
13813: LD_STRING DA-Beria-5
13815: PPUSH
13816: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13820: LD_EXP 30
13824: PPUSH
13825: LD_STRING DA-Beria-6
13827: PPUSH
13828: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13832: LD_EXP 18
13836: PPUSH
13837: LD_STRING DA-Beria-7
13839: PPUSH
13840: CALL_OW 88
// DialogueOff ;
13844: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13848: LD_INT 52
13850: PPUSH
13851: LD_INT 2
13853: PPUSH
13854: LD_INT 1
13856: PPUSH
13857: CALL_OW 322
// end ;
13861: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
13862: LD_EXP 23
13866: PPUSH
13867: CALL_OW 256
13871: PUSH
13872: LD_INT 10
13874: LESS
13875: IFFALSE 13912
13877: GO 13879
13879: DISABLE
// begin DialogueOn ;
13880: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13884: LD_EXP 23
13888: PPUSH
13889: LD_STRING DK-Kdeath-1
13891: PPUSH
13892: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13896: LD_EXP 18
13900: PPUSH
13901: LD_STRING DH-Kdeath-2
13903: PPUSH
13904: CALL_OW 88
// DialogueOff ;
13908: CALL_OW 7
// end ;
13912: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13913: LD_INT 2
13915: PPUSH
13916: LD_EXP 36
13920: PPUSH
13921: CALL 2922 0 2
13925: IFFALSE 13942
13927: GO 13929
13929: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13930: LD_EXP 18
13934: PPUSH
13935: LD_STRING DH-Obj-1
13937: PPUSH
13938: CALL_OW 88
13942: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13943: LD_INT 2
13945: PPUSH
13946: LD_EXP 37
13950: PPUSH
13951: CALL 2922 0 2
13955: IFFALSE 13972
13957: GO 13959
13959: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13960: LD_EXP 18
13964: PPUSH
13965: LD_STRING DH-Obj-a-1
13967: PPUSH
13968: CALL_OW 88
13972: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
13973: LD_EXP 10
13977: PUSH
13978: LD_OWVAR 1
13982: PUSH
13983: LD_INT 14700
13985: PUSH
13986: LD_INT 13650
13988: PUSH
13989: LD_INT 12600
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: LD_OWVAR 67
14001: ARRAY
14002: GREATEREQUAL
14003: OR
14004: IFFALSE 14032
14006: GO 14008
14008: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
14009: LD_INT 4200
14011: PPUSH
14012: LD_INT 5250
14014: PPUSH
14015: CALL_OW 12
14019: PPUSH
14020: CALL_OW 67
// convoyStarted := true ;
14024: LD_ADDR_EXP 17
14028: PUSH
14029: LD_INT 1
14031: ST_TO_ADDR
// end ;
14032: END
// every 0 0$1 trigger convoyStarted do
14033: LD_EXP 17
14037: IFFALSE 14121
14039: GO 14041
14041: DISABLE
// begin DialogueOn ;
14042: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
14046: LD_EXP 26
14050: PPUSH
14051: LD_STRING DShar-Convoy-1
14053: PPUSH
14054: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
14058: LD_EXP 18
14062: PPUSH
14063: LD_STRING DH-Convoy-2
14065: PPUSH
14066: CALL_OW 88
// DialogueOff ;
14070: CALL_OW 7
// PrepareConvoy ;
14074: CALL 6292 0 0
// repeat wait ( rand ( 3 3$30 , 5 5$30 ) ) ;
14078: LD_INT 7350
14080: PPUSH
14081: LD_INT 11550
14083: PPUSH
14084: CALL_OW 12
14088: PPUSH
14089: CALL_OW 67
// PrepareConvoy ;
14093: CALL 6292 0 0
// convoyCounter := convoyCounter - 1 ;
14097: LD_ADDR_EXP 16
14101: PUSH
14102: LD_EXP 16
14106: PUSH
14107: LD_INT 1
14109: MINUS
14110: ST_TO_ADDR
// until convoyCounter <= 0 ;
14111: LD_EXP 16
14115: PUSH
14116: LD_INT 0
14118: LESSEQUAL
14119: IFFALSE 14078
// end ;
14121: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
14122: LD_EXP 15
14126: PUSH
14127: LD_INT 10
14129: GREATEREQUAL
14130: IFFALSE 14147
14132: GO 14134
14134: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
14135: LD_EXP 28
14139: PPUSH
14140: LD_STRING DOm-Fail-1
14142: PPUSH
14143: CALL_OW 94
14147: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
14148: LD_EXP 36
14152: NOT
14153: PUSH
14154: LD_EXP 37
14158: NOT
14159: AND
14160: IFFALSE 14172
14162: GO 14164
14164: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
14165: LD_STRING RaiderDone
14167: PPUSH
14168: CALL_OW 337
14172: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
14173: LD_INT 22
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 33
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PPUSH
14197: CALL_OW 69
14201: PUSH
14202: LD_INT 3
14204: GREATEREQUAL
14205: PUSH
14206: LD_INT 22
14208: PUSH
14209: LD_INT 2
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 34
14218: PUSH
14219: LD_INT 31
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PUSH
14235: LD_INT 2
14237: GREATEREQUAL
14238: AND
14239: IFFALSE 14251
14241: GO 14243
14243: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
14244: LD_STRING RemoteControlDone
14246: PPUSH
14247: CALL_OW 337
14251: END
// every 0 0$1 trigger convoyCounter = 0 and not ruConvoySquad do var tmp ;
14252: LD_EXP 16
14256: PUSH
14257: LD_INT 0
14259: EQUAL
14260: PUSH
14261: LD_EXP 38
14265: NOT
14266: AND
14267: IFFALSE 15041
14269: GO 14271
14271: DISABLE
14272: LD_INT 0
14274: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
14275: LD_STRING ReinforcementsDone
14277: PPUSH
14278: CALL_OW 337
// music_class := music_victory ;
14282: LD_ADDR_OWVAR 72
14286: PUSH
14287: LD_INT 4
14289: ST_TO_ADDR
// InGameOn ;
14290: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
14294: LD_EXP 18
14298: PPUSH
14299: LD_STRING DH-end-1
14301: PPUSH
14302: CALL_OW 88
// wait ( 0 0$2 ) ;
14306: LD_INT 70
14308: PPUSH
14309: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
14313: LD_EXP 26
14317: PPUSH
14318: LD_STRING DShar-end-2
14320: PPUSH
14321: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
14325: LD_EXP 36
14329: NOT
14330: PUSH
14331: LD_EXP 37
14335: NOT
14336: AND
14337: IFFALSE 14353
// begin Say ( Heike , DH-end-3 ) ;
14339: LD_EXP 18
14343: PPUSH
14344: LD_STRING DH-end-3
14346: PPUSH
14347: CALL_OW 88
// end else
14351: GO 14450
// begin Say ( Heike , DH-end-a-3 ) ;
14353: LD_EXP 18
14357: PPUSH
14358: LD_STRING DH-end-a-3
14360: PPUSH
14361: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
14365: LD_EXP 26
14369: PPUSH
14370: LD_STRING DShar-end-a-4
14372: PPUSH
14373: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
14377: LD_EXP 18
14381: PPUSH
14382: LD_STRING DH-end-a-5
14384: PPUSH
14385: CALL_OW 88
// InGameOff ;
14389: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
14393: LD_INT 35
14395: PPUSH
14396: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
14400: LD_INT 22
14402: PUSH
14403: LD_INT 3
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 21
14412: PUSH
14413: LD_INT 1
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PPUSH
14424: CALL_OW 69
14428: PUSH
14429: LD_INT 0
14431: EQUAL
14432: IFFALSE 14393
// InGameOn ;
14434: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
14438: LD_EXP 18
14442: PPUSH
14443: LD_STRING DH-end-a-6
14445: PPUSH
14446: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14450: LD_EXP 26
14454: PPUSH
14455: LD_STRING DShar-end-3
14457: PPUSH
14458: CALL_OW 94
// if drugsTested then
14462: LD_EXP 6
14466: IFFALSE 14480
// AddMedal ( med1 , 1 ) else
14468: LD_STRING med1
14470: PPUSH
14471: LD_INT 1
14473: PPUSH
14474: CALL_OW 101
14478: GO 14491
// AddMedal ( med1 , - 1 ) ;
14480: LD_STRING med1
14482: PPUSH
14483: LD_INT 1
14485: NEG
14486: PPUSH
14487: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
14491: LD_INT 22
14493: PUSH
14494: LD_INT 2
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 33
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PPUSH
14515: CALL_OW 69
14519: PUSH
14520: LD_INT 3
14522: GREATEREQUAL
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 34
14536: PUSH
14537: LD_INT 31
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PPUSH
14548: CALL_OW 69
14552: PUSH
14553: LD_INT 2
14555: GREATEREQUAL
14556: AND
14557: IFFALSE 14571
// AddMedal ( med2 , 1 ) else
14559: LD_STRING med2
14561: PPUSH
14562: LD_INT 1
14564: PPUSH
14565: CALL_OW 101
14569: GO 14582
// AddMedal ( med2 , - 1 ) ;
14571: LD_STRING med2
14573: PPUSH
14574: LD_INT 1
14576: NEG
14577: PPUSH
14578: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
14582: LD_EXP 15
14586: PUSH
14587: LD_INT 10
14589: PUSH
14590: LD_INT 8
14592: PUSH
14593: LD_INT 6
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: PUSH
14601: LD_OWVAR 67
14605: ARRAY
14606: LESS
14607: IFFALSE 14621
// AddMedal ( med3 , 1 ) else
14609: LD_STRING med3
14611: PPUSH
14612: LD_INT 1
14614: PPUSH
14615: CALL_OW 101
14619: GO 14632
// AddMedal ( med3 , - 1 ) ;
14621: LD_STRING med3
14623: PPUSH
14624: LD_INT 1
14626: NEG
14627: PPUSH
14628: CALL_OW 101
// GiveMedals ( MAIN ) ;
14632: LD_STRING MAIN
14634: PPUSH
14635: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14639: LD_INT 22
14641: PUSH
14642: LD_INT 2
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 23
14651: PUSH
14652: LD_INT 2
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 21
14661: PUSH
14662: LD_INT 1
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: PPUSH
14674: CALL_OW 69
14678: PPUSH
14679: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14683: LD_EXP 15
14687: PPUSH
14688: LD_STRING 05_ConvoySavedCounter
14690: PPUSH
14691: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14695: LD_EXP 13
14699: PPUSH
14700: LD_STRING 05_Radar
14702: PPUSH
14703: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14707: LD_EXP 6
14711: PPUSH
14712: LD_STRING 05_DrugsTested
14714: PPUSH
14715: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14719: LD_INT 22
14721: PUSH
14722: LD_INT 2
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 33
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PPUSH
14743: CALL_OW 69
14747: PUSH
14748: LD_INT 3
14750: GREATEREQUAL
14751: PUSH
14752: LD_INT 22
14754: PUSH
14755: LD_INT 2
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 34
14764: PUSH
14765: LD_INT 31
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PPUSH
14776: CALL_OW 69
14780: PUSH
14781: LD_INT 2
14783: GREATEREQUAL
14784: AND
14785: PPUSH
14786: LD_STRING 05_RemoteControl
14788: PPUSH
14789: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14793: LD_EXP 18
14797: PPUSH
14798: LD_STRING 05_Heike
14800: PPUSH
14801: CALL_OW 38
// if Aviradze then
14805: LD_EXP 30
14809: IFFALSE 14823
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14811: LD_EXP 30
14815: PPUSH
14816: LD_STRING 05_Aviradze
14818: PPUSH
14819: CALL_OW 38
// if Ibrahim then
14823: LD_EXP 21
14827: IFFALSE 14841
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14829: LD_EXP 21
14833: PPUSH
14834: LD_STRING 05_Ibrahim
14836: PPUSH
14837: CALL_OW 38
// if Kamil then
14841: LD_EXP 22
14845: IFFALSE 14859
// SaveCharacters ( Kamil , 05_Kamil ) ;
14847: LD_EXP 22
14851: PPUSH
14852: LD_STRING 05_Kamil
14854: PPUSH
14855: CALL_OW 38
// if Sophia then
14859: LD_EXP 24
14863: IFFALSE 14877
// SaveCharacters ( Sophia , 05_Sophia ) ;
14865: LD_EXP 24
14869: PPUSH
14870: LD_STRING 05_Sophia
14872: PPUSH
14873: CALL_OW 38
// if Kaia then
14877: LD_EXP 23
14881: IFFALSE 14895
// SaveCharacters ( Kaia , 05_Kaia ) ;
14883: LD_EXP 23
14887: PPUSH
14888: LD_STRING 05_Kaia
14890: PPUSH
14891: CALL_OW 38
// if Givi then
14895: LD_EXP 19
14899: IFFALSE 14913
// SaveCharacters ( Givi , 05_Givi ) ;
14901: LD_EXP 19
14905: PPUSH
14906: LD_STRING 05_Givi
14908: PPUSH
14909: CALL_OW 38
// if Mike then
14913: LD_EXP 20
14917: IFFALSE 14931
// SaveCharacters ( Mike , 05_Mike ) ;
14919: LD_EXP 20
14923: PPUSH
14924: LD_STRING 05_Mike
14926: PPUSH
14927: CALL_OW 38
// if Markov then
14931: LD_EXP 25
14935: IFFALSE 14949
// SaveCharacters ( Markov , 05_Markov ) ;
14937: LD_EXP 25
14941: PPUSH
14942: LD_STRING 05_Markov
14944: PPUSH
14945: CALL_OW 38
// if Kurt then
14949: LD_EXP 29
14953: IFFALSE 14967
// SaveCharacters ( Kurt , 05_Kurt ) ;
14955: LD_EXP 29
14959: PPUSH
14960: LD_STRING 05_Kurt
14962: PPUSH
14963: CALL_OW 38
// if heikeSecondSquad then
14967: LD_EXP 31
14971: IFFALSE 14985
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14973: LD_EXP 31
14977: PPUSH
14978: LD_STRING 05_others
14980: PPUSH
14981: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14985: LD_ADDR_VAR 0 1
14989: PUSH
14990: LD_INT 22
14992: PUSH
14993: LD_INT 2
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: LD_INT 23
15002: PUSH
15003: LD_INT 0
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: ST_TO_ADDR
// if tmp then
15019: LD_VAR 0 1
15023: IFFALSE 15037
// SaveCharacters ( tmp , 05_apes ) ;
15025: LD_VAR 0 1
15029: PPUSH
15030: LD_STRING 05_apes
15032: PPUSH
15033: CALL_OW 38
// YouWin ;
15037: CALL_OW 103
// end ; end_of_file
15041: PPOPN 1
15043: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
15044: LD_EXP 9
15048: PUSH
15049: LD_INT 13
15051: PPUSH
15052: LD_INT 1
15054: PPUSH
15055: CALL_OW 287
15059: PUSH
15060: LD_INT 25
15062: LESS
15063: AND
15064: IFFALSE 15091
15066: GO 15068
15068: DISABLE
// begin enable ;
15069: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15070: LD_INT 1
15072: PPUSH
15073: LD_INT 5
15075: PPUSH
15076: CALL_OW 12
15080: PPUSH
15081: LD_INT 13
15083: PPUSH
15084: LD_INT 1
15086: PPUSH
15087: CALL_OW 55
// end ; end_of_file
15091: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
15092: GO 15094
15094: DISABLE
// begin ru_radar := 98 ;
15095: LD_ADDR_EXP 41
15099: PUSH
15100: LD_INT 98
15102: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15103: LD_ADDR_EXP 42
15107: PUSH
15108: LD_INT 89
15110: ST_TO_ADDR
// us_hack := 99 ;
15111: LD_ADDR_EXP 43
15115: PUSH
15116: LD_INT 99
15118: ST_TO_ADDR
// us_artillery := 97 ;
15119: LD_ADDR_EXP 44
15123: PUSH
15124: LD_INT 97
15126: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15127: LD_ADDR_EXP 45
15131: PUSH
15132: LD_INT 91
15134: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15135: LD_ADDR_EXP 46
15139: PUSH
15140: LD_INT 92
15142: ST_TO_ADDR
// tech_Artillery := 80 ;
15143: LD_ADDR_EXP 47
15147: PUSH
15148: LD_INT 80
15150: ST_TO_ADDR
// tech_RadMat := 81 ;
15151: LD_ADDR_EXP 48
15155: PUSH
15156: LD_INT 81
15158: ST_TO_ADDR
// tech_BasicTools := 82 ;
15159: LD_ADDR_EXP 49
15163: PUSH
15164: LD_INT 82
15166: ST_TO_ADDR
// tech_Cargo := 83 ;
15167: LD_ADDR_EXP 50
15171: PUSH
15172: LD_INT 83
15174: ST_TO_ADDR
// tech_Track := 84 ;
15175: LD_ADDR_EXP 51
15179: PUSH
15180: LD_INT 84
15182: ST_TO_ADDR
// tech_Crane := 85 ;
15183: LD_ADDR_EXP 52
15187: PUSH
15188: LD_INT 85
15190: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15191: LD_ADDR_EXP 53
15195: PUSH
15196: LD_INT 86
15198: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15199: LD_ADDR_EXP 54
15203: PUSH
15204: LD_INT 87
15206: ST_TO_ADDR
// end ;
15207: END
