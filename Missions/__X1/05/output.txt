// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 2967 0 0
// Action ;
  39: CALL 8387 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 35505 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 35505 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 35505 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 35505 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 35505 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 35505 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 35505 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 35505 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 35505 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 35505 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 35505 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 35505 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 35505 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2189: LD_INT 35
2191: PPUSH
2192: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 428
2206: NOT
2207: IFFALSE 2189
// tmp := [ ] ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: EMPTY
2215: ST_TO_ADDR
// uc_side := 5 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 5
2223: ST_TO_ADDR
// uc_nation := 2 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2232: LD_ADDR_EXP 33
2236: PUSH
2237: LD_STRING Aviradze_L
2239: PPUSH
2240: LD_EXP 1
2244: NOT
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL 35505 0 3
2255: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2256: LD_EXP 33
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2268: LD_EXP 33
2272: PPUSH
2273: LD_INT 14
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2283: LD_EXP 33
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: CALL_OW 111
// AddComHold ( Aviradze ) ;
2298: LD_EXP 33
2302: PPUSH
2303: CALL_OW 200
// tmp := [ Aviradze ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_EXP 33
2316: PUSH
2317: EMPTY
2318: LIST
2319: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2320: LD_INT 70
2322: PPUSH
2323: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2327: LD_STRING Ibrahim_L
2329: PPUSH
2330: LD_EXP 1
2334: NOT
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL 35505 0 3
2345: IFFALSE 2445
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2347: LD_ADDR_EXP 24
2351: PUSH
2352: LD_STRING Ibrahim_L
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 35505 0 3
2370: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2371: LD_EXP 24
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2383: LD_EXP 24
2387: PPUSH
2388: LD_INT 14
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2398: LD_EXP 24
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: LD_INT 7
2408: PPUSH
2409: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2413: LD_EXP 24
2417: PPUSH
2418: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_EXP 24
2436: ADD
2437: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2438: LD_INT 70
2440: PPUSH
2441: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2445: LD_STRING Kaia_L
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_VAR 0 2
2458: PPUSH
2459: CALL 35505 0 3
2463: IFFALSE 2563
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2465: LD_ADDR_EXP 26
2469: PUSH
2470: LD_STRING Kaia_L
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 35505 0 3
2488: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2489: LD_EXP 26
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2501: LD_EXP 26
2505: PPUSH
2506: LD_INT 14
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2516: LD_EXP 26
2520: PPUSH
2521: LD_INT 8
2523: PPUSH
2524: LD_INT 7
2526: PPUSH
2527: CALL_OW 111
// AddComHold ( Kaia ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 200
// tmp := tmp ^ Kaia ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_VAR 0 4
2549: PUSH
2550: LD_EXP 26
2554: ADD
2555: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2563: LD_STRING Kamil_L
2565: PPUSH
2566: LD_EXP 1
2570: NOT
2571: PPUSH
2572: LD_VAR 0 2
2576: PPUSH
2577: CALL 35505 0 3
2581: IFFALSE 2681
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2583: LD_ADDR_EXP 25
2587: PUSH
2588: LD_STRING Kamil_L
2590: PPUSH
2591: LD_EXP 1
2595: NOT
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL 35505 0 3
2606: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2607: LD_EXP 25
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2619: LD_EXP 25
2623: PPUSH
2624: LD_INT 14
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2634: LD_EXP 25
2638: PPUSH
2639: LD_INT 8
2641: PPUSH
2642: LD_INT 7
2644: PPUSH
2645: CALL_OW 111
// AddComHold ( Kamil ) ;
2649: LD_EXP 25
2653: PPUSH
2654: CALL_OW 200
// tmp := tmp ^ Kamil ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 4
2667: PUSH
2668: LD_EXP 25
2672: ADD
2673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2674: LD_INT 70
2676: PPUSH
2677: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2681: LD_STRING Sophia_L
2683: PPUSH
2684: LD_EXP 1
2688: NOT
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL 35505 0 3
2699: IFFALSE 2799
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2701: LD_ADDR_EXP 27
2705: PUSH
2706: LD_STRING Sophia_L
2708: PPUSH
2709: LD_EXP 1
2713: NOT
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL 35505 0 3
2724: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2725: LD_EXP 27
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 14
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2752: LD_EXP 27
2756: PPUSH
2757: LD_INT 9
2759: PPUSH
2760: LD_INT 6
2762: PPUSH
2763: CALL_OW 111
// AddComHold ( Sophia ) ;
2767: LD_EXP 27
2771: PPUSH
2772: CALL_OW 200
// tmp := tmp ^ Sophia ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_EXP 27
2790: ADD
2791: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_STRING 04_1_others_L
2806: PPUSH
2807: CALL_OW 31
2811: ST_TO_ADDR
// if tmp2 then
2812: LD_VAR 0 5
2816: IFFALSE 2913
// for i in tmp2 do
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2911
// begin SetDir ( i , 2 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2858: LD_ADDR_EXP 34
2862: PUSH
2863: LD_EXP 34
2867: PPUSH
2868: LD_EXP 34
2872: PUSH
2873: LD_INT 1
2875: PLUS
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 17
2894: PPUSH
2895: LD_INT 14
2897: PPUSH
2898: CALL_OW 111
// wait ( 0 0$2 ) ;
2902: LD_INT 70
2904: PPUSH
2905: CALL_OW 67
// end ;
2909: GO 2828
2911: POP
2912: POP
// for i in tmp union tmp2 do
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_VAR 0 5
2927: UNION
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2960
// begin SetSide ( i , 2 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2944: LD_VAR 0 3
2948: PPUSH
2949: LD_EXP 21
2953: PPUSH
2954: CALL_OW 112
// end ;
2958: GO 2929
2960: POP
2961: POP
// end ; end_of_file
2962: LD_VAR 0 1
2966: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
// uc_side := 3 ;
2972: LD_ADDR_OWVAR 20
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// uc_nation := 3 ;
2980: LD_ADDR_OWVAR 21
2984: PUSH
2985: LD_INT 3
2987: ST_TO_ADDR
// crossRoadGuard := [ ] ;
2988: LD_ADDR_EXP 37
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// oilBaseGuard := [ ] ;
2995: LD_ADDR_EXP 38
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3002: LD_ADDR_EXP 41
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// for i := 1 to 2 do
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: DOUBLE
3015: LD_INT 1
3017: DEC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_TO
3023: IFFALSE 3162
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3025: LD_INT 0
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: CALL_OW 380
// un := CreateHuman ;
3059: LD_ADDR_VAR 0 3
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_EXP 37
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: LD_VAR 0 3
3092: PPUSH
3093: CALL_OW 1
3097: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3098: LD_VAR 0 3
3102: PPUSH
3103: LD_INT 100
3105: PPUSH
3106: LD_INT 63
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3119: LD_VAR 0 3
3123: PPUSH
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 64
3129: PPUSH
3130: CALL_OW 428
3134: PUSH
3135: LD_INT 98
3137: PPUSH
3138: LD_INT 58
3140: PPUSH
3141: CALL_OW 428
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_VAR 0 2
3154: ARRAY
3155: PPUSH
3156: CALL_OW 120
// end ;
3160: GO 3022
3162: POP
3163: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3164: LD_INT 51
3166: PPUSH
3167: LD_INT 77
3169: PPUSH
3170: CALL_OW 428
3174: PPUSH
3175: CALL_OW 274
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 120
3185: PPUSH
3186: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3190: LD_INT 10
3192: PPUSH
3193: CALL_OW 274
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 300
3203: PPUSH
3204: CALL_OW 277
// for i := 1 to 2 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 2
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3340
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_OWVAR 67
3252: ARRAY
3253: PPUSH
3254: CALL_OW 380
// un := CreateHuman ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_EXP 38
3277: PPUSH
3278: LD_EXP 38
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 1
3296: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 198
3304: PPUSH
3305: LD_INT 106
3307: PPUSH
3308: CALL_OW 428
3312: PUSH
3313: LD_INT 205
3315: PPUSH
3316: LD_INT 114
3318: PPUSH
3319: CALL_OW 428
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PPUSH
3334: CALL_OW 52
// end ;
3338: GO 3221
3340: POP
3341: POP
// for i := 1 to 2 do
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: DOUBLE
3348: LD_INT 1
3350: DEC
3351: ST_TO_ADDR
3352: LD_INT 2
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3433
// begin PrepareHuman ( false , 2 , 3 ) ;
3358: LD_INT 0
3360: PPUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 380
// un := CreateHuman ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: CALL_OW 44
3380: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PPUSH
3391: LD_EXP 38
3395: PUSH
3396: LD_INT 1
3398: PLUS
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 204
3417: PPUSH
3418: LD_INT 108
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 50
// end ;
3431: GO 3355
3433: POP
3434: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 1
3499: PPUSH
3500: LD_INT 5
3502: PPUSH
3503: CALL_OW 12
3507: ARRAY
3508: PPUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 10
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 72112 0 3
3562: IFFALSE 3614
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3564: LD_ADDR_EXP 39
3568: PUSH
3569: LD_EXP 39
3573: PPUSH
3574: LD_EXP 39
3578: PUSH
3579: LD_INT 1
3581: PLUS
3582: PPUSH
3583: LD_VAR 0 3
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// if Prob ( 50 ) then
3593: LD_INT 50
3595: PPUSH
3596: CALL_OW 13
3600: IFFALSE 3614
// ForceSleep ( un , true ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 585
// end ; end ;
3614: GO 3469
3616: POP
3617: POP
// for i := 1 to 3 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 3
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3726
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_OWVAR 67
3662: ARRAY
3663: PPUSH
3664: CALL_OW 380
// un := CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL 72112 0 3
3693: IFFALSE 3724
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3695: LD_ADDR_EXP 39
3699: PUSH
3700: LD_EXP 39
3704: PPUSH
3705: LD_EXP 39
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: PPUSH
3714: LD_VAR 0 3
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: GO 3631
3726: POP
3727: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3909
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PPUSH
3826: CALL_OW 380
// un := CreateHuman ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_INT 15
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 72112 0 3
3855: IFFALSE 3907
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PPUSH
3867: LD_EXP 40
3871: PUSH
3872: LD_INT 1
3874: PLUS
3875: PPUSH
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 1
3885: ST_TO_ADDR
// if Prob ( 50 ) then
3886: LD_INT 50
3888: PPUSH
3889: CALL_OW 13
3893: IFFALSE 3907
// ForceSleep ( un , true ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 585
// end ; end ;
3907: GO 3762
3909: POP
3910: POP
// end ;
3911: LD_VAR 0 1
3915: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation := 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// for i := 1 to 6 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 6
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4030
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 4
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 380
// un := CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 54
4002: PPUSH
4003: LD_INT 88
4005: PPUSH
4006: LD_INT 12
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 50
// SetLives ( un , 1 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3950
4030: POP
4031: POP
// uc_side := 3 ;
4032: LD_ADDR_OWVAR 20
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// uc_nation := 0 ;
4040: LD_ADDR_OWVAR 21
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4048: LD_ADDR_EXP 42
4052: PUSH
4053: EMPTY
4054: ST_TO_ADDR
// apeEngGroup := [ ] ;
4055: LD_ADDR_EXP 43
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: LD_INT 6
4080: PUSH
4081: LD_INT 7
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4215
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4099: LD_INT 0
4101: PPUSH
4102: LD_INT 15
4104: PPUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: LD_INT 6
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4143: LD_ADDR_EXP 42
4147: PUSH
4148: LD_EXP 42
4152: PPUSH
4153: LD_EXP 42
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 12
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 56
4199: PPUSH
4200: LD_INT 82
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 50
// end ;
4213: GO 4096
4215: POP
4216: POP
// for i := 1 to 2 do
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: DOUBLE
4223: LD_INT 1
4225: DEC
4226: ST_TO_ADDR
4227: LD_INT 2
4229: PUSH
4230: FOR_TO
4231: IFFALSE 4307
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 16
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: CALL_OW 380
// un := CreateHuman ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 44
4255: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4256: LD_ADDR_EXP 43
4260: PUSH
4261: LD_EXP 43
4265: PPUSH
4266: LD_EXP 43
4270: PUSH
4271: LD_INT 1
4273: PLUS
4274: PPUSH
4275: LD_VAR 0 3
4279: PPUSH
4280: CALL_OW 1
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 51
4292: PPUSH
4293: LD_INT 77
4295: PPUSH
4296: CALL_OW 428
4300: PPUSH
4301: CALL_OW 52
// end ;
4305: GO 4230
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4314: LD_EXP 42
4318: PPUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 24
4324: PUSH
4325: LD_INT 600
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 54
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 72
4357: PUSH
4358: LD_INT 66
4360: PPUSH
4361: LD_INT 89
4363: PPUSH
4364: CALL_OW 428
4368: PPUSH
4369: CALL_OW 302
4373: AND
4374: IFFALSE 4459
4376: GO 4378
4378: DISABLE
4379: LD_INT 0
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_EXP 42
4392: PPUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 24
4398: PUSH
4399: LD_INT 600
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 54
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4457
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 66
4442: PPUSH
4443: LD_INT 89
4445: PPUSH
4446: CALL_OW 428
4450: PPUSH
4451: CALL_OW 120
4455: GO 4432
4457: POP
4458: POP
// end ;
4459: PPOPN 1
4461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4462: LD_INT 22
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 92
4474: PUSH
4475: LD_INT 54
4477: PUSH
4478: LD_INT 77
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: IFFALSE 4562
4500: GO 4502
4502: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4503: LD_EXP 43
4507: PPUSH
4508: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4512: LD_EXP 43
4516: PPUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 2
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 92
4529: PUSH
4530: LD_INT 54
4532: PUSH
4533: LD_INT 77
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PPUSH
4558: CALL_OW 175
// end ;
4562: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_INT 3
4585: PPUSH
4586: CALL_OW 12
4590: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4591: LD_ADDR_VAR 0 5
4595: PUSH
4596: LD_INT 16
4598: PUSH
4599: LD_INT 17
4601: PUSH
4602: LD_INT 19
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 159
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 137
4633: PUSH
4634: LD_INT 37
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 123
4643: PUSH
4644: LD_INT 55
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 115
4653: PUSH
4654: LD_INT 71
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 88
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 97
4673: PUSH
4674: LD_INT 114
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 75
4683: PUSH
4684: LD_INT 146
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 206
4702: PUSH
4703: LD_INT 135
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 184
4712: PUSH
4713: LD_INT 111
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 154
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 122
4732: PUSH
4733: LD_INT 80
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 109
4742: PUSH
4743: LD_INT 78
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 97
4752: PUSH
4753: LD_INT 113
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 75
4762: PUSH
4763: LD_INT 147
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 185
4781: PUSH
4782: LD_INT 72
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 171
4791: PUSH
4792: LD_INT 83
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 161
4801: PUSH
4802: LD_INT 99
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 125
4811: PUSH
4812: LD_INT 82
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 90
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 96
4831: PUSH
4832: LD_INT 116
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 75
4841: PUSH
4842: LD_INT 147
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 3
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4869: LD_ADDR_VAR 0 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 3
4892: ARRAY
4893: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 20
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: LD_VAR 0 3
4917: ARRAY
4918: ST_TO_ADDR
// for i := 1 to 2 do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_INT 2
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4951
// EraseResourceArea ( i , outerSpawnArea ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 286
4949: GO 4932
4951: POP
4952: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 70
5001: IFFALSE 5216
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5010: LD_VAR 0 6
5014: PPUSH
5015: LD_INT 2
5017: PUSH
5018: LD_INT 21
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: PPUSH
5043: CALL_OW 70
5047: IFFALSE 5108
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5106
// RemoveUnit ( i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: CALL_OW 64
5104: GO 5092
5106: POP
5107: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5176
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 6
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5174
// ComMoveXY ( i , 113 , 53 ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_INT 113
5164: PPUSH
5165: LD_INT 53
5167: PPUSH
5168: CALL_OW 111
5172: GO 5154
5174: POP
5175: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 21
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 70
5213: NOT
5214: IFFALSE 5003
// case convoyCounter of 1 .. 3 :
5216: LD_EXP 16
5220: PUSH
5221: LD_INT 1
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 3
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5870
5235: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 5
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 7
5254: PUSH
5255: LD_INT 8
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_OWVAR 67
5268: ARRAY
5269: PUSH
5270: LD_EXP 16
5274: MINUS
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5484
// begin uc_side := 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation := 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL_OW 12
5326: ARRAY
5327: PPUSH
5328: LD_INT 4
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 7
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 8
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// SetDir ( un , dir ) ;
5366: LD_VAR 0 8
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: CALL 72112 0 3
5397: IFFALSE 5482
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5399: LD_ADDR_EXP 41
5403: PUSH
5404: LD_EXP 41
5408: PPUSH
5409: LD_EXP 41
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 8
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5428: LD_VAR 0 8
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 111
// wait ( 0 0$2 ) ;
5475: LD_INT 70
5477: PPUSH
5478: CALL_OW 67
// end ; end ;
5482: GO 5276
5484: POP
5485: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: DOUBLE
5492: LD_INT 1
5494: DEC
5495: ST_TO_ADDR
5496: LD_INT 3
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: LD_OWVAR 67
5518: ARRAY
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5866
// begin uc_side := 3 ;
5523: LD_ADDR_OWVAR 20
5527: PUSH
5528: LD_INT 3
5530: ST_TO_ADDR
// uc_nation := 3 ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_INT 3
5538: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5539: LD_INT 3
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 24
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_OWVAR 67
5575: PPUSH
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: PLUS
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 42
5599: PUSH
5600: LD_INT 44
5602: PUSH
5603: LD_INT 43
5605: PUSH
5606: LD_INT 44
5608: PUSH
5609: LD_INT 46
5611: PUSH
5612: LD_INT 46
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_OWVAR 67
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: CALL_OW 12
5639: ARRAY
5640: PPUSH
5641: LD_INT 90
5643: PPUSH
5644: CALL 439 0 7
// un := CreateVehicle ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: CALL_OW 45
5657: ST_TO_ADDR
// SetDir ( un , dir ) ;
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5672: LD_VAR 0 8
5676: PPUSH
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL 72112 0 3
5689: IFFALSE 5864
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5691: LD_ADDR_EXP 41
5695: PUSH
5696: LD_EXP 41
5700: PPUSH
5701: LD_EXP 41
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: LD_VAR 0 8
5714: PPUSH
5715: CALL_OW 1
5719: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 3
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 6
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 383
// un := CreateHuman ;
5751: LD_ADDR_VAR 0 8
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_EXP 41
5775: ARRAY
5776: PPUSH
5777: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5781: LD_ADDR_EXP 41
5785: PUSH
5786: LD_EXP 41
5790: PPUSH
5791: LD_EXP 41
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 8
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5810: LD_VAR 0 8
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5822: LD_VAR 0 8
5826: PPUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: ARRAY
5852: PPUSH
5853: CALL_OW 111
// wait ( 0 0$3 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// end ; end ;
5864: GO 5520
5866: POP
5867: POP
// end ; 4 .. 7 :
5868: GO 6475
5870: LD_INT 4
5872: DOUBLE
5873: GREATEREQUAL
5874: IFFALSE 5882
5876: LD_INT 7
5878: DOUBLE
5879: LESSEQUAL
5880: IFTRUE 5884
5882: GO 6474
5884: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_INT 2
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: LD_OWVAR 67
5917: ARRAY
5918: PUSH
5919: FOR_TO
5920: IFFALSE 6100
// begin uc_side := 3 ;
5922: LD_ADDR_OWVAR 20
5926: PUSH
5927: LD_INT 3
5929: ST_TO_ADDR
// uc_nation := 3 ;
5930: LD_ADDR_OWVAR 21
5934: PUSH
5935: LD_INT 3
5937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 4
5946: PUSH
5947: LD_INT 5
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 7
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 72112 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5919
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6470
// begin uc_side := 3 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 3
6146: ST_TO_ADDR
// uc_nation := 3 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 3
6160: PPUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 42
6191: PUSH
6192: LD_INT 44
6194: PUSH
6195: LD_INT 43
6197: PUSH
6198: LD_INT 44
6200: PUSH
6201: LD_INT 44
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 1
6213: PPUSH
6214: LD_OWVAR 67
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: PPUSH
6229: LD_INT 90
6231: PPUSH
6232: CALL 439 0 7
// un := CreateVehicle ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 45
6245: ST_TO_ADDR
// SetDir ( un , dir ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL 72112 0 3
6277: IFFALSE 6468
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6279: LD_ADDR_EXP 41
6283: PUSH
6284: LD_EXP 41
6288: PPUSH
6289: LD_EXP 41
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: PPUSH
6298: LD_VAR 0 8
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// uc_side := 3 ;
6308: LD_ADDR_OWVAR 20
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// uc_nation := 3 ;
6316: LD_ADDR_OWVAR 21
6320: PUSH
6321: LD_INT 3
6323: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6324: LD_INT 0
6326: PPUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: LD_INT 6
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_OWVAR 67
6349: ARRAY
6350: PPUSH
6351: CALL_OW 383
// un := CreateHuman ;
6355: LD_ADDR_VAR 0 8
6359: PUSH
6360: CALL_OW 44
6364: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6365: LD_VAR 0 8
6369: PPUSH
6370: LD_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: ARRAY
6380: PPUSH
6381: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6385: LD_ADDR_EXP 41
6389: PUSH
6390: LD_EXP 41
6394: PPUSH
6395: LD_EXP 41
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 8
6408: PPUSH
6409: CALL_OW 1
6413: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6414: LD_VAR 0 8
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6426: LD_VAR 0 8
6430: PPUSH
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 7
6448: PUSH
6449: LD_INT 1
6451: ARRAY
6452: PUSH
6453: LD_INT 2
6455: ARRAY
6456: PPUSH
6457: CALL_OW 111
// wait ( 0 0$2 ) ;
6461: LD_INT 70
6463: PPUSH
6464: CALL_OW 67
// end ; end ;
6468: GO 6136
6470: POP
6471: POP
// end ; end ;
6472: GO 6475
6474: POP
// repeat wait ( 0 0$1 ) ;
6475: LD_INT 35
6477: PPUSH
6478: CALL_OW 67
// for un in ruConvoySquad do
6482: LD_ADDR_VAR 0 8
6486: PUSH
6487: LD_EXP 41
6491: PUSH
6492: FOR_IN
6493: IFFALSE 7117
// begin if IsInArea ( un , westSouthOutArea ) then
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_INT 18
6502: PPUSH
6503: CALL_OW 308
6507: IFFALSE 6595
// begin if GetType ( un ) = unit_vehicle then
6509: LD_VAR 0 8
6513: PPUSH
6514: CALL_OW 247
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6554
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: PPUSH
6539: CALL_OW 311
6543: DIFF
6544: ST_TO_ADDR
// RemoveUnit ( un ) ;
6545: LD_VAR 0 8
6549: PPUSH
6550: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6554: LD_ADDR_EXP 15
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6568: LD_ADDR_EXP 41
6572: PUSH
6573: LD_EXP 41
6577: PUSH
6578: LD_VAR 0 8
6582: DIFF
6583: ST_TO_ADDR
// RemoveUnit ( un ) ;
6584: LD_VAR 0 8
6588: PPUSH
6589: CALL_OW 64
// break ;
6593: GO 7117
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6595: LD_VAR 0 8
6599: PPUSH
6600: CALL_OW 305
6604: NOT
6605: PUSH
6606: LD_VAR 0 8
6610: PPUSH
6611: CALL_OW 310
6615: NOT
6616: AND
6617: IFFALSE 6635
// ruConvoySquad := ruConvoySquad diff un ;
6619: LD_ADDR_EXP 41
6623: PUSH
6624: LD_EXP 41
6628: PUSH
6629: LD_VAR 0 8
6633: DIFF
6634: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6635: LD_VAR 0 8
6639: PPUSH
6640: CALL_OW 302
6644: PUSH
6645: LD_VAR 0 8
6649: PPUSH
6650: CALL_OW 314
6654: NOT
6655: AND
6656: IFFALSE 7115
// begin tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 9
6662: PUSH
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6673: LD_VAR 0 8
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: LD_INT 1
6690: PLUS
6691: ARRAY
6692: PUSH
6693: LD_INT 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 9
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: ARRAY
6711: PUSH
6712: LD_INT 2
6714: ARRAY
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: IFFALSE 6907
// begin SetTag ( un , tag + 1 ) ;
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL_OW 247
6753: PUSH
6754: LD_INT 2
6756: EQUAL
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 257
6767: PUSH
6768: LD_INT 3
6770: EQUAL
6771: OR
6772: IFFALSE 6905
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6774: LD_ADDR_VAR 0 10
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 91
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: ST_TO_ADDR
// if enemy then
6814: LD_VAR 0 10
6818: IFFALSE 6846
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: LD_VAR 0 8
6834: PPUSH
6835: CALL_OW 74
6839: PPUSH
6840: CALL_OW 115
6844: GO 6905
// begin AddComWait ( un , 0 0$4 ) ;
6846: LD_VAR 0 8
6850: PPUSH
6851: LD_INT 140
6853: PPUSH
6854: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6858: LD_VAR 0 8
6862: PPUSH
6863: LD_VAR 0 7
6867: PUSH
6868: LD_VAR 0 9
6872: PUSH
6873: LD_INT 1
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 7
6886: PUSH
6887: LD_VAR 0 9
6891: PUSH
6892: LD_INT 1
6894: PLUS
6895: ARRAY
6896: PUSH
6897: LD_INT 2
6899: ARRAY
6900: PPUSH
6901: CALL_OW 174
// end ; end ; end else
6905: GO 7115
// begin if GetClass ( un ) = 4 then
6907: LD_VAR 0 8
6911: PPUSH
6912: CALL_OW 257
6916: PUSH
6917: LD_INT 4
6919: EQUAL
6920: IFFALSE 7068
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6922: LD_EXP 41
6926: PPUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: LD_INT 24
6942: PUSH
6943: LD_INT 1000
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: IFFALSE 7020
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6964: LD_VAR 0 8
6968: PPUSH
6969: LD_EXP 41
6973: PPUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 1000
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PPUSH
7014: CALL_OW 128
7018: GO 7066
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7020: LD_VAR 0 8
7024: PPUSH
7025: LD_EXP 41
7029: PPUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PPUSH
7052: LD_VAR 0 8
7056: PPUSH
7057: CALL_OW 74
7061: PPUSH
7062: CALL_OW 112
7066: GO 7115
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7068: LD_VAR 0 8
7072: PPUSH
7073: LD_VAR 0 7
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ARRAY
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 7
7096: PUSH
7097: LD_VAR 0 9
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 114
// end ; end ; end ;
7115: GO 6492
7117: POP
7118: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7119: LD_EXP 41
7123: PPUSH
7124: LD_INT 52
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: NOT
7149: IFFALSE 6475
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7156: LD_EXP 16
7160: PUSH
7161: LD_INT 3
7163: PPUSH
7164: LD_INT 5
7166: PPUSH
7167: CALL_OW 12
7171: LESS
7172: PUSH
7173: LD_EXP 41
7177: NOT
7178: AND
7179: PUSH
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: AND
7189: IFFALSE 7609
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: DOUBLE
7205: LD_INT 1
7207: DEC
7208: ST_TO_ADDR
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_OWVAR 67
7231: ARRAY
7232: PUSH
7233: FOR_TO
7234: IFFALSE 7530
// begin uc_side := 3 ;
7236: LD_ADDR_OWVAR 20
7240: PUSH
7241: LD_INT 3
7243: ST_TO_ADDR
// uc_nation := 3 ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7252: LD_INT 3
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 24
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_OWVAR 67
7288: PPUSH
7289: LD_OWVAR 67
7293: PUSH
7294: LD_INT 2
7296: PLUS
7297: PPUSH
7298: CALL_OW 12
7302: ARRAY
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 42
7312: PUSH
7313: LD_INT 44
7315: PUSH
7316: LD_INT 43
7318: PUSH
7319: LD_INT 44
7321: PUSH
7322: LD_INT 46
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 1
7338: PPUSH
7339: LD_OWVAR 67
7343: PUSH
7344: LD_INT 2
7346: PLUS
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 90
7356: PPUSH
7357: CALL 439 0 7
// un := CreateVehicle ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 45
7370: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7383: LD_VAR 0 3
7387: PPUSH
7388: LD_INT 23
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL 72112 0 3
7398: IFFALSE 7528
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
// uc_side := 3 ;
7429: LD_ADDR_OWVAR 20
7433: PUSH
7434: LD_INT 3
7436: ST_TO_ADDR
// uc_nation := 3 ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_INT 3
7444: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7445: LD_INT 0
7447: PPUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_OWVAR 67
7470: ARRAY
7471: PPUSH
7472: CALL_OW 383
// un := CreateHuman ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: CALL_OW 44
7485: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: PPUSH
7502: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 80
7513: PPUSH
7514: LD_INT 139
7516: PPUSH
7517: CALL_OW 111
// wait ( 0 0$3 ) ;
7521: LD_INT 105
7523: PPUSH
7524: CALL_OW 67
// end ; end ;
7528: GO 7233
7530: POP
7531: POP
// for i in tmp do
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7607
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 101
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 110
7567: PPUSH
7568: LD_INT 78
7570: PPUSH
7571: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: LD_INT 75
7582: PPUSH
7583: LD_INT 101
7585: PPUSH
7586: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 57
7597: PPUSH
7598: LD_INT 83
7600: PPUSH
7601: CALL_OW 174
// end ;
7605: GO 7542
7607: POP
7608: POP
// end ;
7609: PPOPN 3
7611: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7612: LD_EXP 39
7616: PPUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: LD_INT 1000
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 72
7638: PUSH
7639: LD_EXP 40
7643: PPUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 1000
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: OR
7666: IFFALSE 7765
7668: GO 7670
7670: DISABLE
7671: LD_INT 0
7673: PPUSH
// begin enable ;
7674: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 39
7684: PPUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: LD_INT 1000
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 72
7706: PUSH
7707: LD_EXP 40
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: LD_INT 1000
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 72
7733: UNION
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7763
// if IsSleeping ( i ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 555
7747: IFFALSE 7761
// ForceSleep ( i , false ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 585
7761: GO 7735
7763: POP
7764: POP
// end ;
7765: PPOPN 1
7767: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7768: LD_EXP 38
7772: PPUSH
7773: LD_INT 1
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: LD_INT 54
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 3
7791: PUSH
7792: LD_INT 95
7794: PUSH
7795: LD_INT 26
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: PPUSH
7811: CALL_OW 72
7815: IFFALSE 7910
7817: GO 7819
7819: DISABLE
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
// begin enable ;
7824: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7825: LD_ADDR_VAR 0 2
7829: PUSH
7830: LD_EXP 38
7834: PPUSH
7835: LD_INT 1
7837: PUSH
7838: LD_INT 3
7840: PUSH
7841: LD_INT 54
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 95
7856: PUSH
7857: LD_INT 26
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: ST_TO_ADDR
// for i in tmp do
7878: LD_ADDR_VAR 0 1
7882: PUSH
7883: LD_VAR 0 2
7887: PUSH
7888: FOR_IN
7889: IFFALSE 7908
// ComMoveXY ( i , 206 , 110 ) ;
7891: LD_VAR 0 1
7895: PPUSH
7896: LD_INT 206
7898: PPUSH
7899: LD_INT 110
7901: PPUSH
7902: CALL_OW 111
7906: GO 7888
7908: POP
7909: POP
// end ;
7910: PPOPN 2
7912: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7913: LD_INT 26
7915: PPUSH
7916: LD_INT 22
7918: PUSH
7919: LD_INT 2
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 70
7930: PUSH
7931: LD_INT 26
7933: PPUSH
7934: LD_INT 22
7936: PUSH
7937: LD_INT 3
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: LD_INT 30
7946: PUSH
7947: LD_INT 32
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 50
7956: PUSH
7957: EMPTY
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: AND
7970: IFFALSE 8049
7972: GO 7974
7974: DISABLE
7975: LD_INT 0
7977: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_INT 26
7985: PPUSH
7986: LD_INT 22
7988: PUSH
7989: LD_INT 3
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 30
7998: PUSH
7999: LD_INT 32
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 50
8008: PUSH
8009: EMPTY
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 70
8021: PUSH
8022: FOR_IN
8023: IFFALSE 8047
// if IsInUnit ( i ) then
8025: LD_VAR 0 1
8029: PPUSH
8030: CALL_OW 310
8034: IFFALSE 8045
// ComExitBuilding ( i ) ;
8036: LD_VAR 0 1
8040: PPUSH
8041: CALL_OW 122
8045: GO 8022
8047: POP
8048: POP
// end ; end_of_file
8049: PPOPN 1
8051: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8052: LD_VAR 0 1
8056: PPUSH
8057: CALL 14975 0 1
// if un = Heike then
8061: LD_VAR 0 1
8065: PUSH
8066: LD_EXP 21
8070: EQUAL
8071: IFFALSE 8080
// YouLost ( Heike ) ;
8073: LD_STRING Heike
8075: PPUSH
8076: CALL_OW 104
// if un in apeSoldGroup then
8080: LD_VAR 0 1
8084: PUSH
8085: LD_EXP 42
8089: IN
8090: IFFALSE 8108
// apeSoldGroup := apeSoldGroup diff un ;
8092: LD_ADDR_EXP 42
8096: PUSH
8097: LD_EXP 42
8101: PUSH
8102: LD_VAR 0 1
8106: DIFF
8107: ST_TO_ADDR
// if un in apeEngGroup then
8108: LD_VAR 0 1
8112: PUSH
8113: LD_EXP 43
8117: IN
8118: IFFALSE 8136
// apeEngGroup := apeEngGroup diff un ;
8120: LD_ADDR_EXP 43
8124: PUSH
8125: LD_EXP 43
8129: PUSH
8130: LD_VAR 0 1
8134: DIFF
8135: ST_TO_ADDR
// if un in oilBaseGuard then
8136: LD_VAR 0 1
8140: PUSH
8141: LD_EXP 38
8145: IN
8146: IFFALSE 8164
// oilBaseGuard := oilBaseGuard diff un ;
8148: LD_ADDR_EXP 38
8152: PUSH
8153: LD_EXP 38
8157: PUSH
8158: LD_VAR 0 1
8162: DIFF
8163: ST_TO_ADDR
// if un in ruNorthGroup then
8164: LD_VAR 0 1
8168: PUSH
8169: LD_EXP 39
8173: IN
8174: IFFALSE 8192
// ruNorthGroup := ruNorthGroup diff un ;
8176: LD_ADDR_EXP 39
8180: PUSH
8181: LD_EXP 39
8185: PUSH
8186: LD_VAR 0 1
8190: DIFF
8191: ST_TO_ADDR
// if un in ruSouthGroup then
8192: LD_VAR 0 1
8196: PUSH
8197: LD_EXP 40
8201: IN
8202: IFFALSE 8220
// ruSouthGroup := ruSouthGroup diff un ;
8204: LD_ADDR_EXP 40
8208: PUSH
8209: LD_EXP 40
8213: PUSH
8214: LD_VAR 0 1
8218: DIFF
8219: ST_TO_ADDR
// if un in ruConvoySquad then
8220: LD_VAR 0 1
8224: PUSH
8225: LD_EXP 41
8229: IN
8230: IFFALSE 8248
// ruConvoySquad := ruConvoySquad diff un ;
8232: LD_ADDR_EXP 41
8236: PUSH
8237: LD_EXP 41
8241: PUSH
8242: LD_VAR 0 1
8246: DIFF
8247: ST_TO_ADDR
// end ;
8248: PPOPN 1
8250: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8251: LD_VAR 0 1
8255: PPUSH
8256: LD_VAR 0 2
8260: PPUSH
8261: CALL 15095 0 2
// if GetWeapon ( veh ) = ar_radar then
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 264
8274: PUSH
8275: LD_INT 30
8277: EQUAL
8278: IFFALSE 8288
// radarConstructed := true ;
8280: LD_ADDR_EXP 13
8284: PUSH
8285: LD_INT 1
8287: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8288: LD_VAR 0 1
8292: PPUSH
8293: CALL_OW 264
8297: PUSH
8298: LD_INT 26
8300: EQUAL
8301: IFFALSE 8311
// flamethrowerBuilt := true ;
8303: LD_ADDR_EXP 20
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// end ;
8311: PPOPN 2
8313: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8314: LD_ADDR_EXP 18
8318: PUSH
8319: LD_EXP 18
8323: PUSH
8324: LD_INT 1
8326: PLUS
8327: ST_TO_ADDR
// if oldId in ruConvoySquad then
8328: LD_VAR 0 2
8332: PUSH
8333: LD_EXP 41
8337: IN
8338: IFFALSE 8356
// ruConvoySquad := ruConvoySquad diff oldId ;
8340: LD_ADDR_EXP 41
8344: PUSH
8345: LD_EXP 41
8349: PUSH
8350: LD_VAR 0 2
8354: DIFF
8355: ST_TO_ADDR
// if newId in ruConvoySquad then
8356: LD_VAR 0 1
8360: PUSH
8361: LD_EXP 41
8365: IN
8366: IFFALSE 8384
// ruConvoySquad := ruConvoySquad diff newId ;
8368: LD_ADDR_EXP 41
8372: PUSH
8373: LD_EXP 41
8377: PUSH
8378: LD_VAR 0 1
8382: DIFF
8383: ST_TO_ADDR
// end ; end_of_file
8384: PPOPN 4
8386: END
// export function Action ; var i , p , un , veh , tmp ; begin
8387: LD_INT 0
8389: PPUSH
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
// InGameOn ;
8395: CALL_OW 8
// music_nat := 2 ;
8399: LD_ADDR_OWVAR 71
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// music_class := music_recon ;
8407: LD_ADDR_OWVAR 72
8411: PUSH
8412: LD_INT 3
8414: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8415: LD_INT 7
8417: PPUSH
8418: LD_INT 6
8420: PPUSH
8421: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8425: LD_INT 7
8427: PPUSH
8428: LD_INT 6
8430: PPUSH
8431: LD_INT 2
8433: PPUSH
8434: LD_INT 30
8436: NEG
8437: PPUSH
8438: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8442: LD_ADDR_VAR 0 6
8446: PUSH
8447: LD_EXP 21
8451: PUSH
8452: LD_EXP 22
8456: PUSH
8457: LD_EXP 23
8461: PUSH
8462: LD_EXP 24
8466: PUSH
8467: LD_EXP 25
8471: PUSH
8472: LD_EXP 26
8476: PUSH
8477: LD_EXP 28
8481: PUSH
8482: LD_EXP 33
8486: PUSH
8487: LD_EXP 27
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: ST_TO_ADDR
// tmp := tmp diff 0 ;
8503: LD_ADDR_VAR 0 6
8507: PUSH
8508: LD_VAR 0 6
8512: PUSH
8513: LD_INT 0
8515: DIFF
8516: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8517: LD_ADDR_VAR 0 6
8521: PUSH
8522: LD_VAR 0 6
8526: PPUSH
8527: LD_INT 3
8529: PPUSH
8530: CALL 71711 0 2
8534: ST_TO_ADDR
// for i in heikeVehicles do
8535: LD_ADDR_VAR 0 2
8539: PUSH
8540: LD_EXP 35
8544: PUSH
8545: FOR_IN
8546: IFFALSE 8745
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8548: LD_INT 5
8550: PPUSH
8551: LD_VAR 0 2
8555: PUSH
8556: LD_INT 5
8558: ARRAY
8559: PPUSH
8560: LD_VAR 0 2
8564: PUSH
8565: LD_INT 1
8567: ARRAY
8568: PPUSH
8569: LD_VAR 0 2
8573: PUSH
8574: LD_INT 2
8576: ARRAY
8577: PPUSH
8578: LD_VAR 0 2
8582: PUSH
8583: LD_INT 3
8585: ARRAY
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_INT 4
8594: ARRAY
8595: PPUSH
8596: LD_INT 34
8598: PPUSH
8599: CALL 439 0 7
// veh := CreateVehicle ;
8603: LD_ADDR_VAR 0 5
8607: PUSH
8608: CALL_OW 45
8612: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8613: LD_VAR 0 2
8617: PUSH
8618: LD_INT 4
8620: ARRAY
8621: PUSH
8622: LD_INT 51
8624: PUSH
8625: LD_INT 32
8627: PUSH
8628: LD_INT 12
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: IN
8636: IFFALSE 8716
// begin if i [ 7 ] [ 1 ] then
8638: LD_VAR 0 2
8642: PUSH
8643: LD_INT 7
8645: ARRAY
8646: PUSH
8647: LD_INT 1
8649: ARRAY
8650: IFFALSE 8677
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8652: LD_VAR 0 5
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: LD_VAR 0 2
8664: PUSH
8665: LD_INT 7
8667: ARRAY
8668: PUSH
8669: LD_INT 1
8671: ARRAY
8672: PPUSH
8673: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8677: LD_VAR 0 2
8681: PUSH
8682: LD_INT 7
8684: ARRAY
8685: PUSH
8686: LD_INT 2
8688: ARRAY
8689: IFFALSE 8716
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8691: LD_VAR 0 5
8695: PPUSH
8696: LD_INT 2
8698: PPUSH
8699: LD_VAR 0 2
8703: PUSH
8704: LD_INT 7
8706: ARRAY
8707: PUSH
8708: LD_INT 2
8710: ARRAY
8711: PPUSH
8712: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8716: LD_VAR 0 5
8720: PPUSH
8721: LD_INT 2
8723: PPUSH
8724: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8728: LD_VAR 0 5
8732: PPUSH
8733: LD_INT 4
8735: PPUSH
8736: LD_INT 0
8738: PPUSH
8739: CALL_OW 49
// end ;
8743: GO 8545
8745: POP
8746: POP
// if tmp then
8747: LD_VAR 0 6
8751: IFFALSE 8861
// begin p := 0 ;
8753: LD_ADDR_VAR 0 3
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// for i in tmp do
8761: LD_ADDR_VAR 0 2
8765: PUSH
8766: LD_VAR 0 6
8770: PUSH
8771: FOR_IN
8772: IFFALSE 8859
// begin p := p + 1 ;
8774: LD_ADDR_VAR 0 3
8778: PUSH
8779: LD_VAR 0 3
8783: PUSH
8784: LD_INT 1
8786: PLUS
8787: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8788: LD_VAR 0 2
8792: PPUSH
8793: LD_INT 5
8795: PPUSH
8796: LD_INT 0
8798: PPUSH
8799: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8803: LD_VAR 0 2
8807: PPUSH
8808: LD_INT 26
8810: PPUSH
8811: LD_INT 9
8813: PPUSH
8814: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8818: LD_VAR 0 3
8822: PUSH
8823: LD_EXP 35
8827: GREATEREQUAL
8828: PUSH
8829: LD_VAR 0 2
8833: PPUSH
8834: CALL_OW 257
8838: PUSH
8839: LD_INT 3
8841: EQUAL
8842: AND
8843: IFFALSE 8857
// SetClass ( i , 1 ) ;
8845: LD_VAR 0 2
8849: PPUSH
8850: LD_INT 1
8852: PPUSH
8853: CALL_OW 336
// end ;
8857: GO 8771
8859: POP
8860: POP
// end ; if heikeSecondSquad then
8861: LD_EXP 34
8865: IFFALSE 8967
// for i in heikeSecondSquad do
8867: LD_ADDR_VAR 0 2
8871: PUSH
8872: LD_EXP 34
8876: PUSH
8877: FOR_IN
8878: IFFALSE 8965
// begin p := p + 1 ;
8880: LD_ADDR_VAR 0 3
8884: PUSH
8885: LD_VAR 0 3
8889: PUSH
8890: LD_INT 1
8892: PLUS
8893: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8894: LD_VAR 0 2
8898: PPUSH
8899: LD_INT 6
8901: PPUSH
8902: LD_INT 0
8904: PPUSH
8905: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8909: LD_VAR 0 2
8913: PPUSH
8914: LD_INT 26
8916: PPUSH
8917: LD_INT 9
8919: PPUSH
8920: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8924: LD_VAR 0 3
8928: PUSH
8929: LD_EXP 35
8933: GREATEREQUAL
8934: PUSH
8935: LD_VAR 0 2
8939: PPUSH
8940: CALL_OW 257
8944: PUSH
8945: LD_INT 3
8947: EQUAL
8948: AND
8949: IFFALSE 8963
// SetClass ( i , 1 ) ;
8951: LD_VAR 0 2
8955: PPUSH
8956: LD_INT 1
8958: PPUSH
8959: CALL_OW 336
// end ;
8963: GO 8877
8965: POP
8966: POP
// if heikeApes then
8967: LD_EXP 36
8971: IFFALSE 9014
// for i in heikeApes do
8973: LD_ADDR_VAR 0 2
8977: PUSH
8978: LD_EXP 36
8982: PUSH
8983: FOR_IN
8984: IFFALSE 9012
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8986: LD_VAR 0 2
8990: PPUSH
8991: LD_INT 7
8993: PPUSH
8994: LD_INT 0
8996: PPUSH
8997: CALL_OW 49
// ComHold ( i ) ;
9001: LD_VAR 0 2
9005: PPUSH
9006: CALL_OW 140
// end ;
9010: GO 8983
9012: POP
9013: POP
// if Kurt then
9014: LD_EXP 32
9018: IFFALSE 9050
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9020: LD_EXP 32
9024: PPUSH
9025: LD_INT 8
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9035: LD_EXP 32
9039: PPUSH
9040: LD_INT 42
9042: PPUSH
9043: LD_INT 32
9045: PPUSH
9046: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9050: LD_INT 70
9052: PPUSH
9053: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9057: LD_EXP 21
9061: PPUSH
9062: LD_STRING DH-Start-1
9064: PPUSH
9065: CALL_OW 88
// if Givi then
9069: LD_EXP 22
9073: IFFALSE 9336
// begin Say ( Givi , DG-Start-2-5 ) ;
9075: LD_EXP 22
9079: PPUSH
9080: LD_STRING DG-Start-2-5
9082: PPUSH
9083: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9087: LD_EXP 21
9091: PPUSH
9092: LD_STRING DH-Start-3
9094: PPUSH
9095: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9099: LD_EXP 21
9103: PPUSH
9104: LD_STRING DH-Start-4
9106: PPUSH
9107: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9111: LD_EXP 22
9115: PPUSH
9116: LD_STRING DG-Start-5
9118: PPUSH
9119: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9123: LD_EXP 21
9127: PPUSH
9128: LD_STRING DH-Start-6
9130: PPUSH
9131: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9135: LD_EXP 22
9139: PPUSH
9140: LD_STRING DG-Start-7
9142: PPUSH
9143: CALL_OW 88
// if Mike then
9147: LD_EXP 23
9151: IFFALSE 9324
// begin Say ( Mike , DM-Start-8 ) ;
9153: LD_EXP 23
9157: PPUSH
9158: LD_STRING DM-Start-8
9160: PPUSH
9161: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9165: LD_EXP 23
9169: PPUSH
9170: LD_STRING DM-Start-9
9172: PPUSH
9173: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9177: LD_EXP 22
9181: PPUSH
9182: LD_STRING DG-Start-10
9184: PPUSH
9185: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9189: LD_EXP 22
9193: PPUSH
9194: LD_STRING DG-Start-11
9196: PPUSH
9197: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9201: LD_EXP 21
9205: PPUSH
9206: LD_STRING DH-Start-12
9208: PPUSH
9209: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9213: LD_EXP 22
9217: PPUSH
9218: LD_STRING DG-Start-13
9220: PPUSH
9221: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9225: LD_EXP 22
9229: PPUSH
9230: LD_STRING DG-Start-14
9232: PPUSH
9233: CALL_OW 88
// if Kaia then
9237: LD_EXP 26
9241: IFFALSE 9324
// begin Say ( Kaia , DK-Start-15 ) ;
9243: LD_EXP 26
9247: PPUSH
9248: LD_STRING DK-Start-15
9250: PPUSH
9251: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9255: LD_EXP 26
9259: PPUSH
9260: LD_STRING DK-Start-16
9262: PPUSH
9263: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9267: LD_EXP 26
9271: PPUSH
9272: LD_STRING DK-Start-17
9274: PPUSH
9275: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9279: LD_INT 10
9281: PPUSH
9282: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9286: LD_EXP 22
9290: PPUSH
9291: LD_EXP 26
9295: PPUSH
9296: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9300: LD_EXP 22
9304: PPUSH
9305: LD_STRING DG-Start-18
9307: PPUSH
9308: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9312: LD_EXP 26
9316: PPUSH
9317: LD_STRING DK-Start-19
9319: PPUSH
9320: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9324: LD_EXP 21
9328: PPUSH
9329: LD_STRING DH-Start-20
9331: PPUSH
9332: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9336: LD_INT 70
9338: PPUSH
9339: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9343: LD_EXP 29
9347: PPUSH
9348: LD_STRING DShar-Start-21
9350: PPUSH
9351: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9355: LD_EXP 21
9359: PPUSH
9360: LD_STRING DH-Start-22
9362: PPUSH
9363: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9367: LD_EXP 29
9371: PPUSH
9372: LD_STRING DShar-Start-23
9374: PPUSH
9375: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9379: LD_EXP 29
9383: PPUSH
9384: LD_STRING DShar-Start-24
9386: PPUSH
9387: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9391: LD_EXP 29
9395: PPUSH
9396: LD_STRING DShar-Start-25
9398: PPUSH
9399: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9403: LD_EXP 29
9407: PPUSH
9408: LD_STRING DShar-Start-26
9410: PPUSH
9411: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9415: LD_EXP 21
9419: PPUSH
9420: LD_STRING DH-Start-27
9422: PPUSH
9423: CALL_OW 88
// if Kaia then
9427: LD_EXP 26
9431: IFFALSE 9473
// begin ComTurnUnit ( Heike , Kaia ) ;
9433: LD_EXP 21
9437: PPUSH
9438: LD_EXP 26
9442: PPUSH
9443: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9447: LD_EXP 26
9451: PPUSH
9452: LD_STRING DK-Start-28
9454: PPUSH
9455: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9459: LD_EXP 21
9463: PPUSH
9464: LD_STRING DH-Start-29
9466: PPUSH
9467: CALL_OW 88
// end else
9471: GO 9485
// Say ( Heike , DH-Start-a-28 ) ;
9473: LD_EXP 21
9477: PPUSH
9478: LD_STRING DH-Start-a-28
9480: PPUSH
9481: CALL_OW 88
// if Givi then
9485: LD_EXP 22
9489: IFFALSE 9724
// begin ComTurnUnit ( Heike , Givi ) ;
9491: LD_EXP 21
9495: PPUSH
9496: LD_EXP 22
9500: PPUSH
9501: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9505: LD_EXP 22
9509: PPUSH
9510: LD_EXP 21
9514: PPUSH
9515: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9519: LD_EXP 21
9523: PPUSH
9524: LD_STRING DH-Start-30
9526: PPUSH
9527: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9531: LD_EXP 21
9535: PPUSH
9536: LD_STRING DH-Start-31
9538: PPUSH
9539: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9543: LD_EXP 22
9547: PPUSH
9548: LD_STRING DG-Start-32
9550: PPUSH
9551: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9555: LD_EXP 21
9559: PPUSH
9560: LD_STRING DH-Start-33
9562: PPUSH
9563: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9567: LD_EXP 22
9571: PPUSH
9572: LD_STRING DG-Start-34
9574: PPUSH
9575: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9579: LD_EXP 22
9583: PPUSH
9584: LD_STRING DG-Start-35
9586: PPUSH
9587: CALL_OW 88
// if Kurt and not dialogue_skipped then
9591: LD_EXP 32
9595: PUSH
9596: LD_OWVAR 59
9600: NOT
9601: AND
9602: IFFALSE 9633
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9604: LD_EXP 32
9608: PPUSH
9609: LD_INT 28
9611: PPUSH
9612: LD_INT 13
9614: PPUSH
9615: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9619: LD_EXP 32
9623: PPUSH
9624: LD_EXP 21
9628: PPUSH
9629: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9633: LD_EXP 22
9637: PPUSH
9638: LD_STRING DG-Start-36
9640: PPUSH
9641: CALL_OW 88
// if Kurt then
9645: LD_EXP 32
9649: IFFALSE 9722
// begin if not Givi then
9651: LD_EXP 22
9655: NOT
9656: IFFALSE 9672
// Say ( Kurt , DKs-Start-37-a ) else
9658: LD_EXP 32
9662: PPUSH
9663: LD_STRING DKs-Start-37-a
9665: PPUSH
9666: CALL_OW 88
9670: GO 9684
// Say ( Kurt , DKs-Start-37 ) ;
9672: LD_EXP 32
9676: PPUSH
9677: LD_STRING DKs-Start-37
9679: PPUSH
9680: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9684: LD_EXP 32
9688: PPUSH
9689: LD_STRING DKs-Start-38
9691: PPUSH
9692: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9696: LD_EXP 21
9700: PPUSH
9701: LD_EXP 32
9705: PPUSH
9706: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9710: LD_EXP 21
9714: PPUSH
9715: LD_STRING DH-Start-39
9717: PPUSH
9718: CALL_OW 88
// end ; end else
9722: GO 9753
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9724: LD_EXP 34
9728: PPUSH
9729: LD_STRING DArm-Start-a-37
9731: PPUSH
9732: LD_STRING DArf-Start-a-37
9734: PPUSH
9735: CALL 1198 0 3
9739: IFFALSE 9753
// Say ( Heike , DH-Start-39 ) ;
9741: LD_EXP 21
9745: PPUSH
9746: LD_STRING DH-Start-39
9748: PPUSH
9749: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9753: LD_INT 44
9755: PPUSH
9756: LD_INT 25
9758: PPUSH
9759: CALL_OW 428
9763: IFFALSE 9780
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9765: LD_INT 44
9767: PPUSH
9768: LD_INT 25
9770: PPUSH
9771: CALL_OW 428
9775: PPUSH
9776: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9780: LD_EXP 30
9784: PPUSH
9785: LD_INT 5
9787: PPUSH
9788: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9792: LD_EXP 30
9796: PPUSH
9797: LD_INT 44
9799: PPUSH
9800: LD_INT 25
9802: PPUSH
9803: LD_INT 0
9805: PPUSH
9806: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9810: LD_EXP 30
9814: PPUSH
9815: LD_INT 29
9817: PPUSH
9818: LD_INT 12
9820: PPUSH
9821: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9825: LD_INT 35
9827: PPUSH
9828: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9832: LD_OWVAR 59
9836: PUSH
9837: LD_EXP 21
9841: PPUSH
9842: LD_EXP 30
9846: PPUSH
9847: CALL_OW 296
9851: PUSH
9852: LD_INT 8
9854: LESS
9855: OR
9856: PUSH
9857: LD_EXP 30
9861: PPUSH
9862: LD_INT 26
9864: PPUSH
9865: LD_INT 9
9867: PPUSH
9868: CALL_OW 297
9872: PUSH
9873: LD_INT 6
9875: LESS
9876: OR
9877: IFFALSE 9825
// Say ( Olaf , DO-Scout-1 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-1
9886: PPUSH
9887: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9891: LD_EXP 30
9895: PPUSH
9896: LD_EXP 21
9900: PPUSH
9901: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9905: LD_ADDR_VAR 0 2
9909: PUSH
9910: LD_VAR 0 6
9914: PUSH
9915: LD_EXP 34
9919: UNION
9920: PUSH
9921: FOR_IN
9922: IFFALSE 9940
// ComTurnUnit ( i , Olaf ) ;
9924: LD_VAR 0 2
9928: PPUSH
9929: LD_EXP 30
9933: PPUSH
9934: CALL_OW 119
9938: GO 9921
9940: POP
9941: POP
// wait ( 0 0$0.3 ) ;
9942: LD_INT 10
9944: PPUSH
9945: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9949: LD_EXP 21
9953: PPUSH
9954: LD_EXP 30
9958: PPUSH
9959: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9963: LD_EXP 21
9967: PPUSH
9968: LD_EXP 30
9972: PPUSH
9973: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9977: LD_EXP 21
9981: PPUSH
9982: LD_STRING DH-Scout-2
9984: PPUSH
9985: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9989: LD_EXP 30
9993: PPUSH
9994: LD_STRING DO-Scout-3
9996: PPUSH
9997: CALL_OW 88
// if Mike and Givi then
10001: LD_EXP 23
10005: PUSH
10006: LD_EXP 22
10010: AND
10011: IFFALSE 10027
// Say ( Olaf , DO-Scout-4 ) else
10013: LD_EXP 30
10017: PPUSH
10018: LD_STRING DO-Scout-4
10020: PPUSH
10021: CALL_OW 88
10025: GO 10127
// begin if Mike then
10027: LD_EXP 23
10031: IFFALSE 10059
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10033: LD_EXP 30
10037: PPUSH
10038: LD_STRING DO-Scout-a-4
10040: PPUSH
10041: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10045: LD_EXP 21
10049: PPUSH
10050: LD_STRING DH-Scout-a-5
10052: PPUSH
10053: CALL_OW 88
// end else
10057: GO 10127
// if Givi then
10059: LD_EXP 22
10063: IFFALSE 10091
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10065: LD_EXP 30
10069: PPUSH
10070: LD_STRING DO-Scout-b-4
10072: PPUSH
10073: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10077: LD_EXP 21
10081: PPUSH
10082: LD_STRING DH-Scout-b-5
10084: PPUSH
10085: CALL_OW 88
// end else
10089: GO 10127
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10091: LD_EXP 30
10095: PPUSH
10096: LD_STRING DO-Scout-f-4
10098: PPUSH
10099: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10103: LD_EXP 21
10107: PPUSH
10108: LD_STRING DH-Scout-f-5
10110: PPUSH
10111: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10115: LD_EXP 30
10119: PPUSH
10120: LD_STRING DO-Scout-f-6
10122: PPUSH
10123: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10127: LD_EXP 21
10131: PPUSH
10132: LD_STRING DH-Scout-5
10134: PPUSH
10135: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10139: LD_EXP 30
10143: PPUSH
10144: LD_STRING DO-Scout-6
10146: PPUSH
10147: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10151: LD_EXP 30
10155: PPUSH
10156: LD_STRING DO-Scout-7
10158: PPUSH
10159: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10163: LD_EXP 21
10167: PPUSH
10168: LD_STRING DH-Scout-8
10170: PPUSH
10171: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10175: LD_EXP 21
10179: PPUSH
10180: LD_STRING DH-Scout-9
10182: PPUSH
10183: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10187: LD_EXP 30
10191: PPUSH
10192: LD_STRING DO-Scout-10
10194: PPUSH
10195: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10199: LD_EXP 30
10203: PPUSH
10204: LD_STRING DO-Scout-12
10206: PPUSH
10207: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10211: LD_EXP 30
10215: PPUSH
10216: LD_STRING DO-Scout-13
10218: PPUSH
10219: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10223: LD_EXP 30
10227: PPUSH
10228: LD_STRING DO-Scout-14
10230: PPUSH
10231: CALL_OW 88
// if Givi then
10235: LD_EXP 22
10239: IFFALSE 10265
// begin Say ( Givi , DG-Scout-15 ) ;
10241: LD_EXP 22
10245: PPUSH
10246: LD_STRING DG-Scout-15
10248: PPUSH
10249: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10253: LD_EXP 26
10257: PPUSH
10258: LD_STRING DK-Scout-16
10260: PPUSH
10261: CALL_OW 88
// end ; if not dialogue_skipped then
10265: LD_OWVAR 59
10269: NOT
10270: IFFALSE 10391
// begin async ;
10272: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10273: LD_EXP 30
10277: PPUSH
10278: LD_STRING DO-Scout-17
10280: PPUSH
10281: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10285: LD_INT 55
10287: PPUSH
10288: LD_INT 77
10290: PPUSH
10291: LD_INT 2
10293: PPUSH
10294: LD_INT 6
10296: NEG
10297: PPUSH
10298: CALL 1147 0 4
// wait ( 10 ) ;
10302: LD_INT 10
10304: PPUSH
10305: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10309: LD_INT 55
10311: PPUSH
10312: LD_INT 77
10314: PPUSH
10315: CALL_OW 84
// wait ( 0 0$10 ) ;
10319: LD_INT 350
10321: PPUSH
10322: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10326: LD_EXP 30
10330: PPUSH
10331: LD_STRING DO-Scout-18
10333: PPUSH
10334: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10338: LD_INT 204
10340: PPUSH
10341: LD_INT 107
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 12
10349: NEG
10350: PPUSH
10351: CALL 1147 0 4
// wait ( 10 ) ;
10355: LD_INT 10
10357: PPUSH
10358: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10362: LD_INT 204
10364: PPUSH
10365: LD_INT 107
10367: PPUSH
10368: CALL_OW 84
// wait ( 0 0$10 ) ;
10372: LD_INT 350
10374: PPUSH
10375: CALL_OW 67
// sync ;
10379: SYNC
// CenterNowOnUnits ( Heike ) ;
10380: LD_EXP 21
10384: PPUSH
10385: CALL_OW 87
// end else
10389: GO 10425
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10391: LD_INT 55
10393: PPUSH
10394: LD_INT 77
10396: PPUSH
10397: LD_INT 2
10399: PPUSH
10400: LD_INT 6
10402: NEG
10403: PPUSH
10404: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10408: LD_INT 204
10410: PPUSH
10411: LD_INT 107
10413: PPUSH
10414: LD_INT 2
10416: PPUSH
10417: LD_INT 12
10419: NEG
10420: PPUSH
10421: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10425: LD_EXP 30
10429: PPUSH
10430: LD_STRING DO-Scout-19
10432: PPUSH
10433: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10437: LD_EXP 30
10441: PPUSH
10442: LD_STRING DO-Scout-20
10444: PPUSH
10445: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10449: LD_EXP 21
10453: PPUSH
10454: LD_STRING DH-Scout-21
10456: PPUSH
10457: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10461: LD_EXP 21
10465: PPUSH
10466: LD_STRING DH-Scout-22
10468: PPUSH
10469: CALL_OW 88
// InGameOff ;
10473: CALL_OW 9
// if heikeSecondSquad then
10477: LD_EXP 34
10481: IFFALSE 10495
// ForceSleep ( heikeSecondSquad , false ) ;
10483: LD_EXP 34
10487: PPUSH
10488: LD_INT 0
10490: PPUSH
10491: CALL_OW 585
// if Givi then
10495: LD_EXP 22
10499: IFFALSE 10514
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10501: LD_INT 13
10503: PPUSH
10504: LD_INT 2
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10514: LD_STRING Road
10516: PPUSH
10517: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 22
10528: PUSH
10529: LD_INT 5
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 2
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: PUSH
10555: FOR_IN
10556: IFFALSE 10572
// SetSide ( i , 2 ) ;
10558: LD_VAR 0 2
10562: PPUSH
10563: LD_INT 2
10565: PPUSH
10566: CALL_OW 235
10570: GO 10555
10572: POP
10573: POP
// SaveForQuickRestart ;
10574: CALL_OW 22
// music_class := music_auto ;
10578: LD_ADDR_OWVAR 72
10582: PUSH
10583: LD_INT 0
10585: ST_TO_ADDR
// end ;
10586: LD_VAR 0 1
10590: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10591: LD_INT 2
10593: PPUSH
10594: LD_INT 9
10596: PPUSH
10597: CALL_OW 294
10601: IFFALSE 10966
10603: GO 10605
10605: DISABLE
// begin DialogueOn ;
10606: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10610: LD_INT 111
10612: PPUSH
10613: LD_INT 72
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: LD_INT 20
10621: NEG
10622: PPUSH
10623: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10627: LD_INT 111
10629: PPUSH
10630: LD_INT 72
10632: PPUSH
10633: LD_INT 2
10635: PPUSH
10636: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10640: LD_INT 111
10642: PPUSH
10643: LD_INT 72
10645: PPUSH
10646: CALL_OW 86
// if IsOk ( Kamil ) then
10650: LD_EXP 25
10654: PPUSH
10655: CALL_OW 302
10659: IFFALSE 10776
// begin Say ( Kamil , DKam-Cross-1 ) ;
10661: LD_EXP 25
10665: PPUSH
10666: LD_STRING DKam-Cross-1
10668: PPUSH
10669: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10673: LD_EXP 25
10677: PPUSH
10678: LD_STRING DKam-Cross-2
10680: PPUSH
10681: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10685: LD_EXP 25
10689: PPUSH
10690: LD_STRING DKam-Cross-3
10692: PPUSH
10693: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10697: LD_EXP 25
10701: PPUSH
10702: LD_STRING DKam-Cross-4
10704: PPUSH
10705: CALL_OW 88
// if IsOk ( Ibrahim ) then
10709: LD_EXP 24
10713: PPUSH
10714: CALL_OW 302
10718: IFFALSE 10774
// begin if ibrahimJoinedIn04 then
10720: LD_EXP 4
10724: IFFALSE 10738
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10726: LD_EXP 24
10730: PPUSH
10731: LD_STRING DI-Cross-b-5
10733: PPUSH
10734: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10738: LD_EXP 24
10742: PPUSH
10743: LD_STRING DI-Cross-b-6
10745: PPUSH
10746: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10750: LD_EXP 24
10754: PPUSH
10755: LD_STRING DI-Cross-b-7
10757: PPUSH
10758: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10762: LD_EXP 25
10766: PPUSH
10767: LD_STRING DKam-Cross-8
10769: PPUSH
10770: CALL_OW 88
// end ; end else
10774: GO 10934
// if IsOk ( Sophia ) then
10776: LD_EXP 27
10780: PPUSH
10781: CALL_OW 302
10785: IFFALSE 10902
// begin Say ( Sophia , DS-Cross-1 ) ;
10787: LD_EXP 27
10791: PPUSH
10792: LD_STRING DS-Cross-1
10794: PPUSH
10795: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10799: LD_EXP 27
10803: PPUSH
10804: LD_STRING DS-Cross-2
10806: PPUSH
10807: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10811: LD_EXP 27
10815: PPUSH
10816: LD_STRING DS-Cross-3
10818: PPUSH
10819: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10823: LD_EXP 27
10827: PPUSH
10828: LD_STRING DS-Cross-4
10830: PPUSH
10831: CALL_OW 88
// if IsOk ( Ibrahim ) then
10835: LD_EXP 24
10839: PPUSH
10840: CALL_OW 302
10844: IFFALSE 10900
// begin if ibrahimJoinedIn04 then
10846: LD_EXP 4
10850: IFFALSE 10864
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10852: LD_EXP 24
10856: PPUSH
10857: LD_STRING DI-Cross-b-5
10859: PPUSH
10860: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10864: LD_EXP 24
10868: PPUSH
10869: LD_STRING DI-Cross-b-6
10871: PPUSH
10872: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10876: LD_EXP 24
10880: PPUSH
10881: LD_STRING DI-Cross-b-7
10883: PPUSH
10884: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10888: LD_EXP 27
10892: PPUSH
10893: LD_STRING DS-Cross-8
10895: PPUSH
10896: CALL_OW 88
// end ; end else
10900: GO 10934
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10902: LD_EXP 34
10906: PPUSH
10907: LD_INT 50
10909: PUSH
10910: EMPTY
10911: LIST
10912: PPUSH
10913: CALL_OW 72
10917: IFFALSE 10934
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10919: LD_EXP 34
10923: PPUSH
10924: LD_STRING DArm-Cross-c-1
10926: PPUSH
10927: LD_STRING DArf-Cross-c-1
10929: PPUSH
10930: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10934: LD_INT 85
10936: PPUSH
10937: LD_INT 2
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 322
// DialogueOff ;
10947: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10951: LD_STRING Crane
10953: PPUSH
10954: CALL_OW 337
// spottedCrossRoad := true ;
10958: LD_ADDR_EXP 8
10962: PUSH
10963: LD_INT 1
10965: ST_TO_ADDR
// end ;
10966: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10967: LD_INT 22
10969: PUSH
10970: LD_INT 2
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 2
10979: PUSH
10980: LD_INT 30
10982: PUSH
10983: LD_INT 0
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 30
10992: PUSH
10993: LD_INT 1
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PPUSH
11009: CALL_OW 69
11013: PUSH
11014: LD_EXP 26
11018: PPUSH
11019: CALL_OW 302
11023: PUSH
11024: LD_EXP 34
11028: OR
11029: AND
11030: IFFALSE 11242
11032: GO 11034
11034: DISABLE
// begin DialogueOn ;
11035: CALL_OW 6
// if Kaia then
11039: LD_EXP 26
11043: IFFALSE 11056
// CenterNowOnUnits ( Kaia ) else
11045: LD_EXP 26
11049: PPUSH
11050: CALL_OW 87
11054: GO 11065
// CenterNowOnUnits ( Heike ) ;
11056: LD_EXP 21
11060: PPUSH
11061: CALL_OW 87
// if IsOk ( Kaia ) then
11065: LD_EXP 26
11069: PPUSH
11070: CALL_OW 302
11074: IFFALSE 11090
// Say ( Kaia , DK-Cam-1 ) else
11076: LD_EXP 26
11080: PPUSH
11081: LD_STRING DK-Cam-1
11083: PPUSH
11084: CALL_OW 88
11088: GO 11105
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11090: LD_EXP 34
11094: PPUSH
11095: LD_STRING DArm-Cam-1
11097: PPUSH
11098: LD_STRING DArf-Cam-1
11100: PPUSH
11101: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
11105: LD_EXP 21
11109: PPUSH
11110: LD_STRING DH-Cam-2
11112: PPUSH
11113: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11117: LD_EXP 21
11121: PPUSH
11122: LD_STRING DH-Cam-3
11124: PPUSH
11125: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11129: LD_EXP 21
11133: PPUSH
11134: LD_STRING DH-Cam-4
11136: PPUSH
11137: CALL_OW 88
// if IsOk ( Kaia ) then
11141: LD_EXP 26
11145: PPUSH
11146: CALL_OW 302
11150: IFFALSE 11166
// Say ( Kaia , DK-Cam-5 ) else
11152: LD_EXP 26
11156: PPUSH
11157: LD_STRING DK-Cam-5
11159: PPUSH
11160: CALL_OW 88
11164: GO 11181
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11166: LD_EXP 34
11170: PPUSH
11171: LD_STRING DArm-Cam-5
11173: PPUSH
11174: LD_STRING DArf-Cam-5
11176: PPUSH
11177: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11181: LD_EXP 30
11185: PPUSH
11186: LD_STRING DO-Cam-6
11188: PPUSH
11189: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11193: LD_EXP 30
11197: PPUSH
11198: LD_STRING DO-Cam-7
11200: PPUSH
11201: CALL_OW 88
// DialogueOff ;
11205: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11209: LD_STRING Radar
11211: PPUSH
11212: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11216: LD_INT 6
11218: PPUSH
11219: LD_INT 2
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11229: LD_INT 20
11231: PPUSH
11232: LD_INT 2
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 324
// end ;
11242: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11243: LD_INT 22
11245: PUSH
11246: LD_INT 2
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 2
11255: PUSH
11256: LD_INT 34
11258: PUSH
11259: LD_INT 30
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 35
11268: PUSH
11269: LD_INT 30
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: IFFALSE 11301
11291: GO 11293
11293: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11294: LD_STRING RadarDone
11296: PPUSH
11297: CALL_OW 337
11301: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11302: LD_INT 22
11304: PUSH
11305: LD_INT 2
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 34
11314: PUSH
11315: LD_INT 88
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PPUSH
11326: CALL_OW 69
11330: IFFALSE 11342
11332: GO 11334
11334: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11335: LD_STRING CraneDone
11337: PPUSH
11338: CALL_OW 337
11342: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11343: LD_EXP 30
11347: PPUSH
11348: CALL_OW 302
11352: PUSH
11353: LD_EXP 33
11357: PPUSH
11358: CALL_OW 302
11362: AND
11363: PUSH
11364: LD_INT 6
11366: PPUSH
11367: LD_INT 2
11369: PPUSH
11370: CALL_OW 321
11374: PUSH
11375: LD_INT 2
11377: EQUAL
11378: AND
11379: PUSH
11380: LD_EXP 33
11384: PPUSH
11385: LD_EXP 21
11389: PPUSH
11390: CALL_OW 296
11394: PUSH
11395: LD_INT 10
11397: LESS
11398: PUSH
11399: LD_EXP 33
11403: PPUSH
11404: CALL_OW 310
11408: OR
11409: AND
11410: IFFALSE 11624
11412: GO 11414
11414: DISABLE
// begin DialogueOn ;
11415: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11419: LD_EXP 33
11423: PPUSH
11424: LD_STRING DA-RC-1
11426: PPUSH
11427: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11431: LD_EXP 33
11435: PPUSH
11436: LD_STRING DA-RC-2
11438: PPUSH
11439: CALL_OW 88
// if IsOk ( Kaia ) then
11443: LD_EXP 26
11447: PPUSH
11448: CALL_OW 302
11452: IFFALSE 11526
// begin Say ( Kaia , DK-RC-3 ) ;
11454: LD_EXP 26
11458: PPUSH
11459: LD_STRING DK-RC-3
11461: PPUSH
11462: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11466: LD_EXP 33
11470: PPUSH
11471: LD_STRING DA-RC-4
11473: PPUSH
11474: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11478: LD_EXP 26
11482: PPUSH
11483: LD_STRING DK-RC-5
11485: PPUSH
11486: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11490: LD_EXP 33
11494: PPUSH
11495: LD_STRING DA-RC-6
11497: PPUSH
11498: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11502: LD_EXP 26
11506: PPUSH
11507: LD_STRING DK-RC-7
11509: PPUSH
11510: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11514: LD_EXP 33
11518: PPUSH
11519: LD_STRING DA-RC-8
11521: PPUSH
11522: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11526: LD_EXP 21
11530: PPUSH
11531: LD_STRING DH-RC-9
11533: PPUSH
11534: CALL_OW 88
// if IsOk ( Markov ) then
11538: LD_EXP 28
11542: PPUSH
11543: CALL_OW 302
11547: IFFALSE 11575
// begin Say ( Markov , DMar-RC-10 ) ;
11549: LD_EXP 28
11553: PPUSH
11554: LD_STRING DMar-RC-10
11556: PPUSH
11557: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11561: LD_EXP 28
11565: PPUSH
11566: LD_STRING DMar-RC-11
11568: PPUSH
11569: CALL_OW 88
// end else
11573: GO 11587
// begin Say ( Olaf , DO-RC-a-10 ) ;
11575: LD_EXP 30
11579: PPUSH
11580: LD_STRING DO-RC-a-10
11582: PPUSH
11583: CALL_OW 88
// end ; DialogueOff ;
11587: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11591: LD_STRING RemoteControl
11593: PPUSH
11594: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11598: LD_INT 15
11600: PPUSH
11601: LD_INT 2
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11611: LD_INT 22
11613: PPUSH
11614: LD_INT 2
11616: PPUSH
11617: LD_INT 1
11619: PPUSH
11620: CALL_OW 324
// end ;
11624: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11625: LD_INT 12
11627: PPUSH
11628: LD_INT 22
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PPUSH
11638: CALL_OW 70
11642: IFFALSE 12009
11644: GO 11646
11646: DISABLE
11647: LD_INT 0
11649: PPUSH
// begin PrepareWestBase ;
11650: CALL 3916 0 0
// westBaseSpotted := true ;
11654: LD_ADDR_EXP 5
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11662: LD_INT 70
11664: PPUSH
11665: CALL_OW 67
// InGameOn ;
11669: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11673: LD_INT 56
11675: PPUSH
11676: LD_INT 77
11678: PPUSH
11679: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11683: LD_INT 56
11685: PPUSH
11686: LD_INT 77
11688: PPUSH
11689: LD_INT 2
11691: PPUSH
11692: LD_INT 12
11694: NEG
11695: PPUSH
11696: CALL_OW 330
// wait ( 0 0$2 ) ;
11700: LD_INT 70
11702: PPUSH
11703: CALL_OW 67
// DialogueOn ;
11707: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11711: LD_EXP 21
11715: PPUSH
11716: LD_STRING DH-Rbase-1
11718: PPUSH
11719: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11723: LD_EXP 26
11727: PPUSH
11728: LD_STRING DK-Rbase-2
11730: PPUSH
11731: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11735: LD_EXP 26
11739: PPUSH
11740: LD_STRING DK-Rbase-3
11742: PPUSH
11743: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11747: LD_EXP 26
11751: PPUSH
11752: LD_STRING DK-Rbase-4
11754: PPUSH
11755: CALL_OW 88
// DialogueOff ;
11759: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11763: LD_INT 56
11765: PPUSH
11766: LD_INT 77
11768: PPUSH
11769: LD_INT 2
11771: PPUSH
11772: CALL_OW 331
// InGameOff ;
11776: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11780: LD_INT 35
11782: PPUSH
11783: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11787: LD_EXP 42
11791: NOT
11792: PUSH
11793: LD_EXP 43
11797: NOT
11798: AND
11799: IFFALSE 11780
// wait ( 0 0$2 ) ;
11801: LD_INT 70
11803: PPUSH
11804: CALL_OW 67
// if IsOk ( Kaia ) then
11808: LD_EXP 26
11812: PPUSH
11813: CALL_OW 302
11817: IFFALSE 11932
// begin DialogueOn ;
11819: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11823: LD_INT 56
11825: PPUSH
11826: LD_INT 81
11828: PPUSH
11829: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11833: LD_EXP 26
11837: PPUSH
11838: LD_STRING DK-Rbase-5
11840: PPUSH
11841: CALL_OW 88
// if IsOk ( Givi ) then
11845: LD_EXP 22
11849: PPUSH
11850: CALL_OW 302
11854: IFFALSE 11928
// begin Say ( Givi , DG-Rbase-6 ) ;
11856: LD_EXP 22
11860: PPUSH
11861: LD_STRING DG-Rbase-6
11863: PPUSH
11864: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11868: LD_EXP 22
11872: PPUSH
11873: LD_STRING DG-Rbase-7
11875: PPUSH
11876: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11880: LD_EXP 26
11884: PPUSH
11885: LD_STRING DK-Rbase-8
11887: PPUSH
11888: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11892: LD_EXP 22
11896: PPUSH
11897: LD_STRING DG-Rbase-9
11899: PPUSH
11900: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11904: LD_EXP 22
11908: PPUSH
11909: LD_STRING DG-Rbase-10
11911: PPUSH
11912: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11916: LD_EXP 26
11920: PPUSH
11921: LD_STRING DK-Rbase-11
11923: PPUSH
11924: CALL_OW 88
// end ; DialogueOff ;
11928: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11932: LD_ADDR_VAR 0 1
11936: PUSH
11937: LD_INT 12
11939: PPUSH
11940: LD_INT 22
11942: PUSH
11943: LD_INT 3
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 21
11952: PUSH
11953: LD_INT 3
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PPUSH
11964: CALL_OW 70
11968: PUSH
11969: FOR_IN
11970: IFFALSE 11986
// SetSide ( i , 2 ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_INT 2
11979: PPUSH
11980: CALL_OW 235
11984: GO 11969
11986: POP
11987: POP
// westBaseCaptured := true ;
11988: LD_ADDR_EXP 9
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11996: LD_INT 0
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 324
// end ;
12009: PPOPN 1
12011: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12012: LD_EXP 38
12016: NOT
12017: PUSH
12018: LD_INT 10
12020: PPUSH
12021: CALL_OW 255
12025: PUSH
12026: LD_INT 2
12028: EQUAL
12029: OR
12030: IFFALSE 12167
12032: GO 12034
12034: DISABLE
// begin DialogueOn ;
12035: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12039: LD_EXP 21
12043: PPUSH
12044: LD_STRING DH-Goal-1
12046: PPUSH
12047: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12051: LD_EXP 29
12055: PPUSH
12056: LD_STRING DShar-Goal-2
12058: PPUSH
12059: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12063: LD_EXP 21
12067: PPUSH
12068: LD_STRING DH-Goal-3
12070: PPUSH
12071: CALL_OW 88
// if reinforcementsAllowed then
12075: LD_EXP 14
12079: IFFALSE 12105
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12081: LD_EXP 29
12085: PPUSH
12086: LD_STRING DShar-Goal-4
12088: PPUSH
12089: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12093: LD_EXP 21
12097: PPUSH
12098: LD_STRING DH-Goal-5
12100: PPUSH
12101: CALL_OW 88
// end ; DialogueOff ;
12105: CALL_OW 7
// eastBaseCaptured := true ;
12109: LD_ADDR_EXP 10
12113: PUSH
12114: LD_INT 1
12116: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12117: LD_STRING BaseCaptured
12119: PPUSH
12120: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12124: LD_INT 10
12126: PPUSH
12127: LD_INT 2
12129: PPUSH
12130: CALL_OW 235
// if not reinforcementsAllowed then
12134: LD_EXP 14
12138: NOT
12139: IFFALSE 12143
// exit ;
12141: GO 12167
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12143: LD_INT 21000
12145: PUSH
12146: LD_INT 1050
12148: NEG
12149: PPUSH
12150: LD_INT 1050
12152: PPUSH
12153: CALL_OW 12
12157: PLUS
12158: PPUSH
12159: CALL_OW 67
// PrepareReinforcements ;
12163: CALL 2174 0 0
// end ;
12167: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12168: LD_INT 22
12170: PUSH
12171: LD_INT 2
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 30
12180: PUSH
12181: LD_INT 13
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 69
12196: IFFALSE 12213
12198: GO 12200
12200: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12201: LD_EXP 22
12205: PPUSH
12206: LD_STRING DG-Lab-1
12208: PPUSH
12209: CALL_OW 88
// end ;
12213: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12214: LD_INT 5
12216: PPUSH
12217: LD_INT 2
12219: PPUSH
12220: CALL_OW 321
12224: PUSH
12225: LD_INT 2
12227: EQUAL
12228: PUSH
12229: LD_EXP 22
12233: PPUSH
12234: CALL_OW 302
12238: AND
12239: IFFALSE 12300
12241: GO 12243
12243: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12244: LD_EXP 22
12248: PPUSH
12249: LD_STRING DG-Stim-1
12251: PPUSH
12252: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12256: LD_EXP 21
12260: PPUSH
12261: LD_STRING DH-Stim-2
12263: PPUSH
12264: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12268: LD_EXP 22
12272: PPUSH
12273: LD_STRING DG-Stim-3
12275: PPUSH
12276: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12280: LD_EXP 21
12284: PPUSH
12285: LD_STRING DH-Stim-4
12287: PPUSH
12288: CALL_OW 88
// drugsResearched := true ;
12292: LD_ADDR_EXP 11
12296: PUSH
12297: LD_INT 1
12299: ST_TO_ADDR
// end ;
12300: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12301: LD_EXP 11
12305: IFFALSE 12617
12307: GO 12309
12309: DISABLE
12310: LD_INT 0
12312: PPUSH
12313: PPUSH
12314: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_EXP 21
12324: PUSH
12325: LD_EXP 22
12329: PUSH
12330: LD_EXP 30
12334: PUSH
12335: LD_EXP 28
12339: PUSH
12340: LD_EXP 26
12344: PUSH
12345: LD_EXP 27
12349: PUSH
12350: LD_EXP 32
12354: PUSH
12355: LD_EXP 25
12359: PUSH
12360: LD_EXP 23
12364: PUSH
12365: LD_EXP 24
12369: PUSH
12370: LD_EXP 33
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_STRING H
12395: PUSH
12396: LD_STRING G
12398: PUSH
12399: LD_STRING O
12401: PUSH
12402: LD_STRING Mar
12404: PUSH
12405: LD_STRING K
12407: PUSH
12408: LD_STRING S
12410: PUSH
12411: LD_STRING Ks
12413: PUSH
12414: LD_STRING Kam
12416: PUSH
12417: LD_STRING M
12419: PUSH
12420: LD_STRING I
12422: PUSH
12423: LD_STRING A
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12439: LD_INT 35
12441: PPUSH
12442: CALL_OW 67
// for i := tmp downto 1 do
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: DOUBLE
12452: LD_VAR 0 2
12456: INC
12457: ST_TO_ADDR
12458: LD_INT 1
12460: PUSH
12461: FOR_DOWNTO
12462: IFFALSE 12608
// if GetLives ( tmp [ i ] ) < 250 then
12464: LD_VAR 0 2
12468: PUSH
12469: LD_VAR 0 1
12473: ARRAY
12474: PPUSH
12475: CALL_OW 256
12479: PUSH
12480: LD_INT 250
12482: LESS
12483: IFFALSE 12606
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12485: LD_ADDR_EXP 19
12489: PUSH
12490: LD_EXP 19
12494: PUSH
12495: LD_INT 1
12497: PLUS
12498: ST_TO_ADDR
// DialogueOn ;
12499: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12503: LD_VAR 0 2
12507: PUSH
12508: LD_VAR 0 1
12512: ARRAY
12513: PPUSH
12514: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12518: LD_VAR 0 2
12522: PUSH
12523: LD_VAR 0 1
12527: ARRAY
12528: PPUSH
12529: LD_STRING D
12531: PUSH
12532: LD_VAR 0 3
12536: PUSH
12537: LD_VAR 0 1
12541: ARRAY
12542: STR
12543: PUSH
12544: LD_STRING -Stim-a-1
12546: STR
12547: PPUSH
12548: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: LD_VAR 0 2
12561: PPUSH
12562: LD_VAR 0 1
12566: PPUSH
12567: CALL_OW 3
12571: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_VAR 0 3
12581: PPUSH
12582: LD_VAR 0 1
12586: PPUSH
12587: CALL_OW 3
12591: ST_TO_ADDR
// drugsTested := true ;
12592: LD_ADDR_EXP 6
12596: PUSH
12597: LD_INT 1
12599: ST_TO_ADDR
// DialogueOff ;
12600: CALL_OW 7
// break ;
12604: GO 12608
// end ;
12606: GO 12461
12608: POP
12609: POP
// until not tmp ;
12610: LD_VAR 0 2
12614: NOT
12615: IFFALSE 12439
// end ;
12617: PPOPN 3
12619: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12620: LD_INT 22
12622: PUSH
12623: LD_INT 2
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 34
12632: PUSH
12633: LD_INT 31
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 69
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 33
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: AND
12678: IFFALSE 12691
12680: GO 12682
12682: DISABLE
// remoteControlConstructed := true ;
12683: LD_ADDR_EXP 12
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
12691: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12692: LD_EXP 12
12696: IFFALSE 12996
12698: GO 12700
12700: DISABLE
12701: LD_INT 0
12703: PPUSH
12704: PPUSH
12705: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12706: LD_ADDR_VAR 0 2
12710: PUSH
12711: LD_EXP 21
12715: PUSH
12716: LD_EXP 22
12720: PUSH
12721: LD_EXP 30
12725: PUSH
12726: LD_EXP 28
12730: PUSH
12731: LD_EXP 26
12735: PUSH
12736: LD_EXP 27
12740: PUSH
12741: LD_EXP 32
12745: PUSH
12746: LD_EXP 25
12750: PUSH
12751: LD_EXP 23
12755: PUSH
12756: LD_EXP 24
12760: PUSH
12761: LD_EXP 33
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12779: LD_ADDR_VAR 0 3
12783: PUSH
12784: LD_STRING H
12786: PUSH
12787: LD_STRING G
12789: PUSH
12790: LD_STRING O
12792: PUSH
12793: LD_STRING Mar
12795: PUSH
12796: LD_STRING K
12798: PUSH
12799: LD_STRING S
12801: PUSH
12802: LD_STRING Ks
12804: PUSH
12805: LD_STRING Kam
12807: PUSH
12808: LD_STRING M
12810: PUSH
12811: LD_STRING I
12813: PUSH
12814: LD_STRING A
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12830: LD_INT 35
12832: PPUSH
12833: CALL_OW 67
// for i := tmp downto 1 do
12837: LD_ADDR_VAR 0 1
12841: PUSH
12842: DOUBLE
12843: LD_VAR 0 2
12847: INC
12848: ST_TO_ADDR
12849: LD_INT 1
12851: PUSH
12852: FOR_DOWNTO
12853: IFFALSE 12987
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12855: LD_VAR 0 2
12859: PUSH
12860: LD_VAR 0 1
12864: ARRAY
12865: PPUSH
12866: CALL_OW 257
12870: PUSH
12871: LD_INT 3
12873: EQUAL
12874: PUSH
12875: LD_VAR 0 2
12879: PUSH
12880: LD_VAR 0 1
12884: ARRAY
12885: PPUSH
12886: CALL_OW 432
12890: AND
12891: IFFALSE 12985
// begin DialogueOn ;
12893: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12897: LD_VAR 0 2
12901: PUSH
12902: LD_VAR 0 1
12906: ARRAY
12907: PPUSH
12908: LD_STRING D
12910: PUSH
12911: LD_VAR 0 3
12915: PUSH
12916: LD_VAR 0 1
12920: ARRAY
12921: STR
12922: PUSH
12923: LD_STRING -RC-a-1
12925: STR
12926: PPUSH
12927: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12931: LD_ADDR_VAR 0 2
12935: PUSH
12936: LD_VAR 0 2
12940: PPUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 3
12950: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12951: LD_ADDR_VAR 0 3
12955: PUSH
12956: LD_VAR 0 3
12960: PPUSH
12961: LD_VAR 0 1
12965: PPUSH
12966: CALL_OW 3
12970: ST_TO_ADDR
// DialogueOff ;
12971: CALL_OW 7
// remoteControlTested := true ;
12975: LD_ADDR_EXP 7
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// break ;
12983: GO 12987
// end ;
12985: GO 12852
12987: POP
12988: POP
// until not tmp ;
12989: LD_VAR 0 2
12993: NOT
12994: IFFALSE 12830
// end ;
12996: PPOPN 3
12998: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12999: LD_EXP 7
13003: PUSH
13004: LD_EXP 28
13008: PPUSH
13009: CALL_OW 302
13013: AND
13014: IFFALSE 13043
13016: GO 13018
13018: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13019: LD_EXP 28
13023: PPUSH
13024: LD_STRING DMar-RC-a-2
13026: PPUSH
13027: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13031: LD_EXP 28
13035: PPUSH
13036: LD_STRING DMar-RC-a-3
13038: PPUSH
13039: CALL_OW 88
// end ;
13043: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13044: LD_EXP 14
13048: PUSH
13049: LD_EXP 21
13053: PPUSH
13054: LD_EXP 33
13058: PPUSH
13059: CALL_OW 296
13063: PUSH
13064: LD_INT 8
13066: LESS
13067: AND
13068: PUSH
13069: LD_INT 2
13071: PPUSH
13072: CALL_OW 463
13076: NOT
13077: AND
13078: PUSH
13079: LD_EXP 33
13083: PPUSH
13084: CALL_OW 302
13088: AND
13089: PUSH
13090: LD_EXP 21
13094: PPUSH
13095: CALL_OW 302
13099: AND
13100: IFFALSE 13278
13102: GO 13104
13104: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13105: LD_EXP 33
13109: PPUSH
13110: CALL_OW 310
13114: NOT
13115: IFFALSE 13131
// ComTurnUnit ( Aviradze , Heike ) ;
13117: LD_EXP 33
13121: PPUSH
13122: LD_EXP 21
13126: PPUSH
13127: CALL_OW 119
// if not IsInUnit ( Heike ) then
13131: LD_EXP 21
13135: PPUSH
13136: CALL_OW 310
13140: NOT
13141: IFFALSE 13157
// ComTurnUnit ( Heike , Aviradze ) ;
13143: LD_EXP 21
13147: PPUSH
13148: LD_EXP 33
13152: PPUSH
13153: CALL_OW 119
// wait ( 0 0$1 ) ;
13157: LD_INT 35
13159: PPUSH
13160: CALL_OW 67
// DialogueOn ;
13164: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13168: LD_EXP 33
13172: PPUSH
13173: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13177: LD_EXP 21
13181: PPUSH
13182: LD_STRING DH-Beria-1
13184: PPUSH
13185: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13189: LD_EXP 33
13193: PPUSH
13194: LD_STRING DA-Beria-2
13196: PPUSH
13197: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13201: LD_EXP 21
13205: PPUSH
13206: LD_STRING DH-Beria-3
13208: PPUSH
13209: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13213: LD_EXP 33
13217: PPUSH
13218: LD_STRING DA-Beria-4
13220: PPUSH
13221: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13225: LD_EXP 33
13229: PPUSH
13230: LD_STRING DA-Beria-5
13232: PPUSH
13233: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13237: LD_EXP 33
13241: PPUSH
13242: LD_STRING DA-Beria-6
13244: PPUSH
13245: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13249: LD_EXP 21
13253: PPUSH
13254: LD_STRING DA-Beria-7
13256: PPUSH
13257: CALL_OW 88
// DialogueOff ;
13261: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13265: LD_INT 52
13267: PPUSH
13268: LD_INT 2
13270: PPUSH
13271: LD_INT 1
13273: PPUSH
13274: CALL_OW 322
// end ;
13278: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13279: LD_EXP 26
13283: PPUSH
13284: CALL_OW 300
13288: PUSH
13289: LD_EXP 26
13293: PPUSH
13294: CALL_OW 256
13298: PUSH
13299: LD_INT 10
13301: LESS
13302: AND
13303: IFFALSE 13340
13305: GO 13307
13307: DISABLE
// begin DialogueOn ;
13308: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13312: LD_EXP 26
13316: PPUSH
13317: LD_STRING DK-Kdeath-1
13319: PPUSH
13320: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13324: LD_EXP 21
13328: PPUSH
13329: LD_STRING DH-Kdeath-2
13331: PPUSH
13332: CALL_OW 88
// DialogueOff ;
13336: CALL_OW 7
// end ;
13340: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13341: LD_INT 2
13343: PPUSH
13344: LD_EXP 39
13348: PPUSH
13349: CALL 1298 0 2
13353: IFFALSE 13370
13355: GO 13357
13357: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13358: LD_EXP 21
13362: PPUSH
13363: LD_STRING DH-Obj-1
13365: PPUSH
13366: CALL_OW 88
13370: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13371: LD_INT 2
13373: PPUSH
13374: LD_EXP 40
13378: PPUSH
13379: CALL 1298 0 2
13383: IFFALSE 13400
13385: GO 13387
13387: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13388: LD_EXP 21
13392: PPUSH
13393: LD_STRING DH-Obj-a-1
13395: PPUSH
13396: CALL_OW 88
13400: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13401: LD_EXP 10
13405: PUSH
13406: LD_OWVAR 1
13410: PUSH
13411: LD_INT 23100
13413: PUSH
13414: LD_INT 22050
13416: PUSH
13417: LD_INT 21000
13419: PUSH
13420: LD_INT 19950
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: LD_OWVAR 67
13433: ARRAY
13434: GREATEREQUAL
13435: OR
13436: IFFALSE 13462
13438: GO 13440
13440: DISABLE
// begin if eastBaseCaptured then
13441: LD_EXP 10
13445: IFFALSE 13454
// wait ( 2 2$00 ) ;
13447: LD_INT 4200
13449: PPUSH
13450: CALL_OW 67
// convoyStarted := true ;
13454: LD_ADDR_EXP 17
13458: PUSH
13459: LD_INT 1
13461: ST_TO_ADDR
// end ;
13462: END
// every 0 0$1 trigger convoyStarted do
13463: LD_EXP 17
13467: IFFALSE 13558
13469: GO 13471
13471: DISABLE
// begin DialogueOn ;
13472: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13476: LD_EXP 29
13480: PPUSH
13481: LD_STRING DShar-Convoy-1
13483: PPUSH
13484: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13488: LD_EXP 21
13492: PPUSH
13493: LD_STRING DH-Convoy-2
13495: PPUSH
13496: CALL_OW 88
// DialogueOff ;
13500: CALL_OW 7
// wait ( 0 0$10 ) ;
13504: LD_INT 350
13506: PPUSH
13507: CALL_OW 67
// PrepareConvoy ;
13511: CALL 4563 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13515: LD_INT 5250
13517: PPUSH
13518: LD_INT 11550
13520: PPUSH
13521: CALL_OW 12
13525: PPUSH
13526: CALL_OW 67
// PrepareConvoy ;
13530: CALL 4563 0 0
// convoyCounter := convoyCounter - 1 ;
13534: LD_ADDR_EXP 16
13538: PUSH
13539: LD_EXP 16
13543: PUSH
13544: LD_INT 1
13546: MINUS
13547: ST_TO_ADDR
// until convoyCounter <= 0 ;
13548: LD_EXP 16
13552: PUSH
13553: LD_INT 0
13555: LESSEQUAL
13556: IFFALSE 13515
// end ;
13558: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13559: LD_EXP 15
13563: PUSH
13564: LD_INT 10
13566: GREATEREQUAL
13567: IFFALSE 13584
13569: GO 13571
13571: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13572: LD_EXP 31
13576: PPUSH
13577: LD_STRING DOm-Fail-1
13579: PPUSH
13580: CALL_OW 94
13584: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13585: LD_EXP 39
13589: NOT
13590: PUSH
13591: LD_EXP 40
13595: NOT
13596: AND
13597: IFFALSE 13609
13599: GO 13601
13601: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13602: LD_STRING RaiderDone
13604: PPUSH
13605: CALL_OW 337
13609: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13610: LD_INT 22
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 33
13622: PUSH
13623: LD_INT 2
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PPUSH
13634: CALL_OW 69
13638: PUSH
13639: LD_INT 3
13641: GREATEREQUAL
13642: PUSH
13643: LD_INT 22
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 34
13655: PUSH
13656: LD_INT 31
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PPUSH
13667: CALL_OW 69
13671: PUSH
13672: LD_INT 2
13674: GREATEREQUAL
13675: AND
13676: IFFALSE 13688
13678: GO 13680
13680: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13681: LD_STRING RemoteControlDone
13683: PPUSH
13684: CALL_OW 337
13688: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13689: LD_EXP 16
13693: PUSH
13694: LD_INT 1
13696: LESS
13697: PUSH
13698: LD_EXP 41
13702: PPUSH
13703: LD_INT 52
13705: PUSH
13706: EMPTY
13707: LIST
13708: PUSH
13709: LD_INT 21
13711: PUSH
13712: LD_INT 1
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PPUSH
13723: CALL_OW 72
13727: NOT
13728: AND
13729: PUSH
13730: LD_OWVAR 1
13734: PUSH
13735: LD_INT 126000
13737: GREATEREQUAL
13738: OR
13739: IFFALSE 14924
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
13748: PPUSH
13749: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13750: LD_STRING ReinforcementsDone
13752: PPUSH
13753: CALL_OW 337
// music_class := music_victory ;
13757: LD_ADDR_OWVAR 72
13761: PUSH
13762: LD_INT 4
13764: ST_TO_ADDR
// if tick <= 45 45$00 then
13765: LD_OWVAR 1
13769: PUSH
13770: LD_INT 94500
13772: LESSEQUAL
13773: IFFALSE 13782
// SetAchievement ( ACH_HSPEED_5 ) ;
13775: LD_STRING ACH_HSPEED_5
13777: PPUSH
13778: CALL_OW 543
// InGameOn ;
13782: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13786: LD_EXP 21
13790: PPUSH
13791: LD_STRING DH-end-1
13793: PPUSH
13794: CALL_OW 88
// wait ( 0 0$2 ) ;
13798: LD_INT 70
13800: PPUSH
13801: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13805: LD_EXP 29
13809: PPUSH
13810: LD_STRING DShar-end-2
13812: PPUSH
13813: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13817: LD_EXP 39
13821: NOT
13822: PUSH
13823: LD_EXP 40
13827: NOT
13828: AND
13829: IFFALSE 13845
// begin Say ( Heike , DH-end-3 ) ;
13831: LD_EXP 21
13835: PPUSH
13836: LD_STRING DH-end-3
13838: PPUSH
13839: CALL_OW 88
// end else
13843: GO 13942
// begin Say ( Heike , DH-end-a-3 ) ;
13845: LD_EXP 21
13849: PPUSH
13850: LD_STRING DH-end-a-3
13852: PPUSH
13853: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13857: LD_EXP 29
13861: PPUSH
13862: LD_STRING DShar-end-a-4
13864: PPUSH
13865: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13869: LD_EXP 21
13873: PPUSH
13874: LD_STRING DH-end-a-5
13876: PPUSH
13877: CALL_OW 88
// InGameOff ;
13881: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13885: LD_INT 35
13887: PPUSH
13888: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13892: LD_INT 22
13894: PUSH
13895: LD_INT 3
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: PUSH
13921: LD_INT 0
13923: EQUAL
13924: IFFALSE 13885
// InGameOn ;
13926: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13930: LD_EXP 21
13934: PPUSH
13935: LD_STRING DH-end-a-6
13937: PPUSH
13938: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13942: LD_EXP 29
13946: PPUSH
13947: LD_STRING DShar-end-3
13949: PPUSH
13950: CALL_OW 94
// if not flamethrowerBuilt then
13954: LD_EXP 20
13958: NOT
13959: IFFALSE 13968
// SetAchievement ( ACH_FIRE ) ;
13961: LD_STRING ACH_FIRE
13963: PPUSH
13964: CALL_OW 543
// if drugsTested then
13968: LD_EXP 6
13972: IFFALSE 13986
// AddMedal ( med1 , 1 ) else
13974: LD_STRING med1
13976: PPUSH
13977: LD_INT 1
13979: PPUSH
13980: CALL_OW 101
13984: GO 14026
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13986: LD_INT 5
13988: PPUSH
13989: LD_INT 2
13991: PPUSH
13992: CALL_OW 321
13996: PUSH
13997: LD_INT 2
13999: EQUAL
14000: IFFALSE 14015
// AddMedal ( med1 , - 1 ) else
14002: LD_STRING med1
14004: PPUSH
14005: LD_INT 1
14007: NEG
14008: PPUSH
14009: CALL_OW 101
14013: GO 14026
// AddMedal ( med1 , - 2 ) ;
14015: LD_STRING med1
14017: PPUSH
14018: LD_INT 2
14020: NEG
14021: PPUSH
14022: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14026: LD_INT 22
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 33
14038: PUSH
14039: LD_INT 2
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 69
14054: PUSH
14055: LD_INT 3
14057: GREATEREQUAL
14058: PUSH
14059: LD_INT 22
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 34
14071: PUSH
14072: LD_INT 31
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 69
14087: PUSH
14088: LD_INT 1
14090: GREATEREQUAL
14091: AND
14092: IFFALSE 14106
// AddMedal ( med2 , 1 ) else
14094: LD_STRING med2
14096: PPUSH
14097: LD_INT 1
14099: PPUSH
14100: CALL_OW 101
14104: GO 14117
// AddMedal ( med2 , - 1 ) ;
14106: LD_STRING med2
14108: PPUSH
14109: LD_INT 1
14111: NEG
14112: PPUSH
14113: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14117: LD_EXP 15
14121: PUSH
14122: LD_INT 10
14124: PUSH
14125: LD_INT 8
14127: PUSH
14128: LD_INT 6
14130: PUSH
14131: LD_INT 5
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: PUSH
14140: LD_OWVAR 67
14144: ARRAY
14145: LESS
14146: IFFALSE 14160
// AddMedal ( med3 , 1 ) else
14148: LD_STRING med3
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 101
14158: GO 14171
// AddMedal ( med3 , - 1 ) ;
14160: LD_STRING med3
14162: PPUSH
14163: LD_INT 1
14165: NEG
14166: PPUSH
14167: CALL_OW 101
// GiveMedals ( MAIN ) ;
14171: LD_STRING MAIN
14173: PPUSH
14174: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14178: LD_INT 22
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 23
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: PPUSH
14213: CALL_OW 69
14217: PPUSH
14218: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14222: LD_EXP 15
14226: PPUSH
14227: LD_STRING 05_ConvoySavedCounter
14229: PPUSH
14230: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14234: LD_EXP 13
14238: PPUSH
14239: LD_STRING 05_Radar
14241: PPUSH
14242: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14246: LD_EXP 6
14250: PPUSH
14251: LD_STRING 05_DrugsTested
14253: PPUSH
14254: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14258: LD_INT 22
14260: PUSH
14261: LD_INT 2
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 33
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 69
14286: PUSH
14287: LD_INT 3
14289: GREATEREQUAL
14290: PUSH
14291: LD_INT 22
14293: PUSH
14294: LD_INT 2
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: LD_INT 34
14303: PUSH
14304: LD_INT 31
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PPUSH
14315: CALL_OW 69
14319: PUSH
14320: LD_INT 2
14322: GREATEREQUAL
14323: AND
14324: PPUSH
14325: LD_STRING 05_RemoteControl
14327: PPUSH
14328: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14332: LD_ADDR_VAR 0 2
14336: PUSH
14337: LD_INT 22
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 21
14349: PUSH
14350: LD_INT 2
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// if tmp then
14366: LD_VAR 0 2
14370: IFFALSE 14489
// begin vehs := [ ] ;
14372: LD_ADDR_VAR 0 4
14376: PUSH
14377: EMPTY
14378: ST_TO_ADDR
// for i in tmp do
14379: LD_ADDR_VAR 0 1
14383: PUSH
14384: LD_VAR 0 2
14388: PUSH
14389: FOR_IN
14390: IFFALSE 14475
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14392: LD_ADDR_VAR 0 4
14396: PUSH
14397: LD_VAR 0 4
14401: PPUSH
14402: LD_VAR 0 4
14406: PUSH
14407: LD_INT 1
14409: PLUS
14410: PPUSH
14411: LD_VAR 0 1
14415: PPUSH
14416: CALL_OW 265
14420: PUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 262
14430: PUSH
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 263
14440: PUSH
14441: LD_VAR 0 1
14445: PPUSH
14446: CALL_OW 264
14450: PUSH
14451: LD_VAR 0 1
14455: PPUSH
14456: CALL_OW 248
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 1
14472: ST_TO_ADDR
14473: GO 14389
14475: POP
14476: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14477: LD_VAR 0 4
14481: PPUSH
14482: LD_STRING 05_Vehicles
14484: PPUSH
14485: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14489: LD_ADDR_VAR 0 2
14493: PUSH
14494: LD_INT 25
14496: PPUSH
14497: LD_INT 21
14499: PUSH
14500: LD_INT 3
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 70
14511: ST_TO_ADDR
// tmp2 := [ ] ;
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: EMPTY
14518: ST_TO_ADDR
// if tmp then
14519: LD_VAR 0 2
14523: IFFALSE 14676
// begin for i in tmp do
14525: LD_ADDR_VAR 0 1
14529: PUSH
14530: LD_VAR 0 2
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14662
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14538: LD_ADDR_VAR 0 3
14542: PUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: LD_VAR 0 1
14552: PPUSH
14553: CALL_OW 266
14557: PUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 250
14567: PUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL_OW 251
14577: PUSH
14578: LD_VAR 0 1
14582: PPUSH
14583: CALL_OW 254
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 248
14597: PUSH
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 267
14607: PUSH
14608: LD_VAR 0 1
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 268
14620: PUSH
14621: LD_VAR 0 1
14625: PPUSH
14626: LD_INT 2
14628: PPUSH
14629: CALL_OW 268
14633: PUSH
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 269
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PPUSH
14655: CALL 73207 0 2
14659: ST_TO_ADDR
14660: GO 14535
14662: POP
14663: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14664: LD_VAR 0 3
14668: PPUSH
14669: LD_STRING 05_Buildings
14671: PPUSH
14672: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14676: LD_EXP 21
14680: PPUSH
14681: LD_STRING 05_Heike
14683: PPUSH
14684: CALL_OW 38
// if Aviradze then
14688: LD_EXP 33
14692: IFFALSE 14706
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14694: LD_EXP 33
14698: PPUSH
14699: LD_STRING 05_Aviradze
14701: PPUSH
14702: CALL_OW 38
// if Ibrahim then
14706: LD_EXP 24
14710: IFFALSE 14724
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14712: LD_EXP 24
14716: PPUSH
14717: LD_STRING 05_Ibrahim
14719: PPUSH
14720: CALL_OW 38
// if Kamil then
14724: LD_EXP 25
14728: IFFALSE 14742
// SaveCharacters ( Kamil , 05_Kamil ) ;
14730: LD_EXP 25
14734: PPUSH
14735: LD_STRING 05_Kamil
14737: PPUSH
14738: CALL_OW 38
// if Sophia then
14742: LD_EXP 27
14746: IFFALSE 14760
// SaveCharacters ( Sophia , 05_Sophia ) ;
14748: LD_EXP 27
14752: PPUSH
14753: LD_STRING 05_Sophia
14755: PPUSH
14756: CALL_OW 38
// if Kaia then
14760: LD_EXP 26
14764: IFFALSE 14778
// SaveCharacters ( Kaia , 05_Kaia ) ;
14766: LD_EXP 26
14770: PPUSH
14771: LD_STRING 05_Kaia
14773: PPUSH
14774: CALL_OW 38
// if Givi then
14778: LD_EXP 22
14782: IFFALSE 14796
// SaveCharacters ( Givi , 05_Givi ) ;
14784: LD_EXP 22
14788: PPUSH
14789: LD_STRING 05_Givi
14791: PPUSH
14792: CALL_OW 38
// if Mike then
14796: LD_EXP 23
14800: IFFALSE 14814
// SaveCharacters ( Mike , 05_Mike ) ;
14802: LD_EXP 23
14806: PPUSH
14807: LD_STRING 05_Mike
14809: PPUSH
14810: CALL_OW 38
// if Markov then
14814: LD_EXP 28
14818: IFFALSE 14832
// SaveCharacters ( Markov , 05_Markov ) ;
14820: LD_EXP 28
14824: PPUSH
14825: LD_STRING 05_Markov
14827: PPUSH
14828: CALL_OW 38
// if Kurt then
14832: LD_EXP 32
14836: IFFALSE 14850
// SaveCharacters ( Kurt , 05_Kurt ) ;
14838: LD_EXP 32
14842: PPUSH
14843: LD_STRING 05_Kurt
14845: PPUSH
14846: CALL_OW 38
// if heikeSecondSquad then
14850: LD_EXP 34
14854: IFFALSE 14868
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14856: LD_EXP 34
14860: PPUSH
14861: LD_STRING 05_others
14863: PPUSH
14864: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 23
14885: PUSH
14886: LD_INT 0
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: ST_TO_ADDR
// if tmp then
14902: LD_VAR 0 2
14906: IFFALSE 14920
// SaveCharacters ( tmp , 05_apes ) ;
14908: LD_VAR 0 2
14912: PPUSH
14913: LD_STRING 05_apes
14915: PPUSH
14916: CALL_OW 38
// YouWin ;
14920: CALL_OW 103
// end ; end_of_file
14924: PPOPN 4
14926: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14927: LD_EXP 9
14931: PUSH
14932: LD_INT 13
14934: PPUSH
14935: LD_INT 1
14937: PPUSH
14938: CALL_OW 287
14942: PUSH
14943: LD_INT 25
14945: LESS
14946: AND
14947: IFFALSE 14974
14949: GO 14951
14951: DISABLE
// begin enable ;
14952: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14953: LD_INT 1
14955: PPUSH
14956: LD_INT 5
14958: PPUSH
14959: CALL_OW 12
14963: PPUSH
14964: LD_INT 13
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 55
// end ; end_of_file
14974: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14975: LD_INT 0
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 264
14990: PUSH
14991: LD_INT 91
14993: EQUAL
14994: IFFALSE 15066
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14996: LD_INT 68
14998: PPUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: CALL_OW 255
15008: PPUSH
15009: CALL_OW 321
15013: PUSH
15014: LD_INT 2
15016: EQUAL
15017: IFFALSE 15029
// eff := 70 else
15019: LD_ADDR_VAR 0 4
15023: PUSH
15024: LD_INT 70
15026: ST_TO_ADDR
15027: GO 15037
// eff := 30 ;
15029: LD_ADDR_VAR 0 4
15033: PUSH
15034: LD_INT 30
15036: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL_OW 250
15046: PPUSH
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 251
15056: PPUSH
15057: LD_VAR 0 4
15061: PPUSH
15062: CALL_OW 495
// end ; end ;
15066: LD_VAR 0 2
15070: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15071: LD_INT 0
15073: PPUSH
// end ;
15074: LD_VAR 0 4
15078: RET
// export function SOS_Command ( cmd ) ; begin
15079: LD_INT 0
15081: PPUSH
// end ;
15082: LD_VAR 0 2
15086: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15087: LD_INT 0
15089: PPUSH
// end ;
15090: LD_VAR 0 6
15094: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15095: LD_INT 0
15097: PPUSH
15098: PPUSH
// if not vehicle or not factory then
15099: LD_VAR 0 1
15103: NOT
15104: PUSH
15105: LD_VAR 0 2
15109: NOT
15110: OR
15111: IFFALSE 15115
// exit ;
15113: GO 15346
// if factoryWaypoints >= factory then
15115: LD_EXP 113
15119: PUSH
15120: LD_VAR 0 2
15124: GREATEREQUAL
15125: IFFALSE 15346
// if factoryWaypoints [ factory ] then
15127: LD_EXP 113
15131: PUSH
15132: LD_VAR 0 2
15136: ARRAY
15137: IFFALSE 15346
// begin if GetControl ( vehicle ) = control_manual then
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 263
15148: PUSH
15149: LD_INT 1
15151: EQUAL
15152: IFFALSE 15233
// begin driver := IsDrivenBy ( vehicle ) ;
15154: LD_ADDR_VAR 0 4
15158: PUSH
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 311
15168: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15169: LD_VAR 0 4
15173: PPUSH
15174: LD_EXP 113
15178: PUSH
15179: LD_VAR 0 2
15183: ARRAY
15184: PUSH
15185: LD_INT 3
15187: ARRAY
15188: PPUSH
15189: LD_EXP 113
15193: PUSH
15194: LD_VAR 0 2
15198: ARRAY
15199: PUSH
15200: LD_INT 4
15202: ARRAY
15203: PPUSH
15204: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15208: LD_VAR 0 4
15212: PPUSH
15213: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
15217: LD_VAR 0 4
15221: PPUSH
15222: LD_VAR 0 2
15226: PPUSH
15227: CALL_OW 180
// end else
15231: GO 15346
// if GetControl ( vehicle ) = control_remote then
15233: LD_VAR 0 1
15237: PPUSH
15238: CALL_OW 263
15242: PUSH
15243: LD_INT 2
15245: EQUAL
15246: IFFALSE 15307
// begin wait ( 0 0$2 ) ;
15248: LD_INT 70
15250: PPUSH
15251: CALL_OW 67
// if Connect ( vehicle ) then
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL 43813 0 1
15264: IFFALSE 15305
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_EXP 113
15275: PUSH
15276: LD_VAR 0 2
15280: ARRAY
15281: PUSH
15282: LD_INT 3
15284: ARRAY
15285: PPUSH
15286: LD_EXP 113
15290: PUSH
15291: LD_VAR 0 2
15295: ARRAY
15296: PUSH
15297: LD_INT 4
15299: ARRAY
15300: PPUSH
15301: CALL_OW 171
// end else
15305: GO 15346
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15307: LD_VAR 0 1
15311: PPUSH
15312: LD_EXP 113
15316: PUSH
15317: LD_VAR 0 2
15321: ARRAY
15322: PUSH
15323: LD_INT 3
15325: ARRAY
15326: PPUSH
15327: LD_EXP 113
15331: PUSH
15332: LD_VAR 0 2
15336: ARRAY
15337: PUSH
15338: LD_INT 4
15340: ARRAY
15341: PPUSH
15342: CALL_OW 171
// end ; end ;
15346: LD_VAR 0 3
15350: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15351: LD_INT 0
15353: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15354: LD_VAR 0 1
15358: PUSH
15359: LD_INT 250
15361: EQUAL
15362: PUSH
15363: LD_VAR 0 2
15367: PPUSH
15368: CALL_OW 264
15372: PUSH
15373: LD_INT 81
15375: EQUAL
15376: AND
15377: IFFALSE 15398
// MinerPlaceMine ( unit , x , y ) ;
15379: LD_VAR 0 2
15383: PPUSH
15384: LD_VAR 0 4
15388: PPUSH
15389: LD_VAR 0 5
15393: PPUSH
15394: CALL 18222 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15398: LD_VAR 0 1
15402: PUSH
15403: LD_INT 251
15405: EQUAL
15406: PUSH
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 264
15416: PUSH
15417: LD_INT 81
15419: EQUAL
15420: AND
15421: IFFALSE 15442
// MinerDetonateMine ( unit , x , y ) ;
15423: LD_VAR 0 2
15427: PPUSH
15428: LD_VAR 0 4
15432: PPUSH
15433: LD_VAR 0 5
15437: PPUSH
15438: CALL 18497 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15442: LD_VAR 0 1
15446: PUSH
15447: LD_INT 252
15449: EQUAL
15450: PUSH
15451: LD_VAR 0 2
15455: PPUSH
15456: CALL_OW 264
15460: PUSH
15461: LD_INT 81
15463: EQUAL
15464: AND
15465: IFFALSE 15486
// MinerCreateMinefield ( unit , x , y ) ;
15467: LD_VAR 0 2
15471: PPUSH
15472: LD_VAR 0 4
15476: PPUSH
15477: LD_VAR 0 5
15481: PPUSH
15482: CALL 18914 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15486: LD_VAR 0 1
15490: PUSH
15491: LD_INT 253
15493: EQUAL
15494: PUSH
15495: LD_VAR 0 2
15499: PPUSH
15500: CALL_OW 257
15504: PUSH
15505: LD_INT 5
15507: EQUAL
15508: AND
15509: IFFALSE 15530
// ComBinocular ( unit , x , y ) ;
15511: LD_VAR 0 2
15515: PPUSH
15516: LD_VAR 0 4
15520: PPUSH
15521: LD_VAR 0 5
15525: PPUSH
15526: CALL 19283 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15530: LD_VAR 0 1
15534: PUSH
15535: LD_INT 254
15537: EQUAL
15538: PUSH
15539: LD_VAR 0 2
15543: PPUSH
15544: CALL_OW 264
15548: PUSH
15549: LD_INT 99
15551: EQUAL
15552: AND
15553: PUSH
15554: LD_VAR 0 3
15558: PPUSH
15559: CALL_OW 263
15563: PUSH
15564: LD_INT 3
15566: EQUAL
15567: AND
15568: IFFALSE 15584
// HackDestroyVehicle ( unit , selectedUnit ) ;
15570: LD_VAR 0 2
15574: PPUSH
15575: LD_VAR 0 3
15579: PPUSH
15580: CALL 17586 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15584: LD_VAR 0 1
15588: PUSH
15589: LD_INT 255
15591: EQUAL
15592: PUSH
15593: LD_VAR 0 2
15597: PPUSH
15598: CALL_OW 264
15602: PUSH
15603: LD_INT 14
15605: PUSH
15606: LD_INT 53
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: IN
15613: AND
15614: PUSH
15615: LD_VAR 0 4
15619: PPUSH
15620: LD_VAR 0 5
15624: PPUSH
15625: CALL_OW 488
15629: AND
15630: IFFALSE 15654
// CutTreeXYR ( unit , x , y , 12 ) ;
15632: LD_VAR 0 2
15636: PPUSH
15637: LD_VAR 0 4
15641: PPUSH
15642: LD_VAR 0 5
15646: PPUSH
15647: LD_INT 12
15649: PPUSH
15650: CALL 15749 0 4
// if cmd = 256 then
15654: LD_VAR 0 1
15658: PUSH
15659: LD_INT 256
15661: EQUAL
15662: IFFALSE 15683
// SetFactoryWaypoint ( unit , x , y ) ;
15664: LD_VAR 0 2
15668: PPUSH
15669: LD_VAR 0 4
15673: PPUSH
15674: LD_VAR 0 5
15678: PPUSH
15679: CALL 34194 0 3
// if cmd = 257 then
15683: LD_VAR 0 1
15687: PUSH
15688: LD_INT 257
15690: EQUAL
15691: IFFALSE 15712
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15693: LD_VAR 0 2
15697: PPUSH
15698: LD_VAR 0 4
15702: PPUSH
15703: LD_VAR 0 5
15707: PPUSH
15708: CALL 34556 0 3
// if cmd = 258 then
15712: LD_VAR 0 1
15716: PUSH
15717: LD_INT 258
15719: EQUAL
15720: IFFALSE 15744
// BurnTreeXYR ( unit , x , y , 8 ) ;
15722: LD_VAR 0 2
15726: PPUSH
15727: LD_VAR 0 4
15731: PPUSH
15732: LD_VAR 0 5
15736: PPUSH
15737: LD_INT 8
15739: PPUSH
15740: CALL 16143 0 4
// end ;
15744: LD_VAR 0 6
15748: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15749: LD_INT 0
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
15756: PPUSH
15757: PPUSH
15758: PPUSH
15759: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 302
15769: NOT
15770: PUSH
15771: LD_VAR 0 2
15775: PPUSH
15776: LD_VAR 0 3
15780: PPUSH
15781: CALL_OW 488
15785: NOT
15786: OR
15787: PUSH
15788: LD_VAR 0 4
15792: NOT
15793: OR
15794: IFFALSE 15798
// exit ;
15796: GO 16138
// list := [ ] ;
15798: LD_ADDR_VAR 0 13
15802: PUSH
15803: EMPTY
15804: ST_TO_ADDR
// if x - r < 0 then
15805: LD_VAR 0 2
15809: PUSH
15810: LD_VAR 0 4
15814: MINUS
15815: PUSH
15816: LD_INT 0
15818: LESS
15819: IFFALSE 15831
// min_x := 0 else
15821: LD_ADDR_VAR 0 7
15825: PUSH
15826: LD_INT 0
15828: ST_TO_ADDR
15829: GO 15847
// min_x := x - r ;
15831: LD_ADDR_VAR 0 7
15835: PUSH
15836: LD_VAR 0 2
15840: PUSH
15841: LD_VAR 0 4
15845: MINUS
15846: ST_TO_ADDR
// if y - r < 0 then
15847: LD_VAR 0 3
15851: PUSH
15852: LD_VAR 0 4
15856: MINUS
15857: PUSH
15858: LD_INT 0
15860: LESS
15861: IFFALSE 15873
// min_y := 0 else
15863: LD_ADDR_VAR 0 8
15867: PUSH
15868: LD_INT 0
15870: ST_TO_ADDR
15871: GO 15889
// min_y := y - r ;
15873: LD_ADDR_VAR 0 8
15877: PUSH
15878: LD_VAR 0 3
15882: PUSH
15883: LD_VAR 0 4
15887: MINUS
15888: ST_TO_ADDR
// max_x := x + r ;
15889: LD_ADDR_VAR 0 9
15893: PUSH
15894: LD_VAR 0 2
15898: PUSH
15899: LD_VAR 0 4
15903: PLUS
15904: ST_TO_ADDR
// max_y := y + r ;
15905: LD_ADDR_VAR 0 10
15909: PUSH
15910: LD_VAR 0 3
15914: PUSH
15915: LD_VAR 0 4
15919: PLUS
15920: ST_TO_ADDR
// for _x = min_x to max_x do
15921: LD_ADDR_VAR 0 11
15925: PUSH
15926: DOUBLE
15927: LD_VAR 0 7
15931: DEC
15932: ST_TO_ADDR
15933: LD_VAR 0 9
15937: PUSH
15938: FOR_TO
15939: IFFALSE 16056
// for _y = min_y to max_y do
15941: LD_ADDR_VAR 0 12
15945: PUSH
15946: DOUBLE
15947: LD_VAR 0 8
15951: DEC
15952: ST_TO_ADDR
15953: LD_VAR 0 10
15957: PUSH
15958: FOR_TO
15959: IFFALSE 16052
// begin if not ValidHex ( _x , _y ) then
15961: LD_VAR 0 11
15965: PPUSH
15966: LD_VAR 0 12
15970: PPUSH
15971: CALL_OW 488
15975: NOT
15976: IFFALSE 15980
// continue ;
15978: GO 15958
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15980: LD_VAR 0 11
15984: PPUSH
15985: LD_VAR 0 12
15989: PPUSH
15990: CALL_OW 351
15994: PUSH
15995: LD_VAR 0 11
15999: PPUSH
16000: LD_VAR 0 12
16004: PPUSH
16005: CALL_OW 554
16009: AND
16010: IFFALSE 16050
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16012: LD_ADDR_VAR 0 13
16016: PUSH
16017: LD_VAR 0 13
16021: PPUSH
16022: LD_VAR 0 13
16026: PUSH
16027: LD_INT 1
16029: PLUS
16030: PPUSH
16031: LD_VAR 0 11
16035: PUSH
16036: LD_VAR 0 12
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PPUSH
16045: CALL_OW 2
16049: ST_TO_ADDR
// end ;
16050: GO 15958
16052: POP
16053: POP
16054: GO 15938
16056: POP
16057: POP
// if not list then
16058: LD_VAR 0 13
16062: NOT
16063: IFFALSE 16067
// exit ;
16065: GO 16138
// for i in list do
16067: LD_ADDR_VAR 0 6
16071: PUSH
16072: LD_VAR 0 13
16076: PUSH
16077: FOR_IN
16078: IFFALSE 16136
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16080: LD_VAR 0 1
16084: PPUSH
16085: LD_STRING M
16087: PUSH
16088: LD_VAR 0 6
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PUSH
16097: LD_VAR 0 6
16101: PUSH
16102: LD_INT 2
16104: ARRAY
16105: PUSH
16106: LD_INT 0
16108: PUSH
16109: LD_INT 0
16111: PUSH
16112: LD_INT 0
16114: PUSH
16115: LD_INT 0
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: PUSH
16127: EMPTY
16128: LIST
16129: PPUSH
16130: CALL_OW 447
16134: GO 16077
16136: POP
16137: POP
// end ;
16138: LD_VAR 0 5
16142: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16143: LD_INT 0
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
16150: PPUSH
16151: PPUSH
16152: PPUSH
16153: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 302
16163: NOT
16164: PUSH
16165: LD_VAR 0 2
16169: PPUSH
16170: LD_VAR 0 3
16174: PPUSH
16175: CALL_OW 488
16179: NOT
16180: OR
16181: PUSH
16182: LD_VAR 0 4
16186: NOT
16187: OR
16188: IFFALSE 16192
// exit ;
16190: GO 16540
// list := [ ] ;
16192: LD_ADDR_VAR 0 13
16196: PUSH
16197: EMPTY
16198: ST_TO_ADDR
// if x - r < 0 then
16199: LD_VAR 0 2
16203: PUSH
16204: LD_VAR 0 4
16208: MINUS
16209: PUSH
16210: LD_INT 0
16212: LESS
16213: IFFALSE 16225
// min_x := 0 else
16215: LD_ADDR_VAR 0 7
16219: PUSH
16220: LD_INT 0
16222: ST_TO_ADDR
16223: GO 16241
// min_x := x - r ;
16225: LD_ADDR_VAR 0 7
16229: PUSH
16230: LD_VAR 0 2
16234: PUSH
16235: LD_VAR 0 4
16239: MINUS
16240: ST_TO_ADDR
// if y - r < 0 then
16241: LD_VAR 0 3
16245: PUSH
16246: LD_VAR 0 4
16250: MINUS
16251: PUSH
16252: LD_INT 0
16254: LESS
16255: IFFALSE 16267
// min_y := 0 else
16257: LD_ADDR_VAR 0 8
16261: PUSH
16262: LD_INT 0
16264: ST_TO_ADDR
16265: GO 16283
// min_y := y - r ;
16267: LD_ADDR_VAR 0 8
16271: PUSH
16272: LD_VAR 0 3
16276: PUSH
16277: LD_VAR 0 4
16281: MINUS
16282: ST_TO_ADDR
// max_x := x + r ;
16283: LD_ADDR_VAR 0 9
16287: PUSH
16288: LD_VAR 0 2
16292: PUSH
16293: LD_VAR 0 4
16297: PLUS
16298: ST_TO_ADDR
// max_y := y + r ;
16299: LD_ADDR_VAR 0 10
16303: PUSH
16304: LD_VAR 0 3
16308: PUSH
16309: LD_VAR 0 4
16313: PLUS
16314: ST_TO_ADDR
// for _x = min_x to max_x do
16315: LD_ADDR_VAR 0 11
16319: PUSH
16320: DOUBLE
16321: LD_VAR 0 7
16325: DEC
16326: ST_TO_ADDR
16327: LD_VAR 0 9
16331: PUSH
16332: FOR_TO
16333: IFFALSE 16450
// for _y = min_y to max_y do
16335: LD_ADDR_VAR 0 12
16339: PUSH
16340: DOUBLE
16341: LD_VAR 0 8
16345: DEC
16346: ST_TO_ADDR
16347: LD_VAR 0 10
16351: PUSH
16352: FOR_TO
16353: IFFALSE 16446
// begin if not ValidHex ( _x , _y ) then
16355: LD_VAR 0 11
16359: PPUSH
16360: LD_VAR 0 12
16364: PPUSH
16365: CALL_OW 488
16369: NOT
16370: IFFALSE 16374
// continue ;
16372: GO 16352
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16374: LD_VAR 0 11
16378: PPUSH
16379: LD_VAR 0 12
16383: PPUSH
16384: CALL_OW 351
16388: PUSH
16389: LD_VAR 0 11
16393: PPUSH
16394: LD_VAR 0 12
16398: PPUSH
16399: CALL_OW 554
16403: AND
16404: IFFALSE 16444
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16406: LD_ADDR_VAR 0 13
16410: PUSH
16411: LD_VAR 0 13
16415: PPUSH
16416: LD_VAR 0 13
16420: PUSH
16421: LD_INT 1
16423: PLUS
16424: PPUSH
16425: LD_VAR 0 11
16429: PUSH
16430: LD_VAR 0 12
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PPUSH
16439: CALL_OW 2
16443: ST_TO_ADDR
// end ;
16444: GO 16352
16446: POP
16447: POP
16448: GO 16332
16450: POP
16451: POP
// if not list then
16452: LD_VAR 0 13
16456: NOT
16457: IFFALSE 16461
// exit ;
16459: GO 16540
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
16461: LD_ADDR_VAR 0 13
16465: PUSH
16466: LD_VAR 0 1
16470: PPUSH
16471: LD_VAR 0 13
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL 40955 0 4
16486: ST_TO_ADDR
// ComStop ( flame ) ;
16487: LD_VAR 0 1
16491: PPUSH
16492: CALL_OW 141
// for i in list do
16496: LD_ADDR_VAR 0 6
16500: PUSH
16501: LD_VAR 0 13
16505: PUSH
16506: FOR_IN
16507: IFFALSE 16538
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
16509: LD_VAR 0 1
16513: PPUSH
16514: LD_VAR 0 6
16518: PUSH
16519: LD_INT 1
16521: ARRAY
16522: PPUSH
16523: LD_VAR 0 6
16527: PUSH
16528: LD_INT 2
16530: ARRAY
16531: PPUSH
16532: CALL_OW 176
16536: GO 16506
16538: POP
16539: POP
// end ;
16540: LD_VAR 0 5
16544: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16545: LD_EXP 44
16549: NOT
16550: IFFALSE 16600
16552: GO 16554
16554: DISABLE
// begin initHack := true ;
16555: LD_ADDR_EXP 44
16559: PUSH
16560: LD_INT 1
16562: ST_TO_ADDR
// hackTanks := [ ] ;
16563: LD_ADDR_EXP 45
16567: PUSH
16568: EMPTY
16569: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16570: LD_ADDR_EXP 46
16574: PUSH
16575: EMPTY
16576: ST_TO_ADDR
// hackLimit := 3 ;
16577: LD_ADDR_EXP 47
16581: PUSH
16582: LD_INT 3
16584: ST_TO_ADDR
// hackDist := 12 ;
16585: LD_ADDR_EXP 48
16589: PUSH
16590: LD_INT 12
16592: ST_TO_ADDR
// hackCounter := [ ] ;
16593: LD_ADDR_EXP 49
16597: PUSH
16598: EMPTY
16599: ST_TO_ADDR
// end ;
16600: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16601: LD_EXP 44
16605: PUSH
16606: LD_INT 34
16608: PUSH
16609: LD_INT 99
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PPUSH
16616: CALL_OW 69
16620: AND
16621: IFFALSE 16874
16623: GO 16625
16625: DISABLE
16626: LD_INT 0
16628: PPUSH
16629: PPUSH
// begin enable ;
16630: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16631: LD_ADDR_VAR 0 1
16635: PUSH
16636: LD_INT 34
16638: PUSH
16639: LD_INT 99
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PPUSH
16646: CALL_OW 69
16650: PUSH
16651: FOR_IN
16652: IFFALSE 16872
// begin if not i in hackTanks then
16654: LD_VAR 0 1
16658: PUSH
16659: LD_EXP 45
16663: IN
16664: NOT
16665: IFFALSE 16748
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16667: LD_ADDR_EXP 45
16671: PUSH
16672: LD_EXP 45
16676: PPUSH
16677: LD_EXP 45
16681: PUSH
16682: LD_INT 1
16684: PLUS
16685: PPUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: CALL_OW 1
16695: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16696: LD_ADDR_EXP 46
16700: PUSH
16701: LD_EXP 46
16705: PPUSH
16706: LD_EXP 46
16710: PUSH
16711: LD_INT 1
16713: PLUS
16714: PPUSH
16715: EMPTY
16716: PPUSH
16717: CALL_OW 1
16721: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16722: LD_ADDR_EXP 49
16726: PUSH
16727: LD_EXP 49
16731: PPUSH
16732: LD_EXP 49
16736: PUSH
16737: LD_INT 1
16739: PLUS
16740: PPUSH
16741: EMPTY
16742: PPUSH
16743: CALL_OW 1
16747: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 302
16757: NOT
16758: IFFALSE 16771
// begin HackUnlinkAll ( i ) ;
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL 16877 0 1
// continue ;
16769: GO 16651
// end ; HackCheckCapturedStatus ( i ) ;
16771: LD_VAR 0 1
16775: PPUSH
16776: CALL 17320 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_INT 81
16787: PUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 255
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 33
16804: PUSH
16805: LD_INT 3
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 91
16814: PUSH
16815: LD_VAR 0 1
16819: PUSH
16820: LD_EXP 48
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 50
16832: PUSH
16833: EMPTY
16834: LIST
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: PPUSH
16842: CALL_OW 69
16846: ST_TO_ADDR
// if not tmp then
16847: LD_VAR 0 2
16851: NOT
16852: IFFALSE 16856
// continue ;
16854: GO 16651
// HackLink ( i , tmp ) ;
16856: LD_VAR 0 1
16860: PPUSH
16861: LD_VAR 0 2
16865: PPUSH
16866: CALL 17013 0 2
// end ;
16870: GO 16651
16872: POP
16873: POP
// end ;
16874: PPOPN 2
16876: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16877: LD_INT 0
16879: PPUSH
16880: PPUSH
16881: PPUSH
// if not hack in hackTanks then
16882: LD_VAR 0 1
16886: PUSH
16887: LD_EXP 45
16891: IN
16892: NOT
16893: IFFALSE 16897
// exit ;
16895: GO 17008
// index := GetElementIndex ( hackTanks , hack ) ;
16897: LD_ADDR_VAR 0 4
16901: PUSH
16902: LD_EXP 45
16906: PPUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL 40252 0 2
16916: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16917: LD_EXP 46
16921: PUSH
16922: LD_VAR 0 4
16926: ARRAY
16927: IFFALSE 17008
// begin for i in hackTanksCaptured [ index ] do
16929: LD_ADDR_VAR 0 3
16933: PUSH
16934: LD_EXP 46
16938: PUSH
16939: LD_VAR 0 4
16943: ARRAY
16944: PUSH
16945: FOR_IN
16946: IFFALSE 16972
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16948: LD_VAR 0 3
16952: PUSH
16953: LD_INT 1
16955: ARRAY
16956: PPUSH
16957: LD_VAR 0 3
16961: PUSH
16962: LD_INT 2
16964: ARRAY
16965: PPUSH
16966: CALL_OW 235
16970: GO 16945
16972: POP
16973: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16974: LD_ADDR_EXP 46
16978: PUSH
16979: LD_EXP 46
16983: PPUSH
16984: LD_VAR 0 4
16988: PPUSH
16989: EMPTY
16990: PPUSH
16991: CALL_OW 1
16995: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16996: LD_VAR 0 1
17000: PPUSH
17001: LD_INT 0
17003: PPUSH
17004: CALL_OW 505
// end ; end ;
17008: LD_VAR 0 2
17012: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17013: LD_INT 0
17015: PPUSH
17016: PPUSH
17017: PPUSH
// if not hack in hackTanks or not vehicles then
17018: LD_VAR 0 1
17022: PUSH
17023: LD_EXP 45
17027: IN
17028: NOT
17029: PUSH
17030: LD_VAR 0 2
17034: NOT
17035: OR
17036: IFFALSE 17040
// exit ;
17038: GO 17315
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17040: LD_ADDR_VAR 0 2
17044: PUSH
17045: LD_VAR 0 1
17049: PPUSH
17050: LD_VAR 0 2
17054: PPUSH
17055: LD_INT 1
17057: PPUSH
17058: LD_INT 1
17060: PPUSH
17061: CALL 40902 0 4
17065: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17066: LD_ADDR_VAR 0 5
17070: PUSH
17071: LD_EXP 45
17075: PPUSH
17076: LD_VAR 0 1
17080: PPUSH
17081: CALL 40252 0 2
17085: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17086: LD_EXP 46
17090: PUSH
17091: LD_VAR 0 5
17095: ARRAY
17096: PUSH
17097: LD_EXP 47
17101: LESS
17102: IFFALSE 17291
// begin for i := 1 to vehicles do
17104: LD_ADDR_VAR 0 4
17108: PUSH
17109: DOUBLE
17110: LD_INT 1
17112: DEC
17113: ST_TO_ADDR
17114: LD_VAR 0 2
17118: PUSH
17119: FOR_TO
17120: IFFALSE 17289
// begin if hackTanksCaptured [ index ] = hackLimit then
17122: LD_EXP 46
17126: PUSH
17127: LD_VAR 0 5
17131: ARRAY
17132: PUSH
17133: LD_EXP 47
17137: EQUAL
17138: IFFALSE 17142
// break ;
17140: GO 17289
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17142: LD_ADDR_EXP 49
17146: PUSH
17147: LD_EXP 49
17151: PPUSH
17152: LD_VAR 0 5
17156: PPUSH
17157: LD_EXP 49
17161: PUSH
17162: LD_VAR 0 5
17166: ARRAY
17167: PUSH
17168: LD_INT 1
17170: PLUS
17171: PPUSH
17172: CALL_OW 1
17176: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17177: LD_ADDR_EXP 46
17181: PUSH
17182: LD_EXP 46
17186: PPUSH
17187: LD_VAR 0 5
17191: PUSH
17192: LD_EXP 46
17196: PUSH
17197: LD_VAR 0 5
17201: ARRAY
17202: PUSH
17203: LD_INT 1
17205: PLUS
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PPUSH
17211: LD_VAR 0 2
17215: PUSH
17216: LD_VAR 0 4
17220: ARRAY
17221: PUSH
17222: LD_VAR 0 2
17226: PUSH
17227: LD_VAR 0 4
17231: ARRAY
17232: PPUSH
17233: CALL_OW 255
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PPUSH
17242: CALL 40467 0 3
17246: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17247: LD_VAR 0 2
17251: PUSH
17252: LD_VAR 0 4
17256: ARRAY
17257: PPUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 255
17267: PPUSH
17268: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17272: LD_VAR 0 2
17276: PUSH
17277: LD_VAR 0 4
17281: ARRAY
17282: PPUSH
17283: CALL_OW 141
// end ;
17287: GO 17119
17289: POP
17290: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_EXP 46
17300: PUSH
17301: LD_VAR 0 5
17305: ARRAY
17306: PUSH
17307: LD_INT 0
17309: PLUS
17310: PPUSH
17311: CALL_OW 505
// end ;
17315: LD_VAR 0 3
17319: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17320: LD_INT 0
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
// if not hack in hackTanks then
17326: LD_VAR 0 1
17330: PUSH
17331: LD_EXP 45
17335: IN
17336: NOT
17337: IFFALSE 17341
// exit ;
17339: GO 17581
// index := GetElementIndex ( hackTanks , hack ) ;
17341: LD_ADDR_VAR 0 4
17345: PUSH
17346: LD_EXP 45
17350: PPUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL 40252 0 2
17360: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17361: LD_ADDR_VAR 0 3
17365: PUSH
17366: DOUBLE
17367: LD_EXP 46
17371: PUSH
17372: LD_VAR 0 4
17376: ARRAY
17377: INC
17378: ST_TO_ADDR
17379: LD_INT 1
17381: PUSH
17382: FOR_DOWNTO
17383: IFFALSE 17555
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17385: LD_ADDR_VAR 0 5
17389: PUSH
17390: LD_EXP 46
17394: PUSH
17395: LD_VAR 0 4
17399: ARRAY
17400: PUSH
17401: LD_VAR 0 3
17405: ARRAY
17406: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17407: LD_VAR 0 5
17411: PUSH
17412: LD_INT 1
17414: ARRAY
17415: PPUSH
17416: CALL_OW 302
17420: NOT
17421: PUSH
17422: LD_VAR 0 5
17426: PUSH
17427: LD_INT 1
17429: ARRAY
17430: PPUSH
17431: CALL_OW 255
17435: PUSH
17436: LD_VAR 0 1
17440: PPUSH
17441: CALL_OW 255
17445: NONEQUAL
17446: OR
17447: IFFALSE 17553
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17449: LD_VAR 0 5
17453: PUSH
17454: LD_INT 1
17456: ARRAY
17457: PPUSH
17458: CALL_OW 305
17462: PUSH
17463: LD_VAR 0 5
17467: PUSH
17468: LD_INT 1
17470: ARRAY
17471: PPUSH
17472: CALL_OW 255
17476: PUSH
17477: LD_VAR 0 1
17481: PPUSH
17482: CALL_OW 255
17486: EQUAL
17487: AND
17488: IFFALSE 17512
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17490: LD_VAR 0 5
17494: PUSH
17495: LD_INT 1
17497: ARRAY
17498: PPUSH
17499: LD_VAR 0 5
17503: PUSH
17504: LD_INT 2
17506: ARRAY
17507: PPUSH
17508: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17512: LD_ADDR_EXP 46
17516: PUSH
17517: LD_EXP 46
17521: PPUSH
17522: LD_VAR 0 4
17526: PPUSH
17527: LD_EXP 46
17531: PUSH
17532: LD_VAR 0 4
17536: ARRAY
17537: PPUSH
17538: LD_VAR 0 3
17542: PPUSH
17543: CALL_OW 3
17547: PPUSH
17548: CALL_OW 1
17552: ST_TO_ADDR
// end ; end ;
17553: GO 17382
17555: POP
17556: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17557: LD_VAR 0 1
17561: PPUSH
17562: LD_EXP 46
17566: PUSH
17567: LD_VAR 0 4
17571: ARRAY
17572: PUSH
17573: LD_INT 0
17575: PLUS
17576: PPUSH
17577: CALL_OW 505
// end ;
17581: LD_VAR 0 2
17585: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17586: LD_INT 0
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
// if not hack in hackTanks then
17592: LD_VAR 0 1
17596: PUSH
17597: LD_EXP 45
17601: IN
17602: NOT
17603: IFFALSE 17607
// exit ;
17605: GO 17692
// index := GetElementIndex ( hackTanks , hack ) ;
17607: LD_ADDR_VAR 0 5
17611: PUSH
17612: LD_EXP 45
17616: PPUSH
17617: LD_VAR 0 1
17621: PPUSH
17622: CALL 40252 0 2
17626: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17627: LD_ADDR_VAR 0 4
17631: PUSH
17632: DOUBLE
17633: LD_INT 1
17635: DEC
17636: ST_TO_ADDR
17637: LD_EXP 46
17641: PUSH
17642: LD_VAR 0 5
17646: ARRAY
17647: PUSH
17648: FOR_TO
17649: IFFALSE 17690
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17651: LD_EXP 46
17655: PUSH
17656: LD_VAR 0 5
17660: ARRAY
17661: PUSH
17662: LD_VAR 0 4
17666: ARRAY
17667: PUSH
17668: LD_INT 1
17670: ARRAY
17671: PUSH
17672: LD_VAR 0 2
17676: EQUAL
17677: IFFALSE 17688
// KillUnit ( vehicle ) ;
17679: LD_VAR 0 2
17683: PPUSH
17684: CALL_OW 66
17688: GO 17648
17690: POP
17691: POP
// end ;
17692: LD_VAR 0 3
17696: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17697: LD_EXP 50
17701: NOT
17702: IFFALSE 17737
17704: GO 17706
17706: DISABLE
// begin initMiner := true ;
17707: LD_ADDR_EXP 50
17711: PUSH
17712: LD_INT 1
17714: ST_TO_ADDR
// minersList := [ ] ;
17715: LD_ADDR_EXP 51
17719: PUSH
17720: EMPTY
17721: ST_TO_ADDR
// minerMinesList := [ ] ;
17722: LD_ADDR_EXP 52
17726: PUSH
17727: EMPTY
17728: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17729: LD_ADDR_EXP 53
17733: PUSH
17734: LD_INT 5
17736: ST_TO_ADDR
// end ;
17737: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17738: LD_EXP 50
17742: PUSH
17743: LD_INT 34
17745: PUSH
17746: LD_INT 81
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PPUSH
17753: CALL_OW 69
17757: AND
17758: IFFALSE 18219
17760: GO 17762
17762: DISABLE
17763: LD_INT 0
17765: PPUSH
17766: PPUSH
17767: PPUSH
17768: PPUSH
// begin enable ;
17769: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17770: LD_ADDR_VAR 0 1
17774: PUSH
17775: LD_INT 34
17777: PUSH
17778: LD_INT 81
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PPUSH
17785: CALL_OW 69
17789: PUSH
17790: FOR_IN
17791: IFFALSE 17863
// begin if not i in minersList then
17793: LD_VAR 0 1
17797: PUSH
17798: LD_EXP 51
17802: IN
17803: NOT
17804: IFFALSE 17861
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17806: LD_ADDR_EXP 51
17810: PUSH
17811: LD_EXP 51
17815: PPUSH
17816: LD_EXP 51
17820: PUSH
17821: LD_INT 1
17823: PLUS
17824: PPUSH
17825: LD_VAR 0 1
17829: PPUSH
17830: CALL_OW 1
17834: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17835: LD_ADDR_EXP 52
17839: PUSH
17840: LD_EXP 52
17844: PPUSH
17845: LD_EXP 52
17849: PUSH
17850: LD_INT 1
17852: PLUS
17853: PPUSH
17854: EMPTY
17855: PPUSH
17856: CALL_OW 1
17860: ST_TO_ADDR
// end end ;
17861: GO 17790
17863: POP
17864: POP
// for i := minerMinesList downto 1 do
17865: LD_ADDR_VAR 0 1
17869: PUSH
17870: DOUBLE
17871: LD_EXP 52
17875: INC
17876: ST_TO_ADDR
17877: LD_INT 1
17879: PUSH
17880: FOR_DOWNTO
17881: IFFALSE 18217
// begin if IsLive ( minersList [ i ] ) then
17883: LD_EXP 51
17887: PUSH
17888: LD_VAR 0 1
17892: ARRAY
17893: PPUSH
17894: CALL_OW 300
17898: IFFALSE 17926
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17900: LD_EXP 51
17904: PUSH
17905: LD_VAR 0 1
17909: ARRAY
17910: PPUSH
17911: LD_EXP 52
17915: PUSH
17916: LD_VAR 0 1
17920: ARRAY
17921: PPUSH
17922: CALL_OW 505
// if not minerMinesList [ i ] then
17926: LD_EXP 52
17930: PUSH
17931: LD_VAR 0 1
17935: ARRAY
17936: NOT
17937: IFFALSE 17941
// continue ;
17939: GO 17880
// for j := minerMinesList [ i ] downto 1 do
17941: LD_ADDR_VAR 0 2
17945: PUSH
17946: DOUBLE
17947: LD_EXP 52
17951: PUSH
17952: LD_VAR 0 1
17956: ARRAY
17957: INC
17958: ST_TO_ADDR
17959: LD_INT 1
17961: PUSH
17962: FOR_DOWNTO
17963: IFFALSE 18213
// begin side := GetSide ( minersList [ i ] ) ;
17965: LD_ADDR_VAR 0 3
17969: PUSH
17970: LD_EXP 51
17974: PUSH
17975: LD_VAR 0 1
17979: ARRAY
17980: PPUSH
17981: CALL_OW 255
17985: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17986: LD_ADDR_VAR 0 4
17990: PUSH
17991: LD_EXP 52
17995: PUSH
17996: LD_VAR 0 1
18000: ARRAY
18001: PUSH
18002: LD_VAR 0 2
18006: ARRAY
18007: PUSH
18008: LD_INT 1
18010: ARRAY
18011: PPUSH
18012: LD_EXP 52
18016: PUSH
18017: LD_VAR 0 1
18021: ARRAY
18022: PUSH
18023: LD_VAR 0 2
18027: ARRAY
18028: PUSH
18029: LD_INT 2
18031: ARRAY
18032: PPUSH
18033: CALL_OW 428
18037: ST_TO_ADDR
// if not tmp then
18038: LD_VAR 0 4
18042: NOT
18043: IFFALSE 18047
// continue ;
18045: GO 17962
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18047: LD_VAR 0 4
18051: PUSH
18052: LD_INT 81
18054: PUSH
18055: LD_VAR 0 3
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PPUSH
18064: CALL_OW 69
18068: IN
18069: PUSH
18070: LD_EXP 52
18074: PUSH
18075: LD_VAR 0 1
18079: ARRAY
18080: PUSH
18081: LD_VAR 0 2
18085: ARRAY
18086: PUSH
18087: LD_INT 1
18089: ARRAY
18090: PPUSH
18091: LD_EXP 52
18095: PUSH
18096: LD_VAR 0 1
18100: ARRAY
18101: PUSH
18102: LD_VAR 0 2
18106: ARRAY
18107: PUSH
18108: LD_INT 2
18110: ARRAY
18111: PPUSH
18112: CALL_OW 458
18116: AND
18117: IFFALSE 18211
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18119: LD_EXP 52
18123: PUSH
18124: LD_VAR 0 1
18128: ARRAY
18129: PUSH
18130: LD_VAR 0 2
18134: ARRAY
18135: PUSH
18136: LD_INT 1
18138: ARRAY
18139: PPUSH
18140: LD_EXP 52
18144: PUSH
18145: LD_VAR 0 1
18149: ARRAY
18150: PUSH
18151: LD_VAR 0 2
18155: ARRAY
18156: PUSH
18157: LD_INT 2
18159: ARRAY
18160: PPUSH
18161: LD_VAR 0 3
18165: PPUSH
18166: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18170: LD_ADDR_EXP 52
18174: PUSH
18175: LD_EXP 52
18179: PPUSH
18180: LD_VAR 0 1
18184: PPUSH
18185: LD_EXP 52
18189: PUSH
18190: LD_VAR 0 1
18194: ARRAY
18195: PPUSH
18196: LD_VAR 0 2
18200: PPUSH
18201: CALL_OW 3
18205: PPUSH
18206: CALL_OW 1
18210: ST_TO_ADDR
// end ; end ;
18211: GO 17962
18213: POP
18214: POP
// end ;
18215: GO 17880
18217: POP
18218: POP
// end ;
18219: PPOPN 4
18221: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18222: LD_INT 0
18224: PPUSH
18225: PPUSH
// result := false ;
18226: LD_ADDR_VAR 0 4
18230: PUSH
18231: LD_INT 0
18233: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18234: LD_VAR 0 1
18238: PPUSH
18239: CALL_OW 264
18243: PUSH
18244: LD_INT 81
18246: EQUAL
18247: NOT
18248: IFFALSE 18252
// exit ;
18250: GO 18492
// index := GetElementIndex ( minersList , unit ) ;
18252: LD_ADDR_VAR 0 5
18256: PUSH
18257: LD_EXP 51
18261: PPUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL 40252 0 2
18271: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18272: LD_EXP 52
18276: PUSH
18277: LD_VAR 0 5
18281: ARRAY
18282: PUSH
18283: LD_EXP 53
18287: GREATEREQUAL
18288: IFFALSE 18292
// exit ;
18290: GO 18492
// ComMoveXY ( unit , x , y ) ;
18292: LD_VAR 0 1
18296: PPUSH
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_VAR 0 3
18306: PPUSH
18307: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18311: LD_INT 35
18313: PPUSH
18314: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18318: LD_VAR 0 1
18322: PPUSH
18323: LD_VAR 0 2
18327: PPUSH
18328: LD_VAR 0 3
18332: PPUSH
18333: CALL 72004 0 3
18337: NOT
18338: PUSH
18339: LD_VAR 0 1
18343: PPUSH
18344: CALL_OW 314
18348: AND
18349: IFFALSE 18353
// exit ;
18351: GO 18492
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18353: LD_VAR 0 2
18357: PPUSH
18358: LD_VAR 0 3
18362: PPUSH
18363: CALL_OW 428
18367: PUSH
18368: LD_VAR 0 1
18372: EQUAL
18373: PUSH
18374: LD_VAR 0 1
18378: PPUSH
18379: CALL_OW 314
18383: NOT
18384: AND
18385: IFFALSE 18311
// PlaySoundXY ( x , y , PlantMine ) ;
18387: LD_VAR 0 2
18391: PPUSH
18392: LD_VAR 0 3
18396: PPUSH
18397: LD_STRING PlantMine
18399: PPUSH
18400: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18404: LD_VAR 0 2
18408: PPUSH
18409: LD_VAR 0 3
18413: PPUSH
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 255
18423: PPUSH
18424: LD_INT 0
18426: PPUSH
18427: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18431: LD_ADDR_EXP 52
18435: PUSH
18436: LD_EXP 52
18440: PPUSH
18441: LD_VAR 0 5
18445: PUSH
18446: LD_EXP 52
18450: PUSH
18451: LD_VAR 0 5
18455: ARRAY
18456: PUSH
18457: LD_INT 1
18459: PLUS
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PPUSH
18465: LD_VAR 0 2
18469: PUSH
18470: LD_VAR 0 3
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PPUSH
18479: CALL 40467 0 3
18483: ST_TO_ADDR
// result := true ;
18484: LD_ADDR_VAR 0 4
18488: PUSH
18489: LD_INT 1
18491: ST_TO_ADDR
// end ;
18492: LD_VAR 0 4
18496: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18497: LD_INT 0
18499: PPUSH
18500: PPUSH
18501: PPUSH
// if not unit in minersList then
18502: LD_VAR 0 1
18506: PUSH
18507: LD_EXP 51
18511: IN
18512: NOT
18513: IFFALSE 18517
// exit ;
18515: GO 18909
// index := GetElementIndex ( minersList , unit ) ;
18517: LD_ADDR_VAR 0 6
18521: PUSH
18522: LD_EXP 51
18526: PPUSH
18527: LD_VAR 0 1
18531: PPUSH
18532: CALL 40252 0 2
18536: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18537: LD_ADDR_VAR 0 5
18541: PUSH
18542: DOUBLE
18543: LD_EXP 52
18547: PUSH
18548: LD_VAR 0 6
18552: ARRAY
18553: INC
18554: ST_TO_ADDR
18555: LD_INT 1
18557: PUSH
18558: FOR_DOWNTO
18559: IFFALSE 18720
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18561: LD_EXP 52
18565: PUSH
18566: LD_VAR 0 6
18570: ARRAY
18571: PUSH
18572: LD_VAR 0 5
18576: ARRAY
18577: PUSH
18578: LD_INT 1
18580: ARRAY
18581: PUSH
18582: LD_VAR 0 2
18586: EQUAL
18587: PUSH
18588: LD_EXP 52
18592: PUSH
18593: LD_VAR 0 6
18597: ARRAY
18598: PUSH
18599: LD_VAR 0 5
18603: ARRAY
18604: PUSH
18605: LD_INT 2
18607: ARRAY
18608: PUSH
18609: LD_VAR 0 3
18613: EQUAL
18614: AND
18615: IFFALSE 18718
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18617: LD_EXP 52
18621: PUSH
18622: LD_VAR 0 6
18626: ARRAY
18627: PUSH
18628: LD_VAR 0 5
18632: ARRAY
18633: PUSH
18634: LD_INT 1
18636: ARRAY
18637: PPUSH
18638: LD_EXP 52
18642: PUSH
18643: LD_VAR 0 6
18647: ARRAY
18648: PUSH
18649: LD_VAR 0 5
18653: ARRAY
18654: PUSH
18655: LD_INT 2
18657: ARRAY
18658: PPUSH
18659: LD_VAR 0 1
18663: PPUSH
18664: CALL_OW 255
18668: PPUSH
18669: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18673: LD_ADDR_EXP 52
18677: PUSH
18678: LD_EXP 52
18682: PPUSH
18683: LD_VAR 0 6
18687: PPUSH
18688: LD_EXP 52
18692: PUSH
18693: LD_VAR 0 6
18697: ARRAY
18698: PPUSH
18699: LD_VAR 0 5
18703: PPUSH
18704: CALL_OW 3
18708: PPUSH
18709: CALL_OW 1
18713: ST_TO_ADDR
// exit ;
18714: POP
18715: POP
18716: GO 18909
// end ; end ;
18718: GO 18558
18720: POP
18721: POP
// for i := minerMinesList [ index ] downto 1 do
18722: LD_ADDR_VAR 0 5
18726: PUSH
18727: DOUBLE
18728: LD_EXP 52
18732: PUSH
18733: LD_VAR 0 6
18737: ARRAY
18738: INC
18739: ST_TO_ADDR
18740: LD_INT 1
18742: PUSH
18743: FOR_DOWNTO
18744: IFFALSE 18907
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18746: LD_EXP 52
18750: PUSH
18751: LD_VAR 0 6
18755: ARRAY
18756: PUSH
18757: LD_VAR 0 5
18761: ARRAY
18762: PUSH
18763: LD_INT 1
18765: ARRAY
18766: PPUSH
18767: LD_EXP 52
18771: PUSH
18772: LD_VAR 0 6
18776: ARRAY
18777: PUSH
18778: LD_VAR 0 5
18782: ARRAY
18783: PUSH
18784: LD_INT 2
18786: ARRAY
18787: PPUSH
18788: LD_VAR 0 2
18792: PPUSH
18793: LD_VAR 0 3
18797: PPUSH
18798: CALL_OW 298
18802: PUSH
18803: LD_INT 6
18805: LESS
18806: IFFALSE 18905
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18808: LD_EXP 52
18812: PUSH
18813: LD_VAR 0 6
18817: ARRAY
18818: PUSH
18819: LD_VAR 0 5
18823: ARRAY
18824: PUSH
18825: LD_INT 1
18827: ARRAY
18828: PPUSH
18829: LD_EXP 52
18833: PUSH
18834: LD_VAR 0 6
18838: ARRAY
18839: PUSH
18840: LD_VAR 0 5
18844: ARRAY
18845: PUSH
18846: LD_INT 2
18848: ARRAY
18849: PPUSH
18850: LD_VAR 0 1
18854: PPUSH
18855: CALL_OW 255
18859: PPUSH
18860: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18864: LD_ADDR_EXP 52
18868: PUSH
18869: LD_EXP 52
18873: PPUSH
18874: LD_VAR 0 6
18878: PPUSH
18879: LD_EXP 52
18883: PUSH
18884: LD_VAR 0 6
18888: ARRAY
18889: PPUSH
18890: LD_VAR 0 5
18894: PPUSH
18895: CALL_OW 3
18899: PPUSH
18900: CALL_OW 1
18904: ST_TO_ADDR
// end ; end ;
18905: GO 18743
18907: POP
18908: POP
// end ;
18909: LD_VAR 0 4
18913: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18914: LD_INT 0
18916: PPUSH
18917: PPUSH
18918: PPUSH
18919: PPUSH
18920: PPUSH
18921: PPUSH
18922: PPUSH
18923: PPUSH
18924: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL_OW 264
18934: PUSH
18935: LD_INT 81
18937: EQUAL
18938: NOT
18939: PUSH
18940: LD_VAR 0 1
18944: PUSH
18945: LD_EXP 51
18949: IN
18950: NOT
18951: OR
18952: IFFALSE 18956
// exit ;
18954: GO 19278
// index := GetElementIndex ( minersList , unit ) ;
18956: LD_ADDR_VAR 0 6
18960: PUSH
18961: LD_EXP 51
18965: PPUSH
18966: LD_VAR 0 1
18970: PPUSH
18971: CALL 40252 0 2
18975: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18976: LD_ADDR_VAR 0 8
18980: PUSH
18981: LD_EXP 53
18985: PUSH
18986: LD_EXP 52
18990: PUSH
18991: LD_VAR 0 6
18995: ARRAY
18996: MINUS
18997: ST_TO_ADDR
// if not minesFreeAmount then
18998: LD_VAR 0 8
19002: NOT
19003: IFFALSE 19007
// exit ;
19005: GO 19278
// tmp := [ ] ;
19007: LD_ADDR_VAR 0 7
19011: PUSH
19012: EMPTY
19013: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19014: LD_ADDR_VAR 0 5
19018: PUSH
19019: DOUBLE
19020: LD_INT 1
19022: DEC
19023: ST_TO_ADDR
19024: LD_VAR 0 8
19028: PUSH
19029: FOR_TO
19030: IFFALSE 19225
// begin _d := rand ( 0 , 5 ) ;
19032: LD_ADDR_VAR 0 11
19036: PUSH
19037: LD_INT 0
19039: PPUSH
19040: LD_INT 5
19042: PPUSH
19043: CALL_OW 12
19047: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19048: LD_ADDR_VAR 0 12
19052: PUSH
19053: LD_INT 2
19055: PPUSH
19056: LD_INT 6
19058: PPUSH
19059: CALL_OW 12
19063: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19064: LD_ADDR_VAR 0 9
19068: PUSH
19069: LD_VAR 0 2
19073: PPUSH
19074: LD_VAR 0 11
19078: PPUSH
19079: LD_VAR 0 12
19083: PPUSH
19084: CALL_OW 272
19088: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19089: LD_ADDR_VAR 0 10
19093: PUSH
19094: LD_VAR 0 3
19098: PPUSH
19099: LD_VAR 0 11
19103: PPUSH
19104: LD_VAR 0 12
19108: PPUSH
19109: CALL_OW 273
19113: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19114: LD_VAR 0 9
19118: PPUSH
19119: LD_VAR 0 10
19123: PPUSH
19124: CALL_OW 488
19128: PUSH
19129: LD_VAR 0 9
19133: PUSH
19134: LD_VAR 0 10
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_VAR 0 7
19147: IN
19148: NOT
19149: AND
19150: PUSH
19151: LD_VAR 0 9
19155: PPUSH
19156: LD_VAR 0 10
19160: PPUSH
19161: CALL_OW 458
19165: NOT
19166: AND
19167: IFFALSE 19209
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19169: LD_ADDR_VAR 0 7
19173: PUSH
19174: LD_VAR 0 7
19178: PPUSH
19179: LD_VAR 0 7
19183: PUSH
19184: LD_INT 1
19186: PLUS
19187: PPUSH
19188: LD_VAR 0 9
19192: PUSH
19193: LD_VAR 0 10
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 1
19206: ST_TO_ADDR
19207: GO 19223
// i := i - 1 ;
19209: LD_ADDR_VAR 0 5
19213: PUSH
19214: LD_VAR 0 5
19218: PUSH
19219: LD_INT 1
19221: MINUS
19222: ST_TO_ADDR
// end ;
19223: GO 19029
19225: POP
19226: POP
// for i in tmp do
19227: LD_ADDR_VAR 0 5
19231: PUSH
19232: LD_VAR 0 7
19236: PUSH
19237: FOR_IN
19238: IFFALSE 19276
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19240: LD_VAR 0 1
19244: PPUSH
19245: LD_VAR 0 5
19249: PUSH
19250: LD_INT 1
19252: ARRAY
19253: PPUSH
19254: LD_VAR 0 5
19258: PUSH
19259: LD_INT 2
19261: ARRAY
19262: PPUSH
19263: CALL 18222 0 3
19267: NOT
19268: IFFALSE 19274
// exit ;
19270: POP
19271: POP
19272: GO 19278
19274: GO 19237
19276: POP
19277: POP
// end ;
19278: LD_VAR 0 4
19282: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19283: LD_INT 0
19285: PPUSH
19286: PPUSH
19287: PPUSH
19288: PPUSH
19289: PPUSH
19290: PPUSH
19291: PPUSH
// if not GetClass ( unit ) = class_sniper then
19292: LD_VAR 0 1
19296: PPUSH
19297: CALL_OW 257
19301: PUSH
19302: LD_INT 5
19304: EQUAL
19305: NOT
19306: IFFALSE 19310
// exit ;
19308: GO 19698
// dist := 8 ;
19310: LD_ADDR_VAR 0 5
19314: PUSH
19315: LD_INT 8
19317: ST_TO_ADDR
// viewRange := 12 ;
19318: LD_ADDR_VAR 0 7
19322: PUSH
19323: LD_INT 12
19325: ST_TO_ADDR
// side := GetSide ( unit ) ;
19326: LD_ADDR_VAR 0 6
19330: PUSH
19331: LD_VAR 0 1
19335: PPUSH
19336: CALL_OW 255
19340: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19341: LD_INT 61
19343: PPUSH
19344: LD_VAR 0 6
19348: PPUSH
19349: CALL_OW 321
19353: PUSH
19354: LD_INT 2
19356: EQUAL
19357: IFFALSE 19367
// viewRange := 16 ;
19359: LD_ADDR_VAR 0 7
19363: PUSH
19364: LD_INT 16
19366: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19367: LD_VAR 0 1
19371: PPUSH
19372: LD_VAR 0 2
19376: PPUSH
19377: LD_VAR 0 3
19381: PPUSH
19382: CALL_OW 297
19386: PUSH
19387: LD_VAR 0 5
19391: GREATER
19392: IFFALSE 19471
// begin ComMoveXY ( unit , x , y ) ;
19394: LD_VAR 0 1
19398: PPUSH
19399: LD_VAR 0 2
19403: PPUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19413: LD_INT 35
19415: PPUSH
19416: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19420: LD_VAR 0 1
19424: PPUSH
19425: LD_VAR 0 2
19429: PPUSH
19430: LD_VAR 0 3
19434: PPUSH
19435: CALL 72004 0 3
19439: NOT
19440: IFFALSE 19444
// exit ;
19442: GO 19698
// until GetDistUnitXY ( unit , x , y ) < dist ;
19444: LD_VAR 0 1
19448: PPUSH
19449: LD_VAR 0 2
19453: PPUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: CALL_OW 297
19463: PUSH
19464: LD_VAR 0 5
19468: LESS
19469: IFFALSE 19413
// end ; ComTurnXY ( unit , x , y ) ;
19471: LD_VAR 0 1
19475: PPUSH
19476: LD_VAR 0 2
19480: PPUSH
19481: LD_VAR 0 3
19485: PPUSH
19486: CALL_OW 118
// wait ( 5 ) ;
19490: LD_INT 5
19492: PPUSH
19493: CALL_OW 67
// _d := GetDir ( unit ) ;
19497: LD_ADDR_VAR 0 10
19501: PUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 254
19511: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19512: LD_ADDR_VAR 0 8
19516: PUSH
19517: LD_VAR 0 1
19521: PPUSH
19522: CALL_OW 250
19526: PPUSH
19527: LD_VAR 0 10
19531: PPUSH
19532: LD_VAR 0 5
19536: PPUSH
19537: CALL_OW 272
19541: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19542: LD_ADDR_VAR 0 9
19546: PUSH
19547: LD_VAR 0 1
19551: PPUSH
19552: CALL_OW 251
19556: PPUSH
19557: LD_VAR 0 10
19561: PPUSH
19562: LD_VAR 0 5
19566: PPUSH
19567: CALL_OW 273
19571: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19572: LD_VAR 0 8
19576: PPUSH
19577: LD_VAR 0 9
19581: PPUSH
19582: CALL_OW 488
19586: NOT
19587: IFFALSE 19591
// exit ;
19589: GO 19698
// ComAnimCustom ( unit , 1 ) ;
19591: LD_VAR 0 1
19595: PPUSH
19596: LD_INT 1
19598: PPUSH
19599: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19603: LD_VAR 0 8
19607: PPUSH
19608: LD_VAR 0 9
19612: PPUSH
19613: LD_VAR 0 6
19617: PPUSH
19618: LD_VAR 0 7
19622: PPUSH
19623: CALL_OW 330
// repeat wait ( 1 ) ;
19627: LD_INT 1
19629: PPUSH
19630: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19634: LD_VAR 0 1
19638: PPUSH
19639: CALL_OW 316
19643: PUSH
19644: LD_VAR 0 1
19648: PPUSH
19649: CALL_OW 314
19653: OR
19654: PUSH
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 302
19664: NOT
19665: OR
19666: PUSH
19667: LD_VAR 0 1
19671: PPUSH
19672: CALL_OW 301
19676: OR
19677: IFFALSE 19627
// RemoveSeeing ( _x , _y , side ) ;
19679: LD_VAR 0 8
19683: PPUSH
19684: LD_VAR 0 9
19688: PPUSH
19689: LD_VAR 0 6
19693: PPUSH
19694: CALL_OW 331
// end ; end_of_file
19698: LD_VAR 0 4
19702: RET
// export globalGameSaveCounter ; every 0 0$1 do
19703: GO 19705
19705: DISABLE
// begin enable ;
19706: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19707: LD_STRING updateTimer(
19709: PUSH
19710: LD_OWVAR 1
19714: STR
19715: PUSH
19716: LD_STRING );
19718: STR
19719: PPUSH
19720: CALL_OW 559
// end ;
19724: END
// every 0 0$1 do
19725: GO 19727
19727: DISABLE
// begin globalGameSaveCounter := 0 ;
19728: LD_ADDR_EXP 54
19732: PUSH
19733: LD_INT 0
19735: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19736: LD_STRING setGameSaveCounter(0)
19738: PPUSH
19739: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19743: LD_STRING initStreamRollete();
19745: PPUSH
19746: CALL_OW 559
// InitStreamMode ;
19750: CALL 21076 0 0
// DefineStreamItems ( false ) ;
19754: LD_INT 0
19756: PPUSH
19757: CALL 21540 0 1
// end ;
19761: END
// export function SOS_MapStart ( ) ; begin
19762: LD_INT 0
19764: PPUSH
// if streamModeActive then
19765: LD_EXP 55
19769: IFFALSE 19778
// DefineStreamItems ( true ) ;
19771: LD_INT 1
19773: PPUSH
19774: CALL 21540 0 1
// UpdateLuaVariables ( ) ;
19778: CALL 19795 0 0
// UpdateFactoryWaypoints ( ) ;
19782: CALL 34409 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19786: CALL 34666 0 0
// end ;
19790: LD_VAR 0 1
19794: RET
// function UpdateLuaVariables ( ) ; begin
19795: LD_INT 0
19797: PPUSH
// if globalGameSaveCounter then
19798: LD_EXP 54
19802: IFFALSE 19836
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19804: LD_ADDR_EXP 54
19808: PUSH
19809: LD_EXP 54
19813: PPUSH
19814: CALL 74568 0 1
19818: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19819: LD_STRING setGameSaveCounter(
19821: PUSH
19822: LD_EXP 54
19826: STR
19827: PUSH
19828: LD_STRING )
19830: STR
19831: PPUSH
19832: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19836: LD_STRING setGameDifficulty(
19838: PUSH
19839: LD_OWVAR 67
19843: STR
19844: PUSH
19845: LD_STRING )
19847: STR
19848: PPUSH
19849: CALL_OW 559
// end ;
19853: LD_VAR 0 1
19857: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19858: LD_INT 0
19860: PPUSH
// if p2 = stream_mode then
19861: LD_VAR 0 2
19865: PUSH
19866: LD_INT 100
19868: EQUAL
19869: IFFALSE 20872
// begin if not StreamModeActive then
19871: LD_EXP 55
19875: NOT
19876: IFFALSE 19886
// StreamModeActive := true ;
19878: LD_ADDR_EXP 55
19882: PUSH
19883: LD_INT 1
19885: ST_TO_ADDR
// if p3 = 0 then
19886: LD_VAR 0 3
19890: PUSH
19891: LD_INT 0
19893: EQUAL
19894: IFFALSE 19900
// InitStreamMode ;
19896: CALL 21076 0 0
// if p3 = 1 then
19900: LD_VAR 0 3
19904: PUSH
19905: LD_INT 1
19907: EQUAL
19908: IFFALSE 19918
// sRocket := true ;
19910: LD_ADDR_EXP 60
19914: PUSH
19915: LD_INT 1
19917: ST_TO_ADDR
// if p3 = 2 then
19918: LD_VAR 0 3
19922: PUSH
19923: LD_INT 2
19925: EQUAL
19926: IFFALSE 19936
// sSpeed := true ;
19928: LD_ADDR_EXP 59
19932: PUSH
19933: LD_INT 1
19935: ST_TO_ADDR
// if p3 = 3 then
19936: LD_VAR 0 3
19940: PUSH
19941: LD_INT 3
19943: EQUAL
19944: IFFALSE 19954
// sEngine := true ;
19946: LD_ADDR_EXP 61
19950: PUSH
19951: LD_INT 1
19953: ST_TO_ADDR
// if p3 = 4 then
19954: LD_VAR 0 3
19958: PUSH
19959: LD_INT 4
19961: EQUAL
19962: IFFALSE 19972
// sSpec := true ;
19964: LD_ADDR_EXP 58
19968: PUSH
19969: LD_INT 1
19971: ST_TO_ADDR
// if p3 = 5 then
19972: LD_VAR 0 3
19976: PUSH
19977: LD_INT 5
19979: EQUAL
19980: IFFALSE 19990
// sLevel := true ;
19982: LD_ADDR_EXP 62
19986: PUSH
19987: LD_INT 1
19989: ST_TO_ADDR
// if p3 = 6 then
19990: LD_VAR 0 3
19994: PUSH
19995: LD_INT 6
19997: EQUAL
19998: IFFALSE 20008
// sArmoury := true ;
20000: LD_ADDR_EXP 63
20004: PUSH
20005: LD_INT 1
20007: ST_TO_ADDR
// if p3 = 7 then
20008: LD_VAR 0 3
20012: PUSH
20013: LD_INT 7
20015: EQUAL
20016: IFFALSE 20026
// sRadar := true ;
20018: LD_ADDR_EXP 64
20022: PUSH
20023: LD_INT 1
20025: ST_TO_ADDR
// if p3 = 8 then
20026: LD_VAR 0 3
20030: PUSH
20031: LD_INT 8
20033: EQUAL
20034: IFFALSE 20044
// sBunker := true ;
20036: LD_ADDR_EXP 65
20040: PUSH
20041: LD_INT 1
20043: ST_TO_ADDR
// if p3 = 9 then
20044: LD_VAR 0 3
20048: PUSH
20049: LD_INT 9
20051: EQUAL
20052: IFFALSE 20062
// sHack := true ;
20054: LD_ADDR_EXP 66
20058: PUSH
20059: LD_INT 1
20061: ST_TO_ADDR
// if p3 = 10 then
20062: LD_VAR 0 3
20066: PUSH
20067: LD_INT 10
20069: EQUAL
20070: IFFALSE 20080
// sFire := true ;
20072: LD_ADDR_EXP 67
20076: PUSH
20077: LD_INT 1
20079: ST_TO_ADDR
// if p3 = 11 then
20080: LD_VAR 0 3
20084: PUSH
20085: LD_INT 11
20087: EQUAL
20088: IFFALSE 20098
// sRefresh := true ;
20090: LD_ADDR_EXP 68
20094: PUSH
20095: LD_INT 1
20097: ST_TO_ADDR
// if p3 = 12 then
20098: LD_VAR 0 3
20102: PUSH
20103: LD_INT 12
20105: EQUAL
20106: IFFALSE 20116
// sExp := true ;
20108: LD_ADDR_EXP 69
20112: PUSH
20113: LD_INT 1
20115: ST_TO_ADDR
// if p3 = 13 then
20116: LD_VAR 0 3
20120: PUSH
20121: LD_INT 13
20123: EQUAL
20124: IFFALSE 20134
// sDepot := true ;
20126: LD_ADDR_EXP 70
20130: PUSH
20131: LD_INT 1
20133: ST_TO_ADDR
// if p3 = 14 then
20134: LD_VAR 0 3
20138: PUSH
20139: LD_INT 14
20141: EQUAL
20142: IFFALSE 20152
// sFlag := true ;
20144: LD_ADDR_EXP 71
20148: PUSH
20149: LD_INT 1
20151: ST_TO_ADDR
// if p3 = 15 then
20152: LD_VAR 0 3
20156: PUSH
20157: LD_INT 15
20159: EQUAL
20160: IFFALSE 20170
// sKamikadze := true ;
20162: LD_ADDR_EXP 79
20166: PUSH
20167: LD_INT 1
20169: ST_TO_ADDR
// if p3 = 16 then
20170: LD_VAR 0 3
20174: PUSH
20175: LD_INT 16
20177: EQUAL
20178: IFFALSE 20188
// sTroll := true ;
20180: LD_ADDR_EXP 80
20184: PUSH
20185: LD_INT 1
20187: ST_TO_ADDR
// if p3 = 17 then
20188: LD_VAR 0 3
20192: PUSH
20193: LD_INT 17
20195: EQUAL
20196: IFFALSE 20206
// sSlow := true ;
20198: LD_ADDR_EXP 81
20202: PUSH
20203: LD_INT 1
20205: ST_TO_ADDR
// if p3 = 18 then
20206: LD_VAR 0 3
20210: PUSH
20211: LD_INT 18
20213: EQUAL
20214: IFFALSE 20224
// sLack := true ;
20216: LD_ADDR_EXP 82
20220: PUSH
20221: LD_INT 1
20223: ST_TO_ADDR
// if p3 = 19 then
20224: LD_VAR 0 3
20228: PUSH
20229: LD_INT 19
20231: EQUAL
20232: IFFALSE 20242
// sTank := true ;
20234: LD_ADDR_EXP 84
20238: PUSH
20239: LD_INT 1
20241: ST_TO_ADDR
// if p3 = 20 then
20242: LD_VAR 0 3
20246: PUSH
20247: LD_INT 20
20249: EQUAL
20250: IFFALSE 20260
// sRemote := true ;
20252: LD_ADDR_EXP 85
20256: PUSH
20257: LD_INT 1
20259: ST_TO_ADDR
// if p3 = 21 then
20260: LD_VAR 0 3
20264: PUSH
20265: LD_INT 21
20267: EQUAL
20268: IFFALSE 20278
// sPowell := true ;
20270: LD_ADDR_EXP 86
20274: PUSH
20275: LD_INT 1
20277: ST_TO_ADDR
// if p3 = 22 then
20278: LD_VAR 0 3
20282: PUSH
20283: LD_INT 22
20285: EQUAL
20286: IFFALSE 20296
// sTeleport := true ;
20288: LD_ADDR_EXP 89
20292: PUSH
20293: LD_INT 1
20295: ST_TO_ADDR
// if p3 = 23 then
20296: LD_VAR 0 3
20300: PUSH
20301: LD_INT 23
20303: EQUAL
20304: IFFALSE 20314
// sOilTower := true ;
20306: LD_ADDR_EXP 91
20310: PUSH
20311: LD_INT 1
20313: ST_TO_ADDR
// if p3 = 24 then
20314: LD_VAR 0 3
20318: PUSH
20319: LD_INT 24
20321: EQUAL
20322: IFFALSE 20332
// sShovel := true ;
20324: LD_ADDR_EXP 92
20328: PUSH
20329: LD_INT 1
20331: ST_TO_ADDR
// if p3 = 25 then
20332: LD_VAR 0 3
20336: PUSH
20337: LD_INT 25
20339: EQUAL
20340: IFFALSE 20350
// sSheik := true ;
20342: LD_ADDR_EXP 93
20346: PUSH
20347: LD_INT 1
20349: ST_TO_ADDR
// if p3 = 26 then
20350: LD_VAR 0 3
20354: PUSH
20355: LD_INT 26
20357: EQUAL
20358: IFFALSE 20368
// sEarthquake := true ;
20360: LD_ADDR_EXP 95
20364: PUSH
20365: LD_INT 1
20367: ST_TO_ADDR
// if p3 = 27 then
20368: LD_VAR 0 3
20372: PUSH
20373: LD_INT 27
20375: EQUAL
20376: IFFALSE 20386
// sAI := true ;
20378: LD_ADDR_EXP 96
20382: PUSH
20383: LD_INT 1
20385: ST_TO_ADDR
// if p3 = 28 then
20386: LD_VAR 0 3
20390: PUSH
20391: LD_INT 28
20393: EQUAL
20394: IFFALSE 20404
// sCargo := true ;
20396: LD_ADDR_EXP 99
20400: PUSH
20401: LD_INT 1
20403: ST_TO_ADDR
// if p3 = 29 then
20404: LD_VAR 0 3
20408: PUSH
20409: LD_INT 29
20411: EQUAL
20412: IFFALSE 20422
// sDLaser := true ;
20414: LD_ADDR_EXP 100
20418: PUSH
20419: LD_INT 1
20421: ST_TO_ADDR
// if p3 = 30 then
20422: LD_VAR 0 3
20426: PUSH
20427: LD_INT 30
20429: EQUAL
20430: IFFALSE 20440
// sExchange := true ;
20432: LD_ADDR_EXP 101
20436: PUSH
20437: LD_INT 1
20439: ST_TO_ADDR
// if p3 = 31 then
20440: LD_VAR 0 3
20444: PUSH
20445: LD_INT 31
20447: EQUAL
20448: IFFALSE 20458
// sFac := true ;
20450: LD_ADDR_EXP 102
20454: PUSH
20455: LD_INT 1
20457: ST_TO_ADDR
// if p3 = 32 then
20458: LD_VAR 0 3
20462: PUSH
20463: LD_INT 32
20465: EQUAL
20466: IFFALSE 20476
// sPower := true ;
20468: LD_ADDR_EXP 103
20472: PUSH
20473: LD_INT 1
20475: ST_TO_ADDR
// if p3 = 33 then
20476: LD_VAR 0 3
20480: PUSH
20481: LD_INT 33
20483: EQUAL
20484: IFFALSE 20494
// sRandom := true ;
20486: LD_ADDR_EXP 104
20490: PUSH
20491: LD_INT 1
20493: ST_TO_ADDR
// if p3 = 34 then
20494: LD_VAR 0 3
20498: PUSH
20499: LD_INT 34
20501: EQUAL
20502: IFFALSE 20512
// sShield := true ;
20504: LD_ADDR_EXP 105
20508: PUSH
20509: LD_INT 1
20511: ST_TO_ADDR
// if p3 = 35 then
20512: LD_VAR 0 3
20516: PUSH
20517: LD_INT 35
20519: EQUAL
20520: IFFALSE 20530
// sTime := true ;
20522: LD_ADDR_EXP 106
20526: PUSH
20527: LD_INT 1
20529: ST_TO_ADDR
// if p3 = 36 then
20530: LD_VAR 0 3
20534: PUSH
20535: LD_INT 36
20537: EQUAL
20538: IFFALSE 20548
// sTools := true ;
20540: LD_ADDR_EXP 107
20544: PUSH
20545: LD_INT 1
20547: ST_TO_ADDR
// if p3 = 101 then
20548: LD_VAR 0 3
20552: PUSH
20553: LD_INT 101
20555: EQUAL
20556: IFFALSE 20566
// sSold := true ;
20558: LD_ADDR_EXP 72
20562: PUSH
20563: LD_INT 1
20565: ST_TO_ADDR
// if p3 = 102 then
20566: LD_VAR 0 3
20570: PUSH
20571: LD_INT 102
20573: EQUAL
20574: IFFALSE 20584
// sDiff := true ;
20576: LD_ADDR_EXP 73
20580: PUSH
20581: LD_INT 1
20583: ST_TO_ADDR
// if p3 = 103 then
20584: LD_VAR 0 3
20588: PUSH
20589: LD_INT 103
20591: EQUAL
20592: IFFALSE 20602
// sFog := true ;
20594: LD_ADDR_EXP 76
20598: PUSH
20599: LD_INT 1
20601: ST_TO_ADDR
// if p3 = 104 then
20602: LD_VAR 0 3
20606: PUSH
20607: LD_INT 104
20609: EQUAL
20610: IFFALSE 20620
// sReset := true ;
20612: LD_ADDR_EXP 77
20616: PUSH
20617: LD_INT 1
20619: ST_TO_ADDR
// if p3 = 105 then
20620: LD_VAR 0 3
20624: PUSH
20625: LD_INT 105
20627: EQUAL
20628: IFFALSE 20638
// sSun := true ;
20630: LD_ADDR_EXP 78
20634: PUSH
20635: LD_INT 1
20637: ST_TO_ADDR
// if p3 = 106 then
20638: LD_VAR 0 3
20642: PUSH
20643: LD_INT 106
20645: EQUAL
20646: IFFALSE 20656
// sTiger := true ;
20648: LD_ADDR_EXP 74
20652: PUSH
20653: LD_INT 1
20655: ST_TO_ADDR
// if p3 = 107 then
20656: LD_VAR 0 3
20660: PUSH
20661: LD_INT 107
20663: EQUAL
20664: IFFALSE 20674
// sBomb := true ;
20666: LD_ADDR_EXP 75
20670: PUSH
20671: LD_INT 1
20673: ST_TO_ADDR
// if p3 = 108 then
20674: LD_VAR 0 3
20678: PUSH
20679: LD_INT 108
20681: EQUAL
20682: IFFALSE 20692
// sWound := true ;
20684: LD_ADDR_EXP 83
20688: PUSH
20689: LD_INT 1
20691: ST_TO_ADDR
// if p3 = 109 then
20692: LD_VAR 0 3
20696: PUSH
20697: LD_INT 109
20699: EQUAL
20700: IFFALSE 20710
// sBetray := true ;
20702: LD_ADDR_EXP 87
20706: PUSH
20707: LD_INT 1
20709: ST_TO_ADDR
// if p3 = 110 then
20710: LD_VAR 0 3
20714: PUSH
20715: LD_INT 110
20717: EQUAL
20718: IFFALSE 20728
// sContamin := true ;
20720: LD_ADDR_EXP 88
20724: PUSH
20725: LD_INT 1
20727: ST_TO_ADDR
// if p3 = 111 then
20728: LD_VAR 0 3
20732: PUSH
20733: LD_INT 111
20735: EQUAL
20736: IFFALSE 20746
// sOil := true ;
20738: LD_ADDR_EXP 90
20742: PUSH
20743: LD_INT 1
20745: ST_TO_ADDR
// if p3 = 112 then
20746: LD_VAR 0 3
20750: PUSH
20751: LD_INT 112
20753: EQUAL
20754: IFFALSE 20764
// sStu := true ;
20756: LD_ADDR_EXP 94
20760: PUSH
20761: LD_INT 1
20763: ST_TO_ADDR
// if p3 = 113 then
20764: LD_VAR 0 3
20768: PUSH
20769: LD_INT 113
20771: EQUAL
20772: IFFALSE 20782
// sBazooka := true ;
20774: LD_ADDR_EXP 97
20778: PUSH
20779: LD_INT 1
20781: ST_TO_ADDR
// if p3 = 114 then
20782: LD_VAR 0 3
20786: PUSH
20787: LD_INT 114
20789: EQUAL
20790: IFFALSE 20800
// sMortar := true ;
20792: LD_ADDR_EXP 98
20796: PUSH
20797: LD_INT 1
20799: ST_TO_ADDR
// if p3 = 115 then
20800: LD_VAR 0 3
20804: PUSH
20805: LD_INT 115
20807: EQUAL
20808: IFFALSE 20818
// sRanger := true ;
20810: LD_ADDR_EXP 108
20814: PUSH
20815: LD_INT 1
20817: ST_TO_ADDR
// if p3 = 116 then
20818: LD_VAR 0 3
20822: PUSH
20823: LD_INT 116
20825: EQUAL
20826: IFFALSE 20836
// sComputer := true ;
20828: LD_ADDR_EXP 109
20832: PUSH
20833: LD_INT 1
20835: ST_TO_ADDR
// if p3 = 117 then
20836: LD_VAR 0 3
20840: PUSH
20841: LD_INT 117
20843: EQUAL
20844: IFFALSE 20854
// s30 := true ;
20846: LD_ADDR_EXP 110
20850: PUSH
20851: LD_INT 1
20853: ST_TO_ADDR
// if p3 = 118 then
20854: LD_VAR 0 3
20858: PUSH
20859: LD_INT 118
20861: EQUAL
20862: IFFALSE 20872
// s60 := true ;
20864: LD_ADDR_EXP 111
20868: PUSH
20869: LD_INT 1
20871: ST_TO_ADDR
// end ; if p2 = hack_mode then
20872: LD_VAR 0 2
20876: PUSH
20877: LD_INT 101
20879: EQUAL
20880: IFFALSE 21008
// begin case p3 of 1 :
20882: LD_VAR 0 3
20886: PUSH
20887: LD_INT 1
20889: DOUBLE
20890: EQUAL
20891: IFTRUE 20895
20893: GO 20902
20895: POP
// hHackUnlimitedResources ; 2 :
20896: CALL 33155 0 0
20900: GO 21008
20902: LD_INT 2
20904: DOUBLE
20905: EQUAL
20906: IFTRUE 20910
20908: GO 20917
20910: POP
// hHackSetLevel10 ; 3 :
20911: CALL 33288 0 0
20915: GO 21008
20917: LD_INT 3
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20932
20925: POP
// hHackSetLevel10YourUnits ; 4 :
20926: CALL 33373 0 0
20930: GO 21008
20932: LD_INT 4
20934: DOUBLE
20935: EQUAL
20936: IFTRUE 20940
20938: GO 20947
20940: POP
// hHackInvincible ; 5 :
20941: CALL 33821 0 0
20945: GO 21008
20947: LD_INT 5
20949: DOUBLE
20950: EQUAL
20951: IFTRUE 20955
20953: GO 20962
20955: POP
// hHackInvisible ; 6 :
20956: CALL 33932 0 0
20960: GO 21008
20962: LD_INT 6
20964: DOUBLE
20965: EQUAL
20966: IFTRUE 20970
20968: GO 20977
20970: POP
// hHackChangeYourSide ; 7 :
20971: CALL 33989 0 0
20975: GO 21008
20977: LD_INT 7
20979: DOUBLE
20980: EQUAL
20981: IFTRUE 20985
20983: GO 20992
20985: POP
// hHackChangeUnitSide ; 8 :
20986: CALL 34031 0 0
20990: GO 21008
20992: LD_INT 8
20994: DOUBLE
20995: EQUAL
20996: IFTRUE 21000
20998: GO 21007
21000: POP
// hHackFog ; end ;
21001: CALL 34132 0 0
21005: GO 21008
21007: POP
// end ; if p2 = game_save_mode then
21008: LD_VAR 0 2
21012: PUSH
21013: LD_INT 102
21015: EQUAL
21016: IFFALSE 21071
// begin if p3 = 1 then
21018: LD_VAR 0 3
21022: PUSH
21023: LD_INT 1
21025: EQUAL
21026: IFFALSE 21038
// globalGameSaveCounter := p4 ;
21028: LD_ADDR_EXP 54
21032: PUSH
21033: LD_VAR 0 4
21037: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21038: LD_VAR 0 3
21042: PUSH
21043: LD_INT 2
21045: EQUAL
21046: PUSH
21047: LD_EXP 54
21051: AND
21052: IFFALSE 21071
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21054: LD_STRING setGameSaveCounter(
21056: PUSH
21057: LD_EXP 54
21061: STR
21062: PUSH
21063: LD_STRING )
21065: STR
21066: PPUSH
21067: CALL_OW 559
// end ; end ;
21071: LD_VAR 0 7
21075: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21076: LD_INT 0
21078: PPUSH
// streamModeActive := false ;
21079: LD_ADDR_EXP 55
21083: PUSH
21084: LD_INT 0
21086: ST_TO_ADDR
// normalCounter := 36 ;
21087: LD_ADDR_EXP 56
21091: PUSH
21092: LD_INT 36
21094: ST_TO_ADDR
// hardcoreCounter := 18 ;
21095: LD_ADDR_EXP 57
21099: PUSH
21100: LD_INT 18
21102: ST_TO_ADDR
// sRocket := false ;
21103: LD_ADDR_EXP 60
21107: PUSH
21108: LD_INT 0
21110: ST_TO_ADDR
// sSpeed := false ;
21111: LD_ADDR_EXP 59
21115: PUSH
21116: LD_INT 0
21118: ST_TO_ADDR
// sEngine := false ;
21119: LD_ADDR_EXP 61
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
// sSpec := false ;
21127: LD_ADDR_EXP 58
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// sLevel := false ;
21135: LD_ADDR_EXP 62
21139: PUSH
21140: LD_INT 0
21142: ST_TO_ADDR
// sArmoury := false ;
21143: LD_ADDR_EXP 63
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// sRadar := false ;
21151: LD_ADDR_EXP 64
21155: PUSH
21156: LD_INT 0
21158: ST_TO_ADDR
// sBunker := false ;
21159: LD_ADDR_EXP 65
21163: PUSH
21164: LD_INT 0
21166: ST_TO_ADDR
// sHack := false ;
21167: LD_ADDR_EXP 66
21171: PUSH
21172: LD_INT 0
21174: ST_TO_ADDR
// sFire := false ;
21175: LD_ADDR_EXP 67
21179: PUSH
21180: LD_INT 0
21182: ST_TO_ADDR
// sRefresh := false ;
21183: LD_ADDR_EXP 68
21187: PUSH
21188: LD_INT 0
21190: ST_TO_ADDR
// sExp := false ;
21191: LD_ADDR_EXP 69
21195: PUSH
21196: LD_INT 0
21198: ST_TO_ADDR
// sDepot := false ;
21199: LD_ADDR_EXP 70
21203: PUSH
21204: LD_INT 0
21206: ST_TO_ADDR
// sFlag := false ;
21207: LD_ADDR_EXP 71
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// sKamikadze := false ;
21215: LD_ADDR_EXP 79
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// sTroll := false ;
21223: LD_ADDR_EXP 80
21227: PUSH
21228: LD_INT 0
21230: ST_TO_ADDR
// sSlow := false ;
21231: LD_ADDR_EXP 81
21235: PUSH
21236: LD_INT 0
21238: ST_TO_ADDR
// sLack := false ;
21239: LD_ADDR_EXP 82
21243: PUSH
21244: LD_INT 0
21246: ST_TO_ADDR
// sTank := false ;
21247: LD_ADDR_EXP 84
21251: PUSH
21252: LD_INT 0
21254: ST_TO_ADDR
// sRemote := false ;
21255: LD_ADDR_EXP 85
21259: PUSH
21260: LD_INT 0
21262: ST_TO_ADDR
// sPowell := false ;
21263: LD_ADDR_EXP 86
21267: PUSH
21268: LD_INT 0
21270: ST_TO_ADDR
// sTeleport := false ;
21271: LD_ADDR_EXP 89
21275: PUSH
21276: LD_INT 0
21278: ST_TO_ADDR
// sOilTower := false ;
21279: LD_ADDR_EXP 91
21283: PUSH
21284: LD_INT 0
21286: ST_TO_ADDR
// sShovel := false ;
21287: LD_ADDR_EXP 92
21291: PUSH
21292: LD_INT 0
21294: ST_TO_ADDR
// sSheik := false ;
21295: LD_ADDR_EXP 93
21299: PUSH
21300: LD_INT 0
21302: ST_TO_ADDR
// sEarthquake := false ;
21303: LD_ADDR_EXP 95
21307: PUSH
21308: LD_INT 0
21310: ST_TO_ADDR
// sAI := false ;
21311: LD_ADDR_EXP 96
21315: PUSH
21316: LD_INT 0
21318: ST_TO_ADDR
// sCargo := false ;
21319: LD_ADDR_EXP 99
21323: PUSH
21324: LD_INT 0
21326: ST_TO_ADDR
// sDLaser := false ;
21327: LD_ADDR_EXP 100
21331: PUSH
21332: LD_INT 0
21334: ST_TO_ADDR
// sExchange := false ;
21335: LD_ADDR_EXP 101
21339: PUSH
21340: LD_INT 0
21342: ST_TO_ADDR
// sFac := false ;
21343: LD_ADDR_EXP 102
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// sPower := false ;
21351: LD_ADDR_EXP 103
21355: PUSH
21356: LD_INT 0
21358: ST_TO_ADDR
// sRandom := false ;
21359: LD_ADDR_EXP 104
21363: PUSH
21364: LD_INT 0
21366: ST_TO_ADDR
// sShield := false ;
21367: LD_ADDR_EXP 105
21371: PUSH
21372: LD_INT 0
21374: ST_TO_ADDR
// sTime := false ;
21375: LD_ADDR_EXP 106
21379: PUSH
21380: LD_INT 0
21382: ST_TO_ADDR
// sTools := false ;
21383: LD_ADDR_EXP 107
21387: PUSH
21388: LD_INT 0
21390: ST_TO_ADDR
// sSold := false ;
21391: LD_ADDR_EXP 72
21395: PUSH
21396: LD_INT 0
21398: ST_TO_ADDR
// sDiff := false ;
21399: LD_ADDR_EXP 73
21403: PUSH
21404: LD_INT 0
21406: ST_TO_ADDR
// sFog := false ;
21407: LD_ADDR_EXP 76
21411: PUSH
21412: LD_INT 0
21414: ST_TO_ADDR
// sReset := false ;
21415: LD_ADDR_EXP 77
21419: PUSH
21420: LD_INT 0
21422: ST_TO_ADDR
// sSun := false ;
21423: LD_ADDR_EXP 78
21427: PUSH
21428: LD_INT 0
21430: ST_TO_ADDR
// sTiger := false ;
21431: LD_ADDR_EXP 74
21435: PUSH
21436: LD_INT 0
21438: ST_TO_ADDR
// sBomb := false ;
21439: LD_ADDR_EXP 75
21443: PUSH
21444: LD_INT 0
21446: ST_TO_ADDR
// sWound := false ;
21447: LD_ADDR_EXP 83
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
// sBetray := false ;
21455: LD_ADDR_EXP 87
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// sContamin := false ;
21463: LD_ADDR_EXP 88
21467: PUSH
21468: LD_INT 0
21470: ST_TO_ADDR
// sOil := false ;
21471: LD_ADDR_EXP 90
21475: PUSH
21476: LD_INT 0
21478: ST_TO_ADDR
// sStu := false ;
21479: LD_ADDR_EXP 94
21483: PUSH
21484: LD_INT 0
21486: ST_TO_ADDR
// sBazooka := false ;
21487: LD_ADDR_EXP 97
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// sMortar := false ;
21495: LD_ADDR_EXP 98
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// sRanger := false ;
21503: LD_ADDR_EXP 108
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// sComputer := false ;
21511: LD_ADDR_EXP 109
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// s30 := false ;
21519: LD_ADDR_EXP 110
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// s60 := false ;
21527: LD_ADDR_EXP 111
21531: PUSH
21532: LD_INT 0
21534: ST_TO_ADDR
// end ;
21535: LD_VAR 0 1
21539: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21540: LD_INT 0
21542: PPUSH
21543: PPUSH
21544: PPUSH
21545: PPUSH
21546: PPUSH
21547: PPUSH
21548: PPUSH
// result := [ ] ;
21549: LD_ADDR_VAR 0 2
21553: PUSH
21554: EMPTY
21555: ST_TO_ADDR
// if campaign_id = 1 then
21556: LD_OWVAR 69
21560: PUSH
21561: LD_INT 1
21563: EQUAL
21564: IFFALSE 24730
// begin case mission_number of 1 :
21566: LD_OWVAR 70
21570: PUSH
21571: LD_INT 1
21573: DOUBLE
21574: EQUAL
21575: IFTRUE 21579
21577: GO 21655
21579: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21580: LD_ADDR_VAR 0 2
21584: PUSH
21585: LD_INT 2
21587: PUSH
21588: LD_INT 4
21590: PUSH
21591: LD_INT 11
21593: PUSH
21594: LD_INT 12
21596: PUSH
21597: LD_INT 15
21599: PUSH
21600: LD_INT 16
21602: PUSH
21603: LD_INT 22
21605: PUSH
21606: LD_INT 23
21608: PUSH
21609: LD_INT 26
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 101
21625: PUSH
21626: LD_INT 102
21628: PUSH
21629: LD_INT 106
21631: PUSH
21632: LD_INT 116
21634: PUSH
21635: LD_INT 117
21637: PUSH
21638: LD_INT 118
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: ST_TO_ADDR
21653: GO 24728
21655: LD_INT 2
21657: DOUBLE
21658: EQUAL
21659: IFTRUE 21663
21661: GO 21747
21663: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21664: LD_ADDR_VAR 0 2
21668: PUSH
21669: LD_INT 2
21671: PUSH
21672: LD_INT 4
21674: PUSH
21675: LD_INT 11
21677: PUSH
21678: LD_INT 12
21680: PUSH
21681: LD_INT 15
21683: PUSH
21684: LD_INT 16
21686: PUSH
21687: LD_INT 22
21689: PUSH
21690: LD_INT 23
21692: PUSH
21693: LD_INT 26
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 101
21709: PUSH
21710: LD_INT 102
21712: PUSH
21713: LD_INT 105
21715: PUSH
21716: LD_INT 106
21718: PUSH
21719: LD_INT 108
21721: PUSH
21722: LD_INT 116
21724: PUSH
21725: LD_INT 117
21727: PUSH
21728: LD_INT 118
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: ST_TO_ADDR
21745: GO 24728
21747: LD_INT 3
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21843
21755: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21756: LD_ADDR_VAR 0 2
21760: PUSH
21761: LD_INT 2
21763: PUSH
21764: LD_INT 4
21766: PUSH
21767: LD_INT 5
21769: PUSH
21770: LD_INT 11
21772: PUSH
21773: LD_INT 12
21775: PUSH
21776: LD_INT 15
21778: PUSH
21779: LD_INT 16
21781: PUSH
21782: LD_INT 22
21784: PUSH
21785: LD_INT 26
21787: PUSH
21788: LD_INT 36
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 101
21805: PUSH
21806: LD_INT 102
21808: PUSH
21809: LD_INT 105
21811: PUSH
21812: LD_INT 106
21814: PUSH
21815: LD_INT 108
21817: PUSH
21818: LD_INT 116
21820: PUSH
21821: LD_INT 117
21823: PUSH
21824: LD_INT 118
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: ST_TO_ADDR
21841: GO 24728
21843: LD_INT 4
21845: DOUBLE
21846: EQUAL
21847: IFTRUE 21851
21849: GO 21947
21851: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21852: LD_ADDR_VAR 0 2
21856: PUSH
21857: LD_INT 2
21859: PUSH
21860: LD_INT 4
21862: PUSH
21863: LD_INT 5
21865: PUSH
21866: LD_INT 8
21868: PUSH
21869: LD_INT 11
21871: PUSH
21872: LD_INT 12
21874: PUSH
21875: LD_INT 15
21877: PUSH
21878: LD_INT 16
21880: PUSH
21881: LD_INT 22
21883: PUSH
21884: LD_INT 23
21886: PUSH
21887: LD_INT 26
21889: PUSH
21890: LD_INT 36
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 101
21909: PUSH
21910: LD_INT 102
21912: PUSH
21913: LD_INT 105
21915: PUSH
21916: LD_INT 106
21918: PUSH
21919: LD_INT 108
21921: PUSH
21922: LD_INT 116
21924: PUSH
21925: LD_INT 117
21927: PUSH
21928: LD_INT 118
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: ST_TO_ADDR
21945: GO 24728
21947: LD_INT 5
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 22067
21955: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21956: LD_ADDR_VAR 0 2
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 4
21966: PUSH
21967: LD_INT 5
21969: PUSH
21970: LD_INT 6
21972: PUSH
21973: LD_INT 8
21975: PUSH
21976: LD_INT 11
21978: PUSH
21979: LD_INT 12
21981: PUSH
21982: LD_INT 15
21984: PUSH
21985: LD_INT 16
21987: PUSH
21988: LD_INT 22
21990: PUSH
21991: LD_INT 23
21993: PUSH
21994: LD_INT 25
21996: PUSH
21997: LD_INT 26
21999: PUSH
22000: LD_INT 36
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 101
22021: PUSH
22022: LD_INT 102
22024: PUSH
22025: LD_INT 105
22027: PUSH
22028: LD_INT 106
22030: PUSH
22031: LD_INT 108
22033: PUSH
22034: LD_INT 109
22036: PUSH
22037: LD_INT 112
22039: PUSH
22040: LD_INT 116
22042: PUSH
22043: LD_INT 117
22045: PUSH
22046: LD_INT 118
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 24728
22067: LD_INT 6
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22207
22075: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 6
22092: PUSH
22093: LD_INT 8
22095: PUSH
22096: LD_INT 11
22098: PUSH
22099: LD_INT 12
22101: PUSH
22102: LD_INT 15
22104: PUSH
22105: LD_INT 16
22107: PUSH
22108: LD_INT 20
22110: PUSH
22111: LD_INT 21
22113: PUSH
22114: LD_INT 22
22116: PUSH
22117: LD_INT 23
22119: PUSH
22120: LD_INT 25
22122: PUSH
22123: LD_INT 26
22125: PUSH
22126: LD_INT 30
22128: PUSH
22129: LD_INT 31
22131: PUSH
22132: LD_INT 32
22134: PUSH
22135: LD_INT 36
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 101
22161: PUSH
22162: LD_INT 102
22164: PUSH
22165: LD_INT 105
22167: PUSH
22168: LD_INT 106
22170: PUSH
22171: LD_INT 108
22173: PUSH
22174: LD_INT 109
22176: PUSH
22177: LD_INT 112
22179: PUSH
22180: LD_INT 116
22182: PUSH
22183: LD_INT 117
22185: PUSH
22186: LD_INT 118
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: ST_TO_ADDR
22205: GO 24728
22207: LD_INT 7
22209: DOUBLE
22210: EQUAL
22211: IFTRUE 22215
22213: GO 22327
22215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22216: LD_ADDR_VAR 0 2
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 4
22226: PUSH
22227: LD_INT 5
22229: PUSH
22230: LD_INT 7
22232: PUSH
22233: LD_INT 11
22235: PUSH
22236: LD_INT 12
22238: PUSH
22239: LD_INT 15
22241: PUSH
22242: LD_INT 16
22244: PUSH
22245: LD_INT 20
22247: PUSH
22248: LD_INT 21
22250: PUSH
22251: LD_INT 22
22253: PUSH
22254: LD_INT 23
22256: PUSH
22257: LD_INT 25
22259: PUSH
22260: LD_INT 26
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 101
22281: PUSH
22282: LD_INT 102
22284: PUSH
22285: LD_INT 103
22287: PUSH
22288: LD_INT 105
22290: PUSH
22291: LD_INT 106
22293: PUSH
22294: LD_INT 108
22296: PUSH
22297: LD_INT 112
22299: PUSH
22300: LD_INT 116
22302: PUSH
22303: LD_INT 117
22305: PUSH
22306: LD_INT 118
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: ST_TO_ADDR
22325: GO 24728
22327: LD_INT 8
22329: DOUBLE
22330: EQUAL
22331: IFTRUE 22335
22333: GO 22475
22335: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22336: LD_ADDR_VAR 0 2
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: LD_INT 4
22346: PUSH
22347: LD_INT 5
22349: PUSH
22350: LD_INT 6
22352: PUSH
22353: LD_INT 7
22355: PUSH
22356: LD_INT 8
22358: PUSH
22359: LD_INT 11
22361: PUSH
22362: LD_INT 12
22364: PUSH
22365: LD_INT 15
22367: PUSH
22368: LD_INT 16
22370: PUSH
22371: LD_INT 20
22373: PUSH
22374: LD_INT 21
22376: PUSH
22377: LD_INT 22
22379: PUSH
22380: LD_INT 23
22382: PUSH
22383: LD_INT 25
22385: PUSH
22386: LD_INT 26
22388: PUSH
22389: LD_INT 30
22391: PUSH
22392: LD_INT 31
22394: PUSH
22395: LD_INT 32
22397: PUSH
22398: LD_INT 36
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 101
22425: PUSH
22426: LD_INT 102
22428: PUSH
22429: LD_INT 103
22431: PUSH
22432: LD_INT 105
22434: PUSH
22435: LD_INT 106
22437: PUSH
22438: LD_INT 108
22440: PUSH
22441: LD_INT 109
22443: PUSH
22444: LD_INT 112
22446: PUSH
22447: LD_INT 116
22449: PUSH
22450: LD_INT 117
22452: PUSH
22453: LD_INT 118
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: ST_TO_ADDR
22473: GO 24728
22475: LD_INT 9
22477: DOUBLE
22478: EQUAL
22479: IFTRUE 22483
22481: GO 22631
22483: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22484: LD_ADDR_VAR 0 2
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 4
22494: PUSH
22495: LD_INT 5
22497: PUSH
22498: LD_INT 6
22500: PUSH
22501: LD_INT 7
22503: PUSH
22504: LD_INT 8
22506: PUSH
22507: LD_INT 11
22509: PUSH
22510: LD_INT 12
22512: PUSH
22513: LD_INT 15
22515: PUSH
22516: LD_INT 16
22518: PUSH
22519: LD_INT 20
22521: PUSH
22522: LD_INT 21
22524: PUSH
22525: LD_INT 22
22527: PUSH
22528: LD_INT 23
22530: PUSH
22531: LD_INT 25
22533: PUSH
22534: LD_INT 26
22536: PUSH
22537: LD_INT 28
22539: PUSH
22540: LD_INT 30
22542: PUSH
22543: LD_INT 31
22545: PUSH
22546: LD_INT 32
22548: PUSH
22549: LD_INT 36
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 101
22577: PUSH
22578: LD_INT 102
22580: PUSH
22581: LD_INT 103
22583: PUSH
22584: LD_INT 105
22586: PUSH
22587: LD_INT 106
22589: PUSH
22590: LD_INT 108
22592: PUSH
22593: LD_INT 109
22595: PUSH
22596: LD_INT 112
22598: PUSH
22599: LD_INT 114
22601: PUSH
22602: LD_INT 116
22604: PUSH
22605: LD_INT 117
22607: PUSH
22608: LD_INT 118
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: ST_TO_ADDR
22629: GO 24728
22631: LD_INT 10
22633: DOUBLE
22634: EQUAL
22635: IFTRUE 22639
22637: GO 22835
22639: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22640: LD_ADDR_VAR 0 2
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 4
22650: PUSH
22651: LD_INT 5
22653: PUSH
22654: LD_INT 6
22656: PUSH
22657: LD_INT 7
22659: PUSH
22660: LD_INT 8
22662: PUSH
22663: LD_INT 9
22665: PUSH
22666: LD_INT 10
22668: PUSH
22669: LD_INT 11
22671: PUSH
22672: LD_INT 12
22674: PUSH
22675: LD_INT 13
22677: PUSH
22678: LD_INT 14
22680: PUSH
22681: LD_INT 15
22683: PUSH
22684: LD_INT 16
22686: PUSH
22687: LD_INT 17
22689: PUSH
22690: LD_INT 18
22692: PUSH
22693: LD_INT 19
22695: PUSH
22696: LD_INT 20
22698: PUSH
22699: LD_INT 21
22701: PUSH
22702: LD_INT 22
22704: PUSH
22705: LD_INT 23
22707: PUSH
22708: LD_INT 24
22710: PUSH
22711: LD_INT 25
22713: PUSH
22714: LD_INT 26
22716: PUSH
22717: LD_INT 28
22719: PUSH
22720: LD_INT 30
22722: PUSH
22723: LD_INT 31
22725: PUSH
22726: LD_INT 32
22728: PUSH
22729: LD_INT 36
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 101
22765: PUSH
22766: LD_INT 102
22768: PUSH
22769: LD_INT 103
22771: PUSH
22772: LD_INT 104
22774: PUSH
22775: LD_INT 105
22777: PUSH
22778: LD_INT 106
22780: PUSH
22781: LD_INT 107
22783: PUSH
22784: LD_INT 108
22786: PUSH
22787: LD_INT 109
22789: PUSH
22790: LD_INT 110
22792: PUSH
22793: LD_INT 111
22795: PUSH
22796: LD_INT 112
22798: PUSH
22799: LD_INT 114
22801: PUSH
22802: LD_INT 116
22804: PUSH
22805: LD_INT 117
22807: PUSH
22808: LD_INT 118
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: ST_TO_ADDR
22833: GO 24728
22835: LD_INT 11
22837: DOUBLE
22838: EQUAL
22839: IFTRUE 22843
22841: GO 23047
22843: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22844: LD_ADDR_VAR 0 2
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: LD_INT 3
22854: PUSH
22855: LD_INT 4
22857: PUSH
22858: LD_INT 5
22860: PUSH
22861: LD_INT 6
22863: PUSH
22864: LD_INT 7
22866: PUSH
22867: LD_INT 8
22869: PUSH
22870: LD_INT 9
22872: PUSH
22873: LD_INT 10
22875: PUSH
22876: LD_INT 11
22878: PUSH
22879: LD_INT 12
22881: PUSH
22882: LD_INT 13
22884: PUSH
22885: LD_INT 14
22887: PUSH
22888: LD_INT 15
22890: PUSH
22891: LD_INT 16
22893: PUSH
22894: LD_INT 17
22896: PUSH
22897: LD_INT 18
22899: PUSH
22900: LD_INT 19
22902: PUSH
22903: LD_INT 20
22905: PUSH
22906: LD_INT 21
22908: PUSH
22909: LD_INT 22
22911: PUSH
22912: LD_INT 23
22914: PUSH
22915: LD_INT 24
22917: PUSH
22918: LD_INT 25
22920: PUSH
22921: LD_INT 26
22923: PUSH
22924: LD_INT 28
22926: PUSH
22927: LD_INT 30
22929: PUSH
22930: LD_INT 31
22932: PUSH
22933: LD_INT 32
22935: PUSH
22936: LD_INT 34
22938: PUSH
22939: LD_INT 36
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 101
22977: PUSH
22978: LD_INT 102
22980: PUSH
22981: LD_INT 103
22983: PUSH
22984: LD_INT 104
22986: PUSH
22987: LD_INT 105
22989: PUSH
22990: LD_INT 106
22992: PUSH
22993: LD_INT 107
22995: PUSH
22996: LD_INT 108
22998: PUSH
22999: LD_INT 109
23001: PUSH
23002: LD_INT 110
23004: PUSH
23005: LD_INT 111
23007: PUSH
23008: LD_INT 112
23010: PUSH
23011: LD_INT 114
23013: PUSH
23014: LD_INT 116
23016: PUSH
23017: LD_INT 117
23019: PUSH
23020: LD_INT 118
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: ST_TO_ADDR
23045: GO 24728
23047: LD_INT 12
23049: DOUBLE
23050: EQUAL
23051: IFTRUE 23055
23053: GO 23275
23055: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23056: LD_ADDR_VAR 0 2
23060: PUSH
23061: LD_INT 1
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: LD_INT 3
23069: PUSH
23070: LD_INT 4
23072: PUSH
23073: LD_INT 5
23075: PUSH
23076: LD_INT 6
23078: PUSH
23079: LD_INT 7
23081: PUSH
23082: LD_INT 8
23084: PUSH
23085: LD_INT 9
23087: PUSH
23088: LD_INT 10
23090: PUSH
23091: LD_INT 11
23093: PUSH
23094: LD_INT 12
23096: PUSH
23097: LD_INT 13
23099: PUSH
23100: LD_INT 14
23102: PUSH
23103: LD_INT 15
23105: PUSH
23106: LD_INT 16
23108: PUSH
23109: LD_INT 17
23111: PUSH
23112: LD_INT 18
23114: PUSH
23115: LD_INT 19
23117: PUSH
23118: LD_INT 20
23120: PUSH
23121: LD_INT 21
23123: PUSH
23124: LD_INT 22
23126: PUSH
23127: LD_INT 23
23129: PUSH
23130: LD_INT 24
23132: PUSH
23133: LD_INT 25
23135: PUSH
23136: LD_INT 26
23138: PUSH
23139: LD_INT 27
23141: PUSH
23142: LD_INT 28
23144: PUSH
23145: LD_INT 30
23147: PUSH
23148: LD_INT 31
23150: PUSH
23151: LD_INT 32
23153: PUSH
23154: LD_INT 33
23156: PUSH
23157: LD_INT 34
23159: PUSH
23160: LD_INT 36
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 101
23201: PUSH
23202: LD_INT 102
23204: PUSH
23205: LD_INT 103
23207: PUSH
23208: LD_INT 104
23210: PUSH
23211: LD_INT 105
23213: PUSH
23214: LD_INT 106
23216: PUSH
23217: LD_INT 107
23219: PUSH
23220: LD_INT 108
23222: PUSH
23223: LD_INT 109
23225: PUSH
23226: LD_INT 110
23228: PUSH
23229: LD_INT 111
23231: PUSH
23232: LD_INT 112
23234: PUSH
23235: LD_INT 113
23237: PUSH
23238: LD_INT 114
23240: PUSH
23241: LD_INT 116
23243: PUSH
23244: LD_INT 117
23246: PUSH
23247: LD_INT 118
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: ST_TO_ADDR
23273: GO 24728
23275: LD_INT 13
23277: DOUBLE
23278: EQUAL
23279: IFTRUE 23283
23281: GO 23491
23283: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: LD_INT 3
23297: PUSH
23298: LD_INT 4
23300: PUSH
23301: LD_INT 5
23303: PUSH
23304: LD_INT 8
23306: PUSH
23307: LD_INT 9
23309: PUSH
23310: LD_INT 10
23312: PUSH
23313: LD_INT 11
23315: PUSH
23316: LD_INT 12
23318: PUSH
23319: LD_INT 14
23321: PUSH
23322: LD_INT 15
23324: PUSH
23325: LD_INT 16
23327: PUSH
23328: LD_INT 17
23330: PUSH
23331: LD_INT 18
23333: PUSH
23334: LD_INT 19
23336: PUSH
23337: LD_INT 20
23339: PUSH
23340: LD_INT 21
23342: PUSH
23343: LD_INT 22
23345: PUSH
23346: LD_INT 23
23348: PUSH
23349: LD_INT 24
23351: PUSH
23352: LD_INT 25
23354: PUSH
23355: LD_INT 26
23357: PUSH
23358: LD_INT 27
23360: PUSH
23361: LD_INT 28
23363: PUSH
23364: LD_INT 30
23366: PUSH
23367: LD_INT 31
23369: PUSH
23370: LD_INT 32
23372: PUSH
23373: LD_INT 33
23375: PUSH
23376: LD_INT 34
23378: PUSH
23379: LD_INT 36
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 101
23417: PUSH
23418: LD_INT 102
23420: PUSH
23421: LD_INT 103
23423: PUSH
23424: LD_INT 104
23426: PUSH
23427: LD_INT 105
23429: PUSH
23430: LD_INT 106
23432: PUSH
23433: LD_INT 107
23435: PUSH
23436: LD_INT 108
23438: PUSH
23439: LD_INT 109
23441: PUSH
23442: LD_INT 110
23444: PUSH
23445: LD_INT 111
23447: PUSH
23448: LD_INT 112
23450: PUSH
23451: LD_INT 113
23453: PUSH
23454: LD_INT 114
23456: PUSH
23457: LD_INT 116
23459: PUSH
23460: LD_INT 117
23462: PUSH
23463: LD_INT 118
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: ST_TO_ADDR
23489: GO 24728
23491: LD_INT 14
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 23723
23499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23500: LD_ADDR_VAR 0 2
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: LD_INT 3
23513: PUSH
23514: LD_INT 4
23516: PUSH
23517: LD_INT 5
23519: PUSH
23520: LD_INT 6
23522: PUSH
23523: LD_INT 7
23525: PUSH
23526: LD_INT 8
23528: PUSH
23529: LD_INT 9
23531: PUSH
23532: LD_INT 10
23534: PUSH
23535: LD_INT 11
23537: PUSH
23538: LD_INT 12
23540: PUSH
23541: LD_INT 13
23543: PUSH
23544: LD_INT 14
23546: PUSH
23547: LD_INT 15
23549: PUSH
23550: LD_INT 16
23552: PUSH
23553: LD_INT 17
23555: PUSH
23556: LD_INT 18
23558: PUSH
23559: LD_INT 19
23561: PUSH
23562: LD_INT 20
23564: PUSH
23565: LD_INT 21
23567: PUSH
23568: LD_INT 22
23570: PUSH
23571: LD_INT 23
23573: PUSH
23574: LD_INT 24
23576: PUSH
23577: LD_INT 25
23579: PUSH
23580: LD_INT 26
23582: PUSH
23583: LD_INT 27
23585: PUSH
23586: LD_INT 28
23588: PUSH
23589: LD_INT 29
23591: PUSH
23592: LD_INT 30
23594: PUSH
23595: LD_INT 31
23597: PUSH
23598: LD_INT 32
23600: PUSH
23601: LD_INT 33
23603: PUSH
23604: LD_INT 34
23606: PUSH
23607: LD_INT 36
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 101
23649: PUSH
23650: LD_INT 102
23652: PUSH
23653: LD_INT 103
23655: PUSH
23656: LD_INT 104
23658: PUSH
23659: LD_INT 105
23661: PUSH
23662: LD_INT 106
23664: PUSH
23665: LD_INT 107
23667: PUSH
23668: LD_INT 108
23670: PUSH
23671: LD_INT 109
23673: PUSH
23674: LD_INT 110
23676: PUSH
23677: LD_INT 111
23679: PUSH
23680: LD_INT 112
23682: PUSH
23683: LD_INT 113
23685: PUSH
23686: LD_INT 114
23688: PUSH
23689: LD_INT 116
23691: PUSH
23692: LD_INT 117
23694: PUSH
23695: LD_INT 118
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: ST_TO_ADDR
23721: GO 24728
23723: LD_INT 15
23725: DOUBLE
23726: EQUAL
23727: IFTRUE 23731
23729: GO 23955
23731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23732: LD_ADDR_VAR 0 2
23736: PUSH
23737: LD_INT 1
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: LD_INT 4
23748: PUSH
23749: LD_INT 5
23751: PUSH
23752: LD_INT 6
23754: PUSH
23755: LD_INT 7
23757: PUSH
23758: LD_INT 8
23760: PUSH
23761: LD_INT 9
23763: PUSH
23764: LD_INT 10
23766: PUSH
23767: LD_INT 11
23769: PUSH
23770: LD_INT 12
23772: PUSH
23773: LD_INT 13
23775: PUSH
23776: LD_INT 14
23778: PUSH
23779: LD_INT 15
23781: PUSH
23782: LD_INT 16
23784: PUSH
23785: LD_INT 17
23787: PUSH
23788: LD_INT 18
23790: PUSH
23791: LD_INT 19
23793: PUSH
23794: LD_INT 20
23796: PUSH
23797: LD_INT 21
23799: PUSH
23800: LD_INT 22
23802: PUSH
23803: LD_INT 23
23805: PUSH
23806: LD_INT 24
23808: PUSH
23809: LD_INT 25
23811: PUSH
23812: LD_INT 26
23814: PUSH
23815: LD_INT 27
23817: PUSH
23818: LD_INT 28
23820: PUSH
23821: LD_INT 29
23823: PUSH
23824: LD_INT 30
23826: PUSH
23827: LD_INT 31
23829: PUSH
23830: LD_INT 32
23832: PUSH
23833: LD_INT 33
23835: PUSH
23836: LD_INT 34
23838: PUSH
23839: LD_INT 36
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 101
23881: PUSH
23882: LD_INT 102
23884: PUSH
23885: LD_INT 103
23887: PUSH
23888: LD_INT 104
23890: PUSH
23891: LD_INT 105
23893: PUSH
23894: LD_INT 106
23896: PUSH
23897: LD_INT 107
23899: PUSH
23900: LD_INT 108
23902: PUSH
23903: LD_INT 109
23905: PUSH
23906: LD_INT 110
23908: PUSH
23909: LD_INT 111
23911: PUSH
23912: LD_INT 112
23914: PUSH
23915: LD_INT 113
23917: PUSH
23918: LD_INT 114
23920: PUSH
23921: LD_INT 116
23923: PUSH
23924: LD_INT 117
23926: PUSH
23927: LD_INT 118
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: ST_TO_ADDR
23953: GO 24728
23955: LD_INT 16
23957: DOUBLE
23958: EQUAL
23959: IFTRUE 23963
23961: GO 24099
23963: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23964: LD_ADDR_VAR 0 2
23968: PUSH
23969: LD_INT 2
23971: PUSH
23972: LD_INT 4
23974: PUSH
23975: LD_INT 5
23977: PUSH
23978: LD_INT 7
23980: PUSH
23981: LD_INT 11
23983: PUSH
23984: LD_INT 12
23986: PUSH
23987: LD_INT 15
23989: PUSH
23990: LD_INT 16
23992: PUSH
23993: LD_INT 20
23995: PUSH
23996: LD_INT 21
23998: PUSH
23999: LD_INT 22
24001: PUSH
24002: LD_INT 23
24004: PUSH
24005: LD_INT 25
24007: PUSH
24008: LD_INT 26
24010: PUSH
24011: LD_INT 30
24013: PUSH
24014: LD_INT 31
24016: PUSH
24017: LD_INT 32
24019: PUSH
24020: LD_INT 33
24022: PUSH
24023: LD_INT 34
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 101
24049: PUSH
24050: LD_INT 102
24052: PUSH
24053: LD_INT 103
24055: PUSH
24056: LD_INT 106
24058: PUSH
24059: LD_INT 108
24061: PUSH
24062: LD_INT 112
24064: PUSH
24065: LD_INT 113
24067: PUSH
24068: LD_INT 114
24070: PUSH
24071: LD_INT 116
24073: PUSH
24074: LD_INT 117
24076: PUSH
24077: LD_INT 118
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: ST_TO_ADDR
24097: GO 24728
24099: LD_INT 17
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24331
24107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: LD_INT 2
24118: PUSH
24119: LD_INT 3
24121: PUSH
24122: LD_INT 4
24124: PUSH
24125: LD_INT 5
24127: PUSH
24128: LD_INT 6
24130: PUSH
24131: LD_INT 7
24133: PUSH
24134: LD_INT 8
24136: PUSH
24137: LD_INT 9
24139: PUSH
24140: LD_INT 10
24142: PUSH
24143: LD_INT 11
24145: PUSH
24146: LD_INT 12
24148: PUSH
24149: LD_INT 13
24151: PUSH
24152: LD_INT 14
24154: PUSH
24155: LD_INT 15
24157: PUSH
24158: LD_INT 16
24160: PUSH
24161: LD_INT 17
24163: PUSH
24164: LD_INT 18
24166: PUSH
24167: LD_INT 19
24169: PUSH
24170: LD_INT 20
24172: PUSH
24173: LD_INT 21
24175: PUSH
24176: LD_INT 22
24178: PUSH
24179: LD_INT 23
24181: PUSH
24182: LD_INT 24
24184: PUSH
24185: LD_INT 25
24187: PUSH
24188: LD_INT 26
24190: PUSH
24191: LD_INT 27
24193: PUSH
24194: LD_INT 28
24196: PUSH
24197: LD_INT 29
24199: PUSH
24200: LD_INT 30
24202: PUSH
24203: LD_INT 31
24205: PUSH
24206: LD_INT 32
24208: PUSH
24209: LD_INT 33
24211: PUSH
24212: LD_INT 34
24214: PUSH
24215: LD_INT 36
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 101
24257: PUSH
24258: LD_INT 102
24260: PUSH
24261: LD_INT 103
24263: PUSH
24264: LD_INT 104
24266: PUSH
24267: LD_INT 105
24269: PUSH
24270: LD_INT 106
24272: PUSH
24273: LD_INT 107
24275: PUSH
24276: LD_INT 108
24278: PUSH
24279: LD_INT 109
24281: PUSH
24282: LD_INT 110
24284: PUSH
24285: LD_INT 111
24287: PUSH
24288: LD_INT 112
24290: PUSH
24291: LD_INT 113
24293: PUSH
24294: LD_INT 114
24296: PUSH
24297: LD_INT 116
24299: PUSH
24300: LD_INT 117
24302: PUSH
24303: LD_INT 118
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: ST_TO_ADDR
24329: GO 24728
24331: LD_INT 18
24333: DOUBLE
24334: EQUAL
24335: IFTRUE 24339
24337: GO 24487
24339: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24340: LD_ADDR_VAR 0 2
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: LD_INT 4
24350: PUSH
24351: LD_INT 5
24353: PUSH
24354: LD_INT 7
24356: PUSH
24357: LD_INT 11
24359: PUSH
24360: LD_INT 12
24362: PUSH
24363: LD_INT 15
24365: PUSH
24366: LD_INT 16
24368: PUSH
24369: LD_INT 20
24371: PUSH
24372: LD_INT 21
24374: PUSH
24375: LD_INT 22
24377: PUSH
24378: LD_INT 23
24380: PUSH
24381: LD_INT 25
24383: PUSH
24384: LD_INT 26
24386: PUSH
24387: LD_INT 30
24389: PUSH
24390: LD_INT 31
24392: PUSH
24393: LD_INT 32
24395: PUSH
24396: LD_INT 33
24398: PUSH
24399: LD_INT 34
24401: PUSH
24402: LD_INT 35
24404: PUSH
24405: LD_INT 36
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 101
24433: PUSH
24434: LD_INT 102
24436: PUSH
24437: LD_INT 103
24439: PUSH
24440: LD_INT 106
24442: PUSH
24443: LD_INT 108
24445: PUSH
24446: LD_INT 112
24448: PUSH
24449: LD_INT 113
24451: PUSH
24452: LD_INT 114
24454: PUSH
24455: LD_INT 115
24457: PUSH
24458: LD_INT 116
24460: PUSH
24461: LD_INT 117
24463: PUSH
24464: LD_INT 118
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: ST_TO_ADDR
24485: GO 24728
24487: LD_INT 19
24489: DOUBLE
24490: EQUAL
24491: IFTRUE 24495
24493: GO 24727
24495: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: LD_INT 4
24512: PUSH
24513: LD_INT 5
24515: PUSH
24516: LD_INT 6
24518: PUSH
24519: LD_INT 7
24521: PUSH
24522: LD_INT 8
24524: PUSH
24525: LD_INT 9
24527: PUSH
24528: LD_INT 10
24530: PUSH
24531: LD_INT 11
24533: PUSH
24534: LD_INT 12
24536: PUSH
24537: LD_INT 13
24539: PUSH
24540: LD_INT 14
24542: PUSH
24543: LD_INT 15
24545: PUSH
24546: LD_INT 16
24548: PUSH
24549: LD_INT 17
24551: PUSH
24552: LD_INT 18
24554: PUSH
24555: LD_INT 19
24557: PUSH
24558: LD_INT 20
24560: PUSH
24561: LD_INT 21
24563: PUSH
24564: LD_INT 22
24566: PUSH
24567: LD_INT 23
24569: PUSH
24570: LD_INT 24
24572: PUSH
24573: LD_INT 25
24575: PUSH
24576: LD_INT 26
24578: PUSH
24579: LD_INT 27
24581: PUSH
24582: LD_INT 28
24584: PUSH
24585: LD_INT 29
24587: PUSH
24588: LD_INT 30
24590: PUSH
24591: LD_INT 31
24593: PUSH
24594: LD_INT 32
24596: PUSH
24597: LD_INT 33
24599: PUSH
24600: LD_INT 34
24602: PUSH
24603: LD_INT 35
24605: PUSH
24606: LD_INT 36
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 101
24649: PUSH
24650: LD_INT 102
24652: PUSH
24653: LD_INT 103
24655: PUSH
24656: LD_INT 104
24658: PUSH
24659: LD_INT 105
24661: PUSH
24662: LD_INT 106
24664: PUSH
24665: LD_INT 107
24667: PUSH
24668: LD_INT 108
24670: PUSH
24671: LD_INT 109
24673: PUSH
24674: LD_INT 110
24676: PUSH
24677: LD_INT 111
24679: PUSH
24680: LD_INT 112
24682: PUSH
24683: LD_INT 113
24685: PUSH
24686: LD_INT 114
24688: PUSH
24689: LD_INT 115
24691: PUSH
24692: LD_INT 116
24694: PUSH
24695: LD_INT 117
24697: PUSH
24698: LD_INT 118
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: ST_TO_ADDR
24725: GO 24728
24727: POP
// end else
24728: GO 24959
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24730: LD_ADDR_VAR 0 2
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: LD_INT 3
24743: PUSH
24744: LD_INT 4
24746: PUSH
24747: LD_INT 5
24749: PUSH
24750: LD_INT 6
24752: PUSH
24753: LD_INT 7
24755: PUSH
24756: LD_INT 8
24758: PUSH
24759: LD_INT 9
24761: PUSH
24762: LD_INT 10
24764: PUSH
24765: LD_INT 11
24767: PUSH
24768: LD_INT 12
24770: PUSH
24771: LD_INT 13
24773: PUSH
24774: LD_INT 14
24776: PUSH
24777: LD_INT 15
24779: PUSH
24780: LD_INT 16
24782: PUSH
24783: LD_INT 17
24785: PUSH
24786: LD_INT 18
24788: PUSH
24789: LD_INT 19
24791: PUSH
24792: LD_INT 20
24794: PUSH
24795: LD_INT 21
24797: PUSH
24798: LD_INT 22
24800: PUSH
24801: LD_INT 23
24803: PUSH
24804: LD_INT 24
24806: PUSH
24807: LD_INT 25
24809: PUSH
24810: LD_INT 26
24812: PUSH
24813: LD_INT 27
24815: PUSH
24816: LD_INT 28
24818: PUSH
24819: LD_INT 29
24821: PUSH
24822: LD_INT 30
24824: PUSH
24825: LD_INT 31
24827: PUSH
24828: LD_INT 32
24830: PUSH
24831: LD_INT 33
24833: PUSH
24834: LD_INT 34
24836: PUSH
24837: LD_INT 35
24839: PUSH
24840: LD_INT 36
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 101
24883: PUSH
24884: LD_INT 102
24886: PUSH
24887: LD_INT 103
24889: PUSH
24890: LD_INT 104
24892: PUSH
24893: LD_INT 105
24895: PUSH
24896: LD_INT 106
24898: PUSH
24899: LD_INT 107
24901: PUSH
24902: LD_INT 108
24904: PUSH
24905: LD_INT 109
24907: PUSH
24908: LD_INT 110
24910: PUSH
24911: LD_INT 111
24913: PUSH
24914: LD_INT 112
24916: PUSH
24917: LD_INT 113
24919: PUSH
24920: LD_INT 114
24922: PUSH
24923: LD_INT 115
24925: PUSH
24926: LD_INT 116
24928: PUSH
24929: LD_INT 117
24931: PUSH
24932: LD_INT 118
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: ST_TO_ADDR
// if result then
24959: LD_VAR 0 2
24963: IFFALSE 25749
// begin normal :=  ;
24965: LD_ADDR_VAR 0 5
24969: PUSH
24970: LD_STRING 
24972: ST_TO_ADDR
// hardcore :=  ;
24973: LD_ADDR_VAR 0 6
24977: PUSH
24978: LD_STRING 
24980: ST_TO_ADDR
// active :=  ;
24981: LD_ADDR_VAR 0 7
24985: PUSH
24986: LD_STRING 
24988: ST_TO_ADDR
// for i = 1 to normalCounter do
24989: LD_ADDR_VAR 0 8
24993: PUSH
24994: DOUBLE
24995: LD_INT 1
24997: DEC
24998: ST_TO_ADDR
24999: LD_EXP 56
25003: PUSH
25004: FOR_TO
25005: IFFALSE 25106
// begin tmp := 0 ;
25007: LD_ADDR_VAR 0 3
25011: PUSH
25012: LD_STRING 0
25014: ST_TO_ADDR
// if result [ 1 ] then
25015: LD_VAR 0 2
25019: PUSH
25020: LD_INT 1
25022: ARRAY
25023: IFFALSE 25088
// if result [ 1 ] [ 1 ] = i then
25025: LD_VAR 0 2
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: PUSH
25034: LD_INT 1
25036: ARRAY
25037: PUSH
25038: LD_VAR 0 8
25042: EQUAL
25043: IFFALSE 25088
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25045: LD_ADDR_VAR 0 2
25049: PUSH
25050: LD_VAR 0 2
25054: PPUSH
25055: LD_INT 1
25057: PPUSH
25058: LD_VAR 0 2
25062: PUSH
25063: LD_INT 1
25065: ARRAY
25066: PPUSH
25067: LD_INT 1
25069: PPUSH
25070: CALL_OW 3
25074: PPUSH
25075: CALL_OW 1
25079: ST_TO_ADDR
// tmp := 1 ;
25080: LD_ADDR_VAR 0 3
25084: PUSH
25085: LD_STRING 1
25087: ST_TO_ADDR
// end ; normal := normal & tmp ;
25088: LD_ADDR_VAR 0 5
25092: PUSH
25093: LD_VAR 0 5
25097: PUSH
25098: LD_VAR 0 3
25102: STR
25103: ST_TO_ADDR
// end ;
25104: GO 25004
25106: POP
25107: POP
// for i = 1 to hardcoreCounter do
25108: LD_ADDR_VAR 0 8
25112: PUSH
25113: DOUBLE
25114: LD_INT 1
25116: DEC
25117: ST_TO_ADDR
25118: LD_EXP 57
25122: PUSH
25123: FOR_TO
25124: IFFALSE 25229
// begin tmp := 0 ;
25126: LD_ADDR_VAR 0 3
25130: PUSH
25131: LD_STRING 0
25133: ST_TO_ADDR
// if result [ 2 ] then
25134: LD_VAR 0 2
25138: PUSH
25139: LD_INT 2
25141: ARRAY
25142: IFFALSE 25211
// if result [ 2 ] [ 1 ] = 100 + i then
25144: LD_VAR 0 2
25148: PUSH
25149: LD_INT 2
25151: ARRAY
25152: PUSH
25153: LD_INT 1
25155: ARRAY
25156: PUSH
25157: LD_INT 100
25159: PUSH
25160: LD_VAR 0 8
25164: PLUS
25165: EQUAL
25166: IFFALSE 25211
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25168: LD_ADDR_VAR 0 2
25172: PUSH
25173: LD_VAR 0 2
25177: PPUSH
25178: LD_INT 2
25180: PPUSH
25181: LD_VAR 0 2
25185: PUSH
25186: LD_INT 2
25188: ARRAY
25189: PPUSH
25190: LD_INT 1
25192: PPUSH
25193: CALL_OW 3
25197: PPUSH
25198: CALL_OW 1
25202: ST_TO_ADDR
// tmp := 1 ;
25203: LD_ADDR_VAR 0 3
25207: PUSH
25208: LD_STRING 1
25210: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25211: LD_ADDR_VAR 0 6
25215: PUSH
25216: LD_VAR 0 6
25220: PUSH
25221: LD_VAR 0 3
25225: STR
25226: ST_TO_ADDR
// end ;
25227: GO 25123
25229: POP
25230: POP
// if isGameLoad then
25231: LD_VAR 0 1
25235: IFFALSE 25710
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25237: LD_ADDR_VAR 0 4
25241: PUSH
25242: LD_EXP 60
25246: PUSH
25247: LD_EXP 59
25251: PUSH
25252: LD_EXP 61
25256: PUSH
25257: LD_EXP 58
25261: PUSH
25262: LD_EXP 62
25266: PUSH
25267: LD_EXP 63
25271: PUSH
25272: LD_EXP 64
25276: PUSH
25277: LD_EXP 65
25281: PUSH
25282: LD_EXP 66
25286: PUSH
25287: LD_EXP 67
25291: PUSH
25292: LD_EXP 68
25296: PUSH
25297: LD_EXP 69
25301: PUSH
25302: LD_EXP 70
25306: PUSH
25307: LD_EXP 71
25311: PUSH
25312: LD_EXP 79
25316: PUSH
25317: LD_EXP 80
25321: PUSH
25322: LD_EXP 81
25326: PUSH
25327: LD_EXP 82
25331: PUSH
25332: LD_EXP 84
25336: PUSH
25337: LD_EXP 85
25341: PUSH
25342: LD_EXP 86
25346: PUSH
25347: LD_EXP 89
25351: PUSH
25352: LD_EXP 91
25356: PUSH
25357: LD_EXP 92
25361: PUSH
25362: LD_EXP 93
25366: PUSH
25367: LD_EXP 95
25371: PUSH
25372: LD_EXP 96
25376: PUSH
25377: LD_EXP 99
25381: PUSH
25382: LD_EXP 100
25386: PUSH
25387: LD_EXP 101
25391: PUSH
25392: LD_EXP 102
25396: PUSH
25397: LD_EXP 103
25401: PUSH
25402: LD_EXP 104
25406: PUSH
25407: LD_EXP 105
25411: PUSH
25412: LD_EXP 106
25416: PUSH
25417: LD_EXP 107
25421: PUSH
25422: LD_EXP 72
25426: PUSH
25427: LD_EXP 73
25431: PUSH
25432: LD_EXP 76
25436: PUSH
25437: LD_EXP 77
25441: PUSH
25442: LD_EXP 78
25446: PUSH
25447: LD_EXP 74
25451: PUSH
25452: LD_EXP 75
25456: PUSH
25457: LD_EXP 83
25461: PUSH
25462: LD_EXP 87
25466: PUSH
25467: LD_EXP 88
25471: PUSH
25472: LD_EXP 90
25476: PUSH
25477: LD_EXP 94
25481: PUSH
25482: LD_EXP 97
25486: PUSH
25487: LD_EXP 98
25491: PUSH
25492: LD_EXP 108
25496: PUSH
25497: LD_EXP 109
25501: PUSH
25502: LD_EXP 110
25506: PUSH
25507: LD_EXP 111
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: ST_TO_ADDR
// tmp :=  ;
25568: LD_ADDR_VAR 0 3
25572: PUSH
25573: LD_STRING 
25575: ST_TO_ADDR
// for i = 1 to normalCounter do
25576: LD_ADDR_VAR 0 8
25580: PUSH
25581: DOUBLE
25582: LD_INT 1
25584: DEC
25585: ST_TO_ADDR
25586: LD_EXP 56
25590: PUSH
25591: FOR_TO
25592: IFFALSE 25628
// begin if flags [ i ] then
25594: LD_VAR 0 4
25598: PUSH
25599: LD_VAR 0 8
25603: ARRAY
25604: IFFALSE 25626
// tmp := tmp & i & ; ;
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_VAR 0 3
25615: PUSH
25616: LD_VAR 0 8
25620: STR
25621: PUSH
25622: LD_STRING ;
25624: STR
25625: ST_TO_ADDR
// end ;
25626: GO 25591
25628: POP
25629: POP
// for i = 1 to hardcoreCounter do
25630: LD_ADDR_VAR 0 8
25634: PUSH
25635: DOUBLE
25636: LD_INT 1
25638: DEC
25639: ST_TO_ADDR
25640: LD_EXP 57
25644: PUSH
25645: FOR_TO
25646: IFFALSE 25692
// begin if flags [ normalCounter + i ] then
25648: LD_VAR 0 4
25652: PUSH
25653: LD_EXP 56
25657: PUSH
25658: LD_VAR 0 8
25662: PLUS
25663: ARRAY
25664: IFFALSE 25690
// tmp := tmp & ( 100 + i ) & ; ;
25666: LD_ADDR_VAR 0 3
25670: PUSH
25671: LD_VAR 0 3
25675: PUSH
25676: LD_INT 100
25678: PUSH
25679: LD_VAR 0 8
25683: PLUS
25684: STR
25685: PUSH
25686: LD_STRING ;
25688: STR
25689: ST_TO_ADDR
// end ;
25690: GO 25645
25692: POP
25693: POP
// if tmp then
25694: LD_VAR 0 3
25698: IFFALSE 25710
// active := tmp ;
25700: LD_ADDR_VAR 0 7
25704: PUSH
25705: LD_VAR 0 3
25709: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25710: LD_STRING getStreamItemsFromMission("
25712: PUSH
25713: LD_VAR 0 5
25717: STR
25718: PUSH
25719: LD_STRING ","
25721: STR
25722: PUSH
25723: LD_VAR 0 6
25727: STR
25728: PUSH
25729: LD_STRING ","
25731: STR
25732: PUSH
25733: LD_VAR 0 7
25737: STR
25738: PUSH
25739: LD_STRING ")
25741: STR
25742: PPUSH
25743: CALL_OW 559
// end else
25747: GO 25756
// ToLua ( getStreamItemsFromMission("","","") ) ;
25749: LD_STRING getStreamItemsFromMission("","","")
25751: PPUSH
25752: CALL_OW 559
// end ;
25756: LD_VAR 0 2
25760: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25761: LD_EXP 55
25765: PUSH
25766: LD_EXP 60
25770: AND
25771: IFFALSE 25895
25773: GO 25775
25775: DISABLE
25776: LD_INT 0
25778: PPUSH
25779: PPUSH
// begin enable ;
25780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25781: LD_ADDR_VAR 0 2
25785: PUSH
25786: LD_INT 22
25788: PUSH
25789: LD_OWVAR 2
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 34
25803: PUSH
25804: LD_INT 7
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 34
25813: PUSH
25814: LD_INT 45
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 34
25823: PUSH
25824: LD_INT 28
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 34
25833: PUSH
25834: LD_INT 47
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PPUSH
25852: CALL_OW 69
25856: ST_TO_ADDR
// if not tmp then
25857: LD_VAR 0 2
25861: NOT
25862: IFFALSE 25866
// exit ;
25864: GO 25895
// for i in tmp do
25866: LD_ADDR_VAR 0 1
25870: PUSH
25871: LD_VAR 0 2
25875: PUSH
25876: FOR_IN
25877: IFFALSE 25893
// begin SetLives ( i , 0 ) ;
25879: LD_VAR 0 1
25883: PPUSH
25884: LD_INT 0
25886: PPUSH
25887: CALL_OW 234
// end ;
25891: GO 25876
25893: POP
25894: POP
// end ;
25895: PPOPN 2
25897: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25898: LD_EXP 55
25902: PUSH
25903: LD_EXP 61
25907: AND
25908: IFFALSE 25992
25910: GO 25912
25912: DISABLE
25913: LD_INT 0
25915: PPUSH
25916: PPUSH
// begin enable ;
25917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25918: LD_ADDR_VAR 0 2
25922: PUSH
25923: LD_INT 22
25925: PUSH
25926: LD_OWVAR 2
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 32
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 69
25953: ST_TO_ADDR
// if not tmp then
25954: LD_VAR 0 2
25958: NOT
25959: IFFALSE 25963
// exit ;
25961: GO 25992
// for i in tmp do
25963: LD_ADDR_VAR 0 1
25967: PUSH
25968: LD_VAR 0 2
25972: PUSH
25973: FOR_IN
25974: IFFALSE 25990
// begin SetLives ( i , 0 ) ;
25976: LD_VAR 0 1
25980: PPUSH
25981: LD_INT 0
25983: PPUSH
25984: CALL_OW 234
// end ;
25988: GO 25973
25990: POP
25991: POP
// end ;
25992: PPOPN 2
25994: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25995: LD_EXP 55
25999: PUSH
26000: LD_EXP 58
26004: AND
26005: IFFALSE 26098
26007: GO 26009
26009: DISABLE
26010: LD_INT 0
26012: PPUSH
// begin enable ;
26013: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26014: LD_ADDR_VAR 0 1
26018: PUSH
26019: LD_INT 22
26021: PUSH
26022: LD_OWVAR 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 25
26036: PUSH
26037: LD_INT 5
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 25
26046: PUSH
26047: LD_INT 9
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 25
26056: PUSH
26057: LD_INT 8
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PPUSH
26074: CALL_OW 69
26078: PUSH
26079: FOR_IN
26080: IFFALSE 26096
// begin SetClass ( i , 1 ) ;
26082: LD_VAR 0 1
26086: PPUSH
26087: LD_INT 1
26089: PPUSH
26090: CALL_OW 336
// end ;
26094: GO 26079
26096: POP
26097: POP
// end ;
26098: PPOPN 1
26100: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26101: LD_EXP 55
26105: PUSH
26106: LD_EXP 59
26110: AND
26111: PUSH
26112: LD_OWVAR 65
26116: PUSH
26117: LD_INT 7
26119: LESS
26120: AND
26121: IFFALSE 26135
26123: GO 26125
26125: DISABLE
// begin enable ;
26126: ENABLE
// game_speed := 7 ;
26127: LD_ADDR_OWVAR 65
26131: PUSH
26132: LD_INT 7
26134: ST_TO_ADDR
// end ;
26135: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26136: LD_EXP 55
26140: PUSH
26141: LD_EXP 62
26145: AND
26146: IFFALSE 26348
26148: GO 26150
26150: DISABLE
26151: LD_INT 0
26153: PPUSH
26154: PPUSH
26155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26156: LD_ADDR_VAR 0 3
26160: PUSH
26161: LD_INT 81
26163: PUSH
26164: LD_OWVAR 2
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 21
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PPUSH
26187: CALL_OW 69
26191: ST_TO_ADDR
// if not tmp then
26192: LD_VAR 0 3
26196: NOT
26197: IFFALSE 26201
// exit ;
26199: GO 26348
// if tmp > 5 then
26201: LD_VAR 0 3
26205: PUSH
26206: LD_INT 5
26208: GREATER
26209: IFFALSE 26221
// k := 5 else
26211: LD_ADDR_VAR 0 2
26215: PUSH
26216: LD_INT 5
26218: ST_TO_ADDR
26219: GO 26231
// k := tmp ;
26221: LD_ADDR_VAR 0 2
26225: PUSH
26226: LD_VAR 0 3
26230: ST_TO_ADDR
// for i := 1 to k do
26231: LD_ADDR_VAR 0 1
26235: PUSH
26236: DOUBLE
26237: LD_INT 1
26239: DEC
26240: ST_TO_ADDR
26241: LD_VAR 0 2
26245: PUSH
26246: FOR_TO
26247: IFFALSE 26346
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26249: LD_VAR 0 3
26253: PUSH
26254: LD_VAR 0 1
26258: ARRAY
26259: PPUSH
26260: LD_VAR 0 1
26264: PUSH
26265: LD_INT 4
26267: MOD
26268: PUSH
26269: LD_INT 1
26271: PLUS
26272: PPUSH
26273: CALL_OW 259
26277: PUSH
26278: LD_INT 10
26280: LESS
26281: IFFALSE 26344
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26283: LD_VAR 0 3
26287: PUSH
26288: LD_VAR 0 1
26292: ARRAY
26293: PPUSH
26294: LD_VAR 0 1
26298: PUSH
26299: LD_INT 4
26301: MOD
26302: PUSH
26303: LD_INT 1
26305: PLUS
26306: PPUSH
26307: LD_VAR 0 3
26311: PUSH
26312: LD_VAR 0 1
26316: ARRAY
26317: PPUSH
26318: LD_VAR 0 1
26322: PUSH
26323: LD_INT 4
26325: MOD
26326: PUSH
26327: LD_INT 1
26329: PLUS
26330: PPUSH
26331: CALL_OW 259
26335: PUSH
26336: LD_INT 1
26338: PLUS
26339: PPUSH
26340: CALL_OW 237
26344: GO 26246
26346: POP
26347: POP
// end ;
26348: PPOPN 3
26350: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26351: LD_EXP 55
26355: PUSH
26356: LD_EXP 63
26360: AND
26361: IFFALSE 26381
26363: GO 26365
26365: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26366: LD_INT 4
26368: PPUSH
26369: LD_OWVAR 2
26373: PPUSH
26374: LD_INT 0
26376: PPUSH
26377: CALL_OW 324
26381: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26382: LD_EXP 55
26386: PUSH
26387: LD_EXP 92
26391: AND
26392: IFFALSE 26412
26394: GO 26396
26396: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26397: LD_INT 19
26399: PPUSH
26400: LD_OWVAR 2
26404: PPUSH
26405: LD_INT 0
26407: PPUSH
26408: CALL_OW 324
26412: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26413: LD_EXP 55
26417: PUSH
26418: LD_EXP 64
26422: AND
26423: IFFALSE 26525
26425: GO 26427
26427: DISABLE
26428: LD_INT 0
26430: PPUSH
26431: PPUSH
// begin enable ;
26432: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26433: LD_ADDR_VAR 0 2
26437: PUSH
26438: LD_INT 22
26440: PUSH
26441: LD_OWVAR 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: LD_INT 34
26455: PUSH
26456: LD_INT 11
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 34
26465: PUSH
26466: LD_INT 30
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PPUSH
26482: CALL_OW 69
26486: ST_TO_ADDR
// if not tmp then
26487: LD_VAR 0 2
26491: NOT
26492: IFFALSE 26496
// exit ;
26494: GO 26525
// for i in tmp do
26496: LD_ADDR_VAR 0 1
26500: PUSH
26501: LD_VAR 0 2
26505: PUSH
26506: FOR_IN
26507: IFFALSE 26523
// begin SetLives ( i , 0 ) ;
26509: LD_VAR 0 1
26513: PPUSH
26514: LD_INT 0
26516: PPUSH
26517: CALL_OW 234
// end ;
26521: GO 26506
26523: POP
26524: POP
// end ;
26525: PPOPN 2
26527: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26528: LD_EXP 55
26532: PUSH
26533: LD_EXP 65
26537: AND
26538: IFFALSE 26558
26540: GO 26542
26542: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26543: LD_INT 32
26545: PPUSH
26546: LD_OWVAR 2
26550: PPUSH
26551: LD_INT 0
26553: PPUSH
26554: CALL_OW 324
26558: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26559: LD_EXP 55
26563: PUSH
26564: LD_EXP 66
26568: AND
26569: IFFALSE 26750
26571: GO 26573
26573: DISABLE
26574: LD_INT 0
26576: PPUSH
26577: PPUSH
26578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26579: LD_ADDR_VAR 0 2
26583: PUSH
26584: LD_INT 22
26586: PUSH
26587: LD_OWVAR 2
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 33
26598: PUSH
26599: LD_INT 3
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PPUSH
26610: CALL_OW 69
26614: ST_TO_ADDR
// if not tmp then
26615: LD_VAR 0 2
26619: NOT
26620: IFFALSE 26624
// exit ;
26622: GO 26750
// side := 0 ;
26624: LD_ADDR_VAR 0 3
26628: PUSH
26629: LD_INT 0
26631: ST_TO_ADDR
// for i := 1 to 8 do
26632: LD_ADDR_VAR 0 1
26636: PUSH
26637: DOUBLE
26638: LD_INT 1
26640: DEC
26641: ST_TO_ADDR
26642: LD_INT 8
26644: PUSH
26645: FOR_TO
26646: IFFALSE 26694
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26648: LD_OWVAR 2
26652: PUSH
26653: LD_VAR 0 1
26657: NONEQUAL
26658: PUSH
26659: LD_OWVAR 2
26663: PPUSH
26664: LD_VAR 0 1
26668: PPUSH
26669: CALL_OW 81
26673: PUSH
26674: LD_INT 2
26676: EQUAL
26677: AND
26678: IFFALSE 26692
// begin side := i ;
26680: LD_ADDR_VAR 0 3
26684: PUSH
26685: LD_VAR 0 1
26689: ST_TO_ADDR
// break ;
26690: GO 26694
// end ;
26692: GO 26645
26694: POP
26695: POP
// if not side then
26696: LD_VAR 0 3
26700: NOT
26701: IFFALSE 26705
// exit ;
26703: GO 26750
// for i := 1 to tmp do
26705: LD_ADDR_VAR 0 1
26709: PUSH
26710: DOUBLE
26711: LD_INT 1
26713: DEC
26714: ST_TO_ADDR
26715: LD_VAR 0 2
26719: PUSH
26720: FOR_TO
26721: IFFALSE 26748
// if Prob ( 60 ) then
26723: LD_INT 60
26725: PPUSH
26726: CALL_OW 13
26730: IFFALSE 26746
// SetSide ( i , side ) ;
26732: LD_VAR 0 1
26736: PPUSH
26737: LD_VAR 0 3
26741: PPUSH
26742: CALL_OW 235
26746: GO 26720
26748: POP
26749: POP
// end ;
26750: PPOPN 3
26752: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26753: LD_EXP 55
26757: PUSH
26758: LD_EXP 68
26762: AND
26763: IFFALSE 26882
26765: GO 26767
26767: DISABLE
26768: LD_INT 0
26770: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26771: LD_ADDR_VAR 0 1
26775: PUSH
26776: LD_INT 22
26778: PUSH
26779: LD_OWVAR 2
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 21
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: LD_INT 23
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: LIST
26819: PPUSH
26820: CALL_OW 69
26824: PUSH
26825: FOR_IN
26826: IFFALSE 26880
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 257
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 2
26843: PUSH
26844: LD_INT 3
26846: PUSH
26847: LD_INT 4
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: IN
26856: IFFALSE 26878
// SetClass ( un , rand ( 1 , 4 ) ) ;
26858: LD_VAR 0 1
26862: PPUSH
26863: LD_INT 1
26865: PPUSH
26866: LD_INT 4
26868: PPUSH
26869: CALL_OW 12
26873: PPUSH
26874: CALL_OW 336
26878: GO 26825
26880: POP
26881: POP
// end ;
26882: PPOPN 1
26884: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26885: LD_EXP 55
26889: PUSH
26890: LD_EXP 67
26894: AND
26895: IFFALSE 26974
26897: GO 26899
26899: DISABLE
26900: LD_INT 0
26902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26903: LD_ADDR_VAR 0 1
26907: PUSH
26908: LD_INT 22
26910: PUSH
26911: LD_OWVAR 2
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 21
26922: PUSH
26923: LD_INT 3
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PPUSH
26934: CALL_OW 69
26938: ST_TO_ADDR
// if not tmp then
26939: LD_VAR 0 1
26943: NOT
26944: IFFALSE 26948
// exit ;
26946: GO 26974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26948: LD_VAR 0 1
26952: PUSH
26953: LD_INT 1
26955: PPUSH
26956: LD_VAR 0 1
26960: PPUSH
26961: CALL_OW 12
26965: ARRAY
26966: PPUSH
26967: LD_INT 100
26969: PPUSH
26970: CALL_OW 234
// end ;
26974: PPOPN 1
26976: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26977: LD_EXP 55
26981: PUSH
26982: LD_EXP 69
26986: AND
26987: IFFALSE 27085
26989: GO 26991
26991: DISABLE
26992: LD_INT 0
26994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26995: LD_ADDR_VAR 0 1
26999: PUSH
27000: LD_INT 22
27002: PUSH
27003: LD_OWVAR 2
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 21
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PPUSH
27026: CALL_OW 69
27030: ST_TO_ADDR
// if not tmp then
27031: LD_VAR 0 1
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27085
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27040: LD_VAR 0 1
27044: PUSH
27045: LD_INT 1
27047: PPUSH
27048: LD_VAR 0 1
27052: PPUSH
27053: CALL_OW 12
27057: ARRAY
27058: PPUSH
27059: LD_INT 1
27061: PPUSH
27062: LD_INT 4
27064: PPUSH
27065: CALL_OW 12
27069: PPUSH
27070: LD_INT 3000
27072: PPUSH
27073: LD_INT 9000
27075: PPUSH
27076: CALL_OW 12
27080: PPUSH
27081: CALL_OW 492
// end ;
27085: PPOPN 1
27087: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27088: LD_EXP 55
27092: PUSH
27093: LD_EXP 70
27097: AND
27098: IFFALSE 27118
27100: GO 27102
27102: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27103: LD_INT 1
27105: PPUSH
27106: LD_OWVAR 2
27110: PPUSH
27111: LD_INT 0
27113: PPUSH
27114: CALL_OW 324
27118: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27119: LD_EXP 55
27123: PUSH
27124: LD_EXP 71
27128: AND
27129: IFFALSE 27212
27131: GO 27133
27133: DISABLE
27134: LD_INT 0
27136: PPUSH
27137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27138: LD_ADDR_VAR 0 2
27142: PUSH
27143: LD_INT 22
27145: PUSH
27146: LD_OWVAR 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 21
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PPUSH
27169: CALL_OW 69
27173: ST_TO_ADDR
// if not tmp then
27174: LD_VAR 0 2
27178: NOT
27179: IFFALSE 27183
// exit ;
27181: GO 27212
// for i in tmp do
27183: LD_ADDR_VAR 0 1
27187: PUSH
27188: LD_VAR 0 2
27192: PUSH
27193: FOR_IN
27194: IFFALSE 27210
// SetBLevel ( i , 10 ) ;
27196: LD_VAR 0 1
27200: PPUSH
27201: LD_INT 10
27203: PPUSH
27204: CALL_OW 241
27208: GO 27193
27210: POP
27211: POP
// end ;
27212: PPOPN 2
27214: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27215: LD_EXP 55
27219: PUSH
27220: LD_EXP 72
27224: AND
27225: IFFALSE 27336
27227: GO 27229
27229: DISABLE
27230: LD_INT 0
27232: PPUSH
27233: PPUSH
27234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_INT 22
27242: PUSH
27243: LD_OWVAR 2
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 25
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PPUSH
27266: CALL_OW 69
27270: ST_TO_ADDR
// if not tmp then
27271: LD_VAR 0 3
27275: NOT
27276: IFFALSE 27280
// exit ;
27278: GO 27336
// un := tmp [ rand ( 1 , tmp ) ] ;
27280: LD_ADDR_VAR 0 2
27284: PUSH
27285: LD_VAR 0 3
27289: PUSH
27290: LD_INT 1
27292: PPUSH
27293: LD_VAR 0 3
27297: PPUSH
27298: CALL_OW 12
27302: ARRAY
27303: ST_TO_ADDR
// if Crawls ( un ) then
27304: LD_VAR 0 2
27308: PPUSH
27309: CALL_OW 318
27313: IFFALSE 27324
// ComWalk ( un ) ;
27315: LD_VAR 0 2
27319: PPUSH
27320: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27324: LD_VAR 0 2
27328: PPUSH
27329: LD_INT 5
27331: PPUSH
27332: CALL_OW 336
// end ;
27336: PPOPN 3
27338: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27339: LD_EXP 55
27343: PUSH
27344: LD_EXP 73
27348: AND
27349: PUSH
27350: LD_OWVAR 67
27354: PUSH
27355: LD_INT 4
27357: LESS
27358: AND
27359: IFFALSE 27378
27361: GO 27363
27363: DISABLE
// begin Difficulty := Difficulty + 1 ;
27364: LD_ADDR_OWVAR 67
27368: PUSH
27369: LD_OWVAR 67
27373: PUSH
27374: LD_INT 1
27376: PLUS
27377: ST_TO_ADDR
// end ;
27378: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27379: LD_EXP 55
27383: PUSH
27384: LD_EXP 74
27388: AND
27389: IFFALSE 27492
27391: GO 27393
27393: DISABLE
27394: LD_INT 0
27396: PPUSH
// begin for i := 1 to 5 do
27397: LD_ADDR_VAR 0 1
27401: PUSH
27402: DOUBLE
27403: LD_INT 1
27405: DEC
27406: ST_TO_ADDR
27407: LD_INT 5
27409: PUSH
27410: FOR_TO
27411: IFFALSE 27490
// begin uc_nation := nation_nature ;
27413: LD_ADDR_OWVAR 21
27417: PUSH
27418: LD_INT 0
27420: ST_TO_ADDR
// uc_side := 0 ;
27421: LD_ADDR_OWVAR 20
27425: PUSH
27426: LD_INT 0
27428: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27429: LD_ADDR_OWVAR 29
27433: PUSH
27434: LD_INT 12
27436: PUSH
27437: LD_INT 12
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: ST_TO_ADDR
// hc_agressivity := 20 ;
27444: LD_ADDR_OWVAR 35
27448: PUSH
27449: LD_INT 20
27451: ST_TO_ADDR
// hc_class := class_tiger ;
27452: LD_ADDR_OWVAR 28
27456: PUSH
27457: LD_INT 14
27459: ST_TO_ADDR
// hc_gallery :=  ;
27460: LD_ADDR_OWVAR 33
27464: PUSH
27465: LD_STRING 
27467: ST_TO_ADDR
// hc_name :=  ;
27468: LD_ADDR_OWVAR 26
27472: PUSH
27473: LD_STRING 
27475: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27476: CALL_OW 44
27480: PPUSH
27481: LD_INT 0
27483: PPUSH
27484: CALL_OW 51
// end ;
27488: GO 27410
27490: POP
27491: POP
// end ;
27492: PPOPN 1
27494: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27495: LD_EXP 55
27499: PUSH
27500: LD_EXP 75
27504: AND
27505: IFFALSE 27514
27507: GO 27509
27509: DISABLE
// StreamSibBomb ;
27510: CALL 27515 0 0
27514: END
// export function StreamSibBomb ; var i , x , y ; begin
27515: LD_INT 0
27517: PPUSH
27518: PPUSH
27519: PPUSH
27520: PPUSH
// result := false ;
27521: LD_ADDR_VAR 0 1
27525: PUSH
27526: LD_INT 0
27528: ST_TO_ADDR
// for i := 1 to 16 do
27529: LD_ADDR_VAR 0 2
27533: PUSH
27534: DOUBLE
27535: LD_INT 1
27537: DEC
27538: ST_TO_ADDR
27539: LD_INT 16
27541: PUSH
27542: FOR_TO
27543: IFFALSE 27742
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_INT 10
27552: PUSH
27553: LD_INT 20
27555: PUSH
27556: LD_INT 30
27558: PUSH
27559: LD_INT 40
27561: PUSH
27562: LD_INT 50
27564: PUSH
27565: LD_INT 60
27567: PUSH
27568: LD_INT 70
27570: PUSH
27571: LD_INT 80
27573: PUSH
27574: LD_INT 90
27576: PUSH
27577: LD_INT 100
27579: PUSH
27580: LD_INT 110
27582: PUSH
27583: LD_INT 120
27585: PUSH
27586: LD_INT 130
27588: PUSH
27589: LD_INT 140
27591: PUSH
27592: LD_INT 150
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: PPUSH
27615: LD_INT 15
27617: PPUSH
27618: CALL_OW 12
27622: ARRAY
27623: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27624: LD_ADDR_VAR 0 4
27628: PUSH
27629: LD_INT 10
27631: PUSH
27632: LD_INT 20
27634: PUSH
27635: LD_INT 30
27637: PUSH
27638: LD_INT 40
27640: PUSH
27641: LD_INT 50
27643: PUSH
27644: LD_INT 60
27646: PUSH
27647: LD_INT 70
27649: PUSH
27650: LD_INT 80
27652: PUSH
27653: LD_INT 90
27655: PUSH
27656: LD_INT 100
27658: PUSH
27659: LD_INT 110
27661: PUSH
27662: LD_INT 120
27664: PUSH
27665: LD_INT 130
27667: PUSH
27668: LD_INT 140
27670: PUSH
27671: LD_INT 150
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: PPUSH
27694: LD_INT 15
27696: PPUSH
27697: CALL_OW 12
27701: ARRAY
27702: ST_TO_ADDR
// if ValidHex ( x , y ) then
27703: LD_VAR 0 3
27707: PPUSH
27708: LD_VAR 0 4
27712: PPUSH
27713: CALL_OW 488
27717: IFFALSE 27740
// begin result := [ x , y ] ;
27719: LD_ADDR_VAR 0 1
27723: PUSH
27724: LD_VAR 0 3
27728: PUSH
27729: LD_VAR 0 4
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// break ;
27738: GO 27742
// end ; end ;
27740: GO 27542
27742: POP
27743: POP
// if result then
27744: LD_VAR 0 1
27748: IFFALSE 27808
// begin ToLua ( playSibBomb() ) ;
27750: LD_STRING playSibBomb()
27752: PPUSH
27753: CALL_OW 559
// wait ( 0 0$14 ) ;
27757: LD_INT 490
27759: PPUSH
27760: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27764: LD_VAR 0 1
27768: PUSH
27769: LD_INT 1
27771: ARRAY
27772: PPUSH
27773: LD_VAR 0 1
27777: PUSH
27778: LD_INT 2
27780: ARRAY
27781: PPUSH
27782: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27786: LD_VAR 0 1
27790: PUSH
27791: LD_INT 1
27793: ARRAY
27794: PPUSH
27795: LD_VAR 0 1
27799: PUSH
27800: LD_INT 2
27802: ARRAY
27803: PPUSH
27804: CALL_OW 429
// end ; end ;
27808: LD_VAR 0 1
27812: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27813: LD_EXP 55
27817: PUSH
27818: LD_EXP 77
27822: AND
27823: IFFALSE 27835
27825: GO 27827
27827: DISABLE
// YouLost (  ) ;
27828: LD_STRING 
27830: PPUSH
27831: CALL_OW 104
27835: END
// every 0 0$1 trigger StreamModeActive and sFog do
27836: LD_EXP 55
27840: PUSH
27841: LD_EXP 76
27845: AND
27846: IFFALSE 27860
27848: GO 27850
27850: DISABLE
// FogOff ( your_side ) ;
27851: LD_OWVAR 2
27855: PPUSH
27856: CALL_OW 344
27860: END
// every 0 0$1 trigger StreamModeActive and sSun do
27861: LD_EXP 55
27865: PUSH
27866: LD_EXP 78
27870: AND
27871: IFFALSE 27899
27873: GO 27875
27875: DISABLE
// begin solar_recharge_percent := 0 ;
27876: LD_ADDR_OWVAR 79
27880: PUSH
27881: LD_INT 0
27883: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27884: LD_INT 10500
27886: PPUSH
27887: CALL_OW 67
// solar_recharge_percent := 100 ;
27891: LD_ADDR_OWVAR 79
27895: PUSH
27896: LD_INT 100
27898: ST_TO_ADDR
// end ;
27899: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27900: LD_EXP 55
27904: PUSH
27905: LD_EXP 79
27909: AND
27910: IFFALSE 28149
27912: GO 27914
27914: DISABLE
27915: LD_INT 0
27917: PPUSH
27918: PPUSH
27919: PPUSH
// begin tmp := [ ] ;
27920: LD_ADDR_VAR 0 3
27924: PUSH
27925: EMPTY
27926: ST_TO_ADDR
// for i := 1 to 6 do
27927: LD_ADDR_VAR 0 1
27931: PUSH
27932: DOUBLE
27933: LD_INT 1
27935: DEC
27936: ST_TO_ADDR
27937: LD_INT 6
27939: PUSH
27940: FOR_TO
27941: IFFALSE 28046
// begin uc_nation := nation_nature ;
27943: LD_ADDR_OWVAR 21
27947: PUSH
27948: LD_INT 0
27950: ST_TO_ADDR
// uc_side := 0 ;
27951: LD_ADDR_OWVAR 20
27955: PUSH
27956: LD_INT 0
27958: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27959: LD_ADDR_OWVAR 29
27963: PUSH
27964: LD_INT 12
27966: PUSH
27967: LD_INT 12
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// hc_agressivity := 20 ;
27974: LD_ADDR_OWVAR 35
27978: PUSH
27979: LD_INT 20
27981: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27982: LD_ADDR_OWVAR 28
27986: PUSH
27987: LD_INT 17
27989: ST_TO_ADDR
// hc_gallery :=  ;
27990: LD_ADDR_OWVAR 33
27994: PUSH
27995: LD_STRING 
27997: ST_TO_ADDR
// hc_name :=  ;
27998: LD_ADDR_OWVAR 26
28002: PUSH
28003: LD_STRING 
28005: ST_TO_ADDR
// un := CreateHuman ;
28006: LD_ADDR_VAR 0 2
28010: PUSH
28011: CALL_OW 44
28015: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28016: LD_VAR 0 2
28020: PPUSH
28021: LD_INT 1
28023: PPUSH
28024: CALL_OW 51
// tmp := tmp ^ un ;
28028: LD_ADDR_VAR 0 3
28032: PUSH
28033: LD_VAR 0 3
28037: PUSH
28038: LD_VAR 0 2
28042: ADD
28043: ST_TO_ADDR
// end ;
28044: GO 27940
28046: POP
28047: POP
// repeat wait ( 0 0$1 ) ;
28048: LD_INT 35
28050: PPUSH
28051: CALL_OW 67
// for un in tmp do
28055: LD_ADDR_VAR 0 2
28059: PUSH
28060: LD_VAR 0 3
28064: PUSH
28065: FOR_IN
28066: IFFALSE 28140
// begin if IsDead ( un ) then
28068: LD_VAR 0 2
28072: PPUSH
28073: CALL_OW 301
28077: IFFALSE 28097
// begin tmp := tmp diff un ;
28079: LD_ADDR_VAR 0 3
28083: PUSH
28084: LD_VAR 0 3
28088: PUSH
28089: LD_VAR 0 2
28093: DIFF
28094: ST_TO_ADDR
// continue ;
28095: GO 28065
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28097: LD_VAR 0 2
28101: PPUSH
28102: LD_INT 3
28104: PUSH
28105: LD_INT 22
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PPUSH
28119: CALL_OW 69
28123: PPUSH
28124: LD_VAR 0 2
28128: PPUSH
28129: CALL_OW 74
28133: PPUSH
28134: CALL_OW 115
// end ;
28138: GO 28065
28140: POP
28141: POP
// until not tmp ;
28142: LD_VAR 0 3
28146: NOT
28147: IFFALSE 28048
// end ;
28149: PPOPN 3
28151: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28152: LD_EXP 55
28156: PUSH
28157: LD_EXP 80
28161: AND
28162: IFFALSE 28216
28164: GO 28166
28166: DISABLE
// begin ToLua ( displayTroll(); ) ;
28167: LD_STRING displayTroll();
28169: PPUSH
28170: CALL_OW 559
// wait ( 3 3$00 ) ;
28174: LD_INT 6300
28176: PPUSH
28177: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28181: LD_STRING hideTroll();
28183: PPUSH
28184: CALL_OW 559
// wait ( 1 1$00 ) ;
28188: LD_INT 2100
28190: PPUSH
28191: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28195: LD_STRING displayTroll();
28197: PPUSH
28198: CALL_OW 559
// wait ( 1 1$00 ) ;
28202: LD_INT 2100
28204: PPUSH
28205: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28209: LD_STRING hideTroll();
28211: PPUSH
28212: CALL_OW 559
// end ;
28216: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28217: LD_EXP 55
28221: PUSH
28222: LD_EXP 81
28226: AND
28227: IFFALSE 28290
28229: GO 28231
28231: DISABLE
28232: LD_INT 0
28234: PPUSH
// begin p := 0 ;
28235: LD_ADDR_VAR 0 1
28239: PUSH
28240: LD_INT 0
28242: ST_TO_ADDR
// repeat game_speed := 1 ;
28243: LD_ADDR_OWVAR 65
28247: PUSH
28248: LD_INT 1
28250: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28251: LD_INT 35
28253: PPUSH
28254: CALL_OW 67
// p := p + 1 ;
28258: LD_ADDR_VAR 0 1
28262: PUSH
28263: LD_VAR 0 1
28267: PUSH
28268: LD_INT 1
28270: PLUS
28271: ST_TO_ADDR
// until p >= 60 ;
28272: LD_VAR 0 1
28276: PUSH
28277: LD_INT 60
28279: GREATEREQUAL
28280: IFFALSE 28243
// game_speed := 4 ;
28282: LD_ADDR_OWVAR 65
28286: PUSH
28287: LD_INT 4
28289: ST_TO_ADDR
// end ;
28290: PPOPN 1
28292: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28293: LD_EXP 55
28297: PUSH
28298: LD_EXP 82
28302: AND
28303: IFFALSE 28449
28305: GO 28307
28307: DISABLE
28308: LD_INT 0
28310: PPUSH
28311: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28312: LD_ADDR_VAR 0 1
28316: PUSH
28317: LD_INT 22
28319: PUSH
28320: LD_OWVAR 2
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: LD_INT 30
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 30
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: ST_TO_ADDR
// if not depot then
28366: LD_VAR 0 1
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 28449
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28375: LD_ADDR_VAR 0 2
28379: PUSH
28380: LD_VAR 0 1
28384: PUSH
28385: LD_INT 1
28387: PPUSH
28388: LD_VAR 0 1
28392: PPUSH
28393: CALL_OW 12
28397: ARRAY
28398: PPUSH
28399: CALL_OW 274
28403: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28404: LD_VAR 0 2
28408: PPUSH
28409: LD_INT 1
28411: PPUSH
28412: LD_INT 0
28414: PPUSH
28415: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28419: LD_VAR 0 2
28423: PPUSH
28424: LD_INT 2
28426: PPUSH
28427: LD_INT 0
28429: PPUSH
28430: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28434: LD_VAR 0 2
28438: PPUSH
28439: LD_INT 3
28441: PPUSH
28442: LD_INT 0
28444: PPUSH
28445: CALL_OW 277
// end ;
28449: PPOPN 2
28451: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28452: LD_EXP 55
28456: PUSH
28457: LD_EXP 83
28461: AND
28462: IFFALSE 28559
28464: GO 28466
28466: DISABLE
28467: LD_INT 0
28469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28470: LD_ADDR_VAR 0 1
28474: PUSH
28475: LD_INT 22
28477: PUSH
28478: LD_OWVAR 2
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 21
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: LD_INT 23
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: PPUSH
28519: CALL_OW 69
28523: ST_TO_ADDR
// if not tmp then
28524: LD_VAR 0 1
28528: NOT
28529: IFFALSE 28533
// exit ;
28531: GO 28559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28533: LD_VAR 0 1
28537: PUSH
28538: LD_INT 1
28540: PPUSH
28541: LD_VAR 0 1
28545: PPUSH
28546: CALL_OW 12
28550: ARRAY
28551: PPUSH
28552: LD_INT 200
28554: PPUSH
28555: CALL_OW 234
// end ;
28559: PPOPN 1
28561: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28562: LD_EXP 55
28566: PUSH
28567: LD_EXP 84
28571: AND
28572: IFFALSE 28651
28574: GO 28576
28576: DISABLE
28577: LD_INT 0
28579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28580: LD_ADDR_VAR 0 1
28584: PUSH
28585: LD_INT 22
28587: PUSH
28588: LD_OWVAR 2
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 21
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PPUSH
28611: CALL_OW 69
28615: ST_TO_ADDR
// if not tmp then
28616: LD_VAR 0 1
28620: NOT
28621: IFFALSE 28625
// exit ;
28623: GO 28651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28625: LD_VAR 0 1
28629: PUSH
28630: LD_INT 1
28632: PPUSH
28633: LD_VAR 0 1
28637: PPUSH
28638: CALL_OW 12
28642: ARRAY
28643: PPUSH
28644: LD_INT 60
28646: PPUSH
28647: CALL_OW 234
// end ;
28651: PPOPN 1
28653: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28654: LD_EXP 55
28658: PUSH
28659: LD_EXP 85
28663: AND
28664: IFFALSE 28763
28666: GO 28668
28668: DISABLE
28669: LD_INT 0
28671: PPUSH
28672: PPUSH
// begin enable ;
28673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28674: LD_ADDR_VAR 0 1
28678: PUSH
28679: LD_INT 22
28681: PUSH
28682: LD_OWVAR 2
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 61
28693: PUSH
28694: EMPTY
28695: LIST
28696: PUSH
28697: LD_INT 33
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: LIST
28711: PPUSH
28712: CALL_OW 69
28716: ST_TO_ADDR
// if not tmp then
28717: LD_VAR 0 1
28721: NOT
28722: IFFALSE 28726
// exit ;
28724: GO 28763
// for i in tmp do
28726: LD_ADDR_VAR 0 2
28730: PUSH
28731: LD_VAR 0 1
28735: PUSH
28736: FOR_IN
28737: IFFALSE 28761
// if IsControledBy ( i ) then
28739: LD_VAR 0 2
28743: PPUSH
28744: CALL_OW 312
28748: IFFALSE 28759
// ComUnlink ( i ) ;
28750: LD_VAR 0 2
28754: PPUSH
28755: CALL_OW 136
28759: GO 28736
28761: POP
28762: POP
// end ;
28763: PPOPN 2
28765: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28766: LD_EXP 55
28770: PUSH
28771: LD_EXP 86
28775: AND
28776: IFFALSE 28916
28778: GO 28780
28780: DISABLE
28781: LD_INT 0
28783: PPUSH
28784: PPUSH
// begin ToLua ( displayPowell(); ) ;
28785: LD_STRING displayPowell();
28787: PPUSH
28788: CALL_OW 559
// uc_side := 0 ;
28792: LD_ADDR_OWVAR 20
28796: PUSH
28797: LD_INT 0
28799: ST_TO_ADDR
// uc_nation := 2 ;
28800: LD_ADDR_OWVAR 21
28804: PUSH
28805: LD_INT 2
28807: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28808: LD_ADDR_OWVAR 37
28812: PUSH
28813: LD_INT 14
28815: ST_TO_ADDR
// vc_engine := engine_siberite ;
28816: LD_ADDR_OWVAR 39
28820: PUSH
28821: LD_INT 3
28823: ST_TO_ADDR
// vc_control := control_apeman ;
28824: LD_ADDR_OWVAR 38
28828: PUSH
28829: LD_INT 5
28831: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28832: LD_ADDR_OWVAR 40
28836: PUSH
28837: LD_INT 29
28839: ST_TO_ADDR
// un := CreateVehicle ;
28840: LD_ADDR_VAR 0 2
28844: PUSH
28845: CALL_OW 45
28849: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28850: LD_VAR 0 2
28854: PPUSH
28855: LD_INT 1
28857: PPUSH
28858: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28862: LD_INT 35
28864: PPUSH
28865: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28869: LD_VAR 0 2
28873: PPUSH
28874: LD_INT 22
28876: PUSH
28877: LD_OWVAR 2
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PPUSH
28886: CALL_OW 69
28890: PPUSH
28891: LD_VAR 0 2
28895: PPUSH
28896: CALL_OW 74
28900: PPUSH
28901: CALL_OW 115
// until IsDead ( un ) ;
28905: LD_VAR 0 2
28909: PPUSH
28910: CALL_OW 301
28914: IFFALSE 28862
// end ;
28916: PPOPN 2
28918: END
// every 0 0$1 trigger StreamModeActive and sStu do
28919: LD_EXP 55
28923: PUSH
28924: LD_EXP 94
28928: AND
28929: IFFALSE 28945
28931: GO 28933
28933: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28934: LD_STRING displayStucuk();
28936: PPUSH
28937: CALL_OW 559
// ResetFog ;
28941: CALL_OW 335
// end ;
28945: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28946: LD_EXP 55
28950: PUSH
28951: LD_EXP 87
28955: AND
28956: IFFALSE 29097
28958: GO 28960
28960: DISABLE
28961: LD_INT 0
28963: PPUSH
28964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_INT 22
28972: PUSH
28973: LD_OWVAR 2
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 21
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PPUSH
28996: CALL_OW 69
29000: ST_TO_ADDR
// if not tmp then
29001: LD_VAR 0 2
29005: NOT
29006: IFFALSE 29010
// exit ;
29008: GO 29097
// un := tmp [ rand ( 1 , tmp ) ] ;
29010: LD_ADDR_VAR 0 1
29014: PUSH
29015: LD_VAR 0 2
29019: PUSH
29020: LD_INT 1
29022: PPUSH
29023: LD_VAR 0 2
29027: PPUSH
29028: CALL_OW 12
29032: ARRAY
29033: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29034: LD_VAR 0 1
29038: PPUSH
29039: LD_INT 0
29041: PPUSH
29042: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29046: LD_VAR 0 1
29050: PPUSH
29051: LD_OWVAR 3
29055: PUSH
29056: LD_VAR 0 1
29060: DIFF
29061: PPUSH
29062: LD_VAR 0 1
29066: PPUSH
29067: CALL_OW 74
29071: PPUSH
29072: CALL_OW 115
// wait ( 0 0$20 ) ;
29076: LD_INT 700
29078: PPUSH
29079: CALL_OW 67
// SetSide ( un , your_side ) ;
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_OWVAR 2
29092: PPUSH
29093: CALL_OW 235
// end ;
29097: PPOPN 2
29099: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29100: LD_EXP 55
29104: PUSH
29105: LD_EXP 88
29109: AND
29110: IFFALSE 29216
29112: GO 29114
29114: DISABLE
29115: LD_INT 0
29117: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29118: LD_ADDR_VAR 0 1
29122: PUSH
29123: LD_INT 22
29125: PUSH
29126: LD_OWVAR 2
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 2
29137: PUSH
29138: LD_INT 30
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 30
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PPUSH
29167: CALL_OW 69
29171: ST_TO_ADDR
// if not depot then
29172: LD_VAR 0 1
29176: NOT
29177: IFFALSE 29181
// exit ;
29179: GO 29216
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29181: LD_VAR 0 1
29185: PUSH
29186: LD_INT 1
29188: ARRAY
29189: PPUSH
29190: CALL_OW 250
29194: PPUSH
29195: LD_VAR 0 1
29199: PUSH
29200: LD_INT 1
29202: ARRAY
29203: PPUSH
29204: CALL_OW 251
29208: PPUSH
29209: LD_INT 70
29211: PPUSH
29212: CALL_OW 495
// end ;
29216: PPOPN 1
29218: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29219: LD_EXP 55
29223: PUSH
29224: LD_EXP 89
29228: AND
29229: IFFALSE 29440
29231: GO 29233
29233: DISABLE
29234: LD_INT 0
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29241: LD_ADDR_VAR 0 5
29245: PUSH
29246: LD_INT 22
29248: PUSH
29249: LD_OWVAR 2
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 21
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PPUSH
29272: CALL_OW 69
29276: ST_TO_ADDR
// if not tmp then
29277: LD_VAR 0 5
29281: NOT
29282: IFFALSE 29286
// exit ;
29284: GO 29440
// for i in tmp do
29286: LD_ADDR_VAR 0 1
29290: PUSH
29291: LD_VAR 0 5
29295: PUSH
29296: FOR_IN
29297: IFFALSE 29438
// begin d := rand ( 0 , 5 ) ;
29299: LD_ADDR_VAR 0 4
29303: PUSH
29304: LD_INT 0
29306: PPUSH
29307: LD_INT 5
29309: PPUSH
29310: CALL_OW 12
29314: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29315: LD_ADDR_VAR 0 2
29319: PUSH
29320: LD_VAR 0 1
29324: PPUSH
29325: CALL_OW 250
29329: PPUSH
29330: LD_VAR 0 4
29334: PPUSH
29335: LD_INT 3
29337: PPUSH
29338: LD_INT 12
29340: PPUSH
29341: CALL_OW 12
29345: PPUSH
29346: CALL_OW 272
29350: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29351: LD_ADDR_VAR 0 3
29355: PUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: CALL_OW 251
29365: PPUSH
29366: LD_VAR 0 4
29370: PPUSH
29371: LD_INT 3
29373: PPUSH
29374: LD_INT 12
29376: PPUSH
29377: CALL_OW 12
29381: PPUSH
29382: CALL_OW 273
29386: ST_TO_ADDR
// if ValidHex ( x , y ) then
29387: LD_VAR 0 2
29391: PPUSH
29392: LD_VAR 0 3
29396: PPUSH
29397: CALL_OW 488
29401: IFFALSE 29436
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29403: LD_VAR 0 1
29407: PPUSH
29408: LD_VAR 0 2
29412: PPUSH
29413: LD_VAR 0 3
29417: PPUSH
29418: LD_INT 3
29420: PPUSH
29421: LD_INT 6
29423: PPUSH
29424: CALL_OW 12
29428: PPUSH
29429: LD_INT 1
29431: PPUSH
29432: CALL_OW 483
// end ;
29436: GO 29296
29438: POP
29439: POP
// end ;
29440: PPOPN 5
29442: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29443: LD_EXP 55
29447: PUSH
29448: LD_EXP 90
29452: AND
29453: IFFALSE 29547
29455: GO 29457
29457: DISABLE
29458: LD_INT 0
29460: PPUSH
29461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29462: LD_ADDR_VAR 0 2
29466: PUSH
29467: LD_INT 22
29469: PUSH
29470: LD_OWVAR 2
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 32
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 21
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: PPUSH
29504: CALL_OW 69
29508: ST_TO_ADDR
// if not tmp then
29509: LD_VAR 0 2
29513: NOT
29514: IFFALSE 29518
// exit ;
29516: GO 29547
// for i in tmp do
29518: LD_ADDR_VAR 0 1
29522: PUSH
29523: LD_VAR 0 2
29527: PUSH
29528: FOR_IN
29529: IFFALSE 29545
// SetFuel ( i , 0 ) ;
29531: LD_VAR 0 1
29535: PPUSH
29536: LD_INT 0
29538: PPUSH
29539: CALL_OW 240
29543: GO 29528
29545: POP
29546: POP
// end ;
29547: PPOPN 2
29549: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29550: LD_EXP 55
29554: PUSH
29555: LD_EXP 91
29559: AND
29560: IFFALSE 29626
29562: GO 29564
29564: DISABLE
29565: LD_INT 0
29567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29568: LD_ADDR_VAR 0 1
29572: PUSH
29573: LD_INT 22
29575: PUSH
29576: LD_OWVAR 2
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 30
29587: PUSH
29588: LD_INT 29
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PPUSH
29599: CALL_OW 69
29603: ST_TO_ADDR
// if not tmp then
29604: LD_VAR 0 1
29608: NOT
29609: IFFALSE 29613
// exit ;
29611: GO 29626
// DestroyUnit ( tmp [ 1 ] ) ;
29613: LD_VAR 0 1
29617: PUSH
29618: LD_INT 1
29620: ARRAY
29621: PPUSH
29622: CALL_OW 65
// end ;
29626: PPOPN 1
29628: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29629: LD_EXP 55
29633: PUSH
29634: LD_EXP 93
29638: AND
29639: IFFALSE 29768
29641: GO 29643
29643: DISABLE
29644: LD_INT 0
29646: PPUSH
// begin uc_side := 0 ;
29647: LD_ADDR_OWVAR 20
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// uc_nation := nation_arabian ;
29655: LD_ADDR_OWVAR 21
29659: PUSH
29660: LD_INT 2
29662: ST_TO_ADDR
// hc_gallery :=  ;
29663: LD_ADDR_OWVAR 33
29667: PUSH
29668: LD_STRING 
29670: ST_TO_ADDR
// hc_name :=  ;
29671: LD_ADDR_OWVAR 26
29675: PUSH
29676: LD_STRING 
29678: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29679: LD_INT 1
29681: PPUSH
29682: LD_INT 11
29684: PPUSH
29685: LD_INT 10
29687: PPUSH
29688: CALL_OW 380
// un := CreateHuman ;
29692: LD_ADDR_VAR 0 1
29696: PUSH
29697: CALL_OW 44
29701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29702: LD_VAR 0 1
29706: PPUSH
29707: LD_INT 1
29709: PPUSH
29710: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29714: LD_INT 35
29716: PPUSH
29717: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29721: LD_VAR 0 1
29725: PPUSH
29726: LD_INT 22
29728: PUSH
29729: LD_OWVAR 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PPUSH
29738: CALL_OW 69
29742: PPUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 74
29752: PPUSH
29753: CALL_OW 115
// until IsDead ( un ) ;
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL_OW 301
29766: IFFALSE 29714
// end ;
29768: PPOPN 1
29770: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29771: LD_EXP 55
29775: PUSH
29776: LD_EXP 95
29780: AND
29781: IFFALSE 29793
29783: GO 29785
29785: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29786: LD_STRING earthquake(getX(game), 0, 32)
29788: PPUSH
29789: CALL_OW 559
29793: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29794: LD_EXP 55
29798: PUSH
29799: LD_EXP 96
29803: AND
29804: IFFALSE 29895
29806: GO 29808
29808: DISABLE
29809: LD_INT 0
29811: PPUSH
// begin enable ;
29812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29813: LD_ADDR_VAR 0 1
29817: PUSH
29818: LD_INT 22
29820: PUSH
29821: LD_OWVAR 2
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 21
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 33
29842: PUSH
29843: LD_INT 3
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 69
29859: ST_TO_ADDR
// if not tmp then
29860: LD_VAR 0 1
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 29895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29869: LD_VAR 0 1
29873: PUSH
29874: LD_INT 1
29876: PPUSH
29877: LD_VAR 0 1
29881: PPUSH
29882: CALL_OW 12
29886: ARRAY
29887: PPUSH
29888: LD_INT 1
29890: PPUSH
29891: CALL_OW 234
// end ;
29895: PPOPN 1
29897: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29898: LD_EXP 55
29902: PUSH
29903: LD_EXP 97
29907: AND
29908: IFFALSE 30049
29910: GO 29912
29912: DISABLE
29913: LD_INT 0
29915: PPUSH
29916: PPUSH
29917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29918: LD_ADDR_VAR 0 3
29922: PUSH
29923: LD_INT 22
29925: PUSH
29926: LD_OWVAR 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 25
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PPUSH
29949: CALL_OW 69
29953: ST_TO_ADDR
// if not tmp then
29954: LD_VAR 0 3
29958: NOT
29959: IFFALSE 29963
// exit ;
29961: GO 30049
// un := tmp [ rand ( 1 , tmp ) ] ;
29963: LD_ADDR_VAR 0 2
29967: PUSH
29968: LD_VAR 0 3
29972: PUSH
29973: LD_INT 1
29975: PPUSH
29976: LD_VAR 0 3
29980: PPUSH
29981: CALL_OW 12
29985: ARRAY
29986: ST_TO_ADDR
// if Crawls ( un ) then
29987: LD_VAR 0 2
29991: PPUSH
29992: CALL_OW 318
29996: IFFALSE 30007
// ComWalk ( un ) ;
29998: LD_VAR 0 2
30002: PPUSH
30003: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30007: LD_VAR 0 2
30011: PPUSH
30012: LD_INT 9
30014: PPUSH
30015: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30019: LD_INT 28
30021: PPUSH
30022: LD_OWVAR 2
30026: PPUSH
30027: LD_INT 2
30029: PPUSH
30030: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30034: LD_INT 29
30036: PPUSH
30037: LD_OWVAR 2
30041: PPUSH
30042: LD_INT 2
30044: PPUSH
30045: CALL_OW 322
// end ;
30049: PPOPN 3
30051: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30052: LD_EXP 55
30056: PUSH
30057: LD_EXP 98
30061: AND
30062: IFFALSE 30173
30064: GO 30066
30066: DISABLE
30067: LD_INT 0
30069: PPUSH
30070: PPUSH
30071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_INT 22
30079: PUSH
30080: LD_OWVAR 2
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 25
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PPUSH
30103: CALL_OW 69
30107: ST_TO_ADDR
// if not tmp then
30108: LD_VAR 0 3
30112: NOT
30113: IFFALSE 30117
// exit ;
30115: GO 30173
// un := tmp [ rand ( 1 , tmp ) ] ;
30117: LD_ADDR_VAR 0 2
30121: PUSH
30122: LD_VAR 0 3
30126: PUSH
30127: LD_INT 1
30129: PPUSH
30130: LD_VAR 0 3
30134: PPUSH
30135: CALL_OW 12
30139: ARRAY
30140: ST_TO_ADDR
// if Crawls ( un ) then
30141: LD_VAR 0 2
30145: PPUSH
30146: CALL_OW 318
30150: IFFALSE 30161
// ComWalk ( un ) ;
30152: LD_VAR 0 2
30156: PPUSH
30157: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30161: LD_VAR 0 2
30165: PPUSH
30166: LD_INT 8
30168: PPUSH
30169: CALL_OW 336
// end ;
30173: PPOPN 3
30175: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30176: LD_EXP 55
30180: PUSH
30181: LD_EXP 99
30185: AND
30186: IFFALSE 30330
30188: GO 30190
30190: DISABLE
30191: LD_INT 0
30193: PPUSH
30194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30195: LD_ADDR_VAR 0 2
30199: PUSH
30200: LD_INT 22
30202: PUSH
30203: LD_OWVAR 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 21
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 34
30227: PUSH
30228: LD_INT 12
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 34
30237: PUSH
30238: LD_INT 51
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 34
30247: PUSH
30248: LD_INT 32
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: PPUSH
30266: CALL_OW 69
30270: ST_TO_ADDR
// if not tmp then
30271: LD_VAR 0 2
30275: NOT
30276: IFFALSE 30280
// exit ;
30278: GO 30330
// for i in tmp do
30280: LD_ADDR_VAR 0 1
30284: PUSH
30285: LD_VAR 0 2
30289: PUSH
30290: FOR_IN
30291: IFFALSE 30328
// if GetCargo ( i , mat_artifact ) = 0 then
30293: LD_VAR 0 1
30297: PPUSH
30298: LD_INT 4
30300: PPUSH
30301: CALL_OW 289
30305: PUSH
30306: LD_INT 0
30308: EQUAL
30309: IFFALSE 30326
// SetCargo ( i , mat_siberit , 100 ) ;
30311: LD_VAR 0 1
30315: PPUSH
30316: LD_INT 3
30318: PPUSH
30319: LD_INT 100
30321: PPUSH
30322: CALL_OW 290
30326: GO 30290
30328: POP
30329: POP
// end ;
30330: PPOPN 2
30332: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30333: LD_EXP 55
30337: PUSH
30338: LD_EXP 100
30342: AND
30343: IFFALSE 30526
30345: GO 30347
30347: DISABLE
30348: LD_INT 0
30350: PPUSH
30351: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30352: LD_ADDR_VAR 0 2
30356: PUSH
30357: LD_INT 22
30359: PUSH
30360: LD_OWVAR 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PPUSH
30369: CALL_OW 69
30373: ST_TO_ADDR
// if not tmp then
30374: LD_VAR 0 2
30378: NOT
30379: IFFALSE 30383
// exit ;
30381: GO 30526
// for i := 1 to 2 do
30383: LD_ADDR_VAR 0 1
30387: PUSH
30388: DOUBLE
30389: LD_INT 1
30391: DEC
30392: ST_TO_ADDR
30393: LD_INT 2
30395: PUSH
30396: FOR_TO
30397: IFFALSE 30524
// begin uc_side := your_side ;
30399: LD_ADDR_OWVAR 20
30403: PUSH
30404: LD_OWVAR 2
30408: ST_TO_ADDR
// uc_nation := nation_american ;
30409: LD_ADDR_OWVAR 21
30413: PUSH
30414: LD_INT 1
30416: ST_TO_ADDR
// vc_chassis := us_morphling ;
30417: LD_ADDR_OWVAR 37
30421: PUSH
30422: LD_INT 5
30424: ST_TO_ADDR
// vc_engine := engine_siberite ;
30425: LD_ADDR_OWVAR 39
30429: PUSH
30430: LD_INT 3
30432: ST_TO_ADDR
// vc_control := control_computer ;
30433: LD_ADDR_OWVAR 38
30437: PUSH
30438: LD_INT 3
30440: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30441: LD_ADDR_OWVAR 40
30445: PUSH
30446: LD_INT 10
30448: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30449: LD_VAR 0 2
30453: PUSH
30454: LD_INT 1
30456: ARRAY
30457: PPUSH
30458: CALL_OW 310
30462: NOT
30463: IFFALSE 30510
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30465: CALL_OW 45
30469: PPUSH
30470: LD_VAR 0 2
30474: PUSH
30475: LD_INT 1
30477: ARRAY
30478: PPUSH
30479: CALL_OW 250
30483: PPUSH
30484: LD_VAR 0 2
30488: PUSH
30489: LD_INT 1
30491: ARRAY
30492: PPUSH
30493: CALL_OW 251
30497: PPUSH
30498: LD_INT 12
30500: PPUSH
30501: LD_INT 1
30503: PPUSH
30504: CALL_OW 50
30508: GO 30522
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30510: CALL_OW 45
30514: PPUSH
30515: LD_INT 1
30517: PPUSH
30518: CALL_OW 51
// end ;
30522: GO 30396
30524: POP
30525: POP
// end ;
30526: PPOPN 2
30528: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30529: LD_EXP 55
30533: PUSH
30534: LD_EXP 101
30538: AND
30539: IFFALSE 30761
30541: GO 30543
30543: DISABLE
30544: LD_INT 0
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
30550: PPUSH
30551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30552: LD_ADDR_VAR 0 6
30556: PUSH
30557: LD_INT 22
30559: PUSH
30560: LD_OWVAR 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 21
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 3
30581: PUSH
30582: LD_INT 23
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: PPUSH
30601: CALL_OW 69
30605: ST_TO_ADDR
// if not tmp then
30606: LD_VAR 0 6
30610: NOT
30611: IFFALSE 30615
// exit ;
30613: GO 30761
// s1 := rand ( 1 , 4 ) ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_INT 1
30622: PPUSH
30623: LD_INT 4
30625: PPUSH
30626: CALL_OW 12
30630: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30631: LD_ADDR_VAR 0 4
30635: PUSH
30636: LD_VAR 0 6
30640: PUSH
30641: LD_INT 1
30643: ARRAY
30644: PPUSH
30645: LD_VAR 0 2
30649: PPUSH
30650: CALL_OW 259
30654: ST_TO_ADDR
// if s1 = 1 then
30655: LD_VAR 0 2
30659: PUSH
30660: LD_INT 1
30662: EQUAL
30663: IFFALSE 30683
// s2 := rand ( 2 , 4 ) else
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_INT 2
30672: PPUSH
30673: LD_INT 4
30675: PPUSH
30676: CALL_OW 12
30680: ST_TO_ADDR
30681: GO 30691
// s2 := 1 ;
30683: LD_ADDR_VAR 0 3
30687: PUSH
30688: LD_INT 1
30690: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30691: LD_ADDR_VAR 0 5
30695: PUSH
30696: LD_VAR 0 6
30700: PUSH
30701: LD_INT 1
30703: ARRAY
30704: PPUSH
30705: LD_VAR 0 3
30709: PPUSH
30710: CALL_OW 259
30714: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30715: LD_VAR 0 6
30719: PUSH
30720: LD_INT 1
30722: ARRAY
30723: PPUSH
30724: LD_VAR 0 2
30728: PPUSH
30729: LD_VAR 0 5
30733: PPUSH
30734: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30738: LD_VAR 0 6
30742: PUSH
30743: LD_INT 1
30745: ARRAY
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: LD_VAR 0 4
30756: PPUSH
30757: CALL_OW 237
// end ;
30761: PPOPN 6
30763: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30764: LD_EXP 55
30768: PUSH
30769: LD_EXP 102
30773: AND
30774: IFFALSE 30853
30776: GO 30778
30778: DISABLE
30779: LD_INT 0
30781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30782: LD_ADDR_VAR 0 1
30786: PUSH
30787: LD_INT 22
30789: PUSH
30790: LD_OWVAR 2
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 30
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PPUSH
30813: CALL_OW 69
30817: ST_TO_ADDR
// if not tmp then
30818: LD_VAR 0 1
30822: NOT
30823: IFFALSE 30827
// exit ;
30825: GO 30853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30827: LD_VAR 0 1
30831: PUSH
30832: LD_INT 1
30834: PPUSH
30835: LD_VAR 0 1
30839: PPUSH
30840: CALL_OW 12
30844: ARRAY
30845: PPUSH
30846: LD_INT 1
30848: PPUSH
30849: CALL_OW 234
// end ;
30853: PPOPN 1
30855: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30856: LD_EXP 55
30860: PUSH
30861: LD_EXP 103
30865: AND
30866: IFFALSE 30978
30868: GO 30870
30870: DISABLE
30871: LD_INT 0
30873: PPUSH
30874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30875: LD_ADDR_VAR 0 2
30879: PUSH
30880: LD_INT 22
30882: PUSH
30883: LD_OWVAR 2
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: LD_INT 30
30897: PUSH
30898: LD_INT 27
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 30
30907: PUSH
30908: LD_INT 26
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 30
30917: PUSH
30918: LD_INT 28
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PPUSH
30935: CALL_OW 69
30939: ST_TO_ADDR
// if not tmp then
30940: LD_VAR 0 2
30944: NOT
30945: IFFALSE 30949
// exit ;
30947: GO 30978
// for i in tmp do
30949: LD_ADDR_VAR 0 1
30953: PUSH
30954: LD_VAR 0 2
30958: PUSH
30959: FOR_IN
30960: IFFALSE 30976
// SetLives ( i , 1 ) ;
30962: LD_VAR 0 1
30966: PPUSH
30967: LD_INT 1
30969: PPUSH
30970: CALL_OW 234
30974: GO 30959
30976: POP
30977: POP
// end ;
30978: PPOPN 2
30980: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30981: LD_EXP 55
30985: PUSH
30986: LD_EXP 104
30990: AND
30991: IFFALSE 31278
30993: GO 30995
30995: DISABLE
30996: LD_INT 0
30998: PPUSH
30999: PPUSH
31000: PPUSH
// begin i := rand ( 1 , 7 ) ;
31001: LD_ADDR_VAR 0 1
31005: PUSH
31006: LD_INT 1
31008: PPUSH
31009: LD_INT 7
31011: PPUSH
31012: CALL_OW 12
31016: ST_TO_ADDR
// case i of 1 :
31017: LD_VAR 0 1
31021: PUSH
31022: LD_INT 1
31024: DOUBLE
31025: EQUAL
31026: IFTRUE 31030
31028: GO 31040
31030: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31031: LD_STRING earthquake(getX(game), 0, 32)
31033: PPUSH
31034: CALL_OW 559
31038: GO 31278
31040: LD_INT 2
31042: DOUBLE
31043: EQUAL
31044: IFTRUE 31048
31046: GO 31062
31048: POP
// begin ToLua ( displayStucuk(); ) ;
31049: LD_STRING displayStucuk();
31051: PPUSH
31052: CALL_OW 559
// ResetFog ;
31056: CALL_OW 335
// end ; 3 :
31060: GO 31278
31062: LD_INT 3
31064: DOUBLE
31065: EQUAL
31066: IFTRUE 31070
31068: GO 31174
31070: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31071: LD_ADDR_VAR 0 2
31075: PUSH
31076: LD_INT 22
31078: PUSH
31079: LD_OWVAR 2
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 25
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PPUSH
31102: CALL_OW 69
31106: ST_TO_ADDR
// if not tmp then
31107: LD_VAR 0 2
31111: NOT
31112: IFFALSE 31116
// exit ;
31114: GO 31278
// un := tmp [ rand ( 1 , tmp ) ] ;
31116: LD_ADDR_VAR 0 3
31120: PUSH
31121: LD_VAR 0 2
31125: PUSH
31126: LD_INT 1
31128: PPUSH
31129: LD_VAR 0 2
31133: PPUSH
31134: CALL_OW 12
31138: ARRAY
31139: ST_TO_ADDR
// if Crawls ( un ) then
31140: LD_VAR 0 3
31144: PPUSH
31145: CALL_OW 318
31149: IFFALSE 31160
// ComWalk ( un ) ;
31151: LD_VAR 0 3
31155: PPUSH
31156: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31160: LD_VAR 0 3
31164: PPUSH
31165: LD_INT 8
31167: PPUSH
31168: CALL_OW 336
// end ; 4 :
31172: GO 31278
31174: LD_INT 4
31176: DOUBLE
31177: EQUAL
31178: IFTRUE 31182
31180: GO 31256
31182: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31183: LD_ADDR_VAR 0 2
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_OWVAR 2
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 30
31202: PUSH
31203: LD_INT 29
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PPUSH
31214: CALL_OW 69
31218: ST_TO_ADDR
// if not tmp then
31219: LD_VAR 0 2
31223: NOT
31224: IFFALSE 31228
// exit ;
31226: GO 31278
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31228: LD_VAR 0 2
31232: PUSH
31233: LD_INT 1
31235: ARRAY
31236: PPUSH
31237: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31241: LD_VAR 0 2
31245: PUSH
31246: LD_INT 1
31248: ARRAY
31249: PPUSH
31250: CALL_OW 65
// end ; 5 .. 7 :
31254: GO 31278
31256: LD_INT 5
31258: DOUBLE
31259: GREATEREQUAL
31260: IFFALSE 31268
31262: LD_INT 7
31264: DOUBLE
31265: LESSEQUAL
31266: IFTRUE 31270
31268: GO 31277
31270: POP
// StreamSibBomb ; end ;
31271: CALL 27515 0 0
31275: GO 31278
31277: POP
// end ;
31278: PPOPN 3
31280: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31281: LD_EXP 55
31285: PUSH
31286: LD_EXP 105
31290: AND
31291: IFFALSE 31447
31293: GO 31295
31295: DISABLE
31296: LD_INT 0
31298: PPUSH
31299: PPUSH
31300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31301: LD_ADDR_VAR 0 2
31305: PUSH
31306: LD_INT 81
31308: PUSH
31309: LD_OWVAR 2
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 21
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 21
31333: PUSH
31334: LD_INT 2
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PPUSH
31350: CALL_OW 69
31354: ST_TO_ADDR
// if not tmp then
31355: LD_VAR 0 2
31359: NOT
31360: IFFALSE 31364
// exit ;
31362: GO 31447
// p := 0 ;
31364: LD_ADDR_VAR 0 3
31368: PUSH
31369: LD_INT 0
31371: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31372: LD_INT 35
31374: PPUSH
31375: CALL_OW 67
// p := p + 1 ;
31379: LD_ADDR_VAR 0 3
31383: PUSH
31384: LD_VAR 0 3
31388: PUSH
31389: LD_INT 1
31391: PLUS
31392: ST_TO_ADDR
// for i in tmp do
31393: LD_ADDR_VAR 0 1
31397: PUSH
31398: LD_VAR 0 2
31402: PUSH
31403: FOR_IN
31404: IFFALSE 31435
// if GetLives ( i ) < 1000 then
31406: LD_VAR 0 1
31410: PPUSH
31411: CALL_OW 256
31415: PUSH
31416: LD_INT 1000
31418: LESS
31419: IFFALSE 31433
// SetLives ( i , 1000 ) ;
31421: LD_VAR 0 1
31425: PPUSH
31426: LD_INT 1000
31428: PPUSH
31429: CALL_OW 234
31433: GO 31403
31435: POP
31436: POP
// until p > 20 ;
31437: LD_VAR 0 3
31441: PUSH
31442: LD_INT 20
31444: GREATER
31445: IFFALSE 31372
// end ;
31447: PPOPN 3
31449: END
// every 0 0$1 trigger StreamModeActive and sTime do
31450: LD_EXP 55
31454: PUSH
31455: LD_EXP 106
31459: AND
31460: IFFALSE 31495
31462: GO 31464
31464: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31465: LD_INT 28
31467: PPUSH
31468: LD_OWVAR 2
31472: PPUSH
31473: LD_INT 2
31475: PPUSH
31476: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31480: LD_INT 30
31482: PPUSH
31483: LD_OWVAR 2
31487: PPUSH
31488: LD_INT 2
31490: PPUSH
31491: CALL_OW 322
// end ;
31495: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31496: LD_EXP 55
31500: PUSH
31501: LD_EXP 107
31505: AND
31506: IFFALSE 31627
31508: GO 31510
31510: DISABLE
31511: LD_INT 0
31513: PPUSH
31514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31515: LD_ADDR_VAR 0 2
31519: PUSH
31520: LD_INT 22
31522: PUSH
31523: LD_OWVAR 2
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 21
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: LD_INT 23
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: LIST
31563: PPUSH
31564: CALL_OW 69
31568: ST_TO_ADDR
// if not tmp then
31569: LD_VAR 0 2
31573: NOT
31574: IFFALSE 31578
// exit ;
31576: GO 31627
// for i in tmp do
31578: LD_ADDR_VAR 0 1
31582: PUSH
31583: LD_VAR 0 2
31587: PUSH
31588: FOR_IN
31589: IFFALSE 31625
// begin if Crawls ( i ) then
31591: LD_VAR 0 1
31595: PPUSH
31596: CALL_OW 318
31600: IFFALSE 31611
// ComWalk ( i ) ;
31602: LD_VAR 0 1
31606: PPUSH
31607: CALL_OW 138
// SetClass ( i , 2 ) ;
31611: LD_VAR 0 1
31615: PPUSH
31616: LD_INT 2
31618: PPUSH
31619: CALL_OW 336
// end ;
31623: GO 31588
31625: POP
31626: POP
// end ;
31627: PPOPN 2
31629: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31630: LD_EXP 55
31634: PUSH
31635: LD_EXP 108
31639: AND
31640: IFFALSE 31928
31642: GO 31644
31644: DISABLE
31645: LD_INT 0
31647: PPUSH
31648: PPUSH
31649: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31650: LD_OWVAR 2
31654: PPUSH
31655: LD_INT 9
31657: PPUSH
31658: LD_INT 1
31660: PPUSH
31661: LD_INT 1
31663: PPUSH
31664: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31668: LD_INT 9
31670: PPUSH
31671: LD_OWVAR 2
31675: PPUSH
31676: CALL_OW 343
// uc_side := 9 ;
31680: LD_ADDR_OWVAR 20
31684: PUSH
31685: LD_INT 9
31687: ST_TO_ADDR
// uc_nation := 2 ;
31688: LD_ADDR_OWVAR 21
31692: PUSH
31693: LD_INT 2
31695: ST_TO_ADDR
// hc_name := Dark Warrior ;
31696: LD_ADDR_OWVAR 26
31700: PUSH
31701: LD_STRING Dark Warrior
31703: ST_TO_ADDR
// hc_gallery :=  ;
31704: LD_ADDR_OWVAR 33
31708: PUSH
31709: LD_STRING 
31711: ST_TO_ADDR
// hc_noskilllimit := true ;
31712: LD_ADDR_OWVAR 76
31716: PUSH
31717: LD_INT 1
31719: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31720: LD_ADDR_OWVAR 31
31724: PUSH
31725: LD_INT 30
31727: PUSH
31728: LD_INT 30
31730: PUSH
31731: LD_INT 30
31733: PUSH
31734: LD_INT 30
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: ST_TO_ADDR
// un := CreateHuman ;
31743: LD_ADDR_VAR 0 3
31747: PUSH
31748: CALL_OW 44
31752: ST_TO_ADDR
// hc_noskilllimit := false ;
31753: LD_ADDR_OWVAR 76
31757: PUSH
31758: LD_INT 0
31760: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31761: LD_VAR 0 3
31765: PPUSH
31766: LD_INT 1
31768: PPUSH
31769: CALL_OW 51
// ToLua ( playRanger() ) ;
31773: LD_STRING playRanger()
31775: PPUSH
31776: CALL_OW 559
// p := 0 ;
31780: LD_ADDR_VAR 0 2
31784: PUSH
31785: LD_INT 0
31787: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31788: LD_INT 35
31790: PPUSH
31791: CALL_OW 67
// p := p + 1 ;
31795: LD_ADDR_VAR 0 2
31799: PUSH
31800: LD_VAR 0 2
31804: PUSH
31805: LD_INT 1
31807: PLUS
31808: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31809: LD_VAR 0 3
31813: PPUSH
31814: CALL_OW 256
31818: PUSH
31819: LD_INT 1000
31821: LESS
31822: IFFALSE 31836
// SetLives ( un , 1000 ) ;
31824: LD_VAR 0 3
31828: PPUSH
31829: LD_INT 1000
31831: PPUSH
31832: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31836: LD_VAR 0 3
31840: PPUSH
31841: LD_INT 81
31843: PUSH
31844: LD_OWVAR 2
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 91
31855: PUSH
31856: LD_VAR 0 3
31860: PUSH
31861: LD_INT 30
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PPUSH
31873: CALL_OW 69
31877: PPUSH
31878: LD_VAR 0 3
31882: PPUSH
31883: CALL_OW 74
31887: PPUSH
31888: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31892: LD_VAR 0 2
31896: PUSH
31897: LD_INT 80
31899: GREATER
31900: PUSH
31901: LD_VAR 0 3
31905: PPUSH
31906: CALL_OW 301
31910: OR
31911: IFFALSE 31788
// if un then
31913: LD_VAR 0 3
31917: IFFALSE 31928
// RemoveUnit ( un ) ;
31919: LD_VAR 0 3
31923: PPUSH
31924: CALL_OW 64
// end ;
31928: PPOPN 3
31930: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31931: LD_EXP 109
31935: IFFALSE 32051
31937: GO 31939
31939: DISABLE
31940: LD_INT 0
31942: PPUSH
31943: PPUSH
31944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31945: LD_ADDR_VAR 0 2
31949: PUSH
31950: LD_INT 81
31952: PUSH
31953: LD_OWVAR 2
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 21
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PPUSH
31976: CALL_OW 69
31980: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31981: LD_STRING playComputer()
31983: PPUSH
31984: CALL_OW 559
// if not tmp then
31988: LD_VAR 0 2
31992: NOT
31993: IFFALSE 31997
// exit ;
31995: GO 32051
// for i in tmp do
31997: LD_ADDR_VAR 0 1
32001: PUSH
32002: LD_VAR 0 2
32006: PUSH
32007: FOR_IN
32008: IFFALSE 32049
// for j := 1 to 4 do
32010: LD_ADDR_VAR 0 3
32014: PUSH
32015: DOUBLE
32016: LD_INT 1
32018: DEC
32019: ST_TO_ADDR
32020: LD_INT 4
32022: PUSH
32023: FOR_TO
32024: IFFALSE 32045
// SetSkill ( i , j , 10 ) ;
32026: LD_VAR 0 1
32030: PPUSH
32031: LD_VAR 0 3
32035: PPUSH
32036: LD_INT 10
32038: PPUSH
32039: CALL_OW 237
32043: GO 32023
32045: POP
32046: POP
32047: GO 32007
32049: POP
32050: POP
// end ;
32051: PPOPN 3
32053: END
// every 0 0$1 trigger s30 do var i , tmp ;
32054: LD_EXP 110
32058: IFFALSE 32127
32060: GO 32062
32062: DISABLE
32063: LD_INT 0
32065: PPUSH
32066: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32067: LD_ADDR_VAR 0 2
32071: PUSH
32072: LD_INT 22
32074: PUSH
32075: LD_OWVAR 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PPUSH
32084: CALL_OW 69
32088: ST_TO_ADDR
// if not tmp then
32089: LD_VAR 0 2
32093: NOT
32094: IFFALSE 32098
// exit ;
32096: GO 32127
// for i in tmp do
32098: LD_ADDR_VAR 0 1
32102: PUSH
32103: LD_VAR 0 2
32107: PUSH
32108: FOR_IN
32109: IFFALSE 32125
// SetLives ( i , 300 ) ;
32111: LD_VAR 0 1
32115: PPUSH
32116: LD_INT 300
32118: PPUSH
32119: CALL_OW 234
32123: GO 32108
32125: POP
32126: POP
// end ;
32127: PPOPN 2
32129: END
// every 0 0$1 trigger s60 do var i , tmp ;
32130: LD_EXP 111
32134: IFFALSE 32203
32136: GO 32138
32138: DISABLE
32139: LD_INT 0
32141: PPUSH
32142: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32143: LD_ADDR_VAR 0 2
32147: PUSH
32148: LD_INT 22
32150: PUSH
32151: LD_OWVAR 2
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PPUSH
32160: CALL_OW 69
32164: ST_TO_ADDR
// if not tmp then
32165: LD_VAR 0 2
32169: NOT
32170: IFFALSE 32174
// exit ;
32172: GO 32203
// for i in tmp do
32174: LD_ADDR_VAR 0 1
32178: PUSH
32179: LD_VAR 0 2
32183: PUSH
32184: FOR_IN
32185: IFFALSE 32201
// SetLives ( i , 600 ) ;
32187: LD_VAR 0 1
32191: PPUSH
32192: LD_INT 600
32194: PPUSH
32195: CALL_OW 234
32199: GO 32184
32201: POP
32202: POP
// end ;
32203: PPOPN 2
32205: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32206: LD_INT 0
32208: PPUSH
// case cmd of 301 :
32209: LD_VAR 0 1
32213: PUSH
32214: LD_INT 301
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32254
32222: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32223: LD_VAR 0 6
32227: PPUSH
32228: LD_VAR 0 7
32232: PPUSH
32233: LD_VAR 0 8
32237: PPUSH
32238: LD_VAR 0 4
32242: PPUSH
32243: LD_VAR 0 5
32247: PPUSH
32248: CALL 33463 0 5
32252: GO 32375
32254: LD_INT 302
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32299
32262: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32263: LD_VAR 0 6
32267: PPUSH
32268: LD_VAR 0 7
32272: PPUSH
32273: LD_VAR 0 8
32277: PPUSH
32278: LD_VAR 0 9
32282: PPUSH
32283: LD_VAR 0 4
32287: PPUSH
32288: LD_VAR 0 5
32292: PPUSH
32293: CALL 33554 0 6
32297: GO 32375
32299: LD_INT 303
32301: DOUBLE
32302: EQUAL
32303: IFTRUE 32307
32305: GO 32344
32307: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32308: LD_VAR 0 6
32312: PPUSH
32313: LD_VAR 0 7
32317: PPUSH
32318: LD_VAR 0 8
32322: PPUSH
32323: LD_VAR 0 9
32327: PPUSH
32328: LD_VAR 0 4
32332: PPUSH
32333: LD_VAR 0 5
32337: PPUSH
32338: CALL 32380 0 6
32342: GO 32375
32344: LD_INT 304
32346: DOUBLE
32347: EQUAL
32348: IFTRUE 32352
32350: GO 32374
32352: POP
// hHackTeleport ( unit , x , y ) ; end ;
32353: LD_VAR 0 2
32357: PPUSH
32358: LD_VAR 0 4
32362: PPUSH
32363: LD_VAR 0 5
32367: PPUSH
32368: CALL 34147 0 3
32372: GO 32375
32374: POP
// end ;
32375: LD_VAR 0 12
32379: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32380: LD_INT 0
32382: PPUSH
32383: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32384: LD_VAR 0 1
32388: PUSH
32389: LD_INT 1
32391: LESS
32392: PUSH
32393: LD_VAR 0 1
32397: PUSH
32398: LD_INT 3
32400: GREATER
32401: OR
32402: PUSH
32403: LD_VAR 0 5
32407: PPUSH
32408: LD_VAR 0 6
32412: PPUSH
32413: CALL_OW 428
32417: OR
32418: IFFALSE 32422
// exit ;
32420: GO 33150
// uc_side := your_side ;
32422: LD_ADDR_OWVAR 20
32426: PUSH
32427: LD_OWVAR 2
32431: ST_TO_ADDR
// uc_nation := nation ;
32432: LD_ADDR_OWVAR 21
32436: PUSH
32437: LD_VAR 0 1
32441: ST_TO_ADDR
// bc_level = 1 ;
32442: LD_ADDR_OWVAR 43
32446: PUSH
32447: LD_INT 1
32449: ST_TO_ADDR
// case btype of 1 :
32450: LD_VAR 0 2
32454: PUSH
32455: LD_INT 1
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32474
32463: POP
// bc_type := b_depot ; 2 :
32464: LD_ADDR_OWVAR 42
32468: PUSH
32469: LD_INT 0
32471: ST_TO_ADDR
32472: GO 33094
32474: LD_INT 2
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32493
32482: POP
// bc_type := b_warehouse ; 3 :
32483: LD_ADDR_OWVAR 42
32487: PUSH
32488: LD_INT 1
32490: ST_TO_ADDR
32491: GO 33094
32493: LD_INT 3
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32512
32501: POP
// bc_type := b_lab ; 4 .. 9 :
32502: LD_ADDR_OWVAR 42
32506: PUSH
32507: LD_INT 6
32509: ST_TO_ADDR
32510: GO 33094
32512: LD_INT 4
32514: DOUBLE
32515: GREATEREQUAL
32516: IFFALSE 32524
32518: LD_INT 9
32520: DOUBLE
32521: LESSEQUAL
32522: IFTRUE 32526
32524: GO 32586
32526: POP
// begin bc_type := b_lab_half ;
32527: LD_ADDR_OWVAR 42
32531: PUSH
32532: LD_INT 7
32534: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32535: LD_ADDR_OWVAR 44
32539: PUSH
32540: LD_INT 10
32542: PUSH
32543: LD_INT 11
32545: PUSH
32546: LD_INT 12
32548: PUSH
32549: LD_INT 15
32551: PUSH
32552: LD_INT 14
32554: PUSH
32555: LD_INT 13
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: PUSH
32566: LD_VAR 0 2
32570: PUSH
32571: LD_INT 3
32573: MINUS
32574: ARRAY
32575: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32576: LD_ADDR_OWVAR 45
32580: PUSH
32581: LD_INT 9
32583: ST_TO_ADDR
// end ; 10 .. 13 :
32584: GO 33094
32586: LD_INT 10
32588: DOUBLE
32589: GREATEREQUAL
32590: IFFALSE 32598
32592: LD_INT 13
32594: DOUBLE
32595: LESSEQUAL
32596: IFTRUE 32600
32598: GO 32677
32600: POP
// begin bc_type := b_lab_full ;
32601: LD_ADDR_OWVAR 42
32605: PUSH
32606: LD_INT 8
32608: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32609: LD_ADDR_OWVAR 44
32613: PUSH
32614: LD_INT 10
32616: PUSH
32617: LD_INT 12
32619: PUSH
32620: LD_INT 14
32622: PUSH
32623: LD_INT 13
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: PUSH
32632: LD_VAR 0 2
32636: PUSH
32637: LD_INT 9
32639: MINUS
32640: ARRAY
32641: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32642: LD_ADDR_OWVAR 45
32646: PUSH
32647: LD_INT 11
32649: PUSH
32650: LD_INT 15
32652: PUSH
32653: LD_INT 12
32655: PUSH
32656: LD_INT 15
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: PUSH
32665: LD_VAR 0 2
32669: PUSH
32670: LD_INT 9
32672: MINUS
32673: ARRAY
32674: ST_TO_ADDR
// end ; 14 :
32675: GO 33094
32677: LD_INT 14
32679: DOUBLE
32680: EQUAL
32681: IFTRUE 32685
32683: GO 32696
32685: POP
// bc_type := b_workshop ; 15 :
32686: LD_ADDR_OWVAR 42
32690: PUSH
32691: LD_INT 2
32693: ST_TO_ADDR
32694: GO 33094
32696: LD_INT 15
32698: DOUBLE
32699: EQUAL
32700: IFTRUE 32704
32702: GO 32715
32704: POP
// bc_type := b_factory ; 16 :
32705: LD_ADDR_OWVAR 42
32709: PUSH
32710: LD_INT 3
32712: ST_TO_ADDR
32713: GO 33094
32715: LD_INT 16
32717: DOUBLE
32718: EQUAL
32719: IFTRUE 32723
32721: GO 32734
32723: POP
// bc_type := b_ext_gun ; 17 :
32724: LD_ADDR_OWVAR 42
32728: PUSH
32729: LD_INT 17
32731: ST_TO_ADDR
32732: GO 33094
32734: LD_INT 17
32736: DOUBLE
32737: EQUAL
32738: IFTRUE 32742
32740: GO 32770
32742: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32743: LD_ADDR_OWVAR 42
32747: PUSH
32748: LD_INT 19
32750: PUSH
32751: LD_INT 23
32753: PUSH
32754: LD_INT 19
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: LIST
32761: PUSH
32762: LD_VAR 0 1
32766: ARRAY
32767: ST_TO_ADDR
32768: GO 33094
32770: LD_INT 18
32772: DOUBLE
32773: EQUAL
32774: IFTRUE 32778
32776: GO 32789
32778: POP
// bc_type := b_ext_radar ; 19 :
32779: LD_ADDR_OWVAR 42
32783: PUSH
32784: LD_INT 20
32786: ST_TO_ADDR
32787: GO 33094
32789: LD_INT 19
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32797
32795: GO 32808
32797: POP
// bc_type := b_ext_radio ; 20 :
32798: LD_ADDR_OWVAR 42
32802: PUSH
32803: LD_INT 22
32805: ST_TO_ADDR
32806: GO 33094
32808: LD_INT 20
32810: DOUBLE
32811: EQUAL
32812: IFTRUE 32816
32814: GO 32827
32816: POP
// bc_type := b_ext_siberium ; 21 :
32817: LD_ADDR_OWVAR 42
32821: PUSH
32822: LD_INT 21
32824: ST_TO_ADDR
32825: GO 33094
32827: LD_INT 21
32829: DOUBLE
32830: EQUAL
32831: IFTRUE 32835
32833: GO 32846
32835: POP
// bc_type := b_ext_computer ; 22 :
32836: LD_ADDR_OWVAR 42
32840: PUSH
32841: LD_INT 24
32843: ST_TO_ADDR
32844: GO 33094
32846: LD_INT 22
32848: DOUBLE
32849: EQUAL
32850: IFTRUE 32854
32852: GO 32865
32854: POP
// bc_type := b_ext_track ; 23 :
32855: LD_ADDR_OWVAR 42
32859: PUSH
32860: LD_INT 16
32862: ST_TO_ADDR
32863: GO 33094
32865: LD_INT 23
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32873
32871: GO 32884
32873: POP
// bc_type := b_ext_laser ; 24 :
32874: LD_ADDR_OWVAR 42
32878: PUSH
32879: LD_INT 25
32881: ST_TO_ADDR
32882: GO 33094
32884: LD_INT 24
32886: DOUBLE
32887: EQUAL
32888: IFTRUE 32892
32890: GO 32903
32892: POP
// bc_type := b_control_tower ; 25 :
32893: LD_ADDR_OWVAR 42
32897: PUSH
32898: LD_INT 36
32900: ST_TO_ADDR
32901: GO 33094
32903: LD_INT 25
32905: DOUBLE
32906: EQUAL
32907: IFTRUE 32911
32909: GO 32922
32911: POP
// bc_type := b_breastwork ; 26 :
32912: LD_ADDR_OWVAR 42
32916: PUSH
32917: LD_INT 31
32919: ST_TO_ADDR
32920: GO 33094
32922: LD_INT 26
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32941
32930: POP
// bc_type := b_bunker ; 27 :
32931: LD_ADDR_OWVAR 42
32935: PUSH
32936: LD_INT 32
32938: ST_TO_ADDR
32939: GO 33094
32941: LD_INT 27
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 32960
32949: POP
// bc_type := b_turret ; 28 :
32950: LD_ADDR_OWVAR 42
32954: PUSH
32955: LD_INT 33
32957: ST_TO_ADDR
32958: GO 33094
32960: LD_INT 28
32962: DOUBLE
32963: EQUAL
32964: IFTRUE 32968
32966: GO 32979
32968: POP
// bc_type := b_armoury ; 29 :
32969: LD_ADDR_OWVAR 42
32973: PUSH
32974: LD_INT 4
32976: ST_TO_ADDR
32977: GO 33094
32979: LD_INT 29
32981: DOUBLE
32982: EQUAL
32983: IFTRUE 32987
32985: GO 32998
32987: POP
// bc_type := b_barracks ; 30 :
32988: LD_ADDR_OWVAR 42
32992: PUSH
32993: LD_INT 5
32995: ST_TO_ADDR
32996: GO 33094
32998: LD_INT 30
33000: DOUBLE
33001: EQUAL
33002: IFTRUE 33006
33004: GO 33017
33006: POP
// bc_type := b_solar_power ; 31 :
33007: LD_ADDR_OWVAR 42
33011: PUSH
33012: LD_INT 27
33014: ST_TO_ADDR
33015: GO 33094
33017: LD_INT 31
33019: DOUBLE
33020: EQUAL
33021: IFTRUE 33025
33023: GO 33036
33025: POP
// bc_type := b_oil_power ; 32 :
33026: LD_ADDR_OWVAR 42
33030: PUSH
33031: LD_INT 26
33033: ST_TO_ADDR
33034: GO 33094
33036: LD_INT 32
33038: DOUBLE
33039: EQUAL
33040: IFTRUE 33044
33042: GO 33055
33044: POP
// bc_type := b_siberite_power ; 33 :
33045: LD_ADDR_OWVAR 42
33049: PUSH
33050: LD_INT 28
33052: ST_TO_ADDR
33053: GO 33094
33055: LD_INT 33
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33063
33061: GO 33074
33063: POP
// bc_type := b_oil_mine ; 34 :
33064: LD_ADDR_OWVAR 42
33068: PUSH
33069: LD_INT 29
33071: ST_TO_ADDR
33072: GO 33094
33074: LD_INT 34
33076: DOUBLE
33077: EQUAL
33078: IFTRUE 33082
33080: GO 33093
33082: POP
// bc_type := b_siberite_mine ; end ;
33083: LD_ADDR_OWVAR 42
33087: PUSH
33088: LD_INT 30
33090: ST_TO_ADDR
33091: GO 33094
33093: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33094: LD_ADDR_VAR 0 8
33098: PUSH
33099: LD_VAR 0 5
33103: PPUSH
33104: LD_VAR 0 6
33108: PPUSH
33109: LD_VAR 0 3
33113: PPUSH
33114: CALL_OW 47
33118: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33119: LD_OWVAR 42
33123: PUSH
33124: LD_INT 32
33126: PUSH
33127: LD_INT 33
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: IN
33134: IFFALSE 33150
// PlaceWeaponTurret ( b , weapon ) ;
33136: LD_VAR 0 8
33140: PPUSH
33141: LD_VAR 0 4
33145: PPUSH
33146: CALL_OW 431
// end ;
33150: LD_VAR 0 7
33154: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33155: LD_INT 0
33157: PPUSH
33158: PPUSH
33159: PPUSH
33160: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33161: LD_ADDR_VAR 0 4
33165: PUSH
33166: LD_INT 22
33168: PUSH
33169: LD_OWVAR 2
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 30
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 30
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PPUSH
33210: CALL_OW 69
33214: ST_TO_ADDR
// if not tmp then
33215: LD_VAR 0 4
33219: NOT
33220: IFFALSE 33224
// exit ;
33222: GO 33283
// for i in tmp do
33224: LD_ADDR_VAR 0 2
33228: PUSH
33229: LD_VAR 0 4
33233: PUSH
33234: FOR_IN
33235: IFFALSE 33281
// for j = 1 to 3 do
33237: LD_ADDR_VAR 0 3
33241: PUSH
33242: DOUBLE
33243: LD_INT 1
33245: DEC
33246: ST_TO_ADDR
33247: LD_INT 3
33249: PUSH
33250: FOR_TO
33251: IFFALSE 33277
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33253: LD_VAR 0 2
33257: PPUSH
33258: CALL_OW 274
33262: PPUSH
33263: LD_VAR 0 3
33267: PPUSH
33268: LD_INT 99999
33270: PPUSH
33271: CALL_OW 277
33275: GO 33250
33277: POP
33278: POP
33279: GO 33234
33281: POP
33282: POP
// end ;
33283: LD_VAR 0 1
33287: RET
// export function hHackSetLevel10 ; var i , j ; begin
33288: LD_INT 0
33290: PPUSH
33291: PPUSH
33292: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33293: LD_ADDR_VAR 0 2
33297: PUSH
33298: LD_INT 21
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PPUSH
33308: CALL_OW 69
33312: PUSH
33313: FOR_IN
33314: IFFALSE 33366
// if IsSelected ( i ) then
33316: LD_VAR 0 2
33320: PPUSH
33321: CALL_OW 306
33325: IFFALSE 33364
// begin for j := 1 to 4 do
33327: LD_ADDR_VAR 0 3
33331: PUSH
33332: DOUBLE
33333: LD_INT 1
33335: DEC
33336: ST_TO_ADDR
33337: LD_INT 4
33339: PUSH
33340: FOR_TO
33341: IFFALSE 33362
// SetSkill ( i , j , 10 ) ;
33343: LD_VAR 0 2
33347: PPUSH
33348: LD_VAR 0 3
33352: PPUSH
33353: LD_INT 10
33355: PPUSH
33356: CALL_OW 237
33360: GO 33340
33362: POP
33363: POP
// end ;
33364: GO 33313
33366: POP
33367: POP
// end ;
33368: LD_VAR 0 1
33372: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33373: LD_INT 0
33375: PPUSH
33376: PPUSH
33377: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33378: LD_ADDR_VAR 0 2
33382: PUSH
33383: LD_INT 22
33385: PUSH
33386: LD_OWVAR 2
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 21
33397: PUSH
33398: LD_INT 1
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PPUSH
33409: CALL_OW 69
33413: PUSH
33414: FOR_IN
33415: IFFALSE 33456
// begin for j := 1 to 4 do
33417: LD_ADDR_VAR 0 3
33421: PUSH
33422: DOUBLE
33423: LD_INT 1
33425: DEC
33426: ST_TO_ADDR
33427: LD_INT 4
33429: PUSH
33430: FOR_TO
33431: IFFALSE 33452
// SetSkill ( i , j , 10 ) ;
33433: LD_VAR 0 2
33437: PPUSH
33438: LD_VAR 0 3
33442: PPUSH
33443: LD_INT 10
33445: PPUSH
33446: CALL_OW 237
33450: GO 33430
33452: POP
33453: POP
// end ;
33454: GO 33414
33456: POP
33457: POP
// end ;
33458: LD_VAR 0 1
33462: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33463: LD_INT 0
33465: PPUSH
// uc_side := your_side ;
33466: LD_ADDR_OWVAR 20
33470: PUSH
33471: LD_OWVAR 2
33475: ST_TO_ADDR
// uc_nation := nation ;
33476: LD_ADDR_OWVAR 21
33480: PUSH
33481: LD_VAR 0 1
33485: ST_TO_ADDR
// InitHc ;
33486: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33490: LD_INT 0
33492: PPUSH
33493: LD_VAR 0 2
33497: PPUSH
33498: LD_VAR 0 3
33502: PPUSH
33503: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33507: LD_VAR 0 4
33511: PPUSH
33512: LD_VAR 0 5
33516: PPUSH
33517: CALL_OW 428
33521: PUSH
33522: LD_INT 0
33524: EQUAL
33525: IFFALSE 33549
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33527: CALL_OW 44
33531: PPUSH
33532: LD_VAR 0 4
33536: PPUSH
33537: LD_VAR 0 5
33541: PPUSH
33542: LD_INT 1
33544: PPUSH
33545: CALL_OW 48
// end ;
33549: LD_VAR 0 6
33553: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33554: LD_INT 0
33556: PPUSH
33557: PPUSH
// uc_side := your_side ;
33558: LD_ADDR_OWVAR 20
33562: PUSH
33563: LD_OWVAR 2
33567: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33568: LD_VAR 0 1
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: LD_INT 4
33584: PUSH
33585: LD_INT 5
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: IN
33595: IFFALSE 33607
// uc_nation := nation_american else
33597: LD_ADDR_OWVAR 21
33601: PUSH
33602: LD_INT 1
33604: ST_TO_ADDR
33605: GO 33650
// if chassis in [ 11 , 12 , 13 , 14 ] then
33607: LD_VAR 0 1
33611: PUSH
33612: LD_INT 11
33614: PUSH
33615: LD_INT 12
33617: PUSH
33618: LD_INT 13
33620: PUSH
33621: LD_INT 14
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: IN
33630: IFFALSE 33642
// uc_nation := nation_arabian else
33632: LD_ADDR_OWVAR 21
33636: PUSH
33637: LD_INT 2
33639: ST_TO_ADDR
33640: GO 33650
// uc_nation := nation_russian ;
33642: LD_ADDR_OWVAR 21
33646: PUSH
33647: LD_INT 3
33649: ST_TO_ADDR
// vc_chassis := chassis ;
33650: LD_ADDR_OWVAR 37
33654: PUSH
33655: LD_VAR 0 1
33659: ST_TO_ADDR
// vc_engine := engine ;
33660: LD_ADDR_OWVAR 39
33664: PUSH
33665: LD_VAR 0 2
33669: ST_TO_ADDR
// vc_control := control ;
33670: LD_ADDR_OWVAR 38
33674: PUSH
33675: LD_VAR 0 3
33679: ST_TO_ADDR
// vc_weapon := weapon ;
33680: LD_ADDR_OWVAR 40
33684: PUSH
33685: LD_VAR 0 4
33689: ST_TO_ADDR
// un := CreateVehicle ;
33690: LD_ADDR_VAR 0 8
33694: PUSH
33695: CALL_OW 45
33699: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33700: LD_VAR 0 8
33704: PPUSH
33705: LD_INT 0
33707: PPUSH
33708: LD_INT 5
33710: PPUSH
33711: CALL_OW 12
33715: PPUSH
33716: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33720: LD_VAR 0 8
33724: PPUSH
33725: LD_VAR 0 5
33729: PPUSH
33730: LD_VAR 0 6
33734: PPUSH
33735: LD_INT 1
33737: PPUSH
33738: CALL_OW 48
// end ;
33742: LD_VAR 0 7
33746: RET
// export hInvincible ; every 1 do
33747: GO 33749
33749: DISABLE
// hInvincible := [ ] ;
33750: LD_ADDR_EXP 112
33754: PUSH
33755: EMPTY
33756: ST_TO_ADDR
33757: END
// every 10 do var i ;
33758: GO 33760
33760: DISABLE
33761: LD_INT 0
33763: PPUSH
// begin enable ;
33764: ENABLE
// if not hInvincible then
33765: LD_EXP 112
33769: NOT
33770: IFFALSE 33774
// exit ;
33772: GO 33818
// for i in hInvincible do
33774: LD_ADDR_VAR 0 1
33778: PUSH
33779: LD_EXP 112
33783: PUSH
33784: FOR_IN
33785: IFFALSE 33816
// if GetLives ( i ) < 1000 then
33787: LD_VAR 0 1
33791: PPUSH
33792: CALL_OW 256
33796: PUSH
33797: LD_INT 1000
33799: LESS
33800: IFFALSE 33814
// SetLives ( i , 1000 ) ;
33802: LD_VAR 0 1
33806: PPUSH
33807: LD_INT 1000
33809: PPUSH
33810: CALL_OW 234
33814: GO 33784
33816: POP
33817: POP
// end ;
33818: PPOPN 1
33820: END
// export function hHackInvincible ; var i ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33825: LD_ADDR_VAR 0 2
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: LD_INT 21
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 21
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: PPUSH
33858: CALL_OW 69
33862: PUSH
33863: FOR_IN
33864: IFFALSE 33925
// if IsSelected ( i ) then
33866: LD_VAR 0 2
33870: PPUSH
33871: CALL_OW 306
33875: IFFALSE 33923
// begin if i in hInvincible then
33877: LD_VAR 0 2
33881: PUSH
33882: LD_EXP 112
33886: IN
33887: IFFALSE 33907
// hInvincible := hInvincible diff i else
33889: LD_ADDR_EXP 112
33893: PUSH
33894: LD_EXP 112
33898: PUSH
33899: LD_VAR 0 2
33903: DIFF
33904: ST_TO_ADDR
33905: GO 33923
// hInvincible := hInvincible union i ;
33907: LD_ADDR_EXP 112
33911: PUSH
33912: LD_EXP 112
33916: PUSH
33917: LD_VAR 0 2
33921: UNION
33922: ST_TO_ADDR
// end ;
33923: GO 33863
33925: POP
33926: POP
// end ;
33927: LD_VAR 0 1
33931: RET
// export function hHackInvisible ; var i , j ; begin
33932: LD_INT 0
33934: PPUSH
33935: PPUSH
33936: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33937: LD_ADDR_VAR 0 2
33941: PUSH
33942: LD_INT 21
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PPUSH
33952: CALL_OW 69
33956: PUSH
33957: FOR_IN
33958: IFFALSE 33982
// if IsSelected ( i ) then
33960: LD_VAR 0 2
33964: PPUSH
33965: CALL_OW 306
33969: IFFALSE 33980
// ComForceInvisible ( i ) ;
33971: LD_VAR 0 2
33975: PPUSH
33976: CALL_OW 496
33980: GO 33957
33982: POP
33983: POP
// end ;
33984: LD_VAR 0 1
33988: RET
// export function hHackChangeYourSide ; begin
33989: LD_INT 0
33991: PPUSH
// if your_side = 8 then
33992: LD_OWVAR 2
33996: PUSH
33997: LD_INT 8
33999: EQUAL
34000: IFFALSE 34012
// your_side := 0 else
34002: LD_ADDR_OWVAR 2
34006: PUSH
34007: LD_INT 0
34009: ST_TO_ADDR
34010: GO 34026
// your_side := your_side + 1 ;
34012: LD_ADDR_OWVAR 2
34016: PUSH
34017: LD_OWVAR 2
34021: PUSH
34022: LD_INT 1
34024: PLUS
34025: ST_TO_ADDR
// end ;
34026: LD_VAR 0 1
34030: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34031: LD_INT 0
34033: PPUSH
34034: PPUSH
34035: PPUSH
// for i in all_units do
34036: LD_ADDR_VAR 0 2
34040: PUSH
34041: LD_OWVAR 3
34045: PUSH
34046: FOR_IN
34047: IFFALSE 34125
// if IsSelected ( i ) then
34049: LD_VAR 0 2
34053: PPUSH
34054: CALL_OW 306
34058: IFFALSE 34123
// begin j := GetSide ( i ) ;
34060: LD_ADDR_VAR 0 3
34064: PUSH
34065: LD_VAR 0 2
34069: PPUSH
34070: CALL_OW 255
34074: ST_TO_ADDR
// if j = 8 then
34075: LD_VAR 0 3
34079: PUSH
34080: LD_INT 8
34082: EQUAL
34083: IFFALSE 34095
// j := 0 else
34085: LD_ADDR_VAR 0 3
34089: PUSH
34090: LD_INT 0
34092: ST_TO_ADDR
34093: GO 34109
// j := j + 1 ;
34095: LD_ADDR_VAR 0 3
34099: PUSH
34100: LD_VAR 0 3
34104: PUSH
34105: LD_INT 1
34107: PLUS
34108: ST_TO_ADDR
// SetSide ( i , j ) ;
34109: LD_VAR 0 2
34113: PPUSH
34114: LD_VAR 0 3
34118: PPUSH
34119: CALL_OW 235
// end ;
34123: GO 34046
34125: POP
34126: POP
// end ;
34127: LD_VAR 0 1
34131: RET
// export function hHackFog ; begin
34132: LD_INT 0
34134: PPUSH
// FogOff ( true ) ;
34135: LD_INT 1
34137: PPUSH
34138: CALL_OW 344
// end ;
34142: LD_VAR 0 1
34146: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34147: LD_INT 0
34149: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34150: LD_VAR 0 1
34154: PPUSH
34155: LD_VAR 0 2
34159: PPUSH
34160: LD_VAR 0 3
34164: PPUSH
34165: LD_INT 1
34167: PPUSH
34168: LD_INT 1
34170: PPUSH
34171: CALL_OW 483
// CenterOnXY ( x , y ) ;
34175: LD_VAR 0 2
34179: PPUSH
34180: LD_VAR 0 3
34184: PPUSH
34185: CALL_OW 84
// end ;
34189: LD_VAR 0 4
34193: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34194: LD_INT 0
34196: PPUSH
34197: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34198: LD_VAR 0 1
34202: NOT
34203: PUSH
34204: LD_VAR 0 2
34208: PPUSH
34209: LD_VAR 0 3
34213: PPUSH
34214: CALL_OW 488
34218: NOT
34219: OR
34220: PUSH
34221: LD_VAR 0 1
34225: PPUSH
34226: CALL_OW 266
34230: PUSH
34231: LD_INT 3
34233: NONEQUAL
34234: PUSH
34235: LD_VAR 0 1
34239: PPUSH
34240: CALL_OW 247
34244: PUSH
34245: LD_INT 1
34247: EQUAL
34248: NOT
34249: AND
34250: OR
34251: IFFALSE 34255
// exit ;
34253: GO 34404
// if GetType ( factory ) = unit_human then
34255: LD_VAR 0 1
34259: PPUSH
34260: CALL_OW 247
34264: PUSH
34265: LD_INT 1
34267: EQUAL
34268: IFFALSE 34285
// factory := IsInUnit ( factory ) ;
34270: LD_ADDR_VAR 0 1
34274: PUSH
34275: LD_VAR 0 1
34279: PPUSH
34280: CALL_OW 310
34284: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34285: LD_VAR 0 1
34289: PPUSH
34290: CALL_OW 266
34294: PUSH
34295: LD_INT 3
34297: NONEQUAL
34298: IFFALSE 34302
// exit ;
34300: GO 34404
// if HexInfo ( x , y ) = factory then
34302: LD_VAR 0 2
34306: PPUSH
34307: LD_VAR 0 3
34311: PPUSH
34312: CALL_OW 428
34316: PUSH
34317: LD_VAR 0 1
34321: EQUAL
34322: IFFALSE 34349
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34324: LD_ADDR_EXP 113
34328: PUSH
34329: LD_EXP 113
34333: PPUSH
34334: LD_VAR 0 1
34338: PPUSH
34339: LD_INT 0
34341: PPUSH
34342: CALL_OW 1
34346: ST_TO_ADDR
34347: GO 34400
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34349: LD_ADDR_EXP 113
34353: PUSH
34354: LD_EXP 113
34358: PPUSH
34359: LD_VAR 0 1
34363: PPUSH
34364: LD_VAR 0 1
34368: PPUSH
34369: CALL_OW 255
34373: PUSH
34374: LD_VAR 0 1
34378: PUSH
34379: LD_VAR 0 2
34383: PUSH
34384: LD_VAR 0 3
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: PPUSH
34395: CALL_OW 1
34399: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34400: CALL 34409 0 0
// end ;
34404: LD_VAR 0 4
34408: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34409: LD_INT 0
34411: PPUSH
34412: PPUSH
34413: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34414: LD_STRING resetFactoryWaypoint();
34416: PPUSH
34417: CALL_OW 559
// if factoryWaypoints then
34421: LD_EXP 113
34425: IFFALSE 34551
// begin list := PrepareArray ( factoryWaypoints ) ;
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_EXP 113
34436: PPUSH
34437: CALL 76965 0 1
34441: ST_TO_ADDR
// for i := 1 to list do
34442: LD_ADDR_VAR 0 2
34446: PUSH
34447: DOUBLE
34448: LD_INT 1
34450: DEC
34451: ST_TO_ADDR
34452: LD_VAR 0 3
34456: PUSH
34457: FOR_TO
34458: IFFALSE 34549
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34460: LD_STRING setFactoryWaypointXY(
34462: PUSH
34463: LD_VAR 0 3
34467: PUSH
34468: LD_VAR 0 2
34472: ARRAY
34473: PUSH
34474: LD_INT 1
34476: ARRAY
34477: STR
34478: PUSH
34479: LD_STRING ,
34481: STR
34482: PUSH
34483: LD_VAR 0 3
34487: PUSH
34488: LD_VAR 0 2
34492: ARRAY
34493: PUSH
34494: LD_INT 2
34496: ARRAY
34497: STR
34498: PUSH
34499: LD_STRING ,
34501: STR
34502: PUSH
34503: LD_VAR 0 3
34507: PUSH
34508: LD_VAR 0 2
34512: ARRAY
34513: PUSH
34514: LD_INT 3
34516: ARRAY
34517: STR
34518: PUSH
34519: LD_STRING ,
34521: STR
34522: PUSH
34523: LD_VAR 0 3
34527: PUSH
34528: LD_VAR 0 2
34532: ARRAY
34533: PUSH
34534: LD_INT 4
34536: ARRAY
34537: STR
34538: PUSH
34539: LD_STRING )
34541: STR
34542: PPUSH
34543: CALL_OW 559
34547: GO 34457
34549: POP
34550: POP
// end ; end ;
34551: LD_VAR 0 1
34555: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34556: LD_INT 0
34558: PPUSH
// if HexInfo ( x , y ) = warehouse then
34559: LD_VAR 0 2
34563: PPUSH
34564: LD_VAR 0 3
34568: PPUSH
34569: CALL_OW 428
34573: PUSH
34574: LD_VAR 0 1
34578: EQUAL
34579: IFFALSE 34606
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34581: LD_ADDR_EXP 114
34585: PUSH
34586: LD_EXP 114
34590: PPUSH
34591: LD_VAR 0 1
34595: PPUSH
34596: LD_INT 0
34598: PPUSH
34599: CALL_OW 1
34603: ST_TO_ADDR
34604: GO 34657
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34606: LD_ADDR_EXP 114
34610: PUSH
34611: LD_EXP 114
34615: PPUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: LD_VAR 0 1
34625: PPUSH
34626: CALL_OW 255
34630: PUSH
34631: LD_VAR 0 1
34635: PUSH
34636: LD_VAR 0 2
34640: PUSH
34641: LD_VAR 0 3
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: PPUSH
34652: CALL_OW 1
34656: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34657: CALL 34666 0 0
// end ;
34661: LD_VAR 0 4
34665: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34666: LD_INT 0
34668: PPUSH
34669: PPUSH
34670: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34671: LD_STRING resetWarehouseGatheringPoints();
34673: PPUSH
34674: CALL_OW 559
// if warehouseGatheringPoints then
34678: LD_EXP 114
34682: IFFALSE 34808
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34684: LD_ADDR_VAR 0 3
34688: PUSH
34689: LD_EXP 114
34693: PPUSH
34694: CALL 76965 0 1
34698: ST_TO_ADDR
// for i := 1 to list do
34699: LD_ADDR_VAR 0 2
34703: PUSH
34704: DOUBLE
34705: LD_INT 1
34707: DEC
34708: ST_TO_ADDR
34709: LD_VAR 0 3
34713: PUSH
34714: FOR_TO
34715: IFFALSE 34806
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34717: LD_STRING setWarehouseGatheringPointXY(
34719: PUSH
34720: LD_VAR 0 3
34724: PUSH
34725: LD_VAR 0 2
34729: ARRAY
34730: PUSH
34731: LD_INT 1
34733: ARRAY
34734: STR
34735: PUSH
34736: LD_STRING ,
34738: STR
34739: PUSH
34740: LD_VAR 0 3
34744: PUSH
34745: LD_VAR 0 2
34749: ARRAY
34750: PUSH
34751: LD_INT 2
34753: ARRAY
34754: STR
34755: PUSH
34756: LD_STRING ,
34758: STR
34759: PUSH
34760: LD_VAR 0 3
34764: PUSH
34765: LD_VAR 0 2
34769: ARRAY
34770: PUSH
34771: LD_INT 3
34773: ARRAY
34774: STR
34775: PUSH
34776: LD_STRING ,
34778: STR
34779: PUSH
34780: LD_VAR 0 3
34784: PUSH
34785: LD_VAR 0 2
34789: ARRAY
34790: PUSH
34791: LD_INT 4
34793: ARRAY
34794: STR
34795: PUSH
34796: LD_STRING )
34798: STR
34799: PPUSH
34800: CALL_OW 559
34804: GO 34714
34806: POP
34807: POP
// end ; end ;
34808: LD_VAR 0 1
34812: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34813: LD_EXP 114
34817: IFFALSE 35502
34819: GO 34821
34821: DISABLE
34822: LD_INT 0
34824: PPUSH
34825: PPUSH
34826: PPUSH
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
// begin enable ;
34833: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34834: LD_ADDR_VAR 0 3
34838: PUSH
34839: LD_EXP 114
34843: PPUSH
34844: CALL 76965 0 1
34848: ST_TO_ADDR
// if not list then
34849: LD_VAR 0 3
34853: NOT
34854: IFFALSE 34858
// exit ;
34856: GO 35502
// for i := 1 to list do
34858: LD_ADDR_VAR 0 1
34862: PUSH
34863: DOUBLE
34864: LD_INT 1
34866: DEC
34867: ST_TO_ADDR
34868: LD_VAR 0 3
34872: PUSH
34873: FOR_TO
34874: IFFALSE 35500
// begin depot := list [ i ] [ 2 ] ;
34876: LD_ADDR_VAR 0 8
34880: PUSH
34881: LD_VAR 0 3
34885: PUSH
34886: LD_VAR 0 1
34890: ARRAY
34891: PUSH
34892: LD_INT 2
34894: ARRAY
34895: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34896: LD_ADDR_VAR 0 5
34900: PUSH
34901: LD_VAR 0 3
34905: PUSH
34906: LD_VAR 0 1
34910: ARRAY
34911: PUSH
34912: LD_INT 1
34914: ARRAY
34915: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34916: LD_VAR 0 8
34920: PPUSH
34921: CALL_OW 301
34925: PUSH
34926: LD_VAR 0 5
34930: PUSH
34931: LD_VAR 0 8
34935: PPUSH
34936: CALL_OW 255
34940: NONEQUAL
34941: OR
34942: IFFALSE 34971
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34944: LD_ADDR_EXP 114
34948: PUSH
34949: LD_EXP 114
34953: PPUSH
34954: LD_VAR 0 8
34958: PPUSH
34959: LD_INT 0
34961: PPUSH
34962: CALL_OW 1
34966: ST_TO_ADDR
// exit ;
34967: POP
34968: POP
34969: GO 35502
// end ; x := list [ i ] [ 3 ] ;
34971: LD_ADDR_VAR 0 6
34975: PUSH
34976: LD_VAR 0 3
34980: PUSH
34981: LD_VAR 0 1
34985: ARRAY
34986: PUSH
34987: LD_INT 3
34989: ARRAY
34990: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34991: LD_ADDR_VAR 0 7
34995: PUSH
34996: LD_VAR 0 3
35000: PUSH
35001: LD_VAR 0 1
35005: ARRAY
35006: PUSH
35007: LD_INT 4
35009: ARRAY
35010: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35011: LD_ADDR_VAR 0 9
35015: PUSH
35016: LD_VAR 0 6
35020: PPUSH
35021: LD_VAR 0 7
35025: PPUSH
35026: LD_INT 16
35028: PPUSH
35029: CALL 75553 0 3
35033: ST_TO_ADDR
// if not cratesNearbyPoint then
35034: LD_VAR 0 9
35038: NOT
35039: IFFALSE 35045
// exit ;
35041: POP
35042: POP
35043: GO 35502
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35045: LD_ADDR_VAR 0 4
35049: PUSH
35050: LD_INT 22
35052: PUSH
35053: LD_VAR 0 5
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: LD_INT 60
35067: PUSH
35068: EMPTY
35069: LIST
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 91
35077: PUSH
35078: LD_VAR 0 8
35082: PUSH
35083: LD_INT 6
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: LD_INT 25
35096: PUSH
35097: LD_INT 2
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 25
35106: PUSH
35107: LD_INT 16
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: LIST
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: PPUSH
35125: CALL_OW 69
35129: PUSH
35130: LD_VAR 0 8
35134: PPUSH
35135: CALL_OW 313
35139: PPUSH
35140: LD_INT 3
35142: PUSH
35143: LD_INT 60
35145: PUSH
35146: EMPTY
35147: LIST
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 25
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 25
35168: PUSH
35169: LD_INT 16
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PPUSH
35185: CALL_OW 72
35189: UNION
35190: ST_TO_ADDR
// if tmp then
35191: LD_VAR 0 4
35195: IFFALSE 35275
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35197: LD_ADDR_VAR 0 4
35201: PUSH
35202: LD_VAR 0 4
35206: PPUSH
35207: LD_INT 3
35209: PPUSH
35210: CALL 73522 0 2
35214: ST_TO_ADDR
// for j in tmp do
35215: LD_ADDR_VAR 0 2
35219: PUSH
35220: LD_VAR 0 4
35224: PUSH
35225: FOR_IN
35226: IFFALSE 35269
// begin if IsInUnit ( j ) then
35228: LD_VAR 0 2
35232: PPUSH
35233: CALL_OW 310
35237: IFFALSE 35248
// ComExit ( j ) ;
35239: LD_VAR 0 2
35243: PPUSH
35244: CALL 73605 0 1
// AddComCollect ( j , x , y ) ;
35248: LD_VAR 0 2
35252: PPUSH
35253: LD_VAR 0 6
35257: PPUSH
35258: LD_VAR 0 7
35262: PPUSH
35263: CALL_OW 177
// end ;
35267: GO 35225
35269: POP
35270: POP
// exit ;
35271: POP
35272: POP
35273: GO 35502
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35275: LD_ADDR_VAR 0 4
35279: PUSH
35280: LD_INT 22
35282: PUSH
35283: LD_VAR 0 5
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 91
35294: PUSH
35295: LD_VAR 0 8
35299: PUSH
35300: LD_INT 8
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 34
35313: PUSH
35314: LD_INT 12
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 34
35323: PUSH
35324: LD_INT 51
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 34
35333: PUSH
35334: LD_INT 32
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 34
35343: PUSH
35344: LD_INT 89
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: LIST
35362: PPUSH
35363: CALL_OW 69
35367: ST_TO_ADDR
// if tmp then
35368: LD_VAR 0 4
35372: IFFALSE 35498
// begin for j in tmp do
35374: LD_ADDR_VAR 0 2
35378: PUSH
35379: LD_VAR 0 4
35383: PUSH
35384: FOR_IN
35385: IFFALSE 35496
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35387: LD_VAR 0 2
35391: PPUSH
35392: CALL_OW 262
35396: PUSH
35397: LD_INT 3
35399: EQUAL
35400: PUSH
35401: LD_VAR 0 2
35405: PPUSH
35406: CALL_OW 261
35410: PUSH
35411: LD_INT 20
35413: GREATER
35414: OR
35415: PUSH
35416: LD_VAR 0 2
35420: PPUSH
35421: CALL_OW 314
35425: NOT
35426: AND
35427: PUSH
35428: LD_VAR 0 2
35432: PPUSH
35433: CALL_OW 263
35437: PUSH
35438: LD_INT 1
35440: NONEQUAL
35441: PUSH
35442: LD_VAR 0 2
35446: PPUSH
35447: CALL_OW 311
35451: OR
35452: AND
35453: IFFALSE 35494
// begin ComCollect ( j , x , y ) ;
35455: LD_VAR 0 2
35459: PPUSH
35460: LD_VAR 0 6
35464: PPUSH
35465: LD_VAR 0 7
35469: PPUSH
35470: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35474: LD_VAR 0 2
35478: PPUSH
35479: LD_VAR 0 8
35483: PPUSH
35484: CALL_OW 172
// exit ;
35488: POP
35489: POP
35490: POP
35491: POP
35492: GO 35502
// end ;
35494: GO 35384
35496: POP
35497: POP
// end ; end ;
35498: GO 34873
35500: POP
35501: POP
// end ; end_of_file end_of_file
35502: PPOPN 9
35504: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35505: LD_INT 0
35507: PPUSH
35508: PPUSH
// if exist_mode then
35509: LD_VAR 0 2
35513: IFFALSE 35538
// unit := CreateCharacter ( prefix & ident ) else
35515: LD_ADDR_VAR 0 5
35519: PUSH
35520: LD_VAR 0 3
35524: PUSH
35525: LD_VAR 0 1
35529: STR
35530: PPUSH
35531: CALL_OW 34
35535: ST_TO_ADDR
35536: GO 35553
// unit := NewCharacter ( ident ) ;
35538: LD_ADDR_VAR 0 5
35542: PUSH
35543: LD_VAR 0 1
35547: PPUSH
35548: CALL_OW 25
35552: ST_TO_ADDR
// result := unit ;
35553: LD_ADDR_VAR 0 4
35557: PUSH
35558: LD_VAR 0 5
35562: ST_TO_ADDR
// end ;
35563: LD_VAR 0 4
35567: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35568: LD_INT 0
35570: PPUSH
35571: PPUSH
// if not side or not nation then
35572: LD_VAR 0 1
35576: NOT
35577: PUSH
35578: LD_VAR 0 2
35582: NOT
35583: OR
35584: IFFALSE 35588
// exit ;
35586: GO 36356
// case nation of nation_american :
35588: LD_VAR 0 2
35592: PUSH
35593: LD_INT 1
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35601
35599: GO 35815
35601: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35602: LD_ADDR_VAR 0 4
35606: PUSH
35607: LD_INT 35
35609: PUSH
35610: LD_INT 45
35612: PUSH
35613: LD_INT 46
35615: PUSH
35616: LD_INT 47
35618: PUSH
35619: LD_INT 82
35621: PUSH
35622: LD_INT 83
35624: PUSH
35625: LD_INT 84
35627: PUSH
35628: LD_INT 85
35630: PUSH
35631: LD_INT 86
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 6
35642: PUSH
35643: LD_INT 15
35645: PUSH
35646: LD_INT 16
35648: PUSH
35649: LD_INT 7
35651: PUSH
35652: LD_INT 12
35654: PUSH
35655: LD_INT 13
35657: PUSH
35658: LD_INT 10
35660: PUSH
35661: LD_INT 14
35663: PUSH
35664: LD_INT 20
35666: PUSH
35667: LD_INT 21
35669: PUSH
35670: LD_INT 22
35672: PUSH
35673: LD_INT 25
35675: PUSH
35676: LD_INT 32
35678: PUSH
35679: LD_INT 27
35681: PUSH
35682: LD_INT 36
35684: PUSH
35685: LD_INT 69
35687: PUSH
35688: LD_INT 39
35690: PUSH
35691: LD_INT 34
35693: PUSH
35694: LD_INT 40
35696: PUSH
35697: LD_INT 48
35699: PUSH
35700: LD_INT 49
35702: PUSH
35703: LD_INT 50
35705: PUSH
35706: LD_INT 51
35708: PUSH
35709: LD_INT 52
35711: PUSH
35712: LD_INT 53
35714: PUSH
35715: LD_INT 54
35717: PUSH
35718: LD_INT 55
35720: PUSH
35721: LD_INT 56
35723: PUSH
35724: LD_INT 57
35726: PUSH
35727: LD_INT 58
35729: PUSH
35730: LD_INT 59
35732: PUSH
35733: LD_INT 60
35735: PUSH
35736: LD_INT 61
35738: PUSH
35739: LD_INT 62
35741: PUSH
35742: LD_INT 80
35744: PUSH
35745: LD_INT 82
35747: PUSH
35748: LD_INT 83
35750: PUSH
35751: LD_INT 84
35753: PUSH
35754: LD_INT 85
35756: PUSH
35757: LD_INT 86
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
35813: GO 36280
35815: LD_INT 2
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35823
35821: GO 36049
35823: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35824: LD_ADDR_VAR 0 4
35828: PUSH
35829: LD_INT 35
35831: PUSH
35832: LD_INT 45
35834: PUSH
35835: LD_INT 46
35837: PUSH
35838: LD_INT 47
35840: PUSH
35841: LD_INT 82
35843: PUSH
35844: LD_INT 83
35846: PUSH
35847: LD_INT 84
35849: PUSH
35850: LD_INT 85
35852: PUSH
35853: LD_INT 87
35855: PUSH
35856: LD_INT 70
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 11
35864: PUSH
35865: LD_INT 3
35867: PUSH
35868: LD_INT 4
35870: PUSH
35871: LD_INT 5
35873: PUSH
35874: LD_INT 6
35876: PUSH
35877: LD_INT 15
35879: PUSH
35880: LD_INT 18
35882: PUSH
35883: LD_INT 7
35885: PUSH
35886: LD_INT 17
35888: PUSH
35889: LD_INT 8
35891: PUSH
35892: LD_INT 20
35894: PUSH
35895: LD_INT 21
35897: PUSH
35898: LD_INT 22
35900: PUSH
35901: LD_INT 72
35903: PUSH
35904: LD_INT 26
35906: PUSH
35907: LD_INT 69
35909: PUSH
35910: LD_INT 39
35912: PUSH
35913: LD_INT 40
35915: PUSH
35916: LD_INT 41
35918: PUSH
35919: LD_INT 42
35921: PUSH
35922: LD_INT 43
35924: PUSH
35925: LD_INT 48
35927: PUSH
35928: LD_INT 49
35930: PUSH
35931: LD_INT 50
35933: PUSH
35934: LD_INT 51
35936: PUSH
35937: LD_INT 52
35939: PUSH
35940: LD_INT 53
35942: PUSH
35943: LD_INT 54
35945: PUSH
35946: LD_INT 55
35948: PUSH
35949: LD_INT 56
35951: PUSH
35952: LD_INT 60
35954: PUSH
35955: LD_INT 61
35957: PUSH
35958: LD_INT 62
35960: PUSH
35961: LD_INT 66
35963: PUSH
35964: LD_INT 67
35966: PUSH
35967: LD_INT 68
35969: PUSH
35970: LD_INT 81
35972: PUSH
35973: LD_INT 82
35975: PUSH
35976: LD_INT 83
35978: PUSH
35979: LD_INT 84
35981: PUSH
35982: LD_INT 85
35984: PUSH
35985: LD_INT 87
35987: PUSH
35988: LD_INT 88
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: ST_TO_ADDR
36047: GO 36280
36049: LD_INT 3
36051: DOUBLE
36052: EQUAL
36053: IFTRUE 36057
36055: GO 36279
36057: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36058: LD_ADDR_VAR 0 4
36062: PUSH
36063: LD_INT 46
36065: PUSH
36066: LD_INT 47
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: LD_INT 82
36077: PUSH
36078: LD_INT 83
36080: PUSH
36081: LD_INT 84
36083: PUSH
36084: LD_INT 85
36086: PUSH
36087: LD_INT 86
36089: PUSH
36090: LD_INT 11
36092: PUSH
36093: LD_INT 9
36095: PUSH
36096: LD_INT 20
36098: PUSH
36099: LD_INT 19
36101: PUSH
36102: LD_INT 21
36104: PUSH
36105: LD_INT 24
36107: PUSH
36108: LD_INT 22
36110: PUSH
36111: LD_INT 25
36113: PUSH
36114: LD_INT 28
36116: PUSH
36117: LD_INT 29
36119: PUSH
36120: LD_INT 30
36122: PUSH
36123: LD_INT 31
36125: PUSH
36126: LD_INT 37
36128: PUSH
36129: LD_INT 38
36131: PUSH
36132: LD_INT 32
36134: PUSH
36135: LD_INT 27
36137: PUSH
36138: LD_INT 33
36140: PUSH
36141: LD_INT 69
36143: PUSH
36144: LD_INT 39
36146: PUSH
36147: LD_INT 34
36149: PUSH
36150: LD_INT 40
36152: PUSH
36153: LD_INT 71
36155: PUSH
36156: LD_INT 23
36158: PUSH
36159: LD_INT 44
36161: PUSH
36162: LD_INT 48
36164: PUSH
36165: LD_INT 49
36167: PUSH
36168: LD_INT 50
36170: PUSH
36171: LD_INT 51
36173: PUSH
36174: LD_INT 52
36176: PUSH
36177: LD_INT 53
36179: PUSH
36180: LD_INT 54
36182: PUSH
36183: LD_INT 55
36185: PUSH
36186: LD_INT 56
36188: PUSH
36189: LD_INT 57
36191: PUSH
36192: LD_INT 58
36194: PUSH
36195: LD_INT 59
36197: PUSH
36198: LD_INT 63
36200: PUSH
36201: LD_INT 64
36203: PUSH
36204: LD_INT 65
36206: PUSH
36207: LD_INT 82
36209: PUSH
36210: LD_INT 83
36212: PUSH
36213: LD_INT 84
36215: PUSH
36216: LD_INT 85
36218: PUSH
36219: LD_INT 86
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: ST_TO_ADDR
36277: GO 36280
36279: POP
// if state > - 1 and state < 3 then
36280: LD_VAR 0 3
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: GREATER
36289: PUSH
36290: LD_VAR 0 3
36294: PUSH
36295: LD_INT 3
36297: LESS
36298: AND
36299: IFFALSE 36356
// for i in result do
36301: LD_ADDR_VAR 0 5
36305: PUSH
36306: LD_VAR 0 4
36310: PUSH
36311: FOR_IN
36312: IFFALSE 36354
// if GetTech ( i , side ) <> state then
36314: LD_VAR 0 5
36318: PPUSH
36319: LD_VAR 0 1
36323: PPUSH
36324: CALL_OW 321
36328: PUSH
36329: LD_VAR 0 3
36333: NONEQUAL
36334: IFFALSE 36352
// result := result diff i ;
36336: LD_ADDR_VAR 0 4
36340: PUSH
36341: LD_VAR 0 4
36345: PUSH
36346: LD_VAR 0 5
36350: DIFF
36351: ST_TO_ADDR
36352: GO 36311
36354: POP
36355: POP
// end ;
36356: LD_VAR 0 4
36360: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36361: LD_INT 0
36363: PPUSH
36364: PPUSH
36365: PPUSH
// result := true ;
36366: LD_ADDR_VAR 0 3
36370: PUSH
36371: LD_INT 1
36373: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36374: LD_ADDR_VAR 0 5
36378: PUSH
36379: LD_VAR 0 2
36383: PPUSH
36384: CALL_OW 480
36388: ST_TO_ADDR
// if not tmp then
36389: LD_VAR 0 5
36393: NOT
36394: IFFALSE 36398
// exit ;
36396: GO 36447
// for i in tmp do
36398: LD_ADDR_VAR 0 4
36402: PUSH
36403: LD_VAR 0 5
36407: PUSH
36408: FOR_IN
36409: IFFALSE 36445
// if GetTech ( i , side ) <> state_researched then
36411: LD_VAR 0 4
36415: PPUSH
36416: LD_VAR 0 1
36420: PPUSH
36421: CALL_OW 321
36425: PUSH
36426: LD_INT 2
36428: NONEQUAL
36429: IFFALSE 36443
// begin result := false ;
36431: LD_ADDR_VAR 0 3
36435: PUSH
36436: LD_INT 0
36438: ST_TO_ADDR
// exit ;
36439: POP
36440: POP
36441: GO 36447
// end ;
36443: GO 36408
36445: POP
36446: POP
// end ;
36447: LD_VAR 0 3
36451: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36452: LD_INT 0
36454: PPUSH
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
36459: PPUSH
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36467: LD_VAR 0 1
36471: NOT
36472: PUSH
36473: LD_VAR 0 1
36477: PPUSH
36478: CALL_OW 257
36482: PUSH
36483: LD_INT 9
36485: NONEQUAL
36486: OR
36487: IFFALSE 36491
// exit ;
36489: GO 37064
// side := GetSide ( unit ) ;
36491: LD_ADDR_VAR 0 9
36495: PUSH
36496: LD_VAR 0 1
36500: PPUSH
36501: CALL_OW 255
36505: ST_TO_ADDR
// tech_space := tech_spacanom ;
36506: LD_ADDR_VAR 0 12
36510: PUSH
36511: LD_INT 29
36513: ST_TO_ADDR
// tech_time := tech_taurad ;
36514: LD_ADDR_VAR 0 13
36518: PUSH
36519: LD_INT 28
36521: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36522: LD_ADDR_VAR 0 11
36526: PUSH
36527: LD_VAR 0 1
36531: PPUSH
36532: CALL_OW 310
36536: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36537: LD_VAR 0 11
36541: PPUSH
36542: CALL_OW 247
36546: PUSH
36547: LD_INT 2
36549: EQUAL
36550: IFFALSE 36554
// exit ;
36552: GO 37064
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36554: LD_ADDR_VAR 0 8
36558: PUSH
36559: LD_INT 81
36561: PUSH
36562: LD_VAR 0 9
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 3
36573: PUSH
36574: LD_INT 21
36576: PUSH
36577: LD_INT 3
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PPUSH
36592: CALL_OW 69
36596: ST_TO_ADDR
// if not tmp then
36597: LD_VAR 0 8
36601: NOT
36602: IFFALSE 36606
// exit ;
36604: GO 37064
// if in_unit then
36606: LD_VAR 0 11
36610: IFFALSE 36634
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36612: LD_ADDR_VAR 0 10
36616: PUSH
36617: LD_VAR 0 8
36621: PPUSH
36622: LD_VAR 0 11
36626: PPUSH
36627: CALL_OW 74
36631: ST_TO_ADDR
36632: GO 36654
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36634: LD_ADDR_VAR 0 10
36638: PUSH
36639: LD_VAR 0 8
36643: PPUSH
36644: LD_VAR 0 1
36648: PPUSH
36649: CALL_OW 74
36653: ST_TO_ADDR
// if not enemy then
36654: LD_VAR 0 10
36658: NOT
36659: IFFALSE 36663
// exit ;
36661: GO 37064
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36663: LD_VAR 0 11
36667: PUSH
36668: LD_VAR 0 11
36672: PPUSH
36673: LD_VAR 0 10
36677: PPUSH
36678: CALL_OW 296
36682: PUSH
36683: LD_INT 13
36685: GREATER
36686: AND
36687: PUSH
36688: LD_VAR 0 1
36692: PPUSH
36693: LD_VAR 0 10
36697: PPUSH
36698: CALL_OW 296
36702: PUSH
36703: LD_INT 12
36705: GREATER
36706: OR
36707: IFFALSE 36711
// exit ;
36709: GO 37064
// missile := [ 1 ] ;
36711: LD_ADDR_VAR 0 14
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: EMPTY
36720: LIST
36721: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36722: LD_VAR 0 9
36726: PPUSH
36727: LD_VAR 0 12
36731: PPUSH
36732: CALL_OW 325
36736: IFFALSE 36765
// missile := Replace ( missile , missile + 1 , 2 ) ;
36738: LD_ADDR_VAR 0 14
36742: PUSH
36743: LD_VAR 0 14
36747: PPUSH
36748: LD_VAR 0 14
36752: PUSH
36753: LD_INT 1
36755: PLUS
36756: PPUSH
36757: LD_INT 2
36759: PPUSH
36760: CALL_OW 1
36764: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36765: LD_VAR 0 9
36769: PPUSH
36770: LD_VAR 0 13
36774: PPUSH
36775: CALL_OW 325
36779: PUSH
36780: LD_VAR 0 10
36784: PPUSH
36785: CALL_OW 255
36789: PPUSH
36790: LD_VAR 0 13
36794: PPUSH
36795: CALL_OW 325
36799: NOT
36800: AND
36801: IFFALSE 36830
// missile := Replace ( missile , missile + 1 , 3 ) ;
36803: LD_ADDR_VAR 0 14
36807: PUSH
36808: LD_VAR 0 14
36812: PPUSH
36813: LD_VAR 0 14
36817: PUSH
36818: LD_INT 1
36820: PLUS
36821: PPUSH
36822: LD_INT 3
36824: PPUSH
36825: CALL_OW 1
36829: ST_TO_ADDR
// if missile < 2 then
36830: LD_VAR 0 14
36834: PUSH
36835: LD_INT 2
36837: LESS
36838: IFFALSE 36842
// exit ;
36840: GO 37064
// x := GetX ( enemy ) ;
36842: LD_ADDR_VAR 0 4
36846: PUSH
36847: LD_VAR 0 10
36851: PPUSH
36852: CALL_OW 250
36856: ST_TO_ADDR
// y := GetY ( enemy ) ;
36857: LD_ADDR_VAR 0 5
36861: PUSH
36862: LD_VAR 0 10
36866: PPUSH
36867: CALL_OW 251
36871: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36872: LD_ADDR_VAR 0 6
36876: PUSH
36877: LD_VAR 0 4
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PPUSH
36886: LD_INT 1
36888: PPUSH
36889: CALL_OW 12
36893: PLUS
36894: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36895: LD_ADDR_VAR 0 7
36899: PUSH
36900: LD_VAR 0 5
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PPUSH
36909: LD_INT 1
36911: PPUSH
36912: CALL_OW 12
36916: PLUS
36917: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36918: LD_VAR 0 6
36922: PPUSH
36923: LD_VAR 0 7
36927: PPUSH
36928: CALL_OW 488
36932: NOT
36933: IFFALSE 36955
// begin _x := x ;
36935: LD_ADDR_VAR 0 6
36939: PUSH
36940: LD_VAR 0 4
36944: ST_TO_ADDR
// _y := y ;
36945: LD_ADDR_VAR 0 7
36949: PUSH
36950: LD_VAR 0 5
36954: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36955: LD_ADDR_VAR 0 3
36959: PUSH
36960: LD_INT 1
36962: PPUSH
36963: LD_VAR 0 14
36967: PPUSH
36968: CALL_OW 12
36972: ST_TO_ADDR
// case i of 1 :
36973: LD_VAR 0 3
36977: PUSH
36978: LD_INT 1
36980: DOUBLE
36981: EQUAL
36982: IFTRUE 36986
36984: GO 37003
36986: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36987: LD_VAR 0 1
36991: PPUSH
36992: LD_VAR 0 10
36996: PPUSH
36997: CALL_OW 115
37001: GO 37064
37003: LD_INT 2
37005: DOUBLE
37006: EQUAL
37007: IFTRUE 37011
37009: GO 37033
37011: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37012: LD_VAR 0 1
37016: PPUSH
37017: LD_VAR 0 6
37021: PPUSH
37022: LD_VAR 0 7
37026: PPUSH
37027: CALL_OW 153
37031: GO 37064
37033: LD_INT 3
37035: DOUBLE
37036: EQUAL
37037: IFTRUE 37041
37039: GO 37063
37041: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37042: LD_VAR 0 1
37046: PPUSH
37047: LD_VAR 0 6
37051: PPUSH
37052: LD_VAR 0 7
37056: PPUSH
37057: CALL_OW 154
37061: GO 37064
37063: POP
// end ;
37064: LD_VAR 0 2
37068: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37069: LD_INT 0
37071: PPUSH
37072: PPUSH
37073: PPUSH
37074: PPUSH
37075: PPUSH
37076: PPUSH
// if not unit or not building then
37077: LD_VAR 0 1
37081: NOT
37082: PUSH
37083: LD_VAR 0 2
37087: NOT
37088: OR
37089: IFFALSE 37093
// exit ;
37091: GO 37251
// x := GetX ( building ) ;
37093: LD_ADDR_VAR 0 5
37097: PUSH
37098: LD_VAR 0 2
37102: PPUSH
37103: CALL_OW 250
37107: ST_TO_ADDR
// y := GetY ( building ) ;
37108: LD_ADDR_VAR 0 6
37112: PUSH
37113: LD_VAR 0 2
37117: PPUSH
37118: CALL_OW 251
37122: ST_TO_ADDR
// for i = 0 to 5 do
37123: LD_ADDR_VAR 0 4
37127: PUSH
37128: DOUBLE
37129: LD_INT 0
37131: DEC
37132: ST_TO_ADDR
37133: LD_INT 5
37135: PUSH
37136: FOR_TO
37137: IFFALSE 37249
// begin _x := ShiftX ( x , i , 3 ) ;
37139: LD_ADDR_VAR 0 7
37143: PUSH
37144: LD_VAR 0 5
37148: PPUSH
37149: LD_VAR 0 4
37153: PPUSH
37154: LD_INT 3
37156: PPUSH
37157: CALL_OW 272
37161: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37162: LD_ADDR_VAR 0 8
37166: PUSH
37167: LD_VAR 0 6
37171: PPUSH
37172: LD_VAR 0 4
37176: PPUSH
37177: LD_INT 3
37179: PPUSH
37180: CALL_OW 273
37184: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37185: LD_VAR 0 7
37189: PPUSH
37190: LD_VAR 0 8
37194: PPUSH
37195: CALL_OW 488
37199: NOT
37200: IFFALSE 37204
// continue ;
37202: GO 37136
// if HexInfo ( _x , _y ) = 0 then
37204: LD_VAR 0 7
37208: PPUSH
37209: LD_VAR 0 8
37213: PPUSH
37214: CALL_OW 428
37218: PUSH
37219: LD_INT 0
37221: EQUAL
37222: IFFALSE 37247
// begin ComMoveXY ( unit , _x , _y ) ;
37224: LD_VAR 0 1
37228: PPUSH
37229: LD_VAR 0 7
37233: PPUSH
37234: LD_VAR 0 8
37238: PPUSH
37239: CALL_OW 111
// exit ;
37243: POP
37244: POP
37245: GO 37251
// end ; end ;
37247: GO 37136
37249: POP
37250: POP
// end ;
37251: LD_VAR 0 3
37255: RET
// export function ScanBase ( side , base_area ) ; begin
37256: LD_INT 0
37258: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37259: LD_ADDR_VAR 0 3
37263: PUSH
37264: LD_VAR 0 2
37268: PPUSH
37269: LD_INT 81
37271: PUSH
37272: LD_VAR 0 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PPUSH
37281: CALL_OW 70
37285: ST_TO_ADDR
// end ;
37286: LD_VAR 0 3
37290: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37291: LD_INT 0
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
// result := false ;
37297: LD_ADDR_VAR 0 2
37301: PUSH
37302: LD_INT 0
37304: ST_TO_ADDR
// side := GetSide ( unit ) ;
37305: LD_ADDR_VAR 0 3
37309: PUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: CALL_OW 255
37319: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37320: LD_ADDR_VAR 0 4
37324: PUSH
37325: LD_VAR 0 1
37329: PPUSH
37330: CALL_OW 248
37334: ST_TO_ADDR
// case nat of 1 :
37335: LD_VAR 0 4
37339: PUSH
37340: LD_INT 1
37342: DOUBLE
37343: EQUAL
37344: IFTRUE 37348
37346: GO 37359
37348: POP
// tech := tech_lassight ; 2 :
37349: LD_ADDR_VAR 0 5
37353: PUSH
37354: LD_INT 12
37356: ST_TO_ADDR
37357: GO 37398
37359: LD_INT 2
37361: DOUBLE
37362: EQUAL
37363: IFTRUE 37367
37365: GO 37378
37367: POP
// tech := tech_mortar ; 3 :
37368: LD_ADDR_VAR 0 5
37372: PUSH
37373: LD_INT 41
37375: ST_TO_ADDR
37376: GO 37398
37378: LD_INT 3
37380: DOUBLE
37381: EQUAL
37382: IFTRUE 37386
37384: GO 37397
37386: POP
// tech := tech_bazooka ; end ;
37387: LD_ADDR_VAR 0 5
37391: PUSH
37392: LD_INT 44
37394: ST_TO_ADDR
37395: GO 37398
37397: POP
// if Researched ( side , tech ) then
37398: LD_VAR 0 3
37402: PPUSH
37403: LD_VAR 0 5
37407: PPUSH
37408: CALL_OW 325
37412: IFFALSE 37439
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37414: LD_ADDR_VAR 0 2
37418: PUSH
37419: LD_INT 5
37421: PUSH
37422: LD_INT 8
37424: PUSH
37425: LD_INT 9
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: PUSH
37433: LD_VAR 0 4
37437: ARRAY
37438: ST_TO_ADDR
// end ;
37439: LD_VAR 0 2
37443: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37444: LD_INT 0
37446: PPUSH
37447: PPUSH
37448: PPUSH
// if not mines then
37449: LD_VAR 0 2
37453: NOT
37454: IFFALSE 37458
// exit ;
37456: GO 37602
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37458: LD_ADDR_VAR 0 5
37462: PUSH
37463: LD_INT 81
37465: PUSH
37466: LD_VAR 0 1
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 3
37477: PUSH
37478: LD_INT 21
37480: PUSH
37481: LD_INT 3
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PPUSH
37496: CALL_OW 69
37500: ST_TO_ADDR
// for i in mines do
37501: LD_ADDR_VAR 0 4
37505: PUSH
37506: LD_VAR 0 2
37510: PUSH
37511: FOR_IN
37512: IFFALSE 37600
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37514: LD_VAR 0 4
37518: PUSH
37519: LD_INT 1
37521: ARRAY
37522: PPUSH
37523: LD_VAR 0 4
37527: PUSH
37528: LD_INT 2
37530: ARRAY
37531: PPUSH
37532: CALL_OW 458
37536: NOT
37537: IFFALSE 37541
// continue ;
37539: GO 37511
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37541: LD_VAR 0 4
37545: PUSH
37546: LD_INT 1
37548: ARRAY
37549: PPUSH
37550: LD_VAR 0 4
37554: PUSH
37555: LD_INT 2
37557: ARRAY
37558: PPUSH
37559: CALL_OW 428
37563: PUSH
37564: LD_VAR 0 5
37568: IN
37569: IFFALSE 37598
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37571: LD_VAR 0 4
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: PPUSH
37580: LD_VAR 0 4
37584: PUSH
37585: LD_INT 2
37587: ARRAY
37588: PPUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 456
// end ;
37598: GO 37511
37600: POP
37601: POP
// end ;
37602: LD_VAR 0 3
37606: RET
// export function Count ( array ) ; begin
37607: LD_INT 0
37609: PPUSH
// result := array + 0 ;
37610: LD_ADDR_VAR 0 2
37614: PUSH
37615: LD_VAR 0 1
37619: PUSH
37620: LD_INT 0
37622: PLUS
37623: ST_TO_ADDR
// end ;
37624: LD_VAR 0 2
37628: RET
// export function IsEmpty ( building ) ; begin
37629: LD_INT 0
37631: PPUSH
// if not building then
37632: LD_VAR 0 1
37636: NOT
37637: IFFALSE 37641
// exit ;
37639: GO 37684
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37641: LD_ADDR_VAR 0 2
37645: PUSH
37646: LD_VAR 0 1
37650: PUSH
37651: LD_INT 22
37653: PUSH
37654: LD_VAR 0 1
37658: PPUSH
37659: CALL_OW 255
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 58
37670: PUSH
37671: EMPTY
37672: LIST
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PPUSH
37678: CALL_OW 69
37682: IN
37683: ST_TO_ADDR
// end ;
37684: LD_VAR 0 2
37688: RET
// export function IsNotFull ( building ) ; var places ; begin
37689: LD_INT 0
37691: PPUSH
37692: PPUSH
// if not building then
37693: LD_VAR 0 1
37697: NOT
37698: IFFALSE 37702
// exit ;
37700: GO 37730
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37702: LD_ADDR_VAR 0 2
37706: PUSH
37707: LD_VAR 0 1
37711: PPUSH
37712: LD_INT 3
37714: PUSH
37715: LD_INT 62
37717: PUSH
37718: EMPTY
37719: LIST
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PPUSH
37725: CALL_OW 72
37729: ST_TO_ADDR
// end ;
37730: LD_VAR 0 2
37734: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37735: LD_INT 0
37737: PPUSH
37738: PPUSH
37739: PPUSH
37740: PPUSH
// tmp := [ ] ;
37741: LD_ADDR_VAR 0 3
37745: PUSH
37746: EMPTY
37747: ST_TO_ADDR
// list := [ ] ;
37748: LD_ADDR_VAR 0 5
37752: PUSH
37753: EMPTY
37754: ST_TO_ADDR
// for i = 16 to 25 do
37755: LD_ADDR_VAR 0 4
37759: PUSH
37760: DOUBLE
37761: LD_INT 16
37763: DEC
37764: ST_TO_ADDR
37765: LD_INT 25
37767: PUSH
37768: FOR_TO
37769: IFFALSE 37842
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37771: LD_ADDR_VAR 0 3
37775: PUSH
37776: LD_VAR 0 3
37780: PUSH
37781: LD_INT 22
37783: PUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 255
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 91
37800: PUSH
37801: LD_VAR 0 1
37805: PUSH
37806: LD_INT 6
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 30
37816: PUSH
37817: LD_VAR 0 4
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: PUSH
37831: EMPTY
37832: LIST
37833: PPUSH
37834: CALL_OW 69
37838: ADD
37839: ST_TO_ADDR
37840: GO 37768
37842: POP
37843: POP
// for i = 1 to tmp do
37844: LD_ADDR_VAR 0 4
37848: PUSH
37849: DOUBLE
37850: LD_INT 1
37852: DEC
37853: ST_TO_ADDR
37854: LD_VAR 0 3
37858: PUSH
37859: FOR_TO
37860: IFFALSE 37948
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37862: LD_ADDR_VAR 0 5
37866: PUSH
37867: LD_VAR 0 5
37871: PUSH
37872: LD_VAR 0 3
37876: PUSH
37877: LD_VAR 0 4
37881: ARRAY
37882: PPUSH
37883: CALL_OW 266
37887: PUSH
37888: LD_VAR 0 3
37892: PUSH
37893: LD_VAR 0 4
37897: ARRAY
37898: PPUSH
37899: CALL_OW 250
37903: PUSH
37904: LD_VAR 0 3
37908: PUSH
37909: LD_VAR 0 4
37913: ARRAY
37914: PPUSH
37915: CALL_OW 251
37919: PUSH
37920: LD_VAR 0 3
37924: PUSH
37925: LD_VAR 0 4
37929: ARRAY
37930: PPUSH
37931: CALL_OW 254
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: PUSH
37942: EMPTY
37943: LIST
37944: ADD
37945: ST_TO_ADDR
37946: GO 37859
37948: POP
37949: POP
// result := list ;
37950: LD_ADDR_VAR 0 2
37954: PUSH
37955: LD_VAR 0 5
37959: ST_TO_ADDR
// end ;
37960: LD_VAR 0 2
37964: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37965: LD_INT 0
37967: PPUSH
37968: PPUSH
37969: PPUSH
37970: PPUSH
37971: PPUSH
37972: PPUSH
37973: PPUSH
// if not factory then
37974: LD_VAR 0 1
37978: NOT
37979: IFFALSE 37983
// exit ;
37981: GO 38576
// if control = control_apeman then
37983: LD_VAR 0 4
37987: PUSH
37988: LD_INT 5
37990: EQUAL
37991: IFFALSE 38100
// begin tmp := UnitsInside ( factory ) ;
37993: LD_ADDR_VAR 0 8
37997: PUSH
37998: LD_VAR 0 1
38002: PPUSH
38003: CALL_OW 313
38007: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38008: LD_VAR 0 8
38012: PPUSH
38013: LD_INT 25
38015: PUSH
38016: LD_INT 12
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PPUSH
38023: CALL_OW 72
38027: NOT
38028: IFFALSE 38038
// control := control_manual ;
38030: LD_ADDR_VAR 0 4
38034: PUSH
38035: LD_INT 1
38037: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38038: LD_ADDR_VAR 0 8
38042: PUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL 37735 0 1
38052: ST_TO_ADDR
// if tmp then
38053: LD_VAR 0 8
38057: IFFALSE 38100
// begin for i in tmp do
38059: LD_ADDR_VAR 0 7
38063: PUSH
38064: LD_VAR 0 8
38068: PUSH
38069: FOR_IN
38070: IFFALSE 38098
// if i [ 1 ] = b_ext_radio then
38072: LD_VAR 0 7
38076: PUSH
38077: LD_INT 1
38079: ARRAY
38080: PUSH
38081: LD_INT 22
38083: EQUAL
38084: IFFALSE 38096
// begin control := control_remote ;
38086: LD_ADDR_VAR 0 4
38090: PUSH
38091: LD_INT 2
38093: ST_TO_ADDR
// break ;
38094: GO 38098
// end ;
38096: GO 38069
38098: POP
38099: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38100: LD_VAR 0 1
38104: PPUSH
38105: LD_VAR 0 2
38109: PPUSH
38110: LD_VAR 0 3
38114: PPUSH
38115: LD_VAR 0 4
38119: PPUSH
38120: LD_VAR 0 5
38124: PPUSH
38125: CALL_OW 448
38129: IFFALSE 38164
// begin result := [ chassis , engine , control , weapon ] ;
38131: LD_ADDR_VAR 0 6
38135: PUSH
38136: LD_VAR 0 2
38140: PUSH
38141: LD_VAR 0 3
38145: PUSH
38146: LD_VAR 0 4
38150: PUSH
38151: LD_VAR 0 5
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: ST_TO_ADDR
// exit ;
38162: GO 38576
// end ; _chassis := AvailableChassisList ( factory ) ;
38164: LD_ADDR_VAR 0 9
38168: PUSH
38169: LD_VAR 0 1
38173: PPUSH
38174: CALL_OW 475
38178: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38179: LD_ADDR_VAR 0 11
38183: PUSH
38184: LD_VAR 0 1
38188: PPUSH
38189: CALL_OW 476
38193: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38194: LD_ADDR_VAR 0 12
38198: PUSH
38199: LD_VAR 0 1
38203: PPUSH
38204: CALL_OW 477
38208: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38209: LD_ADDR_VAR 0 10
38213: PUSH
38214: LD_VAR 0 1
38218: PPUSH
38219: CALL_OW 478
38223: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38224: LD_VAR 0 9
38228: NOT
38229: PUSH
38230: LD_VAR 0 11
38234: NOT
38235: OR
38236: PUSH
38237: LD_VAR 0 12
38241: NOT
38242: OR
38243: PUSH
38244: LD_VAR 0 10
38248: NOT
38249: OR
38250: IFFALSE 38285
// begin result := [ chassis , engine , control , weapon ] ;
38252: LD_ADDR_VAR 0 6
38256: PUSH
38257: LD_VAR 0 2
38261: PUSH
38262: LD_VAR 0 3
38266: PUSH
38267: LD_VAR 0 4
38271: PUSH
38272: LD_VAR 0 5
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: ST_TO_ADDR
// exit ;
38283: GO 38576
// end ; if not chassis in _chassis then
38285: LD_VAR 0 2
38289: PUSH
38290: LD_VAR 0 9
38294: IN
38295: NOT
38296: IFFALSE 38322
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38298: LD_ADDR_VAR 0 2
38302: PUSH
38303: LD_VAR 0 9
38307: PUSH
38308: LD_INT 1
38310: PPUSH
38311: LD_VAR 0 9
38315: PPUSH
38316: CALL_OW 12
38320: ARRAY
38321: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38322: LD_VAR 0 2
38326: PPUSH
38327: LD_VAR 0 3
38331: PPUSH
38332: CALL 38581 0 2
38336: NOT
38337: IFFALSE 38396
// repeat engine := _engine [ 1 ] ;
38339: LD_ADDR_VAR 0 3
38343: PUSH
38344: LD_VAR 0 11
38348: PUSH
38349: LD_INT 1
38351: ARRAY
38352: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38353: LD_ADDR_VAR 0 11
38357: PUSH
38358: LD_VAR 0 11
38362: PPUSH
38363: LD_INT 1
38365: PPUSH
38366: CALL_OW 3
38370: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38371: LD_VAR 0 2
38375: PPUSH
38376: LD_VAR 0 3
38380: PPUSH
38381: CALL 38581 0 2
38385: PUSH
38386: LD_VAR 0 11
38390: PUSH
38391: EMPTY
38392: EQUAL
38393: OR
38394: IFFALSE 38339
// if not control in _control then
38396: LD_VAR 0 4
38400: PUSH
38401: LD_VAR 0 12
38405: IN
38406: NOT
38407: IFFALSE 38433
// control := _control [ rand ( 1 , _control ) ] ;
38409: LD_ADDR_VAR 0 4
38413: PUSH
38414: LD_VAR 0 12
38418: PUSH
38419: LD_INT 1
38421: PPUSH
38422: LD_VAR 0 12
38426: PPUSH
38427: CALL_OW 12
38431: ARRAY
38432: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38433: LD_VAR 0 2
38437: PPUSH
38438: LD_VAR 0 5
38442: PPUSH
38443: CALL 38801 0 2
38447: NOT
38448: IFFALSE 38507
// repeat weapon := _weapon [ 1 ] ;
38450: LD_ADDR_VAR 0 5
38454: PUSH
38455: LD_VAR 0 10
38459: PUSH
38460: LD_INT 1
38462: ARRAY
38463: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38464: LD_ADDR_VAR 0 10
38468: PUSH
38469: LD_VAR 0 10
38473: PPUSH
38474: LD_INT 1
38476: PPUSH
38477: CALL_OW 3
38481: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38482: LD_VAR 0 2
38486: PPUSH
38487: LD_VAR 0 5
38491: PPUSH
38492: CALL 38801 0 2
38496: PUSH
38497: LD_VAR 0 10
38501: PUSH
38502: EMPTY
38503: EQUAL
38504: OR
38505: IFFALSE 38450
// result := [ ] ;
38507: LD_ADDR_VAR 0 6
38511: PUSH
38512: EMPTY
38513: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38514: LD_VAR 0 1
38518: PPUSH
38519: LD_VAR 0 2
38523: PPUSH
38524: LD_VAR 0 3
38528: PPUSH
38529: LD_VAR 0 4
38533: PPUSH
38534: LD_VAR 0 5
38538: PPUSH
38539: CALL_OW 448
38543: IFFALSE 38576
// result := [ chassis , engine , control , weapon ] ;
38545: LD_ADDR_VAR 0 6
38549: PUSH
38550: LD_VAR 0 2
38554: PUSH
38555: LD_VAR 0 3
38559: PUSH
38560: LD_VAR 0 4
38564: PUSH
38565: LD_VAR 0 5
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: ST_TO_ADDR
// end ;
38576: LD_VAR 0 6
38580: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38581: LD_INT 0
38583: PPUSH
// if not chassis or not engine then
38584: LD_VAR 0 1
38588: NOT
38589: PUSH
38590: LD_VAR 0 2
38594: NOT
38595: OR
38596: IFFALSE 38600
// exit ;
38598: GO 38796
// case engine of engine_solar :
38600: LD_VAR 0 2
38604: PUSH
38605: LD_INT 2
38607: DOUBLE
38608: EQUAL
38609: IFTRUE 38613
38611: GO 38651
38613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38614: LD_ADDR_VAR 0 3
38618: PUSH
38619: LD_INT 11
38621: PUSH
38622: LD_INT 12
38624: PUSH
38625: LD_INT 13
38627: PUSH
38628: LD_INT 14
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: ST_TO_ADDR
38649: GO 38780
38651: LD_INT 1
38653: DOUBLE
38654: EQUAL
38655: IFTRUE 38659
38657: GO 38721
38659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38660: LD_ADDR_VAR 0 3
38664: PUSH
38665: LD_INT 11
38667: PUSH
38668: LD_INT 12
38670: PUSH
38671: LD_INT 13
38673: PUSH
38674: LD_INT 14
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 3
38685: PUSH
38686: LD_INT 4
38688: PUSH
38689: LD_INT 5
38691: PUSH
38692: LD_INT 21
38694: PUSH
38695: LD_INT 23
38697: PUSH
38698: LD_INT 22
38700: PUSH
38701: LD_INT 24
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: ST_TO_ADDR
38719: GO 38780
38721: LD_INT 3
38723: DOUBLE
38724: EQUAL
38725: IFTRUE 38729
38727: GO 38779
38729: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38730: LD_ADDR_VAR 0 3
38734: PUSH
38735: LD_INT 13
38737: PUSH
38738: LD_INT 14
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: LD_INT 3
38746: PUSH
38747: LD_INT 4
38749: PUSH
38750: LD_INT 5
38752: PUSH
38753: LD_INT 21
38755: PUSH
38756: LD_INT 22
38758: PUSH
38759: LD_INT 23
38761: PUSH
38762: LD_INT 24
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: ST_TO_ADDR
38777: GO 38780
38779: POP
// result := ( chassis in result ) ;
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: LD_VAR 0 1
38789: PUSH
38790: LD_VAR 0 3
38794: IN
38795: ST_TO_ADDR
// end ;
38796: LD_VAR 0 3
38800: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38801: LD_INT 0
38803: PPUSH
// if not chassis or not weapon then
38804: LD_VAR 0 1
38808: NOT
38809: PUSH
38810: LD_VAR 0 2
38814: NOT
38815: OR
38816: IFFALSE 38820
// exit ;
38818: GO 39880
// case weapon of us_machine_gun :
38820: LD_VAR 0 2
38824: PUSH
38825: LD_INT 2
38827: DOUBLE
38828: EQUAL
38829: IFTRUE 38833
38831: GO 38863
38833: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38834: LD_ADDR_VAR 0 3
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: LD_INT 3
38847: PUSH
38848: LD_INT 4
38850: PUSH
38851: LD_INT 5
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: ST_TO_ADDR
38861: GO 39864
38863: LD_INT 3
38865: DOUBLE
38866: EQUAL
38867: IFTRUE 38871
38869: GO 38901
38871: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38872: LD_ADDR_VAR 0 3
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: LD_INT 3
38885: PUSH
38886: LD_INT 4
38888: PUSH
38889: LD_INT 5
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: ST_TO_ADDR
38899: GO 39864
38901: LD_INT 11
38903: DOUBLE
38904: EQUAL
38905: IFTRUE 38909
38907: GO 38939
38909: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38910: LD_ADDR_VAR 0 3
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: LD_INT 4
38926: PUSH
38927: LD_INT 5
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
38937: GO 39864
38939: LD_INT 4
38941: DOUBLE
38942: EQUAL
38943: IFTRUE 38947
38945: GO 38973
38947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38948: LD_ADDR_VAR 0 3
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: LD_INT 4
38961: PUSH
38962: LD_INT 5
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: ST_TO_ADDR
38971: GO 39864
38973: LD_INT 5
38975: DOUBLE
38976: EQUAL
38977: IFTRUE 38981
38979: GO 39007
38981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38982: LD_ADDR_VAR 0 3
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: LD_INT 3
38992: PUSH
38993: LD_INT 4
38995: PUSH
38996: LD_INT 5
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: ST_TO_ADDR
39005: GO 39864
39007: LD_INT 9
39009: DOUBLE
39010: EQUAL
39011: IFTRUE 39015
39013: GO 39041
39015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39016: LD_ADDR_VAR 0 3
39020: PUSH
39021: LD_INT 2
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: LD_INT 4
39029: PUSH
39030: LD_INT 5
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: ST_TO_ADDR
39039: GO 39864
39041: LD_INT 7
39043: DOUBLE
39044: EQUAL
39045: IFTRUE 39049
39047: GO 39075
39049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39050: LD_ADDR_VAR 0 3
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: LD_INT 4
39063: PUSH
39064: LD_INT 5
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: ST_TO_ADDR
39073: GO 39864
39075: LD_INT 12
39077: DOUBLE
39078: EQUAL
39079: IFTRUE 39083
39081: GO 39109
39083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39084: LD_ADDR_VAR 0 3
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: LD_INT 4
39097: PUSH
39098: LD_INT 5
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: ST_TO_ADDR
39107: GO 39864
39109: LD_INT 13
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39143
39117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39118: LD_ADDR_VAR 0 3
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: LD_INT 3
39128: PUSH
39129: LD_INT 4
39131: PUSH
39132: LD_INT 5
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: ST_TO_ADDR
39141: GO 39864
39143: LD_INT 14
39145: DOUBLE
39146: EQUAL
39147: IFTRUE 39151
39149: GO 39169
39151: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39152: LD_ADDR_VAR 0 3
39156: PUSH
39157: LD_INT 4
39159: PUSH
39160: LD_INT 5
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: ST_TO_ADDR
39167: GO 39864
39169: LD_INT 6
39171: DOUBLE
39172: EQUAL
39173: IFTRUE 39177
39175: GO 39195
39177: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39178: LD_ADDR_VAR 0 3
39182: PUSH
39183: LD_INT 4
39185: PUSH
39186: LD_INT 5
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: ST_TO_ADDR
39193: GO 39864
39195: LD_INT 10
39197: DOUBLE
39198: EQUAL
39199: IFTRUE 39203
39201: GO 39221
39203: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39204: LD_ADDR_VAR 0 3
39208: PUSH
39209: LD_INT 4
39211: PUSH
39212: LD_INT 5
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: ST_TO_ADDR
39219: GO 39864
39221: LD_INT 22
39223: DOUBLE
39224: EQUAL
39225: IFTRUE 39229
39227: GO 39255
39229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39230: LD_ADDR_VAR 0 3
39234: PUSH
39235: LD_INT 11
39237: PUSH
39238: LD_INT 12
39240: PUSH
39241: LD_INT 13
39243: PUSH
39244: LD_INT 14
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: ST_TO_ADDR
39253: GO 39864
39255: LD_INT 23
39257: DOUBLE
39258: EQUAL
39259: IFTRUE 39263
39261: GO 39289
39263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39264: LD_ADDR_VAR 0 3
39268: PUSH
39269: LD_INT 11
39271: PUSH
39272: LD_INT 12
39274: PUSH
39275: LD_INT 13
39277: PUSH
39278: LD_INT 14
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
39287: GO 39864
39289: LD_INT 24
39291: DOUBLE
39292: EQUAL
39293: IFTRUE 39297
39295: GO 39323
39297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39298: LD_ADDR_VAR 0 3
39302: PUSH
39303: LD_INT 11
39305: PUSH
39306: LD_INT 12
39308: PUSH
39309: LD_INT 13
39311: PUSH
39312: LD_INT 14
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: ST_TO_ADDR
39321: GO 39864
39323: LD_INT 30
39325: DOUBLE
39326: EQUAL
39327: IFTRUE 39331
39329: GO 39357
39331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39332: LD_ADDR_VAR 0 3
39336: PUSH
39337: LD_INT 11
39339: PUSH
39340: LD_INT 12
39342: PUSH
39343: LD_INT 13
39345: PUSH
39346: LD_INT 14
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: ST_TO_ADDR
39355: GO 39864
39357: LD_INT 25
39359: DOUBLE
39360: EQUAL
39361: IFTRUE 39365
39363: GO 39383
39365: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39366: LD_ADDR_VAR 0 3
39370: PUSH
39371: LD_INT 13
39373: PUSH
39374: LD_INT 14
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: ST_TO_ADDR
39381: GO 39864
39383: LD_INT 27
39385: DOUBLE
39386: EQUAL
39387: IFTRUE 39391
39389: GO 39409
39391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39392: LD_ADDR_VAR 0 3
39396: PUSH
39397: LD_INT 13
39399: PUSH
39400: LD_INT 14
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: ST_TO_ADDR
39407: GO 39864
39409: LD_INT 92
39411: DOUBLE
39412: EQUAL
39413: IFTRUE 39417
39415: GO 39443
39417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39418: LD_ADDR_VAR 0 3
39422: PUSH
39423: LD_INT 11
39425: PUSH
39426: LD_INT 12
39428: PUSH
39429: LD_INT 13
39431: PUSH
39432: LD_INT 14
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
39441: GO 39864
39443: LD_INT 28
39445: DOUBLE
39446: EQUAL
39447: IFTRUE 39451
39449: GO 39469
39451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39452: LD_ADDR_VAR 0 3
39456: PUSH
39457: LD_INT 13
39459: PUSH
39460: LD_INT 14
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: ST_TO_ADDR
39467: GO 39864
39469: LD_INT 29
39471: DOUBLE
39472: EQUAL
39473: IFTRUE 39477
39475: GO 39495
39477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39478: LD_ADDR_VAR 0 3
39482: PUSH
39483: LD_INT 13
39485: PUSH
39486: LD_INT 14
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: ST_TO_ADDR
39493: GO 39864
39495: LD_INT 31
39497: DOUBLE
39498: EQUAL
39499: IFTRUE 39503
39501: GO 39521
39503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39504: LD_ADDR_VAR 0 3
39508: PUSH
39509: LD_INT 13
39511: PUSH
39512: LD_INT 14
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: ST_TO_ADDR
39519: GO 39864
39521: LD_INT 26
39523: DOUBLE
39524: EQUAL
39525: IFTRUE 39529
39527: GO 39547
39529: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39530: LD_ADDR_VAR 0 3
39534: PUSH
39535: LD_INT 13
39537: PUSH
39538: LD_INT 14
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: ST_TO_ADDR
39545: GO 39864
39547: LD_INT 42
39549: DOUBLE
39550: EQUAL
39551: IFTRUE 39555
39553: GO 39581
39555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39556: LD_ADDR_VAR 0 3
39560: PUSH
39561: LD_INT 21
39563: PUSH
39564: LD_INT 22
39566: PUSH
39567: LD_INT 23
39569: PUSH
39570: LD_INT 24
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: ST_TO_ADDR
39579: GO 39864
39581: LD_INT 43
39583: DOUBLE
39584: EQUAL
39585: IFTRUE 39589
39587: GO 39615
39589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39590: LD_ADDR_VAR 0 3
39594: PUSH
39595: LD_INT 21
39597: PUSH
39598: LD_INT 22
39600: PUSH
39601: LD_INT 23
39603: PUSH
39604: LD_INT 24
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: ST_TO_ADDR
39613: GO 39864
39615: LD_INT 44
39617: DOUBLE
39618: EQUAL
39619: IFTRUE 39623
39621: GO 39649
39623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39624: LD_ADDR_VAR 0 3
39628: PUSH
39629: LD_INT 21
39631: PUSH
39632: LD_INT 22
39634: PUSH
39635: LD_INT 23
39637: PUSH
39638: LD_INT 24
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: ST_TO_ADDR
39647: GO 39864
39649: LD_INT 45
39651: DOUBLE
39652: EQUAL
39653: IFTRUE 39657
39655: GO 39683
39657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39658: LD_ADDR_VAR 0 3
39662: PUSH
39663: LD_INT 21
39665: PUSH
39666: LD_INT 22
39668: PUSH
39669: LD_INT 23
39671: PUSH
39672: LD_INT 24
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: ST_TO_ADDR
39681: GO 39864
39683: LD_INT 49
39685: DOUBLE
39686: EQUAL
39687: IFTRUE 39691
39689: GO 39717
39691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39692: LD_ADDR_VAR 0 3
39696: PUSH
39697: LD_INT 21
39699: PUSH
39700: LD_INT 22
39702: PUSH
39703: LD_INT 23
39705: PUSH
39706: LD_INT 24
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: ST_TO_ADDR
39715: GO 39864
39717: LD_INT 51
39719: DOUBLE
39720: EQUAL
39721: IFTRUE 39725
39723: GO 39751
39725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39726: LD_ADDR_VAR 0 3
39730: PUSH
39731: LD_INT 21
39733: PUSH
39734: LD_INT 22
39736: PUSH
39737: LD_INT 23
39739: PUSH
39740: LD_INT 24
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: ST_TO_ADDR
39749: GO 39864
39751: LD_INT 52
39753: DOUBLE
39754: EQUAL
39755: IFTRUE 39759
39757: GO 39785
39759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39760: LD_ADDR_VAR 0 3
39764: PUSH
39765: LD_INT 21
39767: PUSH
39768: LD_INT 22
39770: PUSH
39771: LD_INT 23
39773: PUSH
39774: LD_INT 24
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: ST_TO_ADDR
39783: GO 39864
39785: LD_INT 53
39787: DOUBLE
39788: EQUAL
39789: IFTRUE 39793
39791: GO 39811
39793: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39794: LD_ADDR_VAR 0 3
39798: PUSH
39799: LD_INT 23
39801: PUSH
39802: LD_INT 24
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: ST_TO_ADDR
39809: GO 39864
39811: LD_INT 46
39813: DOUBLE
39814: EQUAL
39815: IFTRUE 39819
39817: GO 39837
39819: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39820: LD_ADDR_VAR 0 3
39824: PUSH
39825: LD_INT 23
39827: PUSH
39828: LD_INT 24
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: ST_TO_ADDR
39835: GO 39864
39837: LD_INT 47
39839: DOUBLE
39840: EQUAL
39841: IFTRUE 39845
39843: GO 39863
39845: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39846: LD_ADDR_VAR 0 3
39850: PUSH
39851: LD_INT 23
39853: PUSH
39854: LD_INT 24
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: ST_TO_ADDR
39861: GO 39864
39863: POP
// result := ( chassis in result ) ;
39864: LD_ADDR_VAR 0 3
39868: PUSH
39869: LD_VAR 0 1
39873: PUSH
39874: LD_VAR 0 3
39878: IN
39879: ST_TO_ADDR
// end ;
39880: LD_VAR 0 3
39884: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39885: LD_INT 0
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
39892: PPUSH
39893: PPUSH
// result := array ;
39894: LD_ADDR_VAR 0 5
39898: PUSH
39899: LD_VAR 0 1
39903: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39904: LD_VAR 0 1
39908: NOT
39909: PUSH
39910: LD_VAR 0 2
39914: NOT
39915: OR
39916: PUSH
39917: LD_VAR 0 3
39921: NOT
39922: OR
39923: PUSH
39924: LD_VAR 0 2
39928: PUSH
39929: LD_VAR 0 1
39933: GREATER
39934: OR
39935: PUSH
39936: LD_VAR 0 3
39940: PUSH
39941: LD_VAR 0 1
39945: GREATER
39946: OR
39947: IFFALSE 39951
// exit ;
39949: GO 40247
// if direction then
39951: LD_VAR 0 4
39955: IFFALSE 40019
// begin d := 1 ;
39957: LD_ADDR_VAR 0 9
39961: PUSH
39962: LD_INT 1
39964: ST_TO_ADDR
// if i_from > i_to then
39965: LD_VAR 0 2
39969: PUSH
39970: LD_VAR 0 3
39974: GREATER
39975: IFFALSE 40001
// length := ( array - i_from ) + i_to else
39977: LD_ADDR_VAR 0 11
39981: PUSH
39982: LD_VAR 0 1
39986: PUSH
39987: LD_VAR 0 2
39991: MINUS
39992: PUSH
39993: LD_VAR 0 3
39997: PLUS
39998: ST_TO_ADDR
39999: GO 40017
// length := i_to - i_from ;
40001: LD_ADDR_VAR 0 11
40005: PUSH
40006: LD_VAR 0 3
40010: PUSH
40011: LD_VAR 0 2
40015: MINUS
40016: ST_TO_ADDR
// end else
40017: GO 40080
// begin d := - 1 ;
40019: LD_ADDR_VAR 0 9
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: ST_TO_ADDR
// if i_from > i_to then
40028: LD_VAR 0 2
40032: PUSH
40033: LD_VAR 0 3
40037: GREATER
40038: IFFALSE 40058
// length := i_from - i_to else
40040: LD_ADDR_VAR 0 11
40044: PUSH
40045: LD_VAR 0 2
40049: PUSH
40050: LD_VAR 0 3
40054: MINUS
40055: ST_TO_ADDR
40056: GO 40080
// length := ( array - i_to ) + i_from ;
40058: LD_ADDR_VAR 0 11
40062: PUSH
40063: LD_VAR 0 1
40067: PUSH
40068: LD_VAR 0 3
40072: MINUS
40073: PUSH
40074: LD_VAR 0 2
40078: PLUS
40079: ST_TO_ADDR
// end ; if not length then
40080: LD_VAR 0 11
40084: NOT
40085: IFFALSE 40089
// exit ;
40087: GO 40247
// tmp := array ;
40089: LD_ADDR_VAR 0 10
40093: PUSH
40094: LD_VAR 0 1
40098: ST_TO_ADDR
// for i = 1 to length do
40099: LD_ADDR_VAR 0 6
40103: PUSH
40104: DOUBLE
40105: LD_INT 1
40107: DEC
40108: ST_TO_ADDR
40109: LD_VAR 0 11
40113: PUSH
40114: FOR_TO
40115: IFFALSE 40235
// begin for j = 1 to array do
40117: LD_ADDR_VAR 0 7
40121: PUSH
40122: DOUBLE
40123: LD_INT 1
40125: DEC
40126: ST_TO_ADDR
40127: LD_VAR 0 1
40131: PUSH
40132: FOR_TO
40133: IFFALSE 40221
// begin k := j + d ;
40135: LD_ADDR_VAR 0 8
40139: PUSH
40140: LD_VAR 0 7
40144: PUSH
40145: LD_VAR 0 9
40149: PLUS
40150: ST_TO_ADDR
// if k > array then
40151: LD_VAR 0 8
40155: PUSH
40156: LD_VAR 0 1
40160: GREATER
40161: IFFALSE 40171
// k := 1 ;
40163: LD_ADDR_VAR 0 8
40167: PUSH
40168: LD_INT 1
40170: ST_TO_ADDR
// if not k then
40171: LD_VAR 0 8
40175: NOT
40176: IFFALSE 40188
// k := array ;
40178: LD_ADDR_VAR 0 8
40182: PUSH
40183: LD_VAR 0 1
40187: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40188: LD_ADDR_VAR 0 10
40192: PUSH
40193: LD_VAR 0 10
40197: PPUSH
40198: LD_VAR 0 8
40202: PPUSH
40203: LD_VAR 0 1
40207: PUSH
40208: LD_VAR 0 7
40212: ARRAY
40213: PPUSH
40214: CALL_OW 1
40218: ST_TO_ADDR
// end ;
40219: GO 40132
40221: POP
40222: POP
// array := tmp ;
40223: LD_ADDR_VAR 0 1
40227: PUSH
40228: LD_VAR 0 10
40232: ST_TO_ADDR
// end ;
40233: GO 40114
40235: POP
40236: POP
// result := array ;
40237: LD_ADDR_VAR 0 5
40241: PUSH
40242: LD_VAR 0 1
40246: ST_TO_ADDR
// end ;
40247: LD_VAR 0 5
40251: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40252: LD_INT 0
40254: PPUSH
40255: PPUSH
// result := 0 ;
40256: LD_ADDR_VAR 0 3
40260: PUSH
40261: LD_INT 0
40263: ST_TO_ADDR
// if not array or not value in array then
40264: LD_VAR 0 1
40268: NOT
40269: PUSH
40270: LD_VAR 0 2
40274: PUSH
40275: LD_VAR 0 1
40279: IN
40280: NOT
40281: OR
40282: IFFALSE 40286
// exit ;
40284: GO 40340
// for i = 1 to array do
40286: LD_ADDR_VAR 0 4
40290: PUSH
40291: DOUBLE
40292: LD_INT 1
40294: DEC
40295: ST_TO_ADDR
40296: LD_VAR 0 1
40300: PUSH
40301: FOR_TO
40302: IFFALSE 40338
// if value = array [ i ] then
40304: LD_VAR 0 2
40308: PUSH
40309: LD_VAR 0 1
40313: PUSH
40314: LD_VAR 0 4
40318: ARRAY
40319: EQUAL
40320: IFFALSE 40336
// begin result := i ;
40322: LD_ADDR_VAR 0 3
40326: PUSH
40327: LD_VAR 0 4
40331: ST_TO_ADDR
// exit ;
40332: POP
40333: POP
40334: GO 40340
// end ;
40336: GO 40301
40338: POP
40339: POP
// end ;
40340: LD_VAR 0 3
40344: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40345: LD_INT 0
40347: PPUSH
// vc_chassis := chassis ;
40348: LD_ADDR_OWVAR 37
40352: PUSH
40353: LD_VAR 0 1
40357: ST_TO_ADDR
// vc_engine := engine ;
40358: LD_ADDR_OWVAR 39
40362: PUSH
40363: LD_VAR 0 2
40367: ST_TO_ADDR
// vc_control := control ;
40368: LD_ADDR_OWVAR 38
40372: PUSH
40373: LD_VAR 0 3
40377: ST_TO_ADDR
// vc_weapon := weapon ;
40378: LD_ADDR_OWVAR 40
40382: PUSH
40383: LD_VAR 0 4
40387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40388: LD_ADDR_OWVAR 41
40392: PUSH
40393: LD_VAR 0 5
40397: ST_TO_ADDR
// end ;
40398: LD_VAR 0 6
40402: RET
// export function WantPlant ( unit ) ; var task ; begin
40403: LD_INT 0
40405: PPUSH
40406: PPUSH
// result := false ;
40407: LD_ADDR_VAR 0 2
40411: PUSH
40412: LD_INT 0
40414: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40415: LD_ADDR_VAR 0 3
40419: PUSH
40420: LD_VAR 0 1
40424: PPUSH
40425: CALL_OW 437
40429: ST_TO_ADDR
// if task then
40430: LD_VAR 0 3
40434: IFFALSE 40462
// if task [ 1 ] [ 1 ] = p then
40436: LD_VAR 0 3
40440: PUSH
40441: LD_INT 1
40443: ARRAY
40444: PUSH
40445: LD_INT 1
40447: ARRAY
40448: PUSH
40449: LD_STRING p
40451: EQUAL
40452: IFFALSE 40462
// result := true ;
40454: LD_ADDR_VAR 0 2
40458: PUSH
40459: LD_INT 1
40461: ST_TO_ADDR
// end ;
40462: LD_VAR 0 2
40466: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40467: LD_INT 0
40469: PPUSH
40470: PPUSH
40471: PPUSH
40472: PPUSH
// if pos < 1 then
40473: LD_VAR 0 2
40477: PUSH
40478: LD_INT 1
40480: LESS
40481: IFFALSE 40485
// exit ;
40483: GO 40788
// if pos = 1 then
40485: LD_VAR 0 2
40489: PUSH
40490: LD_INT 1
40492: EQUAL
40493: IFFALSE 40526
// result := Replace ( arr , pos [ 1 ] , value ) else
40495: LD_ADDR_VAR 0 4
40499: PUSH
40500: LD_VAR 0 1
40504: PPUSH
40505: LD_VAR 0 2
40509: PUSH
40510: LD_INT 1
40512: ARRAY
40513: PPUSH
40514: LD_VAR 0 3
40518: PPUSH
40519: CALL_OW 1
40523: ST_TO_ADDR
40524: GO 40788
// begin tmp := arr ;
40526: LD_ADDR_VAR 0 6
40530: PUSH
40531: LD_VAR 0 1
40535: ST_TO_ADDR
// s_arr := [ tmp ] ;
40536: LD_ADDR_VAR 0 7
40540: PUSH
40541: LD_VAR 0 6
40545: PUSH
40546: EMPTY
40547: LIST
40548: ST_TO_ADDR
// for i = 1 to pos - 1 do
40549: LD_ADDR_VAR 0 5
40553: PUSH
40554: DOUBLE
40555: LD_INT 1
40557: DEC
40558: ST_TO_ADDR
40559: LD_VAR 0 2
40563: PUSH
40564: LD_INT 1
40566: MINUS
40567: PUSH
40568: FOR_TO
40569: IFFALSE 40614
// begin tmp := tmp [ pos [ i ] ] ;
40571: LD_ADDR_VAR 0 6
40575: PUSH
40576: LD_VAR 0 6
40580: PUSH
40581: LD_VAR 0 2
40585: PUSH
40586: LD_VAR 0 5
40590: ARRAY
40591: ARRAY
40592: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40593: LD_ADDR_VAR 0 7
40597: PUSH
40598: LD_VAR 0 7
40602: PUSH
40603: LD_VAR 0 6
40607: PUSH
40608: EMPTY
40609: LIST
40610: ADD
40611: ST_TO_ADDR
// end ;
40612: GO 40568
40614: POP
40615: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40616: LD_ADDR_VAR 0 6
40620: PUSH
40621: LD_VAR 0 6
40625: PPUSH
40626: LD_VAR 0 2
40630: PUSH
40631: LD_VAR 0 2
40635: ARRAY
40636: PPUSH
40637: LD_VAR 0 3
40641: PPUSH
40642: CALL_OW 1
40646: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40647: LD_ADDR_VAR 0 7
40651: PUSH
40652: LD_VAR 0 7
40656: PPUSH
40657: LD_VAR 0 7
40661: PPUSH
40662: LD_VAR 0 6
40666: PPUSH
40667: CALL_OW 1
40671: ST_TO_ADDR
// for i = s_arr downto 2 do
40672: LD_ADDR_VAR 0 5
40676: PUSH
40677: DOUBLE
40678: LD_VAR 0 7
40682: INC
40683: ST_TO_ADDR
40684: LD_INT 2
40686: PUSH
40687: FOR_DOWNTO
40688: IFFALSE 40772
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40690: LD_ADDR_VAR 0 6
40694: PUSH
40695: LD_VAR 0 7
40699: PUSH
40700: LD_VAR 0 5
40704: PUSH
40705: LD_INT 1
40707: MINUS
40708: ARRAY
40709: PPUSH
40710: LD_VAR 0 2
40714: PUSH
40715: LD_VAR 0 5
40719: PUSH
40720: LD_INT 1
40722: MINUS
40723: ARRAY
40724: PPUSH
40725: LD_VAR 0 7
40729: PUSH
40730: LD_VAR 0 5
40734: ARRAY
40735: PPUSH
40736: CALL_OW 1
40740: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: LD_VAR 0 7
40750: PPUSH
40751: LD_VAR 0 5
40755: PUSH
40756: LD_INT 1
40758: MINUS
40759: PPUSH
40760: LD_VAR 0 6
40764: PPUSH
40765: CALL_OW 1
40769: ST_TO_ADDR
// end ;
40770: GO 40687
40772: POP
40773: POP
// result := s_arr [ 1 ] ;
40774: LD_ADDR_VAR 0 4
40778: PUSH
40779: LD_VAR 0 7
40783: PUSH
40784: LD_INT 1
40786: ARRAY
40787: ST_TO_ADDR
// end ; end ;
40788: LD_VAR 0 4
40792: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40793: LD_INT 0
40795: PPUSH
40796: PPUSH
// if not list then
40797: LD_VAR 0 1
40801: NOT
40802: IFFALSE 40806
// exit ;
40804: GO 40897
// i := list [ pos1 ] ;
40806: LD_ADDR_VAR 0 5
40810: PUSH
40811: LD_VAR 0 1
40815: PUSH
40816: LD_VAR 0 2
40820: ARRAY
40821: ST_TO_ADDR
// if not i then
40822: LD_VAR 0 5
40826: NOT
40827: IFFALSE 40831
// exit ;
40829: GO 40897
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40831: LD_ADDR_VAR 0 1
40835: PUSH
40836: LD_VAR 0 1
40840: PPUSH
40841: LD_VAR 0 2
40845: PPUSH
40846: LD_VAR 0 1
40850: PUSH
40851: LD_VAR 0 3
40855: ARRAY
40856: PPUSH
40857: CALL_OW 1
40861: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40862: LD_ADDR_VAR 0 1
40866: PUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: LD_VAR 0 3
40876: PPUSH
40877: LD_VAR 0 5
40881: PPUSH
40882: CALL_OW 1
40886: ST_TO_ADDR
// result := list ;
40887: LD_ADDR_VAR 0 4
40891: PUSH
40892: LD_VAR 0 1
40896: ST_TO_ADDR
// end ;
40897: LD_VAR 0 4
40901: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40902: LD_INT 0
40904: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40905: LD_ADDR_VAR 0 5
40909: PUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: CALL_OW 250
40919: PPUSH
40920: LD_VAR 0 1
40924: PPUSH
40925: CALL_OW 251
40929: PPUSH
40930: LD_VAR 0 2
40934: PPUSH
40935: LD_VAR 0 3
40939: PPUSH
40940: LD_VAR 0 4
40944: PPUSH
40945: CALL 41323 0 5
40949: ST_TO_ADDR
// end ;
40950: LD_VAR 0 5
40954: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
40955: LD_INT 0
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
// if not list or not unit then
40961: LD_VAR 0 2
40965: NOT
40966: PUSH
40967: LD_VAR 0 1
40971: NOT
40972: OR
40973: IFFALSE 40977
// exit ;
40975: GO 41318
// result := [ ] ;
40977: LD_ADDR_VAR 0 5
40981: PUSH
40982: EMPTY
40983: ST_TO_ADDR
// for i in list do
40984: LD_ADDR_VAR 0 6
40988: PUSH
40989: LD_VAR 0 2
40993: PUSH
40994: FOR_IN
40995: IFFALSE 41213
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40997: LD_ADDR_VAR 0 8
41001: PUSH
41002: LD_VAR 0 1
41006: PPUSH
41007: LD_VAR 0 6
41011: PUSH
41012: LD_INT 1
41014: ARRAY
41015: PPUSH
41016: LD_VAR 0 6
41020: PUSH
41021: LD_INT 2
41023: ARRAY
41024: PPUSH
41025: CALL_OW 297
41029: ST_TO_ADDR
// if not Count ( result ) then
41030: LD_VAR 0 5
41034: PPUSH
41035: CALL 37607 0 1
41039: NOT
41040: IFFALSE 41073
// begin result := Join ( result , [ i , tmp ] ) ;
41042: LD_ADDR_VAR 0 5
41046: PUSH
41047: LD_VAR 0 5
41051: PPUSH
41052: LD_VAR 0 6
41056: PUSH
41057: LD_VAR 0 8
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PPUSH
41066: CALL 73207 0 2
41070: ST_TO_ADDR
// continue ;
41071: GO 40994
// end ; if result [ result ] [ 2 ] <= tmp then
41073: LD_VAR 0 5
41077: PUSH
41078: LD_VAR 0 5
41082: ARRAY
41083: PUSH
41084: LD_INT 2
41086: ARRAY
41087: PUSH
41088: LD_VAR 0 8
41092: LESSEQUAL
41093: IFFALSE 41126
// result := Join ( result , [ i , tmp ] ) else
41095: LD_ADDR_VAR 0 5
41099: PUSH
41100: LD_VAR 0 5
41104: PPUSH
41105: LD_VAR 0 6
41109: PUSH
41110: LD_VAR 0 8
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PPUSH
41119: CALL 73207 0 2
41123: ST_TO_ADDR
41124: GO 41211
// begin for j := 1 to Count ( result ) do
41126: LD_ADDR_VAR 0 7
41130: PUSH
41131: DOUBLE
41132: LD_INT 1
41134: DEC
41135: ST_TO_ADDR
41136: LD_VAR 0 5
41140: PPUSH
41141: CALL 37607 0 1
41145: PUSH
41146: FOR_TO
41147: IFFALSE 41209
// begin if tmp < result [ j ] [ 2 ] then
41149: LD_VAR 0 8
41153: PUSH
41154: LD_VAR 0 5
41158: PUSH
41159: LD_VAR 0 7
41163: ARRAY
41164: PUSH
41165: LD_INT 2
41167: ARRAY
41168: LESS
41169: IFFALSE 41207
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41171: LD_ADDR_VAR 0 5
41175: PUSH
41176: LD_VAR 0 5
41180: PPUSH
41181: LD_VAR 0 7
41185: PPUSH
41186: LD_VAR 0 6
41190: PUSH
41191: LD_VAR 0 8
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PPUSH
41200: CALL_OW 2
41204: ST_TO_ADDR
// break ;
41205: GO 41209
// end ; end ;
41207: GO 41146
41209: POP
41210: POP
// end ; end ;
41211: GO 40994
41213: POP
41214: POP
// if result and not asc then
41215: LD_VAR 0 5
41219: PUSH
41220: LD_VAR 0 3
41224: NOT
41225: AND
41226: IFFALSE 41243
// result := ReverseArray ( result ) ;
41228: LD_ADDR_VAR 0 5
41232: PUSH
41233: LD_VAR 0 5
41237: PPUSH
41238: CALL 68483 0 1
41242: ST_TO_ADDR
// tmp := [ ] ;
41243: LD_ADDR_VAR 0 8
41247: PUSH
41248: EMPTY
41249: ST_TO_ADDR
// if mode then
41250: LD_VAR 0 4
41254: IFFALSE 41318
// begin for i := 1 to result do
41256: LD_ADDR_VAR 0 6
41260: PUSH
41261: DOUBLE
41262: LD_INT 1
41264: DEC
41265: ST_TO_ADDR
41266: LD_VAR 0 5
41270: PUSH
41271: FOR_TO
41272: IFFALSE 41306
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
41274: LD_ADDR_VAR 0 8
41278: PUSH
41279: LD_VAR 0 8
41283: PPUSH
41284: LD_VAR 0 5
41288: PUSH
41289: LD_VAR 0 6
41293: ARRAY
41294: PUSH
41295: LD_INT 1
41297: ARRAY
41298: PPUSH
41299: CALL 73207 0 2
41303: ST_TO_ADDR
41304: GO 41271
41306: POP
41307: POP
// result := tmp ;
41308: LD_ADDR_VAR 0 5
41312: PUSH
41313: LD_VAR 0 8
41317: ST_TO_ADDR
// end ; end ;
41318: LD_VAR 0 5
41322: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41323: LD_INT 0
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
// if not list then
41329: LD_VAR 0 3
41333: NOT
41334: IFFALSE 41338
// exit ;
41336: GO 41726
// result := [ ] ;
41338: LD_ADDR_VAR 0 6
41342: PUSH
41343: EMPTY
41344: ST_TO_ADDR
// for i in list do
41345: LD_ADDR_VAR 0 7
41349: PUSH
41350: LD_VAR 0 3
41354: PUSH
41355: FOR_IN
41356: IFFALSE 41558
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41358: LD_ADDR_VAR 0 9
41362: PUSH
41363: LD_VAR 0 7
41367: PPUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: LD_VAR 0 2
41377: PPUSH
41378: CALL_OW 297
41382: ST_TO_ADDR
// if not result then
41383: LD_VAR 0 6
41387: NOT
41388: IFFALSE 41414
// result := [ [ i , tmp ] ] else
41390: LD_ADDR_VAR 0 6
41394: PUSH
41395: LD_VAR 0 7
41399: PUSH
41400: LD_VAR 0 9
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: EMPTY
41410: LIST
41411: ST_TO_ADDR
41412: GO 41556
// begin if result [ result ] [ 2 ] < tmp then
41414: LD_VAR 0 6
41418: PUSH
41419: LD_VAR 0 6
41423: ARRAY
41424: PUSH
41425: LD_INT 2
41427: ARRAY
41428: PUSH
41429: LD_VAR 0 9
41433: LESS
41434: IFFALSE 41476
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41436: LD_ADDR_VAR 0 6
41440: PUSH
41441: LD_VAR 0 6
41445: PPUSH
41446: LD_VAR 0 6
41450: PUSH
41451: LD_INT 1
41453: PLUS
41454: PPUSH
41455: LD_VAR 0 7
41459: PUSH
41460: LD_VAR 0 9
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PPUSH
41469: CALL_OW 2
41473: ST_TO_ADDR
41474: GO 41556
// for j = 1 to result do
41476: LD_ADDR_VAR 0 8
41480: PUSH
41481: DOUBLE
41482: LD_INT 1
41484: DEC
41485: ST_TO_ADDR
41486: LD_VAR 0 6
41490: PUSH
41491: FOR_TO
41492: IFFALSE 41554
// begin if tmp < result [ j ] [ 2 ] then
41494: LD_VAR 0 9
41498: PUSH
41499: LD_VAR 0 6
41503: PUSH
41504: LD_VAR 0 8
41508: ARRAY
41509: PUSH
41510: LD_INT 2
41512: ARRAY
41513: LESS
41514: IFFALSE 41552
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41516: LD_ADDR_VAR 0 6
41520: PUSH
41521: LD_VAR 0 6
41525: PPUSH
41526: LD_VAR 0 8
41530: PPUSH
41531: LD_VAR 0 7
41535: PUSH
41536: LD_VAR 0 9
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PPUSH
41545: CALL_OW 2
41549: ST_TO_ADDR
// break ;
41550: GO 41554
// end ; end ;
41552: GO 41491
41554: POP
41555: POP
// end ; end ;
41556: GO 41355
41558: POP
41559: POP
// if result and not asc then
41560: LD_VAR 0 6
41564: PUSH
41565: LD_VAR 0 4
41569: NOT
41570: AND
41571: IFFALSE 41646
// begin tmp := result ;
41573: LD_ADDR_VAR 0 9
41577: PUSH
41578: LD_VAR 0 6
41582: ST_TO_ADDR
// for i = tmp downto 1 do
41583: LD_ADDR_VAR 0 7
41587: PUSH
41588: DOUBLE
41589: LD_VAR 0 9
41593: INC
41594: ST_TO_ADDR
41595: LD_INT 1
41597: PUSH
41598: FOR_DOWNTO
41599: IFFALSE 41644
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41601: LD_ADDR_VAR 0 6
41605: PUSH
41606: LD_VAR 0 6
41610: PPUSH
41611: LD_VAR 0 9
41615: PUSH
41616: LD_VAR 0 7
41620: MINUS
41621: PUSH
41622: LD_INT 1
41624: PLUS
41625: PPUSH
41626: LD_VAR 0 9
41630: PUSH
41631: LD_VAR 0 7
41635: ARRAY
41636: PPUSH
41637: CALL_OW 1
41641: ST_TO_ADDR
41642: GO 41598
41644: POP
41645: POP
// end ; tmp := [ ] ;
41646: LD_ADDR_VAR 0 9
41650: PUSH
41651: EMPTY
41652: ST_TO_ADDR
// if mode then
41653: LD_VAR 0 5
41657: IFFALSE 41726
// begin for i = 1 to result do
41659: LD_ADDR_VAR 0 7
41663: PUSH
41664: DOUBLE
41665: LD_INT 1
41667: DEC
41668: ST_TO_ADDR
41669: LD_VAR 0 6
41673: PUSH
41674: FOR_TO
41675: IFFALSE 41714
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41677: LD_ADDR_VAR 0 9
41681: PUSH
41682: LD_VAR 0 9
41686: PPUSH
41687: LD_VAR 0 7
41691: PPUSH
41692: LD_VAR 0 6
41696: PUSH
41697: LD_VAR 0 7
41701: ARRAY
41702: PUSH
41703: LD_INT 1
41705: ARRAY
41706: PPUSH
41707: CALL_OW 1
41711: ST_TO_ADDR
41712: GO 41674
41714: POP
41715: POP
// result := tmp ;
41716: LD_ADDR_VAR 0 6
41720: PUSH
41721: LD_VAR 0 9
41725: ST_TO_ADDR
// end ; end ;
41726: LD_VAR 0 6
41730: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41739: LD_ADDR_VAR 0 5
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: EMPTY
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: ST_TO_ADDR
// if not x or not y then
41761: LD_VAR 0 2
41765: NOT
41766: PUSH
41767: LD_VAR 0 3
41771: NOT
41772: OR
41773: IFFALSE 41777
// exit ;
41775: GO 43427
// if not range then
41777: LD_VAR 0 4
41781: NOT
41782: IFFALSE 41792
// range := 10 ;
41784: LD_ADDR_VAR 0 4
41788: PUSH
41789: LD_INT 10
41791: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41792: LD_ADDR_VAR 0 8
41796: PUSH
41797: LD_INT 81
41799: PUSH
41800: LD_VAR 0 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 92
41811: PUSH
41812: LD_VAR 0 2
41816: PUSH
41817: LD_VAR 0 3
41821: PUSH
41822: LD_VAR 0 4
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 3
41835: PUSH
41836: LD_INT 21
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: LIST
41854: PPUSH
41855: CALL_OW 69
41859: ST_TO_ADDR
// if not tmp then
41860: LD_VAR 0 8
41864: NOT
41865: IFFALSE 41869
// exit ;
41867: GO 43427
// for i in tmp do
41869: LD_ADDR_VAR 0 6
41873: PUSH
41874: LD_VAR 0 8
41878: PUSH
41879: FOR_IN
41880: IFFALSE 43402
// begin points := [ 0 , 0 , 0 ] ;
41882: LD_ADDR_VAR 0 9
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: LIST
41900: ST_TO_ADDR
// bpoints := 1 ;
41901: LD_ADDR_VAR 0 10
41905: PUSH
41906: LD_INT 1
41908: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41909: LD_VAR 0 6
41913: PPUSH
41914: CALL_OW 247
41918: PUSH
41919: LD_INT 1
41921: DOUBLE
41922: EQUAL
41923: IFTRUE 41927
41925: GO 42505
41927: POP
// begin if GetClass ( i ) = 1 then
41928: LD_VAR 0 6
41932: PPUSH
41933: CALL_OW 257
41937: PUSH
41938: LD_INT 1
41940: EQUAL
41941: IFFALSE 41962
// points := [ 10 , 5 , 3 ] ;
41943: LD_ADDR_VAR 0 9
41947: PUSH
41948: LD_INT 10
41950: PUSH
41951: LD_INT 5
41953: PUSH
41954: LD_INT 3
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: LIST
41961: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41962: LD_VAR 0 6
41966: PPUSH
41967: CALL_OW 257
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: LD_INT 4
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: IN
41986: IFFALSE 42007
// points := [ 3 , 2 , 1 ] ;
41988: LD_ADDR_VAR 0 9
41992: PUSH
41993: LD_INT 3
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42007: LD_VAR 0 6
42011: PPUSH
42012: CALL_OW 257
42016: PUSH
42017: LD_INT 5
42019: EQUAL
42020: IFFALSE 42041
// points := [ 130 , 5 , 2 ] ;
42022: LD_ADDR_VAR 0 9
42026: PUSH
42027: LD_INT 130
42029: PUSH
42030: LD_INT 5
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42041: LD_VAR 0 6
42045: PPUSH
42046: CALL_OW 257
42050: PUSH
42051: LD_INT 8
42053: EQUAL
42054: IFFALSE 42075
// points := [ 35 , 35 , 30 ] ;
42056: LD_ADDR_VAR 0 9
42060: PUSH
42061: LD_INT 35
42063: PUSH
42064: LD_INT 35
42066: PUSH
42067: LD_INT 30
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: LIST
42074: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42075: LD_VAR 0 6
42079: PPUSH
42080: CALL_OW 257
42084: PUSH
42085: LD_INT 9
42087: EQUAL
42088: IFFALSE 42109
// points := [ 20 , 55 , 40 ] ;
42090: LD_ADDR_VAR 0 9
42094: PUSH
42095: LD_INT 20
42097: PUSH
42098: LD_INT 55
42100: PUSH
42101: LD_INT 40
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42109: LD_VAR 0 6
42113: PPUSH
42114: CALL_OW 257
42118: PUSH
42119: LD_INT 12
42121: PUSH
42122: LD_INT 16
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: IN
42129: IFFALSE 42150
// points := [ 5 , 3 , 2 ] ;
42131: LD_ADDR_VAR 0 9
42135: PUSH
42136: LD_INT 5
42138: PUSH
42139: LD_INT 3
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: LIST
42149: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42150: LD_VAR 0 6
42154: PPUSH
42155: CALL_OW 257
42159: PUSH
42160: LD_INT 17
42162: EQUAL
42163: IFFALSE 42184
// points := [ 100 , 50 , 75 ] ;
42165: LD_ADDR_VAR 0 9
42169: PUSH
42170: LD_INT 100
42172: PUSH
42173: LD_INT 50
42175: PUSH
42176: LD_INT 75
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42184: LD_VAR 0 6
42188: PPUSH
42189: CALL_OW 257
42193: PUSH
42194: LD_INT 15
42196: EQUAL
42197: IFFALSE 42218
// points := [ 10 , 5 , 3 ] ;
42199: LD_ADDR_VAR 0 9
42203: PUSH
42204: LD_INT 10
42206: PUSH
42207: LD_INT 5
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42218: LD_VAR 0 6
42222: PPUSH
42223: CALL_OW 257
42227: PUSH
42228: LD_INT 14
42230: EQUAL
42231: IFFALSE 42252
// points := [ 10 , 0 , 0 ] ;
42233: LD_ADDR_VAR 0 9
42237: PUSH
42238: LD_INT 10
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42252: LD_VAR 0 6
42256: PPUSH
42257: CALL_OW 257
42261: PUSH
42262: LD_INT 11
42264: EQUAL
42265: IFFALSE 42286
// points := [ 30 , 10 , 5 ] ;
42267: LD_ADDR_VAR 0 9
42271: PUSH
42272: LD_INT 30
42274: PUSH
42275: LD_INT 10
42277: PUSH
42278: LD_INT 5
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42286: LD_VAR 0 1
42290: PPUSH
42291: LD_INT 5
42293: PPUSH
42294: CALL_OW 321
42298: PUSH
42299: LD_INT 2
42301: EQUAL
42302: IFFALSE 42319
// bpoints := bpoints * 1.8 ;
42304: LD_ADDR_VAR 0 10
42308: PUSH
42309: LD_VAR 0 10
42313: PUSH
42314: LD_REAL  1.80000000000000E+0000
42317: MUL
42318: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42319: LD_VAR 0 6
42323: PPUSH
42324: CALL_OW 257
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 2
42334: PUSH
42335: LD_INT 3
42337: PUSH
42338: LD_INT 4
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: IN
42347: PUSH
42348: LD_VAR 0 1
42352: PPUSH
42353: LD_INT 51
42355: PPUSH
42356: CALL_OW 321
42360: PUSH
42361: LD_INT 2
42363: EQUAL
42364: AND
42365: IFFALSE 42382
// bpoints := bpoints * 1.2 ;
42367: LD_ADDR_VAR 0 10
42371: PUSH
42372: LD_VAR 0 10
42376: PUSH
42377: LD_REAL  1.20000000000000E+0000
42380: MUL
42381: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42382: LD_VAR 0 6
42386: PPUSH
42387: CALL_OW 257
42391: PUSH
42392: LD_INT 5
42394: PUSH
42395: LD_INT 7
42397: PUSH
42398: LD_INT 9
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: LIST
42405: IN
42406: PUSH
42407: LD_VAR 0 1
42411: PPUSH
42412: LD_INT 52
42414: PPUSH
42415: CALL_OW 321
42419: PUSH
42420: LD_INT 2
42422: EQUAL
42423: AND
42424: IFFALSE 42441
// bpoints := bpoints * 1.5 ;
42426: LD_ADDR_VAR 0 10
42430: PUSH
42431: LD_VAR 0 10
42435: PUSH
42436: LD_REAL  1.50000000000000E+0000
42439: MUL
42440: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42441: LD_VAR 0 1
42445: PPUSH
42446: LD_INT 66
42448: PPUSH
42449: CALL_OW 321
42453: PUSH
42454: LD_INT 2
42456: EQUAL
42457: IFFALSE 42474
// bpoints := bpoints * 1.1 ;
42459: LD_ADDR_VAR 0 10
42463: PUSH
42464: LD_VAR 0 10
42468: PUSH
42469: LD_REAL  1.10000000000000E+0000
42472: MUL
42473: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42474: LD_ADDR_VAR 0 10
42478: PUSH
42479: LD_VAR 0 10
42483: PUSH
42484: LD_VAR 0 6
42488: PPUSH
42489: LD_INT 1
42491: PPUSH
42492: CALL_OW 259
42496: PUSH
42497: LD_REAL  1.15000000000000E+0000
42500: MUL
42501: MUL
42502: ST_TO_ADDR
// end ; unit_vehicle :
42503: GO 43331
42505: LD_INT 2
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42513
42511: GO 43319
42513: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42514: LD_VAR 0 6
42518: PPUSH
42519: CALL_OW 264
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: LD_INT 42
42529: PUSH
42530: LD_INT 24
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: IN
42538: IFFALSE 42559
// points := [ 25 , 5 , 3 ] ;
42540: LD_ADDR_VAR 0 9
42544: PUSH
42545: LD_INT 25
42547: PUSH
42548: LD_INT 5
42550: PUSH
42551: LD_INT 3
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42559: LD_VAR 0 6
42563: PPUSH
42564: CALL_OW 264
42568: PUSH
42569: LD_INT 4
42571: PUSH
42572: LD_INT 43
42574: PUSH
42575: LD_INT 25
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: IN
42583: IFFALSE 42604
// points := [ 40 , 15 , 5 ] ;
42585: LD_ADDR_VAR 0 9
42589: PUSH
42590: LD_INT 40
42592: PUSH
42593: LD_INT 15
42595: PUSH
42596: LD_INT 5
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42604: LD_VAR 0 6
42608: PPUSH
42609: CALL_OW 264
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: LD_INT 23
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: IN
42624: IFFALSE 42645
// points := [ 7 , 25 , 8 ] ;
42626: LD_ADDR_VAR 0 9
42630: PUSH
42631: LD_INT 7
42633: PUSH
42634: LD_INT 25
42636: PUSH
42637: LD_INT 8
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42645: LD_VAR 0 6
42649: PPUSH
42650: CALL_OW 264
42654: PUSH
42655: LD_INT 5
42657: PUSH
42658: LD_INT 27
42660: PUSH
42661: LD_INT 44
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: LIST
42668: IN
42669: IFFALSE 42690
// points := [ 14 , 50 , 16 ] ;
42671: LD_ADDR_VAR 0 9
42675: PUSH
42676: LD_INT 14
42678: PUSH
42679: LD_INT 50
42681: PUSH
42682: LD_INT 16
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42690: LD_VAR 0 6
42694: PPUSH
42695: CALL_OW 264
42699: PUSH
42700: LD_INT 6
42702: PUSH
42703: LD_INT 46
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: IN
42710: IFFALSE 42731
// points := [ 32 , 120 , 70 ] ;
42712: LD_ADDR_VAR 0 9
42716: PUSH
42717: LD_INT 32
42719: PUSH
42720: LD_INT 120
42722: PUSH
42723: LD_INT 70
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42731: LD_VAR 0 6
42735: PPUSH
42736: CALL_OW 264
42740: PUSH
42741: LD_INT 7
42743: PUSH
42744: LD_INT 28
42746: PUSH
42747: LD_INT 45
42749: PUSH
42750: LD_INT 92
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: IN
42759: IFFALSE 42780
// points := [ 35 , 20 , 45 ] ;
42761: LD_ADDR_VAR 0 9
42765: PUSH
42766: LD_INT 35
42768: PUSH
42769: LD_INT 20
42771: PUSH
42772: LD_INT 45
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42780: LD_VAR 0 6
42784: PPUSH
42785: CALL_OW 264
42789: PUSH
42790: LD_INT 47
42792: PUSH
42793: EMPTY
42794: LIST
42795: IN
42796: IFFALSE 42817
// points := [ 67 , 45 , 75 ] ;
42798: LD_ADDR_VAR 0 9
42802: PUSH
42803: LD_INT 67
42805: PUSH
42806: LD_INT 45
42808: PUSH
42809: LD_INT 75
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42817: LD_VAR 0 6
42821: PPUSH
42822: CALL_OW 264
42826: PUSH
42827: LD_INT 26
42829: PUSH
42830: EMPTY
42831: LIST
42832: IN
42833: IFFALSE 42854
// points := [ 120 , 30 , 80 ] ;
42835: LD_ADDR_VAR 0 9
42839: PUSH
42840: LD_INT 120
42842: PUSH
42843: LD_INT 30
42845: PUSH
42846: LD_INT 80
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42854: LD_VAR 0 6
42858: PPUSH
42859: CALL_OW 264
42863: PUSH
42864: LD_INT 22
42866: PUSH
42867: EMPTY
42868: LIST
42869: IN
42870: IFFALSE 42891
// points := [ 40 , 1 , 1 ] ;
42872: LD_ADDR_VAR 0 9
42876: PUSH
42877: LD_INT 40
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42891: LD_VAR 0 6
42895: PPUSH
42896: CALL_OW 264
42900: PUSH
42901: LD_INT 29
42903: PUSH
42904: EMPTY
42905: LIST
42906: IN
42907: IFFALSE 42928
// points := [ 70 , 200 , 400 ] ;
42909: LD_ADDR_VAR 0 9
42913: PUSH
42914: LD_INT 70
42916: PUSH
42917: LD_INT 200
42919: PUSH
42920: LD_INT 400
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42928: LD_VAR 0 6
42932: PPUSH
42933: CALL_OW 264
42937: PUSH
42938: LD_INT 14
42940: PUSH
42941: LD_INT 53
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: IN
42948: IFFALSE 42969
// points := [ 40 , 10 , 20 ] ;
42950: LD_ADDR_VAR 0 9
42954: PUSH
42955: LD_INT 40
42957: PUSH
42958: LD_INT 10
42960: PUSH
42961: LD_INT 20
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42969: LD_VAR 0 6
42973: PPUSH
42974: CALL_OW 264
42978: PUSH
42979: LD_INT 9
42981: PUSH
42982: EMPTY
42983: LIST
42984: IN
42985: IFFALSE 43006
// points := [ 5 , 70 , 20 ] ;
42987: LD_ADDR_VAR 0 9
42991: PUSH
42992: LD_INT 5
42994: PUSH
42995: LD_INT 70
42997: PUSH
42998: LD_INT 20
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43006: LD_VAR 0 6
43010: PPUSH
43011: CALL_OW 264
43015: PUSH
43016: LD_INT 10
43018: PUSH
43019: EMPTY
43020: LIST
43021: IN
43022: IFFALSE 43043
// points := [ 35 , 110 , 70 ] ;
43024: LD_ADDR_VAR 0 9
43028: PUSH
43029: LD_INT 35
43031: PUSH
43032: LD_INT 110
43034: PUSH
43035: LD_INT 70
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43043: LD_VAR 0 6
43047: PPUSH
43048: CALL_OW 265
43052: PUSH
43053: LD_INT 25
43055: EQUAL
43056: IFFALSE 43077
// points := [ 80 , 65 , 100 ] ;
43058: LD_ADDR_VAR 0 9
43062: PUSH
43063: LD_INT 80
43065: PUSH
43066: LD_INT 65
43068: PUSH
43069: LD_INT 100
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: LIST
43076: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43077: LD_VAR 0 6
43081: PPUSH
43082: CALL_OW 263
43086: PUSH
43087: LD_INT 1
43089: EQUAL
43090: IFFALSE 43125
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43092: LD_ADDR_VAR 0 10
43096: PUSH
43097: LD_VAR 0 10
43101: PUSH
43102: LD_VAR 0 6
43106: PPUSH
43107: CALL_OW 311
43111: PPUSH
43112: LD_INT 3
43114: PPUSH
43115: CALL_OW 259
43119: PUSH
43120: LD_INT 4
43122: MUL
43123: MUL
43124: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43125: LD_VAR 0 6
43129: PPUSH
43130: CALL_OW 263
43134: PUSH
43135: LD_INT 2
43137: EQUAL
43138: IFFALSE 43189
// begin j := IsControledBy ( i ) ;
43140: LD_ADDR_VAR 0 7
43144: PUSH
43145: LD_VAR 0 6
43149: PPUSH
43150: CALL_OW 312
43154: ST_TO_ADDR
// if j then
43155: LD_VAR 0 7
43159: IFFALSE 43189
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43161: LD_ADDR_VAR 0 10
43165: PUSH
43166: LD_VAR 0 10
43170: PUSH
43171: LD_VAR 0 7
43175: PPUSH
43176: LD_INT 3
43178: PPUSH
43179: CALL_OW 259
43183: PUSH
43184: LD_INT 3
43186: MUL
43187: MUL
43188: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43189: LD_VAR 0 6
43193: PPUSH
43194: CALL_OW 264
43198: PUSH
43199: LD_INT 5
43201: PUSH
43202: LD_INT 6
43204: PUSH
43205: LD_INT 46
43207: PUSH
43208: LD_INT 44
43210: PUSH
43211: LD_INT 47
43213: PUSH
43214: LD_INT 45
43216: PUSH
43217: LD_INT 28
43219: PUSH
43220: LD_INT 7
43222: PUSH
43223: LD_INT 27
43225: PUSH
43226: LD_INT 29
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: IN
43241: PUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: LD_INT 52
43249: PPUSH
43250: CALL_OW 321
43254: PUSH
43255: LD_INT 2
43257: EQUAL
43258: AND
43259: IFFALSE 43276
// bpoints := bpoints * 1.2 ;
43261: LD_ADDR_VAR 0 10
43265: PUSH
43266: LD_VAR 0 10
43270: PUSH
43271: LD_REAL  1.20000000000000E+0000
43274: MUL
43275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43276: LD_VAR 0 6
43280: PPUSH
43281: CALL_OW 264
43285: PUSH
43286: LD_INT 6
43288: PUSH
43289: LD_INT 46
43291: PUSH
43292: LD_INT 47
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: IN
43300: IFFALSE 43317
// bpoints := bpoints * 1.2 ;
43302: LD_ADDR_VAR 0 10
43306: PUSH
43307: LD_VAR 0 10
43311: PUSH
43312: LD_REAL  1.20000000000000E+0000
43315: MUL
43316: ST_TO_ADDR
// end ; unit_building :
43317: GO 43331
43319: LD_INT 3
43321: DOUBLE
43322: EQUAL
43323: IFTRUE 43327
43325: GO 43330
43327: POP
// ; end ;
43328: GO 43331
43330: POP
// for j = 1 to 3 do
43331: LD_ADDR_VAR 0 7
43335: PUSH
43336: DOUBLE
43337: LD_INT 1
43339: DEC
43340: ST_TO_ADDR
43341: LD_INT 3
43343: PUSH
43344: FOR_TO
43345: IFFALSE 43398
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43347: LD_ADDR_VAR 0 5
43351: PUSH
43352: LD_VAR 0 5
43356: PPUSH
43357: LD_VAR 0 7
43361: PPUSH
43362: LD_VAR 0 5
43366: PUSH
43367: LD_VAR 0 7
43371: ARRAY
43372: PUSH
43373: LD_VAR 0 9
43377: PUSH
43378: LD_VAR 0 7
43382: ARRAY
43383: PUSH
43384: LD_VAR 0 10
43388: MUL
43389: PLUS
43390: PPUSH
43391: CALL_OW 1
43395: ST_TO_ADDR
43396: GO 43344
43398: POP
43399: POP
// end ;
43400: GO 41879
43402: POP
43403: POP
// result := Replace ( result , 4 , tmp ) ;
43404: LD_ADDR_VAR 0 5
43408: PUSH
43409: LD_VAR 0 5
43413: PPUSH
43414: LD_INT 4
43416: PPUSH
43417: LD_VAR 0 8
43421: PPUSH
43422: CALL_OW 1
43426: ST_TO_ADDR
// end ;
43427: LD_VAR 0 5
43431: RET
// export function DangerAtRange ( unit , range ) ; begin
43432: LD_INT 0
43434: PPUSH
// if not unit then
43435: LD_VAR 0 1
43439: NOT
43440: IFFALSE 43444
// exit ;
43442: GO 43489
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43444: LD_ADDR_VAR 0 3
43448: PUSH
43449: LD_VAR 0 1
43453: PPUSH
43454: CALL_OW 255
43458: PPUSH
43459: LD_VAR 0 1
43463: PPUSH
43464: CALL_OW 250
43468: PPUSH
43469: LD_VAR 0 1
43473: PPUSH
43474: CALL_OW 251
43478: PPUSH
43479: LD_VAR 0 2
43483: PPUSH
43484: CALL 41731 0 4
43488: ST_TO_ADDR
// end ;
43489: LD_VAR 0 3
43493: RET
// export function DangerInArea ( side , area ) ; begin
43494: LD_INT 0
43496: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43497: LD_ADDR_VAR 0 3
43501: PUSH
43502: LD_VAR 0 2
43506: PPUSH
43507: LD_INT 81
43509: PUSH
43510: LD_VAR 0 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PPUSH
43519: CALL_OW 70
43523: ST_TO_ADDR
// end ;
43524: LD_VAR 0 3
43528: RET
// export function IsExtension ( b ) ; begin
43529: LD_INT 0
43531: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43532: LD_ADDR_VAR 0 2
43536: PUSH
43537: LD_VAR 0 1
43541: PUSH
43542: LD_INT 23
43544: PUSH
43545: LD_INT 20
43547: PUSH
43548: LD_INT 22
43550: PUSH
43551: LD_INT 17
43553: PUSH
43554: LD_INT 24
43556: PUSH
43557: LD_INT 21
43559: PUSH
43560: LD_INT 19
43562: PUSH
43563: LD_INT 16
43565: PUSH
43566: LD_INT 25
43568: PUSH
43569: LD_INT 18
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: IN
43584: ST_TO_ADDR
// end ;
43585: LD_VAR 0 2
43589: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43590: LD_INT 0
43592: PPUSH
43593: PPUSH
43594: PPUSH
// result := [ ] ;
43595: LD_ADDR_VAR 0 4
43599: PUSH
43600: EMPTY
43601: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43602: LD_ADDR_VAR 0 5
43606: PUSH
43607: LD_VAR 0 2
43611: PPUSH
43612: LD_INT 21
43614: PUSH
43615: LD_INT 3
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PPUSH
43622: CALL_OW 70
43626: ST_TO_ADDR
// if not tmp then
43627: LD_VAR 0 5
43631: NOT
43632: IFFALSE 43636
// exit ;
43634: GO 43700
// if checkLink then
43636: LD_VAR 0 3
43640: IFFALSE 43690
// begin for i in tmp do
43642: LD_ADDR_VAR 0 6
43646: PUSH
43647: LD_VAR 0 5
43651: PUSH
43652: FOR_IN
43653: IFFALSE 43688
// if GetBase ( i ) <> base then
43655: LD_VAR 0 6
43659: PPUSH
43660: CALL_OW 274
43664: PUSH
43665: LD_VAR 0 1
43669: NONEQUAL
43670: IFFALSE 43686
// ComLinkToBase ( base , i ) ;
43672: LD_VAR 0 1
43676: PPUSH
43677: LD_VAR 0 6
43681: PPUSH
43682: CALL_OW 169
43686: GO 43652
43688: POP
43689: POP
// end ; result := tmp ;
43690: LD_ADDR_VAR 0 4
43694: PUSH
43695: LD_VAR 0 5
43699: ST_TO_ADDR
// end ;
43700: LD_VAR 0 4
43704: RET
// export function ComComplete ( units , b ) ; var i ; begin
43705: LD_INT 0
43707: PPUSH
43708: PPUSH
// if not units then
43709: LD_VAR 0 1
43713: NOT
43714: IFFALSE 43718
// exit ;
43716: GO 43808
// for i in units do
43718: LD_ADDR_VAR 0 4
43722: PUSH
43723: LD_VAR 0 1
43727: PUSH
43728: FOR_IN
43729: IFFALSE 43806
// if BuildingStatus ( b ) = bs_build then
43731: LD_VAR 0 2
43735: PPUSH
43736: CALL_OW 461
43740: PUSH
43741: LD_INT 1
43743: EQUAL
43744: IFFALSE 43804
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43746: LD_VAR 0 4
43750: PPUSH
43751: LD_STRING h
43753: PUSH
43754: LD_VAR 0 2
43758: PPUSH
43759: CALL_OW 250
43763: PUSH
43764: LD_VAR 0 2
43768: PPUSH
43769: CALL_OW 251
43773: PUSH
43774: LD_VAR 0 2
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: PUSH
43797: EMPTY
43798: LIST
43799: PPUSH
43800: CALL_OW 446
43804: GO 43728
43806: POP
43807: POP
// end ;
43808: LD_VAR 0 3
43812: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43813: LD_INT 0
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43821: LD_VAR 0 1
43825: NOT
43826: PUSH
43827: LD_VAR 0 1
43831: PPUSH
43832: CALL_OW 263
43836: PUSH
43837: LD_INT 2
43839: NONEQUAL
43840: OR
43841: IFFALSE 43845
// exit ;
43843: GO 44161
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43845: LD_ADDR_VAR 0 6
43849: PUSH
43850: LD_INT 22
43852: PUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: CALL_OW 255
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: LD_INT 30
43872: PUSH
43873: LD_INT 36
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 34
43882: PUSH
43883: LD_INT 31
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PPUSH
43899: CALL_OW 69
43903: ST_TO_ADDR
// if not tmp then
43904: LD_VAR 0 6
43908: NOT
43909: IFFALSE 43913
// exit ;
43911: GO 44161
// result := [ ] ;
43913: LD_ADDR_VAR 0 2
43917: PUSH
43918: EMPTY
43919: ST_TO_ADDR
// for i in tmp do
43920: LD_ADDR_VAR 0 3
43924: PUSH
43925: LD_VAR 0 6
43929: PUSH
43930: FOR_IN
43931: IFFALSE 44002
// begin t := UnitsInside ( i ) ;
43933: LD_ADDR_VAR 0 4
43937: PUSH
43938: LD_VAR 0 3
43942: PPUSH
43943: CALL_OW 313
43947: ST_TO_ADDR
// if t then
43948: LD_VAR 0 4
43952: IFFALSE 44000
// for j in t do
43954: LD_ADDR_VAR 0 7
43958: PUSH
43959: LD_VAR 0 4
43963: PUSH
43964: FOR_IN
43965: IFFALSE 43998
// result := Replace ( result , result + 1 , j ) ;
43967: LD_ADDR_VAR 0 2
43971: PUSH
43972: LD_VAR 0 2
43976: PPUSH
43977: LD_VAR 0 2
43981: PUSH
43982: LD_INT 1
43984: PLUS
43985: PPUSH
43986: LD_VAR 0 7
43990: PPUSH
43991: CALL_OW 1
43995: ST_TO_ADDR
43996: GO 43964
43998: POP
43999: POP
// end ;
44000: GO 43930
44002: POP
44003: POP
// if not result then
44004: LD_VAR 0 2
44008: NOT
44009: IFFALSE 44013
// exit ;
44011: GO 44161
// mech := result [ 1 ] ;
44013: LD_ADDR_VAR 0 5
44017: PUSH
44018: LD_VAR 0 2
44022: PUSH
44023: LD_INT 1
44025: ARRAY
44026: ST_TO_ADDR
// if result > 1 then
44027: LD_VAR 0 2
44031: PUSH
44032: LD_INT 1
44034: GREATER
44035: IFFALSE 44147
// begin for i = 2 to result do
44037: LD_ADDR_VAR 0 3
44041: PUSH
44042: DOUBLE
44043: LD_INT 2
44045: DEC
44046: ST_TO_ADDR
44047: LD_VAR 0 2
44051: PUSH
44052: FOR_TO
44053: IFFALSE 44145
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44055: LD_ADDR_VAR 0 4
44059: PUSH
44060: LD_VAR 0 2
44064: PUSH
44065: LD_VAR 0 3
44069: ARRAY
44070: PPUSH
44071: LD_INT 3
44073: PPUSH
44074: CALL_OW 259
44078: PUSH
44079: LD_VAR 0 2
44083: PUSH
44084: LD_VAR 0 3
44088: ARRAY
44089: PPUSH
44090: CALL_OW 432
44094: MINUS
44095: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44096: LD_VAR 0 4
44100: PUSH
44101: LD_VAR 0 5
44105: PPUSH
44106: LD_INT 3
44108: PPUSH
44109: CALL_OW 259
44113: PUSH
44114: LD_VAR 0 5
44118: PPUSH
44119: CALL_OW 432
44123: MINUS
44124: GREATEREQUAL
44125: IFFALSE 44143
// mech := result [ i ] ;
44127: LD_ADDR_VAR 0 5
44131: PUSH
44132: LD_VAR 0 2
44136: PUSH
44137: LD_VAR 0 3
44141: ARRAY
44142: ST_TO_ADDR
// end ;
44143: GO 44052
44145: POP
44146: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44147: LD_VAR 0 1
44151: PPUSH
44152: LD_VAR 0 5
44156: PPUSH
44157: CALL_OW 135
// end ;
44161: LD_VAR 0 2
44165: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44166: LD_INT 0
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
44173: PPUSH
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
44180: PPUSH
// result := [ ] ;
44181: LD_ADDR_VAR 0 7
44185: PUSH
44186: EMPTY
44187: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44188: LD_VAR 0 1
44192: PPUSH
44193: CALL_OW 266
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: IN
44208: NOT
44209: IFFALSE 44213
// exit ;
44211: GO 45847
// if name then
44213: LD_VAR 0 3
44217: IFFALSE 44233
// SetBName ( base_dep , name ) ;
44219: LD_VAR 0 1
44223: PPUSH
44224: LD_VAR 0 3
44228: PPUSH
44229: CALL_OW 500
// base := GetBase ( base_dep ) ;
44233: LD_ADDR_VAR 0 15
44237: PUSH
44238: LD_VAR 0 1
44242: PPUSH
44243: CALL_OW 274
44247: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44248: LD_ADDR_VAR 0 16
44252: PUSH
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 255
44262: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44263: LD_ADDR_VAR 0 17
44267: PUSH
44268: LD_VAR 0 1
44272: PPUSH
44273: CALL_OW 248
44277: ST_TO_ADDR
// if sources then
44278: LD_VAR 0 5
44282: IFFALSE 44329
// for i = 1 to 3 do
44284: LD_ADDR_VAR 0 8
44288: PUSH
44289: DOUBLE
44290: LD_INT 1
44292: DEC
44293: ST_TO_ADDR
44294: LD_INT 3
44296: PUSH
44297: FOR_TO
44298: IFFALSE 44327
// AddResourceType ( base , i , sources [ i ] ) ;
44300: LD_VAR 0 15
44304: PPUSH
44305: LD_VAR 0 8
44309: PPUSH
44310: LD_VAR 0 5
44314: PUSH
44315: LD_VAR 0 8
44319: ARRAY
44320: PPUSH
44321: CALL_OW 276
44325: GO 44297
44327: POP
44328: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44329: LD_ADDR_VAR 0 18
44333: PUSH
44334: LD_VAR 0 15
44338: PPUSH
44339: LD_VAR 0 2
44343: PPUSH
44344: LD_INT 1
44346: PPUSH
44347: CALL 43590 0 3
44351: ST_TO_ADDR
// InitHc ;
44352: CALL_OW 19
// InitUc ;
44356: CALL_OW 18
// uc_side := side ;
44360: LD_ADDR_OWVAR 20
44364: PUSH
44365: LD_VAR 0 16
44369: ST_TO_ADDR
// uc_nation := nation ;
44370: LD_ADDR_OWVAR 21
44374: PUSH
44375: LD_VAR 0 17
44379: ST_TO_ADDR
// if buildings then
44380: LD_VAR 0 18
44384: IFFALSE 45706
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44386: LD_ADDR_VAR 0 19
44390: PUSH
44391: LD_VAR 0 18
44395: PPUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 30
44401: PUSH
44402: LD_INT 29
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 30
44411: PUSH
44412: LD_INT 30
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: PPUSH
44424: CALL_OW 72
44428: ST_TO_ADDR
// if tmp then
44429: LD_VAR 0 19
44433: IFFALSE 44481
// for i in tmp do
44435: LD_ADDR_VAR 0 8
44439: PUSH
44440: LD_VAR 0 19
44444: PUSH
44445: FOR_IN
44446: IFFALSE 44479
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44448: LD_VAR 0 8
44452: PPUSH
44453: CALL_OW 250
44457: PPUSH
44458: LD_VAR 0 8
44462: PPUSH
44463: CALL_OW 251
44467: PPUSH
44468: LD_VAR 0 16
44472: PPUSH
44473: CALL_OW 441
44477: GO 44445
44479: POP
44480: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44481: LD_VAR 0 18
44485: PPUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 30
44491: PUSH
44492: LD_INT 32
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 30
44501: PUSH
44502: LD_INT 33
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: PPUSH
44514: CALL_OW 72
44518: IFFALSE 44606
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44520: LD_ADDR_VAR 0 8
44524: PUSH
44525: LD_VAR 0 18
44529: PPUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 30
44535: PUSH
44536: LD_INT 32
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 30
44545: PUSH
44546: LD_INT 33
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: PPUSH
44558: CALL_OW 72
44562: PUSH
44563: FOR_IN
44564: IFFALSE 44604
// begin if not GetBWeapon ( i ) then
44566: LD_VAR 0 8
44570: PPUSH
44571: CALL_OW 269
44575: NOT
44576: IFFALSE 44602
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44578: LD_VAR 0 8
44582: PPUSH
44583: LD_VAR 0 8
44587: PPUSH
44588: LD_VAR 0 2
44592: PPUSH
44593: CALL 45852 0 2
44597: PPUSH
44598: CALL_OW 431
// end ;
44602: GO 44563
44604: POP
44605: POP
// end ; for i = 1 to personel do
44606: LD_ADDR_VAR 0 8
44610: PUSH
44611: DOUBLE
44612: LD_INT 1
44614: DEC
44615: ST_TO_ADDR
44616: LD_VAR 0 6
44620: PUSH
44621: FOR_TO
44622: IFFALSE 45686
// begin if i > 4 then
44624: LD_VAR 0 8
44628: PUSH
44629: LD_INT 4
44631: GREATER
44632: IFFALSE 44636
// break ;
44634: GO 45686
// case i of 1 :
44636: LD_VAR 0 8
44640: PUSH
44641: LD_INT 1
44643: DOUBLE
44644: EQUAL
44645: IFTRUE 44649
44647: GO 44729
44649: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44650: LD_ADDR_VAR 0 12
44654: PUSH
44655: LD_VAR 0 18
44659: PPUSH
44660: LD_INT 22
44662: PUSH
44663: LD_VAR 0 16
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 58
44674: PUSH
44675: EMPTY
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 30
44683: PUSH
44684: LD_INT 32
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 30
44693: PUSH
44694: LD_INT 4
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 30
44703: PUSH
44704: LD_INT 5
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: PPUSH
44722: CALL_OW 72
44726: ST_TO_ADDR
44727: GO 44951
44729: LD_INT 2
44731: DOUBLE
44732: EQUAL
44733: IFTRUE 44737
44735: GO 44799
44737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44738: LD_ADDR_VAR 0 12
44742: PUSH
44743: LD_VAR 0 18
44747: PPUSH
44748: LD_INT 22
44750: PUSH
44751: LD_VAR 0 16
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: LD_INT 30
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 30
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PPUSH
44792: CALL_OW 72
44796: ST_TO_ADDR
44797: GO 44951
44799: LD_INT 3
44801: DOUBLE
44802: EQUAL
44803: IFTRUE 44807
44805: GO 44869
44807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44808: LD_ADDR_VAR 0 12
44812: PUSH
44813: LD_VAR 0 18
44817: PPUSH
44818: LD_INT 22
44820: PUSH
44821: LD_VAR 0 16
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: LD_INT 30
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 30
44845: PUSH
44846: LD_INT 3
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PPUSH
44862: CALL_OW 72
44866: ST_TO_ADDR
44867: GO 44951
44869: LD_INT 4
44871: DOUBLE
44872: EQUAL
44873: IFTRUE 44877
44875: GO 44950
44877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44878: LD_ADDR_VAR 0 12
44882: PUSH
44883: LD_VAR 0 18
44887: PPUSH
44888: LD_INT 22
44890: PUSH
44891: LD_VAR 0 16
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 30
44905: PUSH
44906: LD_INT 6
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 30
44915: PUSH
44916: LD_INT 7
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 30
44925: PUSH
44926: LD_INT 8
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PPUSH
44943: CALL_OW 72
44947: ST_TO_ADDR
44948: GO 44951
44950: POP
// if i = 1 then
44951: LD_VAR 0 8
44955: PUSH
44956: LD_INT 1
44958: EQUAL
44959: IFFALSE 45070
// begin tmp := [ ] ;
44961: LD_ADDR_VAR 0 19
44965: PUSH
44966: EMPTY
44967: ST_TO_ADDR
// for j in f do
44968: LD_ADDR_VAR 0 9
44972: PUSH
44973: LD_VAR 0 12
44977: PUSH
44978: FOR_IN
44979: IFFALSE 45052
// if GetBType ( j ) = b_bunker then
44981: LD_VAR 0 9
44985: PPUSH
44986: CALL_OW 266
44990: PUSH
44991: LD_INT 32
44993: EQUAL
44994: IFFALSE 45021
// tmp := Insert ( tmp , 1 , j ) else
44996: LD_ADDR_VAR 0 19
45000: PUSH
45001: LD_VAR 0 19
45005: PPUSH
45006: LD_INT 1
45008: PPUSH
45009: LD_VAR 0 9
45013: PPUSH
45014: CALL_OW 2
45018: ST_TO_ADDR
45019: GO 45050
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45021: LD_ADDR_VAR 0 19
45025: PUSH
45026: LD_VAR 0 19
45030: PPUSH
45031: LD_VAR 0 19
45035: PUSH
45036: LD_INT 1
45038: PLUS
45039: PPUSH
45040: LD_VAR 0 9
45044: PPUSH
45045: CALL_OW 2
45049: ST_TO_ADDR
45050: GO 44978
45052: POP
45053: POP
// if tmp then
45054: LD_VAR 0 19
45058: IFFALSE 45070
// f := tmp ;
45060: LD_ADDR_VAR 0 12
45064: PUSH
45065: LD_VAR 0 19
45069: ST_TO_ADDR
// end ; x := personel [ i ] ;
45070: LD_ADDR_VAR 0 13
45074: PUSH
45075: LD_VAR 0 6
45079: PUSH
45080: LD_VAR 0 8
45084: ARRAY
45085: ST_TO_ADDR
// if x = - 1 then
45086: LD_VAR 0 13
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: EQUAL
45095: IFFALSE 45304
// begin for j in f do
45097: LD_ADDR_VAR 0 9
45101: PUSH
45102: LD_VAR 0 12
45106: PUSH
45107: FOR_IN
45108: IFFALSE 45300
// repeat InitHc ;
45110: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45114: LD_VAR 0 9
45118: PPUSH
45119: CALL_OW 266
45123: PUSH
45124: LD_INT 5
45126: EQUAL
45127: IFFALSE 45197
// begin if UnitsInside ( j ) < 3 then
45129: LD_VAR 0 9
45133: PPUSH
45134: CALL_OW 313
45138: PUSH
45139: LD_INT 3
45141: LESS
45142: IFFALSE 45178
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45144: LD_INT 0
45146: PPUSH
45147: LD_INT 5
45149: PUSH
45150: LD_INT 8
45152: PUSH
45153: LD_INT 9
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: PUSH
45161: LD_VAR 0 17
45165: ARRAY
45166: PPUSH
45167: LD_VAR 0 4
45171: PPUSH
45172: CALL_OW 380
45176: GO 45195
// PrepareHuman ( false , i , skill ) ;
45178: LD_INT 0
45180: PPUSH
45181: LD_VAR 0 8
45185: PPUSH
45186: LD_VAR 0 4
45190: PPUSH
45191: CALL_OW 380
// end else
45195: GO 45214
// PrepareHuman ( false , i , skill ) ;
45197: LD_INT 0
45199: PPUSH
45200: LD_VAR 0 8
45204: PPUSH
45205: LD_VAR 0 4
45209: PPUSH
45210: CALL_OW 380
// un := CreateHuman ;
45214: LD_ADDR_VAR 0 14
45218: PUSH
45219: CALL_OW 44
45223: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45224: LD_ADDR_VAR 0 7
45228: PUSH
45229: LD_VAR 0 7
45233: PPUSH
45234: LD_INT 1
45236: PPUSH
45237: LD_VAR 0 14
45241: PPUSH
45242: CALL_OW 2
45246: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45247: LD_VAR 0 14
45251: PPUSH
45252: LD_VAR 0 9
45256: PPUSH
45257: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45261: LD_VAR 0 9
45265: PPUSH
45266: CALL_OW 313
45270: PUSH
45271: LD_INT 6
45273: EQUAL
45274: PUSH
45275: LD_VAR 0 9
45279: PPUSH
45280: CALL_OW 266
45284: PUSH
45285: LD_INT 32
45287: PUSH
45288: LD_INT 31
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: IN
45295: OR
45296: IFFALSE 45110
45298: GO 45107
45300: POP
45301: POP
// end else
45302: GO 45684
// for j = 1 to x do
45304: LD_ADDR_VAR 0 9
45308: PUSH
45309: DOUBLE
45310: LD_INT 1
45312: DEC
45313: ST_TO_ADDR
45314: LD_VAR 0 13
45318: PUSH
45319: FOR_TO
45320: IFFALSE 45682
// begin InitHc ;
45322: CALL_OW 19
// if not f then
45326: LD_VAR 0 12
45330: NOT
45331: IFFALSE 45420
// begin PrepareHuman ( false , i , skill ) ;
45333: LD_INT 0
45335: PPUSH
45336: LD_VAR 0 8
45340: PPUSH
45341: LD_VAR 0 4
45345: PPUSH
45346: CALL_OW 380
// un := CreateHuman ;
45350: LD_ADDR_VAR 0 14
45354: PUSH
45355: CALL_OW 44
45359: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45360: LD_ADDR_VAR 0 7
45364: PUSH
45365: LD_VAR 0 7
45369: PPUSH
45370: LD_INT 1
45372: PPUSH
45373: LD_VAR 0 14
45377: PPUSH
45378: CALL_OW 2
45382: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45383: LD_VAR 0 14
45387: PPUSH
45388: LD_VAR 0 1
45392: PPUSH
45393: CALL_OW 250
45397: PPUSH
45398: LD_VAR 0 1
45402: PPUSH
45403: CALL_OW 251
45407: PPUSH
45408: LD_INT 10
45410: PPUSH
45411: LD_INT 0
45413: PPUSH
45414: CALL_OW 50
// continue ;
45418: GO 45319
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45420: LD_VAR 0 12
45424: PUSH
45425: LD_INT 1
45427: ARRAY
45428: PPUSH
45429: CALL_OW 313
45433: PUSH
45434: LD_VAR 0 12
45438: PUSH
45439: LD_INT 1
45441: ARRAY
45442: PPUSH
45443: CALL_OW 266
45447: PUSH
45448: LD_INT 32
45450: PUSH
45451: LD_INT 31
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: IN
45458: AND
45459: PUSH
45460: LD_VAR 0 12
45464: PUSH
45465: LD_INT 1
45467: ARRAY
45468: PPUSH
45469: CALL_OW 313
45473: PUSH
45474: LD_INT 6
45476: EQUAL
45477: OR
45478: IFFALSE 45498
// f := Delete ( f , 1 ) ;
45480: LD_ADDR_VAR 0 12
45484: PUSH
45485: LD_VAR 0 12
45489: PPUSH
45490: LD_INT 1
45492: PPUSH
45493: CALL_OW 3
45497: ST_TO_ADDR
// if not f then
45498: LD_VAR 0 12
45502: NOT
45503: IFFALSE 45521
// begin x := x + 2 ;
45505: LD_ADDR_VAR 0 13
45509: PUSH
45510: LD_VAR 0 13
45514: PUSH
45515: LD_INT 2
45517: PLUS
45518: ST_TO_ADDR
// continue ;
45519: GO 45319
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45521: LD_VAR 0 12
45525: PUSH
45526: LD_INT 1
45528: ARRAY
45529: PPUSH
45530: CALL_OW 266
45534: PUSH
45535: LD_INT 5
45537: EQUAL
45538: IFFALSE 45612
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45540: LD_VAR 0 12
45544: PUSH
45545: LD_INT 1
45547: ARRAY
45548: PPUSH
45549: CALL_OW 313
45553: PUSH
45554: LD_INT 3
45556: LESS
45557: IFFALSE 45593
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45559: LD_INT 0
45561: PPUSH
45562: LD_INT 5
45564: PUSH
45565: LD_INT 8
45567: PUSH
45568: LD_INT 9
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: PUSH
45576: LD_VAR 0 17
45580: ARRAY
45581: PPUSH
45582: LD_VAR 0 4
45586: PPUSH
45587: CALL_OW 380
45591: GO 45610
// PrepareHuman ( false , i , skill ) ;
45593: LD_INT 0
45595: PPUSH
45596: LD_VAR 0 8
45600: PPUSH
45601: LD_VAR 0 4
45605: PPUSH
45606: CALL_OW 380
// end else
45610: GO 45629
// PrepareHuman ( false , i , skill ) ;
45612: LD_INT 0
45614: PPUSH
45615: LD_VAR 0 8
45619: PPUSH
45620: LD_VAR 0 4
45624: PPUSH
45625: CALL_OW 380
// un := CreateHuman ;
45629: LD_ADDR_VAR 0 14
45633: PUSH
45634: CALL_OW 44
45638: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45639: LD_ADDR_VAR 0 7
45643: PUSH
45644: LD_VAR 0 7
45648: PPUSH
45649: LD_INT 1
45651: PPUSH
45652: LD_VAR 0 14
45656: PPUSH
45657: CALL_OW 2
45661: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45662: LD_VAR 0 14
45666: PPUSH
45667: LD_VAR 0 12
45671: PUSH
45672: LD_INT 1
45674: ARRAY
45675: PPUSH
45676: CALL_OW 52
// end ;
45680: GO 45319
45682: POP
45683: POP
// end ;
45684: GO 44621
45686: POP
45687: POP
// result := result ^ buildings ;
45688: LD_ADDR_VAR 0 7
45692: PUSH
45693: LD_VAR 0 7
45697: PUSH
45698: LD_VAR 0 18
45702: ADD
45703: ST_TO_ADDR
// end else
45704: GO 45847
// begin for i = 1 to personel do
45706: LD_ADDR_VAR 0 8
45710: PUSH
45711: DOUBLE
45712: LD_INT 1
45714: DEC
45715: ST_TO_ADDR
45716: LD_VAR 0 6
45720: PUSH
45721: FOR_TO
45722: IFFALSE 45845
// begin if i > 4 then
45724: LD_VAR 0 8
45728: PUSH
45729: LD_INT 4
45731: GREATER
45732: IFFALSE 45736
// break ;
45734: GO 45845
// x := personel [ i ] ;
45736: LD_ADDR_VAR 0 13
45740: PUSH
45741: LD_VAR 0 6
45745: PUSH
45746: LD_VAR 0 8
45750: ARRAY
45751: ST_TO_ADDR
// if x = - 1 then
45752: LD_VAR 0 13
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: EQUAL
45761: IFFALSE 45765
// continue ;
45763: GO 45721
// PrepareHuman ( false , i , skill ) ;
45765: LD_INT 0
45767: PPUSH
45768: LD_VAR 0 8
45772: PPUSH
45773: LD_VAR 0 4
45777: PPUSH
45778: CALL_OW 380
// un := CreateHuman ;
45782: LD_ADDR_VAR 0 14
45786: PUSH
45787: CALL_OW 44
45791: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45792: LD_VAR 0 14
45796: PPUSH
45797: LD_VAR 0 1
45801: PPUSH
45802: CALL_OW 250
45806: PPUSH
45807: LD_VAR 0 1
45811: PPUSH
45812: CALL_OW 251
45816: PPUSH
45817: LD_INT 10
45819: PPUSH
45820: LD_INT 0
45822: PPUSH
45823: CALL_OW 50
// result := result ^ un ;
45827: LD_ADDR_VAR 0 7
45831: PUSH
45832: LD_VAR 0 7
45836: PUSH
45837: LD_VAR 0 14
45841: ADD
45842: ST_TO_ADDR
// end ;
45843: GO 45721
45845: POP
45846: POP
// end ; end ;
45847: LD_VAR 0 7
45851: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45852: LD_INT 0
45854: PPUSH
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
45862: PPUSH
45863: PPUSH
45864: PPUSH
45865: PPUSH
45866: PPUSH
45867: PPUSH
45868: PPUSH
45869: PPUSH
// result := false ;
45870: LD_ADDR_VAR 0 3
45874: PUSH
45875: LD_INT 0
45877: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45878: LD_VAR 0 1
45882: NOT
45883: PUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: CALL_OW 266
45893: PUSH
45894: LD_INT 32
45896: PUSH
45897: LD_INT 33
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: IN
45904: NOT
45905: OR
45906: IFFALSE 45910
// exit ;
45908: GO 47019
// nat := GetNation ( tower ) ;
45910: LD_ADDR_VAR 0 12
45914: PUSH
45915: LD_VAR 0 1
45919: PPUSH
45920: CALL_OW 248
45924: ST_TO_ADDR
// side := GetSide ( tower ) ;
45925: LD_ADDR_VAR 0 16
45929: PUSH
45930: LD_VAR 0 1
45934: PPUSH
45935: CALL_OW 255
45939: ST_TO_ADDR
// x := GetX ( tower ) ;
45940: LD_ADDR_VAR 0 10
45944: PUSH
45945: LD_VAR 0 1
45949: PPUSH
45950: CALL_OW 250
45954: ST_TO_ADDR
// y := GetY ( tower ) ;
45955: LD_ADDR_VAR 0 11
45959: PUSH
45960: LD_VAR 0 1
45964: PPUSH
45965: CALL_OW 251
45969: ST_TO_ADDR
// if not x or not y then
45970: LD_VAR 0 10
45974: NOT
45975: PUSH
45976: LD_VAR 0 11
45980: NOT
45981: OR
45982: IFFALSE 45986
// exit ;
45984: GO 47019
// weapon := 0 ;
45986: LD_ADDR_VAR 0 18
45990: PUSH
45991: LD_INT 0
45993: ST_TO_ADDR
// fac_list := [ ] ;
45994: LD_ADDR_VAR 0 17
45998: PUSH
45999: EMPTY
46000: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46001: LD_ADDR_VAR 0 6
46005: PUSH
46006: LD_VAR 0 1
46010: PPUSH
46011: CALL_OW 274
46015: PPUSH
46016: LD_VAR 0 2
46020: PPUSH
46021: LD_INT 0
46023: PPUSH
46024: CALL 43590 0 3
46028: PPUSH
46029: LD_INT 30
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PPUSH
46039: CALL_OW 72
46043: ST_TO_ADDR
// if not factories then
46044: LD_VAR 0 6
46048: NOT
46049: IFFALSE 46053
// exit ;
46051: GO 47019
// for i in factories do
46053: LD_ADDR_VAR 0 8
46057: PUSH
46058: LD_VAR 0 6
46062: PUSH
46063: FOR_IN
46064: IFFALSE 46089
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46066: LD_ADDR_VAR 0 17
46070: PUSH
46071: LD_VAR 0 17
46075: PUSH
46076: LD_VAR 0 8
46080: PPUSH
46081: CALL_OW 478
46085: UNION
46086: ST_TO_ADDR
46087: GO 46063
46089: POP
46090: POP
// if not fac_list then
46091: LD_VAR 0 17
46095: NOT
46096: IFFALSE 46100
// exit ;
46098: GO 47019
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46100: LD_ADDR_VAR 0 5
46104: PUSH
46105: LD_INT 4
46107: PUSH
46108: LD_INT 5
46110: PUSH
46111: LD_INT 9
46113: PUSH
46114: LD_INT 10
46116: PUSH
46117: LD_INT 6
46119: PUSH
46120: LD_INT 7
46122: PUSH
46123: LD_INT 11
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 27
46137: PUSH
46138: LD_INT 28
46140: PUSH
46141: LD_INT 26
46143: PUSH
46144: LD_INT 30
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 43
46155: PUSH
46156: LD_INT 44
46158: PUSH
46159: LD_INT 46
46161: PUSH
46162: LD_INT 45
46164: PUSH
46165: LD_INT 47
46167: PUSH
46168: LD_INT 49
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: PUSH
46184: LD_VAR 0 12
46188: ARRAY
46189: ST_TO_ADDR
// list := list isect fac_list ;
46190: LD_ADDR_VAR 0 5
46194: PUSH
46195: LD_VAR 0 5
46199: PUSH
46200: LD_VAR 0 17
46204: ISECT
46205: ST_TO_ADDR
// if not list then
46206: LD_VAR 0 5
46210: NOT
46211: IFFALSE 46215
// exit ;
46213: GO 47019
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46215: LD_VAR 0 12
46219: PUSH
46220: LD_INT 3
46222: EQUAL
46223: PUSH
46224: LD_INT 49
46226: PUSH
46227: LD_VAR 0 5
46231: IN
46232: AND
46233: PUSH
46234: LD_INT 31
46236: PPUSH
46237: LD_VAR 0 16
46241: PPUSH
46242: CALL_OW 321
46246: PUSH
46247: LD_INT 2
46249: EQUAL
46250: AND
46251: IFFALSE 46311
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46253: LD_INT 22
46255: PUSH
46256: LD_VAR 0 16
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 35
46267: PUSH
46268: LD_INT 49
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 91
46277: PUSH
46278: LD_VAR 0 1
46282: PUSH
46283: LD_INT 10
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: PPUSH
46296: CALL_OW 69
46300: NOT
46301: IFFALSE 46311
// weapon := ru_time_lapser ;
46303: LD_ADDR_VAR 0 18
46307: PUSH
46308: LD_INT 49
46310: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46311: LD_VAR 0 12
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: IN
46326: PUSH
46327: LD_INT 11
46329: PUSH
46330: LD_VAR 0 5
46334: IN
46335: PUSH
46336: LD_INT 30
46338: PUSH
46339: LD_VAR 0 5
46343: IN
46344: OR
46345: AND
46346: PUSH
46347: LD_INT 6
46349: PPUSH
46350: LD_VAR 0 16
46354: PPUSH
46355: CALL_OW 321
46359: PUSH
46360: LD_INT 2
46362: EQUAL
46363: AND
46364: IFFALSE 46529
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46366: LD_INT 22
46368: PUSH
46369: LD_VAR 0 16
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: LD_INT 35
46383: PUSH
46384: LD_INT 11
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 35
46393: PUSH
46394: LD_INT 30
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 91
46408: PUSH
46409: LD_VAR 0 1
46413: PUSH
46414: LD_INT 18
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: PPUSH
46427: CALL_OW 69
46431: NOT
46432: PUSH
46433: LD_INT 22
46435: PUSH
46436: LD_VAR 0 16
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 30
46450: PUSH
46451: LD_INT 32
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 30
46460: PUSH
46461: LD_INT 33
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 91
46475: PUSH
46476: LD_VAR 0 1
46480: PUSH
46481: LD_INT 12
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: PPUSH
46497: CALL_OW 69
46501: PUSH
46502: LD_INT 2
46504: GREATER
46505: AND
46506: IFFALSE 46529
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46508: LD_ADDR_VAR 0 18
46512: PUSH
46513: LD_INT 11
46515: PUSH
46516: LD_INT 30
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_VAR 0 12
46527: ARRAY
46528: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46529: LD_VAR 0 18
46533: NOT
46534: PUSH
46535: LD_INT 40
46537: PPUSH
46538: LD_VAR 0 16
46542: PPUSH
46543: CALL_OW 321
46547: PUSH
46548: LD_INT 2
46550: EQUAL
46551: AND
46552: PUSH
46553: LD_INT 7
46555: PUSH
46556: LD_VAR 0 5
46560: IN
46561: PUSH
46562: LD_INT 28
46564: PUSH
46565: LD_VAR 0 5
46569: IN
46570: OR
46571: PUSH
46572: LD_INT 45
46574: PUSH
46575: LD_VAR 0 5
46579: IN
46580: OR
46581: AND
46582: IFFALSE 46836
// begin hex := GetHexInfo ( x , y ) ;
46584: LD_ADDR_VAR 0 4
46588: PUSH
46589: LD_VAR 0 10
46593: PPUSH
46594: LD_VAR 0 11
46598: PPUSH
46599: CALL_OW 546
46603: ST_TO_ADDR
// if hex [ 1 ] then
46604: LD_VAR 0 4
46608: PUSH
46609: LD_INT 1
46611: ARRAY
46612: IFFALSE 46616
// exit ;
46614: GO 47019
// height := hex [ 2 ] ;
46616: LD_ADDR_VAR 0 15
46620: PUSH
46621: LD_VAR 0 4
46625: PUSH
46626: LD_INT 2
46628: ARRAY
46629: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46630: LD_ADDR_VAR 0 14
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: LD_INT 5
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// for i in tmp do
46653: LD_ADDR_VAR 0 8
46657: PUSH
46658: LD_VAR 0 14
46662: PUSH
46663: FOR_IN
46664: IFFALSE 46834
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46666: LD_ADDR_VAR 0 9
46670: PUSH
46671: LD_VAR 0 10
46675: PPUSH
46676: LD_VAR 0 8
46680: PPUSH
46681: LD_INT 5
46683: PPUSH
46684: CALL_OW 272
46688: PUSH
46689: LD_VAR 0 11
46693: PPUSH
46694: LD_VAR 0 8
46698: PPUSH
46699: LD_INT 5
46701: PPUSH
46702: CALL_OW 273
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46711: LD_VAR 0 9
46715: PUSH
46716: LD_INT 1
46718: ARRAY
46719: PPUSH
46720: LD_VAR 0 9
46724: PUSH
46725: LD_INT 2
46727: ARRAY
46728: PPUSH
46729: CALL_OW 488
46733: IFFALSE 46832
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46735: LD_ADDR_VAR 0 4
46739: PUSH
46740: LD_VAR 0 9
46744: PUSH
46745: LD_INT 1
46747: ARRAY
46748: PPUSH
46749: LD_VAR 0 9
46753: PUSH
46754: LD_INT 2
46756: ARRAY
46757: PPUSH
46758: CALL_OW 546
46762: ST_TO_ADDR
// if hex [ 1 ] then
46763: LD_VAR 0 4
46767: PUSH
46768: LD_INT 1
46770: ARRAY
46771: IFFALSE 46775
// continue ;
46773: GO 46663
// h := hex [ 2 ] ;
46775: LD_ADDR_VAR 0 13
46779: PUSH
46780: LD_VAR 0 4
46784: PUSH
46785: LD_INT 2
46787: ARRAY
46788: ST_TO_ADDR
// if h + 7 < height then
46789: LD_VAR 0 13
46793: PUSH
46794: LD_INT 7
46796: PLUS
46797: PUSH
46798: LD_VAR 0 15
46802: LESS
46803: IFFALSE 46832
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46805: LD_ADDR_VAR 0 18
46809: PUSH
46810: LD_INT 7
46812: PUSH
46813: LD_INT 28
46815: PUSH
46816: LD_INT 45
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: PUSH
46824: LD_VAR 0 12
46828: ARRAY
46829: ST_TO_ADDR
// break ;
46830: GO 46834
// end ; end ; end ;
46832: GO 46663
46834: POP
46835: POP
// end ; if not weapon then
46836: LD_VAR 0 18
46840: NOT
46841: IFFALSE 46901
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46843: LD_ADDR_VAR 0 5
46847: PUSH
46848: LD_VAR 0 5
46852: PUSH
46853: LD_INT 11
46855: PUSH
46856: LD_INT 30
46858: PUSH
46859: LD_INT 49
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: DIFF
46867: ST_TO_ADDR
// if not list then
46868: LD_VAR 0 5
46872: NOT
46873: IFFALSE 46877
// exit ;
46875: GO 47019
// weapon := list [ rand ( 1 , list ) ] ;
46877: LD_ADDR_VAR 0 18
46881: PUSH
46882: LD_VAR 0 5
46886: PUSH
46887: LD_INT 1
46889: PPUSH
46890: LD_VAR 0 5
46894: PPUSH
46895: CALL_OW 12
46899: ARRAY
46900: ST_TO_ADDR
// end ; if weapon then
46901: LD_VAR 0 18
46905: IFFALSE 47019
// begin tmp := CostOfWeapon ( weapon ) ;
46907: LD_ADDR_VAR 0 14
46911: PUSH
46912: LD_VAR 0 18
46916: PPUSH
46917: CALL_OW 451
46921: ST_TO_ADDR
// j := GetBase ( tower ) ;
46922: LD_ADDR_VAR 0 9
46926: PUSH
46927: LD_VAR 0 1
46931: PPUSH
46932: CALL_OW 274
46936: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46937: LD_VAR 0 9
46941: PPUSH
46942: LD_INT 1
46944: PPUSH
46945: CALL_OW 275
46949: PUSH
46950: LD_VAR 0 14
46954: PUSH
46955: LD_INT 1
46957: ARRAY
46958: GREATEREQUAL
46959: PUSH
46960: LD_VAR 0 9
46964: PPUSH
46965: LD_INT 2
46967: PPUSH
46968: CALL_OW 275
46972: PUSH
46973: LD_VAR 0 14
46977: PUSH
46978: LD_INT 2
46980: ARRAY
46981: GREATEREQUAL
46982: AND
46983: PUSH
46984: LD_VAR 0 9
46988: PPUSH
46989: LD_INT 3
46991: PPUSH
46992: CALL_OW 275
46996: PUSH
46997: LD_VAR 0 14
47001: PUSH
47002: LD_INT 3
47004: ARRAY
47005: GREATEREQUAL
47006: AND
47007: IFFALSE 47019
// result := weapon ;
47009: LD_ADDR_VAR 0 3
47013: PUSH
47014: LD_VAR 0 18
47018: ST_TO_ADDR
// end ; end ;
47019: LD_VAR 0 3
47023: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47024: LD_INT 0
47026: PPUSH
47027: PPUSH
// result := true ;
47028: LD_ADDR_VAR 0 3
47032: PUSH
47033: LD_INT 1
47035: ST_TO_ADDR
// if array1 = array2 then
47036: LD_VAR 0 1
47040: PUSH
47041: LD_VAR 0 2
47045: EQUAL
47046: IFFALSE 47106
// begin for i = 1 to array1 do
47048: LD_ADDR_VAR 0 4
47052: PUSH
47053: DOUBLE
47054: LD_INT 1
47056: DEC
47057: ST_TO_ADDR
47058: LD_VAR 0 1
47062: PUSH
47063: FOR_TO
47064: IFFALSE 47102
// if array1 [ i ] <> array2 [ i ] then
47066: LD_VAR 0 1
47070: PUSH
47071: LD_VAR 0 4
47075: ARRAY
47076: PUSH
47077: LD_VAR 0 2
47081: PUSH
47082: LD_VAR 0 4
47086: ARRAY
47087: NONEQUAL
47088: IFFALSE 47100
// begin result := false ;
47090: LD_ADDR_VAR 0 3
47094: PUSH
47095: LD_INT 0
47097: ST_TO_ADDR
// break ;
47098: GO 47102
// end ;
47100: GO 47063
47102: POP
47103: POP
// end else
47104: GO 47114
// result := false ;
47106: LD_ADDR_VAR 0 3
47110: PUSH
47111: LD_INT 0
47113: ST_TO_ADDR
// end ;
47114: LD_VAR 0 3
47118: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47119: LD_INT 0
47121: PPUSH
47122: PPUSH
// if not array1 or not array2 then
47123: LD_VAR 0 1
47127: NOT
47128: PUSH
47129: LD_VAR 0 2
47133: NOT
47134: OR
47135: IFFALSE 47139
// exit ;
47137: GO 47203
// result := true ;
47139: LD_ADDR_VAR 0 3
47143: PUSH
47144: LD_INT 1
47146: ST_TO_ADDR
// for i = 1 to array1 do
47147: LD_ADDR_VAR 0 4
47151: PUSH
47152: DOUBLE
47153: LD_INT 1
47155: DEC
47156: ST_TO_ADDR
47157: LD_VAR 0 1
47161: PUSH
47162: FOR_TO
47163: IFFALSE 47201
// if array1 [ i ] <> array2 [ i ] then
47165: LD_VAR 0 1
47169: PUSH
47170: LD_VAR 0 4
47174: ARRAY
47175: PUSH
47176: LD_VAR 0 2
47180: PUSH
47181: LD_VAR 0 4
47185: ARRAY
47186: NONEQUAL
47187: IFFALSE 47199
// begin result := false ;
47189: LD_ADDR_VAR 0 3
47193: PUSH
47194: LD_INT 0
47196: ST_TO_ADDR
// break ;
47197: GO 47201
// end ;
47199: GO 47162
47201: POP
47202: POP
// end ;
47203: LD_VAR 0 3
47207: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47208: LD_INT 0
47210: PPUSH
47211: PPUSH
47212: PPUSH
// pom := GetBase ( fac ) ;
47213: LD_ADDR_VAR 0 5
47217: PUSH
47218: LD_VAR 0 1
47222: PPUSH
47223: CALL_OW 274
47227: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47228: LD_ADDR_VAR 0 4
47232: PUSH
47233: LD_VAR 0 2
47237: PUSH
47238: LD_INT 1
47240: ARRAY
47241: PPUSH
47242: LD_VAR 0 2
47246: PUSH
47247: LD_INT 2
47249: ARRAY
47250: PPUSH
47251: LD_VAR 0 2
47255: PUSH
47256: LD_INT 3
47258: ARRAY
47259: PPUSH
47260: LD_VAR 0 2
47264: PUSH
47265: LD_INT 4
47267: ARRAY
47268: PPUSH
47269: CALL_OW 449
47273: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47274: LD_ADDR_VAR 0 3
47278: PUSH
47279: LD_VAR 0 5
47283: PPUSH
47284: LD_INT 1
47286: PPUSH
47287: CALL_OW 275
47291: PUSH
47292: LD_VAR 0 4
47296: PUSH
47297: LD_INT 1
47299: ARRAY
47300: GREATEREQUAL
47301: PUSH
47302: LD_VAR 0 5
47306: PPUSH
47307: LD_INT 2
47309: PPUSH
47310: CALL_OW 275
47314: PUSH
47315: LD_VAR 0 4
47319: PUSH
47320: LD_INT 2
47322: ARRAY
47323: GREATEREQUAL
47324: AND
47325: PUSH
47326: LD_VAR 0 5
47330: PPUSH
47331: LD_INT 3
47333: PPUSH
47334: CALL_OW 275
47338: PUSH
47339: LD_VAR 0 4
47343: PUSH
47344: LD_INT 3
47346: ARRAY
47347: GREATEREQUAL
47348: AND
47349: ST_TO_ADDR
// end ;
47350: LD_VAR 0 3
47354: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47355: LD_INT 0
47357: PPUSH
47358: PPUSH
47359: PPUSH
47360: PPUSH
// pom := GetBase ( building ) ;
47361: LD_ADDR_VAR 0 3
47365: PUSH
47366: LD_VAR 0 1
47370: PPUSH
47371: CALL_OW 274
47375: ST_TO_ADDR
// if not pom then
47376: LD_VAR 0 3
47380: NOT
47381: IFFALSE 47385
// exit ;
47383: GO 47555
// btype := GetBType ( building ) ;
47385: LD_ADDR_VAR 0 5
47389: PUSH
47390: LD_VAR 0 1
47394: PPUSH
47395: CALL_OW 266
47399: ST_TO_ADDR
// if btype = b_armoury then
47400: LD_VAR 0 5
47404: PUSH
47405: LD_INT 4
47407: EQUAL
47408: IFFALSE 47418
// btype := b_barracks ;
47410: LD_ADDR_VAR 0 5
47414: PUSH
47415: LD_INT 5
47417: ST_TO_ADDR
// if btype = b_depot then
47418: LD_VAR 0 5
47422: PUSH
47423: LD_INT 0
47425: EQUAL
47426: IFFALSE 47436
// btype := b_warehouse ;
47428: LD_ADDR_VAR 0 5
47432: PUSH
47433: LD_INT 1
47435: ST_TO_ADDR
// if btype = b_workshop then
47436: LD_VAR 0 5
47440: PUSH
47441: LD_INT 2
47443: EQUAL
47444: IFFALSE 47454
// btype := b_factory ;
47446: LD_ADDR_VAR 0 5
47450: PUSH
47451: LD_INT 3
47453: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47454: LD_ADDR_VAR 0 4
47458: PUSH
47459: LD_VAR 0 5
47463: PPUSH
47464: LD_VAR 0 1
47468: PPUSH
47469: CALL_OW 248
47473: PPUSH
47474: CALL_OW 450
47478: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47479: LD_ADDR_VAR 0 2
47483: PUSH
47484: LD_VAR 0 3
47488: PPUSH
47489: LD_INT 1
47491: PPUSH
47492: CALL_OW 275
47496: PUSH
47497: LD_VAR 0 4
47501: PUSH
47502: LD_INT 1
47504: ARRAY
47505: GREATEREQUAL
47506: PUSH
47507: LD_VAR 0 3
47511: PPUSH
47512: LD_INT 2
47514: PPUSH
47515: CALL_OW 275
47519: PUSH
47520: LD_VAR 0 4
47524: PUSH
47525: LD_INT 2
47527: ARRAY
47528: GREATEREQUAL
47529: AND
47530: PUSH
47531: LD_VAR 0 3
47535: PPUSH
47536: LD_INT 3
47538: PPUSH
47539: CALL_OW 275
47543: PUSH
47544: LD_VAR 0 4
47548: PUSH
47549: LD_INT 3
47551: ARRAY
47552: GREATEREQUAL
47553: AND
47554: ST_TO_ADDR
// end ;
47555: LD_VAR 0 2
47559: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47560: LD_INT 0
47562: PPUSH
47563: PPUSH
47564: PPUSH
// pom := GetBase ( building ) ;
47565: LD_ADDR_VAR 0 4
47569: PUSH
47570: LD_VAR 0 1
47574: PPUSH
47575: CALL_OW 274
47579: ST_TO_ADDR
// if not pom then
47580: LD_VAR 0 4
47584: NOT
47585: IFFALSE 47589
// exit ;
47587: GO 47690
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47589: LD_ADDR_VAR 0 5
47593: PUSH
47594: LD_VAR 0 2
47598: PPUSH
47599: LD_VAR 0 1
47603: PPUSH
47604: CALL_OW 248
47608: PPUSH
47609: CALL_OW 450
47613: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47614: LD_ADDR_VAR 0 3
47618: PUSH
47619: LD_VAR 0 4
47623: PPUSH
47624: LD_INT 1
47626: PPUSH
47627: CALL_OW 275
47631: PUSH
47632: LD_VAR 0 5
47636: PUSH
47637: LD_INT 1
47639: ARRAY
47640: GREATEREQUAL
47641: PUSH
47642: LD_VAR 0 4
47646: PPUSH
47647: LD_INT 2
47649: PPUSH
47650: CALL_OW 275
47654: PUSH
47655: LD_VAR 0 5
47659: PUSH
47660: LD_INT 2
47662: ARRAY
47663: GREATEREQUAL
47664: AND
47665: PUSH
47666: LD_VAR 0 4
47670: PPUSH
47671: LD_INT 3
47673: PPUSH
47674: CALL_OW 275
47678: PUSH
47679: LD_VAR 0 5
47683: PUSH
47684: LD_INT 3
47686: ARRAY
47687: GREATEREQUAL
47688: AND
47689: ST_TO_ADDR
// end ;
47690: LD_VAR 0 3
47694: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47695: LD_INT 0
47697: PPUSH
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
47705: PPUSH
47706: PPUSH
47707: PPUSH
// result := false ;
47708: LD_ADDR_VAR 0 8
47712: PUSH
47713: LD_INT 0
47715: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47716: LD_VAR 0 5
47720: NOT
47721: PUSH
47722: LD_VAR 0 1
47726: NOT
47727: OR
47728: PUSH
47729: LD_VAR 0 2
47733: NOT
47734: OR
47735: PUSH
47736: LD_VAR 0 3
47740: NOT
47741: OR
47742: IFFALSE 47746
// exit ;
47744: GO 48560
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47746: LD_ADDR_VAR 0 14
47750: PUSH
47751: LD_VAR 0 1
47755: PPUSH
47756: LD_VAR 0 2
47760: PPUSH
47761: LD_VAR 0 3
47765: PPUSH
47766: LD_VAR 0 4
47770: PPUSH
47771: LD_VAR 0 5
47775: PUSH
47776: LD_INT 1
47778: ARRAY
47779: PPUSH
47780: CALL_OW 248
47784: PPUSH
47785: LD_INT 0
47787: PPUSH
47788: CALL 49813 0 6
47792: ST_TO_ADDR
// if not hexes then
47793: LD_VAR 0 14
47797: NOT
47798: IFFALSE 47802
// exit ;
47800: GO 48560
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47802: LD_ADDR_VAR 0 17
47806: PUSH
47807: LD_VAR 0 5
47811: PPUSH
47812: LD_INT 22
47814: PUSH
47815: LD_VAR 0 13
47819: PPUSH
47820: CALL_OW 255
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: LD_INT 30
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 30
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PPUSH
47861: CALL_OW 72
47865: ST_TO_ADDR
// for i = 1 to hexes do
47866: LD_ADDR_VAR 0 9
47870: PUSH
47871: DOUBLE
47872: LD_INT 1
47874: DEC
47875: ST_TO_ADDR
47876: LD_VAR 0 14
47880: PUSH
47881: FOR_TO
47882: IFFALSE 48558
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47884: LD_ADDR_VAR 0 13
47888: PUSH
47889: LD_VAR 0 14
47893: PUSH
47894: LD_VAR 0 9
47898: ARRAY
47899: PUSH
47900: LD_INT 1
47902: ARRAY
47903: PPUSH
47904: LD_VAR 0 14
47908: PUSH
47909: LD_VAR 0 9
47913: ARRAY
47914: PUSH
47915: LD_INT 2
47917: ARRAY
47918: PPUSH
47919: CALL_OW 428
47923: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47924: LD_VAR 0 14
47928: PUSH
47929: LD_VAR 0 9
47933: ARRAY
47934: PUSH
47935: LD_INT 1
47937: ARRAY
47938: PPUSH
47939: LD_VAR 0 14
47943: PUSH
47944: LD_VAR 0 9
47948: ARRAY
47949: PUSH
47950: LD_INT 2
47952: ARRAY
47953: PPUSH
47954: CALL_OW 351
47958: PUSH
47959: LD_VAR 0 14
47963: PUSH
47964: LD_VAR 0 9
47968: ARRAY
47969: PUSH
47970: LD_INT 1
47972: ARRAY
47973: PPUSH
47974: LD_VAR 0 14
47978: PUSH
47979: LD_VAR 0 9
47983: ARRAY
47984: PUSH
47985: LD_INT 2
47987: ARRAY
47988: PPUSH
47989: CALL_OW 488
47993: NOT
47994: OR
47995: PUSH
47996: LD_VAR 0 13
48000: PPUSH
48001: CALL_OW 247
48005: PUSH
48006: LD_INT 3
48008: EQUAL
48009: OR
48010: IFFALSE 48016
// exit ;
48012: POP
48013: POP
48014: GO 48560
// if not tmp then
48016: LD_VAR 0 13
48020: NOT
48021: IFFALSE 48025
// continue ;
48023: GO 47881
// result := true ;
48025: LD_ADDR_VAR 0 8
48029: PUSH
48030: LD_INT 1
48032: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48033: LD_VAR 0 6
48037: PUSH
48038: LD_VAR 0 13
48042: PPUSH
48043: CALL_OW 247
48047: PUSH
48048: LD_INT 2
48050: EQUAL
48051: AND
48052: PUSH
48053: LD_VAR 0 13
48057: PPUSH
48058: CALL_OW 263
48062: PUSH
48063: LD_INT 1
48065: EQUAL
48066: AND
48067: IFFALSE 48231
// begin if IsDrivenBy ( tmp ) then
48069: LD_VAR 0 13
48073: PPUSH
48074: CALL_OW 311
48078: IFFALSE 48082
// continue ;
48080: GO 47881
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48082: LD_VAR 0 6
48086: PPUSH
48087: LD_INT 3
48089: PUSH
48090: LD_INT 60
48092: PUSH
48093: EMPTY
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 3
48102: PUSH
48103: LD_INT 55
48105: PUSH
48106: EMPTY
48107: LIST
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PPUSH
48117: CALL_OW 72
48121: IFFALSE 48229
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48123: LD_ADDR_VAR 0 18
48127: PUSH
48128: LD_VAR 0 6
48132: PPUSH
48133: LD_INT 3
48135: PUSH
48136: LD_INT 60
48138: PUSH
48139: EMPTY
48140: LIST
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 3
48148: PUSH
48149: LD_INT 55
48151: PUSH
48152: EMPTY
48153: LIST
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PPUSH
48163: CALL_OW 72
48167: PUSH
48168: LD_INT 1
48170: ARRAY
48171: ST_TO_ADDR
// if IsInUnit ( driver ) then
48172: LD_VAR 0 18
48176: PPUSH
48177: CALL_OW 310
48181: IFFALSE 48192
// ComExit ( driver ) ;
48183: LD_VAR 0 18
48187: PPUSH
48188: CALL 73605 0 1
// AddComEnterUnit ( driver , tmp ) ;
48192: LD_VAR 0 18
48196: PPUSH
48197: LD_VAR 0 13
48201: PPUSH
48202: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48206: LD_VAR 0 18
48210: PPUSH
48211: LD_VAR 0 7
48215: PPUSH
48216: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48220: LD_VAR 0 18
48224: PPUSH
48225: CALL_OW 181
// end ; continue ;
48229: GO 47881
// end ; if not cleaners or not tmp in cleaners then
48231: LD_VAR 0 6
48235: NOT
48236: PUSH
48237: LD_VAR 0 13
48241: PUSH
48242: LD_VAR 0 6
48246: IN
48247: NOT
48248: OR
48249: IFFALSE 48556
// begin if dep then
48251: LD_VAR 0 17
48255: IFFALSE 48391
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48257: LD_ADDR_VAR 0 16
48261: PUSH
48262: LD_VAR 0 17
48266: PUSH
48267: LD_INT 1
48269: ARRAY
48270: PPUSH
48271: CALL_OW 250
48275: PPUSH
48276: LD_VAR 0 17
48280: PUSH
48281: LD_INT 1
48283: ARRAY
48284: PPUSH
48285: CALL_OW 254
48289: PPUSH
48290: LD_INT 5
48292: PPUSH
48293: CALL_OW 272
48297: PUSH
48298: LD_VAR 0 17
48302: PUSH
48303: LD_INT 1
48305: ARRAY
48306: PPUSH
48307: CALL_OW 251
48311: PPUSH
48312: LD_VAR 0 17
48316: PUSH
48317: LD_INT 1
48319: ARRAY
48320: PPUSH
48321: CALL_OW 254
48325: PPUSH
48326: LD_INT 5
48328: PPUSH
48329: CALL_OW 273
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48338: LD_VAR 0 16
48342: PUSH
48343: LD_INT 1
48345: ARRAY
48346: PPUSH
48347: LD_VAR 0 16
48351: PUSH
48352: LD_INT 2
48354: ARRAY
48355: PPUSH
48356: CALL_OW 488
48360: IFFALSE 48391
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48362: LD_VAR 0 13
48366: PPUSH
48367: LD_VAR 0 16
48371: PUSH
48372: LD_INT 1
48374: ARRAY
48375: PPUSH
48376: LD_VAR 0 16
48380: PUSH
48381: LD_INT 2
48383: ARRAY
48384: PPUSH
48385: CALL_OW 111
// continue ;
48389: GO 47881
// end ; end ; r := GetDir ( tmp ) ;
48391: LD_ADDR_VAR 0 15
48395: PUSH
48396: LD_VAR 0 13
48400: PPUSH
48401: CALL_OW 254
48405: ST_TO_ADDR
// if r = 5 then
48406: LD_VAR 0 15
48410: PUSH
48411: LD_INT 5
48413: EQUAL
48414: IFFALSE 48424
// r := 0 ;
48416: LD_ADDR_VAR 0 15
48420: PUSH
48421: LD_INT 0
48423: ST_TO_ADDR
// for j = r to 5 do
48424: LD_ADDR_VAR 0 10
48428: PUSH
48429: DOUBLE
48430: LD_VAR 0 15
48434: DEC
48435: ST_TO_ADDR
48436: LD_INT 5
48438: PUSH
48439: FOR_TO
48440: IFFALSE 48554
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48442: LD_ADDR_VAR 0 11
48446: PUSH
48447: LD_VAR 0 13
48451: PPUSH
48452: CALL_OW 250
48456: PPUSH
48457: LD_VAR 0 10
48461: PPUSH
48462: LD_INT 2
48464: PPUSH
48465: CALL_OW 272
48469: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48470: LD_ADDR_VAR 0 12
48474: PUSH
48475: LD_VAR 0 13
48479: PPUSH
48480: CALL_OW 251
48484: PPUSH
48485: LD_VAR 0 10
48489: PPUSH
48490: LD_INT 2
48492: PPUSH
48493: CALL_OW 273
48497: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48498: LD_VAR 0 11
48502: PPUSH
48503: LD_VAR 0 12
48507: PPUSH
48508: CALL_OW 488
48512: PUSH
48513: LD_VAR 0 11
48517: PPUSH
48518: LD_VAR 0 12
48522: PPUSH
48523: CALL_OW 428
48527: NOT
48528: AND
48529: IFFALSE 48552
// begin ComMoveXY ( tmp , _x , _y ) ;
48531: LD_VAR 0 13
48535: PPUSH
48536: LD_VAR 0 11
48540: PPUSH
48541: LD_VAR 0 12
48545: PPUSH
48546: CALL_OW 111
// break ;
48550: GO 48554
// end ; end ;
48552: GO 48439
48554: POP
48555: POP
// end ; end ;
48556: GO 47881
48558: POP
48559: POP
// end ;
48560: LD_VAR 0 8
48564: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48565: LD_INT 0
48567: PPUSH
// result := true ;
48568: LD_ADDR_VAR 0 3
48572: PUSH
48573: LD_INT 1
48575: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48576: LD_VAR 0 2
48580: PUSH
48581: LD_INT 24
48583: DOUBLE
48584: EQUAL
48585: IFTRUE 48595
48587: LD_INT 33
48589: DOUBLE
48590: EQUAL
48591: IFTRUE 48595
48593: GO 48620
48595: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48596: LD_ADDR_VAR 0 3
48600: PUSH
48601: LD_INT 32
48603: PPUSH
48604: LD_VAR 0 1
48608: PPUSH
48609: CALL_OW 321
48613: PUSH
48614: LD_INT 2
48616: EQUAL
48617: ST_TO_ADDR
48618: GO 48936
48620: LD_INT 20
48622: DOUBLE
48623: EQUAL
48624: IFTRUE 48628
48626: GO 48653
48628: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48629: LD_ADDR_VAR 0 3
48633: PUSH
48634: LD_INT 6
48636: PPUSH
48637: LD_VAR 0 1
48641: PPUSH
48642: CALL_OW 321
48646: PUSH
48647: LD_INT 2
48649: EQUAL
48650: ST_TO_ADDR
48651: GO 48936
48653: LD_INT 22
48655: DOUBLE
48656: EQUAL
48657: IFTRUE 48667
48659: LD_INT 36
48661: DOUBLE
48662: EQUAL
48663: IFTRUE 48667
48665: GO 48692
48667: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48668: LD_ADDR_VAR 0 3
48672: PUSH
48673: LD_INT 15
48675: PPUSH
48676: LD_VAR 0 1
48680: PPUSH
48681: CALL_OW 321
48685: PUSH
48686: LD_INT 2
48688: EQUAL
48689: ST_TO_ADDR
48690: GO 48936
48692: LD_INT 30
48694: DOUBLE
48695: EQUAL
48696: IFTRUE 48700
48698: GO 48725
48700: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48701: LD_ADDR_VAR 0 3
48705: PUSH
48706: LD_INT 20
48708: PPUSH
48709: LD_VAR 0 1
48713: PPUSH
48714: CALL_OW 321
48718: PUSH
48719: LD_INT 2
48721: EQUAL
48722: ST_TO_ADDR
48723: GO 48936
48725: LD_INT 28
48727: DOUBLE
48728: EQUAL
48729: IFTRUE 48739
48731: LD_INT 21
48733: DOUBLE
48734: EQUAL
48735: IFTRUE 48739
48737: GO 48764
48739: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48740: LD_ADDR_VAR 0 3
48744: PUSH
48745: LD_INT 21
48747: PPUSH
48748: LD_VAR 0 1
48752: PPUSH
48753: CALL_OW 321
48757: PUSH
48758: LD_INT 2
48760: EQUAL
48761: ST_TO_ADDR
48762: GO 48936
48764: LD_INT 16
48766: DOUBLE
48767: EQUAL
48768: IFTRUE 48772
48770: GO 48797
48772: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48773: LD_ADDR_VAR 0 3
48777: PUSH
48778: LD_INT 84
48780: PPUSH
48781: LD_VAR 0 1
48785: PPUSH
48786: CALL_OW 321
48790: PUSH
48791: LD_INT 2
48793: EQUAL
48794: ST_TO_ADDR
48795: GO 48936
48797: LD_INT 19
48799: DOUBLE
48800: EQUAL
48801: IFTRUE 48811
48803: LD_INT 23
48805: DOUBLE
48806: EQUAL
48807: IFTRUE 48811
48809: GO 48836
48811: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48812: LD_ADDR_VAR 0 3
48816: PUSH
48817: LD_INT 83
48819: PPUSH
48820: LD_VAR 0 1
48824: PPUSH
48825: CALL_OW 321
48829: PUSH
48830: LD_INT 2
48832: EQUAL
48833: ST_TO_ADDR
48834: GO 48936
48836: LD_INT 17
48838: DOUBLE
48839: EQUAL
48840: IFTRUE 48844
48842: GO 48869
48844: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48845: LD_ADDR_VAR 0 3
48849: PUSH
48850: LD_INT 39
48852: PPUSH
48853: LD_VAR 0 1
48857: PPUSH
48858: CALL_OW 321
48862: PUSH
48863: LD_INT 2
48865: EQUAL
48866: ST_TO_ADDR
48867: GO 48936
48869: LD_INT 18
48871: DOUBLE
48872: EQUAL
48873: IFTRUE 48877
48875: GO 48902
48877: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48878: LD_ADDR_VAR 0 3
48882: PUSH
48883: LD_INT 40
48885: PPUSH
48886: LD_VAR 0 1
48890: PPUSH
48891: CALL_OW 321
48895: PUSH
48896: LD_INT 2
48898: EQUAL
48899: ST_TO_ADDR
48900: GO 48936
48902: LD_INT 27
48904: DOUBLE
48905: EQUAL
48906: IFTRUE 48910
48908: GO 48935
48910: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48911: LD_ADDR_VAR 0 3
48915: PUSH
48916: LD_INT 35
48918: PPUSH
48919: LD_VAR 0 1
48923: PPUSH
48924: CALL_OW 321
48928: PUSH
48929: LD_INT 2
48931: EQUAL
48932: ST_TO_ADDR
48933: GO 48936
48935: POP
// end ;
48936: LD_VAR 0 3
48940: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48941: LD_INT 0
48943: PPUSH
48944: PPUSH
48945: PPUSH
48946: PPUSH
48947: PPUSH
48948: PPUSH
48949: PPUSH
48950: PPUSH
48951: PPUSH
48952: PPUSH
48953: PPUSH
// result := false ;
48954: LD_ADDR_VAR 0 6
48958: PUSH
48959: LD_INT 0
48961: ST_TO_ADDR
// if btype = b_depot then
48962: LD_VAR 0 2
48966: PUSH
48967: LD_INT 0
48969: EQUAL
48970: IFFALSE 48982
// begin result := true ;
48972: LD_ADDR_VAR 0 6
48976: PUSH
48977: LD_INT 1
48979: ST_TO_ADDR
// exit ;
48980: GO 49808
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48982: LD_VAR 0 1
48986: NOT
48987: PUSH
48988: LD_VAR 0 1
48992: PPUSH
48993: CALL_OW 266
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: IN
49008: NOT
49009: OR
49010: PUSH
49011: LD_VAR 0 2
49015: NOT
49016: OR
49017: PUSH
49018: LD_VAR 0 5
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: LD_INT 4
49037: PUSH
49038: LD_INT 5
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: IN
49049: NOT
49050: OR
49051: PUSH
49052: LD_VAR 0 3
49056: PPUSH
49057: LD_VAR 0 4
49061: PPUSH
49062: CALL_OW 488
49066: NOT
49067: OR
49068: IFFALSE 49072
// exit ;
49070: GO 49808
// side := GetSide ( depot ) ;
49072: LD_ADDR_VAR 0 9
49076: PUSH
49077: LD_VAR 0 1
49081: PPUSH
49082: CALL_OW 255
49086: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49087: LD_VAR 0 9
49091: PPUSH
49092: LD_VAR 0 2
49096: PPUSH
49097: CALL 48565 0 2
49101: NOT
49102: IFFALSE 49106
// exit ;
49104: GO 49808
// pom := GetBase ( depot ) ;
49106: LD_ADDR_VAR 0 10
49110: PUSH
49111: LD_VAR 0 1
49115: PPUSH
49116: CALL_OW 274
49120: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49121: LD_ADDR_VAR 0 11
49125: PUSH
49126: LD_VAR 0 2
49130: PPUSH
49131: LD_VAR 0 1
49135: PPUSH
49136: CALL_OW 248
49140: PPUSH
49141: CALL_OW 450
49145: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49146: LD_VAR 0 10
49150: PPUSH
49151: LD_INT 1
49153: PPUSH
49154: CALL_OW 275
49158: PUSH
49159: LD_VAR 0 11
49163: PUSH
49164: LD_INT 1
49166: ARRAY
49167: GREATEREQUAL
49168: PUSH
49169: LD_VAR 0 10
49173: PPUSH
49174: LD_INT 2
49176: PPUSH
49177: CALL_OW 275
49181: PUSH
49182: LD_VAR 0 11
49186: PUSH
49187: LD_INT 2
49189: ARRAY
49190: GREATEREQUAL
49191: AND
49192: PUSH
49193: LD_VAR 0 10
49197: PPUSH
49198: LD_INT 3
49200: PPUSH
49201: CALL_OW 275
49205: PUSH
49206: LD_VAR 0 11
49210: PUSH
49211: LD_INT 3
49213: ARRAY
49214: GREATEREQUAL
49215: AND
49216: NOT
49217: IFFALSE 49221
// exit ;
49219: GO 49808
// if GetBType ( depot ) = b_depot then
49221: LD_VAR 0 1
49225: PPUSH
49226: CALL_OW 266
49230: PUSH
49231: LD_INT 0
49233: EQUAL
49234: IFFALSE 49246
// dist := 28 else
49236: LD_ADDR_VAR 0 14
49240: PUSH
49241: LD_INT 28
49243: ST_TO_ADDR
49244: GO 49254
// dist := 36 ;
49246: LD_ADDR_VAR 0 14
49250: PUSH
49251: LD_INT 36
49253: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49254: LD_VAR 0 1
49258: PPUSH
49259: LD_VAR 0 3
49263: PPUSH
49264: LD_VAR 0 4
49268: PPUSH
49269: CALL_OW 297
49273: PUSH
49274: LD_VAR 0 14
49278: GREATER
49279: IFFALSE 49283
// exit ;
49281: GO 49808
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49283: LD_ADDR_VAR 0 12
49287: PUSH
49288: LD_VAR 0 2
49292: PPUSH
49293: LD_VAR 0 3
49297: PPUSH
49298: LD_VAR 0 4
49302: PPUSH
49303: LD_VAR 0 5
49307: PPUSH
49308: LD_VAR 0 1
49312: PPUSH
49313: CALL_OW 248
49317: PPUSH
49318: LD_INT 0
49320: PPUSH
49321: CALL 49813 0 6
49325: ST_TO_ADDR
// if not hexes then
49326: LD_VAR 0 12
49330: NOT
49331: IFFALSE 49335
// exit ;
49333: GO 49808
// hex := GetHexInfo ( x , y ) ;
49335: LD_ADDR_VAR 0 15
49339: PUSH
49340: LD_VAR 0 3
49344: PPUSH
49345: LD_VAR 0 4
49349: PPUSH
49350: CALL_OW 546
49354: ST_TO_ADDR
// if hex [ 1 ] then
49355: LD_VAR 0 15
49359: PUSH
49360: LD_INT 1
49362: ARRAY
49363: IFFALSE 49367
// exit ;
49365: GO 49808
// height := hex [ 2 ] ;
49367: LD_ADDR_VAR 0 13
49371: PUSH
49372: LD_VAR 0 15
49376: PUSH
49377: LD_INT 2
49379: ARRAY
49380: ST_TO_ADDR
// for i = 1 to hexes do
49381: LD_ADDR_VAR 0 7
49385: PUSH
49386: DOUBLE
49387: LD_INT 1
49389: DEC
49390: ST_TO_ADDR
49391: LD_VAR 0 12
49395: PUSH
49396: FOR_TO
49397: IFFALSE 49727
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49399: LD_VAR 0 12
49403: PUSH
49404: LD_VAR 0 7
49408: ARRAY
49409: PUSH
49410: LD_INT 1
49412: ARRAY
49413: PPUSH
49414: LD_VAR 0 12
49418: PUSH
49419: LD_VAR 0 7
49423: ARRAY
49424: PUSH
49425: LD_INT 2
49427: ARRAY
49428: PPUSH
49429: CALL_OW 488
49433: NOT
49434: PUSH
49435: LD_VAR 0 12
49439: PUSH
49440: LD_VAR 0 7
49444: ARRAY
49445: PUSH
49446: LD_INT 1
49448: ARRAY
49449: PPUSH
49450: LD_VAR 0 12
49454: PUSH
49455: LD_VAR 0 7
49459: ARRAY
49460: PUSH
49461: LD_INT 2
49463: ARRAY
49464: PPUSH
49465: CALL_OW 428
49469: PUSH
49470: LD_INT 0
49472: GREATER
49473: OR
49474: PUSH
49475: LD_VAR 0 12
49479: PUSH
49480: LD_VAR 0 7
49484: ARRAY
49485: PUSH
49486: LD_INT 1
49488: ARRAY
49489: PPUSH
49490: LD_VAR 0 12
49494: PUSH
49495: LD_VAR 0 7
49499: ARRAY
49500: PUSH
49501: LD_INT 2
49503: ARRAY
49504: PPUSH
49505: CALL_OW 351
49509: OR
49510: IFFALSE 49516
// exit ;
49512: POP
49513: POP
49514: GO 49808
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49516: LD_ADDR_VAR 0 8
49520: PUSH
49521: LD_VAR 0 12
49525: PUSH
49526: LD_VAR 0 7
49530: ARRAY
49531: PUSH
49532: LD_INT 1
49534: ARRAY
49535: PPUSH
49536: LD_VAR 0 12
49540: PUSH
49541: LD_VAR 0 7
49545: ARRAY
49546: PUSH
49547: LD_INT 2
49549: ARRAY
49550: PPUSH
49551: CALL_OW 546
49555: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49556: LD_VAR 0 8
49560: PUSH
49561: LD_INT 1
49563: ARRAY
49564: PUSH
49565: LD_VAR 0 8
49569: PUSH
49570: LD_INT 2
49572: ARRAY
49573: PUSH
49574: LD_VAR 0 13
49578: PUSH
49579: LD_INT 2
49581: PLUS
49582: GREATER
49583: OR
49584: PUSH
49585: LD_VAR 0 8
49589: PUSH
49590: LD_INT 2
49592: ARRAY
49593: PUSH
49594: LD_VAR 0 13
49598: PUSH
49599: LD_INT 2
49601: MINUS
49602: LESS
49603: OR
49604: PUSH
49605: LD_VAR 0 8
49609: PUSH
49610: LD_INT 3
49612: ARRAY
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 8
49619: PUSH
49620: LD_INT 9
49622: PUSH
49623: LD_INT 10
49625: PUSH
49626: LD_INT 11
49628: PUSH
49629: LD_INT 12
49631: PUSH
49632: LD_INT 13
49634: PUSH
49635: LD_INT 16
49637: PUSH
49638: LD_INT 17
49640: PUSH
49641: LD_INT 18
49643: PUSH
49644: LD_INT 19
49646: PUSH
49647: LD_INT 20
49649: PUSH
49650: LD_INT 21
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: IN
49668: NOT
49669: OR
49670: PUSH
49671: LD_VAR 0 8
49675: PUSH
49676: LD_INT 5
49678: ARRAY
49679: NOT
49680: OR
49681: PUSH
49682: LD_VAR 0 8
49686: PUSH
49687: LD_INT 6
49689: ARRAY
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: LD_INT 7
49699: PUSH
49700: LD_INT 9
49702: PUSH
49703: LD_INT 10
49705: PUSH
49706: LD_INT 11
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: IN
49717: NOT
49718: OR
49719: IFFALSE 49725
// exit ;
49721: POP
49722: POP
49723: GO 49808
// end ;
49725: GO 49396
49727: POP
49728: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49729: LD_VAR 0 9
49733: PPUSH
49734: LD_VAR 0 3
49738: PPUSH
49739: LD_VAR 0 4
49743: PPUSH
49744: LD_INT 20
49746: PPUSH
49747: CALL 41731 0 4
49751: PUSH
49752: LD_INT 4
49754: ARRAY
49755: IFFALSE 49759
// exit ;
49757: GO 49808
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49759: LD_VAR 0 2
49763: PUSH
49764: LD_INT 29
49766: PUSH
49767: LD_INT 30
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: IN
49774: PUSH
49775: LD_VAR 0 3
49779: PPUSH
49780: LD_VAR 0 4
49784: PPUSH
49785: LD_VAR 0 9
49789: PPUSH
49790: CALL_OW 440
49794: NOT
49795: AND
49796: IFFALSE 49800
// exit ;
49798: GO 49808
// result := true ;
49800: LD_ADDR_VAR 0 6
49804: PUSH
49805: LD_INT 1
49807: ST_TO_ADDR
// end ;
49808: LD_VAR 0 6
49812: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49813: LD_INT 0
49815: PPUSH
49816: PPUSH
49817: PPUSH
49818: PPUSH
49819: PPUSH
49820: PPUSH
49821: PPUSH
49822: PPUSH
49823: PPUSH
49824: PPUSH
49825: PPUSH
49826: PPUSH
49827: PPUSH
49828: PPUSH
49829: PPUSH
49830: PPUSH
49831: PPUSH
49832: PPUSH
49833: PPUSH
49834: PPUSH
49835: PPUSH
49836: PPUSH
49837: PPUSH
49838: PPUSH
49839: PPUSH
49840: PPUSH
49841: PPUSH
49842: PPUSH
49843: PPUSH
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
49853: PPUSH
49854: PPUSH
49855: PPUSH
49856: PPUSH
49857: PPUSH
49858: PPUSH
49859: PPUSH
49860: PPUSH
49861: PPUSH
49862: PPUSH
49863: PPUSH
49864: PPUSH
49865: PPUSH
49866: PPUSH
49867: PPUSH
49868: PPUSH
49869: PPUSH
49870: PPUSH
49871: PPUSH
49872: PPUSH
// result = [ ] ;
49873: LD_ADDR_VAR 0 7
49877: PUSH
49878: EMPTY
49879: ST_TO_ADDR
// temp_list = [ ] ;
49880: LD_ADDR_VAR 0 9
49884: PUSH
49885: EMPTY
49886: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49887: LD_VAR 0 4
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 4
49906: PUSH
49907: LD_INT 5
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: IN
49918: NOT
49919: PUSH
49920: LD_VAR 0 1
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: IN
49935: PUSH
49936: LD_VAR 0 5
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: IN
49955: NOT
49956: AND
49957: OR
49958: IFFALSE 49962
// exit ;
49960: GO 68353
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49962: LD_VAR 0 1
49966: PUSH
49967: LD_INT 6
49969: PUSH
49970: LD_INT 7
49972: PUSH
49973: LD_INT 8
49975: PUSH
49976: LD_INT 13
49978: PUSH
49979: LD_INT 12
49981: PUSH
49982: LD_INT 15
49984: PUSH
49985: LD_INT 11
49987: PUSH
49988: LD_INT 14
49990: PUSH
49991: LD_INT 10
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: IN
50005: IFFALSE 50015
// btype = b_lab ;
50007: LD_ADDR_VAR 0 1
50011: PUSH
50012: LD_INT 6
50014: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50015: LD_VAR 0 6
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: IN
50034: NOT
50035: PUSH
50036: LD_VAR 0 1
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: LD_INT 6
50055: PUSH
50056: LD_INT 36
50058: PUSH
50059: LD_INT 4
50061: PUSH
50062: LD_INT 5
50064: PUSH
50065: LD_INT 31
50067: PUSH
50068: LD_INT 32
50070: PUSH
50071: LD_INT 33
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: IN
50087: NOT
50088: PUSH
50089: LD_VAR 0 6
50093: PUSH
50094: LD_INT 1
50096: EQUAL
50097: AND
50098: OR
50099: PUSH
50100: LD_VAR 0 1
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 3
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: IN
50115: NOT
50116: PUSH
50117: LD_VAR 0 6
50121: PUSH
50122: LD_INT 2
50124: EQUAL
50125: AND
50126: OR
50127: IFFALSE 50137
// mode = 0 ;
50129: LD_ADDR_VAR 0 6
50133: PUSH
50134: LD_INT 0
50136: ST_TO_ADDR
// case mode of 0 :
50137: LD_VAR 0 6
50141: PUSH
50142: LD_INT 0
50144: DOUBLE
50145: EQUAL
50146: IFTRUE 50150
50148: GO 61603
50150: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50151: LD_ADDR_VAR 0 11
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50344: LD_ADDR_VAR 0 12
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 3
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50540: LD_ADDR_VAR 0 13
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 2
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: LD_INT 3
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: LD_INT 3
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50739: LD_ADDR_VAR 0 14
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 3
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50935: LD_ADDR_VAR 0 15
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51128: LD_ADDR_VAR 0 16
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51321: LD_ADDR_VAR 0 17
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: NEG
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51551: LD_ADDR_VAR 0 18
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 2
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51781: LD_ADDR_VAR 0 19
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52011: LD_ADDR_VAR 0 20
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 2
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: NEG
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52241: LD_ADDR_VAR 0 21
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 2
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52471: LD_ADDR_VAR 0 22
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52701: LD_ADDR_VAR 0 23
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: NEG
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: LD_INT 3
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 3
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52981: LD_ADDR_VAR 0 24
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53257: LD_ADDR_VAR 0 25
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53531: LD_ADDR_VAR 0 26
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53807: LD_ADDR_VAR 0 27
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 3
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54087: LD_ADDR_VAR 0 28
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: LD_INT 2
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: NEG
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 3
54334: NEG
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54369: LD_ADDR_VAR 0 29
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: NEG
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54648: LD_ADDR_VAR 0 30
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54926: LD_ADDR_VAR 0 31
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 3
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: LD_INT 3
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55204: LD_ADDR_VAR 0 32
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 3
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55482: LD_ADDR_VAR 0 33
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: LD_INT 3
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 3
55726: NEG
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55761: LD_ADDR_VAR 0 34
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 3
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56041: LD_ADDR_VAR 0 35
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56153: LD_ADDR_VAR 0 36
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56265: LD_ADDR_VAR 0 37
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56377: LD_ADDR_VAR 0 38
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56489: LD_ADDR_VAR 0 39
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56601: LD_ADDR_VAR 0 40
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56713: LD_ADDR_VAR 0 41
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57063: LD_ADDR_VAR 0 42
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: LD_INT 3
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 3
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 3
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 3
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57413: LD_ADDR_VAR 0 43
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 3
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57761: LD_ADDR_VAR 0 44
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 3
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 3
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 3
58070: NEG
58071: PUSH
58072: LD_INT 3
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58111: LD_ADDR_VAR 0 45
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 3
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 3
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 3
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 3
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 3
58420: NEG
58421: PUSH
58422: LD_INT 3
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58461: LD_ADDR_VAR 0 46
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 3
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 3
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 3
58768: NEG
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58809: LD_ADDR_VAR 0 47
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58960: LD_ADDR_VAR 0 48
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59107: LD_ADDR_VAR 0 49
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59251: LD_ADDR_VAR 0 50
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 2
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59395: LD_ADDR_VAR 0 51
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59542: LD_ADDR_VAR 0 52
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: NEG
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: NEG
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59693: LD_ADDR_VAR 0 53
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: LD_INT 2
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59923: LD_ADDR_VAR 0 54
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 2
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: NEG
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60153: LD_ADDR_VAR 0 55
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: LD_INT 0
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: PUSH
60289: LD_INT 2
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 2
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60383: LD_ADDR_VAR 0 56
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: LD_INT 1
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 2
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 2
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60613: LD_ADDR_VAR 0 57
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: NEG
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 2
60812: NEG
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60843: LD_ADDR_VAR 0 58
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: NEG
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61073: LD_ADDR_VAR 0 59
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61161: LD_ADDR_VAR 0 60
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61249: LD_ADDR_VAR 0 61
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61337: LD_ADDR_VAR 0 62
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: NEG
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61425: LD_ADDR_VAR 0 63
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61513: LD_ADDR_VAR 0 64
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: ST_TO_ADDR
// end ; 1 :
61601: GO 67498
61603: LD_INT 1
61605: DOUBLE
61606: EQUAL
61607: IFTRUE 61611
61609: GO 64234
61611: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61612: LD_ADDR_VAR 0 11
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 3
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: LIST
61655: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61656: LD_ADDR_VAR 0 12
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61697: LD_ADDR_VAR 0 13
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: LD_INT 3
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61737: LD_ADDR_VAR 0 14
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 3
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61778: LD_ADDR_VAR 0 15
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 3
61796: NEG
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61822: LD_ADDR_VAR 0 16
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 3
61841: NEG
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: NEG
61854: PUSH
61855: LD_INT 3
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61868: LD_ADDR_VAR 0 17
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: LD_INT 3
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 2
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61912: LD_ADDR_VAR 0 18
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 3
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61953: LD_ADDR_VAR 0 19
61957: PUSH
61958: LD_INT 3
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61993: LD_ADDR_VAR 0 20
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: LD_INT 3
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: LD_INT 3
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: LD_INT 2
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62034: LD_ADDR_VAR 0 21
62038: PUSH
62039: LD_INT 2
62041: NEG
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: NEG
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 3
62063: NEG
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62078: LD_ADDR_VAR 0 22
62082: PUSH
62083: LD_INT 2
62085: NEG
62086: PUSH
62087: LD_INT 3
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 3
62097: NEG
62098: PUSH
62099: LD_INT 2
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: LD_INT 3
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: LIST
62123: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62124: LD_ADDR_VAR 0 23
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 3
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: LD_INT 4
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62168: LD_ADDR_VAR 0 24
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 4
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62209: LD_ADDR_VAR 0 25
62213: PUSH
62214: LD_INT 3
62216: PUSH
62217: LD_INT 3
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 4
62226: PUSH
62227: LD_INT 3
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: LD_INT 4
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62249: LD_ADDR_VAR 0 26
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: LD_INT 4
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 3
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62290: LD_ADDR_VAR 0 27
62294: PUSH
62295: LD_INT 3
62297: NEG
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 4
62319: NEG
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62334: LD_ADDR_VAR 0 28
62338: PUSH
62339: LD_INT 3
62341: NEG
62342: PUSH
62343: LD_INT 3
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 3
62353: NEG
62354: PUSH
62355: LD_INT 4
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 4
62365: NEG
62366: PUSH
62367: LD_INT 3
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62380: LD_ADDR_VAR 0 29
62384: PUSH
62385: LD_INT 1
62387: NEG
62388: PUSH
62389: LD_INT 3
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 3
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: LD_INT 2
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: LD_INT 4
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: LD_INT 4
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: LD_INT 3
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: LD_INT 5
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: LD_INT 5
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: LD_INT 4
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 6
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 6
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: LD_INT 5
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62535: LD_ADDR_VAR 0 30
62539: PUSH
62540: LD_INT 2
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 3
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 4
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 4
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 4
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 5
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 5
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 5
62635: PUSH
62636: LD_INT 1
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 6
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 6
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62678: LD_ADDR_VAR 0 31
62682: PUSH
62683: LD_INT 3
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 3
62695: PUSH
62696: LD_INT 3
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 4
62715: PUSH
62716: LD_INT 3
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 4
62725: PUSH
62726: LD_INT 4
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: LD_INT 4
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 5
62745: PUSH
62746: LD_INT 4
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 5
62755: PUSH
62756: LD_INT 5
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: LD_INT 5
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 6
62775: PUSH
62776: LD_INT 5
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 6
62785: PUSH
62786: LD_INT 6
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: LD_INT 6
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62817: LD_ADDR_VAR 0 32
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 3
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 3
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: LD_INT 2
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 4
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 4
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 3
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 5
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 5
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 4
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: LD_INT 6
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 6
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: LD_INT 5
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62960: LD_ADDR_VAR 0 33
62964: PUSH
62965: LD_INT 2
62967: NEG
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 3
62978: NEG
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 3
62989: NEG
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 3
63001: NEG
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 4
63012: NEG
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 4
63023: NEG
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 4
63035: NEG
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 5
63046: NEG
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 5
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 5
63069: NEG
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 6
63080: NEG
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 6
63091: NEG
63092: PUSH
63093: LD_INT 1
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63115: LD_ADDR_VAR 0 34
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: NEG
63135: PUSH
63136: LD_INT 2
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 3
63146: NEG
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: NEG
63159: PUSH
63160: LD_INT 4
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 4
63170: NEG
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 4
63182: NEG
63183: PUSH
63184: LD_INT 4
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 4
63194: NEG
63195: PUSH
63196: LD_INT 5
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 5
63206: NEG
63207: PUSH
63208: LD_INT 4
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 5
63218: NEG
63219: PUSH
63220: LD_INT 5
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 5
63230: NEG
63231: PUSH
63232: LD_INT 6
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 6
63242: NEG
63243: PUSH
63244: LD_INT 5
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 6
63254: NEG
63255: PUSH
63256: LD_INT 6
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63278: LD_ADDR_VAR 0 41
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: LD_INT 3
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: LD_INT 2
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63322: LD_ADDR_VAR 0 42
63326: PUSH
63327: LD_INT 2
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 3
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: LIST
63362: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63363: LD_ADDR_VAR 0 43
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 3
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63403: LD_ADDR_VAR 0 44
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: LIST
63443: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63444: LD_ADDR_VAR 0 45
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 2
63462: NEG
63463: PUSH
63464: LD_INT 1
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 3
63473: NEG
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: LIST
63487: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63488: LD_ADDR_VAR 0 46
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: LD_INT 2
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 2
63507: NEG
63508: PUSH
63509: LD_INT 3
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 3
63519: NEG
63520: PUSH
63521: LD_INT 2
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: LIST
63533: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63534: LD_ADDR_VAR 0 47
63538: PUSH
63539: LD_INT 2
63541: NEG
63542: PUSH
63543: LD_INT 3
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: LD_INT 3
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63567: LD_ADDR_VAR 0 48
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: LD_INT 2
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63598: LD_ADDR_VAR 0 49
63602: PUSH
63603: LD_INT 3
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63627: LD_ADDR_VAR 0 50
63631: PUSH
63632: LD_INT 2
63634: PUSH
63635: LD_INT 3
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: PUSH
63645: LD_INT 3
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63656: LD_ADDR_VAR 0 51
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: NEG
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63687: LD_ADDR_VAR 0 52
63691: PUSH
63692: LD_INT 3
63694: NEG
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: NEG
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63720: LD_ADDR_VAR 0 53
63724: PUSH
63725: LD_INT 1
63727: NEG
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: LD_INT 3
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: LIST
63763: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63764: LD_ADDR_VAR 0 54
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 1
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 3
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 3
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: LIST
63804: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63805: LD_ADDR_VAR 0 55
63809: PUSH
63810: LD_INT 3
63812: PUSH
63813: LD_INT 2
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 3
63822: PUSH
63823: LD_INT 3
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: LIST
63844: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63845: LD_ADDR_VAR 0 56
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63886: LD_ADDR_VAR 0 57
63890: PUSH
63891: LD_INT 2
63893: NEG
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 3
63904: NEG
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 3
63915: NEG
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: LIST
63929: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63930: LD_ADDR_VAR 0 58
63934: PUSH
63935: LD_INT 2
63937: NEG
63938: PUSH
63939: LD_INT 3
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 3
63949: NEG
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: LIST
63975: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63976: LD_ADDR_VAR 0 59
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 2
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: LIST
64019: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64020: LD_ADDR_VAR 0 60
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 2
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 2
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64061: LD_ADDR_VAR 0 61
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 2
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64101: LD_ADDR_VAR 0 62
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64142: LD_ADDR_VAR 0 63
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: NEG
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: LIST
64185: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64186: LD_ADDR_VAR 0 64
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: LD_INT 2
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 2
64205: NEG
64206: PUSH
64207: LD_INT 1
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 2
64217: NEG
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: LIST
64231: ST_TO_ADDR
// end ; 2 :
64232: GO 67498
64234: LD_INT 2
64236: DOUBLE
64237: EQUAL
64238: IFTRUE 64242
64240: GO 67497
64242: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64243: LD_ADDR_VAR 0 29
64247: PUSH
64248: LD_INT 4
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 4
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 5
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 5
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 4
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 3
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 3
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 3
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 5
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 3
64343: PUSH
64344: LD_INT 3
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 3
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 4
64363: PUSH
64364: LD_INT 3
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 4
64373: PUSH
64374: LD_INT 4
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 3
64383: PUSH
64384: LD_INT 4
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 2
64393: PUSH
64394: LD_INT 3
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 2
64403: PUSH
64404: LD_INT 2
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 4
64413: PUSH
64414: LD_INT 2
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 2
64423: PUSH
64424: LD_INT 4
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: LD_INT 4
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: LD_INT 4
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: LD_INT 5
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: LD_INT 5
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: LD_INT 4
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: LD_INT 3
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: LD_INT 5
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 2
64515: NEG
64516: PUSH
64517: LD_INT 3
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 3
64537: NEG
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 2
64549: NEG
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 2
64560: NEG
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 4
64582: NEG
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 4
64593: NEG
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 4
64605: NEG
64606: PUSH
64607: LD_INT 2
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 2
64617: NEG
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 4
64628: NEG
64629: PUSH
64630: LD_INT 4
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 4
64640: NEG
64641: PUSH
64642: LD_INT 5
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 3
64652: NEG
64653: PUSH
64654: LD_INT 4
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: LD_INT 3
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 4
64676: NEG
64677: PUSH
64678: LD_INT 3
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 5
64688: NEG
64689: PUSH
64690: LD_INT 4
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 5
64700: NEG
64701: PUSH
64702: LD_INT 5
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 5
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 5
64724: NEG
64725: PUSH
64726: LD_INT 3
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64781: LD_ADDR_VAR 0 30
64785: PUSH
64786: LD_INT 4
64788: PUSH
64789: LD_INT 4
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 4
64798: PUSH
64799: LD_INT 3
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 5
64808: PUSH
64809: LD_INT 4
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 5
64818: PUSH
64819: LD_INT 5
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 4
64828: PUSH
64829: LD_INT 5
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: LD_INT 4
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 3
64848: PUSH
64849: LD_INT 3
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 5
64858: PUSH
64859: LD_INT 3
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 3
64868: PUSH
64869: LD_INT 5
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 3
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: LD_INT 4
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 4
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 2
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: LD_INT 4
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 4
64971: NEG
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 4
64982: NEG
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 3
64994: NEG
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 4
65016: NEG
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 5
65027: NEG
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 5
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 5
65050: NEG
65051: PUSH
65052: LD_INT 2
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 3
65062: NEG
65063: PUSH
65064: LD_INT 2
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 3
65073: NEG
65074: PUSH
65075: LD_INT 3
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 3
65085: NEG
65086: PUSH
65087: LD_INT 4
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 2
65097: NEG
65098: PUSH
65099: LD_INT 3
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 3
65121: NEG
65122: PUSH
65123: LD_INT 2
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 4
65133: NEG
65134: PUSH
65135: LD_INT 3
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 4
65145: NEG
65146: PUSH
65147: LD_INT 4
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 2
65157: NEG
65158: PUSH
65159: LD_INT 4
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 4
65169: NEG
65170: PUSH
65171: LD_INT 2
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: LD_INT 4
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: LD_INT 5
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: LD_INT 4
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: LD_INT 3
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 4
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: LD_INT 5
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 2
65260: PUSH
65261: LD_INT 3
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 2
65271: NEG
65272: PUSH
65273: LD_INT 5
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65328: LD_ADDR_VAR 0 31
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 4
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 3
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: LD_INT 4
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: LD_INT 5
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: LD_INT 5
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: LD_INT 4
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 1
65396: NEG
65397: PUSH
65398: LD_INT 3
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 2
65407: PUSH
65408: LD_INT 5
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 2
65417: NEG
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 3
65428: NEG
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 3
65439: NEG
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 2
65451: NEG
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 2
65462: NEG
65463: PUSH
65464: LD_INT 1
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 4
65484: NEG
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 4
65495: NEG
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 4
65507: NEG
65508: PUSH
65509: LD_INT 2
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: LD_INT 2
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 4
65530: NEG
65531: PUSH
65532: LD_INT 4
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 4
65542: NEG
65543: PUSH
65544: LD_INT 5
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 3
65554: NEG
65555: PUSH
65556: LD_INT 4
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 3
65566: NEG
65567: PUSH
65568: LD_INT 3
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 4
65578: NEG
65579: PUSH
65580: LD_INT 3
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 5
65590: NEG
65591: PUSH
65592: LD_INT 4
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 5
65602: NEG
65603: PUSH
65604: LD_INT 5
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 3
65614: NEG
65615: PUSH
65616: LD_INT 5
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 5
65626: NEG
65627: PUSH
65628: LD_INT 3
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: LD_INT 3
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: LD_INT 4
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: PUSH
65661: LD_INT 3
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: LD_INT 2
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: LD_INT 2
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 1
65693: NEG
65694: PUSH
65695: LD_INT 3
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: LD_INT 4
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 2
65717: PUSH
65718: LD_INT 2
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 2
65728: NEG
65729: PUSH
65730: LD_INT 4
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 4
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 4
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 5
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 5
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 4
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 3
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 3
65801: PUSH
65802: LD_INT 1
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 3
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 5
65823: PUSH
65824: LD_INT 2
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65878: LD_ADDR_VAR 0 32
65882: PUSH
65883: LD_INT 4
65885: NEG
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 4
65896: NEG
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 3
65908: NEG
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 3
65919: NEG
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 4
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 5
65941: NEG
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 5
65952: NEG
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 5
65964: NEG
65965: PUSH
65966: LD_INT 2
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: LD_INT 2
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 3
65987: NEG
65988: PUSH
65989: LD_INT 3
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 3
65999: NEG
66000: PUSH
66001: LD_INT 4
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 2
66011: NEG
66012: PUSH
66013: LD_INT 3
66015: NEG
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 3
66035: NEG
66036: PUSH
66037: LD_INT 2
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 4
66047: NEG
66048: PUSH
66049: LD_INT 3
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 4
66059: NEG
66060: PUSH
66061: LD_INT 4
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 2
66071: NEG
66072: PUSH
66073: LD_INT 4
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 4
66083: NEG
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 0
66095: PUSH
66096: LD_INT 4
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_INT 5
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 1
66117: PUSH
66118: LD_INT 4
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: LD_INT 3
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: LD_INT 3
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: LD_INT 4
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: LD_INT 5
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: LD_INT 3
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 2
66185: NEG
66186: PUSH
66187: LD_INT 5
66189: NEG
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 3
66207: PUSH
66208: LD_INT 1
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 4
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 4
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 3
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 2
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 2
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 4
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 4
66290: PUSH
66291: LD_INT 4
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 4
66300: PUSH
66301: LD_INT 3
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 5
66310: PUSH
66311: LD_INT 4
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 5
66320: PUSH
66321: LD_INT 5
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 4
66330: PUSH
66331: LD_INT 5
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 3
66340: PUSH
66341: LD_INT 4
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 3
66350: PUSH
66351: LD_INT 3
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 5
66360: PUSH
66361: LD_INT 3
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 3
66370: PUSH
66371: LD_INT 5
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66425: LD_ADDR_VAR 0 33
66429: PUSH
66430: LD_INT 4
66432: NEG
66433: PUSH
66434: LD_INT 4
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 4
66444: NEG
66445: PUSH
66446: LD_INT 5
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 3
66456: NEG
66457: PUSH
66458: LD_INT 4
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 3
66468: NEG
66469: PUSH
66470: LD_INT 3
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 4
66480: NEG
66481: PUSH
66482: LD_INT 3
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 5
66492: NEG
66493: PUSH
66494: LD_INT 4
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 5
66504: NEG
66505: PUSH
66506: LD_INT 5
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 3
66516: NEG
66517: PUSH
66518: LD_INT 5
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 5
66528: NEG
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 3
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 0
66551: PUSH
66552: LD_INT 4
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: LD_INT 3
66565: NEG
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: LD_INT 2
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 2
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: LD_INT 3
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: LD_INT 4
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 2
66619: PUSH
66620: LD_INT 2
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 2
66630: NEG
66631: PUSH
66632: LD_INT 4
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 4
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 4
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 5
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 5
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 4
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 3
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 3
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 3
66714: PUSH
66715: LD_INT 2
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 5
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 3
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 3
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 4
66755: PUSH
66756: LD_INT 3
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 4
66765: PUSH
66766: LD_INT 4
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 3
66775: PUSH
66776: LD_INT 4
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 2
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 2
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 4
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: LD_INT 4
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: LD_INT 4
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 3
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: LD_INT 4
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: LD_INT 5
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 5
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: LD_INT 4
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 1
66886: NEG
66887: PUSH
66888: LD_INT 3
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 2
66897: PUSH
66898: LD_INT 5
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 2
66907: NEG
66908: PUSH
66909: LD_INT 3
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66963: LD_ADDR_VAR 0 34
66967: PUSH
66968: LD_INT 0
66970: PUSH
66971: LD_INT 4
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: LD_INT 5
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: LD_INT 4
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: LD_INT 3
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: LD_INT 3
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 4
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: LD_INT 5
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 2
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 2
67060: NEG
67061: PUSH
67062: LD_INT 5
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 3
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 3
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 4
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 4
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 3
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 2
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 2
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 2
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 4
67155: PUSH
67156: LD_INT 2
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 4
67165: PUSH
67166: LD_INT 4
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 4
67175: PUSH
67176: LD_INT 3
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 5
67185: PUSH
67186: LD_INT 4
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 5
67195: PUSH
67196: LD_INT 5
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 4
67205: PUSH
67206: LD_INT 5
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 3
67215: PUSH
67216: LD_INT 4
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 3
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 5
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 3
67245: PUSH
67246: LD_INT 5
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 0
67255: PUSH
67256: LD_INT 3
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: LD_INT 2
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 1
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: LD_INT 4
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 4
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: LD_INT 2
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 2
67327: PUSH
67328: LD_INT 4
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 2
67337: NEG
67338: PUSH
67339: LD_INT 2
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 4
67348: NEG
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 4
67359: NEG
67360: PUSH
67361: LD_INT 1
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 3
67382: NEG
67383: PUSH
67384: LD_INT 1
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 4
67393: NEG
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 5
67404: NEG
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 5
67415: NEG
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 5
67427: NEG
67428: PUSH
67429: LD_INT 2
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 3
67439: NEG
67440: PUSH
67441: LD_INT 2
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: ST_TO_ADDR
// end ; end ;
67495: GO 67498
67497: POP
// case btype of b_depot , b_warehouse :
67498: LD_VAR 0 1
67502: PUSH
67503: LD_INT 0
67505: DOUBLE
67506: EQUAL
67507: IFTRUE 67517
67509: LD_INT 1
67511: DOUBLE
67512: EQUAL
67513: IFTRUE 67517
67515: GO 67718
67517: POP
// case nation of nation_american :
67518: LD_VAR 0 5
67522: PUSH
67523: LD_INT 1
67525: DOUBLE
67526: EQUAL
67527: IFTRUE 67531
67529: GO 67587
67531: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67532: LD_ADDR_VAR 0 9
67536: PUSH
67537: LD_VAR 0 11
67541: PUSH
67542: LD_VAR 0 12
67546: PUSH
67547: LD_VAR 0 13
67551: PUSH
67552: LD_VAR 0 14
67556: PUSH
67557: LD_VAR 0 15
67561: PUSH
67562: LD_VAR 0 16
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: PUSH
67575: LD_VAR 0 4
67579: PUSH
67580: LD_INT 1
67582: PLUS
67583: ARRAY
67584: ST_TO_ADDR
67585: GO 67716
67587: LD_INT 2
67589: DOUBLE
67590: EQUAL
67591: IFTRUE 67595
67593: GO 67651
67595: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67596: LD_ADDR_VAR 0 9
67600: PUSH
67601: LD_VAR 0 17
67605: PUSH
67606: LD_VAR 0 18
67610: PUSH
67611: LD_VAR 0 19
67615: PUSH
67616: LD_VAR 0 20
67620: PUSH
67621: LD_VAR 0 21
67625: PUSH
67626: LD_VAR 0 22
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: PUSH
67639: LD_VAR 0 4
67643: PUSH
67644: LD_INT 1
67646: PLUS
67647: ARRAY
67648: ST_TO_ADDR
67649: GO 67716
67651: LD_INT 3
67653: DOUBLE
67654: EQUAL
67655: IFTRUE 67659
67657: GO 67715
67659: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67660: LD_ADDR_VAR 0 9
67664: PUSH
67665: LD_VAR 0 23
67669: PUSH
67670: LD_VAR 0 24
67674: PUSH
67675: LD_VAR 0 25
67679: PUSH
67680: LD_VAR 0 26
67684: PUSH
67685: LD_VAR 0 27
67689: PUSH
67690: LD_VAR 0 28
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: PUSH
67703: LD_VAR 0 4
67707: PUSH
67708: LD_INT 1
67710: PLUS
67711: ARRAY
67712: ST_TO_ADDR
67713: GO 67716
67715: POP
67716: GO 68271
67718: LD_INT 2
67720: DOUBLE
67721: EQUAL
67722: IFTRUE 67732
67724: LD_INT 3
67726: DOUBLE
67727: EQUAL
67728: IFTRUE 67732
67730: GO 67788
67732: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67733: LD_ADDR_VAR 0 9
67737: PUSH
67738: LD_VAR 0 29
67742: PUSH
67743: LD_VAR 0 30
67747: PUSH
67748: LD_VAR 0 31
67752: PUSH
67753: LD_VAR 0 32
67757: PUSH
67758: LD_VAR 0 33
67762: PUSH
67763: LD_VAR 0 34
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: PUSH
67776: LD_VAR 0 4
67780: PUSH
67781: LD_INT 1
67783: PLUS
67784: ARRAY
67785: ST_TO_ADDR
67786: GO 68271
67788: LD_INT 16
67790: DOUBLE
67791: EQUAL
67792: IFTRUE 67850
67794: LD_INT 17
67796: DOUBLE
67797: EQUAL
67798: IFTRUE 67850
67800: LD_INT 18
67802: DOUBLE
67803: EQUAL
67804: IFTRUE 67850
67806: LD_INT 19
67808: DOUBLE
67809: EQUAL
67810: IFTRUE 67850
67812: LD_INT 22
67814: DOUBLE
67815: EQUAL
67816: IFTRUE 67850
67818: LD_INT 20
67820: DOUBLE
67821: EQUAL
67822: IFTRUE 67850
67824: LD_INT 21
67826: DOUBLE
67827: EQUAL
67828: IFTRUE 67850
67830: LD_INT 23
67832: DOUBLE
67833: EQUAL
67834: IFTRUE 67850
67836: LD_INT 24
67838: DOUBLE
67839: EQUAL
67840: IFTRUE 67850
67842: LD_INT 25
67844: DOUBLE
67845: EQUAL
67846: IFTRUE 67850
67848: GO 67906
67850: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67851: LD_ADDR_VAR 0 9
67855: PUSH
67856: LD_VAR 0 35
67860: PUSH
67861: LD_VAR 0 36
67865: PUSH
67866: LD_VAR 0 37
67870: PUSH
67871: LD_VAR 0 38
67875: PUSH
67876: LD_VAR 0 39
67880: PUSH
67881: LD_VAR 0 40
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: PUSH
67894: LD_VAR 0 4
67898: PUSH
67899: LD_INT 1
67901: PLUS
67902: ARRAY
67903: ST_TO_ADDR
67904: GO 68271
67906: LD_INT 6
67908: DOUBLE
67909: EQUAL
67910: IFTRUE 67962
67912: LD_INT 7
67914: DOUBLE
67915: EQUAL
67916: IFTRUE 67962
67918: LD_INT 8
67920: DOUBLE
67921: EQUAL
67922: IFTRUE 67962
67924: LD_INT 13
67926: DOUBLE
67927: EQUAL
67928: IFTRUE 67962
67930: LD_INT 12
67932: DOUBLE
67933: EQUAL
67934: IFTRUE 67962
67936: LD_INT 15
67938: DOUBLE
67939: EQUAL
67940: IFTRUE 67962
67942: LD_INT 11
67944: DOUBLE
67945: EQUAL
67946: IFTRUE 67962
67948: LD_INT 14
67950: DOUBLE
67951: EQUAL
67952: IFTRUE 67962
67954: LD_INT 10
67956: DOUBLE
67957: EQUAL
67958: IFTRUE 67962
67960: GO 68018
67962: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67963: LD_ADDR_VAR 0 9
67967: PUSH
67968: LD_VAR 0 41
67972: PUSH
67973: LD_VAR 0 42
67977: PUSH
67978: LD_VAR 0 43
67982: PUSH
67983: LD_VAR 0 44
67987: PUSH
67988: LD_VAR 0 45
67992: PUSH
67993: LD_VAR 0 46
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: PUSH
68006: LD_VAR 0 4
68010: PUSH
68011: LD_INT 1
68013: PLUS
68014: ARRAY
68015: ST_TO_ADDR
68016: GO 68271
68018: LD_INT 36
68020: DOUBLE
68021: EQUAL
68022: IFTRUE 68026
68024: GO 68082
68026: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68027: LD_ADDR_VAR 0 9
68031: PUSH
68032: LD_VAR 0 47
68036: PUSH
68037: LD_VAR 0 48
68041: PUSH
68042: LD_VAR 0 49
68046: PUSH
68047: LD_VAR 0 50
68051: PUSH
68052: LD_VAR 0 51
68056: PUSH
68057: LD_VAR 0 52
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: PUSH
68070: LD_VAR 0 4
68074: PUSH
68075: LD_INT 1
68077: PLUS
68078: ARRAY
68079: ST_TO_ADDR
68080: GO 68271
68082: LD_INT 4
68084: DOUBLE
68085: EQUAL
68086: IFTRUE 68108
68088: LD_INT 5
68090: DOUBLE
68091: EQUAL
68092: IFTRUE 68108
68094: LD_INT 34
68096: DOUBLE
68097: EQUAL
68098: IFTRUE 68108
68100: LD_INT 37
68102: DOUBLE
68103: EQUAL
68104: IFTRUE 68108
68106: GO 68164
68108: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68109: LD_ADDR_VAR 0 9
68113: PUSH
68114: LD_VAR 0 53
68118: PUSH
68119: LD_VAR 0 54
68123: PUSH
68124: LD_VAR 0 55
68128: PUSH
68129: LD_VAR 0 56
68133: PUSH
68134: LD_VAR 0 57
68138: PUSH
68139: LD_VAR 0 58
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: PUSH
68152: LD_VAR 0 4
68156: PUSH
68157: LD_INT 1
68159: PLUS
68160: ARRAY
68161: ST_TO_ADDR
68162: GO 68271
68164: LD_INT 31
68166: DOUBLE
68167: EQUAL
68168: IFTRUE 68214
68170: LD_INT 32
68172: DOUBLE
68173: EQUAL
68174: IFTRUE 68214
68176: LD_INT 33
68178: DOUBLE
68179: EQUAL
68180: IFTRUE 68214
68182: LD_INT 27
68184: DOUBLE
68185: EQUAL
68186: IFTRUE 68214
68188: LD_INT 26
68190: DOUBLE
68191: EQUAL
68192: IFTRUE 68214
68194: LD_INT 28
68196: DOUBLE
68197: EQUAL
68198: IFTRUE 68214
68200: LD_INT 29
68202: DOUBLE
68203: EQUAL
68204: IFTRUE 68214
68206: LD_INT 30
68208: DOUBLE
68209: EQUAL
68210: IFTRUE 68214
68212: GO 68270
68214: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68215: LD_ADDR_VAR 0 9
68219: PUSH
68220: LD_VAR 0 59
68224: PUSH
68225: LD_VAR 0 60
68229: PUSH
68230: LD_VAR 0 61
68234: PUSH
68235: LD_VAR 0 62
68239: PUSH
68240: LD_VAR 0 63
68244: PUSH
68245: LD_VAR 0 64
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: PUSH
68258: LD_VAR 0 4
68262: PUSH
68263: LD_INT 1
68265: PLUS
68266: ARRAY
68267: ST_TO_ADDR
68268: GO 68271
68270: POP
// temp_list2 = [ ] ;
68271: LD_ADDR_VAR 0 10
68275: PUSH
68276: EMPTY
68277: ST_TO_ADDR
// for i in temp_list do
68278: LD_ADDR_VAR 0 8
68282: PUSH
68283: LD_VAR 0 9
68287: PUSH
68288: FOR_IN
68289: IFFALSE 68341
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68291: LD_ADDR_VAR 0 10
68295: PUSH
68296: LD_VAR 0 10
68300: PUSH
68301: LD_VAR 0 8
68305: PUSH
68306: LD_INT 1
68308: ARRAY
68309: PUSH
68310: LD_VAR 0 2
68314: PLUS
68315: PUSH
68316: LD_VAR 0 8
68320: PUSH
68321: LD_INT 2
68323: ARRAY
68324: PUSH
68325: LD_VAR 0 3
68329: PLUS
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: ADD
68338: ST_TO_ADDR
68339: GO 68288
68341: POP
68342: POP
// result = temp_list2 ;
68343: LD_ADDR_VAR 0 7
68347: PUSH
68348: LD_VAR 0 10
68352: ST_TO_ADDR
// end ;
68353: LD_VAR 0 7
68357: RET
// export function EnemyInRange ( unit , dist ) ; begin
68358: LD_INT 0
68360: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68361: LD_ADDR_VAR 0 3
68365: PUSH
68366: LD_VAR 0 1
68370: PPUSH
68371: CALL_OW 255
68375: PPUSH
68376: LD_VAR 0 1
68380: PPUSH
68381: CALL_OW 250
68385: PPUSH
68386: LD_VAR 0 1
68390: PPUSH
68391: CALL_OW 251
68395: PPUSH
68396: LD_VAR 0 2
68400: PPUSH
68401: CALL 41731 0 4
68405: PUSH
68406: LD_INT 4
68408: ARRAY
68409: ST_TO_ADDR
// end ;
68410: LD_VAR 0 3
68414: RET
// export function PlayerSeeMe ( unit ) ; begin
68415: LD_INT 0
68417: PPUSH
// result := See ( your_side , unit ) ;
68418: LD_ADDR_VAR 0 2
68422: PUSH
68423: LD_OWVAR 2
68427: PPUSH
68428: LD_VAR 0 1
68432: PPUSH
68433: CALL_OW 292
68437: ST_TO_ADDR
// end ;
68438: LD_VAR 0 2
68442: RET
// export function ReverseDir ( unit ) ; begin
68443: LD_INT 0
68445: PPUSH
// if not unit then
68446: LD_VAR 0 1
68450: NOT
68451: IFFALSE 68455
// exit ;
68453: GO 68478
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68455: LD_ADDR_VAR 0 2
68459: PUSH
68460: LD_VAR 0 1
68464: PPUSH
68465: CALL_OW 254
68469: PUSH
68470: LD_INT 3
68472: PLUS
68473: PUSH
68474: LD_INT 6
68476: MOD
68477: ST_TO_ADDR
// end ;
68478: LD_VAR 0 2
68482: RET
// export function ReverseArray ( array ) ; var i ; begin
68483: LD_INT 0
68485: PPUSH
68486: PPUSH
// if not array then
68487: LD_VAR 0 1
68491: NOT
68492: IFFALSE 68496
// exit ;
68494: GO 68551
// result := [ ] ;
68496: LD_ADDR_VAR 0 2
68500: PUSH
68501: EMPTY
68502: ST_TO_ADDR
// for i := array downto 1 do
68503: LD_ADDR_VAR 0 3
68507: PUSH
68508: DOUBLE
68509: LD_VAR 0 1
68513: INC
68514: ST_TO_ADDR
68515: LD_INT 1
68517: PUSH
68518: FOR_DOWNTO
68519: IFFALSE 68549
// result := Join ( result , array [ i ] ) ;
68521: LD_ADDR_VAR 0 2
68525: PUSH
68526: LD_VAR 0 2
68530: PPUSH
68531: LD_VAR 0 1
68535: PUSH
68536: LD_VAR 0 3
68540: ARRAY
68541: PPUSH
68542: CALL 73207 0 2
68546: ST_TO_ADDR
68547: GO 68518
68549: POP
68550: POP
// end ;
68551: LD_VAR 0 2
68555: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68556: LD_INT 0
68558: PPUSH
68559: PPUSH
68560: PPUSH
68561: PPUSH
68562: PPUSH
68563: PPUSH
// if not unit or not hexes then
68564: LD_VAR 0 1
68568: NOT
68569: PUSH
68570: LD_VAR 0 2
68574: NOT
68575: OR
68576: IFFALSE 68580
// exit ;
68578: GO 68703
// dist := 9999 ;
68580: LD_ADDR_VAR 0 5
68584: PUSH
68585: LD_INT 9999
68587: ST_TO_ADDR
// for i = 1 to hexes do
68588: LD_ADDR_VAR 0 4
68592: PUSH
68593: DOUBLE
68594: LD_INT 1
68596: DEC
68597: ST_TO_ADDR
68598: LD_VAR 0 2
68602: PUSH
68603: FOR_TO
68604: IFFALSE 68691
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68606: LD_ADDR_VAR 0 6
68610: PUSH
68611: LD_VAR 0 1
68615: PPUSH
68616: LD_VAR 0 2
68620: PUSH
68621: LD_VAR 0 4
68625: ARRAY
68626: PUSH
68627: LD_INT 1
68629: ARRAY
68630: PPUSH
68631: LD_VAR 0 2
68635: PUSH
68636: LD_VAR 0 4
68640: ARRAY
68641: PUSH
68642: LD_INT 2
68644: ARRAY
68645: PPUSH
68646: CALL_OW 297
68650: ST_TO_ADDR
// if tdist < dist then
68651: LD_VAR 0 6
68655: PUSH
68656: LD_VAR 0 5
68660: LESS
68661: IFFALSE 68689
// begin hex := hexes [ i ] ;
68663: LD_ADDR_VAR 0 8
68667: PUSH
68668: LD_VAR 0 2
68672: PUSH
68673: LD_VAR 0 4
68677: ARRAY
68678: ST_TO_ADDR
// dist := tdist ;
68679: LD_ADDR_VAR 0 5
68683: PUSH
68684: LD_VAR 0 6
68688: ST_TO_ADDR
// end ; end ;
68689: GO 68603
68691: POP
68692: POP
// result := hex ;
68693: LD_ADDR_VAR 0 3
68697: PUSH
68698: LD_VAR 0 8
68702: ST_TO_ADDR
// end ;
68703: LD_VAR 0 3
68707: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68708: LD_INT 0
68710: PPUSH
68711: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68712: LD_VAR 0 1
68716: NOT
68717: PUSH
68718: LD_VAR 0 1
68722: PUSH
68723: LD_INT 21
68725: PUSH
68726: LD_INT 2
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 23
68735: PUSH
68736: LD_INT 2
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PPUSH
68747: CALL_OW 69
68751: IN
68752: NOT
68753: OR
68754: IFFALSE 68758
// exit ;
68756: GO 68805
// for i = 1 to 3 do
68758: LD_ADDR_VAR 0 3
68762: PUSH
68763: DOUBLE
68764: LD_INT 1
68766: DEC
68767: ST_TO_ADDR
68768: LD_INT 3
68770: PUSH
68771: FOR_TO
68772: IFFALSE 68803
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68774: LD_VAR 0 1
68778: PPUSH
68779: CALL_OW 250
68783: PPUSH
68784: LD_VAR 0 1
68788: PPUSH
68789: CALL_OW 251
68793: PPUSH
68794: LD_INT 1
68796: PPUSH
68797: CALL_OW 453
68801: GO 68771
68803: POP
68804: POP
// end ;
68805: LD_VAR 0 2
68809: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68810: LD_INT 0
68812: PPUSH
68813: PPUSH
68814: PPUSH
68815: PPUSH
68816: PPUSH
68817: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68818: LD_VAR 0 1
68822: NOT
68823: PUSH
68824: LD_VAR 0 2
68828: NOT
68829: OR
68830: PUSH
68831: LD_VAR 0 1
68835: PPUSH
68836: CALL_OW 314
68840: OR
68841: IFFALSE 68845
// exit ;
68843: GO 69312
// if GetLives ( i ) < 250 then
68845: LD_VAR 0 4
68849: PPUSH
68850: CALL_OW 256
68854: PUSH
68855: LD_INT 250
68857: LESS
68858: IFFALSE 68871
// begin ComAutodestruct ( i ) ;
68860: LD_VAR 0 4
68864: PPUSH
68865: CALL 68708 0 1
// exit ;
68869: GO 69312
// end ; x := GetX ( enemy_unit ) ;
68871: LD_ADDR_VAR 0 7
68875: PUSH
68876: LD_VAR 0 2
68880: PPUSH
68881: CALL_OW 250
68885: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68886: LD_ADDR_VAR 0 8
68890: PUSH
68891: LD_VAR 0 2
68895: PPUSH
68896: CALL_OW 251
68900: ST_TO_ADDR
// if not x or not y then
68901: LD_VAR 0 7
68905: NOT
68906: PUSH
68907: LD_VAR 0 8
68911: NOT
68912: OR
68913: IFFALSE 68917
// exit ;
68915: GO 69312
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68917: LD_ADDR_VAR 0 6
68921: PUSH
68922: LD_VAR 0 7
68926: PPUSH
68927: LD_INT 0
68929: PPUSH
68930: LD_INT 4
68932: PPUSH
68933: CALL_OW 272
68937: PUSH
68938: LD_VAR 0 8
68942: PPUSH
68943: LD_INT 0
68945: PPUSH
68946: LD_INT 4
68948: PPUSH
68949: CALL_OW 273
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_VAR 0 7
68962: PPUSH
68963: LD_INT 1
68965: PPUSH
68966: LD_INT 4
68968: PPUSH
68969: CALL_OW 272
68973: PUSH
68974: LD_VAR 0 8
68978: PPUSH
68979: LD_INT 1
68981: PPUSH
68982: LD_INT 4
68984: PPUSH
68985: CALL_OW 273
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_VAR 0 7
68998: PPUSH
68999: LD_INT 2
69001: PPUSH
69002: LD_INT 4
69004: PPUSH
69005: CALL_OW 272
69009: PUSH
69010: LD_VAR 0 8
69014: PPUSH
69015: LD_INT 2
69017: PPUSH
69018: LD_INT 4
69020: PPUSH
69021: CALL_OW 273
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_VAR 0 7
69034: PPUSH
69035: LD_INT 3
69037: PPUSH
69038: LD_INT 4
69040: PPUSH
69041: CALL_OW 272
69045: PUSH
69046: LD_VAR 0 8
69050: PPUSH
69051: LD_INT 3
69053: PPUSH
69054: LD_INT 4
69056: PPUSH
69057: CALL_OW 273
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_VAR 0 7
69070: PPUSH
69071: LD_INT 4
69073: PPUSH
69074: LD_INT 4
69076: PPUSH
69077: CALL_OW 272
69081: PUSH
69082: LD_VAR 0 8
69086: PPUSH
69087: LD_INT 4
69089: PPUSH
69090: LD_INT 4
69092: PPUSH
69093: CALL_OW 273
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_VAR 0 7
69106: PPUSH
69107: LD_INT 5
69109: PPUSH
69110: LD_INT 4
69112: PPUSH
69113: CALL_OW 272
69117: PUSH
69118: LD_VAR 0 8
69122: PPUSH
69123: LD_INT 5
69125: PPUSH
69126: LD_INT 4
69128: PPUSH
69129: CALL_OW 273
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: ST_TO_ADDR
// for i = tmp downto 1 do
69146: LD_ADDR_VAR 0 4
69150: PUSH
69151: DOUBLE
69152: LD_VAR 0 6
69156: INC
69157: ST_TO_ADDR
69158: LD_INT 1
69160: PUSH
69161: FOR_DOWNTO
69162: IFFALSE 69263
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69164: LD_VAR 0 6
69168: PUSH
69169: LD_VAR 0 4
69173: ARRAY
69174: PUSH
69175: LD_INT 1
69177: ARRAY
69178: PPUSH
69179: LD_VAR 0 6
69183: PUSH
69184: LD_VAR 0 4
69188: ARRAY
69189: PUSH
69190: LD_INT 2
69192: ARRAY
69193: PPUSH
69194: CALL_OW 488
69198: NOT
69199: PUSH
69200: LD_VAR 0 6
69204: PUSH
69205: LD_VAR 0 4
69209: ARRAY
69210: PUSH
69211: LD_INT 1
69213: ARRAY
69214: PPUSH
69215: LD_VAR 0 6
69219: PUSH
69220: LD_VAR 0 4
69224: ARRAY
69225: PUSH
69226: LD_INT 2
69228: ARRAY
69229: PPUSH
69230: CALL_OW 428
69234: PUSH
69235: LD_INT 0
69237: NONEQUAL
69238: OR
69239: IFFALSE 69261
// tmp := Delete ( tmp , i ) ;
69241: LD_ADDR_VAR 0 6
69245: PUSH
69246: LD_VAR 0 6
69250: PPUSH
69251: LD_VAR 0 4
69255: PPUSH
69256: CALL_OW 3
69260: ST_TO_ADDR
69261: GO 69161
69263: POP
69264: POP
// j := GetClosestHex ( unit , tmp ) ;
69265: LD_ADDR_VAR 0 5
69269: PUSH
69270: LD_VAR 0 1
69274: PPUSH
69275: LD_VAR 0 6
69279: PPUSH
69280: CALL 68556 0 2
69284: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69285: LD_VAR 0 1
69289: PPUSH
69290: LD_VAR 0 5
69294: PUSH
69295: LD_INT 1
69297: ARRAY
69298: PPUSH
69299: LD_VAR 0 5
69303: PUSH
69304: LD_INT 2
69306: ARRAY
69307: PPUSH
69308: CALL_OW 111
// end ;
69312: LD_VAR 0 3
69316: RET
// export function PrepareApemanSoldier ( ) ; begin
69317: LD_INT 0
69319: PPUSH
// uc_nation := 0 ;
69320: LD_ADDR_OWVAR 21
69324: PUSH
69325: LD_INT 0
69327: ST_TO_ADDR
// hc_sex := sex_male ;
69328: LD_ADDR_OWVAR 27
69332: PUSH
69333: LD_INT 1
69335: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69336: LD_ADDR_OWVAR 28
69340: PUSH
69341: LD_INT 15
69343: ST_TO_ADDR
// hc_gallery :=  ;
69344: LD_ADDR_OWVAR 33
69348: PUSH
69349: LD_STRING 
69351: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69352: LD_ADDR_OWVAR 31
69356: PUSH
69357: LD_INT 0
69359: PPUSH
69360: LD_INT 3
69362: PPUSH
69363: CALL_OW 12
69367: PUSH
69368: LD_INT 0
69370: PPUSH
69371: LD_INT 3
69373: PPUSH
69374: CALL_OW 12
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: ST_TO_ADDR
// end ;
69391: LD_VAR 0 1
69395: RET
// export function PrepareApemanEngineer ( ) ; begin
69396: LD_INT 0
69398: PPUSH
// uc_nation := 0 ;
69399: LD_ADDR_OWVAR 21
69403: PUSH
69404: LD_INT 0
69406: ST_TO_ADDR
// hc_sex := sex_male ;
69407: LD_ADDR_OWVAR 27
69411: PUSH
69412: LD_INT 1
69414: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69415: LD_ADDR_OWVAR 28
69419: PUSH
69420: LD_INT 16
69422: ST_TO_ADDR
// hc_gallery :=  ;
69423: LD_ADDR_OWVAR 33
69427: PUSH
69428: LD_STRING 
69430: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69431: LD_ADDR_OWVAR 31
69435: PUSH
69436: LD_INT 0
69438: PPUSH
69439: LD_INT 3
69441: PPUSH
69442: CALL_OW 12
69446: PUSH
69447: LD_INT 0
69449: PPUSH
69450: LD_INT 3
69452: PPUSH
69453: CALL_OW 12
69457: PUSH
69458: LD_INT 0
69460: PUSH
69461: LD_INT 0
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: ST_TO_ADDR
// end ;
69470: LD_VAR 0 1
69474: RET
// export function PrepareApeman ( agressivity ) ; begin
69475: LD_INT 0
69477: PPUSH
// uc_side := 0 ;
69478: LD_ADDR_OWVAR 20
69482: PUSH
69483: LD_INT 0
69485: ST_TO_ADDR
// uc_nation := 0 ;
69486: LD_ADDR_OWVAR 21
69490: PUSH
69491: LD_INT 0
69493: ST_TO_ADDR
// hc_sex := sex_male ;
69494: LD_ADDR_OWVAR 27
69498: PUSH
69499: LD_INT 1
69501: ST_TO_ADDR
// hc_class := class_apeman ;
69502: LD_ADDR_OWVAR 28
69506: PUSH
69507: LD_INT 12
69509: ST_TO_ADDR
// hc_gallery :=  ;
69510: LD_ADDR_OWVAR 33
69514: PUSH
69515: LD_STRING 
69517: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69518: LD_ADDR_OWVAR 35
69522: PUSH
69523: LD_VAR 0 1
69527: NEG
69528: PPUSH
69529: LD_VAR 0 1
69533: PPUSH
69534: CALL_OW 12
69538: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69539: LD_ADDR_OWVAR 31
69543: PUSH
69544: LD_INT 0
69546: PPUSH
69547: LD_INT 3
69549: PPUSH
69550: CALL_OW 12
69554: PUSH
69555: LD_INT 0
69557: PPUSH
69558: LD_INT 3
69560: PPUSH
69561: CALL_OW 12
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: ST_TO_ADDR
// end ;
69578: LD_VAR 0 2
69582: RET
// export function PrepareTiger ( agressivity ) ; begin
69583: LD_INT 0
69585: PPUSH
// uc_side := 0 ;
69586: LD_ADDR_OWVAR 20
69590: PUSH
69591: LD_INT 0
69593: ST_TO_ADDR
// uc_nation := 0 ;
69594: LD_ADDR_OWVAR 21
69598: PUSH
69599: LD_INT 0
69601: ST_TO_ADDR
// hc_class := class_tiger ;
69602: LD_ADDR_OWVAR 28
69606: PUSH
69607: LD_INT 14
69609: ST_TO_ADDR
// hc_gallery :=  ;
69610: LD_ADDR_OWVAR 33
69614: PUSH
69615: LD_STRING 
69617: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69618: LD_ADDR_OWVAR 35
69622: PUSH
69623: LD_VAR 0 1
69627: NEG
69628: PPUSH
69629: LD_VAR 0 1
69633: PPUSH
69634: CALL_OW 12
69638: ST_TO_ADDR
// end ;
69639: LD_VAR 0 2
69643: RET
// export function PrepareEnchidna ( ) ; begin
69644: LD_INT 0
69646: PPUSH
// uc_side := 0 ;
69647: LD_ADDR_OWVAR 20
69651: PUSH
69652: LD_INT 0
69654: ST_TO_ADDR
// uc_nation := 0 ;
69655: LD_ADDR_OWVAR 21
69659: PUSH
69660: LD_INT 0
69662: ST_TO_ADDR
// hc_class := class_baggie ;
69663: LD_ADDR_OWVAR 28
69667: PUSH
69668: LD_INT 13
69670: ST_TO_ADDR
// hc_gallery :=  ;
69671: LD_ADDR_OWVAR 33
69675: PUSH
69676: LD_STRING 
69678: ST_TO_ADDR
// end ;
69679: LD_VAR 0 1
69683: RET
// export function PrepareFrog ( ) ; begin
69684: LD_INT 0
69686: PPUSH
// uc_side := 0 ;
69687: LD_ADDR_OWVAR 20
69691: PUSH
69692: LD_INT 0
69694: ST_TO_ADDR
// uc_nation := 0 ;
69695: LD_ADDR_OWVAR 21
69699: PUSH
69700: LD_INT 0
69702: ST_TO_ADDR
// hc_class := class_frog ;
69703: LD_ADDR_OWVAR 28
69707: PUSH
69708: LD_INT 19
69710: ST_TO_ADDR
// hc_gallery :=  ;
69711: LD_ADDR_OWVAR 33
69715: PUSH
69716: LD_STRING 
69718: ST_TO_ADDR
// end ;
69719: LD_VAR 0 1
69723: RET
// export function PrepareFish ( ) ; begin
69724: LD_INT 0
69726: PPUSH
// uc_side := 0 ;
69727: LD_ADDR_OWVAR 20
69731: PUSH
69732: LD_INT 0
69734: ST_TO_ADDR
// uc_nation := 0 ;
69735: LD_ADDR_OWVAR 21
69739: PUSH
69740: LD_INT 0
69742: ST_TO_ADDR
// hc_class := class_fish ;
69743: LD_ADDR_OWVAR 28
69747: PUSH
69748: LD_INT 20
69750: ST_TO_ADDR
// hc_gallery :=  ;
69751: LD_ADDR_OWVAR 33
69755: PUSH
69756: LD_STRING 
69758: ST_TO_ADDR
// end ;
69759: LD_VAR 0 1
69763: RET
// export function PrepareBird ( ) ; begin
69764: LD_INT 0
69766: PPUSH
// uc_side := 0 ;
69767: LD_ADDR_OWVAR 20
69771: PUSH
69772: LD_INT 0
69774: ST_TO_ADDR
// uc_nation := 0 ;
69775: LD_ADDR_OWVAR 21
69779: PUSH
69780: LD_INT 0
69782: ST_TO_ADDR
// hc_class := class_phororhacos ;
69783: LD_ADDR_OWVAR 28
69787: PUSH
69788: LD_INT 18
69790: ST_TO_ADDR
// hc_gallery :=  ;
69791: LD_ADDR_OWVAR 33
69795: PUSH
69796: LD_STRING 
69798: ST_TO_ADDR
// end ;
69799: LD_VAR 0 1
69803: RET
// export function PrepareHorse ( ) ; begin
69804: LD_INT 0
69806: PPUSH
// uc_side := 0 ;
69807: LD_ADDR_OWVAR 20
69811: PUSH
69812: LD_INT 0
69814: ST_TO_ADDR
// uc_nation := 0 ;
69815: LD_ADDR_OWVAR 21
69819: PUSH
69820: LD_INT 0
69822: ST_TO_ADDR
// hc_class := class_horse ;
69823: LD_ADDR_OWVAR 28
69827: PUSH
69828: LD_INT 21
69830: ST_TO_ADDR
// hc_gallery :=  ;
69831: LD_ADDR_OWVAR 33
69835: PUSH
69836: LD_STRING 
69838: ST_TO_ADDR
// end ;
69839: LD_VAR 0 1
69843: RET
// export function PrepareMastodont ( ) ; begin
69844: LD_INT 0
69846: PPUSH
// uc_side := 0 ;
69847: LD_ADDR_OWVAR 20
69851: PUSH
69852: LD_INT 0
69854: ST_TO_ADDR
// uc_nation := 0 ;
69855: LD_ADDR_OWVAR 21
69859: PUSH
69860: LD_INT 0
69862: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69863: LD_ADDR_OWVAR 37
69867: PUSH
69868: LD_INT 31
69870: ST_TO_ADDR
// vc_control := control_rider ;
69871: LD_ADDR_OWVAR 38
69875: PUSH
69876: LD_INT 4
69878: ST_TO_ADDR
// end ;
69879: LD_VAR 0 1
69883: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69884: LD_INT 0
69886: PPUSH
69887: PPUSH
69888: PPUSH
// uc_side = 0 ;
69889: LD_ADDR_OWVAR 20
69893: PUSH
69894: LD_INT 0
69896: ST_TO_ADDR
// uc_nation = 0 ;
69897: LD_ADDR_OWVAR 21
69901: PUSH
69902: LD_INT 0
69904: ST_TO_ADDR
// InitHc_All ( ) ;
69905: CALL_OW 584
// InitVc ;
69909: CALL_OW 20
// if mastodonts then
69913: LD_VAR 0 6
69917: IFFALSE 69984
// for i = 1 to mastodonts do
69919: LD_ADDR_VAR 0 11
69923: PUSH
69924: DOUBLE
69925: LD_INT 1
69927: DEC
69928: ST_TO_ADDR
69929: LD_VAR 0 6
69933: PUSH
69934: FOR_TO
69935: IFFALSE 69982
// begin vc_chassis := 31 ;
69937: LD_ADDR_OWVAR 37
69941: PUSH
69942: LD_INT 31
69944: ST_TO_ADDR
// vc_control := control_rider ;
69945: LD_ADDR_OWVAR 38
69949: PUSH
69950: LD_INT 4
69952: ST_TO_ADDR
// animal := CreateVehicle ;
69953: LD_ADDR_VAR 0 12
69957: PUSH
69958: CALL_OW 45
69962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69963: LD_VAR 0 12
69967: PPUSH
69968: LD_VAR 0 8
69972: PPUSH
69973: LD_INT 0
69975: PPUSH
69976: CALL 72112 0 3
// end ;
69980: GO 69934
69982: POP
69983: POP
// if horses then
69984: LD_VAR 0 5
69988: IFFALSE 70055
// for i = 1 to horses do
69990: LD_ADDR_VAR 0 11
69994: PUSH
69995: DOUBLE
69996: LD_INT 1
69998: DEC
69999: ST_TO_ADDR
70000: LD_VAR 0 5
70004: PUSH
70005: FOR_TO
70006: IFFALSE 70053
// begin hc_class := 21 ;
70008: LD_ADDR_OWVAR 28
70012: PUSH
70013: LD_INT 21
70015: ST_TO_ADDR
// hc_gallery :=  ;
70016: LD_ADDR_OWVAR 33
70020: PUSH
70021: LD_STRING 
70023: ST_TO_ADDR
// animal := CreateHuman ;
70024: LD_ADDR_VAR 0 12
70028: PUSH
70029: CALL_OW 44
70033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70034: LD_VAR 0 12
70038: PPUSH
70039: LD_VAR 0 8
70043: PPUSH
70044: LD_INT 0
70046: PPUSH
70047: CALL 72112 0 3
// end ;
70051: GO 70005
70053: POP
70054: POP
// if birds then
70055: LD_VAR 0 1
70059: IFFALSE 70126
// for i = 1 to birds do
70061: LD_ADDR_VAR 0 11
70065: PUSH
70066: DOUBLE
70067: LD_INT 1
70069: DEC
70070: ST_TO_ADDR
70071: LD_VAR 0 1
70075: PUSH
70076: FOR_TO
70077: IFFALSE 70124
// begin hc_class := 18 ;
70079: LD_ADDR_OWVAR 28
70083: PUSH
70084: LD_INT 18
70086: ST_TO_ADDR
// hc_gallery =  ;
70087: LD_ADDR_OWVAR 33
70091: PUSH
70092: LD_STRING 
70094: ST_TO_ADDR
// animal := CreateHuman ;
70095: LD_ADDR_VAR 0 12
70099: PUSH
70100: CALL_OW 44
70104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70105: LD_VAR 0 12
70109: PPUSH
70110: LD_VAR 0 8
70114: PPUSH
70115: LD_INT 0
70117: PPUSH
70118: CALL 72112 0 3
// end ;
70122: GO 70076
70124: POP
70125: POP
// if tigers then
70126: LD_VAR 0 2
70130: IFFALSE 70214
// for i = 1 to tigers do
70132: LD_ADDR_VAR 0 11
70136: PUSH
70137: DOUBLE
70138: LD_INT 1
70140: DEC
70141: ST_TO_ADDR
70142: LD_VAR 0 2
70146: PUSH
70147: FOR_TO
70148: IFFALSE 70212
// begin hc_class = class_tiger ;
70150: LD_ADDR_OWVAR 28
70154: PUSH
70155: LD_INT 14
70157: ST_TO_ADDR
// hc_gallery =  ;
70158: LD_ADDR_OWVAR 33
70162: PUSH
70163: LD_STRING 
70165: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70166: LD_ADDR_OWVAR 35
70170: PUSH
70171: LD_INT 7
70173: NEG
70174: PPUSH
70175: LD_INT 7
70177: PPUSH
70178: CALL_OW 12
70182: ST_TO_ADDR
// animal := CreateHuman ;
70183: LD_ADDR_VAR 0 12
70187: PUSH
70188: CALL_OW 44
70192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70193: LD_VAR 0 12
70197: PPUSH
70198: LD_VAR 0 8
70202: PPUSH
70203: LD_INT 0
70205: PPUSH
70206: CALL 72112 0 3
// end ;
70210: GO 70147
70212: POP
70213: POP
// if apemans then
70214: LD_VAR 0 3
70218: IFFALSE 70341
// for i = 1 to apemans do
70220: LD_ADDR_VAR 0 11
70224: PUSH
70225: DOUBLE
70226: LD_INT 1
70228: DEC
70229: ST_TO_ADDR
70230: LD_VAR 0 3
70234: PUSH
70235: FOR_TO
70236: IFFALSE 70339
// begin hc_class = class_apeman ;
70238: LD_ADDR_OWVAR 28
70242: PUSH
70243: LD_INT 12
70245: ST_TO_ADDR
// hc_gallery =  ;
70246: LD_ADDR_OWVAR 33
70250: PUSH
70251: LD_STRING 
70253: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70254: LD_ADDR_OWVAR 35
70258: PUSH
70259: LD_INT 2
70261: NEG
70262: PPUSH
70263: LD_INT 2
70265: PPUSH
70266: CALL_OW 12
70270: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70271: LD_ADDR_OWVAR 31
70275: PUSH
70276: LD_INT 1
70278: PPUSH
70279: LD_INT 3
70281: PPUSH
70282: CALL_OW 12
70286: PUSH
70287: LD_INT 1
70289: PPUSH
70290: LD_INT 3
70292: PPUSH
70293: CALL_OW 12
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: ST_TO_ADDR
// animal := CreateHuman ;
70310: LD_ADDR_VAR 0 12
70314: PUSH
70315: CALL_OW 44
70319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70320: LD_VAR 0 12
70324: PPUSH
70325: LD_VAR 0 8
70329: PPUSH
70330: LD_INT 0
70332: PPUSH
70333: CALL 72112 0 3
// end ;
70337: GO 70235
70339: POP
70340: POP
// if enchidnas then
70341: LD_VAR 0 4
70345: IFFALSE 70412
// for i = 1 to enchidnas do
70347: LD_ADDR_VAR 0 11
70351: PUSH
70352: DOUBLE
70353: LD_INT 1
70355: DEC
70356: ST_TO_ADDR
70357: LD_VAR 0 4
70361: PUSH
70362: FOR_TO
70363: IFFALSE 70410
// begin hc_class = 13 ;
70365: LD_ADDR_OWVAR 28
70369: PUSH
70370: LD_INT 13
70372: ST_TO_ADDR
// hc_gallery =  ;
70373: LD_ADDR_OWVAR 33
70377: PUSH
70378: LD_STRING 
70380: ST_TO_ADDR
// animal := CreateHuman ;
70381: LD_ADDR_VAR 0 12
70385: PUSH
70386: CALL_OW 44
70390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70391: LD_VAR 0 12
70395: PPUSH
70396: LD_VAR 0 8
70400: PPUSH
70401: LD_INT 0
70403: PPUSH
70404: CALL 72112 0 3
// end ;
70408: GO 70362
70410: POP
70411: POP
// if fishes then
70412: LD_VAR 0 7
70416: IFFALSE 70483
// for i = 1 to fishes do
70418: LD_ADDR_VAR 0 11
70422: PUSH
70423: DOUBLE
70424: LD_INT 1
70426: DEC
70427: ST_TO_ADDR
70428: LD_VAR 0 7
70432: PUSH
70433: FOR_TO
70434: IFFALSE 70481
// begin hc_class = 20 ;
70436: LD_ADDR_OWVAR 28
70440: PUSH
70441: LD_INT 20
70443: ST_TO_ADDR
// hc_gallery =  ;
70444: LD_ADDR_OWVAR 33
70448: PUSH
70449: LD_STRING 
70451: ST_TO_ADDR
// animal := CreateHuman ;
70452: LD_ADDR_VAR 0 12
70456: PUSH
70457: CALL_OW 44
70461: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70462: LD_VAR 0 12
70466: PPUSH
70467: LD_VAR 0 9
70471: PPUSH
70472: LD_INT 0
70474: PPUSH
70475: CALL 72112 0 3
// end ;
70479: GO 70433
70481: POP
70482: POP
// end ;
70483: LD_VAR 0 10
70487: RET
// export function WantHeal ( sci , unit ) ; begin
70488: LD_INT 0
70490: PPUSH
// if GetTaskList ( sci ) > 0 then
70491: LD_VAR 0 1
70495: PPUSH
70496: CALL_OW 437
70500: PUSH
70501: LD_INT 0
70503: GREATER
70504: IFFALSE 70574
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70506: LD_VAR 0 1
70510: PPUSH
70511: CALL_OW 437
70515: PUSH
70516: LD_INT 1
70518: ARRAY
70519: PUSH
70520: LD_INT 1
70522: ARRAY
70523: PUSH
70524: LD_STRING l
70526: EQUAL
70527: PUSH
70528: LD_VAR 0 1
70532: PPUSH
70533: CALL_OW 437
70537: PUSH
70538: LD_INT 1
70540: ARRAY
70541: PUSH
70542: LD_INT 4
70544: ARRAY
70545: PUSH
70546: LD_VAR 0 2
70550: EQUAL
70551: AND
70552: IFFALSE 70564
// result := true else
70554: LD_ADDR_VAR 0 3
70558: PUSH
70559: LD_INT 1
70561: ST_TO_ADDR
70562: GO 70572
// result := false ;
70564: LD_ADDR_VAR 0 3
70568: PUSH
70569: LD_INT 0
70571: ST_TO_ADDR
// end else
70572: GO 70582
// result := false ;
70574: LD_ADDR_VAR 0 3
70578: PUSH
70579: LD_INT 0
70581: ST_TO_ADDR
// end ;
70582: LD_VAR 0 3
70586: RET
// export function HealTarget ( sci ) ; begin
70587: LD_INT 0
70589: PPUSH
// if not sci then
70590: LD_VAR 0 1
70594: NOT
70595: IFFALSE 70599
// exit ;
70597: GO 70664
// result := 0 ;
70599: LD_ADDR_VAR 0 2
70603: PUSH
70604: LD_INT 0
70606: ST_TO_ADDR
// if GetTaskList ( sci ) then
70607: LD_VAR 0 1
70611: PPUSH
70612: CALL_OW 437
70616: IFFALSE 70664
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70618: LD_VAR 0 1
70622: PPUSH
70623: CALL_OW 437
70627: PUSH
70628: LD_INT 1
70630: ARRAY
70631: PUSH
70632: LD_INT 1
70634: ARRAY
70635: PUSH
70636: LD_STRING l
70638: EQUAL
70639: IFFALSE 70664
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70641: LD_ADDR_VAR 0 2
70645: PUSH
70646: LD_VAR 0 1
70650: PPUSH
70651: CALL_OW 437
70655: PUSH
70656: LD_INT 1
70658: ARRAY
70659: PUSH
70660: LD_INT 4
70662: ARRAY
70663: ST_TO_ADDR
// end ;
70664: LD_VAR 0 2
70668: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70669: LD_INT 0
70671: PPUSH
70672: PPUSH
70673: PPUSH
70674: PPUSH
// if not base_units then
70675: LD_VAR 0 1
70679: NOT
70680: IFFALSE 70684
// exit ;
70682: GO 70771
// result := false ;
70684: LD_ADDR_VAR 0 2
70688: PUSH
70689: LD_INT 0
70691: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70692: LD_ADDR_VAR 0 5
70696: PUSH
70697: LD_VAR 0 1
70701: PPUSH
70702: LD_INT 21
70704: PUSH
70705: LD_INT 3
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PPUSH
70712: CALL_OW 72
70716: ST_TO_ADDR
// if not tmp then
70717: LD_VAR 0 5
70721: NOT
70722: IFFALSE 70726
// exit ;
70724: GO 70771
// for i in tmp do
70726: LD_ADDR_VAR 0 3
70730: PUSH
70731: LD_VAR 0 5
70735: PUSH
70736: FOR_IN
70737: IFFALSE 70769
// begin result := EnemyInRange ( i , 22 ) ;
70739: LD_ADDR_VAR 0 2
70743: PUSH
70744: LD_VAR 0 3
70748: PPUSH
70749: LD_INT 22
70751: PPUSH
70752: CALL 68358 0 2
70756: ST_TO_ADDR
// if result then
70757: LD_VAR 0 2
70761: IFFALSE 70767
// exit ;
70763: POP
70764: POP
70765: GO 70771
// end ;
70767: GO 70736
70769: POP
70770: POP
// end ;
70771: LD_VAR 0 2
70775: RET
// export function FilterByTag ( units , tag ) ; begin
70776: LD_INT 0
70778: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70779: LD_ADDR_VAR 0 3
70783: PUSH
70784: LD_VAR 0 1
70788: PPUSH
70789: LD_INT 120
70791: PUSH
70792: LD_VAR 0 2
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PPUSH
70801: CALL_OW 72
70805: ST_TO_ADDR
// end ;
70806: LD_VAR 0 3
70810: RET
// export function IsDriver ( un ) ; begin
70811: LD_INT 0
70813: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70814: LD_ADDR_VAR 0 2
70818: PUSH
70819: LD_VAR 0 1
70823: PUSH
70824: LD_INT 55
70826: PUSH
70827: EMPTY
70828: LIST
70829: PPUSH
70830: CALL_OW 69
70834: IN
70835: ST_TO_ADDR
// end ;
70836: LD_VAR 0 2
70840: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70841: LD_INT 0
70843: PPUSH
70844: PPUSH
// list := [ ] ;
70845: LD_ADDR_VAR 0 5
70849: PUSH
70850: EMPTY
70851: ST_TO_ADDR
// case d of 0 :
70852: LD_VAR 0 3
70856: PUSH
70857: LD_INT 0
70859: DOUBLE
70860: EQUAL
70861: IFTRUE 70865
70863: GO 70998
70865: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70866: LD_ADDR_VAR 0 5
70870: PUSH
70871: LD_VAR 0 1
70875: PUSH
70876: LD_INT 4
70878: MINUS
70879: PUSH
70880: LD_VAR 0 2
70884: PUSH
70885: LD_INT 4
70887: MINUS
70888: PUSH
70889: LD_INT 2
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: LIST
70896: PUSH
70897: LD_VAR 0 1
70901: PUSH
70902: LD_INT 3
70904: MINUS
70905: PUSH
70906: LD_VAR 0 2
70910: PUSH
70911: LD_INT 1
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: LIST
70918: PUSH
70919: LD_VAR 0 1
70923: PUSH
70924: LD_INT 4
70926: PLUS
70927: PUSH
70928: LD_VAR 0 2
70932: PUSH
70933: LD_INT 4
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: LIST
70940: PUSH
70941: LD_VAR 0 1
70945: PUSH
70946: LD_INT 3
70948: PLUS
70949: PUSH
70950: LD_VAR 0 2
70954: PUSH
70955: LD_INT 3
70957: PLUS
70958: PUSH
70959: LD_INT 5
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: LIST
70966: PUSH
70967: LD_VAR 0 1
70971: PUSH
70972: LD_VAR 0 2
70976: PUSH
70977: LD_INT 4
70979: PLUS
70980: PUSH
70981: LD_INT 0
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: LIST
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: ST_TO_ADDR
// end ; 1 :
70996: GO 71696
70998: LD_INT 1
71000: DOUBLE
71001: EQUAL
71002: IFTRUE 71006
71004: GO 71139
71006: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71007: LD_ADDR_VAR 0 5
71011: PUSH
71012: LD_VAR 0 1
71016: PUSH
71017: LD_VAR 0 2
71021: PUSH
71022: LD_INT 4
71024: MINUS
71025: PUSH
71026: LD_INT 3
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: LIST
71033: PUSH
71034: LD_VAR 0 1
71038: PUSH
71039: LD_INT 3
71041: MINUS
71042: PUSH
71043: LD_VAR 0 2
71047: PUSH
71048: LD_INT 3
71050: MINUS
71051: PUSH
71052: LD_INT 2
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: LIST
71059: PUSH
71060: LD_VAR 0 1
71064: PUSH
71065: LD_INT 4
71067: MINUS
71068: PUSH
71069: LD_VAR 0 2
71073: PUSH
71074: LD_INT 1
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: LIST
71081: PUSH
71082: LD_VAR 0 1
71086: PUSH
71087: LD_VAR 0 2
71091: PUSH
71092: LD_INT 3
71094: PLUS
71095: PUSH
71096: LD_INT 0
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: LIST
71103: PUSH
71104: LD_VAR 0 1
71108: PUSH
71109: LD_INT 4
71111: PLUS
71112: PUSH
71113: LD_VAR 0 2
71117: PUSH
71118: LD_INT 4
71120: PLUS
71121: PUSH
71122: LD_INT 5
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: LIST
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: ST_TO_ADDR
// end ; 2 :
71137: GO 71696
71139: LD_INT 2
71141: DOUBLE
71142: EQUAL
71143: IFTRUE 71147
71145: GO 71276
71147: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71148: LD_ADDR_VAR 0 5
71152: PUSH
71153: LD_VAR 0 1
71157: PUSH
71158: LD_VAR 0 2
71162: PUSH
71163: LD_INT 3
71165: MINUS
71166: PUSH
71167: LD_INT 3
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: LIST
71174: PUSH
71175: LD_VAR 0 1
71179: PUSH
71180: LD_INT 4
71182: PLUS
71183: PUSH
71184: LD_VAR 0 2
71188: PUSH
71189: LD_INT 4
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: LIST
71196: PUSH
71197: LD_VAR 0 1
71201: PUSH
71202: LD_VAR 0 2
71206: PUSH
71207: LD_INT 4
71209: PLUS
71210: PUSH
71211: LD_INT 0
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: LIST
71218: PUSH
71219: LD_VAR 0 1
71223: PUSH
71224: LD_INT 3
71226: MINUS
71227: PUSH
71228: LD_VAR 0 2
71232: PUSH
71233: LD_INT 1
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: LIST
71240: PUSH
71241: LD_VAR 0 1
71245: PUSH
71246: LD_INT 4
71248: MINUS
71249: PUSH
71250: LD_VAR 0 2
71254: PUSH
71255: LD_INT 4
71257: MINUS
71258: PUSH
71259: LD_INT 2
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: LIST
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: ST_TO_ADDR
// end ; 3 :
71274: GO 71696
71276: LD_INT 3
71278: DOUBLE
71279: EQUAL
71280: IFTRUE 71284
71282: GO 71417
71284: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71285: LD_ADDR_VAR 0 5
71289: PUSH
71290: LD_VAR 0 1
71294: PUSH
71295: LD_INT 3
71297: PLUS
71298: PUSH
71299: LD_VAR 0 2
71303: PUSH
71304: LD_INT 4
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: LIST
71311: PUSH
71312: LD_VAR 0 1
71316: PUSH
71317: LD_INT 4
71319: PLUS
71320: PUSH
71321: LD_VAR 0 2
71325: PUSH
71326: LD_INT 4
71328: PLUS
71329: PUSH
71330: LD_INT 5
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: LIST
71337: PUSH
71338: LD_VAR 0 1
71342: PUSH
71343: LD_INT 4
71345: MINUS
71346: PUSH
71347: LD_VAR 0 2
71351: PUSH
71352: LD_INT 1
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: LIST
71359: PUSH
71360: LD_VAR 0 1
71364: PUSH
71365: LD_VAR 0 2
71369: PUSH
71370: LD_INT 4
71372: MINUS
71373: PUSH
71374: LD_INT 3
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: LIST
71381: PUSH
71382: LD_VAR 0 1
71386: PUSH
71387: LD_INT 3
71389: MINUS
71390: PUSH
71391: LD_VAR 0 2
71395: PUSH
71396: LD_INT 3
71398: MINUS
71399: PUSH
71400: LD_INT 2
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: LIST
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: ST_TO_ADDR
// end ; 4 :
71415: GO 71696
71417: LD_INT 4
71419: DOUBLE
71420: EQUAL
71421: IFTRUE 71425
71423: GO 71558
71425: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71426: LD_ADDR_VAR 0 5
71430: PUSH
71431: LD_VAR 0 1
71435: PUSH
71436: LD_VAR 0 2
71440: PUSH
71441: LD_INT 4
71443: PLUS
71444: PUSH
71445: LD_INT 0
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: LIST
71452: PUSH
71453: LD_VAR 0 1
71457: PUSH
71458: LD_INT 3
71460: PLUS
71461: PUSH
71462: LD_VAR 0 2
71466: PUSH
71467: LD_INT 3
71469: PLUS
71470: PUSH
71471: LD_INT 5
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: LIST
71478: PUSH
71479: LD_VAR 0 1
71483: PUSH
71484: LD_INT 4
71486: PLUS
71487: PUSH
71488: LD_VAR 0 2
71492: PUSH
71493: LD_INT 4
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: LIST
71500: PUSH
71501: LD_VAR 0 1
71505: PUSH
71506: LD_VAR 0 2
71510: PUSH
71511: LD_INT 3
71513: MINUS
71514: PUSH
71515: LD_INT 3
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: LIST
71522: PUSH
71523: LD_VAR 0 1
71527: PUSH
71528: LD_INT 4
71530: MINUS
71531: PUSH
71532: LD_VAR 0 2
71536: PUSH
71537: LD_INT 4
71539: MINUS
71540: PUSH
71541: LD_INT 2
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: LIST
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: ST_TO_ADDR
// end ; 5 :
71556: GO 71696
71558: LD_INT 5
71560: DOUBLE
71561: EQUAL
71562: IFTRUE 71566
71564: GO 71695
71566: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71567: LD_ADDR_VAR 0 5
71571: PUSH
71572: LD_VAR 0 1
71576: PUSH
71577: LD_INT 4
71579: MINUS
71580: PUSH
71581: LD_VAR 0 2
71585: PUSH
71586: LD_INT 1
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: LIST
71593: PUSH
71594: LD_VAR 0 1
71598: PUSH
71599: LD_VAR 0 2
71603: PUSH
71604: LD_INT 4
71606: MINUS
71607: PUSH
71608: LD_INT 3
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: LIST
71615: PUSH
71616: LD_VAR 0 1
71620: PUSH
71621: LD_INT 4
71623: PLUS
71624: PUSH
71625: LD_VAR 0 2
71629: PUSH
71630: LD_INT 4
71632: PLUS
71633: PUSH
71634: LD_INT 5
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: LIST
71641: PUSH
71642: LD_VAR 0 1
71646: PUSH
71647: LD_INT 3
71649: PLUS
71650: PUSH
71651: LD_VAR 0 2
71655: PUSH
71656: LD_INT 4
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: LIST
71663: PUSH
71664: LD_VAR 0 1
71668: PUSH
71669: LD_VAR 0 2
71673: PUSH
71674: LD_INT 3
71676: PLUS
71677: PUSH
71678: LD_INT 0
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: LIST
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: ST_TO_ADDR
// end ; end ;
71693: GO 71696
71695: POP
// result := list ;
71696: LD_ADDR_VAR 0 4
71700: PUSH
71701: LD_VAR 0 5
71705: ST_TO_ADDR
// end ;
71706: LD_VAR 0 4
71710: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71711: LD_INT 0
71713: PPUSH
71714: PPUSH
71715: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71716: LD_VAR 0 1
71720: NOT
71721: PUSH
71722: LD_VAR 0 2
71726: PUSH
71727: LD_INT 1
71729: PUSH
71730: LD_INT 2
71732: PUSH
71733: LD_INT 3
71735: PUSH
71736: LD_INT 4
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: IN
71745: NOT
71746: OR
71747: IFFALSE 71751
// exit ;
71749: GO 71834
// tmp := [ ] ;
71751: LD_ADDR_VAR 0 5
71755: PUSH
71756: EMPTY
71757: ST_TO_ADDR
// for i in units do
71758: LD_ADDR_VAR 0 4
71762: PUSH
71763: LD_VAR 0 1
71767: PUSH
71768: FOR_IN
71769: IFFALSE 71803
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71771: LD_ADDR_VAR 0 5
71775: PUSH
71776: LD_VAR 0 5
71780: PPUSH
71781: LD_VAR 0 4
71785: PPUSH
71786: LD_VAR 0 2
71790: PPUSH
71791: CALL_OW 259
71795: PPUSH
71796: CALL 73207 0 2
71800: ST_TO_ADDR
71801: GO 71768
71803: POP
71804: POP
// if not tmp then
71805: LD_VAR 0 5
71809: NOT
71810: IFFALSE 71814
// exit ;
71812: GO 71834
// result := SortListByListDesc ( units , tmp ) ;
71814: LD_ADDR_VAR 0 3
71818: PUSH
71819: LD_VAR 0 1
71823: PPUSH
71824: LD_VAR 0 5
71828: PPUSH
71829: CALL_OW 77
71833: ST_TO_ADDR
// end ;
71834: LD_VAR 0 3
71838: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71839: LD_INT 0
71841: PPUSH
71842: PPUSH
71843: PPUSH
// result := false ;
71844: LD_ADDR_VAR 0 3
71848: PUSH
71849: LD_INT 0
71851: ST_TO_ADDR
// if not building then
71852: LD_VAR 0 2
71856: NOT
71857: IFFALSE 71861
// exit ;
71859: GO 71999
// x := GetX ( building ) ;
71861: LD_ADDR_VAR 0 4
71865: PUSH
71866: LD_VAR 0 2
71870: PPUSH
71871: CALL_OW 250
71875: ST_TO_ADDR
// y := GetY ( building ) ;
71876: LD_ADDR_VAR 0 5
71880: PUSH
71881: LD_VAR 0 2
71885: PPUSH
71886: CALL_OW 251
71890: ST_TO_ADDR
// if not x or not y then
71891: LD_VAR 0 4
71895: NOT
71896: PUSH
71897: LD_VAR 0 5
71901: NOT
71902: OR
71903: IFFALSE 71907
// exit ;
71905: GO 71999
// if GetTaskList ( unit ) then
71907: LD_VAR 0 1
71911: PPUSH
71912: CALL_OW 437
71916: IFFALSE 71999
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71918: LD_STRING e
71920: PUSH
71921: LD_VAR 0 1
71925: PPUSH
71926: CALL_OW 437
71930: PUSH
71931: LD_INT 1
71933: ARRAY
71934: PUSH
71935: LD_INT 1
71937: ARRAY
71938: EQUAL
71939: PUSH
71940: LD_VAR 0 4
71944: PUSH
71945: LD_VAR 0 1
71949: PPUSH
71950: CALL_OW 437
71954: PUSH
71955: LD_INT 1
71957: ARRAY
71958: PUSH
71959: LD_INT 2
71961: ARRAY
71962: EQUAL
71963: AND
71964: PUSH
71965: LD_VAR 0 5
71969: PUSH
71970: LD_VAR 0 1
71974: PPUSH
71975: CALL_OW 437
71979: PUSH
71980: LD_INT 1
71982: ARRAY
71983: PUSH
71984: LD_INT 3
71986: ARRAY
71987: EQUAL
71988: AND
71989: IFFALSE 71999
// result := true end ;
71991: LD_ADDR_VAR 0 3
71995: PUSH
71996: LD_INT 1
71998: ST_TO_ADDR
// end ;
71999: LD_VAR 0 3
72003: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72004: LD_INT 0
72006: PPUSH
// result := false ;
72007: LD_ADDR_VAR 0 4
72011: PUSH
72012: LD_INT 0
72014: ST_TO_ADDR
// if GetTaskList ( unit ) then
72015: LD_VAR 0 1
72019: PPUSH
72020: CALL_OW 437
72024: IFFALSE 72107
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72026: LD_STRING M
72028: PUSH
72029: LD_VAR 0 1
72033: PPUSH
72034: CALL_OW 437
72038: PUSH
72039: LD_INT 1
72041: ARRAY
72042: PUSH
72043: LD_INT 1
72045: ARRAY
72046: EQUAL
72047: PUSH
72048: LD_VAR 0 2
72052: PUSH
72053: LD_VAR 0 1
72057: PPUSH
72058: CALL_OW 437
72062: PUSH
72063: LD_INT 1
72065: ARRAY
72066: PUSH
72067: LD_INT 2
72069: ARRAY
72070: EQUAL
72071: AND
72072: PUSH
72073: LD_VAR 0 3
72077: PUSH
72078: LD_VAR 0 1
72082: PPUSH
72083: CALL_OW 437
72087: PUSH
72088: LD_INT 1
72090: ARRAY
72091: PUSH
72092: LD_INT 3
72094: ARRAY
72095: EQUAL
72096: AND
72097: IFFALSE 72107
// result := true ;
72099: LD_ADDR_VAR 0 4
72103: PUSH
72104: LD_INT 1
72106: ST_TO_ADDR
// end ; end ;
72107: LD_VAR 0 4
72111: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72112: LD_INT 0
72114: PPUSH
72115: PPUSH
72116: PPUSH
72117: PPUSH
// if not unit or not area then
72118: LD_VAR 0 1
72122: NOT
72123: PUSH
72124: LD_VAR 0 2
72128: NOT
72129: OR
72130: IFFALSE 72134
// exit ;
72132: GO 72310
// tmp := AreaToList ( area , i ) ;
72134: LD_ADDR_VAR 0 6
72138: PUSH
72139: LD_VAR 0 2
72143: PPUSH
72144: LD_VAR 0 5
72148: PPUSH
72149: CALL_OW 517
72153: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72154: LD_ADDR_VAR 0 5
72158: PUSH
72159: DOUBLE
72160: LD_INT 1
72162: DEC
72163: ST_TO_ADDR
72164: LD_VAR 0 6
72168: PUSH
72169: LD_INT 1
72171: ARRAY
72172: PUSH
72173: FOR_TO
72174: IFFALSE 72308
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72176: LD_ADDR_VAR 0 7
72180: PUSH
72181: LD_VAR 0 6
72185: PUSH
72186: LD_INT 1
72188: ARRAY
72189: PUSH
72190: LD_VAR 0 5
72194: ARRAY
72195: PUSH
72196: LD_VAR 0 6
72200: PUSH
72201: LD_INT 2
72203: ARRAY
72204: PUSH
72205: LD_VAR 0 5
72209: ARRAY
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
72215: LD_INT 92
72217: PUSH
72218: LD_VAR 0 7
72222: PUSH
72223: LD_INT 1
72225: ARRAY
72226: PUSH
72227: LD_VAR 0 7
72231: PUSH
72232: LD_INT 2
72234: ARRAY
72235: PUSH
72236: LD_INT 2
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: PPUSH
72245: CALL_OW 69
72249: PUSH
72250: LD_INT 0
72252: EQUAL
72253: IFFALSE 72306
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72255: LD_VAR 0 1
72259: PPUSH
72260: LD_VAR 0 7
72264: PUSH
72265: LD_INT 1
72267: ARRAY
72268: PPUSH
72269: LD_VAR 0 7
72273: PUSH
72274: LD_INT 2
72276: ARRAY
72277: PPUSH
72278: LD_VAR 0 3
72282: PPUSH
72283: CALL_OW 48
// result := IsPlaced ( unit ) ;
72287: LD_ADDR_VAR 0 4
72291: PUSH
72292: LD_VAR 0 1
72296: PPUSH
72297: CALL_OW 305
72301: ST_TO_ADDR
// exit ;
72302: POP
72303: POP
72304: GO 72310
// end ; end ;
72306: GO 72173
72308: POP
72309: POP
// end ;
72310: LD_VAR 0 4
72314: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72315: LD_INT 0
72317: PPUSH
72318: PPUSH
72319: PPUSH
// if not side or side > 8 then
72320: LD_VAR 0 1
72324: NOT
72325: PUSH
72326: LD_VAR 0 1
72330: PUSH
72331: LD_INT 8
72333: GREATER
72334: OR
72335: IFFALSE 72339
// exit ;
72337: GO 72526
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72339: LD_ADDR_VAR 0 4
72343: PUSH
72344: LD_INT 22
72346: PUSH
72347: LD_VAR 0 1
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 21
72358: PUSH
72359: LD_INT 3
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PPUSH
72370: CALL_OW 69
72374: ST_TO_ADDR
// if not tmp then
72375: LD_VAR 0 4
72379: NOT
72380: IFFALSE 72384
// exit ;
72382: GO 72526
// enable_addtolog := true ;
72384: LD_ADDR_OWVAR 81
72388: PUSH
72389: LD_INT 1
72391: ST_TO_ADDR
// AddToLog ( [ ) ;
72392: LD_STRING [
72394: PPUSH
72395: CALL_OW 561
// for i in tmp do
72399: LD_ADDR_VAR 0 3
72403: PUSH
72404: LD_VAR 0 4
72408: PUSH
72409: FOR_IN
72410: IFFALSE 72517
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72412: LD_STRING [
72414: PUSH
72415: LD_VAR 0 3
72419: PPUSH
72420: CALL_OW 266
72424: STR
72425: PUSH
72426: LD_STRING , 
72428: STR
72429: PUSH
72430: LD_VAR 0 3
72434: PPUSH
72435: CALL_OW 250
72439: STR
72440: PUSH
72441: LD_STRING , 
72443: STR
72444: PUSH
72445: LD_VAR 0 3
72449: PPUSH
72450: CALL_OW 251
72454: STR
72455: PUSH
72456: LD_STRING , 
72458: STR
72459: PUSH
72460: LD_VAR 0 3
72464: PPUSH
72465: CALL_OW 254
72469: STR
72470: PUSH
72471: LD_STRING , 
72473: STR
72474: PUSH
72475: LD_VAR 0 3
72479: PPUSH
72480: LD_INT 1
72482: PPUSH
72483: CALL_OW 268
72487: STR
72488: PUSH
72489: LD_STRING , 
72491: STR
72492: PUSH
72493: LD_VAR 0 3
72497: PPUSH
72498: LD_INT 2
72500: PPUSH
72501: CALL_OW 268
72505: STR
72506: PUSH
72507: LD_STRING ],
72509: STR
72510: PPUSH
72511: CALL_OW 561
// end ;
72515: GO 72409
72517: POP
72518: POP
// AddToLog ( ]; ) ;
72519: LD_STRING ];
72521: PPUSH
72522: CALL_OW 561
// end ;
72526: LD_VAR 0 2
72530: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72531: LD_INT 0
72533: PPUSH
72534: PPUSH
72535: PPUSH
72536: PPUSH
72537: PPUSH
// if not area or not rate or not max then
72538: LD_VAR 0 1
72542: NOT
72543: PUSH
72544: LD_VAR 0 2
72548: NOT
72549: OR
72550: PUSH
72551: LD_VAR 0 4
72555: NOT
72556: OR
72557: IFFALSE 72561
// exit ;
72559: GO 72750
// while 1 do
72561: LD_INT 1
72563: IFFALSE 72750
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72565: LD_ADDR_VAR 0 9
72569: PUSH
72570: LD_VAR 0 1
72574: PPUSH
72575: LD_INT 1
72577: PPUSH
72578: CALL_OW 287
72582: PUSH
72583: LD_INT 10
72585: MUL
72586: ST_TO_ADDR
// r := rate / 10 ;
72587: LD_ADDR_VAR 0 7
72591: PUSH
72592: LD_VAR 0 2
72596: PUSH
72597: LD_INT 10
72599: DIVREAL
72600: ST_TO_ADDR
// time := 1 1$00 ;
72601: LD_ADDR_VAR 0 8
72605: PUSH
72606: LD_INT 2100
72608: ST_TO_ADDR
// if amount < min then
72609: LD_VAR 0 9
72613: PUSH
72614: LD_VAR 0 3
72618: LESS
72619: IFFALSE 72637
// r := r * 2 else
72621: LD_ADDR_VAR 0 7
72625: PUSH
72626: LD_VAR 0 7
72630: PUSH
72631: LD_INT 2
72633: MUL
72634: ST_TO_ADDR
72635: GO 72663
// if amount > max then
72637: LD_VAR 0 9
72641: PUSH
72642: LD_VAR 0 4
72646: GREATER
72647: IFFALSE 72663
// r := r / 2 ;
72649: LD_ADDR_VAR 0 7
72653: PUSH
72654: LD_VAR 0 7
72658: PUSH
72659: LD_INT 2
72661: DIVREAL
72662: ST_TO_ADDR
// time := time / r ;
72663: LD_ADDR_VAR 0 8
72667: PUSH
72668: LD_VAR 0 8
72672: PUSH
72673: LD_VAR 0 7
72677: DIVREAL
72678: ST_TO_ADDR
// if time < 0 then
72679: LD_VAR 0 8
72683: PUSH
72684: LD_INT 0
72686: LESS
72687: IFFALSE 72704
// time := time * - 1 ;
72689: LD_ADDR_VAR 0 8
72693: PUSH
72694: LD_VAR 0 8
72698: PUSH
72699: LD_INT 1
72701: NEG
72702: MUL
72703: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72704: LD_VAR 0 8
72708: PUSH
72709: LD_INT 35
72711: PPUSH
72712: LD_INT 875
72714: PPUSH
72715: CALL_OW 12
72719: PLUS
72720: PPUSH
72721: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72725: LD_INT 1
72727: PPUSH
72728: LD_INT 5
72730: PPUSH
72731: CALL_OW 12
72735: PPUSH
72736: LD_VAR 0 1
72740: PPUSH
72741: LD_INT 1
72743: PPUSH
72744: CALL_OW 55
// end ;
72748: GO 72561
// end ;
72750: LD_VAR 0 5
72754: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72755: LD_INT 0
72757: PPUSH
72758: PPUSH
72759: PPUSH
72760: PPUSH
72761: PPUSH
72762: PPUSH
72763: PPUSH
72764: PPUSH
// if not turrets or not factories then
72765: LD_VAR 0 1
72769: NOT
72770: PUSH
72771: LD_VAR 0 2
72775: NOT
72776: OR
72777: IFFALSE 72781
// exit ;
72779: GO 73088
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72781: LD_ADDR_VAR 0 10
72785: PUSH
72786: LD_INT 5
72788: PUSH
72789: LD_INT 6
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 2
72798: PUSH
72799: LD_INT 4
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 3
72808: PUSH
72809: LD_INT 5
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: LIST
72820: PUSH
72821: LD_INT 24
72823: PUSH
72824: LD_INT 25
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 23
72833: PUSH
72834: LD_INT 27
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 42
72847: PUSH
72848: LD_INT 43
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 44
72857: PUSH
72858: LD_INT 46
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 45
72867: PUSH
72868: LD_INT 47
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: LIST
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: LIST
72884: ST_TO_ADDR
// result := [ ] ;
72885: LD_ADDR_VAR 0 3
72889: PUSH
72890: EMPTY
72891: ST_TO_ADDR
// for i in turrets do
72892: LD_ADDR_VAR 0 4
72896: PUSH
72897: LD_VAR 0 1
72901: PUSH
72902: FOR_IN
72903: IFFALSE 73086
// begin nat := GetNation ( i ) ;
72905: LD_ADDR_VAR 0 7
72909: PUSH
72910: LD_VAR 0 4
72914: PPUSH
72915: CALL_OW 248
72919: ST_TO_ADDR
// weapon := 0 ;
72920: LD_ADDR_VAR 0 8
72924: PUSH
72925: LD_INT 0
72927: ST_TO_ADDR
// if not nat then
72928: LD_VAR 0 7
72932: NOT
72933: IFFALSE 72937
// continue ;
72935: GO 72902
// for j in list [ nat ] do
72937: LD_ADDR_VAR 0 5
72941: PUSH
72942: LD_VAR 0 10
72946: PUSH
72947: LD_VAR 0 7
72951: ARRAY
72952: PUSH
72953: FOR_IN
72954: IFFALSE 72995
// if GetBWeapon ( i ) = j [ 1 ] then
72956: LD_VAR 0 4
72960: PPUSH
72961: CALL_OW 269
72965: PUSH
72966: LD_VAR 0 5
72970: PUSH
72971: LD_INT 1
72973: ARRAY
72974: EQUAL
72975: IFFALSE 72993
// begin weapon := j [ 2 ] ;
72977: LD_ADDR_VAR 0 8
72981: PUSH
72982: LD_VAR 0 5
72986: PUSH
72987: LD_INT 2
72989: ARRAY
72990: ST_TO_ADDR
// break ;
72991: GO 72995
// end ;
72993: GO 72953
72995: POP
72996: POP
// if not weapon then
72997: LD_VAR 0 8
73001: NOT
73002: IFFALSE 73006
// continue ;
73004: GO 72902
// for k in factories do
73006: LD_ADDR_VAR 0 6
73010: PUSH
73011: LD_VAR 0 2
73015: PUSH
73016: FOR_IN
73017: IFFALSE 73082
// begin weapons := AvailableWeaponList ( k ) ;
73019: LD_ADDR_VAR 0 9
73023: PUSH
73024: LD_VAR 0 6
73028: PPUSH
73029: CALL_OW 478
73033: ST_TO_ADDR
// if not weapons then
73034: LD_VAR 0 9
73038: NOT
73039: IFFALSE 73043
// continue ;
73041: GO 73016
// if weapon in weapons then
73043: LD_VAR 0 8
73047: PUSH
73048: LD_VAR 0 9
73052: IN
73053: IFFALSE 73080
// begin result := [ i , weapon ] ;
73055: LD_ADDR_VAR 0 3
73059: PUSH
73060: LD_VAR 0 4
73064: PUSH
73065: LD_VAR 0 8
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: ST_TO_ADDR
// exit ;
73074: POP
73075: POP
73076: POP
73077: POP
73078: GO 73088
// end ; end ;
73080: GO 73016
73082: POP
73083: POP
// end ;
73084: GO 72902
73086: POP
73087: POP
// end ;
73088: LD_VAR 0 3
73092: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73093: LD_INT 0
73095: PPUSH
// if not side or side > 8 then
73096: LD_VAR 0 3
73100: NOT
73101: PUSH
73102: LD_VAR 0 3
73106: PUSH
73107: LD_INT 8
73109: GREATER
73110: OR
73111: IFFALSE 73115
// exit ;
73113: GO 73174
// if not range then
73115: LD_VAR 0 4
73119: NOT
73120: IFFALSE 73131
// range := - 12 ;
73122: LD_ADDR_VAR 0 4
73126: PUSH
73127: LD_INT 12
73129: NEG
73130: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73131: LD_VAR 0 1
73135: PPUSH
73136: LD_VAR 0 2
73140: PPUSH
73141: LD_VAR 0 3
73145: PPUSH
73146: LD_VAR 0 4
73150: PPUSH
73151: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73155: LD_VAR 0 1
73159: PPUSH
73160: LD_VAR 0 2
73164: PPUSH
73165: LD_VAR 0 3
73169: PPUSH
73170: CALL_OW 331
// end ;
73174: LD_VAR 0 5
73178: RET
// export function Video ( mode ) ; begin
73179: LD_INT 0
73181: PPUSH
// ingame_video = mode ;
73182: LD_ADDR_OWVAR 52
73186: PUSH
73187: LD_VAR 0 1
73191: ST_TO_ADDR
// interface_hidden = mode ;
73192: LD_ADDR_OWVAR 54
73196: PUSH
73197: LD_VAR 0 1
73201: ST_TO_ADDR
// end ;
73202: LD_VAR 0 2
73206: RET
// export function Join ( array , element ) ; begin
73207: LD_INT 0
73209: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73210: LD_ADDR_VAR 0 3
73214: PUSH
73215: LD_VAR 0 1
73219: PPUSH
73220: LD_VAR 0 1
73224: PUSH
73225: LD_INT 1
73227: PLUS
73228: PPUSH
73229: LD_VAR 0 2
73233: PPUSH
73234: CALL_OW 1
73238: ST_TO_ADDR
// end ;
73239: LD_VAR 0 3
73243: RET
// export function JoinUnion ( array , element ) ; begin
73244: LD_INT 0
73246: PPUSH
// result := array union element ;
73247: LD_ADDR_VAR 0 3
73251: PUSH
73252: LD_VAR 0 1
73256: PUSH
73257: LD_VAR 0 2
73261: UNION
73262: ST_TO_ADDR
// end ;
73263: LD_VAR 0 3
73267: RET
// export function GetBehemoths ( side ) ; begin
73268: LD_INT 0
73270: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73271: LD_ADDR_VAR 0 2
73275: PUSH
73276: LD_INT 22
73278: PUSH
73279: LD_VAR 0 1
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 31
73290: PUSH
73291: LD_INT 25
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PPUSH
73302: CALL_OW 69
73306: ST_TO_ADDR
// end ;
73307: LD_VAR 0 2
73311: RET
// export function Shuffle ( array ) ; var i , index ; begin
73312: LD_INT 0
73314: PPUSH
73315: PPUSH
73316: PPUSH
// result := [ ] ;
73317: LD_ADDR_VAR 0 2
73321: PUSH
73322: EMPTY
73323: ST_TO_ADDR
// if not array then
73324: LD_VAR 0 1
73328: NOT
73329: IFFALSE 73333
// exit ;
73331: GO 73432
// Randomize ;
73333: CALL_OW 10
// for i = array downto 1 do
73337: LD_ADDR_VAR 0 3
73341: PUSH
73342: DOUBLE
73343: LD_VAR 0 1
73347: INC
73348: ST_TO_ADDR
73349: LD_INT 1
73351: PUSH
73352: FOR_DOWNTO
73353: IFFALSE 73430
// begin index := rand ( 1 , array ) ;
73355: LD_ADDR_VAR 0 4
73359: PUSH
73360: LD_INT 1
73362: PPUSH
73363: LD_VAR 0 1
73367: PPUSH
73368: CALL_OW 12
73372: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73373: LD_ADDR_VAR 0 2
73377: PUSH
73378: LD_VAR 0 2
73382: PPUSH
73383: LD_VAR 0 2
73387: PUSH
73388: LD_INT 1
73390: PLUS
73391: PPUSH
73392: LD_VAR 0 1
73396: PUSH
73397: LD_VAR 0 4
73401: ARRAY
73402: PPUSH
73403: CALL_OW 2
73407: ST_TO_ADDR
// array := Delete ( array , index ) ;
73408: LD_ADDR_VAR 0 1
73412: PUSH
73413: LD_VAR 0 1
73417: PPUSH
73418: LD_VAR 0 4
73422: PPUSH
73423: CALL_OW 3
73427: ST_TO_ADDR
// end ;
73428: GO 73352
73430: POP
73431: POP
// end ;
73432: LD_VAR 0 2
73436: RET
// export function GetBaseMaterials ( base ) ; begin
73437: LD_INT 0
73439: PPUSH
// result := [ 0 , 0 , 0 ] ;
73440: LD_ADDR_VAR 0 2
73444: PUSH
73445: LD_INT 0
73447: PUSH
73448: LD_INT 0
73450: PUSH
73451: LD_INT 0
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: LIST
73458: ST_TO_ADDR
// if not base then
73459: LD_VAR 0 1
73463: NOT
73464: IFFALSE 73468
// exit ;
73466: GO 73517
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73468: LD_ADDR_VAR 0 2
73472: PUSH
73473: LD_VAR 0 1
73477: PPUSH
73478: LD_INT 1
73480: PPUSH
73481: CALL_OW 275
73485: PUSH
73486: LD_VAR 0 1
73490: PPUSH
73491: LD_INT 2
73493: PPUSH
73494: CALL_OW 275
73498: PUSH
73499: LD_VAR 0 1
73503: PPUSH
73504: LD_INT 3
73506: PPUSH
73507: CALL_OW 275
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: LIST
73516: ST_TO_ADDR
// end ;
73517: LD_VAR 0 2
73521: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73522: LD_INT 0
73524: PPUSH
73525: PPUSH
// result := array ;
73526: LD_ADDR_VAR 0 3
73530: PUSH
73531: LD_VAR 0 1
73535: ST_TO_ADDR
// if size >= result then
73536: LD_VAR 0 2
73540: PUSH
73541: LD_VAR 0 3
73545: GREATEREQUAL
73546: IFFALSE 73550
// exit ;
73548: GO 73600
// if size then
73550: LD_VAR 0 2
73554: IFFALSE 73600
// for i := array downto size do
73556: LD_ADDR_VAR 0 4
73560: PUSH
73561: DOUBLE
73562: LD_VAR 0 1
73566: INC
73567: ST_TO_ADDR
73568: LD_VAR 0 2
73572: PUSH
73573: FOR_DOWNTO
73574: IFFALSE 73598
// result := Delete ( result , result ) ;
73576: LD_ADDR_VAR 0 3
73580: PUSH
73581: LD_VAR 0 3
73585: PPUSH
73586: LD_VAR 0 3
73590: PPUSH
73591: CALL_OW 3
73595: ST_TO_ADDR
73596: GO 73573
73598: POP
73599: POP
// end ;
73600: LD_VAR 0 3
73604: RET
// export function ComExit ( unit ) ; var tmp ; begin
73605: LD_INT 0
73607: PPUSH
73608: PPUSH
// if not IsInUnit ( unit ) then
73609: LD_VAR 0 1
73613: PPUSH
73614: CALL_OW 310
73618: NOT
73619: IFFALSE 73623
// exit ;
73621: GO 73683
// tmp := IsInUnit ( unit ) ;
73623: LD_ADDR_VAR 0 3
73627: PUSH
73628: LD_VAR 0 1
73632: PPUSH
73633: CALL_OW 310
73637: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73638: LD_VAR 0 3
73642: PPUSH
73643: CALL_OW 247
73647: PUSH
73648: LD_INT 2
73650: EQUAL
73651: IFFALSE 73664
// ComExitVehicle ( unit ) else
73653: LD_VAR 0 1
73657: PPUSH
73658: CALL_OW 121
73662: GO 73673
// ComExitBuilding ( unit ) ;
73664: LD_VAR 0 1
73668: PPUSH
73669: CALL_OW 122
// result := tmp ;
73673: LD_ADDR_VAR 0 2
73677: PUSH
73678: LD_VAR 0 3
73682: ST_TO_ADDR
// end ;
73683: LD_VAR 0 2
73687: RET
// export function ComExitAll ( units ) ; var i ; begin
73688: LD_INT 0
73690: PPUSH
73691: PPUSH
// if not units then
73692: LD_VAR 0 1
73696: NOT
73697: IFFALSE 73701
// exit ;
73699: GO 73727
// for i in units do
73701: LD_ADDR_VAR 0 3
73705: PUSH
73706: LD_VAR 0 1
73710: PUSH
73711: FOR_IN
73712: IFFALSE 73725
// ComExit ( i ) ;
73714: LD_VAR 0 3
73718: PPUSH
73719: CALL 73605 0 1
73723: GO 73711
73725: POP
73726: POP
// end ;
73727: LD_VAR 0 2
73731: RET
// export function ResetHc ; begin
73732: LD_INT 0
73734: PPUSH
// InitHc ;
73735: CALL_OW 19
// hc_importance := 0 ;
73739: LD_ADDR_OWVAR 32
73743: PUSH
73744: LD_INT 0
73746: ST_TO_ADDR
// end ;
73747: LD_VAR 0 1
73751: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73752: LD_INT 0
73754: PPUSH
73755: PPUSH
73756: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73757: LD_ADDR_VAR 0 6
73761: PUSH
73762: LD_VAR 0 1
73766: PUSH
73767: LD_VAR 0 3
73771: PLUS
73772: PUSH
73773: LD_INT 2
73775: DIV
73776: ST_TO_ADDR
// if _x < 0 then
73777: LD_VAR 0 6
73781: PUSH
73782: LD_INT 0
73784: LESS
73785: IFFALSE 73802
// _x := _x * - 1 ;
73787: LD_ADDR_VAR 0 6
73791: PUSH
73792: LD_VAR 0 6
73796: PUSH
73797: LD_INT 1
73799: NEG
73800: MUL
73801: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73802: LD_ADDR_VAR 0 7
73806: PUSH
73807: LD_VAR 0 2
73811: PUSH
73812: LD_VAR 0 4
73816: PLUS
73817: PUSH
73818: LD_INT 2
73820: DIV
73821: ST_TO_ADDR
// if _y < 0 then
73822: LD_VAR 0 7
73826: PUSH
73827: LD_INT 0
73829: LESS
73830: IFFALSE 73847
// _y := _y * - 1 ;
73832: LD_ADDR_VAR 0 7
73836: PUSH
73837: LD_VAR 0 7
73841: PUSH
73842: LD_INT 1
73844: NEG
73845: MUL
73846: ST_TO_ADDR
// result := [ _x , _y ] ;
73847: LD_ADDR_VAR 0 5
73851: PUSH
73852: LD_VAR 0 6
73856: PUSH
73857: LD_VAR 0 7
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: ST_TO_ADDR
// end ;
73866: LD_VAR 0 5
73870: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73871: LD_INT 0
73873: PPUSH
73874: PPUSH
73875: PPUSH
73876: PPUSH
// task := GetTaskList ( unit ) ;
73877: LD_ADDR_VAR 0 7
73881: PUSH
73882: LD_VAR 0 1
73886: PPUSH
73887: CALL_OW 437
73891: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73892: LD_VAR 0 7
73896: NOT
73897: PUSH
73898: LD_VAR 0 1
73902: PPUSH
73903: LD_VAR 0 2
73907: PPUSH
73908: CALL_OW 308
73912: NOT
73913: AND
73914: IFFALSE 73918
// exit ;
73916: GO 74036
// if IsInArea ( unit , area ) then
73918: LD_VAR 0 1
73922: PPUSH
73923: LD_VAR 0 2
73927: PPUSH
73928: CALL_OW 308
73932: IFFALSE 73950
// begin ComMoveToArea ( unit , goAway ) ;
73934: LD_VAR 0 1
73938: PPUSH
73939: LD_VAR 0 3
73943: PPUSH
73944: CALL_OW 113
// exit ;
73948: GO 74036
// end ; if task [ 1 ] [ 1 ] <> M then
73950: LD_VAR 0 7
73954: PUSH
73955: LD_INT 1
73957: ARRAY
73958: PUSH
73959: LD_INT 1
73961: ARRAY
73962: PUSH
73963: LD_STRING M
73965: NONEQUAL
73966: IFFALSE 73970
// exit ;
73968: GO 74036
// x := task [ 1 ] [ 2 ] ;
73970: LD_ADDR_VAR 0 5
73974: PUSH
73975: LD_VAR 0 7
73979: PUSH
73980: LD_INT 1
73982: ARRAY
73983: PUSH
73984: LD_INT 2
73986: ARRAY
73987: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73988: LD_ADDR_VAR 0 6
73992: PUSH
73993: LD_VAR 0 7
73997: PUSH
73998: LD_INT 1
74000: ARRAY
74001: PUSH
74002: LD_INT 3
74004: ARRAY
74005: ST_TO_ADDR
// if InArea ( x , y , area ) then
74006: LD_VAR 0 5
74010: PPUSH
74011: LD_VAR 0 6
74015: PPUSH
74016: LD_VAR 0 2
74020: PPUSH
74021: CALL_OW 309
74025: IFFALSE 74036
// ComStop ( unit ) ;
74027: LD_VAR 0 1
74031: PPUSH
74032: CALL_OW 141
// end ;
74036: LD_VAR 0 4
74040: RET
// export function Abs ( value ) ; begin
74041: LD_INT 0
74043: PPUSH
// result := value ;
74044: LD_ADDR_VAR 0 2
74048: PUSH
74049: LD_VAR 0 1
74053: ST_TO_ADDR
// if value < 0 then
74054: LD_VAR 0 1
74058: PUSH
74059: LD_INT 0
74061: LESS
74062: IFFALSE 74079
// result := value * - 1 ;
74064: LD_ADDR_VAR 0 2
74068: PUSH
74069: LD_VAR 0 1
74073: PUSH
74074: LD_INT 1
74076: NEG
74077: MUL
74078: ST_TO_ADDR
// end ;
74079: LD_VAR 0 2
74083: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74084: LD_INT 0
74086: PPUSH
74087: PPUSH
74088: PPUSH
74089: PPUSH
74090: PPUSH
74091: PPUSH
74092: PPUSH
74093: PPUSH
// if not unit or not building then
74094: LD_VAR 0 1
74098: NOT
74099: PUSH
74100: LD_VAR 0 2
74104: NOT
74105: OR
74106: IFFALSE 74110
// exit ;
74108: GO 74336
// x := GetX ( building ) ;
74110: LD_ADDR_VAR 0 4
74114: PUSH
74115: LD_VAR 0 2
74119: PPUSH
74120: CALL_OW 250
74124: ST_TO_ADDR
// y := GetY ( building ) ;
74125: LD_ADDR_VAR 0 6
74129: PUSH
74130: LD_VAR 0 2
74134: PPUSH
74135: CALL_OW 251
74139: ST_TO_ADDR
// d := GetDir ( building ) ;
74140: LD_ADDR_VAR 0 8
74144: PUSH
74145: LD_VAR 0 2
74149: PPUSH
74150: CALL_OW 254
74154: ST_TO_ADDR
// r := 4 ;
74155: LD_ADDR_VAR 0 9
74159: PUSH
74160: LD_INT 4
74162: ST_TO_ADDR
// for i := 1 to 5 do
74163: LD_ADDR_VAR 0 10
74167: PUSH
74168: DOUBLE
74169: LD_INT 1
74171: DEC
74172: ST_TO_ADDR
74173: LD_INT 5
74175: PUSH
74176: FOR_TO
74177: IFFALSE 74334
// begin _x := ShiftX ( x , d , r + i ) ;
74179: LD_ADDR_VAR 0 5
74183: PUSH
74184: LD_VAR 0 4
74188: PPUSH
74189: LD_VAR 0 8
74193: PPUSH
74194: LD_VAR 0 9
74198: PUSH
74199: LD_VAR 0 10
74203: PLUS
74204: PPUSH
74205: CALL_OW 272
74209: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74210: LD_ADDR_VAR 0 7
74214: PUSH
74215: LD_VAR 0 6
74219: PPUSH
74220: LD_VAR 0 8
74224: PPUSH
74225: LD_VAR 0 9
74229: PUSH
74230: LD_VAR 0 10
74234: PLUS
74235: PPUSH
74236: CALL_OW 273
74240: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74241: LD_VAR 0 5
74245: PPUSH
74246: LD_VAR 0 7
74250: PPUSH
74251: CALL_OW 488
74255: PUSH
74256: LD_VAR 0 5
74260: PPUSH
74261: LD_VAR 0 7
74265: PPUSH
74266: CALL_OW 428
74270: PPUSH
74271: CALL_OW 247
74275: PUSH
74276: LD_INT 3
74278: PUSH
74279: LD_INT 2
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: IN
74286: NOT
74287: AND
74288: IFFALSE 74332
// begin ComMoveXY ( unit , _x , _y ) ;
74290: LD_VAR 0 1
74294: PPUSH
74295: LD_VAR 0 5
74299: PPUSH
74300: LD_VAR 0 7
74304: PPUSH
74305: CALL_OW 111
// result := [ _x , _y ] ;
74309: LD_ADDR_VAR 0 3
74313: PUSH
74314: LD_VAR 0 5
74318: PUSH
74319: LD_VAR 0 7
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: ST_TO_ADDR
// exit ;
74328: POP
74329: POP
74330: GO 74336
// end ; end ;
74332: GO 74176
74334: POP
74335: POP
// end ;
74336: LD_VAR 0 3
74340: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74341: LD_INT 0
74343: PPUSH
74344: PPUSH
74345: PPUSH
// result := 0 ;
74346: LD_ADDR_VAR 0 3
74350: PUSH
74351: LD_INT 0
74353: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74354: LD_VAR 0 1
74358: PUSH
74359: LD_INT 0
74361: LESS
74362: PUSH
74363: LD_VAR 0 1
74367: PUSH
74368: LD_INT 8
74370: GREATER
74371: OR
74372: PUSH
74373: LD_VAR 0 2
74377: PUSH
74378: LD_INT 0
74380: LESS
74381: OR
74382: PUSH
74383: LD_VAR 0 2
74387: PUSH
74388: LD_INT 8
74390: GREATER
74391: OR
74392: IFFALSE 74396
// exit ;
74394: GO 74471
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74396: LD_ADDR_VAR 0 4
74400: PUSH
74401: LD_INT 22
74403: PUSH
74404: LD_VAR 0 2
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PPUSH
74413: CALL_OW 69
74417: PUSH
74418: FOR_IN
74419: IFFALSE 74469
// begin un := UnitShoot ( i ) ;
74421: LD_ADDR_VAR 0 5
74425: PUSH
74426: LD_VAR 0 4
74430: PPUSH
74431: CALL_OW 504
74435: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74436: LD_VAR 0 5
74440: PPUSH
74441: CALL_OW 255
74445: PUSH
74446: LD_VAR 0 1
74450: EQUAL
74451: IFFALSE 74467
// begin result := un ;
74453: LD_ADDR_VAR 0 3
74457: PUSH
74458: LD_VAR 0 5
74462: ST_TO_ADDR
// exit ;
74463: POP
74464: POP
74465: GO 74471
// end ; end ;
74467: GO 74418
74469: POP
74470: POP
// end ;
74471: LD_VAR 0 3
74475: RET
// export function GetCargoBay ( units ) ; begin
74476: LD_INT 0
74478: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74479: LD_ADDR_VAR 0 2
74483: PUSH
74484: LD_VAR 0 1
74488: PPUSH
74489: LD_INT 2
74491: PUSH
74492: LD_INT 34
74494: PUSH
74495: LD_INT 12
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PUSH
74502: LD_INT 34
74504: PUSH
74505: LD_INT 51
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 34
74514: PUSH
74515: LD_INT 32
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PUSH
74522: LD_INT 34
74524: PUSH
74525: LD_INT 89
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: PPUSH
74539: CALL_OW 72
74543: ST_TO_ADDR
// end ;
74544: LD_VAR 0 2
74548: RET
// export function Negate ( value ) ; begin
74549: LD_INT 0
74551: PPUSH
// result := not value ;
74552: LD_ADDR_VAR 0 2
74556: PUSH
74557: LD_VAR 0 1
74561: NOT
74562: ST_TO_ADDR
// end ;
74563: LD_VAR 0 2
74567: RET
// export function Inc ( value ) ; begin
74568: LD_INT 0
74570: PPUSH
// result := value + 1 ;
74571: LD_ADDR_VAR 0 2
74575: PUSH
74576: LD_VAR 0 1
74580: PUSH
74581: LD_INT 1
74583: PLUS
74584: ST_TO_ADDR
// end ;
74585: LD_VAR 0 2
74589: RET
// export function Dec ( value ) ; begin
74590: LD_INT 0
74592: PPUSH
// result := value - 1 ;
74593: LD_ADDR_VAR 0 2
74597: PUSH
74598: LD_VAR 0 1
74602: PUSH
74603: LD_INT 1
74605: MINUS
74606: ST_TO_ADDR
// end ;
74607: LD_VAR 0 2
74611: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74612: LD_INT 0
74614: PPUSH
74615: PPUSH
74616: PPUSH
74617: PPUSH
74618: PPUSH
74619: PPUSH
74620: PPUSH
74621: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74622: LD_VAR 0 1
74626: PPUSH
74627: LD_VAR 0 2
74631: PPUSH
74632: CALL_OW 488
74636: NOT
74637: PUSH
74638: LD_VAR 0 3
74642: PPUSH
74643: LD_VAR 0 4
74647: PPUSH
74648: CALL_OW 488
74652: NOT
74653: OR
74654: IFFALSE 74667
// begin result := - 1 ;
74656: LD_ADDR_VAR 0 5
74660: PUSH
74661: LD_INT 1
74663: NEG
74664: ST_TO_ADDR
// exit ;
74665: GO 74902
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74667: LD_ADDR_VAR 0 12
74671: PUSH
74672: LD_VAR 0 1
74676: PPUSH
74677: LD_VAR 0 2
74681: PPUSH
74682: LD_VAR 0 3
74686: PPUSH
74687: LD_VAR 0 4
74691: PPUSH
74692: CALL 73752 0 4
74696: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74697: LD_ADDR_VAR 0 11
74701: PUSH
74702: LD_VAR 0 1
74706: PPUSH
74707: LD_VAR 0 2
74711: PPUSH
74712: LD_VAR 0 12
74716: PUSH
74717: LD_INT 1
74719: ARRAY
74720: PPUSH
74721: LD_VAR 0 12
74725: PUSH
74726: LD_INT 2
74728: ARRAY
74729: PPUSH
74730: CALL_OW 298
74734: ST_TO_ADDR
// distance := 9999 ;
74735: LD_ADDR_VAR 0 10
74739: PUSH
74740: LD_INT 9999
74742: ST_TO_ADDR
// for i := 0 to 5 do
74743: LD_ADDR_VAR 0 6
74747: PUSH
74748: DOUBLE
74749: LD_INT 0
74751: DEC
74752: ST_TO_ADDR
74753: LD_INT 5
74755: PUSH
74756: FOR_TO
74757: IFFALSE 74900
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74759: LD_ADDR_VAR 0 7
74763: PUSH
74764: LD_VAR 0 1
74768: PPUSH
74769: LD_VAR 0 6
74773: PPUSH
74774: LD_VAR 0 11
74778: PPUSH
74779: CALL_OW 272
74783: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74784: LD_ADDR_VAR 0 8
74788: PUSH
74789: LD_VAR 0 2
74793: PPUSH
74794: LD_VAR 0 6
74798: PPUSH
74799: LD_VAR 0 11
74803: PPUSH
74804: CALL_OW 273
74808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74809: LD_VAR 0 7
74813: PPUSH
74814: LD_VAR 0 8
74818: PPUSH
74819: CALL_OW 488
74823: NOT
74824: IFFALSE 74828
// continue ;
74826: GO 74756
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74828: LD_ADDR_VAR 0 9
74832: PUSH
74833: LD_VAR 0 12
74837: PUSH
74838: LD_INT 1
74840: ARRAY
74841: PPUSH
74842: LD_VAR 0 12
74846: PUSH
74847: LD_INT 2
74849: ARRAY
74850: PPUSH
74851: LD_VAR 0 7
74855: PPUSH
74856: LD_VAR 0 8
74860: PPUSH
74861: CALL_OW 298
74865: ST_TO_ADDR
// if tmp < distance then
74866: LD_VAR 0 9
74870: PUSH
74871: LD_VAR 0 10
74875: LESS
74876: IFFALSE 74898
// begin result := i ;
74878: LD_ADDR_VAR 0 5
74882: PUSH
74883: LD_VAR 0 6
74887: ST_TO_ADDR
// distance := tmp ;
74888: LD_ADDR_VAR 0 10
74892: PUSH
74893: LD_VAR 0 9
74897: ST_TO_ADDR
// end ; end ;
74898: GO 74756
74900: POP
74901: POP
// end ;
74902: LD_VAR 0 5
74906: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74907: LD_INT 0
74909: PPUSH
74910: PPUSH
// if not driver or not IsInUnit ( driver ) then
74911: LD_VAR 0 1
74915: NOT
74916: PUSH
74917: LD_VAR 0 1
74921: PPUSH
74922: CALL_OW 310
74926: NOT
74927: OR
74928: IFFALSE 74932
// exit ;
74930: GO 75022
// vehicle := IsInUnit ( driver ) ;
74932: LD_ADDR_VAR 0 3
74936: PUSH
74937: LD_VAR 0 1
74941: PPUSH
74942: CALL_OW 310
74946: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74947: LD_VAR 0 1
74951: PPUSH
74952: LD_STRING \
74954: PUSH
74955: LD_INT 0
74957: PUSH
74958: LD_INT 0
74960: PUSH
74961: LD_INT 0
74963: PUSH
74964: LD_INT 0
74966: PUSH
74967: LD_INT 0
74969: PUSH
74970: LD_INT 0
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: PUSH
74982: LD_STRING E
74984: PUSH
74985: LD_INT 0
74987: PUSH
74988: LD_INT 0
74990: PUSH
74991: LD_VAR 0 3
74995: PUSH
74996: LD_INT 0
74998: PUSH
74999: LD_INT 0
75001: PUSH
75002: LD_INT 0
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PPUSH
75018: CALL_OW 446
// end ;
75022: LD_VAR 0 2
75026: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75027: LD_INT 0
75029: PPUSH
75030: PPUSH
// if not driver or not IsInUnit ( driver ) then
75031: LD_VAR 0 1
75035: NOT
75036: PUSH
75037: LD_VAR 0 1
75041: PPUSH
75042: CALL_OW 310
75046: NOT
75047: OR
75048: IFFALSE 75052
// exit ;
75050: GO 75142
// vehicle := IsInUnit ( driver ) ;
75052: LD_ADDR_VAR 0 3
75056: PUSH
75057: LD_VAR 0 1
75061: PPUSH
75062: CALL_OW 310
75066: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75067: LD_VAR 0 1
75071: PPUSH
75072: LD_STRING \
75074: PUSH
75075: LD_INT 0
75077: PUSH
75078: LD_INT 0
75080: PUSH
75081: LD_INT 0
75083: PUSH
75084: LD_INT 0
75086: PUSH
75087: LD_INT 0
75089: PUSH
75090: LD_INT 0
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: PUSH
75102: LD_STRING E
75104: PUSH
75105: LD_INT 0
75107: PUSH
75108: LD_INT 0
75110: PUSH
75111: LD_VAR 0 3
75115: PUSH
75116: LD_INT 0
75118: PUSH
75119: LD_INT 0
75121: PUSH
75122: LD_INT 0
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: PPUSH
75138: CALL_OW 447
// end ;
75142: LD_VAR 0 2
75146: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75147: LD_INT 0
75149: PPUSH
75150: PPUSH
75151: PPUSH
// tmp := [ ] ;
75152: LD_ADDR_VAR 0 5
75156: PUSH
75157: EMPTY
75158: ST_TO_ADDR
// for i in units do
75159: LD_ADDR_VAR 0 4
75163: PUSH
75164: LD_VAR 0 1
75168: PUSH
75169: FOR_IN
75170: IFFALSE 75208
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75172: LD_ADDR_VAR 0 5
75176: PUSH
75177: LD_VAR 0 5
75181: PPUSH
75182: LD_VAR 0 5
75186: PUSH
75187: LD_INT 1
75189: PLUS
75190: PPUSH
75191: LD_VAR 0 4
75195: PPUSH
75196: CALL_OW 256
75200: PPUSH
75201: CALL_OW 2
75205: ST_TO_ADDR
75206: GO 75169
75208: POP
75209: POP
// if not tmp then
75210: LD_VAR 0 5
75214: NOT
75215: IFFALSE 75219
// exit ;
75217: GO 75267
// if asc then
75219: LD_VAR 0 2
75223: IFFALSE 75247
// result := SortListByListAsc ( units , tmp ) else
75225: LD_ADDR_VAR 0 3
75229: PUSH
75230: LD_VAR 0 1
75234: PPUSH
75235: LD_VAR 0 5
75239: PPUSH
75240: CALL_OW 76
75244: ST_TO_ADDR
75245: GO 75267
// result := SortListByListDesc ( units , tmp ) ;
75247: LD_ADDR_VAR 0 3
75251: PUSH
75252: LD_VAR 0 1
75256: PPUSH
75257: LD_VAR 0 5
75261: PPUSH
75262: CALL_OW 77
75266: ST_TO_ADDR
// end ;
75267: LD_VAR 0 3
75271: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75272: LD_INT 0
75274: PPUSH
75275: PPUSH
// task := GetTaskList ( mech ) ;
75276: LD_ADDR_VAR 0 4
75280: PUSH
75281: LD_VAR 0 1
75285: PPUSH
75286: CALL_OW 437
75290: ST_TO_ADDR
// if not task then
75291: LD_VAR 0 4
75295: NOT
75296: IFFALSE 75300
// exit ;
75298: GO 75342
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75300: LD_ADDR_VAR 0 3
75304: PUSH
75305: LD_VAR 0 4
75309: PUSH
75310: LD_INT 1
75312: ARRAY
75313: PUSH
75314: LD_INT 1
75316: ARRAY
75317: PUSH
75318: LD_STRING r
75320: EQUAL
75321: PUSH
75322: LD_VAR 0 4
75326: PUSH
75327: LD_INT 1
75329: ARRAY
75330: PUSH
75331: LD_INT 4
75333: ARRAY
75334: PUSH
75335: LD_VAR 0 2
75339: EQUAL
75340: AND
75341: ST_TO_ADDR
// end ;
75342: LD_VAR 0 3
75346: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75347: LD_INT 0
75349: PPUSH
// SetDir ( unit , d ) ;
75350: LD_VAR 0 1
75354: PPUSH
75355: LD_VAR 0 4
75359: PPUSH
75360: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75364: LD_VAR 0 1
75368: PPUSH
75369: LD_VAR 0 2
75373: PPUSH
75374: LD_VAR 0 3
75378: PPUSH
75379: LD_VAR 0 5
75383: PPUSH
75384: CALL_OW 48
// end ;
75388: LD_VAR 0 6
75392: RET
// export function ToNaturalNumber ( number ) ; begin
75393: LD_INT 0
75395: PPUSH
// result := number div 1 ;
75396: LD_ADDR_VAR 0 2
75400: PUSH
75401: LD_VAR 0 1
75405: PUSH
75406: LD_INT 1
75408: DIV
75409: ST_TO_ADDR
// if number < 0 then
75410: LD_VAR 0 1
75414: PUSH
75415: LD_INT 0
75417: LESS
75418: IFFALSE 75428
// result := 0 ;
75420: LD_ADDR_VAR 0 2
75424: PUSH
75425: LD_INT 0
75427: ST_TO_ADDR
// end ;
75428: LD_VAR 0 2
75432: RET
// export function SortByClass ( units , class ) ; var un ; begin
75433: LD_INT 0
75435: PPUSH
75436: PPUSH
// if not units or not class then
75437: LD_VAR 0 1
75441: NOT
75442: PUSH
75443: LD_VAR 0 2
75447: NOT
75448: OR
75449: IFFALSE 75453
// exit ;
75451: GO 75548
// result := [ ] ;
75453: LD_ADDR_VAR 0 3
75457: PUSH
75458: EMPTY
75459: ST_TO_ADDR
// for un in units do
75460: LD_ADDR_VAR 0 4
75464: PUSH
75465: LD_VAR 0 1
75469: PUSH
75470: FOR_IN
75471: IFFALSE 75546
// if GetClass ( un ) = class then
75473: LD_VAR 0 4
75477: PPUSH
75478: CALL_OW 257
75482: PUSH
75483: LD_VAR 0 2
75487: EQUAL
75488: IFFALSE 75515
// result := Insert ( result , 1 , un ) else
75490: LD_ADDR_VAR 0 3
75494: PUSH
75495: LD_VAR 0 3
75499: PPUSH
75500: LD_INT 1
75502: PPUSH
75503: LD_VAR 0 4
75507: PPUSH
75508: CALL_OW 2
75512: ST_TO_ADDR
75513: GO 75544
// result := Replace ( result , result + 1 , un ) ;
75515: LD_ADDR_VAR 0 3
75519: PUSH
75520: LD_VAR 0 3
75524: PPUSH
75525: LD_VAR 0 3
75529: PUSH
75530: LD_INT 1
75532: PLUS
75533: PPUSH
75534: LD_VAR 0 4
75538: PPUSH
75539: CALL_OW 1
75543: ST_TO_ADDR
75544: GO 75470
75546: POP
75547: POP
// end ;
75548: LD_VAR 0 3
75552: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75553: LD_INT 0
75555: PPUSH
75556: PPUSH
75557: PPUSH
75558: PPUSH
75559: PPUSH
75560: PPUSH
75561: PPUSH
// result := [ ] ;
75562: LD_ADDR_VAR 0 4
75566: PUSH
75567: EMPTY
75568: ST_TO_ADDR
// if x - r < 0 then
75569: LD_VAR 0 1
75573: PUSH
75574: LD_VAR 0 3
75578: MINUS
75579: PUSH
75580: LD_INT 0
75582: LESS
75583: IFFALSE 75595
// min_x := 0 else
75585: LD_ADDR_VAR 0 8
75589: PUSH
75590: LD_INT 0
75592: ST_TO_ADDR
75593: GO 75611
// min_x := x - r ;
75595: LD_ADDR_VAR 0 8
75599: PUSH
75600: LD_VAR 0 1
75604: PUSH
75605: LD_VAR 0 3
75609: MINUS
75610: ST_TO_ADDR
// if y - r < 0 then
75611: LD_VAR 0 2
75615: PUSH
75616: LD_VAR 0 3
75620: MINUS
75621: PUSH
75622: LD_INT 0
75624: LESS
75625: IFFALSE 75637
// min_y := 0 else
75627: LD_ADDR_VAR 0 7
75631: PUSH
75632: LD_INT 0
75634: ST_TO_ADDR
75635: GO 75653
// min_y := y - r ;
75637: LD_ADDR_VAR 0 7
75641: PUSH
75642: LD_VAR 0 2
75646: PUSH
75647: LD_VAR 0 3
75651: MINUS
75652: ST_TO_ADDR
// max_x := x + r ;
75653: LD_ADDR_VAR 0 9
75657: PUSH
75658: LD_VAR 0 1
75662: PUSH
75663: LD_VAR 0 3
75667: PLUS
75668: ST_TO_ADDR
// max_y := y + r ;
75669: LD_ADDR_VAR 0 10
75673: PUSH
75674: LD_VAR 0 2
75678: PUSH
75679: LD_VAR 0 3
75683: PLUS
75684: ST_TO_ADDR
// for _x = min_x to max_x do
75685: LD_ADDR_VAR 0 5
75689: PUSH
75690: DOUBLE
75691: LD_VAR 0 8
75695: DEC
75696: ST_TO_ADDR
75697: LD_VAR 0 9
75701: PUSH
75702: FOR_TO
75703: IFFALSE 75804
// for _y = min_y to max_y do
75705: LD_ADDR_VAR 0 6
75709: PUSH
75710: DOUBLE
75711: LD_VAR 0 7
75715: DEC
75716: ST_TO_ADDR
75717: LD_VAR 0 10
75721: PUSH
75722: FOR_TO
75723: IFFALSE 75800
// begin if not ValidHex ( _x , _y ) then
75725: LD_VAR 0 5
75729: PPUSH
75730: LD_VAR 0 6
75734: PPUSH
75735: CALL_OW 488
75739: NOT
75740: IFFALSE 75744
// continue ;
75742: GO 75722
// if GetResourceTypeXY ( _x , _y ) then
75744: LD_VAR 0 5
75748: PPUSH
75749: LD_VAR 0 6
75753: PPUSH
75754: CALL_OW 283
75758: IFFALSE 75798
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75760: LD_ADDR_VAR 0 4
75764: PUSH
75765: LD_VAR 0 4
75769: PPUSH
75770: LD_VAR 0 4
75774: PUSH
75775: LD_INT 1
75777: PLUS
75778: PPUSH
75779: LD_VAR 0 5
75783: PUSH
75784: LD_VAR 0 6
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: PPUSH
75793: CALL_OW 1
75797: ST_TO_ADDR
// end ;
75798: GO 75722
75800: POP
75801: POP
75802: GO 75702
75804: POP
75805: POP
// end ;
75806: LD_VAR 0 4
75810: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75811: LD_INT 0
75813: PPUSH
75814: PPUSH
75815: PPUSH
75816: PPUSH
75817: PPUSH
75818: PPUSH
75819: PPUSH
75820: PPUSH
// if not units then
75821: LD_VAR 0 1
75825: NOT
75826: IFFALSE 75830
// exit ;
75828: GO 76354
// result := UnitFilter ( units , [ f_ok ] ) ;
75830: LD_ADDR_VAR 0 3
75834: PUSH
75835: LD_VAR 0 1
75839: PPUSH
75840: LD_INT 50
75842: PUSH
75843: EMPTY
75844: LIST
75845: PPUSH
75846: CALL_OW 72
75850: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75851: LD_ADDR_VAR 0 8
75855: PUSH
75856: LD_VAR 0 1
75860: PUSH
75861: LD_INT 1
75863: ARRAY
75864: PPUSH
75865: CALL_OW 255
75869: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75870: LD_ADDR_VAR 0 10
75874: PUSH
75875: LD_INT 29
75877: PUSH
75878: LD_INT 91
75880: PUSH
75881: LD_INT 49
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: LIST
75888: ST_TO_ADDR
// if not result then
75889: LD_VAR 0 3
75893: NOT
75894: IFFALSE 75898
// exit ;
75896: GO 76354
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75898: LD_ADDR_VAR 0 5
75902: PUSH
75903: LD_INT 81
75905: PUSH
75906: LD_VAR 0 8
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PPUSH
75915: CALL_OW 69
75919: ST_TO_ADDR
// for i in result do
75920: LD_ADDR_VAR 0 4
75924: PUSH
75925: LD_VAR 0 3
75929: PUSH
75930: FOR_IN
75931: IFFALSE 76352
// begin tag := GetTag ( i ) + 1 ;
75933: LD_ADDR_VAR 0 9
75937: PUSH
75938: LD_VAR 0 4
75942: PPUSH
75943: CALL_OW 110
75947: PUSH
75948: LD_INT 1
75950: PLUS
75951: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75952: LD_ADDR_VAR 0 7
75956: PUSH
75957: LD_VAR 0 4
75961: PPUSH
75962: CALL_OW 250
75966: PPUSH
75967: LD_VAR 0 4
75971: PPUSH
75972: CALL_OW 251
75976: PPUSH
75977: LD_INT 6
75979: PPUSH
75980: CALL 75553 0 3
75984: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75985: LD_VAR 0 4
75989: PPUSH
75990: CALL_OW 247
75994: PUSH
75995: LD_INT 2
75997: EQUAL
75998: PUSH
75999: LD_VAR 0 7
76003: AND
76004: PUSH
76005: LD_VAR 0 4
76009: PPUSH
76010: CALL_OW 264
76014: PUSH
76015: LD_VAR 0 10
76019: IN
76020: NOT
76021: AND
76022: IFFALSE 76061
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76024: LD_VAR 0 4
76028: PPUSH
76029: LD_VAR 0 7
76033: PUSH
76034: LD_INT 1
76036: ARRAY
76037: PUSH
76038: LD_INT 1
76040: ARRAY
76041: PPUSH
76042: LD_VAR 0 7
76046: PUSH
76047: LD_INT 1
76049: ARRAY
76050: PUSH
76051: LD_INT 2
76053: ARRAY
76054: PPUSH
76055: CALL_OW 116
76059: GO 76350
// if path > tag then
76061: LD_VAR 0 2
76065: PUSH
76066: LD_VAR 0 9
76070: GREATER
76071: IFFALSE 76279
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76073: LD_ADDR_VAR 0 6
76077: PUSH
76078: LD_VAR 0 5
76082: PPUSH
76083: LD_INT 91
76085: PUSH
76086: LD_VAR 0 4
76090: PUSH
76091: LD_INT 8
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: LIST
76098: PPUSH
76099: CALL_OW 72
76103: ST_TO_ADDR
// if nearEnemy then
76104: LD_VAR 0 6
76108: IFFALSE 76177
// begin if GetWeapon ( i ) = ru_time_lapser then
76110: LD_VAR 0 4
76114: PPUSH
76115: CALL_OW 264
76119: PUSH
76120: LD_INT 49
76122: EQUAL
76123: IFFALSE 76151
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76125: LD_VAR 0 4
76129: PPUSH
76130: LD_VAR 0 6
76134: PPUSH
76135: LD_VAR 0 4
76139: PPUSH
76140: CALL_OW 74
76144: PPUSH
76145: CALL_OW 112
76149: GO 76175
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76151: LD_VAR 0 4
76155: PPUSH
76156: LD_VAR 0 6
76160: PPUSH
76161: LD_VAR 0 4
76165: PPUSH
76166: CALL_OW 74
76170: PPUSH
76171: CALL 77279 0 2
// end else
76175: GO 76277
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76177: LD_VAR 0 4
76181: PPUSH
76182: LD_VAR 0 2
76186: PUSH
76187: LD_VAR 0 9
76191: ARRAY
76192: PUSH
76193: LD_INT 1
76195: ARRAY
76196: PPUSH
76197: LD_VAR 0 2
76201: PUSH
76202: LD_VAR 0 9
76206: ARRAY
76207: PUSH
76208: LD_INT 2
76210: ARRAY
76211: PPUSH
76212: CALL_OW 297
76216: PUSH
76217: LD_INT 6
76219: GREATER
76220: IFFALSE 76263
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76222: LD_VAR 0 4
76226: PPUSH
76227: LD_VAR 0 2
76231: PUSH
76232: LD_VAR 0 9
76236: ARRAY
76237: PUSH
76238: LD_INT 1
76240: ARRAY
76241: PPUSH
76242: LD_VAR 0 2
76246: PUSH
76247: LD_VAR 0 9
76251: ARRAY
76252: PUSH
76253: LD_INT 2
76255: ARRAY
76256: PPUSH
76257: CALL_OW 114
76261: GO 76277
// SetTag ( i , tag ) ;
76263: LD_VAR 0 4
76267: PPUSH
76268: LD_VAR 0 9
76272: PPUSH
76273: CALL_OW 109
// end else
76277: GO 76350
// if enemy then
76279: LD_VAR 0 5
76283: IFFALSE 76350
// begin if GetWeapon ( i ) = ru_time_lapser then
76285: LD_VAR 0 4
76289: PPUSH
76290: CALL_OW 264
76294: PUSH
76295: LD_INT 49
76297: EQUAL
76298: IFFALSE 76326
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76300: LD_VAR 0 4
76304: PPUSH
76305: LD_VAR 0 5
76309: PPUSH
76310: LD_VAR 0 4
76314: PPUSH
76315: CALL_OW 74
76319: PPUSH
76320: CALL_OW 112
76324: GO 76350
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76326: LD_VAR 0 4
76330: PPUSH
76331: LD_VAR 0 5
76335: PPUSH
76336: LD_VAR 0 4
76340: PPUSH
76341: CALL_OW 74
76345: PPUSH
76346: CALL 77279 0 2
// end ; end ;
76350: GO 75930
76352: POP
76353: POP
// end ;
76354: LD_VAR 0 3
76358: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76359: LD_INT 0
76361: PPUSH
76362: PPUSH
76363: PPUSH
// if not unit or IsInUnit ( unit ) then
76364: LD_VAR 0 1
76368: NOT
76369: PUSH
76370: LD_VAR 0 1
76374: PPUSH
76375: CALL_OW 310
76379: OR
76380: IFFALSE 76384
// exit ;
76382: GO 76475
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76384: LD_ADDR_VAR 0 4
76388: PUSH
76389: LD_VAR 0 1
76393: PPUSH
76394: CALL_OW 250
76398: PPUSH
76399: LD_VAR 0 2
76403: PPUSH
76404: LD_INT 1
76406: PPUSH
76407: CALL_OW 272
76411: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76412: LD_ADDR_VAR 0 5
76416: PUSH
76417: LD_VAR 0 1
76421: PPUSH
76422: CALL_OW 251
76426: PPUSH
76427: LD_VAR 0 2
76431: PPUSH
76432: LD_INT 1
76434: PPUSH
76435: CALL_OW 273
76439: ST_TO_ADDR
// if ValidHex ( x , y ) then
76440: LD_VAR 0 4
76444: PPUSH
76445: LD_VAR 0 5
76449: PPUSH
76450: CALL_OW 488
76454: IFFALSE 76475
// ComTurnXY ( unit , x , y ) ;
76456: LD_VAR 0 1
76460: PPUSH
76461: LD_VAR 0 4
76465: PPUSH
76466: LD_VAR 0 5
76470: PPUSH
76471: CALL_OW 118
// end ;
76475: LD_VAR 0 3
76479: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76480: LD_INT 0
76482: PPUSH
76483: PPUSH
// result := false ;
76484: LD_ADDR_VAR 0 3
76488: PUSH
76489: LD_INT 0
76491: ST_TO_ADDR
// if not units then
76492: LD_VAR 0 2
76496: NOT
76497: IFFALSE 76501
// exit ;
76499: GO 76546
// for i in units do
76501: LD_ADDR_VAR 0 4
76505: PUSH
76506: LD_VAR 0 2
76510: PUSH
76511: FOR_IN
76512: IFFALSE 76544
// if See ( side , i ) then
76514: LD_VAR 0 1
76518: PPUSH
76519: LD_VAR 0 4
76523: PPUSH
76524: CALL_OW 292
76528: IFFALSE 76542
// begin result := true ;
76530: LD_ADDR_VAR 0 3
76534: PUSH
76535: LD_INT 1
76537: ST_TO_ADDR
// exit ;
76538: POP
76539: POP
76540: GO 76546
// end ;
76542: GO 76511
76544: POP
76545: POP
// end ;
76546: LD_VAR 0 3
76550: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76551: LD_INT 0
76553: PPUSH
76554: PPUSH
76555: PPUSH
76556: PPUSH
// if not unit or not points then
76557: LD_VAR 0 1
76561: NOT
76562: PUSH
76563: LD_VAR 0 2
76567: NOT
76568: OR
76569: IFFALSE 76573
// exit ;
76571: GO 76663
// dist := 99999 ;
76573: LD_ADDR_VAR 0 5
76577: PUSH
76578: LD_INT 99999
76580: ST_TO_ADDR
// for i in points do
76581: LD_ADDR_VAR 0 4
76585: PUSH
76586: LD_VAR 0 2
76590: PUSH
76591: FOR_IN
76592: IFFALSE 76661
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76594: LD_ADDR_VAR 0 6
76598: PUSH
76599: LD_VAR 0 1
76603: PPUSH
76604: LD_VAR 0 4
76608: PUSH
76609: LD_INT 1
76611: ARRAY
76612: PPUSH
76613: LD_VAR 0 4
76617: PUSH
76618: LD_INT 2
76620: ARRAY
76621: PPUSH
76622: CALL_OW 297
76626: ST_TO_ADDR
// if tmpDist < dist then
76627: LD_VAR 0 6
76631: PUSH
76632: LD_VAR 0 5
76636: LESS
76637: IFFALSE 76659
// begin result := i ;
76639: LD_ADDR_VAR 0 3
76643: PUSH
76644: LD_VAR 0 4
76648: ST_TO_ADDR
// dist := tmpDist ;
76649: LD_ADDR_VAR 0 5
76653: PUSH
76654: LD_VAR 0 6
76658: ST_TO_ADDR
// end ; end ;
76659: GO 76591
76661: POP
76662: POP
// end ;
76663: LD_VAR 0 3
76667: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76668: LD_INT 0
76670: PPUSH
// uc_side := side ;
76671: LD_ADDR_OWVAR 20
76675: PUSH
76676: LD_VAR 0 1
76680: ST_TO_ADDR
// uc_nation := 3 ;
76681: LD_ADDR_OWVAR 21
76685: PUSH
76686: LD_INT 3
76688: ST_TO_ADDR
// vc_chassis := 25 ;
76689: LD_ADDR_OWVAR 37
76693: PUSH
76694: LD_INT 25
76696: ST_TO_ADDR
// vc_engine := engine_siberite ;
76697: LD_ADDR_OWVAR 39
76701: PUSH
76702: LD_INT 3
76704: ST_TO_ADDR
// vc_control := control_computer ;
76705: LD_ADDR_OWVAR 38
76709: PUSH
76710: LD_INT 3
76712: ST_TO_ADDR
// vc_weapon := 59 ;
76713: LD_ADDR_OWVAR 40
76717: PUSH
76718: LD_INT 59
76720: ST_TO_ADDR
// result := CreateVehicle ;
76721: LD_ADDR_VAR 0 5
76725: PUSH
76726: CALL_OW 45
76730: ST_TO_ADDR
// SetDir ( result , d ) ;
76731: LD_VAR 0 5
76735: PPUSH
76736: LD_VAR 0 4
76740: PPUSH
76741: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76745: LD_VAR 0 5
76749: PPUSH
76750: LD_VAR 0 2
76754: PPUSH
76755: LD_VAR 0 3
76759: PPUSH
76760: LD_INT 0
76762: PPUSH
76763: CALL_OW 48
// end ;
76767: LD_VAR 0 5
76771: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76772: LD_INT 0
76774: PPUSH
76775: PPUSH
76776: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76777: LD_ADDR_VAR 0 2
76781: PUSH
76782: LD_INT 0
76784: PUSH
76785: LD_INT 0
76787: PUSH
76788: LD_INT 0
76790: PUSH
76791: LD_INT 0
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: LIST
76798: LIST
76799: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76800: LD_VAR 0 1
76804: NOT
76805: PUSH
76806: LD_VAR 0 1
76810: PPUSH
76811: CALL_OW 264
76815: PUSH
76816: LD_INT 12
76818: PUSH
76819: LD_INT 51
76821: PUSH
76822: LD_INT 32
76824: PUSH
76825: LD_INT 89
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: IN
76834: NOT
76835: OR
76836: IFFALSE 76840
// exit ;
76838: GO 76938
// for i := 1 to 3 do
76840: LD_ADDR_VAR 0 3
76844: PUSH
76845: DOUBLE
76846: LD_INT 1
76848: DEC
76849: ST_TO_ADDR
76850: LD_INT 3
76852: PUSH
76853: FOR_TO
76854: IFFALSE 76936
// begin tmp := GetCargo ( cargo , i ) ;
76856: LD_ADDR_VAR 0 4
76860: PUSH
76861: LD_VAR 0 1
76865: PPUSH
76866: LD_VAR 0 3
76870: PPUSH
76871: CALL_OW 289
76875: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76876: LD_ADDR_VAR 0 2
76880: PUSH
76881: LD_VAR 0 2
76885: PPUSH
76886: LD_VAR 0 3
76890: PPUSH
76891: LD_VAR 0 4
76895: PPUSH
76896: CALL_OW 1
76900: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76901: LD_ADDR_VAR 0 2
76905: PUSH
76906: LD_VAR 0 2
76910: PPUSH
76911: LD_INT 4
76913: PPUSH
76914: LD_VAR 0 2
76918: PUSH
76919: LD_INT 4
76921: ARRAY
76922: PUSH
76923: LD_VAR 0 4
76927: PLUS
76928: PPUSH
76929: CALL_OW 1
76933: ST_TO_ADDR
// end ;
76934: GO 76853
76936: POP
76937: POP
// end ;
76938: LD_VAR 0 2
76942: RET
// export function Length ( array ) ; begin
76943: LD_INT 0
76945: PPUSH
// result := array + 0 ;
76946: LD_ADDR_VAR 0 2
76950: PUSH
76951: LD_VAR 0 1
76955: PUSH
76956: LD_INT 0
76958: PLUS
76959: ST_TO_ADDR
// end ;
76960: LD_VAR 0 2
76964: RET
// export function PrepareArray ( array ) ; begin
76965: LD_INT 0
76967: PPUSH
// result := array diff 0 ;
76968: LD_ADDR_VAR 0 2
76972: PUSH
76973: LD_VAR 0 1
76977: PUSH
76978: LD_INT 0
76980: DIFF
76981: ST_TO_ADDR
// if not result [ 1 ] then
76982: LD_VAR 0 2
76986: PUSH
76987: LD_INT 1
76989: ARRAY
76990: NOT
76991: IFFALSE 77011
// result := Delete ( result , 1 ) ;
76993: LD_ADDR_VAR 0 2
76997: PUSH
76998: LD_VAR 0 2
77002: PPUSH
77003: LD_INT 1
77005: PPUSH
77006: CALL_OW 3
77010: ST_TO_ADDR
// end ;
77011: LD_VAR 0 2
77015: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77016: LD_INT 0
77018: PPUSH
77019: PPUSH
77020: PPUSH
77021: PPUSH
// sibRocketRange := 25 ;
77022: LD_ADDR_VAR 0 6
77026: PUSH
77027: LD_INT 25
77029: ST_TO_ADDR
// result := false ;
77030: LD_ADDR_VAR 0 4
77034: PUSH
77035: LD_INT 0
77037: ST_TO_ADDR
// for i := 0 to 5 do
77038: LD_ADDR_VAR 0 5
77042: PUSH
77043: DOUBLE
77044: LD_INT 0
77046: DEC
77047: ST_TO_ADDR
77048: LD_INT 5
77050: PUSH
77051: FOR_TO
77052: IFFALSE 77119
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77054: LD_VAR 0 1
77058: PPUSH
77059: LD_VAR 0 5
77063: PPUSH
77064: LD_VAR 0 6
77068: PPUSH
77069: CALL_OW 272
77073: PPUSH
77074: LD_VAR 0 2
77078: PPUSH
77079: LD_VAR 0 5
77083: PPUSH
77084: LD_VAR 0 6
77088: PPUSH
77089: CALL_OW 273
77093: PPUSH
77094: LD_VAR 0 3
77098: PPUSH
77099: CALL_OW 309
77103: IFFALSE 77117
// begin result := true ;
77105: LD_ADDR_VAR 0 4
77109: PUSH
77110: LD_INT 1
77112: ST_TO_ADDR
// exit ;
77113: POP
77114: POP
77115: GO 77121
// end ;
77117: GO 77051
77119: POP
77120: POP
// end ;
77121: LD_VAR 0 4
77125: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77126: LD_INT 0
77128: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77129: LD_VAR 0 1
77133: PPUSH
77134: LD_VAR 0 2
77138: PPUSH
77139: LD_INT 0
77141: PPUSH
77142: LD_INT 0
77144: PPUSH
77145: LD_INT 1
77147: PPUSH
77148: LD_INT 0
77150: PPUSH
77151: CALL_OW 587
// end ;
77155: LD_VAR 0 3
77159: RET
// export function CenterOnNow ( unit ) ; begin
77160: LD_INT 0
77162: PPUSH
// result := IsInUnit ( unit ) ;
77163: LD_ADDR_VAR 0 2
77167: PUSH
77168: LD_VAR 0 1
77172: PPUSH
77173: CALL_OW 310
77177: ST_TO_ADDR
// if not result then
77178: LD_VAR 0 2
77182: NOT
77183: IFFALSE 77195
// result := unit ;
77185: LD_ADDR_VAR 0 2
77189: PUSH
77190: LD_VAR 0 1
77194: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77195: LD_VAR 0 1
77199: PPUSH
77200: CALL_OW 87
// end ;
77204: LD_VAR 0 2
77208: RET
// export function ComMoveHex ( unit , hex ) ; begin
77209: LD_INT 0
77211: PPUSH
// if not hex then
77212: LD_VAR 0 2
77216: NOT
77217: IFFALSE 77221
// exit ;
77219: GO 77274
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77221: LD_VAR 0 2
77225: PUSH
77226: LD_INT 1
77228: ARRAY
77229: PPUSH
77230: LD_VAR 0 2
77234: PUSH
77235: LD_INT 2
77237: ARRAY
77238: PPUSH
77239: CALL_OW 428
77243: IFFALSE 77247
// exit ;
77245: GO 77274
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77247: LD_VAR 0 1
77251: PPUSH
77252: LD_VAR 0 2
77256: PUSH
77257: LD_INT 1
77259: ARRAY
77260: PPUSH
77261: LD_VAR 0 2
77265: PUSH
77266: LD_INT 2
77268: ARRAY
77269: PPUSH
77270: CALL_OW 111
// end ;
77274: LD_VAR 0 3
77278: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
77279: LD_INT 0
77281: PPUSH
77282: PPUSH
77283: PPUSH
// if not unit or not enemy then
77284: LD_VAR 0 1
77288: NOT
77289: PUSH
77290: LD_VAR 0 2
77294: NOT
77295: OR
77296: IFFALSE 77300
// exit ;
77298: GO 77424
// x := GetX ( enemy ) ;
77300: LD_ADDR_VAR 0 4
77304: PUSH
77305: LD_VAR 0 2
77309: PPUSH
77310: CALL_OW 250
77314: ST_TO_ADDR
// y := GetY ( enemy ) ;
77315: LD_ADDR_VAR 0 5
77319: PUSH
77320: LD_VAR 0 2
77324: PPUSH
77325: CALL_OW 251
77329: ST_TO_ADDR
// if ValidHex ( x , y ) then
77330: LD_VAR 0 4
77334: PPUSH
77335: LD_VAR 0 5
77339: PPUSH
77340: CALL_OW 488
77344: IFFALSE 77424
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
77346: LD_VAR 0 2
77350: PPUSH
77351: CALL_OW 247
77355: PUSH
77356: LD_INT 3
77358: PUSH
77359: LD_INT 2
77361: PUSH
77362: EMPTY
77363: LIST
77364: LIST
77365: IN
77366: PUSH
77367: LD_VAR 0 1
77371: PPUSH
77372: CALL_OW 255
77376: PPUSH
77377: LD_VAR 0 2
77381: PPUSH
77382: CALL_OW 292
77386: AND
77387: IFFALSE 77405
// ComAttackUnit ( unit , enemy ) else
77389: LD_VAR 0 1
77393: PPUSH
77394: LD_VAR 0 2
77398: PPUSH
77399: CALL_OW 115
77403: GO 77424
// ComAgressiveMove ( unit , x , y ) ;
77405: LD_VAR 0 1
77409: PPUSH
77410: LD_VAR 0 4
77414: PPUSH
77415: LD_VAR 0 5
77419: PPUSH
77420: CALL_OW 114
// end ; end_of_file
77424: LD_VAR 0 3
77428: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77429: LD_VAR 0 1
77433: PUSH
77434: LD_INT 200
77436: DOUBLE
77437: GREATEREQUAL
77438: IFFALSE 77446
77440: LD_INT 299
77442: DOUBLE
77443: LESSEQUAL
77444: IFTRUE 77448
77446: GO 77480
77448: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77449: LD_VAR 0 1
77453: PPUSH
77454: LD_VAR 0 2
77458: PPUSH
77459: LD_VAR 0 3
77463: PPUSH
77464: LD_VAR 0 4
77468: PPUSH
77469: LD_VAR 0 5
77473: PPUSH
77474: CALL 15351 0 5
77478: GO 77557
77480: LD_INT 300
77482: DOUBLE
77483: GREATEREQUAL
77484: IFFALSE 77492
77486: LD_INT 399
77488: DOUBLE
77489: LESSEQUAL
77490: IFTRUE 77494
77492: GO 77556
77494: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77495: LD_VAR 0 1
77499: PPUSH
77500: LD_VAR 0 2
77504: PPUSH
77505: LD_VAR 0 3
77509: PPUSH
77510: LD_VAR 0 4
77514: PPUSH
77515: LD_VAR 0 5
77519: PPUSH
77520: LD_VAR 0 6
77524: PPUSH
77525: LD_VAR 0 7
77529: PPUSH
77530: LD_VAR 0 8
77534: PPUSH
77535: LD_VAR 0 9
77539: PPUSH
77540: LD_VAR 0 10
77544: PPUSH
77545: LD_VAR 0 11
77549: PPUSH
77550: CALL 32206 0 11
77554: GO 77557
77556: POP
// end ;
77557: PPOPN 11
77559: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77560: LD_VAR 0 1
77564: PPUSH
77565: LD_VAR 0 2
77569: PPUSH
77570: LD_VAR 0 3
77574: PPUSH
77575: LD_VAR 0 4
77579: PPUSH
77580: LD_VAR 0 5
77584: PPUSH
77585: CALL 15087 0 5
// end ; end_of_file
77589: PPOPN 5
77591: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77592: LD_VAR 0 1
77596: PPUSH
77597: LD_VAR 0 2
77601: PPUSH
77602: LD_VAR 0 3
77606: PPUSH
77607: LD_VAR 0 4
77611: PPUSH
77612: LD_VAR 0 5
77616: PPUSH
77617: LD_VAR 0 6
77621: PPUSH
77622: CALL 19858 0 6
// end ;
77626: PPOPN 6
77628: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77629: LD_INT 0
77631: PPUSH
// begin if not units then
77632: LD_VAR 0 1
77636: NOT
77637: IFFALSE 77641
// exit ;
77639: GO 77641
// end ;
77641: PPOPN 7
77643: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77644: CALL 19762 0 0
// end ;
77648: PPOPN 1
77650: END
