// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 2967 0 0
// Action ;
  39: CALL 8387 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 35066 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 35066 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 35066 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 35066 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 35066 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 35066 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 35066 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 35066 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 35066 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 35066 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 35066 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 35066 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 35066 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2189: LD_INT 35
2191: PPUSH
2192: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 428
2206: NOT
2207: IFFALSE 2189
// tmp := [ ] ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: EMPTY
2215: ST_TO_ADDR
// uc_side := 5 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 5
2223: ST_TO_ADDR
// uc_nation := 2 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2232: LD_ADDR_EXP 33
2236: PUSH
2237: LD_STRING Aviradze_L
2239: PPUSH
2240: LD_EXP 1
2244: NOT
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL 35066 0 3
2255: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2256: LD_EXP 33
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2268: LD_EXP 33
2272: PPUSH
2273: LD_INT 14
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2283: LD_EXP 33
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: CALL_OW 111
// AddComHold ( Aviradze ) ;
2298: LD_EXP 33
2302: PPUSH
2303: CALL_OW 200
// tmp := [ Aviradze ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_EXP 33
2316: PUSH
2317: EMPTY
2318: LIST
2319: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2320: LD_INT 70
2322: PPUSH
2323: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2327: LD_STRING Ibrahim_L
2329: PPUSH
2330: LD_EXP 1
2334: NOT
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL 35066 0 3
2345: IFFALSE 2445
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2347: LD_ADDR_EXP 24
2351: PUSH
2352: LD_STRING Ibrahim_L
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 35066 0 3
2370: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2371: LD_EXP 24
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2383: LD_EXP 24
2387: PPUSH
2388: LD_INT 14
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2398: LD_EXP 24
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: LD_INT 7
2408: PPUSH
2409: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2413: LD_EXP 24
2417: PPUSH
2418: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_EXP 24
2436: ADD
2437: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2438: LD_INT 70
2440: PPUSH
2441: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2445: LD_STRING Kaia_L
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_VAR 0 2
2458: PPUSH
2459: CALL 35066 0 3
2463: IFFALSE 2563
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2465: LD_ADDR_EXP 26
2469: PUSH
2470: LD_STRING Kaia_L
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 35066 0 3
2488: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2489: LD_EXP 26
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2501: LD_EXP 26
2505: PPUSH
2506: LD_INT 14
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2516: LD_EXP 26
2520: PPUSH
2521: LD_INT 8
2523: PPUSH
2524: LD_INT 7
2526: PPUSH
2527: CALL_OW 111
// AddComHold ( Kaia ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 200
// tmp := tmp ^ Kaia ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_VAR 0 4
2549: PUSH
2550: LD_EXP 26
2554: ADD
2555: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2563: LD_STRING Kamil_L
2565: PPUSH
2566: LD_EXP 1
2570: NOT
2571: PPUSH
2572: LD_VAR 0 2
2576: PPUSH
2577: CALL 35066 0 3
2581: IFFALSE 2681
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2583: LD_ADDR_EXP 25
2587: PUSH
2588: LD_STRING Kamil_L
2590: PPUSH
2591: LD_EXP 1
2595: NOT
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL 35066 0 3
2606: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2607: LD_EXP 25
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2619: LD_EXP 25
2623: PPUSH
2624: LD_INT 14
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2634: LD_EXP 25
2638: PPUSH
2639: LD_INT 8
2641: PPUSH
2642: LD_INT 7
2644: PPUSH
2645: CALL_OW 111
// AddComHold ( Kamil ) ;
2649: LD_EXP 25
2653: PPUSH
2654: CALL_OW 200
// tmp := tmp ^ Kamil ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 4
2667: PUSH
2668: LD_EXP 25
2672: ADD
2673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2674: LD_INT 70
2676: PPUSH
2677: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2681: LD_STRING Sophia_L
2683: PPUSH
2684: LD_EXP 1
2688: NOT
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL 35066 0 3
2699: IFFALSE 2799
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2701: LD_ADDR_EXP 27
2705: PUSH
2706: LD_STRING Sophia_L
2708: PPUSH
2709: LD_EXP 1
2713: NOT
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL 35066 0 3
2724: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2725: LD_EXP 27
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 14
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2752: LD_EXP 27
2756: PPUSH
2757: LD_INT 9
2759: PPUSH
2760: LD_INT 6
2762: PPUSH
2763: CALL_OW 111
// AddComHold ( Sophia ) ;
2767: LD_EXP 27
2771: PPUSH
2772: CALL_OW 200
// tmp := tmp ^ Sophia ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_EXP 27
2790: ADD
2791: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_STRING 04_1_others_L
2806: PPUSH
2807: CALL_OW 31
2811: ST_TO_ADDR
// if tmp2 then
2812: LD_VAR 0 5
2816: IFFALSE 2913
// for i in tmp2 do
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2911
// begin SetDir ( i , 2 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2858: LD_ADDR_EXP 34
2862: PUSH
2863: LD_EXP 34
2867: PPUSH
2868: LD_EXP 34
2872: PUSH
2873: LD_INT 1
2875: PLUS
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 17
2894: PPUSH
2895: LD_INT 14
2897: PPUSH
2898: CALL_OW 111
// wait ( 0 0$2 ) ;
2902: LD_INT 70
2904: PPUSH
2905: CALL_OW 67
// end ;
2909: GO 2828
2911: POP
2912: POP
// for i in tmp union tmp2 do
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_VAR 0 5
2927: UNION
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2960
// begin SetSide ( i , 2 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2944: LD_VAR 0 3
2948: PPUSH
2949: LD_EXP 21
2953: PPUSH
2954: CALL_OW 112
// end ;
2958: GO 2929
2960: POP
2961: POP
// end ; end_of_file
2962: LD_VAR 0 1
2966: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
// uc_side := 3 ;
2972: LD_ADDR_OWVAR 20
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// uc_nation := 3 ;
2980: LD_ADDR_OWVAR 21
2984: PUSH
2985: LD_INT 3
2987: ST_TO_ADDR
// crossRoadGuard := [ ] ;
2988: LD_ADDR_EXP 37
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// oilBaseGuard := [ ] ;
2995: LD_ADDR_EXP 38
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3002: LD_ADDR_EXP 41
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// for i := 1 to 2 do
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: DOUBLE
3015: LD_INT 1
3017: DEC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_TO
3023: IFFALSE 3162
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3025: LD_INT 0
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: CALL_OW 380
// un := CreateHuman ;
3059: LD_ADDR_VAR 0 3
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_EXP 37
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: LD_VAR 0 3
3092: PPUSH
3093: CALL_OW 1
3097: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3098: LD_VAR 0 3
3102: PPUSH
3103: LD_INT 100
3105: PPUSH
3106: LD_INT 63
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3119: LD_VAR 0 3
3123: PPUSH
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 64
3129: PPUSH
3130: CALL_OW 428
3134: PUSH
3135: LD_INT 98
3137: PPUSH
3138: LD_INT 58
3140: PPUSH
3141: CALL_OW 428
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_VAR 0 2
3154: ARRAY
3155: PPUSH
3156: CALL_OW 120
// end ;
3160: GO 3022
3162: POP
3163: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3164: LD_INT 51
3166: PPUSH
3167: LD_INT 77
3169: PPUSH
3170: CALL_OW 428
3174: PPUSH
3175: CALL_OW 274
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 120
3185: PPUSH
3186: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3190: LD_INT 10
3192: PPUSH
3193: CALL_OW 274
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 300
3203: PPUSH
3204: CALL_OW 277
// for i := 1 to 2 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 2
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3340
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_OWVAR 67
3252: ARRAY
3253: PPUSH
3254: CALL_OW 380
// un := CreateHuman ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_EXP 38
3277: PPUSH
3278: LD_EXP 38
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 1
3296: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 198
3304: PPUSH
3305: LD_INT 106
3307: PPUSH
3308: CALL_OW 428
3312: PUSH
3313: LD_INT 205
3315: PPUSH
3316: LD_INT 114
3318: PPUSH
3319: CALL_OW 428
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PPUSH
3334: CALL_OW 52
// end ;
3338: GO 3221
3340: POP
3341: POP
// for i := 1 to 2 do
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: DOUBLE
3348: LD_INT 1
3350: DEC
3351: ST_TO_ADDR
3352: LD_INT 2
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3433
// begin PrepareHuman ( false , 2 , 3 ) ;
3358: LD_INT 0
3360: PPUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 380
// un := CreateHuman ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: CALL_OW 44
3380: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PPUSH
3391: LD_EXP 38
3395: PUSH
3396: LD_INT 1
3398: PLUS
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 204
3417: PPUSH
3418: LD_INT 108
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 50
// end ;
3431: GO 3355
3433: POP
3434: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 1
3499: PPUSH
3500: LD_INT 5
3502: PPUSH
3503: CALL_OW 12
3507: ARRAY
3508: PPUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 10
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 71305 0 3
3562: IFFALSE 3614
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3564: LD_ADDR_EXP 39
3568: PUSH
3569: LD_EXP 39
3573: PPUSH
3574: LD_EXP 39
3578: PUSH
3579: LD_INT 1
3581: PLUS
3582: PPUSH
3583: LD_VAR 0 3
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// if Prob ( 50 ) then
3593: LD_INT 50
3595: PPUSH
3596: CALL_OW 13
3600: IFFALSE 3614
// ForceSleep ( un , true ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 585
// end ; end ;
3614: GO 3469
3616: POP
3617: POP
// for i := 1 to 3 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 3
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3726
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_OWVAR 67
3662: ARRAY
3663: PPUSH
3664: CALL_OW 380
// un := CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL 71305 0 3
3693: IFFALSE 3724
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3695: LD_ADDR_EXP 39
3699: PUSH
3700: LD_EXP 39
3704: PPUSH
3705: LD_EXP 39
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: PPUSH
3714: LD_VAR 0 3
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: GO 3631
3726: POP
3727: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3909
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PPUSH
3826: CALL_OW 380
// un := CreateHuman ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_INT 15
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 71305 0 3
3855: IFFALSE 3907
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PPUSH
3867: LD_EXP 40
3871: PUSH
3872: LD_INT 1
3874: PLUS
3875: PPUSH
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 1
3885: ST_TO_ADDR
// if Prob ( 50 ) then
3886: LD_INT 50
3888: PPUSH
3889: CALL_OW 13
3893: IFFALSE 3907
// ForceSleep ( un , true ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 585
// end ; end ;
3907: GO 3762
3909: POP
3910: POP
// end ;
3911: LD_VAR 0 1
3915: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation := 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// for i := 1 to 6 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 6
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4030
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 4
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 380
// un := CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 54
4002: PPUSH
4003: LD_INT 88
4005: PPUSH
4006: LD_INT 12
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 50
// SetLives ( un , 1 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3950
4030: POP
4031: POP
// uc_side := 3 ;
4032: LD_ADDR_OWVAR 20
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// uc_nation := 0 ;
4040: LD_ADDR_OWVAR 21
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4048: LD_ADDR_EXP 42
4052: PUSH
4053: EMPTY
4054: ST_TO_ADDR
// apeEngGroup := [ ] ;
4055: LD_ADDR_EXP 43
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: LD_INT 6
4080: PUSH
4081: LD_INT 7
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4215
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4099: LD_INT 0
4101: PPUSH
4102: LD_INT 15
4104: PPUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: LD_INT 6
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4143: LD_ADDR_EXP 42
4147: PUSH
4148: LD_EXP 42
4152: PPUSH
4153: LD_EXP 42
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 12
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 56
4199: PPUSH
4200: LD_INT 82
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 50
// end ;
4213: GO 4096
4215: POP
4216: POP
// for i := 1 to 2 do
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: DOUBLE
4223: LD_INT 1
4225: DEC
4226: ST_TO_ADDR
4227: LD_INT 2
4229: PUSH
4230: FOR_TO
4231: IFFALSE 4307
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 16
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: CALL_OW 380
// un := CreateHuman ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 44
4255: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4256: LD_ADDR_EXP 43
4260: PUSH
4261: LD_EXP 43
4265: PPUSH
4266: LD_EXP 43
4270: PUSH
4271: LD_INT 1
4273: PLUS
4274: PPUSH
4275: LD_VAR 0 3
4279: PPUSH
4280: CALL_OW 1
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 51
4292: PPUSH
4293: LD_INT 77
4295: PPUSH
4296: CALL_OW 428
4300: PPUSH
4301: CALL_OW 52
// end ;
4305: GO 4230
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4314: LD_EXP 42
4318: PPUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 24
4324: PUSH
4325: LD_INT 600
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 54
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 72
4357: PUSH
4358: LD_INT 66
4360: PPUSH
4361: LD_INT 89
4363: PPUSH
4364: CALL_OW 428
4368: PPUSH
4369: CALL_OW 302
4373: AND
4374: IFFALSE 4459
4376: GO 4378
4378: DISABLE
4379: LD_INT 0
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_EXP 42
4392: PPUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 24
4398: PUSH
4399: LD_INT 600
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 54
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4457
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 66
4442: PPUSH
4443: LD_INT 89
4445: PPUSH
4446: CALL_OW 428
4450: PPUSH
4451: CALL_OW 120
4455: GO 4432
4457: POP
4458: POP
// end ;
4459: PPOPN 1
4461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4462: LD_INT 22
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 92
4474: PUSH
4475: LD_INT 54
4477: PUSH
4478: LD_INT 77
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: IFFALSE 4562
4500: GO 4502
4502: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4503: LD_EXP 43
4507: PPUSH
4508: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4512: LD_EXP 43
4516: PPUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 2
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 92
4529: PUSH
4530: LD_INT 54
4532: PUSH
4533: LD_INT 77
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PPUSH
4558: CALL_OW 175
// end ;
4562: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_INT 3
4585: PPUSH
4586: CALL_OW 12
4590: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4591: LD_ADDR_VAR 0 5
4595: PUSH
4596: LD_INT 16
4598: PUSH
4599: LD_INT 17
4601: PUSH
4602: LD_INT 19
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 159
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 137
4633: PUSH
4634: LD_INT 37
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 123
4643: PUSH
4644: LD_INT 55
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 115
4653: PUSH
4654: LD_INT 71
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 88
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 97
4673: PUSH
4674: LD_INT 114
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 75
4683: PUSH
4684: LD_INT 146
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 206
4702: PUSH
4703: LD_INT 135
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 184
4712: PUSH
4713: LD_INT 111
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 154
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 122
4732: PUSH
4733: LD_INT 80
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 109
4742: PUSH
4743: LD_INT 78
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 97
4752: PUSH
4753: LD_INT 113
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 75
4762: PUSH
4763: LD_INT 147
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 185
4781: PUSH
4782: LD_INT 72
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 171
4791: PUSH
4792: LD_INT 83
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 161
4801: PUSH
4802: LD_INT 99
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 125
4811: PUSH
4812: LD_INT 82
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 90
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 96
4831: PUSH
4832: LD_INT 116
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 75
4841: PUSH
4842: LD_INT 147
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 3
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4869: LD_ADDR_VAR 0 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 3
4892: ARRAY
4893: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 20
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: LD_VAR 0 3
4917: ARRAY
4918: ST_TO_ADDR
// for i := 1 to 2 do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_INT 2
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4951
// EraseResourceArea ( i , outerSpawnArea ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 286
4949: GO 4932
4951: POP
4952: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 70
5001: IFFALSE 5216
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5010: LD_VAR 0 6
5014: PPUSH
5015: LD_INT 2
5017: PUSH
5018: LD_INT 21
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: PPUSH
5043: CALL_OW 70
5047: IFFALSE 5108
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5106
// RemoveUnit ( i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: CALL_OW 64
5104: GO 5092
5106: POP
5107: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5176
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 6
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5174
// ComMoveXY ( i , 113 , 53 ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_INT 113
5164: PPUSH
5165: LD_INT 53
5167: PPUSH
5168: CALL_OW 111
5172: GO 5154
5174: POP
5175: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 21
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 70
5213: NOT
5214: IFFALSE 5003
// case convoyCounter of 1 .. 3 :
5216: LD_EXP 16
5220: PUSH
5221: LD_INT 1
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 3
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5870
5235: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 5
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 7
5254: PUSH
5255: LD_INT 8
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_OWVAR 67
5268: ARRAY
5269: PUSH
5270: LD_EXP 16
5274: MINUS
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5484
// begin uc_side := 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation := 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL_OW 12
5326: ARRAY
5327: PPUSH
5328: LD_INT 4
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 7
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 8
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// SetDir ( un , dir ) ;
5366: LD_VAR 0 8
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: CALL 71305 0 3
5397: IFFALSE 5482
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5399: LD_ADDR_EXP 41
5403: PUSH
5404: LD_EXP 41
5408: PPUSH
5409: LD_EXP 41
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 8
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5428: LD_VAR 0 8
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 111
// wait ( 0 0$2 ) ;
5475: LD_INT 70
5477: PPUSH
5478: CALL_OW 67
// end ; end ;
5482: GO 5276
5484: POP
5485: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: DOUBLE
5492: LD_INT 1
5494: DEC
5495: ST_TO_ADDR
5496: LD_INT 3
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: LD_OWVAR 67
5518: ARRAY
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5866
// begin uc_side := 3 ;
5523: LD_ADDR_OWVAR 20
5527: PUSH
5528: LD_INT 3
5530: ST_TO_ADDR
// uc_nation := 3 ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_INT 3
5538: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5539: LD_INT 3
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 24
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_OWVAR 67
5575: PPUSH
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: PLUS
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 42
5599: PUSH
5600: LD_INT 44
5602: PUSH
5603: LD_INT 43
5605: PUSH
5606: LD_INT 44
5608: PUSH
5609: LD_INT 46
5611: PUSH
5612: LD_INT 46
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_OWVAR 67
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: CALL_OW 12
5639: ARRAY
5640: PPUSH
5641: LD_INT 90
5643: PPUSH
5644: CALL 439 0 7
// un := CreateVehicle ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: CALL_OW 45
5657: ST_TO_ADDR
// SetDir ( un , dir ) ;
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5672: LD_VAR 0 8
5676: PPUSH
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL 71305 0 3
5689: IFFALSE 5864
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5691: LD_ADDR_EXP 41
5695: PUSH
5696: LD_EXP 41
5700: PPUSH
5701: LD_EXP 41
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: LD_VAR 0 8
5714: PPUSH
5715: CALL_OW 1
5719: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 3
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 6
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 383
// un := CreateHuman ;
5751: LD_ADDR_VAR 0 8
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_EXP 41
5775: ARRAY
5776: PPUSH
5777: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5781: LD_ADDR_EXP 41
5785: PUSH
5786: LD_EXP 41
5790: PPUSH
5791: LD_EXP 41
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 8
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5810: LD_VAR 0 8
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5822: LD_VAR 0 8
5826: PPUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: ARRAY
5852: PPUSH
5853: CALL_OW 111
// wait ( 0 0$3 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// end ; end ;
5864: GO 5520
5866: POP
5867: POP
// end ; 4 .. 7 :
5868: GO 6475
5870: LD_INT 4
5872: DOUBLE
5873: GREATEREQUAL
5874: IFFALSE 5882
5876: LD_INT 7
5878: DOUBLE
5879: LESSEQUAL
5880: IFTRUE 5884
5882: GO 6474
5884: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_INT 2
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: LD_OWVAR 67
5917: ARRAY
5918: PUSH
5919: FOR_TO
5920: IFFALSE 6100
// begin uc_side := 3 ;
5922: LD_ADDR_OWVAR 20
5926: PUSH
5927: LD_INT 3
5929: ST_TO_ADDR
// uc_nation := 3 ;
5930: LD_ADDR_OWVAR 21
5934: PUSH
5935: LD_INT 3
5937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 4
5946: PUSH
5947: LD_INT 5
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 7
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 71305 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5919
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6470
// begin uc_side := 3 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 3
6146: ST_TO_ADDR
// uc_nation := 3 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 3
6160: PPUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 42
6191: PUSH
6192: LD_INT 44
6194: PUSH
6195: LD_INT 43
6197: PUSH
6198: LD_INT 44
6200: PUSH
6201: LD_INT 44
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 1
6213: PPUSH
6214: LD_OWVAR 67
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: PPUSH
6229: LD_INT 90
6231: PPUSH
6232: CALL 439 0 7
// un := CreateVehicle ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 45
6245: ST_TO_ADDR
// SetDir ( un , dir ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL 71305 0 3
6277: IFFALSE 6468
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6279: LD_ADDR_EXP 41
6283: PUSH
6284: LD_EXP 41
6288: PPUSH
6289: LD_EXP 41
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: PPUSH
6298: LD_VAR 0 8
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// uc_side := 3 ;
6308: LD_ADDR_OWVAR 20
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// uc_nation := 3 ;
6316: LD_ADDR_OWVAR 21
6320: PUSH
6321: LD_INT 3
6323: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6324: LD_INT 0
6326: PPUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: LD_INT 6
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_OWVAR 67
6349: ARRAY
6350: PPUSH
6351: CALL_OW 383
// un := CreateHuman ;
6355: LD_ADDR_VAR 0 8
6359: PUSH
6360: CALL_OW 44
6364: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6365: LD_VAR 0 8
6369: PPUSH
6370: LD_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: ARRAY
6380: PPUSH
6381: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6385: LD_ADDR_EXP 41
6389: PUSH
6390: LD_EXP 41
6394: PPUSH
6395: LD_EXP 41
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 8
6408: PPUSH
6409: CALL_OW 1
6413: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6414: LD_VAR 0 8
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6426: LD_VAR 0 8
6430: PPUSH
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 7
6448: PUSH
6449: LD_INT 1
6451: ARRAY
6452: PUSH
6453: LD_INT 2
6455: ARRAY
6456: PPUSH
6457: CALL_OW 111
// wait ( 0 0$2 ) ;
6461: LD_INT 70
6463: PPUSH
6464: CALL_OW 67
// end ; end ;
6468: GO 6136
6470: POP
6471: POP
// end ; end ;
6472: GO 6475
6474: POP
// repeat wait ( 0 0$1 ) ;
6475: LD_INT 35
6477: PPUSH
6478: CALL_OW 67
// for un in ruConvoySquad do
6482: LD_ADDR_VAR 0 8
6486: PUSH
6487: LD_EXP 41
6491: PUSH
6492: FOR_IN
6493: IFFALSE 7117
// begin if IsInArea ( un , westSouthOutArea ) then
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_INT 18
6502: PPUSH
6503: CALL_OW 308
6507: IFFALSE 6595
// begin if GetType ( un ) = unit_vehicle then
6509: LD_VAR 0 8
6513: PPUSH
6514: CALL_OW 247
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6554
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: PPUSH
6539: CALL_OW 311
6543: DIFF
6544: ST_TO_ADDR
// RemoveUnit ( un ) ;
6545: LD_VAR 0 8
6549: PPUSH
6550: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6554: LD_ADDR_EXP 15
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6568: LD_ADDR_EXP 41
6572: PUSH
6573: LD_EXP 41
6577: PUSH
6578: LD_VAR 0 8
6582: DIFF
6583: ST_TO_ADDR
// RemoveUnit ( un ) ;
6584: LD_VAR 0 8
6588: PPUSH
6589: CALL_OW 64
// break ;
6593: GO 7117
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6595: LD_VAR 0 8
6599: PPUSH
6600: CALL_OW 305
6604: NOT
6605: PUSH
6606: LD_VAR 0 8
6610: PPUSH
6611: CALL_OW 310
6615: NOT
6616: AND
6617: IFFALSE 6635
// ruConvoySquad := ruConvoySquad diff un ;
6619: LD_ADDR_EXP 41
6623: PUSH
6624: LD_EXP 41
6628: PUSH
6629: LD_VAR 0 8
6633: DIFF
6634: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6635: LD_VAR 0 8
6639: PPUSH
6640: CALL_OW 302
6644: PUSH
6645: LD_VAR 0 8
6649: PPUSH
6650: CALL_OW 314
6654: NOT
6655: AND
6656: IFFALSE 7115
// begin tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 9
6662: PUSH
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6673: LD_VAR 0 8
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: LD_INT 1
6690: PLUS
6691: ARRAY
6692: PUSH
6693: LD_INT 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 9
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: ARRAY
6711: PUSH
6712: LD_INT 2
6714: ARRAY
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: IFFALSE 6907
// begin SetTag ( un , tag + 1 ) ;
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL_OW 247
6753: PUSH
6754: LD_INT 2
6756: EQUAL
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 257
6767: PUSH
6768: LD_INT 3
6770: EQUAL
6771: OR
6772: IFFALSE 6905
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6774: LD_ADDR_VAR 0 10
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 91
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: ST_TO_ADDR
// if enemy then
6814: LD_VAR 0 10
6818: IFFALSE 6846
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: LD_VAR 0 8
6834: PPUSH
6835: CALL_OW 74
6839: PPUSH
6840: CALL_OW 115
6844: GO 6905
// begin AddComWait ( un , 0 0$4 ) ;
6846: LD_VAR 0 8
6850: PPUSH
6851: LD_INT 140
6853: PPUSH
6854: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6858: LD_VAR 0 8
6862: PPUSH
6863: LD_VAR 0 7
6867: PUSH
6868: LD_VAR 0 9
6872: PUSH
6873: LD_INT 1
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 7
6886: PUSH
6887: LD_VAR 0 9
6891: PUSH
6892: LD_INT 1
6894: PLUS
6895: ARRAY
6896: PUSH
6897: LD_INT 2
6899: ARRAY
6900: PPUSH
6901: CALL_OW 174
// end ; end ; end else
6905: GO 7115
// begin if GetClass ( un ) = 4 then
6907: LD_VAR 0 8
6911: PPUSH
6912: CALL_OW 257
6916: PUSH
6917: LD_INT 4
6919: EQUAL
6920: IFFALSE 7068
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6922: LD_EXP 41
6926: PPUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: LD_INT 24
6942: PUSH
6943: LD_INT 1000
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: IFFALSE 7020
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6964: LD_VAR 0 8
6968: PPUSH
6969: LD_EXP 41
6973: PPUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 1000
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PPUSH
7014: CALL_OW 128
7018: GO 7066
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7020: LD_VAR 0 8
7024: PPUSH
7025: LD_EXP 41
7029: PPUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PPUSH
7052: LD_VAR 0 8
7056: PPUSH
7057: CALL_OW 74
7061: PPUSH
7062: CALL_OW 112
7066: GO 7115
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7068: LD_VAR 0 8
7072: PPUSH
7073: LD_VAR 0 7
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ARRAY
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 7
7096: PUSH
7097: LD_VAR 0 9
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 114
// end ; end ; end ;
7115: GO 6492
7117: POP
7118: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7119: LD_EXP 41
7123: PPUSH
7124: LD_INT 52
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: NOT
7149: IFFALSE 6475
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7156: LD_EXP 16
7160: PUSH
7161: LD_INT 3
7163: PPUSH
7164: LD_INT 5
7166: PPUSH
7167: CALL_OW 12
7171: LESS
7172: PUSH
7173: LD_EXP 41
7177: NOT
7178: AND
7179: PUSH
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: AND
7189: IFFALSE 7609
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: DOUBLE
7205: LD_INT 1
7207: DEC
7208: ST_TO_ADDR
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_OWVAR 67
7231: ARRAY
7232: PUSH
7233: FOR_TO
7234: IFFALSE 7530
// begin uc_side := 3 ;
7236: LD_ADDR_OWVAR 20
7240: PUSH
7241: LD_INT 3
7243: ST_TO_ADDR
// uc_nation := 3 ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7252: LD_INT 3
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 24
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_OWVAR 67
7288: PPUSH
7289: LD_OWVAR 67
7293: PUSH
7294: LD_INT 2
7296: PLUS
7297: PPUSH
7298: CALL_OW 12
7302: ARRAY
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 42
7312: PUSH
7313: LD_INT 44
7315: PUSH
7316: LD_INT 43
7318: PUSH
7319: LD_INT 44
7321: PUSH
7322: LD_INT 46
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 1
7338: PPUSH
7339: LD_OWVAR 67
7343: PUSH
7344: LD_INT 2
7346: PLUS
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 90
7356: PPUSH
7357: CALL 439 0 7
// un := CreateVehicle ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 45
7370: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7383: LD_VAR 0 3
7387: PPUSH
7388: LD_INT 23
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL 71305 0 3
7398: IFFALSE 7528
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
// uc_side := 3 ;
7429: LD_ADDR_OWVAR 20
7433: PUSH
7434: LD_INT 3
7436: ST_TO_ADDR
// uc_nation := 3 ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_INT 3
7444: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7445: LD_INT 0
7447: PPUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_OWVAR 67
7470: ARRAY
7471: PPUSH
7472: CALL_OW 383
// un := CreateHuman ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: CALL_OW 44
7485: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: PPUSH
7502: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 80
7513: PPUSH
7514: LD_INT 139
7516: PPUSH
7517: CALL_OW 111
// wait ( 0 0$3 ) ;
7521: LD_INT 105
7523: PPUSH
7524: CALL_OW 67
// end ; end ;
7528: GO 7233
7530: POP
7531: POP
// for i in tmp do
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7607
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 101
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 110
7567: PPUSH
7568: LD_INT 78
7570: PPUSH
7571: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: LD_INT 75
7582: PPUSH
7583: LD_INT 101
7585: PPUSH
7586: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 57
7597: PPUSH
7598: LD_INT 83
7600: PPUSH
7601: CALL_OW 174
// end ;
7605: GO 7542
7607: POP
7608: POP
// end ;
7609: PPOPN 3
7611: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7612: LD_EXP 39
7616: PPUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: LD_INT 1000
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 72
7638: PUSH
7639: LD_EXP 40
7643: PPUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 1000
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: OR
7666: IFFALSE 7765
7668: GO 7670
7670: DISABLE
7671: LD_INT 0
7673: PPUSH
// begin enable ;
7674: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 39
7684: PPUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: LD_INT 1000
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 72
7706: PUSH
7707: LD_EXP 40
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: LD_INT 1000
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 72
7733: UNION
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7763
// if IsSleeping ( i ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 555
7747: IFFALSE 7761
// ForceSleep ( i , false ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 585
7761: GO 7735
7763: POP
7764: POP
// end ;
7765: PPOPN 1
7767: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7768: LD_EXP 38
7772: PPUSH
7773: LD_INT 1
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: LD_INT 54
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 3
7791: PUSH
7792: LD_INT 95
7794: PUSH
7795: LD_INT 26
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: PPUSH
7811: CALL_OW 72
7815: IFFALSE 7910
7817: GO 7819
7819: DISABLE
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
// begin enable ;
7824: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7825: LD_ADDR_VAR 0 2
7829: PUSH
7830: LD_EXP 38
7834: PPUSH
7835: LD_INT 1
7837: PUSH
7838: LD_INT 3
7840: PUSH
7841: LD_INT 54
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 95
7856: PUSH
7857: LD_INT 26
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: ST_TO_ADDR
// for i in tmp do
7878: LD_ADDR_VAR 0 1
7882: PUSH
7883: LD_VAR 0 2
7887: PUSH
7888: FOR_IN
7889: IFFALSE 7908
// ComMoveXY ( i , 206 , 110 ) ;
7891: LD_VAR 0 1
7895: PPUSH
7896: LD_INT 206
7898: PPUSH
7899: LD_INT 110
7901: PPUSH
7902: CALL_OW 111
7906: GO 7888
7908: POP
7909: POP
// end ;
7910: PPOPN 2
7912: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7913: LD_INT 26
7915: PPUSH
7916: LD_INT 22
7918: PUSH
7919: LD_INT 2
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 70
7930: PUSH
7931: LD_INT 26
7933: PPUSH
7934: LD_INT 22
7936: PUSH
7937: LD_INT 3
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: LD_INT 30
7946: PUSH
7947: LD_INT 32
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 50
7956: PUSH
7957: EMPTY
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 70
7969: AND
7970: IFFALSE 8049
7972: GO 7974
7974: DISABLE
7975: LD_INT 0
7977: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_INT 26
7985: PPUSH
7986: LD_INT 22
7988: PUSH
7989: LD_INT 3
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: LD_INT 30
7998: PUSH
7999: LD_INT 32
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 50
8008: PUSH
8009: EMPTY
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 70
8021: PUSH
8022: FOR_IN
8023: IFFALSE 8047
// if IsInUnit ( i ) then
8025: LD_VAR 0 1
8029: PPUSH
8030: CALL_OW 310
8034: IFFALSE 8045
// ComExitBuilding ( i ) ;
8036: LD_VAR 0 1
8040: PPUSH
8041: CALL_OW 122
8045: GO 8022
8047: POP
8048: POP
// end ; end_of_file
8049: PPOPN 1
8051: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8052: LD_VAR 0 1
8056: PPUSH
8057: CALL 14975 0 1
// if un = Heike then
8061: LD_VAR 0 1
8065: PUSH
8066: LD_EXP 21
8070: EQUAL
8071: IFFALSE 8080
// YouLost ( Heike ) ;
8073: LD_STRING Heike
8075: PPUSH
8076: CALL_OW 104
// if un in apeSoldGroup then
8080: LD_VAR 0 1
8084: PUSH
8085: LD_EXP 42
8089: IN
8090: IFFALSE 8108
// apeSoldGroup := apeSoldGroup diff un ;
8092: LD_ADDR_EXP 42
8096: PUSH
8097: LD_EXP 42
8101: PUSH
8102: LD_VAR 0 1
8106: DIFF
8107: ST_TO_ADDR
// if un in apeEngGroup then
8108: LD_VAR 0 1
8112: PUSH
8113: LD_EXP 43
8117: IN
8118: IFFALSE 8136
// apeEngGroup := apeEngGroup diff un ;
8120: LD_ADDR_EXP 43
8124: PUSH
8125: LD_EXP 43
8129: PUSH
8130: LD_VAR 0 1
8134: DIFF
8135: ST_TO_ADDR
// if un in oilBaseGuard then
8136: LD_VAR 0 1
8140: PUSH
8141: LD_EXP 38
8145: IN
8146: IFFALSE 8164
// oilBaseGuard := oilBaseGuard diff un ;
8148: LD_ADDR_EXP 38
8152: PUSH
8153: LD_EXP 38
8157: PUSH
8158: LD_VAR 0 1
8162: DIFF
8163: ST_TO_ADDR
// if un in ruNorthGroup then
8164: LD_VAR 0 1
8168: PUSH
8169: LD_EXP 39
8173: IN
8174: IFFALSE 8192
// ruNorthGroup := ruNorthGroup diff un ;
8176: LD_ADDR_EXP 39
8180: PUSH
8181: LD_EXP 39
8185: PUSH
8186: LD_VAR 0 1
8190: DIFF
8191: ST_TO_ADDR
// if un in ruSouthGroup then
8192: LD_VAR 0 1
8196: PUSH
8197: LD_EXP 40
8201: IN
8202: IFFALSE 8220
// ruSouthGroup := ruSouthGroup diff un ;
8204: LD_ADDR_EXP 40
8208: PUSH
8209: LD_EXP 40
8213: PUSH
8214: LD_VAR 0 1
8218: DIFF
8219: ST_TO_ADDR
// if un in ruConvoySquad then
8220: LD_VAR 0 1
8224: PUSH
8225: LD_EXP 41
8229: IN
8230: IFFALSE 8248
// ruConvoySquad := ruConvoySquad diff un ;
8232: LD_ADDR_EXP 41
8236: PUSH
8237: LD_EXP 41
8241: PUSH
8242: LD_VAR 0 1
8246: DIFF
8247: ST_TO_ADDR
// end ;
8248: PPOPN 1
8250: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8251: LD_VAR 0 1
8255: PPUSH
8256: LD_VAR 0 2
8260: PPUSH
8261: CALL 15095 0 2
// if GetWeapon ( veh ) = ar_radar then
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 264
8274: PUSH
8275: LD_INT 30
8277: EQUAL
8278: IFFALSE 8288
// radarConstructed := true ;
8280: LD_ADDR_EXP 13
8284: PUSH
8285: LD_INT 1
8287: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8288: LD_VAR 0 1
8292: PPUSH
8293: CALL_OW 264
8297: PUSH
8298: LD_INT 26
8300: EQUAL
8301: IFFALSE 8311
// flamethrowerBuilt := true ;
8303: LD_ADDR_EXP 20
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// end ;
8311: PPOPN 2
8313: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8314: LD_ADDR_EXP 18
8318: PUSH
8319: LD_EXP 18
8323: PUSH
8324: LD_INT 1
8326: PLUS
8327: ST_TO_ADDR
// if oldId in ruConvoySquad then
8328: LD_VAR 0 2
8332: PUSH
8333: LD_EXP 41
8337: IN
8338: IFFALSE 8356
// ruConvoySquad := ruConvoySquad diff oldId ;
8340: LD_ADDR_EXP 41
8344: PUSH
8345: LD_EXP 41
8349: PUSH
8350: LD_VAR 0 2
8354: DIFF
8355: ST_TO_ADDR
// if newId in ruConvoySquad then
8356: LD_VAR 0 1
8360: PUSH
8361: LD_EXP 41
8365: IN
8366: IFFALSE 8384
// ruConvoySquad := ruConvoySquad diff newId ;
8368: LD_ADDR_EXP 41
8372: PUSH
8373: LD_EXP 41
8377: PUSH
8378: LD_VAR 0 1
8382: DIFF
8383: ST_TO_ADDR
// end ; end_of_file
8384: PPOPN 4
8386: END
// export function Action ; var i , p , un , veh , tmp ; begin
8387: LD_INT 0
8389: PPUSH
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
// InGameOn ;
8395: CALL_OW 8
// music_nat := 2 ;
8399: LD_ADDR_OWVAR 71
8403: PUSH
8404: LD_INT 2
8406: ST_TO_ADDR
// music_class := music_recon ;
8407: LD_ADDR_OWVAR 72
8411: PUSH
8412: LD_INT 3
8414: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8415: LD_INT 7
8417: PPUSH
8418: LD_INT 6
8420: PPUSH
8421: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8425: LD_INT 7
8427: PPUSH
8428: LD_INT 6
8430: PPUSH
8431: LD_INT 2
8433: PPUSH
8434: LD_INT 30
8436: NEG
8437: PPUSH
8438: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8442: LD_ADDR_VAR 0 6
8446: PUSH
8447: LD_EXP 21
8451: PUSH
8452: LD_EXP 22
8456: PUSH
8457: LD_EXP 23
8461: PUSH
8462: LD_EXP 24
8466: PUSH
8467: LD_EXP 25
8471: PUSH
8472: LD_EXP 26
8476: PUSH
8477: LD_EXP 28
8481: PUSH
8482: LD_EXP 33
8486: PUSH
8487: LD_EXP 27
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: ST_TO_ADDR
// tmp := tmp diff 0 ;
8503: LD_ADDR_VAR 0 6
8507: PUSH
8508: LD_VAR 0 6
8512: PUSH
8513: LD_INT 0
8515: DIFF
8516: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8517: LD_ADDR_VAR 0 6
8521: PUSH
8522: LD_VAR 0 6
8526: PPUSH
8527: LD_INT 3
8529: PPUSH
8530: CALL 70904 0 2
8534: ST_TO_ADDR
// for i in heikeVehicles do
8535: LD_ADDR_VAR 0 2
8539: PUSH
8540: LD_EXP 35
8544: PUSH
8545: FOR_IN
8546: IFFALSE 8745
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8548: LD_INT 5
8550: PPUSH
8551: LD_VAR 0 2
8555: PUSH
8556: LD_INT 5
8558: ARRAY
8559: PPUSH
8560: LD_VAR 0 2
8564: PUSH
8565: LD_INT 1
8567: ARRAY
8568: PPUSH
8569: LD_VAR 0 2
8573: PUSH
8574: LD_INT 2
8576: ARRAY
8577: PPUSH
8578: LD_VAR 0 2
8582: PUSH
8583: LD_INT 3
8585: ARRAY
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_INT 4
8594: ARRAY
8595: PPUSH
8596: LD_INT 34
8598: PPUSH
8599: CALL 439 0 7
// veh := CreateVehicle ;
8603: LD_ADDR_VAR 0 5
8607: PUSH
8608: CALL_OW 45
8612: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8613: LD_VAR 0 2
8617: PUSH
8618: LD_INT 4
8620: ARRAY
8621: PUSH
8622: LD_INT 51
8624: PUSH
8625: LD_INT 32
8627: PUSH
8628: LD_INT 12
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: IN
8636: IFFALSE 8716
// begin if i [ 7 ] [ 1 ] then
8638: LD_VAR 0 2
8642: PUSH
8643: LD_INT 7
8645: ARRAY
8646: PUSH
8647: LD_INT 1
8649: ARRAY
8650: IFFALSE 8677
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8652: LD_VAR 0 5
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: LD_VAR 0 2
8664: PUSH
8665: LD_INT 7
8667: ARRAY
8668: PUSH
8669: LD_INT 1
8671: ARRAY
8672: PPUSH
8673: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8677: LD_VAR 0 2
8681: PUSH
8682: LD_INT 7
8684: ARRAY
8685: PUSH
8686: LD_INT 2
8688: ARRAY
8689: IFFALSE 8716
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8691: LD_VAR 0 5
8695: PPUSH
8696: LD_INT 2
8698: PPUSH
8699: LD_VAR 0 2
8703: PUSH
8704: LD_INT 7
8706: ARRAY
8707: PUSH
8708: LD_INT 2
8710: ARRAY
8711: PPUSH
8712: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8716: LD_VAR 0 5
8720: PPUSH
8721: LD_INT 2
8723: PPUSH
8724: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8728: LD_VAR 0 5
8732: PPUSH
8733: LD_INT 4
8735: PPUSH
8736: LD_INT 0
8738: PPUSH
8739: CALL_OW 49
// end ;
8743: GO 8545
8745: POP
8746: POP
// if tmp then
8747: LD_VAR 0 6
8751: IFFALSE 8861
// begin p := 0 ;
8753: LD_ADDR_VAR 0 3
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// for i in tmp do
8761: LD_ADDR_VAR 0 2
8765: PUSH
8766: LD_VAR 0 6
8770: PUSH
8771: FOR_IN
8772: IFFALSE 8859
// begin p := p + 1 ;
8774: LD_ADDR_VAR 0 3
8778: PUSH
8779: LD_VAR 0 3
8783: PUSH
8784: LD_INT 1
8786: PLUS
8787: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8788: LD_VAR 0 2
8792: PPUSH
8793: LD_INT 5
8795: PPUSH
8796: LD_INT 0
8798: PPUSH
8799: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8803: LD_VAR 0 2
8807: PPUSH
8808: LD_INT 26
8810: PPUSH
8811: LD_INT 9
8813: PPUSH
8814: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8818: LD_VAR 0 3
8822: PUSH
8823: LD_EXP 35
8827: GREATEREQUAL
8828: PUSH
8829: LD_VAR 0 2
8833: PPUSH
8834: CALL_OW 257
8838: PUSH
8839: LD_INT 3
8841: EQUAL
8842: AND
8843: IFFALSE 8857
// SetClass ( i , 1 ) ;
8845: LD_VAR 0 2
8849: PPUSH
8850: LD_INT 1
8852: PPUSH
8853: CALL_OW 336
// end ;
8857: GO 8771
8859: POP
8860: POP
// end ; if heikeSecondSquad then
8861: LD_EXP 34
8865: IFFALSE 8967
// for i in heikeSecondSquad do
8867: LD_ADDR_VAR 0 2
8871: PUSH
8872: LD_EXP 34
8876: PUSH
8877: FOR_IN
8878: IFFALSE 8965
// begin p := p + 1 ;
8880: LD_ADDR_VAR 0 3
8884: PUSH
8885: LD_VAR 0 3
8889: PUSH
8890: LD_INT 1
8892: PLUS
8893: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8894: LD_VAR 0 2
8898: PPUSH
8899: LD_INT 6
8901: PPUSH
8902: LD_INT 0
8904: PPUSH
8905: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8909: LD_VAR 0 2
8913: PPUSH
8914: LD_INT 26
8916: PPUSH
8917: LD_INT 9
8919: PPUSH
8920: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8924: LD_VAR 0 3
8928: PUSH
8929: LD_EXP 35
8933: GREATEREQUAL
8934: PUSH
8935: LD_VAR 0 2
8939: PPUSH
8940: CALL_OW 257
8944: PUSH
8945: LD_INT 3
8947: EQUAL
8948: AND
8949: IFFALSE 8963
// SetClass ( i , 1 ) ;
8951: LD_VAR 0 2
8955: PPUSH
8956: LD_INT 1
8958: PPUSH
8959: CALL_OW 336
// end ;
8963: GO 8877
8965: POP
8966: POP
// if heikeApes then
8967: LD_EXP 36
8971: IFFALSE 9014
// for i in heikeApes do
8973: LD_ADDR_VAR 0 2
8977: PUSH
8978: LD_EXP 36
8982: PUSH
8983: FOR_IN
8984: IFFALSE 9012
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8986: LD_VAR 0 2
8990: PPUSH
8991: LD_INT 7
8993: PPUSH
8994: LD_INT 0
8996: PPUSH
8997: CALL_OW 49
// ComHold ( i ) ;
9001: LD_VAR 0 2
9005: PPUSH
9006: CALL_OW 140
// end ;
9010: GO 8983
9012: POP
9013: POP
// if Kurt then
9014: LD_EXP 32
9018: IFFALSE 9050
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9020: LD_EXP 32
9024: PPUSH
9025: LD_INT 8
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9035: LD_EXP 32
9039: PPUSH
9040: LD_INT 42
9042: PPUSH
9043: LD_INT 32
9045: PPUSH
9046: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9050: LD_INT 70
9052: PPUSH
9053: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9057: LD_EXP 21
9061: PPUSH
9062: LD_STRING DH-Start-1
9064: PPUSH
9065: CALL_OW 88
// if Givi then
9069: LD_EXP 22
9073: IFFALSE 9336
// begin Say ( Givi , DG-Start-2-5 ) ;
9075: LD_EXP 22
9079: PPUSH
9080: LD_STRING DG-Start-2-5
9082: PPUSH
9083: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9087: LD_EXP 21
9091: PPUSH
9092: LD_STRING DH-Start-3
9094: PPUSH
9095: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9099: LD_EXP 21
9103: PPUSH
9104: LD_STRING DH-Start-4
9106: PPUSH
9107: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9111: LD_EXP 22
9115: PPUSH
9116: LD_STRING DG-Start-5
9118: PPUSH
9119: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9123: LD_EXP 21
9127: PPUSH
9128: LD_STRING DH-Start-6
9130: PPUSH
9131: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9135: LD_EXP 22
9139: PPUSH
9140: LD_STRING DG-Start-7
9142: PPUSH
9143: CALL_OW 88
// if Mike then
9147: LD_EXP 23
9151: IFFALSE 9324
// begin Say ( Mike , DM-Start-8 ) ;
9153: LD_EXP 23
9157: PPUSH
9158: LD_STRING DM-Start-8
9160: PPUSH
9161: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9165: LD_EXP 23
9169: PPUSH
9170: LD_STRING DM-Start-9
9172: PPUSH
9173: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9177: LD_EXP 22
9181: PPUSH
9182: LD_STRING DG-Start-10
9184: PPUSH
9185: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9189: LD_EXP 22
9193: PPUSH
9194: LD_STRING DG-Start-11
9196: PPUSH
9197: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9201: LD_EXP 21
9205: PPUSH
9206: LD_STRING DH-Start-12
9208: PPUSH
9209: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9213: LD_EXP 22
9217: PPUSH
9218: LD_STRING DG-Start-13
9220: PPUSH
9221: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9225: LD_EXP 22
9229: PPUSH
9230: LD_STRING DG-Start-14
9232: PPUSH
9233: CALL_OW 88
// if Kaia then
9237: LD_EXP 26
9241: IFFALSE 9324
// begin Say ( Kaia , DK-Start-15 ) ;
9243: LD_EXP 26
9247: PPUSH
9248: LD_STRING DK-Start-15
9250: PPUSH
9251: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9255: LD_EXP 26
9259: PPUSH
9260: LD_STRING DK-Start-16
9262: PPUSH
9263: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9267: LD_EXP 26
9271: PPUSH
9272: LD_STRING DK-Start-17
9274: PPUSH
9275: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9279: LD_INT 10
9281: PPUSH
9282: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9286: LD_EXP 22
9290: PPUSH
9291: LD_EXP 26
9295: PPUSH
9296: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9300: LD_EXP 22
9304: PPUSH
9305: LD_STRING DG-Start-18
9307: PPUSH
9308: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9312: LD_EXP 26
9316: PPUSH
9317: LD_STRING DK-Start-19
9319: PPUSH
9320: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9324: LD_EXP 21
9328: PPUSH
9329: LD_STRING DH-Start-20
9331: PPUSH
9332: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9336: LD_INT 70
9338: PPUSH
9339: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9343: LD_EXP 29
9347: PPUSH
9348: LD_STRING DShar-Start-21
9350: PPUSH
9351: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9355: LD_EXP 21
9359: PPUSH
9360: LD_STRING DH-Start-22
9362: PPUSH
9363: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9367: LD_EXP 29
9371: PPUSH
9372: LD_STRING DShar-Start-23
9374: PPUSH
9375: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9379: LD_EXP 29
9383: PPUSH
9384: LD_STRING DShar-Start-24
9386: PPUSH
9387: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9391: LD_EXP 29
9395: PPUSH
9396: LD_STRING DShar-Start-25
9398: PPUSH
9399: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9403: LD_EXP 29
9407: PPUSH
9408: LD_STRING DShar-Start-26
9410: PPUSH
9411: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9415: LD_EXP 21
9419: PPUSH
9420: LD_STRING DH-Start-27
9422: PPUSH
9423: CALL_OW 88
// if Kaia then
9427: LD_EXP 26
9431: IFFALSE 9473
// begin ComTurnUnit ( Heike , Kaia ) ;
9433: LD_EXP 21
9437: PPUSH
9438: LD_EXP 26
9442: PPUSH
9443: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9447: LD_EXP 26
9451: PPUSH
9452: LD_STRING DK-Start-28
9454: PPUSH
9455: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9459: LD_EXP 21
9463: PPUSH
9464: LD_STRING DH-Start-29
9466: PPUSH
9467: CALL_OW 88
// end else
9471: GO 9485
// Say ( Heike , DH-Start-a-28 ) ;
9473: LD_EXP 21
9477: PPUSH
9478: LD_STRING DH-Start-a-28
9480: PPUSH
9481: CALL_OW 88
// if Givi then
9485: LD_EXP 22
9489: IFFALSE 9724
// begin ComTurnUnit ( Heike , Givi ) ;
9491: LD_EXP 21
9495: PPUSH
9496: LD_EXP 22
9500: PPUSH
9501: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9505: LD_EXP 22
9509: PPUSH
9510: LD_EXP 21
9514: PPUSH
9515: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9519: LD_EXP 21
9523: PPUSH
9524: LD_STRING DH-Start-30
9526: PPUSH
9527: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9531: LD_EXP 21
9535: PPUSH
9536: LD_STRING DH-Start-31
9538: PPUSH
9539: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9543: LD_EXP 22
9547: PPUSH
9548: LD_STRING DG-Start-32
9550: PPUSH
9551: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9555: LD_EXP 21
9559: PPUSH
9560: LD_STRING DH-Start-33
9562: PPUSH
9563: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9567: LD_EXP 22
9571: PPUSH
9572: LD_STRING DG-Start-34
9574: PPUSH
9575: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9579: LD_EXP 22
9583: PPUSH
9584: LD_STRING DG-Start-35
9586: PPUSH
9587: CALL_OW 88
// if Kurt and not dialogue_skipped then
9591: LD_EXP 32
9595: PUSH
9596: LD_OWVAR 59
9600: NOT
9601: AND
9602: IFFALSE 9633
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9604: LD_EXP 32
9608: PPUSH
9609: LD_INT 28
9611: PPUSH
9612: LD_INT 13
9614: PPUSH
9615: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9619: LD_EXP 32
9623: PPUSH
9624: LD_EXP 21
9628: PPUSH
9629: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9633: LD_EXP 22
9637: PPUSH
9638: LD_STRING DG-Start-36
9640: PPUSH
9641: CALL_OW 88
// if Kurt then
9645: LD_EXP 32
9649: IFFALSE 9722
// begin if not Givi then
9651: LD_EXP 22
9655: NOT
9656: IFFALSE 9672
// Say ( Kurt , DKs-Start-37-a ) else
9658: LD_EXP 32
9662: PPUSH
9663: LD_STRING DKs-Start-37-a
9665: PPUSH
9666: CALL_OW 88
9670: GO 9684
// Say ( Kurt , DKs-Start-37 ) ;
9672: LD_EXP 32
9676: PPUSH
9677: LD_STRING DKs-Start-37
9679: PPUSH
9680: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9684: LD_EXP 32
9688: PPUSH
9689: LD_STRING DKs-Start-38
9691: PPUSH
9692: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9696: LD_EXP 21
9700: PPUSH
9701: LD_EXP 32
9705: PPUSH
9706: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9710: LD_EXP 21
9714: PPUSH
9715: LD_STRING DH-Start-39
9717: PPUSH
9718: CALL_OW 88
// end ; end else
9722: GO 9753
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9724: LD_EXP 34
9728: PPUSH
9729: LD_STRING DArm-Start-a-37
9731: PPUSH
9732: LD_STRING DArf-Start-a-37
9734: PPUSH
9735: CALL 1198 0 3
9739: IFFALSE 9753
// Say ( Heike , DH-Start-39 ) ;
9741: LD_EXP 21
9745: PPUSH
9746: LD_STRING DH-Start-39
9748: PPUSH
9749: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9753: LD_INT 44
9755: PPUSH
9756: LD_INT 25
9758: PPUSH
9759: CALL_OW 428
9763: IFFALSE 9780
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9765: LD_INT 44
9767: PPUSH
9768: LD_INT 25
9770: PPUSH
9771: CALL_OW 428
9775: PPUSH
9776: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9780: LD_EXP 30
9784: PPUSH
9785: LD_INT 5
9787: PPUSH
9788: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9792: LD_EXP 30
9796: PPUSH
9797: LD_INT 44
9799: PPUSH
9800: LD_INT 25
9802: PPUSH
9803: LD_INT 0
9805: PPUSH
9806: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9810: LD_EXP 30
9814: PPUSH
9815: LD_INT 29
9817: PPUSH
9818: LD_INT 12
9820: PPUSH
9821: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9825: LD_INT 35
9827: PPUSH
9828: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9832: LD_OWVAR 59
9836: PUSH
9837: LD_EXP 21
9841: PPUSH
9842: LD_EXP 30
9846: PPUSH
9847: CALL_OW 296
9851: PUSH
9852: LD_INT 8
9854: LESS
9855: OR
9856: PUSH
9857: LD_EXP 30
9861: PPUSH
9862: LD_INT 26
9864: PPUSH
9865: LD_INT 9
9867: PPUSH
9868: CALL_OW 297
9872: PUSH
9873: LD_INT 6
9875: LESS
9876: OR
9877: IFFALSE 9825
// Say ( Olaf , DO-Scout-1 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-1
9886: PPUSH
9887: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9891: LD_EXP 30
9895: PPUSH
9896: LD_EXP 21
9900: PPUSH
9901: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9905: LD_ADDR_VAR 0 2
9909: PUSH
9910: LD_VAR 0 6
9914: PUSH
9915: LD_EXP 34
9919: UNION
9920: PUSH
9921: FOR_IN
9922: IFFALSE 9940
// ComTurnUnit ( i , Olaf ) ;
9924: LD_VAR 0 2
9928: PPUSH
9929: LD_EXP 30
9933: PPUSH
9934: CALL_OW 119
9938: GO 9921
9940: POP
9941: POP
// wait ( 0 0$0.3 ) ;
9942: LD_INT 10
9944: PPUSH
9945: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9949: LD_EXP 21
9953: PPUSH
9954: LD_EXP 30
9958: PPUSH
9959: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9963: LD_EXP 21
9967: PPUSH
9968: LD_EXP 30
9972: PPUSH
9973: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9977: LD_EXP 21
9981: PPUSH
9982: LD_STRING DH-Scout-2
9984: PPUSH
9985: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9989: LD_EXP 30
9993: PPUSH
9994: LD_STRING DO-Scout-3
9996: PPUSH
9997: CALL_OW 88
// if Mike and Givi then
10001: LD_EXP 23
10005: PUSH
10006: LD_EXP 22
10010: AND
10011: IFFALSE 10027
// Say ( Olaf , DO-Scout-4 ) else
10013: LD_EXP 30
10017: PPUSH
10018: LD_STRING DO-Scout-4
10020: PPUSH
10021: CALL_OW 88
10025: GO 10127
// begin if Mike then
10027: LD_EXP 23
10031: IFFALSE 10059
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10033: LD_EXP 30
10037: PPUSH
10038: LD_STRING DO-Scout-a-4
10040: PPUSH
10041: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10045: LD_EXP 21
10049: PPUSH
10050: LD_STRING DH-Scout-a-5
10052: PPUSH
10053: CALL_OW 88
// end else
10057: GO 10127
// if Givi then
10059: LD_EXP 22
10063: IFFALSE 10091
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10065: LD_EXP 30
10069: PPUSH
10070: LD_STRING DO-Scout-b-4
10072: PPUSH
10073: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10077: LD_EXP 21
10081: PPUSH
10082: LD_STRING DH-Scout-b-5
10084: PPUSH
10085: CALL_OW 88
// end else
10089: GO 10127
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10091: LD_EXP 30
10095: PPUSH
10096: LD_STRING DO-Scout-f-4
10098: PPUSH
10099: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10103: LD_EXP 21
10107: PPUSH
10108: LD_STRING DH-Scout-f-5
10110: PPUSH
10111: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10115: LD_EXP 30
10119: PPUSH
10120: LD_STRING DO-Scout-f-6
10122: PPUSH
10123: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10127: LD_EXP 21
10131: PPUSH
10132: LD_STRING DH-Scout-5
10134: PPUSH
10135: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10139: LD_EXP 30
10143: PPUSH
10144: LD_STRING DO-Scout-6
10146: PPUSH
10147: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10151: LD_EXP 30
10155: PPUSH
10156: LD_STRING DO-Scout-7
10158: PPUSH
10159: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10163: LD_EXP 21
10167: PPUSH
10168: LD_STRING DH-Scout-8
10170: PPUSH
10171: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10175: LD_EXP 21
10179: PPUSH
10180: LD_STRING DH-Scout-9
10182: PPUSH
10183: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10187: LD_EXP 30
10191: PPUSH
10192: LD_STRING DO-Scout-10
10194: PPUSH
10195: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10199: LD_EXP 30
10203: PPUSH
10204: LD_STRING DO-Scout-12
10206: PPUSH
10207: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10211: LD_EXP 30
10215: PPUSH
10216: LD_STRING DO-Scout-13
10218: PPUSH
10219: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10223: LD_EXP 30
10227: PPUSH
10228: LD_STRING DO-Scout-14
10230: PPUSH
10231: CALL_OW 88
// if Givi then
10235: LD_EXP 22
10239: IFFALSE 10265
// begin Say ( Givi , DG-Scout-15 ) ;
10241: LD_EXP 22
10245: PPUSH
10246: LD_STRING DG-Scout-15
10248: PPUSH
10249: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10253: LD_EXP 26
10257: PPUSH
10258: LD_STRING DK-Scout-16
10260: PPUSH
10261: CALL_OW 88
// end ; if not dialogue_skipped then
10265: LD_OWVAR 59
10269: NOT
10270: IFFALSE 10391
// begin async ;
10272: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10273: LD_EXP 30
10277: PPUSH
10278: LD_STRING DO-Scout-17
10280: PPUSH
10281: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10285: LD_INT 55
10287: PPUSH
10288: LD_INT 77
10290: PPUSH
10291: LD_INT 2
10293: PPUSH
10294: LD_INT 6
10296: NEG
10297: PPUSH
10298: CALL 1147 0 4
// wait ( 10 ) ;
10302: LD_INT 10
10304: PPUSH
10305: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10309: LD_INT 55
10311: PPUSH
10312: LD_INT 77
10314: PPUSH
10315: CALL_OW 84
// wait ( 0 0$10 ) ;
10319: LD_INT 350
10321: PPUSH
10322: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10326: LD_EXP 30
10330: PPUSH
10331: LD_STRING DO-Scout-18
10333: PPUSH
10334: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10338: LD_INT 204
10340: PPUSH
10341: LD_INT 107
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 12
10349: NEG
10350: PPUSH
10351: CALL 1147 0 4
// wait ( 10 ) ;
10355: LD_INT 10
10357: PPUSH
10358: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10362: LD_INT 204
10364: PPUSH
10365: LD_INT 107
10367: PPUSH
10368: CALL_OW 84
// wait ( 0 0$10 ) ;
10372: LD_INT 350
10374: PPUSH
10375: CALL_OW 67
// sync ;
10379: SYNC
// CenterNowOnUnits ( Heike ) ;
10380: LD_EXP 21
10384: PPUSH
10385: CALL_OW 87
// end else
10389: GO 10425
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10391: LD_INT 55
10393: PPUSH
10394: LD_INT 77
10396: PPUSH
10397: LD_INT 2
10399: PPUSH
10400: LD_INT 6
10402: NEG
10403: PPUSH
10404: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10408: LD_INT 204
10410: PPUSH
10411: LD_INT 107
10413: PPUSH
10414: LD_INT 2
10416: PPUSH
10417: LD_INT 12
10419: NEG
10420: PPUSH
10421: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10425: LD_EXP 30
10429: PPUSH
10430: LD_STRING DO-Scout-19
10432: PPUSH
10433: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10437: LD_EXP 30
10441: PPUSH
10442: LD_STRING DO-Scout-20
10444: PPUSH
10445: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10449: LD_EXP 21
10453: PPUSH
10454: LD_STRING DH-Scout-21
10456: PPUSH
10457: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10461: LD_EXP 21
10465: PPUSH
10466: LD_STRING DH-Scout-22
10468: PPUSH
10469: CALL_OW 88
// InGameOff ;
10473: CALL_OW 9
// if heikeSecondSquad then
10477: LD_EXP 34
10481: IFFALSE 10495
// ForceSleep ( heikeSecondSquad , false ) ;
10483: LD_EXP 34
10487: PPUSH
10488: LD_INT 0
10490: PPUSH
10491: CALL_OW 585
// if Givi then
10495: LD_EXP 22
10499: IFFALSE 10514
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10501: LD_INT 13
10503: PPUSH
10504: LD_INT 2
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10514: LD_STRING Road
10516: PPUSH
10517: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 22
10528: PUSH
10529: LD_INT 5
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 2
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: PUSH
10555: FOR_IN
10556: IFFALSE 10572
// SetSide ( i , 2 ) ;
10558: LD_VAR 0 2
10562: PPUSH
10563: LD_INT 2
10565: PPUSH
10566: CALL_OW 235
10570: GO 10555
10572: POP
10573: POP
// SaveForQuickRestart ;
10574: CALL_OW 22
// music_class := music_auto ;
10578: LD_ADDR_OWVAR 72
10582: PUSH
10583: LD_INT 0
10585: ST_TO_ADDR
// end ;
10586: LD_VAR 0 1
10590: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10591: LD_INT 2
10593: PPUSH
10594: LD_INT 9
10596: PPUSH
10597: CALL_OW 294
10601: IFFALSE 10966
10603: GO 10605
10605: DISABLE
// begin DialogueOn ;
10606: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10610: LD_INT 111
10612: PPUSH
10613: LD_INT 72
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: LD_INT 20
10621: NEG
10622: PPUSH
10623: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10627: LD_INT 111
10629: PPUSH
10630: LD_INT 72
10632: PPUSH
10633: LD_INT 2
10635: PPUSH
10636: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10640: LD_INT 111
10642: PPUSH
10643: LD_INT 72
10645: PPUSH
10646: CALL_OW 86
// if IsOk ( Kamil ) then
10650: LD_EXP 25
10654: PPUSH
10655: CALL_OW 302
10659: IFFALSE 10776
// begin Say ( Kamil , DKam-Cross-1 ) ;
10661: LD_EXP 25
10665: PPUSH
10666: LD_STRING DKam-Cross-1
10668: PPUSH
10669: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10673: LD_EXP 25
10677: PPUSH
10678: LD_STRING DKam-Cross-2
10680: PPUSH
10681: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10685: LD_EXP 25
10689: PPUSH
10690: LD_STRING DKam-Cross-3
10692: PPUSH
10693: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10697: LD_EXP 25
10701: PPUSH
10702: LD_STRING DKam-Cross-4
10704: PPUSH
10705: CALL_OW 88
// if IsOk ( Ibrahim ) then
10709: LD_EXP 24
10713: PPUSH
10714: CALL_OW 302
10718: IFFALSE 10774
// begin if ibrahimJoinedIn04 then
10720: LD_EXP 4
10724: IFFALSE 10738
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10726: LD_EXP 24
10730: PPUSH
10731: LD_STRING DI-Cross-b-5
10733: PPUSH
10734: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10738: LD_EXP 24
10742: PPUSH
10743: LD_STRING DI-Cross-b-6
10745: PPUSH
10746: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10750: LD_EXP 24
10754: PPUSH
10755: LD_STRING DI-Cross-b-7
10757: PPUSH
10758: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10762: LD_EXP 25
10766: PPUSH
10767: LD_STRING DKam-Cross-8
10769: PPUSH
10770: CALL_OW 88
// end ; end else
10774: GO 10934
// if IsOk ( Sophia ) then
10776: LD_EXP 27
10780: PPUSH
10781: CALL_OW 302
10785: IFFALSE 10902
// begin Say ( Sophia , DS-Cross-1 ) ;
10787: LD_EXP 27
10791: PPUSH
10792: LD_STRING DS-Cross-1
10794: PPUSH
10795: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10799: LD_EXP 27
10803: PPUSH
10804: LD_STRING DS-Cross-2
10806: PPUSH
10807: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10811: LD_EXP 27
10815: PPUSH
10816: LD_STRING DS-Cross-3
10818: PPUSH
10819: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10823: LD_EXP 27
10827: PPUSH
10828: LD_STRING DS-Cross-4
10830: PPUSH
10831: CALL_OW 88
// if IsOk ( Ibrahim ) then
10835: LD_EXP 24
10839: PPUSH
10840: CALL_OW 302
10844: IFFALSE 10900
// begin if ibrahimJoinedIn04 then
10846: LD_EXP 4
10850: IFFALSE 10864
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10852: LD_EXP 24
10856: PPUSH
10857: LD_STRING DI-Cross-b-5
10859: PPUSH
10860: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10864: LD_EXP 24
10868: PPUSH
10869: LD_STRING DI-Cross-b-6
10871: PPUSH
10872: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10876: LD_EXP 24
10880: PPUSH
10881: LD_STRING DI-Cross-b-7
10883: PPUSH
10884: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10888: LD_EXP 27
10892: PPUSH
10893: LD_STRING DS-Cross-8
10895: PPUSH
10896: CALL_OW 88
// end ; end else
10900: GO 10934
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10902: LD_EXP 34
10906: PPUSH
10907: LD_INT 50
10909: PUSH
10910: EMPTY
10911: LIST
10912: PPUSH
10913: CALL_OW 72
10917: IFFALSE 10934
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10919: LD_EXP 34
10923: PPUSH
10924: LD_STRING DArm-Cross-c-1
10926: PPUSH
10927: LD_STRING DArf-Cross-c-1
10929: PPUSH
10930: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10934: LD_INT 85
10936: PPUSH
10937: LD_INT 2
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 322
// DialogueOff ;
10947: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10951: LD_STRING Crane
10953: PPUSH
10954: CALL_OW 337
// spottedCrossRoad := true ;
10958: LD_ADDR_EXP 8
10962: PUSH
10963: LD_INT 1
10965: ST_TO_ADDR
// end ;
10966: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10967: LD_INT 22
10969: PUSH
10970: LD_INT 2
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 2
10979: PUSH
10980: LD_INT 30
10982: PUSH
10983: LD_INT 0
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 30
10992: PUSH
10993: LD_INT 1
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PPUSH
11009: CALL_OW 69
11013: PUSH
11014: LD_EXP 26
11018: PPUSH
11019: CALL_OW 302
11023: PUSH
11024: LD_EXP 34
11028: OR
11029: AND
11030: IFFALSE 11242
11032: GO 11034
11034: DISABLE
// begin DialogueOn ;
11035: CALL_OW 6
// if Kaia then
11039: LD_EXP 26
11043: IFFALSE 11056
// CenterNowOnUnits ( Kaia ) else
11045: LD_EXP 26
11049: PPUSH
11050: CALL_OW 87
11054: GO 11065
// CenterNowOnUnits ( Heike ) ;
11056: LD_EXP 21
11060: PPUSH
11061: CALL_OW 87
// if IsOk ( Kaia ) then
11065: LD_EXP 26
11069: PPUSH
11070: CALL_OW 302
11074: IFFALSE 11090
// Say ( Kaia , DK-Cam-1 ) else
11076: LD_EXP 26
11080: PPUSH
11081: LD_STRING DK-Cam-1
11083: PPUSH
11084: CALL_OW 88
11088: GO 11105
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11090: LD_EXP 34
11094: PPUSH
11095: LD_STRING DArm-Cam-1
11097: PPUSH
11098: LD_STRING DArf-Cam-1
11100: PPUSH
11101: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
11105: LD_EXP 21
11109: PPUSH
11110: LD_STRING DH-Cam-2
11112: PPUSH
11113: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11117: LD_EXP 21
11121: PPUSH
11122: LD_STRING DH-Cam-3
11124: PPUSH
11125: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11129: LD_EXP 21
11133: PPUSH
11134: LD_STRING DH-Cam-4
11136: PPUSH
11137: CALL_OW 88
// if IsOk ( Kaia ) then
11141: LD_EXP 26
11145: PPUSH
11146: CALL_OW 302
11150: IFFALSE 11166
// Say ( Kaia , DK-Cam-5 ) else
11152: LD_EXP 26
11156: PPUSH
11157: LD_STRING DK-Cam-5
11159: PPUSH
11160: CALL_OW 88
11164: GO 11181
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11166: LD_EXP 34
11170: PPUSH
11171: LD_STRING DArm-Cam-5
11173: PPUSH
11174: LD_STRING DArf-Cam-5
11176: PPUSH
11177: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11181: LD_EXP 30
11185: PPUSH
11186: LD_STRING DO-Cam-6
11188: PPUSH
11189: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11193: LD_EXP 30
11197: PPUSH
11198: LD_STRING DO-Cam-7
11200: PPUSH
11201: CALL_OW 88
// DialogueOff ;
11205: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11209: LD_STRING Radar
11211: PPUSH
11212: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11216: LD_INT 6
11218: PPUSH
11219: LD_INT 2
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11229: LD_INT 20
11231: PPUSH
11232: LD_INT 2
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 324
// end ;
11242: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11243: LD_INT 22
11245: PUSH
11246: LD_INT 2
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 2
11255: PUSH
11256: LD_INT 34
11258: PUSH
11259: LD_INT 30
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 35
11268: PUSH
11269: LD_INT 30
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: IFFALSE 11301
11291: GO 11293
11293: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11294: LD_STRING RadarDone
11296: PPUSH
11297: CALL_OW 337
11301: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11302: LD_INT 22
11304: PUSH
11305: LD_INT 2
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 34
11314: PUSH
11315: LD_INT 88
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PPUSH
11326: CALL_OW 69
11330: IFFALSE 11342
11332: GO 11334
11334: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11335: LD_STRING CraneDone
11337: PPUSH
11338: CALL_OW 337
11342: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11343: LD_EXP 30
11347: PPUSH
11348: CALL_OW 302
11352: PUSH
11353: LD_EXP 33
11357: PPUSH
11358: CALL_OW 302
11362: AND
11363: PUSH
11364: LD_INT 6
11366: PPUSH
11367: LD_INT 2
11369: PPUSH
11370: CALL_OW 321
11374: PUSH
11375: LD_INT 2
11377: EQUAL
11378: AND
11379: PUSH
11380: LD_EXP 33
11384: PPUSH
11385: LD_EXP 21
11389: PPUSH
11390: CALL_OW 296
11394: PUSH
11395: LD_INT 10
11397: LESS
11398: PUSH
11399: LD_EXP 33
11403: PPUSH
11404: CALL_OW 310
11408: OR
11409: AND
11410: IFFALSE 11624
11412: GO 11414
11414: DISABLE
// begin DialogueOn ;
11415: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11419: LD_EXP 33
11423: PPUSH
11424: LD_STRING DA-RC-1
11426: PPUSH
11427: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11431: LD_EXP 33
11435: PPUSH
11436: LD_STRING DA-RC-2
11438: PPUSH
11439: CALL_OW 88
// if IsOk ( Kaia ) then
11443: LD_EXP 26
11447: PPUSH
11448: CALL_OW 302
11452: IFFALSE 11526
// begin Say ( Kaia , DK-RC-3 ) ;
11454: LD_EXP 26
11458: PPUSH
11459: LD_STRING DK-RC-3
11461: PPUSH
11462: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11466: LD_EXP 33
11470: PPUSH
11471: LD_STRING DA-RC-4
11473: PPUSH
11474: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11478: LD_EXP 26
11482: PPUSH
11483: LD_STRING DK-RC-5
11485: PPUSH
11486: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11490: LD_EXP 33
11494: PPUSH
11495: LD_STRING DA-RC-6
11497: PPUSH
11498: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11502: LD_EXP 26
11506: PPUSH
11507: LD_STRING DK-RC-7
11509: PPUSH
11510: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11514: LD_EXP 33
11518: PPUSH
11519: LD_STRING DA-RC-8
11521: PPUSH
11522: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11526: LD_EXP 21
11530: PPUSH
11531: LD_STRING DH-RC-9
11533: PPUSH
11534: CALL_OW 88
// if IsOk ( Markov ) then
11538: LD_EXP 28
11542: PPUSH
11543: CALL_OW 302
11547: IFFALSE 11575
// begin Say ( Markov , DMar-RC-10 ) ;
11549: LD_EXP 28
11553: PPUSH
11554: LD_STRING DMar-RC-10
11556: PPUSH
11557: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11561: LD_EXP 28
11565: PPUSH
11566: LD_STRING DMar-RC-11
11568: PPUSH
11569: CALL_OW 88
// end else
11573: GO 11587
// begin Say ( Olaf , DO-RC-a-10 ) ;
11575: LD_EXP 30
11579: PPUSH
11580: LD_STRING DO-RC-a-10
11582: PPUSH
11583: CALL_OW 88
// end ; DialogueOff ;
11587: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11591: LD_STRING RemoteControl
11593: PPUSH
11594: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11598: LD_INT 15
11600: PPUSH
11601: LD_INT 2
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11611: LD_INT 22
11613: PPUSH
11614: LD_INT 2
11616: PPUSH
11617: LD_INT 1
11619: PPUSH
11620: CALL_OW 324
// end ;
11624: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11625: LD_INT 12
11627: PPUSH
11628: LD_INT 22
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PPUSH
11638: CALL_OW 70
11642: IFFALSE 12009
11644: GO 11646
11646: DISABLE
11647: LD_INT 0
11649: PPUSH
// begin PrepareWestBase ;
11650: CALL 3916 0 0
// westBaseSpotted := true ;
11654: LD_ADDR_EXP 5
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11662: LD_INT 70
11664: PPUSH
11665: CALL_OW 67
// InGameOn ;
11669: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11673: LD_INT 56
11675: PPUSH
11676: LD_INT 77
11678: PPUSH
11679: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11683: LD_INT 56
11685: PPUSH
11686: LD_INT 77
11688: PPUSH
11689: LD_INT 2
11691: PPUSH
11692: LD_INT 12
11694: NEG
11695: PPUSH
11696: CALL_OW 330
// wait ( 0 0$2 ) ;
11700: LD_INT 70
11702: PPUSH
11703: CALL_OW 67
// DialogueOn ;
11707: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11711: LD_EXP 21
11715: PPUSH
11716: LD_STRING DH-Rbase-1
11718: PPUSH
11719: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11723: LD_EXP 26
11727: PPUSH
11728: LD_STRING DK-Rbase-2
11730: PPUSH
11731: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11735: LD_EXP 26
11739: PPUSH
11740: LD_STRING DK-Rbase-3
11742: PPUSH
11743: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11747: LD_EXP 26
11751: PPUSH
11752: LD_STRING DK-Rbase-4
11754: PPUSH
11755: CALL_OW 88
// DialogueOff ;
11759: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11763: LD_INT 56
11765: PPUSH
11766: LD_INT 77
11768: PPUSH
11769: LD_INT 2
11771: PPUSH
11772: CALL_OW 331
// InGameOff ;
11776: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11780: LD_INT 35
11782: PPUSH
11783: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11787: LD_EXP 42
11791: NOT
11792: PUSH
11793: LD_EXP 43
11797: NOT
11798: AND
11799: IFFALSE 11780
// wait ( 0 0$2 ) ;
11801: LD_INT 70
11803: PPUSH
11804: CALL_OW 67
// if IsOk ( Kaia ) then
11808: LD_EXP 26
11812: PPUSH
11813: CALL_OW 302
11817: IFFALSE 11932
// begin DialogueOn ;
11819: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11823: LD_INT 56
11825: PPUSH
11826: LD_INT 81
11828: PPUSH
11829: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11833: LD_EXP 26
11837: PPUSH
11838: LD_STRING DK-Rbase-5
11840: PPUSH
11841: CALL_OW 88
// if IsOk ( Givi ) then
11845: LD_EXP 22
11849: PPUSH
11850: CALL_OW 302
11854: IFFALSE 11928
// begin Say ( Givi , DG-Rbase-6 ) ;
11856: LD_EXP 22
11860: PPUSH
11861: LD_STRING DG-Rbase-6
11863: PPUSH
11864: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11868: LD_EXP 22
11872: PPUSH
11873: LD_STRING DG-Rbase-7
11875: PPUSH
11876: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11880: LD_EXP 26
11884: PPUSH
11885: LD_STRING DK-Rbase-8
11887: PPUSH
11888: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11892: LD_EXP 22
11896: PPUSH
11897: LD_STRING DG-Rbase-9
11899: PPUSH
11900: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11904: LD_EXP 22
11908: PPUSH
11909: LD_STRING DG-Rbase-10
11911: PPUSH
11912: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11916: LD_EXP 26
11920: PPUSH
11921: LD_STRING DK-Rbase-11
11923: PPUSH
11924: CALL_OW 88
// end ; DialogueOff ;
11928: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11932: LD_ADDR_VAR 0 1
11936: PUSH
11937: LD_INT 12
11939: PPUSH
11940: LD_INT 22
11942: PUSH
11943: LD_INT 3
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 21
11952: PUSH
11953: LD_INT 3
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PPUSH
11964: CALL_OW 70
11968: PUSH
11969: FOR_IN
11970: IFFALSE 11986
// SetSide ( i , 2 ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_INT 2
11979: PPUSH
11980: CALL_OW 235
11984: GO 11969
11986: POP
11987: POP
// westBaseCaptured := true ;
11988: LD_ADDR_EXP 9
11992: PUSH
11993: LD_INT 1
11995: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11996: LD_INT 0
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 324
// end ;
12009: PPOPN 1
12011: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12012: LD_EXP 38
12016: NOT
12017: PUSH
12018: LD_INT 10
12020: PPUSH
12021: CALL_OW 255
12025: PUSH
12026: LD_INT 2
12028: EQUAL
12029: OR
12030: IFFALSE 12167
12032: GO 12034
12034: DISABLE
// begin DialogueOn ;
12035: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12039: LD_EXP 21
12043: PPUSH
12044: LD_STRING DH-Goal-1
12046: PPUSH
12047: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12051: LD_EXP 29
12055: PPUSH
12056: LD_STRING DShar-Goal-2
12058: PPUSH
12059: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12063: LD_EXP 21
12067: PPUSH
12068: LD_STRING DH-Goal-3
12070: PPUSH
12071: CALL_OW 88
// if reinforcementsAllowed then
12075: LD_EXP 14
12079: IFFALSE 12105
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12081: LD_EXP 29
12085: PPUSH
12086: LD_STRING DShar-Goal-4
12088: PPUSH
12089: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12093: LD_EXP 21
12097: PPUSH
12098: LD_STRING DH-Goal-5
12100: PPUSH
12101: CALL_OW 88
// end ; DialogueOff ;
12105: CALL_OW 7
// eastBaseCaptured := true ;
12109: LD_ADDR_EXP 10
12113: PUSH
12114: LD_INT 1
12116: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12117: LD_STRING BaseCaptured
12119: PPUSH
12120: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12124: LD_INT 10
12126: PPUSH
12127: LD_INT 2
12129: PPUSH
12130: CALL_OW 235
// if not reinforcementsAllowed then
12134: LD_EXP 14
12138: NOT
12139: IFFALSE 12143
// exit ;
12141: GO 12167
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12143: LD_INT 21000
12145: PUSH
12146: LD_INT 1050
12148: NEG
12149: PPUSH
12150: LD_INT 1050
12152: PPUSH
12153: CALL_OW 12
12157: PLUS
12158: PPUSH
12159: CALL_OW 67
// PrepareReinforcements ;
12163: CALL 2174 0 0
// end ;
12167: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12168: LD_INT 22
12170: PUSH
12171: LD_INT 2
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 30
12180: PUSH
12181: LD_INT 13
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 69
12196: IFFALSE 12213
12198: GO 12200
12200: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12201: LD_EXP 22
12205: PPUSH
12206: LD_STRING DG-Lab-1
12208: PPUSH
12209: CALL_OW 88
// end ;
12213: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12214: LD_INT 5
12216: PPUSH
12217: LD_INT 2
12219: PPUSH
12220: CALL_OW 321
12224: PUSH
12225: LD_INT 2
12227: EQUAL
12228: PUSH
12229: LD_EXP 22
12233: PPUSH
12234: CALL_OW 302
12238: AND
12239: IFFALSE 12300
12241: GO 12243
12243: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12244: LD_EXP 22
12248: PPUSH
12249: LD_STRING DG-Stim-1
12251: PPUSH
12252: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12256: LD_EXP 21
12260: PPUSH
12261: LD_STRING DH-Stim-2
12263: PPUSH
12264: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12268: LD_EXP 22
12272: PPUSH
12273: LD_STRING DG-Stim-3
12275: PPUSH
12276: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12280: LD_EXP 21
12284: PPUSH
12285: LD_STRING DH-Stim-4
12287: PPUSH
12288: CALL_OW 88
// drugsResearched := true ;
12292: LD_ADDR_EXP 11
12296: PUSH
12297: LD_INT 1
12299: ST_TO_ADDR
// end ;
12300: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12301: LD_EXP 11
12305: IFFALSE 12617
12307: GO 12309
12309: DISABLE
12310: LD_INT 0
12312: PPUSH
12313: PPUSH
12314: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_EXP 21
12324: PUSH
12325: LD_EXP 22
12329: PUSH
12330: LD_EXP 30
12334: PUSH
12335: LD_EXP 28
12339: PUSH
12340: LD_EXP 26
12344: PUSH
12345: LD_EXP 27
12349: PUSH
12350: LD_EXP 32
12354: PUSH
12355: LD_EXP 25
12359: PUSH
12360: LD_EXP 23
12364: PUSH
12365: LD_EXP 24
12369: PUSH
12370: LD_EXP 33
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_STRING H
12395: PUSH
12396: LD_STRING G
12398: PUSH
12399: LD_STRING O
12401: PUSH
12402: LD_STRING Mar
12404: PUSH
12405: LD_STRING K
12407: PUSH
12408: LD_STRING S
12410: PUSH
12411: LD_STRING Ks
12413: PUSH
12414: LD_STRING Kam
12416: PUSH
12417: LD_STRING M
12419: PUSH
12420: LD_STRING I
12422: PUSH
12423: LD_STRING A
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12439: LD_INT 35
12441: PPUSH
12442: CALL_OW 67
// for i := tmp downto 1 do
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: DOUBLE
12452: LD_VAR 0 2
12456: INC
12457: ST_TO_ADDR
12458: LD_INT 1
12460: PUSH
12461: FOR_DOWNTO
12462: IFFALSE 12608
// if GetLives ( tmp [ i ] ) < 250 then
12464: LD_VAR 0 2
12468: PUSH
12469: LD_VAR 0 1
12473: ARRAY
12474: PPUSH
12475: CALL_OW 256
12479: PUSH
12480: LD_INT 250
12482: LESS
12483: IFFALSE 12606
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12485: LD_ADDR_EXP 19
12489: PUSH
12490: LD_EXP 19
12494: PUSH
12495: LD_INT 1
12497: PLUS
12498: ST_TO_ADDR
// DialogueOn ;
12499: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12503: LD_VAR 0 2
12507: PUSH
12508: LD_VAR 0 1
12512: ARRAY
12513: PPUSH
12514: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12518: LD_VAR 0 2
12522: PUSH
12523: LD_VAR 0 1
12527: ARRAY
12528: PPUSH
12529: LD_STRING D
12531: PUSH
12532: LD_VAR 0 3
12536: PUSH
12537: LD_VAR 0 1
12541: ARRAY
12542: STR
12543: PUSH
12544: LD_STRING -Stim-a-1
12546: STR
12547: PPUSH
12548: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: LD_VAR 0 2
12561: PPUSH
12562: LD_VAR 0 1
12566: PPUSH
12567: CALL_OW 3
12571: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_VAR 0 3
12581: PPUSH
12582: LD_VAR 0 1
12586: PPUSH
12587: CALL_OW 3
12591: ST_TO_ADDR
// drugsTested := true ;
12592: LD_ADDR_EXP 6
12596: PUSH
12597: LD_INT 1
12599: ST_TO_ADDR
// DialogueOff ;
12600: CALL_OW 7
// break ;
12604: GO 12608
// end ;
12606: GO 12461
12608: POP
12609: POP
// until not tmp ;
12610: LD_VAR 0 2
12614: NOT
12615: IFFALSE 12439
// end ;
12617: PPOPN 3
12619: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12620: LD_INT 22
12622: PUSH
12623: LD_INT 2
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 34
12632: PUSH
12633: LD_INT 31
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 69
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 33
12661: PUSH
12662: LD_INT 2
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: AND
12678: IFFALSE 12691
12680: GO 12682
12682: DISABLE
// remoteControlConstructed := true ;
12683: LD_ADDR_EXP 12
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
12691: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12692: LD_EXP 12
12696: IFFALSE 12996
12698: GO 12700
12700: DISABLE
12701: LD_INT 0
12703: PPUSH
12704: PPUSH
12705: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12706: LD_ADDR_VAR 0 2
12710: PUSH
12711: LD_EXP 21
12715: PUSH
12716: LD_EXP 22
12720: PUSH
12721: LD_EXP 30
12725: PUSH
12726: LD_EXP 28
12730: PUSH
12731: LD_EXP 26
12735: PUSH
12736: LD_EXP 27
12740: PUSH
12741: LD_EXP 32
12745: PUSH
12746: LD_EXP 25
12750: PUSH
12751: LD_EXP 23
12755: PUSH
12756: LD_EXP 24
12760: PUSH
12761: LD_EXP 33
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12779: LD_ADDR_VAR 0 3
12783: PUSH
12784: LD_STRING H
12786: PUSH
12787: LD_STRING G
12789: PUSH
12790: LD_STRING O
12792: PUSH
12793: LD_STRING Mar
12795: PUSH
12796: LD_STRING K
12798: PUSH
12799: LD_STRING S
12801: PUSH
12802: LD_STRING Ks
12804: PUSH
12805: LD_STRING Kam
12807: PUSH
12808: LD_STRING M
12810: PUSH
12811: LD_STRING I
12813: PUSH
12814: LD_STRING A
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12830: LD_INT 35
12832: PPUSH
12833: CALL_OW 67
// for i := tmp downto 1 do
12837: LD_ADDR_VAR 0 1
12841: PUSH
12842: DOUBLE
12843: LD_VAR 0 2
12847: INC
12848: ST_TO_ADDR
12849: LD_INT 1
12851: PUSH
12852: FOR_DOWNTO
12853: IFFALSE 12987
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12855: LD_VAR 0 2
12859: PUSH
12860: LD_VAR 0 1
12864: ARRAY
12865: PPUSH
12866: CALL_OW 257
12870: PUSH
12871: LD_INT 3
12873: EQUAL
12874: PUSH
12875: LD_VAR 0 2
12879: PUSH
12880: LD_VAR 0 1
12884: ARRAY
12885: PPUSH
12886: CALL_OW 432
12890: AND
12891: IFFALSE 12985
// begin DialogueOn ;
12893: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12897: LD_VAR 0 2
12901: PUSH
12902: LD_VAR 0 1
12906: ARRAY
12907: PPUSH
12908: LD_STRING D
12910: PUSH
12911: LD_VAR 0 3
12915: PUSH
12916: LD_VAR 0 1
12920: ARRAY
12921: STR
12922: PUSH
12923: LD_STRING -RC-a-1
12925: STR
12926: PPUSH
12927: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12931: LD_ADDR_VAR 0 2
12935: PUSH
12936: LD_VAR 0 2
12940: PPUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 3
12950: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12951: LD_ADDR_VAR 0 3
12955: PUSH
12956: LD_VAR 0 3
12960: PPUSH
12961: LD_VAR 0 1
12965: PPUSH
12966: CALL_OW 3
12970: ST_TO_ADDR
// DialogueOff ;
12971: CALL_OW 7
// remoteControlTested := true ;
12975: LD_ADDR_EXP 7
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// break ;
12983: GO 12987
// end ;
12985: GO 12852
12987: POP
12988: POP
// until not tmp ;
12989: LD_VAR 0 2
12993: NOT
12994: IFFALSE 12830
// end ;
12996: PPOPN 3
12998: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12999: LD_EXP 7
13003: PUSH
13004: LD_EXP 28
13008: PPUSH
13009: CALL_OW 302
13013: AND
13014: IFFALSE 13043
13016: GO 13018
13018: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13019: LD_EXP 28
13023: PPUSH
13024: LD_STRING DMar-RC-a-2
13026: PPUSH
13027: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13031: LD_EXP 28
13035: PPUSH
13036: LD_STRING DMar-RC-a-3
13038: PPUSH
13039: CALL_OW 88
// end ;
13043: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13044: LD_EXP 14
13048: PUSH
13049: LD_EXP 21
13053: PPUSH
13054: LD_EXP 33
13058: PPUSH
13059: CALL_OW 296
13063: PUSH
13064: LD_INT 8
13066: LESS
13067: AND
13068: PUSH
13069: LD_INT 2
13071: PPUSH
13072: CALL_OW 463
13076: NOT
13077: AND
13078: PUSH
13079: LD_EXP 33
13083: PPUSH
13084: CALL_OW 302
13088: AND
13089: PUSH
13090: LD_EXP 21
13094: PPUSH
13095: CALL_OW 302
13099: AND
13100: IFFALSE 13278
13102: GO 13104
13104: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13105: LD_EXP 33
13109: PPUSH
13110: CALL_OW 310
13114: NOT
13115: IFFALSE 13131
// ComTurnUnit ( Aviradze , Heike ) ;
13117: LD_EXP 33
13121: PPUSH
13122: LD_EXP 21
13126: PPUSH
13127: CALL_OW 119
// if not IsInUnit ( Heike ) then
13131: LD_EXP 21
13135: PPUSH
13136: CALL_OW 310
13140: NOT
13141: IFFALSE 13157
// ComTurnUnit ( Heike , Aviradze ) ;
13143: LD_EXP 21
13147: PPUSH
13148: LD_EXP 33
13152: PPUSH
13153: CALL_OW 119
// wait ( 0 0$1 ) ;
13157: LD_INT 35
13159: PPUSH
13160: CALL_OW 67
// DialogueOn ;
13164: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13168: LD_EXP 33
13172: PPUSH
13173: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13177: LD_EXP 21
13181: PPUSH
13182: LD_STRING DH-Beria-1
13184: PPUSH
13185: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13189: LD_EXP 33
13193: PPUSH
13194: LD_STRING DA-Beria-2
13196: PPUSH
13197: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13201: LD_EXP 21
13205: PPUSH
13206: LD_STRING DH-Beria-3
13208: PPUSH
13209: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13213: LD_EXP 33
13217: PPUSH
13218: LD_STRING DA-Beria-4
13220: PPUSH
13221: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13225: LD_EXP 33
13229: PPUSH
13230: LD_STRING DA-Beria-5
13232: PPUSH
13233: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13237: LD_EXP 33
13241: PPUSH
13242: LD_STRING DA-Beria-6
13244: PPUSH
13245: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13249: LD_EXP 21
13253: PPUSH
13254: LD_STRING DA-Beria-7
13256: PPUSH
13257: CALL_OW 88
// DialogueOff ;
13261: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13265: LD_INT 52
13267: PPUSH
13268: LD_INT 2
13270: PPUSH
13271: LD_INT 1
13273: PPUSH
13274: CALL_OW 322
// end ;
13278: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13279: LD_EXP 26
13283: PPUSH
13284: CALL_OW 300
13288: PUSH
13289: LD_EXP 26
13293: PPUSH
13294: CALL_OW 256
13298: PUSH
13299: LD_INT 10
13301: LESS
13302: AND
13303: IFFALSE 13340
13305: GO 13307
13307: DISABLE
// begin DialogueOn ;
13308: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13312: LD_EXP 26
13316: PPUSH
13317: LD_STRING DK-Kdeath-1
13319: PPUSH
13320: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13324: LD_EXP 21
13328: PPUSH
13329: LD_STRING DH-Kdeath-2
13331: PPUSH
13332: CALL_OW 88
// DialogueOff ;
13336: CALL_OW 7
// end ;
13340: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13341: LD_INT 2
13343: PPUSH
13344: LD_EXP 39
13348: PPUSH
13349: CALL 1298 0 2
13353: IFFALSE 13370
13355: GO 13357
13357: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13358: LD_EXP 21
13362: PPUSH
13363: LD_STRING DH-Obj-1
13365: PPUSH
13366: CALL_OW 88
13370: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13371: LD_INT 2
13373: PPUSH
13374: LD_EXP 40
13378: PPUSH
13379: CALL 1298 0 2
13383: IFFALSE 13400
13385: GO 13387
13387: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13388: LD_EXP 21
13392: PPUSH
13393: LD_STRING DH-Obj-a-1
13395: PPUSH
13396: CALL_OW 88
13400: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13401: LD_EXP 10
13405: PUSH
13406: LD_OWVAR 1
13410: PUSH
13411: LD_INT 23100
13413: PUSH
13414: LD_INT 22050
13416: PUSH
13417: LD_INT 21000
13419: PUSH
13420: LD_INT 19950
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: LD_OWVAR 67
13433: ARRAY
13434: GREATEREQUAL
13435: OR
13436: IFFALSE 13462
13438: GO 13440
13440: DISABLE
// begin if eastBaseCaptured then
13441: LD_EXP 10
13445: IFFALSE 13454
// wait ( 2 2$00 ) ;
13447: LD_INT 4200
13449: PPUSH
13450: CALL_OW 67
// convoyStarted := true ;
13454: LD_ADDR_EXP 17
13458: PUSH
13459: LD_INT 1
13461: ST_TO_ADDR
// end ;
13462: END
// every 0 0$1 trigger convoyStarted do
13463: LD_EXP 17
13467: IFFALSE 13558
13469: GO 13471
13471: DISABLE
// begin DialogueOn ;
13472: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13476: LD_EXP 29
13480: PPUSH
13481: LD_STRING DShar-Convoy-1
13483: PPUSH
13484: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13488: LD_EXP 21
13492: PPUSH
13493: LD_STRING DH-Convoy-2
13495: PPUSH
13496: CALL_OW 88
// DialogueOff ;
13500: CALL_OW 7
// wait ( 0 0$10 ) ;
13504: LD_INT 350
13506: PPUSH
13507: CALL_OW 67
// PrepareConvoy ;
13511: CALL 4563 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13515: LD_INT 5250
13517: PPUSH
13518: LD_INT 11550
13520: PPUSH
13521: CALL_OW 12
13525: PPUSH
13526: CALL_OW 67
// PrepareConvoy ;
13530: CALL 4563 0 0
// convoyCounter := convoyCounter - 1 ;
13534: LD_ADDR_EXP 16
13538: PUSH
13539: LD_EXP 16
13543: PUSH
13544: LD_INT 1
13546: MINUS
13547: ST_TO_ADDR
// until convoyCounter <= 0 ;
13548: LD_EXP 16
13552: PUSH
13553: LD_INT 0
13555: LESSEQUAL
13556: IFFALSE 13515
// end ;
13558: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13559: LD_EXP 15
13563: PUSH
13564: LD_INT 10
13566: GREATEREQUAL
13567: IFFALSE 13584
13569: GO 13571
13571: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13572: LD_EXP 31
13576: PPUSH
13577: LD_STRING DOm-Fail-1
13579: PPUSH
13580: CALL_OW 94
13584: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13585: LD_EXP 39
13589: NOT
13590: PUSH
13591: LD_EXP 40
13595: NOT
13596: AND
13597: IFFALSE 13609
13599: GO 13601
13601: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13602: LD_STRING RaiderDone
13604: PPUSH
13605: CALL_OW 337
13609: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13610: LD_INT 22
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 33
13622: PUSH
13623: LD_INT 2
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PPUSH
13634: CALL_OW 69
13638: PUSH
13639: LD_INT 3
13641: GREATEREQUAL
13642: PUSH
13643: LD_INT 22
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 34
13655: PUSH
13656: LD_INT 31
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PPUSH
13667: CALL_OW 69
13671: PUSH
13672: LD_INT 2
13674: GREATEREQUAL
13675: AND
13676: IFFALSE 13688
13678: GO 13680
13680: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13681: LD_STRING RemoteControlDone
13683: PPUSH
13684: CALL_OW 337
13688: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13689: LD_EXP 16
13693: PUSH
13694: LD_INT 1
13696: LESS
13697: PUSH
13698: LD_EXP 41
13702: PPUSH
13703: LD_INT 52
13705: PUSH
13706: EMPTY
13707: LIST
13708: PUSH
13709: LD_INT 21
13711: PUSH
13712: LD_INT 1
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PPUSH
13723: CALL_OW 72
13727: NOT
13728: AND
13729: PUSH
13730: LD_OWVAR 1
13734: PUSH
13735: LD_INT 126000
13737: GREATEREQUAL
13738: OR
13739: IFFALSE 14924
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
13748: PPUSH
13749: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13750: LD_STRING ReinforcementsDone
13752: PPUSH
13753: CALL_OW 337
// music_class := music_victory ;
13757: LD_ADDR_OWVAR 72
13761: PUSH
13762: LD_INT 4
13764: ST_TO_ADDR
// if tick <= 45 45$00 then
13765: LD_OWVAR 1
13769: PUSH
13770: LD_INT 94500
13772: LESSEQUAL
13773: IFFALSE 13782
// SetAchievement ( ACH_HSPEED_5 ) ;
13775: LD_STRING ACH_HSPEED_5
13777: PPUSH
13778: CALL_OW 543
// InGameOn ;
13782: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13786: LD_EXP 21
13790: PPUSH
13791: LD_STRING DH-end-1
13793: PPUSH
13794: CALL_OW 88
// wait ( 0 0$2 ) ;
13798: LD_INT 70
13800: PPUSH
13801: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13805: LD_EXP 29
13809: PPUSH
13810: LD_STRING DShar-end-2
13812: PPUSH
13813: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13817: LD_EXP 39
13821: NOT
13822: PUSH
13823: LD_EXP 40
13827: NOT
13828: AND
13829: IFFALSE 13845
// begin Say ( Heike , DH-end-3 ) ;
13831: LD_EXP 21
13835: PPUSH
13836: LD_STRING DH-end-3
13838: PPUSH
13839: CALL_OW 88
// end else
13843: GO 13942
// begin Say ( Heike , DH-end-a-3 ) ;
13845: LD_EXP 21
13849: PPUSH
13850: LD_STRING DH-end-a-3
13852: PPUSH
13853: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13857: LD_EXP 29
13861: PPUSH
13862: LD_STRING DShar-end-a-4
13864: PPUSH
13865: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13869: LD_EXP 21
13873: PPUSH
13874: LD_STRING DH-end-a-5
13876: PPUSH
13877: CALL_OW 88
// InGameOff ;
13881: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13885: LD_INT 35
13887: PPUSH
13888: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13892: LD_INT 22
13894: PUSH
13895: LD_INT 3
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: PUSH
13921: LD_INT 0
13923: EQUAL
13924: IFFALSE 13885
// InGameOn ;
13926: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13930: LD_EXP 21
13934: PPUSH
13935: LD_STRING DH-end-a-6
13937: PPUSH
13938: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13942: LD_EXP 29
13946: PPUSH
13947: LD_STRING DShar-end-3
13949: PPUSH
13950: CALL_OW 94
// if not flamethrowerBuilt then
13954: LD_EXP 20
13958: NOT
13959: IFFALSE 13968
// SetAchievement ( ACH_FIRE ) ;
13961: LD_STRING ACH_FIRE
13963: PPUSH
13964: CALL_OW 543
// if drugsTested then
13968: LD_EXP 6
13972: IFFALSE 13986
// AddMedal ( med1 , 1 ) else
13974: LD_STRING med1
13976: PPUSH
13977: LD_INT 1
13979: PPUSH
13980: CALL_OW 101
13984: GO 14026
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13986: LD_INT 5
13988: PPUSH
13989: LD_INT 2
13991: PPUSH
13992: CALL_OW 321
13996: PUSH
13997: LD_INT 2
13999: EQUAL
14000: IFFALSE 14015
// AddMedal ( med1 , - 1 ) else
14002: LD_STRING med1
14004: PPUSH
14005: LD_INT 1
14007: NEG
14008: PPUSH
14009: CALL_OW 101
14013: GO 14026
// AddMedal ( med1 , - 2 ) ;
14015: LD_STRING med1
14017: PPUSH
14018: LD_INT 2
14020: NEG
14021: PPUSH
14022: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14026: LD_INT 22
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 33
14038: PUSH
14039: LD_INT 2
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 69
14054: PUSH
14055: LD_INT 3
14057: GREATEREQUAL
14058: PUSH
14059: LD_INT 22
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 34
14071: PUSH
14072: LD_INT 31
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 69
14087: PUSH
14088: LD_INT 1
14090: GREATEREQUAL
14091: AND
14092: IFFALSE 14106
// AddMedal ( med2 , 1 ) else
14094: LD_STRING med2
14096: PPUSH
14097: LD_INT 1
14099: PPUSH
14100: CALL_OW 101
14104: GO 14117
// AddMedal ( med2 , - 1 ) ;
14106: LD_STRING med2
14108: PPUSH
14109: LD_INT 1
14111: NEG
14112: PPUSH
14113: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14117: LD_EXP 15
14121: PUSH
14122: LD_INT 10
14124: PUSH
14125: LD_INT 8
14127: PUSH
14128: LD_INT 6
14130: PUSH
14131: LD_INT 5
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: PUSH
14140: LD_OWVAR 67
14144: ARRAY
14145: LESS
14146: IFFALSE 14160
// AddMedal ( med3 , 1 ) else
14148: LD_STRING med3
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 101
14158: GO 14171
// AddMedal ( med3 , - 1 ) ;
14160: LD_STRING med3
14162: PPUSH
14163: LD_INT 1
14165: NEG
14166: PPUSH
14167: CALL_OW 101
// GiveMedals ( MAIN ) ;
14171: LD_STRING MAIN
14173: PPUSH
14174: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14178: LD_INT 22
14180: PUSH
14181: LD_INT 2
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 23
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: PPUSH
14213: CALL_OW 69
14217: PPUSH
14218: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14222: LD_EXP 15
14226: PPUSH
14227: LD_STRING 05_ConvoySavedCounter
14229: PPUSH
14230: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14234: LD_EXP 13
14238: PPUSH
14239: LD_STRING 05_Radar
14241: PPUSH
14242: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14246: LD_EXP 6
14250: PPUSH
14251: LD_STRING 05_DrugsTested
14253: PPUSH
14254: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14258: LD_INT 22
14260: PUSH
14261: LD_INT 2
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 33
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 69
14286: PUSH
14287: LD_INT 3
14289: GREATEREQUAL
14290: PUSH
14291: LD_INT 22
14293: PUSH
14294: LD_INT 2
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: LD_INT 34
14303: PUSH
14304: LD_INT 31
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PPUSH
14315: CALL_OW 69
14319: PUSH
14320: LD_INT 2
14322: GREATEREQUAL
14323: AND
14324: PPUSH
14325: LD_STRING 05_RemoteControl
14327: PPUSH
14328: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14332: LD_ADDR_VAR 0 2
14336: PUSH
14337: LD_INT 22
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 21
14349: PUSH
14350: LD_INT 2
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// if tmp then
14366: LD_VAR 0 2
14370: IFFALSE 14489
// begin vehs := [ ] ;
14372: LD_ADDR_VAR 0 4
14376: PUSH
14377: EMPTY
14378: ST_TO_ADDR
// for i in tmp do
14379: LD_ADDR_VAR 0 1
14383: PUSH
14384: LD_VAR 0 2
14388: PUSH
14389: FOR_IN
14390: IFFALSE 14475
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14392: LD_ADDR_VAR 0 4
14396: PUSH
14397: LD_VAR 0 4
14401: PPUSH
14402: LD_VAR 0 4
14406: PUSH
14407: LD_INT 1
14409: PLUS
14410: PPUSH
14411: LD_VAR 0 1
14415: PPUSH
14416: CALL_OW 265
14420: PUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 262
14430: PUSH
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 263
14440: PUSH
14441: LD_VAR 0 1
14445: PPUSH
14446: CALL_OW 264
14450: PUSH
14451: LD_VAR 0 1
14455: PPUSH
14456: CALL_OW 248
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 1
14472: ST_TO_ADDR
14473: GO 14389
14475: POP
14476: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14477: LD_VAR 0 4
14481: PPUSH
14482: LD_STRING 05_Vehicles
14484: PPUSH
14485: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14489: LD_ADDR_VAR 0 2
14493: PUSH
14494: LD_INT 25
14496: PPUSH
14497: LD_INT 21
14499: PUSH
14500: LD_INT 3
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: CALL_OW 70
14511: ST_TO_ADDR
// tmp2 := [ ] ;
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: EMPTY
14518: ST_TO_ADDR
// if tmp then
14519: LD_VAR 0 2
14523: IFFALSE 14676
// begin for i in tmp do
14525: LD_ADDR_VAR 0 1
14529: PUSH
14530: LD_VAR 0 2
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14662
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14538: LD_ADDR_VAR 0 3
14542: PUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: LD_VAR 0 1
14552: PPUSH
14553: CALL_OW 266
14557: PUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 250
14567: PUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL_OW 251
14577: PUSH
14578: LD_VAR 0 1
14582: PPUSH
14583: CALL_OW 254
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 248
14597: PUSH
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 267
14607: PUSH
14608: LD_VAR 0 1
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 268
14620: PUSH
14621: LD_VAR 0 1
14625: PPUSH
14626: LD_INT 2
14628: PPUSH
14629: CALL_OW 268
14633: PUSH
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 269
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PPUSH
14655: CALL 72387 0 2
14659: ST_TO_ADDR
14660: GO 14535
14662: POP
14663: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14664: LD_VAR 0 3
14668: PPUSH
14669: LD_STRING 05_Buildings
14671: PPUSH
14672: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14676: LD_EXP 21
14680: PPUSH
14681: LD_STRING 05_Heike
14683: PPUSH
14684: CALL_OW 38
// if Aviradze then
14688: LD_EXP 33
14692: IFFALSE 14706
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14694: LD_EXP 33
14698: PPUSH
14699: LD_STRING 05_Aviradze
14701: PPUSH
14702: CALL_OW 38
// if Ibrahim then
14706: LD_EXP 24
14710: IFFALSE 14724
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14712: LD_EXP 24
14716: PPUSH
14717: LD_STRING 05_Ibrahim
14719: PPUSH
14720: CALL_OW 38
// if Kamil then
14724: LD_EXP 25
14728: IFFALSE 14742
// SaveCharacters ( Kamil , 05_Kamil ) ;
14730: LD_EXP 25
14734: PPUSH
14735: LD_STRING 05_Kamil
14737: PPUSH
14738: CALL_OW 38
// if Sophia then
14742: LD_EXP 27
14746: IFFALSE 14760
// SaveCharacters ( Sophia , 05_Sophia ) ;
14748: LD_EXP 27
14752: PPUSH
14753: LD_STRING 05_Sophia
14755: PPUSH
14756: CALL_OW 38
// if Kaia then
14760: LD_EXP 26
14764: IFFALSE 14778
// SaveCharacters ( Kaia , 05_Kaia ) ;
14766: LD_EXP 26
14770: PPUSH
14771: LD_STRING 05_Kaia
14773: PPUSH
14774: CALL_OW 38
// if Givi then
14778: LD_EXP 22
14782: IFFALSE 14796
// SaveCharacters ( Givi , 05_Givi ) ;
14784: LD_EXP 22
14788: PPUSH
14789: LD_STRING 05_Givi
14791: PPUSH
14792: CALL_OW 38
// if Mike then
14796: LD_EXP 23
14800: IFFALSE 14814
// SaveCharacters ( Mike , 05_Mike ) ;
14802: LD_EXP 23
14806: PPUSH
14807: LD_STRING 05_Mike
14809: PPUSH
14810: CALL_OW 38
// if Markov then
14814: LD_EXP 28
14818: IFFALSE 14832
// SaveCharacters ( Markov , 05_Markov ) ;
14820: LD_EXP 28
14824: PPUSH
14825: LD_STRING 05_Markov
14827: PPUSH
14828: CALL_OW 38
// if Kurt then
14832: LD_EXP 32
14836: IFFALSE 14850
// SaveCharacters ( Kurt , 05_Kurt ) ;
14838: LD_EXP 32
14842: PPUSH
14843: LD_STRING 05_Kurt
14845: PPUSH
14846: CALL_OW 38
// if heikeSecondSquad then
14850: LD_EXP 34
14854: IFFALSE 14868
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14856: LD_EXP 34
14860: PPUSH
14861: LD_STRING 05_others
14863: PPUSH
14864: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 23
14885: PUSH
14886: LD_INT 0
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: ST_TO_ADDR
// if tmp then
14902: LD_VAR 0 2
14906: IFFALSE 14920
// SaveCharacters ( tmp , 05_apes ) ;
14908: LD_VAR 0 2
14912: PPUSH
14913: LD_STRING 05_apes
14915: PPUSH
14916: CALL_OW 38
// YouWin ;
14920: CALL_OW 103
// end ; end_of_file
14924: PPOPN 4
14926: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14927: LD_EXP 9
14931: PUSH
14932: LD_INT 13
14934: PPUSH
14935: LD_INT 1
14937: PPUSH
14938: CALL_OW 287
14942: PUSH
14943: LD_INT 25
14945: LESS
14946: AND
14947: IFFALSE 14974
14949: GO 14951
14951: DISABLE
// begin enable ;
14952: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14953: LD_INT 1
14955: PPUSH
14956: LD_INT 5
14958: PPUSH
14959: CALL_OW 12
14963: PPUSH
14964: LD_INT 13
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 55
// end ; end_of_file
14974: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14975: LD_INT 0
14977: PPUSH
14978: PPUSH
14979: PPUSH
14980: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 264
14990: PUSH
14991: LD_INT 91
14993: EQUAL
14994: IFFALSE 15066
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14996: LD_INT 68
14998: PPUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: CALL_OW 255
15008: PPUSH
15009: CALL_OW 321
15013: PUSH
15014: LD_INT 2
15016: EQUAL
15017: IFFALSE 15029
// eff := 70 else
15019: LD_ADDR_VAR 0 4
15023: PUSH
15024: LD_INT 70
15026: ST_TO_ADDR
15027: GO 15037
// eff := 30 ;
15029: LD_ADDR_VAR 0 4
15033: PUSH
15034: LD_INT 30
15036: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL_OW 250
15046: PPUSH
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 251
15056: PPUSH
15057: LD_VAR 0 4
15061: PPUSH
15062: CALL_OW 495
// end ; end ;
15066: LD_VAR 0 2
15070: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15071: LD_INT 0
15073: PPUSH
// end ;
15074: LD_VAR 0 4
15078: RET
// export function SOS_Command ( cmd ) ; begin
15079: LD_INT 0
15081: PPUSH
// end ;
15082: LD_VAR 0 2
15086: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15087: LD_INT 0
15089: PPUSH
// end ;
15090: LD_VAR 0 6
15094: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15095: LD_INT 0
15097: PPUSH
15098: PPUSH
// if not vehicle or not factory then
15099: LD_VAR 0 1
15103: NOT
15104: PUSH
15105: LD_VAR 0 2
15109: NOT
15110: OR
15111: IFFALSE 15115
// exit ;
15113: GO 15346
// if factoryWaypoints >= factory then
15115: LD_EXP 113
15119: PUSH
15120: LD_VAR 0 2
15124: GREATEREQUAL
15125: IFFALSE 15346
// if factoryWaypoints [ factory ] then
15127: LD_EXP 113
15131: PUSH
15132: LD_VAR 0 2
15136: ARRAY
15137: IFFALSE 15346
// begin if GetControl ( vehicle ) = control_manual then
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 263
15148: PUSH
15149: LD_INT 1
15151: EQUAL
15152: IFFALSE 15233
// begin driver := IsDrivenBy ( vehicle ) ;
15154: LD_ADDR_VAR 0 4
15158: PUSH
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 311
15168: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15169: LD_VAR 0 4
15173: PPUSH
15174: LD_EXP 113
15178: PUSH
15179: LD_VAR 0 2
15183: ARRAY
15184: PUSH
15185: LD_INT 3
15187: ARRAY
15188: PPUSH
15189: LD_EXP 113
15193: PUSH
15194: LD_VAR 0 2
15198: ARRAY
15199: PUSH
15200: LD_INT 4
15202: ARRAY
15203: PPUSH
15204: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15208: LD_VAR 0 4
15212: PPUSH
15213: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
15217: LD_VAR 0 4
15221: PPUSH
15222: LD_VAR 0 2
15226: PPUSH
15227: CALL_OW 180
// end else
15231: GO 15346
// if GetControl ( vehicle ) = control_remote then
15233: LD_VAR 0 1
15237: PPUSH
15238: CALL_OW 263
15242: PUSH
15243: LD_INT 2
15245: EQUAL
15246: IFFALSE 15307
// begin wait ( 0 0$2 ) ;
15248: LD_INT 70
15250: PPUSH
15251: CALL_OW 67
// if Connect ( vehicle ) then
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL 43006 0 1
15264: IFFALSE 15305
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_EXP 113
15275: PUSH
15276: LD_VAR 0 2
15280: ARRAY
15281: PUSH
15282: LD_INT 3
15284: ARRAY
15285: PPUSH
15286: LD_EXP 113
15290: PUSH
15291: LD_VAR 0 2
15295: ARRAY
15296: PUSH
15297: LD_INT 4
15299: ARRAY
15300: PPUSH
15301: CALL_OW 171
// end else
15305: GO 15346
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15307: LD_VAR 0 1
15311: PPUSH
15312: LD_EXP 113
15316: PUSH
15317: LD_VAR 0 2
15321: ARRAY
15322: PUSH
15323: LD_INT 3
15325: ARRAY
15326: PPUSH
15327: LD_EXP 113
15331: PUSH
15332: LD_VAR 0 2
15336: ARRAY
15337: PUSH
15338: LD_INT 4
15340: ARRAY
15341: PPUSH
15342: CALL_OW 171
// end ; end ;
15346: LD_VAR 0 3
15350: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15351: LD_INT 0
15353: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15354: LD_VAR 0 1
15358: PUSH
15359: LD_INT 250
15361: EQUAL
15362: PUSH
15363: LD_VAR 0 2
15367: PPUSH
15368: CALL_OW 264
15372: PUSH
15373: LD_INT 81
15375: EQUAL
15376: AND
15377: IFFALSE 15398
// MinerPlaceMine ( unit , x , y ) ;
15379: LD_VAR 0 2
15383: PPUSH
15384: LD_VAR 0 4
15388: PPUSH
15389: LD_VAR 0 5
15393: PPUSH
15394: CALL 17783 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15398: LD_VAR 0 1
15402: PUSH
15403: LD_INT 251
15405: EQUAL
15406: PUSH
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 264
15416: PUSH
15417: LD_INT 81
15419: EQUAL
15420: AND
15421: IFFALSE 15442
// MinerDetonateMine ( unit , x , y ) ;
15423: LD_VAR 0 2
15427: PPUSH
15428: LD_VAR 0 4
15432: PPUSH
15433: LD_VAR 0 5
15437: PPUSH
15438: CALL 18058 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15442: LD_VAR 0 1
15446: PUSH
15447: LD_INT 252
15449: EQUAL
15450: PUSH
15451: LD_VAR 0 2
15455: PPUSH
15456: CALL_OW 264
15460: PUSH
15461: LD_INT 81
15463: EQUAL
15464: AND
15465: IFFALSE 15486
// MinerCreateMinefield ( unit , x , y ) ;
15467: LD_VAR 0 2
15471: PPUSH
15472: LD_VAR 0 4
15476: PPUSH
15477: LD_VAR 0 5
15481: PPUSH
15482: CALL 18475 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15486: LD_VAR 0 1
15490: PUSH
15491: LD_INT 253
15493: EQUAL
15494: PUSH
15495: LD_VAR 0 2
15499: PPUSH
15500: CALL_OW 257
15504: PUSH
15505: LD_INT 5
15507: EQUAL
15508: AND
15509: IFFALSE 15530
// ComBinocular ( unit , x , y ) ;
15511: LD_VAR 0 2
15515: PPUSH
15516: LD_VAR 0 4
15520: PPUSH
15521: LD_VAR 0 5
15525: PPUSH
15526: CALL 18844 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15530: LD_VAR 0 1
15534: PUSH
15535: LD_INT 254
15537: EQUAL
15538: PUSH
15539: LD_VAR 0 2
15543: PPUSH
15544: CALL_OW 264
15548: PUSH
15549: LD_INT 99
15551: EQUAL
15552: AND
15553: PUSH
15554: LD_VAR 0 3
15558: PPUSH
15559: CALL_OW 263
15563: PUSH
15564: LD_INT 3
15566: EQUAL
15567: AND
15568: IFFALSE 15584
// HackDestroyVehicle ( unit , selectedUnit ) ;
15570: LD_VAR 0 2
15574: PPUSH
15575: LD_VAR 0 3
15579: PPUSH
15580: CALL 17147 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15584: LD_VAR 0 1
15588: PUSH
15589: LD_INT 255
15591: EQUAL
15592: PUSH
15593: LD_VAR 0 2
15597: PPUSH
15598: CALL_OW 264
15602: PUSH
15603: LD_INT 14
15605: PUSH
15606: LD_INT 53
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: IN
15613: AND
15614: PUSH
15615: LD_VAR 0 4
15619: PPUSH
15620: LD_VAR 0 5
15624: PPUSH
15625: CALL_OW 488
15629: AND
15630: IFFALSE 15654
// CutTreeXYR ( unit , x , y , 12 ) ;
15632: LD_VAR 0 2
15636: PPUSH
15637: LD_VAR 0 4
15641: PPUSH
15642: LD_VAR 0 5
15646: PPUSH
15647: LD_INT 12
15649: PPUSH
15650: CALL 15717 0 4
// if cmd = 256 then
15654: LD_VAR 0 1
15658: PUSH
15659: LD_INT 256
15661: EQUAL
15662: IFFALSE 15683
// SetFactoryWaypoint ( unit , x , y ) ;
15664: LD_VAR 0 2
15668: PPUSH
15669: LD_VAR 0 4
15673: PPUSH
15674: LD_VAR 0 5
15678: PPUSH
15679: CALL 33755 0 3
// if cmd = 257 then
15683: LD_VAR 0 1
15687: PUSH
15688: LD_INT 257
15690: EQUAL
15691: IFFALSE 15712
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15693: LD_VAR 0 2
15697: PPUSH
15698: LD_VAR 0 4
15702: PPUSH
15703: LD_VAR 0 5
15707: PPUSH
15708: CALL 34117 0 3
// end ;
15712: LD_VAR 0 6
15716: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15717: LD_INT 0
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
15723: PPUSH
15724: PPUSH
15725: PPUSH
15726: PPUSH
15727: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15728: LD_VAR 0 1
15732: NOT
15733: PUSH
15734: LD_VAR 0 2
15738: PPUSH
15739: LD_VAR 0 3
15743: PPUSH
15744: CALL_OW 488
15748: NOT
15749: OR
15750: PUSH
15751: LD_VAR 0 4
15755: NOT
15756: OR
15757: IFFALSE 15761
// exit ;
15759: GO 16101
// list := [ ] ;
15761: LD_ADDR_VAR 0 13
15765: PUSH
15766: EMPTY
15767: ST_TO_ADDR
// if x - r < 0 then
15768: LD_VAR 0 2
15772: PUSH
15773: LD_VAR 0 4
15777: MINUS
15778: PUSH
15779: LD_INT 0
15781: LESS
15782: IFFALSE 15794
// min_x := 0 else
15784: LD_ADDR_VAR 0 7
15788: PUSH
15789: LD_INT 0
15791: ST_TO_ADDR
15792: GO 15810
// min_x := x - r ;
15794: LD_ADDR_VAR 0 7
15798: PUSH
15799: LD_VAR 0 2
15803: PUSH
15804: LD_VAR 0 4
15808: MINUS
15809: ST_TO_ADDR
// if y - r < 0 then
15810: LD_VAR 0 3
15814: PUSH
15815: LD_VAR 0 4
15819: MINUS
15820: PUSH
15821: LD_INT 0
15823: LESS
15824: IFFALSE 15836
// min_y := 0 else
15826: LD_ADDR_VAR 0 8
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
15834: GO 15852
// min_y := y - r ;
15836: LD_ADDR_VAR 0 8
15840: PUSH
15841: LD_VAR 0 3
15845: PUSH
15846: LD_VAR 0 4
15850: MINUS
15851: ST_TO_ADDR
// max_x := x + r ;
15852: LD_ADDR_VAR 0 9
15856: PUSH
15857: LD_VAR 0 2
15861: PUSH
15862: LD_VAR 0 4
15866: PLUS
15867: ST_TO_ADDR
// max_y := y + r ;
15868: LD_ADDR_VAR 0 10
15872: PUSH
15873: LD_VAR 0 3
15877: PUSH
15878: LD_VAR 0 4
15882: PLUS
15883: ST_TO_ADDR
// for _x = min_x to max_x do
15884: LD_ADDR_VAR 0 11
15888: PUSH
15889: DOUBLE
15890: LD_VAR 0 7
15894: DEC
15895: ST_TO_ADDR
15896: LD_VAR 0 9
15900: PUSH
15901: FOR_TO
15902: IFFALSE 16019
// for _y = min_y to max_y do
15904: LD_ADDR_VAR 0 12
15908: PUSH
15909: DOUBLE
15910: LD_VAR 0 8
15914: DEC
15915: ST_TO_ADDR
15916: LD_VAR 0 10
15920: PUSH
15921: FOR_TO
15922: IFFALSE 16015
// begin if not ValidHex ( _x , _y ) then
15924: LD_VAR 0 11
15928: PPUSH
15929: LD_VAR 0 12
15933: PPUSH
15934: CALL_OW 488
15938: NOT
15939: IFFALSE 15943
// continue ;
15941: GO 15921
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15943: LD_VAR 0 11
15947: PPUSH
15948: LD_VAR 0 12
15952: PPUSH
15953: CALL_OW 351
15957: PUSH
15958: LD_VAR 0 11
15962: PPUSH
15963: LD_VAR 0 12
15967: PPUSH
15968: CALL_OW 554
15972: AND
15973: IFFALSE 16013
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15975: LD_ADDR_VAR 0 13
15979: PUSH
15980: LD_VAR 0 13
15984: PPUSH
15985: LD_VAR 0 13
15989: PUSH
15990: LD_INT 1
15992: PLUS
15993: PPUSH
15994: LD_VAR 0 11
15998: PUSH
15999: LD_VAR 0 12
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PPUSH
16008: CALL_OW 2
16012: ST_TO_ADDR
// end ;
16013: GO 15921
16015: POP
16016: POP
16017: GO 15901
16019: POP
16020: POP
// if not list then
16021: LD_VAR 0 13
16025: NOT
16026: IFFALSE 16030
// exit ;
16028: GO 16101
// for i in list do
16030: LD_ADDR_VAR 0 6
16034: PUSH
16035: LD_VAR 0 13
16039: PUSH
16040: FOR_IN
16041: IFFALSE 16099
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16043: LD_VAR 0 1
16047: PPUSH
16048: LD_STRING M
16050: PUSH
16051: LD_VAR 0 6
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: PUSH
16060: LD_VAR 0 6
16064: PUSH
16065: LD_INT 2
16067: ARRAY
16068: PUSH
16069: LD_INT 0
16071: PUSH
16072: LD_INT 0
16074: PUSH
16075: LD_INT 0
16077: PUSH
16078: LD_INT 0
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: PUSH
16090: EMPTY
16091: LIST
16092: PPUSH
16093: CALL_OW 447
16097: GO 16040
16099: POP
16100: POP
// end ;
16101: LD_VAR 0 5
16105: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16106: LD_EXP 44
16110: NOT
16111: IFFALSE 16161
16113: GO 16115
16115: DISABLE
// begin initHack := true ;
16116: LD_ADDR_EXP 44
16120: PUSH
16121: LD_INT 1
16123: ST_TO_ADDR
// hackTanks := [ ] ;
16124: LD_ADDR_EXP 45
16128: PUSH
16129: EMPTY
16130: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16131: LD_ADDR_EXP 46
16135: PUSH
16136: EMPTY
16137: ST_TO_ADDR
// hackLimit := 3 ;
16138: LD_ADDR_EXP 47
16142: PUSH
16143: LD_INT 3
16145: ST_TO_ADDR
// hackDist := 12 ;
16146: LD_ADDR_EXP 48
16150: PUSH
16151: LD_INT 12
16153: ST_TO_ADDR
// hackCounter := [ ] ;
16154: LD_ADDR_EXP 49
16158: PUSH
16159: EMPTY
16160: ST_TO_ADDR
// end ;
16161: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16162: LD_EXP 44
16166: PUSH
16167: LD_INT 34
16169: PUSH
16170: LD_INT 99
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 69
16181: AND
16182: IFFALSE 16435
16184: GO 16186
16186: DISABLE
16187: LD_INT 0
16189: PPUSH
16190: PPUSH
// begin enable ;
16191: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16192: LD_ADDR_VAR 0 1
16196: PUSH
16197: LD_INT 34
16199: PUSH
16200: LD_INT 99
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 69
16211: PUSH
16212: FOR_IN
16213: IFFALSE 16433
// begin if not i in hackTanks then
16215: LD_VAR 0 1
16219: PUSH
16220: LD_EXP 45
16224: IN
16225: NOT
16226: IFFALSE 16309
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16228: LD_ADDR_EXP 45
16232: PUSH
16233: LD_EXP 45
16237: PPUSH
16238: LD_EXP 45
16242: PUSH
16243: LD_INT 1
16245: PLUS
16246: PPUSH
16247: LD_VAR 0 1
16251: PPUSH
16252: CALL_OW 1
16256: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16257: LD_ADDR_EXP 46
16261: PUSH
16262: LD_EXP 46
16266: PPUSH
16267: LD_EXP 46
16271: PUSH
16272: LD_INT 1
16274: PLUS
16275: PPUSH
16276: EMPTY
16277: PPUSH
16278: CALL_OW 1
16282: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16283: LD_ADDR_EXP 49
16287: PUSH
16288: LD_EXP 49
16292: PPUSH
16293: LD_EXP 49
16297: PUSH
16298: LD_INT 1
16300: PLUS
16301: PPUSH
16302: EMPTY
16303: PPUSH
16304: CALL_OW 1
16308: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16309: LD_VAR 0 1
16313: PPUSH
16314: CALL_OW 302
16318: NOT
16319: IFFALSE 16332
// begin HackUnlinkAll ( i ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL 16438 0 1
// continue ;
16330: GO 16212
// end ; HackCheckCapturedStatus ( i ) ;
16332: LD_VAR 0 1
16336: PPUSH
16337: CALL 16881 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16341: LD_ADDR_VAR 0 2
16345: PUSH
16346: LD_INT 81
16348: PUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 255
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 33
16365: PUSH
16366: LD_INT 3
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 91
16375: PUSH
16376: LD_VAR 0 1
16380: PUSH
16381: LD_EXP 48
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 50
16393: PUSH
16394: EMPTY
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: PPUSH
16403: CALL_OW 69
16407: ST_TO_ADDR
// if not tmp then
16408: LD_VAR 0 2
16412: NOT
16413: IFFALSE 16417
// continue ;
16415: GO 16212
// HackLink ( i , tmp ) ;
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL 16574 0 2
// end ;
16431: GO 16212
16433: POP
16434: POP
// end ;
16435: PPOPN 2
16437: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16438: LD_INT 0
16440: PPUSH
16441: PPUSH
16442: PPUSH
// if not hack in hackTanks then
16443: LD_VAR 0 1
16447: PUSH
16448: LD_EXP 45
16452: IN
16453: NOT
16454: IFFALSE 16458
// exit ;
16456: GO 16569
// index := GetElementIndex ( hackTanks , hack ) ;
16458: LD_ADDR_VAR 0 4
16462: PUSH
16463: LD_EXP 45
16467: PPUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: CALL 39813 0 2
16477: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16478: LD_EXP 46
16482: PUSH
16483: LD_VAR 0 4
16487: ARRAY
16488: IFFALSE 16569
// begin for i in hackTanksCaptured [ index ] do
16490: LD_ADDR_VAR 0 3
16494: PUSH
16495: LD_EXP 46
16499: PUSH
16500: LD_VAR 0 4
16504: ARRAY
16505: PUSH
16506: FOR_IN
16507: IFFALSE 16533
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16509: LD_VAR 0 3
16513: PUSH
16514: LD_INT 1
16516: ARRAY
16517: PPUSH
16518: LD_VAR 0 3
16522: PUSH
16523: LD_INT 2
16525: ARRAY
16526: PPUSH
16527: CALL_OW 235
16531: GO 16506
16533: POP
16534: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16535: LD_ADDR_EXP 46
16539: PUSH
16540: LD_EXP 46
16544: PPUSH
16545: LD_VAR 0 4
16549: PPUSH
16550: EMPTY
16551: PPUSH
16552: CALL_OW 1
16556: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16557: LD_VAR 0 1
16561: PPUSH
16562: LD_INT 0
16564: PPUSH
16565: CALL_OW 505
// end ; end ;
16569: LD_VAR 0 2
16573: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16574: LD_INT 0
16576: PPUSH
16577: PPUSH
16578: PPUSH
// if not hack in hackTanks or not vehicles then
16579: LD_VAR 0 1
16583: PUSH
16584: LD_EXP 45
16588: IN
16589: NOT
16590: PUSH
16591: LD_VAR 0 2
16595: NOT
16596: OR
16597: IFFALSE 16601
// exit ;
16599: GO 16876
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_VAR 0 2
16615: PPUSH
16616: LD_INT 1
16618: PPUSH
16619: LD_INT 1
16621: PPUSH
16622: CALL 40463 0 4
16626: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16627: LD_ADDR_VAR 0 5
16631: PUSH
16632: LD_EXP 45
16636: PPUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL 39813 0 2
16646: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16647: LD_EXP 46
16651: PUSH
16652: LD_VAR 0 5
16656: ARRAY
16657: PUSH
16658: LD_EXP 47
16662: LESS
16663: IFFALSE 16852
// begin for i := 1 to vehicles do
16665: LD_ADDR_VAR 0 4
16669: PUSH
16670: DOUBLE
16671: LD_INT 1
16673: DEC
16674: ST_TO_ADDR
16675: LD_VAR 0 2
16679: PUSH
16680: FOR_TO
16681: IFFALSE 16850
// begin if hackTanksCaptured [ index ] = hackLimit then
16683: LD_EXP 46
16687: PUSH
16688: LD_VAR 0 5
16692: ARRAY
16693: PUSH
16694: LD_EXP 47
16698: EQUAL
16699: IFFALSE 16703
// break ;
16701: GO 16850
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16703: LD_ADDR_EXP 49
16707: PUSH
16708: LD_EXP 49
16712: PPUSH
16713: LD_VAR 0 5
16717: PPUSH
16718: LD_EXP 49
16722: PUSH
16723: LD_VAR 0 5
16727: ARRAY
16728: PUSH
16729: LD_INT 1
16731: PLUS
16732: PPUSH
16733: CALL_OW 1
16737: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16738: LD_ADDR_EXP 46
16742: PUSH
16743: LD_EXP 46
16747: PPUSH
16748: LD_VAR 0 5
16752: PUSH
16753: LD_EXP 46
16757: PUSH
16758: LD_VAR 0 5
16762: ARRAY
16763: PUSH
16764: LD_INT 1
16766: PLUS
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PPUSH
16772: LD_VAR 0 2
16776: PUSH
16777: LD_VAR 0 4
16781: ARRAY
16782: PUSH
16783: LD_VAR 0 2
16787: PUSH
16788: LD_VAR 0 4
16792: ARRAY
16793: PPUSH
16794: CALL_OW 255
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL 40028 0 3
16807: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16808: LD_VAR 0 2
16812: PUSH
16813: LD_VAR 0 4
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 255
16828: PPUSH
16829: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16833: LD_VAR 0 2
16837: PUSH
16838: LD_VAR 0 4
16842: ARRAY
16843: PPUSH
16844: CALL_OW 141
// end ;
16848: GO 16680
16850: POP
16851: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16852: LD_VAR 0 1
16856: PPUSH
16857: LD_EXP 46
16861: PUSH
16862: LD_VAR 0 5
16866: ARRAY
16867: PUSH
16868: LD_INT 0
16870: PLUS
16871: PPUSH
16872: CALL_OW 505
// end ;
16876: LD_VAR 0 3
16880: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16881: LD_INT 0
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
// if not hack in hackTanks then
16887: LD_VAR 0 1
16891: PUSH
16892: LD_EXP 45
16896: IN
16897: NOT
16898: IFFALSE 16902
// exit ;
16900: GO 17142
// index := GetElementIndex ( hackTanks , hack ) ;
16902: LD_ADDR_VAR 0 4
16906: PUSH
16907: LD_EXP 45
16911: PPUSH
16912: LD_VAR 0 1
16916: PPUSH
16917: CALL 39813 0 2
16921: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: DOUBLE
16928: LD_EXP 46
16932: PUSH
16933: LD_VAR 0 4
16937: ARRAY
16938: INC
16939: ST_TO_ADDR
16940: LD_INT 1
16942: PUSH
16943: FOR_DOWNTO
16944: IFFALSE 17116
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16946: LD_ADDR_VAR 0 5
16950: PUSH
16951: LD_EXP 46
16955: PUSH
16956: LD_VAR 0 4
16960: ARRAY
16961: PUSH
16962: LD_VAR 0 3
16966: ARRAY
16967: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16968: LD_VAR 0 5
16972: PUSH
16973: LD_INT 1
16975: ARRAY
16976: PPUSH
16977: CALL_OW 302
16981: NOT
16982: PUSH
16983: LD_VAR 0 5
16987: PUSH
16988: LD_INT 1
16990: ARRAY
16991: PPUSH
16992: CALL_OW 255
16996: PUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 255
17006: NONEQUAL
17007: OR
17008: IFFALSE 17114
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17010: LD_VAR 0 5
17014: PUSH
17015: LD_INT 1
17017: ARRAY
17018: PPUSH
17019: CALL_OW 305
17023: PUSH
17024: LD_VAR 0 5
17028: PUSH
17029: LD_INT 1
17031: ARRAY
17032: PPUSH
17033: CALL_OW 255
17037: PUSH
17038: LD_VAR 0 1
17042: PPUSH
17043: CALL_OW 255
17047: EQUAL
17048: AND
17049: IFFALSE 17073
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17051: LD_VAR 0 5
17055: PUSH
17056: LD_INT 1
17058: ARRAY
17059: PPUSH
17060: LD_VAR 0 5
17064: PUSH
17065: LD_INT 2
17067: ARRAY
17068: PPUSH
17069: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17073: LD_ADDR_EXP 46
17077: PUSH
17078: LD_EXP 46
17082: PPUSH
17083: LD_VAR 0 4
17087: PPUSH
17088: LD_EXP 46
17092: PUSH
17093: LD_VAR 0 4
17097: ARRAY
17098: PPUSH
17099: LD_VAR 0 3
17103: PPUSH
17104: CALL_OW 3
17108: PPUSH
17109: CALL_OW 1
17113: ST_TO_ADDR
// end ; end ;
17114: GO 16943
17116: POP
17117: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17118: LD_VAR 0 1
17122: PPUSH
17123: LD_EXP 46
17127: PUSH
17128: LD_VAR 0 4
17132: ARRAY
17133: PUSH
17134: LD_INT 0
17136: PLUS
17137: PPUSH
17138: CALL_OW 505
// end ;
17142: LD_VAR 0 2
17146: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17147: LD_INT 0
17149: PPUSH
17150: PPUSH
17151: PPUSH
17152: PPUSH
// if not hack in hackTanks then
17153: LD_VAR 0 1
17157: PUSH
17158: LD_EXP 45
17162: IN
17163: NOT
17164: IFFALSE 17168
// exit ;
17166: GO 17253
// index := GetElementIndex ( hackTanks , hack ) ;
17168: LD_ADDR_VAR 0 5
17172: PUSH
17173: LD_EXP 45
17177: PPUSH
17178: LD_VAR 0 1
17182: PPUSH
17183: CALL 39813 0 2
17187: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17188: LD_ADDR_VAR 0 4
17192: PUSH
17193: DOUBLE
17194: LD_INT 1
17196: DEC
17197: ST_TO_ADDR
17198: LD_EXP 46
17202: PUSH
17203: LD_VAR 0 5
17207: ARRAY
17208: PUSH
17209: FOR_TO
17210: IFFALSE 17251
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17212: LD_EXP 46
17216: PUSH
17217: LD_VAR 0 5
17221: ARRAY
17222: PUSH
17223: LD_VAR 0 4
17227: ARRAY
17228: PUSH
17229: LD_INT 1
17231: ARRAY
17232: PUSH
17233: LD_VAR 0 2
17237: EQUAL
17238: IFFALSE 17249
// KillUnit ( vehicle ) ;
17240: LD_VAR 0 2
17244: PPUSH
17245: CALL_OW 66
17249: GO 17209
17251: POP
17252: POP
// end ;
17253: LD_VAR 0 3
17257: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17258: LD_EXP 50
17262: NOT
17263: IFFALSE 17298
17265: GO 17267
17267: DISABLE
// begin initMiner := true ;
17268: LD_ADDR_EXP 50
17272: PUSH
17273: LD_INT 1
17275: ST_TO_ADDR
// minersList := [ ] ;
17276: LD_ADDR_EXP 51
17280: PUSH
17281: EMPTY
17282: ST_TO_ADDR
// minerMinesList := [ ] ;
17283: LD_ADDR_EXP 52
17287: PUSH
17288: EMPTY
17289: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17290: LD_ADDR_EXP 53
17294: PUSH
17295: LD_INT 5
17297: ST_TO_ADDR
// end ;
17298: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17299: LD_EXP 50
17303: PUSH
17304: LD_INT 34
17306: PUSH
17307: LD_INT 81
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PPUSH
17314: CALL_OW 69
17318: AND
17319: IFFALSE 17780
17321: GO 17323
17323: DISABLE
17324: LD_INT 0
17326: PPUSH
17327: PPUSH
17328: PPUSH
17329: PPUSH
// begin enable ;
17330: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17331: LD_ADDR_VAR 0 1
17335: PUSH
17336: LD_INT 34
17338: PUSH
17339: LD_INT 81
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PPUSH
17346: CALL_OW 69
17350: PUSH
17351: FOR_IN
17352: IFFALSE 17424
// begin if not i in minersList then
17354: LD_VAR 0 1
17358: PUSH
17359: LD_EXP 51
17363: IN
17364: NOT
17365: IFFALSE 17422
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17367: LD_ADDR_EXP 51
17371: PUSH
17372: LD_EXP 51
17376: PPUSH
17377: LD_EXP 51
17381: PUSH
17382: LD_INT 1
17384: PLUS
17385: PPUSH
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 1
17395: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17396: LD_ADDR_EXP 52
17400: PUSH
17401: LD_EXP 52
17405: PPUSH
17406: LD_EXP 52
17410: PUSH
17411: LD_INT 1
17413: PLUS
17414: PPUSH
17415: EMPTY
17416: PPUSH
17417: CALL_OW 1
17421: ST_TO_ADDR
// end end ;
17422: GO 17351
17424: POP
17425: POP
// for i := minerMinesList downto 1 do
17426: LD_ADDR_VAR 0 1
17430: PUSH
17431: DOUBLE
17432: LD_EXP 52
17436: INC
17437: ST_TO_ADDR
17438: LD_INT 1
17440: PUSH
17441: FOR_DOWNTO
17442: IFFALSE 17778
// begin if IsLive ( minersList [ i ] ) then
17444: LD_EXP 51
17448: PUSH
17449: LD_VAR 0 1
17453: ARRAY
17454: PPUSH
17455: CALL_OW 300
17459: IFFALSE 17487
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17461: LD_EXP 51
17465: PUSH
17466: LD_VAR 0 1
17470: ARRAY
17471: PPUSH
17472: LD_EXP 52
17476: PUSH
17477: LD_VAR 0 1
17481: ARRAY
17482: PPUSH
17483: CALL_OW 505
// if not minerMinesList [ i ] then
17487: LD_EXP 52
17491: PUSH
17492: LD_VAR 0 1
17496: ARRAY
17497: NOT
17498: IFFALSE 17502
// continue ;
17500: GO 17441
// for j := minerMinesList [ i ] downto 1 do
17502: LD_ADDR_VAR 0 2
17506: PUSH
17507: DOUBLE
17508: LD_EXP 52
17512: PUSH
17513: LD_VAR 0 1
17517: ARRAY
17518: INC
17519: ST_TO_ADDR
17520: LD_INT 1
17522: PUSH
17523: FOR_DOWNTO
17524: IFFALSE 17774
// begin side := GetSide ( minersList [ i ] ) ;
17526: LD_ADDR_VAR 0 3
17530: PUSH
17531: LD_EXP 51
17535: PUSH
17536: LD_VAR 0 1
17540: ARRAY
17541: PPUSH
17542: CALL_OW 255
17546: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17547: LD_ADDR_VAR 0 4
17551: PUSH
17552: LD_EXP 52
17556: PUSH
17557: LD_VAR 0 1
17561: ARRAY
17562: PUSH
17563: LD_VAR 0 2
17567: ARRAY
17568: PUSH
17569: LD_INT 1
17571: ARRAY
17572: PPUSH
17573: LD_EXP 52
17577: PUSH
17578: LD_VAR 0 1
17582: ARRAY
17583: PUSH
17584: LD_VAR 0 2
17588: ARRAY
17589: PUSH
17590: LD_INT 2
17592: ARRAY
17593: PPUSH
17594: CALL_OW 428
17598: ST_TO_ADDR
// if not tmp then
17599: LD_VAR 0 4
17603: NOT
17604: IFFALSE 17608
// continue ;
17606: GO 17523
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17608: LD_VAR 0 4
17612: PUSH
17613: LD_INT 81
17615: PUSH
17616: LD_VAR 0 3
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PPUSH
17625: CALL_OW 69
17629: IN
17630: PUSH
17631: LD_EXP 52
17635: PUSH
17636: LD_VAR 0 1
17640: ARRAY
17641: PUSH
17642: LD_VAR 0 2
17646: ARRAY
17647: PUSH
17648: LD_INT 1
17650: ARRAY
17651: PPUSH
17652: LD_EXP 52
17656: PUSH
17657: LD_VAR 0 1
17661: ARRAY
17662: PUSH
17663: LD_VAR 0 2
17667: ARRAY
17668: PUSH
17669: LD_INT 2
17671: ARRAY
17672: PPUSH
17673: CALL_OW 458
17677: AND
17678: IFFALSE 17772
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17680: LD_EXP 52
17684: PUSH
17685: LD_VAR 0 1
17689: ARRAY
17690: PUSH
17691: LD_VAR 0 2
17695: ARRAY
17696: PUSH
17697: LD_INT 1
17699: ARRAY
17700: PPUSH
17701: LD_EXP 52
17705: PUSH
17706: LD_VAR 0 1
17710: ARRAY
17711: PUSH
17712: LD_VAR 0 2
17716: ARRAY
17717: PUSH
17718: LD_INT 2
17720: ARRAY
17721: PPUSH
17722: LD_VAR 0 3
17726: PPUSH
17727: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17731: LD_ADDR_EXP 52
17735: PUSH
17736: LD_EXP 52
17740: PPUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: LD_EXP 52
17750: PUSH
17751: LD_VAR 0 1
17755: ARRAY
17756: PPUSH
17757: LD_VAR 0 2
17761: PPUSH
17762: CALL_OW 3
17766: PPUSH
17767: CALL_OW 1
17771: ST_TO_ADDR
// end ; end ;
17772: GO 17523
17774: POP
17775: POP
// end ;
17776: GO 17441
17778: POP
17779: POP
// end ;
17780: PPOPN 4
17782: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
// result := false ;
17787: LD_ADDR_VAR 0 4
17791: PUSH
17792: LD_INT 0
17794: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17795: LD_VAR 0 1
17799: PPUSH
17800: CALL_OW 264
17804: PUSH
17805: LD_INT 81
17807: EQUAL
17808: NOT
17809: IFFALSE 17813
// exit ;
17811: GO 18053
// index := GetElementIndex ( minersList , unit ) ;
17813: LD_ADDR_VAR 0 5
17817: PUSH
17818: LD_EXP 51
17822: PPUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL 39813 0 2
17832: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17833: LD_EXP 52
17837: PUSH
17838: LD_VAR 0 5
17842: ARRAY
17843: PUSH
17844: LD_EXP 53
17848: GREATEREQUAL
17849: IFFALSE 17853
// exit ;
17851: GO 18053
// ComMoveXY ( unit , x , y ) ;
17853: LD_VAR 0 1
17857: PPUSH
17858: LD_VAR 0 2
17862: PPUSH
17863: LD_VAR 0 3
17867: PPUSH
17868: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17872: LD_INT 35
17874: PPUSH
17875: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17879: LD_VAR 0 1
17883: PPUSH
17884: LD_VAR 0 2
17888: PPUSH
17889: LD_VAR 0 3
17893: PPUSH
17894: CALL 71197 0 3
17898: NOT
17899: PUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 314
17909: AND
17910: IFFALSE 17914
// exit ;
17912: GO 18053
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17914: LD_VAR 0 2
17918: PPUSH
17919: LD_VAR 0 3
17923: PPUSH
17924: CALL_OW 428
17928: PUSH
17929: LD_VAR 0 1
17933: EQUAL
17934: PUSH
17935: LD_VAR 0 1
17939: PPUSH
17940: CALL_OW 314
17944: NOT
17945: AND
17946: IFFALSE 17872
// PlaySoundXY ( x , y , PlantMine ) ;
17948: LD_VAR 0 2
17952: PPUSH
17953: LD_VAR 0 3
17957: PPUSH
17958: LD_STRING PlantMine
17960: PPUSH
17961: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17965: LD_VAR 0 2
17969: PPUSH
17970: LD_VAR 0 3
17974: PPUSH
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 255
17984: PPUSH
17985: LD_INT 0
17987: PPUSH
17988: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17992: LD_ADDR_EXP 52
17996: PUSH
17997: LD_EXP 52
18001: PPUSH
18002: LD_VAR 0 5
18006: PUSH
18007: LD_EXP 52
18011: PUSH
18012: LD_VAR 0 5
18016: ARRAY
18017: PUSH
18018: LD_INT 1
18020: PLUS
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PPUSH
18026: LD_VAR 0 2
18030: PUSH
18031: LD_VAR 0 3
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PPUSH
18040: CALL 40028 0 3
18044: ST_TO_ADDR
// result := true ;
18045: LD_ADDR_VAR 0 4
18049: PUSH
18050: LD_INT 1
18052: ST_TO_ADDR
// end ;
18053: LD_VAR 0 4
18057: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18058: LD_INT 0
18060: PPUSH
18061: PPUSH
18062: PPUSH
// if not unit in minersList then
18063: LD_VAR 0 1
18067: PUSH
18068: LD_EXP 51
18072: IN
18073: NOT
18074: IFFALSE 18078
// exit ;
18076: GO 18470
// index := GetElementIndex ( minersList , unit ) ;
18078: LD_ADDR_VAR 0 6
18082: PUSH
18083: LD_EXP 51
18087: PPUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL 39813 0 2
18097: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18098: LD_ADDR_VAR 0 5
18102: PUSH
18103: DOUBLE
18104: LD_EXP 52
18108: PUSH
18109: LD_VAR 0 6
18113: ARRAY
18114: INC
18115: ST_TO_ADDR
18116: LD_INT 1
18118: PUSH
18119: FOR_DOWNTO
18120: IFFALSE 18281
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18122: LD_EXP 52
18126: PUSH
18127: LD_VAR 0 6
18131: ARRAY
18132: PUSH
18133: LD_VAR 0 5
18137: ARRAY
18138: PUSH
18139: LD_INT 1
18141: ARRAY
18142: PUSH
18143: LD_VAR 0 2
18147: EQUAL
18148: PUSH
18149: LD_EXP 52
18153: PUSH
18154: LD_VAR 0 6
18158: ARRAY
18159: PUSH
18160: LD_VAR 0 5
18164: ARRAY
18165: PUSH
18166: LD_INT 2
18168: ARRAY
18169: PUSH
18170: LD_VAR 0 3
18174: EQUAL
18175: AND
18176: IFFALSE 18279
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18178: LD_EXP 52
18182: PUSH
18183: LD_VAR 0 6
18187: ARRAY
18188: PUSH
18189: LD_VAR 0 5
18193: ARRAY
18194: PUSH
18195: LD_INT 1
18197: ARRAY
18198: PPUSH
18199: LD_EXP 52
18203: PUSH
18204: LD_VAR 0 6
18208: ARRAY
18209: PUSH
18210: LD_VAR 0 5
18214: ARRAY
18215: PUSH
18216: LD_INT 2
18218: ARRAY
18219: PPUSH
18220: LD_VAR 0 1
18224: PPUSH
18225: CALL_OW 255
18229: PPUSH
18230: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18234: LD_ADDR_EXP 52
18238: PUSH
18239: LD_EXP 52
18243: PPUSH
18244: LD_VAR 0 6
18248: PPUSH
18249: LD_EXP 52
18253: PUSH
18254: LD_VAR 0 6
18258: ARRAY
18259: PPUSH
18260: LD_VAR 0 5
18264: PPUSH
18265: CALL_OW 3
18269: PPUSH
18270: CALL_OW 1
18274: ST_TO_ADDR
// exit ;
18275: POP
18276: POP
18277: GO 18470
// end ; end ;
18279: GO 18119
18281: POP
18282: POP
// for i := minerMinesList [ index ] downto 1 do
18283: LD_ADDR_VAR 0 5
18287: PUSH
18288: DOUBLE
18289: LD_EXP 52
18293: PUSH
18294: LD_VAR 0 6
18298: ARRAY
18299: INC
18300: ST_TO_ADDR
18301: LD_INT 1
18303: PUSH
18304: FOR_DOWNTO
18305: IFFALSE 18468
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18307: LD_EXP 52
18311: PUSH
18312: LD_VAR 0 6
18316: ARRAY
18317: PUSH
18318: LD_VAR 0 5
18322: ARRAY
18323: PUSH
18324: LD_INT 1
18326: ARRAY
18327: PPUSH
18328: LD_EXP 52
18332: PUSH
18333: LD_VAR 0 6
18337: ARRAY
18338: PUSH
18339: LD_VAR 0 5
18343: ARRAY
18344: PUSH
18345: LD_INT 2
18347: ARRAY
18348: PPUSH
18349: LD_VAR 0 2
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: CALL_OW 298
18363: PUSH
18364: LD_INT 6
18366: LESS
18367: IFFALSE 18466
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18369: LD_EXP 52
18373: PUSH
18374: LD_VAR 0 6
18378: ARRAY
18379: PUSH
18380: LD_VAR 0 5
18384: ARRAY
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: LD_EXP 52
18394: PUSH
18395: LD_VAR 0 6
18399: ARRAY
18400: PUSH
18401: LD_VAR 0 5
18405: ARRAY
18406: PUSH
18407: LD_INT 2
18409: ARRAY
18410: PPUSH
18411: LD_VAR 0 1
18415: PPUSH
18416: CALL_OW 255
18420: PPUSH
18421: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18425: LD_ADDR_EXP 52
18429: PUSH
18430: LD_EXP 52
18434: PPUSH
18435: LD_VAR 0 6
18439: PPUSH
18440: LD_EXP 52
18444: PUSH
18445: LD_VAR 0 6
18449: ARRAY
18450: PPUSH
18451: LD_VAR 0 5
18455: PPUSH
18456: CALL_OW 3
18460: PPUSH
18461: CALL_OW 1
18465: ST_TO_ADDR
// end ; end ;
18466: GO 18304
18468: POP
18469: POP
// end ;
18470: LD_VAR 0 4
18474: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18475: LD_INT 0
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 264
18495: PUSH
18496: LD_INT 81
18498: EQUAL
18499: NOT
18500: PUSH
18501: LD_VAR 0 1
18505: PUSH
18506: LD_EXP 51
18510: IN
18511: NOT
18512: OR
18513: IFFALSE 18517
// exit ;
18515: GO 18839
// index := GetElementIndex ( minersList , unit ) ;
18517: LD_ADDR_VAR 0 6
18521: PUSH
18522: LD_EXP 51
18526: PPUSH
18527: LD_VAR 0 1
18531: PPUSH
18532: CALL 39813 0 2
18536: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18537: LD_ADDR_VAR 0 8
18541: PUSH
18542: LD_EXP 53
18546: PUSH
18547: LD_EXP 52
18551: PUSH
18552: LD_VAR 0 6
18556: ARRAY
18557: MINUS
18558: ST_TO_ADDR
// if not minesFreeAmount then
18559: LD_VAR 0 8
18563: NOT
18564: IFFALSE 18568
// exit ;
18566: GO 18839
// tmp := [ ] ;
18568: LD_ADDR_VAR 0 7
18572: PUSH
18573: EMPTY
18574: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18575: LD_ADDR_VAR 0 5
18579: PUSH
18580: DOUBLE
18581: LD_INT 1
18583: DEC
18584: ST_TO_ADDR
18585: LD_VAR 0 8
18589: PUSH
18590: FOR_TO
18591: IFFALSE 18786
// begin _d := rand ( 0 , 5 ) ;
18593: LD_ADDR_VAR 0 11
18597: PUSH
18598: LD_INT 0
18600: PPUSH
18601: LD_INT 5
18603: PPUSH
18604: CALL_OW 12
18608: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18609: LD_ADDR_VAR 0 12
18613: PUSH
18614: LD_INT 2
18616: PPUSH
18617: LD_INT 6
18619: PPUSH
18620: CALL_OW 12
18624: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18625: LD_ADDR_VAR 0 9
18629: PUSH
18630: LD_VAR 0 2
18634: PPUSH
18635: LD_VAR 0 11
18639: PPUSH
18640: LD_VAR 0 12
18644: PPUSH
18645: CALL_OW 272
18649: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18650: LD_ADDR_VAR 0 10
18654: PUSH
18655: LD_VAR 0 3
18659: PPUSH
18660: LD_VAR 0 11
18664: PPUSH
18665: LD_VAR 0 12
18669: PPUSH
18670: CALL_OW 273
18674: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18675: LD_VAR 0 9
18679: PPUSH
18680: LD_VAR 0 10
18684: PPUSH
18685: CALL_OW 488
18689: PUSH
18690: LD_VAR 0 9
18694: PUSH
18695: LD_VAR 0 10
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_VAR 0 7
18708: IN
18709: NOT
18710: AND
18711: PUSH
18712: LD_VAR 0 9
18716: PPUSH
18717: LD_VAR 0 10
18721: PPUSH
18722: CALL_OW 458
18726: NOT
18727: AND
18728: IFFALSE 18770
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18730: LD_ADDR_VAR 0 7
18734: PUSH
18735: LD_VAR 0 7
18739: PPUSH
18740: LD_VAR 0 7
18744: PUSH
18745: LD_INT 1
18747: PLUS
18748: PPUSH
18749: LD_VAR 0 9
18753: PUSH
18754: LD_VAR 0 10
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 1
18767: ST_TO_ADDR
18768: GO 18784
// i := i - 1 ;
18770: LD_ADDR_VAR 0 5
18774: PUSH
18775: LD_VAR 0 5
18779: PUSH
18780: LD_INT 1
18782: MINUS
18783: ST_TO_ADDR
// end ;
18784: GO 18590
18786: POP
18787: POP
// for i in tmp do
18788: LD_ADDR_VAR 0 5
18792: PUSH
18793: LD_VAR 0 7
18797: PUSH
18798: FOR_IN
18799: IFFALSE 18837
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18801: LD_VAR 0 1
18805: PPUSH
18806: LD_VAR 0 5
18810: PUSH
18811: LD_INT 1
18813: ARRAY
18814: PPUSH
18815: LD_VAR 0 5
18819: PUSH
18820: LD_INT 2
18822: ARRAY
18823: PPUSH
18824: CALL 17783 0 3
18828: NOT
18829: IFFALSE 18835
// exit ;
18831: POP
18832: POP
18833: GO 18839
18835: GO 18798
18837: POP
18838: POP
// end ;
18839: LD_VAR 0 4
18843: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18844: LD_INT 0
18846: PPUSH
18847: PPUSH
18848: PPUSH
18849: PPUSH
18850: PPUSH
18851: PPUSH
18852: PPUSH
// if not GetClass ( unit ) = class_sniper then
18853: LD_VAR 0 1
18857: PPUSH
18858: CALL_OW 257
18862: PUSH
18863: LD_INT 5
18865: EQUAL
18866: NOT
18867: IFFALSE 18871
// exit ;
18869: GO 19259
// dist := 8 ;
18871: LD_ADDR_VAR 0 5
18875: PUSH
18876: LD_INT 8
18878: ST_TO_ADDR
// viewRange := 12 ;
18879: LD_ADDR_VAR 0 7
18883: PUSH
18884: LD_INT 12
18886: ST_TO_ADDR
// side := GetSide ( unit ) ;
18887: LD_ADDR_VAR 0 6
18891: PUSH
18892: LD_VAR 0 1
18896: PPUSH
18897: CALL_OW 255
18901: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18902: LD_INT 61
18904: PPUSH
18905: LD_VAR 0 6
18909: PPUSH
18910: CALL_OW 321
18914: PUSH
18915: LD_INT 2
18917: EQUAL
18918: IFFALSE 18928
// viewRange := 16 ;
18920: LD_ADDR_VAR 0 7
18924: PUSH
18925: LD_INT 16
18927: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18928: LD_VAR 0 1
18932: PPUSH
18933: LD_VAR 0 2
18937: PPUSH
18938: LD_VAR 0 3
18942: PPUSH
18943: CALL_OW 297
18947: PUSH
18948: LD_VAR 0 5
18952: GREATER
18953: IFFALSE 19032
// begin ComMoveXY ( unit , x , y ) ;
18955: LD_VAR 0 1
18959: PPUSH
18960: LD_VAR 0 2
18964: PPUSH
18965: LD_VAR 0 3
18969: PPUSH
18970: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18974: LD_INT 35
18976: PPUSH
18977: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18981: LD_VAR 0 1
18985: PPUSH
18986: LD_VAR 0 2
18990: PPUSH
18991: LD_VAR 0 3
18995: PPUSH
18996: CALL 71197 0 3
19000: NOT
19001: IFFALSE 19005
// exit ;
19003: GO 19259
// until GetDistUnitXY ( unit , x , y ) < dist ;
19005: LD_VAR 0 1
19009: PPUSH
19010: LD_VAR 0 2
19014: PPUSH
19015: LD_VAR 0 3
19019: PPUSH
19020: CALL_OW 297
19024: PUSH
19025: LD_VAR 0 5
19029: LESS
19030: IFFALSE 18974
// end ; ComTurnXY ( unit , x , y ) ;
19032: LD_VAR 0 1
19036: PPUSH
19037: LD_VAR 0 2
19041: PPUSH
19042: LD_VAR 0 3
19046: PPUSH
19047: CALL_OW 118
// wait ( 5 ) ;
19051: LD_INT 5
19053: PPUSH
19054: CALL_OW 67
// _d := GetDir ( unit ) ;
19058: LD_ADDR_VAR 0 10
19062: PUSH
19063: LD_VAR 0 1
19067: PPUSH
19068: CALL_OW 254
19072: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19073: LD_ADDR_VAR 0 8
19077: PUSH
19078: LD_VAR 0 1
19082: PPUSH
19083: CALL_OW 250
19087: PPUSH
19088: LD_VAR 0 10
19092: PPUSH
19093: LD_VAR 0 5
19097: PPUSH
19098: CALL_OW 272
19102: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19103: LD_ADDR_VAR 0 9
19107: PUSH
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 251
19117: PPUSH
19118: LD_VAR 0 10
19122: PPUSH
19123: LD_VAR 0 5
19127: PPUSH
19128: CALL_OW 273
19132: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19133: LD_VAR 0 8
19137: PPUSH
19138: LD_VAR 0 9
19142: PPUSH
19143: CALL_OW 488
19147: NOT
19148: IFFALSE 19152
// exit ;
19150: GO 19259
// ComAnimCustom ( unit , 1 ) ;
19152: LD_VAR 0 1
19156: PPUSH
19157: LD_INT 1
19159: PPUSH
19160: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19164: LD_VAR 0 8
19168: PPUSH
19169: LD_VAR 0 9
19173: PPUSH
19174: LD_VAR 0 6
19178: PPUSH
19179: LD_VAR 0 7
19183: PPUSH
19184: CALL_OW 330
// repeat wait ( 1 ) ;
19188: LD_INT 1
19190: PPUSH
19191: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19195: LD_VAR 0 1
19199: PPUSH
19200: CALL_OW 316
19204: PUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: CALL_OW 314
19214: OR
19215: PUSH
19216: LD_VAR 0 1
19220: PPUSH
19221: CALL_OW 302
19225: NOT
19226: OR
19227: PUSH
19228: LD_VAR 0 1
19232: PPUSH
19233: CALL_OW 301
19237: OR
19238: IFFALSE 19188
// RemoveSeeing ( _x , _y , side ) ;
19240: LD_VAR 0 8
19244: PPUSH
19245: LD_VAR 0 9
19249: PPUSH
19250: LD_VAR 0 6
19254: PPUSH
19255: CALL_OW 331
// end ; end_of_file
19259: LD_VAR 0 4
19263: RET
// export globalGameSaveCounter ; every 0 0$1 do
19264: GO 19266
19266: DISABLE
// begin enable ;
19267: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19268: LD_STRING updateTimer(
19270: PUSH
19271: LD_OWVAR 1
19275: STR
19276: PUSH
19277: LD_STRING );
19279: STR
19280: PPUSH
19281: CALL_OW 559
// end ;
19285: END
// every 0 0$1 do
19286: GO 19288
19288: DISABLE
// begin globalGameSaveCounter := 0 ;
19289: LD_ADDR_EXP 54
19293: PUSH
19294: LD_INT 0
19296: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19297: LD_STRING setGameSaveCounter(0)
19299: PPUSH
19300: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19304: LD_STRING initStreamRollete();
19306: PPUSH
19307: CALL_OW 559
// InitStreamMode ;
19311: CALL 20637 0 0
// DefineStreamItems ( false ) ;
19315: LD_INT 0
19317: PPUSH
19318: CALL 21101 0 1
// end ;
19322: END
// export function SOS_MapStart ( ) ; begin
19323: LD_INT 0
19325: PPUSH
// if streamModeActive then
19326: LD_EXP 55
19330: IFFALSE 19339
// DefineStreamItems ( true ) ;
19332: LD_INT 1
19334: PPUSH
19335: CALL 21101 0 1
// UpdateLuaVariables ( ) ;
19339: CALL 19356 0 0
// UpdateFactoryWaypoints ( ) ;
19343: CALL 33970 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19347: CALL 34227 0 0
// end ;
19351: LD_VAR 0 1
19355: RET
// function UpdateLuaVariables ( ) ; begin
19356: LD_INT 0
19358: PPUSH
// if globalGameSaveCounter then
19359: LD_EXP 54
19363: IFFALSE 19397
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19365: LD_ADDR_EXP 54
19369: PUSH
19370: LD_EXP 54
19374: PPUSH
19375: CALL 73748 0 1
19379: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19380: LD_STRING setGameSaveCounter(
19382: PUSH
19383: LD_EXP 54
19387: STR
19388: PUSH
19389: LD_STRING )
19391: STR
19392: PPUSH
19393: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19397: LD_STRING setGameDifficulty(
19399: PUSH
19400: LD_OWVAR 67
19404: STR
19405: PUSH
19406: LD_STRING )
19408: STR
19409: PPUSH
19410: CALL_OW 559
// end ;
19414: LD_VAR 0 1
19418: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19419: LD_INT 0
19421: PPUSH
// if p2 = stream_mode then
19422: LD_VAR 0 2
19426: PUSH
19427: LD_INT 100
19429: EQUAL
19430: IFFALSE 20433
// begin if not StreamModeActive then
19432: LD_EXP 55
19436: NOT
19437: IFFALSE 19447
// StreamModeActive := true ;
19439: LD_ADDR_EXP 55
19443: PUSH
19444: LD_INT 1
19446: ST_TO_ADDR
// if p3 = 0 then
19447: LD_VAR 0 3
19451: PUSH
19452: LD_INT 0
19454: EQUAL
19455: IFFALSE 19461
// InitStreamMode ;
19457: CALL 20637 0 0
// if p3 = 1 then
19461: LD_VAR 0 3
19465: PUSH
19466: LD_INT 1
19468: EQUAL
19469: IFFALSE 19479
// sRocket := true ;
19471: LD_ADDR_EXP 60
19475: PUSH
19476: LD_INT 1
19478: ST_TO_ADDR
// if p3 = 2 then
19479: LD_VAR 0 3
19483: PUSH
19484: LD_INT 2
19486: EQUAL
19487: IFFALSE 19497
// sSpeed := true ;
19489: LD_ADDR_EXP 59
19493: PUSH
19494: LD_INT 1
19496: ST_TO_ADDR
// if p3 = 3 then
19497: LD_VAR 0 3
19501: PUSH
19502: LD_INT 3
19504: EQUAL
19505: IFFALSE 19515
// sEngine := true ;
19507: LD_ADDR_EXP 61
19511: PUSH
19512: LD_INT 1
19514: ST_TO_ADDR
// if p3 = 4 then
19515: LD_VAR 0 3
19519: PUSH
19520: LD_INT 4
19522: EQUAL
19523: IFFALSE 19533
// sSpec := true ;
19525: LD_ADDR_EXP 58
19529: PUSH
19530: LD_INT 1
19532: ST_TO_ADDR
// if p3 = 5 then
19533: LD_VAR 0 3
19537: PUSH
19538: LD_INT 5
19540: EQUAL
19541: IFFALSE 19551
// sLevel := true ;
19543: LD_ADDR_EXP 62
19547: PUSH
19548: LD_INT 1
19550: ST_TO_ADDR
// if p3 = 6 then
19551: LD_VAR 0 3
19555: PUSH
19556: LD_INT 6
19558: EQUAL
19559: IFFALSE 19569
// sArmoury := true ;
19561: LD_ADDR_EXP 63
19565: PUSH
19566: LD_INT 1
19568: ST_TO_ADDR
// if p3 = 7 then
19569: LD_VAR 0 3
19573: PUSH
19574: LD_INT 7
19576: EQUAL
19577: IFFALSE 19587
// sRadar := true ;
19579: LD_ADDR_EXP 64
19583: PUSH
19584: LD_INT 1
19586: ST_TO_ADDR
// if p3 = 8 then
19587: LD_VAR 0 3
19591: PUSH
19592: LD_INT 8
19594: EQUAL
19595: IFFALSE 19605
// sBunker := true ;
19597: LD_ADDR_EXP 65
19601: PUSH
19602: LD_INT 1
19604: ST_TO_ADDR
// if p3 = 9 then
19605: LD_VAR 0 3
19609: PUSH
19610: LD_INT 9
19612: EQUAL
19613: IFFALSE 19623
// sHack := true ;
19615: LD_ADDR_EXP 66
19619: PUSH
19620: LD_INT 1
19622: ST_TO_ADDR
// if p3 = 10 then
19623: LD_VAR 0 3
19627: PUSH
19628: LD_INT 10
19630: EQUAL
19631: IFFALSE 19641
// sFire := true ;
19633: LD_ADDR_EXP 67
19637: PUSH
19638: LD_INT 1
19640: ST_TO_ADDR
// if p3 = 11 then
19641: LD_VAR 0 3
19645: PUSH
19646: LD_INT 11
19648: EQUAL
19649: IFFALSE 19659
// sRefresh := true ;
19651: LD_ADDR_EXP 68
19655: PUSH
19656: LD_INT 1
19658: ST_TO_ADDR
// if p3 = 12 then
19659: LD_VAR 0 3
19663: PUSH
19664: LD_INT 12
19666: EQUAL
19667: IFFALSE 19677
// sExp := true ;
19669: LD_ADDR_EXP 69
19673: PUSH
19674: LD_INT 1
19676: ST_TO_ADDR
// if p3 = 13 then
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 13
19684: EQUAL
19685: IFFALSE 19695
// sDepot := true ;
19687: LD_ADDR_EXP 70
19691: PUSH
19692: LD_INT 1
19694: ST_TO_ADDR
// if p3 = 14 then
19695: LD_VAR 0 3
19699: PUSH
19700: LD_INT 14
19702: EQUAL
19703: IFFALSE 19713
// sFlag := true ;
19705: LD_ADDR_EXP 71
19709: PUSH
19710: LD_INT 1
19712: ST_TO_ADDR
// if p3 = 15 then
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 15
19720: EQUAL
19721: IFFALSE 19731
// sKamikadze := true ;
19723: LD_ADDR_EXP 79
19727: PUSH
19728: LD_INT 1
19730: ST_TO_ADDR
// if p3 = 16 then
19731: LD_VAR 0 3
19735: PUSH
19736: LD_INT 16
19738: EQUAL
19739: IFFALSE 19749
// sTroll := true ;
19741: LD_ADDR_EXP 80
19745: PUSH
19746: LD_INT 1
19748: ST_TO_ADDR
// if p3 = 17 then
19749: LD_VAR 0 3
19753: PUSH
19754: LD_INT 17
19756: EQUAL
19757: IFFALSE 19767
// sSlow := true ;
19759: LD_ADDR_EXP 81
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// if p3 = 18 then
19767: LD_VAR 0 3
19771: PUSH
19772: LD_INT 18
19774: EQUAL
19775: IFFALSE 19785
// sLack := true ;
19777: LD_ADDR_EXP 82
19781: PUSH
19782: LD_INT 1
19784: ST_TO_ADDR
// if p3 = 19 then
19785: LD_VAR 0 3
19789: PUSH
19790: LD_INT 19
19792: EQUAL
19793: IFFALSE 19803
// sTank := true ;
19795: LD_ADDR_EXP 84
19799: PUSH
19800: LD_INT 1
19802: ST_TO_ADDR
// if p3 = 20 then
19803: LD_VAR 0 3
19807: PUSH
19808: LD_INT 20
19810: EQUAL
19811: IFFALSE 19821
// sRemote := true ;
19813: LD_ADDR_EXP 85
19817: PUSH
19818: LD_INT 1
19820: ST_TO_ADDR
// if p3 = 21 then
19821: LD_VAR 0 3
19825: PUSH
19826: LD_INT 21
19828: EQUAL
19829: IFFALSE 19839
// sPowell := true ;
19831: LD_ADDR_EXP 86
19835: PUSH
19836: LD_INT 1
19838: ST_TO_ADDR
// if p3 = 22 then
19839: LD_VAR 0 3
19843: PUSH
19844: LD_INT 22
19846: EQUAL
19847: IFFALSE 19857
// sTeleport := true ;
19849: LD_ADDR_EXP 89
19853: PUSH
19854: LD_INT 1
19856: ST_TO_ADDR
// if p3 = 23 then
19857: LD_VAR 0 3
19861: PUSH
19862: LD_INT 23
19864: EQUAL
19865: IFFALSE 19875
// sOilTower := true ;
19867: LD_ADDR_EXP 91
19871: PUSH
19872: LD_INT 1
19874: ST_TO_ADDR
// if p3 = 24 then
19875: LD_VAR 0 3
19879: PUSH
19880: LD_INT 24
19882: EQUAL
19883: IFFALSE 19893
// sShovel := true ;
19885: LD_ADDR_EXP 92
19889: PUSH
19890: LD_INT 1
19892: ST_TO_ADDR
// if p3 = 25 then
19893: LD_VAR 0 3
19897: PUSH
19898: LD_INT 25
19900: EQUAL
19901: IFFALSE 19911
// sSheik := true ;
19903: LD_ADDR_EXP 93
19907: PUSH
19908: LD_INT 1
19910: ST_TO_ADDR
// if p3 = 26 then
19911: LD_VAR 0 3
19915: PUSH
19916: LD_INT 26
19918: EQUAL
19919: IFFALSE 19929
// sEarthquake := true ;
19921: LD_ADDR_EXP 95
19925: PUSH
19926: LD_INT 1
19928: ST_TO_ADDR
// if p3 = 27 then
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 27
19936: EQUAL
19937: IFFALSE 19947
// sAI := true ;
19939: LD_ADDR_EXP 96
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// if p3 = 28 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 28
19954: EQUAL
19955: IFFALSE 19965
// sCargo := true ;
19957: LD_ADDR_EXP 99
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// if p3 = 29 then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 29
19972: EQUAL
19973: IFFALSE 19983
// sDLaser := true ;
19975: LD_ADDR_EXP 100
19979: PUSH
19980: LD_INT 1
19982: ST_TO_ADDR
// if p3 = 30 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 30
19990: EQUAL
19991: IFFALSE 20001
// sExchange := true ;
19993: LD_ADDR_EXP 101
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if p3 = 31 then
20001: LD_VAR 0 3
20005: PUSH
20006: LD_INT 31
20008: EQUAL
20009: IFFALSE 20019
// sFac := true ;
20011: LD_ADDR_EXP 102
20015: PUSH
20016: LD_INT 1
20018: ST_TO_ADDR
// if p3 = 32 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 32
20026: EQUAL
20027: IFFALSE 20037
// sPower := true ;
20029: LD_ADDR_EXP 103
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// if p3 = 33 then
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 33
20044: EQUAL
20045: IFFALSE 20055
// sRandom := true ;
20047: LD_ADDR_EXP 104
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// if p3 = 34 then
20055: LD_VAR 0 3
20059: PUSH
20060: LD_INT 34
20062: EQUAL
20063: IFFALSE 20073
// sShield := true ;
20065: LD_ADDR_EXP 105
20069: PUSH
20070: LD_INT 1
20072: ST_TO_ADDR
// if p3 = 35 then
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 35
20080: EQUAL
20081: IFFALSE 20091
// sTime := true ;
20083: LD_ADDR_EXP 106
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if p3 = 36 then
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 36
20098: EQUAL
20099: IFFALSE 20109
// sTools := true ;
20101: LD_ADDR_EXP 107
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if p3 = 101 then
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 101
20116: EQUAL
20117: IFFALSE 20127
// sSold := true ;
20119: LD_ADDR_EXP 72
20123: PUSH
20124: LD_INT 1
20126: ST_TO_ADDR
// if p3 = 102 then
20127: LD_VAR 0 3
20131: PUSH
20132: LD_INT 102
20134: EQUAL
20135: IFFALSE 20145
// sDiff := true ;
20137: LD_ADDR_EXP 73
20141: PUSH
20142: LD_INT 1
20144: ST_TO_ADDR
// if p3 = 103 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 103
20152: EQUAL
20153: IFFALSE 20163
// sFog := true ;
20155: LD_ADDR_EXP 76
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// if p3 = 104 then
20163: LD_VAR 0 3
20167: PUSH
20168: LD_INT 104
20170: EQUAL
20171: IFFALSE 20181
// sReset := true ;
20173: LD_ADDR_EXP 77
20177: PUSH
20178: LD_INT 1
20180: ST_TO_ADDR
// if p3 = 105 then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 105
20188: EQUAL
20189: IFFALSE 20199
// sSun := true ;
20191: LD_ADDR_EXP 78
20195: PUSH
20196: LD_INT 1
20198: ST_TO_ADDR
// if p3 = 106 then
20199: LD_VAR 0 3
20203: PUSH
20204: LD_INT 106
20206: EQUAL
20207: IFFALSE 20217
// sTiger := true ;
20209: LD_ADDR_EXP 74
20213: PUSH
20214: LD_INT 1
20216: ST_TO_ADDR
// if p3 = 107 then
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 107
20224: EQUAL
20225: IFFALSE 20235
// sBomb := true ;
20227: LD_ADDR_EXP 75
20231: PUSH
20232: LD_INT 1
20234: ST_TO_ADDR
// if p3 = 108 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 108
20242: EQUAL
20243: IFFALSE 20253
// sWound := true ;
20245: LD_ADDR_EXP 83
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 109 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 109
20260: EQUAL
20261: IFFALSE 20271
// sBetray := true ;
20263: LD_ADDR_EXP 87
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 110 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 110
20278: EQUAL
20279: IFFALSE 20289
// sContamin := true ;
20281: LD_ADDR_EXP 88
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 111 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 111
20296: EQUAL
20297: IFFALSE 20307
// sOil := true ;
20299: LD_ADDR_EXP 90
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 112 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 112
20314: EQUAL
20315: IFFALSE 20325
// sStu := true ;
20317: LD_ADDR_EXP 94
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 113 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 113
20332: EQUAL
20333: IFFALSE 20343
// sBazooka := true ;
20335: LD_ADDR_EXP 97
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 114 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 114
20350: EQUAL
20351: IFFALSE 20361
// sMortar := true ;
20353: LD_ADDR_EXP 98
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 115 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 115
20368: EQUAL
20369: IFFALSE 20379
// sRanger := true ;
20371: LD_ADDR_EXP 108
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 116 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 116
20386: EQUAL
20387: IFFALSE 20397
// sComputer := true ;
20389: LD_ADDR_EXP 109
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 117 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 117
20404: EQUAL
20405: IFFALSE 20415
// s30 := true ;
20407: LD_ADDR_EXP 110
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 118 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 118
20422: EQUAL
20423: IFFALSE 20433
// s60 := true ;
20425: LD_ADDR_EXP 111
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// end ; if p2 = hack_mode then
20433: LD_VAR 0 2
20437: PUSH
20438: LD_INT 101
20440: EQUAL
20441: IFFALSE 20569
// begin case p3 of 1 :
20443: LD_VAR 0 3
20447: PUSH
20448: LD_INT 1
20450: DOUBLE
20451: EQUAL
20452: IFTRUE 20456
20454: GO 20463
20456: POP
// hHackUnlimitedResources ; 2 :
20457: CALL 32716 0 0
20461: GO 20569
20463: LD_INT 2
20465: DOUBLE
20466: EQUAL
20467: IFTRUE 20471
20469: GO 20478
20471: POP
// hHackSetLevel10 ; 3 :
20472: CALL 32849 0 0
20476: GO 20569
20478: LD_INT 3
20480: DOUBLE
20481: EQUAL
20482: IFTRUE 20486
20484: GO 20493
20486: POP
// hHackSetLevel10YourUnits ; 4 :
20487: CALL 32934 0 0
20491: GO 20569
20493: LD_INT 4
20495: DOUBLE
20496: EQUAL
20497: IFTRUE 20501
20499: GO 20508
20501: POP
// hHackInvincible ; 5 :
20502: CALL 33382 0 0
20506: GO 20569
20508: LD_INT 5
20510: DOUBLE
20511: EQUAL
20512: IFTRUE 20516
20514: GO 20523
20516: POP
// hHackInvisible ; 6 :
20517: CALL 33493 0 0
20521: GO 20569
20523: LD_INT 6
20525: DOUBLE
20526: EQUAL
20527: IFTRUE 20531
20529: GO 20538
20531: POP
// hHackChangeYourSide ; 7 :
20532: CALL 33550 0 0
20536: GO 20569
20538: LD_INT 7
20540: DOUBLE
20541: EQUAL
20542: IFTRUE 20546
20544: GO 20553
20546: POP
// hHackChangeUnitSide ; 8 :
20547: CALL 33592 0 0
20551: GO 20569
20553: LD_INT 8
20555: DOUBLE
20556: EQUAL
20557: IFTRUE 20561
20559: GO 20568
20561: POP
// hHackFog ; end ;
20562: CALL 33693 0 0
20566: GO 20569
20568: POP
// end ; if p2 = game_save_mode then
20569: LD_VAR 0 2
20573: PUSH
20574: LD_INT 102
20576: EQUAL
20577: IFFALSE 20632
// begin if p3 = 1 then
20579: LD_VAR 0 3
20583: PUSH
20584: LD_INT 1
20586: EQUAL
20587: IFFALSE 20599
// globalGameSaveCounter := p4 ;
20589: LD_ADDR_EXP 54
20593: PUSH
20594: LD_VAR 0 4
20598: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 2
20606: EQUAL
20607: PUSH
20608: LD_EXP 54
20612: AND
20613: IFFALSE 20632
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20615: LD_STRING setGameSaveCounter(
20617: PUSH
20618: LD_EXP 54
20622: STR
20623: PUSH
20624: LD_STRING )
20626: STR
20627: PPUSH
20628: CALL_OW 559
// end ; end ;
20632: LD_VAR 0 7
20636: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20637: LD_INT 0
20639: PPUSH
// streamModeActive := false ;
20640: LD_ADDR_EXP 55
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// normalCounter := 36 ;
20648: LD_ADDR_EXP 56
20652: PUSH
20653: LD_INT 36
20655: ST_TO_ADDR
// hardcoreCounter := 18 ;
20656: LD_ADDR_EXP 57
20660: PUSH
20661: LD_INT 18
20663: ST_TO_ADDR
// sRocket := false ;
20664: LD_ADDR_EXP 60
20668: PUSH
20669: LD_INT 0
20671: ST_TO_ADDR
// sSpeed := false ;
20672: LD_ADDR_EXP 59
20676: PUSH
20677: LD_INT 0
20679: ST_TO_ADDR
// sEngine := false ;
20680: LD_ADDR_EXP 61
20684: PUSH
20685: LD_INT 0
20687: ST_TO_ADDR
// sSpec := false ;
20688: LD_ADDR_EXP 58
20692: PUSH
20693: LD_INT 0
20695: ST_TO_ADDR
// sLevel := false ;
20696: LD_ADDR_EXP 62
20700: PUSH
20701: LD_INT 0
20703: ST_TO_ADDR
// sArmoury := false ;
20704: LD_ADDR_EXP 63
20708: PUSH
20709: LD_INT 0
20711: ST_TO_ADDR
// sRadar := false ;
20712: LD_ADDR_EXP 64
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
// sBunker := false ;
20720: LD_ADDR_EXP 65
20724: PUSH
20725: LD_INT 0
20727: ST_TO_ADDR
// sHack := false ;
20728: LD_ADDR_EXP 66
20732: PUSH
20733: LD_INT 0
20735: ST_TO_ADDR
// sFire := false ;
20736: LD_ADDR_EXP 67
20740: PUSH
20741: LD_INT 0
20743: ST_TO_ADDR
// sRefresh := false ;
20744: LD_ADDR_EXP 68
20748: PUSH
20749: LD_INT 0
20751: ST_TO_ADDR
// sExp := false ;
20752: LD_ADDR_EXP 69
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// sDepot := false ;
20760: LD_ADDR_EXP 70
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// sFlag := false ;
20768: LD_ADDR_EXP 71
20772: PUSH
20773: LD_INT 0
20775: ST_TO_ADDR
// sKamikadze := false ;
20776: LD_ADDR_EXP 79
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// sTroll := false ;
20784: LD_ADDR_EXP 80
20788: PUSH
20789: LD_INT 0
20791: ST_TO_ADDR
// sSlow := false ;
20792: LD_ADDR_EXP 81
20796: PUSH
20797: LD_INT 0
20799: ST_TO_ADDR
// sLack := false ;
20800: LD_ADDR_EXP 82
20804: PUSH
20805: LD_INT 0
20807: ST_TO_ADDR
// sTank := false ;
20808: LD_ADDR_EXP 84
20812: PUSH
20813: LD_INT 0
20815: ST_TO_ADDR
// sRemote := false ;
20816: LD_ADDR_EXP 85
20820: PUSH
20821: LD_INT 0
20823: ST_TO_ADDR
// sPowell := false ;
20824: LD_ADDR_EXP 86
20828: PUSH
20829: LD_INT 0
20831: ST_TO_ADDR
// sTeleport := false ;
20832: LD_ADDR_EXP 89
20836: PUSH
20837: LD_INT 0
20839: ST_TO_ADDR
// sOilTower := false ;
20840: LD_ADDR_EXP 91
20844: PUSH
20845: LD_INT 0
20847: ST_TO_ADDR
// sShovel := false ;
20848: LD_ADDR_EXP 92
20852: PUSH
20853: LD_INT 0
20855: ST_TO_ADDR
// sSheik := false ;
20856: LD_ADDR_EXP 93
20860: PUSH
20861: LD_INT 0
20863: ST_TO_ADDR
// sEarthquake := false ;
20864: LD_ADDR_EXP 95
20868: PUSH
20869: LD_INT 0
20871: ST_TO_ADDR
// sAI := false ;
20872: LD_ADDR_EXP 96
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// sCargo := false ;
20880: LD_ADDR_EXP 99
20884: PUSH
20885: LD_INT 0
20887: ST_TO_ADDR
// sDLaser := false ;
20888: LD_ADDR_EXP 100
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
// sExchange := false ;
20896: LD_ADDR_EXP 101
20900: PUSH
20901: LD_INT 0
20903: ST_TO_ADDR
// sFac := false ;
20904: LD_ADDR_EXP 102
20908: PUSH
20909: LD_INT 0
20911: ST_TO_ADDR
// sPower := false ;
20912: LD_ADDR_EXP 103
20916: PUSH
20917: LD_INT 0
20919: ST_TO_ADDR
// sRandom := false ;
20920: LD_ADDR_EXP 104
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// sShield := false ;
20928: LD_ADDR_EXP 105
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// sTime := false ;
20936: LD_ADDR_EXP 106
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// sTools := false ;
20944: LD_ADDR_EXP 107
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// sSold := false ;
20952: LD_ADDR_EXP 72
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sDiff := false ;
20960: LD_ADDR_EXP 73
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// sFog := false ;
20968: LD_ADDR_EXP 76
20972: PUSH
20973: LD_INT 0
20975: ST_TO_ADDR
// sReset := false ;
20976: LD_ADDR_EXP 77
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
// sSun := false ;
20984: LD_ADDR_EXP 78
20988: PUSH
20989: LD_INT 0
20991: ST_TO_ADDR
// sTiger := false ;
20992: LD_ADDR_EXP 74
20996: PUSH
20997: LD_INT 0
20999: ST_TO_ADDR
// sBomb := false ;
21000: LD_ADDR_EXP 75
21004: PUSH
21005: LD_INT 0
21007: ST_TO_ADDR
// sWound := false ;
21008: LD_ADDR_EXP 83
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// sBetray := false ;
21016: LD_ADDR_EXP 87
21020: PUSH
21021: LD_INT 0
21023: ST_TO_ADDR
// sContamin := false ;
21024: LD_ADDR_EXP 88
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// sOil := false ;
21032: LD_ADDR_EXP 90
21036: PUSH
21037: LD_INT 0
21039: ST_TO_ADDR
// sStu := false ;
21040: LD_ADDR_EXP 94
21044: PUSH
21045: LD_INT 0
21047: ST_TO_ADDR
// sBazooka := false ;
21048: LD_ADDR_EXP 97
21052: PUSH
21053: LD_INT 0
21055: ST_TO_ADDR
// sMortar := false ;
21056: LD_ADDR_EXP 98
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// sRanger := false ;
21064: LD_ADDR_EXP 108
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// sComputer := false ;
21072: LD_ADDR_EXP 109
21076: PUSH
21077: LD_INT 0
21079: ST_TO_ADDR
// s30 := false ;
21080: LD_ADDR_EXP 110
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// s60 := false ;
21088: LD_ADDR_EXP 111
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// end ;
21096: LD_VAR 0 1
21100: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21101: LD_INT 0
21103: PPUSH
21104: PPUSH
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
// result := [ ] ;
21110: LD_ADDR_VAR 0 2
21114: PUSH
21115: EMPTY
21116: ST_TO_ADDR
// if campaign_id = 1 then
21117: LD_OWVAR 69
21121: PUSH
21122: LD_INT 1
21124: EQUAL
21125: IFFALSE 24291
// begin case mission_number of 1 :
21127: LD_OWVAR 70
21131: PUSH
21132: LD_INT 1
21134: DOUBLE
21135: EQUAL
21136: IFTRUE 21140
21138: GO 21216
21140: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21141: LD_ADDR_VAR 0 2
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: LD_INT 4
21151: PUSH
21152: LD_INT 11
21154: PUSH
21155: LD_INT 12
21157: PUSH
21158: LD_INT 15
21160: PUSH
21161: LD_INT 16
21163: PUSH
21164: LD_INT 22
21166: PUSH
21167: LD_INT 23
21169: PUSH
21170: LD_INT 26
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 101
21186: PUSH
21187: LD_INT 102
21189: PUSH
21190: LD_INT 106
21192: PUSH
21193: LD_INT 116
21195: PUSH
21196: LD_INT 117
21198: PUSH
21199: LD_INT 118
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: ST_TO_ADDR
21214: GO 24289
21216: LD_INT 2
21218: DOUBLE
21219: EQUAL
21220: IFTRUE 21224
21222: GO 21308
21224: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21225: LD_ADDR_VAR 0 2
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 4
21235: PUSH
21236: LD_INT 11
21238: PUSH
21239: LD_INT 12
21241: PUSH
21242: LD_INT 15
21244: PUSH
21245: LD_INT 16
21247: PUSH
21248: LD_INT 22
21250: PUSH
21251: LD_INT 23
21253: PUSH
21254: LD_INT 26
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 101
21270: PUSH
21271: LD_INT 102
21273: PUSH
21274: LD_INT 105
21276: PUSH
21277: LD_INT 106
21279: PUSH
21280: LD_INT 108
21282: PUSH
21283: LD_INT 116
21285: PUSH
21286: LD_INT 117
21288: PUSH
21289: LD_INT 118
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: ST_TO_ADDR
21306: GO 24289
21308: LD_INT 3
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21404
21316: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21317: LD_ADDR_VAR 0 2
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 4
21327: PUSH
21328: LD_INT 5
21330: PUSH
21331: LD_INT 11
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: LD_INT 15
21339: PUSH
21340: LD_INT 16
21342: PUSH
21343: LD_INT 22
21345: PUSH
21346: LD_INT 26
21348: PUSH
21349: LD_INT 36
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 101
21366: PUSH
21367: LD_INT 102
21369: PUSH
21370: LD_INT 105
21372: PUSH
21373: LD_INT 106
21375: PUSH
21376: LD_INT 108
21378: PUSH
21379: LD_INT 116
21381: PUSH
21382: LD_INT 117
21384: PUSH
21385: LD_INT 118
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: ST_TO_ADDR
21402: GO 24289
21404: LD_INT 4
21406: DOUBLE
21407: EQUAL
21408: IFTRUE 21412
21410: GO 21508
21412: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21413: LD_ADDR_VAR 0 2
21417: PUSH
21418: LD_INT 2
21420: PUSH
21421: LD_INT 4
21423: PUSH
21424: LD_INT 5
21426: PUSH
21427: LD_INT 8
21429: PUSH
21430: LD_INT 11
21432: PUSH
21433: LD_INT 12
21435: PUSH
21436: LD_INT 15
21438: PUSH
21439: LD_INT 16
21441: PUSH
21442: LD_INT 22
21444: PUSH
21445: LD_INT 23
21447: PUSH
21448: LD_INT 26
21450: PUSH
21451: LD_INT 36
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 101
21470: PUSH
21471: LD_INT 102
21473: PUSH
21474: LD_INT 105
21476: PUSH
21477: LD_INT 106
21479: PUSH
21480: LD_INT 108
21482: PUSH
21483: LD_INT 116
21485: PUSH
21486: LD_INT 117
21488: PUSH
21489: LD_INT 118
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: ST_TO_ADDR
21506: GO 24289
21508: LD_INT 5
21510: DOUBLE
21511: EQUAL
21512: IFTRUE 21516
21514: GO 21628
21516: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21517: LD_ADDR_VAR 0 2
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: LD_INT 4
21527: PUSH
21528: LD_INT 5
21530: PUSH
21531: LD_INT 6
21533: PUSH
21534: LD_INT 8
21536: PUSH
21537: LD_INT 11
21539: PUSH
21540: LD_INT 12
21542: PUSH
21543: LD_INT 15
21545: PUSH
21546: LD_INT 16
21548: PUSH
21549: LD_INT 22
21551: PUSH
21552: LD_INT 23
21554: PUSH
21555: LD_INT 25
21557: PUSH
21558: LD_INT 26
21560: PUSH
21561: LD_INT 36
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 101
21582: PUSH
21583: LD_INT 102
21585: PUSH
21586: LD_INT 105
21588: PUSH
21589: LD_INT 106
21591: PUSH
21592: LD_INT 108
21594: PUSH
21595: LD_INT 109
21597: PUSH
21598: LD_INT 112
21600: PUSH
21601: LD_INT 116
21603: PUSH
21604: LD_INT 117
21606: PUSH
21607: LD_INT 118
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: ST_TO_ADDR
21626: GO 24289
21628: LD_INT 6
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21768
21636: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21637: LD_ADDR_VAR 0 2
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 4
21647: PUSH
21648: LD_INT 5
21650: PUSH
21651: LD_INT 6
21653: PUSH
21654: LD_INT 8
21656: PUSH
21657: LD_INT 11
21659: PUSH
21660: LD_INT 12
21662: PUSH
21663: LD_INT 15
21665: PUSH
21666: LD_INT 16
21668: PUSH
21669: LD_INT 20
21671: PUSH
21672: LD_INT 21
21674: PUSH
21675: LD_INT 22
21677: PUSH
21678: LD_INT 23
21680: PUSH
21681: LD_INT 25
21683: PUSH
21684: LD_INT 26
21686: PUSH
21687: LD_INT 30
21689: PUSH
21690: LD_INT 31
21692: PUSH
21693: LD_INT 32
21695: PUSH
21696: LD_INT 36
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 101
21722: PUSH
21723: LD_INT 102
21725: PUSH
21726: LD_INT 105
21728: PUSH
21729: LD_INT 106
21731: PUSH
21732: LD_INT 108
21734: PUSH
21735: LD_INT 109
21737: PUSH
21738: LD_INT 112
21740: PUSH
21741: LD_INT 116
21743: PUSH
21744: LD_INT 117
21746: PUSH
21747: LD_INT 118
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: ST_TO_ADDR
21766: GO 24289
21768: LD_INT 7
21770: DOUBLE
21771: EQUAL
21772: IFTRUE 21776
21774: GO 21888
21776: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21777: LD_ADDR_VAR 0 2
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: LD_INT 4
21787: PUSH
21788: LD_INT 5
21790: PUSH
21791: LD_INT 7
21793: PUSH
21794: LD_INT 11
21796: PUSH
21797: LD_INT 12
21799: PUSH
21800: LD_INT 15
21802: PUSH
21803: LD_INT 16
21805: PUSH
21806: LD_INT 20
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_INT 23
21817: PUSH
21818: LD_INT 25
21820: PUSH
21821: LD_INT 26
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 101
21842: PUSH
21843: LD_INT 102
21845: PUSH
21846: LD_INT 103
21848: PUSH
21849: LD_INT 105
21851: PUSH
21852: LD_INT 106
21854: PUSH
21855: LD_INT 108
21857: PUSH
21858: LD_INT 112
21860: PUSH
21861: LD_INT 116
21863: PUSH
21864: LD_INT 117
21866: PUSH
21867: LD_INT 118
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: ST_TO_ADDR
21886: GO 24289
21888: LD_INT 8
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 22036
21896: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21897: LD_ADDR_VAR 0 2
21901: PUSH
21902: LD_INT 2
21904: PUSH
21905: LD_INT 4
21907: PUSH
21908: LD_INT 5
21910: PUSH
21911: LD_INT 6
21913: PUSH
21914: LD_INT 7
21916: PUSH
21917: LD_INT 8
21919: PUSH
21920: LD_INT 11
21922: PUSH
21923: LD_INT 12
21925: PUSH
21926: LD_INT 15
21928: PUSH
21929: LD_INT 16
21931: PUSH
21932: LD_INT 20
21934: PUSH
21935: LD_INT 21
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_INT 23
21943: PUSH
21944: LD_INT 25
21946: PUSH
21947: LD_INT 26
21949: PUSH
21950: LD_INT 30
21952: PUSH
21953: LD_INT 31
21955: PUSH
21956: LD_INT 32
21958: PUSH
21959: LD_INT 36
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 101
21986: PUSH
21987: LD_INT 102
21989: PUSH
21990: LD_INT 103
21992: PUSH
21993: LD_INT 105
21995: PUSH
21996: LD_INT 106
21998: PUSH
21999: LD_INT 108
22001: PUSH
22002: LD_INT 109
22004: PUSH
22005: LD_INT 112
22007: PUSH
22008: LD_INT 116
22010: PUSH
22011: LD_INT 117
22013: PUSH
22014: LD_INT 118
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: ST_TO_ADDR
22034: GO 24289
22036: LD_INT 9
22038: DOUBLE
22039: EQUAL
22040: IFTRUE 22044
22042: GO 22192
22044: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22045: LD_ADDR_VAR 0 2
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 4
22055: PUSH
22056: LD_INT 5
22058: PUSH
22059: LD_INT 6
22061: PUSH
22062: LD_INT 7
22064: PUSH
22065: LD_INT 8
22067: PUSH
22068: LD_INT 11
22070: PUSH
22071: LD_INT 12
22073: PUSH
22074: LD_INT 15
22076: PUSH
22077: LD_INT 16
22079: PUSH
22080: LD_INT 20
22082: PUSH
22083: LD_INT 21
22085: PUSH
22086: LD_INT 22
22088: PUSH
22089: LD_INT 23
22091: PUSH
22092: LD_INT 25
22094: PUSH
22095: LD_INT 26
22097: PUSH
22098: LD_INT 28
22100: PUSH
22101: LD_INT 30
22103: PUSH
22104: LD_INT 31
22106: PUSH
22107: LD_INT 32
22109: PUSH
22110: LD_INT 36
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 101
22138: PUSH
22139: LD_INT 102
22141: PUSH
22142: LD_INT 103
22144: PUSH
22145: LD_INT 105
22147: PUSH
22148: LD_INT 106
22150: PUSH
22151: LD_INT 108
22153: PUSH
22154: LD_INT 109
22156: PUSH
22157: LD_INT 112
22159: PUSH
22160: LD_INT 114
22162: PUSH
22163: LD_INT 116
22165: PUSH
22166: LD_INT 117
22168: PUSH
22169: LD_INT 118
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: ST_TO_ADDR
22190: GO 24289
22192: LD_INT 10
22194: DOUBLE
22195: EQUAL
22196: IFTRUE 22200
22198: GO 22396
22200: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22201: LD_ADDR_VAR 0 2
22205: PUSH
22206: LD_INT 2
22208: PUSH
22209: LD_INT 4
22211: PUSH
22212: LD_INT 5
22214: PUSH
22215: LD_INT 6
22217: PUSH
22218: LD_INT 7
22220: PUSH
22221: LD_INT 8
22223: PUSH
22224: LD_INT 9
22226: PUSH
22227: LD_INT 10
22229: PUSH
22230: LD_INT 11
22232: PUSH
22233: LD_INT 12
22235: PUSH
22236: LD_INT 13
22238: PUSH
22239: LD_INT 14
22241: PUSH
22242: LD_INT 15
22244: PUSH
22245: LD_INT 16
22247: PUSH
22248: LD_INT 17
22250: PUSH
22251: LD_INT 18
22253: PUSH
22254: LD_INT 19
22256: PUSH
22257: LD_INT 20
22259: PUSH
22260: LD_INT 21
22262: PUSH
22263: LD_INT 22
22265: PUSH
22266: LD_INT 23
22268: PUSH
22269: LD_INT 24
22271: PUSH
22272: LD_INT 25
22274: PUSH
22275: LD_INT 26
22277: PUSH
22278: LD_INT 28
22280: PUSH
22281: LD_INT 30
22283: PUSH
22284: LD_INT 31
22286: PUSH
22287: LD_INT 32
22289: PUSH
22290: LD_INT 36
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 101
22326: PUSH
22327: LD_INT 102
22329: PUSH
22330: LD_INT 103
22332: PUSH
22333: LD_INT 104
22335: PUSH
22336: LD_INT 105
22338: PUSH
22339: LD_INT 106
22341: PUSH
22342: LD_INT 107
22344: PUSH
22345: LD_INT 108
22347: PUSH
22348: LD_INT 109
22350: PUSH
22351: LD_INT 110
22353: PUSH
22354: LD_INT 111
22356: PUSH
22357: LD_INT 112
22359: PUSH
22360: LD_INT 114
22362: PUSH
22363: LD_INT 116
22365: PUSH
22366: LD_INT 117
22368: PUSH
22369: LD_INT 118
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: ST_TO_ADDR
22394: GO 24289
22396: LD_INT 11
22398: DOUBLE
22399: EQUAL
22400: IFTRUE 22404
22402: GO 22608
22404: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22405: LD_ADDR_VAR 0 2
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: LD_INT 3
22415: PUSH
22416: LD_INT 4
22418: PUSH
22419: LD_INT 5
22421: PUSH
22422: LD_INT 6
22424: PUSH
22425: LD_INT 7
22427: PUSH
22428: LD_INT 8
22430: PUSH
22431: LD_INT 9
22433: PUSH
22434: LD_INT 10
22436: PUSH
22437: LD_INT 11
22439: PUSH
22440: LD_INT 12
22442: PUSH
22443: LD_INT 13
22445: PUSH
22446: LD_INT 14
22448: PUSH
22449: LD_INT 15
22451: PUSH
22452: LD_INT 16
22454: PUSH
22455: LD_INT 17
22457: PUSH
22458: LD_INT 18
22460: PUSH
22461: LD_INT 19
22463: PUSH
22464: LD_INT 20
22466: PUSH
22467: LD_INT 21
22469: PUSH
22470: LD_INT 22
22472: PUSH
22473: LD_INT 23
22475: PUSH
22476: LD_INT 24
22478: PUSH
22479: LD_INT 25
22481: PUSH
22482: LD_INT 26
22484: PUSH
22485: LD_INT 28
22487: PUSH
22488: LD_INT 30
22490: PUSH
22491: LD_INT 31
22493: PUSH
22494: LD_INT 32
22496: PUSH
22497: LD_INT 34
22499: PUSH
22500: LD_INT 36
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 101
22538: PUSH
22539: LD_INT 102
22541: PUSH
22542: LD_INT 103
22544: PUSH
22545: LD_INT 104
22547: PUSH
22548: LD_INT 105
22550: PUSH
22551: LD_INT 106
22553: PUSH
22554: LD_INT 107
22556: PUSH
22557: LD_INT 108
22559: PUSH
22560: LD_INT 109
22562: PUSH
22563: LD_INT 110
22565: PUSH
22566: LD_INT 111
22568: PUSH
22569: LD_INT 112
22571: PUSH
22572: LD_INT 114
22574: PUSH
22575: LD_INT 116
22577: PUSH
22578: LD_INT 117
22580: PUSH
22581: LD_INT 118
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: ST_TO_ADDR
22606: GO 24289
22608: LD_INT 12
22610: DOUBLE
22611: EQUAL
22612: IFTRUE 22616
22614: GO 22836
22616: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22617: LD_ADDR_VAR 0 2
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 3
22630: PUSH
22631: LD_INT 4
22633: PUSH
22634: LD_INT 5
22636: PUSH
22637: LD_INT 6
22639: PUSH
22640: LD_INT 7
22642: PUSH
22643: LD_INT 8
22645: PUSH
22646: LD_INT 9
22648: PUSH
22649: LD_INT 10
22651: PUSH
22652: LD_INT 11
22654: PUSH
22655: LD_INT 12
22657: PUSH
22658: LD_INT 13
22660: PUSH
22661: LD_INT 14
22663: PUSH
22664: LD_INT 15
22666: PUSH
22667: LD_INT 16
22669: PUSH
22670: LD_INT 17
22672: PUSH
22673: LD_INT 18
22675: PUSH
22676: LD_INT 19
22678: PUSH
22679: LD_INT 20
22681: PUSH
22682: LD_INT 21
22684: PUSH
22685: LD_INT 22
22687: PUSH
22688: LD_INT 23
22690: PUSH
22691: LD_INT 24
22693: PUSH
22694: LD_INT 25
22696: PUSH
22697: LD_INT 26
22699: PUSH
22700: LD_INT 27
22702: PUSH
22703: LD_INT 28
22705: PUSH
22706: LD_INT 30
22708: PUSH
22709: LD_INT 31
22711: PUSH
22712: LD_INT 32
22714: PUSH
22715: LD_INT 33
22717: PUSH
22718: LD_INT 34
22720: PUSH
22721: LD_INT 36
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 101
22762: PUSH
22763: LD_INT 102
22765: PUSH
22766: LD_INT 103
22768: PUSH
22769: LD_INT 104
22771: PUSH
22772: LD_INT 105
22774: PUSH
22775: LD_INT 106
22777: PUSH
22778: LD_INT 107
22780: PUSH
22781: LD_INT 108
22783: PUSH
22784: LD_INT 109
22786: PUSH
22787: LD_INT 110
22789: PUSH
22790: LD_INT 111
22792: PUSH
22793: LD_INT 112
22795: PUSH
22796: LD_INT 113
22798: PUSH
22799: LD_INT 114
22801: PUSH
22802: LD_INT 116
22804: PUSH
22805: LD_INT 117
22807: PUSH
22808: LD_INT 118
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: ST_TO_ADDR
22834: GO 24289
22836: LD_INT 13
22838: DOUBLE
22839: EQUAL
22840: IFTRUE 22844
22842: GO 23052
22844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22845: LD_ADDR_VAR 0 2
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: LD_INT 3
22858: PUSH
22859: LD_INT 4
22861: PUSH
22862: LD_INT 5
22864: PUSH
22865: LD_INT 8
22867: PUSH
22868: LD_INT 9
22870: PUSH
22871: LD_INT 10
22873: PUSH
22874: LD_INT 11
22876: PUSH
22877: LD_INT 12
22879: PUSH
22880: LD_INT 14
22882: PUSH
22883: LD_INT 15
22885: PUSH
22886: LD_INT 16
22888: PUSH
22889: LD_INT 17
22891: PUSH
22892: LD_INT 18
22894: PUSH
22895: LD_INT 19
22897: PUSH
22898: LD_INT 20
22900: PUSH
22901: LD_INT 21
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_INT 23
22909: PUSH
22910: LD_INT 24
22912: PUSH
22913: LD_INT 25
22915: PUSH
22916: LD_INT 26
22918: PUSH
22919: LD_INT 27
22921: PUSH
22922: LD_INT 28
22924: PUSH
22925: LD_INT 30
22927: PUSH
22928: LD_INT 31
22930: PUSH
22931: LD_INT 32
22933: PUSH
22934: LD_INT 33
22936: PUSH
22937: LD_INT 34
22939: PUSH
22940: LD_INT 36
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 101
22978: PUSH
22979: LD_INT 102
22981: PUSH
22982: LD_INT 103
22984: PUSH
22985: LD_INT 104
22987: PUSH
22988: LD_INT 105
22990: PUSH
22991: LD_INT 106
22993: PUSH
22994: LD_INT 107
22996: PUSH
22997: LD_INT 108
22999: PUSH
23000: LD_INT 109
23002: PUSH
23003: LD_INT 110
23005: PUSH
23006: LD_INT 111
23008: PUSH
23009: LD_INT 112
23011: PUSH
23012: LD_INT 113
23014: PUSH
23015: LD_INT 114
23017: PUSH
23018: LD_INT 116
23020: PUSH
23021: LD_INT 117
23023: PUSH
23024: LD_INT 118
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: ST_TO_ADDR
23050: GO 24289
23052: LD_INT 14
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23284
23060: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23061: LD_ADDR_VAR 0 2
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 3
23074: PUSH
23075: LD_INT 4
23077: PUSH
23078: LD_INT 5
23080: PUSH
23081: LD_INT 6
23083: PUSH
23084: LD_INT 7
23086: PUSH
23087: LD_INT 8
23089: PUSH
23090: LD_INT 9
23092: PUSH
23093: LD_INT 10
23095: PUSH
23096: LD_INT 11
23098: PUSH
23099: LD_INT 12
23101: PUSH
23102: LD_INT 13
23104: PUSH
23105: LD_INT 14
23107: PUSH
23108: LD_INT 15
23110: PUSH
23111: LD_INT 16
23113: PUSH
23114: LD_INT 17
23116: PUSH
23117: LD_INT 18
23119: PUSH
23120: LD_INT 19
23122: PUSH
23123: LD_INT 20
23125: PUSH
23126: LD_INT 21
23128: PUSH
23129: LD_INT 22
23131: PUSH
23132: LD_INT 23
23134: PUSH
23135: LD_INT 24
23137: PUSH
23138: LD_INT 25
23140: PUSH
23141: LD_INT 26
23143: PUSH
23144: LD_INT 27
23146: PUSH
23147: LD_INT 28
23149: PUSH
23150: LD_INT 29
23152: PUSH
23153: LD_INT 30
23155: PUSH
23156: LD_INT 31
23158: PUSH
23159: LD_INT 32
23161: PUSH
23162: LD_INT 33
23164: PUSH
23165: LD_INT 34
23167: PUSH
23168: LD_INT 36
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 101
23210: PUSH
23211: LD_INT 102
23213: PUSH
23214: LD_INT 103
23216: PUSH
23217: LD_INT 104
23219: PUSH
23220: LD_INT 105
23222: PUSH
23223: LD_INT 106
23225: PUSH
23226: LD_INT 107
23228: PUSH
23229: LD_INT 108
23231: PUSH
23232: LD_INT 109
23234: PUSH
23235: LD_INT 110
23237: PUSH
23238: LD_INT 111
23240: PUSH
23241: LD_INT 112
23243: PUSH
23244: LD_INT 113
23246: PUSH
23247: LD_INT 114
23249: PUSH
23250: LD_INT 116
23252: PUSH
23253: LD_INT 117
23255: PUSH
23256: LD_INT 118
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: ST_TO_ADDR
23282: GO 24289
23284: LD_INT 15
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23516
23292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23293: LD_ADDR_VAR 0 2
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: LD_INT 2
23303: PUSH
23304: LD_INT 3
23306: PUSH
23307: LD_INT 4
23309: PUSH
23310: LD_INT 5
23312: PUSH
23313: LD_INT 6
23315: PUSH
23316: LD_INT 7
23318: PUSH
23319: LD_INT 8
23321: PUSH
23322: LD_INT 9
23324: PUSH
23325: LD_INT 10
23327: PUSH
23328: LD_INT 11
23330: PUSH
23331: LD_INT 12
23333: PUSH
23334: LD_INT 13
23336: PUSH
23337: LD_INT 14
23339: PUSH
23340: LD_INT 15
23342: PUSH
23343: LD_INT 16
23345: PUSH
23346: LD_INT 17
23348: PUSH
23349: LD_INT 18
23351: PUSH
23352: LD_INT 19
23354: PUSH
23355: LD_INT 20
23357: PUSH
23358: LD_INT 21
23360: PUSH
23361: LD_INT 22
23363: PUSH
23364: LD_INT 23
23366: PUSH
23367: LD_INT 24
23369: PUSH
23370: LD_INT 25
23372: PUSH
23373: LD_INT 26
23375: PUSH
23376: LD_INT 27
23378: PUSH
23379: LD_INT 28
23381: PUSH
23382: LD_INT 29
23384: PUSH
23385: LD_INT 30
23387: PUSH
23388: LD_INT 31
23390: PUSH
23391: LD_INT 32
23393: PUSH
23394: LD_INT 33
23396: PUSH
23397: LD_INT 34
23399: PUSH
23400: LD_INT 36
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 101
23442: PUSH
23443: LD_INT 102
23445: PUSH
23446: LD_INT 103
23448: PUSH
23449: LD_INT 104
23451: PUSH
23452: LD_INT 105
23454: PUSH
23455: LD_INT 106
23457: PUSH
23458: LD_INT 107
23460: PUSH
23461: LD_INT 108
23463: PUSH
23464: LD_INT 109
23466: PUSH
23467: LD_INT 110
23469: PUSH
23470: LD_INT 111
23472: PUSH
23473: LD_INT 112
23475: PUSH
23476: LD_INT 113
23478: PUSH
23479: LD_INT 114
23481: PUSH
23482: LD_INT 116
23484: PUSH
23485: LD_INT 117
23487: PUSH
23488: LD_INT 118
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: ST_TO_ADDR
23514: GO 24289
23516: LD_INT 16
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23524
23522: GO 23660
23524: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23525: LD_ADDR_VAR 0 2
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 4
23535: PUSH
23536: LD_INT 5
23538: PUSH
23539: LD_INT 7
23541: PUSH
23542: LD_INT 11
23544: PUSH
23545: LD_INT 12
23547: PUSH
23548: LD_INT 15
23550: PUSH
23551: LD_INT 16
23553: PUSH
23554: LD_INT 20
23556: PUSH
23557: LD_INT 21
23559: PUSH
23560: LD_INT 22
23562: PUSH
23563: LD_INT 23
23565: PUSH
23566: LD_INT 25
23568: PUSH
23569: LD_INT 26
23571: PUSH
23572: LD_INT 30
23574: PUSH
23575: LD_INT 31
23577: PUSH
23578: LD_INT 32
23580: PUSH
23581: LD_INT 33
23583: PUSH
23584: LD_INT 34
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 101
23610: PUSH
23611: LD_INT 102
23613: PUSH
23614: LD_INT 103
23616: PUSH
23617: LD_INT 106
23619: PUSH
23620: LD_INT 108
23622: PUSH
23623: LD_INT 112
23625: PUSH
23626: LD_INT 113
23628: PUSH
23629: LD_INT 114
23631: PUSH
23632: LD_INT 116
23634: PUSH
23635: LD_INT 117
23637: PUSH
23638: LD_INT 118
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: ST_TO_ADDR
23658: GO 24289
23660: LD_INT 17
23662: DOUBLE
23663: EQUAL
23664: IFTRUE 23668
23666: GO 23892
23668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 2
23679: PUSH
23680: LD_INT 3
23682: PUSH
23683: LD_INT 4
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: LD_INT 6
23691: PUSH
23692: LD_INT 7
23694: PUSH
23695: LD_INT 8
23697: PUSH
23698: LD_INT 9
23700: PUSH
23701: LD_INT 10
23703: PUSH
23704: LD_INT 11
23706: PUSH
23707: LD_INT 12
23709: PUSH
23710: LD_INT 13
23712: PUSH
23713: LD_INT 14
23715: PUSH
23716: LD_INT 15
23718: PUSH
23719: LD_INT 16
23721: PUSH
23722: LD_INT 17
23724: PUSH
23725: LD_INT 18
23727: PUSH
23728: LD_INT 19
23730: PUSH
23731: LD_INT 20
23733: PUSH
23734: LD_INT 21
23736: PUSH
23737: LD_INT 22
23739: PUSH
23740: LD_INT 23
23742: PUSH
23743: LD_INT 24
23745: PUSH
23746: LD_INT 25
23748: PUSH
23749: LD_INT 26
23751: PUSH
23752: LD_INT 27
23754: PUSH
23755: LD_INT 28
23757: PUSH
23758: LD_INT 29
23760: PUSH
23761: LD_INT 30
23763: PUSH
23764: LD_INT 31
23766: PUSH
23767: LD_INT 32
23769: PUSH
23770: LD_INT 33
23772: PUSH
23773: LD_INT 34
23775: PUSH
23776: LD_INT 36
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 101
23818: PUSH
23819: LD_INT 102
23821: PUSH
23822: LD_INT 103
23824: PUSH
23825: LD_INT 104
23827: PUSH
23828: LD_INT 105
23830: PUSH
23831: LD_INT 106
23833: PUSH
23834: LD_INT 107
23836: PUSH
23837: LD_INT 108
23839: PUSH
23840: LD_INT 109
23842: PUSH
23843: LD_INT 110
23845: PUSH
23846: LD_INT 111
23848: PUSH
23849: LD_INT 112
23851: PUSH
23852: LD_INT 113
23854: PUSH
23855: LD_INT 114
23857: PUSH
23858: LD_INT 116
23860: PUSH
23861: LD_INT 117
23863: PUSH
23864: LD_INT 118
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: ST_TO_ADDR
23890: GO 24289
23892: LD_INT 18
23894: DOUBLE
23895: EQUAL
23896: IFTRUE 23900
23898: GO 24048
23900: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 4
23911: PUSH
23912: LD_INT 5
23914: PUSH
23915: LD_INT 7
23917: PUSH
23918: LD_INT 11
23920: PUSH
23921: LD_INT 12
23923: PUSH
23924: LD_INT 15
23926: PUSH
23927: LD_INT 16
23929: PUSH
23930: LD_INT 20
23932: PUSH
23933: LD_INT 21
23935: PUSH
23936: LD_INT 22
23938: PUSH
23939: LD_INT 23
23941: PUSH
23942: LD_INT 25
23944: PUSH
23945: LD_INT 26
23947: PUSH
23948: LD_INT 30
23950: PUSH
23951: LD_INT 31
23953: PUSH
23954: LD_INT 32
23956: PUSH
23957: LD_INT 33
23959: PUSH
23960: LD_INT 34
23962: PUSH
23963: LD_INT 35
23965: PUSH
23966: LD_INT 36
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 101
23994: PUSH
23995: LD_INT 102
23997: PUSH
23998: LD_INT 103
24000: PUSH
24001: LD_INT 106
24003: PUSH
24004: LD_INT 108
24006: PUSH
24007: LD_INT 112
24009: PUSH
24010: LD_INT 113
24012: PUSH
24013: LD_INT 114
24015: PUSH
24016: LD_INT 115
24018: PUSH
24019: LD_INT 116
24021: PUSH
24022: LD_INT 117
24024: PUSH
24025: LD_INT 118
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: ST_TO_ADDR
24046: GO 24289
24048: LD_INT 19
24050: DOUBLE
24051: EQUAL
24052: IFTRUE 24056
24054: GO 24288
24056: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24057: LD_ADDR_VAR 0 2
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: LD_INT 3
24070: PUSH
24071: LD_INT 4
24073: PUSH
24074: LD_INT 5
24076: PUSH
24077: LD_INT 6
24079: PUSH
24080: LD_INT 7
24082: PUSH
24083: LD_INT 8
24085: PUSH
24086: LD_INT 9
24088: PUSH
24089: LD_INT 10
24091: PUSH
24092: LD_INT 11
24094: PUSH
24095: LD_INT 12
24097: PUSH
24098: LD_INT 13
24100: PUSH
24101: LD_INT 14
24103: PUSH
24104: LD_INT 15
24106: PUSH
24107: LD_INT 16
24109: PUSH
24110: LD_INT 17
24112: PUSH
24113: LD_INT 18
24115: PUSH
24116: LD_INT 19
24118: PUSH
24119: LD_INT 20
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 22
24127: PUSH
24128: LD_INT 23
24130: PUSH
24131: LD_INT 24
24133: PUSH
24134: LD_INT 25
24136: PUSH
24137: LD_INT 26
24139: PUSH
24140: LD_INT 27
24142: PUSH
24143: LD_INT 28
24145: PUSH
24146: LD_INT 29
24148: PUSH
24149: LD_INT 30
24151: PUSH
24152: LD_INT 31
24154: PUSH
24155: LD_INT 32
24157: PUSH
24158: LD_INT 33
24160: PUSH
24161: LD_INT 34
24163: PUSH
24164: LD_INT 35
24166: PUSH
24167: LD_INT 36
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 101
24210: PUSH
24211: LD_INT 102
24213: PUSH
24214: LD_INT 103
24216: PUSH
24217: LD_INT 104
24219: PUSH
24220: LD_INT 105
24222: PUSH
24223: LD_INT 106
24225: PUSH
24226: LD_INT 107
24228: PUSH
24229: LD_INT 108
24231: PUSH
24232: LD_INT 109
24234: PUSH
24235: LD_INT 110
24237: PUSH
24238: LD_INT 111
24240: PUSH
24241: LD_INT 112
24243: PUSH
24244: LD_INT 113
24246: PUSH
24247: LD_INT 114
24249: PUSH
24250: LD_INT 115
24252: PUSH
24253: LD_INT 116
24255: PUSH
24256: LD_INT 117
24258: PUSH
24259: LD_INT 118
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: ST_TO_ADDR
24286: GO 24289
24288: POP
// end else
24289: GO 24520
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24291: LD_ADDR_VAR 0 2
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: LD_INT 3
24304: PUSH
24305: LD_INT 4
24307: PUSH
24308: LD_INT 5
24310: PUSH
24311: LD_INT 6
24313: PUSH
24314: LD_INT 7
24316: PUSH
24317: LD_INT 8
24319: PUSH
24320: LD_INT 9
24322: PUSH
24323: LD_INT 10
24325: PUSH
24326: LD_INT 11
24328: PUSH
24329: LD_INT 12
24331: PUSH
24332: LD_INT 13
24334: PUSH
24335: LD_INT 14
24337: PUSH
24338: LD_INT 15
24340: PUSH
24341: LD_INT 16
24343: PUSH
24344: LD_INT 17
24346: PUSH
24347: LD_INT 18
24349: PUSH
24350: LD_INT 19
24352: PUSH
24353: LD_INT 20
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 22
24361: PUSH
24362: LD_INT 23
24364: PUSH
24365: LD_INT 24
24367: PUSH
24368: LD_INT 25
24370: PUSH
24371: LD_INT 26
24373: PUSH
24374: LD_INT 27
24376: PUSH
24377: LD_INT 28
24379: PUSH
24380: LD_INT 29
24382: PUSH
24383: LD_INT 30
24385: PUSH
24386: LD_INT 31
24388: PUSH
24389: LD_INT 32
24391: PUSH
24392: LD_INT 33
24394: PUSH
24395: LD_INT 34
24397: PUSH
24398: LD_INT 35
24400: PUSH
24401: LD_INT 36
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 101
24444: PUSH
24445: LD_INT 102
24447: PUSH
24448: LD_INT 103
24450: PUSH
24451: LD_INT 104
24453: PUSH
24454: LD_INT 105
24456: PUSH
24457: LD_INT 106
24459: PUSH
24460: LD_INT 107
24462: PUSH
24463: LD_INT 108
24465: PUSH
24466: LD_INT 109
24468: PUSH
24469: LD_INT 110
24471: PUSH
24472: LD_INT 111
24474: PUSH
24475: LD_INT 112
24477: PUSH
24478: LD_INT 113
24480: PUSH
24481: LD_INT 114
24483: PUSH
24484: LD_INT 115
24486: PUSH
24487: LD_INT 116
24489: PUSH
24490: LD_INT 117
24492: PUSH
24493: LD_INT 118
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: ST_TO_ADDR
// if result then
24520: LD_VAR 0 2
24524: IFFALSE 25310
// begin normal :=  ;
24526: LD_ADDR_VAR 0 5
24530: PUSH
24531: LD_STRING 
24533: ST_TO_ADDR
// hardcore :=  ;
24534: LD_ADDR_VAR 0 6
24538: PUSH
24539: LD_STRING 
24541: ST_TO_ADDR
// active :=  ;
24542: LD_ADDR_VAR 0 7
24546: PUSH
24547: LD_STRING 
24549: ST_TO_ADDR
// for i = 1 to normalCounter do
24550: LD_ADDR_VAR 0 8
24554: PUSH
24555: DOUBLE
24556: LD_INT 1
24558: DEC
24559: ST_TO_ADDR
24560: LD_EXP 56
24564: PUSH
24565: FOR_TO
24566: IFFALSE 24667
// begin tmp := 0 ;
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_STRING 0
24575: ST_TO_ADDR
// if result [ 1 ] then
24576: LD_VAR 0 2
24580: PUSH
24581: LD_INT 1
24583: ARRAY
24584: IFFALSE 24649
// if result [ 1 ] [ 1 ] = i then
24586: LD_VAR 0 2
24590: PUSH
24591: LD_INT 1
24593: ARRAY
24594: PUSH
24595: LD_INT 1
24597: ARRAY
24598: PUSH
24599: LD_VAR 0 8
24603: EQUAL
24604: IFFALSE 24649
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24606: LD_ADDR_VAR 0 2
24610: PUSH
24611: LD_VAR 0 2
24615: PPUSH
24616: LD_INT 1
24618: PPUSH
24619: LD_VAR 0 2
24623: PUSH
24624: LD_INT 1
24626: ARRAY
24627: PPUSH
24628: LD_INT 1
24630: PPUSH
24631: CALL_OW 3
24635: PPUSH
24636: CALL_OW 1
24640: ST_TO_ADDR
// tmp := 1 ;
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: LD_STRING 1
24648: ST_TO_ADDR
// end ; normal := normal & tmp ;
24649: LD_ADDR_VAR 0 5
24653: PUSH
24654: LD_VAR 0 5
24658: PUSH
24659: LD_VAR 0 3
24663: STR
24664: ST_TO_ADDR
// end ;
24665: GO 24565
24667: POP
24668: POP
// for i = 1 to hardcoreCounter do
24669: LD_ADDR_VAR 0 8
24673: PUSH
24674: DOUBLE
24675: LD_INT 1
24677: DEC
24678: ST_TO_ADDR
24679: LD_EXP 57
24683: PUSH
24684: FOR_TO
24685: IFFALSE 24790
// begin tmp := 0 ;
24687: LD_ADDR_VAR 0 3
24691: PUSH
24692: LD_STRING 0
24694: ST_TO_ADDR
// if result [ 2 ] then
24695: LD_VAR 0 2
24699: PUSH
24700: LD_INT 2
24702: ARRAY
24703: IFFALSE 24772
// if result [ 2 ] [ 1 ] = 100 + i then
24705: LD_VAR 0 2
24709: PUSH
24710: LD_INT 2
24712: ARRAY
24713: PUSH
24714: LD_INT 1
24716: ARRAY
24717: PUSH
24718: LD_INT 100
24720: PUSH
24721: LD_VAR 0 8
24725: PLUS
24726: EQUAL
24727: IFFALSE 24772
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24729: LD_ADDR_VAR 0 2
24733: PUSH
24734: LD_VAR 0 2
24738: PPUSH
24739: LD_INT 2
24741: PPUSH
24742: LD_VAR 0 2
24746: PUSH
24747: LD_INT 2
24749: ARRAY
24750: PPUSH
24751: LD_INT 1
24753: PPUSH
24754: CALL_OW 3
24758: PPUSH
24759: CALL_OW 1
24763: ST_TO_ADDR
// tmp := 1 ;
24764: LD_ADDR_VAR 0 3
24768: PUSH
24769: LD_STRING 1
24771: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24772: LD_ADDR_VAR 0 6
24776: PUSH
24777: LD_VAR 0 6
24781: PUSH
24782: LD_VAR 0 3
24786: STR
24787: ST_TO_ADDR
// end ;
24788: GO 24684
24790: POP
24791: POP
// if isGameLoad then
24792: LD_VAR 0 1
24796: IFFALSE 25271
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24798: LD_ADDR_VAR 0 4
24802: PUSH
24803: LD_EXP 60
24807: PUSH
24808: LD_EXP 59
24812: PUSH
24813: LD_EXP 61
24817: PUSH
24818: LD_EXP 58
24822: PUSH
24823: LD_EXP 62
24827: PUSH
24828: LD_EXP 63
24832: PUSH
24833: LD_EXP 64
24837: PUSH
24838: LD_EXP 65
24842: PUSH
24843: LD_EXP 66
24847: PUSH
24848: LD_EXP 67
24852: PUSH
24853: LD_EXP 68
24857: PUSH
24858: LD_EXP 69
24862: PUSH
24863: LD_EXP 70
24867: PUSH
24868: LD_EXP 71
24872: PUSH
24873: LD_EXP 79
24877: PUSH
24878: LD_EXP 80
24882: PUSH
24883: LD_EXP 81
24887: PUSH
24888: LD_EXP 82
24892: PUSH
24893: LD_EXP 84
24897: PUSH
24898: LD_EXP 85
24902: PUSH
24903: LD_EXP 86
24907: PUSH
24908: LD_EXP 89
24912: PUSH
24913: LD_EXP 91
24917: PUSH
24918: LD_EXP 92
24922: PUSH
24923: LD_EXP 93
24927: PUSH
24928: LD_EXP 95
24932: PUSH
24933: LD_EXP 96
24937: PUSH
24938: LD_EXP 99
24942: PUSH
24943: LD_EXP 100
24947: PUSH
24948: LD_EXP 101
24952: PUSH
24953: LD_EXP 102
24957: PUSH
24958: LD_EXP 103
24962: PUSH
24963: LD_EXP 104
24967: PUSH
24968: LD_EXP 105
24972: PUSH
24973: LD_EXP 106
24977: PUSH
24978: LD_EXP 107
24982: PUSH
24983: LD_EXP 72
24987: PUSH
24988: LD_EXP 73
24992: PUSH
24993: LD_EXP 76
24997: PUSH
24998: LD_EXP 77
25002: PUSH
25003: LD_EXP 78
25007: PUSH
25008: LD_EXP 74
25012: PUSH
25013: LD_EXP 75
25017: PUSH
25018: LD_EXP 83
25022: PUSH
25023: LD_EXP 87
25027: PUSH
25028: LD_EXP 88
25032: PUSH
25033: LD_EXP 90
25037: PUSH
25038: LD_EXP 94
25042: PUSH
25043: LD_EXP 97
25047: PUSH
25048: LD_EXP 98
25052: PUSH
25053: LD_EXP 108
25057: PUSH
25058: LD_EXP 109
25062: PUSH
25063: LD_EXP 110
25067: PUSH
25068: LD_EXP 111
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: ST_TO_ADDR
// tmp :=  ;
25129: LD_ADDR_VAR 0 3
25133: PUSH
25134: LD_STRING 
25136: ST_TO_ADDR
// for i = 1 to normalCounter do
25137: LD_ADDR_VAR 0 8
25141: PUSH
25142: DOUBLE
25143: LD_INT 1
25145: DEC
25146: ST_TO_ADDR
25147: LD_EXP 56
25151: PUSH
25152: FOR_TO
25153: IFFALSE 25189
// begin if flags [ i ] then
25155: LD_VAR 0 4
25159: PUSH
25160: LD_VAR 0 8
25164: ARRAY
25165: IFFALSE 25187
// tmp := tmp & i & ; ;
25167: LD_ADDR_VAR 0 3
25171: PUSH
25172: LD_VAR 0 3
25176: PUSH
25177: LD_VAR 0 8
25181: STR
25182: PUSH
25183: LD_STRING ;
25185: STR
25186: ST_TO_ADDR
// end ;
25187: GO 25152
25189: POP
25190: POP
// for i = 1 to hardcoreCounter do
25191: LD_ADDR_VAR 0 8
25195: PUSH
25196: DOUBLE
25197: LD_INT 1
25199: DEC
25200: ST_TO_ADDR
25201: LD_EXP 57
25205: PUSH
25206: FOR_TO
25207: IFFALSE 25253
// begin if flags [ normalCounter + i ] then
25209: LD_VAR 0 4
25213: PUSH
25214: LD_EXP 56
25218: PUSH
25219: LD_VAR 0 8
25223: PLUS
25224: ARRAY
25225: IFFALSE 25251
// tmp := tmp & ( 100 + i ) & ; ;
25227: LD_ADDR_VAR 0 3
25231: PUSH
25232: LD_VAR 0 3
25236: PUSH
25237: LD_INT 100
25239: PUSH
25240: LD_VAR 0 8
25244: PLUS
25245: STR
25246: PUSH
25247: LD_STRING ;
25249: STR
25250: ST_TO_ADDR
// end ;
25251: GO 25206
25253: POP
25254: POP
// if tmp then
25255: LD_VAR 0 3
25259: IFFALSE 25271
// active := tmp ;
25261: LD_ADDR_VAR 0 7
25265: PUSH
25266: LD_VAR 0 3
25270: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25271: LD_STRING getStreamItemsFromMission("
25273: PUSH
25274: LD_VAR 0 5
25278: STR
25279: PUSH
25280: LD_STRING ","
25282: STR
25283: PUSH
25284: LD_VAR 0 6
25288: STR
25289: PUSH
25290: LD_STRING ","
25292: STR
25293: PUSH
25294: LD_VAR 0 7
25298: STR
25299: PUSH
25300: LD_STRING ")
25302: STR
25303: PPUSH
25304: CALL_OW 559
// end else
25308: GO 25317
// ToLua ( getStreamItemsFromMission("","","") ) ;
25310: LD_STRING getStreamItemsFromMission("","","")
25312: PPUSH
25313: CALL_OW 559
// end ;
25317: LD_VAR 0 2
25321: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25322: LD_EXP 55
25326: PUSH
25327: LD_EXP 60
25331: AND
25332: IFFALSE 25456
25334: GO 25336
25336: DISABLE
25337: LD_INT 0
25339: PPUSH
25340: PPUSH
// begin enable ;
25341: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25342: LD_ADDR_VAR 0 2
25346: PUSH
25347: LD_INT 22
25349: PUSH
25350: LD_OWVAR 2
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 34
25364: PUSH
25365: LD_INT 7
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 34
25374: PUSH
25375: LD_INT 45
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 34
25384: PUSH
25385: LD_INT 28
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 34
25394: PUSH
25395: LD_INT 47
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PPUSH
25413: CALL_OW 69
25417: ST_TO_ADDR
// if not tmp then
25418: LD_VAR 0 2
25422: NOT
25423: IFFALSE 25427
// exit ;
25425: GO 25456
// for i in tmp do
25427: LD_ADDR_VAR 0 1
25431: PUSH
25432: LD_VAR 0 2
25436: PUSH
25437: FOR_IN
25438: IFFALSE 25454
// begin SetLives ( i , 0 ) ;
25440: LD_VAR 0 1
25444: PPUSH
25445: LD_INT 0
25447: PPUSH
25448: CALL_OW 234
// end ;
25452: GO 25437
25454: POP
25455: POP
// end ;
25456: PPOPN 2
25458: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25459: LD_EXP 55
25463: PUSH
25464: LD_EXP 61
25468: AND
25469: IFFALSE 25553
25471: GO 25473
25473: DISABLE
25474: LD_INT 0
25476: PPUSH
25477: PPUSH
// begin enable ;
25478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25479: LD_ADDR_VAR 0 2
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_OWVAR 2
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 32
25498: PUSH
25499: LD_INT 3
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PPUSH
25510: CALL_OW 69
25514: ST_TO_ADDR
// if not tmp then
25515: LD_VAR 0 2
25519: NOT
25520: IFFALSE 25524
// exit ;
25522: GO 25553
// for i in tmp do
25524: LD_ADDR_VAR 0 1
25528: PUSH
25529: LD_VAR 0 2
25533: PUSH
25534: FOR_IN
25535: IFFALSE 25551
// begin SetLives ( i , 0 ) ;
25537: LD_VAR 0 1
25541: PPUSH
25542: LD_INT 0
25544: PPUSH
25545: CALL_OW 234
// end ;
25549: GO 25534
25551: POP
25552: POP
// end ;
25553: PPOPN 2
25555: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25556: LD_EXP 55
25560: PUSH
25561: LD_EXP 58
25565: AND
25566: IFFALSE 25659
25568: GO 25570
25570: DISABLE
25571: LD_INT 0
25573: PPUSH
// begin enable ;
25574: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25575: LD_ADDR_VAR 0 1
25579: PUSH
25580: LD_INT 22
25582: PUSH
25583: LD_OWVAR 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: LD_INT 25
25597: PUSH
25598: LD_INT 5
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 25
25607: PUSH
25608: LD_INT 9
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 25
25617: PUSH
25618: LD_INT 8
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PPUSH
25635: CALL_OW 69
25639: PUSH
25640: FOR_IN
25641: IFFALSE 25657
// begin SetClass ( i , 1 ) ;
25643: LD_VAR 0 1
25647: PPUSH
25648: LD_INT 1
25650: PPUSH
25651: CALL_OW 336
// end ;
25655: GO 25640
25657: POP
25658: POP
// end ;
25659: PPOPN 1
25661: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25662: LD_EXP 55
25666: PUSH
25667: LD_EXP 59
25671: AND
25672: PUSH
25673: LD_OWVAR 65
25677: PUSH
25678: LD_INT 7
25680: LESS
25681: AND
25682: IFFALSE 25696
25684: GO 25686
25686: DISABLE
// begin enable ;
25687: ENABLE
// game_speed := 7 ;
25688: LD_ADDR_OWVAR 65
25692: PUSH
25693: LD_INT 7
25695: ST_TO_ADDR
// end ;
25696: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25697: LD_EXP 55
25701: PUSH
25702: LD_EXP 62
25706: AND
25707: IFFALSE 25909
25709: GO 25711
25711: DISABLE
25712: LD_INT 0
25714: PPUSH
25715: PPUSH
25716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25717: LD_ADDR_VAR 0 3
25721: PUSH
25722: LD_INT 81
25724: PUSH
25725: LD_OWVAR 2
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 21
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PPUSH
25748: CALL_OW 69
25752: ST_TO_ADDR
// if not tmp then
25753: LD_VAR 0 3
25757: NOT
25758: IFFALSE 25762
// exit ;
25760: GO 25909
// if tmp > 5 then
25762: LD_VAR 0 3
25766: PUSH
25767: LD_INT 5
25769: GREATER
25770: IFFALSE 25782
// k := 5 else
25772: LD_ADDR_VAR 0 2
25776: PUSH
25777: LD_INT 5
25779: ST_TO_ADDR
25780: GO 25792
// k := tmp ;
25782: LD_ADDR_VAR 0 2
25786: PUSH
25787: LD_VAR 0 3
25791: ST_TO_ADDR
// for i := 1 to k do
25792: LD_ADDR_VAR 0 1
25796: PUSH
25797: DOUBLE
25798: LD_INT 1
25800: DEC
25801: ST_TO_ADDR
25802: LD_VAR 0 2
25806: PUSH
25807: FOR_TO
25808: IFFALSE 25907
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25810: LD_VAR 0 3
25814: PUSH
25815: LD_VAR 0 1
25819: ARRAY
25820: PPUSH
25821: LD_VAR 0 1
25825: PUSH
25826: LD_INT 4
25828: MOD
25829: PUSH
25830: LD_INT 1
25832: PLUS
25833: PPUSH
25834: CALL_OW 259
25838: PUSH
25839: LD_INT 10
25841: LESS
25842: IFFALSE 25905
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25844: LD_VAR 0 3
25848: PUSH
25849: LD_VAR 0 1
25853: ARRAY
25854: PPUSH
25855: LD_VAR 0 1
25859: PUSH
25860: LD_INT 4
25862: MOD
25863: PUSH
25864: LD_INT 1
25866: PLUS
25867: PPUSH
25868: LD_VAR 0 3
25872: PUSH
25873: LD_VAR 0 1
25877: ARRAY
25878: PPUSH
25879: LD_VAR 0 1
25883: PUSH
25884: LD_INT 4
25886: MOD
25887: PUSH
25888: LD_INT 1
25890: PLUS
25891: PPUSH
25892: CALL_OW 259
25896: PUSH
25897: LD_INT 1
25899: PLUS
25900: PPUSH
25901: CALL_OW 237
25905: GO 25807
25907: POP
25908: POP
// end ;
25909: PPOPN 3
25911: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25912: LD_EXP 55
25916: PUSH
25917: LD_EXP 63
25921: AND
25922: IFFALSE 25942
25924: GO 25926
25926: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25927: LD_INT 4
25929: PPUSH
25930: LD_OWVAR 2
25934: PPUSH
25935: LD_INT 0
25937: PPUSH
25938: CALL_OW 324
25942: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25943: LD_EXP 55
25947: PUSH
25948: LD_EXP 92
25952: AND
25953: IFFALSE 25973
25955: GO 25957
25957: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25958: LD_INT 19
25960: PPUSH
25961: LD_OWVAR 2
25965: PPUSH
25966: LD_INT 0
25968: PPUSH
25969: CALL_OW 324
25973: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25974: LD_EXP 55
25978: PUSH
25979: LD_EXP 64
25983: AND
25984: IFFALSE 26086
25986: GO 25988
25988: DISABLE
25989: LD_INT 0
25991: PPUSH
25992: PPUSH
// begin enable ;
25993: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25994: LD_ADDR_VAR 0 2
25998: PUSH
25999: LD_INT 22
26001: PUSH
26002: LD_OWVAR 2
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 34
26016: PUSH
26017: LD_INT 11
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 34
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 69
26047: ST_TO_ADDR
// if not tmp then
26048: LD_VAR 0 2
26052: NOT
26053: IFFALSE 26057
// exit ;
26055: GO 26086
// for i in tmp do
26057: LD_ADDR_VAR 0 1
26061: PUSH
26062: LD_VAR 0 2
26066: PUSH
26067: FOR_IN
26068: IFFALSE 26084
// begin SetLives ( i , 0 ) ;
26070: LD_VAR 0 1
26074: PPUSH
26075: LD_INT 0
26077: PPUSH
26078: CALL_OW 234
// end ;
26082: GO 26067
26084: POP
26085: POP
// end ;
26086: PPOPN 2
26088: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26089: LD_EXP 55
26093: PUSH
26094: LD_EXP 65
26098: AND
26099: IFFALSE 26119
26101: GO 26103
26103: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26104: LD_INT 32
26106: PPUSH
26107: LD_OWVAR 2
26111: PPUSH
26112: LD_INT 0
26114: PPUSH
26115: CALL_OW 324
26119: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26120: LD_EXP 55
26124: PUSH
26125: LD_EXP 66
26129: AND
26130: IFFALSE 26311
26132: GO 26134
26134: DISABLE
26135: LD_INT 0
26137: PPUSH
26138: PPUSH
26139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26140: LD_ADDR_VAR 0 2
26144: PUSH
26145: LD_INT 22
26147: PUSH
26148: LD_OWVAR 2
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 33
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PPUSH
26171: CALL_OW 69
26175: ST_TO_ADDR
// if not tmp then
26176: LD_VAR 0 2
26180: NOT
26181: IFFALSE 26185
// exit ;
26183: GO 26311
// side := 0 ;
26185: LD_ADDR_VAR 0 3
26189: PUSH
26190: LD_INT 0
26192: ST_TO_ADDR
// for i := 1 to 8 do
26193: LD_ADDR_VAR 0 1
26197: PUSH
26198: DOUBLE
26199: LD_INT 1
26201: DEC
26202: ST_TO_ADDR
26203: LD_INT 8
26205: PUSH
26206: FOR_TO
26207: IFFALSE 26255
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26209: LD_OWVAR 2
26213: PUSH
26214: LD_VAR 0 1
26218: NONEQUAL
26219: PUSH
26220: LD_OWVAR 2
26224: PPUSH
26225: LD_VAR 0 1
26229: PPUSH
26230: CALL_OW 81
26234: PUSH
26235: LD_INT 2
26237: EQUAL
26238: AND
26239: IFFALSE 26253
// begin side := i ;
26241: LD_ADDR_VAR 0 3
26245: PUSH
26246: LD_VAR 0 1
26250: ST_TO_ADDR
// break ;
26251: GO 26255
// end ;
26253: GO 26206
26255: POP
26256: POP
// if not side then
26257: LD_VAR 0 3
26261: NOT
26262: IFFALSE 26266
// exit ;
26264: GO 26311
// for i := 1 to tmp do
26266: LD_ADDR_VAR 0 1
26270: PUSH
26271: DOUBLE
26272: LD_INT 1
26274: DEC
26275: ST_TO_ADDR
26276: LD_VAR 0 2
26280: PUSH
26281: FOR_TO
26282: IFFALSE 26309
// if Prob ( 60 ) then
26284: LD_INT 60
26286: PPUSH
26287: CALL_OW 13
26291: IFFALSE 26307
// SetSide ( i , side ) ;
26293: LD_VAR 0 1
26297: PPUSH
26298: LD_VAR 0 3
26302: PPUSH
26303: CALL_OW 235
26307: GO 26281
26309: POP
26310: POP
// end ;
26311: PPOPN 3
26313: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26314: LD_EXP 55
26318: PUSH
26319: LD_EXP 68
26323: AND
26324: IFFALSE 26443
26326: GO 26328
26328: DISABLE
26329: LD_INT 0
26331: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26332: LD_ADDR_VAR 0 1
26336: PUSH
26337: LD_INT 22
26339: PUSH
26340: LD_OWVAR 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 21
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: LD_INT 23
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PPUSH
26381: CALL_OW 69
26385: PUSH
26386: FOR_IN
26387: IFFALSE 26441
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26389: LD_VAR 0 1
26393: PPUSH
26394: CALL_OW 257
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: LD_INT 3
26407: PUSH
26408: LD_INT 4
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: IN
26417: IFFALSE 26439
// SetClass ( un , rand ( 1 , 4 ) ) ;
26419: LD_VAR 0 1
26423: PPUSH
26424: LD_INT 1
26426: PPUSH
26427: LD_INT 4
26429: PPUSH
26430: CALL_OW 12
26434: PPUSH
26435: CALL_OW 336
26439: GO 26386
26441: POP
26442: POP
// end ;
26443: PPOPN 1
26445: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26446: LD_EXP 55
26450: PUSH
26451: LD_EXP 67
26455: AND
26456: IFFALSE 26535
26458: GO 26460
26460: DISABLE
26461: LD_INT 0
26463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26464: LD_ADDR_VAR 0 1
26468: PUSH
26469: LD_INT 22
26471: PUSH
26472: LD_OWVAR 2
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 21
26483: PUSH
26484: LD_INT 3
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PPUSH
26495: CALL_OW 69
26499: ST_TO_ADDR
// if not tmp then
26500: LD_VAR 0 1
26504: NOT
26505: IFFALSE 26509
// exit ;
26507: GO 26535
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26509: LD_VAR 0 1
26513: PUSH
26514: LD_INT 1
26516: PPUSH
26517: LD_VAR 0 1
26521: PPUSH
26522: CALL_OW 12
26526: ARRAY
26527: PPUSH
26528: LD_INT 100
26530: PPUSH
26531: CALL_OW 234
// end ;
26535: PPOPN 1
26537: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26538: LD_EXP 55
26542: PUSH
26543: LD_EXP 69
26547: AND
26548: IFFALSE 26646
26550: GO 26552
26552: DISABLE
26553: LD_INT 0
26555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26556: LD_ADDR_VAR 0 1
26560: PUSH
26561: LD_INT 22
26563: PUSH
26564: LD_OWVAR 2
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 21
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PPUSH
26587: CALL_OW 69
26591: ST_TO_ADDR
// if not tmp then
26592: LD_VAR 0 1
26596: NOT
26597: IFFALSE 26601
// exit ;
26599: GO 26646
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26601: LD_VAR 0 1
26605: PUSH
26606: LD_INT 1
26608: PPUSH
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL_OW 12
26618: ARRAY
26619: PPUSH
26620: LD_INT 1
26622: PPUSH
26623: LD_INT 4
26625: PPUSH
26626: CALL_OW 12
26630: PPUSH
26631: LD_INT 3000
26633: PPUSH
26634: LD_INT 9000
26636: PPUSH
26637: CALL_OW 12
26641: PPUSH
26642: CALL_OW 492
// end ;
26646: PPOPN 1
26648: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26649: LD_EXP 55
26653: PUSH
26654: LD_EXP 70
26658: AND
26659: IFFALSE 26679
26661: GO 26663
26663: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26664: LD_INT 1
26666: PPUSH
26667: LD_OWVAR 2
26671: PPUSH
26672: LD_INT 0
26674: PPUSH
26675: CALL_OW 324
26679: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26680: LD_EXP 55
26684: PUSH
26685: LD_EXP 71
26689: AND
26690: IFFALSE 26773
26692: GO 26694
26694: DISABLE
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26699: LD_ADDR_VAR 0 2
26703: PUSH
26704: LD_INT 22
26706: PUSH
26707: LD_OWVAR 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 21
26718: PUSH
26719: LD_INT 3
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PPUSH
26730: CALL_OW 69
26734: ST_TO_ADDR
// if not tmp then
26735: LD_VAR 0 2
26739: NOT
26740: IFFALSE 26744
// exit ;
26742: GO 26773
// for i in tmp do
26744: LD_ADDR_VAR 0 1
26748: PUSH
26749: LD_VAR 0 2
26753: PUSH
26754: FOR_IN
26755: IFFALSE 26771
// SetBLevel ( i , 10 ) ;
26757: LD_VAR 0 1
26761: PPUSH
26762: LD_INT 10
26764: PPUSH
26765: CALL_OW 241
26769: GO 26754
26771: POP
26772: POP
// end ;
26773: PPOPN 2
26775: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26776: LD_EXP 55
26780: PUSH
26781: LD_EXP 72
26785: AND
26786: IFFALSE 26897
26788: GO 26790
26790: DISABLE
26791: LD_INT 0
26793: PPUSH
26794: PPUSH
26795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26796: LD_ADDR_VAR 0 3
26800: PUSH
26801: LD_INT 22
26803: PUSH
26804: LD_OWVAR 2
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 25
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PPUSH
26827: CALL_OW 69
26831: ST_TO_ADDR
// if not tmp then
26832: LD_VAR 0 3
26836: NOT
26837: IFFALSE 26841
// exit ;
26839: GO 26897
// un := tmp [ rand ( 1 , tmp ) ] ;
26841: LD_ADDR_VAR 0 2
26845: PUSH
26846: LD_VAR 0 3
26850: PUSH
26851: LD_INT 1
26853: PPUSH
26854: LD_VAR 0 3
26858: PPUSH
26859: CALL_OW 12
26863: ARRAY
26864: ST_TO_ADDR
// if Crawls ( un ) then
26865: LD_VAR 0 2
26869: PPUSH
26870: CALL_OW 318
26874: IFFALSE 26885
// ComWalk ( un ) ;
26876: LD_VAR 0 2
26880: PPUSH
26881: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26885: LD_VAR 0 2
26889: PPUSH
26890: LD_INT 5
26892: PPUSH
26893: CALL_OW 336
// end ;
26897: PPOPN 3
26899: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26900: LD_EXP 55
26904: PUSH
26905: LD_EXP 73
26909: AND
26910: PUSH
26911: LD_OWVAR 67
26915: PUSH
26916: LD_INT 4
26918: LESS
26919: AND
26920: IFFALSE 26939
26922: GO 26924
26924: DISABLE
// begin Difficulty := Difficulty + 1 ;
26925: LD_ADDR_OWVAR 67
26929: PUSH
26930: LD_OWVAR 67
26934: PUSH
26935: LD_INT 1
26937: PLUS
26938: ST_TO_ADDR
// end ;
26939: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26940: LD_EXP 55
26944: PUSH
26945: LD_EXP 74
26949: AND
26950: IFFALSE 27053
26952: GO 26954
26954: DISABLE
26955: LD_INT 0
26957: PPUSH
// begin for i := 1 to 5 do
26958: LD_ADDR_VAR 0 1
26962: PUSH
26963: DOUBLE
26964: LD_INT 1
26966: DEC
26967: ST_TO_ADDR
26968: LD_INT 5
26970: PUSH
26971: FOR_TO
26972: IFFALSE 27051
// begin uc_nation := nation_nature ;
26974: LD_ADDR_OWVAR 21
26978: PUSH
26979: LD_INT 0
26981: ST_TO_ADDR
// uc_side := 0 ;
26982: LD_ADDR_OWVAR 20
26986: PUSH
26987: LD_INT 0
26989: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26990: LD_ADDR_OWVAR 29
26994: PUSH
26995: LD_INT 12
26997: PUSH
26998: LD_INT 12
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: ST_TO_ADDR
// hc_agressivity := 20 ;
27005: LD_ADDR_OWVAR 35
27009: PUSH
27010: LD_INT 20
27012: ST_TO_ADDR
// hc_class := class_tiger ;
27013: LD_ADDR_OWVAR 28
27017: PUSH
27018: LD_INT 14
27020: ST_TO_ADDR
// hc_gallery :=  ;
27021: LD_ADDR_OWVAR 33
27025: PUSH
27026: LD_STRING 
27028: ST_TO_ADDR
// hc_name :=  ;
27029: LD_ADDR_OWVAR 26
27033: PUSH
27034: LD_STRING 
27036: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27037: CALL_OW 44
27041: PPUSH
27042: LD_INT 0
27044: PPUSH
27045: CALL_OW 51
// end ;
27049: GO 26971
27051: POP
27052: POP
// end ;
27053: PPOPN 1
27055: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27056: LD_EXP 55
27060: PUSH
27061: LD_EXP 75
27065: AND
27066: IFFALSE 27075
27068: GO 27070
27070: DISABLE
// StreamSibBomb ;
27071: CALL 27076 0 0
27075: END
// export function StreamSibBomb ; var i , x , y ; begin
27076: LD_INT 0
27078: PPUSH
27079: PPUSH
27080: PPUSH
27081: PPUSH
// result := false ;
27082: LD_ADDR_VAR 0 1
27086: PUSH
27087: LD_INT 0
27089: ST_TO_ADDR
// for i := 1 to 16 do
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: DOUBLE
27096: LD_INT 1
27098: DEC
27099: ST_TO_ADDR
27100: LD_INT 16
27102: PUSH
27103: FOR_TO
27104: IFFALSE 27303
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27106: LD_ADDR_VAR 0 3
27110: PUSH
27111: LD_INT 10
27113: PUSH
27114: LD_INT 20
27116: PUSH
27117: LD_INT 30
27119: PUSH
27120: LD_INT 40
27122: PUSH
27123: LD_INT 50
27125: PUSH
27126: LD_INT 60
27128: PUSH
27129: LD_INT 70
27131: PUSH
27132: LD_INT 80
27134: PUSH
27135: LD_INT 90
27137: PUSH
27138: LD_INT 100
27140: PUSH
27141: LD_INT 110
27143: PUSH
27144: LD_INT 120
27146: PUSH
27147: LD_INT 130
27149: PUSH
27150: LD_INT 140
27152: PUSH
27153: LD_INT 150
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: PPUSH
27176: LD_INT 15
27178: PPUSH
27179: CALL_OW 12
27183: ARRAY
27184: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27185: LD_ADDR_VAR 0 4
27189: PUSH
27190: LD_INT 10
27192: PUSH
27193: LD_INT 20
27195: PUSH
27196: LD_INT 30
27198: PUSH
27199: LD_INT 40
27201: PUSH
27202: LD_INT 50
27204: PUSH
27205: LD_INT 60
27207: PUSH
27208: LD_INT 70
27210: PUSH
27211: LD_INT 80
27213: PUSH
27214: LD_INT 90
27216: PUSH
27217: LD_INT 100
27219: PUSH
27220: LD_INT 110
27222: PUSH
27223: LD_INT 120
27225: PUSH
27226: LD_INT 130
27228: PUSH
27229: LD_INT 140
27231: PUSH
27232: LD_INT 150
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: PPUSH
27255: LD_INT 15
27257: PPUSH
27258: CALL_OW 12
27262: ARRAY
27263: ST_TO_ADDR
// if ValidHex ( x , y ) then
27264: LD_VAR 0 3
27268: PPUSH
27269: LD_VAR 0 4
27273: PPUSH
27274: CALL_OW 488
27278: IFFALSE 27301
// begin result := [ x , y ] ;
27280: LD_ADDR_VAR 0 1
27284: PUSH
27285: LD_VAR 0 3
27289: PUSH
27290: LD_VAR 0 4
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: ST_TO_ADDR
// break ;
27299: GO 27303
// end ; end ;
27301: GO 27103
27303: POP
27304: POP
// if result then
27305: LD_VAR 0 1
27309: IFFALSE 27369
// begin ToLua ( playSibBomb() ) ;
27311: LD_STRING playSibBomb()
27313: PPUSH
27314: CALL_OW 559
// wait ( 0 0$14 ) ;
27318: LD_INT 490
27320: PPUSH
27321: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27325: LD_VAR 0 1
27329: PUSH
27330: LD_INT 1
27332: ARRAY
27333: PPUSH
27334: LD_VAR 0 1
27338: PUSH
27339: LD_INT 2
27341: ARRAY
27342: PPUSH
27343: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27347: LD_VAR 0 1
27351: PUSH
27352: LD_INT 1
27354: ARRAY
27355: PPUSH
27356: LD_VAR 0 1
27360: PUSH
27361: LD_INT 2
27363: ARRAY
27364: PPUSH
27365: CALL_OW 429
// end ; end ;
27369: LD_VAR 0 1
27373: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27374: LD_EXP 55
27378: PUSH
27379: LD_EXP 77
27383: AND
27384: IFFALSE 27396
27386: GO 27388
27388: DISABLE
// YouLost (  ) ;
27389: LD_STRING 
27391: PPUSH
27392: CALL_OW 104
27396: END
// every 0 0$1 trigger StreamModeActive and sFog do
27397: LD_EXP 55
27401: PUSH
27402: LD_EXP 76
27406: AND
27407: IFFALSE 27421
27409: GO 27411
27411: DISABLE
// FogOff ( your_side ) ;
27412: LD_OWVAR 2
27416: PPUSH
27417: CALL_OW 344
27421: END
// every 0 0$1 trigger StreamModeActive and sSun do
27422: LD_EXP 55
27426: PUSH
27427: LD_EXP 78
27431: AND
27432: IFFALSE 27460
27434: GO 27436
27436: DISABLE
// begin solar_recharge_percent := 0 ;
27437: LD_ADDR_OWVAR 79
27441: PUSH
27442: LD_INT 0
27444: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27445: LD_INT 10500
27447: PPUSH
27448: CALL_OW 67
// solar_recharge_percent := 100 ;
27452: LD_ADDR_OWVAR 79
27456: PUSH
27457: LD_INT 100
27459: ST_TO_ADDR
// end ;
27460: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27461: LD_EXP 55
27465: PUSH
27466: LD_EXP 79
27470: AND
27471: IFFALSE 27710
27473: GO 27475
27475: DISABLE
27476: LD_INT 0
27478: PPUSH
27479: PPUSH
27480: PPUSH
// begin tmp := [ ] ;
27481: LD_ADDR_VAR 0 3
27485: PUSH
27486: EMPTY
27487: ST_TO_ADDR
// for i := 1 to 6 do
27488: LD_ADDR_VAR 0 1
27492: PUSH
27493: DOUBLE
27494: LD_INT 1
27496: DEC
27497: ST_TO_ADDR
27498: LD_INT 6
27500: PUSH
27501: FOR_TO
27502: IFFALSE 27607
// begin uc_nation := nation_nature ;
27504: LD_ADDR_OWVAR 21
27508: PUSH
27509: LD_INT 0
27511: ST_TO_ADDR
// uc_side := 0 ;
27512: LD_ADDR_OWVAR 20
27516: PUSH
27517: LD_INT 0
27519: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27520: LD_ADDR_OWVAR 29
27524: PUSH
27525: LD_INT 12
27527: PUSH
27528: LD_INT 12
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: ST_TO_ADDR
// hc_agressivity := 20 ;
27535: LD_ADDR_OWVAR 35
27539: PUSH
27540: LD_INT 20
27542: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27543: LD_ADDR_OWVAR 28
27547: PUSH
27548: LD_INT 17
27550: ST_TO_ADDR
// hc_gallery :=  ;
27551: LD_ADDR_OWVAR 33
27555: PUSH
27556: LD_STRING 
27558: ST_TO_ADDR
// hc_name :=  ;
27559: LD_ADDR_OWVAR 26
27563: PUSH
27564: LD_STRING 
27566: ST_TO_ADDR
// un := CreateHuman ;
27567: LD_ADDR_VAR 0 2
27571: PUSH
27572: CALL_OW 44
27576: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27577: LD_VAR 0 2
27581: PPUSH
27582: LD_INT 1
27584: PPUSH
27585: CALL_OW 51
// tmp := tmp ^ un ;
27589: LD_ADDR_VAR 0 3
27593: PUSH
27594: LD_VAR 0 3
27598: PUSH
27599: LD_VAR 0 2
27603: ADD
27604: ST_TO_ADDR
// end ;
27605: GO 27501
27607: POP
27608: POP
// repeat wait ( 0 0$1 ) ;
27609: LD_INT 35
27611: PPUSH
27612: CALL_OW 67
// for un in tmp do
27616: LD_ADDR_VAR 0 2
27620: PUSH
27621: LD_VAR 0 3
27625: PUSH
27626: FOR_IN
27627: IFFALSE 27701
// begin if IsDead ( un ) then
27629: LD_VAR 0 2
27633: PPUSH
27634: CALL_OW 301
27638: IFFALSE 27658
// begin tmp := tmp diff un ;
27640: LD_ADDR_VAR 0 3
27644: PUSH
27645: LD_VAR 0 3
27649: PUSH
27650: LD_VAR 0 2
27654: DIFF
27655: ST_TO_ADDR
// continue ;
27656: GO 27626
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27658: LD_VAR 0 2
27662: PPUSH
27663: LD_INT 3
27665: PUSH
27666: LD_INT 22
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PPUSH
27680: CALL_OW 69
27684: PPUSH
27685: LD_VAR 0 2
27689: PPUSH
27690: CALL_OW 74
27694: PPUSH
27695: CALL_OW 115
// end ;
27699: GO 27626
27701: POP
27702: POP
// until not tmp ;
27703: LD_VAR 0 3
27707: NOT
27708: IFFALSE 27609
// end ;
27710: PPOPN 3
27712: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27713: LD_EXP 55
27717: PUSH
27718: LD_EXP 80
27722: AND
27723: IFFALSE 27777
27725: GO 27727
27727: DISABLE
// begin ToLua ( displayTroll(); ) ;
27728: LD_STRING displayTroll();
27730: PPUSH
27731: CALL_OW 559
// wait ( 3 3$00 ) ;
27735: LD_INT 6300
27737: PPUSH
27738: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27742: LD_STRING hideTroll();
27744: PPUSH
27745: CALL_OW 559
// wait ( 1 1$00 ) ;
27749: LD_INT 2100
27751: PPUSH
27752: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27756: LD_STRING displayTroll();
27758: PPUSH
27759: CALL_OW 559
// wait ( 1 1$00 ) ;
27763: LD_INT 2100
27765: PPUSH
27766: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27770: LD_STRING hideTroll();
27772: PPUSH
27773: CALL_OW 559
// end ;
27777: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27778: LD_EXP 55
27782: PUSH
27783: LD_EXP 81
27787: AND
27788: IFFALSE 27851
27790: GO 27792
27792: DISABLE
27793: LD_INT 0
27795: PPUSH
// begin p := 0 ;
27796: LD_ADDR_VAR 0 1
27800: PUSH
27801: LD_INT 0
27803: ST_TO_ADDR
// repeat game_speed := 1 ;
27804: LD_ADDR_OWVAR 65
27808: PUSH
27809: LD_INT 1
27811: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27812: LD_INT 35
27814: PPUSH
27815: CALL_OW 67
// p := p + 1 ;
27819: LD_ADDR_VAR 0 1
27823: PUSH
27824: LD_VAR 0 1
27828: PUSH
27829: LD_INT 1
27831: PLUS
27832: ST_TO_ADDR
// until p >= 60 ;
27833: LD_VAR 0 1
27837: PUSH
27838: LD_INT 60
27840: GREATEREQUAL
27841: IFFALSE 27804
// game_speed := 4 ;
27843: LD_ADDR_OWVAR 65
27847: PUSH
27848: LD_INT 4
27850: ST_TO_ADDR
// end ;
27851: PPOPN 1
27853: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27854: LD_EXP 55
27858: PUSH
27859: LD_EXP 82
27863: AND
27864: IFFALSE 28010
27866: GO 27868
27868: DISABLE
27869: LD_INT 0
27871: PPUSH
27872: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27873: LD_ADDR_VAR 0 1
27877: PUSH
27878: LD_INT 22
27880: PUSH
27881: LD_OWVAR 2
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: LD_INT 30
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 30
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PPUSH
27922: CALL_OW 69
27926: ST_TO_ADDR
// if not depot then
27927: LD_VAR 0 1
27931: NOT
27932: IFFALSE 27936
// exit ;
27934: GO 28010
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27936: LD_ADDR_VAR 0 2
27940: PUSH
27941: LD_VAR 0 1
27945: PUSH
27946: LD_INT 1
27948: PPUSH
27949: LD_VAR 0 1
27953: PPUSH
27954: CALL_OW 12
27958: ARRAY
27959: PPUSH
27960: CALL_OW 274
27964: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27965: LD_VAR 0 2
27969: PPUSH
27970: LD_INT 1
27972: PPUSH
27973: LD_INT 0
27975: PPUSH
27976: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27980: LD_VAR 0 2
27984: PPUSH
27985: LD_INT 2
27987: PPUSH
27988: LD_INT 0
27990: PPUSH
27991: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27995: LD_VAR 0 2
27999: PPUSH
28000: LD_INT 3
28002: PPUSH
28003: LD_INT 0
28005: PPUSH
28006: CALL_OW 277
// end ;
28010: PPOPN 2
28012: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28013: LD_EXP 55
28017: PUSH
28018: LD_EXP 83
28022: AND
28023: IFFALSE 28120
28025: GO 28027
28027: DISABLE
28028: LD_INT 0
28030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28031: LD_ADDR_VAR 0 1
28035: PUSH
28036: LD_INT 22
28038: PUSH
28039: LD_OWVAR 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 21
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 3
28060: PUSH
28061: LD_INT 23
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: PPUSH
28080: CALL_OW 69
28084: ST_TO_ADDR
// if not tmp then
28085: LD_VAR 0 1
28089: NOT
28090: IFFALSE 28094
// exit ;
28092: GO 28120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28094: LD_VAR 0 1
28098: PUSH
28099: LD_INT 1
28101: PPUSH
28102: LD_VAR 0 1
28106: PPUSH
28107: CALL_OW 12
28111: ARRAY
28112: PPUSH
28113: LD_INT 200
28115: PPUSH
28116: CALL_OW 234
// end ;
28120: PPOPN 1
28122: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28123: LD_EXP 55
28127: PUSH
28128: LD_EXP 84
28132: AND
28133: IFFALSE 28212
28135: GO 28137
28137: DISABLE
28138: LD_INT 0
28140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28141: LD_ADDR_VAR 0 1
28145: PUSH
28146: LD_INT 22
28148: PUSH
28149: LD_OWVAR 2
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 21
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PPUSH
28172: CALL_OW 69
28176: ST_TO_ADDR
// if not tmp then
28177: LD_VAR 0 1
28181: NOT
28182: IFFALSE 28186
// exit ;
28184: GO 28212
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28186: LD_VAR 0 1
28190: PUSH
28191: LD_INT 1
28193: PPUSH
28194: LD_VAR 0 1
28198: PPUSH
28199: CALL_OW 12
28203: ARRAY
28204: PPUSH
28205: LD_INT 60
28207: PPUSH
28208: CALL_OW 234
// end ;
28212: PPOPN 1
28214: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28215: LD_EXP 55
28219: PUSH
28220: LD_EXP 85
28224: AND
28225: IFFALSE 28324
28227: GO 28229
28229: DISABLE
28230: LD_INT 0
28232: PPUSH
28233: PPUSH
// begin enable ;
28234: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28235: LD_ADDR_VAR 0 1
28239: PUSH
28240: LD_INT 22
28242: PUSH
28243: LD_OWVAR 2
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 61
28254: PUSH
28255: EMPTY
28256: LIST
28257: PUSH
28258: LD_INT 33
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: PPUSH
28273: CALL_OW 69
28277: ST_TO_ADDR
// if not tmp then
28278: LD_VAR 0 1
28282: NOT
28283: IFFALSE 28287
// exit ;
28285: GO 28324
// for i in tmp do
28287: LD_ADDR_VAR 0 2
28291: PUSH
28292: LD_VAR 0 1
28296: PUSH
28297: FOR_IN
28298: IFFALSE 28322
// if IsControledBy ( i ) then
28300: LD_VAR 0 2
28304: PPUSH
28305: CALL_OW 312
28309: IFFALSE 28320
// ComUnlink ( i ) ;
28311: LD_VAR 0 2
28315: PPUSH
28316: CALL_OW 136
28320: GO 28297
28322: POP
28323: POP
// end ;
28324: PPOPN 2
28326: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28327: LD_EXP 55
28331: PUSH
28332: LD_EXP 86
28336: AND
28337: IFFALSE 28477
28339: GO 28341
28341: DISABLE
28342: LD_INT 0
28344: PPUSH
28345: PPUSH
// begin ToLua ( displayPowell(); ) ;
28346: LD_STRING displayPowell();
28348: PPUSH
28349: CALL_OW 559
// uc_side := 0 ;
28353: LD_ADDR_OWVAR 20
28357: PUSH
28358: LD_INT 0
28360: ST_TO_ADDR
// uc_nation := 2 ;
28361: LD_ADDR_OWVAR 21
28365: PUSH
28366: LD_INT 2
28368: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28369: LD_ADDR_OWVAR 37
28373: PUSH
28374: LD_INT 14
28376: ST_TO_ADDR
// vc_engine := engine_siberite ;
28377: LD_ADDR_OWVAR 39
28381: PUSH
28382: LD_INT 3
28384: ST_TO_ADDR
// vc_control := control_apeman ;
28385: LD_ADDR_OWVAR 38
28389: PUSH
28390: LD_INT 5
28392: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28393: LD_ADDR_OWVAR 40
28397: PUSH
28398: LD_INT 29
28400: ST_TO_ADDR
// un := CreateVehicle ;
28401: LD_ADDR_VAR 0 2
28405: PUSH
28406: CALL_OW 45
28410: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28411: LD_VAR 0 2
28415: PPUSH
28416: LD_INT 1
28418: PPUSH
28419: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28423: LD_INT 35
28425: PPUSH
28426: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28430: LD_VAR 0 2
28434: PPUSH
28435: LD_INT 22
28437: PUSH
28438: LD_OWVAR 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PPUSH
28447: CALL_OW 69
28451: PPUSH
28452: LD_VAR 0 2
28456: PPUSH
28457: CALL_OW 74
28461: PPUSH
28462: CALL_OW 115
// until IsDead ( un ) ;
28466: LD_VAR 0 2
28470: PPUSH
28471: CALL_OW 301
28475: IFFALSE 28423
// end ;
28477: PPOPN 2
28479: END
// every 0 0$1 trigger StreamModeActive and sStu do
28480: LD_EXP 55
28484: PUSH
28485: LD_EXP 94
28489: AND
28490: IFFALSE 28506
28492: GO 28494
28494: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28495: LD_STRING displayStucuk();
28497: PPUSH
28498: CALL_OW 559
// ResetFog ;
28502: CALL_OW 335
// end ;
28506: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28507: LD_EXP 55
28511: PUSH
28512: LD_EXP 87
28516: AND
28517: IFFALSE 28658
28519: GO 28521
28521: DISABLE
28522: LD_INT 0
28524: PPUSH
28525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28526: LD_ADDR_VAR 0 2
28530: PUSH
28531: LD_INT 22
28533: PUSH
28534: LD_OWVAR 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 21
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PPUSH
28557: CALL_OW 69
28561: ST_TO_ADDR
// if not tmp then
28562: LD_VAR 0 2
28566: NOT
28567: IFFALSE 28571
// exit ;
28569: GO 28658
// un := tmp [ rand ( 1 , tmp ) ] ;
28571: LD_ADDR_VAR 0 1
28575: PUSH
28576: LD_VAR 0 2
28580: PUSH
28581: LD_INT 1
28583: PPUSH
28584: LD_VAR 0 2
28588: PPUSH
28589: CALL_OW 12
28593: ARRAY
28594: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28595: LD_VAR 0 1
28599: PPUSH
28600: LD_INT 0
28602: PPUSH
28603: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28607: LD_VAR 0 1
28611: PPUSH
28612: LD_OWVAR 3
28616: PUSH
28617: LD_VAR 0 1
28621: DIFF
28622: PPUSH
28623: LD_VAR 0 1
28627: PPUSH
28628: CALL_OW 74
28632: PPUSH
28633: CALL_OW 115
// wait ( 0 0$20 ) ;
28637: LD_INT 700
28639: PPUSH
28640: CALL_OW 67
// SetSide ( un , your_side ) ;
28644: LD_VAR 0 1
28648: PPUSH
28649: LD_OWVAR 2
28653: PPUSH
28654: CALL_OW 235
// end ;
28658: PPOPN 2
28660: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28661: LD_EXP 55
28665: PUSH
28666: LD_EXP 88
28670: AND
28671: IFFALSE 28777
28673: GO 28675
28675: DISABLE
28676: LD_INT 0
28678: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28679: LD_ADDR_VAR 0 1
28683: PUSH
28684: LD_INT 22
28686: PUSH
28687: LD_OWVAR 2
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 30
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PPUSH
28728: CALL_OW 69
28732: ST_TO_ADDR
// if not depot then
28733: LD_VAR 0 1
28737: NOT
28738: IFFALSE 28742
// exit ;
28740: GO 28777
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28742: LD_VAR 0 1
28746: PUSH
28747: LD_INT 1
28749: ARRAY
28750: PPUSH
28751: CALL_OW 250
28755: PPUSH
28756: LD_VAR 0 1
28760: PUSH
28761: LD_INT 1
28763: ARRAY
28764: PPUSH
28765: CALL_OW 251
28769: PPUSH
28770: LD_INT 70
28772: PPUSH
28773: CALL_OW 495
// end ;
28777: PPOPN 1
28779: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28780: LD_EXP 55
28784: PUSH
28785: LD_EXP 89
28789: AND
28790: IFFALSE 29001
28792: GO 28794
28794: DISABLE
28795: LD_INT 0
28797: PPUSH
28798: PPUSH
28799: PPUSH
28800: PPUSH
28801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28802: LD_ADDR_VAR 0 5
28806: PUSH
28807: LD_INT 22
28809: PUSH
28810: LD_OWVAR 2
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 21
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PPUSH
28833: CALL_OW 69
28837: ST_TO_ADDR
// if not tmp then
28838: LD_VAR 0 5
28842: NOT
28843: IFFALSE 28847
// exit ;
28845: GO 29001
// for i in tmp do
28847: LD_ADDR_VAR 0 1
28851: PUSH
28852: LD_VAR 0 5
28856: PUSH
28857: FOR_IN
28858: IFFALSE 28999
// begin d := rand ( 0 , 5 ) ;
28860: LD_ADDR_VAR 0 4
28864: PUSH
28865: LD_INT 0
28867: PPUSH
28868: LD_INT 5
28870: PPUSH
28871: CALL_OW 12
28875: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28876: LD_ADDR_VAR 0 2
28880: PUSH
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL_OW 250
28890: PPUSH
28891: LD_VAR 0 4
28895: PPUSH
28896: LD_INT 3
28898: PPUSH
28899: LD_INT 12
28901: PPUSH
28902: CALL_OW 12
28906: PPUSH
28907: CALL_OW 272
28911: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_VAR 0 1
28921: PPUSH
28922: CALL_OW 251
28926: PPUSH
28927: LD_VAR 0 4
28931: PPUSH
28932: LD_INT 3
28934: PPUSH
28935: LD_INT 12
28937: PPUSH
28938: CALL_OW 12
28942: PPUSH
28943: CALL_OW 273
28947: ST_TO_ADDR
// if ValidHex ( x , y ) then
28948: LD_VAR 0 2
28952: PPUSH
28953: LD_VAR 0 3
28957: PPUSH
28958: CALL_OW 488
28962: IFFALSE 28997
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28964: LD_VAR 0 1
28968: PPUSH
28969: LD_VAR 0 2
28973: PPUSH
28974: LD_VAR 0 3
28978: PPUSH
28979: LD_INT 3
28981: PPUSH
28982: LD_INT 6
28984: PPUSH
28985: CALL_OW 12
28989: PPUSH
28990: LD_INT 1
28992: PPUSH
28993: CALL_OW 483
// end ;
28997: GO 28857
28999: POP
29000: POP
// end ;
29001: PPOPN 5
29003: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29004: LD_EXP 55
29008: PUSH
29009: LD_EXP 90
29013: AND
29014: IFFALSE 29108
29016: GO 29018
29018: DISABLE
29019: LD_INT 0
29021: PPUSH
29022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29023: LD_ADDR_VAR 0 2
29027: PUSH
29028: LD_INT 22
29030: PUSH
29031: LD_OWVAR 2
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 32
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 21
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 69
29069: ST_TO_ADDR
// if not tmp then
29070: LD_VAR 0 2
29074: NOT
29075: IFFALSE 29079
// exit ;
29077: GO 29108
// for i in tmp do
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 2
29088: PUSH
29089: FOR_IN
29090: IFFALSE 29106
// SetFuel ( i , 0 ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: LD_INT 0
29099: PPUSH
29100: CALL_OW 240
29104: GO 29089
29106: POP
29107: POP
// end ;
29108: PPOPN 2
29110: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29111: LD_EXP 55
29115: PUSH
29116: LD_EXP 91
29120: AND
29121: IFFALSE 29187
29123: GO 29125
29125: DISABLE
29126: LD_INT 0
29128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29129: LD_ADDR_VAR 0 1
29133: PUSH
29134: LD_INT 22
29136: PUSH
29137: LD_OWVAR 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 30
29148: PUSH
29149: LD_INT 29
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PPUSH
29160: CALL_OW 69
29164: ST_TO_ADDR
// if not tmp then
29165: LD_VAR 0 1
29169: NOT
29170: IFFALSE 29174
// exit ;
29172: GO 29187
// DestroyUnit ( tmp [ 1 ] ) ;
29174: LD_VAR 0 1
29178: PUSH
29179: LD_INT 1
29181: ARRAY
29182: PPUSH
29183: CALL_OW 65
// end ;
29187: PPOPN 1
29189: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29190: LD_EXP 55
29194: PUSH
29195: LD_EXP 93
29199: AND
29200: IFFALSE 29329
29202: GO 29204
29204: DISABLE
29205: LD_INT 0
29207: PPUSH
// begin uc_side := 0 ;
29208: LD_ADDR_OWVAR 20
29212: PUSH
29213: LD_INT 0
29215: ST_TO_ADDR
// uc_nation := nation_arabian ;
29216: LD_ADDR_OWVAR 21
29220: PUSH
29221: LD_INT 2
29223: ST_TO_ADDR
// hc_gallery :=  ;
29224: LD_ADDR_OWVAR 33
29228: PUSH
29229: LD_STRING 
29231: ST_TO_ADDR
// hc_name :=  ;
29232: LD_ADDR_OWVAR 26
29236: PUSH
29237: LD_STRING 
29239: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29240: LD_INT 1
29242: PPUSH
29243: LD_INT 11
29245: PPUSH
29246: LD_INT 10
29248: PPUSH
29249: CALL_OW 380
// un := CreateHuman ;
29253: LD_ADDR_VAR 0 1
29257: PUSH
29258: CALL_OW 44
29262: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29263: LD_VAR 0 1
29267: PPUSH
29268: LD_INT 1
29270: PPUSH
29271: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29275: LD_INT 35
29277: PPUSH
29278: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29282: LD_VAR 0 1
29286: PPUSH
29287: LD_INT 22
29289: PUSH
29290: LD_OWVAR 2
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PPUSH
29299: CALL_OW 69
29303: PPUSH
29304: LD_VAR 0 1
29308: PPUSH
29309: CALL_OW 74
29313: PPUSH
29314: CALL_OW 115
// until IsDead ( un ) ;
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL_OW 301
29327: IFFALSE 29275
// end ;
29329: PPOPN 1
29331: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29332: LD_EXP 55
29336: PUSH
29337: LD_EXP 95
29341: AND
29342: IFFALSE 29354
29344: GO 29346
29346: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29347: LD_STRING earthquake(getX(game), 0, 32)
29349: PPUSH
29350: CALL_OW 559
29354: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29355: LD_EXP 55
29359: PUSH
29360: LD_EXP 96
29364: AND
29365: IFFALSE 29456
29367: GO 29369
29369: DISABLE
29370: LD_INT 0
29372: PPUSH
// begin enable ;
29373: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29374: LD_ADDR_VAR 0 1
29378: PUSH
29379: LD_INT 22
29381: PUSH
29382: LD_OWVAR 2
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 21
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 33
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: LIST
29415: PPUSH
29416: CALL_OW 69
29420: ST_TO_ADDR
// if not tmp then
29421: LD_VAR 0 1
29425: NOT
29426: IFFALSE 29430
// exit ;
29428: GO 29456
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29430: LD_VAR 0 1
29434: PUSH
29435: LD_INT 1
29437: PPUSH
29438: LD_VAR 0 1
29442: PPUSH
29443: CALL_OW 12
29447: ARRAY
29448: PPUSH
29449: LD_INT 1
29451: PPUSH
29452: CALL_OW 234
// end ;
29456: PPOPN 1
29458: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29459: LD_EXP 55
29463: PUSH
29464: LD_EXP 97
29468: AND
29469: IFFALSE 29610
29471: GO 29473
29473: DISABLE
29474: LD_INT 0
29476: PPUSH
29477: PPUSH
29478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29479: LD_ADDR_VAR 0 3
29483: PUSH
29484: LD_INT 22
29486: PUSH
29487: LD_OWVAR 2
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 25
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PPUSH
29510: CALL_OW 69
29514: ST_TO_ADDR
// if not tmp then
29515: LD_VAR 0 3
29519: NOT
29520: IFFALSE 29524
// exit ;
29522: GO 29610
// un := tmp [ rand ( 1 , tmp ) ] ;
29524: LD_ADDR_VAR 0 2
29528: PUSH
29529: LD_VAR 0 3
29533: PUSH
29534: LD_INT 1
29536: PPUSH
29537: LD_VAR 0 3
29541: PPUSH
29542: CALL_OW 12
29546: ARRAY
29547: ST_TO_ADDR
// if Crawls ( un ) then
29548: LD_VAR 0 2
29552: PPUSH
29553: CALL_OW 318
29557: IFFALSE 29568
// ComWalk ( un ) ;
29559: LD_VAR 0 2
29563: PPUSH
29564: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29568: LD_VAR 0 2
29572: PPUSH
29573: LD_INT 9
29575: PPUSH
29576: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29580: LD_INT 28
29582: PPUSH
29583: LD_OWVAR 2
29587: PPUSH
29588: LD_INT 2
29590: PPUSH
29591: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29595: LD_INT 29
29597: PPUSH
29598: LD_OWVAR 2
29602: PPUSH
29603: LD_INT 2
29605: PPUSH
29606: CALL_OW 322
// end ;
29610: PPOPN 3
29612: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29613: LD_EXP 55
29617: PUSH
29618: LD_EXP 98
29622: AND
29623: IFFALSE 29734
29625: GO 29627
29627: DISABLE
29628: LD_INT 0
29630: PPUSH
29631: PPUSH
29632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29633: LD_ADDR_VAR 0 3
29637: PUSH
29638: LD_INT 22
29640: PUSH
29641: LD_OWVAR 2
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 25
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PPUSH
29664: CALL_OW 69
29668: ST_TO_ADDR
// if not tmp then
29669: LD_VAR 0 3
29673: NOT
29674: IFFALSE 29678
// exit ;
29676: GO 29734
// un := tmp [ rand ( 1 , tmp ) ] ;
29678: LD_ADDR_VAR 0 2
29682: PUSH
29683: LD_VAR 0 3
29687: PUSH
29688: LD_INT 1
29690: PPUSH
29691: LD_VAR 0 3
29695: PPUSH
29696: CALL_OW 12
29700: ARRAY
29701: ST_TO_ADDR
// if Crawls ( un ) then
29702: LD_VAR 0 2
29706: PPUSH
29707: CALL_OW 318
29711: IFFALSE 29722
// ComWalk ( un ) ;
29713: LD_VAR 0 2
29717: PPUSH
29718: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29722: LD_VAR 0 2
29726: PPUSH
29727: LD_INT 8
29729: PPUSH
29730: CALL_OW 336
// end ;
29734: PPOPN 3
29736: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29737: LD_EXP 55
29741: PUSH
29742: LD_EXP 99
29746: AND
29747: IFFALSE 29891
29749: GO 29751
29751: DISABLE
29752: LD_INT 0
29754: PPUSH
29755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29756: LD_ADDR_VAR 0 2
29760: PUSH
29761: LD_INT 22
29763: PUSH
29764: LD_OWVAR 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 21
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: LD_INT 34
29788: PUSH
29789: LD_INT 12
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 34
29798: PUSH
29799: LD_INT 51
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 34
29808: PUSH
29809: LD_INT 32
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: PPUSH
29827: CALL_OW 69
29831: ST_TO_ADDR
// if not tmp then
29832: LD_VAR 0 2
29836: NOT
29837: IFFALSE 29841
// exit ;
29839: GO 29891
// for i in tmp do
29841: LD_ADDR_VAR 0 1
29845: PUSH
29846: LD_VAR 0 2
29850: PUSH
29851: FOR_IN
29852: IFFALSE 29889
// if GetCargo ( i , mat_artifact ) = 0 then
29854: LD_VAR 0 1
29858: PPUSH
29859: LD_INT 4
29861: PPUSH
29862: CALL_OW 289
29866: PUSH
29867: LD_INT 0
29869: EQUAL
29870: IFFALSE 29887
// SetCargo ( i , mat_siberit , 100 ) ;
29872: LD_VAR 0 1
29876: PPUSH
29877: LD_INT 3
29879: PPUSH
29880: LD_INT 100
29882: PPUSH
29883: CALL_OW 290
29887: GO 29851
29889: POP
29890: POP
// end ;
29891: PPOPN 2
29893: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29894: LD_EXP 55
29898: PUSH
29899: LD_EXP 100
29903: AND
29904: IFFALSE 30087
29906: GO 29908
29908: DISABLE
29909: LD_INT 0
29911: PPUSH
29912: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29913: LD_ADDR_VAR 0 2
29917: PUSH
29918: LD_INT 22
29920: PUSH
29921: LD_OWVAR 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PPUSH
29930: CALL_OW 69
29934: ST_TO_ADDR
// if not tmp then
29935: LD_VAR 0 2
29939: NOT
29940: IFFALSE 29944
// exit ;
29942: GO 30087
// for i := 1 to 2 do
29944: LD_ADDR_VAR 0 1
29948: PUSH
29949: DOUBLE
29950: LD_INT 1
29952: DEC
29953: ST_TO_ADDR
29954: LD_INT 2
29956: PUSH
29957: FOR_TO
29958: IFFALSE 30085
// begin uc_side := your_side ;
29960: LD_ADDR_OWVAR 20
29964: PUSH
29965: LD_OWVAR 2
29969: ST_TO_ADDR
// uc_nation := nation_american ;
29970: LD_ADDR_OWVAR 21
29974: PUSH
29975: LD_INT 1
29977: ST_TO_ADDR
// vc_chassis := us_morphling ;
29978: LD_ADDR_OWVAR 37
29982: PUSH
29983: LD_INT 5
29985: ST_TO_ADDR
// vc_engine := engine_siberite ;
29986: LD_ADDR_OWVAR 39
29990: PUSH
29991: LD_INT 3
29993: ST_TO_ADDR
// vc_control := control_computer ;
29994: LD_ADDR_OWVAR 38
29998: PUSH
29999: LD_INT 3
30001: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30002: LD_ADDR_OWVAR 40
30006: PUSH
30007: LD_INT 10
30009: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30010: LD_VAR 0 2
30014: PUSH
30015: LD_INT 1
30017: ARRAY
30018: PPUSH
30019: CALL_OW 310
30023: NOT
30024: IFFALSE 30071
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30026: CALL_OW 45
30030: PPUSH
30031: LD_VAR 0 2
30035: PUSH
30036: LD_INT 1
30038: ARRAY
30039: PPUSH
30040: CALL_OW 250
30044: PPUSH
30045: LD_VAR 0 2
30049: PUSH
30050: LD_INT 1
30052: ARRAY
30053: PPUSH
30054: CALL_OW 251
30058: PPUSH
30059: LD_INT 12
30061: PPUSH
30062: LD_INT 1
30064: PPUSH
30065: CALL_OW 50
30069: GO 30083
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30071: CALL_OW 45
30075: PPUSH
30076: LD_INT 1
30078: PPUSH
30079: CALL_OW 51
// end ;
30083: GO 29957
30085: POP
30086: POP
// end ;
30087: PPOPN 2
30089: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30090: LD_EXP 55
30094: PUSH
30095: LD_EXP 101
30099: AND
30100: IFFALSE 30322
30102: GO 30104
30104: DISABLE
30105: LD_INT 0
30107: PPUSH
30108: PPUSH
30109: PPUSH
30110: PPUSH
30111: PPUSH
30112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30113: LD_ADDR_VAR 0 6
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_OWVAR 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 21
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 3
30142: PUSH
30143: LD_INT 23
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: PPUSH
30162: CALL_OW 69
30166: ST_TO_ADDR
// if not tmp then
30167: LD_VAR 0 6
30171: NOT
30172: IFFALSE 30176
// exit ;
30174: GO 30322
// s1 := rand ( 1 , 4 ) ;
30176: LD_ADDR_VAR 0 2
30180: PUSH
30181: LD_INT 1
30183: PPUSH
30184: LD_INT 4
30186: PPUSH
30187: CALL_OW 12
30191: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30192: LD_ADDR_VAR 0 4
30196: PUSH
30197: LD_VAR 0 6
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: PPUSH
30206: LD_VAR 0 2
30210: PPUSH
30211: CALL_OW 259
30215: ST_TO_ADDR
// if s1 = 1 then
30216: LD_VAR 0 2
30220: PUSH
30221: LD_INT 1
30223: EQUAL
30224: IFFALSE 30244
// s2 := rand ( 2 , 4 ) else
30226: LD_ADDR_VAR 0 3
30230: PUSH
30231: LD_INT 2
30233: PPUSH
30234: LD_INT 4
30236: PPUSH
30237: CALL_OW 12
30241: ST_TO_ADDR
30242: GO 30252
// s2 := 1 ;
30244: LD_ADDR_VAR 0 3
30248: PUSH
30249: LD_INT 1
30251: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30252: LD_ADDR_VAR 0 5
30256: PUSH
30257: LD_VAR 0 6
30261: PUSH
30262: LD_INT 1
30264: ARRAY
30265: PPUSH
30266: LD_VAR 0 3
30270: PPUSH
30271: CALL_OW 259
30275: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30276: LD_VAR 0 6
30280: PUSH
30281: LD_INT 1
30283: ARRAY
30284: PPUSH
30285: LD_VAR 0 2
30289: PPUSH
30290: LD_VAR 0 5
30294: PPUSH
30295: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30299: LD_VAR 0 6
30303: PUSH
30304: LD_INT 1
30306: ARRAY
30307: PPUSH
30308: LD_VAR 0 3
30312: PPUSH
30313: LD_VAR 0 4
30317: PPUSH
30318: CALL_OW 237
// end ;
30322: PPOPN 6
30324: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30325: LD_EXP 55
30329: PUSH
30330: LD_EXP 102
30334: AND
30335: IFFALSE 30414
30337: GO 30339
30339: DISABLE
30340: LD_INT 0
30342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30343: LD_ADDR_VAR 0 1
30347: PUSH
30348: LD_INT 22
30350: PUSH
30351: LD_OWVAR 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 30
30362: PUSH
30363: LD_INT 3
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PPUSH
30374: CALL_OW 69
30378: ST_TO_ADDR
// if not tmp then
30379: LD_VAR 0 1
30383: NOT
30384: IFFALSE 30388
// exit ;
30386: GO 30414
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30388: LD_VAR 0 1
30392: PUSH
30393: LD_INT 1
30395: PPUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 12
30405: ARRAY
30406: PPUSH
30407: LD_INT 1
30409: PPUSH
30410: CALL_OW 234
// end ;
30414: PPOPN 1
30416: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30417: LD_EXP 55
30421: PUSH
30422: LD_EXP 103
30426: AND
30427: IFFALSE 30539
30429: GO 30431
30431: DISABLE
30432: LD_INT 0
30434: PPUSH
30435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30436: LD_ADDR_VAR 0 2
30440: PUSH
30441: LD_INT 22
30443: PUSH
30444: LD_OWVAR 2
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 30
30458: PUSH
30459: LD_INT 27
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 30
30468: PUSH
30469: LD_INT 26
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 30
30478: PUSH
30479: LD_INT 28
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PPUSH
30496: CALL_OW 69
30500: ST_TO_ADDR
// if not tmp then
30501: LD_VAR 0 2
30505: NOT
30506: IFFALSE 30510
// exit ;
30508: GO 30539
// for i in tmp do
30510: LD_ADDR_VAR 0 1
30514: PUSH
30515: LD_VAR 0 2
30519: PUSH
30520: FOR_IN
30521: IFFALSE 30537
// SetLives ( i , 1 ) ;
30523: LD_VAR 0 1
30527: PPUSH
30528: LD_INT 1
30530: PPUSH
30531: CALL_OW 234
30535: GO 30520
30537: POP
30538: POP
// end ;
30539: PPOPN 2
30541: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30542: LD_EXP 55
30546: PUSH
30547: LD_EXP 104
30551: AND
30552: IFFALSE 30839
30554: GO 30556
30556: DISABLE
30557: LD_INT 0
30559: PPUSH
30560: PPUSH
30561: PPUSH
// begin i := rand ( 1 , 7 ) ;
30562: LD_ADDR_VAR 0 1
30566: PUSH
30567: LD_INT 1
30569: PPUSH
30570: LD_INT 7
30572: PPUSH
30573: CALL_OW 12
30577: ST_TO_ADDR
// case i of 1 :
30578: LD_VAR 0 1
30582: PUSH
30583: LD_INT 1
30585: DOUBLE
30586: EQUAL
30587: IFTRUE 30591
30589: GO 30601
30591: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30592: LD_STRING earthquake(getX(game), 0, 32)
30594: PPUSH
30595: CALL_OW 559
30599: GO 30839
30601: LD_INT 2
30603: DOUBLE
30604: EQUAL
30605: IFTRUE 30609
30607: GO 30623
30609: POP
// begin ToLua ( displayStucuk(); ) ;
30610: LD_STRING displayStucuk();
30612: PPUSH
30613: CALL_OW 559
// ResetFog ;
30617: CALL_OW 335
// end ; 3 :
30621: GO 30839
30623: LD_INT 3
30625: DOUBLE
30626: EQUAL
30627: IFTRUE 30631
30629: GO 30735
30631: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30632: LD_ADDR_VAR 0 2
30636: PUSH
30637: LD_INT 22
30639: PUSH
30640: LD_OWVAR 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 25
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PPUSH
30663: CALL_OW 69
30667: ST_TO_ADDR
// if not tmp then
30668: LD_VAR 0 2
30672: NOT
30673: IFFALSE 30677
// exit ;
30675: GO 30839
// un := tmp [ rand ( 1 , tmp ) ] ;
30677: LD_ADDR_VAR 0 3
30681: PUSH
30682: LD_VAR 0 2
30686: PUSH
30687: LD_INT 1
30689: PPUSH
30690: LD_VAR 0 2
30694: PPUSH
30695: CALL_OW 12
30699: ARRAY
30700: ST_TO_ADDR
// if Crawls ( un ) then
30701: LD_VAR 0 3
30705: PPUSH
30706: CALL_OW 318
30710: IFFALSE 30721
// ComWalk ( un ) ;
30712: LD_VAR 0 3
30716: PPUSH
30717: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30721: LD_VAR 0 3
30725: PPUSH
30726: LD_INT 8
30728: PPUSH
30729: CALL_OW 336
// end ; 4 :
30733: GO 30839
30735: LD_INT 4
30737: DOUBLE
30738: EQUAL
30739: IFTRUE 30743
30741: GO 30817
30743: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30744: LD_ADDR_VAR 0 2
30748: PUSH
30749: LD_INT 22
30751: PUSH
30752: LD_OWVAR 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 30
30763: PUSH
30764: LD_INT 29
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PPUSH
30775: CALL_OW 69
30779: ST_TO_ADDR
// if not tmp then
30780: LD_VAR 0 2
30784: NOT
30785: IFFALSE 30789
// exit ;
30787: GO 30839
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30789: LD_VAR 0 2
30793: PUSH
30794: LD_INT 1
30796: ARRAY
30797: PPUSH
30798: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30802: LD_VAR 0 2
30806: PUSH
30807: LD_INT 1
30809: ARRAY
30810: PPUSH
30811: CALL_OW 65
// end ; 5 .. 7 :
30815: GO 30839
30817: LD_INT 5
30819: DOUBLE
30820: GREATEREQUAL
30821: IFFALSE 30829
30823: LD_INT 7
30825: DOUBLE
30826: LESSEQUAL
30827: IFTRUE 30831
30829: GO 30838
30831: POP
// StreamSibBomb ; end ;
30832: CALL 27076 0 0
30836: GO 30839
30838: POP
// end ;
30839: PPOPN 3
30841: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30842: LD_EXP 55
30846: PUSH
30847: LD_EXP 105
30851: AND
30852: IFFALSE 31008
30854: GO 30856
30856: DISABLE
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
30861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30862: LD_ADDR_VAR 0 2
30866: PUSH
30867: LD_INT 81
30869: PUSH
30870: LD_OWVAR 2
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 2
30881: PUSH
30882: LD_INT 21
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 21
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: LIST
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PPUSH
30911: CALL_OW 69
30915: ST_TO_ADDR
// if not tmp then
30916: LD_VAR 0 2
30920: NOT
30921: IFFALSE 30925
// exit ;
30923: GO 31008
// p := 0 ;
30925: LD_ADDR_VAR 0 3
30929: PUSH
30930: LD_INT 0
30932: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30933: LD_INT 35
30935: PPUSH
30936: CALL_OW 67
// p := p + 1 ;
30940: LD_ADDR_VAR 0 3
30944: PUSH
30945: LD_VAR 0 3
30949: PUSH
30950: LD_INT 1
30952: PLUS
30953: ST_TO_ADDR
// for i in tmp do
30954: LD_ADDR_VAR 0 1
30958: PUSH
30959: LD_VAR 0 2
30963: PUSH
30964: FOR_IN
30965: IFFALSE 30996
// if GetLives ( i ) < 1000 then
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL_OW 256
30976: PUSH
30977: LD_INT 1000
30979: LESS
30980: IFFALSE 30994
// SetLives ( i , 1000 ) ;
30982: LD_VAR 0 1
30986: PPUSH
30987: LD_INT 1000
30989: PPUSH
30990: CALL_OW 234
30994: GO 30964
30996: POP
30997: POP
// until p > 20 ;
30998: LD_VAR 0 3
31002: PUSH
31003: LD_INT 20
31005: GREATER
31006: IFFALSE 30933
// end ;
31008: PPOPN 3
31010: END
// every 0 0$1 trigger StreamModeActive and sTime do
31011: LD_EXP 55
31015: PUSH
31016: LD_EXP 106
31020: AND
31021: IFFALSE 31056
31023: GO 31025
31025: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31026: LD_INT 28
31028: PPUSH
31029: LD_OWVAR 2
31033: PPUSH
31034: LD_INT 2
31036: PPUSH
31037: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31041: LD_INT 30
31043: PPUSH
31044: LD_OWVAR 2
31048: PPUSH
31049: LD_INT 2
31051: PPUSH
31052: CALL_OW 322
// end ;
31056: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31057: LD_EXP 55
31061: PUSH
31062: LD_EXP 107
31066: AND
31067: IFFALSE 31188
31069: GO 31071
31071: DISABLE
31072: LD_INT 0
31074: PPUSH
31075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31076: LD_ADDR_VAR 0 2
31080: PUSH
31081: LD_INT 22
31083: PUSH
31084: LD_OWVAR 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 21
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: LD_INT 23
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: PPUSH
31125: CALL_OW 69
31129: ST_TO_ADDR
// if not tmp then
31130: LD_VAR 0 2
31134: NOT
31135: IFFALSE 31139
// exit ;
31137: GO 31188
// for i in tmp do
31139: LD_ADDR_VAR 0 1
31143: PUSH
31144: LD_VAR 0 2
31148: PUSH
31149: FOR_IN
31150: IFFALSE 31186
// begin if Crawls ( i ) then
31152: LD_VAR 0 1
31156: PPUSH
31157: CALL_OW 318
31161: IFFALSE 31172
// ComWalk ( i ) ;
31163: LD_VAR 0 1
31167: PPUSH
31168: CALL_OW 138
// SetClass ( i , 2 ) ;
31172: LD_VAR 0 1
31176: PPUSH
31177: LD_INT 2
31179: PPUSH
31180: CALL_OW 336
// end ;
31184: GO 31149
31186: POP
31187: POP
// end ;
31188: PPOPN 2
31190: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31191: LD_EXP 55
31195: PUSH
31196: LD_EXP 108
31200: AND
31201: IFFALSE 31489
31203: GO 31205
31205: DISABLE
31206: LD_INT 0
31208: PPUSH
31209: PPUSH
31210: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31211: LD_OWVAR 2
31215: PPUSH
31216: LD_INT 9
31218: PPUSH
31219: LD_INT 1
31221: PPUSH
31222: LD_INT 1
31224: PPUSH
31225: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31229: LD_INT 9
31231: PPUSH
31232: LD_OWVAR 2
31236: PPUSH
31237: CALL_OW 343
// uc_side := 9 ;
31241: LD_ADDR_OWVAR 20
31245: PUSH
31246: LD_INT 9
31248: ST_TO_ADDR
// uc_nation := 2 ;
31249: LD_ADDR_OWVAR 21
31253: PUSH
31254: LD_INT 2
31256: ST_TO_ADDR
// hc_name := Dark Warrior ;
31257: LD_ADDR_OWVAR 26
31261: PUSH
31262: LD_STRING Dark Warrior
31264: ST_TO_ADDR
// hc_gallery :=  ;
31265: LD_ADDR_OWVAR 33
31269: PUSH
31270: LD_STRING 
31272: ST_TO_ADDR
// hc_noskilllimit := true ;
31273: LD_ADDR_OWVAR 76
31277: PUSH
31278: LD_INT 1
31280: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31281: LD_ADDR_OWVAR 31
31285: PUSH
31286: LD_INT 30
31288: PUSH
31289: LD_INT 30
31291: PUSH
31292: LD_INT 30
31294: PUSH
31295: LD_INT 30
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
// un := CreateHuman ;
31304: LD_ADDR_VAR 0 3
31308: PUSH
31309: CALL_OW 44
31313: ST_TO_ADDR
// hc_noskilllimit := false ;
31314: LD_ADDR_OWVAR 76
31318: PUSH
31319: LD_INT 0
31321: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31322: LD_VAR 0 3
31326: PPUSH
31327: LD_INT 1
31329: PPUSH
31330: CALL_OW 51
// ToLua ( playRanger() ) ;
31334: LD_STRING playRanger()
31336: PPUSH
31337: CALL_OW 559
// p := 0 ;
31341: LD_ADDR_VAR 0 2
31345: PUSH
31346: LD_INT 0
31348: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31349: LD_INT 35
31351: PPUSH
31352: CALL_OW 67
// p := p + 1 ;
31356: LD_ADDR_VAR 0 2
31360: PUSH
31361: LD_VAR 0 2
31365: PUSH
31366: LD_INT 1
31368: PLUS
31369: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31370: LD_VAR 0 3
31374: PPUSH
31375: CALL_OW 256
31379: PUSH
31380: LD_INT 1000
31382: LESS
31383: IFFALSE 31397
// SetLives ( un , 1000 ) ;
31385: LD_VAR 0 3
31389: PPUSH
31390: LD_INT 1000
31392: PPUSH
31393: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31397: LD_VAR 0 3
31401: PPUSH
31402: LD_INT 81
31404: PUSH
31405: LD_OWVAR 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 91
31416: PUSH
31417: LD_VAR 0 3
31421: PUSH
31422: LD_INT 30
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PPUSH
31434: CALL_OW 69
31438: PPUSH
31439: LD_VAR 0 3
31443: PPUSH
31444: CALL_OW 74
31448: PPUSH
31449: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31453: LD_VAR 0 2
31457: PUSH
31458: LD_INT 80
31460: GREATER
31461: PUSH
31462: LD_VAR 0 3
31466: PPUSH
31467: CALL_OW 301
31471: OR
31472: IFFALSE 31349
// if un then
31474: LD_VAR 0 3
31478: IFFALSE 31489
// RemoveUnit ( un ) ;
31480: LD_VAR 0 3
31484: PPUSH
31485: CALL_OW 64
// end ;
31489: PPOPN 3
31491: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31492: LD_EXP 109
31496: IFFALSE 31612
31498: GO 31500
31500: DISABLE
31501: LD_INT 0
31503: PPUSH
31504: PPUSH
31505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31506: LD_ADDR_VAR 0 2
31510: PUSH
31511: LD_INT 81
31513: PUSH
31514: LD_OWVAR 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 21
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PPUSH
31537: CALL_OW 69
31541: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31542: LD_STRING playComputer()
31544: PPUSH
31545: CALL_OW 559
// if not tmp then
31549: LD_VAR 0 2
31553: NOT
31554: IFFALSE 31558
// exit ;
31556: GO 31612
// for i in tmp do
31558: LD_ADDR_VAR 0 1
31562: PUSH
31563: LD_VAR 0 2
31567: PUSH
31568: FOR_IN
31569: IFFALSE 31610
// for j := 1 to 4 do
31571: LD_ADDR_VAR 0 3
31575: PUSH
31576: DOUBLE
31577: LD_INT 1
31579: DEC
31580: ST_TO_ADDR
31581: LD_INT 4
31583: PUSH
31584: FOR_TO
31585: IFFALSE 31606
// SetSkill ( i , j , 10 ) ;
31587: LD_VAR 0 1
31591: PPUSH
31592: LD_VAR 0 3
31596: PPUSH
31597: LD_INT 10
31599: PPUSH
31600: CALL_OW 237
31604: GO 31584
31606: POP
31607: POP
31608: GO 31568
31610: POP
31611: POP
// end ;
31612: PPOPN 3
31614: END
// every 0 0$1 trigger s30 do var i , tmp ;
31615: LD_EXP 110
31619: IFFALSE 31688
31621: GO 31623
31623: DISABLE
31624: LD_INT 0
31626: PPUSH
31627: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31628: LD_ADDR_VAR 0 2
31632: PUSH
31633: LD_INT 22
31635: PUSH
31636: LD_OWVAR 2
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PPUSH
31645: CALL_OW 69
31649: ST_TO_ADDR
// if not tmp then
31650: LD_VAR 0 2
31654: NOT
31655: IFFALSE 31659
// exit ;
31657: GO 31688
// for i in tmp do
31659: LD_ADDR_VAR 0 1
31663: PUSH
31664: LD_VAR 0 2
31668: PUSH
31669: FOR_IN
31670: IFFALSE 31686
// SetLives ( i , 300 ) ;
31672: LD_VAR 0 1
31676: PPUSH
31677: LD_INT 300
31679: PPUSH
31680: CALL_OW 234
31684: GO 31669
31686: POP
31687: POP
// end ;
31688: PPOPN 2
31690: END
// every 0 0$1 trigger s60 do var i , tmp ;
31691: LD_EXP 111
31695: IFFALSE 31764
31697: GO 31699
31699: DISABLE
31700: LD_INT 0
31702: PPUSH
31703: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31704: LD_ADDR_VAR 0 2
31708: PUSH
31709: LD_INT 22
31711: PUSH
31712: LD_OWVAR 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PPUSH
31721: CALL_OW 69
31725: ST_TO_ADDR
// if not tmp then
31726: LD_VAR 0 2
31730: NOT
31731: IFFALSE 31735
// exit ;
31733: GO 31764
// for i in tmp do
31735: LD_ADDR_VAR 0 1
31739: PUSH
31740: LD_VAR 0 2
31744: PUSH
31745: FOR_IN
31746: IFFALSE 31762
// SetLives ( i , 600 ) ;
31748: LD_VAR 0 1
31752: PPUSH
31753: LD_INT 600
31755: PPUSH
31756: CALL_OW 234
31760: GO 31745
31762: POP
31763: POP
// end ;
31764: PPOPN 2
31766: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31767: LD_INT 0
31769: PPUSH
// case cmd of 301 :
31770: LD_VAR 0 1
31774: PUSH
31775: LD_INT 301
31777: DOUBLE
31778: EQUAL
31779: IFTRUE 31783
31781: GO 31815
31783: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31784: LD_VAR 0 6
31788: PPUSH
31789: LD_VAR 0 7
31793: PPUSH
31794: LD_VAR 0 8
31798: PPUSH
31799: LD_VAR 0 4
31803: PPUSH
31804: LD_VAR 0 5
31808: PPUSH
31809: CALL 33024 0 5
31813: GO 31936
31815: LD_INT 302
31817: DOUBLE
31818: EQUAL
31819: IFTRUE 31823
31821: GO 31860
31823: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31824: LD_VAR 0 6
31828: PPUSH
31829: LD_VAR 0 7
31833: PPUSH
31834: LD_VAR 0 8
31838: PPUSH
31839: LD_VAR 0 9
31843: PPUSH
31844: LD_VAR 0 4
31848: PPUSH
31849: LD_VAR 0 5
31853: PPUSH
31854: CALL 33115 0 6
31858: GO 31936
31860: LD_INT 303
31862: DOUBLE
31863: EQUAL
31864: IFTRUE 31868
31866: GO 31905
31868: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31869: LD_VAR 0 6
31873: PPUSH
31874: LD_VAR 0 7
31878: PPUSH
31879: LD_VAR 0 8
31883: PPUSH
31884: LD_VAR 0 9
31888: PPUSH
31889: LD_VAR 0 4
31893: PPUSH
31894: LD_VAR 0 5
31898: PPUSH
31899: CALL 31941 0 6
31903: GO 31936
31905: LD_INT 304
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31913
31911: GO 31935
31913: POP
// hHackTeleport ( unit , x , y ) ; end ;
31914: LD_VAR 0 2
31918: PPUSH
31919: LD_VAR 0 4
31923: PPUSH
31924: LD_VAR 0 5
31928: PPUSH
31929: CALL 33708 0 3
31933: GO 31936
31935: POP
// end ;
31936: LD_VAR 0 12
31940: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31941: LD_INT 0
31943: PPUSH
31944: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31945: LD_VAR 0 1
31949: PUSH
31950: LD_INT 1
31952: LESS
31953: PUSH
31954: LD_VAR 0 1
31958: PUSH
31959: LD_INT 3
31961: GREATER
31962: OR
31963: PUSH
31964: LD_VAR 0 5
31968: PPUSH
31969: LD_VAR 0 6
31973: PPUSH
31974: CALL_OW 428
31978: OR
31979: IFFALSE 31983
// exit ;
31981: GO 32711
// uc_side := your_side ;
31983: LD_ADDR_OWVAR 20
31987: PUSH
31988: LD_OWVAR 2
31992: ST_TO_ADDR
// uc_nation := nation ;
31993: LD_ADDR_OWVAR 21
31997: PUSH
31998: LD_VAR 0 1
32002: ST_TO_ADDR
// bc_level = 1 ;
32003: LD_ADDR_OWVAR 43
32007: PUSH
32008: LD_INT 1
32010: ST_TO_ADDR
// case btype of 1 :
32011: LD_VAR 0 2
32015: PUSH
32016: LD_INT 1
32018: DOUBLE
32019: EQUAL
32020: IFTRUE 32024
32022: GO 32035
32024: POP
// bc_type := b_depot ; 2 :
32025: LD_ADDR_OWVAR 42
32029: PUSH
32030: LD_INT 0
32032: ST_TO_ADDR
32033: GO 32655
32035: LD_INT 2
32037: DOUBLE
32038: EQUAL
32039: IFTRUE 32043
32041: GO 32054
32043: POP
// bc_type := b_warehouse ; 3 :
32044: LD_ADDR_OWVAR 42
32048: PUSH
32049: LD_INT 1
32051: ST_TO_ADDR
32052: GO 32655
32054: LD_INT 3
32056: DOUBLE
32057: EQUAL
32058: IFTRUE 32062
32060: GO 32073
32062: POP
// bc_type := b_lab ; 4 .. 9 :
32063: LD_ADDR_OWVAR 42
32067: PUSH
32068: LD_INT 6
32070: ST_TO_ADDR
32071: GO 32655
32073: LD_INT 4
32075: DOUBLE
32076: GREATEREQUAL
32077: IFFALSE 32085
32079: LD_INT 9
32081: DOUBLE
32082: LESSEQUAL
32083: IFTRUE 32087
32085: GO 32147
32087: POP
// begin bc_type := b_lab_half ;
32088: LD_ADDR_OWVAR 42
32092: PUSH
32093: LD_INT 7
32095: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32096: LD_ADDR_OWVAR 44
32100: PUSH
32101: LD_INT 10
32103: PUSH
32104: LD_INT 11
32106: PUSH
32107: LD_INT 12
32109: PUSH
32110: LD_INT 15
32112: PUSH
32113: LD_INT 14
32115: PUSH
32116: LD_INT 13
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: PUSH
32127: LD_VAR 0 2
32131: PUSH
32132: LD_INT 3
32134: MINUS
32135: ARRAY
32136: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32137: LD_ADDR_OWVAR 45
32141: PUSH
32142: LD_INT 9
32144: ST_TO_ADDR
// end ; 10 .. 13 :
32145: GO 32655
32147: LD_INT 10
32149: DOUBLE
32150: GREATEREQUAL
32151: IFFALSE 32159
32153: LD_INT 13
32155: DOUBLE
32156: LESSEQUAL
32157: IFTRUE 32161
32159: GO 32238
32161: POP
// begin bc_type := b_lab_full ;
32162: LD_ADDR_OWVAR 42
32166: PUSH
32167: LD_INT 8
32169: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32170: LD_ADDR_OWVAR 44
32174: PUSH
32175: LD_INT 10
32177: PUSH
32178: LD_INT 12
32180: PUSH
32181: LD_INT 14
32183: PUSH
32184: LD_INT 13
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: PUSH
32193: LD_VAR 0 2
32197: PUSH
32198: LD_INT 9
32200: MINUS
32201: ARRAY
32202: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32203: LD_ADDR_OWVAR 45
32207: PUSH
32208: LD_INT 11
32210: PUSH
32211: LD_INT 15
32213: PUSH
32214: LD_INT 12
32216: PUSH
32217: LD_INT 15
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: PUSH
32226: LD_VAR 0 2
32230: PUSH
32231: LD_INT 9
32233: MINUS
32234: ARRAY
32235: ST_TO_ADDR
// end ; 14 :
32236: GO 32655
32238: LD_INT 14
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32257
32246: POP
// bc_type := b_workshop ; 15 :
32247: LD_ADDR_OWVAR 42
32251: PUSH
32252: LD_INT 2
32254: ST_TO_ADDR
32255: GO 32655
32257: LD_INT 15
32259: DOUBLE
32260: EQUAL
32261: IFTRUE 32265
32263: GO 32276
32265: POP
// bc_type := b_factory ; 16 :
32266: LD_ADDR_OWVAR 42
32270: PUSH
32271: LD_INT 3
32273: ST_TO_ADDR
32274: GO 32655
32276: LD_INT 16
32278: DOUBLE
32279: EQUAL
32280: IFTRUE 32284
32282: GO 32295
32284: POP
// bc_type := b_ext_gun ; 17 :
32285: LD_ADDR_OWVAR 42
32289: PUSH
32290: LD_INT 17
32292: ST_TO_ADDR
32293: GO 32655
32295: LD_INT 17
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32303
32301: GO 32331
32303: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32304: LD_ADDR_OWVAR 42
32308: PUSH
32309: LD_INT 19
32311: PUSH
32312: LD_INT 23
32314: PUSH
32315: LD_INT 19
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: PUSH
32323: LD_VAR 0 1
32327: ARRAY
32328: ST_TO_ADDR
32329: GO 32655
32331: LD_INT 18
32333: DOUBLE
32334: EQUAL
32335: IFTRUE 32339
32337: GO 32350
32339: POP
// bc_type := b_ext_radar ; 19 :
32340: LD_ADDR_OWVAR 42
32344: PUSH
32345: LD_INT 20
32347: ST_TO_ADDR
32348: GO 32655
32350: LD_INT 19
32352: DOUBLE
32353: EQUAL
32354: IFTRUE 32358
32356: GO 32369
32358: POP
// bc_type := b_ext_radio ; 20 :
32359: LD_ADDR_OWVAR 42
32363: PUSH
32364: LD_INT 22
32366: ST_TO_ADDR
32367: GO 32655
32369: LD_INT 20
32371: DOUBLE
32372: EQUAL
32373: IFTRUE 32377
32375: GO 32388
32377: POP
// bc_type := b_ext_siberium ; 21 :
32378: LD_ADDR_OWVAR 42
32382: PUSH
32383: LD_INT 21
32385: ST_TO_ADDR
32386: GO 32655
32388: LD_INT 21
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32407
32396: POP
// bc_type := b_ext_computer ; 22 :
32397: LD_ADDR_OWVAR 42
32401: PUSH
32402: LD_INT 24
32404: ST_TO_ADDR
32405: GO 32655
32407: LD_INT 22
32409: DOUBLE
32410: EQUAL
32411: IFTRUE 32415
32413: GO 32426
32415: POP
// bc_type := b_ext_track ; 23 :
32416: LD_ADDR_OWVAR 42
32420: PUSH
32421: LD_INT 16
32423: ST_TO_ADDR
32424: GO 32655
32426: LD_INT 23
32428: DOUBLE
32429: EQUAL
32430: IFTRUE 32434
32432: GO 32445
32434: POP
// bc_type := b_ext_laser ; 24 :
32435: LD_ADDR_OWVAR 42
32439: PUSH
32440: LD_INT 25
32442: ST_TO_ADDR
32443: GO 32655
32445: LD_INT 24
32447: DOUBLE
32448: EQUAL
32449: IFTRUE 32453
32451: GO 32464
32453: POP
// bc_type := b_control_tower ; 25 :
32454: LD_ADDR_OWVAR 42
32458: PUSH
32459: LD_INT 36
32461: ST_TO_ADDR
32462: GO 32655
32464: LD_INT 25
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32472
32470: GO 32483
32472: POP
// bc_type := b_breastwork ; 26 :
32473: LD_ADDR_OWVAR 42
32477: PUSH
32478: LD_INT 31
32480: ST_TO_ADDR
32481: GO 32655
32483: LD_INT 26
32485: DOUBLE
32486: EQUAL
32487: IFTRUE 32491
32489: GO 32502
32491: POP
// bc_type := b_bunker ; 27 :
32492: LD_ADDR_OWVAR 42
32496: PUSH
32497: LD_INT 32
32499: ST_TO_ADDR
32500: GO 32655
32502: LD_INT 27
32504: DOUBLE
32505: EQUAL
32506: IFTRUE 32510
32508: GO 32521
32510: POP
// bc_type := b_turret ; 28 :
32511: LD_ADDR_OWVAR 42
32515: PUSH
32516: LD_INT 33
32518: ST_TO_ADDR
32519: GO 32655
32521: LD_INT 28
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 32540
32529: POP
// bc_type := b_armoury ; 29 :
32530: LD_ADDR_OWVAR 42
32534: PUSH
32535: LD_INT 4
32537: ST_TO_ADDR
32538: GO 32655
32540: LD_INT 29
32542: DOUBLE
32543: EQUAL
32544: IFTRUE 32548
32546: GO 32559
32548: POP
// bc_type := b_barracks ; 30 :
32549: LD_ADDR_OWVAR 42
32553: PUSH
32554: LD_INT 5
32556: ST_TO_ADDR
32557: GO 32655
32559: LD_INT 30
32561: DOUBLE
32562: EQUAL
32563: IFTRUE 32567
32565: GO 32578
32567: POP
// bc_type := b_solar_power ; 31 :
32568: LD_ADDR_OWVAR 42
32572: PUSH
32573: LD_INT 27
32575: ST_TO_ADDR
32576: GO 32655
32578: LD_INT 31
32580: DOUBLE
32581: EQUAL
32582: IFTRUE 32586
32584: GO 32597
32586: POP
// bc_type := b_oil_power ; 32 :
32587: LD_ADDR_OWVAR 42
32591: PUSH
32592: LD_INT 26
32594: ST_TO_ADDR
32595: GO 32655
32597: LD_INT 32
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32605
32603: GO 32616
32605: POP
// bc_type := b_siberite_power ; 33 :
32606: LD_ADDR_OWVAR 42
32610: PUSH
32611: LD_INT 28
32613: ST_TO_ADDR
32614: GO 32655
32616: LD_INT 33
32618: DOUBLE
32619: EQUAL
32620: IFTRUE 32624
32622: GO 32635
32624: POP
// bc_type := b_oil_mine ; 34 :
32625: LD_ADDR_OWVAR 42
32629: PUSH
32630: LD_INT 29
32632: ST_TO_ADDR
32633: GO 32655
32635: LD_INT 34
32637: DOUBLE
32638: EQUAL
32639: IFTRUE 32643
32641: GO 32654
32643: POP
// bc_type := b_siberite_mine ; end ;
32644: LD_ADDR_OWVAR 42
32648: PUSH
32649: LD_INT 30
32651: ST_TO_ADDR
32652: GO 32655
32654: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32655: LD_ADDR_VAR 0 8
32659: PUSH
32660: LD_VAR 0 5
32664: PPUSH
32665: LD_VAR 0 6
32669: PPUSH
32670: LD_VAR 0 3
32674: PPUSH
32675: CALL_OW 47
32679: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32680: LD_OWVAR 42
32684: PUSH
32685: LD_INT 32
32687: PUSH
32688: LD_INT 33
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: IN
32695: IFFALSE 32711
// PlaceWeaponTurret ( b , weapon ) ;
32697: LD_VAR 0 8
32701: PPUSH
32702: LD_VAR 0 4
32706: PPUSH
32707: CALL_OW 431
// end ;
32711: LD_VAR 0 7
32715: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32716: LD_INT 0
32718: PPUSH
32719: PPUSH
32720: PPUSH
32721: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32722: LD_ADDR_VAR 0 4
32726: PUSH
32727: LD_INT 22
32729: PUSH
32730: LD_OWVAR 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 30
32744: PUSH
32745: LD_INT 0
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 30
32754: PUSH
32755: LD_INT 1
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PPUSH
32771: CALL_OW 69
32775: ST_TO_ADDR
// if not tmp then
32776: LD_VAR 0 4
32780: NOT
32781: IFFALSE 32785
// exit ;
32783: GO 32844
// for i in tmp do
32785: LD_ADDR_VAR 0 2
32789: PUSH
32790: LD_VAR 0 4
32794: PUSH
32795: FOR_IN
32796: IFFALSE 32842
// for j = 1 to 3 do
32798: LD_ADDR_VAR 0 3
32802: PUSH
32803: DOUBLE
32804: LD_INT 1
32806: DEC
32807: ST_TO_ADDR
32808: LD_INT 3
32810: PUSH
32811: FOR_TO
32812: IFFALSE 32838
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32814: LD_VAR 0 2
32818: PPUSH
32819: CALL_OW 274
32823: PPUSH
32824: LD_VAR 0 3
32828: PPUSH
32829: LD_INT 99999
32831: PPUSH
32832: CALL_OW 277
32836: GO 32811
32838: POP
32839: POP
32840: GO 32795
32842: POP
32843: POP
// end ;
32844: LD_VAR 0 1
32848: RET
// export function hHackSetLevel10 ; var i , j ; begin
32849: LD_INT 0
32851: PPUSH
32852: PPUSH
32853: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32854: LD_ADDR_VAR 0 2
32858: PUSH
32859: LD_INT 21
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PPUSH
32869: CALL_OW 69
32873: PUSH
32874: FOR_IN
32875: IFFALSE 32927
// if IsSelected ( i ) then
32877: LD_VAR 0 2
32881: PPUSH
32882: CALL_OW 306
32886: IFFALSE 32925
// begin for j := 1 to 4 do
32888: LD_ADDR_VAR 0 3
32892: PUSH
32893: DOUBLE
32894: LD_INT 1
32896: DEC
32897: ST_TO_ADDR
32898: LD_INT 4
32900: PUSH
32901: FOR_TO
32902: IFFALSE 32923
// SetSkill ( i , j , 10 ) ;
32904: LD_VAR 0 2
32908: PPUSH
32909: LD_VAR 0 3
32913: PPUSH
32914: LD_INT 10
32916: PPUSH
32917: CALL_OW 237
32921: GO 32901
32923: POP
32924: POP
// end ;
32925: GO 32874
32927: POP
32928: POP
// end ;
32929: LD_VAR 0 1
32933: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32934: LD_INT 0
32936: PPUSH
32937: PPUSH
32938: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32939: LD_ADDR_VAR 0 2
32943: PUSH
32944: LD_INT 22
32946: PUSH
32947: LD_OWVAR 2
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 21
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PPUSH
32970: CALL_OW 69
32974: PUSH
32975: FOR_IN
32976: IFFALSE 33017
// begin for j := 1 to 4 do
32978: LD_ADDR_VAR 0 3
32982: PUSH
32983: DOUBLE
32984: LD_INT 1
32986: DEC
32987: ST_TO_ADDR
32988: LD_INT 4
32990: PUSH
32991: FOR_TO
32992: IFFALSE 33013
// SetSkill ( i , j , 10 ) ;
32994: LD_VAR 0 2
32998: PPUSH
32999: LD_VAR 0 3
33003: PPUSH
33004: LD_INT 10
33006: PPUSH
33007: CALL_OW 237
33011: GO 32991
33013: POP
33014: POP
// end ;
33015: GO 32975
33017: POP
33018: POP
// end ;
33019: LD_VAR 0 1
33023: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33024: LD_INT 0
33026: PPUSH
// uc_side := your_side ;
33027: LD_ADDR_OWVAR 20
33031: PUSH
33032: LD_OWVAR 2
33036: ST_TO_ADDR
// uc_nation := nation ;
33037: LD_ADDR_OWVAR 21
33041: PUSH
33042: LD_VAR 0 1
33046: ST_TO_ADDR
// InitHc ;
33047: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33051: LD_INT 0
33053: PPUSH
33054: LD_VAR 0 2
33058: PPUSH
33059: LD_VAR 0 3
33063: PPUSH
33064: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33068: LD_VAR 0 4
33072: PPUSH
33073: LD_VAR 0 5
33077: PPUSH
33078: CALL_OW 428
33082: PUSH
33083: LD_INT 0
33085: EQUAL
33086: IFFALSE 33110
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33088: CALL_OW 44
33092: PPUSH
33093: LD_VAR 0 4
33097: PPUSH
33098: LD_VAR 0 5
33102: PPUSH
33103: LD_INT 1
33105: PPUSH
33106: CALL_OW 48
// end ;
33110: LD_VAR 0 6
33114: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33115: LD_INT 0
33117: PPUSH
33118: PPUSH
// uc_side := your_side ;
33119: LD_ADDR_OWVAR 20
33123: PUSH
33124: LD_OWVAR 2
33128: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33129: LD_VAR 0 1
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: LD_INT 3
33142: PUSH
33143: LD_INT 4
33145: PUSH
33146: LD_INT 5
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: IN
33156: IFFALSE 33168
// uc_nation := nation_american else
33158: LD_ADDR_OWVAR 21
33162: PUSH
33163: LD_INT 1
33165: ST_TO_ADDR
33166: GO 33211
// if chassis in [ 11 , 12 , 13 , 14 ] then
33168: LD_VAR 0 1
33172: PUSH
33173: LD_INT 11
33175: PUSH
33176: LD_INT 12
33178: PUSH
33179: LD_INT 13
33181: PUSH
33182: LD_INT 14
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: IN
33191: IFFALSE 33203
// uc_nation := nation_arabian else
33193: LD_ADDR_OWVAR 21
33197: PUSH
33198: LD_INT 2
33200: ST_TO_ADDR
33201: GO 33211
// uc_nation := nation_russian ;
33203: LD_ADDR_OWVAR 21
33207: PUSH
33208: LD_INT 3
33210: ST_TO_ADDR
// vc_chassis := chassis ;
33211: LD_ADDR_OWVAR 37
33215: PUSH
33216: LD_VAR 0 1
33220: ST_TO_ADDR
// vc_engine := engine ;
33221: LD_ADDR_OWVAR 39
33225: PUSH
33226: LD_VAR 0 2
33230: ST_TO_ADDR
// vc_control := control ;
33231: LD_ADDR_OWVAR 38
33235: PUSH
33236: LD_VAR 0 3
33240: ST_TO_ADDR
// vc_weapon := weapon ;
33241: LD_ADDR_OWVAR 40
33245: PUSH
33246: LD_VAR 0 4
33250: ST_TO_ADDR
// un := CreateVehicle ;
33251: LD_ADDR_VAR 0 8
33255: PUSH
33256: CALL_OW 45
33260: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33261: LD_VAR 0 8
33265: PPUSH
33266: LD_INT 0
33268: PPUSH
33269: LD_INT 5
33271: PPUSH
33272: CALL_OW 12
33276: PPUSH
33277: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33281: LD_VAR 0 8
33285: PPUSH
33286: LD_VAR 0 5
33290: PPUSH
33291: LD_VAR 0 6
33295: PPUSH
33296: LD_INT 1
33298: PPUSH
33299: CALL_OW 48
// end ;
33303: LD_VAR 0 7
33307: RET
// export hInvincible ; every 1 do
33308: GO 33310
33310: DISABLE
// hInvincible := [ ] ;
33311: LD_ADDR_EXP 112
33315: PUSH
33316: EMPTY
33317: ST_TO_ADDR
33318: END
// every 10 do var i ;
33319: GO 33321
33321: DISABLE
33322: LD_INT 0
33324: PPUSH
// begin enable ;
33325: ENABLE
// if not hInvincible then
33326: LD_EXP 112
33330: NOT
33331: IFFALSE 33335
// exit ;
33333: GO 33379
// for i in hInvincible do
33335: LD_ADDR_VAR 0 1
33339: PUSH
33340: LD_EXP 112
33344: PUSH
33345: FOR_IN
33346: IFFALSE 33377
// if GetLives ( i ) < 1000 then
33348: LD_VAR 0 1
33352: PPUSH
33353: CALL_OW 256
33357: PUSH
33358: LD_INT 1000
33360: LESS
33361: IFFALSE 33375
// SetLives ( i , 1000 ) ;
33363: LD_VAR 0 1
33367: PPUSH
33368: LD_INT 1000
33370: PPUSH
33371: CALL_OW 234
33375: GO 33345
33377: POP
33378: POP
// end ;
33379: PPOPN 1
33381: END
// export function hHackInvincible ; var i ; begin
33382: LD_INT 0
33384: PPUSH
33385: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33386: LD_ADDR_VAR 0 2
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: LD_INT 21
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 21
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: PPUSH
33419: CALL_OW 69
33423: PUSH
33424: FOR_IN
33425: IFFALSE 33486
// if IsSelected ( i ) then
33427: LD_VAR 0 2
33431: PPUSH
33432: CALL_OW 306
33436: IFFALSE 33484
// begin if i in hInvincible then
33438: LD_VAR 0 2
33442: PUSH
33443: LD_EXP 112
33447: IN
33448: IFFALSE 33468
// hInvincible := hInvincible diff i else
33450: LD_ADDR_EXP 112
33454: PUSH
33455: LD_EXP 112
33459: PUSH
33460: LD_VAR 0 2
33464: DIFF
33465: ST_TO_ADDR
33466: GO 33484
// hInvincible := hInvincible union i ;
33468: LD_ADDR_EXP 112
33472: PUSH
33473: LD_EXP 112
33477: PUSH
33478: LD_VAR 0 2
33482: UNION
33483: ST_TO_ADDR
// end ;
33484: GO 33424
33486: POP
33487: POP
// end ;
33488: LD_VAR 0 1
33492: RET
// export function hHackInvisible ; var i , j ; begin
33493: LD_INT 0
33495: PPUSH
33496: PPUSH
33497: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33498: LD_ADDR_VAR 0 2
33502: PUSH
33503: LD_INT 21
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PPUSH
33513: CALL_OW 69
33517: PUSH
33518: FOR_IN
33519: IFFALSE 33543
// if IsSelected ( i ) then
33521: LD_VAR 0 2
33525: PPUSH
33526: CALL_OW 306
33530: IFFALSE 33541
// ComForceInvisible ( i ) ;
33532: LD_VAR 0 2
33536: PPUSH
33537: CALL_OW 496
33541: GO 33518
33543: POP
33544: POP
// end ;
33545: LD_VAR 0 1
33549: RET
// export function hHackChangeYourSide ; begin
33550: LD_INT 0
33552: PPUSH
// if your_side = 8 then
33553: LD_OWVAR 2
33557: PUSH
33558: LD_INT 8
33560: EQUAL
33561: IFFALSE 33573
// your_side := 0 else
33563: LD_ADDR_OWVAR 2
33567: PUSH
33568: LD_INT 0
33570: ST_TO_ADDR
33571: GO 33587
// your_side := your_side + 1 ;
33573: LD_ADDR_OWVAR 2
33577: PUSH
33578: LD_OWVAR 2
33582: PUSH
33583: LD_INT 1
33585: PLUS
33586: ST_TO_ADDR
// end ;
33587: LD_VAR 0 1
33591: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33592: LD_INT 0
33594: PPUSH
33595: PPUSH
33596: PPUSH
// for i in all_units do
33597: LD_ADDR_VAR 0 2
33601: PUSH
33602: LD_OWVAR 3
33606: PUSH
33607: FOR_IN
33608: IFFALSE 33686
// if IsSelected ( i ) then
33610: LD_VAR 0 2
33614: PPUSH
33615: CALL_OW 306
33619: IFFALSE 33684
// begin j := GetSide ( i ) ;
33621: LD_ADDR_VAR 0 3
33625: PUSH
33626: LD_VAR 0 2
33630: PPUSH
33631: CALL_OW 255
33635: ST_TO_ADDR
// if j = 8 then
33636: LD_VAR 0 3
33640: PUSH
33641: LD_INT 8
33643: EQUAL
33644: IFFALSE 33656
// j := 0 else
33646: LD_ADDR_VAR 0 3
33650: PUSH
33651: LD_INT 0
33653: ST_TO_ADDR
33654: GO 33670
// j := j + 1 ;
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_VAR 0 3
33665: PUSH
33666: LD_INT 1
33668: PLUS
33669: ST_TO_ADDR
// SetSide ( i , j ) ;
33670: LD_VAR 0 2
33674: PPUSH
33675: LD_VAR 0 3
33679: PPUSH
33680: CALL_OW 235
// end ;
33684: GO 33607
33686: POP
33687: POP
// end ;
33688: LD_VAR 0 1
33692: RET
// export function hHackFog ; begin
33693: LD_INT 0
33695: PPUSH
// FogOff ( true ) ;
33696: LD_INT 1
33698: PPUSH
33699: CALL_OW 344
// end ;
33703: LD_VAR 0 1
33707: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33708: LD_INT 0
33710: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33711: LD_VAR 0 1
33715: PPUSH
33716: LD_VAR 0 2
33720: PPUSH
33721: LD_VAR 0 3
33725: PPUSH
33726: LD_INT 1
33728: PPUSH
33729: LD_INT 1
33731: PPUSH
33732: CALL_OW 483
// CenterOnXY ( x , y ) ;
33736: LD_VAR 0 2
33740: PPUSH
33741: LD_VAR 0 3
33745: PPUSH
33746: CALL_OW 84
// end ;
33750: LD_VAR 0 4
33754: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33755: LD_INT 0
33757: PPUSH
33758: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33759: LD_VAR 0 1
33763: NOT
33764: PUSH
33765: LD_VAR 0 2
33769: PPUSH
33770: LD_VAR 0 3
33774: PPUSH
33775: CALL_OW 488
33779: NOT
33780: OR
33781: PUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: CALL_OW 266
33791: PUSH
33792: LD_INT 3
33794: NONEQUAL
33795: PUSH
33796: LD_VAR 0 1
33800: PPUSH
33801: CALL_OW 247
33805: PUSH
33806: LD_INT 1
33808: EQUAL
33809: NOT
33810: AND
33811: OR
33812: IFFALSE 33816
// exit ;
33814: GO 33965
// if GetType ( factory ) = unit_human then
33816: LD_VAR 0 1
33820: PPUSH
33821: CALL_OW 247
33825: PUSH
33826: LD_INT 1
33828: EQUAL
33829: IFFALSE 33846
// factory := IsInUnit ( factory ) ;
33831: LD_ADDR_VAR 0 1
33835: PUSH
33836: LD_VAR 0 1
33840: PPUSH
33841: CALL_OW 310
33845: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33846: LD_VAR 0 1
33850: PPUSH
33851: CALL_OW 266
33855: PUSH
33856: LD_INT 3
33858: NONEQUAL
33859: IFFALSE 33863
// exit ;
33861: GO 33965
// if HexInfo ( x , y ) = factory then
33863: LD_VAR 0 2
33867: PPUSH
33868: LD_VAR 0 3
33872: PPUSH
33873: CALL_OW 428
33877: PUSH
33878: LD_VAR 0 1
33882: EQUAL
33883: IFFALSE 33910
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33885: LD_ADDR_EXP 113
33889: PUSH
33890: LD_EXP 113
33894: PPUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: LD_INT 0
33902: PPUSH
33903: CALL_OW 1
33907: ST_TO_ADDR
33908: GO 33961
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33910: LD_ADDR_EXP 113
33914: PUSH
33915: LD_EXP 113
33919: PPUSH
33920: LD_VAR 0 1
33924: PPUSH
33925: LD_VAR 0 1
33929: PPUSH
33930: CALL_OW 255
33934: PUSH
33935: LD_VAR 0 1
33939: PUSH
33940: LD_VAR 0 2
33944: PUSH
33945: LD_VAR 0 3
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: PPUSH
33956: CALL_OW 1
33960: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33961: CALL 33970 0 0
// end ;
33965: LD_VAR 0 4
33969: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33970: LD_INT 0
33972: PPUSH
33973: PPUSH
33974: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33975: LD_STRING resetFactoryWaypoint();
33977: PPUSH
33978: CALL_OW 559
// if factoryWaypoints then
33982: LD_EXP 113
33986: IFFALSE 34112
// begin list := PrepareArray ( factoryWaypoints ) ;
33988: LD_ADDR_VAR 0 3
33992: PUSH
33993: LD_EXP 113
33997: PPUSH
33998: CALL 76145 0 1
34002: ST_TO_ADDR
// for i := 1 to list do
34003: LD_ADDR_VAR 0 2
34007: PUSH
34008: DOUBLE
34009: LD_INT 1
34011: DEC
34012: ST_TO_ADDR
34013: LD_VAR 0 3
34017: PUSH
34018: FOR_TO
34019: IFFALSE 34110
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34021: LD_STRING setFactoryWaypointXY(
34023: PUSH
34024: LD_VAR 0 3
34028: PUSH
34029: LD_VAR 0 2
34033: ARRAY
34034: PUSH
34035: LD_INT 1
34037: ARRAY
34038: STR
34039: PUSH
34040: LD_STRING ,
34042: STR
34043: PUSH
34044: LD_VAR 0 3
34048: PUSH
34049: LD_VAR 0 2
34053: ARRAY
34054: PUSH
34055: LD_INT 2
34057: ARRAY
34058: STR
34059: PUSH
34060: LD_STRING ,
34062: STR
34063: PUSH
34064: LD_VAR 0 3
34068: PUSH
34069: LD_VAR 0 2
34073: ARRAY
34074: PUSH
34075: LD_INT 3
34077: ARRAY
34078: STR
34079: PUSH
34080: LD_STRING ,
34082: STR
34083: PUSH
34084: LD_VAR 0 3
34088: PUSH
34089: LD_VAR 0 2
34093: ARRAY
34094: PUSH
34095: LD_INT 4
34097: ARRAY
34098: STR
34099: PUSH
34100: LD_STRING )
34102: STR
34103: PPUSH
34104: CALL_OW 559
34108: GO 34018
34110: POP
34111: POP
// end ; end ;
34112: LD_VAR 0 1
34116: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34117: LD_INT 0
34119: PPUSH
// if HexInfo ( x , y ) = warehouse then
34120: LD_VAR 0 2
34124: PPUSH
34125: LD_VAR 0 3
34129: PPUSH
34130: CALL_OW 428
34134: PUSH
34135: LD_VAR 0 1
34139: EQUAL
34140: IFFALSE 34167
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34142: LD_ADDR_EXP 114
34146: PUSH
34147: LD_EXP 114
34151: PPUSH
34152: LD_VAR 0 1
34156: PPUSH
34157: LD_INT 0
34159: PPUSH
34160: CALL_OW 1
34164: ST_TO_ADDR
34165: GO 34218
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34167: LD_ADDR_EXP 114
34171: PUSH
34172: LD_EXP 114
34176: PPUSH
34177: LD_VAR 0 1
34181: PPUSH
34182: LD_VAR 0 1
34186: PPUSH
34187: CALL_OW 255
34191: PUSH
34192: LD_VAR 0 1
34196: PUSH
34197: LD_VAR 0 2
34201: PUSH
34202: LD_VAR 0 3
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: PPUSH
34213: CALL_OW 1
34217: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34218: CALL 34227 0 0
// end ;
34222: LD_VAR 0 4
34226: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34227: LD_INT 0
34229: PPUSH
34230: PPUSH
34231: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34232: LD_STRING resetWarehouseGatheringPoints();
34234: PPUSH
34235: CALL_OW 559
// if warehouseGatheringPoints then
34239: LD_EXP 114
34243: IFFALSE 34369
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34245: LD_ADDR_VAR 0 3
34249: PUSH
34250: LD_EXP 114
34254: PPUSH
34255: CALL 76145 0 1
34259: ST_TO_ADDR
// for i := 1 to list do
34260: LD_ADDR_VAR 0 2
34264: PUSH
34265: DOUBLE
34266: LD_INT 1
34268: DEC
34269: ST_TO_ADDR
34270: LD_VAR 0 3
34274: PUSH
34275: FOR_TO
34276: IFFALSE 34367
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34278: LD_STRING setWarehouseGatheringPointXY(
34280: PUSH
34281: LD_VAR 0 3
34285: PUSH
34286: LD_VAR 0 2
34290: ARRAY
34291: PUSH
34292: LD_INT 1
34294: ARRAY
34295: STR
34296: PUSH
34297: LD_STRING ,
34299: STR
34300: PUSH
34301: LD_VAR 0 3
34305: PUSH
34306: LD_VAR 0 2
34310: ARRAY
34311: PUSH
34312: LD_INT 2
34314: ARRAY
34315: STR
34316: PUSH
34317: LD_STRING ,
34319: STR
34320: PUSH
34321: LD_VAR 0 3
34325: PUSH
34326: LD_VAR 0 2
34330: ARRAY
34331: PUSH
34332: LD_INT 3
34334: ARRAY
34335: STR
34336: PUSH
34337: LD_STRING ,
34339: STR
34340: PUSH
34341: LD_VAR 0 3
34345: PUSH
34346: LD_VAR 0 2
34350: ARRAY
34351: PUSH
34352: LD_INT 4
34354: ARRAY
34355: STR
34356: PUSH
34357: LD_STRING )
34359: STR
34360: PPUSH
34361: CALL_OW 559
34365: GO 34275
34367: POP
34368: POP
// end ; end ;
34369: LD_VAR 0 1
34373: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34374: LD_EXP 114
34378: IFFALSE 35063
34380: GO 34382
34382: DISABLE
34383: LD_INT 0
34385: PPUSH
34386: PPUSH
34387: PPUSH
34388: PPUSH
34389: PPUSH
34390: PPUSH
34391: PPUSH
34392: PPUSH
34393: PPUSH
// begin enable ;
34394: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34395: LD_ADDR_VAR 0 3
34399: PUSH
34400: LD_EXP 114
34404: PPUSH
34405: CALL 76145 0 1
34409: ST_TO_ADDR
// if not list then
34410: LD_VAR 0 3
34414: NOT
34415: IFFALSE 34419
// exit ;
34417: GO 35063
// for i := 1 to list do
34419: LD_ADDR_VAR 0 1
34423: PUSH
34424: DOUBLE
34425: LD_INT 1
34427: DEC
34428: ST_TO_ADDR
34429: LD_VAR 0 3
34433: PUSH
34434: FOR_TO
34435: IFFALSE 35061
// begin depot := list [ i ] [ 2 ] ;
34437: LD_ADDR_VAR 0 8
34441: PUSH
34442: LD_VAR 0 3
34446: PUSH
34447: LD_VAR 0 1
34451: ARRAY
34452: PUSH
34453: LD_INT 2
34455: ARRAY
34456: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34457: LD_ADDR_VAR 0 5
34461: PUSH
34462: LD_VAR 0 3
34466: PUSH
34467: LD_VAR 0 1
34471: ARRAY
34472: PUSH
34473: LD_INT 1
34475: ARRAY
34476: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34477: LD_VAR 0 8
34481: PPUSH
34482: CALL_OW 301
34486: PUSH
34487: LD_VAR 0 5
34491: PUSH
34492: LD_VAR 0 8
34496: PPUSH
34497: CALL_OW 255
34501: NONEQUAL
34502: OR
34503: IFFALSE 34532
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34505: LD_ADDR_EXP 114
34509: PUSH
34510: LD_EXP 114
34514: PPUSH
34515: LD_VAR 0 8
34519: PPUSH
34520: LD_INT 0
34522: PPUSH
34523: CALL_OW 1
34527: ST_TO_ADDR
// exit ;
34528: POP
34529: POP
34530: GO 35063
// end ; x := list [ i ] [ 3 ] ;
34532: LD_ADDR_VAR 0 6
34536: PUSH
34537: LD_VAR 0 3
34541: PUSH
34542: LD_VAR 0 1
34546: ARRAY
34547: PUSH
34548: LD_INT 3
34550: ARRAY
34551: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34552: LD_ADDR_VAR 0 7
34556: PUSH
34557: LD_VAR 0 3
34561: PUSH
34562: LD_VAR 0 1
34566: ARRAY
34567: PUSH
34568: LD_INT 4
34570: ARRAY
34571: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34572: LD_ADDR_VAR 0 9
34576: PUSH
34577: LD_VAR 0 6
34581: PPUSH
34582: LD_VAR 0 7
34586: PPUSH
34587: LD_INT 16
34589: PPUSH
34590: CALL 74733 0 3
34594: ST_TO_ADDR
// if not cratesNearbyPoint then
34595: LD_VAR 0 9
34599: NOT
34600: IFFALSE 34606
// exit ;
34602: POP
34603: POP
34604: GO 35063
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34606: LD_ADDR_VAR 0 4
34610: PUSH
34611: LD_INT 22
34613: PUSH
34614: LD_VAR 0 5
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 3
34625: PUSH
34626: LD_INT 60
34628: PUSH
34629: EMPTY
34630: LIST
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 91
34638: PUSH
34639: LD_VAR 0 8
34643: PUSH
34644: LD_INT 6
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 25
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 25
34667: PUSH
34668: LD_INT 16
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: PPUSH
34686: CALL_OW 69
34690: PUSH
34691: LD_VAR 0 8
34695: PPUSH
34696: CALL_OW 313
34700: PPUSH
34701: LD_INT 3
34703: PUSH
34704: LD_INT 60
34706: PUSH
34707: EMPTY
34708: LIST
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 25
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 25
34729: PUSH
34730: LD_INT 16
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: LIST
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PPUSH
34746: CALL_OW 72
34750: UNION
34751: ST_TO_ADDR
// if tmp then
34752: LD_VAR 0 4
34756: IFFALSE 34836
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34758: LD_ADDR_VAR 0 4
34762: PUSH
34763: LD_VAR 0 4
34767: PPUSH
34768: LD_INT 3
34770: PPUSH
34771: CALL 72702 0 2
34775: ST_TO_ADDR
// for j in tmp do
34776: LD_ADDR_VAR 0 2
34780: PUSH
34781: LD_VAR 0 4
34785: PUSH
34786: FOR_IN
34787: IFFALSE 34830
// begin if IsInUnit ( j ) then
34789: LD_VAR 0 2
34793: PPUSH
34794: CALL_OW 310
34798: IFFALSE 34809
// ComExit ( j ) ;
34800: LD_VAR 0 2
34804: PPUSH
34805: CALL 72785 0 1
// AddComCollect ( j , x , y ) ;
34809: LD_VAR 0 2
34813: PPUSH
34814: LD_VAR 0 6
34818: PPUSH
34819: LD_VAR 0 7
34823: PPUSH
34824: CALL_OW 177
// end ;
34828: GO 34786
34830: POP
34831: POP
// exit ;
34832: POP
34833: POP
34834: GO 35063
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34836: LD_ADDR_VAR 0 4
34840: PUSH
34841: LD_INT 22
34843: PUSH
34844: LD_VAR 0 5
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 91
34855: PUSH
34856: LD_VAR 0 8
34860: PUSH
34861: LD_INT 8
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 34
34874: PUSH
34875: LD_INT 12
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 34
34884: PUSH
34885: LD_INT 51
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 34
34894: PUSH
34895: LD_INT 32
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 34
34904: PUSH
34905: LD_INT 89
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: PPUSH
34924: CALL_OW 69
34928: ST_TO_ADDR
// if tmp then
34929: LD_VAR 0 4
34933: IFFALSE 35059
// begin for j in tmp do
34935: LD_ADDR_VAR 0 2
34939: PUSH
34940: LD_VAR 0 4
34944: PUSH
34945: FOR_IN
34946: IFFALSE 35057
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34948: LD_VAR 0 2
34952: PPUSH
34953: CALL_OW 262
34957: PUSH
34958: LD_INT 3
34960: EQUAL
34961: PUSH
34962: LD_VAR 0 2
34966: PPUSH
34967: CALL_OW 261
34971: PUSH
34972: LD_INT 20
34974: GREATER
34975: OR
34976: PUSH
34977: LD_VAR 0 2
34981: PPUSH
34982: CALL_OW 314
34986: NOT
34987: AND
34988: PUSH
34989: LD_VAR 0 2
34993: PPUSH
34994: CALL_OW 263
34998: PUSH
34999: LD_INT 1
35001: NONEQUAL
35002: PUSH
35003: LD_VAR 0 2
35007: PPUSH
35008: CALL_OW 311
35012: OR
35013: AND
35014: IFFALSE 35055
// begin ComCollect ( j , x , y ) ;
35016: LD_VAR 0 2
35020: PPUSH
35021: LD_VAR 0 6
35025: PPUSH
35026: LD_VAR 0 7
35030: PPUSH
35031: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35035: LD_VAR 0 2
35039: PPUSH
35040: LD_VAR 0 8
35044: PPUSH
35045: CALL_OW 172
// exit ;
35049: POP
35050: POP
35051: POP
35052: POP
35053: GO 35063
// end ;
35055: GO 34945
35057: POP
35058: POP
// end ; end ;
35059: GO 34434
35061: POP
35062: POP
// end ; end_of_file end_of_file
35063: PPOPN 9
35065: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35066: LD_INT 0
35068: PPUSH
35069: PPUSH
// if exist_mode then
35070: LD_VAR 0 2
35074: IFFALSE 35099
// unit := CreateCharacter ( prefix & ident ) else
35076: LD_ADDR_VAR 0 5
35080: PUSH
35081: LD_VAR 0 3
35085: PUSH
35086: LD_VAR 0 1
35090: STR
35091: PPUSH
35092: CALL_OW 34
35096: ST_TO_ADDR
35097: GO 35114
// unit := NewCharacter ( ident ) ;
35099: LD_ADDR_VAR 0 5
35103: PUSH
35104: LD_VAR 0 1
35108: PPUSH
35109: CALL_OW 25
35113: ST_TO_ADDR
// result := unit ;
35114: LD_ADDR_VAR 0 4
35118: PUSH
35119: LD_VAR 0 5
35123: ST_TO_ADDR
// end ;
35124: LD_VAR 0 4
35128: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35129: LD_INT 0
35131: PPUSH
35132: PPUSH
// if not side or not nation then
35133: LD_VAR 0 1
35137: NOT
35138: PUSH
35139: LD_VAR 0 2
35143: NOT
35144: OR
35145: IFFALSE 35149
// exit ;
35147: GO 35917
// case nation of nation_american :
35149: LD_VAR 0 2
35153: PUSH
35154: LD_INT 1
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 35376
35162: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35163: LD_ADDR_VAR 0 4
35167: PUSH
35168: LD_INT 35
35170: PUSH
35171: LD_INT 45
35173: PUSH
35174: LD_INT 46
35176: PUSH
35177: LD_INT 47
35179: PUSH
35180: LD_INT 82
35182: PUSH
35183: LD_INT 83
35185: PUSH
35186: LD_INT 84
35188: PUSH
35189: LD_INT 85
35191: PUSH
35192: LD_INT 86
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: LD_INT 2
35200: PUSH
35201: LD_INT 6
35203: PUSH
35204: LD_INT 15
35206: PUSH
35207: LD_INT 16
35209: PUSH
35210: LD_INT 7
35212: PUSH
35213: LD_INT 12
35215: PUSH
35216: LD_INT 13
35218: PUSH
35219: LD_INT 10
35221: PUSH
35222: LD_INT 14
35224: PUSH
35225: LD_INT 20
35227: PUSH
35228: LD_INT 21
35230: PUSH
35231: LD_INT 22
35233: PUSH
35234: LD_INT 25
35236: PUSH
35237: LD_INT 32
35239: PUSH
35240: LD_INT 27
35242: PUSH
35243: LD_INT 36
35245: PUSH
35246: LD_INT 69
35248: PUSH
35249: LD_INT 39
35251: PUSH
35252: LD_INT 34
35254: PUSH
35255: LD_INT 40
35257: PUSH
35258: LD_INT 48
35260: PUSH
35261: LD_INT 49
35263: PUSH
35264: LD_INT 50
35266: PUSH
35267: LD_INT 51
35269: PUSH
35270: LD_INT 52
35272: PUSH
35273: LD_INT 53
35275: PUSH
35276: LD_INT 54
35278: PUSH
35279: LD_INT 55
35281: PUSH
35282: LD_INT 56
35284: PUSH
35285: LD_INT 57
35287: PUSH
35288: LD_INT 58
35290: PUSH
35291: LD_INT 59
35293: PUSH
35294: LD_INT 60
35296: PUSH
35297: LD_INT 61
35299: PUSH
35300: LD_INT 62
35302: PUSH
35303: LD_INT 80
35305: PUSH
35306: LD_INT 82
35308: PUSH
35309: LD_INT 83
35311: PUSH
35312: LD_INT 84
35314: PUSH
35315: LD_INT 85
35317: PUSH
35318: LD_INT 86
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: ST_TO_ADDR
35374: GO 35841
35376: LD_INT 2
35378: DOUBLE
35379: EQUAL
35380: IFTRUE 35384
35382: GO 35610
35384: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35385: LD_ADDR_VAR 0 4
35389: PUSH
35390: LD_INT 35
35392: PUSH
35393: LD_INT 45
35395: PUSH
35396: LD_INT 46
35398: PUSH
35399: LD_INT 47
35401: PUSH
35402: LD_INT 82
35404: PUSH
35405: LD_INT 83
35407: PUSH
35408: LD_INT 84
35410: PUSH
35411: LD_INT 85
35413: PUSH
35414: LD_INT 87
35416: PUSH
35417: LD_INT 70
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 11
35425: PUSH
35426: LD_INT 3
35428: PUSH
35429: LD_INT 4
35431: PUSH
35432: LD_INT 5
35434: PUSH
35435: LD_INT 6
35437: PUSH
35438: LD_INT 15
35440: PUSH
35441: LD_INT 18
35443: PUSH
35444: LD_INT 7
35446: PUSH
35447: LD_INT 17
35449: PUSH
35450: LD_INT 8
35452: PUSH
35453: LD_INT 20
35455: PUSH
35456: LD_INT 21
35458: PUSH
35459: LD_INT 22
35461: PUSH
35462: LD_INT 72
35464: PUSH
35465: LD_INT 26
35467: PUSH
35468: LD_INT 69
35470: PUSH
35471: LD_INT 39
35473: PUSH
35474: LD_INT 40
35476: PUSH
35477: LD_INT 41
35479: PUSH
35480: LD_INT 42
35482: PUSH
35483: LD_INT 43
35485: PUSH
35486: LD_INT 48
35488: PUSH
35489: LD_INT 49
35491: PUSH
35492: LD_INT 50
35494: PUSH
35495: LD_INT 51
35497: PUSH
35498: LD_INT 52
35500: PUSH
35501: LD_INT 53
35503: PUSH
35504: LD_INT 54
35506: PUSH
35507: LD_INT 55
35509: PUSH
35510: LD_INT 56
35512: PUSH
35513: LD_INT 60
35515: PUSH
35516: LD_INT 61
35518: PUSH
35519: LD_INT 62
35521: PUSH
35522: LD_INT 66
35524: PUSH
35525: LD_INT 67
35527: PUSH
35528: LD_INT 68
35530: PUSH
35531: LD_INT 81
35533: PUSH
35534: LD_INT 82
35536: PUSH
35537: LD_INT 83
35539: PUSH
35540: LD_INT 84
35542: PUSH
35543: LD_INT 85
35545: PUSH
35546: LD_INT 87
35548: PUSH
35549: LD_INT 88
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: ST_TO_ADDR
35608: GO 35841
35610: LD_INT 3
35612: DOUBLE
35613: EQUAL
35614: IFTRUE 35618
35616: GO 35840
35618: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35619: LD_ADDR_VAR 0 4
35623: PUSH
35624: LD_INT 46
35626: PUSH
35627: LD_INT 47
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 82
35638: PUSH
35639: LD_INT 83
35641: PUSH
35642: LD_INT 84
35644: PUSH
35645: LD_INT 85
35647: PUSH
35648: LD_INT 86
35650: PUSH
35651: LD_INT 11
35653: PUSH
35654: LD_INT 9
35656: PUSH
35657: LD_INT 20
35659: PUSH
35660: LD_INT 19
35662: PUSH
35663: LD_INT 21
35665: PUSH
35666: LD_INT 24
35668: PUSH
35669: LD_INT 22
35671: PUSH
35672: LD_INT 25
35674: PUSH
35675: LD_INT 28
35677: PUSH
35678: LD_INT 29
35680: PUSH
35681: LD_INT 30
35683: PUSH
35684: LD_INT 31
35686: PUSH
35687: LD_INT 37
35689: PUSH
35690: LD_INT 38
35692: PUSH
35693: LD_INT 32
35695: PUSH
35696: LD_INT 27
35698: PUSH
35699: LD_INT 33
35701: PUSH
35702: LD_INT 69
35704: PUSH
35705: LD_INT 39
35707: PUSH
35708: LD_INT 34
35710: PUSH
35711: LD_INT 40
35713: PUSH
35714: LD_INT 71
35716: PUSH
35717: LD_INT 23
35719: PUSH
35720: LD_INT 44
35722: PUSH
35723: LD_INT 48
35725: PUSH
35726: LD_INT 49
35728: PUSH
35729: LD_INT 50
35731: PUSH
35732: LD_INT 51
35734: PUSH
35735: LD_INT 52
35737: PUSH
35738: LD_INT 53
35740: PUSH
35741: LD_INT 54
35743: PUSH
35744: LD_INT 55
35746: PUSH
35747: LD_INT 56
35749: PUSH
35750: LD_INT 57
35752: PUSH
35753: LD_INT 58
35755: PUSH
35756: LD_INT 59
35758: PUSH
35759: LD_INT 63
35761: PUSH
35762: LD_INT 64
35764: PUSH
35765: LD_INT 65
35767: PUSH
35768: LD_INT 82
35770: PUSH
35771: LD_INT 83
35773: PUSH
35774: LD_INT 84
35776: PUSH
35777: LD_INT 85
35779: PUSH
35780: LD_INT 86
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: ST_TO_ADDR
35838: GO 35841
35840: POP
// if state > - 1 and state < 3 then
35841: LD_VAR 0 3
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: GREATER
35850: PUSH
35851: LD_VAR 0 3
35855: PUSH
35856: LD_INT 3
35858: LESS
35859: AND
35860: IFFALSE 35917
// for i in result do
35862: LD_ADDR_VAR 0 5
35866: PUSH
35867: LD_VAR 0 4
35871: PUSH
35872: FOR_IN
35873: IFFALSE 35915
// if GetTech ( i , side ) <> state then
35875: LD_VAR 0 5
35879: PPUSH
35880: LD_VAR 0 1
35884: PPUSH
35885: CALL_OW 321
35889: PUSH
35890: LD_VAR 0 3
35894: NONEQUAL
35895: IFFALSE 35913
// result := result diff i ;
35897: LD_ADDR_VAR 0 4
35901: PUSH
35902: LD_VAR 0 4
35906: PUSH
35907: LD_VAR 0 5
35911: DIFF
35912: ST_TO_ADDR
35913: GO 35872
35915: POP
35916: POP
// end ;
35917: LD_VAR 0 4
35921: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35922: LD_INT 0
35924: PPUSH
35925: PPUSH
35926: PPUSH
// result := true ;
35927: LD_ADDR_VAR 0 3
35931: PUSH
35932: LD_INT 1
35934: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35935: LD_ADDR_VAR 0 5
35939: PUSH
35940: LD_VAR 0 2
35944: PPUSH
35945: CALL_OW 480
35949: ST_TO_ADDR
// if not tmp then
35950: LD_VAR 0 5
35954: NOT
35955: IFFALSE 35959
// exit ;
35957: GO 36008
// for i in tmp do
35959: LD_ADDR_VAR 0 4
35963: PUSH
35964: LD_VAR 0 5
35968: PUSH
35969: FOR_IN
35970: IFFALSE 36006
// if GetTech ( i , side ) <> state_researched then
35972: LD_VAR 0 4
35976: PPUSH
35977: LD_VAR 0 1
35981: PPUSH
35982: CALL_OW 321
35986: PUSH
35987: LD_INT 2
35989: NONEQUAL
35990: IFFALSE 36004
// begin result := false ;
35992: LD_ADDR_VAR 0 3
35996: PUSH
35997: LD_INT 0
35999: ST_TO_ADDR
// exit ;
36000: POP
36001: POP
36002: GO 36008
// end ;
36004: GO 35969
36006: POP
36007: POP
// end ;
36008: LD_VAR 0 3
36012: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36013: LD_INT 0
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36028: LD_VAR 0 1
36032: NOT
36033: PUSH
36034: LD_VAR 0 1
36038: PPUSH
36039: CALL_OW 257
36043: PUSH
36044: LD_INT 9
36046: NONEQUAL
36047: OR
36048: IFFALSE 36052
// exit ;
36050: GO 36625
// side := GetSide ( unit ) ;
36052: LD_ADDR_VAR 0 9
36056: PUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL_OW 255
36066: ST_TO_ADDR
// tech_space := tech_spacanom ;
36067: LD_ADDR_VAR 0 12
36071: PUSH
36072: LD_INT 29
36074: ST_TO_ADDR
// tech_time := tech_taurad ;
36075: LD_ADDR_VAR 0 13
36079: PUSH
36080: LD_INT 28
36082: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36083: LD_ADDR_VAR 0 11
36087: PUSH
36088: LD_VAR 0 1
36092: PPUSH
36093: CALL_OW 310
36097: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36098: LD_VAR 0 11
36102: PPUSH
36103: CALL_OW 247
36107: PUSH
36108: LD_INT 2
36110: EQUAL
36111: IFFALSE 36115
// exit ;
36113: GO 36625
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36115: LD_ADDR_VAR 0 8
36119: PUSH
36120: LD_INT 81
36122: PUSH
36123: LD_VAR 0 9
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 3
36134: PUSH
36135: LD_INT 21
36137: PUSH
36138: LD_INT 3
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PPUSH
36153: CALL_OW 69
36157: ST_TO_ADDR
// if not tmp then
36158: LD_VAR 0 8
36162: NOT
36163: IFFALSE 36167
// exit ;
36165: GO 36625
// if in_unit then
36167: LD_VAR 0 11
36171: IFFALSE 36195
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36173: LD_ADDR_VAR 0 10
36177: PUSH
36178: LD_VAR 0 8
36182: PPUSH
36183: LD_VAR 0 11
36187: PPUSH
36188: CALL_OW 74
36192: ST_TO_ADDR
36193: GO 36215
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36195: LD_ADDR_VAR 0 10
36199: PUSH
36200: LD_VAR 0 8
36204: PPUSH
36205: LD_VAR 0 1
36209: PPUSH
36210: CALL_OW 74
36214: ST_TO_ADDR
// if not enemy then
36215: LD_VAR 0 10
36219: NOT
36220: IFFALSE 36224
// exit ;
36222: GO 36625
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36224: LD_VAR 0 11
36228: PUSH
36229: LD_VAR 0 11
36233: PPUSH
36234: LD_VAR 0 10
36238: PPUSH
36239: CALL_OW 296
36243: PUSH
36244: LD_INT 13
36246: GREATER
36247: AND
36248: PUSH
36249: LD_VAR 0 1
36253: PPUSH
36254: LD_VAR 0 10
36258: PPUSH
36259: CALL_OW 296
36263: PUSH
36264: LD_INT 12
36266: GREATER
36267: OR
36268: IFFALSE 36272
// exit ;
36270: GO 36625
// missile := [ 1 ] ;
36272: LD_ADDR_VAR 0 14
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: EMPTY
36281: LIST
36282: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36283: LD_VAR 0 9
36287: PPUSH
36288: LD_VAR 0 12
36292: PPUSH
36293: CALL_OW 325
36297: IFFALSE 36326
// missile := Replace ( missile , missile + 1 , 2 ) ;
36299: LD_ADDR_VAR 0 14
36303: PUSH
36304: LD_VAR 0 14
36308: PPUSH
36309: LD_VAR 0 14
36313: PUSH
36314: LD_INT 1
36316: PLUS
36317: PPUSH
36318: LD_INT 2
36320: PPUSH
36321: CALL_OW 1
36325: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36326: LD_VAR 0 9
36330: PPUSH
36331: LD_VAR 0 13
36335: PPUSH
36336: CALL_OW 325
36340: PUSH
36341: LD_VAR 0 10
36345: PPUSH
36346: CALL_OW 255
36350: PPUSH
36351: LD_VAR 0 13
36355: PPUSH
36356: CALL_OW 325
36360: NOT
36361: AND
36362: IFFALSE 36391
// missile := Replace ( missile , missile + 1 , 3 ) ;
36364: LD_ADDR_VAR 0 14
36368: PUSH
36369: LD_VAR 0 14
36373: PPUSH
36374: LD_VAR 0 14
36378: PUSH
36379: LD_INT 1
36381: PLUS
36382: PPUSH
36383: LD_INT 3
36385: PPUSH
36386: CALL_OW 1
36390: ST_TO_ADDR
// if missile < 2 then
36391: LD_VAR 0 14
36395: PUSH
36396: LD_INT 2
36398: LESS
36399: IFFALSE 36403
// exit ;
36401: GO 36625
// x := GetX ( enemy ) ;
36403: LD_ADDR_VAR 0 4
36407: PUSH
36408: LD_VAR 0 10
36412: PPUSH
36413: CALL_OW 250
36417: ST_TO_ADDR
// y := GetY ( enemy ) ;
36418: LD_ADDR_VAR 0 5
36422: PUSH
36423: LD_VAR 0 10
36427: PPUSH
36428: CALL_OW 251
36432: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36433: LD_ADDR_VAR 0 6
36437: PUSH
36438: LD_VAR 0 4
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PPUSH
36447: LD_INT 1
36449: PPUSH
36450: CALL_OW 12
36454: PLUS
36455: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36456: LD_ADDR_VAR 0 7
36460: PUSH
36461: LD_VAR 0 5
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PPUSH
36470: LD_INT 1
36472: PPUSH
36473: CALL_OW 12
36477: PLUS
36478: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36479: LD_VAR 0 6
36483: PPUSH
36484: LD_VAR 0 7
36488: PPUSH
36489: CALL_OW 488
36493: NOT
36494: IFFALSE 36516
// begin _x := x ;
36496: LD_ADDR_VAR 0 6
36500: PUSH
36501: LD_VAR 0 4
36505: ST_TO_ADDR
// _y := y ;
36506: LD_ADDR_VAR 0 7
36510: PUSH
36511: LD_VAR 0 5
36515: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36516: LD_ADDR_VAR 0 3
36520: PUSH
36521: LD_INT 1
36523: PPUSH
36524: LD_VAR 0 14
36528: PPUSH
36529: CALL_OW 12
36533: ST_TO_ADDR
// case i of 1 :
36534: LD_VAR 0 3
36538: PUSH
36539: LD_INT 1
36541: DOUBLE
36542: EQUAL
36543: IFTRUE 36547
36545: GO 36564
36547: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36548: LD_VAR 0 1
36552: PPUSH
36553: LD_VAR 0 10
36557: PPUSH
36558: CALL_OW 115
36562: GO 36625
36564: LD_INT 2
36566: DOUBLE
36567: EQUAL
36568: IFTRUE 36572
36570: GO 36594
36572: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36573: LD_VAR 0 1
36577: PPUSH
36578: LD_VAR 0 6
36582: PPUSH
36583: LD_VAR 0 7
36587: PPUSH
36588: CALL_OW 153
36592: GO 36625
36594: LD_INT 3
36596: DOUBLE
36597: EQUAL
36598: IFTRUE 36602
36600: GO 36624
36602: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36603: LD_VAR 0 1
36607: PPUSH
36608: LD_VAR 0 6
36612: PPUSH
36613: LD_VAR 0 7
36617: PPUSH
36618: CALL_OW 154
36622: GO 36625
36624: POP
// end ;
36625: LD_VAR 0 2
36629: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36630: LD_INT 0
36632: PPUSH
36633: PPUSH
36634: PPUSH
36635: PPUSH
36636: PPUSH
36637: PPUSH
// if not unit or not building then
36638: LD_VAR 0 1
36642: NOT
36643: PUSH
36644: LD_VAR 0 2
36648: NOT
36649: OR
36650: IFFALSE 36654
// exit ;
36652: GO 36812
// x := GetX ( building ) ;
36654: LD_ADDR_VAR 0 5
36658: PUSH
36659: LD_VAR 0 2
36663: PPUSH
36664: CALL_OW 250
36668: ST_TO_ADDR
// y := GetY ( building ) ;
36669: LD_ADDR_VAR 0 6
36673: PUSH
36674: LD_VAR 0 2
36678: PPUSH
36679: CALL_OW 251
36683: ST_TO_ADDR
// for i = 0 to 5 do
36684: LD_ADDR_VAR 0 4
36688: PUSH
36689: DOUBLE
36690: LD_INT 0
36692: DEC
36693: ST_TO_ADDR
36694: LD_INT 5
36696: PUSH
36697: FOR_TO
36698: IFFALSE 36810
// begin _x := ShiftX ( x , i , 3 ) ;
36700: LD_ADDR_VAR 0 7
36704: PUSH
36705: LD_VAR 0 5
36709: PPUSH
36710: LD_VAR 0 4
36714: PPUSH
36715: LD_INT 3
36717: PPUSH
36718: CALL_OW 272
36722: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36723: LD_ADDR_VAR 0 8
36727: PUSH
36728: LD_VAR 0 6
36732: PPUSH
36733: LD_VAR 0 4
36737: PPUSH
36738: LD_INT 3
36740: PPUSH
36741: CALL_OW 273
36745: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36746: LD_VAR 0 7
36750: PPUSH
36751: LD_VAR 0 8
36755: PPUSH
36756: CALL_OW 488
36760: NOT
36761: IFFALSE 36765
// continue ;
36763: GO 36697
// if HexInfo ( _x , _y ) = 0 then
36765: LD_VAR 0 7
36769: PPUSH
36770: LD_VAR 0 8
36774: PPUSH
36775: CALL_OW 428
36779: PUSH
36780: LD_INT 0
36782: EQUAL
36783: IFFALSE 36808
// begin ComMoveXY ( unit , _x , _y ) ;
36785: LD_VAR 0 1
36789: PPUSH
36790: LD_VAR 0 7
36794: PPUSH
36795: LD_VAR 0 8
36799: PPUSH
36800: CALL_OW 111
// exit ;
36804: POP
36805: POP
36806: GO 36812
// end ; end ;
36808: GO 36697
36810: POP
36811: POP
// end ;
36812: LD_VAR 0 3
36816: RET
// export function ScanBase ( side , base_area ) ; begin
36817: LD_INT 0
36819: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36820: LD_ADDR_VAR 0 3
36824: PUSH
36825: LD_VAR 0 2
36829: PPUSH
36830: LD_INT 81
36832: PUSH
36833: LD_VAR 0 1
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PPUSH
36842: CALL_OW 70
36846: ST_TO_ADDR
// end ;
36847: LD_VAR 0 3
36851: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36852: LD_INT 0
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
// result := false ;
36858: LD_ADDR_VAR 0 2
36862: PUSH
36863: LD_INT 0
36865: ST_TO_ADDR
// side := GetSide ( unit ) ;
36866: LD_ADDR_VAR 0 3
36870: PUSH
36871: LD_VAR 0 1
36875: PPUSH
36876: CALL_OW 255
36880: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36881: LD_ADDR_VAR 0 4
36885: PUSH
36886: LD_VAR 0 1
36890: PPUSH
36891: CALL_OW 248
36895: ST_TO_ADDR
// case nat of 1 :
36896: LD_VAR 0 4
36900: PUSH
36901: LD_INT 1
36903: DOUBLE
36904: EQUAL
36905: IFTRUE 36909
36907: GO 36920
36909: POP
// tech := tech_lassight ; 2 :
36910: LD_ADDR_VAR 0 5
36914: PUSH
36915: LD_INT 12
36917: ST_TO_ADDR
36918: GO 36959
36920: LD_INT 2
36922: DOUBLE
36923: EQUAL
36924: IFTRUE 36928
36926: GO 36939
36928: POP
// tech := tech_mortar ; 3 :
36929: LD_ADDR_VAR 0 5
36933: PUSH
36934: LD_INT 41
36936: ST_TO_ADDR
36937: GO 36959
36939: LD_INT 3
36941: DOUBLE
36942: EQUAL
36943: IFTRUE 36947
36945: GO 36958
36947: POP
// tech := tech_bazooka ; end ;
36948: LD_ADDR_VAR 0 5
36952: PUSH
36953: LD_INT 44
36955: ST_TO_ADDR
36956: GO 36959
36958: POP
// if Researched ( side , tech ) then
36959: LD_VAR 0 3
36963: PPUSH
36964: LD_VAR 0 5
36968: PPUSH
36969: CALL_OW 325
36973: IFFALSE 37000
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36975: LD_ADDR_VAR 0 2
36979: PUSH
36980: LD_INT 5
36982: PUSH
36983: LD_INT 8
36985: PUSH
36986: LD_INT 9
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: PUSH
36994: LD_VAR 0 4
36998: ARRAY
36999: ST_TO_ADDR
// end ;
37000: LD_VAR 0 2
37004: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37005: LD_INT 0
37007: PPUSH
37008: PPUSH
37009: PPUSH
// if not mines then
37010: LD_VAR 0 2
37014: NOT
37015: IFFALSE 37019
// exit ;
37017: GO 37163
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37019: LD_ADDR_VAR 0 5
37023: PUSH
37024: LD_INT 81
37026: PUSH
37027: LD_VAR 0 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 21
37041: PUSH
37042: LD_INT 3
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PPUSH
37057: CALL_OW 69
37061: ST_TO_ADDR
// for i in mines do
37062: LD_ADDR_VAR 0 4
37066: PUSH
37067: LD_VAR 0 2
37071: PUSH
37072: FOR_IN
37073: IFFALSE 37161
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37075: LD_VAR 0 4
37079: PUSH
37080: LD_INT 1
37082: ARRAY
37083: PPUSH
37084: LD_VAR 0 4
37088: PUSH
37089: LD_INT 2
37091: ARRAY
37092: PPUSH
37093: CALL_OW 458
37097: NOT
37098: IFFALSE 37102
// continue ;
37100: GO 37072
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37102: LD_VAR 0 4
37106: PUSH
37107: LD_INT 1
37109: ARRAY
37110: PPUSH
37111: LD_VAR 0 4
37115: PUSH
37116: LD_INT 2
37118: ARRAY
37119: PPUSH
37120: CALL_OW 428
37124: PUSH
37125: LD_VAR 0 5
37129: IN
37130: IFFALSE 37159
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37132: LD_VAR 0 4
37136: PUSH
37137: LD_INT 1
37139: ARRAY
37140: PPUSH
37141: LD_VAR 0 4
37145: PUSH
37146: LD_INT 2
37148: ARRAY
37149: PPUSH
37150: LD_VAR 0 1
37154: PPUSH
37155: CALL_OW 456
// end ;
37159: GO 37072
37161: POP
37162: POP
// end ;
37163: LD_VAR 0 3
37167: RET
// export function Count ( array ) ; begin
37168: LD_INT 0
37170: PPUSH
// result := array + 0 ;
37171: LD_ADDR_VAR 0 2
37175: PUSH
37176: LD_VAR 0 1
37180: PUSH
37181: LD_INT 0
37183: PLUS
37184: ST_TO_ADDR
// end ;
37185: LD_VAR 0 2
37189: RET
// export function IsEmpty ( building ) ; begin
37190: LD_INT 0
37192: PPUSH
// if not building then
37193: LD_VAR 0 1
37197: NOT
37198: IFFALSE 37202
// exit ;
37200: GO 37245
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37202: LD_ADDR_VAR 0 2
37206: PUSH
37207: LD_VAR 0 1
37211: PUSH
37212: LD_INT 22
37214: PUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 255
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 58
37231: PUSH
37232: EMPTY
37233: LIST
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PPUSH
37239: CALL_OW 69
37243: IN
37244: ST_TO_ADDR
// end ;
37245: LD_VAR 0 2
37249: RET
// export function IsNotFull ( building ) ; var places ; begin
37250: LD_INT 0
37252: PPUSH
37253: PPUSH
// if not building then
37254: LD_VAR 0 1
37258: NOT
37259: IFFALSE 37263
// exit ;
37261: GO 37291
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37263: LD_ADDR_VAR 0 2
37267: PUSH
37268: LD_VAR 0 1
37272: PPUSH
37273: LD_INT 3
37275: PUSH
37276: LD_INT 62
37278: PUSH
37279: EMPTY
37280: LIST
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PPUSH
37286: CALL_OW 72
37290: ST_TO_ADDR
// end ;
37291: LD_VAR 0 2
37295: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37296: LD_INT 0
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
// tmp := [ ] ;
37302: LD_ADDR_VAR 0 3
37306: PUSH
37307: EMPTY
37308: ST_TO_ADDR
// list := [ ] ;
37309: LD_ADDR_VAR 0 5
37313: PUSH
37314: EMPTY
37315: ST_TO_ADDR
// for i = 16 to 25 do
37316: LD_ADDR_VAR 0 4
37320: PUSH
37321: DOUBLE
37322: LD_INT 16
37324: DEC
37325: ST_TO_ADDR
37326: LD_INT 25
37328: PUSH
37329: FOR_TO
37330: IFFALSE 37403
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37332: LD_ADDR_VAR 0 3
37336: PUSH
37337: LD_VAR 0 3
37341: PUSH
37342: LD_INT 22
37344: PUSH
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 255
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 91
37361: PUSH
37362: LD_VAR 0 1
37366: PUSH
37367: LD_INT 6
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 30
37377: PUSH
37378: LD_VAR 0 4
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: PUSH
37392: EMPTY
37393: LIST
37394: PPUSH
37395: CALL_OW 69
37399: ADD
37400: ST_TO_ADDR
37401: GO 37329
37403: POP
37404: POP
// for i = 1 to tmp do
37405: LD_ADDR_VAR 0 4
37409: PUSH
37410: DOUBLE
37411: LD_INT 1
37413: DEC
37414: ST_TO_ADDR
37415: LD_VAR 0 3
37419: PUSH
37420: FOR_TO
37421: IFFALSE 37509
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37423: LD_ADDR_VAR 0 5
37427: PUSH
37428: LD_VAR 0 5
37432: PUSH
37433: LD_VAR 0 3
37437: PUSH
37438: LD_VAR 0 4
37442: ARRAY
37443: PPUSH
37444: CALL_OW 266
37448: PUSH
37449: LD_VAR 0 3
37453: PUSH
37454: LD_VAR 0 4
37458: ARRAY
37459: PPUSH
37460: CALL_OW 250
37464: PUSH
37465: LD_VAR 0 3
37469: PUSH
37470: LD_VAR 0 4
37474: ARRAY
37475: PPUSH
37476: CALL_OW 251
37480: PUSH
37481: LD_VAR 0 3
37485: PUSH
37486: LD_VAR 0 4
37490: ARRAY
37491: PPUSH
37492: CALL_OW 254
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: PUSH
37503: EMPTY
37504: LIST
37505: ADD
37506: ST_TO_ADDR
37507: GO 37420
37509: POP
37510: POP
// result := list ;
37511: LD_ADDR_VAR 0 2
37515: PUSH
37516: LD_VAR 0 5
37520: ST_TO_ADDR
// end ;
37521: LD_VAR 0 2
37525: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37526: LD_INT 0
37528: PPUSH
37529: PPUSH
37530: PPUSH
37531: PPUSH
37532: PPUSH
37533: PPUSH
37534: PPUSH
// if not factory then
37535: LD_VAR 0 1
37539: NOT
37540: IFFALSE 37544
// exit ;
37542: GO 38137
// if control = control_apeman then
37544: LD_VAR 0 4
37548: PUSH
37549: LD_INT 5
37551: EQUAL
37552: IFFALSE 37661
// begin tmp := UnitsInside ( factory ) ;
37554: LD_ADDR_VAR 0 8
37558: PUSH
37559: LD_VAR 0 1
37563: PPUSH
37564: CALL_OW 313
37568: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37569: LD_VAR 0 8
37573: PPUSH
37574: LD_INT 25
37576: PUSH
37577: LD_INT 12
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PPUSH
37584: CALL_OW 72
37588: NOT
37589: IFFALSE 37599
// control := control_manual ;
37591: LD_ADDR_VAR 0 4
37595: PUSH
37596: LD_INT 1
37598: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37599: LD_ADDR_VAR 0 8
37603: PUSH
37604: LD_VAR 0 1
37608: PPUSH
37609: CALL 37296 0 1
37613: ST_TO_ADDR
// if tmp then
37614: LD_VAR 0 8
37618: IFFALSE 37661
// begin for i in tmp do
37620: LD_ADDR_VAR 0 7
37624: PUSH
37625: LD_VAR 0 8
37629: PUSH
37630: FOR_IN
37631: IFFALSE 37659
// if i [ 1 ] = b_ext_radio then
37633: LD_VAR 0 7
37637: PUSH
37638: LD_INT 1
37640: ARRAY
37641: PUSH
37642: LD_INT 22
37644: EQUAL
37645: IFFALSE 37657
// begin control := control_remote ;
37647: LD_ADDR_VAR 0 4
37651: PUSH
37652: LD_INT 2
37654: ST_TO_ADDR
// break ;
37655: GO 37659
// end ;
37657: GO 37630
37659: POP
37660: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37661: LD_VAR 0 1
37665: PPUSH
37666: LD_VAR 0 2
37670: PPUSH
37671: LD_VAR 0 3
37675: PPUSH
37676: LD_VAR 0 4
37680: PPUSH
37681: LD_VAR 0 5
37685: PPUSH
37686: CALL_OW 448
37690: IFFALSE 37725
// begin result := [ chassis , engine , control , weapon ] ;
37692: LD_ADDR_VAR 0 6
37696: PUSH
37697: LD_VAR 0 2
37701: PUSH
37702: LD_VAR 0 3
37706: PUSH
37707: LD_VAR 0 4
37711: PUSH
37712: LD_VAR 0 5
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: ST_TO_ADDR
// exit ;
37723: GO 38137
// end ; _chassis := AvailableChassisList ( factory ) ;
37725: LD_ADDR_VAR 0 9
37729: PUSH
37730: LD_VAR 0 1
37734: PPUSH
37735: CALL_OW 475
37739: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37740: LD_ADDR_VAR 0 11
37744: PUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: CALL_OW 476
37754: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37755: LD_ADDR_VAR 0 12
37759: PUSH
37760: LD_VAR 0 1
37764: PPUSH
37765: CALL_OW 477
37769: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37770: LD_ADDR_VAR 0 10
37774: PUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 478
37784: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37785: LD_VAR 0 9
37789: NOT
37790: PUSH
37791: LD_VAR 0 11
37795: NOT
37796: OR
37797: PUSH
37798: LD_VAR 0 12
37802: NOT
37803: OR
37804: PUSH
37805: LD_VAR 0 10
37809: NOT
37810: OR
37811: IFFALSE 37846
// begin result := [ chassis , engine , control , weapon ] ;
37813: LD_ADDR_VAR 0 6
37817: PUSH
37818: LD_VAR 0 2
37822: PUSH
37823: LD_VAR 0 3
37827: PUSH
37828: LD_VAR 0 4
37832: PUSH
37833: LD_VAR 0 5
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: ST_TO_ADDR
// exit ;
37844: GO 38137
// end ; if not chassis in _chassis then
37846: LD_VAR 0 2
37850: PUSH
37851: LD_VAR 0 9
37855: IN
37856: NOT
37857: IFFALSE 37883
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37859: LD_ADDR_VAR 0 2
37863: PUSH
37864: LD_VAR 0 9
37868: PUSH
37869: LD_INT 1
37871: PPUSH
37872: LD_VAR 0 9
37876: PPUSH
37877: CALL_OW 12
37881: ARRAY
37882: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37883: LD_VAR 0 2
37887: PPUSH
37888: LD_VAR 0 3
37892: PPUSH
37893: CALL 38142 0 2
37897: NOT
37898: IFFALSE 37957
// repeat engine := _engine [ 1 ] ;
37900: LD_ADDR_VAR 0 3
37904: PUSH
37905: LD_VAR 0 11
37909: PUSH
37910: LD_INT 1
37912: ARRAY
37913: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37914: LD_ADDR_VAR 0 11
37918: PUSH
37919: LD_VAR 0 11
37923: PPUSH
37924: LD_INT 1
37926: PPUSH
37927: CALL_OW 3
37931: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37932: LD_VAR 0 2
37936: PPUSH
37937: LD_VAR 0 3
37941: PPUSH
37942: CALL 38142 0 2
37946: PUSH
37947: LD_VAR 0 11
37951: PUSH
37952: EMPTY
37953: EQUAL
37954: OR
37955: IFFALSE 37900
// if not control in _control then
37957: LD_VAR 0 4
37961: PUSH
37962: LD_VAR 0 12
37966: IN
37967: NOT
37968: IFFALSE 37994
// control := _control [ rand ( 1 , _control ) ] ;
37970: LD_ADDR_VAR 0 4
37974: PUSH
37975: LD_VAR 0 12
37979: PUSH
37980: LD_INT 1
37982: PPUSH
37983: LD_VAR 0 12
37987: PPUSH
37988: CALL_OW 12
37992: ARRAY
37993: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37994: LD_VAR 0 2
37998: PPUSH
37999: LD_VAR 0 5
38003: PPUSH
38004: CALL 38362 0 2
38008: NOT
38009: IFFALSE 38068
// repeat weapon := _weapon [ 1 ] ;
38011: LD_ADDR_VAR 0 5
38015: PUSH
38016: LD_VAR 0 10
38020: PUSH
38021: LD_INT 1
38023: ARRAY
38024: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38025: LD_ADDR_VAR 0 10
38029: PUSH
38030: LD_VAR 0 10
38034: PPUSH
38035: LD_INT 1
38037: PPUSH
38038: CALL_OW 3
38042: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38043: LD_VAR 0 2
38047: PPUSH
38048: LD_VAR 0 5
38052: PPUSH
38053: CALL 38362 0 2
38057: PUSH
38058: LD_VAR 0 10
38062: PUSH
38063: EMPTY
38064: EQUAL
38065: OR
38066: IFFALSE 38011
// result := [ ] ;
38068: LD_ADDR_VAR 0 6
38072: PUSH
38073: EMPTY
38074: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38075: LD_VAR 0 1
38079: PPUSH
38080: LD_VAR 0 2
38084: PPUSH
38085: LD_VAR 0 3
38089: PPUSH
38090: LD_VAR 0 4
38094: PPUSH
38095: LD_VAR 0 5
38099: PPUSH
38100: CALL_OW 448
38104: IFFALSE 38137
// result := [ chassis , engine , control , weapon ] ;
38106: LD_ADDR_VAR 0 6
38110: PUSH
38111: LD_VAR 0 2
38115: PUSH
38116: LD_VAR 0 3
38120: PUSH
38121: LD_VAR 0 4
38125: PUSH
38126: LD_VAR 0 5
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: ST_TO_ADDR
// end ;
38137: LD_VAR 0 6
38141: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38142: LD_INT 0
38144: PPUSH
// if not chassis or not engine then
38145: LD_VAR 0 1
38149: NOT
38150: PUSH
38151: LD_VAR 0 2
38155: NOT
38156: OR
38157: IFFALSE 38161
// exit ;
38159: GO 38357
// case engine of engine_solar :
38161: LD_VAR 0 2
38165: PUSH
38166: LD_INT 2
38168: DOUBLE
38169: EQUAL
38170: IFTRUE 38174
38172: GO 38212
38174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38175: LD_ADDR_VAR 0 3
38179: PUSH
38180: LD_INT 11
38182: PUSH
38183: LD_INT 12
38185: PUSH
38186: LD_INT 13
38188: PUSH
38189: LD_INT 14
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: LD_INT 3
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
38210: GO 38341
38212: LD_INT 1
38214: DOUBLE
38215: EQUAL
38216: IFTRUE 38220
38218: GO 38282
38220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38221: LD_ADDR_VAR 0 3
38225: PUSH
38226: LD_INT 11
38228: PUSH
38229: LD_INT 12
38231: PUSH
38232: LD_INT 13
38234: PUSH
38235: LD_INT 14
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: LD_INT 3
38246: PUSH
38247: LD_INT 4
38249: PUSH
38250: LD_INT 5
38252: PUSH
38253: LD_INT 21
38255: PUSH
38256: LD_INT 23
38258: PUSH
38259: LD_INT 22
38261: PUSH
38262: LD_INT 24
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: ST_TO_ADDR
38280: GO 38341
38282: LD_INT 3
38284: DOUBLE
38285: EQUAL
38286: IFTRUE 38290
38288: GO 38340
38290: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38291: LD_ADDR_VAR 0 3
38295: PUSH
38296: LD_INT 13
38298: PUSH
38299: LD_INT 14
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: LD_INT 4
38310: PUSH
38311: LD_INT 5
38313: PUSH
38314: LD_INT 21
38316: PUSH
38317: LD_INT 22
38319: PUSH
38320: LD_INT 23
38322: PUSH
38323: LD_INT 24
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: ST_TO_ADDR
38338: GO 38341
38340: POP
// result := ( chassis in result ) ;
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: LD_VAR 0 1
38350: PUSH
38351: LD_VAR 0 3
38355: IN
38356: ST_TO_ADDR
// end ;
38357: LD_VAR 0 3
38361: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38362: LD_INT 0
38364: PPUSH
// if not chassis or not weapon then
38365: LD_VAR 0 1
38369: NOT
38370: PUSH
38371: LD_VAR 0 2
38375: NOT
38376: OR
38377: IFFALSE 38381
// exit ;
38379: GO 39441
// case weapon of us_machine_gun :
38381: LD_VAR 0 2
38385: PUSH
38386: LD_INT 2
38388: DOUBLE
38389: EQUAL
38390: IFTRUE 38394
38392: GO 38424
38394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38395: LD_ADDR_VAR 0 3
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: LD_INT 3
38408: PUSH
38409: LD_INT 4
38411: PUSH
38412: LD_INT 5
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
38422: GO 39425
38424: LD_INT 3
38426: DOUBLE
38427: EQUAL
38428: IFTRUE 38432
38430: GO 38462
38432: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38433: LD_ADDR_VAR 0 3
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: LD_INT 3
38446: PUSH
38447: LD_INT 4
38449: PUSH
38450: LD_INT 5
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: ST_TO_ADDR
38460: GO 39425
38462: LD_INT 11
38464: DOUBLE
38465: EQUAL
38466: IFTRUE 38470
38468: GO 38500
38470: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38471: LD_ADDR_VAR 0 3
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: LD_INT 3
38484: PUSH
38485: LD_INT 4
38487: PUSH
38488: LD_INT 5
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: ST_TO_ADDR
38498: GO 39425
38500: LD_INT 4
38502: DOUBLE
38503: EQUAL
38504: IFTRUE 38508
38506: GO 38534
38508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38509: LD_ADDR_VAR 0 3
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: LD_INT 3
38519: PUSH
38520: LD_INT 4
38522: PUSH
38523: LD_INT 5
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: ST_TO_ADDR
38532: GO 39425
38534: LD_INT 5
38536: DOUBLE
38537: EQUAL
38538: IFTRUE 38542
38540: GO 38568
38542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38543: LD_ADDR_VAR 0 3
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: LD_INT 3
38553: PUSH
38554: LD_INT 4
38556: PUSH
38557: LD_INT 5
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: ST_TO_ADDR
38566: GO 39425
38568: LD_INT 9
38570: DOUBLE
38571: EQUAL
38572: IFTRUE 38576
38574: GO 38602
38576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38577: LD_ADDR_VAR 0 3
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: LD_INT 4
38590: PUSH
38591: LD_INT 5
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
38600: GO 39425
38602: LD_INT 7
38604: DOUBLE
38605: EQUAL
38606: IFTRUE 38610
38608: GO 38636
38610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38611: LD_ADDR_VAR 0 3
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: LD_INT 3
38621: PUSH
38622: LD_INT 4
38624: PUSH
38625: LD_INT 5
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
38634: GO 39425
38636: LD_INT 12
38638: DOUBLE
38639: EQUAL
38640: IFTRUE 38644
38642: GO 38670
38644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38645: LD_ADDR_VAR 0 3
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: LD_INT 3
38655: PUSH
38656: LD_INT 4
38658: PUSH
38659: LD_INT 5
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: ST_TO_ADDR
38668: GO 39425
38670: LD_INT 13
38672: DOUBLE
38673: EQUAL
38674: IFTRUE 38678
38676: GO 38704
38678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38679: LD_ADDR_VAR 0 3
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: LD_INT 4
38692: PUSH
38693: LD_INT 5
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: ST_TO_ADDR
38702: GO 39425
38704: LD_INT 14
38706: DOUBLE
38707: EQUAL
38708: IFTRUE 38712
38710: GO 38730
38712: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38713: LD_ADDR_VAR 0 3
38717: PUSH
38718: LD_INT 4
38720: PUSH
38721: LD_INT 5
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: ST_TO_ADDR
38728: GO 39425
38730: LD_INT 6
38732: DOUBLE
38733: EQUAL
38734: IFTRUE 38738
38736: GO 38756
38738: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38739: LD_ADDR_VAR 0 3
38743: PUSH
38744: LD_INT 4
38746: PUSH
38747: LD_INT 5
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: ST_TO_ADDR
38754: GO 39425
38756: LD_INT 10
38758: DOUBLE
38759: EQUAL
38760: IFTRUE 38764
38762: GO 38782
38764: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38765: LD_ADDR_VAR 0 3
38769: PUSH
38770: LD_INT 4
38772: PUSH
38773: LD_INT 5
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: ST_TO_ADDR
38780: GO 39425
38782: LD_INT 22
38784: DOUBLE
38785: EQUAL
38786: IFTRUE 38790
38788: GO 38816
38790: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38791: LD_ADDR_VAR 0 3
38795: PUSH
38796: LD_INT 11
38798: PUSH
38799: LD_INT 12
38801: PUSH
38802: LD_INT 13
38804: PUSH
38805: LD_INT 14
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: ST_TO_ADDR
38814: GO 39425
38816: LD_INT 23
38818: DOUBLE
38819: EQUAL
38820: IFTRUE 38824
38822: GO 38850
38824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38825: LD_ADDR_VAR 0 3
38829: PUSH
38830: LD_INT 11
38832: PUSH
38833: LD_INT 12
38835: PUSH
38836: LD_INT 13
38838: PUSH
38839: LD_INT 14
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: ST_TO_ADDR
38848: GO 39425
38850: LD_INT 24
38852: DOUBLE
38853: EQUAL
38854: IFTRUE 38858
38856: GO 38884
38858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38859: LD_ADDR_VAR 0 3
38863: PUSH
38864: LD_INT 11
38866: PUSH
38867: LD_INT 12
38869: PUSH
38870: LD_INT 13
38872: PUSH
38873: LD_INT 14
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: ST_TO_ADDR
38882: GO 39425
38884: LD_INT 30
38886: DOUBLE
38887: EQUAL
38888: IFTRUE 38892
38890: GO 38918
38892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38893: LD_ADDR_VAR 0 3
38897: PUSH
38898: LD_INT 11
38900: PUSH
38901: LD_INT 12
38903: PUSH
38904: LD_INT 13
38906: PUSH
38907: LD_INT 14
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: ST_TO_ADDR
38916: GO 39425
38918: LD_INT 25
38920: DOUBLE
38921: EQUAL
38922: IFTRUE 38926
38924: GO 38944
38926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38927: LD_ADDR_VAR 0 3
38931: PUSH
38932: LD_INT 13
38934: PUSH
38935: LD_INT 14
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: ST_TO_ADDR
38942: GO 39425
38944: LD_INT 27
38946: DOUBLE
38947: EQUAL
38948: IFTRUE 38952
38950: GO 38970
38952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38953: LD_ADDR_VAR 0 3
38957: PUSH
38958: LD_INT 13
38960: PUSH
38961: LD_INT 14
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: ST_TO_ADDR
38968: GO 39425
38970: LD_INT 92
38972: DOUBLE
38973: EQUAL
38974: IFTRUE 38978
38976: GO 39004
38978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38979: LD_ADDR_VAR 0 3
38983: PUSH
38984: LD_INT 11
38986: PUSH
38987: LD_INT 12
38989: PUSH
38990: LD_INT 13
38992: PUSH
38993: LD_INT 14
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: ST_TO_ADDR
39002: GO 39425
39004: LD_INT 28
39006: DOUBLE
39007: EQUAL
39008: IFTRUE 39012
39010: GO 39030
39012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39013: LD_ADDR_VAR 0 3
39017: PUSH
39018: LD_INT 13
39020: PUSH
39021: LD_INT 14
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: ST_TO_ADDR
39028: GO 39425
39030: LD_INT 29
39032: DOUBLE
39033: EQUAL
39034: IFTRUE 39038
39036: GO 39056
39038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39039: LD_ADDR_VAR 0 3
39043: PUSH
39044: LD_INT 13
39046: PUSH
39047: LD_INT 14
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: ST_TO_ADDR
39054: GO 39425
39056: LD_INT 31
39058: DOUBLE
39059: EQUAL
39060: IFTRUE 39064
39062: GO 39082
39064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39065: LD_ADDR_VAR 0 3
39069: PUSH
39070: LD_INT 13
39072: PUSH
39073: LD_INT 14
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: ST_TO_ADDR
39080: GO 39425
39082: LD_INT 26
39084: DOUBLE
39085: EQUAL
39086: IFTRUE 39090
39088: GO 39108
39090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39091: LD_ADDR_VAR 0 3
39095: PUSH
39096: LD_INT 13
39098: PUSH
39099: LD_INT 14
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: ST_TO_ADDR
39106: GO 39425
39108: LD_INT 42
39110: DOUBLE
39111: EQUAL
39112: IFTRUE 39116
39114: GO 39142
39116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39117: LD_ADDR_VAR 0 3
39121: PUSH
39122: LD_INT 21
39124: PUSH
39125: LD_INT 22
39127: PUSH
39128: LD_INT 23
39130: PUSH
39131: LD_INT 24
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
39140: GO 39425
39142: LD_INT 43
39144: DOUBLE
39145: EQUAL
39146: IFTRUE 39150
39148: GO 39176
39150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39151: LD_ADDR_VAR 0 3
39155: PUSH
39156: LD_INT 21
39158: PUSH
39159: LD_INT 22
39161: PUSH
39162: LD_INT 23
39164: PUSH
39165: LD_INT 24
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: ST_TO_ADDR
39174: GO 39425
39176: LD_INT 44
39178: DOUBLE
39179: EQUAL
39180: IFTRUE 39184
39182: GO 39210
39184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39185: LD_ADDR_VAR 0 3
39189: PUSH
39190: LD_INT 21
39192: PUSH
39193: LD_INT 22
39195: PUSH
39196: LD_INT 23
39198: PUSH
39199: LD_INT 24
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
39208: GO 39425
39210: LD_INT 45
39212: DOUBLE
39213: EQUAL
39214: IFTRUE 39218
39216: GO 39244
39218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39219: LD_ADDR_VAR 0 3
39223: PUSH
39224: LD_INT 21
39226: PUSH
39227: LD_INT 22
39229: PUSH
39230: LD_INT 23
39232: PUSH
39233: LD_INT 24
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
39242: GO 39425
39244: LD_INT 49
39246: DOUBLE
39247: EQUAL
39248: IFTRUE 39252
39250: GO 39278
39252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39253: LD_ADDR_VAR 0 3
39257: PUSH
39258: LD_INT 21
39260: PUSH
39261: LD_INT 22
39263: PUSH
39264: LD_INT 23
39266: PUSH
39267: LD_INT 24
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: ST_TO_ADDR
39276: GO 39425
39278: LD_INT 51
39280: DOUBLE
39281: EQUAL
39282: IFTRUE 39286
39284: GO 39312
39286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39287: LD_ADDR_VAR 0 3
39291: PUSH
39292: LD_INT 21
39294: PUSH
39295: LD_INT 22
39297: PUSH
39298: LD_INT 23
39300: PUSH
39301: LD_INT 24
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: ST_TO_ADDR
39310: GO 39425
39312: LD_INT 52
39314: DOUBLE
39315: EQUAL
39316: IFTRUE 39320
39318: GO 39346
39320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39321: LD_ADDR_VAR 0 3
39325: PUSH
39326: LD_INT 21
39328: PUSH
39329: LD_INT 22
39331: PUSH
39332: LD_INT 23
39334: PUSH
39335: LD_INT 24
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: ST_TO_ADDR
39344: GO 39425
39346: LD_INT 53
39348: DOUBLE
39349: EQUAL
39350: IFTRUE 39354
39352: GO 39372
39354: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39355: LD_ADDR_VAR 0 3
39359: PUSH
39360: LD_INT 23
39362: PUSH
39363: LD_INT 24
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: ST_TO_ADDR
39370: GO 39425
39372: LD_INT 46
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39380
39378: GO 39398
39380: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39381: LD_ADDR_VAR 0 3
39385: PUSH
39386: LD_INT 23
39388: PUSH
39389: LD_INT 24
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: ST_TO_ADDR
39396: GO 39425
39398: LD_INT 47
39400: DOUBLE
39401: EQUAL
39402: IFTRUE 39406
39404: GO 39424
39406: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39407: LD_ADDR_VAR 0 3
39411: PUSH
39412: LD_INT 23
39414: PUSH
39415: LD_INT 24
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: ST_TO_ADDR
39422: GO 39425
39424: POP
// result := ( chassis in result ) ;
39425: LD_ADDR_VAR 0 3
39429: PUSH
39430: LD_VAR 0 1
39434: PUSH
39435: LD_VAR 0 3
39439: IN
39440: ST_TO_ADDR
// end ;
39441: LD_VAR 0 3
39445: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39446: LD_INT 0
39448: PPUSH
39449: PPUSH
39450: PPUSH
39451: PPUSH
39452: PPUSH
39453: PPUSH
39454: PPUSH
// result := array ;
39455: LD_ADDR_VAR 0 5
39459: PUSH
39460: LD_VAR 0 1
39464: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39465: LD_VAR 0 1
39469: NOT
39470: PUSH
39471: LD_VAR 0 2
39475: NOT
39476: OR
39477: PUSH
39478: LD_VAR 0 3
39482: NOT
39483: OR
39484: PUSH
39485: LD_VAR 0 2
39489: PUSH
39490: LD_VAR 0 1
39494: GREATER
39495: OR
39496: PUSH
39497: LD_VAR 0 3
39501: PUSH
39502: LD_VAR 0 1
39506: GREATER
39507: OR
39508: IFFALSE 39512
// exit ;
39510: GO 39808
// if direction then
39512: LD_VAR 0 4
39516: IFFALSE 39580
// begin d := 1 ;
39518: LD_ADDR_VAR 0 9
39522: PUSH
39523: LD_INT 1
39525: ST_TO_ADDR
// if i_from > i_to then
39526: LD_VAR 0 2
39530: PUSH
39531: LD_VAR 0 3
39535: GREATER
39536: IFFALSE 39562
// length := ( array - i_from ) + i_to else
39538: LD_ADDR_VAR 0 11
39542: PUSH
39543: LD_VAR 0 1
39547: PUSH
39548: LD_VAR 0 2
39552: MINUS
39553: PUSH
39554: LD_VAR 0 3
39558: PLUS
39559: ST_TO_ADDR
39560: GO 39578
// length := i_to - i_from ;
39562: LD_ADDR_VAR 0 11
39566: PUSH
39567: LD_VAR 0 3
39571: PUSH
39572: LD_VAR 0 2
39576: MINUS
39577: ST_TO_ADDR
// end else
39578: GO 39641
// begin d := - 1 ;
39580: LD_ADDR_VAR 0 9
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: ST_TO_ADDR
// if i_from > i_to then
39589: LD_VAR 0 2
39593: PUSH
39594: LD_VAR 0 3
39598: GREATER
39599: IFFALSE 39619
// length := i_from - i_to else
39601: LD_ADDR_VAR 0 11
39605: PUSH
39606: LD_VAR 0 2
39610: PUSH
39611: LD_VAR 0 3
39615: MINUS
39616: ST_TO_ADDR
39617: GO 39641
// length := ( array - i_to ) + i_from ;
39619: LD_ADDR_VAR 0 11
39623: PUSH
39624: LD_VAR 0 1
39628: PUSH
39629: LD_VAR 0 3
39633: MINUS
39634: PUSH
39635: LD_VAR 0 2
39639: PLUS
39640: ST_TO_ADDR
// end ; if not length then
39641: LD_VAR 0 11
39645: NOT
39646: IFFALSE 39650
// exit ;
39648: GO 39808
// tmp := array ;
39650: LD_ADDR_VAR 0 10
39654: PUSH
39655: LD_VAR 0 1
39659: ST_TO_ADDR
// for i = 1 to length do
39660: LD_ADDR_VAR 0 6
39664: PUSH
39665: DOUBLE
39666: LD_INT 1
39668: DEC
39669: ST_TO_ADDR
39670: LD_VAR 0 11
39674: PUSH
39675: FOR_TO
39676: IFFALSE 39796
// begin for j = 1 to array do
39678: LD_ADDR_VAR 0 7
39682: PUSH
39683: DOUBLE
39684: LD_INT 1
39686: DEC
39687: ST_TO_ADDR
39688: LD_VAR 0 1
39692: PUSH
39693: FOR_TO
39694: IFFALSE 39782
// begin k := j + d ;
39696: LD_ADDR_VAR 0 8
39700: PUSH
39701: LD_VAR 0 7
39705: PUSH
39706: LD_VAR 0 9
39710: PLUS
39711: ST_TO_ADDR
// if k > array then
39712: LD_VAR 0 8
39716: PUSH
39717: LD_VAR 0 1
39721: GREATER
39722: IFFALSE 39732
// k := 1 ;
39724: LD_ADDR_VAR 0 8
39728: PUSH
39729: LD_INT 1
39731: ST_TO_ADDR
// if not k then
39732: LD_VAR 0 8
39736: NOT
39737: IFFALSE 39749
// k := array ;
39739: LD_ADDR_VAR 0 8
39743: PUSH
39744: LD_VAR 0 1
39748: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39749: LD_ADDR_VAR 0 10
39753: PUSH
39754: LD_VAR 0 10
39758: PPUSH
39759: LD_VAR 0 8
39763: PPUSH
39764: LD_VAR 0 1
39768: PUSH
39769: LD_VAR 0 7
39773: ARRAY
39774: PPUSH
39775: CALL_OW 1
39779: ST_TO_ADDR
// end ;
39780: GO 39693
39782: POP
39783: POP
// array := tmp ;
39784: LD_ADDR_VAR 0 1
39788: PUSH
39789: LD_VAR 0 10
39793: ST_TO_ADDR
// end ;
39794: GO 39675
39796: POP
39797: POP
// result := array ;
39798: LD_ADDR_VAR 0 5
39802: PUSH
39803: LD_VAR 0 1
39807: ST_TO_ADDR
// end ;
39808: LD_VAR 0 5
39812: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39813: LD_INT 0
39815: PPUSH
39816: PPUSH
// result := 0 ;
39817: LD_ADDR_VAR 0 3
39821: PUSH
39822: LD_INT 0
39824: ST_TO_ADDR
// if not array or not value in array then
39825: LD_VAR 0 1
39829: NOT
39830: PUSH
39831: LD_VAR 0 2
39835: PUSH
39836: LD_VAR 0 1
39840: IN
39841: NOT
39842: OR
39843: IFFALSE 39847
// exit ;
39845: GO 39901
// for i = 1 to array do
39847: LD_ADDR_VAR 0 4
39851: PUSH
39852: DOUBLE
39853: LD_INT 1
39855: DEC
39856: ST_TO_ADDR
39857: LD_VAR 0 1
39861: PUSH
39862: FOR_TO
39863: IFFALSE 39899
// if value = array [ i ] then
39865: LD_VAR 0 2
39869: PUSH
39870: LD_VAR 0 1
39874: PUSH
39875: LD_VAR 0 4
39879: ARRAY
39880: EQUAL
39881: IFFALSE 39897
// begin result := i ;
39883: LD_ADDR_VAR 0 3
39887: PUSH
39888: LD_VAR 0 4
39892: ST_TO_ADDR
// exit ;
39893: POP
39894: POP
39895: GO 39901
// end ;
39897: GO 39862
39899: POP
39900: POP
// end ;
39901: LD_VAR 0 3
39905: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39906: LD_INT 0
39908: PPUSH
// vc_chassis := chassis ;
39909: LD_ADDR_OWVAR 37
39913: PUSH
39914: LD_VAR 0 1
39918: ST_TO_ADDR
// vc_engine := engine ;
39919: LD_ADDR_OWVAR 39
39923: PUSH
39924: LD_VAR 0 2
39928: ST_TO_ADDR
// vc_control := control ;
39929: LD_ADDR_OWVAR 38
39933: PUSH
39934: LD_VAR 0 3
39938: ST_TO_ADDR
// vc_weapon := weapon ;
39939: LD_ADDR_OWVAR 40
39943: PUSH
39944: LD_VAR 0 4
39948: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39949: LD_ADDR_OWVAR 41
39953: PUSH
39954: LD_VAR 0 5
39958: ST_TO_ADDR
// end ;
39959: LD_VAR 0 6
39963: RET
// export function WantPlant ( unit ) ; var task ; begin
39964: LD_INT 0
39966: PPUSH
39967: PPUSH
// result := false ;
39968: LD_ADDR_VAR 0 2
39972: PUSH
39973: LD_INT 0
39975: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39976: LD_ADDR_VAR 0 3
39980: PUSH
39981: LD_VAR 0 1
39985: PPUSH
39986: CALL_OW 437
39990: ST_TO_ADDR
// if task then
39991: LD_VAR 0 3
39995: IFFALSE 40023
// if task [ 1 ] [ 1 ] = p then
39997: LD_VAR 0 3
40001: PUSH
40002: LD_INT 1
40004: ARRAY
40005: PUSH
40006: LD_INT 1
40008: ARRAY
40009: PUSH
40010: LD_STRING p
40012: EQUAL
40013: IFFALSE 40023
// result := true ;
40015: LD_ADDR_VAR 0 2
40019: PUSH
40020: LD_INT 1
40022: ST_TO_ADDR
// end ;
40023: LD_VAR 0 2
40027: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40028: LD_INT 0
40030: PPUSH
40031: PPUSH
40032: PPUSH
40033: PPUSH
// if pos < 1 then
40034: LD_VAR 0 2
40038: PUSH
40039: LD_INT 1
40041: LESS
40042: IFFALSE 40046
// exit ;
40044: GO 40349
// if pos = 1 then
40046: LD_VAR 0 2
40050: PUSH
40051: LD_INT 1
40053: EQUAL
40054: IFFALSE 40087
// result := Replace ( arr , pos [ 1 ] , value ) else
40056: LD_ADDR_VAR 0 4
40060: PUSH
40061: LD_VAR 0 1
40065: PPUSH
40066: LD_VAR 0 2
40070: PUSH
40071: LD_INT 1
40073: ARRAY
40074: PPUSH
40075: LD_VAR 0 3
40079: PPUSH
40080: CALL_OW 1
40084: ST_TO_ADDR
40085: GO 40349
// begin tmp := arr ;
40087: LD_ADDR_VAR 0 6
40091: PUSH
40092: LD_VAR 0 1
40096: ST_TO_ADDR
// s_arr := [ tmp ] ;
40097: LD_ADDR_VAR 0 7
40101: PUSH
40102: LD_VAR 0 6
40106: PUSH
40107: EMPTY
40108: LIST
40109: ST_TO_ADDR
// for i = 1 to pos - 1 do
40110: LD_ADDR_VAR 0 5
40114: PUSH
40115: DOUBLE
40116: LD_INT 1
40118: DEC
40119: ST_TO_ADDR
40120: LD_VAR 0 2
40124: PUSH
40125: LD_INT 1
40127: MINUS
40128: PUSH
40129: FOR_TO
40130: IFFALSE 40175
// begin tmp := tmp [ pos [ i ] ] ;
40132: LD_ADDR_VAR 0 6
40136: PUSH
40137: LD_VAR 0 6
40141: PUSH
40142: LD_VAR 0 2
40146: PUSH
40147: LD_VAR 0 5
40151: ARRAY
40152: ARRAY
40153: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40154: LD_ADDR_VAR 0 7
40158: PUSH
40159: LD_VAR 0 7
40163: PUSH
40164: LD_VAR 0 6
40168: PUSH
40169: EMPTY
40170: LIST
40171: ADD
40172: ST_TO_ADDR
// end ;
40173: GO 40129
40175: POP
40176: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40177: LD_ADDR_VAR 0 6
40181: PUSH
40182: LD_VAR 0 6
40186: PPUSH
40187: LD_VAR 0 2
40191: PUSH
40192: LD_VAR 0 2
40196: ARRAY
40197: PPUSH
40198: LD_VAR 0 3
40202: PPUSH
40203: CALL_OW 1
40207: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40208: LD_ADDR_VAR 0 7
40212: PUSH
40213: LD_VAR 0 7
40217: PPUSH
40218: LD_VAR 0 7
40222: PPUSH
40223: LD_VAR 0 6
40227: PPUSH
40228: CALL_OW 1
40232: ST_TO_ADDR
// for i = s_arr downto 2 do
40233: LD_ADDR_VAR 0 5
40237: PUSH
40238: DOUBLE
40239: LD_VAR 0 7
40243: INC
40244: ST_TO_ADDR
40245: LD_INT 2
40247: PUSH
40248: FOR_DOWNTO
40249: IFFALSE 40333
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40251: LD_ADDR_VAR 0 6
40255: PUSH
40256: LD_VAR 0 7
40260: PUSH
40261: LD_VAR 0 5
40265: PUSH
40266: LD_INT 1
40268: MINUS
40269: ARRAY
40270: PPUSH
40271: LD_VAR 0 2
40275: PUSH
40276: LD_VAR 0 5
40280: PUSH
40281: LD_INT 1
40283: MINUS
40284: ARRAY
40285: PPUSH
40286: LD_VAR 0 7
40290: PUSH
40291: LD_VAR 0 5
40295: ARRAY
40296: PPUSH
40297: CALL_OW 1
40301: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40302: LD_ADDR_VAR 0 7
40306: PUSH
40307: LD_VAR 0 7
40311: PPUSH
40312: LD_VAR 0 5
40316: PUSH
40317: LD_INT 1
40319: MINUS
40320: PPUSH
40321: LD_VAR 0 6
40325: PPUSH
40326: CALL_OW 1
40330: ST_TO_ADDR
// end ;
40331: GO 40248
40333: POP
40334: POP
// result := s_arr [ 1 ] ;
40335: LD_ADDR_VAR 0 4
40339: PUSH
40340: LD_VAR 0 7
40344: PUSH
40345: LD_INT 1
40347: ARRAY
40348: ST_TO_ADDR
// end ; end ;
40349: LD_VAR 0 4
40353: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40354: LD_INT 0
40356: PPUSH
40357: PPUSH
// if not list then
40358: LD_VAR 0 1
40362: NOT
40363: IFFALSE 40367
// exit ;
40365: GO 40458
// i := list [ pos1 ] ;
40367: LD_ADDR_VAR 0 5
40371: PUSH
40372: LD_VAR 0 1
40376: PUSH
40377: LD_VAR 0 2
40381: ARRAY
40382: ST_TO_ADDR
// if not i then
40383: LD_VAR 0 5
40387: NOT
40388: IFFALSE 40392
// exit ;
40390: GO 40458
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40392: LD_ADDR_VAR 0 1
40396: PUSH
40397: LD_VAR 0 1
40401: PPUSH
40402: LD_VAR 0 2
40406: PPUSH
40407: LD_VAR 0 1
40411: PUSH
40412: LD_VAR 0 3
40416: ARRAY
40417: PPUSH
40418: CALL_OW 1
40422: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40423: LD_ADDR_VAR 0 1
40427: PUSH
40428: LD_VAR 0 1
40432: PPUSH
40433: LD_VAR 0 3
40437: PPUSH
40438: LD_VAR 0 5
40442: PPUSH
40443: CALL_OW 1
40447: ST_TO_ADDR
// result := list ;
40448: LD_ADDR_VAR 0 4
40452: PUSH
40453: LD_VAR 0 1
40457: ST_TO_ADDR
// end ;
40458: LD_VAR 0 4
40462: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40463: LD_INT 0
40465: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40466: LD_ADDR_VAR 0 5
40470: PUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: CALL_OW 250
40480: PPUSH
40481: LD_VAR 0 1
40485: PPUSH
40486: CALL_OW 251
40490: PPUSH
40491: LD_VAR 0 2
40495: PPUSH
40496: LD_VAR 0 3
40500: PPUSH
40501: LD_VAR 0 4
40505: PPUSH
40506: CALL 40516 0 5
40510: ST_TO_ADDR
// end ;
40511: LD_VAR 0 5
40515: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40516: LD_INT 0
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
// if not list then
40522: LD_VAR 0 3
40526: NOT
40527: IFFALSE 40531
// exit ;
40529: GO 40919
// result := [ ] ;
40531: LD_ADDR_VAR 0 6
40535: PUSH
40536: EMPTY
40537: ST_TO_ADDR
// for i in list do
40538: LD_ADDR_VAR 0 7
40542: PUSH
40543: LD_VAR 0 3
40547: PUSH
40548: FOR_IN
40549: IFFALSE 40751
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40551: LD_ADDR_VAR 0 9
40555: PUSH
40556: LD_VAR 0 7
40560: PPUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: LD_VAR 0 2
40570: PPUSH
40571: CALL_OW 297
40575: ST_TO_ADDR
// if not result then
40576: LD_VAR 0 6
40580: NOT
40581: IFFALSE 40607
// result := [ [ i , tmp ] ] else
40583: LD_ADDR_VAR 0 6
40587: PUSH
40588: LD_VAR 0 7
40592: PUSH
40593: LD_VAR 0 9
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: EMPTY
40603: LIST
40604: ST_TO_ADDR
40605: GO 40749
// begin if result [ result ] [ 2 ] < tmp then
40607: LD_VAR 0 6
40611: PUSH
40612: LD_VAR 0 6
40616: ARRAY
40617: PUSH
40618: LD_INT 2
40620: ARRAY
40621: PUSH
40622: LD_VAR 0 9
40626: LESS
40627: IFFALSE 40669
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40629: LD_ADDR_VAR 0 6
40633: PUSH
40634: LD_VAR 0 6
40638: PPUSH
40639: LD_VAR 0 6
40643: PUSH
40644: LD_INT 1
40646: PLUS
40647: PPUSH
40648: LD_VAR 0 7
40652: PUSH
40653: LD_VAR 0 9
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PPUSH
40662: CALL_OW 2
40666: ST_TO_ADDR
40667: GO 40749
// for j = 1 to result do
40669: LD_ADDR_VAR 0 8
40673: PUSH
40674: DOUBLE
40675: LD_INT 1
40677: DEC
40678: ST_TO_ADDR
40679: LD_VAR 0 6
40683: PUSH
40684: FOR_TO
40685: IFFALSE 40747
// begin if tmp < result [ j ] [ 2 ] then
40687: LD_VAR 0 9
40691: PUSH
40692: LD_VAR 0 6
40696: PUSH
40697: LD_VAR 0 8
40701: ARRAY
40702: PUSH
40703: LD_INT 2
40705: ARRAY
40706: LESS
40707: IFFALSE 40745
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40709: LD_ADDR_VAR 0 6
40713: PUSH
40714: LD_VAR 0 6
40718: PPUSH
40719: LD_VAR 0 8
40723: PPUSH
40724: LD_VAR 0 7
40728: PUSH
40729: LD_VAR 0 9
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PPUSH
40738: CALL_OW 2
40742: ST_TO_ADDR
// break ;
40743: GO 40747
// end ; end ;
40745: GO 40684
40747: POP
40748: POP
// end ; end ;
40749: GO 40548
40751: POP
40752: POP
// if result and not asc then
40753: LD_VAR 0 6
40757: PUSH
40758: LD_VAR 0 4
40762: NOT
40763: AND
40764: IFFALSE 40839
// begin tmp := result ;
40766: LD_ADDR_VAR 0 9
40770: PUSH
40771: LD_VAR 0 6
40775: ST_TO_ADDR
// for i = tmp downto 1 do
40776: LD_ADDR_VAR 0 7
40780: PUSH
40781: DOUBLE
40782: LD_VAR 0 9
40786: INC
40787: ST_TO_ADDR
40788: LD_INT 1
40790: PUSH
40791: FOR_DOWNTO
40792: IFFALSE 40837
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40794: LD_ADDR_VAR 0 6
40798: PUSH
40799: LD_VAR 0 6
40803: PPUSH
40804: LD_VAR 0 9
40808: PUSH
40809: LD_VAR 0 7
40813: MINUS
40814: PUSH
40815: LD_INT 1
40817: PLUS
40818: PPUSH
40819: LD_VAR 0 9
40823: PUSH
40824: LD_VAR 0 7
40828: ARRAY
40829: PPUSH
40830: CALL_OW 1
40834: ST_TO_ADDR
40835: GO 40791
40837: POP
40838: POP
// end ; tmp := [ ] ;
40839: LD_ADDR_VAR 0 9
40843: PUSH
40844: EMPTY
40845: ST_TO_ADDR
// if mode then
40846: LD_VAR 0 5
40850: IFFALSE 40919
// begin for i = 1 to result do
40852: LD_ADDR_VAR 0 7
40856: PUSH
40857: DOUBLE
40858: LD_INT 1
40860: DEC
40861: ST_TO_ADDR
40862: LD_VAR 0 6
40866: PUSH
40867: FOR_TO
40868: IFFALSE 40907
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40870: LD_ADDR_VAR 0 9
40874: PUSH
40875: LD_VAR 0 9
40879: PPUSH
40880: LD_VAR 0 7
40884: PPUSH
40885: LD_VAR 0 6
40889: PUSH
40890: LD_VAR 0 7
40894: ARRAY
40895: PUSH
40896: LD_INT 1
40898: ARRAY
40899: PPUSH
40900: CALL_OW 1
40904: ST_TO_ADDR
40905: GO 40867
40907: POP
40908: POP
// result := tmp ;
40909: LD_ADDR_VAR 0 6
40913: PUSH
40914: LD_VAR 0 9
40918: ST_TO_ADDR
// end ; end ;
40919: LD_VAR 0 6
40923: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40924: LD_INT 0
40926: PPUSH
40927: PPUSH
40928: PPUSH
40929: PPUSH
40930: PPUSH
40931: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40932: LD_ADDR_VAR 0 5
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: ST_TO_ADDR
// if not x or not y then
40954: LD_VAR 0 2
40958: NOT
40959: PUSH
40960: LD_VAR 0 3
40964: NOT
40965: OR
40966: IFFALSE 40970
// exit ;
40968: GO 42620
// if not range then
40970: LD_VAR 0 4
40974: NOT
40975: IFFALSE 40985
// range := 10 ;
40977: LD_ADDR_VAR 0 4
40981: PUSH
40982: LD_INT 10
40984: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40985: LD_ADDR_VAR 0 8
40989: PUSH
40990: LD_INT 81
40992: PUSH
40993: LD_VAR 0 1
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 92
41004: PUSH
41005: LD_VAR 0 2
41009: PUSH
41010: LD_VAR 0 3
41014: PUSH
41015: LD_VAR 0 4
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 3
41028: PUSH
41029: LD_INT 21
41031: PUSH
41032: LD_INT 3
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: PPUSH
41048: CALL_OW 69
41052: ST_TO_ADDR
// if not tmp then
41053: LD_VAR 0 8
41057: NOT
41058: IFFALSE 41062
// exit ;
41060: GO 42620
// for i in tmp do
41062: LD_ADDR_VAR 0 6
41066: PUSH
41067: LD_VAR 0 8
41071: PUSH
41072: FOR_IN
41073: IFFALSE 42595
// begin points := [ 0 , 0 , 0 ] ;
41075: LD_ADDR_VAR 0 9
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: ST_TO_ADDR
// bpoints := 1 ;
41094: LD_ADDR_VAR 0 10
41098: PUSH
41099: LD_INT 1
41101: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41102: LD_VAR 0 6
41106: PPUSH
41107: CALL_OW 247
41111: PUSH
41112: LD_INT 1
41114: DOUBLE
41115: EQUAL
41116: IFTRUE 41120
41118: GO 41698
41120: POP
// begin if GetClass ( i ) = 1 then
41121: LD_VAR 0 6
41125: PPUSH
41126: CALL_OW 257
41130: PUSH
41131: LD_INT 1
41133: EQUAL
41134: IFFALSE 41155
// points := [ 10 , 5 , 3 ] ;
41136: LD_ADDR_VAR 0 9
41140: PUSH
41141: LD_INT 10
41143: PUSH
41144: LD_INT 5
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: LIST
41154: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41155: LD_VAR 0 6
41159: PPUSH
41160: CALL_OW 257
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: LD_INT 3
41170: PUSH
41171: LD_INT 4
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: IN
41179: IFFALSE 41200
// points := [ 3 , 2 , 1 ] ;
41181: LD_ADDR_VAR 0 9
41185: PUSH
41186: LD_INT 3
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41200: LD_VAR 0 6
41204: PPUSH
41205: CALL_OW 257
41209: PUSH
41210: LD_INT 5
41212: EQUAL
41213: IFFALSE 41234
// points := [ 130 , 5 , 2 ] ;
41215: LD_ADDR_VAR 0 9
41219: PUSH
41220: LD_INT 130
41222: PUSH
41223: LD_INT 5
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41234: LD_VAR 0 6
41238: PPUSH
41239: CALL_OW 257
41243: PUSH
41244: LD_INT 8
41246: EQUAL
41247: IFFALSE 41268
// points := [ 35 , 35 , 30 ] ;
41249: LD_ADDR_VAR 0 9
41253: PUSH
41254: LD_INT 35
41256: PUSH
41257: LD_INT 35
41259: PUSH
41260: LD_INT 30
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41268: LD_VAR 0 6
41272: PPUSH
41273: CALL_OW 257
41277: PUSH
41278: LD_INT 9
41280: EQUAL
41281: IFFALSE 41302
// points := [ 20 , 55 , 40 ] ;
41283: LD_ADDR_VAR 0 9
41287: PUSH
41288: LD_INT 20
41290: PUSH
41291: LD_INT 55
41293: PUSH
41294: LD_INT 40
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41302: LD_VAR 0 6
41306: PPUSH
41307: CALL_OW 257
41311: PUSH
41312: LD_INT 12
41314: PUSH
41315: LD_INT 16
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: IN
41322: IFFALSE 41343
// points := [ 5 , 3 , 2 ] ;
41324: LD_ADDR_VAR 0 9
41328: PUSH
41329: LD_INT 5
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41343: LD_VAR 0 6
41347: PPUSH
41348: CALL_OW 257
41352: PUSH
41353: LD_INT 17
41355: EQUAL
41356: IFFALSE 41377
// points := [ 100 , 50 , 75 ] ;
41358: LD_ADDR_VAR 0 9
41362: PUSH
41363: LD_INT 100
41365: PUSH
41366: LD_INT 50
41368: PUSH
41369: LD_INT 75
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: LIST
41376: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41377: LD_VAR 0 6
41381: PPUSH
41382: CALL_OW 257
41386: PUSH
41387: LD_INT 15
41389: EQUAL
41390: IFFALSE 41411
// points := [ 10 , 5 , 3 ] ;
41392: LD_ADDR_VAR 0 9
41396: PUSH
41397: LD_INT 10
41399: PUSH
41400: LD_INT 5
41402: PUSH
41403: LD_INT 3
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41411: LD_VAR 0 6
41415: PPUSH
41416: CALL_OW 257
41420: PUSH
41421: LD_INT 14
41423: EQUAL
41424: IFFALSE 41445
// points := [ 10 , 0 , 0 ] ;
41426: LD_ADDR_VAR 0 9
41430: PUSH
41431: LD_INT 10
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: LIST
41444: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41445: LD_VAR 0 6
41449: PPUSH
41450: CALL_OW 257
41454: PUSH
41455: LD_INT 11
41457: EQUAL
41458: IFFALSE 41479
// points := [ 30 , 10 , 5 ] ;
41460: LD_ADDR_VAR 0 9
41464: PUSH
41465: LD_INT 30
41467: PUSH
41468: LD_INT 10
41470: PUSH
41471: LD_INT 5
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: LIST
41478: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41479: LD_VAR 0 1
41483: PPUSH
41484: LD_INT 5
41486: PPUSH
41487: CALL_OW 321
41491: PUSH
41492: LD_INT 2
41494: EQUAL
41495: IFFALSE 41512
// bpoints := bpoints * 1.8 ;
41497: LD_ADDR_VAR 0 10
41501: PUSH
41502: LD_VAR 0 10
41506: PUSH
41507: LD_REAL  1.80000000000000E+0000
41510: MUL
41511: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41512: LD_VAR 0 6
41516: PPUSH
41517: CALL_OW 257
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 3
41530: PUSH
41531: LD_INT 4
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: IN
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: LD_INT 51
41548: PPUSH
41549: CALL_OW 321
41553: PUSH
41554: LD_INT 2
41556: EQUAL
41557: AND
41558: IFFALSE 41575
// bpoints := bpoints * 1.2 ;
41560: LD_ADDR_VAR 0 10
41564: PUSH
41565: LD_VAR 0 10
41569: PUSH
41570: LD_REAL  1.20000000000000E+0000
41573: MUL
41574: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41575: LD_VAR 0 6
41579: PPUSH
41580: CALL_OW 257
41584: PUSH
41585: LD_INT 5
41587: PUSH
41588: LD_INT 7
41590: PUSH
41591: LD_INT 9
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: LIST
41598: IN
41599: PUSH
41600: LD_VAR 0 1
41604: PPUSH
41605: LD_INT 52
41607: PPUSH
41608: CALL_OW 321
41612: PUSH
41613: LD_INT 2
41615: EQUAL
41616: AND
41617: IFFALSE 41634
// bpoints := bpoints * 1.5 ;
41619: LD_ADDR_VAR 0 10
41623: PUSH
41624: LD_VAR 0 10
41628: PUSH
41629: LD_REAL  1.50000000000000E+0000
41632: MUL
41633: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41634: LD_VAR 0 1
41638: PPUSH
41639: LD_INT 66
41641: PPUSH
41642: CALL_OW 321
41646: PUSH
41647: LD_INT 2
41649: EQUAL
41650: IFFALSE 41667
// bpoints := bpoints * 1.1 ;
41652: LD_ADDR_VAR 0 10
41656: PUSH
41657: LD_VAR 0 10
41661: PUSH
41662: LD_REAL  1.10000000000000E+0000
41665: MUL
41666: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41667: LD_ADDR_VAR 0 10
41671: PUSH
41672: LD_VAR 0 10
41676: PUSH
41677: LD_VAR 0 6
41681: PPUSH
41682: LD_INT 1
41684: PPUSH
41685: CALL_OW 259
41689: PUSH
41690: LD_REAL  1.15000000000000E+0000
41693: MUL
41694: MUL
41695: ST_TO_ADDR
// end ; unit_vehicle :
41696: GO 42524
41698: LD_INT 2
41700: DOUBLE
41701: EQUAL
41702: IFTRUE 41706
41704: GO 42512
41706: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41707: LD_VAR 0 6
41711: PPUSH
41712: CALL_OW 264
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: LD_INT 42
41722: PUSH
41723: LD_INT 24
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: IN
41731: IFFALSE 41752
// points := [ 25 , 5 , 3 ] ;
41733: LD_ADDR_VAR 0 9
41737: PUSH
41738: LD_INT 25
41740: PUSH
41741: LD_INT 5
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41752: LD_VAR 0 6
41756: PPUSH
41757: CALL_OW 264
41761: PUSH
41762: LD_INT 4
41764: PUSH
41765: LD_INT 43
41767: PUSH
41768: LD_INT 25
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: LIST
41775: IN
41776: IFFALSE 41797
// points := [ 40 , 15 , 5 ] ;
41778: LD_ADDR_VAR 0 9
41782: PUSH
41783: LD_INT 40
41785: PUSH
41786: LD_INT 15
41788: PUSH
41789: LD_INT 5
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41797: LD_VAR 0 6
41801: PPUSH
41802: CALL_OW 264
41806: PUSH
41807: LD_INT 3
41809: PUSH
41810: LD_INT 23
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: IN
41817: IFFALSE 41838
// points := [ 7 , 25 , 8 ] ;
41819: LD_ADDR_VAR 0 9
41823: PUSH
41824: LD_INT 7
41826: PUSH
41827: LD_INT 25
41829: PUSH
41830: LD_INT 8
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: LIST
41837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41838: LD_VAR 0 6
41842: PPUSH
41843: CALL_OW 264
41847: PUSH
41848: LD_INT 5
41850: PUSH
41851: LD_INT 27
41853: PUSH
41854: LD_INT 44
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: IN
41862: IFFALSE 41883
// points := [ 14 , 50 , 16 ] ;
41864: LD_ADDR_VAR 0 9
41868: PUSH
41869: LD_INT 14
41871: PUSH
41872: LD_INT 50
41874: PUSH
41875: LD_INT 16
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41883: LD_VAR 0 6
41887: PPUSH
41888: CALL_OW 264
41892: PUSH
41893: LD_INT 6
41895: PUSH
41896: LD_INT 46
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: IN
41903: IFFALSE 41924
// points := [ 32 , 120 , 70 ] ;
41905: LD_ADDR_VAR 0 9
41909: PUSH
41910: LD_INT 32
41912: PUSH
41913: LD_INT 120
41915: PUSH
41916: LD_INT 70
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41924: LD_VAR 0 6
41928: PPUSH
41929: CALL_OW 264
41933: PUSH
41934: LD_INT 7
41936: PUSH
41937: LD_INT 28
41939: PUSH
41940: LD_INT 45
41942: PUSH
41943: LD_INT 92
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: IN
41952: IFFALSE 41973
// points := [ 35 , 20 , 45 ] ;
41954: LD_ADDR_VAR 0 9
41958: PUSH
41959: LD_INT 35
41961: PUSH
41962: LD_INT 20
41964: PUSH
41965: LD_INT 45
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41973: LD_VAR 0 6
41977: PPUSH
41978: CALL_OW 264
41982: PUSH
41983: LD_INT 47
41985: PUSH
41986: EMPTY
41987: LIST
41988: IN
41989: IFFALSE 42010
// points := [ 67 , 45 , 75 ] ;
41991: LD_ADDR_VAR 0 9
41995: PUSH
41996: LD_INT 67
41998: PUSH
41999: LD_INT 45
42001: PUSH
42002: LD_INT 75
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: LIST
42009: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42010: LD_VAR 0 6
42014: PPUSH
42015: CALL_OW 264
42019: PUSH
42020: LD_INT 26
42022: PUSH
42023: EMPTY
42024: LIST
42025: IN
42026: IFFALSE 42047
// points := [ 120 , 30 , 80 ] ;
42028: LD_ADDR_VAR 0 9
42032: PUSH
42033: LD_INT 120
42035: PUSH
42036: LD_INT 30
42038: PUSH
42039: LD_INT 80
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: LIST
42046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42047: LD_VAR 0 6
42051: PPUSH
42052: CALL_OW 264
42056: PUSH
42057: LD_INT 22
42059: PUSH
42060: EMPTY
42061: LIST
42062: IN
42063: IFFALSE 42084
// points := [ 40 , 1 , 1 ] ;
42065: LD_ADDR_VAR 0 9
42069: PUSH
42070: LD_INT 40
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42084: LD_VAR 0 6
42088: PPUSH
42089: CALL_OW 264
42093: PUSH
42094: LD_INT 29
42096: PUSH
42097: EMPTY
42098: LIST
42099: IN
42100: IFFALSE 42121
// points := [ 70 , 200 , 400 ] ;
42102: LD_ADDR_VAR 0 9
42106: PUSH
42107: LD_INT 70
42109: PUSH
42110: LD_INT 200
42112: PUSH
42113: LD_INT 400
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: LIST
42120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42121: LD_VAR 0 6
42125: PPUSH
42126: CALL_OW 264
42130: PUSH
42131: LD_INT 14
42133: PUSH
42134: LD_INT 53
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: IN
42141: IFFALSE 42162
// points := [ 40 , 10 , 20 ] ;
42143: LD_ADDR_VAR 0 9
42147: PUSH
42148: LD_INT 40
42150: PUSH
42151: LD_INT 10
42153: PUSH
42154: LD_INT 20
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: LIST
42161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42162: LD_VAR 0 6
42166: PPUSH
42167: CALL_OW 264
42171: PUSH
42172: LD_INT 9
42174: PUSH
42175: EMPTY
42176: LIST
42177: IN
42178: IFFALSE 42199
// points := [ 5 , 70 , 20 ] ;
42180: LD_ADDR_VAR 0 9
42184: PUSH
42185: LD_INT 5
42187: PUSH
42188: LD_INT 70
42190: PUSH
42191: LD_INT 20
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42199: LD_VAR 0 6
42203: PPUSH
42204: CALL_OW 264
42208: PUSH
42209: LD_INT 10
42211: PUSH
42212: EMPTY
42213: LIST
42214: IN
42215: IFFALSE 42236
// points := [ 35 , 110 , 70 ] ;
42217: LD_ADDR_VAR 0 9
42221: PUSH
42222: LD_INT 35
42224: PUSH
42225: LD_INT 110
42227: PUSH
42228: LD_INT 70
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42236: LD_VAR 0 6
42240: PPUSH
42241: CALL_OW 265
42245: PUSH
42246: LD_INT 25
42248: EQUAL
42249: IFFALSE 42270
// points := [ 80 , 65 , 100 ] ;
42251: LD_ADDR_VAR 0 9
42255: PUSH
42256: LD_INT 80
42258: PUSH
42259: LD_INT 65
42261: PUSH
42262: LD_INT 100
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42270: LD_VAR 0 6
42274: PPUSH
42275: CALL_OW 263
42279: PUSH
42280: LD_INT 1
42282: EQUAL
42283: IFFALSE 42318
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42285: LD_ADDR_VAR 0 10
42289: PUSH
42290: LD_VAR 0 10
42294: PUSH
42295: LD_VAR 0 6
42299: PPUSH
42300: CALL_OW 311
42304: PPUSH
42305: LD_INT 3
42307: PPUSH
42308: CALL_OW 259
42312: PUSH
42313: LD_INT 4
42315: MUL
42316: MUL
42317: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42318: LD_VAR 0 6
42322: PPUSH
42323: CALL_OW 263
42327: PUSH
42328: LD_INT 2
42330: EQUAL
42331: IFFALSE 42382
// begin j := IsControledBy ( i ) ;
42333: LD_ADDR_VAR 0 7
42337: PUSH
42338: LD_VAR 0 6
42342: PPUSH
42343: CALL_OW 312
42347: ST_TO_ADDR
// if j then
42348: LD_VAR 0 7
42352: IFFALSE 42382
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42354: LD_ADDR_VAR 0 10
42358: PUSH
42359: LD_VAR 0 10
42363: PUSH
42364: LD_VAR 0 7
42368: PPUSH
42369: LD_INT 3
42371: PPUSH
42372: CALL_OW 259
42376: PUSH
42377: LD_INT 3
42379: MUL
42380: MUL
42381: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42382: LD_VAR 0 6
42386: PPUSH
42387: CALL_OW 264
42391: PUSH
42392: LD_INT 5
42394: PUSH
42395: LD_INT 6
42397: PUSH
42398: LD_INT 46
42400: PUSH
42401: LD_INT 44
42403: PUSH
42404: LD_INT 47
42406: PUSH
42407: LD_INT 45
42409: PUSH
42410: LD_INT 28
42412: PUSH
42413: LD_INT 7
42415: PUSH
42416: LD_INT 27
42418: PUSH
42419: LD_INT 29
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: IN
42434: PUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: LD_INT 52
42442: PPUSH
42443: CALL_OW 321
42447: PUSH
42448: LD_INT 2
42450: EQUAL
42451: AND
42452: IFFALSE 42469
// bpoints := bpoints * 1.2 ;
42454: LD_ADDR_VAR 0 10
42458: PUSH
42459: LD_VAR 0 10
42463: PUSH
42464: LD_REAL  1.20000000000000E+0000
42467: MUL
42468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42469: LD_VAR 0 6
42473: PPUSH
42474: CALL_OW 264
42478: PUSH
42479: LD_INT 6
42481: PUSH
42482: LD_INT 46
42484: PUSH
42485: LD_INT 47
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: IN
42493: IFFALSE 42510
// bpoints := bpoints * 1.2 ;
42495: LD_ADDR_VAR 0 10
42499: PUSH
42500: LD_VAR 0 10
42504: PUSH
42505: LD_REAL  1.20000000000000E+0000
42508: MUL
42509: ST_TO_ADDR
// end ; unit_building :
42510: GO 42524
42512: LD_INT 3
42514: DOUBLE
42515: EQUAL
42516: IFTRUE 42520
42518: GO 42523
42520: POP
// ; end ;
42521: GO 42524
42523: POP
// for j = 1 to 3 do
42524: LD_ADDR_VAR 0 7
42528: PUSH
42529: DOUBLE
42530: LD_INT 1
42532: DEC
42533: ST_TO_ADDR
42534: LD_INT 3
42536: PUSH
42537: FOR_TO
42538: IFFALSE 42591
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42540: LD_ADDR_VAR 0 5
42544: PUSH
42545: LD_VAR 0 5
42549: PPUSH
42550: LD_VAR 0 7
42554: PPUSH
42555: LD_VAR 0 5
42559: PUSH
42560: LD_VAR 0 7
42564: ARRAY
42565: PUSH
42566: LD_VAR 0 9
42570: PUSH
42571: LD_VAR 0 7
42575: ARRAY
42576: PUSH
42577: LD_VAR 0 10
42581: MUL
42582: PLUS
42583: PPUSH
42584: CALL_OW 1
42588: ST_TO_ADDR
42589: GO 42537
42591: POP
42592: POP
// end ;
42593: GO 41072
42595: POP
42596: POP
// result := Replace ( result , 4 , tmp ) ;
42597: LD_ADDR_VAR 0 5
42601: PUSH
42602: LD_VAR 0 5
42606: PPUSH
42607: LD_INT 4
42609: PPUSH
42610: LD_VAR 0 8
42614: PPUSH
42615: CALL_OW 1
42619: ST_TO_ADDR
// end ;
42620: LD_VAR 0 5
42624: RET
// export function DangerAtRange ( unit , range ) ; begin
42625: LD_INT 0
42627: PPUSH
// if not unit then
42628: LD_VAR 0 1
42632: NOT
42633: IFFALSE 42637
// exit ;
42635: GO 42682
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42637: LD_ADDR_VAR 0 3
42641: PUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: CALL_OW 255
42651: PPUSH
42652: LD_VAR 0 1
42656: PPUSH
42657: CALL_OW 250
42661: PPUSH
42662: LD_VAR 0 1
42666: PPUSH
42667: CALL_OW 251
42671: PPUSH
42672: LD_VAR 0 2
42676: PPUSH
42677: CALL 40924 0 4
42681: ST_TO_ADDR
// end ;
42682: LD_VAR 0 3
42686: RET
// export function DangerInArea ( side , area ) ; begin
42687: LD_INT 0
42689: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42690: LD_ADDR_VAR 0 3
42694: PUSH
42695: LD_VAR 0 2
42699: PPUSH
42700: LD_INT 81
42702: PUSH
42703: LD_VAR 0 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PPUSH
42712: CALL_OW 70
42716: ST_TO_ADDR
// end ;
42717: LD_VAR 0 3
42721: RET
// export function IsExtension ( b ) ; begin
42722: LD_INT 0
42724: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42725: LD_ADDR_VAR 0 2
42729: PUSH
42730: LD_VAR 0 1
42734: PUSH
42735: LD_INT 23
42737: PUSH
42738: LD_INT 20
42740: PUSH
42741: LD_INT 22
42743: PUSH
42744: LD_INT 17
42746: PUSH
42747: LD_INT 24
42749: PUSH
42750: LD_INT 21
42752: PUSH
42753: LD_INT 19
42755: PUSH
42756: LD_INT 16
42758: PUSH
42759: LD_INT 25
42761: PUSH
42762: LD_INT 18
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: IN
42777: ST_TO_ADDR
// end ;
42778: LD_VAR 0 2
42782: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42783: LD_INT 0
42785: PPUSH
42786: PPUSH
42787: PPUSH
// result := [ ] ;
42788: LD_ADDR_VAR 0 4
42792: PUSH
42793: EMPTY
42794: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42795: LD_ADDR_VAR 0 5
42799: PUSH
42800: LD_VAR 0 2
42804: PPUSH
42805: LD_INT 21
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PPUSH
42815: CALL_OW 70
42819: ST_TO_ADDR
// if not tmp then
42820: LD_VAR 0 5
42824: NOT
42825: IFFALSE 42829
// exit ;
42827: GO 42893
// if checkLink then
42829: LD_VAR 0 3
42833: IFFALSE 42883
// begin for i in tmp do
42835: LD_ADDR_VAR 0 6
42839: PUSH
42840: LD_VAR 0 5
42844: PUSH
42845: FOR_IN
42846: IFFALSE 42881
// if GetBase ( i ) <> base then
42848: LD_VAR 0 6
42852: PPUSH
42853: CALL_OW 274
42857: PUSH
42858: LD_VAR 0 1
42862: NONEQUAL
42863: IFFALSE 42879
// ComLinkToBase ( base , i ) ;
42865: LD_VAR 0 1
42869: PPUSH
42870: LD_VAR 0 6
42874: PPUSH
42875: CALL_OW 169
42879: GO 42845
42881: POP
42882: POP
// end ; result := tmp ;
42883: LD_ADDR_VAR 0 4
42887: PUSH
42888: LD_VAR 0 5
42892: ST_TO_ADDR
// end ;
42893: LD_VAR 0 4
42897: RET
// export function ComComplete ( units , b ) ; var i ; begin
42898: LD_INT 0
42900: PPUSH
42901: PPUSH
// if not units then
42902: LD_VAR 0 1
42906: NOT
42907: IFFALSE 42911
// exit ;
42909: GO 43001
// for i in units do
42911: LD_ADDR_VAR 0 4
42915: PUSH
42916: LD_VAR 0 1
42920: PUSH
42921: FOR_IN
42922: IFFALSE 42999
// if BuildingStatus ( b ) = bs_build then
42924: LD_VAR 0 2
42928: PPUSH
42929: CALL_OW 461
42933: PUSH
42934: LD_INT 1
42936: EQUAL
42937: IFFALSE 42997
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42939: LD_VAR 0 4
42943: PPUSH
42944: LD_STRING h
42946: PUSH
42947: LD_VAR 0 2
42951: PPUSH
42952: CALL_OW 250
42956: PUSH
42957: LD_VAR 0 2
42961: PPUSH
42962: CALL_OW 251
42966: PUSH
42967: LD_VAR 0 2
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: PUSH
42990: EMPTY
42991: LIST
42992: PPUSH
42993: CALL_OW 446
42997: GO 42921
42999: POP
43000: POP
// end ;
43001: LD_VAR 0 3
43005: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43006: LD_INT 0
43008: PPUSH
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
43013: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43014: LD_VAR 0 1
43018: NOT
43019: PUSH
43020: LD_VAR 0 1
43024: PPUSH
43025: CALL_OW 263
43029: PUSH
43030: LD_INT 2
43032: NONEQUAL
43033: OR
43034: IFFALSE 43038
// exit ;
43036: GO 43354
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43038: LD_ADDR_VAR 0 6
43042: PUSH
43043: LD_INT 22
43045: PUSH
43046: LD_VAR 0 1
43050: PPUSH
43051: CALL_OW 255
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: LD_INT 30
43065: PUSH
43066: LD_INT 36
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 34
43075: PUSH
43076: LD_INT 31
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PPUSH
43092: CALL_OW 69
43096: ST_TO_ADDR
// if not tmp then
43097: LD_VAR 0 6
43101: NOT
43102: IFFALSE 43106
// exit ;
43104: GO 43354
// result := [ ] ;
43106: LD_ADDR_VAR 0 2
43110: PUSH
43111: EMPTY
43112: ST_TO_ADDR
// for i in tmp do
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_VAR 0 6
43122: PUSH
43123: FOR_IN
43124: IFFALSE 43195
// begin t := UnitsInside ( i ) ;
43126: LD_ADDR_VAR 0 4
43130: PUSH
43131: LD_VAR 0 3
43135: PPUSH
43136: CALL_OW 313
43140: ST_TO_ADDR
// if t then
43141: LD_VAR 0 4
43145: IFFALSE 43193
// for j in t do
43147: LD_ADDR_VAR 0 7
43151: PUSH
43152: LD_VAR 0 4
43156: PUSH
43157: FOR_IN
43158: IFFALSE 43191
// result := Replace ( result , result + 1 , j ) ;
43160: LD_ADDR_VAR 0 2
43164: PUSH
43165: LD_VAR 0 2
43169: PPUSH
43170: LD_VAR 0 2
43174: PUSH
43175: LD_INT 1
43177: PLUS
43178: PPUSH
43179: LD_VAR 0 7
43183: PPUSH
43184: CALL_OW 1
43188: ST_TO_ADDR
43189: GO 43157
43191: POP
43192: POP
// end ;
43193: GO 43123
43195: POP
43196: POP
// if not result then
43197: LD_VAR 0 2
43201: NOT
43202: IFFALSE 43206
// exit ;
43204: GO 43354
// mech := result [ 1 ] ;
43206: LD_ADDR_VAR 0 5
43210: PUSH
43211: LD_VAR 0 2
43215: PUSH
43216: LD_INT 1
43218: ARRAY
43219: ST_TO_ADDR
// if result > 1 then
43220: LD_VAR 0 2
43224: PUSH
43225: LD_INT 1
43227: GREATER
43228: IFFALSE 43340
// begin for i = 2 to result do
43230: LD_ADDR_VAR 0 3
43234: PUSH
43235: DOUBLE
43236: LD_INT 2
43238: DEC
43239: ST_TO_ADDR
43240: LD_VAR 0 2
43244: PUSH
43245: FOR_TO
43246: IFFALSE 43338
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43248: LD_ADDR_VAR 0 4
43252: PUSH
43253: LD_VAR 0 2
43257: PUSH
43258: LD_VAR 0 3
43262: ARRAY
43263: PPUSH
43264: LD_INT 3
43266: PPUSH
43267: CALL_OW 259
43271: PUSH
43272: LD_VAR 0 2
43276: PUSH
43277: LD_VAR 0 3
43281: ARRAY
43282: PPUSH
43283: CALL_OW 432
43287: MINUS
43288: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43289: LD_VAR 0 4
43293: PUSH
43294: LD_VAR 0 5
43298: PPUSH
43299: LD_INT 3
43301: PPUSH
43302: CALL_OW 259
43306: PUSH
43307: LD_VAR 0 5
43311: PPUSH
43312: CALL_OW 432
43316: MINUS
43317: GREATEREQUAL
43318: IFFALSE 43336
// mech := result [ i ] ;
43320: LD_ADDR_VAR 0 5
43324: PUSH
43325: LD_VAR 0 2
43329: PUSH
43330: LD_VAR 0 3
43334: ARRAY
43335: ST_TO_ADDR
// end ;
43336: GO 43245
43338: POP
43339: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43340: LD_VAR 0 1
43344: PPUSH
43345: LD_VAR 0 5
43349: PPUSH
43350: CALL_OW 135
// end ;
43354: LD_VAR 0 2
43358: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43359: LD_INT 0
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
// result := [ ] ;
43374: LD_ADDR_VAR 0 7
43378: PUSH
43379: EMPTY
43380: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43381: LD_VAR 0 1
43385: PPUSH
43386: CALL_OW 266
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: IN
43401: NOT
43402: IFFALSE 43406
// exit ;
43404: GO 45040
// if name then
43406: LD_VAR 0 3
43410: IFFALSE 43426
// SetBName ( base_dep , name ) ;
43412: LD_VAR 0 1
43416: PPUSH
43417: LD_VAR 0 3
43421: PPUSH
43422: CALL_OW 500
// base := GetBase ( base_dep ) ;
43426: LD_ADDR_VAR 0 15
43430: PUSH
43431: LD_VAR 0 1
43435: PPUSH
43436: CALL_OW 274
43440: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43441: LD_ADDR_VAR 0 16
43445: PUSH
43446: LD_VAR 0 1
43450: PPUSH
43451: CALL_OW 255
43455: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43456: LD_ADDR_VAR 0 17
43460: PUSH
43461: LD_VAR 0 1
43465: PPUSH
43466: CALL_OW 248
43470: ST_TO_ADDR
// if sources then
43471: LD_VAR 0 5
43475: IFFALSE 43522
// for i = 1 to 3 do
43477: LD_ADDR_VAR 0 8
43481: PUSH
43482: DOUBLE
43483: LD_INT 1
43485: DEC
43486: ST_TO_ADDR
43487: LD_INT 3
43489: PUSH
43490: FOR_TO
43491: IFFALSE 43520
// AddResourceType ( base , i , sources [ i ] ) ;
43493: LD_VAR 0 15
43497: PPUSH
43498: LD_VAR 0 8
43502: PPUSH
43503: LD_VAR 0 5
43507: PUSH
43508: LD_VAR 0 8
43512: ARRAY
43513: PPUSH
43514: CALL_OW 276
43518: GO 43490
43520: POP
43521: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43522: LD_ADDR_VAR 0 18
43526: PUSH
43527: LD_VAR 0 15
43531: PPUSH
43532: LD_VAR 0 2
43536: PPUSH
43537: LD_INT 1
43539: PPUSH
43540: CALL 42783 0 3
43544: ST_TO_ADDR
// InitHc ;
43545: CALL_OW 19
// InitUc ;
43549: CALL_OW 18
// uc_side := side ;
43553: LD_ADDR_OWVAR 20
43557: PUSH
43558: LD_VAR 0 16
43562: ST_TO_ADDR
// uc_nation := nation ;
43563: LD_ADDR_OWVAR 21
43567: PUSH
43568: LD_VAR 0 17
43572: ST_TO_ADDR
// if buildings then
43573: LD_VAR 0 18
43577: IFFALSE 44899
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43579: LD_ADDR_VAR 0 19
43583: PUSH
43584: LD_VAR 0 18
43588: PPUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 30
43594: PUSH
43595: LD_INT 29
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 30
43604: PUSH
43605: LD_INT 30
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: LIST
43616: PPUSH
43617: CALL_OW 72
43621: ST_TO_ADDR
// if tmp then
43622: LD_VAR 0 19
43626: IFFALSE 43674
// for i in tmp do
43628: LD_ADDR_VAR 0 8
43632: PUSH
43633: LD_VAR 0 19
43637: PUSH
43638: FOR_IN
43639: IFFALSE 43672
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43641: LD_VAR 0 8
43645: PPUSH
43646: CALL_OW 250
43650: PPUSH
43651: LD_VAR 0 8
43655: PPUSH
43656: CALL_OW 251
43660: PPUSH
43661: LD_VAR 0 16
43665: PPUSH
43666: CALL_OW 441
43670: GO 43638
43672: POP
43673: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43674: LD_VAR 0 18
43678: PPUSH
43679: LD_INT 2
43681: PUSH
43682: LD_INT 30
43684: PUSH
43685: LD_INT 32
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 30
43694: PUSH
43695: LD_INT 33
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: PPUSH
43707: CALL_OW 72
43711: IFFALSE 43799
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43713: LD_ADDR_VAR 0 8
43717: PUSH
43718: LD_VAR 0 18
43722: PPUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 30
43728: PUSH
43729: LD_INT 32
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 30
43738: PUSH
43739: LD_INT 33
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: PPUSH
43751: CALL_OW 72
43755: PUSH
43756: FOR_IN
43757: IFFALSE 43797
// begin if not GetBWeapon ( i ) then
43759: LD_VAR 0 8
43763: PPUSH
43764: CALL_OW 269
43768: NOT
43769: IFFALSE 43795
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43771: LD_VAR 0 8
43775: PPUSH
43776: LD_VAR 0 8
43780: PPUSH
43781: LD_VAR 0 2
43785: PPUSH
43786: CALL 45045 0 2
43790: PPUSH
43791: CALL_OW 431
// end ;
43795: GO 43756
43797: POP
43798: POP
// end ; for i = 1 to personel do
43799: LD_ADDR_VAR 0 8
43803: PUSH
43804: DOUBLE
43805: LD_INT 1
43807: DEC
43808: ST_TO_ADDR
43809: LD_VAR 0 6
43813: PUSH
43814: FOR_TO
43815: IFFALSE 44879
// begin if i > 4 then
43817: LD_VAR 0 8
43821: PUSH
43822: LD_INT 4
43824: GREATER
43825: IFFALSE 43829
// break ;
43827: GO 44879
// case i of 1 :
43829: LD_VAR 0 8
43833: PUSH
43834: LD_INT 1
43836: DOUBLE
43837: EQUAL
43838: IFTRUE 43842
43840: GO 43922
43842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43843: LD_ADDR_VAR 0 12
43847: PUSH
43848: LD_VAR 0 18
43852: PPUSH
43853: LD_INT 22
43855: PUSH
43856: LD_VAR 0 16
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 58
43867: PUSH
43868: EMPTY
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 30
43876: PUSH
43877: LD_INT 32
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 30
43886: PUSH
43887: LD_INT 4
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 30
43896: PUSH
43897: LD_INT 5
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: PPUSH
43915: CALL_OW 72
43919: ST_TO_ADDR
43920: GO 44144
43922: LD_INT 2
43924: DOUBLE
43925: EQUAL
43926: IFTRUE 43930
43928: GO 43992
43930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43931: LD_ADDR_VAR 0 12
43935: PUSH
43936: LD_VAR 0 18
43940: PPUSH
43941: LD_INT 22
43943: PUSH
43944: LD_VAR 0 16
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 30
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 30
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: LIST
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PPUSH
43985: CALL_OW 72
43989: ST_TO_ADDR
43990: GO 44144
43992: LD_INT 3
43994: DOUBLE
43995: EQUAL
43996: IFTRUE 44000
43998: GO 44062
44000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44001: LD_ADDR_VAR 0 12
44005: PUSH
44006: LD_VAR 0 18
44010: PPUSH
44011: LD_INT 22
44013: PUSH
44014: LD_VAR 0 16
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 30
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 30
44038: PUSH
44039: LD_INT 3
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: LIST
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PPUSH
44055: CALL_OW 72
44059: ST_TO_ADDR
44060: GO 44144
44062: LD_INT 4
44064: DOUBLE
44065: EQUAL
44066: IFTRUE 44070
44068: GO 44143
44070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44071: LD_ADDR_VAR 0 12
44075: PUSH
44076: LD_VAR 0 18
44080: PPUSH
44081: LD_INT 22
44083: PUSH
44084: LD_VAR 0 16
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 30
44098: PUSH
44099: LD_INT 6
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 30
44108: PUSH
44109: LD_INT 7
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 30
44118: PUSH
44119: LD_INT 8
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PPUSH
44136: CALL_OW 72
44140: ST_TO_ADDR
44141: GO 44144
44143: POP
// if i = 1 then
44144: LD_VAR 0 8
44148: PUSH
44149: LD_INT 1
44151: EQUAL
44152: IFFALSE 44263
// begin tmp := [ ] ;
44154: LD_ADDR_VAR 0 19
44158: PUSH
44159: EMPTY
44160: ST_TO_ADDR
// for j in f do
44161: LD_ADDR_VAR 0 9
44165: PUSH
44166: LD_VAR 0 12
44170: PUSH
44171: FOR_IN
44172: IFFALSE 44245
// if GetBType ( j ) = b_bunker then
44174: LD_VAR 0 9
44178: PPUSH
44179: CALL_OW 266
44183: PUSH
44184: LD_INT 32
44186: EQUAL
44187: IFFALSE 44214
// tmp := Insert ( tmp , 1 , j ) else
44189: LD_ADDR_VAR 0 19
44193: PUSH
44194: LD_VAR 0 19
44198: PPUSH
44199: LD_INT 1
44201: PPUSH
44202: LD_VAR 0 9
44206: PPUSH
44207: CALL_OW 2
44211: ST_TO_ADDR
44212: GO 44243
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44214: LD_ADDR_VAR 0 19
44218: PUSH
44219: LD_VAR 0 19
44223: PPUSH
44224: LD_VAR 0 19
44228: PUSH
44229: LD_INT 1
44231: PLUS
44232: PPUSH
44233: LD_VAR 0 9
44237: PPUSH
44238: CALL_OW 2
44242: ST_TO_ADDR
44243: GO 44171
44245: POP
44246: POP
// if tmp then
44247: LD_VAR 0 19
44251: IFFALSE 44263
// f := tmp ;
44253: LD_ADDR_VAR 0 12
44257: PUSH
44258: LD_VAR 0 19
44262: ST_TO_ADDR
// end ; x := personel [ i ] ;
44263: LD_ADDR_VAR 0 13
44267: PUSH
44268: LD_VAR 0 6
44272: PUSH
44273: LD_VAR 0 8
44277: ARRAY
44278: ST_TO_ADDR
// if x = - 1 then
44279: LD_VAR 0 13
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: EQUAL
44288: IFFALSE 44497
// begin for j in f do
44290: LD_ADDR_VAR 0 9
44294: PUSH
44295: LD_VAR 0 12
44299: PUSH
44300: FOR_IN
44301: IFFALSE 44493
// repeat InitHc ;
44303: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44307: LD_VAR 0 9
44311: PPUSH
44312: CALL_OW 266
44316: PUSH
44317: LD_INT 5
44319: EQUAL
44320: IFFALSE 44390
// begin if UnitsInside ( j ) < 3 then
44322: LD_VAR 0 9
44326: PPUSH
44327: CALL_OW 313
44331: PUSH
44332: LD_INT 3
44334: LESS
44335: IFFALSE 44371
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44337: LD_INT 0
44339: PPUSH
44340: LD_INT 5
44342: PUSH
44343: LD_INT 8
44345: PUSH
44346: LD_INT 9
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: PUSH
44354: LD_VAR 0 17
44358: ARRAY
44359: PPUSH
44360: LD_VAR 0 4
44364: PPUSH
44365: CALL_OW 380
44369: GO 44388
// PrepareHuman ( false , i , skill ) ;
44371: LD_INT 0
44373: PPUSH
44374: LD_VAR 0 8
44378: PPUSH
44379: LD_VAR 0 4
44383: PPUSH
44384: CALL_OW 380
// end else
44388: GO 44407
// PrepareHuman ( false , i , skill ) ;
44390: LD_INT 0
44392: PPUSH
44393: LD_VAR 0 8
44397: PPUSH
44398: LD_VAR 0 4
44402: PPUSH
44403: CALL_OW 380
// un := CreateHuman ;
44407: LD_ADDR_VAR 0 14
44411: PUSH
44412: CALL_OW 44
44416: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44417: LD_ADDR_VAR 0 7
44421: PUSH
44422: LD_VAR 0 7
44426: PPUSH
44427: LD_INT 1
44429: PPUSH
44430: LD_VAR 0 14
44434: PPUSH
44435: CALL_OW 2
44439: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44440: LD_VAR 0 14
44444: PPUSH
44445: LD_VAR 0 9
44449: PPUSH
44450: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44454: LD_VAR 0 9
44458: PPUSH
44459: CALL_OW 313
44463: PUSH
44464: LD_INT 6
44466: EQUAL
44467: PUSH
44468: LD_VAR 0 9
44472: PPUSH
44473: CALL_OW 266
44477: PUSH
44478: LD_INT 32
44480: PUSH
44481: LD_INT 31
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: IN
44488: OR
44489: IFFALSE 44303
44491: GO 44300
44493: POP
44494: POP
// end else
44495: GO 44877
// for j = 1 to x do
44497: LD_ADDR_VAR 0 9
44501: PUSH
44502: DOUBLE
44503: LD_INT 1
44505: DEC
44506: ST_TO_ADDR
44507: LD_VAR 0 13
44511: PUSH
44512: FOR_TO
44513: IFFALSE 44875
// begin InitHc ;
44515: CALL_OW 19
// if not f then
44519: LD_VAR 0 12
44523: NOT
44524: IFFALSE 44613
// begin PrepareHuman ( false , i , skill ) ;
44526: LD_INT 0
44528: PPUSH
44529: LD_VAR 0 8
44533: PPUSH
44534: LD_VAR 0 4
44538: PPUSH
44539: CALL_OW 380
// un := CreateHuman ;
44543: LD_ADDR_VAR 0 14
44547: PUSH
44548: CALL_OW 44
44552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44553: LD_ADDR_VAR 0 7
44557: PUSH
44558: LD_VAR 0 7
44562: PPUSH
44563: LD_INT 1
44565: PPUSH
44566: LD_VAR 0 14
44570: PPUSH
44571: CALL_OW 2
44575: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44576: LD_VAR 0 14
44580: PPUSH
44581: LD_VAR 0 1
44585: PPUSH
44586: CALL_OW 250
44590: PPUSH
44591: LD_VAR 0 1
44595: PPUSH
44596: CALL_OW 251
44600: PPUSH
44601: LD_INT 10
44603: PPUSH
44604: LD_INT 0
44606: PPUSH
44607: CALL_OW 50
// continue ;
44611: GO 44512
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44613: LD_VAR 0 12
44617: PUSH
44618: LD_INT 1
44620: ARRAY
44621: PPUSH
44622: CALL_OW 313
44626: PUSH
44627: LD_VAR 0 12
44631: PUSH
44632: LD_INT 1
44634: ARRAY
44635: PPUSH
44636: CALL_OW 266
44640: PUSH
44641: LD_INT 32
44643: PUSH
44644: LD_INT 31
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: IN
44651: AND
44652: PUSH
44653: LD_VAR 0 12
44657: PUSH
44658: LD_INT 1
44660: ARRAY
44661: PPUSH
44662: CALL_OW 313
44666: PUSH
44667: LD_INT 6
44669: EQUAL
44670: OR
44671: IFFALSE 44691
// f := Delete ( f , 1 ) ;
44673: LD_ADDR_VAR 0 12
44677: PUSH
44678: LD_VAR 0 12
44682: PPUSH
44683: LD_INT 1
44685: PPUSH
44686: CALL_OW 3
44690: ST_TO_ADDR
// if not f then
44691: LD_VAR 0 12
44695: NOT
44696: IFFALSE 44714
// begin x := x + 2 ;
44698: LD_ADDR_VAR 0 13
44702: PUSH
44703: LD_VAR 0 13
44707: PUSH
44708: LD_INT 2
44710: PLUS
44711: ST_TO_ADDR
// continue ;
44712: GO 44512
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44714: LD_VAR 0 12
44718: PUSH
44719: LD_INT 1
44721: ARRAY
44722: PPUSH
44723: CALL_OW 266
44727: PUSH
44728: LD_INT 5
44730: EQUAL
44731: IFFALSE 44805
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44733: LD_VAR 0 12
44737: PUSH
44738: LD_INT 1
44740: ARRAY
44741: PPUSH
44742: CALL_OW 313
44746: PUSH
44747: LD_INT 3
44749: LESS
44750: IFFALSE 44786
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44752: LD_INT 0
44754: PPUSH
44755: LD_INT 5
44757: PUSH
44758: LD_INT 8
44760: PUSH
44761: LD_INT 9
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: PUSH
44769: LD_VAR 0 17
44773: ARRAY
44774: PPUSH
44775: LD_VAR 0 4
44779: PPUSH
44780: CALL_OW 380
44784: GO 44803
// PrepareHuman ( false , i , skill ) ;
44786: LD_INT 0
44788: PPUSH
44789: LD_VAR 0 8
44793: PPUSH
44794: LD_VAR 0 4
44798: PPUSH
44799: CALL_OW 380
// end else
44803: GO 44822
// PrepareHuman ( false , i , skill ) ;
44805: LD_INT 0
44807: PPUSH
44808: LD_VAR 0 8
44812: PPUSH
44813: LD_VAR 0 4
44817: PPUSH
44818: CALL_OW 380
// un := CreateHuman ;
44822: LD_ADDR_VAR 0 14
44826: PUSH
44827: CALL_OW 44
44831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44832: LD_ADDR_VAR 0 7
44836: PUSH
44837: LD_VAR 0 7
44841: PPUSH
44842: LD_INT 1
44844: PPUSH
44845: LD_VAR 0 14
44849: PPUSH
44850: CALL_OW 2
44854: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44855: LD_VAR 0 14
44859: PPUSH
44860: LD_VAR 0 12
44864: PUSH
44865: LD_INT 1
44867: ARRAY
44868: PPUSH
44869: CALL_OW 52
// end ;
44873: GO 44512
44875: POP
44876: POP
// end ;
44877: GO 43814
44879: POP
44880: POP
// result := result ^ buildings ;
44881: LD_ADDR_VAR 0 7
44885: PUSH
44886: LD_VAR 0 7
44890: PUSH
44891: LD_VAR 0 18
44895: ADD
44896: ST_TO_ADDR
// end else
44897: GO 45040
// begin for i = 1 to personel do
44899: LD_ADDR_VAR 0 8
44903: PUSH
44904: DOUBLE
44905: LD_INT 1
44907: DEC
44908: ST_TO_ADDR
44909: LD_VAR 0 6
44913: PUSH
44914: FOR_TO
44915: IFFALSE 45038
// begin if i > 4 then
44917: LD_VAR 0 8
44921: PUSH
44922: LD_INT 4
44924: GREATER
44925: IFFALSE 44929
// break ;
44927: GO 45038
// x := personel [ i ] ;
44929: LD_ADDR_VAR 0 13
44933: PUSH
44934: LD_VAR 0 6
44938: PUSH
44939: LD_VAR 0 8
44943: ARRAY
44944: ST_TO_ADDR
// if x = - 1 then
44945: LD_VAR 0 13
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: EQUAL
44954: IFFALSE 44958
// continue ;
44956: GO 44914
// PrepareHuman ( false , i , skill ) ;
44958: LD_INT 0
44960: PPUSH
44961: LD_VAR 0 8
44965: PPUSH
44966: LD_VAR 0 4
44970: PPUSH
44971: CALL_OW 380
// un := CreateHuman ;
44975: LD_ADDR_VAR 0 14
44979: PUSH
44980: CALL_OW 44
44984: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44985: LD_VAR 0 14
44989: PPUSH
44990: LD_VAR 0 1
44994: PPUSH
44995: CALL_OW 250
44999: PPUSH
45000: LD_VAR 0 1
45004: PPUSH
45005: CALL_OW 251
45009: PPUSH
45010: LD_INT 10
45012: PPUSH
45013: LD_INT 0
45015: PPUSH
45016: CALL_OW 50
// result := result ^ un ;
45020: LD_ADDR_VAR 0 7
45024: PUSH
45025: LD_VAR 0 7
45029: PUSH
45030: LD_VAR 0 14
45034: ADD
45035: ST_TO_ADDR
// end ;
45036: GO 44914
45038: POP
45039: POP
// end ; end ;
45040: LD_VAR 0 7
45044: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45045: LD_INT 0
45047: PPUSH
45048: PPUSH
45049: PPUSH
45050: PPUSH
45051: PPUSH
45052: PPUSH
45053: PPUSH
45054: PPUSH
45055: PPUSH
45056: PPUSH
45057: PPUSH
45058: PPUSH
45059: PPUSH
45060: PPUSH
45061: PPUSH
45062: PPUSH
// result := false ;
45063: LD_ADDR_VAR 0 3
45067: PUSH
45068: LD_INT 0
45070: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45071: LD_VAR 0 1
45075: NOT
45076: PUSH
45077: LD_VAR 0 1
45081: PPUSH
45082: CALL_OW 266
45086: PUSH
45087: LD_INT 32
45089: PUSH
45090: LD_INT 33
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: IN
45097: NOT
45098: OR
45099: IFFALSE 45103
// exit ;
45101: GO 46212
// nat := GetNation ( tower ) ;
45103: LD_ADDR_VAR 0 12
45107: PUSH
45108: LD_VAR 0 1
45112: PPUSH
45113: CALL_OW 248
45117: ST_TO_ADDR
// side := GetSide ( tower ) ;
45118: LD_ADDR_VAR 0 16
45122: PUSH
45123: LD_VAR 0 1
45127: PPUSH
45128: CALL_OW 255
45132: ST_TO_ADDR
// x := GetX ( tower ) ;
45133: LD_ADDR_VAR 0 10
45137: PUSH
45138: LD_VAR 0 1
45142: PPUSH
45143: CALL_OW 250
45147: ST_TO_ADDR
// y := GetY ( tower ) ;
45148: LD_ADDR_VAR 0 11
45152: PUSH
45153: LD_VAR 0 1
45157: PPUSH
45158: CALL_OW 251
45162: ST_TO_ADDR
// if not x or not y then
45163: LD_VAR 0 10
45167: NOT
45168: PUSH
45169: LD_VAR 0 11
45173: NOT
45174: OR
45175: IFFALSE 45179
// exit ;
45177: GO 46212
// weapon := 0 ;
45179: LD_ADDR_VAR 0 18
45183: PUSH
45184: LD_INT 0
45186: ST_TO_ADDR
// fac_list := [ ] ;
45187: LD_ADDR_VAR 0 17
45191: PUSH
45192: EMPTY
45193: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45194: LD_ADDR_VAR 0 6
45198: PUSH
45199: LD_VAR 0 1
45203: PPUSH
45204: CALL_OW 274
45208: PPUSH
45209: LD_VAR 0 2
45213: PPUSH
45214: LD_INT 0
45216: PPUSH
45217: CALL 42783 0 3
45221: PPUSH
45222: LD_INT 30
45224: PUSH
45225: LD_INT 3
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PPUSH
45232: CALL_OW 72
45236: ST_TO_ADDR
// if not factories then
45237: LD_VAR 0 6
45241: NOT
45242: IFFALSE 45246
// exit ;
45244: GO 46212
// for i in factories do
45246: LD_ADDR_VAR 0 8
45250: PUSH
45251: LD_VAR 0 6
45255: PUSH
45256: FOR_IN
45257: IFFALSE 45282
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45259: LD_ADDR_VAR 0 17
45263: PUSH
45264: LD_VAR 0 17
45268: PUSH
45269: LD_VAR 0 8
45273: PPUSH
45274: CALL_OW 478
45278: UNION
45279: ST_TO_ADDR
45280: GO 45256
45282: POP
45283: POP
// if not fac_list then
45284: LD_VAR 0 17
45288: NOT
45289: IFFALSE 45293
// exit ;
45291: GO 46212
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45293: LD_ADDR_VAR 0 5
45297: PUSH
45298: LD_INT 4
45300: PUSH
45301: LD_INT 5
45303: PUSH
45304: LD_INT 9
45306: PUSH
45307: LD_INT 10
45309: PUSH
45310: LD_INT 6
45312: PUSH
45313: LD_INT 7
45315: PUSH
45316: LD_INT 11
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 27
45330: PUSH
45331: LD_INT 28
45333: PUSH
45334: LD_INT 26
45336: PUSH
45337: LD_INT 30
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 43
45348: PUSH
45349: LD_INT 44
45351: PUSH
45352: LD_INT 46
45354: PUSH
45355: LD_INT 45
45357: PUSH
45358: LD_INT 47
45360: PUSH
45361: LD_INT 49
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: PUSH
45377: LD_VAR 0 12
45381: ARRAY
45382: ST_TO_ADDR
// list := list isect fac_list ;
45383: LD_ADDR_VAR 0 5
45387: PUSH
45388: LD_VAR 0 5
45392: PUSH
45393: LD_VAR 0 17
45397: ISECT
45398: ST_TO_ADDR
// if not list then
45399: LD_VAR 0 5
45403: NOT
45404: IFFALSE 45408
// exit ;
45406: GO 46212
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45408: LD_VAR 0 12
45412: PUSH
45413: LD_INT 3
45415: EQUAL
45416: PUSH
45417: LD_INT 49
45419: PUSH
45420: LD_VAR 0 5
45424: IN
45425: AND
45426: PUSH
45427: LD_INT 31
45429: PPUSH
45430: LD_VAR 0 16
45434: PPUSH
45435: CALL_OW 321
45439: PUSH
45440: LD_INT 2
45442: EQUAL
45443: AND
45444: IFFALSE 45504
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45446: LD_INT 22
45448: PUSH
45449: LD_VAR 0 16
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 35
45460: PUSH
45461: LD_INT 49
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 91
45470: PUSH
45471: LD_VAR 0 1
45475: PUSH
45476: LD_INT 10
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: LIST
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: PPUSH
45489: CALL_OW 69
45493: NOT
45494: IFFALSE 45504
// weapon := ru_time_lapser ;
45496: LD_ADDR_VAR 0 18
45500: PUSH
45501: LD_INT 49
45503: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45504: LD_VAR 0 12
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: IN
45519: PUSH
45520: LD_INT 11
45522: PUSH
45523: LD_VAR 0 5
45527: IN
45528: PUSH
45529: LD_INT 30
45531: PUSH
45532: LD_VAR 0 5
45536: IN
45537: OR
45538: AND
45539: PUSH
45540: LD_INT 6
45542: PPUSH
45543: LD_VAR 0 16
45547: PPUSH
45548: CALL_OW 321
45552: PUSH
45553: LD_INT 2
45555: EQUAL
45556: AND
45557: IFFALSE 45722
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45559: LD_INT 22
45561: PUSH
45562: LD_VAR 0 16
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 35
45576: PUSH
45577: LD_INT 11
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 35
45586: PUSH
45587: LD_INT 30
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 91
45601: PUSH
45602: LD_VAR 0 1
45606: PUSH
45607: LD_INT 18
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: PPUSH
45620: CALL_OW 69
45624: NOT
45625: PUSH
45626: LD_INT 22
45628: PUSH
45629: LD_VAR 0 16
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: LD_INT 30
45643: PUSH
45644: LD_INT 32
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 30
45653: PUSH
45654: LD_INT 33
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 91
45668: PUSH
45669: LD_VAR 0 1
45673: PUSH
45674: LD_INT 12
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: PUSH
45687: EMPTY
45688: LIST
45689: PPUSH
45690: CALL_OW 69
45694: PUSH
45695: LD_INT 2
45697: GREATER
45698: AND
45699: IFFALSE 45722
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45701: LD_ADDR_VAR 0 18
45705: PUSH
45706: LD_INT 11
45708: PUSH
45709: LD_INT 30
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_VAR 0 12
45720: ARRAY
45721: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45722: LD_VAR 0 18
45726: NOT
45727: PUSH
45728: LD_INT 40
45730: PPUSH
45731: LD_VAR 0 16
45735: PPUSH
45736: CALL_OW 321
45740: PUSH
45741: LD_INT 2
45743: EQUAL
45744: AND
45745: PUSH
45746: LD_INT 7
45748: PUSH
45749: LD_VAR 0 5
45753: IN
45754: PUSH
45755: LD_INT 28
45757: PUSH
45758: LD_VAR 0 5
45762: IN
45763: OR
45764: PUSH
45765: LD_INT 45
45767: PUSH
45768: LD_VAR 0 5
45772: IN
45773: OR
45774: AND
45775: IFFALSE 46029
// begin hex := GetHexInfo ( x , y ) ;
45777: LD_ADDR_VAR 0 4
45781: PUSH
45782: LD_VAR 0 10
45786: PPUSH
45787: LD_VAR 0 11
45791: PPUSH
45792: CALL_OW 546
45796: ST_TO_ADDR
// if hex [ 1 ] then
45797: LD_VAR 0 4
45801: PUSH
45802: LD_INT 1
45804: ARRAY
45805: IFFALSE 45809
// exit ;
45807: GO 46212
// height := hex [ 2 ] ;
45809: LD_ADDR_VAR 0 15
45813: PUSH
45814: LD_VAR 0 4
45818: PUSH
45819: LD_INT 2
45821: ARRAY
45822: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45823: LD_ADDR_VAR 0 14
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: LD_INT 3
45836: PUSH
45837: LD_INT 5
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: ST_TO_ADDR
// for i in tmp do
45846: LD_ADDR_VAR 0 8
45850: PUSH
45851: LD_VAR 0 14
45855: PUSH
45856: FOR_IN
45857: IFFALSE 46027
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45859: LD_ADDR_VAR 0 9
45863: PUSH
45864: LD_VAR 0 10
45868: PPUSH
45869: LD_VAR 0 8
45873: PPUSH
45874: LD_INT 5
45876: PPUSH
45877: CALL_OW 272
45881: PUSH
45882: LD_VAR 0 11
45886: PPUSH
45887: LD_VAR 0 8
45891: PPUSH
45892: LD_INT 5
45894: PPUSH
45895: CALL_OW 273
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45904: LD_VAR 0 9
45908: PUSH
45909: LD_INT 1
45911: ARRAY
45912: PPUSH
45913: LD_VAR 0 9
45917: PUSH
45918: LD_INT 2
45920: ARRAY
45921: PPUSH
45922: CALL_OW 488
45926: IFFALSE 46025
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45928: LD_ADDR_VAR 0 4
45932: PUSH
45933: LD_VAR 0 9
45937: PUSH
45938: LD_INT 1
45940: ARRAY
45941: PPUSH
45942: LD_VAR 0 9
45946: PUSH
45947: LD_INT 2
45949: ARRAY
45950: PPUSH
45951: CALL_OW 546
45955: ST_TO_ADDR
// if hex [ 1 ] then
45956: LD_VAR 0 4
45960: PUSH
45961: LD_INT 1
45963: ARRAY
45964: IFFALSE 45968
// continue ;
45966: GO 45856
// h := hex [ 2 ] ;
45968: LD_ADDR_VAR 0 13
45972: PUSH
45973: LD_VAR 0 4
45977: PUSH
45978: LD_INT 2
45980: ARRAY
45981: ST_TO_ADDR
// if h + 7 < height then
45982: LD_VAR 0 13
45986: PUSH
45987: LD_INT 7
45989: PLUS
45990: PUSH
45991: LD_VAR 0 15
45995: LESS
45996: IFFALSE 46025
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45998: LD_ADDR_VAR 0 18
46002: PUSH
46003: LD_INT 7
46005: PUSH
46006: LD_INT 28
46008: PUSH
46009: LD_INT 45
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: PUSH
46017: LD_VAR 0 12
46021: ARRAY
46022: ST_TO_ADDR
// break ;
46023: GO 46027
// end ; end ; end ;
46025: GO 45856
46027: POP
46028: POP
// end ; if not weapon then
46029: LD_VAR 0 18
46033: NOT
46034: IFFALSE 46094
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46036: LD_ADDR_VAR 0 5
46040: PUSH
46041: LD_VAR 0 5
46045: PUSH
46046: LD_INT 11
46048: PUSH
46049: LD_INT 30
46051: PUSH
46052: LD_INT 49
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: DIFF
46060: ST_TO_ADDR
// if not list then
46061: LD_VAR 0 5
46065: NOT
46066: IFFALSE 46070
// exit ;
46068: GO 46212
// weapon := list [ rand ( 1 , list ) ] ;
46070: LD_ADDR_VAR 0 18
46074: PUSH
46075: LD_VAR 0 5
46079: PUSH
46080: LD_INT 1
46082: PPUSH
46083: LD_VAR 0 5
46087: PPUSH
46088: CALL_OW 12
46092: ARRAY
46093: ST_TO_ADDR
// end ; if weapon then
46094: LD_VAR 0 18
46098: IFFALSE 46212
// begin tmp := CostOfWeapon ( weapon ) ;
46100: LD_ADDR_VAR 0 14
46104: PUSH
46105: LD_VAR 0 18
46109: PPUSH
46110: CALL_OW 451
46114: ST_TO_ADDR
// j := GetBase ( tower ) ;
46115: LD_ADDR_VAR 0 9
46119: PUSH
46120: LD_VAR 0 1
46124: PPUSH
46125: CALL_OW 274
46129: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46130: LD_VAR 0 9
46134: PPUSH
46135: LD_INT 1
46137: PPUSH
46138: CALL_OW 275
46142: PUSH
46143: LD_VAR 0 14
46147: PUSH
46148: LD_INT 1
46150: ARRAY
46151: GREATEREQUAL
46152: PUSH
46153: LD_VAR 0 9
46157: PPUSH
46158: LD_INT 2
46160: PPUSH
46161: CALL_OW 275
46165: PUSH
46166: LD_VAR 0 14
46170: PUSH
46171: LD_INT 2
46173: ARRAY
46174: GREATEREQUAL
46175: AND
46176: PUSH
46177: LD_VAR 0 9
46181: PPUSH
46182: LD_INT 3
46184: PPUSH
46185: CALL_OW 275
46189: PUSH
46190: LD_VAR 0 14
46194: PUSH
46195: LD_INT 3
46197: ARRAY
46198: GREATEREQUAL
46199: AND
46200: IFFALSE 46212
// result := weapon ;
46202: LD_ADDR_VAR 0 3
46206: PUSH
46207: LD_VAR 0 18
46211: ST_TO_ADDR
// end ; end ;
46212: LD_VAR 0 3
46216: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46217: LD_INT 0
46219: PPUSH
46220: PPUSH
// result := true ;
46221: LD_ADDR_VAR 0 3
46225: PUSH
46226: LD_INT 1
46228: ST_TO_ADDR
// if array1 = array2 then
46229: LD_VAR 0 1
46233: PUSH
46234: LD_VAR 0 2
46238: EQUAL
46239: IFFALSE 46299
// begin for i = 1 to array1 do
46241: LD_ADDR_VAR 0 4
46245: PUSH
46246: DOUBLE
46247: LD_INT 1
46249: DEC
46250: ST_TO_ADDR
46251: LD_VAR 0 1
46255: PUSH
46256: FOR_TO
46257: IFFALSE 46295
// if array1 [ i ] <> array2 [ i ] then
46259: LD_VAR 0 1
46263: PUSH
46264: LD_VAR 0 4
46268: ARRAY
46269: PUSH
46270: LD_VAR 0 2
46274: PUSH
46275: LD_VAR 0 4
46279: ARRAY
46280: NONEQUAL
46281: IFFALSE 46293
// begin result := false ;
46283: LD_ADDR_VAR 0 3
46287: PUSH
46288: LD_INT 0
46290: ST_TO_ADDR
// break ;
46291: GO 46295
// end ;
46293: GO 46256
46295: POP
46296: POP
// end else
46297: GO 46307
// result := false ;
46299: LD_ADDR_VAR 0 3
46303: PUSH
46304: LD_INT 0
46306: ST_TO_ADDR
// end ;
46307: LD_VAR 0 3
46311: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46312: LD_INT 0
46314: PPUSH
46315: PPUSH
// if not array1 or not array2 then
46316: LD_VAR 0 1
46320: NOT
46321: PUSH
46322: LD_VAR 0 2
46326: NOT
46327: OR
46328: IFFALSE 46332
// exit ;
46330: GO 46396
// result := true ;
46332: LD_ADDR_VAR 0 3
46336: PUSH
46337: LD_INT 1
46339: ST_TO_ADDR
// for i = 1 to array1 do
46340: LD_ADDR_VAR 0 4
46344: PUSH
46345: DOUBLE
46346: LD_INT 1
46348: DEC
46349: ST_TO_ADDR
46350: LD_VAR 0 1
46354: PUSH
46355: FOR_TO
46356: IFFALSE 46394
// if array1 [ i ] <> array2 [ i ] then
46358: LD_VAR 0 1
46362: PUSH
46363: LD_VAR 0 4
46367: ARRAY
46368: PUSH
46369: LD_VAR 0 2
46373: PUSH
46374: LD_VAR 0 4
46378: ARRAY
46379: NONEQUAL
46380: IFFALSE 46392
// begin result := false ;
46382: LD_ADDR_VAR 0 3
46386: PUSH
46387: LD_INT 0
46389: ST_TO_ADDR
// break ;
46390: GO 46394
// end ;
46392: GO 46355
46394: POP
46395: POP
// end ;
46396: LD_VAR 0 3
46400: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46401: LD_INT 0
46403: PPUSH
46404: PPUSH
46405: PPUSH
// pom := GetBase ( fac ) ;
46406: LD_ADDR_VAR 0 5
46410: PUSH
46411: LD_VAR 0 1
46415: PPUSH
46416: CALL_OW 274
46420: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46421: LD_ADDR_VAR 0 4
46425: PUSH
46426: LD_VAR 0 2
46430: PUSH
46431: LD_INT 1
46433: ARRAY
46434: PPUSH
46435: LD_VAR 0 2
46439: PUSH
46440: LD_INT 2
46442: ARRAY
46443: PPUSH
46444: LD_VAR 0 2
46448: PUSH
46449: LD_INT 3
46451: ARRAY
46452: PPUSH
46453: LD_VAR 0 2
46457: PUSH
46458: LD_INT 4
46460: ARRAY
46461: PPUSH
46462: CALL_OW 449
46466: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46467: LD_ADDR_VAR 0 3
46471: PUSH
46472: LD_VAR 0 5
46476: PPUSH
46477: LD_INT 1
46479: PPUSH
46480: CALL_OW 275
46484: PUSH
46485: LD_VAR 0 4
46489: PUSH
46490: LD_INT 1
46492: ARRAY
46493: GREATEREQUAL
46494: PUSH
46495: LD_VAR 0 5
46499: PPUSH
46500: LD_INT 2
46502: PPUSH
46503: CALL_OW 275
46507: PUSH
46508: LD_VAR 0 4
46512: PUSH
46513: LD_INT 2
46515: ARRAY
46516: GREATEREQUAL
46517: AND
46518: PUSH
46519: LD_VAR 0 5
46523: PPUSH
46524: LD_INT 3
46526: PPUSH
46527: CALL_OW 275
46531: PUSH
46532: LD_VAR 0 4
46536: PUSH
46537: LD_INT 3
46539: ARRAY
46540: GREATEREQUAL
46541: AND
46542: ST_TO_ADDR
// end ;
46543: LD_VAR 0 3
46547: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46548: LD_INT 0
46550: PPUSH
46551: PPUSH
46552: PPUSH
46553: PPUSH
// pom := GetBase ( building ) ;
46554: LD_ADDR_VAR 0 3
46558: PUSH
46559: LD_VAR 0 1
46563: PPUSH
46564: CALL_OW 274
46568: ST_TO_ADDR
// if not pom then
46569: LD_VAR 0 3
46573: NOT
46574: IFFALSE 46578
// exit ;
46576: GO 46748
// btype := GetBType ( building ) ;
46578: LD_ADDR_VAR 0 5
46582: PUSH
46583: LD_VAR 0 1
46587: PPUSH
46588: CALL_OW 266
46592: ST_TO_ADDR
// if btype = b_armoury then
46593: LD_VAR 0 5
46597: PUSH
46598: LD_INT 4
46600: EQUAL
46601: IFFALSE 46611
// btype := b_barracks ;
46603: LD_ADDR_VAR 0 5
46607: PUSH
46608: LD_INT 5
46610: ST_TO_ADDR
// if btype = b_depot then
46611: LD_VAR 0 5
46615: PUSH
46616: LD_INT 0
46618: EQUAL
46619: IFFALSE 46629
// btype := b_warehouse ;
46621: LD_ADDR_VAR 0 5
46625: PUSH
46626: LD_INT 1
46628: ST_TO_ADDR
// if btype = b_workshop then
46629: LD_VAR 0 5
46633: PUSH
46634: LD_INT 2
46636: EQUAL
46637: IFFALSE 46647
// btype := b_factory ;
46639: LD_ADDR_VAR 0 5
46643: PUSH
46644: LD_INT 3
46646: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46647: LD_ADDR_VAR 0 4
46651: PUSH
46652: LD_VAR 0 5
46656: PPUSH
46657: LD_VAR 0 1
46661: PPUSH
46662: CALL_OW 248
46666: PPUSH
46667: CALL_OW 450
46671: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46672: LD_ADDR_VAR 0 2
46676: PUSH
46677: LD_VAR 0 3
46681: PPUSH
46682: LD_INT 1
46684: PPUSH
46685: CALL_OW 275
46689: PUSH
46690: LD_VAR 0 4
46694: PUSH
46695: LD_INT 1
46697: ARRAY
46698: GREATEREQUAL
46699: PUSH
46700: LD_VAR 0 3
46704: PPUSH
46705: LD_INT 2
46707: PPUSH
46708: CALL_OW 275
46712: PUSH
46713: LD_VAR 0 4
46717: PUSH
46718: LD_INT 2
46720: ARRAY
46721: GREATEREQUAL
46722: AND
46723: PUSH
46724: LD_VAR 0 3
46728: PPUSH
46729: LD_INT 3
46731: PPUSH
46732: CALL_OW 275
46736: PUSH
46737: LD_VAR 0 4
46741: PUSH
46742: LD_INT 3
46744: ARRAY
46745: GREATEREQUAL
46746: AND
46747: ST_TO_ADDR
// end ;
46748: LD_VAR 0 2
46752: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46753: LD_INT 0
46755: PPUSH
46756: PPUSH
46757: PPUSH
// pom := GetBase ( building ) ;
46758: LD_ADDR_VAR 0 4
46762: PUSH
46763: LD_VAR 0 1
46767: PPUSH
46768: CALL_OW 274
46772: ST_TO_ADDR
// if not pom then
46773: LD_VAR 0 4
46777: NOT
46778: IFFALSE 46782
// exit ;
46780: GO 46883
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46782: LD_ADDR_VAR 0 5
46786: PUSH
46787: LD_VAR 0 2
46791: PPUSH
46792: LD_VAR 0 1
46796: PPUSH
46797: CALL_OW 248
46801: PPUSH
46802: CALL_OW 450
46806: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46807: LD_ADDR_VAR 0 3
46811: PUSH
46812: LD_VAR 0 4
46816: PPUSH
46817: LD_INT 1
46819: PPUSH
46820: CALL_OW 275
46824: PUSH
46825: LD_VAR 0 5
46829: PUSH
46830: LD_INT 1
46832: ARRAY
46833: GREATEREQUAL
46834: PUSH
46835: LD_VAR 0 4
46839: PPUSH
46840: LD_INT 2
46842: PPUSH
46843: CALL_OW 275
46847: PUSH
46848: LD_VAR 0 5
46852: PUSH
46853: LD_INT 2
46855: ARRAY
46856: GREATEREQUAL
46857: AND
46858: PUSH
46859: LD_VAR 0 4
46863: PPUSH
46864: LD_INT 3
46866: PPUSH
46867: CALL_OW 275
46871: PUSH
46872: LD_VAR 0 5
46876: PUSH
46877: LD_INT 3
46879: ARRAY
46880: GREATEREQUAL
46881: AND
46882: ST_TO_ADDR
// end ;
46883: LD_VAR 0 3
46887: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46888: LD_INT 0
46890: PPUSH
46891: PPUSH
46892: PPUSH
46893: PPUSH
46894: PPUSH
46895: PPUSH
46896: PPUSH
46897: PPUSH
46898: PPUSH
46899: PPUSH
46900: PPUSH
// result := false ;
46901: LD_ADDR_VAR 0 8
46905: PUSH
46906: LD_INT 0
46908: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46909: LD_VAR 0 5
46913: NOT
46914: PUSH
46915: LD_VAR 0 1
46919: NOT
46920: OR
46921: PUSH
46922: LD_VAR 0 2
46926: NOT
46927: OR
46928: PUSH
46929: LD_VAR 0 3
46933: NOT
46934: OR
46935: IFFALSE 46939
// exit ;
46937: GO 47753
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46939: LD_ADDR_VAR 0 14
46943: PUSH
46944: LD_VAR 0 1
46948: PPUSH
46949: LD_VAR 0 2
46953: PPUSH
46954: LD_VAR 0 3
46958: PPUSH
46959: LD_VAR 0 4
46963: PPUSH
46964: LD_VAR 0 5
46968: PUSH
46969: LD_INT 1
46971: ARRAY
46972: PPUSH
46973: CALL_OW 248
46977: PPUSH
46978: LD_INT 0
46980: PPUSH
46981: CALL 49006 0 6
46985: ST_TO_ADDR
// if not hexes then
46986: LD_VAR 0 14
46990: NOT
46991: IFFALSE 46995
// exit ;
46993: GO 47753
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46995: LD_ADDR_VAR 0 17
46999: PUSH
47000: LD_VAR 0 5
47004: PPUSH
47005: LD_INT 22
47007: PUSH
47008: LD_VAR 0 13
47012: PPUSH
47013: CALL_OW 255
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 30
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 30
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PPUSH
47054: CALL_OW 72
47058: ST_TO_ADDR
// for i = 1 to hexes do
47059: LD_ADDR_VAR 0 9
47063: PUSH
47064: DOUBLE
47065: LD_INT 1
47067: DEC
47068: ST_TO_ADDR
47069: LD_VAR 0 14
47073: PUSH
47074: FOR_TO
47075: IFFALSE 47751
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47077: LD_ADDR_VAR 0 13
47081: PUSH
47082: LD_VAR 0 14
47086: PUSH
47087: LD_VAR 0 9
47091: ARRAY
47092: PUSH
47093: LD_INT 1
47095: ARRAY
47096: PPUSH
47097: LD_VAR 0 14
47101: PUSH
47102: LD_VAR 0 9
47106: ARRAY
47107: PUSH
47108: LD_INT 2
47110: ARRAY
47111: PPUSH
47112: CALL_OW 428
47116: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47117: LD_VAR 0 14
47121: PUSH
47122: LD_VAR 0 9
47126: ARRAY
47127: PUSH
47128: LD_INT 1
47130: ARRAY
47131: PPUSH
47132: LD_VAR 0 14
47136: PUSH
47137: LD_VAR 0 9
47141: ARRAY
47142: PUSH
47143: LD_INT 2
47145: ARRAY
47146: PPUSH
47147: CALL_OW 351
47151: PUSH
47152: LD_VAR 0 14
47156: PUSH
47157: LD_VAR 0 9
47161: ARRAY
47162: PUSH
47163: LD_INT 1
47165: ARRAY
47166: PPUSH
47167: LD_VAR 0 14
47171: PUSH
47172: LD_VAR 0 9
47176: ARRAY
47177: PUSH
47178: LD_INT 2
47180: ARRAY
47181: PPUSH
47182: CALL_OW 488
47186: NOT
47187: OR
47188: PUSH
47189: LD_VAR 0 13
47193: PPUSH
47194: CALL_OW 247
47198: PUSH
47199: LD_INT 3
47201: EQUAL
47202: OR
47203: IFFALSE 47209
// exit ;
47205: POP
47206: POP
47207: GO 47753
// if not tmp then
47209: LD_VAR 0 13
47213: NOT
47214: IFFALSE 47218
// continue ;
47216: GO 47074
// result := true ;
47218: LD_ADDR_VAR 0 8
47222: PUSH
47223: LD_INT 1
47225: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47226: LD_VAR 0 6
47230: PUSH
47231: LD_VAR 0 13
47235: PPUSH
47236: CALL_OW 247
47240: PUSH
47241: LD_INT 2
47243: EQUAL
47244: AND
47245: PUSH
47246: LD_VAR 0 13
47250: PPUSH
47251: CALL_OW 263
47255: PUSH
47256: LD_INT 1
47258: EQUAL
47259: AND
47260: IFFALSE 47424
// begin if IsDrivenBy ( tmp ) then
47262: LD_VAR 0 13
47266: PPUSH
47267: CALL_OW 311
47271: IFFALSE 47275
// continue ;
47273: GO 47074
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47275: LD_VAR 0 6
47279: PPUSH
47280: LD_INT 3
47282: PUSH
47283: LD_INT 60
47285: PUSH
47286: EMPTY
47287: LIST
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: LD_INT 55
47298: PUSH
47299: EMPTY
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PPUSH
47310: CALL_OW 72
47314: IFFALSE 47422
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47316: LD_ADDR_VAR 0 18
47320: PUSH
47321: LD_VAR 0 6
47325: PPUSH
47326: LD_INT 3
47328: PUSH
47329: LD_INT 60
47331: PUSH
47332: EMPTY
47333: LIST
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: LD_INT 55
47344: PUSH
47345: EMPTY
47346: LIST
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PPUSH
47356: CALL_OW 72
47360: PUSH
47361: LD_INT 1
47363: ARRAY
47364: ST_TO_ADDR
// if IsInUnit ( driver ) then
47365: LD_VAR 0 18
47369: PPUSH
47370: CALL_OW 310
47374: IFFALSE 47385
// ComExit ( driver ) ;
47376: LD_VAR 0 18
47380: PPUSH
47381: CALL 72785 0 1
// AddComEnterUnit ( driver , tmp ) ;
47385: LD_VAR 0 18
47389: PPUSH
47390: LD_VAR 0 13
47394: PPUSH
47395: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47399: LD_VAR 0 18
47403: PPUSH
47404: LD_VAR 0 7
47408: PPUSH
47409: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47413: LD_VAR 0 18
47417: PPUSH
47418: CALL_OW 181
// end ; continue ;
47422: GO 47074
// end ; if not cleaners or not tmp in cleaners then
47424: LD_VAR 0 6
47428: NOT
47429: PUSH
47430: LD_VAR 0 13
47434: PUSH
47435: LD_VAR 0 6
47439: IN
47440: NOT
47441: OR
47442: IFFALSE 47749
// begin if dep then
47444: LD_VAR 0 17
47448: IFFALSE 47584
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47450: LD_ADDR_VAR 0 16
47454: PUSH
47455: LD_VAR 0 17
47459: PUSH
47460: LD_INT 1
47462: ARRAY
47463: PPUSH
47464: CALL_OW 250
47468: PPUSH
47469: LD_VAR 0 17
47473: PUSH
47474: LD_INT 1
47476: ARRAY
47477: PPUSH
47478: CALL_OW 254
47482: PPUSH
47483: LD_INT 5
47485: PPUSH
47486: CALL_OW 272
47490: PUSH
47491: LD_VAR 0 17
47495: PUSH
47496: LD_INT 1
47498: ARRAY
47499: PPUSH
47500: CALL_OW 251
47504: PPUSH
47505: LD_VAR 0 17
47509: PUSH
47510: LD_INT 1
47512: ARRAY
47513: PPUSH
47514: CALL_OW 254
47518: PPUSH
47519: LD_INT 5
47521: PPUSH
47522: CALL_OW 273
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47531: LD_VAR 0 16
47535: PUSH
47536: LD_INT 1
47538: ARRAY
47539: PPUSH
47540: LD_VAR 0 16
47544: PUSH
47545: LD_INT 2
47547: ARRAY
47548: PPUSH
47549: CALL_OW 488
47553: IFFALSE 47584
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47555: LD_VAR 0 13
47559: PPUSH
47560: LD_VAR 0 16
47564: PUSH
47565: LD_INT 1
47567: ARRAY
47568: PPUSH
47569: LD_VAR 0 16
47573: PUSH
47574: LD_INT 2
47576: ARRAY
47577: PPUSH
47578: CALL_OW 111
// continue ;
47582: GO 47074
// end ; end ; r := GetDir ( tmp ) ;
47584: LD_ADDR_VAR 0 15
47588: PUSH
47589: LD_VAR 0 13
47593: PPUSH
47594: CALL_OW 254
47598: ST_TO_ADDR
// if r = 5 then
47599: LD_VAR 0 15
47603: PUSH
47604: LD_INT 5
47606: EQUAL
47607: IFFALSE 47617
// r := 0 ;
47609: LD_ADDR_VAR 0 15
47613: PUSH
47614: LD_INT 0
47616: ST_TO_ADDR
// for j = r to 5 do
47617: LD_ADDR_VAR 0 10
47621: PUSH
47622: DOUBLE
47623: LD_VAR 0 15
47627: DEC
47628: ST_TO_ADDR
47629: LD_INT 5
47631: PUSH
47632: FOR_TO
47633: IFFALSE 47747
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47635: LD_ADDR_VAR 0 11
47639: PUSH
47640: LD_VAR 0 13
47644: PPUSH
47645: CALL_OW 250
47649: PPUSH
47650: LD_VAR 0 10
47654: PPUSH
47655: LD_INT 2
47657: PPUSH
47658: CALL_OW 272
47662: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47663: LD_ADDR_VAR 0 12
47667: PUSH
47668: LD_VAR 0 13
47672: PPUSH
47673: CALL_OW 251
47677: PPUSH
47678: LD_VAR 0 10
47682: PPUSH
47683: LD_INT 2
47685: PPUSH
47686: CALL_OW 273
47690: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47691: LD_VAR 0 11
47695: PPUSH
47696: LD_VAR 0 12
47700: PPUSH
47701: CALL_OW 488
47705: PUSH
47706: LD_VAR 0 11
47710: PPUSH
47711: LD_VAR 0 12
47715: PPUSH
47716: CALL_OW 428
47720: NOT
47721: AND
47722: IFFALSE 47745
// begin ComMoveXY ( tmp , _x , _y ) ;
47724: LD_VAR 0 13
47728: PPUSH
47729: LD_VAR 0 11
47733: PPUSH
47734: LD_VAR 0 12
47738: PPUSH
47739: CALL_OW 111
// break ;
47743: GO 47747
// end ; end ;
47745: GO 47632
47747: POP
47748: POP
// end ; end ;
47749: GO 47074
47751: POP
47752: POP
// end ;
47753: LD_VAR 0 8
47757: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47758: LD_INT 0
47760: PPUSH
// result := true ;
47761: LD_ADDR_VAR 0 3
47765: PUSH
47766: LD_INT 1
47768: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47769: LD_VAR 0 2
47773: PUSH
47774: LD_INT 24
47776: DOUBLE
47777: EQUAL
47778: IFTRUE 47788
47780: LD_INT 33
47782: DOUBLE
47783: EQUAL
47784: IFTRUE 47788
47786: GO 47813
47788: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47789: LD_ADDR_VAR 0 3
47793: PUSH
47794: LD_INT 32
47796: PPUSH
47797: LD_VAR 0 1
47801: PPUSH
47802: CALL_OW 321
47806: PUSH
47807: LD_INT 2
47809: EQUAL
47810: ST_TO_ADDR
47811: GO 48129
47813: LD_INT 20
47815: DOUBLE
47816: EQUAL
47817: IFTRUE 47821
47819: GO 47846
47821: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47822: LD_ADDR_VAR 0 3
47826: PUSH
47827: LD_INT 6
47829: PPUSH
47830: LD_VAR 0 1
47834: PPUSH
47835: CALL_OW 321
47839: PUSH
47840: LD_INT 2
47842: EQUAL
47843: ST_TO_ADDR
47844: GO 48129
47846: LD_INT 22
47848: DOUBLE
47849: EQUAL
47850: IFTRUE 47860
47852: LD_INT 36
47854: DOUBLE
47855: EQUAL
47856: IFTRUE 47860
47858: GO 47885
47860: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47861: LD_ADDR_VAR 0 3
47865: PUSH
47866: LD_INT 15
47868: PPUSH
47869: LD_VAR 0 1
47873: PPUSH
47874: CALL_OW 321
47878: PUSH
47879: LD_INT 2
47881: EQUAL
47882: ST_TO_ADDR
47883: GO 48129
47885: LD_INT 30
47887: DOUBLE
47888: EQUAL
47889: IFTRUE 47893
47891: GO 47918
47893: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47894: LD_ADDR_VAR 0 3
47898: PUSH
47899: LD_INT 20
47901: PPUSH
47902: LD_VAR 0 1
47906: PPUSH
47907: CALL_OW 321
47911: PUSH
47912: LD_INT 2
47914: EQUAL
47915: ST_TO_ADDR
47916: GO 48129
47918: LD_INT 28
47920: DOUBLE
47921: EQUAL
47922: IFTRUE 47932
47924: LD_INT 21
47926: DOUBLE
47927: EQUAL
47928: IFTRUE 47932
47930: GO 47957
47932: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47933: LD_ADDR_VAR 0 3
47937: PUSH
47938: LD_INT 21
47940: PPUSH
47941: LD_VAR 0 1
47945: PPUSH
47946: CALL_OW 321
47950: PUSH
47951: LD_INT 2
47953: EQUAL
47954: ST_TO_ADDR
47955: GO 48129
47957: LD_INT 16
47959: DOUBLE
47960: EQUAL
47961: IFTRUE 47965
47963: GO 47990
47965: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47966: LD_ADDR_VAR 0 3
47970: PUSH
47971: LD_INT 84
47973: PPUSH
47974: LD_VAR 0 1
47978: PPUSH
47979: CALL_OW 321
47983: PUSH
47984: LD_INT 2
47986: EQUAL
47987: ST_TO_ADDR
47988: GO 48129
47990: LD_INT 19
47992: DOUBLE
47993: EQUAL
47994: IFTRUE 48004
47996: LD_INT 23
47998: DOUBLE
47999: EQUAL
48000: IFTRUE 48004
48002: GO 48029
48004: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48005: LD_ADDR_VAR 0 3
48009: PUSH
48010: LD_INT 83
48012: PPUSH
48013: LD_VAR 0 1
48017: PPUSH
48018: CALL_OW 321
48022: PUSH
48023: LD_INT 2
48025: EQUAL
48026: ST_TO_ADDR
48027: GO 48129
48029: LD_INT 17
48031: DOUBLE
48032: EQUAL
48033: IFTRUE 48037
48035: GO 48062
48037: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48038: LD_ADDR_VAR 0 3
48042: PUSH
48043: LD_INT 39
48045: PPUSH
48046: LD_VAR 0 1
48050: PPUSH
48051: CALL_OW 321
48055: PUSH
48056: LD_INT 2
48058: EQUAL
48059: ST_TO_ADDR
48060: GO 48129
48062: LD_INT 18
48064: DOUBLE
48065: EQUAL
48066: IFTRUE 48070
48068: GO 48095
48070: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48071: LD_ADDR_VAR 0 3
48075: PUSH
48076: LD_INT 40
48078: PPUSH
48079: LD_VAR 0 1
48083: PPUSH
48084: CALL_OW 321
48088: PUSH
48089: LD_INT 2
48091: EQUAL
48092: ST_TO_ADDR
48093: GO 48129
48095: LD_INT 27
48097: DOUBLE
48098: EQUAL
48099: IFTRUE 48103
48101: GO 48128
48103: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48104: LD_ADDR_VAR 0 3
48108: PUSH
48109: LD_INT 35
48111: PPUSH
48112: LD_VAR 0 1
48116: PPUSH
48117: CALL_OW 321
48121: PUSH
48122: LD_INT 2
48124: EQUAL
48125: ST_TO_ADDR
48126: GO 48129
48128: POP
// end ;
48129: LD_VAR 0 3
48133: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48134: LD_INT 0
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
48140: PPUSH
48141: PPUSH
48142: PPUSH
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
// result := false ;
48147: LD_ADDR_VAR 0 6
48151: PUSH
48152: LD_INT 0
48154: ST_TO_ADDR
// if btype = b_depot then
48155: LD_VAR 0 2
48159: PUSH
48160: LD_INT 0
48162: EQUAL
48163: IFFALSE 48175
// begin result := true ;
48165: LD_ADDR_VAR 0 6
48169: PUSH
48170: LD_INT 1
48172: ST_TO_ADDR
// exit ;
48173: GO 49001
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48175: LD_VAR 0 1
48179: NOT
48180: PUSH
48181: LD_VAR 0 1
48185: PPUSH
48186: CALL_OW 266
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: IN
48201: NOT
48202: OR
48203: PUSH
48204: LD_VAR 0 2
48208: NOT
48209: OR
48210: PUSH
48211: LD_VAR 0 5
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: LD_INT 4
48230: PUSH
48231: LD_INT 5
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: IN
48242: NOT
48243: OR
48244: PUSH
48245: LD_VAR 0 3
48249: PPUSH
48250: LD_VAR 0 4
48254: PPUSH
48255: CALL_OW 488
48259: NOT
48260: OR
48261: IFFALSE 48265
// exit ;
48263: GO 49001
// side := GetSide ( depot ) ;
48265: LD_ADDR_VAR 0 9
48269: PUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: CALL_OW 255
48279: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48280: LD_VAR 0 9
48284: PPUSH
48285: LD_VAR 0 2
48289: PPUSH
48290: CALL 47758 0 2
48294: NOT
48295: IFFALSE 48299
// exit ;
48297: GO 49001
// pom := GetBase ( depot ) ;
48299: LD_ADDR_VAR 0 10
48303: PUSH
48304: LD_VAR 0 1
48308: PPUSH
48309: CALL_OW 274
48313: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48314: LD_ADDR_VAR 0 11
48318: PUSH
48319: LD_VAR 0 2
48323: PPUSH
48324: LD_VAR 0 1
48328: PPUSH
48329: CALL_OW 248
48333: PPUSH
48334: CALL_OW 450
48338: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48339: LD_VAR 0 10
48343: PPUSH
48344: LD_INT 1
48346: PPUSH
48347: CALL_OW 275
48351: PUSH
48352: LD_VAR 0 11
48356: PUSH
48357: LD_INT 1
48359: ARRAY
48360: GREATEREQUAL
48361: PUSH
48362: LD_VAR 0 10
48366: PPUSH
48367: LD_INT 2
48369: PPUSH
48370: CALL_OW 275
48374: PUSH
48375: LD_VAR 0 11
48379: PUSH
48380: LD_INT 2
48382: ARRAY
48383: GREATEREQUAL
48384: AND
48385: PUSH
48386: LD_VAR 0 10
48390: PPUSH
48391: LD_INT 3
48393: PPUSH
48394: CALL_OW 275
48398: PUSH
48399: LD_VAR 0 11
48403: PUSH
48404: LD_INT 3
48406: ARRAY
48407: GREATEREQUAL
48408: AND
48409: NOT
48410: IFFALSE 48414
// exit ;
48412: GO 49001
// if GetBType ( depot ) = b_depot then
48414: LD_VAR 0 1
48418: PPUSH
48419: CALL_OW 266
48423: PUSH
48424: LD_INT 0
48426: EQUAL
48427: IFFALSE 48439
// dist := 28 else
48429: LD_ADDR_VAR 0 14
48433: PUSH
48434: LD_INT 28
48436: ST_TO_ADDR
48437: GO 48447
// dist := 36 ;
48439: LD_ADDR_VAR 0 14
48443: PUSH
48444: LD_INT 36
48446: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48447: LD_VAR 0 1
48451: PPUSH
48452: LD_VAR 0 3
48456: PPUSH
48457: LD_VAR 0 4
48461: PPUSH
48462: CALL_OW 297
48466: PUSH
48467: LD_VAR 0 14
48471: GREATER
48472: IFFALSE 48476
// exit ;
48474: GO 49001
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48476: LD_ADDR_VAR 0 12
48480: PUSH
48481: LD_VAR 0 2
48485: PPUSH
48486: LD_VAR 0 3
48490: PPUSH
48491: LD_VAR 0 4
48495: PPUSH
48496: LD_VAR 0 5
48500: PPUSH
48501: LD_VAR 0 1
48505: PPUSH
48506: CALL_OW 248
48510: PPUSH
48511: LD_INT 0
48513: PPUSH
48514: CALL 49006 0 6
48518: ST_TO_ADDR
// if not hexes then
48519: LD_VAR 0 12
48523: NOT
48524: IFFALSE 48528
// exit ;
48526: GO 49001
// hex := GetHexInfo ( x , y ) ;
48528: LD_ADDR_VAR 0 15
48532: PUSH
48533: LD_VAR 0 3
48537: PPUSH
48538: LD_VAR 0 4
48542: PPUSH
48543: CALL_OW 546
48547: ST_TO_ADDR
// if hex [ 1 ] then
48548: LD_VAR 0 15
48552: PUSH
48553: LD_INT 1
48555: ARRAY
48556: IFFALSE 48560
// exit ;
48558: GO 49001
// height := hex [ 2 ] ;
48560: LD_ADDR_VAR 0 13
48564: PUSH
48565: LD_VAR 0 15
48569: PUSH
48570: LD_INT 2
48572: ARRAY
48573: ST_TO_ADDR
// for i = 1 to hexes do
48574: LD_ADDR_VAR 0 7
48578: PUSH
48579: DOUBLE
48580: LD_INT 1
48582: DEC
48583: ST_TO_ADDR
48584: LD_VAR 0 12
48588: PUSH
48589: FOR_TO
48590: IFFALSE 48920
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48592: LD_VAR 0 12
48596: PUSH
48597: LD_VAR 0 7
48601: ARRAY
48602: PUSH
48603: LD_INT 1
48605: ARRAY
48606: PPUSH
48607: LD_VAR 0 12
48611: PUSH
48612: LD_VAR 0 7
48616: ARRAY
48617: PUSH
48618: LD_INT 2
48620: ARRAY
48621: PPUSH
48622: CALL_OW 488
48626: NOT
48627: PUSH
48628: LD_VAR 0 12
48632: PUSH
48633: LD_VAR 0 7
48637: ARRAY
48638: PUSH
48639: LD_INT 1
48641: ARRAY
48642: PPUSH
48643: LD_VAR 0 12
48647: PUSH
48648: LD_VAR 0 7
48652: ARRAY
48653: PUSH
48654: LD_INT 2
48656: ARRAY
48657: PPUSH
48658: CALL_OW 428
48662: PUSH
48663: LD_INT 0
48665: GREATER
48666: OR
48667: PUSH
48668: LD_VAR 0 12
48672: PUSH
48673: LD_VAR 0 7
48677: ARRAY
48678: PUSH
48679: LD_INT 1
48681: ARRAY
48682: PPUSH
48683: LD_VAR 0 12
48687: PUSH
48688: LD_VAR 0 7
48692: ARRAY
48693: PUSH
48694: LD_INT 2
48696: ARRAY
48697: PPUSH
48698: CALL_OW 351
48702: OR
48703: IFFALSE 48709
// exit ;
48705: POP
48706: POP
48707: GO 49001
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48709: LD_ADDR_VAR 0 8
48713: PUSH
48714: LD_VAR 0 12
48718: PUSH
48719: LD_VAR 0 7
48723: ARRAY
48724: PUSH
48725: LD_INT 1
48727: ARRAY
48728: PPUSH
48729: LD_VAR 0 12
48733: PUSH
48734: LD_VAR 0 7
48738: ARRAY
48739: PUSH
48740: LD_INT 2
48742: ARRAY
48743: PPUSH
48744: CALL_OW 546
48748: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48749: LD_VAR 0 8
48753: PUSH
48754: LD_INT 1
48756: ARRAY
48757: PUSH
48758: LD_VAR 0 8
48762: PUSH
48763: LD_INT 2
48765: ARRAY
48766: PUSH
48767: LD_VAR 0 13
48771: PUSH
48772: LD_INT 2
48774: PLUS
48775: GREATER
48776: OR
48777: PUSH
48778: LD_VAR 0 8
48782: PUSH
48783: LD_INT 2
48785: ARRAY
48786: PUSH
48787: LD_VAR 0 13
48791: PUSH
48792: LD_INT 2
48794: MINUS
48795: LESS
48796: OR
48797: PUSH
48798: LD_VAR 0 8
48802: PUSH
48803: LD_INT 3
48805: ARRAY
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 8
48812: PUSH
48813: LD_INT 9
48815: PUSH
48816: LD_INT 10
48818: PUSH
48819: LD_INT 11
48821: PUSH
48822: LD_INT 12
48824: PUSH
48825: LD_INT 13
48827: PUSH
48828: LD_INT 16
48830: PUSH
48831: LD_INT 17
48833: PUSH
48834: LD_INT 18
48836: PUSH
48837: LD_INT 19
48839: PUSH
48840: LD_INT 20
48842: PUSH
48843: LD_INT 21
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: IN
48861: NOT
48862: OR
48863: PUSH
48864: LD_VAR 0 8
48868: PUSH
48869: LD_INT 5
48871: ARRAY
48872: NOT
48873: OR
48874: PUSH
48875: LD_VAR 0 8
48879: PUSH
48880: LD_INT 6
48882: ARRAY
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 7
48892: PUSH
48893: LD_INT 9
48895: PUSH
48896: LD_INT 10
48898: PUSH
48899: LD_INT 11
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: IN
48910: NOT
48911: OR
48912: IFFALSE 48918
// exit ;
48914: POP
48915: POP
48916: GO 49001
// end ;
48918: GO 48589
48920: POP
48921: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48922: LD_VAR 0 9
48926: PPUSH
48927: LD_VAR 0 3
48931: PPUSH
48932: LD_VAR 0 4
48936: PPUSH
48937: LD_INT 20
48939: PPUSH
48940: CALL 40924 0 4
48944: PUSH
48945: LD_INT 4
48947: ARRAY
48948: IFFALSE 48952
// exit ;
48950: GO 49001
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48952: LD_VAR 0 2
48956: PUSH
48957: LD_INT 29
48959: PUSH
48960: LD_INT 30
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: IN
48967: PUSH
48968: LD_VAR 0 3
48972: PPUSH
48973: LD_VAR 0 4
48977: PPUSH
48978: LD_VAR 0 9
48982: PPUSH
48983: CALL_OW 440
48987: NOT
48988: AND
48989: IFFALSE 48993
// exit ;
48991: GO 49001
// result := true ;
48993: LD_ADDR_VAR 0 6
48997: PUSH
48998: LD_INT 1
49000: ST_TO_ADDR
// end ;
49001: LD_VAR 0 6
49005: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49006: LD_INT 0
49008: PPUSH
49009: PPUSH
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
49014: PPUSH
49015: PPUSH
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
49035: PPUSH
49036: PPUSH
49037: PPUSH
49038: PPUSH
49039: PPUSH
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
49049: PPUSH
49050: PPUSH
49051: PPUSH
49052: PPUSH
49053: PPUSH
49054: PPUSH
49055: PPUSH
49056: PPUSH
49057: PPUSH
49058: PPUSH
49059: PPUSH
49060: PPUSH
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
// result = [ ] ;
49066: LD_ADDR_VAR 0 7
49070: PUSH
49071: EMPTY
49072: ST_TO_ADDR
// temp_list = [ ] ;
49073: LD_ADDR_VAR 0 9
49077: PUSH
49078: EMPTY
49079: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49080: LD_VAR 0 4
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: LD_INT 4
49099: PUSH
49100: LD_INT 5
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: IN
49111: NOT
49112: PUSH
49113: LD_VAR 0 1
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: IN
49128: PUSH
49129: LD_VAR 0 5
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: LD_INT 3
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: IN
49148: NOT
49149: AND
49150: OR
49151: IFFALSE 49155
// exit ;
49153: GO 67546
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49155: LD_VAR 0 1
49159: PUSH
49160: LD_INT 6
49162: PUSH
49163: LD_INT 7
49165: PUSH
49166: LD_INT 8
49168: PUSH
49169: LD_INT 13
49171: PUSH
49172: LD_INT 12
49174: PUSH
49175: LD_INT 15
49177: PUSH
49178: LD_INT 11
49180: PUSH
49181: LD_INT 14
49183: PUSH
49184: LD_INT 10
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: IN
49198: IFFALSE 49208
// btype = b_lab ;
49200: LD_ADDR_VAR 0 1
49204: PUSH
49205: LD_INT 6
49207: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49208: LD_VAR 0 6
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: IN
49227: NOT
49228: PUSH
49229: LD_VAR 0 1
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 3
49245: PUSH
49246: LD_INT 6
49248: PUSH
49249: LD_INT 36
49251: PUSH
49252: LD_INT 4
49254: PUSH
49255: LD_INT 5
49257: PUSH
49258: LD_INT 31
49260: PUSH
49261: LD_INT 32
49263: PUSH
49264: LD_INT 33
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: IN
49280: NOT
49281: PUSH
49282: LD_VAR 0 6
49286: PUSH
49287: LD_INT 1
49289: EQUAL
49290: AND
49291: OR
49292: PUSH
49293: LD_VAR 0 1
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: IN
49308: NOT
49309: PUSH
49310: LD_VAR 0 6
49314: PUSH
49315: LD_INT 2
49317: EQUAL
49318: AND
49319: OR
49320: IFFALSE 49330
// mode = 0 ;
49322: LD_ADDR_VAR 0 6
49326: PUSH
49327: LD_INT 0
49329: ST_TO_ADDR
// case mode of 0 :
49330: LD_VAR 0 6
49334: PUSH
49335: LD_INT 0
49337: DOUBLE
49338: EQUAL
49339: IFTRUE 49343
49341: GO 60796
49343: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49344: LD_ADDR_VAR 0 11
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49537: LD_ADDR_VAR 0 12
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 3
49694: NEG
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 3
49705: NEG
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49733: LD_ADDR_VAR 0 13
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 3
49904: NEG
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49932: LD_ADDR_VAR 0 14
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 3
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: LD_INT 3
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50128: LD_ADDR_VAR 0 15
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 3
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50321: LD_ADDR_VAR 0 16
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: LD_INT 3
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50514: LD_ADDR_VAR 0 17
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50744: LD_ADDR_VAR 0 18
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50974: LD_ADDR_VAR 0 19
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51204: LD_ADDR_VAR 0 20
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51434: LD_ADDR_VAR 0 21
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51664: LD_ADDR_VAR 0 22
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 2
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51894: LD_ADDR_VAR 0 23
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: LD_INT 3
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 3
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52174: LD_ADDR_VAR 0 24
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52450: LD_ADDR_VAR 0 25
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52724: LD_ADDR_VAR 0 26
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53000: LD_ADDR_VAR 0 27
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: NEG
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53280: LD_ADDR_VAR 0 28
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: LD_INT 3
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 3
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53562: LD_ADDR_VAR 0 29
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 3
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 3
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: LD_INT 2
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 3
53806: NEG
53807: PUSH
53808: LD_INT 2
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53841: LD_ADDR_VAR 0 30
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 2
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 3
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54119: LD_ADDR_VAR 0 31
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 2
54296: NEG
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 3
54362: NEG
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54397: LD_ADDR_VAR 0 32
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 3
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54675: LD_ADDR_VAR 0 33
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 3
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54954: LD_ADDR_VAR 0 34
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 3
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 3
55168: PUSH
55169: LD_INT 2
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: LD_INT 3
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 3
55199: NEG
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55234: LD_ADDR_VAR 0 35
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55346: LD_ADDR_VAR 0 36
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55458: LD_ADDR_VAR 0 37
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55570: LD_ADDR_VAR 0 38
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55682: LD_ADDR_VAR 0 39
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55794: LD_ADDR_VAR 0 40
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55906: LD_ADDR_VAR 0 41
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: PUSH
56150: LD_INT 3
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: NEG
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: NEG
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56256: LD_ADDR_VAR 0 42
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: LD_INT 2
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 3
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 3
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: LD_INT 3
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 3
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56606: LD_ADDR_VAR 0 43
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 3
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: NEG
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56954: LD_ADDR_VAR 0 44
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: LD_INT 3
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 3
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 3
57263: NEG
57264: PUSH
57265: LD_INT 3
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57304: LD_ADDR_VAR 0 45
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 3
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 3
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 3
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 3
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57654: LD_ADDR_VAR 0 46
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 0
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 3
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 3
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 3
57950: NEG
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 3
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58002: LD_ADDR_VAR 0 47
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58153: LD_ADDR_VAR 0 48
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58300: LD_ADDR_VAR 0 49
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58444: LD_ADDR_VAR 0 50
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58588: LD_ADDR_VAR 0 51
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58735: LD_ADDR_VAR 0 52
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58886: LD_ADDR_VAR 0 53
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59116: LD_ADDR_VAR 0 54
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: NEG
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59346: LD_ADDR_VAR 0 55
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 2
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 2
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 2
59533: NEG
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59576: LD_ADDR_VAR 0 56
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 2
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59806: LD_ADDR_VAR 0 57
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60036: LD_ADDR_VAR 0 58
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 2
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: NEG
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60266: LD_ADDR_VAR 0 59
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60354: LD_ADDR_VAR 0 60
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60442: LD_ADDR_VAR 0 61
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60530: LD_ADDR_VAR 0 62
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60618: LD_ADDR_VAR 0 63
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60706: LD_ADDR_VAR 0 64
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
// end ; 1 :
60794: GO 66691
60796: LD_INT 1
60798: DOUBLE
60799: EQUAL
60800: IFTRUE 60804
60802: GO 63427
60804: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60805: LD_ADDR_VAR 0 11
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 3
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: LIST
60848: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60849: LD_ADDR_VAR 0 12
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60890: LD_ADDR_VAR 0 13
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: LD_INT 3
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: LIST
60929: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60930: LD_ADDR_VAR 0 14
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60971: LD_ADDR_VAR 0 15
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 1
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: LD_INT 1
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61015: LD_ADDR_VAR 0 16
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: NEG
61035: PUSH
61036: LD_INT 2
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: LIST
61060: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61061: LD_ADDR_VAR 0 17
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: LD_INT 3
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 3
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61105: LD_ADDR_VAR 0 18
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 3
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61146: LD_ADDR_VAR 0 19
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: LD_INT 2
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61186: LD_ADDR_VAR 0 20
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 3
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61227: LD_ADDR_VAR 0 21
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: NEG
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: LIST
61270: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61271: LD_ADDR_VAR 0 22
61275: PUSH
61276: LD_INT 2
61278: NEG
61279: PUSH
61280: LD_INT 3
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: NEG
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: LD_INT 3
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: LIST
61316: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61317: LD_ADDR_VAR 0 23
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 3
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: LD_INT 4
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 3
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61361: LD_ADDR_VAR 0 24
61365: PUSH
61366: LD_INT 3
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 4
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61402: LD_ADDR_VAR 0 25
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 4
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: LD_INT 4
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: LIST
61441: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61442: LD_ADDR_VAR 0 26
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: LD_INT 3
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 4
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: LD_INT 3
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61483: LD_ADDR_VAR 0 27
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 4
61512: NEG
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: LIST
61526: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61527: LD_ADDR_VAR 0 28
61531: PUSH
61532: LD_INT 3
61534: NEG
61535: PUSH
61536: LD_INT 3
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: LD_INT 4
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 4
61558: NEG
61559: PUSH
61560: LD_INT 3
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: LIST
61572: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61573: LD_ADDR_VAR 0 29
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: LD_INT 3
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 3
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: LD_INT 4
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 4
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: LD_INT 5
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 5
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 4
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: LD_INT 6
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 6
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 5
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61728: LD_ADDR_VAR 0 30
61732: PUSH
61733: LD_INT 2
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 3
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 4
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 4
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 4
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 5
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 5
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 5
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 6
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 6
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61871: LD_ADDR_VAR 0 31
61875: PUSH
61876: LD_INT 3
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 3
61888: PUSH
61889: LD_INT 3
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 2
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 4
61908: PUSH
61909: LD_INT 3
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 4
61918: PUSH
61919: LD_INT 4
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 3
61928: PUSH
61929: LD_INT 4
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 5
61938: PUSH
61939: LD_INT 4
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 5
61948: PUSH
61949: LD_INT 5
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: LD_INT 5
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 6
61968: PUSH
61969: LD_INT 5
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 6
61978: PUSH
61979: LD_INT 6
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 5
61988: PUSH
61989: LD_INT 6
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62010: LD_ADDR_VAR 0 32
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 4
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 4
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 5
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 5
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: LD_INT 4
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 6
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 6
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 5
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62153: LD_ADDR_VAR 0 33
62157: PUSH
62158: LD_INT 2
62160: NEG
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 3
62171: NEG
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 4
62205: NEG
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 4
62216: NEG
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 4
62228: NEG
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 5
62239: NEG
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 5
62250: NEG
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 5
62262: NEG
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 6
62273: NEG
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 6
62284: NEG
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62308: LD_ADDR_VAR 0 34
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 3
62327: NEG
62328: PUSH
62329: LD_INT 2
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 3
62339: NEG
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 3
62351: NEG
62352: PUSH
62353: LD_INT 4
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 4
62363: NEG
62364: PUSH
62365: LD_INT 3
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 4
62375: NEG
62376: PUSH
62377: LD_INT 4
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 4
62387: NEG
62388: PUSH
62389: LD_INT 5
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 5
62399: NEG
62400: PUSH
62401: LD_INT 4
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 5
62411: NEG
62412: PUSH
62413: LD_INT 5
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 5
62423: NEG
62424: PUSH
62425: LD_INT 6
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 6
62435: NEG
62436: PUSH
62437: LD_INT 5
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 6
62447: NEG
62448: PUSH
62449: LD_INT 6
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62471: LD_ADDR_VAR 0 41
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 3
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62515: LD_ADDR_VAR 0 42
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 2
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 3
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: LIST
62555: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62556: LD_ADDR_VAR 0 43
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: LD_INT 2
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 3
62573: PUSH
62574: LD_INT 2
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: LD_INT 3
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62596: LD_ADDR_VAR 0 44
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 2
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 3
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: LIST
62636: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62637: LD_ADDR_VAR 0 45
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 2
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 3
62666: NEG
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62681: LD_ADDR_VAR 0 46
62685: PUSH
62686: LD_INT 2
62688: NEG
62689: PUSH
62690: LD_INT 2
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: NEG
62701: PUSH
62702: LD_INT 3
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: NEG
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: LIST
62726: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62727: LD_ADDR_VAR 0 47
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: LD_INT 3
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: LD_INT 3
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62760: LD_ADDR_VAR 0 48
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62791: LD_ADDR_VAR 0 49
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 3
62808: PUSH
62809: LD_INT 2
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62820: LD_ADDR_VAR 0 50
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: LD_INT 3
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: LD_INT 3
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62849: LD_ADDR_VAR 0 51
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62880: LD_ADDR_VAR 0 52
62884: PUSH
62885: LD_INT 3
62887: NEG
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 3
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62913: LD_ADDR_VAR 0 53
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 3
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 3
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 2
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62957: LD_ADDR_VAR 0 54
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 3
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 3
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: LIST
62997: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62998: LD_ADDR_VAR 0 55
63002: PUSH
63003: LD_INT 3
63005: PUSH
63006: LD_INT 2
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 3
63015: PUSH
63016: LD_INT 3
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: LD_INT 3
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: LIST
63037: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63038: LD_ADDR_VAR 0 56
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: LD_INT 3
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: LD_INT 2
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63079: LD_ADDR_VAR 0 57
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 3
63097: NEG
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 3
63108: NEG
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: LIST
63122: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63123: LD_ADDR_VAR 0 58
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: LD_INT 3
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: LD_INT 2
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 3
63154: NEG
63155: PUSH
63156: LD_INT 3
63158: NEG
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: LIST
63168: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63169: LD_ADDR_VAR 0 59
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: LD_INT 2
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: LIST
63212: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63213: LD_ADDR_VAR 0 60
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: LIST
63253: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63254: LD_ADDR_VAR 0 61
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 2
63271: PUSH
63272: LD_INT 2
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63294: LD_ADDR_VAR 0 62
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: LD_INT 2
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: LIST
63334: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63335: LD_ADDR_VAR 0 63
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 2
63364: NEG
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63379: LD_ADDR_VAR 0 64
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: LD_INT 2
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: LIST
63424: ST_TO_ADDR
// end ; 2 :
63425: GO 66691
63427: LD_INT 2
63429: DOUBLE
63430: EQUAL
63431: IFTRUE 63435
63433: GO 66690
63435: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63436: LD_ADDR_VAR 0 29
63440: PUSH
63441: LD_INT 4
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 4
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 5
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 5
63474: PUSH
63475: LD_INT 1
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 4
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 3
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 3
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 5
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 3
63536: PUSH
63537: LD_INT 3
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 3
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 4
63556: PUSH
63557: LD_INT 3
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 4
63566: PUSH
63567: LD_INT 4
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 3
63576: PUSH
63577: LD_INT 4
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 2
63586: PUSH
63587: LD_INT 3
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: LD_INT 2
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 4
63606: PUSH
63607: LD_INT 2
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: LD_INT 4
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 4
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 3
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: LD_INT 4
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: LD_INT 5
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 5
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: LD_INT 4
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: NEG
63688: PUSH
63689: LD_INT 3
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: LD_INT 5
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: LD_INT 3
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 3
63719: NEG
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 3
63730: NEG
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 2
63753: NEG
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 3
63764: NEG
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 4
63775: NEG
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 4
63786: NEG
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 4
63798: NEG
63799: PUSH
63800: LD_INT 2
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 4
63821: NEG
63822: PUSH
63823: LD_INT 4
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 4
63833: NEG
63834: PUSH
63835: LD_INT 5
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 3
63845: NEG
63846: PUSH
63847: LD_INT 4
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: NEG
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 4
63869: NEG
63870: PUSH
63871: LD_INT 3
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 5
63881: NEG
63882: PUSH
63883: LD_INT 4
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 5
63893: NEG
63894: PUSH
63895: LD_INT 5
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 3
63905: NEG
63906: PUSH
63907: LD_INT 5
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 5
63917: NEG
63918: PUSH
63919: LD_INT 3
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63974: LD_ADDR_VAR 0 30
63978: PUSH
63979: LD_INT 4
63981: PUSH
63982: LD_INT 4
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 4
63991: PUSH
63992: LD_INT 3
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 5
64001: PUSH
64002: LD_INT 4
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 5
64011: PUSH
64012: LD_INT 5
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 4
64021: PUSH
64022: LD_INT 5
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 3
64031: PUSH
64032: LD_INT 4
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 3
64041: PUSH
64042: LD_INT 3
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 5
64051: PUSH
64052: LD_INT 3
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 3
64061: PUSH
64062: LD_INT 5
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 3
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: LD_INT 3
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: LD_INT 4
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 4
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: NEG
64122: PUSH
64123: LD_INT 3
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: PUSH
64144: LD_INT 4
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 2
64153: NEG
64154: PUSH
64155: LD_INT 2
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 4
64164: NEG
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 4
64175: NEG
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 3
64187: NEG
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 3
64198: NEG
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 4
64209: NEG
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 5
64220: NEG
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 5
64231: NEG
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 5
64243: NEG
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 3
64255: NEG
64256: PUSH
64257: LD_INT 2
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 3
64266: NEG
64267: PUSH
64268: LD_INT 3
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 3
64278: NEG
64279: PUSH
64280: LD_INT 4
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: NEG
64291: PUSH
64292: LD_INT 3
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 3
64314: NEG
64315: PUSH
64316: LD_INT 2
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 4
64326: NEG
64327: PUSH
64328: LD_INT 3
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 4
64338: NEG
64339: PUSH
64340: LD_INT 4
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 2
64350: NEG
64351: PUSH
64352: LD_INT 4
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 4
64362: NEG
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 4
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 5
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: LD_INT 4
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 3
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 3
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: LD_INT 4
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 5
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 2
64453: PUSH
64454: LD_INT 3
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: LD_INT 5
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64521: LD_ADDR_VAR 0 31
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 4
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 3
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: LD_INT 4
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: LD_INT 5
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: LD_INT 5
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: PUSH
64580: LD_INT 4
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: LD_INT 3
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 2
64600: PUSH
64601: LD_INT 5
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 2
64610: NEG
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 3
64621: NEG
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 3
64632: NEG
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 2
64644: NEG
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 2
64655: NEG
64656: PUSH
64657: LD_INT 1
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 4
64677: NEG
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 4
64688: NEG
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 4
64700: NEG
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 2
64712: NEG
64713: PUSH
64714: LD_INT 2
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 4
64723: NEG
64724: PUSH
64725: LD_INT 4
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 4
64735: NEG
64736: PUSH
64737: LD_INT 5
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 3
64747: NEG
64748: PUSH
64749: LD_INT 4
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: LD_INT 3
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 4
64771: NEG
64772: PUSH
64773: LD_INT 3
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 5
64783: NEG
64784: PUSH
64785: LD_INT 4
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 5
64795: NEG
64796: PUSH
64797: LD_INT 5
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 3
64807: NEG
64808: PUSH
64809: LD_INT 5
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 5
64819: NEG
64820: PUSH
64821: LD_INT 3
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 3
64834: NEG
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: LD_INT 4
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: LD_INT 3
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: LD_INT 2
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 2
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: LD_INT 3
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: LD_INT 4
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 2
64910: PUSH
64911: LD_INT 2
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 2
64921: NEG
64922: PUSH
64923: LD_INT 4
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 4
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 4
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 5
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 5
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 4
64974: PUSH
64975: LD_INT 1
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 3
64994: PUSH
64995: LD_INT 1
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 3
65005: PUSH
65006: LD_INT 2
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 5
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65071: LD_ADDR_VAR 0 32
65075: PUSH
65076: LD_INT 4
65078: NEG
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 4
65089: NEG
65090: PUSH
65091: LD_INT 1
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 3
65101: NEG
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 3
65112: NEG
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 4
65123: NEG
65124: PUSH
65125: LD_INT 1
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 5
65134: NEG
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 5
65145: NEG
65146: PUSH
65147: LD_INT 1
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 5
65157: NEG
65158: PUSH
65159: LD_INT 2
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 3
65169: NEG
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: NEG
65181: PUSH
65182: LD_INT 3
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 3
65192: NEG
65193: PUSH
65194: LD_INT 4
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 2
65204: NEG
65205: PUSH
65206: LD_INT 3
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 2
65216: NEG
65217: PUSH
65218: LD_INT 2
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: LD_INT 2
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 4
65240: NEG
65241: PUSH
65242: LD_INT 3
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 4
65252: NEG
65253: PUSH
65254: LD_INT 4
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 2
65264: NEG
65265: PUSH
65266: LD_INT 4
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 4
65276: NEG
65277: PUSH
65278: LD_INT 2
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: LD_INT 4
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: LD_INT 5
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: LD_INT 4
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 3
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_INT 3
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 1
65343: NEG
65344: PUSH
65345: LD_INT 4
65347: NEG
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 1
65355: NEG
65356: PUSH
65357: LD_INT 5
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 2
65367: PUSH
65368: LD_INT 3
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: LD_INT 5
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 3
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 3
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 4
65411: PUSH
65412: LD_INT 0
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 4
65421: PUSH
65422: LD_INT 1
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 3
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 2
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 2
65451: PUSH
65452: LD_INT 1
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: LD_INT 2
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 4
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 4
65483: PUSH
65484: LD_INT 4
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 4
65493: PUSH
65494: LD_INT 3
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 5
65503: PUSH
65504: LD_INT 4
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 5
65513: PUSH
65514: LD_INT 5
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 4
65523: PUSH
65524: LD_INT 5
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: LD_INT 4
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: LD_INT 3
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 5
65553: PUSH
65554: LD_INT 3
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 3
65563: PUSH
65564: LD_INT 5
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65618: LD_ADDR_VAR 0 33
65622: PUSH
65623: LD_INT 4
65625: NEG
65626: PUSH
65627: LD_INT 4
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 4
65637: NEG
65638: PUSH
65639: LD_INT 5
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 3
65649: NEG
65650: PUSH
65651: LD_INT 4
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 3
65661: NEG
65662: PUSH
65663: LD_INT 3
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 4
65673: NEG
65674: PUSH
65675: LD_INT 3
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 5
65685: NEG
65686: PUSH
65687: LD_INT 4
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 5
65697: NEG
65698: PUSH
65699: LD_INT 5
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 3
65709: NEG
65710: PUSH
65711: LD_INT 5
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 5
65721: NEG
65722: PUSH
65723: LD_INT 3
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 3
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: LD_INT 4
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: LD_INT 3
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 1
65766: PUSH
65767: LD_INT 2
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: LD_INT 2
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: LD_INT 3
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 4
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 2
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 2
65823: NEG
65824: PUSH
65825: LD_INT 4
65827: NEG
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 4
65835: PUSH
65836: LD_INT 0
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: LD_INT 1
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 5
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 5
65866: PUSH
65867: LD_INT 1
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 4
65876: PUSH
65877: LD_INT 1
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 3
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 3
65896: PUSH
65897: LD_INT 1
65899: NEG
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 3
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 5
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 3
65928: PUSH
65929: LD_INT 3
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: LD_INT 2
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 4
65948: PUSH
65949: LD_INT 3
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 4
65958: PUSH
65959: LD_INT 4
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 3
65968: PUSH
65969: LD_INT 4
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 2
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 2
65988: PUSH
65989: LD_INT 2
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 4
65998: PUSH
65999: LD_INT 2
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: LD_INT 4
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: LD_INT 4
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 0
66028: PUSH
66029: LD_INT 3
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: LD_INT 4
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: PUSH
66049: LD_INT 5
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: LD_INT 5
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: LD_INT 4
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: LD_INT 3
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 2
66090: PUSH
66091: LD_INT 5
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: LD_INT 3
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66156: LD_ADDR_VAR 0 34
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: LD_INT 4
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: LD_INT 5
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: LD_INT 4
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: LD_INT 3
66199: NEG
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 0
66207: PUSH
66208: LD_INT 3
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: LD_INT 4
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: LD_INT 5
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: LD_INT 3
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 2
66253: NEG
66254: PUSH
66255: LD_INT 5
66257: NEG
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 3
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 3
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 4
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 4
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: LD_INT 1
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 1
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 4
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 4
66358: PUSH
66359: LD_INT 4
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 4
66368: PUSH
66369: LD_INT 3
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 5
66378: PUSH
66379: LD_INT 4
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 5
66388: PUSH
66389: LD_INT 5
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 4
66398: PUSH
66399: LD_INT 5
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 3
66408: PUSH
66409: LD_INT 4
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 3
66418: PUSH
66419: LD_INT 3
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 5
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 3
66438: PUSH
66439: LD_INT 5
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: LD_INT 3
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: LD_INT 2
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: LD_INT 4
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: LD_INT 4
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: LD_INT 4
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: LD_INT 2
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 4
66541: NEG
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 4
66552: NEG
66553: PUSH
66554: LD_INT 1
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: LD_INT 0
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 3
66575: NEG
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 4
66586: NEG
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 5
66597: NEG
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 5
66608: NEG
66609: PUSH
66610: LD_INT 1
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 5
66620: NEG
66621: PUSH
66622: LD_INT 2
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 3
66632: NEG
66633: PUSH
66634: LD_INT 2
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: ST_TO_ADDR
// end ; end ;
66688: GO 66691
66690: POP
// case btype of b_depot , b_warehouse :
66691: LD_VAR 0 1
66695: PUSH
66696: LD_INT 0
66698: DOUBLE
66699: EQUAL
66700: IFTRUE 66710
66702: LD_INT 1
66704: DOUBLE
66705: EQUAL
66706: IFTRUE 66710
66708: GO 66911
66710: POP
// case nation of nation_american :
66711: LD_VAR 0 5
66715: PUSH
66716: LD_INT 1
66718: DOUBLE
66719: EQUAL
66720: IFTRUE 66724
66722: GO 66780
66724: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66725: LD_ADDR_VAR 0 9
66729: PUSH
66730: LD_VAR 0 11
66734: PUSH
66735: LD_VAR 0 12
66739: PUSH
66740: LD_VAR 0 13
66744: PUSH
66745: LD_VAR 0 14
66749: PUSH
66750: LD_VAR 0 15
66754: PUSH
66755: LD_VAR 0 16
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: PUSH
66768: LD_VAR 0 4
66772: PUSH
66773: LD_INT 1
66775: PLUS
66776: ARRAY
66777: ST_TO_ADDR
66778: GO 66909
66780: LD_INT 2
66782: DOUBLE
66783: EQUAL
66784: IFTRUE 66788
66786: GO 66844
66788: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66789: LD_ADDR_VAR 0 9
66793: PUSH
66794: LD_VAR 0 17
66798: PUSH
66799: LD_VAR 0 18
66803: PUSH
66804: LD_VAR 0 19
66808: PUSH
66809: LD_VAR 0 20
66813: PUSH
66814: LD_VAR 0 21
66818: PUSH
66819: LD_VAR 0 22
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: PUSH
66832: LD_VAR 0 4
66836: PUSH
66837: LD_INT 1
66839: PLUS
66840: ARRAY
66841: ST_TO_ADDR
66842: GO 66909
66844: LD_INT 3
66846: DOUBLE
66847: EQUAL
66848: IFTRUE 66852
66850: GO 66908
66852: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66853: LD_ADDR_VAR 0 9
66857: PUSH
66858: LD_VAR 0 23
66862: PUSH
66863: LD_VAR 0 24
66867: PUSH
66868: LD_VAR 0 25
66872: PUSH
66873: LD_VAR 0 26
66877: PUSH
66878: LD_VAR 0 27
66882: PUSH
66883: LD_VAR 0 28
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: PUSH
66896: LD_VAR 0 4
66900: PUSH
66901: LD_INT 1
66903: PLUS
66904: ARRAY
66905: ST_TO_ADDR
66906: GO 66909
66908: POP
66909: GO 67464
66911: LD_INT 2
66913: DOUBLE
66914: EQUAL
66915: IFTRUE 66925
66917: LD_INT 3
66919: DOUBLE
66920: EQUAL
66921: IFTRUE 66925
66923: GO 66981
66925: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66926: LD_ADDR_VAR 0 9
66930: PUSH
66931: LD_VAR 0 29
66935: PUSH
66936: LD_VAR 0 30
66940: PUSH
66941: LD_VAR 0 31
66945: PUSH
66946: LD_VAR 0 32
66950: PUSH
66951: LD_VAR 0 33
66955: PUSH
66956: LD_VAR 0 34
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: PUSH
66969: LD_VAR 0 4
66973: PUSH
66974: LD_INT 1
66976: PLUS
66977: ARRAY
66978: ST_TO_ADDR
66979: GO 67464
66981: LD_INT 16
66983: DOUBLE
66984: EQUAL
66985: IFTRUE 67043
66987: LD_INT 17
66989: DOUBLE
66990: EQUAL
66991: IFTRUE 67043
66993: LD_INT 18
66995: DOUBLE
66996: EQUAL
66997: IFTRUE 67043
66999: LD_INT 19
67001: DOUBLE
67002: EQUAL
67003: IFTRUE 67043
67005: LD_INT 22
67007: DOUBLE
67008: EQUAL
67009: IFTRUE 67043
67011: LD_INT 20
67013: DOUBLE
67014: EQUAL
67015: IFTRUE 67043
67017: LD_INT 21
67019: DOUBLE
67020: EQUAL
67021: IFTRUE 67043
67023: LD_INT 23
67025: DOUBLE
67026: EQUAL
67027: IFTRUE 67043
67029: LD_INT 24
67031: DOUBLE
67032: EQUAL
67033: IFTRUE 67043
67035: LD_INT 25
67037: DOUBLE
67038: EQUAL
67039: IFTRUE 67043
67041: GO 67099
67043: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67044: LD_ADDR_VAR 0 9
67048: PUSH
67049: LD_VAR 0 35
67053: PUSH
67054: LD_VAR 0 36
67058: PUSH
67059: LD_VAR 0 37
67063: PUSH
67064: LD_VAR 0 38
67068: PUSH
67069: LD_VAR 0 39
67073: PUSH
67074: LD_VAR 0 40
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: PUSH
67087: LD_VAR 0 4
67091: PUSH
67092: LD_INT 1
67094: PLUS
67095: ARRAY
67096: ST_TO_ADDR
67097: GO 67464
67099: LD_INT 6
67101: DOUBLE
67102: EQUAL
67103: IFTRUE 67155
67105: LD_INT 7
67107: DOUBLE
67108: EQUAL
67109: IFTRUE 67155
67111: LD_INT 8
67113: DOUBLE
67114: EQUAL
67115: IFTRUE 67155
67117: LD_INT 13
67119: DOUBLE
67120: EQUAL
67121: IFTRUE 67155
67123: LD_INT 12
67125: DOUBLE
67126: EQUAL
67127: IFTRUE 67155
67129: LD_INT 15
67131: DOUBLE
67132: EQUAL
67133: IFTRUE 67155
67135: LD_INT 11
67137: DOUBLE
67138: EQUAL
67139: IFTRUE 67155
67141: LD_INT 14
67143: DOUBLE
67144: EQUAL
67145: IFTRUE 67155
67147: LD_INT 10
67149: DOUBLE
67150: EQUAL
67151: IFTRUE 67155
67153: GO 67211
67155: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67156: LD_ADDR_VAR 0 9
67160: PUSH
67161: LD_VAR 0 41
67165: PUSH
67166: LD_VAR 0 42
67170: PUSH
67171: LD_VAR 0 43
67175: PUSH
67176: LD_VAR 0 44
67180: PUSH
67181: LD_VAR 0 45
67185: PUSH
67186: LD_VAR 0 46
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: PUSH
67199: LD_VAR 0 4
67203: PUSH
67204: LD_INT 1
67206: PLUS
67207: ARRAY
67208: ST_TO_ADDR
67209: GO 67464
67211: LD_INT 36
67213: DOUBLE
67214: EQUAL
67215: IFTRUE 67219
67217: GO 67275
67219: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67220: LD_ADDR_VAR 0 9
67224: PUSH
67225: LD_VAR 0 47
67229: PUSH
67230: LD_VAR 0 48
67234: PUSH
67235: LD_VAR 0 49
67239: PUSH
67240: LD_VAR 0 50
67244: PUSH
67245: LD_VAR 0 51
67249: PUSH
67250: LD_VAR 0 52
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: PUSH
67263: LD_VAR 0 4
67267: PUSH
67268: LD_INT 1
67270: PLUS
67271: ARRAY
67272: ST_TO_ADDR
67273: GO 67464
67275: LD_INT 4
67277: DOUBLE
67278: EQUAL
67279: IFTRUE 67301
67281: LD_INT 5
67283: DOUBLE
67284: EQUAL
67285: IFTRUE 67301
67287: LD_INT 34
67289: DOUBLE
67290: EQUAL
67291: IFTRUE 67301
67293: LD_INT 37
67295: DOUBLE
67296: EQUAL
67297: IFTRUE 67301
67299: GO 67357
67301: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67302: LD_ADDR_VAR 0 9
67306: PUSH
67307: LD_VAR 0 53
67311: PUSH
67312: LD_VAR 0 54
67316: PUSH
67317: LD_VAR 0 55
67321: PUSH
67322: LD_VAR 0 56
67326: PUSH
67327: LD_VAR 0 57
67331: PUSH
67332: LD_VAR 0 58
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: PUSH
67345: LD_VAR 0 4
67349: PUSH
67350: LD_INT 1
67352: PLUS
67353: ARRAY
67354: ST_TO_ADDR
67355: GO 67464
67357: LD_INT 31
67359: DOUBLE
67360: EQUAL
67361: IFTRUE 67407
67363: LD_INT 32
67365: DOUBLE
67366: EQUAL
67367: IFTRUE 67407
67369: LD_INT 33
67371: DOUBLE
67372: EQUAL
67373: IFTRUE 67407
67375: LD_INT 27
67377: DOUBLE
67378: EQUAL
67379: IFTRUE 67407
67381: LD_INT 26
67383: DOUBLE
67384: EQUAL
67385: IFTRUE 67407
67387: LD_INT 28
67389: DOUBLE
67390: EQUAL
67391: IFTRUE 67407
67393: LD_INT 29
67395: DOUBLE
67396: EQUAL
67397: IFTRUE 67407
67399: LD_INT 30
67401: DOUBLE
67402: EQUAL
67403: IFTRUE 67407
67405: GO 67463
67407: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67408: LD_ADDR_VAR 0 9
67412: PUSH
67413: LD_VAR 0 59
67417: PUSH
67418: LD_VAR 0 60
67422: PUSH
67423: LD_VAR 0 61
67427: PUSH
67428: LD_VAR 0 62
67432: PUSH
67433: LD_VAR 0 63
67437: PUSH
67438: LD_VAR 0 64
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: PUSH
67451: LD_VAR 0 4
67455: PUSH
67456: LD_INT 1
67458: PLUS
67459: ARRAY
67460: ST_TO_ADDR
67461: GO 67464
67463: POP
// temp_list2 = [ ] ;
67464: LD_ADDR_VAR 0 10
67468: PUSH
67469: EMPTY
67470: ST_TO_ADDR
// for i in temp_list do
67471: LD_ADDR_VAR 0 8
67475: PUSH
67476: LD_VAR 0 9
67480: PUSH
67481: FOR_IN
67482: IFFALSE 67534
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67484: LD_ADDR_VAR 0 10
67488: PUSH
67489: LD_VAR 0 10
67493: PUSH
67494: LD_VAR 0 8
67498: PUSH
67499: LD_INT 1
67501: ARRAY
67502: PUSH
67503: LD_VAR 0 2
67507: PLUS
67508: PUSH
67509: LD_VAR 0 8
67513: PUSH
67514: LD_INT 2
67516: ARRAY
67517: PUSH
67518: LD_VAR 0 3
67522: PLUS
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: EMPTY
67529: LIST
67530: ADD
67531: ST_TO_ADDR
67532: GO 67481
67534: POP
67535: POP
// result = temp_list2 ;
67536: LD_ADDR_VAR 0 7
67540: PUSH
67541: LD_VAR 0 10
67545: ST_TO_ADDR
// end ;
67546: LD_VAR 0 7
67550: RET
// export function EnemyInRange ( unit , dist ) ; begin
67551: LD_INT 0
67553: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67554: LD_ADDR_VAR 0 3
67558: PUSH
67559: LD_VAR 0 1
67563: PPUSH
67564: CALL_OW 255
67568: PPUSH
67569: LD_VAR 0 1
67573: PPUSH
67574: CALL_OW 250
67578: PPUSH
67579: LD_VAR 0 1
67583: PPUSH
67584: CALL_OW 251
67588: PPUSH
67589: LD_VAR 0 2
67593: PPUSH
67594: CALL 40924 0 4
67598: PUSH
67599: LD_INT 4
67601: ARRAY
67602: ST_TO_ADDR
// end ;
67603: LD_VAR 0 3
67607: RET
// export function PlayerSeeMe ( unit ) ; begin
67608: LD_INT 0
67610: PPUSH
// result := See ( your_side , unit ) ;
67611: LD_ADDR_VAR 0 2
67615: PUSH
67616: LD_OWVAR 2
67620: PPUSH
67621: LD_VAR 0 1
67625: PPUSH
67626: CALL_OW 292
67630: ST_TO_ADDR
// end ;
67631: LD_VAR 0 2
67635: RET
// export function ReverseDir ( unit ) ; begin
67636: LD_INT 0
67638: PPUSH
// if not unit then
67639: LD_VAR 0 1
67643: NOT
67644: IFFALSE 67648
// exit ;
67646: GO 67671
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67648: LD_ADDR_VAR 0 2
67652: PUSH
67653: LD_VAR 0 1
67657: PPUSH
67658: CALL_OW 254
67662: PUSH
67663: LD_INT 3
67665: PLUS
67666: PUSH
67667: LD_INT 6
67669: MOD
67670: ST_TO_ADDR
// end ;
67671: LD_VAR 0 2
67675: RET
// export function ReverseArray ( array ) ; var i ; begin
67676: LD_INT 0
67678: PPUSH
67679: PPUSH
// if not array then
67680: LD_VAR 0 1
67684: NOT
67685: IFFALSE 67689
// exit ;
67687: GO 67744
// result := [ ] ;
67689: LD_ADDR_VAR 0 2
67693: PUSH
67694: EMPTY
67695: ST_TO_ADDR
// for i := array downto 1 do
67696: LD_ADDR_VAR 0 3
67700: PUSH
67701: DOUBLE
67702: LD_VAR 0 1
67706: INC
67707: ST_TO_ADDR
67708: LD_INT 1
67710: PUSH
67711: FOR_DOWNTO
67712: IFFALSE 67742
// result := Join ( result , array [ i ] ) ;
67714: LD_ADDR_VAR 0 2
67718: PUSH
67719: LD_VAR 0 2
67723: PPUSH
67724: LD_VAR 0 1
67728: PUSH
67729: LD_VAR 0 3
67733: ARRAY
67734: PPUSH
67735: CALL 72387 0 2
67739: ST_TO_ADDR
67740: GO 67711
67742: POP
67743: POP
// end ;
67744: LD_VAR 0 2
67748: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67749: LD_INT 0
67751: PPUSH
67752: PPUSH
67753: PPUSH
67754: PPUSH
67755: PPUSH
67756: PPUSH
// if not unit or not hexes then
67757: LD_VAR 0 1
67761: NOT
67762: PUSH
67763: LD_VAR 0 2
67767: NOT
67768: OR
67769: IFFALSE 67773
// exit ;
67771: GO 67896
// dist := 9999 ;
67773: LD_ADDR_VAR 0 5
67777: PUSH
67778: LD_INT 9999
67780: ST_TO_ADDR
// for i = 1 to hexes do
67781: LD_ADDR_VAR 0 4
67785: PUSH
67786: DOUBLE
67787: LD_INT 1
67789: DEC
67790: ST_TO_ADDR
67791: LD_VAR 0 2
67795: PUSH
67796: FOR_TO
67797: IFFALSE 67884
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67799: LD_ADDR_VAR 0 6
67803: PUSH
67804: LD_VAR 0 1
67808: PPUSH
67809: LD_VAR 0 2
67813: PUSH
67814: LD_VAR 0 4
67818: ARRAY
67819: PUSH
67820: LD_INT 1
67822: ARRAY
67823: PPUSH
67824: LD_VAR 0 2
67828: PUSH
67829: LD_VAR 0 4
67833: ARRAY
67834: PUSH
67835: LD_INT 2
67837: ARRAY
67838: PPUSH
67839: CALL_OW 297
67843: ST_TO_ADDR
// if tdist < dist then
67844: LD_VAR 0 6
67848: PUSH
67849: LD_VAR 0 5
67853: LESS
67854: IFFALSE 67882
// begin hex := hexes [ i ] ;
67856: LD_ADDR_VAR 0 8
67860: PUSH
67861: LD_VAR 0 2
67865: PUSH
67866: LD_VAR 0 4
67870: ARRAY
67871: ST_TO_ADDR
// dist := tdist ;
67872: LD_ADDR_VAR 0 5
67876: PUSH
67877: LD_VAR 0 6
67881: ST_TO_ADDR
// end ; end ;
67882: GO 67796
67884: POP
67885: POP
// result := hex ;
67886: LD_ADDR_VAR 0 3
67890: PUSH
67891: LD_VAR 0 8
67895: ST_TO_ADDR
// end ;
67896: LD_VAR 0 3
67900: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67901: LD_INT 0
67903: PPUSH
67904: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67905: LD_VAR 0 1
67909: NOT
67910: PUSH
67911: LD_VAR 0 1
67915: PUSH
67916: LD_INT 21
67918: PUSH
67919: LD_INT 2
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 23
67928: PUSH
67929: LD_INT 2
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PPUSH
67940: CALL_OW 69
67944: IN
67945: NOT
67946: OR
67947: IFFALSE 67951
// exit ;
67949: GO 67998
// for i = 1 to 3 do
67951: LD_ADDR_VAR 0 3
67955: PUSH
67956: DOUBLE
67957: LD_INT 1
67959: DEC
67960: ST_TO_ADDR
67961: LD_INT 3
67963: PUSH
67964: FOR_TO
67965: IFFALSE 67996
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67967: LD_VAR 0 1
67971: PPUSH
67972: CALL_OW 250
67976: PPUSH
67977: LD_VAR 0 1
67981: PPUSH
67982: CALL_OW 251
67986: PPUSH
67987: LD_INT 1
67989: PPUSH
67990: CALL_OW 453
67994: GO 67964
67996: POP
67997: POP
// end ;
67998: LD_VAR 0 2
68002: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68003: LD_INT 0
68005: PPUSH
68006: PPUSH
68007: PPUSH
68008: PPUSH
68009: PPUSH
68010: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68011: LD_VAR 0 1
68015: NOT
68016: PUSH
68017: LD_VAR 0 2
68021: NOT
68022: OR
68023: PUSH
68024: LD_VAR 0 1
68028: PPUSH
68029: CALL_OW 314
68033: OR
68034: IFFALSE 68038
// exit ;
68036: GO 68505
// if GetLives ( i ) < 250 then
68038: LD_VAR 0 4
68042: PPUSH
68043: CALL_OW 256
68047: PUSH
68048: LD_INT 250
68050: LESS
68051: IFFALSE 68064
// begin ComAutodestruct ( i ) ;
68053: LD_VAR 0 4
68057: PPUSH
68058: CALL 67901 0 1
// exit ;
68062: GO 68505
// end ; x := GetX ( enemy_unit ) ;
68064: LD_ADDR_VAR 0 7
68068: PUSH
68069: LD_VAR 0 2
68073: PPUSH
68074: CALL_OW 250
68078: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68079: LD_ADDR_VAR 0 8
68083: PUSH
68084: LD_VAR 0 2
68088: PPUSH
68089: CALL_OW 251
68093: ST_TO_ADDR
// if not x or not y then
68094: LD_VAR 0 7
68098: NOT
68099: PUSH
68100: LD_VAR 0 8
68104: NOT
68105: OR
68106: IFFALSE 68110
// exit ;
68108: GO 68505
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68110: LD_ADDR_VAR 0 6
68114: PUSH
68115: LD_VAR 0 7
68119: PPUSH
68120: LD_INT 0
68122: PPUSH
68123: LD_INT 4
68125: PPUSH
68126: CALL_OW 272
68130: PUSH
68131: LD_VAR 0 8
68135: PPUSH
68136: LD_INT 0
68138: PPUSH
68139: LD_INT 4
68141: PPUSH
68142: CALL_OW 273
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_VAR 0 7
68155: PPUSH
68156: LD_INT 1
68158: PPUSH
68159: LD_INT 4
68161: PPUSH
68162: CALL_OW 272
68166: PUSH
68167: LD_VAR 0 8
68171: PPUSH
68172: LD_INT 1
68174: PPUSH
68175: LD_INT 4
68177: PPUSH
68178: CALL_OW 273
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_VAR 0 7
68191: PPUSH
68192: LD_INT 2
68194: PPUSH
68195: LD_INT 4
68197: PPUSH
68198: CALL_OW 272
68202: PUSH
68203: LD_VAR 0 8
68207: PPUSH
68208: LD_INT 2
68210: PPUSH
68211: LD_INT 4
68213: PPUSH
68214: CALL_OW 273
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_VAR 0 7
68227: PPUSH
68228: LD_INT 3
68230: PPUSH
68231: LD_INT 4
68233: PPUSH
68234: CALL_OW 272
68238: PUSH
68239: LD_VAR 0 8
68243: PPUSH
68244: LD_INT 3
68246: PPUSH
68247: LD_INT 4
68249: PPUSH
68250: CALL_OW 273
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_VAR 0 7
68263: PPUSH
68264: LD_INT 4
68266: PPUSH
68267: LD_INT 4
68269: PPUSH
68270: CALL_OW 272
68274: PUSH
68275: LD_VAR 0 8
68279: PPUSH
68280: LD_INT 4
68282: PPUSH
68283: LD_INT 4
68285: PPUSH
68286: CALL_OW 273
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_VAR 0 7
68299: PPUSH
68300: LD_INT 5
68302: PPUSH
68303: LD_INT 4
68305: PPUSH
68306: CALL_OW 272
68310: PUSH
68311: LD_VAR 0 8
68315: PPUSH
68316: LD_INT 5
68318: PPUSH
68319: LD_INT 4
68321: PPUSH
68322: CALL_OW 273
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: ST_TO_ADDR
// for i = tmp downto 1 do
68339: LD_ADDR_VAR 0 4
68343: PUSH
68344: DOUBLE
68345: LD_VAR 0 6
68349: INC
68350: ST_TO_ADDR
68351: LD_INT 1
68353: PUSH
68354: FOR_DOWNTO
68355: IFFALSE 68456
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68357: LD_VAR 0 6
68361: PUSH
68362: LD_VAR 0 4
68366: ARRAY
68367: PUSH
68368: LD_INT 1
68370: ARRAY
68371: PPUSH
68372: LD_VAR 0 6
68376: PUSH
68377: LD_VAR 0 4
68381: ARRAY
68382: PUSH
68383: LD_INT 2
68385: ARRAY
68386: PPUSH
68387: CALL_OW 488
68391: NOT
68392: PUSH
68393: LD_VAR 0 6
68397: PUSH
68398: LD_VAR 0 4
68402: ARRAY
68403: PUSH
68404: LD_INT 1
68406: ARRAY
68407: PPUSH
68408: LD_VAR 0 6
68412: PUSH
68413: LD_VAR 0 4
68417: ARRAY
68418: PUSH
68419: LD_INT 2
68421: ARRAY
68422: PPUSH
68423: CALL_OW 428
68427: PUSH
68428: LD_INT 0
68430: NONEQUAL
68431: OR
68432: IFFALSE 68454
// tmp := Delete ( tmp , i ) ;
68434: LD_ADDR_VAR 0 6
68438: PUSH
68439: LD_VAR 0 6
68443: PPUSH
68444: LD_VAR 0 4
68448: PPUSH
68449: CALL_OW 3
68453: ST_TO_ADDR
68454: GO 68354
68456: POP
68457: POP
// j := GetClosestHex ( unit , tmp ) ;
68458: LD_ADDR_VAR 0 5
68462: PUSH
68463: LD_VAR 0 1
68467: PPUSH
68468: LD_VAR 0 6
68472: PPUSH
68473: CALL 67749 0 2
68477: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68478: LD_VAR 0 1
68482: PPUSH
68483: LD_VAR 0 5
68487: PUSH
68488: LD_INT 1
68490: ARRAY
68491: PPUSH
68492: LD_VAR 0 5
68496: PUSH
68497: LD_INT 2
68499: ARRAY
68500: PPUSH
68501: CALL_OW 111
// end ;
68505: LD_VAR 0 3
68509: RET
// export function PrepareApemanSoldier ( ) ; begin
68510: LD_INT 0
68512: PPUSH
// uc_nation := 0 ;
68513: LD_ADDR_OWVAR 21
68517: PUSH
68518: LD_INT 0
68520: ST_TO_ADDR
// hc_sex := sex_male ;
68521: LD_ADDR_OWVAR 27
68525: PUSH
68526: LD_INT 1
68528: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68529: LD_ADDR_OWVAR 28
68533: PUSH
68534: LD_INT 15
68536: ST_TO_ADDR
// hc_gallery :=  ;
68537: LD_ADDR_OWVAR 33
68541: PUSH
68542: LD_STRING 
68544: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68545: LD_ADDR_OWVAR 31
68549: PUSH
68550: LD_INT 0
68552: PPUSH
68553: LD_INT 3
68555: PPUSH
68556: CALL_OW 12
68560: PUSH
68561: LD_INT 0
68563: PPUSH
68564: LD_INT 3
68566: PPUSH
68567: CALL_OW 12
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: ST_TO_ADDR
// end ;
68584: LD_VAR 0 1
68588: RET
// export function PrepareApemanEngineer ( ) ; begin
68589: LD_INT 0
68591: PPUSH
// uc_nation := 0 ;
68592: LD_ADDR_OWVAR 21
68596: PUSH
68597: LD_INT 0
68599: ST_TO_ADDR
// hc_sex := sex_male ;
68600: LD_ADDR_OWVAR 27
68604: PUSH
68605: LD_INT 1
68607: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68608: LD_ADDR_OWVAR 28
68612: PUSH
68613: LD_INT 16
68615: ST_TO_ADDR
// hc_gallery :=  ;
68616: LD_ADDR_OWVAR 33
68620: PUSH
68621: LD_STRING 
68623: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68624: LD_ADDR_OWVAR 31
68628: PUSH
68629: LD_INT 0
68631: PPUSH
68632: LD_INT 3
68634: PPUSH
68635: CALL_OW 12
68639: PUSH
68640: LD_INT 0
68642: PPUSH
68643: LD_INT 3
68645: PPUSH
68646: CALL_OW 12
68650: PUSH
68651: LD_INT 0
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: ST_TO_ADDR
// end ;
68663: LD_VAR 0 1
68667: RET
// export function PrepareApeman ( agressivity ) ; begin
68668: LD_INT 0
68670: PPUSH
// uc_side := 0 ;
68671: LD_ADDR_OWVAR 20
68675: PUSH
68676: LD_INT 0
68678: ST_TO_ADDR
// uc_nation := 0 ;
68679: LD_ADDR_OWVAR 21
68683: PUSH
68684: LD_INT 0
68686: ST_TO_ADDR
// hc_sex := sex_male ;
68687: LD_ADDR_OWVAR 27
68691: PUSH
68692: LD_INT 1
68694: ST_TO_ADDR
// hc_class := class_apeman ;
68695: LD_ADDR_OWVAR 28
68699: PUSH
68700: LD_INT 12
68702: ST_TO_ADDR
// hc_gallery :=  ;
68703: LD_ADDR_OWVAR 33
68707: PUSH
68708: LD_STRING 
68710: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68711: LD_ADDR_OWVAR 35
68715: PUSH
68716: LD_VAR 0 1
68720: NEG
68721: PPUSH
68722: LD_VAR 0 1
68726: PPUSH
68727: CALL_OW 12
68731: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68732: LD_ADDR_OWVAR 31
68736: PUSH
68737: LD_INT 0
68739: PPUSH
68740: LD_INT 3
68742: PPUSH
68743: CALL_OW 12
68747: PUSH
68748: LD_INT 0
68750: PPUSH
68751: LD_INT 3
68753: PPUSH
68754: CALL_OW 12
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: ST_TO_ADDR
// end ;
68771: LD_VAR 0 2
68775: RET
// export function PrepareTiger ( agressivity ) ; begin
68776: LD_INT 0
68778: PPUSH
// uc_side := 0 ;
68779: LD_ADDR_OWVAR 20
68783: PUSH
68784: LD_INT 0
68786: ST_TO_ADDR
// uc_nation := 0 ;
68787: LD_ADDR_OWVAR 21
68791: PUSH
68792: LD_INT 0
68794: ST_TO_ADDR
// hc_class := class_tiger ;
68795: LD_ADDR_OWVAR 28
68799: PUSH
68800: LD_INT 14
68802: ST_TO_ADDR
// hc_gallery :=  ;
68803: LD_ADDR_OWVAR 33
68807: PUSH
68808: LD_STRING 
68810: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68811: LD_ADDR_OWVAR 35
68815: PUSH
68816: LD_VAR 0 1
68820: NEG
68821: PPUSH
68822: LD_VAR 0 1
68826: PPUSH
68827: CALL_OW 12
68831: ST_TO_ADDR
// end ;
68832: LD_VAR 0 2
68836: RET
// export function PrepareEnchidna ( ) ; begin
68837: LD_INT 0
68839: PPUSH
// uc_side := 0 ;
68840: LD_ADDR_OWVAR 20
68844: PUSH
68845: LD_INT 0
68847: ST_TO_ADDR
// uc_nation := 0 ;
68848: LD_ADDR_OWVAR 21
68852: PUSH
68853: LD_INT 0
68855: ST_TO_ADDR
// hc_class := class_baggie ;
68856: LD_ADDR_OWVAR 28
68860: PUSH
68861: LD_INT 13
68863: ST_TO_ADDR
// hc_gallery :=  ;
68864: LD_ADDR_OWVAR 33
68868: PUSH
68869: LD_STRING 
68871: ST_TO_ADDR
// end ;
68872: LD_VAR 0 1
68876: RET
// export function PrepareFrog ( ) ; begin
68877: LD_INT 0
68879: PPUSH
// uc_side := 0 ;
68880: LD_ADDR_OWVAR 20
68884: PUSH
68885: LD_INT 0
68887: ST_TO_ADDR
// uc_nation := 0 ;
68888: LD_ADDR_OWVAR 21
68892: PUSH
68893: LD_INT 0
68895: ST_TO_ADDR
// hc_class := class_frog ;
68896: LD_ADDR_OWVAR 28
68900: PUSH
68901: LD_INT 19
68903: ST_TO_ADDR
// hc_gallery :=  ;
68904: LD_ADDR_OWVAR 33
68908: PUSH
68909: LD_STRING 
68911: ST_TO_ADDR
// end ;
68912: LD_VAR 0 1
68916: RET
// export function PrepareFish ( ) ; begin
68917: LD_INT 0
68919: PPUSH
// uc_side := 0 ;
68920: LD_ADDR_OWVAR 20
68924: PUSH
68925: LD_INT 0
68927: ST_TO_ADDR
// uc_nation := 0 ;
68928: LD_ADDR_OWVAR 21
68932: PUSH
68933: LD_INT 0
68935: ST_TO_ADDR
// hc_class := class_fish ;
68936: LD_ADDR_OWVAR 28
68940: PUSH
68941: LD_INT 20
68943: ST_TO_ADDR
// hc_gallery :=  ;
68944: LD_ADDR_OWVAR 33
68948: PUSH
68949: LD_STRING 
68951: ST_TO_ADDR
// end ;
68952: LD_VAR 0 1
68956: RET
// export function PrepareBird ( ) ; begin
68957: LD_INT 0
68959: PPUSH
// uc_side := 0 ;
68960: LD_ADDR_OWVAR 20
68964: PUSH
68965: LD_INT 0
68967: ST_TO_ADDR
// uc_nation := 0 ;
68968: LD_ADDR_OWVAR 21
68972: PUSH
68973: LD_INT 0
68975: ST_TO_ADDR
// hc_class := class_phororhacos ;
68976: LD_ADDR_OWVAR 28
68980: PUSH
68981: LD_INT 18
68983: ST_TO_ADDR
// hc_gallery :=  ;
68984: LD_ADDR_OWVAR 33
68988: PUSH
68989: LD_STRING 
68991: ST_TO_ADDR
// end ;
68992: LD_VAR 0 1
68996: RET
// export function PrepareHorse ( ) ; begin
68997: LD_INT 0
68999: PPUSH
// uc_side := 0 ;
69000: LD_ADDR_OWVAR 20
69004: PUSH
69005: LD_INT 0
69007: ST_TO_ADDR
// uc_nation := 0 ;
69008: LD_ADDR_OWVAR 21
69012: PUSH
69013: LD_INT 0
69015: ST_TO_ADDR
// hc_class := class_horse ;
69016: LD_ADDR_OWVAR 28
69020: PUSH
69021: LD_INT 21
69023: ST_TO_ADDR
// hc_gallery :=  ;
69024: LD_ADDR_OWVAR 33
69028: PUSH
69029: LD_STRING 
69031: ST_TO_ADDR
// end ;
69032: LD_VAR 0 1
69036: RET
// export function PrepareMastodont ( ) ; begin
69037: LD_INT 0
69039: PPUSH
// uc_side := 0 ;
69040: LD_ADDR_OWVAR 20
69044: PUSH
69045: LD_INT 0
69047: ST_TO_ADDR
// uc_nation := 0 ;
69048: LD_ADDR_OWVAR 21
69052: PUSH
69053: LD_INT 0
69055: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69056: LD_ADDR_OWVAR 37
69060: PUSH
69061: LD_INT 31
69063: ST_TO_ADDR
// vc_control := control_rider ;
69064: LD_ADDR_OWVAR 38
69068: PUSH
69069: LD_INT 4
69071: ST_TO_ADDR
// end ;
69072: LD_VAR 0 1
69076: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69077: LD_INT 0
69079: PPUSH
69080: PPUSH
69081: PPUSH
// uc_side = 0 ;
69082: LD_ADDR_OWVAR 20
69086: PUSH
69087: LD_INT 0
69089: ST_TO_ADDR
// uc_nation = 0 ;
69090: LD_ADDR_OWVAR 21
69094: PUSH
69095: LD_INT 0
69097: ST_TO_ADDR
// InitHc_All ( ) ;
69098: CALL_OW 584
// InitVc ;
69102: CALL_OW 20
// if mastodonts then
69106: LD_VAR 0 6
69110: IFFALSE 69177
// for i = 1 to mastodonts do
69112: LD_ADDR_VAR 0 11
69116: PUSH
69117: DOUBLE
69118: LD_INT 1
69120: DEC
69121: ST_TO_ADDR
69122: LD_VAR 0 6
69126: PUSH
69127: FOR_TO
69128: IFFALSE 69175
// begin vc_chassis := 31 ;
69130: LD_ADDR_OWVAR 37
69134: PUSH
69135: LD_INT 31
69137: ST_TO_ADDR
// vc_control := control_rider ;
69138: LD_ADDR_OWVAR 38
69142: PUSH
69143: LD_INT 4
69145: ST_TO_ADDR
// animal := CreateVehicle ;
69146: LD_ADDR_VAR 0 12
69150: PUSH
69151: CALL_OW 45
69155: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69156: LD_VAR 0 12
69160: PPUSH
69161: LD_VAR 0 8
69165: PPUSH
69166: LD_INT 0
69168: PPUSH
69169: CALL 71305 0 3
// end ;
69173: GO 69127
69175: POP
69176: POP
// if horses then
69177: LD_VAR 0 5
69181: IFFALSE 69248
// for i = 1 to horses do
69183: LD_ADDR_VAR 0 11
69187: PUSH
69188: DOUBLE
69189: LD_INT 1
69191: DEC
69192: ST_TO_ADDR
69193: LD_VAR 0 5
69197: PUSH
69198: FOR_TO
69199: IFFALSE 69246
// begin hc_class := 21 ;
69201: LD_ADDR_OWVAR 28
69205: PUSH
69206: LD_INT 21
69208: ST_TO_ADDR
// hc_gallery :=  ;
69209: LD_ADDR_OWVAR 33
69213: PUSH
69214: LD_STRING 
69216: ST_TO_ADDR
// animal := CreateHuman ;
69217: LD_ADDR_VAR 0 12
69221: PUSH
69222: CALL_OW 44
69226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69227: LD_VAR 0 12
69231: PPUSH
69232: LD_VAR 0 8
69236: PPUSH
69237: LD_INT 0
69239: PPUSH
69240: CALL 71305 0 3
// end ;
69244: GO 69198
69246: POP
69247: POP
// if birds then
69248: LD_VAR 0 1
69252: IFFALSE 69319
// for i = 1 to birds do
69254: LD_ADDR_VAR 0 11
69258: PUSH
69259: DOUBLE
69260: LD_INT 1
69262: DEC
69263: ST_TO_ADDR
69264: LD_VAR 0 1
69268: PUSH
69269: FOR_TO
69270: IFFALSE 69317
// begin hc_class := 18 ;
69272: LD_ADDR_OWVAR 28
69276: PUSH
69277: LD_INT 18
69279: ST_TO_ADDR
// hc_gallery =  ;
69280: LD_ADDR_OWVAR 33
69284: PUSH
69285: LD_STRING 
69287: ST_TO_ADDR
// animal := CreateHuman ;
69288: LD_ADDR_VAR 0 12
69292: PUSH
69293: CALL_OW 44
69297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69298: LD_VAR 0 12
69302: PPUSH
69303: LD_VAR 0 8
69307: PPUSH
69308: LD_INT 0
69310: PPUSH
69311: CALL 71305 0 3
// end ;
69315: GO 69269
69317: POP
69318: POP
// if tigers then
69319: LD_VAR 0 2
69323: IFFALSE 69407
// for i = 1 to tigers do
69325: LD_ADDR_VAR 0 11
69329: PUSH
69330: DOUBLE
69331: LD_INT 1
69333: DEC
69334: ST_TO_ADDR
69335: LD_VAR 0 2
69339: PUSH
69340: FOR_TO
69341: IFFALSE 69405
// begin hc_class = class_tiger ;
69343: LD_ADDR_OWVAR 28
69347: PUSH
69348: LD_INT 14
69350: ST_TO_ADDR
// hc_gallery =  ;
69351: LD_ADDR_OWVAR 33
69355: PUSH
69356: LD_STRING 
69358: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69359: LD_ADDR_OWVAR 35
69363: PUSH
69364: LD_INT 7
69366: NEG
69367: PPUSH
69368: LD_INT 7
69370: PPUSH
69371: CALL_OW 12
69375: ST_TO_ADDR
// animal := CreateHuman ;
69376: LD_ADDR_VAR 0 12
69380: PUSH
69381: CALL_OW 44
69385: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69386: LD_VAR 0 12
69390: PPUSH
69391: LD_VAR 0 8
69395: PPUSH
69396: LD_INT 0
69398: PPUSH
69399: CALL 71305 0 3
// end ;
69403: GO 69340
69405: POP
69406: POP
// if apemans then
69407: LD_VAR 0 3
69411: IFFALSE 69534
// for i = 1 to apemans do
69413: LD_ADDR_VAR 0 11
69417: PUSH
69418: DOUBLE
69419: LD_INT 1
69421: DEC
69422: ST_TO_ADDR
69423: LD_VAR 0 3
69427: PUSH
69428: FOR_TO
69429: IFFALSE 69532
// begin hc_class = class_apeman ;
69431: LD_ADDR_OWVAR 28
69435: PUSH
69436: LD_INT 12
69438: ST_TO_ADDR
// hc_gallery =  ;
69439: LD_ADDR_OWVAR 33
69443: PUSH
69444: LD_STRING 
69446: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69447: LD_ADDR_OWVAR 35
69451: PUSH
69452: LD_INT 2
69454: NEG
69455: PPUSH
69456: LD_INT 2
69458: PPUSH
69459: CALL_OW 12
69463: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69464: LD_ADDR_OWVAR 31
69468: PUSH
69469: LD_INT 1
69471: PPUSH
69472: LD_INT 3
69474: PPUSH
69475: CALL_OW 12
69479: PUSH
69480: LD_INT 1
69482: PPUSH
69483: LD_INT 3
69485: PPUSH
69486: CALL_OW 12
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: ST_TO_ADDR
// animal := CreateHuman ;
69503: LD_ADDR_VAR 0 12
69507: PUSH
69508: CALL_OW 44
69512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69513: LD_VAR 0 12
69517: PPUSH
69518: LD_VAR 0 8
69522: PPUSH
69523: LD_INT 0
69525: PPUSH
69526: CALL 71305 0 3
// end ;
69530: GO 69428
69532: POP
69533: POP
// if enchidnas then
69534: LD_VAR 0 4
69538: IFFALSE 69605
// for i = 1 to enchidnas do
69540: LD_ADDR_VAR 0 11
69544: PUSH
69545: DOUBLE
69546: LD_INT 1
69548: DEC
69549: ST_TO_ADDR
69550: LD_VAR 0 4
69554: PUSH
69555: FOR_TO
69556: IFFALSE 69603
// begin hc_class = 13 ;
69558: LD_ADDR_OWVAR 28
69562: PUSH
69563: LD_INT 13
69565: ST_TO_ADDR
// hc_gallery =  ;
69566: LD_ADDR_OWVAR 33
69570: PUSH
69571: LD_STRING 
69573: ST_TO_ADDR
// animal := CreateHuman ;
69574: LD_ADDR_VAR 0 12
69578: PUSH
69579: CALL_OW 44
69583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69584: LD_VAR 0 12
69588: PPUSH
69589: LD_VAR 0 8
69593: PPUSH
69594: LD_INT 0
69596: PPUSH
69597: CALL 71305 0 3
// end ;
69601: GO 69555
69603: POP
69604: POP
// if fishes then
69605: LD_VAR 0 7
69609: IFFALSE 69676
// for i = 1 to fishes do
69611: LD_ADDR_VAR 0 11
69615: PUSH
69616: DOUBLE
69617: LD_INT 1
69619: DEC
69620: ST_TO_ADDR
69621: LD_VAR 0 7
69625: PUSH
69626: FOR_TO
69627: IFFALSE 69674
// begin hc_class = 20 ;
69629: LD_ADDR_OWVAR 28
69633: PUSH
69634: LD_INT 20
69636: ST_TO_ADDR
// hc_gallery =  ;
69637: LD_ADDR_OWVAR 33
69641: PUSH
69642: LD_STRING 
69644: ST_TO_ADDR
// animal := CreateHuman ;
69645: LD_ADDR_VAR 0 12
69649: PUSH
69650: CALL_OW 44
69654: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69655: LD_VAR 0 12
69659: PPUSH
69660: LD_VAR 0 9
69664: PPUSH
69665: LD_INT 0
69667: PPUSH
69668: CALL 71305 0 3
// end ;
69672: GO 69626
69674: POP
69675: POP
// end ;
69676: LD_VAR 0 10
69680: RET
// export function WantHeal ( sci , unit ) ; begin
69681: LD_INT 0
69683: PPUSH
// if GetTaskList ( sci ) > 0 then
69684: LD_VAR 0 1
69688: PPUSH
69689: CALL_OW 437
69693: PUSH
69694: LD_INT 0
69696: GREATER
69697: IFFALSE 69767
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69699: LD_VAR 0 1
69703: PPUSH
69704: CALL_OW 437
69708: PUSH
69709: LD_INT 1
69711: ARRAY
69712: PUSH
69713: LD_INT 1
69715: ARRAY
69716: PUSH
69717: LD_STRING l
69719: EQUAL
69720: PUSH
69721: LD_VAR 0 1
69725: PPUSH
69726: CALL_OW 437
69730: PUSH
69731: LD_INT 1
69733: ARRAY
69734: PUSH
69735: LD_INT 4
69737: ARRAY
69738: PUSH
69739: LD_VAR 0 2
69743: EQUAL
69744: AND
69745: IFFALSE 69757
// result := true else
69747: LD_ADDR_VAR 0 3
69751: PUSH
69752: LD_INT 1
69754: ST_TO_ADDR
69755: GO 69765
// result := false ;
69757: LD_ADDR_VAR 0 3
69761: PUSH
69762: LD_INT 0
69764: ST_TO_ADDR
// end else
69765: GO 69775
// result := false ;
69767: LD_ADDR_VAR 0 3
69771: PUSH
69772: LD_INT 0
69774: ST_TO_ADDR
// end ;
69775: LD_VAR 0 3
69779: RET
// export function HealTarget ( sci ) ; begin
69780: LD_INT 0
69782: PPUSH
// if not sci then
69783: LD_VAR 0 1
69787: NOT
69788: IFFALSE 69792
// exit ;
69790: GO 69857
// result := 0 ;
69792: LD_ADDR_VAR 0 2
69796: PUSH
69797: LD_INT 0
69799: ST_TO_ADDR
// if GetTaskList ( sci ) then
69800: LD_VAR 0 1
69804: PPUSH
69805: CALL_OW 437
69809: IFFALSE 69857
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69811: LD_VAR 0 1
69815: PPUSH
69816: CALL_OW 437
69820: PUSH
69821: LD_INT 1
69823: ARRAY
69824: PUSH
69825: LD_INT 1
69827: ARRAY
69828: PUSH
69829: LD_STRING l
69831: EQUAL
69832: IFFALSE 69857
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69834: LD_ADDR_VAR 0 2
69838: PUSH
69839: LD_VAR 0 1
69843: PPUSH
69844: CALL_OW 437
69848: PUSH
69849: LD_INT 1
69851: ARRAY
69852: PUSH
69853: LD_INT 4
69855: ARRAY
69856: ST_TO_ADDR
// end ;
69857: LD_VAR 0 2
69861: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69862: LD_INT 0
69864: PPUSH
69865: PPUSH
69866: PPUSH
69867: PPUSH
// if not base_units then
69868: LD_VAR 0 1
69872: NOT
69873: IFFALSE 69877
// exit ;
69875: GO 69964
// result := false ;
69877: LD_ADDR_VAR 0 2
69881: PUSH
69882: LD_INT 0
69884: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69885: LD_ADDR_VAR 0 5
69889: PUSH
69890: LD_VAR 0 1
69894: PPUSH
69895: LD_INT 21
69897: PUSH
69898: LD_INT 3
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PPUSH
69905: CALL_OW 72
69909: ST_TO_ADDR
// if not tmp then
69910: LD_VAR 0 5
69914: NOT
69915: IFFALSE 69919
// exit ;
69917: GO 69964
// for i in tmp do
69919: LD_ADDR_VAR 0 3
69923: PUSH
69924: LD_VAR 0 5
69928: PUSH
69929: FOR_IN
69930: IFFALSE 69962
// begin result := EnemyInRange ( i , 22 ) ;
69932: LD_ADDR_VAR 0 2
69936: PUSH
69937: LD_VAR 0 3
69941: PPUSH
69942: LD_INT 22
69944: PPUSH
69945: CALL 67551 0 2
69949: ST_TO_ADDR
// if result then
69950: LD_VAR 0 2
69954: IFFALSE 69960
// exit ;
69956: POP
69957: POP
69958: GO 69964
// end ;
69960: GO 69929
69962: POP
69963: POP
// end ;
69964: LD_VAR 0 2
69968: RET
// export function FilterByTag ( units , tag ) ; begin
69969: LD_INT 0
69971: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69972: LD_ADDR_VAR 0 3
69976: PUSH
69977: LD_VAR 0 1
69981: PPUSH
69982: LD_INT 120
69984: PUSH
69985: LD_VAR 0 2
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PPUSH
69994: CALL_OW 72
69998: ST_TO_ADDR
// end ;
69999: LD_VAR 0 3
70003: RET
// export function IsDriver ( un ) ; begin
70004: LD_INT 0
70006: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70007: LD_ADDR_VAR 0 2
70011: PUSH
70012: LD_VAR 0 1
70016: PUSH
70017: LD_INT 55
70019: PUSH
70020: EMPTY
70021: LIST
70022: PPUSH
70023: CALL_OW 69
70027: IN
70028: ST_TO_ADDR
// end ;
70029: LD_VAR 0 2
70033: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70034: LD_INT 0
70036: PPUSH
70037: PPUSH
// list := [ ] ;
70038: LD_ADDR_VAR 0 5
70042: PUSH
70043: EMPTY
70044: ST_TO_ADDR
// case d of 0 :
70045: LD_VAR 0 3
70049: PUSH
70050: LD_INT 0
70052: DOUBLE
70053: EQUAL
70054: IFTRUE 70058
70056: GO 70191
70058: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70059: LD_ADDR_VAR 0 5
70063: PUSH
70064: LD_VAR 0 1
70068: PUSH
70069: LD_INT 4
70071: MINUS
70072: PUSH
70073: LD_VAR 0 2
70077: PUSH
70078: LD_INT 4
70080: MINUS
70081: PUSH
70082: LD_INT 2
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: LIST
70089: PUSH
70090: LD_VAR 0 1
70094: PUSH
70095: LD_INT 3
70097: MINUS
70098: PUSH
70099: LD_VAR 0 2
70103: PUSH
70104: LD_INT 1
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: LIST
70111: PUSH
70112: LD_VAR 0 1
70116: PUSH
70117: LD_INT 4
70119: PLUS
70120: PUSH
70121: LD_VAR 0 2
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: LIST
70133: PUSH
70134: LD_VAR 0 1
70138: PUSH
70139: LD_INT 3
70141: PLUS
70142: PUSH
70143: LD_VAR 0 2
70147: PUSH
70148: LD_INT 3
70150: PLUS
70151: PUSH
70152: LD_INT 5
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: LIST
70159: PUSH
70160: LD_VAR 0 1
70164: PUSH
70165: LD_VAR 0 2
70169: PUSH
70170: LD_INT 4
70172: PLUS
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: LIST
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: ST_TO_ADDR
// end ; 1 :
70189: GO 70889
70191: LD_INT 1
70193: DOUBLE
70194: EQUAL
70195: IFTRUE 70199
70197: GO 70332
70199: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70200: LD_ADDR_VAR 0 5
70204: PUSH
70205: LD_VAR 0 1
70209: PUSH
70210: LD_VAR 0 2
70214: PUSH
70215: LD_INT 4
70217: MINUS
70218: PUSH
70219: LD_INT 3
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: LIST
70226: PUSH
70227: LD_VAR 0 1
70231: PUSH
70232: LD_INT 3
70234: MINUS
70235: PUSH
70236: LD_VAR 0 2
70240: PUSH
70241: LD_INT 3
70243: MINUS
70244: PUSH
70245: LD_INT 2
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: LIST
70252: PUSH
70253: LD_VAR 0 1
70257: PUSH
70258: LD_INT 4
70260: MINUS
70261: PUSH
70262: LD_VAR 0 2
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: PUSH
70275: LD_VAR 0 1
70279: PUSH
70280: LD_VAR 0 2
70284: PUSH
70285: LD_INT 3
70287: PLUS
70288: PUSH
70289: LD_INT 0
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: LIST
70296: PUSH
70297: LD_VAR 0 1
70301: PUSH
70302: LD_INT 4
70304: PLUS
70305: PUSH
70306: LD_VAR 0 2
70310: PUSH
70311: LD_INT 4
70313: PLUS
70314: PUSH
70315: LD_INT 5
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: LIST
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: ST_TO_ADDR
// end ; 2 :
70330: GO 70889
70332: LD_INT 2
70334: DOUBLE
70335: EQUAL
70336: IFTRUE 70340
70338: GO 70469
70340: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70341: LD_ADDR_VAR 0 5
70345: PUSH
70346: LD_VAR 0 1
70350: PUSH
70351: LD_VAR 0 2
70355: PUSH
70356: LD_INT 3
70358: MINUS
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: LIST
70367: PUSH
70368: LD_VAR 0 1
70372: PUSH
70373: LD_INT 4
70375: PLUS
70376: PUSH
70377: LD_VAR 0 2
70381: PUSH
70382: LD_INT 4
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: PUSH
70390: LD_VAR 0 1
70394: PUSH
70395: LD_VAR 0 2
70399: PUSH
70400: LD_INT 4
70402: PLUS
70403: PUSH
70404: LD_INT 0
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: LIST
70411: PUSH
70412: LD_VAR 0 1
70416: PUSH
70417: LD_INT 3
70419: MINUS
70420: PUSH
70421: LD_VAR 0 2
70425: PUSH
70426: LD_INT 1
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: LIST
70433: PUSH
70434: LD_VAR 0 1
70438: PUSH
70439: LD_INT 4
70441: MINUS
70442: PUSH
70443: LD_VAR 0 2
70447: PUSH
70448: LD_INT 4
70450: MINUS
70451: PUSH
70452: LD_INT 2
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: LIST
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: ST_TO_ADDR
// end ; 3 :
70467: GO 70889
70469: LD_INT 3
70471: DOUBLE
70472: EQUAL
70473: IFTRUE 70477
70475: GO 70610
70477: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70478: LD_ADDR_VAR 0 5
70482: PUSH
70483: LD_VAR 0 1
70487: PUSH
70488: LD_INT 3
70490: PLUS
70491: PUSH
70492: LD_VAR 0 2
70496: PUSH
70497: LD_INT 4
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: LIST
70504: PUSH
70505: LD_VAR 0 1
70509: PUSH
70510: LD_INT 4
70512: PLUS
70513: PUSH
70514: LD_VAR 0 2
70518: PUSH
70519: LD_INT 4
70521: PLUS
70522: PUSH
70523: LD_INT 5
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: LIST
70530: PUSH
70531: LD_VAR 0 1
70535: PUSH
70536: LD_INT 4
70538: MINUS
70539: PUSH
70540: LD_VAR 0 2
70544: PUSH
70545: LD_INT 1
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: LIST
70552: PUSH
70553: LD_VAR 0 1
70557: PUSH
70558: LD_VAR 0 2
70562: PUSH
70563: LD_INT 4
70565: MINUS
70566: PUSH
70567: LD_INT 3
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: LIST
70574: PUSH
70575: LD_VAR 0 1
70579: PUSH
70580: LD_INT 3
70582: MINUS
70583: PUSH
70584: LD_VAR 0 2
70588: PUSH
70589: LD_INT 3
70591: MINUS
70592: PUSH
70593: LD_INT 2
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: LIST
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: ST_TO_ADDR
// end ; 4 :
70608: GO 70889
70610: LD_INT 4
70612: DOUBLE
70613: EQUAL
70614: IFTRUE 70618
70616: GO 70751
70618: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70619: LD_ADDR_VAR 0 5
70623: PUSH
70624: LD_VAR 0 1
70628: PUSH
70629: LD_VAR 0 2
70633: PUSH
70634: LD_INT 4
70636: PLUS
70637: PUSH
70638: LD_INT 0
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: LIST
70645: PUSH
70646: LD_VAR 0 1
70650: PUSH
70651: LD_INT 3
70653: PLUS
70654: PUSH
70655: LD_VAR 0 2
70659: PUSH
70660: LD_INT 3
70662: PLUS
70663: PUSH
70664: LD_INT 5
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: LIST
70671: PUSH
70672: LD_VAR 0 1
70676: PUSH
70677: LD_INT 4
70679: PLUS
70680: PUSH
70681: LD_VAR 0 2
70685: PUSH
70686: LD_INT 4
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: LIST
70693: PUSH
70694: LD_VAR 0 1
70698: PUSH
70699: LD_VAR 0 2
70703: PUSH
70704: LD_INT 3
70706: MINUS
70707: PUSH
70708: LD_INT 3
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: LIST
70715: PUSH
70716: LD_VAR 0 1
70720: PUSH
70721: LD_INT 4
70723: MINUS
70724: PUSH
70725: LD_VAR 0 2
70729: PUSH
70730: LD_INT 4
70732: MINUS
70733: PUSH
70734: LD_INT 2
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: LIST
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: ST_TO_ADDR
// end ; 5 :
70749: GO 70889
70751: LD_INT 5
70753: DOUBLE
70754: EQUAL
70755: IFTRUE 70759
70757: GO 70888
70759: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70760: LD_ADDR_VAR 0 5
70764: PUSH
70765: LD_VAR 0 1
70769: PUSH
70770: LD_INT 4
70772: MINUS
70773: PUSH
70774: LD_VAR 0 2
70778: PUSH
70779: LD_INT 1
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: LIST
70786: PUSH
70787: LD_VAR 0 1
70791: PUSH
70792: LD_VAR 0 2
70796: PUSH
70797: LD_INT 4
70799: MINUS
70800: PUSH
70801: LD_INT 3
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: LIST
70808: PUSH
70809: LD_VAR 0 1
70813: PUSH
70814: LD_INT 4
70816: PLUS
70817: PUSH
70818: LD_VAR 0 2
70822: PUSH
70823: LD_INT 4
70825: PLUS
70826: PUSH
70827: LD_INT 5
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: LIST
70834: PUSH
70835: LD_VAR 0 1
70839: PUSH
70840: LD_INT 3
70842: PLUS
70843: PUSH
70844: LD_VAR 0 2
70848: PUSH
70849: LD_INT 4
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: LIST
70856: PUSH
70857: LD_VAR 0 1
70861: PUSH
70862: LD_VAR 0 2
70866: PUSH
70867: LD_INT 3
70869: PLUS
70870: PUSH
70871: LD_INT 0
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: LIST
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: ST_TO_ADDR
// end ; end ;
70886: GO 70889
70888: POP
// result := list ;
70889: LD_ADDR_VAR 0 4
70893: PUSH
70894: LD_VAR 0 5
70898: ST_TO_ADDR
// end ;
70899: LD_VAR 0 4
70903: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70904: LD_INT 0
70906: PPUSH
70907: PPUSH
70908: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70909: LD_VAR 0 1
70913: NOT
70914: PUSH
70915: LD_VAR 0 2
70919: PUSH
70920: LD_INT 1
70922: PUSH
70923: LD_INT 2
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: LD_INT 4
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: IN
70938: NOT
70939: OR
70940: IFFALSE 70944
// exit ;
70942: GO 71027
// tmp := [ ] ;
70944: LD_ADDR_VAR 0 5
70948: PUSH
70949: EMPTY
70950: ST_TO_ADDR
// for i in units do
70951: LD_ADDR_VAR 0 4
70955: PUSH
70956: LD_VAR 0 1
70960: PUSH
70961: FOR_IN
70962: IFFALSE 70996
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70964: LD_ADDR_VAR 0 5
70968: PUSH
70969: LD_VAR 0 5
70973: PPUSH
70974: LD_VAR 0 4
70978: PPUSH
70979: LD_VAR 0 2
70983: PPUSH
70984: CALL_OW 259
70988: PPUSH
70989: CALL 72387 0 2
70993: ST_TO_ADDR
70994: GO 70961
70996: POP
70997: POP
// if not tmp then
70998: LD_VAR 0 5
71002: NOT
71003: IFFALSE 71007
// exit ;
71005: GO 71027
// result := SortListByListDesc ( units , tmp ) ;
71007: LD_ADDR_VAR 0 3
71011: PUSH
71012: LD_VAR 0 1
71016: PPUSH
71017: LD_VAR 0 5
71021: PPUSH
71022: CALL_OW 77
71026: ST_TO_ADDR
// end ;
71027: LD_VAR 0 3
71031: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71032: LD_INT 0
71034: PPUSH
71035: PPUSH
71036: PPUSH
// result := false ;
71037: LD_ADDR_VAR 0 3
71041: PUSH
71042: LD_INT 0
71044: ST_TO_ADDR
// if not building then
71045: LD_VAR 0 2
71049: NOT
71050: IFFALSE 71054
// exit ;
71052: GO 71192
// x := GetX ( building ) ;
71054: LD_ADDR_VAR 0 4
71058: PUSH
71059: LD_VAR 0 2
71063: PPUSH
71064: CALL_OW 250
71068: ST_TO_ADDR
// y := GetY ( building ) ;
71069: LD_ADDR_VAR 0 5
71073: PUSH
71074: LD_VAR 0 2
71078: PPUSH
71079: CALL_OW 251
71083: ST_TO_ADDR
// if not x or not y then
71084: LD_VAR 0 4
71088: NOT
71089: PUSH
71090: LD_VAR 0 5
71094: NOT
71095: OR
71096: IFFALSE 71100
// exit ;
71098: GO 71192
// if GetTaskList ( unit ) then
71100: LD_VAR 0 1
71104: PPUSH
71105: CALL_OW 437
71109: IFFALSE 71192
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71111: LD_STRING e
71113: PUSH
71114: LD_VAR 0 1
71118: PPUSH
71119: CALL_OW 437
71123: PUSH
71124: LD_INT 1
71126: ARRAY
71127: PUSH
71128: LD_INT 1
71130: ARRAY
71131: EQUAL
71132: PUSH
71133: LD_VAR 0 4
71137: PUSH
71138: LD_VAR 0 1
71142: PPUSH
71143: CALL_OW 437
71147: PUSH
71148: LD_INT 1
71150: ARRAY
71151: PUSH
71152: LD_INT 2
71154: ARRAY
71155: EQUAL
71156: AND
71157: PUSH
71158: LD_VAR 0 5
71162: PUSH
71163: LD_VAR 0 1
71167: PPUSH
71168: CALL_OW 437
71172: PUSH
71173: LD_INT 1
71175: ARRAY
71176: PUSH
71177: LD_INT 3
71179: ARRAY
71180: EQUAL
71181: AND
71182: IFFALSE 71192
// result := true end ;
71184: LD_ADDR_VAR 0 3
71188: PUSH
71189: LD_INT 1
71191: ST_TO_ADDR
// end ;
71192: LD_VAR 0 3
71196: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71197: LD_INT 0
71199: PPUSH
// result := false ;
71200: LD_ADDR_VAR 0 4
71204: PUSH
71205: LD_INT 0
71207: ST_TO_ADDR
// if GetTaskList ( unit ) then
71208: LD_VAR 0 1
71212: PPUSH
71213: CALL_OW 437
71217: IFFALSE 71300
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71219: LD_STRING M
71221: PUSH
71222: LD_VAR 0 1
71226: PPUSH
71227: CALL_OW 437
71231: PUSH
71232: LD_INT 1
71234: ARRAY
71235: PUSH
71236: LD_INT 1
71238: ARRAY
71239: EQUAL
71240: PUSH
71241: LD_VAR 0 2
71245: PUSH
71246: LD_VAR 0 1
71250: PPUSH
71251: CALL_OW 437
71255: PUSH
71256: LD_INT 1
71258: ARRAY
71259: PUSH
71260: LD_INT 2
71262: ARRAY
71263: EQUAL
71264: AND
71265: PUSH
71266: LD_VAR 0 3
71270: PUSH
71271: LD_VAR 0 1
71275: PPUSH
71276: CALL_OW 437
71280: PUSH
71281: LD_INT 1
71283: ARRAY
71284: PUSH
71285: LD_INT 3
71287: ARRAY
71288: EQUAL
71289: AND
71290: IFFALSE 71300
// result := true ;
71292: LD_ADDR_VAR 0 4
71296: PUSH
71297: LD_INT 1
71299: ST_TO_ADDR
// end ; end ;
71300: LD_VAR 0 4
71304: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71305: LD_INT 0
71307: PPUSH
71308: PPUSH
71309: PPUSH
71310: PPUSH
// if not unit or not area then
71311: LD_VAR 0 1
71315: NOT
71316: PUSH
71317: LD_VAR 0 2
71321: NOT
71322: OR
71323: IFFALSE 71327
// exit ;
71325: GO 71490
// tmp := AreaToList ( area , i ) ;
71327: LD_ADDR_VAR 0 6
71331: PUSH
71332: LD_VAR 0 2
71336: PPUSH
71337: LD_VAR 0 5
71341: PPUSH
71342: CALL_OW 517
71346: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71347: LD_ADDR_VAR 0 5
71351: PUSH
71352: DOUBLE
71353: LD_INT 1
71355: DEC
71356: ST_TO_ADDR
71357: LD_VAR 0 6
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: PUSH
71366: FOR_TO
71367: IFFALSE 71488
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71369: LD_ADDR_VAR 0 7
71373: PUSH
71374: LD_VAR 0 6
71378: PUSH
71379: LD_INT 1
71381: ARRAY
71382: PUSH
71383: LD_VAR 0 5
71387: ARRAY
71388: PUSH
71389: LD_VAR 0 6
71393: PUSH
71394: LD_INT 2
71396: ARRAY
71397: PUSH
71398: LD_VAR 0 5
71402: ARRAY
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
71408: LD_INT 92
71410: PUSH
71411: LD_VAR 0 7
71415: PUSH
71416: LD_INT 1
71418: ARRAY
71419: PUSH
71420: LD_VAR 0 7
71424: PUSH
71425: LD_INT 2
71427: ARRAY
71428: PUSH
71429: LD_INT 3
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: PPUSH
71438: CALL_OW 69
71442: PUSH
71443: LD_INT 0
71445: EQUAL
71446: IFFALSE 71486
// begin PlaceUnitArea ( unit , area , mode ) ;
71448: LD_VAR 0 1
71452: PPUSH
71453: LD_VAR 0 2
71457: PPUSH
71458: LD_VAR 0 3
71462: PPUSH
71463: CALL_OW 49
// result := IsPlaced ( unit ) ;
71467: LD_ADDR_VAR 0 4
71471: PUSH
71472: LD_VAR 0 1
71476: PPUSH
71477: CALL_OW 305
71481: ST_TO_ADDR
// exit ;
71482: POP
71483: POP
71484: GO 71490
// end ; end ;
71486: GO 71366
71488: POP
71489: POP
// end ;
71490: LD_VAR 0 4
71494: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71495: LD_INT 0
71497: PPUSH
71498: PPUSH
71499: PPUSH
// if not side or side > 8 then
71500: LD_VAR 0 1
71504: NOT
71505: PUSH
71506: LD_VAR 0 1
71510: PUSH
71511: LD_INT 8
71513: GREATER
71514: OR
71515: IFFALSE 71519
// exit ;
71517: GO 71706
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71519: LD_ADDR_VAR 0 4
71523: PUSH
71524: LD_INT 22
71526: PUSH
71527: LD_VAR 0 1
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 21
71538: PUSH
71539: LD_INT 3
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PPUSH
71550: CALL_OW 69
71554: ST_TO_ADDR
// if not tmp then
71555: LD_VAR 0 4
71559: NOT
71560: IFFALSE 71564
// exit ;
71562: GO 71706
// enable_addtolog := true ;
71564: LD_ADDR_OWVAR 81
71568: PUSH
71569: LD_INT 1
71571: ST_TO_ADDR
// AddToLog ( [ ) ;
71572: LD_STRING [
71574: PPUSH
71575: CALL_OW 561
// for i in tmp do
71579: LD_ADDR_VAR 0 3
71583: PUSH
71584: LD_VAR 0 4
71588: PUSH
71589: FOR_IN
71590: IFFALSE 71697
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71592: LD_STRING [
71594: PUSH
71595: LD_VAR 0 3
71599: PPUSH
71600: CALL_OW 266
71604: STR
71605: PUSH
71606: LD_STRING , 
71608: STR
71609: PUSH
71610: LD_VAR 0 3
71614: PPUSH
71615: CALL_OW 250
71619: STR
71620: PUSH
71621: LD_STRING , 
71623: STR
71624: PUSH
71625: LD_VAR 0 3
71629: PPUSH
71630: CALL_OW 251
71634: STR
71635: PUSH
71636: LD_STRING , 
71638: STR
71639: PUSH
71640: LD_VAR 0 3
71644: PPUSH
71645: CALL_OW 254
71649: STR
71650: PUSH
71651: LD_STRING , 
71653: STR
71654: PUSH
71655: LD_VAR 0 3
71659: PPUSH
71660: LD_INT 1
71662: PPUSH
71663: CALL_OW 268
71667: STR
71668: PUSH
71669: LD_STRING , 
71671: STR
71672: PUSH
71673: LD_VAR 0 3
71677: PPUSH
71678: LD_INT 2
71680: PPUSH
71681: CALL_OW 268
71685: STR
71686: PUSH
71687: LD_STRING ],
71689: STR
71690: PPUSH
71691: CALL_OW 561
// end ;
71695: GO 71589
71697: POP
71698: POP
// AddToLog ( ]; ) ;
71699: LD_STRING ];
71701: PPUSH
71702: CALL_OW 561
// end ;
71706: LD_VAR 0 2
71710: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71711: LD_INT 0
71713: PPUSH
71714: PPUSH
71715: PPUSH
71716: PPUSH
71717: PPUSH
// if not area or not rate or not max then
71718: LD_VAR 0 1
71722: NOT
71723: PUSH
71724: LD_VAR 0 2
71728: NOT
71729: OR
71730: PUSH
71731: LD_VAR 0 4
71735: NOT
71736: OR
71737: IFFALSE 71741
// exit ;
71739: GO 71930
// while 1 do
71741: LD_INT 1
71743: IFFALSE 71930
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71745: LD_ADDR_VAR 0 9
71749: PUSH
71750: LD_VAR 0 1
71754: PPUSH
71755: LD_INT 1
71757: PPUSH
71758: CALL_OW 287
71762: PUSH
71763: LD_INT 10
71765: MUL
71766: ST_TO_ADDR
// r := rate / 10 ;
71767: LD_ADDR_VAR 0 7
71771: PUSH
71772: LD_VAR 0 2
71776: PUSH
71777: LD_INT 10
71779: DIVREAL
71780: ST_TO_ADDR
// time := 1 1$00 ;
71781: LD_ADDR_VAR 0 8
71785: PUSH
71786: LD_INT 2100
71788: ST_TO_ADDR
// if amount < min then
71789: LD_VAR 0 9
71793: PUSH
71794: LD_VAR 0 3
71798: LESS
71799: IFFALSE 71817
// r := r * 2 else
71801: LD_ADDR_VAR 0 7
71805: PUSH
71806: LD_VAR 0 7
71810: PUSH
71811: LD_INT 2
71813: MUL
71814: ST_TO_ADDR
71815: GO 71843
// if amount > max then
71817: LD_VAR 0 9
71821: PUSH
71822: LD_VAR 0 4
71826: GREATER
71827: IFFALSE 71843
// r := r / 2 ;
71829: LD_ADDR_VAR 0 7
71833: PUSH
71834: LD_VAR 0 7
71838: PUSH
71839: LD_INT 2
71841: DIVREAL
71842: ST_TO_ADDR
// time := time / r ;
71843: LD_ADDR_VAR 0 8
71847: PUSH
71848: LD_VAR 0 8
71852: PUSH
71853: LD_VAR 0 7
71857: DIVREAL
71858: ST_TO_ADDR
// if time < 0 then
71859: LD_VAR 0 8
71863: PUSH
71864: LD_INT 0
71866: LESS
71867: IFFALSE 71884
// time := time * - 1 ;
71869: LD_ADDR_VAR 0 8
71873: PUSH
71874: LD_VAR 0 8
71878: PUSH
71879: LD_INT 1
71881: NEG
71882: MUL
71883: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71884: LD_VAR 0 8
71888: PUSH
71889: LD_INT 35
71891: PPUSH
71892: LD_INT 875
71894: PPUSH
71895: CALL_OW 12
71899: PLUS
71900: PPUSH
71901: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71905: LD_INT 1
71907: PPUSH
71908: LD_INT 5
71910: PPUSH
71911: CALL_OW 12
71915: PPUSH
71916: LD_VAR 0 1
71920: PPUSH
71921: LD_INT 1
71923: PPUSH
71924: CALL_OW 55
// end ;
71928: GO 71741
// end ;
71930: LD_VAR 0 5
71934: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71935: LD_INT 0
71937: PPUSH
71938: PPUSH
71939: PPUSH
71940: PPUSH
71941: PPUSH
71942: PPUSH
71943: PPUSH
71944: PPUSH
// if not turrets or not factories then
71945: LD_VAR 0 1
71949: NOT
71950: PUSH
71951: LD_VAR 0 2
71955: NOT
71956: OR
71957: IFFALSE 71961
// exit ;
71959: GO 72268
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71961: LD_ADDR_VAR 0 10
71965: PUSH
71966: LD_INT 5
71968: PUSH
71969: LD_INT 6
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: LD_INT 2
71978: PUSH
71979: LD_INT 4
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: LD_INT 3
71988: PUSH
71989: LD_INT 5
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 24
72003: PUSH
72004: LD_INT 25
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 23
72013: PUSH
72014: LD_INT 27
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 42
72027: PUSH
72028: LD_INT 43
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 44
72037: PUSH
72038: LD_INT 46
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 45
72047: PUSH
72048: LD_INT 47
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: LIST
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: LIST
72064: ST_TO_ADDR
// result := [ ] ;
72065: LD_ADDR_VAR 0 3
72069: PUSH
72070: EMPTY
72071: ST_TO_ADDR
// for i in turrets do
72072: LD_ADDR_VAR 0 4
72076: PUSH
72077: LD_VAR 0 1
72081: PUSH
72082: FOR_IN
72083: IFFALSE 72266
// begin nat := GetNation ( i ) ;
72085: LD_ADDR_VAR 0 7
72089: PUSH
72090: LD_VAR 0 4
72094: PPUSH
72095: CALL_OW 248
72099: ST_TO_ADDR
// weapon := 0 ;
72100: LD_ADDR_VAR 0 8
72104: PUSH
72105: LD_INT 0
72107: ST_TO_ADDR
// if not nat then
72108: LD_VAR 0 7
72112: NOT
72113: IFFALSE 72117
// continue ;
72115: GO 72082
// for j in list [ nat ] do
72117: LD_ADDR_VAR 0 5
72121: PUSH
72122: LD_VAR 0 10
72126: PUSH
72127: LD_VAR 0 7
72131: ARRAY
72132: PUSH
72133: FOR_IN
72134: IFFALSE 72175
// if GetBWeapon ( i ) = j [ 1 ] then
72136: LD_VAR 0 4
72140: PPUSH
72141: CALL_OW 269
72145: PUSH
72146: LD_VAR 0 5
72150: PUSH
72151: LD_INT 1
72153: ARRAY
72154: EQUAL
72155: IFFALSE 72173
// begin weapon := j [ 2 ] ;
72157: LD_ADDR_VAR 0 8
72161: PUSH
72162: LD_VAR 0 5
72166: PUSH
72167: LD_INT 2
72169: ARRAY
72170: ST_TO_ADDR
// break ;
72171: GO 72175
// end ;
72173: GO 72133
72175: POP
72176: POP
// if not weapon then
72177: LD_VAR 0 8
72181: NOT
72182: IFFALSE 72186
// continue ;
72184: GO 72082
// for k in factories do
72186: LD_ADDR_VAR 0 6
72190: PUSH
72191: LD_VAR 0 2
72195: PUSH
72196: FOR_IN
72197: IFFALSE 72262
// begin weapons := AvailableWeaponList ( k ) ;
72199: LD_ADDR_VAR 0 9
72203: PUSH
72204: LD_VAR 0 6
72208: PPUSH
72209: CALL_OW 478
72213: ST_TO_ADDR
// if not weapons then
72214: LD_VAR 0 9
72218: NOT
72219: IFFALSE 72223
// continue ;
72221: GO 72196
// if weapon in weapons then
72223: LD_VAR 0 8
72227: PUSH
72228: LD_VAR 0 9
72232: IN
72233: IFFALSE 72260
// begin result := [ i , weapon ] ;
72235: LD_ADDR_VAR 0 3
72239: PUSH
72240: LD_VAR 0 4
72244: PUSH
72245: LD_VAR 0 8
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: ST_TO_ADDR
// exit ;
72254: POP
72255: POP
72256: POP
72257: POP
72258: GO 72268
// end ; end ;
72260: GO 72196
72262: POP
72263: POP
// end ;
72264: GO 72082
72266: POP
72267: POP
// end ;
72268: LD_VAR 0 3
72272: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72273: LD_INT 0
72275: PPUSH
// if not side or side > 8 then
72276: LD_VAR 0 3
72280: NOT
72281: PUSH
72282: LD_VAR 0 3
72286: PUSH
72287: LD_INT 8
72289: GREATER
72290: OR
72291: IFFALSE 72295
// exit ;
72293: GO 72354
// if not range then
72295: LD_VAR 0 4
72299: NOT
72300: IFFALSE 72311
// range := - 12 ;
72302: LD_ADDR_VAR 0 4
72306: PUSH
72307: LD_INT 12
72309: NEG
72310: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72311: LD_VAR 0 1
72315: PPUSH
72316: LD_VAR 0 2
72320: PPUSH
72321: LD_VAR 0 3
72325: PPUSH
72326: LD_VAR 0 4
72330: PPUSH
72331: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72335: LD_VAR 0 1
72339: PPUSH
72340: LD_VAR 0 2
72344: PPUSH
72345: LD_VAR 0 3
72349: PPUSH
72350: CALL_OW 331
// end ;
72354: LD_VAR 0 5
72358: RET
// export function Video ( mode ) ; begin
72359: LD_INT 0
72361: PPUSH
// ingame_video = mode ;
72362: LD_ADDR_OWVAR 52
72366: PUSH
72367: LD_VAR 0 1
72371: ST_TO_ADDR
// interface_hidden = mode ;
72372: LD_ADDR_OWVAR 54
72376: PUSH
72377: LD_VAR 0 1
72381: ST_TO_ADDR
// end ;
72382: LD_VAR 0 2
72386: RET
// export function Join ( array , element ) ; begin
72387: LD_INT 0
72389: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72390: LD_ADDR_VAR 0 3
72394: PUSH
72395: LD_VAR 0 1
72399: PPUSH
72400: LD_VAR 0 1
72404: PUSH
72405: LD_INT 1
72407: PLUS
72408: PPUSH
72409: LD_VAR 0 2
72413: PPUSH
72414: CALL_OW 1
72418: ST_TO_ADDR
// end ;
72419: LD_VAR 0 3
72423: RET
// export function JoinUnion ( array , element ) ; begin
72424: LD_INT 0
72426: PPUSH
// result := array union element ;
72427: LD_ADDR_VAR 0 3
72431: PUSH
72432: LD_VAR 0 1
72436: PUSH
72437: LD_VAR 0 2
72441: UNION
72442: ST_TO_ADDR
// end ;
72443: LD_VAR 0 3
72447: RET
// export function GetBehemoths ( side ) ; begin
72448: LD_INT 0
72450: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72451: LD_ADDR_VAR 0 2
72455: PUSH
72456: LD_INT 22
72458: PUSH
72459: LD_VAR 0 1
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 31
72470: PUSH
72471: LD_INT 25
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PPUSH
72482: CALL_OW 69
72486: ST_TO_ADDR
// end ;
72487: LD_VAR 0 2
72491: RET
// export function Shuffle ( array ) ; var i , index ; begin
72492: LD_INT 0
72494: PPUSH
72495: PPUSH
72496: PPUSH
// result := [ ] ;
72497: LD_ADDR_VAR 0 2
72501: PUSH
72502: EMPTY
72503: ST_TO_ADDR
// if not array then
72504: LD_VAR 0 1
72508: NOT
72509: IFFALSE 72513
// exit ;
72511: GO 72612
// Randomize ;
72513: CALL_OW 10
// for i = array downto 1 do
72517: LD_ADDR_VAR 0 3
72521: PUSH
72522: DOUBLE
72523: LD_VAR 0 1
72527: INC
72528: ST_TO_ADDR
72529: LD_INT 1
72531: PUSH
72532: FOR_DOWNTO
72533: IFFALSE 72610
// begin index := rand ( 1 , array ) ;
72535: LD_ADDR_VAR 0 4
72539: PUSH
72540: LD_INT 1
72542: PPUSH
72543: LD_VAR 0 1
72547: PPUSH
72548: CALL_OW 12
72552: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72553: LD_ADDR_VAR 0 2
72557: PUSH
72558: LD_VAR 0 2
72562: PPUSH
72563: LD_VAR 0 2
72567: PUSH
72568: LD_INT 1
72570: PLUS
72571: PPUSH
72572: LD_VAR 0 1
72576: PUSH
72577: LD_VAR 0 4
72581: ARRAY
72582: PPUSH
72583: CALL_OW 2
72587: ST_TO_ADDR
// array := Delete ( array , index ) ;
72588: LD_ADDR_VAR 0 1
72592: PUSH
72593: LD_VAR 0 1
72597: PPUSH
72598: LD_VAR 0 4
72602: PPUSH
72603: CALL_OW 3
72607: ST_TO_ADDR
// end ;
72608: GO 72532
72610: POP
72611: POP
// end ;
72612: LD_VAR 0 2
72616: RET
// export function GetBaseMaterials ( base ) ; begin
72617: LD_INT 0
72619: PPUSH
// result := [ 0 , 0 , 0 ] ;
72620: LD_ADDR_VAR 0 2
72624: PUSH
72625: LD_INT 0
72627: PUSH
72628: LD_INT 0
72630: PUSH
72631: LD_INT 0
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: LIST
72638: ST_TO_ADDR
// if not base then
72639: LD_VAR 0 1
72643: NOT
72644: IFFALSE 72648
// exit ;
72646: GO 72697
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72648: LD_ADDR_VAR 0 2
72652: PUSH
72653: LD_VAR 0 1
72657: PPUSH
72658: LD_INT 1
72660: PPUSH
72661: CALL_OW 275
72665: PUSH
72666: LD_VAR 0 1
72670: PPUSH
72671: LD_INT 2
72673: PPUSH
72674: CALL_OW 275
72678: PUSH
72679: LD_VAR 0 1
72683: PPUSH
72684: LD_INT 3
72686: PPUSH
72687: CALL_OW 275
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: LIST
72696: ST_TO_ADDR
// end ;
72697: LD_VAR 0 2
72701: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72702: LD_INT 0
72704: PPUSH
72705: PPUSH
// result := array ;
72706: LD_ADDR_VAR 0 3
72710: PUSH
72711: LD_VAR 0 1
72715: ST_TO_ADDR
// if size >= result then
72716: LD_VAR 0 2
72720: PUSH
72721: LD_VAR 0 3
72725: GREATEREQUAL
72726: IFFALSE 72730
// exit ;
72728: GO 72780
// if size then
72730: LD_VAR 0 2
72734: IFFALSE 72780
// for i := array downto size do
72736: LD_ADDR_VAR 0 4
72740: PUSH
72741: DOUBLE
72742: LD_VAR 0 1
72746: INC
72747: ST_TO_ADDR
72748: LD_VAR 0 2
72752: PUSH
72753: FOR_DOWNTO
72754: IFFALSE 72778
// result := Delete ( result , result ) ;
72756: LD_ADDR_VAR 0 3
72760: PUSH
72761: LD_VAR 0 3
72765: PPUSH
72766: LD_VAR 0 3
72770: PPUSH
72771: CALL_OW 3
72775: ST_TO_ADDR
72776: GO 72753
72778: POP
72779: POP
// end ;
72780: LD_VAR 0 3
72784: RET
// export function ComExit ( unit ) ; var tmp ; begin
72785: LD_INT 0
72787: PPUSH
72788: PPUSH
// if not IsInUnit ( unit ) then
72789: LD_VAR 0 1
72793: PPUSH
72794: CALL_OW 310
72798: NOT
72799: IFFALSE 72803
// exit ;
72801: GO 72863
// tmp := IsInUnit ( unit ) ;
72803: LD_ADDR_VAR 0 3
72807: PUSH
72808: LD_VAR 0 1
72812: PPUSH
72813: CALL_OW 310
72817: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72818: LD_VAR 0 3
72822: PPUSH
72823: CALL_OW 247
72827: PUSH
72828: LD_INT 2
72830: EQUAL
72831: IFFALSE 72844
// ComExitVehicle ( unit ) else
72833: LD_VAR 0 1
72837: PPUSH
72838: CALL_OW 121
72842: GO 72853
// ComExitBuilding ( unit ) ;
72844: LD_VAR 0 1
72848: PPUSH
72849: CALL_OW 122
// result := tmp ;
72853: LD_ADDR_VAR 0 2
72857: PUSH
72858: LD_VAR 0 3
72862: ST_TO_ADDR
// end ;
72863: LD_VAR 0 2
72867: RET
// export function ComExitAll ( units ) ; var i ; begin
72868: LD_INT 0
72870: PPUSH
72871: PPUSH
// if not units then
72872: LD_VAR 0 1
72876: NOT
72877: IFFALSE 72881
// exit ;
72879: GO 72907
// for i in units do
72881: LD_ADDR_VAR 0 3
72885: PUSH
72886: LD_VAR 0 1
72890: PUSH
72891: FOR_IN
72892: IFFALSE 72905
// ComExit ( i ) ;
72894: LD_VAR 0 3
72898: PPUSH
72899: CALL 72785 0 1
72903: GO 72891
72905: POP
72906: POP
// end ;
72907: LD_VAR 0 2
72911: RET
// export function ResetHc ; begin
72912: LD_INT 0
72914: PPUSH
// InitHc ;
72915: CALL_OW 19
// hc_importance := 0 ;
72919: LD_ADDR_OWVAR 32
72923: PUSH
72924: LD_INT 0
72926: ST_TO_ADDR
// end ;
72927: LD_VAR 0 1
72931: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72932: LD_INT 0
72934: PPUSH
72935: PPUSH
72936: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72937: LD_ADDR_VAR 0 6
72941: PUSH
72942: LD_VAR 0 1
72946: PUSH
72947: LD_VAR 0 3
72951: PLUS
72952: PUSH
72953: LD_INT 2
72955: DIV
72956: ST_TO_ADDR
// if _x < 0 then
72957: LD_VAR 0 6
72961: PUSH
72962: LD_INT 0
72964: LESS
72965: IFFALSE 72982
// _x := _x * - 1 ;
72967: LD_ADDR_VAR 0 6
72971: PUSH
72972: LD_VAR 0 6
72976: PUSH
72977: LD_INT 1
72979: NEG
72980: MUL
72981: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72982: LD_ADDR_VAR 0 7
72986: PUSH
72987: LD_VAR 0 2
72991: PUSH
72992: LD_VAR 0 4
72996: PLUS
72997: PUSH
72998: LD_INT 2
73000: DIV
73001: ST_TO_ADDR
// if _y < 0 then
73002: LD_VAR 0 7
73006: PUSH
73007: LD_INT 0
73009: LESS
73010: IFFALSE 73027
// _y := _y * - 1 ;
73012: LD_ADDR_VAR 0 7
73016: PUSH
73017: LD_VAR 0 7
73021: PUSH
73022: LD_INT 1
73024: NEG
73025: MUL
73026: ST_TO_ADDR
// result := [ _x , _y ] ;
73027: LD_ADDR_VAR 0 5
73031: PUSH
73032: LD_VAR 0 6
73036: PUSH
73037: LD_VAR 0 7
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: ST_TO_ADDR
// end ;
73046: LD_VAR 0 5
73050: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73051: LD_INT 0
73053: PPUSH
73054: PPUSH
73055: PPUSH
73056: PPUSH
// task := GetTaskList ( unit ) ;
73057: LD_ADDR_VAR 0 7
73061: PUSH
73062: LD_VAR 0 1
73066: PPUSH
73067: CALL_OW 437
73071: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73072: LD_VAR 0 7
73076: NOT
73077: PUSH
73078: LD_VAR 0 1
73082: PPUSH
73083: LD_VAR 0 2
73087: PPUSH
73088: CALL_OW 308
73092: NOT
73093: AND
73094: IFFALSE 73098
// exit ;
73096: GO 73216
// if IsInArea ( unit , area ) then
73098: LD_VAR 0 1
73102: PPUSH
73103: LD_VAR 0 2
73107: PPUSH
73108: CALL_OW 308
73112: IFFALSE 73130
// begin ComMoveToArea ( unit , goAway ) ;
73114: LD_VAR 0 1
73118: PPUSH
73119: LD_VAR 0 3
73123: PPUSH
73124: CALL_OW 113
// exit ;
73128: GO 73216
// end ; if task [ 1 ] [ 1 ] <> M then
73130: LD_VAR 0 7
73134: PUSH
73135: LD_INT 1
73137: ARRAY
73138: PUSH
73139: LD_INT 1
73141: ARRAY
73142: PUSH
73143: LD_STRING M
73145: NONEQUAL
73146: IFFALSE 73150
// exit ;
73148: GO 73216
// x := task [ 1 ] [ 2 ] ;
73150: LD_ADDR_VAR 0 5
73154: PUSH
73155: LD_VAR 0 7
73159: PUSH
73160: LD_INT 1
73162: ARRAY
73163: PUSH
73164: LD_INT 2
73166: ARRAY
73167: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73168: LD_ADDR_VAR 0 6
73172: PUSH
73173: LD_VAR 0 7
73177: PUSH
73178: LD_INT 1
73180: ARRAY
73181: PUSH
73182: LD_INT 3
73184: ARRAY
73185: ST_TO_ADDR
// if InArea ( x , y , area ) then
73186: LD_VAR 0 5
73190: PPUSH
73191: LD_VAR 0 6
73195: PPUSH
73196: LD_VAR 0 2
73200: PPUSH
73201: CALL_OW 309
73205: IFFALSE 73216
// ComStop ( unit ) ;
73207: LD_VAR 0 1
73211: PPUSH
73212: CALL_OW 141
// end ;
73216: LD_VAR 0 4
73220: RET
// export function Abs ( value ) ; begin
73221: LD_INT 0
73223: PPUSH
// result := value ;
73224: LD_ADDR_VAR 0 2
73228: PUSH
73229: LD_VAR 0 1
73233: ST_TO_ADDR
// if value < 0 then
73234: LD_VAR 0 1
73238: PUSH
73239: LD_INT 0
73241: LESS
73242: IFFALSE 73259
// result := value * - 1 ;
73244: LD_ADDR_VAR 0 2
73248: PUSH
73249: LD_VAR 0 1
73253: PUSH
73254: LD_INT 1
73256: NEG
73257: MUL
73258: ST_TO_ADDR
// end ;
73259: LD_VAR 0 2
73263: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73264: LD_INT 0
73266: PPUSH
73267: PPUSH
73268: PPUSH
73269: PPUSH
73270: PPUSH
73271: PPUSH
73272: PPUSH
73273: PPUSH
// if not unit or not building then
73274: LD_VAR 0 1
73278: NOT
73279: PUSH
73280: LD_VAR 0 2
73284: NOT
73285: OR
73286: IFFALSE 73290
// exit ;
73288: GO 73516
// x := GetX ( building ) ;
73290: LD_ADDR_VAR 0 4
73294: PUSH
73295: LD_VAR 0 2
73299: PPUSH
73300: CALL_OW 250
73304: ST_TO_ADDR
// y := GetY ( building ) ;
73305: LD_ADDR_VAR 0 6
73309: PUSH
73310: LD_VAR 0 2
73314: PPUSH
73315: CALL_OW 251
73319: ST_TO_ADDR
// d := GetDir ( building ) ;
73320: LD_ADDR_VAR 0 8
73324: PUSH
73325: LD_VAR 0 2
73329: PPUSH
73330: CALL_OW 254
73334: ST_TO_ADDR
// r := 4 ;
73335: LD_ADDR_VAR 0 9
73339: PUSH
73340: LD_INT 4
73342: ST_TO_ADDR
// for i := 1 to 5 do
73343: LD_ADDR_VAR 0 10
73347: PUSH
73348: DOUBLE
73349: LD_INT 1
73351: DEC
73352: ST_TO_ADDR
73353: LD_INT 5
73355: PUSH
73356: FOR_TO
73357: IFFALSE 73514
// begin _x := ShiftX ( x , d , r + i ) ;
73359: LD_ADDR_VAR 0 5
73363: PUSH
73364: LD_VAR 0 4
73368: PPUSH
73369: LD_VAR 0 8
73373: PPUSH
73374: LD_VAR 0 9
73378: PUSH
73379: LD_VAR 0 10
73383: PLUS
73384: PPUSH
73385: CALL_OW 272
73389: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73390: LD_ADDR_VAR 0 7
73394: PUSH
73395: LD_VAR 0 6
73399: PPUSH
73400: LD_VAR 0 8
73404: PPUSH
73405: LD_VAR 0 9
73409: PUSH
73410: LD_VAR 0 10
73414: PLUS
73415: PPUSH
73416: CALL_OW 273
73420: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73421: LD_VAR 0 5
73425: PPUSH
73426: LD_VAR 0 7
73430: PPUSH
73431: CALL_OW 488
73435: PUSH
73436: LD_VAR 0 5
73440: PPUSH
73441: LD_VAR 0 7
73445: PPUSH
73446: CALL_OW 428
73450: PPUSH
73451: CALL_OW 247
73455: PUSH
73456: LD_INT 3
73458: PUSH
73459: LD_INT 2
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: IN
73466: NOT
73467: AND
73468: IFFALSE 73512
// begin ComMoveXY ( unit , _x , _y ) ;
73470: LD_VAR 0 1
73474: PPUSH
73475: LD_VAR 0 5
73479: PPUSH
73480: LD_VAR 0 7
73484: PPUSH
73485: CALL_OW 111
// result := [ _x , _y ] ;
73489: LD_ADDR_VAR 0 3
73493: PUSH
73494: LD_VAR 0 5
73498: PUSH
73499: LD_VAR 0 7
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: ST_TO_ADDR
// exit ;
73508: POP
73509: POP
73510: GO 73516
// end ; end ;
73512: GO 73356
73514: POP
73515: POP
// end ;
73516: LD_VAR 0 3
73520: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73521: LD_INT 0
73523: PPUSH
73524: PPUSH
73525: PPUSH
// result := 0 ;
73526: LD_ADDR_VAR 0 3
73530: PUSH
73531: LD_INT 0
73533: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73534: LD_VAR 0 1
73538: PUSH
73539: LD_INT 0
73541: LESS
73542: PUSH
73543: LD_VAR 0 1
73547: PUSH
73548: LD_INT 8
73550: GREATER
73551: OR
73552: PUSH
73553: LD_VAR 0 2
73557: PUSH
73558: LD_INT 0
73560: LESS
73561: OR
73562: PUSH
73563: LD_VAR 0 2
73567: PUSH
73568: LD_INT 8
73570: GREATER
73571: OR
73572: IFFALSE 73576
// exit ;
73574: GO 73651
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73576: LD_ADDR_VAR 0 4
73580: PUSH
73581: LD_INT 22
73583: PUSH
73584: LD_VAR 0 2
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PPUSH
73593: CALL_OW 69
73597: PUSH
73598: FOR_IN
73599: IFFALSE 73649
// begin un := UnitShoot ( i ) ;
73601: LD_ADDR_VAR 0 5
73605: PUSH
73606: LD_VAR 0 4
73610: PPUSH
73611: CALL_OW 504
73615: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73616: LD_VAR 0 5
73620: PPUSH
73621: CALL_OW 255
73625: PUSH
73626: LD_VAR 0 1
73630: EQUAL
73631: IFFALSE 73647
// begin result := un ;
73633: LD_ADDR_VAR 0 3
73637: PUSH
73638: LD_VAR 0 5
73642: ST_TO_ADDR
// exit ;
73643: POP
73644: POP
73645: GO 73651
// end ; end ;
73647: GO 73598
73649: POP
73650: POP
// end ;
73651: LD_VAR 0 3
73655: RET
// export function GetCargoBay ( units ) ; begin
73656: LD_INT 0
73658: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73659: LD_ADDR_VAR 0 2
73663: PUSH
73664: LD_VAR 0 1
73668: PPUSH
73669: LD_INT 2
73671: PUSH
73672: LD_INT 34
73674: PUSH
73675: LD_INT 12
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 34
73684: PUSH
73685: LD_INT 51
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PUSH
73692: LD_INT 34
73694: PUSH
73695: LD_INT 32
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: PUSH
73702: LD_INT 34
73704: PUSH
73705: LD_INT 89
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: PPUSH
73719: CALL_OW 72
73723: ST_TO_ADDR
// end ;
73724: LD_VAR 0 2
73728: RET
// export function Negate ( value ) ; begin
73729: LD_INT 0
73731: PPUSH
// result := not value ;
73732: LD_ADDR_VAR 0 2
73736: PUSH
73737: LD_VAR 0 1
73741: NOT
73742: ST_TO_ADDR
// end ;
73743: LD_VAR 0 2
73747: RET
// export function Inc ( value ) ; begin
73748: LD_INT 0
73750: PPUSH
// result := value + 1 ;
73751: LD_ADDR_VAR 0 2
73755: PUSH
73756: LD_VAR 0 1
73760: PUSH
73761: LD_INT 1
73763: PLUS
73764: ST_TO_ADDR
// end ;
73765: LD_VAR 0 2
73769: RET
// export function Dec ( value ) ; begin
73770: LD_INT 0
73772: PPUSH
// result := value - 1 ;
73773: LD_ADDR_VAR 0 2
73777: PUSH
73778: LD_VAR 0 1
73782: PUSH
73783: LD_INT 1
73785: MINUS
73786: ST_TO_ADDR
// end ;
73787: LD_VAR 0 2
73791: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73792: LD_INT 0
73794: PPUSH
73795: PPUSH
73796: PPUSH
73797: PPUSH
73798: PPUSH
73799: PPUSH
73800: PPUSH
73801: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73802: LD_VAR 0 1
73806: PPUSH
73807: LD_VAR 0 2
73811: PPUSH
73812: CALL_OW 488
73816: NOT
73817: PUSH
73818: LD_VAR 0 3
73822: PPUSH
73823: LD_VAR 0 4
73827: PPUSH
73828: CALL_OW 488
73832: NOT
73833: OR
73834: IFFALSE 73847
// begin result := - 1 ;
73836: LD_ADDR_VAR 0 5
73840: PUSH
73841: LD_INT 1
73843: NEG
73844: ST_TO_ADDR
// exit ;
73845: GO 74082
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73847: LD_ADDR_VAR 0 12
73851: PUSH
73852: LD_VAR 0 1
73856: PPUSH
73857: LD_VAR 0 2
73861: PPUSH
73862: LD_VAR 0 3
73866: PPUSH
73867: LD_VAR 0 4
73871: PPUSH
73872: CALL 72932 0 4
73876: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73877: LD_ADDR_VAR 0 11
73881: PUSH
73882: LD_VAR 0 1
73886: PPUSH
73887: LD_VAR 0 2
73891: PPUSH
73892: LD_VAR 0 12
73896: PUSH
73897: LD_INT 1
73899: ARRAY
73900: PPUSH
73901: LD_VAR 0 12
73905: PUSH
73906: LD_INT 2
73908: ARRAY
73909: PPUSH
73910: CALL_OW 298
73914: ST_TO_ADDR
// distance := 9999 ;
73915: LD_ADDR_VAR 0 10
73919: PUSH
73920: LD_INT 9999
73922: ST_TO_ADDR
// for i := 0 to 5 do
73923: LD_ADDR_VAR 0 6
73927: PUSH
73928: DOUBLE
73929: LD_INT 0
73931: DEC
73932: ST_TO_ADDR
73933: LD_INT 5
73935: PUSH
73936: FOR_TO
73937: IFFALSE 74080
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73939: LD_ADDR_VAR 0 7
73943: PUSH
73944: LD_VAR 0 1
73948: PPUSH
73949: LD_VAR 0 6
73953: PPUSH
73954: LD_VAR 0 11
73958: PPUSH
73959: CALL_OW 272
73963: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73964: LD_ADDR_VAR 0 8
73968: PUSH
73969: LD_VAR 0 2
73973: PPUSH
73974: LD_VAR 0 6
73978: PPUSH
73979: LD_VAR 0 11
73983: PPUSH
73984: CALL_OW 273
73988: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73989: LD_VAR 0 7
73993: PPUSH
73994: LD_VAR 0 8
73998: PPUSH
73999: CALL_OW 488
74003: NOT
74004: IFFALSE 74008
// continue ;
74006: GO 73936
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74008: LD_ADDR_VAR 0 9
74012: PUSH
74013: LD_VAR 0 12
74017: PUSH
74018: LD_INT 1
74020: ARRAY
74021: PPUSH
74022: LD_VAR 0 12
74026: PUSH
74027: LD_INT 2
74029: ARRAY
74030: PPUSH
74031: LD_VAR 0 7
74035: PPUSH
74036: LD_VAR 0 8
74040: PPUSH
74041: CALL_OW 298
74045: ST_TO_ADDR
// if tmp < distance then
74046: LD_VAR 0 9
74050: PUSH
74051: LD_VAR 0 10
74055: LESS
74056: IFFALSE 74078
// begin result := i ;
74058: LD_ADDR_VAR 0 5
74062: PUSH
74063: LD_VAR 0 6
74067: ST_TO_ADDR
// distance := tmp ;
74068: LD_ADDR_VAR 0 10
74072: PUSH
74073: LD_VAR 0 9
74077: ST_TO_ADDR
// end ; end ;
74078: GO 73936
74080: POP
74081: POP
// end ;
74082: LD_VAR 0 5
74086: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74087: LD_INT 0
74089: PPUSH
74090: PPUSH
// if not driver or not IsInUnit ( driver ) then
74091: LD_VAR 0 1
74095: NOT
74096: PUSH
74097: LD_VAR 0 1
74101: PPUSH
74102: CALL_OW 310
74106: NOT
74107: OR
74108: IFFALSE 74112
// exit ;
74110: GO 74202
// vehicle := IsInUnit ( driver ) ;
74112: LD_ADDR_VAR 0 3
74116: PUSH
74117: LD_VAR 0 1
74121: PPUSH
74122: CALL_OW 310
74126: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74127: LD_VAR 0 1
74131: PPUSH
74132: LD_STRING \
74134: PUSH
74135: LD_INT 0
74137: PUSH
74138: LD_INT 0
74140: PUSH
74141: LD_INT 0
74143: PUSH
74144: LD_INT 0
74146: PUSH
74147: LD_INT 0
74149: PUSH
74150: LD_INT 0
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: LIST
74157: LIST
74158: LIST
74159: LIST
74160: LIST
74161: PUSH
74162: LD_STRING E
74164: PUSH
74165: LD_INT 0
74167: PUSH
74168: LD_INT 0
74170: PUSH
74171: LD_VAR 0 3
74175: PUSH
74176: LD_INT 0
74178: PUSH
74179: LD_INT 0
74181: PUSH
74182: LD_INT 0
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PPUSH
74198: CALL_OW 446
// end ;
74202: LD_VAR 0 2
74206: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74207: LD_INT 0
74209: PPUSH
74210: PPUSH
// if not driver or not IsInUnit ( driver ) then
74211: LD_VAR 0 1
74215: NOT
74216: PUSH
74217: LD_VAR 0 1
74221: PPUSH
74222: CALL_OW 310
74226: NOT
74227: OR
74228: IFFALSE 74232
// exit ;
74230: GO 74322
// vehicle := IsInUnit ( driver ) ;
74232: LD_ADDR_VAR 0 3
74236: PUSH
74237: LD_VAR 0 1
74241: PPUSH
74242: CALL_OW 310
74246: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74247: LD_VAR 0 1
74251: PPUSH
74252: LD_STRING \
74254: PUSH
74255: LD_INT 0
74257: PUSH
74258: LD_INT 0
74260: PUSH
74261: LD_INT 0
74263: PUSH
74264: LD_INT 0
74266: PUSH
74267: LD_INT 0
74269: PUSH
74270: LD_INT 0
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: PUSH
74282: LD_STRING E
74284: PUSH
74285: LD_INT 0
74287: PUSH
74288: LD_INT 0
74290: PUSH
74291: LD_VAR 0 3
74295: PUSH
74296: LD_INT 0
74298: PUSH
74299: LD_INT 0
74301: PUSH
74302: LD_INT 0
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PPUSH
74318: CALL_OW 447
// end ;
74322: LD_VAR 0 2
74326: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74327: LD_INT 0
74329: PPUSH
74330: PPUSH
74331: PPUSH
// tmp := [ ] ;
74332: LD_ADDR_VAR 0 5
74336: PUSH
74337: EMPTY
74338: ST_TO_ADDR
// for i in units do
74339: LD_ADDR_VAR 0 4
74343: PUSH
74344: LD_VAR 0 1
74348: PUSH
74349: FOR_IN
74350: IFFALSE 74388
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74352: LD_ADDR_VAR 0 5
74356: PUSH
74357: LD_VAR 0 5
74361: PPUSH
74362: LD_VAR 0 5
74366: PUSH
74367: LD_INT 1
74369: PLUS
74370: PPUSH
74371: LD_VAR 0 4
74375: PPUSH
74376: CALL_OW 256
74380: PPUSH
74381: CALL_OW 2
74385: ST_TO_ADDR
74386: GO 74349
74388: POP
74389: POP
// if not tmp then
74390: LD_VAR 0 5
74394: NOT
74395: IFFALSE 74399
// exit ;
74397: GO 74447
// if asc then
74399: LD_VAR 0 2
74403: IFFALSE 74427
// result := SortListByListAsc ( units , tmp ) else
74405: LD_ADDR_VAR 0 3
74409: PUSH
74410: LD_VAR 0 1
74414: PPUSH
74415: LD_VAR 0 5
74419: PPUSH
74420: CALL_OW 76
74424: ST_TO_ADDR
74425: GO 74447
// result := SortListByListDesc ( units , tmp ) ;
74427: LD_ADDR_VAR 0 3
74431: PUSH
74432: LD_VAR 0 1
74436: PPUSH
74437: LD_VAR 0 5
74441: PPUSH
74442: CALL_OW 77
74446: ST_TO_ADDR
// end ;
74447: LD_VAR 0 3
74451: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74452: LD_INT 0
74454: PPUSH
74455: PPUSH
// task := GetTaskList ( mech ) ;
74456: LD_ADDR_VAR 0 4
74460: PUSH
74461: LD_VAR 0 1
74465: PPUSH
74466: CALL_OW 437
74470: ST_TO_ADDR
// if not task then
74471: LD_VAR 0 4
74475: NOT
74476: IFFALSE 74480
// exit ;
74478: GO 74522
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74480: LD_ADDR_VAR 0 3
74484: PUSH
74485: LD_VAR 0 4
74489: PUSH
74490: LD_INT 1
74492: ARRAY
74493: PUSH
74494: LD_INT 1
74496: ARRAY
74497: PUSH
74498: LD_STRING r
74500: EQUAL
74501: PUSH
74502: LD_VAR 0 4
74506: PUSH
74507: LD_INT 1
74509: ARRAY
74510: PUSH
74511: LD_INT 4
74513: ARRAY
74514: PUSH
74515: LD_VAR 0 2
74519: EQUAL
74520: AND
74521: ST_TO_ADDR
// end ;
74522: LD_VAR 0 3
74526: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74527: LD_INT 0
74529: PPUSH
// SetDir ( unit , d ) ;
74530: LD_VAR 0 1
74534: PPUSH
74535: LD_VAR 0 4
74539: PPUSH
74540: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74544: LD_VAR 0 1
74548: PPUSH
74549: LD_VAR 0 2
74553: PPUSH
74554: LD_VAR 0 3
74558: PPUSH
74559: LD_VAR 0 5
74563: PPUSH
74564: CALL_OW 48
// end ;
74568: LD_VAR 0 6
74572: RET
// export function ToNaturalNumber ( number ) ; begin
74573: LD_INT 0
74575: PPUSH
// result := number div 1 ;
74576: LD_ADDR_VAR 0 2
74580: PUSH
74581: LD_VAR 0 1
74585: PUSH
74586: LD_INT 1
74588: DIV
74589: ST_TO_ADDR
// if number < 0 then
74590: LD_VAR 0 1
74594: PUSH
74595: LD_INT 0
74597: LESS
74598: IFFALSE 74608
// result := 0 ;
74600: LD_ADDR_VAR 0 2
74604: PUSH
74605: LD_INT 0
74607: ST_TO_ADDR
// end ;
74608: LD_VAR 0 2
74612: RET
// export function SortByClass ( units , class ) ; var un ; begin
74613: LD_INT 0
74615: PPUSH
74616: PPUSH
// if not units or not class then
74617: LD_VAR 0 1
74621: NOT
74622: PUSH
74623: LD_VAR 0 2
74627: NOT
74628: OR
74629: IFFALSE 74633
// exit ;
74631: GO 74728
// result := [ ] ;
74633: LD_ADDR_VAR 0 3
74637: PUSH
74638: EMPTY
74639: ST_TO_ADDR
// for un in units do
74640: LD_ADDR_VAR 0 4
74644: PUSH
74645: LD_VAR 0 1
74649: PUSH
74650: FOR_IN
74651: IFFALSE 74726
// if GetClass ( un ) = class then
74653: LD_VAR 0 4
74657: PPUSH
74658: CALL_OW 257
74662: PUSH
74663: LD_VAR 0 2
74667: EQUAL
74668: IFFALSE 74695
// result := Insert ( result , 1 , un ) else
74670: LD_ADDR_VAR 0 3
74674: PUSH
74675: LD_VAR 0 3
74679: PPUSH
74680: LD_INT 1
74682: PPUSH
74683: LD_VAR 0 4
74687: PPUSH
74688: CALL_OW 2
74692: ST_TO_ADDR
74693: GO 74724
// result := Replace ( result , result + 1 , un ) ;
74695: LD_ADDR_VAR 0 3
74699: PUSH
74700: LD_VAR 0 3
74704: PPUSH
74705: LD_VAR 0 3
74709: PUSH
74710: LD_INT 1
74712: PLUS
74713: PPUSH
74714: LD_VAR 0 4
74718: PPUSH
74719: CALL_OW 1
74723: ST_TO_ADDR
74724: GO 74650
74726: POP
74727: POP
// end ;
74728: LD_VAR 0 3
74732: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74733: LD_INT 0
74735: PPUSH
74736: PPUSH
74737: PPUSH
74738: PPUSH
74739: PPUSH
74740: PPUSH
74741: PPUSH
// result := [ ] ;
74742: LD_ADDR_VAR 0 4
74746: PUSH
74747: EMPTY
74748: ST_TO_ADDR
// if x - r < 0 then
74749: LD_VAR 0 1
74753: PUSH
74754: LD_VAR 0 3
74758: MINUS
74759: PUSH
74760: LD_INT 0
74762: LESS
74763: IFFALSE 74775
// min_x := 0 else
74765: LD_ADDR_VAR 0 8
74769: PUSH
74770: LD_INT 0
74772: ST_TO_ADDR
74773: GO 74791
// min_x := x - r ;
74775: LD_ADDR_VAR 0 8
74779: PUSH
74780: LD_VAR 0 1
74784: PUSH
74785: LD_VAR 0 3
74789: MINUS
74790: ST_TO_ADDR
// if y - r < 0 then
74791: LD_VAR 0 2
74795: PUSH
74796: LD_VAR 0 3
74800: MINUS
74801: PUSH
74802: LD_INT 0
74804: LESS
74805: IFFALSE 74817
// min_y := 0 else
74807: LD_ADDR_VAR 0 7
74811: PUSH
74812: LD_INT 0
74814: ST_TO_ADDR
74815: GO 74833
// min_y := y - r ;
74817: LD_ADDR_VAR 0 7
74821: PUSH
74822: LD_VAR 0 2
74826: PUSH
74827: LD_VAR 0 3
74831: MINUS
74832: ST_TO_ADDR
// max_x := x + r ;
74833: LD_ADDR_VAR 0 9
74837: PUSH
74838: LD_VAR 0 1
74842: PUSH
74843: LD_VAR 0 3
74847: PLUS
74848: ST_TO_ADDR
// max_y := y + r ;
74849: LD_ADDR_VAR 0 10
74853: PUSH
74854: LD_VAR 0 2
74858: PUSH
74859: LD_VAR 0 3
74863: PLUS
74864: ST_TO_ADDR
// for _x = min_x to max_x do
74865: LD_ADDR_VAR 0 5
74869: PUSH
74870: DOUBLE
74871: LD_VAR 0 8
74875: DEC
74876: ST_TO_ADDR
74877: LD_VAR 0 9
74881: PUSH
74882: FOR_TO
74883: IFFALSE 74984
// for _y = min_y to max_y do
74885: LD_ADDR_VAR 0 6
74889: PUSH
74890: DOUBLE
74891: LD_VAR 0 7
74895: DEC
74896: ST_TO_ADDR
74897: LD_VAR 0 10
74901: PUSH
74902: FOR_TO
74903: IFFALSE 74980
// begin if not ValidHex ( _x , _y ) then
74905: LD_VAR 0 5
74909: PPUSH
74910: LD_VAR 0 6
74914: PPUSH
74915: CALL_OW 488
74919: NOT
74920: IFFALSE 74924
// continue ;
74922: GO 74902
// if GetResourceTypeXY ( _x , _y ) then
74924: LD_VAR 0 5
74928: PPUSH
74929: LD_VAR 0 6
74933: PPUSH
74934: CALL_OW 283
74938: IFFALSE 74978
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74940: LD_ADDR_VAR 0 4
74944: PUSH
74945: LD_VAR 0 4
74949: PPUSH
74950: LD_VAR 0 4
74954: PUSH
74955: LD_INT 1
74957: PLUS
74958: PPUSH
74959: LD_VAR 0 5
74963: PUSH
74964: LD_VAR 0 6
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: PPUSH
74973: CALL_OW 1
74977: ST_TO_ADDR
// end ;
74978: GO 74902
74980: POP
74981: POP
74982: GO 74882
74984: POP
74985: POP
// end ;
74986: LD_VAR 0 4
74990: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74991: LD_INT 0
74993: PPUSH
74994: PPUSH
74995: PPUSH
74996: PPUSH
74997: PPUSH
74998: PPUSH
74999: PPUSH
75000: PPUSH
// if not units then
75001: LD_VAR 0 1
75005: NOT
75006: IFFALSE 75010
// exit ;
75008: GO 75534
// result := UnitFilter ( units , [ f_ok ] ) ;
75010: LD_ADDR_VAR 0 3
75014: PUSH
75015: LD_VAR 0 1
75019: PPUSH
75020: LD_INT 50
75022: PUSH
75023: EMPTY
75024: LIST
75025: PPUSH
75026: CALL_OW 72
75030: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75031: LD_ADDR_VAR 0 8
75035: PUSH
75036: LD_VAR 0 1
75040: PUSH
75041: LD_INT 1
75043: ARRAY
75044: PPUSH
75045: CALL_OW 255
75049: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75050: LD_ADDR_VAR 0 10
75054: PUSH
75055: LD_INT 29
75057: PUSH
75058: LD_INT 91
75060: PUSH
75061: LD_INT 49
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: LIST
75068: ST_TO_ADDR
// if not result then
75069: LD_VAR 0 3
75073: NOT
75074: IFFALSE 75078
// exit ;
75076: GO 75534
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75078: LD_ADDR_VAR 0 5
75082: PUSH
75083: LD_INT 81
75085: PUSH
75086: LD_VAR 0 8
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PPUSH
75095: CALL_OW 69
75099: ST_TO_ADDR
// for i in result do
75100: LD_ADDR_VAR 0 4
75104: PUSH
75105: LD_VAR 0 3
75109: PUSH
75110: FOR_IN
75111: IFFALSE 75532
// begin tag := GetTag ( i ) + 1 ;
75113: LD_ADDR_VAR 0 9
75117: PUSH
75118: LD_VAR 0 4
75122: PPUSH
75123: CALL_OW 110
75127: PUSH
75128: LD_INT 1
75130: PLUS
75131: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75132: LD_ADDR_VAR 0 7
75136: PUSH
75137: LD_VAR 0 4
75141: PPUSH
75142: CALL_OW 250
75146: PPUSH
75147: LD_VAR 0 4
75151: PPUSH
75152: CALL_OW 251
75156: PPUSH
75157: LD_INT 6
75159: PPUSH
75160: CALL 74733 0 3
75164: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75165: LD_VAR 0 4
75169: PPUSH
75170: CALL_OW 247
75174: PUSH
75175: LD_INT 2
75177: EQUAL
75178: PUSH
75179: LD_VAR 0 7
75183: AND
75184: PUSH
75185: LD_VAR 0 4
75189: PPUSH
75190: CALL_OW 264
75194: PUSH
75195: LD_VAR 0 10
75199: IN
75200: NOT
75201: AND
75202: IFFALSE 75241
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75204: LD_VAR 0 4
75208: PPUSH
75209: LD_VAR 0 7
75213: PUSH
75214: LD_INT 1
75216: ARRAY
75217: PUSH
75218: LD_INT 1
75220: ARRAY
75221: PPUSH
75222: LD_VAR 0 7
75226: PUSH
75227: LD_INT 1
75229: ARRAY
75230: PUSH
75231: LD_INT 2
75233: ARRAY
75234: PPUSH
75235: CALL_OW 116
75239: GO 75530
// if path > tag then
75241: LD_VAR 0 2
75245: PUSH
75246: LD_VAR 0 9
75250: GREATER
75251: IFFALSE 75459
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75253: LD_ADDR_VAR 0 6
75257: PUSH
75258: LD_VAR 0 5
75262: PPUSH
75263: LD_INT 91
75265: PUSH
75266: LD_VAR 0 4
75270: PUSH
75271: LD_INT 8
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: LIST
75278: PPUSH
75279: CALL_OW 72
75283: ST_TO_ADDR
// if nearEnemy then
75284: LD_VAR 0 6
75288: IFFALSE 75357
// begin if GetWeapon ( i ) = ru_time_lapser then
75290: LD_VAR 0 4
75294: PPUSH
75295: CALL_OW 264
75299: PUSH
75300: LD_INT 49
75302: EQUAL
75303: IFFALSE 75331
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75305: LD_VAR 0 4
75309: PPUSH
75310: LD_VAR 0 6
75314: PPUSH
75315: LD_VAR 0 4
75319: PPUSH
75320: CALL_OW 74
75324: PPUSH
75325: CALL_OW 112
75329: GO 75355
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75331: LD_VAR 0 4
75335: PPUSH
75336: LD_VAR 0 6
75340: PPUSH
75341: LD_VAR 0 4
75345: PPUSH
75346: CALL_OW 74
75350: PPUSH
75351: CALL 76459 0 2
// end else
75355: GO 75457
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75357: LD_VAR 0 4
75361: PPUSH
75362: LD_VAR 0 2
75366: PUSH
75367: LD_VAR 0 9
75371: ARRAY
75372: PUSH
75373: LD_INT 1
75375: ARRAY
75376: PPUSH
75377: LD_VAR 0 2
75381: PUSH
75382: LD_VAR 0 9
75386: ARRAY
75387: PUSH
75388: LD_INT 2
75390: ARRAY
75391: PPUSH
75392: CALL_OW 297
75396: PUSH
75397: LD_INT 6
75399: GREATER
75400: IFFALSE 75443
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75402: LD_VAR 0 4
75406: PPUSH
75407: LD_VAR 0 2
75411: PUSH
75412: LD_VAR 0 9
75416: ARRAY
75417: PUSH
75418: LD_INT 1
75420: ARRAY
75421: PPUSH
75422: LD_VAR 0 2
75426: PUSH
75427: LD_VAR 0 9
75431: ARRAY
75432: PUSH
75433: LD_INT 2
75435: ARRAY
75436: PPUSH
75437: CALL_OW 114
75441: GO 75457
// SetTag ( i , tag ) ;
75443: LD_VAR 0 4
75447: PPUSH
75448: LD_VAR 0 9
75452: PPUSH
75453: CALL_OW 109
// end else
75457: GO 75530
// if enemy then
75459: LD_VAR 0 5
75463: IFFALSE 75530
// begin if GetWeapon ( i ) = ru_time_lapser then
75465: LD_VAR 0 4
75469: PPUSH
75470: CALL_OW 264
75474: PUSH
75475: LD_INT 49
75477: EQUAL
75478: IFFALSE 75506
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75480: LD_VAR 0 4
75484: PPUSH
75485: LD_VAR 0 5
75489: PPUSH
75490: LD_VAR 0 4
75494: PPUSH
75495: CALL_OW 74
75499: PPUSH
75500: CALL_OW 112
75504: GO 75530
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75506: LD_VAR 0 4
75510: PPUSH
75511: LD_VAR 0 5
75515: PPUSH
75516: LD_VAR 0 4
75520: PPUSH
75521: CALL_OW 74
75525: PPUSH
75526: CALL 76459 0 2
// end ; end ;
75530: GO 75110
75532: POP
75533: POP
// end ;
75534: LD_VAR 0 3
75538: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75539: LD_INT 0
75541: PPUSH
75542: PPUSH
75543: PPUSH
// if not unit or IsInUnit ( unit ) then
75544: LD_VAR 0 1
75548: NOT
75549: PUSH
75550: LD_VAR 0 1
75554: PPUSH
75555: CALL_OW 310
75559: OR
75560: IFFALSE 75564
// exit ;
75562: GO 75655
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75564: LD_ADDR_VAR 0 4
75568: PUSH
75569: LD_VAR 0 1
75573: PPUSH
75574: CALL_OW 250
75578: PPUSH
75579: LD_VAR 0 2
75583: PPUSH
75584: LD_INT 1
75586: PPUSH
75587: CALL_OW 272
75591: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75592: LD_ADDR_VAR 0 5
75596: PUSH
75597: LD_VAR 0 1
75601: PPUSH
75602: CALL_OW 251
75606: PPUSH
75607: LD_VAR 0 2
75611: PPUSH
75612: LD_INT 1
75614: PPUSH
75615: CALL_OW 273
75619: ST_TO_ADDR
// if ValidHex ( x , y ) then
75620: LD_VAR 0 4
75624: PPUSH
75625: LD_VAR 0 5
75629: PPUSH
75630: CALL_OW 488
75634: IFFALSE 75655
// ComTurnXY ( unit , x , y ) ;
75636: LD_VAR 0 1
75640: PPUSH
75641: LD_VAR 0 4
75645: PPUSH
75646: LD_VAR 0 5
75650: PPUSH
75651: CALL_OW 118
// end ;
75655: LD_VAR 0 3
75659: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75660: LD_INT 0
75662: PPUSH
75663: PPUSH
// result := false ;
75664: LD_ADDR_VAR 0 3
75668: PUSH
75669: LD_INT 0
75671: ST_TO_ADDR
// if not units then
75672: LD_VAR 0 2
75676: NOT
75677: IFFALSE 75681
// exit ;
75679: GO 75726
// for i in units do
75681: LD_ADDR_VAR 0 4
75685: PUSH
75686: LD_VAR 0 2
75690: PUSH
75691: FOR_IN
75692: IFFALSE 75724
// if See ( side , i ) then
75694: LD_VAR 0 1
75698: PPUSH
75699: LD_VAR 0 4
75703: PPUSH
75704: CALL_OW 292
75708: IFFALSE 75722
// begin result := true ;
75710: LD_ADDR_VAR 0 3
75714: PUSH
75715: LD_INT 1
75717: ST_TO_ADDR
// exit ;
75718: POP
75719: POP
75720: GO 75726
// end ;
75722: GO 75691
75724: POP
75725: POP
// end ;
75726: LD_VAR 0 3
75730: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75731: LD_INT 0
75733: PPUSH
75734: PPUSH
75735: PPUSH
75736: PPUSH
// if not unit or not points then
75737: LD_VAR 0 1
75741: NOT
75742: PUSH
75743: LD_VAR 0 2
75747: NOT
75748: OR
75749: IFFALSE 75753
// exit ;
75751: GO 75843
// dist := 99999 ;
75753: LD_ADDR_VAR 0 5
75757: PUSH
75758: LD_INT 99999
75760: ST_TO_ADDR
// for i in points do
75761: LD_ADDR_VAR 0 4
75765: PUSH
75766: LD_VAR 0 2
75770: PUSH
75771: FOR_IN
75772: IFFALSE 75841
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75774: LD_ADDR_VAR 0 6
75778: PUSH
75779: LD_VAR 0 1
75783: PPUSH
75784: LD_VAR 0 4
75788: PUSH
75789: LD_INT 1
75791: ARRAY
75792: PPUSH
75793: LD_VAR 0 4
75797: PUSH
75798: LD_INT 2
75800: ARRAY
75801: PPUSH
75802: CALL_OW 297
75806: ST_TO_ADDR
// if tmpDist < dist then
75807: LD_VAR 0 6
75811: PUSH
75812: LD_VAR 0 5
75816: LESS
75817: IFFALSE 75839
// begin result := i ;
75819: LD_ADDR_VAR 0 3
75823: PUSH
75824: LD_VAR 0 4
75828: ST_TO_ADDR
// dist := tmpDist ;
75829: LD_ADDR_VAR 0 5
75833: PUSH
75834: LD_VAR 0 6
75838: ST_TO_ADDR
// end ; end ;
75839: GO 75771
75841: POP
75842: POP
// end ;
75843: LD_VAR 0 3
75847: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75848: LD_INT 0
75850: PPUSH
// uc_side := side ;
75851: LD_ADDR_OWVAR 20
75855: PUSH
75856: LD_VAR 0 1
75860: ST_TO_ADDR
// uc_nation := 3 ;
75861: LD_ADDR_OWVAR 21
75865: PUSH
75866: LD_INT 3
75868: ST_TO_ADDR
// vc_chassis := 25 ;
75869: LD_ADDR_OWVAR 37
75873: PUSH
75874: LD_INT 25
75876: ST_TO_ADDR
// vc_engine := engine_siberite ;
75877: LD_ADDR_OWVAR 39
75881: PUSH
75882: LD_INT 3
75884: ST_TO_ADDR
// vc_control := control_computer ;
75885: LD_ADDR_OWVAR 38
75889: PUSH
75890: LD_INT 3
75892: ST_TO_ADDR
// vc_weapon := 59 ;
75893: LD_ADDR_OWVAR 40
75897: PUSH
75898: LD_INT 59
75900: ST_TO_ADDR
// result := CreateVehicle ;
75901: LD_ADDR_VAR 0 5
75905: PUSH
75906: CALL_OW 45
75910: ST_TO_ADDR
// SetDir ( result , d ) ;
75911: LD_VAR 0 5
75915: PPUSH
75916: LD_VAR 0 4
75920: PPUSH
75921: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75925: LD_VAR 0 5
75929: PPUSH
75930: LD_VAR 0 2
75934: PPUSH
75935: LD_VAR 0 3
75939: PPUSH
75940: LD_INT 0
75942: PPUSH
75943: CALL_OW 48
// end ;
75947: LD_VAR 0 5
75951: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75952: LD_INT 0
75954: PPUSH
75955: PPUSH
75956: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75957: LD_ADDR_VAR 0 2
75961: PUSH
75962: LD_INT 0
75964: PUSH
75965: LD_INT 0
75967: PUSH
75968: LD_INT 0
75970: PUSH
75971: LD_INT 0
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75980: LD_VAR 0 1
75984: NOT
75985: PUSH
75986: LD_VAR 0 1
75990: PPUSH
75991: CALL_OW 264
75995: PUSH
75996: LD_INT 12
75998: PUSH
75999: LD_INT 51
76001: PUSH
76002: LD_INT 32
76004: PUSH
76005: LD_INT 89
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: IN
76014: NOT
76015: OR
76016: IFFALSE 76020
// exit ;
76018: GO 76118
// for i := 1 to 3 do
76020: LD_ADDR_VAR 0 3
76024: PUSH
76025: DOUBLE
76026: LD_INT 1
76028: DEC
76029: ST_TO_ADDR
76030: LD_INT 3
76032: PUSH
76033: FOR_TO
76034: IFFALSE 76116
// begin tmp := GetCargo ( cargo , i ) ;
76036: LD_ADDR_VAR 0 4
76040: PUSH
76041: LD_VAR 0 1
76045: PPUSH
76046: LD_VAR 0 3
76050: PPUSH
76051: CALL_OW 289
76055: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76056: LD_ADDR_VAR 0 2
76060: PUSH
76061: LD_VAR 0 2
76065: PPUSH
76066: LD_VAR 0 3
76070: PPUSH
76071: LD_VAR 0 4
76075: PPUSH
76076: CALL_OW 1
76080: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76081: LD_ADDR_VAR 0 2
76085: PUSH
76086: LD_VAR 0 2
76090: PPUSH
76091: LD_INT 4
76093: PPUSH
76094: LD_VAR 0 2
76098: PUSH
76099: LD_INT 4
76101: ARRAY
76102: PUSH
76103: LD_VAR 0 4
76107: PLUS
76108: PPUSH
76109: CALL_OW 1
76113: ST_TO_ADDR
// end ;
76114: GO 76033
76116: POP
76117: POP
// end ;
76118: LD_VAR 0 2
76122: RET
// export function Length ( array ) ; begin
76123: LD_INT 0
76125: PPUSH
// result := array + 0 ;
76126: LD_ADDR_VAR 0 2
76130: PUSH
76131: LD_VAR 0 1
76135: PUSH
76136: LD_INT 0
76138: PLUS
76139: ST_TO_ADDR
// end ;
76140: LD_VAR 0 2
76144: RET
// export function PrepareArray ( array ) ; begin
76145: LD_INT 0
76147: PPUSH
// result := array diff 0 ;
76148: LD_ADDR_VAR 0 2
76152: PUSH
76153: LD_VAR 0 1
76157: PUSH
76158: LD_INT 0
76160: DIFF
76161: ST_TO_ADDR
// if not result [ 1 ] then
76162: LD_VAR 0 2
76166: PUSH
76167: LD_INT 1
76169: ARRAY
76170: NOT
76171: IFFALSE 76191
// result := Delete ( result , 1 ) ;
76173: LD_ADDR_VAR 0 2
76177: PUSH
76178: LD_VAR 0 2
76182: PPUSH
76183: LD_INT 1
76185: PPUSH
76186: CALL_OW 3
76190: ST_TO_ADDR
// end ;
76191: LD_VAR 0 2
76195: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76196: LD_INT 0
76198: PPUSH
76199: PPUSH
76200: PPUSH
76201: PPUSH
// sibRocketRange := 25 ;
76202: LD_ADDR_VAR 0 6
76206: PUSH
76207: LD_INT 25
76209: ST_TO_ADDR
// result := false ;
76210: LD_ADDR_VAR 0 4
76214: PUSH
76215: LD_INT 0
76217: ST_TO_ADDR
// for i := 0 to 5 do
76218: LD_ADDR_VAR 0 5
76222: PUSH
76223: DOUBLE
76224: LD_INT 0
76226: DEC
76227: ST_TO_ADDR
76228: LD_INT 5
76230: PUSH
76231: FOR_TO
76232: IFFALSE 76299
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76234: LD_VAR 0 1
76238: PPUSH
76239: LD_VAR 0 5
76243: PPUSH
76244: LD_VAR 0 6
76248: PPUSH
76249: CALL_OW 272
76253: PPUSH
76254: LD_VAR 0 2
76258: PPUSH
76259: LD_VAR 0 5
76263: PPUSH
76264: LD_VAR 0 6
76268: PPUSH
76269: CALL_OW 273
76273: PPUSH
76274: LD_VAR 0 3
76278: PPUSH
76279: CALL_OW 309
76283: IFFALSE 76297
// begin result := true ;
76285: LD_ADDR_VAR 0 4
76289: PUSH
76290: LD_INT 1
76292: ST_TO_ADDR
// exit ;
76293: POP
76294: POP
76295: GO 76301
// end ;
76297: GO 76231
76299: POP
76300: POP
// end ;
76301: LD_VAR 0 4
76305: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76306: LD_INT 0
76308: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76309: LD_VAR 0 1
76313: PPUSH
76314: LD_VAR 0 2
76318: PPUSH
76319: LD_INT 0
76321: PPUSH
76322: LD_INT 0
76324: PPUSH
76325: LD_INT 1
76327: PPUSH
76328: LD_INT 0
76330: PPUSH
76331: CALL_OW 587
// end ;
76335: LD_VAR 0 3
76339: RET
// export function CenterOnNow ( unit ) ; begin
76340: LD_INT 0
76342: PPUSH
// result := IsInUnit ( unit ) ;
76343: LD_ADDR_VAR 0 2
76347: PUSH
76348: LD_VAR 0 1
76352: PPUSH
76353: CALL_OW 310
76357: ST_TO_ADDR
// if not result then
76358: LD_VAR 0 2
76362: NOT
76363: IFFALSE 76375
// result := unit ;
76365: LD_ADDR_VAR 0 2
76369: PUSH
76370: LD_VAR 0 1
76374: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76375: LD_VAR 0 1
76379: PPUSH
76380: CALL_OW 87
// end ;
76384: LD_VAR 0 2
76388: RET
// export function ComMoveHex ( unit , hex ) ; begin
76389: LD_INT 0
76391: PPUSH
// if not hex then
76392: LD_VAR 0 2
76396: NOT
76397: IFFALSE 76401
// exit ;
76399: GO 76454
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76401: LD_VAR 0 2
76405: PUSH
76406: LD_INT 1
76408: ARRAY
76409: PPUSH
76410: LD_VAR 0 2
76414: PUSH
76415: LD_INT 2
76417: ARRAY
76418: PPUSH
76419: CALL_OW 428
76423: IFFALSE 76427
// exit ;
76425: GO 76454
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76427: LD_VAR 0 1
76431: PPUSH
76432: LD_VAR 0 2
76436: PUSH
76437: LD_INT 1
76439: ARRAY
76440: PPUSH
76441: LD_VAR 0 2
76445: PUSH
76446: LD_INT 2
76448: ARRAY
76449: PPUSH
76450: CALL_OW 111
// end ;
76454: LD_VAR 0 3
76458: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76459: LD_INT 0
76461: PPUSH
76462: PPUSH
76463: PPUSH
// if not unit or not enemy then
76464: LD_VAR 0 1
76468: NOT
76469: PUSH
76470: LD_VAR 0 2
76474: NOT
76475: OR
76476: IFFALSE 76480
// exit ;
76478: GO 76604
// x := GetX ( enemy ) ;
76480: LD_ADDR_VAR 0 4
76484: PUSH
76485: LD_VAR 0 2
76489: PPUSH
76490: CALL_OW 250
76494: ST_TO_ADDR
// y := GetY ( enemy ) ;
76495: LD_ADDR_VAR 0 5
76499: PUSH
76500: LD_VAR 0 2
76504: PPUSH
76505: CALL_OW 251
76509: ST_TO_ADDR
// if ValidHex ( x , y ) then
76510: LD_VAR 0 4
76514: PPUSH
76515: LD_VAR 0 5
76519: PPUSH
76520: CALL_OW 488
76524: IFFALSE 76604
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
76526: LD_VAR 0 2
76530: PPUSH
76531: CALL_OW 247
76535: PUSH
76536: LD_INT 3
76538: PUSH
76539: LD_INT 2
76541: PUSH
76542: EMPTY
76543: LIST
76544: LIST
76545: IN
76546: PUSH
76547: LD_VAR 0 1
76551: PPUSH
76552: CALL_OW 255
76556: PPUSH
76557: LD_VAR 0 2
76561: PPUSH
76562: CALL_OW 292
76566: AND
76567: IFFALSE 76585
// ComAttackUnit ( unit , enemy ) else
76569: LD_VAR 0 1
76573: PPUSH
76574: LD_VAR 0 2
76578: PPUSH
76579: CALL_OW 115
76583: GO 76604
// ComAgressiveMove ( unit , x , y ) ;
76585: LD_VAR 0 1
76589: PPUSH
76590: LD_VAR 0 4
76594: PPUSH
76595: LD_VAR 0 5
76599: PPUSH
76600: CALL_OW 114
// end ; end_of_file
76604: LD_VAR 0 3
76608: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76609: LD_VAR 0 1
76613: PUSH
76614: LD_INT 200
76616: DOUBLE
76617: GREATEREQUAL
76618: IFFALSE 76626
76620: LD_INT 299
76622: DOUBLE
76623: LESSEQUAL
76624: IFTRUE 76628
76626: GO 76660
76628: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76629: LD_VAR 0 1
76633: PPUSH
76634: LD_VAR 0 2
76638: PPUSH
76639: LD_VAR 0 3
76643: PPUSH
76644: LD_VAR 0 4
76648: PPUSH
76649: LD_VAR 0 5
76653: PPUSH
76654: CALL 15351 0 5
76658: GO 76737
76660: LD_INT 300
76662: DOUBLE
76663: GREATEREQUAL
76664: IFFALSE 76672
76666: LD_INT 399
76668: DOUBLE
76669: LESSEQUAL
76670: IFTRUE 76674
76672: GO 76736
76674: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76675: LD_VAR 0 1
76679: PPUSH
76680: LD_VAR 0 2
76684: PPUSH
76685: LD_VAR 0 3
76689: PPUSH
76690: LD_VAR 0 4
76694: PPUSH
76695: LD_VAR 0 5
76699: PPUSH
76700: LD_VAR 0 6
76704: PPUSH
76705: LD_VAR 0 7
76709: PPUSH
76710: LD_VAR 0 8
76714: PPUSH
76715: LD_VAR 0 9
76719: PPUSH
76720: LD_VAR 0 10
76724: PPUSH
76725: LD_VAR 0 11
76729: PPUSH
76730: CALL 31767 0 11
76734: GO 76737
76736: POP
// end ;
76737: PPOPN 11
76739: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76740: LD_VAR 0 1
76744: PPUSH
76745: LD_VAR 0 2
76749: PPUSH
76750: LD_VAR 0 3
76754: PPUSH
76755: LD_VAR 0 4
76759: PPUSH
76760: LD_VAR 0 5
76764: PPUSH
76765: CALL 15087 0 5
// end ; end_of_file
76769: PPOPN 5
76771: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76772: LD_VAR 0 1
76776: PPUSH
76777: LD_VAR 0 2
76781: PPUSH
76782: LD_VAR 0 3
76786: PPUSH
76787: LD_VAR 0 4
76791: PPUSH
76792: LD_VAR 0 5
76796: PPUSH
76797: LD_VAR 0 6
76801: PPUSH
76802: CALL 19419 0 6
// end ;
76806: PPOPN 6
76808: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76809: LD_INT 0
76811: PPUSH
// begin if not units then
76812: LD_VAR 0 1
76816: NOT
76817: IFFALSE 76821
// exit ;
76819: GO 76821
// end ;
76821: PPOPN 7
76823: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76824: CALL 19323 0 0
// end ;
76828: PPOPN 1
76830: END
