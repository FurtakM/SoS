// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 752 0 2
// PrepareArabian ;
  31: CALL 1369 0 0
// PrepareRussian ;
  35: CALL 3020 0 0
// Action ;
  39: CALL 8440 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// solar_recharge_amount := 0 ;
 262: LD_ADDR_OWVAR 82
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// end ;
 270: LD_VAR 0 1
 274: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 275: LD_EXP 10
 279: NOT
 280: PUSH
 281: LD_EXP 9
 285: NOT
 286: AND
 287: PUSH
 288: LD_EXP 39
 292: NOT
 293: AND
 294: PUSH
 295: LD_EXP 40
 299: NOT
 300: AND
 301: IFFALSE 313
 303: GO 305
 305: DISABLE
// SetAchievement ( ACH_EXT ) ;
 306: LD_STRING ACH_EXT
 308: PPUSH
 309: CALL_OW 543
 313: END
// every 0 0$1 trigger captureCounter >= 6 do
 314: LD_EXP 18
 318: PUSH
 319: LD_INT 6
 321: GREATEREQUAL
 322: IFFALSE 334
 324: GO 326
 326: DISABLE
// SetAchievement ( ACH_KEY ) ;
 327: LD_STRING ACH_KEY
 329: PPUSH
 330: CALL_OW 543
 334: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 335: LD_EXP 19
 339: PUSH
 340: LD_INT 3
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 348: LD_STRING ACH_CHEM
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger debug do var i ;
 356: LD_EXP 1
 360: IFFALSE 444
 362: GO 364
 364: DISABLE
 365: LD_INT 0
 367: PPUSH
// begin enable ;
 368: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 369: LD_ADDR_VAR 0 1
 373: PUSH
 374: LD_INT 22
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 3
 386: PUSH
 387: LD_INT 21
 389: PUSH
 390: LD_INT 3
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 442
// if GetLives ( i ) < 1000 then
 413: LD_VAR 0 1
 417: PPUSH
 418: CALL_OW 256
 422: PUSH
 423: LD_INT 1000
 425: LESS
 426: IFFALSE 440
// SetLives ( i , 1000 ) ;
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_INT 1000
 435: PPUSH
 436: CALL_OW 234
 440: GO 410
 442: POP
 443: POP
// end ; end_of_file
 444: PPOPN 1
 446: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 447: LD_INT 0
 449: PPUSH
// uc_side := side ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_VAR 0 1
 459: ST_TO_ADDR
// uc_nation := nation ;
 460: LD_ADDR_OWVAR 21
 464: PUSH
 465: LD_VAR 0 2
 469: ST_TO_ADDR
// vc_chassis := chassis ;
 470: LD_ADDR_OWVAR 37
 474: PUSH
 475: LD_VAR 0 3
 479: ST_TO_ADDR
// vc_engine := engine ;
 480: LD_ADDR_OWVAR 39
 484: PUSH
 485: LD_VAR 0 4
 489: ST_TO_ADDR
// vc_control := control ;
 490: LD_ADDR_OWVAR 38
 494: PUSH
 495: LD_VAR 0 5
 499: ST_TO_ADDR
// vc_weapon := weapon ;
 500: LD_ADDR_OWVAR 40
 504: PUSH
 505: LD_VAR 0 6
 509: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 510: LD_ADDR_OWVAR 41
 514: PUSH
 515: LD_VAR 0 7
 519: ST_TO_ADDR
// result := CreateVehicle ;
 520: LD_ADDR_VAR 0 8
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// end ;
 530: LD_VAR 0 8
 534: RET
// export function SayX ( units , ident ) ; var i ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
// result := false ;
 539: LD_ADDR_VAR 0 3
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// if not units then
 547: LD_VAR 0 1
 551: NOT
 552: IFFALSE 556
// exit ;
 554: GO 610
// for i in units do
 556: LD_ADDR_VAR 0 4
 560: PUSH
 561: LD_VAR 0 1
 565: PUSH
 566: FOR_IN
 567: IFFALSE 608
// if IsOk ( i ) then
 569: LD_VAR 0 4
 573: PPUSH
 574: CALL_OW 302
 578: IFFALSE 606
// begin Say ( i , ident ) ;
 580: LD_VAR 0 4
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 88
// result := i ;
 594: LD_ADDR_VAR 0 3
 598: PUSH
 599: LD_VAR 0 4
 603: ST_TO_ADDR
// break ;
 604: GO 608
// end ;
 606: GO 566
 608: POP
 609: POP
// end ;
 610: LD_VAR 0 3
 614: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 615: LD_INT 0
 617: PPUSH
 618: PPUSH
// InitUc ;
 619: CALL_OW 18
// InitHc ;
 623: CALL_OW 19
// uc_side := 0 ;
 627: LD_ADDR_OWVAR 20
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// uc_nation := 0 ;
 635: LD_ADDR_OWVAR 21
 639: PUSH
 640: LD_INT 0
 642: ST_TO_ADDR
// for i = 1 to amount do
 643: LD_ADDR_VAR 0 4
 647: PUSH
 648: DOUBLE
 649: LD_INT 1
 651: DEC
 652: ST_TO_ADDR
 653: LD_VAR 0 2
 657: PUSH
 658: FOR_TO
 659: IFFALSE 741
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 661: LD_ADDR_OWVAR 29
 665: PUSH
 666: LD_INT 9
 668: PPUSH
 669: LD_INT 12
 671: PPUSH
 672: CALL_OW 12
 676: PUSH
 677: LD_INT 9
 679: PPUSH
 680: LD_INT 12
 682: PPUSH
 683: CALL_OW 12
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 692: LD_ADDR_OWVAR 35
 696: PUSH
 697: LD_INT 1
 699: NEG
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL_OW 12
 708: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 12
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 722: CALL_OW 44
 726: PPUSH
 727: LD_VAR 0 1
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL_OW 49
// end ;
 739: GO 658
 741: POP
 742: POP
// InitHc ;
 743: CALL_OW 19
// end ;
 747: LD_VAR 0 3
 751: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 752: LD_INT 0
 754: PPUSH
 755: PPUSH
// uc_side := 0 ;
 756: LD_ADDR_OWVAR 20
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// uc_nation := 0 ;
 764: LD_ADDR_OWVAR 21
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// for i := 1 to 3 do
 772: LD_ADDR_VAR 0 4
 776: PUSH
 777: DOUBLE
 778: LD_INT 1
 780: DEC
 781: ST_TO_ADDR
 782: LD_INT 3
 784: PUSH
 785: FOR_TO
 786: IFFALSE 823
// begin hc_class := 21 ;
 788: LD_ADDR_OWVAR 28
 792: PUSH
 793: LD_INT 21
 795: ST_TO_ADDR
// hc_gallery :=  ;
 796: LD_ADDR_OWVAR 33
 800: PUSH
 801: LD_STRING 
 803: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 804: CALL_OW 44
 808: PPUSH
 809: LD_VAR 0 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 785
 823: POP
 824: POP
// for i := 1 to 3 do
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: DOUBLE
 831: LD_INT 1
 833: DEC
 834: ST_TO_ADDR
 835: LD_INT 3
 837: PUSH
 838: FOR_TO
 839: IFFALSE 876
// begin hc_class := 18 ;
 841: LD_ADDR_OWVAR 28
 845: PUSH
 846: LD_INT 18
 848: ST_TO_ADDR
// hc_gallery :=  ;
 849: LD_ADDR_OWVAR 33
 853: PUSH
 854: LD_STRING 
 856: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 857: CALL_OW 44
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// end ;
 874: GO 838
 876: POP
 877: POP
// for i := 1 to 3 do
 878: LD_ADDR_VAR 0 4
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 3
 890: PUSH
 891: FOR_TO
 892: IFFALSE 929
// begin hc_class := 13 ;
 894: LD_ADDR_OWVAR 28
 898: PUSH
 899: LD_INT 13
 901: ST_TO_ADDR
// hc_gallery :=  ;
 902: LD_ADDR_OWVAR 33
 906: PUSH
 907: LD_STRING 
 909: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 910: CALL_OW 44
 914: PPUSH
 915: LD_VAR 0 1
 919: PPUSH
 920: LD_INT 0
 922: PPUSH
 923: CALL_OW 49
// end ;
 927: GO 891
 929: POP
 930: POP
// for i := 1 to 4 do
 931: LD_ADDR_VAR 0 4
 935: PUSH
 936: DOUBLE
 937: LD_INT 1
 939: DEC
 940: ST_TO_ADDR
 941: LD_INT 4
 943: PUSH
 944: FOR_TO
 945: IFFALSE 982
// begin hc_class := class_frog ;
 947: LD_ADDR_OWVAR 28
 951: PUSH
 952: LD_INT 19
 954: ST_TO_ADDR
// hc_gallery :=  ;
 955: LD_ADDR_OWVAR 33
 959: PUSH
 960: LD_STRING 
 962: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 963: CALL_OW 44
 967: PPUSH
 968: LD_VAR 0 2
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 49
// end ;
 980: GO 944
 982: POP
 983: POP
// end ;
 984: LD_VAR 0 3
 988: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
 993: PPUSH
// if not observer or not unit then
 994: LD_VAR 0 1
 998: NOT
 999: PUSH
1000: LD_VAR 0 2
1004: NOT
1005: OR
1006: IFFALSE 1010
// exit ;
1008: GO 1058
// if not See ( GetSide ( observer ) , unit ) then
1010: LD_VAR 0 1
1014: PPUSH
1015: CALL_OW 255
1019: PPUSH
1020: LD_VAR 0 2
1024: PPUSH
1025: CALL_OW 292
1029: NOT
1030: IFFALSE 1034
// exit ;
1032: GO 1058
// result := GetDistUnits ( observer , unit ) < 12 ;
1034: LD_ADDR_VAR 0 3
1038: PUSH
1039: LD_VAR 0 1
1043: PPUSH
1044: LD_VAR 0 2
1048: PPUSH
1049: CALL_OW 296
1053: PUSH
1054: LD_INT 12
1056: LESS
1057: ST_TO_ADDR
// end ;
1058: LD_VAR 0 3
1062: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1063: LD_INT 0
1065: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1066: LD_VAR 0 2
1070: PUSH
1071: LD_INT 1
1073: ARRAY
1074: PPUSH
1075: LD_VAR 0 2
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: CALL_OW 488
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 2
1102: PUSH
1103: LD_INT 2
1105: ARRAY
1106: PPUSH
1107: CALL_OW 428
1111: PUSH
1112: LD_INT 0
1114: EQUAL
1115: AND
1116: IFFALSE 1150
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1118: LD_VAR 0 1
1122: PPUSH
1123: LD_VAR 0 2
1127: PUSH
1128: LD_INT 1
1130: ARRAY
1131: PPUSH
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 3
1145: PPUSH
1146: CALL_OW 48
// end ;
1150: LD_VAR 0 4
1154: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1155: LD_INT 0
1157: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1158: LD_VAR 0 1
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1182: LD_VAR 0 1
1186: PPUSH
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_VAR 0 3
1196: PPUSH
1197: CALL_OW 331
// end ;
1201: LD_VAR 0 5
1205: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1206: LD_INT 0
1208: PPUSH
// if not units then
1209: LD_VAR 0 1
1213: NOT
1214: IFFALSE 1218
// exit ;
1216: GO 1301
// result := true ;
1218: LD_ADDR_VAR 0 4
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_INT 26
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_VAR 0 2
1254: PPUSH
1255: CALL_OW 88
1259: NOT
1260: IFFALSE 1301
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_VAR 0 1
1271: PPUSH
1272: LD_INT 26
1274: PUSH
1275: LD_INT 2
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 72
1286: PUSH
1287: LD_INT 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 3
1295: PPUSH
1296: CALL_OW 88
1300: ST_TO_ADDR
// end ;
1301: LD_VAR 0 4
1305: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1306: LD_INT 0
1308: PPUSH
1309: PPUSH
// if not group then
1310: LD_VAR 0 2
1314: NOT
1315: IFFALSE 1319
// exit ;
1317: GO 1364
// for i in group do
1319: LD_ADDR_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1362
// if See ( side , i ) then
1332: LD_VAR 0 1
1336: PPUSH
1337: LD_VAR 0 4
1341: PPUSH
1342: CALL_OW 292
1346: IFFALSE 1360
// begin result := true ;
1348: LD_ADDR_VAR 0 3
1352: PUSH
1353: LD_INT 1
1355: ST_TO_ADDR
// exit ;
1356: POP
1357: POP
1358: GO 1364
// end ;
1360: GO 1329
1362: POP
1363: POP
// end ; end_of_file
1364: LD_VAR 0 3
1368: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1369: LD_INT 0
1371: PPUSH
1372: PPUSH
// uc_side := 2 ;
1373: LD_ADDR_OWVAR 20
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// uc_nation := 2 ;
1381: LD_ADDR_OWVAR 21
1385: PUSH
1386: LD_INT 2
1388: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1389: LD_ADDR_EXP 21
1393: PUSH
1394: LD_STRING Heike
1396: PPUSH
1397: LD_EXP 1
1401: NOT
1402: PPUSH
1403: LD_EXP 2
1407: PPUSH
1408: CALL 36346 0 3
1412: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1413: LD_ADDR_EXP 24
1417: PUSH
1418: LD_STRING Ibrahim
1420: PPUSH
1421: LD_EXP 1
1425: NOT
1426: PPUSH
1427: LD_EXP 2
1431: PPUSH
1432: CALL 36346 0 3
1436: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1437: LD_ADDR_EXP 22
1441: PUSH
1442: LD_STRING Givi
1444: PPUSH
1445: LD_EXP 1
1449: NOT
1450: PPUSH
1451: LD_EXP 2
1455: PPUSH
1456: CALL 36346 0 3
1460: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1461: LD_ADDR_EXP 25
1465: PUSH
1466: LD_STRING Kamil
1468: PPUSH
1469: LD_EXP 1
1473: NOT
1474: PPUSH
1475: LD_EXP 2
1479: PPUSH
1480: CALL 36346 0 3
1484: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1485: LD_ADDR_EXP 26
1489: PUSH
1490: LD_STRING Kaia
1492: PPUSH
1493: LD_EXP 1
1497: NOT
1498: PPUSH
1499: LD_EXP 2
1503: PPUSH
1504: CALL 36346 0 3
1508: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Sophia
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 36346 0 3
1532: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1533: LD_ADDR_EXP 28
1537: PUSH
1538: LD_STRING Markov
1540: PPUSH
1541: LD_EXP 1
1545: NOT
1546: PPUSH
1547: LD_EXP 2
1551: PPUSH
1552: CALL 36346 0 3
1556: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 33
1561: PUSH
1562: LD_STRING Aviradze
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 36346 0 3
1580: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1581: LD_ADDR_EXP 32
1585: PUSH
1586: LD_STRING Kurt
1588: PPUSH
1589: LD_EXP 1
1593: NOT
1594: PPUSH
1595: LD_EXP 2
1599: PPUSH
1600: CALL 36346 0 3
1604: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1605: LD_ADDR_EXP 23
1609: PUSH
1610: LD_STRING Mike
1612: PPUSH
1613: LD_EXP 1
1617: NOT
1618: PPUSH
1619: LD_EXP 2
1623: PPUSH
1624: CALL 36346 0 3
1628: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1629: LD_ADDR_EXP 30
1633: PUSH
1634: LD_STRING Olaf
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: LD_STRING 
1642: PPUSH
1643: CALL 36346 0 3
1647: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1648: LD_ADDR_EXP 34
1652: PUSH
1653: LD_STRING 04_2_others
1655: PPUSH
1656: CALL_OW 31
1660: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1661: LD_ADDR_EXP 36
1665: PUSH
1666: LD_STRING 04_2_apes
1668: PPUSH
1669: CALL_OW 31
1673: ST_TO_ADDR
// if hasFlamethrower then
1674: LD_EXP 3
1678: IFFALSE 1913
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1680: LD_INT 70
1682: PPUSH
1683: LD_INT 2
1685: PPUSH
1686: LD_INT 2
1688: PPUSH
1689: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1693: LD_ADDR_EXP 35
1697: PUSH
1698: LD_INT 13
1700: PUSH
1701: LD_INT 1
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 27
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: LD_INT 1000
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 13
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 25
1746: PUSH
1747: LD_INT 2
1749: PUSH
1750: LD_INT 1000
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: LD_INT 0
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 1
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 26
1783: PUSH
1784: LD_INT 2
1786: PUSH
1787: LD_INT 1000
1789: PUSH
1790: LD_INT 0
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 13
1811: PUSH
1812: LD_INT 1
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: LD_INT 27
1820: PUSH
1821: LD_INT 2
1823: PUSH
1824: LD_INT 1000
1826: PUSH
1827: LD_INT 0
1829: PUSH
1830: LD_INT 0
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 13
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: LD_INT 32
1857: PUSH
1858: LD_INT 2
1860: PUSH
1861: LD_INT 1000
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: LD_INT 60
1869: PUSH
1870: LD_INT 40
1872: PUSH
1873: LD_INT 20
1875: PUSH
1876: LD_INT 10
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_OWVAR 67
1889: ARRAY
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: ST_TO_ADDR
// end else
1911: GO 2131
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1913: LD_ADDR_EXP 35
1917: PUSH
1918: LD_INT 13
1920: PUSH
1921: LD_INT 1
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 25
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 1000
1935: PUSH
1936: LD_INT 0
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 13
1957: PUSH
1958: LD_INT 1
1960: PUSH
1961: LD_INT 1
1963: PUSH
1964: LD_INT 27
1966: PUSH
1967: LD_INT 2
1969: PUSH
1970: LD_INT 1000
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: LD_INT 0
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 13
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: LD_INT 1
2000: PUSH
2001: LD_INT 24
2003: PUSH
2004: LD_INT 2
2006: PUSH
2007: LD_INT 1000
2009: PUSH
2010: LD_INT 0
2012: PUSH
2013: LD_INT 0
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 13
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: LD_INT 1
2037: PUSH
2038: LD_INT 27
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: LD_INT 1000
2046: PUSH
2047: LD_INT 0
2049: PUSH
2050: LD_INT 0
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 13
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 2
2080: PUSH
2081: LD_INT 1000
2083: PUSH
2084: LD_INT 0
2086: PUSH
2087: LD_INT 50
2089: PUSH
2090: LD_INT 30
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 10
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_OWVAR 67
2109: ARRAY
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: ST_TO_ADDR
// end ; uc_side := 5 ;
2131: LD_ADDR_OWVAR 20
2135: PUSH
2136: LD_INT 5
2138: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2139: LD_ADDR_EXP 29
2143: PUSH
2144: LD_STRING Abdul
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: LD_STRING 
2152: PPUSH
2153: CALL 36346 0 3
2157: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2158: LD_ADDR_EXP 31
2162: PUSH
2163: LD_STRING Omar
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: LD_STRING 
2171: PPUSH
2172: CALL 36346 0 3
2176: ST_TO_ADDR
// end ;
2177: LD_VAR 0 1
2181: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2182: LD_INT 0
2184: PPUSH
2185: PPUSH
2186: PPUSH
2187: PPUSH
2188: PPUSH
// pfx := 04_1_ ;
2189: LD_ADDR_VAR 0 2
2193: PUSH
2194: LD_STRING 04_1_
2196: ST_TO_ADDR
// if HexInfo ( 10 , 16 ) then
2197: LD_INT 10
2199: PPUSH
2200: LD_INT 16
2202: PPUSH
2203: CALL_OW 428
2207: IFFALSE 2232
// ComMoveXY ( HexInfo ( 10 , 16 ) , 18 , 18 ) else
2209: LD_INT 10
2211: PPUSH
2212: LD_INT 16
2214: PPUSH
2215: CALL_OW 428
2219: PPUSH
2220: LD_INT 18
2222: PPUSH
2223: LD_INT 18
2225: PPUSH
2226: CALL_OW 111
2230: GO 2242
// EraseResourceArea ( mat_cans , westSpawnPointArea ) ;
2232: LD_INT 1
2234: PPUSH
2235: LD_INT 14
2237: PPUSH
2238: CALL_OW 286
// repeat wait ( 0 0$1 ) ;
2242: LD_INT 35
2244: PPUSH
2245: CALL_OW 67
// until not HexInfo ( 10 , 16 ) ;
2249: LD_INT 10
2251: PPUSH
2252: LD_INT 16
2254: PPUSH
2255: CALL_OW 428
2259: NOT
2260: IFFALSE 2242
// tmp := [ ] ;
2262: LD_ADDR_VAR 0 4
2266: PUSH
2267: EMPTY
2268: ST_TO_ADDR
// uc_side := 5 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 5
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2285: LD_ADDR_EXP 33
2289: PUSH
2290: LD_STRING Aviradze_L
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_VAR 0 2
2303: PPUSH
2304: CALL 36346 0 3
2308: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2309: LD_EXP 33
2313: PPUSH
2314: LD_INT 2
2316: PPUSH
2317: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2321: LD_EXP 33
2325: PPUSH
2326: LD_INT 14
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: CALL_OW 49
// ComMoveXY ( Aviradze , 25 , 19 ) ;
2336: LD_EXP 33
2340: PPUSH
2341: LD_INT 25
2343: PPUSH
2344: LD_INT 19
2346: PPUSH
2347: CALL_OW 111
// AddComHold ( Aviradze ) ;
2351: LD_EXP 33
2355: PPUSH
2356: CALL_OW 200
// tmp := [ Aviradze ] ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_EXP 33
2369: PUSH
2370: EMPTY
2371: LIST
2372: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2373: LD_INT 70
2375: PPUSH
2376: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2380: LD_STRING Ibrahim_L
2382: PPUSH
2383: LD_EXP 1
2387: NOT
2388: PPUSH
2389: LD_VAR 0 2
2393: PPUSH
2394: CALL 36346 0 3
2398: IFFALSE 2498
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2400: LD_ADDR_EXP 24
2404: PUSH
2405: LD_STRING Ibrahim_L
2407: PPUSH
2408: LD_EXP 1
2412: NOT
2413: PPUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 36346 0 3
2423: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2424: LD_EXP 24
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2436: LD_EXP 24
2440: PPUSH
2441: LD_INT 14
2443: PPUSH
2444: LD_INT 0
2446: PPUSH
2447: CALL_OW 49
// ComMoveXY ( Ibrahim , 25 , 19 ) ;
2451: LD_EXP 24
2455: PPUSH
2456: LD_INT 25
2458: PPUSH
2459: LD_INT 19
2461: PPUSH
2462: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2475: LD_ADDR_VAR 0 4
2479: PUSH
2480: LD_VAR 0 4
2484: PUSH
2485: LD_EXP 24
2489: ADD
2490: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2491: LD_INT 70
2493: PPUSH
2494: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2498: LD_STRING Kaia_L
2500: PPUSH
2501: LD_EXP 1
2505: NOT
2506: PPUSH
2507: LD_VAR 0 2
2511: PPUSH
2512: CALL 36346 0 3
2516: IFFALSE 2616
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2518: LD_ADDR_EXP 26
2522: PUSH
2523: LD_STRING Kaia_L
2525: PPUSH
2526: LD_EXP 1
2530: NOT
2531: PPUSH
2532: LD_VAR 0 2
2536: PPUSH
2537: CALL 36346 0 3
2541: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2542: LD_EXP 26
2546: PPUSH
2547: LD_INT 2
2549: PPUSH
2550: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2554: LD_EXP 26
2558: PPUSH
2559: LD_INT 14
2561: PPUSH
2562: LD_INT 0
2564: PPUSH
2565: CALL_OW 49
// ComMoveXY ( Kaia , 25 , 19 ) ;
2569: LD_EXP 26
2573: PPUSH
2574: LD_INT 25
2576: PPUSH
2577: LD_INT 19
2579: PPUSH
2580: CALL_OW 111
// AddComHold ( Kaia ) ;
2584: LD_EXP 26
2588: PPUSH
2589: CALL_OW 200
// tmp := tmp ^ Kaia ;
2593: LD_ADDR_VAR 0 4
2597: PUSH
2598: LD_VAR 0 4
2602: PUSH
2603: LD_EXP 26
2607: ADD
2608: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2609: LD_INT 70
2611: PPUSH
2612: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2616: LD_STRING Kamil_L
2618: PPUSH
2619: LD_EXP 1
2623: NOT
2624: PPUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: CALL 36346 0 3
2634: IFFALSE 2734
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2636: LD_ADDR_EXP 25
2640: PUSH
2641: LD_STRING Kamil_L
2643: PPUSH
2644: LD_EXP 1
2648: NOT
2649: PPUSH
2650: LD_VAR 0 2
2654: PPUSH
2655: CALL 36346 0 3
2659: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2660: LD_EXP 25
2664: PPUSH
2665: LD_INT 2
2667: PPUSH
2668: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2672: LD_EXP 25
2676: PPUSH
2677: LD_INT 14
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// ComMoveXY ( Kamil , 25 , 19 ) ;
2687: LD_EXP 25
2691: PPUSH
2692: LD_INT 25
2694: PPUSH
2695: LD_INT 19
2697: PPUSH
2698: CALL_OW 111
// AddComHold ( Kamil ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 200
// tmp := tmp ^ Kamil ;
2711: LD_ADDR_VAR 0 4
2715: PUSH
2716: LD_VAR 0 4
2720: PUSH
2721: LD_EXP 25
2725: ADD
2726: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2727: LD_INT 70
2729: PPUSH
2730: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2734: LD_STRING Sophia_L
2736: PPUSH
2737: LD_EXP 1
2741: NOT
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: CALL 36346 0 3
2752: IFFALSE 2852
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2754: LD_ADDR_EXP 27
2758: PUSH
2759: LD_STRING Sophia_L
2761: PPUSH
2762: LD_EXP 1
2766: NOT
2767: PPUSH
2768: LD_VAR 0 2
2772: PPUSH
2773: CALL 36346 0 3
2777: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2778: LD_EXP 27
2782: PPUSH
2783: LD_INT 2
2785: PPUSH
2786: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2790: LD_EXP 27
2794: PPUSH
2795: LD_INT 14
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 49
// ComMoveXY ( Sophia , 25 , 19 ) ;
2805: LD_EXP 27
2809: PPUSH
2810: LD_INT 25
2812: PPUSH
2813: LD_INT 19
2815: PPUSH
2816: CALL_OW 111
// AddComHold ( Sophia ) ;
2820: LD_EXP 27
2824: PPUSH
2825: CALL_OW 200
// tmp := tmp ^ Sophia ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_EXP 27
2843: ADD
2844: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2845: LD_INT 70
2847: PPUSH
2848: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2852: LD_ADDR_VAR 0 5
2856: PUSH
2857: LD_STRING 04_1_others_L
2859: PPUSH
2860: CALL_OW 31
2864: ST_TO_ADDR
// if tmp2 then
2865: LD_VAR 0 5
2869: IFFALSE 2966
// for i in tmp2 do
2871: LD_ADDR_VAR 0 3
2875: PUSH
2876: LD_VAR 0 5
2880: PUSH
2881: FOR_IN
2882: IFFALSE 2964
// begin SetDir ( i , 2 ) ;
2884: LD_VAR 0 3
2888: PPUSH
2889: LD_INT 2
2891: PPUSH
2892: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2896: LD_VAR 0 3
2900: PPUSH
2901: LD_INT 14
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2911: LD_ADDR_EXP 34
2915: PUSH
2916: LD_EXP 34
2920: PPUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL_OW 1
2939: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2940: LD_VAR 0 3
2944: PPUSH
2945: LD_INT 17
2947: PPUSH
2948: LD_INT 14
2950: PPUSH
2951: CALL_OW 111
// wait ( 0 0$2 ) ;
2955: LD_INT 70
2957: PPUSH
2958: CALL_OW 67
// end ;
2962: GO 2881
2964: POP
2965: POP
// for i in tmp union tmp2 do
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 4
2975: PUSH
2976: LD_VAR 0 5
2980: UNION
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3013
// begin SetSide ( i , 2 ) ;
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_INT 2
2992: PPUSH
2993: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2997: LD_VAR 0 3
3001: PPUSH
3002: LD_EXP 21
3006: PPUSH
3007: CALL_OW 112
// end ;
3011: GO 2982
3013: POP
3014: POP
// end ; end_of_file
3015: LD_VAR 0 1
3019: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3020: LD_INT 0
3022: PPUSH
3023: PPUSH
3024: PPUSH
// uc_side := 3 ;
3025: LD_ADDR_OWVAR 20
3029: PUSH
3030: LD_INT 3
3032: ST_TO_ADDR
// uc_nation := 3 ;
3033: LD_ADDR_OWVAR 21
3037: PUSH
3038: LD_INT 3
3040: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3041: LD_ADDR_EXP 37
3045: PUSH
3046: EMPTY
3047: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3048: LD_ADDR_EXP 38
3052: PUSH
3053: EMPTY
3054: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3055: LD_ADDR_EXP 41
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// for i := 1 to 2 do
3062: LD_ADDR_VAR 0 2
3066: PUSH
3067: DOUBLE
3068: LD_INT 1
3070: DEC
3071: ST_TO_ADDR
3072: LD_INT 2
3074: PUSH
3075: FOR_TO
3076: IFFALSE 3215
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3078: LD_INT 0
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: LD_INT 3
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: LD_INT 5
3092: PUSH
3093: LD_INT 6
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: LD_OWVAR 67
3106: ARRAY
3107: PPUSH
3108: CALL_OW 380
// un := CreateHuman ;
3112: LD_ADDR_VAR 0 3
3116: PUSH
3117: CALL_OW 44
3121: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3122: LD_ADDR_EXP 37
3126: PUSH
3127: LD_EXP 37
3131: PPUSH
3132: LD_EXP 37
3136: PUSH
3137: LD_INT 1
3139: PLUS
3140: PPUSH
3141: LD_VAR 0 3
3145: PPUSH
3146: CALL_OW 1
3150: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3151: LD_VAR 0 3
3155: PPUSH
3156: LD_INT 100
3158: PPUSH
3159: LD_INT 63
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_INT 97
3179: PPUSH
3180: LD_INT 64
3182: PPUSH
3183: CALL_OW 428
3187: PUSH
3188: LD_INT 98
3190: PPUSH
3191: LD_INT 58
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_VAR 0 2
3207: ARRAY
3208: PPUSH
3209: CALL_OW 120
// end ;
3213: GO 3075
3215: POP
3216: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3217: LD_INT 51
3219: PPUSH
3220: LD_INT 77
3222: PPUSH
3223: CALL_OW 428
3227: PPUSH
3228: CALL_OW 274
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: LD_INT 120
3238: PPUSH
3239: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3243: LD_INT 10
3245: PPUSH
3246: CALL_OW 274
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: LD_INT 300
3256: PPUSH
3257: CALL_OW 277
// for i := 1 to 2 do
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_INT 2
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3393
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 3
3285: PUSH
3286: LD_INT 4
3288: PUSH
3289: LD_INT 5
3291: PUSH
3292: LD_INT 6
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PUSH
3301: LD_OWVAR 67
3305: ARRAY
3306: PPUSH
3307: CALL_OW 380
// un := CreateHuman ;
3311: LD_ADDR_VAR 0 3
3315: PUSH
3316: CALL_OW 44
3320: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3321: LD_ADDR_EXP 38
3325: PUSH
3326: LD_EXP 38
3330: PPUSH
3331: LD_EXP 38
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 3
3344: PPUSH
3345: CALL_OW 1
3349: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3350: LD_VAR 0 3
3354: PPUSH
3355: LD_INT 198
3357: PPUSH
3358: LD_INT 106
3360: PPUSH
3361: CALL_OW 428
3365: PUSH
3366: LD_INT 205
3368: PPUSH
3369: LD_INT 114
3371: PPUSH
3372: CALL_OW 428
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_VAR 0 2
3385: ARRAY
3386: PPUSH
3387: CALL_OW 52
// end ;
3391: GO 3274
3393: POP
3394: POP
// for i := 1 to 2 do
3395: LD_ADDR_VAR 0 2
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_INT 2
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3486
// begin PrepareHuman ( false , 2 , 3 ) ;
3411: LD_INT 0
3413: PPUSH
3414: LD_INT 2
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL_OW 380
// un := CreateHuman ;
3424: LD_ADDR_VAR 0 3
3428: PUSH
3429: CALL_OW 44
3433: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3434: LD_ADDR_EXP 38
3438: PUSH
3439: LD_EXP 38
3443: PPUSH
3444: LD_EXP 38
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: PPUSH
3453: LD_VAR 0 3
3457: PPUSH
3458: CALL_OW 1
3462: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3463: LD_VAR 0 3
3467: PPUSH
3468: LD_INT 204
3470: PPUSH
3471: LD_INT 108
3473: PPUSH
3474: LD_INT 2
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 50
// end ;
3484: GO 3408
3486: POP
3487: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_INT 4
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 6
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_OWVAR 67
3520: ARRAY
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3669
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_INT 1
3530: PUSH
3531: LD_INT 1
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 4
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 1
3552: PPUSH
3553: LD_INT 5
3555: PPUSH
3556: CALL_OW 12
3560: ARRAY
3561: PPUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 5
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_OWVAR 67
3584: ARRAY
3585: PPUSH
3586: CALL_OW 380
// un := CreateHuman ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: CALL_OW 44
3599: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_INT 10
3607: PPUSH
3608: LD_INT 0
3610: PPUSH
3611: CALL 73046 0 3
3615: IFFALSE 3667
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3617: LD_ADDR_EXP 39
3621: PUSH
3622: LD_EXP 39
3626: PPUSH
3627: LD_EXP 39
3631: PUSH
3632: LD_INT 1
3634: PLUS
3635: PPUSH
3636: LD_VAR 0 3
3640: PPUSH
3641: CALL_OW 1
3645: ST_TO_ADDR
// if Prob ( 50 ) then
3646: LD_INT 50
3648: PPUSH
3649: CALL_OW 13
3653: IFFALSE 3667
// ForceSleep ( un , true ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_INT 1
3662: PPUSH
3663: CALL_OW 585
// end ; end ;
3667: GO 3522
3669: POP
3670: POP
// for i := 1 to 3 do
3671: LD_ADDR_VAR 0 2
3675: PUSH
3676: DOUBLE
3677: LD_INT 1
3679: DEC
3680: ST_TO_ADDR
3681: LD_INT 3
3683: PUSH
3684: FOR_TO
3685: IFFALSE 3779
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3687: LD_INT 0
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 4
3698: PUSH
3699: LD_INT 4
3701: PUSH
3702: LD_INT 5
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: PUSH
3711: LD_OWVAR 67
3715: ARRAY
3716: PPUSH
3717: CALL_OW 380
// un := CreateHuman ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: CALL_OW 44
3730: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_INT 11
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL 73046 0 3
3746: IFFALSE 3777
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3748: LD_ADDR_EXP 39
3752: PUSH
3753: LD_EXP 39
3757: PPUSH
3758: LD_EXP 39
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: PPUSH
3767: LD_VAR 0 3
3771: PPUSH
3772: CALL_OW 1
3776: ST_TO_ADDR
// end ;
3777: GO 3684
3779: POP
3780: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3781: LD_ADDR_VAR 0 2
3785: PUSH
3786: DOUBLE
3787: LD_INT 1
3789: DEC
3790: ST_TO_ADDR
3791: LD_INT 5
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: LD_INT 7
3799: PUSH
3800: LD_INT 8
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_OWVAR 67
3813: ARRAY
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3962
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3818: LD_INT 0
3820: PPUSH
3821: LD_INT 1
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: LD_INT 5
3848: PPUSH
3849: CALL_OW 12
3853: ARRAY
3854: PPUSH
3855: LD_INT 3
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 5
3863: PUSH
3864: LD_INT 5
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_OWVAR 67
3877: ARRAY
3878: PPUSH
3879: CALL_OW 380
// un := CreateHuman ;
3883: LD_ADDR_VAR 0 3
3887: PUSH
3888: CALL_OW 44
3892: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3893: LD_VAR 0 3
3897: PPUSH
3898: LD_INT 15
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL 73046 0 3
3908: IFFALSE 3960
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3910: LD_ADDR_EXP 40
3914: PUSH
3915: LD_EXP 40
3919: PPUSH
3920: LD_EXP 40
3924: PUSH
3925: LD_INT 1
3927: PLUS
3928: PPUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 1
3938: ST_TO_ADDR
// if Prob ( 50 ) then
3939: LD_INT 50
3941: PPUSH
3942: CALL_OW 13
3946: IFFALSE 3960
// ForceSleep ( un , true ) ;
3948: LD_VAR 0 3
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: CALL_OW 585
// end ; end ;
3960: GO 3815
3962: POP
3963: POP
// end ;
3964: LD_VAR 0 1
3968: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3969: LD_INT 0
3971: PPUSH
3972: PPUSH
3973: PPUSH
// uc_side := 3 ;
3974: LD_ADDR_OWVAR 20
3978: PUSH
3979: LD_INT 3
3981: ST_TO_ADDR
// uc_nation := 3 ;
3982: LD_ADDR_OWVAR 21
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// for i := 1 to 6 do
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_INT 6
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4083
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4006: LD_INT 0
4008: PPUSH
4009: LD_INT 1
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 12
4029: ARRAY
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 380
// un := CreateHuman ;
4038: LD_ADDR_VAR 0 3
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4048: LD_VAR 0 3
4052: PPUSH
4053: LD_INT 54
4055: PPUSH
4056: LD_INT 88
4058: PPUSH
4059: LD_INT 12
4061: PPUSH
4062: LD_INT 0
4064: PPUSH
4065: CALL_OW 50
// SetLives ( un , 1 ) ;
4069: LD_VAR 0 3
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: CALL_OW 234
// end ;
4081: GO 4003
4083: POP
4084: POP
// uc_side := 3 ;
4085: LD_ADDR_OWVAR 20
4089: PUSH
4090: LD_INT 3
4092: ST_TO_ADDR
// uc_nation := 0 ;
4093: LD_ADDR_OWVAR 21
4097: PUSH
4098: LD_INT 0
4100: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4101: LD_ADDR_EXP 42
4105: PUSH
4106: EMPTY
4107: ST_TO_ADDR
// apeEngGroup := [ ] ;
4108: LD_ADDR_EXP 43
4112: PUSH
4113: EMPTY
4114: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4115: LD_ADDR_VAR 0 2
4119: PUSH
4120: DOUBLE
4121: LD_INT 1
4123: DEC
4124: ST_TO_ADDR
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 6
4133: PUSH
4134: LD_INT 7
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: LD_OWVAR 67
4147: ARRAY
4148: PUSH
4149: FOR_TO
4150: IFFALSE 4268
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4152: LD_INT 0
4154: PPUSH
4155: LD_INT 15
4157: PPUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: LD_INT 6
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: PUSH
4176: LD_OWVAR 67
4180: ARRAY
4181: PPUSH
4182: CALL_OW 380
// un := CreateHuman ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4196: LD_ADDR_EXP 42
4200: PUSH
4201: LD_EXP 42
4205: PPUSH
4206: LD_EXP 42
4210: PUSH
4211: LD_INT 1
4213: PLUS
4214: PPUSH
4215: LD_VAR 0 3
4219: PPUSH
4220: CALL_OW 1
4224: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4225: LD_VAR 0 3
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: CALL_OW 12
4240: PPUSH
4241: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: LD_INT 56
4252: PPUSH
4253: LD_INT 82
4255: PPUSH
4256: LD_INT 6
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 50
// end ;
4266: GO 4149
4268: POP
4269: POP
// for i := 1 to 2 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_INT 1
4278: DEC
4279: ST_TO_ADDR
4280: LD_INT 2
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4360
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 16
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4309: LD_ADDR_EXP 43
4313: PUSH
4314: LD_EXP 43
4318: PPUSH
4319: LD_EXP 43
4323: PUSH
4324: LD_INT 1
4326: PLUS
4327: PPUSH
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL_OW 1
4337: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 51
4345: PPUSH
4346: LD_INT 77
4348: PPUSH
4349: CALL_OW 428
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4283
4360: POP
4361: POP
// end ;
4362: LD_VAR 0 1
4366: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4367: LD_EXP 42
4371: PPUSH
4372: LD_INT 3
4374: PUSH
4375: LD_INT 24
4377: PUSH
4378: LD_INT 600
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 54
4394: PUSH
4395: EMPTY
4396: LIST
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 72
4410: PUSH
4411: LD_INT 66
4413: PPUSH
4414: LD_INT 89
4416: PPUSH
4417: CALL_OW 428
4421: PPUSH
4422: CALL_OW 302
4426: AND
4427: IFFALSE 4512
4429: GO 4431
4431: DISABLE
4432: LD_INT 0
4434: PPUSH
// begin enable ;
4435: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4436: LD_ADDR_VAR 0 1
4440: PUSH
4441: LD_EXP 42
4445: PPUSH
4446: LD_INT 3
4448: PUSH
4449: LD_INT 24
4451: PUSH
4452: LD_INT 600
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 72
4484: PUSH
4485: FOR_IN
4486: IFFALSE 4510
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4488: LD_VAR 0 1
4492: PPUSH
4493: LD_INT 66
4495: PPUSH
4496: LD_INT 89
4498: PPUSH
4499: CALL_OW 428
4503: PPUSH
4504: CALL_OW 120
4508: GO 4485
4510: POP
4511: POP
// end ;
4512: PPOPN 1
4514: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4515: LD_INT 22
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 92
4527: PUSH
4528: LD_INT 54
4530: PUSH
4531: LD_INT 77
4533: PUSH
4534: LD_INT 8
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 69
4551: IFFALSE 4615
4553: GO 4555
4555: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4556: LD_EXP 43
4560: PPUSH
4561: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4565: LD_EXP 43
4569: PPUSH
4570: LD_INT 22
4572: PUSH
4573: LD_INT 2
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 92
4582: PUSH
4583: LD_INT 54
4585: PUSH
4586: LD_INT 77
4588: PUSH
4589: LD_INT 8
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PUSH
4607: LD_INT 1
4609: ARRAY
4610: PPUSH
4611: CALL_OW 175
// end ;
4615: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_INT 3
4638: PPUSH
4639: CALL_OW 12
4643: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4644: LD_ADDR_VAR 0 5
4648: PUSH
4649: LD_INT 16
4651: PUSH
4652: LD_INT 17
4654: PUSH
4655: LD_INT 19
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: PUSH
4663: LD_VAR 0 3
4667: ARRAY
4668: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4669: LD_ADDR_VAR 0 7
4673: PUSH
4674: LD_INT 159
4676: PUSH
4677: LD_INT 25
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 137
4686: PUSH
4687: LD_INT 37
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 123
4696: PUSH
4697: LD_INT 55
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 115
4706: PUSH
4707: LD_INT 71
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 106
4716: PUSH
4717: LD_INT 88
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 97
4726: PUSH
4727: LD_INT 114
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 75
4736: PUSH
4737: LD_INT 146
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 206
4755: PUSH
4756: LD_INT 135
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 184
4765: PUSH
4766: LD_INT 111
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 154
4775: PUSH
4776: LD_INT 97
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 122
4785: PUSH
4786: LD_INT 80
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 109
4795: PUSH
4796: LD_INT 78
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 97
4805: PUSH
4806: LD_INT 113
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 75
4815: PUSH
4816: LD_INT 147
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 185
4834: PUSH
4835: LD_INT 72
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 171
4844: PUSH
4845: LD_INT 83
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 161
4854: PUSH
4855: LD_INT 99
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 125
4864: PUSH
4865: LD_INT 82
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 105
4874: PUSH
4875: LD_INT 90
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 96
4884: PUSH
4885: LD_INT 116
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 75
4894: PUSH
4895: LD_INT 147
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_VAR 0 3
4920: ARRAY
4921: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 5
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: LD_VAR 0 3
4945: ARRAY
4946: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4947: LD_ADDR_VAR 0 6
4951: PUSH
4952: LD_INT 22
4954: PUSH
4955: LD_INT 20
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PUSH
4966: LD_VAR 0 3
4970: ARRAY
4971: ST_TO_ADDR
// for i := 1 to 2 do
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: DOUBLE
4978: LD_INT 1
4980: DEC
4981: ST_TO_ADDR
4982: LD_INT 2
4984: PUSH
4985: FOR_TO
4986: IFFALSE 5004
// EraseResourceArea ( i , outerSpawnArea ) ;
4988: LD_VAR 0 2
4992: PPUSH
4993: LD_VAR 0 6
4997: PPUSH
4998: CALL_OW 286
5002: GO 4985
5004: POP
5005: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5006: LD_VAR 0 6
5010: PPUSH
5011: LD_INT 2
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 21
5026: PUSH
5027: LD_INT 2
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 21
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 70
5054: IFFALSE 5269
// repeat wait ( 0 0$1 ) ;
5056: LD_INT 35
5058: PPUSH
5059: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_INT 2
5070: PUSH
5071: LD_INT 21
5073: PUSH
5074: LD_INT 2
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 21
5083: PUSH
5084: LD_INT 3
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 2
5114: PUSH
5115: LD_INT 21
5117: PUSH
5118: LD_INT 2
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 21
5127: PUSH
5128: LD_INT 3
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: PPUSH
5140: CALL_OW 70
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5159
// RemoveUnit ( i ) ;
5148: LD_VAR 0 2
5152: PPUSH
5153: CALL_OW 64
5157: GO 5145
5159: POP
5160: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 21
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PPUSH
5176: CALL_OW 70
5180: IFFALSE 5229
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_VAR 0 6
5191: PPUSH
5192: LD_INT 21
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 70
5206: PUSH
5207: FOR_IN
5208: IFFALSE 5227
// ComMoveXY ( i , 113 , 53 ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: LD_INT 113
5217: PPUSH
5218: LD_INT 53
5220: PPUSH
5221: CALL_OW 111
5225: GO 5207
5227: POP
5228: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5229: LD_VAR 0 6
5233: PPUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 21
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 2
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 70
5266: NOT
5267: IFFALSE 5056
// case convoyCounter of 1 .. 3 :
5269: LD_EXP 16
5273: PUSH
5274: LD_INT 1
5276: DOUBLE
5277: GREATEREQUAL
5278: IFFALSE 5286
5280: LD_INT 3
5282: DOUBLE
5283: LESSEQUAL
5284: IFTRUE 5288
5286: GO 5923
5288: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 5
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_INT 7
5307: PUSH
5308: LD_INT 8
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_OWVAR 67
5321: ARRAY
5322: PUSH
5323: LD_EXP 16
5327: MINUS
5328: PUSH
5329: FOR_TO
5330: IFFALSE 5537
// begin uc_side := 3 ;
5332: LD_ADDR_OWVAR 20
5336: PUSH
5337: LD_INT 3
5339: ST_TO_ADDR
// uc_nation := 3 ;
5340: LD_ADDR_OWVAR 21
5344: PUSH
5345: LD_INT 3
5347: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PUSH
5354: LD_INT 1
5356: PUSH
5357: LD_INT 1
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_INT 4
5374: PPUSH
5375: CALL_OW 12
5379: ARRAY
5380: PPUSH
5381: LD_INT 4
5383: PUSH
5384: LD_INT 5
5386: PUSH
5387: LD_INT 6
5389: PUSH
5390: LD_INT 7
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: PUSH
5399: LD_OWVAR 67
5403: ARRAY
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 8
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , dir ) ;
5419: LD_VAR 0 8
5423: PPUSH
5424: LD_VAR 0 4
5428: PPUSH
5429: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5433: LD_VAR 0 8
5437: PPUSH
5438: LD_VAR 0 5
5442: PPUSH
5443: LD_INT 0
5445: PPUSH
5446: CALL 73046 0 3
5450: IFFALSE 5535
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5452: LD_ADDR_EXP 41
5456: PUSH
5457: LD_EXP 41
5461: PPUSH
5462: LD_EXP 41
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: PPUSH
5471: LD_VAR 0 8
5475: PPUSH
5476: CALL_OW 1
5480: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5481: LD_VAR 0 8
5485: PPUSH
5486: LD_INT 1
5488: PPUSH
5489: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5493: LD_VAR 0 8
5497: PPUSH
5498: LD_VAR 0 7
5502: PUSH
5503: LD_INT 1
5505: ARRAY
5506: PUSH
5507: LD_INT 1
5509: ARRAY
5510: PPUSH
5511: LD_VAR 0 7
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PUSH
5520: LD_INT 2
5522: ARRAY
5523: PPUSH
5524: CALL_OW 111
// wait ( 0 0$2 ) ;
5528: LD_INT 70
5530: PPUSH
5531: CALL_OW 67
// end ; end ;
5535: GO 5329
5537: POP
5538: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5539: LD_ADDR_VAR 0 2
5543: PUSH
5544: DOUBLE
5545: LD_INT 1
5547: DEC
5548: ST_TO_ADDR
5549: LD_INT 3
5551: PUSH
5552: LD_INT 4
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 4
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_OWVAR 67
5571: ARRAY
5572: PUSH
5573: FOR_TO
5574: IFFALSE 5919
// begin uc_side := 3 ;
5576: LD_ADDR_OWVAR 20
5580: PUSH
5581: LD_INT 3
5583: ST_TO_ADDR
// uc_nation := 3 ;
5584: LD_ADDR_OWVAR 21
5588: PUSH
5589: LD_INT 3
5591: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5592: LD_INT 3
5594: PPUSH
5595: LD_INT 3
5597: PPUSH
5598: LD_INT 21
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 23
5606: PUSH
5607: LD_INT 24
5609: PUSH
5610: LD_INT 24
5612: PUSH
5613: LD_INT 24
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: PUSH
5624: LD_OWVAR 67
5628: PPUSH
5629: LD_OWVAR 67
5633: PUSH
5634: LD_INT 2
5636: PLUS
5637: PPUSH
5638: CALL_OW 12
5642: ARRAY
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: LD_INT 42
5652: PUSH
5653: LD_INT 44
5655: PUSH
5656: LD_INT 43
5658: PUSH
5659: LD_INT 44
5661: PUSH
5662: LD_INT 46
5664: PUSH
5665: LD_INT 46
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 1
5678: PPUSH
5679: LD_OWVAR 67
5683: PUSH
5684: LD_INT 2
5686: PLUS
5687: PPUSH
5688: CALL_OW 12
5692: ARRAY
5693: PPUSH
5694: LD_INT 90
5696: PPUSH
5697: CALL 447 0 7
// un := CreateVehicle ;
5701: LD_ADDR_VAR 0 8
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( un , dir ) ;
5711: LD_VAR 0 8
5715: PPUSH
5716: LD_VAR 0 4
5720: PPUSH
5721: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5725: LD_VAR 0 8
5729: PPUSH
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL 73046 0 3
5742: IFFALSE 5917
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5744: LD_ADDR_EXP 41
5748: PUSH
5749: LD_EXP 41
5753: PPUSH
5754: LD_EXP 41
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: PPUSH
5763: LD_VAR 0 8
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5773: LD_INT 0
5775: PPUSH
5776: LD_INT 3
5778: PUSH
5779: LD_INT 4
5781: PUSH
5782: LD_INT 5
5784: PUSH
5785: LD_INT 6
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: LD_OWVAR 67
5798: ARRAY
5799: PPUSH
5800: CALL_OW 383
// un := CreateHuman ;
5804: LD_ADDR_VAR 0 8
5808: PUSH
5809: CALL_OW 44
5813: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5814: LD_VAR 0 8
5818: PPUSH
5819: LD_EXP 41
5823: PUSH
5824: LD_EXP 41
5828: ARRAY
5829: PPUSH
5830: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5834: LD_ADDR_EXP 41
5838: PUSH
5839: LD_EXP 41
5843: PPUSH
5844: LD_EXP 41
5848: PUSH
5849: LD_INT 1
5851: PLUS
5852: PPUSH
5853: LD_VAR 0 8
5857: PPUSH
5858: CALL_OW 1
5862: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5863: LD_VAR 0 8
5867: PPUSH
5868: LD_INT 1
5870: PPUSH
5871: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5875: LD_VAR 0 8
5879: PPUSH
5880: LD_VAR 0 7
5884: PUSH
5885: LD_INT 1
5887: ARRAY
5888: PUSH
5889: LD_INT 1
5891: ARRAY
5892: PPUSH
5893: LD_VAR 0 7
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PUSH
5902: LD_INT 2
5904: ARRAY
5905: PPUSH
5906: CALL_OW 111
// wait ( 0 0$3 ) ;
5910: LD_INT 105
5912: PPUSH
5913: CALL_OW 67
// end ; end ;
5917: GO 5573
5919: POP
5920: POP
// end ; 4 .. 7 :
5921: GO 6528
5923: LD_INT 4
5925: DOUBLE
5926: GREATEREQUAL
5927: IFFALSE 5935
5929: LD_INT 7
5931: DOUBLE
5932: LESSEQUAL
5933: IFTRUE 5937
5935: GO 6527
5937: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_INT 2
5950: PUSH
5951: LD_INT 3
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: LD_INT 4
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: PUSH
5966: LD_OWVAR 67
5970: ARRAY
5971: PUSH
5972: FOR_TO
5973: IFFALSE 6153
// begin uc_side := 3 ;
5975: LD_ADDR_OWVAR 20
5979: PUSH
5980: LD_INT 3
5982: ST_TO_ADDR
// uc_nation := 3 ;
5983: LD_ADDR_OWVAR 21
5987: PUSH
5988: LD_INT 3
5990: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5991: LD_INT 0
5993: PPUSH
5994: LD_INT 1
5996: PPUSH
5997: LD_INT 4
5999: PUSH
6000: LD_INT 5
6002: PUSH
6003: LD_INT 6
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_OWVAR 67
6019: ARRAY
6020: PPUSH
6021: CALL_OW 380
// un := CreateHuman ;
6025: LD_ADDR_VAR 0 8
6029: PUSH
6030: CALL_OW 44
6034: ST_TO_ADDR
// SetDir ( un , dir ) ;
6035: LD_VAR 0 8
6039: PPUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_VAR 0 5
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL 73046 0 3
6066: IFFALSE 6151
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6068: LD_ADDR_EXP 41
6072: PUSH
6073: LD_EXP 41
6077: PPUSH
6078: LD_EXP 41
6082: PUSH
6083: LD_INT 1
6085: PLUS
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6097: LD_VAR 0 8
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6109: LD_VAR 0 8
6113: PPUSH
6114: LD_VAR 0 7
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 7
6131: PUSH
6132: LD_INT 1
6134: ARRAY
6135: PUSH
6136: LD_INT 2
6138: ARRAY
6139: PPUSH
6140: CALL_OW 111
// wait ( 0 0$2 ) ;
6144: LD_INT 70
6146: PPUSH
6147: CALL_OW 67
// end ; end ;
6151: GO 5972
6153: POP
6154: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6155: LD_ADDR_VAR 0 2
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 2
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 4
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_OWVAR 67
6187: ARRAY
6188: PUSH
6189: FOR_TO
6190: IFFALSE 6523
// begin uc_side := 3 ;
6192: LD_ADDR_OWVAR 20
6196: PUSH
6197: LD_INT 3
6199: ST_TO_ADDR
// uc_nation := 3 ;
6200: LD_ADDR_OWVAR 21
6204: PUSH
6205: LD_INT 3
6207: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6208: LD_INT 3
6210: PPUSH
6211: LD_INT 3
6213: PPUSH
6214: LD_INT 21
6216: PUSH
6217: LD_INT 22
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 1
6226: PPUSH
6227: LD_INT 2
6229: PPUSH
6230: CALL_OW 12
6234: ARRAY
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 42
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: LD_INT 43
6250: PUSH
6251: LD_INT 44
6253: PUSH
6254: LD_INT 44
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 1
6266: PPUSH
6267: LD_OWVAR 67
6271: PUSH
6272: LD_INT 1
6274: PLUS
6275: PPUSH
6276: CALL_OW 12
6280: ARRAY
6281: PPUSH
6282: LD_INT 90
6284: PPUSH
6285: CALL 447 0 7
// un := CreateVehicle ;
6289: LD_ADDR_VAR 0 8
6293: PUSH
6294: CALL_OW 45
6298: ST_TO_ADDR
// SetDir ( un , dir ) ;
6299: LD_VAR 0 8
6303: PPUSH
6304: LD_VAR 0 4
6308: PPUSH
6309: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6313: LD_VAR 0 8
6317: PPUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 0
6325: PPUSH
6326: CALL 73046 0 3
6330: IFFALSE 6521
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6332: LD_ADDR_EXP 41
6336: PUSH
6337: LD_EXP 41
6341: PPUSH
6342: LD_EXP 41
6346: PUSH
6347: LD_INT 1
6349: PLUS
6350: PPUSH
6351: LD_VAR 0 8
6355: PPUSH
6356: CALL_OW 1
6360: ST_TO_ADDR
// uc_side := 3 ;
6361: LD_ADDR_OWVAR 20
6365: PUSH
6366: LD_INT 3
6368: ST_TO_ADDR
// uc_nation := 3 ;
6369: LD_ADDR_OWVAR 21
6373: PUSH
6374: LD_INT 3
6376: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6377: LD_INT 0
6379: PPUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: LD_INT 6
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: PUSH
6398: LD_OWVAR 67
6402: ARRAY
6403: PPUSH
6404: CALL_OW 383
// un := CreateHuman ;
6408: LD_ADDR_VAR 0 8
6412: PUSH
6413: CALL_OW 44
6417: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6418: LD_VAR 0 8
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_EXP 41
6432: ARRAY
6433: PPUSH
6434: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6438: LD_ADDR_EXP 41
6442: PUSH
6443: LD_EXP 41
6447: PPUSH
6448: LD_EXP 41
6452: PUSH
6453: LD_INT 1
6455: PLUS
6456: PPUSH
6457: LD_VAR 0 8
6461: PPUSH
6462: CALL_OW 1
6466: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6467: LD_VAR 0 8
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6479: LD_VAR 0 8
6483: PPUSH
6484: LD_VAR 0 7
6488: PUSH
6489: LD_INT 1
6491: ARRAY
6492: PUSH
6493: LD_INT 1
6495: ARRAY
6496: PPUSH
6497: LD_VAR 0 7
6501: PUSH
6502: LD_INT 1
6504: ARRAY
6505: PUSH
6506: LD_INT 2
6508: ARRAY
6509: PPUSH
6510: CALL_OW 111
// wait ( 0 0$2 ) ;
6514: LD_INT 70
6516: PPUSH
6517: CALL_OW 67
// end ; end ;
6521: GO 6189
6523: POP
6524: POP
// end ; end ;
6525: GO 6528
6527: POP
// repeat wait ( 0 0$1 ) ;
6528: LD_INT 35
6530: PPUSH
6531: CALL_OW 67
// for un in ruConvoySquad do
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_EXP 41
6544: PUSH
6545: FOR_IN
6546: IFFALSE 7170
// begin if IsInArea ( un , westSouthOutArea ) then
6548: LD_VAR 0 8
6552: PPUSH
6553: LD_INT 18
6555: PPUSH
6556: CALL_OW 308
6560: IFFALSE 6648
// begin if GetType ( un ) = unit_vehicle then
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 247
6571: PUSH
6572: LD_INT 2
6574: EQUAL
6575: IFFALSE 6607
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6577: LD_ADDR_EXP 41
6581: PUSH
6582: LD_EXP 41
6586: PUSH
6587: LD_VAR 0 8
6591: PPUSH
6592: CALL_OW 311
6596: DIFF
6597: ST_TO_ADDR
// RemoveUnit ( un ) ;
6598: LD_VAR 0 8
6602: PPUSH
6603: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6607: LD_ADDR_EXP 15
6611: PUSH
6612: LD_EXP 15
6616: PUSH
6617: LD_INT 1
6619: PLUS
6620: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6621: LD_ADDR_EXP 41
6625: PUSH
6626: LD_EXP 41
6630: PUSH
6631: LD_VAR 0 8
6635: DIFF
6636: ST_TO_ADDR
// RemoveUnit ( un ) ;
6637: LD_VAR 0 8
6641: PPUSH
6642: CALL_OW 64
// break ;
6646: GO 7170
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6648: LD_VAR 0 8
6652: PPUSH
6653: CALL_OW 305
6657: NOT
6658: PUSH
6659: LD_VAR 0 8
6663: PPUSH
6664: CALL_OW 310
6668: NOT
6669: AND
6670: IFFALSE 6688
// ruConvoySquad := ruConvoySquad diff un ;
6672: LD_ADDR_EXP 41
6676: PUSH
6677: LD_EXP 41
6681: PUSH
6682: LD_VAR 0 8
6686: DIFF
6687: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6688: LD_VAR 0 8
6692: PPUSH
6693: CALL_OW 302
6697: PUSH
6698: LD_VAR 0 8
6702: PPUSH
6703: CALL_OW 314
6707: NOT
6708: AND
6709: IFFALSE 7168
// begin tag := GetTag ( un ) ;
6711: LD_ADDR_VAR 0 9
6715: PUSH
6716: LD_VAR 0 8
6720: PPUSH
6721: CALL_OW 110
6725: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 7
6735: PUSH
6736: LD_VAR 0 9
6740: PUSH
6741: LD_INT 1
6743: PLUS
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 7
6754: PUSH
6755: LD_VAR 0 9
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ARRAY
6764: PUSH
6765: LD_INT 2
6767: ARRAY
6768: PPUSH
6769: CALL_OW 297
6773: PUSH
6774: LD_INT 6
6776: LESS
6777: IFFALSE 6960
// begin SetTag ( un , tag + 1 ) ;
6779: LD_VAR 0 8
6783: PPUSH
6784: LD_VAR 0 9
6788: PUSH
6789: LD_INT 1
6791: PLUS
6792: PPUSH
6793: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6797: LD_VAR 0 8
6801: PPUSH
6802: CALL_OW 247
6806: PUSH
6807: LD_INT 2
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 8
6815: PPUSH
6816: CALL_OW 257
6820: PUSH
6821: LD_INT 3
6823: EQUAL
6824: OR
6825: IFFALSE 6958
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6827: LD_ADDR_VAR 0 10
6831: PUSH
6832: LD_INT 22
6834: PUSH
6835: LD_INT 2
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 91
6844: PUSH
6845: LD_VAR 0 8
6849: PUSH
6850: LD_INT 8
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// if enemy then
6867: LD_VAR 0 10
6871: IFFALSE 6899
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6873: LD_VAR 0 8
6877: PPUSH
6878: LD_VAR 0 10
6882: PPUSH
6883: LD_VAR 0 8
6887: PPUSH
6888: CALL_OW 74
6892: PPUSH
6893: CALL_OW 115
6897: GO 6958
// begin AddComWait ( un , 0 0$4 ) ;
6899: LD_VAR 0 8
6903: PPUSH
6904: LD_INT 140
6906: PPUSH
6907: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6911: LD_VAR 0 8
6915: PPUSH
6916: LD_VAR 0 7
6920: PUSH
6921: LD_VAR 0 9
6925: PUSH
6926: LD_INT 1
6928: PLUS
6929: ARRAY
6930: PUSH
6931: LD_INT 1
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 7
6939: PUSH
6940: LD_VAR 0 9
6944: PUSH
6945: LD_INT 1
6947: PLUS
6948: ARRAY
6949: PUSH
6950: LD_INT 2
6952: ARRAY
6953: PPUSH
6954: CALL_OW 174
// end ; end ; end else
6958: GO 7168
// begin if GetClass ( un ) = 4 then
6960: LD_VAR 0 8
6964: PPUSH
6965: CALL_OW 257
6969: PUSH
6970: LD_INT 4
6972: EQUAL
6973: IFFALSE 7121
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6975: LD_EXP 41
6979: PPUSH
6980: LD_INT 21
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 24
6995: PUSH
6996: LD_INT 1000
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 72
7015: IFFALSE 7073
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7017: LD_VAR 0 8
7021: PPUSH
7022: LD_EXP 41
7026: PPUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 1
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 24
7042: PUSH
7043: LD_INT 1000
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 72
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PPUSH
7067: CALL_OW 128
7071: GO 7119
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7073: LD_VAR 0 8
7077: PPUSH
7078: LD_EXP 41
7082: PPUSH
7083: LD_INT 3
7085: PUSH
7086: LD_INT 25
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PPUSH
7105: LD_VAR 0 8
7109: PPUSH
7110: CALL_OW 74
7114: PPUSH
7115: CALL_OW 112
7119: GO 7168
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7121: LD_VAR 0 8
7125: PPUSH
7126: LD_VAR 0 7
7130: PUSH
7131: LD_VAR 0 9
7135: PUSH
7136: LD_INT 1
7138: PLUS
7139: ARRAY
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PPUSH
7145: LD_VAR 0 7
7149: PUSH
7150: LD_VAR 0 9
7154: PUSH
7155: LD_INT 1
7157: PLUS
7158: ARRAY
7159: PUSH
7160: LD_INT 2
7162: ARRAY
7163: PPUSH
7164: CALL_OW 114
// end ; end ; end ;
7168: GO 6545
7170: POP
7171: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7172: LD_EXP 41
7176: PPUSH
7177: LD_INT 52
7179: PUSH
7180: EMPTY
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PPUSH
7197: CALL_OW 72
7201: NOT
7202: IFFALSE 6528
// end ;
7204: LD_VAR 0 1
7208: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7209: LD_EXP 16
7213: PUSH
7214: LD_INT 3
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: LESS
7225: PUSH
7226: LD_EXP 41
7230: NOT
7231: AND
7232: PUSH
7233: LD_OWVAR 67
7237: PUSH
7238: LD_INT 1
7240: GREATER
7241: AND
7242: IFFALSE 7662
7244: GO 7246
7246: DISABLE
7247: LD_INT 0
7249: PPUSH
7250: PPUSH
7251: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7252: LD_ADDR_VAR 0 1
7256: PUSH
7257: DOUBLE
7258: LD_INT 1
7260: DEC
7261: ST_TO_ADDR
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_OWVAR 67
7284: ARRAY
7285: PUSH
7286: FOR_TO
7287: IFFALSE 7583
// begin uc_side := 3 ;
7289: LD_ADDR_OWVAR 20
7293: PUSH
7294: LD_INT 3
7296: ST_TO_ADDR
// uc_nation := 3 ;
7297: LD_ADDR_OWVAR 21
7301: PUSH
7302: LD_INT 3
7304: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7305: LD_INT 3
7307: PPUSH
7308: LD_INT 3
7310: PPUSH
7311: LD_INT 21
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 23
7319: PUSH
7320: LD_INT 24
7322: PUSH
7323: LD_INT 24
7325: PUSH
7326: LD_INT 24
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: PPUSH
7342: LD_OWVAR 67
7346: PUSH
7347: LD_INT 2
7349: PLUS
7350: PPUSH
7351: CALL_OW 12
7355: ARRAY
7356: PPUSH
7357: LD_INT 1
7359: PPUSH
7360: LD_INT 1
7362: PPUSH
7363: LD_INT 42
7365: PUSH
7366: LD_INT 44
7368: PUSH
7369: LD_INT 43
7371: PUSH
7372: LD_INT 44
7374: PUSH
7375: LD_INT 46
7377: PUSH
7378: LD_INT 46
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 1
7391: PPUSH
7392: LD_OWVAR 67
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: CALL_OW 12
7405: ARRAY
7406: PPUSH
7407: LD_INT 90
7409: PPUSH
7410: CALL 447 0 7
// un := CreateVehicle ;
7414: LD_ADDR_VAR 0 3
7418: PUSH
7419: CALL_OW 45
7423: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7424: LD_VAR 0 3
7428: PPUSH
7429: LD_INT 0
7431: PPUSH
7432: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7436: LD_VAR 0 3
7440: PPUSH
7441: LD_INT 23
7443: PPUSH
7444: LD_INT 0
7446: PPUSH
7447: CALL 73046 0 3
7451: IFFALSE 7581
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7453: LD_ADDR_VAR 0 2
7457: PUSH
7458: LD_VAR 0 2
7462: PPUSH
7463: LD_VAR 0 2
7467: PUSH
7468: LD_INT 1
7470: PLUS
7471: PPUSH
7472: LD_VAR 0 3
7476: PPUSH
7477: CALL_OW 1
7481: ST_TO_ADDR
// uc_side := 3 ;
7482: LD_ADDR_OWVAR 20
7486: PUSH
7487: LD_INT 3
7489: ST_TO_ADDR
// uc_nation := 3 ;
7490: LD_ADDR_OWVAR 21
7494: PUSH
7495: LD_INT 3
7497: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7498: LD_INT 0
7500: PPUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 4
7506: PUSH
7507: LD_INT 5
7509: PUSH
7510: LD_INT 6
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: PUSH
7519: LD_OWVAR 67
7523: ARRAY
7524: PPUSH
7525: CALL_OW 383
// un := CreateHuman ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: CALL_OW 44
7538: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7539: LD_VAR 0 3
7543: PPUSH
7544: LD_VAR 0 2
7548: PUSH
7549: LD_VAR 0 2
7553: ARRAY
7554: PPUSH
7555: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7559: LD_VAR 0 3
7563: PPUSH
7564: LD_INT 80
7566: PPUSH
7567: LD_INT 139
7569: PPUSH
7570: CALL_OW 111
// wait ( 0 0$3 ) ;
7574: LD_INT 105
7576: PPUSH
7577: CALL_OW 67
// end ; end ;
7581: GO 7286
7583: POP
7584: POP
// for i in tmp do
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_VAR 0 2
7594: PUSH
7595: FOR_IN
7596: IFFALSE 7660
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7598: LD_VAR 0 1
7602: PPUSH
7603: LD_INT 101
7605: PPUSH
7606: LD_INT 102
7608: PPUSH
7609: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_INT 110
7620: PPUSH
7621: LD_INT 78
7623: PPUSH
7624: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7628: LD_VAR 0 1
7632: PPUSH
7633: LD_INT 75
7635: PPUSH
7636: LD_INT 101
7638: PPUSH
7639: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7643: LD_VAR 0 1
7647: PPUSH
7648: LD_INT 57
7650: PPUSH
7651: LD_INT 83
7653: PPUSH
7654: CALL_OW 174
// end ;
7658: GO 7595
7660: POP
7661: POP
// end ;
7662: PPOPN 3
7664: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7665: LD_EXP 39
7669: PPUSH
7670: LD_INT 3
7672: PUSH
7673: LD_INT 24
7675: PUSH
7676: LD_INT 1000
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PPUSH
7687: CALL_OW 72
7691: PUSH
7692: LD_EXP 40
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: OR
7719: IFFALSE 7818
7721: GO 7723
7723: DISABLE
7724: LD_INT 0
7726: PPUSH
// begin enable ;
7727: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7728: LD_ADDR_VAR 0 1
7732: PUSH
7733: LD_EXP 39
7737: PPUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 24
7743: PUSH
7744: LD_INT 1000
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 72
7759: PUSH
7760: LD_EXP 40
7764: PPUSH
7765: LD_INT 3
7767: PUSH
7768: LD_INT 24
7770: PUSH
7771: LD_INT 1000
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 72
7786: UNION
7787: PUSH
7788: FOR_IN
7789: IFFALSE 7816
// if IsSleeping ( i ) then
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 555
7800: IFFALSE 7814
// ForceSleep ( i , false ) ;
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL_OW 585
7814: GO 7788
7816: POP
7817: POP
// end ;
7818: PPOPN 1
7820: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7821: LD_EXP 38
7825: PPUSH
7826: LD_INT 1
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 54
7834: PUSH
7835: EMPTY
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 3
7844: PUSH
7845: LD_INT 95
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 72
7868: IFFALSE 7963
7870: GO 7872
7872: DISABLE
7873: LD_INT 0
7875: PPUSH
7876: PPUSH
// begin enable ;
7877: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7878: LD_ADDR_VAR 0 2
7882: PUSH
7883: LD_EXP 38
7887: PPUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 54
7896: PUSH
7897: EMPTY
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: LD_INT 95
7909: PUSH
7910: LD_INT 26
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 72
7930: ST_TO_ADDR
// for i in tmp do
7931: LD_ADDR_VAR 0 1
7935: PUSH
7936: LD_VAR 0 2
7940: PUSH
7941: FOR_IN
7942: IFFALSE 7961
// ComMoveXY ( i , 206 , 110 ) ;
7944: LD_VAR 0 1
7948: PPUSH
7949: LD_INT 206
7951: PPUSH
7952: LD_INT 110
7954: PPUSH
7955: CALL_OW 111
7959: GO 7941
7961: POP
7962: POP
// end ;
7963: PPOPN 2
7965: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7966: LD_INT 26
7968: PPUSH
7969: LD_INT 22
7971: PUSH
7972: LD_INT 2
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 70
7983: PUSH
7984: LD_INT 26
7986: PPUSH
7987: LD_INT 22
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 32
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 50
8009: PUSH
8010: EMPTY
8011: LIST
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 70
8022: AND
8023: IFFALSE 8102
8025: GO 8027
8027: DISABLE
8028: LD_INT 0
8030: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_INT 26
8038: PPUSH
8039: LD_INT 22
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 30
8051: PUSH
8052: LD_INT 32
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 50
8061: PUSH
8062: EMPTY
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 70
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8100
// if IsInUnit ( i ) then
8078: LD_VAR 0 1
8082: PPUSH
8083: CALL_OW 310
8087: IFFALSE 8098
// ComExitBuilding ( i ) ;
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 122
8098: GO 8075
8100: POP
8101: POP
// end ; end_of_file
8102: PPOPN 1
8104: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL 15035 0 1
// if un = Heike then
8114: LD_VAR 0 1
8118: PUSH
8119: LD_EXP 21
8123: EQUAL
8124: IFFALSE 8133
// YouLost ( Heike ) ;
8126: LD_STRING Heike
8128: PPUSH
8129: CALL_OW 104
// if un in apeSoldGroup then
8133: LD_VAR 0 1
8137: PUSH
8138: LD_EXP 42
8142: IN
8143: IFFALSE 8161
// apeSoldGroup := apeSoldGroup diff un ;
8145: LD_ADDR_EXP 42
8149: PUSH
8150: LD_EXP 42
8154: PUSH
8155: LD_VAR 0 1
8159: DIFF
8160: ST_TO_ADDR
// if un in apeEngGroup then
8161: LD_VAR 0 1
8165: PUSH
8166: LD_EXP 43
8170: IN
8171: IFFALSE 8189
// apeEngGroup := apeEngGroup diff un ;
8173: LD_ADDR_EXP 43
8177: PUSH
8178: LD_EXP 43
8182: PUSH
8183: LD_VAR 0 1
8187: DIFF
8188: ST_TO_ADDR
// if un in oilBaseGuard then
8189: LD_VAR 0 1
8193: PUSH
8194: LD_EXP 38
8198: IN
8199: IFFALSE 8217
// oilBaseGuard := oilBaseGuard diff un ;
8201: LD_ADDR_EXP 38
8205: PUSH
8206: LD_EXP 38
8210: PUSH
8211: LD_VAR 0 1
8215: DIFF
8216: ST_TO_ADDR
// if un in ruNorthGroup then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 39
8226: IN
8227: IFFALSE 8245
// ruNorthGroup := ruNorthGroup diff un ;
8229: LD_ADDR_EXP 39
8233: PUSH
8234: LD_EXP 39
8238: PUSH
8239: LD_VAR 0 1
8243: DIFF
8244: ST_TO_ADDR
// if un in ruSouthGroup then
8245: LD_VAR 0 1
8249: PUSH
8250: LD_EXP 40
8254: IN
8255: IFFALSE 8273
// ruSouthGroup := ruSouthGroup diff un ;
8257: LD_ADDR_EXP 40
8261: PUSH
8262: LD_EXP 40
8266: PUSH
8267: LD_VAR 0 1
8271: DIFF
8272: ST_TO_ADDR
// if un in ruConvoySquad then
8273: LD_VAR 0 1
8277: PUSH
8278: LD_EXP 41
8282: IN
8283: IFFALSE 8301
// ruConvoySquad := ruConvoySquad diff un ;
8285: LD_ADDR_EXP 41
8289: PUSH
8290: LD_EXP 41
8294: PUSH
8295: LD_VAR 0 1
8299: DIFF
8300: ST_TO_ADDR
// end ;
8301: PPOPN 1
8303: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8304: LD_VAR 0 1
8308: PPUSH
8309: LD_VAR 0 2
8313: PPUSH
8314: CALL 15093 0 2
// if GetWeapon ( veh ) = ar_radar then
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 264
8327: PUSH
8328: LD_INT 30
8330: EQUAL
8331: IFFALSE 8341
// radarConstructed := true ;
8333: LD_ADDR_EXP 13
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 264
8350: PUSH
8351: LD_INT 26
8353: EQUAL
8354: IFFALSE 8364
// flamethrowerBuilt := true ;
8356: LD_ADDR_EXP 20
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// end ;
8364: PPOPN 2
8366: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8367: LD_ADDR_EXP 18
8371: PUSH
8372: LD_EXP 18
8376: PUSH
8377: LD_INT 1
8379: PLUS
8380: ST_TO_ADDR
// if oldId in ruConvoySquad then
8381: LD_VAR 0 2
8385: PUSH
8386: LD_EXP 41
8390: IN
8391: IFFALSE 8409
// ruConvoySquad := ruConvoySquad diff oldId ;
8393: LD_ADDR_EXP 41
8397: PUSH
8398: LD_EXP 41
8402: PUSH
8403: LD_VAR 0 2
8407: DIFF
8408: ST_TO_ADDR
// if newId in ruConvoySquad then
8409: LD_VAR 0 1
8413: PUSH
8414: LD_EXP 41
8418: IN
8419: IFFALSE 8437
// ruConvoySquad := ruConvoySquad diff newId ;
8421: LD_ADDR_EXP 41
8425: PUSH
8426: LD_EXP 41
8430: PUSH
8431: LD_VAR 0 1
8435: DIFF
8436: ST_TO_ADDR
// end ; end_of_file
8437: PPOPN 4
8439: END
// export function Action ; var i , p , un , veh , tmp ; begin
8440: LD_INT 0
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
8447: PPUSH
// InGameOn ;
8448: CALL_OW 8
// music_nat := 2 ;
8452: LD_ADDR_OWVAR 71
8456: PUSH
8457: LD_INT 2
8459: ST_TO_ADDR
// music_class := music_recon ;
8460: LD_ADDR_OWVAR 72
8464: PUSH
8465: LD_INT 3
8467: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8468: LD_INT 7
8470: PPUSH
8471: LD_INT 6
8473: PPUSH
8474: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8478: LD_INT 7
8480: PPUSH
8481: LD_INT 6
8483: PPUSH
8484: LD_INT 2
8486: PPUSH
8487: LD_INT 30
8489: NEG
8490: PPUSH
8491: CALL 1155 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8495: LD_ADDR_VAR 0 6
8499: PUSH
8500: LD_EXP 21
8504: PUSH
8505: LD_EXP 22
8509: PUSH
8510: LD_EXP 23
8514: PUSH
8515: LD_EXP 24
8519: PUSH
8520: LD_EXP 25
8524: PUSH
8525: LD_EXP 26
8529: PUSH
8530: LD_EXP 28
8534: PUSH
8535: LD_EXP 33
8539: PUSH
8540: LD_EXP 27
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: ST_TO_ADDR
// tmp := tmp diff 0 ;
8556: LD_ADDR_VAR 0 6
8560: PUSH
8561: LD_VAR 0 6
8565: PUSH
8566: LD_INT 0
8568: DIFF
8569: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8570: LD_ADDR_VAR 0 6
8574: PUSH
8575: LD_VAR 0 6
8579: PPUSH
8580: LD_INT 3
8582: PPUSH
8583: CALL 72645 0 2
8587: ST_TO_ADDR
// for i in heikeVehicles do
8588: LD_ADDR_VAR 0 2
8592: PUSH
8593: LD_EXP 35
8597: PUSH
8598: FOR_IN
8599: IFFALSE 8798
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8601: LD_INT 5
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_INT 5
8611: ARRAY
8612: PPUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 2
8635: PUSH
8636: LD_INT 3
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 2
8644: PUSH
8645: LD_INT 4
8647: ARRAY
8648: PPUSH
8649: LD_INT 34
8651: PPUSH
8652: CALL 447 0 7
// veh := CreateVehicle ;
8656: LD_ADDR_VAR 0 5
8660: PUSH
8661: CALL_OW 45
8665: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 4
8673: ARRAY
8674: PUSH
8675: LD_INT 51
8677: PUSH
8678: LD_INT 32
8680: PUSH
8681: LD_INT 12
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: IN
8689: IFFALSE 8769
// begin if i [ 7 ] [ 1 ] then
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 7
8698: ARRAY
8699: PUSH
8700: LD_INT 1
8702: ARRAY
8703: IFFALSE 8730
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8705: LD_VAR 0 5
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: LD_VAR 0 2
8717: PUSH
8718: LD_INT 7
8720: ARRAY
8721: PUSH
8722: LD_INT 1
8724: ARRAY
8725: PPUSH
8726: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8730: LD_VAR 0 2
8734: PUSH
8735: LD_INT 7
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: IFFALSE 8769
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: LD_VAR 0 2
8756: PUSH
8757: LD_INT 7
8759: ARRAY
8760: PUSH
8761: LD_INT 2
8763: ARRAY
8764: PPUSH
8765: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8769: LD_VAR 0 5
8773: PPUSH
8774: LD_INT 2
8776: PPUSH
8777: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8781: LD_VAR 0 5
8785: PPUSH
8786: LD_INT 4
8788: PPUSH
8789: LD_INT 0
8791: PPUSH
8792: CALL_OW 49
// end ;
8796: GO 8598
8798: POP
8799: POP
// if tmp then
8800: LD_VAR 0 6
8804: IFFALSE 8914
// begin p := 0 ;
8806: LD_ADDR_VAR 0 3
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// for i in tmp do
8814: LD_ADDR_VAR 0 2
8818: PUSH
8819: LD_VAR 0 6
8823: PUSH
8824: FOR_IN
8825: IFFALSE 8912
// begin p := p + 1 ;
8827: LD_ADDR_VAR 0 3
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: LD_INT 0
8851: PPUSH
8852: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 26
8863: PPUSH
8864: LD_INT 9
8866: PPUSH
8867: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8871: LD_VAR 0 3
8875: PUSH
8876: LD_EXP 35
8880: GREATEREQUAL
8881: PUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 3
8894: EQUAL
8895: AND
8896: IFFALSE 8910
// SetClass ( i , 1 ) ;
8898: LD_VAR 0 2
8902: PPUSH
8903: LD_INT 1
8905: PPUSH
8906: CALL_OW 336
// end ;
8910: GO 8824
8912: POP
8913: POP
// end ; if heikeSecondSquad then
8914: LD_EXP 34
8918: IFFALSE 9020
// for i in heikeSecondSquad do
8920: LD_ADDR_VAR 0 2
8924: PUSH
8925: LD_EXP 34
8929: PUSH
8930: FOR_IN
8931: IFFALSE 9018
// begin p := p + 1 ;
8933: LD_ADDR_VAR 0 3
8937: PUSH
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 1
8945: PLUS
8946: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8947: LD_VAR 0 2
8951: PPUSH
8952: LD_INT 6
8954: PPUSH
8955: LD_INT 0
8957: PPUSH
8958: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8962: LD_VAR 0 2
8966: PPUSH
8967: LD_INT 26
8969: PPUSH
8970: LD_INT 9
8972: PPUSH
8973: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_EXP 35
8986: GREATEREQUAL
8987: PUSH
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 257
8997: PUSH
8998: LD_INT 3
9000: EQUAL
9001: AND
9002: IFFALSE 9016
// SetClass ( i , 1 ) ;
9004: LD_VAR 0 2
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 336
// end ;
9016: GO 8930
9018: POP
9019: POP
// if heikeApes then
9020: LD_EXP 36
9024: IFFALSE 9067
// for i in heikeApes do
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_EXP 36
9035: PUSH
9036: FOR_IN
9037: IFFALSE 9065
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9039: LD_VAR 0 2
9043: PPUSH
9044: LD_INT 7
9046: PPUSH
9047: LD_INT 0
9049: PPUSH
9050: CALL_OW 49
// ComHold ( i ) ;
9054: LD_VAR 0 2
9058: PPUSH
9059: CALL_OW 140
// end ;
9063: GO 9036
9065: POP
9066: POP
// if Kurt then
9067: LD_EXP 32
9071: IFFALSE 9103
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9073: LD_EXP 32
9077: PPUSH
9078: LD_INT 8
9080: PPUSH
9081: LD_INT 0
9083: PPUSH
9084: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9088: LD_EXP 32
9092: PPUSH
9093: LD_INT 42
9095: PPUSH
9096: LD_INT 32
9098: PPUSH
9099: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9103: LD_INT 70
9105: PPUSH
9106: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9110: LD_EXP 21
9114: PPUSH
9115: LD_STRING DH-Start-1
9117: PPUSH
9118: CALL_OW 88
// if Givi then
9122: LD_EXP 22
9126: IFFALSE 9389
// begin Say ( Givi , DG-Start-2-5 ) ;
9128: LD_EXP 22
9132: PPUSH
9133: LD_STRING DG-Start-2-5
9135: PPUSH
9136: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9140: LD_EXP 21
9144: PPUSH
9145: LD_STRING DH-Start-3
9147: PPUSH
9148: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9152: LD_EXP 21
9156: PPUSH
9157: LD_STRING DH-Start-4
9159: PPUSH
9160: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9164: LD_EXP 22
9168: PPUSH
9169: LD_STRING DG-Start-5
9171: PPUSH
9172: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-Start-6
9183: PPUSH
9184: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9188: LD_EXP 22
9192: PPUSH
9193: LD_STRING DG-Start-7
9195: PPUSH
9196: CALL_OW 88
// if Mike then
9200: LD_EXP 23
9204: IFFALSE 9377
// begin Say ( Mike , DM-Start-8 ) ;
9206: LD_EXP 23
9210: PPUSH
9211: LD_STRING DM-Start-8
9213: PPUSH
9214: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9218: LD_EXP 23
9222: PPUSH
9223: LD_STRING DM-Start-9
9225: PPUSH
9226: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9230: LD_EXP 22
9234: PPUSH
9235: LD_STRING DG-Start-10
9237: PPUSH
9238: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9242: LD_EXP 22
9246: PPUSH
9247: LD_STRING DG-Start-11
9249: PPUSH
9250: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9254: LD_EXP 21
9258: PPUSH
9259: LD_STRING DH-Start-12
9261: PPUSH
9262: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9266: LD_EXP 22
9270: PPUSH
9271: LD_STRING DG-Start-13
9273: PPUSH
9274: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9278: LD_EXP 22
9282: PPUSH
9283: LD_STRING DG-Start-14
9285: PPUSH
9286: CALL_OW 88
// if Kaia then
9290: LD_EXP 26
9294: IFFALSE 9377
// begin Say ( Kaia , DK-Start-15 ) ;
9296: LD_EXP 26
9300: PPUSH
9301: LD_STRING DK-Start-15
9303: PPUSH
9304: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9308: LD_EXP 26
9312: PPUSH
9313: LD_STRING DK-Start-16
9315: PPUSH
9316: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9320: LD_EXP 26
9324: PPUSH
9325: LD_STRING DK-Start-17
9327: PPUSH
9328: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9332: LD_INT 10
9334: PPUSH
9335: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9339: LD_EXP 22
9343: PPUSH
9344: LD_EXP 26
9348: PPUSH
9349: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9353: LD_EXP 22
9357: PPUSH
9358: LD_STRING DG-Start-18
9360: PPUSH
9361: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9365: LD_EXP 26
9369: PPUSH
9370: LD_STRING DK-Start-19
9372: PPUSH
9373: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9377: LD_EXP 21
9381: PPUSH
9382: LD_STRING DH-Start-20
9384: PPUSH
9385: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9389: LD_INT 70
9391: PPUSH
9392: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9396: LD_EXP 29
9400: PPUSH
9401: LD_STRING DShar-Start-21
9403: PPUSH
9404: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9408: LD_EXP 21
9412: PPUSH
9413: LD_STRING DH-Start-22
9415: PPUSH
9416: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9420: LD_EXP 29
9424: PPUSH
9425: LD_STRING DShar-Start-23
9427: PPUSH
9428: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9432: LD_EXP 29
9436: PPUSH
9437: LD_STRING DShar-Start-24
9439: PPUSH
9440: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9444: LD_EXP 29
9448: PPUSH
9449: LD_STRING DShar-Start-25
9451: PPUSH
9452: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9456: LD_EXP 29
9460: PPUSH
9461: LD_STRING DShar-Start-26
9463: PPUSH
9464: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9468: LD_EXP 21
9472: PPUSH
9473: LD_STRING DH-Start-27
9475: PPUSH
9476: CALL_OW 88
// if Kaia then
9480: LD_EXP 26
9484: IFFALSE 9526
// begin ComTurnUnit ( Heike , Kaia ) ;
9486: LD_EXP 21
9490: PPUSH
9491: LD_EXP 26
9495: PPUSH
9496: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9500: LD_EXP 26
9504: PPUSH
9505: LD_STRING DK-Start-28
9507: PPUSH
9508: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9512: LD_EXP 21
9516: PPUSH
9517: LD_STRING DH-Start-29
9519: PPUSH
9520: CALL_OW 88
// end else
9524: GO 9538
// Say ( Heike , DH-Start-a-28 ) ;
9526: LD_EXP 21
9530: PPUSH
9531: LD_STRING DH-Start-a-28
9533: PPUSH
9534: CALL_OW 88
// if Givi then
9538: LD_EXP 22
9542: IFFALSE 9777
// begin ComTurnUnit ( Heike , Givi ) ;
9544: LD_EXP 21
9548: PPUSH
9549: LD_EXP 22
9553: PPUSH
9554: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9558: LD_EXP 22
9562: PPUSH
9563: LD_EXP 21
9567: PPUSH
9568: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9572: LD_EXP 21
9576: PPUSH
9577: LD_STRING DH-Start-30
9579: PPUSH
9580: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9584: LD_EXP 21
9588: PPUSH
9589: LD_STRING DH-Start-31
9591: PPUSH
9592: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9596: LD_EXP 22
9600: PPUSH
9601: LD_STRING DG-Start-32
9603: PPUSH
9604: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9608: LD_EXP 21
9612: PPUSH
9613: LD_STRING DH-Start-33
9615: PPUSH
9616: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9620: LD_EXP 22
9624: PPUSH
9625: LD_STRING DG-Start-34
9627: PPUSH
9628: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9632: LD_EXP 22
9636: PPUSH
9637: LD_STRING DG-Start-35
9639: PPUSH
9640: CALL_OW 88
// if Kurt and not dialogue_skipped then
9644: LD_EXP 32
9648: PUSH
9649: LD_OWVAR 59
9653: NOT
9654: AND
9655: IFFALSE 9686
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9657: LD_EXP 32
9661: PPUSH
9662: LD_INT 28
9664: PPUSH
9665: LD_INT 13
9667: PPUSH
9668: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9672: LD_EXP 32
9676: PPUSH
9677: LD_EXP 21
9681: PPUSH
9682: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9686: LD_EXP 22
9690: PPUSH
9691: LD_STRING DG-Start-36
9693: PPUSH
9694: CALL_OW 88
// if Kurt then
9698: LD_EXP 32
9702: IFFALSE 9775
// begin if not Givi then
9704: LD_EXP 22
9708: NOT
9709: IFFALSE 9725
// Say ( Kurt , DKs-Start-37-a ) else
9711: LD_EXP 32
9715: PPUSH
9716: LD_STRING DKs-Start-37-a
9718: PPUSH
9719: CALL_OW 88
9723: GO 9737
// Say ( Kurt , DKs-Start-37 ) ;
9725: LD_EXP 32
9729: PPUSH
9730: LD_STRING DKs-Start-37
9732: PPUSH
9733: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9737: LD_EXP 32
9741: PPUSH
9742: LD_STRING DKs-Start-38
9744: PPUSH
9745: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9749: LD_EXP 21
9753: PPUSH
9754: LD_EXP 32
9758: PPUSH
9759: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9763: LD_EXP 21
9767: PPUSH
9768: LD_STRING DH-Start-39
9770: PPUSH
9771: CALL_OW 88
// end ; end else
9775: GO 9806
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9777: LD_EXP 34
9781: PPUSH
9782: LD_STRING DArm-Start-a-37
9784: PPUSH
9785: LD_STRING DArf-Start-a-37
9787: PPUSH
9788: CALL 1206 0 3
9792: IFFALSE 9806
// Say ( Heike , DH-Start-39 ) ;
9794: LD_EXP 21
9798: PPUSH
9799: LD_STRING DH-Start-39
9801: PPUSH
9802: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9806: LD_INT 44
9808: PPUSH
9809: LD_INT 25
9811: PPUSH
9812: CALL_OW 428
9816: IFFALSE 9833
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9818: LD_INT 44
9820: PPUSH
9821: LD_INT 25
9823: PPUSH
9824: CALL_OW 428
9828: PPUSH
9829: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9833: LD_EXP 30
9837: PPUSH
9838: LD_INT 5
9840: PPUSH
9841: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9845: LD_EXP 30
9849: PPUSH
9850: LD_INT 44
9852: PPUSH
9853: LD_INT 25
9855: PPUSH
9856: LD_INT 0
9858: PPUSH
9859: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9863: LD_EXP 30
9867: PPUSH
9868: LD_INT 29
9870: PPUSH
9871: LD_INT 12
9873: PPUSH
9874: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9878: LD_INT 35
9880: PPUSH
9881: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9885: LD_OWVAR 59
9889: PUSH
9890: LD_EXP 21
9894: PPUSH
9895: LD_EXP 30
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: LESS
9908: OR
9909: PUSH
9910: LD_EXP 30
9914: PPUSH
9915: LD_INT 26
9917: PPUSH
9918: LD_INT 9
9920: PPUSH
9921: CALL_OW 297
9925: PUSH
9926: LD_INT 6
9928: LESS
9929: OR
9930: IFFALSE 9878
// Say ( Olaf , DO-Scout-1 ) ;
9932: LD_EXP 30
9936: PPUSH
9937: LD_STRING DO-Scout-1
9939: PPUSH
9940: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9944: LD_EXP 30
9948: PPUSH
9949: LD_EXP 21
9953: PPUSH
9954: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9958: LD_ADDR_VAR 0 2
9962: PUSH
9963: LD_VAR 0 6
9967: PUSH
9968: LD_EXP 34
9972: UNION
9973: PUSH
9974: FOR_IN
9975: IFFALSE 9993
// ComTurnUnit ( i , Olaf ) ;
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_EXP 30
9986: PPUSH
9987: CALL_OW 119
9991: GO 9974
9993: POP
9994: POP
// wait ( 0 0$0.3 ) ;
9995: LD_INT 10
9997: PPUSH
9998: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10002: LD_EXP 21
10006: PPUSH
10007: LD_EXP 30
10011: PPUSH
10012: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10016: LD_EXP 21
10020: PPUSH
10021: LD_EXP 30
10025: PPUSH
10026: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10030: LD_EXP 21
10034: PPUSH
10035: LD_STRING DH-Scout-2
10037: PPUSH
10038: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10042: LD_EXP 30
10046: PPUSH
10047: LD_STRING DO-Scout-3
10049: PPUSH
10050: CALL_OW 88
// if Mike and Givi then
10054: LD_EXP 23
10058: PUSH
10059: LD_EXP 22
10063: AND
10064: IFFALSE 10080
// Say ( Olaf , DO-Scout-4 ) else
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-4
10073: PPUSH
10074: CALL_OW 88
10078: GO 10180
// begin if Mike then
10080: LD_EXP 23
10084: IFFALSE 10112
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10086: LD_EXP 30
10090: PPUSH
10091: LD_STRING DO-Scout-a-4
10093: PPUSH
10094: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10098: LD_EXP 21
10102: PPUSH
10103: LD_STRING DH-Scout-a-5
10105: PPUSH
10106: CALL_OW 88
// end else
10110: GO 10180
// if Givi then
10112: LD_EXP 22
10116: IFFALSE 10144
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10118: LD_EXP 30
10122: PPUSH
10123: LD_STRING DO-Scout-b-4
10125: PPUSH
10126: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10130: LD_EXP 21
10134: PPUSH
10135: LD_STRING DH-Scout-b-5
10137: PPUSH
10138: CALL_OW 88
// end else
10142: GO 10180
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10144: LD_EXP 30
10148: PPUSH
10149: LD_STRING DO-Scout-f-4
10151: PPUSH
10152: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10156: LD_EXP 21
10160: PPUSH
10161: LD_STRING DH-Scout-f-5
10163: PPUSH
10164: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10168: LD_EXP 30
10172: PPUSH
10173: LD_STRING DO-Scout-f-6
10175: PPUSH
10176: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10180: LD_EXP 21
10184: PPUSH
10185: LD_STRING DH-Scout-5
10187: PPUSH
10188: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10192: LD_EXP 30
10196: PPUSH
10197: LD_STRING DO-Scout-6
10199: PPUSH
10200: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10204: LD_EXP 30
10208: PPUSH
10209: LD_STRING DO-Scout-7
10211: PPUSH
10212: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10216: LD_EXP 21
10220: PPUSH
10221: LD_STRING DH-Scout-8
10223: PPUSH
10224: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10228: LD_EXP 21
10232: PPUSH
10233: LD_STRING DH-Scout-9
10235: PPUSH
10236: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10240: LD_EXP 30
10244: PPUSH
10245: LD_STRING DO-Scout-10
10247: PPUSH
10248: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10252: LD_EXP 30
10256: PPUSH
10257: LD_STRING DO-Scout-12
10259: PPUSH
10260: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10264: LD_EXP 30
10268: PPUSH
10269: LD_STRING DO-Scout-13
10271: PPUSH
10272: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10276: LD_EXP 30
10280: PPUSH
10281: LD_STRING DO-Scout-14
10283: PPUSH
10284: CALL_OW 88
// if Givi then
10288: LD_EXP 22
10292: IFFALSE 10318
// begin Say ( Givi , DG-Scout-15 ) ;
10294: LD_EXP 22
10298: PPUSH
10299: LD_STRING DG-Scout-15
10301: PPUSH
10302: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10306: LD_EXP 26
10310: PPUSH
10311: LD_STRING DK-Scout-16
10313: PPUSH
10314: CALL_OW 88
// end ; if not dialogue_skipped then
10318: LD_OWVAR 59
10322: NOT
10323: IFFALSE 10444
// begin async ;
10325: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10326: LD_EXP 30
10330: PPUSH
10331: LD_STRING DO-Scout-17
10333: PPUSH
10334: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10338: LD_INT 55
10340: PPUSH
10341: LD_INT 77
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 6
10349: NEG
10350: PPUSH
10351: CALL 1155 0 4
// wait ( 10 ) ;
10355: LD_INT 10
10357: PPUSH
10358: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10362: LD_INT 55
10364: PPUSH
10365: LD_INT 77
10367: PPUSH
10368: CALL_OW 84
// wait ( 0 0$10 ) ;
10372: LD_INT 350
10374: PPUSH
10375: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10379: LD_EXP 30
10383: PPUSH
10384: LD_STRING DO-Scout-18
10386: PPUSH
10387: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10391: LD_INT 204
10393: PPUSH
10394: LD_INT 107
10396: PPUSH
10397: LD_INT 2
10399: PPUSH
10400: LD_INT 12
10402: NEG
10403: PPUSH
10404: CALL 1155 0 4
// wait ( 10 ) ;
10408: LD_INT 10
10410: PPUSH
10411: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10415: LD_INT 204
10417: PPUSH
10418: LD_INT 107
10420: PPUSH
10421: CALL_OW 84
// wait ( 0 0$10 ) ;
10425: LD_INT 350
10427: PPUSH
10428: CALL_OW 67
// sync ;
10432: SYNC
// CenterNowOnUnits ( Heike ) ;
10433: LD_EXP 21
10437: PPUSH
10438: CALL_OW 87
// end else
10442: GO 10478
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10444: LD_INT 55
10446: PPUSH
10447: LD_INT 77
10449: PPUSH
10450: LD_INT 2
10452: PPUSH
10453: LD_INT 6
10455: NEG
10456: PPUSH
10457: CALL 1155 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10461: LD_INT 204
10463: PPUSH
10464: LD_INT 107
10466: PPUSH
10467: LD_INT 2
10469: PPUSH
10470: LD_INT 12
10472: NEG
10473: PPUSH
10474: CALL 1155 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10478: LD_EXP 30
10482: PPUSH
10483: LD_STRING DO-Scout-19
10485: PPUSH
10486: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10490: LD_EXP 30
10494: PPUSH
10495: LD_STRING DO-Scout-20
10497: PPUSH
10498: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10502: LD_EXP 21
10506: PPUSH
10507: LD_STRING DH-Scout-21
10509: PPUSH
10510: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10514: LD_EXP 21
10518: PPUSH
10519: LD_STRING DH-Scout-22
10521: PPUSH
10522: CALL_OW 88
// InGameOff ;
10526: CALL_OW 9
// if heikeSecondSquad then
10530: LD_EXP 34
10534: IFFALSE 10548
// ForceSleep ( heikeSecondSquad , false ) ;
10536: LD_EXP 34
10540: PPUSH
10541: LD_INT 0
10543: PPUSH
10544: CALL_OW 585
// if Givi then
10548: LD_EXP 22
10552: IFFALSE 10567
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10554: LD_INT 13
10556: PPUSH
10557: LD_INT 2
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10567: LD_STRING Road
10569: PPUSH
10570: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: LD_INT 22
10581: PUSH
10582: LD_INT 5
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 21
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 69
10607: PUSH
10608: FOR_IN
10609: IFFALSE 10625
// SetSide ( i , 2 ) ;
10611: LD_VAR 0 2
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: CALL_OW 235
10623: GO 10608
10625: POP
10626: POP
// SaveForQuickRestart ;
10627: CALL_OW 22
// music_class := music_auto ;
10631: LD_ADDR_OWVAR 72
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// end ;
10639: LD_VAR 0 1
10643: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10644: LD_INT 2
10646: PPUSH
10647: LD_INT 9
10649: PPUSH
10650: CALL_OW 294
10654: IFFALSE 11019
10656: GO 10658
10658: DISABLE
// begin DialogueOn ;
10659: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10663: LD_INT 111
10665: PPUSH
10666: LD_INT 72
10668: PPUSH
10669: LD_INT 2
10671: PPUSH
10672: LD_INT 20
10674: NEG
10675: PPUSH
10676: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10680: LD_INT 111
10682: PPUSH
10683: LD_INT 72
10685: PPUSH
10686: LD_INT 2
10688: PPUSH
10689: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10693: LD_INT 111
10695: PPUSH
10696: LD_INT 72
10698: PPUSH
10699: CALL_OW 86
// if IsOk ( Kamil ) then
10703: LD_EXP 25
10707: PPUSH
10708: CALL_OW 302
10712: IFFALSE 10829
// begin Say ( Kamil , DKam-Cross-1 ) ;
10714: LD_EXP 25
10718: PPUSH
10719: LD_STRING DKam-Cross-1
10721: PPUSH
10722: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10726: LD_EXP 25
10730: PPUSH
10731: LD_STRING DKam-Cross-2
10733: PPUSH
10734: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10738: LD_EXP 25
10742: PPUSH
10743: LD_STRING DKam-Cross-3
10745: PPUSH
10746: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10750: LD_EXP 25
10754: PPUSH
10755: LD_STRING DKam-Cross-4
10757: PPUSH
10758: CALL_OW 88
// if IsOk ( Ibrahim ) then
10762: LD_EXP 24
10766: PPUSH
10767: CALL_OW 302
10771: IFFALSE 10827
// begin if ibrahimJoinedIn04 then
10773: LD_EXP 4
10777: IFFALSE 10791
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10779: LD_EXP 24
10783: PPUSH
10784: LD_STRING DI-Cross-b-5
10786: PPUSH
10787: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10791: LD_EXP 24
10795: PPUSH
10796: LD_STRING DI-Cross-b-6
10798: PPUSH
10799: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10803: LD_EXP 24
10807: PPUSH
10808: LD_STRING DI-Cross-b-7
10810: PPUSH
10811: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10815: LD_EXP 25
10819: PPUSH
10820: LD_STRING DKam-Cross-8
10822: PPUSH
10823: CALL_OW 88
// end ; end else
10827: GO 10987
// if IsOk ( Sophia ) then
10829: LD_EXP 27
10833: PPUSH
10834: CALL_OW 302
10838: IFFALSE 10955
// begin Say ( Sophia , DS-Cross-1 ) ;
10840: LD_EXP 27
10844: PPUSH
10845: LD_STRING DS-Cross-1
10847: PPUSH
10848: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10852: LD_EXP 27
10856: PPUSH
10857: LD_STRING DS-Cross-2
10859: PPUSH
10860: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10864: LD_EXP 27
10868: PPUSH
10869: LD_STRING DS-Cross-3
10871: PPUSH
10872: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10876: LD_EXP 27
10880: PPUSH
10881: LD_STRING DS-Cross-4
10883: PPUSH
10884: CALL_OW 88
// if IsOk ( Ibrahim ) then
10888: LD_EXP 24
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10953
// begin if ibrahimJoinedIn04 then
10899: LD_EXP 4
10903: IFFALSE 10917
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10905: LD_EXP 24
10909: PPUSH
10910: LD_STRING DI-Cross-b-5
10912: PPUSH
10913: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10917: LD_EXP 24
10921: PPUSH
10922: LD_STRING DI-Cross-b-6
10924: PPUSH
10925: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10929: LD_EXP 24
10933: PPUSH
10934: LD_STRING DI-Cross-b-7
10936: PPUSH
10937: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10941: LD_EXP 27
10945: PPUSH
10946: LD_STRING DS-Cross-8
10948: PPUSH
10949: CALL_OW 88
// end ; end else
10953: GO 10987
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10955: LD_EXP 34
10959: PPUSH
10960: LD_INT 50
10962: PUSH
10963: EMPTY
10964: LIST
10965: PPUSH
10966: CALL_OW 72
10970: IFFALSE 10987
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10972: LD_EXP 34
10976: PPUSH
10977: LD_STRING DArm-Cross-c-1
10979: PPUSH
10980: LD_STRING DArf-Cross-c-1
10982: PPUSH
10983: CALL 1206 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10987: LD_INT 85
10989: PPUSH
10990: LD_INT 2
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// DialogueOff ;
11000: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11004: LD_STRING Crane
11006: PPUSH
11007: CALL_OW 337
// spottedCrossRoad := true ;
11011: LD_ADDR_EXP 8
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// end ;
11019: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11020: LD_INT 22
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: LD_INT 30
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: PUSH
11067: LD_EXP 26
11071: PPUSH
11072: CALL_OW 302
11076: PUSH
11077: LD_EXP 34
11081: OR
11082: AND
11083: IFFALSE 11295
11085: GO 11087
11087: DISABLE
// begin DialogueOn ;
11088: CALL_OW 6
// if Kaia then
11092: LD_EXP 26
11096: IFFALSE 11109
// CenterNowOnUnits ( Kaia ) else
11098: LD_EXP 26
11102: PPUSH
11103: CALL_OW 87
11107: GO 11118
// CenterNowOnUnits ( Heike ) ;
11109: LD_EXP 21
11113: PPUSH
11114: CALL_OW 87
// if IsOk ( Kaia ) then
11118: LD_EXP 26
11122: PPUSH
11123: CALL_OW 302
11127: IFFALSE 11143
// Say ( Kaia , DK-Cam-1 ) else
11129: LD_EXP 26
11133: PPUSH
11134: LD_STRING DK-Cam-1
11136: PPUSH
11137: CALL_OW 88
11141: GO 11158
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11143: LD_EXP 34
11147: PPUSH
11148: LD_STRING DArm-Cam-1
11150: PPUSH
11151: LD_STRING DArf-Cam-1
11153: PPUSH
11154: CALL 1206 0 3
// Say ( Heike , DH-Cam-2 ) ;
11158: LD_EXP 21
11162: PPUSH
11163: LD_STRING DH-Cam-2
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11170: LD_EXP 21
11174: PPUSH
11175: LD_STRING DH-Cam-3
11177: PPUSH
11178: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11182: LD_EXP 21
11186: PPUSH
11187: LD_STRING DH-Cam-4
11189: PPUSH
11190: CALL_OW 88
// if IsOk ( Kaia ) then
11194: LD_EXP 26
11198: PPUSH
11199: CALL_OW 302
11203: IFFALSE 11219
// Say ( Kaia , DK-Cam-5 ) else
11205: LD_EXP 26
11209: PPUSH
11210: LD_STRING DK-Cam-5
11212: PPUSH
11213: CALL_OW 88
11217: GO 11234
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11219: LD_EXP 34
11223: PPUSH
11224: LD_STRING DArm-Cam-5
11226: PPUSH
11227: LD_STRING DArf-Cam-5
11229: PPUSH
11230: CALL 1206 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11234: LD_EXP 30
11238: PPUSH
11239: LD_STRING DO-Cam-6
11241: PPUSH
11242: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11246: LD_EXP 30
11250: PPUSH
11251: LD_STRING DO-Cam-7
11253: PPUSH
11254: CALL_OW 88
// DialogueOff ;
11258: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11262: LD_STRING Radar
11264: PPUSH
11265: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11269: LD_INT 6
11271: PPUSH
11272: LD_INT 2
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11282: LD_INT 20
11284: PPUSH
11285: LD_INT 2
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 324
// end ;
11295: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11296: LD_INT 22
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 2
11308: PUSH
11309: LD_INT 34
11311: PUSH
11312: LD_INT 30
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 35
11321: PUSH
11322: LD_INT 30
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PPUSH
11338: CALL_OW 69
11342: IFFALSE 11354
11344: GO 11346
11346: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11347: LD_STRING RadarDone
11349: PPUSH
11350: CALL_OW 337
11354: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11355: LD_INT 22
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 34
11367: PUSH
11368: LD_INT 88
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: IFFALSE 11395
11385: GO 11387
11387: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11388: LD_STRING CraneDone
11390: PPUSH
11391: CALL_OW 337
11395: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11396: LD_EXP 30
11400: PPUSH
11401: CALL_OW 302
11405: PUSH
11406: LD_EXP 33
11410: PPUSH
11411: CALL_OW 302
11415: AND
11416: PUSH
11417: LD_INT 6
11419: PPUSH
11420: LD_INT 2
11422: PPUSH
11423: CALL_OW 321
11427: PUSH
11428: LD_INT 2
11430: EQUAL
11431: AND
11432: PUSH
11433: LD_EXP 33
11437: PPUSH
11438: LD_EXP 21
11442: PPUSH
11443: CALL_OW 296
11447: PUSH
11448: LD_INT 10
11450: LESS
11451: PUSH
11452: LD_EXP 33
11456: PPUSH
11457: CALL_OW 310
11461: OR
11462: AND
11463: IFFALSE 11677
11465: GO 11467
11467: DISABLE
// begin DialogueOn ;
11468: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11472: LD_EXP 33
11476: PPUSH
11477: LD_STRING DA-RC-1
11479: PPUSH
11480: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11484: LD_EXP 33
11488: PPUSH
11489: LD_STRING DA-RC-2
11491: PPUSH
11492: CALL_OW 88
// if IsOk ( Kaia ) then
11496: LD_EXP 26
11500: PPUSH
11501: CALL_OW 302
11505: IFFALSE 11579
// begin Say ( Kaia , DK-RC-3 ) ;
11507: LD_EXP 26
11511: PPUSH
11512: LD_STRING DK-RC-3
11514: PPUSH
11515: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11519: LD_EXP 33
11523: PPUSH
11524: LD_STRING DA-RC-4
11526: PPUSH
11527: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11531: LD_EXP 26
11535: PPUSH
11536: LD_STRING DK-RC-5
11538: PPUSH
11539: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11543: LD_EXP 33
11547: PPUSH
11548: LD_STRING DA-RC-6
11550: PPUSH
11551: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11555: LD_EXP 26
11559: PPUSH
11560: LD_STRING DK-RC-7
11562: PPUSH
11563: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11567: LD_EXP 33
11571: PPUSH
11572: LD_STRING DA-RC-8
11574: PPUSH
11575: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11579: LD_EXP 21
11583: PPUSH
11584: LD_STRING DH-RC-9
11586: PPUSH
11587: CALL_OW 88
// if IsOk ( Markov ) then
11591: LD_EXP 28
11595: PPUSH
11596: CALL_OW 302
11600: IFFALSE 11628
// begin Say ( Markov , DMar-RC-10 ) ;
11602: LD_EXP 28
11606: PPUSH
11607: LD_STRING DMar-RC-10
11609: PPUSH
11610: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11614: LD_EXP 28
11618: PPUSH
11619: LD_STRING DMar-RC-11
11621: PPUSH
11622: CALL_OW 88
// end else
11626: GO 11640
// begin Say ( Olaf , DO-RC-a-10 ) ;
11628: LD_EXP 30
11632: PPUSH
11633: LD_STRING DO-RC-a-10
11635: PPUSH
11636: CALL_OW 88
// end ; DialogueOff ;
11640: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11644: LD_STRING RemoteControl
11646: PPUSH
11647: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11651: LD_INT 15
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11664: LD_INT 22
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 324
// end ;
11677: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11678: LD_INT 12
11680: PPUSH
11681: LD_INT 22
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 70
11695: IFFALSE 12062
11697: GO 11699
11699: DISABLE
11700: LD_INT 0
11702: PPUSH
// begin PrepareWestBase ;
11703: CALL 3969 0 0
// westBaseSpotted := true ;
11707: LD_ADDR_EXP 5
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11715: LD_INT 70
11717: PPUSH
11718: CALL_OW 67
// InGameOn ;
11722: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11726: LD_INT 56
11728: PPUSH
11729: LD_INT 77
11731: PPUSH
11732: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11736: LD_INT 56
11738: PPUSH
11739: LD_INT 77
11741: PPUSH
11742: LD_INT 2
11744: PPUSH
11745: LD_INT 12
11747: NEG
11748: PPUSH
11749: CALL_OW 330
// wait ( 0 0$2 ) ;
11753: LD_INT 70
11755: PPUSH
11756: CALL_OW 67
// DialogueOn ;
11760: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11764: LD_EXP 21
11768: PPUSH
11769: LD_STRING DH-Rbase-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11776: LD_EXP 26
11780: PPUSH
11781: LD_STRING DK-Rbase-2
11783: PPUSH
11784: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11788: LD_EXP 26
11792: PPUSH
11793: LD_STRING DK-Rbase-3
11795: PPUSH
11796: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11800: LD_EXP 26
11804: PPUSH
11805: LD_STRING DK-Rbase-4
11807: PPUSH
11808: CALL_OW 88
// DialogueOff ;
11812: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11816: LD_INT 56
11818: PPUSH
11819: LD_INT 77
11821: PPUSH
11822: LD_INT 2
11824: PPUSH
11825: CALL_OW 331
// InGameOff ;
11829: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11833: LD_INT 35
11835: PPUSH
11836: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11840: LD_EXP 42
11844: NOT
11845: PUSH
11846: LD_EXP 43
11850: NOT
11851: AND
11852: IFFALSE 11833
// wait ( 0 0$2 ) ;
11854: LD_INT 70
11856: PPUSH
11857: CALL_OW 67
// if IsOk ( Kaia ) then
11861: LD_EXP 26
11865: PPUSH
11866: CALL_OW 302
11870: IFFALSE 11985
// begin DialogueOn ;
11872: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11876: LD_INT 56
11878: PPUSH
11879: LD_INT 81
11881: PPUSH
11882: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11886: LD_EXP 26
11890: PPUSH
11891: LD_STRING DK-Rbase-5
11893: PPUSH
11894: CALL_OW 88
// if IsOk ( Givi ) then
11898: LD_EXP 22
11902: PPUSH
11903: CALL_OW 302
11907: IFFALSE 11981
// begin Say ( Givi , DG-Rbase-6 ) ;
11909: LD_EXP 22
11913: PPUSH
11914: LD_STRING DG-Rbase-6
11916: PPUSH
11917: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11921: LD_EXP 22
11925: PPUSH
11926: LD_STRING DG-Rbase-7
11928: PPUSH
11929: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11933: LD_EXP 26
11937: PPUSH
11938: LD_STRING DK-Rbase-8
11940: PPUSH
11941: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11945: LD_EXP 22
11949: PPUSH
11950: LD_STRING DG-Rbase-9
11952: PPUSH
11953: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11957: LD_EXP 22
11961: PPUSH
11962: LD_STRING DG-Rbase-10
11964: PPUSH
11965: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11969: LD_EXP 26
11973: PPUSH
11974: LD_STRING DK-Rbase-11
11976: PPUSH
11977: CALL_OW 88
// end ; DialogueOff ;
11981: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: LD_INT 12
11992: PPUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 3
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 21
12005: PUSH
12006: LD_INT 3
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 70
12021: PUSH
12022: FOR_IN
12023: IFFALSE 12039
// SetSide ( i , 2 ) ;
12025: LD_VAR 0 1
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 235
12037: GO 12022
12039: POP
12040: POP
// westBaseCaptured := true ;
12041: LD_ADDR_EXP 9
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12049: LD_INT 0
12051: PPUSH
12052: LD_INT 2
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 324
// end ;
12062: PPOPN 1
12064: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12065: LD_EXP 38
12069: NOT
12070: PUSH
12071: LD_INT 10
12073: PPUSH
12074: CALL_OW 255
12078: PUSH
12079: LD_INT 2
12081: EQUAL
12082: OR
12083: IFFALSE 12220
12085: GO 12087
12087: DISABLE
// begin DialogueOn ;
12088: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12092: LD_EXP 21
12096: PPUSH
12097: LD_STRING DH-Goal-1
12099: PPUSH
12100: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12104: LD_EXP 29
12108: PPUSH
12109: LD_STRING DShar-Goal-2
12111: PPUSH
12112: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12116: LD_EXP 21
12120: PPUSH
12121: LD_STRING DH-Goal-3
12123: PPUSH
12124: CALL_OW 88
// if reinforcementsAllowed then
12128: LD_EXP 14
12132: IFFALSE 12158
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12134: LD_EXP 29
12138: PPUSH
12139: LD_STRING DShar-Goal-4
12141: PPUSH
12142: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12146: LD_EXP 21
12150: PPUSH
12151: LD_STRING DH-Goal-5
12153: PPUSH
12154: CALL_OW 88
// end ; DialogueOff ;
12158: CALL_OW 7
// eastBaseCaptured := true ;
12162: LD_ADDR_EXP 10
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12170: LD_STRING BaseCaptured
12172: PPUSH
12173: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12177: LD_INT 10
12179: PPUSH
12180: LD_INT 2
12182: PPUSH
12183: CALL_OW 235
// if not reinforcementsAllowed then
12187: LD_EXP 14
12191: NOT
12192: IFFALSE 12196
// exit ;
12194: GO 12220
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12196: LD_INT 21000
12198: PUSH
12199: LD_INT 1050
12201: NEG
12202: PPUSH
12203: LD_INT 1050
12205: PPUSH
12206: CALL_OW 12
12210: PLUS
12211: PPUSH
12212: CALL_OW 67
// PrepareReinforcements ;
12216: CALL 2182 0 0
// end ;
12220: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12221: LD_INT 22
12223: PUSH
12224: LD_INT 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 30
12233: PUSH
12234: LD_INT 13
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PPUSH
12245: CALL_OW 69
12249: IFFALSE 12266
12251: GO 12253
12253: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12254: LD_EXP 22
12258: PPUSH
12259: LD_STRING DG-Lab-1
12261: PPUSH
12262: CALL_OW 88
// end ;
12266: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12267: LD_INT 5
12269: PPUSH
12270: LD_INT 2
12272: PPUSH
12273: CALL_OW 321
12277: PUSH
12278: LD_INT 2
12280: EQUAL
12281: PUSH
12282: LD_EXP 22
12286: PPUSH
12287: CALL_OW 302
12291: AND
12292: IFFALSE 12353
12294: GO 12296
12296: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12297: LD_EXP 22
12301: PPUSH
12302: LD_STRING DG-Stim-1
12304: PPUSH
12305: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12309: LD_EXP 21
12313: PPUSH
12314: LD_STRING DH-Stim-2
12316: PPUSH
12317: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12321: LD_EXP 22
12325: PPUSH
12326: LD_STRING DG-Stim-3
12328: PPUSH
12329: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12333: LD_EXP 21
12337: PPUSH
12338: LD_STRING DH-Stim-4
12340: PPUSH
12341: CALL_OW 88
// drugsResearched := true ;
12345: LD_ADDR_EXP 11
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// end ;
12353: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12354: LD_EXP 11
12358: IFFALSE 12670
12360: GO 12362
12362: DISABLE
12363: LD_INT 0
12365: PPUSH
12366: PPUSH
12367: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12368: LD_ADDR_VAR 0 2
12372: PUSH
12373: LD_EXP 21
12377: PUSH
12378: LD_EXP 22
12382: PUSH
12383: LD_EXP 30
12387: PUSH
12388: LD_EXP 28
12392: PUSH
12393: LD_EXP 26
12397: PUSH
12398: LD_EXP 27
12402: PUSH
12403: LD_EXP 32
12407: PUSH
12408: LD_EXP 25
12412: PUSH
12413: LD_EXP 23
12417: PUSH
12418: LD_EXP 24
12422: PUSH
12423: LD_EXP 33
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_STRING H
12448: PUSH
12449: LD_STRING G
12451: PUSH
12452: LD_STRING O
12454: PUSH
12455: LD_STRING Mar
12457: PUSH
12458: LD_STRING K
12460: PUSH
12461: LD_STRING S
12463: PUSH
12464: LD_STRING Ks
12466: PUSH
12467: LD_STRING Kam
12469: PUSH
12470: LD_STRING M
12472: PUSH
12473: LD_STRING I
12475: PUSH
12476: LD_STRING A
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12492: LD_INT 35
12494: PPUSH
12495: CALL_OW 67
// for i := tmp downto 1 do
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: DOUBLE
12505: LD_VAR 0 2
12509: INC
12510: ST_TO_ADDR
12511: LD_INT 1
12513: PUSH
12514: FOR_DOWNTO
12515: IFFALSE 12661
// if GetLives ( tmp [ i ] ) < 250 then
12517: LD_VAR 0 2
12521: PUSH
12522: LD_VAR 0 1
12526: ARRAY
12527: PPUSH
12528: CALL_OW 256
12532: PUSH
12533: LD_INT 250
12535: LESS
12536: IFFALSE 12659
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12538: LD_ADDR_EXP 19
12542: PUSH
12543: LD_EXP 19
12547: PUSH
12548: LD_INT 1
12550: PLUS
12551: ST_TO_ADDR
// DialogueOn ;
12552: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12556: LD_VAR 0 2
12560: PUSH
12561: LD_VAR 0 1
12565: ARRAY
12566: PPUSH
12567: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12571: LD_VAR 0 2
12575: PUSH
12576: LD_VAR 0 1
12580: ARRAY
12581: PPUSH
12582: LD_STRING D
12584: PUSH
12585: LD_VAR 0 3
12589: PUSH
12590: LD_VAR 0 1
12594: ARRAY
12595: STR
12596: PUSH
12597: LD_STRING -Stim-a-1
12599: STR
12600: PPUSH
12601: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12605: LD_ADDR_VAR 0 2
12609: PUSH
12610: LD_VAR 0 2
12614: PPUSH
12615: LD_VAR 0 1
12619: PPUSH
12620: CALL_OW 3
12624: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12625: LD_ADDR_VAR 0 3
12629: PUSH
12630: LD_VAR 0 3
12634: PPUSH
12635: LD_VAR 0 1
12639: PPUSH
12640: CALL_OW 3
12644: ST_TO_ADDR
// drugsTested := true ;
12645: LD_ADDR_EXP 6
12649: PUSH
12650: LD_INT 1
12652: ST_TO_ADDR
// DialogueOff ;
12653: CALL_OW 7
// break ;
12657: GO 12661
// end ;
12659: GO 12514
12661: POP
12662: POP
// until not tmp ;
12663: LD_VAR 0 2
12667: NOT
12668: IFFALSE 12492
// end ;
12670: PPOPN 3
12672: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12673: LD_INT 22
12675: PUSH
12676: LD_INT 2
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 34
12685: PUSH
12686: LD_INT 31
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PPUSH
12697: CALL_OW 69
12701: PUSH
12702: LD_INT 22
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 33
12714: PUSH
12715: LD_INT 2
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: AND
12731: IFFALSE 12744
12733: GO 12735
12735: DISABLE
// remoteControlConstructed := true ;
12736: LD_ADDR_EXP 12
12740: PUSH
12741: LD_INT 1
12743: ST_TO_ADDR
12744: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12745: LD_EXP 12
12749: IFFALSE 13049
12751: GO 12753
12753: DISABLE
12754: LD_INT 0
12756: PPUSH
12757: PPUSH
12758: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12759: LD_ADDR_VAR 0 2
12763: PUSH
12764: LD_EXP 21
12768: PUSH
12769: LD_EXP 22
12773: PUSH
12774: LD_EXP 30
12778: PUSH
12779: LD_EXP 28
12783: PUSH
12784: LD_EXP 26
12788: PUSH
12789: LD_EXP 27
12793: PUSH
12794: LD_EXP 32
12798: PUSH
12799: LD_EXP 25
12803: PUSH
12804: LD_EXP 23
12808: PUSH
12809: LD_EXP 24
12813: PUSH
12814: LD_EXP 33
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12832: LD_ADDR_VAR 0 3
12836: PUSH
12837: LD_STRING H
12839: PUSH
12840: LD_STRING G
12842: PUSH
12843: LD_STRING O
12845: PUSH
12846: LD_STRING Mar
12848: PUSH
12849: LD_STRING K
12851: PUSH
12852: LD_STRING S
12854: PUSH
12855: LD_STRING Ks
12857: PUSH
12858: LD_STRING Kam
12860: PUSH
12861: LD_STRING M
12863: PUSH
12864: LD_STRING I
12866: PUSH
12867: LD_STRING A
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12883: LD_INT 35
12885: PPUSH
12886: CALL_OW 67
// for i := tmp downto 1 do
12890: LD_ADDR_VAR 0 1
12894: PUSH
12895: DOUBLE
12896: LD_VAR 0 2
12900: INC
12901: ST_TO_ADDR
12902: LD_INT 1
12904: PUSH
12905: FOR_DOWNTO
12906: IFFALSE 13040
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12908: LD_VAR 0 2
12912: PUSH
12913: LD_VAR 0 1
12917: ARRAY
12918: PPUSH
12919: CALL_OW 257
12923: PUSH
12924: LD_INT 3
12926: EQUAL
12927: PUSH
12928: LD_VAR 0 2
12932: PUSH
12933: LD_VAR 0 1
12937: ARRAY
12938: PPUSH
12939: CALL_OW 432
12943: AND
12944: IFFALSE 13038
// begin DialogueOn ;
12946: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12950: LD_VAR 0 2
12954: PUSH
12955: LD_VAR 0 1
12959: ARRAY
12960: PPUSH
12961: LD_STRING D
12963: PUSH
12964: LD_VAR 0 3
12968: PUSH
12969: LD_VAR 0 1
12973: ARRAY
12974: STR
12975: PUSH
12976: LD_STRING -RC-a-1
12978: STR
12979: PPUSH
12980: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12984: LD_ADDR_VAR 0 2
12988: PUSH
12989: LD_VAR 0 2
12993: PPUSH
12994: LD_VAR 0 1
12998: PPUSH
12999: CALL_OW 3
13003: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13004: LD_ADDR_VAR 0 3
13008: PUSH
13009: LD_VAR 0 3
13013: PPUSH
13014: LD_VAR 0 1
13018: PPUSH
13019: CALL_OW 3
13023: ST_TO_ADDR
// DialogueOff ;
13024: CALL_OW 7
// remoteControlTested := true ;
13028: LD_ADDR_EXP 7
13032: PUSH
13033: LD_INT 1
13035: ST_TO_ADDR
// break ;
13036: GO 13040
// end ;
13038: GO 12905
13040: POP
13041: POP
// until not tmp ;
13042: LD_VAR 0 2
13046: NOT
13047: IFFALSE 12883
// end ;
13049: PPOPN 3
13051: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13052: LD_EXP 7
13056: PUSH
13057: LD_EXP 28
13061: PPUSH
13062: CALL_OW 302
13066: AND
13067: IFFALSE 13096
13069: GO 13071
13071: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13072: LD_EXP 28
13076: PPUSH
13077: LD_STRING DMar-RC-a-2
13079: PPUSH
13080: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13084: LD_EXP 28
13088: PPUSH
13089: LD_STRING DMar-RC-a-3
13091: PPUSH
13092: CALL_OW 88
// end ;
13096: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13097: LD_EXP 14
13101: PUSH
13102: LD_EXP 21
13106: PPUSH
13107: LD_EXP 33
13111: PPUSH
13112: CALL_OW 296
13116: PUSH
13117: LD_INT 8
13119: LESS
13120: AND
13121: PUSH
13122: LD_INT 2
13124: PPUSH
13125: CALL_OW 463
13129: NOT
13130: AND
13131: PUSH
13132: LD_EXP 33
13136: PPUSH
13137: CALL_OW 302
13141: AND
13142: PUSH
13143: LD_EXP 21
13147: PPUSH
13148: CALL_OW 302
13152: AND
13153: IFFALSE 13331
13155: GO 13157
13157: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13158: LD_EXP 33
13162: PPUSH
13163: CALL_OW 310
13167: NOT
13168: IFFALSE 13184
// ComTurnUnit ( Aviradze , Heike ) ;
13170: LD_EXP 33
13174: PPUSH
13175: LD_EXP 21
13179: PPUSH
13180: CALL_OW 119
// if not IsInUnit ( Heike ) then
13184: LD_EXP 21
13188: PPUSH
13189: CALL_OW 310
13193: NOT
13194: IFFALSE 13210
// ComTurnUnit ( Heike , Aviradze ) ;
13196: LD_EXP 21
13200: PPUSH
13201: LD_EXP 33
13205: PPUSH
13206: CALL_OW 119
// wait ( 0 0$1 ) ;
13210: LD_INT 35
13212: PPUSH
13213: CALL_OW 67
// DialogueOn ;
13217: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13221: LD_EXP 33
13225: PPUSH
13226: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13230: LD_EXP 21
13234: PPUSH
13235: LD_STRING DH-Beria-1
13237: PPUSH
13238: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13242: LD_EXP 33
13246: PPUSH
13247: LD_STRING DA-Beria-2
13249: PPUSH
13250: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13254: LD_EXP 21
13258: PPUSH
13259: LD_STRING DH-Beria-3
13261: PPUSH
13262: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13266: LD_EXP 33
13270: PPUSH
13271: LD_STRING DA-Beria-4
13273: PPUSH
13274: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13278: LD_EXP 33
13282: PPUSH
13283: LD_STRING DA-Beria-5
13285: PPUSH
13286: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13290: LD_EXP 33
13294: PPUSH
13295: LD_STRING DA-Beria-6
13297: PPUSH
13298: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13302: LD_EXP 21
13306: PPUSH
13307: LD_STRING DA-Beria-7
13309: PPUSH
13310: CALL_OW 88
// DialogueOff ;
13314: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13318: LD_INT 52
13320: PPUSH
13321: LD_INT 2
13323: PPUSH
13324: LD_INT 1
13326: PPUSH
13327: CALL_OW 322
// end ;
13331: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13332: LD_EXP 26
13336: PPUSH
13337: CALL_OW 300
13341: PUSH
13342: LD_EXP 26
13346: PPUSH
13347: CALL_OW 256
13351: PUSH
13352: LD_INT 10
13354: LESS
13355: AND
13356: IFFALSE 13393
13358: GO 13360
13360: DISABLE
// begin DialogueOn ;
13361: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13365: LD_EXP 26
13369: PPUSH
13370: LD_STRING DK-Kdeath-1
13372: PPUSH
13373: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13377: LD_EXP 21
13381: PPUSH
13382: LD_STRING DH-Kdeath-2
13384: PPUSH
13385: CALL_OW 88
// DialogueOff ;
13389: CALL_OW 7
// end ;
13393: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13394: LD_INT 2
13396: PPUSH
13397: LD_EXP 39
13401: PPUSH
13402: CALL 1306 0 2
13406: IFFALSE 13423
13408: GO 13410
13410: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13411: LD_EXP 21
13415: PPUSH
13416: LD_STRING DH-Obj-1
13418: PPUSH
13419: CALL_OW 88
13423: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13424: LD_INT 2
13426: PPUSH
13427: LD_EXP 40
13431: PPUSH
13432: CALL 1306 0 2
13436: IFFALSE 13453
13438: GO 13440
13440: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13441: LD_EXP 21
13445: PPUSH
13446: LD_STRING DH-Obj-a-1
13448: PPUSH
13449: CALL_OW 88
13453: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13454: LD_EXP 10
13458: PUSH
13459: LD_OWVAR 1
13463: PUSH
13464: LD_INT 23100
13466: PUSH
13467: LD_INT 22050
13469: PUSH
13470: LD_INT 21000
13472: PUSH
13473: LD_INT 19950
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_OWVAR 67
13486: ARRAY
13487: GREATEREQUAL
13488: OR
13489: IFFALSE 13515
13491: GO 13493
13493: DISABLE
// begin if eastBaseCaptured then
13494: LD_EXP 10
13498: IFFALSE 13507
// wait ( 2 2$00 ) ;
13500: LD_INT 4200
13502: PPUSH
13503: CALL_OW 67
// convoyStarted := true ;
13507: LD_ADDR_EXP 17
13511: PUSH
13512: LD_INT 1
13514: ST_TO_ADDR
// end ;
13515: END
// every 0 0$1 trigger convoyStarted do
13516: LD_EXP 17
13520: IFFALSE 13611
13522: GO 13524
13524: DISABLE
// begin DialogueOn ;
13525: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13529: LD_EXP 29
13533: PPUSH
13534: LD_STRING DShar-Convoy-1
13536: PPUSH
13537: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13541: LD_EXP 21
13545: PPUSH
13546: LD_STRING DH-Convoy-2
13548: PPUSH
13549: CALL_OW 88
// DialogueOff ;
13553: CALL_OW 7
// wait ( 0 0$10 ) ;
13557: LD_INT 350
13559: PPUSH
13560: CALL_OW 67
// PrepareConvoy ;
13564: CALL 4616 0 0
// repeat wait ( rand ( 2 2$30 , 4 4$30 ) ) ;
13568: LD_INT 5250
13570: PPUSH
13571: LD_INT 9450
13573: PPUSH
13574: CALL_OW 12
13578: PPUSH
13579: CALL_OW 67
// PrepareConvoy ;
13583: CALL 4616 0 0
// convoyCounter := convoyCounter - 1 ;
13587: LD_ADDR_EXP 16
13591: PUSH
13592: LD_EXP 16
13596: PUSH
13597: LD_INT 1
13599: MINUS
13600: ST_TO_ADDR
// until convoyCounter <= 0 ;
13601: LD_EXP 16
13605: PUSH
13606: LD_INT 0
13608: LESSEQUAL
13609: IFFALSE 13568
// end ;
13611: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13612: LD_EXP 15
13616: PUSH
13617: LD_INT 10
13619: GREATEREQUAL
13620: IFFALSE 13637
13622: GO 13624
13624: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13625: LD_EXP 31
13629: PPUSH
13630: LD_STRING DOm-Fail-1
13632: PPUSH
13633: CALL_OW 94
13637: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13638: LD_EXP 39
13642: NOT
13643: PUSH
13644: LD_EXP 40
13648: NOT
13649: AND
13650: IFFALSE 13662
13652: GO 13654
13654: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13655: LD_STRING RaiderDone
13657: PPUSH
13658: CALL_OW 337
13662: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13663: LD_INT 22
13665: PUSH
13666: LD_INT 2
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 33
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PUSH
13692: LD_INT 3
13694: GREATEREQUAL
13695: PUSH
13696: LD_INT 22
13698: PUSH
13699: LD_INT 2
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 34
13708: PUSH
13709: LD_INT 31
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PPUSH
13720: CALL_OW 69
13724: PUSH
13725: LD_INT 2
13727: GREATEREQUAL
13728: AND
13729: IFFALSE 13741
13731: GO 13733
13733: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13734: LD_STRING RemoteControlDone
13736: PPUSH
13737: CALL_OW 337
13741: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13742: LD_EXP 16
13746: PUSH
13747: LD_INT 1
13749: LESS
13750: PUSH
13751: LD_EXP 41
13755: PPUSH
13756: LD_INT 52
13758: PUSH
13759: EMPTY
13760: LIST
13761: PUSH
13762: LD_INT 21
13764: PUSH
13765: LD_INT 1
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL_OW 72
13780: NOT
13781: AND
13782: PUSH
13783: LD_OWVAR 1
13787: PUSH
13788: LD_INT 126000
13790: GREATEREQUAL
13791: OR
13792: IFFALSE 14984
13794: GO 13796
13796: DISABLE
13797: LD_INT 0
13799: PPUSH
13800: PPUSH
13801: PPUSH
13802: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13803: LD_STRING ReinforcementsDone
13805: PPUSH
13806: CALL_OW 337
// music_class := music_victory ;
13810: LD_ADDR_OWVAR 72
13814: PUSH
13815: LD_INT 4
13817: ST_TO_ADDR
// if tick <= 45 45$00 then
13818: LD_OWVAR 1
13822: PUSH
13823: LD_INT 94500
13825: LESSEQUAL
13826: IFFALSE 13835
// SetAchievement ( ACH_HSPEED_5 ) ;
13828: LD_STRING ACH_HSPEED_5
13830: PPUSH
13831: CALL_OW 543
// InGameOn ;
13835: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13839: LD_EXP 21
13843: PPUSH
13844: LD_STRING DH-end-1
13846: PPUSH
13847: CALL_OW 88
// wait ( 0 0$2 ) ;
13851: LD_INT 70
13853: PPUSH
13854: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13858: LD_EXP 29
13862: PPUSH
13863: LD_STRING DShar-end-2
13865: PPUSH
13866: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13870: LD_EXP 39
13874: NOT
13875: PUSH
13876: LD_EXP 40
13880: NOT
13881: AND
13882: IFFALSE 13898
// begin Say ( Heike , DH-end-3 ) ;
13884: LD_EXP 21
13888: PPUSH
13889: LD_STRING DH-end-3
13891: PPUSH
13892: CALL_OW 88
// end else
13896: GO 14002
// begin Say ( Heike , DH-end-a-3 ) ;
13898: LD_EXP 21
13902: PPUSH
13903: LD_STRING DH-end-a-3
13905: PPUSH
13906: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13910: LD_EXP 29
13914: PPUSH
13915: LD_STRING DShar-end-a-4
13917: PPUSH
13918: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13922: LD_EXP 21
13926: PPUSH
13927: LD_STRING DH-end-a-5
13929: PPUSH
13930: CALL_OW 88
// InGameOff ;
13934: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13938: LD_INT 35
13940: PPUSH
13941: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 ;
13945: LD_INT 22
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 50
13957: PUSH
13958: EMPTY
13959: LIST
13960: PUSH
13961: LD_INT 21
13963: PUSH
13964: LD_INT 1
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 69
13980: PUSH
13981: LD_INT 0
13983: EQUAL
13984: IFFALSE 13938
// InGameOn ;
13986: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13990: LD_EXP 21
13994: PPUSH
13995: LD_STRING DH-end-a-6
13997: PPUSH
13998: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14002: LD_EXP 29
14006: PPUSH
14007: LD_STRING DShar-end-3
14009: PPUSH
14010: CALL_OW 94
// if not flamethrowerBuilt then
14014: LD_EXP 20
14018: NOT
14019: IFFALSE 14028
// SetAchievement ( ACH_FIRE ) ;
14021: LD_STRING ACH_FIRE
14023: PPUSH
14024: CALL_OW 543
// if drugsTested then
14028: LD_EXP 6
14032: IFFALSE 14046
// AddMedal ( med1 , 1 ) else
14034: LD_STRING med1
14036: PPUSH
14037: LD_INT 1
14039: PPUSH
14040: CALL_OW 101
14044: GO 14086
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
14046: LD_INT 5
14048: PPUSH
14049: LD_INT 2
14051: PPUSH
14052: CALL_OW 321
14056: PUSH
14057: LD_INT 2
14059: EQUAL
14060: IFFALSE 14075
// AddMedal ( med1 , - 1 ) else
14062: LD_STRING med1
14064: PPUSH
14065: LD_INT 1
14067: NEG
14068: PPUSH
14069: CALL_OW 101
14073: GO 14086
// AddMedal ( med1 , - 2 ) ;
14075: LD_STRING med1
14077: PPUSH
14078: LD_INT 2
14080: NEG
14081: PPUSH
14082: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14086: LD_INT 22
14088: PUSH
14089: LD_INT 2
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 33
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 69
14114: PUSH
14115: LD_INT 3
14117: GREATEREQUAL
14118: PUSH
14119: LD_INT 22
14121: PUSH
14122: LD_INT 2
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 34
14131: PUSH
14132: LD_INT 31
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: PUSH
14148: LD_INT 1
14150: GREATEREQUAL
14151: AND
14152: IFFALSE 14166
// AddMedal ( med2 , 1 ) else
14154: LD_STRING med2
14156: PPUSH
14157: LD_INT 1
14159: PPUSH
14160: CALL_OW 101
14164: GO 14177
// AddMedal ( med2 , - 1 ) ;
14166: LD_STRING med2
14168: PPUSH
14169: LD_INT 1
14171: NEG
14172: PPUSH
14173: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14177: LD_EXP 15
14181: PUSH
14182: LD_INT 10
14184: PUSH
14185: LD_INT 8
14187: PUSH
14188: LD_INT 6
14190: PUSH
14191: LD_INT 5
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: LD_OWVAR 67
14204: ARRAY
14205: LESS
14206: IFFALSE 14220
// AddMedal ( med3 , 1 ) else
14208: LD_STRING med3
14210: PPUSH
14211: LD_INT 1
14213: PPUSH
14214: CALL_OW 101
14218: GO 14231
// AddMedal ( med3 , - 1 ) ;
14220: LD_STRING med3
14222: PPUSH
14223: LD_INT 1
14225: NEG
14226: PPUSH
14227: CALL_OW 101
// GiveMedals ( MAIN ) ;
14231: LD_STRING MAIN
14233: PPUSH
14234: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14238: LD_INT 22
14240: PUSH
14241: LD_INT 2
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 23
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: PPUSH
14278: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14282: LD_EXP 15
14286: PPUSH
14287: LD_STRING 05_ConvoySavedCounter
14289: PPUSH
14290: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14294: LD_EXP 13
14298: PPUSH
14299: LD_STRING 05_Radar
14301: PPUSH
14302: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14306: LD_EXP 6
14310: PPUSH
14311: LD_STRING 05_DrugsTested
14313: PPUSH
14314: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14318: LD_INT 22
14320: PUSH
14321: LD_INT 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 33
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: PUSH
14347: LD_INT 3
14349: GREATEREQUAL
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 2
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 34
14363: PUSH
14364: LD_INT 31
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PPUSH
14375: CALL_OW 69
14379: PUSH
14380: LD_INT 2
14382: GREATEREQUAL
14383: AND
14384: PPUSH
14385: LD_STRING 05_RemoteControl
14387: PPUSH
14388: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14392: LD_ADDR_VAR 0 2
14396: PUSH
14397: LD_INT 22
14399: PUSH
14400: LD_INT 2
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 21
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: ST_TO_ADDR
// if tmp then
14426: LD_VAR 0 2
14430: IFFALSE 14549
// begin vehs := [ ] ;
14432: LD_ADDR_VAR 0 4
14436: PUSH
14437: EMPTY
14438: ST_TO_ADDR
// for i in tmp do
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_VAR 0 2
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14535
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_VAR 0 4
14466: PUSH
14467: LD_INT 1
14469: PLUS
14470: PPUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 265
14480: PUSH
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 262
14490: PUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 263
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 264
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 248
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: PPUSH
14528: CALL_OW 1
14532: ST_TO_ADDR
14533: GO 14449
14535: POP
14536: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14537: LD_VAR 0 4
14541: PPUSH
14542: LD_STRING 05_Vehicles
14544: PPUSH
14545: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14549: LD_ADDR_VAR 0 2
14553: PUSH
14554: LD_INT 25
14556: PPUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 3
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 70
14571: ST_TO_ADDR
// tmp2 := [ ] ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: EMPTY
14578: ST_TO_ADDR
// if tmp then
14579: LD_VAR 0 2
14583: IFFALSE 14736
// begin for i in tmp do
14585: LD_ADDR_VAR 0 1
14589: PUSH
14590: LD_VAR 0 2
14594: PUSH
14595: FOR_IN
14596: IFFALSE 14722
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14598: LD_ADDR_VAR 0 3
14602: PUSH
14603: LD_VAR 0 3
14607: PPUSH
14608: LD_VAR 0 1
14612: PPUSH
14613: CALL_OW 266
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 250
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 251
14637: PUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 254
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 248
14657: PUSH
14658: LD_VAR 0 1
14662: PPUSH
14663: CALL_OW 267
14667: PUSH
14668: LD_VAR 0 1
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 268
14680: PUSH
14681: LD_VAR 0 1
14685: PPUSH
14686: LD_INT 2
14688: PPUSH
14689: CALL_OW 268
14693: PUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 269
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL 74141 0 2
14719: ST_TO_ADDR
14720: GO 14595
14722: POP
14723: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14724: LD_VAR 0 3
14728: PPUSH
14729: LD_STRING 05_Buildings
14731: PPUSH
14732: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14736: LD_EXP 21
14740: PPUSH
14741: LD_STRING 05_Heike
14743: PPUSH
14744: CALL_OW 38
// if Aviradze then
14748: LD_EXP 33
14752: IFFALSE 14766
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14754: LD_EXP 33
14758: PPUSH
14759: LD_STRING 05_Aviradze
14761: PPUSH
14762: CALL_OW 38
// if Ibrahim then
14766: LD_EXP 24
14770: IFFALSE 14784
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14772: LD_EXP 24
14776: PPUSH
14777: LD_STRING 05_Ibrahim
14779: PPUSH
14780: CALL_OW 38
// if Kamil then
14784: LD_EXP 25
14788: IFFALSE 14802
// SaveCharacters ( Kamil , 05_Kamil ) ;
14790: LD_EXP 25
14794: PPUSH
14795: LD_STRING 05_Kamil
14797: PPUSH
14798: CALL_OW 38
// if Sophia then
14802: LD_EXP 27
14806: IFFALSE 14820
// SaveCharacters ( Sophia , 05_Sophia ) ;
14808: LD_EXP 27
14812: PPUSH
14813: LD_STRING 05_Sophia
14815: PPUSH
14816: CALL_OW 38
// if Kaia then
14820: LD_EXP 26
14824: IFFALSE 14838
// SaveCharacters ( Kaia , 05_Kaia ) ;
14826: LD_EXP 26
14830: PPUSH
14831: LD_STRING 05_Kaia
14833: PPUSH
14834: CALL_OW 38
// if Givi then
14838: LD_EXP 22
14842: IFFALSE 14856
// SaveCharacters ( Givi , 05_Givi ) ;
14844: LD_EXP 22
14848: PPUSH
14849: LD_STRING 05_Givi
14851: PPUSH
14852: CALL_OW 38
// if Mike then
14856: LD_EXP 23
14860: IFFALSE 14874
// SaveCharacters ( Mike , 05_Mike ) ;
14862: LD_EXP 23
14866: PPUSH
14867: LD_STRING 05_Mike
14869: PPUSH
14870: CALL_OW 38
// if Markov then
14874: LD_EXP 28
14878: IFFALSE 14892
// SaveCharacters ( Markov , 05_Markov ) ;
14880: LD_EXP 28
14884: PPUSH
14885: LD_STRING 05_Markov
14887: PPUSH
14888: CALL_OW 38
// if Kurt then
14892: LD_EXP 32
14896: IFFALSE 14910
// SaveCharacters ( Kurt , 05_Kurt ) ;
14898: LD_EXP 32
14902: PPUSH
14903: LD_STRING 05_Kurt
14905: PPUSH
14906: CALL_OW 38
// if heikeSecondSquad then
14910: LD_EXP 34
14914: IFFALSE 14928
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14916: LD_EXP 34
14920: PPUSH
14921: LD_STRING 05_others
14923: PPUSH
14924: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14928: LD_ADDR_VAR 0 2
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_INT 2
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 23
14945: PUSH
14946: LD_INT 0
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PPUSH
14957: CALL_OW 69
14961: ST_TO_ADDR
// if tmp then
14962: LD_VAR 0 2
14966: IFFALSE 14980
// SaveCharacters ( tmp , 05_apes ) ;
14968: LD_VAR 0 2
14972: PPUSH
14973: LD_STRING 05_apes
14975: PPUSH
14976: CALL_OW 38
// YouWin ;
14980: CALL_OW 103
// end ; end_of_file
14984: PPOPN 4
14986: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14987: LD_EXP 9
14991: PUSH
14992: LD_INT 13
14994: PPUSH
14995: LD_INT 1
14997: PPUSH
14998: CALL_OW 287
15002: PUSH
15003: LD_INT 25
15005: LESS
15006: AND
15007: IFFALSE 15034
15009: GO 15011
15011: DISABLE
// begin enable ;
15012: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15013: LD_INT 1
15015: PPUSH
15016: LD_INT 5
15018: PPUSH
15019: CALL_OW 12
15023: PPUSH
15024: LD_INT 13
15026: PPUSH
15027: LD_INT 1
15029: PPUSH
15030: CALL_OW 55
// end ; end_of_file
15034: END
// export function SOS_UnitDestroyed ( un ) ; begin
15035: LD_INT 0
15037: PPUSH
// ComRadiation ( un ) ;
15038: LD_VAR 0 1
15042: PPUSH
15043: CALL 16104 0 1
// end ;
15047: LD_VAR 0 2
15051: RET
// export function SOS_UnitKamikazed ( un ) ; begin
15052: LD_INT 0
15054: PPUSH
// ComRadiation ( un ) ;
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL 16104 0 1
// end ;
15064: LD_VAR 0 2
15068: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15069: LD_INT 0
15071: PPUSH
// end ;
15072: LD_VAR 0 4
15076: RET
// export function SOS_Command ( cmd ) ; begin
15077: LD_INT 0
15079: PPUSH
// end ;
15080: LD_VAR 0 2
15084: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15085: LD_INT 0
15087: PPUSH
// end ;
15088: LD_VAR 0 6
15092: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
15093: LD_INT 0
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
// if not vehicle or not factory then
15099: LD_VAR 0 1
15103: NOT
15104: PUSH
15105: LD_VAR 0 2
15109: NOT
15110: OR
15111: IFFALSE 15115
// exit ;
15113: GO 15695
// if not factoryWaypoints then
15115: LD_EXP 113
15119: NOT
15120: IFFALSE 15124
// exit ;
15122: GO 15695
// for i := 1 to Count ( factoryWaypoints ) do
15124: LD_ADDR_VAR 0 4
15128: PUSH
15129: DOUBLE
15130: LD_INT 1
15132: DEC
15133: ST_TO_ADDR
15134: LD_EXP 113
15138: PPUSH
15139: CALL 38532 0 1
15143: PUSH
15144: FOR_TO
15145: IFFALSE 15693
// if factoryWaypoints [ i ] [ 2 ] = factory then
15147: LD_EXP 113
15151: PUSH
15152: LD_VAR 0 4
15156: ARRAY
15157: PUSH
15158: LD_INT 2
15160: ARRAY
15161: PUSH
15162: LD_VAR 0 2
15166: EQUAL
15167: IFFALSE 15691
// begin if GetControl ( vehicle ) = control_manual then
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 263
15178: PUSH
15179: LD_INT 1
15181: EQUAL
15182: IFFALSE 15544
// begin driver := IsDrivenBy ( vehicle ) ;
15184: LD_ADDR_VAR 0 5
15188: PUSH
15189: LD_VAR 0 1
15193: PPUSH
15194: CALL_OW 311
15198: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
15199: LD_VAR 0 5
15203: PUSH
15204: LD_EXP 114
15208: IN
15209: PUSH
15210: LD_VAR 0 1
15214: PUSH
15215: LD_EXP 114
15219: IN
15220: OR
15221: IFFALSE 15227
// exit ;
15223: POP
15224: POP
15225: GO 15695
// if not HasTask ( driver ) then
15227: LD_VAR 0 5
15231: PPUSH
15232: CALL_OW 314
15236: NOT
15237: IFFALSE 15542
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
15239: LD_ADDR_EXP 114
15243: PUSH
15244: LD_EXP 114
15248: PPUSH
15249: LD_VAR 0 5
15253: PPUSH
15254: CALL 74141 0 2
15258: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
15259: LD_ADDR_EXP 114
15263: PUSH
15264: LD_EXP 114
15268: PPUSH
15269: LD_VAR 0 1
15273: PPUSH
15274: CALL 74141 0 2
15278: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15279: LD_ADDR_VAR 0 6
15283: PUSH
15284: LD_EXP 113
15288: PUSH
15289: LD_VAR 0 4
15293: ARRAY
15294: PUSH
15295: LD_INT 3
15297: ARRAY
15298: PPUSH
15299: LD_EXP 113
15303: PUSH
15304: LD_VAR 0 4
15308: ARRAY
15309: PUSH
15310: LD_INT 4
15312: ARRAY
15313: PPUSH
15314: CALL_OW 428
15318: ST_TO_ADDR
// if hex then
15319: LD_VAR 0 6
15323: IFFALSE 15341
// ComMoveUnit ( driver , hex ) else
15325: LD_VAR 0 5
15329: PPUSH
15330: LD_VAR 0 6
15334: PPUSH
15335: CALL_OW 112
15339: GO 15425
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
15341: LD_VAR 0 1
15345: PPUSH
15346: LD_EXP 113
15350: PUSH
15351: LD_VAR 0 4
15355: ARRAY
15356: PUSH
15357: LD_INT 3
15359: ARRAY
15360: PPUSH
15361: LD_EXP 113
15365: PUSH
15366: LD_VAR 0 4
15370: ARRAY
15371: PUSH
15372: LD_INT 4
15374: ARRAY
15375: PPUSH
15376: CALL_OW 297
15380: PUSH
15381: LD_INT 0
15383: GREATER
15384: IFFALSE 15425
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15386: LD_VAR 0 5
15390: PPUSH
15391: LD_EXP 113
15395: PUSH
15396: LD_VAR 0 4
15400: ARRAY
15401: PUSH
15402: LD_INT 3
15404: ARRAY
15405: PPUSH
15406: LD_EXP 113
15410: PUSH
15411: LD_VAR 0 4
15415: ARRAY
15416: PUSH
15417: LD_INT 4
15419: ARRAY
15420: PPUSH
15421: CALL_OW 111
// AddComExitVehicle ( driver ) ;
15425: LD_VAR 0 5
15429: PPUSH
15430: CALL_OW 181
// if Multiplayer then
15434: LD_OWVAR 4
15438: IFFALSE 15487
// begin repeat wait ( 10 ) ;
15440: LD_INT 10
15442: PPUSH
15443: CALL_OW 67
// until not IsInUnit ( driver ) ;
15447: LD_VAR 0 5
15451: PPUSH
15452: CALL_OW 310
15456: NOT
15457: IFFALSE 15440
// if not HasTask ( driver ) then
15459: LD_VAR 0 5
15463: PPUSH
15464: CALL_OW 314
15468: NOT
15469: IFFALSE 15485
// ComEnterUnit ( driver , factory ) ;
15471: LD_VAR 0 5
15475: PPUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: CALL_OW 120
// end else
15485: GO 15501
// AddComEnterUnit ( driver , factory ) ;
15487: LD_VAR 0 5
15491: PPUSH
15492: LD_VAR 0 2
15496: PPUSH
15497: CALL_OW 180
// wait ( 0 0$1 ) ;
15501: LD_INT 35
15503: PPUSH
15504: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
15508: LD_ADDR_EXP 114
15512: PUSH
15513: LD_EXP 114
15517: PUSH
15518: LD_VAR 0 5
15522: DIFF
15523: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
15524: LD_ADDR_EXP 114
15528: PUSH
15529: LD_EXP 114
15533: PUSH
15534: LD_VAR 0 1
15538: DIFF
15539: ST_TO_ADDR
// break ;
15540: GO 15693
// end ; end else
15542: GO 15691
// if GetControl ( vehicle ) = control_remote then
15544: LD_VAR 0 1
15548: PPUSH
15549: CALL_OW 263
15553: PUSH
15554: LD_INT 2
15556: EQUAL
15557: IFFALSE 15643
// begin wait ( 0 0$2 ) ;
15559: LD_INT 70
15561: PPUSH
15562: CALL_OW 67
// repeat wait ( 10 ) ;
15566: LD_INT 10
15568: PPUSH
15569: CALL_OW 67
// Connect ( vehicle ) ;
15573: LD_VAR 0 1
15577: PPUSH
15578: CALL 44738 0 1
// until IsControledBy ( vehicle ) ;
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 312
15591: IFFALSE 15566
// wait ( 10 ) ;
15593: LD_INT 10
15595: PPUSH
15596: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15600: LD_VAR 0 1
15604: PPUSH
15605: LD_EXP 113
15609: PUSH
15610: LD_VAR 0 4
15614: ARRAY
15615: PUSH
15616: LD_INT 3
15618: ARRAY
15619: PPUSH
15620: LD_EXP 113
15624: PUSH
15625: LD_VAR 0 4
15629: ARRAY
15630: PUSH
15631: LD_INT 4
15633: ARRAY
15634: PPUSH
15635: CALL_OW 111
// break ;
15639: GO 15693
// end else
15641: GO 15691
// begin wait ( 0 0$3 ) ;
15643: LD_INT 105
15645: PPUSH
15646: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15650: LD_VAR 0 1
15654: PPUSH
15655: LD_EXP 113
15659: PUSH
15660: LD_VAR 0 4
15664: ARRAY
15665: PUSH
15666: LD_INT 3
15668: ARRAY
15669: PPUSH
15670: LD_EXP 113
15674: PUSH
15675: LD_VAR 0 4
15679: ARRAY
15680: PUSH
15681: LD_INT 4
15683: ARRAY
15684: PPUSH
15685: CALL_OW 111
// break ;
15689: GO 15693
// end ; end ;
15691: GO 15144
15693: POP
15694: POP
// end ;
15695: LD_VAR 0 3
15699: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15700: LD_INT 0
15702: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 250
15710: EQUAL
15711: PUSH
15712: LD_VAR 0 2
15716: PPUSH
15717: CALL_OW 264
15721: PUSH
15722: LD_INT 81
15724: EQUAL
15725: AND
15726: IFFALSE 15747
// MinerPlaceMine ( unit , x , y ) ;
15728: LD_VAR 0 2
15732: PPUSH
15733: LD_VAR 0 4
15737: PPUSH
15738: LD_VAR 0 5
15742: PPUSH
15743: CALL 18839 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15747: LD_VAR 0 1
15751: PUSH
15752: LD_INT 251
15754: EQUAL
15755: PUSH
15756: LD_VAR 0 2
15760: PPUSH
15761: CALL_OW 264
15765: PUSH
15766: LD_INT 81
15768: EQUAL
15769: AND
15770: IFFALSE 15791
// MinerDetonateMine ( unit , x , y ) ;
15772: LD_VAR 0 2
15776: PPUSH
15777: LD_VAR 0 4
15781: PPUSH
15782: LD_VAR 0 5
15786: PPUSH
15787: CALL 19114 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15791: LD_VAR 0 1
15795: PUSH
15796: LD_INT 252
15798: EQUAL
15799: PUSH
15800: LD_VAR 0 2
15804: PPUSH
15805: CALL_OW 264
15809: PUSH
15810: LD_INT 81
15812: EQUAL
15813: AND
15814: IFFALSE 15835
// MinerCreateMinefield ( unit , x , y ) ;
15816: LD_VAR 0 2
15820: PPUSH
15821: LD_VAR 0 4
15825: PPUSH
15826: LD_VAR 0 5
15830: PPUSH
15831: CALL 19531 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15835: LD_VAR 0 1
15839: PUSH
15840: LD_INT 253
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 2
15848: PPUSH
15849: CALL_OW 257
15853: PUSH
15854: LD_INT 5
15856: EQUAL
15857: AND
15858: IFFALSE 15879
// ComBinocular ( unit , x , y ) ;
15860: LD_VAR 0 2
15864: PPUSH
15865: LD_VAR 0 4
15869: PPUSH
15870: LD_VAR 0 5
15874: PPUSH
15875: CALL 19900 0 3
// if selectedUnit then
15879: LD_VAR 0 3
15883: IFFALSE 15939
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15885: LD_VAR 0 1
15889: PUSH
15890: LD_INT 254
15892: EQUAL
15893: PUSH
15894: LD_VAR 0 2
15898: PPUSH
15899: CALL_OW 264
15903: PUSH
15904: LD_INT 99
15906: EQUAL
15907: AND
15908: PUSH
15909: LD_VAR 0 3
15913: PPUSH
15914: CALL_OW 263
15918: PUSH
15919: LD_INT 3
15921: EQUAL
15922: AND
15923: IFFALSE 15939
// HackDestroyVehicle ( unit , selectedUnit ) ;
15925: LD_VAR 0 2
15929: PPUSH
15930: LD_VAR 0 3
15934: PPUSH
15935: CALL 18203 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15939: LD_VAR 0 1
15943: PUSH
15944: LD_INT 255
15946: EQUAL
15947: PUSH
15948: LD_VAR 0 2
15952: PPUSH
15953: CALL_OW 264
15957: PUSH
15958: LD_INT 14
15960: PUSH
15961: LD_INT 53
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: IN
15968: AND
15969: PUSH
15970: LD_VAR 0 4
15974: PPUSH
15975: LD_VAR 0 5
15979: PPUSH
15980: CALL_OW 488
15984: AND
15985: IFFALSE 16009
// CutTreeXYR ( unit , x , y , 12 ) ;
15987: LD_VAR 0 2
15991: PPUSH
15992: LD_VAR 0 4
15996: PPUSH
15997: LD_VAR 0 5
16001: PPUSH
16002: LD_INT 12
16004: PPUSH
16005: CALL 16200 0 4
// if cmd = 256 then
16009: LD_VAR 0 1
16013: PUSH
16014: LD_INT 256
16016: EQUAL
16017: IFFALSE 16038
// SetFactoryWaypoint ( unit , x , y ) ;
16019: LD_VAR 0 2
16023: PPUSH
16024: LD_VAR 0 4
16028: PPUSH
16029: LD_VAR 0 5
16033: PPUSH
16034: CALL 34907 0 3
// if cmd = 257 then
16038: LD_VAR 0 1
16042: PUSH
16043: LD_INT 257
16045: EQUAL
16046: IFFALSE 16067
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16048: LD_VAR 0 2
16052: PPUSH
16053: LD_VAR 0 4
16057: PPUSH
16058: LD_VAR 0 5
16062: PPUSH
16063: CALL 35397 0 3
// if cmd = 258 then
16067: LD_VAR 0 1
16071: PUSH
16072: LD_INT 258
16074: EQUAL
16075: IFFALSE 16099
// BurnTreeXYR ( unit , x , y , 8 ) ;
16077: LD_VAR 0 2
16081: PPUSH
16082: LD_VAR 0 4
16086: PPUSH
16087: LD_VAR 0 5
16091: PPUSH
16092: LD_INT 8
16094: PPUSH
16095: CALL 16594 0 4
// end ;
16099: LD_VAR 0 6
16103: RET
// export function ComRadiation ( un ) ; var eff ; begin
16104: LD_INT 0
16106: PPUSH
16107: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
16108: LD_VAR 0 1
16112: PPUSH
16113: CALL_OW 264
16117: PUSH
16118: LD_INT 91
16120: NONEQUAL
16121: IFFALSE 16125
// exit ;
16123: GO 16195
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16125: LD_INT 68
16127: PPUSH
16128: LD_VAR 0 1
16132: PPUSH
16133: CALL_OW 255
16137: PPUSH
16138: CALL_OW 321
16142: PUSH
16143: LD_INT 2
16145: EQUAL
16146: IFFALSE 16158
// eff := 50 else
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: LD_INT 50
16155: ST_TO_ADDR
16156: GO 16166
// eff := 25 ;
16158: LD_ADDR_VAR 0 3
16162: PUSH
16163: LD_INT 25
16165: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16166: LD_VAR 0 1
16170: PPUSH
16171: CALL_OW 250
16175: PPUSH
16176: LD_VAR 0 1
16180: PPUSH
16181: CALL_OW 251
16185: PPUSH
16186: LD_VAR 0 3
16190: PPUSH
16191: CALL_OW 495
// end ;
16195: LD_VAR 0 2
16199: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16200: LD_INT 0
16202: PPUSH
16203: PPUSH
16204: PPUSH
16205: PPUSH
16206: PPUSH
16207: PPUSH
16208: PPUSH
16209: PPUSH
16210: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16211: LD_VAR 0 1
16215: PPUSH
16216: CALL_OW 302
16220: NOT
16221: PUSH
16222: LD_VAR 0 2
16226: PPUSH
16227: LD_VAR 0 3
16231: PPUSH
16232: CALL_OW 488
16236: NOT
16237: OR
16238: PUSH
16239: LD_VAR 0 4
16243: NOT
16244: OR
16245: IFFALSE 16249
// exit ;
16247: GO 16589
// list := [ ] ;
16249: LD_ADDR_VAR 0 13
16253: PUSH
16254: EMPTY
16255: ST_TO_ADDR
// if x - r < 0 then
16256: LD_VAR 0 2
16260: PUSH
16261: LD_VAR 0 4
16265: MINUS
16266: PUSH
16267: LD_INT 0
16269: LESS
16270: IFFALSE 16282
// min_x := 0 else
16272: LD_ADDR_VAR 0 7
16276: PUSH
16277: LD_INT 0
16279: ST_TO_ADDR
16280: GO 16298
// min_x := x - r ;
16282: LD_ADDR_VAR 0 7
16286: PUSH
16287: LD_VAR 0 2
16291: PUSH
16292: LD_VAR 0 4
16296: MINUS
16297: ST_TO_ADDR
// if y - r < 0 then
16298: LD_VAR 0 3
16302: PUSH
16303: LD_VAR 0 4
16307: MINUS
16308: PUSH
16309: LD_INT 0
16311: LESS
16312: IFFALSE 16324
// min_y := 0 else
16314: LD_ADDR_VAR 0 8
16318: PUSH
16319: LD_INT 0
16321: ST_TO_ADDR
16322: GO 16340
// min_y := y - r ;
16324: LD_ADDR_VAR 0 8
16328: PUSH
16329: LD_VAR 0 3
16333: PUSH
16334: LD_VAR 0 4
16338: MINUS
16339: ST_TO_ADDR
// max_x := x + r ;
16340: LD_ADDR_VAR 0 9
16344: PUSH
16345: LD_VAR 0 2
16349: PUSH
16350: LD_VAR 0 4
16354: PLUS
16355: ST_TO_ADDR
// max_y := y + r ;
16356: LD_ADDR_VAR 0 10
16360: PUSH
16361: LD_VAR 0 3
16365: PUSH
16366: LD_VAR 0 4
16370: PLUS
16371: ST_TO_ADDR
// for _x = min_x to max_x do
16372: LD_ADDR_VAR 0 11
16376: PUSH
16377: DOUBLE
16378: LD_VAR 0 7
16382: DEC
16383: ST_TO_ADDR
16384: LD_VAR 0 9
16388: PUSH
16389: FOR_TO
16390: IFFALSE 16507
// for _y = min_y to max_y do
16392: LD_ADDR_VAR 0 12
16396: PUSH
16397: DOUBLE
16398: LD_VAR 0 8
16402: DEC
16403: ST_TO_ADDR
16404: LD_VAR 0 10
16408: PUSH
16409: FOR_TO
16410: IFFALSE 16503
// begin if not ValidHex ( _x , _y ) then
16412: LD_VAR 0 11
16416: PPUSH
16417: LD_VAR 0 12
16421: PPUSH
16422: CALL_OW 488
16426: NOT
16427: IFFALSE 16431
// continue ;
16429: GO 16409
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16431: LD_VAR 0 11
16435: PPUSH
16436: LD_VAR 0 12
16440: PPUSH
16441: CALL_OW 351
16445: PUSH
16446: LD_VAR 0 11
16450: PPUSH
16451: LD_VAR 0 12
16455: PPUSH
16456: CALL_OW 554
16460: AND
16461: IFFALSE 16501
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16463: LD_ADDR_VAR 0 13
16467: PUSH
16468: LD_VAR 0 13
16472: PPUSH
16473: LD_VAR 0 13
16477: PUSH
16478: LD_INT 1
16480: PLUS
16481: PPUSH
16482: LD_VAR 0 11
16486: PUSH
16487: LD_VAR 0 12
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PPUSH
16496: CALL_OW 2
16500: ST_TO_ADDR
// end ;
16501: GO 16409
16503: POP
16504: POP
16505: GO 16389
16507: POP
16508: POP
// if not list then
16509: LD_VAR 0 13
16513: NOT
16514: IFFALSE 16518
// exit ;
16516: GO 16589
// for i in list do
16518: LD_ADDR_VAR 0 6
16522: PUSH
16523: LD_VAR 0 13
16527: PUSH
16528: FOR_IN
16529: IFFALSE 16587
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16531: LD_VAR 0 1
16535: PPUSH
16536: LD_STRING M
16538: PUSH
16539: LD_VAR 0 6
16543: PUSH
16544: LD_INT 1
16546: ARRAY
16547: PUSH
16548: LD_VAR 0 6
16552: PUSH
16553: LD_INT 2
16555: ARRAY
16556: PUSH
16557: LD_INT 0
16559: PUSH
16560: LD_INT 0
16562: PUSH
16563: LD_INT 0
16565: PUSH
16566: LD_INT 0
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: PUSH
16578: EMPTY
16579: LIST
16580: PPUSH
16581: CALL_OW 447
16585: GO 16528
16587: POP
16588: POP
// end ;
16589: LD_VAR 0 5
16593: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
16594: LD_INT 0
16596: PPUSH
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16606: LD_VAR 0 1
16610: PPUSH
16611: CALL_OW 302
16615: NOT
16616: PUSH
16617: LD_VAR 0 2
16621: PPUSH
16622: LD_VAR 0 3
16626: PPUSH
16627: CALL_OW 488
16631: NOT
16632: OR
16633: PUSH
16634: LD_VAR 0 4
16638: NOT
16639: OR
16640: IFFALSE 16644
// exit ;
16642: GO 17157
// list := [ ] ;
16644: LD_ADDR_VAR 0 13
16648: PUSH
16649: EMPTY
16650: ST_TO_ADDR
// if x - r < 0 then
16651: LD_VAR 0 2
16655: PUSH
16656: LD_VAR 0 4
16660: MINUS
16661: PUSH
16662: LD_INT 0
16664: LESS
16665: IFFALSE 16677
// min_x := 0 else
16667: LD_ADDR_VAR 0 7
16671: PUSH
16672: LD_INT 0
16674: ST_TO_ADDR
16675: GO 16693
// min_x := x - r ;
16677: LD_ADDR_VAR 0 7
16681: PUSH
16682: LD_VAR 0 2
16686: PUSH
16687: LD_VAR 0 4
16691: MINUS
16692: ST_TO_ADDR
// if y - r < 0 then
16693: LD_VAR 0 3
16697: PUSH
16698: LD_VAR 0 4
16702: MINUS
16703: PUSH
16704: LD_INT 0
16706: LESS
16707: IFFALSE 16719
// min_y := 0 else
16709: LD_ADDR_VAR 0 8
16713: PUSH
16714: LD_INT 0
16716: ST_TO_ADDR
16717: GO 16735
// min_y := y - r ;
16719: LD_ADDR_VAR 0 8
16723: PUSH
16724: LD_VAR 0 3
16728: PUSH
16729: LD_VAR 0 4
16733: MINUS
16734: ST_TO_ADDR
// max_x := x + r ;
16735: LD_ADDR_VAR 0 9
16739: PUSH
16740: LD_VAR 0 2
16744: PUSH
16745: LD_VAR 0 4
16749: PLUS
16750: ST_TO_ADDR
// max_y := y + r ;
16751: LD_ADDR_VAR 0 10
16755: PUSH
16756: LD_VAR 0 3
16760: PUSH
16761: LD_VAR 0 4
16765: PLUS
16766: ST_TO_ADDR
// for _x = min_x to max_x do
16767: LD_ADDR_VAR 0 11
16771: PUSH
16772: DOUBLE
16773: LD_VAR 0 7
16777: DEC
16778: ST_TO_ADDR
16779: LD_VAR 0 9
16783: PUSH
16784: FOR_TO
16785: IFFALSE 16902
// for _y = min_y to max_y do
16787: LD_ADDR_VAR 0 12
16791: PUSH
16792: DOUBLE
16793: LD_VAR 0 8
16797: DEC
16798: ST_TO_ADDR
16799: LD_VAR 0 10
16803: PUSH
16804: FOR_TO
16805: IFFALSE 16898
// begin if not ValidHex ( _x , _y ) then
16807: LD_VAR 0 11
16811: PPUSH
16812: LD_VAR 0 12
16816: PPUSH
16817: CALL_OW 488
16821: NOT
16822: IFFALSE 16826
// continue ;
16824: GO 16804
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16826: LD_VAR 0 11
16830: PPUSH
16831: LD_VAR 0 12
16835: PPUSH
16836: CALL_OW 351
16840: PUSH
16841: LD_VAR 0 11
16845: PPUSH
16846: LD_VAR 0 12
16850: PPUSH
16851: CALL_OW 554
16855: AND
16856: IFFALSE 16896
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16858: LD_ADDR_VAR 0 13
16862: PUSH
16863: LD_VAR 0 13
16867: PPUSH
16868: LD_VAR 0 13
16872: PUSH
16873: LD_INT 1
16875: PLUS
16876: PPUSH
16877: LD_VAR 0 11
16881: PUSH
16882: LD_VAR 0 12
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 2
16895: ST_TO_ADDR
// end ;
16896: GO 16804
16898: POP
16899: POP
16900: GO 16784
16902: POP
16903: POP
// if not list then
16904: LD_VAR 0 13
16908: NOT
16909: IFFALSE 16913
// exit ;
16911: GO 17157
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
16913: LD_ADDR_VAR 0 13
16917: PUSH
16918: LD_VAR 0 1
16922: PPUSH
16923: LD_VAR 0 13
16927: PPUSH
16928: LD_INT 1
16930: PPUSH
16931: LD_INT 1
16933: PPUSH
16934: CALL 41880 0 4
16938: ST_TO_ADDR
// ComStop ( flame ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL_OW 141
// for i in list do
16948: LD_ADDR_VAR 0 6
16952: PUSH
16953: LD_VAR 0 13
16957: PUSH
16958: FOR_IN
16959: IFFALSE 16990
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
16961: LD_VAR 0 1
16965: PPUSH
16966: LD_VAR 0 6
16970: PUSH
16971: LD_INT 1
16973: ARRAY
16974: PPUSH
16975: LD_VAR 0 6
16979: PUSH
16980: LD_INT 2
16982: ARRAY
16983: PPUSH
16984: CALL_OW 176
16988: GO 16958
16990: POP
16991: POP
// repeat wait ( 0 0$1 ) ;
16992: LD_INT 35
16994: PPUSH
16995: CALL_OW 67
// task := GetTaskList ( flame ) ;
16999: LD_ADDR_VAR 0 14
17003: PUSH
17004: LD_VAR 0 1
17008: PPUSH
17009: CALL_OW 437
17013: ST_TO_ADDR
// if not task then
17014: LD_VAR 0 14
17018: NOT
17019: IFFALSE 17023
// exit ;
17021: GO 17157
// if task [ 1 ] [ 1 ] <> | then
17023: LD_VAR 0 14
17027: PUSH
17028: LD_INT 1
17030: ARRAY
17031: PUSH
17032: LD_INT 1
17034: ARRAY
17035: PUSH
17036: LD_STRING |
17038: NONEQUAL
17039: IFFALSE 17043
// exit ;
17041: GO 17157
// _x := task [ 1 ] [ 2 ] ;
17043: LD_ADDR_VAR 0 11
17047: PUSH
17048: LD_VAR 0 14
17052: PUSH
17053: LD_INT 1
17055: ARRAY
17056: PUSH
17057: LD_INT 2
17059: ARRAY
17060: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17061: LD_ADDR_VAR 0 12
17065: PUSH
17066: LD_VAR 0 14
17070: PUSH
17071: LD_INT 1
17073: ARRAY
17074: PUSH
17075: LD_INT 3
17077: ARRAY
17078: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17079: LD_VAR 0 11
17083: PPUSH
17084: LD_VAR 0 12
17088: PPUSH
17089: CALL_OW 351
17093: NOT
17094: PUSH
17095: LD_VAR 0 11
17099: PPUSH
17100: LD_VAR 0 12
17104: PPUSH
17105: CALL_OW 554
17109: NOT
17110: OR
17111: IFFALSE 17145
// begin task := Delete ( task , 1 ) ;
17113: LD_ADDR_VAR 0 14
17117: PUSH
17118: LD_VAR 0 14
17122: PPUSH
17123: LD_INT 1
17125: PPUSH
17126: CALL_OW 3
17130: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17131: LD_VAR 0 1
17135: PPUSH
17136: LD_VAR 0 14
17140: PPUSH
17141: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 314
17154: NOT
17155: IFFALSE 16992
// end ;
17157: LD_VAR 0 5
17161: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17162: LD_EXP 44
17166: NOT
17167: IFFALSE 17217
17169: GO 17171
17171: DISABLE
// begin initHack := true ;
17172: LD_ADDR_EXP 44
17176: PUSH
17177: LD_INT 1
17179: ST_TO_ADDR
// hackTanks := [ ] ;
17180: LD_ADDR_EXP 45
17184: PUSH
17185: EMPTY
17186: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17187: LD_ADDR_EXP 46
17191: PUSH
17192: EMPTY
17193: ST_TO_ADDR
// hackLimit := 3 ;
17194: LD_ADDR_EXP 47
17198: PUSH
17199: LD_INT 3
17201: ST_TO_ADDR
// hackDist := 12 ;
17202: LD_ADDR_EXP 48
17206: PUSH
17207: LD_INT 12
17209: ST_TO_ADDR
// hackCounter := [ ] ;
17210: LD_ADDR_EXP 49
17214: PUSH
17215: EMPTY
17216: ST_TO_ADDR
// end ;
17217: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17218: LD_EXP 44
17222: PUSH
17223: LD_INT 34
17225: PUSH
17226: LD_INT 99
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: AND
17238: IFFALSE 17491
17240: GO 17242
17242: DISABLE
17243: LD_INT 0
17245: PPUSH
17246: PPUSH
// begin enable ;
17247: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17248: LD_ADDR_VAR 0 1
17252: PUSH
17253: LD_INT 34
17255: PUSH
17256: LD_INT 99
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PPUSH
17263: CALL_OW 69
17267: PUSH
17268: FOR_IN
17269: IFFALSE 17489
// begin if not i in hackTanks then
17271: LD_VAR 0 1
17275: PUSH
17276: LD_EXP 45
17280: IN
17281: NOT
17282: IFFALSE 17365
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17284: LD_ADDR_EXP 45
17288: PUSH
17289: LD_EXP 45
17293: PPUSH
17294: LD_EXP 45
17298: PUSH
17299: LD_INT 1
17301: PLUS
17302: PPUSH
17303: LD_VAR 0 1
17307: PPUSH
17308: CALL_OW 1
17312: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17313: LD_ADDR_EXP 46
17317: PUSH
17318: LD_EXP 46
17322: PPUSH
17323: LD_EXP 46
17327: PUSH
17328: LD_INT 1
17330: PLUS
17331: PPUSH
17332: EMPTY
17333: PPUSH
17334: CALL_OW 1
17338: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17339: LD_ADDR_EXP 49
17343: PUSH
17344: LD_EXP 49
17348: PPUSH
17349: LD_EXP 49
17353: PUSH
17354: LD_INT 1
17356: PLUS
17357: PPUSH
17358: EMPTY
17359: PPUSH
17360: CALL_OW 1
17364: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17365: LD_VAR 0 1
17369: PPUSH
17370: CALL_OW 302
17374: NOT
17375: IFFALSE 17388
// begin HackUnlinkAll ( i ) ;
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL 17494 0 1
// continue ;
17386: GO 17268
// end ; HackCheckCapturedStatus ( i ) ;
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL 17937 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17397: LD_ADDR_VAR 0 2
17401: PUSH
17402: LD_INT 81
17404: PUSH
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 255
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 33
17421: PUSH
17422: LD_INT 3
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 91
17431: PUSH
17432: LD_VAR 0 1
17436: PUSH
17437: LD_EXP 48
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 50
17449: PUSH
17450: EMPTY
17451: LIST
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: PPUSH
17459: CALL_OW 69
17463: ST_TO_ADDR
// if not tmp then
17464: LD_VAR 0 2
17468: NOT
17469: IFFALSE 17473
// continue ;
17471: GO 17268
// HackLink ( i , tmp ) ;
17473: LD_VAR 0 1
17477: PPUSH
17478: LD_VAR 0 2
17482: PPUSH
17483: CALL 17630 0 2
// end ;
17487: GO 17268
17489: POP
17490: POP
// end ;
17491: PPOPN 2
17493: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17494: LD_INT 0
17496: PPUSH
17497: PPUSH
17498: PPUSH
// if not hack in hackTanks then
17499: LD_VAR 0 1
17503: PUSH
17504: LD_EXP 45
17508: IN
17509: NOT
17510: IFFALSE 17514
// exit ;
17512: GO 17625
// index := GetElementIndex ( hackTanks , hack ) ;
17514: LD_ADDR_VAR 0 4
17518: PUSH
17519: LD_EXP 45
17523: PPUSH
17524: LD_VAR 0 1
17528: PPUSH
17529: CALL 41177 0 2
17533: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17534: LD_EXP 46
17538: PUSH
17539: LD_VAR 0 4
17543: ARRAY
17544: IFFALSE 17625
// begin for i in hackTanksCaptured [ index ] do
17546: LD_ADDR_VAR 0 3
17550: PUSH
17551: LD_EXP 46
17555: PUSH
17556: LD_VAR 0 4
17560: ARRAY
17561: PUSH
17562: FOR_IN
17563: IFFALSE 17589
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17565: LD_VAR 0 3
17569: PUSH
17570: LD_INT 1
17572: ARRAY
17573: PPUSH
17574: LD_VAR 0 3
17578: PUSH
17579: LD_INT 2
17581: ARRAY
17582: PPUSH
17583: CALL_OW 235
17587: GO 17562
17589: POP
17590: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17591: LD_ADDR_EXP 46
17595: PUSH
17596: LD_EXP 46
17600: PPUSH
17601: LD_VAR 0 4
17605: PPUSH
17606: EMPTY
17607: PPUSH
17608: CALL_OW 1
17612: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17613: LD_VAR 0 1
17617: PPUSH
17618: LD_INT 0
17620: PPUSH
17621: CALL_OW 505
// end ; end ;
17625: LD_VAR 0 2
17629: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17630: LD_INT 0
17632: PPUSH
17633: PPUSH
17634: PPUSH
// if not hack in hackTanks or not vehicles then
17635: LD_VAR 0 1
17639: PUSH
17640: LD_EXP 45
17644: IN
17645: NOT
17646: PUSH
17647: LD_VAR 0 2
17651: NOT
17652: OR
17653: IFFALSE 17657
// exit ;
17655: GO 17932
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17657: LD_ADDR_VAR 0 2
17661: PUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: LD_VAR 0 2
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: CALL 41827 0 4
17682: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17683: LD_ADDR_VAR 0 5
17687: PUSH
17688: LD_EXP 45
17692: PPUSH
17693: LD_VAR 0 1
17697: PPUSH
17698: CALL 41177 0 2
17702: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17703: LD_EXP 46
17707: PUSH
17708: LD_VAR 0 5
17712: ARRAY
17713: PUSH
17714: LD_EXP 47
17718: LESS
17719: IFFALSE 17908
// begin for i := 1 to vehicles do
17721: LD_ADDR_VAR 0 4
17725: PUSH
17726: DOUBLE
17727: LD_INT 1
17729: DEC
17730: ST_TO_ADDR
17731: LD_VAR 0 2
17735: PUSH
17736: FOR_TO
17737: IFFALSE 17906
// begin if hackTanksCaptured [ index ] = hackLimit then
17739: LD_EXP 46
17743: PUSH
17744: LD_VAR 0 5
17748: ARRAY
17749: PUSH
17750: LD_EXP 47
17754: EQUAL
17755: IFFALSE 17759
// break ;
17757: GO 17906
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17759: LD_ADDR_EXP 49
17763: PUSH
17764: LD_EXP 49
17768: PPUSH
17769: LD_VAR 0 5
17773: PPUSH
17774: LD_EXP 49
17778: PUSH
17779: LD_VAR 0 5
17783: ARRAY
17784: PUSH
17785: LD_INT 1
17787: PLUS
17788: PPUSH
17789: CALL_OW 1
17793: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17794: LD_ADDR_EXP 46
17798: PUSH
17799: LD_EXP 46
17803: PPUSH
17804: LD_VAR 0 5
17808: PUSH
17809: LD_EXP 46
17813: PUSH
17814: LD_VAR 0 5
17818: ARRAY
17819: PUSH
17820: LD_INT 1
17822: PLUS
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PPUSH
17828: LD_VAR 0 2
17832: PUSH
17833: LD_VAR 0 4
17837: ARRAY
17838: PUSH
17839: LD_VAR 0 2
17843: PUSH
17844: LD_VAR 0 4
17848: ARRAY
17849: PPUSH
17850: CALL_OW 255
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PPUSH
17859: CALL 41392 0 3
17863: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17864: LD_VAR 0 2
17868: PUSH
17869: LD_VAR 0 4
17873: ARRAY
17874: PPUSH
17875: LD_VAR 0 1
17879: PPUSH
17880: CALL_OW 255
17884: PPUSH
17885: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17889: LD_VAR 0 2
17893: PUSH
17894: LD_VAR 0 4
17898: ARRAY
17899: PPUSH
17900: CALL_OW 141
// end ;
17904: GO 17736
17906: POP
17907: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_EXP 46
17917: PUSH
17918: LD_VAR 0 5
17922: ARRAY
17923: PUSH
17924: LD_INT 0
17926: PLUS
17927: PPUSH
17928: CALL_OW 505
// end ;
17932: LD_VAR 0 3
17936: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17937: LD_INT 0
17939: PPUSH
17940: PPUSH
17941: PPUSH
17942: PPUSH
// if not hack in hackTanks then
17943: LD_VAR 0 1
17947: PUSH
17948: LD_EXP 45
17952: IN
17953: NOT
17954: IFFALSE 17958
// exit ;
17956: GO 18198
// index := GetElementIndex ( hackTanks , hack ) ;
17958: LD_ADDR_VAR 0 4
17962: PUSH
17963: LD_EXP 45
17967: PPUSH
17968: LD_VAR 0 1
17972: PPUSH
17973: CALL 41177 0 2
17977: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: DOUBLE
17984: LD_EXP 46
17988: PUSH
17989: LD_VAR 0 4
17993: ARRAY
17994: INC
17995: ST_TO_ADDR
17996: LD_INT 1
17998: PUSH
17999: FOR_DOWNTO
18000: IFFALSE 18172
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18002: LD_ADDR_VAR 0 5
18006: PUSH
18007: LD_EXP 46
18011: PUSH
18012: LD_VAR 0 4
18016: ARRAY
18017: PUSH
18018: LD_VAR 0 3
18022: ARRAY
18023: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18024: LD_VAR 0 5
18028: PUSH
18029: LD_INT 1
18031: ARRAY
18032: PPUSH
18033: CALL_OW 302
18037: NOT
18038: PUSH
18039: LD_VAR 0 5
18043: PUSH
18044: LD_INT 1
18046: ARRAY
18047: PPUSH
18048: CALL_OW 255
18052: PUSH
18053: LD_VAR 0 1
18057: PPUSH
18058: CALL_OW 255
18062: NONEQUAL
18063: OR
18064: IFFALSE 18170
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18066: LD_VAR 0 5
18070: PUSH
18071: LD_INT 1
18073: ARRAY
18074: PPUSH
18075: CALL_OW 305
18079: PUSH
18080: LD_VAR 0 5
18084: PUSH
18085: LD_INT 1
18087: ARRAY
18088: PPUSH
18089: CALL_OW 255
18093: PUSH
18094: LD_VAR 0 1
18098: PPUSH
18099: CALL_OW 255
18103: EQUAL
18104: AND
18105: IFFALSE 18129
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18107: LD_VAR 0 5
18111: PUSH
18112: LD_INT 1
18114: ARRAY
18115: PPUSH
18116: LD_VAR 0 5
18120: PUSH
18121: LD_INT 2
18123: ARRAY
18124: PPUSH
18125: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18129: LD_ADDR_EXP 46
18133: PUSH
18134: LD_EXP 46
18138: PPUSH
18139: LD_VAR 0 4
18143: PPUSH
18144: LD_EXP 46
18148: PUSH
18149: LD_VAR 0 4
18153: ARRAY
18154: PPUSH
18155: LD_VAR 0 3
18159: PPUSH
18160: CALL_OW 3
18164: PPUSH
18165: CALL_OW 1
18169: ST_TO_ADDR
// end ; end ;
18170: GO 17999
18172: POP
18173: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18174: LD_VAR 0 1
18178: PPUSH
18179: LD_EXP 46
18183: PUSH
18184: LD_VAR 0 4
18188: ARRAY
18189: PUSH
18190: LD_INT 0
18192: PLUS
18193: PPUSH
18194: CALL_OW 505
// end ;
18198: LD_VAR 0 2
18202: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18203: LD_INT 0
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
// if not hack in hackTanks then
18209: LD_VAR 0 1
18213: PUSH
18214: LD_EXP 45
18218: IN
18219: NOT
18220: IFFALSE 18224
// exit ;
18222: GO 18309
// index := GetElementIndex ( hackTanks , hack ) ;
18224: LD_ADDR_VAR 0 5
18228: PUSH
18229: LD_EXP 45
18233: PPUSH
18234: LD_VAR 0 1
18238: PPUSH
18239: CALL 41177 0 2
18243: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18244: LD_ADDR_VAR 0 4
18248: PUSH
18249: DOUBLE
18250: LD_INT 1
18252: DEC
18253: ST_TO_ADDR
18254: LD_EXP 46
18258: PUSH
18259: LD_VAR 0 5
18263: ARRAY
18264: PUSH
18265: FOR_TO
18266: IFFALSE 18307
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18268: LD_EXP 46
18272: PUSH
18273: LD_VAR 0 5
18277: ARRAY
18278: PUSH
18279: LD_VAR 0 4
18283: ARRAY
18284: PUSH
18285: LD_INT 1
18287: ARRAY
18288: PUSH
18289: LD_VAR 0 2
18293: EQUAL
18294: IFFALSE 18305
// KillUnit ( vehicle ) ;
18296: LD_VAR 0 2
18300: PPUSH
18301: CALL_OW 66
18305: GO 18265
18307: POP
18308: POP
// end ;
18309: LD_VAR 0 3
18313: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18314: LD_EXP 50
18318: NOT
18319: IFFALSE 18354
18321: GO 18323
18323: DISABLE
// begin initMiner := true ;
18324: LD_ADDR_EXP 50
18328: PUSH
18329: LD_INT 1
18331: ST_TO_ADDR
// minersList := [ ] ;
18332: LD_ADDR_EXP 51
18336: PUSH
18337: EMPTY
18338: ST_TO_ADDR
// minerMinesList := [ ] ;
18339: LD_ADDR_EXP 52
18343: PUSH
18344: EMPTY
18345: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18346: LD_ADDR_EXP 53
18350: PUSH
18351: LD_INT 5
18353: ST_TO_ADDR
// end ;
18354: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18355: LD_EXP 50
18359: PUSH
18360: LD_INT 34
18362: PUSH
18363: LD_INT 81
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PPUSH
18370: CALL_OW 69
18374: AND
18375: IFFALSE 18836
18377: GO 18379
18379: DISABLE
18380: LD_INT 0
18382: PPUSH
18383: PPUSH
18384: PPUSH
18385: PPUSH
// begin enable ;
18386: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18387: LD_ADDR_VAR 0 1
18391: PUSH
18392: LD_INT 34
18394: PUSH
18395: LD_INT 81
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 69
18406: PUSH
18407: FOR_IN
18408: IFFALSE 18480
// begin if not i in minersList then
18410: LD_VAR 0 1
18414: PUSH
18415: LD_EXP 51
18419: IN
18420: NOT
18421: IFFALSE 18478
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18423: LD_ADDR_EXP 51
18427: PUSH
18428: LD_EXP 51
18432: PPUSH
18433: LD_EXP 51
18437: PUSH
18438: LD_INT 1
18440: PLUS
18441: PPUSH
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 1
18451: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18452: LD_ADDR_EXP 52
18456: PUSH
18457: LD_EXP 52
18461: PPUSH
18462: LD_EXP 52
18466: PUSH
18467: LD_INT 1
18469: PLUS
18470: PPUSH
18471: EMPTY
18472: PPUSH
18473: CALL_OW 1
18477: ST_TO_ADDR
// end end ;
18478: GO 18407
18480: POP
18481: POP
// for i := minerMinesList downto 1 do
18482: LD_ADDR_VAR 0 1
18486: PUSH
18487: DOUBLE
18488: LD_EXP 52
18492: INC
18493: ST_TO_ADDR
18494: LD_INT 1
18496: PUSH
18497: FOR_DOWNTO
18498: IFFALSE 18834
// begin if IsLive ( minersList [ i ] ) then
18500: LD_EXP 51
18504: PUSH
18505: LD_VAR 0 1
18509: ARRAY
18510: PPUSH
18511: CALL_OW 300
18515: IFFALSE 18543
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18517: LD_EXP 51
18521: PUSH
18522: LD_VAR 0 1
18526: ARRAY
18527: PPUSH
18528: LD_EXP 52
18532: PUSH
18533: LD_VAR 0 1
18537: ARRAY
18538: PPUSH
18539: CALL_OW 505
// if not minerMinesList [ i ] then
18543: LD_EXP 52
18547: PUSH
18548: LD_VAR 0 1
18552: ARRAY
18553: NOT
18554: IFFALSE 18558
// continue ;
18556: GO 18497
// for j := minerMinesList [ i ] downto 1 do
18558: LD_ADDR_VAR 0 2
18562: PUSH
18563: DOUBLE
18564: LD_EXP 52
18568: PUSH
18569: LD_VAR 0 1
18573: ARRAY
18574: INC
18575: ST_TO_ADDR
18576: LD_INT 1
18578: PUSH
18579: FOR_DOWNTO
18580: IFFALSE 18830
// begin side := GetSide ( minersList [ i ] ) ;
18582: LD_ADDR_VAR 0 3
18586: PUSH
18587: LD_EXP 51
18591: PUSH
18592: LD_VAR 0 1
18596: ARRAY
18597: PPUSH
18598: CALL_OW 255
18602: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18603: LD_ADDR_VAR 0 4
18607: PUSH
18608: LD_EXP 52
18612: PUSH
18613: LD_VAR 0 1
18617: ARRAY
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: PUSH
18625: LD_INT 1
18627: ARRAY
18628: PPUSH
18629: LD_EXP 52
18633: PUSH
18634: LD_VAR 0 1
18638: ARRAY
18639: PUSH
18640: LD_VAR 0 2
18644: ARRAY
18645: PUSH
18646: LD_INT 2
18648: ARRAY
18649: PPUSH
18650: CALL_OW 428
18654: ST_TO_ADDR
// if not tmp then
18655: LD_VAR 0 4
18659: NOT
18660: IFFALSE 18664
// continue ;
18662: GO 18579
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18664: LD_VAR 0 4
18668: PUSH
18669: LD_INT 81
18671: PUSH
18672: LD_VAR 0 3
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PPUSH
18681: CALL_OW 69
18685: IN
18686: PUSH
18687: LD_EXP 52
18691: PUSH
18692: LD_VAR 0 1
18696: ARRAY
18697: PUSH
18698: LD_VAR 0 2
18702: ARRAY
18703: PUSH
18704: LD_INT 1
18706: ARRAY
18707: PPUSH
18708: LD_EXP 52
18712: PUSH
18713: LD_VAR 0 1
18717: ARRAY
18718: PUSH
18719: LD_VAR 0 2
18723: ARRAY
18724: PUSH
18725: LD_INT 2
18727: ARRAY
18728: PPUSH
18729: CALL_OW 458
18733: AND
18734: IFFALSE 18828
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18736: LD_EXP 52
18740: PUSH
18741: LD_VAR 0 1
18745: ARRAY
18746: PUSH
18747: LD_VAR 0 2
18751: ARRAY
18752: PUSH
18753: LD_INT 1
18755: ARRAY
18756: PPUSH
18757: LD_EXP 52
18761: PUSH
18762: LD_VAR 0 1
18766: ARRAY
18767: PUSH
18768: LD_VAR 0 2
18772: ARRAY
18773: PUSH
18774: LD_INT 2
18776: ARRAY
18777: PPUSH
18778: LD_VAR 0 3
18782: PPUSH
18783: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18787: LD_ADDR_EXP 52
18791: PUSH
18792: LD_EXP 52
18796: PPUSH
18797: LD_VAR 0 1
18801: PPUSH
18802: LD_EXP 52
18806: PUSH
18807: LD_VAR 0 1
18811: ARRAY
18812: PPUSH
18813: LD_VAR 0 2
18817: PPUSH
18818: CALL_OW 3
18822: PPUSH
18823: CALL_OW 1
18827: ST_TO_ADDR
// end ; end ;
18828: GO 18579
18830: POP
18831: POP
// end ;
18832: GO 18497
18834: POP
18835: POP
// end ;
18836: PPOPN 4
18838: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18839: LD_INT 0
18841: PPUSH
18842: PPUSH
// result := false ;
18843: LD_ADDR_VAR 0 4
18847: PUSH
18848: LD_INT 0
18850: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18851: LD_VAR 0 1
18855: PPUSH
18856: CALL_OW 264
18860: PUSH
18861: LD_INT 81
18863: EQUAL
18864: NOT
18865: IFFALSE 18869
// exit ;
18867: GO 19109
// index := GetElementIndex ( minersList , unit ) ;
18869: LD_ADDR_VAR 0 5
18873: PUSH
18874: LD_EXP 51
18878: PPUSH
18879: LD_VAR 0 1
18883: PPUSH
18884: CALL 41177 0 2
18888: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18889: LD_EXP 52
18893: PUSH
18894: LD_VAR 0 5
18898: ARRAY
18899: PUSH
18900: LD_EXP 53
18904: GREATEREQUAL
18905: IFFALSE 18909
// exit ;
18907: GO 19109
// ComMoveXY ( unit , x , y ) ;
18909: LD_VAR 0 1
18913: PPUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: LD_VAR 0 3
18923: PPUSH
18924: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18928: LD_INT 35
18930: PPUSH
18931: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18935: LD_VAR 0 1
18939: PPUSH
18940: LD_VAR 0 2
18944: PPUSH
18945: LD_VAR 0 3
18949: PPUSH
18950: CALL 72938 0 3
18954: NOT
18955: PUSH
18956: LD_VAR 0 1
18960: PPUSH
18961: CALL_OW 314
18965: AND
18966: IFFALSE 18970
// exit ;
18968: GO 19109
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18970: LD_VAR 0 2
18974: PPUSH
18975: LD_VAR 0 3
18979: PPUSH
18980: CALL_OW 428
18984: PUSH
18985: LD_VAR 0 1
18989: EQUAL
18990: PUSH
18991: LD_VAR 0 1
18995: PPUSH
18996: CALL_OW 314
19000: NOT
19001: AND
19002: IFFALSE 18928
// PlaySoundXY ( x , y , PlantMine ) ;
19004: LD_VAR 0 2
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: LD_STRING PlantMine
19016: PPUSH
19017: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19021: LD_VAR 0 2
19025: PPUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: LD_VAR 0 1
19035: PPUSH
19036: CALL_OW 255
19040: PPUSH
19041: LD_INT 0
19043: PPUSH
19044: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19048: LD_ADDR_EXP 52
19052: PUSH
19053: LD_EXP 52
19057: PPUSH
19058: LD_VAR 0 5
19062: PUSH
19063: LD_EXP 52
19067: PUSH
19068: LD_VAR 0 5
19072: ARRAY
19073: PUSH
19074: LD_INT 1
19076: PLUS
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PPUSH
19082: LD_VAR 0 2
19086: PUSH
19087: LD_VAR 0 3
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PPUSH
19096: CALL 41392 0 3
19100: ST_TO_ADDR
// result := true ;
19101: LD_ADDR_VAR 0 4
19105: PUSH
19106: LD_INT 1
19108: ST_TO_ADDR
// end ;
19109: LD_VAR 0 4
19113: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19114: LD_INT 0
19116: PPUSH
19117: PPUSH
19118: PPUSH
// if not unit in minersList then
19119: LD_VAR 0 1
19123: PUSH
19124: LD_EXP 51
19128: IN
19129: NOT
19130: IFFALSE 19134
// exit ;
19132: GO 19526
// index := GetElementIndex ( minersList , unit ) ;
19134: LD_ADDR_VAR 0 6
19138: PUSH
19139: LD_EXP 51
19143: PPUSH
19144: LD_VAR 0 1
19148: PPUSH
19149: CALL 41177 0 2
19153: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19154: LD_ADDR_VAR 0 5
19158: PUSH
19159: DOUBLE
19160: LD_EXP 52
19164: PUSH
19165: LD_VAR 0 6
19169: ARRAY
19170: INC
19171: ST_TO_ADDR
19172: LD_INT 1
19174: PUSH
19175: FOR_DOWNTO
19176: IFFALSE 19337
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19178: LD_EXP 52
19182: PUSH
19183: LD_VAR 0 6
19187: ARRAY
19188: PUSH
19189: LD_VAR 0 5
19193: ARRAY
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: PUSH
19199: LD_VAR 0 2
19203: EQUAL
19204: PUSH
19205: LD_EXP 52
19209: PUSH
19210: LD_VAR 0 6
19214: ARRAY
19215: PUSH
19216: LD_VAR 0 5
19220: ARRAY
19221: PUSH
19222: LD_INT 2
19224: ARRAY
19225: PUSH
19226: LD_VAR 0 3
19230: EQUAL
19231: AND
19232: IFFALSE 19335
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19234: LD_EXP 52
19238: PUSH
19239: LD_VAR 0 6
19243: ARRAY
19244: PUSH
19245: LD_VAR 0 5
19249: ARRAY
19250: PUSH
19251: LD_INT 1
19253: ARRAY
19254: PPUSH
19255: LD_EXP 52
19259: PUSH
19260: LD_VAR 0 6
19264: ARRAY
19265: PUSH
19266: LD_VAR 0 5
19270: ARRAY
19271: PUSH
19272: LD_INT 2
19274: ARRAY
19275: PPUSH
19276: LD_VAR 0 1
19280: PPUSH
19281: CALL_OW 255
19285: PPUSH
19286: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19290: LD_ADDR_EXP 52
19294: PUSH
19295: LD_EXP 52
19299: PPUSH
19300: LD_VAR 0 6
19304: PPUSH
19305: LD_EXP 52
19309: PUSH
19310: LD_VAR 0 6
19314: ARRAY
19315: PPUSH
19316: LD_VAR 0 5
19320: PPUSH
19321: CALL_OW 3
19325: PPUSH
19326: CALL_OW 1
19330: ST_TO_ADDR
// exit ;
19331: POP
19332: POP
19333: GO 19526
// end ; end ;
19335: GO 19175
19337: POP
19338: POP
// for i := minerMinesList [ index ] downto 1 do
19339: LD_ADDR_VAR 0 5
19343: PUSH
19344: DOUBLE
19345: LD_EXP 52
19349: PUSH
19350: LD_VAR 0 6
19354: ARRAY
19355: INC
19356: ST_TO_ADDR
19357: LD_INT 1
19359: PUSH
19360: FOR_DOWNTO
19361: IFFALSE 19524
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19363: LD_EXP 52
19367: PUSH
19368: LD_VAR 0 6
19372: ARRAY
19373: PUSH
19374: LD_VAR 0 5
19378: ARRAY
19379: PUSH
19380: LD_INT 1
19382: ARRAY
19383: PPUSH
19384: LD_EXP 52
19388: PUSH
19389: LD_VAR 0 6
19393: ARRAY
19394: PUSH
19395: LD_VAR 0 5
19399: ARRAY
19400: PUSH
19401: LD_INT 2
19403: ARRAY
19404: PPUSH
19405: LD_VAR 0 2
19409: PPUSH
19410: LD_VAR 0 3
19414: PPUSH
19415: CALL_OW 298
19419: PUSH
19420: LD_INT 6
19422: LESS
19423: IFFALSE 19522
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19425: LD_EXP 52
19429: PUSH
19430: LD_VAR 0 6
19434: ARRAY
19435: PUSH
19436: LD_VAR 0 5
19440: ARRAY
19441: PUSH
19442: LD_INT 1
19444: ARRAY
19445: PPUSH
19446: LD_EXP 52
19450: PUSH
19451: LD_VAR 0 6
19455: ARRAY
19456: PUSH
19457: LD_VAR 0 5
19461: ARRAY
19462: PUSH
19463: LD_INT 2
19465: ARRAY
19466: PPUSH
19467: LD_VAR 0 1
19471: PPUSH
19472: CALL_OW 255
19476: PPUSH
19477: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19481: LD_ADDR_EXP 52
19485: PUSH
19486: LD_EXP 52
19490: PPUSH
19491: LD_VAR 0 6
19495: PPUSH
19496: LD_EXP 52
19500: PUSH
19501: LD_VAR 0 6
19505: ARRAY
19506: PPUSH
19507: LD_VAR 0 5
19511: PPUSH
19512: CALL_OW 3
19516: PPUSH
19517: CALL_OW 1
19521: ST_TO_ADDR
// end ; end ;
19522: GO 19360
19524: POP
19525: POP
// end ;
19526: LD_VAR 0 4
19530: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19531: LD_INT 0
19533: PPUSH
19534: PPUSH
19535: PPUSH
19536: PPUSH
19537: PPUSH
19538: PPUSH
19539: PPUSH
19540: PPUSH
19541: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19542: LD_VAR 0 1
19546: PPUSH
19547: CALL_OW 264
19551: PUSH
19552: LD_INT 81
19554: EQUAL
19555: NOT
19556: PUSH
19557: LD_VAR 0 1
19561: PUSH
19562: LD_EXP 51
19566: IN
19567: NOT
19568: OR
19569: IFFALSE 19573
// exit ;
19571: GO 19895
// index := GetElementIndex ( minersList , unit ) ;
19573: LD_ADDR_VAR 0 6
19577: PUSH
19578: LD_EXP 51
19582: PPUSH
19583: LD_VAR 0 1
19587: PPUSH
19588: CALL 41177 0 2
19592: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19593: LD_ADDR_VAR 0 8
19597: PUSH
19598: LD_EXP 53
19602: PUSH
19603: LD_EXP 52
19607: PUSH
19608: LD_VAR 0 6
19612: ARRAY
19613: MINUS
19614: ST_TO_ADDR
// if not minesFreeAmount then
19615: LD_VAR 0 8
19619: NOT
19620: IFFALSE 19624
// exit ;
19622: GO 19895
// tmp := [ ] ;
19624: LD_ADDR_VAR 0 7
19628: PUSH
19629: EMPTY
19630: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19631: LD_ADDR_VAR 0 5
19635: PUSH
19636: DOUBLE
19637: LD_INT 1
19639: DEC
19640: ST_TO_ADDR
19641: LD_VAR 0 8
19645: PUSH
19646: FOR_TO
19647: IFFALSE 19842
// begin _d := rand ( 0 , 5 ) ;
19649: LD_ADDR_VAR 0 11
19653: PUSH
19654: LD_INT 0
19656: PPUSH
19657: LD_INT 5
19659: PPUSH
19660: CALL_OW 12
19664: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19665: LD_ADDR_VAR 0 12
19669: PUSH
19670: LD_INT 2
19672: PPUSH
19673: LD_INT 6
19675: PPUSH
19676: CALL_OW 12
19680: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19681: LD_ADDR_VAR 0 9
19685: PUSH
19686: LD_VAR 0 2
19690: PPUSH
19691: LD_VAR 0 11
19695: PPUSH
19696: LD_VAR 0 12
19700: PPUSH
19701: CALL_OW 272
19705: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19706: LD_ADDR_VAR 0 10
19710: PUSH
19711: LD_VAR 0 3
19715: PPUSH
19716: LD_VAR 0 11
19720: PPUSH
19721: LD_VAR 0 12
19725: PPUSH
19726: CALL_OW 273
19730: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19731: LD_VAR 0 9
19735: PPUSH
19736: LD_VAR 0 10
19740: PPUSH
19741: CALL_OW 488
19745: PUSH
19746: LD_VAR 0 9
19750: PUSH
19751: LD_VAR 0 10
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_VAR 0 7
19764: IN
19765: NOT
19766: AND
19767: PUSH
19768: LD_VAR 0 9
19772: PPUSH
19773: LD_VAR 0 10
19777: PPUSH
19778: CALL_OW 458
19782: NOT
19783: AND
19784: IFFALSE 19826
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19786: LD_ADDR_VAR 0 7
19790: PUSH
19791: LD_VAR 0 7
19795: PPUSH
19796: LD_VAR 0 7
19800: PUSH
19801: LD_INT 1
19803: PLUS
19804: PPUSH
19805: LD_VAR 0 9
19809: PUSH
19810: LD_VAR 0 10
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PPUSH
19819: CALL_OW 1
19823: ST_TO_ADDR
19824: GO 19840
// i := i - 1 ;
19826: LD_ADDR_VAR 0 5
19830: PUSH
19831: LD_VAR 0 5
19835: PUSH
19836: LD_INT 1
19838: MINUS
19839: ST_TO_ADDR
// end ;
19840: GO 19646
19842: POP
19843: POP
// for i in tmp do
19844: LD_ADDR_VAR 0 5
19848: PUSH
19849: LD_VAR 0 7
19853: PUSH
19854: FOR_IN
19855: IFFALSE 19893
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19857: LD_VAR 0 1
19861: PPUSH
19862: LD_VAR 0 5
19866: PUSH
19867: LD_INT 1
19869: ARRAY
19870: PPUSH
19871: LD_VAR 0 5
19875: PUSH
19876: LD_INT 2
19878: ARRAY
19879: PPUSH
19880: CALL 18839 0 3
19884: NOT
19885: IFFALSE 19891
// exit ;
19887: POP
19888: POP
19889: GO 19895
19891: GO 19854
19893: POP
19894: POP
// end ;
19895: LD_VAR 0 4
19899: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
19900: LD_INT 0
19902: PPUSH
19903: PPUSH
19904: PPUSH
19905: PPUSH
19906: PPUSH
19907: PPUSH
19908: PPUSH
19909: PPUSH
19910: PPUSH
// if GetClass ( unit ) <> class_sniper then
19911: LD_VAR 0 1
19915: PPUSH
19916: CALL_OW 257
19920: PUSH
19921: LD_INT 5
19923: NONEQUAL
19924: IFFALSE 19928
// exit ;
19926: GO 20394
// dist := 8 ;
19928: LD_ADDR_VAR 0 5
19932: PUSH
19933: LD_INT 8
19935: ST_TO_ADDR
// viewRange := 12 ;
19936: LD_ADDR_VAR 0 8
19940: PUSH
19941: LD_INT 12
19943: ST_TO_ADDR
// side := GetSide ( unit ) ;
19944: LD_ADDR_VAR 0 6
19948: PUSH
19949: LD_VAR 0 1
19953: PPUSH
19954: CALL_OW 255
19958: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19959: LD_INT 61
19961: PPUSH
19962: LD_VAR 0 6
19966: PPUSH
19967: CALL_OW 321
19971: PUSH
19972: LD_INT 2
19974: EQUAL
19975: IFFALSE 19985
// viewRange := 16 ;
19977: LD_ADDR_VAR 0 8
19981: PUSH
19982: LD_INT 16
19984: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19985: LD_VAR 0 1
19989: PPUSH
19990: LD_VAR 0 2
19994: PPUSH
19995: LD_VAR 0 3
19999: PPUSH
20000: CALL_OW 297
20004: PUSH
20005: LD_VAR 0 5
20009: GREATER
20010: IFFALSE 20089
// begin ComMoveXY ( unit , x , y ) ;
20012: LD_VAR 0 1
20016: PPUSH
20017: LD_VAR 0 2
20021: PPUSH
20022: LD_VAR 0 3
20026: PPUSH
20027: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20031: LD_INT 35
20033: PPUSH
20034: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20038: LD_VAR 0 1
20042: PPUSH
20043: LD_VAR 0 2
20047: PPUSH
20048: LD_VAR 0 3
20052: PPUSH
20053: CALL 72938 0 3
20057: NOT
20058: IFFALSE 20062
// exit ;
20060: GO 20394
// until GetDistUnitXY ( unit , x , y ) < dist ;
20062: LD_VAR 0 1
20066: PPUSH
20067: LD_VAR 0 2
20071: PPUSH
20072: LD_VAR 0 3
20076: PPUSH
20077: CALL_OW 297
20081: PUSH
20082: LD_VAR 0 5
20086: LESS
20087: IFFALSE 20031
// end ; ComTurnXY ( unit , x , y ) ;
20089: LD_VAR 0 1
20093: PPUSH
20094: LD_VAR 0 2
20098: PPUSH
20099: LD_VAR 0 3
20103: PPUSH
20104: CALL_OW 118
// repeat if Multiplayer then
20108: LD_OWVAR 4
20112: IFFALSE 20123
// wait ( 35 ) else
20114: LD_INT 35
20116: PPUSH
20117: CALL_OW 67
20121: GO 20130
// wait ( 5 ) ;
20123: LD_INT 5
20125: PPUSH
20126: CALL_OW 67
// _d := GetDir ( unit ) ;
20130: LD_ADDR_VAR 0 11
20134: PUSH
20135: LD_VAR 0 1
20139: PPUSH
20140: CALL_OW 254
20144: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
20145: LD_ADDR_VAR 0 7
20149: PUSH
20150: LD_VAR 0 1
20154: PPUSH
20155: CALL_OW 250
20159: PPUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 251
20169: PPUSH
20170: LD_VAR 0 2
20174: PPUSH
20175: LD_VAR 0 3
20179: PPUSH
20180: CALL 75546 0 4
20184: ST_TO_ADDR
// until dir = _d ;
20185: LD_VAR 0 7
20189: PUSH
20190: LD_VAR 0 11
20194: EQUAL
20195: IFFALSE 20108
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
20197: LD_ADDR_VAR 0 9
20201: PUSH
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL_OW 250
20211: PPUSH
20212: LD_VAR 0 7
20216: PPUSH
20217: LD_VAR 0 5
20221: PPUSH
20222: CALL_OW 272
20226: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
20227: LD_ADDR_VAR 0 10
20231: PUSH
20232: LD_VAR 0 1
20236: PPUSH
20237: CALL_OW 251
20241: PPUSH
20242: LD_VAR 0 7
20246: PPUSH
20247: LD_VAR 0 5
20251: PPUSH
20252: CALL_OW 273
20256: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20257: LD_VAR 0 9
20261: PPUSH
20262: LD_VAR 0 10
20266: PPUSH
20267: CALL_OW 488
20271: NOT
20272: IFFALSE 20276
// exit ;
20274: GO 20394
// ComAnimCustom ( unit , 1 ) ;
20276: LD_VAR 0 1
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 592
// p := 0 ;
20288: LD_ADDR_VAR 0 12
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20296: LD_VAR 0 9
20300: PPUSH
20301: LD_VAR 0 10
20305: PPUSH
20306: LD_VAR 0 6
20310: PPUSH
20311: LD_VAR 0 8
20315: PPUSH
20316: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
20320: LD_INT 35
20322: PPUSH
20323: CALL_OW 67
// p := Inc ( p ) ;
20327: LD_ADDR_VAR 0 12
20331: PUSH
20332: LD_VAR 0 12
20336: PPUSH
20337: CALL 75502 0 1
20341: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
20342: LD_VAR 0 12
20346: PUSH
20347: LD_INT 3
20349: EQUAL
20350: PUSH
20351: LD_VAR 0 1
20355: PPUSH
20356: CALL_OW 302
20360: NOT
20361: OR
20362: PUSH
20363: LD_VAR 0 1
20367: PPUSH
20368: CALL_OW 301
20372: OR
20373: IFFALSE 20320
// RemoveSeeing ( _x , _y , side ) ;
20375: LD_VAR 0 9
20379: PPUSH
20380: LD_VAR 0 10
20384: PPUSH
20385: LD_VAR 0 6
20389: PPUSH
20390: CALL_OW 331
// end ; end_of_file
20394: LD_VAR 0 4
20398: RET
// export globalGameSaveCounter ; every 0 0$1 do
20399: GO 20401
20401: DISABLE
// begin enable ;
20402: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20403: LD_STRING updateTimer(
20405: PUSH
20406: LD_OWVAR 1
20410: STR
20411: PUSH
20412: LD_STRING );
20414: STR
20415: PPUSH
20416: CALL_OW 559
// end ;
20420: END
// every 0 0$1 do
20421: GO 20423
20423: DISABLE
// begin globalGameSaveCounter := 0 ;
20424: LD_ADDR_EXP 54
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20432: LD_STRING setGameSaveCounter(0)
20434: PPUSH
20435: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20439: LD_STRING initStreamRollete();
20441: PPUSH
20442: CALL_OW 559
// InitStreamMode ;
20446: CALL 21789 0 0
// DefineStreamItems ( false ) ;
20450: LD_INT 0
20452: PPUSH
20453: CALL 22253 0 1
// end ;
20457: END
// export function SOS_MapStart ( ) ; begin
20458: LD_INT 0
20460: PPUSH
// if streamModeActive then
20461: LD_EXP 55
20465: IFFALSE 20474
// DefineStreamItems ( true ) ;
20467: LD_INT 1
20469: PPUSH
20470: CALL 22253 0 1
// UpdateLuaVariables ( ) ;
20474: CALL 20491 0 0
// UpdateFactoryWaypoints ( ) ;
20478: CALL 35255 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20482: CALL 35507 0 0
// end ;
20486: LD_VAR 0 1
20490: RET
// function UpdateLuaVariables ( ) ; begin
20491: LD_INT 0
20493: PPUSH
// if globalGameSaveCounter then
20494: LD_EXP 54
20498: IFFALSE 20532
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20500: LD_ADDR_EXP 54
20504: PUSH
20505: LD_EXP 54
20509: PPUSH
20510: CALL 75502 0 1
20514: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20515: LD_STRING setGameSaveCounter(
20517: PUSH
20518: LD_EXP 54
20522: STR
20523: PUSH
20524: LD_STRING )
20526: STR
20527: PPUSH
20528: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20532: LD_STRING setGameDifficulty(
20534: PUSH
20535: LD_OWVAR 67
20539: STR
20540: PUSH
20541: LD_STRING )
20543: STR
20544: PPUSH
20545: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20549: LD_STRING displayDifficulty(
20551: PUSH
20552: LD_OWVAR 67
20556: STR
20557: PUSH
20558: LD_STRING )
20560: STR
20561: PPUSH
20562: CALL_OW 559
// end ;
20566: LD_VAR 0 1
20570: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20571: LD_INT 0
20573: PPUSH
// if p2 = stream_mode then
20574: LD_VAR 0 2
20578: PUSH
20579: LD_INT 100
20581: EQUAL
20582: IFFALSE 21585
// begin if not StreamModeActive then
20584: LD_EXP 55
20588: NOT
20589: IFFALSE 20599
// StreamModeActive := true ;
20591: LD_ADDR_EXP 55
20595: PUSH
20596: LD_INT 1
20598: ST_TO_ADDR
// if p3 = 0 then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 0
20606: EQUAL
20607: IFFALSE 20613
// InitStreamMode ;
20609: CALL 21789 0 0
// if p3 = 1 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 1
20620: EQUAL
20621: IFFALSE 20631
// sRocket := true ;
20623: LD_ADDR_EXP 60
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 2 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 2
20638: EQUAL
20639: IFFALSE 20649
// sSpeed := true ;
20641: LD_ADDR_EXP 59
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 3 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 3
20656: EQUAL
20657: IFFALSE 20667
// sEngine := true ;
20659: LD_ADDR_EXP 61
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 4 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 4
20674: EQUAL
20675: IFFALSE 20685
// sSpec := true ;
20677: LD_ADDR_EXP 58
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 5 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 5
20692: EQUAL
20693: IFFALSE 20703
// sLevel := true ;
20695: LD_ADDR_EXP 62
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 6 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 6
20710: EQUAL
20711: IFFALSE 20721
// sArmoury := true ;
20713: LD_ADDR_EXP 63
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 7 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 7
20728: EQUAL
20729: IFFALSE 20739
// sRadar := true ;
20731: LD_ADDR_EXP 64
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 8 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 8
20746: EQUAL
20747: IFFALSE 20757
// sBunker := true ;
20749: LD_ADDR_EXP 65
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 9 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 9
20764: EQUAL
20765: IFFALSE 20775
// sHack := true ;
20767: LD_ADDR_EXP 66
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 10 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 10
20782: EQUAL
20783: IFFALSE 20793
// sFire := true ;
20785: LD_ADDR_EXP 67
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 11 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 11
20800: EQUAL
20801: IFFALSE 20811
// sRefresh := true ;
20803: LD_ADDR_EXP 68
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 12 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 12
20818: EQUAL
20819: IFFALSE 20829
// sExp := true ;
20821: LD_ADDR_EXP 69
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 13 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 13
20836: EQUAL
20837: IFFALSE 20847
// sDepot := true ;
20839: LD_ADDR_EXP 70
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 14 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 14
20854: EQUAL
20855: IFFALSE 20865
// sFlag := true ;
20857: LD_ADDR_EXP 71
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 15 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 15
20872: EQUAL
20873: IFFALSE 20883
// sKamikadze := true ;
20875: LD_ADDR_EXP 79
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 16 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 16
20890: EQUAL
20891: IFFALSE 20901
// sTroll := true ;
20893: LD_ADDR_EXP 80
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// if p3 = 17 then
20901: LD_VAR 0 3
20905: PUSH
20906: LD_INT 17
20908: EQUAL
20909: IFFALSE 20919
// sSlow := true ;
20911: LD_ADDR_EXP 81
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// if p3 = 18 then
20919: LD_VAR 0 3
20923: PUSH
20924: LD_INT 18
20926: EQUAL
20927: IFFALSE 20937
// sLack := true ;
20929: LD_ADDR_EXP 82
20933: PUSH
20934: LD_INT 1
20936: ST_TO_ADDR
// if p3 = 19 then
20937: LD_VAR 0 3
20941: PUSH
20942: LD_INT 19
20944: EQUAL
20945: IFFALSE 20955
// sTank := true ;
20947: LD_ADDR_EXP 84
20951: PUSH
20952: LD_INT 1
20954: ST_TO_ADDR
// if p3 = 20 then
20955: LD_VAR 0 3
20959: PUSH
20960: LD_INT 20
20962: EQUAL
20963: IFFALSE 20973
// sRemote := true ;
20965: LD_ADDR_EXP 85
20969: PUSH
20970: LD_INT 1
20972: ST_TO_ADDR
// if p3 = 21 then
20973: LD_VAR 0 3
20977: PUSH
20978: LD_INT 21
20980: EQUAL
20981: IFFALSE 20991
// sPowell := true ;
20983: LD_ADDR_EXP 86
20987: PUSH
20988: LD_INT 1
20990: ST_TO_ADDR
// if p3 = 22 then
20991: LD_VAR 0 3
20995: PUSH
20996: LD_INT 22
20998: EQUAL
20999: IFFALSE 21009
// sTeleport := true ;
21001: LD_ADDR_EXP 89
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// if p3 = 23 then
21009: LD_VAR 0 3
21013: PUSH
21014: LD_INT 23
21016: EQUAL
21017: IFFALSE 21027
// sOilTower := true ;
21019: LD_ADDR_EXP 91
21023: PUSH
21024: LD_INT 1
21026: ST_TO_ADDR
// if p3 = 24 then
21027: LD_VAR 0 3
21031: PUSH
21032: LD_INT 24
21034: EQUAL
21035: IFFALSE 21045
// sShovel := true ;
21037: LD_ADDR_EXP 92
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// if p3 = 25 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 25
21052: EQUAL
21053: IFFALSE 21063
// sSheik := true ;
21055: LD_ADDR_EXP 93
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// if p3 = 26 then
21063: LD_VAR 0 3
21067: PUSH
21068: LD_INT 26
21070: EQUAL
21071: IFFALSE 21081
// sEarthquake := true ;
21073: LD_ADDR_EXP 95
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// if p3 = 27 then
21081: LD_VAR 0 3
21085: PUSH
21086: LD_INT 27
21088: EQUAL
21089: IFFALSE 21099
// sAI := true ;
21091: LD_ADDR_EXP 96
21095: PUSH
21096: LD_INT 1
21098: ST_TO_ADDR
// if p3 = 28 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_INT 28
21106: EQUAL
21107: IFFALSE 21117
// sCargo := true ;
21109: LD_ADDR_EXP 99
21113: PUSH
21114: LD_INT 1
21116: ST_TO_ADDR
// if p3 = 29 then
21117: LD_VAR 0 3
21121: PUSH
21122: LD_INT 29
21124: EQUAL
21125: IFFALSE 21135
// sDLaser := true ;
21127: LD_ADDR_EXP 100
21131: PUSH
21132: LD_INT 1
21134: ST_TO_ADDR
// if p3 = 30 then
21135: LD_VAR 0 3
21139: PUSH
21140: LD_INT 30
21142: EQUAL
21143: IFFALSE 21153
// sExchange := true ;
21145: LD_ADDR_EXP 101
21149: PUSH
21150: LD_INT 1
21152: ST_TO_ADDR
// if p3 = 31 then
21153: LD_VAR 0 3
21157: PUSH
21158: LD_INT 31
21160: EQUAL
21161: IFFALSE 21171
// sFac := true ;
21163: LD_ADDR_EXP 102
21167: PUSH
21168: LD_INT 1
21170: ST_TO_ADDR
// if p3 = 32 then
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 32
21178: EQUAL
21179: IFFALSE 21189
// sPower := true ;
21181: LD_ADDR_EXP 103
21185: PUSH
21186: LD_INT 1
21188: ST_TO_ADDR
// if p3 = 33 then
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 33
21196: EQUAL
21197: IFFALSE 21207
// sRandom := true ;
21199: LD_ADDR_EXP 104
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
// if p3 = 34 then
21207: LD_VAR 0 3
21211: PUSH
21212: LD_INT 34
21214: EQUAL
21215: IFFALSE 21225
// sShield := true ;
21217: LD_ADDR_EXP 105
21221: PUSH
21222: LD_INT 1
21224: ST_TO_ADDR
// if p3 = 35 then
21225: LD_VAR 0 3
21229: PUSH
21230: LD_INT 35
21232: EQUAL
21233: IFFALSE 21243
// sTime := true ;
21235: LD_ADDR_EXP 106
21239: PUSH
21240: LD_INT 1
21242: ST_TO_ADDR
// if p3 = 36 then
21243: LD_VAR 0 3
21247: PUSH
21248: LD_INT 36
21250: EQUAL
21251: IFFALSE 21261
// sTools := true ;
21253: LD_ADDR_EXP 107
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// if p3 = 101 then
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 101
21268: EQUAL
21269: IFFALSE 21279
// sSold := true ;
21271: LD_ADDR_EXP 72
21275: PUSH
21276: LD_INT 1
21278: ST_TO_ADDR
// if p3 = 102 then
21279: LD_VAR 0 3
21283: PUSH
21284: LD_INT 102
21286: EQUAL
21287: IFFALSE 21297
// sDiff := true ;
21289: LD_ADDR_EXP 73
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// if p3 = 103 then
21297: LD_VAR 0 3
21301: PUSH
21302: LD_INT 103
21304: EQUAL
21305: IFFALSE 21315
// sFog := true ;
21307: LD_ADDR_EXP 76
21311: PUSH
21312: LD_INT 1
21314: ST_TO_ADDR
// if p3 = 104 then
21315: LD_VAR 0 3
21319: PUSH
21320: LD_INT 104
21322: EQUAL
21323: IFFALSE 21333
// sReset := true ;
21325: LD_ADDR_EXP 77
21329: PUSH
21330: LD_INT 1
21332: ST_TO_ADDR
// if p3 = 105 then
21333: LD_VAR 0 3
21337: PUSH
21338: LD_INT 105
21340: EQUAL
21341: IFFALSE 21351
// sSun := true ;
21343: LD_ADDR_EXP 78
21347: PUSH
21348: LD_INT 1
21350: ST_TO_ADDR
// if p3 = 106 then
21351: LD_VAR 0 3
21355: PUSH
21356: LD_INT 106
21358: EQUAL
21359: IFFALSE 21369
// sTiger := true ;
21361: LD_ADDR_EXP 74
21365: PUSH
21366: LD_INT 1
21368: ST_TO_ADDR
// if p3 = 107 then
21369: LD_VAR 0 3
21373: PUSH
21374: LD_INT 107
21376: EQUAL
21377: IFFALSE 21387
// sBomb := true ;
21379: LD_ADDR_EXP 75
21383: PUSH
21384: LD_INT 1
21386: ST_TO_ADDR
// if p3 = 108 then
21387: LD_VAR 0 3
21391: PUSH
21392: LD_INT 108
21394: EQUAL
21395: IFFALSE 21405
// sWound := true ;
21397: LD_ADDR_EXP 83
21401: PUSH
21402: LD_INT 1
21404: ST_TO_ADDR
// if p3 = 109 then
21405: LD_VAR 0 3
21409: PUSH
21410: LD_INT 109
21412: EQUAL
21413: IFFALSE 21423
// sBetray := true ;
21415: LD_ADDR_EXP 87
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// if p3 = 110 then
21423: LD_VAR 0 3
21427: PUSH
21428: LD_INT 110
21430: EQUAL
21431: IFFALSE 21441
// sContamin := true ;
21433: LD_ADDR_EXP 88
21437: PUSH
21438: LD_INT 1
21440: ST_TO_ADDR
// if p3 = 111 then
21441: LD_VAR 0 3
21445: PUSH
21446: LD_INT 111
21448: EQUAL
21449: IFFALSE 21459
// sOil := true ;
21451: LD_ADDR_EXP 90
21455: PUSH
21456: LD_INT 1
21458: ST_TO_ADDR
// if p3 = 112 then
21459: LD_VAR 0 3
21463: PUSH
21464: LD_INT 112
21466: EQUAL
21467: IFFALSE 21477
// sStu := true ;
21469: LD_ADDR_EXP 94
21473: PUSH
21474: LD_INT 1
21476: ST_TO_ADDR
// if p3 = 113 then
21477: LD_VAR 0 3
21481: PUSH
21482: LD_INT 113
21484: EQUAL
21485: IFFALSE 21495
// sBazooka := true ;
21487: LD_ADDR_EXP 97
21491: PUSH
21492: LD_INT 1
21494: ST_TO_ADDR
// if p3 = 114 then
21495: LD_VAR 0 3
21499: PUSH
21500: LD_INT 114
21502: EQUAL
21503: IFFALSE 21513
// sMortar := true ;
21505: LD_ADDR_EXP 98
21509: PUSH
21510: LD_INT 1
21512: ST_TO_ADDR
// if p3 = 115 then
21513: LD_VAR 0 3
21517: PUSH
21518: LD_INT 115
21520: EQUAL
21521: IFFALSE 21531
// sRanger := true ;
21523: LD_ADDR_EXP 108
21527: PUSH
21528: LD_INT 1
21530: ST_TO_ADDR
// if p3 = 116 then
21531: LD_VAR 0 3
21535: PUSH
21536: LD_INT 116
21538: EQUAL
21539: IFFALSE 21549
// sComputer := true ;
21541: LD_ADDR_EXP 109
21545: PUSH
21546: LD_INT 1
21548: ST_TO_ADDR
// if p3 = 117 then
21549: LD_VAR 0 3
21553: PUSH
21554: LD_INT 117
21556: EQUAL
21557: IFFALSE 21567
// s30 := true ;
21559: LD_ADDR_EXP 110
21563: PUSH
21564: LD_INT 1
21566: ST_TO_ADDR
// if p3 = 118 then
21567: LD_VAR 0 3
21571: PUSH
21572: LD_INT 118
21574: EQUAL
21575: IFFALSE 21585
// s60 := true ;
21577: LD_ADDR_EXP 111
21581: PUSH
21582: LD_INT 1
21584: ST_TO_ADDR
// end ; if p2 = hack_mode then
21585: LD_VAR 0 2
21589: PUSH
21590: LD_INT 101
21592: EQUAL
21593: IFFALSE 21721
// begin case p3 of 1 :
21595: LD_VAR 0 3
21599: PUSH
21600: LD_INT 1
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21615
21608: POP
// hHackUnlimitedResources ; 2 :
21609: CALL 33868 0 0
21613: GO 21721
21615: LD_INT 2
21617: DOUBLE
21618: EQUAL
21619: IFTRUE 21623
21621: GO 21630
21623: POP
// hHackSetLevel10 ; 3 :
21624: CALL 34001 0 0
21628: GO 21721
21630: LD_INT 3
21632: DOUBLE
21633: EQUAL
21634: IFTRUE 21638
21636: GO 21645
21638: POP
// hHackSetLevel10YourUnits ; 4 :
21639: CALL 34086 0 0
21643: GO 21721
21645: LD_INT 4
21647: DOUBLE
21648: EQUAL
21649: IFTRUE 21653
21651: GO 21660
21653: POP
// hHackInvincible ; 5 :
21654: CALL 34534 0 0
21658: GO 21721
21660: LD_INT 5
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21675
21668: POP
// hHackInvisible ; 6 :
21669: CALL 34645 0 0
21673: GO 21721
21675: LD_INT 6
21677: DOUBLE
21678: EQUAL
21679: IFTRUE 21683
21681: GO 21690
21683: POP
// hHackChangeYourSide ; 7 :
21684: CALL 34702 0 0
21688: GO 21721
21690: LD_INT 7
21692: DOUBLE
21693: EQUAL
21694: IFTRUE 21698
21696: GO 21705
21698: POP
// hHackChangeUnitSide ; 8 :
21699: CALL 34744 0 0
21703: GO 21721
21705: LD_INT 8
21707: DOUBLE
21708: EQUAL
21709: IFTRUE 21713
21711: GO 21720
21713: POP
// hHackFog ; end ;
21714: CALL 34845 0 0
21718: GO 21721
21720: POP
// end ; if p2 = game_save_mode then
21721: LD_VAR 0 2
21725: PUSH
21726: LD_INT 102
21728: EQUAL
21729: IFFALSE 21784
// begin if p3 = 1 then
21731: LD_VAR 0 3
21735: PUSH
21736: LD_INT 1
21738: EQUAL
21739: IFFALSE 21751
// globalGameSaveCounter := p4 ;
21741: LD_ADDR_EXP 54
21745: PUSH
21746: LD_VAR 0 4
21750: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21751: LD_VAR 0 3
21755: PUSH
21756: LD_INT 2
21758: EQUAL
21759: PUSH
21760: LD_EXP 54
21764: AND
21765: IFFALSE 21784
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21767: LD_STRING setGameSaveCounter(
21769: PUSH
21770: LD_EXP 54
21774: STR
21775: PUSH
21776: LD_STRING )
21778: STR
21779: PPUSH
21780: CALL_OW 559
// end ; end ;
21784: LD_VAR 0 7
21788: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21789: LD_INT 0
21791: PPUSH
// streamModeActive := false ;
21792: LD_ADDR_EXP 55
21796: PUSH
21797: LD_INT 0
21799: ST_TO_ADDR
// normalCounter := 36 ;
21800: LD_ADDR_EXP 56
21804: PUSH
21805: LD_INT 36
21807: ST_TO_ADDR
// hardcoreCounter := 18 ;
21808: LD_ADDR_EXP 57
21812: PUSH
21813: LD_INT 18
21815: ST_TO_ADDR
// sRocket := false ;
21816: LD_ADDR_EXP 60
21820: PUSH
21821: LD_INT 0
21823: ST_TO_ADDR
// sSpeed := false ;
21824: LD_ADDR_EXP 59
21828: PUSH
21829: LD_INT 0
21831: ST_TO_ADDR
// sEngine := false ;
21832: LD_ADDR_EXP 61
21836: PUSH
21837: LD_INT 0
21839: ST_TO_ADDR
// sSpec := false ;
21840: LD_ADDR_EXP 58
21844: PUSH
21845: LD_INT 0
21847: ST_TO_ADDR
// sLevel := false ;
21848: LD_ADDR_EXP 62
21852: PUSH
21853: LD_INT 0
21855: ST_TO_ADDR
// sArmoury := false ;
21856: LD_ADDR_EXP 63
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// sRadar := false ;
21864: LD_ADDR_EXP 64
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
// sBunker := false ;
21872: LD_ADDR_EXP 65
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// sHack := false ;
21880: LD_ADDR_EXP 66
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// sFire := false ;
21888: LD_ADDR_EXP 67
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// sRefresh := false ;
21896: LD_ADDR_EXP 68
21900: PUSH
21901: LD_INT 0
21903: ST_TO_ADDR
// sExp := false ;
21904: LD_ADDR_EXP 69
21908: PUSH
21909: LD_INT 0
21911: ST_TO_ADDR
// sDepot := false ;
21912: LD_ADDR_EXP 70
21916: PUSH
21917: LD_INT 0
21919: ST_TO_ADDR
// sFlag := false ;
21920: LD_ADDR_EXP 71
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// sKamikadze := false ;
21928: LD_ADDR_EXP 79
21932: PUSH
21933: LD_INT 0
21935: ST_TO_ADDR
// sTroll := false ;
21936: LD_ADDR_EXP 80
21940: PUSH
21941: LD_INT 0
21943: ST_TO_ADDR
// sSlow := false ;
21944: LD_ADDR_EXP 81
21948: PUSH
21949: LD_INT 0
21951: ST_TO_ADDR
// sLack := false ;
21952: LD_ADDR_EXP 82
21956: PUSH
21957: LD_INT 0
21959: ST_TO_ADDR
// sTank := false ;
21960: LD_ADDR_EXP 84
21964: PUSH
21965: LD_INT 0
21967: ST_TO_ADDR
// sRemote := false ;
21968: LD_ADDR_EXP 85
21972: PUSH
21973: LD_INT 0
21975: ST_TO_ADDR
// sPowell := false ;
21976: LD_ADDR_EXP 86
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
// sTeleport := false ;
21984: LD_ADDR_EXP 89
21988: PUSH
21989: LD_INT 0
21991: ST_TO_ADDR
// sOilTower := false ;
21992: LD_ADDR_EXP 91
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// sShovel := false ;
22000: LD_ADDR_EXP 92
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// sSheik := false ;
22008: LD_ADDR_EXP 93
22012: PUSH
22013: LD_INT 0
22015: ST_TO_ADDR
// sEarthquake := false ;
22016: LD_ADDR_EXP 95
22020: PUSH
22021: LD_INT 0
22023: ST_TO_ADDR
// sAI := false ;
22024: LD_ADDR_EXP 96
22028: PUSH
22029: LD_INT 0
22031: ST_TO_ADDR
// sCargo := false ;
22032: LD_ADDR_EXP 99
22036: PUSH
22037: LD_INT 0
22039: ST_TO_ADDR
// sDLaser := false ;
22040: LD_ADDR_EXP 100
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// sExchange := false ;
22048: LD_ADDR_EXP 101
22052: PUSH
22053: LD_INT 0
22055: ST_TO_ADDR
// sFac := false ;
22056: LD_ADDR_EXP 102
22060: PUSH
22061: LD_INT 0
22063: ST_TO_ADDR
// sPower := false ;
22064: LD_ADDR_EXP 103
22068: PUSH
22069: LD_INT 0
22071: ST_TO_ADDR
// sRandom := false ;
22072: LD_ADDR_EXP 104
22076: PUSH
22077: LD_INT 0
22079: ST_TO_ADDR
// sShield := false ;
22080: LD_ADDR_EXP 105
22084: PUSH
22085: LD_INT 0
22087: ST_TO_ADDR
// sTime := false ;
22088: LD_ADDR_EXP 106
22092: PUSH
22093: LD_INT 0
22095: ST_TO_ADDR
// sTools := false ;
22096: LD_ADDR_EXP 107
22100: PUSH
22101: LD_INT 0
22103: ST_TO_ADDR
// sSold := false ;
22104: LD_ADDR_EXP 72
22108: PUSH
22109: LD_INT 0
22111: ST_TO_ADDR
// sDiff := false ;
22112: LD_ADDR_EXP 73
22116: PUSH
22117: LD_INT 0
22119: ST_TO_ADDR
// sFog := false ;
22120: LD_ADDR_EXP 76
22124: PUSH
22125: LD_INT 0
22127: ST_TO_ADDR
// sReset := false ;
22128: LD_ADDR_EXP 77
22132: PUSH
22133: LD_INT 0
22135: ST_TO_ADDR
// sSun := false ;
22136: LD_ADDR_EXP 78
22140: PUSH
22141: LD_INT 0
22143: ST_TO_ADDR
// sTiger := false ;
22144: LD_ADDR_EXP 74
22148: PUSH
22149: LD_INT 0
22151: ST_TO_ADDR
// sBomb := false ;
22152: LD_ADDR_EXP 75
22156: PUSH
22157: LD_INT 0
22159: ST_TO_ADDR
// sWound := false ;
22160: LD_ADDR_EXP 83
22164: PUSH
22165: LD_INT 0
22167: ST_TO_ADDR
// sBetray := false ;
22168: LD_ADDR_EXP 87
22172: PUSH
22173: LD_INT 0
22175: ST_TO_ADDR
// sContamin := false ;
22176: LD_ADDR_EXP 88
22180: PUSH
22181: LD_INT 0
22183: ST_TO_ADDR
// sOil := false ;
22184: LD_ADDR_EXP 90
22188: PUSH
22189: LD_INT 0
22191: ST_TO_ADDR
// sStu := false ;
22192: LD_ADDR_EXP 94
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
// sBazooka := false ;
22200: LD_ADDR_EXP 97
22204: PUSH
22205: LD_INT 0
22207: ST_TO_ADDR
// sMortar := false ;
22208: LD_ADDR_EXP 98
22212: PUSH
22213: LD_INT 0
22215: ST_TO_ADDR
// sRanger := false ;
22216: LD_ADDR_EXP 108
22220: PUSH
22221: LD_INT 0
22223: ST_TO_ADDR
// sComputer := false ;
22224: LD_ADDR_EXP 109
22228: PUSH
22229: LD_INT 0
22231: ST_TO_ADDR
// s30 := false ;
22232: LD_ADDR_EXP 110
22236: PUSH
22237: LD_INT 0
22239: ST_TO_ADDR
// s60 := false ;
22240: LD_ADDR_EXP 111
22244: PUSH
22245: LD_INT 0
22247: ST_TO_ADDR
// end ;
22248: LD_VAR 0 1
22252: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
22257: PPUSH
22258: PPUSH
22259: PPUSH
22260: PPUSH
22261: PPUSH
// result := [ ] ;
22262: LD_ADDR_VAR 0 2
22266: PUSH
22267: EMPTY
22268: ST_TO_ADDR
// if campaign_id = 1 then
22269: LD_OWVAR 69
22273: PUSH
22274: LD_INT 1
22276: EQUAL
22277: IFFALSE 25443
// begin case mission_number of 1 :
22279: LD_OWVAR 70
22283: PUSH
22284: LD_INT 1
22286: DOUBLE
22287: EQUAL
22288: IFTRUE 22292
22290: GO 22368
22292: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22293: LD_ADDR_VAR 0 2
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 4
22303: PUSH
22304: LD_INT 11
22306: PUSH
22307: LD_INT 12
22309: PUSH
22310: LD_INT 15
22312: PUSH
22313: LD_INT 16
22315: PUSH
22316: LD_INT 22
22318: PUSH
22319: LD_INT 23
22321: PUSH
22322: LD_INT 26
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 101
22338: PUSH
22339: LD_INT 102
22341: PUSH
22342: LD_INT 106
22344: PUSH
22345: LD_INT 116
22347: PUSH
22348: LD_INT 117
22350: PUSH
22351: LD_INT 118
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: ST_TO_ADDR
22366: GO 25441
22368: LD_INT 2
22370: DOUBLE
22371: EQUAL
22372: IFTRUE 22376
22374: GO 22460
22376: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22377: LD_ADDR_VAR 0 2
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 4
22387: PUSH
22388: LD_INT 11
22390: PUSH
22391: LD_INT 12
22393: PUSH
22394: LD_INT 15
22396: PUSH
22397: LD_INT 16
22399: PUSH
22400: LD_INT 22
22402: PUSH
22403: LD_INT 23
22405: PUSH
22406: LD_INT 26
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 101
22422: PUSH
22423: LD_INT 102
22425: PUSH
22426: LD_INT 105
22428: PUSH
22429: LD_INT 106
22431: PUSH
22432: LD_INT 108
22434: PUSH
22435: LD_INT 116
22437: PUSH
22438: LD_INT 117
22440: PUSH
22441: LD_INT 118
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: ST_TO_ADDR
22458: GO 25441
22460: LD_INT 3
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22556
22468: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 4
22479: PUSH
22480: LD_INT 5
22482: PUSH
22483: LD_INT 11
22485: PUSH
22486: LD_INT 12
22488: PUSH
22489: LD_INT 15
22491: PUSH
22492: LD_INT 16
22494: PUSH
22495: LD_INT 22
22497: PUSH
22498: LD_INT 26
22500: PUSH
22501: LD_INT 36
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 101
22518: PUSH
22519: LD_INT 102
22521: PUSH
22522: LD_INT 105
22524: PUSH
22525: LD_INT 106
22527: PUSH
22528: LD_INT 108
22530: PUSH
22531: LD_INT 116
22533: PUSH
22534: LD_INT 117
22536: PUSH
22537: LD_INT 118
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: ST_TO_ADDR
22554: GO 25441
22556: LD_INT 4
22558: DOUBLE
22559: EQUAL
22560: IFTRUE 22564
22562: GO 22660
22564: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22565: LD_ADDR_VAR 0 2
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: LD_INT 4
22575: PUSH
22576: LD_INT 5
22578: PUSH
22579: LD_INT 8
22581: PUSH
22582: LD_INT 11
22584: PUSH
22585: LD_INT 12
22587: PUSH
22588: LD_INT 15
22590: PUSH
22591: LD_INT 16
22593: PUSH
22594: LD_INT 22
22596: PUSH
22597: LD_INT 23
22599: PUSH
22600: LD_INT 26
22602: PUSH
22603: LD_INT 36
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 101
22622: PUSH
22623: LD_INT 102
22625: PUSH
22626: LD_INT 105
22628: PUSH
22629: LD_INT 106
22631: PUSH
22632: LD_INT 108
22634: PUSH
22635: LD_INT 116
22637: PUSH
22638: LD_INT 117
22640: PUSH
22641: LD_INT 118
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: ST_TO_ADDR
22658: GO 25441
22660: LD_INT 5
22662: DOUBLE
22663: EQUAL
22664: IFTRUE 22668
22666: GO 22780
22668: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22669: LD_ADDR_VAR 0 2
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: LD_INT 4
22679: PUSH
22680: LD_INT 5
22682: PUSH
22683: LD_INT 6
22685: PUSH
22686: LD_INT 8
22688: PUSH
22689: LD_INT 11
22691: PUSH
22692: LD_INT 12
22694: PUSH
22695: LD_INT 15
22697: PUSH
22698: LD_INT 16
22700: PUSH
22701: LD_INT 22
22703: PUSH
22704: LD_INT 23
22706: PUSH
22707: LD_INT 25
22709: PUSH
22710: LD_INT 26
22712: PUSH
22713: LD_INT 36
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 101
22734: PUSH
22735: LD_INT 102
22737: PUSH
22738: LD_INT 105
22740: PUSH
22741: LD_INT 106
22743: PUSH
22744: LD_INT 108
22746: PUSH
22747: LD_INT 109
22749: PUSH
22750: LD_INT 112
22752: PUSH
22753: LD_INT 116
22755: PUSH
22756: LD_INT 117
22758: PUSH
22759: LD_INT 118
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: ST_TO_ADDR
22778: GO 25441
22780: LD_INT 6
22782: DOUBLE
22783: EQUAL
22784: IFTRUE 22788
22786: GO 22920
22788: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22789: LD_ADDR_VAR 0 2
22793: PUSH
22794: LD_INT 2
22796: PUSH
22797: LD_INT 4
22799: PUSH
22800: LD_INT 5
22802: PUSH
22803: LD_INT 6
22805: PUSH
22806: LD_INT 8
22808: PUSH
22809: LD_INT 11
22811: PUSH
22812: LD_INT 12
22814: PUSH
22815: LD_INT 15
22817: PUSH
22818: LD_INT 16
22820: PUSH
22821: LD_INT 20
22823: PUSH
22824: LD_INT 21
22826: PUSH
22827: LD_INT 22
22829: PUSH
22830: LD_INT 23
22832: PUSH
22833: LD_INT 25
22835: PUSH
22836: LD_INT 26
22838: PUSH
22839: LD_INT 30
22841: PUSH
22842: LD_INT 31
22844: PUSH
22845: LD_INT 32
22847: PUSH
22848: LD_INT 36
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 101
22874: PUSH
22875: LD_INT 102
22877: PUSH
22878: LD_INT 105
22880: PUSH
22881: LD_INT 106
22883: PUSH
22884: LD_INT 108
22886: PUSH
22887: LD_INT 109
22889: PUSH
22890: LD_INT 112
22892: PUSH
22893: LD_INT 116
22895: PUSH
22896: LD_INT 117
22898: PUSH
22899: LD_INT 118
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: ST_TO_ADDR
22918: GO 25441
22920: LD_INT 7
22922: DOUBLE
22923: EQUAL
22924: IFTRUE 22928
22926: GO 23040
22928: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22929: LD_ADDR_VAR 0 2
22933: PUSH
22934: LD_INT 2
22936: PUSH
22937: LD_INT 4
22939: PUSH
22940: LD_INT 5
22942: PUSH
22943: LD_INT 7
22945: PUSH
22946: LD_INT 11
22948: PUSH
22949: LD_INT 12
22951: PUSH
22952: LD_INT 15
22954: PUSH
22955: LD_INT 16
22957: PUSH
22958: LD_INT 20
22960: PUSH
22961: LD_INT 21
22963: PUSH
22964: LD_INT 22
22966: PUSH
22967: LD_INT 23
22969: PUSH
22970: LD_INT 25
22972: PUSH
22973: LD_INT 26
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 101
22994: PUSH
22995: LD_INT 102
22997: PUSH
22998: LD_INT 103
23000: PUSH
23001: LD_INT 105
23003: PUSH
23004: LD_INT 106
23006: PUSH
23007: LD_INT 108
23009: PUSH
23010: LD_INT 112
23012: PUSH
23013: LD_INT 116
23015: PUSH
23016: LD_INT 117
23018: PUSH
23019: LD_INT 118
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: ST_TO_ADDR
23038: GO 25441
23040: LD_INT 8
23042: DOUBLE
23043: EQUAL
23044: IFTRUE 23048
23046: GO 23188
23048: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23049: LD_ADDR_VAR 0 2
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: LD_INT 4
23059: PUSH
23060: LD_INT 5
23062: PUSH
23063: LD_INT 6
23065: PUSH
23066: LD_INT 7
23068: PUSH
23069: LD_INT 8
23071: PUSH
23072: LD_INT 11
23074: PUSH
23075: LD_INT 12
23077: PUSH
23078: LD_INT 15
23080: PUSH
23081: LD_INT 16
23083: PUSH
23084: LD_INT 20
23086: PUSH
23087: LD_INT 21
23089: PUSH
23090: LD_INT 22
23092: PUSH
23093: LD_INT 23
23095: PUSH
23096: LD_INT 25
23098: PUSH
23099: LD_INT 26
23101: PUSH
23102: LD_INT 30
23104: PUSH
23105: LD_INT 31
23107: PUSH
23108: LD_INT 32
23110: PUSH
23111: LD_INT 36
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 101
23138: PUSH
23139: LD_INT 102
23141: PUSH
23142: LD_INT 103
23144: PUSH
23145: LD_INT 105
23147: PUSH
23148: LD_INT 106
23150: PUSH
23151: LD_INT 108
23153: PUSH
23154: LD_INT 109
23156: PUSH
23157: LD_INT 112
23159: PUSH
23160: LD_INT 116
23162: PUSH
23163: LD_INT 117
23165: PUSH
23166: LD_INT 118
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: ST_TO_ADDR
23186: GO 25441
23188: LD_INT 9
23190: DOUBLE
23191: EQUAL
23192: IFTRUE 23196
23194: GO 23344
23196: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23197: LD_ADDR_VAR 0 2
23201: PUSH
23202: LD_INT 2
23204: PUSH
23205: LD_INT 4
23207: PUSH
23208: LD_INT 5
23210: PUSH
23211: LD_INT 6
23213: PUSH
23214: LD_INT 7
23216: PUSH
23217: LD_INT 8
23219: PUSH
23220: LD_INT 11
23222: PUSH
23223: LD_INT 12
23225: PUSH
23226: LD_INT 15
23228: PUSH
23229: LD_INT 16
23231: PUSH
23232: LD_INT 20
23234: PUSH
23235: LD_INT 21
23237: PUSH
23238: LD_INT 22
23240: PUSH
23241: LD_INT 23
23243: PUSH
23244: LD_INT 25
23246: PUSH
23247: LD_INT 26
23249: PUSH
23250: LD_INT 28
23252: PUSH
23253: LD_INT 30
23255: PUSH
23256: LD_INT 31
23258: PUSH
23259: LD_INT 32
23261: PUSH
23262: LD_INT 36
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 101
23290: PUSH
23291: LD_INT 102
23293: PUSH
23294: LD_INT 103
23296: PUSH
23297: LD_INT 105
23299: PUSH
23300: LD_INT 106
23302: PUSH
23303: LD_INT 108
23305: PUSH
23306: LD_INT 109
23308: PUSH
23309: LD_INT 112
23311: PUSH
23312: LD_INT 114
23314: PUSH
23315: LD_INT 116
23317: PUSH
23318: LD_INT 117
23320: PUSH
23321: LD_INT 118
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: ST_TO_ADDR
23342: GO 25441
23344: LD_INT 10
23346: DOUBLE
23347: EQUAL
23348: IFTRUE 23352
23350: GO 23548
23352: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23353: LD_ADDR_VAR 0 2
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: LD_INT 4
23363: PUSH
23364: LD_INT 5
23366: PUSH
23367: LD_INT 6
23369: PUSH
23370: LD_INT 7
23372: PUSH
23373: LD_INT 8
23375: PUSH
23376: LD_INT 9
23378: PUSH
23379: LD_INT 10
23381: PUSH
23382: LD_INT 11
23384: PUSH
23385: LD_INT 12
23387: PUSH
23388: LD_INT 13
23390: PUSH
23391: LD_INT 14
23393: PUSH
23394: LD_INT 15
23396: PUSH
23397: LD_INT 16
23399: PUSH
23400: LD_INT 17
23402: PUSH
23403: LD_INT 18
23405: PUSH
23406: LD_INT 19
23408: PUSH
23409: LD_INT 20
23411: PUSH
23412: LD_INT 21
23414: PUSH
23415: LD_INT 22
23417: PUSH
23418: LD_INT 23
23420: PUSH
23421: LD_INT 24
23423: PUSH
23424: LD_INT 25
23426: PUSH
23427: LD_INT 26
23429: PUSH
23430: LD_INT 28
23432: PUSH
23433: LD_INT 30
23435: PUSH
23436: LD_INT 31
23438: PUSH
23439: LD_INT 32
23441: PUSH
23442: LD_INT 36
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 101
23478: PUSH
23479: LD_INT 102
23481: PUSH
23482: LD_INT 103
23484: PUSH
23485: LD_INT 104
23487: PUSH
23488: LD_INT 105
23490: PUSH
23491: LD_INT 106
23493: PUSH
23494: LD_INT 107
23496: PUSH
23497: LD_INT 108
23499: PUSH
23500: LD_INT 109
23502: PUSH
23503: LD_INT 110
23505: PUSH
23506: LD_INT 111
23508: PUSH
23509: LD_INT 112
23511: PUSH
23512: LD_INT 114
23514: PUSH
23515: LD_INT 116
23517: PUSH
23518: LD_INT 117
23520: PUSH
23521: LD_INT 118
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: ST_TO_ADDR
23546: GO 25441
23548: LD_INT 11
23550: DOUBLE
23551: EQUAL
23552: IFTRUE 23556
23554: GO 23760
23556: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23557: LD_ADDR_VAR 0 2
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: LD_INT 4
23570: PUSH
23571: LD_INT 5
23573: PUSH
23574: LD_INT 6
23576: PUSH
23577: LD_INT 7
23579: PUSH
23580: LD_INT 8
23582: PUSH
23583: LD_INT 9
23585: PUSH
23586: LD_INT 10
23588: PUSH
23589: LD_INT 11
23591: PUSH
23592: LD_INT 12
23594: PUSH
23595: LD_INT 13
23597: PUSH
23598: LD_INT 14
23600: PUSH
23601: LD_INT 15
23603: PUSH
23604: LD_INT 16
23606: PUSH
23607: LD_INT 17
23609: PUSH
23610: LD_INT 18
23612: PUSH
23613: LD_INT 19
23615: PUSH
23616: LD_INT 20
23618: PUSH
23619: LD_INT 21
23621: PUSH
23622: LD_INT 22
23624: PUSH
23625: LD_INT 23
23627: PUSH
23628: LD_INT 24
23630: PUSH
23631: LD_INT 25
23633: PUSH
23634: LD_INT 26
23636: PUSH
23637: LD_INT 28
23639: PUSH
23640: LD_INT 30
23642: PUSH
23643: LD_INT 31
23645: PUSH
23646: LD_INT 32
23648: PUSH
23649: LD_INT 34
23651: PUSH
23652: LD_INT 36
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 101
23690: PUSH
23691: LD_INT 102
23693: PUSH
23694: LD_INT 103
23696: PUSH
23697: LD_INT 104
23699: PUSH
23700: LD_INT 105
23702: PUSH
23703: LD_INT 106
23705: PUSH
23706: LD_INT 107
23708: PUSH
23709: LD_INT 108
23711: PUSH
23712: LD_INT 109
23714: PUSH
23715: LD_INT 110
23717: PUSH
23718: LD_INT 111
23720: PUSH
23721: LD_INT 112
23723: PUSH
23724: LD_INT 114
23726: PUSH
23727: LD_INT 116
23729: PUSH
23730: LD_INT 117
23732: PUSH
23733: LD_INT 118
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: ST_TO_ADDR
23758: GO 25441
23760: LD_INT 12
23762: DOUBLE
23763: EQUAL
23764: IFTRUE 23768
23766: GO 23988
23768: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23769: LD_ADDR_VAR 0 2
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: LD_INT 2
23779: PUSH
23780: LD_INT 3
23782: PUSH
23783: LD_INT 4
23785: PUSH
23786: LD_INT 5
23788: PUSH
23789: LD_INT 6
23791: PUSH
23792: LD_INT 7
23794: PUSH
23795: LD_INT 8
23797: PUSH
23798: LD_INT 9
23800: PUSH
23801: LD_INT 10
23803: PUSH
23804: LD_INT 11
23806: PUSH
23807: LD_INT 12
23809: PUSH
23810: LD_INT 13
23812: PUSH
23813: LD_INT 14
23815: PUSH
23816: LD_INT 15
23818: PUSH
23819: LD_INT 16
23821: PUSH
23822: LD_INT 17
23824: PUSH
23825: LD_INT 18
23827: PUSH
23828: LD_INT 19
23830: PUSH
23831: LD_INT 20
23833: PUSH
23834: LD_INT 21
23836: PUSH
23837: LD_INT 22
23839: PUSH
23840: LD_INT 23
23842: PUSH
23843: LD_INT 24
23845: PUSH
23846: LD_INT 25
23848: PUSH
23849: LD_INT 26
23851: PUSH
23852: LD_INT 27
23854: PUSH
23855: LD_INT 28
23857: PUSH
23858: LD_INT 30
23860: PUSH
23861: LD_INT 31
23863: PUSH
23864: LD_INT 32
23866: PUSH
23867: LD_INT 33
23869: PUSH
23870: LD_INT 34
23872: PUSH
23873: LD_INT 36
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 101
23914: PUSH
23915: LD_INT 102
23917: PUSH
23918: LD_INT 103
23920: PUSH
23921: LD_INT 104
23923: PUSH
23924: LD_INT 105
23926: PUSH
23927: LD_INT 106
23929: PUSH
23930: LD_INT 107
23932: PUSH
23933: LD_INT 108
23935: PUSH
23936: LD_INT 109
23938: PUSH
23939: LD_INT 110
23941: PUSH
23942: LD_INT 111
23944: PUSH
23945: LD_INT 112
23947: PUSH
23948: LD_INT 113
23950: PUSH
23951: LD_INT 114
23953: PUSH
23954: LD_INT 116
23956: PUSH
23957: LD_INT 117
23959: PUSH
23960: LD_INT 118
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: ST_TO_ADDR
23986: GO 25441
23988: LD_INT 13
23990: DOUBLE
23991: EQUAL
23992: IFTRUE 23996
23994: GO 24204
23996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23997: LD_ADDR_VAR 0 2
24001: PUSH
24002: LD_INT 1
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: LD_INT 3
24010: PUSH
24011: LD_INT 4
24013: PUSH
24014: LD_INT 5
24016: PUSH
24017: LD_INT 8
24019: PUSH
24020: LD_INT 9
24022: PUSH
24023: LD_INT 10
24025: PUSH
24026: LD_INT 11
24028: PUSH
24029: LD_INT 12
24031: PUSH
24032: LD_INT 14
24034: PUSH
24035: LD_INT 15
24037: PUSH
24038: LD_INT 16
24040: PUSH
24041: LD_INT 17
24043: PUSH
24044: LD_INT 18
24046: PUSH
24047: LD_INT 19
24049: PUSH
24050: LD_INT 20
24052: PUSH
24053: LD_INT 21
24055: PUSH
24056: LD_INT 22
24058: PUSH
24059: LD_INT 23
24061: PUSH
24062: LD_INT 24
24064: PUSH
24065: LD_INT 25
24067: PUSH
24068: LD_INT 26
24070: PUSH
24071: LD_INT 27
24073: PUSH
24074: LD_INT 28
24076: PUSH
24077: LD_INT 30
24079: PUSH
24080: LD_INT 31
24082: PUSH
24083: LD_INT 32
24085: PUSH
24086: LD_INT 33
24088: PUSH
24089: LD_INT 34
24091: PUSH
24092: LD_INT 36
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 101
24130: PUSH
24131: LD_INT 102
24133: PUSH
24134: LD_INT 103
24136: PUSH
24137: LD_INT 104
24139: PUSH
24140: LD_INT 105
24142: PUSH
24143: LD_INT 106
24145: PUSH
24146: LD_INT 107
24148: PUSH
24149: LD_INT 108
24151: PUSH
24152: LD_INT 109
24154: PUSH
24155: LD_INT 110
24157: PUSH
24158: LD_INT 111
24160: PUSH
24161: LD_INT 112
24163: PUSH
24164: LD_INT 113
24166: PUSH
24167: LD_INT 114
24169: PUSH
24170: LD_INT 116
24172: PUSH
24173: LD_INT 117
24175: PUSH
24176: LD_INT 118
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: ST_TO_ADDR
24202: GO 25441
24204: LD_INT 14
24206: DOUBLE
24207: EQUAL
24208: IFTRUE 24212
24210: GO 24436
24212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24213: LD_ADDR_VAR 0 2
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: LD_INT 3
24226: PUSH
24227: LD_INT 4
24229: PUSH
24230: LD_INT 5
24232: PUSH
24233: LD_INT 6
24235: PUSH
24236: LD_INT 7
24238: PUSH
24239: LD_INT 8
24241: PUSH
24242: LD_INT 9
24244: PUSH
24245: LD_INT 10
24247: PUSH
24248: LD_INT 11
24250: PUSH
24251: LD_INT 12
24253: PUSH
24254: LD_INT 13
24256: PUSH
24257: LD_INT 14
24259: PUSH
24260: LD_INT 15
24262: PUSH
24263: LD_INT 16
24265: PUSH
24266: LD_INT 17
24268: PUSH
24269: LD_INT 18
24271: PUSH
24272: LD_INT 19
24274: PUSH
24275: LD_INT 20
24277: PUSH
24278: LD_INT 21
24280: PUSH
24281: LD_INT 22
24283: PUSH
24284: LD_INT 23
24286: PUSH
24287: LD_INT 24
24289: PUSH
24290: LD_INT 25
24292: PUSH
24293: LD_INT 26
24295: PUSH
24296: LD_INT 27
24298: PUSH
24299: LD_INT 28
24301: PUSH
24302: LD_INT 29
24304: PUSH
24305: LD_INT 30
24307: PUSH
24308: LD_INT 31
24310: PUSH
24311: LD_INT 32
24313: PUSH
24314: LD_INT 33
24316: PUSH
24317: LD_INT 34
24319: PUSH
24320: LD_INT 36
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 101
24362: PUSH
24363: LD_INT 102
24365: PUSH
24366: LD_INT 103
24368: PUSH
24369: LD_INT 104
24371: PUSH
24372: LD_INT 105
24374: PUSH
24375: LD_INT 106
24377: PUSH
24378: LD_INT 107
24380: PUSH
24381: LD_INT 108
24383: PUSH
24384: LD_INT 109
24386: PUSH
24387: LD_INT 110
24389: PUSH
24390: LD_INT 111
24392: PUSH
24393: LD_INT 112
24395: PUSH
24396: LD_INT 113
24398: PUSH
24399: LD_INT 114
24401: PUSH
24402: LD_INT 116
24404: PUSH
24405: LD_INT 117
24407: PUSH
24408: LD_INT 118
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: ST_TO_ADDR
24434: GO 25441
24436: LD_INT 15
24438: DOUBLE
24439: EQUAL
24440: IFTRUE 24444
24442: GO 24668
24444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24445: LD_ADDR_VAR 0 2
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 2
24455: PUSH
24456: LD_INT 3
24458: PUSH
24459: LD_INT 4
24461: PUSH
24462: LD_INT 5
24464: PUSH
24465: LD_INT 6
24467: PUSH
24468: LD_INT 7
24470: PUSH
24471: LD_INT 8
24473: PUSH
24474: LD_INT 9
24476: PUSH
24477: LD_INT 10
24479: PUSH
24480: LD_INT 11
24482: PUSH
24483: LD_INT 12
24485: PUSH
24486: LD_INT 13
24488: PUSH
24489: LD_INT 14
24491: PUSH
24492: LD_INT 15
24494: PUSH
24495: LD_INT 16
24497: PUSH
24498: LD_INT 17
24500: PUSH
24501: LD_INT 18
24503: PUSH
24504: LD_INT 19
24506: PUSH
24507: LD_INT 20
24509: PUSH
24510: LD_INT 21
24512: PUSH
24513: LD_INT 22
24515: PUSH
24516: LD_INT 23
24518: PUSH
24519: LD_INT 24
24521: PUSH
24522: LD_INT 25
24524: PUSH
24525: LD_INT 26
24527: PUSH
24528: LD_INT 27
24530: PUSH
24531: LD_INT 28
24533: PUSH
24534: LD_INT 29
24536: PUSH
24537: LD_INT 30
24539: PUSH
24540: LD_INT 31
24542: PUSH
24543: LD_INT 32
24545: PUSH
24546: LD_INT 33
24548: PUSH
24549: LD_INT 34
24551: PUSH
24552: LD_INT 36
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 101
24594: PUSH
24595: LD_INT 102
24597: PUSH
24598: LD_INT 103
24600: PUSH
24601: LD_INT 104
24603: PUSH
24604: LD_INT 105
24606: PUSH
24607: LD_INT 106
24609: PUSH
24610: LD_INT 107
24612: PUSH
24613: LD_INT 108
24615: PUSH
24616: LD_INT 109
24618: PUSH
24619: LD_INT 110
24621: PUSH
24622: LD_INT 111
24624: PUSH
24625: LD_INT 112
24627: PUSH
24628: LD_INT 113
24630: PUSH
24631: LD_INT 114
24633: PUSH
24634: LD_INT 116
24636: PUSH
24637: LD_INT 117
24639: PUSH
24640: LD_INT 118
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: ST_TO_ADDR
24666: GO 25441
24668: LD_INT 16
24670: DOUBLE
24671: EQUAL
24672: IFTRUE 24676
24674: GO 24812
24676: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24677: LD_ADDR_VAR 0 2
24681: PUSH
24682: LD_INT 2
24684: PUSH
24685: LD_INT 4
24687: PUSH
24688: LD_INT 5
24690: PUSH
24691: LD_INT 7
24693: PUSH
24694: LD_INT 11
24696: PUSH
24697: LD_INT 12
24699: PUSH
24700: LD_INT 15
24702: PUSH
24703: LD_INT 16
24705: PUSH
24706: LD_INT 20
24708: PUSH
24709: LD_INT 21
24711: PUSH
24712: LD_INT 22
24714: PUSH
24715: LD_INT 23
24717: PUSH
24718: LD_INT 25
24720: PUSH
24721: LD_INT 26
24723: PUSH
24724: LD_INT 30
24726: PUSH
24727: LD_INT 31
24729: PUSH
24730: LD_INT 32
24732: PUSH
24733: LD_INT 33
24735: PUSH
24736: LD_INT 34
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 101
24762: PUSH
24763: LD_INT 102
24765: PUSH
24766: LD_INT 103
24768: PUSH
24769: LD_INT 106
24771: PUSH
24772: LD_INT 108
24774: PUSH
24775: LD_INT 112
24777: PUSH
24778: LD_INT 113
24780: PUSH
24781: LD_INT 114
24783: PUSH
24784: LD_INT 116
24786: PUSH
24787: LD_INT 117
24789: PUSH
24790: LD_INT 118
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: ST_TO_ADDR
24810: GO 25441
24812: LD_INT 17
24814: DOUBLE
24815: EQUAL
24816: IFTRUE 24820
24818: GO 25044
24820: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24821: LD_ADDR_VAR 0 2
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 3
24834: PUSH
24835: LD_INT 4
24837: PUSH
24838: LD_INT 5
24840: PUSH
24841: LD_INT 6
24843: PUSH
24844: LD_INT 7
24846: PUSH
24847: LD_INT 8
24849: PUSH
24850: LD_INT 9
24852: PUSH
24853: LD_INT 10
24855: PUSH
24856: LD_INT 11
24858: PUSH
24859: LD_INT 12
24861: PUSH
24862: LD_INT 13
24864: PUSH
24865: LD_INT 14
24867: PUSH
24868: LD_INT 15
24870: PUSH
24871: LD_INT 16
24873: PUSH
24874: LD_INT 17
24876: PUSH
24877: LD_INT 18
24879: PUSH
24880: LD_INT 19
24882: PUSH
24883: LD_INT 20
24885: PUSH
24886: LD_INT 21
24888: PUSH
24889: LD_INT 22
24891: PUSH
24892: LD_INT 23
24894: PUSH
24895: LD_INT 24
24897: PUSH
24898: LD_INT 25
24900: PUSH
24901: LD_INT 26
24903: PUSH
24904: LD_INT 27
24906: PUSH
24907: LD_INT 28
24909: PUSH
24910: LD_INT 29
24912: PUSH
24913: LD_INT 30
24915: PUSH
24916: LD_INT 31
24918: PUSH
24919: LD_INT 32
24921: PUSH
24922: LD_INT 33
24924: PUSH
24925: LD_INT 34
24927: PUSH
24928: LD_INT 36
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 101
24970: PUSH
24971: LD_INT 102
24973: PUSH
24974: LD_INT 103
24976: PUSH
24977: LD_INT 104
24979: PUSH
24980: LD_INT 105
24982: PUSH
24983: LD_INT 106
24985: PUSH
24986: LD_INT 107
24988: PUSH
24989: LD_INT 108
24991: PUSH
24992: LD_INT 109
24994: PUSH
24995: LD_INT 110
24997: PUSH
24998: LD_INT 111
25000: PUSH
25001: LD_INT 112
25003: PUSH
25004: LD_INT 113
25006: PUSH
25007: LD_INT 114
25009: PUSH
25010: LD_INT 116
25012: PUSH
25013: LD_INT 117
25015: PUSH
25016: LD_INT 118
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: ST_TO_ADDR
25042: GO 25441
25044: LD_INT 18
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25200
25052: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25053: LD_ADDR_VAR 0 2
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: LD_INT 4
25063: PUSH
25064: LD_INT 5
25066: PUSH
25067: LD_INT 7
25069: PUSH
25070: LD_INT 11
25072: PUSH
25073: LD_INT 12
25075: PUSH
25076: LD_INT 15
25078: PUSH
25079: LD_INT 16
25081: PUSH
25082: LD_INT 20
25084: PUSH
25085: LD_INT 21
25087: PUSH
25088: LD_INT 22
25090: PUSH
25091: LD_INT 23
25093: PUSH
25094: LD_INT 25
25096: PUSH
25097: LD_INT 26
25099: PUSH
25100: LD_INT 30
25102: PUSH
25103: LD_INT 31
25105: PUSH
25106: LD_INT 32
25108: PUSH
25109: LD_INT 33
25111: PUSH
25112: LD_INT 34
25114: PUSH
25115: LD_INT 35
25117: PUSH
25118: LD_INT 36
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 101
25146: PUSH
25147: LD_INT 102
25149: PUSH
25150: LD_INT 103
25152: PUSH
25153: LD_INT 106
25155: PUSH
25156: LD_INT 108
25158: PUSH
25159: LD_INT 112
25161: PUSH
25162: LD_INT 113
25164: PUSH
25165: LD_INT 114
25167: PUSH
25168: LD_INT 115
25170: PUSH
25171: LD_INT 116
25173: PUSH
25174: LD_INT 117
25176: PUSH
25177: LD_INT 118
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: ST_TO_ADDR
25198: GO 25441
25200: LD_INT 19
25202: DOUBLE
25203: EQUAL
25204: IFTRUE 25208
25206: GO 25440
25208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25209: LD_ADDR_VAR 0 2
25213: PUSH
25214: LD_INT 1
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: LD_INT 3
25222: PUSH
25223: LD_INT 4
25225: PUSH
25226: LD_INT 5
25228: PUSH
25229: LD_INT 6
25231: PUSH
25232: LD_INT 7
25234: PUSH
25235: LD_INT 8
25237: PUSH
25238: LD_INT 9
25240: PUSH
25241: LD_INT 10
25243: PUSH
25244: LD_INT 11
25246: PUSH
25247: LD_INT 12
25249: PUSH
25250: LD_INT 13
25252: PUSH
25253: LD_INT 14
25255: PUSH
25256: LD_INT 15
25258: PUSH
25259: LD_INT 16
25261: PUSH
25262: LD_INT 17
25264: PUSH
25265: LD_INT 18
25267: PUSH
25268: LD_INT 19
25270: PUSH
25271: LD_INT 20
25273: PUSH
25274: LD_INT 21
25276: PUSH
25277: LD_INT 22
25279: PUSH
25280: LD_INT 23
25282: PUSH
25283: LD_INT 24
25285: PUSH
25286: LD_INT 25
25288: PUSH
25289: LD_INT 26
25291: PUSH
25292: LD_INT 27
25294: PUSH
25295: LD_INT 28
25297: PUSH
25298: LD_INT 29
25300: PUSH
25301: LD_INT 30
25303: PUSH
25304: LD_INT 31
25306: PUSH
25307: LD_INT 32
25309: PUSH
25310: LD_INT 33
25312: PUSH
25313: LD_INT 34
25315: PUSH
25316: LD_INT 35
25318: PUSH
25319: LD_INT 36
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 101
25362: PUSH
25363: LD_INT 102
25365: PUSH
25366: LD_INT 103
25368: PUSH
25369: LD_INT 104
25371: PUSH
25372: LD_INT 105
25374: PUSH
25375: LD_INT 106
25377: PUSH
25378: LD_INT 107
25380: PUSH
25381: LD_INT 108
25383: PUSH
25384: LD_INT 109
25386: PUSH
25387: LD_INT 110
25389: PUSH
25390: LD_INT 111
25392: PUSH
25393: LD_INT 112
25395: PUSH
25396: LD_INT 113
25398: PUSH
25399: LD_INT 114
25401: PUSH
25402: LD_INT 115
25404: PUSH
25405: LD_INT 116
25407: PUSH
25408: LD_INT 117
25410: PUSH
25411: LD_INT 118
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: ST_TO_ADDR
25438: GO 25441
25440: POP
// end else
25441: GO 25672
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25443: LD_ADDR_VAR 0 2
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: LD_INT 3
25456: PUSH
25457: LD_INT 4
25459: PUSH
25460: LD_INT 5
25462: PUSH
25463: LD_INT 6
25465: PUSH
25466: LD_INT 7
25468: PUSH
25469: LD_INT 8
25471: PUSH
25472: LD_INT 9
25474: PUSH
25475: LD_INT 10
25477: PUSH
25478: LD_INT 11
25480: PUSH
25481: LD_INT 12
25483: PUSH
25484: LD_INT 13
25486: PUSH
25487: LD_INT 14
25489: PUSH
25490: LD_INT 15
25492: PUSH
25493: LD_INT 16
25495: PUSH
25496: LD_INT 17
25498: PUSH
25499: LD_INT 18
25501: PUSH
25502: LD_INT 19
25504: PUSH
25505: LD_INT 20
25507: PUSH
25508: LD_INT 21
25510: PUSH
25511: LD_INT 22
25513: PUSH
25514: LD_INT 23
25516: PUSH
25517: LD_INT 24
25519: PUSH
25520: LD_INT 25
25522: PUSH
25523: LD_INT 26
25525: PUSH
25526: LD_INT 27
25528: PUSH
25529: LD_INT 28
25531: PUSH
25532: LD_INT 29
25534: PUSH
25535: LD_INT 30
25537: PUSH
25538: LD_INT 31
25540: PUSH
25541: LD_INT 32
25543: PUSH
25544: LD_INT 33
25546: PUSH
25547: LD_INT 34
25549: PUSH
25550: LD_INT 35
25552: PUSH
25553: LD_INT 36
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 101
25596: PUSH
25597: LD_INT 102
25599: PUSH
25600: LD_INT 103
25602: PUSH
25603: LD_INT 104
25605: PUSH
25606: LD_INT 105
25608: PUSH
25609: LD_INT 106
25611: PUSH
25612: LD_INT 107
25614: PUSH
25615: LD_INT 108
25617: PUSH
25618: LD_INT 109
25620: PUSH
25621: LD_INT 110
25623: PUSH
25624: LD_INT 111
25626: PUSH
25627: LD_INT 112
25629: PUSH
25630: LD_INT 113
25632: PUSH
25633: LD_INT 114
25635: PUSH
25636: LD_INT 115
25638: PUSH
25639: LD_INT 116
25641: PUSH
25642: LD_INT 117
25644: PUSH
25645: LD_INT 118
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: ST_TO_ADDR
// if result then
25672: LD_VAR 0 2
25676: IFFALSE 26462
// begin normal :=  ;
25678: LD_ADDR_VAR 0 5
25682: PUSH
25683: LD_STRING 
25685: ST_TO_ADDR
// hardcore :=  ;
25686: LD_ADDR_VAR 0 6
25690: PUSH
25691: LD_STRING 
25693: ST_TO_ADDR
// active :=  ;
25694: LD_ADDR_VAR 0 7
25698: PUSH
25699: LD_STRING 
25701: ST_TO_ADDR
// for i = 1 to normalCounter do
25702: LD_ADDR_VAR 0 8
25706: PUSH
25707: DOUBLE
25708: LD_INT 1
25710: DEC
25711: ST_TO_ADDR
25712: LD_EXP 56
25716: PUSH
25717: FOR_TO
25718: IFFALSE 25819
// begin tmp := 0 ;
25720: LD_ADDR_VAR 0 3
25724: PUSH
25725: LD_STRING 0
25727: ST_TO_ADDR
// if result [ 1 ] then
25728: LD_VAR 0 2
25732: PUSH
25733: LD_INT 1
25735: ARRAY
25736: IFFALSE 25801
// if result [ 1 ] [ 1 ] = i then
25738: LD_VAR 0 2
25742: PUSH
25743: LD_INT 1
25745: ARRAY
25746: PUSH
25747: LD_INT 1
25749: ARRAY
25750: PUSH
25751: LD_VAR 0 8
25755: EQUAL
25756: IFFALSE 25801
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25758: LD_ADDR_VAR 0 2
25762: PUSH
25763: LD_VAR 0 2
25767: PPUSH
25768: LD_INT 1
25770: PPUSH
25771: LD_VAR 0 2
25775: PUSH
25776: LD_INT 1
25778: ARRAY
25779: PPUSH
25780: LD_INT 1
25782: PPUSH
25783: CALL_OW 3
25787: PPUSH
25788: CALL_OW 1
25792: ST_TO_ADDR
// tmp := 1 ;
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_STRING 1
25800: ST_TO_ADDR
// end ; normal := normal & tmp ;
25801: LD_ADDR_VAR 0 5
25805: PUSH
25806: LD_VAR 0 5
25810: PUSH
25811: LD_VAR 0 3
25815: STR
25816: ST_TO_ADDR
// end ;
25817: GO 25717
25819: POP
25820: POP
// for i = 1 to hardcoreCounter do
25821: LD_ADDR_VAR 0 8
25825: PUSH
25826: DOUBLE
25827: LD_INT 1
25829: DEC
25830: ST_TO_ADDR
25831: LD_EXP 57
25835: PUSH
25836: FOR_TO
25837: IFFALSE 25942
// begin tmp := 0 ;
25839: LD_ADDR_VAR 0 3
25843: PUSH
25844: LD_STRING 0
25846: ST_TO_ADDR
// if result [ 2 ] then
25847: LD_VAR 0 2
25851: PUSH
25852: LD_INT 2
25854: ARRAY
25855: IFFALSE 25924
// if result [ 2 ] [ 1 ] = 100 + i then
25857: LD_VAR 0 2
25861: PUSH
25862: LD_INT 2
25864: ARRAY
25865: PUSH
25866: LD_INT 1
25868: ARRAY
25869: PUSH
25870: LD_INT 100
25872: PUSH
25873: LD_VAR 0 8
25877: PLUS
25878: EQUAL
25879: IFFALSE 25924
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25881: LD_ADDR_VAR 0 2
25885: PUSH
25886: LD_VAR 0 2
25890: PPUSH
25891: LD_INT 2
25893: PPUSH
25894: LD_VAR 0 2
25898: PUSH
25899: LD_INT 2
25901: ARRAY
25902: PPUSH
25903: LD_INT 1
25905: PPUSH
25906: CALL_OW 3
25910: PPUSH
25911: CALL_OW 1
25915: ST_TO_ADDR
// tmp := 1 ;
25916: LD_ADDR_VAR 0 3
25920: PUSH
25921: LD_STRING 1
25923: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25924: LD_ADDR_VAR 0 6
25928: PUSH
25929: LD_VAR 0 6
25933: PUSH
25934: LD_VAR 0 3
25938: STR
25939: ST_TO_ADDR
// end ;
25940: GO 25836
25942: POP
25943: POP
// if isGameLoad then
25944: LD_VAR 0 1
25948: IFFALSE 26423
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25950: LD_ADDR_VAR 0 4
25954: PUSH
25955: LD_EXP 60
25959: PUSH
25960: LD_EXP 59
25964: PUSH
25965: LD_EXP 61
25969: PUSH
25970: LD_EXP 58
25974: PUSH
25975: LD_EXP 62
25979: PUSH
25980: LD_EXP 63
25984: PUSH
25985: LD_EXP 64
25989: PUSH
25990: LD_EXP 65
25994: PUSH
25995: LD_EXP 66
25999: PUSH
26000: LD_EXP 67
26004: PUSH
26005: LD_EXP 68
26009: PUSH
26010: LD_EXP 69
26014: PUSH
26015: LD_EXP 70
26019: PUSH
26020: LD_EXP 71
26024: PUSH
26025: LD_EXP 79
26029: PUSH
26030: LD_EXP 80
26034: PUSH
26035: LD_EXP 81
26039: PUSH
26040: LD_EXP 82
26044: PUSH
26045: LD_EXP 84
26049: PUSH
26050: LD_EXP 85
26054: PUSH
26055: LD_EXP 86
26059: PUSH
26060: LD_EXP 89
26064: PUSH
26065: LD_EXP 91
26069: PUSH
26070: LD_EXP 92
26074: PUSH
26075: LD_EXP 93
26079: PUSH
26080: LD_EXP 95
26084: PUSH
26085: LD_EXP 96
26089: PUSH
26090: LD_EXP 99
26094: PUSH
26095: LD_EXP 100
26099: PUSH
26100: LD_EXP 101
26104: PUSH
26105: LD_EXP 102
26109: PUSH
26110: LD_EXP 103
26114: PUSH
26115: LD_EXP 104
26119: PUSH
26120: LD_EXP 105
26124: PUSH
26125: LD_EXP 106
26129: PUSH
26130: LD_EXP 107
26134: PUSH
26135: LD_EXP 72
26139: PUSH
26140: LD_EXP 73
26144: PUSH
26145: LD_EXP 76
26149: PUSH
26150: LD_EXP 77
26154: PUSH
26155: LD_EXP 78
26159: PUSH
26160: LD_EXP 74
26164: PUSH
26165: LD_EXP 75
26169: PUSH
26170: LD_EXP 83
26174: PUSH
26175: LD_EXP 87
26179: PUSH
26180: LD_EXP 88
26184: PUSH
26185: LD_EXP 90
26189: PUSH
26190: LD_EXP 94
26194: PUSH
26195: LD_EXP 97
26199: PUSH
26200: LD_EXP 98
26204: PUSH
26205: LD_EXP 108
26209: PUSH
26210: LD_EXP 109
26214: PUSH
26215: LD_EXP 110
26219: PUSH
26220: LD_EXP 111
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: ST_TO_ADDR
// tmp :=  ;
26281: LD_ADDR_VAR 0 3
26285: PUSH
26286: LD_STRING 
26288: ST_TO_ADDR
// for i = 1 to normalCounter do
26289: LD_ADDR_VAR 0 8
26293: PUSH
26294: DOUBLE
26295: LD_INT 1
26297: DEC
26298: ST_TO_ADDR
26299: LD_EXP 56
26303: PUSH
26304: FOR_TO
26305: IFFALSE 26341
// begin if flags [ i ] then
26307: LD_VAR 0 4
26311: PUSH
26312: LD_VAR 0 8
26316: ARRAY
26317: IFFALSE 26339
// tmp := tmp & i & ; ;
26319: LD_ADDR_VAR 0 3
26323: PUSH
26324: LD_VAR 0 3
26328: PUSH
26329: LD_VAR 0 8
26333: STR
26334: PUSH
26335: LD_STRING ;
26337: STR
26338: ST_TO_ADDR
// end ;
26339: GO 26304
26341: POP
26342: POP
// for i = 1 to hardcoreCounter do
26343: LD_ADDR_VAR 0 8
26347: PUSH
26348: DOUBLE
26349: LD_INT 1
26351: DEC
26352: ST_TO_ADDR
26353: LD_EXP 57
26357: PUSH
26358: FOR_TO
26359: IFFALSE 26405
// begin if flags [ normalCounter + i ] then
26361: LD_VAR 0 4
26365: PUSH
26366: LD_EXP 56
26370: PUSH
26371: LD_VAR 0 8
26375: PLUS
26376: ARRAY
26377: IFFALSE 26403
// tmp := tmp & ( 100 + i ) & ; ;
26379: LD_ADDR_VAR 0 3
26383: PUSH
26384: LD_VAR 0 3
26388: PUSH
26389: LD_INT 100
26391: PUSH
26392: LD_VAR 0 8
26396: PLUS
26397: STR
26398: PUSH
26399: LD_STRING ;
26401: STR
26402: ST_TO_ADDR
// end ;
26403: GO 26358
26405: POP
26406: POP
// if tmp then
26407: LD_VAR 0 3
26411: IFFALSE 26423
// active := tmp ;
26413: LD_ADDR_VAR 0 7
26417: PUSH
26418: LD_VAR 0 3
26422: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26423: LD_STRING getStreamItemsFromMission("
26425: PUSH
26426: LD_VAR 0 5
26430: STR
26431: PUSH
26432: LD_STRING ","
26434: STR
26435: PUSH
26436: LD_VAR 0 6
26440: STR
26441: PUSH
26442: LD_STRING ","
26444: STR
26445: PUSH
26446: LD_VAR 0 7
26450: STR
26451: PUSH
26452: LD_STRING ")
26454: STR
26455: PPUSH
26456: CALL_OW 559
// end else
26460: GO 26469
// ToLua ( getStreamItemsFromMission("","","") ) ;
26462: LD_STRING getStreamItemsFromMission("","","")
26464: PPUSH
26465: CALL_OW 559
// end ;
26469: LD_VAR 0 2
26473: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26474: LD_EXP 55
26478: PUSH
26479: LD_EXP 60
26483: AND
26484: IFFALSE 26608
26486: GO 26488
26488: DISABLE
26489: LD_INT 0
26491: PPUSH
26492: PPUSH
// begin enable ;
26493: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26494: LD_ADDR_VAR 0 2
26498: PUSH
26499: LD_INT 22
26501: PUSH
26502: LD_OWVAR 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 34
26516: PUSH
26517: LD_INT 7
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 34
26526: PUSH
26527: LD_INT 45
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 34
26536: PUSH
26537: LD_INT 28
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 34
26546: PUSH
26547: LD_INT 47
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PPUSH
26565: CALL_OW 69
26569: ST_TO_ADDR
// if not tmp then
26570: LD_VAR 0 2
26574: NOT
26575: IFFALSE 26579
// exit ;
26577: GO 26608
// for i in tmp do
26579: LD_ADDR_VAR 0 1
26583: PUSH
26584: LD_VAR 0 2
26588: PUSH
26589: FOR_IN
26590: IFFALSE 26606
// begin SetLives ( i , 0 ) ;
26592: LD_VAR 0 1
26596: PPUSH
26597: LD_INT 0
26599: PPUSH
26600: CALL_OW 234
// end ;
26604: GO 26589
26606: POP
26607: POP
// end ;
26608: PPOPN 2
26610: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26611: LD_EXP 55
26615: PUSH
26616: LD_EXP 61
26620: AND
26621: IFFALSE 26705
26623: GO 26625
26625: DISABLE
26626: LD_INT 0
26628: PPUSH
26629: PPUSH
// begin enable ;
26630: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26631: LD_ADDR_VAR 0 2
26635: PUSH
26636: LD_INT 22
26638: PUSH
26639: LD_OWVAR 2
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 32
26650: PUSH
26651: LD_INT 3
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PPUSH
26662: CALL_OW 69
26666: ST_TO_ADDR
// if not tmp then
26667: LD_VAR 0 2
26671: NOT
26672: IFFALSE 26676
// exit ;
26674: GO 26705
// for i in tmp do
26676: LD_ADDR_VAR 0 1
26680: PUSH
26681: LD_VAR 0 2
26685: PUSH
26686: FOR_IN
26687: IFFALSE 26703
// begin SetLives ( i , 0 ) ;
26689: LD_VAR 0 1
26693: PPUSH
26694: LD_INT 0
26696: PPUSH
26697: CALL_OW 234
// end ;
26701: GO 26686
26703: POP
26704: POP
// end ;
26705: PPOPN 2
26707: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26708: LD_EXP 55
26712: PUSH
26713: LD_EXP 58
26717: AND
26718: IFFALSE 26811
26720: GO 26722
26722: DISABLE
26723: LD_INT 0
26725: PPUSH
// begin enable ;
26726: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26727: LD_ADDR_VAR 0 1
26731: PUSH
26732: LD_INT 22
26734: PUSH
26735: LD_OWVAR 2
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: LD_INT 25
26749: PUSH
26750: LD_INT 5
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 25
26759: PUSH
26760: LD_INT 9
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 25
26769: PUSH
26770: LD_INT 8
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PPUSH
26787: CALL_OW 69
26791: PUSH
26792: FOR_IN
26793: IFFALSE 26809
// begin SetClass ( i , 1 ) ;
26795: LD_VAR 0 1
26799: PPUSH
26800: LD_INT 1
26802: PPUSH
26803: CALL_OW 336
// end ;
26807: GO 26792
26809: POP
26810: POP
// end ;
26811: PPOPN 1
26813: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26814: LD_EXP 55
26818: PUSH
26819: LD_EXP 59
26823: AND
26824: PUSH
26825: LD_OWVAR 65
26829: PUSH
26830: LD_INT 7
26832: LESS
26833: AND
26834: IFFALSE 26848
26836: GO 26838
26838: DISABLE
// begin enable ;
26839: ENABLE
// game_speed := 7 ;
26840: LD_ADDR_OWVAR 65
26844: PUSH
26845: LD_INT 7
26847: ST_TO_ADDR
// end ;
26848: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26849: LD_EXP 55
26853: PUSH
26854: LD_EXP 62
26858: AND
26859: IFFALSE 27061
26861: GO 26863
26863: DISABLE
26864: LD_INT 0
26866: PPUSH
26867: PPUSH
26868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26869: LD_ADDR_VAR 0 3
26873: PUSH
26874: LD_INT 81
26876: PUSH
26877: LD_OWVAR 2
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 21
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PPUSH
26900: CALL_OW 69
26904: ST_TO_ADDR
// if not tmp then
26905: LD_VAR 0 3
26909: NOT
26910: IFFALSE 26914
// exit ;
26912: GO 27061
// if tmp > 5 then
26914: LD_VAR 0 3
26918: PUSH
26919: LD_INT 5
26921: GREATER
26922: IFFALSE 26934
// k := 5 else
26924: LD_ADDR_VAR 0 2
26928: PUSH
26929: LD_INT 5
26931: ST_TO_ADDR
26932: GO 26944
// k := tmp ;
26934: LD_ADDR_VAR 0 2
26938: PUSH
26939: LD_VAR 0 3
26943: ST_TO_ADDR
// for i := 1 to k do
26944: LD_ADDR_VAR 0 1
26948: PUSH
26949: DOUBLE
26950: LD_INT 1
26952: DEC
26953: ST_TO_ADDR
26954: LD_VAR 0 2
26958: PUSH
26959: FOR_TO
26960: IFFALSE 27059
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26962: LD_VAR 0 3
26966: PUSH
26967: LD_VAR 0 1
26971: ARRAY
26972: PPUSH
26973: LD_VAR 0 1
26977: PUSH
26978: LD_INT 4
26980: MOD
26981: PUSH
26982: LD_INT 1
26984: PLUS
26985: PPUSH
26986: CALL_OW 259
26990: PUSH
26991: LD_INT 10
26993: LESS
26994: IFFALSE 27057
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26996: LD_VAR 0 3
27000: PUSH
27001: LD_VAR 0 1
27005: ARRAY
27006: PPUSH
27007: LD_VAR 0 1
27011: PUSH
27012: LD_INT 4
27014: MOD
27015: PUSH
27016: LD_INT 1
27018: PLUS
27019: PPUSH
27020: LD_VAR 0 3
27024: PUSH
27025: LD_VAR 0 1
27029: ARRAY
27030: PPUSH
27031: LD_VAR 0 1
27035: PUSH
27036: LD_INT 4
27038: MOD
27039: PUSH
27040: LD_INT 1
27042: PLUS
27043: PPUSH
27044: CALL_OW 259
27048: PUSH
27049: LD_INT 1
27051: PLUS
27052: PPUSH
27053: CALL_OW 237
27057: GO 26959
27059: POP
27060: POP
// end ;
27061: PPOPN 3
27063: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27064: LD_EXP 55
27068: PUSH
27069: LD_EXP 63
27073: AND
27074: IFFALSE 27094
27076: GO 27078
27078: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27079: LD_INT 4
27081: PPUSH
27082: LD_OWVAR 2
27086: PPUSH
27087: LD_INT 0
27089: PPUSH
27090: CALL_OW 324
27094: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27095: LD_EXP 55
27099: PUSH
27100: LD_EXP 92
27104: AND
27105: IFFALSE 27125
27107: GO 27109
27109: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27110: LD_INT 19
27112: PPUSH
27113: LD_OWVAR 2
27117: PPUSH
27118: LD_INT 0
27120: PPUSH
27121: CALL_OW 324
27125: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27126: LD_EXP 55
27130: PUSH
27131: LD_EXP 64
27135: AND
27136: IFFALSE 27238
27138: GO 27140
27140: DISABLE
27141: LD_INT 0
27143: PPUSH
27144: PPUSH
// begin enable ;
27145: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27146: LD_ADDR_VAR 0 2
27150: PUSH
27151: LD_INT 22
27153: PUSH
27154: LD_OWVAR 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: LD_INT 34
27168: PUSH
27169: LD_INT 11
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 34
27178: PUSH
27179: LD_INT 30
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PPUSH
27195: CALL_OW 69
27199: ST_TO_ADDR
// if not tmp then
27200: LD_VAR 0 2
27204: NOT
27205: IFFALSE 27209
// exit ;
27207: GO 27238
// for i in tmp do
27209: LD_ADDR_VAR 0 1
27213: PUSH
27214: LD_VAR 0 2
27218: PUSH
27219: FOR_IN
27220: IFFALSE 27236
// begin SetLives ( i , 0 ) ;
27222: LD_VAR 0 1
27226: PPUSH
27227: LD_INT 0
27229: PPUSH
27230: CALL_OW 234
// end ;
27234: GO 27219
27236: POP
27237: POP
// end ;
27238: PPOPN 2
27240: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27241: LD_EXP 55
27245: PUSH
27246: LD_EXP 65
27250: AND
27251: IFFALSE 27271
27253: GO 27255
27255: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27256: LD_INT 32
27258: PPUSH
27259: LD_OWVAR 2
27263: PPUSH
27264: LD_INT 0
27266: PPUSH
27267: CALL_OW 324
27271: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27272: LD_EXP 55
27276: PUSH
27277: LD_EXP 66
27281: AND
27282: IFFALSE 27463
27284: GO 27286
27286: DISABLE
27287: LD_INT 0
27289: PPUSH
27290: PPUSH
27291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27292: LD_ADDR_VAR 0 2
27296: PUSH
27297: LD_INT 22
27299: PUSH
27300: LD_OWVAR 2
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 33
27311: PUSH
27312: LD_INT 3
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PPUSH
27323: CALL_OW 69
27327: ST_TO_ADDR
// if not tmp then
27328: LD_VAR 0 2
27332: NOT
27333: IFFALSE 27337
// exit ;
27335: GO 27463
// side := 0 ;
27337: LD_ADDR_VAR 0 3
27341: PUSH
27342: LD_INT 0
27344: ST_TO_ADDR
// for i := 1 to 8 do
27345: LD_ADDR_VAR 0 1
27349: PUSH
27350: DOUBLE
27351: LD_INT 1
27353: DEC
27354: ST_TO_ADDR
27355: LD_INT 8
27357: PUSH
27358: FOR_TO
27359: IFFALSE 27407
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27361: LD_OWVAR 2
27365: PUSH
27366: LD_VAR 0 1
27370: NONEQUAL
27371: PUSH
27372: LD_OWVAR 2
27376: PPUSH
27377: LD_VAR 0 1
27381: PPUSH
27382: CALL_OW 81
27386: PUSH
27387: LD_INT 2
27389: EQUAL
27390: AND
27391: IFFALSE 27405
// begin side := i ;
27393: LD_ADDR_VAR 0 3
27397: PUSH
27398: LD_VAR 0 1
27402: ST_TO_ADDR
// break ;
27403: GO 27407
// end ;
27405: GO 27358
27407: POP
27408: POP
// if not side then
27409: LD_VAR 0 3
27413: NOT
27414: IFFALSE 27418
// exit ;
27416: GO 27463
// for i := 1 to tmp do
27418: LD_ADDR_VAR 0 1
27422: PUSH
27423: DOUBLE
27424: LD_INT 1
27426: DEC
27427: ST_TO_ADDR
27428: LD_VAR 0 2
27432: PUSH
27433: FOR_TO
27434: IFFALSE 27461
// if Prob ( 60 ) then
27436: LD_INT 60
27438: PPUSH
27439: CALL_OW 13
27443: IFFALSE 27459
// SetSide ( i , side ) ;
27445: LD_VAR 0 1
27449: PPUSH
27450: LD_VAR 0 3
27454: PPUSH
27455: CALL_OW 235
27459: GO 27433
27461: POP
27462: POP
// end ;
27463: PPOPN 3
27465: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27466: LD_EXP 55
27470: PUSH
27471: LD_EXP 68
27475: AND
27476: IFFALSE 27595
27478: GO 27480
27480: DISABLE
27481: LD_INT 0
27483: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27484: LD_ADDR_VAR 0 1
27488: PUSH
27489: LD_INT 22
27491: PUSH
27492: LD_OWVAR 2
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 21
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 3
27513: PUSH
27514: LD_INT 23
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: LIST
27532: PPUSH
27533: CALL_OW 69
27537: PUSH
27538: FOR_IN
27539: IFFALSE 27593
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27541: LD_VAR 0 1
27545: PPUSH
27546: CALL_OW 257
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 3
27559: PUSH
27560: LD_INT 4
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: IN
27569: IFFALSE 27591
// SetClass ( un , rand ( 1 , 4 ) ) ;
27571: LD_VAR 0 1
27575: PPUSH
27576: LD_INT 1
27578: PPUSH
27579: LD_INT 4
27581: PPUSH
27582: CALL_OW 12
27586: PPUSH
27587: CALL_OW 336
27591: GO 27538
27593: POP
27594: POP
// end ;
27595: PPOPN 1
27597: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27598: LD_EXP 55
27602: PUSH
27603: LD_EXP 67
27607: AND
27608: IFFALSE 27687
27610: GO 27612
27612: DISABLE
27613: LD_INT 0
27615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27616: LD_ADDR_VAR 0 1
27620: PUSH
27621: LD_INT 22
27623: PUSH
27624: LD_OWVAR 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 21
27635: PUSH
27636: LD_INT 3
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PPUSH
27647: CALL_OW 69
27651: ST_TO_ADDR
// if not tmp then
27652: LD_VAR 0 1
27656: NOT
27657: IFFALSE 27661
// exit ;
27659: GO 27687
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27661: LD_VAR 0 1
27665: PUSH
27666: LD_INT 1
27668: PPUSH
27669: LD_VAR 0 1
27673: PPUSH
27674: CALL_OW 12
27678: ARRAY
27679: PPUSH
27680: LD_INT 100
27682: PPUSH
27683: CALL_OW 234
// end ;
27687: PPOPN 1
27689: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27690: LD_EXP 55
27694: PUSH
27695: LD_EXP 69
27699: AND
27700: IFFALSE 27798
27702: GO 27704
27704: DISABLE
27705: LD_INT 0
27707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27708: LD_ADDR_VAR 0 1
27712: PUSH
27713: LD_INT 22
27715: PUSH
27716: LD_OWVAR 2
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 21
27727: PUSH
27728: LD_INT 1
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PPUSH
27739: CALL_OW 69
27743: ST_TO_ADDR
// if not tmp then
27744: LD_VAR 0 1
27748: NOT
27749: IFFALSE 27753
// exit ;
27751: GO 27798
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27753: LD_VAR 0 1
27757: PUSH
27758: LD_INT 1
27760: PPUSH
27761: LD_VAR 0 1
27765: PPUSH
27766: CALL_OW 12
27770: ARRAY
27771: PPUSH
27772: LD_INT 1
27774: PPUSH
27775: LD_INT 4
27777: PPUSH
27778: CALL_OW 12
27782: PPUSH
27783: LD_INT 3000
27785: PPUSH
27786: LD_INT 9000
27788: PPUSH
27789: CALL_OW 12
27793: PPUSH
27794: CALL_OW 492
// end ;
27798: PPOPN 1
27800: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27801: LD_EXP 55
27805: PUSH
27806: LD_EXP 70
27810: AND
27811: IFFALSE 27831
27813: GO 27815
27815: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27816: LD_INT 1
27818: PPUSH
27819: LD_OWVAR 2
27823: PPUSH
27824: LD_INT 0
27826: PPUSH
27827: CALL_OW 324
27831: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27832: LD_EXP 55
27836: PUSH
27837: LD_EXP 71
27841: AND
27842: IFFALSE 27925
27844: GO 27846
27846: DISABLE
27847: LD_INT 0
27849: PPUSH
27850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27851: LD_ADDR_VAR 0 2
27855: PUSH
27856: LD_INT 22
27858: PUSH
27859: LD_OWVAR 2
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 21
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PPUSH
27882: CALL_OW 69
27886: ST_TO_ADDR
// if not tmp then
27887: LD_VAR 0 2
27891: NOT
27892: IFFALSE 27896
// exit ;
27894: GO 27925
// for i in tmp do
27896: LD_ADDR_VAR 0 1
27900: PUSH
27901: LD_VAR 0 2
27905: PUSH
27906: FOR_IN
27907: IFFALSE 27923
// SetBLevel ( i , 10 ) ;
27909: LD_VAR 0 1
27913: PPUSH
27914: LD_INT 10
27916: PPUSH
27917: CALL_OW 241
27921: GO 27906
27923: POP
27924: POP
// end ;
27925: PPOPN 2
27927: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27928: LD_EXP 55
27932: PUSH
27933: LD_EXP 72
27937: AND
27938: IFFALSE 28049
27940: GO 27942
27942: DISABLE
27943: LD_INT 0
27945: PPUSH
27946: PPUSH
27947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27948: LD_ADDR_VAR 0 3
27952: PUSH
27953: LD_INT 22
27955: PUSH
27956: LD_OWVAR 2
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 25
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PPUSH
27979: CALL_OW 69
27983: ST_TO_ADDR
// if not tmp then
27984: LD_VAR 0 3
27988: NOT
27989: IFFALSE 27993
// exit ;
27991: GO 28049
// un := tmp [ rand ( 1 , tmp ) ] ;
27993: LD_ADDR_VAR 0 2
27997: PUSH
27998: LD_VAR 0 3
28002: PUSH
28003: LD_INT 1
28005: PPUSH
28006: LD_VAR 0 3
28010: PPUSH
28011: CALL_OW 12
28015: ARRAY
28016: ST_TO_ADDR
// if Crawls ( un ) then
28017: LD_VAR 0 2
28021: PPUSH
28022: CALL_OW 318
28026: IFFALSE 28037
// ComWalk ( un ) ;
28028: LD_VAR 0 2
28032: PPUSH
28033: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28037: LD_VAR 0 2
28041: PPUSH
28042: LD_INT 5
28044: PPUSH
28045: CALL_OW 336
// end ;
28049: PPOPN 3
28051: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28052: LD_EXP 55
28056: PUSH
28057: LD_EXP 73
28061: AND
28062: PUSH
28063: LD_OWVAR 67
28067: PUSH
28068: LD_INT 4
28070: LESS
28071: AND
28072: IFFALSE 28091
28074: GO 28076
28076: DISABLE
// begin Difficulty := Difficulty + 1 ;
28077: LD_ADDR_OWVAR 67
28081: PUSH
28082: LD_OWVAR 67
28086: PUSH
28087: LD_INT 1
28089: PLUS
28090: ST_TO_ADDR
// end ;
28091: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28092: LD_EXP 55
28096: PUSH
28097: LD_EXP 74
28101: AND
28102: IFFALSE 28205
28104: GO 28106
28106: DISABLE
28107: LD_INT 0
28109: PPUSH
// begin for i := 1 to 5 do
28110: LD_ADDR_VAR 0 1
28114: PUSH
28115: DOUBLE
28116: LD_INT 1
28118: DEC
28119: ST_TO_ADDR
28120: LD_INT 5
28122: PUSH
28123: FOR_TO
28124: IFFALSE 28203
// begin uc_nation := nation_nature ;
28126: LD_ADDR_OWVAR 21
28130: PUSH
28131: LD_INT 0
28133: ST_TO_ADDR
// uc_side := 0 ;
28134: LD_ADDR_OWVAR 20
28138: PUSH
28139: LD_INT 0
28141: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28142: LD_ADDR_OWVAR 29
28146: PUSH
28147: LD_INT 12
28149: PUSH
28150: LD_INT 12
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: ST_TO_ADDR
// hc_agressivity := 20 ;
28157: LD_ADDR_OWVAR 35
28161: PUSH
28162: LD_INT 20
28164: ST_TO_ADDR
// hc_class := class_tiger ;
28165: LD_ADDR_OWVAR 28
28169: PUSH
28170: LD_INT 14
28172: ST_TO_ADDR
// hc_gallery :=  ;
28173: LD_ADDR_OWVAR 33
28177: PUSH
28178: LD_STRING 
28180: ST_TO_ADDR
// hc_name :=  ;
28181: LD_ADDR_OWVAR 26
28185: PUSH
28186: LD_STRING 
28188: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28189: CALL_OW 44
28193: PPUSH
28194: LD_INT 0
28196: PPUSH
28197: CALL_OW 51
// end ;
28201: GO 28123
28203: POP
28204: POP
// end ;
28205: PPOPN 1
28207: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28208: LD_EXP 55
28212: PUSH
28213: LD_EXP 75
28217: AND
28218: IFFALSE 28227
28220: GO 28222
28222: DISABLE
// StreamSibBomb ;
28223: CALL 28228 0 0
28227: END
// export function StreamSibBomb ; var i , x , y ; begin
28228: LD_INT 0
28230: PPUSH
28231: PPUSH
28232: PPUSH
28233: PPUSH
// result := false ;
28234: LD_ADDR_VAR 0 1
28238: PUSH
28239: LD_INT 0
28241: ST_TO_ADDR
// for i := 1 to 16 do
28242: LD_ADDR_VAR 0 2
28246: PUSH
28247: DOUBLE
28248: LD_INT 1
28250: DEC
28251: ST_TO_ADDR
28252: LD_INT 16
28254: PUSH
28255: FOR_TO
28256: IFFALSE 28455
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28258: LD_ADDR_VAR 0 3
28262: PUSH
28263: LD_INT 10
28265: PUSH
28266: LD_INT 20
28268: PUSH
28269: LD_INT 30
28271: PUSH
28272: LD_INT 40
28274: PUSH
28275: LD_INT 50
28277: PUSH
28278: LD_INT 60
28280: PUSH
28281: LD_INT 70
28283: PUSH
28284: LD_INT 80
28286: PUSH
28287: LD_INT 90
28289: PUSH
28290: LD_INT 100
28292: PUSH
28293: LD_INT 110
28295: PUSH
28296: LD_INT 120
28298: PUSH
28299: LD_INT 130
28301: PUSH
28302: LD_INT 140
28304: PUSH
28305: LD_INT 150
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: PPUSH
28328: LD_INT 15
28330: PPUSH
28331: CALL_OW 12
28335: ARRAY
28336: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28337: LD_ADDR_VAR 0 4
28341: PUSH
28342: LD_INT 10
28344: PUSH
28345: LD_INT 20
28347: PUSH
28348: LD_INT 30
28350: PUSH
28351: LD_INT 40
28353: PUSH
28354: LD_INT 50
28356: PUSH
28357: LD_INT 60
28359: PUSH
28360: LD_INT 70
28362: PUSH
28363: LD_INT 80
28365: PUSH
28366: LD_INT 90
28368: PUSH
28369: LD_INT 100
28371: PUSH
28372: LD_INT 110
28374: PUSH
28375: LD_INT 120
28377: PUSH
28378: LD_INT 130
28380: PUSH
28381: LD_INT 140
28383: PUSH
28384: LD_INT 150
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: PPUSH
28407: LD_INT 15
28409: PPUSH
28410: CALL_OW 12
28414: ARRAY
28415: ST_TO_ADDR
// if ValidHex ( x , y ) then
28416: LD_VAR 0 3
28420: PPUSH
28421: LD_VAR 0 4
28425: PPUSH
28426: CALL_OW 488
28430: IFFALSE 28453
// begin result := [ x , y ] ;
28432: LD_ADDR_VAR 0 1
28436: PUSH
28437: LD_VAR 0 3
28441: PUSH
28442: LD_VAR 0 4
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: ST_TO_ADDR
// break ;
28451: GO 28455
// end ; end ;
28453: GO 28255
28455: POP
28456: POP
// if result then
28457: LD_VAR 0 1
28461: IFFALSE 28521
// begin ToLua ( playSibBomb() ) ;
28463: LD_STRING playSibBomb()
28465: PPUSH
28466: CALL_OW 559
// wait ( 0 0$14 ) ;
28470: LD_INT 490
28472: PPUSH
28473: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28477: LD_VAR 0 1
28481: PUSH
28482: LD_INT 1
28484: ARRAY
28485: PPUSH
28486: LD_VAR 0 1
28490: PUSH
28491: LD_INT 2
28493: ARRAY
28494: PPUSH
28495: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28499: LD_VAR 0 1
28503: PUSH
28504: LD_INT 1
28506: ARRAY
28507: PPUSH
28508: LD_VAR 0 1
28512: PUSH
28513: LD_INT 2
28515: ARRAY
28516: PPUSH
28517: CALL_OW 429
// end ; end ;
28521: LD_VAR 0 1
28525: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28526: LD_EXP 55
28530: PUSH
28531: LD_EXP 77
28535: AND
28536: IFFALSE 28548
28538: GO 28540
28540: DISABLE
// YouLost (  ) ;
28541: LD_STRING 
28543: PPUSH
28544: CALL_OW 104
28548: END
// every 0 0$1 trigger StreamModeActive and sFog do
28549: LD_EXP 55
28553: PUSH
28554: LD_EXP 76
28558: AND
28559: IFFALSE 28573
28561: GO 28563
28563: DISABLE
// FogOff ( your_side ) ;
28564: LD_OWVAR 2
28568: PPUSH
28569: CALL_OW 344
28573: END
// every 0 0$1 trigger StreamModeActive and sSun do
28574: LD_EXP 55
28578: PUSH
28579: LD_EXP 78
28583: AND
28584: IFFALSE 28612
28586: GO 28588
28588: DISABLE
// begin solar_recharge_percent := 0 ;
28589: LD_ADDR_OWVAR 79
28593: PUSH
28594: LD_INT 0
28596: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28597: LD_INT 10500
28599: PPUSH
28600: CALL_OW 67
// solar_recharge_percent := 100 ;
28604: LD_ADDR_OWVAR 79
28608: PUSH
28609: LD_INT 100
28611: ST_TO_ADDR
// end ;
28612: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28613: LD_EXP 55
28617: PUSH
28618: LD_EXP 79
28622: AND
28623: IFFALSE 28862
28625: GO 28627
28627: DISABLE
28628: LD_INT 0
28630: PPUSH
28631: PPUSH
28632: PPUSH
// begin tmp := [ ] ;
28633: LD_ADDR_VAR 0 3
28637: PUSH
28638: EMPTY
28639: ST_TO_ADDR
// for i := 1 to 6 do
28640: LD_ADDR_VAR 0 1
28644: PUSH
28645: DOUBLE
28646: LD_INT 1
28648: DEC
28649: ST_TO_ADDR
28650: LD_INT 6
28652: PUSH
28653: FOR_TO
28654: IFFALSE 28759
// begin uc_nation := nation_nature ;
28656: LD_ADDR_OWVAR 21
28660: PUSH
28661: LD_INT 0
28663: ST_TO_ADDR
// uc_side := 0 ;
28664: LD_ADDR_OWVAR 20
28668: PUSH
28669: LD_INT 0
28671: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28672: LD_ADDR_OWVAR 29
28676: PUSH
28677: LD_INT 12
28679: PUSH
28680: LD_INT 12
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// hc_agressivity := 20 ;
28687: LD_ADDR_OWVAR 35
28691: PUSH
28692: LD_INT 20
28694: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28695: LD_ADDR_OWVAR 28
28699: PUSH
28700: LD_INT 17
28702: ST_TO_ADDR
// hc_gallery :=  ;
28703: LD_ADDR_OWVAR 33
28707: PUSH
28708: LD_STRING 
28710: ST_TO_ADDR
// hc_name :=  ;
28711: LD_ADDR_OWVAR 26
28715: PUSH
28716: LD_STRING 
28718: ST_TO_ADDR
// un := CreateHuman ;
28719: LD_ADDR_VAR 0 2
28723: PUSH
28724: CALL_OW 44
28728: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28729: LD_VAR 0 2
28733: PPUSH
28734: LD_INT 1
28736: PPUSH
28737: CALL_OW 51
// tmp := tmp ^ un ;
28741: LD_ADDR_VAR 0 3
28745: PUSH
28746: LD_VAR 0 3
28750: PUSH
28751: LD_VAR 0 2
28755: ADD
28756: ST_TO_ADDR
// end ;
28757: GO 28653
28759: POP
28760: POP
// repeat wait ( 0 0$1 ) ;
28761: LD_INT 35
28763: PPUSH
28764: CALL_OW 67
// for un in tmp do
28768: LD_ADDR_VAR 0 2
28772: PUSH
28773: LD_VAR 0 3
28777: PUSH
28778: FOR_IN
28779: IFFALSE 28853
// begin if IsDead ( un ) then
28781: LD_VAR 0 2
28785: PPUSH
28786: CALL_OW 301
28790: IFFALSE 28810
// begin tmp := tmp diff un ;
28792: LD_ADDR_VAR 0 3
28796: PUSH
28797: LD_VAR 0 3
28801: PUSH
28802: LD_VAR 0 2
28806: DIFF
28807: ST_TO_ADDR
// continue ;
28808: GO 28778
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28810: LD_VAR 0 2
28814: PPUSH
28815: LD_INT 3
28817: PUSH
28818: LD_INT 22
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PPUSH
28832: CALL_OW 69
28836: PPUSH
28837: LD_VAR 0 2
28841: PPUSH
28842: CALL_OW 74
28846: PPUSH
28847: CALL_OW 115
// end ;
28851: GO 28778
28853: POP
28854: POP
// until not tmp ;
28855: LD_VAR 0 3
28859: NOT
28860: IFFALSE 28761
// end ;
28862: PPOPN 3
28864: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28865: LD_EXP 55
28869: PUSH
28870: LD_EXP 80
28874: AND
28875: IFFALSE 28929
28877: GO 28879
28879: DISABLE
// begin ToLua ( displayTroll(); ) ;
28880: LD_STRING displayTroll();
28882: PPUSH
28883: CALL_OW 559
// wait ( 3 3$00 ) ;
28887: LD_INT 6300
28889: PPUSH
28890: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28894: LD_STRING hideTroll();
28896: PPUSH
28897: CALL_OW 559
// wait ( 1 1$00 ) ;
28901: LD_INT 2100
28903: PPUSH
28904: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28908: LD_STRING displayTroll();
28910: PPUSH
28911: CALL_OW 559
// wait ( 1 1$00 ) ;
28915: LD_INT 2100
28917: PPUSH
28918: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28922: LD_STRING hideTroll();
28924: PPUSH
28925: CALL_OW 559
// end ;
28929: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28930: LD_EXP 55
28934: PUSH
28935: LD_EXP 81
28939: AND
28940: IFFALSE 29003
28942: GO 28944
28944: DISABLE
28945: LD_INT 0
28947: PPUSH
// begin p := 0 ;
28948: LD_ADDR_VAR 0 1
28952: PUSH
28953: LD_INT 0
28955: ST_TO_ADDR
// repeat game_speed := 1 ;
28956: LD_ADDR_OWVAR 65
28960: PUSH
28961: LD_INT 1
28963: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28964: LD_INT 35
28966: PPUSH
28967: CALL_OW 67
// p := p + 1 ;
28971: LD_ADDR_VAR 0 1
28975: PUSH
28976: LD_VAR 0 1
28980: PUSH
28981: LD_INT 1
28983: PLUS
28984: ST_TO_ADDR
// until p >= 60 ;
28985: LD_VAR 0 1
28989: PUSH
28990: LD_INT 60
28992: GREATEREQUAL
28993: IFFALSE 28956
// game_speed := 4 ;
28995: LD_ADDR_OWVAR 65
28999: PUSH
29000: LD_INT 4
29002: ST_TO_ADDR
// end ;
29003: PPOPN 1
29005: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29006: LD_EXP 55
29010: PUSH
29011: LD_EXP 82
29015: AND
29016: IFFALSE 29162
29018: GO 29020
29020: DISABLE
29021: LD_INT 0
29023: PPUSH
29024: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29025: LD_ADDR_VAR 0 1
29029: PUSH
29030: LD_INT 22
29032: PUSH
29033: LD_OWVAR 2
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: LD_INT 30
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 30
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: LIST
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PPUSH
29074: CALL_OW 69
29078: ST_TO_ADDR
// if not depot then
29079: LD_VAR 0 1
29083: NOT
29084: IFFALSE 29088
// exit ;
29086: GO 29162
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29088: LD_ADDR_VAR 0 2
29092: PUSH
29093: LD_VAR 0 1
29097: PUSH
29098: LD_INT 1
29100: PPUSH
29101: LD_VAR 0 1
29105: PPUSH
29106: CALL_OW 12
29110: ARRAY
29111: PPUSH
29112: CALL_OW 274
29116: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29117: LD_VAR 0 2
29121: PPUSH
29122: LD_INT 1
29124: PPUSH
29125: LD_INT 0
29127: PPUSH
29128: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29132: LD_VAR 0 2
29136: PPUSH
29137: LD_INT 2
29139: PPUSH
29140: LD_INT 0
29142: PPUSH
29143: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29147: LD_VAR 0 2
29151: PPUSH
29152: LD_INT 3
29154: PPUSH
29155: LD_INT 0
29157: PPUSH
29158: CALL_OW 277
// end ;
29162: PPOPN 2
29164: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29165: LD_EXP 55
29169: PUSH
29170: LD_EXP 83
29174: AND
29175: IFFALSE 29272
29177: GO 29179
29179: DISABLE
29180: LD_INT 0
29182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29183: LD_ADDR_VAR 0 1
29187: PUSH
29188: LD_INT 22
29190: PUSH
29191: LD_OWVAR 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 21
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 3
29212: PUSH
29213: LD_INT 23
29215: PUSH
29216: LD_INT 0
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: LIST
29231: PPUSH
29232: CALL_OW 69
29236: ST_TO_ADDR
// if not tmp then
29237: LD_VAR 0 1
29241: NOT
29242: IFFALSE 29246
// exit ;
29244: GO 29272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29246: LD_VAR 0 1
29250: PUSH
29251: LD_INT 1
29253: PPUSH
29254: LD_VAR 0 1
29258: PPUSH
29259: CALL_OW 12
29263: ARRAY
29264: PPUSH
29265: LD_INT 200
29267: PPUSH
29268: CALL_OW 234
// end ;
29272: PPOPN 1
29274: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29275: LD_EXP 55
29279: PUSH
29280: LD_EXP 84
29284: AND
29285: IFFALSE 29364
29287: GO 29289
29289: DISABLE
29290: LD_INT 0
29292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29293: LD_ADDR_VAR 0 1
29297: PUSH
29298: LD_INT 22
29300: PUSH
29301: LD_OWVAR 2
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 21
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PPUSH
29324: CALL_OW 69
29328: ST_TO_ADDR
// if not tmp then
29329: LD_VAR 0 1
29333: NOT
29334: IFFALSE 29338
// exit ;
29336: GO 29364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29338: LD_VAR 0 1
29342: PUSH
29343: LD_INT 1
29345: PPUSH
29346: LD_VAR 0 1
29350: PPUSH
29351: CALL_OW 12
29355: ARRAY
29356: PPUSH
29357: LD_INT 60
29359: PPUSH
29360: CALL_OW 234
// end ;
29364: PPOPN 1
29366: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29367: LD_EXP 55
29371: PUSH
29372: LD_EXP 85
29376: AND
29377: IFFALSE 29476
29379: GO 29381
29381: DISABLE
29382: LD_INT 0
29384: PPUSH
29385: PPUSH
// begin enable ;
29386: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29387: LD_ADDR_VAR 0 1
29391: PUSH
29392: LD_INT 22
29394: PUSH
29395: LD_OWVAR 2
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 61
29406: PUSH
29407: EMPTY
29408: LIST
29409: PUSH
29410: LD_INT 33
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: PPUSH
29425: CALL_OW 69
29429: ST_TO_ADDR
// if not tmp then
29430: LD_VAR 0 1
29434: NOT
29435: IFFALSE 29439
// exit ;
29437: GO 29476
// for i in tmp do
29439: LD_ADDR_VAR 0 2
29443: PUSH
29444: LD_VAR 0 1
29448: PUSH
29449: FOR_IN
29450: IFFALSE 29474
// if IsControledBy ( i ) then
29452: LD_VAR 0 2
29456: PPUSH
29457: CALL_OW 312
29461: IFFALSE 29472
// ComUnlink ( i ) ;
29463: LD_VAR 0 2
29467: PPUSH
29468: CALL_OW 136
29472: GO 29449
29474: POP
29475: POP
// end ;
29476: PPOPN 2
29478: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29479: LD_EXP 55
29483: PUSH
29484: LD_EXP 86
29488: AND
29489: IFFALSE 29629
29491: GO 29493
29493: DISABLE
29494: LD_INT 0
29496: PPUSH
29497: PPUSH
// begin ToLua ( displayPowell(); ) ;
29498: LD_STRING displayPowell();
29500: PPUSH
29501: CALL_OW 559
// uc_side := 0 ;
29505: LD_ADDR_OWVAR 20
29509: PUSH
29510: LD_INT 0
29512: ST_TO_ADDR
// uc_nation := 2 ;
29513: LD_ADDR_OWVAR 21
29517: PUSH
29518: LD_INT 2
29520: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29521: LD_ADDR_OWVAR 37
29525: PUSH
29526: LD_INT 14
29528: ST_TO_ADDR
// vc_engine := engine_siberite ;
29529: LD_ADDR_OWVAR 39
29533: PUSH
29534: LD_INT 3
29536: ST_TO_ADDR
// vc_control := control_apeman ;
29537: LD_ADDR_OWVAR 38
29541: PUSH
29542: LD_INT 5
29544: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29545: LD_ADDR_OWVAR 40
29549: PUSH
29550: LD_INT 29
29552: ST_TO_ADDR
// un := CreateVehicle ;
29553: LD_ADDR_VAR 0 2
29557: PUSH
29558: CALL_OW 45
29562: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29563: LD_VAR 0 2
29567: PPUSH
29568: LD_INT 1
29570: PPUSH
29571: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29575: LD_INT 35
29577: PPUSH
29578: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29582: LD_VAR 0 2
29586: PPUSH
29587: LD_INT 22
29589: PUSH
29590: LD_OWVAR 2
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PPUSH
29599: CALL_OW 69
29603: PPUSH
29604: LD_VAR 0 2
29608: PPUSH
29609: CALL_OW 74
29613: PPUSH
29614: CALL_OW 115
// until IsDead ( un ) ;
29618: LD_VAR 0 2
29622: PPUSH
29623: CALL_OW 301
29627: IFFALSE 29575
// end ;
29629: PPOPN 2
29631: END
// every 0 0$1 trigger StreamModeActive and sStu do
29632: LD_EXP 55
29636: PUSH
29637: LD_EXP 94
29641: AND
29642: IFFALSE 29658
29644: GO 29646
29646: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29647: LD_STRING displayStucuk();
29649: PPUSH
29650: CALL_OW 559
// ResetFog ;
29654: CALL_OW 335
// end ;
29658: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29659: LD_EXP 55
29663: PUSH
29664: LD_EXP 87
29668: AND
29669: IFFALSE 29810
29671: GO 29673
29673: DISABLE
29674: LD_INT 0
29676: PPUSH
29677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29678: LD_ADDR_VAR 0 2
29682: PUSH
29683: LD_INT 22
29685: PUSH
29686: LD_OWVAR 2
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 21
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PPUSH
29709: CALL_OW 69
29713: ST_TO_ADDR
// if not tmp then
29714: LD_VAR 0 2
29718: NOT
29719: IFFALSE 29723
// exit ;
29721: GO 29810
// un := tmp [ rand ( 1 , tmp ) ] ;
29723: LD_ADDR_VAR 0 1
29727: PUSH
29728: LD_VAR 0 2
29732: PUSH
29733: LD_INT 1
29735: PPUSH
29736: LD_VAR 0 2
29740: PPUSH
29741: CALL_OW 12
29745: ARRAY
29746: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29747: LD_VAR 0 1
29751: PPUSH
29752: LD_INT 0
29754: PPUSH
29755: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29759: LD_VAR 0 1
29763: PPUSH
29764: LD_OWVAR 3
29768: PUSH
29769: LD_VAR 0 1
29773: DIFF
29774: PPUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 74
29784: PPUSH
29785: CALL_OW 115
// wait ( 0 0$20 ) ;
29789: LD_INT 700
29791: PPUSH
29792: CALL_OW 67
// SetSide ( un , your_side ) ;
29796: LD_VAR 0 1
29800: PPUSH
29801: LD_OWVAR 2
29805: PPUSH
29806: CALL_OW 235
// end ;
29810: PPOPN 2
29812: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29813: LD_EXP 55
29817: PUSH
29818: LD_EXP 88
29822: AND
29823: IFFALSE 29929
29825: GO 29827
29827: DISABLE
29828: LD_INT 0
29830: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29831: LD_ADDR_VAR 0 1
29835: PUSH
29836: LD_INT 22
29838: PUSH
29839: LD_OWVAR 2
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: LD_INT 30
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 30
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: LIST
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PPUSH
29880: CALL_OW 69
29884: ST_TO_ADDR
// if not depot then
29885: LD_VAR 0 1
29889: NOT
29890: IFFALSE 29894
// exit ;
29892: GO 29929
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29894: LD_VAR 0 1
29898: PUSH
29899: LD_INT 1
29901: ARRAY
29902: PPUSH
29903: CALL_OW 250
29907: PPUSH
29908: LD_VAR 0 1
29912: PUSH
29913: LD_INT 1
29915: ARRAY
29916: PPUSH
29917: CALL_OW 251
29921: PPUSH
29922: LD_INT 70
29924: PPUSH
29925: CALL_OW 495
// end ;
29929: PPOPN 1
29931: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29932: LD_EXP 55
29936: PUSH
29937: LD_EXP 89
29941: AND
29942: IFFALSE 30153
29944: GO 29946
29946: DISABLE
29947: LD_INT 0
29949: PPUSH
29950: PPUSH
29951: PPUSH
29952: PPUSH
29953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29954: LD_ADDR_VAR 0 5
29958: PUSH
29959: LD_INT 22
29961: PUSH
29962: LD_OWVAR 2
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 21
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PPUSH
29985: CALL_OW 69
29989: ST_TO_ADDR
// if not tmp then
29990: LD_VAR 0 5
29994: NOT
29995: IFFALSE 29999
// exit ;
29997: GO 30153
// for i in tmp do
29999: LD_ADDR_VAR 0 1
30003: PUSH
30004: LD_VAR 0 5
30008: PUSH
30009: FOR_IN
30010: IFFALSE 30151
// begin d := rand ( 0 , 5 ) ;
30012: LD_ADDR_VAR 0 4
30016: PUSH
30017: LD_INT 0
30019: PPUSH
30020: LD_INT 5
30022: PPUSH
30023: CALL_OW 12
30027: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30028: LD_ADDR_VAR 0 2
30032: PUSH
30033: LD_VAR 0 1
30037: PPUSH
30038: CALL_OW 250
30042: PPUSH
30043: LD_VAR 0 4
30047: PPUSH
30048: LD_INT 3
30050: PPUSH
30051: LD_INT 12
30053: PPUSH
30054: CALL_OW 12
30058: PPUSH
30059: CALL_OW 272
30063: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30064: LD_ADDR_VAR 0 3
30068: PUSH
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL_OW 251
30078: PPUSH
30079: LD_VAR 0 4
30083: PPUSH
30084: LD_INT 3
30086: PPUSH
30087: LD_INT 12
30089: PPUSH
30090: CALL_OW 12
30094: PPUSH
30095: CALL_OW 273
30099: ST_TO_ADDR
// if ValidHex ( x , y ) then
30100: LD_VAR 0 2
30104: PPUSH
30105: LD_VAR 0 3
30109: PPUSH
30110: CALL_OW 488
30114: IFFALSE 30149
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30116: LD_VAR 0 1
30120: PPUSH
30121: LD_VAR 0 2
30125: PPUSH
30126: LD_VAR 0 3
30130: PPUSH
30131: LD_INT 3
30133: PPUSH
30134: LD_INT 6
30136: PPUSH
30137: CALL_OW 12
30141: PPUSH
30142: LD_INT 1
30144: PPUSH
30145: CALL_OW 483
// end ;
30149: GO 30009
30151: POP
30152: POP
// end ;
30153: PPOPN 5
30155: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30156: LD_EXP 55
30160: PUSH
30161: LD_EXP 90
30165: AND
30166: IFFALSE 30260
30168: GO 30170
30170: DISABLE
30171: LD_INT 0
30173: PPUSH
30174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30175: LD_ADDR_VAR 0 2
30179: PUSH
30180: LD_INT 22
30182: PUSH
30183: LD_OWVAR 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 32
30194: PUSH
30195: LD_INT 1
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 21
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: PPUSH
30217: CALL_OW 69
30221: ST_TO_ADDR
// if not tmp then
30222: LD_VAR 0 2
30226: NOT
30227: IFFALSE 30231
// exit ;
30229: GO 30260
// for i in tmp do
30231: LD_ADDR_VAR 0 1
30235: PUSH
30236: LD_VAR 0 2
30240: PUSH
30241: FOR_IN
30242: IFFALSE 30258
// SetFuel ( i , 0 ) ;
30244: LD_VAR 0 1
30248: PPUSH
30249: LD_INT 0
30251: PPUSH
30252: CALL_OW 240
30256: GO 30241
30258: POP
30259: POP
// end ;
30260: PPOPN 2
30262: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30263: LD_EXP 55
30267: PUSH
30268: LD_EXP 91
30272: AND
30273: IFFALSE 30339
30275: GO 30277
30277: DISABLE
30278: LD_INT 0
30280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30281: LD_ADDR_VAR 0 1
30285: PUSH
30286: LD_INT 22
30288: PUSH
30289: LD_OWVAR 2
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 30
30300: PUSH
30301: LD_INT 29
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PPUSH
30312: CALL_OW 69
30316: ST_TO_ADDR
// if not tmp then
30317: LD_VAR 0 1
30321: NOT
30322: IFFALSE 30326
// exit ;
30324: GO 30339
// DestroyUnit ( tmp [ 1 ] ) ;
30326: LD_VAR 0 1
30330: PUSH
30331: LD_INT 1
30333: ARRAY
30334: PPUSH
30335: CALL_OW 65
// end ;
30339: PPOPN 1
30341: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30342: LD_EXP 55
30346: PUSH
30347: LD_EXP 93
30351: AND
30352: IFFALSE 30481
30354: GO 30356
30356: DISABLE
30357: LD_INT 0
30359: PPUSH
// begin uc_side := 0 ;
30360: LD_ADDR_OWVAR 20
30364: PUSH
30365: LD_INT 0
30367: ST_TO_ADDR
// uc_nation := nation_arabian ;
30368: LD_ADDR_OWVAR 21
30372: PUSH
30373: LD_INT 2
30375: ST_TO_ADDR
// hc_gallery :=  ;
30376: LD_ADDR_OWVAR 33
30380: PUSH
30381: LD_STRING 
30383: ST_TO_ADDR
// hc_name :=  ;
30384: LD_ADDR_OWVAR 26
30388: PUSH
30389: LD_STRING 
30391: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30392: LD_INT 1
30394: PPUSH
30395: LD_INT 11
30397: PPUSH
30398: LD_INT 10
30400: PPUSH
30401: CALL_OW 380
// un := CreateHuman ;
30405: LD_ADDR_VAR 0 1
30409: PUSH
30410: CALL_OW 44
30414: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30415: LD_VAR 0 1
30419: PPUSH
30420: LD_INT 1
30422: PPUSH
30423: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30427: LD_INT 35
30429: PPUSH
30430: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30434: LD_VAR 0 1
30438: PPUSH
30439: LD_INT 22
30441: PUSH
30442: LD_OWVAR 2
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PPUSH
30451: CALL_OW 69
30455: PPUSH
30456: LD_VAR 0 1
30460: PPUSH
30461: CALL_OW 74
30465: PPUSH
30466: CALL_OW 115
// until IsDead ( un ) ;
30470: LD_VAR 0 1
30474: PPUSH
30475: CALL_OW 301
30479: IFFALSE 30427
// end ;
30481: PPOPN 1
30483: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30484: LD_EXP 55
30488: PUSH
30489: LD_EXP 95
30493: AND
30494: IFFALSE 30506
30496: GO 30498
30498: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30499: LD_STRING earthquake(getX(game), 0, 32)
30501: PPUSH
30502: CALL_OW 559
30506: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30507: LD_EXP 55
30511: PUSH
30512: LD_EXP 96
30516: AND
30517: IFFALSE 30608
30519: GO 30521
30521: DISABLE
30522: LD_INT 0
30524: PPUSH
// begin enable ;
30525: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30526: LD_ADDR_VAR 0 1
30530: PUSH
30531: LD_INT 22
30533: PUSH
30534: LD_OWVAR 2
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 21
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 33
30555: PUSH
30556: LD_INT 3
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: PPUSH
30568: CALL_OW 69
30572: ST_TO_ADDR
// if not tmp then
30573: LD_VAR 0 1
30577: NOT
30578: IFFALSE 30582
// exit ;
30580: GO 30608
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30582: LD_VAR 0 1
30586: PUSH
30587: LD_INT 1
30589: PPUSH
30590: LD_VAR 0 1
30594: PPUSH
30595: CALL_OW 12
30599: ARRAY
30600: PPUSH
30601: LD_INT 1
30603: PPUSH
30604: CALL_OW 234
// end ;
30608: PPOPN 1
30610: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30611: LD_EXP 55
30615: PUSH
30616: LD_EXP 97
30620: AND
30621: IFFALSE 30762
30623: GO 30625
30625: DISABLE
30626: LD_INT 0
30628: PPUSH
30629: PPUSH
30630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_INT 22
30638: PUSH
30639: LD_OWVAR 2
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 25
30650: PUSH
30651: LD_INT 1
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PPUSH
30662: CALL_OW 69
30666: ST_TO_ADDR
// if not tmp then
30667: LD_VAR 0 3
30671: NOT
30672: IFFALSE 30676
// exit ;
30674: GO 30762
// un := tmp [ rand ( 1 , tmp ) ] ;
30676: LD_ADDR_VAR 0 2
30680: PUSH
30681: LD_VAR 0 3
30685: PUSH
30686: LD_INT 1
30688: PPUSH
30689: LD_VAR 0 3
30693: PPUSH
30694: CALL_OW 12
30698: ARRAY
30699: ST_TO_ADDR
// if Crawls ( un ) then
30700: LD_VAR 0 2
30704: PPUSH
30705: CALL_OW 318
30709: IFFALSE 30720
// ComWalk ( un ) ;
30711: LD_VAR 0 2
30715: PPUSH
30716: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30720: LD_VAR 0 2
30724: PPUSH
30725: LD_INT 9
30727: PPUSH
30728: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30732: LD_INT 28
30734: PPUSH
30735: LD_OWVAR 2
30739: PPUSH
30740: LD_INT 2
30742: PPUSH
30743: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30747: LD_INT 29
30749: PPUSH
30750: LD_OWVAR 2
30754: PPUSH
30755: LD_INT 2
30757: PPUSH
30758: CALL_OW 322
// end ;
30762: PPOPN 3
30764: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30765: LD_EXP 55
30769: PUSH
30770: LD_EXP 98
30774: AND
30775: IFFALSE 30886
30777: GO 30779
30779: DISABLE
30780: LD_INT 0
30782: PPUSH
30783: PPUSH
30784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: LD_INT 22
30792: PUSH
30793: LD_OWVAR 2
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 25
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PPUSH
30816: CALL_OW 69
30820: ST_TO_ADDR
// if not tmp then
30821: LD_VAR 0 3
30825: NOT
30826: IFFALSE 30830
// exit ;
30828: GO 30886
// un := tmp [ rand ( 1 , tmp ) ] ;
30830: LD_ADDR_VAR 0 2
30834: PUSH
30835: LD_VAR 0 3
30839: PUSH
30840: LD_INT 1
30842: PPUSH
30843: LD_VAR 0 3
30847: PPUSH
30848: CALL_OW 12
30852: ARRAY
30853: ST_TO_ADDR
// if Crawls ( un ) then
30854: LD_VAR 0 2
30858: PPUSH
30859: CALL_OW 318
30863: IFFALSE 30874
// ComWalk ( un ) ;
30865: LD_VAR 0 2
30869: PPUSH
30870: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30874: LD_VAR 0 2
30878: PPUSH
30879: LD_INT 8
30881: PPUSH
30882: CALL_OW 336
// end ;
30886: PPOPN 3
30888: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30889: LD_EXP 55
30893: PUSH
30894: LD_EXP 99
30898: AND
30899: IFFALSE 31043
30901: GO 30903
30903: DISABLE
30904: LD_INT 0
30906: PPUSH
30907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30908: LD_ADDR_VAR 0 2
30912: PUSH
30913: LD_INT 22
30915: PUSH
30916: LD_OWVAR 2
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 21
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: LD_INT 34
30940: PUSH
30941: LD_INT 12
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 34
30950: PUSH
30951: LD_INT 51
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 34
30960: PUSH
30961: LD_INT 32
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: PPUSH
30979: CALL_OW 69
30983: ST_TO_ADDR
// if not tmp then
30984: LD_VAR 0 2
30988: NOT
30989: IFFALSE 30993
// exit ;
30991: GO 31043
// for i in tmp do
30993: LD_ADDR_VAR 0 1
30997: PUSH
30998: LD_VAR 0 2
31002: PUSH
31003: FOR_IN
31004: IFFALSE 31041
// if GetCargo ( i , mat_artifact ) = 0 then
31006: LD_VAR 0 1
31010: PPUSH
31011: LD_INT 4
31013: PPUSH
31014: CALL_OW 289
31018: PUSH
31019: LD_INT 0
31021: EQUAL
31022: IFFALSE 31039
// SetCargo ( i , mat_siberit , 100 ) ;
31024: LD_VAR 0 1
31028: PPUSH
31029: LD_INT 3
31031: PPUSH
31032: LD_INT 100
31034: PPUSH
31035: CALL_OW 290
31039: GO 31003
31041: POP
31042: POP
// end ;
31043: PPOPN 2
31045: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31046: LD_EXP 55
31050: PUSH
31051: LD_EXP 100
31055: AND
31056: IFFALSE 31239
31058: GO 31060
31060: DISABLE
31061: LD_INT 0
31063: PPUSH
31064: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31065: LD_ADDR_VAR 0 2
31069: PUSH
31070: LD_INT 22
31072: PUSH
31073: LD_OWVAR 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PPUSH
31082: CALL_OW 69
31086: ST_TO_ADDR
// if not tmp then
31087: LD_VAR 0 2
31091: NOT
31092: IFFALSE 31096
// exit ;
31094: GO 31239
// for i := 1 to 2 do
31096: LD_ADDR_VAR 0 1
31100: PUSH
31101: DOUBLE
31102: LD_INT 1
31104: DEC
31105: ST_TO_ADDR
31106: LD_INT 2
31108: PUSH
31109: FOR_TO
31110: IFFALSE 31237
// begin uc_side := your_side ;
31112: LD_ADDR_OWVAR 20
31116: PUSH
31117: LD_OWVAR 2
31121: ST_TO_ADDR
// uc_nation := nation_american ;
31122: LD_ADDR_OWVAR 21
31126: PUSH
31127: LD_INT 1
31129: ST_TO_ADDR
// vc_chassis := us_morphling ;
31130: LD_ADDR_OWVAR 37
31134: PUSH
31135: LD_INT 5
31137: ST_TO_ADDR
// vc_engine := engine_siberite ;
31138: LD_ADDR_OWVAR 39
31142: PUSH
31143: LD_INT 3
31145: ST_TO_ADDR
// vc_control := control_computer ;
31146: LD_ADDR_OWVAR 38
31150: PUSH
31151: LD_INT 3
31153: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31154: LD_ADDR_OWVAR 40
31158: PUSH
31159: LD_INT 10
31161: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31162: LD_VAR 0 2
31166: PUSH
31167: LD_INT 1
31169: ARRAY
31170: PPUSH
31171: CALL_OW 310
31175: NOT
31176: IFFALSE 31223
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31178: CALL_OW 45
31182: PPUSH
31183: LD_VAR 0 2
31187: PUSH
31188: LD_INT 1
31190: ARRAY
31191: PPUSH
31192: CALL_OW 250
31196: PPUSH
31197: LD_VAR 0 2
31201: PUSH
31202: LD_INT 1
31204: ARRAY
31205: PPUSH
31206: CALL_OW 251
31210: PPUSH
31211: LD_INT 12
31213: PPUSH
31214: LD_INT 1
31216: PPUSH
31217: CALL_OW 50
31221: GO 31235
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31223: CALL_OW 45
31227: PPUSH
31228: LD_INT 1
31230: PPUSH
31231: CALL_OW 51
// end ;
31235: GO 31109
31237: POP
31238: POP
// end ;
31239: PPOPN 2
31241: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31242: LD_EXP 55
31246: PUSH
31247: LD_EXP 101
31251: AND
31252: IFFALSE 31474
31254: GO 31256
31256: DISABLE
31257: LD_INT 0
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
31263: PPUSH
31264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31265: LD_ADDR_VAR 0 6
31269: PUSH
31270: LD_INT 22
31272: PUSH
31273: LD_OWVAR 2
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 21
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: LD_INT 23
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: PPUSH
31314: CALL_OW 69
31318: ST_TO_ADDR
// if not tmp then
31319: LD_VAR 0 6
31323: NOT
31324: IFFALSE 31328
// exit ;
31326: GO 31474
// s1 := rand ( 1 , 4 ) ;
31328: LD_ADDR_VAR 0 2
31332: PUSH
31333: LD_INT 1
31335: PPUSH
31336: LD_INT 4
31338: PPUSH
31339: CALL_OW 12
31343: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31344: LD_ADDR_VAR 0 4
31348: PUSH
31349: LD_VAR 0 6
31353: PUSH
31354: LD_INT 1
31356: ARRAY
31357: PPUSH
31358: LD_VAR 0 2
31362: PPUSH
31363: CALL_OW 259
31367: ST_TO_ADDR
// if s1 = 1 then
31368: LD_VAR 0 2
31372: PUSH
31373: LD_INT 1
31375: EQUAL
31376: IFFALSE 31396
// s2 := rand ( 2 , 4 ) else
31378: LD_ADDR_VAR 0 3
31382: PUSH
31383: LD_INT 2
31385: PPUSH
31386: LD_INT 4
31388: PPUSH
31389: CALL_OW 12
31393: ST_TO_ADDR
31394: GO 31404
// s2 := 1 ;
31396: LD_ADDR_VAR 0 3
31400: PUSH
31401: LD_INT 1
31403: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31404: LD_ADDR_VAR 0 5
31408: PUSH
31409: LD_VAR 0 6
31413: PUSH
31414: LD_INT 1
31416: ARRAY
31417: PPUSH
31418: LD_VAR 0 3
31422: PPUSH
31423: CALL_OW 259
31427: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31428: LD_VAR 0 6
31432: PUSH
31433: LD_INT 1
31435: ARRAY
31436: PPUSH
31437: LD_VAR 0 2
31441: PPUSH
31442: LD_VAR 0 5
31446: PPUSH
31447: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31451: LD_VAR 0 6
31455: PUSH
31456: LD_INT 1
31458: ARRAY
31459: PPUSH
31460: LD_VAR 0 3
31464: PPUSH
31465: LD_VAR 0 4
31469: PPUSH
31470: CALL_OW 237
// end ;
31474: PPOPN 6
31476: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31477: LD_EXP 55
31481: PUSH
31482: LD_EXP 102
31486: AND
31487: IFFALSE 31566
31489: GO 31491
31491: DISABLE
31492: LD_INT 0
31494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31495: LD_ADDR_VAR 0 1
31499: PUSH
31500: LD_INT 22
31502: PUSH
31503: LD_OWVAR 2
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 30
31514: PUSH
31515: LD_INT 3
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PPUSH
31526: CALL_OW 69
31530: ST_TO_ADDR
// if not tmp then
31531: LD_VAR 0 1
31535: NOT
31536: IFFALSE 31540
// exit ;
31538: GO 31566
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31540: LD_VAR 0 1
31544: PUSH
31545: LD_INT 1
31547: PPUSH
31548: LD_VAR 0 1
31552: PPUSH
31553: CALL_OW 12
31557: ARRAY
31558: PPUSH
31559: LD_INT 1
31561: PPUSH
31562: CALL_OW 234
// end ;
31566: PPOPN 1
31568: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31569: LD_EXP 55
31573: PUSH
31574: LD_EXP 103
31578: AND
31579: IFFALSE 31691
31581: GO 31583
31583: DISABLE
31584: LD_INT 0
31586: PPUSH
31587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31588: LD_ADDR_VAR 0 2
31592: PUSH
31593: LD_INT 22
31595: PUSH
31596: LD_OWVAR 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 2
31607: PUSH
31608: LD_INT 30
31610: PUSH
31611: LD_INT 27
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 30
31620: PUSH
31621: LD_INT 26
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 30
31630: PUSH
31631: LD_INT 28
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PPUSH
31648: CALL_OW 69
31652: ST_TO_ADDR
// if not tmp then
31653: LD_VAR 0 2
31657: NOT
31658: IFFALSE 31662
// exit ;
31660: GO 31691
// for i in tmp do
31662: LD_ADDR_VAR 0 1
31666: PUSH
31667: LD_VAR 0 2
31671: PUSH
31672: FOR_IN
31673: IFFALSE 31689
// SetLives ( i , 1 ) ;
31675: LD_VAR 0 1
31679: PPUSH
31680: LD_INT 1
31682: PPUSH
31683: CALL_OW 234
31687: GO 31672
31689: POP
31690: POP
// end ;
31691: PPOPN 2
31693: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31694: LD_EXP 55
31698: PUSH
31699: LD_EXP 104
31703: AND
31704: IFFALSE 31991
31706: GO 31708
31708: DISABLE
31709: LD_INT 0
31711: PPUSH
31712: PPUSH
31713: PPUSH
// begin i := rand ( 1 , 7 ) ;
31714: LD_ADDR_VAR 0 1
31718: PUSH
31719: LD_INT 1
31721: PPUSH
31722: LD_INT 7
31724: PPUSH
31725: CALL_OW 12
31729: ST_TO_ADDR
// case i of 1 :
31730: LD_VAR 0 1
31734: PUSH
31735: LD_INT 1
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31743
31741: GO 31753
31743: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31744: LD_STRING earthquake(getX(game), 0, 32)
31746: PPUSH
31747: CALL_OW 559
31751: GO 31991
31753: LD_INT 2
31755: DOUBLE
31756: EQUAL
31757: IFTRUE 31761
31759: GO 31775
31761: POP
// begin ToLua ( displayStucuk(); ) ;
31762: LD_STRING displayStucuk();
31764: PPUSH
31765: CALL_OW 559
// ResetFog ;
31769: CALL_OW 335
// end ; 3 :
31773: GO 31991
31775: LD_INT 3
31777: DOUBLE
31778: EQUAL
31779: IFTRUE 31783
31781: GO 31887
31783: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31784: LD_ADDR_VAR 0 2
31788: PUSH
31789: LD_INT 22
31791: PUSH
31792: LD_OWVAR 2
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 25
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PPUSH
31815: CALL_OW 69
31819: ST_TO_ADDR
// if not tmp then
31820: LD_VAR 0 2
31824: NOT
31825: IFFALSE 31829
// exit ;
31827: GO 31991
// un := tmp [ rand ( 1 , tmp ) ] ;
31829: LD_ADDR_VAR 0 3
31833: PUSH
31834: LD_VAR 0 2
31838: PUSH
31839: LD_INT 1
31841: PPUSH
31842: LD_VAR 0 2
31846: PPUSH
31847: CALL_OW 12
31851: ARRAY
31852: ST_TO_ADDR
// if Crawls ( un ) then
31853: LD_VAR 0 3
31857: PPUSH
31858: CALL_OW 318
31862: IFFALSE 31873
// ComWalk ( un ) ;
31864: LD_VAR 0 3
31868: PPUSH
31869: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31873: LD_VAR 0 3
31877: PPUSH
31878: LD_INT 8
31880: PPUSH
31881: CALL_OW 336
// end ; 4 :
31885: GO 31991
31887: LD_INT 4
31889: DOUBLE
31890: EQUAL
31891: IFTRUE 31895
31893: GO 31969
31895: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31896: LD_ADDR_VAR 0 2
31900: PUSH
31901: LD_INT 22
31903: PUSH
31904: LD_OWVAR 2
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 30
31915: PUSH
31916: LD_INT 29
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PPUSH
31927: CALL_OW 69
31931: ST_TO_ADDR
// if not tmp then
31932: LD_VAR 0 2
31936: NOT
31937: IFFALSE 31941
// exit ;
31939: GO 31991
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31941: LD_VAR 0 2
31945: PUSH
31946: LD_INT 1
31948: ARRAY
31949: PPUSH
31950: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31954: LD_VAR 0 2
31958: PUSH
31959: LD_INT 1
31961: ARRAY
31962: PPUSH
31963: CALL_OW 65
// end ; 5 .. 7 :
31967: GO 31991
31969: LD_INT 5
31971: DOUBLE
31972: GREATEREQUAL
31973: IFFALSE 31981
31975: LD_INT 7
31977: DOUBLE
31978: LESSEQUAL
31979: IFTRUE 31983
31981: GO 31990
31983: POP
// StreamSibBomb ; end ;
31984: CALL 28228 0 0
31988: GO 31991
31990: POP
// end ;
31991: PPOPN 3
31993: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31994: LD_EXP 55
31998: PUSH
31999: LD_EXP 105
32003: AND
32004: IFFALSE 32160
32006: GO 32008
32008: DISABLE
32009: LD_INT 0
32011: PPUSH
32012: PPUSH
32013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32014: LD_ADDR_VAR 0 2
32018: PUSH
32019: LD_INT 81
32021: PUSH
32022: LD_OWVAR 2
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: LD_INT 21
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 21
32046: PUSH
32047: LD_INT 2
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: LIST
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PPUSH
32063: CALL_OW 69
32067: ST_TO_ADDR
// if not tmp then
32068: LD_VAR 0 2
32072: NOT
32073: IFFALSE 32077
// exit ;
32075: GO 32160
// p := 0 ;
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: LD_INT 0
32084: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32085: LD_INT 35
32087: PPUSH
32088: CALL_OW 67
// p := p + 1 ;
32092: LD_ADDR_VAR 0 3
32096: PUSH
32097: LD_VAR 0 3
32101: PUSH
32102: LD_INT 1
32104: PLUS
32105: ST_TO_ADDR
// for i in tmp do
32106: LD_ADDR_VAR 0 1
32110: PUSH
32111: LD_VAR 0 2
32115: PUSH
32116: FOR_IN
32117: IFFALSE 32148
// if GetLives ( i ) < 1000 then
32119: LD_VAR 0 1
32123: PPUSH
32124: CALL_OW 256
32128: PUSH
32129: LD_INT 1000
32131: LESS
32132: IFFALSE 32146
// SetLives ( i , 1000 ) ;
32134: LD_VAR 0 1
32138: PPUSH
32139: LD_INT 1000
32141: PPUSH
32142: CALL_OW 234
32146: GO 32116
32148: POP
32149: POP
// until p > 20 ;
32150: LD_VAR 0 3
32154: PUSH
32155: LD_INT 20
32157: GREATER
32158: IFFALSE 32085
// end ;
32160: PPOPN 3
32162: END
// every 0 0$1 trigger StreamModeActive and sTime do
32163: LD_EXP 55
32167: PUSH
32168: LD_EXP 106
32172: AND
32173: IFFALSE 32208
32175: GO 32177
32177: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32178: LD_INT 28
32180: PPUSH
32181: LD_OWVAR 2
32185: PPUSH
32186: LD_INT 2
32188: PPUSH
32189: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32193: LD_INT 30
32195: PPUSH
32196: LD_OWVAR 2
32200: PPUSH
32201: LD_INT 2
32203: PPUSH
32204: CALL_OW 322
// end ;
32208: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32209: LD_EXP 55
32213: PUSH
32214: LD_EXP 107
32218: AND
32219: IFFALSE 32340
32221: GO 32223
32223: DISABLE
32224: LD_INT 0
32226: PPUSH
32227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32228: LD_ADDR_VAR 0 2
32232: PUSH
32233: LD_INT 22
32235: PUSH
32236: LD_OWVAR 2
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 21
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: LD_INT 23
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: LIST
32276: PPUSH
32277: CALL_OW 69
32281: ST_TO_ADDR
// if not tmp then
32282: LD_VAR 0 2
32286: NOT
32287: IFFALSE 32291
// exit ;
32289: GO 32340
// for i in tmp do
32291: LD_ADDR_VAR 0 1
32295: PUSH
32296: LD_VAR 0 2
32300: PUSH
32301: FOR_IN
32302: IFFALSE 32338
// begin if Crawls ( i ) then
32304: LD_VAR 0 1
32308: PPUSH
32309: CALL_OW 318
32313: IFFALSE 32324
// ComWalk ( i ) ;
32315: LD_VAR 0 1
32319: PPUSH
32320: CALL_OW 138
// SetClass ( i , 2 ) ;
32324: LD_VAR 0 1
32328: PPUSH
32329: LD_INT 2
32331: PPUSH
32332: CALL_OW 336
// end ;
32336: GO 32301
32338: POP
32339: POP
// end ;
32340: PPOPN 2
32342: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32343: LD_EXP 55
32347: PUSH
32348: LD_EXP 108
32352: AND
32353: IFFALSE 32641
32355: GO 32357
32357: DISABLE
32358: LD_INT 0
32360: PPUSH
32361: PPUSH
32362: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32363: LD_OWVAR 2
32367: PPUSH
32368: LD_INT 9
32370: PPUSH
32371: LD_INT 1
32373: PPUSH
32374: LD_INT 1
32376: PPUSH
32377: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32381: LD_INT 9
32383: PPUSH
32384: LD_OWVAR 2
32388: PPUSH
32389: CALL_OW 343
// uc_side := 9 ;
32393: LD_ADDR_OWVAR 20
32397: PUSH
32398: LD_INT 9
32400: ST_TO_ADDR
// uc_nation := 2 ;
32401: LD_ADDR_OWVAR 21
32405: PUSH
32406: LD_INT 2
32408: ST_TO_ADDR
// hc_name := Dark Warrior ;
32409: LD_ADDR_OWVAR 26
32413: PUSH
32414: LD_STRING Dark Warrior
32416: ST_TO_ADDR
// hc_gallery :=  ;
32417: LD_ADDR_OWVAR 33
32421: PUSH
32422: LD_STRING 
32424: ST_TO_ADDR
// hc_noskilllimit := true ;
32425: LD_ADDR_OWVAR 76
32429: PUSH
32430: LD_INT 1
32432: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32433: LD_ADDR_OWVAR 31
32437: PUSH
32438: LD_INT 30
32440: PUSH
32441: LD_INT 30
32443: PUSH
32444: LD_INT 30
32446: PUSH
32447: LD_INT 30
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
// un := CreateHuman ;
32456: LD_ADDR_VAR 0 3
32460: PUSH
32461: CALL_OW 44
32465: ST_TO_ADDR
// hc_noskilllimit := false ;
32466: LD_ADDR_OWVAR 76
32470: PUSH
32471: LD_INT 0
32473: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32474: LD_VAR 0 3
32478: PPUSH
32479: LD_INT 1
32481: PPUSH
32482: CALL_OW 51
// ToLua ( playRanger() ) ;
32486: LD_STRING playRanger()
32488: PPUSH
32489: CALL_OW 559
// p := 0 ;
32493: LD_ADDR_VAR 0 2
32497: PUSH
32498: LD_INT 0
32500: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32501: LD_INT 35
32503: PPUSH
32504: CALL_OW 67
// p := p + 1 ;
32508: LD_ADDR_VAR 0 2
32512: PUSH
32513: LD_VAR 0 2
32517: PUSH
32518: LD_INT 1
32520: PLUS
32521: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32522: LD_VAR 0 3
32526: PPUSH
32527: CALL_OW 256
32531: PUSH
32532: LD_INT 1000
32534: LESS
32535: IFFALSE 32549
// SetLives ( un , 1000 ) ;
32537: LD_VAR 0 3
32541: PPUSH
32542: LD_INT 1000
32544: PPUSH
32545: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32549: LD_VAR 0 3
32553: PPUSH
32554: LD_INT 81
32556: PUSH
32557: LD_OWVAR 2
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 91
32568: PUSH
32569: LD_VAR 0 3
32573: PUSH
32574: LD_INT 30
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: LIST
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PPUSH
32586: CALL_OW 69
32590: PPUSH
32591: LD_VAR 0 3
32595: PPUSH
32596: CALL_OW 74
32600: PPUSH
32601: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32605: LD_VAR 0 2
32609: PUSH
32610: LD_INT 80
32612: GREATER
32613: PUSH
32614: LD_VAR 0 3
32618: PPUSH
32619: CALL_OW 301
32623: OR
32624: IFFALSE 32501
// if un then
32626: LD_VAR 0 3
32630: IFFALSE 32641
// RemoveUnit ( un ) ;
32632: LD_VAR 0 3
32636: PPUSH
32637: CALL_OW 64
// end ;
32641: PPOPN 3
32643: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32644: LD_EXP 109
32648: IFFALSE 32764
32650: GO 32652
32652: DISABLE
32653: LD_INT 0
32655: PPUSH
32656: PPUSH
32657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32658: LD_ADDR_VAR 0 2
32662: PUSH
32663: LD_INT 81
32665: PUSH
32666: LD_OWVAR 2
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 21
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PPUSH
32689: CALL_OW 69
32693: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32694: LD_STRING playComputer()
32696: PPUSH
32697: CALL_OW 559
// if not tmp then
32701: LD_VAR 0 2
32705: NOT
32706: IFFALSE 32710
// exit ;
32708: GO 32764
// for i in tmp do
32710: LD_ADDR_VAR 0 1
32714: PUSH
32715: LD_VAR 0 2
32719: PUSH
32720: FOR_IN
32721: IFFALSE 32762
// for j := 1 to 4 do
32723: LD_ADDR_VAR 0 3
32727: PUSH
32728: DOUBLE
32729: LD_INT 1
32731: DEC
32732: ST_TO_ADDR
32733: LD_INT 4
32735: PUSH
32736: FOR_TO
32737: IFFALSE 32758
// SetSkill ( i , j , 10 ) ;
32739: LD_VAR 0 1
32743: PPUSH
32744: LD_VAR 0 3
32748: PPUSH
32749: LD_INT 10
32751: PPUSH
32752: CALL_OW 237
32756: GO 32736
32758: POP
32759: POP
32760: GO 32720
32762: POP
32763: POP
// end ;
32764: PPOPN 3
32766: END
// every 0 0$1 trigger s30 do var i , tmp ;
32767: LD_EXP 110
32771: IFFALSE 32840
32773: GO 32775
32775: DISABLE
32776: LD_INT 0
32778: PPUSH
32779: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32780: LD_ADDR_VAR 0 2
32784: PUSH
32785: LD_INT 22
32787: PUSH
32788: LD_OWVAR 2
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PPUSH
32797: CALL_OW 69
32801: ST_TO_ADDR
// if not tmp then
32802: LD_VAR 0 2
32806: NOT
32807: IFFALSE 32811
// exit ;
32809: GO 32840
// for i in tmp do
32811: LD_ADDR_VAR 0 1
32815: PUSH
32816: LD_VAR 0 2
32820: PUSH
32821: FOR_IN
32822: IFFALSE 32838
// SetLives ( i , 300 ) ;
32824: LD_VAR 0 1
32828: PPUSH
32829: LD_INT 300
32831: PPUSH
32832: CALL_OW 234
32836: GO 32821
32838: POP
32839: POP
// end ;
32840: PPOPN 2
32842: END
// every 0 0$1 trigger s60 do var i , tmp ;
32843: LD_EXP 111
32847: IFFALSE 32916
32849: GO 32851
32851: DISABLE
32852: LD_INT 0
32854: PPUSH
32855: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32856: LD_ADDR_VAR 0 2
32860: PUSH
32861: LD_INT 22
32863: PUSH
32864: LD_OWVAR 2
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PPUSH
32873: CALL_OW 69
32877: ST_TO_ADDR
// if not tmp then
32878: LD_VAR 0 2
32882: NOT
32883: IFFALSE 32887
// exit ;
32885: GO 32916
// for i in tmp do
32887: LD_ADDR_VAR 0 1
32891: PUSH
32892: LD_VAR 0 2
32896: PUSH
32897: FOR_IN
32898: IFFALSE 32914
// SetLives ( i , 600 ) ;
32900: LD_VAR 0 1
32904: PPUSH
32905: LD_INT 600
32907: PPUSH
32908: CALL_OW 234
32912: GO 32897
32914: POP
32915: POP
// end ;
32916: PPOPN 2
32918: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32919: LD_INT 0
32921: PPUSH
// case cmd of 301 :
32922: LD_VAR 0 1
32926: PUSH
32927: LD_INT 301
32929: DOUBLE
32930: EQUAL
32931: IFTRUE 32935
32933: GO 32967
32935: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32936: LD_VAR 0 6
32940: PPUSH
32941: LD_VAR 0 7
32945: PPUSH
32946: LD_VAR 0 8
32950: PPUSH
32951: LD_VAR 0 4
32955: PPUSH
32956: LD_VAR 0 5
32960: PPUSH
32961: CALL 34176 0 5
32965: GO 33088
32967: LD_INT 302
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 33012
32975: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32976: LD_VAR 0 6
32980: PPUSH
32981: LD_VAR 0 7
32985: PPUSH
32986: LD_VAR 0 8
32990: PPUSH
32991: LD_VAR 0 9
32995: PPUSH
32996: LD_VAR 0 4
33000: PPUSH
33001: LD_VAR 0 5
33005: PPUSH
33006: CALL 34267 0 6
33010: GO 33088
33012: LD_INT 303
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33020
33018: GO 33057
33020: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33021: LD_VAR 0 6
33025: PPUSH
33026: LD_VAR 0 7
33030: PPUSH
33031: LD_VAR 0 8
33035: PPUSH
33036: LD_VAR 0 9
33040: PPUSH
33041: LD_VAR 0 4
33045: PPUSH
33046: LD_VAR 0 5
33050: PPUSH
33051: CALL 33093 0 6
33055: GO 33088
33057: LD_INT 304
33059: DOUBLE
33060: EQUAL
33061: IFTRUE 33065
33063: GO 33087
33065: POP
// hHackTeleport ( unit , x , y ) ; end ;
33066: LD_VAR 0 2
33070: PPUSH
33071: LD_VAR 0 4
33075: PPUSH
33076: LD_VAR 0 5
33080: PPUSH
33081: CALL 34860 0 3
33085: GO 33088
33087: POP
// end ;
33088: LD_VAR 0 12
33092: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33093: LD_INT 0
33095: PPUSH
33096: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33097: LD_VAR 0 1
33101: PUSH
33102: LD_INT 1
33104: LESS
33105: PUSH
33106: LD_VAR 0 1
33110: PUSH
33111: LD_INT 3
33113: GREATER
33114: OR
33115: PUSH
33116: LD_VAR 0 5
33120: PPUSH
33121: LD_VAR 0 6
33125: PPUSH
33126: CALL_OW 428
33130: OR
33131: IFFALSE 33135
// exit ;
33133: GO 33863
// uc_side := your_side ;
33135: LD_ADDR_OWVAR 20
33139: PUSH
33140: LD_OWVAR 2
33144: ST_TO_ADDR
// uc_nation := nation ;
33145: LD_ADDR_OWVAR 21
33149: PUSH
33150: LD_VAR 0 1
33154: ST_TO_ADDR
// bc_level = 1 ;
33155: LD_ADDR_OWVAR 43
33159: PUSH
33160: LD_INT 1
33162: ST_TO_ADDR
// case btype of 1 :
33163: LD_VAR 0 2
33167: PUSH
33168: LD_INT 1
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33187
33176: POP
// bc_type := b_depot ; 2 :
33177: LD_ADDR_OWVAR 42
33181: PUSH
33182: LD_INT 0
33184: ST_TO_ADDR
33185: GO 33807
33187: LD_INT 2
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33195
33193: GO 33206
33195: POP
// bc_type := b_warehouse ; 3 :
33196: LD_ADDR_OWVAR 42
33200: PUSH
33201: LD_INT 1
33203: ST_TO_ADDR
33204: GO 33807
33206: LD_INT 3
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33214
33212: GO 33225
33214: POP
// bc_type := b_lab ; 4 .. 9 :
33215: LD_ADDR_OWVAR 42
33219: PUSH
33220: LD_INT 6
33222: ST_TO_ADDR
33223: GO 33807
33225: LD_INT 4
33227: DOUBLE
33228: GREATEREQUAL
33229: IFFALSE 33237
33231: LD_INT 9
33233: DOUBLE
33234: LESSEQUAL
33235: IFTRUE 33239
33237: GO 33299
33239: POP
// begin bc_type := b_lab_half ;
33240: LD_ADDR_OWVAR 42
33244: PUSH
33245: LD_INT 7
33247: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33248: LD_ADDR_OWVAR 44
33252: PUSH
33253: LD_INT 10
33255: PUSH
33256: LD_INT 11
33258: PUSH
33259: LD_INT 12
33261: PUSH
33262: LD_INT 15
33264: PUSH
33265: LD_INT 14
33267: PUSH
33268: LD_INT 13
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: PUSH
33279: LD_VAR 0 2
33283: PUSH
33284: LD_INT 3
33286: MINUS
33287: ARRAY
33288: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33289: LD_ADDR_OWVAR 45
33293: PUSH
33294: LD_INT 9
33296: ST_TO_ADDR
// end ; 10 .. 13 :
33297: GO 33807
33299: LD_INT 10
33301: DOUBLE
33302: GREATEREQUAL
33303: IFFALSE 33311
33305: LD_INT 13
33307: DOUBLE
33308: LESSEQUAL
33309: IFTRUE 33313
33311: GO 33390
33313: POP
// begin bc_type := b_lab_full ;
33314: LD_ADDR_OWVAR 42
33318: PUSH
33319: LD_INT 8
33321: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33322: LD_ADDR_OWVAR 44
33326: PUSH
33327: LD_INT 10
33329: PUSH
33330: LD_INT 12
33332: PUSH
33333: LD_INT 14
33335: PUSH
33336: LD_INT 13
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: PUSH
33345: LD_VAR 0 2
33349: PUSH
33350: LD_INT 9
33352: MINUS
33353: ARRAY
33354: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33355: LD_ADDR_OWVAR 45
33359: PUSH
33360: LD_INT 11
33362: PUSH
33363: LD_INT 15
33365: PUSH
33366: LD_INT 12
33368: PUSH
33369: LD_INT 15
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: PUSH
33378: LD_VAR 0 2
33382: PUSH
33383: LD_INT 9
33385: MINUS
33386: ARRAY
33387: ST_TO_ADDR
// end ; 14 :
33388: GO 33807
33390: LD_INT 14
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33398
33396: GO 33409
33398: POP
// bc_type := b_workshop ; 15 :
33399: LD_ADDR_OWVAR 42
33403: PUSH
33404: LD_INT 2
33406: ST_TO_ADDR
33407: GO 33807
33409: LD_INT 15
33411: DOUBLE
33412: EQUAL
33413: IFTRUE 33417
33415: GO 33428
33417: POP
// bc_type := b_factory ; 16 :
33418: LD_ADDR_OWVAR 42
33422: PUSH
33423: LD_INT 3
33425: ST_TO_ADDR
33426: GO 33807
33428: LD_INT 16
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33447
33436: POP
// bc_type := b_ext_gun ; 17 :
33437: LD_ADDR_OWVAR 42
33441: PUSH
33442: LD_INT 17
33444: ST_TO_ADDR
33445: GO 33807
33447: LD_INT 17
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33455
33453: GO 33483
33455: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33456: LD_ADDR_OWVAR 42
33460: PUSH
33461: LD_INT 19
33463: PUSH
33464: LD_INT 23
33466: PUSH
33467: LD_INT 19
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: PUSH
33475: LD_VAR 0 1
33479: ARRAY
33480: ST_TO_ADDR
33481: GO 33807
33483: LD_INT 18
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33491
33489: GO 33502
33491: POP
// bc_type := b_ext_radar ; 19 :
33492: LD_ADDR_OWVAR 42
33496: PUSH
33497: LD_INT 20
33499: ST_TO_ADDR
33500: GO 33807
33502: LD_INT 19
33504: DOUBLE
33505: EQUAL
33506: IFTRUE 33510
33508: GO 33521
33510: POP
// bc_type := b_ext_radio ; 20 :
33511: LD_ADDR_OWVAR 42
33515: PUSH
33516: LD_INT 22
33518: ST_TO_ADDR
33519: GO 33807
33521: LD_INT 20
33523: DOUBLE
33524: EQUAL
33525: IFTRUE 33529
33527: GO 33540
33529: POP
// bc_type := b_ext_siberium ; 21 :
33530: LD_ADDR_OWVAR 42
33534: PUSH
33535: LD_INT 21
33537: ST_TO_ADDR
33538: GO 33807
33540: LD_INT 21
33542: DOUBLE
33543: EQUAL
33544: IFTRUE 33548
33546: GO 33559
33548: POP
// bc_type := b_ext_computer ; 22 :
33549: LD_ADDR_OWVAR 42
33553: PUSH
33554: LD_INT 24
33556: ST_TO_ADDR
33557: GO 33807
33559: LD_INT 22
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33578
33567: POP
// bc_type := b_ext_track ; 23 :
33568: LD_ADDR_OWVAR 42
33572: PUSH
33573: LD_INT 16
33575: ST_TO_ADDR
33576: GO 33807
33578: LD_INT 23
33580: DOUBLE
33581: EQUAL
33582: IFTRUE 33586
33584: GO 33597
33586: POP
// bc_type := b_ext_laser ; 24 :
33587: LD_ADDR_OWVAR 42
33591: PUSH
33592: LD_INT 25
33594: ST_TO_ADDR
33595: GO 33807
33597: LD_INT 24
33599: DOUBLE
33600: EQUAL
33601: IFTRUE 33605
33603: GO 33616
33605: POP
// bc_type := b_control_tower ; 25 :
33606: LD_ADDR_OWVAR 42
33610: PUSH
33611: LD_INT 36
33613: ST_TO_ADDR
33614: GO 33807
33616: LD_INT 25
33618: DOUBLE
33619: EQUAL
33620: IFTRUE 33624
33622: GO 33635
33624: POP
// bc_type := b_breastwork ; 26 :
33625: LD_ADDR_OWVAR 42
33629: PUSH
33630: LD_INT 31
33632: ST_TO_ADDR
33633: GO 33807
33635: LD_INT 26
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 33654
33643: POP
// bc_type := b_bunker ; 27 :
33644: LD_ADDR_OWVAR 42
33648: PUSH
33649: LD_INT 32
33651: ST_TO_ADDR
33652: GO 33807
33654: LD_INT 27
33656: DOUBLE
33657: EQUAL
33658: IFTRUE 33662
33660: GO 33673
33662: POP
// bc_type := b_turret ; 28 :
33663: LD_ADDR_OWVAR 42
33667: PUSH
33668: LD_INT 33
33670: ST_TO_ADDR
33671: GO 33807
33673: LD_INT 28
33675: DOUBLE
33676: EQUAL
33677: IFTRUE 33681
33679: GO 33692
33681: POP
// bc_type := b_armoury ; 29 :
33682: LD_ADDR_OWVAR 42
33686: PUSH
33687: LD_INT 4
33689: ST_TO_ADDR
33690: GO 33807
33692: LD_INT 29
33694: DOUBLE
33695: EQUAL
33696: IFTRUE 33700
33698: GO 33711
33700: POP
// bc_type := b_barracks ; 30 :
33701: LD_ADDR_OWVAR 42
33705: PUSH
33706: LD_INT 5
33708: ST_TO_ADDR
33709: GO 33807
33711: LD_INT 30
33713: DOUBLE
33714: EQUAL
33715: IFTRUE 33719
33717: GO 33730
33719: POP
// bc_type := b_solar_power ; 31 :
33720: LD_ADDR_OWVAR 42
33724: PUSH
33725: LD_INT 27
33727: ST_TO_ADDR
33728: GO 33807
33730: LD_INT 31
33732: DOUBLE
33733: EQUAL
33734: IFTRUE 33738
33736: GO 33749
33738: POP
// bc_type := b_oil_power ; 32 :
33739: LD_ADDR_OWVAR 42
33743: PUSH
33744: LD_INT 26
33746: ST_TO_ADDR
33747: GO 33807
33749: LD_INT 32
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33757
33755: GO 33768
33757: POP
// bc_type := b_siberite_power ; 33 :
33758: LD_ADDR_OWVAR 42
33762: PUSH
33763: LD_INT 28
33765: ST_TO_ADDR
33766: GO 33807
33768: LD_INT 33
33770: DOUBLE
33771: EQUAL
33772: IFTRUE 33776
33774: GO 33787
33776: POP
// bc_type := b_oil_mine ; 34 :
33777: LD_ADDR_OWVAR 42
33781: PUSH
33782: LD_INT 29
33784: ST_TO_ADDR
33785: GO 33807
33787: LD_INT 34
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 33806
33795: POP
// bc_type := b_siberite_mine ; end ;
33796: LD_ADDR_OWVAR 42
33800: PUSH
33801: LD_INT 30
33803: ST_TO_ADDR
33804: GO 33807
33806: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33807: LD_ADDR_VAR 0 8
33811: PUSH
33812: LD_VAR 0 5
33816: PPUSH
33817: LD_VAR 0 6
33821: PPUSH
33822: LD_VAR 0 3
33826: PPUSH
33827: CALL_OW 47
33831: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33832: LD_OWVAR 42
33836: PUSH
33837: LD_INT 32
33839: PUSH
33840: LD_INT 33
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: IN
33847: IFFALSE 33863
// PlaceWeaponTurret ( b , weapon ) ;
33849: LD_VAR 0 8
33853: PPUSH
33854: LD_VAR 0 4
33858: PPUSH
33859: CALL_OW 431
// end ;
33863: LD_VAR 0 7
33867: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33868: LD_INT 0
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33874: LD_ADDR_VAR 0 4
33878: PUSH
33879: LD_INT 22
33881: PUSH
33882: LD_OWVAR 2
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: LD_INT 30
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 30
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PPUSH
33923: CALL_OW 69
33927: ST_TO_ADDR
// if not tmp then
33928: LD_VAR 0 4
33932: NOT
33933: IFFALSE 33937
// exit ;
33935: GO 33996
// for i in tmp do
33937: LD_ADDR_VAR 0 2
33941: PUSH
33942: LD_VAR 0 4
33946: PUSH
33947: FOR_IN
33948: IFFALSE 33994
// for j = 1 to 3 do
33950: LD_ADDR_VAR 0 3
33954: PUSH
33955: DOUBLE
33956: LD_INT 1
33958: DEC
33959: ST_TO_ADDR
33960: LD_INT 3
33962: PUSH
33963: FOR_TO
33964: IFFALSE 33990
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33966: LD_VAR 0 2
33970: PPUSH
33971: CALL_OW 274
33975: PPUSH
33976: LD_VAR 0 3
33980: PPUSH
33981: LD_INT 99999
33983: PPUSH
33984: CALL_OW 277
33988: GO 33963
33990: POP
33991: POP
33992: GO 33947
33994: POP
33995: POP
// end ;
33996: LD_VAR 0 1
34000: RET
// export function hHackSetLevel10 ; var i , j ; begin
34001: LD_INT 0
34003: PPUSH
34004: PPUSH
34005: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34006: LD_ADDR_VAR 0 2
34010: PUSH
34011: LD_INT 21
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PPUSH
34021: CALL_OW 69
34025: PUSH
34026: FOR_IN
34027: IFFALSE 34079
// if IsSelected ( i ) then
34029: LD_VAR 0 2
34033: PPUSH
34034: CALL_OW 306
34038: IFFALSE 34077
// begin for j := 1 to 4 do
34040: LD_ADDR_VAR 0 3
34044: PUSH
34045: DOUBLE
34046: LD_INT 1
34048: DEC
34049: ST_TO_ADDR
34050: LD_INT 4
34052: PUSH
34053: FOR_TO
34054: IFFALSE 34075
// SetSkill ( i , j , 10 ) ;
34056: LD_VAR 0 2
34060: PPUSH
34061: LD_VAR 0 3
34065: PPUSH
34066: LD_INT 10
34068: PPUSH
34069: CALL_OW 237
34073: GO 34053
34075: POP
34076: POP
// end ;
34077: GO 34026
34079: POP
34080: POP
// end ;
34081: LD_VAR 0 1
34085: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34086: LD_INT 0
34088: PPUSH
34089: PPUSH
34090: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34091: LD_ADDR_VAR 0 2
34095: PUSH
34096: LD_INT 22
34098: PUSH
34099: LD_OWVAR 2
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 21
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PPUSH
34122: CALL_OW 69
34126: PUSH
34127: FOR_IN
34128: IFFALSE 34169
// begin for j := 1 to 4 do
34130: LD_ADDR_VAR 0 3
34134: PUSH
34135: DOUBLE
34136: LD_INT 1
34138: DEC
34139: ST_TO_ADDR
34140: LD_INT 4
34142: PUSH
34143: FOR_TO
34144: IFFALSE 34165
// SetSkill ( i , j , 10 ) ;
34146: LD_VAR 0 2
34150: PPUSH
34151: LD_VAR 0 3
34155: PPUSH
34156: LD_INT 10
34158: PPUSH
34159: CALL_OW 237
34163: GO 34143
34165: POP
34166: POP
// end ;
34167: GO 34127
34169: POP
34170: POP
// end ;
34171: LD_VAR 0 1
34175: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34176: LD_INT 0
34178: PPUSH
// uc_side := your_side ;
34179: LD_ADDR_OWVAR 20
34183: PUSH
34184: LD_OWVAR 2
34188: ST_TO_ADDR
// uc_nation := nation ;
34189: LD_ADDR_OWVAR 21
34193: PUSH
34194: LD_VAR 0 1
34198: ST_TO_ADDR
// InitHc ;
34199: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34203: LD_INT 0
34205: PPUSH
34206: LD_VAR 0 2
34210: PPUSH
34211: LD_VAR 0 3
34215: PPUSH
34216: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34220: LD_VAR 0 4
34224: PPUSH
34225: LD_VAR 0 5
34229: PPUSH
34230: CALL_OW 428
34234: PUSH
34235: LD_INT 0
34237: EQUAL
34238: IFFALSE 34262
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34240: CALL_OW 44
34244: PPUSH
34245: LD_VAR 0 4
34249: PPUSH
34250: LD_VAR 0 5
34254: PPUSH
34255: LD_INT 1
34257: PPUSH
34258: CALL_OW 48
// end ;
34262: LD_VAR 0 6
34266: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34267: LD_INT 0
34269: PPUSH
34270: PPUSH
// uc_side := your_side ;
34271: LD_ADDR_OWVAR 20
34275: PUSH
34276: LD_OWVAR 2
34280: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34281: LD_VAR 0 1
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: LD_INT 3
34294: PUSH
34295: LD_INT 4
34297: PUSH
34298: LD_INT 5
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: IN
34308: IFFALSE 34320
// uc_nation := nation_american else
34310: LD_ADDR_OWVAR 21
34314: PUSH
34315: LD_INT 1
34317: ST_TO_ADDR
34318: GO 34363
// if chassis in [ 11 , 12 , 13 , 14 ] then
34320: LD_VAR 0 1
34324: PUSH
34325: LD_INT 11
34327: PUSH
34328: LD_INT 12
34330: PUSH
34331: LD_INT 13
34333: PUSH
34334: LD_INT 14
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: IN
34343: IFFALSE 34355
// uc_nation := nation_arabian else
34345: LD_ADDR_OWVAR 21
34349: PUSH
34350: LD_INT 2
34352: ST_TO_ADDR
34353: GO 34363
// uc_nation := nation_russian ;
34355: LD_ADDR_OWVAR 21
34359: PUSH
34360: LD_INT 3
34362: ST_TO_ADDR
// vc_chassis := chassis ;
34363: LD_ADDR_OWVAR 37
34367: PUSH
34368: LD_VAR 0 1
34372: ST_TO_ADDR
// vc_engine := engine ;
34373: LD_ADDR_OWVAR 39
34377: PUSH
34378: LD_VAR 0 2
34382: ST_TO_ADDR
// vc_control := control ;
34383: LD_ADDR_OWVAR 38
34387: PUSH
34388: LD_VAR 0 3
34392: ST_TO_ADDR
// vc_weapon := weapon ;
34393: LD_ADDR_OWVAR 40
34397: PUSH
34398: LD_VAR 0 4
34402: ST_TO_ADDR
// un := CreateVehicle ;
34403: LD_ADDR_VAR 0 8
34407: PUSH
34408: CALL_OW 45
34412: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34413: LD_VAR 0 8
34417: PPUSH
34418: LD_INT 0
34420: PPUSH
34421: LD_INT 5
34423: PPUSH
34424: CALL_OW 12
34428: PPUSH
34429: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34433: LD_VAR 0 8
34437: PPUSH
34438: LD_VAR 0 5
34442: PPUSH
34443: LD_VAR 0 6
34447: PPUSH
34448: LD_INT 1
34450: PPUSH
34451: CALL_OW 48
// end ;
34455: LD_VAR 0 7
34459: RET
// export hInvincible ; every 1 do
34460: GO 34462
34462: DISABLE
// hInvincible := [ ] ;
34463: LD_ADDR_EXP 112
34467: PUSH
34468: EMPTY
34469: ST_TO_ADDR
34470: END
// every 10 do var i ;
34471: GO 34473
34473: DISABLE
34474: LD_INT 0
34476: PPUSH
// begin enable ;
34477: ENABLE
// if not hInvincible then
34478: LD_EXP 112
34482: NOT
34483: IFFALSE 34487
// exit ;
34485: GO 34531
// for i in hInvincible do
34487: LD_ADDR_VAR 0 1
34491: PUSH
34492: LD_EXP 112
34496: PUSH
34497: FOR_IN
34498: IFFALSE 34529
// if GetLives ( i ) < 1000 then
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 256
34509: PUSH
34510: LD_INT 1000
34512: LESS
34513: IFFALSE 34527
// SetLives ( i , 1000 ) ;
34515: LD_VAR 0 1
34519: PPUSH
34520: LD_INT 1000
34522: PPUSH
34523: CALL_OW 234
34527: GO 34497
34529: POP
34530: POP
// end ;
34531: PPOPN 1
34533: END
// export function hHackInvincible ; var i ; begin
34534: LD_INT 0
34536: PPUSH
34537: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34538: LD_ADDR_VAR 0 2
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: LD_INT 21
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 21
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: PPUSH
34571: CALL_OW 69
34575: PUSH
34576: FOR_IN
34577: IFFALSE 34638
// if IsSelected ( i ) then
34579: LD_VAR 0 2
34583: PPUSH
34584: CALL_OW 306
34588: IFFALSE 34636
// begin if i in hInvincible then
34590: LD_VAR 0 2
34594: PUSH
34595: LD_EXP 112
34599: IN
34600: IFFALSE 34620
// hInvincible := hInvincible diff i else
34602: LD_ADDR_EXP 112
34606: PUSH
34607: LD_EXP 112
34611: PUSH
34612: LD_VAR 0 2
34616: DIFF
34617: ST_TO_ADDR
34618: GO 34636
// hInvincible := hInvincible union i ;
34620: LD_ADDR_EXP 112
34624: PUSH
34625: LD_EXP 112
34629: PUSH
34630: LD_VAR 0 2
34634: UNION
34635: ST_TO_ADDR
// end ;
34636: GO 34576
34638: POP
34639: POP
// end ;
34640: LD_VAR 0 1
34644: RET
// export function hHackInvisible ; var i , j ; begin
34645: LD_INT 0
34647: PPUSH
34648: PPUSH
34649: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34650: LD_ADDR_VAR 0 2
34654: PUSH
34655: LD_INT 21
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PPUSH
34665: CALL_OW 69
34669: PUSH
34670: FOR_IN
34671: IFFALSE 34695
// if IsSelected ( i ) then
34673: LD_VAR 0 2
34677: PPUSH
34678: CALL_OW 306
34682: IFFALSE 34693
// ComForceInvisible ( i ) ;
34684: LD_VAR 0 2
34688: PPUSH
34689: CALL_OW 496
34693: GO 34670
34695: POP
34696: POP
// end ;
34697: LD_VAR 0 1
34701: RET
// export function hHackChangeYourSide ; begin
34702: LD_INT 0
34704: PPUSH
// if your_side = 8 then
34705: LD_OWVAR 2
34709: PUSH
34710: LD_INT 8
34712: EQUAL
34713: IFFALSE 34725
// your_side := 0 else
34715: LD_ADDR_OWVAR 2
34719: PUSH
34720: LD_INT 0
34722: ST_TO_ADDR
34723: GO 34739
// your_side := your_side + 1 ;
34725: LD_ADDR_OWVAR 2
34729: PUSH
34730: LD_OWVAR 2
34734: PUSH
34735: LD_INT 1
34737: PLUS
34738: ST_TO_ADDR
// end ;
34739: LD_VAR 0 1
34743: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34744: LD_INT 0
34746: PPUSH
34747: PPUSH
34748: PPUSH
// for i in all_units do
34749: LD_ADDR_VAR 0 2
34753: PUSH
34754: LD_OWVAR 3
34758: PUSH
34759: FOR_IN
34760: IFFALSE 34838
// if IsSelected ( i ) then
34762: LD_VAR 0 2
34766: PPUSH
34767: CALL_OW 306
34771: IFFALSE 34836
// begin j := GetSide ( i ) ;
34773: LD_ADDR_VAR 0 3
34777: PUSH
34778: LD_VAR 0 2
34782: PPUSH
34783: CALL_OW 255
34787: ST_TO_ADDR
// if j = 8 then
34788: LD_VAR 0 3
34792: PUSH
34793: LD_INT 8
34795: EQUAL
34796: IFFALSE 34808
// j := 0 else
34798: LD_ADDR_VAR 0 3
34802: PUSH
34803: LD_INT 0
34805: ST_TO_ADDR
34806: GO 34822
// j := j + 1 ;
34808: LD_ADDR_VAR 0 3
34812: PUSH
34813: LD_VAR 0 3
34817: PUSH
34818: LD_INT 1
34820: PLUS
34821: ST_TO_ADDR
// SetSide ( i , j ) ;
34822: LD_VAR 0 2
34826: PPUSH
34827: LD_VAR 0 3
34831: PPUSH
34832: CALL_OW 235
// end ;
34836: GO 34759
34838: POP
34839: POP
// end ;
34840: LD_VAR 0 1
34844: RET
// export function hHackFog ; begin
34845: LD_INT 0
34847: PPUSH
// FogOff ( true ) ;
34848: LD_INT 1
34850: PPUSH
34851: CALL_OW 344
// end ;
34855: LD_VAR 0 1
34859: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34860: LD_INT 0
34862: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34863: LD_VAR 0 1
34867: PPUSH
34868: LD_VAR 0 2
34872: PPUSH
34873: LD_VAR 0 3
34877: PPUSH
34878: LD_INT 1
34880: PPUSH
34881: LD_INT 1
34883: PPUSH
34884: CALL_OW 483
// CenterOnXY ( x , y ) ;
34888: LD_VAR 0 2
34892: PPUSH
34893: LD_VAR 0 3
34897: PPUSH
34898: CALL_OW 84
// end ;
34902: LD_VAR 0 4
34906: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34907: LD_INT 0
34909: PPUSH
34910: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34911: LD_VAR 0 1
34915: NOT
34916: PUSH
34917: LD_VAR 0 2
34921: PPUSH
34922: LD_VAR 0 3
34926: PPUSH
34927: CALL_OW 488
34931: NOT
34932: OR
34933: PUSH
34934: LD_VAR 0 1
34938: PPUSH
34939: CALL_OW 266
34943: PUSH
34944: LD_INT 3
34946: NONEQUAL
34947: PUSH
34948: LD_VAR 0 1
34952: PPUSH
34953: CALL_OW 247
34957: PUSH
34958: LD_INT 1
34960: EQUAL
34961: NOT
34962: AND
34963: OR
34964: IFFALSE 34968
// exit ;
34966: GO 35250
// if GetType ( factory ) = unit_human then
34968: LD_VAR 0 1
34972: PPUSH
34973: CALL_OW 247
34977: PUSH
34978: LD_INT 1
34980: EQUAL
34981: IFFALSE 34998
// factory := IsInUnit ( factory ) ;
34983: LD_ADDR_VAR 0 1
34987: PUSH
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 310
34997: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 266
35007: PUSH
35008: LD_INT 3
35010: NONEQUAL
35011: IFFALSE 35015
// exit ;
35013: GO 35250
// for i := 1 to Count ( factoryWaypoints ) do
35015: LD_ADDR_VAR 0 5
35019: PUSH
35020: DOUBLE
35021: LD_INT 1
35023: DEC
35024: ST_TO_ADDR
35025: LD_EXP 113
35029: PPUSH
35030: CALL 38532 0 1
35034: PUSH
35035: FOR_TO
35036: IFFALSE 35198
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35038: LD_VAR 0 2
35042: PPUSH
35043: LD_VAR 0 3
35047: PPUSH
35048: CALL_OW 428
35052: PUSH
35053: LD_EXP 113
35057: PUSH
35058: LD_VAR 0 5
35062: ARRAY
35063: PUSH
35064: LD_INT 2
35066: ARRAY
35067: EQUAL
35068: IFFALSE 35100
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35070: LD_ADDR_EXP 113
35074: PUSH
35075: LD_EXP 113
35079: PPUSH
35080: LD_VAR 0 5
35084: PPUSH
35085: CALL_OW 3
35089: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35090: CALL 35255 0 0
// exit ;
35094: POP
35095: POP
35096: GO 35250
// end else
35098: GO 35196
// if factory = factoryWaypoints [ i ] [ 2 ] then
35100: LD_VAR 0 1
35104: PUSH
35105: LD_EXP 113
35109: PUSH
35110: LD_VAR 0 5
35114: ARRAY
35115: PUSH
35116: LD_INT 2
35118: ARRAY
35119: EQUAL
35120: IFFALSE 35196
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35122: LD_ADDR_EXP 113
35126: PUSH
35127: LD_EXP 113
35131: PPUSH
35132: LD_VAR 0 5
35136: PPUSH
35137: CALL_OW 3
35141: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35142: LD_ADDR_EXP 113
35146: PUSH
35147: LD_EXP 113
35151: PPUSH
35152: LD_VAR 0 1
35156: PPUSH
35157: CALL_OW 255
35161: PUSH
35162: LD_VAR 0 1
35166: PUSH
35167: LD_VAR 0 2
35171: PUSH
35172: LD_VAR 0 3
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: PPUSH
35183: CALL 74141 0 2
35187: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35188: CALL 35255 0 0
// exit ;
35192: POP
35193: POP
35194: GO 35250
// end ; end ;
35196: GO 35035
35198: POP
35199: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35200: LD_ADDR_EXP 113
35204: PUSH
35205: LD_EXP 113
35209: PPUSH
35210: LD_VAR 0 1
35214: PPUSH
35215: CALL_OW 255
35219: PUSH
35220: LD_VAR 0 1
35224: PUSH
35225: LD_VAR 0 2
35229: PUSH
35230: LD_VAR 0 3
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: PPUSH
35241: CALL 74141 0 2
35245: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35246: CALL 35255 0 0
// end ;
35250: LD_VAR 0 4
35254: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35255: LD_INT 0
35257: PPUSH
35258: PPUSH
35259: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35260: LD_STRING resetFactoryWaypoint();
35262: PPUSH
35263: CALL_OW 559
// if factoryWaypoints then
35267: LD_EXP 113
35271: IFFALSE 35392
// begin list := factoryWaypoints ;
35273: LD_ADDR_VAR 0 3
35277: PUSH
35278: LD_EXP 113
35282: ST_TO_ADDR
// for i := 1 to list do
35283: LD_ADDR_VAR 0 2
35287: PUSH
35288: DOUBLE
35289: LD_INT 1
35291: DEC
35292: ST_TO_ADDR
35293: LD_VAR 0 3
35297: PUSH
35298: FOR_TO
35299: IFFALSE 35390
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35301: LD_STRING setFactoryWaypointXY(
35303: PUSH
35304: LD_VAR 0 3
35308: PUSH
35309: LD_VAR 0 2
35313: ARRAY
35314: PUSH
35315: LD_INT 1
35317: ARRAY
35318: STR
35319: PUSH
35320: LD_STRING ,
35322: STR
35323: PUSH
35324: LD_VAR 0 3
35328: PUSH
35329: LD_VAR 0 2
35333: ARRAY
35334: PUSH
35335: LD_INT 2
35337: ARRAY
35338: STR
35339: PUSH
35340: LD_STRING ,
35342: STR
35343: PUSH
35344: LD_VAR 0 3
35348: PUSH
35349: LD_VAR 0 2
35353: ARRAY
35354: PUSH
35355: LD_INT 3
35357: ARRAY
35358: STR
35359: PUSH
35360: LD_STRING ,
35362: STR
35363: PUSH
35364: LD_VAR 0 3
35368: PUSH
35369: LD_VAR 0 2
35373: ARRAY
35374: PUSH
35375: LD_INT 4
35377: ARRAY
35378: STR
35379: PUSH
35380: LD_STRING )
35382: STR
35383: PPUSH
35384: CALL_OW 559
35388: GO 35298
35390: POP
35391: POP
// end ; end ;
35392: LD_VAR 0 1
35396: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35397: LD_INT 0
35399: PPUSH
// if HexInfo ( x , y ) = warehouse then
35400: LD_VAR 0 2
35404: PPUSH
35405: LD_VAR 0 3
35409: PPUSH
35410: CALL_OW 428
35414: PUSH
35415: LD_VAR 0 1
35419: EQUAL
35420: IFFALSE 35447
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35422: LD_ADDR_EXP 115
35426: PUSH
35427: LD_EXP 115
35431: PPUSH
35432: LD_VAR 0 1
35436: PPUSH
35437: LD_INT 0
35439: PPUSH
35440: CALL_OW 1
35444: ST_TO_ADDR
35445: GO 35498
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35447: LD_ADDR_EXP 115
35451: PUSH
35452: LD_EXP 115
35456: PPUSH
35457: LD_VAR 0 1
35461: PPUSH
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 255
35471: PUSH
35472: LD_VAR 0 1
35476: PUSH
35477: LD_VAR 0 2
35481: PUSH
35482: LD_VAR 0 3
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: PPUSH
35493: CALL_OW 1
35497: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35498: CALL 35507 0 0
// end ;
35502: LD_VAR 0 4
35506: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35507: LD_INT 0
35509: PPUSH
35510: PPUSH
35511: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35512: LD_STRING resetWarehouseGatheringPoints();
35514: PPUSH
35515: CALL_OW 559
// if warehouseGatheringPoints then
35519: LD_EXP 115
35523: IFFALSE 35649
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35525: LD_ADDR_VAR 0 3
35529: PUSH
35530: LD_EXP 115
35534: PPUSH
35535: CALL 77909 0 1
35539: ST_TO_ADDR
// for i := 1 to list do
35540: LD_ADDR_VAR 0 2
35544: PUSH
35545: DOUBLE
35546: LD_INT 1
35548: DEC
35549: ST_TO_ADDR
35550: LD_VAR 0 3
35554: PUSH
35555: FOR_TO
35556: IFFALSE 35647
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35558: LD_STRING setWarehouseGatheringPointXY(
35560: PUSH
35561: LD_VAR 0 3
35565: PUSH
35566: LD_VAR 0 2
35570: ARRAY
35571: PUSH
35572: LD_INT 1
35574: ARRAY
35575: STR
35576: PUSH
35577: LD_STRING ,
35579: STR
35580: PUSH
35581: LD_VAR 0 3
35585: PUSH
35586: LD_VAR 0 2
35590: ARRAY
35591: PUSH
35592: LD_INT 2
35594: ARRAY
35595: STR
35596: PUSH
35597: LD_STRING ,
35599: STR
35600: PUSH
35601: LD_VAR 0 3
35605: PUSH
35606: LD_VAR 0 2
35610: ARRAY
35611: PUSH
35612: LD_INT 3
35614: ARRAY
35615: STR
35616: PUSH
35617: LD_STRING ,
35619: STR
35620: PUSH
35621: LD_VAR 0 3
35625: PUSH
35626: LD_VAR 0 2
35630: ARRAY
35631: PUSH
35632: LD_INT 4
35634: ARRAY
35635: STR
35636: PUSH
35637: LD_STRING )
35639: STR
35640: PPUSH
35641: CALL_OW 559
35645: GO 35555
35647: POP
35648: POP
// end ; end ;
35649: LD_VAR 0 1
35653: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35654: LD_EXP 115
35658: IFFALSE 36343
35660: GO 35662
35662: DISABLE
35663: LD_INT 0
35665: PPUSH
35666: PPUSH
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
// begin enable ;
35674: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35675: LD_ADDR_VAR 0 3
35679: PUSH
35680: LD_EXP 115
35684: PPUSH
35685: CALL 77909 0 1
35689: ST_TO_ADDR
// if not list then
35690: LD_VAR 0 3
35694: NOT
35695: IFFALSE 35699
// exit ;
35697: GO 36343
// for i := 1 to list do
35699: LD_ADDR_VAR 0 1
35703: PUSH
35704: DOUBLE
35705: LD_INT 1
35707: DEC
35708: ST_TO_ADDR
35709: LD_VAR 0 3
35713: PUSH
35714: FOR_TO
35715: IFFALSE 36341
// begin depot := list [ i ] [ 2 ] ;
35717: LD_ADDR_VAR 0 8
35721: PUSH
35722: LD_VAR 0 3
35726: PUSH
35727: LD_VAR 0 1
35731: ARRAY
35732: PUSH
35733: LD_INT 2
35735: ARRAY
35736: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35737: LD_ADDR_VAR 0 5
35741: PUSH
35742: LD_VAR 0 3
35746: PUSH
35747: LD_VAR 0 1
35751: ARRAY
35752: PUSH
35753: LD_INT 1
35755: ARRAY
35756: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35757: LD_VAR 0 8
35761: PPUSH
35762: CALL_OW 301
35766: PUSH
35767: LD_VAR 0 5
35771: PUSH
35772: LD_VAR 0 8
35776: PPUSH
35777: CALL_OW 255
35781: NONEQUAL
35782: OR
35783: IFFALSE 35812
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35785: LD_ADDR_EXP 115
35789: PUSH
35790: LD_EXP 115
35794: PPUSH
35795: LD_VAR 0 8
35799: PPUSH
35800: LD_INT 0
35802: PPUSH
35803: CALL_OW 1
35807: ST_TO_ADDR
// exit ;
35808: POP
35809: POP
35810: GO 36343
// end ; x := list [ i ] [ 3 ] ;
35812: LD_ADDR_VAR 0 6
35816: PUSH
35817: LD_VAR 0 3
35821: PUSH
35822: LD_VAR 0 1
35826: ARRAY
35827: PUSH
35828: LD_INT 3
35830: ARRAY
35831: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35832: LD_ADDR_VAR 0 7
35836: PUSH
35837: LD_VAR 0 3
35841: PUSH
35842: LD_VAR 0 1
35846: ARRAY
35847: PUSH
35848: LD_INT 4
35850: ARRAY
35851: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35852: LD_ADDR_VAR 0 9
35856: PUSH
35857: LD_VAR 0 6
35861: PPUSH
35862: LD_VAR 0 7
35866: PPUSH
35867: LD_INT 16
35869: PPUSH
35870: CALL 76493 0 3
35874: ST_TO_ADDR
// if not cratesNearbyPoint then
35875: LD_VAR 0 9
35879: NOT
35880: IFFALSE 35886
// exit ;
35882: POP
35883: POP
35884: GO 36343
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35886: LD_ADDR_VAR 0 4
35890: PUSH
35891: LD_INT 22
35893: PUSH
35894: LD_VAR 0 5
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 3
35905: PUSH
35906: LD_INT 60
35908: PUSH
35909: EMPTY
35910: LIST
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 91
35918: PUSH
35919: LD_VAR 0 8
35923: PUSH
35924: LD_INT 6
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: PUSH
35935: LD_INT 25
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 25
35947: PUSH
35948: LD_INT 16
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: PPUSH
35966: CALL_OW 69
35970: PUSH
35971: LD_VAR 0 8
35975: PPUSH
35976: CALL_OW 313
35980: PPUSH
35981: LD_INT 3
35983: PUSH
35984: LD_INT 60
35986: PUSH
35987: EMPTY
35988: LIST
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: LD_INT 25
35999: PUSH
36000: LD_INT 2
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 25
36009: PUSH
36010: LD_INT 16
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: LIST
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PPUSH
36026: CALL_OW 72
36030: UNION
36031: ST_TO_ADDR
// if tmp then
36032: LD_VAR 0 4
36036: IFFALSE 36116
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36038: LD_ADDR_VAR 0 4
36042: PUSH
36043: LD_VAR 0 4
36047: PPUSH
36048: LD_INT 3
36050: PPUSH
36051: CALL 74456 0 2
36055: ST_TO_ADDR
// for j in tmp do
36056: LD_ADDR_VAR 0 2
36060: PUSH
36061: LD_VAR 0 4
36065: PUSH
36066: FOR_IN
36067: IFFALSE 36110
// begin if IsInUnit ( j ) then
36069: LD_VAR 0 2
36073: PPUSH
36074: CALL_OW 310
36078: IFFALSE 36089
// ComExit ( j ) ;
36080: LD_VAR 0 2
36084: PPUSH
36085: CALL 74539 0 1
// AddComCollect ( j , x , y ) ;
36089: LD_VAR 0 2
36093: PPUSH
36094: LD_VAR 0 6
36098: PPUSH
36099: LD_VAR 0 7
36103: PPUSH
36104: CALL_OW 177
// end ;
36108: GO 36066
36110: POP
36111: POP
// exit ;
36112: POP
36113: POP
36114: GO 36343
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36116: LD_ADDR_VAR 0 4
36120: PUSH
36121: LD_INT 22
36123: PUSH
36124: LD_VAR 0 5
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 91
36135: PUSH
36136: LD_VAR 0 8
36140: PUSH
36141: LD_INT 8
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: LD_INT 34
36154: PUSH
36155: LD_INT 12
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 34
36164: PUSH
36165: LD_INT 51
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 34
36174: PUSH
36175: LD_INT 32
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 34
36184: PUSH
36185: LD_INT 89
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: LIST
36203: PPUSH
36204: CALL_OW 69
36208: ST_TO_ADDR
// if tmp then
36209: LD_VAR 0 4
36213: IFFALSE 36339
// begin for j in tmp do
36215: LD_ADDR_VAR 0 2
36219: PUSH
36220: LD_VAR 0 4
36224: PUSH
36225: FOR_IN
36226: IFFALSE 36337
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36228: LD_VAR 0 2
36232: PPUSH
36233: CALL_OW 262
36237: PUSH
36238: LD_INT 3
36240: EQUAL
36241: PUSH
36242: LD_VAR 0 2
36246: PPUSH
36247: CALL_OW 261
36251: PUSH
36252: LD_INT 20
36254: GREATER
36255: OR
36256: PUSH
36257: LD_VAR 0 2
36261: PPUSH
36262: CALL_OW 314
36266: NOT
36267: AND
36268: PUSH
36269: LD_VAR 0 2
36273: PPUSH
36274: CALL_OW 263
36278: PUSH
36279: LD_INT 1
36281: NONEQUAL
36282: PUSH
36283: LD_VAR 0 2
36287: PPUSH
36288: CALL_OW 311
36292: OR
36293: AND
36294: IFFALSE 36335
// begin ComCollect ( j , x , y ) ;
36296: LD_VAR 0 2
36300: PPUSH
36301: LD_VAR 0 6
36305: PPUSH
36306: LD_VAR 0 7
36310: PPUSH
36311: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36315: LD_VAR 0 2
36319: PPUSH
36320: LD_VAR 0 8
36324: PPUSH
36325: CALL_OW 172
// exit ;
36329: POP
36330: POP
36331: POP
36332: POP
36333: GO 36343
// end ;
36335: GO 36225
36337: POP
36338: POP
// end ; end ;
36339: GO 35714
36341: POP
36342: POP
// end ; end_of_file end_of_file
36343: PPOPN 9
36345: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36346: LD_INT 0
36348: PPUSH
36349: PPUSH
// if exist_mode then
36350: LD_VAR 0 2
36354: IFFALSE 36400
// begin unit := CreateCharacter ( prefix & ident ) ;
36356: LD_ADDR_VAR 0 5
36360: PUSH
36361: LD_VAR 0 3
36365: PUSH
36366: LD_VAR 0 1
36370: STR
36371: PPUSH
36372: CALL_OW 34
36376: ST_TO_ADDR
// if unit then
36377: LD_VAR 0 5
36381: IFFALSE 36398
// DeleteCharacters ( prefix & ident ) ;
36383: LD_VAR 0 3
36387: PUSH
36388: LD_VAR 0 1
36392: STR
36393: PPUSH
36394: CALL_OW 40
// end else
36398: GO 36415
// unit := NewCharacter ( ident ) ;
36400: LD_ADDR_VAR 0 5
36404: PUSH
36405: LD_VAR 0 1
36409: PPUSH
36410: CALL_OW 25
36414: ST_TO_ADDR
// result := unit ;
36415: LD_ADDR_VAR 0 4
36419: PUSH
36420: LD_VAR 0 5
36424: ST_TO_ADDR
// end ;
36425: LD_VAR 0 4
36429: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
36430: LD_INT 0
36432: PPUSH
36433: PPUSH
// if exist_mode then
36434: LD_VAR 0 2
36438: IFFALSE 36463
// unit := CreateCharacter ( prefix & ident ) else
36440: LD_ADDR_VAR 0 5
36444: PUSH
36445: LD_VAR 0 3
36449: PUSH
36450: LD_VAR 0 1
36454: STR
36455: PPUSH
36456: CALL_OW 34
36460: ST_TO_ADDR
36461: GO 36478
// unit := NewCharacter ( ident ) ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_VAR 0 1
36472: PPUSH
36473: CALL_OW 25
36477: ST_TO_ADDR
// result := unit ;
36478: LD_ADDR_VAR 0 4
36482: PUSH
36483: LD_VAR 0 5
36487: ST_TO_ADDR
// end ;
36488: LD_VAR 0 4
36492: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36493: LD_INT 0
36495: PPUSH
36496: PPUSH
// if not side or not nation then
36497: LD_VAR 0 1
36501: NOT
36502: PUSH
36503: LD_VAR 0 2
36507: NOT
36508: OR
36509: IFFALSE 36513
// exit ;
36511: GO 37281
// case nation of nation_american :
36513: LD_VAR 0 2
36517: PUSH
36518: LD_INT 1
36520: DOUBLE
36521: EQUAL
36522: IFTRUE 36526
36524: GO 36740
36526: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36527: LD_ADDR_VAR 0 4
36531: PUSH
36532: LD_INT 35
36534: PUSH
36535: LD_INT 45
36537: PUSH
36538: LD_INT 46
36540: PUSH
36541: LD_INT 47
36543: PUSH
36544: LD_INT 82
36546: PUSH
36547: LD_INT 83
36549: PUSH
36550: LD_INT 84
36552: PUSH
36553: LD_INT 85
36555: PUSH
36556: LD_INT 86
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: LD_INT 6
36567: PUSH
36568: LD_INT 15
36570: PUSH
36571: LD_INT 16
36573: PUSH
36574: LD_INT 7
36576: PUSH
36577: LD_INT 12
36579: PUSH
36580: LD_INT 13
36582: PUSH
36583: LD_INT 10
36585: PUSH
36586: LD_INT 14
36588: PUSH
36589: LD_INT 20
36591: PUSH
36592: LD_INT 21
36594: PUSH
36595: LD_INT 22
36597: PUSH
36598: LD_INT 25
36600: PUSH
36601: LD_INT 32
36603: PUSH
36604: LD_INT 27
36606: PUSH
36607: LD_INT 36
36609: PUSH
36610: LD_INT 69
36612: PUSH
36613: LD_INT 39
36615: PUSH
36616: LD_INT 34
36618: PUSH
36619: LD_INT 40
36621: PUSH
36622: LD_INT 48
36624: PUSH
36625: LD_INT 49
36627: PUSH
36628: LD_INT 50
36630: PUSH
36631: LD_INT 51
36633: PUSH
36634: LD_INT 52
36636: PUSH
36637: LD_INT 53
36639: PUSH
36640: LD_INT 54
36642: PUSH
36643: LD_INT 55
36645: PUSH
36646: LD_INT 56
36648: PUSH
36649: LD_INT 57
36651: PUSH
36652: LD_INT 58
36654: PUSH
36655: LD_INT 59
36657: PUSH
36658: LD_INT 60
36660: PUSH
36661: LD_INT 61
36663: PUSH
36664: LD_INT 62
36666: PUSH
36667: LD_INT 80
36669: PUSH
36670: LD_INT 82
36672: PUSH
36673: LD_INT 83
36675: PUSH
36676: LD_INT 84
36678: PUSH
36679: LD_INT 85
36681: PUSH
36682: LD_INT 86
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: ST_TO_ADDR
36738: GO 37205
36740: LD_INT 2
36742: DOUBLE
36743: EQUAL
36744: IFTRUE 36748
36746: GO 36974
36748: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36749: LD_ADDR_VAR 0 4
36753: PUSH
36754: LD_INT 35
36756: PUSH
36757: LD_INT 45
36759: PUSH
36760: LD_INT 46
36762: PUSH
36763: LD_INT 47
36765: PUSH
36766: LD_INT 82
36768: PUSH
36769: LD_INT 83
36771: PUSH
36772: LD_INT 84
36774: PUSH
36775: LD_INT 85
36777: PUSH
36778: LD_INT 87
36780: PUSH
36781: LD_INT 70
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: LD_INT 11
36789: PUSH
36790: LD_INT 3
36792: PUSH
36793: LD_INT 4
36795: PUSH
36796: LD_INT 5
36798: PUSH
36799: LD_INT 6
36801: PUSH
36802: LD_INT 15
36804: PUSH
36805: LD_INT 18
36807: PUSH
36808: LD_INT 7
36810: PUSH
36811: LD_INT 17
36813: PUSH
36814: LD_INT 8
36816: PUSH
36817: LD_INT 20
36819: PUSH
36820: LD_INT 21
36822: PUSH
36823: LD_INT 22
36825: PUSH
36826: LD_INT 72
36828: PUSH
36829: LD_INT 26
36831: PUSH
36832: LD_INT 69
36834: PUSH
36835: LD_INT 39
36837: PUSH
36838: LD_INT 40
36840: PUSH
36841: LD_INT 41
36843: PUSH
36844: LD_INT 42
36846: PUSH
36847: LD_INT 43
36849: PUSH
36850: LD_INT 48
36852: PUSH
36853: LD_INT 49
36855: PUSH
36856: LD_INT 50
36858: PUSH
36859: LD_INT 51
36861: PUSH
36862: LD_INT 52
36864: PUSH
36865: LD_INT 53
36867: PUSH
36868: LD_INT 54
36870: PUSH
36871: LD_INT 55
36873: PUSH
36874: LD_INT 56
36876: PUSH
36877: LD_INT 60
36879: PUSH
36880: LD_INT 61
36882: PUSH
36883: LD_INT 62
36885: PUSH
36886: LD_INT 66
36888: PUSH
36889: LD_INT 67
36891: PUSH
36892: LD_INT 68
36894: PUSH
36895: LD_INT 81
36897: PUSH
36898: LD_INT 82
36900: PUSH
36901: LD_INT 83
36903: PUSH
36904: LD_INT 84
36906: PUSH
36907: LD_INT 85
36909: PUSH
36910: LD_INT 87
36912: PUSH
36913: LD_INT 88
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: ST_TO_ADDR
36972: GO 37205
36974: LD_INT 3
36976: DOUBLE
36977: EQUAL
36978: IFTRUE 36982
36980: GO 37204
36982: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36983: LD_ADDR_VAR 0 4
36987: PUSH
36988: LD_INT 46
36990: PUSH
36991: LD_INT 47
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: LD_INT 82
37002: PUSH
37003: LD_INT 83
37005: PUSH
37006: LD_INT 84
37008: PUSH
37009: LD_INT 85
37011: PUSH
37012: LD_INT 86
37014: PUSH
37015: LD_INT 11
37017: PUSH
37018: LD_INT 9
37020: PUSH
37021: LD_INT 20
37023: PUSH
37024: LD_INT 19
37026: PUSH
37027: LD_INT 21
37029: PUSH
37030: LD_INT 24
37032: PUSH
37033: LD_INT 22
37035: PUSH
37036: LD_INT 25
37038: PUSH
37039: LD_INT 28
37041: PUSH
37042: LD_INT 29
37044: PUSH
37045: LD_INT 30
37047: PUSH
37048: LD_INT 31
37050: PUSH
37051: LD_INT 37
37053: PUSH
37054: LD_INT 38
37056: PUSH
37057: LD_INT 32
37059: PUSH
37060: LD_INT 27
37062: PUSH
37063: LD_INT 33
37065: PUSH
37066: LD_INT 69
37068: PUSH
37069: LD_INT 39
37071: PUSH
37072: LD_INT 34
37074: PUSH
37075: LD_INT 40
37077: PUSH
37078: LD_INT 71
37080: PUSH
37081: LD_INT 23
37083: PUSH
37084: LD_INT 44
37086: PUSH
37087: LD_INT 48
37089: PUSH
37090: LD_INT 49
37092: PUSH
37093: LD_INT 50
37095: PUSH
37096: LD_INT 51
37098: PUSH
37099: LD_INT 52
37101: PUSH
37102: LD_INT 53
37104: PUSH
37105: LD_INT 54
37107: PUSH
37108: LD_INT 55
37110: PUSH
37111: LD_INT 56
37113: PUSH
37114: LD_INT 57
37116: PUSH
37117: LD_INT 58
37119: PUSH
37120: LD_INT 59
37122: PUSH
37123: LD_INT 63
37125: PUSH
37126: LD_INT 64
37128: PUSH
37129: LD_INT 65
37131: PUSH
37132: LD_INT 82
37134: PUSH
37135: LD_INT 83
37137: PUSH
37138: LD_INT 84
37140: PUSH
37141: LD_INT 85
37143: PUSH
37144: LD_INT 86
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: ST_TO_ADDR
37202: GO 37205
37204: POP
// if state > - 1 and state < 3 then
37205: LD_VAR 0 3
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: GREATER
37214: PUSH
37215: LD_VAR 0 3
37219: PUSH
37220: LD_INT 3
37222: LESS
37223: AND
37224: IFFALSE 37281
// for i in result do
37226: LD_ADDR_VAR 0 5
37230: PUSH
37231: LD_VAR 0 4
37235: PUSH
37236: FOR_IN
37237: IFFALSE 37279
// if GetTech ( i , side ) <> state then
37239: LD_VAR 0 5
37243: PPUSH
37244: LD_VAR 0 1
37248: PPUSH
37249: CALL_OW 321
37253: PUSH
37254: LD_VAR 0 3
37258: NONEQUAL
37259: IFFALSE 37277
// result := result diff i ;
37261: LD_ADDR_VAR 0 4
37265: PUSH
37266: LD_VAR 0 4
37270: PUSH
37271: LD_VAR 0 5
37275: DIFF
37276: ST_TO_ADDR
37277: GO 37236
37279: POP
37280: POP
// end ;
37281: LD_VAR 0 4
37285: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37286: LD_INT 0
37288: PPUSH
37289: PPUSH
37290: PPUSH
// result := true ;
37291: LD_ADDR_VAR 0 3
37295: PUSH
37296: LD_INT 1
37298: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37299: LD_ADDR_VAR 0 5
37303: PUSH
37304: LD_VAR 0 2
37308: PPUSH
37309: CALL_OW 480
37313: ST_TO_ADDR
// if not tmp then
37314: LD_VAR 0 5
37318: NOT
37319: IFFALSE 37323
// exit ;
37321: GO 37372
// for i in tmp do
37323: LD_ADDR_VAR 0 4
37327: PUSH
37328: LD_VAR 0 5
37332: PUSH
37333: FOR_IN
37334: IFFALSE 37370
// if GetTech ( i , side ) <> state_researched then
37336: LD_VAR 0 4
37340: PPUSH
37341: LD_VAR 0 1
37345: PPUSH
37346: CALL_OW 321
37350: PUSH
37351: LD_INT 2
37353: NONEQUAL
37354: IFFALSE 37368
// begin result := false ;
37356: LD_ADDR_VAR 0 3
37360: PUSH
37361: LD_INT 0
37363: ST_TO_ADDR
// exit ;
37364: POP
37365: POP
37366: GO 37372
// end ;
37368: GO 37333
37370: POP
37371: POP
// end ;
37372: LD_VAR 0 3
37376: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37377: LD_INT 0
37379: PPUSH
37380: PPUSH
37381: PPUSH
37382: PPUSH
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
37387: PPUSH
37388: PPUSH
37389: PPUSH
37390: PPUSH
37391: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37392: LD_VAR 0 1
37396: NOT
37397: PUSH
37398: LD_VAR 0 1
37402: PPUSH
37403: CALL_OW 257
37407: PUSH
37408: LD_INT 9
37410: NONEQUAL
37411: OR
37412: IFFALSE 37416
// exit ;
37414: GO 37989
// side := GetSide ( unit ) ;
37416: LD_ADDR_VAR 0 9
37420: PUSH
37421: LD_VAR 0 1
37425: PPUSH
37426: CALL_OW 255
37430: ST_TO_ADDR
// tech_space := tech_spacanom ;
37431: LD_ADDR_VAR 0 12
37435: PUSH
37436: LD_INT 29
37438: ST_TO_ADDR
// tech_time := tech_taurad ;
37439: LD_ADDR_VAR 0 13
37443: PUSH
37444: LD_INT 28
37446: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37447: LD_ADDR_VAR 0 11
37451: PUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: CALL_OW 310
37461: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37462: LD_VAR 0 11
37466: PPUSH
37467: CALL_OW 247
37471: PUSH
37472: LD_INT 2
37474: EQUAL
37475: IFFALSE 37479
// exit ;
37477: GO 37989
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37479: LD_ADDR_VAR 0 8
37483: PUSH
37484: LD_INT 81
37486: PUSH
37487: LD_VAR 0 9
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 3
37498: PUSH
37499: LD_INT 21
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PPUSH
37517: CALL_OW 69
37521: ST_TO_ADDR
// if not tmp then
37522: LD_VAR 0 8
37526: NOT
37527: IFFALSE 37531
// exit ;
37529: GO 37989
// if in_unit then
37531: LD_VAR 0 11
37535: IFFALSE 37559
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37537: LD_ADDR_VAR 0 10
37541: PUSH
37542: LD_VAR 0 8
37546: PPUSH
37547: LD_VAR 0 11
37551: PPUSH
37552: CALL_OW 74
37556: ST_TO_ADDR
37557: GO 37579
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37559: LD_ADDR_VAR 0 10
37563: PUSH
37564: LD_VAR 0 8
37568: PPUSH
37569: LD_VAR 0 1
37573: PPUSH
37574: CALL_OW 74
37578: ST_TO_ADDR
// if not enemy then
37579: LD_VAR 0 10
37583: NOT
37584: IFFALSE 37588
// exit ;
37586: GO 37989
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37588: LD_VAR 0 11
37592: PUSH
37593: LD_VAR 0 11
37597: PPUSH
37598: LD_VAR 0 10
37602: PPUSH
37603: CALL_OW 296
37607: PUSH
37608: LD_INT 13
37610: GREATER
37611: AND
37612: PUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: LD_VAR 0 10
37622: PPUSH
37623: CALL_OW 296
37627: PUSH
37628: LD_INT 12
37630: GREATER
37631: OR
37632: IFFALSE 37636
// exit ;
37634: GO 37989
// missile := [ 1 ] ;
37636: LD_ADDR_VAR 0 14
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37647: LD_VAR 0 9
37651: PPUSH
37652: LD_VAR 0 12
37656: PPUSH
37657: CALL_OW 325
37661: IFFALSE 37690
// missile := Replace ( missile , missile + 1 , 2 ) ;
37663: LD_ADDR_VAR 0 14
37667: PUSH
37668: LD_VAR 0 14
37672: PPUSH
37673: LD_VAR 0 14
37677: PUSH
37678: LD_INT 1
37680: PLUS
37681: PPUSH
37682: LD_INT 2
37684: PPUSH
37685: CALL_OW 1
37689: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37690: LD_VAR 0 9
37694: PPUSH
37695: LD_VAR 0 13
37699: PPUSH
37700: CALL_OW 325
37704: PUSH
37705: LD_VAR 0 10
37709: PPUSH
37710: CALL_OW 255
37714: PPUSH
37715: LD_VAR 0 13
37719: PPUSH
37720: CALL_OW 325
37724: NOT
37725: AND
37726: IFFALSE 37755
// missile := Replace ( missile , missile + 1 , 3 ) ;
37728: LD_ADDR_VAR 0 14
37732: PUSH
37733: LD_VAR 0 14
37737: PPUSH
37738: LD_VAR 0 14
37742: PUSH
37743: LD_INT 1
37745: PLUS
37746: PPUSH
37747: LD_INT 3
37749: PPUSH
37750: CALL_OW 1
37754: ST_TO_ADDR
// if missile < 2 then
37755: LD_VAR 0 14
37759: PUSH
37760: LD_INT 2
37762: LESS
37763: IFFALSE 37767
// exit ;
37765: GO 37989
// x := GetX ( enemy ) ;
37767: LD_ADDR_VAR 0 4
37771: PUSH
37772: LD_VAR 0 10
37776: PPUSH
37777: CALL_OW 250
37781: ST_TO_ADDR
// y := GetY ( enemy ) ;
37782: LD_ADDR_VAR 0 5
37786: PUSH
37787: LD_VAR 0 10
37791: PPUSH
37792: CALL_OW 251
37796: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37797: LD_ADDR_VAR 0 6
37801: PUSH
37802: LD_VAR 0 4
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PPUSH
37811: LD_INT 1
37813: PPUSH
37814: CALL_OW 12
37818: PLUS
37819: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37820: LD_ADDR_VAR 0 7
37824: PUSH
37825: LD_VAR 0 5
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PPUSH
37834: LD_INT 1
37836: PPUSH
37837: CALL_OW 12
37841: PLUS
37842: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37843: LD_VAR 0 6
37847: PPUSH
37848: LD_VAR 0 7
37852: PPUSH
37853: CALL_OW 488
37857: NOT
37858: IFFALSE 37880
// begin _x := x ;
37860: LD_ADDR_VAR 0 6
37864: PUSH
37865: LD_VAR 0 4
37869: ST_TO_ADDR
// _y := y ;
37870: LD_ADDR_VAR 0 7
37874: PUSH
37875: LD_VAR 0 5
37879: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37880: LD_ADDR_VAR 0 3
37884: PUSH
37885: LD_INT 1
37887: PPUSH
37888: LD_VAR 0 14
37892: PPUSH
37893: CALL_OW 12
37897: ST_TO_ADDR
// case i of 1 :
37898: LD_VAR 0 3
37902: PUSH
37903: LD_INT 1
37905: DOUBLE
37906: EQUAL
37907: IFTRUE 37911
37909: GO 37928
37911: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37912: LD_VAR 0 1
37916: PPUSH
37917: LD_VAR 0 10
37921: PPUSH
37922: CALL_OW 115
37926: GO 37989
37928: LD_INT 2
37930: DOUBLE
37931: EQUAL
37932: IFTRUE 37936
37934: GO 37958
37936: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37937: LD_VAR 0 1
37941: PPUSH
37942: LD_VAR 0 6
37946: PPUSH
37947: LD_VAR 0 7
37951: PPUSH
37952: CALL_OW 153
37956: GO 37989
37958: LD_INT 3
37960: DOUBLE
37961: EQUAL
37962: IFTRUE 37966
37964: GO 37988
37966: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37967: LD_VAR 0 1
37971: PPUSH
37972: LD_VAR 0 6
37976: PPUSH
37977: LD_VAR 0 7
37981: PPUSH
37982: CALL_OW 154
37986: GO 37989
37988: POP
// end ;
37989: LD_VAR 0 2
37993: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37994: LD_INT 0
37996: PPUSH
37997: PPUSH
37998: PPUSH
37999: PPUSH
38000: PPUSH
38001: PPUSH
// if not unit or not building then
38002: LD_VAR 0 1
38006: NOT
38007: PUSH
38008: LD_VAR 0 2
38012: NOT
38013: OR
38014: IFFALSE 38018
// exit ;
38016: GO 38176
// x := GetX ( building ) ;
38018: LD_ADDR_VAR 0 5
38022: PUSH
38023: LD_VAR 0 2
38027: PPUSH
38028: CALL_OW 250
38032: ST_TO_ADDR
// y := GetY ( building ) ;
38033: LD_ADDR_VAR 0 6
38037: PUSH
38038: LD_VAR 0 2
38042: PPUSH
38043: CALL_OW 251
38047: ST_TO_ADDR
// for i = 0 to 5 do
38048: LD_ADDR_VAR 0 4
38052: PUSH
38053: DOUBLE
38054: LD_INT 0
38056: DEC
38057: ST_TO_ADDR
38058: LD_INT 5
38060: PUSH
38061: FOR_TO
38062: IFFALSE 38174
// begin _x := ShiftX ( x , i , 3 ) ;
38064: LD_ADDR_VAR 0 7
38068: PUSH
38069: LD_VAR 0 5
38073: PPUSH
38074: LD_VAR 0 4
38078: PPUSH
38079: LD_INT 3
38081: PPUSH
38082: CALL_OW 272
38086: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38087: LD_ADDR_VAR 0 8
38091: PUSH
38092: LD_VAR 0 6
38096: PPUSH
38097: LD_VAR 0 4
38101: PPUSH
38102: LD_INT 3
38104: PPUSH
38105: CALL_OW 273
38109: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38110: LD_VAR 0 7
38114: PPUSH
38115: LD_VAR 0 8
38119: PPUSH
38120: CALL_OW 488
38124: NOT
38125: IFFALSE 38129
// continue ;
38127: GO 38061
// if HexInfo ( _x , _y ) = 0 then
38129: LD_VAR 0 7
38133: PPUSH
38134: LD_VAR 0 8
38138: PPUSH
38139: CALL_OW 428
38143: PUSH
38144: LD_INT 0
38146: EQUAL
38147: IFFALSE 38172
// begin ComMoveXY ( unit , _x , _y ) ;
38149: LD_VAR 0 1
38153: PPUSH
38154: LD_VAR 0 7
38158: PPUSH
38159: LD_VAR 0 8
38163: PPUSH
38164: CALL_OW 111
// exit ;
38168: POP
38169: POP
38170: GO 38176
// end ; end ;
38172: GO 38061
38174: POP
38175: POP
// end ;
38176: LD_VAR 0 3
38180: RET
// export function ScanBase ( side , base_area ) ; begin
38181: LD_INT 0
38183: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38184: LD_ADDR_VAR 0 3
38188: PUSH
38189: LD_VAR 0 2
38193: PPUSH
38194: LD_INT 81
38196: PUSH
38197: LD_VAR 0 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PPUSH
38206: CALL_OW 70
38210: ST_TO_ADDR
// end ;
38211: LD_VAR 0 3
38215: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38216: LD_INT 0
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
// result := false ;
38222: LD_ADDR_VAR 0 2
38226: PUSH
38227: LD_INT 0
38229: ST_TO_ADDR
// side := GetSide ( unit ) ;
38230: LD_ADDR_VAR 0 3
38234: PUSH
38235: LD_VAR 0 1
38239: PPUSH
38240: CALL_OW 255
38244: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38245: LD_ADDR_VAR 0 4
38249: PUSH
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL_OW 248
38259: ST_TO_ADDR
// case nat of 1 :
38260: LD_VAR 0 4
38264: PUSH
38265: LD_INT 1
38267: DOUBLE
38268: EQUAL
38269: IFTRUE 38273
38271: GO 38284
38273: POP
// tech := tech_lassight ; 2 :
38274: LD_ADDR_VAR 0 5
38278: PUSH
38279: LD_INT 12
38281: ST_TO_ADDR
38282: GO 38323
38284: LD_INT 2
38286: DOUBLE
38287: EQUAL
38288: IFTRUE 38292
38290: GO 38303
38292: POP
// tech := tech_mortar ; 3 :
38293: LD_ADDR_VAR 0 5
38297: PUSH
38298: LD_INT 41
38300: ST_TO_ADDR
38301: GO 38323
38303: LD_INT 3
38305: DOUBLE
38306: EQUAL
38307: IFTRUE 38311
38309: GO 38322
38311: POP
// tech := tech_bazooka ; end ;
38312: LD_ADDR_VAR 0 5
38316: PUSH
38317: LD_INT 44
38319: ST_TO_ADDR
38320: GO 38323
38322: POP
// if Researched ( side , tech ) then
38323: LD_VAR 0 3
38327: PPUSH
38328: LD_VAR 0 5
38332: PPUSH
38333: CALL_OW 325
38337: IFFALSE 38364
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38339: LD_ADDR_VAR 0 2
38343: PUSH
38344: LD_INT 5
38346: PUSH
38347: LD_INT 8
38349: PUSH
38350: LD_INT 9
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: PUSH
38358: LD_VAR 0 4
38362: ARRAY
38363: ST_TO_ADDR
// end ;
38364: LD_VAR 0 2
38368: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38369: LD_INT 0
38371: PPUSH
38372: PPUSH
38373: PPUSH
// if not mines then
38374: LD_VAR 0 2
38378: NOT
38379: IFFALSE 38383
// exit ;
38381: GO 38527
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38383: LD_ADDR_VAR 0 5
38387: PUSH
38388: LD_INT 81
38390: PUSH
38391: LD_VAR 0 1
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 3
38402: PUSH
38403: LD_INT 21
38405: PUSH
38406: LD_INT 3
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PPUSH
38421: CALL_OW 69
38425: ST_TO_ADDR
// for i in mines do
38426: LD_ADDR_VAR 0 4
38430: PUSH
38431: LD_VAR 0 2
38435: PUSH
38436: FOR_IN
38437: IFFALSE 38525
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38439: LD_VAR 0 4
38443: PUSH
38444: LD_INT 1
38446: ARRAY
38447: PPUSH
38448: LD_VAR 0 4
38452: PUSH
38453: LD_INT 2
38455: ARRAY
38456: PPUSH
38457: CALL_OW 458
38461: NOT
38462: IFFALSE 38466
// continue ;
38464: GO 38436
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38466: LD_VAR 0 4
38470: PUSH
38471: LD_INT 1
38473: ARRAY
38474: PPUSH
38475: LD_VAR 0 4
38479: PUSH
38480: LD_INT 2
38482: ARRAY
38483: PPUSH
38484: CALL_OW 428
38488: PUSH
38489: LD_VAR 0 5
38493: IN
38494: IFFALSE 38523
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38496: LD_VAR 0 4
38500: PUSH
38501: LD_INT 1
38503: ARRAY
38504: PPUSH
38505: LD_VAR 0 4
38509: PUSH
38510: LD_INT 2
38512: ARRAY
38513: PPUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: CALL_OW 456
// end ;
38523: GO 38436
38525: POP
38526: POP
// end ;
38527: LD_VAR 0 3
38531: RET
// export function Count ( array ) ; begin
38532: LD_INT 0
38534: PPUSH
// result := array + 0 ;
38535: LD_ADDR_VAR 0 2
38539: PUSH
38540: LD_VAR 0 1
38544: PUSH
38545: LD_INT 0
38547: PLUS
38548: ST_TO_ADDR
// end ;
38549: LD_VAR 0 2
38553: RET
// export function IsEmpty ( building ) ; begin
38554: LD_INT 0
38556: PPUSH
// if not building then
38557: LD_VAR 0 1
38561: NOT
38562: IFFALSE 38566
// exit ;
38564: GO 38609
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38566: LD_ADDR_VAR 0 2
38570: PUSH
38571: LD_VAR 0 1
38575: PUSH
38576: LD_INT 22
38578: PUSH
38579: LD_VAR 0 1
38583: PPUSH
38584: CALL_OW 255
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 58
38595: PUSH
38596: EMPTY
38597: LIST
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PPUSH
38603: CALL_OW 69
38607: IN
38608: ST_TO_ADDR
// end ;
38609: LD_VAR 0 2
38613: RET
// export function IsNotFull ( building ) ; var places ; begin
38614: LD_INT 0
38616: PPUSH
38617: PPUSH
// if not building then
38618: LD_VAR 0 1
38622: NOT
38623: IFFALSE 38627
// exit ;
38625: GO 38655
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38627: LD_ADDR_VAR 0 2
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: LD_INT 3
38639: PUSH
38640: LD_INT 62
38642: PUSH
38643: EMPTY
38644: LIST
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PPUSH
38650: CALL_OW 72
38654: ST_TO_ADDR
// end ;
38655: LD_VAR 0 2
38659: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38660: LD_INT 0
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
// tmp := [ ] ;
38666: LD_ADDR_VAR 0 3
38670: PUSH
38671: EMPTY
38672: ST_TO_ADDR
// list := [ ] ;
38673: LD_ADDR_VAR 0 5
38677: PUSH
38678: EMPTY
38679: ST_TO_ADDR
// for i = 16 to 25 do
38680: LD_ADDR_VAR 0 4
38684: PUSH
38685: DOUBLE
38686: LD_INT 16
38688: DEC
38689: ST_TO_ADDR
38690: LD_INT 25
38692: PUSH
38693: FOR_TO
38694: IFFALSE 38767
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_VAR 0 3
38705: PUSH
38706: LD_INT 22
38708: PUSH
38709: LD_VAR 0 1
38713: PPUSH
38714: CALL_OW 255
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 91
38725: PUSH
38726: LD_VAR 0 1
38730: PUSH
38731: LD_INT 6
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 30
38741: PUSH
38742: LD_VAR 0 4
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: PPUSH
38759: CALL_OW 69
38763: ADD
38764: ST_TO_ADDR
38765: GO 38693
38767: POP
38768: POP
// for i = 1 to tmp do
38769: LD_ADDR_VAR 0 4
38773: PUSH
38774: DOUBLE
38775: LD_INT 1
38777: DEC
38778: ST_TO_ADDR
38779: LD_VAR 0 3
38783: PUSH
38784: FOR_TO
38785: IFFALSE 38873
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38787: LD_ADDR_VAR 0 5
38791: PUSH
38792: LD_VAR 0 5
38796: PUSH
38797: LD_VAR 0 3
38801: PUSH
38802: LD_VAR 0 4
38806: ARRAY
38807: PPUSH
38808: CALL_OW 266
38812: PUSH
38813: LD_VAR 0 3
38817: PUSH
38818: LD_VAR 0 4
38822: ARRAY
38823: PPUSH
38824: CALL_OW 250
38828: PUSH
38829: LD_VAR 0 3
38833: PUSH
38834: LD_VAR 0 4
38838: ARRAY
38839: PPUSH
38840: CALL_OW 251
38844: PUSH
38845: LD_VAR 0 3
38849: PUSH
38850: LD_VAR 0 4
38854: ARRAY
38855: PPUSH
38856: CALL_OW 254
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: ADD
38870: ST_TO_ADDR
38871: GO 38784
38873: POP
38874: POP
// result := list ;
38875: LD_ADDR_VAR 0 2
38879: PUSH
38880: LD_VAR 0 5
38884: ST_TO_ADDR
// end ;
38885: LD_VAR 0 2
38889: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38890: LD_INT 0
38892: PPUSH
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
// if not factory then
38899: LD_VAR 0 1
38903: NOT
38904: IFFALSE 38908
// exit ;
38906: GO 39501
// if control = control_apeman then
38908: LD_VAR 0 4
38912: PUSH
38913: LD_INT 5
38915: EQUAL
38916: IFFALSE 39025
// begin tmp := UnitsInside ( factory ) ;
38918: LD_ADDR_VAR 0 8
38922: PUSH
38923: LD_VAR 0 1
38927: PPUSH
38928: CALL_OW 313
38932: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38933: LD_VAR 0 8
38937: PPUSH
38938: LD_INT 25
38940: PUSH
38941: LD_INT 12
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PPUSH
38948: CALL_OW 72
38952: NOT
38953: IFFALSE 38963
// control := control_manual ;
38955: LD_ADDR_VAR 0 4
38959: PUSH
38960: LD_INT 1
38962: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38963: LD_ADDR_VAR 0 8
38967: PUSH
38968: LD_VAR 0 1
38972: PPUSH
38973: CALL 38660 0 1
38977: ST_TO_ADDR
// if tmp then
38978: LD_VAR 0 8
38982: IFFALSE 39025
// begin for i in tmp do
38984: LD_ADDR_VAR 0 7
38988: PUSH
38989: LD_VAR 0 8
38993: PUSH
38994: FOR_IN
38995: IFFALSE 39023
// if i [ 1 ] = b_ext_radio then
38997: LD_VAR 0 7
39001: PUSH
39002: LD_INT 1
39004: ARRAY
39005: PUSH
39006: LD_INT 22
39008: EQUAL
39009: IFFALSE 39021
// begin control := control_remote ;
39011: LD_ADDR_VAR 0 4
39015: PUSH
39016: LD_INT 2
39018: ST_TO_ADDR
// break ;
39019: GO 39023
// end ;
39021: GO 38994
39023: POP
39024: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39025: LD_VAR 0 1
39029: PPUSH
39030: LD_VAR 0 2
39034: PPUSH
39035: LD_VAR 0 3
39039: PPUSH
39040: LD_VAR 0 4
39044: PPUSH
39045: LD_VAR 0 5
39049: PPUSH
39050: CALL_OW 448
39054: IFFALSE 39089
// begin result := [ chassis , engine , control , weapon ] ;
39056: LD_ADDR_VAR 0 6
39060: PUSH
39061: LD_VAR 0 2
39065: PUSH
39066: LD_VAR 0 3
39070: PUSH
39071: LD_VAR 0 4
39075: PUSH
39076: LD_VAR 0 5
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: ST_TO_ADDR
// exit ;
39087: GO 39501
// end ; _chassis := AvailableChassisList ( factory ) ;
39089: LD_ADDR_VAR 0 9
39093: PUSH
39094: LD_VAR 0 1
39098: PPUSH
39099: CALL_OW 475
39103: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39104: LD_ADDR_VAR 0 11
39108: PUSH
39109: LD_VAR 0 1
39113: PPUSH
39114: CALL_OW 476
39118: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39119: LD_ADDR_VAR 0 12
39123: PUSH
39124: LD_VAR 0 1
39128: PPUSH
39129: CALL_OW 477
39133: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39134: LD_ADDR_VAR 0 10
39138: PUSH
39139: LD_VAR 0 1
39143: PPUSH
39144: CALL_OW 478
39148: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39149: LD_VAR 0 9
39153: NOT
39154: PUSH
39155: LD_VAR 0 11
39159: NOT
39160: OR
39161: PUSH
39162: LD_VAR 0 12
39166: NOT
39167: OR
39168: PUSH
39169: LD_VAR 0 10
39173: NOT
39174: OR
39175: IFFALSE 39210
// begin result := [ chassis , engine , control , weapon ] ;
39177: LD_ADDR_VAR 0 6
39181: PUSH
39182: LD_VAR 0 2
39186: PUSH
39187: LD_VAR 0 3
39191: PUSH
39192: LD_VAR 0 4
39196: PUSH
39197: LD_VAR 0 5
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
// exit ;
39208: GO 39501
// end ; if not chassis in _chassis then
39210: LD_VAR 0 2
39214: PUSH
39215: LD_VAR 0 9
39219: IN
39220: NOT
39221: IFFALSE 39247
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39223: LD_ADDR_VAR 0 2
39227: PUSH
39228: LD_VAR 0 9
39232: PUSH
39233: LD_INT 1
39235: PPUSH
39236: LD_VAR 0 9
39240: PPUSH
39241: CALL_OW 12
39245: ARRAY
39246: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39247: LD_VAR 0 2
39251: PPUSH
39252: LD_VAR 0 3
39256: PPUSH
39257: CALL 39506 0 2
39261: NOT
39262: IFFALSE 39321
// repeat engine := _engine [ 1 ] ;
39264: LD_ADDR_VAR 0 3
39268: PUSH
39269: LD_VAR 0 11
39273: PUSH
39274: LD_INT 1
39276: ARRAY
39277: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39278: LD_ADDR_VAR 0 11
39282: PUSH
39283: LD_VAR 0 11
39287: PPUSH
39288: LD_INT 1
39290: PPUSH
39291: CALL_OW 3
39295: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39296: LD_VAR 0 2
39300: PPUSH
39301: LD_VAR 0 3
39305: PPUSH
39306: CALL 39506 0 2
39310: PUSH
39311: LD_VAR 0 11
39315: PUSH
39316: EMPTY
39317: EQUAL
39318: OR
39319: IFFALSE 39264
// if not control in _control then
39321: LD_VAR 0 4
39325: PUSH
39326: LD_VAR 0 12
39330: IN
39331: NOT
39332: IFFALSE 39358
// control := _control [ rand ( 1 , _control ) ] ;
39334: LD_ADDR_VAR 0 4
39338: PUSH
39339: LD_VAR 0 12
39343: PUSH
39344: LD_INT 1
39346: PPUSH
39347: LD_VAR 0 12
39351: PPUSH
39352: CALL_OW 12
39356: ARRAY
39357: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39358: LD_VAR 0 2
39362: PPUSH
39363: LD_VAR 0 5
39367: PPUSH
39368: CALL 39726 0 2
39372: NOT
39373: IFFALSE 39432
// repeat weapon := _weapon [ 1 ] ;
39375: LD_ADDR_VAR 0 5
39379: PUSH
39380: LD_VAR 0 10
39384: PUSH
39385: LD_INT 1
39387: ARRAY
39388: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39389: LD_ADDR_VAR 0 10
39393: PUSH
39394: LD_VAR 0 10
39398: PPUSH
39399: LD_INT 1
39401: PPUSH
39402: CALL_OW 3
39406: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39407: LD_VAR 0 2
39411: PPUSH
39412: LD_VAR 0 5
39416: PPUSH
39417: CALL 39726 0 2
39421: PUSH
39422: LD_VAR 0 10
39426: PUSH
39427: EMPTY
39428: EQUAL
39429: OR
39430: IFFALSE 39375
// result := [ ] ;
39432: LD_ADDR_VAR 0 6
39436: PUSH
39437: EMPTY
39438: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39439: LD_VAR 0 1
39443: PPUSH
39444: LD_VAR 0 2
39448: PPUSH
39449: LD_VAR 0 3
39453: PPUSH
39454: LD_VAR 0 4
39458: PPUSH
39459: LD_VAR 0 5
39463: PPUSH
39464: CALL_OW 448
39468: IFFALSE 39501
// result := [ chassis , engine , control , weapon ] ;
39470: LD_ADDR_VAR 0 6
39474: PUSH
39475: LD_VAR 0 2
39479: PUSH
39480: LD_VAR 0 3
39484: PUSH
39485: LD_VAR 0 4
39489: PUSH
39490: LD_VAR 0 5
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: ST_TO_ADDR
// end ;
39501: LD_VAR 0 6
39505: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39506: LD_INT 0
39508: PPUSH
// if not chassis or not engine then
39509: LD_VAR 0 1
39513: NOT
39514: PUSH
39515: LD_VAR 0 2
39519: NOT
39520: OR
39521: IFFALSE 39525
// exit ;
39523: GO 39721
// case engine of engine_solar :
39525: LD_VAR 0 2
39529: PUSH
39530: LD_INT 2
39532: DOUBLE
39533: EQUAL
39534: IFTRUE 39538
39536: GO 39576
39538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39539: LD_ADDR_VAR 0 3
39543: PUSH
39544: LD_INT 11
39546: PUSH
39547: LD_INT 12
39549: PUSH
39550: LD_INT 13
39552: PUSH
39553: LD_INT 14
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: ST_TO_ADDR
39574: GO 39705
39576: LD_INT 1
39578: DOUBLE
39579: EQUAL
39580: IFTRUE 39584
39582: GO 39646
39584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39585: LD_ADDR_VAR 0 3
39589: PUSH
39590: LD_INT 11
39592: PUSH
39593: LD_INT 12
39595: PUSH
39596: LD_INT 13
39598: PUSH
39599: LD_INT 14
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: LD_INT 2
39607: PUSH
39608: LD_INT 3
39610: PUSH
39611: LD_INT 4
39613: PUSH
39614: LD_INT 5
39616: PUSH
39617: LD_INT 21
39619: PUSH
39620: LD_INT 23
39622: PUSH
39623: LD_INT 22
39625: PUSH
39626: LD_INT 24
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: ST_TO_ADDR
39644: GO 39705
39646: LD_INT 3
39648: DOUBLE
39649: EQUAL
39650: IFTRUE 39654
39652: GO 39704
39654: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39655: LD_ADDR_VAR 0 3
39659: PUSH
39660: LD_INT 13
39662: PUSH
39663: LD_INT 14
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: LD_INT 4
39674: PUSH
39675: LD_INT 5
39677: PUSH
39678: LD_INT 21
39680: PUSH
39681: LD_INT 22
39683: PUSH
39684: LD_INT 23
39686: PUSH
39687: LD_INT 24
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: ST_TO_ADDR
39702: GO 39705
39704: POP
// result := ( chassis in result ) ;
39705: LD_ADDR_VAR 0 3
39709: PUSH
39710: LD_VAR 0 1
39714: PUSH
39715: LD_VAR 0 3
39719: IN
39720: ST_TO_ADDR
// end ;
39721: LD_VAR 0 3
39725: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39726: LD_INT 0
39728: PPUSH
// if not chassis or not weapon then
39729: LD_VAR 0 1
39733: NOT
39734: PUSH
39735: LD_VAR 0 2
39739: NOT
39740: OR
39741: IFFALSE 39745
// exit ;
39743: GO 40805
// case weapon of us_machine_gun :
39745: LD_VAR 0 2
39749: PUSH
39750: LD_INT 2
39752: DOUBLE
39753: EQUAL
39754: IFTRUE 39758
39756: GO 39788
39758: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39759: LD_ADDR_VAR 0 3
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: LD_INT 3
39772: PUSH
39773: LD_INT 4
39775: PUSH
39776: LD_INT 5
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: ST_TO_ADDR
39786: GO 40789
39788: LD_INT 3
39790: DOUBLE
39791: EQUAL
39792: IFTRUE 39796
39794: GO 39826
39796: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39797: LD_ADDR_VAR 0 3
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: LD_INT 3
39810: PUSH
39811: LD_INT 4
39813: PUSH
39814: LD_INT 5
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: ST_TO_ADDR
39824: GO 40789
39826: LD_INT 11
39828: DOUBLE
39829: EQUAL
39830: IFTRUE 39834
39832: GO 39864
39834: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39835: LD_ADDR_VAR 0 3
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: LD_INT 3
39848: PUSH
39849: LD_INT 4
39851: PUSH
39852: LD_INT 5
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: ST_TO_ADDR
39862: GO 40789
39864: LD_INT 4
39866: DOUBLE
39867: EQUAL
39868: IFTRUE 39872
39870: GO 39898
39872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39873: LD_ADDR_VAR 0 3
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: LD_INT 3
39883: PUSH
39884: LD_INT 4
39886: PUSH
39887: LD_INT 5
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: ST_TO_ADDR
39896: GO 40789
39898: LD_INT 5
39900: DOUBLE
39901: EQUAL
39902: IFTRUE 39906
39904: GO 39932
39906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39907: LD_ADDR_VAR 0 3
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: LD_INT 4
39920: PUSH
39921: LD_INT 5
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: ST_TO_ADDR
39930: GO 40789
39932: LD_INT 9
39934: DOUBLE
39935: EQUAL
39936: IFTRUE 39940
39938: GO 39966
39940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39941: LD_ADDR_VAR 0 3
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: LD_INT 3
39951: PUSH
39952: LD_INT 4
39954: PUSH
39955: LD_INT 5
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: ST_TO_ADDR
39964: GO 40789
39966: LD_INT 7
39968: DOUBLE
39969: EQUAL
39970: IFTRUE 39974
39972: GO 40000
39974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39975: LD_ADDR_VAR 0 3
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: LD_INT 3
39985: PUSH
39986: LD_INT 4
39988: PUSH
39989: LD_INT 5
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
39998: GO 40789
40000: LD_INT 12
40002: DOUBLE
40003: EQUAL
40004: IFTRUE 40008
40006: GO 40034
40008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40009: LD_ADDR_VAR 0 3
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 3
40019: PUSH
40020: LD_INT 4
40022: PUSH
40023: LD_INT 5
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: ST_TO_ADDR
40032: GO 40789
40034: LD_INT 13
40036: DOUBLE
40037: EQUAL
40038: IFTRUE 40042
40040: GO 40068
40042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40043: LD_ADDR_VAR 0 3
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: LD_INT 4
40056: PUSH
40057: LD_INT 5
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: ST_TO_ADDR
40066: GO 40789
40068: LD_INT 14
40070: DOUBLE
40071: EQUAL
40072: IFTRUE 40076
40074: GO 40094
40076: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40077: LD_ADDR_VAR 0 3
40081: PUSH
40082: LD_INT 4
40084: PUSH
40085: LD_INT 5
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: ST_TO_ADDR
40092: GO 40789
40094: LD_INT 6
40096: DOUBLE
40097: EQUAL
40098: IFTRUE 40102
40100: GO 40120
40102: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40103: LD_ADDR_VAR 0 3
40107: PUSH
40108: LD_INT 4
40110: PUSH
40111: LD_INT 5
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: ST_TO_ADDR
40118: GO 40789
40120: LD_INT 10
40122: DOUBLE
40123: EQUAL
40124: IFTRUE 40128
40126: GO 40146
40128: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40129: LD_ADDR_VAR 0 3
40133: PUSH
40134: LD_INT 4
40136: PUSH
40137: LD_INT 5
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: ST_TO_ADDR
40144: GO 40789
40146: LD_INT 22
40148: DOUBLE
40149: EQUAL
40150: IFTRUE 40154
40152: GO 40180
40154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40155: LD_ADDR_VAR 0 3
40159: PUSH
40160: LD_INT 11
40162: PUSH
40163: LD_INT 12
40165: PUSH
40166: LD_INT 13
40168: PUSH
40169: LD_INT 14
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: ST_TO_ADDR
40178: GO 40789
40180: LD_INT 23
40182: DOUBLE
40183: EQUAL
40184: IFTRUE 40188
40186: GO 40214
40188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40189: LD_ADDR_VAR 0 3
40193: PUSH
40194: LD_INT 11
40196: PUSH
40197: LD_INT 12
40199: PUSH
40200: LD_INT 13
40202: PUSH
40203: LD_INT 14
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: ST_TO_ADDR
40212: GO 40789
40214: LD_INT 24
40216: DOUBLE
40217: EQUAL
40218: IFTRUE 40222
40220: GO 40248
40222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40223: LD_ADDR_VAR 0 3
40227: PUSH
40228: LD_INT 11
40230: PUSH
40231: LD_INT 12
40233: PUSH
40234: LD_INT 13
40236: PUSH
40237: LD_INT 14
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: ST_TO_ADDR
40246: GO 40789
40248: LD_INT 30
40250: DOUBLE
40251: EQUAL
40252: IFTRUE 40256
40254: GO 40282
40256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40257: LD_ADDR_VAR 0 3
40261: PUSH
40262: LD_INT 11
40264: PUSH
40265: LD_INT 12
40267: PUSH
40268: LD_INT 13
40270: PUSH
40271: LD_INT 14
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: ST_TO_ADDR
40280: GO 40789
40282: LD_INT 25
40284: DOUBLE
40285: EQUAL
40286: IFTRUE 40290
40288: GO 40308
40290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40291: LD_ADDR_VAR 0 3
40295: PUSH
40296: LD_INT 13
40298: PUSH
40299: LD_INT 14
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: ST_TO_ADDR
40306: GO 40789
40308: LD_INT 27
40310: DOUBLE
40311: EQUAL
40312: IFTRUE 40316
40314: GO 40334
40316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40317: LD_ADDR_VAR 0 3
40321: PUSH
40322: LD_INT 13
40324: PUSH
40325: LD_INT 14
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: ST_TO_ADDR
40332: GO 40789
40334: LD_INT 92
40336: DOUBLE
40337: EQUAL
40338: IFTRUE 40342
40340: GO 40368
40342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40343: LD_ADDR_VAR 0 3
40347: PUSH
40348: LD_INT 11
40350: PUSH
40351: LD_INT 12
40353: PUSH
40354: LD_INT 13
40356: PUSH
40357: LD_INT 14
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: ST_TO_ADDR
40366: GO 40789
40368: LD_INT 28
40370: DOUBLE
40371: EQUAL
40372: IFTRUE 40376
40374: GO 40394
40376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40377: LD_ADDR_VAR 0 3
40381: PUSH
40382: LD_INT 13
40384: PUSH
40385: LD_INT 14
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: ST_TO_ADDR
40392: GO 40789
40394: LD_INT 29
40396: DOUBLE
40397: EQUAL
40398: IFTRUE 40402
40400: GO 40420
40402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40403: LD_ADDR_VAR 0 3
40407: PUSH
40408: LD_INT 13
40410: PUSH
40411: LD_INT 14
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: ST_TO_ADDR
40418: GO 40789
40420: LD_INT 31
40422: DOUBLE
40423: EQUAL
40424: IFTRUE 40428
40426: GO 40446
40428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40429: LD_ADDR_VAR 0 3
40433: PUSH
40434: LD_INT 13
40436: PUSH
40437: LD_INT 14
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: ST_TO_ADDR
40444: GO 40789
40446: LD_INT 26
40448: DOUBLE
40449: EQUAL
40450: IFTRUE 40454
40452: GO 40472
40454: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40455: LD_ADDR_VAR 0 3
40459: PUSH
40460: LD_INT 13
40462: PUSH
40463: LD_INT 14
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: ST_TO_ADDR
40470: GO 40789
40472: LD_INT 42
40474: DOUBLE
40475: EQUAL
40476: IFTRUE 40480
40478: GO 40506
40480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40481: LD_ADDR_VAR 0 3
40485: PUSH
40486: LD_INT 21
40488: PUSH
40489: LD_INT 22
40491: PUSH
40492: LD_INT 23
40494: PUSH
40495: LD_INT 24
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
40504: GO 40789
40506: LD_INT 43
40508: DOUBLE
40509: EQUAL
40510: IFTRUE 40514
40512: GO 40540
40514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_INT 21
40522: PUSH
40523: LD_INT 22
40525: PUSH
40526: LD_INT 23
40528: PUSH
40529: LD_INT 24
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: ST_TO_ADDR
40538: GO 40789
40540: LD_INT 44
40542: DOUBLE
40543: EQUAL
40544: IFTRUE 40548
40546: GO 40574
40548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40549: LD_ADDR_VAR 0 3
40553: PUSH
40554: LD_INT 21
40556: PUSH
40557: LD_INT 22
40559: PUSH
40560: LD_INT 23
40562: PUSH
40563: LD_INT 24
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: ST_TO_ADDR
40572: GO 40789
40574: LD_INT 45
40576: DOUBLE
40577: EQUAL
40578: IFTRUE 40582
40580: GO 40608
40582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40583: LD_ADDR_VAR 0 3
40587: PUSH
40588: LD_INT 21
40590: PUSH
40591: LD_INT 22
40593: PUSH
40594: LD_INT 23
40596: PUSH
40597: LD_INT 24
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: ST_TO_ADDR
40606: GO 40789
40608: LD_INT 49
40610: DOUBLE
40611: EQUAL
40612: IFTRUE 40616
40614: GO 40642
40616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40617: LD_ADDR_VAR 0 3
40621: PUSH
40622: LD_INT 21
40624: PUSH
40625: LD_INT 22
40627: PUSH
40628: LD_INT 23
40630: PUSH
40631: LD_INT 24
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
40640: GO 40789
40642: LD_INT 51
40644: DOUBLE
40645: EQUAL
40646: IFTRUE 40650
40648: GO 40676
40650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40651: LD_ADDR_VAR 0 3
40655: PUSH
40656: LD_INT 21
40658: PUSH
40659: LD_INT 22
40661: PUSH
40662: LD_INT 23
40664: PUSH
40665: LD_INT 24
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: ST_TO_ADDR
40674: GO 40789
40676: LD_INT 52
40678: DOUBLE
40679: EQUAL
40680: IFTRUE 40684
40682: GO 40710
40684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40685: LD_ADDR_VAR 0 3
40689: PUSH
40690: LD_INT 21
40692: PUSH
40693: LD_INT 22
40695: PUSH
40696: LD_INT 23
40698: PUSH
40699: LD_INT 24
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: ST_TO_ADDR
40708: GO 40789
40710: LD_INT 53
40712: DOUBLE
40713: EQUAL
40714: IFTRUE 40718
40716: GO 40736
40718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40719: LD_ADDR_VAR 0 3
40723: PUSH
40724: LD_INT 23
40726: PUSH
40727: LD_INT 24
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: ST_TO_ADDR
40734: GO 40789
40736: LD_INT 46
40738: DOUBLE
40739: EQUAL
40740: IFTRUE 40744
40742: GO 40762
40744: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40745: LD_ADDR_VAR 0 3
40749: PUSH
40750: LD_INT 23
40752: PUSH
40753: LD_INT 24
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: ST_TO_ADDR
40760: GO 40789
40762: LD_INT 47
40764: DOUBLE
40765: EQUAL
40766: IFTRUE 40770
40768: GO 40788
40770: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40771: LD_ADDR_VAR 0 3
40775: PUSH
40776: LD_INT 23
40778: PUSH
40779: LD_INT 24
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: ST_TO_ADDR
40786: GO 40789
40788: POP
// result := ( chassis in result ) ;
40789: LD_ADDR_VAR 0 3
40793: PUSH
40794: LD_VAR 0 1
40798: PUSH
40799: LD_VAR 0 3
40803: IN
40804: ST_TO_ADDR
// end ;
40805: LD_VAR 0 3
40809: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40810: LD_INT 0
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
40818: PPUSH
// result := array ;
40819: LD_ADDR_VAR 0 5
40823: PUSH
40824: LD_VAR 0 1
40828: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40829: LD_VAR 0 1
40833: NOT
40834: PUSH
40835: LD_VAR 0 2
40839: NOT
40840: OR
40841: PUSH
40842: LD_VAR 0 3
40846: NOT
40847: OR
40848: PUSH
40849: LD_VAR 0 2
40853: PUSH
40854: LD_VAR 0 1
40858: GREATER
40859: OR
40860: PUSH
40861: LD_VAR 0 3
40865: PUSH
40866: LD_VAR 0 1
40870: GREATER
40871: OR
40872: IFFALSE 40876
// exit ;
40874: GO 41172
// if direction then
40876: LD_VAR 0 4
40880: IFFALSE 40944
// begin d := 1 ;
40882: LD_ADDR_VAR 0 9
40886: PUSH
40887: LD_INT 1
40889: ST_TO_ADDR
// if i_from > i_to then
40890: LD_VAR 0 2
40894: PUSH
40895: LD_VAR 0 3
40899: GREATER
40900: IFFALSE 40926
// length := ( array - i_from ) + i_to else
40902: LD_ADDR_VAR 0 11
40906: PUSH
40907: LD_VAR 0 1
40911: PUSH
40912: LD_VAR 0 2
40916: MINUS
40917: PUSH
40918: LD_VAR 0 3
40922: PLUS
40923: ST_TO_ADDR
40924: GO 40942
// length := i_to - i_from ;
40926: LD_ADDR_VAR 0 11
40930: PUSH
40931: LD_VAR 0 3
40935: PUSH
40936: LD_VAR 0 2
40940: MINUS
40941: ST_TO_ADDR
// end else
40942: GO 41005
// begin d := - 1 ;
40944: LD_ADDR_VAR 0 9
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: ST_TO_ADDR
// if i_from > i_to then
40953: LD_VAR 0 2
40957: PUSH
40958: LD_VAR 0 3
40962: GREATER
40963: IFFALSE 40983
// length := i_from - i_to else
40965: LD_ADDR_VAR 0 11
40969: PUSH
40970: LD_VAR 0 2
40974: PUSH
40975: LD_VAR 0 3
40979: MINUS
40980: ST_TO_ADDR
40981: GO 41005
// length := ( array - i_to ) + i_from ;
40983: LD_ADDR_VAR 0 11
40987: PUSH
40988: LD_VAR 0 1
40992: PUSH
40993: LD_VAR 0 3
40997: MINUS
40998: PUSH
40999: LD_VAR 0 2
41003: PLUS
41004: ST_TO_ADDR
// end ; if not length then
41005: LD_VAR 0 11
41009: NOT
41010: IFFALSE 41014
// exit ;
41012: GO 41172
// tmp := array ;
41014: LD_ADDR_VAR 0 10
41018: PUSH
41019: LD_VAR 0 1
41023: ST_TO_ADDR
// for i = 1 to length do
41024: LD_ADDR_VAR 0 6
41028: PUSH
41029: DOUBLE
41030: LD_INT 1
41032: DEC
41033: ST_TO_ADDR
41034: LD_VAR 0 11
41038: PUSH
41039: FOR_TO
41040: IFFALSE 41160
// begin for j = 1 to array do
41042: LD_ADDR_VAR 0 7
41046: PUSH
41047: DOUBLE
41048: LD_INT 1
41050: DEC
41051: ST_TO_ADDR
41052: LD_VAR 0 1
41056: PUSH
41057: FOR_TO
41058: IFFALSE 41146
// begin k := j + d ;
41060: LD_ADDR_VAR 0 8
41064: PUSH
41065: LD_VAR 0 7
41069: PUSH
41070: LD_VAR 0 9
41074: PLUS
41075: ST_TO_ADDR
// if k > array then
41076: LD_VAR 0 8
41080: PUSH
41081: LD_VAR 0 1
41085: GREATER
41086: IFFALSE 41096
// k := 1 ;
41088: LD_ADDR_VAR 0 8
41092: PUSH
41093: LD_INT 1
41095: ST_TO_ADDR
// if not k then
41096: LD_VAR 0 8
41100: NOT
41101: IFFALSE 41113
// k := array ;
41103: LD_ADDR_VAR 0 8
41107: PUSH
41108: LD_VAR 0 1
41112: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41113: LD_ADDR_VAR 0 10
41117: PUSH
41118: LD_VAR 0 10
41122: PPUSH
41123: LD_VAR 0 8
41127: PPUSH
41128: LD_VAR 0 1
41132: PUSH
41133: LD_VAR 0 7
41137: ARRAY
41138: PPUSH
41139: CALL_OW 1
41143: ST_TO_ADDR
// end ;
41144: GO 41057
41146: POP
41147: POP
// array := tmp ;
41148: LD_ADDR_VAR 0 1
41152: PUSH
41153: LD_VAR 0 10
41157: ST_TO_ADDR
// end ;
41158: GO 41039
41160: POP
41161: POP
// result := array ;
41162: LD_ADDR_VAR 0 5
41166: PUSH
41167: LD_VAR 0 1
41171: ST_TO_ADDR
// end ;
41172: LD_VAR 0 5
41176: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41177: LD_INT 0
41179: PPUSH
41180: PPUSH
// result := 0 ;
41181: LD_ADDR_VAR 0 3
41185: PUSH
41186: LD_INT 0
41188: ST_TO_ADDR
// if not array or not value in array then
41189: LD_VAR 0 1
41193: NOT
41194: PUSH
41195: LD_VAR 0 2
41199: PUSH
41200: LD_VAR 0 1
41204: IN
41205: NOT
41206: OR
41207: IFFALSE 41211
// exit ;
41209: GO 41265
// for i = 1 to array do
41211: LD_ADDR_VAR 0 4
41215: PUSH
41216: DOUBLE
41217: LD_INT 1
41219: DEC
41220: ST_TO_ADDR
41221: LD_VAR 0 1
41225: PUSH
41226: FOR_TO
41227: IFFALSE 41263
// if value = array [ i ] then
41229: LD_VAR 0 2
41233: PUSH
41234: LD_VAR 0 1
41238: PUSH
41239: LD_VAR 0 4
41243: ARRAY
41244: EQUAL
41245: IFFALSE 41261
// begin result := i ;
41247: LD_ADDR_VAR 0 3
41251: PUSH
41252: LD_VAR 0 4
41256: ST_TO_ADDR
// exit ;
41257: POP
41258: POP
41259: GO 41265
// end ;
41261: GO 41226
41263: POP
41264: POP
// end ;
41265: LD_VAR 0 3
41269: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41270: LD_INT 0
41272: PPUSH
// vc_chassis := chassis ;
41273: LD_ADDR_OWVAR 37
41277: PUSH
41278: LD_VAR 0 1
41282: ST_TO_ADDR
// vc_engine := engine ;
41283: LD_ADDR_OWVAR 39
41287: PUSH
41288: LD_VAR 0 2
41292: ST_TO_ADDR
// vc_control := control ;
41293: LD_ADDR_OWVAR 38
41297: PUSH
41298: LD_VAR 0 3
41302: ST_TO_ADDR
// vc_weapon := weapon ;
41303: LD_ADDR_OWVAR 40
41307: PUSH
41308: LD_VAR 0 4
41312: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41313: LD_ADDR_OWVAR 41
41317: PUSH
41318: LD_VAR 0 5
41322: ST_TO_ADDR
// end ;
41323: LD_VAR 0 6
41327: RET
// export function WantPlant ( unit ) ; var task ; begin
41328: LD_INT 0
41330: PPUSH
41331: PPUSH
// result := false ;
41332: LD_ADDR_VAR 0 2
41336: PUSH
41337: LD_INT 0
41339: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_VAR 0 1
41349: PPUSH
41350: CALL_OW 437
41354: ST_TO_ADDR
// if task then
41355: LD_VAR 0 3
41359: IFFALSE 41387
// if task [ 1 ] [ 1 ] = p then
41361: LD_VAR 0 3
41365: PUSH
41366: LD_INT 1
41368: ARRAY
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: PUSH
41374: LD_STRING p
41376: EQUAL
41377: IFFALSE 41387
// result := true ;
41379: LD_ADDR_VAR 0 2
41383: PUSH
41384: LD_INT 1
41386: ST_TO_ADDR
// end ;
41387: LD_VAR 0 2
41391: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41392: LD_INT 0
41394: PPUSH
41395: PPUSH
41396: PPUSH
41397: PPUSH
// if pos < 1 then
41398: LD_VAR 0 2
41402: PUSH
41403: LD_INT 1
41405: LESS
41406: IFFALSE 41410
// exit ;
41408: GO 41713
// if pos = 1 then
41410: LD_VAR 0 2
41414: PUSH
41415: LD_INT 1
41417: EQUAL
41418: IFFALSE 41451
// result := Replace ( arr , pos [ 1 ] , value ) else
41420: LD_ADDR_VAR 0 4
41424: PUSH
41425: LD_VAR 0 1
41429: PPUSH
41430: LD_VAR 0 2
41434: PUSH
41435: LD_INT 1
41437: ARRAY
41438: PPUSH
41439: LD_VAR 0 3
41443: PPUSH
41444: CALL_OW 1
41448: ST_TO_ADDR
41449: GO 41713
// begin tmp := arr ;
41451: LD_ADDR_VAR 0 6
41455: PUSH
41456: LD_VAR 0 1
41460: ST_TO_ADDR
// s_arr := [ tmp ] ;
41461: LD_ADDR_VAR 0 7
41465: PUSH
41466: LD_VAR 0 6
41470: PUSH
41471: EMPTY
41472: LIST
41473: ST_TO_ADDR
// for i = 1 to pos - 1 do
41474: LD_ADDR_VAR 0 5
41478: PUSH
41479: DOUBLE
41480: LD_INT 1
41482: DEC
41483: ST_TO_ADDR
41484: LD_VAR 0 2
41488: PUSH
41489: LD_INT 1
41491: MINUS
41492: PUSH
41493: FOR_TO
41494: IFFALSE 41539
// begin tmp := tmp [ pos [ i ] ] ;
41496: LD_ADDR_VAR 0 6
41500: PUSH
41501: LD_VAR 0 6
41505: PUSH
41506: LD_VAR 0 2
41510: PUSH
41511: LD_VAR 0 5
41515: ARRAY
41516: ARRAY
41517: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41518: LD_ADDR_VAR 0 7
41522: PUSH
41523: LD_VAR 0 7
41527: PUSH
41528: LD_VAR 0 6
41532: PUSH
41533: EMPTY
41534: LIST
41535: ADD
41536: ST_TO_ADDR
// end ;
41537: GO 41493
41539: POP
41540: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41541: LD_ADDR_VAR 0 6
41545: PUSH
41546: LD_VAR 0 6
41550: PPUSH
41551: LD_VAR 0 2
41555: PUSH
41556: LD_VAR 0 2
41560: ARRAY
41561: PPUSH
41562: LD_VAR 0 3
41566: PPUSH
41567: CALL_OW 1
41571: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41572: LD_ADDR_VAR 0 7
41576: PUSH
41577: LD_VAR 0 7
41581: PPUSH
41582: LD_VAR 0 7
41586: PPUSH
41587: LD_VAR 0 6
41591: PPUSH
41592: CALL_OW 1
41596: ST_TO_ADDR
// for i = s_arr downto 2 do
41597: LD_ADDR_VAR 0 5
41601: PUSH
41602: DOUBLE
41603: LD_VAR 0 7
41607: INC
41608: ST_TO_ADDR
41609: LD_INT 2
41611: PUSH
41612: FOR_DOWNTO
41613: IFFALSE 41697
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41615: LD_ADDR_VAR 0 6
41619: PUSH
41620: LD_VAR 0 7
41624: PUSH
41625: LD_VAR 0 5
41629: PUSH
41630: LD_INT 1
41632: MINUS
41633: ARRAY
41634: PPUSH
41635: LD_VAR 0 2
41639: PUSH
41640: LD_VAR 0 5
41644: PUSH
41645: LD_INT 1
41647: MINUS
41648: ARRAY
41649: PPUSH
41650: LD_VAR 0 7
41654: PUSH
41655: LD_VAR 0 5
41659: ARRAY
41660: PPUSH
41661: CALL_OW 1
41665: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41666: LD_ADDR_VAR 0 7
41670: PUSH
41671: LD_VAR 0 7
41675: PPUSH
41676: LD_VAR 0 5
41680: PUSH
41681: LD_INT 1
41683: MINUS
41684: PPUSH
41685: LD_VAR 0 6
41689: PPUSH
41690: CALL_OW 1
41694: ST_TO_ADDR
// end ;
41695: GO 41612
41697: POP
41698: POP
// result := s_arr [ 1 ] ;
41699: LD_ADDR_VAR 0 4
41703: PUSH
41704: LD_VAR 0 7
41708: PUSH
41709: LD_INT 1
41711: ARRAY
41712: ST_TO_ADDR
// end ; end ;
41713: LD_VAR 0 4
41717: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41718: LD_INT 0
41720: PPUSH
41721: PPUSH
// if not list then
41722: LD_VAR 0 1
41726: NOT
41727: IFFALSE 41731
// exit ;
41729: GO 41822
// i := list [ pos1 ] ;
41731: LD_ADDR_VAR 0 5
41735: PUSH
41736: LD_VAR 0 1
41740: PUSH
41741: LD_VAR 0 2
41745: ARRAY
41746: ST_TO_ADDR
// if not i then
41747: LD_VAR 0 5
41751: NOT
41752: IFFALSE 41756
// exit ;
41754: GO 41822
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41756: LD_ADDR_VAR 0 1
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: LD_VAR 0 2
41770: PPUSH
41771: LD_VAR 0 1
41775: PUSH
41776: LD_VAR 0 3
41780: ARRAY
41781: PPUSH
41782: CALL_OW 1
41786: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41787: LD_ADDR_VAR 0 1
41791: PUSH
41792: LD_VAR 0 1
41796: PPUSH
41797: LD_VAR 0 3
41801: PPUSH
41802: LD_VAR 0 5
41806: PPUSH
41807: CALL_OW 1
41811: ST_TO_ADDR
// result := list ;
41812: LD_ADDR_VAR 0 4
41816: PUSH
41817: LD_VAR 0 1
41821: ST_TO_ADDR
// end ;
41822: LD_VAR 0 4
41826: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41827: LD_INT 0
41829: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41830: LD_ADDR_VAR 0 5
41834: PUSH
41835: LD_VAR 0 1
41839: PPUSH
41840: CALL_OW 250
41844: PPUSH
41845: LD_VAR 0 1
41849: PPUSH
41850: CALL_OW 251
41854: PPUSH
41855: LD_VAR 0 2
41859: PPUSH
41860: LD_VAR 0 3
41864: PPUSH
41865: LD_VAR 0 4
41869: PPUSH
41870: CALL 42248 0 5
41874: ST_TO_ADDR
// end ;
41875: LD_VAR 0 5
41879: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41880: LD_INT 0
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
// if not list or not unit then
41886: LD_VAR 0 2
41890: NOT
41891: PUSH
41892: LD_VAR 0 1
41896: NOT
41897: OR
41898: IFFALSE 41902
// exit ;
41900: GO 42243
// result := [ ] ;
41902: LD_ADDR_VAR 0 5
41906: PUSH
41907: EMPTY
41908: ST_TO_ADDR
// for i in list do
41909: LD_ADDR_VAR 0 6
41913: PUSH
41914: LD_VAR 0 2
41918: PUSH
41919: FOR_IN
41920: IFFALSE 42138
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41922: LD_ADDR_VAR 0 8
41926: PUSH
41927: LD_VAR 0 1
41931: PPUSH
41932: LD_VAR 0 6
41936: PUSH
41937: LD_INT 1
41939: ARRAY
41940: PPUSH
41941: LD_VAR 0 6
41945: PUSH
41946: LD_INT 2
41948: ARRAY
41949: PPUSH
41950: CALL_OW 297
41954: ST_TO_ADDR
// if not Count ( result ) then
41955: LD_VAR 0 5
41959: PPUSH
41960: CALL 38532 0 1
41964: NOT
41965: IFFALSE 41998
// begin result := Join ( result , [ i , tmp ] ) ;
41967: LD_ADDR_VAR 0 5
41971: PUSH
41972: LD_VAR 0 5
41976: PPUSH
41977: LD_VAR 0 6
41981: PUSH
41982: LD_VAR 0 8
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PPUSH
41991: CALL 74141 0 2
41995: ST_TO_ADDR
// continue ;
41996: GO 41919
// end ; if result [ result ] [ 2 ] <= tmp then
41998: LD_VAR 0 5
42002: PUSH
42003: LD_VAR 0 5
42007: ARRAY
42008: PUSH
42009: LD_INT 2
42011: ARRAY
42012: PUSH
42013: LD_VAR 0 8
42017: LESSEQUAL
42018: IFFALSE 42051
// result := Join ( result , [ i , tmp ] ) else
42020: LD_ADDR_VAR 0 5
42024: PUSH
42025: LD_VAR 0 5
42029: PPUSH
42030: LD_VAR 0 6
42034: PUSH
42035: LD_VAR 0 8
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PPUSH
42044: CALL 74141 0 2
42048: ST_TO_ADDR
42049: GO 42136
// begin for j := 1 to Count ( result ) do
42051: LD_ADDR_VAR 0 7
42055: PUSH
42056: DOUBLE
42057: LD_INT 1
42059: DEC
42060: ST_TO_ADDR
42061: LD_VAR 0 5
42065: PPUSH
42066: CALL 38532 0 1
42070: PUSH
42071: FOR_TO
42072: IFFALSE 42134
// begin if tmp < result [ j ] [ 2 ] then
42074: LD_VAR 0 8
42078: PUSH
42079: LD_VAR 0 5
42083: PUSH
42084: LD_VAR 0 7
42088: ARRAY
42089: PUSH
42090: LD_INT 2
42092: ARRAY
42093: LESS
42094: IFFALSE 42132
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42096: LD_ADDR_VAR 0 5
42100: PUSH
42101: LD_VAR 0 5
42105: PPUSH
42106: LD_VAR 0 7
42110: PPUSH
42111: LD_VAR 0 6
42115: PUSH
42116: LD_VAR 0 8
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PPUSH
42125: CALL_OW 2
42129: ST_TO_ADDR
// break ;
42130: GO 42134
// end ; end ;
42132: GO 42071
42134: POP
42135: POP
// end ; end ;
42136: GO 41919
42138: POP
42139: POP
// if result and not asc then
42140: LD_VAR 0 5
42144: PUSH
42145: LD_VAR 0 3
42149: NOT
42150: AND
42151: IFFALSE 42168
// result := ReverseArray ( result ) ;
42153: LD_ADDR_VAR 0 5
42157: PUSH
42158: LD_VAR 0 5
42162: PPUSH
42163: CALL 69408 0 1
42167: ST_TO_ADDR
// tmp := [ ] ;
42168: LD_ADDR_VAR 0 8
42172: PUSH
42173: EMPTY
42174: ST_TO_ADDR
// if mode then
42175: LD_VAR 0 4
42179: IFFALSE 42243
// begin for i := 1 to result do
42181: LD_ADDR_VAR 0 6
42185: PUSH
42186: DOUBLE
42187: LD_INT 1
42189: DEC
42190: ST_TO_ADDR
42191: LD_VAR 0 5
42195: PUSH
42196: FOR_TO
42197: IFFALSE 42231
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
42199: LD_ADDR_VAR 0 8
42203: PUSH
42204: LD_VAR 0 8
42208: PPUSH
42209: LD_VAR 0 5
42213: PUSH
42214: LD_VAR 0 6
42218: ARRAY
42219: PUSH
42220: LD_INT 1
42222: ARRAY
42223: PPUSH
42224: CALL 74141 0 2
42228: ST_TO_ADDR
42229: GO 42196
42231: POP
42232: POP
// result := tmp ;
42233: LD_ADDR_VAR 0 5
42237: PUSH
42238: LD_VAR 0 8
42242: ST_TO_ADDR
// end ; end ;
42243: LD_VAR 0 5
42247: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42248: LD_INT 0
42250: PPUSH
42251: PPUSH
42252: PPUSH
42253: PPUSH
// if not list then
42254: LD_VAR 0 3
42258: NOT
42259: IFFALSE 42263
// exit ;
42261: GO 42651
// result := [ ] ;
42263: LD_ADDR_VAR 0 6
42267: PUSH
42268: EMPTY
42269: ST_TO_ADDR
// for i in list do
42270: LD_ADDR_VAR 0 7
42274: PUSH
42275: LD_VAR 0 3
42279: PUSH
42280: FOR_IN
42281: IFFALSE 42483
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42283: LD_ADDR_VAR 0 9
42287: PUSH
42288: LD_VAR 0 7
42292: PPUSH
42293: LD_VAR 0 1
42297: PPUSH
42298: LD_VAR 0 2
42302: PPUSH
42303: CALL_OW 297
42307: ST_TO_ADDR
// if not result then
42308: LD_VAR 0 6
42312: NOT
42313: IFFALSE 42339
// result := [ [ i , tmp ] ] else
42315: LD_ADDR_VAR 0 6
42319: PUSH
42320: LD_VAR 0 7
42324: PUSH
42325: LD_VAR 0 9
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: EMPTY
42335: LIST
42336: ST_TO_ADDR
42337: GO 42481
// begin if result [ result ] [ 2 ] <= tmp then
42339: LD_VAR 0 6
42343: PUSH
42344: LD_VAR 0 6
42348: ARRAY
42349: PUSH
42350: LD_INT 2
42352: ARRAY
42353: PUSH
42354: LD_VAR 0 9
42358: LESSEQUAL
42359: IFFALSE 42401
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42361: LD_ADDR_VAR 0 6
42365: PUSH
42366: LD_VAR 0 6
42370: PPUSH
42371: LD_VAR 0 6
42375: PUSH
42376: LD_INT 1
42378: PLUS
42379: PPUSH
42380: LD_VAR 0 7
42384: PUSH
42385: LD_VAR 0 9
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PPUSH
42394: CALL_OW 2
42398: ST_TO_ADDR
42399: GO 42481
// for j := 1 to result do
42401: LD_ADDR_VAR 0 8
42405: PUSH
42406: DOUBLE
42407: LD_INT 1
42409: DEC
42410: ST_TO_ADDR
42411: LD_VAR 0 6
42415: PUSH
42416: FOR_TO
42417: IFFALSE 42479
// begin if tmp < result [ j ] [ 2 ] then
42419: LD_VAR 0 9
42423: PUSH
42424: LD_VAR 0 6
42428: PUSH
42429: LD_VAR 0 8
42433: ARRAY
42434: PUSH
42435: LD_INT 2
42437: ARRAY
42438: LESS
42439: IFFALSE 42477
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42441: LD_ADDR_VAR 0 6
42445: PUSH
42446: LD_VAR 0 6
42450: PPUSH
42451: LD_VAR 0 8
42455: PPUSH
42456: LD_VAR 0 7
42460: PUSH
42461: LD_VAR 0 9
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PPUSH
42470: CALL_OW 2
42474: ST_TO_ADDR
// break ;
42475: GO 42479
// end ; end ;
42477: GO 42416
42479: POP
42480: POP
// end ; end ;
42481: GO 42280
42483: POP
42484: POP
// if result and not asc then
42485: LD_VAR 0 6
42489: PUSH
42490: LD_VAR 0 4
42494: NOT
42495: AND
42496: IFFALSE 42571
// begin tmp := result ;
42498: LD_ADDR_VAR 0 9
42502: PUSH
42503: LD_VAR 0 6
42507: ST_TO_ADDR
// for i = tmp downto 1 do
42508: LD_ADDR_VAR 0 7
42512: PUSH
42513: DOUBLE
42514: LD_VAR 0 9
42518: INC
42519: ST_TO_ADDR
42520: LD_INT 1
42522: PUSH
42523: FOR_DOWNTO
42524: IFFALSE 42569
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42526: LD_ADDR_VAR 0 6
42530: PUSH
42531: LD_VAR 0 6
42535: PPUSH
42536: LD_VAR 0 9
42540: PUSH
42541: LD_VAR 0 7
42545: MINUS
42546: PUSH
42547: LD_INT 1
42549: PLUS
42550: PPUSH
42551: LD_VAR 0 9
42555: PUSH
42556: LD_VAR 0 7
42560: ARRAY
42561: PPUSH
42562: CALL_OW 1
42566: ST_TO_ADDR
42567: GO 42523
42569: POP
42570: POP
// end ; tmp := [ ] ;
42571: LD_ADDR_VAR 0 9
42575: PUSH
42576: EMPTY
42577: ST_TO_ADDR
// if mode then
42578: LD_VAR 0 5
42582: IFFALSE 42651
// begin for i = 1 to result do
42584: LD_ADDR_VAR 0 7
42588: PUSH
42589: DOUBLE
42590: LD_INT 1
42592: DEC
42593: ST_TO_ADDR
42594: LD_VAR 0 6
42598: PUSH
42599: FOR_TO
42600: IFFALSE 42639
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42602: LD_ADDR_VAR 0 9
42606: PUSH
42607: LD_VAR 0 9
42611: PPUSH
42612: LD_VAR 0 7
42616: PPUSH
42617: LD_VAR 0 6
42621: PUSH
42622: LD_VAR 0 7
42626: ARRAY
42627: PUSH
42628: LD_INT 1
42630: ARRAY
42631: PPUSH
42632: CALL_OW 1
42636: ST_TO_ADDR
42637: GO 42599
42639: POP
42640: POP
// result := tmp ;
42641: LD_ADDR_VAR 0 6
42645: PUSH
42646: LD_VAR 0 9
42650: ST_TO_ADDR
// end ; end ;
42651: LD_VAR 0 6
42655: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42656: LD_INT 0
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
42662: PPUSH
42663: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42664: LD_ADDR_VAR 0 5
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: ST_TO_ADDR
// if not x or not y then
42686: LD_VAR 0 2
42690: NOT
42691: PUSH
42692: LD_VAR 0 3
42696: NOT
42697: OR
42698: IFFALSE 42702
// exit ;
42700: GO 44352
// if not range then
42702: LD_VAR 0 4
42706: NOT
42707: IFFALSE 42717
// range := 10 ;
42709: LD_ADDR_VAR 0 4
42713: PUSH
42714: LD_INT 10
42716: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42717: LD_ADDR_VAR 0 8
42721: PUSH
42722: LD_INT 81
42724: PUSH
42725: LD_VAR 0 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 92
42736: PUSH
42737: LD_VAR 0 2
42741: PUSH
42742: LD_VAR 0 3
42746: PUSH
42747: LD_VAR 0 4
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 3
42760: PUSH
42761: LD_INT 21
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: PPUSH
42780: CALL_OW 69
42784: ST_TO_ADDR
// if not tmp then
42785: LD_VAR 0 8
42789: NOT
42790: IFFALSE 42794
// exit ;
42792: GO 44352
// for i in tmp do
42794: LD_ADDR_VAR 0 6
42798: PUSH
42799: LD_VAR 0 8
42803: PUSH
42804: FOR_IN
42805: IFFALSE 44327
// begin points := [ 0 , 0 , 0 ] ;
42807: LD_ADDR_VAR 0 9
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: ST_TO_ADDR
// bpoints := 1 ;
42826: LD_ADDR_VAR 0 10
42830: PUSH
42831: LD_INT 1
42833: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42834: LD_VAR 0 6
42838: PPUSH
42839: CALL_OW 247
42843: PUSH
42844: LD_INT 1
42846: DOUBLE
42847: EQUAL
42848: IFTRUE 42852
42850: GO 43430
42852: POP
// begin if GetClass ( i ) = 1 then
42853: LD_VAR 0 6
42857: PPUSH
42858: CALL_OW 257
42862: PUSH
42863: LD_INT 1
42865: EQUAL
42866: IFFALSE 42887
// points := [ 10 , 5 , 3 ] ;
42868: LD_ADDR_VAR 0 9
42872: PUSH
42873: LD_INT 10
42875: PUSH
42876: LD_INT 5
42878: PUSH
42879: LD_INT 3
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42887: LD_VAR 0 6
42891: PPUSH
42892: CALL_OW 257
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 3
42902: PUSH
42903: LD_INT 4
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: IN
42911: IFFALSE 42932
// points := [ 3 , 2 , 1 ] ;
42913: LD_ADDR_VAR 0 9
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42932: LD_VAR 0 6
42936: PPUSH
42937: CALL_OW 257
42941: PUSH
42942: LD_INT 5
42944: EQUAL
42945: IFFALSE 42966
// points := [ 130 , 5 , 2 ] ;
42947: LD_ADDR_VAR 0 9
42951: PUSH
42952: LD_INT 130
42954: PUSH
42955: LD_INT 5
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42966: LD_VAR 0 6
42970: PPUSH
42971: CALL_OW 257
42975: PUSH
42976: LD_INT 8
42978: EQUAL
42979: IFFALSE 43000
// points := [ 35 , 35 , 30 ] ;
42981: LD_ADDR_VAR 0 9
42985: PUSH
42986: LD_INT 35
42988: PUSH
42989: LD_INT 35
42991: PUSH
42992: LD_INT 30
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43000: LD_VAR 0 6
43004: PPUSH
43005: CALL_OW 257
43009: PUSH
43010: LD_INT 9
43012: EQUAL
43013: IFFALSE 43034
// points := [ 20 , 55 , 40 ] ;
43015: LD_ADDR_VAR 0 9
43019: PUSH
43020: LD_INT 20
43022: PUSH
43023: LD_INT 55
43025: PUSH
43026: LD_INT 40
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43034: LD_VAR 0 6
43038: PPUSH
43039: CALL_OW 257
43043: PUSH
43044: LD_INT 12
43046: PUSH
43047: LD_INT 16
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: IN
43054: IFFALSE 43075
// points := [ 5 , 3 , 2 ] ;
43056: LD_ADDR_VAR 0 9
43060: PUSH
43061: LD_INT 5
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: LIST
43074: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43075: LD_VAR 0 6
43079: PPUSH
43080: CALL_OW 257
43084: PUSH
43085: LD_INT 17
43087: EQUAL
43088: IFFALSE 43109
// points := [ 100 , 50 , 75 ] ;
43090: LD_ADDR_VAR 0 9
43094: PUSH
43095: LD_INT 100
43097: PUSH
43098: LD_INT 50
43100: PUSH
43101: LD_INT 75
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43109: LD_VAR 0 6
43113: PPUSH
43114: CALL_OW 257
43118: PUSH
43119: LD_INT 15
43121: EQUAL
43122: IFFALSE 43143
// points := [ 10 , 5 , 3 ] ;
43124: LD_ADDR_VAR 0 9
43128: PUSH
43129: LD_INT 10
43131: PUSH
43132: LD_INT 5
43134: PUSH
43135: LD_INT 3
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43143: LD_VAR 0 6
43147: PPUSH
43148: CALL_OW 257
43152: PUSH
43153: LD_INT 14
43155: EQUAL
43156: IFFALSE 43177
// points := [ 10 , 0 , 0 ] ;
43158: LD_ADDR_VAR 0 9
43162: PUSH
43163: LD_INT 10
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43177: LD_VAR 0 6
43181: PPUSH
43182: CALL_OW 257
43186: PUSH
43187: LD_INT 11
43189: EQUAL
43190: IFFALSE 43211
// points := [ 30 , 10 , 5 ] ;
43192: LD_ADDR_VAR 0 9
43196: PUSH
43197: LD_INT 30
43199: PUSH
43200: LD_INT 10
43202: PUSH
43203: LD_INT 5
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43211: LD_VAR 0 1
43215: PPUSH
43216: LD_INT 5
43218: PPUSH
43219: CALL_OW 321
43223: PUSH
43224: LD_INT 2
43226: EQUAL
43227: IFFALSE 43244
// bpoints := bpoints * 1.8 ;
43229: LD_ADDR_VAR 0 10
43233: PUSH
43234: LD_VAR 0 10
43238: PUSH
43239: LD_REAL  1.80000000000000E+0000
43242: MUL
43243: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43244: LD_VAR 0 6
43248: PPUSH
43249: CALL_OW 257
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: LD_INT 3
43262: PUSH
43263: LD_INT 4
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: IN
43272: PUSH
43273: LD_VAR 0 1
43277: PPUSH
43278: LD_INT 51
43280: PPUSH
43281: CALL_OW 321
43285: PUSH
43286: LD_INT 2
43288: EQUAL
43289: AND
43290: IFFALSE 43307
// bpoints := bpoints * 1.2 ;
43292: LD_ADDR_VAR 0 10
43296: PUSH
43297: LD_VAR 0 10
43301: PUSH
43302: LD_REAL  1.20000000000000E+0000
43305: MUL
43306: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43307: LD_VAR 0 6
43311: PPUSH
43312: CALL_OW 257
43316: PUSH
43317: LD_INT 5
43319: PUSH
43320: LD_INT 7
43322: PUSH
43323: LD_INT 9
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: LIST
43330: IN
43331: PUSH
43332: LD_VAR 0 1
43336: PPUSH
43337: LD_INT 52
43339: PPUSH
43340: CALL_OW 321
43344: PUSH
43345: LD_INT 2
43347: EQUAL
43348: AND
43349: IFFALSE 43366
// bpoints := bpoints * 1.5 ;
43351: LD_ADDR_VAR 0 10
43355: PUSH
43356: LD_VAR 0 10
43360: PUSH
43361: LD_REAL  1.50000000000000E+0000
43364: MUL
43365: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43366: LD_VAR 0 1
43370: PPUSH
43371: LD_INT 66
43373: PPUSH
43374: CALL_OW 321
43378: PUSH
43379: LD_INT 2
43381: EQUAL
43382: IFFALSE 43399
// bpoints := bpoints * 1.1 ;
43384: LD_ADDR_VAR 0 10
43388: PUSH
43389: LD_VAR 0 10
43393: PUSH
43394: LD_REAL  1.10000000000000E+0000
43397: MUL
43398: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43399: LD_ADDR_VAR 0 10
43403: PUSH
43404: LD_VAR 0 10
43408: PUSH
43409: LD_VAR 0 6
43413: PPUSH
43414: LD_INT 1
43416: PPUSH
43417: CALL_OW 259
43421: PUSH
43422: LD_REAL  1.15000000000000E+0000
43425: MUL
43426: MUL
43427: ST_TO_ADDR
// end ; unit_vehicle :
43428: GO 44256
43430: LD_INT 2
43432: DOUBLE
43433: EQUAL
43434: IFTRUE 43438
43436: GO 44244
43438: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43439: LD_VAR 0 6
43443: PPUSH
43444: CALL_OW 264
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: LD_INT 42
43454: PUSH
43455: LD_INT 24
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: IN
43463: IFFALSE 43484
// points := [ 25 , 5 , 3 ] ;
43465: LD_ADDR_VAR 0 9
43469: PUSH
43470: LD_INT 25
43472: PUSH
43473: LD_INT 5
43475: PUSH
43476: LD_INT 3
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: LIST
43483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43484: LD_VAR 0 6
43488: PPUSH
43489: CALL_OW 264
43493: PUSH
43494: LD_INT 4
43496: PUSH
43497: LD_INT 43
43499: PUSH
43500: LD_INT 25
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: LIST
43507: IN
43508: IFFALSE 43529
// points := [ 40 , 15 , 5 ] ;
43510: LD_ADDR_VAR 0 9
43514: PUSH
43515: LD_INT 40
43517: PUSH
43518: LD_INT 15
43520: PUSH
43521: LD_INT 5
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43529: LD_VAR 0 6
43533: PPUSH
43534: CALL_OW 264
43538: PUSH
43539: LD_INT 3
43541: PUSH
43542: LD_INT 23
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: IN
43549: IFFALSE 43570
// points := [ 7 , 25 , 8 ] ;
43551: LD_ADDR_VAR 0 9
43555: PUSH
43556: LD_INT 7
43558: PUSH
43559: LD_INT 25
43561: PUSH
43562: LD_INT 8
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43570: LD_VAR 0 6
43574: PPUSH
43575: CALL_OW 264
43579: PUSH
43580: LD_INT 5
43582: PUSH
43583: LD_INT 27
43585: PUSH
43586: LD_INT 44
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: IN
43594: IFFALSE 43615
// points := [ 14 , 50 , 16 ] ;
43596: LD_ADDR_VAR 0 9
43600: PUSH
43601: LD_INT 14
43603: PUSH
43604: LD_INT 50
43606: PUSH
43607: LD_INT 16
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43615: LD_VAR 0 6
43619: PPUSH
43620: CALL_OW 264
43624: PUSH
43625: LD_INT 6
43627: PUSH
43628: LD_INT 46
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: IN
43635: IFFALSE 43656
// points := [ 32 , 120 , 70 ] ;
43637: LD_ADDR_VAR 0 9
43641: PUSH
43642: LD_INT 32
43644: PUSH
43645: LD_INT 120
43647: PUSH
43648: LD_INT 70
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43656: LD_VAR 0 6
43660: PPUSH
43661: CALL_OW 264
43665: PUSH
43666: LD_INT 7
43668: PUSH
43669: LD_INT 28
43671: PUSH
43672: LD_INT 45
43674: PUSH
43675: LD_INT 92
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: IN
43684: IFFALSE 43705
// points := [ 35 , 20 , 45 ] ;
43686: LD_ADDR_VAR 0 9
43690: PUSH
43691: LD_INT 35
43693: PUSH
43694: LD_INT 20
43696: PUSH
43697: LD_INT 45
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43705: LD_VAR 0 6
43709: PPUSH
43710: CALL_OW 264
43714: PUSH
43715: LD_INT 47
43717: PUSH
43718: EMPTY
43719: LIST
43720: IN
43721: IFFALSE 43742
// points := [ 67 , 45 , 75 ] ;
43723: LD_ADDR_VAR 0 9
43727: PUSH
43728: LD_INT 67
43730: PUSH
43731: LD_INT 45
43733: PUSH
43734: LD_INT 75
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43742: LD_VAR 0 6
43746: PPUSH
43747: CALL_OW 264
43751: PUSH
43752: LD_INT 26
43754: PUSH
43755: EMPTY
43756: LIST
43757: IN
43758: IFFALSE 43779
// points := [ 120 , 30 , 80 ] ;
43760: LD_ADDR_VAR 0 9
43764: PUSH
43765: LD_INT 120
43767: PUSH
43768: LD_INT 30
43770: PUSH
43771: LD_INT 80
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43779: LD_VAR 0 6
43783: PPUSH
43784: CALL_OW 264
43788: PUSH
43789: LD_INT 22
43791: PUSH
43792: EMPTY
43793: LIST
43794: IN
43795: IFFALSE 43816
// points := [ 40 , 1 , 1 ] ;
43797: LD_ADDR_VAR 0 9
43801: PUSH
43802: LD_INT 40
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43816: LD_VAR 0 6
43820: PPUSH
43821: CALL_OW 264
43825: PUSH
43826: LD_INT 29
43828: PUSH
43829: EMPTY
43830: LIST
43831: IN
43832: IFFALSE 43853
// points := [ 70 , 200 , 400 ] ;
43834: LD_ADDR_VAR 0 9
43838: PUSH
43839: LD_INT 70
43841: PUSH
43842: LD_INT 200
43844: PUSH
43845: LD_INT 400
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43853: LD_VAR 0 6
43857: PPUSH
43858: CALL_OW 264
43862: PUSH
43863: LD_INT 14
43865: PUSH
43866: LD_INT 53
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: IN
43873: IFFALSE 43894
// points := [ 40 , 10 , 20 ] ;
43875: LD_ADDR_VAR 0 9
43879: PUSH
43880: LD_INT 40
43882: PUSH
43883: LD_INT 10
43885: PUSH
43886: LD_INT 20
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43894: LD_VAR 0 6
43898: PPUSH
43899: CALL_OW 264
43903: PUSH
43904: LD_INT 9
43906: PUSH
43907: EMPTY
43908: LIST
43909: IN
43910: IFFALSE 43931
// points := [ 5 , 70 , 20 ] ;
43912: LD_ADDR_VAR 0 9
43916: PUSH
43917: LD_INT 5
43919: PUSH
43920: LD_INT 70
43922: PUSH
43923: LD_INT 20
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43931: LD_VAR 0 6
43935: PPUSH
43936: CALL_OW 264
43940: PUSH
43941: LD_INT 10
43943: PUSH
43944: EMPTY
43945: LIST
43946: IN
43947: IFFALSE 43968
// points := [ 35 , 110 , 70 ] ;
43949: LD_ADDR_VAR 0 9
43953: PUSH
43954: LD_INT 35
43956: PUSH
43957: LD_INT 110
43959: PUSH
43960: LD_INT 70
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43968: LD_VAR 0 6
43972: PPUSH
43973: CALL_OW 265
43977: PUSH
43978: LD_INT 25
43980: EQUAL
43981: IFFALSE 44002
// points := [ 80 , 65 , 100 ] ;
43983: LD_ADDR_VAR 0 9
43987: PUSH
43988: LD_INT 80
43990: PUSH
43991: LD_INT 65
43993: PUSH
43994: LD_INT 100
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44002: LD_VAR 0 6
44006: PPUSH
44007: CALL_OW 263
44011: PUSH
44012: LD_INT 1
44014: EQUAL
44015: IFFALSE 44050
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44017: LD_ADDR_VAR 0 10
44021: PUSH
44022: LD_VAR 0 10
44026: PUSH
44027: LD_VAR 0 6
44031: PPUSH
44032: CALL_OW 311
44036: PPUSH
44037: LD_INT 3
44039: PPUSH
44040: CALL_OW 259
44044: PUSH
44045: LD_INT 4
44047: MUL
44048: MUL
44049: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44050: LD_VAR 0 6
44054: PPUSH
44055: CALL_OW 263
44059: PUSH
44060: LD_INT 2
44062: EQUAL
44063: IFFALSE 44114
// begin j := IsControledBy ( i ) ;
44065: LD_ADDR_VAR 0 7
44069: PUSH
44070: LD_VAR 0 6
44074: PPUSH
44075: CALL_OW 312
44079: ST_TO_ADDR
// if j then
44080: LD_VAR 0 7
44084: IFFALSE 44114
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44086: LD_ADDR_VAR 0 10
44090: PUSH
44091: LD_VAR 0 10
44095: PUSH
44096: LD_VAR 0 7
44100: PPUSH
44101: LD_INT 3
44103: PPUSH
44104: CALL_OW 259
44108: PUSH
44109: LD_INT 3
44111: MUL
44112: MUL
44113: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44114: LD_VAR 0 6
44118: PPUSH
44119: CALL_OW 264
44123: PUSH
44124: LD_INT 5
44126: PUSH
44127: LD_INT 6
44129: PUSH
44130: LD_INT 46
44132: PUSH
44133: LD_INT 44
44135: PUSH
44136: LD_INT 47
44138: PUSH
44139: LD_INT 45
44141: PUSH
44142: LD_INT 28
44144: PUSH
44145: LD_INT 7
44147: PUSH
44148: LD_INT 27
44150: PUSH
44151: LD_INT 29
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: IN
44166: PUSH
44167: LD_VAR 0 1
44171: PPUSH
44172: LD_INT 52
44174: PPUSH
44175: CALL_OW 321
44179: PUSH
44180: LD_INT 2
44182: EQUAL
44183: AND
44184: IFFALSE 44201
// bpoints := bpoints * 1.2 ;
44186: LD_ADDR_VAR 0 10
44190: PUSH
44191: LD_VAR 0 10
44195: PUSH
44196: LD_REAL  1.20000000000000E+0000
44199: MUL
44200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44201: LD_VAR 0 6
44205: PPUSH
44206: CALL_OW 264
44210: PUSH
44211: LD_INT 6
44213: PUSH
44214: LD_INT 46
44216: PUSH
44217: LD_INT 47
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: LIST
44224: IN
44225: IFFALSE 44242
// bpoints := bpoints * 1.2 ;
44227: LD_ADDR_VAR 0 10
44231: PUSH
44232: LD_VAR 0 10
44236: PUSH
44237: LD_REAL  1.20000000000000E+0000
44240: MUL
44241: ST_TO_ADDR
// end ; unit_building :
44242: GO 44256
44244: LD_INT 3
44246: DOUBLE
44247: EQUAL
44248: IFTRUE 44252
44250: GO 44255
44252: POP
// ; end ;
44253: GO 44256
44255: POP
// for j = 1 to 3 do
44256: LD_ADDR_VAR 0 7
44260: PUSH
44261: DOUBLE
44262: LD_INT 1
44264: DEC
44265: ST_TO_ADDR
44266: LD_INT 3
44268: PUSH
44269: FOR_TO
44270: IFFALSE 44323
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44272: LD_ADDR_VAR 0 5
44276: PUSH
44277: LD_VAR 0 5
44281: PPUSH
44282: LD_VAR 0 7
44286: PPUSH
44287: LD_VAR 0 5
44291: PUSH
44292: LD_VAR 0 7
44296: ARRAY
44297: PUSH
44298: LD_VAR 0 9
44302: PUSH
44303: LD_VAR 0 7
44307: ARRAY
44308: PUSH
44309: LD_VAR 0 10
44313: MUL
44314: PLUS
44315: PPUSH
44316: CALL_OW 1
44320: ST_TO_ADDR
44321: GO 44269
44323: POP
44324: POP
// end ;
44325: GO 42804
44327: POP
44328: POP
// result := Replace ( result , 4 , tmp ) ;
44329: LD_ADDR_VAR 0 5
44333: PUSH
44334: LD_VAR 0 5
44338: PPUSH
44339: LD_INT 4
44341: PPUSH
44342: LD_VAR 0 8
44346: PPUSH
44347: CALL_OW 1
44351: ST_TO_ADDR
// end ;
44352: LD_VAR 0 5
44356: RET
// export function DangerAtRange ( unit , range ) ; begin
44357: LD_INT 0
44359: PPUSH
// if not unit then
44360: LD_VAR 0 1
44364: NOT
44365: IFFALSE 44369
// exit ;
44367: GO 44414
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44369: LD_ADDR_VAR 0 3
44373: PUSH
44374: LD_VAR 0 1
44378: PPUSH
44379: CALL_OW 255
44383: PPUSH
44384: LD_VAR 0 1
44388: PPUSH
44389: CALL_OW 250
44393: PPUSH
44394: LD_VAR 0 1
44398: PPUSH
44399: CALL_OW 251
44403: PPUSH
44404: LD_VAR 0 2
44408: PPUSH
44409: CALL 42656 0 4
44413: ST_TO_ADDR
// end ;
44414: LD_VAR 0 3
44418: RET
// export function DangerInArea ( side , area ) ; begin
44419: LD_INT 0
44421: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44422: LD_ADDR_VAR 0 3
44426: PUSH
44427: LD_VAR 0 2
44431: PPUSH
44432: LD_INT 81
44434: PUSH
44435: LD_VAR 0 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PPUSH
44444: CALL_OW 70
44448: ST_TO_ADDR
// end ;
44449: LD_VAR 0 3
44453: RET
// export function IsExtension ( b ) ; begin
44454: LD_INT 0
44456: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44457: LD_ADDR_VAR 0 2
44461: PUSH
44462: LD_VAR 0 1
44466: PUSH
44467: LD_INT 23
44469: PUSH
44470: LD_INT 20
44472: PUSH
44473: LD_INT 22
44475: PUSH
44476: LD_INT 17
44478: PUSH
44479: LD_INT 24
44481: PUSH
44482: LD_INT 21
44484: PUSH
44485: LD_INT 19
44487: PUSH
44488: LD_INT 16
44490: PUSH
44491: LD_INT 25
44493: PUSH
44494: LD_INT 18
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: IN
44509: ST_TO_ADDR
// end ;
44510: LD_VAR 0 2
44514: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44515: LD_INT 0
44517: PPUSH
44518: PPUSH
44519: PPUSH
// result := [ ] ;
44520: LD_ADDR_VAR 0 4
44524: PUSH
44525: EMPTY
44526: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44527: LD_ADDR_VAR 0 5
44531: PUSH
44532: LD_VAR 0 2
44536: PPUSH
44537: LD_INT 21
44539: PUSH
44540: LD_INT 3
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PPUSH
44547: CALL_OW 70
44551: ST_TO_ADDR
// if not tmp then
44552: LD_VAR 0 5
44556: NOT
44557: IFFALSE 44561
// exit ;
44559: GO 44625
// if checkLink then
44561: LD_VAR 0 3
44565: IFFALSE 44615
// begin for i in tmp do
44567: LD_ADDR_VAR 0 6
44571: PUSH
44572: LD_VAR 0 5
44576: PUSH
44577: FOR_IN
44578: IFFALSE 44613
// if GetBase ( i ) <> base then
44580: LD_VAR 0 6
44584: PPUSH
44585: CALL_OW 274
44589: PUSH
44590: LD_VAR 0 1
44594: NONEQUAL
44595: IFFALSE 44611
// ComLinkToBase ( base , i ) ;
44597: LD_VAR 0 1
44601: PPUSH
44602: LD_VAR 0 6
44606: PPUSH
44607: CALL_OW 169
44611: GO 44577
44613: POP
44614: POP
// end ; result := tmp ;
44615: LD_ADDR_VAR 0 4
44619: PUSH
44620: LD_VAR 0 5
44624: ST_TO_ADDR
// end ;
44625: LD_VAR 0 4
44629: RET
// export function ComComplete ( units , b ) ; var i ; begin
44630: LD_INT 0
44632: PPUSH
44633: PPUSH
// if not units then
44634: LD_VAR 0 1
44638: NOT
44639: IFFALSE 44643
// exit ;
44641: GO 44733
// for i in units do
44643: LD_ADDR_VAR 0 4
44647: PUSH
44648: LD_VAR 0 1
44652: PUSH
44653: FOR_IN
44654: IFFALSE 44731
// if BuildingStatus ( b ) = bs_build then
44656: LD_VAR 0 2
44660: PPUSH
44661: CALL_OW 461
44665: PUSH
44666: LD_INT 1
44668: EQUAL
44669: IFFALSE 44729
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44671: LD_VAR 0 4
44675: PPUSH
44676: LD_STRING h
44678: PUSH
44679: LD_VAR 0 2
44683: PPUSH
44684: CALL_OW 250
44688: PUSH
44689: LD_VAR 0 2
44693: PPUSH
44694: CALL_OW 251
44698: PUSH
44699: LD_VAR 0 2
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: PPUSH
44725: CALL_OW 446
44729: GO 44653
44731: POP
44732: POP
// end ;
44733: LD_VAR 0 3
44737: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44738: LD_INT 0
44740: PPUSH
44741: PPUSH
44742: PPUSH
44743: PPUSH
44744: PPUSH
44745: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44746: LD_VAR 0 1
44750: NOT
44751: PUSH
44752: LD_VAR 0 1
44756: PPUSH
44757: CALL_OW 263
44761: PUSH
44762: LD_INT 2
44764: NONEQUAL
44765: OR
44766: IFFALSE 44770
// exit ;
44768: GO 45086
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44770: LD_ADDR_VAR 0 6
44774: PUSH
44775: LD_INT 22
44777: PUSH
44778: LD_VAR 0 1
44782: PPUSH
44783: CALL_OW 255
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: LD_INT 30
44797: PUSH
44798: LD_INT 36
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 34
44807: PUSH
44808: LD_INT 31
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PPUSH
44824: CALL_OW 69
44828: ST_TO_ADDR
// if not tmp then
44829: LD_VAR 0 6
44833: NOT
44834: IFFALSE 44838
// exit ;
44836: GO 45086
// result := [ ] ;
44838: LD_ADDR_VAR 0 2
44842: PUSH
44843: EMPTY
44844: ST_TO_ADDR
// for i in tmp do
44845: LD_ADDR_VAR 0 3
44849: PUSH
44850: LD_VAR 0 6
44854: PUSH
44855: FOR_IN
44856: IFFALSE 44927
// begin t := UnitsInside ( i ) ;
44858: LD_ADDR_VAR 0 4
44862: PUSH
44863: LD_VAR 0 3
44867: PPUSH
44868: CALL_OW 313
44872: ST_TO_ADDR
// if t then
44873: LD_VAR 0 4
44877: IFFALSE 44925
// for j in t do
44879: LD_ADDR_VAR 0 7
44883: PUSH
44884: LD_VAR 0 4
44888: PUSH
44889: FOR_IN
44890: IFFALSE 44923
// result := Replace ( result , result + 1 , j ) ;
44892: LD_ADDR_VAR 0 2
44896: PUSH
44897: LD_VAR 0 2
44901: PPUSH
44902: LD_VAR 0 2
44906: PUSH
44907: LD_INT 1
44909: PLUS
44910: PPUSH
44911: LD_VAR 0 7
44915: PPUSH
44916: CALL_OW 1
44920: ST_TO_ADDR
44921: GO 44889
44923: POP
44924: POP
// end ;
44925: GO 44855
44927: POP
44928: POP
// if not result then
44929: LD_VAR 0 2
44933: NOT
44934: IFFALSE 44938
// exit ;
44936: GO 45086
// mech := result [ 1 ] ;
44938: LD_ADDR_VAR 0 5
44942: PUSH
44943: LD_VAR 0 2
44947: PUSH
44948: LD_INT 1
44950: ARRAY
44951: ST_TO_ADDR
// if result > 1 then
44952: LD_VAR 0 2
44956: PUSH
44957: LD_INT 1
44959: GREATER
44960: IFFALSE 45072
// begin for i = 2 to result do
44962: LD_ADDR_VAR 0 3
44966: PUSH
44967: DOUBLE
44968: LD_INT 2
44970: DEC
44971: ST_TO_ADDR
44972: LD_VAR 0 2
44976: PUSH
44977: FOR_TO
44978: IFFALSE 45070
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44980: LD_ADDR_VAR 0 4
44984: PUSH
44985: LD_VAR 0 2
44989: PUSH
44990: LD_VAR 0 3
44994: ARRAY
44995: PPUSH
44996: LD_INT 3
44998: PPUSH
44999: CALL_OW 259
45003: PUSH
45004: LD_VAR 0 2
45008: PUSH
45009: LD_VAR 0 3
45013: ARRAY
45014: PPUSH
45015: CALL_OW 432
45019: MINUS
45020: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45021: LD_VAR 0 4
45025: PUSH
45026: LD_VAR 0 5
45030: PPUSH
45031: LD_INT 3
45033: PPUSH
45034: CALL_OW 259
45038: PUSH
45039: LD_VAR 0 5
45043: PPUSH
45044: CALL_OW 432
45048: MINUS
45049: GREATEREQUAL
45050: IFFALSE 45068
// mech := result [ i ] ;
45052: LD_ADDR_VAR 0 5
45056: PUSH
45057: LD_VAR 0 2
45061: PUSH
45062: LD_VAR 0 3
45066: ARRAY
45067: ST_TO_ADDR
// end ;
45068: GO 44977
45070: POP
45071: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45072: LD_VAR 0 1
45076: PPUSH
45077: LD_VAR 0 5
45081: PPUSH
45082: CALL_OW 135
// end ;
45086: LD_VAR 0 2
45090: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45091: LD_INT 0
45093: PPUSH
45094: PPUSH
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
// result := [ ] ;
45106: LD_ADDR_VAR 0 7
45110: PUSH
45111: EMPTY
45112: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45113: LD_VAR 0 1
45117: PPUSH
45118: CALL_OW 266
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: IN
45133: NOT
45134: IFFALSE 45138
// exit ;
45136: GO 46772
// if name then
45138: LD_VAR 0 3
45142: IFFALSE 45158
// SetBName ( base_dep , name ) ;
45144: LD_VAR 0 1
45148: PPUSH
45149: LD_VAR 0 3
45153: PPUSH
45154: CALL_OW 500
// base := GetBase ( base_dep ) ;
45158: LD_ADDR_VAR 0 15
45162: PUSH
45163: LD_VAR 0 1
45167: PPUSH
45168: CALL_OW 274
45172: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45173: LD_ADDR_VAR 0 16
45177: PUSH
45178: LD_VAR 0 1
45182: PPUSH
45183: CALL_OW 255
45187: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45188: LD_ADDR_VAR 0 17
45192: PUSH
45193: LD_VAR 0 1
45197: PPUSH
45198: CALL_OW 248
45202: ST_TO_ADDR
// if sources then
45203: LD_VAR 0 5
45207: IFFALSE 45254
// for i = 1 to 3 do
45209: LD_ADDR_VAR 0 8
45213: PUSH
45214: DOUBLE
45215: LD_INT 1
45217: DEC
45218: ST_TO_ADDR
45219: LD_INT 3
45221: PUSH
45222: FOR_TO
45223: IFFALSE 45252
// AddResourceType ( base , i , sources [ i ] ) ;
45225: LD_VAR 0 15
45229: PPUSH
45230: LD_VAR 0 8
45234: PPUSH
45235: LD_VAR 0 5
45239: PUSH
45240: LD_VAR 0 8
45244: ARRAY
45245: PPUSH
45246: CALL_OW 276
45250: GO 45222
45252: POP
45253: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45254: LD_ADDR_VAR 0 18
45258: PUSH
45259: LD_VAR 0 15
45263: PPUSH
45264: LD_VAR 0 2
45268: PPUSH
45269: LD_INT 1
45271: PPUSH
45272: CALL 44515 0 3
45276: ST_TO_ADDR
// InitHc ;
45277: CALL_OW 19
// InitUc ;
45281: CALL_OW 18
// uc_side := side ;
45285: LD_ADDR_OWVAR 20
45289: PUSH
45290: LD_VAR 0 16
45294: ST_TO_ADDR
// uc_nation := nation ;
45295: LD_ADDR_OWVAR 21
45299: PUSH
45300: LD_VAR 0 17
45304: ST_TO_ADDR
// if buildings then
45305: LD_VAR 0 18
45309: IFFALSE 46631
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45311: LD_ADDR_VAR 0 19
45315: PUSH
45316: LD_VAR 0 18
45320: PPUSH
45321: LD_INT 2
45323: PUSH
45324: LD_INT 30
45326: PUSH
45327: LD_INT 29
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 30
45336: PUSH
45337: LD_INT 30
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: PPUSH
45349: CALL_OW 72
45353: ST_TO_ADDR
// if tmp then
45354: LD_VAR 0 19
45358: IFFALSE 45406
// for i in tmp do
45360: LD_ADDR_VAR 0 8
45364: PUSH
45365: LD_VAR 0 19
45369: PUSH
45370: FOR_IN
45371: IFFALSE 45404
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45373: LD_VAR 0 8
45377: PPUSH
45378: CALL_OW 250
45382: PPUSH
45383: LD_VAR 0 8
45387: PPUSH
45388: CALL_OW 251
45392: PPUSH
45393: LD_VAR 0 16
45397: PPUSH
45398: CALL_OW 441
45402: GO 45370
45404: POP
45405: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45406: LD_VAR 0 18
45410: PPUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 30
45416: PUSH
45417: LD_INT 32
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 30
45426: PUSH
45427: LD_INT 33
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: PPUSH
45439: CALL_OW 72
45443: IFFALSE 45531
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45445: LD_ADDR_VAR 0 8
45449: PUSH
45450: LD_VAR 0 18
45454: PPUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 30
45460: PUSH
45461: LD_INT 32
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 30
45470: PUSH
45471: LD_INT 33
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: PPUSH
45483: CALL_OW 72
45487: PUSH
45488: FOR_IN
45489: IFFALSE 45529
// begin if not GetBWeapon ( i ) then
45491: LD_VAR 0 8
45495: PPUSH
45496: CALL_OW 269
45500: NOT
45501: IFFALSE 45527
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45503: LD_VAR 0 8
45507: PPUSH
45508: LD_VAR 0 8
45512: PPUSH
45513: LD_VAR 0 2
45517: PPUSH
45518: CALL 46777 0 2
45522: PPUSH
45523: CALL_OW 431
// end ;
45527: GO 45488
45529: POP
45530: POP
// end ; for i = 1 to personel do
45531: LD_ADDR_VAR 0 8
45535: PUSH
45536: DOUBLE
45537: LD_INT 1
45539: DEC
45540: ST_TO_ADDR
45541: LD_VAR 0 6
45545: PUSH
45546: FOR_TO
45547: IFFALSE 46611
// begin if i > 4 then
45549: LD_VAR 0 8
45553: PUSH
45554: LD_INT 4
45556: GREATER
45557: IFFALSE 45561
// break ;
45559: GO 46611
// case i of 1 :
45561: LD_VAR 0 8
45565: PUSH
45566: LD_INT 1
45568: DOUBLE
45569: EQUAL
45570: IFTRUE 45574
45572: GO 45654
45574: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45575: LD_ADDR_VAR 0 12
45579: PUSH
45580: LD_VAR 0 18
45584: PPUSH
45585: LD_INT 22
45587: PUSH
45588: LD_VAR 0 16
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 58
45599: PUSH
45600: EMPTY
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: LD_INT 30
45608: PUSH
45609: LD_INT 32
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 30
45618: PUSH
45619: LD_INT 4
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 30
45628: PUSH
45629: LD_INT 5
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: PPUSH
45647: CALL_OW 72
45651: ST_TO_ADDR
45652: GO 45876
45654: LD_INT 2
45656: DOUBLE
45657: EQUAL
45658: IFTRUE 45662
45660: GO 45724
45662: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45663: LD_ADDR_VAR 0 12
45667: PUSH
45668: LD_VAR 0 18
45672: PPUSH
45673: LD_INT 22
45675: PUSH
45676: LD_VAR 0 16
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 30
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 30
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PPUSH
45717: CALL_OW 72
45721: ST_TO_ADDR
45722: GO 45876
45724: LD_INT 3
45726: DOUBLE
45727: EQUAL
45728: IFTRUE 45732
45730: GO 45794
45732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45733: LD_ADDR_VAR 0 12
45737: PUSH
45738: LD_VAR 0 18
45742: PPUSH
45743: LD_INT 22
45745: PUSH
45746: LD_VAR 0 16
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 30
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 30
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: LIST
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PPUSH
45787: CALL_OW 72
45791: ST_TO_ADDR
45792: GO 45876
45794: LD_INT 4
45796: DOUBLE
45797: EQUAL
45798: IFTRUE 45802
45800: GO 45875
45802: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45803: LD_ADDR_VAR 0 12
45807: PUSH
45808: LD_VAR 0 18
45812: PPUSH
45813: LD_INT 22
45815: PUSH
45816: LD_VAR 0 16
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: LD_INT 30
45830: PUSH
45831: LD_INT 6
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 30
45840: PUSH
45841: LD_INT 7
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 30
45850: PUSH
45851: LD_INT 8
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PPUSH
45868: CALL_OW 72
45872: ST_TO_ADDR
45873: GO 45876
45875: POP
// if i = 1 then
45876: LD_VAR 0 8
45880: PUSH
45881: LD_INT 1
45883: EQUAL
45884: IFFALSE 45995
// begin tmp := [ ] ;
45886: LD_ADDR_VAR 0 19
45890: PUSH
45891: EMPTY
45892: ST_TO_ADDR
// for j in f do
45893: LD_ADDR_VAR 0 9
45897: PUSH
45898: LD_VAR 0 12
45902: PUSH
45903: FOR_IN
45904: IFFALSE 45977
// if GetBType ( j ) = b_bunker then
45906: LD_VAR 0 9
45910: PPUSH
45911: CALL_OW 266
45915: PUSH
45916: LD_INT 32
45918: EQUAL
45919: IFFALSE 45946
// tmp := Insert ( tmp , 1 , j ) else
45921: LD_ADDR_VAR 0 19
45925: PUSH
45926: LD_VAR 0 19
45930: PPUSH
45931: LD_INT 1
45933: PPUSH
45934: LD_VAR 0 9
45938: PPUSH
45939: CALL_OW 2
45943: ST_TO_ADDR
45944: GO 45975
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45946: LD_ADDR_VAR 0 19
45950: PUSH
45951: LD_VAR 0 19
45955: PPUSH
45956: LD_VAR 0 19
45960: PUSH
45961: LD_INT 1
45963: PLUS
45964: PPUSH
45965: LD_VAR 0 9
45969: PPUSH
45970: CALL_OW 2
45974: ST_TO_ADDR
45975: GO 45903
45977: POP
45978: POP
// if tmp then
45979: LD_VAR 0 19
45983: IFFALSE 45995
// f := tmp ;
45985: LD_ADDR_VAR 0 12
45989: PUSH
45990: LD_VAR 0 19
45994: ST_TO_ADDR
// end ; x := personel [ i ] ;
45995: LD_ADDR_VAR 0 13
45999: PUSH
46000: LD_VAR 0 6
46004: PUSH
46005: LD_VAR 0 8
46009: ARRAY
46010: ST_TO_ADDR
// if x = - 1 then
46011: LD_VAR 0 13
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: EQUAL
46020: IFFALSE 46229
// begin for j in f do
46022: LD_ADDR_VAR 0 9
46026: PUSH
46027: LD_VAR 0 12
46031: PUSH
46032: FOR_IN
46033: IFFALSE 46225
// repeat InitHc ;
46035: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46039: LD_VAR 0 9
46043: PPUSH
46044: CALL_OW 266
46048: PUSH
46049: LD_INT 5
46051: EQUAL
46052: IFFALSE 46122
// begin if UnitsInside ( j ) < 3 then
46054: LD_VAR 0 9
46058: PPUSH
46059: CALL_OW 313
46063: PUSH
46064: LD_INT 3
46066: LESS
46067: IFFALSE 46103
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46069: LD_INT 0
46071: PPUSH
46072: LD_INT 5
46074: PUSH
46075: LD_INT 8
46077: PUSH
46078: LD_INT 9
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: PUSH
46086: LD_VAR 0 17
46090: ARRAY
46091: PPUSH
46092: LD_VAR 0 4
46096: PPUSH
46097: CALL_OW 380
46101: GO 46120
// PrepareHuman ( false , i , skill ) ;
46103: LD_INT 0
46105: PPUSH
46106: LD_VAR 0 8
46110: PPUSH
46111: LD_VAR 0 4
46115: PPUSH
46116: CALL_OW 380
// end else
46120: GO 46139
// PrepareHuman ( false , i , skill ) ;
46122: LD_INT 0
46124: PPUSH
46125: LD_VAR 0 8
46129: PPUSH
46130: LD_VAR 0 4
46134: PPUSH
46135: CALL_OW 380
// un := CreateHuman ;
46139: LD_ADDR_VAR 0 14
46143: PUSH
46144: CALL_OW 44
46148: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46149: LD_ADDR_VAR 0 7
46153: PUSH
46154: LD_VAR 0 7
46158: PPUSH
46159: LD_INT 1
46161: PPUSH
46162: LD_VAR 0 14
46166: PPUSH
46167: CALL_OW 2
46171: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46172: LD_VAR 0 14
46176: PPUSH
46177: LD_VAR 0 9
46181: PPUSH
46182: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46186: LD_VAR 0 9
46190: PPUSH
46191: CALL_OW 313
46195: PUSH
46196: LD_INT 6
46198: EQUAL
46199: PUSH
46200: LD_VAR 0 9
46204: PPUSH
46205: CALL_OW 266
46209: PUSH
46210: LD_INT 32
46212: PUSH
46213: LD_INT 31
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: IN
46220: OR
46221: IFFALSE 46035
46223: GO 46032
46225: POP
46226: POP
// end else
46227: GO 46609
// for j = 1 to x do
46229: LD_ADDR_VAR 0 9
46233: PUSH
46234: DOUBLE
46235: LD_INT 1
46237: DEC
46238: ST_TO_ADDR
46239: LD_VAR 0 13
46243: PUSH
46244: FOR_TO
46245: IFFALSE 46607
// begin InitHc ;
46247: CALL_OW 19
// if not f then
46251: LD_VAR 0 12
46255: NOT
46256: IFFALSE 46345
// begin PrepareHuman ( false , i , skill ) ;
46258: LD_INT 0
46260: PPUSH
46261: LD_VAR 0 8
46265: PPUSH
46266: LD_VAR 0 4
46270: PPUSH
46271: CALL_OW 380
// un := CreateHuman ;
46275: LD_ADDR_VAR 0 14
46279: PUSH
46280: CALL_OW 44
46284: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46285: LD_ADDR_VAR 0 7
46289: PUSH
46290: LD_VAR 0 7
46294: PPUSH
46295: LD_INT 1
46297: PPUSH
46298: LD_VAR 0 14
46302: PPUSH
46303: CALL_OW 2
46307: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46308: LD_VAR 0 14
46312: PPUSH
46313: LD_VAR 0 1
46317: PPUSH
46318: CALL_OW 250
46322: PPUSH
46323: LD_VAR 0 1
46327: PPUSH
46328: CALL_OW 251
46332: PPUSH
46333: LD_INT 10
46335: PPUSH
46336: LD_INT 0
46338: PPUSH
46339: CALL_OW 50
// continue ;
46343: GO 46244
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46345: LD_VAR 0 12
46349: PUSH
46350: LD_INT 1
46352: ARRAY
46353: PPUSH
46354: CALL_OW 313
46358: PUSH
46359: LD_VAR 0 12
46363: PUSH
46364: LD_INT 1
46366: ARRAY
46367: PPUSH
46368: CALL_OW 266
46372: PUSH
46373: LD_INT 32
46375: PUSH
46376: LD_INT 31
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: IN
46383: AND
46384: PUSH
46385: LD_VAR 0 12
46389: PUSH
46390: LD_INT 1
46392: ARRAY
46393: PPUSH
46394: CALL_OW 313
46398: PUSH
46399: LD_INT 6
46401: EQUAL
46402: OR
46403: IFFALSE 46423
// f := Delete ( f , 1 ) ;
46405: LD_ADDR_VAR 0 12
46409: PUSH
46410: LD_VAR 0 12
46414: PPUSH
46415: LD_INT 1
46417: PPUSH
46418: CALL_OW 3
46422: ST_TO_ADDR
// if not f then
46423: LD_VAR 0 12
46427: NOT
46428: IFFALSE 46446
// begin x := x + 2 ;
46430: LD_ADDR_VAR 0 13
46434: PUSH
46435: LD_VAR 0 13
46439: PUSH
46440: LD_INT 2
46442: PLUS
46443: ST_TO_ADDR
// continue ;
46444: GO 46244
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46446: LD_VAR 0 12
46450: PUSH
46451: LD_INT 1
46453: ARRAY
46454: PPUSH
46455: CALL_OW 266
46459: PUSH
46460: LD_INT 5
46462: EQUAL
46463: IFFALSE 46537
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46465: LD_VAR 0 12
46469: PUSH
46470: LD_INT 1
46472: ARRAY
46473: PPUSH
46474: CALL_OW 313
46478: PUSH
46479: LD_INT 3
46481: LESS
46482: IFFALSE 46518
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46484: LD_INT 0
46486: PPUSH
46487: LD_INT 5
46489: PUSH
46490: LD_INT 8
46492: PUSH
46493: LD_INT 9
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: LIST
46500: PUSH
46501: LD_VAR 0 17
46505: ARRAY
46506: PPUSH
46507: LD_VAR 0 4
46511: PPUSH
46512: CALL_OW 380
46516: GO 46535
// PrepareHuman ( false , i , skill ) ;
46518: LD_INT 0
46520: PPUSH
46521: LD_VAR 0 8
46525: PPUSH
46526: LD_VAR 0 4
46530: PPUSH
46531: CALL_OW 380
// end else
46535: GO 46554
// PrepareHuman ( false , i , skill ) ;
46537: LD_INT 0
46539: PPUSH
46540: LD_VAR 0 8
46544: PPUSH
46545: LD_VAR 0 4
46549: PPUSH
46550: CALL_OW 380
// un := CreateHuman ;
46554: LD_ADDR_VAR 0 14
46558: PUSH
46559: CALL_OW 44
46563: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46564: LD_ADDR_VAR 0 7
46568: PUSH
46569: LD_VAR 0 7
46573: PPUSH
46574: LD_INT 1
46576: PPUSH
46577: LD_VAR 0 14
46581: PPUSH
46582: CALL_OW 2
46586: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46587: LD_VAR 0 14
46591: PPUSH
46592: LD_VAR 0 12
46596: PUSH
46597: LD_INT 1
46599: ARRAY
46600: PPUSH
46601: CALL_OW 52
// end ;
46605: GO 46244
46607: POP
46608: POP
// end ;
46609: GO 45546
46611: POP
46612: POP
// result := result ^ buildings ;
46613: LD_ADDR_VAR 0 7
46617: PUSH
46618: LD_VAR 0 7
46622: PUSH
46623: LD_VAR 0 18
46627: ADD
46628: ST_TO_ADDR
// end else
46629: GO 46772
// begin for i = 1 to personel do
46631: LD_ADDR_VAR 0 8
46635: PUSH
46636: DOUBLE
46637: LD_INT 1
46639: DEC
46640: ST_TO_ADDR
46641: LD_VAR 0 6
46645: PUSH
46646: FOR_TO
46647: IFFALSE 46770
// begin if i > 4 then
46649: LD_VAR 0 8
46653: PUSH
46654: LD_INT 4
46656: GREATER
46657: IFFALSE 46661
// break ;
46659: GO 46770
// x := personel [ i ] ;
46661: LD_ADDR_VAR 0 13
46665: PUSH
46666: LD_VAR 0 6
46670: PUSH
46671: LD_VAR 0 8
46675: ARRAY
46676: ST_TO_ADDR
// if x = - 1 then
46677: LD_VAR 0 13
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: EQUAL
46686: IFFALSE 46690
// continue ;
46688: GO 46646
// PrepareHuman ( false , i , skill ) ;
46690: LD_INT 0
46692: PPUSH
46693: LD_VAR 0 8
46697: PPUSH
46698: LD_VAR 0 4
46702: PPUSH
46703: CALL_OW 380
// un := CreateHuman ;
46707: LD_ADDR_VAR 0 14
46711: PUSH
46712: CALL_OW 44
46716: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46717: LD_VAR 0 14
46721: PPUSH
46722: LD_VAR 0 1
46726: PPUSH
46727: CALL_OW 250
46731: PPUSH
46732: LD_VAR 0 1
46736: PPUSH
46737: CALL_OW 251
46741: PPUSH
46742: LD_INT 10
46744: PPUSH
46745: LD_INT 0
46747: PPUSH
46748: CALL_OW 50
// result := result ^ un ;
46752: LD_ADDR_VAR 0 7
46756: PUSH
46757: LD_VAR 0 7
46761: PUSH
46762: LD_VAR 0 14
46766: ADD
46767: ST_TO_ADDR
// end ;
46768: GO 46646
46770: POP
46771: POP
// end ; end ;
46772: LD_VAR 0 7
46776: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46777: LD_INT 0
46779: PPUSH
46780: PPUSH
46781: PPUSH
46782: PPUSH
46783: PPUSH
46784: PPUSH
46785: PPUSH
46786: PPUSH
46787: PPUSH
46788: PPUSH
46789: PPUSH
46790: PPUSH
46791: PPUSH
46792: PPUSH
46793: PPUSH
46794: PPUSH
// result := false ;
46795: LD_ADDR_VAR 0 3
46799: PUSH
46800: LD_INT 0
46802: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46803: LD_VAR 0 1
46807: NOT
46808: PUSH
46809: LD_VAR 0 1
46813: PPUSH
46814: CALL_OW 266
46818: PUSH
46819: LD_INT 32
46821: PUSH
46822: LD_INT 33
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: IN
46829: NOT
46830: OR
46831: IFFALSE 46835
// exit ;
46833: GO 47944
// nat := GetNation ( tower ) ;
46835: LD_ADDR_VAR 0 12
46839: PUSH
46840: LD_VAR 0 1
46844: PPUSH
46845: CALL_OW 248
46849: ST_TO_ADDR
// side := GetSide ( tower ) ;
46850: LD_ADDR_VAR 0 16
46854: PUSH
46855: LD_VAR 0 1
46859: PPUSH
46860: CALL_OW 255
46864: ST_TO_ADDR
// x := GetX ( tower ) ;
46865: LD_ADDR_VAR 0 10
46869: PUSH
46870: LD_VAR 0 1
46874: PPUSH
46875: CALL_OW 250
46879: ST_TO_ADDR
// y := GetY ( tower ) ;
46880: LD_ADDR_VAR 0 11
46884: PUSH
46885: LD_VAR 0 1
46889: PPUSH
46890: CALL_OW 251
46894: ST_TO_ADDR
// if not x or not y then
46895: LD_VAR 0 10
46899: NOT
46900: PUSH
46901: LD_VAR 0 11
46905: NOT
46906: OR
46907: IFFALSE 46911
// exit ;
46909: GO 47944
// weapon := 0 ;
46911: LD_ADDR_VAR 0 18
46915: PUSH
46916: LD_INT 0
46918: ST_TO_ADDR
// fac_list := [ ] ;
46919: LD_ADDR_VAR 0 17
46923: PUSH
46924: EMPTY
46925: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46926: LD_ADDR_VAR 0 6
46930: PUSH
46931: LD_VAR 0 1
46935: PPUSH
46936: CALL_OW 274
46940: PPUSH
46941: LD_VAR 0 2
46945: PPUSH
46946: LD_INT 0
46948: PPUSH
46949: CALL 44515 0 3
46953: PPUSH
46954: LD_INT 30
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PPUSH
46964: CALL_OW 72
46968: ST_TO_ADDR
// if not factories then
46969: LD_VAR 0 6
46973: NOT
46974: IFFALSE 46978
// exit ;
46976: GO 47944
// for i in factories do
46978: LD_ADDR_VAR 0 8
46982: PUSH
46983: LD_VAR 0 6
46987: PUSH
46988: FOR_IN
46989: IFFALSE 47014
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46991: LD_ADDR_VAR 0 17
46995: PUSH
46996: LD_VAR 0 17
47000: PUSH
47001: LD_VAR 0 8
47005: PPUSH
47006: CALL_OW 478
47010: UNION
47011: ST_TO_ADDR
47012: GO 46988
47014: POP
47015: POP
// if not fac_list then
47016: LD_VAR 0 17
47020: NOT
47021: IFFALSE 47025
// exit ;
47023: GO 47944
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47025: LD_ADDR_VAR 0 5
47029: PUSH
47030: LD_INT 4
47032: PUSH
47033: LD_INT 5
47035: PUSH
47036: LD_INT 9
47038: PUSH
47039: LD_INT 10
47041: PUSH
47042: LD_INT 6
47044: PUSH
47045: LD_INT 7
47047: PUSH
47048: LD_INT 11
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 27
47062: PUSH
47063: LD_INT 28
47065: PUSH
47066: LD_INT 26
47068: PUSH
47069: LD_INT 30
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 43
47080: PUSH
47081: LD_INT 44
47083: PUSH
47084: LD_INT 46
47086: PUSH
47087: LD_INT 45
47089: PUSH
47090: LD_INT 47
47092: PUSH
47093: LD_INT 49
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: PUSH
47109: LD_VAR 0 12
47113: ARRAY
47114: ST_TO_ADDR
// list := list isect fac_list ;
47115: LD_ADDR_VAR 0 5
47119: PUSH
47120: LD_VAR 0 5
47124: PUSH
47125: LD_VAR 0 17
47129: ISECT
47130: ST_TO_ADDR
// if not list then
47131: LD_VAR 0 5
47135: NOT
47136: IFFALSE 47140
// exit ;
47138: GO 47944
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47140: LD_VAR 0 12
47144: PUSH
47145: LD_INT 3
47147: EQUAL
47148: PUSH
47149: LD_INT 49
47151: PUSH
47152: LD_VAR 0 5
47156: IN
47157: AND
47158: PUSH
47159: LD_INT 31
47161: PPUSH
47162: LD_VAR 0 16
47166: PPUSH
47167: CALL_OW 321
47171: PUSH
47172: LD_INT 2
47174: EQUAL
47175: AND
47176: IFFALSE 47236
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47178: LD_INT 22
47180: PUSH
47181: LD_VAR 0 16
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 35
47192: PUSH
47193: LD_INT 49
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 91
47202: PUSH
47203: LD_VAR 0 1
47207: PUSH
47208: LD_INT 10
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: PPUSH
47221: CALL_OW 69
47225: NOT
47226: IFFALSE 47236
// weapon := ru_time_lapser ;
47228: LD_ADDR_VAR 0 18
47232: PUSH
47233: LD_INT 49
47235: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47236: LD_VAR 0 12
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: IN
47251: PUSH
47252: LD_INT 11
47254: PUSH
47255: LD_VAR 0 5
47259: IN
47260: PUSH
47261: LD_INT 30
47263: PUSH
47264: LD_VAR 0 5
47268: IN
47269: OR
47270: AND
47271: PUSH
47272: LD_INT 6
47274: PPUSH
47275: LD_VAR 0 16
47279: PPUSH
47280: CALL_OW 321
47284: PUSH
47285: LD_INT 2
47287: EQUAL
47288: AND
47289: IFFALSE 47454
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47291: LD_INT 22
47293: PUSH
47294: LD_VAR 0 16
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 35
47308: PUSH
47309: LD_INT 11
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 35
47318: PUSH
47319: LD_INT 30
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 91
47333: PUSH
47334: LD_VAR 0 1
47338: PUSH
47339: LD_INT 18
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: LIST
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: LIST
47351: PPUSH
47352: CALL_OW 69
47356: NOT
47357: PUSH
47358: LD_INT 22
47360: PUSH
47361: LD_VAR 0 16
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 30
47375: PUSH
47376: LD_INT 32
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 30
47385: PUSH
47386: LD_INT 33
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 91
47400: PUSH
47401: LD_VAR 0 1
47405: PUSH
47406: LD_INT 12
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: PUSH
47419: EMPTY
47420: LIST
47421: PPUSH
47422: CALL_OW 69
47426: PUSH
47427: LD_INT 2
47429: GREATER
47430: AND
47431: IFFALSE 47454
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47433: LD_ADDR_VAR 0 18
47437: PUSH
47438: LD_INT 11
47440: PUSH
47441: LD_INT 30
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_VAR 0 12
47452: ARRAY
47453: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47454: LD_VAR 0 18
47458: NOT
47459: PUSH
47460: LD_INT 40
47462: PPUSH
47463: LD_VAR 0 16
47467: PPUSH
47468: CALL_OW 321
47472: PUSH
47473: LD_INT 2
47475: EQUAL
47476: AND
47477: PUSH
47478: LD_INT 7
47480: PUSH
47481: LD_VAR 0 5
47485: IN
47486: PUSH
47487: LD_INT 28
47489: PUSH
47490: LD_VAR 0 5
47494: IN
47495: OR
47496: PUSH
47497: LD_INT 45
47499: PUSH
47500: LD_VAR 0 5
47504: IN
47505: OR
47506: AND
47507: IFFALSE 47761
// begin hex := GetHexInfo ( x , y ) ;
47509: LD_ADDR_VAR 0 4
47513: PUSH
47514: LD_VAR 0 10
47518: PPUSH
47519: LD_VAR 0 11
47523: PPUSH
47524: CALL_OW 546
47528: ST_TO_ADDR
// if hex [ 1 ] then
47529: LD_VAR 0 4
47533: PUSH
47534: LD_INT 1
47536: ARRAY
47537: IFFALSE 47541
// exit ;
47539: GO 47944
// height := hex [ 2 ] ;
47541: LD_ADDR_VAR 0 15
47545: PUSH
47546: LD_VAR 0 4
47550: PUSH
47551: LD_INT 2
47553: ARRAY
47554: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47555: LD_ADDR_VAR 0 14
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: LD_INT 3
47568: PUSH
47569: LD_INT 5
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// for i in tmp do
47578: LD_ADDR_VAR 0 8
47582: PUSH
47583: LD_VAR 0 14
47587: PUSH
47588: FOR_IN
47589: IFFALSE 47759
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47591: LD_ADDR_VAR 0 9
47595: PUSH
47596: LD_VAR 0 10
47600: PPUSH
47601: LD_VAR 0 8
47605: PPUSH
47606: LD_INT 5
47608: PPUSH
47609: CALL_OW 272
47613: PUSH
47614: LD_VAR 0 11
47618: PPUSH
47619: LD_VAR 0 8
47623: PPUSH
47624: LD_INT 5
47626: PPUSH
47627: CALL_OW 273
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47636: LD_VAR 0 9
47640: PUSH
47641: LD_INT 1
47643: ARRAY
47644: PPUSH
47645: LD_VAR 0 9
47649: PUSH
47650: LD_INT 2
47652: ARRAY
47653: PPUSH
47654: CALL_OW 488
47658: IFFALSE 47757
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47660: LD_ADDR_VAR 0 4
47664: PUSH
47665: LD_VAR 0 9
47669: PUSH
47670: LD_INT 1
47672: ARRAY
47673: PPUSH
47674: LD_VAR 0 9
47678: PUSH
47679: LD_INT 2
47681: ARRAY
47682: PPUSH
47683: CALL_OW 546
47687: ST_TO_ADDR
// if hex [ 1 ] then
47688: LD_VAR 0 4
47692: PUSH
47693: LD_INT 1
47695: ARRAY
47696: IFFALSE 47700
// continue ;
47698: GO 47588
// h := hex [ 2 ] ;
47700: LD_ADDR_VAR 0 13
47704: PUSH
47705: LD_VAR 0 4
47709: PUSH
47710: LD_INT 2
47712: ARRAY
47713: ST_TO_ADDR
// if h + 7 < height then
47714: LD_VAR 0 13
47718: PUSH
47719: LD_INT 7
47721: PLUS
47722: PUSH
47723: LD_VAR 0 15
47727: LESS
47728: IFFALSE 47757
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47730: LD_ADDR_VAR 0 18
47734: PUSH
47735: LD_INT 7
47737: PUSH
47738: LD_INT 28
47740: PUSH
47741: LD_INT 45
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: PUSH
47749: LD_VAR 0 12
47753: ARRAY
47754: ST_TO_ADDR
// break ;
47755: GO 47759
// end ; end ; end ;
47757: GO 47588
47759: POP
47760: POP
// end ; if not weapon then
47761: LD_VAR 0 18
47765: NOT
47766: IFFALSE 47826
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47768: LD_ADDR_VAR 0 5
47772: PUSH
47773: LD_VAR 0 5
47777: PUSH
47778: LD_INT 11
47780: PUSH
47781: LD_INT 30
47783: PUSH
47784: LD_INT 49
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: LIST
47791: DIFF
47792: ST_TO_ADDR
// if not list then
47793: LD_VAR 0 5
47797: NOT
47798: IFFALSE 47802
// exit ;
47800: GO 47944
// weapon := list [ rand ( 1 , list ) ] ;
47802: LD_ADDR_VAR 0 18
47806: PUSH
47807: LD_VAR 0 5
47811: PUSH
47812: LD_INT 1
47814: PPUSH
47815: LD_VAR 0 5
47819: PPUSH
47820: CALL_OW 12
47824: ARRAY
47825: ST_TO_ADDR
// end ; if weapon then
47826: LD_VAR 0 18
47830: IFFALSE 47944
// begin tmp := CostOfWeapon ( weapon ) ;
47832: LD_ADDR_VAR 0 14
47836: PUSH
47837: LD_VAR 0 18
47841: PPUSH
47842: CALL_OW 451
47846: ST_TO_ADDR
// j := GetBase ( tower ) ;
47847: LD_ADDR_VAR 0 9
47851: PUSH
47852: LD_VAR 0 1
47856: PPUSH
47857: CALL_OW 274
47861: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47862: LD_VAR 0 9
47866: PPUSH
47867: LD_INT 1
47869: PPUSH
47870: CALL_OW 275
47874: PUSH
47875: LD_VAR 0 14
47879: PUSH
47880: LD_INT 1
47882: ARRAY
47883: GREATEREQUAL
47884: PUSH
47885: LD_VAR 0 9
47889: PPUSH
47890: LD_INT 2
47892: PPUSH
47893: CALL_OW 275
47897: PUSH
47898: LD_VAR 0 14
47902: PUSH
47903: LD_INT 2
47905: ARRAY
47906: GREATEREQUAL
47907: AND
47908: PUSH
47909: LD_VAR 0 9
47913: PPUSH
47914: LD_INT 3
47916: PPUSH
47917: CALL_OW 275
47921: PUSH
47922: LD_VAR 0 14
47926: PUSH
47927: LD_INT 3
47929: ARRAY
47930: GREATEREQUAL
47931: AND
47932: IFFALSE 47944
// result := weapon ;
47934: LD_ADDR_VAR 0 3
47938: PUSH
47939: LD_VAR 0 18
47943: ST_TO_ADDR
// end ; end ;
47944: LD_VAR 0 3
47948: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47949: LD_INT 0
47951: PPUSH
47952: PPUSH
// result := true ;
47953: LD_ADDR_VAR 0 3
47957: PUSH
47958: LD_INT 1
47960: ST_TO_ADDR
// if array1 = array2 then
47961: LD_VAR 0 1
47965: PUSH
47966: LD_VAR 0 2
47970: EQUAL
47971: IFFALSE 48031
// begin for i = 1 to array1 do
47973: LD_ADDR_VAR 0 4
47977: PUSH
47978: DOUBLE
47979: LD_INT 1
47981: DEC
47982: ST_TO_ADDR
47983: LD_VAR 0 1
47987: PUSH
47988: FOR_TO
47989: IFFALSE 48027
// if array1 [ i ] <> array2 [ i ] then
47991: LD_VAR 0 1
47995: PUSH
47996: LD_VAR 0 4
48000: ARRAY
48001: PUSH
48002: LD_VAR 0 2
48006: PUSH
48007: LD_VAR 0 4
48011: ARRAY
48012: NONEQUAL
48013: IFFALSE 48025
// begin result := false ;
48015: LD_ADDR_VAR 0 3
48019: PUSH
48020: LD_INT 0
48022: ST_TO_ADDR
// break ;
48023: GO 48027
// end ;
48025: GO 47988
48027: POP
48028: POP
// end else
48029: GO 48039
// result := false ;
48031: LD_ADDR_VAR 0 3
48035: PUSH
48036: LD_INT 0
48038: ST_TO_ADDR
// end ;
48039: LD_VAR 0 3
48043: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48044: LD_INT 0
48046: PPUSH
48047: PPUSH
// if not array1 or not array2 then
48048: LD_VAR 0 1
48052: NOT
48053: PUSH
48054: LD_VAR 0 2
48058: NOT
48059: OR
48060: IFFALSE 48064
// exit ;
48062: GO 48128
// result := true ;
48064: LD_ADDR_VAR 0 3
48068: PUSH
48069: LD_INT 1
48071: ST_TO_ADDR
// for i = 1 to array1 do
48072: LD_ADDR_VAR 0 4
48076: PUSH
48077: DOUBLE
48078: LD_INT 1
48080: DEC
48081: ST_TO_ADDR
48082: LD_VAR 0 1
48086: PUSH
48087: FOR_TO
48088: IFFALSE 48126
// if array1 [ i ] <> array2 [ i ] then
48090: LD_VAR 0 1
48094: PUSH
48095: LD_VAR 0 4
48099: ARRAY
48100: PUSH
48101: LD_VAR 0 2
48105: PUSH
48106: LD_VAR 0 4
48110: ARRAY
48111: NONEQUAL
48112: IFFALSE 48124
// begin result := false ;
48114: LD_ADDR_VAR 0 3
48118: PUSH
48119: LD_INT 0
48121: ST_TO_ADDR
// break ;
48122: GO 48126
// end ;
48124: GO 48087
48126: POP
48127: POP
// end ;
48128: LD_VAR 0 3
48132: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48133: LD_INT 0
48135: PPUSH
48136: PPUSH
48137: PPUSH
// pom := GetBase ( fac ) ;
48138: LD_ADDR_VAR 0 5
48142: PUSH
48143: LD_VAR 0 1
48147: PPUSH
48148: CALL_OW 274
48152: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48153: LD_ADDR_VAR 0 4
48157: PUSH
48158: LD_VAR 0 2
48162: PUSH
48163: LD_INT 1
48165: ARRAY
48166: PPUSH
48167: LD_VAR 0 2
48171: PUSH
48172: LD_INT 2
48174: ARRAY
48175: PPUSH
48176: LD_VAR 0 2
48180: PUSH
48181: LD_INT 3
48183: ARRAY
48184: PPUSH
48185: LD_VAR 0 2
48189: PUSH
48190: LD_INT 4
48192: ARRAY
48193: PPUSH
48194: CALL_OW 449
48198: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48199: LD_ADDR_VAR 0 3
48203: PUSH
48204: LD_VAR 0 5
48208: PPUSH
48209: LD_INT 1
48211: PPUSH
48212: CALL_OW 275
48216: PUSH
48217: LD_VAR 0 4
48221: PUSH
48222: LD_INT 1
48224: ARRAY
48225: GREATEREQUAL
48226: PUSH
48227: LD_VAR 0 5
48231: PPUSH
48232: LD_INT 2
48234: PPUSH
48235: CALL_OW 275
48239: PUSH
48240: LD_VAR 0 4
48244: PUSH
48245: LD_INT 2
48247: ARRAY
48248: GREATEREQUAL
48249: AND
48250: PUSH
48251: LD_VAR 0 5
48255: PPUSH
48256: LD_INT 3
48258: PPUSH
48259: CALL_OW 275
48263: PUSH
48264: LD_VAR 0 4
48268: PUSH
48269: LD_INT 3
48271: ARRAY
48272: GREATEREQUAL
48273: AND
48274: ST_TO_ADDR
// end ;
48275: LD_VAR 0 3
48279: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48280: LD_INT 0
48282: PPUSH
48283: PPUSH
48284: PPUSH
48285: PPUSH
// pom := GetBase ( building ) ;
48286: LD_ADDR_VAR 0 3
48290: PUSH
48291: LD_VAR 0 1
48295: PPUSH
48296: CALL_OW 274
48300: ST_TO_ADDR
// if not pom then
48301: LD_VAR 0 3
48305: NOT
48306: IFFALSE 48310
// exit ;
48308: GO 48480
// btype := GetBType ( building ) ;
48310: LD_ADDR_VAR 0 5
48314: PUSH
48315: LD_VAR 0 1
48319: PPUSH
48320: CALL_OW 266
48324: ST_TO_ADDR
// if btype = b_armoury then
48325: LD_VAR 0 5
48329: PUSH
48330: LD_INT 4
48332: EQUAL
48333: IFFALSE 48343
// btype := b_barracks ;
48335: LD_ADDR_VAR 0 5
48339: PUSH
48340: LD_INT 5
48342: ST_TO_ADDR
// if btype = b_depot then
48343: LD_VAR 0 5
48347: PUSH
48348: LD_INT 0
48350: EQUAL
48351: IFFALSE 48361
// btype := b_warehouse ;
48353: LD_ADDR_VAR 0 5
48357: PUSH
48358: LD_INT 1
48360: ST_TO_ADDR
// if btype = b_workshop then
48361: LD_VAR 0 5
48365: PUSH
48366: LD_INT 2
48368: EQUAL
48369: IFFALSE 48379
// btype := b_factory ;
48371: LD_ADDR_VAR 0 5
48375: PUSH
48376: LD_INT 3
48378: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48379: LD_ADDR_VAR 0 4
48383: PUSH
48384: LD_VAR 0 5
48388: PPUSH
48389: LD_VAR 0 1
48393: PPUSH
48394: CALL_OW 248
48398: PPUSH
48399: CALL_OW 450
48403: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48404: LD_ADDR_VAR 0 2
48408: PUSH
48409: LD_VAR 0 3
48413: PPUSH
48414: LD_INT 1
48416: PPUSH
48417: CALL_OW 275
48421: PUSH
48422: LD_VAR 0 4
48426: PUSH
48427: LD_INT 1
48429: ARRAY
48430: GREATEREQUAL
48431: PUSH
48432: LD_VAR 0 3
48436: PPUSH
48437: LD_INT 2
48439: PPUSH
48440: CALL_OW 275
48444: PUSH
48445: LD_VAR 0 4
48449: PUSH
48450: LD_INT 2
48452: ARRAY
48453: GREATEREQUAL
48454: AND
48455: PUSH
48456: LD_VAR 0 3
48460: PPUSH
48461: LD_INT 3
48463: PPUSH
48464: CALL_OW 275
48468: PUSH
48469: LD_VAR 0 4
48473: PUSH
48474: LD_INT 3
48476: ARRAY
48477: GREATEREQUAL
48478: AND
48479: ST_TO_ADDR
// end ;
48480: LD_VAR 0 2
48484: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48485: LD_INT 0
48487: PPUSH
48488: PPUSH
48489: PPUSH
// pom := GetBase ( building ) ;
48490: LD_ADDR_VAR 0 4
48494: PUSH
48495: LD_VAR 0 1
48499: PPUSH
48500: CALL_OW 274
48504: ST_TO_ADDR
// if not pom then
48505: LD_VAR 0 4
48509: NOT
48510: IFFALSE 48514
// exit ;
48512: GO 48615
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48514: LD_ADDR_VAR 0 5
48518: PUSH
48519: LD_VAR 0 2
48523: PPUSH
48524: LD_VAR 0 1
48528: PPUSH
48529: CALL_OW 248
48533: PPUSH
48534: CALL_OW 450
48538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48539: LD_ADDR_VAR 0 3
48543: PUSH
48544: LD_VAR 0 4
48548: PPUSH
48549: LD_INT 1
48551: PPUSH
48552: CALL_OW 275
48556: PUSH
48557: LD_VAR 0 5
48561: PUSH
48562: LD_INT 1
48564: ARRAY
48565: GREATEREQUAL
48566: PUSH
48567: LD_VAR 0 4
48571: PPUSH
48572: LD_INT 2
48574: PPUSH
48575: CALL_OW 275
48579: PUSH
48580: LD_VAR 0 5
48584: PUSH
48585: LD_INT 2
48587: ARRAY
48588: GREATEREQUAL
48589: AND
48590: PUSH
48591: LD_VAR 0 4
48595: PPUSH
48596: LD_INT 3
48598: PPUSH
48599: CALL_OW 275
48603: PUSH
48604: LD_VAR 0 5
48608: PUSH
48609: LD_INT 3
48611: ARRAY
48612: GREATEREQUAL
48613: AND
48614: ST_TO_ADDR
// end ;
48615: LD_VAR 0 3
48619: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48620: LD_INT 0
48622: PPUSH
48623: PPUSH
48624: PPUSH
48625: PPUSH
48626: PPUSH
48627: PPUSH
48628: PPUSH
48629: PPUSH
48630: PPUSH
48631: PPUSH
48632: PPUSH
// result := false ;
48633: LD_ADDR_VAR 0 8
48637: PUSH
48638: LD_INT 0
48640: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48641: LD_VAR 0 5
48645: NOT
48646: PUSH
48647: LD_VAR 0 1
48651: NOT
48652: OR
48653: PUSH
48654: LD_VAR 0 2
48658: NOT
48659: OR
48660: PUSH
48661: LD_VAR 0 3
48665: NOT
48666: OR
48667: IFFALSE 48671
// exit ;
48669: GO 49485
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48671: LD_ADDR_VAR 0 14
48675: PUSH
48676: LD_VAR 0 1
48680: PPUSH
48681: LD_VAR 0 2
48685: PPUSH
48686: LD_VAR 0 3
48690: PPUSH
48691: LD_VAR 0 4
48695: PPUSH
48696: LD_VAR 0 5
48700: PUSH
48701: LD_INT 1
48703: ARRAY
48704: PPUSH
48705: CALL_OW 248
48709: PPUSH
48710: LD_INT 0
48712: PPUSH
48713: CALL 50738 0 6
48717: ST_TO_ADDR
// if not hexes then
48718: LD_VAR 0 14
48722: NOT
48723: IFFALSE 48727
// exit ;
48725: GO 49485
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48727: LD_ADDR_VAR 0 17
48731: PUSH
48732: LD_VAR 0 5
48736: PPUSH
48737: LD_INT 22
48739: PUSH
48740: LD_VAR 0 13
48744: PPUSH
48745: CALL_OW 255
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: LD_INT 30
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 30
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PPUSH
48786: CALL_OW 72
48790: ST_TO_ADDR
// for i = 1 to hexes do
48791: LD_ADDR_VAR 0 9
48795: PUSH
48796: DOUBLE
48797: LD_INT 1
48799: DEC
48800: ST_TO_ADDR
48801: LD_VAR 0 14
48805: PUSH
48806: FOR_TO
48807: IFFALSE 49483
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48809: LD_ADDR_VAR 0 13
48813: PUSH
48814: LD_VAR 0 14
48818: PUSH
48819: LD_VAR 0 9
48823: ARRAY
48824: PUSH
48825: LD_INT 1
48827: ARRAY
48828: PPUSH
48829: LD_VAR 0 14
48833: PUSH
48834: LD_VAR 0 9
48838: ARRAY
48839: PUSH
48840: LD_INT 2
48842: ARRAY
48843: PPUSH
48844: CALL_OW 428
48848: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48849: LD_VAR 0 14
48853: PUSH
48854: LD_VAR 0 9
48858: ARRAY
48859: PUSH
48860: LD_INT 1
48862: ARRAY
48863: PPUSH
48864: LD_VAR 0 14
48868: PUSH
48869: LD_VAR 0 9
48873: ARRAY
48874: PUSH
48875: LD_INT 2
48877: ARRAY
48878: PPUSH
48879: CALL_OW 351
48883: PUSH
48884: LD_VAR 0 14
48888: PUSH
48889: LD_VAR 0 9
48893: ARRAY
48894: PUSH
48895: LD_INT 1
48897: ARRAY
48898: PPUSH
48899: LD_VAR 0 14
48903: PUSH
48904: LD_VAR 0 9
48908: ARRAY
48909: PUSH
48910: LD_INT 2
48912: ARRAY
48913: PPUSH
48914: CALL_OW 488
48918: NOT
48919: OR
48920: PUSH
48921: LD_VAR 0 13
48925: PPUSH
48926: CALL_OW 247
48930: PUSH
48931: LD_INT 3
48933: EQUAL
48934: OR
48935: IFFALSE 48941
// exit ;
48937: POP
48938: POP
48939: GO 49485
// if not tmp then
48941: LD_VAR 0 13
48945: NOT
48946: IFFALSE 48950
// continue ;
48948: GO 48806
// result := true ;
48950: LD_ADDR_VAR 0 8
48954: PUSH
48955: LD_INT 1
48957: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48958: LD_VAR 0 6
48962: PUSH
48963: LD_VAR 0 13
48967: PPUSH
48968: CALL_OW 247
48972: PUSH
48973: LD_INT 2
48975: EQUAL
48976: AND
48977: PUSH
48978: LD_VAR 0 13
48982: PPUSH
48983: CALL_OW 263
48987: PUSH
48988: LD_INT 1
48990: EQUAL
48991: AND
48992: IFFALSE 49156
// begin if IsDrivenBy ( tmp ) then
48994: LD_VAR 0 13
48998: PPUSH
48999: CALL_OW 311
49003: IFFALSE 49007
// continue ;
49005: GO 48806
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49007: LD_VAR 0 6
49011: PPUSH
49012: LD_INT 3
49014: PUSH
49015: LD_INT 60
49017: PUSH
49018: EMPTY
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 3
49027: PUSH
49028: LD_INT 55
49030: PUSH
49031: EMPTY
49032: LIST
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PPUSH
49042: CALL_OW 72
49046: IFFALSE 49154
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49048: LD_ADDR_VAR 0 18
49052: PUSH
49053: LD_VAR 0 6
49057: PPUSH
49058: LD_INT 3
49060: PUSH
49061: LD_INT 60
49063: PUSH
49064: EMPTY
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: LD_INT 55
49076: PUSH
49077: EMPTY
49078: LIST
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PPUSH
49088: CALL_OW 72
49092: PUSH
49093: LD_INT 1
49095: ARRAY
49096: ST_TO_ADDR
// if IsInUnit ( driver ) then
49097: LD_VAR 0 18
49101: PPUSH
49102: CALL_OW 310
49106: IFFALSE 49117
// ComExit ( driver ) ;
49108: LD_VAR 0 18
49112: PPUSH
49113: CALL 74539 0 1
// AddComEnterUnit ( driver , tmp ) ;
49117: LD_VAR 0 18
49121: PPUSH
49122: LD_VAR 0 13
49126: PPUSH
49127: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49131: LD_VAR 0 18
49135: PPUSH
49136: LD_VAR 0 7
49140: PPUSH
49141: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49145: LD_VAR 0 18
49149: PPUSH
49150: CALL_OW 181
// end ; continue ;
49154: GO 48806
// end ; if not cleaners or not tmp in cleaners then
49156: LD_VAR 0 6
49160: NOT
49161: PUSH
49162: LD_VAR 0 13
49166: PUSH
49167: LD_VAR 0 6
49171: IN
49172: NOT
49173: OR
49174: IFFALSE 49481
// begin if dep then
49176: LD_VAR 0 17
49180: IFFALSE 49316
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49182: LD_ADDR_VAR 0 16
49186: PUSH
49187: LD_VAR 0 17
49191: PUSH
49192: LD_INT 1
49194: ARRAY
49195: PPUSH
49196: CALL_OW 250
49200: PPUSH
49201: LD_VAR 0 17
49205: PUSH
49206: LD_INT 1
49208: ARRAY
49209: PPUSH
49210: CALL_OW 254
49214: PPUSH
49215: LD_INT 5
49217: PPUSH
49218: CALL_OW 272
49222: PUSH
49223: LD_VAR 0 17
49227: PUSH
49228: LD_INT 1
49230: ARRAY
49231: PPUSH
49232: CALL_OW 251
49236: PPUSH
49237: LD_VAR 0 17
49241: PUSH
49242: LD_INT 1
49244: ARRAY
49245: PPUSH
49246: CALL_OW 254
49250: PPUSH
49251: LD_INT 5
49253: PPUSH
49254: CALL_OW 273
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49263: LD_VAR 0 16
49267: PUSH
49268: LD_INT 1
49270: ARRAY
49271: PPUSH
49272: LD_VAR 0 16
49276: PUSH
49277: LD_INT 2
49279: ARRAY
49280: PPUSH
49281: CALL_OW 488
49285: IFFALSE 49316
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49287: LD_VAR 0 13
49291: PPUSH
49292: LD_VAR 0 16
49296: PUSH
49297: LD_INT 1
49299: ARRAY
49300: PPUSH
49301: LD_VAR 0 16
49305: PUSH
49306: LD_INT 2
49308: ARRAY
49309: PPUSH
49310: CALL_OW 111
// continue ;
49314: GO 48806
// end ; end ; r := GetDir ( tmp ) ;
49316: LD_ADDR_VAR 0 15
49320: PUSH
49321: LD_VAR 0 13
49325: PPUSH
49326: CALL_OW 254
49330: ST_TO_ADDR
// if r = 5 then
49331: LD_VAR 0 15
49335: PUSH
49336: LD_INT 5
49338: EQUAL
49339: IFFALSE 49349
// r := 0 ;
49341: LD_ADDR_VAR 0 15
49345: PUSH
49346: LD_INT 0
49348: ST_TO_ADDR
// for j = r to 5 do
49349: LD_ADDR_VAR 0 10
49353: PUSH
49354: DOUBLE
49355: LD_VAR 0 15
49359: DEC
49360: ST_TO_ADDR
49361: LD_INT 5
49363: PUSH
49364: FOR_TO
49365: IFFALSE 49479
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49367: LD_ADDR_VAR 0 11
49371: PUSH
49372: LD_VAR 0 13
49376: PPUSH
49377: CALL_OW 250
49381: PPUSH
49382: LD_VAR 0 10
49386: PPUSH
49387: LD_INT 2
49389: PPUSH
49390: CALL_OW 272
49394: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49395: LD_ADDR_VAR 0 12
49399: PUSH
49400: LD_VAR 0 13
49404: PPUSH
49405: CALL_OW 251
49409: PPUSH
49410: LD_VAR 0 10
49414: PPUSH
49415: LD_INT 2
49417: PPUSH
49418: CALL_OW 273
49422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49423: LD_VAR 0 11
49427: PPUSH
49428: LD_VAR 0 12
49432: PPUSH
49433: CALL_OW 488
49437: PUSH
49438: LD_VAR 0 11
49442: PPUSH
49443: LD_VAR 0 12
49447: PPUSH
49448: CALL_OW 428
49452: NOT
49453: AND
49454: IFFALSE 49477
// begin ComMoveXY ( tmp , _x , _y ) ;
49456: LD_VAR 0 13
49460: PPUSH
49461: LD_VAR 0 11
49465: PPUSH
49466: LD_VAR 0 12
49470: PPUSH
49471: CALL_OW 111
// break ;
49475: GO 49479
// end ; end ;
49477: GO 49364
49479: POP
49480: POP
// end ; end ;
49481: GO 48806
49483: POP
49484: POP
// end ;
49485: LD_VAR 0 8
49489: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49490: LD_INT 0
49492: PPUSH
// result := true ;
49493: LD_ADDR_VAR 0 3
49497: PUSH
49498: LD_INT 1
49500: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49501: LD_VAR 0 2
49505: PUSH
49506: LD_INT 24
49508: DOUBLE
49509: EQUAL
49510: IFTRUE 49520
49512: LD_INT 33
49514: DOUBLE
49515: EQUAL
49516: IFTRUE 49520
49518: GO 49545
49520: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49521: LD_ADDR_VAR 0 3
49525: PUSH
49526: LD_INT 32
49528: PPUSH
49529: LD_VAR 0 1
49533: PPUSH
49534: CALL_OW 321
49538: PUSH
49539: LD_INT 2
49541: EQUAL
49542: ST_TO_ADDR
49543: GO 49861
49545: LD_INT 20
49547: DOUBLE
49548: EQUAL
49549: IFTRUE 49553
49551: GO 49578
49553: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49554: LD_ADDR_VAR 0 3
49558: PUSH
49559: LD_INT 6
49561: PPUSH
49562: LD_VAR 0 1
49566: PPUSH
49567: CALL_OW 321
49571: PUSH
49572: LD_INT 2
49574: EQUAL
49575: ST_TO_ADDR
49576: GO 49861
49578: LD_INT 22
49580: DOUBLE
49581: EQUAL
49582: IFTRUE 49592
49584: LD_INT 36
49586: DOUBLE
49587: EQUAL
49588: IFTRUE 49592
49590: GO 49617
49592: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49593: LD_ADDR_VAR 0 3
49597: PUSH
49598: LD_INT 15
49600: PPUSH
49601: LD_VAR 0 1
49605: PPUSH
49606: CALL_OW 321
49610: PUSH
49611: LD_INT 2
49613: EQUAL
49614: ST_TO_ADDR
49615: GO 49861
49617: LD_INT 30
49619: DOUBLE
49620: EQUAL
49621: IFTRUE 49625
49623: GO 49650
49625: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49626: LD_ADDR_VAR 0 3
49630: PUSH
49631: LD_INT 20
49633: PPUSH
49634: LD_VAR 0 1
49638: PPUSH
49639: CALL_OW 321
49643: PUSH
49644: LD_INT 2
49646: EQUAL
49647: ST_TO_ADDR
49648: GO 49861
49650: LD_INT 28
49652: DOUBLE
49653: EQUAL
49654: IFTRUE 49664
49656: LD_INT 21
49658: DOUBLE
49659: EQUAL
49660: IFTRUE 49664
49662: GO 49689
49664: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49665: LD_ADDR_VAR 0 3
49669: PUSH
49670: LD_INT 21
49672: PPUSH
49673: LD_VAR 0 1
49677: PPUSH
49678: CALL_OW 321
49682: PUSH
49683: LD_INT 2
49685: EQUAL
49686: ST_TO_ADDR
49687: GO 49861
49689: LD_INT 16
49691: DOUBLE
49692: EQUAL
49693: IFTRUE 49697
49695: GO 49722
49697: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49698: LD_ADDR_VAR 0 3
49702: PUSH
49703: LD_INT 84
49705: PPUSH
49706: LD_VAR 0 1
49710: PPUSH
49711: CALL_OW 321
49715: PUSH
49716: LD_INT 2
49718: EQUAL
49719: ST_TO_ADDR
49720: GO 49861
49722: LD_INT 19
49724: DOUBLE
49725: EQUAL
49726: IFTRUE 49736
49728: LD_INT 23
49730: DOUBLE
49731: EQUAL
49732: IFTRUE 49736
49734: GO 49761
49736: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49737: LD_ADDR_VAR 0 3
49741: PUSH
49742: LD_INT 83
49744: PPUSH
49745: LD_VAR 0 1
49749: PPUSH
49750: CALL_OW 321
49754: PUSH
49755: LD_INT 2
49757: EQUAL
49758: ST_TO_ADDR
49759: GO 49861
49761: LD_INT 17
49763: DOUBLE
49764: EQUAL
49765: IFTRUE 49769
49767: GO 49794
49769: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49770: LD_ADDR_VAR 0 3
49774: PUSH
49775: LD_INT 39
49777: PPUSH
49778: LD_VAR 0 1
49782: PPUSH
49783: CALL_OW 321
49787: PUSH
49788: LD_INT 2
49790: EQUAL
49791: ST_TO_ADDR
49792: GO 49861
49794: LD_INT 18
49796: DOUBLE
49797: EQUAL
49798: IFTRUE 49802
49800: GO 49827
49802: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49803: LD_ADDR_VAR 0 3
49807: PUSH
49808: LD_INT 40
49810: PPUSH
49811: LD_VAR 0 1
49815: PPUSH
49816: CALL_OW 321
49820: PUSH
49821: LD_INT 2
49823: EQUAL
49824: ST_TO_ADDR
49825: GO 49861
49827: LD_INT 27
49829: DOUBLE
49830: EQUAL
49831: IFTRUE 49835
49833: GO 49860
49835: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49836: LD_ADDR_VAR 0 3
49840: PUSH
49841: LD_INT 35
49843: PPUSH
49844: LD_VAR 0 1
49848: PPUSH
49849: CALL_OW 321
49853: PUSH
49854: LD_INT 2
49856: EQUAL
49857: ST_TO_ADDR
49858: GO 49861
49860: POP
// end ;
49861: LD_VAR 0 3
49865: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49866: LD_INT 0
49868: PPUSH
49869: PPUSH
49870: PPUSH
49871: PPUSH
49872: PPUSH
49873: PPUSH
49874: PPUSH
49875: PPUSH
49876: PPUSH
49877: PPUSH
49878: PPUSH
// result := false ;
49879: LD_ADDR_VAR 0 6
49883: PUSH
49884: LD_INT 0
49886: ST_TO_ADDR
// if btype = b_depot then
49887: LD_VAR 0 2
49891: PUSH
49892: LD_INT 0
49894: EQUAL
49895: IFFALSE 49907
// begin result := true ;
49897: LD_ADDR_VAR 0 6
49901: PUSH
49902: LD_INT 1
49904: ST_TO_ADDR
// exit ;
49905: GO 50733
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49907: LD_VAR 0 1
49911: NOT
49912: PUSH
49913: LD_VAR 0 1
49917: PPUSH
49918: CALL_OW 266
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: IN
49933: NOT
49934: OR
49935: PUSH
49936: LD_VAR 0 2
49940: NOT
49941: OR
49942: PUSH
49943: LD_VAR 0 5
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: LD_INT 4
49962: PUSH
49963: LD_INT 5
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: IN
49974: NOT
49975: OR
49976: PUSH
49977: LD_VAR 0 3
49981: PPUSH
49982: LD_VAR 0 4
49986: PPUSH
49987: CALL_OW 488
49991: NOT
49992: OR
49993: IFFALSE 49997
// exit ;
49995: GO 50733
// side := GetSide ( depot ) ;
49997: LD_ADDR_VAR 0 9
50001: PUSH
50002: LD_VAR 0 1
50006: PPUSH
50007: CALL_OW 255
50011: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50012: LD_VAR 0 9
50016: PPUSH
50017: LD_VAR 0 2
50021: PPUSH
50022: CALL 49490 0 2
50026: NOT
50027: IFFALSE 50031
// exit ;
50029: GO 50733
// pom := GetBase ( depot ) ;
50031: LD_ADDR_VAR 0 10
50035: PUSH
50036: LD_VAR 0 1
50040: PPUSH
50041: CALL_OW 274
50045: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50046: LD_ADDR_VAR 0 11
50050: PUSH
50051: LD_VAR 0 2
50055: PPUSH
50056: LD_VAR 0 1
50060: PPUSH
50061: CALL_OW 248
50065: PPUSH
50066: CALL_OW 450
50070: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50071: LD_VAR 0 10
50075: PPUSH
50076: LD_INT 1
50078: PPUSH
50079: CALL_OW 275
50083: PUSH
50084: LD_VAR 0 11
50088: PUSH
50089: LD_INT 1
50091: ARRAY
50092: GREATEREQUAL
50093: PUSH
50094: LD_VAR 0 10
50098: PPUSH
50099: LD_INT 2
50101: PPUSH
50102: CALL_OW 275
50106: PUSH
50107: LD_VAR 0 11
50111: PUSH
50112: LD_INT 2
50114: ARRAY
50115: GREATEREQUAL
50116: AND
50117: PUSH
50118: LD_VAR 0 10
50122: PPUSH
50123: LD_INT 3
50125: PPUSH
50126: CALL_OW 275
50130: PUSH
50131: LD_VAR 0 11
50135: PUSH
50136: LD_INT 3
50138: ARRAY
50139: GREATEREQUAL
50140: AND
50141: NOT
50142: IFFALSE 50146
// exit ;
50144: GO 50733
// if GetBType ( depot ) = b_depot then
50146: LD_VAR 0 1
50150: PPUSH
50151: CALL_OW 266
50155: PUSH
50156: LD_INT 0
50158: EQUAL
50159: IFFALSE 50171
// dist := 28 else
50161: LD_ADDR_VAR 0 14
50165: PUSH
50166: LD_INT 28
50168: ST_TO_ADDR
50169: GO 50179
// dist := 36 ;
50171: LD_ADDR_VAR 0 14
50175: PUSH
50176: LD_INT 36
50178: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50179: LD_VAR 0 1
50183: PPUSH
50184: LD_VAR 0 3
50188: PPUSH
50189: LD_VAR 0 4
50193: PPUSH
50194: CALL_OW 297
50198: PUSH
50199: LD_VAR 0 14
50203: GREATER
50204: IFFALSE 50208
// exit ;
50206: GO 50733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50208: LD_ADDR_VAR 0 12
50212: PUSH
50213: LD_VAR 0 2
50217: PPUSH
50218: LD_VAR 0 3
50222: PPUSH
50223: LD_VAR 0 4
50227: PPUSH
50228: LD_VAR 0 5
50232: PPUSH
50233: LD_VAR 0 1
50237: PPUSH
50238: CALL_OW 248
50242: PPUSH
50243: LD_INT 0
50245: PPUSH
50246: CALL 50738 0 6
50250: ST_TO_ADDR
// if not hexes then
50251: LD_VAR 0 12
50255: NOT
50256: IFFALSE 50260
// exit ;
50258: GO 50733
// hex := GetHexInfo ( x , y ) ;
50260: LD_ADDR_VAR 0 15
50264: PUSH
50265: LD_VAR 0 3
50269: PPUSH
50270: LD_VAR 0 4
50274: PPUSH
50275: CALL_OW 546
50279: ST_TO_ADDR
// if hex [ 1 ] then
50280: LD_VAR 0 15
50284: PUSH
50285: LD_INT 1
50287: ARRAY
50288: IFFALSE 50292
// exit ;
50290: GO 50733
// height := hex [ 2 ] ;
50292: LD_ADDR_VAR 0 13
50296: PUSH
50297: LD_VAR 0 15
50301: PUSH
50302: LD_INT 2
50304: ARRAY
50305: ST_TO_ADDR
// for i = 1 to hexes do
50306: LD_ADDR_VAR 0 7
50310: PUSH
50311: DOUBLE
50312: LD_INT 1
50314: DEC
50315: ST_TO_ADDR
50316: LD_VAR 0 12
50320: PUSH
50321: FOR_TO
50322: IFFALSE 50652
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50324: LD_VAR 0 12
50328: PUSH
50329: LD_VAR 0 7
50333: ARRAY
50334: PUSH
50335: LD_INT 1
50337: ARRAY
50338: PPUSH
50339: LD_VAR 0 12
50343: PUSH
50344: LD_VAR 0 7
50348: ARRAY
50349: PUSH
50350: LD_INT 2
50352: ARRAY
50353: PPUSH
50354: CALL_OW 488
50358: NOT
50359: PUSH
50360: LD_VAR 0 12
50364: PUSH
50365: LD_VAR 0 7
50369: ARRAY
50370: PUSH
50371: LD_INT 1
50373: ARRAY
50374: PPUSH
50375: LD_VAR 0 12
50379: PUSH
50380: LD_VAR 0 7
50384: ARRAY
50385: PUSH
50386: LD_INT 2
50388: ARRAY
50389: PPUSH
50390: CALL_OW 428
50394: PUSH
50395: LD_INT 0
50397: GREATER
50398: OR
50399: PUSH
50400: LD_VAR 0 12
50404: PUSH
50405: LD_VAR 0 7
50409: ARRAY
50410: PUSH
50411: LD_INT 1
50413: ARRAY
50414: PPUSH
50415: LD_VAR 0 12
50419: PUSH
50420: LD_VAR 0 7
50424: ARRAY
50425: PUSH
50426: LD_INT 2
50428: ARRAY
50429: PPUSH
50430: CALL_OW 351
50434: OR
50435: IFFALSE 50441
// exit ;
50437: POP
50438: POP
50439: GO 50733
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50441: LD_ADDR_VAR 0 8
50445: PUSH
50446: LD_VAR 0 12
50450: PUSH
50451: LD_VAR 0 7
50455: ARRAY
50456: PUSH
50457: LD_INT 1
50459: ARRAY
50460: PPUSH
50461: LD_VAR 0 12
50465: PUSH
50466: LD_VAR 0 7
50470: ARRAY
50471: PUSH
50472: LD_INT 2
50474: ARRAY
50475: PPUSH
50476: CALL_OW 546
50480: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50481: LD_VAR 0 8
50485: PUSH
50486: LD_INT 1
50488: ARRAY
50489: PUSH
50490: LD_VAR 0 8
50494: PUSH
50495: LD_INT 2
50497: ARRAY
50498: PUSH
50499: LD_VAR 0 13
50503: PUSH
50504: LD_INT 2
50506: PLUS
50507: GREATER
50508: OR
50509: PUSH
50510: LD_VAR 0 8
50514: PUSH
50515: LD_INT 2
50517: ARRAY
50518: PUSH
50519: LD_VAR 0 13
50523: PUSH
50524: LD_INT 2
50526: MINUS
50527: LESS
50528: OR
50529: PUSH
50530: LD_VAR 0 8
50534: PUSH
50535: LD_INT 3
50537: ARRAY
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 8
50544: PUSH
50545: LD_INT 9
50547: PUSH
50548: LD_INT 10
50550: PUSH
50551: LD_INT 11
50553: PUSH
50554: LD_INT 12
50556: PUSH
50557: LD_INT 13
50559: PUSH
50560: LD_INT 16
50562: PUSH
50563: LD_INT 17
50565: PUSH
50566: LD_INT 18
50568: PUSH
50569: LD_INT 19
50571: PUSH
50572: LD_INT 20
50574: PUSH
50575: LD_INT 21
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: IN
50593: NOT
50594: OR
50595: PUSH
50596: LD_VAR 0 8
50600: PUSH
50601: LD_INT 5
50603: ARRAY
50604: NOT
50605: OR
50606: PUSH
50607: LD_VAR 0 8
50611: PUSH
50612: LD_INT 6
50614: ARRAY
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: LD_INT 7
50624: PUSH
50625: LD_INT 9
50627: PUSH
50628: LD_INT 10
50630: PUSH
50631: LD_INT 11
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: IN
50642: NOT
50643: OR
50644: IFFALSE 50650
// exit ;
50646: POP
50647: POP
50648: GO 50733
// end ;
50650: GO 50321
50652: POP
50653: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50654: LD_VAR 0 9
50658: PPUSH
50659: LD_VAR 0 3
50663: PPUSH
50664: LD_VAR 0 4
50668: PPUSH
50669: LD_INT 20
50671: PPUSH
50672: CALL 42656 0 4
50676: PUSH
50677: LD_INT 4
50679: ARRAY
50680: IFFALSE 50684
// exit ;
50682: GO 50733
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50684: LD_VAR 0 2
50688: PUSH
50689: LD_INT 29
50691: PUSH
50692: LD_INT 30
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: IN
50699: PUSH
50700: LD_VAR 0 3
50704: PPUSH
50705: LD_VAR 0 4
50709: PPUSH
50710: LD_VAR 0 9
50714: PPUSH
50715: CALL_OW 440
50719: NOT
50720: AND
50721: IFFALSE 50725
// exit ;
50723: GO 50733
// result := true ;
50725: LD_ADDR_VAR 0 6
50729: PUSH
50730: LD_INT 1
50732: ST_TO_ADDR
// end ;
50733: LD_VAR 0 6
50737: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50738: LD_INT 0
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
50746: PPUSH
50747: PPUSH
50748: PPUSH
50749: PPUSH
50750: PPUSH
50751: PPUSH
50752: PPUSH
50753: PPUSH
50754: PPUSH
50755: PPUSH
50756: PPUSH
50757: PPUSH
50758: PPUSH
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
50767: PPUSH
50768: PPUSH
50769: PPUSH
50770: PPUSH
50771: PPUSH
50772: PPUSH
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
50778: PPUSH
50779: PPUSH
50780: PPUSH
50781: PPUSH
50782: PPUSH
50783: PPUSH
50784: PPUSH
50785: PPUSH
50786: PPUSH
50787: PPUSH
50788: PPUSH
50789: PPUSH
50790: PPUSH
50791: PPUSH
50792: PPUSH
50793: PPUSH
50794: PPUSH
50795: PPUSH
50796: PPUSH
50797: PPUSH
// result = [ ] ;
50798: LD_ADDR_VAR 0 7
50802: PUSH
50803: EMPTY
50804: ST_TO_ADDR
// temp_list = [ ] ;
50805: LD_ADDR_VAR 0 9
50809: PUSH
50810: EMPTY
50811: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50812: LD_VAR 0 4
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 3
50828: PUSH
50829: LD_INT 4
50831: PUSH
50832: LD_INT 5
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: IN
50843: NOT
50844: PUSH
50845: LD_VAR 0 1
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: IN
50860: PUSH
50861: LD_VAR 0 5
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: IN
50880: NOT
50881: AND
50882: OR
50883: IFFALSE 50887
// exit ;
50885: GO 69278
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50887: LD_VAR 0 1
50891: PUSH
50892: LD_INT 6
50894: PUSH
50895: LD_INT 7
50897: PUSH
50898: LD_INT 8
50900: PUSH
50901: LD_INT 13
50903: PUSH
50904: LD_INT 12
50906: PUSH
50907: LD_INT 15
50909: PUSH
50910: LD_INT 11
50912: PUSH
50913: LD_INT 14
50915: PUSH
50916: LD_INT 10
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: IN
50930: IFFALSE 50940
// btype = b_lab ;
50932: LD_ADDR_VAR 0 1
50936: PUSH
50937: LD_INT 6
50939: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50940: LD_VAR 0 6
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: IN
50959: NOT
50960: PUSH
50961: LD_VAR 0 1
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 6
50980: PUSH
50981: LD_INT 36
50983: PUSH
50984: LD_INT 4
50986: PUSH
50987: LD_INT 5
50989: PUSH
50990: LD_INT 31
50992: PUSH
50993: LD_INT 32
50995: PUSH
50996: LD_INT 33
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: IN
51012: NOT
51013: PUSH
51014: LD_VAR 0 6
51018: PUSH
51019: LD_INT 1
51021: EQUAL
51022: AND
51023: OR
51024: PUSH
51025: LD_VAR 0 1
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 3
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: IN
51040: NOT
51041: PUSH
51042: LD_VAR 0 6
51046: PUSH
51047: LD_INT 2
51049: EQUAL
51050: AND
51051: OR
51052: IFFALSE 51062
// mode = 0 ;
51054: LD_ADDR_VAR 0 6
51058: PUSH
51059: LD_INT 0
51061: ST_TO_ADDR
// case mode of 0 :
51062: LD_VAR 0 6
51066: PUSH
51067: LD_INT 0
51069: DOUBLE
51070: EQUAL
51071: IFTRUE 51075
51073: GO 62528
51075: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51076: LD_ADDR_VAR 0 11
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 3
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 3
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51269: LD_ADDR_VAR 0 12
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51465: LD_ADDR_VAR 0 13
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: NEG
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 3
51624: NEG
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 3
51636: NEG
51637: PUSH
51638: LD_INT 3
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51664: LD_ADDR_VAR 0 14
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 3
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51860: LD_ADDR_VAR 0 15
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52053: LD_ADDR_VAR 0 16
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 3
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52246: LD_ADDR_VAR 0 17
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 2
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 2
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52476: LD_ADDR_VAR 0 18
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52706: LD_ADDR_VAR 0 19
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52936: LD_ADDR_VAR 0 20
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53166: LD_ADDR_VAR 0 21
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53396: LD_ADDR_VAR 0 22
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53626: LD_ADDR_VAR 0 23
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53906: LD_ADDR_VAR 0 24
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54182: LD_ADDR_VAR 0 25
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 3
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54456: LD_ADDR_VAR 0 26
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54732: LD_ADDR_VAR 0 27
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 2
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 3
54977: NEG
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55012: LD_ADDR_VAR 0 28
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 3
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 3
55247: NEG
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 3
55259: NEG
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55294: LD_ADDR_VAR 0 29
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 2
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: LD_INT 3
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55573: LD_ADDR_VAR 0 30
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55851: LD_ADDR_VAR 0 31
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 3
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56129: LD_ADDR_VAR 0 32
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 3
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 3
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56407: LD_ADDR_VAR 0 33
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56686: LD_ADDR_VAR 0 34
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: LD_INT 3
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56966: LD_ADDR_VAR 0 35
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57078: LD_ADDR_VAR 0 36
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57190: LD_ADDR_VAR 0 37
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57302: LD_ADDR_VAR 0 38
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57414: LD_ADDR_VAR 0 39
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57526: LD_ADDR_VAR 0 40
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57638: LD_ADDR_VAR 0 41
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 3
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 3
57912: NEG
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 3
57935: NEG
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 3
57947: NEG
57948: PUSH
57949: LD_INT 3
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57988: LD_ADDR_VAR 0 42
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 3
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 3
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: LD_INT 3
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 3
58297: NEG
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58338: LD_ADDR_VAR 0 43
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: NEG
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58686: LD_ADDR_VAR 0 44
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 3
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 3
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 3
58960: NEG
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59036: LD_ADDR_VAR 0 45
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 1
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: LD_INT 3
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 3
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 3
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59386: LD_ADDR_VAR 0 46
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59734: LD_ADDR_VAR 0 47
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: LD_INT 2
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59885: LD_ADDR_VAR 0 48
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60032: LD_ADDR_VAR 0 49
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60176: LD_ADDR_VAR 0 50
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 1
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: LD_INT 2
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60320: LD_ADDR_VAR 0 51
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60467: LD_ADDR_VAR 0 52
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60618: LD_ADDR_VAR 0 53
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: NEG
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60848: LD_ADDR_VAR 0 54
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 2
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: NEG
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61078: LD_ADDR_VAR 0 55
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 2
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: NEG
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61308: LD_ADDR_VAR 0 56
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 2
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: LD_INT 2
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61538: LD_ADDR_VAR 0 57
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 2
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61768: LD_ADDR_VAR 0 58
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: LD_INT 1
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: LD_INT 2
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: LD_INT 2
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 2
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: NEG
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61998: LD_ADDR_VAR 0 59
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62086: LD_ADDR_VAR 0 60
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62174: LD_ADDR_VAR 0 61
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62262: LD_ADDR_VAR 0 62
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62350: LD_ADDR_VAR 0 63
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62438: LD_ADDR_VAR 0 64
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: LD_INT 1
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// end ; 1 :
62526: GO 68423
62528: LD_INT 1
62530: DOUBLE
62531: EQUAL
62532: IFTRUE 62536
62534: GO 65159
62536: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62537: LD_ADDR_VAR 0 11
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62581: LD_ADDR_VAR 0 12
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62622: LD_ADDR_VAR 0 13
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 3
62639: PUSH
62640: LD_INT 3
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 3
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: LIST
62661: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62662: LD_ADDR_VAR 0 14
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: LD_INT 3
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 3
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: NEG
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62703: LD_ADDR_VAR 0 15
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 3
62732: NEG
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62747: LD_ADDR_VAR 0 16
62751: PUSH
62752: LD_INT 2
62754: NEG
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: NEG
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 3
62778: NEG
62779: PUSH
62780: LD_INT 3
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62793: LD_ADDR_VAR 0 17
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: LD_INT 3
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: LIST
62836: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62837: LD_ADDR_VAR 0 18
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 3
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62878: LD_ADDR_VAR 0 19
62882: PUSH
62883: LD_INT 3
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 3
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: LIST
62917: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62918: LD_ADDR_VAR 0 20
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 3
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62959: LD_ADDR_VAR 0 21
62963: PUSH
62964: LD_INT 2
62966: NEG
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 3
62977: NEG
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 3
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63003: LD_ADDR_VAR 0 22
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: LD_INT 3
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 3
63022: NEG
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: LD_INT 3
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63049: LD_ADDR_VAR 0 23
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 4
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63093: LD_ADDR_VAR 0 24
63097: PUSH
63098: LD_INT 3
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 3
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 4
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63134: LD_ADDR_VAR 0 25
63138: PUSH
63139: LD_INT 3
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 4
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: LD_INT 4
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63174: LD_ADDR_VAR 0 26
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 3
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 4
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: NEG
63202: PUSH
63203: LD_INT 3
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63215: LD_ADDR_VAR 0 27
63219: PUSH
63220: LD_INT 3
63222: NEG
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 3
63233: NEG
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 4
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63259: LD_ADDR_VAR 0 28
63263: PUSH
63264: LD_INT 3
63266: NEG
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: LD_INT 4
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 4
63290: NEG
63291: PUSH
63292: LD_INT 3
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63305: LD_ADDR_VAR 0 29
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 3
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 3
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: LD_INT 2
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: LD_INT 4
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 4
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: LD_INT 5
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 5
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 4
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 6
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 6
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 5
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63460: LD_ADDR_VAR 0 30
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 4
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 4
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 4
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 5
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 5
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 5
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 6
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 6
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63603: LD_ADDR_VAR 0 31
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 3
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: LD_INT 3
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 4
63650: PUSH
63651: LD_INT 4
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 3
63660: PUSH
63661: LD_INT 4
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: LD_INT 4
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 5
63680: PUSH
63681: LD_INT 5
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 4
63690: PUSH
63691: LD_INT 5
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 6
63700: PUSH
63701: LD_INT 5
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 6
63710: PUSH
63711: LD_INT 6
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 5
63720: PUSH
63721: LD_INT 6
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63742: LD_ADDR_VAR 0 32
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: LD_INT 3
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 3
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 4
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: LD_INT 4
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 3
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 5
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: LD_INT 5
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 4
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: LD_INT 6
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 6
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 5
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63885: LD_ADDR_VAR 0 33
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 4
63937: NEG
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 4
63948: NEG
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 4
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 5
63971: NEG
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 5
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 5
63994: NEG
63995: PUSH
63996: LD_INT 1
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 6
64005: NEG
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 6
64016: NEG
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64040: LD_ADDR_VAR 0 34
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: LD_INT 3
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 3
64059: NEG
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 3
64071: NEG
64072: PUSH
64073: LD_INT 3
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 3
64083: NEG
64084: PUSH
64085: LD_INT 4
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 4
64095: NEG
64096: PUSH
64097: LD_INT 3
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 4
64107: NEG
64108: PUSH
64109: LD_INT 4
64111: NEG
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 4
64119: NEG
64120: PUSH
64121: LD_INT 5
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 5
64131: NEG
64132: PUSH
64133: LD_INT 4
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 5
64143: NEG
64144: PUSH
64145: LD_INT 5
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 5
64155: NEG
64156: PUSH
64157: LD_INT 6
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 6
64167: NEG
64168: PUSH
64169: LD_INT 5
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 6
64179: NEG
64180: PUSH
64181: LD_INT 6
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64203: LD_ADDR_VAR 0 41
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: LD_INT 3
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64247: LD_ADDR_VAR 0 42
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: LIST
64287: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64288: LD_ADDR_VAR 0 43
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 3
64305: PUSH
64306: LD_INT 2
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 2
64315: PUSH
64316: LD_INT 3
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: LIST
64327: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64328: LD_ADDR_VAR 0 44
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64369: LD_ADDR_VAR 0 45
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: NEG
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64413: LD_ADDR_VAR 0 46
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 3
64444: NEG
64445: PUSH
64446: LD_INT 2
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64459: LD_ADDR_VAR 0 47
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: LD_INT 3
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: LD_INT 3
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64492: LD_ADDR_VAR 0 48
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 2
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64523: LD_ADDR_VAR 0 49
64527: PUSH
64528: LD_INT 3
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: PUSH
64541: LD_INT 2
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64552: LD_ADDR_VAR 0 50
64556: PUSH
64557: LD_INT 2
64559: PUSH
64560: LD_INT 3
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64581: LD_ADDR_VAR 0 51
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 2
64599: NEG
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64612: LD_ADDR_VAR 0 52
64616: PUSH
64617: LD_INT 3
64619: NEG
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 3
64631: NEG
64632: PUSH
64633: LD_INT 2
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64645: LD_ADDR_VAR 0 53
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 3
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 3
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64689: LD_ADDR_VAR 0 54
64693: PUSH
64694: LD_INT 2
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 3
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 3
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64730: LD_ADDR_VAR 0 55
64734: PUSH
64735: LD_INT 3
64737: PUSH
64738: LD_INT 2
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 3
64747: PUSH
64748: LD_INT 3
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 3
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64770: LD_ADDR_VAR 0 56
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: LD_INT 2
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64811: LD_ADDR_VAR 0 57
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 3
64829: NEG
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 3
64840: NEG
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64855: LD_ADDR_VAR 0 58
64859: PUSH
64860: LD_INT 2
64862: NEG
64863: PUSH
64864: LD_INT 3
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 3
64874: NEG
64875: PUSH
64876: LD_INT 2
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: NEG
64887: PUSH
64888: LD_INT 3
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64901: LD_ADDR_VAR 0 59
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64945: LD_ADDR_VAR 0 60
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: LIST
64985: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64986: LD_ADDR_VAR 0 61
64990: PUSH
64991: LD_INT 2
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 2
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: LIST
65025: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65026: LD_ADDR_VAR 0 62
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: LD_INT 2
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: LD_INT 2
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: LIST
65066: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65067: LD_ADDR_VAR 0 63
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65111: LD_ADDR_VAR 0 64
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 2
65130: NEG
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// end ; 2 :
65157: GO 68423
65159: LD_INT 2
65161: DOUBLE
65162: EQUAL
65163: IFTRUE 65167
65165: GO 68422
65167: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65168: LD_ADDR_VAR 0 29
65172: PUSH
65173: LD_INT 4
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 4
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 5
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 5
65206: PUSH
65207: LD_INT 1
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 4
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 3
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 3
65247: PUSH
65248: LD_INT 2
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 5
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 3
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: LD_INT 2
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 4
65288: PUSH
65289: LD_INT 3
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 4
65298: PUSH
65299: LD_INT 4
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: LD_INT 4
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 2
65318: PUSH
65319: LD_INT 3
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 2
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 4
65338: PUSH
65339: LD_INT 2
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: LD_INT 4
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 4
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: PUSH
65379: LD_INT 4
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: PUSH
65389: LD_INT 5
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: LD_INT 5
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: LD_INT 4
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 2
65430: PUSH
65431: LD_INT 5
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 2
65440: NEG
65441: PUSH
65442: LD_INT 3
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 3
65451: NEG
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 2
65485: NEG
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 3
65496: NEG
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 4
65507: NEG
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 4
65518: NEG
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 4
65530: NEG
65531: PUSH
65532: LD_INT 2
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 2
65542: NEG
65543: PUSH
65544: LD_INT 2
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 4
65553: NEG
65554: PUSH
65555: LD_INT 4
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 4
65565: NEG
65566: PUSH
65567: LD_INT 5
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: LD_INT 4
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 3
65589: NEG
65590: PUSH
65591: LD_INT 3
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 4
65601: NEG
65602: PUSH
65603: LD_INT 3
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 5
65613: NEG
65614: PUSH
65615: LD_INT 4
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 5
65625: NEG
65626: PUSH
65627: LD_INT 5
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: LD_INT 5
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 5
65649: NEG
65650: PUSH
65651: LD_INT 3
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65706: LD_ADDR_VAR 0 30
65710: PUSH
65711: LD_INT 4
65713: PUSH
65714: LD_INT 4
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 4
65723: PUSH
65724: LD_INT 3
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 5
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 5
65743: PUSH
65744: LD_INT 5
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 4
65753: PUSH
65754: LD_INT 5
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: LD_INT 4
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: LD_INT 3
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 5
65783: PUSH
65784: LD_INT 3
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 3
65793: PUSH
65794: LD_INT 5
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: LD_INT 3
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: LD_INT 2
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 3
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 4
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 4
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 3
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: LD_INT 2
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: LD_INT 4
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 2
65885: NEG
65886: PUSH
65887: LD_INT 2
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 4
65896: NEG
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 4
65907: NEG
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 3
65919: NEG
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 4
65941: NEG
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 5
65952: NEG
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 5
65963: NEG
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 5
65975: NEG
65976: PUSH
65977: LD_INT 2
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 3
65987: NEG
65988: PUSH
65989: LD_INT 2
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 3
65998: NEG
65999: PUSH
66000: LD_INT 3
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 3
66010: NEG
66011: PUSH
66012: LD_INT 4
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: LD_INT 3
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: LD_INT 2
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 4
66058: NEG
66059: PUSH
66060: LD_INT 3
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 4
66070: NEG
66071: PUSH
66072: LD_INT 4
66074: NEG
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 2
66082: NEG
66083: PUSH
66084: LD_INT 4
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 4
66094: NEG
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_INT 4
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: LD_INT 5
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: LD_INT 4
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 3
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 3
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: LD_INT 4
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: LD_INT 5
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 2
66185: PUSH
66186: LD_INT 3
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 2
66196: NEG
66197: PUSH
66198: LD_INT 5
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66253: LD_ADDR_VAR 0 31
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 4
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: LD_INT 4
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: LD_INT 5
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: LD_INT 5
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 1
66310: NEG
66311: PUSH
66312: LD_INT 4
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: LD_INT 3
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: PUSH
66333: LD_INT 5
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: LD_INT 3
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 3
66353: NEG
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 2
66387: NEG
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: NEG
66399: PUSH
66400: LD_INT 1
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: NEG
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 4
66420: NEG
66421: PUSH
66422: LD_INT 1
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 4
66432: NEG
66433: PUSH
66434: LD_INT 2
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 2
66444: NEG
66445: PUSH
66446: LD_INT 2
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 4
66455: NEG
66456: PUSH
66457: LD_INT 4
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 4
66467: NEG
66468: PUSH
66469: LD_INT 5
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: NEG
66480: PUSH
66481: LD_INT 4
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: NEG
66492: PUSH
66493: LD_INT 3
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 4
66503: NEG
66504: PUSH
66505: LD_INT 3
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 5
66515: NEG
66516: PUSH
66517: LD_INT 4
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 5
66527: NEG
66528: PUSH
66529: LD_INT 5
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: LD_INT 5
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 5
66551: NEG
66552: PUSH
66553: LD_INT 3
66555: NEG
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 0
66563: PUSH
66564: LD_INT 3
66566: NEG
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: LD_INT 4
66577: NEG
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 1
66585: PUSH
66586: LD_INT 3
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: LD_INT 2
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: LD_INT 3
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: LD_INT 4
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 2
66642: PUSH
66643: LD_INT 2
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: LD_INT 4
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 4
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 4
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 5
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 5
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 4
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 3
66726: PUSH
66727: LD_INT 1
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 3
66737: PUSH
66738: LD_INT 2
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 5
66748: PUSH
66749: LD_INT 2
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66803: LD_ADDR_VAR 0 32
66807: PUSH
66808: LD_INT 4
66810: NEG
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 4
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 3
66833: NEG
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 3
66844: NEG
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 4
66855: NEG
66856: PUSH
66857: LD_INT 1
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 5
66866: NEG
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 5
66877: NEG
66878: PUSH
66879: LD_INT 1
66881: NEG
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 5
66889: NEG
66890: PUSH
66891: LD_INT 2
66893: NEG
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 3
66901: NEG
66902: PUSH
66903: LD_INT 2
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: NEG
66913: PUSH
66914: LD_INT 3
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 3
66924: NEG
66925: PUSH
66926: LD_INT 4
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 2
66936: NEG
66937: PUSH
66938: LD_INT 3
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 2
66948: NEG
66949: PUSH
66950: LD_INT 2
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 3
66960: NEG
66961: PUSH
66962: LD_INT 2
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 4
66972: NEG
66973: PUSH
66974: LD_INT 3
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 4
66984: NEG
66985: PUSH
66986: LD_INT 4
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 2
66996: NEG
66997: PUSH
66998: LD_INT 4
67000: NEG
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 4
67008: NEG
67009: PUSH
67010: LD_INT 2
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: LD_INT 4
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: LD_INT 5
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: LD_INT 4
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: PUSH
67054: LD_INT 3
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: LD_INT 4
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: LD_INT 5
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 2
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: LD_INT 5
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 4
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 4
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 3
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 2
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 2
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 2
67194: PUSH
67195: LD_INT 2
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 4
67205: PUSH
67206: LD_INT 2
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 4
67215: PUSH
67216: LD_INT 4
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 4
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 5
67235: PUSH
67236: LD_INT 4
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 5
67245: PUSH
67246: LD_INT 5
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 4
67255: PUSH
67256: LD_INT 5
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 3
67265: PUSH
67266: LD_INT 4
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 5
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: LD_INT 5
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67350: LD_ADDR_VAR 0 33
67354: PUSH
67355: LD_INT 4
67357: NEG
67358: PUSH
67359: LD_INT 4
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 4
67369: NEG
67370: PUSH
67371: LD_INT 5
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: LD_INT 4
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: NEG
67394: PUSH
67395: LD_INT 3
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 4
67405: NEG
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 5
67417: NEG
67418: PUSH
67419: LD_INT 4
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 5
67429: NEG
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: LD_INT 5
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: NEG
67454: PUSH
67455: LD_INT 3
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: LD_INT 3
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 4
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 1
67487: PUSH
67488: LD_INT 3
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 1
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 2
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: NEG
67521: PUSH
67522: LD_INT 3
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: LD_INT 4
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 2
67544: PUSH
67545: LD_INT 2
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 2
67555: NEG
67556: PUSH
67557: LD_INT 4
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 4
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 4
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 5
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 5
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 3
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: LD_INT 2
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 5
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 3
67670: PUSH
67671: LD_INT 2
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 4
67680: PUSH
67681: LD_INT 3
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 4
67690: PUSH
67691: LD_INT 4
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 3
67700: PUSH
67701: LD_INT 4
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 2
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 4
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 2
67740: PUSH
67741: LD_INT 4
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: LD_INT 4
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: LD_INT 3
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: LD_INT 4
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 1
67780: PUSH
67781: LD_INT 5
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: LD_INT 5
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: LD_INT 4
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 1
67811: NEG
67812: PUSH
67813: LD_INT 3
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 2
67822: PUSH
67823: LD_INT 5
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 2
67832: NEG
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67888: LD_ADDR_VAR 0 34
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: LD_INT 4
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 5
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: LD_INT 4
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 1
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: LD_INT 3
67942: NEG
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 1
67950: NEG
67951: PUSH
67952: LD_INT 4
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: LD_INT 5
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 2
67985: NEG
67986: PUSH
67987: LD_INT 5
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 3
67997: PUSH
67998: LD_INT 0
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 3
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 4
68018: PUSH
68019: LD_INT 0
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 4
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: LD_INT 1
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 2
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 2
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 2
68069: PUSH
68070: LD_INT 2
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 4
68080: PUSH
68081: LD_INT 2
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 4
68090: PUSH
68091: LD_INT 4
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 4
68100: PUSH
68101: LD_INT 3
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 5
68110: PUSH
68111: LD_INT 4
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 5
68120: PUSH
68121: LD_INT 5
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 4
68130: PUSH
68131: LD_INT 5
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: LD_INT 4
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 5
68160: PUSH
68161: LD_INT 3
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 3
68170: PUSH
68171: LD_INT 5
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: LD_INT 3
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 0
68190: PUSH
68191: LD_INT 2
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: LD_INT 3
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 1
68210: PUSH
68211: LD_INT 4
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 0
68220: PUSH
68221: LD_INT 4
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 1
68230: NEG
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 1
68241: NEG
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 2
68252: PUSH
68253: LD_INT 4
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 2
68262: NEG
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 4
68273: NEG
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 4
68284: NEG
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: NEG
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 4
68318: NEG
68319: PUSH
68320: LD_INT 1
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 5
68329: NEG
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 5
68340: NEG
68341: PUSH
68342: LD_INT 1
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 5
68352: NEG
68353: PUSH
68354: LD_INT 2
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 3
68364: NEG
68365: PUSH
68366: LD_INT 2
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: ST_TO_ADDR
// end ; end ;
68420: GO 68423
68422: POP
// case btype of b_depot , b_warehouse :
68423: LD_VAR 0 1
68427: PUSH
68428: LD_INT 0
68430: DOUBLE
68431: EQUAL
68432: IFTRUE 68442
68434: LD_INT 1
68436: DOUBLE
68437: EQUAL
68438: IFTRUE 68442
68440: GO 68643
68442: POP
// case nation of nation_american :
68443: LD_VAR 0 5
68447: PUSH
68448: LD_INT 1
68450: DOUBLE
68451: EQUAL
68452: IFTRUE 68456
68454: GO 68512
68456: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68457: LD_ADDR_VAR 0 9
68461: PUSH
68462: LD_VAR 0 11
68466: PUSH
68467: LD_VAR 0 12
68471: PUSH
68472: LD_VAR 0 13
68476: PUSH
68477: LD_VAR 0 14
68481: PUSH
68482: LD_VAR 0 15
68486: PUSH
68487: LD_VAR 0 16
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: PUSH
68500: LD_VAR 0 4
68504: PUSH
68505: LD_INT 1
68507: PLUS
68508: ARRAY
68509: ST_TO_ADDR
68510: GO 68641
68512: LD_INT 2
68514: DOUBLE
68515: EQUAL
68516: IFTRUE 68520
68518: GO 68576
68520: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68521: LD_ADDR_VAR 0 9
68525: PUSH
68526: LD_VAR 0 17
68530: PUSH
68531: LD_VAR 0 18
68535: PUSH
68536: LD_VAR 0 19
68540: PUSH
68541: LD_VAR 0 20
68545: PUSH
68546: LD_VAR 0 21
68550: PUSH
68551: LD_VAR 0 22
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: PUSH
68564: LD_VAR 0 4
68568: PUSH
68569: LD_INT 1
68571: PLUS
68572: ARRAY
68573: ST_TO_ADDR
68574: GO 68641
68576: LD_INT 3
68578: DOUBLE
68579: EQUAL
68580: IFTRUE 68584
68582: GO 68640
68584: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68585: LD_ADDR_VAR 0 9
68589: PUSH
68590: LD_VAR 0 23
68594: PUSH
68595: LD_VAR 0 24
68599: PUSH
68600: LD_VAR 0 25
68604: PUSH
68605: LD_VAR 0 26
68609: PUSH
68610: LD_VAR 0 27
68614: PUSH
68615: LD_VAR 0 28
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: PUSH
68628: LD_VAR 0 4
68632: PUSH
68633: LD_INT 1
68635: PLUS
68636: ARRAY
68637: ST_TO_ADDR
68638: GO 68641
68640: POP
68641: GO 69196
68643: LD_INT 2
68645: DOUBLE
68646: EQUAL
68647: IFTRUE 68657
68649: LD_INT 3
68651: DOUBLE
68652: EQUAL
68653: IFTRUE 68657
68655: GO 68713
68657: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68658: LD_ADDR_VAR 0 9
68662: PUSH
68663: LD_VAR 0 29
68667: PUSH
68668: LD_VAR 0 30
68672: PUSH
68673: LD_VAR 0 31
68677: PUSH
68678: LD_VAR 0 32
68682: PUSH
68683: LD_VAR 0 33
68687: PUSH
68688: LD_VAR 0 34
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: PUSH
68701: LD_VAR 0 4
68705: PUSH
68706: LD_INT 1
68708: PLUS
68709: ARRAY
68710: ST_TO_ADDR
68711: GO 69196
68713: LD_INT 16
68715: DOUBLE
68716: EQUAL
68717: IFTRUE 68775
68719: LD_INT 17
68721: DOUBLE
68722: EQUAL
68723: IFTRUE 68775
68725: LD_INT 18
68727: DOUBLE
68728: EQUAL
68729: IFTRUE 68775
68731: LD_INT 19
68733: DOUBLE
68734: EQUAL
68735: IFTRUE 68775
68737: LD_INT 22
68739: DOUBLE
68740: EQUAL
68741: IFTRUE 68775
68743: LD_INT 20
68745: DOUBLE
68746: EQUAL
68747: IFTRUE 68775
68749: LD_INT 21
68751: DOUBLE
68752: EQUAL
68753: IFTRUE 68775
68755: LD_INT 23
68757: DOUBLE
68758: EQUAL
68759: IFTRUE 68775
68761: LD_INT 24
68763: DOUBLE
68764: EQUAL
68765: IFTRUE 68775
68767: LD_INT 25
68769: DOUBLE
68770: EQUAL
68771: IFTRUE 68775
68773: GO 68831
68775: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68776: LD_ADDR_VAR 0 9
68780: PUSH
68781: LD_VAR 0 35
68785: PUSH
68786: LD_VAR 0 36
68790: PUSH
68791: LD_VAR 0 37
68795: PUSH
68796: LD_VAR 0 38
68800: PUSH
68801: LD_VAR 0 39
68805: PUSH
68806: LD_VAR 0 40
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: PUSH
68819: LD_VAR 0 4
68823: PUSH
68824: LD_INT 1
68826: PLUS
68827: ARRAY
68828: ST_TO_ADDR
68829: GO 69196
68831: LD_INT 6
68833: DOUBLE
68834: EQUAL
68835: IFTRUE 68887
68837: LD_INT 7
68839: DOUBLE
68840: EQUAL
68841: IFTRUE 68887
68843: LD_INT 8
68845: DOUBLE
68846: EQUAL
68847: IFTRUE 68887
68849: LD_INT 13
68851: DOUBLE
68852: EQUAL
68853: IFTRUE 68887
68855: LD_INT 12
68857: DOUBLE
68858: EQUAL
68859: IFTRUE 68887
68861: LD_INT 15
68863: DOUBLE
68864: EQUAL
68865: IFTRUE 68887
68867: LD_INT 11
68869: DOUBLE
68870: EQUAL
68871: IFTRUE 68887
68873: LD_INT 14
68875: DOUBLE
68876: EQUAL
68877: IFTRUE 68887
68879: LD_INT 10
68881: DOUBLE
68882: EQUAL
68883: IFTRUE 68887
68885: GO 68943
68887: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68888: LD_ADDR_VAR 0 9
68892: PUSH
68893: LD_VAR 0 41
68897: PUSH
68898: LD_VAR 0 42
68902: PUSH
68903: LD_VAR 0 43
68907: PUSH
68908: LD_VAR 0 44
68912: PUSH
68913: LD_VAR 0 45
68917: PUSH
68918: LD_VAR 0 46
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: PUSH
68931: LD_VAR 0 4
68935: PUSH
68936: LD_INT 1
68938: PLUS
68939: ARRAY
68940: ST_TO_ADDR
68941: GO 69196
68943: LD_INT 36
68945: DOUBLE
68946: EQUAL
68947: IFTRUE 68951
68949: GO 69007
68951: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68952: LD_ADDR_VAR 0 9
68956: PUSH
68957: LD_VAR 0 47
68961: PUSH
68962: LD_VAR 0 48
68966: PUSH
68967: LD_VAR 0 49
68971: PUSH
68972: LD_VAR 0 50
68976: PUSH
68977: LD_VAR 0 51
68981: PUSH
68982: LD_VAR 0 52
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: PUSH
68995: LD_VAR 0 4
68999: PUSH
69000: LD_INT 1
69002: PLUS
69003: ARRAY
69004: ST_TO_ADDR
69005: GO 69196
69007: LD_INT 4
69009: DOUBLE
69010: EQUAL
69011: IFTRUE 69033
69013: LD_INT 5
69015: DOUBLE
69016: EQUAL
69017: IFTRUE 69033
69019: LD_INT 34
69021: DOUBLE
69022: EQUAL
69023: IFTRUE 69033
69025: LD_INT 37
69027: DOUBLE
69028: EQUAL
69029: IFTRUE 69033
69031: GO 69089
69033: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69034: LD_ADDR_VAR 0 9
69038: PUSH
69039: LD_VAR 0 53
69043: PUSH
69044: LD_VAR 0 54
69048: PUSH
69049: LD_VAR 0 55
69053: PUSH
69054: LD_VAR 0 56
69058: PUSH
69059: LD_VAR 0 57
69063: PUSH
69064: LD_VAR 0 58
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: PUSH
69077: LD_VAR 0 4
69081: PUSH
69082: LD_INT 1
69084: PLUS
69085: ARRAY
69086: ST_TO_ADDR
69087: GO 69196
69089: LD_INT 31
69091: DOUBLE
69092: EQUAL
69093: IFTRUE 69139
69095: LD_INT 32
69097: DOUBLE
69098: EQUAL
69099: IFTRUE 69139
69101: LD_INT 33
69103: DOUBLE
69104: EQUAL
69105: IFTRUE 69139
69107: LD_INT 27
69109: DOUBLE
69110: EQUAL
69111: IFTRUE 69139
69113: LD_INT 26
69115: DOUBLE
69116: EQUAL
69117: IFTRUE 69139
69119: LD_INT 28
69121: DOUBLE
69122: EQUAL
69123: IFTRUE 69139
69125: LD_INT 29
69127: DOUBLE
69128: EQUAL
69129: IFTRUE 69139
69131: LD_INT 30
69133: DOUBLE
69134: EQUAL
69135: IFTRUE 69139
69137: GO 69195
69139: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69140: LD_ADDR_VAR 0 9
69144: PUSH
69145: LD_VAR 0 59
69149: PUSH
69150: LD_VAR 0 60
69154: PUSH
69155: LD_VAR 0 61
69159: PUSH
69160: LD_VAR 0 62
69164: PUSH
69165: LD_VAR 0 63
69169: PUSH
69170: LD_VAR 0 64
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: PUSH
69183: LD_VAR 0 4
69187: PUSH
69188: LD_INT 1
69190: PLUS
69191: ARRAY
69192: ST_TO_ADDR
69193: GO 69196
69195: POP
// temp_list2 = [ ] ;
69196: LD_ADDR_VAR 0 10
69200: PUSH
69201: EMPTY
69202: ST_TO_ADDR
// for i in temp_list do
69203: LD_ADDR_VAR 0 8
69207: PUSH
69208: LD_VAR 0 9
69212: PUSH
69213: FOR_IN
69214: IFFALSE 69266
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69216: LD_ADDR_VAR 0 10
69220: PUSH
69221: LD_VAR 0 10
69225: PUSH
69226: LD_VAR 0 8
69230: PUSH
69231: LD_INT 1
69233: ARRAY
69234: PUSH
69235: LD_VAR 0 2
69239: PLUS
69240: PUSH
69241: LD_VAR 0 8
69245: PUSH
69246: LD_INT 2
69248: ARRAY
69249: PUSH
69250: LD_VAR 0 3
69254: PLUS
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: EMPTY
69261: LIST
69262: ADD
69263: ST_TO_ADDR
69264: GO 69213
69266: POP
69267: POP
// result = temp_list2 ;
69268: LD_ADDR_VAR 0 7
69272: PUSH
69273: LD_VAR 0 10
69277: ST_TO_ADDR
// end ;
69278: LD_VAR 0 7
69282: RET
// export function EnemyInRange ( unit , dist ) ; begin
69283: LD_INT 0
69285: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69286: LD_ADDR_VAR 0 3
69290: PUSH
69291: LD_VAR 0 1
69295: PPUSH
69296: CALL_OW 255
69300: PPUSH
69301: LD_VAR 0 1
69305: PPUSH
69306: CALL_OW 250
69310: PPUSH
69311: LD_VAR 0 1
69315: PPUSH
69316: CALL_OW 251
69320: PPUSH
69321: LD_VAR 0 2
69325: PPUSH
69326: CALL 42656 0 4
69330: PUSH
69331: LD_INT 4
69333: ARRAY
69334: ST_TO_ADDR
// end ;
69335: LD_VAR 0 3
69339: RET
// export function PlayerSeeMe ( unit ) ; begin
69340: LD_INT 0
69342: PPUSH
// result := See ( your_side , unit ) ;
69343: LD_ADDR_VAR 0 2
69347: PUSH
69348: LD_OWVAR 2
69352: PPUSH
69353: LD_VAR 0 1
69357: PPUSH
69358: CALL_OW 292
69362: ST_TO_ADDR
// end ;
69363: LD_VAR 0 2
69367: RET
// export function ReverseDir ( unit ) ; begin
69368: LD_INT 0
69370: PPUSH
// if not unit then
69371: LD_VAR 0 1
69375: NOT
69376: IFFALSE 69380
// exit ;
69378: GO 69403
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69380: LD_ADDR_VAR 0 2
69384: PUSH
69385: LD_VAR 0 1
69389: PPUSH
69390: CALL_OW 254
69394: PUSH
69395: LD_INT 3
69397: PLUS
69398: PUSH
69399: LD_INT 6
69401: MOD
69402: ST_TO_ADDR
// end ;
69403: LD_VAR 0 2
69407: RET
// export function ReverseArray ( array ) ; var i ; begin
69408: LD_INT 0
69410: PPUSH
69411: PPUSH
// if not array then
69412: LD_VAR 0 1
69416: NOT
69417: IFFALSE 69421
// exit ;
69419: GO 69476
// result := [ ] ;
69421: LD_ADDR_VAR 0 2
69425: PUSH
69426: EMPTY
69427: ST_TO_ADDR
// for i := array downto 1 do
69428: LD_ADDR_VAR 0 3
69432: PUSH
69433: DOUBLE
69434: LD_VAR 0 1
69438: INC
69439: ST_TO_ADDR
69440: LD_INT 1
69442: PUSH
69443: FOR_DOWNTO
69444: IFFALSE 69474
// result := Join ( result , array [ i ] ) ;
69446: LD_ADDR_VAR 0 2
69450: PUSH
69451: LD_VAR 0 2
69455: PPUSH
69456: LD_VAR 0 1
69460: PUSH
69461: LD_VAR 0 3
69465: ARRAY
69466: PPUSH
69467: CALL 74141 0 2
69471: ST_TO_ADDR
69472: GO 69443
69474: POP
69475: POP
// end ;
69476: LD_VAR 0 2
69480: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69481: LD_INT 0
69483: PPUSH
69484: PPUSH
69485: PPUSH
69486: PPUSH
69487: PPUSH
69488: PPUSH
// if not unit or not hexes then
69489: LD_VAR 0 1
69493: NOT
69494: PUSH
69495: LD_VAR 0 2
69499: NOT
69500: OR
69501: IFFALSE 69505
// exit ;
69503: GO 69628
// dist := 9999 ;
69505: LD_ADDR_VAR 0 5
69509: PUSH
69510: LD_INT 9999
69512: ST_TO_ADDR
// for i = 1 to hexes do
69513: LD_ADDR_VAR 0 4
69517: PUSH
69518: DOUBLE
69519: LD_INT 1
69521: DEC
69522: ST_TO_ADDR
69523: LD_VAR 0 2
69527: PUSH
69528: FOR_TO
69529: IFFALSE 69616
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69531: LD_ADDR_VAR 0 6
69535: PUSH
69536: LD_VAR 0 1
69540: PPUSH
69541: LD_VAR 0 2
69545: PUSH
69546: LD_VAR 0 4
69550: ARRAY
69551: PUSH
69552: LD_INT 1
69554: ARRAY
69555: PPUSH
69556: LD_VAR 0 2
69560: PUSH
69561: LD_VAR 0 4
69565: ARRAY
69566: PUSH
69567: LD_INT 2
69569: ARRAY
69570: PPUSH
69571: CALL_OW 297
69575: ST_TO_ADDR
// if tdist < dist then
69576: LD_VAR 0 6
69580: PUSH
69581: LD_VAR 0 5
69585: LESS
69586: IFFALSE 69614
// begin hex := hexes [ i ] ;
69588: LD_ADDR_VAR 0 8
69592: PUSH
69593: LD_VAR 0 2
69597: PUSH
69598: LD_VAR 0 4
69602: ARRAY
69603: ST_TO_ADDR
// dist := tdist ;
69604: LD_ADDR_VAR 0 5
69608: PUSH
69609: LD_VAR 0 6
69613: ST_TO_ADDR
// end ; end ;
69614: GO 69528
69616: POP
69617: POP
// result := hex ;
69618: LD_ADDR_VAR 0 3
69622: PUSH
69623: LD_VAR 0 8
69627: ST_TO_ADDR
// end ;
69628: LD_VAR 0 3
69632: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69633: LD_INT 0
69635: PPUSH
69636: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69637: LD_VAR 0 1
69641: NOT
69642: PUSH
69643: LD_VAR 0 1
69647: PUSH
69648: LD_INT 21
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 23
69660: PUSH
69661: LD_INT 2
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PPUSH
69672: CALL_OW 69
69676: IN
69677: NOT
69678: OR
69679: IFFALSE 69683
// exit ;
69681: GO 69730
// for i = 1 to 3 do
69683: LD_ADDR_VAR 0 3
69687: PUSH
69688: DOUBLE
69689: LD_INT 1
69691: DEC
69692: ST_TO_ADDR
69693: LD_INT 3
69695: PUSH
69696: FOR_TO
69697: IFFALSE 69728
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69699: LD_VAR 0 1
69703: PPUSH
69704: CALL_OW 250
69708: PPUSH
69709: LD_VAR 0 1
69713: PPUSH
69714: CALL_OW 251
69718: PPUSH
69719: LD_INT 1
69721: PPUSH
69722: CALL_OW 453
69726: GO 69696
69728: POP
69729: POP
// end ;
69730: LD_VAR 0 2
69734: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69735: LD_INT 0
69737: PPUSH
69738: PPUSH
69739: PPUSH
69740: PPUSH
69741: PPUSH
69742: PPUSH
// if not unit or not enemy_unit then
69743: LD_VAR 0 1
69747: NOT
69748: PUSH
69749: LD_VAR 0 2
69753: NOT
69754: OR
69755: IFFALSE 69759
// exit ;
69757: GO 70226
// if GetLives ( i ) < 250 then
69759: LD_VAR 0 4
69763: PPUSH
69764: CALL_OW 256
69768: PUSH
69769: LD_INT 250
69771: LESS
69772: IFFALSE 69785
// begin ComAutodestruct ( i ) ;
69774: LD_VAR 0 4
69778: PPUSH
69779: CALL 69633 0 1
// exit ;
69783: GO 70226
// end ; x := GetX ( enemy_unit ) ;
69785: LD_ADDR_VAR 0 7
69789: PUSH
69790: LD_VAR 0 2
69794: PPUSH
69795: CALL_OW 250
69799: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69800: LD_ADDR_VAR 0 8
69804: PUSH
69805: LD_VAR 0 2
69809: PPUSH
69810: CALL_OW 251
69814: ST_TO_ADDR
// if not x or not y then
69815: LD_VAR 0 7
69819: NOT
69820: PUSH
69821: LD_VAR 0 8
69825: NOT
69826: OR
69827: IFFALSE 69831
// exit ;
69829: GO 70226
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69831: LD_ADDR_VAR 0 6
69835: PUSH
69836: LD_VAR 0 7
69840: PPUSH
69841: LD_INT 0
69843: PPUSH
69844: LD_INT 4
69846: PPUSH
69847: CALL_OW 272
69851: PUSH
69852: LD_VAR 0 8
69856: PPUSH
69857: LD_INT 0
69859: PPUSH
69860: LD_INT 4
69862: PPUSH
69863: CALL_OW 273
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_VAR 0 7
69876: PPUSH
69877: LD_INT 1
69879: PPUSH
69880: LD_INT 4
69882: PPUSH
69883: CALL_OW 272
69887: PUSH
69888: LD_VAR 0 8
69892: PPUSH
69893: LD_INT 1
69895: PPUSH
69896: LD_INT 4
69898: PPUSH
69899: CALL_OW 273
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_VAR 0 7
69912: PPUSH
69913: LD_INT 2
69915: PPUSH
69916: LD_INT 4
69918: PPUSH
69919: CALL_OW 272
69923: PUSH
69924: LD_VAR 0 8
69928: PPUSH
69929: LD_INT 2
69931: PPUSH
69932: LD_INT 4
69934: PPUSH
69935: CALL_OW 273
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_VAR 0 7
69948: PPUSH
69949: LD_INT 3
69951: PPUSH
69952: LD_INT 4
69954: PPUSH
69955: CALL_OW 272
69959: PUSH
69960: LD_VAR 0 8
69964: PPUSH
69965: LD_INT 3
69967: PPUSH
69968: LD_INT 4
69970: PPUSH
69971: CALL_OW 273
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_VAR 0 7
69984: PPUSH
69985: LD_INT 4
69987: PPUSH
69988: LD_INT 4
69990: PPUSH
69991: CALL_OW 272
69995: PUSH
69996: LD_VAR 0 8
70000: PPUSH
70001: LD_INT 4
70003: PPUSH
70004: LD_INT 4
70006: PPUSH
70007: CALL_OW 273
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_VAR 0 7
70020: PPUSH
70021: LD_INT 5
70023: PPUSH
70024: LD_INT 4
70026: PPUSH
70027: CALL_OW 272
70031: PUSH
70032: LD_VAR 0 8
70036: PPUSH
70037: LD_INT 5
70039: PPUSH
70040: LD_INT 4
70042: PPUSH
70043: CALL_OW 273
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: ST_TO_ADDR
// for i = tmp downto 1 do
70060: LD_ADDR_VAR 0 4
70064: PUSH
70065: DOUBLE
70066: LD_VAR 0 6
70070: INC
70071: ST_TO_ADDR
70072: LD_INT 1
70074: PUSH
70075: FOR_DOWNTO
70076: IFFALSE 70177
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70078: LD_VAR 0 6
70082: PUSH
70083: LD_VAR 0 4
70087: ARRAY
70088: PUSH
70089: LD_INT 1
70091: ARRAY
70092: PPUSH
70093: LD_VAR 0 6
70097: PUSH
70098: LD_VAR 0 4
70102: ARRAY
70103: PUSH
70104: LD_INT 2
70106: ARRAY
70107: PPUSH
70108: CALL_OW 488
70112: NOT
70113: PUSH
70114: LD_VAR 0 6
70118: PUSH
70119: LD_VAR 0 4
70123: ARRAY
70124: PUSH
70125: LD_INT 1
70127: ARRAY
70128: PPUSH
70129: LD_VAR 0 6
70133: PUSH
70134: LD_VAR 0 4
70138: ARRAY
70139: PUSH
70140: LD_INT 2
70142: ARRAY
70143: PPUSH
70144: CALL_OW 428
70148: PUSH
70149: LD_INT 0
70151: NONEQUAL
70152: OR
70153: IFFALSE 70175
// tmp := Delete ( tmp , i ) ;
70155: LD_ADDR_VAR 0 6
70159: PUSH
70160: LD_VAR 0 6
70164: PPUSH
70165: LD_VAR 0 4
70169: PPUSH
70170: CALL_OW 3
70174: ST_TO_ADDR
70175: GO 70075
70177: POP
70178: POP
// j := GetClosestHex ( unit , tmp ) ;
70179: LD_ADDR_VAR 0 5
70183: PUSH
70184: LD_VAR 0 1
70188: PPUSH
70189: LD_VAR 0 6
70193: PPUSH
70194: CALL 69481 0 2
70198: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70199: LD_VAR 0 1
70203: PPUSH
70204: LD_VAR 0 5
70208: PUSH
70209: LD_INT 1
70211: ARRAY
70212: PPUSH
70213: LD_VAR 0 5
70217: PUSH
70218: LD_INT 2
70220: ARRAY
70221: PPUSH
70222: CALL_OW 111
// end ;
70226: LD_VAR 0 3
70230: RET
// export function PrepareApemanSoldier ( ) ; begin
70231: LD_INT 0
70233: PPUSH
// uc_nation := 0 ;
70234: LD_ADDR_OWVAR 21
70238: PUSH
70239: LD_INT 0
70241: ST_TO_ADDR
// hc_sex := sex_male ;
70242: LD_ADDR_OWVAR 27
70246: PUSH
70247: LD_INT 1
70249: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70250: LD_ADDR_OWVAR 28
70254: PUSH
70255: LD_INT 15
70257: ST_TO_ADDR
// hc_gallery :=  ;
70258: LD_ADDR_OWVAR 33
70262: PUSH
70263: LD_STRING 
70265: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70266: LD_ADDR_OWVAR 31
70270: PUSH
70271: LD_INT 0
70273: PPUSH
70274: LD_INT 3
70276: PPUSH
70277: CALL_OW 12
70281: PUSH
70282: LD_INT 0
70284: PPUSH
70285: LD_INT 3
70287: PPUSH
70288: CALL_OW 12
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: ST_TO_ADDR
// end ;
70305: LD_VAR 0 1
70309: RET
// export function PrepareApemanEngineer ( ) ; begin
70310: LD_INT 0
70312: PPUSH
// uc_nation := 0 ;
70313: LD_ADDR_OWVAR 21
70317: PUSH
70318: LD_INT 0
70320: ST_TO_ADDR
// hc_sex := sex_male ;
70321: LD_ADDR_OWVAR 27
70325: PUSH
70326: LD_INT 1
70328: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70329: LD_ADDR_OWVAR 28
70333: PUSH
70334: LD_INT 16
70336: ST_TO_ADDR
// hc_gallery :=  ;
70337: LD_ADDR_OWVAR 33
70341: PUSH
70342: LD_STRING 
70344: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70345: LD_ADDR_OWVAR 31
70349: PUSH
70350: LD_INT 0
70352: PPUSH
70353: LD_INT 3
70355: PPUSH
70356: CALL_OW 12
70360: PUSH
70361: LD_INT 0
70363: PPUSH
70364: LD_INT 3
70366: PPUSH
70367: CALL_OW 12
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: ST_TO_ADDR
// end ;
70384: LD_VAR 0 1
70388: RET
// export function PrepareApeman ( agressivity ) ; begin
70389: LD_INT 0
70391: PPUSH
// uc_side := 0 ;
70392: LD_ADDR_OWVAR 20
70396: PUSH
70397: LD_INT 0
70399: ST_TO_ADDR
// uc_nation := 0 ;
70400: LD_ADDR_OWVAR 21
70404: PUSH
70405: LD_INT 0
70407: ST_TO_ADDR
// hc_sex := sex_male ;
70408: LD_ADDR_OWVAR 27
70412: PUSH
70413: LD_INT 1
70415: ST_TO_ADDR
// hc_class := class_apeman ;
70416: LD_ADDR_OWVAR 28
70420: PUSH
70421: LD_INT 12
70423: ST_TO_ADDR
// hc_gallery :=  ;
70424: LD_ADDR_OWVAR 33
70428: PUSH
70429: LD_STRING 
70431: ST_TO_ADDR
// if agressivity = 0 then
70432: LD_VAR 0 1
70436: PUSH
70437: LD_INT 0
70439: EQUAL
70440: IFFALSE 70452
// hc_agressivity := 0 else
70442: LD_ADDR_OWVAR 35
70446: PUSH
70447: LD_INT 0
70449: ST_TO_ADDR
70450: GO 70473
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70452: LD_ADDR_OWVAR 35
70456: PUSH
70457: LD_VAR 0 1
70461: NEG
70462: PPUSH
70463: LD_VAR 0 1
70467: PPUSH
70468: CALL_OW 12
70472: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70473: LD_ADDR_OWVAR 31
70477: PUSH
70478: LD_INT 0
70480: PPUSH
70481: LD_INT 3
70483: PPUSH
70484: CALL_OW 12
70488: PUSH
70489: LD_INT 0
70491: PPUSH
70492: LD_INT 3
70494: PPUSH
70495: CALL_OW 12
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: ST_TO_ADDR
// end ;
70512: LD_VAR 0 2
70516: RET
// export function PrepareTiger ( agressivity ) ; begin
70517: LD_INT 0
70519: PPUSH
// uc_side := 0 ;
70520: LD_ADDR_OWVAR 20
70524: PUSH
70525: LD_INT 0
70527: ST_TO_ADDR
// uc_nation := 0 ;
70528: LD_ADDR_OWVAR 21
70532: PUSH
70533: LD_INT 0
70535: ST_TO_ADDR
// hc_class := class_tiger ;
70536: LD_ADDR_OWVAR 28
70540: PUSH
70541: LD_INT 14
70543: ST_TO_ADDR
// hc_gallery :=  ;
70544: LD_ADDR_OWVAR 33
70548: PUSH
70549: LD_STRING 
70551: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70552: LD_ADDR_OWVAR 35
70556: PUSH
70557: LD_VAR 0 1
70561: NEG
70562: PPUSH
70563: LD_VAR 0 1
70567: PPUSH
70568: CALL_OW 12
70572: ST_TO_ADDR
// end ;
70573: LD_VAR 0 2
70577: RET
// export function PrepareEnchidna ( ) ; begin
70578: LD_INT 0
70580: PPUSH
// uc_side := 0 ;
70581: LD_ADDR_OWVAR 20
70585: PUSH
70586: LD_INT 0
70588: ST_TO_ADDR
// uc_nation := 0 ;
70589: LD_ADDR_OWVAR 21
70593: PUSH
70594: LD_INT 0
70596: ST_TO_ADDR
// hc_class := class_baggie ;
70597: LD_ADDR_OWVAR 28
70601: PUSH
70602: LD_INT 13
70604: ST_TO_ADDR
// hc_gallery :=  ;
70605: LD_ADDR_OWVAR 33
70609: PUSH
70610: LD_STRING 
70612: ST_TO_ADDR
// end ;
70613: LD_VAR 0 1
70617: RET
// export function PrepareFrog ( ) ; begin
70618: LD_INT 0
70620: PPUSH
// uc_side := 0 ;
70621: LD_ADDR_OWVAR 20
70625: PUSH
70626: LD_INT 0
70628: ST_TO_ADDR
// uc_nation := 0 ;
70629: LD_ADDR_OWVAR 21
70633: PUSH
70634: LD_INT 0
70636: ST_TO_ADDR
// hc_class := class_frog ;
70637: LD_ADDR_OWVAR 28
70641: PUSH
70642: LD_INT 19
70644: ST_TO_ADDR
// hc_gallery :=  ;
70645: LD_ADDR_OWVAR 33
70649: PUSH
70650: LD_STRING 
70652: ST_TO_ADDR
// end ;
70653: LD_VAR 0 1
70657: RET
// export function PrepareFish ( ) ; begin
70658: LD_INT 0
70660: PPUSH
// uc_side := 0 ;
70661: LD_ADDR_OWVAR 20
70665: PUSH
70666: LD_INT 0
70668: ST_TO_ADDR
// uc_nation := 0 ;
70669: LD_ADDR_OWVAR 21
70673: PUSH
70674: LD_INT 0
70676: ST_TO_ADDR
// hc_class := class_fish ;
70677: LD_ADDR_OWVAR 28
70681: PUSH
70682: LD_INT 20
70684: ST_TO_ADDR
// hc_gallery :=  ;
70685: LD_ADDR_OWVAR 33
70689: PUSH
70690: LD_STRING 
70692: ST_TO_ADDR
// end ;
70693: LD_VAR 0 1
70697: RET
// export function PrepareBird ( ) ; begin
70698: LD_INT 0
70700: PPUSH
// uc_side := 0 ;
70701: LD_ADDR_OWVAR 20
70705: PUSH
70706: LD_INT 0
70708: ST_TO_ADDR
// uc_nation := 0 ;
70709: LD_ADDR_OWVAR 21
70713: PUSH
70714: LD_INT 0
70716: ST_TO_ADDR
// hc_class := class_phororhacos ;
70717: LD_ADDR_OWVAR 28
70721: PUSH
70722: LD_INT 18
70724: ST_TO_ADDR
// hc_gallery :=  ;
70725: LD_ADDR_OWVAR 33
70729: PUSH
70730: LD_STRING 
70732: ST_TO_ADDR
// end ;
70733: LD_VAR 0 1
70737: RET
// export function PrepareHorse ( ) ; begin
70738: LD_INT 0
70740: PPUSH
// uc_side := 0 ;
70741: LD_ADDR_OWVAR 20
70745: PUSH
70746: LD_INT 0
70748: ST_TO_ADDR
// uc_nation := 0 ;
70749: LD_ADDR_OWVAR 21
70753: PUSH
70754: LD_INT 0
70756: ST_TO_ADDR
// hc_class := class_horse ;
70757: LD_ADDR_OWVAR 28
70761: PUSH
70762: LD_INT 21
70764: ST_TO_ADDR
// hc_gallery :=  ;
70765: LD_ADDR_OWVAR 33
70769: PUSH
70770: LD_STRING 
70772: ST_TO_ADDR
// end ;
70773: LD_VAR 0 1
70777: RET
// export function PrepareMastodont ( ) ; begin
70778: LD_INT 0
70780: PPUSH
// uc_side := 0 ;
70781: LD_ADDR_OWVAR 20
70785: PUSH
70786: LD_INT 0
70788: ST_TO_ADDR
// uc_nation := 0 ;
70789: LD_ADDR_OWVAR 21
70793: PUSH
70794: LD_INT 0
70796: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70797: LD_ADDR_OWVAR 37
70801: PUSH
70802: LD_INT 31
70804: ST_TO_ADDR
// vc_control := control_rider ;
70805: LD_ADDR_OWVAR 38
70809: PUSH
70810: LD_INT 4
70812: ST_TO_ADDR
// end ;
70813: LD_VAR 0 1
70817: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70818: LD_INT 0
70820: PPUSH
70821: PPUSH
70822: PPUSH
// uc_side = 0 ;
70823: LD_ADDR_OWVAR 20
70827: PUSH
70828: LD_INT 0
70830: ST_TO_ADDR
// uc_nation = 0 ;
70831: LD_ADDR_OWVAR 21
70835: PUSH
70836: LD_INT 0
70838: ST_TO_ADDR
// InitHc_All ( ) ;
70839: CALL_OW 584
// InitVc ;
70843: CALL_OW 20
// if mastodonts then
70847: LD_VAR 0 6
70851: IFFALSE 70918
// for i = 1 to mastodonts do
70853: LD_ADDR_VAR 0 11
70857: PUSH
70858: DOUBLE
70859: LD_INT 1
70861: DEC
70862: ST_TO_ADDR
70863: LD_VAR 0 6
70867: PUSH
70868: FOR_TO
70869: IFFALSE 70916
// begin vc_chassis := 31 ;
70871: LD_ADDR_OWVAR 37
70875: PUSH
70876: LD_INT 31
70878: ST_TO_ADDR
// vc_control := control_rider ;
70879: LD_ADDR_OWVAR 38
70883: PUSH
70884: LD_INT 4
70886: ST_TO_ADDR
// animal := CreateVehicle ;
70887: LD_ADDR_VAR 0 12
70891: PUSH
70892: CALL_OW 45
70896: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70897: LD_VAR 0 12
70901: PPUSH
70902: LD_VAR 0 8
70906: PPUSH
70907: LD_INT 0
70909: PPUSH
70910: CALL 73046 0 3
// end ;
70914: GO 70868
70916: POP
70917: POP
// if horses then
70918: LD_VAR 0 5
70922: IFFALSE 70989
// for i = 1 to horses do
70924: LD_ADDR_VAR 0 11
70928: PUSH
70929: DOUBLE
70930: LD_INT 1
70932: DEC
70933: ST_TO_ADDR
70934: LD_VAR 0 5
70938: PUSH
70939: FOR_TO
70940: IFFALSE 70987
// begin hc_class := 21 ;
70942: LD_ADDR_OWVAR 28
70946: PUSH
70947: LD_INT 21
70949: ST_TO_ADDR
// hc_gallery :=  ;
70950: LD_ADDR_OWVAR 33
70954: PUSH
70955: LD_STRING 
70957: ST_TO_ADDR
// animal := CreateHuman ;
70958: LD_ADDR_VAR 0 12
70962: PUSH
70963: CALL_OW 44
70967: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70968: LD_VAR 0 12
70972: PPUSH
70973: LD_VAR 0 8
70977: PPUSH
70978: LD_INT 0
70980: PPUSH
70981: CALL 73046 0 3
// end ;
70985: GO 70939
70987: POP
70988: POP
// if birds then
70989: LD_VAR 0 1
70993: IFFALSE 71060
// for i = 1 to birds do
70995: LD_ADDR_VAR 0 11
70999: PUSH
71000: DOUBLE
71001: LD_INT 1
71003: DEC
71004: ST_TO_ADDR
71005: LD_VAR 0 1
71009: PUSH
71010: FOR_TO
71011: IFFALSE 71058
// begin hc_class := 18 ;
71013: LD_ADDR_OWVAR 28
71017: PUSH
71018: LD_INT 18
71020: ST_TO_ADDR
// hc_gallery =  ;
71021: LD_ADDR_OWVAR 33
71025: PUSH
71026: LD_STRING 
71028: ST_TO_ADDR
// animal := CreateHuman ;
71029: LD_ADDR_VAR 0 12
71033: PUSH
71034: CALL_OW 44
71038: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71039: LD_VAR 0 12
71043: PPUSH
71044: LD_VAR 0 8
71048: PPUSH
71049: LD_INT 0
71051: PPUSH
71052: CALL 73046 0 3
// end ;
71056: GO 71010
71058: POP
71059: POP
// if tigers then
71060: LD_VAR 0 2
71064: IFFALSE 71148
// for i = 1 to tigers do
71066: LD_ADDR_VAR 0 11
71070: PUSH
71071: DOUBLE
71072: LD_INT 1
71074: DEC
71075: ST_TO_ADDR
71076: LD_VAR 0 2
71080: PUSH
71081: FOR_TO
71082: IFFALSE 71146
// begin hc_class = class_tiger ;
71084: LD_ADDR_OWVAR 28
71088: PUSH
71089: LD_INT 14
71091: ST_TO_ADDR
// hc_gallery =  ;
71092: LD_ADDR_OWVAR 33
71096: PUSH
71097: LD_STRING 
71099: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71100: LD_ADDR_OWVAR 35
71104: PUSH
71105: LD_INT 7
71107: NEG
71108: PPUSH
71109: LD_INT 7
71111: PPUSH
71112: CALL_OW 12
71116: ST_TO_ADDR
// animal := CreateHuman ;
71117: LD_ADDR_VAR 0 12
71121: PUSH
71122: CALL_OW 44
71126: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71127: LD_VAR 0 12
71131: PPUSH
71132: LD_VAR 0 8
71136: PPUSH
71137: LD_INT 0
71139: PPUSH
71140: CALL 73046 0 3
// end ;
71144: GO 71081
71146: POP
71147: POP
// if apemans then
71148: LD_VAR 0 3
71152: IFFALSE 71275
// for i = 1 to apemans do
71154: LD_ADDR_VAR 0 11
71158: PUSH
71159: DOUBLE
71160: LD_INT 1
71162: DEC
71163: ST_TO_ADDR
71164: LD_VAR 0 3
71168: PUSH
71169: FOR_TO
71170: IFFALSE 71273
// begin hc_class = class_apeman ;
71172: LD_ADDR_OWVAR 28
71176: PUSH
71177: LD_INT 12
71179: ST_TO_ADDR
// hc_gallery =  ;
71180: LD_ADDR_OWVAR 33
71184: PUSH
71185: LD_STRING 
71187: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71188: LD_ADDR_OWVAR 35
71192: PUSH
71193: LD_INT 2
71195: NEG
71196: PPUSH
71197: LD_INT 2
71199: PPUSH
71200: CALL_OW 12
71204: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71205: LD_ADDR_OWVAR 31
71209: PUSH
71210: LD_INT 1
71212: PPUSH
71213: LD_INT 3
71215: PPUSH
71216: CALL_OW 12
71220: PUSH
71221: LD_INT 1
71223: PPUSH
71224: LD_INT 3
71226: PPUSH
71227: CALL_OW 12
71231: PUSH
71232: LD_INT 0
71234: PUSH
71235: LD_INT 0
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: ST_TO_ADDR
// animal := CreateHuman ;
71244: LD_ADDR_VAR 0 12
71248: PUSH
71249: CALL_OW 44
71253: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71254: LD_VAR 0 12
71258: PPUSH
71259: LD_VAR 0 8
71263: PPUSH
71264: LD_INT 0
71266: PPUSH
71267: CALL 73046 0 3
// end ;
71271: GO 71169
71273: POP
71274: POP
// if enchidnas then
71275: LD_VAR 0 4
71279: IFFALSE 71346
// for i = 1 to enchidnas do
71281: LD_ADDR_VAR 0 11
71285: PUSH
71286: DOUBLE
71287: LD_INT 1
71289: DEC
71290: ST_TO_ADDR
71291: LD_VAR 0 4
71295: PUSH
71296: FOR_TO
71297: IFFALSE 71344
// begin hc_class = 13 ;
71299: LD_ADDR_OWVAR 28
71303: PUSH
71304: LD_INT 13
71306: ST_TO_ADDR
// hc_gallery =  ;
71307: LD_ADDR_OWVAR 33
71311: PUSH
71312: LD_STRING 
71314: ST_TO_ADDR
// animal := CreateHuman ;
71315: LD_ADDR_VAR 0 12
71319: PUSH
71320: CALL_OW 44
71324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71325: LD_VAR 0 12
71329: PPUSH
71330: LD_VAR 0 8
71334: PPUSH
71335: LD_INT 0
71337: PPUSH
71338: CALL 73046 0 3
// end ;
71342: GO 71296
71344: POP
71345: POP
// if fishes then
71346: LD_VAR 0 7
71350: IFFALSE 71417
// for i = 1 to fishes do
71352: LD_ADDR_VAR 0 11
71356: PUSH
71357: DOUBLE
71358: LD_INT 1
71360: DEC
71361: ST_TO_ADDR
71362: LD_VAR 0 7
71366: PUSH
71367: FOR_TO
71368: IFFALSE 71415
// begin hc_class = 20 ;
71370: LD_ADDR_OWVAR 28
71374: PUSH
71375: LD_INT 20
71377: ST_TO_ADDR
// hc_gallery =  ;
71378: LD_ADDR_OWVAR 33
71382: PUSH
71383: LD_STRING 
71385: ST_TO_ADDR
// animal := CreateHuman ;
71386: LD_ADDR_VAR 0 12
71390: PUSH
71391: CALL_OW 44
71395: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71396: LD_VAR 0 12
71400: PPUSH
71401: LD_VAR 0 9
71405: PPUSH
71406: LD_INT 0
71408: PPUSH
71409: CALL 73046 0 3
// end ;
71413: GO 71367
71415: POP
71416: POP
// end ;
71417: LD_VAR 0 10
71421: RET
// export function WantHeal ( sci , unit ) ; begin
71422: LD_INT 0
71424: PPUSH
// if GetTaskList ( sci ) > 0 then
71425: LD_VAR 0 1
71429: PPUSH
71430: CALL_OW 437
71434: PUSH
71435: LD_INT 0
71437: GREATER
71438: IFFALSE 71508
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71440: LD_VAR 0 1
71444: PPUSH
71445: CALL_OW 437
71449: PUSH
71450: LD_INT 1
71452: ARRAY
71453: PUSH
71454: LD_INT 1
71456: ARRAY
71457: PUSH
71458: LD_STRING l
71460: EQUAL
71461: PUSH
71462: LD_VAR 0 1
71466: PPUSH
71467: CALL_OW 437
71471: PUSH
71472: LD_INT 1
71474: ARRAY
71475: PUSH
71476: LD_INT 4
71478: ARRAY
71479: PUSH
71480: LD_VAR 0 2
71484: EQUAL
71485: AND
71486: IFFALSE 71498
// result := true else
71488: LD_ADDR_VAR 0 3
71492: PUSH
71493: LD_INT 1
71495: ST_TO_ADDR
71496: GO 71506
// result := false ;
71498: LD_ADDR_VAR 0 3
71502: PUSH
71503: LD_INT 0
71505: ST_TO_ADDR
// end else
71506: GO 71516
// result := false ;
71508: LD_ADDR_VAR 0 3
71512: PUSH
71513: LD_INT 0
71515: ST_TO_ADDR
// end ;
71516: LD_VAR 0 3
71520: RET
// export function HealTarget ( sci ) ; begin
71521: LD_INT 0
71523: PPUSH
// if not sci then
71524: LD_VAR 0 1
71528: NOT
71529: IFFALSE 71533
// exit ;
71531: GO 71598
// result := 0 ;
71533: LD_ADDR_VAR 0 2
71537: PUSH
71538: LD_INT 0
71540: ST_TO_ADDR
// if GetTaskList ( sci ) then
71541: LD_VAR 0 1
71545: PPUSH
71546: CALL_OW 437
71550: IFFALSE 71598
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71552: LD_VAR 0 1
71556: PPUSH
71557: CALL_OW 437
71561: PUSH
71562: LD_INT 1
71564: ARRAY
71565: PUSH
71566: LD_INT 1
71568: ARRAY
71569: PUSH
71570: LD_STRING l
71572: EQUAL
71573: IFFALSE 71598
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71575: LD_ADDR_VAR 0 2
71579: PUSH
71580: LD_VAR 0 1
71584: PPUSH
71585: CALL_OW 437
71589: PUSH
71590: LD_INT 1
71592: ARRAY
71593: PUSH
71594: LD_INT 4
71596: ARRAY
71597: ST_TO_ADDR
// end ;
71598: LD_VAR 0 2
71602: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71603: LD_INT 0
71605: PPUSH
71606: PPUSH
71607: PPUSH
71608: PPUSH
// if not base_units then
71609: LD_VAR 0 1
71613: NOT
71614: IFFALSE 71618
// exit ;
71616: GO 71705
// result := false ;
71618: LD_ADDR_VAR 0 2
71622: PUSH
71623: LD_INT 0
71625: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71626: LD_ADDR_VAR 0 5
71630: PUSH
71631: LD_VAR 0 1
71635: PPUSH
71636: LD_INT 21
71638: PUSH
71639: LD_INT 3
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PPUSH
71646: CALL_OW 72
71650: ST_TO_ADDR
// if not tmp then
71651: LD_VAR 0 5
71655: NOT
71656: IFFALSE 71660
// exit ;
71658: GO 71705
// for i in tmp do
71660: LD_ADDR_VAR 0 3
71664: PUSH
71665: LD_VAR 0 5
71669: PUSH
71670: FOR_IN
71671: IFFALSE 71703
// begin result := EnemyInRange ( i , 22 ) ;
71673: LD_ADDR_VAR 0 2
71677: PUSH
71678: LD_VAR 0 3
71682: PPUSH
71683: LD_INT 22
71685: PPUSH
71686: CALL 69283 0 2
71690: ST_TO_ADDR
// if result then
71691: LD_VAR 0 2
71695: IFFALSE 71701
// exit ;
71697: POP
71698: POP
71699: GO 71705
// end ;
71701: GO 71670
71703: POP
71704: POP
// end ;
71705: LD_VAR 0 2
71709: RET
// export function FilterByTag ( units , tag ) ; begin
71710: LD_INT 0
71712: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71713: LD_ADDR_VAR 0 3
71717: PUSH
71718: LD_VAR 0 1
71722: PPUSH
71723: LD_INT 120
71725: PUSH
71726: LD_VAR 0 2
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PPUSH
71735: CALL_OW 72
71739: ST_TO_ADDR
// end ;
71740: LD_VAR 0 3
71744: RET
// export function IsDriver ( un ) ; begin
71745: LD_INT 0
71747: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71748: LD_ADDR_VAR 0 2
71752: PUSH
71753: LD_VAR 0 1
71757: PUSH
71758: LD_INT 55
71760: PUSH
71761: EMPTY
71762: LIST
71763: PPUSH
71764: CALL_OW 69
71768: IN
71769: ST_TO_ADDR
// end ;
71770: LD_VAR 0 2
71774: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71775: LD_INT 0
71777: PPUSH
71778: PPUSH
// list := [ ] ;
71779: LD_ADDR_VAR 0 5
71783: PUSH
71784: EMPTY
71785: ST_TO_ADDR
// case d of 0 :
71786: LD_VAR 0 3
71790: PUSH
71791: LD_INT 0
71793: DOUBLE
71794: EQUAL
71795: IFTRUE 71799
71797: GO 71932
71799: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71800: LD_ADDR_VAR 0 5
71804: PUSH
71805: LD_VAR 0 1
71809: PUSH
71810: LD_INT 4
71812: MINUS
71813: PUSH
71814: LD_VAR 0 2
71818: PUSH
71819: LD_INT 4
71821: MINUS
71822: PUSH
71823: LD_INT 2
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: LIST
71830: PUSH
71831: LD_VAR 0 1
71835: PUSH
71836: LD_INT 3
71838: MINUS
71839: PUSH
71840: LD_VAR 0 2
71844: PUSH
71845: LD_INT 1
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: LIST
71852: PUSH
71853: LD_VAR 0 1
71857: PUSH
71858: LD_INT 4
71860: PLUS
71861: PUSH
71862: LD_VAR 0 2
71866: PUSH
71867: LD_INT 4
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: LIST
71874: PUSH
71875: LD_VAR 0 1
71879: PUSH
71880: LD_INT 3
71882: PLUS
71883: PUSH
71884: LD_VAR 0 2
71888: PUSH
71889: LD_INT 3
71891: PLUS
71892: PUSH
71893: LD_INT 5
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: LIST
71900: PUSH
71901: LD_VAR 0 1
71905: PUSH
71906: LD_VAR 0 2
71910: PUSH
71911: LD_INT 4
71913: PLUS
71914: PUSH
71915: LD_INT 0
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: ST_TO_ADDR
// end ; 1 :
71930: GO 72630
71932: LD_INT 1
71934: DOUBLE
71935: EQUAL
71936: IFTRUE 71940
71938: GO 72073
71940: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71941: LD_ADDR_VAR 0 5
71945: PUSH
71946: LD_VAR 0 1
71950: PUSH
71951: LD_VAR 0 2
71955: PUSH
71956: LD_INT 4
71958: MINUS
71959: PUSH
71960: LD_INT 3
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: LIST
71967: PUSH
71968: LD_VAR 0 1
71972: PUSH
71973: LD_INT 3
71975: MINUS
71976: PUSH
71977: LD_VAR 0 2
71981: PUSH
71982: LD_INT 3
71984: MINUS
71985: PUSH
71986: LD_INT 2
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: LIST
71993: PUSH
71994: LD_VAR 0 1
71998: PUSH
71999: LD_INT 4
72001: MINUS
72002: PUSH
72003: LD_VAR 0 2
72007: PUSH
72008: LD_INT 1
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: LIST
72015: PUSH
72016: LD_VAR 0 1
72020: PUSH
72021: LD_VAR 0 2
72025: PUSH
72026: LD_INT 3
72028: PLUS
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: LIST
72037: PUSH
72038: LD_VAR 0 1
72042: PUSH
72043: LD_INT 4
72045: PLUS
72046: PUSH
72047: LD_VAR 0 2
72051: PUSH
72052: LD_INT 4
72054: PLUS
72055: PUSH
72056: LD_INT 5
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: LIST
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: ST_TO_ADDR
// end ; 2 :
72071: GO 72630
72073: LD_INT 2
72075: DOUBLE
72076: EQUAL
72077: IFTRUE 72081
72079: GO 72210
72081: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72082: LD_ADDR_VAR 0 5
72086: PUSH
72087: LD_VAR 0 1
72091: PUSH
72092: LD_VAR 0 2
72096: PUSH
72097: LD_INT 3
72099: MINUS
72100: PUSH
72101: LD_INT 3
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: PUSH
72109: LD_VAR 0 1
72113: PUSH
72114: LD_INT 4
72116: PLUS
72117: PUSH
72118: LD_VAR 0 2
72122: PUSH
72123: LD_INT 4
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: LIST
72130: PUSH
72131: LD_VAR 0 1
72135: PUSH
72136: LD_VAR 0 2
72140: PUSH
72141: LD_INT 4
72143: PLUS
72144: PUSH
72145: LD_INT 0
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: LIST
72152: PUSH
72153: LD_VAR 0 1
72157: PUSH
72158: LD_INT 3
72160: MINUS
72161: PUSH
72162: LD_VAR 0 2
72166: PUSH
72167: LD_INT 1
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: LIST
72174: PUSH
72175: LD_VAR 0 1
72179: PUSH
72180: LD_INT 4
72182: MINUS
72183: PUSH
72184: LD_VAR 0 2
72188: PUSH
72189: LD_INT 4
72191: MINUS
72192: PUSH
72193: LD_INT 2
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: LIST
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: ST_TO_ADDR
// end ; 3 :
72208: GO 72630
72210: LD_INT 3
72212: DOUBLE
72213: EQUAL
72214: IFTRUE 72218
72216: GO 72351
72218: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72219: LD_ADDR_VAR 0 5
72223: PUSH
72224: LD_VAR 0 1
72228: PUSH
72229: LD_INT 3
72231: PLUS
72232: PUSH
72233: LD_VAR 0 2
72237: PUSH
72238: LD_INT 4
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: LIST
72245: PUSH
72246: LD_VAR 0 1
72250: PUSH
72251: LD_INT 4
72253: PLUS
72254: PUSH
72255: LD_VAR 0 2
72259: PUSH
72260: LD_INT 4
72262: PLUS
72263: PUSH
72264: LD_INT 5
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: LIST
72271: PUSH
72272: LD_VAR 0 1
72276: PUSH
72277: LD_INT 4
72279: MINUS
72280: PUSH
72281: LD_VAR 0 2
72285: PUSH
72286: LD_INT 1
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: LIST
72293: PUSH
72294: LD_VAR 0 1
72298: PUSH
72299: LD_VAR 0 2
72303: PUSH
72304: LD_INT 4
72306: MINUS
72307: PUSH
72308: LD_INT 3
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: LIST
72315: PUSH
72316: LD_VAR 0 1
72320: PUSH
72321: LD_INT 3
72323: MINUS
72324: PUSH
72325: LD_VAR 0 2
72329: PUSH
72330: LD_INT 3
72332: MINUS
72333: PUSH
72334: LD_INT 2
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: LIST
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: ST_TO_ADDR
// end ; 4 :
72349: GO 72630
72351: LD_INT 4
72353: DOUBLE
72354: EQUAL
72355: IFTRUE 72359
72357: GO 72492
72359: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72360: LD_ADDR_VAR 0 5
72364: PUSH
72365: LD_VAR 0 1
72369: PUSH
72370: LD_VAR 0 2
72374: PUSH
72375: LD_INT 4
72377: PLUS
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: LIST
72386: PUSH
72387: LD_VAR 0 1
72391: PUSH
72392: LD_INT 3
72394: PLUS
72395: PUSH
72396: LD_VAR 0 2
72400: PUSH
72401: LD_INT 3
72403: PLUS
72404: PUSH
72405: LD_INT 5
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: LIST
72412: PUSH
72413: LD_VAR 0 1
72417: PUSH
72418: LD_INT 4
72420: PLUS
72421: PUSH
72422: LD_VAR 0 2
72426: PUSH
72427: LD_INT 4
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: LIST
72434: PUSH
72435: LD_VAR 0 1
72439: PUSH
72440: LD_VAR 0 2
72444: PUSH
72445: LD_INT 3
72447: MINUS
72448: PUSH
72449: LD_INT 3
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: LIST
72456: PUSH
72457: LD_VAR 0 1
72461: PUSH
72462: LD_INT 4
72464: MINUS
72465: PUSH
72466: LD_VAR 0 2
72470: PUSH
72471: LD_INT 4
72473: MINUS
72474: PUSH
72475: LD_INT 2
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: LIST
72482: PUSH
72483: EMPTY
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: ST_TO_ADDR
// end ; 5 :
72490: GO 72630
72492: LD_INT 5
72494: DOUBLE
72495: EQUAL
72496: IFTRUE 72500
72498: GO 72629
72500: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72501: LD_ADDR_VAR 0 5
72505: PUSH
72506: LD_VAR 0 1
72510: PUSH
72511: LD_INT 4
72513: MINUS
72514: PUSH
72515: LD_VAR 0 2
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: LIST
72527: PUSH
72528: LD_VAR 0 1
72532: PUSH
72533: LD_VAR 0 2
72537: PUSH
72538: LD_INT 4
72540: MINUS
72541: PUSH
72542: LD_INT 3
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: LIST
72549: PUSH
72550: LD_VAR 0 1
72554: PUSH
72555: LD_INT 4
72557: PLUS
72558: PUSH
72559: LD_VAR 0 2
72563: PUSH
72564: LD_INT 4
72566: PLUS
72567: PUSH
72568: LD_INT 5
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: LIST
72575: PUSH
72576: LD_VAR 0 1
72580: PUSH
72581: LD_INT 3
72583: PLUS
72584: PUSH
72585: LD_VAR 0 2
72589: PUSH
72590: LD_INT 4
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: LIST
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_VAR 0 2
72607: PUSH
72608: LD_INT 3
72610: PLUS
72611: PUSH
72612: LD_INT 0
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: LIST
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: ST_TO_ADDR
// end ; end ;
72627: GO 72630
72629: POP
// result := list ;
72630: LD_ADDR_VAR 0 4
72634: PUSH
72635: LD_VAR 0 5
72639: ST_TO_ADDR
// end ;
72640: LD_VAR 0 4
72644: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72645: LD_INT 0
72647: PPUSH
72648: PPUSH
72649: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72650: LD_VAR 0 1
72654: NOT
72655: PUSH
72656: LD_VAR 0 2
72660: PUSH
72661: LD_INT 1
72663: PUSH
72664: LD_INT 2
72666: PUSH
72667: LD_INT 3
72669: PUSH
72670: LD_INT 4
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: IN
72679: NOT
72680: OR
72681: IFFALSE 72685
// exit ;
72683: GO 72768
// tmp := [ ] ;
72685: LD_ADDR_VAR 0 5
72689: PUSH
72690: EMPTY
72691: ST_TO_ADDR
// for i in units do
72692: LD_ADDR_VAR 0 4
72696: PUSH
72697: LD_VAR 0 1
72701: PUSH
72702: FOR_IN
72703: IFFALSE 72737
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72705: LD_ADDR_VAR 0 5
72709: PUSH
72710: LD_VAR 0 5
72714: PPUSH
72715: LD_VAR 0 4
72719: PPUSH
72720: LD_VAR 0 2
72724: PPUSH
72725: CALL_OW 259
72729: PPUSH
72730: CALL 74141 0 2
72734: ST_TO_ADDR
72735: GO 72702
72737: POP
72738: POP
// if not tmp then
72739: LD_VAR 0 5
72743: NOT
72744: IFFALSE 72748
// exit ;
72746: GO 72768
// result := SortListByListDesc ( units , tmp ) ;
72748: LD_ADDR_VAR 0 3
72752: PUSH
72753: LD_VAR 0 1
72757: PPUSH
72758: LD_VAR 0 5
72762: PPUSH
72763: CALL_OW 77
72767: ST_TO_ADDR
// end ;
72768: LD_VAR 0 3
72772: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72773: LD_INT 0
72775: PPUSH
72776: PPUSH
72777: PPUSH
// result := false ;
72778: LD_ADDR_VAR 0 3
72782: PUSH
72783: LD_INT 0
72785: ST_TO_ADDR
// if not building then
72786: LD_VAR 0 2
72790: NOT
72791: IFFALSE 72795
// exit ;
72793: GO 72933
// x := GetX ( building ) ;
72795: LD_ADDR_VAR 0 4
72799: PUSH
72800: LD_VAR 0 2
72804: PPUSH
72805: CALL_OW 250
72809: ST_TO_ADDR
// y := GetY ( building ) ;
72810: LD_ADDR_VAR 0 5
72814: PUSH
72815: LD_VAR 0 2
72819: PPUSH
72820: CALL_OW 251
72824: ST_TO_ADDR
// if not x or not y then
72825: LD_VAR 0 4
72829: NOT
72830: PUSH
72831: LD_VAR 0 5
72835: NOT
72836: OR
72837: IFFALSE 72841
// exit ;
72839: GO 72933
// if GetTaskList ( unit ) then
72841: LD_VAR 0 1
72845: PPUSH
72846: CALL_OW 437
72850: IFFALSE 72933
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72852: LD_STRING e
72854: PUSH
72855: LD_VAR 0 1
72859: PPUSH
72860: CALL_OW 437
72864: PUSH
72865: LD_INT 1
72867: ARRAY
72868: PUSH
72869: LD_INT 1
72871: ARRAY
72872: EQUAL
72873: PUSH
72874: LD_VAR 0 4
72878: PUSH
72879: LD_VAR 0 1
72883: PPUSH
72884: CALL_OW 437
72888: PUSH
72889: LD_INT 1
72891: ARRAY
72892: PUSH
72893: LD_INT 2
72895: ARRAY
72896: EQUAL
72897: AND
72898: PUSH
72899: LD_VAR 0 5
72903: PUSH
72904: LD_VAR 0 1
72908: PPUSH
72909: CALL_OW 437
72913: PUSH
72914: LD_INT 1
72916: ARRAY
72917: PUSH
72918: LD_INT 3
72920: ARRAY
72921: EQUAL
72922: AND
72923: IFFALSE 72933
// result := true end ;
72925: LD_ADDR_VAR 0 3
72929: PUSH
72930: LD_INT 1
72932: ST_TO_ADDR
// end ;
72933: LD_VAR 0 3
72937: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72938: LD_INT 0
72940: PPUSH
// result := false ;
72941: LD_ADDR_VAR 0 4
72945: PUSH
72946: LD_INT 0
72948: ST_TO_ADDR
// if GetTaskList ( unit ) then
72949: LD_VAR 0 1
72953: PPUSH
72954: CALL_OW 437
72958: IFFALSE 73041
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72960: LD_STRING M
72962: PUSH
72963: LD_VAR 0 1
72967: PPUSH
72968: CALL_OW 437
72972: PUSH
72973: LD_INT 1
72975: ARRAY
72976: PUSH
72977: LD_INT 1
72979: ARRAY
72980: EQUAL
72981: PUSH
72982: LD_VAR 0 2
72986: PUSH
72987: LD_VAR 0 1
72991: PPUSH
72992: CALL_OW 437
72996: PUSH
72997: LD_INT 1
72999: ARRAY
73000: PUSH
73001: LD_INT 2
73003: ARRAY
73004: EQUAL
73005: AND
73006: PUSH
73007: LD_VAR 0 3
73011: PUSH
73012: LD_VAR 0 1
73016: PPUSH
73017: CALL_OW 437
73021: PUSH
73022: LD_INT 1
73024: ARRAY
73025: PUSH
73026: LD_INT 3
73028: ARRAY
73029: EQUAL
73030: AND
73031: IFFALSE 73041
// result := true ;
73033: LD_ADDR_VAR 0 4
73037: PUSH
73038: LD_INT 1
73040: ST_TO_ADDR
// end ; end ;
73041: LD_VAR 0 4
73045: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73046: LD_INT 0
73048: PPUSH
73049: PPUSH
73050: PPUSH
73051: PPUSH
// if not unit or not area then
73052: LD_VAR 0 1
73056: NOT
73057: PUSH
73058: LD_VAR 0 2
73062: NOT
73063: OR
73064: IFFALSE 73068
// exit ;
73066: GO 73244
// tmp := AreaToList ( area , i ) ;
73068: LD_ADDR_VAR 0 6
73072: PUSH
73073: LD_VAR 0 2
73077: PPUSH
73078: LD_VAR 0 5
73082: PPUSH
73083: CALL_OW 517
73087: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73088: LD_ADDR_VAR 0 5
73092: PUSH
73093: DOUBLE
73094: LD_INT 1
73096: DEC
73097: ST_TO_ADDR
73098: LD_VAR 0 6
73102: PUSH
73103: LD_INT 1
73105: ARRAY
73106: PUSH
73107: FOR_TO
73108: IFFALSE 73242
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73110: LD_ADDR_VAR 0 7
73114: PUSH
73115: LD_VAR 0 6
73119: PUSH
73120: LD_INT 1
73122: ARRAY
73123: PUSH
73124: LD_VAR 0 5
73128: ARRAY
73129: PUSH
73130: LD_VAR 0 6
73134: PUSH
73135: LD_INT 2
73137: ARRAY
73138: PUSH
73139: LD_VAR 0 5
73143: ARRAY
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73149: LD_INT 92
73151: PUSH
73152: LD_VAR 0 7
73156: PUSH
73157: LD_INT 1
73159: ARRAY
73160: PUSH
73161: LD_VAR 0 7
73165: PUSH
73166: LD_INT 2
73168: ARRAY
73169: PUSH
73170: LD_INT 2
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: PPUSH
73179: CALL_OW 69
73183: PUSH
73184: LD_INT 0
73186: EQUAL
73187: IFFALSE 73240
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73189: LD_VAR 0 1
73193: PPUSH
73194: LD_VAR 0 7
73198: PUSH
73199: LD_INT 1
73201: ARRAY
73202: PPUSH
73203: LD_VAR 0 7
73207: PUSH
73208: LD_INT 2
73210: ARRAY
73211: PPUSH
73212: LD_VAR 0 3
73216: PPUSH
73217: CALL_OW 48
// result := IsPlaced ( unit ) ;
73221: LD_ADDR_VAR 0 4
73225: PUSH
73226: LD_VAR 0 1
73230: PPUSH
73231: CALL_OW 305
73235: ST_TO_ADDR
// exit ;
73236: POP
73237: POP
73238: GO 73244
// end ; end ;
73240: GO 73107
73242: POP
73243: POP
// end ;
73244: LD_VAR 0 4
73248: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73249: LD_INT 0
73251: PPUSH
73252: PPUSH
73253: PPUSH
// if not side or side > 8 then
73254: LD_VAR 0 1
73258: NOT
73259: PUSH
73260: LD_VAR 0 1
73264: PUSH
73265: LD_INT 8
73267: GREATER
73268: OR
73269: IFFALSE 73273
// exit ;
73271: GO 73460
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73273: LD_ADDR_VAR 0 4
73277: PUSH
73278: LD_INT 22
73280: PUSH
73281: LD_VAR 0 1
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 21
73292: PUSH
73293: LD_INT 3
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PPUSH
73304: CALL_OW 69
73308: ST_TO_ADDR
// if not tmp then
73309: LD_VAR 0 4
73313: NOT
73314: IFFALSE 73318
// exit ;
73316: GO 73460
// enable_addtolog := true ;
73318: LD_ADDR_OWVAR 81
73322: PUSH
73323: LD_INT 1
73325: ST_TO_ADDR
// AddToLog ( [ ) ;
73326: LD_STRING [
73328: PPUSH
73329: CALL_OW 561
// for i in tmp do
73333: LD_ADDR_VAR 0 3
73337: PUSH
73338: LD_VAR 0 4
73342: PUSH
73343: FOR_IN
73344: IFFALSE 73451
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73346: LD_STRING [
73348: PUSH
73349: LD_VAR 0 3
73353: PPUSH
73354: CALL_OW 266
73358: STR
73359: PUSH
73360: LD_STRING , 
73362: STR
73363: PUSH
73364: LD_VAR 0 3
73368: PPUSH
73369: CALL_OW 250
73373: STR
73374: PUSH
73375: LD_STRING , 
73377: STR
73378: PUSH
73379: LD_VAR 0 3
73383: PPUSH
73384: CALL_OW 251
73388: STR
73389: PUSH
73390: LD_STRING , 
73392: STR
73393: PUSH
73394: LD_VAR 0 3
73398: PPUSH
73399: CALL_OW 254
73403: STR
73404: PUSH
73405: LD_STRING , 
73407: STR
73408: PUSH
73409: LD_VAR 0 3
73413: PPUSH
73414: LD_INT 1
73416: PPUSH
73417: CALL_OW 268
73421: STR
73422: PUSH
73423: LD_STRING , 
73425: STR
73426: PUSH
73427: LD_VAR 0 3
73431: PPUSH
73432: LD_INT 2
73434: PPUSH
73435: CALL_OW 268
73439: STR
73440: PUSH
73441: LD_STRING ],
73443: STR
73444: PPUSH
73445: CALL_OW 561
// end ;
73449: GO 73343
73451: POP
73452: POP
// AddToLog ( ]; ) ;
73453: LD_STRING ];
73455: PPUSH
73456: CALL_OW 561
// end ;
73460: LD_VAR 0 2
73464: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73465: LD_INT 0
73467: PPUSH
73468: PPUSH
73469: PPUSH
73470: PPUSH
73471: PPUSH
// if not area or not rate or not max then
73472: LD_VAR 0 1
73476: NOT
73477: PUSH
73478: LD_VAR 0 2
73482: NOT
73483: OR
73484: PUSH
73485: LD_VAR 0 4
73489: NOT
73490: OR
73491: IFFALSE 73495
// exit ;
73493: GO 73684
// while 1 do
73495: LD_INT 1
73497: IFFALSE 73684
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73499: LD_ADDR_VAR 0 9
73503: PUSH
73504: LD_VAR 0 1
73508: PPUSH
73509: LD_INT 1
73511: PPUSH
73512: CALL_OW 287
73516: PUSH
73517: LD_INT 10
73519: MUL
73520: ST_TO_ADDR
// r := rate / 10 ;
73521: LD_ADDR_VAR 0 7
73525: PUSH
73526: LD_VAR 0 2
73530: PUSH
73531: LD_INT 10
73533: DIVREAL
73534: ST_TO_ADDR
// time := 1 1$00 ;
73535: LD_ADDR_VAR 0 8
73539: PUSH
73540: LD_INT 2100
73542: ST_TO_ADDR
// if amount < min then
73543: LD_VAR 0 9
73547: PUSH
73548: LD_VAR 0 3
73552: LESS
73553: IFFALSE 73571
// r := r * 2 else
73555: LD_ADDR_VAR 0 7
73559: PUSH
73560: LD_VAR 0 7
73564: PUSH
73565: LD_INT 2
73567: MUL
73568: ST_TO_ADDR
73569: GO 73597
// if amount > max then
73571: LD_VAR 0 9
73575: PUSH
73576: LD_VAR 0 4
73580: GREATER
73581: IFFALSE 73597
// r := r / 2 ;
73583: LD_ADDR_VAR 0 7
73587: PUSH
73588: LD_VAR 0 7
73592: PUSH
73593: LD_INT 2
73595: DIVREAL
73596: ST_TO_ADDR
// time := time / r ;
73597: LD_ADDR_VAR 0 8
73601: PUSH
73602: LD_VAR 0 8
73606: PUSH
73607: LD_VAR 0 7
73611: DIVREAL
73612: ST_TO_ADDR
// if time < 0 then
73613: LD_VAR 0 8
73617: PUSH
73618: LD_INT 0
73620: LESS
73621: IFFALSE 73638
// time := time * - 1 ;
73623: LD_ADDR_VAR 0 8
73627: PUSH
73628: LD_VAR 0 8
73632: PUSH
73633: LD_INT 1
73635: NEG
73636: MUL
73637: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73638: LD_VAR 0 8
73642: PUSH
73643: LD_INT 35
73645: PPUSH
73646: LD_INT 875
73648: PPUSH
73649: CALL_OW 12
73653: PLUS
73654: PPUSH
73655: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73659: LD_INT 1
73661: PPUSH
73662: LD_INT 5
73664: PPUSH
73665: CALL_OW 12
73669: PPUSH
73670: LD_VAR 0 1
73674: PPUSH
73675: LD_INT 1
73677: PPUSH
73678: CALL_OW 55
// end ;
73682: GO 73495
// end ;
73684: LD_VAR 0 5
73688: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73689: LD_INT 0
73691: PPUSH
73692: PPUSH
73693: PPUSH
73694: PPUSH
73695: PPUSH
73696: PPUSH
73697: PPUSH
73698: PPUSH
// if not turrets or not factories then
73699: LD_VAR 0 1
73703: NOT
73704: PUSH
73705: LD_VAR 0 2
73709: NOT
73710: OR
73711: IFFALSE 73715
// exit ;
73713: GO 74022
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73715: LD_ADDR_VAR 0 10
73719: PUSH
73720: LD_INT 5
73722: PUSH
73723: LD_INT 6
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: LD_INT 2
73732: PUSH
73733: LD_INT 4
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: LD_INT 3
73742: PUSH
73743: LD_INT 5
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 24
73757: PUSH
73758: LD_INT 25
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 23
73767: PUSH
73768: LD_INT 27
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: PUSH
73779: LD_INT 42
73781: PUSH
73782: LD_INT 43
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PUSH
73789: LD_INT 44
73791: PUSH
73792: LD_INT 46
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: PUSH
73799: LD_INT 45
73801: PUSH
73802: LD_INT 47
73804: PUSH
73805: EMPTY
73806: LIST
73807: LIST
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: LIST
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: LIST
73818: ST_TO_ADDR
// result := [ ] ;
73819: LD_ADDR_VAR 0 3
73823: PUSH
73824: EMPTY
73825: ST_TO_ADDR
// for i in turrets do
73826: LD_ADDR_VAR 0 4
73830: PUSH
73831: LD_VAR 0 1
73835: PUSH
73836: FOR_IN
73837: IFFALSE 74020
// begin nat := GetNation ( i ) ;
73839: LD_ADDR_VAR 0 7
73843: PUSH
73844: LD_VAR 0 4
73848: PPUSH
73849: CALL_OW 248
73853: ST_TO_ADDR
// weapon := 0 ;
73854: LD_ADDR_VAR 0 8
73858: PUSH
73859: LD_INT 0
73861: ST_TO_ADDR
// if not nat then
73862: LD_VAR 0 7
73866: NOT
73867: IFFALSE 73871
// continue ;
73869: GO 73836
// for j in list [ nat ] do
73871: LD_ADDR_VAR 0 5
73875: PUSH
73876: LD_VAR 0 10
73880: PUSH
73881: LD_VAR 0 7
73885: ARRAY
73886: PUSH
73887: FOR_IN
73888: IFFALSE 73929
// if GetBWeapon ( i ) = j [ 1 ] then
73890: LD_VAR 0 4
73894: PPUSH
73895: CALL_OW 269
73899: PUSH
73900: LD_VAR 0 5
73904: PUSH
73905: LD_INT 1
73907: ARRAY
73908: EQUAL
73909: IFFALSE 73927
// begin weapon := j [ 2 ] ;
73911: LD_ADDR_VAR 0 8
73915: PUSH
73916: LD_VAR 0 5
73920: PUSH
73921: LD_INT 2
73923: ARRAY
73924: ST_TO_ADDR
// break ;
73925: GO 73929
// end ;
73927: GO 73887
73929: POP
73930: POP
// if not weapon then
73931: LD_VAR 0 8
73935: NOT
73936: IFFALSE 73940
// continue ;
73938: GO 73836
// for k in factories do
73940: LD_ADDR_VAR 0 6
73944: PUSH
73945: LD_VAR 0 2
73949: PUSH
73950: FOR_IN
73951: IFFALSE 74016
// begin weapons := AvailableWeaponList ( k ) ;
73953: LD_ADDR_VAR 0 9
73957: PUSH
73958: LD_VAR 0 6
73962: PPUSH
73963: CALL_OW 478
73967: ST_TO_ADDR
// if not weapons then
73968: LD_VAR 0 9
73972: NOT
73973: IFFALSE 73977
// continue ;
73975: GO 73950
// if weapon in weapons then
73977: LD_VAR 0 8
73981: PUSH
73982: LD_VAR 0 9
73986: IN
73987: IFFALSE 74014
// begin result := [ i , weapon ] ;
73989: LD_ADDR_VAR 0 3
73993: PUSH
73994: LD_VAR 0 4
73998: PUSH
73999: LD_VAR 0 8
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: ST_TO_ADDR
// exit ;
74008: POP
74009: POP
74010: POP
74011: POP
74012: GO 74022
// end ; end ;
74014: GO 73950
74016: POP
74017: POP
// end ;
74018: GO 73836
74020: POP
74021: POP
// end ;
74022: LD_VAR 0 3
74026: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74027: LD_INT 0
74029: PPUSH
// if not side or side > 8 then
74030: LD_VAR 0 3
74034: NOT
74035: PUSH
74036: LD_VAR 0 3
74040: PUSH
74041: LD_INT 8
74043: GREATER
74044: OR
74045: IFFALSE 74049
// exit ;
74047: GO 74108
// if not range then
74049: LD_VAR 0 4
74053: NOT
74054: IFFALSE 74065
// range := - 12 ;
74056: LD_ADDR_VAR 0 4
74060: PUSH
74061: LD_INT 12
74063: NEG
74064: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74065: LD_VAR 0 1
74069: PPUSH
74070: LD_VAR 0 2
74074: PPUSH
74075: LD_VAR 0 3
74079: PPUSH
74080: LD_VAR 0 4
74084: PPUSH
74085: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74089: LD_VAR 0 1
74093: PPUSH
74094: LD_VAR 0 2
74098: PPUSH
74099: LD_VAR 0 3
74103: PPUSH
74104: CALL_OW 331
// end ;
74108: LD_VAR 0 5
74112: RET
// export function Video ( mode ) ; begin
74113: LD_INT 0
74115: PPUSH
// ingame_video = mode ;
74116: LD_ADDR_OWVAR 52
74120: PUSH
74121: LD_VAR 0 1
74125: ST_TO_ADDR
// interface_hidden = mode ;
74126: LD_ADDR_OWVAR 54
74130: PUSH
74131: LD_VAR 0 1
74135: ST_TO_ADDR
// end ;
74136: LD_VAR 0 2
74140: RET
// export function Join ( array , element ) ; begin
74141: LD_INT 0
74143: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74144: LD_ADDR_VAR 0 3
74148: PUSH
74149: LD_VAR 0 1
74153: PPUSH
74154: LD_VAR 0 1
74158: PUSH
74159: LD_INT 1
74161: PLUS
74162: PPUSH
74163: LD_VAR 0 2
74167: PPUSH
74168: CALL_OW 1
74172: ST_TO_ADDR
// end ;
74173: LD_VAR 0 3
74177: RET
// export function JoinUnion ( array , element ) ; begin
74178: LD_INT 0
74180: PPUSH
// result := array union element ;
74181: LD_ADDR_VAR 0 3
74185: PUSH
74186: LD_VAR 0 1
74190: PUSH
74191: LD_VAR 0 2
74195: UNION
74196: ST_TO_ADDR
// end ;
74197: LD_VAR 0 3
74201: RET
// export function GetBehemoths ( side ) ; begin
74202: LD_INT 0
74204: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74205: LD_ADDR_VAR 0 2
74209: PUSH
74210: LD_INT 22
74212: PUSH
74213: LD_VAR 0 1
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 31
74224: PUSH
74225: LD_INT 25
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PPUSH
74236: CALL_OW 69
74240: ST_TO_ADDR
// end ;
74241: LD_VAR 0 2
74245: RET
// export function Shuffle ( array ) ; var i , index ; begin
74246: LD_INT 0
74248: PPUSH
74249: PPUSH
74250: PPUSH
// result := [ ] ;
74251: LD_ADDR_VAR 0 2
74255: PUSH
74256: EMPTY
74257: ST_TO_ADDR
// if not array then
74258: LD_VAR 0 1
74262: NOT
74263: IFFALSE 74267
// exit ;
74265: GO 74366
// Randomize ;
74267: CALL_OW 10
// for i = array downto 1 do
74271: LD_ADDR_VAR 0 3
74275: PUSH
74276: DOUBLE
74277: LD_VAR 0 1
74281: INC
74282: ST_TO_ADDR
74283: LD_INT 1
74285: PUSH
74286: FOR_DOWNTO
74287: IFFALSE 74364
// begin index := rand ( 1 , array ) ;
74289: LD_ADDR_VAR 0 4
74293: PUSH
74294: LD_INT 1
74296: PPUSH
74297: LD_VAR 0 1
74301: PPUSH
74302: CALL_OW 12
74306: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74307: LD_ADDR_VAR 0 2
74311: PUSH
74312: LD_VAR 0 2
74316: PPUSH
74317: LD_VAR 0 2
74321: PUSH
74322: LD_INT 1
74324: PLUS
74325: PPUSH
74326: LD_VAR 0 1
74330: PUSH
74331: LD_VAR 0 4
74335: ARRAY
74336: PPUSH
74337: CALL_OW 2
74341: ST_TO_ADDR
// array := Delete ( array , index ) ;
74342: LD_ADDR_VAR 0 1
74346: PUSH
74347: LD_VAR 0 1
74351: PPUSH
74352: LD_VAR 0 4
74356: PPUSH
74357: CALL_OW 3
74361: ST_TO_ADDR
// end ;
74362: GO 74286
74364: POP
74365: POP
// end ;
74366: LD_VAR 0 2
74370: RET
// export function GetBaseMaterials ( base ) ; begin
74371: LD_INT 0
74373: PPUSH
// result := [ 0 , 0 , 0 ] ;
74374: LD_ADDR_VAR 0 2
74378: PUSH
74379: LD_INT 0
74381: PUSH
74382: LD_INT 0
74384: PUSH
74385: LD_INT 0
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: ST_TO_ADDR
// if not base then
74393: LD_VAR 0 1
74397: NOT
74398: IFFALSE 74402
// exit ;
74400: GO 74451
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74402: LD_ADDR_VAR 0 2
74406: PUSH
74407: LD_VAR 0 1
74411: PPUSH
74412: LD_INT 1
74414: PPUSH
74415: CALL_OW 275
74419: PUSH
74420: LD_VAR 0 1
74424: PPUSH
74425: LD_INT 2
74427: PPUSH
74428: CALL_OW 275
74432: PUSH
74433: LD_VAR 0 1
74437: PPUSH
74438: LD_INT 3
74440: PPUSH
74441: CALL_OW 275
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: LIST
74450: ST_TO_ADDR
// end ;
74451: LD_VAR 0 2
74455: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74456: LD_INT 0
74458: PPUSH
74459: PPUSH
// result := array ;
74460: LD_ADDR_VAR 0 3
74464: PUSH
74465: LD_VAR 0 1
74469: ST_TO_ADDR
// if size >= result then
74470: LD_VAR 0 2
74474: PUSH
74475: LD_VAR 0 3
74479: GREATEREQUAL
74480: IFFALSE 74484
// exit ;
74482: GO 74534
// if size then
74484: LD_VAR 0 2
74488: IFFALSE 74534
// for i := array downto size do
74490: LD_ADDR_VAR 0 4
74494: PUSH
74495: DOUBLE
74496: LD_VAR 0 1
74500: INC
74501: ST_TO_ADDR
74502: LD_VAR 0 2
74506: PUSH
74507: FOR_DOWNTO
74508: IFFALSE 74532
// result := Delete ( result , result ) ;
74510: LD_ADDR_VAR 0 3
74514: PUSH
74515: LD_VAR 0 3
74519: PPUSH
74520: LD_VAR 0 3
74524: PPUSH
74525: CALL_OW 3
74529: ST_TO_ADDR
74530: GO 74507
74532: POP
74533: POP
// end ;
74534: LD_VAR 0 3
74538: RET
// export function ComExit ( unit ) ; var tmp ; begin
74539: LD_INT 0
74541: PPUSH
74542: PPUSH
// if not IsInUnit ( unit ) then
74543: LD_VAR 0 1
74547: PPUSH
74548: CALL_OW 310
74552: NOT
74553: IFFALSE 74557
// exit ;
74555: GO 74617
// tmp := IsInUnit ( unit ) ;
74557: LD_ADDR_VAR 0 3
74561: PUSH
74562: LD_VAR 0 1
74566: PPUSH
74567: CALL_OW 310
74571: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74572: LD_VAR 0 3
74576: PPUSH
74577: CALL_OW 247
74581: PUSH
74582: LD_INT 2
74584: EQUAL
74585: IFFALSE 74598
// ComExitVehicle ( unit ) else
74587: LD_VAR 0 1
74591: PPUSH
74592: CALL_OW 121
74596: GO 74607
// ComExitBuilding ( unit ) ;
74598: LD_VAR 0 1
74602: PPUSH
74603: CALL_OW 122
// result := tmp ;
74607: LD_ADDR_VAR 0 2
74611: PUSH
74612: LD_VAR 0 3
74616: ST_TO_ADDR
// end ;
74617: LD_VAR 0 2
74621: RET
// export function ComExitAll ( units ) ; var i ; begin
74622: LD_INT 0
74624: PPUSH
74625: PPUSH
// if not units then
74626: LD_VAR 0 1
74630: NOT
74631: IFFALSE 74635
// exit ;
74633: GO 74661
// for i in units do
74635: LD_ADDR_VAR 0 3
74639: PUSH
74640: LD_VAR 0 1
74644: PUSH
74645: FOR_IN
74646: IFFALSE 74659
// ComExit ( i ) ;
74648: LD_VAR 0 3
74652: PPUSH
74653: CALL 74539 0 1
74657: GO 74645
74659: POP
74660: POP
// end ;
74661: LD_VAR 0 2
74665: RET
// export function ResetHc ; begin
74666: LD_INT 0
74668: PPUSH
// InitHc ;
74669: CALL_OW 19
// hc_importance := 0 ;
74673: LD_ADDR_OWVAR 32
74677: PUSH
74678: LD_INT 0
74680: ST_TO_ADDR
// end ;
74681: LD_VAR 0 1
74685: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74686: LD_INT 0
74688: PPUSH
74689: PPUSH
74690: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74691: LD_ADDR_VAR 0 6
74695: PUSH
74696: LD_VAR 0 1
74700: PUSH
74701: LD_VAR 0 3
74705: PLUS
74706: PUSH
74707: LD_INT 2
74709: DIV
74710: ST_TO_ADDR
// if _x < 0 then
74711: LD_VAR 0 6
74715: PUSH
74716: LD_INT 0
74718: LESS
74719: IFFALSE 74736
// _x := _x * - 1 ;
74721: LD_ADDR_VAR 0 6
74725: PUSH
74726: LD_VAR 0 6
74730: PUSH
74731: LD_INT 1
74733: NEG
74734: MUL
74735: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74736: LD_ADDR_VAR 0 7
74740: PUSH
74741: LD_VAR 0 2
74745: PUSH
74746: LD_VAR 0 4
74750: PLUS
74751: PUSH
74752: LD_INT 2
74754: DIV
74755: ST_TO_ADDR
// if _y < 0 then
74756: LD_VAR 0 7
74760: PUSH
74761: LD_INT 0
74763: LESS
74764: IFFALSE 74781
// _y := _y * - 1 ;
74766: LD_ADDR_VAR 0 7
74770: PUSH
74771: LD_VAR 0 7
74775: PUSH
74776: LD_INT 1
74778: NEG
74779: MUL
74780: ST_TO_ADDR
// result := [ _x , _y ] ;
74781: LD_ADDR_VAR 0 5
74785: PUSH
74786: LD_VAR 0 6
74790: PUSH
74791: LD_VAR 0 7
74795: PUSH
74796: EMPTY
74797: LIST
74798: LIST
74799: ST_TO_ADDR
// end ;
74800: LD_VAR 0 5
74804: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74805: LD_INT 0
74807: PPUSH
74808: PPUSH
74809: PPUSH
74810: PPUSH
// task := GetTaskList ( unit ) ;
74811: LD_ADDR_VAR 0 7
74815: PUSH
74816: LD_VAR 0 1
74820: PPUSH
74821: CALL_OW 437
74825: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74826: LD_VAR 0 7
74830: NOT
74831: PUSH
74832: LD_VAR 0 1
74836: PPUSH
74837: LD_VAR 0 2
74841: PPUSH
74842: CALL_OW 308
74846: NOT
74847: AND
74848: IFFALSE 74852
// exit ;
74850: GO 74970
// if IsInArea ( unit , area ) then
74852: LD_VAR 0 1
74856: PPUSH
74857: LD_VAR 0 2
74861: PPUSH
74862: CALL_OW 308
74866: IFFALSE 74884
// begin ComMoveToArea ( unit , goAway ) ;
74868: LD_VAR 0 1
74872: PPUSH
74873: LD_VAR 0 3
74877: PPUSH
74878: CALL_OW 113
// exit ;
74882: GO 74970
// end ; if task [ 1 ] [ 1 ] <> M then
74884: LD_VAR 0 7
74888: PUSH
74889: LD_INT 1
74891: ARRAY
74892: PUSH
74893: LD_INT 1
74895: ARRAY
74896: PUSH
74897: LD_STRING M
74899: NONEQUAL
74900: IFFALSE 74904
// exit ;
74902: GO 74970
// x := task [ 1 ] [ 2 ] ;
74904: LD_ADDR_VAR 0 5
74908: PUSH
74909: LD_VAR 0 7
74913: PUSH
74914: LD_INT 1
74916: ARRAY
74917: PUSH
74918: LD_INT 2
74920: ARRAY
74921: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74922: LD_ADDR_VAR 0 6
74926: PUSH
74927: LD_VAR 0 7
74931: PUSH
74932: LD_INT 1
74934: ARRAY
74935: PUSH
74936: LD_INT 3
74938: ARRAY
74939: ST_TO_ADDR
// if InArea ( x , y , area ) then
74940: LD_VAR 0 5
74944: PPUSH
74945: LD_VAR 0 6
74949: PPUSH
74950: LD_VAR 0 2
74954: PPUSH
74955: CALL_OW 309
74959: IFFALSE 74970
// ComStop ( unit ) ;
74961: LD_VAR 0 1
74965: PPUSH
74966: CALL_OW 141
// end ;
74970: LD_VAR 0 4
74974: RET
// export function Abs ( value ) ; begin
74975: LD_INT 0
74977: PPUSH
// result := value ;
74978: LD_ADDR_VAR 0 2
74982: PUSH
74983: LD_VAR 0 1
74987: ST_TO_ADDR
// if value < 0 then
74988: LD_VAR 0 1
74992: PUSH
74993: LD_INT 0
74995: LESS
74996: IFFALSE 75013
// result := value * - 1 ;
74998: LD_ADDR_VAR 0 2
75002: PUSH
75003: LD_VAR 0 1
75007: PUSH
75008: LD_INT 1
75010: NEG
75011: MUL
75012: ST_TO_ADDR
// end ;
75013: LD_VAR 0 2
75017: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75018: LD_INT 0
75020: PPUSH
75021: PPUSH
75022: PPUSH
75023: PPUSH
75024: PPUSH
75025: PPUSH
75026: PPUSH
75027: PPUSH
// if not unit or not building then
75028: LD_VAR 0 1
75032: NOT
75033: PUSH
75034: LD_VAR 0 2
75038: NOT
75039: OR
75040: IFFALSE 75044
// exit ;
75042: GO 75270
// x := GetX ( building ) ;
75044: LD_ADDR_VAR 0 4
75048: PUSH
75049: LD_VAR 0 2
75053: PPUSH
75054: CALL_OW 250
75058: ST_TO_ADDR
// y := GetY ( building ) ;
75059: LD_ADDR_VAR 0 6
75063: PUSH
75064: LD_VAR 0 2
75068: PPUSH
75069: CALL_OW 251
75073: ST_TO_ADDR
// d := GetDir ( building ) ;
75074: LD_ADDR_VAR 0 8
75078: PUSH
75079: LD_VAR 0 2
75083: PPUSH
75084: CALL_OW 254
75088: ST_TO_ADDR
// r := 4 ;
75089: LD_ADDR_VAR 0 9
75093: PUSH
75094: LD_INT 4
75096: ST_TO_ADDR
// for i := 1 to 5 do
75097: LD_ADDR_VAR 0 10
75101: PUSH
75102: DOUBLE
75103: LD_INT 1
75105: DEC
75106: ST_TO_ADDR
75107: LD_INT 5
75109: PUSH
75110: FOR_TO
75111: IFFALSE 75268
// begin _x := ShiftX ( x , d , r + i ) ;
75113: LD_ADDR_VAR 0 5
75117: PUSH
75118: LD_VAR 0 4
75122: PPUSH
75123: LD_VAR 0 8
75127: PPUSH
75128: LD_VAR 0 9
75132: PUSH
75133: LD_VAR 0 10
75137: PLUS
75138: PPUSH
75139: CALL_OW 272
75143: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75144: LD_ADDR_VAR 0 7
75148: PUSH
75149: LD_VAR 0 6
75153: PPUSH
75154: LD_VAR 0 8
75158: PPUSH
75159: LD_VAR 0 9
75163: PUSH
75164: LD_VAR 0 10
75168: PLUS
75169: PPUSH
75170: CALL_OW 273
75174: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75175: LD_VAR 0 5
75179: PPUSH
75180: LD_VAR 0 7
75184: PPUSH
75185: CALL_OW 488
75189: PUSH
75190: LD_VAR 0 5
75194: PPUSH
75195: LD_VAR 0 7
75199: PPUSH
75200: CALL_OW 428
75204: PPUSH
75205: CALL_OW 247
75209: PUSH
75210: LD_INT 3
75212: PUSH
75213: LD_INT 2
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: IN
75220: NOT
75221: AND
75222: IFFALSE 75266
// begin ComMoveXY ( unit , _x , _y ) ;
75224: LD_VAR 0 1
75228: PPUSH
75229: LD_VAR 0 5
75233: PPUSH
75234: LD_VAR 0 7
75238: PPUSH
75239: CALL_OW 111
// result := [ _x , _y ] ;
75243: LD_ADDR_VAR 0 3
75247: PUSH
75248: LD_VAR 0 5
75252: PUSH
75253: LD_VAR 0 7
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: ST_TO_ADDR
// exit ;
75262: POP
75263: POP
75264: GO 75270
// end ; end ;
75266: GO 75110
75268: POP
75269: POP
// end ;
75270: LD_VAR 0 3
75274: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75275: LD_INT 0
75277: PPUSH
75278: PPUSH
75279: PPUSH
// result := 0 ;
75280: LD_ADDR_VAR 0 3
75284: PUSH
75285: LD_INT 0
75287: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75288: LD_VAR 0 1
75292: PUSH
75293: LD_INT 0
75295: LESS
75296: PUSH
75297: LD_VAR 0 1
75301: PUSH
75302: LD_INT 8
75304: GREATER
75305: OR
75306: PUSH
75307: LD_VAR 0 2
75311: PUSH
75312: LD_INT 0
75314: LESS
75315: OR
75316: PUSH
75317: LD_VAR 0 2
75321: PUSH
75322: LD_INT 8
75324: GREATER
75325: OR
75326: IFFALSE 75330
// exit ;
75328: GO 75405
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75330: LD_ADDR_VAR 0 4
75334: PUSH
75335: LD_INT 22
75337: PUSH
75338: LD_VAR 0 2
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PPUSH
75347: CALL_OW 69
75351: PUSH
75352: FOR_IN
75353: IFFALSE 75403
// begin un := UnitShoot ( i ) ;
75355: LD_ADDR_VAR 0 5
75359: PUSH
75360: LD_VAR 0 4
75364: PPUSH
75365: CALL_OW 504
75369: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75370: LD_VAR 0 5
75374: PPUSH
75375: CALL_OW 255
75379: PUSH
75380: LD_VAR 0 1
75384: EQUAL
75385: IFFALSE 75401
// begin result := un ;
75387: LD_ADDR_VAR 0 3
75391: PUSH
75392: LD_VAR 0 5
75396: ST_TO_ADDR
// exit ;
75397: POP
75398: POP
75399: GO 75405
// end ; end ;
75401: GO 75352
75403: POP
75404: POP
// end ;
75405: LD_VAR 0 3
75409: RET
// export function GetCargoBay ( units ) ; begin
75410: LD_INT 0
75412: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75413: LD_ADDR_VAR 0 2
75417: PUSH
75418: LD_VAR 0 1
75422: PPUSH
75423: LD_INT 2
75425: PUSH
75426: LD_INT 34
75428: PUSH
75429: LD_INT 12
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 34
75438: PUSH
75439: LD_INT 51
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 34
75448: PUSH
75449: LD_INT 32
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: LD_INT 34
75458: PUSH
75459: LD_INT 89
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: PPUSH
75473: CALL_OW 72
75477: ST_TO_ADDR
// end ;
75478: LD_VAR 0 2
75482: RET
// export function Negate ( value ) ; begin
75483: LD_INT 0
75485: PPUSH
// result := not value ;
75486: LD_ADDR_VAR 0 2
75490: PUSH
75491: LD_VAR 0 1
75495: NOT
75496: ST_TO_ADDR
// end ;
75497: LD_VAR 0 2
75501: RET
// export function Inc ( value ) ; begin
75502: LD_INT 0
75504: PPUSH
// result := value + 1 ;
75505: LD_ADDR_VAR 0 2
75509: PUSH
75510: LD_VAR 0 1
75514: PUSH
75515: LD_INT 1
75517: PLUS
75518: ST_TO_ADDR
// end ;
75519: LD_VAR 0 2
75523: RET
// export function Dec ( value ) ; begin
75524: LD_INT 0
75526: PPUSH
// result := value - 1 ;
75527: LD_ADDR_VAR 0 2
75531: PUSH
75532: LD_VAR 0 1
75536: PUSH
75537: LD_INT 1
75539: MINUS
75540: ST_TO_ADDR
// end ;
75541: LD_VAR 0 2
75545: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75546: LD_INT 0
75548: PPUSH
75549: PPUSH
75550: PPUSH
75551: PPUSH
75552: PPUSH
75553: PPUSH
75554: PPUSH
75555: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75556: LD_VAR 0 1
75560: PPUSH
75561: LD_VAR 0 2
75565: PPUSH
75566: CALL_OW 488
75570: NOT
75571: PUSH
75572: LD_VAR 0 3
75576: PPUSH
75577: LD_VAR 0 4
75581: PPUSH
75582: CALL_OW 488
75586: NOT
75587: OR
75588: IFFALSE 75601
// begin result := - 1 ;
75590: LD_ADDR_VAR 0 5
75594: PUSH
75595: LD_INT 1
75597: NEG
75598: ST_TO_ADDR
// exit ;
75599: GO 75836
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75601: LD_ADDR_VAR 0 12
75605: PUSH
75606: LD_VAR 0 1
75610: PPUSH
75611: LD_VAR 0 2
75615: PPUSH
75616: LD_VAR 0 3
75620: PPUSH
75621: LD_VAR 0 4
75625: PPUSH
75626: CALL 74686 0 4
75630: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75631: LD_ADDR_VAR 0 11
75635: PUSH
75636: LD_VAR 0 1
75640: PPUSH
75641: LD_VAR 0 2
75645: PPUSH
75646: LD_VAR 0 12
75650: PUSH
75651: LD_INT 1
75653: ARRAY
75654: PPUSH
75655: LD_VAR 0 12
75659: PUSH
75660: LD_INT 2
75662: ARRAY
75663: PPUSH
75664: CALL_OW 298
75668: ST_TO_ADDR
// distance := 9999 ;
75669: LD_ADDR_VAR 0 10
75673: PUSH
75674: LD_INT 9999
75676: ST_TO_ADDR
// for i := 0 to 5 do
75677: LD_ADDR_VAR 0 6
75681: PUSH
75682: DOUBLE
75683: LD_INT 0
75685: DEC
75686: ST_TO_ADDR
75687: LD_INT 5
75689: PUSH
75690: FOR_TO
75691: IFFALSE 75834
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75693: LD_ADDR_VAR 0 7
75697: PUSH
75698: LD_VAR 0 1
75702: PPUSH
75703: LD_VAR 0 6
75707: PPUSH
75708: LD_VAR 0 11
75712: PPUSH
75713: CALL_OW 272
75717: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75718: LD_ADDR_VAR 0 8
75722: PUSH
75723: LD_VAR 0 2
75727: PPUSH
75728: LD_VAR 0 6
75732: PPUSH
75733: LD_VAR 0 11
75737: PPUSH
75738: CALL_OW 273
75742: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75743: LD_VAR 0 7
75747: PPUSH
75748: LD_VAR 0 8
75752: PPUSH
75753: CALL_OW 488
75757: NOT
75758: IFFALSE 75762
// continue ;
75760: GO 75690
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75762: LD_ADDR_VAR 0 9
75766: PUSH
75767: LD_VAR 0 12
75771: PUSH
75772: LD_INT 1
75774: ARRAY
75775: PPUSH
75776: LD_VAR 0 12
75780: PUSH
75781: LD_INT 2
75783: ARRAY
75784: PPUSH
75785: LD_VAR 0 7
75789: PPUSH
75790: LD_VAR 0 8
75794: PPUSH
75795: CALL_OW 298
75799: ST_TO_ADDR
// if tmp < distance then
75800: LD_VAR 0 9
75804: PUSH
75805: LD_VAR 0 10
75809: LESS
75810: IFFALSE 75832
// begin result := i ;
75812: LD_ADDR_VAR 0 5
75816: PUSH
75817: LD_VAR 0 6
75821: ST_TO_ADDR
// distance := tmp ;
75822: LD_ADDR_VAR 0 10
75826: PUSH
75827: LD_VAR 0 9
75831: ST_TO_ADDR
// end ; end ;
75832: GO 75690
75834: POP
75835: POP
// end ;
75836: LD_VAR 0 5
75840: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75841: LD_INT 0
75843: PPUSH
75844: PPUSH
// if not driver or not IsInUnit ( driver ) then
75845: LD_VAR 0 1
75849: NOT
75850: PUSH
75851: LD_VAR 0 1
75855: PPUSH
75856: CALL_OW 310
75860: NOT
75861: OR
75862: IFFALSE 75866
// exit ;
75864: GO 75956
// vehicle := IsInUnit ( driver ) ;
75866: LD_ADDR_VAR 0 3
75870: PUSH
75871: LD_VAR 0 1
75875: PPUSH
75876: CALL_OW 310
75880: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75881: LD_VAR 0 1
75885: PPUSH
75886: LD_STRING \
75888: PUSH
75889: LD_INT 0
75891: PUSH
75892: LD_INT 0
75894: PUSH
75895: LD_INT 0
75897: PUSH
75898: LD_INT 0
75900: PUSH
75901: LD_INT 0
75903: PUSH
75904: LD_INT 0
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: PUSH
75916: LD_STRING E
75918: PUSH
75919: LD_INT 0
75921: PUSH
75922: LD_INT 0
75924: PUSH
75925: LD_VAR 0 3
75929: PUSH
75930: LD_INT 0
75932: PUSH
75933: LD_INT 0
75935: PUSH
75936: LD_INT 0
75938: PUSH
75939: EMPTY
75940: LIST
75941: LIST
75942: LIST
75943: LIST
75944: LIST
75945: LIST
75946: LIST
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PPUSH
75952: CALL_OW 446
// end ;
75956: LD_VAR 0 2
75960: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75961: LD_INT 0
75963: PPUSH
75964: PPUSH
// if not driver or not IsInUnit ( driver ) then
75965: LD_VAR 0 1
75969: NOT
75970: PUSH
75971: LD_VAR 0 1
75975: PPUSH
75976: CALL_OW 310
75980: NOT
75981: OR
75982: IFFALSE 75986
// exit ;
75984: GO 76076
// vehicle := IsInUnit ( driver ) ;
75986: LD_ADDR_VAR 0 3
75990: PUSH
75991: LD_VAR 0 1
75995: PPUSH
75996: CALL_OW 310
76000: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76001: LD_VAR 0 1
76005: PPUSH
76006: LD_STRING \
76008: PUSH
76009: LD_INT 0
76011: PUSH
76012: LD_INT 0
76014: PUSH
76015: LD_INT 0
76017: PUSH
76018: LD_INT 0
76020: PUSH
76021: LD_INT 0
76023: PUSH
76024: LD_INT 0
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: PUSH
76036: LD_STRING E
76038: PUSH
76039: LD_INT 0
76041: PUSH
76042: LD_INT 0
76044: PUSH
76045: LD_VAR 0 3
76049: PUSH
76050: LD_INT 0
76052: PUSH
76053: LD_INT 0
76055: PUSH
76056: LD_INT 0
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: PPUSH
76072: CALL_OW 447
// end ;
76076: LD_VAR 0 2
76080: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76081: LD_INT 0
76083: PPUSH
76084: PPUSH
76085: PPUSH
// tmp := [ ] ;
76086: LD_ADDR_VAR 0 5
76090: PUSH
76091: EMPTY
76092: ST_TO_ADDR
// for i in units do
76093: LD_ADDR_VAR 0 4
76097: PUSH
76098: LD_VAR 0 1
76102: PUSH
76103: FOR_IN
76104: IFFALSE 76142
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76106: LD_ADDR_VAR 0 5
76110: PUSH
76111: LD_VAR 0 5
76115: PPUSH
76116: LD_VAR 0 5
76120: PUSH
76121: LD_INT 1
76123: PLUS
76124: PPUSH
76125: LD_VAR 0 4
76129: PPUSH
76130: CALL_OW 256
76134: PPUSH
76135: CALL_OW 2
76139: ST_TO_ADDR
76140: GO 76103
76142: POP
76143: POP
// if not tmp then
76144: LD_VAR 0 5
76148: NOT
76149: IFFALSE 76153
// exit ;
76151: GO 76201
// if asc then
76153: LD_VAR 0 2
76157: IFFALSE 76181
// result := SortListByListAsc ( units , tmp ) else
76159: LD_ADDR_VAR 0 3
76163: PUSH
76164: LD_VAR 0 1
76168: PPUSH
76169: LD_VAR 0 5
76173: PPUSH
76174: CALL_OW 76
76178: ST_TO_ADDR
76179: GO 76201
// result := SortListByListDesc ( units , tmp ) ;
76181: LD_ADDR_VAR 0 3
76185: PUSH
76186: LD_VAR 0 1
76190: PPUSH
76191: LD_VAR 0 5
76195: PPUSH
76196: CALL_OW 77
76200: ST_TO_ADDR
// end ;
76201: LD_VAR 0 3
76205: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76206: LD_INT 0
76208: PPUSH
76209: PPUSH
// task := GetTaskList ( mech ) ;
76210: LD_ADDR_VAR 0 4
76214: PUSH
76215: LD_VAR 0 1
76219: PPUSH
76220: CALL_OW 437
76224: ST_TO_ADDR
// if not task then
76225: LD_VAR 0 4
76229: NOT
76230: IFFALSE 76234
// exit ;
76232: GO 76276
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76234: LD_ADDR_VAR 0 3
76238: PUSH
76239: LD_VAR 0 4
76243: PUSH
76244: LD_INT 1
76246: ARRAY
76247: PUSH
76248: LD_INT 1
76250: ARRAY
76251: PUSH
76252: LD_STRING r
76254: EQUAL
76255: PUSH
76256: LD_VAR 0 4
76260: PUSH
76261: LD_INT 1
76263: ARRAY
76264: PUSH
76265: LD_INT 4
76267: ARRAY
76268: PUSH
76269: LD_VAR 0 2
76273: EQUAL
76274: AND
76275: ST_TO_ADDR
// end ;
76276: LD_VAR 0 3
76280: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76281: LD_INT 0
76283: PPUSH
// SetDir ( unit , d ) ;
76284: LD_VAR 0 1
76288: PPUSH
76289: LD_VAR 0 4
76293: PPUSH
76294: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
76298: LD_ADDR_VAR 0 6
76302: PUSH
76303: LD_VAR 0 1
76307: PPUSH
76308: LD_VAR 0 2
76312: PPUSH
76313: LD_VAR 0 3
76317: PPUSH
76318: LD_VAR 0 5
76322: PPUSH
76323: CALL_OW 48
76327: ST_TO_ADDR
// end ;
76328: LD_VAR 0 6
76332: RET
// export function ToNaturalNumber ( number ) ; begin
76333: LD_INT 0
76335: PPUSH
// result := number div 1 ;
76336: LD_ADDR_VAR 0 2
76340: PUSH
76341: LD_VAR 0 1
76345: PUSH
76346: LD_INT 1
76348: DIV
76349: ST_TO_ADDR
// if number < 0 then
76350: LD_VAR 0 1
76354: PUSH
76355: LD_INT 0
76357: LESS
76358: IFFALSE 76368
// result := 0 ;
76360: LD_ADDR_VAR 0 2
76364: PUSH
76365: LD_INT 0
76367: ST_TO_ADDR
// end ;
76368: LD_VAR 0 2
76372: RET
// export function SortByClass ( units , class ) ; var un ; begin
76373: LD_INT 0
76375: PPUSH
76376: PPUSH
// if not units or not class then
76377: LD_VAR 0 1
76381: NOT
76382: PUSH
76383: LD_VAR 0 2
76387: NOT
76388: OR
76389: IFFALSE 76393
// exit ;
76391: GO 76488
// result := [ ] ;
76393: LD_ADDR_VAR 0 3
76397: PUSH
76398: EMPTY
76399: ST_TO_ADDR
// for un in units do
76400: LD_ADDR_VAR 0 4
76404: PUSH
76405: LD_VAR 0 1
76409: PUSH
76410: FOR_IN
76411: IFFALSE 76486
// if GetClass ( un ) = class then
76413: LD_VAR 0 4
76417: PPUSH
76418: CALL_OW 257
76422: PUSH
76423: LD_VAR 0 2
76427: EQUAL
76428: IFFALSE 76455
// result := Insert ( result , 1 , un ) else
76430: LD_ADDR_VAR 0 3
76434: PUSH
76435: LD_VAR 0 3
76439: PPUSH
76440: LD_INT 1
76442: PPUSH
76443: LD_VAR 0 4
76447: PPUSH
76448: CALL_OW 2
76452: ST_TO_ADDR
76453: GO 76484
// result := Replace ( result , result + 1 , un ) ;
76455: LD_ADDR_VAR 0 3
76459: PUSH
76460: LD_VAR 0 3
76464: PPUSH
76465: LD_VAR 0 3
76469: PUSH
76470: LD_INT 1
76472: PLUS
76473: PPUSH
76474: LD_VAR 0 4
76478: PPUSH
76479: CALL_OW 1
76483: ST_TO_ADDR
76484: GO 76410
76486: POP
76487: POP
// end ;
76488: LD_VAR 0 3
76492: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76493: LD_INT 0
76495: PPUSH
76496: PPUSH
76497: PPUSH
76498: PPUSH
76499: PPUSH
76500: PPUSH
76501: PPUSH
// result := [ ] ;
76502: LD_ADDR_VAR 0 4
76506: PUSH
76507: EMPTY
76508: ST_TO_ADDR
// if x - r < 0 then
76509: LD_VAR 0 1
76513: PUSH
76514: LD_VAR 0 3
76518: MINUS
76519: PUSH
76520: LD_INT 0
76522: LESS
76523: IFFALSE 76535
// min_x := 0 else
76525: LD_ADDR_VAR 0 8
76529: PUSH
76530: LD_INT 0
76532: ST_TO_ADDR
76533: GO 76551
// min_x := x - r ;
76535: LD_ADDR_VAR 0 8
76539: PUSH
76540: LD_VAR 0 1
76544: PUSH
76545: LD_VAR 0 3
76549: MINUS
76550: ST_TO_ADDR
// if y - r < 0 then
76551: LD_VAR 0 2
76555: PUSH
76556: LD_VAR 0 3
76560: MINUS
76561: PUSH
76562: LD_INT 0
76564: LESS
76565: IFFALSE 76577
// min_y := 0 else
76567: LD_ADDR_VAR 0 7
76571: PUSH
76572: LD_INT 0
76574: ST_TO_ADDR
76575: GO 76593
// min_y := y - r ;
76577: LD_ADDR_VAR 0 7
76581: PUSH
76582: LD_VAR 0 2
76586: PUSH
76587: LD_VAR 0 3
76591: MINUS
76592: ST_TO_ADDR
// max_x := x + r ;
76593: LD_ADDR_VAR 0 9
76597: PUSH
76598: LD_VAR 0 1
76602: PUSH
76603: LD_VAR 0 3
76607: PLUS
76608: ST_TO_ADDR
// max_y := y + r ;
76609: LD_ADDR_VAR 0 10
76613: PUSH
76614: LD_VAR 0 2
76618: PUSH
76619: LD_VAR 0 3
76623: PLUS
76624: ST_TO_ADDR
// for _x = min_x to max_x do
76625: LD_ADDR_VAR 0 5
76629: PUSH
76630: DOUBLE
76631: LD_VAR 0 8
76635: DEC
76636: ST_TO_ADDR
76637: LD_VAR 0 9
76641: PUSH
76642: FOR_TO
76643: IFFALSE 76744
// for _y = min_y to max_y do
76645: LD_ADDR_VAR 0 6
76649: PUSH
76650: DOUBLE
76651: LD_VAR 0 7
76655: DEC
76656: ST_TO_ADDR
76657: LD_VAR 0 10
76661: PUSH
76662: FOR_TO
76663: IFFALSE 76740
// begin if not ValidHex ( _x , _y ) then
76665: LD_VAR 0 5
76669: PPUSH
76670: LD_VAR 0 6
76674: PPUSH
76675: CALL_OW 488
76679: NOT
76680: IFFALSE 76684
// continue ;
76682: GO 76662
// if GetResourceTypeXY ( _x , _y ) then
76684: LD_VAR 0 5
76688: PPUSH
76689: LD_VAR 0 6
76693: PPUSH
76694: CALL_OW 283
76698: IFFALSE 76738
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76700: LD_ADDR_VAR 0 4
76704: PUSH
76705: LD_VAR 0 4
76709: PPUSH
76710: LD_VAR 0 4
76714: PUSH
76715: LD_INT 1
76717: PLUS
76718: PPUSH
76719: LD_VAR 0 5
76723: PUSH
76724: LD_VAR 0 6
76728: PUSH
76729: EMPTY
76730: LIST
76731: LIST
76732: PPUSH
76733: CALL_OW 1
76737: ST_TO_ADDR
// end ;
76738: GO 76662
76740: POP
76741: POP
76742: GO 76642
76744: POP
76745: POP
// end ;
76746: LD_VAR 0 4
76750: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76751: LD_INT 0
76753: PPUSH
76754: PPUSH
76755: PPUSH
76756: PPUSH
76757: PPUSH
76758: PPUSH
76759: PPUSH
76760: PPUSH
// if not units then
76761: LD_VAR 0 1
76765: NOT
76766: IFFALSE 76770
// exit ;
76768: GO 77298
// result := UnitFilter ( units , [ f_ok ] ) ;
76770: LD_ADDR_VAR 0 3
76774: PUSH
76775: LD_VAR 0 1
76779: PPUSH
76780: LD_INT 50
76782: PUSH
76783: EMPTY
76784: LIST
76785: PPUSH
76786: CALL_OW 72
76790: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76791: LD_ADDR_VAR 0 8
76795: PUSH
76796: LD_VAR 0 1
76800: PUSH
76801: LD_INT 1
76803: ARRAY
76804: PPUSH
76805: CALL_OW 255
76809: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76810: LD_ADDR_VAR 0 10
76814: PUSH
76815: LD_INT 29
76817: PUSH
76818: LD_INT 91
76820: PUSH
76821: LD_INT 49
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: LIST
76828: ST_TO_ADDR
// if not result then
76829: LD_VAR 0 3
76833: NOT
76834: IFFALSE 76838
// exit ;
76836: GO 77298
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76838: LD_ADDR_VAR 0 5
76842: PUSH
76843: LD_INT 81
76845: PUSH
76846: LD_VAR 0 8
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PPUSH
76855: CALL_OW 69
76859: ST_TO_ADDR
// for i in result do
76860: LD_ADDR_VAR 0 4
76864: PUSH
76865: LD_VAR 0 3
76869: PUSH
76870: FOR_IN
76871: IFFALSE 77296
// begin tag := GetTag ( i ) + 1 ;
76873: LD_ADDR_VAR 0 9
76877: PUSH
76878: LD_VAR 0 4
76882: PPUSH
76883: CALL_OW 110
76887: PUSH
76888: LD_INT 1
76890: PLUS
76891: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
76892: LD_ADDR_VAR 0 7
76896: PUSH
76897: LD_VAR 0 4
76901: PPUSH
76902: CALL_OW 250
76906: PPUSH
76907: LD_VAR 0 4
76911: PPUSH
76912: CALL_OW 251
76916: PPUSH
76917: LD_INT 4
76919: PPUSH
76920: CALL 76493 0 3
76924: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
76925: LD_VAR 0 4
76929: PPUSH
76930: CALL_OW 247
76934: PUSH
76935: LD_INT 2
76937: EQUAL
76938: PUSH
76939: LD_VAR 0 7
76943: PUSH
76944: LD_INT 2
76946: GREATER
76947: AND
76948: PUSH
76949: LD_VAR 0 4
76953: PPUSH
76954: CALL_OW 264
76958: PUSH
76959: LD_VAR 0 10
76963: IN
76964: NOT
76965: AND
76966: IFFALSE 77005
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76968: LD_VAR 0 4
76972: PPUSH
76973: LD_VAR 0 7
76977: PUSH
76978: LD_INT 1
76980: ARRAY
76981: PUSH
76982: LD_INT 1
76984: ARRAY
76985: PPUSH
76986: LD_VAR 0 7
76990: PUSH
76991: LD_INT 1
76993: ARRAY
76994: PUSH
76995: LD_INT 2
76997: ARRAY
76998: PPUSH
76999: CALL_OW 116
77003: GO 77294
// if path > tag then
77005: LD_VAR 0 2
77009: PUSH
77010: LD_VAR 0 9
77014: GREATER
77015: IFFALSE 77223
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77017: LD_ADDR_VAR 0 6
77021: PUSH
77022: LD_VAR 0 5
77026: PPUSH
77027: LD_INT 91
77029: PUSH
77030: LD_VAR 0 4
77034: PUSH
77035: LD_INT 8
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: LIST
77042: PPUSH
77043: CALL_OW 72
77047: ST_TO_ADDR
// if nearEnemy then
77048: LD_VAR 0 6
77052: IFFALSE 77121
// begin if GetWeapon ( i ) = ru_time_lapser then
77054: LD_VAR 0 4
77058: PPUSH
77059: CALL_OW 264
77063: PUSH
77064: LD_INT 49
77066: EQUAL
77067: IFFALSE 77095
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77069: LD_VAR 0 4
77073: PPUSH
77074: LD_VAR 0 6
77078: PPUSH
77079: LD_VAR 0 4
77083: PPUSH
77084: CALL_OW 74
77088: PPUSH
77089: CALL_OW 112
77093: GO 77119
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77095: LD_VAR 0 4
77099: PPUSH
77100: LD_VAR 0 6
77104: PPUSH
77105: LD_VAR 0 4
77109: PPUSH
77110: CALL_OW 74
77114: PPUSH
77115: CALL 78369 0 2
// end else
77119: GO 77221
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77121: LD_VAR 0 4
77125: PPUSH
77126: LD_VAR 0 2
77130: PUSH
77131: LD_VAR 0 9
77135: ARRAY
77136: PUSH
77137: LD_INT 1
77139: ARRAY
77140: PPUSH
77141: LD_VAR 0 2
77145: PUSH
77146: LD_VAR 0 9
77150: ARRAY
77151: PUSH
77152: LD_INT 2
77154: ARRAY
77155: PPUSH
77156: CALL_OW 297
77160: PUSH
77161: LD_INT 6
77163: GREATER
77164: IFFALSE 77207
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77166: LD_VAR 0 4
77170: PPUSH
77171: LD_VAR 0 2
77175: PUSH
77176: LD_VAR 0 9
77180: ARRAY
77181: PUSH
77182: LD_INT 1
77184: ARRAY
77185: PPUSH
77186: LD_VAR 0 2
77190: PUSH
77191: LD_VAR 0 9
77195: ARRAY
77196: PUSH
77197: LD_INT 2
77199: ARRAY
77200: PPUSH
77201: CALL_OW 114
77205: GO 77221
// SetTag ( i , tag ) ;
77207: LD_VAR 0 4
77211: PPUSH
77212: LD_VAR 0 9
77216: PPUSH
77217: CALL_OW 109
// end else
77221: GO 77294
// if enemy then
77223: LD_VAR 0 5
77227: IFFALSE 77294
// begin if GetWeapon ( i ) = ru_time_lapser then
77229: LD_VAR 0 4
77233: PPUSH
77234: CALL_OW 264
77238: PUSH
77239: LD_INT 49
77241: EQUAL
77242: IFFALSE 77270
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77244: LD_VAR 0 4
77248: PPUSH
77249: LD_VAR 0 5
77253: PPUSH
77254: LD_VAR 0 4
77258: PPUSH
77259: CALL_OW 74
77263: PPUSH
77264: CALL_OW 112
77268: GO 77294
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77270: LD_VAR 0 4
77274: PPUSH
77275: LD_VAR 0 5
77279: PPUSH
77280: LD_VAR 0 4
77284: PPUSH
77285: CALL_OW 74
77289: PPUSH
77290: CALL 78369 0 2
// end ; end ;
77294: GO 76870
77296: POP
77297: POP
// end ;
77298: LD_VAR 0 3
77302: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77303: LD_INT 0
77305: PPUSH
77306: PPUSH
77307: PPUSH
// if not unit or IsInUnit ( unit ) then
77308: LD_VAR 0 1
77312: NOT
77313: PUSH
77314: LD_VAR 0 1
77318: PPUSH
77319: CALL_OW 310
77323: OR
77324: IFFALSE 77328
// exit ;
77326: GO 77419
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77328: LD_ADDR_VAR 0 4
77332: PUSH
77333: LD_VAR 0 1
77337: PPUSH
77338: CALL_OW 250
77342: PPUSH
77343: LD_VAR 0 2
77347: PPUSH
77348: LD_INT 1
77350: PPUSH
77351: CALL_OW 272
77355: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77356: LD_ADDR_VAR 0 5
77360: PUSH
77361: LD_VAR 0 1
77365: PPUSH
77366: CALL_OW 251
77370: PPUSH
77371: LD_VAR 0 2
77375: PPUSH
77376: LD_INT 1
77378: PPUSH
77379: CALL_OW 273
77383: ST_TO_ADDR
// if ValidHex ( x , y ) then
77384: LD_VAR 0 4
77388: PPUSH
77389: LD_VAR 0 5
77393: PPUSH
77394: CALL_OW 488
77398: IFFALSE 77419
// ComTurnXY ( unit , x , y ) ;
77400: LD_VAR 0 1
77404: PPUSH
77405: LD_VAR 0 4
77409: PPUSH
77410: LD_VAR 0 5
77414: PPUSH
77415: CALL_OW 118
// end ;
77419: LD_VAR 0 3
77423: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77424: LD_INT 0
77426: PPUSH
77427: PPUSH
// result := false ;
77428: LD_ADDR_VAR 0 3
77432: PUSH
77433: LD_INT 0
77435: ST_TO_ADDR
// if not units then
77436: LD_VAR 0 2
77440: NOT
77441: IFFALSE 77445
// exit ;
77443: GO 77490
// for i in units do
77445: LD_ADDR_VAR 0 4
77449: PUSH
77450: LD_VAR 0 2
77454: PUSH
77455: FOR_IN
77456: IFFALSE 77488
// if See ( side , i ) then
77458: LD_VAR 0 1
77462: PPUSH
77463: LD_VAR 0 4
77467: PPUSH
77468: CALL_OW 292
77472: IFFALSE 77486
// begin result := true ;
77474: LD_ADDR_VAR 0 3
77478: PUSH
77479: LD_INT 1
77481: ST_TO_ADDR
// exit ;
77482: POP
77483: POP
77484: GO 77490
// end ;
77486: GO 77455
77488: POP
77489: POP
// end ;
77490: LD_VAR 0 3
77494: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77495: LD_INT 0
77497: PPUSH
77498: PPUSH
77499: PPUSH
77500: PPUSH
// if not unit or not points then
77501: LD_VAR 0 1
77505: NOT
77506: PUSH
77507: LD_VAR 0 2
77511: NOT
77512: OR
77513: IFFALSE 77517
// exit ;
77515: GO 77607
// dist := 99999 ;
77517: LD_ADDR_VAR 0 5
77521: PUSH
77522: LD_INT 99999
77524: ST_TO_ADDR
// for i in points do
77525: LD_ADDR_VAR 0 4
77529: PUSH
77530: LD_VAR 0 2
77534: PUSH
77535: FOR_IN
77536: IFFALSE 77605
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77538: LD_ADDR_VAR 0 6
77542: PUSH
77543: LD_VAR 0 1
77547: PPUSH
77548: LD_VAR 0 4
77552: PUSH
77553: LD_INT 1
77555: ARRAY
77556: PPUSH
77557: LD_VAR 0 4
77561: PUSH
77562: LD_INT 2
77564: ARRAY
77565: PPUSH
77566: CALL_OW 297
77570: ST_TO_ADDR
// if tmpDist < dist then
77571: LD_VAR 0 6
77575: PUSH
77576: LD_VAR 0 5
77580: LESS
77581: IFFALSE 77603
// begin result := i ;
77583: LD_ADDR_VAR 0 3
77587: PUSH
77588: LD_VAR 0 4
77592: ST_TO_ADDR
// dist := tmpDist ;
77593: LD_ADDR_VAR 0 5
77597: PUSH
77598: LD_VAR 0 6
77602: ST_TO_ADDR
// end ; end ;
77603: GO 77535
77605: POP
77606: POP
// end ;
77607: LD_VAR 0 3
77611: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77612: LD_INT 0
77614: PPUSH
// uc_side := side ;
77615: LD_ADDR_OWVAR 20
77619: PUSH
77620: LD_VAR 0 1
77624: ST_TO_ADDR
// uc_nation := 3 ;
77625: LD_ADDR_OWVAR 21
77629: PUSH
77630: LD_INT 3
77632: ST_TO_ADDR
// vc_chassis := 25 ;
77633: LD_ADDR_OWVAR 37
77637: PUSH
77638: LD_INT 25
77640: ST_TO_ADDR
// vc_engine := engine_siberite ;
77641: LD_ADDR_OWVAR 39
77645: PUSH
77646: LD_INT 3
77648: ST_TO_ADDR
// vc_control := control_computer ;
77649: LD_ADDR_OWVAR 38
77653: PUSH
77654: LD_INT 3
77656: ST_TO_ADDR
// vc_weapon := 59 ;
77657: LD_ADDR_OWVAR 40
77661: PUSH
77662: LD_INT 59
77664: ST_TO_ADDR
// result := CreateVehicle ;
77665: LD_ADDR_VAR 0 5
77669: PUSH
77670: CALL_OW 45
77674: ST_TO_ADDR
// SetDir ( result , d ) ;
77675: LD_VAR 0 5
77679: PPUSH
77680: LD_VAR 0 4
77684: PPUSH
77685: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77689: LD_VAR 0 5
77693: PPUSH
77694: LD_VAR 0 2
77698: PPUSH
77699: LD_VAR 0 3
77703: PPUSH
77704: LD_INT 0
77706: PPUSH
77707: CALL_OW 48
// end ;
77711: LD_VAR 0 5
77715: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77716: LD_INT 0
77718: PPUSH
77719: PPUSH
77720: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77721: LD_ADDR_VAR 0 2
77725: PUSH
77726: LD_INT 0
77728: PUSH
77729: LD_INT 0
77731: PUSH
77732: LD_INT 0
77734: PUSH
77735: LD_INT 0
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: LIST
77742: LIST
77743: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77744: LD_VAR 0 1
77748: NOT
77749: PUSH
77750: LD_VAR 0 1
77754: PPUSH
77755: CALL_OW 264
77759: PUSH
77760: LD_INT 12
77762: PUSH
77763: LD_INT 51
77765: PUSH
77766: LD_INT 32
77768: PUSH
77769: LD_INT 89
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: LIST
77776: LIST
77777: IN
77778: NOT
77779: OR
77780: IFFALSE 77784
// exit ;
77782: GO 77882
// for i := 1 to 3 do
77784: LD_ADDR_VAR 0 3
77788: PUSH
77789: DOUBLE
77790: LD_INT 1
77792: DEC
77793: ST_TO_ADDR
77794: LD_INT 3
77796: PUSH
77797: FOR_TO
77798: IFFALSE 77880
// begin tmp := GetCargo ( cargo , i ) ;
77800: LD_ADDR_VAR 0 4
77804: PUSH
77805: LD_VAR 0 1
77809: PPUSH
77810: LD_VAR 0 3
77814: PPUSH
77815: CALL_OW 289
77819: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77820: LD_ADDR_VAR 0 2
77824: PUSH
77825: LD_VAR 0 2
77829: PPUSH
77830: LD_VAR 0 3
77834: PPUSH
77835: LD_VAR 0 4
77839: PPUSH
77840: CALL_OW 1
77844: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77845: LD_ADDR_VAR 0 2
77849: PUSH
77850: LD_VAR 0 2
77854: PPUSH
77855: LD_INT 4
77857: PPUSH
77858: LD_VAR 0 2
77862: PUSH
77863: LD_INT 4
77865: ARRAY
77866: PUSH
77867: LD_VAR 0 4
77871: PLUS
77872: PPUSH
77873: CALL_OW 1
77877: ST_TO_ADDR
// end ;
77878: GO 77797
77880: POP
77881: POP
// end ;
77882: LD_VAR 0 2
77886: RET
// export function Length ( array ) ; begin
77887: LD_INT 0
77889: PPUSH
// result := array + 0 ;
77890: LD_ADDR_VAR 0 2
77894: PUSH
77895: LD_VAR 0 1
77899: PUSH
77900: LD_INT 0
77902: PLUS
77903: ST_TO_ADDR
// end ;
77904: LD_VAR 0 2
77908: RET
// export function PrepareArray ( array ) ; begin
77909: LD_INT 0
77911: PPUSH
// result := array diff 0 ;
77912: LD_ADDR_VAR 0 2
77916: PUSH
77917: LD_VAR 0 1
77921: PUSH
77922: LD_INT 0
77924: DIFF
77925: ST_TO_ADDR
// if not result [ 1 ] then
77926: LD_VAR 0 2
77930: PUSH
77931: LD_INT 1
77933: ARRAY
77934: NOT
77935: IFFALSE 77955
// result := Delete ( result , 1 ) ;
77937: LD_ADDR_VAR 0 2
77941: PUSH
77942: LD_VAR 0 2
77946: PPUSH
77947: LD_INT 1
77949: PPUSH
77950: CALL_OW 3
77954: ST_TO_ADDR
// end ;
77955: LD_VAR 0 2
77959: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77960: LD_INT 0
77962: PPUSH
77963: PPUSH
77964: PPUSH
77965: PPUSH
// sibRocketRange := 25 ;
77966: LD_ADDR_VAR 0 6
77970: PUSH
77971: LD_INT 25
77973: ST_TO_ADDR
// result := false ;
77974: LD_ADDR_VAR 0 4
77978: PUSH
77979: LD_INT 0
77981: ST_TO_ADDR
// for i := 0 to 5 do
77982: LD_ADDR_VAR 0 5
77986: PUSH
77987: DOUBLE
77988: LD_INT 0
77990: DEC
77991: ST_TO_ADDR
77992: LD_INT 5
77994: PUSH
77995: FOR_TO
77996: IFFALSE 78063
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77998: LD_VAR 0 1
78002: PPUSH
78003: LD_VAR 0 5
78007: PPUSH
78008: LD_VAR 0 6
78012: PPUSH
78013: CALL_OW 272
78017: PPUSH
78018: LD_VAR 0 2
78022: PPUSH
78023: LD_VAR 0 5
78027: PPUSH
78028: LD_VAR 0 6
78032: PPUSH
78033: CALL_OW 273
78037: PPUSH
78038: LD_VAR 0 3
78042: PPUSH
78043: CALL_OW 309
78047: IFFALSE 78061
// begin result := true ;
78049: LD_ADDR_VAR 0 4
78053: PUSH
78054: LD_INT 1
78056: ST_TO_ADDR
// exit ;
78057: POP
78058: POP
78059: GO 78065
// end ;
78061: GO 77995
78063: POP
78064: POP
// end ;
78065: LD_VAR 0 4
78069: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
78070: LD_INT 0
78072: PPUSH
78073: PPUSH
78074: PPUSH
// if btype = b_depot then
78075: LD_VAR 0 2
78079: PUSH
78080: LD_INT 0
78082: EQUAL
78083: IFFALSE 78095
// begin result := true ;
78085: LD_ADDR_VAR 0 3
78089: PUSH
78090: LD_INT 1
78092: ST_TO_ADDR
// exit ;
78093: GO 78211
// end ; pom := GetBase ( depot ) ;
78095: LD_ADDR_VAR 0 4
78099: PUSH
78100: LD_VAR 0 1
78104: PPUSH
78105: CALL_OW 274
78109: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
78110: LD_ADDR_VAR 0 5
78114: PUSH
78115: LD_VAR 0 2
78119: PPUSH
78120: LD_VAR 0 1
78124: PPUSH
78125: CALL_OW 248
78129: PPUSH
78130: CALL_OW 450
78134: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
78135: LD_ADDR_VAR 0 3
78139: PUSH
78140: LD_VAR 0 4
78144: PPUSH
78145: LD_INT 1
78147: PPUSH
78148: CALL_OW 275
78152: PUSH
78153: LD_VAR 0 5
78157: PUSH
78158: LD_INT 1
78160: ARRAY
78161: GREATEREQUAL
78162: PUSH
78163: LD_VAR 0 4
78167: PPUSH
78168: LD_INT 2
78170: PPUSH
78171: CALL_OW 275
78175: PUSH
78176: LD_VAR 0 5
78180: PUSH
78181: LD_INT 2
78183: ARRAY
78184: GREATEREQUAL
78185: AND
78186: PUSH
78187: LD_VAR 0 4
78191: PPUSH
78192: LD_INT 3
78194: PPUSH
78195: CALL_OW 275
78199: PUSH
78200: LD_VAR 0 5
78204: PUSH
78205: LD_INT 3
78207: ARRAY
78208: GREATEREQUAL
78209: AND
78210: ST_TO_ADDR
// end ;
78211: LD_VAR 0 3
78215: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78216: LD_INT 0
78218: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78219: LD_VAR 0 1
78223: PPUSH
78224: LD_VAR 0 2
78228: PPUSH
78229: LD_INT 0
78231: PPUSH
78232: LD_INT 0
78234: PPUSH
78235: LD_INT 1
78237: PPUSH
78238: LD_INT 0
78240: PPUSH
78241: CALL_OW 587
// end ;
78245: LD_VAR 0 3
78249: RET
// export function CenterOnNow ( unit ) ; begin
78250: LD_INT 0
78252: PPUSH
// result := IsInUnit ( unit ) ;
78253: LD_ADDR_VAR 0 2
78257: PUSH
78258: LD_VAR 0 1
78262: PPUSH
78263: CALL_OW 310
78267: ST_TO_ADDR
// if not result then
78268: LD_VAR 0 2
78272: NOT
78273: IFFALSE 78285
// result := unit ;
78275: LD_ADDR_VAR 0 2
78279: PUSH
78280: LD_VAR 0 1
78284: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78285: LD_VAR 0 1
78289: PPUSH
78290: CALL_OW 87
// end ;
78294: LD_VAR 0 2
78298: RET
// export function ComMoveHex ( unit , hex ) ; begin
78299: LD_INT 0
78301: PPUSH
// if not hex then
78302: LD_VAR 0 2
78306: NOT
78307: IFFALSE 78311
// exit ;
78309: GO 78364
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78311: LD_VAR 0 2
78315: PUSH
78316: LD_INT 1
78318: ARRAY
78319: PPUSH
78320: LD_VAR 0 2
78324: PUSH
78325: LD_INT 2
78327: ARRAY
78328: PPUSH
78329: CALL_OW 428
78333: IFFALSE 78337
// exit ;
78335: GO 78364
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78337: LD_VAR 0 1
78341: PPUSH
78342: LD_VAR 0 2
78346: PUSH
78347: LD_INT 1
78349: ARRAY
78350: PPUSH
78351: LD_VAR 0 2
78355: PUSH
78356: LD_INT 2
78358: ARRAY
78359: PPUSH
78360: CALL_OW 111
// end ;
78364: LD_VAR 0 3
78368: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78369: LD_INT 0
78371: PPUSH
78372: PPUSH
78373: PPUSH
// if not unit or not enemy then
78374: LD_VAR 0 1
78378: NOT
78379: PUSH
78380: LD_VAR 0 2
78384: NOT
78385: OR
78386: IFFALSE 78390
// exit ;
78388: GO 78514
// x := GetX ( enemy ) ;
78390: LD_ADDR_VAR 0 4
78394: PUSH
78395: LD_VAR 0 2
78399: PPUSH
78400: CALL_OW 250
78404: ST_TO_ADDR
// y := GetY ( enemy ) ;
78405: LD_ADDR_VAR 0 5
78409: PUSH
78410: LD_VAR 0 2
78414: PPUSH
78415: CALL_OW 251
78419: ST_TO_ADDR
// if ValidHex ( x , y ) then
78420: LD_VAR 0 4
78424: PPUSH
78425: LD_VAR 0 5
78429: PPUSH
78430: CALL_OW 488
78434: IFFALSE 78514
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
78436: LD_VAR 0 2
78440: PPUSH
78441: CALL_OW 247
78445: PUSH
78446: LD_INT 3
78448: PUSH
78449: LD_INT 2
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: IN
78456: PUSH
78457: LD_VAR 0 1
78461: PPUSH
78462: CALL_OW 255
78466: PPUSH
78467: LD_VAR 0 2
78471: PPUSH
78472: CALL_OW 292
78476: OR
78477: IFFALSE 78495
// ComAttackUnit ( unit , enemy ) else
78479: LD_VAR 0 1
78483: PPUSH
78484: LD_VAR 0 2
78488: PPUSH
78489: CALL_OW 115
78493: GO 78514
// ComAgressiveMove ( unit , x , y ) ;
78495: LD_VAR 0 1
78499: PPUSH
78500: LD_VAR 0 4
78504: PPUSH
78505: LD_VAR 0 5
78509: PPUSH
78510: CALL_OW 114
// end ;
78514: LD_VAR 0 3
78518: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78519: LD_INT 0
78521: PPUSH
78522: PPUSH
78523: PPUSH
// list := AreaToList ( area , 0 ) ;
78524: LD_ADDR_VAR 0 5
78528: PUSH
78529: LD_VAR 0 1
78533: PPUSH
78534: LD_INT 0
78536: PPUSH
78537: CALL_OW 517
78541: ST_TO_ADDR
// if not list then
78542: LD_VAR 0 5
78546: NOT
78547: IFFALSE 78551
// exit ;
78549: GO 78681
// if all then
78551: LD_VAR 0 2
78555: IFFALSE 78643
// begin for i := 1 to list [ 1 ] do
78557: LD_ADDR_VAR 0 4
78561: PUSH
78562: DOUBLE
78563: LD_INT 1
78565: DEC
78566: ST_TO_ADDR
78567: LD_VAR 0 5
78571: PUSH
78572: LD_INT 1
78574: ARRAY
78575: PUSH
78576: FOR_TO
78577: IFFALSE 78639
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78579: LD_ADDR_VAR 0 3
78583: PUSH
78584: LD_VAR 0 3
78588: PPUSH
78589: LD_VAR 0 3
78593: PUSH
78594: LD_INT 1
78596: PLUS
78597: PPUSH
78598: LD_VAR 0 5
78602: PUSH
78603: LD_INT 1
78605: ARRAY
78606: PUSH
78607: LD_VAR 0 4
78611: ARRAY
78612: PUSH
78613: LD_VAR 0 5
78617: PUSH
78618: LD_INT 2
78620: ARRAY
78621: PUSH
78622: LD_VAR 0 4
78626: ARRAY
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PPUSH
78632: CALL_OW 1
78636: ST_TO_ADDR
78637: GO 78576
78639: POP
78640: POP
// exit ;
78641: GO 78681
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
78643: LD_ADDR_VAR 0 3
78647: PUSH
78648: LD_VAR 0 5
78652: PUSH
78653: LD_INT 1
78655: ARRAY
78656: PUSH
78657: LD_INT 1
78659: ARRAY
78660: PUSH
78661: LD_VAR 0 5
78665: PUSH
78666: LD_INT 2
78668: ARRAY
78669: PUSH
78670: LD_INT 1
78672: ARRAY
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: PUSH
78678: EMPTY
78679: LIST
78680: ST_TO_ADDR
// end ;
78681: LD_VAR 0 3
78685: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
78686: LD_INT 0
78688: PPUSH
78689: PPUSH
// list := AreaToList ( area , 0 ) ;
78690: LD_ADDR_VAR 0 4
78694: PUSH
78695: LD_VAR 0 1
78699: PPUSH
78700: LD_INT 0
78702: PPUSH
78703: CALL_OW 517
78707: ST_TO_ADDR
// if not list then
78708: LD_VAR 0 4
78712: NOT
78713: IFFALSE 78717
// exit ;
78715: GO 78758
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78717: LD_ADDR_VAR 0 3
78721: PUSH
78722: LD_VAR 0 4
78726: PUSH
78727: LD_INT 1
78729: ARRAY
78730: PUSH
78731: LD_INT 1
78733: ARRAY
78734: PUSH
78735: LD_VAR 0 4
78739: PUSH
78740: LD_INT 2
78742: ARRAY
78743: PUSH
78744: LD_INT 1
78746: ARRAY
78747: PUSH
78748: LD_VAR 0 2
78752: PUSH
78753: EMPTY
78754: LIST
78755: LIST
78756: LIST
78757: ST_TO_ADDR
// end ;
78758: LD_VAR 0 3
78762: RET
// export function First ( array ) ; begin
78763: LD_INT 0
78765: PPUSH
// if not array then
78766: LD_VAR 0 1
78770: NOT
78771: IFFALSE 78775
// exit ;
78773: GO 78789
// result := array [ 1 ] ;
78775: LD_ADDR_VAR 0 2
78779: PUSH
78780: LD_VAR 0 1
78784: PUSH
78785: LD_INT 1
78787: ARRAY
78788: ST_TO_ADDR
// end ;
78789: LD_VAR 0 2
78793: RET
// export function Last ( array ) ; begin
78794: LD_INT 0
78796: PPUSH
// if not array then
78797: LD_VAR 0 1
78801: NOT
78802: IFFALSE 78806
// exit ;
78804: GO 78822
// result := array [ array ] ;
78806: LD_ADDR_VAR 0 2
78810: PUSH
78811: LD_VAR 0 1
78815: PUSH
78816: LD_VAR 0 1
78820: ARRAY
78821: ST_TO_ADDR
// end ;
78822: LD_VAR 0 2
78826: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
78827: LD_INT 0
78829: PPUSH
78830: PPUSH
// result := [ ] ;
78831: LD_ADDR_VAR 0 5
78835: PUSH
78836: EMPTY
78837: ST_TO_ADDR
// if not array then
78838: LD_VAR 0 1
78842: NOT
78843: IFFALSE 78847
// exit ;
78845: GO 78959
// for i := 1 to array do
78847: LD_ADDR_VAR 0 6
78851: PUSH
78852: DOUBLE
78853: LD_INT 1
78855: DEC
78856: ST_TO_ADDR
78857: LD_VAR 0 1
78861: PUSH
78862: FOR_TO
78863: IFFALSE 78957
// if array [ i ] [ index ] = value then
78865: LD_VAR 0 1
78869: PUSH
78870: LD_VAR 0 6
78874: ARRAY
78875: PUSH
78876: LD_VAR 0 2
78880: ARRAY
78881: PUSH
78882: LD_VAR 0 3
78886: EQUAL
78887: IFFALSE 78955
// begin if indexColumn then
78889: LD_VAR 0 4
78893: IFFALSE 78929
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78895: LD_ADDR_VAR 0 5
78899: PUSH
78900: LD_VAR 0 5
78904: PPUSH
78905: LD_VAR 0 1
78909: PUSH
78910: LD_VAR 0 6
78914: ARRAY
78915: PUSH
78916: LD_VAR 0 4
78920: ARRAY
78921: PPUSH
78922: CALL 74141 0 2
78926: ST_TO_ADDR
78927: GO 78955
// result := Join ( result , array [ i ] ) ;
78929: LD_ADDR_VAR 0 5
78933: PUSH
78934: LD_VAR 0 5
78938: PPUSH
78939: LD_VAR 0 1
78943: PUSH
78944: LD_VAR 0 6
78948: ARRAY
78949: PPUSH
78950: CALL 74141 0 2
78954: ST_TO_ADDR
// end ;
78955: GO 78862
78957: POP
78958: POP
// end ;
78959: LD_VAR 0 5
78963: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78964: LD_INT 0
78966: PPUSH
// if not vehicles or not parkingPoint then
78967: LD_VAR 0 1
78971: NOT
78972: PUSH
78973: LD_VAR 0 2
78977: NOT
78978: OR
78979: IFFALSE 78983
// exit ;
78981: GO 79081
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78983: LD_ADDR_VAR 0 1
78987: PUSH
78988: LD_VAR 0 1
78992: PPUSH
78993: LD_INT 50
78995: PUSH
78996: EMPTY
78997: LIST
78998: PUSH
78999: LD_INT 3
79001: PUSH
79002: LD_INT 92
79004: PUSH
79005: LD_VAR 0 2
79009: PUSH
79010: LD_INT 1
79012: ARRAY
79013: PUSH
79014: LD_VAR 0 2
79018: PUSH
79019: LD_INT 2
79021: ARRAY
79022: PUSH
79023: LD_INT 8
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: LIST
79030: LIST
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PPUSH
79040: CALL_OW 72
79044: ST_TO_ADDR
// if not vehicles then
79045: LD_VAR 0 1
79049: NOT
79050: IFFALSE 79054
// exit ;
79052: GO 79081
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
79054: LD_VAR 0 1
79058: PPUSH
79059: LD_VAR 0 2
79063: PUSH
79064: LD_INT 1
79066: ARRAY
79067: PPUSH
79068: LD_VAR 0 2
79072: PUSH
79073: LD_INT 2
79075: ARRAY
79076: PPUSH
79077: CALL_OW 111
// end ;
79081: LD_VAR 0 3
79085: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
79086: LD_INT 0
79088: PPUSH
79089: PPUSH
79090: PPUSH
// if not side or not area then
79091: LD_VAR 0 1
79095: NOT
79096: PUSH
79097: LD_VAR 0 2
79101: NOT
79102: OR
79103: IFFALSE 79107
// exit ;
79105: GO 79226
// tmp := AreaToList ( area , 0 ) ;
79107: LD_ADDR_VAR 0 5
79111: PUSH
79112: LD_VAR 0 2
79116: PPUSH
79117: LD_INT 0
79119: PPUSH
79120: CALL_OW 517
79124: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
79125: LD_ADDR_VAR 0 4
79129: PUSH
79130: DOUBLE
79131: LD_INT 1
79133: DEC
79134: ST_TO_ADDR
79135: LD_VAR 0 5
79139: PUSH
79140: LD_INT 1
79142: ARRAY
79143: PUSH
79144: FOR_TO
79145: IFFALSE 79224
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
79147: LD_VAR 0 5
79151: PUSH
79152: LD_INT 1
79154: ARRAY
79155: PUSH
79156: LD_VAR 0 4
79160: ARRAY
79161: PPUSH
79162: LD_VAR 0 5
79166: PUSH
79167: LD_INT 2
79169: ARRAY
79170: PUSH
79171: LD_VAR 0 4
79175: ARRAY
79176: PPUSH
79177: CALL_OW 351
79181: IFFALSE 79222
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
79183: LD_VAR 0 5
79187: PUSH
79188: LD_INT 1
79190: ARRAY
79191: PUSH
79192: LD_VAR 0 4
79196: ARRAY
79197: PPUSH
79198: LD_VAR 0 5
79202: PUSH
79203: LD_INT 2
79205: ARRAY
79206: PUSH
79207: LD_VAR 0 4
79211: ARRAY
79212: PPUSH
79213: LD_VAR 0 1
79217: PPUSH
79218: CALL_OW 244
// end ;
79222: GO 79144
79224: POP
79225: POP
// end ; end_of_file
79226: LD_VAR 0 3
79230: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79231: LD_VAR 0 1
79235: PUSH
79236: LD_INT 200
79238: DOUBLE
79239: GREATEREQUAL
79240: IFFALSE 79248
79242: LD_INT 299
79244: DOUBLE
79245: LESSEQUAL
79246: IFTRUE 79250
79248: GO 79282
79250: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79251: LD_VAR 0 1
79255: PPUSH
79256: LD_VAR 0 2
79260: PPUSH
79261: LD_VAR 0 3
79265: PPUSH
79266: LD_VAR 0 4
79270: PPUSH
79271: LD_VAR 0 5
79275: PPUSH
79276: CALL 15700 0 5
79280: GO 79359
79282: LD_INT 300
79284: DOUBLE
79285: GREATEREQUAL
79286: IFFALSE 79294
79288: LD_INT 399
79290: DOUBLE
79291: LESSEQUAL
79292: IFTRUE 79296
79294: GO 79358
79296: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79297: LD_VAR 0 1
79301: PPUSH
79302: LD_VAR 0 2
79306: PPUSH
79307: LD_VAR 0 3
79311: PPUSH
79312: LD_VAR 0 4
79316: PPUSH
79317: LD_VAR 0 5
79321: PPUSH
79322: LD_VAR 0 6
79326: PPUSH
79327: LD_VAR 0 7
79331: PPUSH
79332: LD_VAR 0 8
79336: PPUSH
79337: LD_VAR 0 9
79341: PPUSH
79342: LD_VAR 0 10
79346: PPUSH
79347: LD_VAR 0 11
79351: PPUSH
79352: CALL 32919 0 11
79356: GO 79359
79358: POP
// end ;
79359: PPOPN 11
79361: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79362: LD_VAR 0 1
79366: PPUSH
79367: LD_VAR 0 2
79371: PPUSH
79372: LD_VAR 0 3
79376: PPUSH
79377: LD_VAR 0 4
79381: PPUSH
79382: LD_VAR 0 5
79386: PPUSH
79387: CALL 15085 0 5
// end ; end_of_file
79391: PPOPN 5
79393: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79394: LD_VAR 0 1
79398: PPUSH
79399: LD_VAR 0 2
79403: PPUSH
79404: LD_VAR 0 3
79408: PPUSH
79409: LD_VAR 0 4
79413: PPUSH
79414: LD_VAR 0 5
79418: PPUSH
79419: LD_VAR 0 6
79423: PPUSH
79424: CALL 20571 0 6
// end ;
79428: PPOPN 6
79430: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79431: LD_INT 0
79433: PPUSH
// begin if not units then
79434: LD_VAR 0 1
79438: NOT
79439: IFFALSE 79443
// exit ;
79441: GO 79443
// end ;
79443: PPOPN 7
79445: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79446: CALL 20458 0 0
// end ;
79450: PPOPN 1
79452: END
