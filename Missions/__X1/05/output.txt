// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 740 0 2
// PrepareArabian ;
  31: CALL 1433 0 0
// PrepareRussian ;
  35: CALL 3031 0 0
// Action ;
  39: CALL 7665 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 250: LD_ADDR_OWVAR 79
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// end ;
 258: LD_VAR 0 1
 262: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 263: LD_EXP 10
 267: NOT
 268: PUSH
 269: LD_EXP 9
 273: NOT
 274: AND
 275: PUSH
 276: LD_EXP 39
 280: NOT
 281: AND
 282: PUSH
 283: LD_EXP 40
 287: NOT
 288: AND
 289: IFFALSE 301
 291: GO 293
 293: DISABLE
// SetAchievement ( ACH_EXT ) ;
 294: LD_STRING ACH_EXT
 296: PPUSH
 297: CALL_OW 543
 301: END
// every 0 0$1 trigger captureCounter >= 6 do
 302: LD_EXP 18
 306: PUSH
 307: LD_INT 6
 309: GREATEREQUAL
 310: IFFALSE 322
 312: GO 314
 314: DISABLE
// SetAchievement ( ACH_KEY ) ;
 315: LD_STRING ACH_KEY
 317: PPUSH
 318: CALL_OW 543
 322: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 323: LD_EXP 19
 327: PUSH
 328: LD_INT 3
 330: GREATEREQUAL
 331: IFFALSE 343
 333: GO 335
 335: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 336: LD_STRING ACH_CHEM
 338: PPUSH
 339: CALL_OW 543
 343: END
// every 0 0$1 trigger debug do var i ;
 344: LD_EXP 1
 348: IFFALSE 432
 350: GO 352
 352: DISABLE
 353: LD_INT 0
 355: PPUSH
// begin enable ;
 356: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 357: LD_ADDR_VAR 0 1
 361: PUSH
 362: LD_INT 22
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: LD_INT 21
 377: PUSH
 378: LD_INT 3
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: FOR_IN
 399: IFFALSE 430
// if GetLives ( i ) < 1000 then
 401: LD_VAR 0 1
 405: PPUSH
 406: CALL_OW 256
 410: PUSH
 411: LD_INT 1000
 413: LESS
 414: IFFALSE 428
// SetLives ( i , 1000 ) ;
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 1000
 423: PPUSH
 424: CALL_OW 234
 428: GO 398
 430: POP
 431: POP
// end ; end_of_file
 432: PPOPN 1
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function SayX ( units , ident ) ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// result := false ;
 527: LD_ADDR_VAR 0 3
 531: PUSH
 532: LD_INT 0
 534: ST_TO_ADDR
// if not units then
 535: LD_VAR 0 1
 539: NOT
 540: IFFALSE 544
// exit ;
 542: GO 598
// for i in units do
 544: LD_ADDR_VAR 0 4
 548: PUSH
 549: LD_VAR 0 1
 553: PUSH
 554: FOR_IN
 555: IFFALSE 596
// if IsOk ( i ) then
 557: LD_VAR 0 4
 561: PPUSH
 562: CALL_OW 302
 566: IFFALSE 594
// begin Say ( i , ident ) ;
 568: LD_VAR 0 4
 572: PPUSH
 573: LD_VAR 0 2
 577: PPUSH
 578: CALL_OW 88
// result := i ;
 582: LD_ADDR_VAR 0 3
 586: PUSH
 587: LD_VAR 0 4
 591: ST_TO_ADDR
// break ;
 592: GO 596
// end ;
 594: GO 554
 596: POP
 597: POP
// end ;
 598: LD_VAR 0 3
 602: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 603: LD_INT 0
 605: PPUSH
 606: PPUSH
// InitUc ;
 607: CALL_OW 18
// InitHc ;
 611: CALL_OW 19
// uc_side := 0 ;
 615: LD_ADDR_OWVAR 20
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// uc_nation := 0 ;
 623: LD_ADDR_OWVAR 21
 627: PUSH
 628: LD_INT 0
 630: ST_TO_ADDR
// for i = 1 to amount do
 631: LD_ADDR_VAR 0 4
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 2
 645: PUSH
 646: FOR_TO
 647: IFFALSE 729
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 649: LD_ADDR_OWVAR 29
 653: PUSH
 654: LD_INT 9
 656: PPUSH
 657: LD_INT 12
 659: PPUSH
 660: CALL_OW 12
 664: PUSH
 665: LD_INT 9
 667: PPUSH
 668: LD_INT 12
 670: PPUSH
 671: CALL_OW 12
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 680: LD_ADDR_OWVAR 35
 684: PUSH
 685: LD_INT 1
 687: NEG
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL_OW 12
 696: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 697: LD_INT 0
 699: PPUSH
 700: LD_INT 12
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 646
 729: POP
 730: POP
// InitHc ;
 731: CALL_OW 19
// end ;
 735: LD_VAR 0 3
 739: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 740: LD_INT 0
 742: PPUSH
 743: PPUSH
// uc_side := 0 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// uc_nation := 0 ;
 752: LD_ADDR_OWVAR 21
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// for i := 1 to 3 do
 760: LD_ADDR_VAR 0 4
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_INT 3
 772: PUSH
 773: FOR_TO
 774: IFFALSE 811
// begin hc_class := 21 ;
 776: LD_ADDR_OWVAR 28
 780: PUSH
 781: LD_INT 21
 783: ST_TO_ADDR
// hc_gallery :=  ;
 784: LD_ADDR_OWVAR 33
 788: PUSH
 789: LD_STRING 
 791: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 792: CALL_OW 44
 796: PPUSH
 797: LD_VAR 0 1
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: CALL_OW 49
// end ;
 809: GO 773
 811: POP
 812: POP
// for i := 1 to 3 do
 813: LD_ADDR_VAR 0 4
 817: PUSH
 818: DOUBLE
 819: LD_INT 1
 821: DEC
 822: ST_TO_ADDR
 823: LD_INT 3
 825: PUSH
 826: FOR_TO
 827: IFFALSE 864
// begin hc_class := 18 ;
 829: LD_ADDR_OWVAR 28
 833: PUSH
 834: LD_INT 18
 836: ST_TO_ADDR
// hc_gallery :=  ;
 837: LD_ADDR_OWVAR 33
 841: PUSH
 842: LD_STRING 
 844: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 845: CALL_OW 44
 849: PPUSH
 850: LD_VAR 0 1
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// end ;
 862: GO 826
 864: POP
 865: POP
// for i := 1 to 3 do
 866: LD_ADDR_VAR 0 4
 870: PUSH
 871: DOUBLE
 872: LD_INT 1
 874: DEC
 875: ST_TO_ADDR
 876: LD_INT 3
 878: PUSH
 879: FOR_TO
 880: IFFALSE 917
// begin hc_class := 13 ;
 882: LD_ADDR_OWVAR 28
 886: PUSH
 887: LD_INT 13
 889: ST_TO_ADDR
// hc_gallery :=  ;
 890: LD_ADDR_OWVAR 33
 894: PUSH
 895: LD_STRING 
 897: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 898: CALL_OW 44
 902: PPUSH
 903: LD_VAR 0 1
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 879
 917: POP
 918: POP
// for i := 1 to 4 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 4
 931: PUSH
 932: FOR_TO
 933: IFFALSE 970
// begin hc_class := class_frog ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 19
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_VAR 0 2
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end ;
 968: GO 932
 970: POP
 971: POP
// end ;
 972: LD_VAR 0 3
 976: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 977: LD_INT 0
 979: PPUSH
 980: PPUSH
 981: PPUSH
// if not observer or not unit then
 982: LD_VAR 0 1
 986: NOT
 987: PUSH
 988: LD_VAR 0 2
 992: NOT
 993: OR
 994: IFFALSE 998
// exit ;
 996: GO 1046
// if not See ( GetSide ( observer ) , unit ) then
 998: LD_VAR 0 1
1002: PPUSH
1003: CALL_OW 255
1007: PPUSH
1008: LD_VAR 0 2
1012: PPUSH
1013: CALL_OW 292
1017: NOT
1018: IFFALSE 1022
// exit ;
1020: GO 1046
// result := GetDistUnits ( observer , unit ) < 12 ;
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: LD_VAR 0 1
1031: PPUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: CALL_OW 296
1041: PUSH
1042: LD_INT 12
1044: LESS
1045: ST_TO_ADDR
// end ;
1046: LD_VAR 0 3
1050: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1051: LD_INT 0
1053: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_VAR 0 2
1067: PUSH
1068: LD_INT 2
1070: ARRAY
1071: PPUSH
1072: CALL_OW 488
1076: PUSH
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 1
1084: ARRAY
1085: PPUSH
1086: LD_VAR 0 2
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 428
1099: PUSH
1100: LD_INT 0
1102: EQUAL
1103: AND
1104: IFFALSE 1138
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1106: LD_VAR 0 1
1110: PPUSH
1111: LD_VAR 0 2
1115: PUSH
1116: LD_INT 1
1118: ARRAY
1119: PPUSH
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 2
1127: ARRAY
1128: PPUSH
1129: LD_VAR 0 3
1133: PPUSH
1134: CALL_OW 48
// end ;
1138: LD_VAR 0 4
1142: RET
// export function ReverseArray ( array ) ; var i ; begin
1143: LD_INT 0
1145: PPUSH
1146: PPUSH
// if not array then
1147: LD_VAR 0 1
1151: NOT
1152: IFFALSE 1156
// exit ;
1154: GO 1214
// result := [ ] ;
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: EMPTY
1162: ST_TO_ADDR
// for i := 1 to array do
1163: LD_ADDR_VAR 0 3
1167: PUSH
1168: DOUBLE
1169: LD_INT 1
1171: DEC
1172: ST_TO_ADDR
1173: LD_VAR 0 1
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1212
// result := Insert ( result , 1 , array [ i ] ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_INT 1
1193: PPUSH
1194: LD_VAR 0 1
1198: PUSH
1199: LD_VAR 0 3
1203: ARRAY
1204: PPUSH
1205: CALL_OW 2
1209: ST_TO_ADDR
1210: GO 1178
1212: POP
1213: POP
// end ;
1214: LD_VAR 0 2
1218: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1219: LD_INT 0
1221: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1222: LD_VAR 0 1
1226: PPUSH
1227: LD_VAR 0 2
1231: PPUSH
1232: LD_VAR 0 3
1236: PPUSH
1237: LD_VAR 0 4
1241: PPUSH
1242: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1246: LD_VAR 0 1
1250: PPUSH
1251: LD_VAR 0 2
1255: PPUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: CALL_OW 331
// end ;
1265: LD_VAR 0 5
1269: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1270: LD_INT 0
1272: PPUSH
// if not units then
1273: LD_VAR 0 1
1277: NOT
1278: IFFALSE 1282
// exit ;
1280: GO 1365
// result := true ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 1
1289: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 26
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: LD_VAR 0 2
1318: PPUSH
1319: CALL_OW 88
1323: NOT
1324: IFFALSE 1365
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1326: LD_ADDR_VAR 0 4
1330: PUSH
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 26
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 72
1350: PUSH
1351: LD_INT 1
1353: ARRAY
1354: PPUSH
1355: LD_VAR 0 3
1359: PPUSH
1360: CALL_OW 88
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 4
1369: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
// if not group then
1374: LD_VAR 0 2
1378: NOT
1379: IFFALSE 1383
// exit ;
1381: GO 1428
// for i in group do
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: LD_VAR 0 2
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1426
// if See ( side , i ) then
1396: LD_VAR 0 1
1400: PPUSH
1401: LD_VAR 0 4
1405: PPUSH
1406: CALL_OW 292
1410: IFFALSE 1424
// begin result := true ;
1412: LD_ADDR_VAR 0 3
1416: PUSH
1417: LD_INT 1
1419: ST_TO_ADDR
// exit ;
1420: POP
1421: POP
1422: GO 1428
// end ;
1424: GO 1393
1426: POP
1427: POP
// end ; end_of_file
1428: LD_VAR 0 3
1432: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1433: LD_INT 0
1435: PPUSH
1436: PPUSH
// uc_side := 2 ;
1437: LD_ADDR_OWVAR 20
1441: PUSH
1442: LD_INT 2
1444: ST_TO_ADDR
// uc_nation := 2 ;
1445: LD_ADDR_OWVAR 21
1449: PUSH
1450: LD_INT 2
1452: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Heike
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 31116 0 3
1476: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 24
1481: PUSH
1482: LD_STRING Ibrahim
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 31116 0 3
1500: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 22
1505: PUSH
1506: LD_STRING Givi
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 31116 0 3
1524: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 25
1529: PUSH
1530: LD_STRING Kamil
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 31116 0 3
1548: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 26
1553: PUSH
1554: LD_STRING Kaia
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 31116 0 3
1572: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 27
1577: PUSH
1578: LD_STRING Sophia
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 31116 0 3
1596: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 28
1601: PUSH
1602: LD_STRING Markov
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 31116 0 3
1620: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1621: LD_ADDR_EXP 33
1625: PUSH
1626: LD_STRING Aviradze
1628: PPUSH
1629: LD_EXP 1
1633: NOT
1634: PPUSH
1635: LD_EXP 2
1639: PPUSH
1640: CALL 31116 0 3
1644: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1645: LD_ADDR_EXP 32
1649: PUSH
1650: LD_STRING Kurt
1652: PPUSH
1653: LD_EXP 1
1657: NOT
1658: PPUSH
1659: LD_EXP 2
1663: PPUSH
1664: CALL 31116 0 3
1668: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1669: LD_ADDR_EXP 23
1673: PUSH
1674: LD_STRING Mike
1676: PPUSH
1677: LD_EXP 1
1681: NOT
1682: PPUSH
1683: LD_EXP 2
1687: PPUSH
1688: CALL 31116 0 3
1692: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1693: LD_ADDR_EXP 30
1697: PUSH
1698: LD_STRING Olaf
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: LD_STRING 
1706: PPUSH
1707: CALL 31116 0 3
1711: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1712: LD_ADDR_EXP 34
1716: PUSH
1717: LD_STRING 04_2_others
1719: PPUSH
1720: CALL_OW 31
1724: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1725: LD_ADDR_EXP 36
1729: PUSH
1730: LD_STRING 04_2_apes
1732: PPUSH
1733: CALL_OW 31
1737: ST_TO_ADDR
// if hasFlamethrower then
1738: LD_EXP 3
1742: IFFALSE 1973
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1744: LD_INT 70
1746: PPUSH
1747: LD_INT 2
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_INT 13
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: LD_INT 1
1770: PUSH
1771: LD_INT 27
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 1000
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 13
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: LD_INT 1
1807: PUSH
1808: LD_INT 25
1810: PUSH
1811: LD_INT 2
1813: PUSH
1814: LD_INT 1000
1816: PUSH
1817: LD_INT 0
1819: PUSH
1820: LD_INT 0
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 13
1838: PUSH
1839: LD_INT 1
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: LD_INT 26
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1000
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 13
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 1
1881: PUSH
1882: LD_INT 27
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1000
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 32
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 60
1933: PUSH
1934: LD_INT 40
1936: PUSH
1937: LD_INT 20
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: PUSH
1945: LD_OWVAR 67
1949: ARRAY
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// end else
1971: GO 2187
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1973: LD_ADDR_EXP 35
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 1
1986: PUSH
1987: LD_INT 25
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 1000
1995: PUSH
1996: LD_INT 0
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 13
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 27
2026: PUSH
2027: LD_INT 2
2029: PUSH
2030: LD_INT 1000
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 13
2054: PUSH
2055: LD_INT 1
2057: PUSH
2058: LD_INT 1
2060: PUSH
2061: LD_INT 24
2063: PUSH
2064: LD_INT 2
2066: PUSH
2067: LD_INT 1000
2069: PUSH
2070: LD_INT 0
2072: PUSH
2073: LD_INT 0
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 13
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: LD_INT 1
2097: PUSH
2098: LD_INT 27
2100: PUSH
2101: LD_INT 2
2103: PUSH
2104: LD_INT 1000
2106: PUSH
2107: LD_INT 0
2109: PUSH
2110: LD_INT 0
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 13
2128: PUSH
2129: LD_INT 1
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: LD_INT 32
2137: PUSH
2138: LD_INT 2
2140: PUSH
2141: LD_INT 1000
2143: PUSH
2144: LD_INT 0
2146: PUSH
2147: LD_INT 50
2149: PUSH
2150: LD_INT 30
2152: PUSH
2153: LD_INT 20
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: LD_OWVAR 67
2165: ARRAY
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: ST_TO_ADDR
// end ; uc_side := 5 ;
2187: LD_ADDR_OWVAR 20
2191: PUSH
2192: LD_INT 5
2194: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2195: LD_ADDR_EXP 29
2199: PUSH
2200: LD_STRING Abdul
2202: PPUSH
2203: LD_INT 0
2205: PPUSH
2206: LD_STRING 
2208: PPUSH
2209: CALL 31116 0 3
2213: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2214: LD_ADDR_EXP 31
2218: PUSH
2219: LD_STRING Omar
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: LD_STRING 
2227: PPUSH
2228: CALL 31116 0 3
2232: ST_TO_ADDR
// end ;
2233: LD_VAR 0 1
2237: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2238: LD_INT 0
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
// pfx := 04_1_ ;
2245: LD_ADDR_VAR 0 2
2249: PUSH
2250: LD_STRING 04_1_
2252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2253: LD_INT 35
2255: PPUSH
2256: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2260: LD_INT 3
2262: PPUSH
2263: LD_INT 2
2265: PPUSH
2266: CALL_OW 428
2270: NOT
2271: IFFALSE 2253
// tmp := [ ] ;
2273: LD_ADDR_VAR 0 4
2277: PUSH
2278: EMPTY
2279: ST_TO_ADDR
// uc_side := 5 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 5
2287: ST_TO_ADDR
// uc_nation := 2 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2296: LD_ADDR_EXP 33
2300: PUSH
2301: LD_STRING Aviradze_L
2303: PPUSH
2304: LD_EXP 1
2308: NOT
2309: PPUSH
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL 31116 0 3
2319: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2320: LD_EXP 33
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 14
2339: PPUSH
2340: LD_INT 0
2342: PPUSH
2343: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2347: LD_EXP 33
2351: PPUSH
2352: LD_INT 8
2354: PPUSH
2355: LD_INT 6
2357: PPUSH
2358: CALL_OW 111
// AddComHold ( Aviradze ) ;
2362: LD_EXP 33
2366: PPUSH
2367: CALL_OW 200
// tmp := [ Aviradze ] ;
2371: LD_ADDR_VAR 0 4
2375: PUSH
2376: LD_EXP 33
2380: PUSH
2381: EMPTY
2382: LIST
2383: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2384: LD_INT 70
2386: PPUSH
2387: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2391: LD_STRING Ibrahim_L
2393: PPUSH
2394: LD_EXP 1
2398: NOT
2399: PPUSH
2400: LD_VAR 0 2
2404: PPUSH
2405: CALL 31116 0 3
2409: IFFALSE 2509
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2411: LD_ADDR_EXP 24
2415: PUSH
2416: LD_STRING Ibrahim_L
2418: PPUSH
2419: LD_EXP 1
2423: NOT
2424: PPUSH
2425: LD_VAR 0 2
2429: PPUSH
2430: CALL 31116 0 3
2434: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2435: LD_EXP 24
2439: PPUSH
2440: LD_INT 2
2442: PPUSH
2443: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 14
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2462: LD_EXP 24
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: LD_INT 7
2472: PPUSH
2473: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2477: LD_EXP 24
2481: PPUSH
2482: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2486: LD_ADDR_VAR 0 4
2490: PUSH
2491: LD_VAR 0 4
2495: PUSH
2496: LD_EXP 24
2500: ADD
2501: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2502: LD_INT 70
2504: PPUSH
2505: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2509: LD_STRING Kaia_L
2511: PPUSH
2512: LD_EXP 1
2516: NOT
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL 31116 0 3
2527: IFFALSE 2627
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2529: LD_ADDR_EXP 26
2533: PUSH
2534: LD_STRING Kaia_L
2536: PPUSH
2537: LD_EXP 1
2541: NOT
2542: PPUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL 31116 0 3
2552: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2553: LD_EXP 26
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 14
2572: PPUSH
2573: LD_INT 0
2575: PPUSH
2576: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2580: LD_EXP 26
2584: PPUSH
2585: LD_INT 8
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 111
// AddComHold ( Kaia ) ;
2595: LD_EXP 26
2599: PPUSH
2600: CALL_OW 200
// tmp := tmp ^ Kaia ;
2604: LD_ADDR_VAR 0 4
2608: PUSH
2609: LD_VAR 0 4
2613: PUSH
2614: LD_EXP 26
2618: ADD
2619: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2620: LD_INT 70
2622: PPUSH
2623: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2627: LD_STRING Kamil_L
2629: PPUSH
2630: LD_EXP 1
2634: NOT
2635: PPUSH
2636: LD_VAR 0 2
2640: PPUSH
2641: CALL 31116 0 3
2645: IFFALSE 2745
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2647: LD_ADDR_EXP 25
2651: PUSH
2652: LD_STRING Kamil_L
2654: PPUSH
2655: LD_EXP 1
2659: NOT
2660: PPUSH
2661: LD_VAR 0 2
2665: PPUSH
2666: CALL 31116 0 3
2670: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2671: LD_EXP 25
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 14
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2698: LD_EXP 25
2702: PPUSH
2703: LD_INT 8
2705: PPUSH
2706: LD_INT 7
2708: PPUSH
2709: CALL_OW 111
// AddComHold ( Kamil ) ;
2713: LD_EXP 25
2717: PPUSH
2718: CALL_OW 200
// tmp := tmp ^ Kamil ;
2722: LD_ADDR_VAR 0 4
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_EXP 25
2736: ADD
2737: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2738: LD_INT 70
2740: PPUSH
2741: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2745: LD_STRING Sophia_L
2747: PPUSH
2748: LD_EXP 1
2752: NOT
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: CALL 31116 0 3
2763: IFFALSE 2863
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2765: LD_ADDR_EXP 27
2769: PUSH
2770: LD_STRING Sophia_L
2772: PPUSH
2773: LD_EXP 1
2777: NOT
2778: PPUSH
2779: LD_VAR 0 2
2783: PPUSH
2784: CALL 31116 0 3
2788: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2789: LD_EXP 27
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 14
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2816: LD_EXP 27
2820: PPUSH
2821: LD_INT 9
2823: PPUSH
2824: LD_INT 6
2826: PPUSH
2827: CALL_OW 111
// AddComHold ( Sophia ) ;
2831: LD_EXP 27
2835: PPUSH
2836: CALL_OW 200
// tmp := tmp ^ Sophia ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_VAR 0 4
2849: PUSH
2850: LD_EXP 27
2854: ADD
2855: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2856: LD_INT 70
2858: PPUSH
2859: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_STRING 04_1_others_L
2870: PPUSH
2871: CALL_OW 31
2875: ST_TO_ADDR
// if tmp2 then
2876: LD_VAR 0 5
2880: IFFALSE 2977
// for i in tmp2 do
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: FOR_IN
2893: IFFALSE 2975
// begin SetDir ( i , 2 ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 14
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2922: LD_ADDR_EXP 34
2926: PUSH
2927: LD_EXP 34
2931: PPUSH
2932: LD_EXP 34
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: PPUSH
2941: LD_VAR 0 3
2945: PPUSH
2946: CALL_OW 1
2950: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 17
2958: PPUSH
2959: LD_INT 14
2961: PPUSH
2962: CALL_OW 111
// wait ( 0 0$2 ) ;
2966: LD_INT 70
2968: PPUSH
2969: CALL_OW 67
// end ;
2973: GO 2892
2975: POP
2976: POP
// for i in tmp union tmp2 do
2977: LD_ADDR_VAR 0 3
2981: PUSH
2982: LD_VAR 0 4
2986: PUSH
2987: LD_VAR 0 5
2991: UNION
2992: PUSH
2993: FOR_IN
2994: IFFALSE 3024
// begin SetSide ( i , 2 ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_INT 2
3003: PPUSH
3004: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_EXP 21
3017: PPUSH
3018: CALL_OW 112
// end ;
3022: GO 2993
3024: POP
3025: POP
// end ; end_of_file
3026: LD_VAR 0 1
3030: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
3035: PPUSH
// uc_side := 3 ;
3036: LD_ADDR_OWVAR 20
3040: PUSH
3041: LD_INT 3
3043: ST_TO_ADDR
// uc_nation := 3 ;
3044: LD_ADDR_OWVAR 21
3048: PUSH
3049: LD_INT 3
3051: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3052: LD_ADDR_EXP 37
3056: PUSH
3057: EMPTY
3058: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3059: LD_ADDR_EXP 38
3063: PUSH
3064: EMPTY
3065: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3066: LD_ADDR_EXP 41
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// for i := 1 to 2 do
3073: LD_ADDR_VAR 0 2
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_INT 2
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3222
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3089: LD_INT 0
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 4
3100: PUSH
3101: LD_INT 5
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: PUSH
3109: LD_OWVAR 67
3113: ARRAY
3114: PPUSH
3115: CALL_OW 380
// un := CreateHuman ;
3119: LD_ADDR_VAR 0 3
3123: PUSH
3124: CALL_OW 44
3128: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3129: LD_ADDR_EXP 37
3133: PUSH
3134: LD_EXP 37
3138: PPUSH
3139: LD_EXP 37
3143: PUSH
3144: LD_INT 1
3146: PLUS
3147: PPUSH
3148: LD_VAR 0 3
3152: PPUSH
3153: CALL_OW 1
3157: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3158: LD_VAR 0 3
3162: PPUSH
3163: LD_INT 100
3165: PPUSH
3166: LD_INT 63
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_INT 97
3186: PPUSH
3187: LD_INT 64
3189: PPUSH
3190: CALL_OW 428
3194: PUSH
3195: LD_INT 98
3197: PPUSH
3198: LD_INT 58
3200: PPUSH
3201: CALL_OW 428
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_VAR 0 2
3214: ARRAY
3215: PPUSH
3216: CALL_OW 120
// end ;
3220: GO 3086
3222: POP
3223: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3224: LD_INT 51
3226: PPUSH
3227: LD_INT 77
3229: PPUSH
3230: CALL_OW 428
3234: PPUSH
3235: CALL_OW 274
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 120
3245: PPUSH
3246: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3250: LD_INT 10
3252: PPUSH
3253: CALL_OW 274
3257: PPUSH
3258: LD_INT 2
3260: PPUSH
3261: LD_INT 300
3263: PPUSH
3264: CALL_OW 277
// for i := 1 to 2 do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 2
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3396
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3284: LD_INT 0
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_INT 3
3292: PUSH
3293: LD_INT 4
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_OWVAR 67
3308: ARRAY
3309: PPUSH
3310: CALL_OW 380
// un := CreateHuman ;
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3324: LD_ADDR_EXP 38
3328: PUSH
3329: LD_EXP 38
3333: PPUSH
3334: LD_EXP 38
3338: PUSH
3339: LD_INT 1
3341: PLUS
3342: PPUSH
3343: LD_VAR 0 3
3347: PPUSH
3348: CALL_OW 1
3352: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3353: LD_VAR 0 3
3357: PPUSH
3358: LD_INT 198
3360: PPUSH
3361: LD_INT 106
3363: PPUSH
3364: CALL_OW 428
3368: PUSH
3369: LD_INT 205
3371: PPUSH
3372: LD_INT 114
3374: PPUSH
3375: CALL_OW 428
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_VAR 0 2
3388: ARRAY
3389: PPUSH
3390: CALL_OW 52
// end ;
3394: GO 3281
3396: POP
3397: POP
// for i := 1 to 2 do
3398: LD_ADDR_VAR 0 2
3402: PUSH
3403: DOUBLE
3404: LD_INT 1
3406: DEC
3407: ST_TO_ADDR
3408: LD_INT 2
3410: PUSH
3411: FOR_TO
3412: IFFALSE 3489
// begin PrepareHuman ( false , 2 , 3 ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 2
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: CALL_OW 380
// un := CreateHuman ;
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: CALL_OW 44
3436: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3437: LD_ADDR_EXP 38
3441: PUSH
3442: LD_EXP 38
3446: PPUSH
3447: LD_EXP 38
3451: PUSH
3452: LD_INT 1
3454: PLUS
3455: PPUSH
3456: LD_VAR 0 3
3460: PPUSH
3461: CALL_OW 1
3465: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3466: LD_VAR 0 3
3470: PPUSH
3471: LD_INT 204
3473: PPUSH
3474: LD_INT 108
3476: PPUSH
3477: LD_INT 2
3479: PPUSH
3480: LD_INT 0
3482: PPUSH
3483: CALL_OW 50
// end ;
3487: GO 3411
3489: POP
3490: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 4
3503: PUSH
3504: LD_INT 5
3506: PUSH
3507: LD_INT 6
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_OWVAR 67
3519: ARRAY
3520: PUSH
3521: FOR_TO
3522: IFFALSE 3643
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3524: LD_INT 0
3526: PPUSH
3527: LD_INT 1
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: LD_INT 4
3538: PUSH
3539: LD_INT 1
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 1
3551: PPUSH
3552: LD_INT 5
3554: PPUSH
3555: CALL_OW 12
3559: ARRAY
3560: PPUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 4
3566: PUSH
3567: LD_INT 5
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: PUSH
3575: LD_OWVAR 67
3579: ARRAY
3580: PPUSH
3581: CALL_OW 380
// un := CreateHuman ;
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3595: LD_VAR 0 3
3599: PPUSH
3600: LD_INT 11
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 66352 0 3
3610: IFFALSE 3641
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3612: LD_ADDR_EXP 39
3616: PUSH
3617: LD_EXP 39
3621: PPUSH
3622: LD_EXP 39
3626: PUSH
3627: LD_INT 1
3629: PLUS
3630: PPUSH
3631: LD_VAR 0 3
3635: PPUSH
3636: CALL_OW 1
3640: ST_TO_ADDR
// end ;
3641: GO 3521
3643: POP
3644: POP
// for i := 1 to 3 do
3645: LD_ADDR_VAR 0 2
3649: PUSH
3650: DOUBLE
3651: LD_INT 1
3653: DEC
3654: ST_TO_ADDR
3655: LD_INT 3
3657: PUSH
3658: FOR_TO
3659: IFFALSE 3749
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 3
3669: PUSH
3670: LD_INT 4
3672: PUSH
3673: LD_INT 4
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: LD_OWVAR 67
3685: ARRAY
3686: PPUSH
3687: CALL_OW 380
// un := CreateHuman ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: CALL_OW 44
3700: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_INT 11
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: CALL 66352 0 3
3716: IFFALSE 3747
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3718: LD_ADDR_EXP 39
3722: PUSH
3723: LD_EXP 39
3727: PPUSH
3728: LD_EXP 39
3732: PUSH
3733: LD_INT 1
3735: PLUS
3736: PPUSH
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL_OW 1
3746: ST_TO_ADDR
// end ;
3747: GO 3658
3749: POP
3750: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3751: LD_ADDR_VAR 0 2
3755: PUSH
3756: DOUBLE
3757: LD_INT 1
3759: DEC
3760: ST_TO_ADDR
3761: LD_INT 5
3763: PUSH
3764: LD_INT 6
3766: PUSH
3767: LD_INT 7
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_OWVAR 67
3779: ARRAY
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3903
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3784: LD_INT 0
3786: PPUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 5
3814: PPUSH
3815: CALL_OW 12
3819: ARRAY
3820: PPUSH
3821: LD_INT 3
3823: PUSH
3824: LD_INT 4
3826: PUSH
3827: LD_INT 5
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: PUSH
3835: LD_OWVAR 67
3839: ARRAY
3840: PPUSH
3841: CALL_OW 380
// un := CreateHuman ;
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: CALL_OW 44
3854: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3855: LD_VAR 0 3
3859: PPUSH
3860: LD_INT 15
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL 66352 0 3
3870: IFFALSE 3901
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3872: LD_ADDR_EXP 40
3876: PUSH
3877: LD_EXP 40
3881: PPUSH
3882: LD_EXP 40
3886: PUSH
3887: LD_INT 1
3889: PLUS
3890: PPUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: CALL_OW 1
3900: ST_TO_ADDR
// end ;
3901: GO 3781
3903: POP
3904: POP
// end ;
3905: LD_VAR 0 1
3909: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3910: LD_INT 0
3912: PPUSH
3913: PPUSH
3914: PPUSH
// uc_side := 3 ;
3915: LD_ADDR_OWVAR 20
3919: PUSH
3920: LD_INT 3
3922: ST_TO_ADDR
// uc_nation := 3 ;
3923: LD_ADDR_OWVAR 21
3927: PUSH
3928: LD_INT 3
3930: ST_TO_ADDR
// for i := 1 to 6 do
3931: LD_ADDR_VAR 0 2
3935: PUSH
3936: DOUBLE
3937: LD_INT 1
3939: DEC
3940: ST_TO_ADDR
3941: LD_INT 6
3943: PUSH
3944: FOR_TO
3945: IFFALSE 4024
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3947: LD_INT 0
3949: PPUSH
3950: LD_INT 1
3952: PUSH
3953: LD_INT 4
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 1
3962: PPUSH
3963: LD_INT 2
3965: PPUSH
3966: CALL_OW 12
3970: ARRAY
3971: PPUSH
3972: LD_INT 0
3974: PPUSH
3975: CALL_OW 380
// un := CreateHuman ;
3979: LD_ADDR_VAR 0 3
3983: PUSH
3984: CALL_OW 44
3988: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 54
3996: PPUSH
3997: LD_INT 88
3999: PPUSH
4000: LD_INT 12
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 50
// SetLives ( un , 1 ) ;
4010: LD_VAR 0 3
4014: PPUSH
4015: LD_INT 1
4017: PPUSH
4018: CALL_OW 234
// end ;
4022: GO 3944
4024: POP
4025: POP
// uc_side := 3 ;
4026: LD_ADDR_OWVAR 20
4030: PUSH
4031: LD_INT 3
4033: ST_TO_ADDR
// uc_nation := 0 ;
4034: LD_ADDR_OWVAR 21
4038: PUSH
4039: LD_INT 0
4041: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4042: LD_ADDR_EXP 42
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// apeEngGroup := [ ] ;
4049: LD_ADDR_EXP 43
4053: PUSH
4054: EMPTY
4055: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 4
4068: PUSH
4069: LD_INT 5
4071: PUSH
4072: LD_INT 6
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: PUSH
4080: LD_OWVAR 67
4084: ARRAY
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4201
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 15
4094: PPUSH
4095: LD_INT 3
4097: PUSH
4098: LD_INT 4
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_OWVAR 67
4113: ARRAY
4114: PPUSH
4115: CALL_OW 380
// un := CreateHuman ;
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: CALL_OW 44
4128: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4129: LD_ADDR_EXP 42
4133: PUSH
4134: LD_EXP 42
4138: PPUSH
4139: LD_EXP 42
4143: PUSH
4144: LD_INT 1
4146: PLUS
4147: PPUSH
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 1
4157: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4158: LD_VAR 0 3
4162: PPUSH
4163: LD_INT 0
4165: PPUSH
4166: LD_INT 5
4168: PPUSH
4169: CALL_OW 12
4173: PPUSH
4174: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 56
4185: PPUSH
4186: LD_INT 82
4188: PPUSH
4189: LD_INT 6
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 50
// end ;
4199: GO 4086
4201: POP
4202: POP
// for i := 1 to 2 do
4203: LD_ADDR_VAR 0 2
4207: PUSH
4208: DOUBLE
4209: LD_INT 1
4211: DEC
4212: ST_TO_ADDR
4213: LD_INT 2
4215: PUSH
4216: FOR_TO
4217: IFFALSE 4293
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4219: LD_INT 0
4221: PPUSH
4222: LD_INT 16
4224: PPUSH
4225: LD_INT 4
4227: PPUSH
4228: CALL_OW 380
// un := CreateHuman ;
4232: LD_ADDR_VAR 0 3
4236: PUSH
4237: CALL_OW 44
4241: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4242: LD_ADDR_EXP 43
4246: PUSH
4247: LD_EXP 43
4251: PPUSH
4252: LD_EXP 43
4256: PUSH
4257: LD_INT 1
4259: PLUS
4260: PPUSH
4261: LD_VAR 0 3
4265: PPUSH
4266: CALL_OW 1
4270: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_INT 51
4278: PPUSH
4279: LD_INT 77
4281: PPUSH
4282: CALL_OW 428
4286: PPUSH
4287: CALL_OW 52
// end ;
4291: GO 4216
4293: POP
4294: POP
// end ;
4295: LD_VAR 0 1
4299: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4300: LD_EXP 42
4304: PPUSH
4305: LD_INT 3
4307: PUSH
4308: LD_INT 24
4310: PUSH
4311: LD_INT 600
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 3
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: EMPTY
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 72
4343: PUSH
4344: LD_INT 66
4346: PPUSH
4347: LD_INT 89
4349: PPUSH
4350: CALL_OW 428
4354: PPUSH
4355: CALL_OW 302
4359: AND
4360: IFFALSE 4445
4362: GO 4364
4364: DISABLE
4365: LD_INT 0
4367: PPUSH
// begin enable ;
4368: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4369: LD_ADDR_VAR 0 1
4373: PUSH
4374: LD_EXP 42
4378: PPUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 24
4384: PUSH
4385: LD_INT 600
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: LD_INT 54
4401: PUSH
4402: EMPTY
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PPUSH
4413: CALL_OW 72
4417: PUSH
4418: FOR_IN
4419: IFFALSE 4443
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4421: LD_VAR 0 1
4425: PPUSH
4426: LD_INT 66
4428: PPUSH
4429: LD_INT 89
4431: PPUSH
4432: CALL_OW 428
4436: PPUSH
4437: CALL_OW 120
4441: GO 4418
4443: POP
4444: POP
// end ;
4445: PPOPN 1
4447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4448: LD_INT 22
4450: PUSH
4451: LD_INT 2
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 92
4460: PUSH
4461: LD_INT 54
4463: PUSH
4464: LD_INT 77
4466: PUSH
4467: LD_INT 8
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: IFFALSE 4548
4486: GO 4488
4488: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4489: LD_EXP 43
4493: PPUSH
4494: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4498: LD_EXP 43
4502: PPUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 92
4515: PUSH
4516: LD_INT 54
4518: PUSH
4519: LD_INT 77
4521: PUSH
4522: LD_INT 8
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PPUSH
4535: CALL_OW 69
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: CALL_OW 175
// end ;
4548: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4560: LD_ADDR_VAR 0 3
4564: PUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_INT 3
4570: PPUSH
4571: CALL_OW 12
4575: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4576: LD_ADDR_VAR 0 5
4580: PUSH
4581: LD_INT 16
4583: PUSH
4584: LD_INT 17
4586: PUSH
4587: LD_INT 19
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_VAR 0 3
4599: ARRAY
4600: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4601: LD_ADDR_VAR 0 7
4605: PUSH
4606: LD_INT 159
4608: PUSH
4609: LD_INT 25
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 137
4618: PUSH
4619: LD_INT 37
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 123
4628: PUSH
4629: LD_INT 55
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 115
4638: PUSH
4639: LD_INT 71
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 106
4648: PUSH
4649: LD_INT 88
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 97
4658: PUSH
4659: LD_INT 114
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 75
4668: PUSH
4669: LD_INT 146
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 206
4687: PUSH
4688: LD_INT 135
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_INT 184
4697: PUSH
4698: LD_INT 111
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: LD_INT 154
4707: PUSH
4708: LD_INT 97
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 122
4717: PUSH
4718: LD_INT 80
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 109
4727: PUSH
4728: LD_INT 78
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 97
4737: PUSH
4738: LD_INT 113
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 75
4747: PUSH
4748: LD_INT 147
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 185
4766: PUSH
4767: LD_INT 72
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 171
4776: PUSH
4777: LD_INT 83
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 161
4786: PUSH
4787: LD_INT 99
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 125
4796: PUSH
4797: LD_INT 82
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 105
4806: PUSH
4807: LD_INT 90
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 96
4816: PUSH
4817: LD_INT 116
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 75
4826: PUSH
4827: LD_INT 147
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_VAR 0 3
4852: ARRAY
4853: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4854: LD_ADDR_VAR 0 4
4858: PUSH
4859: LD_INT 4
4861: PUSH
4862: LD_INT 5
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: LD_VAR 0 3
4877: ARRAY
4878: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4879: LD_ADDR_VAR 0 6
4883: PUSH
4884: LD_INT 22
4886: PUSH
4887: LD_INT 20
4889: PUSH
4890: LD_INT 21
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_VAR 0 3
4902: ARRAY
4903: ST_TO_ADDR
// for i := 1 to 2 do
4904: LD_ADDR_VAR 0 2
4908: PUSH
4909: DOUBLE
4910: LD_INT 1
4912: DEC
4913: ST_TO_ADDR
4914: LD_INT 2
4916: PUSH
4917: FOR_TO
4918: IFFALSE 4936
// EraseResourceArea ( i , outerSpawnArea ) ;
4920: LD_VAR 0 2
4924: PPUSH
4925: LD_VAR 0 6
4929: PPUSH
4930: CALL_OW 286
4934: GO 4917
4936: POP
4937: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4938: LD_VAR 0 6
4942: PPUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: LD_INT 2
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 21
4968: PUSH
4969: LD_INT 3
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 70
4986: IFFALSE 5201
// repeat wait ( 0 0$1 ) ;
4988: LD_INT 35
4990: PPUSH
4991: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4995: LD_VAR 0 6
4999: PPUSH
5000: LD_INT 2
5002: PUSH
5003: LD_INT 21
5005: PUSH
5006: LD_INT 2
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 70
5032: IFFALSE 5093
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5034: LD_ADDR_VAR 0 2
5038: PUSH
5039: LD_VAR 0 6
5043: PPUSH
5044: LD_INT 2
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: PPUSH
5072: CALL_OW 70
5076: PUSH
5077: FOR_IN
5078: IFFALSE 5091
// RemoveUnit ( i ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: CALL_OW 64
5089: GO 5077
5091: POP
5092: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5093: LD_VAR 0 6
5097: PPUSH
5098: LD_INT 21
5100: PUSH
5101: LD_INT 1
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_VAR 0 6
5123: PPUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PPUSH
5134: CALL_OW 70
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5159
// ComMoveXY ( i , 113 , 53 ) ;
5142: LD_VAR 0 2
5146: PPUSH
5147: LD_INT 113
5149: PPUSH
5150: LD_INT 53
5152: PPUSH
5153: CALL_OW 111
5157: GO 5139
5159: POP
5160: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 2
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 70
5198: NOT
5199: IFFALSE 4988
// case convoyCounter of 1 .. 3 :
5201: LD_EXP 16
5205: PUSH
5206: LD_INT 1
5208: DOUBLE
5209: GREATEREQUAL
5210: IFFALSE 5218
5212: LD_INT 3
5214: DOUBLE
5215: LESSEQUAL
5216: IFTRUE 5220
5218: GO 5815
5220: POP
// begin uc_side := 3 ;
5221: LD_ADDR_OWVAR 20
5225: PUSH
5226: LD_INT 3
5228: ST_TO_ADDR
// uc_nation := 3 ;
5229: LD_ADDR_OWVAR 21
5233: PUSH
5234: LD_INT 3
5236: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5237: LD_ADDR_VAR 0 2
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_INT 5
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: LD_INT 7
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: PUSH
5261: LD_OWVAR 67
5265: ARRAY
5266: PUSH
5267: LD_EXP 16
5271: MINUS
5272: PUSH
5273: FOR_TO
5274: IFFALSE 5461
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5276: LD_INT 0
5278: PPUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 1
5287: PUSH
5288: LD_INT 4
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: PPUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: LD_INT 6
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_OWVAR 67
5327: ARRAY
5328: PPUSH
5329: CALL_OW 380
// un := CreateHuman ;
5333: LD_ADDR_VAR 0 8
5337: PUSH
5338: CALL_OW 44
5342: ST_TO_ADDR
// SetDir ( un , dir ) ;
5343: LD_VAR 0 8
5347: PPUSH
5348: LD_VAR 0 4
5352: PPUSH
5353: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5357: LD_VAR 0 8
5361: PPUSH
5362: LD_VAR 0 5
5366: PPUSH
5367: LD_INT 0
5369: PPUSH
5370: CALL 66352 0 3
5374: IFFALSE 5459
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5376: LD_ADDR_EXP 41
5380: PUSH
5381: LD_EXP 41
5385: PPUSH
5386: LD_EXP 41
5390: PUSH
5391: LD_INT 1
5393: PLUS
5394: PPUSH
5395: LD_VAR 0 8
5399: PPUSH
5400: CALL_OW 1
5404: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5405: LD_VAR 0 8
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5417: LD_VAR 0 8
5421: PPUSH
5422: LD_VAR 0 7
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: LD_VAR 0 7
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PUSH
5444: LD_INT 2
5446: ARRAY
5447: PPUSH
5448: CALL_OW 111
// wait ( 0 0$2 ) ;
5452: LD_INT 70
5454: PPUSH
5455: CALL_OW 67
// end ; end ;
5459: GO 5273
5461: POP
5462: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: DOUBLE
5469: LD_INT 1
5471: DEC
5472: ST_TO_ADDR
5473: LD_INT 3
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: LD_OWVAR 67
5491: ARRAY
5492: PUSH
5493: FOR_TO
5494: IFFALSE 5811
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5496: LD_INT 3
5498: PPUSH
5499: LD_INT 3
5501: PPUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 22
5507: PUSH
5508: LD_INT 23
5510: PUSH
5511: LD_INT 24
5513: PUSH
5514: LD_INT 24
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_OWVAR 67
5528: PPUSH
5529: LD_OWVAR 67
5533: PUSH
5534: LD_INT 2
5536: PLUS
5537: PPUSH
5538: CALL_OW 12
5542: ARRAY
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 42
5552: PUSH
5553: LD_INT 44
5555: PUSH
5556: LD_INT 43
5558: PUSH
5559: LD_INT 44
5561: PUSH
5562: LD_INT 46
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 1
5574: PPUSH
5575: LD_OWVAR 67
5579: PUSH
5580: LD_INT 2
5582: PLUS
5583: PPUSH
5584: CALL_OW 12
5588: ARRAY
5589: PPUSH
5590: LD_INT 90
5592: PPUSH
5593: CALL 435 0 7
// un := CreateVehicle ;
5597: LD_ADDR_VAR 0 8
5601: PUSH
5602: CALL_OW 45
5606: ST_TO_ADDR
// SetDir ( un , dir ) ;
5607: LD_VAR 0 8
5611: PPUSH
5612: LD_VAR 0 4
5616: PPUSH
5617: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5621: LD_VAR 0 8
5625: PPUSH
5626: LD_VAR 0 5
5630: PPUSH
5631: LD_INT 0
5633: PPUSH
5634: CALL 66352 0 3
5638: IFFALSE 5809
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5640: LD_ADDR_EXP 41
5644: PUSH
5645: LD_EXP 41
5649: PPUSH
5650: LD_EXP 41
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: PPUSH
5659: LD_VAR 0 8
5663: PPUSH
5664: CALL_OW 1
5668: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: LD_INT 5
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PUSH
5686: LD_OWVAR 67
5690: ARRAY
5691: PPUSH
5692: CALL_OW 383
// un := CreateHuman ;
5696: LD_ADDR_VAR 0 8
5700: PUSH
5701: CALL_OW 44
5705: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5706: LD_VAR 0 8
5710: PPUSH
5711: LD_EXP 41
5715: PUSH
5716: LD_EXP 41
5720: ARRAY
5721: PPUSH
5722: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5726: LD_ADDR_EXP 41
5730: PUSH
5731: LD_EXP 41
5735: PPUSH
5736: LD_EXP 41
5740: PUSH
5741: LD_INT 1
5743: PLUS
5744: PPUSH
5745: LD_VAR 0 8
5749: PPUSH
5750: CALL_OW 1
5754: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5755: LD_VAR 0 8
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5767: LD_VAR 0 8
5771: PPUSH
5772: LD_VAR 0 7
5776: PUSH
5777: LD_INT 1
5779: ARRAY
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PPUSH
5785: LD_VAR 0 7
5789: PUSH
5790: LD_INT 1
5792: ARRAY
5793: PUSH
5794: LD_INT 2
5796: ARRAY
5797: PPUSH
5798: CALL_OW 111
// wait ( 0 0$3 ) ;
5802: LD_INT 105
5804: PPUSH
5805: CALL_OW 67
// end ; end ;
5809: GO 5493
5811: POP
5812: POP
// end ; 4 .. 7 :
5813: GO 6368
5815: LD_INT 4
5817: DOUBLE
5818: GREATEREQUAL
5819: IFFALSE 5827
5821: LD_INT 7
5823: DOUBLE
5824: LESSEQUAL
5825: IFTRUE 5829
5827: GO 6367
5829: POP
// begin uc_side := 3 ;
5830: LD_ADDR_OWVAR 20
5834: PUSH
5835: LD_INT 3
5837: ST_TO_ADDR
// uc_nation := 3 ;
5838: LD_ADDR_OWVAR 21
5842: PUSH
5843: LD_INT 3
5845: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5846: LD_ADDR_VAR 0 2
5850: PUSH
5851: DOUBLE
5852: LD_INT 1
5854: DEC
5855: ST_TO_ADDR
5856: LD_INT 2
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: LD_INT 4
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: PUSH
5870: LD_OWVAR 67
5874: ARRAY
5875: PUSH
5876: FOR_TO
5877: IFFALSE 6037
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5879: LD_INT 0
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_OWVAR 67
5903: ARRAY
5904: PPUSH
5905: CALL_OW 380
// un := CreateHuman ;
5909: LD_ADDR_VAR 0 8
5913: PUSH
5914: CALL_OW 44
5918: ST_TO_ADDR
// SetDir ( un , dir ) ;
5919: LD_VAR 0 8
5923: PPUSH
5924: LD_VAR 0 4
5928: PPUSH
5929: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5933: LD_VAR 0 8
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_INT 0
5945: PPUSH
5946: CALL 66352 0 3
5950: IFFALSE 6035
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5952: LD_ADDR_EXP 41
5956: PUSH
5957: LD_EXP 41
5961: PPUSH
5962: LD_EXP 41
5966: PUSH
5967: LD_INT 1
5969: PLUS
5970: PPUSH
5971: LD_VAR 0 8
5975: PPUSH
5976: CALL_OW 1
5980: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5981: LD_VAR 0 8
5985: PPUSH
5986: LD_INT 1
5988: PPUSH
5989: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5993: LD_VAR 0 8
5997: PPUSH
5998: LD_VAR 0 7
6002: PUSH
6003: LD_INT 1
6005: ARRAY
6006: PUSH
6007: LD_INT 1
6009: ARRAY
6010: PPUSH
6011: LD_VAR 0 7
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PUSH
6020: LD_INT 2
6022: ARRAY
6023: PPUSH
6024: CALL_OW 111
// wait ( 0 0$2 ) ;
6028: LD_INT 70
6030: PPUSH
6031: CALL_OW 67
// end ; end ;
6035: GO 5876
6037: POP
6038: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6039: LD_ADDR_VAR 0 2
6043: PUSH
6044: DOUBLE
6045: LD_INT 1
6047: DEC
6048: ST_TO_ADDR
6049: LD_INT 2
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: LD_OWVAR 67
6067: ARRAY
6068: PUSH
6069: FOR_TO
6070: IFFALSE 6363
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 3
6077: PPUSH
6078: LD_INT 21
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 1
6090: PPUSH
6091: LD_INT 2
6093: PPUSH
6094: CALL_OW 12
6098: ARRAY
6099: PPUSH
6100: LD_INT 1
6102: PPUSH
6103: LD_INT 1
6105: PPUSH
6106: LD_INT 42
6108: PUSH
6109: LD_INT 44
6111: PUSH
6112: LD_INT 43
6114: PUSH
6115: LD_INT 44
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 1
6126: PPUSH
6127: LD_OWVAR 67
6131: PUSH
6132: LD_INT 1
6134: PLUS
6135: PPUSH
6136: CALL_OW 12
6140: ARRAY
6141: PPUSH
6142: LD_INT 90
6144: PPUSH
6145: CALL 435 0 7
// un := CreateVehicle ;
6149: LD_ADDR_VAR 0 8
6153: PUSH
6154: CALL_OW 45
6158: ST_TO_ADDR
// SetDir ( un , dir ) ;
6159: LD_VAR 0 8
6163: PPUSH
6164: LD_VAR 0 4
6168: PPUSH
6169: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6173: LD_VAR 0 8
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: LD_INT 0
6185: PPUSH
6186: CALL 66352 0 3
6190: IFFALSE 6361
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6192: LD_ADDR_EXP 41
6196: PUSH
6197: LD_EXP 41
6201: PPUSH
6202: LD_EXP 41
6206: PUSH
6207: LD_INT 1
6209: PLUS
6210: PPUSH
6211: LD_VAR 0 8
6215: PPUSH
6216: CALL_OW 1
6220: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6221: LD_INT 0
6223: PPUSH
6224: LD_INT 3
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: LD_INT 5
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: PPUSH
6244: CALL_OW 383
// un := CreateHuman ;
6248: LD_ADDR_VAR 0 8
6252: PUSH
6253: CALL_OW 44
6257: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6258: LD_VAR 0 8
6262: PPUSH
6263: LD_EXP 41
6267: PUSH
6268: LD_EXP 41
6272: ARRAY
6273: PPUSH
6274: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6278: LD_ADDR_EXP 41
6282: PUSH
6283: LD_EXP 41
6287: PPUSH
6288: LD_EXP 41
6292: PUSH
6293: LD_INT 1
6295: PLUS
6296: PPUSH
6297: LD_VAR 0 8
6301: PPUSH
6302: CALL_OW 1
6306: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6307: LD_VAR 0 8
6311: PPUSH
6312: LD_INT 1
6314: PPUSH
6315: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6319: LD_VAR 0 8
6323: PPUSH
6324: LD_VAR 0 7
6328: PUSH
6329: LD_INT 1
6331: ARRAY
6332: PUSH
6333: LD_INT 1
6335: ARRAY
6336: PPUSH
6337: LD_VAR 0 7
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PUSH
6346: LD_INT 2
6348: ARRAY
6349: PPUSH
6350: CALL_OW 111
// wait ( 0 0$2 ) ;
6354: LD_INT 70
6356: PPUSH
6357: CALL_OW 67
// end ; end ;
6361: GO 6069
6363: POP
6364: POP
// end ; end ;
6365: GO 6368
6367: POP
// repeat wait ( 0 0$1 ) ;
6368: LD_INT 35
6370: PPUSH
6371: CALL_OW 67
// for un in ruConvoySquad do
6375: LD_ADDR_VAR 0 8
6379: PUSH
6380: LD_EXP 41
6384: PUSH
6385: FOR_IN
6386: IFFALSE 6890
// begin if IsInArea ( un , westSouthOutArea ) then
6388: LD_VAR 0 8
6392: PPUSH
6393: LD_INT 18
6395: PPUSH
6396: CALL_OW 308
6400: IFFALSE 6488
// begin if GetType ( un ) = unit_vehicle then
6402: LD_VAR 0 8
6406: PPUSH
6407: CALL_OW 247
6411: PUSH
6412: LD_INT 2
6414: EQUAL
6415: IFFALSE 6447
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6417: LD_ADDR_EXP 41
6421: PUSH
6422: LD_EXP 41
6426: PUSH
6427: LD_VAR 0 8
6431: PPUSH
6432: CALL_OW 311
6436: DIFF
6437: ST_TO_ADDR
// RemoveUnit ( un ) ;
6438: LD_VAR 0 8
6442: PPUSH
6443: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6447: LD_ADDR_EXP 15
6451: PUSH
6452: LD_EXP 15
6456: PUSH
6457: LD_INT 1
6459: PLUS
6460: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6461: LD_ADDR_EXP 41
6465: PUSH
6466: LD_EXP 41
6470: PUSH
6471: LD_VAR 0 8
6475: DIFF
6476: ST_TO_ADDR
// RemoveUnit ( un ) ;
6477: LD_VAR 0 8
6481: PPUSH
6482: CALL_OW 64
// break ;
6486: GO 6890
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6488: LD_VAR 0 8
6492: PPUSH
6493: CALL_OW 305
6497: NOT
6498: PUSH
6499: LD_VAR 0 8
6503: PPUSH
6504: CALL_OW 310
6508: NOT
6509: AND
6510: IFFALSE 6528
// ruConvoySquad := ruConvoySquad diff un ;
6512: LD_ADDR_EXP 41
6516: PUSH
6517: LD_EXP 41
6521: PUSH
6522: LD_VAR 0 8
6526: DIFF
6527: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6528: LD_VAR 0 8
6532: PPUSH
6533: CALL_OW 302
6537: PUSH
6538: LD_VAR 0 8
6542: PPUSH
6543: CALL_OW 314
6547: NOT
6548: AND
6549: IFFALSE 6888
// begin tag := GetTag ( un ) ;
6551: LD_ADDR_VAR 0 9
6555: PUSH
6556: LD_VAR 0 8
6560: PPUSH
6561: CALL_OW 110
6565: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6566: LD_VAR 0 8
6570: PPUSH
6571: LD_VAR 0 7
6575: PUSH
6576: LD_VAR 0 9
6580: PUSH
6581: LD_INT 1
6583: PLUS
6584: ARRAY
6585: PUSH
6586: LD_INT 1
6588: ARRAY
6589: PPUSH
6590: LD_VAR 0 7
6594: PUSH
6595: LD_VAR 0 9
6599: PUSH
6600: LD_INT 1
6602: PLUS
6603: ARRAY
6604: PUSH
6605: LD_INT 2
6607: ARRAY
6608: PPUSH
6609: CALL_OW 297
6613: PUSH
6614: LD_INT 6
6616: LESS
6617: IFFALSE 6728
// begin SetTag ( un , tag + 1 ) ;
6619: LD_VAR 0 8
6623: PPUSH
6624: LD_VAR 0 9
6628: PUSH
6629: LD_INT 1
6631: PLUS
6632: PPUSH
6633: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6637: LD_VAR 0 8
6641: PPUSH
6642: CALL_OW 247
6646: PUSH
6647: LD_INT 2
6649: EQUAL
6650: PUSH
6651: LD_VAR 0 8
6655: PPUSH
6656: CALL_OW 257
6660: PUSH
6661: LD_INT 3
6663: EQUAL
6664: OR
6665: IFFALSE 6726
// begin AddComWait ( un , 0 0$4 ) ;
6667: LD_VAR 0 8
6671: PPUSH
6672: LD_INT 140
6674: PPUSH
6675: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6679: LD_VAR 0 8
6683: PPUSH
6684: LD_VAR 0 7
6688: PUSH
6689: LD_VAR 0 9
6693: PUSH
6694: LD_INT 1
6696: PLUS
6697: ARRAY
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PPUSH
6703: LD_VAR 0 7
6707: PUSH
6708: LD_VAR 0 9
6712: PUSH
6713: LD_INT 1
6715: PLUS
6716: ARRAY
6717: PUSH
6718: LD_INT 2
6720: ARRAY
6721: PPUSH
6722: CALL_OW 174
// end ; end else
6726: GO 6888
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6728: LD_VAR 0 8
6732: PPUSH
6733: CALL_OW 257
6737: PUSH
6738: LD_INT 4
6740: EQUAL
6741: PUSH
6742: LD_EXP 41
6746: PPUSH
6747: LD_INT 21
6749: PUSH
6750: LD_INT 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 3
6759: PUSH
6760: LD_INT 24
6762: PUSH
6763: LD_INT 1000
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PPUSH
6778: CALL_OW 72
6782: AND
6783: IFFALSE 6841
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6785: LD_VAR 0 8
6789: PPUSH
6790: LD_EXP 41
6794: PPUSH
6795: LD_INT 21
6797: PUSH
6798: LD_INT 1
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: LD_INT 24
6810: PUSH
6811: LD_INT 1000
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PPUSH
6826: CALL_OW 72
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: CALL_OW 128
6839: GO 6888
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6841: LD_VAR 0 8
6845: PPUSH
6846: LD_VAR 0 7
6850: PUSH
6851: LD_VAR 0 9
6855: PUSH
6856: LD_INT 1
6858: PLUS
6859: ARRAY
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PPUSH
6865: LD_VAR 0 7
6869: PUSH
6870: LD_VAR 0 9
6874: PUSH
6875: LD_INT 1
6877: PLUS
6878: ARRAY
6879: PUSH
6880: LD_INT 2
6882: ARRAY
6883: PPUSH
6884: CALL_OW 114
// end ; end ; end ;
6888: GO 6385
6890: POP
6891: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
6892: LD_EXP 41
6896: PPUSH
6897: LD_INT 52
6899: PUSH
6900: EMPTY
6901: LIST
6902: PUSH
6903: LD_INT 21
6905: PUSH
6906: LD_INT 1
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PPUSH
6917: CALL_OW 72
6921: NOT
6922: IFFALSE 6368
// end ;
6924: LD_VAR 0 1
6928: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6929: LD_EXP 16
6933: PUSH
6934: LD_INT 3
6936: PPUSH
6937: LD_INT 5
6939: PPUSH
6940: CALL_OW 12
6944: LESS
6945: PUSH
6946: LD_EXP 41
6950: NOT
6951: AND
6952: PUSH
6953: LD_OWVAR 67
6957: PUSH
6958: LD_INT 1
6960: GREATER
6961: AND
6962: IFFALSE 7350
6964: GO 6966
6966: DISABLE
6967: LD_INT 0
6969: PPUSH
6970: PPUSH
6971: PPUSH
// begin uc_side := 3 ;
6972: LD_ADDR_OWVAR 20
6976: PUSH
6977: LD_INT 3
6979: ST_TO_ADDR
// uc_nation := 3 ;
6980: LD_ADDR_OWVAR 21
6984: PUSH
6985: LD_INT 3
6987: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6988: LD_ADDR_VAR 0 1
6992: PUSH
6993: DOUBLE
6994: LD_INT 1
6996: DEC
6997: ST_TO_ADDR
6998: LD_INT 2
7000: PUSH
7001: LD_INT 3
7003: PUSH
7004: LD_INT 4
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: PUSH
7012: LD_OWVAR 67
7016: ARRAY
7017: PUSH
7018: FOR_TO
7019: IFFALSE 7271
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7021: LD_INT 3
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 24
7038: PUSH
7039: LD_INT 24
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: PPUSH
7054: LD_OWVAR 67
7058: PUSH
7059: LD_INT 2
7061: PLUS
7062: PPUSH
7063: CALL_OW 12
7067: ARRAY
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 42
7077: PUSH
7078: LD_INT 44
7080: PUSH
7081: LD_INT 43
7083: PUSH
7084: LD_INT 44
7086: PUSH
7087: LD_INT 46
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 1
7099: PPUSH
7100: LD_OWVAR 67
7104: PUSH
7105: LD_INT 2
7107: PLUS
7108: PPUSH
7109: CALL_OW 12
7113: ARRAY
7114: PPUSH
7115: LD_INT 90
7117: PPUSH
7118: CALL 435 0 7
// un := CreateVehicle ;
7122: LD_ADDR_VAR 0 3
7126: PUSH
7127: CALL_OW 45
7131: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7132: LD_VAR 0 3
7136: PPUSH
7137: LD_INT 0
7139: PPUSH
7140: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7144: LD_VAR 0 3
7148: PPUSH
7149: LD_INT 23
7151: PPUSH
7152: LD_INT 0
7154: PPUSH
7155: CALL 66352 0 3
7159: IFFALSE 7269
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7161: LD_ADDR_VAR 0 2
7165: PUSH
7166: LD_VAR 0 2
7170: PPUSH
7171: LD_VAR 0 2
7175: PUSH
7176: LD_INT 1
7178: PLUS
7179: PPUSH
7180: LD_VAR 0 3
7184: PPUSH
7185: CALL_OW 1
7189: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7190: LD_INT 0
7192: PPUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 4
7198: PUSH
7199: LD_INT 5
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: LD_OWVAR 67
7211: ARRAY
7212: PPUSH
7213: CALL_OW 383
// un := CreateHuman ;
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: CALL_OW 44
7226: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7227: LD_VAR 0 3
7231: PPUSH
7232: LD_VAR 0 2
7236: PUSH
7237: LD_VAR 0 2
7241: ARRAY
7242: PPUSH
7243: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7247: LD_VAR 0 3
7251: PPUSH
7252: LD_INT 80
7254: PPUSH
7255: LD_INT 139
7257: PPUSH
7258: CALL_OW 111
// wait ( 0 0$3 ) ;
7262: LD_INT 105
7264: PPUSH
7265: CALL_OW 67
// end ; end ;
7269: GO 7018
7271: POP
7272: POP
// for i in tmp do
7273: LD_ADDR_VAR 0 1
7277: PUSH
7278: LD_VAR 0 2
7282: PUSH
7283: FOR_IN
7284: IFFALSE 7348
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7286: LD_VAR 0 1
7290: PPUSH
7291: LD_INT 101
7293: PPUSH
7294: LD_INT 102
7296: PPUSH
7297: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7301: LD_VAR 0 1
7305: PPUSH
7306: LD_INT 110
7308: PPUSH
7309: LD_INT 78
7311: PPUSH
7312: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_INT 75
7323: PPUSH
7324: LD_INT 101
7326: PPUSH
7327: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7331: LD_VAR 0 1
7335: PPUSH
7336: LD_INT 57
7338: PPUSH
7339: LD_INT 83
7341: PPUSH
7342: CALL_OW 174
// end ;
7346: GO 7283
7348: POP
7349: POP
// end ; end_of_file
7350: PPOPN 3
7352: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7353: LD_VAR 0 1
7357: PUSH
7358: LD_EXP 21
7362: EQUAL
7363: IFFALSE 7372
// YouLost ( Heike ) ;
7365: LD_STRING Heike
7367: PPUSH
7368: CALL_OW 104
// if un in apeSoldGroup then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_EXP 42
7381: IN
7382: IFFALSE 7400
// apeSoldGroup := apeSoldGroup diff un ;
7384: LD_ADDR_EXP 42
7388: PUSH
7389: LD_EXP 42
7393: PUSH
7394: LD_VAR 0 1
7398: DIFF
7399: ST_TO_ADDR
// if un in apeEngGroup then
7400: LD_VAR 0 1
7404: PUSH
7405: LD_EXP 43
7409: IN
7410: IFFALSE 7428
// apeEngGroup := apeEngGroup diff un ;
7412: LD_ADDR_EXP 43
7416: PUSH
7417: LD_EXP 43
7421: PUSH
7422: LD_VAR 0 1
7426: DIFF
7427: ST_TO_ADDR
// if un in oilBaseGuard then
7428: LD_VAR 0 1
7432: PUSH
7433: LD_EXP 38
7437: IN
7438: IFFALSE 7456
// oilBaseGuard := oilBaseGuard diff un ;
7440: LD_ADDR_EXP 38
7444: PUSH
7445: LD_EXP 38
7449: PUSH
7450: LD_VAR 0 1
7454: DIFF
7455: ST_TO_ADDR
// if un in ruNorthGroup then
7456: LD_VAR 0 1
7460: PUSH
7461: LD_EXP 39
7465: IN
7466: IFFALSE 7484
// ruNorthGroup := ruNorthGroup diff un ;
7468: LD_ADDR_EXP 39
7472: PUSH
7473: LD_EXP 39
7477: PUSH
7478: LD_VAR 0 1
7482: DIFF
7483: ST_TO_ADDR
// if un in ruSouthGroup then
7484: LD_VAR 0 1
7488: PUSH
7489: LD_EXP 40
7493: IN
7494: IFFALSE 7512
// ruSouthGroup := ruSouthGroup diff un ;
7496: LD_ADDR_EXP 40
7500: PUSH
7501: LD_EXP 40
7505: PUSH
7506: LD_VAR 0 1
7510: DIFF
7511: ST_TO_ADDR
// if un in ruConvoySquad then
7512: LD_VAR 0 1
7516: PUSH
7517: LD_EXP 41
7521: IN
7522: IFFALSE 7540
// ruConvoySquad := ruConvoySquad diff un ;
7524: LD_ADDR_EXP 41
7528: PUSH
7529: LD_EXP 41
7533: PUSH
7534: LD_VAR 0 1
7538: DIFF
7539: ST_TO_ADDR
// end ;
7540: PPOPN 1
7542: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7543: LD_VAR 0 1
7547: PPUSH
7548: CALL_OW 264
7552: PUSH
7553: LD_INT 30
7555: EQUAL
7556: IFFALSE 7566
// radarConstructed := true ;
7558: LD_ADDR_EXP 13
7562: PUSH
7563: LD_INT 1
7565: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7566: LD_VAR 0 1
7570: PPUSH
7571: CALL_OW 264
7575: PUSH
7576: LD_INT 26
7578: EQUAL
7579: IFFALSE 7589
// flamethrowerBuilt := true ;
7581: LD_ADDR_EXP 20
7585: PUSH
7586: LD_INT 1
7588: ST_TO_ADDR
// end ;
7589: PPOPN 2
7591: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7592: LD_ADDR_EXP 18
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: LD_INT 1
7604: PLUS
7605: ST_TO_ADDR
// if oldId in ruConvoySquad then
7606: LD_VAR 0 2
7610: PUSH
7611: LD_EXP 41
7615: IN
7616: IFFALSE 7634
// ruConvoySquad := ruConvoySquad diff oldId ;
7618: LD_ADDR_EXP 41
7622: PUSH
7623: LD_EXP 41
7627: PUSH
7628: LD_VAR 0 2
7632: DIFF
7633: ST_TO_ADDR
// if newId in ruConvoySquad then
7634: LD_VAR 0 1
7638: PUSH
7639: LD_EXP 41
7643: IN
7644: IFFALSE 7662
// ruConvoySquad := ruConvoySquad diff newId ;
7646: LD_ADDR_EXP 41
7650: PUSH
7651: LD_EXP 41
7655: PUSH
7656: LD_VAR 0 1
7660: DIFF
7661: ST_TO_ADDR
// end ; end_of_file
7662: PPOPN 4
7664: END
// export function Action ; var i , un , veh , tmp ; begin
7665: LD_INT 0
7667: PPUSH
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
// InGameOn ;
7672: CALL_OW 8
// PauseMusic := true ;
7676: LD_ADDR_OWVAR 77
7680: PUSH
7681: LD_INT 1
7683: ST_TO_ADDR
// music_nat := 2 ;
7684: LD_ADDR_OWVAR 71
7688: PUSH
7689: LD_INT 2
7691: ST_TO_ADDR
// music_class := music_recon ;
7692: LD_ADDR_OWVAR 72
7696: PUSH
7697: LD_INT 3
7699: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7700: LD_INT 7
7702: PPUSH
7703: LD_INT 6
7705: PPUSH
7706: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7710: LD_INT 7
7712: PPUSH
7713: LD_INT 6
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: LD_INT 20
7721: NEG
7722: PPUSH
7723: CALL 1219 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7727: LD_ADDR_VAR 0 5
7731: PUSH
7732: LD_EXP 21
7736: PUSH
7737: LD_EXP 22
7741: PUSH
7742: LD_EXP 23
7746: PUSH
7747: LD_EXP 24
7751: PUSH
7752: LD_EXP 25
7756: PUSH
7757: LD_EXP 26
7761: PUSH
7762: LD_EXP 27
7766: PUSH
7767: LD_EXP 28
7771: PUSH
7772: LD_EXP 33
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: ST_TO_ADDR
// tmp := tmp diff 0 ;
7788: LD_ADDR_VAR 0 5
7792: PUSH
7793: LD_VAR 0 5
7797: PUSH
7798: LD_INT 0
7800: DIFF
7801: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7802: LD_ADDR_VAR 0 5
7806: PUSH
7807: LD_VAR 0 5
7811: PPUSH
7812: LD_INT 3
7814: PPUSH
7815: CALL 65944 0 2
7819: ST_TO_ADDR
// for i in heikeVehicles do
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: LD_EXP 35
7829: PUSH
7830: FOR_IN
7831: IFFALSE 8030
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7833: LD_INT 5
7835: PPUSH
7836: LD_VAR 0 2
7840: PUSH
7841: LD_INT 5
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 2
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_VAR 0 2
7858: PUSH
7859: LD_INT 2
7861: ARRAY
7862: PPUSH
7863: LD_VAR 0 2
7867: PUSH
7868: LD_INT 3
7870: ARRAY
7871: PPUSH
7872: LD_VAR 0 2
7876: PUSH
7877: LD_INT 4
7879: ARRAY
7880: PPUSH
7881: LD_INT 34
7883: PPUSH
7884: CALL 435 0 7
// veh := CreateVehicle ;
7888: LD_ADDR_VAR 0 4
7892: PUSH
7893: CALL_OW 45
7897: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7898: LD_VAR 0 2
7902: PUSH
7903: LD_INT 4
7905: ARRAY
7906: PUSH
7907: LD_INT 51
7909: PUSH
7910: LD_INT 32
7912: PUSH
7913: LD_INT 12
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: IN
7921: IFFALSE 8001
// begin if i [ 7 ] [ 1 ] then
7923: LD_VAR 0 2
7927: PUSH
7928: LD_INT 7
7930: ARRAY
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: IFFALSE 7962
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7937: LD_VAR 0 4
7941: PPUSH
7942: LD_INT 1
7944: PPUSH
7945: LD_VAR 0 2
7949: PUSH
7950: LD_INT 7
7952: ARRAY
7953: PUSH
7954: LD_INT 1
7956: ARRAY
7957: PPUSH
7958: CALL_OW 291
// if i [ 7 ] [ 2 ] then
7962: LD_VAR 0 2
7966: PUSH
7967: LD_INT 7
7969: ARRAY
7970: PUSH
7971: LD_INT 2
7973: ARRAY
7974: IFFALSE 8001
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
7976: LD_VAR 0 4
7980: PPUSH
7981: LD_INT 2
7983: PPUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 7
7991: ARRAY
7992: PUSH
7993: LD_INT 2
7995: ARRAY
7996: PPUSH
7997: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8001: LD_VAR 0 4
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8013: LD_VAR 0 4
8017: PPUSH
8018: LD_INT 4
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 49
// end ;
8028: GO 7830
8030: POP
8031: POP
// if tmp then
8032: LD_VAR 0 5
8036: IFFALSE 8091
// for i in tmp union heikeApes do
8038: LD_ADDR_VAR 0 2
8042: PUSH
8043: LD_VAR 0 5
8047: PUSH
8048: LD_EXP 36
8052: UNION
8053: PUSH
8054: FOR_IN
8055: IFFALSE 8089
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
8057: LD_VAR 0 2
8061: PPUSH
8062: LD_INT 5
8064: PPUSH
8065: LD_INT 0
8067: PPUSH
8068: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8072: LD_VAR 0 2
8076: PPUSH
8077: LD_INT 26
8079: PPUSH
8080: LD_INT 9
8082: PPUSH
8083: CALL_OW 118
// end ;
8087: GO 8054
8089: POP
8090: POP
// if heikeSecondSquad then
8091: LD_EXP 34
8095: IFFALSE 8144
// for i in heikeSecondSquad do
8097: LD_ADDR_VAR 0 2
8101: PUSH
8102: LD_EXP 34
8106: PUSH
8107: FOR_IN
8108: IFFALSE 8142
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8110: LD_VAR 0 2
8114: PPUSH
8115: LD_INT 6
8117: PPUSH
8118: LD_INT 0
8120: PPUSH
8121: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8125: LD_VAR 0 2
8129: PPUSH
8130: LD_INT 26
8132: PPUSH
8133: LD_INT 9
8135: PPUSH
8136: CALL_OW 118
// end ;
8140: GO 8107
8142: POP
8143: POP
// if heikeApes then
8144: LD_EXP 36
8148: IFFALSE 8191
// for i in heikeApes do
8150: LD_ADDR_VAR 0 2
8154: PUSH
8155: LD_EXP 36
8159: PUSH
8160: FOR_IN
8161: IFFALSE 8189
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8163: LD_VAR 0 2
8167: PPUSH
8168: LD_INT 7
8170: PPUSH
8171: LD_INT 0
8173: PPUSH
8174: CALL_OW 49
// ComHold ( i ) ;
8178: LD_VAR 0 2
8182: PPUSH
8183: CALL_OW 140
// end ;
8187: GO 8160
8189: POP
8190: POP
// if Kurt then
8191: LD_EXP 32
8195: IFFALSE 8227
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8197: LD_EXP 32
8201: PPUSH
8202: LD_INT 8
8204: PPUSH
8205: LD_INT 0
8207: PPUSH
8208: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8212: LD_EXP 32
8216: PPUSH
8217: LD_INT 42
8219: PPUSH
8220: LD_INT 32
8222: PPUSH
8223: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8227: LD_INT 70
8229: PPUSH
8230: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8234: LD_EXP 21
8238: PPUSH
8239: LD_STRING DH-Start-1
8241: PPUSH
8242: CALL_OW 88
// if Givi then
8246: LD_EXP 22
8250: IFFALSE 8513
// begin Say ( Givi , DG-Start-2-5 ) ;
8252: LD_EXP 22
8256: PPUSH
8257: LD_STRING DG-Start-2-5
8259: PPUSH
8260: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8264: LD_EXP 21
8268: PPUSH
8269: LD_STRING DH-Start-3
8271: PPUSH
8272: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8276: LD_EXP 21
8280: PPUSH
8281: LD_STRING DH-Start-4
8283: PPUSH
8284: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8288: LD_EXP 22
8292: PPUSH
8293: LD_STRING DG-Start-5
8295: PPUSH
8296: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8300: LD_EXP 21
8304: PPUSH
8305: LD_STRING DH-Start-6
8307: PPUSH
8308: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8312: LD_EXP 22
8316: PPUSH
8317: LD_STRING DG-Start-7
8319: PPUSH
8320: CALL_OW 88
// if Mike then
8324: LD_EXP 23
8328: IFFALSE 8501
// begin Say ( Mike , DM-Start-8 ) ;
8330: LD_EXP 23
8334: PPUSH
8335: LD_STRING DM-Start-8
8337: PPUSH
8338: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8342: LD_EXP 23
8346: PPUSH
8347: LD_STRING DM-Start-9
8349: PPUSH
8350: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8354: LD_EXP 22
8358: PPUSH
8359: LD_STRING DG-Start-10
8361: PPUSH
8362: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8366: LD_EXP 22
8370: PPUSH
8371: LD_STRING DG-Start-11
8373: PPUSH
8374: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8378: LD_EXP 21
8382: PPUSH
8383: LD_STRING DH-Start-12
8385: PPUSH
8386: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8390: LD_EXP 22
8394: PPUSH
8395: LD_STRING DG-Start-13
8397: PPUSH
8398: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8402: LD_EXP 22
8406: PPUSH
8407: LD_STRING DG-Start-14
8409: PPUSH
8410: CALL_OW 88
// if Kaia then
8414: LD_EXP 26
8418: IFFALSE 8501
// begin Say ( Kaia , DK-Start-15 ) ;
8420: LD_EXP 26
8424: PPUSH
8425: LD_STRING DK-Start-15
8427: PPUSH
8428: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8432: LD_EXP 26
8436: PPUSH
8437: LD_STRING DK-Start-16
8439: PPUSH
8440: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8444: LD_EXP 26
8448: PPUSH
8449: LD_STRING DK-Start-17
8451: PPUSH
8452: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8456: LD_INT 10
8458: PPUSH
8459: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8463: LD_EXP 22
8467: PPUSH
8468: LD_EXP 26
8472: PPUSH
8473: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8477: LD_EXP 22
8481: PPUSH
8482: LD_STRING DG-Start-18
8484: PPUSH
8485: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8489: LD_EXP 26
8493: PPUSH
8494: LD_STRING DK-Start-19
8496: PPUSH
8497: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8501: LD_EXP 21
8505: PPUSH
8506: LD_STRING DH-Start-20
8508: PPUSH
8509: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8513: LD_INT 70
8515: PPUSH
8516: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8520: LD_EXP 29
8524: PPUSH
8525: LD_STRING DShar-Start-21
8527: PPUSH
8528: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8532: LD_EXP 21
8536: PPUSH
8537: LD_STRING DH-Start-22
8539: PPUSH
8540: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8544: LD_EXP 29
8548: PPUSH
8549: LD_STRING DShar-Start-23
8551: PPUSH
8552: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8556: LD_EXP 29
8560: PPUSH
8561: LD_STRING DShar-Start-24
8563: PPUSH
8564: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8568: LD_EXP 29
8572: PPUSH
8573: LD_STRING DShar-Start-25
8575: PPUSH
8576: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8580: LD_EXP 29
8584: PPUSH
8585: LD_STRING DShar-Start-26
8587: PPUSH
8588: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8592: LD_EXP 21
8596: PPUSH
8597: LD_STRING DH-Start-27
8599: PPUSH
8600: CALL_OW 88
// if Kaia then
8604: LD_EXP 26
8608: IFFALSE 8650
// begin ComTurnUnit ( Heike , Kaia ) ;
8610: LD_EXP 21
8614: PPUSH
8615: LD_EXP 26
8619: PPUSH
8620: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8624: LD_EXP 26
8628: PPUSH
8629: LD_STRING DK-Start-28
8631: PPUSH
8632: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8636: LD_EXP 21
8640: PPUSH
8641: LD_STRING DH-Start-29
8643: PPUSH
8644: CALL_OW 88
// end else
8648: GO 8662
// Say ( Heike , DH-Start-a-28 ) ;
8650: LD_EXP 21
8654: PPUSH
8655: LD_STRING DH-Start-a-28
8657: PPUSH
8658: CALL_OW 88
// if Givi then
8662: LD_EXP 22
8666: IFFALSE 8901
// begin ComTurnUnit ( Heike , Givi ) ;
8668: LD_EXP 21
8672: PPUSH
8673: LD_EXP 22
8677: PPUSH
8678: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8682: LD_EXP 22
8686: PPUSH
8687: LD_EXP 21
8691: PPUSH
8692: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8696: LD_EXP 21
8700: PPUSH
8701: LD_STRING DH-Start-30
8703: PPUSH
8704: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8708: LD_EXP 21
8712: PPUSH
8713: LD_STRING DH-Start-31
8715: PPUSH
8716: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8720: LD_EXP 22
8724: PPUSH
8725: LD_STRING DG-Start-32
8727: PPUSH
8728: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8732: LD_EXP 21
8736: PPUSH
8737: LD_STRING DH-Start-33
8739: PPUSH
8740: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8744: LD_EXP 22
8748: PPUSH
8749: LD_STRING DG-Start-34
8751: PPUSH
8752: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8756: LD_EXP 22
8760: PPUSH
8761: LD_STRING DG-Start-35
8763: PPUSH
8764: CALL_OW 88
// if Kurt and not dialogue_skipped then
8768: LD_EXP 32
8772: PUSH
8773: LD_OWVAR 59
8777: NOT
8778: AND
8779: IFFALSE 8810
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8781: LD_EXP 32
8785: PPUSH
8786: LD_INT 28
8788: PPUSH
8789: LD_INT 13
8791: PPUSH
8792: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8796: LD_EXP 32
8800: PPUSH
8801: LD_EXP 21
8805: PPUSH
8806: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8810: LD_EXP 22
8814: PPUSH
8815: LD_STRING DG-Start-36
8817: PPUSH
8818: CALL_OW 88
// if Kurt then
8822: LD_EXP 32
8826: IFFALSE 8899
// begin if not Givi then
8828: LD_EXP 22
8832: NOT
8833: IFFALSE 8849
// Say ( Kurt , DKs-Start-37-a ) else
8835: LD_EXP 32
8839: PPUSH
8840: LD_STRING DKs-Start-37-a
8842: PPUSH
8843: CALL_OW 88
8847: GO 8861
// Say ( Kurt , DKs-Start-37 ) ;
8849: LD_EXP 32
8853: PPUSH
8854: LD_STRING DKs-Start-37
8856: PPUSH
8857: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
8861: LD_EXP 32
8865: PPUSH
8866: LD_STRING DKs-Start-38
8868: PPUSH
8869: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
8873: LD_EXP 21
8877: PPUSH
8878: LD_EXP 32
8882: PPUSH
8883: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
8887: LD_EXP 21
8891: PPUSH
8892: LD_STRING DH-Start-39
8894: PPUSH
8895: CALL_OW 88
// end ; end else
8899: GO 8930
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
8901: LD_EXP 34
8905: PPUSH
8906: LD_STRING DArm-Start-a-37
8908: PPUSH
8909: LD_STRING DArf-Start-a-37
8911: PPUSH
8912: CALL 1270 0 3
8916: IFFALSE 8930
// Say ( Heike , DH-Start-39 ) ;
8918: LD_EXP 21
8922: PPUSH
8923: LD_STRING DH-Start-39
8925: PPUSH
8926: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
8930: LD_INT 44
8932: PPUSH
8933: LD_INT 25
8935: PPUSH
8936: CALL_OW 428
8940: IFFALSE 8957
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
8942: LD_INT 44
8944: PPUSH
8945: LD_INT 25
8947: PPUSH
8948: CALL_OW 428
8952: PPUSH
8953: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
8957: LD_EXP 30
8961: PPUSH
8962: LD_INT 5
8964: PPUSH
8965: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
8969: LD_EXP 30
8973: PPUSH
8974: LD_INT 44
8976: PPUSH
8977: LD_INT 25
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
8987: LD_EXP 30
8991: PPUSH
8992: LD_INT 29
8994: PPUSH
8995: LD_INT 12
8997: PPUSH
8998: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9002: LD_INT 35
9004: PPUSH
9005: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9009: LD_OWVAR 59
9013: PUSH
9014: LD_EXP 21
9018: PPUSH
9019: LD_EXP 30
9023: PPUSH
9024: CALL_OW 296
9028: PUSH
9029: LD_INT 8
9031: LESS
9032: OR
9033: PUSH
9034: LD_EXP 30
9038: PPUSH
9039: LD_INT 26
9041: PPUSH
9042: LD_INT 9
9044: PPUSH
9045: CALL_OW 297
9049: PUSH
9050: LD_INT 6
9052: LESS
9053: OR
9054: IFFALSE 9002
// Say ( Olaf , DO-Scout-1 ) ;
9056: LD_EXP 30
9060: PPUSH
9061: LD_STRING DO-Scout-1
9063: PPUSH
9064: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9068: LD_EXP 30
9072: PPUSH
9073: LD_EXP 21
9077: PPUSH
9078: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9082: LD_ADDR_VAR 0 2
9086: PUSH
9087: LD_VAR 0 5
9091: PUSH
9092: LD_EXP 34
9096: UNION
9097: PUSH
9098: FOR_IN
9099: IFFALSE 9117
// ComTurnUnit ( i , Olaf ) ;
9101: LD_VAR 0 2
9105: PPUSH
9106: LD_EXP 30
9110: PPUSH
9111: CALL_OW 119
9115: GO 9098
9117: POP
9118: POP
// wait ( 0 0$0.3 ) ;
9119: LD_INT 10
9121: PPUSH
9122: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9126: LD_EXP 21
9130: PPUSH
9131: LD_EXP 30
9135: PPUSH
9136: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9140: LD_EXP 21
9144: PPUSH
9145: LD_EXP 30
9149: PPUSH
9150: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9154: LD_EXP 21
9158: PPUSH
9159: LD_STRING DH-Scout-2
9161: PPUSH
9162: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9166: LD_EXP 30
9170: PPUSH
9171: LD_STRING DO-Scout-3
9173: PPUSH
9174: CALL_OW 88
// if Mike and Givi then
9178: LD_EXP 23
9182: PUSH
9183: LD_EXP 22
9187: AND
9188: IFFALSE 9204
// Say ( Olaf , DO-Scout-4 ) else
9190: LD_EXP 30
9194: PPUSH
9195: LD_STRING DO-Scout-4
9197: PPUSH
9198: CALL_OW 88
9202: GO 9304
// begin if Mike then
9204: LD_EXP 23
9208: IFFALSE 9236
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9210: LD_EXP 30
9214: PPUSH
9215: LD_STRING DO-Scout-a-4
9217: PPUSH
9218: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9222: LD_EXP 21
9226: PPUSH
9227: LD_STRING DH-Scout-a-5
9229: PPUSH
9230: CALL_OW 88
// end else
9234: GO 9304
// if Givi then
9236: LD_EXP 22
9240: IFFALSE 9268
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9242: LD_EXP 30
9246: PPUSH
9247: LD_STRING DO-Scout-b-4
9249: PPUSH
9250: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9254: LD_EXP 21
9258: PPUSH
9259: LD_STRING DH-Scout-b-5
9261: PPUSH
9262: CALL_OW 88
// end else
9266: GO 9304
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9268: LD_EXP 30
9272: PPUSH
9273: LD_STRING DO-Scout-f-4
9275: PPUSH
9276: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9280: LD_EXP 21
9284: PPUSH
9285: LD_STRING DH-Scout-f-5
9287: PPUSH
9288: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9292: LD_EXP 30
9296: PPUSH
9297: LD_STRING DO-Scout-f-6
9299: PPUSH
9300: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9304: LD_EXP 21
9308: PPUSH
9309: LD_STRING DH-Scout-5
9311: PPUSH
9312: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9316: LD_EXP 30
9320: PPUSH
9321: LD_STRING DO-Scout-6
9323: PPUSH
9324: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9328: LD_EXP 30
9332: PPUSH
9333: LD_STRING DO-Scout-7
9335: PPUSH
9336: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9340: LD_EXP 21
9344: PPUSH
9345: LD_STRING DH-Scout-8
9347: PPUSH
9348: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9352: LD_EXP 21
9356: PPUSH
9357: LD_STRING DH-Scout-9
9359: PPUSH
9360: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9364: LD_EXP 30
9368: PPUSH
9369: LD_STRING DO-Scout-10
9371: PPUSH
9372: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9376: LD_EXP 30
9380: PPUSH
9381: LD_STRING DO-Scout-12
9383: PPUSH
9384: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9388: LD_EXP 30
9392: PPUSH
9393: LD_STRING DO-Scout-13
9395: PPUSH
9396: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9400: LD_EXP 30
9404: PPUSH
9405: LD_STRING DO-Scout-14
9407: PPUSH
9408: CALL_OW 88
// if Givi then
9412: LD_EXP 22
9416: IFFALSE 9442
// begin Say ( Givi , DG-Scout-15 ) ;
9418: LD_EXP 22
9422: PPUSH
9423: LD_STRING DG-Scout-15
9425: PPUSH
9426: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9430: LD_EXP 26
9434: PPUSH
9435: LD_STRING DK-Scout-16
9437: PPUSH
9438: CALL_OW 88
// end ; if not dialogue_skipped then
9442: LD_OWVAR 59
9446: NOT
9447: IFFALSE 9568
// begin async ;
9449: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9450: LD_EXP 30
9454: PPUSH
9455: LD_STRING DO-Scout-17
9457: PPUSH
9458: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9462: LD_INT 55
9464: PPUSH
9465: LD_INT 77
9467: PPUSH
9468: LD_INT 2
9470: PPUSH
9471: LD_INT 6
9473: NEG
9474: PPUSH
9475: CALL 1219 0 4
// wait ( 10 ) ;
9479: LD_INT 10
9481: PPUSH
9482: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9486: LD_INT 55
9488: PPUSH
9489: LD_INT 77
9491: PPUSH
9492: CALL_OW 84
// wait ( 0 0$5 ) ;
9496: LD_INT 175
9498: PPUSH
9499: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9503: LD_EXP 30
9507: PPUSH
9508: LD_STRING DO-Scout-18
9510: PPUSH
9511: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9515: LD_INT 204
9517: PPUSH
9518: LD_INT 107
9520: PPUSH
9521: LD_INT 2
9523: PPUSH
9524: LD_INT 12
9526: NEG
9527: PPUSH
9528: CALL 1219 0 4
// wait ( 10 ) ;
9532: LD_INT 10
9534: PPUSH
9535: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9539: LD_INT 204
9541: PPUSH
9542: LD_INT 107
9544: PPUSH
9545: CALL_OW 84
// wait ( 0 0$5 ) ;
9549: LD_INT 175
9551: PPUSH
9552: CALL_OW 67
// sync ;
9556: SYNC
// CenterNowOnUnits ( Heike ) ;
9557: LD_EXP 21
9561: PPUSH
9562: CALL_OW 87
// end else
9566: GO 9602
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9568: LD_INT 55
9570: PPUSH
9571: LD_INT 77
9573: PPUSH
9574: LD_INT 2
9576: PPUSH
9577: LD_INT 6
9579: NEG
9580: PPUSH
9581: CALL 1219 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9585: LD_INT 204
9587: PPUSH
9588: LD_INT 107
9590: PPUSH
9591: LD_INT 2
9593: PPUSH
9594: LD_INT 12
9596: NEG
9597: PPUSH
9598: CALL 1219 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
9602: LD_EXP 30
9606: PPUSH
9607: LD_STRING DO-Scout-19
9609: PPUSH
9610: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9614: LD_EXP 30
9618: PPUSH
9619: LD_STRING DO-Scout-20
9621: PPUSH
9622: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9626: LD_EXP 21
9630: PPUSH
9631: LD_STRING DH-Scout-21
9633: PPUSH
9634: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9638: LD_EXP 21
9642: PPUSH
9643: LD_STRING DH-Scout-22
9645: PPUSH
9646: CALL_OW 88
// InGameOff ;
9650: CALL_OW 9
// if Givi then
9654: LD_EXP 22
9658: IFFALSE 9673
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9660: LD_INT 13
9662: PPUSH
9663: LD_INT 2
9665: PPUSH
9666: LD_INT 1
9668: PPUSH
9669: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9673: LD_STRING Road
9675: PPUSH
9676: CALL_OW 337
// PauseMusic := false ;
9680: LD_ADDR_OWVAR 77
9684: PUSH
9685: LD_INT 0
9687: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9688: LD_ADDR_VAR 0 2
9692: PUSH
9693: LD_INT 22
9695: PUSH
9696: LD_INT 5
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 21
9705: PUSH
9706: LD_INT 2
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PPUSH
9717: CALL_OW 69
9721: PUSH
9722: FOR_IN
9723: IFFALSE 9739
// SetSide ( i , 2 ) ;
9725: LD_VAR 0 2
9729: PPUSH
9730: LD_INT 2
9732: PPUSH
9733: CALL_OW 235
9737: GO 9722
9739: POP
9740: POP
// SaveForQuickRestart ;
9741: CALL_OW 22
// music_class := music_auto ;
9745: LD_ADDR_OWVAR 72
9749: PUSH
9750: LD_INT 0
9752: ST_TO_ADDR
// end ;
9753: LD_VAR 0 1
9757: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9758: LD_INT 2
9760: PPUSH
9761: LD_INT 9
9763: PPUSH
9764: CALL_OW 294
9768: IFFALSE 10135
9770: GO 9772
9772: DISABLE
// begin DialogueOn ;
9773: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9777: LD_INT 111
9779: PPUSH
9780: LD_INT 72
9782: PPUSH
9783: LD_INT 2
9785: PPUSH
9786: LD_INT 20
9788: NEG
9789: PPUSH
9790: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9794: LD_INT 111
9796: PPUSH
9797: LD_INT 72
9799: PPUSH
9800: LD_INT 2
9802: PPUSH
9803: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9807: LD_INT 111
9809: PPUSH
9810: LD_INT 72
9812: PPUSH
9813: CALL_OW 86
// if IsOk ( Kamil ) then
9817: LD_EXP 25
9821: PPUSH
9822: CALL_OW 302
9826: IFFALSE 9943
// begin Say ( Kamil , DKam-Cross-1 ) ;
9828: LD_EXP 25
9832: PPUSH
9833: LD_STRING DKam-Cross-1
9835: PPUSH
9836: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9840: LD_EXP 25
9844: PPUSH
9845: LD_STRING DKam-Cross-2
9847: PPUSH
9848: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9852: LD_EXP 25
9856: PPUSH
9857: LD_STRING DKam-Cross-3
9859: PPUSH
9860: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
9864: LD_EXP 25
9868: PPUSH
9869: LD_STRING DKam-Cross-4
9871: PPUSH
9872: CALL_OW 88
// if IsOk ( Ibrahim ) then
9876: LD_EXP 24
9880: PPUSH
9881: CALL_OW 302
9885: IFFALSE 9941
// begin if ibrahimJoinedIn04 then
9887: LD_EXP 4
9891: IFFALSE 9905
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9893: LD_EXP 24
9897: PPUSH
9898: LD_STRING DI-Cross-b-5
9900: PPUSH
9901: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9905: LD_EXP 24
9909: PPUSH
9910: LD_STRING DI-Cross-b-6
9912: PPUSH
9913: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9917: LD_EXP 24
9921: PPUSH
9922: LD_STRING DI-Cross-b-7
9924: PPUSH
9925: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
9929: LD_EXP 25
9933: PPUSH
9934: LD_STRING DKam-Cross-8
9936: PPUSH
9937: CALL_OW 88
// end ; end else
9941: GO 10101
// if IsOk ( Sophia ) then
9943: LD_EXP 27
9947: PPUSH
9948: CALL_OW 302
9952: IFFALSE 10069
// begin Say ( Sophia , DS-Cross-1 ) ;
9954: LD_EXP 27
9958: PPUSH
9959: LD_STRING DS-Cross-1
9961: PPUSH
9962: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
9966: LD_EXP 27
9970: PPUSH
9971: LD_STRING DS-Cross-2
9973: PPUSH
9974: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
9978: LD_EXP 27
9982: PPUSH
9983: LD_STRING DS-Cross-3
9985: PPUSH
9986: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
9990: LD_EXP 27
9994: PPUSH
9995: LD_STRING DS-Cross-4
9997: PPUSH
9998: CALL_OW 88
// if IsOk ( Ibrahim ) then
10002: LD_EXP 24
10006: PPUSH
10007: CALL_OW 302
10011: IFFALSE 10067
// begin if ibrahimJoinedIn04 then
10013: LD_EXP 4
10017: IFFALSE 10031
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10019: LD_EXP 24
10023: PPUSH
10024: LD_STRING DI-Cross-b-5
10026: PPUSH
10027: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10031: LD_EXP 24
10035: PPUSH
10036: LD_STRING DI-Cross-b-6
10038: PPUSH
10039: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10043: LD_EXP 24
10047: PPUSH
10048: LD_STRING DI-Cross-b-7
10050: PPUSH
10051: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10055: LD_EXP 27
10059: PPUSH
10060: LD_STRING DS-Cross-8
10062: PPUSH
10063: CALL_OW 88
// end ; end else
10067: GO 10101
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10069: LD_EXP 34
10073: PPUSH
10074: LD_INT 50
10076: PUSH
10077: EMPTY
10078: LIST
10079: PPUSH
10080: CALL_OW 72
10084: IFFALSE 10101
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10086: LD_EXP 34
10090: PPUSH
10091: LD_STRING DArm-Cross-c-1
10093: PPUSH
10094: LD_STRING DArf-Cross-c-1
10096: PPUSH
10097: CALL 1270 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10101: LD_EXP 57
10105: PPUSH
10106: LD_INT 2
10108: PPUSH
10109: LD_INT 1
10111: PPUSH
10112: CALL_OW 322
// DialogueOff ;
10116: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10120: LD_STRING Crane
10122: PPUSH
10123: CALL_OW 337
// spottedCrossRoad := true ;
10127: LD_ADDR_EXP 8
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// end ;
10135: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10136: LD_INT 22
10138: PUSH
10139: LD_INT 2
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: LD_INT 30
10151: PUSH
10152: LD_INT 0
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 30
10161: PUSH
10162: LD_INT 1
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PPUSH
10178: CALL_OW 69
10182: PUSH
10183: LD_EXP 26
10187: PPUSH
10188: CALL_OW 302
10192: PUSH
10193: LD_EXP 34
10197: OR
10198: AND
10199: IFFALSE 10411
10201: GO 10203
10203: DISABLE
// begin DialogueOn ;
10204: CALL_OW 6
// if Kaia then
10208: LD_EXP 26
10212: IFFALSE 10225
// CenterNowOnUnits ( Kaia ) else
10214: LD_EXP 26
10218: PPUSH
10219: CALL_OW 87
10223: GO 10234
// CenterNowOnUnits ( Heike ) ;
10225: LD_EXP 21
10229: PPUSH
10230: CALL_OW 87
// if IsOk ( Kaia ) then
10234: LD_EXP 26
10238: PPUSH
10239: CALL_OW 302
10243: IFFALSE 10259
// Say ( Kaia , DK-Cam-1 ) else
10245: LD_EXP 26
10249: PPUSH
10250: LD_STRING DK-Cam-1
10252: PPUSH
10253: CALL_OW 88
10257: GO 10274
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10259: LD_EXP 34
10263: PPUSH
10264: LD_STRING DArm-Cam-1
10266: PPUSH
10267: LD_STRING DArf-Cam-1
10269: PPUSH
10270: CALL 1270 0 3
// Say ( Heike , DH-Cam-2 ) ;
10274: LD_EXP 21
10278: PPUSH
10279: LD_STRING DH-Cam-2
10281: PPUSH
10282: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10286: LD_EXP 21
10290: PPUSH
10291: LD_STRING DH-Cam-3
10293: PPUSH
10294: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10298: LD_EXP 21
10302: PPUSH
10303: LD_STRING DH-Cam-4
10305: PPUSH
10306: CALL_OW 88
// if IsOk ( Kaia ) then
10310: LD_EXP 26
10314: PPUSH
10315: CALL_OW 302
10319: IFFALSE 10335
// Say ( Kaia , DK-Cam-5 ) else
10321: LD_EXP 26
10325: PPUSH
10326: LD_STRING DK-Cam-5
10328: PPUSH
10329: CALL_OW 88
10333: GO 10350
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10335: LD_EXP 34
10339: PPUSH
10340: LD_STRING DArm-Cam-5
10342: PPUSH
10343: LD_STRING DArf-Cam-5
10345: PPUSH
10346: CALL 1270 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10350: LD_EXP 30
10354: PPUSH
10355: LD_STRING DO-Cam-6
10357: PPUSH
10358: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10362: LD_EXP 30
10366: PPUSH
10367: LD_STRING DO-Cam-7
10369: PPUSH
10370: CALL_OW 88
// DialogueOff ;
10374: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10378: LD_STRING Radar
10380: PPUSH
10381: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10385: LD_INT 6
10387: PPUSH
10388: LD_INT 2
10390: PPUSH
10391: LD_INT 1
10393: PPUSH
10394: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10398: LD_INT 20
10400: PPUSH
10401: LD_INT 2
10403: PPUSH
10404: LD_INT 1
10406: PPUSH
10407: CALL_OW 324
// end ;
10411: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10412: LD_INT 22
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: LD_INT 34
10427: PUSH
10428: LD_INT 30
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 35
10437: PUSH
10438: LD_INT 30
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 69
10458: IFFALSE 10470
10460: GO 10462
10462: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10463: LD_STRING RadarDone
10465: PPUSH
10466: CALL_OW 337
10470: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10471: LD_INT 22
10473: PUSH
10474: LD_INT 2
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 34
10483: PUSH
10484: LD_EXP 50
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PPUSH
10497: CALL_OW 69
10501: IFFALSE 10513
10503: GO 10505
10505: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10506: LD_STRING CraneDone
10508: PPUSH
10509: CALL_OW 337
10513: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10514: LD_EXP 30
10518: PPUSH
10519: CALL_OW 302
10523: PUSH
10524: LD_EXP 33
10528: PPUSH
10529: CALL_OW 302
10533: AND
10534: PUSH
10535: LD_INT 6
10537: PPUSH
10538: LD_INT 2
10540: PPUSH
10541: CALL_OW 321
10545: PUSH
10546: LD_INT 2
10548: EQUAL
10549: AND
10550: PUSH
10551: LD_EXP 33
10555: PPUSH
10556: LD_EXP 21
10560: PPUSH
10561: CALL_OW 296
10565: PUSH
10566: LD_INT 10
10568: LESS
10569: PUSH
10570: LD_EXP 33
10574: PPUSH
10575: CALL_OW 310
10579: OR
10580: AND
10581: IFFALSE 10795
10583: GO 10585
10585: DISABLE
// begin DialogueOn ;
10586: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10590: LD_EXP 33
10594: PPUSH
10595: LD_STRING DA-RC-1
10597: PPUSH
10598: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10602: LD_EXP 33
10606: PPUSH
10607: LD_STRING DA-RC-2
10609: PPUSH
10610: CALL_OW 88
// if IsOk ( Kaia ) then
10614: LD_EXP 26
10618: PPUSH
10619: CALL_OW 302
10623: IFFALSE 10697
// begin Say ( Kaia , DK-RC-3 ) ;
10625: LD_EXP 26
10629: PPUSH
10630: LD_STRING DK-RC-3
10632: PPUSH
10633: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10637: LD_EXP 33
10641: PPUSH
10642: LD_STRING DA-RC-4
10644: PPUSH
10645: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10649: LD_EXP 26
10653: PPUSH
10654: LD_STRING DK-RC-5
10656: PPUSH
10657: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10661: LD_EXP 33
10665: PPUSH
10666: LD_STRING DA-RC-6
10668: PPUSH
10669: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10673: LD_EXP 26
10677: PPUSH
10678: LD_STRING DK-RC-7
10680: PPUSH
10681: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10685: LD_EXP 33
10689: PPUSH
10690: LD_STRING DA-RC-8
10692: PPUSH
10693: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10697: LD_EXP 21
10701: PPUSH
10702: LD_STRING DH-RC-9
10704: PPUSH
10705: CALL_OW 88
// if IsOk ( Markov ) then
10709: LD_EXP 28
10713: PPUSH
10714: CALL_OW 302
10718: IFFALSE 10746
// begin Say ( Markov , DMar-RC-10 ) ;
10720: LD_EXP 28
10724: PPUSH
10725: LD_STRING DMar-RC-10
10727: PPUSH
10728: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10732: LD_EXP 28
10736: PPUSH
10737: LD_STRING DMar-RC-11
10739: PPUSH
10740: CALL_OW 88
// end else
10744: GO 10758
// begin Say ( Olaf , DO-RC-a-10 ) ;
10746: LD_EXP 30
10750: PPUSH
10751: LD_STRING DO-RC-a-10
10753: PPUSH
10754: CALL_OW 88
// end ; DialogueOff ;
10758: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10762: LD_STRING RemoteControl
10764: PPUSH
10765: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10769: LD_INT 15
10771: PPUSH
10772: LD_INT 2
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10782: LD_INT 22
10784: PPUSH
10785: LD_INT 2
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 324
// end ;
10795: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10796: LD_INT 12
10798: PPUSH
10799: LD_INT 22
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 70
10813: IFFALSE 11180
10815: GO 10817
10817: DISABLE
10818: LD_INT 0
10820: PPUSH
// begin PrepareWestBase ;
10821: CALL 3910 0 0
// westBaseSpotted := true ;
10825: LD_ADDR_EXP 5
10829: PUSH
10830: LD_INT 1
10832: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10833: LD_INT 70
10835: PPUSH
10836: CALL_OW 67
// InGameOn ;
10840: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10844: LD_INT 56
10846: PPUSH
10847: LD_INT 77
10849: PPUSH
10850: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10854: LD_INT 56
10856: PPUSH
10857: LD_INT 77
10859: PPUSH
10860: LD_INT 2
10862: PPUSH
10863: LD_INT 12
10865: NEG
10866: PPUSH
10867: CALL_OW 330
// wait ( 0 0$2 ) ;
10871: LD_INT 70
10873: PPUSH
10874: CALL_OW 67
// DialogueOn ;
10878: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
10882: LD_EXP 21
10886: PPUSH
10887: LD_STRING DH-Rbase-1
10889: PPUSH
10890: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
10894: LD_EXP 26
10898: PPUSH
10899: LD_STRING DK-Rbase-2
10901: PPUSH
10902: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
10906: LD_EXP 26
10910: PPUSH
10911: LD_STRING DK-Rbase-3
10913: PPUSH
10914: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
10918: LD_EXP 26
10922: PPUSH
10923: LD_STRING DK-Rbase-4
10925: PPUSH
10926: CALL_OW 88
// DialogueOff ;
10930: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
10934: LD_INT 56
10936: PPUSH
10937: LD_INT 77
10939: PPUSH
10940: LD_INT 2
10942: PPUSH
10943: CALL_OW 331
// InGameOff ;
10947: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
10951: LD_INT 35
10953: PPUSH
10954: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
10958: LD_EXP 42
10962: NOT
10963: PUSH
10964: LD_EXP 43
10968: NOT
10969: AND
10970: IFFALSE 10951
// wait ( 0 0$2 ) ;
10972: LD_INT 70
10974: PPUSH
10975: CALL_OW 67
// if IsOk ( Kaia ) then
10979: LD_EXP 26
10983: PPUSH
10984: CALL_OW 302
10988: IFFALSE 11103
// begin DialogueOn ;
10990: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
10994: LD_INT 56
10996: PPUSH
10997: LD_INT 81
10999: PPUSH
11000: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11004: LD_EXP 26
11008: PPUSH
11009: LD_STRING DK-Rbase-5
11011: PPUSH
11012: CALL_OW 88
// if IsOk ( Givi ) then
11016: LD_EXP 22
11020: PPUSH
11021: CALL_OW 302
11025: IFFALSE 11099
// begin Say ( Givi , DG-Rbase-6 ) ;
11027: LD_EXP 22
11031: PPUSH
11032: LD_STRING DG-Rbase-6
11034: PPUSH
11035: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11039: LD_EXP 22
11043: PPUSH
11044: LD_STRING DG-Rbase-7
11046: PPUSH
11047: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11051: LD_EXP 26
11055: PPUSH
11056: LD_STRING DK-Rbase-8
11058: PPUSH
11059: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11063: LD_EXP 22
11067: PPUSH
11068: LD_STRING DG-Rbase-9
11070: PPUSH
11071: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11075: LD_EXP 22
11079: PPUSH
11080: LD_STRING DG-Rbase-10
11082: PPUSH
11083: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11087: LD_EXP 26
11091: PPUSH
11092: LD_STRING DK-Rbase-11
11094: PPUSH
11095: CALL_OW 88
// end ; DialogueOff ;
11099: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11103: LD_ADDR_VAR 0 1
11107: PUSH
11108: LD_INT 12
11110: PPUSH
11111: LD_INT 22
11113: PUSH
11114: LD_INT 3
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 21
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PPUSH
11135: CALL_OW 70
11139: PUSH
11140: FOR_IN
11141: IFFALSE 11157
// SetSide ( i , 2 ) ;
11143: LD_VAR 0 1
11147: PPUSH
11148: LD_INT 2
11150: PPUSH
11151: CALL_OW 235
11155: GO 11140
11157: POP
11158: POP
// westBaseCaptured := true ;
11159: LD_ADDR_EXP 9
11163: PUSH
11164: LD_INT 1
11166: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11167: LD_INT 0
11169: PPUSH
11170: LD_INT 2
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 324
// end ;
11180: PPOPN 1
11182: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11183: LD_EXP 38
11187: NOT
11188: PUSH
11189: LD_INT 10
11191: PPUSH
11192: CALL_OW 255
11196: PUSH
11197: LD_INT 2
11199: EQUAL
11200: OR
11201: IFFALSE 11338
11203: GO 11205
11205: DISABLE
// begin DialogueOn ;
11206: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11210: LD_EXP 21
11214: PPUSH
11215: LD_STRING DH-Goal-1
11217: PPUSH
11218: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11222: LD_EXP 29
11226: PPUSH
11227: LD_STRING DShar-Goal-2
11229: PPUSH
11230: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11234: LD_EXP 21
11238: PPUSH
11239: LD_STRING DH-Goal-3
11241: PPUSH
11242: CALL_OW 88
// if reinforcementsAllowed then
11246: LD_EXP 14
11250: IFFALSE 11276
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11252: LD_EXP 29
11256: PPUSH
11257: LD_STRING DShar-Goal-4
11259: PPUSH
11260: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11264: LD_EXP 21
11268: PPUSH
11269: LD_STRING DH-Goal-5
11271: PPUSH
11272: CALL_OW 88
// end ; DialogueOff ;
11276: CALL_OW 7
// eastBaseCaptured := true ;
11280: LD_ADDR_EXP 10
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11288: LD_STRING BaseCaptured
11290: PPUSH
11291: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11295: LD_INT 10
11297: PPUSH
11298: LD_INT 2
11300: PPUSH
11301: CALL_OW 235
// if not reinforcementsAllowed then
11305: LD_EXP 14
11309: NOT
11310: IFFALSE 11314
// exit ;
11312: GO 11338
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11314: LD_INT 21000
11316: PUSH
11317: LD_INT 1050
11319: NEG
11320: PPUSH
11321: LD_INT 1050
11323: PPUSH
11324: CALL_OW 12
11328: PLUS
11329: PPUSH
11330: CALL_OW 67
// PrepareReinforcements ;
11334: CALL 2238 0 0
// end ;
11338: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11339: LD_INT 22
11341: PUSH
11342: LD_INT 2
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 30
11351: PUSH
11352: LD_INT 13
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 69
11367: IFFALSE 11384
11369: GO 11371
11371: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11372: LD_EXP 22
11376: PPUSH
11377: LD_STRING DG-Lab-1
11379: PPUSH
11380: CALL_OW 88
// end ;
11384: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11385: LD_INT 5
11387: PPUSH
11388: LD_INT 2
11390: PPUSH
11391: CALL_OW 321
11395: PUSH
11396: LD_INT 2
11398: EQUAL
11399: PUSH
11400: LD_EXP 22
11404: PPUSH
11405: CALL_OW 302
11409: AND
11410: IFFALSE 11471
11412: GO 11414
11414: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11415: LD_EXP 22
11419: PPUSH
11420: LD_STRING DG-Stim-1
11422: PPUSH
11423: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11427: LD_EXP 21
11431: PPUSH
11432: LD_STRING DH-Stim-2
11434: PPUSH
11435: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11439: LD_EXP 22
11443: PPUSH
11444: LD_STRING DG-Stim-3
11446: PPUSH
11447: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11451: LD_EXP 21
11455: PPUSH
11456: LD_STRING DH-Stim-4
11458: PPUSH
11459: CALL_OW 88
// drugsResearched := true ;
11463: LD_ADDR_EXP 11
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// end ;
11471: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11472: LD_EXP 11
11476: IFFALSE 11788
11478: GO 11480
11480: DISABLE
11481: LD_INT 0
11483: PPUSH
11484: PPUSH
11485: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11486: LD_ADDR_VAR 0 2
11490: PUSH
11491: LD_EXP 21
11495: PUSH
11496: LD_EXP 22
11500: PUSH
11501: LD_EXP 30
11505: PUSH
11506: LD_EXP 28
11510: PUSH
11511: LD_EXP 26
11515: PUSH
11516: LD_EXP 27
11520: PUSH
11521: LD_EXP 32
11525: PUSH
11526: LD_EXP 25
11530: PUSH
11531: LD_EXP 23
11535: PUSH
11536: LD_EXP 24
11540: PUSH
11541: LD_EXP 33
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11559: LD_ADDR_VAR 0 3
11563: PUSH
11564: LD_STRING H
11566: PUSH
11567: LD_STRING G
11569: PUSH
11570: LD_STRING O
11572: PUSH
11573: LD_STRING Mar
11575: PUSH
11576: LD_STRING K
11578: PUSH
11579: LD_STRING S
11581: PUSH
11582: LD_STRING Ks
11584: PUSH
11585: LD_STRING Kam
11587: PUSH
11588: LD_STRING M
11590: PUSH
11591: LD_STRING I
11593: PUSH
11594: LD_STRING A
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11610: LD_INT 35
11612: PPUSH
11613: CALL_OW 67
// for i := tmp downto 1 do
11617: LD_ADDR_VAR 0 1
11621: PUSH
11622: DOUBLE
11623: LD_VAR 0 2
11627: INC
11628: ST_TO_ADDR
11629: LD_INT 1
11631: PUSH
11632: FOR_DOWNTO
11633: IFFALSE 11779
// if GetLives ( tmp [ i ] ) < 250 then
11635: LD_VAR 0 2
11639: PUSH
11640: LD_VAR 0 1
11644: ARRAY
11645: PPUSH
11646: CALL_OW 256
11650: PUSH
11651: LD_INT 250
11653: LESS
11654: IFFALSE 11777
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11656: LD_ADDR_EXP 19
11660: PUSH
11661: LD_EXP 19
11665: PUSH
11666: LD_INT 1
11668: PLUS
11669: ST_TO_ADDR
// DialogueOn ;
11670: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11674: LD_VAR 0 2
11678: PUSH
11679: LD_VAR 0 1
11683: ARRAY
11684: PPUSH
11685: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11689: LD_VAR 0 2
11693: PUSH
11694: LD_VAR 0 1
11698: ARRAY
11699: PPUSH
11700: LD_STRING D
11702: PUSH
11703: LD_VAR 0 3
11707: PUSH
11708: LD_VAR 0 1
11712: ARRAY
11713: STR
11714: PUSH
11715: LD_STRING -Stim-a-1
11717: STR
11718: PPUSH
11719: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11723: LD_ADDR_VAR 0 2
11727: PUSH
11728: LD_VAR 0 2
11732: PPUSH
11733: LD_VAR 0 1
11737: PPUSH
11738: CALL_OW 3
11742: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11743: LD_ADDR_VAR 0 3
11747: PUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: LD_VAR 0 1
11757: PPUSH
11758: CALL_OW 3
11762: ST_TO_ADDR
// drugsTested := true ;
11763: LD_ADDR_EXP 6
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// DialogueOff ;
11771: CALL_OW 7
// break ;
11775: GO 11779
// end ;
11777: GO 11632
11779: POP
11780: POP
// until not tmp ;
11781: LD_VAR 0 2
11785: NOT
11786: IFFALSE 11610
// end ;
11788: PPOPN 3
11790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11791: LD_INT 22
11793: PUSH
11794: LD_INT 2
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 34
11803: PUSH
11804: LD_INT 31
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_INT 2
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 33
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PPUSH
11844: CALL_OW 69
11848: AND
11849: IFFALSE 11862
11851: GO 11853
11853: DISABLE
// remoteControlConstructed := true ;
11854: LD_ADDR_EXP 12
11858: PUSH
11859: LD_INT 1
11861: ST_TO_ADDR
11862: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
11863: LD_EXP 12
11867: IFFALSE 12167
11869: GO 11871
11871: DISABLE
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
11876: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11877: LD_ADDR_VAR 0 2
11881: PUSH
11882: LD_EXP 21
11886: PUSH
11887: LD_EXP 22
11891: PUSH
11892: LD_EXP 30
11896: PUSH
11897: LD_EXP 28
11901: PUSH
11902: LD_EXP 26
11906: PUSH
11907: LD_EXP 27
11911: PUSH
11912: LD_EXP 32
11916: PUSH
11917: LD_EXP 25
11921: PUSH
11922: LD_EXP 23
11926: PUSH
11927: LD_EXP 24
11931: PUSH
11932: LD_EXP 33
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11950: LD_ADDR_VAR 0 3
11954: PUSH
11955: LD_STRING H
11957: PUSH
11958: LD_STRING G
11960: PUSH
11961: LD_STRING O
11963: PUSH
11964: LD_STRING Mar
11966: PUSH
11967: LD_STRING K
11969: PUSH
11970: LD_STRING S
11972: PUSH
11973: LD_STRING Ks
11975: PUSH
11976: LD_STRING Kam
11978: PUSH
11979: LD_STRING M
11981: PUSH
11982: LD_STRING I
11984: PUSH
11985: LD_STRING A
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12001: LD_INT 35
12003: PPUSH
12004: CALL_OW 67
// for i := tmp downto 1 do
12008: LD_ADDR_VAR 0 1
12012: PUSH
12013: DOUBLE
12014: LD_VAR 0 2
12018: INC
12019: ST_TO_ADDR
12020: LD_INT 1
12022: PUSH
12023: FOR_DOWNTO
12024: IFFALSE 12158
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12026: LD_VAR 0 2
12030: PUSH
12031: LD_VAR 0 1
12035: ARRAY
12036: PPUSH
12037: CALL_OW 257
12041: PUSH
12042: LD_INT 3
12044: EQUAL
12045: PUSH
12046: LD_VAR 0 2
12050: PUSH
12051: LD_VAR 0 1
12055: ARRAY
12056: PPUSH
12057: CALL_OW 432
12061: AND
12062: IFFALSE 12156
// begin DialogueOn ;
12064: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12068: LD_VAR 0 2
12072: PUSH
12073: LD_VAR 0 1
12077: ARRAY
12078: PPUSH
12079: LD_STRING D
12081: PUSH
12082: LD_VAR 0 3
12086: PUSH
12087: LD_VAR 0 1
12091: ARRAY
12092: STR
12093: PUSH
12094: LD_STRING -RC-a-1
12096: STR
12097: PPUSH
12098: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_VAR 0 2
12111: PPUSH
12112: LD_VAR 0 1
12116: PPUSH
12117: CALL_OW 3
12121: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_VAR 0 3
12131: PPUSH
12132: LD_VAR 0 1
12136: PPUSH
12137: CALL_OW 3
12141: ST_TO_ADDR
// DialogueOff ;
12142: CALL_OW 7
// remoteControlTested := true ;
12146: LD_ADDR_EXP 7
12150: PUSH
12151: LD_INT 1
12153: ST_TO_ADDR
// break ;
12154: GO 12158
// end ;
12156: GO 12023
12158: POP
12159: POP
// until not tmp ;
12160: LD_VAR 0 2
12164: NOT
12165: IFFALSE 12001
// end ;
12167: PPOPN 3
12169: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12170: LD_EXP 7
12174: PUSH
12175: LD_EXP 28
12179: PPUSH
12180: CALL_OW 302
12184: AND
12185: IFFALSE 12214
12187: GO 12189
12189: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12190: LD_EXP 28
12194: PPUSH
12195: LD_STRING DMar-RC-a-2
12197: PPUSH
12198: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12202: LD_EXP 28
12206: PPUSH
12207: LD_STRING DMar-RC-a-3
12209: PPUSH
12210: CALL_OW 88
// end ;
12214: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12215: LD_EXP 14
12219: PUSH
12220: LD_EXP 21
12224: PPUSH
12225: LD_EXP 33
12229: PPUSH
12230: CALL_OW 296
12234: PUSH
12235: LD_INT 8
12237: LESS
12238: AND
12239: PUSH
12240: LD_INT 2
12242: PPUSH
12243: CALL_OW 463
12247: NOT
12248: AND
12249: PUSH
12250: LD_EXP 33
12254: PPUSH
12255: CALL_OW 302
12259: AND
12260: PUSH
12261: LD_EXP 21
12265: PPUSH
12266: CALL_OW 302
12270: AND
12271: IFFALSE 12449
12273: GO 12275
12275: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12276: LD_EXP 33
12280: PPUSH
12281: CALL_OW 310
12285: NOT
12286: IFFALSE 12302
// ComTurnUnit ( Aviradze , Heike ) ;
12288: LD_EXP 33
12292: PPUSH
12293: LD_EXP 21
12297: PPUSH
12298: CALL_OW 119
// if not IsInUnit ( Heike ) then
12302: LD_EXP 21
12306: PPUSH
12307: CALL_OW 310
12311: NOT
12312: IFFALSE 12328
// ComTurnUnit ( Heike , Aviradze ) ;
12314: LD_EXP 21
12318: PPUSH
12319: LD_EXP 33
12323: PPUSH
12324: CALL_OW 119
// wait ( 0 0$1 ) ;
12328: LD_INT 35
12330: PPUSH
12331: CALL_OW 67
// DialogueOn ;
12335: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12339: LD_EXP 33
12343: PPUSH
12344: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12348: LD_EXP 21
12352: PPUSH
12353: LD_STRING DH-Beria-1
12355: PPUSH
12356: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12360: LD_EXP 33
12364: PPUSH
12365: LD_STRING DA-Beria-2
12367: PPUSH
12368: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12372: LD_EXP 21
12376: PPUSH
12377: LD_STRING DH-Beria-3
12379: PPUSH
12380: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12384: LD_EXP 33
12388: PPUSH
12389: LD_STRING DA-Beria-4
12391: PPUSH
12392: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12396: LD_EXP 33
12400: PPUSH
12401: LD_STRING DA-Beria-5
12403: PPUSH
12404: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12408: LD_EXP 33
12412: PPUSH
12413: LD_STRING DA-Beria-6
12415: PPUSH
12416: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12420: LD_EXP 21
12424: PPUSH
12425: LD_STRING DA-Beria-7
12427: PPUSH
12428: CALL_OW 88
// DialogueOff ;
12432: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12436: LD_INT 52
12438: PPUSH
12439: LD_INT 2
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// end ;
12449: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
12450: LD_EXP 26
12454: PPUSH
12455: CALL_OW 300
12459: PUSH
12460: LD_EXP 26
12464: PPUSH
12465: CALL_OW 256
12469: PUSH
12470: LD_INT 10
12472: LESS
12473: AND
12474: IFFALSE 12511
12476: GO 12478
12478: DISABLE
// begin DialogueOn ;
12479: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12483: LD_EXP 26
12487: PPUSH
12488: LD_STRING DK-Kdeath-1
12490: PPUSH
12491: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12495: LD_EXP 21
12499: PPUSH
12500: LD_STRING DH-Kdeath-2
12502: PPUSH
12503: CALL_OW 88
// DialogueOff ;
12507: CALL_OW 7
// end ;
12511: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12512: LD_INT 2
12514: PPUSH
12515: LD_EXP 39
12519: PPUSH
12520: CALL 1370 0 2
12524: IFFALSE 12541
12526: GO 12528
12528: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12529: LD_EXP 21
12533: PPUSH
12534: LD_STRING DH-Obj-1
12536: PPUSH
12537: CALL_OW 88
12541: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12542: LD_INT 2
12544: PPUSH
12545: LD_EXP 40
12549: PPUSH
12550: CALL 1370 0 2
12554: IFFALSE 12571
12556: GO 12558
12558: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12559: LD_EXP 21
12563: PPUSH
12564: LD_STRING DH-Obj-a-1
12566: PPUSH
12567: CALL_OW 88
12571: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12572: LD_EXP 10
12576: PUSH
12577: LD_OWVAR 1
12581: PUSH
12582: LD_INT 14700
12584: PUSH
12585: LD_INT 13650
12587: PUSH
12588: LD_INT 12600
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_OWVAR 67
12600: ARRAY
12601: GREATEREQUAL
12602: OR
12603: IFFALSE 12631
12605: GO 12607
12607: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12608: LD_INT 4200
12610: PPUSH
12611: LD_INT 5250
12613: PPUSH
12614: CALL_OW 12
12618: PPUSH
12619: CALL_OW 67
// convoyStarted := true ;
12623: LD_ADDR_EXP 17
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// end ;
12631: END
// every 0 0$1 trigger convoyStarted do
12632: LD_EXP 17
12636: IFFALSE 12720
12638: GO 12640
12640: DISABLE
// begin DialogueOn ;
12641: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12645: LD_EXP 29
12649: PPUSH
12650: LD_STRING DShar-Convoy-1
12652: PPUSH
12653: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12657: LD_EXP 21
12661: PPUSH
12662: LD_STRING DH-Convoy-2
12664: PPUSH
12665: CALL_OW 88
// DialogueOff ;
12669: CALL_OW 7
// PrepareConvoy ;
12673: CALL 4549 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
12677: LD_INT 5250
12679: PPUSH
12680: LD_INT 11550
12682: PPUSH
12683: CALL_OW 12
12687: PPUSH
12688: CALL_OW 67
// PrepareConvoy ;
12692: CALL 4549 0 0
// convoyCounter := convoyCounter - 1 ;
12696: LD_ADDR_EXP 16
12700: PUSH
12701: LD_EXP 16
12705: PUSH
12706: LD_INT 1
12708: MINUS
12709: ST_TO_ADDR
// until convoyCounter <= 0 ;
12710: LD_EXP 16
12714: PUSH
12715: LD_INT 0
12717: LESSEQUAL
12718: IFFALSE 12677
// end ;
12720: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12721: LD_EXP 15
12725: PUSH
12726: LD_INT 10
12728: GREATEREQUAL
12729: IFFALSE 12746
12731: GO 12733
12733: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12734: LD_EXP 31
12738: PPUSH
12739: LD_STRING DOm-Fail-1
12741: PPUSH
12742: CALL_OW 94
12746: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12747: LD_EXP 39
12751: NOT
12752: PUSH
12753: LD_EXP 40
12757: NOT
12758: AND
12759: IFFALSE 12771
12761: GO 12763
12763: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12764: LD_STRING RaiderDone
12766: PPUSH
12767: CALL_OW 337
12771: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12772: LD_INT 22
12774: PUSH
12775: LD_INT 2
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 33
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PPUSH
12796: CALL_OW 69
12800: PUSH
12801: LD_INT 3
12803: GREATEREQUAL
12804: PUSH
12805: LD_INT 22
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 34
12817: PUSH
12818: LD_INT 31
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: PUSH
12834: LD_INT 2
12836: GREATEREQUAL
12837: AND
12838: IFFALSE 12850
12840: GO 12842
12842: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12843: LD_STRING RemoteControlDone
12845: PPUSH
12846: CALL_OW 337
12850: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
12851: LD_EXP 16
12855: PUSH
12856: LD_INT 1
12858: LESS
12859: PUSH
12860: LD_EXP 41
12864: PPUSH
12865: LD_INT 52
12867: PUSH
12868: EMPTY
12869: LIST
12870: PUSH
12871: LD_INT 21
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PPUSH
12885: CALL_OW 72
12889: NOT
12890: AND
12891: PUSH
12892: LD_OWVAR 1
12896: PUSH
12897: LD_INT 126000
12899: GREATEREQUAL
12900: OR
12901: IFFALSE 13718
12903: GO 12905
12905: DISABLE
12906: LD_INT 0
12908: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12909: LD_STRING ReinforcementsDone
12911: PPUSH
12912: CALL_OW 337
// music_class := music_victory ;
12916: LD_ADDR_OWVAR 72
12920: PUSH
12921: LD_INT 4
12923: ST_TO_ADDR
// InGameOn ;
12924: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12928: LD_EXP 21
12932: PPUSH
12933: LD_STRING DH-end-1
12935: PPUSH
12936: CALL_OW 88
// wait ( 0 0$2 ) ;
12940: LD_INT 70
12942: PPUSH
12943: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12947: LD_EXP 29
12951: PPUSH
12952: LD_STRING DShar-end-2
12954: PPUSH
12955: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12959: LD_EXP 39
12963: NOT
12964: PUSH
12965: LD_EXP 40
12969: NOT
12970: AND
12971: IFFALSE 12987
// begin Say ( Heike , DH-end-3 ) ;
12973: LD_EXP 21
12977: PPUSH
12978: LD_STRING DH-end-3
12980: PPUSH
12981: CALL_OW 88
// end else
12985: GO 13084
// begin Say ( Heike , DH-end-a-3 ) ;
12987: LD_EXP 21
12991: PPUSH
12992: LD_STRING DH-end-a-3
12994: PPUSH
12995: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12999: LD_EXP 29
13003: PPUSH
13004: LD_STRING DShar-end-a-4
13006: PPUSH
13007: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13011: LD_EXP 21
13015: PPUSH
13016: LD_STRING DH-end-a-5
13018: PPUSH
13019: CALL_OW 88
// InGameOff ;
13023: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13027: LD_INT 35
13029: PPUSH
13030: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13034: LD_INT 22
13036: PUSH
13037: LD_INT 3
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 21
13046: PUSH
13047: LD_INT 1
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PPUSH
13058: CALL_OW 69
13062: PUSH
13063: LD_INT 0
13065: EQUAL
13066: IFFALSE 13027
// InGameOn ;
13068: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13072: LD_EXP 21
13076: PPUSH
13077: LD_STRING DH-end-a-6
13079: PPUSH
13080: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13084: LD_EXP 29
13088: PPUSH
13089: LD_STRING DShar-end-3
13091: PPUSH
13092: CALL_OW 94
// if not flamethrowerBuilt then
13096: LD_EXP 20
13100: NOT
13101: IFFALSE 13110
// SetAchievement ( ACH_FIRE ) ;
13103: LD_STRING ACH_FIRE
13105: PPUSH
13106: CALL_OW 543
// if drugsTested then
13110: LD_EXP 6
13114: IFFALSE 13128
// AddMedal ( med1 , 1 ) else
13116: LD_STRING med1
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 101
13126: GO 13168
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13128: LD_INT 5
13130: PPUSH
13131: LD_INT 2
13133: PPUSH
13134: CALL_OW 321
13138: PUSH
13139: LD_INT 2
13141: EQUAL
13142: IFFALSE 13157
// AddMedal ( med1 , - 1 ) else
13144: LD_STRING med1
13146: PPUSH
13147: LD_INT 1
13149: NEG
13150: PPUSH
13151: CALL_OW 101
13155: GO 13168
// AddMedal ( med1 , - 2 ) ;
13157: LD_STRING med1
13159: PPUSH
13160: LD_INT 2
13162: NEG
13163: PPUSH
13164: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13168: LD_INT 22
13170: PUSH
13171: LD_INT 2
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PPUSH
13192: CALL_OW 69
13196: PUSH
13197: LD_INT 3
13199: GREATEREQUAL
13200: PUSH
13201: LD_INT 22
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 34
13213: PUSH
13214: LD_INT 31
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: PUSH
13230: LD_INT 1
13232: GREATEREQUAL
13233: AND
13234: IFFALSE 13248
// AddMedal ( med2 , 1 ) else
13236: LD_STRING med2
13238: PPUSH
13239: LD_INT 1
13241: PPUSH
13242: CALL_OW 101
13246: GO 13259
// AddMedal ( med2 , - 1 ) ;
13248: LD_STRING med2
13250: PPUSH
13251: LD_INT 1
13253: NEG
13254: PPUSH
13255: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13259: LD_EXP 15
13263: PUSH
13264: LD_INT 10
13266: PUSH
13267: LD_INT 8
13269: PUSH
13270: LD_INT 6
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: PUSH
13278: LD_OWVAR 67
13282: ARRAY
13283: LESS
13284: IFFALSE 13298
// AddMedal ( med3 , 1 ) else
13286: LD_STRING med3
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: CALL_OW 101
13296: GO 13309
// AddMedal ( med3 , - 1 ) ;
13298: LD_STRING med3
13300: PPUSH
13301: LD_INT 1
13303: NEG
13304: PPUSH
13305: CALL_OW 101
// GiveMedals ( MAIN ) ;
13309: LD_STRING MAIN
13311: PPUSH
13312: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13316: LD_INT 22
13318: PUSH
13319: LD_INT 2
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 23
13328: PUSH
13329: LD_INT 2
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 21
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: PPUSH
13351: CALL_OW 69
13355: PPUSH
13356: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13360: LD_EXP 15
13364: PPUSH
13365: LD_STRING 05_ConvoySavedCounter
13367: PPUSH
13368: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13372: LD_EXP 13
13376: PPUSH
13377: LD_STRING 05_Radar
13379: PPUSH
13380: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13384: LD_EXP 6
13388: PPUSH
13389: LD_STRING 05_DrugsTested
13391: PPUSH
13392: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13396: LD_INT 22
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 33
13408: PUSH
13409: LD_INT 2
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: PUSH
13425: LD_INT 3
13427: GREATEREQUAL
13428: PUSH
13429: LD_INT 22
13431: PUSH
13432: LD_INT 2
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 34
13441: PUSH
13442: LD_INT 31
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 69
13457: PUSH
13458: LD_INT 2
13460: GREATEREQUAL
13461: AND
13462: PPUSH
13463: LD_STRING 05_RemoteControl
13465: PPUSH
13466: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13470: LD_EXP 21
13474: PPUSH
13475: LD_STRING 05_Heike
13477: PPUSH
13478: CALL_OW 38
// if Aviradze then
13482: LD_EXP 33
13486: IFFALSE 13500
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13488: LD_EXP 33
13492: PPUSH
13493: LD_STRING 05_Aviradze
13495: PPUSH
13496: CALL_OW 38
// if Ibrahim then
13500: LD_EXP 24
13504: IFFALSE 13518
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13506: LD_EXP 24
13510: PPUSH
13511: LD_STRING 05_Ibrahim
13513: PPUSH
13514: CALL_OW 38
// if Kamil then
13518: LD_EXP 25
13522: IFFALSE 13536
// SaveCharacters ( Kamil , 05_Kamil ) ;
13524: LD_EXP 25
13528: PPUSH
13529: LD_STRING 05_Kamil
13531: PPUSH
13532: CALL_OW 38
// if Sophia then
13536: LD_EXP 27
13540: IFFALSE 13554
// SaveCharacters ( Sophia , 05_Sophia ) ;
13542: LD_EXP 27
13546: PPUSH
13547: LD_STRING 05_Sophia
13549: PPUSH
13550: CALL_OW 38
// if Kaia then
13554: LD_EXP 26
13558: IFFALSE 13572
// SaveCharacters ( Kaia , 05_Kaia ) ;
13560: LD_EXP 26
13564: PPUSH
13565: LD_STRING 05_Kaia
13567: PPUSH
13568: CALL_OW 38
// if Givi then
13572: LD_EXP 22
13576: IFFALSE 13590
// SaveCharacters ( Givi , 05_Givi ) ;
13578: LD_EXP 22
13582: PPUSH
13583: LD_STRING 05_Givi
13585: PPUSH
13586: CALL_OW 38
// if Mike then
13590: LD_EXP 23
13594: IFFALSE 13608
// SaveCharacters ( Mike , 05_Mike ) ;
13596: LD_EXP 23
13600: PPUSH
13601: LD_STRING 05_Mike
13603: PPUSH
13604: CALL_OW 38
// if Markov then
13608: LD_EXP 28
13612: IFFALSE 13626
// SaveCharacters ( Markov , 05_Markov ) ;
13614: LD_EXP 28
13618: PPUSH
13619: LD_STRING 05_Markov
13621: PPUSH
13622: CALL_OW 38
// if Kurt then
13626: LD_EXP 32
13630: IFFALSE 13644
// SaveCharacters ( Kurt , 05_Kurt ) ;
13632: LD_EXP 32
13636: PPUSH
13637: LD_STRING 05_Kurt
13639: PPUSH
13640: CALL_OW 38
// if heikeSecondSquad then
13644: LD_EXP 34
13648: IFFALSE 13662
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13650: LD_EXP 34
13654: PPUSH
13655: LD_STRING 05_others
13657: PPUSH
13658: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13662: LD_ADDR_VAR 0 1
13666: PUSH
13667: LD_INT 22
13669: PUSH
13670: LD_INT 2
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 23
13679: PUSH
13680: LD_INT 0
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PPUSH
13691: CALL_OW 69
13695: ST_TO_ADDR
// if tmp then
13696: LD_VAR 0 1
13700: IFFALSE 13714
// SaveCharacters ( tmp , 05_apes ) ;
13702: LD_VAR 0 1
13706: PPUSH
13707: LD_STRING 05_apes
13709: PPUSH
13710: CALL_OW 38
// YouWin ;
13714: CALL_OW 103
// end ; end_of_file
13718: PPOPN 1
13720: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13721: LD_EXP 9
13725: PUSH
13726: LD_INT 13
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: CALL_OW 287
13736: PUSH
13737: LD_INT 25
13739: LESS
13740: AND
13741: IFFALSE 13768
13743: GO 13745
13745: DISABLE
// begin enable ;
13746: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13747: LD_INT 1
13749: PPUSH
13750: LD_INT 5
13752: PPUSH
13753: CALL_OW 12
13757: PPUSH
13758: LD_INT 13
13760: PPUSH
13761: LD_INT 1
13763: PPUSH
13764: CALL_OW 55
// end ; end_of_file
13768: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
13769: LD_INT 0
13771: PPUSH
// ar_miner := 81 ;
13772: LD_ADDR_EXP 51
13776: PUSH
13777: LD_INT 81
13779: ST_TO_ADDR
// ar_crane := 88 ;
13780: LD_ADDR_EXP 50
13784: PUSH
13785: LD_INT 88
13787: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13788: LD_ADDR_EXP 45
13792: PUSH
13793: LD_INT 89
13795: ST_TO_ADDR
// us_hack := 99 ;
13796: LD_ADDR_EXP 46
13800: PUSH
13801: LD_INT 99
13803: ST_TO_ADDR
// us_artillery := 97 ;
13804: LD_ADDR_EXP 47
13808: PUSH
13809: LD_INT 97
13811: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13812: LD_ADDR_EXP 48
13816: PUSH
13817: LD_INT 91
13819: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13820: LD_ADDR_EXP 49
13824: PUSH
13825: LD_INT 92
13827: ST_TO_ADDR
// ru_radar := 98 ;
13828: LD_ADDR_EXP 44
13832: PUSH
13833: LD_INT 98
13835: ST_TO_ADDR
// tech_Artillery := 80 ;
13836: LD_ADDR_EXP 52
13840: PUSH
13841: LD_INT 80
13843: ST_TO_ADDR
// tech_RadMat := 81 ;
13844: LD_ADDR_EXP 53
13848: PUSH
13849: LD_INT 81
13851: ST_TO_ADDR
// tech_BasicTools := 82 ;
13852: LD_ADDR_EXP 54
13856: PUSH
13857: LD_INT 82
13859: ST_TO_ADDR
// tech_Cargo := 83 ;
13860: LD_ADDR_EXP 55
13864: PUSH
13865: LD_INT 83
13867: ST_TO_ADDR
// tech_Track := 84 ;
13868: LD_ADDR_EXP 56
13872: PUSH
13873: LD_INT 84
13875: ST_TO_ADDR
// tech_Crane := 85 ;
13876: LD_ADDR_EXP 57
13880: PUSH
13881: LD_INT 85
13883: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13884: LD_ADDR_EXP 58
13888: PUSH
13889: LD_INT 86
13891: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13892: LD_ADDR_EXP 59
13896: PUSH
13897: LD_INT 87
13899: ST_TO_ADDR
// class_mastodont := 31 ;
13900: LD_ADDR_EXP 60
13904: PUSH
13905: LD_INT 31
13907: ST_TO_ADDR
// class_horse := 21 ;
13908: LD_ADDR_EXP 61
13912: PUSH
13913: LD_INT 21
13915: ST_TO_ADDR
// end ;
13916: LD_VAR 0 1
13920: RET
// every 1 do
13921: GO 13923
13923: DISABLE
// InitGlobalVariables ; end_of_file
13924: CALL 13769 0 0
13928: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13929: LD_INT 0
13931: PPUSH
13932: PPUSH
13933: PPUSH
13934: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13935: LD_VAR 0 1
13939: PPUSH
13940: CALL_OW 264
13944: PUSH
13945: LD_EXP 48
13949: EQUAL
13950: IFFALSE 14022
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13952: LD_INT 68
13954: PPUSH
13955: LD_VAR 0 1
13959: PPUSH
13960: CALL_OW 255
13964: PPUSH
13965: CALL_OW 321
13969: PUSH
13970: LD_INT 2
13972: EQUAL
13973: IFFALSE 13985
// eff := 70 else
13975: LD_ADDR_VAR 0 4
13979: PUSH
13980: LD_INT 70
13982: ST_TO_ADDR
13983: GO 13993
// eff := 30 ;
13985: LD_ADDR_VAR 0 4
13989: PUSH
13990: LD_INT 30
13992: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13993: LD_VAR 0 1
13997: PPUSH
13998: CALL_OW 250
14002: PPUSH
14003: LD_VAR 0 1
14007: PPUSH
14008: CALL_OW 251
14012: PPUSH
14013: LD_VAR 0 4
14017: PPUSH
14018: CALL_OW 495
// end ; end ;
14022: LD_VAR 0 2
14026: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14027: LD_INT 0
14029: PPUSH
// end ;
14030: LD_VAR 0 4
14034: RET
// export function SOS_Command ( cmd ) ; begin
14035: LD_INT 0
14037: PPUSH
// end ;
14038: LD_VAR 0 2
14042: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14043: LD_INT 0
14045: PPUSH
// if cmd = 121 then
14046: LD_VAR 0 1
14050: PUSH
14051: LD_INT 121
14053: EQUAL
14054: IFFALSE 14056
// end ;
14056: LD_VAR 0 6
14060: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14061: LD_INT 0
14063: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14064: LD_VAR 0 1
14068: PUSH
14069: LD_INT 250
14071: EQUAL
14072: PUSH
14073: LD_VAR 0 2
14077: PPUSH
14078: CALL_OW 264
14082: PUSH
14083: LD_EXP 51
14087: EQUAL
14088: AND
14089: IFFALSE 14110
// MinerPlaceMine ( unit , x , y ) ;
14091: LD_VAR 0 2
14095: PPUSH
14096: LD_VAR 0 4
14100: PPUSH
14101: LD_VAR 0 5
14105: PPUSH
14106: CALL 16459 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14110: LD_VAR 0 1
14114: PUSH
14115: LD_INT 251
14117: EQUAL
14118: PUSH
14119: LD_VAR 0 2
14123: PPUSH
14124: CALL_OW 264
14128: PUSH
14129: LD_EXP 51
14133: EQUAL
14134: AND
14135: IFFALSE 14156
// MinerDetonateMine ( unit , x , y ) ;
14137: LD_VAR 0 2
14141: PPUSH
14142: LD_VAR 0 4
14146: PPUSH
14147: LD_VAR 0 5
14151: PPUSH
14152: CALL 16736 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14156: LD_VAR 0 1
14160: PUSH
14161: LD_INT 252
14163: EQUAL
14164: PUSH
14165: LD_VAR 0 2
14169: PPUSH
14170: CALL_OW 264
14174: PUSH
14175: LD_EXP 51
14179: EQUAL
14180: AND
14181: IFFALSE 14202
// MinerCreateMinefield ( unit , x , y ) ;
14183: LD_VAR 0 2
14187: PPUSH
14188: LD_VAR 0 4
14192: PPUSH
14193: LD_VAR 0 5
14197: PPUSH
14198: CALL 17153 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14202: LD_VAR 0 1
14206: PUSH
14207: LD_INT 253
14209: EQUAL
14210: PUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: CALL_OW 257
14220: PUSH
14221: LD_INT 5
14223: EQUAL
14224: AND
14225: IFFALSE 14246
// ComBinocular ( unit , x , y ) ;
14227: LD_VAR 0 2
14231: PPUSH
14232: LD_VAR 0 4
14236: PPUSH
14237: LD_VAR 0 5
14241: PPUSH
14242: CALL 17524 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14246: LD_VAR 0 1
14250: PUSH
14251: LD_INT 254
14253: EQUAL
14254: PUSH
14255: LD_VAR 0 2
14259: PPUSH
14260: CALL_OW 264
14264: PUSH
14265: LD_EXP 46
14269: EQUAL
14270: AND
14271: PUSH
14272: LD_VAR 0 3
14276: PPUSH
14277: CALL_OW 263
14281: PUSH
14282: LD_INT 3
14284: EQUAL
14285: AND
14286: IFFALSE 14302
// HackDestroyVehicle ( unit , selectedUnit ) ;
14288: LD_VAR 0 2
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: CALL 15819 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14302: LD_VAR 0 1
14306: PUSH
14307: LD_INT 255
14309: EQUAL
14310: PUSH
14311: LD_VAR 0 2
14315: PPUSH
14316: CALL_OW 264
14320: PUSH
14321: LD_INT 14
14323: PUSH
14324: LD_INT 53
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: IN
14331: AND
14332: PUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: LD_VAR 0 5
14342: PPUSH
14343: CALL_OW 488
14347: AND
14348: IFFALSE 14372
// CutTreeXYR ( unit , x , y , 12 ) ;
14350: LD_VAR 0 2
14354: PPUSH
14355: LD_VAR 0 4
14359: PPUSH
14360: LD_VAR 0 5
14364: PPUSH
14365: LD_INT 12
14367: PPUSH
14368: CALL 14385 0 4
// end ;
14372: LD_VAR 0 6
14376: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
14377: LD_INT 0
14379: PPUSH
// end ;
14380: LD_VAR 0 4
14384: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14385: LD_INT 0
14387: PPUSH
14388: PPUSH
14389: PPUSH
14390: PPUSH
14391: PPUSH
14392: PPUSH
14393: PPUSH
14394: PPUSH
14395: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14396: LD_VAR 0 1
14400: NOT
14401: PUSH
14402: LD_VAR 0 2
14406: PPUSH
14407: LD_VAR 0 3
14411: PPUSH
14412: CALL_OW 488
14416: NOT
14417: OR
14418: PUSH
14419: LD_VAR 0 4
14423: NOT
14424: OR
14425: IFFALSE 14429
// exit ;
14427: GO 14769
// list := [ ] ;
14429: LD_ADDR_VAR 0 13
14433: PUSH
14434: EMPTY
14435: ST_TO_ADDR
// if x - r < 0 then
14436: LD_VAR 0 2
14440: PUSH
14441: LD_VAR 0 4
14445: MINUS
14446: PUSH
14447: LD_INT 0
14449: LESS
14450: IFFALSE 14462
// min_x := 0 else
14452: LD_ADDR_VAR 0 7
14456: PUSH
14457: LD_INT 0
14459: ST_TO_ADDR
14460: GO 14478
// min_x := x - r ;
14462: LD_ADDR_VAR 0 7
14466: PUSH
14467: LD_VAR 0 2
14471: PUSH
14472: LD_VAR 0 4
14476: MINUS
14477: ST_TO_ADDR
// if y - r < 0 then
14478: LD_VAR 0 3
14482: PUSH
14483: LD_VAR 0 4
14487: MINUS
14488: PUSH
14489: LD_INT 0
14491: LESS
14492: IFFALSE 14504
// min_y := 0 else
14494: LD_ADDR_VAR 0 8
14498: PUSH
14499: LD_INT 0
14501: ST_TO_ADDR
14502: GO 14520
// min_y := y - r ;
14504: LD_ADDR_VAR 0 8
14508: PUSH
14509: LD_VAR 0 3
14513: PUSH
14514: LD_VAR 0 4
14518: MINUS
14519: ST_TO_ADDR
// max_x := x + r ;
14520: LD_ADDR_VAR 0 9
14524: PUSH
14525: LD_VAR 0 2
14529: PUSH
14530: LD_VAR 0 4
14534: PLUS
14535: ST_TO_ADDR
// max_y := y + r ;
14536: LD_ADDR_VAR 0 10
14540: PUSH
14541: LD_VAR 0 3
14545: PUSH
14546: LD_VAR 0 4
14550: PLUS
14551: ST_TO_ADDR
// for _x = min_x to max_x do
14552: LD_ADDR_VAR 0 11
14556: PUSH
14557: DOUBLE
14558: LD_VAR 0 7
14562: DEC
14563: ST_TO_ADDR
14564: LD_VAR 0 9
14568: PUSH
14569: FOR_TO
14570: IFFALSE 14687
// for _y = min_y to max_y do
14572: LD_ADDR_VAR 0 12
14576: PUSH
14577: DOUBLE
14578: LD_VAR 0 8
14582: DEC
14583: ST_TO_ADDR
14584: LD_VAR 0 10
14588: PUSH
14589: FOR_TO
14590: IFFALSE 14683
// begin if not ValidHex ( _x , _y ) then
14592: LD_VAR 0 11
14596: PPUSH
14597: LD_VAR 0 12
14601: PPUSH
14602: CALL_OW 488
14606: NOT
14607: IFFALSE 14611
// continue ;
14609: GO 14589
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14611: LD_VAR 0 11
14615: PPUSH
14616: LD_VAR 0 12
14620: PPUSH
14621: CALL_OW 351
14625: PUSH
14626: LD_VAR 0 11
14630: PPUSH
14631: LD_VAR 0 12
14635: PPUSH
14636: CALL_OW 554
14640: AND
14641: IFFALSE 14681
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14643: LD_ADDR_VAR 0 13
14647: PUSH
14648: LD_VAR 0 13
14652: PPUSH
14653: LD_VAR 0 13
14657: PUSH
14658: LD_INT 1
14660: PLUS
14661: PPUSH
14662: LD_VAR 0 11
14666: PUSH
14667: LD_VAR 0 12
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PPUSH
14676: CALL_OW 2
14680: ST_TO_ADDR
// end ;
14681: GO 14589
14683: POP
14684: POP
14685: GO 14569
14687: POP
14688: POP
// if not list then
14689: LD_VAR 0 13
14693: NOT
14694: IFFALSE 14698
// exit ;
14696: GO 14769
// for i in list do
14698: LD_ADDR_VAR 0 6
14702: PUSH
14703: LD_VAR 0 13
14707: PUSH
14708: FOR_IN
14709: IFFALSE 14767
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14711: LD_VAR 0 1
14715: PPUSH
14716: LD_STRING M
14718: PUSH
14719: LD_VAR 0 6
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PUSH
14728: LD_VAR 0 6
14732: PUSH
14733: LD_INT 2
14735: ARRAY
14736: PUSH
14737: LD_INT 0
14739: PUSH
14740: LD_INT 0
14742: PUSH
14743: LD_INT 0
14745: PUSH
14746: LD_INT 0
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: PPUSH
14761: CALL_OW 447
14765: GO 14708
14767: POP
14768: POP
// end ;
14769: LD_VAR 0 5
14773: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14774: LD_EXP 64
14778: NOT
14779: IFFALSE 14829
14781: GO 14783
14783: DISABLE
// begin initHack := true ;
14784: LD_ADDR_EXP 64
14788: PUSH
14789: LD_INT 1
14791: ST_TO_ADDR
// hackTanks := [ ] ;
14792: LD_ADDR_EXP 65
14796: PUSH
14797: EMPTY
14798: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14799: LD_ADDR_EXP 66
14803: PUSH
14804: EMPTY
14805: ST_TO_ADDR
// hackLimit := 3 ;
14806: LD_ADDR_EXP 67
14810: PUSH
14811: LD_INT 3
14813: ST_TO_ADDR
// hackDist := 12 ;
14814: LD_ADDR_EXP 68
14818: PUSH
14819: LD_INT 12
14821: ST_TO_ADDR
// hackCounter := [ ] ;
14822: LD_ADDR_EXP 69
14826: PUSH
14827: EMPTY
14828: ST_TO_ADDR
// end ;
14829: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14830: LD_EXP 64
14834: PUSH
14835: LD_INT 34
14837: PUSH
14838: LD_EXP 46
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 69
14851: AND
14852: IFFALSE 15107
14854: GO 14856
14856: DISABLE
14857: LD_INT 0
14859: PPUSH
14860: PPUSH
// begin enable ;
14861: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14862: LD_ADDR_VAR 0 1
14866: PUSH
14867: LD_INT 34
14869: PUSH
14870: LD_EXP 46
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 69
14883: PUSH
14884: FOR_IN
14885: IFFALSE 15105
// begin if not i in hackTanks then
14887: LD_VAR 0 1
14891: PUSH
14892: LD_EXP 65
14896: IN
14897: NOT
14898: IFFALSE 14981
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14900: LD_ADDR_EXP 65
14904: PUSH
14905: LD_EXP 65
14909: PPUSH
14910: LD_EXP 65
14914: PUSH
14915: LD_INT 1
14917: PLUS
14918: PPUSH
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 1
14928: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14929: LD_ADDR_EXP 66
14933: PUSH
14934: LD_EXP 66
14938: PPUSH
14939: LD_EXP 66
14943: PUSH
14944: LD_INT 1
14946: PLUS
14947: PPUSH
14948: EMPTY
14949: PPUSH
14950: CALL_OW 1
14954: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14955: LD_ADDR_EXP 69
14959: PUSH
14960: LD_EXP 69
14964: PPUSH
14965: LD_EXP 69
14969: PUSH
14970: LD_INT 1
14972: PLUS
14973: PPUSH
14974: EMPTY
14975: PPUSH
14976: CALL_OW 1
14980: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 302
14990: NOT
14991: IFFALSE 15004
// begin HackUnlinkAll ( i ) ;
14993: LD_VAR 0 1
14997: PPUSH
14998: CALL 15110 0 1
// continue ;
15002: GO 14884
// end ; HackCheckCapturedStatus ( i ) ;
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL 15553 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_INT 81
15020: PUSH
15021: LD_VAR 0 1
15025: PPUSH
15026: CALL_OW 255
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 33
15037: PUSH
15038: LD_INT 3
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 91
15047: PUSH
15048: LD_VAR 0 1
15052: PUSH
15053: LD_EXP 68
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 50
15065: PUSH
15066: EMPTY
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: PPUSH
15075: CALL_OW 69
15079: ST_TO_ADDR
// if not tmp then
15080: LD_VAR 0 2
15084: NOT
15085: IFFALSE 15089
// continue ;
15087: GO 14884
// HackLink ( i , tmp ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_VAR 0 2
15098: PPUSH
15099: CALL 15246 0 2
// end ;
15103: GO 14884
15105: POP
15106: POP
// end ;
15107: PPOPN 2
15109: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
15114: PPUSH
// if not hack in hackTanks then
15115: LD_VAR 0 1
15119: PUSH
15120: LD_EXP 65
15124: IN
15125: NOT
15126: IFFALSE 15130
// exit ;
15128: GO 15241
// index := GetElementIndex ( hackTanks , hack ) ;
15130: LD_ADDR_VAR 0 4
15134: PUSH
15135: LD_EXP 65
15139: PPUSH
15140: LD_VAR 0 1
15144: PPUSH
15145: CALL 35847 0 2
15149: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15150: LD_EXP 66
15154: PUSH
15155: LD_VAR 0 4
15159: ARRAY
15160: IFFALSE 15241
// begin for i in hackTanksCaptured [ index ] do
15162: LD_ADDR_VAR 0 3
15166: PUSH
15167: LD_EXP 66
15171: PUSH
15172: LD_VAR 0 4
15176: ARRAY
15177: PUSH
15178: FOR_IN
15179: IFFALSE 15205
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15181: LD_VAR 0 3
15185: PUSH
15186: LD_INT 1
15188: ARRAY
15189: PPUSH
15190: LD_VAR 0 3
15194: PUSH
15195: LD_INT 2
15197: ARRAY
15198: PPUSH
15199: CALL_OW 235
15203: GO 15178
15205: POP
15206: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15207: LD_ADDR_EXP 66
15211: PUSH
15212: LD_EXP 66
15216: PPUSH
15217: LD_VAR 0 4
15221: PPUSH
15222: EMPTY
15223: PPUSH
15224: CALL_OW 1
15228: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15229: LD_VAR 0 1
15233: PPUSH
15234: LD_INT 0
15236: PPUSH
15237: CALL_OW 505
// end ; end ;
15241: LD_VAR 0 2
15245: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15246: LD_INT 0
15248: PPUSH
15249: PPUSH
15250: PPUSH
// if not hack in hackTanks or not vehicles then
15251: LD_VAR 0 1
15255: PUSH
15256: LD_EXP 65
15260: IN
15261: NOT
15262: PUSH
15263: LD_VAR 0 2
15267: NOT
15268: OR
15269: IFFALSE 15273
// exit ;
15271: GO 15548
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15273: LD_ADDR_VAR 0 2
15277: PUSH
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_VAR 0 2
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: LD_INT 1
15293: PPUSH
15294: CALL 36497 0 4
15298: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15299: LD_ADDR_VAR 0 5
15303: PUSH
15304: LD_EXP 65
15308: PPUSH
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL 35847 0 2
15318: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15319: LD_EXP 66
15323: PUSH
15324: LD_VAR 0 5
15328: ARRAY
15329: PUSH
15330: LD_EXP 67
15334: LESS
15335: IFFALSE 15524
// begin for i := 1 to vehicles do
15337: LD_ADDR_VAR 0 4
15341: PUSH
15342: DOUBLE
15343: LD_INT 1
15345: DEC
15346: ST_TO_ADDR
15347: LD_VAR 0 2
15351: PUSH
15352: FOR_TO
15353: IFFALSE 15522
// begin if hackTanksCaptured [ index ] = hackLimit then
15355: LD_EXP 66
15359: PUSH
15360: LD_VAR 0 5
15364: ARRAY
15365: PUSH
15366: LD_EXP 67
15370: EQUAL
15371: IFFALSE 15375
// break ;
15373: GO 15522
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15375: LD_ADDR_EXP 69
15379: PUSH
15380: LD_EXP 69
15384: PPUSH
15385: LD_VAR 0 5
15389: PPUSH
15390: LD_EXP 69
15394: PUSH
15395: LD_VAR 0 5
15399: ARRAY
15400: PUSH
15401: LD_INT 1
15403: PLUS
15404: PPUSH
15405: CALL_OW 1
15409: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15410: LD_ADDR_EXP 66
15414: PUSH
15415: LD_EXP 66
15419: PPUSH
15420: LD_VAR 0 5
15424: PUSH
15425: LD_EXP 66
15429: PUSH
15430: LD_VAR 0 5
15434: ARRAY
15435: PUSH
15436: LD_INT 1
15438: PLUS
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PPUSH
15444: LD_VAR 0 2
15448: PUSH
15449: LD_VAR 0 4
15453: ARRAY
15454: PUSH
15455: LD_VAR 0 2
15459: PUSH
15460: LD_VAR 0 4
15464: ARRAY
15465: PPUSH
15466: CALL_OW 255
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PPUSH
15475: CALL 36062 0 3
15479: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15480: LD_VAR 0 2
15484: PUSH
15485: LD_VAR 0 4
15489: ARRAY
15490: PPUSH
15491: LD_VAR 0 1
15495: PPUSH
15496: CALL_OW 255
15500: PPUSH
15501: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15505: LD_VAR 0 2
15509: PUSH
15510: LD_VAR 0 4
15514: ARRAY
15515: PPUSH
15516: CALL_OW 141
// end ;
15520: GO 15352
15522: POP
15523: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15524: LD_VAR 0 1
15528: PPUSH
15529: LD_EXP 66
15533: PUSH
15534: LD_VAR 0 5
15538: ARRAY
15539: PUSH
15540: LD_INT 0
15542: PLUS
15543: PPUSH
15544: CALL_OW 505
// end ;
15548: LD_VAR 0 3
15552: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15553: LD_INT 0
15555: PPUSH
15556: PPUSH
15557: PPUSH
15558: PPUSH
// if not hack in hackTanks then
15559: LD_VAR 0 1
15563: PUSH
15564: LD_EXP 65
15568: IN
15569: NOT
15570: IFFALSE 15574
// exit ;
15572: GO 15814
// index := GetElementIndex ( hackTanks , hack ) ;
15574: LD_ADDR_VAR 0 4
15578: PUSH
15579: LD_EXP 65
15583: PPUSH
15584: LD_VAR 0 1
15588: PPUSH
15589: CALL 35847 0 2
15593: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15594: LD_ADDR_VAR 0 3
15598: PUSH
15599: DOUBLE
15600: LD_EXP 66
15604: PUSH
15605: LD_VAR 0 4
15609: ARRAY
15610: INC
15611: ST_TO_ADDR
15612: LD_INT 1
15614: PUSH
15615: FOR_DOWNTO
15616: IFFALSE 15788
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15618: LD_ADDR_VAR 0 5
15622: PUSH
15623: LD_EXP 66
15627: PUSH
15628: LD_VAR 0 4
15632: ARRAY
15633: PUSH
15634: LD_VAR 0 3
15638: ARRAY
15639: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15640: LD_VAR 0 5
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: PPUSH
15649: CALL_OW 302
15653: NOT
15654: PUSH
15655: LD_VAR 0 5
15659: PUSH
15660: LD_INT 1
15662: ARRAY
15663: PPUSH
15664: CALL_OW 255
15668: PUSH
15669: LD_VAR 0 1
15673: PPUSH
15674: CALL_OW 255
15678: NONEQUAL
15679: OR
15680: IFFALSE 15786
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15682: LD_VAR 0 5
15686: PUSH
15687: LD_INT 1
15689: ARRAY
15690: PPUSH
15691: CALL_OW 305
15695: PUSH
15696: LD_VAR 0 5
15700: PUSH
15701: LD_INT 1
15703: ARRAY
15704: PPUSH
15705: CALL_OW 255
15709: PUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 255
15719: EQUAL
15720: AND
15721: IFFALSE 15745
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15723: LD_VAR 0 5
15727: PUSH
15728: LD_INT 1
15730: ARRAY
15731: PPUSH
15732: LD_VAR 0 5
15736: PUSH
15737: LD_INT 2
15739: ARRAY
15740: PPUSH
15741: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15745: LD_ADDR_EXP 66
15749: PUSH
15750: LD_EXP 66
15754: PPUSH
15755: LD_VAR 0 4
15759: PPUSH
15760: LD_EXP 66
15764: PUSH
15765: LD_VAR 0 4
15769: ARRAY
15770: PPUSH
15771: LD_VAR 0 3
15775: PPUSH
15776: CALL_OW 3
15780: PPUSH
15781: CALL_OW 1
15785: ST_TO_ADDR
// end ; end ;
15786: GO 15615
15788: POP
15789: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15790: LD_VAR 0 1
15794: PPUSH
15795: LD_EXP 66
15799: PUSH
15800: LD_VAR 0 4
15804: ARRAY
15805: PUSH
15806: LD_INT 0
15808: PLUS
15809: PPUSH
15810: CALL_OW 505
// end ;
15814: LD_VAR 0 2
15818: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15819: LD_INT 0
15821: PPUSH
15822: PPUSH
15823: PPUSH
15824: PPUSH
// if not hack in hackTanks then
15825: LD_VAR 0 1
15829: PUSH
15830: LD_EXP 65
15834: IN
15835: NOT
15836: IFFALSE 15840
// exit ;
15838: GO 15925
// index := GetElementIndex ( hackTanks , hack ) ;
15840: LD_ADDR_VAR 0 5
15844: PUSH
15845: LD_EXP 65
15849: PPUSH
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL 35847 0 2
15859: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15860: LD_ADDR_VAR 0 4
15864: PUSH
15865: DOUBLE
15866: LD_INT 1
15868: DEC
15869: ST_TO_ADDR
15870: LD_EXP 66
15874: PUSH
15875: LD_VAR 0 5
15879: ARRAY
15880: PUSH
15881: FOR_TO
15882: IFFALSE 15923
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15884: LD_EXP 66
15888: PUSH
15889: LD_VAR 0 5
15893: ARRAY
15894: PUSH
15895: LD_VAR 0 4
15899: ARRAY
15900: PUSH
15901: LD_INT 1
15903: ARRAY
15904: PUSH
15905: LD_VAR 0 2
15909: EQUAL
15910: IFFALSE 15921
// KillUnit ( vehicle ) ;
15912: LD_VAR 0 2
15916: PPUSH
15917: CALL_OW 66
15921: GO 15881
15923: POP
15924: POP
// end ;
15925: LD_VAR 0 3
15929: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
15930: LD_EXP 70
15934: NOT
15935: IFFALSE 15970
15937: GO 15939
15939: DISABLE
// begin initMiner := true ;
15940: LD_ADDR_EXP 70
15944: PUSH
15945: LD_INT 1
15947: ST_TO_ADDR
// minersList := [ ] ;
15948: LD_ADDR_EXP 71
15952: PUSH
15953: EMPTY
15954: ST_TO_ADDR
// minerMinesList := [ ] ;
15955: LD_ADDR_EXP 72
15959: PUSH
15960: EMPTY
15961: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
15962: LD_ADDR_EXP 73
15966: PUSH
15967: LD_INT 5
15969: ST_TO_ADDR
// end ;
15970: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
15971: LD_EXP 70
15975: PUSH
15976: LD_INT 34
15978: PUSH
15979: LD_EXP 51
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PPUSH
15988: CALL_OW 69
15992: AND
15993: IFFALSE 16456
15995: GO 15997
15997: DISABLE
15998: LD_INT 0
16000: PPUSH
16001: PPUSH
16002: PPUSH
16003: PPUSH
// begin enable ;
16004: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16005: LD_ADDR_VAR 0 1
16009: PUSH
16010: LD_INT 34
16012: PUSH
16013: LD_EXP 51
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PPUSH
16022: CALL_OW 69
16026: PUSH
16027: FOR_IN
16028: IFFALSE 16100
// begin if not i in minersList then
16030: LD_VAR 0 1
16034: PUSH
16035: LD_EXP 71
16039: IN
16040: NOT
16041: IFFALSE 16098
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16043: LD_ADDR_EXP 71
16047: PUSH
16048: LD_EXP 71
16052: PPUSH
16053: LD_EXP 71
16057: PUSH
16058: LD_INT 1
16060: PLUS
16061: PPUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 1
16071: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16072: LD_ADDR_EXP 72
16076: PUSH
16077: LD_EXP 72
16081: PPUSH
16082: LD_EXP 72
16086: PUSH
16087: LD_INT 1
16089: PLUS
16090: PPUSH
16091: EMPTY
16092: PPUSH
16093: CALL_OW 1
16097: ST_TO_ADDR
// end end ;
16098: GO 16027
16100: POP
16101: POP
// for i := minerMinesList downto 1 do
16102: LD_ADDR_VAR 0 1
16106: PUSH
16107: DOUBLE
16108: LD_EXP 72
16112: INC
16113: ST_TO_ADDR
16114: LD_INT 1
16116: PUSH
16117: FOR_DOWNTO
16118: IFFALSE 16454
// begin if IsLive ( minersList [ i ] ) then
16120: LD_EXP 71
16124: PUSH
16125: LD_VAR 0 1
16129: ARRAY
16130: PPUSH
16131: CALL_OW 300
16135: IFFALSE 16163
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16137: LD_EXP 71
16141: PUSH
16142: LD_VAR 0 1
16146: ARRAY
16147: PPUSH
16148: LD_EXP 72
16152: PUSH
16153: LD_VAR 0 1
16157: ARRAY
16158: PPUSH
16159: CALL_OW 505
// if not minerMinesList [ i ] then
16163: LD_EXP 72
16167: PUSH
16168: LD_VAR 0 1
16172: ARRAY
16173: NOT
16174: IFFALSE 16178
// continue ;
16176: GO 16117
// for j := minerMinesList [ i ] downto 1 do
16178: LD_ADDR_VAR 0 2
16182: PUSH
16183: DOUBLE
16184: LD_EXP 72
16188: PUSH
16189: LD_VAR 0 1
16193: ARRAY
16194: INC
16195: ST_TO_ADDR
16196: LD_INT 1
16198: PUSH
16199: FOR_DOWNTO
16200: IFFALSE 16450
// begin side := GetSide ( minersList [ i ] ) ;
16202: LD_ADDR_VAR 0 3
16206: PUSH
16207: LD_EXP 71
16211: PUSH
16212: LD_VAR 0 1
16216: ARRAY
16217: PPUSH
16218: CALL_OW 255
16222: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16223: LD_ADDR_VAR 0 4
16227: PUSH
16228: LD_EXP 72
16232: PUSH
16233: LD_VAR 0 1
16237: ARRAY
16238: PUSH
16239: LD_VAR 0 2
16243: ARRAY
16244: PUSH
16245: LD_INT 1
16247: ARRAY
16248: PPUSH
16249: LD_EXP 72
16253: PUSH
16254: LD_VAR 0 1
16258: ARRAY
16259: PUSH
16260: LD_VAR 0 2
16264: ARRAY
16265: PUSH
16266: LD_INT 2
16268: ARRAY
16269: PPUSH
16270: CALL_OW 428
16274: ST_TO_ADDR
// if not tmp then
16275: LD_VAR 0 4
16279: NOT
16280: IFFALSE 16284
// continue ;
16282: GO 16199
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16284: LD_VAR 0 4
16288: PUSH
16289: LD_INT 81
16291: PUSH
16292: LD_VAR 0 3
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PPUSH
16301: CALL_OW 69
16305: IN
16306: PUSH
16307: LD_EXP 72
16311: PUSH
16312: LD_VAR 0 1
16316: ARRAY
16317: PUSH
16318: LD_VAR 0 2
16322: ARRAY
16323: PUSH
16324: LD_INT 1
16326: ARRAY
16327: PPUSH
16328: LD_EXP 72
16332: PUSH
16333: LD_VAR 0 1
16337: ARRAY
16338: PUSH
16339: LD_VAR 0 2
16343: ARRAY
16344: PUSH
16345: LD_INT 2
16347: ARRAY
16348: PPUSH
16349: CALL_OW 458
16353: AND
16354: IFFALSE 16448
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16356: LD_EXP 72
16360: PUSH
16361: LD_VAR 0 1
16365: ARRAY
16366: PUSH
16367: LD_VAR 0 2
16371: ARRAY
16372: PUSH
16373: LD_INT 1
16375: ARRAY
16376: PPUSH
16377: LD_EXP 72
16381: PUSH
16382: LD_VAR 0 1
16386: ARRAY
16387: PUSH
16388: LD_VAR 0 2
16392: ARRAY
16393: PUSH
16394: LD_INT 2
16396: ARRAY
16397: PPUSH
16398: LD_VAR 0 3
16402: PPUSH
16403: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16407: LD_ADDR_EXP 72
16411: PUSH
16412: LD_EXP 72
16416: PPUSH
16417: LD_VAR 0 1
16421: PPUSH
16422: LD_EXP 72
16426: PUSH
16427: LD_VAR 0 1
16431: ARRAY
16432: PPUSH
16433: LD_VAR 0 2
16437: PPUSH
16438: CALL_OW 3
16442: PPUSH
16443: CALL_OW 1
16447: ST_TO_ADDR
// end ; end ;
16448: GO 16199
16450: POP
16451: POP
// end ;
16452: GO 16117
16454: POP
16455: POP
// end ;
16456: PPOPN 4
16458: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
16459: LD_INT 0
16461: PPUSH
16462: PPUSH
// result := false ;
16463: LD_ADDR_VAR 0 4
16467: PUSH
16468: LD_INT 0
16470: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 264
16480: PUSH
16481: LD_EXP 51
16485: EQUAL
16486: NOT
16487: IFFALSE 16491
// exit ;
16489: GO 16731
// index := GetElementIndex ( minersList , unit ) ;
16491: LD_ADDR_VAR 0 5
16495: PUSH
16496: LD_EXP 71
16500: PPUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL 35847 0 2
16510: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16511: LD_EXP 72
16515: PUSH
16516: LD_VAR 0 5
16520: ARRAY
16521: PUSH
16522: LD_EXP 73
16526: GREATEREQUAL
16527: IFFALSE 16531
// exit ;
16529: GO 16731
// ComMoveXY ( unit , x , y ) ;
16531: LD_VAR 0 1
16535: PPUSH
16536: LD_VAR 0 2
16540: PPUSH
16541: LD_VAR 0 3
16545: PPUSH
16546: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16550: LD_INT 35
16552: PPUSH
16553: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16557: LD_VAR 0 1
16561: PPUSH
16562: LD_VAR 0 2
16566: PPUSH
16567: LD_VAR 0 3
16571: PPUSH
16572: CALL 66244 0 3
16576: NOT
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 314
16587: AND
16588: IFFALSE 16592
// exit ;
16590: GO 16731
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16592: LD_VAR 0 2
16596: PPUSH
16597: LD_VAR 0 3
16601: PPUSH
16602: CALL_OW 428
16606: PUSH
16607: LD_VAR 0 1
16611: EQUAL
16612: PUSH
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 314
16622: NOT
16623: AND
16624: IFFALSE 16550
// PlaySoundXY ( x , y , PlantMine ) ;
16626: LD_VAR 0 2
16630: PPUSH
16631: LD_VAR 0 3
16635: PPUSH
16636: LD_STRING PlantMine
16638: PPUSH
16639: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
16643: LD_VAR 0 2
16647: PPUSH
16648: LD_VAR 0 3
16652: PPUSH
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL_OW 255
16662: PPUSH
16663: LD_INT 0
16665: PPUSH
16666: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
16670: LD_ADDR_EXP 72
16674: PUSH
16675: LD_EXP 72
16679: PPUSH
16680: LD_VAR 0 5
16684: PUSH
16685: LD_EXP 72
16689: PUSH
16690: LD_VAR 0 5
16694: ARRAY
16695: PUSH
16696: LD_INT 1
16698: PLUS
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PPUSH
16704: LD_VAR 0 2
16708: PUSH
16709: LD_VAR 0 3
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PPUSH
16718: CALL 36062 0 3
16722: ST_TO_ADDR
// result := true ;
16723: LD_ADDR_VAR 0 4
16727: PUSH
16728: LD_INT 1
16730: ST_TO_ADDR
// end ;
16731: LD_VAR 0 4
16735: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
16736: LD_INT 0
16738: PPUSH
16739: PPUSH
16740: PPUSH
// if not unit in minersList then
16741: LD_VAR 0 1
16745: PUSH
16746: LD_EXP 71
16750: IN
16751: NOT
16752: IFFALSE 16756
// exit ;
16754: GO 17148
// index := GetElementIndex ( minersList , unit ) ;
16756: LD_ADDR_VAR 0 6
16760: PUSH
16761: LD_EXP 71
16765: PPUSH
16766: LD_VAR 0 1
16770: PPUSH
16771: CALL 35847 0 2
16775: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
16776: LD_ADDR_VAR 0 5
16780: PUSH
16781: DOUBLE
16782: LD_EXP 72
16786: PUSH
16787: LD_VAR 0 6
16791: ARRAY
16792: INC
16793: ST_TO_ADDR
16794: LD_INT 1
16796: PUSH
16797: FOR_DOWNTO
16798: IFFALSE 16959
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
16800: LD_EXP 72
16804: PUSH
16805: LD_VAR 0 6
16809: ARRAY
16810: PUSH
16811: LD_VAR 0 5
16815: ARRAY
16816: PUSH
16817: LD_INT 1
16819: ARRAY
16820: PUSH
16821: LD_VAR 0 2
16825: EQUAL
16826: PUSH
16827: LD_EXP 72
16831: PUSH
16832: LD_VAR 0 6
16836: ARRAY
16837: PUSH
16838: LD_VAR 0 5
16842: ARRAY
16843: PUSH
16844: LD_INT 2
16846: ARRAY
16847: PUSH
16848: LD_VAR 0 3
16852: EQUAL
16853: AND
16854: IFFALSE 16957
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16856: LD_EXP 72
16860: PUSH
16861: LD_VAR 0 6
16865: ARRAY
16866: PUSH
16867: LD_VAR 0 5
16871: ARRAY
16872: PUSH
16873: LD_INT 1
16875: ARRAY
16876: PPUSH
16877: LD_EXP 72
16881: PUSH
16882: LD_VAR 0 6
16886: ARRAY
16887: PUSH
16888: LD_VAR 0 5
16892: ARRAY
16893: PUSH
16894: LD_INT 2
16896: ARRAY
16897: PPUSH
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL_OW 255
16907: PPUSH
16908: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
16912: LD_ADDR_EXP 72
16916: PUSH
16917: LD_EXP 72
16921: PPUSH
16922: LD_VAR 0 6
16926: PPUSH
16927: LD_EXP 72
16931: PUSH
16932: LD_VAR 0 6
16936: ARRAY
16937: PPUSH
16938: LD_VAR 0 5
16942: PPUSH
16943: CALL_OW 3
16947: PPUSH
16948: CALL_OW 1
16952: ST_TO_ADDR
// exit ;
16953: POP
16954: POP
16955: GO 17148
// end ; end ;
16957: GO 16797
16959: POP
16960: POP
// for i := minerMinesList [ index ] downto 1 do
16961: LD_ADDR_VAR 0 5
16965: PUSH
16966: DOUBLE
16967: LD_EXP 72
16971: PUSH
16972: LD_VAR 0 6
16976: ARRAY
16977: INC
16978: ST_TO_ADDR
16979: LD_INT 1
16981: PUSH
16982: FOR_DOWNTO
16983: IFFALSE 17146
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
16985: LD_EXP 72
16989: PUSH
16990: LD_VAR 0 6
16994: ARRAY
16995: PUSH
16996: LD_VAR 0 5
17000: ARRAY
17001: PUSH
17002: LD_INT 1
17004: ARRAY
17005: PPUSH
17006: LD_EXP 72
17010: PUSH
17011: LD_VAR 0 6
17015: ARRAY
17016: PUSH
17017: LD_VAR 0 5
17021: ARRAY
17022: PUSH
17023: LD_INT 2
17025: ARRAY
17026: PPUSH
17027: LD_VAR 0 2
17031: PPUSH
17032: LD_VAR 0 3
17036: PPUSH
17037: CALL_OW 298
17041: PUSH
17042: LD_INT 6
17044: LESS
17045: IFFALSE 17144
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17047: LD_EXP 72
17051: PUSH
17052: LD_VAR 0 6
17056: ARRAY
17057: PUSH
17058: LD_VAR 0 5
17062: ARRAY
17063: PUSH
17064: LD_INT 1
17066: ARRAY
17067: PPUSH
17068: LD_EXP 72
17072: PUSH
17073: LD_VAR 0 6
17077: ARRAY
17078: PUSH
17079: LD_VAR 0 5
17083: ARRAY
17084: PUSH
17085: LD_INT 2
17087: ARRAY
17088: PPUSH
17089: LD_VAR 0 1
17093: PPUSH
17094: CALL_OW 255
17098: PPUSH
17099: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17103: LD_ADDR_EXP 72
17107: PUSH
17108: LD_EXP 72
17112: PPUSH
17113: LD_VAR 0 6
17117: PPUSH
17118: LD_EXP 72
17122: PUSH
17123: LD_VAR 0 6
17127: ARRAY
17128: PPUSH
17129: LD_VAR 0 5
17133: PPUSH
17134: CALL_OW 3
17138: PPUSH
17139: CALL_OW 1
17143: ST_TO_ADDR
// end ; end ;
17144: GO 16982
17146: POP
17147: POP
// end ;
17148: LD_VAR 0 4
17152: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17153: LD_INT 0
17155: PPUSH
17156: PPUSH
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 264
17173: PUSH
17174: LD_EXP 51
17178: EQUAL
17179: NOT
17180: PUSH
17181: LD_VAR 0 1
17185: PUSH
17186: LD_EXP 71
17190: IN
17191: NOT
17192: OR
17193: IFFALSE 17197
// exit ;
17195: GO 17519
// index := GetElementIndex ( minersList , unit ) ;
17197: LD_ADDR_VAR 0 6
17201: PUSH
17202: LD_EXP 71
17206: PPUSH
17207: LD_VAR 0 1
17211: PPUSH
17212: CALL 35847 0 2
17216: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17217: LD_ADDR_VAR 0 8
17221: PUSH
17222: LD_EXP 73
17226: PUSH
17227: LD_EXP 72
17231: PUSH
17232: LD_VAR 0 6
17236: ARRAY
17237: MINUS
17238: ST_TO_ADDR
// if not minesFreeAmount then
17239: LD_VAR 0 8
17243: NOT
17244: IFFALSE 17248
// exit ;
17246: GO 17519
// tmp := [ ] ;
17248: LD_ADDR_VAR 0 7
17252: PUSH
17253: EMPTY
17254: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17255: LD_ADDR_VAR 0 5
17259: PUSH
17260: DOUBLE
17261: LD_INT 1
17263: DEC
17264: ST_TO_ADDR
17265: LD_VAR 0 8
17269: PUSH
17270: FOR_TO
17271: IFFALSE 17466
// begin _d := rand ( 0 , 5 ) ;
17273: LD_ADDR_VAR 0 11
17277: PUSH
17278: LD_INT 0
17280: PPUSH
17281: LD_INT 5
17283: PPUSH
17284: CALL_OW 12
17288: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17289: LD_ADDR_VAR 0 12
17293: PUSH
17294: LD_INT 2
17296: PPUSH
17297: LD_INT 6
17299: PPUSH
17300: CALL_OW 12
17304: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17305: LD_ADDR_VAR 0 9
17309: PUSH
17310: LD_VAR 0 2
17314: PPUSH
17315: LD_VAR 0 11
17319: PPUSH
17320: LD_VAR 0 12
17324: PPUSH
17325: CALL_OW 272
17329: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17330: LD_ADDR_VAR 0 10
17334: PUSH
17335: LD_VAR 0 3
17339: PPUSH
17340: LD_VAR 0 11
17344: PPUSH
17345: LD_VAR 0 12
17349: PPUSH
17350: CALL_OW 273
17354: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17355: LD_VAR 0 9
17359: PPUSH
17360: LD_VAR 0 10
17364: PPUSH
17365: CALL_OW 488
17369: PUSH
17370: LD_VAR 0 9
17374: PUSH
17375: LD_VAR 0 10
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_VAR 0 7
17388: IN
17389: NOT
17390: AND
17391: PUSH
17392: LD_VAR 0 9
17396: PPUSH
17397: LD_VAR 0 10
17401: PPUSH
17402: CALL_OW 458
17406: NOT
17407: AND
17408: IFFALSE 17450
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17410: LD_ADDR_VAR 0 7
17414: PUSH
17415: LD_VAR 0 7
17419: PPUSH
17420: LD_VAR 0 7
17424: PUSH
17425: LD_INT 1
17427: PLUS
17428: PPUSH
17429: LD_VAR 0 9
17433: PUSH
17434: LD_VAR 0 10
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PPUSH
17443: CALL_OW 1
17447: ST_TO_ADDR
17448: GO 17464
// i := i - 1 ;
17450: LD_ADDR_VAR 0 5
17454: PUSH
17455: LD_VAR 0 5
17459: PUSH
17460: LD_INT 1
17462: MINUS
17463: ST_TO_ADDR
// end ;
17464: GO 17270
17466: POP
17467: POP
// for i in tmp do
17468: LD_ADDR_VAR 0 5
17472: PUSH
17473: LD_VAR 0 7
17477: PUSH
17478: FOR_IN
17479: IFFALSE 17517
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17481: LD_VAR 0 1
17485: PPUSH
17486: LD_VAR 0 5
17490: PUSH
17491: LD_INT 1
17493: ARRAY
17494: PPUSH
17495: LD_VAR 0 5
17499: PUSH
17500: LD_INT 2
17502: ARRAY
17503: PPUSH
17504: CALL 16459 0 3
17508: NOT
17509: IFFALSE 17515
// exit ;
17511: POP
17512: POP
17513: GO 17519
17515: GO 17478
17517: POP
17518: POP
// end ;
17519: LD_VAR 0 4
17523: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
17524: LD_INT 0
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
// if not GetClass ( unit ) = class_sniper then
17533: LD_VAR 0 1
17537: PPUSH
17538: CALL_OW 257
17542: PUSH
17543: LD_INT 5
17545: EQUAL
17546: NOT
17547: IFFALSE 17551
// exit ;
17549: GO 17939
// dist := 8 ;
17551: LD_ADDR_VAR 0 5
17555: PUSH
17556: LD_INT 8
17558: ST_TO_ADDR
// viewRange := 12 ;
17559: LD_ADDR_VAR 0 7
17563: PUSH
17564: LD_INT 12
17566: ST_TO_ADDR
// side := GetSide ( unit ) ;
17567: LD_ADDR_VAR 0 6
17571: PUSH
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 255
17581: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17582: LD_INT 61
17584: PPUSH
17585: LD_VAR 0 6
17589: PPUSH
17590: CALL_OW 321
17594: PUSH
17595: LD_INT 2
17597: EQUAL
17598: IFFALSE 17608
// viewRange := 16 ;
17600: LD_ADDR_VAR 0 7
17604: PUSH
17605: LD_INT 16
17607: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17608: LD_VAR 0 1
17612: PPUSH
17613: LD_VAR 0 2
17617: PPUSH
17618: LD_VAR 0 3
17622: PPUSH
17623: CALL_OW 297
17627: PUSH
17628: LD_VAR 0 5
17632: GREATER
17633: IFFALSE 17712
// begin ComMoveXY ( unit , x , y ) ;
17635: LD_VAR 0 1
17639: PPUSH
17640: LD_VAR 0 2
17644: PPUSH
17645: LD_VAR 0 3
17649: PPUSH
17650: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17654: LD_INT 35
17656: PPUSH
17657: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17661: LD_VAR 0 1
17665: PPUSH
17666: LD_VAR 0 2
17670: PPUSH
17671: LD_VAR 0 3
17675: PPUSH
17676: CALL 66244 0 3
17680: NOT
17681: IFFALSE 17685
// exit ;
17683: GO 17939
// until GetDistUnitXY ( unit , x , y ) < dist ;
17685: LD_VAR 0 1
17689: PPUSH
17690: LD_VAR 0 2
17694: PPUSH
17695: LD_VAR 0 3
17699: PPUSH
17700: CALL_OW 297
17704: PUSH
17705: LD_VAR 0 5
17709: LESS
17710: IFFALSE 17654
// end ; ComTurnXY ( unit , x , y ) ;
17712: LD_VAR 0 1
17716: PPUSH
17717: LD_VAR 0 2
17721: PPUSH
17722: LD_VAR 0 3
17726: PPUSH
17727: CALL_OW 118
// wait ( 5 ) ;
17731: LD_INT 5
17733: PPUSH
17734: CALL_OW 67
// _d := GetDir ( unit ) ;
17738: LD_ADDR_VAR 0 10
17742: PUSH
17743: LD_VAR 0 1
17747: PPUSH
17748: CALL_OW 254
17752: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
17753: LD_ADDR_VAR 0 8
17757: PUSH
17758: LD_VAR 0 1
17762: PPUSH
17763: CALL_OW 250
17767: PPUSH
17768: LD_VAR 0 10
17772: PPUSH
17773: LD_VAR 0 5
17777: PPUSH
17778: CALL_OW 272
17782: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
17783: LD_ADDR_VAR 0 9
17787: PUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: CALL_OW 251
17797: PPUSH
17798: LD_VAR 0 10
17802: PPUSH
17803: LD_VAR 0 5
17807: PPUSH
17808: CALL_OW 273
17812: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17813: LD_VAR 0 8
17817: PPUSH
17818: LD_VAR 0 9
17822: PPUSH
17823: CALL_OW 488
17827: NOT
17828: IFFALSE 17832
// exit ;
17830: GO 17939
// ComAnimCustom ( unit , 1 ) ;
17832: LD_VAR 0 1
17836: PPUSH
17837: LD_INT 1
17839: PPUSH
17840: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
17844: LD_VAR 0 8
17848: PPUSH
17849: LD_VAR 0 9
17853: PPUSH
17854: LD_VAR 0 6
17858: PPUSH
17859: LD_VAR 0 7
17863: PPUSH
17864: CALL_OW 330
// repeat wait ( 1 ) ;
17868: LD_INT 1
17870: PPUSH
17871: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
17875: LD_VAR 0 1
17879: PPUSH
17880: CALL_OW 316
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 314
17894: OR
17895: PUSH
17896: LD_VAR 0 1
17900: PPUSH
17901: CALL_OW 302
17905: NOT
17906: OR
17907: PUSH
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL_OW 301
17917: OR
17918: IFFALSE 17868
// RemoveSeeing ( _x , _y , side ) ;
17920: LD_VAR 0 8
17924: PPUSH
17925: LD_VAR 0 9
17929: PPUSH
17930: LD_VAR 0 6
17934: PPUSH
17935: CALL_OW 331
// end ; end_of_file
17939: LD_VAR 0 4
17943: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17944: LD_INT 0
17946: PPUSH
// if p2 = 100 then
17947: LD_VAR 0 2
17951: PUSH
17952: LD_INT 100
17954: EQUAL
17955: IFFALSE 18904
// begin if not StreamModeActive then
17957: LD_EXP 74
17961: NOT
17962: IFFALSE 17972
// StreamModeActive := true ;
17964: LD_ADDR_EXP 74
17968: PUSH
17969: LD_INT 1
17971: ST_TO_ADDR
// if p3 = 0 then
17972: LD_VAR 0 3
17976: PUSH
17977: LD_INT 0
17979: EQUAL
17980: IFFALSE 17986
// InitStreamMode ;
17982: CALL 19064 0 0
// if p3 = 1 then
17986: LD_VAR 0 3
17990: PUSH
17991: LD_INT 1
17993: EQUAL
17994: IFFALSE 18004
// sRocket := true ;
17996: LD_ADDR_EXP 79
18000: PUSH
18001: LD_INT 1
18003: ST_TO_ADDR
// if p3 = 2 then
18004: LD_VAR 0 3
18008: PUSH
18009: LD_INT 2
18011: EQUAL
18012: IFFALSE 18022
// sSpeed := true ;
18014: LD_ADDR_EXP 78
18018: PUSH
18019: LD_INT 1
18021: ST_TO_ADDR
// if p3 = 3 then
18022: LD_VAR 0 3
18026: PUSH
18027: LD_INT 3
18029: EQUAL
18030: IFFALSE 18040
// sEngine := true ;
18032: LD_ADDR_EXP 80
18036: PUSH
18037: LD_INT 1
18039: ST_TO_ADDR
// if p3 = 4 then
18040: LD_VAR 0 3
18044: PUSH
18045: LD_INT 4
18047: EQUAL
18048: IFFALSE 18058
// sSpec := true ;
18050: LD_ADDR_EXP 77
18054: PUSH
18055: LD_INT 1
18057: ST_TO_ADDR
// if p3 = 5 then
18058: LD_VAR 0 3
18062: PUSH
18063: LD_INT 5
18065: EQUAL
18066: IFFALSE 18076
// sLevel := true ;
18068: LD_ADDR_EXP 81
18072: PUSH
18073: LD_INT 1
18075: ST_TO_ADDR
// if p3 = 6 then
18076: LD_VAR 0 3
18080: PUSH
18081: LD_INT 6
18083: EQUAL
18084: IFFALSE 18094
// sArmoury := true ;
18086: LD_ADDR_EXP 82
18090: PUSH
18091: LD_INT 1
18093: ST_TO_ADDR
// if p3 = 7 then
18094: LD_VAR 0 3
18098: PUSH
18099: LD_INT 7
18101: EQUAL
18102: IFFALSE 18112
// sRadar := true ;
18104: LD_ADDR_EXP 83
18108: PUSH
18109: LD_INT 1
18111: ST_TO_ADDR
// if p3 = 8 then
18112: LD_VAR 0 3
18116: PUSH
18117: LD_INT 8
18119: EQUAL
18120: IFFALSE 18130
// sBunker := true ;
18122: LD_ADDR_EXP 84
18126: PUSH
18127: LD_INT 1
18129: ST_TO_ADDR
// if p3 = 9 then
18130: LD_VAR 0 3
18134: PUSH
18135: LD_INT 9
18137: EQUAL
18138: IFFALSE 18148
// sHack := true ;
18140: LD_ADDR_EXP 85
18144: PUSH
18145: LD_INT 1
18147: ST_TO_ADDR
// if p3 = 10 then
18148: LD_VAR 0 3
18152: PUSH
18153: LD_INT 10
18155: EQUAL
18156: IFFALSE 18166
// sFire := true ;
18158: LD_ADDR_EXP 86
18162: PUSH
18163: LD_INT 1
18165: ST_TO_ADDR
// if p3 = 11 then
18166: LD_VAR 0 3
18170: PUSH
18171: LD_INT 11
18173: EQUAL
18174: IFFALSE 18184
// sRefresh := true ;
18176: LD_ADDR_EXP 87
18180: PUSH
18181: LD_INT 1
18183: ST_TO_ADDR
// if p3 = 12 then
18184: LD_VAR 0 3
18188: PUSH
18189: LD_INT 12
18191: EQUAL
18192: IFFALSE 18202
// sExp := true ;
18194: LD_ADDR_EXP 88
18198: PUSH
18199: LD_INT 1
18201: ST_TO_ADDR
// if p3 = 13 then
18202: LD_VAR 0 3
18206: PUSH
18207: LD_INT 13
18209: EQUAL
18210: IFFALSE 18220
// sDepot := true ;
18212: LD_ADDR_EXP 89
18216: PUSH
18217: LD_INT 1
18219: ST_TO_ADDR
// if p3 = 14 then
18220: LD_VAR 0 3
18224: PUSH
18225: LD_INT 14
18227: EQUAL
18228: IFFALSE 18238
// sFlag := true ;
18230: LD_ADDR_EXP 90
18234: PUSH
18235: LD_INT 1
18237: ST_TO_ADDR
// if p3 = 15 then
18238: LD_VAR 0 3
18242: PUSH
18243: LD_INT 15
18245: EQUAL
18246: IFFALSE 18256
// sKamikadze := true ;
18248: LD_ADDR_EXP 98
18252: PUSH
18253: LD_INT 1
18255: ST_TO_ADDR
// if p3 = 16 then
18256: LD_VAR 0 3
18260: PUSH
18261: LD_INT 16
18263: EQUAL
18264: IFFALSE 18274
// sTroll := true ;
18266: LD_ADDR_EXP 99
18270: PUSH
18271: LD_INT 1
18273: ST_TO_ADDR
// if p3 = 17 then
18274: LD_VAR 0 3
18278: PUSH
18279: LD_INT 17
18281: EQUAL
18282: IFFALSE 18292
// sSlow := true ;
18284: LD_ADDR_EXP 100
18288: PUSH
18289: LD_INT 1
18291: ST_TO_ADDR
// if p3 = 18 then
18292: LD_VAR 0 3
18296: PUSH
18297: LD_INT 18
18299: EQUAL
18300: IFFALSE 18310
// sLack := true ;
18302: LD_ADDR_EXP 101
18306: PUSH
18307: LD_INT 1
18309: ST_TO_ADDR
// if p3 = 19 then
18310: LD_VAR 0 3
18314: PUSH
18315: LD_INT 19
18317: EQUAL
18318: IFFALSE 18328
// sTank := true ;
18320: LD_ADDR_EXP 103
18324: PUSH
18325: LD_INT 1
18327: ST_TO_ADDR
// if p3 = 20 then
18328: LD_VAR 0 3
18332: PUSH
18333: LD_INT 20
18335: EQUAL
18336: IFFALSE 18346
// sRemote := true ;
18338: LD_ADDR_EXP 104
18342: PUSH
18343: LD_INT 1
18345: ST_TO_ADDR
// if p3 = 21 then
18346: LD_VAR 0 3
18350: PUSH
18351: LD_INT 21
18353: EQUAL
18354: IFFALSE 18364
// sPowell := true ;
18356: LD_ADDR_EXP 105
18360: PUSH
18361: LD_INT 1
18363: ST_TO_ADDR
// if p3 = 22 then
18364: LD_VAR 0 3
18368: PUSH
18369: LD_INT 22
18371: EQUAL
18372: IFFALSE 18382
// sTeleport := true ;
18374: LD_ADDR_EXP 108
18378: PUSH
18379: LD_INT 1
18381: ST_TO_ADDR
// if p3 = 23 then
18382: LD_VAR 0 3
18386: PUSH
18387: LD_INT 23
18389: EQUAL
18390: IFFALSE 18400
// sOilTower := true ;
18392: LD_ADDR_EXP 110
18396: PUSH
18397: LD_INT 1
18399: ST_TO_ADDR
// if p3 = 24 then
18400: LD_VAR 0 3
18404: PUSH
18405: LD_INT 24
18407: EQUAL
18408: IFFALSE 18418
// sShovel := true ;
18410: LD_ADDR_EXP 111
18414: PUSH
18415: LD_INT 1
18417: ST_TO_ADDR
// if p3 = 25 then
18418: LD_VAR 0 3
18422: PUSH
18423: LD_INT 25
18425: EQUAL
18426: IFFALSE 18436
// sSheik := true ;
18428: LD_ADDR_EXP 112
18432: PUSH
18433: LD_INT 1
18435: ST_TO_ADDR
// if p3 = 26 then
18436: LD_VAR 0 3
18440: PUSH
18441: LD_INT 26
18443: EQUAL
18444: IFFALSE 18454
// sEarthquake := true ;
18446: LD_ADDR_EXP 114
18450: PUSH
18451: LD_INT 1
18453: ST_TO_ADDR
// if p3 = 27 then
18454: LD_VAR 0 3
18458: PUSH
18459: LD_INT 27
18461: EQUAL
18462: IFFALSE 18472
// sAI := true ;
18464: LD_ADDR_EXP 115
18468: PUSH
18469: LD_INT 1
18471: ST_TO_ADDR
// if p3 = 28 then
18472: LD_VAR 0 3
18476: PUSH
18477: LD_INT 28
18479: EQUAL
18480: IFFALSE 18490
// sCargo := true ;
18482: LD_ADDR_EXP 118
18486: PUSH
18487: LD_INT 1
18489: ST_TO_ADDR
// if p3 = 29 then
18490: LD_VAR 0 3
18494: PUSH
18495: LD_INT 29
18497: EQUAL
18498: IFFALSE 18508
// sDLaser := true ;
18500: LD_ADDR_EXP 119
18504: PUSH
18505: LD_INT 1
18507: ST_TO_ADDR
// if p3 = 30 then
18508: LD_VAR 0 3
18512: PUSH
18513: LD_INT 30
18515: EQUAL
18516: IFFALSE 18526
// sExchange := true ;
18518: LD_ADDR_EXP 120
18522: PUSH
18523: LD_INT 1
18525: ST_TO_ADDR
// if p3 = 31 then
18526: LD_VAR 0 3
18530: PUSH
18531: LD_INT 31
18533: EQUAL
18534: IFFALSE 18544
// sFac := true ;
18536: LD_ADDR_EXP 121
18540: PUSH
18541: LD_INT 1
18543: ST_TO_ADDR
// if p3 = 32 then
18544: LD_VAR 0 3
18548: PUSH
18549: LD_INT 32
18551: EQUAL
18552: IFFALSE 18562
// sPower := true ;
18554: LD_ADDR_EXP 122
18558: PUSH
18559: LD_INT 1
18561: ST_TO_ADDR
// if p3 = 33 then
18562: LD_VAR 0 3
18566: PUSH
18567: LD_INT 33
18569: EQUAL
18570: IFFALSE 18580
// sRandom := true ;
18572: LD_ADDR_EXP 123
18576: PUSH
18577: LD_INT 1
18579: ST_TO_ADDR
// if p3 = 34 then
18580: LD_VAR 0 3
18584: PUSH
18585: LD_INT 34
18587: EQUAL
18588: IFFALSE 18598
// sShield := true ;
18590: LD_ADDR_EXP 124
18594: PUSH
18595: LD_INT 1
18597: ST_TO_ADDR
// if p3 = 35 then
18598: LD_VAR 0 3
18602: PUSH
18603: LD_INT 35
18605: EQUAL
18606: IFFALSE 18616
// sTime := true ;
18608: LD_ADDR_EXP 125
18612: PUSH
18613: LD_INT 1
18615: ST_TO_ADDR
// if p3 = 36 then
18616: LD_VAR 0 3
18620: PUSH
18621: LD_INT 36
18623: EQUAL
18624: IFFALSE 18634
// sTools := true ;
18626: LD_ADDR_EXP 126
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// if p3 = 101 then
18634: LD_VAR 0 3
18638: PUSH
18639: LD_INT 101
18641: EQUAL
18642: IFFALSE 18652
// sSold := true ;
18644: LD_ADDR_EXP 91
18648: PUSH
18649: LD_INT 1
18651: ST_TO_ADDR
// if p3 = 102 then
18652: LD_VAR 0 3
18656: PUSH
18657: LD_INT 102
18659: EQUAL
18660: IFFALSE 18670
// sDiff := true ;
18662: LD_ADDR_EXP 92
18666: PUSH
18667: LD_INT 1
18669: ST_TO_ADDR
// if p3 = 103 then
18670: LD_VAR 0 3
18674: PUSH
18675: LD_INT 103
18677: EQUAL
18678: IFFALSE 18688
// sFog := true ;
18680: LD_ADDR_EXP 95
18684: PUSH
18685: LD_INT 1
18687: ST_TO_ADDR
// if p3 = 104 then
18688: LD_VAR 0 3
18692: PUSH
18693: LD_INT 104
18695: EQUAL
18696: IFFALSE 18706
// sReset := true ;
18698: LD_ADDR_EXP 96
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if p3 = 105 then
18706: LD_VAR 0 3
18710: PUSH
18711: LD_INT 105
18713: EQUAL
18714: IFFALSE 18724
// sSun := true ;
18716: LD_ADDR_EXP 97
18720: PUSH
18721: LD_INT 1
18723: ST_TO_ADDR
// if p3 = 106 then
18724: LD_VAR 0 3
18728: PUSH
18729: LD_INT 106
18731: EQUAL
18732: IFFALSE 18742
// sTiger := true ;
18734: LD_ADDR_EXP 93
18738: PUSH
18739: LD_INT 1
18741: ST_TO_ADDR
// if p3 = 107 then
18742: LD_VAR 0 3
18746: PUSH
18747: LD_INT 107
18749: EQUAL
18750: IFFALSE 18760
// sBomb := true ;
18752: LD_ADDR_EXP 94
18756: PUSH
18757: LD_INT 1
18759: ST_TO_ADDR
// if p3 = 108 then
18760: LD_VAR 0 3
18764: PUSH
18765: LD_INT 108
18767: EQUAL
18768: IFFALSE 18778
// sWound := true ;
18770: LD_ADDR_EXP 102
18774: PUSH
18775: LD_INT 1
18777: ST_TO_ADDR
// if p3 = 109 then
18778: LD_VAR 0 3
18782: PUSH
18783: LD_INT 109
18785: EQUAL
18786: IFFALSE 18796
// sBetray := true ;
18788: LD_ADDR_EXP 106
18792: PUSH
18793: LD_INT 1
18795: ST_TO_ADDR
// if p3 = 110 then
18796: LD_VAR 0 3
18800: PUSH
18801: LD_INT 110
18803: EQUAL
18804: IFFALSE 18814
// sContamin := true ;
18806: LD_ADDR_EXP 107
18810: PUSH
18811: LD_INT 1
18813: ST_TO_ADDR
// if p3 = 111 then
18814: LD_VAR 0 3
18818: PUSH
18819: LD_INT 111
18821: EQUAL
18822: IFFALSE 18832
// sOil := true ;
18824: LD_ADDR_EXP 109
18828: PUSH
18829: LD_INT 1
18831: ST_TO_ADDR
// if p3 = 112 then
18832: LD_VAR 0 3
18836: PUSH
18837: LD_INT 112
18839: EQUAL
18840: IFFALSE 18850
// sStu := true ;
18842: LD_ADDR_EXP 113
18846: PUSH
18847: LD_INT 1
18849: ST_TO_ADDR
// if p3 = 113 then
18850: LD_VAR 0 3
18854: PUSH
18855: LD_INT 113
18857: EQUAL
18858: IFFALSE 18868
// sBazooka := true ;
18860: LD_ADDR_EXP 116
18864: PUSH
18865: LD_INT 1
18867: ST_TO_ADDR
// if p3 = 114 then
18868: LD_VAR 0 3
18872: PUSH
18873: LD_INT 114
18875: EQUAL
18876: IFFALSE 18886
// sMortar := true ;
18878: LD_ADDR_EXP 117
18882: PUSH
18883: LD_INT 1
18885: ST_TO_ADDR
// if p3 = 115 then
18886: LD_VAR 0 3
18890: PUSH
18891: LD_INT 115
18893: EQUAL
18894: IFFALSE 18904
// sRanger := true ;
18896: LD_ADDR_EXP 127
18900: PUSH
18901: LD_INT 1
18903: ST_TO_ADDR
// end ; if p2 = 101 then
18904: LD_VAR 0 2
18908: PUSH
18909: LD_INT 101
18911: EQUAL
18912: IFFALSE 19040
// begin case p3 of 1 :
18914: LD_VAR 0 3
18918: PUSH
18919: LD_INT 1
18921: DOUBLE
18922: EQUAL
18923: IFTRUE 18927
18925: GO 18934
18927: POP
// hHackUnlimitedResources ; 2 :
18928: CALL 30077 0 0
18932: GO 19040
18934: LD_INT 2
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 18949
18942: POP
// hHackSetLevel10 ; 3 :
18943: CALL 30210 0 0
18947: GO 19040
18949: LD_INT 3
18951: DOUBLE
18952: EQUAL
18953: IFTRUE 18957
18955: GO 18964
18957: POP
// hHackSetLevel10YourUnits ; 4 :
18958: CALL 30295 0 0
18962: GO 19040
18964: LD_INT 4
18966: DOUBLE
18967: EQUAL
18968: IFTRUE 18972
18970: GO 18979
18972: POP
// hHackInvincible ; 5 :
18973: CALL 30743 0 0
18977: GO 19040
18979: LD_INT 5
18981: DOUBLE
18982: EQUAL
18983: IFTRUE 18987
18985: GO 18994
18987: POP
// hHackInvisible ; 6 :
18988: CALL 30854 0 0
18992: GO 19040
18994: LD_INT 6
18996: DOUBLE
18997: EQUAL
18998: IFTRUE 19002
19000: GO 19009
19002: POP
// hHackChangeYourSide ; 7 :
19003: CALL 30911 0 0
19007: GO 19040
19009: LD_INT 7
19011: DOUBLE
19012: EQUAL
19013: IFTRUE 19017
19015: GO 19024
19017: POP
// hHackChangeUnitSide ; 8 :
19018: CALL 30953 0 0
19022: GO 19040
19024: LD_INT 8
19026: DOUBLE
19027: EQUAL
19028: IFTRUE 19032
19030: GO 19039
19032: POP
// hHackFog ; end ;
19033: CALL 31054 0 0
19037: GO 19040
19039: POP
// end ; end ;
19040: LD_VAR 0 7
19044: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19045: GO 19047
19047: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19048: LD_STRING initStreamRollete();
19050: PPUSH
19051: CALL_OW 559
// InitStreamMode ;
19055: CALL 19064 0 0
// DefineStreamItems ( ) ;
19059: CALL 19504 0 0
// end ;
19063: END
// function InitStreamMode ; begin
19064: LD_INT 0
19066: PPUSH
// streamModeActive := false ;
19067: LD_ADDR_EXP 74
19071: PUSH
19072: LD_INT 0
19074: ST_TO_ADDR
// normalCounter := 36 ;
19075: LD_ADDR_EXP 75
19079: PUSH
19080: LD_INT 36
19082: ST_TO_ADDR
// hardcoreCounter := 16 ;
19083: LD_ADDR_EXP 76
19087: PUSH
19088: LD_INT 16
19090: ST_TO_ADDR
// sRocket := false ;
19091: LD_ADDR_EXP 79
19095: PUSH
19096: LD_INT 0
19098: ST_TO_ADDR
// sSpeed := false ;
19099: LD_ADDR_EXP 78
19103: PUSH
19104: LD_INT 0
19106: ST_TO_ADDR
// sEngine := false ;
19107: LD_ADDR_EXP 80
19111: PUSH
19112: LD_INT 0
19114: ST_TO_ADDR
// sSpec := false ;
19115: LD_ADDR_EXP 77
19119: PUSH
19120: LD_INT 0
19122: ST_TO_ADDR
// sLevel := false ;
19123: LD_ADDR_EXP 81
19127: PUSH
19128: LD_INT 0
19130: ST_TO_ADDR
// sArmoury := false ;
19131: LD_ADDR_EXP 82
19135: PUSH
19136: LD_INT 0
19138: ST_TO_ADDR
// sRadar := false ;
19139: LD_ADDR_EXP 83
19143: PUSH
19144: LD_INT 0
19146: ST_TO_ADDR
// sBunker := false ;
19147: LD_ADDR_EXP 84
19151: PUSH
19152: LD_INT 0
19154: ST_TO_ADDR
// sHack := false ;
19155: LD_ADDR_EXP 85
19159: PUSH
19160: LD_INT 0
19162: ST_TO_ADDR
// sFire := false ;
19163: LD_ADDR_EXP 86
19167: PUSH
19168: LD_INT 0
19170: ST_TO_ADDR
// sRefresh := false ;
19171: LD_ADDR_EXP 87
19175: PUSH
19176: LD_INT 0
19178: ST_TO_ADDR
// sExp := false ;
19179: LD_ADDR_EXP 88
19183: PUSH
19184: LD_INT 0
19186: ST_TO_ADDR
// sDepot := false ;
19187: LD_ADDR_EXP 89
19191: PUSH
19192: LD_INT 0
19194: ST_TO_ADDR
// sFlag := false ;
19195: LD_ADDR_EXP 90
19199: PUSH
19200: LD_INT 0
19202: ST_TO_ADDR
// sKamikadze := false ;
19203: LD_ADDR_EXP 98
19207: PUSH
19208: LD_INT 0
19210: ST_TO_ADDR
// sTroll := false ;
19211: LD_ADDR_EXP 99
19215: PUSH
19216: LD_INT 0
19218: ST_TO_ADDR
// sSlow := false ;
19219: LD_ADDR_EXP 100
19223: PUSH
19224: LD_INT 0
19226: ST_TO_ADDR
// sLack := false ;
19227: LD_ADDR_EXP 101
19231: PUSH
19232: LD_INT 0
19234: ST_TO_ADDR
// sTank := false ;
19235: LD_ADDR_EXP 103
19239: PUSH
19240: LD_INT 0
19242: ST_TO_ADDR
// sRemote := false ;
19243: LD_ADDR_EXP 104
19247: PUSH
19248: LD_INT 0
19250: ST_TO_ADDR
// sPowell := false ;
19251: LD_ADDR_EXP 105
19255: PUSH
19256: LD_INT 0
19258: ST_TO_ADDR
// sTeleport := false ;
19259: LD_ADDR_EXP 108
19263: PUSH
19264: LD_INT 0
19266: ST_TO_ADDR
// sOilTower := false ;
19267: LD_ADDR_EXP 110
19271: PUSH
19272: LD_INT 0
19274: ST_TO_ADDR
// sShovel := false ;
19275: LD_ADDR_EXP 111
19279: PUSH
19280: LD_INT 0
19282: ST_TO_ADDR
// sSheik := false ;
19283: LD_ADDR_EXP 112
19287: PUSH
19288: LD_INT 0
19290: ST_TO_ADDR
// sEarthquake := false ;
19291: LD_ADDR_EXP 114
19295: PUSH
19296: LD_INT 0
19298: ST_TO_ADDR
// sAI := false ;
19299: LD_ADDR_EXP 115
19303: PUSH
19304: LD_INT 0
19306: ST_TO_ADDR
// sCargo := false ;
19307: LD_ADDR_EXP 118
19311: PUSH
19312: LD_INT 0
19314: ST_TO_ADDR
// sDLaser := false ;
19315: LD_ADDR_EXP 119
19319: PUSH
19320: LD_INT 0
19322: ST_TO_ADDR
// sExchange := false ;
19323: LD_ADDR_EXP 120
19327: PUSH
19328: LD_INT 0
19330: ST_TO_ADDR
// sFac := false ;
19331: LD_ADDR_EXP 121
19335: PUSH
19336: LD_INT 0
19338: ST_TO_ADDR
// sPower := false ;
19339: LD_ADDR_EXP 122
19343: PUSH
19344: LD_INT 0
19346: ST_TO_ADDR
// sRandom := false ;
19347: LD_ADDR_EXP 123
19351: PUSH
19352: LD_INT 0
19354: ST_TO_ADDR
// sShield := false ;
19355: LD_ADDR_EXP 124
19359: PUSH
19360: LD_INT 0
19362: ST_TO_ADDR
// sTime := false ;
19363: LD_ADDR_EXP 125
19367: PUSH
19368: LD_INT 0
19370: ST_TO_ADDR
// sTools := false ;
19371: LD_ADDR_EXP 126
19375: PUSH
19376: LD_INT 0
19378: ST_TO_ADDR
// sSold := false ;
19379: LD_ADDR_EXP 91
19383: PUSH
19384: LD_INT 0
19386: ST_TO_ADDR
// sDiff := false ;
19387: LD_ADDR_EXP 92
19391: PUSH
19392: LD_INT 0
19394: ST_TO_ADDR
// sFog := false ;
19395: LD_ADDR_EXP 95
19399: PUSH
19400: LD_INT 0
19402: ST_TO_ADDR
// sReset := false ;
19403: LD_ADDR_EXP 96
19407: PUSH
19408: LD_INT 0
19410: ST_TO_ADDR
// sSun := false ;
19411: LD_ADDR_EXP 97
19415: PUSH
19416: LD_INT 0
19418: ST_TO_ADDR
// sTiger := false ;
19419: LD_ADDR_EXP 93
19423: PUSH
19424: LD_INT 0
19426: ST_TO_ADDR
// sBomb := false ;
19427: LD_ADDR_EXP 94
19431: PUSH
19432: LD_INT 0
19434: ST_TO_ADDR
// sWound := false ;
19435: LD_ADDR_EXP 102
19439: PUSH
19440: LD_INT 0
19442: ST_TO_ADDR
// sBetray := false ;
19443: LD_ADDR_EXP 106
19447: PUSH
19448: LD_INT 0
19450: ST_TO_ADDR
// sContamin := false ;
19451: LD_ADDR_EXP 107
19455: PUSH
19456: LD_INT 0
19458: ST_TO_ADDR
// sOil := false ;
19459: LD_ADDR_EXP 109
19463: PUSH
19464: LD_INT 0
19466: ST_TO_ADDR
// sStu := false ;
19467: LD_ADDR_EXP 113
19471: PUSH
19472: LD_INT 0
19474: ST_TO_ADDR
// sBazooka := false ;
19475: LD_ADDR_EXP 116
19479: PUSH
19480: LD_INT 0
19482: ST_TO_ADDR
// sMortar := false ;
19483: LD_ADDR_EXP 117
19487: PUSH
19488: LD_INT 0
19490: ST_TO_ADDR
// sRanger := false ;
19491: LD_ADDR_EXP 127
19495: PUSH
19496: LD_INT 0
19498: ST_TO_ADDR
// end ;
19499: LD_VAR 0 1
19503: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19504: LD_INT 0
19506: PPUSH
19507: PPUSH
19508: PPUSH
19509: PPUSH
19510: PPUSH
// result := [ ] ;
19511: LD_ADDR_VAR 0 1
19515: PUSH
19516: EMPTY
19517: ST_TO_ADDR
// if campaign_id = 1 then
19518: LD_OWVAR 69
19522: PUSH
19523: LD_INT 1
19525: EQUAL
19526: IFFALSE 22464
// begin case mission_number of 1 :
19528: LD_OWVAR 70
19532: PUSH
19533: LD_INT 1
19535: DOUBLE
19536: EQUAL
19537: IFTRUE 19541
19539: GO 19605
19541: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19542: LD_ADDR_VAR 0 1
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: LD_INT 4
19552: PUSH
19553: LD_INT 11
19555: PUSH
19556: LD_INT 12
19558: PUSH
19559: LD_INT 15
19561: PUSH
19562: LD_INT 16
19564: PUSH
19565: LD_INT 22
19567: PUSH
19568: LD_INT 23
19570: PUSH
19571: LD_INT 26
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 101
19587: PUSH
19588: LD_INT 102
19590: PUSH
19591: LD_INT 106
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: ST_TO_ADDR
19603: GO 22462
19605: LD_INT 2
19607: DOUBLE
19608: EQUAL
19609: IFTRUE 19613
19611: GO 19685
19613: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19614: LD_ADDR_VAR 0 1
19618: PUSH
19619: LD_INT 2
19621: PUSH
19622: LD_INT 4
19624: PUSH
19625: LD_INT 11
19627: PUSH
19628: LD_INT 12
19630: PUSH
19631: LD_INT 15
19633: PUSH
19634: LD_INT 16
19636: PUSH
19637: LD_INT 22
19639: PUSH
19640: LD_INT 23
19642: PUSH
19643: LD_INT 26
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 101
19659: PUSH
19660: LD_INT 102
19662: PUSH
19663: LD_INT 105
19665: PUSH
19666: LD_INT 106
19668: PUSH
19669: LD_INT 108
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: ST_TO_ADDR
19683: GO 22462
19685: LD_INT 3
19687: DOUBLE
19688: EQUAL
19689: IFTRUE 19693
19691: GO 19769
19693: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19694: LD_ADDR_VAR 0 1
19698: PUSH
19699: LD_INT 2
19701: PUSH
19702: LD_INT 4
19704: PUSH
19705: LD_INT 5
19707: PUSH
19708: LD_INT 11
19710: PUSH
19711: LD_INT 12
19713: PUSH
19714: LD_INT 15
19716: PUSH
19717: LD_INT 16
19719: PUSH
19720: LD_INT 22
19722: PUSH
19723: LD_INT 26
19725: PUSH
19726: LD_INT 36
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 101
19743: PUSH
19744: LD_INT 102
19746: PUSH
19747: LD_INT 105
19749: PUSH
19750: LD_INT 106
19752: PUSH
19753: LD_INT 108
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: ST_TO_ADDR
19767: GO 22462
19769: LD_INT 4
19771: DOUBLE
19772: EQUAL
19773: IFTRUE 19777
19775: GO 19861
19777: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19778: LD_ADDR_VAR 0 1
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 4
19788: PUSH
19789: LD_INT 5
19791: PUSH
19792: LD_INT 8
19794: PUSH
19795: LD_INT 11
19797: PUSH
19798: LD_INT 12
19800: PUSH
19801: LD_INT 15
19803: PUSH
19804: LD_INT 16
19806: PUSH
19807: LD_INT 22
19809: PUSH
19810: LD_INT 23
19812: PUSH
19813: LD_INT 26
19815: PUSH
19816: LD_INT 36
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 101
19835: PUSH
19836: LD_INT 102
19838: PUSH
19839: LD_INT 105
19841: PUSH
19842: LD_INT 106
19844: PUSH
19845: LD_INT 108
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: ST_TO_ADDR
19859: GO 22462
19861: LD_INT 5
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 19969
19869: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
19870: LD_ADDR_VAR 0 1
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: LD_INT 4
19880: PUSH
19881: LD_INT 5
19883: PUSH
19884: LD_INT 6
19886: PUSH
19887: LD_INT 8
19889: PUSH
19890: LD_INT 11
19892: PUSH
19893: LD_INT 12
19895: PUSH
19896: LD_INT 15
19898: PUSH
19899: LD_INT 16
19901: PUSH
19902: LD_INT 22
19904: PUSH
19905: LD_INT 23
19907: PUSH
19908: LD_INT 25
19910: PUSH
19911: LD_INT 26
19913: PUSH
19914: LD_INT 36
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 101
19935: PUSH
19936: LD_INT 102
19938: PUSH
19939: LD_INT 105
19941: PUSH
19942: LD_INT 106
19944: PUSH
19945: LD_INT 108
19947: PUSH
19948: LD_INT 109
19950: PUSH
19951: LD_INT 112
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: ST_TO_ADDR
19967: GO 22462
19969: LD_INT 6
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 20097
19977: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
19978: LD_ADDR_VAR 0 1
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 4
19988: PUSH
19989: LD_INT 5
19991: PUSH
19992: LD_INT 6
19994: PUSH
19995: LD_INT 8
19997: PUSH
19998: LD_INT 11
20000: PUSH
20001: LD_INT 12
20003: PUSH
20004: LD_INT 15
20006: PUSH
20007: LD_INT 16
20009: PUSH
20010: LD_INT 20
20012: PUSH
20013: LD_INT 21
20015: PUSH
20016: LD_INT 22
20018: PUSH
20019: LD_INT 23
20021: PUSH
20022: LD_INT 25
20024: PUSH
20025: LD_INT 26
20027: PUSH
20028: LD_INT 30
20030: PUSH
20031: LD_INT 31
20033: PUSH
20034: LD_INT 32
20036: PUSH
20037: LD_INT 36
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 101
20063: PUSH
20064: LD_INT 102
20066: PUSH
20067: LD_INT 105
20069: PUSH
20070: LD_INT 106
20072: PUSH
20073: LD_INT 108
20075: PUSH
20076: LD_INT 109
20078: PUSH
20079: LD_INT 112
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: ST_TO_ADDR
20095: GO 22462
20097: LD_INT 7
20099: DOUBLE
20100: EQUAL
20101: IFTRUE 20105
20103: GO 20205
20105: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20106: LD_ADDR_VAR 0 1
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: LD_INT 4
20116: PUSH
20117: LD_INT 5
20119: PUSH
20120: LD_INT 7
20122: PUSH
20123: LD_INT 11
20125: PUSH
20126: LD_INT 12
20128: PUSH
20129: LD_INT 15
20131: PUSH
20132: LD_INT 16
20134: PUSH
20135: LD_INT 20
20137: PUSH
20138: LD_INT 21
20140: PUSH
20141: LD_INT 22
20143: PUSH
20144: LD_INT 23
20146: PUSH
20147: LD_INT 25
20149: PUSH
20150: LD_INT 26
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 101
20171: PUSH
20172: LD_INT 102
20174: PUSH
20175: LD_INT 103
20177: PUSH
20178: LD_INT 105
20180: PUSH
20181: LD_INT 106
20183: PUSH
20184: LD_INT 108
20186: PUSH
20187: LD_INT 112
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: ST_TO_ADDR
20203: GO 22462
20205: LD_INT 8
20207: DOUBLE
20208: EQUAL
20209: IFTRUE 20213
20211: GO 20341
20213: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20214: LD_ADDR_VAR 0 1
20218: PUSH
20219: LD_INT 2
20221: PUSH
20222: LD_INT 4
20224: PUSH
20225: LD_INT 5
20227: PUSH
20228: LD_INT 6
20230: PUSH
20231: LD_INT 7
20233: PUSH
20234: LD_INT 8
20236: PUSH
20237: LD_INT 11
20239: PUSH
20240: LD_INT 12
20242: PUSH
20243: LD_INT 15
20245: PUSH
20246: LD_INT 16
20248: PUSH
20249: LD_INT 20
20251: PUSH
20252: LD_INT 21
20254: PUSH
20255: LD_INT 22
20257: PUSH
20258: LD_INT 23
20260: PUSH
20261: LD_INT 25
20263: PUSH
20264: LD_INT 26
20266: PUSH
20267: LD_INT 30
20269: PUSH
20270: LD_INT 31
20272: PUSH
20273: LD_INT 32
20275: PUSH
20276: LD_INT 36
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 101
20303: PUSH
20304: LD_INT 102
20306: PUSH
20307: LD_INT 103
20309: PUSH
20310: LD_INT 105
20312: PUSH
20313: LD_INT 106
20315: PUSH
20316: LD_INT 108
20318: PUSH
20319: LD_INT 109
20321: PUSH
20322: LD_INT 112
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: ST_TO_ADDR
20339: GO 22462
20341: LD_INT 9
20343: DOUBLE
20344: EQUAL
20345: IFTRUE 20349
20347: GO 20485
20349: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20350: LD_ADDR_VAR 0 1
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: LD_INT 4
20360: PUSH
20361: LD_INT 5
20363: PUSH
20364: LD_INT 6
20366: PUSH
20367: LD_INT 7
20369: PUSH
20370: LD_INT 8
20372: PUSH
20373: LD_INT 11
20375: PUSH
20376: LD_INT 12
20378: PUSH
20379: LD_INT 15
20381: PUSH
20382: LD_INT 16
20384: PUSH
20385: LD_INT 20
20387: PUSH
20388: LD_INT 21
20390: PUSH
20391: LD_INT 22
20393: PUSH
20394: LD_INT 23
20396: PUSH
20397: LD_INT 25
20399: PUSH
20400: LD_INT 26
20402: PUSH
20403: LD_INT 28
20405: PUSH
20406: LD_INT 30
20408: PUSH
20409: LD_INT 31
20411: PUSH
20412: LD_INT 32
20414: PUSH
20415: LD_INT 36
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 101
20443: PUSH
20444: LD_INT 102
20446: PUSH
20447: LD_INT 103
20449: PUSH
20450: LD_INT 105
20452: PUSH
20453: LD_INT 106
20455: PUSH
20456: LD_INT 108
20458: PUSH
20459: LD_INT 109
20461: PUSH
20462: LD_INT 112
20464: PUSH
20465: LD_INT 114
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: ST_TO_ADDR
20483: GO 22462
20485: LD_INT 10
20487: DOUBLE
20488: EQUAL
20489: IFTRUE 20493
20491: GO 20677
20493: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20494: LD_ADDR_VAR 0 1
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 4
20504: PUSH
20505: LD_INT 5
20507: PUSH
20508: LD_INT 6
20510: PUSH
20511: LD_INT 7
20513: PUSH
20514: LD_INT 8
20516: PUSH
20517: LD_INT 9
20519: PUSH
20520: LD_INT 10
20522: PUSH
20523: LD_INT 11
20525: PUSH
20526: LD_INT 12
20528: PUSH
20529: LD_INT 13
20531: PUSH
20532: LD_INT 14
20534: PUSH
20535: LD_INT 15
20537: PUSH
20538: LD_INT 16
20540: PUSH
20541: LD_INT 17
20543: PUSH
20544: LD_INT 18
20546: PUSH
20547: LD_INT 19
20549: PUSH
20550: LD_INT 20
20552: PUSH
20553: LD_INT 21
20555: PUSH
20556: LD_INT 22
20558: PUSH
20559: LD_INT 23
20561: PUSH
20562: LD_INT 24
20564: PUSH
20565: LD_INT 25
20567: PUSH
20568: LD_INT 26
20570: PUSH
20571: LD_INT 28
20573: PUSH
20574: LD_INT 30
20576: PUSH
20577: LD_INT 31
20579: PUSH
20580: LD_INT 32
20582: PUSH
20583: LD_INT 36
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 101
20619: PUSH
20620: LD_INT 102
20622: PUSH
20623: LD_INT 103
20625: PUSH
20626: LD_INT 104
20628: PUSH
20629: LD_INT 105
20631: PUSH
20632: LD_INT 106
20634: PUSH
20635: LD_INT 107
20637: PUSH
20638: LD_INT 108
20640: PUSH
20641: LD_INT 109
20643: PUSH
20644: LD_INT 110
20646: PUSH
20647: LD_INT 111
20649: PUSH
20650: LD_INT 112
20652: PUSH
20653: LD_INT 114
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: ST_TO_ADDR
20675: GO 22462
20677: LD_INT 11
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20877
20685: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20686: LD_ADDR_VAR 0 1
20690: PUSH
20691: LD_INT 2
20693: PUSH
20694: LD_INT 3
20696: PUSH
20697: LD_INT 4
20699: PUSH
20700: LD_INT 5
20702: PUSH
20703: LD_INT 6
20705: PUSH
20706: LD_INT 7
20708: PUSH
20709: LD_INT 8
20711: PUSH
20712: LD_INT 9
20714: PUSH
20715: LD_INT 10
20717: PUSH
20718: LD_INT 11
20720: PUSH
20721: LD_INT 12
20723: PUSH
20724: LD_INT 13
20726: PUSH
20727: LD_INT 14
20729: PUSH
20730: LD_INT 15
20732: PUSH
20733: LD_INT 16
20735: PUSH
20736: LD_INT 17
20738: PUSH
20739: LD_INT 18
20741: PUSH
20742: LD_INT 19
20744: PUSH
20745: LD_INT 20
20747: PUSH
20748: LD_INT 21
20750: PUSH
20751: LD_INT 22
20753: PUSH
20754: LD_INT 23
20756: PUSH
20757: LD_INT 24
20759: PUSH
20760: LD_INT 25
20762: PUSH
20763: LD_INT 26
20765: PUSH
20766: LD_INT 28
20768: PUSH
20769: LD_INT 30
20771: PUSH
20772: LD_INT 31
20774: PUSH
20775: LD_INT 32
20777: PUSH
20778: LD_INT 34
20780: PUSH
20781: LD_INT 36
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 101
20819: PUSH
20820: LD_INT 102
20822: PUSH
20823: LD_INT 103
20825: PUSH
20826: LD_INT 104
20828: PUSH
20829: LD_INT 105
20831: PUSH
20832: LD_INT 106
20834: PUSH
20835: LD_INT 107
20837: PUSH
20838: LD_INT 108
20840: PUSH
20841: LD_INT 109
20843: PUSH
20844: LD_INT 110
20846: PUSH
20847: LD_INT 111
20849: PUSH
20850: LD_INT 112
20852: PUSH
20853: LD_INT 114
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: ST_TO_ADDR
20875: GO 22462
20877: LD_INT 12
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 21093
20885: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
20886: LD_ADDR_VAR 0 1
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: LD_INT 3
20899: PUSH
20900: LD_INT 4
20902: PUSH
20903: LD_INT 5
20905: PUSH
20906: LD_INT 6
20908: PUSH
20909: LD_INT 7
20911: PUSH
20912: LD_INT 8
20914: PUSH
20915: LD_INT 9
20917: PUSH
20918: LD_INT 10
20920: PUSH
20921: LD_INT 11
20923: PUSH
20924: LD_INT 12
20926: PUSH
20927: LD_INT 13
20929: PUSH
20930: LD_INT 14
20932: PUSH
20933: LD_INT 15
20935: PUSH
20936: LD_INT 16
20938: PUSH
20939: LD_INT 17
20941: PUSH
20942: LD_INT 18
20944: PUSH
20945: LD_INT 19
20947: PUSH
20948: LD_INT 20
20950: PUSH
20951: LD_INT 21
20953: PUSH
20954: LD_INT 22
20956: PUSH
20957: LD_INT 23
20959: PUSH
20960: LD_INT 24
20962: PUSH
20963: LD_INT 25
20965: PUSH
20966: LD_INT 26
20968: PUSH
20969: LD_INT 27
20971: PUSH
20972: LD_INT 28
20974: PUSH
20975: LD_INT 30
20977: PUSH
20978: LD_INT 31
20980: PUSH
20981: LD_INT 32
20983: PUSH
20984: LD_INT 33
20986: PUSH
20987: LD_INT 34
20989: PUSH
20990: LD_INT 36
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 101
21031: PUSH
21032: LD_INT 102
21034: PUSH
21035: LD_INT 103
21037: PUSH
21038: LD_INT 104
21040: PUSH
21041: LD_INT 105
21043: PUSH
21044: LD_INT 106
21046: PUSH
21047: LD_INT 107
21049: PUSH
21050: LD_INT 108
21052: PUSH
21053: LD_INT 109
21055: PUSH
21056: LD_INT 110
21058: PUSH
21059: LD_INT 111
21061: PUSH
21062: LD_INT 112
21064: PUSH
21065: LD_INT 113
21067: PUSH
21068: LD_INT 114
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: ST_TO_ADDR
21091: GO 22462
21093: LD_INT 13
21095: DOUBLE
21096: EQUAL
21097: IFTRUE 21101
21099: GO 21297
21101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21102: LD_ADDR_VAR 0 1
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: LD_INT 2
21112: PUSH
21113: LD_INT 3
21115: PUSH
21116: LD_INT 4
21118: PUSH
21119: LD_INT 5
21121: PUSH
21122: LD_INT 8
21124: PUSH
21125: LD_INT 9
21127: PUSH
21128: LD_INT 10
21130: PUSH
21131: LD_INT 11
21133: PUSH
21134: LD_INT 12
21136: PUSH
21137: LD_INT 14
21139: PUSH
21140: LD_INT 15
21142: PUSH
21143: LD_INT 16
21145: PUSH
21146: LD_INT 17
21148: PUSH
21149: LD_INT 18
21151: PUSH
21152: LD_INT 19
21154: PUSH
21155: LD_INT 20
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_INT 23
21166: PUSH
21167: LD_INT 24
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 26
21175: PUSH
21176: LD_INT 27
21178: PUSH
21179: LD_INT 28
21181: PUSH
21182: LD_INT 30
21184: PUSH
21185: LD_INT 31
21187: PUSH
21188: LD_INT 32
21190: PUSH
21191: LD_INT 33
21193: PUSH
21194: LD_INT 34
21196: PUSH
21197: LD_INT 36
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 101
21235: PUSH
21236: LD_INT 102
21238: PUSH
21239: LD_INT 103
21241: PUSH
21242: LD_INT 104
21244: PUSH
21245: LD_INT 105
21247: PUSH
21248: LD_INT 106
21250: PUSH
21251: LD_INT 107
21253: PUSH
21254: LD_INT 108
21256: PUSH
21257: LD_INT 109
21259: PUSH
21260: LD_INT 110
21262: PUSH
21263: LD_INT 111
21265: PUSH
21266: LD_INT 112
21268: PUSH
21269: LD_INT 113
21271: PUSH
21272: LD_INT 114
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: ST_TO_ADDR
21295: GO 22462
21297: LD_INT 14
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21517
21305: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21306: LD_ADDR_VAR 0 1
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: LD_INT 2
21316: PUSH
21317: LD_INT 3
21319: PUSH
21320: LD_INT 4
21322: PUSH
21323: LD_INT 5
21325: PUSH
21326: LD_INT 6
21328: PUSH
21329: LD_INT 7
21331: PUSH
21332: LD_INT 8
21334: PUSH
21335: LD_INT 9
21337: PUSH
21338: LD_INT 10
21340: PUSH
21341: LD_INT 11
21343: PUSH
21344: LD_INT 12
21346: PUSH
21347: LD_INT 13
21349: PUSH
21350: LD_INT 14
21352: PUSH
21353: LD_INT 15
21355: PUSH
21356: LD_INT 16
21358: PUSH
21359: LD_INT 17
21361: PUSH
21362: LD_INT 18
21364: PUSH
21365: LD_INT 19
21367: PUSH
21368: LD_INT 20
21370: PUSH
21371: LD_INT 21
21373: PUSH
21374: LD_INT 22
21376: PUSH
21377: LD_INT 23
21379: PUSH
21380: LD_INT 24
21382: PUSH
21383: LD_INT 25
21385: PUSH
21386: LD_INT 26
21388: PUSH
21389: LD_INT 27
21391: PUSH
21392: LD_INT 28
21394: PUSH
21395: LD_INT 29
21397: PUSH
21398: LD_INT 30
21400: PUSH
21401: LD_INT 31
21403: PUSH
21404: LD_INT 32
21406: PUSH
21407: LD_INT 33
21409: PUSH
21410: LD_INT 34
21412: PUSH
21413: LD_INT 36
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 101
21455: PUSH
21456: LD_INT 102
21458: PUSH
21459: LD_INT 103
21461: PUSH
21462: LD_INT 104
21464: PUSH
21465: LD_INT 105
21467: PUSH
21468: LD_INT 106
21470: PUSH
21471: LD_INT 107
21473: PUSH
21474: LD_INT 108
21476: PUSH
21477: LD_INT 109
21479: PUSH
21480: LD_INT 110
21482: PUSH
21483: LD_INT 111
21485: PUSH
21486: LD_INT 112
21488: PUSH
21489: LD_INT 113
21491: PUSH
21492: LD_INT 114
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: ST_TO_ADDR
21515: GO 22462
21517: LD_INT 15
21519: DOUBLE
21520: EQUAL
21521: IFTRUE 21525
21523: GO 21737
21525: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21526: LD_ADDR_VAR 0 1
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: LD_INT 2
21536: PUSH
21537: LD_INT 3
21539: PUSH
21540: LD_INT 4
21542: PUSH
21543: LD_INT 5
21545: PUSH
21546: LD_INT 6
21548: PUSH
21549: LD_INT 7
21551: PUSH
21552: LD_INT 8
21554: PUSH
21555: LD_INT 9
21557: PUSH
21558: LD_INT 10
21560: PUSH
21561: LD_INT 11
21563: PUSH
21564: LD_INT 12
21566: PUSH
21567: LD_INT 13
21569: PUSH
21570: LD_INT 14
21572: PUSH
21573: LD_INT 15
21575: PUSH
21576: LD_INT 16
21578: PUSH
21579: LD_INT 17
21581: PUSH
21582: LD_INT 18
21584: PUSH
21585: LD_INT 19
21587: PUSH
21588: LD_INT 20
21590: PUSH
21591: LD_INT 21
21593: PUSH
21594: LD_INT 22
21596: PUSH
21597: LD_INT 23
21599: PUSH
21600: LD_INT 24
21602: PUSH
21603: LD_INT 25
21605: PUSH
21606: LD_INT 26
21608: PUSH
21609: LD_INT 27
21611: PUSH
21612: LD_INT 28
21614: PUSH
21615: LD_INT 29
21617: PUSH
21618: LD_INT 30
21620: PUSH
21621: LD_INT 31
21623: PUSH
21624: LD_INT 32
21626: PUSH
21627: LD_INT 33
21629: PUSH
21630: LD_INT 34
21632: PUSH
21633: LD_INT 36
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 101
21675: PUSH
21676: LD_INT 102
21678: PUSH
21679: LD_INT 103
21681: PUSH
21682: LD_INT 104
21684: PUSH
21685: LD_INT 105
21687: PUSH
21688: LD_INT 106
21690: PUSH
21691: LD_INT 107
21693: PUSH
21694: LD_INT 108
21696: PUSH
21697: LD_INT 109
21699: PUSH
21700: LD_INT 110
21702: PUSH
21703: LD_INT 111
21705: PUSH
21706: LD_INT 112
21708: PUSH
21709: LD_INT 113
21711: PUSH
21712: LD_INT 114
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: ST_TO_ADDR
21735: GO 22462
21737: LD_INT 16
21739: DOUBLE
21740: EQUAL
21741: IFTRUE 21745
21743: GO 21869
21745: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21746: LD_ADDR_VAR 0 1
21750: PUSH
21751: LD_INT 2
21753: PUSH
21754: LD_INT 4
21756: PUSH
21757: LD_INT 5
21759: PUSH
21760: LD_INT 7
21762: PUSH
21763: LD_INT 11
21765: PUSH
21766: LD_INT 12
21768: PUSH
21769: LD_INT 15
21771: PUSH
21772: LD_INT 16
21774: PUSH
21775: LD_INT 20
21777: PUSH
21778: LD_INT 21
21780: PUSH
21781: LD_INT 22
21783: PUSH
21784: LD_INT 23
21786: PUSH
21787: LD_INT 25
21789: PUSH
21790: LD_INT 26
21792: PUSH
21793: LD_INT 30
21795: PUSH
21796: LD_INT 31
21798: PUSH
21799: LD_INT 32
21801: PUSH
21802: LD_INT 33
21804: PUSH
21805: LD_INT 34
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 101
21831: PUSH
21832: LD_INT 102
21834: PUSH
21835: LD_INT 103
21837: PUSH
21838: LD_INT 106
21840: PUSH
21841: LD_INT 108
21843: PUSH
21844: LD_INT 112
21846: PUSH
21847: LD_INT 113
21849: PUSH
21850: LD_INT 114
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: ST_TO_ADDR
21867: GO 22462
21869: LD_INT 17
21871: DOUBLE
21872: EQUAL
21873: IFTRUE 21877
21875: GO 22089
21877: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
21878: LD_ADDR_VAR 0 1
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: LD_INT 4
21894: PUSH
21895: LD_INT 5
21897: PUSH
21898: LD_INT 6
21900: PUSH
21901: LD_INT 7
21903: PUSH
21904: LD_INT 8
21906: PUSH
21907: LD_INT 9
21909: PUSH
21910: LD_INT 10
21912: PUSH
21913: LD_INT 11
21915: PUSH
21916: LD_INT 12
21918: PUSH
21919: LD_INT 13
21921: PUSH
21922: LD_INT 14
21924: PUSH
21925: LD_INT 15
21927: PUSH
21928: LD_INT 16
21930: PUSH
21931: LD_INT 17
21933: PUSH
21934: LD_INT 18
21936: PUSH
21937: LD_INT 19
21939: PUSH
21940: LD_INT 20
21942: PUSH
21943: LD_INT 21
21945: PUSH
21946: LD_INT 22
21948: PUSH
21949: LD_INT 23
21951: PUSH
21952: LD_INT 24
21954: PUSH
21955: LD_INT 25
21957: PUSH
21958: LD_INT 26
21960: PUSH
21961: LD_INT 27
21963: PUSH
21964: LD_INT 28
21966: PUSH
21967: LD_INT 29
21969: PUSH
21970: LD_INT 30
21972: PUSH
21973: LD_INT 31
21975: PUSH
21976: LD_INT 32
21978: PUSH
21979: LD_INT 33
21981: PUSH
21982: LD_INT 34
21984: PUSH
21985: LD_INT 36
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 101
22027: PUSH
22028: LD_INT 102
22030: PUSH
22031: LD_INT 103
22033: PUSH
22034: LD_INT 104
22036: PUSH
22037: LD_INT 105
22039: PUSH
22040: LD_INT 106
22042: PUSH
22043: LD_INT 107
22045: PUSH
22046: LD_INT 108
22048: PUSH
22049: LD_INT 109
22051: PUSH
22052: LD_INT 110
22054: PUSH
22055: LD_INT 111
22057: PUSH
22058: LD_INT 112
22060: PUSH
22061: LD_INT 113
22063: PUSH
22064: LD_INT 114
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: ST_TO_ADDR
22087: GO 22462
22089: LD_INT 18
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22233
22097: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22098: LD_ADDR_VAR 0 1
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: LD_INT 4
22108: PUSH
22109: LD_INT 5
22111: PUSH
22112: LD_INT 7
22114: PUSH
22115: LD_INT 11
22117: PUSH
22118: LD_INT 12
22120: PUSH
22121: LD_INT 15
22123: PUSH
22124: LD_INT 16
22126: PUSH
22127: LD_INT 20
22129: PUSH
22130: LD_INT 21
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 23
22138: PUSH
22139: LD_INT 25
22141: PUSH
22142: LD_INT 26
22144: PUSH
22145: LD_INT 30
22147: PUSH
22148: LD_INT 31
22150: PUSH
22151: LD_INT 32
22153: PUSH
22154: LD_INT 33
22156: PUSH
22157: LD_INT 34
22159: PUSH
22160: LD_INT 35
22162: PUSH
22163: LD_INT 36
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 101
22191: PUSH
22192: LD_INT 102
22194: PUSH
22195: LD_INT 103
22197: PUSH
22198: LD_INT 106
22200: PUSH
22201: LD_INT 108
22203: PUSH
22204: LD_INT 112
22206: PUSH
22207: LD_INT 113
22209: PUSH
22210: LD_INT 114
22212: PUSH
22213: LD_INT 115
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: ST_TO_ADDR
22231: GO 22462
22233: LD_INT 19
22235: DOUBLE
22236: EQUAL
22237: IFTRUE 22241
22239: GO 22461
22241: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22242: LD_ADDR_VAR 0 1
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: LD_INT 3
22255: PUSH
22256: LD_INT 4
22258: PUSH
22259: LD_INT 5
22261: PUSH
22262: LD_INT 6
22264: PUSH
22265: LD_INT 7
22267: PUSH
22268: LD_INT 8
22270: PUSH
22271: LD_INT 9
22273: PUSH
22274: LD_INT 10
22276: PUSH
22277: LD_INT 11
22279: PUSH
22280: LD_INT 12
22282: PUSH
22283: LD_INT 13
22285: PUSH
22286: LD_INT 14
22288: PUSH
22289: LD_INT 15
22291: PUSH
22292: LD_INT 16
22294: PUSH
22295: LD_INT 17
22297: PUSH
22298: LD_INT 18
22300: PUSH
22301: LD_INT 19
22303: PUSH
22304: LD_INT 20
22306: PUSH
22307: LD_INT 21
22309: PUSH
22310: LD_INT 22
22312: PUSH
22313: LD_INT 23
22315: PUSH
22316: LD_INT 24
22318: PUSH
22319: LD_INT 25
22321: PUSH
22322: LD_INT 26
22324: PUSH
22325: LD_INT 27
22327: PUSH
22328: LD_INT 28
22330: PUSH
22331: LD_INT 29
22333: PUSH
22334: LD_INT 30
22336: PUSH
22337: LD_INT 31
22339: PUSH
22340: LD_INT 32
22342: PUSH
22343: LD_INT 33
22345: PUSH
22346: LD_INT 34
22348: PUSH
22349: LD_INT 35
22351: PUSH
22352: LD_INT 36
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 101
22395: PUSH
22396: LD_INT 102
22398: PUSH
22399: LD_INT 103
22401: PUSH
22402: LD_INT 104
22404: PUSH
22405: LD_INT 105
22407: PUSH
22408: LD_INT 106
22410: PUSH
22411: LD_INT 107
22413: PUSH
22414: LD_INT 108
22416: PUSH
22417: LD_INT 109
22419: PUSH
22420: LD_INT 110
22422: PUSH
22423: LD_INT 111
22425: PUSH
22426: LD_INT 112
22428: PUSH
22429: LD_INT 113
22431: PUSH
22432: LD_INT 114
22434: PUSH
22435: LD_INT 115
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: ST_TO_ADDR
22459: GO 22462
22461: POP
// end else
22462: GO 22681
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22464: LD_ADDR_VAR 0 1
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: LD_INT 2
22474: PUSH
22475: LD_INT 3
22477: PUSH
22478: LD_INT 4
22480: PUSH
22481: LD_INT 5
22483: PUSH
22484: LD_INT 6
22486: PUSH
22487: LD_INT 7
22489: PUSH
22490: LD_INT 8
22492: PUSH
22493: LD_INT 9
22495: PUSH
22496: LD_INT 10
22498: PUSH
22499: LD_INT 11
22501: PUSH
22502: LD_INT 12
22504: PUSH
22505: LD_INT 13
22507: PUSH
22508: LD_INT 14
22510: PUSH
22511: LD_INT 15
22513: PUSH
22514: LD_INT 16
22516: PUSH
22517: LD_INT 17
22519: PUSH
22520: LD_INT 18
22522: PUSH
22523: LD_INT 19
22525: PUSH
22526: LD_INT 20
22528: PUSH
22529: LD_INT 21
22531: PUSH
22532: LD_INT 22
22534: PUSH
22535: LD_INT 23
22537: PUSH
22538: LD_INT 24
22540: PUSH
22541: LD_INT 25
22543: PUSH
22544: LD_INT 26
22546: PUSH
22547: LD_INT 27
22549: PUSH
22550: LD_INT 28
22552: PUSH
22553: LD_INT 29
22555: PUSH
22556: LD_INT 30
22558: PUSH
22559: LD_INT 31
22561: PUSH
22562: LD_INT 32
22564: PUSH
22565: LD_INT 33
22567: PUSH
22568: LD_INT 34
22570: PUSH
22571: LD_INT 35
22573: PUSH
22574: LD_INT 36
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 101
22617: PUSH
22618: LD_INT 102
22620: PUSH
22621: LD_INT 103
22623: PUSH
22624: LD_INT 104
22626: PUSH
22627: LD_INT 105
22629: PUSH
22630: LD_INT 106
22632: PUSH
22633: LD_INT 107
22635: PUSH
22636: LD_INT 108
22638: PUSH
22639: LD_INT 109
22641: PUSH
22642: LD_INT 110
22644: PUSH
22645: LD_INT 111
22647: PUSH
22648: LD_INT 112
22650: PUSH
22651: LD_INT 113
22653: PUSH
22654: LD_INT 114
22656: PUSH
22657: LD_INT 115
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: ST_TO_ADDR
// if result then
22681: LD_VAR 0 1
22685: IFFALSE 22974
// begin normal :=  ;
22687: LD_ADDR_VAR 0 3
22691: PUSH
22692: LD_STRING 
22694: ST_TO_ADDR
// hardcore :=  ;
22695: LD_ADDR_VAR 0 4
22699: PUSH
22700: LD_STRING 
22702: ST_TO_ADDR
// for i = 1 to normalCounter do
22703: LD_ADDR_VAR 0 5
22707: PUSH
22708: DOUBLE
22709: LD_INT 1
22711: DEC
22712: ST_TO_ADDR
22713: LD_EXP 75
22717: PUSH
22718: FOR_TO
22719: IFFALSE 22820
// begin tmp := 0 ;
22721: LD_ADDR_VAR 0 2
22725: PUSH
22726: LD_STRING 0
22728: ST_TO_ADDR
// if result [ 1 ] then
22729: LD_VAR 0 1
22733: PUSH
22734: LD_INT 1
22736: ARRAY
22737: IFFALSE 22802
// if result [ 1 ] [ 1 ] = i then
22739: LD_VAR 0 1
22743: PUSH
22744: LD_INT 1
22746: ARRAY
22747: PUSH
22748: LD_INT 1
22750: ARRAY
22751: PUSH
22752: LD_VAR 0 5
22756: EQUAL
22757: IFFALSE 22802
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22759: LD_ADDR_VAR 0 1
22763: PUSH
22764: LD_VAR 0 1
22768: PPUSH
22769: LD_INT 1
22771: PPUSH
22772: LD_VAR 0 1
22776: PUSH
22777: LD_INT 1
22779: ARRAY
22780: PPUSH
22781: LD_INT 1
22783: PPUSH
22784: CALL_OW 3
22788: PPUSH
22789: CALL_OW 1
22793: ST_TO_ADDR
// tmp := 1 ;
22794: LD_ADDR_VAR 0 2
22798: PUSH
22799: LD_STRING 1
22801: ST_TO_ADDR
// end ; normal := normal & tmp ;
22802: LD_ADDR_VAR 0 3
22806: PUSH
22807: LD_VAR 0 3
22811: PUSH
22812: LD_VAR 0 2
22816: STR
22817: ST_TO_ADDR
// end ;
22818: GO 22718
22820: POP
22821: POP
// for i = 1 to hardcoreCounter do
22822: LD_ADDR_VAR 0 5
22826: PUSH
22827: DOUBLE
22828: LD_INT 1
22830: DEC
22831: ST_TO_ADDR
22832: LD_EXP 76
22836: PUSH
22837: FOR_TO
22838: IFFALSE 22943
// begin tmp := 0 ;
22840: LD_ADDR_VAR 0 2
22844: PUSH
22845: LD_STRING 0
22847: ST_TO_ADDR
// if result [ 2 ] then
22848: LD_VAR 0 1
22852: PUSH
22853: LD_INT 2
22855: ARRAY
22856: IFFALSE 22925
// if result [ 2 ] [ 1 ] = 100 + i then
22858: LD_VAR 0 1
22862: PUSH
22863: LD_INT 2
22865: ARRAY
22866: PUSH
22867: LD_INT 1
22869: ARRAY
22870: PUSH
22871: LD_INT 100
22873: PUSH
22874: LD_VAR 0 5
22878: PLUS
22879: EQUAL
22880: IFFALSE 22925
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22882: LD_ADDR_VAR 0 1
22886: PUSH
22887: LD_VAR 0 1
22891: PPUSH
22892: LD_INT 2
22894: PPUSH
22895: LD_VAR 0 1
22899: PUSH
22900: LD_INT 2
22902: ARRAY
22903: PPUSH
22904: LD_INT 1
22906: PPUSH
22907: CALL_OW 3
22911: PPUSH
22912: CALL_OW 1
22916: ST_TO_ADDR
// tmp := 1 ;
22917: LD_ADDR_VAR 0 2
22921: PUSH
22922: LD_STRING 1
22924: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22925: LD_ADDR_VAR 0 4
22929: PUSH
22930: LD_VAR 0 4
22934: PUSH
22935: LD_VAR 0 2
22939: STR
22940: ST_TO_ADDR
// end ;
22941: GO 22837
22943: POP
22944: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22945: LD_STRING getStreamItemsFromMission("
22947: PUSH
22948: LD_VAR 0 3
22952: STR
22953: PUSH
22954: LD_STRING ","
22956: STR
22957: PUSH
22958: LD_VAR 0 4
22962: STR
22963: PUSH
22964: LD_STRING ")
22966: STR
22967: PPUSH
22968: CALL_OW 559
// end else
22972: GO 22981
// ToLua ( getStreamItemsFromMission("","") ) ;
22974: LD_STRING getStreamItemsFromMission("","")
22976: PPUSH
22977: CALL_OW 559
// end ;
22981: LD_VAR 0 1
22985: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22986: LD_EXP 74
22990: PUSH
22991: LD_EXP 79
22995: AND
22996: IFFALSE 23120
22998: GO 23000
23000: DISABLE
23001: LD_INT 0
23003: PPUSH
23004: PPUSH
// begin enable ;
23005: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23006: LD_ADDR_VAR 0 2
23010: PUSH
23011: LD_INT 22
23013: PUSH
23014: LD_OWVAR 2
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: LD_INT 34
23028: PUSH
23029: LD_INT 7
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 34
23038: PUSH
23039: LD_INT 45
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 34
23048: PUSH
23049: LD_INT 28
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 34
23058: PUSH
23059: LD_INT 47
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 69
23081: ST_TO_ADDR
// if not tmp then
23082: LD_VAR 0 2
23086: NOT
23087: IFFALSE 23091
// exit ;
23089: GO 23120
// for i in tmp do
23091: LD_ADDR_VAR 0 1
23095: PUSH
23096: LD_VAR 0 2
23100: PUSH
23101: FOR_IN
23102: IFFALSE 23118
// begin SetLives ( i , 0 ) ;
23104: LD_VAR 0 1
23108: PPUSH
23109: LD_INT 0
23111: PPUSH
23112: CALL_OW 234
// end ;
23116: GO 23101
23118: POP
23119: POP
// end ;
23120: PPOPN 2
23122: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23123: LD_EXP 74
23127: PUSH
23128: LD_EXP 80
23132: AND
23133: IFFALSE 23217
23135: GO 23137
23137: DISABLE
23138: LD_INT 0
23140: PPUSH
23141: PPUSH
// begin enable ;
23142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23143: LD_ADDR_VAR 0 2
23147: PUSH
23148: LD_INT 22
23150: PUSH
23151: LD_OWVAR 2
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 32
23162: PUSH
23163: LD_INT 3
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PPUSH
23174: CALL_OW 69
23178: ST_TO_ADDR
// if not tmp then
23179: LD_VAR 0 2
23183: NOT
23184: IFFALSE 23188
// exit ;
23186: GO 23217
// for i in tmp do
23188: LD_ADDR_VAR 0 1
23192: PUSH
23193: LD_VAR 0 2
23197: PUSH
23198: FOR_IN
23199: IFFALSE 23215
// begin SetLives ( i , 0 ) ;
23201: LD_VAR 0 1
23205: PPUSH
23206: LD_INT 0
23208: PPUSH
23209: CALL_OW 234
// end ;
23213: GO 23198
23215: POP
23216: POP
// end ;
23217: PPOPN 2
23219: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23220: LD_EXP 74
23224: PUSH
23225: LD_EXP 77
23229: AND
23230: IFFALSE 23323
23232: GO 23234
23234: DISABLE
23235: LD_INT 0
23237: PPUSH
// begin enable ;
23238: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23239: LD_ADDR_VAR 0 1
23243: PUSH
23244: LD_INT 22
23246: PUSH
23247: LD_OWVAR 2
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: LD_INT 25
23261: PUSH
23262: LD_INT 5
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 25
23271: PUSH
23272: LD_INT 9
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 25
23281: PUSH
23282: LD_INT 8
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PPUSH
23299: CALL_OW 69
23303: PUSH
23304: FOR_IN
23305: IFFALSE 23321
// begin SetClass ( i , 1 ) ;
23307: LD_VAR 0 1
23311: PPUSH
23312: LD_INT 1
23314: PPUSH
23315: CALL_OW 336
// end ;
23319: GO 23304
23321: POP
23322: POP
// end ;
23323: PPOPN 1
23325: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23326: LD_EXP 74
23330: PUSH
23331: LD_EXP 78
23335: AND
23336: PUSH
23337: LD_OWVAR 65
23341: PUSH
23342: LD_INT 7
23344: LESS
23345: AND
23346: IFFALSE 23360
23348: GO 23350
23350: DISABLE
// begin enable ;
23351: ENABLE
// game_speed := 7 ;
23352: LD_ADDR_OWVAR 65
23356: PUSH
23357: LD_INT 7
23359: ST_TO_ADDR
// end ;
23360: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23361: LD_EXP 74
23365: PUSH
23366: LD_EXP 81
23370: AND
23371: IFFALSE 23573
23373: GO 23375
23375: DISABLE
23376: LD_INT 0
23378: PPUSH
23379: PPUSH
23380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23381: LD_ADDR_VAR 0 3
23385: PUSH
23386: LD_INT 81
23388: PUSH
23389: LD_OWVAR 2
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 21
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PPUSH
23412: CALL_OW 69
23416: ST_TO_ADDR
// if not tmp then
23417: LD_VAR 0 3
23421: NOT
23422: IFFALSE 23426
// exit ;
23424: GO 23573
// if tmp > 5 then
23426: LD_VAR 0 3
23430: PUSH
23431: LD_INT 5
23433: GREATER
23434: IFFALSE 23446
// k := 5 else
23436: LD_ADDR_VAR 0 2
23440: PUSH
23441: LD_INT 5
23443: ST_TO_ADDR
23444: GO 23456
// k := tmp ;
23446: LD_ADDR_VAR 0 2
23450: PUSH
23451: LD_VAR 0 3
23455: ST_TO_ADDR
// for i := 1 to k do
23456: LD_ADDR_VAR 0 1
23460: PUSH
23461: DOUBLE
23462: LD_INT 1
23464: DEC
23465: ST_TO_ADDR
23466: LD_VAR 0 2
23470: PUSH
23471: FOR_TO
23472: IFFALSE 23571
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23474: LD_VAR 0 3
23478: PUSH
23479: LD_VAR 0 1
23483: ARRAY
23484: PPUSH
23485: LD_VAR 0 1
23489: PUSH
23490: LD_INT 4
23492: MOD
23493: PUSH
23494: LD_INT 1
23496: PLUS
23497: PPUSH
23498: CALL_OW 259
23502: PUSH
23503: LD_INT 10
23505: LESS
23506: IFFALSE 23569
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23508: LD_VAR 0 3
23512: PUSH
23513: LD_VAR 0 1
23517: ARRAY
23518: PPUSH
23519: LD_VAR 0 1
23523: PUSH
23524: LD_INT 4
23526: MOD
23527: PUSH
23528: LD_INT 1
23530: PLUS
23531: PPUSH
23532: LD_VAR 0 3
23536: PUSH
23537: LD_VAR 0 1
23541: ARRAY
23542: PPUSH
23543: LD_VAR 0 1
23547: PUSH
23548: LD_INT 4
23550: MOD
23551: PUSH
23552: LD_INT 1
23554: PLUS
23555: PPUSH
23556: CALL_OW 259
23560: PUSH
23561: LD_INT 1
23563: PLUS
23564: PPUSH
23565: CALL_OW 237
23569: GO 23471
23571: POP
23572: POP
// end ;
23573: PPOPN 3
23575: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23576: LD_EXP 74
23580: PUSH
23581: LD_EXP 82
23585: AND
23586: IFFALSE 23606
23588: GO 23590
23590: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23591: LD_INT 4
23593: PPUSH
23594: LD_OWVAR 2
23598: PPUSH
23599: LD_INT 0
23601: PPUSH
23602: CALL_OW 324
23606: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23607: LD_EXP 74
23611: PUSH
23612: LD_EXP 111
23616: AND
23617: IFFALSE 23637
23619: GO 23621
23621: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23622: LD_INT 19
23624: PPUSH
23625: LD_OWVAR 2
23629: PPUSH
23630: LD_INT 0
23632: PPUSH
23633: CALL_OW 324
23637: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23638: LD_EXP 74
23642: PUSH
23643: LD_EXP 83
23647: AND
23648: IFFALSE 23750
23650: GO 23652
23652: DISABLE
23653: LD_INT 0
23655: PPUSH
23656: PPUSH
// begin enable ;
23657: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23658: LD_ADDR_VAR 0 2
23662: PUSH
23663: LD_INT 22
23665: PUSH
23666: LD_OWVAR 2
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: LD_INT 34
23680: PUSH
23681: LD_INT 11
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 34
23690: PUSH
23691: LD_INT 30
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: LIST
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PPUSH
23707: CALL_OW 69
23711: ST_TO_ADDR
// if not tmp then
23712: LD_VAR 0 2
23716: NOT
23717: IFFALSE 23721
// exit ;
23719: GO 23750
// for i in tmp do
23721: LD_ADDR_VAR 0 1
23725: PUSH
23726: LD_VAR 0 2
23730: PUSH
23731: FOR_IN
23732: IFFALSE 23748
// begin SetLives ( i , 0 ) ;
23734: LD_VAR 0 1
23738: PPUSH
23739: LD_INT 0
23741: PPUSH
23742: CALL_OW 234
// end ;
23746: GO 23731
23748: POP
23749: POP
// end ;
23750: PPOPN 2
23752: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23753: LD_EXP 74
23757: PUSH
23758: LD_EXP 84
23762: AND
23763: IFFALSE 23783
23765: GO 23767
23767: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23768: LD_INT 32
23770: PPUSH
23771: LD_OWVAR 2
23775: PPUSH
23776: LD_INT 0
23778: PPUSH
23779: CALL_OW 324
23783: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23784: LD_EXP 74
23788: PUSH
23789: LD_EXP 85
23793: AND
23794: IFFALSE 23975
23796: GO 23798
23798: DISABLE
23799: LD_INT 0
23801: PPUSH
23802: PPUSH
23803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23804: LD_ADDR_VAR 0 2
23808: PUSH
23809: LD_INT 22
23811: PUSH
23812: LD_OWVAR 2
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 33
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PPUSH
23835: CALL_OW 69
23839: ST_TO_ADDR
// if not tmp then
23840: LD_VAR 0 2
23844: NOT
23845: IFFALSE 23849
// exit ;
23847: GO 23975
// side := 0 ;
23849: LD_ADDR_VAR 0 3
23853: PUSH
23854: LD_INT 0
23856: ST_TO_ADDR
// for i := 1 to 8 do
23857: LD_ADDR_VAR 0 1
23861: PUSH
23862: DOUBLE
23863: LD_INT 1
23865: DEC
23866: ST_TO_ADDR
23867: LD_INT 8
23869: PUSH
23870: FOR_TO
23871: IFFALSE 23919
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23873: LD_OWVAR 2
23877: PUSH
23878: LD_VAR 0 1
23882: NONEQUAL
23883: PUSH
23884: LD_OWVAR 2
23888: PPUSH
23889: LD_VAR 0 1
23893: PPUSH
23894: CALL_OW 81
23898: PUSH
23899: LD_INT 2
23901: EQUAL
23902: AND
23903: IFFALSE 23917
// begin side := i ;
23905: LD_ADDR_VAR 0 3
23909: PUSH
23910: LD_VAR 0 1
23914: ST_TO_ADDR
// break ;
23915: GO 23919
// end ;
23917: GO 23870
23919: POP
23920: POP
// if not side then
23921: LD_VAR 0 3
23925: NOT
23926: IFFALSE 23930
// exit ;
23928: GO 23975
// for i := 1 to tmp do
23930: LD_ADDR_VAR 0 1
23934: PUSH
23935: DOUBLE
23936: LD_INT 1
23938: DEC
23939: ST_TO_ADDR
23940: LD_VAR 0 2
23944: PUSH
23945: FOR_TO
23946: IFFALSE 23973
// if Prob ( 60 ) then
23948: LD_INT 60
23950: PPUSH
23951: CALL_OW 13
23955: IFFALSE 23971
// SetSide ( i , side ) ;
23957: LD_VAR 0 1
23961: PPUSH
23962: LD_VAR 0 3
23966: PPUSH
23967: CALL_OW 235
23971: GO 23945
23973: POP
23974: POP
// end ;
23975: PPOPN 3
23977: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23978: LD_EXP 74
23982: PUSH
23983: LD_EXP 87
23987: AND
23988: IFFALSE 24107
23990: GO 23992
23992: DISABLE
23993: LD_INT 0
23995: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23996: LD_ADDR_VAR 0 1
24000: PUSH
24001: LD_INT 22
24003: PUSH
24004: LD_OWVAR 2
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 21
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 3
24025: PUSH
24026: LD_INT 23
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: LIST
24044: PPUSH
24045: CALL_OW 69
24049: PUSH
24050: FOR_IN
24051: IFFALSE 24105
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24053: LD_VAR 0 1
24057: PPUSH
24058: CALL_OW 257
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 3
24071: PUSH
24072: LD_INT 4
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: IN
24081: IFFALSE 24103
// SetClass ( un , rand ( 1 , 4 ) ) ;
24083: LD_VAR 0 1
24087: PPUSH
24088: LD_INT 1
24090: PPUSH
24091: LD_INT 4
24093: PPUSH
24094: CALL_OW 12
24098: PPUSH
24099: CALL_OW 336
24103: GO 24050
24105: POP
24106: POP
// end ;
24107: PPOPN 1
24109: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24110: LD_EXP 74
24114: PUSH
24115: LD_EXP 86
24119: AND
24120: IFFALSE 24199
24122: GO 24124
24124: DISABLE
24125: LD_INT 0
24127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24128: LD_ADDR_VAR 0 1
24132: PUSH
24133: LD_INT 22
24135: PUSH
24136: LD_OWVAR 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 21
24147: PUSH
24148: LD_INT 3
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PPUSH
24159: CALL_OW 69
24163: ST_TO_ADDR
// if not tmp then
24164: LD_VAR 0 1
24168: NOT
24169: IFFALSE 24173
// exit ;
24171: GO 24199
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24173: LD_VAR 0 1
24177: PUSH
24178: LD_INT 1
24180: PPUSH
24181: LD_VAR 0 1
24185: PPUSH
24186: CALL_OW 12
24190: ARRAY
24191: PPUSH
24192: LD_INT 100
24194: PPUSH
24195: CALL_OW 234
// end ;
24199: PPOPN 1
24201: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24202: LD_EXP 74
24206: PUSH
24207: LD_EXP 88
24211: AND
24212: IFFALSE 24310
24214: GO 24216
24216: DISABLE
24217: LD_INT 0
24219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24220: LD_ADDR_VAR 0 1
24224: PUSH
24225: LD_INT 22
24227: PUSH
24228: LD_OWVAR 2
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 21
24239: PUSH
24240: LD_INT 1
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PPUSH
24251: CALL_OW 69
24255: ST_TO_ADDR
// if not tmp then
24256: LD_VAR 0 1
24260: NOT
24261: IFFALSE 24265
// exit ;
24263: GO 24310
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24265: LD_VAR 0 1
24269: PUSH
24270: LD_INT 1
24272: PPUSH
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL_OW 12
24282: ARRAY
24283: PPUSH
24284: LD_INT 1
24286: PPUSH
24287: LD_INT 4
24289: PPUSH
24290: CALL_OW 12
24294: PPUSH
24295: LD_INT 3000
24297: PPUSH
24298: LD_INT 9000
24300: PPUSH
24301: CALL_OW 12
24305: PPUSH
24306: CALL_OW 492
// end ;
24310: PPOPN 1
24312: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24313: LD_EXP 74
24317: PUSH
24318: LD_EXP 89
24322: AND
24323: IFFALSE 24343
24325: GO 24327
24327: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24328: LD_INT 1
24330: PPUSH
24331: LD_OWVAR 2
24335: PPUSH
24336: LD_INT 0
24338: PPUSH
24339: CALL_OW 324
24343: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24344: LD_EXP 74
24348: PUSH
24349: LD_EXP 90
24353: AND
24354: IFFALSE 24437
24356: GO 24358
24358: DISABLE
24359: LD_INT 0
24361: PPUSH
24362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24363: LD_ADDR_VAR 0 2
24367: PUSH
24368: LD_INT 22
24370: PUSH
24371: LD_OWVAR 2
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 21
24382: PUSH
24383: LD_INT 3
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PPUSH
24394: CALL_OW 69
24398: ST_TO_ADDR
// if not tmp then
24399: LD_VAR 0 2
24403: NOT
24404: IFFALSE 24408
// exit ;
24406: GO 24437
// for i in tmp do
24408: LD_ADDR_VAR 0 1
24412: PUSH
24413: LD_VAR 0 2
24417: PUSH
24418: FOR_IN
24419: IFFALSE 24435
// SetBLevel ( i , 10 ) ;
24421: LD_VAR 0 1
24425: PPUSH
24426: LD_INT 10
24428: PPUSH
24429: CALL_OW 241
24433: GO 24418
24435: POP
24436: POP
// end ;
24437: PPOPN 2
24439: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24440: LD_EXP 74
24444: PUSH
24445: LD_EXP 91
24449: AND
24450: IFFALSE 24561
24452: GO 24454
24454: DISABLE
24455: LD_INT 0
24457: PPUSH
24458: PPUSH
24459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24460: LD_ADDR_VAR 0 3
24464: PUSH
24465: LD_INT 22
24467: PUSH
24468: LD_OWVAR 2
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 25
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PPUSH
24491: CALL_OW 69
24495: ST_TO_ADDR
// if not tmp then
24496: LD_VAR 0 3
24500: NOT
24501: IFFALSE 24505
// exit ;
24503: GO 24561
// un := tmp [ rand ( 1 , tmp ) ] ;
24505: LD_ADDR_VAR 0 2
24509: PUSH
24510: LD_VAR 0 3
24514: PUSH
24515: LD_INT 1
24517: PPUSH
24518: LD_VAR 0 3
24522: PPUSH
24523: CALL_OW 12
24527: ARRAY
24528: ST_TO_ADDR
// if Crawls ( un ) then
24529: LD_VAR 0 2
24533: PPUSH
24534: CALL_OW 318
24538: IFFALSE 24549
// ComWalk ( un ) ;
24540: LD_VAR 0 2
24544: PPUSH
24545: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24549: LD_VAR 0 2
24553: PPUSH
24554: LD_INT 5
24556: PPUSH
24557: CALL_OW 336
// end ;
24561: PPOPN 3
24563: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24564: LD_EXP 74
24568: PUSH
24569: LD_EXP 92
24573: AND
24574: PUSH
24575: LD_OWVAR 67
24579: PUSH
24580: LD_INT 3
24582: LESS
24583: AND
24584: IFFALSE 24603
24586: GO 24588
24588: DISABLE
// Difficulty := Difficulty + 1 ;
24589: LD_ADDR_OWVAR 67
24593: PUSH
24594: LD_OWVAR 67
24598: PUSH
24599: LD_INT 1
24601: PLUS
24602: ST_TO_ADDR
24603: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24604: LD_EXP 74
24608: PUSH
24609: LD_EXP 93
24613: AND
24614: IFFALSE 24717
24616: GO 24618
24618: DISABLE
24619: LD_INT 0
24621: PPUSH
// begin for i := 1 to 5 do
24622: LD_ADDR_VAR 0 1
24626: PUSH
24627: DOUBLE
24628: LD_INT 1
24630: DEC
24631: ST_TO_ADDR
24632: LD_INT 5
24634: PUSH
24635: FOR_TO
24636: IFFALSE 24715
// begin uc_nation := nation_nature ;
24638: LD_ADDR_OWVAR 21
24642: PUSH
24643: LD_INT 0
24645: ST_TO_ADDR
// uc_side := 0 ;
24646: LD_ADDR_OWVAR 20
24650: PUSH
24651: LD_INT 0
24653: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24654: LD_ADDR_OWVAR 29
24658: PUSH
24659: LD_INT 12
24661: PUSH
24662: LD_INT 12
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: ST_TO_ADDR
// hc_agressivity := 20 ;
24669: LD_ADDR_OWVAR 35
24673: PUSH
24674: LD_INT 20
24676: ST_TO_ADDR
// hc_class := class_tiger ;
24677: LD_ADDR_OWVAR 28
24681: PUSH
24682: LD_INT 14
24684: ST_TO_ADDR
// hc_gallery :=  ;
24685: LD_ADDR_OWVAR 33
24689: PUSH
24690: LD_STRING 
24692: ST_TO_ADDR
// hc_name :=  ;
24693: LD_ADDR_OWVAR 26
24697: PUSH
24698: LD_STRING 
24700: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24701: CALL_OW 44
24705: PPUSH
24706: LD_INT 0
24708: PPUSH
24709: CALL_OW 51
// end ;
24713: GO 24635
24715: POP
24716: POP
// end ;
24717: PPOPN 1
24719: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24720: LD_EXP 74
24724: PUSH
24725: LD_EXP 94
24729: AND
24730: IFFALSE 24739
24732: GO 24734
24734: DISABLE
// StreamSibBomb ;
24735: CALL 24740 0 0
24739: END
// export function StreamSibBomb ; var i , x , y ; begin
24740: LD_INT 0
24742: PPUSH
24743: PPUSH
24744: PPUSH
24745: PPUSH
// result := false ;
24746: LD_ADDR_VAR 0 1
24750: PUSH
24751: LD_INT 0
24753: ST_TO_ADDR
// for i := 1 to 16 do
24754: LD_ADDR_VAR 0 2
24758: PUSH
24759: DOUBLE
24760: LD_INT 1
24762: DEC
24763: ST_TO_ADDR
24764: LD_INT 16
24766: PUSH
24767: FOR_TO
24768: IFFALSE 24967
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24770: LD_ADDR_VAR 0 3
24774: PUSH
24775: LD_INT 10
24777: PUSH
24778: LD_INT 20
24780: PUSH
24781: LD_INT 30
24783: PUSH
24784: LD_INT 40
24786: PUSH
24787: LD_INT 50
24789: PUSH
24790: LD_INT 60
24792: PUSH
24793: LD_INT 70
24795: PUSH
24796: LD_INT 80
24798: PUSH
24799: LD_INT 90
24801: PUSH
24802: LD_INT 100
24804: PUSH
24805: LD_INT 110
24807: PUSH
24808: LD_INT 120
24810: PUSH
24811: LD_INT 130
24813: PUSH
24814: LD_INT 140
24816: PUSH
24817: LD_INT 150
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PPUSH
24840: LD_INT 15
24842: PPUSH
24843: CALL_OW 12
24847: ARRAY
24848: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24849: LD_ADDR_VAR 0 4
24853: PUSH
24854: LD_INT 10
24856: PUSH
24857: LD_INT 20
24859: PUSH
24860: LD_INT 30
24862: PUSH
24863: LD_INT 40
24865: PUSH
24866: LD_INT 50
24868: PUSH
24869: LD_INT 60
24871: PUSH
24872: LD_INT 70
24874: PUSH
24875: LD_INT 80
24877: PUSH
24878: LD_INT 90
24880: PUSH
24881: LD_INT 100
24883: PUSH
24884: LD_INT 110
24886: PUSH
24887: LD_INT 120
24889: PUSH
24890: LD_INT 130
24892: PUSH
24893: LD_INT 140
24895: PUSH
24896: LD_INT 150
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: PPUSH
24919: LD_INT 15
24921: PPUSH
24922: CALL_OW 12
24926: ARRAY
24927: ST_TO_ADDR
// if ValidHex ( x , y ) then
24928: LD_VAR 0 3
24932: PPUSH
24933: LD_VAR 0 4
24937: PPUSH
24938: CALL_OW 488
24942: IFFALSE 24965
// begin result := [ x , y ] ;
24944: LD_ADDR_VAR 0 1
24948: PUSH
24949: LD_VAR 0 3
24953: PUSH
24954: LD_VAR 0 4
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: ST_TO_ADDR
// break ;
24963: GO 24967
// end ; end ;
24965: GO 24767
24967: POP
24968: POP
// if result then
24969: LD_VAR 0 1
24973: IFFALSE 25033
// begin ToLua ( playSibBomb() ) ;
24975: LD_STRING playSibBomb()
24977: PPUSH
24978: CALL_OW 559
// wait ( 0 0$14 ) ;
24982: LD_INT 490
24984: PPUSH
24985: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24989: LD_VAR 0 1
24993: PUSH
24994: LD_INT 1
24996: ARRAY
24997: PPUSH
24998: LD_VAR 0 1
25002: PUSH
25003: LD_INT 2
25005: ARRAY
25006: PPUSH
25007: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25011: LD_VAR 0 1
25015: PUSH
25016: LD_INT 1
25018: ARRAY
25019: PPUSH
25020: LD_VAR 0 1
25024: PUSH
25025: LD_INT 2
25027: ARRAY
25028: PPUSH
25029: CALL_OW 429
// end ; end ;
25033: LD_VAR 0 1
25037: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25038: LD_EXP 74
25042: PUSH
25043: LD_EXP 96
25047: AND
25048: IFFALSE 25060
25050: GO 25052
25052: DISABLE
// YouLost (  ) ;
25053: LD_STRING 
25055: PPUSH
25056: CALL_OW 104
25060: END
// every 0 0$1 trigger StreamModeActive and sFog do
25061: LD_EXP 74
25065: PUSH
25066: LD_EXP 95
25070: AND
25071: IFFALSE 25085
25073: GO 25075
25075: DISABLE
// FogOff ( your_side ) ;
25076: LD_OWVAR 2
25080: PPUSH
25081: CALL_OW 344
25085: END
// every 0 0$1 trigger StreamModeActive and sSun do
25086: LD_EXP 74
25090: PUSH
25091: LD_EXP 97
25095: AND
25096: IFFALSE 25124
25098: GO 25100
25100: DISABLE
// begin solar_recharge_percent := 0 ;
25101: LD_ADDR_OWVAR 79
25105: PUSH
25106: LD_INT 0
25108: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25109: LD_INT 10500
25111: PPUSH
25112: CALL_OW 67
// solar_recharge_percent := 100 ;
25116: LD_ADDR_OWVAR 79
25120: PUSH
25121: LD_INT 100
25123: ST_TO_ADDR
// end ;
25124: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25125: LD_EXP 74
25129: PUSH
25130: LD_EXP 98
25134: AND
25135: IFFALSE 25374
25137: GO 25139
25139: DISABLE
25140: LD_INT 0
25142: PPUSH
25143: PPUSH
25144: PPUSH
// begin tmp := [ ] ;
25145: LD_ADDR_VAR 0 3
25149: PUSH
25150: EMPTY
25151: ST_TO_ADDR
// for i := 1 to 6 do
25152: LD_ADDR_VAR 0 1
25156: PUSH
25157: DOUBLE
25158: LD_INT 1
25160: DEC
25161: ST_TO_ADDR
25162: LD_INT 6
25164: PUSH
25165: FOR_TO
25166: IFFALSE 25271
// begin uc_nation := nation_nature ;
25168: LD_ADDR_OWVAR 21
25172: PUSH
25173: LD_INT 0
25175: ST_TO_ADDR
// uc_side := 0 ;
25176: LD_ADDR_OWVAR 20
25180: PUSH
25181: LD_INT 0
25183: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25184: LD_ADDR_OWVAR 29
25188: PUSH
25189: LD_INT 12
25191: PUSH
25192: LD_INT 12
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: ST_TO_ADDR
// hc_agressivity := 20 ;
25199: LD_ADDR_OWVAR 35
25203: PUSH
25204: LD_INT 20
25206: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25207: LD_ADDR_OWVAR 28
25211: PUSH
25212: LD_INT 17
25214: ST_TO_ADDR
// hc_gallery :=  ;
25215: LD_ADDR_OWVAR 33
25219: PUSH
25220: LD_STRING 
25222: ST_TO_ADDR
// hc_name :=  ;
25223: LD_ADDR_OWVAR 26
25227: PUSH
25228: LD_STRING 
25230: ST_TO_ADDR
// un := CreateHuman ;
25231: LD_ADDR_VAR 0 2
25235: PUSH
25236: CALL_OW 44
25240: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25241: LD_VAR 0 2
25245: PPUSH
25246: LD_INT 1
25248: PPUSH
25249: CALL_OW 51
// tmp := tmp ^ un ;
25253: LD_ADDR_VAR 0 3
25257: PUSH
25258: LD_VAR 0 3
25262: PUSH
25263: LD_VAR 0 2
25267: ADD
25268: ST_TO_ADDR
// end ;
25269: GO 25165
25271: POP
25272: POP
// repeat wait ( 0 0$1 ) ;
25273: LD_INT 35
25275: PPUSH
25276: CALL_OW 67
// for un in tmp do
25280: LD_ADDR_VAR 0 2
25284: PUSH
25285: LD_VAR 0 3
25289: PUSH
25290: FOR_IN
25291: IFFALSE 25365
// begin if IsDead ( un ) then
25293: LD_VAR 0 2
25297: PPUSH
25298: CALL_OW 301
25302: IFFALSE 25322
// begin tmp := tmp diff un ;
25304: LD_ADDR_VAR 0 3
25308: PUSH
25309: LD_VAR 0 3
25313: PUSH
25314: LD_VAR 0 2
25318: DIFF
25319: ST_TO_ADDR
// continue ;
25320: GO 25290
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25322: LD_VAR 0 2
25326: PPUSH
25327: LD_INT 3
25329: PUSH
25330: LD_INT 22
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PPUSH
25344: CALL_OW 69
25348: PPUSH
25349: LD_VAR 0 2
25353: PPUSH
25354: CALL_OW 74
25358: PPUSH
25359: CALL_OW 115
// end ;
25363: GO 25290
25365: POP
25366: POP
// until not tmp ;
25367: LD_VAR 0 3
25371: NOT
25372: IFFALSE 25273
// end ;
25374: PPOPN 3
25376: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25377: LD_EXP 74
25381: PUSH
25382: LD_EXP 99
25386: AND
25387: IFFALSE 25441
25389: GO 25391
25391: DISABLE
// begin ToLua ( displayTroll(); ) ;
25392: LD_STRING displayTroll();
25394: PPUSH
25395: CALL_OW 559
// wait ( 3 3$00 ) ;
25399: LD_INT 6300
25401: PPUSH
25402: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25406: LD_STRING hideTroll();
25408: PPUSH
25409: CALL_OW 559
// wait ( 1 1$00 ) ;
25413: LD_INT 2100
25415: PPUSH
25416: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25420: LD_STRING displayTroll();
25422: PPUSH
25423: CALL_OW 559
// wait ( 1 1$00 ) ;
25427: LD_INT 2100
25429: PPUSH
25430: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25434: LD_STRING hideTroll();
25436: PPUSH
25437: CALL_OW 559
// end ;
25441: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25442: LD_EXP 74
25446: PUSH
25447: LD_EXP 100
25451: AND
25452: IFFALSE 25515
25454: GO 25456
25456: DISABLE
25457: LD_INT 0
25459: PPUSH
// begin p := 0 ;
25460: LD_ADDR_VAR 0 1
25464: PUSH
25465: LD_INT 0
25467: ST_TO_ADDR
// repeat game_speed := 1 ;
25468: LD_ADDR_OWVAR 65
25472: PUSH
25473: LD_INT 1
25475: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25476: LD_INT 35
25478: PPUSH
25479: CALL_OW 67
// p := p + 1 ;
25483: LD_ADDR_VAR 0 1
25487: PUSH
25488: LD_VAR 0 1
25492: PUSH
25493: LD_INT 1
25495: PLUS
25496: ST_TO_ADDR
// until p >= 60 ;
25497: LD_VAR 0 1
25501: PUSH
25502: LD_INT 60
25504: GREATEREQUAL
25505: IFFALSE 25468
// game_speed := 4 ;
25507: LD_ADDR_OWVAR 65
25511: PUSH
25512: LD_INT 4
25514: ST_TO_ADDR
// end ;
25515: PPOPN 1
25517: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25518: LD_EXP 74
25522: PUSH
25523: LD_EXP 101
25527: AND
25528: IFFALSE 25674
25530: GO 25532
25532: DISABLE
25533: LD_INT 0
25535: PPUSH
25536: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25537: LD_ADDR_VAR 0 1
25541: PUSH
25542: LD_INT 22
25544: PUSH
25545: LD_OWVAR 2
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: LD_INT 30
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 30
25569: PUSH
25570: LD_INT 1
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PPUSH
25586: CALL_OW 69
25590: ST_TO_ADDR
// if not depot then
25591: LD_VAR 0 1
25595: NOT
25596: IFFALSE 25600
// exit ;
25598: GO 25674
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25600: LD_ADDR_VAR 0 2
25604: PUSH
25605: LD_VAR 0 1
25609: PUSH
25610: LD_INT 1
25612: PPUSH
25613: LD_VAR 0 1
25617: PPUSH
25618: CALL_OW 12
25622: ARRAY
25623: PPUSH
25624: CALL_OW 274
25628: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25629: LD_VAR 0 2
25633: PPUSH
25634: LD_INT 1
25636: PPUSH
25637: LD_INT 0
25639: PPUSH
25640: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25644: LD_VAR 0 2
25648: PPUSH
25649: LD_INT 2
25651: PPUSH
25652: LD_INT 0
25654: PPUSH
25655: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25659: LD_VAR 0 2
25663: PPUSH
25664: LD_INT 3
25666: PPUSH
25667: LD_INT 0
25669: PPUSH
25670: CALL_OW 277
// end ;
25674: PPOPN 2
25676: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25677: LD_EXP 74
25681: PUSH
25682: LD_EXP 102
25686: AND
25687: IFFALSE 25784
25689: GO 25691
25691: DISABLE
25692: LD_INT 0
25694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25695: LD_ADDR_VAR 0 1
25699: PUSH
25700: LD_INT 22
25702: PUSH
25703: LD_OWVAR 2
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 21
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: LD_INT 23
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 69
25748: ST_TO_ADDR
// if not tmp then
25749: LD_VAR 0 1
25753: NOT
25754: IFFALSE 25758
// exit ;
25756: GO 25784
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25758: LD_VAR 0 1
25762: PUSH
25763: LD_INT 1
25765: PPUSH
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL_OW 12
25775: ARRAY
25776: PPUSH
25777: LD_INT 200
25779: PPUSH
25780: CALL_OW 234
// end ;
25784: PPOPN 1
25786: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25787: LD_EXP 74
25791: PUSH
25792: LD_EXP 103
25796: AND
25797: IFFALSE 25876
25799: GO 25801
25801: DISABLE
25802: LD_INT 0
25804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25805: LD_ADDR_VAR 0 1
25809: PUSH
25810: LD_INT 22
25812: PUSH
25813: LD_OWVAR 2
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 21
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PPUSH
25836: CALL_OW 69
25840: ST_TO_ADDR
// if not tmp then
25841: LD_VAR 0 1
25845: NOT
25846: IFFALSE 25850
// exit ;
25848: GO 25876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25850: LD_VAR 0 1
25854: PUSH
25855: LD_INT 1
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: CALL_OW 12
25867: ARRAY
25868: PPUSH
25869: LD_INT 60
25871: PPUSH
25872: CALL_OW 234
// end ;
25876: PPOPN 1
25878: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25879: LD_EXP 74
25883: PUSH
25884: LD_EXP 104
25888: AND
25889: IFFALSE 25988
25891: GO 25893
25893: DISABLE
25894: LD_INT 0
25896: PPUSH
25897: PPUSH
// begin enable ;
25898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25899: LD_ADDR_VAR 0 1
25903: PUSH
25904: LD_INT 22
25906: PUSH
25907: LD_OWVAR 2
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 61
25918: PUSH
25919: EMPTY
25920: LIST
25921: PUSH
25922: LD_INT 33
25924: PUSH
25925: LD_INT 2
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: PPUSH
25937: CALL_OW 69
25941: ST_TO_ADDR
// if not tmp then
25942: LD_VAR 0 1
25946: NOT
25947: IFFALSE 25951
// exit ;
25949: GO 25988
// for i in tmp do
25951: LD_ADDR_VAR 0 2
25955: PUSH
25956: LD_VAR 0 1
25960: PUSH
25961: FOR_IN
25962: IFFALSE 25986
// if IsControledBy ( i ) then
25964: LD_VAR 0 2
25968: PPUSH
25969: CALL_OW 312
25973: IFFALSE 25984
// ComUnlink ( i ) ;
25975: LD_VAR 0 2
25979: PPUSH
25980: CALL_OW 136
25984: GO 25961
25986: POP
25987: POP
// end ;
25988: PPOPN 2
25990: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25991: LD_EXP 74
25995: PUSH
25996: LD_EXP 105
26000: AND
26001: IFFALSE 26141
26003: GO 26005
26005: DISABLE
26006: LD_INT 0
26008: PPUSH
26009: PPUSH
// begin ToLua ( displayPowell(); ) ;
26010: LD_STRING displayPowell();
26012: PPUSH
26013: CALL_OW 559
// uc_side := 0 ;
26017: LD_ADDR_OWVAR 20
26021: PUSH
26022: LD_INT 0
26024: ST_TO_ADDR
// uc_nation := 2 ;
26025: LD_ADDR_OWVAR 21
26029: PUSH
26030: LD_INT 2
26032: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26033: LD_ADDR_OWVAR 37
26037: PUSH
26038: LD_INT 14
26040: ST_TO_ADDR
// vc_engine := engine_siberite ;
26041: LD_ADDR_OWVAR 39
26045: PUSH
26046: LD_INT 3
26048: ST_TO_ADDR
// vc_control := control_apeman ;
26049: LD_ADDR_OWVAR 38
26053: PUSH
26054: LD_INT 5
26056: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26057: LD_ADDR_OWVAR 40
26061: PUSH
26062: LD_INT 29
26064: ST_TO_ADDR
// un := CreateVehicle ;
26065: LD_ADDR_VAR 0 2
26069: PUSH
26070: CALL_OW 45
26074: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26075: LD_VAR 0 2
26079: PPUSH
26080: LD_INT 1
26082: PPUSH
26083: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26087: LD_INT 35
26089: PPUSH
26090: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26094: LD_VAR 0 2
26098: PPUSH
26099: LD_INT 22
26101: PUSH
26102: LD_OWVAR 2
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PPUSH
26111: CALL_OW 69
26115: PPUSH
26116: LD_VAR 0 2
26120: PPUSH
26121: CALL_OW 74
26125: PPUSH
26126: CALL_OW 115
// until IsDead ( un ) ;
26130: LD_VAR 0 2
26134: PPUSH
26135: CALL_OW 301
26139: IFFALSE 26087
// end ;
26141: PPOPN 2
26143: END
// every 0 0$1 trigger StreamModeActive and sStu do
26144: LD_EXP 74
26148: PUSH
26149: LD_EXP 113
26153: AND
26154: IFFALSE 26170
26156: GO 26158
26158: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26159: LD_STRING displayStucuk();
26161: PPUSH
26162: CALL_OW 559
// ResetFog ;
26166: CALL_OW 335
// end ;
26170: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26171: LD_EXP 74
26175: PUSH
26176: LD_EXP 106
26180: AND
26181: IFFALSE 26322
26183: GO 26185
26185: DISABLE
26186: LD_INT 0
26188: PPUSH
26189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26190: LD_ADDR_VAR 0 2
26194: PUSH
26195: LD_INT 22
26197: PUSH
26198: LD_OWVAR 2
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 21
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PPUSH
26221: CALL_OW 69
26225: ST_TO_ADDR
// if not tmp then
26226: LD_VAR 0 2
26230: NOT
26231: IFFALSE 26235
// exit ;
26233: GO 26322
// un := tmp [ rand ( 1 , tmp ) ] ;
26235: LD_ADDR_VAR 0 1
26239: PUSH
26240: LD_VAR 0 2
26244: PUSH
26245: LD_INT 1
26247: PPUSH
26248: LD_VAR 0 2
26252: PPUSH
26253: CALL_OW 12
26257: ARRAY
26258: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26259: LD_VAR 0 1
26263: PPUSH
26264: LD_INT 0
26266: PPUSH
26267: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26271: LD_VAR 0 1
26275: PPUSH
26276: LD_OWVAR 3
26280: PUSH
26281: LD_VAR 0 1
26285: DIFF
26286: PPUSH
26287: LD_VAR 0 1
26291: PPUSH
26292: CALL_OW 74
26296: PPUSH
26297: CALL_OW 115
// wait ( 0 0$20 ) ;
26301: LD_INT 700
26303: PPUSH
26304: CALL_OW 67
// SetSide ( un , your_side ) ;
26308: LD_VAR 0 1
26312: PPUSH
26313: LD_OWVAR 2
26317: PPUSH
26318: CALL_OW 235
// end ;
26322: PPOPN 2
26324: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26325: LD_EXP 74
26329: PUSH
26330: LD_EXP 107
26334: AND
26335: IFFALSE 26441
26337: GO 26339
26339: DISABLE
26340: LD_INT 0
26342: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26343: LD_ADDR_VAR 0 1
26347: PUSH
26348: LD_INT 22
26350: PUSH
26351: LD_OWVAR 2
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 2
26362: PUSH
26363: LD_INT 30
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 30
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PPUSH
26392: CALL_OW 69
26396: ST_TO_ADDR
// if not depot then
26397: LD_VAR 0 1
26401: NOT
26402: IFFALSE 26406
// exit ;
26404: GO 26441
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26406: LD_VAR 0 1
26410: PUSH
26411: LD_INT 1
26413: ARRAY
26414: PPUSH
26415: CALL_OW 250
26419: PPUSH
26420: LD_VAR 0 1
26424: PUSH
26425: LD_INT 1
26427: ARRAY
26428: PPUSH
26429: CALL_OW 251
26433: PPUSH
26434: LD_INT 70
26436: PPUSH
26437: CALL_OW 495
// end ;
26441: PPOPN 1
26443: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26444: LD_EXP 74
26448: PUSH
26449: LD_EXP 108
26453: AND
26454: IFFALSE 26665
26456: GO 26458
26458: DISABLE
26459: LD_INT 0
26461: PPUSH
26462: PPUSH
26463: PPUSH
26464: PPUSH
26465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26466: LD_ADDR_VAR 0 5
26470: PUSH
26471: LD_INT 22
26473: PUSH
26474: LD_OWVAR 2
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 21
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PPUSH
26497: CALL_OW 69
26501: ST_TO_ADDR
// if not tmp then
26502: LD_VAR 0 5
26506: NOT
26507: IFFALSE 26511
// exit ;
26509: GO 26665
// for i in tmp do
26511: LD_ADDR_VAR 0 1
26515: PUSH
26516: LD_VAR 0 5
26520: PUSH
26521: FOR_IN
26522: IFFALSE 26663
// begin d := rand ( 0 , 5 ) ;
26524: LD_ADDR_VAR 0 4
26528: PUSH
26529: LD_INT 0
26531: PPUSH
26532: LD_INT 5
26534: PPUSH
26535: CALL_OW 12
26539: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26540: LD_ADDR_VAR 0 2
26544: PUSH
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL_OW 250
26554: PPUSH
26555: LD_VAR 0 4
26559: PPUSH
26560: LD_INT 3
26562: PPUSH
26563: LD_INT 12
26565: PPUSH
26566: CALL_OW 12
26570: PPUSH
26571: CALL_OW 272
26575: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26576: LD_ADDR_VAR 0 3
26580: PUSH
26581: LD_VAR 0 1
26585: PPUSH
26586: CALL_OW 251
26590: PPUSH
26591: LD_VAR 0 4
26595: PPUSH
26596: LD_INT 3
26598: PPUSH
26599: LD_INT 12
26601: PPUSH
26602: CALL_OW 12
26606: PPUSH
26607: CALL_OW 273
26611: ST_TO_ADDR
// if ValidHex ( x , y ) then
26612: LD_VAR 0 2
26616: PPUSH
26617: LD_VAR 0 3
26621: PPUSH
26622: CALL_OW 488
26626: IFFALSE 26661
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26628: LD_VAR 0 1
26632: PPUSH
26633: LD_VAR 0 2
26637: PPUSH
26638: LD_VAR 0 3
26642: PPUSH
26643: LD_INT 3
26645: PPUSH
26646: LD_INT 6
26648: PPUSH
26649: CALL_OW 12
26653: PPUSH
26654: LD_INT 1
26656: PPUSH
26657: CALL_OW 483
// end ;
26661: GO 26521
26663: POP
26664: POP
// end ;
26665: PPOPN 5
26667: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26668: LD_EXP 74
26672: PUSH
26673: LD_EXP 109
26677: AND
26678: IFFALSE 26772
26680: GO 26682
26682: DISABLE
26683: LD_INT 0
26685: PPUSH
26686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26687: LD_ADDR_VAR 0 2
26691: PUSH
26692: LD_INT 22
26694: PUSH
26695: LD_OWVAR 2
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 32
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 21
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: LIST
26728: PPUSH
26729: CALL_OW 69
26733: ST_TO_ADDR
// if not tmp then
26734: LD_VAR 0 2
26738: NOT
26739: IFFALSE 26743
// exit ;
26741: GO 26772
// for i in tmp do
26743: LD_ADDR_VAR 0 1
26747: PUSH
26748: LD_VAR 0 2
26752: PUSH
26753: FOR_IN
26754: IFFALSE 26770
// SetFuel ( i , 0 ) ;
26756: LD_VAR 0 1
26760: PPUSH
26761: LD_INT 0
26763: PPUSH
26764: CALL_OW 240
26768: GO 26753
26770: POP
26771: POP
// end ;
26772: PPOPN 2
26774: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26775: LD_EXP 74
26779: PUSH
26780: LD_EXP 110
26784: AND
26785: IFFALSE 26851
26787: GO 26789
26789: DISABLE
26790: LD_INT 0
26792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26793: LD_ADDR_VAR 0 1
26797: PUSH
26798: LD_INT 22
26800: PUSH
26801: LD_OWVAR 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 30
26812: PUSH
26813: LD_INT 29
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: ST_TO_ADDR
// if not tmp then
26829: LD_VAR 0 1
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26851
// DestroyUnit ( tmp [ 1 ] ) ;
26838: LD_VAR 0 1
26842: PUSH
26843: LD_INT 1
26845: ARRAY
26846: PPUSH
26847: CALL_OW 65
// end ;
26851: PPOPN 1
26853: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26854: LD_EXP 74
26858: PUSH
26859: LD_EXP 112
26863: AND
26864: IFFALSE 26993
26866: GO 26868
26868: DISABLE
26869: LD_INT 0
26871: PPUSH
// begin uc_side := 0 ;
26872: LD_ADDR_OWVAR 20
26876: PUSH
26877: LD_INT 0
26879: ST_TO_ADDR
// uc_nation := nation_arabian ;
26880: LD_ADDR_OWVAR 21
26884: PUSH
26885: LD_INT 2
26887: ST_TO_ADDR
// hc_gallery :=  ;
26888: LD_ADDR_OWVAR 33
26892: PUSH
26893: LD_STRING 
26895: ST_TO_ADDR
// hc_name :=  ;
26896: LD_ADDR_OWVAR 26
26900: PUSH
26901: LD_STRING 
26903: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26904: LD_INT 1
26906: PPUSH
26907: LD_INT 11
26909: PPUSH
26910: LD_INT 10
26912: PPUSH
26913: CALL_OW 380
// un := CreateHuman ;
26917: LD_ADDR_VAR 0 1
26921: PUSH
26922: CALL_OW 44
26926: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26927: LD_VAR 0 1
26931: PPUSH
26932: LD_INT 1
26934: PPUSH
26935: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26939: LD_INT 35
26941: PPUSH
26942: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26946: LD_VAR 0 1
26950: PPUSH
26951: LD_INT 22
26953: PUSH
26954: LD_OWVAR 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PPUSH
26963: CALL_OW 69
26967: PPUSH
26968: LD_VAR 0 1
26972: PPUSH
26973: CALL_OW 74
26977: PPUSH
26978: CALL_OW 115
// until IsDead ( un ) ;
26982: LD_VAR 0 1
26986: PPUSH
26987: CALL_OW 301
26991: IFFALSE 26939
// end ;
26993: PPOPN 1
26995: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26996: LD_EXP 74
27000: PUSH
27001: LD_EXP 114
27005: AND
27006: IFFALSE 27018
27008: GO 27010
27010: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27011: LD_STRING earthquake(getX(game), 0, 32)
27013: PPUSH
27014: CALL_OW 559
27018: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27019: LD_EXP 74
27023: PUSH
27024: LD_EXP 115
27028: AND
27029: IFFALSE 27120
27031: GO 27033
27033: DISABLE
27034: LD_INT 0
27036: PPUSH
// begin enable ;
27037: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27038: LD_ADDR_VAR 0 1
27042: PUSH
27043: LD_INT 22
27045: PUSH
27046: LD_OWVAR 2
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 21
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 33
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: PPUSH
27080: CALL_OW 69
27084: ST_TO_ADDR
// if not tmp then
27085: LD_VAR 0 1
27089: NOT
27090: IFFALSE 27094
// exit ;
27092: GO 27120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27094: LD_VAR 0 1
27098: PUSH
27099: LD_INT 1
27101: PPUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 12
27111: ARRAY
27112: PPUSH
27113: LD_INT 1
27115: PPUSH
27116: CALL_OW 234
// end ;
27120: PPOPN 1
27122: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27123: LD_EXP 74
27127: PUSH
27128: LD_EXP 116
27132: AND
27133: IFFALSE 27274
27135: GO 27137
27137: DISABLE
27138: LD_INT 0
27140: PPUSH
27141: PPUSH
27142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27143: LD_ADDR_VAR 0 3
27147: PUSH
27148: LD_INT 22
27150: PUSH
27151: LD_OWVAR 2
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 25
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PPUSH
27174: CALL_OW 69
27178: ST_TO_ADDR
// if not tmp then
27179: LD_VAR 0 3
27183: NOT
27184: IFFALSE 27188
// exit ;
27186: GO 27274
// un := tmp [ rand ( 1 , tmp ) ] ;
27188: LD_ADDR_VAR 0 2
27192: PUSH
27193: LD_VAR 0 3
27197: PUSH
27198: LD_INT 1
27200: PPUSH
27201: LD_VAR 0 3
27205: PPUSH
27206: CALL_OW 12
27210: ARRAY
27211: ST_TO_ADDR
// if Crawls ( un ) then
27212: LD_VAR 0 2
27216: PPUSH
27217: CALL_OW 318
27221: IFFALSE 27232
// ComWalk ( un ) ;
27223: LD_VAR 0 2
27227: PPUSH
27228: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27232: LD_VAR 0 2
27236: PPUSH
27237: LD_INT 9
27239: PPUSH
27240: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27244: LD_INT 28
27246: PPUSH
27247: LD_OWVAR 2
27251: PPUSH
27252: LD_INT 2
27254: PPUSH
27255: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27259: LD_INT 29
27261: PPUSH
27262: LD_OWVAR 2
27266: PPUSH
27267: LD_INT 2
27269: PPUSH
27270: CALL_OW 322
// end ;
27274: PPOPN 3
27276: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27277: LD_EXP 74
27281: PUSH
27282: LD_EXP 117
27286: AND
27287: IFFALSE 27398
27289: GO 27291
27291: DISABLE
27292: LD_INT 0
27294: PPUSH
27295: PPUSH
27296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27297: LD_ADDR_VAR 0 3
27301: PUSH
27302: LD_INT 22
27304: PUSH
27305: LD_OWVAR 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 25
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PPUSH
27328: CALL_OW 69
27332: ST_TO_ADDR
// if not tmp then
27333: LD_VAR 0 3
27337: NOT
27338: IFFALSE 27342
// exit ;
27340: GO 27398
// un := tmp [ rand ( 1 , tmp ) ] ;
27342: LD_ADDR_VAR 0 2
27346: PUSH
27347: LD_VAR 0 3
27351: PUSH
27352: LD_INT 1
27354: PPUSH
27355: LD_VAR 0 3
27359: PPUSH
27360: CALL_OW 12
27364: ARRAY
27365: ST_TO_ADDR
// if Crawls ( un ) then
27366: LD_VAR 0 2
27370: PPUSH
27371: CALL_OW 318
27375: IFFALSE 27386
// ComWalk ( un ) ;
27377: LD_VAR 0 2
27381: PPUSH
27382: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27386: LD_VAR 0 2
27390: PPUSH
27391: LD_INT 8
27393: PPUSH
27394: CALL_OW 336
// end ;
27398: PPOPN 3
27400: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27401: LD_EXP 74
27405: PUSH
27406: LD_EXP 118
27410: AND
27411: IFFALSE 27555
27413: GO 27415
27415: DISABLE
27416: LD_INT 0
27418: PPUSH
27419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27420: LD_ADDR_VAR 0 2
27424: PUSH
27425: LD_INT 22
27427: PUSH
27428: LD_OWVAR 2
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 21
27439: PUSH
27440: LD_INT 2
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 2
27449: PUSH
27450: LD_INT 34
27452: PUSH
27453: LD_INT 12
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 34
27462: PUSH
27463: LD_INT 51
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 34
27472: PUSH
27473: LD_INT 32
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: PPUSH
27491: CALL_OW 69
27495: ST_TO_ADDR
// if not tmp then
27496: LD_VAR 0 2
27500: NOT
27501: IFFALSE 27505
// exit ;
27503: GO 27555
// for i in tmp do
27505: LD_ADDR_VAR 0 1
27509: PUSH
27510: LD_VAR 0 2
27514: PUSH
27515: FOR_IN
27516: IFFALSE 27553
// if GetCargo ( i , mat_artifact ) = 0 then
27518: LD_VAR 0 1
27522: PPUSH
27523: LD_INT 4
27525: PPUSH
27526: CALL_OW 289
27530: PUSH
27531: LD_INT 0
27533: EQUAL
27534: IFFALSE 27551
// SetCargo ( i , mat_siberit , 100 ) ;
27536: LD_VAR 0 1
27540: PPUSH
27541: LD_INT 3
27543: PPUSH
27544: LD_INT 100
27546: PPUSH
27547: CALL_OW 290
27551: GO 27515
27553: POP
27554: POP
// end ;
27555: PPOPN 2
27557: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27558: LD_EXP 74
27562: PUSH
27563: LD_EXP 119
27567: AND
27568: IFFALSE 27751
27570: GO 27572
27572: DISABLE
27573: LD_INT 0
27575: PPUSH
27576: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27577: LD_ADDR_VAR 0 2
27581: PUSH
27582: LD_INT 22
27584: PUSH
27585: LD_OWVAR 2
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PPUSH
27594: CALL_OW 69
27598: ST_TO_ADDR
// if not tmp then
27599: LD_VAR 0 2
27603: NOT
27604: IFFALSE 27608
// exit ;
27606: GO 27751
// for i := 1 to 2 do
27608: LD_ADDR_VAR 0 1
27612: PUSH
27613: DOUBLE
27614: LD_INT 1
27616: DEC
27617: ST_TO_ADDR
27618: LD_INT 2
27620: PUSH
27621: FOR_TO
27622: IFFALSE 27749
// begin uc_side := your_side ;
27624: LD_ADDR_OWVAR 20
27628: PUSH
27629: LD_OWVAR 2
27633: ST_TO_ADDR
// uc_nation := nation_american ;
27634: LD_ADDR_OWVAR 21
27638: PUSH
27639: LD_INT 1
27641: ST_TO_ADDR
// vc_chassis := us_morphling ;
27642: LD_ADDR_OWVAR 37
27646: PUSH
27647: LD_INT 5
27649: ST_TO_ADDR
// vc_engine := engine_siberite ;
27650: LD_ADDR_OWVAR 39
27654: PUSH
27655: LD_INT 3
27657: ST_TO_ADDR
// vc_control := control_computer ;
27658: LD_ADDR_OWVAR 38
27662: PUSH
27663: LD_INT 3
27665: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27666: LD_ADDR_OWVAR 40
27670: PUSH
27671: LD_INT 10
27673: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27674: LD_VAR 0 2
27678: PUSH
27679: LD_INT 1
27681: ARRAY
27682: PPUSH
27683: CALL_OW 310
27687: NOT
27688: IFFALSE 27735
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27690: CALL_OW 45
27694: PPUSH
27695: LD_VAR 0 2
27699: PUSH
27700: LD_INT 1
27702: ARRAY
27703: PPUSH
27704: CALL_OW 250
27708: PPUSH
27709: LD_VAR 0 2
27713: PUSH
27714: LD_INT 1
27716: ARRAY
27717: PPUSH
27718: CALL_OW 251
27722: PPUSH
27723: LD_INT 12
27725: PPUSH
27726: LD_INT 1
27728: PPUSH
27729: CALL_OW 50
27733: GO 27747
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27735: CALL_OW 45
27739: PPUSH
27740: LD_INT 1
27742: PPUSH
27743: CALL_OW 51
// end ;
27747: GO 27621
27749: POP
27750: POP
// end ;
27751: PPOPN 2
27753: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27754: LD_EXP 74
27758: PUSH
27759: LD_EXP 120
27763: AND
27764: IFFALSE 27986
27766: GO 27768
27768: DISABLE
27769: LD_INT 0
27771: PPUSH
27772: PPUSH
27773: PPUSH
27774: PPUSH
27775: PPUSH
27776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27777: LD_ADDR_VAR 0 6
27781: PUSH
27782: LD_INT 22
27784: PUSH
27785: LD_OWVAR 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 21
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: LD_INT 23
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 69
27830: ST_TO_ADDR
// if not tmp then
27831: LD_VAR 0 6
27835: NOT
27836: IFFALSE 27840
// exit ;
27838: GO 27986
// s1 := rand ( 1 , 4 ) ;
27840: LD_ADDR_VAR 0 2
27844: PUSH
27845: LD_INT 1
27847: PPUSH
27848: LD_INT 4
27850: PPUSH
27851: CALL_OW 12
27855: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27856: LD_ADDR_VAR 0 4
27860: PUSH
27861: LD_VAR 0 6
27865: PUSH
27866: LD_INT 1
27868: ARRAY
27869: PPUSH
27870: LD_VAR 0 2
27874: PPUSH
27875: CALL_OW 259
27879: ST_TO_ADDR
// if s1 = 1 then
27880: LD_VAR 0 2
27884: PUSH
27885: LD_INT 1
27887: EQUAL
27888: IFFALSE 27908
// s2 := rand ( 2 , 4 ) else
27890: LD_ADDR_VAR 0 3
27894: PUSH
27895: LD_INT 2
27897: PPUSH
27898: LD_INT 4
27900: PPUSH
27901: CALL_OW 12
27905: ST_TO_ADDR
27906: GO 27916
// s2 := 1 ;
27908: LD_ADDR_VAR 0 3
27912: PUSH
27913: LD_INT 1
27915: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27916: LD_ADDR_VAR 0 5
27920: PUSH
27921: LD_VAR 0 6
27925: PUSH
27926: LD_INT 1
27928: ARRAY
27929: PPUSH
27930: LD_VAR 0 3
27934: PPUSH
27935: CALL_OW 259
27939: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27940: LD_VAR 0 6
27944: PUSH
27945: LD_INT 1
27947: ARRAY
27948: PPUSH
27949: LD_VAR 0 2
27953: PPUSH
27954: LD_VAR 0 5
27958: PPUSH
27959: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27963: LD_VAR 0 6
27967: PUSH
27968: LD_INT 1
27970: ARRAY
27971: PPUSH
27972: LD_VAR 0 3
27976: PPUSH
27977: LD_VAR 0 4
27981: PPUSH
27982: CALL_OW 237
// end ;
27986: PPOPN 6
27988: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27989: LD_EXP 74
27993: PUSH
27994: LD_EXP 121
27998: AND
27999: IFFALSE 28078
28001: GO 28003
28003: DISABLE
28004: LD_INT 0
28006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28007: LD_ADDR_VAR 0 1
28011: PUSH
28012: LD_INT 22
28014: PUSH
28015: LD_OWVAR 2
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 30
28026: PUSH
28027: LD_INT 3
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: ST_TO_ADDR
// if not tmp then
28043: LD_VAR 0 1
28047: NOT
28048: IFFALSE 28052
// exit ;
28050: GO 28078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28052: LD_VAR 0 1
28056: PUSH
28057: LD_INT 1
28059: PPUSH
28060: LD_VAR 0 1
28064: PPUSH
28065: CALL_OW 12
28069: ARRAY
28070: PPUSH
28071: LD_INT 1
28073: PPUSH
28074: CALL_OW 234
// end ;
28078: PPOPN 1
28080: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28081: LD_EXP 74
28085: PUSH
28086: LD_EXP 122
28090: AND
28091: IFFALSE 28203
28093: GO 28095
28095: DISABLE
28096: LD_INT 0
28098: PPUSH
28099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28100: LD_ADDR_VAR 0 2
28104: PUSH
28105: LD_INT 22
28107: PUSH
28108: LD_OWVAR 2
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 2
28119: PUSH
28120: LD_INT 30
28122: PUSH
28123: LD_INT 27
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 30
28132: PUSH
28133: LD_INT 26
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 30
28142: PUSH
28143: LD_INT 28
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PPUSH
28160: CALL_OW 69
28164: ST_TO_ADDR
// if not tmp then
28165: LD_VAR 0 2
28169: NOT
28170: IFFALSE 28174
// exit ;
28172: GO 28203
// for i in tmp do
28174: LD_ADDR_VAR 0 1
28178: PUSH
28179: LD_VAR 0 2
28183: PUSH
28184: FOR_IN
28185: IFFALSE 28201
// SetLives ( i , 1 ) ;
28187: LD_VAR 0 1
28191: PPUSH
28192: LD_INT 1
28194: PPUSH
28195: CALL_OW 234
28199: GO 28184
28201: POP
28202: POP
// end ;
28203: PPOPN 2
28205: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28206: LD_EXP 74
28210: PUSH
28211: LD_EXP 123
28215: AND
28216: IFFALSE 28490
28218: GO 28220
28220: DISABLE
28221: LD_INT 0
28223: PPUSH
28224: PPUSH
28225: PPUSH
// begin i := rand ( 1 , 7 ) ;
28226: LD_ADDR_VAR 0 1
28230: PUSH
28231: LD_INT 1
28233: PPUSH
28234: LD_INT 7
28236: PPUSH
28237: CALL_OW 12
28241: ST_TO_ADDR
// case i of 1 :
28242: LD_VAR 0 1
28246: PUSH
28247: LD_INT 1
28249: DOUBLE
28250: EQUAL
28251: IFTRUE 28255
28253: GO 28265
28255: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28256: LD_STRING earthquake(getX(game), 0, 32)
28258: PPUSH
28259: CALL_OW 559
28263: GO 28490
28265: LD_INT 2
28267: DOUBLE
28268: EQUAL
28269: IFTRUE 28273
28271: GO 28287
28273: POP
// begin ToLua ( displayStucuk(); ) ;
28274: LD_STRING displayStucuk();
28276: PPUSH
28277: CALL_OW 559
// ResetFog ;
28281: CALL_OW 335
// end ; 3 :
28285: GO 28490
28287: LD_INT 3
28289: DOUBLE
28290: EQUAL
28291: IFTRUE 28295
28293: GO 28399
28295: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28296: LD_ADDR_VAR 0 2
28300: PUSH
28301: LD_INT 22
28303: PUSH
28304: LD_OWVAR 2
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 25
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PPUSH
28327: CALL_OW 69
28331: ST_TO_ADDR
// if not tmp then
28332: LD_VAR 0 2
28336: NOT
28337: IFFALSE 28341
// exit ;
28339: GO 28490
// un := tmp [ rand ( 1 , tmp ) ] ;
28341: LD_ADDR_VAR 0 3
28345: PUSH
28346: LD_VAR 0 2
28350: PUSH
28351: LD_INT 1
28353: PPUSH
28354: LD_VAR 0 2
28358: PPUSH
28359: CALL_OW 12
28363: ARRAY
28364: ST_TO_ADDR
// if Crawls ( un ) then
28365: LD_VAR 0 3
28369: PPUSH
28370: CALL_OW 318
28374: IFFALSE 28385
// ComWalk ( un ) ;
28376: LD_VAR 0 3
28380: PPUSH
28381: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28385: LD_VAR 0 3
28389: PPUSH
28390: LD_INT 8
28392: PPUSH
28393: CALL_OW 336
// end ; 4 :
28397: GO 28490
28399: LD_INT 4
28401: DOUBLE
28402: EQUAL
28403: IFTRUE 28407
28405: GO 28468
28407: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28408: LD_ADDR_VAR 0 2
28412: PUSH
28413: LD_INT 22
28415: PUSH
28416: LD_OWVAR 2
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 30
28427: PUSH
28428: LD_INT 29
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PPUSH
28439: CALL_OW 69
28443: ST_TO_ADDR
// if not tmp then
28444: LD_VAR 0 2
28448: NOT
28449: IFFALSE 28453
// exit ;
28451: GO 28490
// DestroyUnit ( tmp [ 1 ] ) ;
28453: LD_VAR 0 2
28457: PUSH
28458: LD_INT 1
28460: ARRAY
28461: PPUSH
28462: CALL_OW 65
// end ; 5 .. 7 :
28466: GO 28490
28468: LD_INT 5
28470: DOUBLE
28471: GREATEREQUAL
28472: IFFALSE 28480
28474: LD_INT 7
28476: DOUBLE
28477: LESSEQUAL
28478: IFTRUE 28482
28480: GO 28489
28482: POP
// StreamSibBomb ; end ;
28483: CALL 24740 0 0
28487: GO 28490
28489: POP
// end ;
28490: PPOPN 3
28492: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28493: LD_EXP 74
28497: PUSH
28498: LD_EXP 124
28502: AND
28503: IFFALSE 28659
28505: GO 28507
28507: DISABLE
28508: LD_INT 0
28510: PPUSH
28511: PPUSH
28512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28513: LD_ADDR_VAR 0 2
28517: PUSH
28518: LD_INT 81
28520: PUSH
28521: LD_OWVAR 2
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: LD_INT 21
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 21
28545: PUSH
28546: LD_INT 2
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PPUSH
28562: CALL_OW 69
28566: ST_TO_ADDR
// if not tmp then
28567: LD_VAR 0 2
28571: NOT
28572: IFFALSE 28576
// exit ;
28574: GO 28659
// p := 0 ;
28576: LD_ADDR_VAR 0 3
28580: PUSH
28581: LD_INT 0
28583: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28584: LD_INT 35
28586: PPUSH
28587: CALL_OW 67
// p := p + 1 ;
28591: LD_ADDR_VAR 0 3
28595: PUSH
28596: LD_VAR 0 3
28600: PUSH
28601: LD_INT 1
28603: PLUS
28604: ST_TO_ADDR
// for i in tmp do
28605: LD_ADDR_VAR 0 1
28609: PUSH
28610: LD_VAR 0 2
28614: PUSH
28615: FOR_IN
28616: IFFALSE 28647
// if GetLives ( i ) < 1000 then
28618: LD_VAR 0 1
28622: PPUSH
28623: CALL_OW 256
28627: PUSH
28628: LD_INT 1000
28630: LESS
28631: IFFALSE 28645
// SetLives ( i , 1000 ) ;
28633: LD_VAR 0 1
28637: PPUSH
28638: LD_INT 1000
28640: PPUSH
28641: CALL_OW 234
28645: GO 28615
28647: POP
28648: POP
// until p > 20 ;
28649: LD_VAR 0 3
28653: PUSH
28654: LD_INT 20
28656: GREATER
28657: IFFALSE 28584
// end ;
28659: PPOPN 3
28661: END
// every 0 0$1 trigger StreamModeActive and sTime do
28662: LD_EXP 74
28666: PUSH
28667: LD_EXP 125
28671: AND
28672: IFFALSE 28707
28674: GO 28676
28676: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28677: LD_INT 28
28679: PPUSH
28680: LD_OWVAR 2
28684: PPUSH
28685: LD_INT 2
28687: PPUSH
28688: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28692: LD_INT 30
28694: PPUSH
28695: LD_OWVAR 2
28699: PPUSH
28700: LD_INT 2
28702: PPUSH
28703: CALL_OW 322
// end ;
28707: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28708: LD_EXP 74
28712: PUSH
28713: LD_EXP 126
28717: AND
28718: IFFALSE 28839
28720: GO 28722
28722: DISABLE
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28727: LD_ADDR_VAR 0 2
28731: PUSH
28732: LD_INT 22
28734: PUSH
28735: LD_OWVAR 2
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 21
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 3
28756: PUSH
28757: LD_INT 23
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: PPUSH
28776: CALL_OW 69
28780: ST_TO_ADDR
// if not tmp then
28781: LD_VAR 0 2
28785: NOT
28786: IFFALSE 28790
// exit ;
28788: GO 28839
// for i in tmp do
28790: LD_ADDR_VAR 0 1
28794: PUSH
28795: LD_VAR 0 2
28799: PUSH
28800: FOR_IN
28801: IFFALSE 28837
// begin if Crawls ( i ) then
28803: LD_VAR 0 1
28807: PPUSH
28808: CALL_OW 318
28812: IFFALSE 28823
// ComWalk ( i ) ;
28814: LD_VAR 0 1
28818: PPUSH
28819: CALL_OW 138
// SetClass ( i , 2 ) ;
28823: LD_VAR 0 1
28827: PPUSH
28828: LD_INT 2
28830: PPUSH
28831: CALL_OW 336
// end ;
28835: GO 28800
28837: POP
28838: POP
// end ;
28839: PPOPN 2
28841: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28842: LD_EXP 74
28846: PUSH
28847: LD_EXP 127
28851: AND
28852: IFFALSE 29133
28854: GO 28856
28856: DISABLE
28857: LD_INT 0
28859: PPUSH
28860: PPUSH
28861: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28862: LD_OWVAR 2
28866: PPUSH
28867: LD_INT 9
28869: PPUSH
28870: LD_INT 1
28872: PPUSH
28873: LD_INT 1
28875: PPUSH
28876: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28880: LD_INT 9
28882: PPUSH
28883: LD_OWVAR 2
28887: PPUSH
28888: CALL_OW 343
// uc_side := 9 ;
28892: LD_ADDR_OWVAR 20
28896: PUSH
28897: LD_INT 9
28899: ST_TO_ADDR
// uc_nation := 2 ;
28900: LD_ADDR_OWVAR 21
28904: PUSH
28905: LD_INT 2
28907: ST_TO_ADDR
// hc_name := Dark Warrior ;
28908: LD_ADDR_OWVAR 26
28912: PUSH
28913: LD_STRING Dark Warrior
28915: ST_TO_ADDR
// hc_gallery :=  ;
28916: LD_ADDR_OWVAR 33
28920: PUSH
28921: LD_STRING 
28923: ST_TO_ADDR
// hc_noskilllimit := true ;
28924: LD_ADDR_OWVAR 76
28928: PUSH
28929: LD_INT 1
28931: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28932: LD_ADDR_OWVAR 31
28936: PUSH
28937: LD_INT 30
28939: PUSH
28940: LD_INT 30
28942: PUSH
28943: LD_INT 30
28945: PUSH
28946: LD_INT 30
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// un := CreateHuman ;
28955: LD_ADDR_VAR 0 3
28959: PUSH
28960: CALL_OW 44
28964: ST_TO_ADDR
// hc_noskilllimit := false ;
28965: LD_ADDR_OWVAR 76
28969: PUSH
28970: LD_INT 0
28972: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28973: LD_VAR 0 3
28977: PPUSH
28978: LD_INT 1
28980: PPUSH
28981: CALL_OW 51
// p := 0 ;
28985: LD_ADDR_VAR 0 2
28989: PUSH
28990: LD_INT 0
28992: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28993: LD_INT 35
28995: PPUSH
28996: CALL_OW 67
// p := p + 1 ;
29000: LD_ADDR_VAR 0 2
29004: PUSH
29005: LD_VAR 0 2
29009: PUSH
29010: LD_INT 1
29012: PLUS
29013: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29014: LD_VAR 0 3
29018: PPUSH
29019: CALL_OW 256
29023: PUSH
29024: LD_INT 1000
29026: LESS
29027: IFFALSE 29041
// SetLives ( un , 1000 ) ;
29029: LD_VAR 0 3
29033: PPUSH
29034: LD_INT 1000
29036: PPUSH
29037: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29041: LD_VAR 0 3
29045: PPUSH
29046: LD_INT 81
29048: PUSH
29049: LD_OWVAR 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 91
29060: PUSH
29061: LD_VAR 0 3
29065: PUSH
29066: LD_INT 30
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PPUSH
29078: CALL_OW 69
29082: PPUSH
29083: LD_VAR 0 3
29087: PPUSH
29088: CALL_OW 74
29092: PPUSH
29093: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29097: LD_VAR 0 2
29101: PUSH
29102: LD_INT 60
29104: GREATER
29105: PUSH
29106: LD_VAR 0 3
29110: PPUSH
29111: CALL_OW 301
29115: OR
29116: IFFALSE 28993
// if un then
29118: LD_VAR 0 3
29122: IFFALSE 29133
// RemoveUnit ( un ) ;
29124: LD_VAR 0 3
29128: PPUSH
29129: CALL_OW 64
// end ;
29133: PPOPN 3
29135: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29136: LD_INT 0
29138: PPUSH
// case cmd of 301 :
29139: LD_VAR 0 1
29143: PUSH
29144: LD_INT 301
29146: DOUBLE
29147: EQUAL
29148: IFTRUE 29152
29150: GO 29184
29152: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29153: LD_VAR 0 6
29157: PPUSH
29158: LD_VAR 0 7
29162: PPUSH
29163: LD_VAR 0 8
29167: PPUSH
29168: LD_VAR 0 4
29172: PPUSH
29173: LD_VAR 0 5
29177: PPUSH
29178: CALL 30385 0 5
29182: GO 29305
29184: LD_INT 302
29186: DOUBLE
29187: EQUAL
29188: IFTRUE 29192
29190: GO 29229
29192: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29193: LD_VAR 0 6
29197: PPUSH
29198: LD_VAR 0 7
29202: PPUSH
29203: LD_VAR 0 8
29207: PPUSH
29208: LD_VAR 0 9
29212: PPUSH
29213: LD_VAR 0 4
29217: PPUSH
29218: LD_VAR 0 5
29222: PPUSH
29223: CALL 30476 0 6
29227: GO 29305
29229: LD_INT 303
29231: DOUBLE
29232: EQUAL
29233: IFTRUE 29237
29235: GO 29274
29237: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29238: LD_VAR 0 6
29242: PPUSH
29243: LD_VAR 0 7
29247: PPUSH
29248: LD_VAR 0 8
29252: PPUSH
29253: LD_VAR 0 9
29257: PPUSH
29258: LD_VAR 0 4
29262: PPUSH
29263: LD_VAR 0 5
29267: PPUSH
29268: CALL 29310 0 6
29272: GO 29305
29274: LD_INT 304
29276: DOUBLE
29277: EQUAL
29278: IFTRUE 29282
29280: GO 29304
29282: POP
// hHackTeleport ( unit , x , y ) ; end ;
29283: LD_VAR 0 2
29287: PPUSH
29288: LD_VAR 0 4
29292: PPUSH
29293: LD_VAR 0 5
29297: PPUSH
29298: CALL 31069 0 3
29302: GO 29305
29304: POP
// end ;
29305: LD_VAR 0 12
29309: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29310: LD_INT 0
29312: PPUSH
29313: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29314: LD_VAR 0 1
29318: PUSH
29319: LD_INT 1
29321: LESS
29322: PUSH
29323: LD_VAR 0 1
29327: PUSH
29328: LD_INT 3
29330: GREATER
29331: OR
29332: PUSH
29333: LD_VAR 0 5
29337: PPUSH
29338: LD_VAR 0 6
29342: PPUSH
29343: CALL_OW 428
29347: OR
29348: IFFALSE 29352
// exit ;
29350: GO 30072
// uc_side := your_side ;
29352: LD_ADDR_OWVAR 20
29356: PUSH
29357: LD_OWVAR 2
29361: ST_TO_ADDR
// uc_nation := nation ;
29362: LD_ADDR_OWVAR 21
29366: PUSH
29367: LD_VAR 0 1
29371: ST_TO_ADDR
// bc_level = 1 ;
29372: LD_ADDR_OWVAR 43
29376: PUSH
29377: LD_INT 1
29379: ST_TO_ADDR
// case btype of 1 :
29380: LD_VAR 0 2
29384: PUSH
29385: LD_INT 1
29387: DOUBLE
29388: EQUAL
29389: IFTRUE 29393
29391: GO 29404
29393: POP
// bc_type := b_depot ; 2 :
29394: LD_ADDR_OWVAR 42
29398: PUSH
29399: LD_INT 0
29401: ST_TO_ADDR
29402: GO 30016
29404: LD_INT 2
29406: DOUBLE
29407: EQUAL
29408: IFTRUE 29412
29410: GO 29423
29412: POP
// bc_type := b_warehouse ; 3 :
29413: LD_ADDR_OWVAR 42
29417: PUSH
29418: LD_INT 1
29420: ST_TO_ADDR
29421: GO 30016
29423: LD_INT 3
29425: DOUBLE
29426: EQUAL
29427: IFTRUE 29431
29429: GO 29442
29431: POP
// bc_type := b_lab ; 4 .. 9 :
29432: LD_ADDR_OWVAR 42
29436: PUSH
29437: LD_INT 6
29439: ST_TO_ADDR
29440: GO 30016
29442: LD_INT 4
29444: DOUBLE
29445: GREATEREQUAL
29446: IFFALSE 29454
29448: LD_INT 9
29450: DOUBLE
29451: LESSEQUAL
29452: IFTRUE 29456
29454: GO 29508
29456: POP
// begin bc_type := b_lab_half ;
29457: LD_ADDR_OWVAR 42
29461: PUSH
29462: LD_INT 7
29464: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29465: LD_ADDR_OWVAR 44
29469: PUSH
29470: LD_INT 10
29472: PUSH
29473: LD_INT 11
29475: PUSH
29476: LD_INT 12
29478: PUSH
29479: LD_INT 15
29481: PUSH
29482: LD_INT 14
29484: PUSH
29485: LD_INT 13
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: PUSH
29496: LD_VAR 0 2
29500: PUSH
29501: LD_INT 3
29503: MINUS
29504: ARRAY
29505: ST_TO_ADDR
// end ; 10 .. 13 :
29506: GO 30016
29508: LD_INT 10
29510: DOUBLE
29511: GREATEREQUAL
29512: IFFALSE 29520
29514: LD_INT 13
29516: DOUBLE
29517: LESSEQUAL
29518: IFTRUE 29522
29520: GO 29599
29522: POP
// begin bc_type := b_lab_full ;
29523: LD_ADDR_OWVAR 42
29527: PUSH
29528: LD_INT 8
29530: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29531: LD_ADDR_OWVAR 44
29535: PUSH
29536: LD_INT 10
29538: PUSH
29539: LD_INT 12
29541: PUSH
29542: LD_INT 14
29544: PUSH
29545: LD_INT 13
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: PUSH
29554: LD_VAR 0 2
29558: PUSH
29559: LD_INT 9
29561: MINUS
29562: ARRAY
29563: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29564: LD_ADDR_OWVAR 45
29568: PUSH
29569: LD_INT 11
29571: PUSH
29572: LD_INT 15
29574: PUSH
29575: LD_INT 12
29577: PUSH
29578: LD_INT 15
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: PUSH
29587: LD_VAR 0 2
29591: PUSH
29592: LD_INT 9
29594: MINUS
29595: ARRAY
29596: ST_TO_ADDR
// end ; 14 :
29597: GO 30016
29599: LD_INT 14
29601: DOUBLE
29602: EQUAL
29603: IFTRUE 29607
29605: GO 29618
29607: POP
// bc_type := b_workshop ; 15 :
29608: LD_ADDR_OWVAR 42
29612: PUSH
29613: LD_INT 2
29615: ST_TO_ADDR
29616: GO 30016
29618: LD_INT 15
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29637
29626: POP
// bc_type := b_factory ; 16 :
29627: LD_ADDR_OWVAR 42
29631: PUSH
29632: LD_INT 3
29634: ST_TO_ADDR
29635: GO 30016
29637: LD_INT 16
29639: DOUBLE
29640: EQUAL
29641: IFTRUE 29645
29643: GO 29656
29645: POP
// bc_type := b_ext_gun ; 17 :
29646: LD_ADDR_OWVAR 42
29650: PUSH
29651: LD_INT 17
29653: ST_TO_ADDR
29654: GO 30016
29656: LD_INT 17
29658: DOUBLE
29659: EQUAL
29660: IFTRUE 29664
29662: GO 29692
29664: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29665: LD_ADDR_OWVAR 42
29669: PUSH
29670: LD_INT 19
29672: PUSH
29673: LD_INT 23
29675: PUSH
29676: LD_INT 19
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: PUSH
29684: LD_VAR 0 1
29688: ARRAY
29689: ST_TO_ADDR
29690: GO 30016
29692: LD_INT 18
29694: DOUBLE
29695: EQUAL
29696: IFTRUE 29700
29698: GO 29711
29700: POP
// bc_type := b_ext_radar ; 19 :
29701: LD_ADDR_OWVAR 42
29705: PUSH
29706: LD_INT 20
29708: ST_TO_ADDR
29709: GO 30016
29711: LD_INT 19
29713: DOUBLE
29714: EQUAL
29715: IFTRUE 29719
29717: GO 29730
29719: POP
// bc_type := b_ext_radio ; 20 :
29720: LD_ADDR_OWVAR 42
29724: PUSH
29725: LD_INT 22
29727: ST_TO_ADDR
29728: GO 30016
29730: LD_INT 20
29732: DOUBLE
29733: EQUAL
29734: IFTRUE 29738
29736: GO 29749
29738: POP
// bc_type := b_ext_siberium ; 21 :
29739: LD_ADDR_OWVAR 42
29743: PUSH
29744: LD_INT 21
29746: ST_TO_ADDR
29747: GO 30016
29749: LD_INT 21
29751: DOUBLE
29752: EQUAL
29753: IFTRUE 29757
29755: GO 29768
29757: POP
// bc_type := b_ext_computer ; 22 :
29758: LD_ADDR_OWVAR 42
29762: PUSH
29763: LD_INT 24
29765: ST_TO_ADDR
29766: GO 30016
29768: LD_INT 22
29770: DOUBLE
29771: EQUAL
29772: IFTRUE 29776
29774: GO 29787
29776: POP
// bc_type := b_ext_track ; 23 :
29777: LD_ADDR_OWVAR 42
29781: PUSH
29782: LD_INT 16
29784: ST_TO_ADDR
29785: GO 30016
29787: LD_INT 23
29789: DOUBLE
29790: EQUAL
29791: IFTRUE 29795
29793: GO 29806
29795: POP
// bc_type := b_ext_laser ; 24 :
29796: LD_ADDR_OWVAR 42
29800: PUSH
29801: LD_INT 25
29803: ST_TO_ADDR
29804: GO 30016
29806: LD_INT 24
29808: DOUBLE
29809: EQUAL
29810: IFTRUE 29814
29812: GO 29825
29814: POP
// bc_type := b_control_tower ; 25 :
29815: LD_ADDR_OWVAR 42
29819: PUSH
29820: LD_INT 36
29822: ST_TO_ADDR
29823: GO 30016
29825: LD_INT 25
29827: DOUBLE
29828: EQUAL
29829: IFTRUE 29833
29831: GO 29844
29833: POP
// bc_type := b_breastwork ; 26 :
29834: LD_ADDR_OWVAR 42
29838: PUSH
29839: LD_INT 31
29841: ST_TO_ADDR
29842: GO 30016
29844: LD_INT 26
29846: DOUBLE
29847: EQUAL
29848: IFTRUE 29852
29850: GO 29863
29852: POP
// bc_type := b_bunker ; 27 :
29853: LD_ADDR_OWVAR 42
29857: PUSH
29858: LD_INT 32
29860: ST_TO_ADDR
29861: GO 30016
29863: LD_INT 27
29865: DOUBLE
29866: EQUAL
29867: IFTRUE 29871
29869: GO 29882
29871: POP
// bc_type := b_turret ; 28 :
29872: LD_ADDR_OWVAR 42
29876: PUSH
29877: LD_INT 33
29879: ST_TO_ADDR
29880: GO 30016
29882: LD_INT 28
29884: DOUBLE
29885: EQUAL
29886: IFTRUE 29890
29888: GO 29901
29890: POP
// bc_type := b_armoury ; 29 :
29891: LD_ADDR_OWVAR 42
29895: PUSH
29896: LD_INT 4
29898: ST_TO_ADDR
29899: GO 30016
29901: LD_INT 29
29903: DOUBLE
29904: EQUAL
29905: IFTRUE 29909
29907: GO 29920
29909: POP
// bc_type := b_barracks ; 30 :
29910: LD_ADDR_OWVAR 42
29914: PUSH
29915: LD_INT 5
29917: ST_TO_ADDR
29918: GO 30016
29920: LD_INT 30
29922: DOUBLE
29923: EQUAL
29924: IFTRUE 29928
29926: GO 29939
29928: POP
// bc_type := b_solar_power ; 31 :
29929: LD_ADDR_OWVAR 42
29933: PUSH
29934: LD_INT 27
29936: ST_TO_ADDR
29937: GO 30016
29939: LD_INT 31
29941: DOUBLE
29942: EQUAL
29943: IFTRUE 29947
29945: GO 29958
29947: POP
// bc_type := b_oil_power ; 32 :
29948: LD_ADDR_OWVAR 42
29952: PUSH
29953: LD_INT 26
29955: ST_TO_ADDR
29956: GO 30016
29958: LD_INT 32
29960: DOUBLE
29961: EQUAL
29962: IFTRUE 29966
29964: GO 29977
29966: POP
// bc_type := b_siberite_power ; 33 :
29967: LD_ADDR_OWVAR 42
29971: PUSH
29972: LD_INT 28
29974: ST_TO_ADDR
29975: GO 30016
29977: LD_INT 33
29979: DOUBLE
29980: EQUAL
29981: IFTRUE 29985
29983: GO 29996
29985: POP
// bc_type := b_oil_mine ; 34 :
29986: LD_ADDR_OWVAR 42
29990: PUSH
29991: LD_INT 29
29993: ST_TO_ADDR
29994: GO 30016
29996: LD_INT 34
29998: DOUBLE
29999: EQUAL
30000: IFTRUE 30004
30002: GO 30015
30004: POP
// bc_type := b_siberite_mine ; end ;
30005: LD_ADDR_OWVAR 42
30009: PUSH
30010: LD_INT 30
30012: ST_TO_ADDR
30013: GO 30016
30015: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30016: LD_ADDR_VAR 0 8
30020: PUSH
30021: LD_VAR 0 5
30025: PPUSH
30026: LD_VAR 0 6
30030: PPUSH
30031: LD_VAR 0 3
30035: PPUSH
30036: CALL_OW 47
30040: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30041: LD_OWVAR 42
30045: PUSH
30046: LD_INT 32
30048: PUSH
30049: LD_INT 33
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: IN
30056: IFFALSE 30072
// PlaceWeaponTurret ( b , weapon ) ;
30058: LD_VAR 0 8
30062: PPUSH
30063: LD_VAR 0 4
30067: PPUSH
30068: CALL_OW 431
// end ;
30072: LD_VAR 0 7
30076: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30077: LD_INT 0
30079: PPUSH
30080: PPUSH
30081: PPUSH
30082: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30083: LD_ADDR_VAR 0 4
30087: PUSH
30088: LD_INT 22
30090: PUSH
30091: LD_OWVAR 2
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 2
30102: PUSH
30103: LD_INT 30
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 30
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PPUSH
30132: CALL_OW 69
30136: ST_TO_ADDR
// if not tmp then
30137: LD_VAR 0 4
30141: NOT
30142: IFFALSE 30146
// exit ;
30144: GO 30205
// for i in tmp do
30146: LD_ADDR_VAR 0 2
30150: PUSH
30151: LD_VAR 0 4
30155: PUSH
30156: FOR_IN
30157: IFFALSE 30203
// for j = 1 to 3 do
30159: LD_ADDR_VAR 0 3
30163: PUSH
30164: DOUBLE
30165: LD_INT 1
30167: DEC
30168: ST_TO_ADDR
30169: LD_INT 3
30171: PUSH
30172: FOR_TO
30173: IFFALSE 30199
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30175: LD_VAR 0 2
30179: PPUSH
30180: CALL_OW 274
30184: PPUSH
30185: LD_VAR 0 3
30189: PPUSH
30190: LD_INT 99999
30192: PPUSH
30193: CALL_OW 277
30197: GO 30172
30199: POP
30200: POP
30201: GO 30156
30203: POP
30204: POP
// end ;
30205: LD_VAR 0 1
30209: RET
// export function hHackSetLevel10 ; var i , j ; begin
30210: LD_INT 0
30212: PPUSH
30213: PPUSH
30214: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30215: LD_ADDR_VAR 0 2
30219: PUSH
30220: LD_INT 21
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PPUSH
30230: CALL_OW 69
30234: PUSH
30235: FOR_IN
30236: IFFALSE 30288
// if IsSelected ( i ) then
30238: LD_VAR 0 2
30242: PPUSH
30243: CALL_OW 306
30247: IFFALSE 30286
// begin for j := 1 to 4 do
30249: LD_ADDR_VAR 0 3
30253: PUSH
30254: DOUBLE
30255: LD_INT 1
30257: DEC
30258: ST_TO_ADDR
30259: LD_INT 4
30261: PUSH
30262: FOR_TO
30263: IFFALSE 30284
// SetSkill ( i , j , 10 ) ;
30265: LD_VAR 0 2
30269: PPUSH
30270: LD_VAR 0 3
30274: PPUSH
30275: LD_INT 10
30277: PPUSH
30278: CALL_OW 237
30282: GO 30262
30284: POP
30285: POP
// end ;
30286: GO 30235
30288: POP
30289: POP
// end ;
30290: LD_VAR 0 1
30294: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30295: LD_INT 0
30297: PPUSH
30298: PPUSH
30299: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30300: LD_ADDR_VAR 0 2
30304: PUSH
30305: LD_INT 22
30307: PUSH
30308: LD_OWVAR 2
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 21
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PPUSH
30331: CALL_OW 69
30335: PUSH
30336: FOR_IN
30337: IFFALSE 30378
// begin for j := 1 to 4 do
30339: LD_ADDR_VAR 0 3
30343: PUSH
30344: DOUBLE
30345: LD_INT 1
30347: DEC
30348: ST_TO_ADDR
30349: LD_INT 4
30351: PUSH
30352: FOR_TO
30353: IFFALSE 30374
// SetSkill ( i , j , 10 ) ;
30355: LD_VAR 0 2
30359: PPUSH
30360: LD_VAR 0 3
30364: PPUSH
30365: LD_INT 10
30367: PPUSH
30368: CALL_OW 237
30372: GO 30352
30374: POP
30375: POP
// end ;
30376: GO 30336
30378: POP
30379: POP
// end ;
30380: LD_VAR 0 1
30384: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30385: LD_INT 0
30387: PPUSH
// uc_side := your_side ;
30388: LD_ADDR_OWVAR 20
30392: PUSH
30393: LD_OWVAR 2
30397: ST_TO_ADDR
// uc_nation := nation ;
30398: LD_ADDR_OWVAR 21
30402: PUSH
30403: LD_VAR 0 1
30407: ST_TO_ADDR
// InitHc ;
30408: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30412: LD_INT 0
30414: PPUSH
30415: LD_VAR 0 2
30419: PPUSH
30420: LD_VAR 0 3
30424: PPUSH
30425: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30429: LD_VAR 0 4
30433: PPUSH
30434: LD_VAR 0 5
30438: PPUSH
30439: CALL_OW 428
30443: PUSH
30444: LD_INT 0
30446: EQUAL
30447: IFFALSE 30471
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30449: CALL_OW 44
30453: PPUSH
30454: LD_VAR 0 4
30458: PPUSH
30459: LD_VAR 0 5
30463: PPUSH
30464: LD_INT 1
30466: PPUSH
30467: CALL_OW 48
// end ;
30471: LD_VAR 0 6
30475: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30476: LD_INT 0
30478: PPUSH
30479: PPUSH
// uc_side := your_side ;
30480: LD_ADDR_OWVAR 20
30484: PUSH
30485: LD_OWVAR 2
30489: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30490: LD_VAR 0 1
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: LD_INT 3
30503: PUSH
30504: LD_INT 4
30506: PUSH
30507: LD_INT 5
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: IN
30517: IFFALSE 30529
// uc_nation := nation_american else
30519: LD_ADDR_OWVAR 21
30523: PUSH
30524: LD_INT 1
30526: ST_TO_ADDR
30527: GO 30572
// if chassis in [ 11 , 12 , 13 , 14 ] then
30529: LD_VAR 0 1
30533: PUSH
30534: LD_INT 11
30536: PUSH
30537: LD_INT 12
30539: PUSH
30540: LD_INT 13
30542: PUSH
30543: LD_INT 14
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: IN
30552: IFFALSE 30564
// uc_nation := nation_arabian else
30554: LD_ADDR_OWVAR 21
30558: PUSH
30559: LD_INT 2
30561: ST_TO_ADDR
30562: GO 30572
// uc_nation := nation_russian ;
30564: LD_ADDR_OWVAR 21
30568: PUSH
30569: LD_INT 3
30571: ST_TO_ADDR
// vc_chassis := chassis ;
30572: LD_ADDR_OWVAR 37
30576: PUSH
30577: LD_VAR 0 1
30581: ST_TO_ADDR
// vc_engine := engine ;
30582: LD_ADDR_OWVAR 39
30586: PUSH
30587: LD_VAR 0 2
30591: ST_TO_ADDR
// vc_control := control ;
30592: LD_ADDR_OWVAR 38
30596: PUSH
30597: LD_VAR 0 3
30601: ST_TO_ADDR
// vc_weapon := weapon ;
30602: LD_ADDR_OWVAR 40
30606: PUSH
30607: LD_VAR 0 4
30611: ST_TO_ADDR
// un := CreateVehicle ;
30612: LD_ADDR_VAR 0 8
30616: PUSH
30617: CALL_OW 45
30621: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30622: LD_VAR 0 8
30626: PPUSH
30627: LD_INT 0
30629: PPUSH
30630: LD_INT 5
30632: PPUSH
30633: CALL_OW 12
30637: PPUSH
30638: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30642: LD_VAR 0 8
30646: PPUSH
30647: LD_VAR 0 5
30651: PPUSH
30652: LD_VAR 0 6
30656: PPUSH
30657: LD_INT 1
30659: PPUSH
30660: CALL_OW 48
// end ;
30664: LD_VAR 0 7
30668: RET
// export hInvincible ; every 1 do
30669: GO 30671
30671: DISABLE
// hInvincible := [ ] ;
30672: LD_ADDR_EXP 128
30676: PUSH
30677: EMPTY
30678: ST_TO_ADDR
30679: END
// every 10 do var i ;
30680: GO 30682
30682: DISABLE
30683: LD_INT 0
30685: PPUSH
// begin enable ;
30686: ENABLE
// if not hInvincible then
30687: LD_EXP 128
30691: NOT
30692: IFFALSE 30696
// exit ;
30694: GO 30740
// for i in hInvincible do
30696: LD_ADDR_VAR 0 1
30700: PUSH
30701: LD_EXP 128
30705: PUSH
30706: FOR_IN
30707: IFFALSE 30738
// if GetLives ( i ) < 1000 then
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 256
30718: PUSH
30719: LD_INT 1000
30721: LESS
30722: IFFALSE 30736
// SetLives ( i , 1000 ) ;
30724: LD_VAR 0 1
30728: PPUSH
30729: LD_INT 1000
30731: PPUSH
30732: CALL_OW 234
30736: GO 30706
30738: POP
30739: POP
// end ;
30740: PPOPN 1
30742: END
// export function hHackInvincible ; var i ; begin
30743: LD_INT 0
30745: PPUSH
30746: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30747: LD_ADDR_VAR 0 2
30751: PUSH
30752: LD_INT 2
30754: PUSH
30755: LD_INT 21
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 21
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: PPUSH
30780: CALL_OW 69
30784: PUSH
30785: FOR_IN
30786: IFFALSE 30847
// if IsSelected ( i ) then
30788: LD_VAR 0 2
30792: PPUSH
30793: CALL_OW 306
30797: IFFALSE 30845
// begin if i in hInvincible then
30799: LD_VAR 0 2
30803: PUSH
30804: LD_EXP 128
30808: IN
30809: IFFALSE 30829
// hInvincible := hInvincible diff i else
30811: LD_ADDR_EXP 128
30815: PUSH
30816: LD_EXP 128
30820: PUSH
30821: LD_VAR 0 2
30825: DIFF
30826: ST_TO_ADDR
30827: GO 30845
// hInvincible := hInvincible union i ;
30829: LD_ADDR_EXP 128
30833: PUSH
30834: LD_EXP 128
30838: PUSH
30839: LD_VAR 0 2
30843: UNION
30844: ST_TO_ADDR
// end ;
30845: GO 30785
30847: POP
30848: POP
// end ;
30849: LD_VAR 0 1
30853: RET
// export function hHackInvisible ; var i , j ; begin
30854: LD_INT 0
30856: PPUSH
30857: PPUSH
30858: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30859: LD_ADDR_VAR 0 2
30863: PUSH
30864: LD_INT 21
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PPUSH
30874: CALL_OW 69
30878: PUSH
30879: FOR_IN
30880: IFFALSE 30904
// if IsSelected ( i ) then
30882: LD_VAR 0 2
30886: PPUSH
30887: CALL_OW 306
30891: IFFALSE 30902
// ComForceInvisible ( i ) ;
30893: LD_VAR 0 2
30897: PPUSH
30898: CALL_OW 496
30902: GO 30879
30904: POP
30905: POP
// end ;
30906: LD_VAR 0 1
30910: RET
// export function hHackChangeYourSide ; begin
30911: LD_INT 0
30913: PPUSH
// if your_side = 8 then
30914: LD_OWVAR 2
30918: PUSH
30919: LD_INT 8
30921: EQUAL
30922: IFFALSE 30934
// your_side := 0 else
30924: LD_ADDR_OWVAR 2
30928: PUSH
30929: LD_INT 0
30931: ST_TO_ADDR
30932: GO 30948
// your_side := your_side + 1 ;
30934: LD_ADDR_OWVAR 2
30938: PUSH
30939: LD_OWVAR 2
30943: PUSH
30944: LD_INT 1
30946: PLUS
30947: ST_TO_ADDR
// end ;
30948: LD_VAR 0 1
30952: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30953: LD_INT 0
30955: PPUSH
30956: PPUSH
30957: PPUSH
// for i in all_units do
30958: LD_ADDR_VAR 0 2
30962: PUSH
30963: LD_OWVAR 3
30967: PUSH
30968: FOR_IN
30969: IFFALSE 31047
// if IsSelected ( i ) then
30971: LD_VAR 0 2
30975: PPUSH
30976: CALL_OW 306
30980: IFFALSE 31045
// begin j := GetSide ( i ) ;
30982: LD_ADDR_VAR 0 3
30986: PUSH
30987: LD_VAR 0 2
30991: PPUSH
30992: CALL_OW 255
30996: ST_TO_ADDR
// if j = 8 then
30997: LD_VAR 0 3
31001: PUSH
31002: LD_INT 8
31004: EQUAL
31005: IFFALSE 31017
// j := 0 else
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: LD_INT 0
31014: ST_TO_ADDR
31015: GO 31031
// j := j + 1 ;
31017: LD_ADDR_VAR 0 3
31021: PUSH
31022: LD_VAR 0 3
31026: PUSH
31027: LD_INT 1
31029: PLUS
31030: ST_TO_ADDR
// SetSide ( i , j ) ;
31031: LD_VAR 0 2
31035: PPUSH
31036: LD_VAR 0 3
31040: PPUSH
31041: CALL_OW 235
// end ;
31045: GO 30968
31047: POP
31048: POP
// end ;
31049: LD_VAR 0 1
31053: RET
// export function hHackFog ; begin
31054: LD_INT 0
31056: PPUSH
// FogOff ( true ) ;
31057: LD_INT 1
31059: PPUSH
31060: CALL_OW 344
// end ;
31064: LD_VAR 0 1
31068: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31069: LD_INT 0
31071: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31072: LD_VAR 0 1
31076: PPUSH
31077: LD_VAR 0 2
31081: PPUSH
31082: LD_VAR 0 3
31086: PPUSH
31087: LD_INT 1
31089: PPUSH
31090: LD_INT 1
31092: PPUSH
31093: CALL_OW 483
// CenterOnXY ( x , y ) ;
31097: LD_VAR 0 2
31101: PPUSH
31102: LD_VAR 0 3
31106: PPUSH
31107: CALL_OW 84
// end ; end_of_file end_of_file
31111: LD_VAR 0 4
31115: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31116: LD_INT 0
31118: PPUSH
31119: PPUSH
// if exist_mode then
31120: LD_VAR 0 2
31124: IFFALSE 31149
// unit := CreateCharacter ( prefix & ident ) else
31126: LD_ADDR_VAR 0 5
31130: PUSH
31131: LD_VAR 0 3
31135: PUSH
31136: LD_VAR 0 1
31140: STR
31141: PPUSH
31142: CALL_OW 34
31146: ST_TO_ADDR
31147: GO 31164
// unit := NewCharacter ( ident ) ;
31149: LD_ADDR_VAR 0 5
31153: PUSH
31154: LD_VAR 0 1
31158: PPUSH
31159: CALL_OW 25
31163: ST_TO_ADDR
// result := unit ;
31164: LD_ADDR_VAR 0 4
31168: PUSH
31169: LD_VAR 0 5
31173: ST_TO_ADDR
// end ;
31174: LD_VAR 0 4
31178: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31179: LD_INT 0
31181: PPUSH
31182: PPUSH
// if not side or not nation then
31183: LD_VAR 0 1
31187: NOT
31188: PUSH
31189: LD_VAR 0 2
31193: NOT
31194: OR
31195: IFFALSE 31199
// exit ;
31197: GO 31963
// case nation of nation_american :
31199: LD_VAR 0 2
31203: PUSH
31204: LD_INT 1
31206: DOUBLE
31207: EQUAL
31208: IFTRUE 31212
31210: GO 31426
31212: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31213: LD_ADDR_VAR 0 4
31217: PUSH
31218: LD_INT 35
31220: PUSH
31221: LD_INT 45
31223: PUSH
31224: LD_INT 46
31226: PUSH
31227: LD_INT 47
31229: PUSH
31230: LD_INT 82
31232: PUSH
31233: LD_INT 83
31235: PUSH
31236: LD_INT 84
31238: PUSH
31239: LD_INT 85
31241: PUSH
31242: LD_INT 86
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: LD_INT 2
31250: PUSH
31251: LD_INT 6
31253: PUSH
31254: LD_INT 15
31256: PUSH
31257: LD_INT 16
31259: PUSH
31260: LD_INT 7
31262: PUSH
31263: LD_INT 12
31265: PUSH
31266: LD_INT 13
31268: PUSH
31269: LD_INT 10
31271: PUSH
31272: LD_INT 14
31274: PUSH
31275: LD_INT 20
31277: PUSH
31278: LD_INT 21
31280: PUSH
31281: LD_INT 22
31283: PUSH
31284: LD_INT 25
31286: PUSH
31287: LD_INT 32
31289: PUSH
31290: LD_INT 27
31292: PUSH
31293: LD_INT 36
31295: PUSH
31296: LD_INT 69
31298: PUSH
31299: LD_INT 39
31301: PUSH
31302: LD_INT 34
31304: PUSH
31305: LD_INT 40
31307: PUSH
31308: LD_INT 48
31310: PUSH
31311: LD_INT 49
31313: PUSH
31314: LD_INT 50
31316: PUSH
31317: LD_INT 51
31319: PUSH
31320: LD_INT 52
31322: PUSH
31323: LD_INT 53
31325: PUSH
31326: LD_INT 54
31328: PUSH
31329: LD_INT 55
31331: PUSH
31332: LD_INT 56
31334: PUSH
31335: LD_INT 57
31337: PUSH
31338: LD_INT 58
31340: PUSH
31341: LD_INT 59
31343: PUSH
31344: LD_INT 60
31346: PUSH
31347: LD_INT 61
31349: PUSH
31350: LD_INT 62
31352: PUSH
31353: LD_INT 80
31355: PUSH
31356: LD_INT 82
31358: PUSH
31359: LD_INT 83
31361: PUSH
31362: LD_INT 84
31364: PUSH
31365: LD_INT 85
31367: PUSH
31368: LD_INT 86
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: ST_TO_ADDR
31424: GO 31887
31426: LD_INT 2
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31434
31432: GO 31656
31434: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31435: LD_ADDR_VAR 0 4
31439: PUSH
31440: LD_INT 35
31442: PUSH
31443: LD_INT 45
31445: PUSH
31446: LD_INT 46
31448: PUSH
31449: LD_INT 47
31451: PUSH
31452: LD_INT 82
31454: PUSH
31455: LD_INT 83
31457: PUSH
31458: LD_INT 84
31460: PUSH
31461: LD_INT 85
31463: PUSH
31464: LD_INT 87
31466: PUSH
31467: LD_INT 70
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: LD_INT 11
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: LD_INT 4
31481: PUSH
31482: LD_INT 5
31484: PUSH
31485: LD_INT 6
31487: PUSH
31488: LD_INT 15
31490: PUSH
31491: LD_INT 18
31493: PUSH
31494: LD_INT 7
31496: PUSH
31497: LD_INT 17
31499: PUSH
31500: LD_INT 8
31502: PUSH
31503: LD_INT 20
31505: PUSH
31506: LD_INT 21
31508: PUSH
31509: LD_INT 22
31511: PUSH
31512: LD_INT 72
31514: PUSH
31515: LD_INT 26
31517: PUSH
31518: LD_INT 69
31520: PUSH
31521: LD_INT 39
31523: PUSH
31524: LD_INT 40
31526: PUSH
31527: LD_INT 41
31529: PUSH
31530: LD_INT 42
31532: PUSH
31533: LD_INT 43
31535: PUSH
31536: LD_INT 48
31538: PUSH
31539: LD_INT 49
31541: PUSH
31542: LD_INT 50
31544: PUSH
31545: LD_INT 51
31547: PUSH
31548: LD_INT 52
31550: PUSH
31551: LD_INT 53
31553: PUSH
31554: LD_INT 54
31556: PUSH
31557: LD_INT 55
31559: PUSH
31560: LD_INT 56
31562: PUSH
31563: LD_INT 60
31565: PUSH
31566: LD_INT 61
31568: PUSH
31569: LD_INT 62
31571: PUSH
31572: LD_INT 66
31574: PUSH
31575: LD_INT 67
31577: PUSH
31578: LD_INT 68
31580: PUSH
31581: LD_INT 81
31583: PUSH
31584: LD_INT 82
31586: PUSH
31587: LD_INT 83
31589: PUSH
31590: LD_INT 84
31592: PUSH
31593: LD_INT 85
31595: PUSH
31596: LD_INT 87
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: ST_TO_ADDR
31654: GO 31887
31656: LD_INT 3
31658: DOUBLE
31659: EQUAL
31660: IFTRUE 31664
31662: GO 31886
31664: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31665: LD_ADDR_VAR 0 4
31669: PUSH
31670: LD_INT 46
31672: PUSH
31673: LD_INT 47
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 82
31684: PUSH
31685: LD_INT 83
31687: PUSH
31688: LD_INT 84
31690: PUSH
31691: LD_INT 85
31693: PUSH
31694: LD_INT 86
31696: PUSH
31697: LD_INT 11
31699: PUSH
31700: LD_INT 9
31702: PUSH
31703: LD_INT 20
31705: PUSH
31706: LD_INT 19
31708: PUSH
31709: LD_INT 21
31711: PUSH
31712: LD_INT 24
31714: PUSH
31715: LD_INT 22
31717: PUSH
31718: LD_INT 25
31720: PUSH
31721: LD_INT 28
31723: PUSH
31724: LD_INT 29
31726: PUSH
31727: LD_INT 30
31729: PUSH
31730: LD_INT 31
31732: PUSH
31733: LD_INT 37
31735: PUSH
31736: LD_INT 38
31738: PUSH
31739: LD_INT 32
31741: PUSH
31742: LD_INT 27
31744: PUSH
31745: LD_INT 33
31747: PUSH
31748: LD_INT 69
31750: PUSH
31751: LD_INT 39
31753: PUSH
31754: LD_INT 34
31756: PUSH
31757: LD_INT 40
31759: PUSH
31760: LD_INT 71
31762: PUSH
31763: LD_INT 23
31765: PUSH
31766: LD_INT 44
31768: PUSH
31769: LD_INT 48
31771: PUSH
31772: LD_INT 49
31774: PUSH
31775: LD_INT 50
31777: PUSH
31778: LD_INT 51
31780: PUSH
31781: LD_INT 52
31783: PUSH
31784: LD_INT 53
31786: PUSH
31787: LD_INT 54
31789: PUSH
31790: LD_INT 55
31792: PUSH
31793: LD_INT 56
31795: PUSH
31796: LD_INT 57
31798: PUSH
31799: LD_INT 58
31801: PUSH
31802: LD_INT 59
31804: PUSH
31805: LD_INT 63
31807: PUSH
31808: LD_INT 64
31810: PUSH
31811: LD_INT 65
31813: PUSH
31814: LD_INT 82
31816: PUSH
31817: LD_INT 83
31819: PUSH
31820: LD_INT 84
31822: PUSH
31823: LD_INT 85
31825: PUSH
31826: LD_INT 86
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: ST_TO_ADDR
31884: GO 31887
31886: POP
// if state > - 1 and state < 3 then
31887: LD_VAR 0 3
31891: PUSH
31892: LD_INT 1
31894: NEG
31895: GREATER
31896: PUSH
31897: LD_VAR 0 3
31901: PUSH
31902: LD_INT 3
31904: LESS
31905: AND
31906: IFFALSE 31963
// for i in result do
31908: LD_ADDR_VAR 0 5
31912: PUSH
31913: LD_VAR 0 4
31917: PUSH
31918: FOR_IN
31919: IFFALSE 31961
// if GetTech ( i , side ) <> state then
31921: LD_VAR 0 5
31925: PPUSH
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 321
31935: PUSH
31936: LD_VAR 0 3
31940: NONEQUAL
31941: IFFALSE 31959
// result := result diff i ;
31943: LD_ADDR_VAR 0 4
31947: PUSH
31948: LD_VAR 0 4
31952: PUSH
31953: LD_VAR 0 5
31957: DIFF
31958: ST_TO_ADDR
31959: GO 31918
31961: POP
31962: POP
// end ;
31963: LD_VAR 0 4
31967: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31968: LD_INT 0
31970: PPUSH
31971: PPUSH
31972: PPUSH
// result := true ;
31973: LD_ADDR_VAR 0 3
31977: PUSH
31978: LD_INT 1
31980: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31981: LD_ADDR_VAR 0 5
31985: PUSH
31986: LD_VAR 0 2
31990: PPUSH
31991: CALL_OW 480
31995: ST_TO_ADDR
// if not tmp then
31996: LD_VAR 0 5
32000: NOT
32001: IFFALSE 32005
// exit ;
32003: GO 32054
// for i in tmp do
32005: LD_ADDR_VAR 0 4
32009: PUSH
32010: LD_VAR 0 5
32014: PUSH
32015: FOR_IN
32016: IFFALSE 32052
// if GetTech ( i , side ) <> state_researched then
32018: LD_VAR 0 4
32022: PPUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 321
32032: PUSH
32033: LD_INT 2
32035: NONEQUAL
32036: IFFALSE 32050
// begin result := false ;
32038: LD_ADDR_VAR 0 3
32042: PUSH
32043: LD_INT 0
32045: ST_TO_ADDR
// exit ;
32046: POP
32047: POP
32048: GO 32054
// end ;
32050: GO 32015
32052: POP
32053: POP
// end ;
32054: LD_VAR 0 3
32058: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
32066: PPUSH
32067: PPUSH
32068: PPUSH
32069: PPUSH
32070: PPUSH
32071: PPUSH
32072: PPUSH
32073: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32074: LD_VAR 0 1
32078: NOT
32079: PUSH
32080: LD_VAR 0 1
32084: PPUSH
32085: CALL_OW 257
32089: PUSH
32090: LD_INT 9
32092: NONEQUAL
32093: OR
32094: IFFALSE 32098
// exit ;
32096: GO 32671
// side := GetSide ( unit ) ;
32098: LD_ADDR_VAR 0 9
32102: PUSH
32103: LD_VAR 0 1
32107: PPUSH
32108: CALL_OW 255
32112: ST_TO_ADDR
// tech_space := tech_spacanom ;
32113: LD_ADDR_VAR 0 12
32117: PUSH
32118: LD_INT 29
32120: ST_TO_ADDR
// tech_time := tech_taurad ;
32121: LD_ADDR_VAR 0 13
32125: PUSH
32126: LD_INT 28
32128: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32129: LD_ADDR_VAR 0 11
32133: PUSH
32134: LD_VAR 0 1
32138: PPUSH
32139: CALL_OW 310
32143: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32144: LD_VAR 0 11
32148: PPUSH
32149: CALL_OW 247
32153: PUSH
32154: LD_INT 2
32156: EQUAL
32157: IFFALSE 32161
// exit ;
32159: GO 32671
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32161: LD_ADDR_VAR 0 8
32165: PUSH
32166: LD_INT 81
32168: PUSH
32169: LD_VAR 0 9
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 3
32180: PUSH
32181: LD_INT 21
32183: PUSH
32184: LD_INT 3
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PPUSH
32199: CALL_OW 69
32203: ST_TO_ADDR
// if not tmp then
32204: LD_VAR 0 8
32208: NOT
32209: IFFALSE 32213
// exit ;
32211: GO 32671
// if in_unit then
32213: LD_VAR 0 11
32217: IFFALSE 32241
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32219: LD_ADDR_VAR 0 10
32223: PUSH
32224: LD_VAR 0 8
32228: PPUSH
32229: LD_VAR 0 11
32233: PPUSH
32234: CALL_OW 74
32238: ST_TO_ADDR
32239: GO 32261
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32241: LD_ADDR_VAR 0 10
32245: PUSH
32246: LD_VAR 0 8
32250: PPUSH
32251: LD_VAR 0 1
32255: PPUSH
32256: CALL_OW 74
32260: ST_TO_ADDR
// if not enemy then
32261: LD_VAR 0 10
32265: NOT
32266: IFFALSE 32270
// exit ;
32268: GO 32671
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32270: LD_VAR 0 11
32274: PUSH
32275: LD_VAR 0 11
32279: PPUSH
32280: LD_VAR 0 10
32284: PPUSH
32285: CALL_OW 296
32289: PUSH
32290: LD_INT 13
32292: GREATER
32293: AND
32294: PUSH
32295: LD_VAR 0 1
32299: PPUSH
32300: LD_VAR 0 10
32304: PPUSH
32305: CALL_OW 296
32309: PUSH
32310: LD_INT 12
32312: GREATER
32313: OR
32314: IFFALSE 32318
// exit ;
32316: GO 32671
// missile := [ 1 ] ;
32318: LD_ADDR_VAR 0 14
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32329: LD_VAR 0 9
32333: PPUSH
32334: LD_VAR 0 12
32338: PPUSH
32339: CALL_OW 325
32343: IFFALSE 32372
// missile := Insert ( missile , missile + 1 , 2 ) ;
32345: LD_ADDR_VAR 0 14
32349: PUSH
32350: LD_VAR 0 14
32354: PPUSH
32355: LD_VAR 0 14
32359: PUSH
32360: LD_INT 1
32362: PLUS
32363: PPUSH
32364: LD_INT 2
32366: PPUSH
32367: CALL_OW 2
32371: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32372: LD_VAR 0 9
32376: PPUSH
32377: LD_VAR 0 13
32381: PPUSH
32382: CALL_OW 325
32386: PUSH
32387: LD_VAR 0 10
32391: PPUSH
32392: CALL_OW 255
32396: PPUSH
32397: LD_VAR 0 13
32401: PPUSH
32402: CALL_OW 325
32406: NOT
32407: AND
32408: IFFALSE 32437
// missile := Insert ( missile , missile + 1 , 3 ) ;
32410: LD_ADDR_VAR 0 14
32414: PUSH
32415: LD_VAR 0 14
32419: PPUSH
32420: LD_VAR 0 14
32424: PUSH
32425: LD_INT 1
32427: PLUS
32428: PPUSH
32429: LD_INT 3
32431: PPUSH
32432: CALL_OW 2
32436: ST_TO_ADDR
// if missile < 2 then
32437: LD_VAR 0 14
32441: PUSH
32442: LD_INT 2
32444: LESS
32445: IFFALSE 32449
// exit ;
32447: GO 32671
// x := GetX ( enemy ) ;
32449: LD_ADDR_VAR 0 4
32453: PUSH
32454: LD_VAR 0 10
32458: PPUSH
32459: CALL_OW 250
32463: ST_TO_ADDR
// y := GetY ( enemy ) ;
32464: LD_ADDR_VAR 0 5
32468: PUSH
32469: LD_VAR 0 10
32473: PPUSH
32474: CALL_OW 251
32478: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32479: LD_ADDR_VAR 0 6
32483: PUSH
32484: LD_VAR 0 4
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PPUSH
32493: LD_INT 1
32495: PPUSH
32496: CALL_OW 12
32500: PLUS
32501: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32502: LD_ADDR_VAR 0 7
32506: PUSH
32507: LD_VAR 0 5
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PPUSH
32516: LD_INT 1
32518: PPUSH
32519: CALL_OW 12
32523: PLUS
32524: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32525: LD_VAR 0 6
32529: PPUSH
32530: LD_VAR 0 7
32534: PPUSH
32535: CALL_OW 488
32539: NOT
32540: IFFALSE 32562
// begin _x := x ;
32542: LD_ADDR_VAR 0 6
32546: PUSH
32547: LD_VAR 0 4
32551: ST_TO_ADDR
// _y := y ;
32552: LD_ADDR_VAR 0 7
32556: PUSH
32557: LD_VAR 0 5
32561: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32562: LD_ADDR_VAR 0 3
32566: PUSH
32567: LD_INT 1
32569: PPUSH
32570: LD_VAR 0 14
32574: PPUSH
32575: CALL_OW 12
32579: ST_TO_ADDR
// case i of 1 :
32580: LD_VAR 0 3
32584: PUSH
32585: LD_INT 1
32587: DOUBLE
32588: EQUAL
32589: IFTRUE 32593
32591: GO 32610
32593: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32594: LD_VAR 0 1
32598: PPUSH
32599: LD_VAR 0 10
32603: PPUSH
32604: CALL_OW 115
32608: GO 32671
32610: LD_INT 2
32612: DOUBLE
32613: EQUAL
32614: IFTRUE 32618
32616: GO 32640
32618: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32619: LD_VAR 0 1
32623: PPUSH
32624: LD_VAR 0 6
32628: PPUSH
32629: LD_VAR 0 7
32633: PPUSH
32634: CALL_OW 153
32638: GO 32671
32640: LD_INT 3
32642: DOUBLE
32643: EQUAL
32644: IFTRUE 32648
32646: GO 32670
32648: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32649: LD_VAR 0 1
32653: PPUSH
32654: LD_VAR 0 6
32658: PPUSH
32659: LD_VAR 0 7
32663: PPUSH
32664: CALL_OW 154
32668: GO 32671
32670: POP
// end ;
32671: LD_VAR 0 2
32675: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32676: LD_INT 0
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
32683: PPUSH
// if not unit or not building then
32684: LD_VAR 0 1
32688: NOT
32689: PUSH
32690: LD_VAR 0 2
32694: NOT
32695: OR
32696: IFFALSE 32700
// exit ;
32698: GO 32858
// x := GetX ( building ) ;
32700: LD_ADDR_VAR 0 5
32704: PUSH
32705: LD_VAR 0 2
32709: PPUSH
32710: CALL_OW 250
32714: ST_TO_ADDR
// y := GetY ( building ) ;
32715: LD_ADDR_VAR 0 6
32719: PUSH
32720: LD_VAR 0 2
32724: PPUSH
32725: CALL_OW 251
32729: ST_TO_ADDR
// for i = 0 to 5 do
32730: LD_ADDR_VAR 0 4
32734: PUSH
32735: DOUBLE
32736: LD_INT 0
32738: DEC
32739: ST_TO_ADDR
32740: LD_INT 5
32742: PUSH
32743: FOR_TO
32744: IFFALSE 32856
// begin _x := ShiftX ( x , i , 3 ) ;
32746: LD_ADDR_VAR 0 7
32750: PUSH
32751: LD_VAR 0 5
32755: PPUSH
32756: LD_VAR 0 4
32760: PPUSH
32761: LD_INT 3
32763: PPUSH
32764: CALL_OW 272
32768: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32769: LD_ADDR_VAR 0 8
32773: PUSH
32774: LD_VAR 0 6
32778: PPUSH
32779: LD_VAR 0 4
32783: PPUSH
32784: LD_INT 3
32786: PPUSH
32787: CALL_OW 273
32791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32792: LD_VAR 0 7
32796: PPUSH
32797: LD_VAR 0 8
32801: PPUSH
32802: CALL_OW 488
32806: NOT
32807: IFFALSE 32811
// continue ;
32809: GO 32743
// if HexInfo ( _x , _y ) = 0 then
32811: LD_VAR 0 7
32815: PPUSH
32816: LD_VAR 0 8
32820: PPUSH
32821: CALL_OW 428
32825: PUSH
32826: LD_INT 0
32828: EQUAL
32829: IFFALSE 32854
// begin ComMoveXY ( unit , _x , _y ) ;
32831: LD_VAR 0 1
32835: PPUSH
32836: LD_VAR 0 7
32840: PPUSH
32841: LD_VAR 0 8
32845: PPUSH
32846: CALL_OW 111
// exit ;
32850: POP
32851: POP
32852: GO 32858
// end ; end ;
32854: GO 32743
32856: POP
32857: POP
// end ;
32858: LD_VAR 0 3
32862: RET
// export function ScanBase ( side , base_area ) ; begin
32863: LD_INT 0
32865: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32866: LD_ADDR_VAR 0 3
32870: PUSH
32871: LD_VAR 0 2
32875: PPUSH
32876: LD_INT 81
32878: PUSH
32879: LD_VAR 0 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PPUSH
32888: CALL_OW 70
32892: ST_TO_ADDR
// end ;
32893: LD_VAR 0 3
32897: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32898: LD_INT 0
32900: PPUSH
32901: PPUSH
32902: PPUSH
32903: PPUSH
// result := false ;
32904: LD_ADDR_VAR 0 2
32908: PUSH
32909: LD_INT 0
32911: ST_TO_ADDR
// side := GetSide ( unit ) ;
32912: LD_ADDR_VAR 0 3
32916: PUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: CALL_OW 255
32926: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32927: LD_ADDR_VAR 0 4
32931: PUSH
32932: LD_VAR 0 1
32936: PPUSH
32937: CALL_OW 248
32941: ST_TO_ADDR
// case nat of 1 :
32942: LD_VAR 0 4
32946: PUSH
32947: LD_INT 1
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32955
32953: GO 32966
32955: POP
// tech := tech_lassight ; 2 :
32956: LD_ADDR_VAR 0 5
32960: PUSH
32961: LD_INT 12
32963: ST_TO_ADDR
32964: GO 33005
32966: LD_INT 2
32968: DOUBLE
32969: EQUAL
32970: IFTRUE 32974
32972: GO 32985
32974: POP
// tech := tech_mortar ; 3 :
32975: LD_ADDR_VAR 0 5
32979: PUSH
32980: LD_INT 41
32982: ST_TO_ADDR
32983: GO 33005
32985: LD_INT 3
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32993
32991: GO 33004
32993: POP
// tech := tech_bazooka ; end ;
32994: LD_ADDR_VAR 0 5
32998: PUSH
32999: LD_INT 44
33001: ST_TO_ADDR
33002: GO 33005
33004: POP
// if Researched ( side , tech ) then
33005: LD_VAR 0 3
33009: PPUSH
33010: LD_VAR 0 5
33014: PPUSH
33015: CALL_OW 325
33019: IFFALSE 33046
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33021: LD_ADDR_VAR 0 2
33025: PUSH
33026: LD_INT 5
33028: PUSH
33029: LD_INT 8
33031: PUSH
33032: LD_INT 9
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: PUSH
33040: LD_VAR 0 4
33044: ARRAY
33045: ST_TO_ADDR
// end ;
33046: LD_VAR 0 2
33050: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33051: LD_INT 0
33053: PPUSH
33054: PPUSH
33055: PPUSH
// if not mines then
33056: LD_VAR 0 2
33060: NOT
33061: IFFALSE 33065
// exit ;
33063: GO 33209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33065: LD_ADDR_VAR 0 5
33069: PUSH
33070: LD_INT 81
33072: PUSH
33073: LD_VAR 0 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 3
33084: PUSH
33085: LD_INT 21
33087: PUSH
33088: LD_INT 3
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PPUSH
33103: CALL_OW 69
33107: ST_TO_ADDR
// for i in mines do
33108: LD_ADDR_VAR 0 4
33112: PUSH
33113: LD_VAR 0 2
33117: PUSH
33118: FOR_IN
33119: IFFALSE 33207
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33121: LD_VAR 0 4
33125: PUSH
33126: LD_INT 1
33128: ARRAY
33129: PPUSH
33130: LD_VAR 0 4
33134: PUSH
33135: LD_INT 2
33137: ARRAY
33138: PPUSH
33139: CALL_OW 458
33143: NOT
33144: IFFALSE 33148
// continue ;
33146: GO 33118
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33148: LD_VAR 0 4
33152: PUSH
33153: LD_INT 1
33155: ARRAY
33156: PPUSH
33157: LD_VAR 0 4
33161: PUSH
33162: LD_INT 2
33164: ARRAY
33165: PPUSH
33166: CALL_OW 428
33170: PUSH
33171: LD_VAR 0 5
33175: IN
33176: IFFALSE 33205
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33178: LD_VAR 0 4
33182: PUSH
33183: LD_INT 1
33185: ARRAY
33186: PPUSH
33187: LD_VAR 0 4
33191: PUSH
33192: LD_INT 2
33194: ARRAY
33195: PPUSH
33196: LD_VAR 0 1
33200: PPUSH
33201: CALL_OW 456
// end ;
33205: GO 33118
33207: POP
33208: POP
// end ;
33209: LD_VAR 0 3
33213: RET
// export function Count ( array ) ; var i ; begin
33214: LD_INT 0
33216: PPUSH
33217: PPUSH
// result := 0 ;
33218: LD_ADDR_VAR 0 2
33222: PUSH
33223: LD_INT 0
33225: ST_TO_ADDR
// for i in array do
33226: LD_ADDR_VAR 0 3
33230: PUSH
33231: LD_VAR 0 1
33235: PUSH
33236: FOR_IN
33237: IFFALSE 33261
// if i then
33239: LD_VAR 0 3
33243: IFFALSE 33259
// result := result + 1 ;
33245: LD_ADDR_VAR 0 2
33249: PUSH
33250: LD_VAR 0 2
33254: PUSH
33255: LD_INT 1
33257: PLUS
33258: ST_TO_ADDR
33259: GO 33236
33261: POP
33262: POP
// end ;
33263: LD_VAR 0 2
33267: RET
// export function IsEmpty ( building ) ; begin
33268: LD_INT 0
33270: PPUSH
// if not building then
33271: LD_VAR 0 1
33275: NOT
33276: IFFALSE 33280
// exit ;
33278: GO 33323
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33280: LD_ADDR_VAR 0 2
33284: PUSH
33285: LD_VAR 0 1
33289: PUSH
33290: LD_INT 22
33292: PUSH
33293: LD_VAR 0 1
33297: PPUSH
33298: CALL_OW 255
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 58
33309: PUSH
33310: EMPTY
33311: LIST
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PPUSH
33317: CALL_OW 69
33321: IN
33322: ST_TO_ADDR
// end ;
33323: LD_VAR 0 2
33327: RET
// export function IsNotFull ( building ) ; begin
33328: LD_INT 0
33330: PPUSH
// if not building then
33331: LD_VAR 0 1
33335: NOT
33336: IFFALSE 33340
// exit ;
33338: GO 33359
// result := UnitsInside ( building ) < 6 ;
33340: LD_ADDR_VAR 0 2
33344: PUSH
33345: LD_VAR 0 1
33349: PPUSH
33350: CALL_OW 313
33354: PUSH
33355: LD_INT 6
33357: LESS
33358: ST_TO_ADDR
// end ;
33359: LD_VAR 0 2
33363: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33364: LD_INT 0
33366: PPUSH
33367: PPUSH
33368: PPUSH
33369: PPUSH
// tmp := [ ] ;
33370: LD_ADDR_VAR 0 3
33374: PUSH
33375: EMPTY
33376: ST_TO_ADDR
// list := [ ] ;
33377: LD_ADDR_VAR 0 5
33381: PUSH
33382: EMPTY
33383: ST_TO_ADDR
// for i = 16 to 25 do
33384: LD_ADDR_VAR 0 4
33388: PUSH
33389: DOUBLE
33390: LD_INT 16
33392: DEC
33393: ST_TO_ADDR
33394: LD_INT 25
33396: PUSH
33397: FOR_TO
33398: IFFALSE 33471
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33400: LD_ADDR_VAR 0 3
33404: PUSH
33405: LD_VAR 0 3
33409: PUSH
33410: LD_INT 22
33412: PUSH
33413: LD_VAR 0 1
33417: PPUSH
33418: CALL_OW 255
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 91
33429: PUSH
33430: LD_VAR 0 1
33434: PUSH
33435: LD_INT 6
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 30
33445: PUSH
33446: LD_VAR 0 4
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: LIST
33459: PUSH
33460: EMPTY
33461: LIST
33462: PPUSH
33463: CALL_OW 69
33467: ADD
33468: ST_TO_ADDR
33469: GO 33397
33471: POP
33472: POP
// for i = 1 to tmp do
33473: LD_ADDR_VAR 0 4
33477: PUSH
33478: DOUBLE
33479: LD_INT 1
33481: DEC
33482: ST_TO_ADDR
33483: LD_VAR 0 3
33487: PUSH
33488: FOR_TO
33489: IFFALSE 33577
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33491: LD_ADDR_VAR 0 5
33495: PUSH
33496: LD_VAR 0 5
33500: PUSH
33501: LD_VAR 0 3
33505: PUSH
33506: LD_VAR 0 4
33510: ARRAY
33511: PPUSH
33512: CALL_OW 266
33516: PUSH
33517: LD_VAR 0 3
33521: PUSH
33522: LD_VAR 0 4
33526: ARRAY
33527: PPUSH
33528: CALL_OW 250
33532: PUSH
33533: LD_VAR 0 3
33537: PUSH
33538: LD_VAR 0 4
33542: ARRAY
33543: PPUSH
33544: CALL_OW 251
33548: PUSH
33549: LD_VAR 0 3
33553: PUSH
33554: LD_VAR 0 4
33558: ARRAY
33559: PPUSH
33560: CALL_OW 254
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: PUSH
33571: EMPTY
33572: LIST
33573: ADD
33574: ST_TO_ADDR
33575: GO 33488
33577: POP
33578: POP
// result := list ;
33579: LD_ADDR_VAR 0 2
33583: PUSH
33584: LD_VAR 0 5
33588: ST_TO_ADDR
// end ;
33589: LD_VAR 0 2
33593: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33594: LD_INT 0
33596: PPUSH
33597: PPUSH
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
// if not factory then
33603: LD_VAR 0 1
33607: NOT
33608: IFFALSE 33612
// exit ;
33610: GO 34205
// if control = control_apeman then
33612: LD_VAR 0 4
33616: PUSH
33617: LD_INT 5
33619: EQUAL
33620: IFFALSE 33729
// begin tmp := UnitsInside ( factory ) ;
33622: LD_ADDR_VAR 0 8
33626: PUSH
33627: LD_VAR 0 1
33631: PPUSH
33632: CALL_OW 313
33636: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33637: LD_VAR 0 8
33641: PPUSH
33642: LD_INT 25
33644: PUSH
33645: LD_INT 12
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PPUSH
33652: CALL_OW 72
33656: NOT
33657: IFFALSE 33667
// control := control_manual ;
33659: LD_ADDR_VAR 0 4
33663: PUSH
33664: LD_INT 1
33666: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33667: LD_ADDR_VAR 0 8
33671: PUSH
33672: LD_VAR 0 1
33676: PPUSH
33677: CALL 33364 0 1
33681: ST_TO_ADDR
// if tmp then
33682: LD_VAR 0 8
33686: IFFALSE 33729
// begin for i in tmp do
33688: LD_ADDR_VAR 0 7
33692: PUSH
33693: LD_VAR 0 8
33697: PUSH
33698: FOR_IN
33699: IFFALSE 33727
// if i [ 1 ] = b_ext_radio then
33701: LD_VAR 0 7
33705: PUSH
33706: LD_INT 1
33708: ARRAY
33709: PUSH
33710: LD_INT 22
33712: EQUAL
33713: IFFALSE 33725
// begin control := control_remote ;
33715: LD_ADDR_VAR 0 4
33719: PUSH
33720: LD_INT 2
33722: ST_TO_ADDR
// break ;
33723: GO 33727
// end ;
33725: GO 33698
33727: POP
33728: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33729: LD_VAR 0 1
33733: PPUSH
33734: LD_VAR 0 2
33738: PPUSH
33739: LD_VAR 0 3
33743: PPUSH
33744: LD_VAR 0 4
33748: PPUSH
33749: LD_VAR 0 5
33753: PPUSH
33754: CALL_OW 448
33758: IFFALSE 33793
// begin result := [ chassis , engine , control , weapon ] ;
33760: LD_ADDR_VAR 0 6
33764: PUSH
33765: LD_VAR 0 2
33769: PUSH
33770: LD_VAR 0 3
33774: PUSH
33775: LD_VAR 0 4
33779: PUSH
33780: LD_VAR 0 5
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: ST_TO_ADDR
// exit ;
33791: GO 34205
// end ; _chassis := AvailableChassisList ( factory ) ;
33793: LD_ADDR_VAR 0 9
33797: PUSH
33798: LD_VAR 0 1
33802: PPUSH
33803: CALL_OW 475
33807: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33808: LD_ADDR_VAR 0 11
33812: PUSH
33813: LD_VAR 0 1
33817: PPUSH
33818: CALL_OW 476
33822: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33823: LD_ADDR_VAR 0 12
33827: PUSH
33828: LD_VAR 0 1
33832: PPUSH
33833: CALL_OW 477
33837: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33838: LD_ADDR_VAR 0 10
33842: PUSH
33843: LD_VAR 0 1
33847: PPUSH
33848: CALL_OW 478
33852: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33853: LD_VAR 0 9
33857: NOT
33858: PUSH
33859: LD_VAR 0 11
33863: NOT
33864: OR
33865: PUSH
33866: LD_VAR 0 12
33870: NOT
33871: OR
33872: PUSH
33873: LD_VAR 0 10
33877: NOT
33878: OR
33879: IFFALSE 33914
// begin result := [ chassis , engine , control , weapon ] ;
33881: LD_ADDR_VAR 0 6
33885: PUSH
33886: LD_VAR 0 2
33890: PUSH
33891: LD_VAR 0 3
33895: PUSH
33896: LD_VAR 0 4
33900: PUSH
33901: LD_VAR 0 5
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: ST_TO_ADDR
// exit ;
33912: GO 34205
// end ; if not chassis in _chassis then
33914: LD_VAR 0 2
33918: PUSH
33919: LD_VAR 0 9
33923: IN
33924: NOT
33925: IFFALSE 33951
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33927: LD_ADDR_VAR 0 2
33931: PUSH
33932: LD_VAR 0 9
33936: PUSH
33937: LD_INT 1
33939: PPUSH
33940: LD_VAR 0 9
33944: PPUSH
33945: CALL_OW 12
33949: ARRAY
33950: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 3
33960: PPUSH
33961: CALL 34210 0 2
33965: NOT
33966: IFFALSE 34025
// repeat engine := _engine [ 1 ] ;
33968: LD_ADDR_VAR 0 3
33972: PUSH
33973: LD_VAR 0 11
33977: PUSH
33978: LD_INT 1
33980: ARRAY
33981: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33982: LD_ADDR_VAR 0 11
33986: PUSH
33987: LD_VAR 0 11
33991: PPUSH
33992: LD_INT 1
33994: PPUSH
33995: CALL_OW 3
33999: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34000: LD_VAR 0 2
34004: PPUSH
34005: LD_VAR 0 3
34009: PPUSH
34010: CALL 34210 0 2
34014: PUSH
34015: LD_VAR 0 11
34019: PUSH
34020: EMPTY
34021: EQUAL
34022: OR
34023: IFFALSE 33968
// if not control in _control then
34025: LD_VAR 0 4
34029: PUSH
34030: LD_VAR 0 12
34034: IN
34035: NOT
34036: IFFALSE 34062
// control := _control [ rand ( 1 , _control ) ] ;
34038: LD_ADDR_VAR 0 4
34042: PUSH
34043: LD_VAR 0 12
34047: PUSH
34048: LD_INT 1
34050: PPUSH
34051: LD_VAR 0 12
34055: PPUSH
34056: CALL_OW 12
34060: ARRAY
34061: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34062: LD_VAR 0 2
34066: PPUSH
34067: LD_VAR 0 5
34071: PPUSH
34072: CALL 34430 0 2
34076: NOT
34077: IFFALSE 34136
// repeat weapon := _weapon [ 1 ] ;
34079: LD_ADDR_VAR 0 5
34083: PUSH
34084: LD_VAR 0 10
34088: PUSH
34089: LD_INT 1
34091: ARRAY
34092: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34093: LD_ADDR_VAR 0 10
34097: PUSH
34098: LD_VAR 0 10
34102: PPUSH
34103: LD_INT 1
34105: PPUSH
34106: CALL_OW 3
34110: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34111: LD_VAR 0 2
34115: PPUSH
34116: LD_VAR 0 5
34120: PPUSH
34121: CALL 34430 0 2
34125: PUSH
34126: LD_VAR 0 10
34130: PUSH
34131: EMPTY
34132: EQUAL
34133: OR
34134: IFFALSE 34079
// result := [ ] ;
34136: LD_ADDR_VAR 0 6
34140: PUSH
34141: EMPTY
34142: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34143: LD_VAR 0 1
34147: PPUSH
34148: LD_VAR 0 2
34152: PPUSH
34153: LD_VAR 0 3
34157: PPUSH
34158: LD_VAR 0 4
34162: PPUSH
34163: LD_VAR 0 5
34167: PPUSH
34168: CALL_OW 448
34172: IFFALSE 34205
// result := [ chassis , engine , control , weapon ] ;
34174: LD_ADDR_VAR 0 6
34178: PUSH
34179: LD_VAR 0 2
34183: PUSH
34184: LD_VAR 0 3
34188: PUSH
34189: LD_VAR 0 4
34193: PUSH
34194: LD_VAR 0 5
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: ST_TO_ADDR
// end ;
34205: LD_VAR 0 6
34209: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34210: LD_INT 0
34212: PPUSH
// if not chassis or not engine then
34213: LD_VAR 0 1
34217: NOT
34218: PUSH
34219: LD_VAR 0 2
34223: NOT
34224: OR
34225: IFFALSE 34229
// exit ;
34227: GO 34425
// case engine of engine_solar :
34229: LD_VAR 0 2
34233: PUSH
34234: LD_INT 2
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 34280
34242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34243: LD_ADDR_VAR 0 3
34247: PUSH
34248: LD_INT 11
34250: PUSH
34251: LD_INT 12
34253: PUSH
34254: LD_INT 13
34256: PUSH
34257: LD_INT 14
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 3
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: ST_TO_ADDR
34278: GO 34409
34280: LD_INT 1
34282: DOUBLE
34283: EQUAL
34284: IFTRUE 34288
34286: GO 34350
34288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34289: LD_ADDR_VAR 0 3
34293: PUSH
34294: LD_INT 11
34296: PUSH
34297: LD_INT 12
34299: PUSH
34300: LD_INT 13
34302: PUSH
34303: LD_INT 14
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: LD_INT 4
34317: PUSH
34318: LD_INT 5
34320: PUSH
34321: LD_INT 21
34323: PUSH
34324: LD_INT 23
34326: PUSH
34327: LD_INT 22
34329: PUSH
34330: LD_INT 24
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: ST_TO_ADDR
34348: GO 34409
34350: LD_INT 3
34352: DOUBLE
34353: EQUAL
34354: IFTRUE 34358
34356: GO 34408
34358: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34359: LD_ADDR_VAR 0 3
34363: PUSH
34364: LD_INT 13
34366: PUSH
34367: LD_INT 14
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: LD_INT 3
34375: PUSH
34376: LD_INT 4
34378: PUSH
34379: LD_INT 5
34381: PUSH
34382: LD_INT 21
34384: PUSH
34385: LD_INT 22
34387: PUSH
34388: LD_INT 23
34390: PUSH
34391: LD_INT 24
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: ST_TO_ADDR
34406: GO 34409
34408: POP
// result := ( chassis in result ) ;
34409: LD_ADDR_VAR 0 3
34413: PUSH
34414: LD_VAR 0 1
34418: PUSH
34419: LD_VAR 0 3
34423: IN
34424: ST_TO_ADDR
// end ;
34425: LD_VAR 0 3
34429: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34430: LD_INT 0
34432: PPUSH
// if not chassis or not weapon then
34433: LD_VAR 0 1
34437: NOT
34438: PUSH
34439: LD_VAR 0 2
34443: NOT
34444: OR
34445: IFFALSE 34449
// exit ;
34447: GO 35475
// case weapon of us_machine_gun :
34449: LD_VAR 0 2
34453: PUSH
34454: LD_INT 2
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34492
34462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: LD_INT 2
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: LD_INT 4
34479: PUSH
34480: LD_INT 5
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: ST_TO_ADDR
34490: GO 35459
34492: LD_INT 3
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34500
34498: GO 34530
34500: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34501: LD_ADDR_VAR 0 3
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: LD_INT 3
34514: PUSH
34515: LD_INT 4
34517: PUSH
34518: LD_INT 5
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: ST_TO_ADDR
34528: GO 35459
34530: LD_INT 11
34532: DOUBLE
34533: EQUAL
34534: IFTRUE 34538
34536: GO 34568
34538: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34539: LD_ADDR_VAR 0 3
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: LD_INT 2
34549: PUSH
34550: LD_INT 3
34552: PUSH
34553: LD_INT 4
34555: PUSH
34556: LD_INT 5
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: ST_TO_ADDR
34566: GO 35459
34568: LD_INT 4
34570: DOUBLE
34571: EQUAL
34572: IFTRUE 34576
34574: GO 34602
34576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34577: LD_ADDR_VAR 0 3
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: LD_INT 4
34590: PUSH
34591: LD_INT 5
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: ST_TO_ADDR
34600: GO 35459
34602: LD_INT 5
34604: DOUBLE
34605: EQUAL
34606: IFTRUE 34610
34608: GO 34636
34610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34611: LD_ADDR_VAR 0 3
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: LD_INT 3
34621: PUSH
34622: LD_INT 4
34624: PUSH
34625: LD_INT 5
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
34634: GO 35459
34636: LD_INT 9
34638: DOUBLE
34639: EQUAL
34640: IFTRUE 34644
34642: GO 34670
34644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: LD_INT 4
34658: PUSH
34659: LD_INT 5
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
34668: GO 35459
34670: LD_INT 7
34672: DOUBLE
34673: EQUAL
34674: IFTRUE 34678
34676: GO 34704
34678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34679: LD_ADDR_VAR 0 3
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: LD_INT 4
34692: PUSH
34693: LD_INT 5
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: ST_TO_ADDR
34702: GO 35459
34704: LD_INT 12
34706: DOUBLE
34707: EQUAL
34708: IFTRUE 34712
34710: GO 34738
34712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34713: LD_ADDR_VAR 0 3
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: LD_INT 3
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: LD_INT 5
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: ST_TO_ADDR
34736: GO 35459
34738: LD_INT 13
34740: DOUBLE
34741: EQUAL
34742: IFTRUE 34746
34744: GO 34772
34746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34747: LD_ADDR_VAR 0 3
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: LD_INT 3
34757: PUSH
34758: LD_INT 4
34760: PUSH
34761: LD_INT 5
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: ST_TO_ADDR
34770: GO 35459
34772: LD_INT 14
34774: DOUBLE
34775: EQUAL
34776: IFTRUE 34780
34778: GO 34798
34780: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34781: LD_ADDR_VAR 0 3
34785: PUSH
34786: LD_INT 4
34788: PUSH
34789: LD_INT 5
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: ST_TO_ADDR
34796: GO 35459
34798: LD_INT 6
34800: DOUBLE
34801: EQUAL
34802: IFTRUE 34806
34804: GO 34824
34806: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34807: LD_ADDR_VAR 0 3
34811: PUSH
34812: LD_INT 4
34814: PUSH
34815: LD_INT 5
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: ST_TO_ADDR
34822: GO 35459
34824: LD_INT 10
34826: DOUBLE
34827: EQUAL
34828: IFTRUE 34832
34830: GO 34850
34832: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34833: LD_ADDR_VAR 0 3
34837: PUSH
34838: LD_INT 4
34840: PUSH
34841: LD_INT 5
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: ST_TO_ADDR
34848: GO 35459
34850: LD_INT 22
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34884
34858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: LD_INT 11
34866: PUSH
34867: LD_INT 12
34869: PUSH
34870: LD_INT 13
34872: PUSH
34873: LD_INT 14
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
34882: GO 35459
34884: LD_INT 23
34886: DOUBLE
34887: EQUAL
34888: IFTRUE 34892
34890: GO 34918
34892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34893: LD_ADDR_VAR 0 3
34897: PUSH
34898: LD_INT 11
34900: PUSH
34901: LD_INT 12
34903: PUSH
34904: LD_INT 13
34906: PUSH
34907: LD_INT 14
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
34916: GO 35459
34918: LD_INT 24
34920: DOUBLE
34921: EQUAL
34922: IFTRUE 34926
34924: GO 34952
34926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34927: LD_ADDR_VAR 0 3
34931: PUSH
34932: LD_INT 11
34934: PUSH
34935: LD_INT 12
34937: PUSH
34938: LD_INT 13
34940: PUSH
34941: LD_INT 14
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: ST_TO_ADDR
34950: GO 35459
34952: LD_INT 30
34954: DOUBLE
34955: EQUAL
34956: IFTRUE 34960
34958: GO 34986
34960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34961: LD_ADDR_VAR 0 3
34965: PUSH
34966: LD_INT 11
34968: PUSH
34969: LD_INT 12
34971: PUSH
34972: LD_INT 13
34974: PUSH
34975: LD_INT 14
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: ST_TO_ADDR
34984: GO 35459
34986: LD_INT 25
34988: DOUBLE
34989: EQUAL
34990: IFTRUE 34994
34992: GO 35012
34994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34995: LD_ADDR_VAR 0 3
34999: PUSH
35000: LD_INT 13
35002: PUSH
35003: LD_INT 14
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: ST_TO_ADDR
35010: GO 35459
35012: LD_INT 27
35014: DOUBLE
35015: EQUAL
35016: IFTRUE 35020
35018: GO 35038
35020: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35021: LD_ADDR_VAR 0 3
35025: PUSH
35026: LD_INT 13
35028: PUSH
35029: LD_INT 14
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: ST_TO_ADDR
35036: GO 35459
35038: LD_INT 28
35040: DOUBLE
35041: EQUAL
35042: IFTRUE 35046
35044: GO 35064
35046: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35047: LD_ADDR_VAR 0 3
35051: PUSH
35052: LD_INT 13
35054: PUSH
35055: LD_INT 14
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: ST_TO_ADDR
35062: GO 35459
35064: LD_INT 29
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35072
35070: GO 35090
35072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35073: LD_ADDR_VAR 0 3
35077: PUSH
35078: LD_INT 13
35080: PUSH
35081: LD_INT 14
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: ST_TO_ADDR
35088: GO 35459
35090: LD_INT 31
35092: DOUBLE
35093: EQUAL
35094: IFTRUE 35098
35096: GO 35116
35098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35099: LD_ADDR_VAR 0 3
35103: PUSH
35104: LD_INT 13
35106: PUSH
35107: LD_INT 14
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: ST_TO_ADDR
35114: GO 35459
35116: LD_INT 26
35118: DOUBLE
35119: EQUAL
35120: IFTRUE 35124
35122: GO 35142
35124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35125: LD_ADDR_VAR 0 3
35129: PUSH
35130: LD_INT 13
35132: PUSH
35133: LD_INT 14
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: ST_TO_ADDR
35140: GO 35459
35142: LD_INT 42
35144: DOUBLE
35145: EQUAL
35146: IFTRUE 35150
35148: GO 35176
35150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35151: LD_ADDR_VAR 0 3
35155: PUSH
35156: LD_INT 21
35158: PUSH
35159: LD_INT 22
35161: PUSH
35162: LD_INT 23
35164: PUSH
35165: LD_INT 24
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: ST_TO_ADDR
35174: GO 35459
35176: LD_INT 43
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35184
35182: GO 35210
35184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35185: LD_ADDR_VAR 0 3
35189: PUSH
35190: LD_INT 21
35192: PUSH
35193: LD_INT 22
35195: PUSH
35196: LD_INT 23
35198: PUSH
35199: LD_INT 24
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
35208: GO 35459
35210: LD_INT 44
35212: DOUBLE
35213: EQUAL
35214: IFTRUE 35218
35216: GO 35244
35218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35219: LD_ADDR_VAR 0 3
35223: PUSH
35224: LD_INT 21
35226: PUSH
35227: LD_INT 22
35229: PUSH
35230: LD_INT 23
35232: PUSH
35233: LD_INT 24
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
35242: GO 35459
35244: LD_INT 45
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35252
35250: GO 35278
35252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35253: LD_ADDR_VAR 0 3
35257: PUSH
35258: LD_INT 21
35260: PUSH
35261: LD_INT 22
35263: PUSH
35264: LD_INT 23
35266: PUSH
35267: LD_INT 24
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: ST_TO_ADDR
35276: GO 35459
35278: LD_INT 49
35280: DOUBLE
35281: EQUAL
35282: IFTRUE 35286
35284: GO 35312
35286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35287: LD_ADDR_VAR 0 3
35291: PUSH
35292: LD_INT 21
35294: PUSH
35295: LD_INT 22
35297: PUSH
35298: LD_INT 23
35300: PUSH
35301: LD_INT 24
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: ST_TO_ADDR
35310: GO 35459
35312: LD_INT 51
35314: DOUBLE
35315: EQUAL
35316: IFTRUE 35320
35318: GO 35346
35320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35321: LD_ADDR_VAR 0 3
35325: PUSH
35326: LD_INT 21
35328: PUSH
35329: LD_INT 22
35331: PUSH
35332: LD_INT 23
35334: PUSH
35335: LD_INT 24
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
35344: GO 35459
35346: LD_INT 52
35348: DOUBLE
35349: EQUAL
35350: IFTRUE 35354
35352: GO 35380
35354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35355: LD_ADDR_VAR 0 3
35359: PUSH
35360: LD_INT 21
35362: PUSH
35363: LD_INT 22
35365: PUSH
35366: LD_INT 23
35368: PUSH
35369: LD_INT 24
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
35378: GO 35459
35380: LD_INT 53
35382: DOUBLE
35383: EQUAL
35384: IFTRUE 35388
35386: GO 35406
35388: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35389: LD_ADDR_VAR 0 3
35393: PUSH
35394: LD_INT 23
35396: PUSH
35397: LD_INT 24
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: ST_TO_ADDR
35404: GO 35459
35406: LD_INT 46
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35432
35414: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35415: LD_ADDR_VAR 0 3
35419: PUSH
35420: LD_INT 23
35422: PUSH
35423: LD_INT 24
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: ST_TO_ADDR
35430: GO 35459
35432: LD_INT 47
35434: DOUBLE
35435: EQUAL
35436: IFTRUE 35440
35438: GO 35458
35440: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35441: LD_ADDR_VAR 0 3
35445: PUSH
35446: LD_INT 23
35448: PUSH
35449: LD_INT 24
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: ST_TO_ADDR
35456: GO 35459
35458: POP
// result := ( chassis in result ) ;
35459: LD_ADDR_VAR 0 3
35463: PUSH
35464: LD_VAR 0 1
35468: PUSH
35469: LD_VAR 0 3
35473: IN
35474: ST_TO_ADDR
// end ;
35475: LD_VAR 0 3
35479: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35480: LD_INT 0
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
// result := array ;
35489: LD_ADDR_VAR 0 5
35493: PUSH
35494: LD_VAR 0 1
35498: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35499: LD_VAR 0 1
35503: NOT
35504: PUSH
35505: LD_VAR 0 2
35509: NOT
35510: OR
35511: PUSH
35512: LD_VAR 0 3
35516: NOT
35517: OR
35518: PUSH
35519: LD_VAR 0 2
35523: PUSH
35524: LD_VAR 0 1
35528: GREATER
35529: OR
35530: PUSH
35531: LD_VAR 0 3
35535: PUSH
35536: LD_VAR 0 1
35540: GREATER
35541: OR
35542: IFFALSE 35546
// exit ;
35544: GO 35842
// if direction then
35546: LD_VAR 0 4
35550: IFFALSE 35614
// begin d := 1 ;
35552: LD_ADDR_VAR 0 9
35556: PUSH
35557: LD_INT 1
35559: ST_TO_ADDR
// if i_from > i_to then
35560: LD_VAR 0 2
35564: PUSH
35565: LD_VAR 0 3
35569: GREATER
35570: IFFALSE 35596
// length := ( array - i_from ) + i_to else
35572: LD_ADDR_VAR 0 11
35576: PUSH
35577: LD_VAR 0 1
35581: PUSH
35582: LD_VAR 0 2
35586: MINUS
35587: PUSH
35588: LD_VAR 0 3
35592: PLUS
35593: ST_TO_ADDR
35594: GO 35612
// length := i_to - i_from ;
35596: LD_ADDR_VAR 0 11
35600: PUSH
35601: LD_VAR 0 3
35605: PUSH
35606: LD_VAR 0 2
35610: MINUS
35611: ST_TO_ADDR
// end else
35612: GO 35675
// begin d := - 1 ;
35614: LD_ADDR_VAR 0 9
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: ST_TO_ADDR
// if i_from > i_to then
35623: LD_VAR 0 2
35627: PUSH
35628: LD_VAR 0 3
35632: GREATER
35633: IFFALSE 35653
// length := i_from - i_to else
35635: LD_ADDR_VAR 0 11
35639: PUSH
35640: LD_VAR 0 2
35644: PUSH
35645: LD_VAR 0 3
35649: MINUS
35650: ST_TO_ADDR
35651: GO 35675
// length := ( array - i_to ) + i_from ;
35653: LD_ADDR_VAR 0 11
35657: PUSH
35658: LD_VAR 0 1
35662: PUSH
35663: LD_VAR 0 3
35667: MINUS
35668: PUSH
35669: LD_VAR 0 2
35673: PLUS
35674: ST_TO_ADDR
// end ; if not length then
35675: LD_VAR 0 11
35679: NOT
35680: IFFALSE 35684
// exit ;
35682: GO 35842
// tmp := array ;
35684: LD_ADDR_VAR 0 10
35688: PUSH
35689: LD_VAR 0 1
35693: ST_TO_ADDR
// for i = 1 to length do
35694: LD_ADDR_VAR 0 6
35698: PUSH
35699: DOUBLE
35700: LD_INT 1
35702: DEC
35703: ST_TO_ADDR
35704: LD_VAR 0 11
35708: PUSH
35709: FOR_TO
35710: IFFALSE 35830
// begin for j = 1 to array do
35712: LD_ADDR_VAR 0 7
35716: PUSH
35717: DOUBLE
35718: LD_INT 1
35720: DEC
35721: ST_TO_ADDR
35722: LD_VAR 0 1
35726: PUSH
35727: FOR_TO
35728: IFFALSE 35816
// begin k := j + d ;
35730: LD_ADDR_VAR 0 8
35734: PUSH
35735: LD_VAR 0 7
35739: PUSH
35740: LD_VAR 0 9
35744: PLUS
35745: ST_TO_ADDR
// if k > array then
35746: LD_VAR 0 8
35750: PUSH
35751: LD_VAR 0 1
35755: GREATER
35756: IFFALSE 35766
// k := 1 ;
35758: LD_ADDR_VAR 0 8
35762: PUSH
35763: LD_INT 1
35765: ST_TO_ADDR
// if not k then
35766: LD_VAR 0 8
35770: NOT
35771: IFFALSE 35783
// k := array ;
35773: LD_ADDR_VAR 0 8
35777: PUSH
35778: LD_VAR 0 1
35782: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35783: LD_ADDR_VAR 0 10
35787: PUSH
35788: LD_VAR 0 10
35792: PPUSH
35793: LD_VAR 0 8
35797: PPUSH
35798: LD_VAR 0 1
35802: PUSH
35803: LD_VAR 0 7
35807: ARRAY
35808: PPUSH
35809: CALL_OW 1
35813: ST_TO_ADDR
// end ;
35814: GO 35727
35816: POP
35817: POP
// array := tmp ;
35818: LD_ADDR_VAR 0 1
35822: PUSH
35823: LD_VAR 0 10
35827: ST_TO_ADDR
// end ;
35828: GO 35709
35830: POP
35831: POP
// result := array ;
35832: LD_ADDR_VAR 0 5
35836: PUSH
35837: LD_VAR 0 1
35841: ST_TO_ADDR
// end ;
35842: LD_VAR 0 5
35846: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35847: LD_INT 0
35849: PPUSH
35850: PPUSH
// result := 0 ;
35851: LD_ADDR_VAR 0 3
35855: PUSH
35856: LD_INT 0
35858: ST_TO_ADDR
// if not array or not value in array then
35859: LD_VAR 0 1
35863: NOT
35864: PUSH
35865: LD_VAR 0 2
35869: PUSH
35870: LD_VAR 0 1
35874: IN
35875: NOT
35876: OR
35877: IFFALSE 35881
// exit ;
35879: GO 35935
// for i = 1 to array do
35881: LD_ADDR_VAR 0 4
35885: PUSH
35886: DOUBLE
35887: LD_INT 1
35889: DEC
35890: ST_TO_ADDR
35891: LD_VAR 0 1
35895: PUSH
35896: FOR_TO
35897: IFFALSE 35933
// if value = array [ i ] then
35899: LD_VAR 0 2
35903: PUSH
35904: LD_VAR 0 1
35908: PUSH
35909: LD_VAR 0 4
35913: ARRAY
35914: EQUAL
35915: IFFALSE 35931
// begin result := i ;
35917: LD_ADDR_VAR 0 3
35921: PUSH
35922: LD_VAR 0 4
35926: ST_TO_ADDR
// exit ;
35927: POP
35928: POP
35929: GO 35935
// end ;
35931: GO 35896
35933: POP
35934: POP
// end ;
35935: LD_VAR 0 3
35939: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35940: LD_INT 0
35942: PPUSH
// vc_chassis := chassis ;
35943: LD_ADDR_OWVAR 37
35947: PUSH
35948: LD_VAR 0 1
35952: ST_TO_ADDR
// vc_engine := engine ;
35953: LD_ADDR_OWVAR 39
35957: PUSH
35958: LD_VAR 0 2
35962: ST_TO_ADDR
// vc_control := control ;
35963: LD_ADDR_OWVAR 38
35967: PUSH
35968: LD_VAR 0 3
35972: ST_TO_ADDR
// vc_weapon := weapon ;
35973: LD_ADDR_OWVAR 40
35977: PUSH
35978: LD_VAR 0 4
35982: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35983: LD_ADDR_OWVAR 41
35987: PUSH
35988: LD_VAR 0 5
35992: ST_TO_ADDR
// end ;
35993: LD_VAR 0 6
35997: RET
// export function WantPlant ( unit ) ; var task ; begin
35998: LD_INT 0
36000: PPUSH
36001: PPUSH
// result := false ;
36002: LD_ADDR_VAR 0 2
36006: PUSH
36007: LD_INT 0
36009: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36010: LD_ADDR_VAR 0 3
36014: PUSH
36015: LD_VAR 0 1
36019: PPUSH
36020: CALL_OW 437
36024: ST_TO_ADDR
// if task then
36025: LD_VAR 0 3
36029: IFFALSE 36057
// if task [ 1 ] [ 1 ] = p then
36031: LD_VAR 0 3
36035: PUSH
36036: LD_INT 1
36038: ARRAY
36039: PUSH
36040: LD_INT 1
36042: ARRAY
36043: PUSH
36044: LD_STRING p
36046: EQUAL
36047: IFFALSE 36057
// result := true ;
36049: LD_ADDR_VAR 0 2
36053: PUSH
36054: LD_INT 1
36056: ST_TO_ADDR
// end ;
36057: LD_VAR 0 2
36061: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36062: LD_INT 0
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
// if pos < 1 then
36068: LD_VAR 0 2
36072: PUSH
36073: LD_INT 1
36075: LESS
36076: IFFALSE 36080
// exit ;
36078: GO 36383
// if pos = 1 then
36080: LD_VAR 0 2
36084: PUSH
36085: LD_INT 1
36087: EQUAL
36088: IFFALSE 36121
// result := Replace ( arr , pos [ 1 ] , value ) else
36090: LD_ADDR_VAR 0 4
36094: PUSH
36095: LD_VAR 0 1
36099: PPUSH
36100: LD_VAR 0 2
36104: PUSH
36105: LD_INT 1
36107: ARRAY
36108: PPUSH
36109: LD_VAR 0 3
36113: PPUSH
36114: CALL_OW 1
36118: ST_TO_ADDR
36119: GO 36383
// begin tmp := arr ;
36121: LD_ADDR_VAR 0 6
36125: PUSH
36126: LD_VAR 0 1
36130: ST_TO_ADDR
// s_arr := [ tmp ] ;
36131: LD_ADDR_VAR 0 7
36135: PUSH
36136: LD_VAR 0 6
36140: PUSH
36141: EMPTY
36142: LIST
36143: ST_TO_ADDR
// for i = 1 to pos - 1 do
36144: LD_ADDR_VAR 0 5
36148: PUSH
36149: DOUBLE
36150: LD_INT 1
36152: DEC
36153: ST_TO_ADDR
36154: LD_VAR 0 2
36158: PUSH
36159: LD_INT 1
36161: MINUS
36162: PUSH
36163: FOR_TO
36164: IFFALSE 36209
// begin tmp := tmp [ pos [ i ] ] ;
36166: LD_ADDR_VAR 0 6
36170: PUSH
36171: LD_VAR 0 6
36175: PUSH
36176: LD_VAR 0 2
36180: PUSH
36181: LD_VAR 0 5
36185: ARRAY
36186: ARRAY
36187: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36188: LD_ADDR_VAR 0 7
36192: PUSH
36193: LD_VAR 0 7
36197: PUSH
36198: LD_VAR 0 6
36202: PUSH
36203: EMPTY
36204: LIST
36205: ADD
36206: ST_TO_ADDR
// end ;
36207: GO 36163
36209: POP
36210: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36211: LD_ADDR_VAR 0 6
36215: PUSH
36216: LD_VAR 0 6
36220: PPUSH
36221: LD_VAR 0 2
36225: PUSH
36226: LD_VAR 0 2
36230: ARRAY
36231: PPUSH
36232: LD_VAR 0 3
36236: PPUSH
36237: CALL_OW 1
36241: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36242: LD_ADDR_VAR 0 7
36246: PUSH
36247: LD_VAR 0 7
36251: PPUSH
36252: LD_VAR 0 7
36256: PPUSH
36257: LD_VAR 0 6
36261: PPUSH
36262: CALL_OW 1
36266: ST_TO_ADDR
// for i = s_arr downto 2 do
36267: LD_ADDR_VAR 0 5
36271: PUSH
36272: DOUBLE
36273: LD_VAR 0 7
36277: INC
36278: ST_TO_ADDR
36279: LD_INT 2
36281: PUSH
36282: FOR_DOWNTO
36283: IFFALSE 36367
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36285: LD_ADDR_VAR 0 6
36289: PUSH
36290: LD_VAR 0 7
36294: PUSH
36295: LD_VAR 0 5
36299: PUSH
36300: LD_INT 1
36302: MINUS
36303: ARRAY
36304: PPUSH
36305: LD_VAR 0 2
36309: PUSH
36310: LD_VAR 0 5
36314: PUSH
36315: LD_INT 1
36317: MINUS
36318: ARRAY
36319: PPUSH
36320: LD_VAR 0 7
36324: PUSH
36325: LD_VAR 0 5
36329: ARRAY
36330: PPUSH
36331: CALL_OW 1
36335: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36336: LD_ADDR_VAR 0 7
36340: PUSH
36341: LD_VAR 0 7
36345: PPUSH
36346: LD_VAR 0 5
36350: PUSH
36351: LD_INT 1
36353: MINUS
36354: PPUSH
36355: LD_VAR 0 6
36359: PPUSH
36360: CALL_OW 1
36364: ST_TO_ADDR
// end ;
36365: GO 36282
36367: POP
36368: POP
// result := s_arr [ 1 ] ;
36369: LD_ADDR_VAR 0 4
36373: PUSH
36374: LD_VAR 0 7
36378: PUSH
36379: LD_INT 1
36381: ARRAY
36382: ST_TO_ADDR
// end ; end ;
36383: LD_VAR 0 4
36387: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36388: LD_INT 0
36390: PPUSH
36391: PPUSH
// if not list then
36392: LD_VAR 0 1
36396: NOT
36397: IFFALSE 36401
// exit ;
36399: GO 36492
// i := list [ pos1 ] ;
36401: LD_ADDR_VAR 0 5
36405: PUSH
36406: LD_VAR 0 1
36410: PUSH
36411: LD_VAR 0 2
36415: ARRAY
36416: ST_TO_ADDR
// if not i then
36417: LD_VAR 0 5
36421: NOT
36422: IFFALSE 36426
// exit ;
36424: GO 36492
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36426: LD_ADDR_VAR 0 1
36430: PUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: LD_VAR 0 2
36440: PPUSH
36441: LD_VAR 0 1
36445: PUSH
36446: LD_VAR 0 3
36450: ARRAY
36451: PPUSH
36452: CALL_OW 1
36456: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36457: LD_ADDR_VAR 0 1
36461: PUSH
36462: LD_VAR 0 1
36466: PPUSH
36467: LD_VAR 0 3
36471: PPUSH
36472: LD_VAR 0 5
36476: PPUSH
36477: CALL_OW 1
36481: ST_TO_ADDR
// result := list ;
36482: LD_ADDR_VAR 0 4
36486: PUSH
36487: LD_VAR 0 1
36491: ST_TO_ADDR
// end ;
36492: LD_VAR 0 4
36496: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36497: LD_INT 0
36499: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36500: LD_ADDR_VAR 0 5
36504: PUSH
36505: LD_VAR 0 1
36509: PPUSH
36510: CALL_OW 250
36514: PPUSH
36515: LD_VAR 0 1
36519: PPUSH
36520: CALL_OW 251
36524: PPUSH
36525: LD_VAR 0 2
36529: PPUSH
36530: LD_VAR 0 3
36534: PPUSH
36535: LD_VAR 0 4
36539: PPUSH
36540: CALL 36550 0 5
36544: ST_TO_ADDR
// end ;
36545: LD_VAR 0 5
36549: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36550: LD_INT 0
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
// if not list then
36556: LD_VAR 0 3
36560: NOT
36561: IFFALSE 36565
// exit ;
36563: GO 36953
// result := [ ] ;
36565: LD_ADDR_VAR 0 6
36569: PUSH
36570: EMPTY
36571: ST_TO_ADDR
// for i in list do
36572: LD_ADDR_VAR 0 7
36576: PUSH
36577: LD_VAR 0 3
36581: PUSH
36582: FOR_IN
36583: IFFALSE 36785
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36585: LD_ADDR_VAR 0 9
36589: PUSH
36590: LD_VAR 0 7
36594: PPUSH
36595: LD_VAR 0 1
36599: PPUSH
36600: LD_VAR 0 2
36604: PPUSH
36605: CALL_OW 297
36609: ST_TO_ADDR
// if not result then
36610: LD_VAR 0 6
36614: NOT
36615: IFFALSE 36641
// result := [ [ i , tmp ] ] else
36617: LD_ADDR_VAR 0 6
36621: PUSH
36622: LD_VAR 0 7
36626: PUSH
36627: LD_VAR 0 9
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: EMPTY
36637: LIST
36638: ST_TO_ADDR
36639: GO 36783
// begin if result [ result ] [ 2 ] < tmp then
36641: LD_VAR 0 6
36645: PUSH
36646: LD_VAR 0 6
36650: ARRAY
36651: PUSH
36652: LD_INT 2
36654: ARRAY
36655: PUSH
36656: LD_VAR 0 9
36660: LESS
36661: IFFALSE 36703
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36663: LD_ADDR_VAR 0 6
36667: PUSH
36668: LD_VAR 0 6
36672: PPUSH
36673: LD_VAR 0 6
36677: PUSH
36678: LD_INT 1
36680: PLUS
36681: PPUSH
36682: LD_VAR 0 7
36686: PUSH
36687: LD_VAR 0 9
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PPUSH
36696: CALL_OW 2
36700: ST_TO_ADDR
36701: GO 36783
// for j = 1 to result do
36703: LD_ADDR_VAR 0 8
36707: PUSH
36708: DOUBLE
36709: LD_INT 1
36711: DEC
36712: ST_TO_ADDR
36713: LD_VAR 0 6
36717: PUSH
36718: FOR_TO
36719: IFFALSE 36781
// begin if tmp < result [ j ] [ 2 ] then
36721: LD_VAR 0 9
36725: PUSH
36726: LD_VAR 0 6
36730: PUSH
36731: LD_VAR 0 8
36735: ARRAY
36736: PUSH
36737: LD_INT 2
36739: ARRAY
36740: LESS
36741: IFFALSE 36779
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36743: LD_ADDR_VAR 0 6
36747: PUSH
36748: LD_VAR 0 6
36752: PPUSH
36753: LD_VAR 0 8
36757: PPUSH
36758: LD_VAR 0 7
36762: PUSH
36763: LD_VAR 0 9
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PPUSH
36772: CALL_OW 2
36776: ST_TO_ADDR
// break ;
36777: GO 36781
// end ; end ;
36779: GO 36718
36781: POP
36782: POP
// end ; end ;
36783: GO 36582
36785: POP
36786: POP
// if result and not asc then
36787: LD_VAR 0 6
36791: PUSH
36792: LD_VAR 0 4
36796: NOT
36797: AND
36798: IFFALSE 36873
// begin tmp := result ;
36800: LD_ADDR_VAR 0 9
36804: PUSH
36805: LD_VAR 0 6
36809: ST_TO_ADDR
// for i = tmp downto 1 do
36810: LD_ADDR_VAR 0 7
36814: PUSH
36815: DOUBLE
36816: LD_VAR 0 9
36820: INC
36821: ST_TO_ADDR
36822: LD_INT 1
36824: PUSH
36825: FOR_DOWNTO
36826: IFFALSE 36871
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36828: LD_ADDR_VAR 0 6
36832: PUSH
36833: LD_VAR 0 6
36837: PPUSH
36838: LD_VAR 0 9
36842: PUSH
36843: LD_VAR 0 7
36847: MINUS
36848: PUSH
36849: LD_INT 1
36851: PLUS
36852: PPUSH
36853: LD_VAR 0 9
36857: PUSH
36858: LD_VAR 0 7
36862: ARRAY
36863: PPUSH
36864: CALL_OW 1
36868: ST_TO_ADDR
36869: GO 36825
36871: POP
36872: POP
// end ; tmp := [ ] ;
36873: LD_ADDR_VAR 0 9
36877: PUSH
36878: EMPTY
36879: ST_TO_ADDR
// if mode then
36880: LD_VAR 0 5
36884: IFFALSE 36953
// begin for i = 1 to result do
36886: LD_ADDR_VAR 0 7
36890: PUSH
36891: DOUBLE
36892: LD_INT 1
36894: DEC
36895: ST_TO_ADDR
36896: LD_VAR 0 6
36900: PUSH
36901: FOR_TO
36902: IFFALSE 36941
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36904: LD_ADDR_VAR 0 9
36908: PUSH
36909: LD_VAR 0 9
36913: PPUSH
36914: LD_VAR 0 7
36918: PPUSH
36919: LD_VAR 0 6
36923: PUSH
36924: LD_VAR 0 7
36928: ARRAY
36929: PUSH
36930: LD_INT 1
36932: ARRAY
36933: PPUSH
36934: CALL_OW 1
36938: ST_TO_ADDR
36939: GO 36901
36941: POP
36942: POP
// result := tmp ;
36943: LD_ADDR_VAR 0 6
36947: PUSH
36948: LD_VAR 0 9
36952: ST_TO_ADDR
// end ; end ;
36953: LD_VAR 0 6
36957: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36958: LD_INT 0
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36966: LD_ADDR_VAR 0 5
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: EMPTY
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// if not x or not y then
36988: LD_VAR 0 2
36992: NOT
36993: PUSH
36994: LD_VAR 0 3
36998: NOT
36999: OR
37000: IFFALSE 37004
// exit ;
37002: GO 38650
// if not range then
37004: LD_VAR 0 4
37008: NOT
37009: IFFALSE 37019
// range := 10 ;
37011: LD_ADDR_VAR 0 4
37015: PUSH
37016: LD_INT 10
37018: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37019: LD_ADDR_VAR 0 8
37023: PUSH
37024: LD_INT 81
37026: PUSH
37027: LD_VAR 0 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 92
37038: PUSH
37039: LD_VAR 0 2
37043: PUSH
37044: LD_VAR 0 3
37048: PUSH
37049: LD_VAR 0 4
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 3
37062: PUSH
37063: LD_INT 21
37065: PUSH
37066: LD_INT 3
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: PPUSH
37082: CALL_OW 69
37086: ST_TO_ADDR
// if not tmp then
37087: LD_VAR 0 8
37091: NOT
37092: IFFALSE 37096
// exit ;
37094: GO 38650
// for i in tmp do
37096: LD_ADDR_VAR 0 6
37100: PUSH
37101: LD_VAR 0 8
37105: PUSH
37106: FOR_IN
37107: IFFALSE 38625
// begin points := [ 0 , 0 , 0 ] ;
37109: LD_ADDR_VAR 0 9
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
// bpoints := 1 ;
37128: LD_ADDR_VAR 0 10
37132: PUSH
37133: LD_INT 1
37135: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37136: LD_VAR 0 6
37140: PPUSH
37141: CALL_OW 247
37145: PUSH
37146: LD_INT 1
37148: DOUBLE
37149: EQUAL
37150: IFTRUE 37154
37152: GO 37732
37154: POP
// begin if GetClass ( i ) = 1 then
37155: LD_VAR 0 6
37159: PPUSH
37160: CALL_OW 257
37164: PUSH
37165: LD_INT 1
37167: EQUAL
37168: IFFALSE 37189
// points := [ 10 , 5 , 3 ] ;
37170: LD_ADDR_VAR 0 9
37174: PUSH
37175: LD_INT 10
37177: PUSH
37178: LD_INT 5
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37189: LD_VAR 0 6
37193: PPUSH
37194: CALL_OW 257
37198: PUSH
37199: LD_INT 2
37201: PUSH
37202: LD_INT 3
37204: PUSH
37205: LD_INT 4
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: IN
37213: IFFALSE 37234
// points := [ 3 , 2 , 1 ] ;
37215: LD_ADDR_VAR 0 9
37219: PUSH
37220: LD_INT 3
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37234: LD_VAR 0 6
37238: PPUSH
37239: CALL_OW 257
37243: PUSH
37244: LD_INT 5
37246: EQUAL
37247: IFFALSE 37268
// points := [ 130 , 5 , 2 ] ;
37249: LD_ADDR_VAR 0 9
37253: PUSH
37254: LD_INT 130
37256: PUSH
37257: LD_INT 5
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37268: LD_VAR 0 6
37272: PPUSH
37273: CALL_OW 257
37277: PUSH
37278: LD_INT 8
37280: EQUAL
37281: IFFALSE 37302
// points := [ 35 , 35 , 30 ] ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: LD_INT 35
37290: PUSH
37291: LD_INT 35
37293: PUSH
37294: LD_INT 30
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37302: LD_VAR 0 6
37306: PPUSH
37307: CALL_OW 257
37311: PUSH
37312: LD_INT 9
37314: EQUAL
37315: IFFALSE 37336
// points := [ 20 , 55 , 40 ] ;
37317: LD_ADDR_VAR 0 9
37321: PUSH
37322: LD_INT 20
37324: PUSH
37325: LD_INT 55
37327: PUSH
37328: LD_INT 40
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37336: LD_VAR 0 6
37340: PPUSH
37341: CALL_OW 257
37345: PUSH
37346: LD_INT 12
37348: PUSH
37349: LD_INT 16
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: IN
37356: IFFALSE 37377
// points := [ 5 , 3 , 2 ] ;
37358: LD_ADDR_VAR 0 9
37362: PUSH
37363: LD_INT 5
37365: PUSH
37366: LD_INT 3
37368: PUSH
37369: LD_INT 2
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37377: LD_VAR 0 6
37381: PPUSH
37382: CALL_OW 257
37386: PUSH
37387: LD_INT 17
37389: EQUAL
37390: IFFALSE 37411
// points := [ 100 , 50 , 75 ] ;
37392: LD_ADDR_VAR 0 9
37396: PUSH
37397: LD_INT 100
37399: PUSH
37400: LD_INT 50
37402: PUSH
37403: LD_INT 75
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37411: LD_VAR 0 6
37415: PPUSH
37416: CALL_OW 257
37420: PUSH
37421: LD_INT 15
37423: EQUAL
37424: IFFALSE 37445
// points := [ 10 , 5 , 3 ] ;
37426: LD_ADDR_VAR 0 9
37430: PUSH
37431: LD_INT 10
37433: PUSH
37434: LD_INT 5
37436: PUSH
37437: LD_INT 3
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37445: LD_VAR 0 6
37449: PPUSH
37450: CALL_OW 257
37454: PUSH
37455: LD_INT 14
37457: EQUAL
37458: IFFALSE 37479
// points := [ 10 , 0 , 0 ] ;
37460: LD_ADDR_VAR 0 9
37464: PUSH
37465: LD_INT 10
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37479: LD_VAR 0 6
37483: PPUSH
37484: CALL_OW 257
37488: PUSH
37489: LD_INT 11
37491: EQUAL
37492: IFFALSE 37513
// points := [ 30 , 10 , 5 ] ;
37494: LD_ADDR_VAR 0 9
37498: PUSH
37499: LD_INT 30
37501: PUSH
37502: LD_INT 10
37504: PUSH
37505: LD_INT 5
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37513: LD_VAR 0 1
37517: PPUSH
37518: LD_INT 5
37520: PPUSH
37521: CALL_OW 321
37525: PUSH
37526: LD_INT 2
37528: EQUAL
37529: IFFALSE 37546
// bpoints := bpoints * 1.8 ;
37531: LD_ADDR_VAR 0 10
37535: PUSH
37536: LD_VAR 0 10
37540: PUSH
37541: LD_REAL  1.80000000000000E+0000
37544: MUL
37545: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37546: LD_VAR 0 6
37550: PPUSH
37551: CALL_OW 257
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: LD_INT 3
37564: PUSH
37565: LD_INT 4
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: IN
37574: PUSH
37575: LD_VAR 0 1
37579: PPUSH
37580: LD_INT 51
37582: PPUSH
37583: CALL_OW 321
37587: PUSH
37588: LD_INT 2
37590: EQUAL
37591: AND
37592: IFFALSE 37609
// bpoints := bpoints * 1.2 ;
37594: LD_ADDR_VAR 0 10
37598: PUSH
37599: LD_VAR 0 10
37603: PUSH
37604: LD_REAL  1.20000000000000E+0000
37607: MUL
37608: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37609: LD_VAR 0 6
37613: PPUSH
37614: CALL_OW 257
37618: PUSH
37619: LD_INT 5
37621: PUSH
37622: LD_INT 7
37624: PUSH
37625: LD_INT 9
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: IN
37633: PUSH
37634: LD_VAR 0 1
37638: PPUSH
37639: LD_INT 52
37641: PPUSH
37642: CALL_OW 321
37646: PUSH
37647: LD_INT 2
37649: EQUAL
37650: AND
37651: IFFALSE 37668
// bpoints := bpoints * 1.5 ;
37653: LD_ADDR_VAR 0 10
37657: PUSH
37658: LD_VAR 0 10
37662: PUSH
37663: LD_REAL  1.50000000000000E+0000
37666: MUL
37667: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37668: LD_VAR 0 1
37672: PPUSH
37673: LD_INT 66
37675: PPUSH
37676: CALL_OW 321
37680: PUSH
37681: LD_INT 2
37683: EQUAL
37684: IFFALSE 37701
// bpoints := bpoints * 1.1 ;
37686: LD_ADDR_VAR 0 10
37690: PUSH
37691: LD_VAR 0 10
37695: PUSH
37696: LD_REAL  1.10000000000000E+0000
37699: MUL
37700: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37701: LD_ADDR_VAR 0 10
37705: PUSH
37706: LD_VAR 0 10
37710: PUSH
37711: LD_VAR 0 6
37715: PPUSH
37716: LD_INT 1
37718: PPUSH
37719: CALL_OW 259
37723: PUSH
37724: LD_REAL  1.15000000000000E+0000
37727: MUL
37728: MUL
37729: ST_TO_ADDR
// end ; unit_vehicle :
37730: GO 38554
37732: LD_INT 2
37734: DOUBLE
37735: EQUAL
37736: IFTRUE 37740
37738: GO 38542
37740: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37741: LD_VAR 0 6
37745: PPUSH
37746: CALL_OW 264
37750: PUSH
37751: LD_INT 2
37753: PUSH
37754: LD_INT 42
37756: PUSH
37757: LD_INT 24
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: IN
37765: IFFALSE 37786
// points := [ 25 , 5 , 3 ] ;
37767: LD_ADDR_VAR 0 9
37771: PUSH
37772: LD_INT 25
37774: PUSH
37775: LD_INT 5
37777: PUSH
37778: LD_INT 3
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37786: LD_VAR 0 6
37790: PPUSH
37791: CALL_OW 264
37795: PUSH
37796: LD_INT 4
37798: PUSH
37799: LD_INT 43
37801: PUSH
37802: LD_INT 25
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: IN
37810: IFFALSE 37831
// points := [ 40 , 15 , 5 ] ;
37812: LD_ADDR_VAR 0 9
37816: PUSH
37817: LD_INT 40
37819: PUSH
37820: LD_INT 15
37822: PUSH
37823: LD_INT 5
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37831: LD_VAR 0 6
37835: PPUSH
37836: CALL_OW 264
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: LD_INT 23
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: IN
37851: IFFALSE 37872
// points := [ 7 , 25 , 8 ] ;
37853: LD_ADDR_VAR 0 9
37857: PUSH
37858: LD_INT 7
37860: PUSH
37861: LD_INT 25
37863: PUSH
37864: LD_INT 8
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37872: LD_VAR 0 6
37876: PPUSH
37877: CALL_OW 264
37881: PUSH
37882: LD_INT 5
37884: PUSH
37885: LD_INT 27
37887: PUSH
37888: LD_INT 44
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: IN
37896: IFFALSE 37917
// points := [ 14 , 50 , 16 ] ;
37898: LD_ADDR_VAR 0 9
37902: PUSH
37903: LD_INT 14
37905: PUSH
37906: LD_INT 50
37908: PUSH
37909: LD_INT 16
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37917: LD_VAR 0 6
37921: PPUSH
37922: CALL_OW 264
37926: PUSH
37927: LD_INT 6
37929: PUSH
37930: LD_INT 46
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: IN
37937: IFFALSE 37958
// points := [ 32 , 120 , 70 ] ;
37939: LD_ADDR_VAR 0 9
37943: PUSH
37944: LD_INT 32
37946: PUSH
37947: LD_INT 120
37949: PUSH
37950: LD_INT 70
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37958: LD_VAR 0 6
37962: PPUSH
37963: CALL_OW 264
37967: PUSH
37968: LD_INT 7
37970: PUSH
37971: LD_INT 28
37973: PUSH
37974: LD_INT 45
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: IN
37982: IFFALSE 38003
// points := [ 35 , 20 , 45 ] ;
37984: LD_ADDR_VAR 0 9
37988: PUSH
37989: LD_INT 35
37991: PUSH
37992: LD_INT 20
37994: PUSH
37995: LD_INT 45
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: LIST
38002: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38003: LD_VAR 0 6
38007: PPUSH
38008: CALL_OW 264
38012: PUSH
38013: LD_INT 47
38015: PUSH
38016: EMPTY
38017: LIST
38018: IN
38019: IFFALSE 38040
// points := [ 67 , 45 , 75 ] ;
38021: LD_ADDR_VAR 0 9
38025: PUSH
38026: LD_INT 67
38028: PUSH
38029: LD_INT 45
38031: PUSH
38032: LD_INT 75
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38040: LD_VAR 0 6
38044: PPUSH
38045: CALL_OW 264
38049: PUSH
38050: LD_INT 26
38052: PUSH
38053: EMPTY
38054: LIST
38055: IN
38056: IFFALSE 38077
// points := [ 120 , 30 , 80 ] ;
38058: LD_ADDR_VAR 0 9
38062: PUSH
38063: LD_INT 120
38065: PUSH
38066: LD_INT 30
38068: PUSH
38069: LD_INT 80
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38077: LD_VAR 0 6
38081: PPUSH
38082: CALL_OW 264
38086: PUSH
38087: LD_INT 22
38089: PUSH
38090: EMPTY
38091: LIST
38092: IN
38093: IFFALSE 38114
// points := [ 40 , 1 , 1 ] ;
38095: LD_ADDR_VAR 0 9
38099: PUSH
38100: LD_INT 40
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: LIST
38113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38114: LD_VAR 0 6
38118: PPUSH
38119: CALL_OW 264
38123: PUSH
38124: LD_INT 29
38126: PUSH
38127: EMPTY
38128: LIST
38129: IN
38130: IFFALSE 38151
// points := [ 70 , 200 , 400 ] ;
38132: LD_ADDR_VAR 0 9
38136: PUSH
38137: LD_INT 70
38139: PUSH
38140: LD_INT 200
38142: PUSH
38143: LD_INT 400
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38151: LD_VAR 0 6
38155: PPUSH
38156: CALL_OW 264
38160: PUSH
38161: LD_INT 14
38163: PUSH
38164: LD_INT 53
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: IN
38171: IFFALSE 38192
// points := [ 40 , 10 , 20 ] ;
38173: LD_ADDR_VAR 0 9
38177: PUSH
38178: LD_INT 40
38180: PUSH
38181: LD_INT 10
38183: PUSH
38184: LD_INT 20
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38192: LD_VAR 0 6
38196: PPUSH
38197: CALL_OW 264
38201: PUSH
38202: LD_INT 9
38204: PUSH
38205: EMPTY
38206: LIST
38207: IN
38208: IFFALSE 38229
// points := [ 5 , 70 , 20 ] ;
38210: LD_ADDR_VAR 0 9
38214: PUSH
38215: LD_INT 5
38217: PUSH
38218: LD_INT 70
38220: PUSH
38221: LD_INT 20
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38229: LD_VAR 0 6
38233: PPUSH
38234: CALL_OW 264
38238: PUSH
38239: LD_INT 10
38241: PUSH
38242: EMPTY
38243: LIST
38244: IN
38245: IFFALSE 38266
// points := [ 35 , 110 , 70 ] ;
38247: LD_ADDR_VAR 0 9
38251: PUSH
38252: LD_INT 35
38254: PUSH
38255: LD_INT 110
38257: PUSH
38258: LD_INT 70
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38266: LD_VAR 0 6
38270: PPUSH
38271: CALL_OW 265
38275: PUSH
38276: LD_INT 25
38278: EQUAL
38279: IFFALSE 38300
// points := [ 80 , 65 , 100 ] ;
38281: LD_ADDR_VAR 0 9
38285: PUSH
38286: LD_INT 80
38288: PUSH
38289: LD_INT 65
38291: PUSH
38292: LD_INT 100
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38300: LD_VAR 0 6
38304: PPUSH
38305: CALL_OW 263
38309: PUSH
38310: LD_INT 1
38312: EQUAL
38313: IFFALSE 38348
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38315: LD_ADDR_VAR 0 10
38319: PUSH
38320: LD_VAR 0 10
38324: PUSH
38325: LD_VAR 0 6
38329: PPUSH
38330: CALL_OW 311
38334: PPUSH
38335: LD_INT 3
38337: PPUSH
38338: CALL_OW 259
38342: PUSH
38343: LD_INT 4
38345: MUL
38346: MUL
38347: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38348: LD_VAR 0 6
38352: PPUSH
38353: CALL_OW 263
38357: PUSH
38358: LD_INT 2
38360: EQUAL
38361: IFFALSE 38412
// begin j := IsControledBy ( i ) ;
38363: LD_ADDR_VAR 0 7
38367: PUSH
38368: LD_VAR 0 6
38372: PPUSH
38373: CALL_OW 312
38377: ST_TO_ADDR
// if j then
38378: LD_VAR 0 7
38382: IFFALSE 38412
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38384: LD_ADDR_VAR 0 10
38388: PUSH
38389: LD_VAR 0 10
38393: PUSH
38394: LD_VAR 0 7
38398: PPUSH
38399: LD_INT 3
38401: PPUSH
38402: CALL_OW 259
38406: PUSH
38407: LD_INT 3
38409: MUL
38410: MUL
38411: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38412: LD_VAR 0 6
38416: PPUSH
38417: CALL_OW 264
38421: PUSH
38422: LD_INT 5
38424: PUSH
38425: LD_INT 6
38427: PUSH
38428: LD_INT 46
38430: PUSH
38431: LD_INT 44
38433: PUSH
38434: LD_INT 47
38436: PUSH
38437: LD_INT 45
38439: PUSH
38440: LD_INT 28
38442: PUSH
38443: LD_INT 7
38445: PUSH
38446: LD_INT 27
38448: PUSH
38449: LD_INT 29
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: IN
38464: PUSH
38465: LD_VAR 0 1
38469: PPUSH
38470: LD_INT 52
38472: PPUSH
38473: CALL_OW 321
38477: PUSH
38478: LD_INT 2
38480: EQUAL
38481: AND
38482: IFFALSE 38499
// bpoints := bpoints * 1.2 ;
38484: LD_ADDR_VAR 0 10
38488: PUSH
38489: LD_VAR 0 10
38493: PUSH
38494: LD_REAL  1.20000000000000E+0000
38497: MUL
38498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38499: LD_VAR 0 6
38503: PPUSH
38504: CALL_OW 264
38508: PUSH
38509: LD_INT 6
38511: PUSH
38512: LD_INT 46
38514: PUSH
38515: LD_INT 47
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: IN
38523: IFFALSE 38540
// bpoints := bpoints * 1.2 ;
38525: LD_ADDR_VAR 0 10
38529: PUSH
38530: LD_VAR 0 10
38534: PUSH
38535: LD_REAL  1.20000000000000E+0000
38538: MUL
38539: ST_TO_ADDR
// end ; unit_building :
38540: GO 38554
38542: LD_INT 3
38544: DOUBLE
38545: EQUAL
38546: IFTRUE 38550
38548: GO 38553
38550: POP
// ; end ;
38551: GO 38554
38553: POP
// for j = 1 to 3 do
38554: LD_ADDR_VAR 0 7
38558: PUSH
38559: DOUBLE
38560: LD_INT 1
38562: DEC
38563: ST_TO_ADDR
38564: LD_INT 3
38566: PUSH
38567: FOR_TO
38568: IFFALSE 38621
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38570: LD_ADDR_VAR 0 5
38574: PUSH
38575: LD_VAR 0 5
38579: PPUSH
38580: LD_VAR 0 7
38584: PPUSH
38585: LD_VAR 0 5
38589: PUSH
38590: LD_VAR 0 7
38594: ARRAY
38595: PUSH
38596: LD_VAR 0 9
38600: PUSH
38601: LD_VAR 0 7
38605: ARRAY
38606: PUSH
38607: LD_VAR 0 10
38611: MUL
38612: PLUS
38613: PPUSH
38614: CALL_OW 1
38618: ST_TO_ADDR
38619: GO 38567
38621: POP
38622: POP
// end ;
38623: GO 37106
38625: POP
38626: POP
// result := Replace ( result , 4 , tmp ) ;
38627: LD_ADDR_VAR 0 5
38631: PUSH
38632: LD_VAR 0 5
38636: PPUSH
38637: LD_INT 4
38639: PPUSH
38640: LD_VAR 0 8
38644: PPUSH
38645: CALL_OW 1
38649: ST_TO_ADDR
// end ;
38650: LD_VAR 0 5
38654: RET
// export function DangerAtRange ( unit , range ) ; begin
38655: LD_INT 0
38657: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38658: LD_ADDR_VAR 0 3
38662: PUSH
38663: LD_VAR 0 1
38667: PPUSH
38668: CALL_OW 255
38672: PPUSH
38673: LD_VAR 0 1
38677: PPUSH
38678: CALL_OW 250
38682: PPUSH
38683: LD_VAR 0 1
38687: PPUSH
38688: CALL_OW 251
38692: PPUSH
38693: LD_VAR 0 2
38697: PPUSH
38698: CALL 36958 0 4
38702: ST_TO_ADDR
// end ;
38703: LD_VAR 0 3
38707: RET
// export function DangerInArea ( side , area ) ; begin
38708: LD_INT 0
38710: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38711: LD_ADDR_VAR 0 3
38715: PUSH
38716: LD_VAR 0 2
38720: PPUSH
38721: LD_INT 81
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PPUSH
38733: CALL_OW 70
38737: ST_TO_ADDR
// end ;
38738: LD_VAR 0 3
38742: RET
// export function IsExtension ( b ) ; begin
38743: LD_INT 0
38745: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38746: LD_ADDR_VAR 0 2
38750: PUSH
38751: LD_VAR 0 1
38755: PUSH
38756: LD_INT 23
38758: PUSH
38759: LD_INT 20
38761: PUSH
38762: LD_INT 22
38764: PUSH
38765: LD_INT 17
38767: PUSH
38768: LD_INT 24
38770: PUSH
38771: LD_INT 21
38773: PUSH
38774: LD_INT 19
38776: PUSH
38777: LD_INT 16
38779: PUSH
38780: LD_INT 25
38782: PUSH
38783: LD_INT 18
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: IN
38798: ST_TO_ADDR
// end ;
38799: LD_VAR 0 2
38803: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38804: LD_INT 0
38806: PPUSH
38807: PPUSH
38808: PPUSH
// result := [ ] ;
38809: LD_ADDR_VAR 0 4
38813: PUSH
38814: EMPTY
38815: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38816: LD_ADDR_VAR 0 5
38820: PUSH
38821: LD_VAR 0 2
38825: PPUSH
38826: LD_INT 21
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PPUSH
38836: CALL_OW 70
38840: ST_TO_ADDR
// if not tmp then
38841: LD_VAR 0 5
38845: NOT
38846: IFFALSE 38850
// exit ;
38848: GO 38914
// if checkLink then
38850: LD_VAR 0 3
38854: IFFALSE 38904
// begin for i in tmp do
38856: LD_ADDR_VAR 0 6
38860: PUSH
38861: LD_VAR 0 5
38865: PUSH
38866: FOR_IN
38867: IFFALSE 38902
// if GetBase ( i ) <> base then
38869: LD_VAR 0 6
38873: PPUSH
38874: CALL_OW 274
38878: PUSH
38879: LD_VAR 0 1
38883: NONEQUAL
38884: IFFALSE 38900
// ComLinkToBase ( base , i ) ;
38886: LD_VAR 0 1
38890: PPUSH
38891: LD_VAR 0 6
38895: PPUSH
38896: CALL_OW 169
38900: GO 38866
38902: POP
38903: POP
// end ; result := tmp ;
38904: LD_ADDR_VAR 0 4
38908: PUSH
38909: LD_VAR 0 5
38913: ST_TO_ADDR
// end ;
38914: LD_VAR 0 4
38918: RET
// export function ComComplete ( units , b ) ; var i ; begin
38919: LD_INT 0
38921: PPUSH
38922: PPUSH
// if not units then
38923: LD_VAR 0 1
38927: NOT
38928: IFFALSE 38932
// exit ;
38930: GO 39022
// for i in units do
38932: LD_ADDR_VAR 0 4
38936: PUSH
38937: LD_VAR 0 1
38941: PUSH
38942: FOR_IN
38943: IFFALSE 39020
// if BuildingStatus ( b ) = bs_build then
38945: LD_VAR 0 2
38949: PPUSH
38950: CALL_OW 461
38954: PUSH
38955: LD_INT 1
38957: EQUAL
38958: IFFALSE 39018
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38960: LD_VAR 0 4
38964: PPUSH
38965: LD_STRING h
38967: PUSH
38968: LD_VAR 0 2
38972: PPUSH
38973: CALL_OW 250
38977: PUSH
38978: LD_VAR 0 2
38982: PPUSH
38983: CALL_OW 251
38987: PUSH
38988: LD_VAR 0 2
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: PPUSH
39014: CALL_OW 446
39018: GO 38942
39020: POP
39021: POP
// end ;
39022: LD_VAR 0 3
39026: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39027: LD_INT 0
39029: PPUSH
39030: PPUSH
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39035: LD_VAR 0 1
39039: NOT
39040: PUSH
39041: LD_VAR 0 1
39045: PPUSH
39046: CALL_OW 263
39050: PUSH
39051: LD_INT 2
39053: EQUAL
39054: NOT
39055: OR
39056: IFFALSE 39060
// exit ;
39058: GO 39376
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39060: LD_ADDR_VAR 0 6
39064: PUSH
39065: LD_INT 22
39067: PUSH
39068: LD_VAR 0 1
39072: PPUSH
39073: CALL_OW 255
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 30
39087: PUSH
39088: LD_INT 36
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 34
39097: PUSH
39098: LD_INT 31
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PPUSH
39114: CALL_OW 69
39118: ST_TO_ADDR
// if not tmp then
39119: LD_VAR 0 6
39123: NOT
39124: IFFALSE 39128
// exit ;
39126: GO 39376
// result := [ ] ;
39128: LD_ADDR_VAR 0 2
39132: PUSH
39133: EMPTY
39134: ST_TO_ADDR
// for i in tmp do
39135: LD_ADDR_VAR 0 3
39139: PUSH
39140: LD_VAR 0 6
39144: PUSH
39145: FOR_IN
39146: IFFALSE 39217
// begin t := UnitsInside ( i ) ;
39148: LD_ADDR_VAR 0 4
39152: PUSH
39153: LD_VAR 0 3
39157: PPUSH
39158: CALL_OW 313
39162: ST_TO_ADDR
// if t then
39163: LD_VAR 0 4
39167: IFFALSE 39215
// for j in t do
39169: LD_ADDR_VAR 0 7
39173: PUSH
39174: LD_VAR 0 4
39178: PUSH
39179: FOR_IN
39180: IFFALSE 39213
// result := Insert ( result , result + 1 , j ) ;
39182: LD_ADDR_VAR 0 2
39186: PUSH
39187: LD_VAR 0 2
39191: PPUSH
39192: LD_VAR 0 2
39196: PUSH
39197: LD_INT 1
39199: PLUS
39200: PPUSH
39201: LD_VAR 0 7
39205: PPUSH
39206: CALL_OW 2
39210: ST_TO_ADDR
39211: GO 39179
39213: POP
39214: POP
// end ;
39215: GO 39145
39217: POP
39218: POP
// if not result then
39219: LD_VAR 0 2
39223: NOT
39224: IFFALSE 39228
// exit ;
39226: GO 39376
// mech := result [ 1 ] ;
39228: LD_ADDR_VAR 0 5
39232: PUSH
39233: LD_VAR 0 2
39237: PUSH
39238: LD_INT 1
39240: ARRAY
39241: ST_TO_ADDR
// if result > 1 then
39242: LD_VAR 0 2
39246: PUSH
39247: LD_INT 1
39249: GREATER
39250: IFFALSE 39362
// for i = 2 to result do
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: DOUBLE
39258: LD_INT 2
39260: DEC
39261: ST_TO_ADDR
39262: LD_VAR 0 2
39266: PUSH
39267: FOR_TO
39268: IFFALSE 39360
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39270: LD_ADDR_VAR 0 4
39274: PUSH
39275: LD_VAR 0 2
39279: PUSH
39280: LD_VAR 0 3
39284: ARRAY
39285: PPUSH
39286: LD_INT 3
39288: PPUSH
39289: CALL_OW 259
39293: PUSH
39294: LD_VAR 0 2
39298: PUSH
39299: LD_VAR 0 3
39303: ARRAY
39304: PPUSH
39305: CALL_OW 432
39309: MINUS
39310: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39311: LD_VAR 0 4
39315: PUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: LD_INT 3
39323: PPUSH
39324: CALL_OW 259
39328: PUSH
39329: LD_VAR 0 5
39333: PPUSH
39334: CALL_OW 432
39338: MINUS
39339: GREATEREQUAL
39340: IFFALSE 39358
// mech := result [ i ] ;
39342: LD_ADDR_VAR 0 5
39346: PUSH
39347: LD_VAR 0 2
39351: PUSH
39352: LD_VAR 0 3
39356: ARRAY
39357: ST_TO_ADDR
// end ;
39358: GO 39267
39360: POP
39361: POP
// ComLinkTo ( vehicle , mech ) ;
39362: LD_VAR 0 1
39366: PPUSH
39367: LD_VAR 0 5
39371: PPUSH
39372: CALL_OW 135
// end ;
39376: LD_VAR 0 2
39380: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39381: LD_INT 0
39383: PPUSH
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
// result := [ ] ;
39396: LD_ADDR_VAR 0 7
39400: PUSH
39401: EMPTY
39402: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39403: LD_VAR 0 1
39407: PPUSH
39408: CALL_OW 266
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: IN
39423: NOT
39424: IFFALSE 39428
// exit ;
39426: GO 41062
// if name then
39428: LD_VAR 0 3
39432: IFFALSE 39448
// SetBName ( base_dep , name ) ;
39434: LD_VAR 0 1
39438: PPUSH
39439: LD_VAR 0 3
39443: PPUSH
39444: CALL_OW 500
// base := GetBase ( base_dep ) ;
39448: LD_ADDR_VAR 0 15
39452: PUSH
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 274
39462: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39463: LD_ADDR_VAR 0 16
39467: PUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: CALL_OW 255
39477: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39478: LD_ADDR_VAR 0 17
39482: PUSH
39483: LD_VAR 0 1
39487: PPUSH
39488: CALL_OW 248
39492: ST_TO_ADDR
// if sources then
39493: LD_VAR 0 5
39497: IFFALSE 39544
// for i = 1 to 3 do
39499: LD_ADDR_VAR 0 8
39503: PUSH
39504: DOUBLE
39505: LD_INT 1
39507: DEC
39508: ST_TO_ADDR
39509: LD_INT 3
39511: PUSH
39512: FOR_TO
39513: IFFALSE 39542
// AddResourceType ( base , i , sources [ i ] ) ;
39515: LD_VAR 0 15
39519: PPUSH
39520: LD_VAR 0 8
39524: PPUSH
39525: LD_VAR 0 5
39529: PUSH
39530: LD_VAR 0 8
39534: ARRAY
39535: PPUSH
39536: CALL_OW 276
39540: GO 39512
39542: POP
39543: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39544: LD_ADDR_VAR 0 18
39548: PUSH
39549: LD_VAR 0 15
39553: PPUSH
39554: LD_VAR 0 2
39558: PPUSH
39559: LD_INT 1
39561: PPUSH
39562: CALL 38804 0 3
39566: ST_TO_ADDR
// InitHc ;
39567: CALL_OW 19
// InitUc ;
39571: CALL_OW 18
// uc_side := side ;
39575: LD_ADDR_OWVAR 20
39579: PUSH
39580: LD_VAR 0 16
39584: ST_TO_ADDR
// uc_nation := nation ;
39585: LD_ADDR_OWVAR 21
39589: PUSH
39590: LD_VAR 0 17
39594: ST_TO_ADDR
// if buildings then
39595: LD_VAR 0 18
39599: IFFALSE 40921
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39601: LD_ADDR_VAR 0 19
39605: PUSH
39606: LD_VAR 0 18
39610: PPUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 30
39616: PUSH
39617: LD_INT 29
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 30
39626: PUSH
39627: LD_INT 30
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: PPUSH
39639: CALL_OW 72
39643: ST_TO_ADDR
// if tmp then
39644: LD_VAR 0 19
39648: IFFALSE 39696
// for i in tmp do
39650: LD_ADDR_VAR 0 8
39654: PUSH
39655: LD_VAR 0 19
39659: PUSH
39660: FOR_IN
39661: IFFALSE 39694
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39663: LD_VAR 0 8
39667: PPUSH
39668: CALL_OW 250
39672: PPUSH
39673: LD_VAR 0 8
39677: PPUSH
39678: CALL_OW 251
39682: PPUSH
39683: LD_VAR 0 16
39687: PPUSH
39688: CALL_OW 441
39692: GO 39660
39694: POP
39695: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39696: LD_VAR 0 18
39700: PPUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 30
39706: PUSH
39707: LD_INT 32
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 30
39716: PUSH
39717: LD_INT 33
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: PPUSH
39729: CALL_OW 72
39733: IFFALSE 39821
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39735: LD_ADDR_VAR 0 8
39739: PUSH
39740: LD_VAR 0 18
39744: PPUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 30
39750: PUSH
39751: LD_INT 32
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 30
39760: PUSH
39761: LD_INT 33
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: PPUSH
39773: CALL_OW 72
39777: PUSH
39778: FOR_IN
39779: IFFALSE 39819
// begin if not GetBWeapon ( i ) then
39781: LD_VAR 0 8
39785: PPUSH
39786: CALL_OW 269
39790: NOT
39791: IFFALSE 39817
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39793: LD_VAR 0 8
39797: PPUSH
39798: LD_VAR 0 8
39802: PPUSH
39803: LD_VAR 0 2
39807: PPUSH
39808: CALL 41067 0 2
39812: PPUSH
39813: CALL_OW 431
// end ;
39817: GO 39778
39819: POP
39820: POP
// end ; for i = 1 to personel do
39821: LD_ADDR_VAR 0 8
39825: PUSH
39826: DOUBLE
39827: LD_INT 1
39829: DEC
39830: ST_TO_ADDR
39831: LD_VAR 0 6
39835: PUSH
39836: FOR_TO
39837: IFFALSE 40901
// begin if i > 4 then
39839: LD_VAR 0 8
39843: PUSH
39844: LD_INT 4
39846: GREATER
39847: IFFALSE 39851
// break ;
39849: GO 40901
// case i of 1 :
39851: LD_VAR 0 8
39855: PUSH
39856: LD_INT 1
39858: DOUBLE
39859: EQUAL
39860: IFTRUE 39864
39862: GO 39944
39864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39865: LD_ADDR_VAR 0 12
39869: PUSH
39870: LD_VAR 0 18
39874: PPUSH
39875: LD_INT 22
39877: PUSH
39878: LD_VAR 0 16
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 58
39889: PUSH
39890: EMPTY
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 30
39898: PUSH
39899: LD_INT 32
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 30
39908: PUSH
39909: LD_INT 4
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 30
39918: PUSH
39919: LD_INT 5
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: PPUSH
39937: CALL_OW 72
39941: ST_TO_ADDR
39942: GO 40166
39944: LD_INT 2
39946: DOUBLE
39947: EQUAL
39948: IFTRUE 39952
39950: GO 40014
39952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39953: LD_ADDR_VAR 0 12
39957: PUSH
39958: LD_VAR 0 18
39962: PPUSH
39963: LD_INT 22
39965: PUSH
39966: LD_VAR 0 16
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: LD_INT 30
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 30
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PPUSH
40007: CALL_OW 72
40011: ST_TO_ADDR
40012: GO 40166
40014: LD_INT 3
40016: DOUBLE
40017: EQUAL
40018: IFTRUE 40022
40020: GO 40084
40022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40023: LD_ADDR_VAR 0 12
40027: PUSH
40028: LD_VAR 0 18
40032: PPUSH
40033: LD_INT 22
40035: PUSH
40036: LD_VAR 0 16
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 30
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 30
40060: PUSH
40061: LD_INT 3
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: CALL_OW 72
40081: ST_TO_ADDR
40082: GO 40166
40084: LD_INT 4
40086: DOUBLE
40087: EQUAL
40088: IFTRUE 40092
40090: GO 40165
40092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40093: LD_ADDR_VAR 0 12
40097: PUSH
40098: LD_VAR 0 18
40102: PPUSH
40103: LD_INT 22
40105: PUSH
40106: LD_VAR 0 16
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 30
40120: PUSH
40121: LD_INT 6
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 30
40130: PUSH
40131: LD_INT 7
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 30
40140: PUSH
40141: LD_INT 8
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PPUSH
40158: CALL_OW 72
40162: ST_TO_ADDR
40163: GO 40166
40165: POP
// if i = 1 then
40166: LD_VAR 0 8
40170: PUSH
40171: LD_INT 1
40173: EQUAL
40174: IFFALSE 40285
// begin tmp := [ ] ;
40176: LD_ADDR_VAR 0 19
40180: PUSH
40181: EMPTY
40182: ST_TO_ADDR
// for j in f do
40183: LD_ADDR_VAR 0 9
40187: PUSH
40188: LD_VAR 0 12
40192: PUSH
40193: FOR_IN
40194: IFFALSE 40267
// if GetBType ( j ) = b_bunker then
40196: LD_VAR 0 9
40200: PPUSH
40201: CALL_OW 266
40205: PUSH
40206: LD_INT 32
40208: EQUAL
40209: IFFALSE 40236
// tmp := Insert ( tmp , 1 , j ) else
40211: LD_ADDR_VAR 0 19
40215: PUSH
40216: LD_VAR 0 19
40220: PPUSH
40221: LD_INT 1
40223: PPUSH
40224: LD_VAR 0 9
40228: PPUSH
40229: CALL_OW 2
40233: ST_TO_ADDR
40234: GO 40265
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40236: LD_ADDR_VAR 0 19
40240: PUSH
40241: LD_VAR 0 19
40245: PPUSH
40246: LD_VAR 0 19
40250: PUSH
40251: LD_INT 1
40253: PLUS
40254: PPUSH
40255: LD_VAR 0 9
40259: PPUSH
40260: CALL_OW 2
40264: ST_TO_ADDR
40265: GO 40193
40267: POP
40268: POP
// if tmp then
40269: LD_VAR 0 19
40273: IFFALSE 40285
// f := tmp ;
40275: LD_ADDR_VAR 0 12
40279: PUSH
40280: LD_VAR 0 19
40284: ST_TO_ADDR
// end ; x := personel [ i ] ;
40285: LD_ADDR_VAR 0 13
40289: PUSH
40290: LD_VAR 0 6
40294: PUSH
40295: LD_VAR 0 8
40299: ARRAY
40300: ST_TO_ADDR
// if x = - 1 then
40301: LD_VAR 0 13
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: EQUAL
40310: IFFALSE 40519
// begin for j in f do
40312: LD_ADDR_VAR 0 9
40316: PUSH
40317: LD_VAR 0 12
40321: PUSH
40322: FOR_IN
40323: IFFALSE 40515
// repeat InitHc ;
40325: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40329: LD_VAR 0 9
40333: PPUSH
40334: CALL_OW 266
40338: PUSH
40339: LD_INT 5
40341: EQUAL
40342: IFFALSE 40412
// begin if UnitsInside ( j ) < 3 then
40344: LD_VAR 0 9
40348: PPUSH
40349: CALL_OW 313
40353: PUSH
40354: LD_INT 3
40356: LESS
40357: IFFALSE 40393
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40359: LD_INT 0
40361: PPUSH
40362: LD_INT 5
40364: PUSH
40365: LD_INT 8
40367: PUSH
40368: LD_INT 9
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: PUSH
40376: LD_VAR 0 17
40380: ARRAY
40381: PPUSH
40382: LD_VAR 0 4
40386: PPUSH
40387: CALL_OW 380
40391: GO 40410
// PrepareHuman ( false , i , skill ) ;
40393: LD_INT 0
40395: PPUSH
40396: LD_VAR 0 8
40400: PPUSH
40401: LD_VAR 0 4
40405: PPUSH
40406: CALL_OW 380
// end else
40410: GO 40429
// PrepareHuman ( false , i , skill ) ;
40412: LD_INT 0
40414: PPUSH
40415: LD_VAR 0 8
40419: PPUSH
40420: LD_VAR 0 4
40424: PPUSH
40425: CALL_OW 380
// un := CreateHuman ;
40429: LD_ADDR_VAR 0 14
40433: PUSH
40434: CALL_OW 44
40438: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40439: LD_ADDR_VAR 0 7
40443: PUSH
40444: LD_VAR 0 7
40448: PPUSH
40449: LD_INT 1
40451: PPUSH
40452: LD_VAR 0 14
40456: PPUSH
40457: CALL_OW 2
40461: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40462: LD_VAR 0 14
40466: PPUSH
40467: LD_VAR 0 9
40471: PPUSH
40472: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40476: LD_VAR 0 9
40480: PPUSH
40481: CALL_OW 313
40485: PUSH
40486: LD_INT 6
40488: EQUAL
40489: PUSH
40490: LD_VAR 0 9
40494: PPUSH
40495: CALL_OW 266
40499: PUSH
40500: LD_INT 32
40502: PUSH
40503: LD_INT 31
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: IN
40510: OR
40511: IFFALSE 40325
40513: GO 40322
40515: POP
40516: POP
// end else
40517: GO 40899
// for j = 1 to x do
40519: LD_ADDR_VAR 0 9
40523: PUSH
40524: DOUBLE
40525: LD_INT 1
40527: DEC
40528: ST_TO_ADDR
40529: LD_VAR 0 13
40533: PUSH
40534: FOR_TO
40535: IFFALSE 40897
// begin InitHc ;
40537: CALL_OW 19
// if not f then
40541: LD_VAR 0 12
40545: NOT
40546: IFFALSE 40635
// begin PrepareHuman ( false , i , skill ) ;
40548: LD_INT 0
40550: PPUSH
40551: LD_VAR 0 8
40555: PPUSH
40556: LD_VAR 0 4
40560: PPUSH
40561: CALL_OW 380
// un := CreateHuman ;
40565: LD_ADDR_VAR 0 14
40569: PUSH
40570: CALL_OW 44
40574: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40575: LD_ADDR_VAR 0 7
40579: PUSH
40580: LD_VAR 0 7
40584: PPUSH
40585: LD_INT 1
40587: PPUSH
40588: LD_VAR 0 14
40592: PPUSH
40593: CALL_OW 2
40597: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40598: LD_VAR 0 14
40602: PPUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 250
40612: PPUSH
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL_OW 251
40622: PPUSH
40623: LD_INT 10
40625: PPUSH
40626: LD_INT 0
40628: PPUSH
40629: CALL_OW 50
// continue ;
40633: GO 40534
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40635: LD_VAR 0 12
40639: PUSH
40640: LD_INT 1
40642: ARRAY
40643: PPUSH
40644: CALL_OW 313
40648: PUSH
40649: LD_VAR 0 12
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: PPUSH
40658: CALL_OW 266
40662: PUSH
40663: LD_INT 32
40665: PUSH
40666: LD_INT 31
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: IN
40673: AND
40674: PUSH
40675: LD_VAR 0 12
40679: PUSH
40680: LD_INT 1
40682: ARRAY
40683: PPUSH
40684: CALL_OW 313
40688: PUSH
40689: LD_INT 6
40691: EQUAL
40692: OR
40693: IFFALSE 40713
// f := Delete ( f , 1 ) ;
40695: LD_ADDR_VAR 0 12
40699: PUSH
40700: LD_VAR 0 12
40704: PPUSH
40705: LD_INT 1
40707: PPUSH
40708: CALL_OW 3
40712: ST_TO_ADDR
// if not f then
40713: LD_VAR 0 12
40717: NOT
40718: IFFALSE 40736
// begin x := x + 2 ;
40720: LD_ADDR_VAR 0 13
40724: PUSH
40725: LD_VAR 0 13
40729: PUSH
40730: LD_INT 2
40732: PLUS
40733: ST_TO_ADDR
// continue ;
40734: GO 40534
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40736: LD_VAR 0 12
40740: PUSH
40741: LD_INT 1
40743: ARRAY
40744: PPUSH
40745: CALL_OW 266
40749: PUSH
40750: LD_INT 5
40752: EQUAL
40753: IFFALSE 40827
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40755: LD_VAR 0 12
40759: PUSH
40760: LD_INT 1
40762: ARRAY
40763: PPUSH
40764: CALL_OW 313
40768: PUSH
40769: LD_INT 3
40771: LESS
40772: IFFALSE 40808
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40774: LD_INT 0
40776: PPUSH
40777: LD_INT 5
40779: PUSH
40780: LD_INT 8
40782: PUSH
40783: LD_INT 9
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: PUSH
40791: LD_VAR 0 17
40795: ARRAY
40796: PPUSH
40797: LD_VAR 0 4
40801: PPUSH
40802: CALL_OW 380
40806: GO 40825
// PrepareHuman ( false , i , skill ) ;
40808: LD_INT 0
40810: PPUSH
40811: LD_VAR 0 8
40815: PPUSH
40816: LD_VAR 0 4
40820: PPUSH
40821: CALL_OW 380
// end else
40825: GO 40844
// PrepareHuman ( false , i , skill ) ;
40827: LD_INT 0
40829: PPUSH
40830: LD_VAR 0 8
40834: PPUSH
40835: LD_VAR 0 4
40839: PPUSH
40840: CALL_OW 380
// un := CreateHuman ;
40844: LD_ADDR_VAR 0 14
40848: PUSH
40849: CALL_OW 44
40853: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40854: LD_ADDR_VAR 0 7
40858: PUSH
40859: LD_VAR 0 7
40863: PPUSH
40864: LD_INT 1
40866: PPUSH
40867: LD_VAR 0 14
40871: PPUSH
40872: CALL_OW 2
40876: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40877: LD_VAR 0 14
40881: PPUSH
40882: LD_VAR 0 12
40886: PUSH
40887: LD_INT 1
40889: ARRAY
40890: PPUSH
40891: CALL_OW 52
// end ;
40895: GO 40534
40897: POP
40898: POP
// end ;
40899: GO 39836
40901: POP
40902: POP
// result := result ^ buildings ;
40903: LD_ADDR_VAR 0 7
40907: PUSH
40908: LD_VAR 0 7
40912: PUSH
40913: LD_VAR 0 18
40917: ADD
40918: ST_TO_ADDR
// end else
40919: GO 41062
// begin for i = 1 to personel do
40921: LD_ADDR_VAR 0 8
40925: PUSH
40926: DOUBLE
40927: LD_INT 1
40929: DEC
40930: ST_TO_ADDR
40931: LD_VAR 0 6
40935: PUSH
40936: FOR_TO
40937: IFFALSE 41060
// begin if i > 4 then
40939: LD_VAR 0 8
40943: PUSH
40944: LD_INT 4
40946: GREATER
40947: IFFALSE 40951
// break ;
40949: GO 41060
// x := personel [ i ] ;
40951: LD_ADDR_VAR 0 13
40955: PUSH
40956: LD_VAR 0 6
40960: PUSH
40961: LD_VAR 0 8
40965: ARRAY
40966: ST_TO_ADDR
// if x = - 1 then
40967: LD_VAR 0 13
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: EQUAL
40976: IFFALSE 40980
// continue ;
40978: GO 40936
// PrepareHuman ( false , i , skill ) ;
40980: LD_INT 0
40982: PPUSH
40983: LD_VAR 0 8
40987: PPUSH
40988: LD_VAR 0 4
40992: PPUSH
40993: CALL_OW 380
// un := CreateHuman ;
40997: LD_ADDR_VAR 0 14
41001: PUSH
41002: CALL_OW 44
41006: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41007: LD_VAR 0 14
41011: PPUSH
41012: LD_VAR 0 1
41016: PPUSH
41017: CALL_OW 250
41021: PPUSH
41022: LD_VAR 0 1
41026: PPUSH
41027: CALL_OW 251
41031: PPUSH
41032: LD_INT 10
41034: PPUSH
41035: LD_INT 0
41037: PPUSH
41038: CALL_OW 50
// result := result ^ un ;
41042: LD_ADDR_VAR 0 7
41046: PUSH
41047: LD_VAR 0 7
41051: PUSH
41052: LD_VAR 0 14
41056: ADD
41057: ST_TO_ADDR
// end ;
41058: GO 40936
41060: POP
41061: POP
// end ; end ;
41062: LD_VAR 0 7
41066: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41067: LD_INT 0
41069: PPUSH
41070: PPUSH
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
// result := false ;
41085: LD_ADDR_VAR 0 3
41089: PUSH
41090: LD_INT 0
41092: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41093: LD_VAR 0 1
41097: NOT
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 266
41108: PUSH
41109: LD_INT 32
41111: PUSH
41112: LD_INT 33
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: IN
41119: NOT
41120: OR
41121: IFFALSE 41125
// exit ;
41123: GO 42264
// nat := GetNation ( tower ) ;
41125: LD_ADDR_VAR 0 12
41129: PUSH
41130: LD_VAR 0 1
41134: PPUSH
41135: CALL_OW 248
41139: ST_TO_ADDR
// side := GetSide ( tower ) ;
41140: LD_ADDR_VAR 0 16
41144: PUSH
41145: LD_VAR 0 1
41149: PPUSH
41150: CALL_OW 255
41154: ST_TO_ADDR
// x := GetX ( tower ) ;
41155: LD_ADDR_VAR 0 10
41159: PUSH
41160: LD_VAR 0 1
41164: PPUSH
41165: CALL_OW 250
41169: ST_TO_ADDR
// y := GetY ( tower ) ;
41170: LD_ADDR_VAR 0 11
41174: PUSH
41175: LD_VAR 0 1
41179: PPUSH
41180: CALL_OW 251
41184: ST_TO_ADDR
// if not x or not y then
41185: LD_VAR 0 10
41189: NOT
41190: PUSH
41191: LD_VAR 0 11
41195: NOT
41196: OR
41197: IFFALSE 41201
// exit ;
41199: GO 42264
// weapon := 0 ;
41201: LD_ADDR_VAR 0 18
41205: PUSH
41206: LD_INT 0
41208: ST_TO_ADDR
// fac_list := [ ] ;
41209: LD_ADDR_VAR 0 17
41213: PUSH
41214: EMPTY
41215: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41216: LD_ADDR_VAR 0 6
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: CALL_OW 274
41230: PPUSH
41231: LD_VAR 0 2
41235: PPUSH
41236: LD_INT 0
41238: PPUSH
41239: CALL 38804 0 3
41243: PPUSH
41244: LD_INT 30
41246: PUSH
41247: LD_INT 3
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PPUSH
41254: CALL_OW 72
41258: ST_TO_ADDR
// if not factories then
41259: LD_VAR 0 6
41263: NOT
41264: IFFALSE 41268
// exit ;
41266: GO 42264
// for i in factories do
41268: LD_ADDR_VAR 0 8
41272: PUSH
41273: LD_VAR 0 6
41277: PUSH
41278: FOR_IN
41279: IFFALSE 41304
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41281: LD_ADDR_VAR 0 17
41285: PUSH
41286: LD_VAR 0 17
41290: PUSH
41291: LD_VAR 0 8
41295: PPUSH
41296: CALL_OW 478
41300: UNION
41301: ST_TO_ADDR
41302: GO 41278
41304: POP
41305: POP
// if not fac_list then
41306: LD_VAR 0 17
41310: NOT
41311: IFFALSE 41315
// exit ;
41313: GO 42264
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41315: LD_ADDR_VAR 0 5
41319: PUSH
41320: LD_INT 4
41322: PUSH
41323: LD_INT 5
41325: PUSH
41326: LD_INT 9
41328: PUSH
41329: LD_INT 10
41331: PUSH
41332: LD_INT 6
41334: PUSH
41335: LD_INT 7
41337: PUSH
41338: LD_INT 11
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 27
41352: PUSH
41353: LD_INT 28
41355: PUSH
41356: LD_INT 26
41358: PUSH
41359: LD_INT 30
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 43
41370: PUSH
41371: LD_INT 44
41373: PUSH
41374: LD_INT 46
41376: PUSH
41377: LD_INT 45
41379: PUSH
41380: LD_INT 47
41382: PUSH
41383: LD_INT 49
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: PUSH
41399: LD_VAR 0 12
41403: ARRAY
41404: ST_TO_ADDR
// for i in list do
41405: LD_ADDR_VAR 0 8
41409: PUSH
41410: LD_VAR 0 5
41414: PUSH
41415: FOR_IN
41416: IFFALSE 41449
// if not i in fac_list then
41418: LD_VAR 0 8
41422: PUSH
41423: LD_VAR 0 17
41427: IN
41428: NOT
41429: IFFALSE 41447
// list := list diff i ;
41431: LD_ADDR_VAR 0 5
41435: PUSH
41436: LD_VAR 0 5
41440: PUSH
41441: LD_VAR 0 8
41445: DIFF
41446: ST_TO_ADDR
41447: GO 41415
41449: POP
41450: POP
// if not list then
41451: LD_VAR 0 5
41455: NOT
41456: IFFALSE 41460
// exit ;
41458: GO 42264
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41460: LD_VAR 0 12
41464: PUSH
41465: LD_INT 3
41467: EQUAL
41468: PUSH
41469: LD_INT 49
41471: PUSH
41472: LD_VAR 0 5
41476: IN
41477: AND
41478: PUSH
41479: LD_INT 31
41481: PPUSH
41482: LD_VAR 0 16
41486: PPUSH
41487: CALL_OW 321
41491: PUSH
41492: LD_INT 2
41494: EQUAL
41495: AND
41496: IFFALSE 41556
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41498: LD_INT 22
41500: PUSH
41501: LD_VAR 0 16
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 35
41512: PUSH
41513: LD_INT 49
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 91
41522: PUSH
41523: LD_VAR 0 1
41527: PUSH
41528: LD_INT 10
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: PPUSH
41541: CALL_OW 69
41545: NOT
41546: IFFALSE 41556
// weapon := ru_time_lapser ;
41548: LD_ADDR_VAR 0 18
41552: PUSH
41553: LD_INT 49
41555: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41556: LD_VAR 0 12
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: IN
41571: PUSH
41572: LD_INT 11
41574: PUSH
41575: LD_VAR 0 5
41579: IN
41580: PUSH
41581: LD_INT 30
41583: PUSH
41584: LD_VAR 0 5
41588: IN
41589: OR
41590: AND
41591: PUSH
41592: LD_INT 6
41594: PPUSH
41595: LD_VAR 0 16
41599: PPUSH
41600: CALL_OW 321
41604: PUSH
41605: LD_INT 2
41607: EQUAL
41608: AND
41609: IFFALSE 41774
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41611: LD_INT 22
41613: PUSH
41614: LD_VAR 0 16
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 35
41628: PUSH
41629: LD_INT 11
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 35
41638: PUSH
41639: LD_INT 30
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 91
41653: PUSH
41654: LD_VAR 0 1
41658: PUSH
41659: LD_INT 18
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: LIST
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: LIST
41671: PPUSH
41672: CALL_OW 69
41676: NOT
41677: PUSH
41678: LD_INT 22
41680: PUSH
41681: LD_VAR 0 16
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: LD_INT 30
41695: PUSH
41696: LD_INT 32
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 30
41705: PUSH
41706: LD_INT 33
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 91
41720: PUSH
41721: LD_VAR 0 1
41725: PUSH
41726: LD_INT 12
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: PUSH
41739: EMPTY
41740: LIST
41741: PPUSH
41742: CALL_OW 69
41746: PUSH
41747: LD_INT 2
41749: GREATER
41750: AND
41751: IFFALSE 41774
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41753: LD_ADDR_VAR 0 18
41757: PUSH
41758: LD_INT 11
41760: PUSH
41761: LD_INT 30
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_VAR 0 12
41772: ARRAY
41773: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41774: LD_VAR 0 18
41778: NOT
41779: PUSH
41780: LD_INT 40
41782: PPUSH
41783: LD_VAR 0 16
41787: PPUSH
41788: CALL_OW 321
41792: PUSH
41793: LD_INT 2
41795: EQUAL
41796: AND
41797: PUSH
41798: LD_INT 7
41800: PUSH
41801: LD_VAR 0 5
41805: IN
41806: PUSH
41807: LD_INT 28
41809: PUSH
41810: LD_VAR 0 5
41814: IN
41815: OR
41816: PUSH
41817: LD_INT 45
41819: PUSH
41820: LD_VAR 0 5
41824: IN
41825: OR
41826: AND
41827: IFFALSE 42081
// begin hex := GetHexInfo ( x , y ) ;
41829: LD_ADDR_VAR 0 4
41833: PUSH
41834: LD_VAR 0 10
41838: PPUSH
41839: LD_VAR 0 11
41843: PPUSH
41844: CALL_OW 546
41848: ST_TO_ADDR
// if hex [ 1 ] then
41849: LD_VAR 0 4
41853: PUSH
41854: LD_INT 1
41856: ARRAY
41857: IFFALSE 41861
// exit ;
41859: GO 42264
// height := hex [ 2 ] ;
41861: LD_ADDR_VAR 0 15
41865: PUSH
41866: LD_VAR 0 4
41870: PUSH
41871: LD_INT 2
41873: ARRAY
41874: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41875: LD_ADDR_VAR 0 14
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: LD_INT 3
41888: PUSH
41889: LD_INT 5
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
// for i in tmp do
41898: LD_ADDR_VAR 0 8
41902: PUSH
41903: LD_VAR 0 14
41907: PUSH
41908: FOR_IN
41909: IFFALSE 42079
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41911: LD_ADDR_VAR 0 9
41915: PUSH
41916: LD_VAR 0 10
41920: PPUSH
41921: LD_VAR 0 8
41925: PPUSH
41926: LD_INT 5
41928: PPUSH
41929: CALL_OW 272
41933: PUSH
41934: LD_VAR 0 11
41938: PPUSH
41939: LD_VAR 0 8
41943: PPUSH
41944: LD_INT 5
41946: PPUSH
41947: CALL_OW 273
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41956: LD_VAR 0 9
41960: PUSH
41961: LD_INT 1
41963: ARRAY
41964: PPUSH
41965: LD_VAR 0 9
41969: PUSH
41970: LD_INT 2
41972: ARRAY
41973: PPUSH
41974: CALL_OW 488
41978: IFFALSE 42077
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41980: LD_ADDR_VAR 0 4
41984: PUSH
41985: LD_VAR 0 9
41989: PUSH
41990: LD_INT 1
41992: ARRAY
41993: PPUSH
41994: LD_VAR 0 9
41998: PUSH
41999: LD_INT 2
42001: ARRAY
42002: PPUSH
42003: CALL_OW 546
42007: ST_TO_ADDR
// if hex [ 1 ] then
42008: LD_VAR 0 4
42012: PUSH
42013: LD_INT 1
42015: ARRAY
42016: IFFALSE 42020
// continue ;
42018: GO 41908
// h := hex [ 2 ] ;
42020: LD_ADDR_VAR 0 13
42024: PUSH
42025: LD_VAR 0 4
42029: PUSH
42030: LD_INT 2
42032: ARRAY
42033: ST_TO_ADDR
// if h + 7 < height then
42034: LD_VAR 0 13
42038: PUSH
42039: LD_INT 7
42041: PLUS
42042: PUSH
42043: LD_VAR 0 15
42047: LESS
42048: IFFALSE 42077
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42050: LD_ADDR_VAR 0 18
42054: PUSH
42055: LD_INT 7
42057: PUSH
42058: LD_INT 28
42060: PUSH
42061: LD_INT 45
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: PUSH
42069: LD_VAR 0 12
42073: ARRAY
42074: ST_TO_ADDR
// break ;
42075: GO 42079
// end ; end ; end ;
42077: GO 41908
42079: POP
42080: POP
// end ; if not weapon then
42081: LD_VAR 0 18
42085: NOT
42086: IFFALSE 42146
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42088: LD_ADDR_VAR 0 5
42092: PUSH
42093: LD_VAR 0 5
42097: PUSH
42098: LD_INT 11
42100: PUSH
42101: LD_INT 30
42103: PUSH
42104: LD_INT 49
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: DIFF
42112: ST_TO_ADDR
// if not list then
42113: LD_VAR 0 5
42117: NOT
42118: IFFALSE 42122
// exit ;
42120: GO 42264
// weapon := list [ rand ( 1 , list ) ] ;
42122: LD_ADDR_VAR 0 18
42126: PUSH
42127: LD_VAR 0 5
42131: PUSH
42132: LD_INT 1
42134: PPUSH
42135: LD_VAR 0 5
42139: PPUSH
42140: CALL_OW 12
42144: ARRAY
42145: ST_TO_ADDR
// end ; if weapon then
42146: LD_VAR 0 18
42150: IFFALSE 42264
// begin tmp := CostOfWeapon ( weapon ) ;
42152: LD_ADDR_VAR 0 14
42156: PUSH
42157: LD_VAR 0 18
42161: PPUSH
42162: CALL_OW 451
42166: ST_TO_ADDR
// j := GetBase ( tower ) ;
42167: LD_ADDR_VAR 0 9
42171: PUSH
42172: LD_VAR 0 1
42176: PPUSH
42177: CALL_OW 274
42181: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42182: LD_VAR 0 9
42186: PPUSH
42187: LD_INT 1
42189: PPUSH
42190: CALL_OW 275
42194: PUSH
42195: LD_VAR 0 14
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: GREATEREQUAL
42204: PUSH
42205: LD_VAR 0 9
42209: PPUSH
42210: LD_INT 2
42212: PPUSH
42213: CALL_OW 275
42217: PUSH
42218: LD_VAR 0 14
42222: PUSH
42223: LD_INT 2
42225: ARRAY
42226: GREATEREQUAL
42227: AND
42228: PUSH
42229: LD_VAR 0 9
42233: PPUSH
42234: LD_INT 3
42236: PPUSH
42237: CALL_OW 275
42241: PUSH
42242: LD_VAR 0 14
42246: PUSH
42247: LD_INT 3
42249: ARRAY
42250: GREATEREQUAL
42251: AND
42252: IFFALSE 42264
// result := weapon ;
42254: LD_ADDR_VAR 0 3
42258: PUSH
42259: LD_VAR 0 18
42263: ST_TO_ADDR
// end ; end ;
42264: LD_VAR 0 3
42268: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42269: LD_INT 0
42271: PPUSH
42272: PPUSH
// result := true ;
42273: LD_ADDR_VAR 0 3
42277: PUSH
42278: LD_INT 1
42280: ST_TO_ADDR
// if array1 = array2 then
42281: LD_VAR 0 1
42285: PUSH
42286: LD_VAR 0 2
42290: EQUAL
42291: IFFALSE 42351
// begin for i = 1 to array1 do
42293: LD_ADDR_VAR 0 4
42297: PUSH
42298: DOUBLE
42299: LD_INT 1
42301: DEC
42302: ST_TO_ADDR
42303: LD_VAR 0 1
42307: PUSH
42308: FOR_TO
42309: IFFALSE 42347
// if array1 [ i ] <> array2 [ i ] then
42311: LD_VAR 0 1
42315: PUSH
42316: LD_VAR 0 4
42320: ARRAY
42321: PUSH
42322: LD_VAR 0 2
42326: PUSH
42327: LD_VAR 0 4
42331: ARRAY
42332: NONEQUAL
42333: IFFALSE 42345
// begin result := false ;
42335: LD_ADDR_VAR 0 3
42339: PUSH
42340: LD_INT 0
42342: ST_TO_ADDR
// break ;
42343: GO 42347
// end ;
42345: GO 42308
42347: POP
42348: POP
// end else
42349: GO 42359
// result := false ;
42351: LD_ADDR_VAR 0 3
42355: PUSH
42356: LD_INT 0
42358: ST_TO_ADDR
// end ;
42359: LD_VAR 0 3
42363: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42364: LD_INT 0
42366: PPUSH
42367: PPUSH
// if not array1 or not array2 then
42368: LD_VAR 0 1
42372: NOT
42373: PUSH
42374: LD_VAR 0 2
42378: NOT
42379: OR
42380: IFFALSE 42384
// exit ;
42382: GO 42448
// result := true ;
42384: LD_ADDR_VAR 0 3
42388: PUSH
42389: LD_INT 1
42391: ST_TO_ADDR
// for i = 1 to array1 do
42392: LD_ADDR_VAR 0 4
42396: PUSH
42397: DOUBLE
42398: LD_INT 1
42400: DEC
42401: ST_TO_ADDR
42402: LD_VAR 0 1
42406: PUSH
42407: FOR_TO
42408: IFFALSE 42446
// if array1 [ i ] <> array2 [ i ] then
42410: LD_VAR 0 1
42414: PUSH
42415: LD_VAR 0 4
42419: ARRAY
42420: PUSH
42421: LD_VAR 0 2
42425: PUSH
42426: LD_VAR 0 4
42430: ARRAY
42431: NONEQUAL
42432: IFFALSE 42444
// begin result := false ;
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_INT 0
42441: ST_TO_ADDR
// break ;
42442: GO 42446
// end ;
42444: GO 42407
42446: POP
42447: POP
// end ;
42448: LD_VAR 0 3
42452: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42453: LD_INT 0
42455: PPUSH
42456: PPUSH
42457: PPUSH
// pom := GetBase ( fac ) ;
42458: LD_ADDR_VAR 0 5
42462: PUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: CALL_OW 274
42472: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42473: LD_ADDR_VAR 0 4
42477: PUSH
42478: LD_VAR 0 2
42482: PUSH
42483: LD_INT 1
42485: ARRAY
42486: PPUSH
42487: LD_VAR 0 2
42491: PUSH
42492: LD_INT 2
42494: ARRAY
42495: PPUSH
42496: LD_VAR 0 2
42500: PUSH
42501: LD_INT 3
42503: ARRAY
42504: PPUSH
42505: LD_VAR 0 2
42509: PUSH
42510: LD_INT 4
42512: ARRAY
42513: PPUSH
42514: CALL_OW 449
42518: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_VAR 0 5
42528: PPUSH
42529: LD_INT 1
42531: PPUSH
42532: CALL_OW 275
42536: PUSH
42537: LD_VAR 0 4
42541: PUSH
42542: LD_INT 1
42544: ARRAY
42545: GREATEREQUAL
42546: PUSH
42547: LD_VAR 0 5
42551: PPUSH
42552: LD_INT 2
42554: PPUSH
42555: CALL_OW 275
42559: PUSH
42560: LD_VAR 0 4
42564: PUSH
42565: LD_INT 2
42567: ARRAY
42568: GREATEREQUAL
42569: AND
42570: PUSH
42571: LD_VAR 0 5
42575: PPUSH
42576: LD_INT 3
42578: PPUSH
42579: CALL_OW 275
42583: PUSH
42584: LD_VAR 0 4
42588: PUSH
42589: LD_INT 3
42591: ARRAY
42592: GREATEREQUAL
42593: AND
42594: ST_TO_ADDR
// end ;
42595: LD_VAR 0 3
42599: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42600: LD_INT 0
42602: PPUSH
42603: PPUSH
42604: PPUSH
42605: PPUSH
// pom := GetBase ( building ) ;
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_VAR 0 1
42615: PPUSH
42616: CALL_OW 274
42620: ST_TO_ADDR
// if not pom then
42621: LD_VAR 0 3
42625: NOT
42626: IFFALSE 42630
// exit ;
42628: GO 42800
// btype := GetBType ( building ) ;
42630: LD_ADDR_VAR 0 5
42634: PUSH
42635: LD_VAR 0 1
42639: PPUSH
42640: CALL_OW 266
42644: ST_TO_ADDR
// if btype = b_armoury then
42645: LD_VAR 0 5
42649: PUSH
42650: LD_INT 4
42652: EQUAL
42653: IFFALSE 42663
// btype := b_barracks ;
42655: LD_ADDR_VAR 0 5
42659: PUSH
42660: LD_INT 5
42662: ST_TO_ADDR
// if btype = b_depot then
42663: LD_VAR 0 5
42667: PUSH
42668: LD_INT 0
42670: EQUAL
42671: IFFALSE 42681
// btype := b_warehouse ;
42673: LD_ADDR_VAR 0 5
42677: PUSH
42678: LD_INT 1
42680: ST_TO_ADDR
// if btype = b_workshop then
42681: LD_VAR 0 5
42685: PUSH
42686: LD_INT 2
42688: EQUAL
42689: IFFALSE 42699
// btype := b_factory ;
42691: LD_ADDR_VAR 0 5
42695: PUSH
42696: LD_INT 3
42698: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42699: LD_ADDR_VAR 0 4
42703: PUSH
42704: LD_VAR 0 5
42708: PPUSH
42709: LD_VAR 0 1
42713: PPUSH
42714: CALL_OW 248
42718: PPUSH
42719: CALL_OW 450
42723: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42724: LD_ADDR_VAR 0 2
42728: PUSH
42729: LD_VAR 0 3
42733: PPUSH
42734: LD_INT 1
42736: PPUSH
42737: CALL_OW 275
42741: PUSH
42742: LD_VAR 0 4
42746: PUSH
42747: LD_INT 1
42749: ARRAY
42750: GREATEREQUAL
42751: PUSH
42752: LD_VAR 0 3
42756: PPUSH
42757: LD_INT 2
42759: PPUSH
42760: CALL_OW 275
42764: PUSH
42765: LD_VAR 0 4
42769: PUSH
42770: LD_INT 2
42772: ARRAY
42773: GREATEREQUAL
42774: AND
42775: PUSH
42776: LD_VAR 0 3
42780: PPUSH
42781: LD_INT 3
42783: PPUSH
42784: CALL_OW 275
42788: PUSH
42789: LD_VAR 0 4
42793: PUSH
42794: LD_INT 3
42796: ARRAY
42797: GREATEREQUAL
42798: AND
42799: ST_TO_ADDR
// end ;
42800: LD_VAR 0 2
42804: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42805: LD_INT 0
42807: PPUSH
42808: PPUSH
42809: PPUSH
// pom := GetBase ( building ) ;
42810: LD_ADDR_VAR 0 4
42814: PUSH
42815: LD_VAR 0 1
42819: PPUSH
42820: CALL_OW 274
42824: ST_TO_ADDR
// if not pom then
42825: LD_VAR 0 4
42829: NOT
42830: IFFALSE 42834
// exit ;
42832: GO 42935
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42834: LD_ADDR_VAR 0 5
42838: PUSH
42839: LD_VAR 0 2
42843: PPUSH
42844: LD_VAR 0 1
42848: PPUSH
42849: CALL_OW 248
42853: PPUSH
42854: CALL_OW 450
42858: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42859: LD_ADDR_VAR 0 3
42863: PUSH
42864: LD_VAR 0 4
42868: PPUSH
42869: LD_INT 1
42871: PPUSH
42872: CALL_OW 275
42876: PUSH
42877: LD_VAR 0 5
42881: PUSH
42882: LD_INT 1
42884: ARRAY
42885: GREATEREQUAL
42886: PUSH
42887: LD_VAR 0 4
42891: PPUSH
42892: LD_INT 2
42894: PPUSH
42895: CALL_OW 275
42899: PUSH
42900: LD_VAR 0 5
42904: PUSH
42905: LD_INT 2
42907: ARRAY
42908: GREATEREQUAL
42909: AND
42910: PUSH
42911: LD_VAR 0 4
42915: PPUSH
42916: LD_INT 3
42918: PPUSH
42919: CALL_OW 275
42923: PUSH
42924: LD_VAR 0 5
42928: PUSH
42929: LD_INT 3
42931: ARRAY
42932: GREATEREQUAL
42933: AND
42934: ST_TO_ADDR
// end ;
42935: LD_VAR 0 3
42939: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42940: LD_INT 0
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
// result := false ;
42953: LD_ADDR_VAR 0 8
42957: PUSH
42958: LD_INT 0
42960: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42961: LD_VAR 0 5
42965: NOT
42966: PUSH
42967: LD_VAR 0 1
42971: NOT
42972: OR
42973: PUSH
42974: LD_VAR 0 2
42978: NOT
42979: OR
42980: PUSH
42981: LD_VAR 0 3
42985: NOT
42986: OR
42987: IFFALSE 42991
// exit ;
42989: GO 43805
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42991: LD_ADDR_VAR 0 14
42995: PUSH
42996: LD_VAR 0 1
43000: PPUSH
43001: LD_VAR 0 2
43005: PPUSH
43006: LD_VAR 0 3
43010: PPUSH
43011: LD_VAR 0 4
43015: PPUSH
43016: LD_VAR 0 5
43020: PUSH
43021: LD_INT 1
43023: ARRAY
43024: PPUSH
43025: CALL_OW 248
43029: PPUSH
43030: LD_INT 0
43032: PPUSH
43033: CALL 44642 0 6
43037: ST_TO_ADDR
// if not hexes then
43038: LD_VAR 0 14
43042: NOT
43043: IFFALSE 43047
// exit ;
43045: GO 43805
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43047: LD_ADDR_VAR 0 17
43051: PUSH
43052: LD_VAR 0 5
43056: PPUSH
43057: LD_INT 22
43059: PUSH
43060: LD_VAR 0 13
43064: PPUSH
43065: CALL_OW 255
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 30
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 30
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PPUSH
43106: CALL_OW 72
43110: ST_TO_ADDR
// for i = 1 to hexes do
43111: LD_ADDR_VAR 0 9
43115: PUSH
43116: DOUBLE
43117: LD_INT 1
43119: DEC
43120: ST_TO_ADDR
43121: LD_VAR 0 14
43125: PUSH
43126: FOR_TO
43127: IFFALSE 43803
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43129: LD_ADDR_VAR 0 13
43133: PUSH
43134: LD_VAR 0 14
43138: PUSH
43139: LD_VAR 0 9
43143: ARRAY
43144: PUSH
43145: LD_INT 1
43147: ARRAY
43148: PPUSH
43149: LD_VAR 0 14
43153: PUSH
43154: LD_VAR 0 9
43158: ARRAY
43159: PUSH
43160: LD_INT 2
43162: ARRAY
43163: PPUSH
43164: CALL_OW 428
43168: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43169: LD_VAR 0 14
43173: PUSH
43174: LD_VAR 0 9
43178: ARRAY
43179: PUSH
43180: LD_INT 1
43182: ARRAY
43183: PPUSH
43184: LD_VAR 0 14
43188: PUSH
43189: LD_VAR 0 9
43193: ARRAY
43194: PUSH
43195: LD_INT 2
43197: ARRAY
43198: PPUSH
43199: CALL_OW 351
43203: PUSH
43204: LD_VAR 0 14
43208: PUSH
43209: LD_VAR 0 9
43213: ARRAY
43214: PUSH
43215: LD_INT 1
43217: ARRAY
43218: PPUSH
43219: LD_VAR 0 14
43223: PUSH
43224: LD_VAR 0 9
43228: ARRAY
43229: PUSH
43230: LD_INT 2
43232: ARRAY
43233: PPUSH
43234: CALL_OW 488
43238: NOT
43239: OR
43240: PUSH
43241: LD_VAR 0 13
43245: PPUSH
43246: CALL_OW 247
43250: PUSH
43251: LD_INT 3
43253: EQUAL
43254: OR
43255: IFFALSE 43261
// exit ;
43257: POP
43258: POP
43259: GO 43805
// if not tmp then
43261: LD_VAR 0 13
43265: NOT
43266: IFFALSE 43270
// continue ;
43268: GO 43126
// result := true ;
43270: LD_ADDR_VAR 0 8
43274: PUSH
43275: LD_INT 1
43277: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43278: LD_VAR 0 6
43282: PUSH
43283: LD_VAR 0 13
43287: PPUSH
43288: CALL_OW 247
43292: PUSH
43293: LD_INT 2
43295: EQUAL
43296: AND
43297: PUSH
43298: LD_VAR 0 13
43302: PPUSH
43303: CALL_OW 263
43307: PUSH
43308: LD_INT 1
43310: EQUAL
43311: AND
43312: IFFALSE 43476
// begin if IsDrivenBy ( tmp ) then
43314: LD_VAR 0 13
43318: PPUSH
43319: CALL_OW 311
43323: IFFALSE 43327
// continue ;
43325: GO 43126
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43327: LD_VAR 0 6
43331: PPUSH
43332: LD_INT 3
43334: PUSH
43335: LD_INT 60
43337: PUSH
43338: EMPTY
43339: LIST
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: LD_INT 55
43350: PUSH
43351: EMPTY
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PPUSH
43362: CALL_OW 72
43366: IFFALSE 43474
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43368: LD_ADDR_VAR 0 18
43372: PUSH
43373: LD_VAR 0 6
43377: PPUSH
43378: LD_INT 3
43380: PUSH
43381: LD_INT 60
43383: PUSH
43384: EMPTY
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: LD_INT 55
43396: PUSH
43397: EMPTY
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PPUSH
43408: CALL_OW 72
43412: PUSH
43413: LD_INT 1
43415: ARRAY
43416: ST_TO_ADDR
// if IsInUnit ( driver ) then
43417: LD_VAR 0 18
43421: PPUSH
43422: CALL_OW 310
43426: IFFALSE 43437
// ComExit ( driver ) ;
43428: LD_VAR 0 18
43432: PPUSH
43433: CALL 67826 0 1
// AddComEnterUnit ( driver , tmp ) ;
43437: LD_VAR 0 18
43441: PPUSH
43442: LD_VAR 0 13
43446: PPUSH
43447: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43451: LD_VAR 0 18
43455: PPUSH
43456: LD_VAR 0 7
43460: PPUSH
43461: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43465: LD_VAR 0 18
43469: PPUSH
43470: CALL_OW 181
// end ; continue ;
43474: GO 43126
// end ; if not cleaners or not tmp in cleaners then
43476: LD_VAR 0 6
43480: NOT
43481: PUSH
43482: LD_VAR 0 13
43486: PUSH
43487: LD_VAR 0 6
43491: IN
43492: NOT
43493: OR
43494: IFFALSE 43801
// begin if dep then
43496: LD_VAR 0 17
43500: IFFALSE 43636
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43502: LD_ADDR_VAR 0 16
43506: PUSH
43507: LD_VAR 0 17
43511: PUSH
43512: LD_INT 1
43514: ARRAY
43515: PPUSH
43516: CALL_OW 250
43520: PPUSH
43521: LD_VAR 0 17
43525: PUSH
43526: LD_INT 1
43528: ARRAY
43529: PPUSH
43530: CALL_OW 254
43534: PPUSH
43535: LD_INT 5
43537: PPUSH
43538: CALL_OW 272
43542: PUSH
43543: LD_VAR 0 17
43547: PUSH
43548: LD_INT 1
43550: ARRAY
43551: PPUSH
43552: CALL_OW 251
43556: PPUSH
43557: LD_VAR 0 17
43561: PUSH
43562: LD_INT 1
43564: ARRAY
43565: PPUSH
43566: CALL_OW 254
43570: PPUSH
43571: LD_INT 5
43573: PPUSH
43574: CALL_OW 273
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43583: LD_VAR 0 16
43587: PUSH
43588: LD_INT 1
43590: ARRAY
43591: PPUSH
43592: LD_VAR 0 16
43596: PUSH
43597: LD_INT 2
43599: ARRAY
43600: PPUSH
43601: CALL_OW 488
43605: IFFALSE 43636
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43607: LD_VAR 0 13
43611: PPUSH
43612: LD_VAR 0 16
43616: PUSH
43617: LD_INT 1
43619: ARRAY
43620: PPUSH
43621: LD_VAR 0 16
43625: PUSH
43626: LD_INT 2
43628: ARRAY
43629: PPUSH
43630: CALL_OW 111
// continue ;
43634: GO 43126
// end ; end ; r := GetDir ( tmp ) ;
43636: LD_ADDR_VAR 0 15
43640: PUSH
43641: LD_VAR 0 13
43645: PPUSH
43646: CALL_OW 254
43650: ST_TO_ADDR
// if r = 5 then
43651: LD_VAR 0 15
43655: PUSH
43656: LD_INT 5
43658: EQUAL
43659: IFFALSE 43669
// r := 0 ;
43661: LD_ADDR_VAR 0 15
43665: PUSH
43666: LD_INT 0
43668: ST_TO_ADDR
// for j = r to 5 do
43669: LD_ADDR_VAR 0 10
43673: PUSH
43674: DOUBLE
43675: LD_VAR 0 15
43679: DEC
43680: ST_TO_ADDR
43681: LD_INT 5
43683: PUSH
43684: FOR_TO
43685: IFFALSE 43799
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43687: LD_ADDR_VAR 0 11
43691: PUSH
43692: LD_VAR 0 13
43696: PPUSH
43697: CALL_OW 250
43701: PPUSH
43702: LD_VAR 0 10
43706: PPUSH
43707: LD_INT 2
43709: PPUSH
43710: CALL_OW 272
43714: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43715: LD_ADDR_VAR 0 12
43719: PUSH
43720: LD_VAR 0 13
43724: PPUSH
43725: CALL_OW 251
43729: PPUSH
43730: LD_VAR 0 10
43734: PPUSH
43735: LD_INT 2
43737: PPUSH
43738: CALL_OW 273
43742: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43743: LD_VAR 0 11
43747: PPUSH
43748: LD_VAR 0 12
43752: PPUSH
43753: CALL_OW 488
43757: PUSH
43758: LD_VAR 0 11
43762: PPUSH
43763: LD_VAR 0 12
43767: PPUSH
43768: CALL_OW 428
43772: NOT
43773: AND
43774: IFFALSE 43797
// begin ComMoveXY ( tmp , _x , _y ) ;
43776: LD_VAR 0 13
43780: PPUSH
43781: LD_VAR 0 11
43785: PPUSH
43786: LD_VAR 0 12
43790: PPUSH
43791: CALL_OW 111
// break ;
43795: GO 43799
// end ; end ;
43797: GO 43684
43799: POP
43800: POP
// end ; end ;
43801: GO 43126
43803: POP
43804: POP
// end ;
43805: LD_VAR 0 8
43809: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43810: LD_INT 0
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
// result := false ;
43822: LD_ADDR_VAR 0 6
43826: PUSH
43827: LD_INT 0
43829: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43830: LD_VAR 0 1
43834: NOT
43835: PUSH
43836: LD_VAR 0 1
43840: PPUSH
43841: CALL_OW 266
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: IN
43856: NOT
43857: OR
43858: PUSH
43859: LD_VAR 0 2
43863: NOT
43864: OR
43865: PUSH
43866: LD_VAR 0 5
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: LD_INT 3
43882: PUSH
43883: LD_INT 4
43885: PUSH
43886: LD_INT 5
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: IN
43897: NOT
43898: OR
43899: PUSH
43900: LD_VAR 0 3
43904: PPUSH
43905: LD_VAR 0 4
43909: PPUSH
43910: CALL_OW 488
43914: NOT
43915: OR
43916: IFFALSE 43920
// exit ;
43918: GO 44637
// pom := GetBase ( depot ) ;
43920: LD_ADDR_VAR 0 10
43924: PUSH
43925: LD_VAR 0 1
43929: PPUSH
43930: CALL_OW 274
43934: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43935: LD_ADDR_VAR 0 11
43939: PUSH
43940: LD_VAR 0 2
43944: PPUSH
43945: LD_VAR 0 1
43949: PPUSH
43950: CALL_OW 248
43954: PPUSH
43955: CALL_OW 450
43959: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43960: LD_VAR 0 10
43964: PPUSH
43965: LD_INT 1
43967: PPUSH
43968: CALL_OW 275
43972: PUSH
43973: LD_VAR 0 11
43977: PUSH
43978: LD_INT 1
43980: ARRAY
43981: GREATEREQUAL
43982: PUSH
43983: LD_VAR 0 10
43987: PPUSH
43988: LD_INT 2
43990: PPUSH
43991: CALL_OW 275
43995: PUSH
43996: LD_VAR 0 11
44000: PUSH
44001: LD_INT 2
44003: ARRAY
44004: GREATEREQUAL
44005: AND
44006: PUSH
44007: LD_VAR 0 10
44011: PPUSH
44012: LD_INT 3
44014: PPUSH
44015: CALL_OW 275
44019: PUSH
44020: LD_VAR 0 11
44024: PUSH
44025: LD_INT 3
44027: ARRAY
44028: GREATEREQUAL
44029: AND
44030: NOT
44031: IFFALSE 44035
// exit ;
44033: GO 44637
// if GetBType ( depot ) = b_depot then
44035: LD_VAR 0 1
44039: PPUSH
44040: CALL_OW 266
44044: PUSH
44045: LD_INT 0
44047: EQUAL
44048: IFFALSE 44060
// dist := 28 else
44050: LD_ADDR_VAR 0 14
44054: PUSH
44055: LD_INT 28
44057: ST_TO_ADDR
44058: GO 44068
// dist := 36 ;
44060: LD_ADDR_VAR 0 14
44064: PUSH
44065: LD_INT 36
44067: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44068: LD_VAR 0 1
44072: PPUSH
44073: LD_VAR 0 3
44077: PPUSH
44078: LD_VAR 0 4
44082: PPUSH
44083: CALL_OW 297
44087: PUSH
44088: LD_VAR 0 14
44092: GREATER
44093: IFFALSE 44097
// exit ;
44095: GO 44637
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44097: LD_ADDR_VAR 0 12
44101: PUSH
44102: LD_VAR 0 2
44106: PPUSH
44107: LD_VAR 0 3
44111: PPUSH
44112: LD_VAR 0 4
44116: PPUSH
44117: LD_VAR 0 5
44121: PPUSH
44122: LD_VAR 0 1
44126: PPUSH
44127: CALL_OW 248
44131: PPUSH
44132: LD_INT 0
44134: PPUSH
44135: CALL 44642 0 6
44139: ST_TO_ADDR
// if not hexes then
44140: LD_VAR 0 12
44144: NOT
44145: IFFALSE 44149
// exit ;
44147: GO 44637
// hex := GetHexInfo ( x , y ) ;
44149: LD_ADDR_VAR 0 15
44153: PUSH
44154: LD_VAR 0 3
44158: PPUSH
44159: LD_VAR 0 4
44163: PPUSH
44164: CALL_OW 546
44168: ST_TO_ADDR
// if hex [ 1 ] then
44169: LD_VAR 0 15
44173: PUSH
44174: LD_INT 1
44176: ARRAY
44177: IFFALSE 44181
// exit ;
44179: GO 44637
// height := hex [ 2 ] ;
44181: LD_ADDR_VAR 0 13
44185: PUSH
44186: LD_VAR 0 15
44190: PUSH
44191: LD_INT 2
44193: ARRAY
44194: ST_TO_ADDR
// for i = 1 to hexes do
44195: LD_ADDR_VAR 0 7
44199: PUSH
44200: DOUBLE
44201: LD_INT 1
44203: DEC
44204: ST_TO_ADDR
44205: LD_VAR 0 12
44209: PUSH
44210: FOR_TO
44211: IFFALSE 44541
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44213: LD_VAR 0 12
44217: PUSH
44218: LD_VAR 0 7
44222: ARRAY
44223: PUSH
44224: LD_INT 1
44226: ARRAY
44227: PPUSH
44228: LD_VAR 0 12
44232: PUSH
44233: LD_VAR 0 7
44237: ARRAY
44238: PUSH
44239: LD_INT 2
44241: ARRAY
44242: PPUSH
44243: CALL_OW 488
44247: NOT
44248: PUSH
44249: LD_VAR 0 12
44253: PUSH
44254: LD_VAR 0 7
44258: ARRAY
44259: PUSH
44260: LD_INT 1
44262: ARRAY
44263: PPUSH
44264: LD_VAR 0 12
44268: PUSH
44269: LD_VAR 0 7
44273: ARRAY
44274: PUSH
44275: LD_INT 2
44277: ARRAY
44278: PPUSH
44279: CALL_OW 428
44283: PUSH
44284: LD_INT 0
44286: GREATER
44287: OR
44288: PUSH
44289: LD_VAR 0 12
44293: PUSH
44294: LD_VAR 0 7
44298: ARRAY
44299: PUSH
44300: LD_INT 1
44302: ARRAY
44303: PPUSH
44304: LD_VAR 0 12
44308: PUSH
44309: LD_VAR 0 7
44313: ARRAY
44314: PUSH
44315: LD_INT 2
44317: ARRAY
44318: PPUSH
44319: CALL_OW 351
44323: OR
44324: IFFALSE 44330
// exit ;
44326: POP
44327: POP
44328: GO 44637
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44330: LD_ADDR_VAR 0 8
44334: PUSH
44335: LD_VAR 0 12
44339: PUSH
44340: LD_VAR 0 7
44344: ARRAY
44345: PUSH
44346: LD_INT 1
44348: ARRAY
44349: PPUSH
44350: LD_VAR 0 12
44354: PUSH
44355: LD_VAR 0 7
44359: ARRAY
44360: PUSH
44361: LD_INT 2
44363: ARRAY
44364: PPUSH
44365: CALL_OW 546
44369: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44370: LD_VAR 0 8
44374: PUSH
44375: LD_INT 1
44377: ARRAY
44378: PUSH
44379: LD_VAR 0 8
44383: PUSH
44384: LD_INT 2
44386: ARRAY
44387: PUSH
44388: LD_VAR 0 13
44392: PUSH
44393: LD_INT 2
44395: PLUS
44396: GREATER
44397: OR
44398: PUSH
44399: LD_VAR 0 8
44403: PUSH
44404: LD_INT 2
44406: ARRAY
44407: PUSH
44408: LD_VAR 0 13
44412: PUSH
44413: LD_INT 2
44415: MINUS
44416: LESS
44417: OR
44418: PUSH
44419: LD_VAR 0 8
44423: PUSH
44424: LD_INT 3
44426: ARRAY
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 8
44433: PUSH
44434: LD_INT 9
44436: PUSH
44437: LD_INT 10
44439: PUSH
44440: LD_INT 11
44442: PUSH
44443: LD_INT 12
44445: PUSH
44446: LD_INT 13
44448: PUSH
44449: LD_INT 16
44451: PUSH
44452: LD_INT 17
44454: PUSH
44455: LD_INT 18
44457: PUSH
44458: LD_INT 19
44460: PUSH
44461: LD_INT 20
44463: PUSH
44464: LD_INT 21
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: IN
44482: NOT
44483: OR
44484: PUSH
44485: LD_VAR 0 8
44489: PUSH
44490: LD_INT 5
44492: ARRAY
44493: NOT
44494: OR
44495: PUSH
44496: LD_VAR 0 8
44500: PUSH
44501: LD_INT 6
44503: ARRAY
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 7
44513: PUSH
44514: LD_INT 9
44516: PUSH
44517: LD_INT 10
44519: PUSH
44520: LD_INT 11
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: IN
44531: NOT
44532: OR
44533: IFFALSE 44539
// exit ;
44535: POP
44536: POP
44537: GO 44637
// end ;
44539: GO 44210
44541: POP
44542: POP
// side := GetSide ( depot ) ;
44543: LD_ADDR_VAR 0 9
44547: PUSH
44548: LD_VAR 0 1
44552: PPUSH
44553: CALL_OW 255
44557: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44558: LD_VAR 0 9
44562: PPUSH
44563: LD_VAR 0 3
44567: PPUSH
44568: LD_VAR 0 4
44572: PPUSH
44573: LD_INT 20
44575: PPUSH
44576: CALL 36958 0 4
44580: PUSH
44581: LD_INT 4
44583: ARRAY
44584: IFFALSE 44588
// exit ;
44586: GO 44637
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44588: LD_VAR 0 2
44592: PUSH
44593: LD_INT 29
44595: PUSH
44596: LD_INT 30
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: IN
44603: PUSH
44604: LD_VAR 0 3
44608: PPUSH
44609: LD_VAR 0 4
44613: PPUSH
44614: LD_VAR 0 9
44618: PPUSH
44619: CALL_OW 440
44623: NOT
44624: AND
44625: IFFALSE 44629
// exit ;
44627: GO 44637
// result := true ;
44629: LD_ADDR_VAR 0 6
44633: PUSH
44634: LD_INT 1
44636: ST_TO_ADDR
// end ;
44637: LD_VAR 0 6
44641: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44642: LD_INT 0
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
44654: PPUSH
44655: PPUSH
44656: PPUSH
44657: PPUSH
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
44662: PPUSH
44663: PPUSH
44664: PPUSH
44665: PPUSH
44666: PPUSH
44667: PPUSH
44668: PPUSH
44669: PPUSH
44670: PPUSH
44671: PPUSH
44672: PPUSH
44673: PPUSH
44674: PPUSH
44675: PPUSH
44676: PPUSH
44677: PPUSH
44678: PPUSH
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
// result = [ ] ;
44702: LD_ADDR_VAR 0 7
44706: PUSH
44707: EMPTY
44708: ST_TO_ADDR
// temp_list = [ ] ;
44709: LD_ADDR_VAR 0 9
44713: PUSH
44714: EMPTY
44715: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44716: LD_VAR 0 4
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: LD_INT 4
44735: PUSH
44736: LD_INT 5
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: IN
44747: NOT
44748: PUSH
44749: LD_VAR 0 1
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: IN
44764: PUSH
44765: LD_VAR 0 5
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: IN
44784: NOT
44785: AND
44786: OR
44787: IFFALSE 44791
// exit ;
44789: GO 63182
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44791: LD_VAR 0 1
44795: PUSH
44796: LD_INT 6
44798: PUSH
44799: LD_INT 7
44801: PUSH
44802: LD_INT 8
44804: PUSH
44805: LD_INT 13
44807: PUSH
44808: LD_INT 12
44810: PUSH
44811: LD_INT 15
44813: PUSH
44814: LD_INT 11
44816: PUSH
44817: LD_INT 14
44819: PUSH
44820: LD_INT 10
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: IN
44834: IFFALSE 44844
// btype = b_lab ;
44836: LD_ADDR_VAR 0 1
44840: PUSH
44841: LD_INT 6
44843: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44844: LD_VAR 0 6
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: IN
44863: NOT
44864: PUSH
44865: LD_VAR 0 1
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 6
44884: PUSH
44885: LD_INT 36
44887: PUSH
44888: LD_INT 4
44890: PUSH
44891: LD_INT 5
44893: PUSH
44894: LD_INT 31
44896: PUSH
44897: LD_INT 32
44899: PUSH
44900: LD_INT 33
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: IN
44916: NOT
44917: PUSH
44918: LD_VAR 0 6
44922: PUSH
44923: LD_INT 1
44925: EQUAL
44926: AND
44927: OR
44928: PUSH
44929: LD_VAR 0 1
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 3
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: IN
44944: NOT
44945: PUSH
44946: LD_VAR 0 6
44950: PUSH
44951: LD_INT 2
44953: EQUAL
44954: AND
44955: OR
44956: IFFALSE 44966
// mode = 0 ;
44958: LD_ADDR_VAR 0 6
44962: PUSH
44963: LD_INT 0
44965: ST_TO_ADDR
// case mode of 0 :
44966: LD_VAR 0 6
44970: PUSH
44971: LD_INT 0
44973: DOUBLE
44974: EQUAL
44975: IFTRUE 44979
44977: GO 56432
44979: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44980: LD_ADDR_VAR 0 11
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 3
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 3
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45173: LD_ADDR_VAR 0 12
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: NEG
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 3
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45369: LD_ADDR_VAR 0 13
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 3
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: LD_INT 3
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45568: LD_ADDR_VAR 0 14
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45764: LD_ADDR_VAR 0 15
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 3
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 3
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45957: LD_ADDR_VAR 0 16
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 3
46114: PUSH
46115: LD_INT 3
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 3
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46150: LD_ADDR_VAR 0 17
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46380: LD_ADDR_VAR 0 18
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46610: LD_ADDR_VAR 0 19
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46840: LD_ADDR_VAR 0 20
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47070: LD_ADDR_VAR 0 21
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47300: LD_ADDR_VAR 0 22
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47530: LD_ADDR_VAR 0 23
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47810: LD_ADDR_VAR 0 24
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48086: LD_ADDR_VAR 0 25
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 3
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 3
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48360: LD_ADDR_VAR 0 26
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48636: LD_ADDR_VAR 0 27
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 3
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 3
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48916: LD_ADDR_VAR 0 28
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 3
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 3
49151: NEG
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49198: LD_ADDR_VAR 0 29
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 2
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: NEG
49389: PUSH
49390: LD_INT 3
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 3
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49477: LD_ADDR_VAR 0 30
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 3
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: LD_INT 3
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49755: LD_ADDR_VAR 0 31
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50033: LD_ADDR_VAR 0 32
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 2
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 3
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 3
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50311: LD_ADDR_VAR 0 33
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50590: LD_ADDR_VAR 0 34
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 3
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50870: LD_ADDR_VAR 0 35
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50982: LD_ADDR_VAR 0 36
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 2
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51094: LD_ADDR_VAR 0 37
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51206: LD_ADDR_VAR 0 38
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51318: LD_ADDR_VAR 0 39
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51430: LD_ADDR_VAR 0 40
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51542: LD_ADDR_VAR 0 41
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: LD_INT 3
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 3
51839: NEG
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 3
51851: NEG
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51892: LD_ADDR_VAR 0 42
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: LD_INT 3
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 3
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 3
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 3
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 3
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: NEG
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52242: LD_ADDR_VAR 0 43
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 2
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: LD_INT 3
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 3
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 3
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: NEG
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52590: LD_ADDR_VAR 0 44
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 2
52780: NEG
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: LD_INT 3
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52940: LD_ADDR_VAR 0 45
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 3
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 3
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 3
53237: NEG
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: NEG
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53290: LD_ADDR_VAR 0 46
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 3
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 3
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53638: LD_ADDR_VAR 0 47
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53789: LD_ADDR_VAR 0 48
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 2
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53936: LD_ADDR_VAR 0 49
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54080: LD_ADDR_VAR 0 50
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54224: LD_ADDR_VAR 0 51
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54371: LD_ADDR_VAR 0 52
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54522: LD_ADDR_VAR 0 53
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54752: LD_ADDR_VAR 0 54
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: NEG
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54982: LD_ADDR_VAR 0 55
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55212: LD_ADDR_VAR 0 56
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55442: LD_ADDR_VAR 0 57
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: NEG
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55672: LD_ADDR_VAR 0 58
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55902: LD_ADDR_VAR 0 59
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55990: LD_ADDR_VAR 0 60
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56078: LD_ADDR_VAR 0 61
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56166: LD_ADDR_VAR 0 62
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56254: LD_ADDR_VAR 0 63
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 1
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56342: LD_ADDR_VAR 0 64
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: ST_TO_ADDR
// end ; 1 :
56430: GO 62327
56432: LD_INT 1
56434: DOUBLE
56435: EQUAL
56436: IFTRUE 56440
56438: GO 59063
56440: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56441: LD_ADDR_VAR 0 11
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56485: LD_ADDR_VAR 0 12
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 3
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56526: LD_ADDR_VAR 0 13
56530: PUSH
56531: LD_INT 3
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: LD_INT 3
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: LIST
56565: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56566: LD_ADDR_VAR 0 14
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 3
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: LD_INT 3
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56607: LD_ADDR_VAR 0 15
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: LIST
56650: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56651: LD_ADDR_VAR 0 16
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: LD_INT 3
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56697: LD_ADDR_VAR 0 17
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56741: LD_ADDR_VAR 0 18
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56782: LD_ADDR_VAR 0 19
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56822: LD_ADDR_VAR 0 20
56826: PUSH
56827: LD_INT 1
56829: PUSH
56830: LD_INT 3
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 3
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56863: LD_ADDR_VAR 0 21
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 3
56881: NEG
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: LIST
56906: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56907: LD_ADDR_VAR 0 22
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: LD_INT 3
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: NEG
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56953: LD_ADDR_VAR 0 23
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 4
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56997: LD_ADDR_VAR 0 24
57001: PUSH
57002: LD_INT 3
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 4
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: LIST
57037: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57038: LD_ADDR_VAR 0 25
57042: PUSH
57043: LD_INT 3
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 4
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 3
57065: PUSH
57066: LD_INT 4
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57078: LD_ADDR_VAR 0 26
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 4
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 3
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57119: LD_ADDR_VAR 0 27
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 3
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 4
57148: NEG
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57163: LD_ADDR_VAR 0 28
57167: PUSH
57168: LD_INT 3
57170: NEG
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: LD_INT 4
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 4
57194: NEG
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57209: LD_ADDR_VAR 0 29
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 3
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 3
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 4
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 4
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 5
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 5
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 4
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 6
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 6
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 5
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57364: LD_ADDR_VAR 0 30
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 4
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 4
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 4
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 5
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 5
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 5
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 6
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 6
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57507: LD_ADDR_VAR 0 31
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 3
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 4
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 4
57554: PUSH
57555: LD_INT 4
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: LD_INT 4
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 5
57574: PUSH
57575: LD_INT 4
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 5
57584: PUSH
57585: LD_INT 5
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 4
57594: PUSH
57595: LD_INT 5
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 6
57604: PUSH
57605: LD_INT 5
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 6
57614: PUSH
57615: LD_INT 6
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 5
57624: PUSH
57625: LD_INT 6
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57646: LD_ADDR_VAR 0 32
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 3
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 4
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 4
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 5
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 5
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 4
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 6
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 6
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 5
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57789: LD_ADDR_VAR 0 33
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 3
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 4
57841: NEG
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 4
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 4
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 5
57875: NEG
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 5
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 5
57898: NEG
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 6
57909: NEG
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 6
57920: NEG
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57944: LD_ADDR_VAR 0 34
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 3
57963: NEG
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 3
57975: NEG
57976: PUSH
57977: LD_INT 3
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: LD_INT 4
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 4
57999: NEG
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 4
58011: NEG
58012: PUSH
58013: LD_INT 4
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 4
58023: NEG
58024: PUSH
58025: LD_INT 5
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 5
58035: NEG
58036: PUSH
58037: LD_INT 4
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 5
58047: NEG
58048: PUSH
58049: LD_INT 5
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 5
58059: NEG
58060: PUSH
58061: LD_INT 6
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 6
58071: NEG
58072: PUSH
58073: LD_INT 5
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 6
58083: NEG
58084: PUSH
58085: LD_INT 6
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58107: LD_ADDR_VAR 0 41
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58151: LD_ADDR_VAR 0 42
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: LIST
58191: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58192: LD_ADDR_VAR 0 43
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: LD_INT 3
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: LIST
58231: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58232: LD_ADDR_VAR 0 44
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: LIST
58272: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58273: LD_ADDR_VAR 0 45
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 3
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: LIST
58316: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58317: LD_ADDR_VAR 0 46
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58363: LD_ADDR_VAR 0 47
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58396: LD_ADDR_VAR 0 48
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58427: LD_ADDR_VAR 0 49
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58456: LD_ADDR_VAR 0 50
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 3
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58485: LD_ADDR_VAR 0 51
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58516: LD_ADDR_VAR 0 52
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58549: LD_ADDR_VAR 0 53
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: LD_INT 3
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 3
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 2
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58593: LD_ADDR_VAR 0 54
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 3
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58634: LD_ADDR_VAR 0 55
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: LIST
58673: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58674: LD_ADDR_VAR 0 56
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: LIST
58714: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58715: LD_ADDR_VAR 0 57
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 3
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: LIST
58758: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58759: LD_ADDR_VAR 0 58
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: LD_INT 3
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58805: LD_ADDR_VAR 0 59
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: LD_INT 2
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: LIST
58848: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58849: LD_ADDR_VAR 0 60
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: LIST
58889: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58890: LD_ADDR_VAR 0 61
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58930: LD_ADDR_VAR 0 62
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 2
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58971: LD_ADDR_VAR 0 63
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59015: LD_ADDR_VAR 0 64
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: ST_TO_ADDR
// end ; 2 :
59061: GO 62327
59063: LD_INT 2
59065: DOUBLE
59066: EQUAL
59067: IFTRUE 59071
59069: GO 62326
59071: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59072: LD_ADDR_VAR 0 29
59076: PUSH
59077: LD_INT 4
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 4
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 5
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 5
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 4
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 5
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 4
59192: PUSH
59193: LD_INT 3
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 4
59202: PUSH
59203: LD_INT 4
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: LD_INT 4
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 4
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 4
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 4
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 5
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 5
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 4
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: LD_INT 5
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 4
59411: NEG
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 4
59434: NEG
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: NEG
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 4
59457: NEG
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 4
59469: NEG
59470: PUSH
59471: LD_INT 5
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: LD_INT 4
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: NEG
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: NEG
59506: PUSH
59507: LD_INT 3
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 5
59517: NEG
59518: PUSH
59519: LD_INT 4
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: NEG
59530: PUSH
59531: LD_INT 5
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 5
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 5
59553: NEG
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59610: LD_ADDR_VAR 0 30
59614: PUSH
59615: LD_INT 4
59617: PUSH
59618: LD_INT 4
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 4
59627: PUSH
59628: LD_INT 3
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 5
59637: PUSH
59638: LD_INT 4
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 5
59647: PUSH
59648: LD_INT 5
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 4
59657: PUSH
59658: LD_INT 5
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 3
59667: PUSH
59668: LD_INT 4
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: LD_INT 3
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 5
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: LD_INT 5
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: LD_INT 3
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: LD_INT 3
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 4
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 4
59800: NEG
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 4
59811: NEG
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 3
59823: NEG
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 4
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 5
59856: NEG
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 5
59867: NEG
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 5
59879: NEG
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: NEG
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: NEG
59915: PUSH
59916: LD_INT 4
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 3
59950: NEG
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 4
59962: NEG
59963: PUSH
59964: LD_INT 3
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 4
59974: NEG
59975: PUSH
59976: LD_INT 4
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: LD_INT 4
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 4
59998: NEG
59999: PUSH
60000: LD_INT 2
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 5
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 4
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 3
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: LD_INT 4
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: NEG
60078: PUSH
60079: LD_INT 5
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: LD_INT 3
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 2
60100: NEG
60101: PUSH
60102: LD_INT 5
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60157: LD_ADDR_VAR 0 31
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 4
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 4
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: LD_INT 5
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 5
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 4
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: LD_INT 5
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 3
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 4
60313: NEG
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 4
60324: NEG
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 4
60336: NEG
60337: PUSH
60338: LD_INT 2
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: NEG
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 4
60359: NEG
60360: PUSH
60361: LD_INT 4
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 4
60371: NEG
60372: PUSH
60373: LD_INT 5
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: LD_INT 4
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 4
60407: NEG
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 5
60419: NEG
60420: PUSH
60421: LD_INT 4
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 5
60431: NEG
60432: PUSH
60433: LD_INT 5
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 3
60443: NEG
60444: PUSH
60445: LD_INT 5
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 5
60455: NEG
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 3
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 4
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 3
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 4
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 4
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 4
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 4
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 5
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 5
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 4
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 3
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 5
60652: PUSH
60653: LD_INT 2
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60707: LD_ADDR_VAR 0 32
60711: PUSH
60712: LD_INT 4
60714: NEG
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 4
60725: NEG
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 4
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 5
60770: NEG
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 5
60781: NEG
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 5
60793: NEG
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 3
60805: NEG
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: NEG
60829: PUSH
60830: LD_INT 4
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 3
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 3
60864: NEG
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 4
60876: NEG
60877: PUSH
60878: LD_INT 3
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 4
60888: NEG
60889: PUSH
60890: LD_INT 4
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: LD_INT 4
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 4
60912: NEG
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 4
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 5
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: LD_INT 4
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 3
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: LD_INT 4
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 5
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: LD_INT 5
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 3
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 4
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 4
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 3
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: LD_INT 2
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 4
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 4
61119: PUSH
61120: LD_INT 4
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 5
61139: PUSH
61140: LD_INT 4
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 5
61149: PUSH
61150: LD_INT 5
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 4
61159: PUSH
61160: LD_INT 5
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 3
61169: PUSH
61170: LD_INT 4
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: LD_INT 3
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 5
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 3
61199: PUSH
61200: LD_INT 5
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61254: LD_ADDR_VAR 0 33
61258: PUSH
61259: LD_INT 4
61261: NEG
61262: PUSH
61263: LD_INT 4
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 4
61273: NEG
61274: PUSH
61275: LD_INT 5
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 3
61285: NEG
61286: PUSH
61287: LD_INT 4
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: LD_INT 3
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 4
61309: NEG
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 5
61321: NEG
61322: PUSH
61323: LD_INT 4
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 5
61333: NEG
61334: PUSH
61335: LD_INT 5
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 3
61345: NEG
61346: PUSH
61347: LD_INT 5
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 5
61357: NEG
61358: PUSH
61359: LD_INT 3
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 0
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: LD_INT 4
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: LD_INT 2
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 4
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 2
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: LD_INT 4
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 4
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 4
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 5
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 5
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 4
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 3
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 5
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: LD_INT 3
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 4
61584: PUSH
61585: LD_INT 3
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 4
61594: PUSH
61595: LD_INT 4
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 3
61604: PUSH
61605: LD_INT 4
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: LD_INT 3
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 4
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: LD_INT 4
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 4
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: LD_INT 4
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: LD_INT 5
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 5
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: LD_INT 4
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: LD_INT 5
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 3
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61792: LD_ADDR_VAR 0 34
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: LD_INT 4
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 5
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 4
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 3
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 3
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 4
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: LD_INT 5
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: LD_INT 3
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: LD_INT 5
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 3
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 4
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 4
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 4
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 4
61994: PUSH
61995: LD_INT 4
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 4
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 5
62014: PUSH
62015: LD_INT 4
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 5
62024: PUSH
62025: LD_INT 5
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 4
62034: PUSH
62035: LD_INT 5
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: PUSH
62045: LD_INT 4
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 3
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 5
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: LD_INT 5
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: LD_INT 4
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 4
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: LD_INT 3
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 2
62156: PUSH
62157: LD_INT 4
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 4
62177: NEG
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 4
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 3
62200: NEG
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 3
62211: NEG
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 4
62222: NEG
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 5
62233: NEG
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 5
62244: NEG
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 5
62256: NEG
62257: PUSH
62258: LD_INT 2
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: ST_TO_ADDR
// end ; end ;
62324: GO 62327
62326: POP
// case btype of b_depot , b_warehouse :
62327: LD_VAR 0 1
62331: PUSH
62332: LD_INT 0
62334: DOUBLE
62335: EQUAL
62336: IFTRUE 62346
62338: LD_INT 1
62340: DOUBLE
62341: EQUAL
62342: IFTRUE 62346
62344: GO 62547
62346: POP
// case nation of nation_american :
62347: LD_VAR 0 5
62351: PUSH
62352: LD_INT 1
62354: DOUBLE
62355: EQUAL
62356: IFTRUE 62360
62358: GO 62416
62360: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62361: LD_ADDR_VAR 0 9
62365: PUSH
62366: LD_VAR 0 11
62370: PUSH
62371: LD_VAR 0 12
62375: PUSH
62376: LD_VAR 0 13
62380: PUSH
62381: LD_VAR 0 14
62385: PUSH
62386: LD_VAR 0 15
62390: PUSH
62391: LD_VAR 0 16
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: PUSH
62404: LD_VAR 0 4
62408: PUSH
62409: LD_INT 1
62411: PLUS
62412: ARRAY
62413: ST_TO_ADDR
62414: GO 62545
62416: LD_INT 2
62418: DOUBLE
62419: EQUAL
62420: IFTRUE 62424
62422: GO 62480
62424: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62425: LD_ADDR_VAR 0 9
62429: PUSH
62430: LD_VAR 0 17
62434: PUSH
62435: LD_VAR 0 18
62439: PUSH
62440: LD_VAR 0 19
62444: PUSH
62445: LD_VAR 0 20
62449: PUSH
62450: LD_VAR 0 21
62454: PUSH
62455: LD_VAR 0 22
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: PUSH
62468: LD_VAR 0 4
62472: PUSH
62473: LD_INT 1
62475: PLUS
62476: ARRAY
62477: ST_TO_ADDR
62478: GO 62545
62480: LD_INT 3
62482: DOUBLE
62483: EQUAL
62484: IFTRUE 62488
62486: GO 62544
62488: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62489: LD_ADDR_VAR 0 9
62493: PUSH
62494: LD_VAR 0 23
62498: PUSH
62499: LD_VAR 0 24
62503: PUSH
62504: LD_VAR 0 25
62508: PUSH
62509: LD_VAR 0 26
62513: PUSH
62514: LD_VAR 0 27
62518: PUSH
62519: LD_VAR 0 28
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: PUSH
62532: LD_VAR 0 4
62536: PUSH
62537: LD_INT 1
62539: PLUS
62540: ARRAY
62541: ST_TO_ADDR
62542: GO 62545
62544: POP
62545: GO 63100
62547: LD_INT 2
62549: DOUBLE
62550: EQUAL
62551: IFTRUE 62561
62553: LD_INT 3
62555: DOUBLE
62556: EQUAL
62557: IFTRUE 62561
62559: GO 62617
62561: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62562: LD_ADDR_VAR 0 9
62566: PUSH
62567: LD_VAR 0 29
62571: PUSH
62572: LD_VAR 0 30
62576: PUSH
62577: LD_VAR 0 31
62581: PUSH
62582: LD_VAR 0 32
62586: PUSH
62587: LD_VAR 0 33
62591: PUSH
62592: LD_VAR 0 34
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: PUSH
62605: LD_VAR 0 4
62609: PUSH
62610: LD_INT 1
62612: PLUS
62613: ARRAY
62614: ST_TO_ADDR
62615: GO 63100
62617: LD_INT 16
62619: DOUBLE
62620: EQUAL
62621: IFTRUE 62679
62623: LD_INT 17
62625: DOUBLE
62626: EQUAL
62627: IFTRUE 62679
62629: LD_INT 18
62631: DOUBLE
62632: EQUAL
62633: IFTRUE 62679
62635: LD_INT 19
62637: DOUBLE
62638: EQUAL
62639: IFTRUE 62679
62641: LD_INT 22
62643: DOUBLE
62644: EQUAL
62645: IFTRUE 62679
62647: LD_INT 20
62649: DOUBLE
62650: EQUAL
62651: IFTRUE 62679
62653: LD_INT 21
62655: DOUBLE
62656: EQUAL
62657: IFTRUE 62679
62659: LD_INT 23
62661: DOUBLE
62662: EQUAL
62663: IFTRUE 62679
62665: LD_INT 24
62667: DOUBLE
62668: EQUAL
62669: IFTRUE 62679
62671: LD_INT 25
62673: DOUBLE
62674: EQUAL
62675: IFTRUE 62679
62677: GO 62735
62679: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62680: LD_ADDR_VAR 0 9
62684: PUSH
62685: LD_VAR 0 35
62689: PUSH
62690: LD_VAR 0 36
62694: PUSH
62695: LD_VAR 0 37
62699: PUSH
62700: LD_VAR 0 38
62704: PUSH
62705: LD_VAR 0 39
62709: PUSH
62710: LD_VAR 0 40
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: PUSH
62723: LD_VAR 0 4
62727: PUSH
62728: LD_INT 1
62730: PLUS
62731: ARRAY
62732: ST_TO_ADDR
62733: GO 63100
62735: LD_INT 6
62737: DOUBLE
62738: EQUAL
62739: IFTRUE 62791
62741: LD_INT 7
62743: DOUBLE
62744: EQUAL
62745: IFTRUE 62791
62747: LD_INT 8
62749: DOUBLE
62750: EQUAL
62751: IFTRUE 62791
62753: LD_INT 13
62755: DOUBLE
62756: EQUAL
62757: IFTRUE 62791
62759: LD_INT 12
62761: DOUBLE
62762: EQUAL
62763: IFTRUE 62791
62765: LD_INT 15
62767: DOUBLE
62768: EQUAL
62769: IFTRUE 62791
62771: LD_INT 11
62773: DOUBLE
62774: EQUAL
62775: IFTRUE 62791
62777: LD_INT 14
62779: DOUBLE
62780: EQUAL
62781: IFTRUE 62791
62783: LD_INT 10
62785: DOUBLE
62786: EQUAL
62787: IFTRUE 62791
62789: GO 62847
62791: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62792: LD_ADDR_VAR 0 9
62796: PUSH
62797: LD_VAR 0 41
62801: PUSH
62802: LD_VAR 0 42
62806: PUSH
62807: LD_VAR 0 43
62811: PUSH
62812: LD_VAR 0 44
62816: PUSH
62817: LD_VAR 0 45
62821: PUSH
62822: LD_VAR 0 46
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: PUSH
62835: LD_VAR 0 4
62839: PUSH
62840: LD_INT 1
62842: PLUS
62843: ARRAY
62844: ST_TO_ADDR
62845: GO 63100
62847: LD_INT 36
62849: DOUBLE
62850: EQUAL
62851: IFTRUE 62855
62853: GO 62911
62855: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62856: LD_ADDR_VAR 0 9
62860: PUSH
62861: LD_VAR 0 47
62865: PUSH
62866: LD_VAR 0 48
62870: PUSH
62871: LD_VAR 0 49
62875: PUSH
62876: LD_VAR 0 50
62880: PUSH
62881: LD_VAR 0 51
62885: PUSH
62886: LD_VAR 0 52
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: PUSH
62899: LD_VAR 0 4
62903: PUSH
62904: LD_INT 1
62906: PLUS
62907: ARRAY
62908: ST_TO_ADDR
62909: GO 63100
62911: LD_INT 4
62913: DOUBLE
62914: EQUAL
62915: IFTRUE 62937
62917: LD_INT 5
62919: DOUBLE
62920: EQUAL
62921: IFTRUE 62937
62923: LD_INT 34
62925: DOUBLE
62926: EQUAL
62927: IFTRUE 62937
62929: LD_INT 37
62931: DOUBLE
62932: EQUAL
62933: IFTRUE 62937
62935: GO 62993
62937: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62938: LD_ADDR_VAR 0 9
62942: PUSH
62943: LD_VAR 0 53
62947: PUSH
62948: LD_VAR 0 54
62952: PUSH
62953: LD_VAR 0 55
62957: PUSH
62958: LD_VAR 0 56
62962: PUSH
62963: LD_VAR 0 57
62967: PUSH
62968: LD_VAR 0 58
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: PUSH
62981: LD_VAR 0 4
62985: PUSH
62986: LD_INT 1
62988: PLUS
62989: ARRAY
62990: ST_TO_ADDR
62991: GO 63100
62993: LD_INT 31
62995: DOUBLE
62996: EQUAL
62997: IFTRUE 63043
62999: LD_INT 32
63001: DOUBLE
63002: EQUAL
63003: IFTRUE 63043
63005: LD_INT 33
63007: DOUBLE
63008: EQUAL
63009: IFTRUE 63043
63011: LD_INT 27
63013: DOUBLE
63014: EQUAL
63015: IFTRUE 63043
63017: LD_INT 26
63019: DOUBLE
63020: EQUAL
63021: IFTRUE 63043
63023: LD_INT 28
63025: DOUBLE
63026: EQUAL
63027: IFTRUE 63043
63029: LD_INT 29
63031: DOUBLE
63032: EQUAL
63033: IFTRUE 63043
63035: LD_INT 30
63037: DOUBLE
63038: EQUAL
63039: IFTRUE 63043
63041: GO 63099
63043: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63044: LD_ADDR_VAR 0 9
63048: PUSH
63049: LD_VAR 0 59
63053: PUSH
63054: LD_VAR 0 60
63058: PUSH
63059: LD_VAR 0 61
63063: PUSH
63064: LD_VAR 0 62
63068: PUSH
63069: LD_VAR 0 63
63073: PUSH
63074: LD_VAR 0 64
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: PUSH
63087: LD_VAR 0 4
63091: PUSH
63092: LD_INT 1
63094: PLUS
63095: ARRAY
63096: ST_TO_ADDR
63097: GO 63100
63099: POP
// temp_list2 = [ ] ;
63100: LD_ADDR_VAR 0 10
63104: PUSH
63105: EMPTY
63106: ST_TO_ADDR
// for i in temp_list do
63107: LD_ADDR_VAR 0 8
63111: PUSH
63112: LD_VAR 0 9
63116: PUSH
63117: FOR_IN
63118: IFFALSE 63170
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63120: LD_ADDR_VAR 0 10
63124: PUSH
63125: LD_VAR 0 10
63129: PUSH
63130: LD_VAR 0 8
63134: PUSH
63135: LD_INT 1
63137: ARRAY
63138: PUSH
63139: LD_VAR 0 2
63143: PLUS
63144: PUSH
63145: LD_VAR 0 8
63149: PUSH
63150: LD_INT 2
63152: ARRAY
63153: PUSH
63154: LD_VAR 0 3
63158: PLUS
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: EMPTY
63165: LIST
63166: ADD
63167: ST_TO_ADDR
63168: GO 63117
63170: POP
63171: POP
// result = temp_list2 ;
63172: LD_ADDR_VAR 0 7
63176: PUSH
63177: LD_VAR 0 10
63181: ST_TO_ADDR
// end ;
63182: LD_VAR 0 7
63186: RET
// export function EnemyInRange ( unit , dist ) ; begin
63187: LD_INT 0
63189: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63190: LD_ADDR_VAR 0 3
63194: PUSH
63195: LD_VAR 0 1
63199: PPUSH
63200: CALL_OW 255
63204: PPUSH
63205: LD_VAR 0 1
63209: PPUSH
63210: CALL_OW 250
63214: PPUSH
63215: LD_VAR 0 1
63219: PPUSH
63220: CALL_OW 251
63224: PPUSH
63225: LD_VAR 0 2
63229: PPUSH
63230: CALL 36958 0 4
63234: PUSH
63235: LD_INT 4
63237: ARRAY
63238: ST_TO_ADDR
// end ;
63239: LD_VAR 0 3
63243: RET
// export function PlayerSeeMe ( unit ) ; begin
63244: LD_INT 0
63246: PPUSH
// result := See ( your_side , unit ) ;
63247: LD_ADDR_VAR 0 2
63251: PUSH
63252: LD_OWVAR 2
63256: PPUSH
63257: LD_VAR 0 1
63261: PPUSH
63262: CALL_OW 292
63266: ST_TO_ADDR
// end ;
63267: LD_VAR 0 2
63271: RET
// export function ReverseDir ( unit ) ; begin
63272: LD_INT 0
63274: PPUSH
// if not unit then
63275: LD_VAR 0 1
63279: NOT
63280: IFFALSE 63284
// exit ;
63282: GO 63307
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63284: LD_ADDR_VAR 0 2
63288: PUSH
63289: LD_VAR 0 1
63293: PPUSH
63294: CALL_OW 254
63298: PUSH
63299: LD_INT 3
63301: PLUS
63302: PUSH
63303: LD_INT 6
63305: MOD
63306: ST_TO_ADDR
// end ;
63307: LD_VAR 0 2
63311: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63312: LD_INT 0
63314: PPUSH
63315: PPUSH
63316: PPUSH
63317: PPUSH
63318: PPUSH
// if not hexes then
63319: LD_VAR 0 2
63323: NOT
63324: IFFALSE 63328
// exit ;
63326: GO 63476
// dist := 9999 ;
63328: LD_ADDR_VAR 0 5
63332: PUSH
63333: LD_INT 9999
63335: ST_TO_ADDR
// for i = 1 to hexes do
63336: LD_ADDR_VAR 0 4
63340: PUSH
63341: DOUBLE
63342: LD_INT 1
63344: DEC
63345: ST_TO_ADDR
63346: LD_VAR 0 2
63350: PUSH
63351: FOR_TO
63352: IFFALSE 63464
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63354: LD_VAR 0 1
63358: PPUSH
63359: LD_VAR 0 2
63363: PUSH
63364: LD_VAR 0 4
63368: ARRAY
63369: PUSH
63370: LD_INT 1
63372: ARRAY
63373: PPUSH
63374: LD_VAR 0 2
63378: PUSH
63379: LD_VAR 0 4
63383: ARRAY
63384: PUSH
63385: LD_INT 2
63387: ARRAY
63388: PPUSH
63389: CALL_OW 297
63393: PUSH
63394: LD_VAR 0 5
63398: LESS
63399: IFFALSE 63462
// begin hex := hexes [ i ] ;
63401: LD_ADDR_VAR 0 7
63405: PUSH
63406: LD_VAR 0 2
63410: PUSH
63411: LD_VAR 0 4
63415: ARRAY
63416: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63417: LD_ADDR_VAR 0 5
63421: PUSH
63422: LD_VAR 0 1
63426: PPUSH
63427: LD_VAR 0 2
63431: PUSH
63432: LD_VAR 0 4
63436: ARRAY
63437: PUSH
63438: LD_INT 1
63440: ARRAY
63441: PPUSH
63442: LD_VAR 0 2
63446: PUSH
63447: LD_VAR 0 4
63451: ARRAY
63452: PUSH
63453: LD_INT 2
63455: ARRAY
63456: PPUSH
63457: CALL_OW 297
63461: ST_TO_ADDR
// end ; end ;
63462: GO 63351
63464: POP
63465: POP
// result := hex ;
63466: LD_ADDR_VAR 0 3
63470: PUSH
63471: LD_VAR 0 7
63475: ST_TO_ADDR
// end ;
63476: LD_VAR 0 3
63480: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63481: LD_INT 0
63483: PPUSH
63484: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63485: LD_VAR 0 1
63489: NOT
63490: PUSH
63491: LD_VAR 0 1
63495: PUSH
63496: LD_INT 21
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 23
63508: PUSH
63509: LD_INT 2
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PPUSH
63520: CALL_OW 69
63524: IN
63525: NOT
63526: OR
63527: IFFALSE 63531
// exit ;
63529: GO 63578
// for i = 1 to 3 do
63531: LD_ADDR_VAR 0 3
63535: PUSH
63536: DOUBLE
63537: LD_INT 1
63539: DEC
63540: ST_TO_ADDR
63541: LD_INT 3
63543: PUSH
63544: FOR_TO
63545: IFFALSE 63576
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63547: LD_VAR 0 1
63551: PPUSH
63552: CALL_OW 250
63556: PPUSH
63557: LD_VAR 0 1
63561: PPUSH
63562: CALL_OW 251
63566: PPUSH
63567: LD_INT 1
63569: PPUSH
63570: CALL_OW 453
63574: GO 63544
63576: POP
63577: POP
// end ;
63578: LD_VAR 0 2
63582: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63583: LD_INT 0
63585: PPUSH
63586: PPUSH
63587: PPUSH
63588: PPUSH
63589: PPUSH
63590: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63591: LD_VAR 0 1
63595: NOT
63596: PUSH
63597: LD_VAR 0 2
63601: NOT
63602: OR
63603: PUSH
63604: LD_VAR 0 1
63608: PPUSH
63609: CALL_OW 314
63613: OR
63614: IFFALSE 63618
// exit ;
63616: GO 64059
// x := GetX ( enemy_unit ) ;
63618: LD_ADDR_VAR 0 7
63622: PUSH
63623: LD_VAR 0 2
63627: PPUSH
63628: CALL_OW 250
63632: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63633: LD_ADDR_VAR 0 8
63637: PUSH
63638: LD_VAR 0 2
63642: PPUSH
63643: CALL_OW 251
63647: ST_TO_ADDR
// if not x or not y then
63648: LD_VAR 0 7
63652: NOT
63653: PUSH
63654: LD_VAR 0 8
63658: NOT
63659: OR
63660: IFFALSE 63664
// exit ;
63662: GO 64059
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63664: LD_ADDR_VAR 0 6
63668: PUSH
63669: LD_VAR 0 7
63673: PPUSH
63674: LD_INT 0
63676: PPUSH
63677: LD_INT 4
63679: PPUSH
63680: CALL_OW 272
63684: PUSH
63685: LD_VAR 0 8
63689: PPUSH
63690: LD_INT 0
63692: PPUSH
63693: LD_INT 4
63695: PPUSH
63696: CALL_OW 273
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_VAR 0 7
63709: PPUSH
63710: LD_INT 1
63712: PPUSH
63713: LD_INT 4
63715: PPUSH
63716: CALL_OW 272
63720: PUSH
63721: LD_VAR 0 8
63725: PPUSH
63726: LD_INT 1
63728: PPUSH
63729: LD_INT 4
63731: PPUSH
63732: CALL_OW 273
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_VAR 0 7
63745: PPUSH
63746: LD_INT 2
63748: PPUSH
63749: LD_INT 4
63751: PPUSH
63752: CALL_OW 272
63756: PUSH
63757: LD_VAR 0 8
63761: PPUSH
63762: LD_INT 2
63764: PPUSH
63765: LD_INT 4
63767: PPUSH
63768: CALL_OW 273
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_VAR 0 7
63781: PPUSH
63782: LD_INT 3
63784: PPUSH
63785: LD_INT 4
63787: PPUSH
63788: CALL_OW 272
63792: PUSH
63793: LD_VAR 0 8
63797: PPUSH
63798: LD_INT 3
63800: PPUSH
63801: LD_INT 4
63803: PPUSH
63804: CALL_OW 273
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_VAR 0 7
63817: PPUSH
63818: LD_INT 4
63820: PPUSH
63821: LD_INT 4
63823: PPUSH
63824: CALL_OW 272
63828: PUSH
63829: LD_VAR 0 8
63833: PPUSH
63834: LD_INT 4
63836: PPUSH
63837: LD_INT 4
63839: PPUSH
63840: CALL_OW 273
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_VAR 0 7
63853: PPUSH
63854: LD_INT 5
63856: PPUSH
63857: LD_INT 4
63859: PPUSH
63860: CALL_OW 272
63864: PUSH
63865: LD_VAR 0 8
63869: PPUSH
63870: LD_INT 5
63872: PPUSH
63873: LD_INT 4
63875: PPUSH
63876: CALL_OW 273
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: ST_TO_ADDR
// for i = tmp downto 1 do
63893: LD_ADDR_VAR 0 4
63897: PUSH
63898: DOUBLE
63899: LD_VAR 0 6
63903: INC
63904: ST_TO_ADDR
63905: LD_INT 1
63907: PUSH
63908: FOR_DOWNTO
63909: IFFALSE 64010
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63911: LD_VAR 0 6
63915: PUSH
63916: LD_VAR 0 4
63920: ARRAY
63921: PUSH
63922: LD_INT 1
63924: ARRAY
63925: PPUSH
63926: LD_VAR 0 6
63930: PUSH
63931: LD_VAR 0 4
63935: ARRAY
63936: PUSH
63937: LD_INT 2
63939: ARRAY
63940: PPUSH
63941: CALL_OW 488
63945: NOT
63946: PUSH
63947: LD_VAR 0 6
63951: PUSH
63952: LD_VAR 0 4
63956: ARRAY
63957: PUSH
63958: LD_INT 1
63960: ARRAY
63961: PPUSH
63962: LD_VAR 0 6
63966: PUSH
63967: LD_VAR 0 4
63971: ARRAY
63972: PUSH
63973: LD_INT 2
63975: ARRAY
63976: PPUSH
63977: CALL_OW 428
63981: PUSH
63982: LD_INT 0
63984: NONEQUAL
63985: OR
63986: IFFALSE 64008
// tmp := Delete ( tmp , i ) ;
63988: LD_ADDR_VAR 0 6
63992: PUSH
63993: LD_VAR 0 6
63997: PPUSH
63998: LD_VAR 0 4
64002: PPUSH
64003: CALL_OW 3
64007: ST_TO_ADDR
64008: GO 63908
64010: POP
64011: POP
// j := GetClosestHex ( unit , tmp ) ;
64012: LD_ADDR_VAR 0 5
64016: PUSH
64017: LD_VAR 0 1
64021: PPUSH
64022: LD_VAR 0 6
64026: PPUSH
64027: CALL 63312 0 2
64031: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64032: LD_VAR 0 1
64036: PPUSH
64037: LD_VAR 0 5
64041: PUSH
64042: LD_INT 1
64044: ARRAY
64045: PPUSH
64046: LD_VAR 0 5
64050: PUSH
64051: LD_INT 2
64053: ARRAY
64054: PPUSH
64055: CALL_OW 111
// end ;
64059: LD_VAR 0 3
64063: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64064: LD_INT 0
64066: PPUSH
64067: PPUSH
64068: PPUSH
// uc_side = 0 ;
64069: LD_ADDR_OWVAR 20
64073: PUSH
64074: LD_INT 0
64076: ST_TO_ADDR
// uc_nation = 0 ;
64077: LD_ADDR_OWVAR 21
64081: PUSH
64082: LD_INT 0
64084: ST_TO_ADDR
// InitHc_All ( ) ;
64085: CALL_OW 584
// InitVc ;
64089: CALL_OW 20
// if mastodonts then
64093: LD_VAR 0 6
64097: IFFALSE 64164
// for i = 1 to mastodonts do
64099: LD_ADDR_VAR 0 11
64103: PUSH
64104: DOUBLE
64105: LD_INT 1
64107: DEC
64108: ST_TO_ADDR
64109: LD_VAR 0 6
64113: PUSH
64114: FOR_TO
64115: IFFALSE 64162
// begin vc_chassis := 31 ;
64117: LD_ADDR_OWVAR 37
64121: PUSH
64122: LD_INT 31
64124: ST_TO_ADDR
// vc_control := control_rider ;
64125: LD_ADDR_OWVAR 38
64129: PUSH
64130: LD_INT 4
64132: ST_TO_ADDR
// animal := CreateVehicle ;
64133: LD_ADDR_VAR 0 12
64137: PUSH
64138: CALL_OW 45
64142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64143: LD_VAR 0 12
64147: PPUSH
64148: LD_VAR 0 8
64152: PPUSH
64153: LD_INT 0
64155: PPUSH
64156: CALL 66352 0 3
// end ;
64160: GO 64114
64162: POP
64163: POP
// if horses then
64164: LD_VAR 0 5
64168: IFFALSE 64235
// for i = 1 to horses do
64170: LD_ADDR_VAR 0 11
64174: PUSH
64175: DOUBLE
64176: LD_INT 1
64178: DEC
64179: ST_TO_ADDR
64180: LD_VAR 0 5
64184: PUSH
64185: FOR_TO
64186: IFFALSE 64233
// begin hc_class := 21 ;
64188: LD_ADDR_OWVAR 28
64192: PUSH
64193: LD_INT 21
64195: ST_TO_ADDR
// hc_gallery :=  ;
64196: LD_ADDR_OWVAR 33
64200: PUSH
64201: LD_STRING 
64203: ST_TO_ADDR
// animal := CreateHuman ;
64204: LD_ADDR_VAR 0 12
64208: PUSH
64209: CALL_OW 44
64213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64214: LD_VAR 0 12
64218: PPUSH
64219: LD_VAR 0 8
64223: PPUSH
64224: LD_INT 0
64226: PPUSH
64227: CALL 66352 0 3
// end ;
64231: GO 64185
64233: POP
64234: POP
// if birds then
64235: LD_VAR 0 1
64239: IFFALSE 64306
// for i = 1 to birds do
64241: LD_ADDR_VAR 0 11
64245: PUSH
64246: DOUBLE
64247: LD_INT 1
64249: DEC
64250: ST_TO_ADDR
64251: LD_VAR 0 1
64255: PUSH
64256: FOR_TO
64257: IFFALSE 64304
// begin hc_class = 18 ;
64259: LD_ADDR_OWVAR 28
64263: PUSH
64264: LD_INT 18
64266: ST_TO_ADDR
// hc_gallery =  ;
64267: LD_ADDR_OWVAR 33
64271: PUSH
64272: LD_STRING 
64274: ST_TO_ADDR
// animal := CreateHuman ;
64275: LD_ADDR_VAR 0 12
64279: PUSH
64280: CALL_OW 44
64284: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64285: LD_VAR 0 12
64289: PPUSH
64290: LD_VAR 0 8
64294: PPUSH
64295: LD_INT 0
64297: PPUSH
64298: CALL 66352 0 3
// end ;
64302: GO 64256
64304: POP
64305: POP
// if tigers then
64306: LD_VAR 0 2
64310: IFFALSE 64394
// for i = 1 to tigers do
64312: LD_ADDR_VAR 0 11
64316: PUSH
64317: DOUBLE
64318: LD_INT 1
64320: DEC
64321: ST_TO_ADDR
64322: LD_VAR 0 2
64326: PUSH
64327: FOR_TO
64328: IFFALSE 64392
// begin hc_class = class_tiger ;
64330: LD_ADDR_OWVAR 28
64334: PUSH
64335: LD_INT 14
64337: ST_TO_ADDR
// hc_gallery =  ;
64338: LD_ADDR_OWVAR 33
64342: PUSH
64343: LD_STRING 
64345: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64346: LD_ADDR_OWVAR 35
64350: PUSH
64351: LD_INT 7
64353: NEG
64354: PPUSH
64355: LD_INT 7
64357: PPUSH
64358: CALL_OW 12
64362: ST_TO_ADDR
// animal := CreateHuman ;
64363: LD_ADDR_VAR 0 12
64367: PUSH
64368: CALL_OW 44
64372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64373: LD_VAR 0 12
64377: PPUSH
64378: LD_VAR 0 8
64382: PPUSH
64383: LD_INT 0
64385: PPUSH
64386: CALL 66352 0 3
// end ;
64390: GO 64327
64392: POP
64393: POP
// if apemans then
64394: LD_VAR 0 3
64398: IFFALSE 64521
// for i = 1 to apemans do
64400: LD_ADDR_VAR 0 11
64404: PUSH
64405: DOUBLE
64406: LD_INT 1
64408: DEC
64409: ST_TO_ADDR
64410: LD_VAR 0 3
64414: PUSH
64415: FOR_TO
64416: IFFALSE 64519
// begin hc_class = class_apeman ;
64418: LD_ADDR_OWVAR 28
64422: PUSH
64423: LD_INT 12
64425: ST_TO_ADDR
// hc_gallery =  ;
64426: LD_ADDR_OWVAR 33
64430: PUSH
64431: LD_STRING 
64433: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64434: LD_ADDR_OWVAR 35
64438: PUSH
64439: LD_INT 5
64441: NEG
64442: PPUSH
64443: LD_INT 5
64445: PPUSH
64446: CALL_OW 12
64450: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64451: LD_ADDR_OWVAR 31
64455: PUSH
64456: LD_INT 1
64458: PPUSH
64459: LD_INT 3
64461: PPUSH
64462: CALL_OW 12
64466: PUSH
64467: LD_INT 1
64469: PPUSH
64470: LD_INT 3
64472: PPUSH
64473: CALL_OW 12
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// animal := CreateHuman ;
64490: LD_ADDR_VAR 0 12
64494: PUSH
64495: CALL_OW 44
64499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64500: LD_VAR 0 12
64504: PPUSH
64505: LD_VAR 0 8
64509: PPUSH
64510: LD_INT 0
64512: PPUSH
64513: CALL 66352 0 3
// end ;
64517: GO 64415
64519: POP
64520: POP
// if enchidnas then
64521: LD_VAR 0 4
64525: IFFALSE 64592
// for i = 1 to enchidnas do
64527: LD_ADDR_VAR 0 11
64531: PUSH
64532: DOUBLE
64533: LD_INT 1
64535: DEC
64536: ST_TO_ADDR
64537: LD_VAR 0 4
64541: PUSH
64542: FOR_TO
64543: IFFALSE 64590
// begin hc_class = 13 ;
64545: LD_ADDR_OWVAR 28
64549: PUSH
64550: LD_INT 13
64552: ST_TO_ADDR
// hc_gallery =  ;
64553: LD_ADDR_OWVAR 33
64557: PUSH
64558: LD_STRING 
64560: ST_TO_ADDR
// animal := CreateHuman ;
64561: LD_ADDR_VAR 0 12
64565: PUSH
64566: CALL_OW 44
64570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64571: LD_VAR 0 12
64575: PPUSH
64576: LD_VAR 0 8
64580: PPUSH
64581: LD_INT 0
64583: PPUSH
64584: CALL 66352 0 3
// end ;
64588: GO 64542
64590: POP
64591: POP
// if fishes then
64592: LD_VAR 0 7
64596: IFFALSE 64663
// for i = 1 to fishes do
64598: LD_ADDR_VAR 0 11
64602: PUSH
64603: DOUBLE
64604: LD_INT 1
64606: DEC
64607: ST_TO_ADDR
64608: LD_VAR 0 7
64612: PUSH
64613: FOR_TO
64614: IFFALSE 64661
// begin hc_class = 20 ;
64616: LD_ADDR_OWVAR 28
64620: PUSH
64621: LD_INT 20
64623: ST_TO_ADDR
// hc_gallery =  ;
64624: LD_ADDR_OWVAR 33
64628: PUSH
64629: LD_STRING 
64631: ST_TO_ADDR
// animal := CreateHuman ;
64632: LD_ADDR_VAR 0 12
64636: PUSH
64637: CALL_OW 44
64641: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64642: LD_VAR 0 12
64646: PPUSH
64647: LD_VAR 0 9
64651: PPUSH
64652: LD_INT 0
64654: PPUSH
64655: CALL 66352 0 3
// end ;
64659: GO 64613
64661: POP
64662: POP
// end ;
64663: LD_VAR 0 10
64667: RET
// export function WantHeal ( sci , unit ) ; begin
64668: LD_INT 0
64670: PPUSH
// if GetTaskList ( sci ) > 0 then
64671: LD_VAR 0 1
64675: PPUSH
64676: CALL_OW 437
64680: PUSH
64681: LD_INT 0
64683: GREATER
64684: IFFALSE 64754
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64686: LD_VAR 0 1
64690: PPUSH
64691: CALL_OW 437
64695: PUSH
64696: LD_INT 1
64698: ARRAY
64699: PUSH
64700: LD_INT 1
64702: ARRAY
64703: PUSH
64704: LD_STRING l
64706: EQUAL
64707: PUSH
64708: LD_VAR 0 1
64712: PPUSH
64713: CALL_OW 437
64717: PUSH
64718: LD_INT 1
64720: ARRAY
64721: PUSH
64722: LD_INT 4
64724: ARRAY
64725: PUSH
64726: LD_VAR 0 2
64730: EQUAL
64731: AND
64732: IFFALSE 64744
// result := true else
64734: LD_ADDR_VAR 0 3
64738: PUSH
64739: LD_INT 1
64741: ST_TO_ADDR
64742: GO 64752
// result := false ;
64744: LD_ADDR_VAR 0 3
64748: PUSH
64749: LD_INT 0
64751: ST_TO_ADDR
// end else
64752: GO 64762
// result := false ;
64754: LD_ADDR_VAR 0 3
64758: PUSH
64759: LD_INT 0
64761: ST_TO_ADDR
// end ;
64762: LD_VAR 0 3
64766: RET
// export function HealTarget ( sci ) ; begin
64767: LD_INT 0
64769: PPUSH
// if not sci then
64770: LD_VAR 0 1
64774: NOT
64775: IFFALSE 64779
// exit ;
64777: GO 64844
// result := 0 ;
64779: LD_ADDR_VAR 0 2
64783: PUSH
64784: LD_INT 0
64786: ST_TO_ADDR
// if GetTaskList ( sci ) then
64787: LD_VAR 0 1
64791: PPUSH
64792: CALL_OW 437
64796: IFFALSE 64844
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64798: LD_VAR 0 1
64802: PPUSH
64803: CALL_OW 437
64807: PUSH
64808: LD_INT 1
64810: ARRAY
64811: PUSH
64812: LD_INT 1
64814: ARRAY
64815: PUSH
64816: LD_STRING l
64818: EQUAL
64819: IFFALSE 64844
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64821: LD_ADDR_VAR 0 2
64825: PUSH
64826: LD_VAR 0 1
64830: PPUSH
64831: CALL_OW 437
64835: PUSH
64836: LD_INT 1
64838: ARRAY
64839: PUSH
64840: LD_INT 4
64842: ARRAY
64843: ST_TO_ADDR
// end ;
64844: LD_VAR 0 2
64848: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64849: LD_INT 0
64851: PPUSH
64852: PPUSH
64853: PPUSH
64854: PPUSH
// if not base_units then
64855: LD_VAR 0 1
64859: NOT
64860: IFFALSE 64864
// exit ;
64862: GO 64951
// result := false ;
64864: LD_ADDR_VAR 0 2
64868: PUSH
64869: LD_INT 0
64871: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64872: LD_ADDR_VAR 0 5
64876: PUSH
64877: LD_VAR 0 1
64881: PPUSH
64882: LD_INT 21
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PPUSH
64892: CALL_OW 72
64896: ST_TO_ADDR
// if not tmp then
64897: LD_VAR 0 5
64901: NOT
64902: IFFALSE 64906
// exit ;
64904: GO 64951
// for i in tmp do
64906: LD_ADDR_VAR 0 3
64910: PUSH
64911: LD_VAR 0 5
64915: PUSH
64916: FOR_IN
64917: IFFALSE 64949
// begin result := EnemyInRange ( i , 22 ) ;
64919: LD_ADDR_VAR 0 2
64923: PUSH
64924: LD_VAR 0 3
64928: PPUSH
64929: LD_INT 22
64931: PPUSH
64932: CALL 63187 0 2
64936: ST_TO_ADDR
// if result then
64937: LD_VAR 0 2
64941: IFFALSE 64947
// exit ;
64943: POP
64944: POP
64945: GO 64951
// end ;
64947: GO 64916
64949: POP
64950: POP
// end ;
64951: LD_VAR 0 2
64955: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64956: LD_INT 0
64958: PPUSH
64959: PPUSH
// if not units then
64960: LD_VAR 0 1
64964: NOT
64965: IFFALSE 64969
// exit ;
64967: GO 65039
// result := [ ] ;
64969: LD_ADDR_VAR 0 3
64973: PUSH
64974: EMPTY
64975: ST_TO_ADDR
// for i in units do
64976: LD_ADDR_VAR 0 4
64980: PUSH
64981: LD_VAR 0 1
64985: PUSH
64986: FOR_IN
64987: IFFALSE 65037
// if GetTag ( i ) = tag then
64989: LD_VAR 0 4
64993: PPUSH
64994: CALL_OW 110
64998: PUSH
64999: LD_VAR 0 2
65003: EQUAL
65004: IFFALSE 65035
// result := Insert ( result , result + 1 , i ) ;
65006: LD_ADDR_VAR 0 3
65010: PUSH
65011: LD_VAR 0 3
65015: PPUSH
65016: LD_VAR 0 3
65020: PUSH
65021: LD_INT 1
65023: PLUS
65024: PPUSH
65025: LD_VAR 0 4
65029: PPUSH
65030: CALL_OW 2
65034: ST_TO_ADDR
65035: GO 64986
65037: POP
65038: POP
// end ;
65039: LD_VAR 0 3
65043: RET
// export function IsDriver ( un ) ; begin
65044: LD_INT 0
65046: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65047: LD_ADDR_VAR 0 2
65051: PUSH
65052: LD_VAR 0 1
65056: PUSH
65057: LD_INT 55
65059: PUSH
65060: EMPTY
65061: LIST
65062: PPUSH
65063: CALL_OW 69
65067: IN
65068: ST_TO_ADDR
// end ;
65069: LD_VAR 0 2
65073: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65074: LD_INT 0
65076: PPUSH
65077: PPUSH
// list := [ ] ;
65078: LD_ADDR_VAR 0 5
65082: PUSH
65083: EMPTY
65084: ST_TO_ADDR
// case d of 0 :
65085: LD_VAR 0 3
65089: PUSH
65090: LD_INT 0
65092: DOUBLE
65093: EQUAL
65094: IFTRUE 65098
65096: GO 65231
65098: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65099: LD_ADDR_VAR 0 5
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: LD_INT 4
65111: MINUS
65112: PUSH
65113: LD_VAR 0 2
65117: PUSH
65118: LD_INT 4
65120: MINUS
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: PUSH
65130: LD_VAR 0 1
65134: PUSH
65135: LD_INT 3
65137: MINUS
65138: PUSH
65139: LD_VAR 0 2
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: LIST
65151: PUSH
65152: LD_VAR 0 1
65156: PUSH
65157: LD_INT 4
65159: PLUS
65160: PUSH
65161: LD_VAR 0 2
65165: PUSH
65166: LD_INT 4
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: LD_VAR 0 1
65178: PUSH
65179: LD_INT 3
65181: PLUS
65182: PUSH
65183: LD_VAR 0 2
65187: PUSH
65188: LD_INT 3
65190: PLUS
65191: PUSH
65192: LD_INT 5
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: LIST
65199: PUSH
65200: LD_VAR 0 1
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_INT 4
65212: PLUS
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: ST_TO_ADDR
// end ; 1 :
65229: GO 65929
65231: LD_INT 1
65233: DOUBLE
65234: EQUAL
65235: IFTRUE 65239
65237: GO 65372
65239: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65240: LD_ADDR_VAR 0 5
65244: PUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_VAR 0 2
65254: PUSH
65255: LD_INT 4
65257: MINUS
65258: PUSH
65259: LD_INT 3
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: LD_VAR 0 1
65271: PUSH
65272: LD_INT 3
65274: MINUS
65275: PUSH
65276: LD_VAR 0 2
65280: PUSH
65281: LD_INT 3
65283: MINUS
65284: PUSH
65285: LD_INT 2
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: PUSH
65293: LD_VAR 0 1
65297: PUSH
65298: LD_INT 4
65300: MINUS
65301: PUSH
65302: LD_VAR 0 2
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: PUSH
65315: LD_VAR 0 1
65319: PUSH
65320: LD_VAR 0 2
65324: PUSH
65325: LD_INT 3
65327: PLUS
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: LD_VAR 0 1
65341: PUSH
65342: LD_INT 4
65344: PLUS
65345: PUSH
65346: LD_VAR 0 2
65350: PUSH
65351: LD_INT 4
65353: PLUS
65354: PUSH
65355: LD_INT 5
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: ST_TO_ADDR
// end ; 2 :
65370: GO 65929
65372: LD_INT 2
65374: DOUBLE
65375: EQUAL
65376: IFTRUE 65380
65378: GO 65509
65380: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65381: LD_ADDR_VAR 0 5
65385: PUSH
65386: LD_VAR 0 1
65390: PUSH
65391: LD_VAR 0 2
65395: PUSH
65396: LD_INT 3
65398: MINUS
65399: PUSH
65400: LD_INT 3
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: LD_VAR 0 1
65412: PUSH
65413: LD_INT 4
65415: PLUS
65416: PUSH
65417: LD_VAR 0 2
65421: PUSH
65422: LD_INT 4
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: PUSH
65430: LD_VAR 0 1
65434: PUSH
65435: LD_VAR 0 2
65439: PUSH
65440: LD_INT 4
65442: PLUS
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: PUSH
65452: LD_VAR 0 1
65456: PUSH
65457: LD_INT 3
65459: MINUS
65460: PUSH
65461: LD_VAR 0 2
65465: PUSH
65466: LD_INT 1
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: LIST
65473: PUSH
65474: LD_VAR 0 1
65478: PUSH
65479: LD_INT 4
65481: MINUS
65482: PUSH
65483: LD_VAR 0 2
65487: PUSH
65488: LD_INT 4
65490: MINUS
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: ST_TO_ADDR
// end ; 3 :
65507: GO 65929
65509: LD_INT 3
65511: DOUBLE
65512: EQUAL
65513: IFTRUE 65517
65515: GO 65650
65517: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65518: LD_ADDR_VAR 0 5
65522: PUSH
65523: LD_VAR 0 1
65527: PUSH
65528: LD_INT 3
65530: PLUS
65531: PUSH
65532: LD_VAR 0 2
65536: PUSH
65537: LD_INT 4
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: PUSH
65545: LD_VAR 0 1
65549: PUSH
65550: LD_INT 4
65552: PLUS
65553: PUSH
65554: LD_VAR 0 2
65558: PUSH
65559: LD_INT 4
65561: PLUS
65562: PUSH
65563: LD_INT 5
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: LIST
65570: PUSH
65571: LD_VAR 0 1
65575: PUSH
65576: LD_INT 4
65578: MINUS
65579: PUSH
65580: LD_VAR 0 2
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: PUSH
65593: LD_VAR 0 1
65597: PUSH
65598: LD_VAR 0 2
65602: PUSH
65603: LD_INT 4
65605: MINUS
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: PUSH
65615: LD_VAR 0 1
65619: PUSH
65620: LD_INT 3
65622: MINUS
65623: PUSH
65624: LD_VAR 0 2
65628: PUSH
65629: LD_INT 3
65631: MINUS
65632: PUSH
65633: LD_INT 2
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: ST_TO_ADDR
// end ; 4 :
65648: GO 65929
65650: LD_INT 4
65652: DOUBLE
65653: EQUAL
65654: IFTRUE 65658
65656: GO 65791
65658: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65659: LD_ADDR_VAR 0 5
65663: PUSH
65664: LD_VAR 0 1
65668: PUSH
65669: LD_VAR 0 2
65673: PUSH
65674: LD_INT 4
65676: PLUS
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: PUSH
65686: LD_VAR 0 1
65690: PUSH
65691: LD_INT 3
65693: PLUS
65694: PUSH
65695: LD_VAR 0 2
65699: PUSH
65700: LD_INT 3
65702: PLUS
65703: PUSH
65704: LD_INT 5
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: PUSH
65712: LD_VAR 0 1
65716: PUSH
65717: LD_INT 4
65719: PLUS
65720: PUSH
65721: LD_VAR 0 2
65725: PUSH
65726: LD_INT 4
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: LIST
65733: PUSH
65734: LD_VAR 0 1
65738: PUSH
65739: LD_VAR 0 2
65743: PUSH
65744: LD_INT 3
65746: MINUS
65747: PUSH
65748: LD_INT 3
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: PUSH
65756: LD_VAR 0 1
65760: PUSH
65761: LD_INT 4
65763: MINUS
65764: PUSH
65765: LD_VAR 0 2
65769: PUSH
65770: LD_INT 4
65772: MINUS
65773: PUSH
65774: LD_INT 2
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: ST_TO_ADDR
// end ; 5 :
65789: GO 65929
65791: LD_INT 5
65793: DOUBLE
65794: EQUAL
65795: IFTRUE 65799
65797: GO 65928
65799: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65800: LD_ADDR_VAR 0 5
65804: PUSH
65805: LD_VAR 0 1
65809: PUSH
65810: LD_INT 4
65812: MINUS
65813: PUSH
65814: LD_VAR 0 2
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: LIST
65826: PUSH
65827: LD_VAR 0 1
65831: PUSH
65832: LD_VAR 0 2
65836: PUSH
65837: LD_INT 4
65839: MINUS
65840: PUSH
65841: LD_INT 3
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: LIST
65848: PUSH
65849: LD_VAR 0 1
65853: PUSH
65854: LD_INT 4
65856: PLUS
65857: PUSH
65858: LD_VAR 0 2
65862: PUSH
65863: LD_INT 4
65865: PLUS
65866: PUSH
65867: LD_INT 5
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: PUSH
65875: LD_VAR 0 1
65879: PUSH
65880: LD_INT 3
65882: PLUS
65883: PUSH
65884: LD_VAR 0 2
65888: PUSH
65889: LD_INT 4
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: PUSH
65897: LD_VAR 0 1
65901: PUSH
65902: LD_VAR 0 2
65906: PUSH
65907: LD_INT 3
65909: PLUS
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: ST_TO_ADDR
// end ; end ;
65926: GO 65929
65928: POP
// result := list ;
65929: LD_ADDR_VAR 0 4
65933: PUSH
65934: LD_VAR 0 5
65938: ST_TO_ADDR
// end ;
65939: LD_VAR 0 4
65943: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65944: LD_INT 0
65946: PPUSH
65947: PPUSH
65948: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65949: LD_VAR 0 1
65953: NOT
65954: PUSH
65955: LD_VAR 0 2
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: LD_INT 3
65968: PUSH
65969: LD_INT 4
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: IN
65978: NOT
65979: OR
65980: IFFALSE 65984
// exit ;
65982: GO 66076
// tmp := [ ] ;
65984: LD_ADDR_VAR 0 5
65988: PUSH
65989: EMPTY
65990: ST_TO_ADDR
// for i in units do
65991: LD_ADDR_VAR 0 4
65995: PUSH
65996: LD_VAR 0 1
66000: PUSH
66001: FOR_IN
66002: IFFALSE 66045
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66004: LD_ADDR_VAR 0 5
66008: PUSH
66009: LD_VAR 0 5
66013: PPUSH
66014: LD_VAR 0 5
66018: PUSH
66019: LD_INT 1
66021: PLUS
66022: PPUSH
66023: LD_VAR 0 4
66027: PPUSH
66028: LD_VAR 0 2
66032: PPUSH
66033: CALL_OW 259
66037: PPUSH
66038: CALL_OW 2
66042: ST_TO_ADDR
66043: GO 66001
66045: POP
66046: POP
// if not tmp then
66047: LD_VAR 0 5
66051: NOT
66052: IFFALSE 66056
// exit ;
66054: GO 66076
// result := SortListByListDesc ( units , tmp ) ;
66056: LD_ADDR_VAR 0 3
66060: PUSH
66061: LD_VAR 0 1
66065: PPUSH
66066: LD_VAR 0 5
66070: PPUSH
66071: CALL_OW 77
66075: ST_TO_ADDR
// end ;
66076: LD_VAR 0 3
66080: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66081: LD_INT 0
66083: PPUSH
66084: PPUSH
66085: PPUSH
// result := false ;
66086: LD_ADDR_VAR 0 3
66090: PUSH
66091: LD_INT 0
66093: ST_TO_ADDR
// x := GetX ( building ) ;
66094: LD_ADDR_VAR 0 4
66098: PUSH
66099: LD_VAR 0 2
66103: PPUSH
66104: CALL_OW 250
66108: ST_TO_ADDR
// y := GetY ( building ) ;
66109: LD_ADDR_VAR 0 5
66113: PUSH
66114: LD_VAR 0 2
66118: PPUSH
66119: CALL_OW 251
66123: ST_TO_ADDR
// if not building or not x or not y then
66124: LD_VAR 0 2
66128: NOT
66129: PUSH
66130: LD_VAR 0 4
66134: NOT
66135: OR
66136: PUSH
66137: LD_VAR 0 5
66141: NOT
66142: OR
66143: IFFALSE 66147
// exit ;
66145: GO 66239
// if GetTaskList ( unit ) then
66147: LD_VAR 0 1
66151: PPUSH
66152: CALL_OW 437
66156: IFFALSE 66239
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66158: LD_STRING e
66160: PUSH
66161: LD_VAR 0 1
66165: PPUSH
66166: CALL_OW 437
66170: PUSH
66171: LD_INT 1
66173: ARRAY
66174: PUSH
66175: LD_INT 1
66177: ARRAY
66178: EQUAL
66179: PUSH
66180: LD_VAR 0 4
66184: PUSH
66185: LD_VAR 0 1
66189: PPUSH
66190: CALL_OW 437
66194: PUSH
66195: LD_INT 1
66197: ARRAY
66198: PUSH
66199: LD_INT 2
66201: ARRAY
66202: EQUAL
66203: AND
66204: PUSH
66205: LD_VAR 0 5
66209: PUSH
66210: LD_VAR 0 1
66214: PPUSH
66215: CALL_OW 437
66219: PUSH
66220: LD_INT 1
66222: ARRAY
66223: PUSH
66224: LD_INT 3
66226: ARRAY
66227: EQUAL
66228: AND
66229: IFFALSE 66239
// result := true end ;
66231: LD_ADDR_VAR 0 3
66235: PUSH
66236: LD_INT 1
66238: ST_TO_ADDR
// end ;
66239: LD_VAR 0 3
66243: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66244: LD_INT 0
66246: PPUSH
// result := false ;
66247: LD_ADDR_VAR 0 4
66251: PUSH
66252: LD_INT 0
66254: ST_TO_ADDR
// if GetTaskList ( unit ) then
66255: LD_VAR 0 1
66259: PPUSH
66260: CALL_OW 437
66264: IFFALSE 66347
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66266: LD_STRING M
66268: PUSH
66269: LD_VAR 0 1
66273: PPUSH
66274: CALL_OW 437
66278: PUSH
66279: LD_INT 1
66281: ARRAY
66282: PUSH
66283: LD_INT 1
66285: ARRAY
66286: EQUAL
66287: PUSH
66288: LD_VAR 0 2
66292: PUSH
66293: LD_VAR 0 1
66297: PPUSH
66298: CALL_OW 437
66302: PUSH
66303: LD_INT 1
66305: ARRAY
66306: PUSH
66307: LD_INT 2
66309: ARRAY
66310: EQUAL
66311: AND
66312: PUSH
66313: LD_VAR 0 3
66317: PUSH
66318: LD_VAR 0 1
66322: PPUSH
66323: CALL_OW 437
66327: PUSH
66328: LD_INT 1
66330: ARRAY
66331: PUSH
66332: LD_INT 3
66334: ARRAY
66335: EQUAL
66336: AND
66337: IFFALSE 66347
// result := true ;
66339: LD_ADDR_VAR 0 4
66343: PUSH
66344: LD_INT 1
66346: ST_TO_ADDR
// end ; end ;
66347: LD_VAR 0 4
66351: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66352: LD_INT 0
66354: PPUSH
66355: PPUSH
66356: PPUSH
66357: PPUSH
// if not unit or not area then
66358: LD_VAR 0 1
66362: NOT
66363: PUSH
66364: LD_VAR 0 2
66368: NOT
66369: OR
66370: IFFALSE 66374
// exit ;
66372: GO 66538
// tmp := AreaToList ( area , i ) ;
66374: LD_ADDR_VAR 0 6
66378: PUSH
66379: LD_VAR 0 2
66383: PPUSH
66384: LD_VAR 0 5
66388: PPUSH
66389: CALL_OW 517
66393: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66394: LD_ADDR_VAR 0 5
66398: PUSH
66399: DOUBLE
66400: LD_INT 1
66402: DEC
66403: ST_TO_ADDR
66404: LD_VAR 0 6
66408: PUSH
66409: LD_INT 1
66411: ARRAY
66412: PUSH
66413: FOR_TO
66414: IFFALSE 66536
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66416: LD_ADDR_VAR 0 7
66420: PUSH
66421: LD_VAR 0 6
66425: PUSH
66426: LD_INT 1
66428: ARRAY
66429: PUSH
66430: LD_VAR 0 5
66434: ARRAY
66435: PUSH
66436: LD_VAR 0 6
66440: PUSH
66441: LD_INT 2
66443: ARRAY
66444: PUSH
66445: LD_VAR 0 5
66449: ARRAY
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66455: LD_VAR 0 7
66459: PUSH
66460: LD_INT 1
66462: ARRAY
66463: PPUSH
66464: LD_VAR 0 7
66468: PUSH
66469: LD_INT 2
66471: ARRAY
66472: PPUSH
66473: CALL_OW 428
66477: PUSH
66478: LD_INT 0
66480: EQUAL
66481: IFFALSE 66534
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66483: LD_VAR 0 1
66487: PPUSH
66488: LD_VAR 0 7
66492: PUSH
66493: LD_INT 1
66495: ARRAY
66496: PPUSH
66497: LD_VAR 0 7
66501: PUSH
66502: LD_INT 2
66504: ARRAY
66505: PPUSH
66506: LD_VAR 0 3
66510: PPUSH
66511: CALL_OW 48
// result := IsPlaced ( unit ) ;
66515: LD_ADDR_VAR 0 4
66519: PUSH
66520: LD_VAR 0 1
66524: PPUSH
66525: CALL_OW 305
66529: ST_TO_ADDR
// exit ;
66530: POP
66531: POP
66532: GO 66538
// end ; end ;
66534: GO 66413
66536: POP
66537: POP
// end ;
66538: LD_VAR 0 4
66542: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66543: LD_INT 0
66545: PPUSH
66546: PPUSH
66547: PPUSH
// if not side or side > 8 then
66548: LD_VAR 0 1
66552: NOT
66553: PUSH
66554: LD_VAR 0 1
66558: PUSH
66559: LD_INT 8
66561: GREATER
66562: OR
66563: IFFALSE 66567
// exit ;
66565: GO 66754
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66567: LD_ADDR_VAR 0 4
66571: PUSH
66572: LD_INT 22
66574: PUSH
66575: LD_VAR 0 1
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 21
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PPUSH
66598: CALL_OW 69
66602: ST_TO_ADDR
// if not tmp then
66603: LD_VAR 0 4
66607: NOT
66608: IFFALSE 66612
// exit ;
66610: GO 66754
// enable_addtolog := true ;
66612: LD_ADDR_OWVAR 81
66616: PUSH
66617: LD_INT 1
66619: ST_TO_ADDR
// AddToLog ( [ ) ;
66620: LD_STRING [
66622: PPUSH
66623: CALL_OW 561
// for i in tmp do
66627: LD_ADDR_VAR 0 3
66631: PUSH
66632: LD_VAR 0 4
66636: PUSH
66637: FOR_IN
66638: IFFALSE 66745
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66640: LD_STRING [
66642: PUSH
66643: LD_VAR 0 3
66647: PPUSH
66648: CALL_OW 266
66652: STR
66653: PUSH
66654: LD_STRING , 
66656: STR
66657: PUSH
66658: LD_VAR 0 3
66662: PPUSH
66663: CALL_OW 250
66667: STR
66668: PUSH
66669: LD_STRING , 
66671: STR
66672: PUSH
66673: LD_VAR 0 3
66677: PPUSH
66678: CALL_OW 251
66682: STR
66683: PUSH
66684: LD_STRING , 
66686: STR
66687: PUSH
66688: LD_VAR 0 3
66692: PPUSH
66693: CALL_OW 254
66697: STR
66698: PUSH
66699: LD_STRING , 
66701: STR
66702: PUSH
66703: LD_VAR 0 3
66707: PPUSH
66708: LD_INT 1
66710: PPUSH
66711: CALL_OW 268
66715: STR
66716: PUSH
66717: LD_STRING , 
66719: STR
66720: PUSH
66721: LD_VAR 0 3
66725: PPUSH
66726: LD_INT 2
66728: PPUSH
66729: CALL_OW 268
66733: STR
66734: PUSH
66735: LD_STRING ],
66737: STR
66738: PPUSH
66739: CALL_OW 561
// end ;
66743: GO 66637
66745: POP
66746: POP
// AddToLog ( ]; ) ;
66747: LD_STRING ];
66749: PPUSH
66750: CALL_OW 561
// end ;
66754: LD_VAR 0 2
66758: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66759: LD_INT 0
66761: PPUSH
66762: PPUSH
66763: PPUSH
66764: PPUSH
66765: PPUSH
// if not area or not rate or not max then
66766: LD_VAR 0 1
66770: NOT
66771: PUSH
66772: LD_VAR 0 2
66776: NOT
66777: OR
66778: PUSH
66779: LD_VAR 0 4
66783: NOT
66784: OR
66785: IFFALSE 66789
// exit ;
66787: GO 66981
// while 1 do
66789: LD_INT 1
66791: IFFALSE 66981
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66793: LD_ADDR_VAR 0 9
66797: PUSH
66798: LD_VAR 0 1
66802: PPUSH
66803: LD_INT 1
66805: PPUSH
66806: CALL_OW 287
66810: PUSH
66811: LD_INT 10
66813: MUL
66814: ST_TO_ADDR
// r := rate / 10 ;
66815: LD_ADDR_VAR 0 7
66819: PUSH
66820: LD_VAR 0 2
66824: PUSH
66825: LD_INT 10
66827: DIVREAL
66828: ST_TO_ADDR
// time := 1 1$00 ;
66829: LD_ADDR_VAR 0 8
66833: PUSH
66834: LD_INT 2100
66836: ST_TO_ADDR
// if amount < min then
66837: LD_VAR 0 9
66841: PUSH
66842: LD_VAR 0 3
66846: LESS
66847: IFFALSE 66865
// r := r * 2 else
66849: LD_ADDR_VAR 0 7
66853: PUSH
66854: LD_VAR 0 7
66858: PUSH
66859: LD_INT 2
66861: MUL
66862: ST_TO_ADDR
66863: GO 66891
// if amount > max then
66865: LD_VAR 0 9
66869: PUSH
66870: LD_VAR 0 4
66874: GREATER
66875: IFFALSE 66891
// r := r / 2 ;
66877: LD_ADDR_VAR 0 7
66881: PUSH
66882: LD_VAR 0 7
66886: PUSH
66887: LD_INT 2
66889: DIVREAL
66890: ST_TO_ADDR
// time := time / r ;
66891: LD_ADDR_VAR 0 8
66895: PUSH
66896: LD_VAR 0 8
66900: PUSH
66901: LD_VAR 0 7
66905: DIVREAL
66906: ST_TO_ADDR
// if time < 0 then
66907: LD_VAR 0 8
66911: PUSH
66912: LD_INT 0
66914: LESS
66915: IFFALSE 66932
// time := time * - 1 ;
66917: LD_ADDR_VAR 0 8
66921: PUSH
66922: LD_VAR 0 8
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: MUL
66931: ST_TO_ADDR
// wait ( time ) ;
66932: LD_VAR 0 8
66936: PPUSH
66937: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66941: LD_INT 35
66943: PPUSH
66944: LD_INT 875
66946: PPUSH
66947: CALL_OW 12
66951: PPUSH
66952: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66956: LD_INT 1
66958: PPUSH
66959: LD_INT 5
66961: PPUSH
66962: CALL_OW 12
66966: PPUSH
66967: LD_VAR 0 1
66971: PPUSH
66972: LD_INT 1
66974: PPUSH
66975: CALL_OW 55
// end ;
66979: GO 66789
// end ;
66981: LD_VAR 0 5
66985: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66986: LD_INT 0
66988: PPUSH
66989: PPUSH
66990: PPUSH
66991: PPUSH
66992: PPUSH
66993: PPUSH
66994: PPUSH
66995: PPUSH
// if not turrets or not factories then
66996: LD_VAR 0 1
67000: NOT
67001: PUSH
67002: LD_VAR 0 2
67006: NOT
67007: OR
67008: IFFALSE 67012
// exit ;
67010: GO 67319
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67012: LD_ADDR_VAR 0 10
67016: PUSH
67017: LD_INT 5
67019: PUSH
67020: LD_INT 6
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 2
67029: PUSH
67030: LD_INT 4
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 3
67039: PUSH
67040: LD_INT 5
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 24
67054: PUSH
67055: LD_INT 25
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 23
67064: PUSH
67065: LD_INT 27
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 42
67078: PUSH
67079: LD_INT 43
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 44
67088: PUSH
67089: LD_INT 46
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 45
67098: PUSH
67099: LD_INT 47
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: LIST
67115: ST_TO_ADDR
// result := [ ] ;
67116: LD_ADDR_VAR 0 3
67120: PUSH
67121: EMPTY
67122: ST_TO_ADDR
// for i in turrets do
67123: LD_ADDR_VAR 0 4
67127: PUSH
67128: LD_VAR 0 1
67132: PUSH
67133: FOR_IN
67134: IFFALSE 67317
// begin nat := GetNation ( i ) ;
67136: LD_ADDR_VAR 0 7
67140: PUSH
67141: LD_VAR 0 4
67145: PPUSH
67146: CALL_OW 248
67150: ST_TO_ADDR
// weapon := 0 ;
67151: LD_ADDR_VAR 0 8
67155: PUSH
67156: LD_INT 0
67158: ST_TO_ADDR
// if not nat then
67159: LD_VAR 0 7
67163: NOT
67164: IFFALSE 67168
// continue ;
67166: GO 67133
// for j in list [ nat ] do
67168: LD_ADDR_VAR 0 5
67172: PUSH
67173: LD_VAR 0 10
67177: PUSH
67178: LD_VAR 0 7
67182: ARRAY
67183: PUSH
67184: FOR_IN
67185: IFFALSE 67226
// if GetBWeapon ( i ) = j [ 1 ] then
67187: LD_VAR 0 4
67191: PPUSH
67192: CALL_OW 269
67196: PUSH
67197: LD_VAR 0 5
67201: PUSH
67202: LD_INT 1
67204: ARRAY
67205: EQUAL
67206: IFFALSE 67224
// begin weapon := j [ 2 ] ;
67208: LD_ADDR_VAR 0 8
67212: PUSH
67213: LD_VAR 0 5
67217: PUSH
67218: LD_INT 2
67220: ARRAY
67221: ST_TO_ADDR
// break ;
67222: GO 67226
// end ;
67224: GO 67184
67226: POP
67227: POP
// if not weapon then
67228: LD_VAR 0 8
67232: NOT
67233: IFFALSE 67237
// continue ;
67235: GO 67133
// for k in factories do
67237: LD_ADDR_VAR 0 6
67241: PUSH
67242: LD_VAR 0 2
67246: PUSH
67247: FOR_IN
67248: IFFALSE 67313
// begin weapons := AvailableWeaponList ( k ) ;
67250: LD_ADDR_VAR 0 9
67254: PUSH
67255: LD_VAR 0 6
67259: PPUSH
67260: CALL_OW 478
67264: ST_TO_ADDR
// if not weapons then
67265: LD_VAR 0 9
67269: NOT
67270: IFFALSE 67274
// continue ;
67272: GO 67247
// if weapon in weapons then
67274: LD_VAR 0 8
67278: PUSH
67279: LD_VAR 0 9
67283: IN
67284: IFFALSE 67311
// begin result := [ i , weapon ] ;
67286: LD_ADDR_VAR 0 3
67290: PUSH
67291: LD_VAR 0 4
67295: PUSH
67296: LD_VAR 0 8
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: ST_TO_ADDR
// exit ;
67305: POP
67306: POP
67307: POP
67308: POP
67309: GO 67319
// end ; end ;
67311: GO 67247
67313: POP
67314: POP
// end ;
67315: GO 67133
67317: POP
67318: POP
// end ;
67319: LD_VAR 0 3
67323: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67324: LD_INT 0
67326: PPUSH
// if not side or side > 8 then
67327: LD_VAR 0 3
67331: NOT
67332: PUSH
67333: LD_VAR 0 3
67337: PUSH
67338: LD_INT 8
67340: GREATER
67341: OR
67342: IFFALSE 67346
// exit ;
67344: GO 67405
// if not range then
67346: LD_VAR 0 4
67350: NOT
67351: IFFALSE 67362
// range := - 12 ;
67353: LD_ADDR_VAR 0 4
67357: PUSH
67358: LD_INT 12
67360: NEG
67361: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67362: LD_VAR 0 1
67366: PPUSH
67367: LD_VAR 0 2
67371: PPUSH
67372: LD_VAR 0 3
67376: PPUSH
67377: LD_VAR 0 4
67381: PPUSH
67382: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67386: LD_VAR 0 1
67390: PPUSH
67391: LD_VAR 0 2
67395: PPUSH
67396: LD_VAR 0 3
67400: PPUSH
67401: CALL_OW 331
// end ;
67405: LD_VAR 0 5
67409: RET
// export function Video ( mode ) ; begin
67410: LD_INT 0
67412: PPUSH
// ingame_video = mode ;
67413: LD_ADDR_OWVAR 52
67417: PUSH
67418: LD_VAR 0 1
67422: ST_TO_ADDR
// interface_hidden = mode ;
67423: LD_ADDR_OWVAR 54
67427: PUSH
67428: LD_VAR 0 1
67432: ST_TO_ADDR
// end ;
67433: LD_VAR 0 2
67437: RET
// export function Join ( array , element ) ; begin
67438: LD_INT 0
67440: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67441: LD_ADDR_VAR 0 3
67445: PUSH
67446: LD_VAR 0 1
67450: PPUSH
67451: LD_VAR 0 1
67455: PUSH
67456: LD_INT 1
67458: PLUS
67459: PPUSH
67460: LD_VAR 0 2
67464: PPUSH
67465: CALL_OW 1
67469: ST_TO_ADDR
// end ;
67470: LD_VAR 0 3
67474: RET
// export function JoinUnion ( array , element ) ; begin
67475: LD_INT 0
67477: PPUSH
// result := array union element ;
67478: LD_ADDR_VAR 0 3
67482: PUSH
67483: LD_VAR 0 1
67487: PUSH
67488: LD_VAR 0 2
67492: UNION
67493: ST_TO_ADDR
// end ;
67494: LD_VAR 0 3
67498: RET
// export function GetBehemoths ( side ) ; begin
67499: LD_INT 0
67501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67502: LD_ADDR_VAR 0 2
67506: PUSH
67507: LD_INT 22
67509: PUSH
67510: LD_VAR 0 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 31
67521: PUSH
67522: LD_INT 25
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PPUSH
67533: CALL_OW 69
67537: ST_TO_ADDR
// end ;
67538: LD_VAR 0 2
67542: RET
// export function Shuffle ( array ) ; var i , index ; begin
67543: LD_INT 0
67545: PPUSH
67546: PPUSH
67547: PPUSH
// result := [ ] ;
67548: LD_ADDR_VAR 0 2
67552: PUSH
67553: EMPTY
67554: ST_TO_ADDR
// if not array then
67555: LD_VAR 0 1
67559: NOT
67560: IFFALSE 67564
// exit ;
67562: GO 67663
// Randomize ;
67564: CALL_OW 10
// for i = array downto 1 do
67568: LD_ADDR_VAR 0 3
67572: PUSH
67573: DOUBLE
67574: LD_VAR 0 1
67578: INC
67579: ST_TO_ADDR
67580: LD_INT 1
67582: PUSH
67583: FOR_DOWNTO
67584: IFFALSE 67661
// begin index := rand ( 1 , array ) ;
67586: LD_ADDR_VAR 0 4
67590: PUSH
67591: LD_INT 1
67593: PPUSH
67594: LD_VAR 0 1
67598: PPUSH
67599: CALL_OW 12
67603: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67604: LD_ADDR_VAR 0 2
67608: PUSH
67609: LD_VAR 0 2
67613: PPUSH
67614: LD_VAR 0 2
67618: PUSH
67619: LD_INT 1
67621: PLUS
67622: PPUSH
67623: LD_VAR 0 1
67627: PUSH
67628: LD_VAR 0 4
67632: ARRAY
67633: PPUSH
67634: CALL_OW 2
67638: ST_TO_ADDR
// array := Delete ( array , index ) ;
67639: LD_ADDR_VAR 0 1
67643: PUSH
67644: LD_VAR 0 1
67648: PPUSH
67649: LD_VAR 0 4
67653: PPUSH
67654: CALL_OW 3
67658: ST_TO_ADDR
// end ;
67659: GO 67583
67661: POP
67662: POP
// end ;
67663: LD_VAR 0 2
67667: RET
// export function GetBaseMaterials ( base ) ; begin
67668: LD_INT 0
67670: PPUSH
// result := [ 0 , 0 , 0 ] ;
67671: LD_ADDR_VAR 0 2
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: LD_INT 0
67681: PUSH
67682: LD_INT 0
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: ST_TO_ADDR
// if not base then
67690: LD_VAR 0 1
67694: NOT
67695: IFFALSE 67699
// exit ;
67697: GO 67748
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67699: LD_ADDR_VAR 0 2
67703: PUSH
67704: LD_VAR 0 1
67708: PPUSH
67709: LD_INT 1
67711: PPUSH
67712: CALL_OW 275
67716: PUSH
67717: LD_VAR 0 1
67721: PPUSH
67722: LD_INT 2
67724: PPUSH
67725: CALL_OW 275
67729: PUSH
67730: LD_VAR 0 1
67734: PPUSH
67735: LD_INT 3
67737: PPUSH
67738: CALL_OW 275
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: LIST
67747: ST_TO_ADDR
// end ;
67748: LD_VAR 0 2
67752: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67753: LD_INT 0
67755: PPUSH
67756: PPUSH
// result := array ;
67757: LD_ADDR_VAR 0 3
67761: PUSH
67762: LD_VAR 0 1
67766: ST_TO_ADDR
// if size > 0 then
67767: LD_VAR 0 2
67771: PUSH
67772: LD_INT 0
67774: GREATER
67775: IFFALSE 67821
// for i := array downto size do
67777: LD_ADDR_VAR 0 4
67781: PUSH
67782: DOUBLE
67783: LD_VAR 0 1
67787: INC
67788: ST_TO_ADDR
67789: LD_VAR 0 2
67793: PUSH
67794: FOR_DOWNTO
67795: IFFALSE 67819
// result := Delete ( result , result ) ;
67797: LD_ADDR_VAR 0 3
67801: PUSH
67802: LD_VAR 0 3
67806: PPUSH
67807: LD_VAR 0 3
67811: PPUSH
67812: CALL_OW 3
67816: ST_TO_ADDR
67817: GO 67794
67819: POP
67820: POP
// end ;
67821: LD_VAR 0 3
67825: RET
// export function ComExit ( unit ) ; var tmp ; begin
67826: LD_INT 0
67828: PPUSH
67829: PPUSH
// if not IsInUnit ( unit ) then
67830: LD_VAR 0 1
67834: PPUSH
67835: CALL_OW 310
67839: NOT
67840: IFFALSE 67844
// exit ;
67842: GO 67904
// tmp := IsInUnit ( unit ) ;
67844: LD_ADDR_VAR 0 3
67848: PUSH
67849: LD_VAR 0 1
67853: PPUSH
67854: CALL_OW 310
67858: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67859: LD_VAR 0 3
67863: PPUSH
67864: CALL_OW 247
67868: PUSH
67869: LD_INT 2
67871: EQUAL
67872: IFFALSE 67885
// ComExitVehicle ( unit ) else
67874: LD_VAR 0 1
67878: PPUSH
67879: CALL_OW 121
67883: GO 67894
// ComExitBuilding ( unit ) ;
67885: LD_VAR 0 1
67889: PPUSH
67890: CALL_OW 122
// result := tmp ;
67894: LD_ADDR_VAR 0 2
67898: PUSH
67899: LD_VAR 0 3
67903: ST_TO_ADDR
// end ;
67904: LD_VAR 0 2
67908: RET
// export function ComExitAll ( units ) ; var i ; begin
67909: LD_INT 0
67911: PPUSH
67912: PPUSH
// if not units then
67913: LD_VAR 0 1
67917: NOT
67918: IFFALSE 67922
// exit ;
67920: GO 67948
// for i in units do
67922: LD_ADDR_VAR 0 3
67926: PUSH
67927: LD_VAR 0 1
67931: PUSH
67932: FOR_IN
67933: IFFALSE 67946
// ComExit ( i ) ;
67935: LD_VAR 0 3
67939: PPUSH
67940: CALL 67826 0 1
67944: GO 67932
67946: POP
67947: POP
// end ;
67948: LD_VAR 0 2
67952: RET
// export function ResetHc ; begin
67953: LD_INT 0
67955: PPUSH
// InitHc ;
67956: CALL_OW 19
// hc_importance := 0 ;
67960: LD_ADDR_OWVAR 32
67964: PUSH
67965: LD_INT 0
67967: ST_TO_ADDR
// end ;
67968: LD_VAR 0 1
67972: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67973: LD_INT 0
67975: PPUSH
67976: PPUSH
67977: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67978: LD_ADDR_VAR 0 6
67982: PUSH
67983: LD_VAR 0 1
67987: PUSH
67988: LD_VAR 0 3
67992: PLUS
67993: PUSH
67994: LD_INT 2
67996: DIV
67997: ST_TO_ADDR
// if _x < 0 then
67998: LD_VAR 0 6
68002: PUSH
68003: LD_INT 0
68005: LESS
68006: IFFALSE 68023
// _x := _x * - 1 ;
68008: LD_ADDR_VAR 0 6
68012: PUSH
68013: LD_VAR 0 6
68017: PUSH
68018: LD_INT 1
68020: NEG
68021: MUL
68022: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68023: LD_ADDR_VAR 0 7
68027: PUSH
68028: LD_VAR 0 2
68032: PUSH
68033: LD_VAR 0 4
68037: PLUS
68038: PUSH
68039: LD_INT 2
68041: DIV
68042: ST_TO_ADDR
// if _y < 0 then
68043: LD_VAR 0 7
68047: PUSH
68048: LD_INT 0
68050: LESS
68051: IFFALSE 68068
// _y := _y * - 1 ;
68053: LD_ADDR_VAR 0 7
68057: PUSH
68058: LD_VAR 0 7
68062: PUSH
68063: LD_INT 1
68065: NEG
68066: MUL
68067: ST_TO_ADDR
// result := [ _x , _y ] ;
68068: LD_ADDR_VAR 0 5
68072: PUSH
68073: LD_VAR 0 6
68077: PUSH
68078: LD_VAR 0 7
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: ST_TO_ADDR
// end ;
68087: LD_VAR 0 5
68091: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68092: LD_INT 0
68094: PPUSH
68095: PPUSH
68096: PPUSH
68097: PPUSH
// task := GetTaskList ( unit ) ;
68098: LD_ADDR_VAR 0 7
68102: PUSH
68103: LD_VAR 0 1
68107: PPUSH
68108: CALL_OW 437
68112: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68113: LD_VAR 0 7
68117: NOT
68118: PUSH
68119: LD_VAR 0 1
68123: PPUSH
68124: LD_VAR 0 2
68128: PPUSH
68129: CALL_OW 308
68133: NOT
68134: AND
68135: IFFALSE 68139
// exit ;
68137: GO 68257
// if IsInArea ( unit , area ) then
68139: LD_VAR 0 1
68143: PPUSH
68144: LD_VAR 0 2
68148: PPUSH
68149: CALL_OW 308
68153: IFFALSE 68171
// begin ComMoveToArea ( unit , goAway ) ;
68155: LD_VAR 0 1
68159: PPUSH
68160: LD_VAR 0 3
68164: PPUSH
68165: CALL_OW 113
// exit ;
68169: GO 68257
// end ; if task [ 1 ] [ 1 ] <> M then
68171: LD_VAR 0 7
68175: PUSH
68176: LD_INT 1
68178: ARRAY
68179: PUSH
68180: LD_INT 1
68182: ARRAY
68183: PUSH
68184: LD_STRING M
68186: NONEQUAL
68187: IFFALSE 68191
// exit ;
68189: GO 68257
// x := task [ 1 ] [ 2 ] ;
68191: LD_ADDR_VAR 0 5
68195: PUSH
68196: LD_VAR 0 7
68200: PUSH
68201: LD_INT 1
68203: ARRAY
68204: PUSH
68205: LD_INT 2
68207: ARRAY
68208: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68209: LD_ADDR_VAR 0 6
68213: PUSH
68214: LD_VAR 0 7
68218: PUSH
68219: LD_INT 1
68221: ARRAY
68222: PUSH
68223: LD_INT 3
68225: ARRAY
68226: ST_TO_ADDR
// if InArea ( x , y , area ) then
68227: LD_VAR 0 5
68231: PPUSH
68232: LD_VAR 0 6
68236: PPUSH
68237: LD_VAR 0 2
68241: PPUSH
68242: CALL_OW 309
68246: IFFALSE 68257
// ComStop ( unit ) ;
68248: LD_VAR 0 1
68252: PPUSH
68253: CALL_OW 141
// end ;
68257: LD_VAR 0 4
68261: RET
// export function Abs ( value ) ; begin
68262: LD_INT 0
68264: PPUSH
// result := value ;
68265: LD_ADDR_VAR 0 2
68269: PUSH
68270: LD_VAR 0 1
68274: ST_TO_ADDR
// if value < 0 then
68275: LD_VAR 0 1
68279: PUSH
68280: LD_INT 0
68282: LESS
68283: IFFALSE 68300
// result := value * - 1 ;
68285: LD_ADDR_VAR 0 2
68289: PUSH
68290: LD_VAR 0 1
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: MUL
68299: ST_TO_ADDR
// end ;
68300: LD_VAR 0 2
68304: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68305: LD_INT 0
68307: PPUSH
68308: PPUSH
68309: PPUSH
68310: PPUSH
68311: PPUSH
68312: PPUSH
68313: PPUSH
68314: PPUSH
// if not unit or not building then
68315: LD_VAR 0 1
68319: NOT
68320: PUSH
68321: LD_VAR 0 2
68325: NOT
68326: OR
68327: IFFALSE 68331
// exit ;
68329: GO 68557
// x := GetX ( building ) ;
68331: LD_ADDR_VAR 0 4
68335: PUSH
68336: LD_VAR 0 2
68340: PPUSH
68341: CALL_OW 250
68345: ST_TO_ADDR
// y := GetY ( building ) ;
68346: LD_ADDR_VAR 0 6
68350: PUSH
68351: LD_VAR 0 2
68355: PPUSH
68356: CALL_OW 251
68360: ST_TO_ADDR
// d := GetDir ( building ) ;
68361: LD_ADDR_VAR 0 8
68365: PUSH
68366: LD_VAR 0 2
68370: PPUSH
68371: CALL_OW 254
68375: ST_TO_ADDR
// r := 4 ;
68376: LD_ADDR_VAR 0 9
68380: PUSH
68381: LD_INT 4
68383: ST_TO_ADDR
// for i := 1 to 5 do
68384: LD_ADDR_VAR 0 10
68388: PUSH
68389: DOUBLE
68390: LD_INT 1
68392: DEC
68393: ST_TO_ADDR
68394: LD_INT 5
68396: PUSH
68397: FOR_TO
68398: IFFALSE 68555
// begin _x := ShiftX ( x , d , r + i ) ;
68400: LD_ADDR_VAR 0 5
68404: PUSH
68405: LD_VAR 0 4
68409: PPUSH
68410: LD_VAR 0 8
68414: PPUSH
68415: LD_VAR 0 9
68419: PUSH
68420: LD_VAR 0 10
68424: PLUS
68425: PPUSH
68426: CALL_OW 272
68430: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68431: LD_ADDR_VAR 0 7
68435: PUSH
68436: LD_VAR 0 6
68440: PPUSH
68441: LD_VAR 0 8
68445: PPUSH
68446: LD_VAR 0 9
68450: PUSH
68451: LD_VAR 0 10
68455: PLUS
68456: PPUSH
68457: CALL_OW 273
68461: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68462: LD_VAR 0 5
68466: PPUSH
68467: LD_VAR 0 7
68471: PPUSH
68472: CALL_OW 488
68476: PUSH
68477: LD_VAR 0 5
68481: PPUSH
68482: LD_VAR 0 7
68486: PPUSH
68487: CALL_OW 428
68491: PPUSH
68492: CALL_OW 247
68496: PUSH
68497: LD_INT 3
68499: PUSH
68500: LD_INT 2
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: IN
68507: NOT
68508: AND
68509: IFFALSE 68553
// begin ComMoveXY ( unit , _x , _y ) ;
68511: LD_VAR 0 1
68515: PPUSH
68516: LD_VAR 0 5
68520: PPUSH
68521: LD_VAR 0 7
68525: PPUSH
68526: CALL_OW 111
// result := [ _x , _y ] ;
68530: LD_ADDR_VAR 0 3
68534: PUSH
68535: LD_VAR 0 5
68539: PUSH
68540: LD_VAR 0 7
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: ST_TO_ADDR
// exit ;
68549: POP
68550: POP
68551: GO 68557
// end ; end ;
68553: GO 68397
68555: POP
68556: POP
// end ;
68557: LD_VAR 0 3
68561: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68562: LD_INT 0
68564: PPUSH
68565: PPUSH
68566: PPUSH
// result := 0 ;
68567: LD_ADDR_VAR 0 3
68571: PUSH
68572: LD_INT 0
68574: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68575: LD_VAR 0 1
68579: PUSH
68580: LD_INT 0
68582: LESS
68583: PUSH
68584: LD_VAR 0 1
68588: PUSH
68589: LD_INT 8
68591: GREATER
68592: OR
68593: PUSH
68594: LD_VAR 0 2
68598: PUSH
68599: LD_INT 0
68601: LESS
68602: OR
68603: PUSH
68604: LD_VAR 0 2
68608: PUSH
68609: LD_INT 8
68611: GREATER
68612: OR
68613: IFFALSE 68617
// exit ;
68615: GO 68692
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68617: LD_ADDR_VAR 0 4
68621: PUSH
68622: LD_INT 22
68624: PUSH
68625: LD_VAR 0 2
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PPUSH
68634: CALL_OW 69
68638: PUSH
68639: FOR_IN
68640: IFFALSE 68690
// begin un := UnitShoot ( i ) ;
68642: LD_ADDR_VAR 0 5
68646: PUSH
68647: LD_VAR 0 4
68651: PPUSH
68652: CALL_OW 504
68656: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68657: LD_VAR 0 5
68661: PPUSH
68662: CALL_OW 255
68666: PUSH
68667: LD_VAR 0 1
68671: EQUAL
68672: IFFALSE 68688
// begin result := un ;
68674: LD_ADDR_VAR 0 3
68678: PUSH
68679: LD_VAR 0 5
68683: ST_TO_ADDR
// exit ;
68684: POP
68685: POP
68686: GO 68692
// end ; end ;
68688: GO 68639
68690: POP
68691: POP
// end ;
68692: LD_VAR 0 3
68696: RET
// export function GetCargoBay ( units ) ; begin
68697: LD_INT 0
68699: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68700: LD_ADDR_VAR 0 2
68704: PUSH
68705: LD_VAR 0 1
68709: PPUSH
68710: LD_INT 2
68712: PUSH
68713: LD_INT 34
68715: PUSH
68716: LD_INT 12
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 34
68725: PUSH
68726: LD_INT 51
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 34
68735: PUSH
68736: LD_INT 32
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 34
68745: PUSH
68746: LD_EXP 45
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: PPUSH
68762: CALL_OW 72
68766: ST_TO_ADDR
// end ; end_of_file
68767: LD_VAR 0 2
68771: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68772: LD_VAR 0 1
68776: PUSH
68777: LD_INT 200
68779: DOUBLE
68780: GREATEREQUAL
68781: IFFALSE 68789
68783: LD_INT 299
68785: DOUBLE
68786: LESSEQUAL
68787: IFTRUE 68791
68789: GO 68823
68791: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68792: LD_VAR 0 1
68796: PPUSH
68797: LD_VAR 0 2
68801: PPUSH
68802: LD_VAR 0 3
68806: PPUSH
68807: LD_VAR 0 4
68811: PPUSH
68812: LD_VAR 0 5
68816: PPUSH
68817: CALL 14061 0 5
68821: GO 68900
68823: LD_INT 300
68825: DOUBLE
68826: GREATEREQUAL
68827: IFFALSE 68835
68829: LD_INT 399
68831: DOUBLE
68832: LESSEQUAL
68833: IFTRUE 68837
68835: GO 68899
68837: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68838: LD_VAR 0 1
68842: PPUSH
68843: LD_VAR 0 2
68847: PPUSH
68848: LD_VAR 0 3
68852: PPUSH
68853: LD_VAR 0 4
68857: PPUSH
68858: LD_VAR 0 5
68862: PPUSH
68863: LD_VAR 0 6
68867: PPUSH
68868: LD_VAR 0 7
68872: PPUSH
68873: LD_VAR 0 8
68877: PPUSH
68878: LD_VAR 0 9
68882: PPUSH
68883: LD_VAR 0 10
68887: PPUSH
68888: LD_VAR 0 11
68892: PPUSH
68893: CALL 29136 0 11
68897: GO 68900
68899: POP
// end ;
68900: PPOPN 11
68902: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68903: LD_VAR 0 1
68907: PPUSH
68908: LD_VAR 0 2
68912: PPUSH
68913: LD_VAR 0 3
68917: PPUSH
68918: LD_VAR 0 4
68922: PPUSH
68923: LD_VAR 0 5
68927: PPUSH
68928: CALL 14043 0 5
// end ; end_of_file
68932: PPOPN 5
68934: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68935: LD_VAR 0 1
68939: PPUSH
68940: LD_VAR 0 2
68944: PPUSH
68945: LD_VAR 0 3
68949: PPUSH
68950: LD_VAR 0 4
68954: PPUSH
68955: LD_VAR 0 5
68959: PPUSH
68960: LD_VAR 0 6
68964: PPUSH
68965: CALL 17944 0 6
// end ;
68969: PPOPN 6
68971: END
